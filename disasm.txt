
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f3 77 00 00       	call   c0007813 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 34 fb 01 c0       	mov    eax,0xc001fb34
c0000025:	3d 34 fb 01 c0       	cmp    eax,0xc001fb34
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 34 fb 01 c0       	push   0xc001fb34
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 34 fb 01 c0       	mov    eax,0xc001fb34
c0000051:	2d 34 fb 01 c0       	sub    eax,0xc001fb34
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 34 fb 01 c0       	push   0xc001fb34
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 10 02 c0 00 	cmp    BYTE PTR ds:0xc00210c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb c8 cd 01 c0       	mov    ebx,0xc001cdc8
c0000097:	81 eb c4 cd 01 c0    	sub    ebx,0xc001cdc4
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be c4 cd 01 c0       	mov    esi,0xc001cdc4
c00000a6:	a1 c4 10 02 c0       	mov    eax,ds:0xc00210c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 10 02 c0       	mov    ds:0xc00210c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 10 02 c0       	mov    eax,ds:0xc00210c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 34 fb 01 c0       	push   0xc001fb34
c00000d8:	e8 23 ff ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 10 02 c0 01 	mov    BYTE PTR ds:0xc00210c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 10 02 c0       	push   0xc00210c8
c0000108:	68 34 fb 01 c0       	push   0xc001fb34
c000010d:	e8 ee fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000297:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000029a:	0f 20 d9             	mov    ecx,cr3
c000029d:	39 c8                	cmp    eax,ecx
c000029f:	74 03                	je     c00002a4 <commonThreadSwitch.doneVAS>
c00002a1:	0f 22 d8             	mov    cr3,eax

c00002a4 <commonThreadSwitch.doneVAS>:
c00002a4:	85 d2                	test   edx,edx
c00002a6:	75 11                	jne    c00002b9 <commonThreadSwitch.firstTime>
c00002a8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ab:	e8 5c 2d 01 00       	call   c001300c <changeTSS>
c00002b0:	5d                   	pop    ebp
c00002b1:	5f                   	pop    edi
c00002b2:	5e                   	pop    esi
c00002b3:	5a                   	pop    edx
c00002b4:	59                   	pop    ecx
c00002b5:	5b                   	pop    ebx
c00002b6:	58                   	pop    eax
c00002b7:	9d                   	popf   
c00002b8:	c3                   	ret    

c00002b9 <commonThreadSwitch.firstTime>:
c00002b9:	fa                   	cli    
c00002ba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002bd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002c2:	60                   	pusha  
c00002c3:	e8 2a a0 00 00       	call   c000a2f2 <mapVASFirstTime>
c00002c8:	61                   	popa   
c00002c9:	89 c4                	mov    esp,eax
c00002cb:	56                   	push   esi
c00002cc:	52                   	push   edx
c00002cd:	e8 3a 2d 01 00       	call   c001300c <changeTSS>
c00002d2:	5a                   	pop    edx
c00002d3:	5e                   	pop    esi
c00002d4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002db:	5d                   	pop    ebp
c00002dc:	5f                   	pop    edi
c00002dd:	5e                   	pop    esi
c00002de:	59                   	pop    ecx
c00002df:	59                   	pop    ecx
c00002e0:	5b                   	pop    ebx
c00002e1:	58                   	pop    eax
c00002e2:	81 c4 04 00 00 00    	add    esp,0x4
c00002e8:	6a 02                	push   0x2
c00002ea:	9d                   	popf   
c00002eb:	52                   	push   edx
c00002ec:	e8 43 32 01 00       	call   c0013534 <taskStartupFunction>
c00002f1:	5a                   	pop    edx
c00002f2:	50                   	push   eax
c00002f3:	ff d2                	call   edx
c00002f5:	e8 92 38 01 00       	call   c0013b8c <taskReturned>
c00002fa:	e9 fb ff ff ff       	jmp    c00002fa <commonThreadSwitch.firstTime+0x41>

c00002ff <asmQuickAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmQuickAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 02                	jb     c000030e <asmQuickAcquireLock.spin_with_pause>
c000030c:	fa                   	cli    
c000030d:	c3                   	ret    

c000030e <asmQuickAcquireLock.spin_with_pause>:
c000030e:	f3 90                	pause  
c0000310:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000316:	75 f6                	jne    c000030e <asmQuickAcquireLock.spin_with_pause>
c0000318:	e9 e8 ff ff ff       	jmp    c0000305 <asmQuickAcquireLock.retry>

c000031d <asmQuickReleaseLock>:
c000031d:	55                   	push   ebp
c000031e:	89 e5                	mov    ebp,esp
c0000320:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000327:	5d                   	pop    ebp
c0000328:	c3                   	ret    

c0000329 <asmAcquireLock>:
c0000329:	55                   	push   ebp
c000032a:	89 e5                	mov    ebp,esp
c000032c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032f <asmAcquireLock.retry>:
c000032f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000334:	72 05                	jb     c000033b <asmAcquireLock.spin_with_pause>
c0000336:	9c                   	pushf  
c0000337:	58                   	pop    eax
c0000338:	fa                   	cli    
c0000339:	5d                   	pop    ebp
c000033a:	c3                   	ret    

c000033b <asmAcquireLock.spin_with_pause>:
c000033b:	f3 90                	pause  
c000033d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000343:	75 f6                	jne    c000033b <asmAcquireLock.spin_with_pause>
c0000345:	e9 e5 ff ff ff       	jmp    c000032f <asmAcquireLock.retry>

c000034a <asmReleaseLock>:
c000034a:	55                   	push   ebp
c000034b:	89 e5                	mov    ebp,esp
c000034d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000350:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000353:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000359:	52                   	push   edx
c000035a:	9d                   	popf   
c000035b:	5d                   	pop    ebp
c000035c:	c3                   	ret    

c000035d <loadGDT>:
c000035d:	0f 01 15 c0 1e 02 c0 	lgdtd  ds:0xc0021ec0
c0000364:	66 b8 10 00          	mov    ax,0x10
c0000368:	66 8e d8             	mov    ds,ax
c000036b:	66 8e c0             	mov    es,ax
c000036e:	66 8e e0             	mov    fs,ax
c0000371:	66 8e e8             	mov    gs,ax
c0000374:	66 8e d0             	mov    ss,ax
c0000377:	e9 00 00 00 00       	jmp    c000037c <flush2>

c000037c <flush2>:
c000037c:	c3                   	ret    

c000037d <memcpy>:
c000037d:	e9 18 fe 00 00       	jmp    c001019a <__not_memcpy>
c0000382:	66 90                	xchg   ax,ax
c0000384:	66 90                	xchg   ax,ax
c0000386:	66 90                	xchg   ax,ax
c0000388:	66 90                	xchg   ax,ax
c000038a:	66 90                	xchg   ax,ax
c000038c:	66 90                	xchg   ax,ax
c000038e:	66 90                	xchg   ax,ax

c0000390 <memcmp>:
c0000390:	56                   	push   esi
c0000391:	53                   	push   ebx
c0000392:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000039a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000039e:	85 f6                	test   esi,esi
c00003a0:	74 1c                	je     c00003be <memcmp+0x2e>
c00003a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a6:	38 cb                	cmp    bl,cl
c00003a8:	75 26                	jne    c00003d0 <memcmp+0x40>
c00003aa:	01 c6                	add    esi,eax
c00003ac:	eb 0a                	jmp    c00003b8 <memcmp+0x28>
c00003ae:	66 90                	xchg   ax,ax
c00003b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003b4:	38 d9                	cmp    cl,bl
c00003b6:	75 18                	jne    c00003d0 <memcmp+0x40>
c00003b8:	40                   	inc    eax
c00003b9:	42                   	inc    edx
c00003ba:	39 f0                	cmp    eax,esi
c00003bc:	75 f2                	jne    c00003b0 <memcmp+0x20>
c00003be:	31 c0                	xor    eax,eax
c00003c0:	5b                   	pop    ebx
c00003c1:	5e                   	pop    esi
c00003c2:	c3                   	ret    
c00003c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003d0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003d6:	31 c0                	xor    eax,eax
c00003d8:	88 c8                	mov    al,cl
c00003da:	29 d8                	sub    eax,ebx
c00003dc:	5b                   	pop    ebx
c00003dd:	5e                   	pop    esi
c00003de:	c3                   	ret    
c00003df:	90                   	nop

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 98 00 00 00    	jae    c0000490 <memmove+0xb0>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	0f 84 7c 00 00 00    	je     c000047c <memmove+0x9c>
c0000400:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000403:	8d 75 04             	lea    esi,[ebp+0x4]
c0000406:	39 cd                	cmp    ebp,ecx
c0000408:	0f 93 c1             	setae  cl
c000040b:	39 f3                	cmp    ebx,esi
c000040d:	0f 93 c0             	setae  al
c0000410:	89 c6                	mov    esi,eax
c0000412:	09 ce                	or     esi,ecx
c0000414:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000417:	89 f0                	mov    eax,esi
c0000419:	83 f9 0c             	cmp    ecx,0xc
c000041c:	0f 97 c1             	seta   cl
c000041f:	84 c8                	test   al,cl
c0000421:	0f 84 89 00 00 00    	je     c00004b0 <memmove+0xd0>
c0000427:	89 e9                	mov    ecx,ebp
c0000429:	09 d9                	or     ecx,ebx
c000042b:	83 e1 03             	and    ecx,0x3
c000042e:	0f 85 7c 00 00 00    	jne    c00004b0 <memmove+0xd0>
c0000434:	89 d7                	mov    edi,edx
c0000436:	89 d9                	mov    ecx,ebx
c0000438:	83 e7 fc             	and    edi,0xfffffffc
c000043b:	89 ee                	mov    esi,ebp
c000043d:	01 df                	add    edi,ebx
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x60>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0x9c>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0x9c>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0x9c>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0x9c>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0x9c>
c0000496:	4b                   	dec    ebx
c0000497:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	4a                   	dec    edx
c00004a7:	75 f7                	jne    c00004a0 <memmove+0xc0>
c00004a9:	5b                   	pop    ebx
c00004aa:	89 e8                	mov    eax,ebp
c00004ac:	5e                   	pop    esi
c00004ad:	5f                   	pop    edi
c00004ae:	5d                   	pop    ebp
c00004af:	c3                   	ret    
c00004b0:	01 ea                	add    edx,ebp
c00004b2:	89 e9                	mov    ecx,ebp
c00004b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004c0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004c2:	41                   	inc    ecx
c00004c3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004c6:	43                   	inc    ebx
c00004c7:	39 d1                	cmp    ecx,edx
c00004c9:	75 f5                	jne    c00004c0 <memmove+0xe0>
c00004cb:	eb af                	jmp    c000047c <memmove+0x9c>
c00004cd:	8d 76 00             	lea    esi,[esi+0x0]

c00004d0 <memset>:
c00004d0:	57                   	push   edi
c00004d1:	53                   	push   ebx
c00004d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004d6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004da:	85 d2                	test   edx,edx
c00004dc:	74 1f                	je     c00004fd <memset+0x2d>
c00004de:	31 c0                	xor    eax,eax
c00004e0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004e4:	88 c4                	mov    ah,al
c00004e6:	89 c1                	mov    ecx,eax
c00004e8:	c1 e1 10             	shl    ecx,0x10
c00004eb:	09 c8                	or     eax,ecx
c00004ed:	83 fa 04             	cmp    edx,0x4
c00004f0:	73 1e                	jae    c0000510 <memset+0x40>
c00004f2:	85 d2                	test   edx,edx
c00004f4:	74 07                	je     c00004fd <memset+0x2d>
c00004f6:	88 03                	mov    BYTE PTR [ebx],al
c00004f8:	f6 c2 02             	test   dl,0x2
c00004fb:	75 30                	jne    c000052d <memset+0x5d>
c00004fd:	89 d8                	mov    eax,ebx
c00004ff:	5b                   	pop    ebx
c0000500:	5f                   	pop    edi
c0000501:	c3                   	ret    
c0000502:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000509:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000510:	89 03                	mov    DWORD PTR [ebx],eax
c0000512:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000515:	89 d9                	mov    ecx,ebx
c0000517:	83 e7 fc             	and    edi,0xfffffffc
c000051a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000051e:	29 f9                	sub    ecx,edi
c0000520:	01 d1                	add    ecx,edx
c0000522:	c1 e9 02             	shr    ecx,0x2
c0000525:	fc                   	cld    
c0000526:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000528:	89 d8                	mov    eax,ebx
c000052a:	5b                   	pop    ebx
c000052b:	5f                   	pop    edi
c000052c:	c3                   	ret    
c000052d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000532:	eb c9                	jmp    c00004fd <memset+0x2d>
c0000534:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000053a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000540 <strlen>:
c0000540:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000544:	31 c0                	xor    eax,eax
c0000546:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000549:	74 15                	je     c0000560 <strlen+0x20>
c000054b:	90                   	nop
c000054c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000550:	40                   	inc    eax
c0000551:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000555:	75 f9                	jne    c0000550 <strlen+0x10>
c0000557:	c3                   	ret    
c0000558:	90                   	nop
c0000559:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000560:	c3                   	ret    
c0000561:	eb 0d                	jmp    c0000570 <strpbrk>
c0000563:	90                   	nop
c0000564:	90                   	nop
c0000565:	90                   	nop
c0000566:	90                   	nop
c0000567:	90                   	nop
c0000568:	90                   	nop
c0000569:	90                   	nop
c000056a:	90                   	nop
c000056b:	90                   	nop
c000056c:	90                   	nop
c000056d:	90                   	nop
c000056e:	90                   	nop
c000056f:	90                   	nop

c0000570 <strpbrk>:
c0000570:	57                   	push   edi
c0000571:	56                   	push   esi
c0000572:	53                   	push   ebx
c0000573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000577:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000057b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000057d:	84 db                	test   bl,bl
c000057f:	74 21                	je     c00005a2 <strpbrk+0x32>
c0000581:	8a 07                	mov    al,BYTE PTR [edi]
c0000583:	84 c0                	test   al,al
c0000585:	74 14                	je     c000059b <strpbrk+0x2b>
c0000587:	38 d8                	cmp    al,bl
c0000589:	74 19                	je     c00005a4 <strpbrk+0x34>
c000058b:	89 fa                	mov    edx,edi
c000058d:	eb 05                	jmp    c0000594 <strpbrk+0x24>
c000058f:	90                   	nop
c0000590:	38 d9                	cmp    cl,bl
c0000592:	74 10                	je     c00005a4 <strpbrk+0x34>
c0000594:	42                   	inc    edx
c0000595:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000597:	84 c9                	test   cl,cl
c0000599:	75 f5                	jne    c0000590 <strpbrk+0x20>
c000059b:	46                   	inc    esi
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	84 db                	test   bl,bl
c00005a0:	75 e1                	jne    c0000583 <strpbrk+0x13>
c00005a2:	31 f6                	xor    esi,esi
c00005a4:	89 f0                	mov    eax,esi
c00005a6:	5b                   	pop    ebx
c00005a7:	5e                   	pop    esi
c00005a8:	5f                   	pop    edi
c00005a9:	c3                   	ret    
c00005aa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005b0 <strtok>:
c00005b0:	56                   	push   esi
c00005b1:	53                   	push   ebx
c00005b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005ba:	85 db                	test   ebx,ebx
c00005bc:	75 07                	jne    c00005c5 <strtok+0x15>
c00005be:	eb 30                	jmp    c00005f0 <strtok+0x40>
c00005c0:	43                   	inc    ebx
c00005c1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005c5:	56                   	push   esi
c00005c6:	53                   	push   ebx
c00005c7:	e8 a4 ff ff ff       	call   c0000570 <strpbrk>
c00005cc:	5a                   	pop    edx
c00005cd:	a3 e0 10 02 c0       	mov    ds:0xc00210e0,eax
c00005d2:	59                   	pop    ecx
c00005d3:	39 d8                	cmp    eax,ebx
c00005d5:	74 e9                	je     c00005c0 <strtok+0x10>
c00005d7:	85 c0                	test   eax,eax
c00005d9:	74 1f                	je     c00005fa <strtok+0x4a>
c00005db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005de:	8d 50 01             	lea    edx,[eax+0x1]
c00005e1:	89 d8                	mov    eax,ebx
c00005e3:	89 15 e0 10 02 c0    	mov    DWORD PTR ds:0xc00210e0,edx
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	c3                   	ret    
c00005ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005f0:	8b 1d e0 10 02 c0    	mov    ebx,DWORD PTR ds:0xc00210e0
c00005f6:	85 db                	test   ebx,ebx
c00005f8:	75 cb                	jne    c00005c5 <strtok+0x15>
c00005fa:	31 c0                	xor    eax,eax
c00005fc:	5b                   	pop    ebx
c00005fd:	5e                   	pop    esi
c00005fe:	c3                   	ret    
c00005ff:	90                   	nop

c0000600 <strcpy>:
c0000600:	53                   	push   ebx
c0000601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000605:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000609:	89 c3                	mov    ebx,eax
c000060b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000060d:	84 d2                	test   dl,dl
c000060f:	74 19                	je     c000062a <strcpy+0x2a>
c0000611:	eb 0d                	jmp    c0000620 <strcpy+0x20>
c0000613:	90                   	nop
c0000614:	90                   	nop
c0000615:	90                   	nop
c0000616:	90                   	nop
c0000617:	90                   	nop
c0000618:	90                   	nop
c0000619:	90                   	nop
c000061a:	90                   	nop
c000061b:	90                   	nop
c000061c:	90                   	nop
c000061d:	90                   	nop
c000061e:	90                   	nop
c000061f:	90                   	nop
c0000620:	88 13                	mov    BYTE PTR [ebx],dl
c0000622:	41                   	inc    ecx
c0000623:	43                   	inc    ebx
c0000624:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000626:	84 d2                	test   dl,dl
c0000628:	75 f6                	jne    c0000620 <strcpy+0x20>
c000062a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000062d:	5b                   	pop    ebx
c000062e:	c3                   	ret    
c000062f:	90                   	nop

c0000630 <strncpy>:
c0000630:	57                   	push   edi
c0000631:	56                   	push   esi
c0000632:	53                   	push   ebx
c0000633:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000637:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000063b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000063f:	85 ff                	test   edi,edi
c0000641:	74 3e                	je     c0000681 <strncpy+0x51>
c0000643:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000645:	8d 47 ff             	lea    eax,[edi-0x1]
c0000648:	8d 4a 01             	lea    ecx,[edx+0x1]
c000064b:	88 1a                	mov    BYTE PTR [edx],bl
c000064d:	84 db                	test   bl,bl
c000064f:	74 3f                	je     c0000690 <strncpy+0x60>
c0000651:	85 c0                	test   eax,eax
c0000653:	74 2c                	je     c0000681 <strncpy+0x51>
c0000655:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000658:	8d 47 fe             	lea    eax,[edi-0x2]
c000065b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000065e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000661:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000664:	84 db                	test   bl,bl
c0000666:	75 15                	jne    c000067d <strncpy+0x4d>
c0000668:	eb 26                	jmp    c0000690 <strncpy+0x60>
c000066a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000670:	47                   	inc    edi
c0000671:	41                   	inc    ecx
c0000672:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000675:	48                   	dec    eax
c0000676:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000679:	84 db                	test   bl,bl
c000067b:	74 13                	je     c0000690 <strncpy+0x60>
c000067d:	85 c0                	test   eax,eax
c000067f:	75 ef                	jne    c0000670 <strncpy+0x40>
c0000681:	5b                   	pop    ebx
c0000682:	89 d0                	mov    eax,edx
c0000684:	5e                   	pop    esi
c0000685:	5f                   	pop    edi
c0000686:	c3                   	ret    
c0000687:	89 f6                	mov    esi,esi
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000690:	85 c0                	test   eax,eax
c0000692:	74 ed                	je     c0000681 <strncpy+0x51>
c0000694:	83 f8 04             	cmp    eax,0x4
c0000697:	73 17                	jae    c00006b0 <strncpy+0x80>
c0000699:	85 c0                	test   eax,eax
c000069b:	74 e4                	je     c0000681 <strncpy+0x51>
c000069d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006a0:	a8 02                	test   al,0x2
c00006a2:	74 dd                	je     c0000681 <strncpy+0x51>
c00006a4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006ab:	eb d4                	jmp    c0000681 <strncpy+0x51>
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]
c00006b0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006b6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006b9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006c1:	83 e7 fc             	and    edi,0xfffffffc
c00006c4:	29 f9                	sub    ecx,edi
c00006c6:	01 c1                	add    ecx,eax
c00006c8:	c1 e9 02             	shr    ecx,0x2
c00006cb:	fc                   	cld    
c00006cc:	31 c0                	xor    eax,eax
c00006ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006d0:	89 d0                	mov    eax,edx
c00006d2:	5b                   	pop    ebx
c00006d3:	5e                   	pop    esi
c00006d4:	5f                   	pop    edi
c00006d5:	c3                   	ret    
c00006d6:	8d 76 00             	lea    esi,[esi+0x0]
c00006d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006e0 <strcmp>:
c00006e0:	56                   	push   esi
c00006e1:	53                   	push   ebx
c00006e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006ea:	8a 16                	mov    dl,BYTE PTR [esi]
c00006ec:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006ee:	38 d1                	cmp    cl,dl
c00006f0:	75 1d                	jne    c000070f <strcmp+0x2f>
c00006f2:	84 c9                	test   cl,cl
c00006f4:	74 2a                	je     c0000720 <strcmp+0x40>
c00006f6:	b8 01 00 00 00       	mov    eax,0x1
c00006fb:	eb 08                	jmp    c0000705 <strcmp+0x25>
c00006fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000700:	40                   	inc    eax
c0000701:	84 d2                	test   dl,dl
c0000703:	74 1b                	je     c0000720 <strcmp+0x40>
c0000705:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000708:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000070b:	38 ca                	cmp    dl,cl
c000070d:	74 f1                	je     c0000700 <strcmp+0x20>
c000070f:	31 c0                	xor    eax,eax
c0000711:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000717:	88 d0                	mov    al,dl
c0000719:	5b                   	pop    ebx
c000071a:	29 c8                	sub    eax,ecx
c000071c:	5e                   	pop    esi
c000071d:	c3                   	ret    
c000071e:	66 90                	xchg   ax,ax
c0000720:	31 c0                	xor    eax,eax
c0000722:	5b                   	pop    ebx
c0000723:	5e                   	pop    esi
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000730 <strchr>:
c0000730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000734:	8a 10                	mov    dl,BYTE PTR [eax]
c0000736:	84 d2                	test   dl,dl
c0000738:	74 21                	je     c000075b <strchr+0x2b>
c000073a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000073e:	38 ca                	cmp    dl,cl
c0000740:	75 12                	jne    c0000754 <strchr+0x24>
c0000742:	eb 1a                	jmp    c000075e <strchr+0x2e>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000750:	38 ca                	cmp    dl,cl
c0000752:	74 09                	je     c000075d <strchr+0x2d>
c0000754:	40                   	inc    eax
c0000755:	8a 10                	mov    dl,BYTE PTR [eax]
c0000757:	84 d2                	test   dl,dl
c0000759:	75 f5                	jne    c0000750 <strchr+0x20>
c000075b:	31 c0                	xor    eax,eax
c000075d:	c3                   	ret    
c000075e:	c3                   	ret    
c000075f:	90                   	nop

c0000760 <strncmp>:
c0000760:	57                   	push   edi
c0000761:	56                   	push   esi
c0000762:	53                   	push   ebx
c0000763:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000076f:	85 ff                	test   edi,edi
c0000771:	74 2f                	je     c00007a2 <strncmp+0x42>
c0000773:	8a 16                	mov    dl,BYTE PTR [esi]
c0000775:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000777:	38 d1                	cmp    cl,dl
c0000779:	75 35                	jne    c00007b0 <strncmp+0x50>
c000077b:	8d 46 01             	lea    eax,[esi+0x1]
c000077e:	84 c9                	test   cl,cl
c0000780:	74 20                	je     c00007a2 <strncmp+0x42>
c0000782:	01 fe                	add    esi,edi
c0000784:	eb 17                	jmp    c000079d <strncmp+0x3d>
c0000786:	8d 76 00             	lea    esi,[esi+0x0]
c0000789:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000790:	8a 10                	mov    dl,BYTE PTR [eax]
c0000792:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000794:	38 ca                	cmp    dl,cl
c0000796:	75 18                	jne    c00007b0 <strncmp+0x50>
c0000798:	40                   	inc    eax
c0000799:	84 d2                	test   dl,dl
c000079b:	74 05                	je     c00007a2 <strncmp+0x42>
c000079d:	43                   	inc    ebx
c000079e:	39 c6                	cmp    esi,eax
c00007a0:	75 ee                	jne    c0000790 <strncmp+0x30>
c00007a2:	5b                   	pop    ebx
c00007a3:	31 c0                	xor    eax,eax
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	5b                   	pop    ebx
c00007b1:	31 c0                	xor    eax,eax
c00007b3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007b9:	88 d0                	mov    al,dl
c00007bb:	5e                   	pop    esi
c00007bc:	29 c8                	sub    eax,ecx
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    

c00007c0 <strcat>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	89 c3                	mov    ebx,eax
c00007cc:	eb 04                	jmp    c00007d2 <strcat+0x12>
c00007ce:	66 90                	xchg   ax,ax
c00007d0:	89 d3                	mov    ebx,edx
c00007d2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x10>
c00007db:	31 d2                	xor    edx,edx
c00007dd:	8d 76 00             	lea    esi,[esi+0x0]
c00007e0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007e3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007e6:	42                   	inc    edx
c00007e7:	84 c9                	test   cl,cl
c00007e9:	75 f5                	jne    c00007e0 <strcat+0x20>
c00007eb:	5b                   	pop    ebx
c00007ec:	5e                   	pop    esi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strncat>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007fe:	85 f6                	test   esi,esi
c0000800:	74 2e                	je     c0000830 <strncat+0x40>
c0000802:	89 c2                	mov    edx,eax
c0000804:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000080a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000810:	42                   	inc    edx
c0000811:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000815:	75 f9                	jne    c0000810 <strncat+0x20>
c0000817:	01 ce                	add    esi,ecx
c0000819:	eb 0a                	jmp    c0000825 <strncat+0x35>
c000081b:	90                   	nop
c000081c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000820:	39 f1                	cmp    ecx,esi
c0000822:	74 1c                	je     c0000840 <strncat+0x50>
c0000824:	42                   	inc    edx
c0000825:	41                   	inc    ecx
c0000826:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000829:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000082c:	84 db                	test   bl,bl
c000082e:	75 f0                	jne    c0000820 <strncat+0x30>
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000840:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000843:	5b                   	pop    ebx
c0000844:	5e                   	pop    esi
c0000845:	c3                   	ret    
c0000846:	8d 76 00             	lea    esi,[esi+0x0]
c0000849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000850 <strstr>:
c0000850:	57                   	push   edi
c0000851:	56                   	push   esi
c0000852:	53                   	push   ebx
c0000853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000857:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000085b:	57                   	push   edi
c000085c:	e8 df fc ff ff       	call   c0000540 <strlen>
c0000861:	59                   	pop    ecx
c0000862:	85 c0                	test   eax,eax
c0000864:	74 3a                	je     c00008a0 <strstr+0x50>
c0000866:	89 c6                	mov    esi,eax
c0000868:	eb 16                	jmp    c0000880 <strstr+0x30>
c000086a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000870:	56                   	push   esi
c0000871:	57                   	push   edi
c0000872:	53                   	push   ebx
c0000873:	e8 18 fb ff ff       	call   c0000390 <memcmp>
c0000878:	83 c4 0c             	add    esp,0xc
c000087b:	85 c0                	test   eax,eax
c000087d:	74 21                	je     c00008a0 <strstr+0x50>
c000087f:	43                   	inc    ebx
c0000880:	53                   	push   ebx
c0000881:	e8 ba fc ff ff       	call   c0000540 <strlen>
c0000886:	5a                   	pop    edx
c0000887:	39 f0                	cmp    eax,esi
c0000889:	73 e5                	jae    c0000870 <strstr+0x20>
c000088b:	5b                   	pop    ebx
c000088c:	31 c0                	xor    eax,eax
c000088e:	5e                   	pop    esi
c000088f:	5f                   	pop    edi
c0000890:	c3                   	ret    
c0000891:	eb 0d                	jmp    c00008a0 <strstr+0x50>
c0000893:	90                   	nop
c0000894:	90                   	nop
c0000895:	90                   	nop
c0000896:	90                   	nop
c0000897:	90                   	nop
c0000898:	90                   	nop
c0000899:	90                   	nop
c000089a:	90                   	nop
c000089b:	90                   	nop
c000089c:	90                   	nop
c000089d:	90                   	nop
c000089e:	90                   	nop
c000089f:	90                   	nop
c00008a0:	89 d8                	mov    eax,ebx
c00008a2:	5b                   	pop    ebx
c00008a3:	5e                   	pop    esi
c00008a4:	5f                   	pop    edi
c00008a5:	c3                   	ret    
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008b0 <toupper>:
c00008b0:	31 d2                	xor    edx,edx
c00008b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b6:	88 c2                	mov    dl,al
c00008b8:	f6 82 e0 cd 01 c0 02 	test   BYTE PTR [edx-0x3ffe3220],0x2
c00008bf:	74 03                	je     c00008c4 <toupper+0x14>
c00008c1:	83 e8 20             	sub    eax,0x20
c00008c4:	c3                   	ret    
c00008c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <tolower>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 e0 cd 01 c0 01 	test   BYTE PTR [edx-0x3ffe3220],0x1
c00008df:	74 03                	je     c00008e4 <tolower+0x14>
c00008e1:	83 c0 20             	add    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <simple_strtoul>:
c00008f0:	55                   	push   ebp
c00008f1:	57                   	push   edi
c00008f2:	56                   	push   esi
c00008f3:	53                   	push   ebx
c00008f4:	83 ec 08             	sub    esp,0x8
c00008f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ff:	90                   	nop
c0000900:	31 d2                	xor    edx,edx
c0000902:	8a 01                	mov    al,BYTE PTR [ecx]
c0000904:	88 c2                	mov    dl,al
c0000906:	f6 82 e0 cd 01 c0 08 	test   BYTE PTR [edx-0x3ffe3220],0x8
c000090d:	75 04                	jne    c0000913 <simple_strtoul+0x23>
c000090f:	3c 09                	cmp    al,0x9
c0000911:	75 0d                	jne    c0000920 <simple_strtoul+0x30>
c0000913:	41                   	inc    ecx
c0000914:	eb ea                	jmp    c0000900 <simple_strtoul+0x10>
c0000916:	8d 76 00             	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	3c 2d                	cmp    al,0x2d
c0000922:	0f 84 48 01 00 00    	je     c0000a70 <simple_strtoul+0x180>
c0000928:	3c 2b                	cmp    al,0x2b
c000092a:	0f 84 e0 00 00 00    	je     c0000a10 <simple_strtoul+0x120>
c0000930:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000938:	85 f6                	test   esi,esi
c000093a:	0f 85 e1 00 00 00    	jne    c0000a21 <simple_strtoul+0x131>
c0000940:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000943:	80 fa 30             	cmp    dl,0x30
c0000946:	0f 84 75 01 00 00    	je     c0000ac1 <simple_strtoul+0x1d1>
c000094c:	be 0a 00 00 00       	mov    esi,0xa
c0000951:	84 d2                	test   dl,dl
c0000953:	0f 84 9f 01 00 00    	je     c0000af8 <simple_strtoul+0x208>
c0000959:	31 ed                	xor    ebp,ebp
c000095b:	31 ff                	xor    edi,edi
c000095d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000964:	eb 35                	jmp    c000099b <simple_strtoul+0xab>
c0000966:	8d 76 00             	lea    esi,[esi+0x0]
c0000969:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000970:	83 eb 30             	sub    ebx,0x30
c0000973:	39 f3                	cmp    ebx,esi
c0000975:	73 59                	jae    c00009d0 <simple_strtoul+0xe0>
c0000977:	31 d2                	xor    edx,edx
c0000979:	89 d8                	mov    eax,ebx
c000097b:	f7 d0                	not    eax
c000097d:	f7 f6                	div    esi
c000097f:	39 f8                	cmp    eax,edi
c0000981:	0f 82 c9 00 00 00    	jb     c0000a50 <simple_strtoul+0x160>
c0000987:	0f af fe             	imul   edi,esi
c000098a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000991:	01 df                	add    edi,ebx
c0000993:	41                   	inc    ecx
c0000994:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000997:	84 d2                	test   dl,dl
c0000999:	74 35                	je     c00009d0 <simple_strtoul+0xe0>
c000099b:	31 db                	xor    ebx,ebx
c000099d:	88 d3                	mov    bl,dl
c000099f:	f6 83 e0 cd 01 c0 04 	test   BYTE PTR [ebx-0x3ffe3220],0x4
c00009a6:	75 c8                	jne    c0000970 <simple_strtoul+0x80>
c00009a8:	52                   	push   edx
c00009a9:	e8 02 ff ff ff       	call   c00008b0 <toupper>
c00009ae:	31 d2                	xor    edx,edx
c00009b0:	5b                   	pop    ebx
c00009b1:	88 c2                	mov    dl,al
c00009b3:	f6 82 e0 cd 01 c0 01 	test   BYTE PTR [edx-0x3ffe3220],0x1
c00009ba:	74 14                	je     c00009d0 <simple_strtoul+0xe0>
c00009bc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009bf:	39 f3                	cmp    ebx,esi
c00009c1:	72 b4                	jb     c0000977 <simple_strtoul+0x87>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d4:	85 c0                	test   eax,eax
c00009d6:	74 18                	je     c00009f0 <simple_strtoul+0x100>
c00009d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009db:	09 f8                	or     eax,edi
c00009dd:	0f 85 7d 00 00 00    	jne    c0000a60 <simple_strtoul+0x170>
c00009e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009eb:	31 ff                	xor    edi,edi
c00009ed:	89 30                	mov    DWORD PTR [eax],esi
c00009ef:	90                   	nop
c00009f0:	4d                   	dec    ebp
c00009f1:	75 05                	jne    c00009f8 <simple_strtoul+0x108>
c00009f3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009f8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009fd:	75 02                	jne    c0000a01 <simple_strtoul+0x111>
c00009ff:	f7 df                	neg    edi
c0000a01:	83 c4 08             	add    esp,0x8
c0000a04:	89 f8                	mov    eax,edi
c0000a06:	5b                   	pop    ebx
c0000a07:	5e                   	pop    esi
c0000a08:	5f                   	pop    edi
c0000a09:	5d                   	pop    ebp
c0000a0a:	c3                   	ret    
c0000a0b:	90                   	nop
c0000a0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a10:	41                   	inc    ecx
c0000a11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a19:	85 f6                	test   esi,esi
c0000a1b:	0f 84 1f ff ff ff    	je     c0000940 <simple_strtoul+0x50>
c0000a21:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a24:	83 f8 22             	cmp    eax,0x22
c0000a27:	77 7b                	ja     c0000aa4 <simple_strtoul+0x1b4>
c0000a29:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a2c:	83 fe 08             	cmp    esi,0x8
c0000a2f:	0f 84 b3 00 00 00    	je     c0000ae8 <simple_strtoul+0x1f8>
c0000a35:	83 fe 10             	cmp    esi,0x10
c0000a38:	0f 85 13 ff ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000a3e:	80 fa 30             	cmp    dl,0x30
c0000a41:	74 3b                	je     c0000a7e <simple_strtoul+0x18e>
c0000a43:	be 10 00 00 00       	mov    esi,0x10
c0000a48:	e9 04 ff ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a50:	bd 01 00 00 00       	mov    ebp,0x1
c0000a55:	31 ff                	xor    edi,edi
c0000a57:	e9 37 ff ff ff       	jmp    c0000993 <simple_strtoul+0xa3>
c0000a5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	89 08                	mov    DWORD PTR [eax],ecx
c0000a66:	eb 88                	jmp    c00009f0 <simple_strtoul+0x100>
c0000a68:	90                   	nop
c0000a69:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a70:	41                   	inc    ecx
c0000a71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a79:	e9 ba fe ff ff       	jmp    c0000938 <simple_strtoul+0x48>
c0000a7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a82:	88 04 24             	mov    BYTE PTR [esp],al
c0000a85:	50                   	push   eax
c0000a86:	e8 45 fe ff ff       	call   c00008d0 <tolower>
c0000a8b:	5e                   	pop    esi
c0000a8c:	83 f8 78             	cmp    eax,0x78
c0000a8f:	0f 84 88 00 00 00    	je     c0000b1d <simple_strtoul+0x22d>
c0000a95:	41                   	inc    ecx
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a9f:	e9 ad fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000aa4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aa8:	85 ff                	test   edi,edi
c0000aaa:	74 5e                	je     c0000b0a <simple_strtoul+0x21a>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	85 c9                	test   ecx,ecx
c0000ab2:	75 50                	jne    c0000b04 <simple_strtoul+0x214>
c0000ab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aba:	31 ff                	xor    edi,edi
c0000abc:	e9 37 ff ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000ac1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac8:	50                   	push   eax
c0000ac9:	e8 02 fe ff ff       	call   c00008d0 <tolower>
c0000ace:	5d                   	pop    ebp
c0000acf:	83 f8 78             	cmp    eax,0x78
c0000ad2:	74 3d                	je     c0000b11 <simple_strtoul+0x221>
c0000ad4:	41                   	inc    ecx
c0000ad5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ad9:	80 fa 30             	cmp    dl,0x30
c0000adc:	74 13                	je     c0000af1 <simple_strtoul+0x201>
c0000ade:	be 08 00 00 00       	mov    esi,0x8
c0000ae3:	e9 69 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000ae8:	80 fa 30             	cmp    dl,0x30
c0000aeb:	0f 85 60 fe ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000af1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000af5:	41                   	inc    ecx
c0000af6:	eb e6                	jmp    c0000ade <simple_strtoul+0x1ee>
c0000af8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000afc:	85 d2                	test   edx,edx
c0000afe:	74 0a                	je     c0000b0a <simple_strtoul+0x21a>
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b08:	89 30                	mov    DWORD PTR [eax],esi
c0000b0a:	31 ff                	xor    edi,edi
c0000b0c:	e9 e7 fe ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000b11:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b15:	83 c1 02             	add    ecx,0x2
c0000b18:	e9 21 ff ff ff       	jmp    c0000a3e <simple_strtoul+0x14e>
c0000b1d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b21:	be 10 00 00 00       	mov    esi,0x10
c0000b26:	83 c1 02             	add    ecx,0x2
c0000b29:	e9 23 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>

c0000b2e <largebin_index>:
c0000b2e:	89 c2                	mov    edx,eax
c0000b30:	c1 ea 08             	shr    edx,0x8
c0000b33:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b39:	77 10                	ja     c0000b4b <largebin_index+0x1d>
c0000b3b:	0f bd d2             	bsr    edx,edx
c0000b3e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b41:	d3 e8                	shr    eax,cl
c0000b43:	83 e0 03             	and    eax,0x3
c0000b46:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b4a:	c3                   	ret    
c0000b4b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b50:	c3                   	ret    

c0000b51 <malloc_init_state>:
c0000b51:	53                   	push   ebx
c0000b52:	8d 50 34             	lea    edx,[eax+0x34]
c0000b55:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b5b:	89 d1                	mov    ecx,edx
c0000b5d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b60:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b63:	83 c2 08             	add    edx,0x8
c0000b66:	39 da                	cmp    edx,ebx
c0000b68:	75 f3                	jne    c0000b5d <malloc_init_state+0xc>
c0000b6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b6c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b76:	83 e2 03             	and    edx,0x3
c0000b79:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b83:	83 ca 48             	or     edx,0x48
c0000b86:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b90:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b9a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ba1:	89 10                	mov    DWORD PTR [eax],edx
c0000ba3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ba6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bb0:	5b                   	pop    ebx
c0000bb1:	c3                   	ret    

c0000bb2 <malloc_consolidate>:
c0000bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bb4:	85 d2                	test   edx,edx
c0000bb6:	0f 84 d8 00 00 00    	je     c0000c94 <malloc_consolidate+0xe2>
c0000bbc:	55                   	push   ebp
c0000bbd:	83 e2 fd             	and    edx,0xfffffffd
c0000bc0:	57                   	push   edi
c0000bc1:	89 c5                	mov    ebp,eax
c0000bc3:	56                   	push   esi
c0000bc4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bc7:	53                   	push   ebx
c0000bc8:	83 ec 10             	sub    esp,0x10
c0000bcb:	89 10                	mov    DWORD PTR [eax],edx
c0000bcd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bd1:	c1 ea 03             	shr    edx,0x3
c0000bd4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bd8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bdc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bdf:	85 d2                	test   edx,edx
c0000be1:	0f 84 98 00 00 00    	je     c0000c7f <malloc_consolidate+0xcd>
c0000be7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bee:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000bf1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000bf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000bf8:	89 f9                	mov    ecx,edi
c0000bfa:	83 e1 fe             	and    ecx,0xfffffffe
c0000bfd:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c00:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c03:	83 e3 fc             	and    ebx,0xfffffffc
c0000c06:	83 e7 01             	and    edi,0x1
c0000c09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c0c:	75 14                	jne    c0000c22 <malloc_consolidate+0x70>
c0000c0e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c10:	29 fa                	sub    edx,edi
c0000c12:	01 f9                	add    ecx,edi
c0000c14:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c17:	89 fb                	mov    ebx,edi
c0000c19:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c1c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c1f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c22:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c25:	74 40                	je     c0000c67 <malloc_consolidate+0xb5>
c0000c27:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c2a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c2d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c31:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c34:	83 e7 01             	and    edi,0x1
c0000c37:	75 0e                	jne    c0000c47 <malloc_consolidate+0x95>
c0000c39:	01 d9                	add    ecx,ebx
c0000c3b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c3e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c41:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c44:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c47:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c4a:	89 ce                	mov    esi,ecx
c0000c4c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c4f:	83 ce 01             	or     esi,0x1
c0000c52:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c55:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c58:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c5b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c5f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c62:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c65:	eb 0c                	jmp    c0000c73 <malloc_consolidate+0xc1>
c0000c67:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c6a:	83 c9 01             	or     ecx,0x1
c0000c6d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c70:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c77:	85 d2                	test   edx,edx
c0000c79:	0f 85 6f ff ff ff    	jne    c0000bee <malloc_consolidate+0x3c>
c0000c7f:	83 c5 04             	add    ebp,0x4
c0000c82:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c86:	0f 85 50 ff ff ff    	jne    c0000bdc <malloc_consolidate+0x2a>
c0000c8c:	83 c4 10             	add    esp,0x10
c0000c8f:	5b                   	pop    ebx
c0000c90:	5e                   	pop    esi
c0000c91:	5f                   	pop    edi
c0000c92:	5d                   	pop    ebp
c0000c93:	c3                   	ret    
c0000c94:	e9 b8 fe ff ff       	jmp    c0000b51 <malloc_init_state>

c0000c99 <dlfree>:
c0000c99:	57                   	push   edi
c0000c9a:	56                   	push   esi
c0000c9b:	53                   	push   ebx
c0000c9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ca0:	85 db                	test   ebx,ebx
c0000ca2:	0f 84 e2 00 00 00    	je     c0000d8a <dlfree+0xf1>
c0000ca8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cab:	8b 0d 00 11 02 c0    	mov    ecx,DWORD PTR ds:0xc0021100
c0000cb1:	89 f0                	mov    eax,esi
c0000cb3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cb6:	83 e0 fc             	and    eax,0xfffffffc
c0000cb9:	39 c1                	cmp    ecx,eax
c0000cbb:	72 24                	jb     c0000ce1 <dlfree+0x48>
c0000cbd:	83 c9 03             	or     ecx,0x3
c0000cc0:	c1 e8 03             	shr    eax,0x3
c0000cc3:	89 0d 00 11 02 c0    	mov    DWORD PTR ds:0xc0021100,ecx
c0000cc9:	83 e8 02             	sub    eax,0x2
c0000ccc:	8b 0c 85 04 11 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdeefc]
c0000cd3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cd5:	89 14 85 04 11 02 c0 	mov    DWORD PTR [eax*4-0x3ffdeefc],edx
c0000cdc:	e9 a9 00 00 00       	jmp    c0000d8a <dlfree+0xf1>
c0000ce1:	83 e6 02             	and    esi,0x2
c0000ce4:	0f 85 a0 00 00 00    	jne    c0000d8a <dlfree+0xf1>
c0000cea:	83 c9 01             	or     ecx,0x1
c0000ced:	8d 34 02             	lea    esi,[edx+eax*1]
c0000cf0:	89 0d 00 11 02 c0    	mov    DWORD PTR ds:0xc0021100,ecx
c0000cf6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000cf9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cfc:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d00:	75 13                	jne    c0000d15 <dlfree+0x7c>
c0000d02:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d05:	29 da                	sub    edx,ebx
c0000d07:	01 d8                	add    eax,ebx
c0000d09:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d0f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d12:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d15:	39 35 2c 11 02 c0    	cmp    DWORD PTR ds:0xc002112c,esi
c0000d1b:	74 40                	je     c0000d5d <dlfree+0xc4>
c0000d1d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d21:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d24:	80 e3 01             	and    bl,0x1
c0000d27:	75 0e                	jne    c0000d37 <dlfree+0x9e>
c0000d29:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d2c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d2f:	01 c8                	add    eax,ecx
c0000d31:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d34:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d37:	8b 0d 3c 11 02 c0    	mov    ecx,DWORD PTR ds:0xc002113c
c0000d3d:	c7 42 0c 34 11 02 c0 	mov    DWORD PTR [edx+0xc],0xc0021134
c0000d44:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d47:	89 15 3c 11 02 c0    	mov    DWORD PTR ds:0xc002113c,edx
c0000d4d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d50:	89 c1                	mov    ecx,eax
c0000d52:	83 c9 01             	or     ecx,0x1
c0000d55:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d58:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d5b:	eb 10                	jmp    c0000d6d <dlfree+0xd4>
c0000d5d:	01 c8                	add    eax,ecx
c0000d5f:	89 c1                	mov    ecx,eax
c0000d61:	83 c9 01             	or     ecx,0x1
c0000d64:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d67:	89 15 2c 11 02 c0    	mov    DWORD PTR ds:0xc002112c,edx
c0000d6d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d72:	76 16                	jbe    c0000d8a <dlfree+0xf1>
c0000d74:	f6 05 00 11 02 c0 02 	test   BYTE PTR ds:0xc0021100,0x2
c0000d7b:	74 0d                	je     c0000d8a <dlfree+0xf1>
c0000d7d:	5b                   	pop    ebx
c0000d7e:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0000d83:	5e                   	pop    esi
c0000d84:	5f                   	pop    edi
c0000d85:	e9 28 fe ff ff       	jmp    c0000bb2 <malloc_consolidate>
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	c3                   	ret    

c0000d8e <sYSMALLOc>:
c0000d8e:	55                   	push   ebp
c0000d8f:	57                   	push   edi
c0000d90:	56                   	push   esi
c0000d91:	53                   	push   ebx
c0000d92:	89 d3                	mov    ebx,edx
c0000d94:	83 ec 2c             	sub    esp,0x2c
c0000d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d9b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000da1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000da4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dab:	74 1f                	je     c0000dcc <sYSMALLOc+0x3e>
c0000dad:	89 d8                	mov    eax,ebx
c0000daf:	e8 fe fd ff ff       	call   c0000bb2 <malloc_consolidate>
c0000db4:	83 ec 0c             	sub    esp,0xc
c0000db7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dbb:	83 e8 07             	sub    eax,0x7
c0000dbe:	50                   	push   eax
c0000dbf:	e8 30 02 00 00       	call   c0000ff4 <dlmalloc>
c0000dc4:	83 c4 10             	add    esp,0x10
c0000dc7:	e9 20 02 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000dcc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dcf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dd5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dd8:	83 e0 fc             	and    eax,0xfffffffc
c0000ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000de3:	83 c0 10             	add    eax,0x10
c0000de6:	01 c1                	add    ecx,eax
c0000de8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000dec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000df3:	74 04                	je     c0000df9 <sYSMALLOc+0x6b>
c0000df5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000df9:	f7 da                	neg    edx
c0000dfb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000dff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e03:	21 d1                	and    ecx,edx
c0000e05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e09:	7f 07                	jg     c0000e12 <sYSMALLOc+0x84>
c0000e0b:	31 c0                	xor    eax,eax
c0000e0d:	e9 da 01 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000e12:	83 ec 0c             	sub    esp,0xc
c0000e15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e19:	e8 72 68 00 00       	call   c0007690 <sbrk>
c0000e1e:	83 c4 10             	add    esp,0x10
c0000e21:	89 c6                	mov    esi,eax
c0000e23:	83 f8 ff             	cmp    eax,0xffffffff
c0000e26:	74 e3                	je     c0000e0b <sYSMALLOc+0x7d>
c0000e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e2c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e30:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e33:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e39:	39 f1                	cmp    ecx,esi
c0000e3b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e41:	75 13                	jne    c0000e56 <sYSMALLOc+0xc8>
c0000e43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e47:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e4b:	83 c8 01             	or     eax,0x1
c0000e4e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e51:	e9 3e 01 00 00       	jmp    c0000f94 <sYSMALLOc+0x206>
c0000e56:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e5c:	88 d0                	mov    al,dl
c0000e5e:	83 e0 01             	and    eax,0x1
c0000e61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e66:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e6a:	0f 95 c0             	setne  al
c0000e6d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e71:	39 f1                	cmp    ecx,esi
c0000e73:	76 12                	jbe    c0000e87 <sYSMALLOc+0xf9>
c0000e75:	84 c0                	test   al,al
c0000e77:	74 0e                	je     c0000e87 <sYSMALLOc+0xf9>
c0000e79:	83 e2 fe             	and    edx,0xfffffffe
c0000e7c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e82:	e9 83 00 00 00       	jmp    c0000f0a <sYSMALLOc+0x17c>
c0000e87:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e8c:	74 7c                	je     c0000f0a <sYSMALLOc+0x17c>
c0000e8e:	84 c0                	test   al,al
c0000e90:	74 0c                	je     c0000e9e <sYSMALLOc+0x110>
c0000e92:	89 f0                	mov    eax,esi
c0000e94:	29 c8                	sub    eax,ecx
c0000e96:	01 e8                	add    eax,ebp
c0000e98:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e9e:	89 f2                	mov    edx,esi
c0000ea0:	83 e2 07             	and    edx,0x7
c0000ea3:	74 0c                	je     c0000eb1 <sYSMALLOc+0x123>
c0000ea5:	b8 08 00 00 00       	mov    eax,0x8
c0000eaa:	29 d0                	sub    eax,edx
c0000eac:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eaf:	eb 04                	jmp    c0000eb5 <sYSMALLOc+0x127>
c0000eb1:	89 f5                	mov    ebp,esi
c0000eb3:	31 c0                	xor    eax,eax
c0000eb5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000eb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ebd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ec1:	01 c1                	add    ecx,eax
c0000ec3:	83 ec 0c             	sub    esp,0xc
c0000ec6:	01 f1                	add    ecx,esi
c0000ec8:	01 ca                	add    edx,ecx
c0000eca:	29 c8                	sub    eax,ecx
c0000ecc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	52                   	push   edx
c0000ed3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ed7:	e8 b4 67 00 00       	call   c0007690 <sbrk>
c0000edc:	83 c4 10             	add    esp,0x10
c0000edf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee6:	75 0f                	jne    c0000ef7 <sYSMALLOc+0x169>
c0000ee8:	83 ec 0c             	sub    esp,0xc
c0000eeb:	6a 00                	push   0x0
c0000eed:	e8 9e 67 00 00       	call   c0007690 <sbrk>
c0000ef2:	83 c4 10             	add    esp,0x10
c0000ef5:	eb 30                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000ef7:	39 c6                	cmp    esi,eax
c0000ef9:	76 33                	jbe    c0000f2e <sYSMALLOc+0x1a0>
c0000efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eff:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f06:	01 f0                	add    eax,esi
c0000f08:	eb 1d                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000f0a:	83 ec 0c             	sub    esp,0xc
c0000f0d:	89 f5                	mov    ebp,esi
c0000f0f:	6a 00                	push   0x0
c0000f11:	e8 7a 67 00 00       	call   c0007690 <sbrk>
c0000f16:	89 c2                	mov    edx,eax
c0000f18:	29 f2                	sub    edx,esi
c0000f1a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f1e:	83 c4 10             	add    esp,0x10
c0000f21:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f27:	31 d2                	xor    edx,edx
c0000f29:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2c:	74 66                	je     c0000f94 <sYSMALLOc+0x206>
c0000f2e:	29 e8                	sub    eax,ebp
c0000f30:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f33:	01 d0                	add    eax,edx
c0000f35:	83 c8 01             	or     eax,0x1
c0000f38:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f3b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f41:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f46:	74 4c                	je     c0000f94 <sYSMALLOc+0x206>
c0000f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4c:	83 e8 0c             	sub    eax,0xc
c0000f4f:	83 e0 f8             	and    eax,0xfffffff8
c0000f52:	89 c2                	mov    edx,eax
c0000f54:	83 ca 01             	or     edx,0x1
c0000f57:	83 f8 0f             	cmp    eax,0xf
c0000f5a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f5d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f65:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f6d:	76 25                	jbe    c0000f94 <sYSMALLOc+0x206>
c0000f6f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f75:	83 ec 0c             	sub    esp,0xc
c0000f78:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f82:	83 c7 08             	add    edi,0x8
c0000f85:	57                   	push   edi
c0000f86:	e8 0e fd ff ff       	call   c0000c99 <dlfree>
c0000f8b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f91:	83 c4 10             	add    esp,0x10
c0000f94:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f9a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fa0:	73 06                	jae    c0000fa8 <sYSMALLOc+0x21a>
c0000fa2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fa8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fae:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fb4:	73 06                	jae    c0000fbc <sYSMALLOc+0x22e>
c0000fb6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fbc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fbf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fc2:	83 e2 fc             	and    edx,0xfffffffc
c0000fc5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fc9:	0f 82 3c fe ff ff    	jb     c0000e0b <sYSMALLOc+0x7d>
c0000fcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fd3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fd6:	29 fa                	sub    edx,edi
c0000fd8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fdb:	83 ca 01             	or     edx,0x1
c0000fde:	89 fb                	mov    ebx,edi
c0000fe0:	83 c0 08             	add    eax,0x8
c0000fe3:	83 cb 01             	or     ebx,0x1
c0000fe6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fe9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fec:	83 c4 2c             	add    esp,0x2c
c0000fef:	5b                   	pop    ebx
c0000ff0:	5e                   	pop    esi
c0000ff1:	5f                   	pop    edi
c0000ff2:	5d                   	pop    ebp
c0000ff3:	c3                   	ret    

c0000ff4 <dlmalloc>:
c0000ff4:	55                   	push   ebp
c0000ff5:	57                   	push   edi
c0000ff6:	56                   	push   esi
c0000ff7:	53                   	push   ebx
c0000ff8:	83 ec 1c             	sub    esp,0x1c
c0000ffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fff:	83 f8 df             	cmp    eax,0xffffffdf
c0001002:	0f 87 70 03 00 00    	ja     c0001378 <dlmalloc+0x384>
c0001008:	83 c0 0b             	add    eax,0xb
c000100b:	be 10 00 00 00       	mov    esi,0x10
c0001010:	83 f8 0f             	cmp    eax,0xf
c0001013:	76 05                	jbe    c000101a <dlmalloc+0x26>
c0001015:	83 e0 f8             	and    eax,0xfffffff8
c0001018:	89 c6                	mov    esi,eax
c000101a:	8b 3d 00 11 02 c0    	mov    edi,DWORD PTR ds:0xc0021100
c0001020:	f7 c7 01 00 00 00    	test   edi,0x1
c0001026:	75 17                	jne    c000103f <dlmalloc+0x4b>
c0001028:	85 ff                	test   edi,edi
c000102a:	0f 85 05 03 00 00    	jne    c0001335 <dlmalloc+0x341>
c0001030:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0001035:	e8 78 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c000103a:	e9 f6 02 00 00       	jmp    c0001335 <dlmalloc+0x341>
c000103f:	39 f7                	cmp    edi,esi
c0001041:	72 1f                	jb     c0001062 <dlmalloc+0x6e>
c0001043:	89 f2                	mov    edx,esi
c0001045:	c1 ea 03             	shr    edx,0x3
c0001048:	83 ea 02             	sub    edx,0x2
c000104b:	8b 04 95 04 11 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdeefc]
c0001052:	85 c0                	test   eax,eax
c0001054:	74 0c                	je     c0001062 <dlmalloc+0x6e>
c0001056:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001059:	89 0c 95 04 11 02 c0 	mov    DWORD PTR [edx*4-0x3ffdeefc],ecx
c0001060:	eb 30                	jmp    c0001092 <dlmalloc+0x9e>
c0001062:	89 f0                	mov    eax,esi
c0001064:	81 fe ff 00 00 00    	cmp    esi,0xff
c000106a:	77 2e                	ja     c000109a <dlmalloc+0xa6>
c000106c:	c1 e8 03             	shr    eax,0x3
c000106f:	8d 14 c5 34 11 02 c0 	lea    edx,[eax*8-0x3ffdeecc]
c0001076:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000107a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000107d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001080:	39 c3                	cmp    ebx,eax
c0001082:	74 2e                	je     c00010b2 <dlmalloc+0xbe>
c0001084:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001087:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000108c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000108f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001092:	83 c0 08             	add    eax,0x8
c0001095:	e9 e0 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c000109a:	e8 8f fa ff ff       	call   c0000b2e <largebin_index>
c000109f:	83 e7 02             	and    edi,0x2
c00010a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a6:	74 0a                	je     c00010b2 <dlmalloc+0xbe>
c00010a8:	b8 00 11 02 c0       	mov    eax,0xc0021100
c00010ad:	e8 00 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c00010b2:	8d 46 10             	lea    eax,[esi+0x10]
c00010b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010b9:	8b 1d 40 11 02 c0    	mov    ebx,DWORD PTR ds:0xc0021140
c00010bf:	81 fb 34 11 02 c0    	cmp    ebx,0xc0021134
c00010c5:	0f 84 13 01 00 00    	je     c00011de <dlmalloc+0x1ea>
c00010cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010d1:	83 e7 fc             	and    edi,0xfffffffc
c00010d4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010da:	77 4c                	ja     c0001128 <dlmalloc+0x134>
c00010dc:	3d 34 11 02 c0       	cmp    eax,0xc0021134
c00010e1:	75 45                	jne    c0001128 <dlmalloc+0x134>
c00010e3:	39 1d 30 11 02 c0    	cmp    DWORD PTR ds:0xc0021130,ebx
c00010e9:	75 3d                	jne    c0001128 <dlmalloc+0x134>
c00010eb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010ef:	73 37                	jae    c0001128 <dlmalloc+0x134>
c00010f1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010f4:	89 fa                	mov    edx,edi
c00010f6:	a3 3c 11 02 c0       	mov    ds:0xc002113c,eax
c00010fb:	a3 40 11 02 c0       	mov    ds:0xc0021140,eax
c0001100:	a3 30 11 02 c0       	mov    ds:0xc0021130,eax
c0001105:	29 f2                	sub    edx,esi
c0001107:	c7 40 08 34 11 02 c0 	mov    DWORD PTR [eax+0x8],0xc0021134
c000110e:	c7 40 0c 34 11 02 c0 	mov    DWORD PTR [eax+0xc],0xc0021134
c0001115:	83 ce 01             	or     esi,0x1
c0001118:	89 d1                	mov    ecx,edx
c000111a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000111d:	83 c9 01             	or     ecx,0x1
c0001120:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001123:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001126:	eb 15                	jmp    c000113d <dlmalloc+0x149>
c0001128:	a3 40 11 02 c0       	mov    ds:0xc0021140,eax
c000112d:	39 fe                	cmp    esi,edi
c000112f:	c7 40 08 34 11 02 c0 	mov    DWORD PTR [eax+0x8],0xc0021134
c0001136:	75 0d                	jne    c0001145 <dlmalloc+0x151>
c0001138:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000113d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001140:	e9 35 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001145:	89 f8                	mov    eax,edi
c0001147:	81 ff ff 00 00 00    	cmp    edi,0xff
c000114d:	77 19                	ja     c0001168 <dlmalloc+0x174>
c000114f:	c1 e8 03             	shr    eax,0x3
c0001152:	8d 14 00             	lea    edx,[eax+eax*1]
c0001155:	83 c2 0d             	add    edx,0xd
c0001158:	8d 2c 95 f8 10 02 c0 	lea    ebp,[edx*4-0x3ffdef08]
c000115f:	8b 14 95 00 11 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdef00]
c0001166:	eb 46                	jmp    c00011ae <dlmalloc+0x1ba>
c0001168:	e8 c1 f9 ff ff       	call   c0000b2e <largebin_index>
c000116d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001170:	83 c2 0d             	add    edx,0xd
c0001173:	8d 0c 95 00 11 02 c0 	lea    ecx,[edx*4-0x3ffdef00]
c000117a:	8b 14 95 00 11 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdef00]
c0001181:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001184:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001188:	89 d5                	mov    ebp,edx
c000118a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000118e:	74 1e                	je     c00011ae <dlmalloc+0x1ba>
c0001190:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001193:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001196:	77 12                	ja     c00011aa <dlmalloc+0x1b6>
c0001198:	83 cf 01             	or     edi,0x1
c000119b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000119e:	76 05                	jbe    c00011a5 <dlmalloc+0x1b1>
c00011a0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011a3:	eb f6                	jmp    c000119b <dlmalloc+0x1a7>
c00011a5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011a8:	eb 04                	jmp    c00011ae <dlmalloc+0x1ba>
c00011aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ae:	89 c7                	mov    edi,eax
c00011b0:	88 c1                	mov    cl,al
c00011b2:	c1 ff 05             	sar    edi,0x5
c00011b5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011b9:	bf 01 00 00 00       	mov    edi,0x1
c00011be:	d3 e7                	shl    edi,cl
c00011c0:	89 f8                	mov    eax,edi
c00011c2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011c6:	09 04 bd 34 14 02 c0 	or     DWORD PTR [edi*4-0x3ffdebcc],eax
c00011cd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011d3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011d6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011d9:	e9 db fe ff ff       	jmp    c00010b9 <dlmalloc+0xc5>
c00011de:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011e4:	76 78                	jbe    c000125e <dlmalloc+0x26a>
c00011e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011ea:	8d 04 c5 34 11 02 c0 	lea    eax,[eax*8-0x3ffdeecc]
c00011f1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011f7:	39 ca                	cmp    edx,ecx
c00011f9:	74 63                	je     c000125e <dlmalloc+0x26a>
c00011fb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011fe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001201:	83 e3 fc             	and    ebx,0xfffffffc
c0001204:	39 de                	cmp    esi,ebx
c0001206:	77 52                	ja     c000125a <dlmalloc+0x266>
c0001208:	89 df                	mov    edi,ebx
c000120a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000120d:	29 f7                	sub    edi,esi
c000120f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001212:	01 d3                	add    ebx,edx
c0001214:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001217:	83 ff 0f             	cmp    edi,0xf
c000121a:	8d 42 08             	lea    eax,[edx+0x8]
c000121d:	77 09                	ja     c0001228 <dlmalloc+0x234>
c000121f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001223:	e9 52 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001228:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000122b:	83 ce 01             	or     esi,0x1
c000122e:	89 0d 3c 11 02 c0    	mov    DWORD PTR ds:0xc002113c,ecx
c0001234:	89 0d 40 11 02 c0    	mov    DWORD PTR ds:0xc0021140,ecx
c000123a:	c7 41 08 34 11 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0021134
c0001241:	c7 41 0c 34 11 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0021134
c0001248:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000124b:	89 fa                	mov    edx,edi
c000124d:	83 ca 01             	or     edx,0x1
c0001250:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001253:	89 3b                	mov    DWORD PTR [ebx],edi
c0001255:	e9 20 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c000125a:	89 c2                	mov    edx,eax
c000125c:	eb 99                	jmp    c00011f7 <dlmalloc+0x203>
c000125e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001262:	b8 01 00 00 00       	mov    eax,0x1
c0001267:	41                   	inc    ecx
c0001268:	89 cb                	mov    ebx,ecx
c000126a:	8d 14 cd 2c 11 02 c0 	lea    edx,[ecx*8-0x3ffdeed4]
c0001271:	c1 eb 05             	shr    ebx,0x5
c0001274:	d3 e0                	shl    eax,cl
c0001276:	8b 3c 9d 34 14 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdebcc]
c000127d:	39 f8                	cmp    eax,edi
c000127f:	77 04                	ja     c0001285 <dlmalloc+0x291>
c0001281:	85 c0                	test   eax,eax
c0001283:	75 26                	jne    c00012ab <dlmalloc+0x2b7>
c0001285:	43                   	inc    ebx
c0001286:	83 fb 02             	cmp    ebx,0x2
c0001289:	0f 87 a6 00 00 00    	ja     c0001335 <dlmalloc+0x341>
c000128f:	8b 3c 9d 34 14 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdebcc]
c0001296:	85 ff                	test   edi,edi
c0001298:	74 eb                	je     c0001285 <dlmalloc+0x291>
c000129a:	89 d8                	mov    eax,ebx
c000129c:	c1 e0 06             	shl    eax,0x6
c000129f:	8d 14 85 2c 11 02 c0 	lea    edx,[eax*4-0x3ffdeed4]
c00012a6:	b8 01 00 00 00       	mov    eax,0x1
c00012ab:	85 f8                	test   eax,edi
c00012ad:	75 07                	jne    c00012b6 <dlmalloc+0x2c2>
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	01 c0                	add    eax,eax
c00012b4:	eb f5                	jmp    c00012ab <dlmalloc+0x2b7>
c00012b6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012b9:	39 ca                	cmp    edx,ecx
c00012bb:	75 14                	jne    c00012d1 <dlmalloc+0x2dd>
c00012bd:	89 c1                	mov    ecx,eax
c00012bf:	83 c2 08             	add    edx,0x8
c00012c2:	f7 d1                	not    ecx
c00012c4:	01 c0                	add    eax,eax
c00012c6:	21 cf                	and    edi,ecx
c00012c8:	89 3c 9d 34 14 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdebcc],edi
c00012cf:	eb ac                	jmp    c000127d <dlmalloc+0x289>
c00012d1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012d4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012d7:	83 e0 fc             	and    eax,0xfffffffc
c00012da:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012dd:	89 c3                	mov    ebx,eax
c00012df:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012e2:	29 f3                	sub    ebx,esi
c00012e4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012e7:	83 fb 0f             	cmp    ebx,0xf
c00012ea:	8d 41 08             	lea    eax,[ecx+0x8]
c00012ed:	77 09                	ja     c00012f8 <dlmalloc+0x304>
c00012ef:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012f3:	e9 82 00 00 00       	jmp    c000137a <dlmalloc+0x386>
c00012f8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001301:	89 3d 3c 11 02 c0    	mov    DWORD PTR ds:0xc002113c,edi
c0001307:	89 3d 40 11 02 c0    	mov    DWORD PTR ds:0xc0021140,edi
c000130d:	c7 47 08 34 11 02 c0 	mov    DWORD PTR [edi+0x8],0xc0021134
c0001314:	c7 47 0c 34 11 02 c0 	mov    DWORD PTR [edi+0xc],0xc0021134
c000131b:	77 06                	ja     c0001323 <dlmalloc+0x32f>
c000131d:	89 3d 30 11 02 c0    	mov    DWORD PTR ds:0xc0021130,edi
c0001323:	83 ce 01             	or     esi,0x1
c0001326:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001329:	89 d9                	mov    ecx,ebx
c000132b:	83 c9 01             	or     ecx,0x1
c000132e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001331:	89 1a                	mov    DWORD PTR [edx],ebx
c0001333:	eb 45                	jmp    c000137a <dlmalloc+0x386>
c0001335:	a1 2c 11 02 c0       	mov    eax,ds:0xc002112c
c000133a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000133d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001340:	83 e2 fc             	and    edx,0xfffffffc
c0001343:	39 d1                	cmp    ecx,edx
c0001345:	77 1e                	ja     c0001365 <dlmalloc+0x371>
c0001347:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000134a:	89 f3                	mov    ebx,esi
c000134c:	89 0d 2c 11 02 c0    	mov    DWORD PTR ds:0xc002112c,ecx
c0001352:	83 cb 01             	or     ebx,0x1
c0001355:	29 f2                	sub    edx,esi
c0001357:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000135a:	83 ca 01             	or     edx,0x1
c000135d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001360:	e9 2d fd ff ff       	jmp    c0001092 <dlmalloc+0x9e>
c0001365:	83 c4 1c             	add    esp,0x1c
c0001368:	89 f0                	mov    eax,esi
c000136a:	5b                   	pop    ebx
c000136b:	ba 00 11 02 c0       	mov    edx,0xc0021100
c0001370:	5e                   	pop    esi
c0001371:	5f                   	pop    edi
c0001372:	5d                   	pop    ebp
c0001373:	e9 16 fa ff ff       	jmp    c0000d8e <sYSMALLOc>
c0001378:	31 c0                	xor    eax,eax
c000137a:	83 c4 1c             	add    esp,0x1c
c000137d:	5b                   	pop    ebx
c000137e:	5e                   	pop    esi
c000137f:	5f                   	pop    edi
c0001380:	5d                   	pop    ebp
c0001381:	c3                   	ret    

c0001382 <iALLOc>:
c0001382:	55                   	push   ebp
c0001383:	89 c5                	mov    ebp,eax
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 2c             	sub    esp,0x2c
c000138b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000138f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001397:	83 3d 00 11 02 c0 00 	cmp    DWORD PTR ds:0xc0021100,0x0
c000139e:	75 12                	jne    c00013b2 <iALLOc+0x30>
c00013a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013a4:	b8 00 11 02 c0       	mov    eax,0xc0021100
c00013a9:	e8 04 f8 ff ff       	call   c0000bb2 <malloc_consolidate>
c00013ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013b2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013b7:	74 12                	je     c00013cb <iALLOc+0x49>
c00013b9:	85 ed                	test   ebp,ebp
c00013bb:	0f 84 64 01 00 00    	je     c0001525 <iALLOc+0x1a3>
c00013c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013c9:	eb 33                	jmp    c00013fe <iALLOc+0x7c>
c00013cb:	85 ed                	test   ebp,ebp
c00013cd:	75 14                	jne    c00013e3 <iALLOc+0x61>
c00013cf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013d7:	83 c4 2c             	add    esp,0x2c
c00013da:	5b                   	pop    ebx
c00013db:	5e                   	pop    esi
c00013dc:	5f                   	pop    edi
c00013dd:	5d                   	pop    ebp
c00013de:	e9 11 fc ff ff       	jmp    c0000ff4 <dlmalloc>
c00013e3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013ea:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013f2:	83 f8 0f             	cmp    eax,0xf
c00013f5:	76 07                	jbe    c00013fe <iALLOc+0x7c>
c00013f7:	83 e0 f8             	and    eax,0xfffffff8
c00013fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013fe:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001403:	75 09                	jne    c000140e <iALLOc+0x8c>
c0001405:	89 d0                	mov    eax,edx
c0001407:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000140a:	31 f6                	xor    esi,esi
c000140c:	eb 3b                	jmp    c0001449 <iALLOc+0xc7>
c000140e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001410:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001418:	83 c0 0b             	add    eax,0xb
c000141b:	83 f8 0f             	cmp    eax,0xf
c000141e:	76 07                	jbe    c0001427 <iALLOc+0xa5>
c0001420:	83 e0 f8             	and    eax,0xfffffff8
c0001423:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000142b:	0f af f5             	imul   esi,ebp
c000142e:	eb 25                	jmp    c0001455 <iALLOc+0xd3>
c0001430:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001432:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001435:	bb 10 00 00 00       	mov    ebx,0x10
c000143a:	83 f9 0f             	cmp    ecx,0xf
c000143d:	76 05                	jbe    c0001444 <iALLOc+0xc2>
c000143f:	83 e1 f8             	and    ecx,0xfffffff8
c0001442:	89 cb                	mov    ebx,ecx
c0001444:	01 de                	add    esi,ebx
c0001446:	83 c0 04             	add    eax,0x4
c0001449:	39 c7                	cmp    edi,eax
c000144b:	75 e3                	jne    c0001430 <iALLOc+0xae>
c000144d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001455:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001459:	8b 1d 54 14 02 c0    	mov    ebx,DWORD PTR ds:0xc0021454
c000145f:	83 ec 0c             	sub    esp,0xc
c0001462:	c7 05 54 14 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021454,0x0
c000146c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001470:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001474:	50                   	push   eax
c0001475:	e8 7a fb ff ff       	call   c0000ff4 <dlmalloc>
c000147a:	83 c4 10             	add    esp,0x10
c000147d:	89 1d 54 14 02 c0    	mov    DWORD PTR ds:0xc0021454,ebx
c0001483:	85 c0                	test   eax,eax
c0001485:	0f 84 92 00 00 00    	je     c000151d <iALLOc+0x19b>
c000148b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000148e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001491:	83 e3 fc             	and    ebx,0xfffffffc
c0001494:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001498:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000149d:	74 1e                	je     c00014bd <iALLOc+0x13b>
c000149f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014a3:	89 d9                	mov    ecx,ebx
c00014a5:	52                   	push   edx
c00014a6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014aa:	83 e9 04             	sub    ecx,0x4
c00014ad:	51                   	push   ecx
c00014ae:	6a 00                	push   0x0
c00014b0:	50                   	push   eax
c00014b1:	e8 1a f0 ff ff       	call   c00004d0 <memset>
c00014b6:	83 c4 10             	add    esp,0x10
c00014b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014c2:	75 14                	jne    c00014d8 <iALLOc+0x156>
c00014c4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014c7:	29 f3                	sub    ebx,esi
c00014c9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014cc:	83 cb 01             	or     ebx,0x1
c00014cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014d3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014d6:	89 f3                	mov    ebx,esi
c00014d8:	31 c0                	xor    eax,eax
c00014da:	4d                   	dec    ebp
c00014db:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014e2:	39 c5                	cmp    ebp,eax
c00014e4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014e7:	74 2c                	je     c0001515 <iALLOc+0x193>
c00014e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014ed:	85 c9                	test   ecx,ecx
c00014ef:	75 15                	jne    c0001506 <iALLOc+0x184>
c00014f1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014f4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014f7:	b9 10 00 00 00       	mov    ecx,0x10
c00014fc:	83 fe 0f             	cmp    esi,0xf
c00014ff:	76 05                	jbe    c0001506 <iALLOc+0x184>
c0001501:	83 e6 f8             	and    esi,0xfffffff8
c0001504:	89 f1                	mov    ecx,esi
c0001506:	89 ce                	mov    esi,ecx
c0001508:	29 cb                	sub    ebx,ecx
c000150a:	83 ce 01             	or     esi,0x1
c000150d:	40                   	inc    eax
c000150e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001511:	01 cf                	add    edi,ecx
c0001513:	eb c6                	jmp    c00014db <iALLOc+0x159>
c0001515:	83 cb 01             	or     ebx,0x1
c0001518:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000151b:	eb 08                	jmp    c0001525 <iALLOc+0x1a3>
c000151d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001525:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001529:	83 c4 2c             	add    esp,0x2c
c000152c:	5b                   	pop    ebx
c000152d:	5e                   	pop    esi
c000152e:	5f                   	pop    edi
c000152f:	5d                   	pop    ebp
c0001530:	c3                   	ret    

c0001531 <dlrealloc>:
c0001531:	55                   	push   ebp
c0001532:	57                   	push   edi
c0001533:	56                   	push   esi
c0001534:	53                   	push   ebx
c0001535:	83 ec 1c             	sub    esp,0x1c
c0001538:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000153c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001540:	85 db                	test   ebx,ebx
c0001542:	75 10                	jne    c0001554 <dlrealloc+0x23>
c0001544:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001548:	83 c4 1c             	add    esp,0x1c
c000154b:	5b                   	pop    ebx
c000154c:	5e                   	pop    esi
c000154d:	5f                   	pop    edi
c000154e:	5d                   	pop    ebp
c000154f:	e9 a0 fa ff ff       	jmp    c0000ff4 <dlmalloc>
c0001554:	83 f8 df             	cmp    eax,0xffffffdf
c0001557:	76 07                	jbe    c0001560 <dlrealloc+0x2f>
c0001559:	31 db                	xor    ebx,ebx
c000155b:	e9 6a 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c0001560:	83 c0 0b             	add    eax,0xb
c0001563:	bd 10 00 00 00       	mov    ebp,0x10
c0001568:	83 f8 0f             	cmp    eax,0xf
c000156b:	76 05                	jbe    c0001572 <dlrealloc+0x41>
c000156d:	83 e0 f8             	and    eax,0xfffffff8
c0001570:	89 c5                	mov    ebp,eax
c0001572:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001575:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001578:	89 c6                	mov    esi,eax
c000157a:	83 e6 fc             	and    esi,0xfffffffc
c000157d:	a8 02                	test   al,0x2
c000157f:	75 d8                	jne    c0001559 <dlrealloc+0x28>
c0001581:	39 f5                	cmp    ebp,esi
c0001583:	0f 86 04 01 00 00    	jbe    c000168d <dlrealloc+0x15c>
c0001589:	8d 14 37             	lea    edx,[edi+esi*1]
c000158c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000158f:	39 15 2c 11 02 c0    	cmp    DWORD PTR ds:0xc002112c,edx
c0001595:	75 33                	jne    c00015ca <dlrealloc+0x99>
c0001597:	83 e1 fc             	and    ecx,0xfffffffc
c000159a:	01 f1                	add    ecx,esi
c000159c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015a3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015a7:	77 49                	ja     c00015f2 <dlrealloc+0xc1>
c00015a9:	01 ef                	add    edi,ebp
c00015ab:	83 e0 01             	and    eax,0x1
c00015ae:	09 e8                	or     eax,ebp
c00015b0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015b3:	89 3d 2c 11 02 c0    	mov    DWORD PTR ds:0xc002112c,edi
c00015b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015bd:	29 e8                	sub    eax,ebp
c00015bf:	83 c8 01             	or     eax,0x1
c00015c2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015c5:	e9 00 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c00015ca:	89 c8                	mov    eax,ecx
c00015cc:	83 e0 fe             	and    eax,0xfffffffe
c00015cf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015d4:	75 1c                	jne    c00015f2 <dlrealloc+0xc1>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	39 cd                	cmp    ebp,ecx
c00015dd:	77 13                	ja     c00015f2 <dlrealloc+0xc1>
c00015df:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015e2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015e5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015e8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015eb:	89 ce                	mov    esi,ecx
c00015ed:	e9 9b 00 00 00       	jmp    c000168d <dlrealloc+0x15c>
c00015f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015f6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015f9:	83 ec 0c             	sub    esp,0xc
c00015fc:	50                   	push   eax
c00015fd:	e8 f2 f9 ff ff       	call   c0000ff4 <dlmalloc>
c0001602:	83 c4 10             	add    esp,0x10
c0001605:	85 c0                	test   eax,eax
c0001607:	0f 84 4c ff ff ff    	je     c0001559 <dlrealloc+0x28>
c000160d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001614:	39 ca                	cmp    edx,ecx
c0001616:	75 0a                	jne    c0001622 <dlrealloc+0xf1>
c0001618:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000161b:	83 e0 fc             	and    eax,0xfffffffc
c000161e:	01 c6                	add    esi,eax
c0001620:	eb 6b                	jmp    c000168d <dlrealloc+0x15c>
c0001622:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001625:	83 f9 27             	cmp    ecx,0x27
c0001628:	76 08                	jbe    c0001632 <dlrealloc+0x101>
c000162a:	89 de                	mov    esi,ebx
c000162c:	89 c7                	mov    edi,eax
c000162e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001630:	eb 43                	jmp    c0001675 <dlrealloc+0x144>
c0001632:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001634:	83 f9 13             	cmp    ecx,0x13
c0001637:	89 10                	mov    DWORD PTR [eax],edx
c0001639:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000163c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000163f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001642:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001645:	76 2e                	jbe    c0001675 <dlrealloc+0x144>
c0001647:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000164a:	83 f9 1b             	cmp    ecx,0x1b
c000164d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001650:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001653:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001656:	76 1d                	jbe    c0001675 <dlrealloc+0x144>
c0001658:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000165b:	83 f9 23             	cmp    ecx,0x23
c000165e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001661:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001664:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001667:	76 0c                	jbe    c0001675 <dlrealloc+0x144>
c0001669:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000166c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000166f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001672:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001679:	83 ec 0c             	sub    esp,0xc
c000167c:	53                   	push   ebx
c000167d:	e8 17 f6 ff ff       	call   c0000c99 <dlfree>
c0001682:	83 c4 10             	add    esp,0x10
c0001685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001689:	89 c3                	mov    ebx,eax
c000168b:	eb 3d                	jmp    c00016ca <dlrealloc+0x199>
c000168d:	89 f2                	mov    edx,esi
c000168f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001692:	29 ea                	sub    edx,ebp
c0001694:	83 e1 01             	and    ecx,0x1
c0001697:	8d 04 37             	lea    eax,[edi+esi*1]
c000169a:	83 fa 0f             	cmp    edx,0xf
c000169d:	77 0b                	ja     c00016aa <dlrealloc+0x179>
c000169f:	09 ce                	or     esi,ecx
c00016a1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016a4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016a8:	eb 20                	jmp    c00016ca <dlrealloc+0x199>
c00016aa:	01 ef                	add    edi,ebp
c00016ac:	83 ec 0c             	sub    esp,0xc
c00016af:	09 cd                	or     ebp,ecx
c00016b1:	83 ca 01             	or     edx,0x1
c00016b4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016b7:	83 c7 08             	add    edi,0x8
c00016ba:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c1:	57                   	push   edi
c00016c2:	e8 d2 f5 ff ff       	call   c0000c99 <dlfree>
c00016c7:	83 c4 10             	add    esp,0x10
c00016ca:	83 c4 1c             	add    esp,0x1c
c00016cd:	89 d8                	mov    eax,ebx
c00016cf:	5b                   	pop    ebx
c00016d0:	5e                   	pop    esi
c00016d1:	5f                   	pop    edi
c00016d2:	5d                   	pop    ebp
c00016d3:	c3                   	ret    

c00016d4 <dlmemalign>:
c00016d4:	55                   	push   ebp
c00016d5:	57                   	push   edi
c00016d6:	56                   	push   esi
c00016d7:	53                   	push   ebx
c00016d8:	83 ec 0c             	sub    esp,0xc
c00016db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016e3:	83 fa 08             	cmp    edx,0x8
c00016e6:	77 10                	ja     c00016f8 <dlmemalign+0x24>
c00016e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016ec:	83 c4 0c             	add    esp,0xc
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	e9 fc f8 ff ff       	jmp    c0000ff4 <dlmalloc>
c00016f8:	bf 10 00 00 00       	mov    edi,0x10
c00016fd:	83 fa 0f             	cmp    edx,0xf
c0001700:	76 13                	jbe    c0001715 <dlmemalign+0x41>
c0001702:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001705:	85 d1                	test   ecx,edx
c0001707:	75 04                	jne    c000170d <dlmemalign+0x39>
c0001709:	89 d7                	mov    edi,edx
c000170b:	eb 08                	jmp    c0001715 <dlmemalign+0x41>
c000170d:	39 d7                	cmp    edi,edx
c000170f:	73 04                	jae    c0001715 <dlmemalign+0x41>
c0001711:	01 ff                	add    edi,edi
c0001713:	eb f8                	jmp    c000170d <dlmemalign+0x39>
c0001715:	83 f8 df             	cmp    eax,0xffffffdf
c0001718:	76 07                	jbe    c0001721 <dlmemalign+0x4d>
c000171a:	31 c0                	xor    eax,eax
c000171c:	e9 ce 00 00 00       	jmp    c00017ef <dlmemalign+0x11b>
c0001721:	83 c0 0b             	add    eax,0xb
c0001724:	bd 10 00 00 00       	mov    ebp,0x10
c0001729:	83 f8 0f             	cmp    eax,0xf
c000172c:	76 05                	jbe    c0001733 <dlmemalign+0x5f>
c000172e:	83 e0 f8             	and    eax,0xfffffff8
c0001731:	89 c5                	mov    ebp,eax
c0001733:	83 ec 0c             	sub    esp,0xc
c0001736:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000173a:	50                   	push   eax
c000173b:	e8 b4 f8 ff ff       	call   c0000ff4 <dlmalloc>
c0001740:	83 c4 10             	add    esp,0x10
c0001743:	89 c1                	mov    ecx,eax
c0001745:	85 c0                	test   eax,eax
c0001747:	74 d1                	je     c000171a <dlmemalign+0x46>
c0001749:	31 d2                	xor    edx,edx
c000174b:	8d 70 f8             	lea    esi,[eax-0x8]
c000174e:	f7 f7                	div    edi
c0001750:	85 d2                	test   edx,edx
c0001752:	74 62                	je     c00017b6 <dlmemalign+0xe2>
c0001754:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001758:	89 f8                	mov    eax,edi
c000175a:	f7 d8                	neg    eax
c000175c:	21 c3                	and    ebx,eax
c000175e:	83 eb 08             	sub    ebx,0x8
c0001761:	89 d8                	mov    eax,ebx
c0001763:	29 f0                	sub    eax,esi
c0001765:	83 f8 0f             	cmp    eax,0xf
c0001768:	77 02                	ja     c000176c <dlmemalign+0x98>
c000176a:	01 fb                	add    ebx,edi
c000176c:	89 d8                	mov    eax,ebx
c000176e:	29 f0                	sub    eax,esi
c0001770:	89 c6                	mov    esi,eax
c0001772:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001775:	89 c2                	mov    edx,eax
c0001777:	83 e2 fc             	and    edx,0xfffffffc
c000177a:	29 f2                	sub    edx,esi
c000177c:	a8 02                	test   al,0x2
c000177e:	74 10                	je     c0001790 <dlmemalign+0xbc>
c0001780:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001783:	83 ca 02             	or     edx,0x2
c0001786:	8d 43 08             	lea    eax,[ebx+0x8]
c0001789:	89 33                	mov    DWORD PTR [ebx],esi
c000178b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000178e:	eb 5f                	jmp    c00017ef <dlmemalign+0x11b>
c0001790:	83 ec 0c             	sub    esp,0xc
c0001793:	89 d0                	mov    eax,edx
c0001795:	83 c8 01             	or     eax,0x1
c0001798:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000179b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017a0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a3:	83 e0 01             	and    eax,0x1
c00017a6:	09 f0                	or     eax,esi
c00017a8:	89 de                	mov    esi,ebx
c00017aa:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ad:	51                   	push   ecx
c00017ae:	e8 e6 f4 ff ff       	call   c0000c99 <dlfree>
c00017b3:	83 c4 10             	add    esp,0x10
c00017b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017b9:	a8 02                	test   al,0x2
c00017bb:	75 2f                	jne    c00017ec <dlmemalign+0x118>
c00017bd:	83 e0 fc             	and    eax,0xfffffffc
c00017c0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017c3:	39 c2                	cmp    edx,eax
c00017c5:	73 25                	jae    c00017ec <dlmemalign+0x118>
c00017c7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ca:	83 ec 0c             	sub    esp,0xc
c00017cd:	29 e8                	sub    eax,ebp
c00017cf:	83 c2 08             	add    edx,0x8
c00017d2:	83 c8 01             	or     eax,0x1
c00017d5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017db:	83 e0 01             	and    eax,0x1
c00017de:	09 c5                	or     ebp,eax
c00017e0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017e3:	52                   	push   edx
c00017e4:	e8 b0 f4 ff ff       	call   c0000c99 <dlfree>
c00017e9:	83 c4 10             	add    esp,0x10
c00017ec:	8d 46 08             	lea    eax,[esi+0x8]
c00017ef:	83 c4 0c             	add    esp,0xc
c00017f2:	5b                   	pop    ebx
c00017f3:	5e                   	pop    esi
c00017f4:	5f                   	pop    edi
c00017f5:	5d                   	pop    ebp
c00017f6:	c3                   	ret    

c00017f7 <dlcalloc>:
c00017f7:	53                   	push   ebx
c00017f8:	83 ec 14             	sub    esp,0x14
c00017fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ff:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001804:	50                   	push   eax
c0001805:	e8 ea f7 ff ff       	call   c0000ff4 <dlmalloc>
c000180a:	83 c4 10             	add    esp,0x10
c000180d:	89 c3                	mov    ebx,eax
c000180f:	85 c0                	test   eax,eax
c0001811:	74 77                	je     c000188a <dlcalloc+0x93>
c0001813:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001816:	89 d0                	mov    eax,edx
c0001818:	83 e0 fc             	and    eax,0xfffffffc
c000181b:	80 e2 02             	and    dl,0x2
c000181e:	75 5a                	jne    c000187a <dlcalloc+0x83>
c0001820:	83 e8 04             	sub    eax,0x4
c0001823:	83 f8 27             	cmp    eax,0x27
c0001826:	76 03                	jbe    c000182b <dlcalloc+0x34>
c0001828:	51                   	push   ecx
c0001829:	eb 53                	jmp    c000187e <dlcalloc+0x87>
c000182b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001831:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001838:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000183f:	83 f8 13             	cmp    eax,0x13
c0001842:	76 46                	jbe    c000188a <dlcalloc+0x93>
c0001844:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000184b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001852:	83 f8 1b             	cmp    eax,0x1b
c0001855:	76 33                	jbe    c000188a <dlcalloc+0x93>
c0001857:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000185e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001865:	83 f8 23             	cmp    eax,0x23
c0001868:	76 20                	jbe    c000188a <dlcalloc+0x93>
c000186a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001871:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001878:	eb 10                	jmp    c000188a <dlcalloc+0x93>
c000187a:	83 e8 08             	sub    eax,0x8
c000187d:	52                   	push   edx
c000187e:	50                   	push   eax
c000187f:	6a 00                	push   0x0
c0001881:	53                   	push   ebx
c0001882:	e8 49 ec ff ff       	call   c00004d0 <memset>
c0001887:	83 c4 10             	add    esp,0x10
c000188a:	89 d8                	mov    eax,ebx
c000188c:	83 c4 08             	add    esp,0x8
c000188f:	5b                   	pop    ebx
c0001890:	c3                   	ret    

c0001891 <dlcfree>:
c0001891:	e9 03 f4 ff ff       	jmp    c0000c99 <dlfree>

c0001896 <dlindependent_calloc>:
c0001896:	83 ec 28             	sub    esp,0x28
c0001899:	b9 03 00 00 00       	mov    ecx,0x3
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018aa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018b2:	e8 cb fa ff ff       	call   c0001382 <iALLOc>
c00018b7:	83 c4 2c             	add    esp,0x2c
c00018ba:	c3                   	ret    

c00018bb <dlindependent_comalloc>:
c00018bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018c3:	31 c9                	xor    ecx,ecx
c00018c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018cd:	e9 b0 fa ff ff       	jmp    c0001382 <iALLOc>

c00018d2 <dlvalloc>:
c00018d2:	83 ec 0c             	sub    esp,0xc
c00018d5:	83 3d 00 11 02 c0 00 	cmp    DWORD PTR ds:0xc0021100,0x0
c00018dc:	75 0a                	jne    c00018e8 <dlvalloc+0x16>
c00018de:	b8 00 11 02 c0       	mov    eax,0xc0021100
c00018e3:	e8 ca f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c00018e8:	50                   	push   eax
c00018e9:	50                   	push   eax
c00018ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018ee:	ff 35 5c 14 02 c0    	push   DWORD PTR ds:0xc002145c
c00018f4:	e8 db fd ff ff       	call   c00016d4 <dlmemalign>
c00018f9:	83 c4 1c             	add    esp,0x1c
c00018fc:	c3                   	ret    

c00018fd <dlpvalloc>:
c00018fd:	83 ec 0c             	sub    esp,0xc
c0001900:	83 3d 00 11 02 c0 00 	cmp    DWORD PTR ds:0xc0021100,0x0
c0001907:	75 0a                	jne    c0001913 <dlpvalloc+0x16>
c0001909:	b8 00 11 02 c0       	mov    eax,0xc0021100
c000190e:	e8 9f f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001913:	a1 5c 14 02 c0       	mov    eax,ds:0xc002145c
c0001918:	89 c1                	mov    ecx,eax
c000191a:	52                   	push   edx
c000191b:	f7 d9                	neg    ecx
c000191d:	52                   	push   edx
c000191e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001922:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001926:	21 ca                	and    edx,ecx
c0001928:	52                   	push   edx
c0001929:	50                   	push   eax
c000192a:	e8 a5 fd ff ff       	call   c00016d4 <dlmemalign>
c000192f:	83 c4 1c             	add    esp,0x1c
c0001932:	c3                   	ret    

c0001933 <dlmalloc_trim>:
c0001933:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0001938:	e8 75 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <dlmalloc_usable_size>:
c0001940:	53                   	push   ebx
c0001941:	31 c0                	xor    eax,eax
c0001943:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001947:	85 c9                	test   ecx,ecx
c0001949:	74 24                	je     c000196f <dlmalloc_usable_size+0x2f>
c000194b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000194e:	f6 c2 02             	test   dl,0x2
c0001951:	74 08                	je     c000195b <dlmalloc_usable_size+0x1b>
c0001953:	83 e2 fc             	and    edx,0xfffffffc
c0001956:	8d 42 f8             	lea    eax,[edx-0x8]
c0001959:	eb 14                	jmp    c000196f <dlmalloc_usable_size+0x2f>
c000195b:	89 d3                	mov    ebx,edx
c000195d:	31 c0                	xor    eax,eax
c000195f:	83 e3 fe             	and    ebx,0xfffffffe
c0001962:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001967:	74 06                	je     c000196f <dlmalloc_usable_size+0x2f>
c0001969:	83 e2 fc             	and    edx,0xfffffffc
c000196c:	8d 42 fc             	lea    eax,[edx-0x4]
c000196f:	5b                   	pop    ebx
c0001970:	c3                   	ret    

c0001971 <dlmallinfo>:
c0001971:	55                   	push   ebp
c0001972:	57                   	push   edi
c0001973:	56                   	push   esi
c0001974:	53                   	push   ebx
c0001975:	83 ec 08             	sub    esp,0x8
c0001978:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000197c:	83 3d 2c 11 02 c0 00 	cmp    DWORD PTR ds:0xc002112c,0x0
c0001983:	75 0a                	jne    c000198f <dlmallinfo+0x1e>
c0001985:	b8 00 11 02 c0       	mov    eax,0xc0021100
c000198a:	e8 23 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000198f:	a1 2c 11 02 c0       	mov    eax,ds:0xc002112c
c0001994:	31 ed                	xor    ebp,ebp
c0001996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001999:	31 c9                	xor    ecx,ecx
c000199b:	83 e0 fc             	and    eax,0xfffffffc
c000199e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019a2:	31 c0                	xor    eax,eax
c00019a4:	8b 14 85 04 11 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdeefc]
c00019ab:	85 d2                	test   edx,edx
c00019ad:	74 0e                	je     c00019bd <dlmallinfo+0x4c>
c00019af:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019b2:	45                   	inc    ebp
c00019b3:	83 e6 fc             	and    esi,0xfffffffc
c00019b6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019b9:	01 f1                	add    ecx,esi
c00019bb:	eb ee                	jmp    c00019ab <dlmallinfo+0x3a>
c00019bd:	40                   	inc    eax
c00019be:	83 f8 0a             	cmp    eax,0xa
c00019c1:	75 e1                	jne    c00019a4 <dlmallinfo+0x33>
c00019c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019c7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ce:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019d1:	b8 34 11 02 c0       	mov    eax,0xc0021134
c00019d6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019d9:	39 f0                	cmp    eax,esi
c00019db:	74 10                	je     c00019ed <dlmallinfo+0x7c>
c00019dd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019e0:	ff 04 24             	inc    DWORD PTR [esp]
c00019e3:	83 e7 fc             	and    edi,0xfffffffc
c00019e6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019e9:	01 fa                	add    edx,edi
c00019eb:	eb ec                	jmp    c00019d9 <dlmallinfo+0x68>
c00019ed:	83 c0 08             	add    eax,0x8
c00019f0:	3d 2c 14 02 c0       	cmp    eax,0xc002142c
c00019f5:	75 df                	jne    c00019d6 <dlmallinfo+0x65>
c00019f7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019fa:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019fd:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a00:	a1 68 14 02 c0       	mov    eax,ds:0xc0021468
c0001a05:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a08:	89 03                	mov    DWORD PTR [ebx],eax
c0001a0a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a0d:	8b 35 50 14 02 c0    	mov    esi,DWORD PTR ds:0xc0021450
c0001a13:	29 d0                	sub    eax,edx
c0001a15:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a18:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a1b:	8b 35 64 14 02 c0    	mov    esi,DWORD PTR ds:0xc0021464
c0001a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a25:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a28:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a2b:	8b 35 74 14 02 c0    	mov    esi,DWORD PTR ds:0xc0021474
c0001a31:	89 d8                	mov    eax,ebx
c0001a33:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a36:	83 c4 08             	add    esp,0x8
c0001a39:	5b                   	pop    ebx
c0001a3a:	5e                   	pop    esi
c0001a3b:	5f                   	pop    edi
c0001a3c:	5d                   	pop    ebp
c0001a3d:	c2 04 00             	ret    0x4

c0001a40 <dlmalloc_stats>:
c0001a40:	83 ec 30             	sub    esp,0x30
c0001a43:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a47:	50                   	push   eax
c0001a48:	e8 24 ff ff ff       	call   c0001971 <dlmallinfo>
c0001a4d:	83 c4 30             	add    esp,0x30
c0001a50:	c3                   	ret    

c0001a51 <dlmallopt>:
c0001a51:	56                   	push   esi
c0001a52:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0001a57:	53                   	push   ebx
c0001a58:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a60:	e8 4d f1 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001a65:	8d 46 04             	lea    eax,[esi+0x4]
c0001a68:	83 f8 05             	cmp    eax,0x5
c0001a6b:	77 67                	ja     c0001ad4 <dlmallopt+0x83>
c0001a6d:	ff 24 85 e4 ce 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe311c]
c0001a74:	83 fb 50             	cmp    ebx,0x50
c0001a77:	77 5b                	ja     c0001ad4 <dlmallopt+0x83>
c0001a79:	ba 08 00 00 00       	mov    edx,0x8
c0001a7e:	85 db                	test   ebx,ebx
c0001a80:	74 12                	je     c0001a94 <dlmallopt+0x43>
c0001a82:	83 c3 0b             	add    ebx,0xb
c0001a85:	ba 10 00 00 00       	mov    edx,0x10
c0001a8a:	83 fb 0f             	cmp    ebx,0xf
c0001a8d:	76 05                	jbe    c0001a94 <dlmallopt+0x43>
c0001a8f:	89 da                	mov    edx,ebx
c0001a91:	83 e2 f8             	and    edx,0xfffffff8
c0001a94:	a1 00 11 02 c0       	mov    eax,ds:0xc0021100
c0001a99:	83 e0 03             	and    eax,0x3
c0001a9c:	09 d0                	or     eax,edx
c0001a9e:	a3 00 11 02 c0       	mov    ds:0xc0021100,eax
c0001aa3:	eb 31                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aa5:	89 1d 44 14 02 c0    	mov    DWORD PTR ds:0xc0021444,ebx
c0001aab:	eb 06                	jmp    c0001ab3 <dlmallopt+0x62>
c0001aad:	89 1d 48 14 02 c0    	mov    DWORD PTR ds:0xc0021448,ebx
c0001ab3:	be 01 00 00 00       	mov    esi,0x1
c0001ab8:	eb 1c                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aba:	89 1d 4c 14 02 c0    	mov    DWORD PTR ds:0xc002144c,ebx
c0001ac0:	eb f1                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ac2:	31 f6                	xor    esi,esi
c0001ac4:	85 db                	test   ebx,ebx
c0001ac6:	75 0e                	jne    c0001ad6 <dlmallopt+0x85>
c0001ac8:	c7 05 54 14 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021454,0x0
c0001ad2:	eb df                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ad4:	31 f6                	xor    esi,esi
c0001ad6:	89 f0                	mov    eax,esi
c0001ad8:	5b                   	pop    ebx
c0001ad9:	5e                   	pop    esi
c0001ada:	c3                   	ret    
c0001adb:	90                   	nop

c0001adc <isblank>:
c0001adc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ae1:	74 09                	je     c0001aec <isblank+0x10>
c0001ae3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ae8:	75 0a                	jne    c0001af4 <isblank+0x18>
c0001aea:	66 90                	xchg   ax,ax
c0001aec:	b8 01 00 00 00       	mov    eax,0x1
c0001af1:	c3                   	ret    
c0001af2:	66 90                	xchg   ax,ax
c0001af4:	b8 00 00 00 00       	mov    eax,0x0
c0001af9:	c3                   	ret    
c0001afa:	66 90                	xchg   ax,ax

c0001afc <iscntrl>:
c0001afc:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b01:	7e 09                	jle    c0001b0c <iscntrl+0x10>
c0001b03:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b08:	75 0a                	jne    c0001b14 <iscntrl+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <isdigit>:
c0001b1c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b21:	7e 0d                	jle    c0001b30 <isdigit+0x14>
c0001b23:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b28:	7f 06                	jg     c0001b30 <isdigit+0x14>
c0001b2a:	b8 01 00 00 00       	mov    eax,0x1
c0001b2f:	c3                   	ret    
c0001b30:	b8 00 00 00 00       	mov    eax,0x0
c0001b35:	c3                   	ret    
c0001b36:	66 90                	xchg   ax,ax

c0001b38 <islower>:
c0001b38:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b3d:	7e 0d                	jle    c0001b4c <islower+0x14>
c0001b3f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b44:	7f 06                	jg     c0001b4c <islower+0x14>
c0001b46:	b8 01 00 00 00       	mov    eax,0x1
c0001b4b:	c3                   	ret    
c0001b4c:	b8 00 00 00 00       	mov    eax,0x0
c0001b51:	c3                   	ret    
c0001b52:	66 90                	xchg   ax,ax

c0001b54 <isspace>:
c0001b54:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b59:	7c 19                	jl     c0001b74 <isspace+0x20>
c0001b5b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b60:	7e 0a                	jle    c0001b6c <isspace+0x18>
c0001b62:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b67:	75 0b                	jne    c0001b74 <isspace+0x20>
c0001b69:	8d 76 00             	lea    esi,[esi+0x0]
c0001b6c:	b8 01 00 00 00       	mov    eax,0x1
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax
c0001b74:	b8 00 00 00 00       	mov    eax,0x0
c0001b79:	c3                   	ret    
c0001b7a:	66 90                	xchg   ax,ax

c0001b7c <isupper>:
c0001b7c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b81:	7e 0d                	jle    c0001b90 <isupper+0x14>
c0001b83:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b88:	7f 06                	jg     c0001b90 <isupper+0x14>
c0001b8a:	b8 01 00 00 00       	mov    eax,0x1
c0001b8f:	c3                   	ret    
c0001b90:	b8 00 00 00 00       	mov    eax,0x0
c0001b95:	c3                   	ret    
c0001b96:	66 90                	xchg   ax,ax

c0001b98 <isalpha>:
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 db ff ff ff       	call   c0001b7c <isupper>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	75 10                	jne    c0001bb8 <isalpha+0x20>
c0001ba8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bac:	e8 87 ff ff ff       	call   c0001b38 <islower>
c0001bb1:	83 c4 04             	add    esp,0x4
c0001bb4:	85 c0                	test   eax,eax
c0001bb6:	74 08                	je     c0001bc0 <isalpha+0x28>
c0001bb8:	b8 01 00 00 00       	mov    eax,0x1
c0001bbd:	c3                   	ret    
c0001bbe:	66 90                	xchg   ax,ax
c0001bc0:	b8 00 00 00 00       	mov    eax,0x0
c0001bc5:	c3                   	ret    
c0001bc6:	66 90                	xchg   ax,ax

c0001bc8 <isalnum>:
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 c7 ff ff ff       	call   c0001b98 <isalpha>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	75 10                	jne    c0001be8 <isalnum+0x20>
c0001bd8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bdc:	e8 3b ff ff ff       	call   c0001b1c <isdigit>
c0001be1:	83 c4 04             	add    esp,0x4
c0001be4:	85 c0                	test   eax,eax
c0001be6:	74 08                	je     c0001bf0 <isalnum+0x28>
c0001be8:	b8 01 00 00 00       	mov    eax,0x1
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax
c0001bf0:	b8 00 00 00 00       	mov    eax,0x0
c0001bf5:	c3                   	ret    
c0001bf6:	66 90                	xchg   ax,ax

c0001bf8 <ispunct>:
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 c7 ff ff ff       	call   c0001bc8 <isalnum>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 28                	jne    c0001c30 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 43 ff ff ff       	call   c0001b54 <isspace>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 18                	jne    c0001c30 <ispunct+0x38>
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 db fe ff ff       	call   c0001afc <iscntrl>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 08                	jne    c0001c30 <ispunct+0x38>
c0001c28:	b8 01 00 00 00       	mov    eax,0x1
c0001c2d:	c3                   	ret    
c0001c2e:	66 90                	xchg   ax,ax
c0001c30:	b8 00 00 00 00       	mov    eax,0x0
c0001c35:	c3                   	ret    
c0001c36:	66 90                	xchg   ax,ax

c0001c38 <isgraph>:
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 87 ff ff ff       	call   c0001bc8 <isalnum>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 10                	jne    c0001c58 <isgraph+0x20>
c0001c48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c4c:	e8 a7 ff ff ff       	call   c0001bf8 <ispunct>
c0001c51:	83 c4 04             	add    esp,0x4
c0001c54:	85 c0                	test   eax,eax
c0001c56:	74 08                	je     c0001c60 <isgraph+0x28>
c0001c58:	b8 01 00 00 00       	mov    eax,0x1
c0001c5d:	c3                   	ret    
c0001c5e:	66 90                	xchg   ax,ax
c0001c60:	b8 00 00 00 00       	mov    eax,0x0
c0001c65:	c3                   	ret    
c0001c66:	66 90                	xchg   ax,ax

c0001c68 <isprint>:
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 c7 ff ff ff       	call   c0001c38 <isgraph>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	75 08                	jne    c0001c80 <isprint+0x18>
c0001c78:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c7d:	75 09                	jne    c0001c88 <isprint+0x20>
c0001c7f:	90                   	nop
c0001c80:	b8 01 00 00 00       	mov    eax,0x1
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax
c0001c88:	b8 00 00 00 00       	mov    eax,0x0
c0001c8d:	c3                   	ret    
c0001c8e:	66 90                	xchg   ax,ax

c0001c90 <isxdigit>:
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 83 fe ff ff       	call   c0001b1c <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	75 20                	jne    c0001cc0 <isxdigit+0x30>
c0001ca0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ca5:	7e 09                	jle    c0001cb0 <isxdigit+0x20>
c0001ca7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001cac:	7e 12                	jle    c0001cc0 <isxdigit+0x30>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cb5:	7e 11                	jle    c0001cc8 <isxdigit+0x38>
c0001cb7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cbc:	7f 0a                	jg     c0001cc8 <isxdigit+0x38>
c0001cbe:	66 90                	xchg   ax,ax
c0001cc0:	b8 01 00 00 00       	mov    eax,0x1
c0001cc5:	c3                   	ret    
c0001cc6:	66 90                	xchg   ax,ax
c0001cc8:	b8 00 00 00 00       	mov    eax,0x0
c0001ccd:	c3                   	ret    

c0001cce <disk_status>:
c0001cce:	31 c0                	xor    eax,eax
c0001cd0:	c3                   	ret    

c0001cd1 <disk_initialize>:
c0001cd1:	31 c0                	xor    eax,eax
c0001cd3:	c3                   	ret    

c0001cd4 <disk_read>:
c0001cd4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cd9:	0f b6 04 85 c0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad40]
c0001ce1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ce5:	e9 32 52 01 00       	jmp    c0016f1c <fatWrapperReadDisk>

c0001cea <disk_write>:
c0001cea:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cef:	0f b6 04 85 c0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad40]
c0001cf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cfb:	e9 60 52 01 00       	jmp    c0016f60 <fatWrapperWriteDisk>

c0001d00 <disk_ioctl>:
c0001d00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d09:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0e:	0f b6 04 85 c0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad40]
c0001d16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1a:	e9 85 52 01 00       	jmp    c0016fa4 <fatWrapperIoctl>

c0001d1f <ld_word>:
c0001d1f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d23:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d26:	c1 e2 08             	shl    edx,0x8
c0001d29:	09 d0                	or     eax,edx
c0001d2b:	c3                   	ret    

c0001d2c <ld_dword>:
c0001d2c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d30:	89 d1                	mov    ecx,edx
c0001d32:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d36:	c1 e1 08             	shl    ecx,0x8
c0001d39:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d3c:	09 ca                	or     edx,ecx
c0001d3e:	c1 e2 08             	shl    edx,0x8
c0001d41:	09 d0                	or     eax,edx
c0001d43:	c3                   	ret    

c0001d44 <st_word>:
c0001d44:	66 89 10             	mov    WORD PTR [eax],dx
c0001d47:	c3                   	ret    

c0001d48 <st_dword>:
c0001d48:	89 10                	mov    DWORD PTR [eax],edx
c0001d4a:	c3                   	ret    

c0001d4b <mem_cpy>:
c0001d4b:	85 c9                	test   ecx,ecx
c0001d4d:	74 10                	je     c0001d5f <mem_cpy+0x14>
c0001d4f:	57                   	push   edi
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	56                   	push   esi
c0001d53:	89 c7                	mov    edi,eax
c0001d55:	89 d6                	mov    esi,edx
c0001d57:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d58:	39 f9                	cmp    ecx,edi
c0001d5a:	75 fb                	jne    c0001d57 <mem_cpy+0xc>
c0001d5c:	5e                   	pop    esi
c0001d5d:	5f                   	pop    edi
c0001d5e:	c3                   	ret    
c0001d5f:	c3                   	ret    

c0001d60 <mem_set>:
c0001d60:	01 c1                	add    ecx,eax
c0001d62:	40                   	inc    eax
c0001d63:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d66:	39 c8                	cmp    eax,ecx
c0001d68:	75 f8                	jne    c0001d62 <mem_set+0x2>
c0001d6a:	c3                   	ret    

c0001d6b <mem_cmp>:
c0001d6b:	57                   	push   edi
c0001d6c:	56                   	push   esi
c0001d6d:	89 c6                	mov    esi,eax
c0001d6f:	53                   	push   ebx
c0001d70:	46                   	inc    esi
c0001d71:	42                   	inc    edx
c0001d72:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d76:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d7a:	29 fb                	sub    ebx,edi
c0001d7c:	89 cf                	mov    edi,ecx
c0001d7e:	29 f7                	sub    edi,esi
c0001d80:	01 c7                	add    edi,eax
c0001d82:	74 04                	je     c0001d88 <mem_cmp+0x1d>
c0001d84:	85 db                	test   ebx,ebx
c0001d86:	74 e8                	je     c0001d70 <mem_cmp+0x5>
c0001d88:	89 d8                	mov    eax,ebx
c0001d8a:	5b                   	pop    ebx
c0001d8b:	5e                   	pop    esi
c0001d8c:	5f                   	pop    edi
c0001d8d:	c3                   	ret    

c0001d8e <chk_chr>:
c0001d8e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d91:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d94:	74 07                	je     c0001d9d <chk_chr+0xf>
c0001d96:	39 d1                	cmp    ecx,edx
c0001d98:	74 03                	je     c0001d9d <chk_chr+0xf>
c0001d9a:	40                   	inc    eax
c0001d9b:	eb f1                	jmp    c0001d8e <chk_chr>
c0001d9d:	89 c8                	mov    eax,ecx
c0001d9f:	c3                   	ret    

c0001da0 <dbc_1st>:
c0001da0:	31 c0                	xor    eax,eax
c0001da2:	c3                   	ret    

c0001da3 <dbc_2nd>:
c0001da3:	31 c0                	xor    eax,eax
c0001da5:	c3                   	ret    

c0001da6 <tchar2uni>:
c0001da6:	57                   	push   edi
c0001da7:	89 c7                	mov    edi,eax
c0001da9:	56                   	push   esi
c0001daa:	53                   	push   ebx
c0001dab:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dad:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001daf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001db2:	84 c9                	test   cl,cl
c0001db4:	78 0a                	js     c0001dc0 <tchar2uni+0x1a>
c0001db6:	0f b6 d1             	movzx  edx,cl
c0001db9:	89 f3                	mov    ebx,esi
c0001dbb:	e9 9f 00 00 00       	jmp    c0001e5f <tchar2uni+0xb9>
c0001dc0:	88 ca                	mov    dl,cl
c0001dc2:	83 e2 e0             	and    edx,0xffffffe0
c0001dc5:	80 fa c0             	cmp    dl,0xc0
c0001dc8:	75 0c                	jne    c0001dd6 <tchar2uni+0x30>
c0001dca:	89 ca                	mov    edx,ecx
c0001dcc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dd1:	83 e2 1f             	and    edx,0x1f
c0001dd4:	eb 2e                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dd6:	88 ca                	mov    dl,cl
c0001dd8:	83 e2 f0             	and    edx,0xfffffff0
c0001ddb:	80 fa e0             	cmp    dl,0xe0
c0001dde:	75 0c                	jne    c0001dec <tchar2uni+0x46>
c0001de0:	89 ca                	mov    edx,ecx
c0001de2:	b9 02 00 00 00       	mov    ecx,0x2
c0001de7:	83 e2 0f             	and    edx,0xf
c0001dea:	eb 18                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dec:	88 ca                	mov    dl,cl
c0001dee:	83 e2 f8             	and    edx,0xfffffff8
c0001df1:	88 d0                	mov    al,dl
c0001df3:	83 ca ff             	or     edx,0xffffffff
c0001df6:	3c f0                	cmp    al,0xf0
c0001df8:	75 6c                	jne    c0001e66 <tchar2uni+0xc0>
c0001dfa:	89 ca                	mov    edx,ecx
c0001dfc:	b9 03 00 00 00       	mov    ecx,0x3
c0001e01:	83 e2 07             	and    edx,0x7
c0001e04:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e08:	46                   	inc    esi
c0001e09:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e0c:	88 c8                	mov    al,cl
c0001e0e:	83 e0 c0             	and    eax,0xffffffc0
c0001e11:	3c 80                	cmp    al,0x80
c0001e13:	75 4e                	jne    c0001e63 <tchar2uni+0xbd>
c0001e15:	c1 e2 06             	shl    edx,0x6
c0001e18:	83 e1 3f             	and    ecx,0x3f
c0001e1b:	09 ca                	or     edx,ecx
c0001e1d:	39 de                	cmp    esi,ebx
c0001e1f:	75 e7                	jne    c0001e08 <tchar2uni+0x62>
c0001e21:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e24:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e2a:	77 37                	ja     c0001e63 <tchar2uni+0xbd>
c0001e2c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e32:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e38:	76 29                	jbe    c0001e63 <tchar2uni+0xbd>
c0001e3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e40:	76 1d                	jbe    c0001e5f <tchar2uni+0xb9>
c0001e42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e4e:	c1 e1 06             	shl    ecx,0x6
c0001e51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e57:	09 ca                	or     edx,ecx
c0001e59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e5f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e61:	eb 03                	jmp    c0001e66 <tchar2uni+0xc0>
c0001e63:	83 ca ff             	or     edx,0xffffffff
c0001e66:	5b                   	pop    ebx
c0001e67:	89 d0                	mov    eax,edx
c0001e69:	5e                   	pop    esi
c0001e6a:	5f                   	pop    edi
c0001e6b:	c3                   	ret    

c0001e6c <put_utf>:
c0001e6c:	53                   	push   ebx
c0001e6d:	83 f8 7f             	cmp    eax,0x7f
c0001e70:	89 c3                	mov    ebx,eax
c0001e72:	b0 00                	mov    al,0x0
c0001e74:	77 11                	ja     c0001e87 <put_utf+0x1b>
c0001e76:	85 c9                	test   ecx,ecx
c0001e78:	0f 84 e5 00 00 00    	je     c0001f63 <put_utf+0xf7>
c0001e7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e80:	b0 01                	mov    al,0x1
c0001e82:	e9 dc 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001e87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e8d:	77 23                	ja     c0001eb2 <put_utf+0x46>
c0001e8f:	83 f9 01             	cmp    ecx,0x1
c0001e92:	0f 86 cb 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001e98:	89 d8                	mov    eax,ebx
c0001e9a:	83 e3 3f             	and    ebx,0x3f
c0001e9d:	c1 e8 06             	shr    eax,0x6
c0001ea0:	83 cb 80             	or     ebx,0xffffff80
c0001ea3:	83 c8 c0             	or     eax,0xffffffc0
c0001ea6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ea9:	88 02                	mov    BYTE PTR [edx],al
c0001eab:	b0 02                	mov    al,0x2
c0001ead:	e9 b1 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001eb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001eb8:	77 40                	ja     c0001efa <put_utf+0x8e>
c0001eba:	83 f9 02             	cmp    ecx,0x2
c0001ebd:	0f 86 a0 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ec3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ec9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ecf:	0f 86 8e 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 c8 e0             	or     eax,0xffffffe0
c0001edd:	88 02                	mov    BYTE PTR [edx],al
c0001edf:	89 d8                	mov    eax,ebx
c0001ee1:	83 e3 3f             	and    ebx,0x3f
c0001ee4:	c1 e8 06             	shr    eax,0x6
c0001ee7:	83 cb 80             	or     ebx,0xffffff80
c0001eea:	83 e0 3f             	and    eax,0x3f
c0001eed:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ef0:	83 c8 80             	or     eax,0xffffff80
c0001ef3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ef6:	b0 03                	mov    al,0x3
c0001ef8:	eb 69                	jmp    c0001f63 <put_utf+0xf7>
c0001efa:	83 f9 03             	cmp    ecx,0x3
c0001efd:	76 64                	jbe    c0001f63 <put_utf+0xf7>
c0001eff:	89 d9                	mov    ecx,ebx
c0001f01:	0f b7 c3             	movzx  eax,bx
c0001f04:	66 31 c9             	xor    cx,cx
c0001f07:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f0d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f13:	c1 e9 06             	shr    ecx,0x6
c0001f16:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f1c:	77 43                	ja     c0001f61 <put_utf+0xf5>
c0001f1e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f24:	77 3b                	ja     c0001f61 <put_utf+0xf5>
c0001f26:	09 cb                	or     ebx,ecx
c0001f28:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f2e:	89 d8                	mov    eax,ebx
c0001f30:	c1 e8 12             	shr    eax,0x12
c0001f33:	83 c8 f0             	or     eax,0xfffffff0
c0001f36:	88 02                	mov    BYTE PTR [edx],al
c0001f38:	89 d8                	mov    eax,ebx
c0001f3a:	c1 e8 0c             	shr    eax,0xc
c0001f3d:	83 e0 3f             	and    eax,0x3f
c0001f40:	83 c8 80             	or     eax,0xffffff80
c0001f43:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f46:	89 d8                	mov    eax,ebx
c0001f48:	83 e3 3f             	and    ebx,0x3f
c0001f4b:	c1 e8 06             	shr    eax,0x6
c0001f4e:	83 cb 80             	or     ebx,0xffffff80
c0001f51:	83 e0 3f             	and    eax,0x3f
c0001f54:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f57:	83 c8 80             	or     eax,0xffffff80
c0001f5a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f5d:	b0 04                	mov    al,0x4
c0001f5f:	eb 02                	jmp    c0001f63 <put_utf+0xf7>
c0001f61:	31 c0                	xor    eax,eax
c0001f63:	5b                   	pop    ebx
c0001f64:	c3                   	ret    

c0001f65 <clst2sect>:
c0001f65:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f6b:	83 ea 02             	sub    edx,0x2
c0001f6e:	39 ca                	cmp    edx,ecx
c0001f70:	76 0d                	jbe    c0001f7f <clst2sect+0x1a>
c0001f72:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f76:	0f af d1             	imul   edx,ecx
c0001f79:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f7c:	89 d0                	mov    eax,edx
c0001f7e:	c3                   	ret    
c0001f7f:	31 c0                	xor    eax,eax
c0001f81:	c3                   	ret    

c0001f82 <pick_lfn>:
c0001f82:	55                   	push   ebp
c0001f83:	57                   	push   edi
c0001f84:	56                   	push   esi
c0001f85:	89 d6                	mov    esi,edx
c0001f87:	53                   	push   ebx
c0001f88:	89 c3                	mov    ebx,eax
c0001f8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f8d:	e8 8d fd ff ff       	call   c0001d1f <ld_word>
c0001f92:	66 85 c0             	test   ax,ax
c0001f95:	74 04                	je     c0001f9b <pick_lfn+0x19>
c0001f97:	31 c0                	xor    eax,eax
c0001f99:	eb 5c                	jmp    c0001ff7 <pick_lfn+0x75>
c0001f9b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f9e:	bd 01 00 00 00       	mov    ebp,0x1
c0001fa3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fa6:	31 ff                	xor    edi,edi
c0001fa8:	49                   	dec    ecx
c0001fa9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fac:	0f b6 87 40 d0 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe2fc0]
c0001fb3:	01 f0                	add    eax,esi
c0001fb5:	e8 65 fd ff ff       	call   c0001d1f <ld_word>
c0001fba:	66 85 ed             	test   bp,bp
c0001fbd:	74 11                	je     c0001fd0 <pick_lfn+0x4e>
c0001fbf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fc5:	77 d0                	ja     c0001f97 <pick_lfn+0x15>
c0001fc7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fcb:	89 c5                	mov    ebp,eax
c0001fcd:	41                   	inc    ecx
c0001fce:	eb 04                	jmp    c0001fd4 <pick_lfn+0x52>
c0001fd0:	66 40                	inc    ax
c0001fd2:	75 c3                	jne    c0001f97 <pick_lfn+0x15>
c0001fd4:	47                   	inc    edi
c0001fd5:	83 ff 0d             	cmp    edi,0xd
c0001fd8:	75 d2                	jne    c0001fac <pick_lfn+0x2a>
c0001fda:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fdd:	74 13                	je     c0001ff2 <pick_lfn+0x70>
c0001fdf:	66 85 ed             	test   bp,bp
c0001fe2:	74 0e                	je     c0001ff2 <pick_lfn+0x70>
c0001fe4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fea:	77 ab                	ja     c0001f97 <pick_lfn+0x15>
c0001fec:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ff2:	b8 01 00 00 00       	mov    eax,0x1
c0001ff7:	5b                   	pop    ebx
c0001ff8:	5e                   	pop    esi
c0001ff9:	5f                   	pop    edi
c0001ffa:	5d                   	pop    ebp
c0001ffb:	c3                   	ret    

c0001ffc <put_lfn>:
c0001ffc:	55                   	push   ebp
c0001ffd:	31 ed                	xor    ebp,ebp
c0001fff:	57                   	push   edi
c0002000:	89 d7                	mov    edi,edx
c0002002:	56                   	push   esi
c0002003:	31 f6                	xor    esi,esi
c0002005:	53                   	push   ebx
c0002006:	83 ec 08             	sub    esp,0x8
c0002009:	89 04 24             	mov    DWORD PTR [esp],eax
c000200c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002010:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002014:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000201a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000201d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002020:	31 d2                	xor    edx,edx
c0002022:	e8 1d fd ff ff       	call   c0001d44 <st_word>
c0002027:	0f b6 d9             	movzx  ebx,cl
c000202a:	4b                   	dec    ebx
c000202b:	6b db 0d             	imul   ebx,ebx,0xd
c000202e:	66 83 fe ff          	cmp    si,0xffff
c0002032:	74 08                	je     c000203c <put_lfn+0x40>
c0002034:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002037:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000203b:	43                   	inc    ebx
c000203c:	0f b6 85 40 d0 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe2fc0]
c0002043:	0f b7 d6             	movzx  edx,si
c0002046:	01 f8                	add    eax,edi
c0002048:	e8 f7 fc ff ff       	call   c0001d44 <st_word>
c000204d:	66 85 f6             	test   si,si
c0002050:	75 03                	jne    c0002055 <put_lfn+0x59>
c0002052:	83 ce ff             	or     esi,0xffffffff
c0002055:	45                   	inc    ebp
c0002056:	83 fd 0d             	cmp    ebp,0xd
c0002059:	75 d3                	jne    c000202e <put_lfn+0x32>
c000205b:	66 46                	inc    si
c000205d:	74 0a                	je     c0002069 <put_lfn+0x6d>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002067:	75 09                	jne    c0002072 <put_lfn+0x76>
c0002069:	88 c8                	mov    al,cl
c000206b:	83 c8 40             	or     eax,0x40
c000206e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002072:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002076:	88 07                	mov    BYTE PTR [edi],al
c0002078:	83 c4 08             	add    esp,0x8
c000207b:	5b                   	pop    ebx
c000207c:	5e                   	pop    esi
c000207d:	5f                   	pop    edi
c000207e:	5d                   	pop    ebp
c000207f:	c3                   	ret    

c0002080 <gen_numname>:
c0002080:	57                   	push   edi
c0002081:	89 cf                	mov    edi,ecx
c0002083:	56                   	push   esi
c0002084:	b9 0b 00 00 00       	mov    ecx,0xb
c0002089:	53                   	push   ebx
c000208a:	89 c6                	mov    esi,eax
c000208c:	83 ec 10             	sub    esp,0x10
c000208f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002093:	e8 b3 fc ff ff       	call   c0001d4b <mem_cpy>
c0002098:	83 fb 05             	cmp    ebx,0x5
c000209b:	76 2d                	jbe    c00020ca <gen_numname+0x4a>
c000209d:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020a0:	66 85 c0             	test   ax,ax
c00020a3:	74 25                	je     c00020ca <gen_numname+0x4a>
c00020a5:	83 c7 02             	add    edi,0x2
c00020a8:	ba 10 00 00 00       	mov    edx,0x10
c00020ad:	01 db                	add    ebx,ebx
c00020af:	89 c1                	mov    ecx,eax
c00020b1:	66 d1 e8             	shr    ax,1
c00020b4:	83 e1 01             	and    ecx,0x1
c00020b7:	01 cb                	add    ebx,ecx
c00020b9:	0f ba e3 10          	bt     ebx,0x10
c00020bd:	73 06                	jae    c00020c5 <gen_numname+0x45>
c00020bf:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020c5:	4a                   	dec    edx
c00020c6:	75 e5                	jne    c00020ad <gen_numname+0x2d>
c00020c8:	eb d3                	jmp    c000209d <gen_numname+0x1d>
c00020ca:	b8 07 00 00 00       	mov    eax,0x7
c00020cf:	88 d9                	mov    cl,bl
c00020d1:	83 e1 0f             	and    ecx,0xf
c00020d4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020d7:	80 fa 39             	cmp    dl,0x39
c00020da:	76 03                	jbe    c00020df <gen_numname+0x5f>
c00020dc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020df:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020e2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020e6:	89 da                	mov    edx,ebx
c00020e8:	c1 ea 04             	shr    edx,0x4
c00020eb:	83 fb 0f             	cmp    ebx,0xf
c00020ee:	76 06                	jbe    c00020f6 <gen_numname+0x76>
c00020f0:	89 c8                	mov    eax,ecx
c00020f2:	89 d3                	mov    ebx,edx
c00020f4:	eb d9                	jmp    c00020cf <gen_numname+0x4f>
c00020f6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002100:	8d 04 16             	lea    eax,[esi+edx*1]
c0002103:	39 ca                	cmp    edx,ecx
c0002105:	73 18                	jae    c000211f <gen_numname+0x9f>
c0002107:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000210a:	3c 20                	cmp    al,0x20
c000210c:	74 11                	je     c000211f <gen_numname+0x9f>
c000210e:	e8 8d fc ff ff       	call   c0001da0 <dbc_1st>
c0002113:	85 c0                	test   eax,eax
c0002115:	74 05                	je     c000211c <gen_numname+0x9c>
c0002117:	39 d3                	cmp    ebx,edx
c0002119:	74 04                	je     c000211f <gen_numname+0x9f>
c000211b:	42                   	inc    edx
c000211c:	42                   	inc    edx
c000211d:	eb e1                	jmp    c0002100 <gen_numname+0x80>
c000211f:	b0 20                	mov    al,0x20
c0002121:	83 f9 07             	cmp    ecx,0x7
c0002124:	77 05                	ja     c000212b <gen_numname+0xab>
c0002126:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000212a:	41                   	inc    ecx
c000212b:	42                   	inc    edx
c000212c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002130:	83 fa 07             	cmp    edx,0x7
c0002133:	76 ea                	jbe    c000211f <gen_numname+0x9f>
c0002135:	83 c4 10             	add    esp,0x10
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	c3                   	ret    

c000213c <sum_sfn>:
c000213c:	31 c9                	xor    ecx,ecx
c000213e:	31 d2                	xor    edx,edx
c0002140:	d0 ca                	ror    dl,1
c0002142:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002145:	41                   	inc    ecx
c0002146:	83 f9 0b             	cmp    ecx,0xb
c0002149:	75 f5                	jne    c0002140 <sum_sfn+0x4>
c000214b:	88 d0                	mov    al,dl
c000214d:	c3                   	ret    

c000214e <get_ldnumber>:
c000214e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002150:	85 d2                	test   edx,edx
c0002152:	74 14                	je     c0002168 <get_ldnumber+0x1a>
c0002154:	56                   	push   esi
c0002155:	53                   	push   ebx
c0002156:	89 d3                	mov    ebx,edx
c0002158:	43                   	inc    ebx
c0002159:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215c:	80 f9 1f             	cmp    cl,0x1f
c000215f:	76 0d                	jbe    c000216e <get_ldnumber+0x20>
c0002161:	80 f9 3a             	cmp    cl,0x3a
c0002164:	75 f2                	jne    c0002158 <get_ldnumber+0xa>
c0002166:	eb 0a                	jmp    c0002172 <get_ldnumber+0x24>
c0002168:	83 c9 ff             	or     ecx,0xffffffff
c000216b:	89 c8                	mov    eax,ecx
c000216d:	c3                   	ret    
c000216e:	31 c9                	xor    ecx,ecx
c0002170:	eb 24                	jmp    c0002196 <get_ldnumber+0x48>
c0002172:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002175:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002178:	80 f9 09             	cmp    cl,0x9
c000217b:	77 16                	ja     c0002193 <get_ldnumber+0x45>
c000217d:	83 c2 02             	add    edx,0x2
c0002180:	83 c9 ff             	or     ecx,0xffffffff
c0002183:	39 d3                	cmp    ebx,edx
c0002185:	75 0f                	jne    c0002196 <get_ldnumber+0x48>
c0002187:	89 f2                	mov    edx,esi
c0002189:	89 18                	mov    DWORD PTR [eax],ebx
c000218b:	0f be ca             	movsx  ecx,dl
c000218e:	83 e9 30             	sub    ecx,0x30
c0002191:	eb 03                	jmp    c0002196 <get_ldnumber+0x48>
c0002193:	83 c9 ff             	or     ecx,0xffffffff
c0002196:	89 c8                	mov    eax,ecx
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	c3                   	ret    

c000219b <validate>:
c000219b:	56                   	push   esi
c000219c:	53                   	push   ebx
c000219d:	89 d6                	mov    esi,edx
c000219f:	51                   	push   ecx
c00021a0:	85 c0                	test   eax,eax
c00021a2:	75 09                	jne    c00021ad <validate+0x12>
c00021a4:	b8 09 00 00 00       	mov    eax,0x9
c00021a9:	31 c9                	xor    ecx,ecx
c00021ab:	eb 2f                	jmp    c00021dc <validate+0x41>
c00021ad:	89 c3                	mov    ebx,eax
c00021af:	8b 00                	mov    eax,DWORD PTR [eax]
c00021b1:	85 c0                	test   eax,eax
c00021b3:	74 ef                	je     c00021a4 <validate+0x9>
c00021b5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021b8:	74 ea                	je     c00021a4 <validate+0x9>
c00021ba:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021be:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021c2:	75 e0                	jne    c00021a4 <validate+0x9>
c00021c4:	83 ec 0c             	sub    esp,0xc
c00021c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021cb:	50                   	push   eax
c00021cc:	e8 fd fa ff ff       	call   c0001cce <disk_status>
c00021d1:	83 c4 10             	add    esp,0x10
c00021d4:	a8 01                	test   al,0x1
c00021d6:	75 cc                	jne    c00021a4 <validate+0x9>
c00021d8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021da:	31 c0                	xor    eax,eax
c00021dc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021de:	5a                   	pop    edx
c00021df:	5b                   	pop    ebx
c00021e0:	5e                   	pop    esi
c00021e1:	c3                   	ret    

c00021e2 <sync_window>:
c00021e2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021e6:	74 58                	je     c0002240 <sync_window+0x5e>
c00021e8:	56                   	push   esi
c00021e9:	53                   	push   ebx
c00021ea:	8d 70 34             	lea    esi,[eax+0x34]
c00021ed:	51                   	push   ecx
c00021ee:	89 c3                	mov    ebx,eax
c00021f0:	6a 01                	push   0x1
c00021f2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021f5:	56                   	push   esi
c00021f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021fa:	50                   	push   eax
c00021fb:	e8 ea fa ff ff       	call   c0001cea <disk_write>
c0002200:	83 c4 10             	add    esp,0x10
c0002203:	ba 01 00 00 00       	mov    edx,0x1
c0002208:	85 c0                	test   eax,eax
c000220a:	75 2e                	jne    c000223a <sync_window+0x58>
c000220c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000220f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002212:	89 c1                	mov    ecx,eax
c0002214:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002218:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000221b:	39 d1                	cmp    ecx,edx
c000221d:	73 19                	jae    c0002238 <sync_window+0x56>
c000221f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002223:	75 13                	jne    c0002238 <sync_window+0x56>
c0002225:	6a 01                	push   0x1
c0002227:	01 d0                	add    eax,edx
c0002229:	50                   	push   eax
c000222a:	56                   	push   esi
c000222b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000222f:	50                   	push   eax
c0002230:	e8 b5 fa ff ff       	call   c0001cea <disk_write>
c0002235:	83 c4 10             	add    esp,0x10
c0002238:	31 d2                	xor    edx,edx
c000223a:	89 d0                	mov    eax,edx
c000223c:	5a                   	pop    edx
c000223d:	5b                   	pop    ebx
c000223e:	5e                   	pop    esi
c000223f:	c3                   	ret    
c0002240:	31 d2                	xor    edx,edx
c0002242:	89 d0                	mov    eax,edx
c0002244:	c3                   	ret    

c0002245 <move_window>:
c0002245:	57                   	push   edi
c0002246:	56                   	push   esi
c0002247:	31 f6                	xor    esi,esi
c0002249:	53                   	push   ebx
c000224a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000224d:	74 32                	je     c0002281 <move_window+0x3c>
c000224f:	89 c3                	mov    ebx,eax
c0002251:	89 d7                	mov    edi,edx
c0002253:	e8 8a ff ff ff       	call   c00021e2 <sync_window>
c0002258:	89 c6                	mov    esi,eax
c000225a:	85 c0                	test   eax,eax
c000225c:	75 23                	jne    c0002281 <move_window+0x3c>
c000225e:	6a 01                	push   0x1
c0002260:	8d 43 34             	lea    eax,[ebx+0x34]
c0002263:	57                   	push   edi
c0002264:	50                   	push   eax
c0002265:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002269:	50                   	push   eax
c000226a:	e8 65 fa ff ff       	call   c0001cd4 <disk_read>
c000226f:	83 c4 10             	add    esp,0x10
c0002272:	85 c0                	test   eax,eax
c0002274:	74 08                	je     c000227e <move_window+0x39>
c0002276:	be 01 00 00 00       	mov    esi,0x1
c000227b:	83 cf ff             	or     edi,0xffffffff
c000227e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002281:	89 f0                	mov    eax,esi
c0002283:	5b                   	pop    ebx
c0002284:	5e                   	pop    esi
c0002285:	5f                   	pop    edi
c0002286:	c3                   	ret    

c0002287 <check_fs>:
c0002287:	53                   	push   ebx
c0002288:	89 c3                	mov    ebx,eax
c000228a:	83 ec 08             	sub    esp,0x8
c000228d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002291:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002298:	e8 a8 ff ff ff       	call   c0002245 <move_window>
c000229d:	ba 04 00 00 00       	mov    edx,0x4
c00022a2:	85 c0                	test   eax,eax
c00022a4:	75 68                	jne    c000230e <check_fs+0x87>
c00022a6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022ac:	e8 6e fa ff ff       	call   c0001d1f <ld_word>
c00022b1:	ba 03 00 00 00       	mov    edx,0x3
c00022b6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ba:	75 52                	jne    c000230e <check_fs+0x87>
c00022bc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022bf:	8d 50 18             	lea    edx,[eax+0x18]
c00022c2:	80 fa 01             	cmp    dl,0x1
c00022c5:	76 09                	jbe    c00022d0 <check_fs+0x49>
c00022c7:	ba 02 00 00 00       	mov    edx,0x2
c00022cc:	3c eb                	cmp    al,0xeb
c00022ce:	75 3e                	jne    c000230e <check_fs+0x87>
c00022d0:	ba 38 f0 01 c0       	mov    edx,0xc001f038
c00022d5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022d8:	b9 03 00 00 00       	mov    ecx,0x3
c00022dd:	e8 89 fa ff ff       	call   c0001d6b <mem_cmp>
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	85 c0                	test   eax,eax
c00022e6:	74 26                	je     c000230e <check_fs+0x87>
c00022e8:	ba fc ce 01 c0       	mov    edx,0xc001cefc
c00022ed:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022f3:	b9 05 00 00 00       	mov    ecx,0x5
c00022f8:	e8 6e fa ff ff       	call   c0001d6b <mem_cmp>
c00022fd:	31 d2                	xor    edx,edx
c00022ff:	85 c0                	test   eax,eax
c0002301:	74 0b                	je     c000230e <check_fs+0x87>
c0002303:	31 d2                	xor    edx,edx
c0002305:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002309:	0f 95 c2             	setne  dl
c000230c:	01 d2                	add    edx,edx
c000230e:	89 d0                	mov    eax,edx
c0002310:	83 c4 08             	add    esp,0x8
c0002313:	5b                   	pop    ebx
c0002314:	c3                   	ret    

c0002315 <find_volume>:
c0002315:	55                   	push   ebp
c0002316:	57                   	push   edi
c0002317:	56                   	push   esi
c0002318:	89 c6                	mov    esi,eax
c000231a:	53                   	push   ebx
c000231b:	89 d3                	mov    ebx,edx
c000231d:	83 ec 2c             	sub    esp,0x2c
c0002320:	31 d2                	xor    edx,edx
c0002322:	e8 60 ff ff ff       	call   c0002287 <check_fs>
c0002327:	83 f8 02             	cmp    eax,0x2
c000232a:	74 06                	je     c0002332 <find_volume+0x1d>
c000232c:	77 62                	ja     c0002390 <find_volume+0x7b>
c000232e:	85 db                	test   ebx,ebx
c0002330:	74 5e                	je     c0002390 <find_volume+0x7b>
c0002332:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002336:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000233c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002342:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002346:	89 cf                	mov    edi,ecx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 e8                	mov    eax,ebp
c000234e:	83 c5 10             	add    ebp,0x10
c0002351:	e8 d6 f9 ff ff       	call   c0001d2c <ld_dword>
c0002356:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235a:	89 01                	mov    DWORD PTR [ecx],eax
c000235c:	83 c1 04             	add    ecx,0x4
c000235f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002363:	75 e3                	jne    c0002348 <find_volume+0x33>
c0002365:	31 ed                	xor    ebp,ebp
c0002367:	85 db                	test   ebx,ebx
c0002369:	74 03                	je     c000236e <find_volume+0x59>
c000236b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000236e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002371:	b8 03 00 00 00       	mov    eax,0x3
c0002376:	85 d2                	test   edx,edx
c0002378:	74 0c                	je     c0002386 <find_volume+0x71>
c000237a:	89 f0                	mov    eax,esi
c000237c:	e8 06 ff ff ff       	call   c0002287 <check_fs>
c0002381:	83 f8 01             	cmp    eax,0x1
c0002384:	76 0a                	jbe    c0002390 <find_volume+0x7b>
c0002386:	85 db                	test   ebx,ebx
c0002388:	75 06                	jne    c0002390 <find_volume+0x7b>
c000238a:	45                   	inc    ebp
c000238b:	83 fd 03             	cmp    ebp,0x3
c000238e:	76 de                	jbe    c000236e <find_volume+0x59>
c0002390:	83 c4 2c             	add    esp,0x2c
c0002393:	5b                   	pop    ebx
c0002394:	5e                   	pop    esi
c0002395:	5f                   	pop    edi
c0002396:	5d                   	pop    ebp
c0002397:	c3                   	ret    

c0002398 <mount_volume>:
c0002398:	55                   	push   ebp
c0002399:	89 d5                	mov    ebp,edx
c000239b:	57                   	push   edi
c000239c:	89 cf                	mov    edi,ecx
c000239e:	56                   	push   esi
c000239f:	53                   	push   ebx
c00023a0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023a5:	83 ec 2c             	sub    esp,0x2c
c00023a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ae:	e8 9b fd ff ff       	call   c000214e <get_ldnumber>
c00023b3:	85 c0                	test   eax,eax
c00023b5:	0f 88 d6 02 00 00    	js     c0002691 <mount_volume+0x2f9>
c00023bb:	8b 34 85 a0 14 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdeb60]
c00023c2:	89 c2                	mov    edx,eax
c00023c4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023c9:	85 f6                	test   esi,esi
c00023cb:	0f 84 c0 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c00023d1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023d4:	83 e7 fe             	and    edi,0xfffffffe
c00023d7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023da:	74 3a                	je     c0002416 <mount_volume+0x7e>
c00023dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023e0:	83 ec 0c             	sub    esp,0xc
c00023e3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023e7:	50                   	push   eax
c00023e8:	e8 e1 f8 ff ff       	call   c0001cce <disk_status>
c00023ed:	83 c4 10             	add    esp,0x10
c00023f0:	a8 01                	test   al,0x1
c00023f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023f6:	75 1e                	jne    c0002416 <mount_volume+0x7e>
c00023f8:	31 db                	xor    ebx,ebx
c00023fa:	89 f9                	mov    ecx,edi
c00023fc:	84 c9                	test   cl,cl
c00023fe:	0f 84 8d 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002404:	a8 04                	test   al,0x4
c0002406:	0f 84 85 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c000240c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002411:	e9 7b 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002416:	83 ec 0c             	sub    esp,0xc
c0002419:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000241c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000241f:	0f b6 c2             	movzx  eax,dl
c0002422:	bb 03 00 00 00       	mov    ebx,0x3
c0002427:	50                   	push   eax
c0002428:	e8 a4 f8 ff ff       	call   c0001cd1 <disk_initialize>
c000242d:	83 c4 10             	add    esp,0x10
c0002430:	a8 01                	test   al,0x1
c0002432:	0f 85 59 02 00 00    	jne    c0002691 <mount_volume+0x2f9>
c0002438:	89 f9                	mov    ecx,edi
c000243a:	84 c9                	test   cl,cl
c000243c:	74 04                	je     c0002442 <mount_volume+0xaa>
c000243e:	a8 04                	test   al,0x4
c0002440:	75 ca                	jne    c000240c <mount_volume+0x74>
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 f0                	mov    eax,esi
c0002446:	bb 01 00 00 00       	mov    ebx,0x1
c000244b:	e8 c5 fe ff ff       	call   c0002315 <find_volume>
c0002450:	83 f8 04             	cmp    eax,0x4
c0002453:	0f 84 38 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002459:	83 f8 01             	cmp    eax,0x1
c000245c:	76 0a                	jbe    c0002468 <mount_volume+0xd0>
c000245e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002463:	e9 29 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002468:	8d 46 3f             	lea    eax,[esi+0x3f]
c000246b:	e8 af f8 ff ff       	call   c0001d1f <ld_word>
c0002470:	66 3d 00 02          	cmp    ax,0x200
c0002474:	75 e8                	jne    c000245e <mount_volume+0xc6>
c0002476:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002479:	e8 a1 f8 ff ff       	call   c0001d1f <ld_word>
c000247e:	0f b7 c0             	movzx  eax,ax
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	85 c0                	test   eax,eax
c0002487:	75 0c                	jne    c0002495 <mount_volume+0xfd>
c0002489:	8d 46 58             	lea    eax,[esi+0x58]
c000248c:	e8 9b f8 ff ff       	call   c0001d2c <ld_dword>
c0002491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002495:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002498:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000249b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000249f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024a3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024a6:	89 e8                	mov    eax,ebp
c00024a8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024ab:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ae:	3c 01                	cmp    al,0x1
c00024b0:	77 ac                	ja     c000245e <mount_volume+0xc6>
c00024b2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024b6:	89 c3                	mov    ebx,eax
c00024b8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024bc:	66 85 c0             	test   ax,ax
c00024bf:	74 9d                	je     c000245e <mount_volume+0xc6>
c00024c1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024c4:	85 d8                	test   eax,ebx
c00024c6:	75 96                	jne    c000245e <mount_volume+0xc6>
c00024c8:	8d 46 45             	lea    eax,[esi+0x45]
c00024cb:	e8 4f f8 ff ff       	call   c0001d1f <ld_word>
c00024d0:	89 c7                	mov    edi,eax
c00024d2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024d6:	a8 0f                	test   al,0xf
c00024d8:	75 84                	jne    c000245e <mount_volume+0xc6>
c00024da:	8d 46 47             	lea    eax,[esi+0x47]
c00024dd:	e8 3d f8 ff ff       	call   c0001d1f <ld_word>
c00024e2:	0f b7 d0             	movzx  edx,ax
c00024e5:	85 d2                	test   edx,edx
c00024e7:	75 0a                	jne    c00024f3 <mount_volume+0x15b>
c00024e9:	8d 46 54             	lea    eax,[esi+0x54]
c00024ec:	e8 3b f8 ff ff       	call   c0001d2c <ld_dword>
c00024f1:	89 c2                	mov    edx,eax
c00024f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f7:	8d 46 42             	lea    eax,[esi+0x42]
c00024fa:	e8 20 f8 ff ff       	call   c0001d1f <ld_word>
c00024ff:	66 85 c0             	test   ax,ax
c0002502:	0f 84 56 ff ff ff    	je     c000245e <mount_volume+0xc6>
c0002508:	89 e9                	mov    ecx,ebp
c000250a:	0f b7 c0             	movzx  eax,ax
c000250d:	0f b6 e9             	movzx  ebp,cl
c0002510:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002514:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002518:	89 f8                	mov    eax,edi
c000251a:	0f af cd             	imul   ecx,ebp
c000251d:	66 c1 e8 04          	shr    ax,0x4
c0002521:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002525:	0f b7 c0             	movzx  eax,ax
c0002528:	01 c8                	add    eax,ecx
c000252a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000252e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002532:	39 c2                	cmp    edx,eax
c0002534:	0f 82 24 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000253a:	29 c2                	sub    edx,eax
c000253c:	89 d5                	mov    ebp,edx
c000253e:	89 d0                	mov    eax,edx
c0002540:	31 d2                	xor    edx,edx
c0002542:	f7 f3                	div    ebx
c0002544:	39 dd                	cmp    ebp,ebx
c0002546:	0f 82 12 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000254c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002551:	0f 87 07 ff ff ff    	ja     c000245e <mount_volume+0xc6>
c0002557:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000255c:	0f 86 1f 01 00 00    	jbe    c0002681 <mount_volume+0x2e9>
c0002562:	bb 03 00 00 00       	mov    ebx,0x3
c0002567:	8d 68 02             	lea    ebp,[eax+0x2]
c000256a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000256e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002572:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002576:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002579:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000257c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002580:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002583:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002587:	83 fb 03             	cmp    ebx,0x3
c000258a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000258d:	75 21                	jne    c00025b0 <mount_volume+0x218>
c000258f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002592:	e8 88 f7 ff ff       	call   c0001d1f <ld_word>
c0002597:	66 09 c7             	or     di,ax
c000259a:	0f 85 be fe ff ff    	jne    c000245e <mount_volume+0xc6>
c00025a0:	8d 46 60             	lea    eax,[esi+0x60]
c00025a3:	c1 e5 02             	shl    ebp,0x2
c00025a6:	e8 81 f7 ff ff       	call   c0001d2c <ld_dword>
c00025ab:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ae:	eb 22                	jmp    c00025d2 <mount_volume+0x23a>
c00025b0:	66 85 ff             	test   di,di
c00025b3:	0f 84 a5 fe ff ff    	je     c000245e <mount_volume+0xc6>
c00025b9:	01 c8                	add    eax,ecx
c00025bb:	83 fb 02             	cmp    ebx,0x2
c00025be:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025c1:	75 04                	jne    c00025c7 <mount_volume+0x22f>
c00025c3:	01 ed                	add    ebp,ebp
c00025c5:	eb 0b                	jmp    c00025d2 <mount_volume+0x23a>
c00025c7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025cb:	83 e5 01             	and    ebp,0x1
c00025ce:	d1 e8                	shr    eax,1
c00025d0:	01 c5                	add    ebp,eax
c00025d2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025d8:	c1 ed 09             	shr    ebp,0x9
c00025db:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025df:	0f 87 79 fe ff ff    	ja     c000245e <mount_volume+0xc6>
c00025e5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025ec:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025f3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025f7:	83 fb 03             	cmp    ebx,0x3
c00025fa:	75 6e                	jne    c000266a <mount_volume+0x2d2>
c00025fc:	8d 46 64             	lea    eax,[esi+0x64]
c00025ff:	e8 1b f7 ff ff       	call   c0001d1f <ld_word>
c0002604:	66 48                	dec    ax
c0002606:	75 62                	jne    c000266a <mount_volume+0x2d2>
c0002608:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000260c:	89 f0                	mov    eax,esi
c000260e:	42                   	inc    edx
c000260f:	e8 31 fc ff ff       	call   c0002245 <move_window>
c0002614:	85 c0                	test   eax,eax
c0002616:	75 52                	jne    c000266a <mount_volume+0x2d2>
c0002618:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000261c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002622:	e8 f8 f6 ff ff       	call   c0001d1f <ld_word>
c0002627:	66 3d 55 aa          	cmp    ax,0xaa55
c000262b:	75 3d                	jne    c000266a <mount_volume+0x2d2>
c000262d:	8d 46 34             	lea    eax,[esi+0x34]
c0002630:	e8 f7 f6 ff ff       	call   c0001d2c <ld_dword>
c0002635:	3d 52 52 61 41       	cmp    eax,0x41615252
c000263a:	75 2e                	jne    c000266a <mount_volume+0x2d2>
c000263c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002642:	e8 e5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002647:	3d 72 72 41 61       	cmp    eax,0x61417272
c000264c:	75 1c                	jne    c000266a <mount_volume+0x2d2>
c000264e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002654:	e8 d3 f6 ff ff       	call   c0001d2c <ld_dword>
c0002659:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000265c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002662:	e8 c5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000266a:	66 a1 80 14 02 c0    	mov    ax,ds:0xc0021480
c0002670:	88 1e                	mov    BYTE PTR [esi],bl
c0002672:	40                   	inc    eax
c0002673:	31 db                	xor    ebx,ebx
c0002675:	66 a3 80 14 02 c0    	mov    ds:0xc0021480,ax
c000267b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000267f:	eb 10                	jmp    c0002691 <mount_volume+0x2f9>
c0002681:	31 db                	xor    ebx,ebx
c0002683:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002688:	0f 97 c3             	seta   bl
c000268b:	43                   	inc    ebx
c000268c:	e9 d6 fe ff ff       	jmp    c0002567 <mount_volume+0x1cf>
c0002691:	83 c4 2c             	add    esp,0x2c
c0002694:	89 d8                	mov    eax,ebx
c0002696:	5b                   	pop    ebx
c0002697:	5e                   	pop    esi
c0002698:	5f                   	pop    edi
c0002699:	5d                   	pop    ebp
c000269a:	c3                   	ret    

c000269b <put_fat>:
c000269b:	55                   	push   ebp
c000269c:	bd 02 00 00 00       	mov    ebp,0x2
c00026a1:	57                   	push   edi
c00026a2:	56                   	push   esi
c00026a3:	53                   	push   ebx
c00026a4:	83 ec 1c             	sub    esp,0x1c
c00026a7:	83 fa 01             	cmp    edx,0x1
c00026aa:	0f 86 31 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026b3:	0f 86 28 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b9:	89 c6                	mov    esi,eax
c00026bb:	89 cf                	mov    edi,ecx
c00026bd:	8a 00                	mov    al,BYTE PTR [eax]
c00026bf:	89 d3                	mov    ebx,edx
c00026c1:	3c 02                	cmp    al,0x2
c00026c3:	0f 84 ac 00 00 00    	je     c0002775 <put_fat+0xda>
c00026c9:	3c 03                	cmp    al,0x3
c00026cb:	0f 84 d1 00 00 00    	je     c00027a2 <put_fat+0x107>
c00026d1:	fe c8                	dec    al
c00026d3:	0f 85 08 01 00 00    	jne    c00027e1 <put_fat+0x146>
c00026d9:	89 d1                	mov    ecx,edx
c00026db:	89 f0                	mov    eax,esi
c00026dd:	d1 e9                	shr    ecx,1
c00026df:	01 d1                	add    ecx,edx
c00026e1:	89 ca                	mov    edx,ecx
c00026e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026e7:	c1 ea 09             	shr    edx,0x9
c00026ea:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026ed:	e8 53 fb ff ff       	call   c0002245 <move_window>
c00026f2:	89 c5                	mov    ebp,eax
c00026f4:	85 c0                	test   eax,eax
c00026f6:	0f 85 e5 00 00 00    	jne    c00027e1 <put_fat+0x146>
c00026fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002700:	8d 46 34             	lea    eax,[esi+0x34]
c0002703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002707:	8d 41 01             	lea    eax,[ecx+0x1]
c000270a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002714:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002718:	89 f8                	mov    eax,edi
c000271a:	83 e3 01             	and    ebx,0x1
c000271d:	74 0c                	je     c000272b <put_fat+0x90>
c000271f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002721:	89 f8                	mov    eax,edi
c0002723:	83 e2 0f             	and    edx,0xf
c0002726:	c1 e0 04             	shl    eax,0x4
c0002729:	09 d0                	or     eax,edx
c000272b:	88 01                	mov    BYTE PTR [ecx],al
c000272d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002731:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002735:	c1 ea 09             	shr    edx,0x9
c0002738:	89 f0                	mov    eax,esi
c000273a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000273d:	e8 03 fb ff ff       	call   c0002245 <move_window>
c0002742:	89 c5                	mov    ebp,eax
c0002744:	85 c0                	test   eax,eax
c0002746:	0f 85 95 00 00 00    	jne    c00027e1 <put_fat+0x146>
c000274c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002750:	25 ff 01 00 00       	and    eax,0x1ff
c0002755:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002759:	85 db                	test   ebx,ebx
c000275b:	74 07                	je     c0002764 <put_fat+0xc9>
c000275d:	c1 ef 04             	shr    edi,0x4
c0002760:	89 f9                	mov    ecx,edi
c0002762:	eb 0d                	jmp    c0002771 <put_fat+0xd6>
c0002764:	8a 08                	mov    cl,BYTE PTR [eax]
c0002766:	c1 ef 08             	shr    edi,0x8
c0002769:	83 e1 f0             	and    ecx,0xfffffff0
c000276c:	83 e7 0f             	and    edi,0xf
c000276f:	09 f9                	or     ecx,edi
c0002771:	88 08                	mov    BYTE PTR [eax],cl
c0002773:	eb 27                	jmp    c000279c <put_fat+0x101>
c0002775:	c1 ea 08             	shr    edx,0x8
c0002778:	89 f0                	mov    eax,esi
c000277a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000277d:	e8 c3 fa ff ff       	call   c0002245 <move_window>
c0002782:	89 c5                	mov    ebp,eax
c0002784:	85 c0                	test   eax,eax
c0002786:	75 59                	jne    c00027e1 <put_fat+0x146>
c0002788:	01 db                	add    ebx,ebx
c000278a:	0f b7 d7             	movzx  edx,di
c000278d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002793:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002797:	e8 a8 f5 ff ff       	call   c0001d44 <st_word>
c000279c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027a0:	eb 3f                	jmp    c00027e1 <put_fat+0x146>
c00027a2:	c1 ea 07             	shr    edx,0x7
c00027a5:	89 f0                	mov    eax,esi
c00027a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027aa:	e8 96 fa ff ff       	call   c0002245 <move_window>
c00027af:	89 c5                	mov    ebp,eax
c00027b1:	85 c0                	test   eax,eax
c00027b3:	75 2c                	jne    c00027e1 <put_fat+0x146>
c00027b5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027bb:	c1 e3 02             	shl    ebx,0x2
c00027be:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027c4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 5d f5 ff ff       	call   c0001d2c <ld_dword>
c00027cf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027d4:	09 f8                	or     eax,edi
c00027d6:	89 c2                	mov    edx,eax
c00027d8:	89 d8                	mov    eax,ebx
c00027da:	e8 69 f5 ff ff       	call   c0001d48 <st_dword>
c00027df:	eb bb                	jmp    c000279c <put_fat+0x101>
c00027e1:	83 c4 1c             	add    esp,0x1c
c00027e4:	89 e8                	mov    eax,ebp
c00027e6:	5b                   	pop    ebx
c00027e7:	5e                   	pop    esi
c00027e8:	5f                   	pop    edi
c00027e9:	5d                   	pop    ebp
c00027ea:	c3                   	ret    

c00027eb <dir_clear>:
c00027eb:	55                   	push   ebp
c00027ec:	57                   	push   edi
c00027ed:	56                   	push   esi
c00027ee:	89 c6                	mov    esi,eax
c00027f0:	53                   	push   ebx
c00027f1:	83 ec 1c             	sub    esp,0x1c
c00027f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027f8:	e8 e5 f9 ff ff       	call   c00021e2 <sync_window>
c00027fd:	85 c0                	test   eax,eax
c00027ff:	0f 85 c0 00 00 00    	jne    c00028c5 <dir_clear+0xda>
c0002805:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002809:	89 f0                	mov    eax,esi
c000280b:	e8 55 f7 ff ff       	call   c0001f65 <clst2sect>
c0002810:	31 d2                	xor    edx,edx
c0002812:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002815:	89 c5                	mov    ebp,eax
c0002817:	b9 00 02 00 00       	mov    ecx,0x200
c000281c:	8d 46 34             	lea    eax,[esi+0x34]
c000281f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002823:	e8 38 f5 ff ff       	call   c0001d60 <mem_set>
c0002828:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000282c:	c1 e3 09             	shl    ebx,0x9
c000282f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002835:	76 1b                	jbe    c0002852 <dir_clear+0x67>
c0002837:	bb 00 80 00 00       	mov    ebx,0x8000
c000283c:	eb 14                	jmp    c0002852 <dir_clear+0x67>
c000283e:	83 ec 0c             	sub    esp,0xc
c0002841:	53                   	push   ebx
c0002842:	e8 25 32 00 00       	call   c0005a6c <ff_memalloc>
c0002847:	83 c4 10             	add    esp,0x10
c000284a:	89 c7                	mov    edi,eax
c000284c:	85 c0                	test   eax,eax
c000284e:	75 7c                	jne    c00028cc <dir_clear+0xe1>
c0002850:	d1 eb                	shr    ebx,1
c0002852:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002858:	77 e4                	ja     c000283e <dir_clear+0x53>
c000285a:	31 db                	xor    ebx,ebx
c000285c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002860:	39 d8                	cmp    eax,ebx
c0002862:	76 53                	jbe    c00028b7 <dir_clear+0xcc>
c0002864:	6a 01                	push   0x1
c0002866:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002869:	50                   	push   eax
c000286a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000286e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002872:	50                   	push   eax
c0002873:	e8 72 f4 ff ff       	call   c0001cea <disk_write>
c0002878:	83 c4 10             	add    esp,0x10
c000287b:	85 c0                	test   eax,eax
c000287d:	75 38                	jne    c00028b7 <dir_clear+0xcc>
c000287f:	43                   	inc    ebx
c0002880:	eb da                	jmp    c000285c <dir_clear+0x71>
c0002882:	52                   	push   edx
c0002883:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002886:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000288a:	50                   	push   eax
c000288b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288f:	57                   	push   edi
c0002890:	50                   	push   eax
c0002891:	e8 54 f4 ff ff       	call   c0001cea <disk_write>
c0002896:	83 c4 10             	add    esp,0x10
c0002899:	85 c0                	test   eax,eax
c000289b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000289f:	75 0a                	jne    c00028ab <dir_clear+0xc0>
c00028a1:	01 d3                	add    ebx,edx
c00028a3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028a7:	39 d8                	cmp    eax,ebx
c00028a9:	77 d7                	ja     c0002882 <dir_clear+0x97>
c00028ab:	83 ec 0c             	sub    esp,0xc
c00028ae:	57                   	push   edi
c00028af:	e8 d0 31 00 00       	call   c0005a84 <ff_memfree>
c00028b4:	83 c4 10             	add    esp,0x10
c00028b7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028bb:	39 d8                	cmp    eax,ebx
c00028bd:	0f 95 c0             	setne  al
c00028c0:	0f b6 c0             	movzx  eax,al
c00028c3:	eb 19                	jmp    c00028de <dir_clear+0xf3>
c00028c5:	b8 01 00 00 00       	mov    eax,0x1
c00028ca:	eb 12                	jmp    c00028de <dir_clear+0xf3>
c00028cc:	89 d9                	mov    ecx,ebx
c00028ce:	31 d2                	xor    edx,edx
c00028d0:	e8 8b f4 ff ff       	call   c0001d60 <mem_set>
c00028d5:	89 da                	mov    edx,ebx
c00028d7:	31 db                	xor    ebx,ebx
c00028d9:	c1 ea 09             	shr    edx,0x9
c00028dc:	eb c5                	jmp    c00028a3 <dir_clear+0xb8>
c00028de:	83 c4 1c             	add    esp,0x1c
c00028e1:	5b                   	pop    ebx
c00028e2:	5e                   	pop    esi
c00028e3:	5f                   	pop    edi
c00028e4:	5d                   	pop    ebp
c00028e5:	c3                   	ret    

c00028e6 <create_name>:
c00028e6:	55                   	push   ebp
c00028e7:	89 d5                	mov    ebp,edx
c00028e9:	57                   	push   edi
c00028ea:	89 c7                	mov    edi,eax
c00028ec:	56                   	push   esi
c00028ed:	31 f6                	xor    esi,esi
c00028ef:	53                   	push   ebx
c00028f0:	83 ec 3c             	sub    esp,0x3c
c00028f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002902:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002906:	e8 9b f4 ff ff       	call   c0001da6 <tchar2uni>
c000290b:	89 c3                	mov    ebx,eax
c000290d:	83 f8 ff             	cmp    eax,0xffffffff
c0002910:	75 0a                	jne    c000291c <create_name+0x36>
c0002912:	b8 06 00 00 00       	mov    eax,0x6
c0002917:	e9 9e 02 00 00       	jmp    c0002bba <create_name+0x2d4>
c000291c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002921:	76 0c                	jbe    c000292f <create_name+0x49>
c0002923:	c1 e8 10             	shr    eax,0x10
c0002926:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000292a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000292e:	46                   	inc    esi
c000292f:	66 83 fb 1f          	cmp    bx,0x1f
c0002933:	76 4f                	jbe    c0002984 <create_name+0x9e>
c0002935:	66 83 fb 5c          	cmp    bx,0x5c
c0002939:	74 35                	je     c0002970 <create_name+0x8a>
c000293b:	66 83 fb 2f          	cmp    bx,0x2f
c000293f:	74 2f                	je     c0002970 <create_name+0x8a>
c0002941:	66 83 fb 7f          	cmp    bx,0x7f
c0002945:	77 11                	ja     c0002958 <create_name+0x72>
c0002947:	0f b7 d3             	movzx  edx,bx
c000294a:	b8 02 cf 01 c0       	mov    eax,0xc001cf02
c000294f:	e8 3a f4 ff ff       	call   c0001d8e <chk_chr>
c0002954:	85 c0                	test   eax,eax
c0002956:	75 ba                	jne    c0002912 <create_name+0x2c>
c0002958:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000295e:	77 b2                	ja     c0002912 <create_name+0x2c>
c0002960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002964:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002968:	46                   	inc    esi
c0002969:	eb 97                	jmp    c0002902 <create_name+0x1c>
c000296b:	40                   	inc    eax
c000296c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002970:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002974:	8a 10                	mov    dl,BYTE PTR [eax]
c0002976:	80 fa 2f             	cmp    dl,0x2f
c0002979:	74 f0                	je     c000296b <create_name+0x85>
c000297b:	80 fa 5c             	cmp    dl,0x5c
c000297e:	74 eb                	je     c000296b <create_name+0x85>
c0002980:	31 db                	xor    ebx,ebx
c0002982:	eb 02                	jmp    c0002986 <create_name+0xa0>
c0002984:	b3 04                	mov    bl,0x4
c0002986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000298a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000298d:	85 f6                	test   esi,esi
c000298f:	74 18                	je     c00029a9 <create_name+0xc3>
c0002991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002995:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000299a:	66 83 f8 20          	cmp    ax,0x20
c000299e:	74 06                	je     c00029a6 <create_name+0xc0>
c00029a0:	66 83 f8 2e          	cmp    ax,0x2e
c00029a4:	75 03                	jne    c00029a9 <create_name+0xc3>
c00029a6:	4e                   	dec    esi
c00029a7:	eb e4                	jmp    c000298d <create_name+0xa7>
c00029a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ad:	31 ed                	xor    ebp,ebp
c00029af:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029b5:	85 f6                	test   esi,esi
c00029b7:	0f 84 55 ff ff ff    	je     c0002912 <create_name+0x2c>
c00029bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029c1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029c4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029c8:	66 83 f8 20          	cmp    ax,0x20
c00029cc:	75 04                	jne    c00029d2 <create_name+0xec>
c00029ce:	89 d5                	mov    ebp,edx
c00029d0:	eb eb                	jmp    c00029bd <create_name+0xd7>
c00029d2:	85 ed                	test   ebp,ebp
c00029d4:	75 06                	jne    c00029dc <create_name+0xf6>
c00029d6:	66 83 f8 2e          	cmp    ax,0x2e
c00029da:	75 08                	jne    c00029e4 <create_name+0xfe>
c00029dc:	83 cb 03             	or     ebx,0x3
c00029df:	eb 03                	jmp    c00029e4 <create_name+0xfe>
c00029e1:	4e                   	dec    esi
c00029e2:	74 0c                	je     c00029f0 <create_name+0x10a>
c00029e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029ee:	75 f1                	jne    c00029e1 <create_name+0xfb>
c00029f0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029f5:	8d 47 20             	lea    eax,[edi+0x20]
c00029f8:	ba 20 00 00 00       	mov    edx,0x20
c00029fd:	e8 5e f3 ff ff       	call   c0001d60 <mem_set>
c0002a02:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a0a:	31 c9                	xor    ecx,ecx
c0002a0c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a11:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a1c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a20:	66 85 ed             	test   bp,bp
c0002a23:	0f 84 30 01 00 00    	je     c0002b59 <create_name+0x273>
c0002a29:	66 83 fd 20          	cmp    bp,0x20
c0002a2d:	74 10                	je     c0002a3f <create_name+0x159>
c0002a2f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a33:	75 13                	jne    c0002a48 <create_name+0x162>
c0002a35:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a39:	0f 84 6b 01 00 00    	je     c0002baa <create_name+0x2c4>
c0002a3f:	83 cb 03             	or     ebx,0x3
c0002a42:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a46:	eb c9                	jmp    c0002a11 <create_name+0x12b>
c0002a48:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a4c:	73 0b                	jae    c0002a59 <create_name+0x173>
c0002a4e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a52:	75 47                	jne    c0002a9b <create_name+0x1b5>
c0002a54:	e9 51 01 00 00       	jmp    c0002baa <create_name+0x2c4>
c0002a59:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a5e:	75 10                	jne    c0002a70 <create_name+0x18a>
c0002a60:	83 cb 03             	or     ebx,0x3
c0002a63:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a6b:	e9 e9 00 00 00       	jmp    c0002b59 <create_name+0x273>
c0002a70:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a74:	74 0d                	je     c0002a83 <create_name+0x19d>
c0002a76:	83 cb 03             	or     ebx,0x3
c0002a79:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a7d:	0f 87 d6 00 00 00    	ja     c0002b59 <create_name+0x273>
c0002a83:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a88:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a8c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a94:	b9 08 00 00 00       	mov    ecx,0x8
c0002a99:	eb a7                	jmp    c0002a42 <create_name+0x15c>
c0002a9b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a9f:	76 68                	jbe    c0002b09 <create_name+0x223>
c0002aa1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002aa5:	88 da                	mov    dl,bl
c0002aa7:	83 ca 02             	or     edx,0x2
c0002aaa:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002aae:	50                   	push   eax
c0002aaf:	50                   	push   eax
c0002ab0:	68 b5 01 00 00       	push   0x1b5
c0002ab5:	55                   	push   ebp
c0002ab6:	e8 e1 2f 00 00       	call   c0005a9c <ff_uni2oem>
c0002abb:	83 c4 10             	add    esp,0x10
c0002abe:	89 c5                	mov    ebp,eax
c0002ac0:	a8 80                	test   al,0x80
c0002ac2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ac6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aca:	74 0c                	je     c0002ad8 <create_name+0x1f2>
c0002acc:	83 e5 7f             	and    ebp,0x7f
c0002acf:	0f b6 ad c0 cf 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe3040]
c0002ad6:	eb 2a                	jmp    c0002b02 <create_name+0x21c>
c0002ad8:	66 3d ff 00          	cmp    ax,0xff
c0002adc:	76 24                	jbe    c0002b02 <create_name+0x21c>
c0002ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae2:	48                   	dec    eax
c0002ae3:	39 c8                	cmp    eax,ecx
c0002ae5:	77 0c                	ja     c0002af3 <create_name+0x20d>
c0002ae7:	83 cb 03             	or     ebx,0x3
c0002aea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002aee:	e9 4f ff ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002af3:	89 e8                	mov    eax,ebp
c0002af5:	88 d3                	mov    bl,dl
c0002af7:	66 c1 e8 08          	shr    ax,0x8
c0002afb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aff:	41                   	inc    ecx
c0002b00:	eb 4b                	jmp    c0002b4d <create_name+0x267>
c0002b02:	88 d3                	mov    bl,dl
c0002b04:	66 85 ed             	test   bp,bp
c0002b07:	74 19                	je     c0002b22 <create_name+0x23c>
c0002b09:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b0d:	0f b7 d5             	movzx  edx,bp
c0002b10:	b8 0b cf 01 c0       	mov    eax,0xc001cf0b
c0002b15:	e8 74 f2 ff ff       	call   c0001d8e <chk_chr>
c0002b1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1e:	85 c0                	test   eax,eax
c0002b20:	74 0a                	je     c0002b2c <create_name+0x246>
c0002b22:	83 cb 03             	or     ebx,0x3
c0002b25:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b2a:	eb 21                	jmp    c0002b4d <create_name+0x267>
c0002b2c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 07                	ja     c0002b3c <create_name+0x256>
c0002b35:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b3a:	eb 11                	jmp    c0002b4d <create_name+0x267>
c0002b3c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b3f:	66 83 f8 19          	cmp    ax,0x19
c0002b43:	77 08                	ja     c0002b4d <create_name+0x267>
c0002b45:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b4a:	83 ed 20             	sub    ebp,0x20
c0002b4d:	89 e8                	mov    eax,ebp
c0002b4f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b53:	41                   	inc    ecx
c0002b54:	e9 e9 fe ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002b59:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b5d:	75 04                	jne    c0002b63 <create_name+0x27d>
c0002b5f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b63:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b68:	75 05                	jne    c0002b6f <create_name+0x289>
c0002b6a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b6f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b73:	83 e0 0c             	and    eax,0xc
c0002b76:	3c 0c                	cmp    al,0xc
c0002b78:	74 0b                	je     c0002b85 <create_name+0x29f>
c0002b7a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b7e:	83 e0 03             	and    eax,0x3
c0002b81:	3c 03                	cmp    al,0x3
c0002b83:	75 05                	jne    c0002b8a <create_name+0x2a4>
c0002b85:	83 cb 02             	or     ebx,0x2
c0002b88:	eb 19                	jmp    c0002ba3 <create_name+0x2bd>
c0002b8a:	f6 c3 02             	test   bl,0x2
c0002b8d:	75 14                	jne    c0002ba3 <create_name+0x2bd>
c0002b8f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b94:	74 03                	je     c0002b99 <create_name+0x2b3>
c0002b96:	83 cb 10             	or     ebx,0x10
c0002b99:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b9e:	74 03                	je     c0002ba3 <create_name+0x2bd>
c0002ba0:	83 cb 08             	or     ebx,0x8
c0002ba3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002ba6:	31 c0                	xor    eax,eax
c0002ba8:	eb 10                	jmp    c0002bba <create_name+0x2d4>
c0002baa:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002baf:	0f 85 ce fe ff ff    	jne    c0002a83 <create_name+0x19d>
c0002bb5:	e9 a6 fe ff ff       	jmp    c0002a60 <create_name+0x17a>
c0002bba:	83 c4 3c             	add    esp,0x3c
c0002bbd:	5b                   	pop    ebx
c0002bbe:	5e                   	pop    esi
c0002bbf:	5f                   	pop    edi
c0002bc0:	5d                   	pop    ebp
c0002bc1:	c3                   	ret    

c0002bc2 <cmp_lfn>:
c0002bc2:	55                   	push   ebp
c0002bc3:	57                   	push   edi
c0002bc4:	89 d7                	mov    edi,edx
c0002bc6:	56                   	push   esi
c0002bc7:	53                   	push   ebx
c0002bc8:	83 ec 1c             	sub    esp,0x1c
c0002bcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bcf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bd2:	e8 48 f1 ff ff       	call   c0001d1f <ld_word>
c0002bd7:	66 85 c0             	test   ax,ax
c0002bda:	74 07                	je     c0002be3 <cmp_lfn+0x21>
c0002bdc:	31 c0                	xor    eax,eax
c0002bde:	e9 9a 00 00 00       	jmp    c0002c7d <cmp_lfn+0xbb>
c0002be3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002be5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bea:	83 e3 3f             	and    ebx,0x3f
c0002bed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002bf5:	4b                   	dec    ebx
c0002bf6:	6b db 0d             	imul   ebx,ebx,0xd
c0002bf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bfd:	0f b6 80 40 d0 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe2fc0]
c0002c04:	01 f8                	add    eax,edi
c0002c06:	e8 14 f1 ff ff       	call   c0001d1f <ld_word>
c0002c0b:	66 85 ed             	test   bp,bp
c0002c0e:	89 c6                	mov    esi,eax
c0002c10:	74 3c                	je     c0002c4e <cmp_lfn+0x8c>
c0002c12:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c18:	77 c2                	ja     c0002bdc <cmp_lfn+0x1a>
c0002c1a:	83 ec 0c             	sub    esp,0xc
c0002c1d:	0f b7 c0             	movzx  eax,ax
c0002c20:	50                   	push   eax
c0002c21:	e8 8e 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c26:	89 c5                	mov    ebp,eax
c0002c28:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c33:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c3a:	e8 75 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c3f:	83 c4 10             	add    esp,0x10
c0002c42:	39 c5                	cmp    ebp,eax
c0002c44:	75 96                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c46:	89 f5                	mov    ebp,esi
c0002c48:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c4c:	eb 04                	jmp    c0002c52 <cmp_lfn+0x90>
c0002c4e:	66 46                	inc    si
c0002c50:	75 8a                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c52:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c56:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c5b:	75 9c                	jne    c0002bf9 <cmp_lfn+0x37>
c0002c5d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c60:	74 16                	je     c0002c78 <cmp_lfn+0xb6>
c0002c62:	66 85 ed             	test   bp,bp
c0002c65:	74 11                	je     c0002c78 <cmp_lfn+0xb6>
c0002c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c6b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c70:	0f 94 c0             	sete   al
c0002c73:	0f b6 c0             	movzx  eax,al
c0002c76:	eb 05                	jmp    c0002c7d <cmp_lfn+0xbb>
c0002c78:	b8 01 00 00 00       	mov    eax,0x1
c0002c7d:	83 c4 1c             	add    esp,0x1c
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <sync_fs>:
c0002c85:	56                   	push   esi
c0002c86:	53                   	push   ebx
c0002c87:	53                   	push   ebx
c0002c88:	89 c3                	mov    ebx,eax
c0002c8a:	e8 53 f5 ff ff       	call   c00021e2 <sync_window>
c0002c8f:	85 c0                	test   eax,eax
c0002c91:	0f 85 9a 00 00 00    	jne    c0002d31 <sync_fs+0xac>
c0002c97:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c9a:	75 7b                	jne    c0002d17 <sync_fs+0x92>
c0002c9c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002ca0:	75 75                	jne    c0002d17 <sync_fs+0x92>
c0002ca2:	b9 00 02 00 00       	mov    ecx,0x200
c0002ca7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002caa:	31 d2                	xor    edx,edx
c0002cac:	89 f0                	mov    eax,esi
c0002cae:	e8 ad f0 ff ff       	call   c0001d60 <mem_set>
c0002cb3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cbe:	e8 81 f0 ff ff       	call   c0001d44 <st_word>
c0002cc3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	e8 79 f0 ff ff       	call   c0001d48 <st_dword>
c0002ccf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cd5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cda:	e8 69 f0 ff ff       	call   c0001d48 <st_dword>
c0002cdf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002ce2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002ce8:	e8 5b f0 ff ff       	call   c0001d48 <st_dword>
c0002ced:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002cf0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002cf6:	e8 4d f0 ff ff       	call   c0001d48 <st_dword>
c0002cfb:	6a 01                	push   0x1
c0002cfd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d00:	40                   	inc    eax
c0002d01:	50                   	push   eax
c0002d02:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d05:	56                   	push   esi
c0002d06:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0a:	50                   	push   eax
c0002d0b:	e8 da ef ff ff       	call   c0001cea <disk_write>
c0002d10:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d14:	83 c4 10             	add    esp,0x10
c0002d17:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d1b:	51                   	push   ecx
c0002d1c:	6a 00                	push   0x0
c0002d1e:	6a 00                	push   0x0
c0002d20:	50                   	push   eax
c0002d21:	e8 da ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d26:	83 c4 10             	add    esp,0x10
c0002d29:	85 c0                	test   eax,eax
c0002d2b:	0f 95 c0             	setne  al
c0002d2e:	0f b6 c0             	movzx  eax,al
c0002d31:	5a                   	pop    edx
c0002d32:	5b                   	pop    ebx
c0002d33:	5e                   	pop    esi
c0002d34:	c3                   	ret    

c0002d35 <create_partition>:
c0002d35:	55                   	push   ebp
c0002d36:	0f b6 c0             	movzx  eax,al
c0002d39:	57                   	push   edi
c0002d3a:	56                   	push   esi
c0002d3b:	53                   	push   ebx
c0002d3c:	83 ec 40             	sub    esp,0x40
c0002d3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d47:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d4b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d4f:	50                   	push   eax
c0002d50:	6a 01                	push   0x1
c0002d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d56:	e8 a5 ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d5b:	83 c4 10             	add    esp,0x10
c0002d5e:	85 c0                	test   eax,eax
c0002d60:	0f 85 69 01 00 00    	jne    c0002ecf <create_partition+0x19a>
c0002d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d6a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d73:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d78:	31 d2                	xor    edx,edx
c0002d7a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d83:	f7 f3                	div    ebx
c0002d85:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d8a:	76 0c                	jbe    c0002d98 <create_partition+0x63>
c0002d8c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d90:	49                   	dec    ecx
c0002d91:	75 e5                	jne    c0002d78 <create_partition+0x43>
c0002d93:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d98:	b9 00 02 00 00       	mov    ecx,0x200
c0002d9d:	31 d2                	xor    edx,edx
c0002d9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002da3:	e8 b8 ef ff ff       	call   c0001d60 <mem_set>
c0002da8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002db1:	31 d2                	xor    edx,edx
c0002db3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dbb:	f7 f1                	div    ecx
c0002dbd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002dc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002dc6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dca:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dd0:	85 c9                	test   ecx,ecx
c0002dd2:	75 34                	jne    c0002e08 <create_partition+0xd3>
c0002dd4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dd8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ddd:	05 fe 01 00 00       	add    eax,0x1fe
c0002de2:	e8 5d ef ff ff       	call   c0001d44 <st_word>
c0002de7:	6a 01                	push   0x1
c0002de9:	6a 00                	push   0x0
c0002deb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002df3:	e8 f2 ee ff ff       	call   c0001cea <disk_write>
c0002df8:	83 c4 10             	add    esp,0x10
c0002dfb:	85 c0                	test   eax,eax
c0002dfd:	0f 95 c0             	setne  al
c0002e00:	0f b6 c0             	movzx  eax,al
c0002e03:	e9 cc 00 00 00       	jmp    c0002ed4 <create_partition+0x19f>
c0002e08:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e0c:	76 c6                	jbe    c0002dd4 <create_partition+0x9f>
c0002e0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e12:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e16:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e19:	83 fe 64             	cmp    esi,0x64
c0002e1c:	77 0d                	ja     c0002e2b <create_partition+0xf6>
c0002e1e:	74 07                	je     c0002e27 <create_partition+0xf2>
c0002e20:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e25:	eb 04                	jmp    c0002e2b <create_partition+0xf6>
c0002e27:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e2b:	31 c0                	xor    eax,eax
c0002e2d:	89 f2                	mov    edx,esi
c0002e2f:	01 ca                	add    edx,ecx
c0002e31:	0f 92 c0             	setb   al
c0002e34:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e38:	77 04                	ja     c0002e3e <create_partition+0x109>
c0002e3a:	85 c0                	test   eax,eax
c0002e3c:	74 08                	je     c0002e46 <create_partition+0x111>
c0002e3e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e42:	29 ce                	sub    esi,ecx
c0002e44:	eb 04                	jmp    c0002e4a <create_partition+0x115>
c0002e46:	85 f6                	test   esi,esi
c0002e48:	74 8a                	je     c0002dd4 <create_partition+0x9f>
c0002e4a:	89 ca                	mov    edx,ecx
c0002e4c:	89 d8                	mov    eax,ebx
c0002e4e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e53:	e8 f0 ee ff ff       	call   c0001d48 <st_dword>
c0002e58:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e5b:	89 f2                	mov    edx,esi
c0002e5d:	83 c3 10             	add    ebx,0x10
c0002e60:	e8 e3 ee ff ff       	call   c0001d48 <st_dword>
c0002e65:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e6a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e73:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e77:	89 c8                	mov    eax,ecx
c0002e79:	01 f1                	add    ecx,esi
c0002e7b:	f7 f5                	div    ebp
c0002e7d:	89 d5                	mov    ebp,edx
c0002e7f:	31 d2                	xor    edx,edx
c0002e81:	45                   	inc    ebp
c0002e82:	f7 f7                	div    edi
c0002e84:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e87:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e8a:	89 c2                	mov    edx,eax
c0002e8c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e8f:	c1 ea 02             	shr    edx,0x2
c0002e92:	83 e2 c0             	and    edx,0xffffffc0
c0002e95:	09 ea                	or     edx,ebp
c0002e97:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e9c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	f7 f5                	div    ebp
c0002ea3:	89 d6                	mov    esi,edx
c0002ea5:	31 d2                	xor    edx,edx
c0002ea7:	46                   	inc    esi
c0002ea8:	f7 f7                	div    edi
c0002eaa:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ead:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002eb0:	89 c7                	mov    edi,eax
c0002eb2:	c1 ef 02             	shr    edi,0x2
c0002eb5:	83 e7 c0             	and    edi,0xffffffc0
c0002eb8:	09 fe                	or     esi,edi
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002ebf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ec4:	0f 85 06 ff ff ff    	jne    c0002dd0 <create_partition+0x9b>
c0002eca:	e9 05 ff ff ff       	jmp    c0002dd4 <create_partition+0x9f>
c0002ecf:	b8 01 00 00 00       	mov    eax,0x1
c0002ed4:	83 c4 3c             	add    esp,0x3c
c0002ed7:	5b                   	pop    ebx
c0002ed8:	5e                   	pop    esi
c0002ed9:	5f                   	pop    edi
c0002eda:	5d                   	pop    ebp
c0002edb:	c3                   	ret    

c0002edc <get_fileinfo>:
c0002edc:	55                   	push   ebp
c0002edd:	57                   	push   edi
c0002ede:	56                   	push   esi
c0002edf:	53                   	push   ebx
c0002ee0:	83 ec 1c             	sub    esp,0x1c
c0002ee3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ee5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ee9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002eed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ef1:	0f 84 c1 01 00 00    	je     c00030b8 <get_fileinfo+0x1dc>
c0002ef7:	89 d3                	mov    ebx,edx
c0002ef9:	89 c6                	mov    esi,eax
c0002efb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eff:	74 6a                	je     c0002f6b <get_fileinfo+0x8f>
c0002f01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f09:	31 ed                	xor    ebp,ebp
c0002f0b:	31 ff                	xor    edi,edi
c0002f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f18:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f1c:	66 85 d2             	test   dx,dx
c0002f1f:	74 3e                	je     c0002f5f <get_fileinfo+0x83>
c0002f21:	66 85 ed             	test   bp,bp
c0002f24:	75 0c                	jne    c0002f32 <get_fileinfo+0x56>
c0002f26:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f2c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f30:	76 22                	jbe    c0002f54 <get_fileinfo+0x78>
c0002f32:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f37:	89 e8                	mov    eax,ebp
c0002f39:	29 f9                	sub    ecx,edi
c0002f3b:	c1 e0 10             	shl    eax,0x10
c0002f3e:	09 d0                	or     eax,edx
c0002f40:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f44:	e8 23 ef ff ff       	call   c0001e6c <put_utf>
c0002f49:	84 c0                	test   al,al
c0002f4b:	74 10                	je     c0002f5d <get_fileinfo+0x81>
c0002f4d:	0f b6 c0             	movzx  eax,al
c0002f50:	31 d2                	xor    edx,edx
c0002f52:	01 c7                	add    edi,eax
c0002f54:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f59:	89 d5                	mov    ebp,edx
c0002f5b:	eb b0                	jmp    c0002f0d <get_fileinfo+0x31>
c0002f5d:	31 ff                	xor    edi,edi
c0002f5f:	66 85 ed             	test   bp,bp
c0002f62:	74 02                	je     c0002f66 <get_fileinfo+0x8a>
c0002f64:	31 ff                	xor    edi,edi
c0002f66:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f6b:	31 ff                	xor    edi,edi
c0002f6d:	31 c9                	xor    ecx,ecx
c0002f6f:	83 f9 0a             	cmp    ecx,0xa
c0002f72:	0f 87 ad 00 00 00    	ja     c0003025 <get_fileinfo+0x149>
c0002f78:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f7b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f7e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f82:	66 83 fa 20          	cmp    dx,0x20
c0002f86:	0f 84 92 00 00 00    	je     c000301e <get_fileinfo+0x142>
c0002f8c:	66 83 fa 05          	cmp    dx,0x5
c0002f90:	75 05                	jne    c0002f97 <get_fileinfo+0xbb>
c0002f92:	ba e5 00 00 00       	mov    edx,0xe5
c0002f97:	83 ff 0b             	cmp    edi,0xb
c0002f9a:	77 0b                	ja     c0002fa7 <get_fileinfo+0xcb>
c0002f9c:	83 fd 09             	cmp    ebp,0x9
c0002f9f:	75 06                	jne    c0002fa7 <get_fileinfo+0xcb>
c0002fa1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fa6:	47                   	inc    edi
c0002fa7:	0f b7 c2             	movzx  eax,dx
c0002faa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fae:	e8 ed ed ff ff       	call   c0001da0 <dbc_1st>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	74 2f                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fb7:	83 fd 08             	cmp    ebp,0x8
c0002fba:	74 2a                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fbc:	83 fd 0b             	cmp    ebp,0xb
c0002fbf:	74 25                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fc1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fc4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fc8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fcc:	e8 d2 ed ff ff       	call   c0001da3 <dbc_2nd>
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 11                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fd9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fde:	c1 e2 08             	shl    edx,0x8
c0002fe1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fe4:	09 c2                	or     edx,eax
c0002fe6:	0f b7 d2             	movzx  edx,dx
c0002fe9:	50                   	push   eax
c0002fea:	50                   	push   eax
c0002feb:	68 b5 01 00 00       	push   0x1b5
c0002ff0:	52                   	push   edx
c0002ff1:	e8 46 2b 00 00       	call   c0005b3c <ff_oem2uni>
c0002ff6:	83 c4 10             	add    esp,0x10
c0002ff9:	66 85 c0             	test   ax,ax
c0002ffc:	75 04                	jne    c0003002 <get_fileinfo+0x126>
c0002ffe:	31 ff                	xor    edi,edi
c0003000:	eb 23                	jmp    c0003025 <get_fileinfo+0x149>
c0003002:	b9 0c 00 00 00       	mov    ecx,0xc
c0003007:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000300b:	29 f9                	sub    ecx,edi
c000300d:	0f b7 c0             	movzx  eax,ax
c0003010:	e8 57 ee ff ff       	call   c0001e6c <put_utf>
c0003015:	84 c0                	test   al,al
c0003017:	74 e5                	je     c0002ffe <get_fileinfo+0x122>
c0003019:	0f b6 c0             	movzx  eax,al
c000301c:	01 c7                	add    edi,eax
c000301e:	89 e9                	mov    ecx,ebp
c0003020:	e9 4a ff ff ff       	jmp    c0002f6f <get_fileinfo+0x93>
c0003025:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000302a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000302e:	75 54                	jne    c0003084 <get_fileinfo+0x1a8>
c0003030:	85 ff                	test   edi,edi
c0003032:	75 0b                	jne    c000303f <get_fileinfo+0x163>
c0003034:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003038:	ba 01 00 00 00       	mov    edx,0x1
c000303d:	eb 33                	jmp    c0003072 <get_fileinfo+0x196>
c000303f:	b1 08                	mov    cl,0x8
c0003041:	31 d2                	xor    edx,edx
c0003043:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003049:	84 c0                	test   al,al
c000304b:	74 25                	je     c0003072 <get_fileinfo+0x196>
c000304d:	66 83 f8 2e          	cmp    ax,0x2e
c0003051:	74 16                	je     c0003069 <get_fileinfo+0x18d>
c0003053:	8d 78 bf             	lea    edi,[eax-0x41]
c0003056:	66 83 ff 19          	cmp    di,0x19
c000305a:	77 0f                	ja     c000306b <get_fileinfo+0x18f>
c000305c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000305f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003062:	74 07                	je     c000306b <get_fileinfo+0x18f>
c0003064:	83 c0 20             	add    eax,0x20
c0003067:	eb 02                	jmp    c000306b <get_fileinfo+0x18f>
c0003069:	b1 10                	mov    cl,0x10
c000306b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000306f:	42                   	inc    edx
c0003070:	eb d1                	jmp    c0003043 <get_fileinfo+0x167>
c0003072:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003077:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000307a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000307e:	75 04                	jne    c0003084 <get_fileinfo+0x1a8>
c0003080:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003084:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003087:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000308a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000308d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003090:	83 c0 1c             	add    eax,0x1c
c0003093:	e8 94 ec ff ff       	call   c0001d2c <ld_dword>
c0003098:	89 03                	mov    DWORD PTR [ebx],eax
c000309a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309d:	83 c0 16             	add    eax,0x16
c00030a0:	e8 7a ec ff ff       	call   c0001d1f <ld_word>
c00030a5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030a9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030ac:	83 c0 18             	add    eax,0x18
c00030af:	e8 6b ec ff ff       	call   c0001d1f <ld_word>
c00030b4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030b8:	83 c4 1c             	add    esp,0x1c
c00030bb:	5b                   	pop    ebx
c00030bc:	5e                   	pop    esi
c00030bd:	5f                   	pop    edi
c00030be:	5d                   	pop    ebp
c00030bf:	c3                   	ret    

c00030c0 <ld_clust.isra.0>:
c00030c0:	56                   	push   esi
c00030c1:	89 c6                	mov    esi,eax
c00030c3:	53                   	push   ebx
c00030c4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030c7:	89 d3                	mov    ebx,edx
c00030c9:	e8 51 ec ff ff       	call   c0001d1f <ld_word>
c00030ce:	0f b7 c8             	movzx  ecx,ax
c00030d1:	89 f0                	mov    eax,esi
c00030d3:	3c 03                	cmp    al,0x3
c00030d5:	75 0d                	jne    c00030e4 <ld_clust.isra.0+0x24>
c00030d7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030da:	e8 40 ec ff ff       	call   c0001d1f <ld_word>
c00030df:	c1 e0 10             	shl    eax,0x10
c00030e2:	09 c1                	or     ecx,eax
c00030e4:	89 c8                	mov    eax,ecx
c00030e6:	5b                   	pop    ebx
c00030e7:	5e                   	pop    esi
c00030e8:	c3                   	ret    

c00030e9 <st_clust.isra.1>:
c00030e9:	56                   	push   esi
c00030ea:	89 c6                	mov    esi,eax
c00030ec:	53                   	push   ebx
c00030ed:	89 d3                	mov    ebx,edx
c00030ef:	0f b7 d1             	movzx  edx,cx
c00030f2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030f5:	e8 4a ec ff ff       	call   c0001d44 <st_word>
c00030fa:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030fd:	75 0f                	jne    c000310e <st_clust.isra.1+0x25>
c00030ff:	c1 e9 10             	shr    ecx,0x10
c0003102:	8d 43 14             	lea    eax,[ebx+0x14]
c0003105:	89 ca                	mov    edx,ecx
c0003107:	5b                   	pop    ebx
c0003108:	5e                   	pop    esi
c0003109:	e9 36 ec ff ff       	jmp    c0001d44 <st_word>
c000310e:	5b                   	pop    ebx
c000310f:	5e                   	pop    esi
c0003110:	c3                   	ret    

c0003111 <get_fat.isra.2>:
c0003111:	b9 01 00 00 00       	mov    ecx,0x1
c0003116:	83 fa 01             	cmp    edx,0x1
c0003119:	0f 86 f1 00 00 00    	jbe    c0003210 <get_fat.isra.2+0xff>
c000311f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003122:	0f 83 e8 00 00 00    	jae    c0003210 <get_fat.isra.2+0xff>
c0003128:	55                   	push   ebp
c0003129:	57                   	push   edi
c000312a:	89 c7                	mov    edi,eax
c000312c:	56                   	push   esi
c000312d:	89 d6                	mov    esi,edx
c000312f:	53                   	push   ebx
c0003130:	83 ec 0c             	sub    esp,0xc
c0003133:	8a 00                	mov    al,BYTE PTR [eax]
c0003135:	3c 02                	cmp    al,0x2
c0003137:	74 78                	je     c00031b1 <get_fat.isra.2+0xa0>
c0003139:	3c 03                	cmp    al,0x3
c000313b:	0f 84 97 00 00 00    	je     c00031d8 <get_fat.isra.2+0xc7>
c0003141:	fe c8                	dec    al
c0003143:	0f 85 bd 00 00 00    	jne    c0003206 <get_fat.isra.2+0xf5>
c0003149:	89 d3                	mov    ebx,edx
c000314b:	89 f8                	mov    eax,edi
c000314d:	d1 eb                	shr    ebx,1
c000314f:	01 d3                	add    ebx,edx
c0003151:	89 da                	mov    edx,ebx
c0003153:	c1 ea 09             	shr    edx,0x9
c0003156:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003159:	e8 e7 f0 ff ff       	call   c0002245 <move_window>
c000315e:	85 c0                	test   eax,eax
c0003160:	74 08                	je     c000316a <get_fat.isra.2+0x59>
c0003162:	83 c9 ff             	or     ecx,0xffffffff
c0003165:	e9 9c 00 00 00       	jmp    c0003206 <get_fat.isra.2+0xf5>
c000316a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000316d:	89 f8                	mov    eax,edi
c000316f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003175:	89 ea                	mov    edx,ebp
c0003177:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000317b:	c1 ea 09             	shr    edx,0x9
c000317e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003181:	e8 bf f0 ff ff       	call   c0002245 <move_window>
c0003186:	85 c0                	test   eax,eax
c0003188:	75 d8                	jne    c0003162 <get_fat.isra.2+0x51>
c000318a:	0f b6 c3             	movzx  eax,bl
c000318d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003193:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003198:	c1 e3 08             	shl    ebx,0x8
c000319b:	09 c3                	or     ebx,eax
c000319d:	89 d9                	mov    ecx,ebx
c000319f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031a5:	83 e6 01             	and    esi,0x1
c00031a8:	74 5c                	je     c0003206 <get_fat.isra.2+0xf5>
c00031aa:	89 d9                	mov    ecx,ebx
c00031ac:	c1 e9 04             	shr    ecx,0x4
c00031af:	eb 55                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031b1:	c1 ea 08             	shr    edx,0x8
c00031b4:	89 f8                	mov    eax,edi
c00031b6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031b9:	e8 87 f0 ff ff       	call   c0002245 <move_window>
c00031be:	85 c0                	test   eax,eax
c00031c0:	75 a0                	jne    c0003162 <get_fat.isra.2+0x51>
c00031c2:	01 f6                	add    esi,esi
c00031c4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ca:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ce:	e8 4c eb ff ff       	call   c0001d1f <ld_word>
c00031d3:	0f b7 c8             	movzx  ecx,ax
c00031d6:	eb 2e                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031d8:	c1 ea 07             	shr    edx,0x7
c00031db:	89 f8                	mov    eax,edi
c00031dd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031e0:	e8 60 f0 ff ff       	call   c0002245 <move_window>
c00031e5:	85 c0                	test   eax,eax
c00031e7:	0f 85 75 ff ff ff    	jne    c0003162 <get_fat.isra.2+0x51>
c00031ed:	c1 e6 02             	shl    esi,0x2
c00031f0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031f6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031fa:	e8 2d eb ff ff       	call   c0001d2c <ld_dword>
c00031ff:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003204:	89 c1                	mov    ecx,eax
c0003206:	83 c4 0c             	add    esp,0xc
c0003209:	89 c8                	mov    eax,ecx
c000320b:	5b                   	pop    ebx
c000320c:	5e                   	pop    esi
c000320d:	5f                   	pop    edi
c000320e:	5d                   	pop    ebp
c000320f:	c3                   	ret    
c0003210:	89 c8                	mov    eax,ecx
c0003212:	c3                   	ret    

c0003213 <dir_sdi>:
c0003213:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003219:	0f 87 b6 00 00 00    	ja     c00032d5 <dir_sdi+0xc2>
c000321f:	55                   	push   ebp
c0003220:	57                   	push   edi
c0003221:	56                   	push   esi
c0003222:	53                   	push   ebx
c0003223:	89 d3                	mov    ebx,edx
c0003225:	83 ec 1c             	sub    esp,0x1c
c0003228:	f6 c2 1f             	test   dl,0x1f
c000322b:	74 0a                	je     c0003237 <dir_sdi+0x24>
c000322d:	b8 02 00 00 00       	mov    eax,0x2
c0003232:	e9 96 00 00 00       	jmp    c00032cd <dir_sdi+0xba>
c0003237:	89 c6                	mov    esi,eax
c0003239:	8b 38                	mov    edi,DWORD PTR [eax]
c000323b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000323e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003241:	85 c9                	test   ecx,ecx
c0003243:	75 23                	jne    c0003268 <dir_sdi+0x55>
c0003245:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003248:	76 07                	jbe    c0003251 <dir_sdi+0x3e>
c000324a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000324d:	85 c0                	test   eax,eax
c000324f:	75 15                	jne    c0003266 <dir_sdi+0x53>
c0003251:	89 da                	mov    edx,ebx
c0003253:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003257:	c1 ea 05             	shr    edx,0x5
c000325a:	39 c2                	cmp    edx,eax
c000325c:	73 cf                	jae    c000322d <dir_sdi+0x1a>
c000325e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003261:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003264:	eb 3d                	jmp    c00032a3 <dir_sdi+0x90>
c0003266:	89 c1                	mov    ecx,eax
c0003268:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000326c:	c1 e5 09             	shl    ebp,0x9
c000326f:	89 ca                	mov    edx,ecx
c0003271:	39 eb                	cmp    ebx,ebp
c0003273:	72 1c                	jb     c0003291 <dir_sdi+0x7e>
c0003275:	8b 06                	mov    eax,DWORD PTR [esi]
c0003277:	e8 95 fe ff ff       	call   c0003111 <get_fat.isra.2>
c000327c:	89 c1                	mov    ecx,eax
c000327e:	83 f8 ff             	cmp    eax,0xffffffff
c0003281:	74 45                	je     c00032c8 <dir_sdi+0xb5>
c0003283:	83 f8 01             	cmp    eax,0x1
c0003286:	76 a5                	jbe    c000322d <dir_sdi+0x1a>
c0003288:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000328b:	76 a0                	jbe    c000322d <dir_sdi+0x1a>
c000328d:	29 eb                	sub    ebx,ebp
c000328f:	eb de                	jmp    c000326f <dir_sdi+0x5c>
c0003291:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003295:	89 f8                	mov    eax,edi
c0003297:	e8 c9 ec ff ff       	call   c0001f65 <clst2sect>
c000329c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032a0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032a3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032a6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032a9:	85 d2                	test   edx,edx
c00032ab:	74 80                	je     c000322d <dir_sdi+0x1a>
c00032ad:	89 d8                	mov    eax,ebx
c00032af:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032b5:	c1 e8 09             	shr    eax,0x9
c00032b8:	01 d0                	add    eax,edx
c00032ba:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032bd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032c4:	31 c0                	xor    eax,eax
c00032c6:	eb 05                	jmp    c00032cd <dir_sdi+0xba>
c00032c8:	b8 01 00 00 00       	mov    eax,0x1
c00032cd:	83 c4 1c             	add    esp,0x1c
c00032d0:	5b                   	pop    ebx
c00032d1:	5e                   	pop    esi
c00032d2:	5f                   	pop    edi
c00032d3:	5d                   	pop    ebp
c00032d4:	c3                   	ret    
c00032d5:	b8 02 00 00 00       	mov    eax,0x2
c00032da:	c3                   	ret    

c00032db <create_chain>:
c00032db:	55                   	push   ebp
c00032dc:	89 c5                	mov    ebp,eax
c00032de:	57                   	push   edi
c00032df:	89 d7                	mov    edi,edx
c00032e1:	56                   	push   esi
c00032e2:	53                   	push   ebx
c00032e3:	83 ec 1c             	sub    esp,0x1c
c00032e6:	85 d2                	test   edx,edx
c00032e8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ea:	75 0e                	jne    c00032fa <create_chain+0x1f>
c00032ec:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032ef:	85 c9                	test   ecx,ecx
c00032f1:	74 34                	je     c0003327 <create_chain+0x4c>
c00032f3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032f6:	77 34                	ja     c000332c <create_chain+0x51>
c00032f8:	eb 2d                	jmp    c0003327 <create_chain+0x4c>
c00032fa:	89 f0                	mov    eax,esi
c00032fc:	e8 10 fe ff ff       	call   c0003111 <get_fat.isra.2>
c0003301:	89 c3                	mov    ebx,eax
c0003303:	83 f8 01             	cmp    eax,0x1
c0003306:	77 0a                	ja     c0003312 <create_chain+0x37>
c0003308:	bb 01 00 00 00       	mov    ebx,0x1
c000330d:	e9 f9 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003312:	83 f8 ff             	cmp    eax,0xffffffff
c0003315:	0f 84 ed 00 00 00    	je     c0003408 <create_chain+0x12d>
c000331b:	89 f9                	mov    ecx,edi
c000331d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003320:	76 0a                	jbe    c000332c <create_chain+0x51>
c0003322:	e9 e4 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003330:	75 07                	jne    c0003339 <create_chain+0x5e>
c0003332:	31 db                	xor    ebx,ebx
c0003334:	e9 d2 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003339:	39 f9                	cmp    ecx,edi
c000333b:	75 46                	jne    c0003383 <create_chain+0xa8>
c000333d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003340:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003343:	77 05                	ja     c000334a <create_chain+0x6f>
c0003345:	bb 02 00 00 00       	mov    ebx,0x2
c000334a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334e:	89 da                	mov    edx,ebx
c0003350:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003353:	e8 b9 fd ff ff       	call   c0003111 <get_fat.isra.2>
c0003358:	83 f8 01             	cmp    eax,0x1
c000335b:	74 ab                	je     c0003308 <create_chain+0x2d>
c000335d:	83 f8 ff             	cmp    eax,0xffffffff
c0003360:	0f 84 a2 00 00 00    	je     c0003408 <create_chain+0x12d>
c0003366:	85 c0                	test   eax,eax
c0003368:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336c:	74 11                	je     c000337f <create_chain+0xa4>
c000336e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003371:	83 f8 01             	cmp    eax,0x1
c0003374:	76 0d                	jbe    c0003383 <create_chain+0xa8>
c0003376:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003379:	73 08                	jae    c0003383 <create_chain+0xa8>
c000337b:	89 c1                	mov    ecx,eax
c000337d:	eb 04                	jmp    c0003383 <create_chain+0xa8>
c000337f:	85 db                	test   ebx,ebx
c0003381:	75 3d                	jne    c00033c0 <create_chain+0xe5>
c0003383:	89 cb                	mov    ebx,ecx
c0003385:	43                   	inc    ebx
c0003386:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003389:	77 0a                	ja     c0003395 <create_chain+0xba>
c000338b:	83 f9 01             	cmp    ecx,0x1
c000338e:	76 a2                	jbe    c0003332 <create_chain+0x57>
c0003390:	bb 02 00 00 00       	mov    ebx,0x2
c0003395:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003399:	89 da                	mov    edx,ebx
c000339b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000339e:	e8 6e fd ff ff       	call   c0003111 <get_fat.isra.2>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	74 19                	je     c00033c0 <create_chain+0xe5>
c00033a7:	83 f8 01             	cmp    eax,0x1
c00033aa:	0f 84 58 ff ff ff    	je     c0003308 <create_chain+0x2d>
c00033b0:	40                   	inc    eax
c00033b1:	74 55                	je     c0003408 <create_chain+0x12d>
c00033b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033b7:	39 cb                	cmp    ebx,ecx
c00033b9:	75 ca                	jne    c0003385 <create_chain+0xaa>
c00033bb:	e9 72 ff ff ff       	jmp    c0003332 <create_chain+0x57>
c00033c0:	83 c9 ff             	or     ecx,0xffffffff
c00033c3:	89 da                	mov    edx,ebx
c00033c5:	89 f0                	mov    eax,esi
c00033c7:	e8 cf f2 ff ff       	call   c000269b <put_fat>
c00033cc:	85 c0                	test   eax,eax
c00033ce:	75 31                	jne    c0003401 <create_chain+0x126>
c00033d0:	85 ff                	test   edi,edi
c00033d2:	75 16                	jne    c00033ea <create_chain+0x10f>
c00033d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033da:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033dd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033e0:	39 d0                	cmp    eax,edx
c00033e2:	77 17                	ja     c00033fb <create_chain+0x120>
c00033e4:	48                   	dec    eax
c00033e5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033e8:	eb 11                	jmp    c00033fb <create_chain+0x120>
c00033ea:	89 d9                	mov    ecx,ebx
c00033ec:	89 fa                	mov    edx,edi
c00033ee:	89 f0                	mov    eax,esi
c00033f0:	e8 a6 f2 ff ff       	call   c000269b <put_fat>
c00033f5:	85 c0                	test   eax,eax
c00033f7:	74 db                	je     c00033d4 <create_chain+0xf9>
c00033f9:	eb 06                	jmp    c0003401 <create_chain+0x126>
c00033fb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ff:	eb 0a                	jmp    c000340b <create_chain+0x130>
c0003401:	48                   	dec    eax
c0003402:	0f 85 00 ff ff ff    	jne    c0003308 <create_chain+0x2d>
c0003408:	83 cb ff             	or     ebx,0xffffffff
c000340b:	83 c4 1c             	add    esp,0x1c
c000340e:	89 d8                	mov    eax,ebx
c0003410:	5b                   	pop    ebx
c0003411:	5e                   	pop    esi
c0003412:	5f                   	pop    edi
c0003413:	5d                   	pop    ebp
c0003414:	c3                   	ret    

c0003415 <remove_chain>:
c0003415:	55                   	push   ebp
c0003416:	57                   	push   edi
c0003417:	56                   	push   esi
c0003418:	89 d6                	mov    esi,edx
c000341a:	53                   	push   ebx
c000341b:	83 ec 0c             	sub    esp,0xc
c000341e:	83 fa 01             	cmp    edx,0x1
c0003421:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003423:	76 65                	jbe    c000348a <remove_chain+0x75>
c0003425:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003428:	76 60                	jbe    c000348a <remove_chain+0x75>
c000342a:	89 c5                	mov    ebp,eax
c000342c:	89 ca                	mov    edx,ecx
c000342e:	85 c9                	test   ecx,ecx
c0003430:	74 0e                	je     c0003440 <remove_chain+0x2b>
c0003432:	83 c9 ff             	or     ecx,0xffffffff
c0003435:	89 d8                	mov    eax,ebx
c0003437:	e8 5f f2 ff ff       	call   c000269b <put_fat>
c000343c:	85 c0                	test   eax,eax
c000343e:	75 56                	jne    c0003496 <remove_chain+0x81>
c0003440:	89 f2                	mov    edx,esi
c0003442:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003445:	e8 c7 fc ff ff       	call   c0003111 <get_fat.isra.2>
c000344a:	89 c7                	mov    edi,eax
c000344c:	85 c0                	test   eax,eax
c000344e:	75 04                	jne    c0003454 <remove_chain+0x3f>
c0003450:	31 c0                	xor    eax,eax
c0003452:	eb 42                	jmp    c0003496 <remove_chain+0x81>
c0003454:	83 f8 01             	cmp    eax,0x1
c0003457:	74 31                	je     c000348a <remove_chain+0x75>
c0003459:	83 f8 ff             	cmp    eax,0xffffffff
c000345c:	74 33                	je     c0003491 <remove_chain+0x7c>
c000345e:	31 c9                	xor    ecx,ecx
c0003460:	89 f2                	mov    edx,esi
c0003462:	89 d8                	mov    eax,ebx
c0003464:	e8 32 f2 ff ff       	call   c000269b <put_fat>
c0003469:	85 c0                	test   eax,eax
c000346b:	75 29                	jne    c0003496 <remove_chain+0x81>
c000346d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003470:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003473:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003476:	39 c8                	cmp    eax,ecx
c0003478:	73 08                	jae    c0003482 <remove_chain+0x6d>
c000347a:	40                   	inc    eax
c000347b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000347f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003482:	89 fe                	mov    esi,edi
c0003484:	39 fa                	cmp    edx,edi
c0003486:	77 b8                	ja     c0003440 <remove_chain+0x2b>
c0003488:	eb c6                	jmp    c0003450 <remove_chain+0x3b>
c000348a:	b8 02 00 00 00       	mov    eax,0x2
c000348f:	eb 05                	jmp    c0003496 <remove_chain+0x81>
c0003491:	b8 01 00 00 00       	mov    eax,0x1
c0003496:	83 c4 0c             	add    esp,0xc
c0003499:	5b                   	pop    ebx
c000349a:	5e                   	pop    esi
c000349b:	5f                   	pop    edi
c000349c:	5d                   	pop    ebp
c000349d:	c3                   	ret    

c000349e <dir_next>:
c000349e:	55                   	push   ebp
c000349f:	57                   	push   edi
c00034a0:	56                   	push   esi
c00034a1:	53                   	push   ebx
c00034a2:	83 ec 1c             	sub    esp,0x1c
c00034a5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034a8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034aa:	83 c7 20             	add    edi,0x20
c00034ad:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034b3:	76 07                	jbe    c00034bc <dir_next+0x1e>
c00034b5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034bc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034bf:	b9 04 00 00 00       	mov    ecx,0x4
c00034c4:	85 f6                	test   esi,esi
c00034c6:	0f 84 cd 00 00 00    	je     c0003599 <dir_next+0xfb>
c00034cc:	89 c3                	mov    ebx,eax
c00034ce:	89 d1                	mov    ecx,edx
c00034d0:	89 f8                	mov    eax,edi
c00034d2:	25 ff 01 00 00       	and    eax,0x1ff
c00034d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034db:	0f 85 a8 00 00 00    	jne    c0003589 <dir_next+0xeb>
c00034e1:	46                   	inc    esi
c00034e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034e5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034e8:	85 d2                	test   edx,edx
c00034ea:	75 22                	jne    c000350e <dir_next+0x70>
c00034ec:	89 fa                	mov    edx,edi
c00034ee:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034f2:	c1 ea 05             	shr    edx,0x5
c00034f5:	39 c2                	cmp    edx,eax
c00034f7:	0f 82 8c 00 00 00    	jb     c0003589 <dir_next+0xeb>
c00034fd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003504:	b9 04 00 00 00       	mov    ecx,0x4
c0003509:	e9 8b 00 00 00       	jmp    c0003599 <dir_next+0xfb>
c000350e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003512:	89 fe                	mov    esi,edi
c0003514:	48                   	dec    eax
c0003515:	c1 ee 09             	shr    esi,0x9
c0003518:	85 f0                	test   eax,esi
c000351a:	75 6d                	jne    c0003589 <dir_next+0xeb>
c000351c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003520:	89 e8                	mov    eax,ebp
c0003522:	e8 ea fb ff ff       	call   c0003111 <get_fat.isra.2>
c0003527:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000352b:	89 c6                	mov    esi,eax
c000352d:	83 f8 01             	cmp    eax,0x1
c0003530:	77 07                	ja     c0003539 <dir_next+0x9b>
c0003532:	b9 02 00 00 00       	mov    ecx,0x2
c0003537:	eb 60                	jmp    c0003599 <dir_next+0xfb>
c0003539:	83 f8 ff             	cmp    eax,0xffffffff
c000353c:	75 07                	jne    c0003545 <dir_next+0xa7>
c000353e:	b9 01 00 00 00       	mov    ecx,0x1
c0003543:	eb 54                	jmp    c0003599 <dir_next+0xfb>
c0003545:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003548:	77 30                	ja     c000357a <dir_next+0xdc>
c000354a:	85 c9                	test   ecx,ecx
c000354c:	74 af                	je     c00034fd <dir_next+0x5f>
c000354e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003551:	89 d8                	mov    eax,ebx
c0003553:	e8 83 fd ff ff       	call   c00032db <create_chain>
c0003558:	b9 07 00 00 00       	mov    ecx,0x7
c000355d:	89 c6                	mov    esi,eax
c000355f:	85 c0                	test   eax,eax
c0003561:	74 36                	je     c0003599 <dir_next+0xfb>
c0003563:	83 f8 01             	cmp    eax,0x1
c0003566:	74 ca                	je     c0003532 <dir_next+0x94>
c0003568:	83 f8 ff             	cmp    eax,0xffffffff
c000356b:	74 d1                	je     c000353e <dir_next+0xa0>
c000356d:	89 c2                	mov    edx,eax
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 75 f2 ff ff       	call   c00027eb <dir_clear>
c0003576:	85 c0                	test   eax,eax
c0003578:	75 c4                	jne    c000353e <dir_next+0xa0>
c000357a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000357d:	89 f2                	mov    edx,esi
c000357f:	89 e8                	mov    eax,ebp
c0003581:	e8 df e9 ff ff       	call   c0001f65 <clst2sect>
c0003586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000358d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003590:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003594:	31 c9                	xor    ecx,ecx
c0003596:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003599:	83 c4 1c             	add    esp,0x1c
c000359c:	89 c8                	mov    eax,ecx
c000359e:	5b                   	pop    ebx
c000359f:	5e                   	pop    esi
c00035a0:	5f                   	pop    edi
c00035a1:	5d                   	pop    ebp
c00035a2:	c3                   	ret    

c00035a3 <dir_alloc>:
c00035a3:	55                   	push   ebp
c00035a4:	89 c5                	mov    ebp,eax
c00035a6:	57                   	push   edi
c00035a7:	89 d7                	mov    edi,edx
c00035a9:	56                   	push   esi
c00035aa:	31 d2                	xor    edx,edx
c00035ac:	53                   	push   ebx
c00035ad:	83 ec 0c             	sub    esp,0xc
c00035b0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035b2:	e8 5c fc ff ff       	call   c0003213 <dir_sdi>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 37                	jne    c00035f2 <dir_alloc+0x4f>
c00035bb:	31 db                	xor    ebx,ebx
c00035bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035c0:	89 f0                	mov    eax,esi
c00035c2:	e8 7e ec ff ff       	call   c0002245 <move_window>
c00035c7:	85 c0                	test   eax,eax
c00035c9:	75 27                	jne    c00035f2 <dir_alloc+0x4f>
c00035cb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ce:	8a 12                	mov    dl,BYTE PTR [edx]
c00035d0:	84 d2                	test   dl,dl
c00035d2:	74 05                	je     c00035d9 <dir_alloc+0x36>
c00035d4:	80 fa e5             	cmp    dl,0xe5
c00035d7:	75 07                	jne    c00035e0 <dir_alloc+0x3d>
c00035d9:	43                   	inc    ebx
c00035da:	39 fb                	cmp    ebx,edi
c00035dc:	75 04                	jne    c00035e2 <dir_alloc+0x3f>
c00035de:	eb 1c                	jmp    c00035fc <dir_alloc+0x59>
c00035e0:	31 db                	xor    ebx,ebx
c00035e2:	ba 01 00 00 00       	mov    edx,0x1
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 b0 fe ff ff       	call   c000349e <dir_next>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	74 cb                	je     c00035bd <dir_alloc+0x1a>
c00035f2:	83 f8 04             	cmp    eax,0x4
c00035f5:	75 05                	jne    c00035fc <dir_alloc+0x59>
c00035f7:	b8 07 00 00 00       	mov    eax,0x7
c00035fc:	83 c4 0c             	add    esp,0xc
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_read>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	bf ff ff ff ff       	mov    edi,0xffffffff
c000360b:	56                   	push   esi
c000360c:	be 04 00 00 00       	mov    esi,0x4
c0003611:	53                   	push   ebx
c0003612:	89 c3                	mov    ebx,eax
c0003614:	83 ec 1c             	sub    esp,0x1c
c0003617:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003622:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003625:	85 d2                	test   edx,edx
c0003627:	0f 84 d8 00 00 00    	je     c0003705 <dir_read+0x101>
c000362d:	89 e8                	mov    eax,ebp
c000362f:	e8 11 ec ff ff       	call   c0002245 <move_window>
c0003634:	89 c6                	mov    esi,eax
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 d2 00 00 00    	jne    c0003710 <dir_read+0x10c>
c000363e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003641:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003643:	84 c9                	test   cl,cl
c0003645:	0f 84 c0 00 00 00    	je     c000370b <dir_read+0x107>
c000364b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000364e:	83 e0 3f             	and    eax,0x3f
c0003651:	80 f9 2e             	cmp    cl,0x2e
c0003654:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003658:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000365b:	0f 84 8a 00 00 00    	je     c00036eb <dir_read+0xe7>
c0003661:	80 f9 e5             	cmp    cl,0xe5
c0003664:	0f 84 81 00 00 00    	je     c00036eb <dir_read+0xe7>
c000366a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000366e:	83 e0 1f             	and    eax,0x1f
c0003671:	83 f8 08             	cmp    eax,0x8
c0003674:	0f 94 c0             	sete   al
c0003677:	0f b6 c0             	movzx  eax,al
c000367a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000367e:	75 6b                	jne    c00036eb <dir_read+0xe7>
c0003680:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003685:	75 44                	jne    c00036cb <dir_read+0xc7>
c0003687:	f6 c1 40             	test   cl,0x40
c000368a:	74 12                	je     c000369e <dir_read+0x9a>
c000368c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000368f:	83 e1 bf             	and    ecx,0xffffffbf
c0003692:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003696:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003699:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000369c:	eb 06                	jmp    c00036a4 <dir_read+0xa0>
c000369e:	89 f8                	mov    eax,edi
c00036a0:	38 c8                	cmp    al,cl
c00036a2:	75 47                	jne    c00036eb <dir_read+0xe7>
c00036a4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036a8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ad:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036b0:	75 3e                	jne    c00036f0 <dir_read+0xec>
c00036b2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036b9:	e8 c4 e8 ff ff       	call   c0001f82 <pick_lfn>
c00036be:	85 c0                	test   eax,eax
c00036c0:	74 2e                	je     c00036f0 <dir_read+0xec>
c00036c2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036c6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036c9:	eb 25                	jmp    c00036f0 <dir_read+0xec>
c00036cb:	89 f8                	mov    eax,edi
c00036cd:	84 c0                	test   al,al
c00036cf:	75 11                	jne    c00036e2 <dir_read+0xde>
c00036d1:	89 d0                	mov    eax,edx
c00036d3:	e8 64 ea ff ff       	call   c000213c <sum_sfn>
c00036d8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036dc:	75 04                	jne    c00036e2 <dir_read+0xde>
c00036de:	31 f6                	xor    esi,esi
c00036e0:	eb 35                	jmp    c0003717 <dir_read+0x113>
c00036e2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036e9:	eb 2c                	jmp    c0003717 <dir_read+0x113>
c00036eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036f0:	31 d2                	xor    edx,edx
c00036f2:	89 d8                	mov    eax,ebx
c00036f4:	e8 a5 fd ff ff       	call   c000349e <dir_next>
c00036f9:	89 c6                	mov    esi,eax
c00036fb:	85 c0                	test   eax,eax
c00036fd:	0f 84 1f ff ff ff    	je     c0003622 <dir_read+0x1e>
c0003703:	eb 0b                	jmp    c0003710 <dir_read+0x10c>
c0003705:	85 f6                	test   esi,esi
c0003707:	74 d5                	je     c00036de <dir_read+0xda>
c0003709:	eb 05                	jmp    c0003710 <dir_read+0x10c>
c000370b:	be 04 00 00 00       	mov    esi,0x4
c0003710:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003717:	83 c4 1c             	add    esp,0x1c
c000371a:	89 f0                	mov    eax,esi
c000371c:	5b                   	pop    ebx
c000371d:	5e                   	pop    esi
c000371e:	5f                   	pop    edi
c000371f:	5d                   	pop    ebp
c0003720:	c3                   	ret    

c0003721 <dir_remove>:
c0003721:	57                   	push   edi
c0003722:	56                   	push   esi
c0003723:	53                   	push   ebx
c0003724:	89 c3                	mov    ebx,eax
c0003726:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003729:	8b 30                	mov    esi,DWORD PTR [eax]
c000372b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000372e:	83 fa ff             	cmp    edx,0xffffffff
c0003731:	74 09                	je     c000373c <dir_remove+0x1b>
c0003733:	e8 db fa ff ff       	call   c0003213 <dir_sdi>
c0003738:	85 c0                	test   eax,eax
c000373a:	75 34                	jne    c0003770 <dir_remove+0x4f>
c000373c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000373f:	89 f0                	mov    eax,esi
c0003741:	e8 ff ea ff ff       	call   c0002245 <move_window>
c0003746:	85 c0                	test   eax,eax
c0003748:	75 1c                	jne    c0003766 <dir_remove+0x45>
c000374a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000374d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003750:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003754:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003757:	73 17                	jae    c0003770 <dir_remove+0x4f>
c0003759:	31 d2                	xor    edx,edx
c000375b:	89 d8                	mov    eax,ebx
c000375d:	e8 3c fd ff ff       	call   c000349e <dir_next>
c0003762:	85 c0                	test   eax,eax
c0003764:	74 d6                	je     c000373c <dir_remove+0x1b>
c0003766:	83 f8 04             	cmp    eax,0x4
c0003769:	75 05                	jne    c0003770 <dir_remove+0x4f>
c000376b:	b8 02 00 00 00       	mov    eax,0x2
c0003770:	5b                   	pop    ebx
c0003771:	5e                   	pop    esi
c0003772:	5f                   	pop    edi
c0003773:	c3                   	ret    

c0003774 <dir_find>:
c0003774:	55                   	push   ebp
c0003775:	31 d2                	xor    edx,edx
c0003777:	57                   	push   edi
c0003778:	56                   	push   esi
c0003779:	53                   	push   ebx
c000377a:	89 c3                	mov    ebx,eax
c000377c:	83 ec 1c             	sub    esp,0x1c
c000377f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003781:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	e8 87 fa ff ff       	call   c0003213 <dir_sdi>
c000378c:	89 c6                	mov    esi,eax
c000378e:	85 c0                	test   eax,eax
c0003790:	0f 85 02 01 00 00    	jne    c0003898 <dir_find+0x124>
c0003796:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000379d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037a2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037a7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ae:	e8 92 ea ff ff       	call   c0002245 <move_window>
c00037b3:	89 c6                	mov    esi,eax
c00037b5:	85 c0                	test   eax,eax
c00037b7:	0f 85 db 00 00 00    	jne    c0003898 <dir_find+0x124>
c00037bd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037c0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037c3:	84 c9                	test   cl,cl
c00037c5:	0f 84 c8 00 00 00    	je     c0003893 <dir_find+0x11f>
c00037cb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ce:	88 d0                	mov    al,dl
c00037d0:	83 e0 3f             	and    eax,0x3f
c00037d3:	80 f9 e5             	cmp    cl,0xe5
c00037d6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037d9:	0f 84 93 00 00 00    	je     c0003872 <dir_find+0xfe>
c00037df:	80 e2 08             	and    dl,0x8
c00037e2:	74 0a                	je     c00037ee <dir_find+0x7a>
c00037e4:	3c 0f                	cmp    al,0xf
c00037e6:	0f 85 86 00 00 00    	jne    c0003872 <dir_find+0xfe>
c00037ec:	eb 04                	jmp    c00037f2 <dir_find+0x7e>
c00037ee:	3c 0f                	cmp    al,0xf
c00037f0:	75 54                	jne    c0003846 <dir_find+0xd2>
c00037f2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037f6:	0f 85 82 00 00 00    	jne    c000387e <dir_find+0x10a>
c00037fc:	f6 c1 40             	test   cl,0x40
c00037ff:	74 12                	je     c0003813 <dir_find+0x9f>
c0003801:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003804:	83 e1 bf             	and    ecx,0xffffffbf
c0003807:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000380b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000380e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003811:	eb 06                	jmp    c0003819 <dir_find+0xa5>
c0003813:	89 f8                	mov    eax,edi
c0003815:	38 c8                	cmp    al,cl
c0003817:	75 60                	jne    c0003879 <dir_find+0x105>
c0003819:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000381d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003822:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003825:	75 57                	jne    c000387e <dir_find+0x10a>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000382f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003832:	89 ea                	mov    edx,ebp
c0003834:	e8 89 f3 ff ff       	call   c0002bc2 <cmp_lfn>
c0003839:	85 c0                	test   eax,eax
c000383b:	74 41                	je     c000387e <dir_find+0x10a>
c000383d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003841:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003844:	eb 38                	jmp    c000387e <dir_find+0x10a>
c0003846:	89 f8                	mov    eax,edi
c0003848:	84 c0                	test   al,al
c000384a:	75 0d                	jne    c0003859 <dir_find+0xe5>
c000384c:	89 e8                	mov    eax,ebp
c000384e:	e8 e9 e8 ff ff       	call   c000213c <sum_sfn>
c0003853:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003857:	74 3f                	je     c0003898 <dir_find+0x124>
c0003859:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000385d:	75 13                	jne    c0003872 <dir_find+0xfe>
c000385f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003862:	b9 0b 00 00 00       	mov    ecx,0xb
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 fd e4 ff ff       	call   c0001d6b <mem_cmp>
c000386e:	85 c0                	test   eax,eax
c0003870:	74 26                	je     c0003898 <dir_find+0x124>
c0003872:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003879:	bf ff ff ff ff       	mov    edi,0xffffffff
c000387e:	31 d2                	xor    edx,edx
c0003880:	89 d8                	mov    eax,ebx
c0003882:	e8 17 fc ff ff       	call   c000349e <dir_next>
c0003887:	89 c6                	mov    esi,eax
c0003889:	85 c0                	test   eax,eax
c000388b:	0f 84 16 ff ff ff    	je     c00037a7 <dir_find+0x33>
c0003891:	eb 05                	jmp    c0003898 <dir_find+0x124>
c0003893:	be 04 00 00 00       	mov    esi,0x4
c0003898:	83 c4 1c             	add    esp,0x1c
c000389b:	89 f0                	mov    eax,esi
c000389d:	5b                   	pop    ebx
c000389e:	5e                   	pop    esi
c000389f:	5f                   	pop    edi
c00038a0:	5d                   	pop    ebp
c00038a1:	c3                   	ret    

c00038a2 <follow_path>:
c00038a2:	56                   	push   esi
c00038a3:	53                   	push   ebx
c00038a4:	89 c3                	mov    ebx,eax
c00038a6:	83 ec 14             	sub    esp,0x14
c00038a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00038af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038b3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038b5:	80 fa 5c             	cmp    dl,0x5c
c00038b8:	75 07                	jne    c00038c1 <follow_path+0x1f>
c00038ba:	40                   	inc    eax
c00038bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038bf:	eb ee                	jmp    c00038af <follow_path+0xd>
c00038c1:	80 fa 2f             	cmp    dl,0x2f
c00038c4:	74 f4                	je     c00038ba <follow_path+0x18>
c00038c6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038cd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038d0:	77 3e                	ja     c0003910 <follow_path+0x6e>
c00038d2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038d6:	31 d2                	xor    edx,edx
c00038d8:	89 d8                	mov    eax,ebx
c00038da:	e8 34 f9 ff ff       	call   c0003213 <dir_sdi>
c00038df:	eb 4f                	jmp    c0003930 <follow_path+0x8e>
c00038e1:	89 d8                	mov    eax,ebx
c00038e3:	e8 8c fe ff ff       	call   c0003774 <dir_find>
c00038e8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038eb:	85 c0                	test   eax,eax
c00038ed:	75 32                	jne    c0003921 <follow_path+0x7f>
c00038ef:	80 e2 04             	and    dl,0x4
c00038f2:	75 3c                	jne    c0003930 <follow_path+0x8e>
c00038f4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038f8:	74 31                	je     c000392b <follow_path+0x89>
c00038fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038fd:	25 ff 01 00 00       	and    eax,0x1ff
c0003902:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003906:	8a 06                	mov    al,BYTE PTR [esi]
c0003908:	e8 b3 f7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000390d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003910:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003914:	89 d8                	mov    eax,ebx
c0003916:	e8 cb ef ff ff       	call   c00028e6 <create_name>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c2                	je     c00038e1 <follow_path+0x3f>
c000391f:	eb 0f                	jmp    c0003930 <follow_path+0x8e>
c0003921:	83 f8 04             	cmp    eax,0x4
c0003924:	75 0a                	jne    c0003930 <follow_path+0x8e>
c0003926:	80 e2 04             	and    dl,0x4
c0003929:	75 05                	jne    c0003930 <follow_path+0x8e>
c000392b:	b8 05 00 00 00       	mov    eax,0x5
c0003930:	83 c4 14             	add    esp,0x14
c0003933:	5b                   	pop    ebx
c0003934:	5e                   	pop    esi
c0003935:	c3                   	ret    

c0003936 <dir_register>:
c0003936:	55                   	push   ebp
c0003937:	57                   	push   edi
c0003938:	56                   	push   esi
c0003939:	be 06 00 00 00       	mov    esi,0x6
c000393e:	53                   	push   ebx
c000393f:	83 ec 2c             	sub    esp,0x2c
c0003942:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003946:	0f 85 65 01 00 00    	jne    c0003ab1 <dir_register+0x17b>
c000394c:	8b 38                	mov    edi,DWORD PTR [eax]
c000394e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003956:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003959:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000395d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003962:	74 06                	je     c000396a <dir_register+0x34>
c0003964:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003968:	eb ef                	jmp    c0003959 <dir_register+0x23>
c000396a:	89 c3                	mov    ebx,eax
c000396c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003971:	8d 40 20             	lea    eax,[eax+0x20]
c0003974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003978:	89 c2                	mov    edx,eax
c000397a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000397e:	e8 c8 e3 ff ff       	call   c0001d4b <mem_cpy>
c0003983:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003988:	74 48                	je     c00039d2 <dir_register+0x9c>
c000398a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000398e:	bd 01 00 00 00       	mov    ebp,0x1
c0003993:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003996:	55                   	push   ebp
c0003997:	8d 54 24 18          	lea    edx,[esp+0x18]
c000399b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000399f:	e8 dc e6 ff ff       	call   c0002080 <gen_numname>
c00039a4:	58                   	pop    eax
c00039a5:	89 d8                	mov    eax,ebx
c00039a7:	e8 c8 fd ff ff       	call   c0003774 <dir_find>
c00039ac:	89 c6                	mov    esi,eax
c00039ae:	85 c0                	test   eax,eax
c00039b0:	75 10                	jne    c00039c2 <dir_register+0x8c>
c00039b2:	45                   	inc    ebp
c00039b3:	83 fd 64             	cmp    ebp,0x64
c00039b6:	75 db                	jne    c0003993 <dir_register+0x5d>
c00039b8:	be 07 00 00 00       	mov    esi,0x7
c00039bd:	e9 ef 00 00 00       	jmp    c0003ab1 <dir_register+0x17b>
c00039c2:	83 f8 04             	cmp    eax,0x4
c00039c5:	0f 85 e6 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c00039cb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039cf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039d2:	bd 01 00 00 00       	mov    ebp,0x1
c00039d7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039dc:	74 13                	je     c00039f1 <dir_register+0xbb>
c00039de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039e2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039e7:	83 c0 0c             	add    eax,0xc
c00039ea:	31 d2                	xor    edx,edx
c00039ec:	f7 f1                	div    ecx
c00039ee:	8d 68 01             	lea    ebp,[eax+0x1]
c00039f1:	89 ea                	mov    edx,ebp
c00039f3:	89 d8                	mov    eax,ebx
c00039f5:	e8 a9 fb ff ff       	call   c00035a3 <dir_alloc>
c00039fa:	89 c6                	mov    esi,eax
c00039fc:	85 c0                	test   eax,eax
c00039fe:	0f 85 ad 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a04:	4d                   	dec    ebp
c0003a05:	74 6a                	je     c0003a71 <dir_register+0x13b>
c0003a07:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a0a:	89 e8                	mov    eax,ebp
c0003a0c:	c1 e0 05             	shl    eax,0x5
c0003a0f:	29 c2                	sub    edx,eax
c0003a11:	89 d8                	mov    eax,ebx
c0003a13:	e8 fb f7 ff ff       	call   c0003213 <dir_sdi>
c0003a18:	89 c6                	mov    esi,eax
c0003a1a:	85 c0                	test   eax,eax
c0003a1c:	0f 85 8f 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a26:	e8 11 e7 ff ff       	call   c000213c <sum_sfn>
c0003a2b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a2f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a32:	89 f8                	mov    eax,edi
c0003a34:	e8 0c e8 ff ff       	call   c0002245 <move_window>
c0003a39:	89 c6                	mov    esi,eax
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	75 72                	jne    c0003ab1 <dir_register+0x17b>
c0003a3f:	83 ec 0c             	sub    esp,0xc
c0003a42:	89 e8                	mov    eax,ebp
c0003a44:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a49:	0f b6 c8             	movzx  ecx,al
c0003a4c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a4f:	52                   	push   edx
c0003a50:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a53:	e8 a4 e5 ff ff       	call   c0001ffc <put_lfn>
c0003a58:	31 d2                	xor    edx,edx
c0003a5a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a5e:	89 d8                	mov    eax,ebx
c0003a60:	e8 39 fa ff ff       	call   c000349e <dir_next>
c0003a65:	83 c4 10             	add    esp,0x10
c0003a68:	89 c6                	mov    esi,eax
c0003a6a:	85 c0                	test   eax,eax
c0003a6c:	75 43                	jne    c0003ab1 <dir_register+0x17b>
c0003a6e:	4d                   	dec    ebp
c0003a6f:	75 be                	jne    c0003a2f <dir_register+0xf9>
c0003a71:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a74:	89 f8                	mov    eax,edi
c0003a76:	e8 ca e7 ff ff       	call   c0002245 <move_window>
c0003a7b:	89 c6                	mov    esi,eax
c0003a7d:	85 c0                	test   eax,eax
c0003a7f:	75 30                	jne    c0003ab1 <dir_register+0x17b>
c0003a81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a84:	b9 20 00 00 00       	mov    ecx,0x20
c0003a89:	31 d2                	xor    edx,edx
c0003a8b:	e8 d0 e2 ff ff       	call   c0001d60 <mem_set>
c0003a90:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a9c:	e8 aa e2 ff ff       	call   c0001d4b <mem_cpy>
c0003aa1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003aa4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa7:	83 e0 18             	and    eax,0x18
c0003aaa:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ab1:	83 c4 2c             	add    esp,0x2c
c0003ab4:	89 f0                	mov    eax,esi
c0003ab6:	5b                   	pop    ebx
c0003ab7:	5e                   	pop    esi
c0003ab8:	5f                   	pop    edi
c0003ab9:	5d                   	pop    ebp
c0003aba:	c3                   	ret    

c0003abb <f_mount>:
c0003abb:	53                   	push   ebx
c0003abc:	83 ec 18             	sub    esp,0x18
c0003abf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ac3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003acb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003acf:	e8 7a e6 ff ff       	call   c000214e <get_ldnumber>
c0003ad4:	89 c2                	mov    edx,eax
c0003ad6:	b8 0b 00 00 00       	mov    eax,0xb
c0003adb:	85 d2                	test   edx,edx
c0003add:	78 39                	js     c0003b18 <f_mount+0x5d>
c0003adf:	8b 04 95 a0 14 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdeb60]
c0003ae6:	85 c0                	test   eax,eax
c0003ae8:	74 03                	je     c0003aed <f_mount+0x32>
c0003aea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003af1:	85 c0                	test   eax,eax
c0003af3:	74 03                	je     c0003af8 <f_mount+0x3d>
c0003af5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003afc:	89 04 95 a0 14 02 c0 	mov    DWORD PTR [edx*4-0x3ffdeb60],eax
c0003b03:	31 c0                	xor    eax,eax
c0003b05:	84 db                	test   bl,bl
c0003b07:	74 0f                	je     c0003b18 <f_mount+0x5d>
c0003b09:	31 c9                	xor    ecx,ecx
c0003b0b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b13:	e8 80 e8 ff ff       	call   c0002398 <mount_volume>
c0003b18:	83 c4 18             	add    esp,0x18
c0003b1b:	5b                   	pop    ebx
c0003b1c:	c3                   	ret    

c0003b1d <f_open>:
c0003b1d:	55                   	push   ebp
c0003b1e:	b8 09 00 00 00       	mov    eax,0x9
c0003b23:	57                   	push   edi
c0003b24:	56                   	push   esi
c0003b25:	53                   	push   ebx
c0003b26:	83 ec 5c             	sub    esp,0x5c
c0003b29:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b2d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b31:	85 db                	test   ebx,ebx
c0003b33:	0f 84 a7 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b39:	89 fe                	mov    esi,edi
c0003b3b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b3f:	83 e6 3f             	and    esi,0x3f
c0003b42:	89 f0                	mov    eax,esi
c0003b44:	0f b6 c8             	movzx  ecx,al
c0003b47:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b4b:	e8 48 e8 ff ff       	call   c0002398 <mount_volume>
c0003b50:	85 c0                	test   eax,eax
c0003b52:	0f 85 82 02 00 00    	jne    c0003dda <f_open+0x2bd>
c0003b58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b5c:	83 ec 0c             	sub    esp,0xc
c0003b5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b63:	68 00 02 00 00       	push   0x200
c0003b68:	e8 ff 1e 00 00       	call   c0005a6c <ff_memalloc>
c0003b6d:	83 c4 10             	add    esp,0x10
c0003b70:	89 c5                	mov    ebp,eax
c0003b72:	b8 11 00 00 00       	mov    eax,0x11
c0003b77:	85 ed                	test   ebp,ebp
c0003b79:	0f 84 61 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b83:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b87:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b8e:	e8 0f fd ff ff       	call   c00038a2 <follow_path>
c0003b93:	85 c0                	test   eax,eax
c0003b95:	75 0c                	jne    c0003ba3 <f_open+0x86>
c0003b97:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b9c:	79 05                	jns    c0003ba3 <f_open+0x86>
c0003b9e:	b8 06 00 00 00       	mov    eax,0x6
c0003ba3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ba9:	0f 84 de 00 00 00    	je     c0003c8d <f_open+0x170>
c0003baf:	85 c0                	test   eax,eax
c0003bb1:	74 1e                	je     c0003bd1 <f_open+0xb4>
c0003bb3:	83 f8 04             	cmp    eax,0x4
c0003bb6:	0f 85 06 02 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bbc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bc0:	83 ce 08             	or     esi,0x8
c0003bc3:	e8 6e fd ff ff       	call   c0003936 <dir_register>
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	74 2f                	je     c0003bfb <f_open+0xde>
c0003bcc:	e9 f1 01 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003bd1:	b8 07 00 00 00       	mov    eax,0x7
c0003bd6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bdb:	0f 85 e1 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003be1:	b8 08 00 00 00       	mov    eax,0x8
c0003be6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bec:	0f 85 d0 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bf2:	83 e7 08             	and    edi,0x8
c0003bf5:	0f 84 bf 00 00 00    	je     c0003cba <f_open+0x19d>
c0003bfb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c03:	89 ca                	mov    edx,ecx
c0003c05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c09:	8a 00                	mov    al,BYTE PTR [eax]
c0003c0b:	e8 b0 f4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003c10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c14:	89 c7                	mov    edi,eax
c0003c16:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c1b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c1e:	e8 25 e1 ff ff       	call   c0001d48 <st_dword>
c0003c23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c27:	31 c9                	xor    ecx,ecx
c0003c29:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c35:	e8 af f4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0003c3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c3e:	31 d2                	xor    edx,edx
c0003c40:	83 c0 1c             	add    eax,0x1c
c0003c43:	e8 00 e1 ff ff       	call   c0001d48 <st_dword>
c0003c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c4c:	85 ff                	test   edi,edi
c0003c4e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c52:	74 66                	je     c0003cba <f_open+0x19d>
c0003c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c58:	31 c9                	xor    ecx,ecx
c0003c5a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c5d:	89 fa                	mov    edx,edi
c0003c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c63:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c67:	e8 a9 f7 ff ff       	call   c0003415 <remove_chain>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	0f 85 4e 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c78:	4f                   	dec    edi
c0003c79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c7d:	e8 c3 e5 ff ff       	call   c0002245 <move_window>
c0003c82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c86:	85 c0                	test   eax,eax
c0003c88:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c8b:	eb 27                	jmp    c0003cb4 <f_open+0x197>
c0003c8d:	85 c0                	test   eax,eax
c0003c8f:	0f 85 2d 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c95:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c99:	b8 04 00 00 00       	mov    eax,0x4
c0003c9e:	f6 c2 10             	test   dl,0x10
c0003ca1:	0f 85 1b 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003ca7:	83 e7 02             	and    edi,0x2
c0003caa:	74 0e                	je     c0003cba <f_open+0x19d>
c0003cac:	b8 07 00 00 00       	mov    eax,0x7
c0003cb1:	80 e2 01             	and    dl,0x1
c0003cb4:	0f 85 08 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003cba:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cc0:	74 03                	je     c0003cc5 <f_open+0x1a8>
c0003cc2:	83 ce 40             	or     esi,0x40
c0003cc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cc9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ccd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cd0:	89 fa                	mov    edx,edi
c0003cd2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cd9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cdc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cde:	e8 dd f3 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003ce3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003ce6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003ce9:	e8 3e e0 ff ff       	call   c0001d2c <ld_dword>
c0003cee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cf2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003cf5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003cf7:	31 d2                	xor    edx,edx
c0003cf9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003cfd:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d01:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d05:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d0c:	89 f0                	mov    eax,esi
c0003d0e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d15:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d18:	b9 00 02 00 00       	mov    ecx,0x200
c0003d1d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d24:	e8 37 e0 ff ff       	call   c0001d60 <mem_set>
c0003d29:	83 e6 20             	and    esi,0x20
c0003d2c:	75 07                	jne    c0003d35 <f_open+0x218>
c0003d2e:	31 c0                	xor    eax,eax
c0003d30:	e9 8d 00 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003d35:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d38:	85 ff                	test   edi,edi
c0003d3a:	74 f2                	je     c0003d2e <f_open+0x211>
c0003d3c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d43:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d46:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d4a:	c1 e6 09             	shl    esi,0x9
c0003d4d:	39 fe                	cmp    esi,edi
c0003d4f:	73 1c                	jae    c0003d6d <f_open+0x250>
c0003d51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d53:	29 f7                	sub    edi,esi
c0003d55:	e8 b7 f3 ff ff       	call   c0003111 <get_fat.isra.2>
c0003d5a:	89 c2                	mov    edx,eax
c0003d5c:	83 f8 01             	cmp    eax,0x1
c0003d5f:	76 10                	jbe    c0003d71 <f_open+0x254>
c0003d61:	83 f8 ff             	cmp    eax,0xffffffff
c0003d64:	75 e7                	jne    c0003d4d <f_open+0x230>
c0003d66:	b8 01 00 00 00       	mov    eax,0x1
c0003d6b:	eb 09                	jmp    c0003d76 <f_open+0x259>
c0003d6d:	31 c0                	xor    eax,eax
c0003d6f:	eb 05                	jmp    c0003d76 <f_open+0x259>
c0003d71:	b8 02 00 00 00       	mov    eax,0x2
c0003d76:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d79:	85 c0                	test   eax,eax
c0003d7b:	75 45                	jne    c0003dc2 <f_open+0x2a5>
c0003d7d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d83:	74 a9                	je     c0003d2e <f_open+0x211>
c0003d85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d89:	89 f0                	mov    eax,esi
c0003d8b:	e8 d5 e1 ff ff       	call   c0001f65 <clst2sect>
c0003d90:	89 c2                	mov    edx,eax
c0003d92:	b8 02 00 00 00       	mov    eax,0x2
c0003d97:	85 d2                	test   edx,edx
c0003d99:	74 27                	je     c0003dc2 <f_open+0x2a5>
c0003d9b:	89 f9                	mov    ecx,edi
c0003d9d:	c1 e9 09             	shr    ecx,0x9
c0003da0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003da3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003da6:	6a 01                	push   0x1
c0003da8:	50                   	push   eax
c0003da9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dad:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003db1:	50                   	push   eax
c0003db2:	e8 1d df ff ff       	call   c0001cd4 <disk_read>
c0003db7:	83 c4 10             	add    esp,0x10
c0003dba:	85 c0                	test   eax,eax
c0003dbc:	0f 95 c0             	setne  al
c0003dbf:	0f b6 c0             	movzx  eax,al
c0003dc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003dc6:	83 ec 0c             	sub    esp,0xc
c0003dc9:	55                   	push   ebp
c0003dca:	e8 b5 1c 00 00       	call   c0005a84 <ff_memfree>
c0003dcf:	83 c4 10             	add    esp,0x10
c0003dd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 06                	je     c0003de0 <f_open+0x2c3>
c0003dda:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003de0:	83 c4 5c             	add    esp,0x5c
c0003de3:	5b                   	pop    ebx
c0003de4:	5e                   	pop    esi
c0003de5:	5f                   	pop    edi
c0003de6:	5d                   	pop    ebp
c0003de7:	c3                   	ret    

c0003de8 <f_read>:
c0003de8:	55                   	push   ebp
c0003de9:	57                   	push   edi
c0003dea:	56                   	push   esi
c0003deb:	53                   	push   ebx
c0003dec:	83 ec 2c             	sub    esp,0x2c
c0003def:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003df3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003df7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003dfd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e05:	89 d8                	mov    eax,ebx
c0003e07:	e8 8f e3 ff ff       	call   c000219b <validate>
c0003e0c:	89 c5                	mov    ebp,eax
c0003e0e:	85 c0                	test   eax,eax
c0003e10:	0f 85 c7 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e16:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e1a:	85 ed                	test   ebp,ebp
c0003e1c:	0f 85 bb 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e22:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e26:	0f 84 ac 01 00 00    	je     c0003fd8 <f_read+0x1f0>
c0003e2c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e2f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e32:	89 c7                	mov    edi,eax
c0003e34:	39 f0                	cmp    eax,esi
c0003e36:	0f 86 ad 00 00 00    	jbe    c0003ee9 <f_read+0x101>
c0003e3c:	89 f7                	mov    edi,esi
c0003e3e:	e9 a6 00 00 00       	jmp    c0003ee9 <f_read+0x101>
c0003e43:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e46:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e4c:	0f 85 5b 01 00 00    	jne    c0003fad <f_read+0x1c5>
c0003e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e56:	89 d1                	mov    ecx,edx
c0003e58:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e5c:	c1 e9 09             	shr    ecx,0x9
c0003e5f:	48                   	dec    eax
c0003e60:	21 c8                	and    eax,ecx
c0003e62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e66:	0f 84 8a 00 00 00    	je     c0003ef6 <f_read+0x10e>
c0003e6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e73:	89 c8                	mov    eax,ecx
c0003e75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e79:	e8 e7 e0 ff ff       	call   c0001f65 <clst2sect>
c0003e7e:	85 c0                	test   eax,eax
c0003e80:	0f 84 88 00 00 00    	je     c0003f0e <f_read+0x126>
c0003e86:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e92:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e98:	0f 86 bd 00 00 00    	jbe    c0003f5b <f_read+0x173>
c0003e9e:	89 fe                	mov    esi,edi
c0003ea0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ea4:	c1 ee 09             	shr    esi,0x9
c0003ea7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003eab:	01 f2                	add    edx,esi
c0003ead:	39 c2                	cmp    edx,eax
c0003eaf:	76 06                	jbe    c0003eb7 <f_read+0xcf>
c0003eb1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eb5:	89 c6                	mov    esi,eax
c0003eb7:	56                   	push   esi
c0003eb8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ebc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ec0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ec4:	50                   	push   eax
c0003ec5:	e8 0a de ff ff       	call   c0001cd4 <disk_read>
c0003eca:	83 c4 10             	add    esp,0x10
c0003ecd:	85 c0                	test   eax,eax
c0003ecf:	75 50                	jne    c0003f21 <f_read+0x139>
c0003ed1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ed5:	78 60                	js     c0003f37 <f_read+0x14f>
c0003ed7:	c1 e6 09             	shl    esi,0x9
c0003eda:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ede:	29 f7                	sub    edi,esi
c0003ee0:	01 30                	add    DWORD PTR [eax],esi
c0003ee2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ee6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ee9:	85 ff                	test   edi,edi
c0003eeb:	0f 85 52 ff ff ff    	jne    c0003e43 <f_read+0x5b>
c0003ef1:	e9 e7 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003ef6:	85 d2                	test   edx,edx
c0003ef8:	75 05                	jne    c0003eff <f_read+0x117>
c0003efa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003efd:	eb 0a                	jmp    c0003f09 <f_read+0x121>
c0003eff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f04:	e8 08 f2 ff ff       	call   c0003111 <get_fat.isra.2>
c0003f09:	83 f8 01             	cmp    eax,0x1
c0003f0c:	77 0e                	ja     c0003f1c <f_read+0x134>
c0003f0e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f12:	bd 02 00 00 00       	mov    ebp,0x2
c0003f17:	e9 c1 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f1c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f1f:	75 0e                	jne    c0003f2f <f_read+0x147>
c0003f21:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f25:	bd 01 00 00 00       	mov    ebp,0x1
c0003f2a:	e9 ae 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f2f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f32:	e9 35 ff ff ff       	jmp    c0003e6c <f_read+0x84>
c0003f37:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f3a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f3e:	39 f0                	cmp    eax,esi
c0003f40:	73 95                	jae    c0003ed7 <f_read+0xef>
c0003f42:	c1 e0 09             	shl    eax,0x9
c0003f45:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f48:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f4c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f51:	e8 f5 dd ff ff       	call   c0001d4b <mem_cpy>
c0003f56:	e9 7c ff ff ff       	jmp    c0003ed7 <f_read+0xef>
c0003f5b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f62:	74 42                	je     c0003fa6 <f_read+0x1be>
c0003f64:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f67:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f6b:	79 19                	jns    c0003f86 <f_read+0x19e>
c0003f6d:	6a 01                	push   0x1
c0003f6f:	50                   	push   eax
c0003f70:	56                   	push   esi
c0003f71:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f75:	50                   	push   eax
c0003f76:	e8 6f dd ff ff       	call   c0001cea <disk_write>
c0003f7b:	83 c4 10             	add    esp,0x10
c0003f7e:	85 c0                	test   eax,eax
c0003f80:	75 9f                	jne    c0003f21 <f_read+0x139>
c0003f82:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f86:	6a 01                	push   0x1
c0003f88:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f8c:	56                   	push   esi
c0003f8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 39 dd ff ff       	call   c0001cd4 <disk_read>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	0f 85 7b ff ff ff    	jne    c0003f21 <f_read+0x139>
c0003fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003faa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fb0:	ba 00 02 00 00       	mov    edx,0x200
c0003fb5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fba:	89 fe                	mov    esi,edi
c0003fbc:	29 c2                	sub    edx,eax
c0003fbe:	39 d7                	cmp    edi,edx
c0003fc0:	76 02                	jbe    c0003fc4 <f_read+0x1dc>
c0003fc2:	89 d6                	mov    esi,edx
c0003fc4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fc8:	89 f1                	mov    ecx,esi
c0003fca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fce:	e8 78 dd ff ff       	call   c0001d4b <mem_cpy>
c0003fd3:	e9 02 ff ff ff       	jmp    c0003eda <f_read+0xf2>
c0003fd8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fdd:	83 c4 2c             	add    esp,0x2c
c0003fe0:	89 e8                	mov    eax,ebp
c0003fe2:	5b                   	pop    ebx
c0003fe3:	5e                   	pop    esi
c0003fe4:	5f                   	pop    edi
c0003fe5:	5d                   	pop    ebp
c0003fe6:	c3                   	ret    

c0003fe7 <f_write>:
c0003fe7:	55                   	push   ebp
c0003fe8:	57                   	push   edi
c0003fe9:	56                   	push   esi
c0003fea:	53                   	push   ebx
c0003feb:	83 ec 2c             	sub    esp,0x2c
c0003fee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ff2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003ff6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004000:	89 d8                	mov    eax,ebx
c0004002:	e8 94 e1 ff ff       	call   c000219b <validate>
c0004007:	89 c5                	mov    ebp,eax
c0004009:	85 c0                	test   eax,eax
c000400b:	0f 85 00 02 00 00    	jne    c0004211 <f_write+0x22a>
c0004011:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004015:	85 ed                	test   ebp,ebp
c0004017:	0f 85 f4 01 00 00    	jne    c0004211 <f_write+0x22a>
c000401d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004021:	0f 84 e5 01 00 00    	je     c000420c <f_write+0x225>
c0004027:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000402a:	89 c7                	mov    edi,eax
c000402c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004030:	0f 83 ea 00 00 00    	jae    c0004120 <f_write+0x139>
c0004036:	f7 d0                	not    eax
c0004038:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000403c:	e9 df 00 00 00       	jmp    c0004120 <f_write+0x139>
c0004041:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004044:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000404a:	0f 85 8b 01 00 00    	jne    c00041db <f_write+0x1f4>
c0004050:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004054:	89 d1                	mov    ecx,edx
c0004056:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000405a:	c1 e9 09             	shr    ecx,0x9
c000405d:	48                   	dec    eax
c000405e:	21 c8                	and    eax,ecx
c0004060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004064:	0f 84 c3 00 00 00    	je     c000412d <f_write+0x146>
c000406a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000406e:	0f 88 18 01 00 00    	js     c000418c <f_write+0x1a5>
c0004074:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004078:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000407b:	89 c8                	mov    eax,ecx
c000407d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004081:	e8 df de ff ff       	call   c0001f65 <clst2sect>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 84 c8 00 00 00    	je     c0004156 <f_write+0x16f>
c000408e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004092:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004096:	01 c7                	add    edi,eax
c0004098:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040a0:	0f 86 0d 01 00 00    	jbe    c00041b3 <f_write+0x1cc>
c00040a6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040aa:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ae:	c1 ee 09             	shr    esi,0x9
c00040b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040b5:	01 f2                	add    edx,esi
c00040b7:	39 c2                	cmp    edx,eax
c00040b9:	76 06                	jbe    c00040c1 <f_write+0xda>
c00040bb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040bf:	89 c6                	mov    esi,eax
c00040c1:	56                   	push   esi
c00040c2:	57                   	push   edi
c00040c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040cb:	50                   	push   eax
c00040cc:	e8 19 dc ff ff       	call   c0001cea <disk_write>
c00040d1:	83 c4 10             	add    esp,0x10
c00040d4:	85 c0                	test   eax,eax
c00040d6:	0f 85 8d 00 00 00    	jne    c0004169 <f_write+0x182>
c00040dc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040df:	29 fa                	sub    edx,edi
c00040e1:	39 f2                	cmp    edx,esi
c00040e3:	73 18                	jae    c00040fd <f_write+0x116>
c00040e5:	c1 e2 09             	shl    edx,0x9
c00040e8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040eb:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040ef:	b9 00 02 00 00       	mov    ecx,0x200
c00040f4:	e8 52 dc ff ff       	call   c0001d4b <mem_cpy>
c00040f9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040fd:	c1 e6 09             	shl    esi,0x9
c0004100:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004104:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004108:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000410c:	01 30                	add    DWORD PTR [eax],esi
c000410e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004111:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004114:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004117:	39 f0                	cmp    eax,esi
c0004119:	73 02                	jae    c000411d <f_write+0x136>
c000411b:	89 f0                	mov    eax,esi
c000411d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004120:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004125:	0f 85 16 ff ff ff    	jne    c0004041 <f_write+0x5a>
c000412b:	eb 1b                	jmp    c0004148 <f_write+0x161>
c000412d:	85 d2                	test   edx,edx
c000412f:	75 09                	jne    c000413a <f_write+0x153>
c0004131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004134:	85 c0                	test   eax,eax
c0004136:	75 19                	jne    c0004151 <f_write+0x16a>
c0004138:	eb 03                	jmp    c000413d <f_write+0x156>
c000413a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000413d:	89 d8                	mov    eax,ebx
c000413f:	e8 97 f1 ff ff       	call   c00032db <create_chain>
c0004144:	85 c0                	test   eax,eax
c0004146:	75 09                	jne    c0004151 <f_write+0x16a>
c0004148:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000414c:	e9 c0 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004151:	83 f8 01             	cmp    eax,0x1
c0004154:	75 0e                	jne    c0004164 <f_write+0x17d>
c0004156:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000415a:	bd 02 00 00 00       	mov    ebp,0x2
c000415f:	e9 ad 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004164:	83 f8 ff             	cmp    eax,0xffffffff
c0004167:	75 0e                	jne    c0004177 <f_write+0x190>
c0004169:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000416d:	bd 01 00 00 00       	mov    ebp,0x1
c0004172:	e9 9a 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004177:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000417a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000417e:	0f 85 e6 fe ff ff    	jne    c000406a <f_write+0x83>
c0004184:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004187:	e9 de fe ff ff       	jmp    c000406a <f_write+0x83>
c000418c:	6a 01                	push   0x1
c000418e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004191:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004194:	50                   	push   eax
c0004195:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004199:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000419d:	50                   	push   eax
c000419e:	e8 47 db ff ff       	call   c0001cea <disk_write>
c00041a3:	83 c4 10             	add    esp,0x10
c00041a6:	85 c0                	test   eax,eax
c00041a8:	75 bf                	jne    c0004169 <f_write+0x182>
c00041aa:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ae:	e9 c1 fe ff ff       	jmp    c0004074 <f_write+0x8d>
c00041b3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041b6:	74 20                	je     c00041d8 <f_write+0x1f1>
c00041b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041bb:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041be:	76 18                	jbe    c00041d8 <f_write+0x1f1>
c00041c0:	6a 01                	push   0x1
c00041c2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041c5:	57                   	push   edi
c00041c6:	50                   	push   eax
c00041c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041cb:	50                   	push   eax
c00041cc:	e8 03 db ff ff       	call   c0001cd4 <disk_read>
c00041d1:	83 c4 10             	add    esp,0x10
c00041d4:	85 c0                	test   eax,eax
c00041d6:	75 91                	jne    c0004169 <f_write+0x182>
c00041d8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041de:	ba 00 02 00 00       	mov    edx,0x200
c00041e3:	25 ff 01 00 00       	and    eax,0x1ff
c00041e8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041ec:	29 c2                	sub    edx,eax
c00041ee:	39 d6                	cmp    esi,edx
c00041f0:	76 02                	jbe    c00041f4 <f_write+0x20d>
c00041f2:	89 d6                	mov    esi,edx
c00041f4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041f8:	89 f1                	mov    ecx,esi
c00041fa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041fe:	e8 48 db ff ff       	call   c0001d4b <mem_cpy>
c0004203:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004207:	e9 f4 fe ff ff       	jmp    c0004100 <f_write+0x119>
c000420c:	bd 07 00 00 00       	mov    ebp,0x7
c0004211:	83 c4 2c             	add    esp,0x2c
c0004214:	89 e8                	mov    eax,ebp
c0004216:	5b                   	pop    ebx
c0004217:	5e                   	pop    esi
c0004218:	5f                   	pop    edi
c0004219:	5d                   	pop    ebp
c000421a:	c3                   	ret    

c000421b <f_sync>:
c000421b:	56                   	push   esi
c000421c:	53                   	push   ebx
c000421d:	83 ec 14             	sub    esp,0x14
c0004220:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004224:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 6c df ff ff       	call   c000219b <validate>
c000422f:	85 c0                	test   eax,eax
c0004231:	0f 85 93 00 00 00    	jne    c00042ca <f_sync+0xaf>
c0004237:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000423a:	f6 c2 40             	test   dl,0x40
c000423d:	0f 84 87 00 00 00    	je     c00042ca <f_sync+0xaf>
c0004243:	84 d2                	test   dl,dl
c0004245:	79 29                	jns    c0004270 <f_sync+0x55>
c0004247:	6a 01                	push   0x1
c0004249:	8d 43 28             	lea    eax,[ebx+0x28]
c000424c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000424f:	50                   	push   eax
c0004250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004254:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004258:	50                   	push   eax
c0004259:	e8 8c da ff ff       	call   c0001cea <disk_write>
c000425e:	83 c4 10             	add    esp,0x10
c0004261:	89 c2                	mov    edx,eax
c0004263:	b8 01 00 00 00       	mov    eax,0x1
c0004268:	85 d2                	test   edx,edx
c000426a:	75 5e                	jne    c00042ca <f_sync+0xaf>
c000426c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004270:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004277:	e8 c9 df ff ff       	call   c0002245 <move_window>
c000427c:	85 c0                	test   eax,eax
c000427e:	75 4a                	jne    c00042ca <f_sync+0xaf>
c0004280:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004283:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004287:	89 f2                	mov    edx,esi
c0004289:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000428c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000428e:	e8 56 ee ff ff       	call   c00030e9 <st_clust.isra.1>
c0004293:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004296:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004299:	e8 aa da ff ff       	call   c0001d48 <st_dword>
c000429e:	8d 46 16             	lea    eax,[esi+0x16]
c00042a1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042a6:	e8 9d da ff ff       	call   c0001d48 <st_dword>
c00042ab:	8d 46 12             	lea    eax,[esi+0x12]
c00042ae:	31 d2                	xor    edx,edx
c00042b0:	e8 8f da ff ff       	call   c0001d44 <st_word>
c00042b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042c1:	e8 bf e9 ff ff       	call   c0002c85 <sync_fs>
c00042c6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ca:	83 c4 14             	add    esp,0x14
c00042cd:	5b                   	pop    ebx
c00042ce:	5e                   	pop    esi
c00042cf:	c3                   	ret    

c00042d0 <f_close>:
c00042d0:	53                   	push   ebx
c00042d1:	83 ec 24             	sub    esp,0x24
c00042d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042d8:	53                   	push   ebx
c00042d9:	e8 3d ff ff ff       	call   c000421b <f_sync>
c00042de:	83 c4 10             	add    esp,0x10
c00042e1:	85 c0                	test   eax,eax
c00042e3:	75 15                	jne    c00042fa <f_close+0x2a>
c00042e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042e9:	89 d8                	mov    eax,ebx
c00042eb:	e8 ab de ff ff       	call   c000219b <validate>
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 06                	jne    c00042fa <f_close+0x2a>
c00042f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042fa:	83 c4 18             	add    esp,0x18
c00042fd:	5b                   	pop    ebx
c00042fe:	c3                   	ret    

c00042ff <f_lseek>:
c00042ff:	55                   	push   ebp
c0004300:	57                   	push   edi
c0004301:	56                   	push   esi
c0004302:	53                   	push   ebx
c0004303:	83 ec 2c             	sub    esp,0x2c
c0004306:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000430a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000430e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004312:	89 d8                	mov    eax,ebx
c0004314:	e8 82 de ff ff       	call   c000219b <validate>
c0004319:	89 c5                	mov    ebp,eax
c000431b:	85 c0                	test   eax,eax
c000431d:	0f 85 79 01 00 00    	jne    c000449c <f_lseek+0x19d>
c0004323:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004327:	85 ed                	test   ebp,ebp
c0004329:	0f 85 6d 01 00 00    	jne    c000449c <f_lseek+0x19d>
c000432f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004332:	39 f0                	cmp    eax,esi
c0004334:	73 08                	jae    c000433e <f_lseek+0x3f>
c0004336:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433a:	75 02                	jne    c000433e <f_lseek+0x3f>
c000433c:	89 c6                	mov    esi,eax
c000433e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004341:	85 f6                	test   esi,esi
c0004343:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000434a:	75 07                	jne    c0004353 <f_lseek+0x54>
c000434c:	31 f6                	xor    esi,esi
c000434e:	e9 e2 00 00 00       	jmp    c0004435 <f_lseek+0x136>
c0004353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004357:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000435b:	c1 e7 09             	shl    edi,0x9
c000435e:	85 c9                	test   ecx,ecx
c0004360:	74 28                	je     c000438a <f_lseek+0x8b>
c0004362:	49                   	dec    ecx
c0004363:	31 d2                	xor    edx,edx
c0004365:	8d 46 ff             	lea    eax,[esi-0x1]
c0004368:	f7 f7                	div    edi
c000436a:	31 d2                	xor    edx,edx
c000436c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004370:	89 c8                	mov    eax,ecx
c0004372:	f7 f7                	div    edi
c0004374:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004378:	72 10                	jb     c000438a <f_lseek+0x8b>
c000437a:	89 f8                	mov    eax,edi
c000437c:	f7 d8                	neg    eax
c000437e:	21 c1                	and    ecx,eax
c0004380:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004383:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004386:	29 ce                	sub    esi,ecx
c0004388:	eb 3c                	jmp    c00043c6 <f_lseek+0xc7>
c000438a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000438d:	85 c0                	test   eax,eax
c000438f:	75 32                	jne    c00043c3 <f_lseek+0xc4>
c0004391:	31 d2                	xor    edx,edx
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 41 ef ff ff       	call   c00032db <create_chain>
c000439a:	83 f8 01             	cmp    eax,0x1
c000439d:	75 0e                	jne    c00043ad <f_lseek+0xae>
c000439f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043a3:	bd 02 00 00 00       	mov    ebp,0x2
c00043a8:	e9 ef 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043ad:	83 f8 ff             	cmp    eax,0xffffffff
c00043b0:	75 0e                	jne    c00043c0 <f_lseek+0xc1>
c00043b2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043b6:	bd 01 00 00 00       	mov    ebp,0x1
c00043bb:	e9 dc 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043c0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043c6:	85 c0                	test   eax,eax
c00043c8:	74 82                	je     c000434c <f_lseek+0x4d>
c00043ca:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043cd:	39 fe                	cmp    esi,edi
c00043cf:	76 3d                	jbe    c000440e <f_lseek+0x10f>
c00043d1:	01 fa                	add    edx,edi
c00043d3:	29 fe                	sub    esi,edi
c00043d5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043d8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043dc:	89 c2                	mov    edx,eax
c00043de:	74 0d                	je     c00043ed <f_lseek+0xee>
c00043e0:	89 d8                	mov    eax,ebx
c00043e2:	e8 f4 ee ff ff       	call   c00032db <create_chain>
c00043e7:	85 c0                	test   eax,eax
c00043e9:	75 09                	jne    c00043f4 <f_lseek+0xf5>
c00043eb:	eb 1f                	jmp    c000440c <f_lseek+0x10d>
c00043ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043ef:	e8 1d ed ff ff       	call   c0003111 <get_fat.isra.2>
c00043f4:	83 f8 ff             	cmp    eax,0xffffffff
c00043f7:	74 b9                	je     c00043b2 <f_lseek+0xb3>
c00043f9:	83 f8 01             	cmp    eax,0x1
c00043fc:	76 a1                	jbe    c000439f <f_lseek+0xa0>
c00043fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004402:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004405:	76 98                	jbe    c000439f <f_lseek+0xa0>
c0004407:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000440a:	eb be                	jmp    c00043ca <f_lseek+0xcb>
c000440c:	31 f6                	xor    esi,esi
c000440e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004411:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004417:	0f 84 2f ff ff ff    	je     c000434c <f_lseek+0x4d>
c000441d:	89 c2                	mov    edx,eax
c000441f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004423:	e8 3d db ff ff       	call   c0001f65 <clst2sect>
c0004428:	85 c0                	test   eax,eax
c000442a:	0f 84 6f ff ff ff    	je     c000439f <f_lseek+0xa0>
c0004430:	c1 ee 09             	shr    esi,0x9
c0004433:	01 c6                	add    esi,eax
c0004435:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004438:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000443b:	76 07                	jbe    c0004444 <f_lseek+0x145>
c000443d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004440:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004444:	a9 ff 01 00 00       	test   eax,0x1ff
c0004449:	74 51                	je     c000449c <f_lseek+0x19d>
c000444b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000444e:	39 f0                	cmp    eax,esi
c0004450:	74 4a                	je     c000449c <f_lseek+0x19d>
c0004452:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004455:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004459:	79 21                	jns    c000447c <f_lseek+0x17d>
c000445b:	6a 01                	push   0x1
c000445d:	50                   	push   eax
c000445e:	57                   	push   edi
c000445f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004463:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004467:	50                   	push   eax
c0004468:	e8 7d d8 ff ff       	call   c0001cea <disk_write>
c000446d:	83 c4 10             	add    esp,0x10
c0004470:	85 c0                	test   eax,eax
c0004472:	0f 85 3a ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004478:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000447c:	6a 01                	push   0x1
c000447e:	56                   	push   esi
c000447f:	57                   	push   edi
c0004480:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004484:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004488:	50                   	push   eax
c0004489:	e8 46 d8 ff ff       	call   c0001cd4 <disk_read>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	85 c0                	test   eax,eax
c0004493:	0f 85 19 ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004499:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000449c:	83 c4 2c             	add    esp,0x2c
c000449f:	89 e8                	mov    eax,ebp
c00044a1:	5b                   	pop    ebx
c00044a2:	5e                   	pop    esi
c00044a3:	5f                   	pop    edi
c00044a4:	5d                   	pop    ebp
c00044a5:	c3                   	ret    

c00044a6 <f_opendir>:
c00044a6:	56                   	push   esi
c00044a7:	b8 09 00 00 00       	mov    eax,0x9
c00044ac:	53                   	push   ebx
c00044ad:	83 ec 24             	sub    esp,0x24
c00044b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044b4:	85 db                	test   ebx,ebx
c00044b6:	0f 84 af 00 00 00    	je     c000456b <f_opendir+0xc5>
c00044bc:	31 c9                	xor    ecx,ecx
c00044be:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044c2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044c6:	e8 cd de ff ff       	call   c0002398 <mount_volume>
c00044cb:	85 c0                	test   eax,eax
c00044cd:	0f 85 92 00 00 00    	jne    c0004565 <f_opendir+0xbf>
c00044d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d7:	83 ec 0c             	sub    esp,0xc
c00044da:	89 03                	mov    DWORD PTR [ebx],eax
c00044dc:	68 00 02 00 00       	push   0x200
c00044e1:	e8 86 15 00 00       	call   c0005a6c <ff_memalloc>
c00044e6:	83 c4 10             	add    esp,0x10
c00044e9:	89 c6                	mov    esi,eax
c00044eb:	b8 11 00 00 00       	mov    eax,0x11
c00044f0:	85 f6                	test   esi,esi
c00044f2:	74 77                	je     c000456b <f_opendir+0xc5>
c00044f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044fc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 9c f3 ff ff       	call   c00038a2 <follow_path>
c0004506:	85 c0                	test   eax,eax
c0004508:	75 37                	jne    c0004541 <f_opendir+0x9b>
c000450a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000450e:	78 1c                	js     c000452c <f_opendir+0x86>
c0004510:	b8 05 00 00 00       	mov    eax,0x5
c0004515:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004519:	74 26                	je     c0004541 <f_opendir+0x9b>
c000451b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000451e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004522:	8a 00                	mov    al,BYTE PTR [eax]
c0004524:	e8 97 eb ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004529:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000452c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004530:	31 d2                	xor    edx,edx
c0004532:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004536:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000453a:	89 d8                	mov    eax,ebx
c000453c:	e8 d2 ec ff ff       	call   c0003213 <dir_sdi>
c0004541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004545:	83 ec 0c             	sub    esp,0xc
c0004548:	56                   	push   esi
c0004549:	e8 36 15 00 00       	call   c0005a84 <ff_memfree>
c000454e:	83 c4 10             	add    esp,0x10
c0004551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004555:	83 f8 04             	cmp    eax,0x4
c0004558:	74 06                	je     c0004560 <f_opendir+0xba>
c000455a:	85 c0                	test   eax,eax
c000455c:	74 0d                	je     c000456b <f_opendir+0xc5>
c000455e:	eb 05                	jmp    c0004565 <f_opendir+0xbf>
c0004560:	b8 05 00 00 00       	mov    eax,0x5
c0004565:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000456b:	83 c4 24             	add    esp,0x24
c000456e:	5b                   	pop    ebx
c000456f:	5e                   	pop    esi
c0004570:	c3                   	ret    

c0004571 <f_closedir>:
c0004571:	53                   	push   ebx
c0004572:	83 ec 18             	sub    esp,0x18
c0004575:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004579:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000457d:	89 d8                	mov    eax,ebx
c000457f:	e8 17 dc ff ff       	call   c000219b <validate>
c0004584:	85 c0                	test   eax,eax
c0004586:	75 06                	jne    c000458e <f_closedir+0x1d>
c0004588:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458e:	83 c4 18             	add    esp,0x18
c0004591:	5b                   	pop    ebx
c0004592:	c3                   	ret    

c0004593 <f_readdir>:
c0004593:	57                   	push   edi
c0004594:	56                   	push   esi
c0004595:	53                   	push   ebx
c0004596:	83 ec 20             	sub    esp,0x20
c0004599:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000459d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045a1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045a5:	89 d8                	mov    eax,ebx
c00045a7:	e8 ef db ff ff       	call   c000219b <validate>
c00045ac:	85 c0                	test   eax,eax
c00045ae:	75 6e                	jne    c000461e <f_readdir+0x8b>
c00045b0:	85 ff                	test   edi,edi
c00045b2:	75 0b                	jne    c00045bf <f_readdir+0x2c>
c00045b4:	31 d2                	xor    edx,edx
c00045b6:	89 d8                	mov    eax,ebx
c00045b8:	e8 56 ec ff ff       	call   c0003213 <dir_sdi>
c00045bd:	eb 5f                	jmp    c000461e <f_readdir+0x8b>
c00045bf:	83 ec 0c             	sub    esp,0xc
c00045c2:	68 00 02 00 00       	push   0x200
c00045c7:	e8 a0 14 00 00       	call   c0005a6c <ff_memalloc>
c00045cc:	83 c4 10             	add    esp,0x10
c00045cf:	89 c6                	mov    esi,eax
c00045d1:	b8 11 00 00 00       	mov    eax,0x11
c00045d6:	85 f6                	test   esi,esi
c00045d8:	74 44                	je     c000461e <f_readdir+0x8b>
c00045da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045de:	31 d2                	xor    edx,edx
c00045e0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 1a f0 ff ff       	call   c0003604 <dir_read>
c00045ea:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045ef:	75 19                	jne    c000460a <f_readdir+0x77>
c00045f1:	89 fa                	mov    edx,edi
c00045f3:	89 d8                	mov    eax,ebx
c00045f5:	e8 e2 e8 ff ff       	call   c0002edc <get_fileinfo>
c00045fa:	31 d2                	xor    edx,edx
c00045fc:	89 d8                	mov    eax,ebx
c00045fe:	e8 9b ee ff ff       	call   c000349e <dir_next>
c0004603:	83 f8 04             	cmp    eax,0x4
c0004606:	75 02                	jne    c000460a <f_readdir+0x77>
c0004608:	31 c0                	xor    eax,eax
c000460a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000460e:	83 ec 0c             	sub    esp,0xc
c0004611:	56                   	push   esi
c0004612:	e8 6d 14 00 00       	call   c0005a84 <ff_memfree>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461e:	83 c4 20             	add    esp,0x20
c0004621:	5b                   	pop    ebx
c0004622:	5e                   	pop    esi
c0004623:	5f                   	pop    edi
c0004624:	c3                   	ret    

c0004625 <f_stat>:
c0004625:	57                   	push   edi
c0004626:	31 c9                	xor    ecx,ecx
c0004628:	56                   	push   esi
c0004629:	53                   	push   ebx
c000462a:	83 ec 30             	sub    esp,0x30
c000462d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004631:	89 e2                	mov    edx,esp
c0004633:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004637:	e8 5c dd ff ff       	call   c0002398 <mount_volume>
c000463c:	89 c3                	mov    ebx,eax
c000463e:	85 c0                	test   eax,eax
c0004640:	75 59                	jne    c000469b <f_stat+0x76>
c0004642:	83 ec 0c             	sub    esp,0xc
c0004645:	bb 11 00 00 00       	mov    ebx,0x11
c000464a:	68 00 02 00 00       	push   0x200
c000464f:	e8 18 14 00 00       	call   c0005a6c <ff_memalloc>
c0004654:	83 c4 10             	add    esp,0x10
c0004657:	89 c6                	mov    esi,eax
c0004659:	85 c0                	test   eax,eax
c000465b:	74 3e                	je     c000469b <f_stat+0x76>
c000465d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004660:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004664:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004667:	89 e0                	mov    eax,esp
c0004669:	e8 34 f2 ff ff       	call   c00038a2 <follow_path>
c000466e:	89 c3                	mov    ebx,eax
c0004670:	85 c0                	test   eax,eax
c0004672:	75 1b                	jne    c000468f <f_stat+0x6a>
c0004674:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004679:	78 0f                	js     c000468a <f_stat+0x65>
c000467b:	85 ff                	test   edi,edi
c000467d:	74 10                	je     c000468f <f_stat+0x6a>
c000467f:	89 fa                	mov    edx,edi
c0004681:	89 e0                	mov    eax,esp
c0004683:	e8 54 e8 ff ff       	call   c0002edc <get_fileinfo>
c0004688:	eb 05                	jmp    c000468f <f_stat+0x6a>
c000468a:	bb 06 00 00 00       	mov    ebx,0x6
c000468f:	83 ec 0c             	sub    esp,0xc
c0004692:	56                   	push   esi
c0004693:	e8 ec 13 00 00       	call   c0005a84 <ff_memfree>
c0004698:	83 c4 10             	add    esp,0x10
c000469b:	83 c4 30             	add    esp,0x30
c000469e:	89 d8                	mov    eax,ebx
c00046a0:	5b                   	pop    ebx
c00046a1:	5e                   	pop    esi
c00046a2:	5f                   	pop    edi
c00046a3:	c3                   	ret    

c00046a4 <f_getfree>:
c00046a4:	55                   	push   ebp
c00046a5:	31 c9                	xor    ecx,ecx
c00046a7:	57                   	push   edi
c00046a8:	56                   	push   esi
c00046a9:	53                   	push   ebx
c00046aa:	83 ec 2c             	sub    esp,0x2c
c00046ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046b1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046b5:	e8 de dc ff ff       	call   c0002398 <mount_volume>
c00046ba:	89 c7                	mov    edi,eax
c00046bc:	85 c0                	test   eax,eax
c00046be:	0f 85 d8 00 00 00    	jne    c000479c <f_getfree+0xf8>
c00046c4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046cc:	89 30                	mov    DWORD PTR [eax],esi
c00046ce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046d1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046d4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046d7:	39 d0                	cmp    eax,edx
c00046d9:	77 0b                	ja     c00046e6 <f_getfree+0x42>
c00046db:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046df:	89 01                	mov    DWORD PTR [ecx],eax
c00046e1:	e9 b6 00 00 00       	jmp    c000479c <f_getfree+0xf8>
c00046e6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046e9:	75 29                	jne    c0004714 <f_getfree+0x70>
c00046eb:	bd 02 00 00 00       	mov    ebp,0x2
c00046f0:	31 db                	xor    ebx,ebx
c00046f2:	89 ea                	mov    edx,ebp
c00046f4:	89 f0                	mov    eax,esi
c00046f6:	e8 16 ea ff ff       	call   c0003111 <get_fat.isra.2>
c00046fb:	83 f8 ff             	cmp    eax,0xffffffff
c00046fe:	74 7b                	je     c000477b <f_getfree+0xd7>
c0004700:	83 f8 01             	cmp    eax,0x1
c0004703:	74 7d                	je     c0004782 <f_getfree+0xde>
c0004705:	83 d3 00             	adc    ebx,0x0
c0004708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000470c:	45                   	inc    ebp
c000470d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004710:	77 e0                	ja     c00046f2 <f_getfree+0x4e>
c0004712:	eb 77                	jmp    c000478b <f_getfree+0xe7>
c0004714:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004717:	31 db                	xor    ebx,ebx
c0004719:	31 f6                	xor    esi,esi
c000471b:	85 f6                	test   esi,esi
c000471d:	75 18                	jne    c0004737 <f_getfree+0x93>
c000471f:	8d 42 01             	lea    eax,[edx+0x1]
c0004722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004726:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472a:	e8 16 db ff ff       	call   c0002245 <move_window>
c000472f:	85 c0                	test   eax,eax
c0004731:	75 56                	jne    c0004789 <f_getfree+0xe5>
c0004733:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004737:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000473b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000473f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004743:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004746:	75 11                	jne    c0004759 <f_getfree+0xb5>
c0004748:	e8 d2 d5 ff ff       	call   c0001d1f <ld_word>
c000474d:	66 83 f8 01          	cmp    ax,0x1
c0004751:	83 d3 00             	adc    ebx,0x0
c0004754:	83 c6 02             	add    esi,0x2
c0004757:	eb 13                	jmp    c000476c <f_getfree+0xc8>
c0004759:	e8 ce d5 ff ff       	call   c0001d2c <ld_dword>
c000475e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004763:	83 f8 01             	cmp    eax,0x1
c0004766:	83 d3 00             	adc    ebx,0x0
c0004769:	83 c6 04             	add    esi,0x4
c000476c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004772:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004776:	4d                   	dec    ebp
c0004777:	75 a2                	jne    c000471b <f_getfree+0x77>
c0004779:	eb 10                	jmp    c000478b <f_getfree+0xe7>
c000477b:	bf 01 00 00 00       	mov    edi,0x1
c0004780:	eb 09                	jmp    c000478b <f_getfree+0xe7>
c0004782:	bf 02 00 00 00       	mov    edi,0x2
c0004787:	eb 02                	jmp    c000478b <f_getfree+0xe7>
c0004789:	89 c7                	mov    edi,eax
c000478b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000478f:	89 18                	mov    DWORD PTR [eax],ebx
c0004791:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004795:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004798:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000479c:	83 c4 2c             	add    esp,0x2c
c000479f:	89 f8                	mov    eax,edi
c00047a1:	5b                   	pop    ebx
c00047a2:	5e                   	pop    esi
c00047a3:	5f                   	pop    edi
c00047a4:	5d                   	pop    ebp
c00047a5:	c3                   	ret    

c00047a6 <f_truncate>:
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 14             	sub    esp,0x14
c00047ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047af:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047b3:	89 d8                	mov    eax,ebx
c00047b5:	e8 e1 d9 ff ff       	call   c000219b <validate>
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	0f 85 be 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047c4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047c8:	85 f6                	test   esi,esi
c00047ca:	0f 85 b2 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047d0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047d4:	0f 84 a3 00 00 00    	je     c000487d <f_truncate+0xd7>
c00047da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047e0:	0f 83 9c 00 00 00    	jae    c0004882 <f_truncate+0xdc>
c00047e6:	85 c0                	test   eax,eax
c00047e8:	75 15                	jne    c00047ff <f_truncate+0x59>
c00047ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047ed:	31 c9                	xor    ecx,ecx
c00047ef:	89 d8                	mov    eax,ebx
c00047f1:	e8 1f ec ff ff       	call   c0003415 <remove_chain>
c00047f6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047fd:	eb 35                	jmp    c0004834 <f_truncate+0x8e>
c00047ff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004802:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004804:	e8 08 e9 ff ff       	call   c0003111 <get_fat.isra.2>
c0004809:	89 c2                	mov    edx,eax
c000480b:	b8 01 00 00 00       	mov    eax,0x1
c0004810:	83 fa ff             	cmp    edx,0xffffffff
c0004813:	74 1f                	je     c0004834 <f_truncate+0x8e>
c0004815:	b8 02 00 00 00       	mov    eax,0x2
c000481a:	83 fa 01             	cmp    edx,0x1
c000481d:	74 15                	je     c0004834 <f_truncate+0x8e>
c000481f:	31 c0                	xor    eax,eax
c0004821:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004825:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004828:	76 0a                	jbe    c0004834 <f_truncate+0x8e>
c000482a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000482d:	89 d8                	mov    eax,ebx
c000482f:	e8 e1 eb ff ff       	call   c0003415 <remove_chain>
c0004834:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004837:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000483a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000483d:	83 ca 40             	or     edx,0x40
c0004840:	85 c0                	test   eax,eax
c0004842:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004845:	75 2f                	jne    c0004876 <f_truncate+0xd0>
c0004847:	84 d2                	test   dl,dl
c0004849:	79 37                	jns    c0004882 <f_truncate+0xdc>
c000484b:	6a 01                	push   0x1
c000484d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004850:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004853:	50                   	push   eax
c0004854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004858:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000485c:	50                   	push   eax
c000485d:	e8 88 d4 ff ff       	call   c0001cea <disk_write>
c0004862:	83 c4 10             	add    esp,0x10
c0004865:	85 c0                	test   eax,eax
c0004867:	75 08                	jne    c0004871 <f_truncate+0xcb>
c0004869:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000486d:	31 f6                	xor    esi,esi
c000486f:	eb 11                	jmp    c0004882 <f_truncate+0xdc>
c0004871:	b8 01 00 00 00       	mov    eax,0x1
c0004876:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004879:	89 c6                	mov    esi,eax
c000487b:	eb 05                	jmp    c0004882 <f_truncate+0xdc>
c000487d:	be 07 00 00 00       	mov    esi,0x7
c0004882:	89 f0                	mov    eax,esi
c0004884:	83 c4 14             	add    esp,0x14
c0004887:	5b                   	pop    ebx
c0004888:	5e                   	pop    esi
c0004889:	c3                   	ret    

c000488a <f_unlink>:
c000488a:	55                   	push   ebp
c000488b:	b9 02 00 00 00       	mov    ecx,0x2
c0004890:	57                   	push   edi
c0004891:	56                   	push   esi
c0004892:	53                   	push   ebx
c0004893:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004899:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000489d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048a4:	e8 ef da ff ff       	call   c0002398 <mount_volume>
c00048a9:	85 c0                	test   eax,eax
c00048ab:	0f 85 f0 00 00 00    	jne    c00049a1 <f_unlink+0x117>
c00048b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b5:	83 ec 0c             	sub    esp,0xc
c00048b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048bc:	68 00 02 00 00       	push   0x200
c00048c1:	e8 a6 11 00 00       	call   c0005a6c <ff_memalloc>
c00048c6:	83 c4 10             	add    esp,0x10
c00048c9:	89 c3                	mov    ebx,eax
c00048cb:	b8 11 00 00 00       	mov    eax,0x11
c00048d0:	85 db                	test   ebx,ebx
c00048d2:	0f 84 c9 00 00 00    	je     c00049a1 <f_unlink+0x117>
c00048d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048dc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048e3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048ea:	e8 b3 ef ff ff       	call   c00038a2 <follow_path>
c00048ef:	85 c0                	test   eax,eax
c00048f1:	0f 85 96 00 00 00    	jne    c000498d <f_unlink+0x103>
c00048f7:	b8 06 00 00 00       	mov    eax,0x6
c00048fc:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004901:	0f 88 86 00 00 00    	js     c000498d <f_unlink+0x103>
c0004907:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000490c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004912:	74 07                	je     c000491b <f_unlink+0x91>
c0004914:	b8 07 00 00 00       	mov    eax,0x7
c0004919:	eb 72                	jmp    c000498d <f_unlink+0x103>
c000491b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000491f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004923:	8a 07                	mov    al,BYTE PTR [edi]
c0004925:	e8 96 e7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000492a:	83 e5 10             	and    ebp,0x10
c000492d:	89 c6                	mov    esi,eax
c000492f:	75 0f                	jne    c0004940 <f_unlink+0xb6>
c0004931:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004935:	e8 e7 ed ff ff       	call   c0003721 <dir_remove>
c000493a:	85 c0                	test   eax,eax
c000493c:	74 2f                	je     c000496d <f_unlink+0xe3>
c000493e:	eb 4d                	jmp    c000498d <f_unlink+0x103>
c0004940:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004944:	31 d2                	xor    edx,edx
c0004946:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000494a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494e:	e8 c0 e8 ff ff       	call   c0003213 <dir_sdi>
c0004953:	85 c0                	test   eax,eax
c0004955:	75 36                	jne    c000498d <f_unlink+0x103>
c0004957:	31 d2                	xor    edx,edx
c0004959:	8d 44 24 50          	lea    eax,[esp+0x50]
c000495d:	e8 a2 ec ff ff       	call   c0003604 <dir_read>
c0004962:	85 c0                	test   eax,eax
c0004964:	74 ae                	je     c0004914 <f_unlink+0x8a>
c0004966:	83 f8 04             	cmp    eax,0x4
c0004969:	75 22                	jne    c000498d <f_unlink+0x103>
c000496b:	eb c4                	jmp    c0004931 <f_unlink+0xa7>
c000496d:	85 f6                	test   esi,esi
c000496f:	75 0b                	jne    c000497c <f_unlink+0xf2>
c0004971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004975:	e8 0b e3 ff ff       	call   c0002c85 <sync_fs>
c000497a:	eb 11                	jmp    c000498d <f_unlink+0x103>
c000497c:	31 c9                	xor    ecx,ecx
c000497e:	89 f2                	mov    edx,esi
c0004980:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004984:	e8 8c ea ff ff       	call   c0003415 <remove_chain>
c0004989:	85 c0                	test   eax,eax
c000498b:	74 e4                	je     c0004971 <f_unlink+0xe7>
c000498d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004991:	83 ec 0c             	sub    esp,0xc
c0004994:	53                   	push   ebx
c0004995:	e8 ea 10 00 00       	call   c0005a84 <ff_memfree>
c000499a:	83 c4 10             	add    esp,0x10
c000499d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049a1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049a7:	5b                   	pop    ebx
c00049a8:	5e                   	pop    esi
c00049a9:	5f                   	pop    edi
c00049aa:	5d                   	pop    ebp
c00049ab:	c3                   	ret    

c00049ac <f_mkdir>:
c00049ac:	57                   	push   edi
c00049ad:	b9 02 00 00 00       	mov    ecx,0x2
c00049b2:	56                   	push   esi
c00049b3:	53                   	push   ebx
c00049b4:	83 ec 50             	sub    esp,0x50
c00049b7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049bb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049bf:	e8 d4 d9 ff ff       	call   c0002398 <mount_volume>
c00049c4:	89 c3                	mov    ebx,eax
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 70 01 00 00    	jne    c0004b3e <f_mkdir+0x192>
c00049ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049d2:	bb 11 00 00 00       	mov    ebx,0x11
c00049d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	68 00 02 00 00       	push   0x200
c00049e3:	e8 84 10 00 00       	call   c0005a6c <ff_memalloc>
c00049e8:	83 c4 10             	add    esp,0x10
c00049eb:	89 c7                	mov    edi,eax
c00049ed:	85 c0                	test   eax,eax
c00049ef:	0f 84 49 01 00 00    	je     c0004b3e <f_mkdir+0x192>
c00049f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a00:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a04:	e8 99 ee ff ff       	call   c00038a2 <follow_path>
c0004a09:	89 c3                	mov    ebx,eax
c0004a0b:	85 c0                	test   eax,eax
c0004a0d:	74 3e                	je     c0004a4d <f_mkdir+0xa1>
c0004a0f:	83 f8 04             	cmp    eax,0x4
c0004a12:	75 3e                	jne    c0004a52 <f_mkdir+0xa6>
c0004a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a18:	31 d2                	xor    edx,edx
c0004a1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a22:	e8 b4 e8 ff ff       	call   c00032db <create_chain>
c0004a27:	89 c6                	mov    esi,eax
c0004a29:	85 c0                	test   eax,eax
c0004a2b:	74 0c                	je     c0004a39 <f_mkdir+0x8d>
c0004a2d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a32:	83 f8 01             	cmp    eax,0x1
c0004a35:	74 07                	je     c0004a3e <f_mkdir+0x92>
c0004a37:	eb 2a                	jmp    c0004a63 <f_mkdir+0xb7>
c0004a39:	bb 07 00 00 00       	mov    ebx,0x7
c0004a3e:	31 c9                	xor    ecx,ecx
c0004a40:	89 f2                	mov    edx,esi
c0004a42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a46:	e8 ca e9 ff ff       	call   c0003415 <remove_chain>
c0004a4b:	eb 05                	jmp    c0004a52 <f_mkdir+0xa6>
c0004a4d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a52:	83 ec 0c             	sub    esp,0xc
c0004a55:	57                   	push   edi
c0004a56:	e8 29 10 00 00       	call   c0005a84 <ff_memfree>
c0004a5b:	83 c4 10             	add    esp,0x10
c0004a5e:	e9 db 00 00 00       	jmp    c0004b3e <f_mkdir+0x192>
c0004a63:	bb 01 00 00 00       	mov    ebx,0x1
c0004a68:	83 f8 ff             	cmp    eax,0xffffffff
c0004a6b:	74 d1                	je     c0004a3e <f_mkdir+0x92>
c0004a6d:	89 f2                	mov    edx,esi
c0004a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a73:	e8 73 dd ff ff       	call   c00027eb <dir_clear>
c0004a78:	89 c3                	mov    ebx,eax
c0004a7a:	85 c0                	test   eax,eax
c0004a7c:	75 c0                	jne    c0004a3e <f_mkdir+0x92>
c0004a7e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a87:	ba 20 00 00 00       	mov    edx,0x20
c0004a8c:	83 c0 34             	add    eax,0x34
c0004a8f:	e8 cc d2 ff ff       	call   c0001d60 <mem_set>
c0004a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a98:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a9d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004aa1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004aa5:	83 c0 4a             	add    eax,0x4a
c0004aa8:	e8 9b d2 ff ff       	call   c0001d48 <st_dword>
c0004aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab1:	89 f1                	mov    ecx,esi
c0004ab3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab6:	e8 2e e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004abb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004abf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ac4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ac7:	83 c0 54             	add    eax,0x54
c0004aca:	e8 7c d2 ff ff       	call   c0001d4b <mem_cpy>
c0004acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ad7:	8d 50 54             	lea    edx,[eax+0x54]
c0004ada:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ade:	e8 06 e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004ae3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004aeb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aef:	e8 42 ee ff ff       	call   c0003936 <dir_register>
c0004af4:	89 c3                	mov    ebx,eax
c0004af6:	85 c0                	test   eax,eax
c0004af8:	0f 85 40 ff ff ff    	jne    c0004a3e <f_mkdir+0x92>
c0004afe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b07:	83 c0 16             	add    eax,0x16
c0004b0a:	e8 39 d2 ff ff       	call   c0001d48 <st_dword>
c0004b0f:	89 f1                	mov    ecx,esi
c0004b11:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b19:	e8 cb e5 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b2a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b32:	e8 4e e1 ff ff       	call   c0002c85 <sync_fs>
c0004b37:	89 c3                	mov    ebx,eax
c0004b39:	e9 14 ff ff ff       	jmp    c0004a52 <f_mkdir+0xa6>
c0004b3e:	83 c4 50             	add    esp,0x50
c0004b41:	89 d8                	mov    eax,ebx
c0004b43:	5b                   	pop    ebx
c0004b44:	5e                   	pop    esi
c0004b45:	5f                   	pop    edi
c0004b46:	c3                   	ret    

c0004b47 <f_rename>:
c0004b47:	57                   	push   edi
c0004b48:	56                   	push   esi
c0004b49:	53                   	push   ebx
c0004b4a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b50:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b57:	e8 f2 d5 ff ff       	call   c000214e <get_ldnumber>
c0004b5c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b65:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b6c:	e8 27 d8 ff ff       	call   c0002398 <mount_volume>
c0004b71:	85 c0                	test   eax,eax
c0004b73:	0f 85 7a 01 00 00    	jne    c0004cf3 <f_rename+0x1ac>
c0004b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b7d:	83 ec 0c             	sub    esp,0xc
c0004b80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b84:	68 00 02 00 00       	push   0x200
c0004b89:	e8 de 0e 00 00       	call   c0005a6c <ff_memalloc>
c0004b8e:	83 c4 10             	add    esp,0x10
c0004b91:	89 c6                	mov    esi,eax
c0004b93:	b8 11 00 00 00       	mov    eax,0x11
c0004b98:	85 f6                	test   esi,esi
c0004b9a:	0f 84 53 01 00 00    	je     c0004cf3 <f_rename+0x1ac>
c0004ba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ba4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bae:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bb2:	e8 eb ec ff ff       	call   c00038a2 <follow_path>
c0004bb7:	85 c0                	test   eax,eax
c0004bb9:	0f 85 20 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bbf:	b8 06 00 00 00       	mov    eax,0x6
c0004bc4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bc9:	0f 85 10 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bd4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bd8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bdc:	e8 6a d1 ff ff       	call   c0001d4b <mem_cpy>
c0004be1:	b9 30 00 00 00       	mov    ecx,0x30
c0004be6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 58 d1 ff ff       	call   c0001d4b <mem_cpy>
c0004bf3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bfa:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bfe:	e8 9f ec ff ff       	call   c00038a2 <follow_path>
c0004c03:	85 c0                	test   eax,eax
c0004c05:	75 20                	jne    c0004c27 <f_rename+0xe0>
c0004c07:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c0b:	b8 08 00 00 00       	mov    eax,0x8
c0004c10:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c14:	0f 85 c5 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c1a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c1e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c25:	eb 03                	jmp    c0004c2a <f_rename+0xe3>
c0004c27:	83 f8 04             	cmp    eax,0x4
c0004c2a:	0f 85 af 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c30:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c34:	e8 fd ec ff ff       	call   c0003936 <dir_register>
c0004c39:	85 c0                	test   eax,eax
c0004c3b:	0f 85 9e 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c41:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c48:	b9 13 00 00 00       	mov    ecx,0x13
c0004c4d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c50:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c54:	e8 f2 d0 ff ff       	call   c0001d4b <mem_cpy>
c0004c59:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c5d:	a8 10                	test   al,0x10
c0004c5f:	75 03                	jne    c0004c64 <f_rename+0x11d>
c0004c61:	83 c8 20             	or     eax,0x20
c0004c64:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c6b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c6f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c73:	74 54                	je     c0004cc9 <f_rename+0x182>
c0004c75:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c79:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c7d:	74 4a                	je     c0004cc9 <f_rename+0x182>
c0004c7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c83:	89 da                	mov    edx,ebx
c0004c85:	8a 07                	mov    al,BYTE PTR [edi]
c0004c87:	e8 34 e4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004c8c:	89 c2                	mov    edx,eax
c0004c8e:	89 f8                	mov    eax,edi
c0004c90:	e8 d0 d2 ff ff       	call   c0001f65 <clst2sect>
c0004c95:	89 c2                	mov    edx,eax
c0004c97:	b8 02 00 00 00       	mov    eax,0x2
c0004c9c:	85 d2                	test   edx,edx
c0004c9e:	74 3f                	je     c0004cdf <f_rename+0x198>
c0004ca0:	89 f8                	mov    eax,edi
c0004ca2:	e8 9e d5 ff ff       	call   c0002245 <move_window>
c0004ca7:	85 c0                	test   eax,eax
c0004ca9:	75 34                	jne    c0004cdf <f_rename+0x198>
c0004cab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004caf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cb3:	75 14                	jne    c0004cc9 <f_rename+0x182>
c0004cb5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cb8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cbc:	e8 28 e4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cc5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ccd:	e8 4f ea ff ff       	call   c0003721 <dir_remove>
c0004cd2:	85 c0                	test   eax,eax
c0004cd4:	75 09                	jne    c0004cdf <f_rename+0x198>
c0004cd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cda:	e8 a6 df ff ff       	call   c0002c85 <sync_fs>
c0004cdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce3:	83 ec 0c             	sub    esp,0xc
c0004ce6:	56                   	push   esi
c0004ce7:	e8 98 0d 00 00       	call   c0005a84 <ff_memfree>
c0004cec:	83 c4 10             	add    esp,0x10
c0004cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004cf9:	5b                   	pop    ebx
c0004cfa:	5e                   	pop    esi
c0004cfb:	5f                   	pop    edi
c0004cfc:	c3                   	ret    

c0004cfd <f_chmod>:
c0004cfd:	57                   	push   edi
c0004cfe:	b9 02 00 00 00       	mov    ecx,0x2
c0004d03:	56                   	push   esi
c0004d04:	53                   	push   ebx
c0004d05:	83 ec 50             	sub    esp,0x50
c0004d08:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d0c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 7b d6 ff ff       	call   c0002398 <mount_volume>
c0004d1d:	85 c0                	test   eax,eax
c0004d1f:	75 7e                	jne    c0004d9f <f_chmod+0xa2>
c0004d21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d25:	83 ec 0c             	sub    esp,0xc
c0004d28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d2c:	68 00 02 00 00       	push   0x200
c0004d31:	e8 36 0d 00 00       	call   c0005a6c <ff_memalloc>
c0004d36:	83 c4 10             	add    esp,0x10
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	b8 11 00 00 00       	mov    eax,0x11
c0004d40:	85 f6                	test   esi,esi
c0004d42:	74 5b                	je     c0004d9f <f_chmod+0xa2>
c0004d44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d48:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d4c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d4f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d53:	e8 4a eb ff ff       	call   c00038a2 <follow_path>
c0004d58:	85 c0                	test   eax,eax
c0004d5a:	75 2f                	jne    c0004d8b <f_chmod+0x8e>
c0004d5c:	b8 06 00 00 00       	mov    eax,0x6
c0004d61:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d66:	75 23                	jne    c0004d8b <f_chmod+0x8e>
c0004d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d6c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d6f:	21 fb                	and    ebx,edi
c0004d71:	83 e3 27             	and    ebx,0x27
c0004d74:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d77:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d7e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d86:	e8 fa de ff ff       	call   c0002c85 <sync_fs>
c0004d8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8f:	83 ec 0c             	sub    esp,0xc
c0004d92:	56                   	push   esi
c0004d93:	e8 ec 0c 00 00       	call   c0005a84 <ff_memfree>
c0004d98:	83 c4 10             	add    esp,0x10
c0004d9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d9f:	83 c4 50             	add    esp,0x50
c0004da2:	5b                   	pop    ebx
c0004da3:	5e                   	pop    esi
c0004da4:	5f                   	pop    edi
c0004da5:	c3                   	ret    

c0004da6 <f_utime>:
c0004da6:	56                   	push   esi
c0004da7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dac:	53                   	push   ebx
c0004dad:	83 ec 54             	sub    esp,0x54
c0004db0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004db4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004db8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dbc:	e8 d7 d5 ff ff       	call   c0002398 <mount_volume>
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	0f 85 85 00 00 00    	jne    c0004e4e <f_utime+0xa8>
c0004dc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dd4:	68 00 02 00 00       	push   0x200
c0004dd9:	e8 8e 0c 00 00       	call   c0005a6c <ff_memalloc>
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	89 c3                	mov    ebx,eax
c0004de3:	b8 11 00 00 00       	mov    eax,0x11
c0004de8:	85 db                	test   ebx,ebx
c0004dea:	74 62                	je     c0004e4e <f_utime+0xa8>
c0004dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004df0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004df4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004df7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004dfb:	e8 a2 ea ff ff       	call   c00038a2 <follow_path>
c0004e00:	85 c0                	test   eax,eax
c0004e02:	75 36                	jne    c0004e3a <f_utime+0x94>
c0004e04:	b8 06 00 00 00       	mov    eax,0x6
c0004e09:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e0e:	75 2a                	jne    c0004e3a <f_utime+0x94>
c0004e10:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e14:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e18:	c1 e2 10             	shl    edx,0x10
c0004e1b:	09 c2                	or     edx,eax
c0004e1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e21:	83 c0 16             	add    eax,0x16
c0004e24:	e8 1f cf ff ff       	call   c0001d48 <st_dword>
c0004e29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e35:	e8 4b de ff ff       	call   c0002c85 <sync_fs>
c0004e3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e3e:	83 ec 0c             	sub    esp,0xc
c0004e41:	53                   	push   ebx
c0004e42:	e8 3d 0c 00 00       	call   c0005a84 <ff_memfree>
c0004e47:	83 c4 10             	add    esp,0x10
c0004e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e4e:	83 c4 54             	add    esp,0x54
c0004e51:	5b                   	pop    ebx
c0004e52:	5e                   	pop    esi
c0004e53:	c3                   	ret    

c0004e54 <f_getlabel>:
c0004e54:	55                   	push   ebp
c0004e55:	31 c9                	xor    ecx,ecx
c0004e57:	57                   	push   edi
c0004e58:	56                   	push   esi
c0004e59:	53                   	push   ebx
c0004e5a:	83 ec 5c             	sub    esp,0x5c
c0004e5d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e65:	e8 2e d5 ff ff       	call   c0002398 <mount_volume>
c0004e6a:	89 c6                	mov    esi,eax
c0004e6c:	85 c0                	test   eax,eax
c0004e6e:	0f 85 27 01 00 00    	jne    c0004f9b <f_getlabel+0x147>
c0004e74:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e79:	0f 84 d1 00 00 00    	je     c0004f50 <f_getlabel+0xfc>
c0004e7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e83:	31 d2                	xor    edx,edx
c0004e85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e89:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e91:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e95:	e8 79 e3 ff ff       	call   c0003213 <dir_sdi>
c0004e9a:	85 c0                	test   eax,eax
c0004e9c:	0f 85 a2 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004ea2:	ba 01 00 00 00       	mov    edx,0x1
c0004ea7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eab:	e8 54 e7 ff ff       	call   c0003604 <dir_read>
c0004eb0:	85 c0                	test   eax,eax
c0004eb2:	0f 85 8c 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004eb8:	31 db                	xor    ebx,ebx
c0004eba:	31 c9                	xor    ecx,ecx
c0004ebc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ec0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ec3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ec8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ed1:	e8 ca ce ff ff       	call   c0001da0 <dbc_1st>
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	74 16                	je     c0004ef0 <f_getlabel+0x9c>
c0004eda:	83 ff 0b             	cmp    edi,0xb
c0004edd:	74 11                	je     c0004ef0 <f_getlabel+0x9c>
c0004edf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ee8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004eeb:	c1 e0 08             	shl    eax,0x8
c0004eee:	09 c2                	or     edx,eax
c0004ef0:	0f b7 d2             	movzx  edx,dx
c0004ef3:	50                   	push   eax
c0004ef4:	50                   	push   eax
c0004ef5:	68 b5 01 00 00       	push   0x1b5
c0004efa:	52                   	push   edx
c0004efb:	e8 3c 0c 00 00       	call   c0005b3c <ff_oem2uni>
c0004f00:	83 c4 10             	add    esp,0x10
c0004f03:	66 85 c0             	test   ax,ax
c0004f06:	74 25                	je     c0004f2d <f_getlabel+0xd9>
c0004f08:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f0c:	0f b7 c0             	movzx  eax,ax
c0004f0f:	01 da                	add    edx,ebx
c0004f11:	b9 04 00 00 00       	mov    ecx,0x4
c0004f16:	e8 51 cf ff ff       	call   c0001e6c <put_utf>
c0004f1b:	84 c0                	test   al,al
c0004f1d:	74 0e                	je     c0004f2d <f_getlabel+0xd9>
c0004f1f:	0f b6 c0             	movzx  eax,al
c0004f22:	01 c3                	add    ebx,eax
c0004f24:	83 ff 0b             	cmp    edi,0xb
c0004f27:	74 06                	je     c0004f2f <f_getlabel+0xdb>
c0004f29:	89 f9                	mov    ecx,edi
c0004f2b:	eb 8f                	jmp    c0004ebc <f_getlabel+0x68>
c0004f2d:	31 db                	xor    ebx,ebx
c0004f2f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f33:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f36:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f3a:	74 14                	je     c0004f50 <f_getlabel+0xfc>
c0004f3c:	4b                   	dec    ebx
c0004f3d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f40:	74 f1                	je     c0004f33 <f_getlabel+0xdf>
c0004f42:	eb 0c                	jmp    c0004f50 <f_getlabel+0xfc>
c0004f44:	83 f8 04             	cmp    eax,0x4
c0004f47:	75 50                	jne    c0004f99 <f_getlabel+0x145>
c0004f49:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f50:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f55:	74 44                	je     c0004f9b <f_getlabel+0x147>
c0004f57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f5b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f5e:	e8 e2 d2 ff ff       	call   c0002245 <move_window>
c0004f63:	89 c6                	mov    esi,eax
c0004f65:	85 c0                	test   eax,eax
c0004f67:	75 32                	jne    c0004f9b <f_getlabel+0x147>
c0004f69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f6d:	b8 43 00 00 00       	mov    eax,0x43
c0004f72:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f74:	80 f9 03             	cmp    cl,0x3
c0004f77:	74 0f                	je     c0004f88 <f_getlabel+0x134>
c0004f79:	31 c0                	xor    eax,eax
c0004f7b:	80 f9 04             	cmp    cl,0x4
c0004f7e:	0f 94 c0             	sete   al
c0004f81:	48                   	dec    eax
c0004f82:	83 e0 c3             	and    eax,0xffffffc3
c0004f85:	83 c0 64             	add    eax,0x64
c0004f88:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f8c:	e8 9b cd ff ff       	call   c0001d2c <ld_dword>
c0004f91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f95:	89 07                	mov    DWORD PTR [edi],eax
c0004f97:	eb 02                	jmp    c0004f9b <f_getlabel+0x147>
c0004f99:	89 c6                	mov    esi,eax
c0004f9b:	83 c4 5c             	add    esp,0x5c
c0004f9e:	89 f0                	mov    eax,esi
c0004fa0:	5b                   	pop    ebx
c0004fa1:	5e                   	pop    esi
c0004fa2:	5f                   	pop    edi
c0004fa3:	5d                   	pop    ebp
c0004fa4:	c3                   	ret    

c0004fa5 <f_setlabel>:
c0004fa5:	56                   	push   esi
c0004fa6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fab:	53                   	push   ebx
c0004fac:	83 ec 54             	sub    esp,0x54
c0004faf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fb3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fb7:	e8 dc d3 ff ff       	call   c0002398 <mount_volume>
c0004fbc:	89 c6                	mov    esi,eax
c0004fbe:	85 c0                	test   eax,eax
c0004fc0:	0f 85 67 01 00 00    	jne    c000512d <f_setlabel+0x188>
c0004fc6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fcb:	ba 20 00 00 00       	mov    edx,0x20
c0004fd0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fd4:	31 db                	xor    ebx,ebx
c0004fd6:	e8 85 cd ff ff       	call   c0001d60 <mem_set>
c0004fdb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fdf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fe2:	76 5b                	jbe    c000503f <f_setlabel+0x9a>
c0004fe4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fe8:	e8 b9 cd ff ff       	call   c0001da6 <tchar2uni>
c0004fed:	3d ff ff 00 00       	cmp    eax,0xffff
c0004ff2:	76 0a                	jbe    c0004ffe <f_setlabel+0x59>
c0004ff4:	be 06 00 00 00       	mov    esi,0x6
c0004ff9:	e9 2f 01 00 00       	jmp    c000512d <f_setlabel+0x188>
c0004ffe:	83 ec 0c             	sub    esp,0xc
c0005001:	50                   	push   eax
c0005002:	e8 ad 0b 00 00       	call   c0005bb4 <ff_wtoupper>
c0005007:	5a                   	pop    edx
c0005008:	59                   	pop    ecx
c0005009:	68 b5 01 00 00       	push   0x1b5
c000500e:	50                   	push   eax
c000500f:	e8 88 0a 00 00       	call   c0005a9c <ff_uni2oem>
c0005014:	83 c4 10             	add    esp,0x10
c0005017:	89 c6                	mov    esi,eax
c0005019:	66 85 c0             	test   ax,ax
c000501c:	74 d6                	je     c0004ff4 <f_setlabel+0x4f>
c000501e:	0f b7 d0             	movzx  edx,ax
c0005021:	b8 90 cf 01 c0       	mov    eax,0xc001cf90
c0005026:	e8 63 cd ff ff       	call   c0001d8e <chk_chr>
c000502b:	85 c0                	test   eax,eax
c000502d:	75 c5                	jne    c0004ff4 <f_setlabel+0x4f>
c000502f:	66 81 fe ff 00       	cmp    si,0xff
c0005034:	0f 87 c9 00 00 00    	ja     c0005103 <f_setlabel+0x15e>
c000503a:	e9 e4 00 00 00       	jmp    c0005123 <f_setlabel+0x17e>
c000503f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005044:	74 ae                	je     c0004ff4 <f_setlabel+0x4f>
c0005046:	85 db                	test   ebx,ebx
c0005048:	74 0e                	je     c0005058 <f_setlabel+0xb3>
c000504a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000504d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005052:	75 04                	jne    c0005058 <f_setlabel+0xb3>
c0005054:	89 c3                	mov    ebx,eax
c0005056:	eb ee                	jmp    c0005046 <f_setlabel+0xa1>
c0005058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000505c:	31 d2                	xor    edx,edx
c000505e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005062:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000506a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000506e:	e8 a0 e1 ff ff       	call   c0003213 <dir_sdi>
c0005073:	89 c6                	mov    esi,eax
c0005075:	85 c0                	test   eax,eax
c0005077:	0f 85 b0 00 00 00    	jne    c000512d <f_setlabel+0x188>
c000507d:	ba 01 00 00 00       	mov    edx,0x1
c0005082:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005086:	e8 79 e5 ff ff       	call   c0003604 <dir_read>
c000508b:	85 c0                	test   eax,eax
c000508d:	75 18                	jne    c00050a7 <f_setlabel+0x102>
c000508f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005093:	85 db                	test   ebx,ebx
c0005095:	74 0b                	je     c00050a2 <f_setlabel+0xfd>
c0005097:	b9 0b 00 00 00       	mov    ecx,0xb
c000509c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050a0:	eb 47                	jmp    c00050e9 <f_setlabel+0x144>
c00050a2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050a5:	eb 47                	jmp    c00050ee <f_setlabel+0x149>
c00050a7:	83 f8 04             	cmp    eax,0x4
c00050aa:	75 53                	jne    c00050ff <f_setlabel+0x15a>
c00050ac:	85 db                	test   ebx,ebx
c00050ae:	74 7d                	je     c000512d <f_setlabel+0x188>
c00050b0:	ba 01 00 00 00       	mov    edx,0x1
c00050b5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b9:	e8 e5 e4 ff ff       	call   c00035a3 <dir_alloc>
c00050be:	89 c6                	mov    esi,eax
c00050c0:	85 c0                	test   eax,eax
c00050c2:	75 69                	jne    c000512d <f_setlabel+0x188>
c00050c4:	b9 20 00 00 00       	mov    ecx,0x20
c00050c9:	31 d2                	xor    edx,edx
c00050cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cf:	e8 8c cc ff ff       	call   c0001d60 <mem_set>
c00050d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050dd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050e1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	e8 5d cc ff ff       	call   c0001d4b <mem_cpy>
c00050ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050fa:	e8 86 db ff ff       	call   c0002c85 <sync_fs>
c00050ff:	89 c6                	mov    esi,eax
c0005101:	eb 2a                	jmp    c000512d <f_setlabel+0x188>
c0005103:	83 fb 09             	cmp    ebx,0x9
c0005106:	0f 87 e8 fe ff ff    	ja     c0004ff4 <f_setlabel+0x4f>
c000510c:	89 f0                	mov    eax,esi
c000510e:	66 c1 e8 08          	shr    ax,0x8
c0005112:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005116:	43                   	inc    ebx
c0005117:	89 f0                	mov    eax,esi
c0005119:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000511d:	43                   	inc    ebx
c000511e:	e9 b8 fe ff ff       	jmp    c0004fdb <f_setlabel+0x36>
c0005123:	83 fb 0a             	cmp    ebx,0xa
c0005126:	76 ef                	jbe    c0005117 <f_setlabel+0x172>
c0005128:	e9 c7 fe ff ff       	jmp    c0004ff4 <f_setlabel+0x4f>
c000512d:	89 f0                	mov    eax,esi
c000512f:	83 c4 54             	add    esp,0x54
c0005132:	5b                   	pop    ebx
c0005133:	5e                   	pop    esi
c0005134:	c3                   	ret    

c0005135 <f_expand>:
c0005135:	55                   	push   ebp
c0005136:	57                   	push   edi
c0005137:	56                   	push   esi
c0005138:	53                   	push   ebx
c0005139:	83 ec 2c             	sub    esp,0x2c
c000513c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005140:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005144:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005148:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000514c:	89 d8                	mov    eax,ebx
c000514e:	e8 48 d0 ff ff       	call   c000219b <validate>
c0005153:	89 c6                	mov    esi,eax
c0005155:	85 c0                	test   eax,eax
c0005157:	0f 85 2e 01 00 00    	jne    c000528b <f_expand+0x156>
c000515d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005161:	85 f6                	test   esi,esi
c0005163:	0f 85 22 01 00 00    	jne    c000528b <f_expand+0x156>
c0005169:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000516e:	75 0a                	jne    c000517a <f_expand+0x45>
c0005170:	be 07 00 00 00       	mov    esi,0x7
c0005175:	e9 11 01 00 00       	jmp    c000528b <f_expand+0x156>
c000517a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000517e:	75 f0                	jne    c0005170 <f_expand+0x3b>
c0005180:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005184:	74 ea                	je     c0005170 <f_expand+0x3b>
c0005186:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000518a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000518e:	c1 e1 09             	shl    ecx,0x9
c0005191:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005194:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005198:	0f 95 c0             	setne  al
c000519b:	31 d2                	xor    edx,edx
c000519d:	0f b6 c0             	movzx  eax,al
c00051a0:	89 c7                	mov    edi,eax
c00051a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051a6:	f7 f1                	div    ecx
c00051a8:	01 f8                	add    eax,edi
c00051aa:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051b1:	83 ff 01             	cmp    edi,0x1
c00051b4:	76 05                	jbe    c00051bb <f_expand+0x86>
c00051b6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051b9:	77 05                	ja     c00051c0 <f_expand+0x8b>
c00051bb:	bf 02 00 00 00       	mov    edi,0x2
c00051c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051c3:	89 fd                	mov    ebp,edi
c00051c5:	31 c9                	xor    ecx,ecx
c00051c7:	89 ea                	mov    edx,ebp
c00051c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051cf:	45                   	inc    ebp
c00051d0:	e8 3c df ff ff       	call   c0003111 <get_fat.isra.2>
c00051d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051dd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051e0:	77 05                	ja     c00051e7 <f_expand+0xb2>
c00051e2:	bd 02 00 00 00       	mov    ebp,0x2
c00051e7:	83 f8 01             	cmp    eax,0x1
c00051ea:	74 20                	je     c000520c <f_expand+0xd7>
c00051ec:	83 f8 ff             	cmp    eax,0xffffffff
c00051ef:	74 22                	je     c0005213 <f_expand+0xde>
c00051f1:	85 c0                	test   eax,eax
c00051f3:	75 09                	jne    c00051fe <f_expand+0xc9>
c00051f5:	41                   	inc    ecx
c00051f6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051fa:	75 07                	jne    c0005203 <f_expand+0xce>
c00051fc:	eb 1c                	jmp    c000521a <f_expand+0xe5>
c00051fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005201:	31 c9                	xor    ecx,ecx
c0005203:	39 fd                	cmp    ebp,edi
c0005205:	75 c0                	jne    c00051c7 <f_expand+0x92>
c0005207:	e9 64 ff ff ff       	jmp    c0005170 <f_expand+0x3b>
c000520c:	be 02 00 00 00       	mov    esi,0x2
c0005211:	eb 78                	jmp    c000528b <f_expand+0x156>
c0005213:	be 01 00 00 00       	mov    esi,0x1
c0005218:	eb 71                	jmp    c000528b <f_expand+0x156>
c000521a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000521f:	74 2b                	je     c000524c <f_expand+0x117>
c0005221:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005224:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005228:	85 ed                	test   ebp,ebp
c000522a:	74 24                	je     c0005250 <f_expand+0x11b>
c000522c:	83 c9 ff             	or     ecx,0xffffffff
c000522f:	83 fd 01             	cmp    ebp,0x1
c0005232:	74 03                	je     c0005237 <f_expand+0x102>
c0005234:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005237:	89 fa                	mov    edx,edi
c0005239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000523d:	e8 59 d4 ff ff       	call   c000269b <put_fat>
c0005242:	85 c0                	test   eax,eax
c0005244:	75 43                	jne    c0005289 <f_expand+0x154>
c0005246:	89 f8                	mov    eax,edi
c0005248:	4d                   	dec    ebp
c0005249:	47                   	inc    edi
c000524a:	eb dc                	jmp    c0005228 <f_expand+0xf3>
c000524c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000524f:	48                   	dec    eax
c0005250:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005254:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005259:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000525c:	74 2d                	je     c000528b <f_expand+0x156>
c000525e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005262:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005265:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005268:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000526c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005272:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005275:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005278:	39 c8                	cmp    eax,ecx
c000527a:	77 0f                	ja     c000528b <f_expand+0x156>
c000527c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005280:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005284:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005287:	eb 02                	jmp    c000528b <f_expand+0x156>
c0005289:	89 c6                	mov    esi,eax
c000528b:	83 c4 2c             	add    esp,0x2c
c000528e:	89 f0                	mov    eax,esi
c0005290:	5b                   	pop    ebx
c0005291:	5e                   	pop    esi
c0005292:	5f                   	pop    edi
c0005293:	5d                   	pop    ebp
c0005294:	c3                   	ret    

c0005295 <f_mkfs>:
c0005295:	55                   	push   ebp
c0005296:	57                   	push   edi
c0005297:	bf 0b 00 00 00       	mov    edi,0xb
c000529c:	56                   	push   esi
c000529d:	53                   	push   ebx
c000529e:	83 ec 4c             	sub    esp,0x4c
c00052a1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052a5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052a9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052ad:	e8 9c ce ff ff       	call   c000214e <get_ldnumber>
c00052b2:	85 c0                	test   eax,eax
c00052b4:	0f 88 a6 07 00 00    	js     c0005a60 <f_mkfs+0x7cb>
c00052ba:	8b 14 85 a0 14 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdeb60]
c00052c1:	85 d2                	test   edx,edx
c00052c3:	74 03                	je     c00052c8 <f_mkfs+0x33>
c00052c5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052c8:	85 db                	test   ebx,ebx
c00052ca:	75 05                	jne    c00052d1 <f_mkfs+0x3c>
c00052cc:	bb 80 cf 01 c0       	mov    ebx,0xc001cf80
c00052d1:	83 ec 0c             	sub    esp,0xc
c00052d4:	0f b6 c0             	movzx  eax,al
c00052d7:	bf 03 00 00 00       	mov    edi,0x3
c00052dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052e4:	e8 e8 c9 ff ff       	call   c0001cd1 <disk_initialize>
c00052e9:	83 c4 10             	add    esp,0x10
c00052ec:	a8 01                	test   al,0x1
c00052ee:	0f 85 6c 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c00052f4:	bf 0a 00 00 00       	mov    edi,0xa
c00052f9:	a8 04                	test   al,0x4
c00052fb:	0f 85 5f 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c0005301:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005304:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005308:	85 c0                	test   eax,eax
c000530a:	75 20                	jne    c000532c <f_mkfs+0x97>
c000530c:	51                   	push   ecx
c000530d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005311:	50                   	push   eax
c0005312:	6a 03                	push   0x3
c0005314:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005318:	e8 e3 c9 ff ff       	call   c0001d00 <disk_ioctl>
c000531d:	83 c4 10             	add    esp,0x10
c0005320:	85 c0                	test   eax,eax
c0005322:	74 08                	je     c000532c <f_mkfs+0x97>
c0005324:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000532c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005330:	8d 42 ff             	lea    eax,[edx-0x1]
c0005333:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005338:	77 04                	ja     c000533e <f_mkfs+0xa9>
c000533a:	85 c2                	test   edx,eax
c000533c:	74 08                	je     c0005346 <f_mkfs+0xb1>
c000533e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005346:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005349:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000534d:	48                   	dec    eax
c000534e:	3c 01                	cmp    al,0x1
c0005350:	76 05                	jbe    c0005357 <f_mkfs+0xc2>
c0005352:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005357:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000535a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535e:	48                   	dec    eax
c000535f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005364:	77 07                	ja     c000536d <f_mkfs+0xd8>
c0005366:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000536b:	74 08                	je     c0005375 <f_mkfs+0xe0>
c000536d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005375:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005378:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000537e:	77 07                	ja     c0005387 <f_mkfs+0xf2>
c0005380:	8d 47 ff             	lea    eax,[edi-0x1]
c0005383:	85 f8                	test   eax,edi
c0005385:	74 02                	je     c0005389 <f_mkfs+0xf4>
c0005387:	31 ff                	xor    edi,edi
c0005389:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005391:	77 0a                	ja     c000539d <f_mkfs+0x108>
c0005393:	bf 11 00 00 00       	mov    edi,0x11
c0005398:	e9 c3 06 00 00       	jmp    c0005a60 <f_mkfs+0x7cb>
c000539d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000539f:	89 ee                	mov    esi,ebp
c00053a1:	85 ed                	test   ebp,ebp
c00053a3:	75 1b                	jne    c00053c0 <f_mkfs+0x12b>
c00053a5:	83 ec 0c             	sub    esp,0xc
c00053a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053ac:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053b1:	50                   	push   eax
c00053b2:	e8 b5 06 00 00       	call   c0005a6c <ff_memalloc>
c00053b7:	83 c4 10             	add    esp,0x10
c00053ba:	89 c6                	mov    esi,eax
c00053bc:	85 c0                	test   eax,eax
c00053be:	74 d3                	je     c0005393 <f_mkfs+0xfe>
c00053c0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053c8:	52                   	push   edx
c00053c9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053cd:	50                   	push   eax
c00053ce:	6a 01                	push   0x1
c00053d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053d4:	e8 27 c9 ff ff       	call   c0001d00 <disk_ioctl>
c00053d9:	83 c4 10             	add    esp,0x10
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 25 06 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00053e4:	88 d8                	mov    al,bl
c00053e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053ee:	24 08                	and    al,0x8
c00053f0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053f4:	75 18                	jne    c000540e <f_mkfs+0x179>
c00053f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053fa:	83 f8 3f             	cmp    eax,0x3f
c00053fd:	76 0f                	jbe    c000540e <f_mkfs+0x179>
c00053ff:	83 e8 3f             	sub    eax,0x3f
c0005402:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000540a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000540e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005412:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005416:	83 f8 7f             	cmp    eax,0x7f
c0005419:	0f 86 52 02 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000541f:	b9 80 00 00 00       	mov    ecx,0x80
c0005424:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000542a:	77 05                	ja     c0005431 <f_mkfs+0x19c>
c000542c:	89 f9                	mov    ecx,edi
c000542e:	c1 e9 09             	shr    ecx,0x9
c0005431:	88 d8                	mov    al,bl
c0005433:	83 e0 01             	and    eax,0x1
c0005436:	80 e3 02             	and    bl,0x2
c0005439:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000543d:	74 0a                	je     c0005449 <f_mkfs+0x1b4>
c000543f:	84 c0                	test   al,al
c0005441:	0f 84 4c 01 00 00    	je     c0005593 <f_mkfs+0x2fe>
c0005447:	eb 38                	jmp    c0005481 <f_mkfs+0x1ec>
c0005449:	bf 13 00 00 00       	mov    edi,0x13
c000544e:	84 c0                	test   al,al
c0005450:	75 2f                	jne    c0005481 <f_mkfs+0x1ec>
c0005452:	e9 c9 05 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c0005457:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000545c:	0f 85 08 02 00 00    	jne    c000566a <f_mkfs+0x3d5>
c0005462:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005467:	0f 86 e1 01 00 00    	jbe    c000564e <f_mkfs+0x3b9>
c000546d:	85 c9                	test   ecx,ecx
c000546f:	0f 85 bd 05 00 00    	jne    c0005a32 <f_mkfs+0x79d>
c0005475:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005478:	83 f9 40             	cmp    ecx,0x40
c000547b:	0f 87 c1 05 00 00    	ja     c0005a42 <f_mkfs+0x7ad>
c0005481:	89 cf                	mov    edi,ecx
c0005483:	85 c9                	test   ecx,ecx
c0005485:	75 1d                	jne    c00054a4 <f_mkfs+0x20f>
c0005487:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000548b:	ba 60 cf 01 c0       	mov    edx,0xc001cf60
c0005490:	c1 eb 0c             	shr    ebx,0xc
c0005493:	bf 01 00 00 00       	mov    edi,0x1
c0005498:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000549b:	66 85 c0             	test   ax,ax
c000549e:	0f 85 5f 01 00 00    	jne    c0005603 <f_mkfs+0x36e>
c00054a4:	31 d2                	xor    edx,edx
c00054a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054aa:	f7 f7                	div    edi
c00054ac:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054b1:	0f 86 5e 01 00 00    	jbe    c0005615 <f_mkfs+0x380>
c00054b7:	83 c0 02             	add    eax,0x2
c00054ba:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054bf:	01 c0                	add    eax,eax
c00054c1:	05 ff 01 00 00       	add    eax,0x1ff
c00054c6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ce:	c1 e8 09             	shr    eax,0x9
c00054d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054d9:	c1 e0 05             	shl    eax,0x5
c00054dc:	c1 e8 09             	shr    eax,0x9
c00054df:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054e3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054f0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054fc:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005501:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005505:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005509:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000550d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005511:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005515:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005519:	f7 d8                	neg    eax
c000551b:	21 c3                	and    ebx,eax
c000551d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005521:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005526:	0f 85 fc 00 00 00    	jne    c0005628 <f_mkfs+0x393>
c000552c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005530:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005534:	89 f8                	mov    eax,edi
c0005536:	c1 e0 04             	shl    eax,0x4
c0005539:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000553d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005541:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005545:	0f 82 26 01 00 00    	jb     c0005671 <f_mkfs+0x3dc>
c000554b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000554f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005553:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005557:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000555c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005560:	29 d0                	sub    eax,edx
c0005562:	31 d2                	xor    edx,edx
c0005564:	f7 f7                	div    edi
c0005566:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000556b:	89 c3                	mov    ebx,eax
c000556d:	0f 85 e4 fe ff ff    	jne    c0005457 <f_mkfs+0x1c2>
c0005573:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005578:	0f 87 02 01 00 00    	ja     c0005680 <f_mkfs+0x3eb>
c000557e:	85 c9                	test   ecx,ecx
c0005580:	0f 85 eb 00 00 00    	jne    c0005671 <f_mkfs+0x3dc>
c0005586:	83 ff 01             	cmp    edi,0x1
c0005589:	0f 86 e2 00 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000558f:	89 f9                	mov    ecx,edi
c0005591:	d1 e9                	shr    ecx,1
c0005593:	89 cb                	mov    ebx,ecx
c0005595:	85 c9                	test   ecx,ecx
c0005597:	75 26                	jne    c00055bf <f_mkfs+0x32a>
c0005599:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000559d:	ba 70 cf 01 c0       	mov    edx,0xc001cf70
c00055a2:	c1 eb 11             	shr    ebx,0x11
c00055a5:	b9 01 00 00 00       	mov    ecx,0x1
c00055aa:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055ad:	66 85 c0             	test   ax,ax
c00055b0:	74 0b                	je     c00055bd <f_mkfs+0x328>
c00055b2:	83 c2 02             	add    edx,0x2
c00055b5:	39 d8                	cmp    eax,ebx
c00055b7:	77 04                	ja     c00055bd <f_mkfs+0x328>
c00055b9:	01 c9                	add    ecx,ecx
c00055bb:	eb ed                	jmp    c00055aa <f_mkfs+0x315>
c00055bd:	31 db                	xor    ebx,ebx
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055c5:	f7 f1                	div    ecx
c00055c7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ce:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055d3:	c1 ea 09             	shr    edx,0x9
c00055d6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055df:	0f 87 8c 00 00 00    	ja     c0005671 <f_mkfs+0x3dc>
c00055e5:	89 cf                	mov    edi,ecx
c00055e7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055ef:	89 d9                	mov    ecx,ebx
c00055f1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055f9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055fe:	e9 e0 fe ff ff       	jmp    c00054e3 <f_mkfs+0x24e>
c0005603:	83 c2 02             	add    edx,0x2
c0005606:	39 d8                	cmp    eax,ebx
c0005608:	0f 87 96 fe ff ff    	ja     c00054a4 <f_mkfs+0x20f>
c000560e:	01 ff                	add    edi,edi
c0005610:	e9 83 fe ff ff       	jmp    c0005498 <f_mkfs+0x203>
c0005615:	8d 04 40             	lea    eax,[eax+eax*2]
c0005618:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000561d:	40                   	inc    eax
c000561e:	d1 e8                	shr    eax,1
c0005620:	83 c0 03             	add    eax,0x3
c0005623:	e9 99 fe ff ff       	jmp    c00054c1 <f_mkfs+0x22c>
c0005628:	31 d2                	xor    edx,edx
c000562a:	89 d8                	mov    eax,ebx
c000562c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005630:	85 d2                	test   edx,edx
c0005632:	74 09                	je     c000563d <f_mkfs+0x3a8>
c0005634:	4b                   	dec    ebx
c0005635:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005639:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000563d:	89 d8                	mov    eax,ebx
c000563f:	31 d2                	xor    edx,edx
c0005641:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005645:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005649:	e9 e6 fe ff ff       	jmp    c0005534 <f_mkfs+0x29f>
c000564e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005653:	77 2b                	ja     c0005680 <f_mkfs+0x3eb>
c0005655:	85 c9                	test   ecx,ecx
c0005657:	75 18                	jne    c0005671 <f_mkfs+0x3dc>
c0005659:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000565c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005662:	0f 86 19 fe ff ff    	jbe    c0005481 <f_mkfs+0x1ec>
c0005668:	eb 07                	jmp    c0005671 <f_mkfs+0x3dc>
c000566a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000566f:	76 0a                	jbe    c000567b <f_mkfs+0x3e6>
c0005671:	bf 0e 00 00 00       	mov    edi,0xe
c0005676:	e9 a5 03 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c000567b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005680:	31 d2                	xor    edx,edx
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	89 f0                	mov    eax,esi
c0005689:	e8 d2 c6 ff ff       	call   c0001d60 <mem_set>
c000568e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005693:	ba 12 cf 01 c0       	mov    edx,0xc001cf12
c0005698:	89 f0                	mov    eax,esi
c000569a:	e8 ac c6 ff ff       	call   c0001d4b <mem_cpy>
c000569f:	8d 46 0b             	lea    eax,[esi+0xb]
c00056a2:	ba 00 02 00 00       	mov    edx,0x200
c00056a7:	e8 98 c6 ff ff       	call   c0001d44 <st_word>
c00056ac:	89 f8                	mov    eax,edi
c00056ae:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056b3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056b6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056b9:	e8 86 c6 ff ff       	call   c0001d44 <st_word>
c00056be:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056c2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056c7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ca:	75 08                	jne    c00056d4 <f_mkfs+0x43f>
c00056cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056d8:	8d 46 11             	lea    eax,[esi+0x11]
c00056db:	e8 64 c6 ff ff       	call   c0001d44 <st_word>
c00056e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056ea:	77 0a                	ja     c00056f6 <f_mkfs+0x461>
c00056ec:	8d 46 13             	lea    eax,[esi+0x13]
c00056ef:	e8 50 c6 ff ff       	call   c0001d44 <st_word>
c00056f4:	eb 08                	jmp    c00056fe <f_mkfs+0x469>
c00056f6:	8d 46 20             	lea    eax,[esi+0x20]
c00056f9:	e8 4a c6 ff ff       	call   c0001d48 <st_dword>
c00056fe:	8d 46 18             	lea    eax,[esi+0x18]
c0005701:	ba 3f 00 00 00       	mov    edx,0x3f
c0005706:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000570a:	e8 35 c6 ff ff       	call   c0001d44 <st_word>
c000570f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005712:	ba ff 00 00 00       	mov    edx,0xff
c0005717:	e8 28 c6 ff ff       	call   c0001d44 <st_word>
c000571c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000571f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005723:	e8 20 c6 ff ff       	call   c0001d48 <st_dword>
c0005728:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000572d:	75 57                	jne    c0005786 <f_mkfs+0x4f1>
c000572f:	8d 46 43             	lea    eax,[esi+0x43]
c0005732:	ba 00 00 21 50       	mov    edx,0x50210000
c0005737:	e8 0c c6 ff ff       	call   c0001d48 <st_dword>
c000573c:	8d 46 24             	lea    eax,[esi+0x24]
c000573f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005743:	e8 00 c6 ff ff       	call   c0001d48 <st_dword>
c0005748:	8d 46 2c             	lea    eax,[esi+0x2c]
c000574b:	ba 02 00 00 00       	mov    edx,0x2
c0005750:	e8 f3 c5 ff ff       	call   c0001d48 <st_dword>
c0005755:	8d 46 30             	lea    eax,[esi+0x30]
c0005758:	ba 01 00 00 00       	mov    edx,0x1
c000575d:	e8 e2 c5 ff ff       	call   c0001d44 <st_word>
c0005762:	8d 46 32             	lea    eax,[esi+0x32]
c0005765:	ba 06 00 00 00       	mov    edx,0x6
c000576a:	e8 d5 c5 ff ff       	call   c0001d44 <st_word>
c000576f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005773:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005777:	8d 46 47             	lea    eax,[esi+0x47]
c000577a:	b9 13 00 00 00       	mov    ecx,0x13
c000577f:	ba 1e cf 01 c0       	mov    edx,0xc001cf1e
c0005784:	eb 2f                	jmp    c00057b5 <f_mkfs+0x520>
c0005786:	8d 46 27             	lea    eax,[esi+0x27]
c0005789:	ba 00 00 21 50       	mov    edx,0x50210000
c000578e:	e8 b5 c5 ff ff       	call   c0001d48 <st_dword>
c0005793:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005798:	8d 46 16             	lea    eax,[esi+0x16]
c000579b:	e8 a4 c5 ff ff       	call   c0001d44 <st_word>
c00057a0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057a4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057a8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057ab:	b9 13 00 00 00       	mov    ecx,0x13
c00057b0:	ba 32 cf 01 c0       	mov    edx,0xc001cf32
c00057b5:	e8 91 c5 ff ff       	call   c0001d4b <mem_cpy>
c00057ba:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057c0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057c9:	e8 76 c5 ff ff       	call   c0001d44 <st_word>
c00057ce:	6a 01                	push   0x1
c00057d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057d4:	56                   	push   esi
c00057d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057d9:	e8 0c c5 ff ff       	call   c0001cea <disk_write>
c00057de:	83 c4 10             	add    esp,0x10
c00057e1:	85 c0                	test   eax,eax
c00057e3:	0f 85 20 02 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00057e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057ee:	0f 85 98 00 00 00    	jne    c000588c <f_mkfs+0x5f7>
c00057f4:	6a 01                	push   0x1
c00057f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057fa:	83 c0 06             	add    eax,0x6
c00057fd:	50                   	push   eax
c00057fe:	56                   	push   esi
c00057ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005803:	e8 e2 c4 ff ff       	call   c0001cea <disk_write>
c0005808:	b9 00 02 00 00       	mov    ecx,0x200
c000580d:	31 d2                	xor    edx,edx
c000580f:	89 f0                	mov    eax,esi
c0005811:	e8 4a c5 ff ff       	call   c0001d60 <mem_set>
c0005816:	ba 52 52 61 41       	mov    edx,0x41615252
c000581b:	89 f0                	mov    eax,esi
c000581d:	e8 26 c5 ff ff       	call   c0001d48 <st_dword>
c0005822:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005828:	ba 72 72 41 61       	mov    edx,0x61417272
c000582d:	e8 16 c5 ff ff       	call   c0001d48 <st_dword>
c0005832:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005835:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000583b:	e8 08 c5 ff ff       	call   c0001d48 <st_dword>
c0005840:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005846:	ba 02 00 00 00       	mov    edx,0x2
c000584b:	e8 f8 c4 ff ff       	call   c0001d48 <st_dword>
c0005850:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005855:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000585b:	e8 e4 c4 ff ff       	call   c0001d44 <st_word>
c0005860:	6a 01                	push   0x1
c0005862:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005866:	83 c0 07             	add    eax,0x7
c0005869:	50                   	push   eax
c000586a:	56                   	push   esi
c000586b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000586f:	e8 76 c4 ff ff       	call   c0001cea <disk_write>
c0005874:	83 c4 20             	add    esp,0x20
c0005877:	6a 01                	push   0x1
c0005879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000587d:	40                   	inc    eax
c000587e:	50                   	push   eax
c000587f:	56                   	push   esi
c0005880:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005884:	e8 61 c4 ff ff       	call   c0001cea <disk_write>
c0005889:	83 c4 10             	add    esp,0x10
c000588c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005890:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005894:	c1 e8 09             	shr    eax,0x9
c0005897:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000589d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058a1:	31 d2                	xor    edx,edx
c00058a3:	31 db                	xor    ebx,ebx
c00058a5:	89 f0                	mov    eax,esi
c00058a7:	e8 b4 c4 ff ff       	call   c0001d60 <mem_set>
c00058ac:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058b1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058b9:	0f 94 c3             	sete   bl
c00058bc:	4b                   	dec    ebx
c00058bd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058c3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058c9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ce:	75 21                	jne    c00058f1 <f_mkfs+0x65c>
c00058d0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058d5:	89 f0                	mov    eax,esi
c00058d7:	e8 6c c4 ff ff       	call   c0001d48 <st_dword>
c00058dc:	8d 46 04             	lea    eax,[esi+0x4]
c00058df:	83 ca ff             	or     edx,0xffffffff
c00058e2:	e8 61 c4 ff ff       	call   c0001d48 <st_dword>
c00058e7:	8d 46 08             	lea    eax,[esi+0x8]
c00058ea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058ef:	eb 04                	jmp    c00058f5 <f_mkfs+0x660>
c00058f1:	89 da                	mov    edx,ebx
c00058f3:	89 f0                	mov    eax,esi
c00058f5:	e8 4e c4 ff ff       	call   c0001d48 <st_dword>
c00058fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000590a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000590e:	76 08                	jbe    c0005918 <f_mkfs+0x683>
c0005910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005918:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000591c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005920:	56                   	push   esi
c0005921:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005925:	e8 c0 c3 ff ff       	call   c0001cea <disk_write>
c000592a:	83 c4 10             	add    esp,0x10
c000592d:	85 c0                	test   eax,eax
c000592f:	0f 85 d4 00 00 00    	jne    c0005a09 <f_mkfs+0x774>
c0005935:	b9 00 02 00 00       	mov    ecx,0x200
c000593a:	31 d2                	xor    edx,edx
c000593c:	89 f0                	mov    eax,esi
c000593e:	e8 1d c4 ff ff       	call   c0001d60 <mem_set>
c0005943:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005947:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000594b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000594f:	75 b1                	jne    c0005902 <f_mkfs+0x66d>
c0005951:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005955:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000595d:	40                   	inc    eax
c000595e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005962:	0f 87 61 ff ff ff    	ja     c00058c9 <f_mkfs+0x634>
c0005968:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000596d:	74 04                	je     c0005973 <f_mkfs+0x6de>
c000596f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005973:	89 fb                	mov    ebx,edi
c0005975:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005979:	76 04                	jbe    c000597f <f_mkfs+0x6ea>
c000597b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000597f:	53                   	push   ebx
c0005980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005984:	56                   	push   esi
c0005985:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005989:	e8 5c c3 ff ff       	call   c0001cea <disk_write>
c000598e:	83 c4 10             	add    esp,0x10
c0005991:	85 c0                	test   eax,eax
c0005993:	75 74                	jne    c0005a09 <f_mkfs+0x774>
c0005995:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005999:	29 df                	sub    edi,ebx
c000599b:	75 d6                	jne    c0005973 <f_mkfs+0x6de>
c000599d:	b1 0c                	mov    cl,0xc
c000599f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059a4:	74 18                	je     c00059be <f_mkfs+0x729>
c00059a6:	b1 06                	mov    cl,0x6
c00059a8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059b0:	77 0c                	ja     c00059be <f_mkfs+0x729>
c00059b2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059b7:	0f 94 c1             	sete   cl
c00059ba:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059be:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059c3:	75 2d                	jne    c00059f2 <f_mkfs+0x75d>
c00059c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059c9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059d1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059d5:	0f b6 c9             	movzx  ecx,cl
c00059d8:	83 ec 0c             	sub    esp,0xc
c00059db:	56                   	push   esi
c00059dc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059e4:	e8 4c d3 ff ff       	call   c0002d35 <create_partition>
c00059e9:	83 c4 10             	add    esp,0x10
c00059ec:	89 c7                	mov    edi,eax
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 2e                	jne    c0005a20 <f_mkfs+0x78b>
c00059f2:	31 ff                	xor    edi,edi
c00059f4:	50                   	push   eax
c00059f5:	6a 00                	push   0x0
c00059f7:	6a 00                	push   0x0
c00059f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059fd:	e8 fe c2 ff ff       	call   c0001d00 <disk_ioctl>
c0005a02:	83 c4 10             	add    esp,0x10
c0005a05:	85 c0                	test   eax,eax
c0005a07:	74 17                	je     c0005a20 <f_mkfs+0x78b>
c0005a09:	85 ed                	test   ebp,ebp
c0005a0b:	75 0c                	jne    c0005a19 <f_mkfs+0x784>
c0005a0d:	83 ec 0c             	sub    esp,0xc
c0005a10:	56                   	push   esi
c0005a11:	e8 6e 00 00 00       	call   c0005a84 <ff_memfree>
c0005a16:	83 c4 10             	add    esp,0x10
c0005a19:	bf 01 00 00 00       	mov    edi,0x1
c0005a1e:	eb 40                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a20:	85 ed                	test   ebp,ebp
c0005a22:	75 3c                	jne    c0005a60 <f_mkfs+0x7cb>
c0005a24:	83 ec 0c             	sub    esp,0xc
c0005a27:	56                   	push   esi
c0005a28:	e8 57 00 00 00       	call   c0005a84 <ff_memfree>
c0005a2d:	83 c4 10             	add    esp,0x10
c0005a30:	eb 2e                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 56 fb ff ff    	jne    c0005593 <f_mkfs+0x2fe>
c0005a3d:	e9 2f fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a42:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a47:	0f 85 4c fb ff ff    	jne    c0005599 <f_mkfs+0x304>
c0005a4d:	89 cf                	mov    edi,ecx
c0005a4f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a55:	0f 86 49 fa ff ff    	jbe    c00054a4 <f_mkfs+0x20f>
c0005a5b:	e9 11 fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a60:	83 c4 4c             	add    esp,0x4c
c0005a63:	89 f8                	mov    eax,edi
c0005a65:	5b                   	pop    ebx
c0005a66:	5e                   	pop    esi
c0005a67:	5f                   	pop    edi
c0005a68:	5d                   	pop    ebp
c0005a69:	c3                   	ret    
c0005a6a:	66 90                	xchg   ax,ax

c0005a6c <ff_memalloc>:
c0005a6c:	83 ec 0c             	sub    esp,0xc
c0005a6f:	83 ec 0c             	sub    esp,0xc
c0005a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a76:	e8 3e 1d 00 00       	call   c00077b9 <malloc>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	83 c4 0c             	add    esp,0xc
c0005a81:	c3                   	ret    
c0005a82:	66 90                	xchg   ax,ax

c0005a84 <ff_memfree>:
c0005a84:	83 ec 0c             	sub    esp,0xc
c0005a87:	83 ec 0c             	sub    esp,0xc
c0005a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a8e:	e8 36 1d 00 00       	call   c00077c9 <free>
c0005a93:	83 c4 10             	add    esp,0x10
c0005a96:	90                   	nop
c0005a97:	83 c4 0c             	add    esp,0xc
c0005a9a:	c3                   	ret    
c0005a9b:	90                   	nop

c0005a9c <ff_uni2oem>:
c0005a9c:	83 ec 14             	sub    esp,0x14
c0005a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005aa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005aae:	c7 44 24 0c 60 d3 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d360
c0005ab6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005abb:	77 0b                	ja     c0005ac8 <ff_uni2oem+0x2c>
c0005abd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ac1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ac6:	eb 68                	jmp    c0005b30 <ff_uni2oem+0x94>
c0005ac8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ad0:	77 5e                	ja     c0005b30 <ff_uni2oem+0x94>
c0005ad2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ad8:	75 56                	jne    c0005b30 <ff_uni2oem+0x94>
c0005ada:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ae1:	eb 0d                	jmp    c0005af0 <ff_uni2oem+0x54>
c0005ae3:	90                   	nop
c0005ae4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ae9:	40                   	inc    eax
c0005aea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005aef:	90                   	nop
c0005af0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005af6:	77 24                	ja     c0005b1c <ff_uni2oem+0x80>
c0005af8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005afd:	25 ff ff 00 00       	and    eax,0xffff
c0005b02:	01 c0                	add    eax,eax
c0005b04:	89 c2                	mov    edx,eax
c0005b06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b0a:	01 d0                	add    eax,edx
c0005b0c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b0f:	25 ff ff 00 00       	and    eax,0xffff
c0005b14:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b18:	75 ca                	jne    c0005ae4 <ff_uni2oem+0x48>
c0005b1a:	66 90                	xchg   ax,ax
c0005b1c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b21:	83 e8 80             	sub    eax,0xffffff80
c0005b24:	25 ff 00 00 00       	and    eax,0xff
c0005b29:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b35:	83 c4 14             	add    esp,0x14
c0005b38:	c3                   	ret    
c0005b39:	8d 76 00             	lea    esi,[esi+0x0]

c0005b3c <ff_oem2uni>:
c0005b3c:	83 ec 18             	sub    esp,0x18
c0005b3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b47:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b4c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b50:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b57:	c7 44 24 10 60 d3 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d360
c0005b5f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b65:	77 0d                	ja     c0005b74 <ff_oem2uni+0x38>
c0005b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b6b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b70:	eb 36                	jmp    c0005ba8 <ff_oem2uni+0x6c>
c0005b72:	66 90                	xchg   ax,ax
c0005b74:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b7a:	75 2c                	jne    c0005ba8 <ff_oem2uni+0x6c>
c0005b7c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b83:	77 23                	ja     c0005ba8 <ff_oem2uni+0x6c>
c0005b85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b89:	25 ff ff 00 00       	and    eax,0xffff
c0005b8e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b93:	01 c0                	add    eax,eax
c0005b95:	89 c2                	mov    edx,eax
c0005b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b9b:	01 d0                	add    eax,edx
c0005b9d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ba0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ba8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bad:	83 c4 18             	add    esp,0x18
c0005bb0:	c3                   	ret    
c0005bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bb4 <ff_wtoupper>:
c0005bb4:	83 ec 10             	sub    esp,0x10
c0005bb7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bbf:	0f 87 77 01 00 00    	ja     c0005d3c <ff_wtoupper+0x188>
c0005bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bc9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bce:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bd5:	77 09                	ja     c0005be0 <ff_wtoupper+0x2c>
c0005bd7:	b8 60 d1 01 c0       	mov    eax,0xc001d160
c0005bdc:	eb 0a                	jmp    c0005be8 <ff_wtoupper+0x34>
c0005bde:	66 90                	xchg   ax,ax
c0005be0:	b8 a0 d0 01 c0       	mov    eax,0xc001d0a0
c0005be5:	8d 76 00             	lea    esi,[esi+0x0]
c0005be8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf0:	8d 50 02             	lea    edx,[eax+0x2]
c0005bf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bf7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bfa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c05:	0f 84 21 01 00 00    	je     c0005d2c <ff_wtoupper+0x178>
c0005c0b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c10:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c15:	0f 82 11 01 00 00    	jb     c0005d2c <ff_wtoupper+0x178>
c0005c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c1f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c29:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c2e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c33:	66 c1 e8 08          	shr    ax,0x8
c0005c37:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c3c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c43:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c48:	31 d2                	xor    edx,edx
c0005c4a:	66 89 c2             	mov    dx,ax
c0005c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c51:	31 c9                	xor    ecx,ecx
c0005c53:	66 89 c1             	mov    cx,ax
c0005c56:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c5b:	25 ff ff 00 00       	and    eax,0xffff
c0005c60:	01 c8                	add    eax,ecx
c0005c62:	39 c2                	cmp    edx,eax
c0005c64:	0f 8d 9a 00 00 00    	jge    c0005d04 <ff_wtoupper+0x150>
c0005c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c6e:	25 ff ff 00 00       	and    eax,0xffff
c0005c73:	83 f8 08             	cmp    eax,0x8
c0005c76:	0f 87 ac 00 00 00    	ja     c0005d28 <ff_wtoupper+0x174>
c0005c7c:	8b 04 85 60 d0 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe2fa0]
c0005c83:	ff e0                	jmp    eax
c0005c85:	8d 76 00             	lea    esi,[esi+0x0]
c0005c88:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c8d:	31 d2                	xor    edx,edx
c0005c8f:	66 89 c2             	mov    dx,ax
c0005c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c96:	25 ff ff 00 00       	and    eax,0xffff
c0005c9b:	29 c2                	sub    edx,eax
c0005c9d:	89 d0                	mov    eax,edx
c0005c9f:	01 c0                	add    eax,eax
c0005ca1:	89 c2                	mov    edx,eax
c0005ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ca7:	01 d0                	add    eax,edx
c0005ca9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cac:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cb1:	eb 4d                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cb3:	90                   	nop
c0005cb4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cb9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cbd:	83 e0 01             	and    eax,0x1
c0005cc0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cc5:	eb 39                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cc7:	90                   	nop
c0005cc8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cce:	eb 30                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cd6:	eb 28                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cde:	eb 20                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005ce6:	eb 18                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cee:	eb 10                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005cf6:	eb 08                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cff:	90                   	nop
c0005d00:	eb 26                	jmp    c0005d28 <ff_wtoupper+0x174>
c0005d02:	66 90                	xchg   ax,ax
c0005d04:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d0a:	0f 85 dc fe ff ff    	jne    c0005bec <ff_wtoupper+0x38>
c0005d10:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d15:	25 ff ff 00 00       	and    eax,0xffff
c0005d1a:	01 c0                	add    eax,eax
c0005d1c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d20:	e9 c7 fe ff ff       	jmp    c0005bec <ff_wtoupper+0x38>
c0005d25:	8d 76 00             	lea    esi,[esi+0x0]
c0005d28:	90                   	nop
c0005d29:	8d 76 00             	lea    esi,[esi+0x0]
c0005d2c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d31:	25 ff ff 00 00       	and    eax,0xffff
c0005d36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d3a:	66 90                	xchg   ax,ax
c0005d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	c3                   	ret    

c0005d44 <utf2ucs>:
c0005d44:	57                   	push   edi
c0005d45:	31 c9                	xor    ecx,ecx
c0005d47:	56                   	push   esi
c0005d48:	89 d7                	mov    edi,edx
c0005d4a:	53                   	push   ebx
c0005d4b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d4f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d53:	89 de                	mov    esi,ebx
c0005d55:	c1 fe 08             	sar    esi,0x8
c0005d58:	89 f2                	mov    edx,esi
c0005d5a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d5d:	41                   	inc    ecx
c0005d5e:	85 db                	test   ebx,ebx
c0005d60:	75 e9                	jne    c0005d4b <utf2ucs+0x7>
c0005d62:	5b                   	pop    ebx
c0005d63:	5e                   	pop    esi
c0005d64:	5f                   	pop    edi
c0005d65:	c3                   	ret    

c0005d66 <ucs2utfn>:
c0005d66:	83 e1 fe             	and    ecx,0xfffffffe
c0005d69:	01 d1                	add    ecx,edx
c0005d6b:	39 d1                	cmp    ecx,edx
c0005d6d:	75 04                	jne    c0005d73 <ucs2utfn+0xd>
c0005d6f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d72:	c3                   	ret    
c0005d73:	57                   	push   edi
c0005d74:	56                   	push   esi
c0005d75:	53                   	push   ebx
c0005d76:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d79:	83 c2 02             	add    edx,0x2
c0005d7c:	89 de                	mov    esi,ebx
c0005d7e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d82:	c1 e6 08             	shl    esi,0x8
c0005d85:	09 f3                	or     ebx,esi
c0005d87:	83 fb 3b             	cmp    ebx,0x3b
c0005d8a:	74 51                	je     c0005ddd <ucs2utfn+0x77>
c0005d8c:	83 fb 7f             	cmp    ebx,0x7f
c0005d8f:	7f 05                	jg     c0005d96 <ucs2utfn+0x30>
c0005d91:	88 18                	mov    BYTE PTR [eax],bl
c0005d93:	40                   	inc    eax
c0005d94:	eb 43                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005d96:	89 de                	mov    esi,ebx
c0005d98:	89 df                	mov    edi,ebx
c0005d9a:	c1 fe 06             	sar    esi,0x6
c0005d9d:	83 e7 3f             	and    edi,0x3f
c0005da0:	83 cf 80             	or     edi,0xffffff80
c0005da3:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005da9:	7f 12                	jg     c0005dbd <ucs2utfn+0x57>
c0005dab:	89 f3                	mov    ebx,esi
c0005dad:	83 c0 02             	add    eax,0x2
c0005db0:	83 cb c0             	or     ebx,0xffffffc0
c0005db3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005db6:	89 fb                	mov    ebx,edi
c0005db8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dbb:	eb 1c                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005dbd:	c1 fb 0c             	sar    ebx,0xc
c0005dc0:	83 e6 3f             	and    esi,0x3f
c0005dc3:	83 cb e0             	or     ebx,0xffffffe0
c0005dc6:	83 c0 03             	add    eax,0x3
c0005dc9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dcc:	89 f3                	mov    ebx,esi
c0005dce:	83 cb 80             	or     ebx,0xffffff80
c0005dd1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dd4:	89 fb                	mov    ebx,edi
c0005dd6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dd9:	39 d1                	cmp    ecx,edx
c0005ddb:	75 99                	jne    c0005d76 <ucs2utfn+0x10>
c0005ddd:	5b                   	pop    ebx
c0005dde:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005de1:	5e                   	pop    esi
c0005de2:	5f                   	pop    edi
c0005de3:	c3                   	ret    

c0005de4 <isjoliet>:
c0005de4:	31 d2                	xor    edx,edx
c0005de6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005de9:	75 22                	jne    c0005e0d <isjoliet+0x29>
c0005deb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005def:	75 1c                	jne    c0005e0d <isjoliet+0x29>
c0005df1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005df4:	ba 02 00 00 00       	mov    edx,0x2
c0005df9:	3c 43                	cmp    al,0x43
c0005dfb:	74 10                	je     c0005e0d <isjoliet+0x29>
c0005dfd:	ba 03 00 00 00       	mov    edx,0x3
c0005e02:	3c 45                	cmp    al,0x45
c0005e04:	74 07                	je     c0005e0d <isjoliet+0x29>
c0005e06:	31 d2                	xor    edx,edx
c0005e08:	3c 40                	cmp    al,0x40
c0005e0a:	0f 94 c2             	sete   dl
c0005e0d:	89 d0                	mov    eax,edx
c0005e0f:	c3                   	ret    

c0005e10 <htohl_32>:
c0005e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e12:	c3                   	ret    

c0005e13 <iso_733>:
c0005e13:	eb fb                	jmp    c0005e10 <htohl_32>

c0005e15 <bclear_cache>:
c0005e15:	31 c0                	xor    eax,eax
c0005e17:	8b 14 85 20 10 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdefe0]
c0005e1e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e24:	8b 14 85 80 10 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdef80]
c0005e2b:	40                   	inc    eax
c0005e2c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e32:	83 f8 10             	cmp    eax,0x10
c0005e35:	75 e0                	jne    c0005e17 <bclear_cache+0x2>
c0005e37:	c3                   	ret    

c0005e38 <bgrad_cache>:
c0005e38:	83 fa 0e             	cmp    edx,0xe
c0005e3b:	77 16                	ja     c0005e53 <bgrad_cache+0x1b>
c0005e3d:	53                   	push   ebx
c0005e3e:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e41:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e45:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e48:	42                   	inc    edx
c0005e49:	83 fa 0f             	cmp    edx,0xf
c0005e4c:	75 f3                	jne    c0005e41 <bgrad_cache+0x9>
c0005e4e:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e51:	5b                   	pop    ebx
c0005e52:	c3                   	ret    
c0005e53:	c3                   	ret    

c0005e54 <bclear>:
c0005e54:	eb bf                	jmp    c0005e15 <bclear_cache>

c0005e56 <iso_break_all>:
c0005e56:	31 c0                	xor    eax,eax
c0005e58:	c7 80 d0 15 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdea30],0x1
c0005e62:	05 94 00 00 00       	add    eax,0x94
c0005e67:	3d 40 09 00 00       	cmp    eax,0x940
c0005e6c:	75 ea                	jne    c0005e58 <iso_break_all+0x2>
c0005e6e:	c3                   	ret    

c0005e6f <ucscompare>:
c0005e6f:	55                   	push   ebp
c0005e70:	57                   	push   edi
c0005e71:	89 c7                	mov    edi,eax
c0005e73:	56                   	push   esi
c0005e74:	89 d6                	mov    esi,edx
c0005e76:	53                   	push   ebx
c0005e77:	31 d2                	xor    edx,edx
c0005e79:	83 ec 1c             	sub    esp,0x1c
c0005e7c:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e80:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e85:	c1 e3 08             	shl    ebx,0x8
c0005e88:	09 c3                	or     ebx,eax
c0005e8a:	39 ca                	cmp    edx,ecx
c0005e8c:	7d 42                	jge    c0005ed0 <ucscompare+0x61>
c0005e8e:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e92:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e97:	c1 e0 08             	shl    eax,0x8
c0005e9a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e9e:	09 e8                	or     eax,ebp
c0005ea0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005ea4:	83 f8 3b             	cmp    eax,0x3b
c0005ea7:	74 27                	je     c0005ed0 <ucscompare+0x61>
c0005ea9:	83 ec 0c             	sub    esp,0xc
c0005eac:	50                   	push   eax
c0005ead:	e8 1e aa ff ff       	call   c00008d0 <tolower>
c0005eb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005eb5:	89 c5                	mov    ebp,eax
c0005eb7:	e8 14 aa ff ff       	call   c00008d0 <tolower>
c0005ebc:	83 c4 10             	add    esp,0x10
c0005ebf:	39 c5                	cmp    ebp,eax
c0005ec1:	75 20                	jne    c0005ee3 <ucscompare+0x74>
c0005ec3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005ec7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005ecb:	83 c2 02             	add    edx,0x2
c0005ece:	eb ac                	jmp    c0005e7c <ucscompare+0xd>
c0005ed0:	85 db                	test   ebx,ebx
c0005ed2:	0f 95 c2             	setne  dl
c0005ed5:	31 c0                	xor    eax,eax
c0005ed7:	83 fb 2f             	cmp    ebx,0x2f
c0005eda:	0f 95 c0             	setne  al
c0005edd:	21 d0                	and    eax,edx
c0005edf:	f7 d8                	neg    eax
c0005ee1:	eb 03                	jmp    c0005ee6 <ucscompare+0x77>
c0005ee3:	83 c8 ff             	or     eax,0xffffffff
c0005ee6:	83 c4 1c             	add    esp,0x1c
c0005ee9:	5b                   	pop    ebx
c0005eea:	5e                   	pop    esi
c0005eeb:	5f                   	pop    edi
c0005eec:	5d                   	pop    ebp
c0005eed:	c3                   	ret    

c0005eee <fncompare>:
c0005eee:	55                   	push   ebp
c0005eef:	57                   	push   edi
c0005ef0:	89 c7                	mov    edi,eax
c0005ef2:	56                   	push   esi
c0005ef3:	89 ce                	mov    esi,ecx
c0005ef5:	53                   	push   ebx
c0005ef6:	31 db                	xor    ebx,ebx
c0005ef8:	83 ec 1c             	sub    esp,0x1c
c0005efb:	39 d3                	cmp    ebx,edx
c0005efd:	7d 43                	jge    c0005f42 <fncompare+0x54>
c0005eff:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005f03:	3c 3b                	cmp    al,0x3b
c0005f05:	74 3b                	je     c0005f42 <fncompare+0x54>
c0005f07:	3c 2e                	cmp    al,0x2e
c0005f09:	75 0e                	jne    c0005f19 <fncompare+0x2b>
c0005f0b:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005f0e:	39 d9                	cmp    ecx,ebx
c0005f10:	74 30                	je     c0005f42 <fncompare+0x54>
c0005f12:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005f17:	74 29                	je     c0005f42 <fncompare+0x54>
c0005f19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f1d:	83 ec 0c             	sub    esp,0xc
c0005f20:	50                   	push   eax
c0005f21:	e8 aa a9 ff ff       	call   c00008d0 <tolower>
c0005f26:	89 c5                	mov    ebp,eax
c0005f28:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005f2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0005f2f:	e8 9c a9 ff ff       	call   c00008d0 <tolower>
c0005f34:	83 c4 10             	add    esp,0x10
c0005f37:	39 c5                	cmp    ebp,eax
c0005f39:	75 1d                	jne    c0005f58 <fncompare+0x6a>
c0005f3b:	43                   	inc    ebx
c0005f3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f40:	eb b9                	jmp    c0005efb <fncompare+0xd>
c0005f42:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005f45:	84 d2                	test   dl,dl
c0005f47:	0f 95 c1             	setne  cl
c0005f4a:	31 c0                	xor    eax,eax
c0005f4c:	80 fa 2f             	cmp    dl,0x2f
c0005f4f:	0f 95 c0             	setne  al
c0005f52:	21 c8                	and    eax,ecx
c0005f54:	f7 d8                	neg    eax
c0005f56:	eb 03                	jmp    c0005f5b <fncompare+0x6d>
c0005f58:	83 c8 ff             	or     eax,0xffffffff
c0005f5b:	83 c4 1c             	add    esp,0x1c
c0005f5e:	5b                   	pop    ebx
c0005f5f:	5e                   	pop    esi
c0005f60:	5f                   	pop    edi
c0005f61:	5d                   	pop    ebp
c0005f62:	c3                   	ret    

c0005f63 <isoReadDiscSector>:
c0005f63:	83 ec 0c             	sub    esp,0xc
c0005f66:	0f be 05 60 10 02 c0 	movsx  eax,BYTE PTR ds:0xc0021060
c0005f6d:	50                   	push   eax
c0005f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f7a:	e8 79 18 01 00       	call   c00177f8 <isoReadDiscSectorHelper>
c0005f7f:	83 c4 1c             	add    esp,0x1c
c0005f82:	c3                   	ret    

c0005f83 <bread_cache>:
c0005f83:	55                   	push   ebp
c0005f84:	57                   	push   edi
c0005f85:	89 d7                	mov    edi,edx
c0005f87:	56                   	push   esi
c0005f88:	ba 0f 00 00 00       	mov    edx,0xf
c0005f8d:	53                   	push   ebx
c0005f8e:	89 c6                	mov    esi,eax
c0005f90:	83 ec 0c             	sub    esp,0xc
c0005f93:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005f96:	39 38                	cmp    DWORD PTR [eax],edi
c0005f98:	74 3c                	je     c0005fd6 <bread_cache+0x53>
c0005f9a:	4a                   	dec    edx
c0005f9b:	83 fa ff             	cmp    edx,0xffffffff
c0005f9e:	75 f3                	jne    c0005f93 <bread_cache+0x10>
c0005fa0:	31 db                	xor    ebx,ebx
c0005fa2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fa5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fa8:	74 08                	je     c0005fb2 <bread_cache+0x2f>
c0005faa:	43                   	inc    ebx
c0005fab:	83 fb 10             	cmp    ebx,0x10
c0005fae:	75 f2                	jne    c0005fa2 <bread_cache+0x1f>
c0005fb0:	31 db                	xor    ebx,ebx
c0005fb2:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fb5:	50                   	push   eax
c0005fb6:	6a 01                	push   0x1
c0005fb8:	57                   	push   edi
c0005fb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fbc:	83 c0 04             	add    eax,0x4
c0005fbf:	50                   	push   eax
c0005fc0:	e8 9e ff ff ff       	call   c0005f63 <isoReadDiscSector>
c0005fc5:	83 c4 10             	add    esp,0x10
c0005fc8:	83 c9 ff             	or     ecx,0xffffffff
c0005fcb:	85 c0                	test   eax,eax
c0005fcd:	78 13                	js     c0005fe2 <bread_cache+0x5f>
c0005fcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fd2:	89 da                	mov    edx,ebx
c0005fd4:	89 38                	mov    DWORD PTR [eax],edi
c0005fd6:	89 f0                	mov    eax,esi
c0005fd8:	e8 5b fe ff ff       	call   c0005e38 <bgrad_cache>
c0005fdd:	b9 0f 00 00 00       	mov    ecx,0xf
c0005fe2:	83 c4 0c             	add    esp,0xc
c0005fe5:	89 c8                	mov    eax,ecx
c0005fe7:	5b                   	pop    ebx
c0005fe8:	5e                   	pop    esi
c0005fe9:	5f                   	pop    edi
c0005fea:	5d                   	pop    ebp
c0005feb:	c3                   	ret    

c0005fec <biread>:
c0005fec:	89 c2                	mov    edx,eax
c0005fee:	b8 80 10 02 c0       	mov    eax,0xc0021080
c0005ff3:	eb 8e                	jmp    c0005f83 <bread_cache>

c0005ff5 <bdread>:
c0005ff5:	89 c2                	mov    edx,eax
c0005ff7:	b8 20 10 02 c0       	mov    eax,0xc0021020
c0005ffc:	eb 85                	jmp    c0005f83 <bread_cache>

c0005ffe <strnicmp>:
c0005ffe:	55                   	push   ebp
c0005fff:	57                   	push   edi
c0006000:	56                   	push   esi
c0006001:	31 f6                	xor    esi,esi
c0006003:	53                   	push   ebx
c0006004:	83 ec 0c             	sub    esp,0xc
c0006007:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000600b:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c000600f:	74 42                	je     c0006053 <strnicmp+0x55>
c0006011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006015:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c0006019:	84 c0                	test   al,al
c000601b:	74 36                	je     c0006053 <strnicmp+0x55>
c000601d:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006020:	84 d2                	test   dl,dl
c0006022:	74 2f                	je     c0006053 <strnicmp+0x55>
c0006024:	38 d0                	cmp    al,dl
c0006026:	8d 6e 01             	lea    ebp,[esi+0x1]
c0006029:	75 04                	jne    c000602f <strnicmp+0x31>
c000602b:	89 ee                	mov    esi,ebp
c000602d:	eb dc                	jmp    c000600b <strnicmp+0xd>
c000602f:	83 ec 0c             	sub    esp,0xc
c0006032:	50                   	push   eax
c0006033:	e8 98 a8 ff ff       	call   c00008d0 <tolower>
c0006038:	89 c7                	mov    edi,eax
c000603a:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c000603e:	89 ee                	mov    esi,ebp
c0006040:	89 04 24             	mov    DWORD PTR [esp],eax
c0006043:	e8 88 a8 ff ff       	call   c00008d0 <tolower>
c0006048:	83 c4 10             	add    esp,0x10
c000604b:	29 c7                	sub    edi,eax
c000604d:	89 f8                	mov    eax,edi
c000604f:	74 ba                	je     c000600b <strnicmp+0xd>
c0006051:	eb 02                	jmp    c0006055 <strnicmp+0x57>
c0006053:	31 c0                	xor    eax,eax
c0006055:	83 c4 0c             	add    esp,0xc
c0006058:	5b                   	pop    ebx
c0006059:	5e                   	pop    esi
c000605a:	5f                   	pop    edi
c000605b:	5d                   	pop    ebp
c000605c:	c3                   	ret    

c000605d <find_object>:
c000605d:	55                   	push   ebp
c000605e:	89 c5                	mov    ebp,eax
c0006060:	57                   	push   edi
c0006061:	56                   	push   esi
c0006062:	53                   	push   ebx
c0006063:	89 d3                	mov    ebx,edx
c0006065:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000606b:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006072:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006076:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000607a:	83 3d b4 1e 02 c0 00 	cmp    DWORD PTR ds:0xc0021eb4,0x0
c0006081:	74 0b                	je     c000608e <find_object+0x31>
c0006083:	89 ea                	mov    edx,ebp
c0006085:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006089:	e8 b6 fc ff ff       	call   c0005d44 <utf2ucs>
c000608e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006091:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006095:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000609a:	7e 11                	jle    c00060ad <find_object+0x50>
c000609c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060a0:	e8 47 ff ff ff       	call   c0005fec <biread>
c00060a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060a9:	85 c0                	test   eax,eax
c00060ab:	79 07                	jns    c00060b4 <find_object+0x57>
c00060ad:	31 db                	xor    ebx,ebx
c00060af:	e9 5b 01 00 00       	jmp    c000620f <find_object+0x1b2>
c00060b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060c4:	8b 04 85 80 10 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdef80]
c00060cb:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060cf:	8a 03                	mov    al,BYTE PTR [ebx]
c00060d1:	84 c0                	test   al,al
c00060d3:	75 0e                	jne    c00060e3 <find_object+0x86>
c00060d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060d9:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c00060e1:	eb b2                	jmp    c0006095 <find_object+0x38>
c00060e3:	8b 35 b4 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021eb4
c00060e9:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00060ed:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00060f1:	89 ca                	mov    edx,ecx
c00060f3:	85 f6                	test   esi,esi
c00060f5:	74 2b                	je     c0006122 <find_object+0xc5>
c00060f7:	8d 43 21             	lea    eax,[ebx+0x21]
c00060fa:	8d 54 24 20          	lea    edx,[esp+0x20]
c00060fe:	e8 6c fd ff ff       	call   c0005e6f <ucscompare>
c0006103:	85 c0                	test   eax,eax
c0006105:	0f 84 c1 00 00 00    	je     c00061cc <find_object+0x16f>
c000610b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000610e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006112:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c000611a:	0f 8e dc 00 00 00    	jle    c00061fc <find_object+0x19f>
c0006120:	eb b3                	jmp    c00060d5 <find_object+0x78>
c0006122:	0f b6 f0             	movzx  esi,al
c0006125:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c0006129:	29 ce                	sub    esi,ecx
c000612b:	80 e2 01             	and    dl,0x1
c000612e:	74 05                	je     c0006135 <find_object+0xd8>
c0006130:	83 ee 21             	sub    esi,0x21
c0006133:	eb 55                	jmp    c000618a <find_object+0x12d>
c0006135:	47                   	inc    edi
c0006136:	83 ee 22             	sub    esi,0x22
c0006139:	eb 4f                	jmp    c000618a <find_object+0x12d>
c000613b:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000613e:	48                   	dec    eax
c000613f:	3c 01                	cmp    al,0x1
c0006141:	77 4c                	ja     c000618f <find_object+0x132>
c0006143:	50                   	push   eax
c0006144:	6a 02                	push   0x2
c0006146:	68 60 d4 01 c0       	push   0xc001d460
c000614b:	57                   	push   edi
c000614c:	e8 0f a6 ff ff       	call   c0000760 <strncmp>
c0006151:	83 c4 10             	add    esp,0x10
c0006154:	85 c0                	test   eax,eax
c0006156:	75 2a                	jne    c0006182 <find_object+0x125>
c0006158:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c000615c:	8d 42 fb             	lea    eax,[edx-0x5]
c000615f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006163:	50                   	push   eax
c0006164:	8d 47 05             	lea    eax,[edi+0x5]
c0006167:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000616b:	50                   	push   eax
c000616c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006170:	50                   	push   eax
c0006171:	e8 ba a4 ff ff       	call   c0000630 <strncpy>
c0006176:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000617a:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006186:	29 c6                	sub    esi,eax
c0006188:	01 c7                	add    edi,eax
c000618a:	83 fe 03             	cmp    esi,0x3
c000618d:	7f ac                	jg     c000613b <find_object+0xde>
c000618f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0006194:	7e 40                	jle    c00061d6 <find_object+0x179>
c0006196:	51                   	push   ecx
c0006197:	51                   	push   ecx
c0006198:	6a 2f                	push   0x2f
c000619a:	55                   	push   ebp
c000619b:	e8 90 a5 ff ff       	call   c0000730 <strchr>
c00061a0:	83 c4 10             	add    esp,0x10
c00061a3:	85 c0                	test   eax,eax
c00061a5:	74 04                	je     c00061ab <find_object+0x14e>
c00061a7:	29 e8                	sub    eax,ebp
c00061a9:	eb 0c                	jmp    c00061b7 <find_object+0x15a>
c00061ab:	83 ec 0c             	sub    esp,0xc
c00061ae:	55                   	push   ebp
c00061af:	e8 8c a3 ff ff       	call   c0000540 <strlen>
c00061b4:	83 c4 10             	add    esp,0x10
c00061b7:	52                   	push   edx
c00061b8:	50                   	push   eax
c00061b9:	55                   	push   ebp
c00061ba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061be:	50                   	push   eax
c00061bf:	e8 3a fe ff ff       	call   c0005ffe <strnicmp>
c00061c4:	83 c4 10             	add    esp,0x10
c00061c7:	e9 37 ff ff ff       	jmp    c0006103 <find_object+0xa6>
c00061cc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061d0:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061d4:	eb 1e                	jmp    c00061f4 <find_object+0x197>
c00061d6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00061da:	8d 43 21             	lea    eax,[ebx+0x21]
c00061dd:	89 e9                	mov    ecx,ebp
c00061df:	e8 0a fd ff ff       	call   c0005eee <fncompare>
c00061e4:	85 c0                	test   eax,eax
c00061e6:	0f 85 1f ff ff ff    	jne    c000610b <find_object+0xae>
c00061ec:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061f0:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00061f4:	0f 85 11 ff ff ff    	jne    c000610b <find_object+0xae>
c00061fa:	eb 13                	jmp    c000620f <find_object+0x1b2>
c00061fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006200:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c0006204:	0f 8f b2 fe ff ff    	jg     c00060bc <find_object+0x5f>
c000620a:	e9 c6 fe ff ff       	jmp    c00060d5 <find_object+0x78>
c000620f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006215:	89 d8                	mov    eax,ebx
c0006217:	5b                   	pop    ebx
c0006218:	5e                   	pop    esi
c0006219:	5f                   	pop    edi
c000621a:	5d                   	pop    ebp
c000621b:	c3                   	ret    

c000621c <find_object_path>:
c000621c:	55                   	push   ebp
c000621d:	57                   	push   edi
c000621e:	89 d7                	mov    edi,edx
c0006220:	56                   	push   esi
c0006221:	89 c6                	mov    esi,eax
c0006223:	53                   	push   ebx
c0006224:	89 cb                	mov    ebx,ecx
c0006226:	83 ec 0c             	sub    esp,0xc
c0006229:	50                   	push   eax
c000622a:	50                   	push   eax
c000622b:	6a 2f                	push   0x2f
c000622d:	56                   	push   esi
c000622e:	e8 fd a4 ff ff       	call   c0000730 <strchr>
c0006233:	83 c4 10             	add    esp,0x10
c0006236:	89 c5                	mov    ebp,eax
c0006238:	85 c0                	test   eax,eax
c000623a:	74 3a                	je     c0006276 <find_object_path+0x5a>
c000623c:	39 ee                	cmp    esi,ebp
c000623e:	74 31                	je     c0006271 <find_object_path+0x55>
c0006240:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006243:	e8 cb fb ff ff       	call   c0005e13 <iso_733>
c0006248:	89 c2                	mov    edx,eax
c000624a:	8d 43 02             	lea    eax,[ebx+0x2]
c000624d:	e8 c1 fb ff ff       	call   c0005e13 <iso_733>
c0006252:	83 ec 0c             	sub    esp,0xc
c0006255:	89 c1                	mov    ecx,eax
c0006257:	52                   	push   edx
c0006258:	89 f0                	mov    eax,esi
c000625a:	ba 01 00 00 00       	mov    edx,0x1
c000625f:	e8 f9 fd ff ff       	call   c000605d <find_object>
c0006264:	83 c4 10             	add    esp,0x10
c0006267:	89 c3                	mov    ebx,eax
c0006269:	85 c0                	test   eax,eax
c000626b:	75 04                	jne    c0006271 <find_object_path+0x55>
c000626d:	31 db                	xor    ebx,ebx
c000626f:	eb 36                	jmp    c00062a7 <find_object_path+0x8b>
c0006271:	8d 75 01             	lea    esi,[ebp+0x1]
c0006274:	eb b3                	jmp    c0006229 <find_object_path+0xd>
c0006276:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006279:	74 28                	je     c00062a3 <find_object_path+0x87>
c000627b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000627e:	e8 90 fb ff ff       	call   c0005e13 <iso_733>
c0006283:	89 c2                	mov    edx,eax
c0006285:	8d 43 02             	lea    eax,[ebx+0x2]
c0006288:	e8 86 fb ff ff       	call   c0005e13 <iso_733>
c000628d:	83 ec 0c             	sub    esp,0xc
c0006290:	89 c1                	mov    ecx,eax
c0006292:	52                   	push   edx
c0006293:	89 f0                	mov    eax,esi
c0006295:	89 fa                	mov    edx,edi
c0006297:	e8 c1 fd ff ff       	call   c000605d <find_object>
c000629c:	83 c4 10             	add    esp,0x10
c000629f:	89 c3                	mov    ebx,eax
c00062a1:	eb 04                	jmp    c00062a7 <find_object_path+0x8b>
c00062a3:	85 ff                	test   edi,edi
c00062a5:	74 c6                	je     c000626d <find_object_path+0x51>
c00062a7:	83 c4 0c             	add    esp,0xc
c00062aa:	89 d8                	mov    eax,ebx
c00062ac:	5b                   	pop    ebx
c00062ad:	5e                   	pop    esi
c00062ae:	5f                   	pop    edi
c00062af:	5d                   	pop    ebp
c00062b0:	c3                   	ret    

c00062b1 <stricmp>:
c00062b1:	57                   	push   edi
c00062b2:	56                   	push   esi
c00062b3:	31 f6                	xor    esi,esi
c00062b5:	53                   	push   ebx
c00062b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062ba:	83 ec 0c             	sub    esp,0xc
c00062bd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062c5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062c9:	50                   	push   eax
c00062ca:	e8 e1 a5 ff ff       	call   c00008b0 <toupper>
c00062cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00062d2:	e8 f9 a5 ff ff       	call   c00008d0 <tolower>
c00062d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062da:	89 c3                	mov    ebx,eax
c00062dc:	e8 cf a5 ff ff       	call   c00008b0 <toupper>
c00062e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00062e4:	e8 e7 a5 ff ff       	call   c00008d0 <tolower>
c00062e9:	83 c4 10             	add    esp,0x10
c00062ec:	39 c3                	cmp    ebx,eax
c00062ee:	75 05                	jne    c00062f5 <stricmp+0x44>
c00062f0:	46                   	inc    esi
c00062f1:	85 db                	test   ebx,ebx
c00062f3:	75 c1                	jne    c00062b6 <stricmp+0x5>
c00062f5:	29 c3                	sub    ebx,eax
c00062f7:	89 d8                	mov    eax,ebx
c00062f9:	5b                   	pop    ebx
c00062fa:	5e                   	pop    esi
c00062fb:	5f                   	pop    edi
c00062fc:	c3                   	ret    

c00062fd <iso_open>:
c00062fd:	57                   	push   edi
c00062fe:	31 c0                	xor    eax,eax
c0006300:	56                   	push   esi
c0006301:	b9 80 1e 02 c0       	mov    ecx,0xc0021e80
c0006306:	53                   	push   ebx
c0006307:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000630c:	0f 95 c0             	setne  al
c000630f:	89 c2                	mov    edx,eax
c0006311:	89 c6                	mov    esi,eax
c0006313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006317:	e8 00 ff ff ff       	call   c000621c <find_object_path>
c000631c:	83 ca ff             	or     edx,0xffffffff
c000631f:	85 c0                	test   eax,eax
c0006321:	74 5e                	je     c0006381 <iso_open+0x84>
c0006323:	89 c1                	mov    ecx,eax
c0006325:	31 d2                	xor    edx,edx
c0006327:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000632d:	83 bf 40 15 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdeac0],0x0
c0006334:	75 42                	jne    c0006378 <iso_open+0x7b>
c0006336:	8d 41 02             	lea    eax,[ecx+0x2]
c0006339:	c7 87 40 15 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdeac0],0xffffffff
c0006343:	e8 cb fa ff ff       	call   c0005e13 <iso_733>
c0006348:	89 b7 44 15 02 c0    	mov    DWORD PTR [edi-0x3ffdeabc],esi
c000634e:	89 87 40 15 02 c0    	mov    DWORD PTR [edi-0x3ffdeac0],eax
c0006354:	c7 87 48 15 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdeab8],0x0
c000635e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006361:	e8 ad fa ff ff       	call   c0005e13 <iso_733>
c0006366:	c7 87 d0 15 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdea30],0x0
c0006370:	89 87 4c 15 02 c0    	mov    DWORD PTR [edi-0x3ffdeab4],eax
c0006376:	eb 09                	jmp    c0006381 <iso_open+0x84>
c0006378:	42                   	inc    edx
c0006379:	83 fa 10             	cmp    edx,0x10
c000637c:	75 a9                	jne    c0006327 <iso_open+0x2a>
c000637e:	83 ca ff             	or     edx,0xffffffff
c0006381:	5b                   	pop    ebx
c0006382:	89 d0                	mov    eax,edx
c0006384:	5e                   	pop    esi
c0006385:	5f                   	pop    edi
c0006386:	c3                   	ret    

c0006387 <iso_close>:
c0006387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000638b:	83 f8 0f             	cmp    eax,0xf
c000638e:	7f 10                	jg     c00063a0 <iso_close+0x19>
c0006390:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006396:	c7 80 40 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdeac0],0x0
c00063a0:	e9 70 fa ff ff       	jmp    c0005e15 <bclear_cache>

c00063a5 <iso_read>:
c00063a5:	55                   	push   ebp
c00063a6:	57                   	push   edi
c00063a7:	56                   	push   esi
c00063a8:	53                   	push   ebx
c00063a9:	83 ec 1c             	sub    esp,0x1c
c00063ac:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063b0:	83 fd 0f             	cmp    ebp,0xf
c00063b3:	7e 0a                	jle    c00063bf <iso_read+0x1a>
c00063b5:	83 c8 ff             	or     eax,0xffffffff
c00063b8:	89 c2                	mov    edx,eax
c00063ba:	e9 f4 00 00 00       	jmp    c00064b3 <iso_read+0x10e>
c00063bf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063c5:	83 bd 40 15 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdeac0],0x0
c00063cc:	74 e7                	je     c00063b5 <iso_read+0x10>
c00063ce:	8b 95 d0 15 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdea30]
c00063d4:	85 d2                	test   edx,edx
c00063d6:	75 dd                	jne    c00063b5 <iso_read+0x10>
c00063d8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063dd:	0f 84 cd 00 00 00    	je     c00064b0 <iso_read+0x10b>
c00063e3:	8b 85 48 15 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdeab8]
c00063e9:	8b 8d 4c 15 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdeab4]
c00063ef:	29 c1                	sub    ecx,eax
c00063f1:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00063f5:	76 04                	jbe    c00063fb <iso_read+0x56>
c00063f7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00063fb:	85 c9                	test   ecx,ecx
c00063fd:	0f 84 ad 00 00 00    	je     c00064b0 <iso_read+0x10b>
c0006403:	89 c6                	mov    esi,eax
c0006405:	bb 00 08 00 00       	mov    ebx,0x800
c000640a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006410:	c1 e8 0b             	shr    eax,0xb
c0006413:	29 f3                	sub    ebx,esi
c0006415:	03 85 40 15 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdeac0]
c000641b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006421:	7e 3f                	jle    c0006462 <iso_read+0xbd>
c0006423:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006429:	75 37                	jne    c0006462 <iso_read+0xbd>
c000642b:	be 20 00 00 00       	mov    esi,0x20
c0006430:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006436:	7f 05                	jg     c000643d <iso_read+0x98>
c0006438:	89 ce                	mov    esi,ecx
c000643a:	c1 fe 0b             	sar    esi,0xb
c000643d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006441:	89 f3                	mov    ebx,esi
c0006443:	c1 e3 0b             	shl    ebx,0xb
c0006446:	52                   	push   edx
c0006447:	56                   	push   esi
c0006448:	50                   	push   eax
c0006449:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000644d:	e8 11 fb ff ff       	call   c0005f63 <isoReadDiscSector>
c0006452:	83 c4 10             	add    esp,0x10
c0006455:	85 c0                	test   eax,eax
c0006457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000645b:	7f 3e                	jg     c000649b <iso_read+0xf6>
c000645d:	e9 53 ff ff ff       	jmp    c00063b5 <iso_read+0x10>
c0006462:	39 cb                	cmp    ebx,ecx
c0006464:	7e 02                	jle    c0006468 <iso_read+0xc3>
c0006466:	89 cb                	mov    ebx,ecx
c0006468:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000646c:	e8 84 fb ff ff       	call   c0005ff5 <bdread>
c0006471:	85 c0                	test   eax,eax
c0006473:	0f 88 3c ff ff ff    	js     c00063b5 <iso_read+0x10>
c0006479:	8b 0c 85 20 10 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdefe0]
c0006480:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006484:	8b 85 48 15 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdeab8]
c000648a:	25 ff 07 00 00       	and    eax,0x7ff
c000648f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006493:	89 d9                	mov    ecx,ebx
c0006495:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006497:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000649b:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c000649f:	01 9d 48 15 02 c0    	add    DWORD PTR [ebp-0x3ffdeab8],ebx
c00064a5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064a9:	01 da                	add    edx,ebx
c00064ab:	e9 28 ff ff ff       	jmp    c00063d8 <iso_read+0x33>
c00064b0:	89 d0                	mov    eax,edx
c00064b2:	99                   	cdq    
c00064b3:	83 c4 1c             	add    esp,0x1c
c00064b6:	5b                   	pop    ebx
c00064b7:	5e                   	pop    esi
c00064b8:	5f                   	pop    edi
c00064b9:	5d                   	pop    ebp
c00064ba:	c3                   	ret    

c00064bb <iso_seek>:
c00064bb:	55                   	push   ebp
c00064bc:	83 c8 ff             	or     eax,0xffffffff
c00064bf:	57                   	push   edi
c00064c0:	89 c2                	mov    edx,eax
c00064c2:	56                   	push   esi
c00064c3:	53                   	push   ebx
c00064c4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064c8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064d0:	83 fe 0f             	cmp    esi,0xf
c00064d3:	7f 65                	jg     c000653a <iso_seek+0x7f>
c00064d5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064db:	8d 8d 40 15 02 c0    	lea    ecx,[ebp-0x3ffdeac0]
c00064e1:	83 bd 40 15 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdeac0],0x0
c00064e8:	74 50                	je     c000653a <iso_seek+0x7f>
c00064ea:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00064f1:	75 47                	jne    c000653a <iso_seek+0x7f>
c00064f3:	83 fb 01             	cmp    ebx,0x1
c00064f6:	74 0e                	je     c0006506 <iso_seek+0x4b>
c00064f8:	83 fb 02             	cmp    ebx,0x2
c00064fb:	74 0e                	je     c000650b <iso_seek+0x50>
c00064fd:	85 db                	test   ebx,ebx
c00064ff:	75 39                	jne    c000653a <iso_seek+0x7f>
c0006501:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006504:	eb 0d                	jmp    c0006513 <iso_seek+0x58>
c0006506:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006509:	eb 08                	jmp    c0006513 <iso_seek+0x58>
c000650b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000650e:	01 f8                	add    eax,edi
c0006510:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006513:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006519:	8b 88 4c 15 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdeab4]
c000651f:	05 40 15 02 c0       	add    eax,0xc0021540
c0006524:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006527:	76 03                	jbe    c000652c <iso_seek+0x71>
c0006529:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000652c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006532:	8b 82 48 15 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdeab8]
c0006538:	31 d2                	xor    edx,edx
c000653a:	5b                   	pop    ebx
c000653b:	5e                   	pop    esi
c000653c:	5f                   	pop    edi
c000653d:	5d                   	pop    ebp
c000653e:	c3                   	ret    

c000653f <iso_tell>:
c000653f:	83 c8 ff             	or     eax,0xffffffff
c0006542:	53                   	push   ebx
c0006543:	89 c2                	mov    edx,eax
c0006545:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006549:	83 f9 0f             	cmp    ecx,0xf
c000654c:	7f 20                	jg     c000656e <iso_tell+0x2f>
c000654e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006554:	83 bb 40 15 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdeac0],0x0
c000655b:	74 11                	je     c000656e <iso_tell+0x2f>
c000655d:	83 bb d0 15 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdea30],0x0
c0006564:	75 08                	jne    c000656e <iso_tell+0x2f>
c0006566:	8b 83 48 15 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdeab8]
c000656c:	31 d2                	xor    edx,edx
c000656e:	5b                   	pop    ebx
c000656f:	c3                   	ret    

c0006570 <iso_total>:
c0006570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006574:	83 c8 ff             	or     eax,0xffffffff
c0006577:	83 fa 0f             	cmp    edx,0xf
c000657a:	7f 1e                	jg     c000659a <iso_total+0x2a>
c000657c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006582:	83 ba 40 15 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdeac0],0x0
c0006589:	74 0f                	je     c000659a <iso_total+0x2a>
c000658b:	83 ba d0 15 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdea30],0x0
c0006592:	75 06                	jne    c000659a <iso_total+0x2a>
c0006594:	8b 82 4c 15 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdeab4]
c000659a:	c3                   	ret    

c000659b <fn_postprocess>:
c000659b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000659f:	89 d0                	mov    eax,edx
c00065a1:	8a 08                	mov    cl,BYTE PTR [eax]
c00065a3:	80 f9 3b             	cmp    cl,0x3b
c00065a6:	74 07                	je     c00065af <fn_postprocess+0x14>
c00065a8:	84 c9                	test   cl,cl
c00065aa:	74 03                	je     c00065af <fn_postprocess+0x14>
c00065ac:	40                   	inc    eax
c00065ad:	eb f2                	jmp    c00065a1 <fn_postprocess+0x6>
c00065af:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065b2:	39 d0                	cmp    eax,edx
c00065b4:	76 0a                	jbe    c00065c0 <fn_postprocess+0x25>
c00065b6:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065ba:	75 04                	jne    c00065c0 <fn_postprocess+0x25>
c00065bc:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065c0:	c3                   	ret    

c00065c1 <iso_readdir>:
c00065c1:	55                   	push   ebp
c00065c2:	57                   	push   edi
c00065c3:	56                   	push   esi
c00065c4:	53                   	push   ebx
c00065c5:	83 ec 1c             	sub    esp,0x1c
c00065c8:	83 7c 24 30 0f       	cmp    DWORD PTR [esp+0x30],0xf
c00065cd:	7e 07                	jle    c00065d6 <iso_readdir+0x15>
c00065cf:	31 c0                	xor    eax,eax
c00065d1:	e9 d4 01 00 00       	jmp    c00067aa <iso_readdir+0x1e9>
c00065d6:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00065de:	8d b0 40 15 02 c0    	lea    esi,[eax-0x3ffdeac0]
c00065e4:	83 b8 40 15 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdeac0],0x0
c00065eb:	74 e2                	je     c00065cf <iso_readdir+0xe>
c00065ed:	83 7e 04 00          	cmp    DWORD PTR [esi+0x4],0x0
c00065f1:	74 dc                	je     c00065cf <iso_readdir+0xe>
c00065f3:	83 be 90 00 00 00 00 	cmp    DWORD PTR [esi+0x90],0x0
c00065fa:	75 d3                	jne    c00065cf <iso_readdir+0xe>
c00065fc:	31 db                	xor    ebx,ebx
c00065fe:	83 c8 ff             	or     eax,0xffffffff
c0006601:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0006604:	3b 56 0c             	cmp    edx,DWORD PTR [esi+0xc]
c0006607:	73 3c                	jae    c0006645 <iso_readdir+0x84>
c0006609:	c1 ea 0b             	shr    edx,0xb
c000660c:	8b 06                	mov    eax,DWORD PTR [esi]
c000660e:	01 d0                	add    eax,edx
c0006610:	e8 d7 f9 ff ff       	call   c0005fec <biread>
c0006615:	85 c0                	test   eax,eax
c0006617:	78 b6                	js     c00065cf <iso_readdir+0xe>
c0006619:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000661c:	8b 1c 85 80 10 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdef80]
c0006623:	89 d1                	mov    ecx,edx
c0006625:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c000662b:	8d 5c 0b 04          	lea    ebx,[ebx+ecx*1+0x4]
c000662f:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006632:	75 11                	jne    c0006645 <iso_readdir+0x84>
c0006634:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c000663a:	81 c2 00 08 00 00    	add    edx,0x800
c0006640:	89 56 08             	mov    DWORD PTR [esi+0x8],edx
c0006643:	eb bc                	jmp    c0006601 <iso_readdir+0x40>
c0006645:	69 54 24 30 94 00 00 00 	imul   edx,DWORD PTR [esp+0x30],0x94
c000664d:	8b b2 48 15 02 c0    	mov    esi,DWORD PTR [edx-0x3ffdeab8]
c0006653:	81 c2 40 15 02 c0    	add    edx,0xc0021540
c0006659:	3b 72 0c             	cmp    esi,DWORD PTR [edx+0xc]
c000665c:	0f 83 6d ff ff ff    	jae    c00065cf <iso_readdir+0xe>
c0006662:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006666:	75 38                	jne    c00066a0 <iso_readdir+0xdf>
c0006668:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c000666c:	75 32                	jne    c00066a0 <iso_readdir+0xdf>
c000666e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0006671:	8b 1c 85 80 10 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdef80]
c0006678:	01 f1                	add    ecx,esi
c000667a:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c000667d:	89 c8                	mov    eax,ecx
c000667f:	25 ff 07 00 00       	and    eax,0x7ff
c0006684:	0f b6 44 03 04       	movzx  eax,BYTE PTR [ebx+eax*1+0x4]
c0006689:	01 c8                	add    eax,ecx
c000668b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000668e:	25 ff 07 00 00       	and    eax,0x7ff
c0006693:	8d 5c 03 04          	lea    ebx,[ebx+eax*1+0x4]
c0006697:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c000669a:	0f 84 2f ff ff ff    	je     c00065cf <iso_readdir+0xe>
c00066a0:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00066a8:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00066ac:	8d 53 21             	lea    edx,[ebx+0x21]
c00066af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00066b3:	8d a8 58 15 02 c0    	lea    ebp,[eax-0x3ffdeaa8]
c00066b9:	83 3d b4 1e 02 c0 00 	cmp    DWORD PTR ds:0xc0021eb4,0x0
c00066c0:	74 0c                	je     c00066ce <iso_readdir+0x10d>
c00066c2:	89 e8                	mov    eax,ebp
c00066c4:	e8 9d f6 ff ff       	call   c0005d66 <ucs2utfn>
c00066c9:	e9 9e 00 00 00       	jmp    c000676c <iso_readdir+0x1ab>
c00066ce:	56                   	push   esi
c00066cf:	51                   	push   ecx
c00066d0:	52                   	push   edx
c00066d1:	55                   	push   ebp
c00066d2:	e8 59 9f ff ff       	call   c0000630 <strncpy>
c00066d7:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066df:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00066e2:	c6 84 07 58 15 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdeaa8],0x0
c00066ea:	e8 ac fe ff ff       	call   c000659b <fn_postprocess>
c00066ef:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066f3:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00066f6:	83 c4 10             	add    esp,0x10
c00066f9:	29 c6                	sub    esi,eax
c00066fb:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c00066ff:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006703:	74 05                	je     c000670a <iso_readdir+0x149>
c0006705:	83 ee 21             	sub    esi,0x21
c0006708:	eb 04                	jmp    c000670e <iso_readdir+0x14d>
c000670a:	47                   	inc    edi
c000670b:	83 ee 22             	sub    esi,0x22
c000670e:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c0006716:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000671a:	83 fe 03             	cmp    esi,0x3
c000671d:	7e 4d                	jle    c000676c <iso_readdir+0x1ab>
c000671f:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006722:	48                   	dec    eax
c0006723:	3c 01                	cmp    al,0x1
c0006725:	77 45                	ja     c000676c <iso_readdir+0x1ab>
c0006727:	52                   	push   edx
c0006728:	6a 02                	push   0x2
c000672a:	68 60 d4 01 c0       	push   0xc001d460
c000672f:	57                   	push   edi
c0006730:	e8 2b a0 ff ff       	call   c0000760 <strncmp>
c0006735:	83 c4 10             	add    esp,0x10
c0006738:	85 c0                	test   eax,eax
c000673a:	75 26                	jne    c0006762 <iso_readdir+0x1a1>
c000673c:	50                   	push   eax
c000673d:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006741:	83 e8 05             	sub    eax,0x5
c0006744:	50                   	push   eax
c0006745:	8d 47 05             	lea    eax,[edi+0x5]
c0006748:	50                   	push   eax
c0006749:	55                   	push   ebp
c000674a:	e8 e1 9e ff ff       	call   c0000630 <strncpy>
c000674f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006753:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006757:	83 c4 10             	add    esp,0x10
c000675a:	c6 84 08 53 15 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdeaad],0x0
c0006762:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006766:	29 c6                	sub    esi,eax
c0006768:	01 c7                	add    edi,eax
c000676a:	eb ae                	jmp    c000671a <iso_readdir+0x159>
c000676c:	83 c8 ff             	or     eax,0xffffffff
c000676f:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006773:	89 c2                	mov    edx,eax
c0006775:	75 0a                	jne    c0006781 <iso_readdir+0x1c0>
c0006777:	8d 43 0a             	lea    eax,[ebx+0xa]
c000677a:	e8 94 f6 ff ff       	call   c0005e13 <iso_733>
c000677f:	31 d2                	xor    edx,edx
c0006781:	69 4c 24 30 94 00 00 00 	imul   ecx,DWORD PTR [esp+0x30],0x94
c0006789:	89 81 50 15 02 c0    	mov    DWORD PTR [ecx-0x3ffdeab0],eax
c000678f:	89 91 54 15 02 c0    	mov    DWORD PTR [ecx-0x3ffdeaac],edx
c0006795:	81 c1 40 15 02 c0    	add    ecx,0xc0021540
c000679b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000679e:	01 41 08             	add    DWORD PTR [ecx+0x8],eax
c00067a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a5:	05 50 15 02 c0       	add    eax,0xc0021550
c00067aa:	83 c4 1c             	add    esp,0x1c
c00067ad:	5b                   	pop    ebx
c00067ae:	5e                   	pop    esi
c00067af:	5f                   	pop    edi
c00067b0:	5d                   	pop    ebp
c00067b1:	c3                   	ret    

c00067b2 <iso_reset>:
c00067b2:	e8 9f f6 ff ff       	call   c0005e56 <iso_break_all>
c00067b7:	e8 98 f6 ff ff       	call   c0005e54 <bclear>
c00067bc:	31 c0                	xor    eax,eax
c00067be:	c3                   	ret    

c00067bf <init_percd>:
c00067bf:	57                   	push   edi
c00067c0:	56                   	push   esi
c00067c1:	53                   	push   ebx
c00067c2:	bb 01 00 00 00       	mov    ebx,0x1
c00067c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00067cb:	a2 60 10 02 c0       	mov    ds:0xc0021060,al
c00067d0:	e8 dd ff ff ff       	call   c00067b2 <iso_reset>
c00067d5:	c7 05 b4 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021eb4,0x0
c00067df:	a1 ac 1e 02 c0       	mov    eax,ds:0xc0021eac
c00067e4:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c00067e8:	e8 ff f7 ff ff       	call   c0005fec <biread>
c00067ed:	89 c6                	mov    esi,eax
c00067ef:	85 c0                	test   eax,eax
c00067f1:	0f 88 ba 00 00 00    	js     c00068b1 <init_percd+0xf2>
c00067f7:	8b 04 85 80 10 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdef80]
c00067fe:	83 c0 04             	add    eax,0x4
c0006801:	52                   	push   edx
c0006802:	6a 06                	push   0x6
c0006804:	68 63 d4 01 c0       	push   0xc001d463
c0006809:	50                   	push   eax
c000680a:	e8 81 9b ff ff       	call   c0000390 <memcmp>
c000680f:	83 c4 10             	add    esp,0x10
c0006812:	85 c0                	test   eax,eax
c0006814:	74 08                	je     c000681e <init_percd+0x5f>
c0006816:	43                   	inc    ebx
c0006817:	83 fb 04             	cmp    ebx,0x4
c000681a:	75 c3                	jne    c00067df <init_percd+0x20>
c000681c:	eb 1a                	jmp    c0006838 <init_percd+0x79>
c000681e:	8b 04 b5 80 10 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdef80]
c0006825:	83 c0 5c             	add    eax,0x5c
c0006828:	e8 b7 f5 ff ff       	call   c0005de4 <isjoliet>
c000682d:	a3 b4 1e 02 c0       	mov    ds:0xc0021eb4,eax
c0006832:	85 c0                	test   eax,eax
c0006834:	74 e0                	je     c0006816 <init_percd+0x57>
c0006836:	eb 3e                	jmp    c0006876 <init_percd+0xb7>
c0006838:	83 3d b4 1e 02 c0 00 	cmp    DWORD PTR ds:0xc0021eb4,0x0
c000683f:	75 35                	jne    c0006876 <init_percd+0xb7>
c0006841:	a1 ac 1e 02 c0       	mov    eax,ds:0xc0021eac
c0006846:	83 c0 10             	add    eax,0x10
c0006849:	e8 9e f7 ff ff       	call   c0005fec <biread>
c000684e:	89 c6                	mov    esi,eax
c0006850:	85 c0                	test   eax,eax
c0006852:	78 5f                	js     c00068b3 <init_percd+0xf4>
c0006854:	83 cb ff             	or     ebx,0xffffffff
c0006857:	50                   	push   eax
c0006858:	8b 04 b5 80 10 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdef80]
c000685f:	6a 06                	push   0x6
c0006861:	83 c0 04             	add    eax,0x4
c0006864:	68 6a d4 01 c0       	push   0xc001d46a
c0006869:	50                   	push   eax
c000686a:	e8 21 9b ff ff       	call   c0000390 <memcmp>
c000686f:	83 c4 10             	add    esp,0x10
c0006872:	85 c0                	test   eax,eax
c0006874:	75 3d                	jne    c00068b3 <init_percd+0xf4>
c0006876:	8b 34 b5 80 10 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdef80]
c000687d:	bf 80 1e 02 c0       	mov    edi,0xc0021e80
c0006882:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006888:	b9 22 00 00 00       	mov    ecx,0x22
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	b8 82 1e 02 c0       	mov    eax,0xc0021e82
c0006894:	31 db                	xor    ebx,ebx
c0006896:	e8 78 f5 ff ff       	call   c0005e13 <iso_733>
c000689b:	a3 a8 1e 02 c0       	mov    ds:0xc0021ea8,eax
c00068a0:	b8 8a 1e 02 c0       	mov    eax,0xc0021e8a
c00068a5:	e8 69 f5 ff ff       	call   c0005e13 <iso_733>
c00068aa:	a3 a4 1e 02 c0       	mov    ds:0xc0021ea4,eax
c00068af:	eb 02                	jmp    c00068b3 <init_percd+0xf4>
c00068b1:	89 c3                	mov    ebx,eax
c00068b3:	89 d8                	mov    eax,ebx
c00068b5:	5b                   	pop    ebx
c00068b6:	5e                   	pop    esi
c00068b7:	5f                   	pop    edi
c00068b8:	c3                   	ret    

c00068b9 <iso_ioctl>:
c00068b9:	e8 f4 fe ff ff       	call   c00067b2 <iso_reset>
c00068be:	31 c0                	xor    eax,eax
c00068c0:	c3                   	ret    

c00068c1 <fs_iso9660_init>:
c00068c1:	53                   	push   ebx
c00068c2:	31 db                	xor    ebx,ebx
c00068c4:	83 ec 0c             	sub    esp,0xc
c00068c7:	68 40 09 00 00       	push   0x940
c00068cc:	6a 00                	push   0x0
c00068ce:	68 40 15 02 c0       	push   0xc0021540
c00068d3:	e8 f8 9b ff ff       	call   c00004d0 <memset>
c00068d8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068df:	c7 05 40 15 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0021540,0xffffffff
c00068e9:	e8 cb 0e 00 00       	call   c00077b9 <malloc>
c00068ee:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068f5:	a3 b0 1e 02 c0       	mov    ds:0xc0021eb0,eax
c00068fa:	e8 ba 0e 00 00       	call   c00077b9 <malloc>
c00068ff:	83 c4 10             	add    esp,0x10
c0006902:	a3 20 15 02 c0       	mov    ds:0xc0021520,eax
c0006907:	83 ec 0c             	sub    esp,0xc
c000690a:	68 04 08 00 00       	push   0x804
c000690f:	e8 a5 0e 00 00       	call   c00077b9 <malloc>
c0006914:	89 04 9d 80 10 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdef80],eax
c000691b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006921:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006928:	e8 8c 0e 00 00       	call   c00077b9 <malloc>
c000692d:	83 c4 10             	add    esp,0x10
c0006930:	89 04 9d 20 10 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdefe0],eax
c0006937:	43                   	inc    ebx
c0006938:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c000693e:	83 fb 10             	cmp    ebx,0x10
c0006941:	75 c4                	jne    c0006907 <fs_iso9660_init+0x46>
c0006943:	31 c0                	xor    eax,eax
c0006945:	83 c4 08             	add    esp,0x8
c0006948:	5b                   	pop    ebx
c0006949:	c3                   	ret    

c000694a <fs_iso9660_shutdown>:
c000694a:	53                   	push   ebx
c000694b:	31 db                	xor    ebx,ebx
c000694d:	83 ec 08             	sub    esp,0x8
c0006950:	83 ec 0c             	sub    esp,0xc
c0006953:	ff 34 9d 80 10 02 c0 	push   DWORD PTR [ebx*4-0x3ffdef80]
c000695a:	e8 6a 0e 00 00       	call   c00077c9 <free>
c000695f:	58                   	pop    eax
c0006960:	ff 34 9d 20 10 02 c0 	push   DWORD PTR [ebx*4-0x3ffdefe0]
c0006967:	43                   	inc    ebx
c0006968:	e8 5c 0e 00 00       	call   c00077c9 <free>
c000696d:	83 c4 10             	add    esp,0x10
c0006970:	83 fb 10             	cmp    ebx,0x10
c0006973:	75 db                	jne    c0006950 <fs_iso9660_shutdown+0x6>
c0006975:	a1 b0 1e 02 c0       	mov    eax,ds:0xc0021eb0
c000697a:	85 c0                	test   eax,eax
c000697c:	74 0c                	je     c000698a <fs_iso9660_shutdown+0x40>
c000697e:	83 ec 0c             	sub    esp,0xc
c0006981:	50                   	push   eax
c0006982:	e8 42 0e 00 00       	call   c00077c9 <free>
c0006987:	83 c4 10             	add    esp,0x10
c000698a:	a1 20 15 02 c0       	mov    eax,ds:0xc0021520
c000698f:	85 c0                	test   eax,eax
c0006991:	74 0c                	je     c000699f <fs_iso9660_shutdown+0x55>
c0006993:	83 ec 0c             	sub    esp,0xc
c0006996:	50                   	push   eax
c0006997:	e8 2d 0e 00 00       	call   c00077c9 <free>
c000699c:	83 c4 10             	add    esp,0x10
c000699f:	c7 05 20 15 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021520,0x0
c00069a9:	c7 05 b0 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021eb0,0x0
c00069b3:	31 c0                	xor    eax,eax
c00069b5:	83 c4 08             	add    esp,0x8
c00069b8:	5b                   	pop    ebx
c00069b9:	c3                   	ret    

c00069ba <Computer::close(int, int, void*)>:
c00069ba:	57                   	push   edi
c00069bb:	56                   	push   esi
c00069bc:	53                   	push   ebx
c00069bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00069c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00069c5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00069c9:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069cf:	83 ec 0c             	sub    esp,0xc
c00069d2:	50                   	push   eax
c00069d3:	e8 b2 50 00 00       	call   c000ba8a <Device::closeAll()>
c00069d8:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069de:	83 c4 10             	add    esp,0x10
c00069e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00069e3:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c00069e7:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c00069ef:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00069f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00069f7:	5b                   	pop    ebx
c00069f8:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00069fb:	5e                   	pop    esi
c00069fc:	5f                   	pop    edi
c00069fd:	ff e0                	jmp    eax

c00069ff <Krnl::firstTask()>:
c00069ff:	53                   	push   ebx
c0006a00:	83 ec 14             	sub    esp,0x14
c0006a03:	fb                   	sti    
c0006a04:	68 71 d4 01 c0       	push   0xc001d471
c0006a09:	e8 29 91 00 00       	call   c000fb37 <KeSetBootMessage(char const*)>
c0006a0e:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006a15:	e8 9f 0d 00 00       	call   c00077b9 <malloc>
c0006a1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006a21:	89 c3                	mov    ebx,eax
c0006a23:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0006a28:	50                   	push   eax
c0006a29:	68 8a d4 01 c0       	push   0xc001d48a
c0006a2e:	6a 01                	push   0x1
c0006a30:	53                   	push   ebx
c0006a31:	e8 26 c9 00 00       	call   c001335c <Process::Process(bool, char const*, Process*, char**)>
c0006a36:	83 c4 20             	add    esp,0x20
c0006a39:	68 ff 00 00 00       	push   0xff
c0006a3e:	6a 00                	push   0x0
c0006a40:	68 0f 72 00 c0       	push   0xc000720f
c0006a45:	53                   	push   ebx
c0006a46:	e8 39 cb 00 00       	call   c0013584 <Process::createThread(void (*)(void*), void*, int)>
c0006a4b:	8b 15 90 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025190
c0006a51:	6a 7a                	push   0x7a
c0006a53:	6a 00                	push   0x0
c0006a55:	68 d8 3f 01 c0       	push   0xc0013fd8
c0006a5a:	52                   	push   edx
c0006a5b:	e8 24 cb 00 00       	call   c0013584 <Process::createThread(void (*)(void*), void*, int)>
c0006a60:	83 c4 14             	add    esp,0x14
c0006a63:	a3 48 51 02 c0       	mov    ds:0xc0025148,eax
c0006a68:	68 88 d5 01 c0       	push   0xc001d588
c0006a6d:	c6 05 bd 1e 02 c0 01 	mov    BYTE PTR ds:0xc0021ebd,0x1
c0006a74:	e8 be 90 00 00       	call   c000fb37 <KeSetBootMessage(char const*)>
c0006a79:	e8 39 d9 00 00       	call   c00143b7 <Vm::initialise8086()>
c0006a7e:	e8 4b 3e 00 00       	call   c000a8ce <Fs::initVFS()>
c0006a83:	c7 04 24 97 d4 01 c0 	mov    DWORD PTR [esp],0xc001d497
c0006a8a:	e8 a8 90 00 00       	call   c000fb37 <KeSetBootMessage(char const*)>
c0006a8f:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0006a94:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006a9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a9c:	6a 00                	push   0x0
c0006a9e:	6a 00                	push   0x0
c0006aa0:	6a 00                	push   0x0
c0006aa2:	50                   	push   eax
c0006aa3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006aa6:	83 c4 14             	add    esp,0x14
c0006aa9:	68 88 d5 01 c0       	push   0xc001d588
c0006aae:	e8 84 90 00 00       	call   c000fb37 <KeSetBootMessage(char const*)>
c0006ab3:	e8 5a 95 00 00       	call   c0010012 <Krnl::loadSystemEnv()>
c0006ab8:	e8 b7 97 00 00       	call   c0010274 <Krnl::setupPowerManager()>
c0006abd:	83 c4 0c             	add    esp,0xc
c0006ac0:	6a 3a                	push   0x3a
c0006ac2:	68 b1 d4 01 c0       	push   0xc001d4b1
c0006ac7:	68 ba d4 01 c0       	push   0xc001d4ba
c0006acc:	e8 21 ae 00 00       	call   c00118f2 <Reg::readIntWithDefault(char*, char*, int)>
c0006ad1:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ad4:	e8 03 49 00 00       	call   c000b3dc <User::loadClockSettings(int)>
c0006ad9:	c7 04 24 ac d5 01 c0 	mov    DWORD PTR [esp],0xc001d5ac
c0006ae0:	e8 52 90 00 00       	call   c000fb37 <KeSetBootMessage(char const*)>
c0006ae5:	59                   	pop    ecx
c0006ae6:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0006aeb:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006af1:	53                   	push   ebx
c0006af2:	e8 91 4f 00 00       	call   c000ba88 <Device::loadDriversForAll()>
c0006af7:	c7 04 24 c2 d4 01 c0 	mov    DWORD PTR [esp],0xc001d4c2
c0006afe:	e8 34 90 00 00       	call   c000fb37 <KeSetBootMessage(char const*)>
c0006b03:	58                   	pop    eax
c0006b04:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c0006b0a:	5a                   	pop    edx
c0006b0b:	6a 01                	push   0x1
c0006b0d:	68 d3 d4 01 c0       	push   0xc001d4d3
c0006b12:	e8 62 c2 00 00       	call   c0012d79 <Thr::loadDLL(char const*, bool)>
c0006b17:	59                   	pop    ecx
c0006b18:	5a                   	pop    edx
c0006b19:	53                   	push   ebx
c0006b1a:	50                   	push   eax
c0006b1b:	e8 8a c4 00 00       	call   c0012faa <Thr::executeDLL(unsigned long, void*)>
c0006b20:	83 c4 10             	add    esp,0x10
c0006b23:	83 ec 0c             	sub    esp,0xc
c0006b26:	6a 02                	push   0x2
c0006b28:	e8 73 ce 00 00       	call   c00139a0 <blockTask(TaskState)>
c0006b2d:	83 c4 10             	add    esp,0x10
c0006b30:	eb f1                	jmp    c0006b23 <Krnl::firstTask()+0x124>

c0006b32 <Computer::Computer()>:
c0006b32:	83 ec 0c             	sub    esp,0xc
c0006b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b39:	83 ec 08             	sub    esp,0x8
c0006b3c:	68 ef d4 01 c0       	push   0xc001d4ef
c0006b41:	50                   	push   eax
c0006b42:	e8 bd 4f 00 00       	call   c000bb04 <Device::Device(char const*)>
c0006b47:	83 c4 10             	add    esp,0x10
c0006b4a:	ba f8 d5 01 c0       	mov    edx,0xc001d5f8
c0006b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b53:	89 10                	mov    DWORD PTR [eax],edx
c0006b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b59:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b67:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006b71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b75:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006b7b:	83 ca 04             	or     edx,0x4
c0006b7e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b88:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006b8e:	31 d2                	xor    edx,edx
c0006b90:	88 c2                	mov    dl,al
c0006b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b96:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006ba7:	31 d2                	xor    edx,edx
c0006ba9:	88 c2                	mov    dl,al
c0006bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006baf:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006bbe:	8d 50 01             	lea    edx,[eax+0x1]
c0006bc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006bc5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006bcb:	31 d2                	xor    edx,edx
c0006bcd:	88 c2                	mov    dl,al
c0006bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bd3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006bd7:	83 e1 3f             	and    ecx,0x3f
c0006bda:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006bde:	90                   	nop
c0006bdf:	83 c4 0c             	add    esp,0xc
c0006be2:	c3                   	ret    
c0006be3:	90                   	nop

c0006be4 <Computer::setBootMessage(char const*)>:
c0006be4:	c3                   	ret    
c0006be5:	90                   	nop

c0006be6 <Computer::detectFeatures()>:
c0006be6:	55                   	push   ebp
c0006be7:	57                   	push   edi
c0006be8:	56                   	push   esi
c0006be9:	53                   	push   ebx
c0006bea:	83 ec 1c             	sub    esp,0x1c
c0006bed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006bf1:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006bfb:	e8 f9 95 ff ff       	call   c00001f9 <detectCPUID>
c0006c00:	85 c0                	test   eax,eax
c0006c02:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c08:	0f 95 c2             	setne  dl
c0006c0b:	83 e0 fd             	and    eax,0xfffffffd
c0006c0e:	01 d2                	add    edx,edx
c0006c10:	09 d0                	or     eax,edx
c0006c12:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c18:	a8 02                	test   al,0x2
c0006c1a:	75 46                	jne    c0006c62 <Computer::detectFeatures()+0x7c>
c0006c1c:	f6 05 d1 1e 02 c0 04 	test   BYTE PTR ds:0xc0021ed1,0x4
c0006c23:	74 07                	je     c0006c2c <Computer::detectFeatures()+0x46>
c0006c25:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006c2c:	e8 95 51 01 00       	call   c001bdc6 <x87Detect>
c0006c31:	83 e0 01             	and    eax,0x1
c0006c34:	c1 e0 04             	shl    eax,0x4
c0006c37:	88 c2                	mov    dl,al
c0006c39:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c3f:	83 e0 ef             	and    eax,0xffffffef
c0006c42:	09 d0                	or     eax,edx
c0006c44:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c4a:	a8 10                	test   al,0x10
c0006c4c:	0f 85 2a 01 00 00    	jne    c0006d7c <Computer::detectFeatures()+0x196>
c0006c52:	84 c0                	test   al,al
c0006c54:	0f 88 45 01 00 00    	js     c0006d9f <Computer::detectFeatures()+0x1b9>
c0006c5a:	83 c4 1c             	add    esp,0x1c
c0006c5d:	5b                   	pop    ebx
c0006c5e:	5e                   	pop    esi
c0006c5f:	5f                   	pop    edi
c0006c60:	5d                   	pop    ebp
c0006c61:	c3                   	ret    
c0006c62:	83 ec 0c             	sub    esp,0xc
c0006c65:	6a 20                	push   0x20
c0006c67:	e8 f8 83 00 00       	call   c000f064 <CPU::cpuidCheckEDX(unsigned int)>
c0006c6c:	83 e0 01             	and    eax,0x1
c0006c6f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006c76:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c7c:	83 e0 f7             	and    eax,0xfffffff7
c0006c7f:	09 d0                	or     eax,edx
c0006c81:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c87:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006c8e:	e8 d1 83 00 00       	call   c000f064 <CPU::cpuidCheckEDX(unsigned int)>
c0006c93:	83 e0 01             	and    eax,0x1
c0006c96:	88 c2                	mov    dl,al
c0006c98:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006c9e:	83 e0 fe             	and    eax,0xfffffffe
c0006ca1:	09 d0                	or     eax,edx
c0006ca3:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ca9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006cb0:	e8 af 83 00 00       	call   c000f064 <CPU::cpuidCheckEDX(unsigned int)>
c0006cb5:	c1 e0 07             	shl    eax,0x7
c0006cb8:	88 c2                	mov    dl,al
c0006cba:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006cc0:	83 e0 7f             	and    eax,0x7f
c0006cc3:	09 d0                	or     eax,edx
c0006cc5:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ccb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006cd2:	e8 8d 83 00 00       	call   c000f064 <CPU::cpuidCheckEDX(unsigned int)>
c0006cd7:	83 c4 10             	add    esp,0x10
c0006cda:	83 e0 01             	and    eax,0x1
c0006cdd:	c1 e0 05             	shl    eax,0x5
c0006ce0:	88 c2                	mov    dl,al
c0006ce2:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ce8:	83 e0 df             	and    eax,0xffffffdf
c0006ceb:	09 d0                	or     eax,edx
c0006ced:	f7 05 d0 1e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0021ed0,0x401
c0006cf7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cfd:	0f 84 c2 00 00 00    	je     c0006dc5 <Computer::detectFeatures()+0x1df>
c0006d03:	83 e0 fe             	and    eax,0xfffffffe
c0006d06:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d0c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d12:	88 c2                	mov    dl,al
c0006d14:	83 e2 09             	and    edx,0x9
c0006d17:	fe ca                	dec    dl
c0006d19:	75 09                	jne    c0006d24 <Computer::detectFeatures()+0x13e>
c0006d1b:	83 e0 fe             	and    eax,0xfffffffe
c0006d1e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d24:	83 ec 0c             	sub    esp,0xc
c0006d27:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006d2b:	50                   	push   eax
c0006d2c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006d30:	55                   	push   ebp
c0006d31:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006d35:	57                   	push   edi
c0006d36:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006d3a:	56                   	push   esi
c0006d3b:	68 00 00 00 80       	push   0x80000000
c0006d40:	e8 9b 82 00 00       	call   c000efe0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d45:	83 c4 20             	add    esp,0x20
c0006d48:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006d4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006d53:	0f 86 c3 fe ff ff    	jbe    c0006c1c <Computer::detectFeatures()+0x36>
c0006d59:	83 ec 0c             	sub    esp,0xc
c0006d5c:	50                   	push   eax
c0006d5d:	55                   	push   ebp
c0006d5e:	57                   	push   edi
c0006d5f:	56                   	push   esi
c0006d60:	68 01 00 00 80       	push   0x80000001
c0006d65:	e8 76 82 00 00       	call   c000efe0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d6a:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006d74:	83 c4 20             	add    esp,0x20
c0006d77:	e9 a0 fe ff ff       	jmp    c0006c1c <Computer::detectFeatures()+0x36>
c0006d7c:	e8 ff 4f 01 00       	call   c001bd80 <absolutelyNoChanceInHell>
c0006d81:	88 c2                	mov    dl,al
c0006d83:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d89:	c1 e2 07             	shl    edx,0x7
c0006d8c:	83 e0 7f             	and    eax,0x7f
c0006d8f:	09 d0                	or     eax,edx
c0006d91:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d97:	84 c0                	test   al,al
c0006d99:	0f 89 bb fe ff ff    	jns    c0006c5a <Computer::detectFeatures()+0x74>
c0006d9f:	e8 fc 4c 01 00       	call   c001baa0 <avxDetect>
c0006da4:	83 e0 01             	and    eax,0x1
c0006da7:	c1 e0 05             	shl    eax,0x5
c0006daa:	88 c2                	mov    dl,al
c0006dac:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006db2:	83 e0 df             	and    eax,0xffffffdf
c0006db5:	09 d0                	or     eax,edx
c0006db7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006dbd:	83 c4 1c             	add    esp,0x1c
c0006dc0:	5b                   	pop    ebx
c0006dc1:	5e                   	pop    esi
c0006dc2:	5f                   	pop    edi
c0006dc3:	5d                   	pop    ebp
c0006dc4:	c3                   	ret    
c0006dc5:	83 ec 0c             	sub    esp,0xc
c0006dc8:	68 00 02 00 00       	push   0x200
c0006dcd:	e8 92 82 00 00       	call   c000f064 <CPU::cpuidCheckEDX(unsigned int)>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	83 e0 01             	and    eax,0x1
c0006dd8:	88 c2                	mov    dl,al
c0006dda:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006de0:	83 e0 fe             	and    eax,0xfffffffe
c0006de3:	09 d0                	or     eax,edx
c0006de5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006deb:	e9 1c ff ff ff       	jmp    c0006d0c <Computer::detectFeatures()+0x126>

c0006df0 <Computer::displayFeatures()>:
c0006df0:	c3                   	ret    
c0006df1:	90                   	nop

c0006df2 <Computer::rdmsr(unsigned int)>:
c0006df2:	83 ec 0c             	sub    esp,0xc
c0006df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006df9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e00:	74 0a                	je     c0006e0c <Computer::rdmsr(unsigned int)+0x1a>
c0006e02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e06:	0f 32                	rdmsr  
c0006e08:	83 c4 0c             	add    esp,0xc
c0006e0b:	c3                   	ret    
c0006e0c:	83 ec 0c             	sub    esp,0xc
c0006e0f:	68 f8 d4 01 c0       	push   0xc001d4f8
c0006e14:	e8 96 93 00 00       	call   c00101af <KePanic(char const*)>
c0006e19:	83 c4 10             	add    esp,0x10
c0006e1c:	eb e4                	jmp    c0006e02 <Computer::rdmsr(unsigned int)+0x10>

c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006e1e:	57                   	push   edi
c0006e1f:	56                   	push   esi
c0006e20:	52                   	push   edx
c0006e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e25:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006e29:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006e2d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e34:	74 0e                	je     c0006e44 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006e36:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e3a:	89 f0                	mov    eax,esi
c0006e3c:	89 fa                	mov    edx,edi
c0006e3e:	0f 30                	wrmsr  
c0006e40:	58                   	pop    eax
c0006e41:	5e                   	pop    esi
c0006e42:	5f                   	pop    edi
c0006e43:	c3                   	ret    
c0006e44:	83 ec 0c             	sub    esp,0xc
c0006e47:	68 fe d4 01 c0       	push   0xc001d4fe
c0006e4c:	e8 5e 93 00 00       	call   c00101af <KePanic(char const*)>
c0006e51:	83 c4 10             	add    esp,0x10
c0006e54:	eb e0                	jmp    c0006e36 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006e56 <Computer::shutdown()>:
c0006e56:	83 ec 0c             	sub    esp,0xc
c0006e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e5f:	6a 00                	push   0x0
c0006e61:	6a 00                	push   0x0
c0006e63:	6a 00                	push   0x0
c0006e65:	50                   	push   eax
c0006e66:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e69:	83 c4 1c             	add    esp,0x1c
c0006e6c:	c3                   	ret    
c0006e6d:	90                   	nop

c0006e6e <Computer::restart()>:
c0006e6e:	83 ec 0c             	sub    esp,0xc
c0006e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e75:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e77:	6a 00                	push   0x0
c0006e79:	6a 00                	push   0x0
c0006e7b:	6a 01                	push   0x1
c0006e7d:	50                   	push   eax
c0006e7e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e81:	83 c4 1c             	add    esp,0x1c
c0006e84:	c3                   	ret    
c0006e85:	90                   	nop

c0006e86 <Computer::sleep()>:
c0006e86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e8a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006e90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006e94:	e9 43 7c 00 00       	jmp    c000eadc <ACPI::sleep()>
c0006e99:	90                   	nop

c0006e9a <Computer::nmiEnabled()>:
c0006e9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e9e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006ea4:	c3                   	ret    
c0006ea5:	90                   	nop

c0006ea6 <Computer::readCMOS(unsigned char)>:
c0006ea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006eaa:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006eb1:	19 c0                	sbb    eax,eax
c0006eb3:	83 e0 80             	and    eax,0xffffff80
c0006eb6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006eba:	e6 70                	out    0x70,al
c0006ebc:	e4 71                	in     al,0x71
c0006ebe:	c3                   	ret    
c0006ebf:	90                   	nop

c0006ec0 <Computer::enableNMI(bool)>:
c0006ec0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006ec8:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006ece:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006ed6:	eb ce                	jmp    c0006ea6 <Computer::readCMOS(unsigned char)>

c0006ed8 <Computer::open(int, int, void*)>:
c0006ed8:	56                   	push   esi
c0006ed9:	53                   	push   ebx
c0006eda:	83 ec 10             	sub    esp,0x10
c0006edd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006ee1:	f6 05 d0 1e 02 c0 04 	test   BYTE PTR ds:0xc0021ed0,0x4
c0006ee8:	68 04 d5 01 c0       	push   0xc001d504
c0006eed:	0f 94 05 a0 f7 01 c0 	sete   BYTE PTR ds:0xc001f7a0
c0006ef4:	e8 3e 8c 00 00       	call   c000fb37 <KeSetBootMessage(char const*)>
c0006ef9:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006f00:	e8 b4 08 00 00       	call   c00077b9 <malloc>
c0006f05:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f08:	89 c6                	mov    esi,eax
c0006f0a:	e8 65 77 00 00       	call   c000e674 <ACPI::ACPI()>
c0006f0f:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006f15:	58                   	pop    eax
c0006f16:	5a                   	pop    edx
c0006f17:	56                   	push   esi
c0006f18:	53                   	push   ebx
c0006f19:	e8 4e 4a 00 00       	call   c000b96c <Device::addChild(Device*)>
c0006f1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006f21:	e8 c0 fc ff ff       	call   c0006be6 <Computer::detectFeatures()>
c0006f26:	59                   	pop    ecx
c0006f27:	5e                   	pop    esi
c0006f28:	6a 01                	push   0x1
c0006f2a:	53                   	push   ebx
c0006f2b:	e8 90 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006f30:	c7 04 24 1c d5 01 c0 	mov    DWORD PTR [esp],0xc001d51c
c0006f37:	e8 fb 8b 00 00       	call   c000fb37 <KeSetBootMessage(char const*)>
c0006f3c:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006f43:	e8 71 08 00 00       	call   c00077b9 <malloc>
c0006f48:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	e8 ca 81 00 00       	call   c000f11c <CPU::CPU()>
c0006f52:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0006f58:	58                   	pop    eax
c0006f59:	5a                   	pop    edx
c0006f5a:	56                   	push   esi
c0006f5b:	53                   	push   ebx
c0006f5c:	e8 0b 4a 00 00       	call   c000b96c <Device::addChild(Device*)>
c0006f61:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0006f67:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0006f6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f6d:	51                   	push   ecx
c0006f6e:	6a 00                	push   0x0
c0006f70:	6a 00                	push   0x0
c0006f72:	50                   	push   eax
c0006f73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006f76:	83 c4 14             	add    esp,0x14
c0006f79:	68 cc d5 01 c0       	push   0xc001d5cc
c0006f7e:	e8 b4 8b 00 00       	call   c000fb37 <KeSetBootMessage(char const*)>
c0006f83:	e8 66 e5 00 00       	call   c00154ee <HalInitialiseCoprocessor()>
c0006f88:	c7 04 24 36 d5 01 c0 	mov    DWORD PTR [esp],0xc001d536
c0006f8f:	e8 a3 8b 00 00       	call   c000fb37 <KeSetBootMessage(char const*)>
c0006f94:	c7 04 24 ff 69 00 c0 	mov    DWORD PTR [esp],0xc00069ff
c0006f9b:	e8 fc c6 00 00       	call   c001369c <setupMultitasking(void (*)())>
c0006fa0:	83 c4 14             	add    esp,0x14
c0006fa3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006fa8:	5b                   	pop    ebx
c0006fa9:	5e                   	pop    esi
c0006faa:	c3                   	ret    
c0006fab:	90                   	nop

c0006fac <Computer::disableNMI()>:
c0006fac:	6a 00                	push   0x0
c0006fae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006fb2:	50                   	push   eax
c0006fb3:	e8 08 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006fb8:	5a                   	pop    edx
c0006fb9:	59                   	pop    ecx
c0006fba:	c3                   	ret    
c0006fbb:	90                   	nop

c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>:
c0006fbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006fc0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006fc7:	19 c0                	sbb    eax,eax
c0006fc9:	83 e0 80             	and    eax,0xffffff80
c0006fcc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006fd0:	e6 70                	out    0x70,al
c0006fd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006fd6:	e6 71                	out    0x71,al
c0006fd8:	c3                   	ret    
c0006fd9:	90                   	nop

c0006fda <Computer::handleNMI()>:
c0006fda:	56                   	push   esi
c0006fdb:	53                   	push   ebx
c0006fdc:	83 ec 10             	sub    esp,0x10
c0006fdf:	e4 92                	in     al,0x92
c0006fe1:	89 c6                	mov    esi,eax
c0006fe3:	e4 61                	in     al,0x61
c0006fe5:	68 51 d5 01 c0       	push   0xc001d551
c0006fea:	88 c3                	mov    bl,al
c0006fec:	e8 3c 35 00 00       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0006ff1:	83 c4 10             	add    esp,0x10
c0006ff4:	83 e6 10             	and    esi,0x10
c0006ff7:	75 0d                	jne    c0007006 <Computer::handleNMI()+0x2c>
c0006ff9:	f6 c3 40             	test   bl,0x40
c0006ffc:	75 1d                	jne    c000701b <Computer::handleNMI()+0x41>
c0006ffe:	84 db                	test   bl,bl
c0007000:	78 2d                	js     c000702f <Computer::handleNMI()+0x55>
c0007002:	58                   	pop    eax
c0007003:	5b                   	pop    ebx
c0007004:	5e                   	pop    esi
c0007005:	c3                   	ret    
c0007006:	83 ec 0c             	sub    esp,0xc
c0007009:	68 62 d5 01 c0       	push   0xc001d562
c000700e:	e8 9c 91 00 00       	call   c00101af <KePanic(char const*)>
c0007013:	83 c4 10             	add    esp,0x10
c0007016:	f6 c3 40             	test   bl,0x40
c0007019:	74 e3                	je     c0006ffe <Computer::handleNMI()+0x24>
c000701b:	83 ec 0c             	sub    esp,0xc
c000701e:	68 6f d5 01 c0       	push   0xc001d56f
c0007023:	e8 87 91 00 00       	call   c00101af <KePanic(char const*)>
c0007028:	83 c4 10             	add    esp,0x10
c000702b:	84 db                	test   bl,bl
c000702d:	79 d3                	jns    c0007002 <Computer::handleNMI()+0x28>
c000702f:	c7 44 24 10 79 d5 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d579
c0007037:	5a                   	pop    edx
c0007038:	5b                   	pop    ebx
c0007039:	5e                   	pop    esi
c000703a:	e9 70 91 00 00       	jmp    c00101af <KePanic(char const*)>
c000703f:	90                   	nop

c0007040 <GDTEntry::setBase(unsigned int)>:
c0007040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007044:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007048:	89 c1                	mov    ecx,eax
c000704a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000704e:	c1 e9 10             	shr    ecx,0x10
c0007051:	c1 e8 18             	shr    eax,0x18
c0007054:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007057:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000705a:	c3                   	ret    
c000705b:	90                   	nop

c000705c <GDTEntry::setLimit(unsigned int)>:
c000705c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007060:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007064:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007067:	66 89 01             	mov    WORD PTR [ecx],ax
c000706a:	83 e2 f0             	and    edx,0xfffffff0
c000706d:	c1 e8 10             	shr    eax,0x10
c0007070:	83 e0 0f             	and    eax,0xf
c0007073:	09 d0                	or     eax,edx
c0007075:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007078:	c3                   	ret    
c0007079:	90                   	nop

c000707a <GDT::GDT()>:
c000707a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000707e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007088:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000708e:	90                   	nop
c000708f:	c3                   	ret    

c0007090 <GDT::addEntry(GDTEntry)>:
c0007090:	53                   	push   ebx
c0007091:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007095:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007099:	8b 02                	mov    eax,DWORD PTR [edx]
c000709b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000709f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00070a3:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00070a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00070aa:	c1 e0 03             	shl    eax,0x3
c00070ad:	89 0a                	mov    DWORD PTR [edx],ecx
c00070af:	5b                   	pop    ebx
c00070b0:	c3                   	ret    
c00070b1:	90                   	nop

c00070b2 <GDT::getNumberOfEntries()>:
c00070b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00070b8:	c3                   	ret    
c00070b9:	90                   	nop

c00070ba <GDT::flush()>:
c00070ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070be:	8b 10                	mov    edx,DWORD PTR [eax]
c00070c0:	83 c0 04             	add    eax,0x4
c00070c3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00070ca:	a3 c2 1e 02 c0       	mov    ds:0xc0021ec2,eax
c00070cf:	66 89 15 c0 1e 02 c0 	mov    WORD PTR ds:0xc0021ec0,dx
c00070d6:	e9 82 92 ff ff       	jmp    c000035d <loadGDT>
c00070db:	90                   	nop

c00070dc <GDT::setup()>:
c00070dc:	57                   	push   edi
c00070dd:	56                   	push   esi
c00070de:	53                   	push   ebx
c00070df:	83 ec 30             	sub    esp,0x30
c00070e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00070e6:	6a 00                	push   0x0
c00070e8:	8d 74 24 14          	lea    esi,[esp+0x14]
c00070ec:	56                   	push   esi
c00070ed:	e8 4e ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c00070f2:	6a 00                	push   0x0
c00070f4:	56                   	push   esi
c00070f5:	e8 62 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c00070fa:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007102:	6a 00                	push   0x0
c0007104:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007108:	56                   	push   esi
c0007109:	e8 32 ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000710e:	68 ff ff ff 00       	push   0xffffff
c0007113:	56                   	push   esi
c0007114:	e8 43 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0007119:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000711d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007121:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007125:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007129:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000712e:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007133:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007137:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000713b:	89 f8                	mov    eax,edi
c000713d:	89 fa                	mov    edx,edi
c000713f:	80 e4 f7             	and    ah,0xf7
c0007142:	80 ce 60             	or     dh,0x60
c0007145:	89 c7                	mov    edi,eax
c0007147:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000714b:	80 cc 60             	or     ah,0x60
c000714e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007152:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007156:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000715a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000715e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007162:	83 c4 20             	add    esp,0x20
c0007165:	6a 00                	push   0x0
c0007167:	8d 44 24 24          	lea    eax,[esp+0x24]
c000716b:	50                   	push   eax
c000716c:	e8 cf fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0007171:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007175:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007179:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c000717e:	6a 00                	push   0x0
c0007180:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007184:	50                   	push   eax
c0007185:	e8 b6 fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000718a:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c000718f:	83 c4 0c             	add    esp,0xc
c0007192:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007196:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000719a:	53                   	push   ebx
c000719b:	e8 f0 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071a0:	83 c4 0c             	add    esp,0xc
c00071a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071ab:	53                   	push   ebx
c00071ac:	e8 df fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071b1:	83 c4 0c             	add    esp,0xc
c00071b4:	57                   	push   edi
c00071b5:	56                   	push   esi
c00071b6:	53                   	push   ebx
c00071b7:	e8 d4 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071bc:	83 c4 0c             	add    esp,0xc
c00071bf:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c7:	53                   	push   ebx
c00071c8:	e8 c3 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071cd:	83 c4 0c             	add    esp,0xc
c00071d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d8:	53                   	push   ebx
c00071d9:	e8 b2 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071de:	83 c4 0c             	add    esp,0xc
c00071e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e9:	53                   	push   ebx
c00071ea:	e8 a1 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071ef:	83 c4 0c             	add    esp,0xc
c00071f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071f6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071fa:	53                   	push   ebx
c00071fb:	e8 90 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0007200:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007203:	e8 b2 fe ff ff       	call   c00070ba <GDT::flush()>
c0007208:	83 c4 40             	add    esp,0x40
c000720b:	5b                   	pop    ebx
c000720c:	5e                   	pop    esi
c000720d:	5f                   	pop    edi
c000720e:	c3                   	ret    

c000720f <idleFunction(void*)>:
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007217:	48                   	dec    eax
c0007218:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000721d:	75 01                	jne    c0007220 <idleFunction(void*)+0x11>
c000721f:	fb                   	sti    
c0007220:	e8 a3 df 00 00       	call   c00151c8 <HalSystemIdle()>
c0007225:	e8 58 51 01 00       	call   c001c382 <idleCommon()>
c000722a:	eb f4                	jmp    c0007220 <idleFunction(void*)+0x11>

c000722c <IDTEntry::IDTEntry(bool)>:
c000722c:	83 ec 04             	sub    esp,0x4
c000722f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007233:	88 04 24             	mov    BYTE PTR [esp],al
c0007236:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000723a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007244:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007248:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000724c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000724f:	83 e2 f0             	and    edx,0xfffffff0
c0007252:	83 ca 0e             	or     edx,0xe
c0007255:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007258:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000725c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000725f:	83 e2 ef             	and    edx,0xffffffef
c0007262:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007265:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007269:	74 05                	je     c0007270 <IDTEntry::IDTEntry(bool)+0x44>
c000726b:	b2 03                	mov    dl,0x3
c000726d:	eb 05                	jmp    c0007274 <IDTEntry::IDTEntry(bool)+0x48>
c000726f:	90                   	nop
c0007270:	b2 00                	mov    dl,0x0
c0007272:	66 90                	xchg   ax,ax
c0007274:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007278:	83 e2 03             	and    edx,0x3
c000727b:	88 d1                	mov    cl,dl
c000727d:	c1 e1 05             	shl    ecx,0x5
c0007280:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007283:	83 e2 9f             	and    edx,0xffffff9f
c0007286:	09 ca                	or     edx,ecx
c0007288:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000728b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000728f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007292:	83 ca 80             	or     edx,0xffffff80
c0007295:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007298:	90                   	nop
c0007299:	83 c4 04             	add    esp,0x4
c000729c:	c3                   	ret    
c000729d:	90                   	nop

c000729e <IDTEntry::setOffset(unsigned int)>:
c000729e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00072a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a6:	66 89 02             	mov    WORD PTR [edx],ax
c00072a9:	c1 e8 10             	shr    eax,0x10
c00072ac:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop
c00072b2:	66 90                	xchg   ax,ax

c00072b4 <IDT::IDT()>:
c00072b4:	90                   	nop
c00072b5:	c3                   	ret    

c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00072b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00072ba:	83 c0 30             	add    eax,0x30
c00072bd:	c3                   	ret    

c00072be <IDT::addEntry(IDTEntry, int)>:
c00072be:	53                   	push   ebx
c00072bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00072c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00072cf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00072d2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00072d6:	5b                   	pop    ebx
c00072d7:	c3                   	ret    

c00072d8 <IDT::addEntry(int, void (*)(), bool)>:
c00072d8:	53                   	push   ebx
c00072d9:	83 ec 10             	sub    esp,0x10
c00072dc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00072e1:	50                   	push   eax
c00072e2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00072e6:	53                   	push   ebx
c00072e7:	e8 40 ff ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c00072ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00072f0:	53                   	push   ebx
c00072f1:	e8 a8 ff ff ff       	call   c000729e <IDTEntry::setOffset(unsigned int)>
c00072f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00072fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007302:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007306:	e8 b3 ff ff ff       	call   c00072be <IDT::addEntry(IDTEntry, int)>
c000730b:	83 c4 30             	add    esp,0x30
c000730e:	5b                   	pop    ebx
c000730f:	c3                   	ret    

c0007310 <IDT::flush()>:
c0007310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007314:	66 c7 05 c8 1e 02 c0 ff 07 	mov    WORD PTR ds:0xc0021ec8,0x7ff
c000731d:	a3 ca 1e 02 c0       	mov    ds:0xc0021eca,eax
c0007322:	0f 01 1d c8 1e 02 c0 	lidtd  ds:0xc0021ec8
c0007329:	c3                   	ret    

c000732a <IDT::setup()>:
c000732a:	57                   	push   edi
c000732b:	56                   	push   esi
c000732c:	53                   	push   ebx
c000732d:	83 ec 10             	sub    esp,0x10
c0007330:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007334:	6a 00                	push   0x0
c0007336:	68 30 bb 01 c0       	push   0xc001bb30
c000733b:	6a 00                	push   0x0
c000733d:	53                   	push   ebx
c000733e:	e8 95 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007343:	6a 00                	push   0x0
c0007345:	68 40 bb 01 c0       	push   0xc001bb40
c000734a:	6a 01                	push   0x1
c000734c:	53                   	push   ebx
c000734d:	e8 86 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007352:	83 c4 20             	add    esp,0x20
c0007355:	6a 00                	push   0x0
c0007357:	68 4a bb 01 c0       	push   0xc001bb4a
c000735c:	6a 02                	push   0x2
c000735e:	53                   	push   ebx
c000735f:	e8 74 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007364:	6a 00                	push   0x0
c0007366:	68 54 bb 01 c0       	push   0xc001bb54
c000736b:	6a 03                	push   0x3
c000736d:	53                   	push   ebx
c000736e:	e8 65 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007373:	83 c4 20             	add    esp,0x20
c0007376:	6a 00                	push   0x0
c0007378:	68 5e bb 01 c0       	push   0xc001bb5e
c000737d:	6a 04                	push   0x4
c000737f:	53                   	push   ebx
c0007380:	e8 53 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007385:	6a 00                	push   0x0
c0007387:	68 68 bb 01 c0       	push   0xc001bb68
c000738c:	6a 05                	push   0x5
c000738e:	53                   	push   ebx
c000738f:	e8 44 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007394:	83 c4 20             	add    esp,0x20
c0007397:	6a 00                	push   0x0
c0007399:	68 72 bb 01 c0       	push   0xc001bb72
c000739e:	6a 06                	push   0x6
c00073a0:	53                   	push   ebx
c00073a1:	e8 32 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073a6:	6a 00                	push   0x0
c00073a8:	68 7c bb 01 c0       	push   0xc001bb7c
c00073ad:	6a 07                	push   0x7
c00073af:	53                   	push   ebx
c00073b0:	e8 23 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073b5:	83 c4 20             	add    esp,0x20
c00073b8:	6a 00                	push   0x0
c00073ba:	68 86 bb 01 c0       	push   0xc001bb86
c00073bf:	6a 08                	push   0x8
c00073c1:	53                   	push   ebx
c00073c2:	e8 11 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073c7:	6a 00                	push   0x0
c00073c9:	68 8e bb 01 c0       	push   0xc001bb8e
c00073ce:	6a 09                	push   0x9
c00073d0:	53                   	push   ebx
c00073d1:	e8 02 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073d6:	83 c4 20             	add    esp,0x20
c00073d9:	6a 00                	push   0x0
c00073db:	68 98 bb 01 c0       	push   0xc001bb98
c00073e0:	6a 0a                	push   0xa
c00073e2:	53                   	push   ebx
c00073e3:	e8 f0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073e8:	6a 00                	push   0x0
c00073ea:	68 a0 bb 01 c0       	push   0xc001bba0
c00073ef:	6a 0b                	push   0xb
c00073f1:	53                   	push   ebx
c00073f2:	e8 e1 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073f7:	83 c4 20             	add    esp,0x20
c00073fa:	6a 00                	push   0x0
c00073fc:	68 a8 bb 01 c0       	push   0xc001bba8
c0007401:	6a 0c                	push   0xc
c0007403:	53                   	push   ebx
c0007404:	e8 cf fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007409:	6a 00                	push   0x0
c000740b:	68 b0 bb 01 c0       	push   0xc001bbb0
c0007410:	6a 0d                	push   0xd
c0007412:	53                   	push   ebx
c0007413:	e8 c0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007418:	83 c4 20             	add    esp,0x20
c000741b:	6a 00                	push   0x0
c000741d:	68 b8 bb 01 c0       	push   0xc001bbb8
c0007422:	6a 0e                	push   0xe
c0007424:	53                   	push   ebx
c0007425:	e8 ae fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000742a:	6a 00                	push   0x0
c000742c:	68 c0 bb 01 c0       	push   0xc001bbc0
c0007431:	6a 0f                	push   0xf
c0007433:	53                   	push   ebx
c0007434:	e8 9f fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007439:	83 c4 20             	add    esp,0x20
c000743c:	6a 00                	push   0x0
c000743e:	68 ca bb 01 c0       	push   0xc001bbca
c0007443:	6a 10                	push   0x10
c0007445:	53                   	push   ebx
c0007446:	e8 8d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000744b:	6a 00                	push   0x0
c000744d:	68 d4 bb 01 c0       	push   0xc001bbd4
c0007452:	6a 11                	push   0x11
c0007454:	53                   	push   ebx
c0007455:	e8 7e fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000745a:	83 c4 20             	add    esp,0x20
c000745d:	6a 00                	push   0x0
c000745f:	68 de bb 01 c0       	push   0xc001bbde
c0007464:	6a 12                	push   0x12
c0007466:	53                   	push   ebx
c0007467:	e8 6c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000746c:	6a 01                	push   0x1
c000746e:	68 78 bc 01 c0       	push   0xc001bc78
c0007473:	6a 60                	push   0x60
c0007475:	53                   	push   ebx
c0007476:	e8 5d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000747b:	83 c4 20             	add    esp,0x20
c000747e:	6a 00                	push   0x0
c0007480:	68 7f bc 01 c0       	push   0xc001bc7f
c0007485:	6a 20                	push   0x20
c0007487:	53                   	push   ebx
c0007488:	e8 4b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000748d:	6a 00                	push   0x0
c000748f:	68 6a bc 01 c0       	push   0xc001bc6a
c0007494:	6a 21                	push   0x21
c0007496:	53                   	push   ebx
c0007497:	e8 3c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000749c:	83 c4 20             	add    esp,0x20
c000749f:	6a 00                	push   0x0
c00074a1:	68 71 bc 01 c0       	push   0xc001bc71
c00074a6:	6a 22                	push   0x22
c00074a8:	53                   	push   ebx
c00074a9:	e8 2a fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ae:	6a 00                	push   0x0
c00074b0:	68 e8 bb 01 c0       	push   0xc001bbe8
c00074b5:	6a 23                	push   0x23
c00074b7:	53                   	push   ebx
c00074b8:	e8 1b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074bd:	83 c4 20             	add    esp,0x20
c00074c0:	6a 00                	push   0x0
c00074c2:	68 f2 bb 01 c0       	push   0xc001bbf2
c00074c7:	6a 24                	push   0x24
c00074c9:	53                   	push   ebx
c00074ca:	e8 09 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074cf:	6a 00                	push   0x0
c00074d1:	68 fc bb 01 c0       	push   0xc001bbfc
c00074d6:	6a 25                	push   0x25
c00074d8:	53                   	push   ebx
c00074d9:	e8 fa fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074de:	83 c4 20             	add    esp,0x20
c00074e1:	6a 00                	push   0x0
c00074e3:	68 06 bc 01 c0       	push   0xc001bc06
c00074e8:	6a 26                	push   0x26
c00074ea:	53                   	push   ebx
c00074eb:	e8 e8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074f0:	6a 00                	push   0x0
c00074f2:	68 10 bc 01 c0       	push   0xc001bc10
c00074f7:	6a 27                	push   0x27
c00074f9:	53                   	push   ebx
c00074fa:	e8 d9 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ff:	83 c4 20             	add    esp,0x20
c0007502:	6a 00                	push   0x0
c0007504:	68 1a bc 01 c0       	push   0xc001bc1a
c0007509:	6a 28                	push   0x28
c000750b:	53                   	push   ebx
c000750c:	e8 c7 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007511:	6a 00                	push   0x0
c0007513:	68 24 bc 01 c0       	push   0xc001bc24
c0007518:	6a 29                	push   0x29
c000751a:	53                   	push   ebx
c000751b:	e8 b8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007520:	83 c4 20             	add    esp,0x20
c0007523:	6a 00                	push   0x0
c0007525:	68 2e bc 01 c0       	push   0xc001bc2e
c000752a:	6a 2a                	push   0x2a
c000752c:	53                   	push   ebx
c000752d:	e8 a6 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007532:	6a 00                	push   0x0
c0007534:	68 38 bc 01 c0       	push   0xc001bc38
c0007539:	6a 2b                	push   0x2b
c000753b:	53                   	push   ebx
c000753c:	e8 97 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007541:	83 c4 20             	add    esp,0x20
c0007544:	6a 00                	push   0x0
c0007546:	68 42 bc 01 c0       	push   0xc001bc42
c000754b:	6a 2c                	push   0x2c
c000754d:	53                   	push   ebx
c000754e:	e8 85 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007553:	6a 00                	push   0x0
c0007555:	68 4c bc 01 c0       	push   0xc001bc4c
c000755a:	6a 2d                	push   0x2d
c000755c:	53                   	push   ebx
c000755d:	e8 76 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007562:	83 c4 20             	add    esp,0x20
c0007565:	6a 00                	push   0x0
c0007567:	68 56 bc 01 c0       	push   0xc001bc56
c000756c:	6a 2e                	push   0x2e
c000756e:	53                   	push   ebx
c000756f:	e8 64 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007574:	6a 00                	push   0x0
c0007576:	68 60 bc 01 c0       	push   0xc001bc60
c000757b:	6a 2f                	push   0x2f
c000757d:	53                   	push   ebx
c000757e:	e8 55 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007583:	83 c4 20             	add    esp,0x20
c0007586:	6a 00                	push   0x0
c0007588:	68 11 bd 01 c0       	push   0xc001bd11
c000758d:	6a 30                	push   0x30
c000758f:	53                   	push   ebx
c0007590:	e8 43 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007595:	6a 00                	push   0x0
c0007597:	68 1b bd 01 c0       	push   0xc001bd1b
c000759c:	6a 31                	push   0x31
c000759e:	53                   	push   ebx
c000759f:	e8 34 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075a4:	83 c4 20             	add    esp,0x20
c00075a7:	6a 00                	push   0x0
c00075a9:	68 25 bd 01 c0       	push   0xc001bd25
c00075ae:	6a 32                	push   0x32
c00075b0:	53                   	push   ebx
c00075b1:	e8 22 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075b6:	6a 00                	push   0x0
c00075b8:	68 2f bd 01 c0       	push   0xc001bd2f
c00075bd:	6a 33                	push   0x33
c00075bf:	53                   	push   ebx
c00075c0:	e8 13 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075c5:	83 c4 20             	add    esp,0x20
c00075c8:	6a 00                	push   0x0
c00075ca:	68 39 bd 01 c0       	push   0xc001bd39
c00075cf:	6a 34                	push   0x34
c00075d1:	53                   	push   ebx
c00075d2:	e8 01 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075d7:	6a 00                	push   0x0
c00075d9:	68 43 bd 01 c0       	push   0xc001bd43
c00075de:	6a 35                	push   0x35
c00075e0:	53                   	push   ebx
c00075e1:	e8 f2 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075e6:	83 c4 20             	add    esp,0x20
c00075e9:	6a 00                	push   0x0
c00075eb:	68 4d bd 01 c0       	push   0xc001bd4d
c00075f0:	6a 36                	push   0x36
c00075f2:	53                   	push   ebx
c00075f3:	e8 e0 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075f8:	6a 00                	push   0x0
c00075fa:	68 57 bd 01 c0       	push   0xc001bd57
c00075ff:	6a 37                	push   0x37
c0007601:	53                   	push   ebx
c0007602:	e8 d1 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007607:	83 c4 1c             	add    esp,0x1c
c000760a:	6a 03                	push   0x3
c000760c:	6a 02                	push   0x2
c000760e:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0007614:	e8 1f 24 00 00       	call   c0009a38 <VAS::allocatePages(int, int)>
c0007619:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007620:	89 c6                	mov    esi,eax
c0007622:	e8 92 01 00 00       	call   c00077b9 <malloc>
c0007627:	81 c6 00 20 00 00    	add    esi,0x2000
c000762d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007630:	89 c7                	mov    edi,eax
c0007632:	e8 91 15 00 00       	call   c0008bc8 <TSS::TSS()>
c0007637:	83 c4 0c             	add    esp,0xc
c000763a:	68 86 bb 01 c0       	push   0xc001bb86
c000763f:	56                   	push   esi
c0007640:	57                   	push   edi
c0007641:	e8 c6 15 00 00       	call   c0008c0c <TSS::setup(unsigned long, unsigned long)>
c0007646:	89 c6                	mov    esi,eax
c0007648:	58                   	pop    eax
c0007649:	5a                   	pop    edx
c000764a:	6a 00                	push   0x0
c000764c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007650:	50                   	push   eax
c0007651:	e8 d6 fb ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c0007656:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000765a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000765f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007666:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000766c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007670:	80 ce 05             	or     dh,0x5
c0007673:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007676:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000767a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000767e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007681:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007684:	e8 87 fc ff ff       	call   c0007310 <IDT::flush()>
c0007689:	83 c4 20             	add    esp,0x20
c000768c:	5b                   	pop    ebx
c000768d:	5e                   	pop    esi
c000768e:	5f                   	pop    edi
c000768f:	c3                   	ret    

c0007690 <sbrk>:
c0007690:	55                   	push   ebp
c0007691:	57                   	push   edi
c0007692:	56                   	push   esi
c0007693:	53                   	push   ebx
c0007694:	83 ec 1c             	sub    esp,0x1c
c0007697:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000769b:	85 c0                	test   eax,eax
c000769d:	74 5f                	je     c00076fe <sbrk+0x6e>
c000769f:	78 64                	js     c0007705 <sbrk+0x75>
c00076a1:	8b 15 88 f7 01 c0    	mov    edx,DWORD PTR ds:0xc001f788
c00076a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00076ab:	05 ff 0f 00 00       	add    eax,0xfff
c00076b0:	89 c5                	mov    ebp,eax
c00076b2:	78 69                	js     c000771d <sbrk+0x8d>
c00076b4:	c1 fd 0c             	sar    ebp,0xc
c00076b7:	bb 00 00 00 00       	mov    ebx,0x0
c00076bc:	8b 35 b0 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021fb0
c00076c2:	8b 3d 88 f7 01 c0    	mov    edi,DWORD PTR ds:0xc001f788
c00076c8:	e8 c8 03 00 00       	call   c0007a95 <Phys::allocatePage()>
c00076cd:	68 01 04 00 00       	push   0x401
c00076d2:	57                   	push   edi
c00076d3:	50                   	push   eax
c00076d4:	56                   	push   esi
c00076d5:	e8 5a 22 00 00       	call   c0009934 <VAS::mapPage(unsigned long, unsigned long, int)>
c00076da:	81 05 88 f7 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f788,0x1000
c00076e4:	43                   	inc    ebx
c00076e5:	83 c4 10             	add    esp,0x10
c00076e8:	39 dd                	cmp    ebp,ebx
c00076ea:	75 d0                	jne    c00076bc <sbrk+0x2c>
c00076ec:	0f 20 d8             	mov    eax,cr3
c00076ef:	0f 22 d8             	mov    cr3,eax
c00076f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00076f6:	83 c4 1c             	add    esp,0x1c
c00076f9:	5b                   	pop    ebx
c00076fa:	5e                   	pop    esi
c00076fb:	5f                   	pop    edi
c00076fc:	5d                   	pop    ebp
c00076fd:	c3                   	ret    
c00076fe:	a1 88 f7 01 c0       	mov    eax,ds:0xc001f788
c0007703:	eb f1                	jmp    c00076f6 <sbrk+0x66>
c0007705:	83 ec 08             	sub    esp,0x8
c0007708:	50                   	push   eax
c0007709:	68 1c d6 01 c0       	push   0xc001d61c
c000770e:	e8 1a 2e 00 00       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0007713:	83 c4 10             	add    esp,0x10
c0007716:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000771b:	eb d9                	jmp    c00076f6 <sbrk+0x66>
c000771d:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007723:	eb 8f                	jmp    c00076b4 <sbrk+0x24>

c0007725 <mmap>:
c0007725:	83 ec 18             	sub    esp,0x18
c0007728:	68 4c d6 01 c0       	push   0xc001d64c
c000772d:	e8 7d 8a 00 00       	call   c00101af <KePanic(char const*)>
c0007732:	b8 00 00 00 00       	mov    eax,0x0
c0007737:	83 c4 1c             	add    esp,0x1c
c000773a:	c3                   	ret    

c000773b <munmap>:
c000773b:	83 ec 18             	sub    esp,0x18
c000773e:	68 51 d6 01 c0       	push   0xc001d651
c0007743:	e8 67 8a 00 00       	call   c00101af <KePanic(char const*)>
c0007748:	b8 00 00 00 00       	mov    eax,0x0
c000774d:	83 c4 1c             	add    esp,0x1c
c0007750:	c3                   	ret    

c0007751 <liballoc_lock()>:
c0007751:	fa                   	cli    
c0007752:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0007758:	b8 00 00 00 00       	mov    eax,0x0
c000775d:	c3                   	ret    

c000775e <liballoc_unlock()>:
c000775e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007763:	48                   	dec    eax
c0007764:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0007769:	75 01                	jne    c000776c <liballoc_unlock()+0xe>
c000776b:	fb                   	sti    
c000776c:	b8 00 00 00 00       	mov    eax,0x0
c0007771:	c3                   	ret    

c0007772 <liballoc_alloc(int)>:
c0007772:	83 ec 10             	sub    esp,0x10
c0007775:	6a 01                	push   0x1
c0007777:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000777b:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0007781:	e8 b2 22 00 00       	call   c0009a38 <VAS::allocatePages(int, int)>
c0007786:	83 c4 1c             	add    esp,0x1c
c0007789:	c3                   	ret    

c000778a <liballoc_free(void*, int)>:
c000778a:	83 ec 14             	sub    esp,0x14
c000778d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007791:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0007797:	e8 3e 1f 00 00       	call   c00096da <VAS::freeAllocatedPages(unsigned long)>
c000779c:	b8 00 00 00 00       	mov    eax,0x0
c00077a1:	83 c4 1c             	add    esp,0x1c
c00077a4:	c3                   	ret    

c00077a5 <realloc>:
c00077a5:	83 ec 14             	sub    esp,0x14
c00077a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077b0:	e8 7c 9d ff ff       	call   c0001531 <dlrealloc>
c00077b5:	83 c4 1c             	add    esp,0x1c
c00077b8:	c3                   	ret    

c00077b9 <malloc>:
c00077b9:	83 ec 18             	sub    esp,0x18
c00077bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077c0:	e8 2f 98 ff ff       	call   c0000ff4 <dlmalloc>
c00077c5:	83 c4 1c             	add    esp,0x1c
c00077c8:	c3                   	ret    

c00077c9 <free>:
c00077c9:	83 ec 18             	sub    esp,0x18
c00077cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077d0:	e8 c4 94 ff ff       	call   c0000c99 <dlfree>
c00077d5:	83 c4 1c             	add    esp,0x1c
c00077d8:	c3                   	ret    

c00077d9 <rfree>:
c00077d9:	83 ec 18             	sub    esp,0x18
c00077dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077e0:	e8 b4 94 ff ff       	call   c0000c99 <dlfree>
c00077e5:	83 c4 1c             	add    esp,0x1c
c00077e8:	c3                   	ret    

c00077e9 <calloc>:
c00077e9:	56                   	push   esi
c00077ea:	53                   	push   ebx
c00077eb:	83 ec 10             	sub    esp,0x10
c00077ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00077f2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00077f7:	53                   	push   ebx
c00077f8:	e8 bc ff ff ff       	call   c00077b9 <malloc>
c00077fd:	89 c6                	mov    esi,eax
c00077ff:	83 c4 0c             	add    esp,0xc
c0007802:	53                   	push   ebx
c0007803:	6a 00                	push   0x0
c0007805:	50                   	push   eax
c0007806:	e8 c5 8c ff ff       	call   c00004d0 <memset>
c000780b:	89 f0                	mov    eax,esi
c000780d:	83 c4 14             	add    esp,0x14
c0007810:	5b                   	pop    ebx
c0007811:	5e                   	pop    esi
c0007812:	c3                   	ret    

c0007813 <KeEntryPoint>:
c0007813:	57                   	push   edi
c0007814:	bf f9 03 00 00       	mov    edi,0x3f9
c0007819:	56                   	push   esi
c000781a:	89 fa                	mov    edx,edi
c000781c:	53                   	push   ebx
c000781d:	31 f6                	xor    esi,esi
c000781f:	83 ec 2c             	sub    esp,0x2c
c0007822:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007827:	a3 d0 1e 02 c0       	mov    ds:0xc0021ed0,eax
c000782c:	89 f0                	mov    eax,esi
c000782e:	ee                   	out    dx,al
c000782f:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007834:	b0 80                	mov    al,0x80
c0007836:	89 da                	mov    edx,ebx
c0007838:	ee                   	out    dx,al
c0007839:	b1 03                	mov    cl,0x3
c000783b:	ba f8 03 00 00       	mov    edx,0x3f8
c0007840:	88 c8                	mov    al,cl
c0007842:	ee                   	out    dx,al
c0007843:	89 f0                	mov    eax,esi
c0007845:	89 fa                	mov    edx,edi
c0007847:	ee                   	out    dx,al
c0007848:	88 c8                	mov    al,cl
c000784a:	89 da                	mov    edx,ebx
c000784c:	ee                   	out    dx,al
c000784d:	b0 c7                	mov    al,0xc7
c000784f:	ba fa 03 00 00       	mov    edx,0x3fa
c0007854:	ee                   	out    dx,al
c0007855:	b0 0b                	mov    al,0xb
c0007857:	ba fc 03 00 00       	mov    edx,0x3fc
c000785c:	ee                   	out    dx,al
c000785d:	68 58 d6 01 c0       	push   0xc001d658
c0007862:	e8 c6 2c 00 00       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0007867:	e8 5d 82 00 00       	call   c000fac9 <KeDisplaySplashScreen()>
c000786c:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007871:	05 ff 0f 00 00       	add    eax,0xfff
c0007876:	25 00 f0 ff ff       	and    eax,0xfffff000
c000787b:	89 04 24             	mov    DWORD PTR [esp],eax
c000787e:	e8 64 03 00 00       	call   c0007be7 <Phys::physicalMemorySetup(unsigned int)>
c0007883:	e8 bc 1b 00 00       	call   c0009444 <Virt::virtualMemorySetup()>
c0007888:	58                   	pop    eax
c0007889:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000788d:	53                   	push   ebx
c000788e:	e8 6d 1c 00 00       	call   c0009500 <VAS::VAS()>
c0007893:	89 1d b0 1f 02 c0    	mov    DWORD PTR ds:0xc0021fb0,ebx
c0007899:	e8 7c 4a 01 00       	call   c001c31a <_init>
c000789e:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00078a5:	e8 0f ff ff ff       	call   c00077b9 <malloc>
c00078aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00078ad:	89 c6                	mov    esi,eax
c00078af:	e8 7e f2 ff ff       	call   c0006b32 <Computer::Computer()>
c00078b4:	6a 00                	push   0x0
c00078b6:	89 35 b8 1e 02 c0    	mov    DWORD PTR ds:0xc0021eb8,esi
c00078bc:	6a 00                	push   0x0
c00078be:	6a 00                	push   0x0
c00078c0:	56                   	push   esi
c00078c1:	e8 12 f6 ff ff       	call   c0006ed8 <Computer::open(int, int, void*)>
c00078c6:	83 c4 14             	add    esp,0x14
c00078c9:	53                   	push   ebx
c00078ca:	e8 01 1f 00 00       	call   c00097d0 <VAS::~VAS()>
c00078cf:	83 c4 30             	add    esp,0x30
c00078d2:	5b                   	pop    ebx
c00078d3:	5e                   	pop    esi
c00078d4:	5f                   	pop    edi
c00078d5:	c3                   	ret    

c00078d6 <Phys::allocateDMA(unsigned long)>:
c00078d6:	55                   	push   ebp
c00078d7:	31 ed                	xor    ebp,ebp
c00078d9:	57                   	push   edi
c00078da:	56                   	push   esi
c00078db:	53                   	push   ebx
c00078dc:	31 db                	xor    ebx,ebx
c00078de:	83 ec 1c             	sub    esp,0x1c
c00078e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00078e5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00078ed:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00078f3:	31 c0                	xor    eax,eax
c00078f5:	c1 ef 0c             	shr    edi,0xc
c00078f8:	eb 19                	jmp    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c00078fa:	85 c0                	test   eax,eax
c00078fc:	75 06                	jne    c0007904 <Phys::allocateDMA(unsigned long)+0x2e>
c00078fe:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007902:	89 dd                	mov    ebp,ebx
c0007904:	8d 70 01             	lea    esi,[eax+0x1]
c0007907:	39 f7                	cmp    edi,esi
c0007909:	74 33                	je     c000793e <Phys::allocateDMA(unsigned long)+0x68>
c000790b:	89 f0                	mov    eax,esi
c000790d:	43                   	inc    ebx
c000790e:	83 fb 0f             	cmp    ebx,0xf
c0007911:	7f 11                	jg     c0007924 <Phys::allocateDMA(unsigned long)+0x4e>
c0007913:	80 bb ec 1e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffde114],0x0
c000791a:	74 de                	je     c00078fa <Phys::allocateDMA(unsigned long)+0x24>
c000791c:	31 c0                	xor    eax,eax
c000791e:	43                   	inc    ebx
c000791f:	83 fb 0f             	cmp    ebx,0xf
c0007922:	7e ef                	jle    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c0007924:	83 ec 0c             	sub    esp,0xc
c0007927:	68 70 d6 01 c0       	push   0xc001d670
c000792c:	e8 7e 88 00 00       	call   c00101af <KePanic(char const*)>
c0007931:	83 c4 10             	add    esp,0x10
c0007934:	31 c0                	xor    eax,eax
c0007936:	83 c4 1c             	add    esp,0x1c
c0007939:	5b                   	pop    ebx
c000793a:	5e                   	pop    esi
c000793b:	5f                   	pop    edi
c000793c:	5d                   	pop    ebp
c000793d:	c3                   	ret    
c000793e:	89 e9                	mov    ecx,ebp
c0007940:	c1 f9 04             	sar    ecx,0x4
c0007943:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007947:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000794b:	89 ca                	mov    edx,ecx
c000794d:	4a                   	dec    edx
c000794e:	79 03                	jns    c0007953 <Phys::allocateDMA(unsigned long)+0x7d>
c0007950:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007953:	c1 fa 04             	sar    edx,0x4
c0007956:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000795a:	74 08                	je     c0007964 <Phys::allocateDMA(unsigned long)+0x8e>
c000795c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007960:	31 c0                	xor    eax,eax
c0007962:	eb ba                	jmp    c000791e <Phys::allocateDMA(unsigned long)+0x48>
c0007964:	85 f6                	test   esi,esi
c0007966:	74 15                	je     c000797d <Phys::allocateDMA(unsigned long)+0xa7>
c0007968:	8d 95 ec 1e 02 c0    	lea    edx,[ebp-0x3ffde114]
c000796e:	8d 84 05 ed 1e 02 c0 	lea    eax,[ebp+eax*1-0x3ffde113]
c0007975:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007978:	42                   	inc    edx
c0007979:	39 d0                	cmp    eax,edx
c000797b:	75 f8                	jne    c0007975 <Phys::allocateDMA(unsigned long)+0x9f>
c000797d:	01 3d e4 1e 02 c0    	add    DWORD PTR ds:0xc0021ee4,edi
c0007983:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007987:	85 c0                	test   eax,eax
c0007989:	74 17                	je     c00079a2 <Phys::allocateDMA(unsigned long)+0xcc>
c000798b:	83 ec 0c             	sub    esp,0xc
c000798e:	68 70 d6 01 c0       	push   0xc001d670
c0007993:	e8 17 88 00 00       	call   c00101af <KePanic(char const*)>
c0007998:	83 c4 10             	add    esp,0x10
c000799b:	89 f0                	mov    eax,esi
c000799d:	e9 6b ff ff ff       	jmp    c000790d <Phys::allocateDMA(unsigned long)+0x37>
c00079a2:	c1 e5 0c             	shl    ebp,0xc
c00079a5:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00079ab:	eb 89                	jmp    c0007936 <Phys::allocateDMA(unsigned long)+0x60>

c00079ad <Phys::freeDMA(unsigned long, unsigned long)>:
c00079ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079b1:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00079b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079bb:	c1 ea 0c             	shr    edx,0xc
c00079be:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00079c3:	29 15 e4 1e 02 c0    	sub    DWORD PTR ds:0xc0021ee4,edx
c00079c9:	c1 e8 0c             	shr    eax,0xc
c00079cc:	85 d2                	test   edx,edx
c00079ce:	74 0f                	je     c00079df <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c00079d0:	05 ec 1e 02 c0       	add    eax,0xc0021eec
c00079d5:	01 c2                	add    edx,eax
c00079d7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00079da:	40                   	inc    eax
c00079db:	39 d0                	cmp    eax,edx
c00079dd:	75 f8                	jne    c00079d7 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c00079df:	c3                   	ret    

c00079e0 <Phys::setPageState(unsigned long, bool)>:
c00079e0:	56                   	push   esi
c00079e1:	ba 01 00 00 00       	mov    edx,0x1
c00079e6:	53                   	push   ebx
c00079e7:	8b 35 8c f7 01 c0    	mov    esi,DWORD PTR ds:0xc001f78c
c00079ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00079f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00079f5:	89 c8                	mov    eax,ecx
c00079f7:	83 e1 07             	and    ecx,0x7
c00079fa:	c1 e8 03             	shr    eax,0x3
c00079fd:	d3 e3                	shl    ebx,cl
c00079ff:	01 c6                	add    esi,eax
c0007a01:	d3 e2                	shl    edx,cl
c0007a03:	f7 d2                	not    edx
c0007a05:	20 16                	and    BYTE PTR [esi],dl
c0007a07:	03 05 8c f7 01 c0    	add    eax,DWORD PTR ds:0xc001f78c
c0007a0d:	08 18                	or     BYTE PTR [eax],bl
c0007a0f:	5b                   	pop    ebx
c0007a10:	5e                   	pop    esi
c0007a11:	c3                   	ret    

c0007a12 <Phys::getPageState(unsigned long)>:
c0007a12:	53                   	push   ebx
c0007a13:	8b 15 8c f7 01 c0    	mov    edx,DWORD PTR ds:0xc001f78c
c0007a19:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007a1d:	31 db                	xor    ebx,ebx
c0007a1f:	89 c8                	mov    eax,ecx
c0007a21:	83 e1 07             	and    ecx,0x7
c0007a24:	c1 e8 03             	shr    eax,0x3
c0007a27:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007a2a:	89 d8                	mov    eax,ebx
c0007a2c:	5b                   	pop    ebx
c0007a2d:	d3 f8                	sar    eax,cl
c0007a2f:	83 e0 01             	and    eax,0x1
c0007a32:	c3                   	ret    

c0007a33 <Phys::freePage(unsigned long)>:
c0007a33:	53                   	push   ebx
c0007a34:	83 ec 08             	sub    esp,0x8
c0007a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007a3b:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007a41:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007a47:	76 3a                	jbe    c0007a83 <Phys::freePage(unsigned long)+0x50>
c0007a49:	c1 e8 0c             	shr    eax,0xc
c0007a4c:	50                   	push   eax
c0007a4d:	89 c3                	mov    ebx,eax
c0007a4f:	e8 be ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007a54:	5a                   	pop    edx
c0007a55:	84 c0                	test   al,al
c0007a57:	74 19                	je     c0007a72 <Phys::freePage(unsigned long)+0x3f>
c0007a59:	83 ec 08             	sub    esp,0x8
c0007a5c:	ff 0d e4 1e 02 c0    	dec    DWORD PTR ds:0xc0021ee4
c0007a62:	6a 00                	push   0x0
c0007a64:	53                   	push   ebx
c0007a65:	e8 76 ff ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007a6a:	83 c4 10             	add    esp,0x10
c0007a6d:	83 c4 08             	add    esp,0x8
c0007a70:	5b                   	pop    ebx
c0007a71:	c3                   	ret    
c0007a72:	c7 44 24 10 15 d7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d715
c0007a7a:	83 c4 08             	add    esp,0x8
c0007a7d:	5b                   	pop    ebx
c0007a7e:	e9 2c 87 00 00       	jmp    c00101af <KePanic(char const*)>
c0007a83:	68 00 10 00 00       	push   0x1000
c0007a88:	50                   	push   eax
c0007a89:	e8 1f ff ff ff       	call   c00079ad <Phys::freeDMA(unsigned long, unsigned long)>
c0007a8e:	59                   	pop    ecx
c0007a8f:	5b                   	pop    ebx
c0007a90:	83 c4 08             	add    esp,0x8
c0007a93:	5b                   	pop    ebx
c0007a94:	c3                   	ret    

c0007a95 <Phys::allocatePage()>:
c0007a95:	56                   	push   esi
c0007a96:	53                   	push   ebx
c0007a97:	83 ec 14             	sub    esp,0x14
c0007a9a:	8b 35 d8 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021ed8
c0007aa0:	89 f3                	mov    ebx,esi
c0007aa2:	eb 0a                	jmp    c0007aae <Phys::allocatePage()+0x19>
c0007aa4:	89 1d d8 1e 02 c0    	mov    DWORD PTR ds:0xc0021ed8,ebx
c0007aaa:	39 de                	cmp    esi,ebx
c0007aac:	74 24                	je     c0007ad2 <Phys::allocatePage()+0x3d>
c0007aae:	53                   	push   ebx
c0007aaf:	e8 5e ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007ab4:	5a                   	pop    edx
c0007ab5:	84 c0                	test   al,al
c0007ab7:	74 5f                	je     c0007b18 <Phys::allocatePage()+0x83>
c0007ab9:	43                   	inc    ebx
c0007aba:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007ac0:	75 e2                	jne    c0007aa4 <Phys::allocatePage()+0xf>
c0007ac2:	31 db                	xor    ebx,ebx
c0007ac4:	c7 05 d8 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021ed8,0x0
c0007ace:	39 de                	cmp    esi,ebx
c0007ad0:	75 dc                	jne    c0007aae <Phys::allocatePage()+0x19>
c0007ad2:	83 ec 0c             	sub    esp,0xc
c0007ad5:	80 35 fc 1e 02 c0 01 	xor    BYTE PTR ds:0xc0021efc,0x1
c0007adc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007ae1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007ae4:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007aea:	50                   	push   eax
c0007aeb:	e8 22 27 00 00       	call   c000a212 <VAS::scanForEviction()>
c0007af0:	83 c4 10             	add    esp,0x10
c0007af3:	85 c0                	test   eax,eax
c0007af5:	75 3f                	jne    c0007b36 <Phys::allocatePage()+0xa1>
c0007af7:	83 ec 0c             	sub    esp,0xc
c0007afa:	68 98 d6 01 c0       	push   0xc001d698
c0007aff:	e8 ab 86 00 00       	call   c00101af <KePanic(char const*)>
c0007b04:	83 c4 10             	add    esp,0x10
c0007b07:	8b 1d d8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021ed8
c0007b0d:	53                   	push   ebx
c0007b0e:	e8 ff fe ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007b13:	5a                   	pop    edx
c0007b14:	84 c0                	test   al,al
c0007b16:	75 a1                	jne    c0007ab9 <Phys::allocatePage()+0x24>
c0007b18:	6a 01                	push   0x1
c0007b1a:	53                   	push   ebx
c0007b1b:	e8 c0 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b20:	a1 d8 1e 02 c0       	mov    eax,ds:0xc0021ed8
c0007b25:	5a                   	pop    edx
c0007b26:	ff 05 e4 1e 02 c0    	inc    DWORD PTR ds:0xc0021ee4
c0007b2c:	c1 e0 0c             	shl    eax,0xc
c0007b2f:	59                   	pop    ecx
c0007b30:	83 c4 14             	add    esp,0x14
c0007b33:	5b                   	pop    ebx
c0007b34:	5e                   	pop    esi
c0007b35:	c3                   	ret    
c0007b36:	83 ec 08             	sub    esp,0x8
c0007b39:	89 c2                	mov    edx,eax
c0007b3b:	6a 01                	push   0x1
c0007b3d:	c1 ea 0c             	shr    edx,0xc
c0007b40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b44:	52                   	push   edx
c0007b45:	e8 96 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b4a:	83 c4 10             	add    esp,0x10
c0007b4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b51:	eb dd                	jmp    c0007b30 <Phys::allocatePage()+0x9b>

c0007b53 <Phys::allocateContiguousPages(int)>:
c0007b53:	57                   	push   edi
c0007b54:	56                   	push   esi
c0007b55:	53                   	push   ebx
c0007b56:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b5a:	fa                   	cli    
c0007b5b:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0007b61:	31 db                	xor    ebx,ebx
c0007b63:	85 db                	test   ebx,ebx
c0007b65:	75 11                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b67:	e8 29 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b6c:	83 fe 01             	cmp    esi,0x1
c0007b6f:	89 c7                	mov    edi,eax
c0007b71:	74 21                	je     c0007b94 <Phys::allocateContiguousPages(int)+0x41>
c0007b73:	bb 01 00 00 00       	mov    ebx,0x1
c0007b78:	e8 18 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b7d:	89 da                	mov    edx,ebx
c0007b7f:	c1 e2 0c             	shl    edx,0xc
c0007b82:	01 fa                	add    edx,edi
c0007b84:	39 c2                	cmp    edx,eax
c0007b86:	74 20                	je     c0007ba8 <Phys::allocateContiguousPages(int)+0x55>
c0007b88:	bb 01 00 00 00       	mov    ebx,0x1
c0007b8d:	89 c7                	mov    edi,eax
c0007b8f:	83 fe 01             	cmp    esi,0x1
c0007b92:	75 e4                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b94:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007b99:	48                   	dec    eax
c0007b9a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0007b9f:	75 01                	jne    c0007ba2 <Phys::allocateContiguousPages(int)+0x4f>
c0007ba1:	fb                   	sti    
c0007ba2:	89 f8                	mov    eax,edi
c0007ba4:	5b                   	pop    ebx
c0007ba5:	5e                   	pop    esi
c0007ba6:	5f                   	pop    edi
c0007ba7:	c3                   	ret    
c0007ba8:	43                   	inc    ebx
c0007ba9:	39 f3                	cmp    ebx,esi
c0007bab:	75 b6                	jne    c0007b63 <Phys::allocateContiguousPages(int)+0x10>
c0007bad:	eb e5                	jmp    c0007b94 <Phys::allocateContiguousPages(int)+0x41>

c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007baf:	56                   	push   esi
c0007bb0:	53                   	push   ebx
c0007bb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007bb5:	39 1d dc 1e 02 c0    	cmp    DWORD PTR ds:0xc0021edc,ebx
c0007bbb:	73 06                	jae    c0007bc3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007bbd:	89 1d dc 1e 02 c0    	mov    DWORD PTR ds:0xc0021edc,ebx
c0007bc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bc7:	c1 eb 0c             	shr    ebx,0xc
c0007bca:	c1 e8 0c             	shr    eax,0xc
c0007bcd:	39 d8                	cmp    eax,ebx
c0007bcf:	73 13                	jae    c0007be4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007bd1:	6a 00                	push   0x0
c0007bd3:	8d 70 01             	lea    esi,[eax+0x1]
c0007bd6:	50                   	push   eax
c0007bd7:	e8 04 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007bdc:	5a                   	pop    edx
c0007bdd:	89 f0                	mov    eax,esi
c0007bdf:	59                   	pop    ecx
c0007be0:	39 f3                	cmp    ebx,esi
c0007be2:	75 ed                	jne    c0007bd1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007be4:	5b                   	pop    ebx
c0007be5:	5e                   	pop    esi
c0007be6:	c3                   	ret    

c0007be7 <Phys::physicalMemorySetup(unsigned int)>:
c0007be7:	55                   	push   ebp
c0007be8:	57                   	push   edi
c0007be9:	56                   	push   esi
c0007bea:	53                   	push   ebx
c0007beb:	31 db                	xor    ebx,ebx
c0007bed:	83 ec 40             	sub    esp,0x40
c0007bf0:	6a 10                	push   0x10
c0007bf2:	6a 00                	push   0x0
c0007bf4:	68 ec 1e 02 c0       	push   0xc0021eec
c0007bf9:	e8 d2 88 ff ff       	call   c00004d0 <memset>
c0007bfe:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007c02:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007c07:	05 00 10 00 00       	add    eax,0x1000
c0007c0c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007c10:	5a                   	pop    edx
c0007c11:	59                   	pop    ecx
c0007c12:	50                   	push   eax
c0007c13:	68 2b d7 01 c0       	push   0xc001d72b
c0007c18:	e8 10 29 00 00       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0007c1d:	83 c4 10             	add    esp,0x10
c0007c20:	83 ec 08             	sub    esp,0x8
c0007c23:	6a 01                	push   0x1
c0007c25:	53                   	push   ebx
c0007c26:	43                   	inc    ebx
c0007c27:	e8 b4 fd ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007c2c:	83 c4 10             	add    esp,0x10
c0007c2f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007c35:	75 e9                	jne    c0007c20 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007c37:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007c3d:	66 85 c0             	test   ax,ax
c0007c40:	0f 84 97 01 00 00    	je     c0007ddd <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007c46:	89 c7                	mov    edi,eax
c0007c48:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007c50:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007c56:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007c5b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007c5f:	eb 15                	jmp    c0007c76 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007c61:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007c65:	83 c3 18             	add    ebx,0x18
c0007c68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007c6c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007c70:	0f 84 77 01 00 00    	je     c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007c76:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007c79:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007c7c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007c7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c83:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007c87:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007c89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007c8c:	01 f0                	add    eax,esi
c0007c8e:	55                   	push   ebp
c0007c8f:	11 fa                	adc    edx,edi
c0007c91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c95:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007c99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c9d:	50                   	push   eax
c0007c9e:	56                   	push   esi
c0007c9f:	68 c8 d6 01 c0       	push   0xc001d6c8
c0007ca4:	e8 84 28 00 00       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0007ca9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007cad:	83 c4 10             	add    esp,0x10
c0007cb0:	09 f8                	or     eax,edi
c0007cb2:	0f 85 35 01 00 00    	jne    c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007cb8:	4d                   	dec    ebp
c0007cb9:	75 a6                	jne    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007cbb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007cbf:	ba 00 00 08 00       	mov    edx,0x80000
c0007cc4:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007cc8:	39 f2                	cmp    edx,esi
c0007cca:	89 c1                	mov    ecx,eax
c0007ccc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007cd4:	19 f9                	sbb    ecx,edi
c0007cd6:	0f 82 a7 00 00 00    	jb     c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cdc:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007ce0:	89 c1                	mov    ecx,eax
c0007ce2:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007ce6:	0f 83 97 00 00 00    	jae    c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cec:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007cf1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cf5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007cf9:	39 fa                	cmp    edx,edi
c0007cfb:	19 e8                	sbb    eax,ebp
c0007cfd:	0f 82 9a 01 00 00    	jb     c0007e9d <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007d03:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d07:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007d0b:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007d11:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007d16:	83 d5 ff             	adc    ebp,0xffffffff
c0007d19:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007d1d:	31 c0                	xor    eax,eax
c0007d1f:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007d23:	39 fa                	cmp    edx,edi
c0007d25:	89 c1                	mov    ecx,eax
c0007d27:	19 e9                	sbb    ecx,ebp
c0007d29:	0f 83 32 ff ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d2f:	be 00 00 08 00       	mov    esi,0x80000
c0007d34:	51                   	push   ecx
c0007d35:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007d39:	57                   	push   edi
c0007d3a:	56                   	push   esi
c0007d3b:	68 ec d6 01 c0       	push   0xc001d6ec
c0007d40:	e8 e8 27 00 00       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0007d45:	5d                   	pop    ebp
c0007d46:	58                   	pop    eax
c0007d47:	57                   	push   edi
c0007d48:	56                   	push   esi
c0007d49:	e8 61 fe ff ff       	call   c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007d4e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007d52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007d56:	83 c4 0c             	add    esp,0xc
c0007d59:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007d5d:	03 05 e8 1e 02 c0    	add    eax,DWORD PTR ds:0xc0021ee8
c0007d63:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007d6a:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007d6f:	52                   	push   edx
c0007d70:	50                   	push   eax
c0007d71:	68 51 d7 01 c0       	push   0xc001d751
c0007d76:	e8 b2 27 00 00       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0007d7b:	83 c4 10             	add    esp,0x10
c0007d7e:	e9 de fe ff ff       	jmp    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d83:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007d87:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007d8b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007d8f:	39 ea                	cmp    edx,ebp
c0007d91:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007d95:	0f 82 c6 fe ff ff    	jb     c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d9b:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007da0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007da4:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007da8:	0f 83 b3 fe ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007dae:	39 ee                	cmp    esi,ebp
c0007db0:	89 f8                	mov    eax,edi
c0007db2:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007db6:	0f 83 78 ff ff ff    	jae    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007dbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007dc4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007dc8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007dcc:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007dd0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007dd4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007dd8:	e9 57 ff ff ff       	jmp    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007ddd:	83 ec 0c             	sub    esp,0xc
c0007de0:	68 43 d7 01 c0       	push   0xc001d743
c0007de5:	e8 c5 83 00 00       	call   c00101af <KePanic(char const*)>
c0007dea:	83 c4 10             	add    esp,0x10
c0007ded:	83 ec 08             	sub    esp,0x8
c0007df0:	bb 60 00 00 00       	mov    ebx,0x60
c0007df5:	6a 00                	push   0x0
c0007df7:	6a 06                	push   0x6
c0007df9:	e8 e2 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007dfe:	58                   	pop    eax
c0007dff:	5a                   	pop    edx
c0007e00:	6a 00                	push   0x0
c0007e02:	6a 07                	push   0x7
c0007e04:	e8 d7 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e09:	83 05 e8 1e 02 c0 02 	add    DWORD PTR ds:0xc0021ee8,0x2
c0007e10:	83 c4 10             	add    esp,0x10
c0007e13:	83 ec 08             	sub    esp,0x8
c0007e16:	6a 00                	push   0x0
c0007e18:	53                   	push   ebx
c0007e19:	43                   	inc    ebx
c0007e1a:	e8 c1 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e1f:	83 c4 10             	add    esp,0x10
c0007e22:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007e28:	75 e9                	jne    c0007e13 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007e2a:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c0007e2f:	bb 40 01 00 00       	mov    ebx,0x140
c0007e34:	83 c0 20             	add    eax,0x20
c0007e37:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007e3c:	eb 22                	jmp    c0007e60 <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007e3e:	83 ec 08             	sub    esp,0x8
c0007e41:	6a 00                	push   0x0
c0007e43:	53                   	push   ebx
c0007e44:	43                   	inc    ebx
c0007e45:	e8 96 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e4a:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c0007e4f:	83 c4 10             	add    esp,0x10
c0007e52:	40                   	inc    eax
c0007e53:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007e59:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007e5e:	74 07                	je     c0007e67 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007e60:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007e65:	7e d7                	jle    c0007e3e <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007e67:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007e6c:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007e71:	7f 22                	jg     c0007e95 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007e73:	83 ec 08             	sub    esp,0x8
c0007e76:	6a 00                	push   0x0
c0007e78:	53                   	push   ebx
c0007e79:	43                   	inc    ebx
c0007e7a:	e8 61 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e7f:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c0007e84:	83 c4 10             	add    esp,0x10
c0007e87:	40                   	inc    eax
c0007e88:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007e8e:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007e93:	75 d7                	jne    c0007e6c <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007e95:	83 c4 3c             	add    esp,0x3c
c0007e98:	5b                   	pop    ebx
c0007e99:	5e                   	pop    esi
c0007e9a:	5f                   	pop    edi
c0007e9b:	5d                   	pop    ebp
c0007e9c:	c3                   	ret    
c0007e9d:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007ea5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007ead:	e9 51 fe ff ff       	jmp    c0007d03 <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007eb2 <Pipe::isAtty()>:
c0007eb2:	31 c0                	xor    eax,eax
c0007eb4:	c3                   	ret    
c0007eb5:	90                   	nop

c0007eb6 <Pipe::~Pipe()>:
c0007eb6:	83 ec 0c             	sub    esp,0xc
c0007eb9:	ba b0 d7 01 c0       	mov    edx,0xc001d7b0
c0007ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec2:	89 10                	mov    DWORD PTR [eax],edx
c0007ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	50                   	push   eax
c0007ecc:	e8 53 11 00 00       	call   c0009024 <UnixFile::~UnixFile()>
c0007ed1:	83 c4 10             	add    esp,0x10
c0007ed4:	90                   	nop
c0007ed5:	83 c4 0c             	add    esp,0xc
c0007ed8:	c3                   	ret    
c0007ed9:	90                   	nop

c0007eda <Pipe::~Pipe()>:
c0007eda:	83 ec 0c             	sub    esp,0xc
c0007edd:	83 ec 0c             	sub    esp,0xc
c0007ee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ee4:	e8 cd ff ff ff       	call   c0007eb6 <Pipe::~Pipe()>
c0007ee9:	83 c4 10             	add    esp,0x10
c0007eec:	83 ec 08             	sub    esp,0x8
c0007eef:	6a 20                	push   0x20
c0007ef1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ef5:	e8 3d 25 00 00       	call   c000a437 <operator delete(void*, unsigned long)>
c0007efa:	83 c4 10             	add    esp,0x10
c0007efd:	83 c4 0c             	add    esp,0xc
c0007f00:	c3                   	ret    
c0007f01:	90                   	nop

c0007f02 <Pipe::write(unsigned long long, void*, int*)>:
c0007f02:	55                   	push   ebp
c0007f03:	57                   	push   edi
c0007f04:	56                   	push   esi
c0007f05:	53                   	push   ebx
c0007f06:	83 ec 1c             	sub    esp,0x1c
c0007f09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007f0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007f11:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007f14:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f18:	89 04 24             	mov    DWORD PTR [esp],eax
c0007f1b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007f1f:	89 d8                	mov    eax,ebx
c0007f21:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007f24:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f28:	89 d6                	mov    esi,edx
c0007f2a:	89 d7                	mov    edi,edx
c0007f2c:	c1 ff 1f             	sar    edi,0x1f
c0007f2f:	03 34 24             	add    esi,DWORD PTR [esp]
c0007f32:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007f36:	c1 f8 1f             	sar    eax,0x1f
c0007f39:	39 f3                	cmp    ebx,esi
c0007f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f43:	19 f8                	sbb    eax,edi
c0007f45:	b8 01 00 00 00       	mov    eax,0x1
c0007f4a:	72 6e                	jb     c0007fba <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0007f4c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0007f4f:	01 d0                	add    eax,edx
c0007f51:	99                   	cdq    
c0007f52:	f7 fb                	idiv   ebx
c0007f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007f58:	29 d3                	sub    ebx,edx
c0007f5a:	89 d7                	mov    edi,edx
c0007f5c:	89 de                	mov    esi,ebx
c0007f5e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007f61:	c1 fb 1f             	sar    ebx,0x1f
c0007f64:	39 f2                	cmp    edx,esi
c0007f66:	19 d8                	sbb    eax,ebx
c0007f68:	b8 00 00 00 00       	mov    eax,0x0
c0007f6d:	72 04                	jb     c0007f73 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0007f6f:	89 d0                	mov    eax,edx
c0007f71:	29 f0                	sub    eax,esi
c0007f73:	89 d3                	mov    ebx,edx
c0007f75:	29 c3                	sub    ebx,eax
c0007f77:	74 0b                	je     c0007f84 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0007f79:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0007f7c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0007f80:	89 d9                	mov    ecx,ebx
c0007f82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f84:	85 c0                	test   eax,eax
c0007f86:	74 0d                	je     c0007f95 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0007f88:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0007f8c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0007f8f:	89 de                	mov    esi,ebx
c0007f91:	89 c1                	mov    ecx,eax
c0007f93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f95:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0007f98:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007f9d:	75 10                	jne    c0007faf <Pipe::write(unsigned long long, void*, int*)+0xad>
c0007f9f:	83 ec 0c             	sub    esp,0xc
c0007fa2:	68 6d d7 01 c0       	push   0xc001d76d
c0007fa7:	e8 03 82 00 00       	call   c00101af <KePanic(char const*)>
c0007fac:	83 c4 10             	add    esp,0x10
c0007faf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007fb3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007fb6:	89 08                	mov    DWORD PTR [eax],ecx
c0007fb8:	31 c0                	xor    eax,eax
c0007fba:	83 c4 1c             	add    esp,0x1c
c0007fbd:	5b                   	pop    ebx
c0007fbe:	5e                   	pop    esi
c0007fbf:	5f                   	pop    edi
c0007fc0:	5d                   	pop    ebp
c0007fc1:	c3                   	ret    

c0007fc2 <Pipe::read(unsigned long long, void*, int*)>:
c0007fc2:	55                   	push   ebp
c0007fc3:	57                   	push   edi
c0007fc4:	56                   	push   esi
c0007fc5:	53                   	push   ebx
c0007fc6:	83 ec 1c             	sub    esp,0x1c
c0007fc9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007fcd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0007fd1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007fd5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0007fd8:	89 c8                	mov    eax,ecx
c0007fda:	99                   	cdq    
c0007fdb:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0007fdf:	74 24                	je     c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe1:	39 f9                	cmp    ecx,edi
c0007fe3:	89 d1                	mov    ecx,edx
c0007fe5:	19 f1                	sbb    ecx,esi
c0007fe7:	73 1c                	jae    c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe9:	fa                   	cli    
c0007fea:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0007ff0:	e8 af b7 00 00       	call   c00137a4 <schedule()>
c0007ff5:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007ffa:	48                   	dec    eax
c0007ffb:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0008000:	75 d3                	jne    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008002:	fb                   	sti    
c0008003:	eb d0                	jmp    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008005:	39 f8                	cmp    eax,edi
c0008007:	89 d1                	mov    ecx,edx
c0008009:	89 3c 24             	mov    DWORD PTR [esp],edi
c000800c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008010:	19 f1                	sbb    ecx,esi
c0008012:	73 07                	jae    c000801b <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008014:	89 04 24             	mov    DWORD PTR [esp],eax
c0008017:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000801b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000801e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008021:	29 f7                	sub    edi,esi
c0008023:	89 f8                	mov    eax,edi
c0008025:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008029:	99                   	cdq    
c000802a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000802d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008031:	19 d0                	sbb    eax,edx
c0008033:	73 07                	jae    c000803c <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008035:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008038:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000803c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000803f:	89 ea                	mov    edx,ebp
c0008041:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008045:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000804a:	74 0d                	je     c0008059 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000804c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000804f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0008053:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008057:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008059:	85 d2                	test   edx,edx
c000805b:	74 11                	je     c000806e <Pipe::read(unsigned long long, void*, int*)+0xac>
c000805d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008061:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008064:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008068:	89 d1                	mov    ecx,edx
c000806a:	89 c7                	mov    edi,eax
c000806c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000806e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008071:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008074:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008077:	99                   	cdq    
c0008078:	89 f7                	mov    edi,esi
c000807a:	03 04 24             	add    eax,DWORD PTR [esp]
c000807d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008081:	c1 ff 1f             	sar    edi,0x1f
c0008084:	57                   	push   edi
c0008085:	56                   	push   esi
c0008086:	52                   	push   edx
c0008087:	50                   	push   eax
c0008088:	e8 73 41 01 00       	call   c001c200 <__umoddi3>
c000808d:	83 c4 10             	add    esp,0x10
c0008090:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008093:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008098:	75 10                	jne    c00080aa <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000809a:	83 ec 0c             	sub    esp,0xc
c000809d:	68 8a d7 01 c0       	push   0xc001d78a
c00080a2:	e8 08 81 00 00       	call   c00101af <KePanic(char const*)>
c00080a7:	83 c4 10             	add    esp,0x10
c00080aa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00080ae:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00080b1:	89 10                	mov    DWORD PTR [eax],edx
c00080b3:	83 c4 1c             	add    esp,0x1c
c00080b6:	31 c0                	xor    eax,eax
c00080b8:	5b                   	pop    ebx
c00080b9:	5e                   	pop    esi
c00080ba:	5f                   	pop    edi
c00080bb:	5d                   	pop    ebp
c00080bc:	c3                   	ret    
c00080bd:	90                   	nop

c00080be <Pipe::Pipe(int)>:
c00080be:	83 ec 0c             	sub    esp,0xc
c00080c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080c5:	83 ec 08             	sub    esp,0x8
c00080c8:	6a 00                	push   0x0
c00080ca:	50                   	push   eax
c00080cb:	e8 72 0d 00 00       	call   c0008e42 <UnixFile::UnixFile(int)>
c00080d0:	83 c4 10             	add    esp,0x10
c00080d3:	ba b0 d7 01 c0       	mov    edx,0xc001d7b0
c00080d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080dc:	89 10                	mov    DWORD PTR [eax],edx
c00080de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00080e6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00080e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080ed:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00080f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080f8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00080ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008103:	83 ec 0c             	sub    esp,0xc
c0008106:	50                   	push   eax
c0008107:	e8 ad f6 ff ff       	call   c00077b9 <malloc>
c000810c:	83 c4 10             	add    esp,0x10
c000810f:	89 c2                	mov    edx,eax
c0008111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008115:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000811c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008120:	90                   	nop
c0008121:	83 c4 0c             	add    esp,0xc
c0008124:	c3                   	ret    
c0008125:	90                   	nop

c0008126 <VgaText::isAtty()>:
c0008126:	b0 01                	mov    al,0x1
c0008128:	c3                   	ret    
c0008129:	90                   	nop

c000812a <VgaText::~VgaText()>:
c000812a:	83 ec 0c             	sub    esp,0xc
c000812d:	ba 44 d8 01 c0       	mov    edx,0xc001d844
c0008132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008136:	89 10                	mov    DWORD PTR [eax],edx
c0008138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000813c:	83 ec 0c             	sub    esp,0xc
c000813f:	50                   	push   eax
c0008140:	e8 df 0e 00 00       	call   c0009024 <UnixFile::~UnixFile()>
c0008145:	83 c4 10             	add    esp,0x10
c0008148:	90                   	nop
c0008149:	83 c4 0c             	add    esp,0xc
c000814c:	c3                   	ret    
c000814d:	90                   	nop

c000814e <VgaText::~VgaText()>:
c000814e:	83 ec 0c             	sub    esp,0xc
c0008151:	83 ec 0c             	sub    esp,0xc
c0008154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008158:	e8 cd ff ff ff       	call   c000812a <VgaText::~VgaText()>
c000815d:	83 c4 10             	add    esp,0x10
c0008160:	83 ec 08             	sub    esp,0x8
c0008163:	68 34 01 00 00       	push   0x134
c0008168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000816c:	e8 c6 22 00 00       	call   c000a437 <operator delete(void*, unsigned long)>
c0008171:	83 c4 10             	add    esp,0x10
c0008174:	83 c4 0c             	add    esp,0xc
c0008177:	c3                   	ret    

c0008178 <VgaText::read(unsigned long long, void*, int*)>:
c0008178:	83 ec 10             	sub    esp,0x10
c000817b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000817f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008187:	e8 00 46 00 00       	call   c000c78c <readKeyboard(VgaText*, char*, unsigned long)>
c000818c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008190:	89 02                	mov    DWORD PTR [edx],eax
c0008192:	31 c0                	xor    eax,eax
c0008194:	83 c4 1c             	add    esp,0x1c
c0008197:	c3                   	ret    

c0008198 <setTerminalScrollLock(bool)>:
c0008198:	c3                   	ret    

c0008199 <doTerminalCycle()>:
c0008199:	c3                   	ret    

c000819a <addToTerminalCycle(VgaText*)>:
c000819a:	c3                   	ret    

c000819b <scrollTerminalScrollLock(int)>:
c000819b:	c3                   	ret    

c000819c <VgaText::updateTitle()>:
c000819c:	c3                   	ret    
c000819d:	90                   	nop

c000819e <VgaText::load()>:
c000819e:	c3                   	ret    
c000819f:	90                   	nop

c00081a0 <VgaText::updateCursor()>:
c00081a0:	83 ec 14             	sub    esp,0x14
c00081a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00081a7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00081aa:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00081ad:	e8 ce e1 00 00       	call   c0016380 <HalConsoleCursorUpdate(int, int)>
c00081b2:	83 c4 1c             	add    esp,0x1c
c00081b5:	c3                   	ret    

c00081b6 <VgaText::doANSI_SGR(int)>:
c00081b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00081ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00081be:	85 d2                	test   edx,edx
c00081c0:	75 0b                	jne    c00081cd <VgaText::doANSI_SGR(int)+0x17>
c00081c2:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00081c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00081c8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00081cb:	eb 59                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081cd:	83 fa 07             	cmp    edx,0x7
c00081d0:	75 0b                	jne    c00081dd <VgaText::doANSI_SGR(int)+0x27>
c00081d2:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00081d5:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00081d8:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00081db:	eb 49                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081dd:	83 fa 1b             	cmp    edx,0x1b
c00081e0:	74 e0                	je     c00081c2 <VgaText::doANSI_SGR(int)+0xc>
c00081e2:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00081e5:	83 f9 07             	cmp    ecx,0x7
c00081e8:	77 09                	ja     c00081f3 <VgaText::doANSI_SGR(int)+0x3d>
c00081ea:	8b 14 8d c0 f7 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0840]
c00081f1:	eb 20                	jmp    c0008213 <VgaText::doANSI_SGR(int)+0x5d>
c00081f3:	8d 4a d8             	lea    ecx,[edx-0x28]
c00081f6:	83 f9 07             	cmp    ecx,0x7
c00081f9:	77 09                	ja     c0008204 <VgaText::doANSI_SGR(int)+0x4e>
c00081fb:	8b 14 8d c0 f7 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0840]
c0008202:	eb 22                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c0008204:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008207:	83 f9 07             	cmp    ecx,0x7
c000820a:	77 0b                	ja     c0008217 <VgaText::doANSI_SGR(int)+0x61>
c000820c:	8b 14 95 78 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0988]
c0008213:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008216:	c3                   	ret    
c0008217:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000821a:	83 f9 07             	cmp    ecx,0x7
c000821d:	77 0a                	ja     c0008229 <VgaText::doANSI_SGR(int)+0x73>
c000821f:	8b 14 95 50 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe09b0]
c0008226:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008229:	c3                   	ret    

c000822a <VgaText::setDefaultBgColour(VgaColour)>:
c000822a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000822e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008232:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008235:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008238:	c3                   	ret    
c0008239:	90                   	nop

c000823a <VgaText::setDefaultFgColour(VgaColour)>:
c000823a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000823e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008242:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008245:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008248:	c3                   	ret    
c0008249:	90                   	nop

c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000824a:	53                   	push   ebx
c000824b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000824f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008253:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008257:	51                   	push   ecx
c0008258:	e8 cd ff ff ff       	call   c000822a <VgaText::setDefaultBgColour(VgaColour)>
c000825d:	58                   	pop    eax
c000825e:	5a                   	pop    edx
c000825f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008263:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008267:	5b                   	pop    ebx
c0008268:	eb d0                	jmp    c000823a <VgaText::setDefaultFgColour(VgaColour)>

c000826a <VgaText::setTitleTextColour(VgaColour)>:
c000826a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000826e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008272:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008275:	c3                   	ret    

c0008276 <VgaText::setTitleColour(VgaColour)>:
c0008276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000827a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000827e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008281:	c3                   	ret    

c0008282 <VgaText::setTitle(char*)>:
c0008282:	c3                   	ret    
c0008283:	90                   	nop

c0008284 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008284:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008288:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000828d:	83 e0 0f             	and    eax,0xf
c0008290:	c1 e2 04             	shl    edx,0x4
c0008293:	09 d0                	or     eax,edx
c0008295:	c3                   	ret    

c0008296 <VgaText::scrollScreen()>:
c0008296:	55                   	push   ebp
c0008297:	b9 01 00 00 00       	mov    ecx,0x1
c000829c:	57                   	push   edi
c000829d:	56                   	push   esi
c000829e:	53                   	push   ebx
c000829f:	83 ec 0c             	sub    esp,0xc
c00082a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00082a6:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00082ac:	31 ff                	xor    edi,edi
c00082ae:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00082b1:	83 f9 18             	cmp    ecx,0x18
c00082b4:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00082b7:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00082be:	75 27                	jne    c00082e7 <VgaText::scrollScreen()+0x51>
c00082c0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00082c3:	01 f5                	add    ebp,esi
c00082c5:	f7 c7 01 00 00 00    	test   edi,0x1
c00082cb:	74 16                	je     c00082e3 <VgaText::scrollScreen()+0x4d>
c00082cd:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00082d1:	50                   	push   eax
c00082d2:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00082d6:	50                   	push   eax
c00082d7:	e8 a8 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00082dc:	5a                   	pop    edx
c00082dd:	5a                   	pop    edx
c00082de:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00082e1:	eb 04                	jmp    c00082e7 <VgaText::scrollScreen()+0x51>
c00082e3:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00082e7:	47                   	inc    edi
c00082e8:	46                   	inc    esi
c00082e9:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00082ef:	75 bd                	jne    c00082ae <VgaText::scrollScreen()+0x18>
c00082f1:	41                   	inc    ecx
c00082f2:	83 f9 19             	cmp    ecx,0x19
c00082f5:	75 af                	jne    c00082a6 <VgaText::scrollScreen()+0x10>
c00082f7:	39 1d 04 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f04,ebx
c00082fd:	75 1f                	jne    c000831e <VgaText::scrollScreen()+0x88>
c00082ff:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008303:	74 05                	je     c000830a <VgaText::scrollScreen()+0x74>
c0008305:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008308:	eb 14                	jmp    c000831e <VgaText::scrollScreen()+0x88>
c000830a:	50                   	push   eax
c000830b:	50                   	push   eax
c000830c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008310:	50                   	push   eax
c0008311:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008315:	50                   	push   eax
c0008316:	e8 f1 de 00 00       	call   c001620c <HalConsoleScroll(int, int)>
c000831b:	83 c4 10             	add    esp,0x10
c000831e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008322:	83 c4 0c             	add    esp,0xc
c0008325:	5b                   	pop    ebx
c0008326:	5e                   	pop    esi
c0008327:	5f                   	pop    edi
c0008328:	5d                   	pop    ebp
c0008329:	e9 72 fe ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c000832e <VgaText::combineCharAndColour(char, unsigned char)>:
c000832e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008333:	c1 e0 08             	shl    eax,0x8
c0008336:	89 c2                	mov    edx,eax
c0008338:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000833d:	09 d0                	or     eax,edx
c000833f:	c3                   	ret    

c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008340:	55                   	push   ebp
c0008341:	57                   	push   edi
c0008342:	56                   	push   esi
c0008343:	53                   	push   ebx
c0008344:	83 ec 1c             	sub    esp,0x1c
c0008347:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000834b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000834f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008353:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008357:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000835b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000835f:	0f b6 c3             	movzx  eax,bl
c0008362:	50                   	push   eax
c0008363:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008368:	50                   	push   eax
c0008369:	e8 16 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c000836e:	5a                   	pop    edx
c000836f:	0f b6 c0             	movzx  eax,al
c0008372:	59                   	pop    ecx
c0008373:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008378:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000837c:	50                   	push   eax
c000837d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008381:	e8 a8 ff ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c0008386:	5a                   	pop    edx
c0008387:	66 6b d7 50          	imul   dx,di,0x50
c000838b:	59                   	pop    ecx
c000838c:	01 f2                	add    edx,esi
c000838e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008391:	0f b7 d2             	movzx  edx,dx
c0008394:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008398:	39 2d 04 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f04,ebp
c000839e:	75 28                	jne    c00083c8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00083a8:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00083ac:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00083b0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00083b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00083bc:	83 c4 1c             	add    esp,0x1c
c00083bf:	5b                   	pop    ebx
c00083c0:	5e                   	pop    esi
c00083c1:	5f                   	pop    edi
c00083c2:	5d                   	pop    ebp
c00083c3:	e9 4c df 00 00       	jmp    c0016314 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00083c8:	83 c4 1c             	add    esp,0x1c
c00083cb:	5b                   	pop    ebx
c00083cc:	5e                   	pop    esi
c00083cd:	5f                   	pop    edi
c00083ce:	5d                   	pop    ebp
c00083cf:	c3                   	ret    

c00083d0 <VgaText::getCursorX()>:
c00083d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083d4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00083d7:	c3                   	ret    

c00083d8 <VgaText::getCursorY()>:
c00083d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083dc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00083df:	c3                   	ret    

c00083e0 <VgaText::setCursor(int, int)>:
c00083e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00083e8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00083eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083ef:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00083f2:	e9 a9 fd ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c00083f7 <setActiveTerminal(VgaText*)>:
c00083f7:	53                   	push   ebx
c00083f8:	83 ec 08             	sub    esp,0x8
c00083fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00083ff:	85 db                	test   ebx,ebx
c0008401:	75 11                	jne    c0008414 <setActiveTerminal(VgaText*)+0x1d>
c0008403:	c7 44 24 10 c4 d7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d7c4
c000840b:	83 c4 08             	add    esp,0x8
c000840e:	5b                   	pop    ebx
c000840f:	e9 9b 7d 00 00       	jmp    c00101af <KePanic(char const*)>
c0008414:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c0008419:	85 c0                	test   eax,eax
c000841b:	74 0c                	je     c0008429 <setActiveTerminal(VgaText*)+0x32>
c000841d:	83 ec 0c             	sub    esp,0xc
c0008420:	50                   	push   eax
c0008421:	e8 7a fd ff ff       	call   c00081a0 <VgaText::updateCursor()>
c0008426:	83 c4 10             	add    esp,0x10
c0008429:	89 1d 04 1f 02 c0    	mov    DWORD PTR ds:0xc0021f04,ebx
c000842f:	50                   	push   eax
c0008430:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008433:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008436:	53                   	push   ebx
c0008437:	e8 a4 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c000843c:	83 c4 18             	add    esp,0x18
c000843f:	5b                   	pop    ebx
c0008440:	c3                   	ret    
c0008441:	90                   	nop

c0008442 <VgaText::clearScreen()>:
c0008442:	57                   	push   edi
c0008443:	56                   	push   esi
c0008444:	31 f6                	xor    esi,esi
c0008446:	53                   	push   ebx
c0008447:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000844b:	52                   	push   edx
c000844c:	6a 00                	push   0x0
c000844e:	6a 00                	push   0x0
c0008450:	53                   	push   ebx
c0008451:	e8 8a ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c0008456:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000845d:	83 c4 10             	add    esp,0x10
c0008460:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008463:	7e 20                	jle    c0008485 <VgaText::clearScreen()+0x43>
c0008465:	31 ff                	xor    edi,edi
c0008467:	50                   	push   eax
c0008468:	50                   	push   eax
c0008469:	56                   	push   esi
c000846a:	57                   	push   edi
c000846b:	47                   	inc    edi
c000846c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000846f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008472:	6a 20                	push   0x20
c0008474:	53                   	push   ebx
c0008475:	e8 c6 fe ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000847a:	83 c4 20             	add    esp,0x20
c000847d:	83 ff 50             	cmp    edi,0x50
c0008480:	75 e5                	jne    c0008467 <VgaText::clearScreen()+0x25>
c0008482:	46                   	inc    esi
c0008483:	eb db                	jmp    c0008460 <VgaText::clearScreen()+0x1e>
c0008485:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000848c:	5b                   	pop    ebx
c000848d:	5e                   	pop    esi
c000848e:	5f                   	pop    edi
c000848f:	c3                   	ret    

c0008490 <VgaText::setCursorX(int)>:
c0008490:	83 ec 10             	sub    esp,0x10
c0008493:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008497:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	50                   	push   eax
c000849f:	e8 3c ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084a4:	83 c4 1c             	add    esp,0x1c
c00084a7:	c3                   	ret    

c00084a8 <VgaText::setCursorY(int)>:
c00084a8:	83 ec 10             	sub    esp,0x10
c00084ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084b3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00084b6:	50                   	push   eax
c00084b7:	e8 24 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084bc:	83 c4 1c             	add    esp,0x1c
c00084bf:	c3                   	ret    

c00084c0 <VgaText::incrementCursor(bool)>:
c00084c0:	56                   	push   esi
c00084c1:	53                   	push   ebx
c00084c2:	51                   	push   ecx
c00084c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084cb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00084ce:	40                   	inc    eax
c00084cf:	83 f8 50             	cmp    eax,0x50
c00084d2:	74 05                	je     c00084d9 <VgaText::incrementCursor(bool)+0x19>
c00084d4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00084d7:	eb 24                	jmp    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00084dc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00084e3:	8d 50 01             	lea    edx,[eax+0x1]
c00084e6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00084e9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00084ec:	75 0f                	jne    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084ee:	83 ec 0c             	sub    esp,0xc
c00084f1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00084f4:	53                   	push   ebx
c00084f5:	e8 9c fd ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00084fa:	83 c4 10             	add    esp,0x10
c00084fd:	89 f0                	mov    eax,esi
c00084ff:	84 c0                	test   al,al
c0008501:	74 0c                	je     c000850f <VgaText::incrementCursor(bool)+0x4f>
c0008503:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008507:	5a                   	pop    edx
c0008508:	5b                   	pop    ebx
c0008509:	5e                   	pop    esi
c000850a:	e9 91 fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c000850f:	58                   	pop    eax
c0008510:	5b                   	pop    ebx
c0008511:	5e                   	pop    esi
c0008512:	c3                   	ret    
c0008513:	90                   	nop

c0008514 <VgaText::decrementCursor(bool)>:
c0008514:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008518:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000851c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000851f:	85 c0                	test   eax,eax
c0008521:	74 04                	je     c0008527 <VgaText::decrementCursor(bool)+0x13>
c0008523:	48                   	dec    eax
c0008524:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008527:	84 c9                	test   cl,cl
c0008529:	74 09                	je     c0008534 <VgaText::decrementCursor(bool)+0x20>
c000852b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000852f:	e9 6c fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c0008534:	c3                   	ret    
c0008535:	90                   	nop

c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008536:	53                   	push   ebx
c0008537:	83 ec 08             	sub    esp,0x8
c000853a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000853e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008542:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008546:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000854a:	3c 07                	cmp    al,0x7
c000854c:	75 21                	jne    c000856f <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000854e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008556:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000855e:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008566:	83 c4 08             	add    esp,0x8
c0008569:	5b                   	pop    ebx
c000856a:	e9 14 2e 00 00       	jmp    c000b383 <Krnl::beep(int, int, bool)>
c000856f:	3c 0d                	cmp    al,0xd
c0008571:	75 09                	jne    c000857c <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008573:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000857a:	eb 2c                	jmp    c00085a8 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000857c:	3c 0a                	cmp    al,0xa
c000857e:	75 31                	jne    c00085b1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008580:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008583:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000858a:	8d 50 01             	lea    edx,[eax+0x1]
c000858d:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008590:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008593:	75 0f                	jne    c00085a4 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008595:	83 ec 0c             	sub    esp,0xc
c0008598:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000859b:	53                   	push   ebx
c000859c:	e8 f5 fc ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00085a1:	83 c4 10             	add    esp,0x10
c00085a4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085a8:	83 c4 08             	add    esp,0x8
c00085ab:	5b                   	pop    ebx
c00085ac:	e9 ef fb ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c00085b1:	3c 08                	cmp    al,0x8
c00085b3:	75 25                	jne    c00085da <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c00085b5:	50                   	push   eax
c00085b6:	50                   	push   eax
c00085b7:	6a 01                	push   0x1
c00085b9:	53                   	push   ebx
c00085ba:	e8 55 ff ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c00085bf:	5a                   	pop    edx
c00085c0:	59                   	pop    ecx
c00085c1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085c4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085c7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00085ca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00085cd:	6a 20                	push   0x20
c00085cf:	53                   	push   ebx
c00085d0:	e8 6b fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085d5:	83 c4 28             	add    esp,0x28
c00085d8:	5b                   	pop    ebx
c00085d9:	c3                   	ret    
c00085da:	83 ec 08             	sub    esp,0x8
c00085dd:	0f be c0             	movsx  eax,al
c00085e0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085e3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085e6:	51                   	push   ecx
c00085e7:	52                   	push   edx
c00085e8:	50                   	push   eax
c00085e9:	53                   	push   ebx
c00085ea:	e8 51 fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085ef:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00085f3:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00085fb:	83 c4 28             	add    esp,0x28
c00085fe:	5b                   	pop    ebx
c00085ff:	e9 bc fe ff ff       	jmp    c00084c0 <VgaText::incrementCursor(bool)>

c0008604 <VgaText::putchar(char)>:
c0008604:	56                   	push   esi
c0008605:	53                   	push   ebx
c0008606:	83 ec 14             	sub    esp,0x14
c0008609:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000860d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008611:	3c 5b                	cmp    al,0x5b
c0008613:	75 18                	jne    c000862d <VgaText::putchar(char)+0x29>
c0008615:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008619:	74 1f                	je     c000863a <VgaText::putchar(char)+0x36>
c000861b:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008621:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008628:	e9 bd 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000862d:	3c 1b                	cmp    al,0x1b
c000862f:	75 09                	jne    c000863a <VgaText::putchar(char)+0x36>
c0008631:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008635:	e9 b0 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000863a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000863d:	84 c9                	test   cl,cl
c000863f:	0f 84 92 00 00 00    	je     c00086d7 <VgaText::putchar(char)+0xd3>
c0008645:	8d 50 c0             	lea    edx,[eax-0x40]
c0008648:	80 fa 3e             	cmp    dl,0x3e
c000864b:	77 76                	ja     c00086c3 <VgaText::putchar(char)+0xbf>
c000864d:	3c 6d                	cmp    al,0x6d
c000864f:	75 47                	jne    c0008698 <VgaText::putchar(char)+0x94>
c0008651:	31 f6                	xor    esi,esi
c0008653:	31 d2                	xor    edx,edx
c0008655:	31 c0                	xor    eax,eax
c0008657:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000865a:	7e 2d                	jle    c0008689 <VgaText::putchar(char)+0x85>
c000865c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008661:	80 fa 3b             	cmp    dl,0x3b
c0008664:	75 17                	jne    c000867d <VgaText::putchar(char)+0x79>
c0008666:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000866a:	50                   	push   eax
c000866b:	53                   	push   ebx
c000866c:	e8 45 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008671:	59                   	pop    ecx
c0008672:	31 d2                	xor    edx,edx
c0008674:	58                   	pop    eax
c0008675:	31 c0                	xor    eax,eax
c0008677:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000867b:	eb 09                	jmp    c0008686 <VgaText::putchar(char)+0x82>
c000867d:	6b c0 0a             	imul   eax,eax,0xa
c0008680:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008684:	88 ca                	mov    dl,cl
c0008686:	46                   	inc    esi
c0008687:	eb ce                	jmp    c0008657 <VgaText::putchar(char)+0x53>
c0008689:	84 d2                	test   dl,dl
c000868b:	74 2e                	je     c00086bb <VgaText::putchar(char)+0xb7>
c000868d:	50                   	push   eax
c000868e:	53                   	push   ebx
c000868f:	e8 22 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008694:	58                   	pop    eax
c0008695:	5a                   	pop    edx
c0008696:	eb 23                	jmp    c00086bb <VgaText::putchar(char)+0xb7>
c0008698:	3c 4a                	cmp    al,0x4a
c000869a:	75 1f                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c000869c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00086a0:	75 19                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c00086a2:	83 ec 0c             	sub    esp,0xc
c00086a5:	53                   	push   ebx
c00086a6:	e8 97 fd ff ff       	call   c0008442 <VgaText::clearScreen()>
c00086ab:	83 c4 0c             	add    esp,0xc
c00086ae:	6a 00                	push   0x0
c00086b0:	6a 00                	push   0x0
c00086b2:	53                   	push   ebx
c00086b3:	e8 28 fd ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00086b8:	83 c4 10             	add    esp,0x10
c00086bb:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00086c1:	eb 27                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086c3:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00086c6:	83 fa 0e             	cmp    edx,0xe
c00086c9:	7f 1f                	jg     c00086ea <VgaText::putchar(char)+0xe6>
c00086cb:	8d 4a 01             	lea    ecx,[edx+0x1]
c00086ce:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00086d1:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00086d5:	eb 13                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086d7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086da:	0f be c0             	movsx  eax,al
c00086dd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00086e0:	50                   	push   eax
c00086e1:	53                   	push   ebx
c00086e2:	e8 4f fe ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c00086e7:	83 c4 10             	add    esp,0x10
c00086ea:	83 c4 14             	add    esp,0x14
c00086ed:	5b                   	pop    ebx
c00086ee:	5e                   	pop    esi
c00086ef:	c3                   	ret    

c00086f0 <VgaText::putx(unsigned int)>:
c00086f0:	57                   	push   edi
c00086f1:	b9 11 00 00 00       	mov    ecx,0x11
c00086f6:	56                   	push   esi
c00086f7:	be d2 d7 01 c0       	mov    esi,0xc001d7d2
c00086fc:	53                   	push   ebx
c00086fd:	83 ec 20             	sub    esp,0x20
c0008700:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008704:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008708:	fc                   	cld    
c0008709:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000870b:	be 08 00 00 00       	mov    esi,0x8
c0008710:	50                   	push   eax
c0008711:	50                   	push   eax
c0008712:	89 d8                	mov    eax,ebx
c0008714:	c1 e3 04             	shl    ebx,0x4
c0008717:	c1 e8 1c             	shr    eax,0x1c
c000871a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000871f:	50                   	push   eax
c0008720:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008724:	e8 db fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008729:	83 c4 10             	add    esp,0x10
c000872c:	4e                   	dec    esi
c000872d:	75 e1                	jne    c0008710 <VgaText::putx(unsigned int)+0x20>
c000872f:	83 c4 20             	add    esp,0x20
c0008732:	5b                   	pop    ebx
c0008733:	5e                   	pop    esi
c0008734:	5f                   	pop    edi
c0008735:	c3                   	ret    

c0008736 <VgaText::puts(char const*)>:
c0008736:	53                   	push   ebx
c0008737:	83 ec 08             	sub    esp,0x8
c000873a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000873e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008741:	84 c0                	test   al,al
c0008743:	74 12                	je     c0008757 <VgaText::puts(char const*)+0x21>
c0008745:	43                   	inc    ebx
c0008746:	51                   	push   ecx
c0008747:	51                   	push   ecx
c0008748:	50                   	push   eax
c0008749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000874d:	e8 b2 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008752:	83 c4 10             	add    esp,0x10
c0008755:	eb e7                	jmp    c000873e <VgaText::puts(char const*)+0x8>
c0008757:	83 c4 08             	add    esp,0x8
c000875a:	5b                   	pop    ebx
c000875b:	c3                   	ret    

c000875c <VgaText::write(unsigned long long, void*, int*)>:
c000875c:	55                   	push   ebp
c000875d:	57                   	push   edi
c000875e:	56                   	push   esi
c000875f:	53                   	push   ebx
c0008760:	83 ec 0c             	sub    esp,0xc
c0008763:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008767:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000876b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000876f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008776:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008779:	39 eb                	cmp    ebx,ebp
c000877b:	74 13                	je     c0008790 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000877d:	43                   	inc    ebx
c000877e:	50                   	push   eax
c000877f:	50                   	push   eax
c0008780:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008784:	50                   	push   eax
c0008785:	56                   	push   esi
c0008786:	e8 79 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c000878b:	83 c4 10             	add    esp,0x10
c000878e:	eb e9                	jmp    c0008779 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008790:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008797:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000879b:	89 38                	mov    DWORD PTR [eax],edi
c000879d:	83 c4 0c             	add    esp,0xc
c00087a0:	31 c0                	xor    eax,eax
c00087a2:	5b                   	pop    ebx
c00087a3:	5e                   	pop    esi
c00087a4:	5f                   	pop    edi
c00087a5:	5d                   	pop    ebp
c00087a6:	c3                   	ret    
c00087a7:	90                   	nop

c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00087a8:	55                   	push   ebp
c00087a9:	57                   	push   edi
c00087aa:	56                   	push   esi
c00087ab:	53                   	push   ebx
c00087ac:	83 ec 0c             	sub    esp,0xc
c00087af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00087b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	50                   	push   eax
c00087c0:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087c5:	50                   	push   eax
c00087c6:	e8 b9 fa ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00087cb:	5a                   	pop    edx
c00087cc:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00087d1:	59                   	pop    ecx
c00087d2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00087d5:	89 c5                	mov    ebp,eax
c00087d7:	0f b7 f6             	movzx  esi,si
c00087da:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00087de:	01 f6                	add    esi,esi
c00087e0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00087e3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00087e6:	84 c0                	test   al,al
c00087e8:	0f 84 f4 00 00 00    	je     c00088e2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00087ee:	3c 0d                	cmp    al,0xd
c00087f0:	75 0c                	jne    c00087fe <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c00087f2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00087f9:	e9 de 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00087fe:	3c 0a                	cmp    al,0xa
c0008800:	75 45                	jne    c0008847 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008802:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008805:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000880c:	8d 48 01             	lea    ecx,[eax+0x1]
c000880f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008812:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008815:	75 0f                	jne    c0008826 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008817:	83 ec 0c             	sub    esp,0xc
c000881a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000881d:	53                   	push   ebx
c000881e:	e8 73 fa ff ff       	call   c0008296 <VgaText::scrollScreen()>
c0008823:	83 c4 10             	add    esp,0x10
c0008826:	83 ec 0c             	sub    esp,0xc
c0008829:	53                   	push   ebx
c000882a:	e8 71 f9 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c000882f:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008834:	83 c4 10             	add    esp,0x10
c0008837:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000883a:	0f b7 f6             	movzx  esi,si
c000883d:	01 f6                	add    esi,esi
c000883f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008842:	e9 95 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008847:	3c 08                	cmp    al,0x8
c0008849:	75 35                	jne    c0008880 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c000884b:	51                   	push   ecx
c000884c:	51                   	push   ecx
c000884d:	6a 01                	push   0x1
c000884f:	53                   	push   ebx
c0008850:	e8 bf fc ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c0008855:	5e                   	pop    esi
c0008856:	58                   	pop    eax
c0008857:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000885a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000885d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008860:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008863:	6a 20                	push   0x20
c0008865:	53                   	push   ebx
c0008866:	e8 d5 fa ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000886b:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008870:	83 c4 20             	add    esp,0x20
c0008873:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008876:	0f b7 f6             	movzx  esi,si
c0008879:	01 f6                	add    esi,esi
c000887b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000887e:	eb 5c                	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008880:	52                   	push   edx
c0008881:	52                   	push   edx
c0008882:	89 ea                	mov    edx,ebp
c0008884:	0f b6 ca             	movzx  ecx,dl
c0008887:	51                   	push   ecx
c0008888:	50                   	push   eax
c0008889:	e8 a0 fa ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c000888e:	83 c4 10             	add    esp,0x10
c0008891:	66 89 06             	mov    WORD PTR [esi],ax
c0008894:	39 1d 04 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f04,ebx
c000889a:	75 1d                	jne    c00088b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c000889c:	83 ec 0c             	sub    esp,0xc
c000889f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088a2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088a5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088a9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088ad:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00088b0:	50                   	push   eax
c00088b1:	e8 5e da 00 00       	call   c0016314 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00088b6:	83 c4 20             	add    esp,0x20
c00088b9:	83 c6 02             	add    esi,0x2
c00088bc:	50                   	push   eax
c00088bd:	50                   	push   eax
c00088be:	6a 00                	push   0x0
c00088c0:	53                   	push   ebx
c00088c1:	e8 fa fb ff ff       	call   c00084c0 <VgaText::incrementCursor(bool)>
c00088c6:	83 c4 10             	add    esp,0x10
c00088c9:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00088cd:	75 0d                	jne    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088cf:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088d4:	0f b7 f6             	movzx  esi,si
c00088d7:	01 f6                	add    esi,esi
c00088d9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088dc:	47                   	inc    edi
c00088dd:	e9 01 ff ff ff       	jmp    c00087e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c00088e2:	83 ec 0c             	sub    esp,0xc
c00088e5:	53                   	push   ebx
c00088e6:	e8 b5 f8 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c00088eb:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00088f2:	83 c4 1c             	add    esp,0x1c
c00088f5:	5b                   	pop    ebx
c00088f6:	5e                   	pop    esi
c00088f7:	5f                   	pop    edi
c00088f8:	5d                   	pop    ebp
c00088f9:	c3                   	ret    

c00088fa <VgaText::VgaText(char const*)>:
c00088fa:	56                   	push   esi
c00088fb:	53                   	push   ebx
c00088fc:	83 ec 04             	sub    esp,0x4
c00088ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008903:	83 ec 08             	sub    esp,0x8
c0008906:	6a 00                	push   0x0
c0008908:	50                   	push   eax
c0008909:	e8 34 05 00 00       	call   c0008e42 <UnixFile::UnixFile(int)>
c000890e:	83 c4 10             	add    esp,0x10
c0008911:	ba 44 d8 01 c0       	mov    edx,0xc001d844
c0008916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000891a:	89 10                	mov    DWORD PTR [eax],edx
c000891c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008920:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008936:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000893a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000893e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008946:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000894d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008951:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000895c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008967:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000896e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008972:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008979:	83 ec 0c             	sub    esp,0xc
c000897c:	6a 01                	push   0x1
c000897e:	e8 02 09 00 00       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0008983:	83 c4 10             	add    esp,0x10
c0008986:	89 c2                	mov    edx,eax
c0008988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000898f:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c0008995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008999:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000899c:	89 c6                	mov    esi,eax
c000899e:	e8 f2 f0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00089a3:	68 05 0c 00 00       	push   0xc05
c00089a8:	56                   	push   esi
c00089a9:	50                   	push   eax
c00089aa:	53                   	push   ebx
c00089ab:	e8 84 0f 00 00       	call   c0009934 <VAS::mapPage(unsigned long, unsigned long, int)>
c00089b0:	83 c4 10             	add    esp,0x10
c00089b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089b7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00089ba:	83 ec 04             	sub    esp,0x4
c00089bd:	68 a0 0f 00 00       	push   0xfa0
c00089c2:	6a 00                	push   0x0
c00089c4:	50                   	push   eax
c00089c5:	e8 06 7b ff ff       	call   c00004d0 <memset>
c00089ca:	83 c4 10             	add    esp,0x10
c00089cd:	83 ec 04             	sub    esp,0x4
c00089d0:	6a 00                	push   0x0
c00089d2:	6a 07                	push   0x7
c00089d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089d8:	e8 6d f8 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00089dd:	83 c4 10             	add    esp,0x10
c00089e0:	83 ec 04             	sub    esp,0x4
c00089e3:	6a 00                	push   0x0
c00089e5:	6a 00                	push   0x0
c00089e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089eb:	e8 f0 f9 ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	83 ec 0c             	sub    esp,0xc
c00089f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089fa:	e8 43 fa ff ff       	call   c0008442 <VgaText::clearScreen()>
c00089ff:	83 c4 10             	add    esp,0x10
c0008a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a06:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0e:	05 82 00 00 00       	add    eax,0x82
c0008a13:	83 ec 04             	sub    esp,0x4
c0008a16:	6a 30                	push   0x30
c0008a18:	6a 00                	push   0x0
c0008a1a:	50                   	push   eax
c0008a1b:	e8 b0 7a ff ff       	call   c00004d0 <memset>
c0008a20:	83 c4 10             	add    esp,0x10
c0008a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a27:	05 b2 00 00 00       	add    eax,0xb2
c0008a2c:	83 ec 04             	sub    esp,0x4
c0008a2f:	68 80 00 00 00       	push   0x80
c0008a34:	6a 00                	push   0x0
c0008a36:	50                   	push   eax
c0008a37:	e8 94 7a ff ff       	call   c00004d0 <memset>
c0008a3c:	83 c4 10             	add    esp,0x10
c0008a3f:	90                   	nop
c0008a40:	83 c4 04             	add    esp,0x4
c0008a43:	5b                   	pop    ebx
c0008a44:	5e                   	pop    esi
c0008a45:	c3                   	ret    

c0008a46 <VgaText::receiveKey(unsigned char)>:
c0008a46:	57                   	push   edi
c0008a47:	56                   	push   esi
c0008a48:	53                   	push   ebx
c0008a49:	83 ec 10             	sub    esp,0x10
c0008a4c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a50:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a54:	89 f0                	mov    eax,esi
c0008a56:	84 c0                	test   al,al
c0008a58:	0f 84 3b 01 00 00    	je     c0008b99 <VgaText::receiveKey(unsigned char)+0x153>
c0008a5e:	8d bb 82 00 00 00    	lea    edi,[ebx+0x82]
c0008a64:	3c 08                	cmp    al,0x8
c0008a66:	75 68                	jne    c0008ad0 <VgaText::receiveKey(unsigned char)+0x8a>
c0008a68:	83 ec 0c             	sub    esp,0xc
c0008a6b:	57                   	push   edi
c0008a6c:	e8 cf 7a ff ff       	call   c0000540 <strlen>
c0008a71:	83 c4 10             	add    esp,0x10
c0008a74:	85 c0                	test   eax,eax
c0008a76:	0f 84 be 00 00 00    	je     c0008b3a <VgaText::receiveKey(unsigned char)+0xf4>
c0008a7c:	50                   	push   eax
c0008a7d:	50                   	push   eax
c0008a7e:	6a 08                	push   0x8
c0008a80:	53                   	push   ebx
c0008a81:	e8 7e fb ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008a86:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008a89:	e8 b2 7a ff ff       	call   c0000540 <strlen>
c0008a8e:	83 c4 10             	add    esp,0x10
c0008a91:	8a 84 03 81 00 00 00 	mov    al,BYTE PTR [ebx+eax*1+0x81]
c0008a98:	3c 0d                	cmp    al,0xd
c0008a9a:	0f 95 c1             	setne  cl
c0008a9d:	3c 18                	cmp    al,0x18
c0008a9f:	0f 9e c2             	setle  dl
c0008aa2:	84 d1                	test   cl,dl
c0008aa4:	74 17                	je     c0008abd <VgaText::receiveKey(unsigned char)+0x77>
c0008aa6:	83 e8 08             	sub    eax,0x8
c0008aa9:	3c 02                	cmp    al,0x2
c0008aab:	76 10                	jbe    c0008abd <VgaText::receiveKey(unsigned char)+0x77>
c0008aad:	50                   	push   eax
c0008aae:	50                   	push   eax
c0008aaf:	68 e3 d7 01 c0       	push   0xc001d7e3
c0008ab4:	53                   	push   ebx
c0008ab5:	e8 7c fc ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0008aba:	83 c4 10             	add    esp,0x10
c0008abd:	83 ec 0c             	sub    esp,0xc
c0008ac0:	57                   	push   edi
c0008ac1:	e8 7a 7a ff ff       	call   c0000540 <strlen>
c0008ac6:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008ace:	eb 67                	jmp    c0008b37 <VgaText::receiveKey(unsigned char)+0xf1>
c0008ad0:	3c 18                	cmp    al,0x18
c0008ad2:	0f 96 c2             	setbe  dl
c0008ad5:	3c 0d                	cmp    al,0xd
c0008ad7:	0f 95 c0             	setne  al
c0008ada:	84 c2                	test   dl,al
c0008adc:	74 30                	je     c0008b0e <VgaText::receiveKey(unsigned char)+0xc8>
c0008ade:	8d 46 f7             	lea    eax,[esi-0x9]
c0008ae1:	3c 01                	cmp    al,0x1
c0008ae3:	76 29                	jbe    c0008b0e <VgaText::receiveKey(unsigned char)+0xc8>
c0008ae5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ae8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008aeb:	68 e9 d7 01 c0       	push   0xc001d7e9
c0008af0:	53                   	push   ebx
c0008af1:	e8 b2 fc ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008af6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008af9:	8d 46 40             	lea    eax,[esi+0x40]
c0008afc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008aff:	0f b6 c0             	movzx  eax,al
c0008b02:	50                   	push   eax
c0008b03:	53                   	push   ebx
c0008b04:	e8 2d fa ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008b09:	83 c4 20             	add    esp,0x20
c0008b0c:	eb 11                	jmp    c0008b1f <VgaText::receiveKey(unsigned char)+0xd9>
c0008b0e:	89 f0                	mov    eax,esi
c0008b10:	51                   	push   ecx
c0008b11:	0f be c0             	movsx  eax,al
c0008b14:	51                   	push   ecx
c0008b15:	50                   	push   eax
c0008b16:	53                   	push   ebx
c0008b17:	e8 e8 fa ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008b1c:	83 c4 10             	add    esp,0x10
c0008b1f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008b24:	89 f0                	mov    eax,esi
c0008b26:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0008b2a:	52                   	push   edx
c0008b2b:	52                   	push   edx
c0008b2c:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008b30:	50                   	push   eax
c0008b31:	57                   	push   edi
c0008b32:	e8 89 7c ff ff       	call   c00007c0 <strcat>
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008b41:	75 06                	jne    c0008b49 <VgaText::receiveKey(unsigned char)+0x103>
c0008b43:	89 f0                	mov    eax,esi
c0008b45:	3c 0a                	cmp    al,0xa
c0008b47:	75 50                	jne    c0008b99 <VgaText::receiveKey(unsigned char)+0x153>
c0008b49:	83 ec 0c             	sub    esp,0xc
c0008b4c:	81 c3 b2 00 00 00    	add    ebx,0xb2
c0008b52:	53                   	push   ebx
c0008b53:	e8 e8 79 ff ff       	call   c0000540 <strlen>
c0008b58:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b5b:	89 c6                	mov    esi,eax
c0008b5d:	e8 de 79 ff ff       	call   c0000540 <strlen>
c0008b62:	83 c4 10             	add    esp,0x10
c0008b65:	8d 44 06 04          	lea    eax,[esi+eax*1+0x4]
c0008b69:	3d 80 00 00 00       	cmp    eax,0x80
c0008b6e:	76 10                	jbe    c0008b80 <VgaText::receiveKey(unsigned char)+0x13a>
c0008b70:	83 ec 0c             	sub    esp,0xc
c0008b73:	68 ef d7 01 c0       	push   0xc001d7ef
c0008b78:	e8 32 76 00 00       	call   c00101af <KePanic(char const*)>
c0008b7d:	83 c4 10             	add    esp,0x10
c0008b80:	50                   	push   eax
c0008b81:	50                   	push   eax
c0008b82:	57                   	push   edi
c0008b83:	53                   	push   ebx
c0008b84:	e8 37 7c ff ff       	call   c00007c0 <strcat>
c0008b89:	83 c4 0c             	add    esp,0xc
c0008b8c:	6a 30                	push   0x30
c0008b8e:	6a 00                	push   0x0
c0008b90:	57                   	push   edi
c0008b91:	e8 3a 79 ff ff       	call   c00004d0 <memset>
c0008b96:	83 c4 10             	add    esp,0x10
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	5b                   	pop    ebx
c0008b9d:	5e                   	pop    esi
c0008b9e:	5f                   	pop    edi
c0008b9f:	c3                   	ret    

c0008ba0 <VgaText::doUpdate()>:
c0008ba0:	c3                   	ret    

c0008ba1 <newTerminal(char*)>:
c0008ba1:	83 ec 28             	sub    esp,0x28
c0008ba4:	68 34 01 00 00       	push   0x134
c0008ba9:	e8 0b ec ff ff       	call   c00077b9 <malloc>
c0008bae:	5a                   	pop    edx
c0008baf:	59                   	pop    ecx
c0008bb0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008bb4:	50                   	push   eax
c0008bb5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008bb9:	e8 3c fd ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0008bbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bc2:	83 c4 2c             	add    esp,0x2c
c0008bc5:	c3                   	ret    
c0008bc6:	66 90                	xchg   ax,ax

c0008bc8 <TSS::TSS()>:
c0008bc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008bcc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008bd3:	90                   	nop
c0008bd4:	c3                   	ret    
c0008bd5:	90                   	nop
c0008bd6:	66 90                	xchg   ax,ax

c0008bd8 <TSS::setESP(unsigned long)>:
c0008bd8:	55                   	push   ebp
c0008bd9:	89 e5                	mov    ebp,esp
c0008bdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008be1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008be4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008be7:	90                   	nop
c0008be8:	5d                   	pop    ebp
c0008be9:	c3                   	ret    
c0008bea:	66 90                	xchg   ax,ax

c0008bec <TSS::flush()>:
c0008bec:	55                   	push   ebp
c0008bed:	89 e5                	mov    ebp,esp
c0008bef:	83 ec 10             	sub    esp,0x10
c0008bf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bf5:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bf7:	83 c8 03             	or     eax,0x3
c0008bfa:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008bfe:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008c02:	66 89 d0             	mov    ax,dx
c0008c05:	0f 00 d8             	ltr    ax
c0008c08:	90                   	nop
c0008c09:	c9                   	leave  
c0008c0a:	c3                   	ret    
c0008c0b:	90                   	nop

c0008c0c <TSS::setup(unsigned long, unsigned long)>:
c0008c0c:	55                   	push   ebp
c0008c0d:	89 e5                	mov    ebp,esp
c0008c0f:	83 ec 18             	sub    esp,0x18
c0008c12:	83 ec 0c             	sub    esp,0xc
c0008c15:	6a 68                	push   0x68
c0008c17:	e8 9d eb ff ff       	call   c00077b9 <malloc>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	89 c2                	mov    edx,eax
c0008c21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c24:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c2d:	83 ec 04             	sub    esp,0x4
c0008c30:	6a 68                	push   0x68
c0008c32:	6a 00                	push   0x0
c0008c34:	50                   	push   eax
c0008c35:	e8 96 78 ff ff       	call   c00004d0 <memset>
c0008c3a:	83 c4 10             	add    esp,0x10
c0008c3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c43:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008c49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c4f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008c55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c5b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008c5e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c67:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008c6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c73:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008c79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c7f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008c85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c8b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008c91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c97:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008c9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ca0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ca3:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008ca9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008caf:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008cb2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008cb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cbb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008cbe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008cc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cc7:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008cce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cd1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cd4:	0f 20 da             	mov    edx,cr3
c0008cd7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008cda:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008cdd:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008ce0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ce3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ce6:	83 ec 08             	sub    esp,0x8
c0008ce9:	50                   	push   eax
c0008cea:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008ced:	50                   	push   eax
c0008cee:	e8 4d e3 ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0008cf3:	83 c4 10             	add    esp,0x10
c0008cf6:	83 ec 08             	sub    esp,0x8
c0008cf9:	6a 68                	push   0x68
c0008cfb:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008cfe:	50                   	push   eax
c0008cff:	e8 58 e3 ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0008d04:	83 c4 10             	add    esp,0x10
c0008d07:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008d0b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d0e:	83 e0 0f             	and    eax,0xf
c0008d11:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d14:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d17:	83 c8 40             	or     eax,0x40
c0008d1a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d1d:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0008d22:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d28:	05 78 01 00 00       	add    eax,0x178
c0008d2d:	83 ec 04             	sub    esp,0x4
c0008d30:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008d33:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008d36:	50                   	push   eax
c0008d37:	e8 54 e3 ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	89 c2                	mov    edx,eax
c0008d41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d44:	89 10                	mov    DWORD PTR [eax],edx
c0008d46:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0008d4b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d51:	05 78 01 00 00       	add    eax,0x178
c0008d56:	83 ec 0c             	sub    esp,0xc
c0008d59:	50                   	push   eax
c0008d5a:	e8 5b e3 ff ff       	call   c00070ba <GDT::flush()>
c0008d5f:	83 c4 10             	add    esp,0x10
c0008d62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d65:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d67:	c9                   	leave  
c0008d68:	c3                   	ret    
c0008d69:	90                   	nop

c0008d6a <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008d6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d6e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008d72:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d75:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008d7a:	75 08                	jne    c0008d84 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008d7c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008d82:	eb 38                	jmp    c0008dbc <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008d84:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008d89:	75 17                	jne    c0008da2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008d8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008d90:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008d93:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008d99:	8b 10                	mov    edx,DWORD PTR [eax]
c0008d9b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008d9f:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008da2:	89 c1                	mov    ecx,eax
c0008da4:	83 e1 fd             	and    ecx,0xfffffffd
c0008da7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008dad:	74 cd                	je     c0008d7c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008daf:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008db4:	83 e0 ef             	and    eax,0xffffffef
c0008db7:	83 f8 08             	cmp    eax,0x8
c0008dba:	76 c0                	jbe    c0008d7c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008dbc:	31 c0                	xor    eax,eax
c0008dbe:	c3                   	ret    
c0008dbf:	90                   	nop

c0008dc0 <ReservedFilename::isAtty()>:
c0008dc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008dc4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008dc7:	31 c0                	xor    eax,eax
c0008dc9:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008dcf:	74 09                	je     c0008dda <ReservedFilename::isAtty()+0x1a>
c0008dd1:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008dd7:	0f 94 c0             	sete   al
c0008dda:	c3                   	ret    
c0008ddb:	90                   	nop

c0008ddc <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008ddc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008de0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008de4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008de7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008deb:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008df0:	75 08                	jne    c0008dfa <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008df2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008df8:	eb 3d                	jmp    c0008e37 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008dfa:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008dff:	75 17                	jne    c0008e18 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008e01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008e06:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008e09:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008e0f:	8b 10                	mov    edx,DWORD PTR [eax]
c0008e11:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e15:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008e18:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008e1d:	75 04                	jne    c0008e23 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008e1f:	89 0a                	mov    DWORD PTR [edx],ecx
c0008e21:	eb 14                	jmp    c0008e37 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008e23:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008e28:	74 c8                	je     c0008df2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e2a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008e2f:	83 e0 ef             	and    eax,0xffffffef
c0008e32:	83 f8 08             	cmp    eax,0x8
c0008e35:	76 bb                	jbe    c0008df2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e37:	31 c0                	xor    eax,eax
c0008e39:	c3                   	ret    

c0008e3a <UnixFile::getFileDescriptor()>:
c0008e3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e41:	c3                   	ret    

c0008e42 <UnixFile::UnixFile(int)>:
c0008e42:	53                   	push   ebx
c0008e43:	83 ec 28             	sub    esp,0x28
c0008e46:	ba 0c d9 01 c0       	mov    edx,0xc001d90c
c0008e4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e4f:	89 10                	mov    DWORD PTR [eax],edx
c0008e51:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008e59:	0f 8f 8c 01 00 00    	jg     c0008feb <UnixFile::UnixFile(int)+0x1a9>
c0008e5f:	a1 00 f8 01 c0       	mov    eax,ds:0xc001f800
c0008e64:	8d 50 01             	lea    edx,[eax+0x1]
c0008e67:	89 15 00 f8 01 c0    	mov    DWORD PTR ds:0xc001f800,edx
c0008e6d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008e71:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008e74:	83 ec 08             	sub    esp,0x8
c0008e77:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008e7b:	68 98 1f 02 c0       	push   0xc0021f98
c0008e80:	e8 63 35 01 00       	call   c001c3e8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008e85:	83 c4 10             	add    esp,0x10
c0008e88:	a0 94 1f 02 c0       	mov    al,ds:0xc0021f94
c0008e8d:	83 f0 01             	xor    eax,0x1
c0008e90:	84 c0                	test   al,al
c0008e92:	0f 84 54 01 00 00    	je     c0008fec <UnixFile::UnixFile(int)+0x1aa>
c0008e98:	c6 05 94 1f 02 c0 01 	mov    BYTE PTR ds:0xc0021f94,0x1
c0008e9f:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008ea7:	83 ec 0c             	sub    esp,0xc
c0008eaa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008eae:	e8 06 e9 ff ff       	call   c00077b9 <malloc>
c0008eb3:	83 c4 10             	add    esp,0x10
c0008eb6:	89 c3                	mov    ebx,eax
c0008eb8:	83 ec 08             	sub    esp,0x8
c0008ebb:	68 03 ff ff 0f       	push   0xfffff03
c0008ec0:	53                   	push   ebx
c0008ec1:	e8 2c 01 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008ec6:	83 c4 10             	add    esp,0x10
c0008ec9:	89 1d 8c 1f 02 c0    	mov    DWORD PTR ds:0xc0021f8c,ebx
c0008ecf:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008ed7:	83 ec 0c             	sub    esp,0xc
c0008eda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ede:	e8 d6 e8 ff ff       	call   c00077b9 <malloc>
c0008ee3:	83 c4 10             	add    esp,0x10
c0008ee6:	89 c3                	mov    ebx,eax
c0008ee8:	83 ec 08             	sub    esp,0x8
c0008eeb:	68 01 ff ff 0f       	push   0xfffff01
c0008ef0:	53                   	push   ebx
c0008ef1:	e8 fc 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008ef6:	83 c4 10             	add    esp,0x10
c0008ef9:	89 1d 90 1f 02 c0    	mov    DWORD PTR ds:0xc0021f90,ebx
c0008eff:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008f07:	83 ec 0c             	sub    esp,0xc
c0008f0a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f0e:	e8 a6 e8 ff ff       	call   c00077b9 <malloc>
c0008f13:	83 c4 10             	add    esp,0x10
c0008f16:	89 c3                	mov    ebx,eax
c0008f18:	83 ec 08             	sub    esp,0x8
c0008f1b:	68 00 ff ff 0f       	push   0xfffff00
c0008f20:	53                   	push   ebx
c0008f21:	e8 cc 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f26:	83 c4 10             	add    esp,0x10
c0008f29:	89 1d 84 1f 02 c0    	mov    DWORD PTR ds:0xc0021f84,ebx
c0008f2f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008f37:	83 ec 0c             	sub    esp,0xc
c0008f3a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008f3e:	e8 76 e8 ff ff       	call   c00077b9 <malloc>
c0008f43:	83 c4 10             	add    esp,0x10
c0008f46:	89 c3                	mov    ebx,eax
c0008f48:	83 ec 08             	sub    esp,0x8
c0008f4b:	68 02 ff ff 0f       	push   0xfffff02
c0008f50:	53                   	push   ebx
c0008f51:	e8 9c 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f56:	83 c4 10             	add    esp,0x10
c0008f59:	89 1d 88 1f 02 c0    	mov    DWORD PTR ds:0xc0021f88,ebx
c0008f5f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008f67:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008f6c:	7f 7e                	jg     c0008fec <UnixFile::UnixFile(int)+0x1aa>
c0008f6e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008f7d:	e8 37 e8 ff ff       	call   c00077b9 <malloc>
c0008f82:	83 c4 10             	add    esp,0x10
c0008f85:	89 c3                	mov    ebx,eax
c0008f87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f8b:	05 10 ff ff 0f       	add    eax,0xfffff10
c0008f90:	83 ec 08             	sub    esp,0x8
c0008f93:	50                   	push   eax
c0008f94:	53                   	push   ebx
c0008f95:	e8 58 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f9a:	83 c4 10             	add    esp,0x10
c0008f9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fa1:	89 1c 85 60 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde0a0],ebx
c0008fa8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0008fb0:	83 ec 0c             	sub    esp,0xc
c0008fb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb7:	e8 fd e7 ff ff       	call   c00077b9 <malloc>
c0008fbc:	83 c4 10             	add    esp,0x10
c0008fbf:	89 c3                	mov    ebx,eax
c0008fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fc5:	05 20 ff ff 0f       	add    eax,0xfffff20
c0008fca:	83 ec 08             	sub    esp,0x8
c0008fcd:	50                   	push   eax
c0008fce:	53                   	push   ebx
c0008fcf:	e8 1e 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008fd4:	83 c4 10             	add    esp,0x10
c0008fd7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fdb:	89 1c 85 20 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde0e0],ebx
c0008fe2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008fe6:	e9 7c ff ff ff       	jmp    c0008f67 <UnixFile::UnixFile(int)+0x125>
c0008feb:	90                   	nop
c0008fec:	83 c4 28             	add    esp,0x28
c0008fef:	5b                   	pop    ebx
c0008ff0:	c3                   	ret    
c0008ff1:	90                   	nop

c0008ff2 <ReservedFilename::ReservedFilename(int)>:
c0008ff2:	83 ec 0c             	sub    esp,0xc
c0008ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ff9:	83 ec 08             	sub    esp,0x8
c0008ffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009000:	50                   	push   eax
c0009001:	e8 3c fe ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c0009006:	83 c4 10             	add    esp,0x10
c0009009:	ba 28 d9 01 c0       	mov    edx,0xc001d928
c000900e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009012:	89 10                	mov    DWORD PTR [eax],edx
c0009014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009018:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000901c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000901f:	90                   	nop
c0009020:	83 c4 0c             	add    esp,0xc
c0009023:	c3                   	ret    

c0009024 <UnixFile::~UnixFile()>:
c0009024:	83 ec 1c             	sub    esp,0x1c
c0009027:	ba 0c d9 01 c0       	mov    edx,0xc001d90c
c000902c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009030:	89 10                	mov    DWORD PTR [eax],edx
c0009032:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009036:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009039:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000903e:	7f 73                	jg     c00090b3 <UnixFile::~UnixFile()+0x8f>
c0009040:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009048:	83 ec 0c             	sub    esp,0xc
c000904b:	68 98 1f 02 c0       	push   0xc0021f98
c0009050:	e8 67 34 01 00       	call   c001c4bc <LinkedList<UnixFile>::getFirstElement()>
c0009055:	83 c4 10             	add    esp,0x10
c0009058:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000905c:	83 ec 0c             	sub    esp,0xc
c000905f:	68 98 1f 02 c0       	push   0xc0021f98
c0009064:	e8 5b 34 01 00       	call   c001c4c4 <LinkedList<UnixFile>::removeFirst()>
c0009069:	83 c4 10             	add    esp,0x10
c000906c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009070:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009074:	74 40                	je     c00090b6 <UnixFile::~UnixFile()+0x92>
c0009076:	83 ec 08             	sub    esp,0x8
c0009079:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000907d:	68 98 1f 02 c0       	push   0xc0021f98
c0009082:	e8 61 33 01 00       	call   c001c3e8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009087:	83 c4 10             	add    esp,0x10
c000908a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000908e:	8d 50 01             	lea    edx,[eax+0x1]
c0009091:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009095:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000909a:	0f 94 c0             	sete   al
c000909d:	84 c0                	test   al,al
c000909f:	74 a7                	je     c0009048 <UnixFile::~UnixFile()+0x24>
c00090a1:	83 ec 0c             	sub    esp,0xc
c00090a4:	68 e4 d8 01 c0       	push   0xc001d8e4
c00090a9:	e8 01 71 00 00       	call   c00101af <KePanic(char const*)>
c00090ae:	83 c4 10             	add    esp,0x10
c00090b1:	eb 95                	jmp    c0009048 <UnixFile::~UnixFile()+0x24>
c00090b3:	90                   	nop
c00090b4:	eb 01                	jmp    c00090b7 <UnixFile::~UnixFile()+0x93>
c00090b6:	90                   	nop
c00090b7:	90                   	nop
c00090b8:	83 c4 1c             	add    esp,0x1c
c00090bb:	c3                   	ret    

c00090bc <UnixFile::~UnixFile()>:
c00090bc:	83 ec 0c             	sub    esp,0xc
c00090bf:	83 ec 0c             	sub    esp,0xc
c00090c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c6:	e8 59 ff ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c00090cb:	83 c4 10             	add    esp,0x10
c00090ce:	83 ec 08             	sub    esp,0x8
c00090d1:	6a 0c                	push   0xc
c00090d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090d7:	e8 5b 13 00 00       	call   c000a437 <operator delete(void*, unsigned long)>
c00090dc:	83 c4 10             	add    esp,0x10
c00090df:	83 c4 0c             	add    esp,0xc
c00090e2:	c3                   	ret    
c00090e3:	90                   	nop

c00090e4 <ReservedFilename::~ReservedFilename()>:
c00090e4:	83 ec 0c             	sub    esp,0xc
c00090e7:	ba 28 d9 01 c0       	mov    edx,0xc001d928
c00090ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f0:	89 10                	mov    DWORD PTR [eax],edx
c00090f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f6:	83 ec 0c             	sub    esp,0xc
c00090f9:	50                   	push   eax
c00090fa:	e8 25 ff ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	90                   	nop
c0009103:	83 c4 0c             	add    esp,0xc
c0009106:	c3                   	ret    
c0009107:	90                   	nop

c0009108 <ReservedFilename::~ReservedFilename()>:
c0009108:	83 ec 0c             	sub    esp,0xc
c000910b:	83 ec 0c             	sub    esp,0xc
c000910e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009112:	e8 cd ff ff ff       	call   c00090e4 <ReservedFilename::~ReservedFilename()>
c0009117:	83 c4 10             	add    esp,0x10
c000911a:	83 ec 08             	sub    esp,0x8
c000911d:	6a 0c                	push   0xc
c000911f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009123:	e8 0f 13 00 00       	call   c000a437 <operator delete(void*, unsigned long)>
c0009128:	83 c4 10             	add    esp,0x10
c000912b:	83 c4 0c             	add    esp,0xc
c000912e:	c3                   	ret    

c000912f <getFromFileDescriptor(int)>:
c000912f:	53                   	push   ebx
c0009130:	83 ec 08             	sub    esp,0x8
c0009133:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009137:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000913d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0009143:	7f 2c                	jg     c0009171 <getFromFileDescriptor(int)+0x42>
c0009145:	83 ec 0c             	sub    esp,0xc
c0009148:	68 98 1f 02 c0       	push   0xc0021f98
c000914d:	e8 6a 33 01 00       	call   c001c4bc <LinkedList<UnixFile>::getFirstElement()>
c0009152:	83 c4 10             	add    esp,0x10
c0009155:	85 c0                	test   eax,eax
c0009157:	75 04                	jne    c000915d <getFromFileDescriptor(int)+0x2e>
c0009159:	31 c0                	xor    eax,eax
c000915b:	eb 6e                	jmp    c00091cb <getFromFileDescriptor(int)+0x9c>
c000915d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009160:	74 69                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c0009162:	52                   	push   edx
c0009163:	52                   	push   edx
c0009164:	50                   	push   eax
c0009165:	68 98 1f 02 c0       	push   0xc0021f98
c000916a:	e8 f7 33 01 00       	call   c001c566 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000916f:	eb e1                	jmp    c0009152 <getFromFileDescriptor(int)+0x23>
c0009171:	a1 8c 1f 02 c0       	mov    eax,ds:0xc0021f8c
c0009176:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000917c:	74 4d                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c000917e:	a1 90 1f 02 c0       	mov    eax,ds:0xc0021f90
c0009183:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009189:	74 40                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c000918b:	a1 88 1f 02 c0       	mov    eax,ds:0xc0021f88
c0009190:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0009196:	74 33                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c0009198:	a1 84 1f 02 c0       	mov    eax,ds:0xc0021f84
c000919d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00091a3:	74 26                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c00091a5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00091ab:	83 f8 08             	cmp    eax,0x8
c00091ae:	77 09                	ja     c00091b9 <getFromFileDescriptor(int)+0x8a>
c00091b0:	8b 04 85 60 1f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde0a0]
c00091b7:	eb 12                	jmp    c00091cb <getFromFileDescriptor(int)+0x9c>
c00091b9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00091bf:	83 fb 08             	cmp    ebx,0x8
c00091c2:	77 95                	ja     c0009159 <getFromFileDescriptor(int)+0x2a>
c00091c4:	8b 04 9d 20 1f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffde0e0]
c00091cb:	83 c4 08             	add    esp,0x8
c00091ce:	5b                   	pop    ebx
c00091cf:	c3                   	ret    

c00091d0 <__static_initialization_and_destruction_0(int, int)>:
c00091d0:	83 ec 0c             	sub    esp,0xc
c00091d3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091d8:	75 34                	jne    c000920e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091da:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00091e2:	75 2a                	jne    c000920e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091e4:	83 ec 0c             	sub    esp,0xc
c00091e7:	68 98 1f 02 c0       	push   0xc0021f98
c00091ec:	e8 b5 31 01 00       	call   c001c3a6 <LinkedList<UnixFile>::LinkedList()>
c00091f1:	83 c4 10             	add    esp,0x10
c00091f4:	83 ec 04             	sub    esp,0x4
c00091f7:	68 84 f7 01 c0       	push   0xc001f784
c00091fc:	68 98 1f 02 c0       	push   0xc0021f98
c0009201:	68 a4 c3 01 c0       	push   0xc001c3a4
c0009206:	e8 dc 11 00 00       	call   c000a3e7 <__cxa_atexit>
c000920b:	83 c4 10             	add    esp,0x10
c000920e:	90                   	nop
c000920f:	83 c4 0c             	add    esp,0xc
c0009212:	c3                   	ret    

c0009213 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009213:	83 ec 0c             	sub    esp,0xc
c0009216:	83 ec 08             	sub    esp,0x8
c0009219:	68 ff ff 00 00       	push   0xffff
c000921e:	6a 01                	push   0x1
c0009220:	e8 ab ff ff ff       	call   c00091d0 <__static_initialization_and_destruction_0(int, int)>
c0009225:	83 c4 10             	add    esp,0x10
c0009228:	83 c4 0c             	add    esp,0xc
c000922b:	c3                   	ret    

c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000922c:	53                   	push   ebx
c000922d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009231:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009235:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000923b:	89 c8                	mov    eax,ecx
c000923d:	d1 e8                	shr    eax,1
c000923f:	03 05 08 f8 01 c0    	add    eax,DWORD PTR ds:0xc001f808
c0009245:	83 e1 01             	and    ecx,0x1
c0009248:	8a 10                	mov    dl,BYTE PTR [eax]
c000924a:	75 09                	jne    c0009255 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000924c:	83 e2 f0             	and    edx,0xfffffff0
c000924f:	09 da                	or     edx,ebx
c0009251:	88 10                	mov    BYTE PTR [eax],dl
c0009253:	5b                   	pop    ebx
c0009254:	c3                   	ret    
c0009255:	c1 e3 04             	shl    ebx,0x4
c0009258:	83 e2 0f             	and    edx,0xf
c000925b:	09 da                	or     edx,ebx
c000925d:	88 10                	mov    BYTE PTR [eax],dl
c000925f:	5b                   	pop    ebx
c0009260:	c3                   	ret    

c0009261 <Virt::getPageState(unsigned long)>:
c0009261:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009265:	8b 0d 08 f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f808
c000926b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009271:	89 d0                	mov    eax,edx
c0009273:	d1 e8                	shr    eax,1
c0009275:	83 e2 01             	and    edx,0x1
c0009278:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000927b:	75 04                	jne    c0009281 <Virt::getPageState(unsigned long)+0x20>
c000927d:	83 e0 0f             	and    eax,0xf
c0009280:	c3                   	ret    
c0009281:	c0 e8 04             	shr    al,0x4
c0009284:	c3                   	ret    

c0009285 <Virt::allocateKernelVirtualPages(int)>:
c0009285:	55                   	push   ebp
c0009286:	31 ed                	xor    ebp,ebp
c0009288:	57                   	push   edi
c0009289:	56                   	push   esi
c000928a:	53                   	push   ebx
c000928b:	31 db                	xor    ebx,ebx
c000928d:	83 ec 1c             	sub    esp,0x1c
c0009290:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009294:	8b 3d 04 f8 01 c0    	mov    edi,DWORD PTR ds:0xc001f804
c000929a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000929f:	57                   	push   edi
c00092a0:	e8 bc ff ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c00092a5:	5a                   	pop    edx
c00092a6:	84 c0                	test   al,al
c00092a8:	75 3a                	jne    c00092e4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00092aa:	85 db                	test   ebx,ebx
c00092ac:	75 02                	jne    c00092b0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00092ae:	89 fd                	mov    ebp,edi
c00092b0:	43                   	inc    ebx
c00092b1:	39 f3                	cmp    ebx,esi
c00092b3:	74 5a                	je     c000930f <Virt::allocateKernelVirtualPages(int)+0x8a>
c00092b5:	47                   	inc    edi
c00092b6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092bc:	76 31                	jbe    c00092ef <Virt::allocateKernelVirtualPages(int)+0x6a>
c00092be:	c7 05 04 f8 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f804,0xc8000
c00092c8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00092cd:	75 28                	jne    c00092f7 <Virt::allocateKernelVirtualPages(int)+0x72>
c00092cf:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00092d4:	bf 00 80 0c 00       	mov    edi,0xc8000
c00092d9:	57                   	push   edi
c00092da:	e8 82 ff ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c00092df:	5a                   	pop    edx
c00092e0:	84 c0                	test   al,al
c00092e2:	74 c6                	je     c00092aa <Virt::allocateKernelVirtualPages(int)+0x25>
c00092e4:	31 db                	xor    ebx,ebx
c00092e6:	47                   	inc    edi
c00092e7:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092ed:	77 cf                	ja     c00092be <Virt::allocateKernelVirtualPages(int)+0x39>
c00092ef:	89 3d 04 f8 01 c0    	mov    DWORD PTR ds:0xc001f804,edi
c00092f5:	eb a8                	jmp    c000929f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00092f7:	83 ec 0c             	sub    esp,0xc
c00092fa:	68 3c d9 01 c0       	push   0xc001d93c
c00092ff:	e8 ab 6e 00 00       	call   c00101af <KePanic(char const*)>
c0009304:	8b 3d 04 f8 01 c0    	mov    edi,DWORD PTR ds:0xc001f804
c000930a:	83 c4 10             	add    esp,0x10
c000930d:	eb 90                	jmp    c000929f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000930f:	89 2d 04 f8 01 c0    	mov    DWORD PTR ds:0xc001f804,ebp
c0009315:	4b                   	dec    ebx
c0009316:	74 5f                	je     c0009377 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009318:	85 f6                	test   esi,esi
c000931a:	74 3d                	je     c0009359 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000931c:	89 e8                	mov    eax,ebp
c000931e:	31 db                	xor    ebx,ebx
c0009320:	8d 7e ff             	lea    edi,[esi-0x1]
c0009323:	eb 14                	jmp    c0009339 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0009325:	6a 01                	push   0x1
c0009327:	43                   	inc    ebx
c0009328:	50                   	push   eax
c0009329:	e8 fe fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000932e:	58                   	pop    eax
c000932f:	39 f3                	cmp    ebx,esi
c0009331:	5a                   	pop    edx
c0009332:	74 25                	je     c0009359 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009334:	a1 04 f8 01 c0       	mov    eax,ds:0xc001f804
c0009339:	8d 50 01             	lea    edx,[eax+0x1]
c000933c:	85 db                	test   ebx,ebx
c000933e:	89 15 04 f8 01 c0    	mov    DWORD PTR ds:0xc001f804,edx
c0009344:	74 20                	je     c0009366 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0009346:	39 df                	cmp    edi,ebx
c0009348:	75 db                	jne    c0009325 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000934a:	6a 03                	push   0x3
c000934c:	43                   	inc    ebx
c000934d:	50                   	push   eax
c000934e:	e8 d9 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009353:	59                   	pop    ecx
c0009354:	39 f3                	cmp    ebx,esi
c0009356:	58                   	pop    eax
c0009357:	75 db                	jne    c0009334 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009359:	83 c4 1c             	add    esp,0x1c
c000935c:	89 e8                	mov    eax,ebp
c000935e:	5b                   	pop    ebx
c000935f:	c1 e0 0c             	shl    eax,0xc
c0009362:	5e                   	pop    esi
c0009363:	5f                   	pop    edi
c0009364:	5d                   	pop    ebp
c0009365:	c3                   	ret    
c0009366:	6a 02                	push   0x2
c0009368:	bb 01 00 00 00       	mov    ebx,0x1
c000936d:	50                   	push   eax
c000936e:	e8 b9 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009373:	58                   	pop    eax
c0009374:	5a                   	pop    edx
c0009375:	eb bd                	jmp    c0009334 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009377:	6a 04                	push   0x4
c0009379:	8d 45 01             	lea    eax,[ebp+0x1]
c000937c:	55                   	push   ebp
c000937d:	a3 04 f8 01 c0       	mov    ds:0xc001f804,eax
c0009382:	e8 a5 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009387:	59                   	pop    ecx
c0009388:	89 e8                	mov    eax,ebp
c000938a:	5b                   	pop    ebx
c000938b:	c1 e0 0c             	shl    eax,0xc
c000938e:	83 c4 1c             	add    esp,0x1c
c0009391:	5b                   	pop    ebx
c0009392:	5e                   	pop    esi
c0009393:	5f                   	pop    edi
c0009394:	5d                   	pop    ebp
c0009395:	c3                   	ret    

c0009396 <Virt::freeSwapfilePage(unsigned long)>:
c0009396:	53                   	push   ebx
c0009397:	8b 15 ac 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021fac
c000939d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00093a1:	b8 01 00 00 00       	mov    eax,0x1
c00093a6:	89 cb                	mov    ebx,ecx
c00093a8:	d3 e0                	shl    eax,cl
c00093aa:	c1 eb 05             	shr    ebx,0x5
c00093ad:	f7 d0                	not    eax
c00093af:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00093b2:	5b                   	pop    ebx
c00093b3:	c3                   	ret    

c00093b4 <Virt::swapIDToSector(unsigned long)>:
c00093b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00093b8:	0f af 05 0c f8 01 c0 	imul   eax,DWORD PTR ds:0xc001f80c
c00093bf:	03 05 14 f8 01 c0    	add    eax,DWORD PTR ds:0xc001f814
c00093c5:	c3                   	ret    

c00093c6 <Virt::allocateSwapfilePage()>:
c00093c6:	55                   	push   ebp
c00093c7:	31 d2                	xor    edx,edx
c00093c9:	57                   	push   edi
c00093ca:	56                   	push   esi
c00093cb:	53                   	push   ebx
c00093cc:	83 ec 0c             	sub    esp,0xc
c00093cf:	8b 0d 0c f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f80c
c00093d5:	a1 10 f8 01 c0       	mov    eax,ds:0xc001f810
c00093da:	f7 f1                	div    ecx
c00093dc:	39 0d 10 f8 01 c0    	cmp    DWORD PTR ds:0xc001f810,ecx
c00093e2:	72 2d                	jb     c0009411 <Virt::allocateSwapfilePage()+0x4b>
c00093e4:	8b 35 ac 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021fac
c00093ea:	8b 16                	mov    edx,DWORD PTR [esi]
c00093ec:	f6 c2 01             	test   dl,0x1
c00093ef:	74 3c                	je     c000942d <Virt::allocateSwapfilePage()+0x67>
c00093f1:	31 c9                	xor    ecx,ecx
c00093f3:	bf 01 00 00 00       	mov    edi,0x1
c00093f8:	eb 12                	jmp    c000940c <Virt::allocateSwapfilePage()+0x46>
c00093fa:	89 fd                	mov    ebp,edi
c00093fc:	89 ca                	mov    edx,ecx
c00093fe:	d3 e5                	shl    ebp,cl
c0009400:	c1 ea 05             	shr    edx,0x5
c0009403:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009406:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009408:	85 ea                	test   edx,ebp
c000940a:	74 2a                	je     c0009436 <Virt::allocateSwapfilePage()+0x70>
c000940c:	41                   	inc    ecx
c000940d:	39 c8                	cmp    eax,ecx
c000940f:	77 e9                	ja     c00093fa <Virt::allocateSwapfilePage()+0x34>
c0009411:	83 ec 0c             	sub    esp,0xc
c0009414:	68 cd da 01 c0       	push   0xc001dacd
c0009419:	e8 91 6d 00 00       	call   c00101af <KePanic(char const*)>
c000941e:	83 c4 10             	add    esp,0x10
c0009421:	31 c9                	xor    ecx,ecx
c0009423:	83 c4 0c             	add    esp,0xc
c0009426:	89 c8                	mov    eax,ecx
c0009428:	5b                   	pop    ebx
c0009429:	5e                   	pop    esi
c000942a:	5f                   	pop    edi
c000942b:	5d                   	pop    ebp
c000942c:	c3                   	ret    
c000942d:	89 f3                	mov    ebx,esi
c000942f:	bd 01 00 00 00       	mov    ebp,0x1
c0009434:	31 c9                	xor    ecx,ecx
c0009436:	09 ea                	or     edx,ebp
c0009438:	89 c8                	mov    eax,ecx
c000943a:	89 13                	mov    DWORD PTR [ebx],edx
c000943c:	83 c4 0c             	add    esp,0xc
c000943f:	5b                   	pop    ebx
c0009440:	5e                   	pop    esi
c0009441:	5f                   	pop    edi
c0009442:	5d                   	pop    ebp
c0009443:	c3                   	ret    

c0009444 <Virt::virtualMemorySetup()>:
c0009444:	53                   	push   ebx
c0009445:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000944a:	6a 0f                	push   0xf
c000944c:	53                   	push   ebx
c000944d:	43                   	inc    ebx
c000944e:	e8 d9 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009453:	58                   	pop    eax
c0009454:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000945a:	5a                   	pop    edx
c000945b:	75 ed                	jne    c000944a <Virt::virtualMemorySetup()+0x6>
c000945d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009462:	6a 00                	push   0x0
c0009464:	53                   	push   ebx
c0009465:	43                   	inc    ebx
c0009466:	e8 c1 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000946b:	59                   	pop    ecx
c000946c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009472:	58                   	pop    eax
c0009473:	75 ed                	jne    c0009462 <Virt::virtualMemorySetup()+0x1e>
c0009475:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000947a:	6a 0f                	push   0xf
c000947c:	53                   	push   ebx
c000947d:	43                   	inc    ebx
c000947e:	e8 a9 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009483:	58                   	pop    eax
c0009484:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000948a:	5a                   	pop    edx
c000948b:	75 ed                	jne    c000947a <Virt::virtualMemorySetup()+0x36>
c000948d:	5b                   	pop    ebx
c000948e:	c3                   	ret    

c000948f <Virt::setupPageSwapping(int)>:
c000948f:	53                   	push   ebx
c0009490:	83 ec 0c             	sub    esp,0xc
c0009493:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009497:	a1 28 44 02 c0       	mov    eax,ds:0xc0024428
c000949c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00094a2:	8b 10                	mov    edx,DWORD PTR [eax]
c00094a4:	53                   	push   ebx
c00094a5:	c1 e3 0b             	shl    ebx,0xb
c00094a8:	68 e4 da 01 c0       	push   0xc001dae4
c00094ad:	50                   	push   eax
c00094ae:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00094b1:	89 1d 10 f8 01 c0    	mov    DWORD PTR ds:0xc001f810,ebx
c00094b7:	c6 05 18 f8 01 c0 43 	mov    BYTE PTR ds:0xc001f818,0x43
c00094be:	c1 eb 08             	shr    ebx,0x8
c00094c1:	a3 14 f8 01 c0       	mov    ds:0xc001f814,eax
c00094c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00094c9:	c7 05 0c f8 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f80c,0x8
c00094d3:	e8 e1 e2 ff ff       	call   c00077b9 <malloc>
c00094d8:	83 c4 0c             	add    esp,0xc
c00094db:	89 c1                	mov    ecx,eax
c00094dd:	a3 ac 1f 02 c0       	mov    ds:0xc0021fac,eax
c00094e2:	31 d2                	xor    edx,edx
c00094e4:	a1 10 f8 01 c0       	mov    eax,ds:0xc001f810
c00094e9:	f7 35 0c f8 01 c0    	div    DWORD PTR ds:0xc001f80c
c00094ef:	c1 e8 05             	shr    eax,0x5
c00094f2:	50                   	push   eax
c00094f3:	6a 00                	push   0x0
c00094f5:	51                   	push   ecx
c00094f6:	e8 d5 6f ff ff       	call   c00004d0 <memset>
c00094fb:	83 c4 18             	add    esp,0x18
c00094fe:	5b                   	pop    ebx
c00094ff:	c3                   	ret    

c0009500 <VAS::VAS()>:
c0009500:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009504:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000950b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000950f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009516:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000951a:	a3 b0 1f 02 c0       	mov    ds:0xc0021fb0,eax
c000951f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009523:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009527:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000952b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000952e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009532:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009539:	90                   	nop
c000953a:	c3                   	ret    
c000953b:	90                   	nop

c000953c <VAS::VAS(VAS*)>:
c000953c:	83 ec 0c             	sub    esp,0xc
c000953f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009543:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000954a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000954e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009555:	83 ec 0c             	sub    esp,0xc
c0009558:	68 5c d9 01 c0       	push   0xc001d95c
c000955d:	e8 4d 6c 00 00       	call   c00101af <KePanic(char const*)>
c0009562:	83 c4 10             	add    esp,0x10
c0009565:	90                   	nop
c0009566:	83 c4 0c             	add    esp,0xc
c0009569:	c3                   	ret    

c000956a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000956a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000956e:	89 c2                	mov    edx,eax
c0009570:	c1 e8 0a             	shr    eax,0xa
c0009573:	c1 ea 16             	shr    edx,0x16
c0009576:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000957b:	19 c9                	sbb    ecx,ecx
c000957d:	c1 e2 0c             	shl    edx,0xc
c0009580:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009586:	25 fc 0f 00 00       	and    eax,0xffc
c000958b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009592:	01 d0                	add    eax,edx
c0009594:	c3                   	ret    
c0009595:	90                   	nop

c0009596 <VAS::getPageTableEntry(unsigned long)>:
c0009596:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000959a:	89 ca                	mov    edx,ecx
c000959c:	c1 e9 0a             	shr    ecx,0xa
c000959f:	c1 ea 16             	shr    edx,0x16
c00095a2:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00095a8:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00095ae:	c1 e0 0c             	shl    eax,0xc
c00095b1:	8d 04 08             	lea    eax,[eax+ecx*1]
c00095b4:	c3                   	ret    

c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>:
c00095b5:	57                   	push   edi
c00095b6:	56                   	push   esi
c00095b7:	be 01 00 00 00       	mov    esi,0x1
c00095bc:	53                   	push   ebx
c00095bd:	83 ec 10             	sub    esp,0x10
c00095c0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00095c4:	c1 eb 0c             	shr    ebx,0xc
c00095c7:	eb 3f                	jmp    c0009608 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00095c9:	83 ec 08             	sub    esp,0x8
c00095cc:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c00095d1:	57                   	push   edi
c00095d2:	50                   	push   eax
c00095d3:	e8 be ff ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c00095d8:	83 c4 10             	add    esp,0x10
c00095db:	8b 00                	mov    eax,DWORD PTR [eax]
c00095dd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00095e1:	f6 c4 04             	test   ah,0x4
c00095e4:	75 60                	jne    c0009646 <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c00095e6:	80 fa 04             	cmp    dl,0x4
c00095e9:	74 79                	je     c0009664 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c00095eb:	80 fa 02             	cmp    dl,0x2
c00095ee:	0f 84 89 00 00 00    	je     c000967d <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c00095f4:	80 fa 03             	cmp    dl,0x3
c00095f7:	0f 84 ae 00 00 00    	je     c00096ab <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c00095fd:	fe ca                	dec    dl
c00095ff:	0f 84 93 00 00 00    	je     c0009698 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009605:	43                   	inc    ebx
c0009606:	31 f6                	xor    esi,esi
c0009608:	53                   	push   ebx
c0009609:	89 df                	mov    edi,ebx
c000960b:	e8 51 fc ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c0009610:	c1 e7 0c             	shl    edi,0xc
c0009613:	5a                   	pop    edx
c0009614:	84 c0                	test   al,al
c0009616:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000961a:	75 ad                	jne    c00095c9 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000961c:	83 ec 0c             	sub    esp,0xc
c000961f:	68 fb da 01 c0       	push   0xc001dafb
c0009624:	e8 86 6b 00 00       	call   c00101af <KePanic(char const*)>
c0009629:	5a                   	pop    edx
c000962a:	59                   	pop    ecx
c000962b:	57                   	push   edi
c000962c:	8b 3d b0 1f 02 c0    	mov    edi,DWORD PTR ds:0xc0021fb0
c0009632:	57                   	push   edi
c0009633:	e8 5e ff ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c0009638:	83 c4 10             	add    esp,0x10
c000963b:	8b 00                	mov    eax,DWORD PTR [eax]
c000963d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009641:	f6 c4 04             	test   ah,0x4
c0009644:	74 bf                	je     c0009605 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009646:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000964a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000964f:	83 ec 0c             	sub    esp,0xc
c0009652:	50                   	push   eax
c0009653:	e8 db e3 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0009658:	83 c4 10             	add    esp,0x10
c000965b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000965f:	80 fa 04             	cmp    dl,0x4
c0009662:	75 87                	jne    c00095eb <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0009664:	89 f0                	mov    eax,esi
c0009666:	84 c0                	test   al,al
c0009668:	75 47                	jne    c00096b1 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c000966a:	c7 44 24 20 80 d9 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d980
c0009672:	83 c4 10             	add    esp,0x10
c0009675:	5b                   	pop    ebx
c0009676:	5e                   	pop    esi
c0009677:	5f                   	pop    edi
c0009678:	e9 32 6b 00 00       	jmp    c00101af <KePanic(char const*)>
c000967d:	89 f0                	mov    eax,esi
c000967f:	84 c0                	test   al,al
c0009681:	75 15                	jne    c0009698 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009683:	83 ec 0c             	sub    esp,0xc
c0009686:	68 17 db 01 c0       	push   0xc001db17
c000968b:	e8 1f 6b 00 00       	call   c00101af <KePanic(char const*)>
c0009690:	83 c4 10             	add    esp,0x10
c0009693:	e9 6d ff ff ff       	jmp    c0009605 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009698:	83 ec 08             	sub    esp,0x8
c000969b:	6a 00                	push   0x0
c000969d:	53                   	push   ebx
c000969e:	e8 89 fb ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096a3:	83 c4 10             	add    esp,0x10
c00096a6:	e9 5a ff ff ff       	jmp    c0009605 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00096ab:	89 f0                	mov    eax,esi
c00096ad:	84 c0                	test   al,al
c00096af:	75 15                	jne    c00096c6 <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c00096b1:	83 ec 08             	sub    esp,0x8
c00096b4:	6a 00                	push   0x0
c00096b6:	53                   	push   ebx
c00096b7:	e8 70 fb ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096bc:	83 c4 10             	add    esp,0x10
c00096bf:	83 c4 10             	add    esp,0x10
c00096c2:	5b                   	pop    ebx
c00096c3:	5e                   	pop    esi
c00096c4:	5f                   	pop    edi
c00096c5:	c3                   	ret    
c00096c6:	c7 44 24 20 33 db 01 c0 	mov    DWORD PTR [esp+0x20],0xc001db33
c00096ce:	83 c4 10             	add    esp,0x10
c00096d1:	5b                   	pop    ebx
c00096d2:	5e                   	pop    esi
c00096d3:	5f                   	pop    edi
c00096d4:	e9 d6 6a 00 00       	jmp    c00101af <KePanic(char const*)>
c00096d9:	90                   	nop

c00096da <VAS::freeAllocatedPages(unsigned long)>:
c00096da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00096de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096e2:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00096e6:	74 09                	je     c00096f1 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00096e8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00096ec:	e9 c4 fe ff ff       	jmp    c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c00096f1:	c7 44 24 04 a4 d9 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d9a4
c00096f9:	e9 2f 0e 00 00       	jmp    c000a52d <Dbg::kprintf(char const*, ...)>

c00096fe <VAS::virtualToPhysical(unsigned long)>:
c00096fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009702:	50                   	push   eax
c0009703:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009707:	52                   	push   edx
c0009708:	e8 89 fe ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c000970d:	59                   	pop    ecx
c000970e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009710:	5a                   	pop    edx
c0009711:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009716:	c3                   	ret    
c0009717:	90                   	nop

c0009718 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009718:	55                   	push   ebp
c0009719:	57                   	push   edi
c000971a:	56                   	push   esi
c000971b:	53                   	push   ebx
c000971c:	83 ec 0c             	sub    esp,0xc
c000971f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0009723:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0009727:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000972b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000972f:	85 ff                	test   edi,edi
c0009731:	7e 33                	jle    c0009766 <VAS::reflagRange(unsigned long, int, int, int)+0x4e>
c0009733:	c1 e7 0c             	shl    edi,0xc
c0009736:	01 ef                	add    edi,ebp
c0009738:	55                   	push   ebp
c0009739:	81 c5 00 10 00 00    	add    ebp,0x1000
c000973f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009743:	50                   	push   eax
c0009744:	e8 4d fe ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c0009749:	8b 08                	mov    ecx,DWORD PTR [eax]
c000974b:	21 d9                	and    ecx,ebx
c000974d:	09 f1                	or     ecx,esi
c000974f:	89 08                	mov    DWORD PTR [eax],ecx
c0009751:	89 34 24             	mov    DWORD PTR [esp],esi
c0009754:	53                   	push   ebx
c0009755:	68 4d db 01 c0       	push   0xc001db4d
c000975a:	e8 ce 0d 00 00       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c000975f:	83 c4 10             	add    esp,0x10
c0009762:	39 ef                	cmp    edi,ebp
c0009764:	75 d2                	jne    c0009738 <VAS::reflagRange(unsigned long, int, int, int)+0x20>
c0009766:	83 c4 0c             	add    esp,0xc
c0009769:	5b                   	pop    ebx
c000976a:	5e                   	pop    esi
c000976b:	5f                   	pop    edi
c000976c:	5d                   	pop    ebp
c000976d:	c3                   	ret    

c000976e <VAS::setToWriteCombining(unsigned long, int)>:
c000976e:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009773:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009779:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009780:	75 01                	jne    c0009783 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009782:	c3                   	ret    
c0009783:	83 ec 18             	sub    esp,0x18
c0009786:	68 80 00 00 00       	push   0x80
c000978b:	6a ff                	push   0xffffffff
c000978d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009791:	50                   	push   eax
c0009792:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009796:	52                   	push   edx
c0009797:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000979b:	51                   	push   ecx
c000979c:	e8 77 ff ff ff       	call   c0009718 <VAS::reflagRange(unsigned long, int, int, int)>
c00097a1:	83 c4 2c             	add    esp,0x2c
c00097a4:	c3                   	ret    
c00097a5:	90                   	nop

c00097a6 <VAS::mapOtherVASIn(bool, VAS*)>:
c00097a6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00097ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00097af:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00097b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097b6:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00097b9:	19 c0                	sbb    eax,eax
c00097bb:	83 ca 03             	or     edx,0x3
c00097be:	83 e0 fc             	and    eax,0xfffffffc
c00097c1:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00097c8:	0f 20 d8             	mov    eax,cr3
c00097cb:	0f 22 d8             	mov    cr3,eax
c00097ce:	c3                   	ret    
c00097cf:	90                   	nop

c00097d0 <VAS::~VAS()>:
c00097d0:	83 ec 2c             	sub    esp,0x2c
c00097d3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00097db:	fa                   	cli    
c00097dc:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00097e1:	40                   	inc    eax
c00097e2:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00097e7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00097ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00097ee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00097f1:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00097f7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00097fb:	6a 01                	push   0x1
c00097fd:	50                   	push   eax
c00097fe:	e8 a3 ff ff ff       	call   c00097a6 <VAS::mapOtherVASIn(bool, VAS*)>
c0009803:	83 c4 0c             	add    esp,0xc
c0009806:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000980e:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009816:	0f 8f d4 00 00 00    	jg     c00098f0 <VAS::~VAS()+0x120>
c000981c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009820:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009823:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009827:	c1 e2 02             	shl    edx,0x2
c000982a:	01 d0                	add    eax,edx
c000982c:	8b 00                	mov    eax,DWORD PTR [eax]
c000982e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009836:	83 e0 01             	and    eax,0x1
c0009839:	0f 84 a8 00 00 00    	je     c00098e7 <VAS::~VAS()+0x117>
c000983f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009847:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000984f:	7f 72                	jg     c00098c3 <VAS::~VAS()+0xf3>
c0009851:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009855:	c1 e0 0a             	shl    eax,0xa
c0009858:	89 c2                	mov    edx,eax
c000985a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000985e:	01 d0                	add    eax,edx
c0009860:	c1 e0 0c             	shl    eax,0xc
c0009863:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009867:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000986c:	8b 00                	mov    eax,DWORD PTR [eax]
c000986e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009871:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009877:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000987b:	6a 01                	push   0x1
c000987d:	50                   	push   eax
c000987e:	e8 e7 fc ff ff       	call   c000956a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009883:	83 c4 0c             	add    esp,0xc
c0009886:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000988a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000988e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009890:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009894:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009898:	25 01 04 00 00       	and    eax,0x401
c000989d:	3d 01 04 00 00       	cmp    eax,0x401
c00098a2:	75 19                	jne    c00098bd <VAS::~VAS()+0xed>
c00098a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00098a8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00098ad:	83 ec 0c             	sub    esp,0xc
c00098b0:	50                   	push   eax
c00098b1:	e8 7d e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00098b6:	83 c4 10             	add    esp,0x10
c00098b9:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098bd:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00098c1:	eb 84                	jmp    c0009847 <VAS::~VAS()+0x77>
c00098c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c7:	25 00 04 00 00       	and    eax,0x400
c00098cc:	74 19                	je     c00098e7 <VAS::~VAS()+0x117>
c00098ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098d2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00098d7:	83 ec 0c             	sub    esp,0xc
c00098da:	50                   	push   eax
c00098db:	e8 53 e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00098e0:	83 c4 10             	add    esp,0x10
c00098e3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098e7:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00098eb:	e9 1e ff ff ff       	jmp    c000980e <VAS::~VAS()+0x3e>
c00098f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098f4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00098f7:	83 ec 0c             	sub    esp,0xc
c00098fa:	50                   	push   eax
c00098fb:	e8 b5 fc ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c0009900:	83 c4 10             	add    esp,0x10
c0009903:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009907:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000990a:	83 ec 0c             	sub    esp,0xc
c000990d:	50                   	push   eax
c000990e:	e8 20 e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0009913:	83 c4 10             	add    esp,0x10
c0009916:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000991a:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000991f:	48                   	dec    eax
c0009920:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0009925:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000992a:	85 c0                	test   eax,eax
c000992c:	75 01                	jne    c000992f <VAS::~VAS()+0x15f>
c000992e:	fb                   	sti    
c000992f:	90                   	nop
c0009930:	83 c4 2c             	add    esp,0x2c
c0009933:	c3                   	ret    

c0009934 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009934:	55                   	push   ebp
c0009935:	57                   	push   edi
c0009936:	56                   	push   esi
c0009937:	53                   	push   ebx
c0009938:	83 ec 1c             	sub    esp,0x1c
c000993b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000993f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009943:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009949:	77 0b                	ja     c0009956 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c000994b:	0f 20 d8             	mov    eax,cr3
c000994e:	0f 20 d8             	mov    eax,cr3
c0009951:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009954:	75 47                	jne    c000999d <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c0009956:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000995a:	09 d8                	or     eax,ebx
c000995c:	a9 ff 0f 00 00       	test   eax,0xfff
c0009961:	75 57                	jne    c00099ba <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0009963:	89 de                	mov    esi,ebx
c0009965:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009968:	c1 ee 16             	shr    esi,0x16
c000996b:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009972:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009976:	74 54                	je     c00099cc <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c0009978:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000997c:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009982:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0009986:	c1 e6 0c             	shl    esi,0xc
c0009989:	c1 eb 0a             	shr    ebx,0xa
c000998c:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009992:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009995:	83 c4 1c             	add    esp,0x1c
c0009998:	5b                   	pop    ebx
c0009999:	5e                   	pop    esi
c000999a:	5f                   	pop    edi
c000999b:	5d                   	pop    ebp
c000999c:	c3                   	ret    
c000999d:	83 ec 0c             	sub    esp,0xc
c00099a0:	68 c8 d9 01 c0       	push   0xc001d9c8
c00099a5:	e8 83 0b 00 00       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c00099aa:	83 c4 10             	add    esp,0x10
c00099ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00099b1:	09 d8                	or     eax,ebx
c00099b3:	a9 ff 0f 00 00       	test   eax,0xfff
c00099b8:	74 a9                	je     c0009963 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c00099ba:	83 ec 0c             	sub    esp,0xc
c00099bd:	68 30 da 01 c0       	push   0xc001da30
c00099c2:	e8 e8 67 00 00       	call   c00101af <KePanic(char const*)>
c00099c7:	83 c4 10             	add    esp,0x10
c00099ca:	eb 97                	jmp    c0009963 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c00099cc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00099d0:	e8 c0 e0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00099d5:	83 ec 0c             	sub    esp,0xc
c00099d8:	89 c5                	mov    ebp,eax
c00099da:	8b 0d b0 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021fb0
c00099e0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00099e4:	6a 01                	push   0x1
c00099e6:	e8 9a f8 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c00099eb:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00099f2:	6a 01                	push   0x1
c00099f4:	50                   	push   eax
c00099f5:	55                   	push   ebp
c00099f6:	81 cd 07 04 00 00    	or     ebp,0x407
c00099fc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009a00:	51                   	push   ecx
c0009a01:	e8 28 02 00 00       	call   c0009c2e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009a06:	83 c4 1c             	add    esp,0x1c
c0009a09:	68 00 10 00 00       	push   0x1000
c0009a0e:	6a 00                	push   0x0
c0009a10:	50                   	push   eax
c0009a11:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a15:	e8 b6 6a ff ff       	call   c00004d0 <memset>
c0009a1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009a1e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a21:	e8 8f fb ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a26:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009a2a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009a2d:	83 c4 10             	add    esp,0x10
c0009a30:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009a33:	e9 40 ff ff ff       	jmp    c0009978 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009a38 <VAS::allocatePages(int, int)>:
c0009a38:	55                   	push   ebp
c0009a39:	57                   	push   edi
c0009a3a:	56                   	push   esi
c0009a3b:	53                   	push   ebx
c0009a3c:	83 ec 1c             	sub    esp,0x1c
c0009a3f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009a43:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009a48:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009a4e:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009a54:	83 e0 01             	and    eax,0x1
c0009a57:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009a5b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009a5f:	0f 85 cc 00 00 00    	jne    c0009b31 <VAS::allocatePages(int, int)+0xf9>
c0009a65:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009a68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a6c:	85 c0                	test   eax,eax
c0009a6e:	0f 84 a1 00 00 00    	je     c0009b15 <VAS::allocatePages(int, int)+0xdd>
c0009a74:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009a78:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a7c:	c1 e6 0c             	shl    esi,0xc
c0009a7f:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009a83:	85 c0                	test   eax,eax
c0009a85:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009a88:	7e 33                	jle    c0009abd <VAS::allocatePages(int, int)+0x85>
c0009a8a:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009a8e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009a92:	81 cd 00 04 00 00    	or     ebp,0x400
c0009a98:	e8 f8 df ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009a9d:	55                   	push   ebp
c0009a9e:	53                   	push   ebx
c0009a9f:	50                   	push   eax
c0009aa0:	57                   	push   edi
c0009aa1:	e8 8e fe ff ff       	call   c0009934 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009aa6:	83 c4 10             	add    esp,0x10
c0009aa9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009aae:	74 03                	je     c0009ab3 <VAS::allocatePages(int, int)+0x7b>
c0009ab0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ab3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ab9:	39 de                	cmp    esi,ebx
c0009abb:	75 db                	jne    c0009a98 <VAS::allocatePages(int, int)+0x60>
c0009abd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009ac2:	75 12                	jne    c0009ad6 <VAS::allocatePages(int, int)+0x9e>
c0009ac4:	0f 20 d8             	mov    eax,cr3
c0009ac7:	0f 22 d8             	mov    cr3,eax
c0009aca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ace:	83 c4 1c             	add    esp,0x1c
c0009ad1:	5b                   	pop    ebx
c0009ad2:	5e                   	pop    esi
c0009ad3:	5f                   	pop    edi
c0009ad4:	5d                   	pop    ebp
c0009ad5:	c3                   	ret    
c0009ad6:	c1 ee 0a             	shr    esi,0xa
c0009ad9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009add:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009ae3:	c1 eb 0a             	shr    ebx,0xa
c0009ae6:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009aec:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009af2:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009af8:	39 c3                	cmp    ebx,eax
c0009afa:	77 ce                	ja     c0009aca <VAS::allocatePages(int, int)+0x92>
c0009afc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009aff:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b05:	39 d8                	cmp    eax,ebx
c0009b07:	73 f3                	jae    c0009afc <VAS::allocatePages(int, int)+0xc4>
c0009b09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b0d:	83 c4 1c             	add    esp,0x1c
c0009b10:	5b                   	pop    ebx
c0009b11:	5e                   	pop    esi
c0009b12:	5f                   	pop    edi
c0009b13:	5d                   	pop    ebp
c0009b14:	c3                   	ret    
c0009b15:	83 ec 0c             	sub    esp,0xc
c0009b18:	68 54 da 01 c0       	push   0xc001da54
c0009b1d:	e8 8d 66 00 00       	call   c00101af <KePanic(char const*)>
c0009b22:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009b25:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b29:	83 c4 10             	add    esp,0x10
c0009b2c:	e9 43 ff ff ff       	jmp    c0009a74 <VAS::allocatePages(int, int)+0x3c>
c0009b31:	83 ec 0c             	sub    esp,0xc
c0009b34:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009b38:	51                   	push   ecx
c0009b39:	e8 47 f7 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009b3e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b42:	83 c4 10             	add    esp,0x10
c0009b45:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009b4a:	0f 87 9b 00 00 00    	ja     c0009beb <VAS::allocatePages(int, int)+0x1b3>
c0009b50:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009b54:	85 d2                	test   edx,edx
c0009b56:	7e 3c                	jle    c0009b94 <VAS::allocatePages(int, int)+0x15c>
c0009b58:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b5c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009b60:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b64:	c1 e5 0c             	shl    ebp,0xc
c0009b67:	81 ce 00 04 00 00    	or     esi,0x400
c0009b6d:	01 dd                	add    ebp,ebx
c0009b6f:	e8 21 df ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009b74:	56                   	push   esi
c0009b75:	53                   	push   ebx
c0009b76:	50                   	push   eax
c0009b77:	57                   	push   edi
c0009b78:	e8 b7 fd ff ff       	call   c0009934 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009b7d:	83 c4 10             	add    esp,0x10
c0009b80:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b85:	74 03                	je     c0009b8a <VAS::allocatePages(int, int)+0x152>
c0009b87:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b8a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b90:	39 dd                	cmp    ebp,ebx
c0009b92:	75 db                	jne    c0009b6f <VAS::allocatePages(int, int)+0x137>
c0009b94:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b99:	0f 84 25 ff ff ff    	je     c0009ac4 <VAS::allocatePages(int, int)+0x8c>
c0009b9f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009ba3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009ba7:	89 d3                	mov    ebx,edx
c0009ba9:	c1 e0 0c             	shl    eax,0xc
c0009bac:	c1 eb 0a             	shr    ebx,0xa
c0009baf:	01 d0                	add    eax,edx
c0009bb1:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009bb7:	c1 e8 0a             	shr    eax,0xa
c0009bba:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009bc0:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009bc5:	2d 00 00 40 00       	sub    eax,0x400000
c0009bca:	39 c3                	cmp    ebx,eax
c0009bcc:	0f 87 f8 fe ff ff    	ja     c0009aca <VAS::allocatePages(int, int)+0x92>
c0009bd2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009bd5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009bdb:	39 d8                	cmp    eax,ebx
c0009bdd:	73 f3                	jae    c0009bd2 <VAS::allocatePages(int, int)+0x19a>
c0009bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009be3:	83 c4 1c             	add    esp,0x1c
c0009be6:	5b                   	pop    ebx
c0009be7:	5e                   	pop    esi
c0009be8:	5f                   	pop    edi
c0009be9:	5d                   	pop    ebp
c0009bea:	c3                   	ret    
c0009beb:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009bf0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009bf6:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009bfd:	0f 84 4d ff ff ff    	je     c0009b50 <VAS::allocatePages(int, int)+0x118>
c0009c03:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009c0b:	e9 40 ff ff ff       	jmp    c0009b50 <VAS::allocatePages(int, int)+0x118>

c0009c10 <VAS::setCPUSpecific(unsigned long)>:
c0009c10:	83 ec 0c             	sub    esp,0xc
c0009c13:	6a 05                	push   0x5
c0009c15:	68 00 00 40 c2       	push   0xc2400000
c0009c1a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c1e:	50                   	push   eax
c0009c1f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c23:	52                   	push   edx
c0009c24:	e8 0b fd ff ff       	call   c0009934 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c29:	83 c4 1c             	add    esp,0x1c
c0009c2c:	c3                   	ret    
c0009c2d:	90                   	nop

c0009c2e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009c2e:	55                   	push   ebp
c0009c2f:	57                   	push   edi
c0009c30:	56                   	push   esi
c0009c31:	53                   	push   ebx
c0009c32:	83 ec 1c             	sub    esp,0x1c
c0009c35:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009c3a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009c3e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009c44:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009c48:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009c4e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009c52:	83 e0 01             	and    eax,0x1
c0009c55:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009c59:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c5d:	85 c0                	test   eax,eax
c0009c5f:	7e 39                	jle    c0009c9a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009c61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c65:	89 f3                	mov    ebx,esi
c0009c67:	c1 e0 0c             	shl    eax,0xc
c0009c6a:	01 f0                	add    eax,esi
c0009c6c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c70:	55                   	push   ebp
c0009c71:	53                   	push   ebx
c0009c72:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c76:	29 f0                	sub    eax,esi
c0009c78:	01 d8                	add    eax,ebx
c0009c7a:	50                   	push   eax
c0009c7b:	57                   	push   edi
c0009c7c:	e8 b3 fc ff ff       	call   c0009934 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c81:	83 c4 10             	add    esp,0x10
c0009c84:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c89:	74 03                	je     c0009c8e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009c8b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c8e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c94:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009c98:	75 d6                	jne    c0009c70 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009c9a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c9f:	75 10                	jne    c0009cb1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009ca1:	0f 20 d8             	mov    eax,cr3
c0009ca4:	0f 22 d8             	mov    cr3,eax
c0009ca7:	83 c4 1c             	add    esp,0x1c
c0009caa:	89 f0                	mov    eax,esi
c0009cac:	5b                   	pop    ebx
c0009cad:	5e                   	pop    esi
c0009cae:	5f                   	pop    edi
c0009caf:	5d                   	pop    ebp
c0009cb0:	c3                   	ret    
c0009cb1:	89 f3                	mov    ebx,esi
c0009cb3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009cb7:	c1 eb 0a             	shr    ebx,0xa
c0009cba:	c1 e0 0c             	shl    eax,0xc
c0009cbd:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009cc3:	01 f0                	add    eax,esi
c0009cc5:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009ccb:	c1 e8 0a             	shr    eax,0xa
c0009cce:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cd3:	2d 00 00 40 00       	sub    eax,0x400000
c0009cd8:	39 c3                	cmp    ebx,eax
c0009cda:	77 cb                	ja     c0009ca7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009cdc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009cdf:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ce5:	39 d8                	cmp    eax,ebx
c0009ce7:	73 f3                	jae    c0009cdc <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009ce9:	83 c4 1c             	add    esp,0x1c
c0009cec:	89 f0                	mov    eax,esi
c0009cee:	5b                   	pop    ebx
c0009cef:	5e                   	pop    esi
c0009cf0:	5f                   	pop    edi
c0009cf1:	5d                   	pop    ebp
c0009cf2:	c3                   	ret    
c0009cf3:	90                   	nop

c0009cf4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009cf4:	55                   	push   ebp
c0009cf5:	57                   	push   edi
c0009cf6:	56                   	push   esi
c0009cf7:	53                   	push   ebx
c0009cf8:	83 ec 1c             	sub    esp,0x1c
c0009cfb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009cff:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d03:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009d07:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009d0b:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d10:	75 4a                	jne    c0009d5c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009d12:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009d16:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d19:	c1 eb 16             	shr    ebx,0x16
c0009d1c:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009d23:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009d27:	74 4d                	je     c0009d76 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009d29:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d2d:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009d31:	c1 e8 0a             	shr    eax,0xa
c0009d34:	80 fa 01             	cmp    dl,0x1
c0009d37:	19 d2                	sbb    edx,edx
c0009d39:	c1 e3 0c             	shl    ebx,0xc
c0009d3c:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009d40:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009d46:	25 fc 0f 00 00       	and    eax,0xffc
c0009d4b:	01 d8                	add    eax,ebx
c0009d4d:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009d54:	83 c4 1c             	add    esp,0x1c
c0009d57:	5b                   	pop    ebx
c0009d58:	5e                   	pop    esi
c0009d59:	5f                   	pop    edi
c0009d5a:	5d                   	pop    ebp
c0009d5b:	c3                   	ret    
c0009d5c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d60:	83 ec 0c             	sub    esp,0xc
c0009d63:	68 80 da 01 c0       	push   0xc001da80
c0009d68:	e8 42 64 00 00       	call   c00101af <KePanic(char const*)>
c0009d6d:	83 c4 10             	add    esp,0x10
c0009d70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009d74:	eb 9c                	jmp    c0009d12 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009d76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d7a:	e8 16 dd ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009d7f:	83 ec 0c             	sub    esp,0xc
c0009d82:	89 c5                	mov    ebp,eax
c0009d84:	8b 0d b0 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021fb0
c0009d8a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009d8e:	6a 01                	push   0x1
c0009d90:	e8 f0 f4 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009d95:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009d9c:	6a 01                	push   0x1
c0009d9e:	50                   	push   eax
c0009d9f:	55                   	push   ebp
c0009da0:	81 cd 07 04 00 00    	or     ebp,0x407
c0009da6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009daa:	51                   	push   ecx
c0009dab:	e8 7e fe ff ff       	call   c0009c2e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009db0:	83 c4 1c             	add    esp,0x1c
c0009db3:	68 00 10 00 00       	push   0x1000
c0009db8:	6a 00                	push   0x0
c0009dba:	50                   	push   eax
c0009dbb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dbf:	e8 0c 67 ff ff       	call   c00004d0 <memset>
c0009dc4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009dc8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009dcb:	e8 e5 f7 ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c0009dd0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009dd9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009ddd:	e9 47 ff ff ff       	jmp    c0009d29 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009de2 <VAS::VAS(bool)>:
c0009de2:	53                   	push   ebx
c0009de3:	83 ec 28             	sub    esp,0x28
c0009de6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009dea:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009dee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009df2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009df9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009dfd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009e04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e08:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009e0c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009e0f:	e8 81 dc ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009e14:	89 c2                	mov    edx,eax
c0009e16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e1a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009e1d:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c0009e23:	83 ec 0c             	sub    esp,0xc
c0009e26:	6a 01                	push   0x1
c0009e28:	e8 58 f4 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009e2d:	83 c4 10             	add    esp,0x10
c0009e30:	89 c2                	mov    edx,eax
c0009e32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e36:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009e39:	83 ec 0c             	sub    esp,0xc
c0009e3c:	6a 03                	push   0x3
c0009e3e:	6a 01                	push   0x1
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	53                   	push   ebx
c0009e43:	e8 e6 fd ff ff       	call   c0009c2e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e48:	83 c4 20             	add    esp,0x20
c0009e4b:	89 c2                	mov    edx,eax
c0009e4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e51:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009e54:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009e5c:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009e64:	7f 1c                	jg     c0009e82 <VAS::VAS(bool)+0xa0>
c0009e66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e6a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e6d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e71:	c1 e2 02             	shl    edx,0x2
c0009e74:	01 d0                	add    eax,edx
c0009e76:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009e7c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009e80:	eb da                	jmp    c0009e5c <VAS::VAS(bool)+0x7a>
c0009e82:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009e8a:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009e92:	7f 7a                	jg     c0009f0e <VAS::VAS(bool)+0x12c>
c0009e94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e98:	2d 00 02 00 00       	sub    eax,0x200
c0009e9d:	c1 e0 0c             	shl    eax,0xc
c0009ea0:	83 c8 03             	or     eax,0x3
c0009ea3:	89 c2                	mov    edx,eax
c0009ea5:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009eaa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009eb0:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009eb6:	83 e0 10             	and    eax,0x10
c0009eb9:	84 c0                	test   al,al
c0009ebb:	74 07                	je     c0009ec4 <VAS::VAS(bool)+0xe2>
c0009ebd:	b8 00 01 00 00       	mov    eax,0x100
c0009ec2:	eb 05                	jmp    c0009ec9 <VAS::VAS(bool)+0xe7>
c0009ec4:	b8 00 00 00 00       	mov    eax,0x0
c0009ec9:	09 d0                	or     eax,edx
c0009ecb:	89 c1                	mov    ecx,eax
c0009ecd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ed1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ed4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009ed8:	c1 e2 02             	shl    edx,0x2
c0009edb:	01 d0                	add    eax,edx
c0009edd:	89 ca                	mov    edx,ecx
c0009edf:	89 10                	mov    DWORD PTR [eax],edx
c0009ee1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009ee5:	2d 40 03 00 00       	sub    eax,0x340
c0009eea:	83 f8 7f             	cmp    eax,0x7f
c0009eed:	77 16                	ja     c0009f05 <VAS::VAS(bool)+0x123>
c0009eef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ef3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ef6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009efa:	c1 e2 02             	shl    edx,0x2
c0009efd:	01 d0                	add    eax,edx
c0009eff:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009f05:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009f09:	e9 7c ff ff ff       	jmp    c0009e8a <VAS::VAS(bool)+0xa8>
c0009f0e:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009f13:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f19:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f1f:	83 e0 10             	and    eax,0x10
c0009f22:	84 c0                	test   al,al
c0009f24:	74 07                	je     c0009f2d <VAS::VAS(bool)+0x14b>
c0009f26:	b8 03 41 00 00       	mov    eax,0x4103
c0009f2b:	eb 05                	jmp    c0009f32 <VAS::VAS(bool)+0x150>
c0009f2d:	b8 03 40 00 00       	mov    eax,0x4003
c0009f32:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009f36:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009f39:	81 c2 20 0c 00 00    	add    edx,0xc20
c0009f3f:	89 02                	mov    DWORD PTR [edx],eax
c0009f41:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009f46:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f4c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0009f52:	83 ec 08             	sub    esp,0x8
c0009f55:	50                   	push   eax
c0009f56:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f5a:	e8 b1 fc ff ff       	call   c0009c10 <VAS::setCPUSpecific(unsigned long)>
c0009f5f:	83 c4 10             	add    esp,0x10
c0009f62:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f66:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009f69:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009f6e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f74:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f7a:	83 e0 10             	and    eax,0x10
c0009f7d:	84 c0                	test   al,al
c0009f7f:	74 07                	je     c0009f88 <VAS::VAS(bool)+0x1a6>
c0009f81:	b8 00 01 00 00       	mov    eax,0x100
c0009f86:	eb 05                	jmp    c0009f8d <VAS::VAS(bool)+0x1ab>
c0009f88:	b8 00 00 00 00       	mov    eax,0x0
c0009f8d:	09 c2                	or     edx,eax
c0009f8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f93:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f96:	05 fc 0f 00 00       	add    eax,0xffc
c0009f9b:	83 ca 03             	or     edx,0x3
c0009f9e:	89 10                	mov    DWORD PTR [eax],edx
c0009fa0:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009fa5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fab:	83 ec 0c             	sub    esp,0xc
c0009fae:	50                   	push   eax
c0009faf:	e8 4c 1c 00 00       	call   c000bc00 <Device::getName()>
c0009fb4:	83 c4 10             	add    esp,0x10
c0009fb7:	83 ec 08             	sub    esp,0x8
c0009fba:	68 67 db 01 c0       	push   0xc001db67
c0009fbf:	50                   	push   eax
c0009fc0:	e8 1b 67 ff ff       	call   c00006e0 <strcmp>
c0009fc5:	83 c4 10             	add    esp,0x10
c0009fc8:	85 c0                	test   eax,eax
c0009fca:	0f 94 c0             	sete   al
c0009fcd:	84 c0                	test   al,al
c0009fcf:	0f 84 87 00 00 00    	je     c000a05c <VAS::VAS(bool)+0x27a>
c0009fd5:	fa                   	cli    
c0009fd6:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0009fdb:	40                   	inc    eax
c0009fdc:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0009fe1:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009fe6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fec:	05 7c 09 00 00       	add    eax,0x97c
c0009ff1:	83 ec 0c             	sub    esp,0xc
c0009ff4:	50                   	push   eax
c0009ff5:	e8 bc d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0009ffa:	83 c4 10             	add    esp,0x10
c0009ffd:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a002:	89 c3                	mov    ebx,eax
c000a004:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000a009:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a00f:	05 7c 09 00 00       	add    eax,0x97c
c000a014:	83 ec 0c             	sub    esp,0xc
c000a017:	50                   	push   eax
c000a018:	e8 99 d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a01d:	83 c4 10             	add    esp,0x10
c000a020:	83 ec 08             	sub    esp,0x8
c000a023:	50                   	push   eax
c000a024:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a028:	e8 69 f5 ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c000a02d:	83 c4 10             	add    esp,0x10
c000a030:	8b 00                	mov    eax,DWORD PTR [eax]
c000a032:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a037:	6a 11                	push   0x11
c000a039:	53                   	push   ebx
c000a03a:	50                   	push   eax
c000a03b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a03f:	e8 f0 f8 ff ff       	call   c0009934 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a044:	83 c4 10             	add    esp,0x10
c000a047:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a04c:	48                   	dec    eax
c000a04d:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a052:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a057:	85 c0                	test   eax,eax
c000a059:	75 01                	jne    c000a05c <VAS::VAS(bool)+0x27a>
c000a05b:	fb                   	sti    
c000a05c:	90                   	nop
c000a05d:	83 c4 28             	add    esp,0x28
c000a060:	5b                   	pop    ebx
c000a061:	c3                   	ret    

c000a062 <VAS::evict(unsigned long)>:
c000a062:	55                   	push   ebp
c000a063:	57                   	push   edi
c000a064:	56                   	push   esi
c000a065:	53                   	push   ebx
c000a066:	83 ec 1c             	sub    esp,0x1c
c000a069:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a06d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a071:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a075:	e8 4c f3 ff ff       	call   c00093c6 <Virt::allocateSwapfilePage()>
c000a07a:	8b 0d 0c f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f80c
c000a080:	89 c7                	mov    edi,eax
c000a082:	85 c9                	test   ecx,ecx
c000a084:	7e 3e                	jle    c000a0c4 <VAS::evict(unsigned long)+0x62>
c000a086:	89 ee                	mov    esi,ebp
c000a088:	31 db                	xor    ebx,ebx
c000a08a:	83 ec 0c             	sub    esp,0xc
c000a08d:	57                   	push   edi
c000a08e:	e8 21 f3 ff ff       	call   c00093b4 <Virt::swapIDToSector(unsigned long)>
c000a093:	89 34 24             	mov    DWORD PTR [esp],esi
c000a096:	01 d8                	add    eax,ebx
c000a098:	6a 01                	push   0x1
c000a09a:	31 d2                	xor    edx,edx
c000a09c:	43                   	inc    ebx
c000a09d:	52                   	push   edx
c000a09e:	81 c6 00 02 00 00    	add    esi,0x200
c000a0a4:	50                   	push   eax
c000a0a5:	0f be 05 18 f8 01 c0 	movsx  eax,BYTE PTR ds:0xc001f818
c000a0ac:	8b 14 85 1c 43 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbce4]
c000a0b3:	52                   	push   edx
c000a0b4:	e8 07 2c 00 00       	call   c000ccc0 <LogicalDisk::write(unsigned long long, int, void*)>
c000a0b9:	83 c4 20             	add    esp,0x20
c000a0bc:	39 1d 0c f8 01 c0    	cmp    DWORD PTR ds:0xc001f80c,ebx
c000a0c2:	7f c6                	jg     c000a08a <VAS::evict(unsigned long)+0x28>
c000a0c4:	83 ec 08             	sub    esp,0x8
c000a0c7:	c1 e7 0b             	shl    edi,0xb
c000a0ca:	55                   	push   ebp
c000a0cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0cf:	50                   	push   eax
c000a0d0:	e8 c1 f4 ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c000a0d5:	8b 10                	mov    edx,DWORD PTR [eax]
c000a0d7:	89 d1                	mov    ecx,edx
c000a0d9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a0df:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a0e5:	09 cf                	or     edi,ecx
c000a0e7:	89 38                	mov    DWORD PTR [eax],edi
c000a0e9:	89 14 24             	mov    DWORD PTR [esp],edx
c000a0ec:	ff 05 a8 1f 02 c0    	inc    DWORD PTR ds:0xc0021fa8
c000a0f2:	e8 3c d9 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000a0f7:	0f 20 d8             	mov    eax,cr3
c000a0fa:	0f 22 d8             	mov    cr3,eax
c000a0fd:	a1 a4 1f 02 c0       	mov    eax,ds:0xc0021fa4
c000a102:	c7 44 24 40 75 db 01 c0 	mov    DWORD PTR [esp+0x40],0xc001db75
c000a10a:	8d 50 01             	lea    edx,[eax+0x1]
c000a10d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a111:	89 15 a4 1f 02 c0    	mov    DWORD PTR ds:0xc0021fa4,edx
c000a117:	83 c4 2c             	add    esp,0x2c
c000a11a:	5b                   	pop    ebx
c000a11b:	5e                   	pop    esi
c000a11c:	5f                   	pop    edi
c000a11d:	5d                   	pop    ebp
c000a11e:	e9 0a 04 00 00       	jmp    c000a52d <Dbg::kprintf(char const*, ...)>
c000a123:	90                   	nop

c000a124 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a124:	55                   	push   ebp
c000a125:	57                   	push   edi
c000a126:	56                   	push   esi
c000a127:	53                   	push   ebx
c000a128:	83 ec 14             	sub    esp,0x14
c000a12b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a12f:	53                   	push   ebx
c000a130:	68 86 db 01 c0       	push   0xc001db86
c000a135:	e8 f3 03 00 00       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c000a13a:	83 c4 10             	add    esp,0x10
c000a13d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a143:	74 21                	je     c000a166 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a145:	83 ec 08             	sub    esp,0x8
c000a148:	53                   	push   ebx
c000a149:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a14d:	57                   	push   edi
c000a14e:	e8 43 f4 ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c000a153:	83 c4 10             	add    esp,0x10
c000a156:	89 c6                	mov    esi,eax
c000a158:	85 c0                	test   eax,eax
c000a15a:	74 0a                	je     c000a166 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a15c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a15e:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a164:	74 0a                	je     c000a170 <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a166:	31 c0                	xor    eax,eax
c000a168:	83 c4 0c             	add    esp,0xc
c000a16b:	5b                   	pop    ebx
c000a16c:	5e                   	pop    esi
c000a16d:	5f                   	pop    edi
c000a16e:	5d                   	pop    ebp
c000a16f:	c3                   	ret    
c000a170:	e8 20 d9 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a175:	c1 ed 0b             	shr    ebp,0xb
c000a178:	8b 16                	mov    edx,DWORD PTR [esi]
c000a17a:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a180:	09 c2                	or     edx,eax
c000a182:	81 ca 01 08 00 00    	or     edx,0x801
c000a188:	89 16                	mov    DWORD PTR [esi],edx
c000a18a:	8b 35 0c f8 01 c0    	mov    esi,DWORD PTR ds:0xc001f80c
c000a190:	85 f6                	test   esi,esi
c000a192:	7e 3e                	jle    c000a1d2 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a194:	89 df                	mov    edi,ebx
c000a196:	31 f6                	xor    esi,esi
c000a198:	83 ec 0c             	sub    esp,0xc
c000a19b:	55                   	push   ebp
c000a19c:	e8 13 f2 ff ff       	call   c00093b4 <Virt::swapIDToSector(unsigned long)>
c000a1a1:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a1a4:	01 f0                	add    eax,esi
c000a1a6:	6a 01                	push   0x1
c000a1a8:	31 d2                	xor    edx,edx
c000a1aa:	46                   	inc    esi
c000a1ab:	52                   	push   edx
c000a1ac:	81 c7 00 02 00 00    	add    edi,0x200
c000a1b2:	50                   	push   eax
c000a1b3:	0f be 05 18 f8 01 c0 	movsx  eax,BYTE PTR ds:0xc001f818
c000a1ba:	8b 0c 85 1c 43 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbce4]
c000a1c1:	51                   	push   ecx
c000a1c2:	e8 8d 2a 00 00       	call   c000cc54 <LogicalDisk::read(unsigned long long, int, void*)>
c000a1c7:	83 c4 20             	add    esp,0x20
c000a1ca:	39 35 0c f8 01 c0    	cmp    DWORD PTR ds:0xc001f80c,esi
c000a1d0:	7f c6                	jg     c000a198 <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a1d2:	a1 a8 1f 02 c0       	mov    eax,ds:0xc0021fa8
c000a1d7:	48                   	dec    eax
c000a1d8:	52                   	push   edx
c000a1d9:	a3 a8 1f 02 c0       	mov    ds:0xc0021fa8,eax
c000a1de:	50                   	push   eax
c000a1df:	53                   	push   ebx
c000a1e0:	68 99 db 01 c0       	push   0xc001db99
c000a1e5:	e8 43 03 00 00       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c000a1ea:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a1ed:	e8 a4 f1 ff ff       	call   c0009396 <Virt::freeSwapfilePage(unsigned long)>
c000a1f2:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a1f7:	83 c4 10             	add    esp,0x10
c000a1fa:	48                   	dec    eax
c000a1fb:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a200:	85 c0                	test   eax,eax
c000a202:	75 01                	jne    c000a205 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a204:	fb                   	sti    
c000a205:	0f 20 d8             	mov    eax,cr3
c000a208:	0f 22 d8             	mov    cr3,eax
c000a20b:	b0 01                	mov    al,0x1
c000a20d:	e9 56 ff ff ff       	jmp    c000a168 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a212 <VAS::scanForEviction()>:
c000a212:	57                   	push   edi
c000a213:	31 ff                	xor    edi,edi
c000a215:	56                   	push   esi
c000a216:	53                   	push   ebx
c000a217:	83 ec 10             	sub    esp,0x10
c000a21a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a21e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a221:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a227:	75 0e                	jne    c000a237 <VAS::scanForEviction()+0x25>
c000a229:	89 da                	mov    edx,ebx
c000a22b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a22e:	c1 ea 16             	shr    edx,0x16
c000a231:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a235:	74 4e                	je     c000a285 <VAS::scanForEviction()+0x73>
c000a237:	53                   	push   ebx
c000a238:	56                   	push   esi
c000a239:	e8 58 f3 ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c000a23e:	5a                   	pop    edx
c000a23f:	8b 10                	mov    edx,DWORD PTR [eax]
c000a241:	59                   	pop    ecx
c000a242:	89 d1                	mov    ecx,edx
c000a244:	81 e1 01 08 00 00    	and    ecx,0x801
c000a24a:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a250:	74 3e                	je     c000a290 <VAS::scanForEviction()+0x7e>
c000a252:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a258:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a25e:	76 2b                	jbe    c000a28b <VAS::scanForEviction()+0x79>
c000a260:	47                   	inc    edi
c000a261:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a268:	83 ff 03             	cmp    edi,0x3
c000a26b:	74 32                	je     c000a29f <VAS::scanForEviction()+0x8d>
c000a26d:	31 db                	xor    ebx,ebx
c000a26f:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a275:	75 c0                	jne    c000a237 <VAS::scanForEviction()+0x25>
c000a277:	89 da                	mov    edx,ebx
c000a279:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a27c:	c1 ea 16             	shr    edx,0x16
c000a27f:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a283:	75 b2                	jne    c000a237 <VAS::scanForEviction()+0x25>
c000a285:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a28b:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a28e:	eb 91                	jmp    c000a221 <VAS::scanForEviction()+0xf>
c000a290:	f6 c2 20             	test   dl,0x20
c000a293:	74 13                	je     c000a2a8 <VAS::scanForEviction()+0x96>
c000a295:	83 e2 df             	and    edx,0xffffffdf
c000a298:	89 10                	mov    DWORD PTR [eax],edx
c000a29a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a29d:	eb b3                	jmp    c000a252 <VAS::scanForEviction()+0x40>
c000a29f:	83 c4 10             	add    esp,0x10
c000a2a2:	31 c0                	xor    eax,eax
c000a2a4:	5b                   	pop    ebx
c000a2a5:	5e                   	pop    esi
c000a2a6:	5f                   	pop    edi
c000a2a7:	c3                   	ret    
c000a2a8:	83 ec 08             	sub    esp,0x8
c000a2ab:	89 d0                	mov    eax,edx
c000a2ad:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a2b2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a2b6:	53                   	push   ebx
c000a2b7:	68 ae db 01 c0       	push   0xc001dbae
c000a2bc:	e8 6c 02 00 00       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c000a2c1:	58                   	pop    eax
c000a2c2:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a2c5:	5a                   	pop    edx
c000a2c6:	51                   	push   ecx
c000a2c7:	56                   	push   esi
c000a2c8:	e8 95 fd ff ff       	call   c000a062 <VAS::evict(unsigned long)>
c000a2cd:	5b                   	pop    ebx
c000a2ce:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a2d1:	5f                   	pop    edi
c000a2d2:	50                   	push   eax
c000a2d3:	68 c2 db 01 c0       	push   0xc001dbc2
c000a2d8:	e8 50 02 00 00       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c000a2dd:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a2eb:	83 c4 10             	add    esp,0x10
c000a2ee:	5b                   	pop    ebx
c000a2ef:	5e                   	pop    esi
c000a2f0:	5f                   	pop    edi
c000a2f1:	c3                   	ret    

c000a2f2 <mapVASFirstTime>:
c000a2f2:	55                   	push   ebp
c000a2f3:	57                   	push   edi
c000a2f4:	56                   	push   esi
c000a2f5:	53                   	push   ebx
c000a2f6:	83 ec 0c             	sub    esp,0xc
c000a2f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a2fe:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a301:	4a                   	dec    edx
c000a302:	0f 84 c7 00 00 00    	je     c000a3cf <mapVASFirstTime+0xdd>
c000a308:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a30b:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a30e:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a313:	c1 e5 15             	shl    ebp,0x15
c000a316:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a31b:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a321:	29 eb                	sub    ebx,ebp
c000a323:	29 ef                	sub    edi,ebp
c000a325:	e8 6b d7 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a32a:	83 ec 0c             	sub    esp,0xc
c000a32d:	68 03 04 00 00       	push   0x403
c000a332:	6a 01                	push   0x1
c000a334:	53                   	push   ebx
c000a335:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a33b:	50                   	push   eax
c000a33c:	56                   	push   esi
c000a33d:	e8 ec f8 ff ff       	call   c0009c2e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a342:	83 c4 20             	add    esp,0x20
c000a345:	39 fb                	cmp    ebx,edi
c000a347:	75 dc                	jne    c000a325 <mapVASFirstTime+0x33>
c000a349:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a34e:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a353:	29 eb                	sub    ebx,ebp
c000a355:	29 ef                	sub    edi,ebp
c000a357:	e8 39 d7 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a35c:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a360:	19 d2                	sbb    edx,edx
c000a362:	83 ec 0c             	sub    esp,0xc
c000a365:	83 e2 04             	and    edx,0x4
c000a368:	81 c2 03 04 00 00    	add    edx,0x403
c000a36e:	52                   	push   edx
c000a36f:	6a 01                	push   0x1
c000a371:	53                   	push   ebx
c000a372:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a378:	50                   	push   eax
c000a379:	56                   	push   esi
c000a37a:	e8 af f8 ff ff       	call   c0009c2e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a37f:	83 c4 20             	add    esp,0x20
c000a382:	39 df                	cmp    edi,ebx
c000a384:	75 d1                	jne    c000a357 <mapVASFirstTime+0x65>
c000a386:	bb 7c 10 02 c0       	mov    ebx,0xc002107c
c000a38b:	81 eb 00 00 02 c0    	sub    ebx,0xc0020000
c000a391:	c1 eb 0c             	shr    ebx,0xc
c000a394:	53                   	push   ebx
c000a395:	68 7d 00 02 c0       	push   0xc002007d
c000a39a:	68 00 00 02 c0       	push   0xc0020000
c000a39f:	68 a4 da 01 c0       	push   0xc001daa4
c000a3a4:	e8 84 01 00 00       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c000a3a9:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000a3b0:	6a fd                	push   0xfffffffd
c000a3b2:	53                   	push   ebx
c000a3b3:	68 00 00 02 c0       	push   0xc0020000
c000a3b8:	56                   	push   esi
c000a3b9:	e8 5a f3 ff ff       	call   c0009718 <VAS::reflagRange(unsigned long, int, int, int)>
c000a3be:	0f 20 d8             	mov    eax,cr3
c000a3c1:	0f 22 d8             	mov    cr3,eax
c000a3c4:	83 c4 20             	add    esp,0x20
c000a3c7:	83 c4 0c             	add    esp,0xc
c000a3ca:	5b                   	pop    ebx
c000a3cb:	5e                   	pop    esi
c000a3cc:	5f                   	pop    edi
c000a3cd:	5d                   	pop    ebp
c000a3ce:	c3                   	ret    
c000a3cf:	83 ec 0c             	sub    esp,0xc
c000a3d2:	68 d5 db 01 c0       	push   0xc001dbd5
c000a3d7:	e8 51 01 00 00       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c000a3dc:	83 c4 10             	add    esp,0x10
c000a3df:	83 c4 0c             	add    esp,0xc
c000a3e2:	5b                   	pop    ebx
c000a3e3:	5e                   	pop    esi
c000a3e4:	5f                   	pop    edi
c000a3e5:	5d                   	pop    ebp
c000a3e6:	c3                   	ret    

c000a3e7 <__cxa_atexit>:
c000a3e7:	31 c0                	xor    eax,eax
c000a3e9:	c3                   	ret    

c000a3ea <__cxa_finalize>:
c000a3ea:	c3                   	ret    

c000a3eb <__stack_chk_fail>:
c000a3eb:	55                   	push   ebp
c000a3ec:	89 e5                	mov    ebp,esp
c000a3ee:	83 ec 10             	sub    esp,0x10
c000a3f1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a3f4:	68 ee db 01 c0       	push   0xc001dbee
c000a3f9:	e8 2f 01 00 00       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c000a3fe:	58                   	pop    eax
c000a3ff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a402:	5a                   	pop    edx
c000a403:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a406:	68 ee db 01 c0       	push   0xc001dbee
c000a40b:	e8 1d 01 00 00       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c000a410:	c7 04 24 f6 db 01 c0 	mov    DWORD PTR [esp],0xc001dbf6
c000a417:	e8 93 5d 00 00       	call   c00101af <KePanic(char const*)>
c000a41c:	83 c4 10             	add    esp,0x10
c000a41f:	c9                   	leave  
c000a420:	c3                   	ret    

c000a421 <__cxa_pure_virtual>:
c000a421:	83 ec 18             	sub    esp,0x18
c000a424:	68 0e dc 01 c0       	push   0xc001dc0e
c000a429:	e8 81 5d 00 00       	call   c00101af <KePanic(char const*)>
c000a42e:	83 c4 1c             	add    esp,0x1c
c000a431:	c3                   	ret    

c000a432 <operator new[](unsigned long)>:
c000a432:	e9 82 d3 ff ff       	jmp    c00077b9 <malloc>

c000a437 <operator delete(void*, unsigned long)>:
c000a437:	e9 9d d3 ff ff       	jmp    c00077d9 <rfree>

c000a43c <operator delete[](void*)>:
c000a43c:	e9 98 d3 ff ff       	jmp    c00077d9 <rfree>

c000a441 <operator delete[](void*, unsigned long)>:
c000a441:	e9 93 d3 ff ff       	jmp    c00077d9 <rfree>

c000a446 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a446:	55                   	push   ebp
c000a447:	b9 04 00 00 00       	mov    ecx,0x4
c000a44c:	57                   	push   edi
c000a44d:	56                   	push   esi
c000a44e:	be d3 d7 01 c0       	mov    esi,0xc001d7d3
c000a453:	53                   	push   ebx
c000a454:	83 ec 20             	sub    esp,0x20
c000a457:	a1 d2 d7 01 c0       	mov    eax,ds:0xc001d7d2
c000a45c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a460:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a464:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a468:	a1 df d7 01 c0       	mov    eax,ds:0xc001d7df
c000a46d:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a471:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a475:	fc                   	cld    
c000a476:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a478:	89 ee                	mov    esi,ebp
c000a47a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a47e:	eb 02                	jmp    c000a482 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a480:	89 c6                	mov    esi,eax
c000a482:	31 d2                	xor    edx,edx
c000a484:	41                   	inc    ecx
c000a485:	89 f0                	mov    eax,esi
c000a487:	f7 f3                	div    ebx
c000a489:	39 de                	cmp    esi,ebx
c000a48b:	73 f3                	jae    c000a480 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a48d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a490:	eb 02                	jmp    c000a494 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a492:	89 c5                	mov    ebp,eax
c000a494:	31 d2                	xor    edx,edx
c000a496:	49                   	dec    ecx
c000a497:	89 e8                	mov    eax,ebp
c000a499:	f7 f3                	div    ebx
c000a49b:	39 dd                	cmp    ebp,ebx
c000a49d:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a4a1:	88 11                	mov    BYTE PTR [ecx],dl
c000a4a3:	73 ed                	jae    c000a492 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a4a5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a4a9:	83 c4 20             	add    esp,0x20
c000a4ac:	5b                   	pop    ebx
c000a4ad:	5e                   	pop    esi
c000a4ae:	5f                   	pop    edi
c000a4af:	5d                   	pop    ebp
c000a4b0:	c3                   	ret    

c000a4b1 <Dbg::logc(char)>:
c000a4b1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a4b5:	f6 05 d0 1e 02 c0 10 	test   BYTE PTR ds:0xc0021ed0,0x10
c000a4bc:	75 12                	jne    c000a4d0 <Dbg::logc(char)+0x1f>
c000a4be:	ba fd 03 00 00       	mov    edx,0x3fd
c000a4c3:	ec                   	in     al,dx
c000a4c4:	a8 20                	test   al,0x20
c000a4c6:	74 fb                	je     c000a4c3 <Dbg::logc(char)+0x12>
c000a4c8:	ba f8 03 00 00       	mov    edx,0x3f8
c000a4cd:	88 c8                	mov    al,cl
c000a4cf:	ee                   	out    dx,al
c000a4d0:	c3                   	ret    

c000a4d1 <Dbg::logs(char*)>:
c000a4d1:	53                   	push   ebx
c000a4d2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a4d6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a4d9:	84 c0                	test   al,al
c000a4db:	74 0f                	je     c000a4ec <Dbg::logs(char*)+0x1b>
c000a4dd:	50                   	push   eax
c000a4de:	43                   	inc    ebx
c000a4df:	e8 cd ff ff ff       	call   c000a4b1 <Dbg::logc(char)>
c000a4e4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a4e7:	5a                   	pop    edx
c000a4e8:	84 c0                	test   al,al
c000a4ea:	75 f1                	jne    c000a4dd <Dbg::logs(char*)+0xc>
c000a4ec:	5b                   	pop    ebx
c000a4ed:	c3                   	ret    

c000a4ee <Dbg::logWriteInt(unsigned int)>:
c000a4ee:	83 ec 10             	sub    esp,0x10
c000a4f1:	6a 0a                	push   0xa
c000a4f3:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a4f7:	50                   	push   eax
c000a4f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4fc:	50                   	push   eax
c000a4fd:	e8 44 ff ff ff       	call   c000a446 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a502:	50                   	push   eax
c000a503:	e8 c9 ff ff ff       	call   c000a4d1 <Dbg::logs(char*)>
c000a508:	83 c4 20             	add    esp,0x20
c000a50b:	c3                   	ret    

c000a50c <Dbg::logWriteIntBase(unsigned int, int)>:
c000a50c:	83 ec 10             	sub    esp,0x10
c000a50f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a513:	50                   	push   eax
c000a514:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a518:	50                   	push   eax
c000a519:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a51d:	52                   	push   edx
c000a51e:	e8 23 ff ff ff       	call   c000a446 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a523:	50                   	push   eax
c000a524:	e8 a8 ff ff ff       	call   c000a4d1 <Dbg::logs(char*)>
c000a529:	83 c4 20             	add    esp,0x20
c000a52c:	c3                   	ret    

c000a52d <Dbg::kprintf(char const*, ...)>:
c000a52d:	55                   	push   ebp
c000a52e:	57                   	push   edi
c000a52f:	56                   	push   esi
c000a530:	53                   	push   ebx
c000a531:	83 ec 0c             	sub    esp,0xc
c000a534:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a538:	f6 05 d0 1e 02 c0 10 	test   BYTE PTR ds:0xc0021ed0,0x10
c000a53f:	74 08                	je     c000a549 <Dbg::kprintf(char const*, ...)+0x1c>
c000a541:	83 c4 0c             	add    esp,0xc
c000a544:	5b                   	pop    ebx
c000a545:	5e                   	pop    esi
c000a546:	5f                   	pop    edi
c000a547:	5d                   	pop    ebp
c000a548:	c3                   	ret    
c000a549:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a54d:	31 ff                	xor    edi,edi
c000a54f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a553:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a556:	84 c0                	test   al,al
c000a558:	74 e7                	je     c000a541 <Dbg::kprintf(char const*, ...)+0x14>
c000a55a:	8d 77 01             	lea    esi,[edi+0x1]
c000a55d:	3c 25                	cmp    al,0x25
c000a55f:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a562:	75 47                	jne    c000a5ab <Dbg::kprintf(char const*, ...)+0x7e>
c000a564:	83 c7 02             	add    edi,0x2
c000a567:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a56a:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a56d:	83 e8 25             	sub    eax,0x25
c000a570:	3c 53                	cmp    al,0x53
c000a572:	0f 87 d2 00 00 00    	ja     c000a64a <Dbg::kprintf(char const*, ...)+0x11d>
c000a578:	25 ff 00 00 00       	and    eax,0xff
c000a57d:	ff 24 85 24 dc 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe23dc]
c000a584:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a588:	89 c8                	mov    eax,ecx
c000a58a:	83 c1 04             	add    ecx,0x4
c000a58d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a591:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a593:	55                   	push   ebp
c000a594:	e8 55 ff ff ff       	call   c000a4ee <Dbg::logWriteInt(unsigned int)>
c000a599:	58                   	pop    eax
c000a59a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a59d:	84 c0                	test   al,al
c000a59f:	74 a0                	je     c000a541 <Dbg::kprintf(char const*, ...)+0x14>
c000a5a1:	8d 77 01             	lea    esi,[edi+0x1]
c000a5a4:	3c 25                	cmp    al,0x25
c000a5a6:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a5a9:	74 b9                	je     c000a564 <Dbg::kprintf(char const*, ...)+0x37>
c000a5ab:	50                   	push   eax
c000a5ac:	89 f7                	mov    edi,esi
c000a5ae:	e8 fe fe ff ff       	call   c000a4b1 <Dbg::logc(char)>
c000a5b3:	89 ee                	mov    esi,ebp
c000a5b5:	58                   	pop    eax
c000a5b6:	eb e2                	jmp    c000a59a <Dbg::kprintf(char const*, ...)+0x6d>
c000a5b8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a5bc:	89 c8                	mov    eax,ecx
c000a5be:	83 c1 04             	add    ecx,0x4
c000a5c1:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5c3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a5c7:	50                   	push   eax
c000a5c8:	e8 04 ff ff ff       	call   c000a4d1 <Dbg::logs(char*)>
c000a5cd:	58                   	pop    eax
c000a5ce:	eb ca                	jmp    c000a59a <Dbg::kprintf(char const*, ...)+0x6d>
c000a5d0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a5d4:	89 d0                	mov    eax,edx
c000a5d6:	83 c2 04             	add    edx,0x4
c000a5d9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5dd:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5df:	50                   	push   eax
c000a5e0:	e8 09 ff ff ff       	call   c000a4ee <Dbg::logWriteInt(unsigned int)>
c000a5e5:	58                   	pop    eax
c000a5e6:	eb b2                	jmp    c000a59a <Dbg::kprintf(char const*, ...)+0x6d>
c000a5e8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a5ec:	89 d0                	mov    eax,edx
c000a5ee:	83 c2 04             	add    edx,0x4
c000a5f1:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a5f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5f8:	50                   	push   eax
c000a5f9:	e8 b3 fe ff ff       	call   c000a4b1 <Dbg::logc(char)>
c000a5fe:	58                   	pop    eax
c000a5ff:	eb 99                	jmp    c000a59a <Dbg::kprintf(char const*, ...)+0x6d>
c000a601:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a605:	89 c8                	mov    eax,ecx
c000a607:	83 c1 04             	add    ecx,0x4
c000a60a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a60e:	6a 10                	push   0x10
c000a610:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a612:	51                   	push   ecx
c000a613:	e8 f4 fe ff ff       	call   c000a50c <Dbg::logWriteIntBase(unsigned int, int)>
c000a618:	5d                   	pop    ebp
c000a619:	58                   	pop    eax
c000a61a:	e9 7b ff ff ff       	jmp    c000a59a <Dbg::kprintf(char const*, ...)+0x6d>
c000a61f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a623:	89 d0                	mov    eax,edx
c000a625:	83 c2 08             	add    edx,0x8
c000a628:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a62c:	6a 10                	push   0x10
c000a62e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a630:	50                   	push   eax
c000a631:	e8 d6 fe ff ff       	call   c000a50c <Dbg::logWriteIntBase(unsigned int, int)>
c000a636:	58                   	pop    eax
c000a637:	5a                   	pop    edx
c000a638:	e9 5d ff ff ff       	jmp    c000a59a <Dbg::kprintf(char const*, ...)+0x6d>
c000a63d:	6a 25                	push   0x25
c000a63f:	e8 6d fe ff ff       	call   c000a4b1 <Dbg::logc(char)>
c000a644:	5a                   	pop    edx
c000a645:	e9 50 ff ff ff       	jmp    c000a59a <Dbg::kprintf(char const*, ...)+0x6d>
c000a64a:	6a 25                	push   0x25
c000a64c:	e8 60 fe ff ff       	call   c000a4b1 <Dbg::logc(char)>
c000a651:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a655:	50                   	push   eax
c000a656:	e8 56 fe ff ff       	call   c000a4b1 <Dbg::logc(char)>
c000a65b:	5a                   	pop    edx
c000a65c:	59                   	pop    ecx
c000a65d:	e9 38 ff ff ff       	jmp    c000a59a <Dbg::kprintf(char const*, ...)+0x6d>

c000a662 <File::read(unsigned long long, void*, int*)>:
c000a662:	53                   	push   ebx
c000a663:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a667:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a66b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a672:	3c 19                	cmp    al,0x19
c000a674:	77 35                	ja     c000a6ab <File::read(unsigned long long, void*, int*)+0x49>
c000a676:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000a67d:	85 c0                	test   eax,eax
c000a67f:	74 2a                	je     c000a6ab <File::read(unsigned long long, void*, int*)+0x49>
c000a681:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a687:	85 c0                	test   eax,eax
c000a689:	74 20                	je     c000a6ab <File::read(unsigned long long, void*, int*)+0x49>
c000a68b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a68f:	74 21                	je     c000a6b2 <File::read(unsigned long long, void*, int*)+0x50>
c000a691:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a693:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a697:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a69d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a6a5:	5b                   	pop    ebx
c000a6a6:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a6a9:	ff e0                	jmp    eax
c000a6ab:	b8 0b 00 00 00       	mov    eax,0xb
c000a6b0:	eb 05                	jmp    c000a6b7 <File::read(unsigned long long, void*, int*)+0x55>
c000a6b2:	b8 05 00 00 00       	mov    eax,0x5
c000a6b7:	5b                   	pop    ebx
c000a6b8:	c3                   	ret    
c000a6b9:	90                   	nop

c000a6ba <File::write(unsigned long long, void*, int*)>:
c000a6ba:	53                   	push   ebx
c000a6bb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6bf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a6c3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a6ca:	3c 19                	cmp    al,0x19
c000a6cc:	77 35                	ja     c000a703 <File::write(unsigned long long, void*, int*)+0x49>
c000a6ce:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000a6d5:	85 c0                	test   eax,eax
c000a6d7:	74 2a                	je     c000a703 <File::write(unsigned long long, void*, int*)+0x49>
c000a6d9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a6df:	85 c0                	test   eax,eax
c000a6e1:	74 20                	je     c000a703 <File::write(unsigned long long, void*, int*)+0x49>
c000a6e3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a6e7:	74 21                	je     c000a70a <File::write(unsigned long long, void*, int*)+0x50>
c000a6e9:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a6eb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a6ef:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a6f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a6fd:	5b                   	pop    ebx
c000a6fe:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a701:	ff e0                	jmp    eax
c000a703:	b8 0b 00 00 00       	mov    eax,0xb
c000a708:	eb 05                	jmp    c000a70f <File::write(unsigned long long, void*, int*)+0x55>
c000a70a:	b8 05 00 00 00       	mov    eax,0x5
c000a70f:	5b                   	pop    ebx
c000a710:	c3                   	ret    
c000a711:	90                   	nop

c000a712 <Directory::read(unsigned long long, void*, int*)>:
c000a712:	53                   	push   ebx
c000a713:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a717:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a71b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a722:	3c 19                	cmp    al,0x19
c000a724:	77 35                	ja     c000a75b <Directory::read(unsigned long long, void*, int*)+0x49>
c000a726:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000a72d:	85 c0                	test   eax,eax
c000a72f:	74 2a                	je     c000a75b <Directory::read(unsigned long long, void*, int*)+0x49>
c000a731:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a737:	85 c0                	test   eax,eax
c000a739:	74 20                	je     c000a75b <Directory::read(unsigned long long, void*, int*)+0x49>
c000a73b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a73f:	74 21                	je     c000a762 <Directory::read(unsigned long long, void*, int*)+0x50>
c000a741:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a743:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a747:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a74d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a751:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a755:	5b                   	pop    ebx
c000a756:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a759:	ff e0                	jmp    eax
c000a75b:	b8 0b 00 00 00       	mov    eax,0xb
c000a760:	eb 05                	jmp    c000a767 <Directory::read(unsigned long long, void*, int*)+0x55>
c000a762:	b8 05 00 00 00       	mov    eax,0x5
c000a767:	5b                   	pop    ebx
c000a768:	c3                   	ret    
c000a769:	90                   	nop

c000a76a <Directory::write(unsigned long long, void*, int*)>:
c000a76a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a76e:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a775:	b8 0b 00 00 00       	mov    eax,0xb
c000a77a:	80 fa 19             	cmp    dl,0x19
c000a77d:	77 18                	ja     c000a797 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a77f:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000a786:	85 d2                	test   edx,edx
c000a788:	74 0d                	je     c000a797 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a78a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000a791:	19 c0                	sbb    eax,eax
c000a793:	83 e0 0a             	and    eax,0xa
c000a796:	40                   	inc    eax
c000a797:	c3                   	ret    

c000a798 <File::isAtty()>:
c000a798:	31 c0                	xor    eax,eax
c000a79a:	c3                   	ret    
c000a79b:	90                   	nop

c000a79c <Directory::isAtty()>:
c000a79c:	31 c0                	xor    eax,eax
c000a79e:	c3                   	ret    
c000a79f:	90                   	nop

c000a7a0 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a7a0:	b8 0a 00 00 00       	mov    eax,0xa
c000a7a5:	c3                   	ret    

c000a7a6 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a7a6:	b8 0a 00 00 00       	mov    eax,0xa
c000a7ab:	c3                   	ret    

c000a7ac <Filesystem::allocateSwapfile(char const*, int)>:
c000a7ac:	31 c0                	xor    eax,eax
c000a7ae:	31 d2                	xor    edx,edx
c000a7b0:	c3                   	ret    
c000a7b1:	90                   	nop

c000a7b2 <File::~File()>:
c000a7b2:	83 ec 0c             	sub    esp,0xc
c000a7b5:	ba e4 dd 01 c0       	mov    edx,0xc001dde4
c000a7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7be:	89 10                	mov    DWORD PTR [eax],edx
c000a7c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7c4:	83 ec 0c             	sub    esp,0xc
c000a7c7:	50                   	push   eax
c000a7c8:	e8 57 e8 ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c000a7cd:	83 c4 10             	add    esp,0x10
c000a7d0:	90                   	nop
c000a7d1:	83 c4 0c             	add    esp,0xc
c000a7d4:	c3                   	ret    
c000a7d5:	90                   	nop

c000a7d6 <File::~File()>:
c000a7d6:	83 ec 0c             	sub    esp,0xc
c000a7d9:	83 ec 0c             	sub    esp,0xc
c000a7dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7e0:	e8 cd ff ff ff       	call   c000a7b2 <File::~File()>
c000a7e5:	83 c4 10             	add    esp,0x10
c000a7e8:	83 ec 08             	sub    esp,0x8
c000a7eb:	68 14 01 00 00       	push   0x114
c000a7f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7f4:	e8 3e fc ff ff       	call   c000a437 <operator delete(void*, unsigned long)>
c000a7f9:	83 c4 10             	add    esp,0x10
c000a7fc:	83 c4 0c             	add    esp,0xc
c000a7ff:	c3                   	ret    

c000a800 <Directory::~Directory()>:
c000a800:	83 ec 0c             	sub    esp,0xc
c000a803:	ba 00 de 01 c0       	mov    edx,0xc001de00
c000a808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a80c:	89 10                	mov    DWORD PTR [eax],edx
c000a80e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a812:	83 ec 0c             	sub    esp,0xc
c000a815:	50                   	push   eax
c000a816:	e8 09 e8 ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c000a81b:	83 c4 10             	add    esp,0x10
c000a81e:	90                   	nop
c000a81f:	83 c4 0c             	add    esp,0xc
c000a822:	c3                   	ret    
c000a823:	90                   	nop

c000a824 <Directory::~Directory()>:
c000a824:	83 ec 0c             	sub    esp,0xc
c000a827:	83 ec 0c             	sub    esp,0xc
c000a82a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a82e:	e8 cd ff ff ff       	call   c000a800 <Directory::~Directory()>
c000a833:	83 c4 10             	add    esp,0x10
c000a836:	83 ec 08             	sub    esp,0x8
c000a839:	68 14 01 00 00       	push   0x114
c000a83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a842:	e8 f0 fb ff ff       	call   c000a437 <operator delete(void*, unsigned long)>
c000a847:	83 c4 10             	add    esp,0x10
c000a84a:	83 c4 0c             	add    esp,0xc
c000a84d:	c3                   	ret    

c000a84e <Filesystem::Filesystem()>:
c000a84e:	ba 7c dd 01 c0       	mov    edx,0xc001dd7c
c000a853:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a857:	89 10                	mov    DWORD PTR [eax],edx
c000a859:	8b 15 b4 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021fb4
c000a85f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a863:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a866:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a86a:	a3 b4 1f 02 c0       	mov    ds:0xc0021fb4,eax
c000a86f:	90                   	nop
c000a870:	c3                   	ret    
c000a871:	90                   	nop

c000a872 <Filesystem::~Filesystem()>:
c000a872:	ba 7c dd 01 c0       	mov    edx,0xc001dd7c
c000a877:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a87b:	89 10                	mov    DWORD PTR [eax],edx
c000a87d:	90                   	nop
c000a87e:	c3                   	ret    
c000a87f:	90                   	nop

c000a880 <Filesystem::~Filesystem()>:
c000a880:	83 ec 0c             	sub    esp,0xc
c000a883:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a887:	e8 e6 ff ff ff       	call   c000a872 <Filesystem::~Filesystem()>
c000a88c:	83 c4 04             	add    esp,0x4
c000a88f:	83 ec 08             	sub    esp,0x8
c000a892:	6a 08                	push   0x8
c000a894:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a898:	e8 9a fb ff ff       	call   c000a437 <operator delete(void*, unsigned long)>
c000a89d:	83 c4 10             	add    esp,0x10
c000a8a0:	83 c4 0c             	add    esp,0xc
c000a8a3:	c3                   	ret    

c000a8a4 <Fs::getcwd(Process*, char*, int)>:
c000a8a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a8a8:	31 c0                	xor    eax,eax
c000a8aa:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a8ad:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a8b1:	7d 15                	jge    c000a8c8 <Fs::getcwd(Process*, char*, int)+0x24>
c000a8b3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8b7:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a8be:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a8c1:	84 c9                	test   cl,cl
c000a8c3:	74 06                	je     c000a8cb <Fs::getcwd(Process*, char*, int)+0x27>
c000a8c5:	40                   	inc    eax
c000a8c6:	eb e2                	jmp    c000a8aa <Fs::getcwd(Process*, char*, int)+0x6>
c000a8c8:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a8cb:	31 c0                	xor    eax,eax
c000a8cd:	c3                   	ret    

c000a8ce <Fs::initVFS()>:
c000a8ce:	83 ec 18             	sub    esp,0x18
c000a8d1:	6a 08                	push   0x8
c000a8d3:	e8 e1 ce ff ff       	call   c00077b9 <malloc>
c000a8d8:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8db:	e8 e0 c7 00 00       	call   c00170c0 <FAT::FAT()>
c000a8e0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000a8e7:	e8 cd ce ff ff       	call   c00077b9 <malloc>
c000a8ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8ef:	e8 28 d5 00 00       	call   c0017e1c <ISO9660::ISO9660()>
c000a8f4:	83 c4 1c             	add    esp,0x1c
c000a8f7:	c3                   	ret    

c000a8f8 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000a8f8:	55                   	push   ebp
c000a8f9:	57                   	push   edi
c000a8fa:	56                   	push   esi
c000a8fb:	53                   	push   ebx
c000a8fc:	81 ec 10 04 00 00    	sub    esp,0x410
c000a902:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000a909:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000a910:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000a917:	68 00 04 00 00       	push   0x400
c000a91c:	6a 00                	push   0x0
c000a91e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000a922:	56                   	push   esi
c000a923:	e8 a8 5b ff ff       	call   c00004d0 <memset>
c000a928:	83 c4 10             	add    esp,0x10
c000a92b:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000a92f:	75 0b                	jne    c000a93c <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000a931:	50                   	push   eax
c000a932:	50                   	push   eax
c000a933:	57                   	push   edi
c000a934:	56                   	push   esi
c000a935:	e8 c6 5c ff ff       	call   c0000600 <strcpy>
c000a93a:	eb 41                	jmp    c000a97d <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000a93c:	8a 07                	mov    al,BYTE PTR [edi]
c000a93e:	3c 5c                	cmp    al,0x5c
c000a940:	74 04                	je     c000a946 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000a942:	3c 2f                	cmp    al,0x2f
c000a944:	75 18                	jne    c000a95e <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000a946:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a949:	3c 60                	cmp    al,0x60
c000a94b:	7e 03                	jle    c000a950 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000a94d:	83 e8 20             	sub    eax,0x20
c000a950:	88 04 24             	mov    BYTE PTR [esp],al
c000a953:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a95a:	50                   	push   eax
c000a95b:	50                   	push   eax
c000a95c:	eb 18                	jmp    c000a976 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000a95e:	50                   	push   eax
c000a95f:	50                   	push   eax
c000a960:	55                   	push   ebp
c000a961:	56                   	push   esi
c000a962:	e8 99 5c ff ff       	call   c0000600 <strcpy>
c000a967:	5a                   	pop    edx
c000a968:	59                   	pop    ecx
c000a969:	68 9a eb 01 c0       	push   0xc001eb9a
c000a96e:	56                   	push   esi
c000a96f:	e8 4c 5e ff ff       	call   c00007c0 <strcat>
c000a974:	5d                   	pop    ebp
c000a975:	58                   	pop    eax
c000a976:	57                   	push   edi
c000a977:	56                   	push   esi
c000a978:	e8 43 5e ff ff       	call   c00007c0 <strcat>
c000a97d:	83 c4 10             	add    esp,0x10
c000a980:	8a 04 24             	mov    al,BYTE PTR [esp]
c000a983:	3c 60                	cmp    al,0x60
c000a985:	7e 03                	jle    c000a98a <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000a987:	83 e8 20             	sub    eax,0x20
c000a98a:	88 04 24             	mov    BYTE PTR [esp],al
c000a98d:	88 03                	mov    BYTE PTR [ebx],al
c000a98f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a996:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000a99c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000a9a0:	bf 03 00 00 00       	mov    edi,0x3
c000a9a5:	b8 03 00 00 00       	mov    eax,0x3
c000a9aa:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000a9ad:	84 d2                	test   dl,dl
c000a9af:	0f 84 91 00 00 00    	je     c000aa46 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000a9b5:	8d 4f 01             	lea    ecx,[edi+0x1]
c000a9b8:	80 fa 5c             	cmp    dl,0x5c
c000a9bb:	74 05                	je     c000a9c2 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000a9bd:	80 fa 2f             	cmp    dl,0x2f
c000a9c0:	75 12                	jne    c000a9d4 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a9c2:	89 c5                	mov    ebp,eax
c000a9c4:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000a9c9:	74 09                	je     c000a9d4 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a9cb:	40                   	inc    eax
c000a9cc:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000a9d0:	89 cf                	mov    edi,ecx
c000a9d2:	eb d6                	jmp    c000a9aa <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000a9d4:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000a9d9:	75 5b                	jne    c000aa36 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a9db:	80 fa 2e             	cmp    dl,0x2e
c000a9de:	75 56                	jne    c000aa36 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a9e0:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000a9e4:	74 19                	je     c000a9ff <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000a9e6:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000a9eb:	74 53                	je     c000aa40 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000a9ed:	89 f9                	mov    ecx,edi
c000a9ef:	41                   	inc    ecx
c000a9f0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000a9f3:	80 fa 2f             	cmp    dl,0x2f
c000a9f6:	74 f7                	je     c000a9ef <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000a9f8:	80 fa 5c             	cmp    dl,0x5c
c000a9fb:	74 f2                	je     c000a9ef <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000a9fd:	eb d1                	jmp    c000a9d0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9ff:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aa04:	74 3a                	je     c000aa40 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aa06:	83 f8 03             	cmp    eax,0x3
c000aa09:	74 c5                	je     c000a9d0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa0b:	41                   	inc    ecx
c000aa0c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aa0f:	80 fa 2f             	cmp    dl,0x2f
c000aa12:	74 f7                	je     c000aa0b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aa14:	80 fa 5c             	cmp    dl,0x5c
c000aa17:	74 f2                	je     c000aa0b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aa19:	48                   	dec    eax
c000aa1a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aa1e:	75 06                	jne    c000aa26 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000aa20:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aa24:	eb f3                	jmp    c000aa19 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000aa26:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aa2a:	74 07                	je     c000aa33 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000aa2c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aa30:	48                   	dec    eax
c000aa31:	eb f3                	jmp    c000aa26 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000aa33:	40                   	inc    eax
c000aa34:	eb 9a                	jmp    c000a9d0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa36:	80 fa 2f             	cmp    dl,0x2f
c000aa39:	74 95                	je     c000a9d0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa3b:	80 fa 5c             	cmp    dl,0x5c
c000aa3e:	74 90                	je     c000a9d0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa40:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000aa43:	40                   	inc    eax
c000aa44:	eb 8a                	jmp    c000a9d0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa46:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aa4a:	83 ec 0c             	sub    esp,0xc
c000aa4d:	53                   	push   ebx
c000aa4e:	e8 ed 5a ff ff       	call   c0000540 <strlen>
c000aa53:	83 c4 10             	add    esp,0x10
c000aa56:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000aa5b:	75 26                	jne    c000aa83 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000aa5d:	83 ec 0c             	sub    esp,0xc
c000aa60:	53                   	push   ebx
c000aa61:	e8 da 5a ff ff       	call   c0000540 <strlen>
c000aa66:	83 c4 10             	add    esp,0x10
c000aa69:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000aa6e:	74 26                	je     c000aa96 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000aa70:	83 ec 0c             	sub    esp,0xc
c000aa73:	53                   	push   ebx
c000aa74:	e8 c7 5a ff ff       	call   c0000540 <strlen>
c000aa79:	83 c4 10             	add    esp,0x10
c000aa7c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000aa81:	eb c7                	jmp    c000aa4a <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000aa83:	83 ec 0c             	sub    esp,0xc
c000aa86:	53                   	push   ebx
c000aa87:	e8 b4 5a ff ff       	call   c0000540 <strlen>
c000aa8c:	83 c4 10             	add    esp,0x10
c000aa8f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aa94:	74 c7                	je     c000aa5d <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000aa96:	81 c4 0c 04 00 00    	add    esp,0x40c
c000aa9c:	5b                   	pop    ebx
c000aa9d:	5e                   	pop    esi
c000aa9e:	5f                   	pop    edi
c000aa9f:	5d                   	pop    ebp
c000aaa0:	c3                   	ret    
c000aaa1:	90                   	nop

c000aaa2 <File::File(char const*, Process*)>:
c000aaa2:	83 ec 0c             	sub    esp,0xc
c000aaa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaa9:	83 ec 08             	sub    esp,0x8
c000aaac:	6a 00                	push   0x0
c000aaae:	50                   	push   eax
c000aaaf:	e8 8e e3 ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c000aab4:	83 c4 10             	add    esp,0x10
c000aab7:	ba e4 dd 01 c0       	mov    edx,0xc001dde4
c000aabc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aac0:	89 10                	mov    DWORD PTR [eax],edx
c000aac2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aac6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000aacc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aad0:	83 c0 0d             	add    eax,0xd
c000aad3:	83 ec 04             	sub    esp,0x4
c000aad6:	52                   	push   edx
c000aad7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aadb:	50                   	push   eax
c000aadc:	e8 17 fe ff ff       	call   c000a8f8 <Fs::standardiseFiles(char*, char const*, char const*)>
c000aae1:	83 c4 10             	add    esp,0x10
c000aae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000aaeb:	8d 50 bf             	lea    edx,[eax-0x41]
c000aaee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaf2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000aaf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aafc:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000ab00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab04:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ab0a:	25 ff 00 00 00       	and    eax,0xff
c000ab0f:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000ab16:	85 c0                	test   eax,eax
c000ab18:	74 42                	je     c000ab5c <File::File(char const*, Process*)+0xba>
c000ab1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab1e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ab24:	25 ff 00 00 00       	and    eax,0xff
c000ab29:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000ab30:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ab36:	85 c0                	test   eax,eax
c000ab38:	75 22                	jne    c000ab5c <File::File(char const*, Process*)+0xba>
c000ab3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab3e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ab44:	25 ff 00 00 00       	and    eax,0xff
c000ab49:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000ab50:	83 ec 0c             	sub    esp,0xc
c000ab53:	50                   	push   eax
c000ab54:	e8 39 20 00 00       	call   c000cb92 <LogicalDisk::mount()>
c000ab59:	83 c4 10             	add    esp,0x10
c000ab5c:	90                   	nop
c000ab5d:	83 c4 0c             	add    esp,0xc
c000ab60:	c3                   	ret    
c000ab61:	90                   	nop

c000ab62 <File::open(FileOpenMode)>:
c000ab62:	53                   	push   ebx
c000ab63:	b8 0b 00 00 00       	mov    eax,0xb
c000ab68:	83 ec 08             	sub    esp,0x8
c000ab6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ab6f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000ab76:	80 fa 19             	cmp    dl,0x19
c000ab79:	77 40                	ja     c000abbb <File::open(FileOpenMode)+0x59>
c000ab7b:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000ab82:	85 d2                	test   edx,edx
c000ab84:	74 35                	je     c000abbb <File::open(FileOpenMode)+0x59>
c000ab86:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ab8c:	85 d2                	test   edx,edx
c000ab8e:	74 2b                	je     c000abbb <File::open(FileOpenMode)+0x59>
c000ab90:	b8 06 00 00 00       	mov    eax,0x6
c000ab95:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000ab99:	75 20                	jne    c000abbb <File::open(FileOpenMode)+0x59>
c000ab9b:	8b 02                	mov    eax,DWORD PTR [edx]
c000ab9d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000aba3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aba7:	51                   	push   ecx
c000aba8:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000abab:	51                   	push   ecx
c000abac:	52                   	push   edx
c000abad:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000abb0:	83 c4 10             	add    esp,0x10
c000abb3:	85 c0                	test   eax,eax
c000abb5:	75 04                	jne    c000abbb <File::open(FileOpenMode)+0x59>
c000abb7:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000abbb:	83 c4 08             	add    esp,0x8
c000abbe:	5b                   	pop    ebx
c000abbf:	c3                   	ret    

c000abc0 <File::close()>:
c000abc0:	53                   	push   ebx
c000abc1:	b8 0b 00 00 00       	mov    eax,0xb
c000abc6:	83 ec 08             	sub    esp,0x8
c000abc9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000abcd:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000abd4:	80 fa 19             	cmp    dl,0x19
c000abd7:	77 41                	ja     c000ac1a <File::close()+0x5a>
c000abd9:	8b 1c 95 20 44 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdbbe0]
c000abe0:	85 db                	test   ebx,ebx
c000abe2:	74 36                	je     c000ac1a <File::close()+0x5a>
c000abe4:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000abeb:	74 2d                	je     c000ac1a <File::close()+0x5a>
c000abed:	b8 05 00 00 00       	mov    eax,0x5
c000abf2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000abf6:	74 22                	je     c000ac1a <File::close()+0x5a>
c000abf8:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000abfc:	8b 04 95 20 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbbe0]
c000ac03:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ac09:	53                   	push   ebx
c000ac0a:	53                   	push   ebx
c000ac0b:	8b 10                	mov    edx,DWORD PTR [eax]
c000ac0d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ac13:	50                   	push   eax
c000ac14:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000ac17:	83 c4 10             	add    esp,0x10
c000ac1a:	83 c4 08             	add    esp,0x8
c000ac1d:	5b                   	pop    ebx
c000ac1e:	c3                   	ret    
c000ac1f:	90                   	nop

c000ac20 <File::seek(unsigned long long)>:
c000ac20:	56                   	push   esi
c000ac21:	53                   	push   ebx
c000ac22:	b8 0b 00 00 00       	mov    eax,0xb
c000ac27:	51                   	push   ecx
c000ac28:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ac2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ac30:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ac37:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ac3b:	80 fa 19             	cmp    dl,0x19
c000ac3e:	77 31                	ja     c000ac71 <File::seek(unsigned long long)+0x51>
c000ac40:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000ac47:	85 d2                	test   edx,edx
c000ac49:	74 26                	je     c000ac71 <File::seek(unsigned long long)+0x51>
c000ac4b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ac51:	85 d2                	test   edx,edx
c000ac53:	74 1c                	je     c000ac71 <File::seek(unsigned long long)+0x51>
c000ac55:	b8 05 00 00 00       	mov    eax,0x5
c000ac5a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ac5e:	74 11                	je     c000ac71 <File::seek(unsigned long long)+0x51>
c000ac60:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac62:	53                   	push   ebx
c000ac63:	51                   	push   ecx
c000ac64:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ac6a:	52                   	push   edx
c000ac6b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ac6e:	83 c4 10             	add    esp,0x10
c000ac71:	5a                   	pop    edx
c000ac72:	5b                   	pop    ebx
c000ac73:	5e                   	pop    esi
c000ac74:	c3                   	ret    
c000ac75:	90                   	nop

c000ac76 <File::tell(unsigned long long*)>:
c000ac76:	83 ec 0c             	sub    esp,0xc
c000ac79:	b8 0b 00 00 00       	mov    eax,0xb
c000ac7e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ac82:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ac89:	80 fa 19             	cmp    dl,0x19
c000ac8c:	77 34                	ja     c000acc2 <File::tell(unsigned long long*)+0x4c>
c000ac8e:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000ac95:	85 d2                	test   edx,edx
c000ac97:	74 29                	je     c000acc2 <File::tell(unsigned long long*)+0x4c>
c000ac99:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ac9f:	85 d2                	test   edx,edx
c000aca1:	74 1f                	je     c000acc2 <File::tell(unsigned long long*)+0x4c>
c000aca3:	b8 05 00 00 00       	mov    eax,0x5
c000aca8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000acac:	74 14                	je     c000acc2 <File::tell(unsigned long long*)+0x4c>
c000acae:	50                   	push   eax
c000acaf:	8b 02                	mov    eax,DWORD PTR [edx]
c000acb1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acb5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000acbb:	52                   	push   edx
c000acbc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000acbf:	83 c4 10             	add    esp,0x10
c000acc2:	83 c4 0c             	add    esp,0xc
c000acc5:	c3                   	ret    

c000acc6 <File::rewind()>:
c000acc6:	83 ec 10             	sub    esp,0x10
c000acc9:	6a 00                	push   0x0
c000accb:	6a 00                	push   0x0
c000accd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acd1:	e8 4a ff ff ff       	call   c000ac20 <File::seek(unsigned long long)>
c000acd6:	83 c4 1c             	add    esp,0x1c
c000acd9:	c3                   	ret    

c000acda <File::unlink()>:
c000acda:	83 ec 0c             	sub    esp,0xc
c000acdd:	b8 0b 00 00 00       	mov    eax,0xb
c000ace2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ace6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000aced:	80 f9 19             	cmp    cl,0x19
c000acf0:	77 2f                	ja     c000ad21 <File::unlink()+0x47>
c000acf2:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000acf9:	85 c9                	test   ecx,ecx
c000acfb:	74 24                	je     c000ad21 <File::unlink()+0x47>
c000acfd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad03:	85 c9                	test   ecx,ecx
c000ad05:	74 1a                	je     c000ad21 <File::unlink()+0x47>
c000ad07:	b8 06 00 00 00       	mov    eax,0x6
c000ad0c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad10:	75 0f                	jne    c000ad21 <File::unlink()+0x47>
c000ad12:	83 c2 0d             	add    edx,0xd
c000ad15:	50                   	push   eax
c000ad16:	50                   	push   eax
c000ad17:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ad19:	52                   	push   edx
c000ad1a:	51                   	push   ecx
c000ad1b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000ad1e:	83 c4 10             	add    esp,0x10
c000ad21:	83 c4 0c             	add    esp,0xc
c000ad24:	c3                   	ret    
c000ad25:	90                   	nop

c000ad26 <File::rename(char const*)>:
c000ad26:	83 ec 0c             	sub    esp,0xc
c000ad29:	b8 0b 00 00 00       	mov    eax,0xb
c000ad2e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad32:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad39:	80 f9 19             	cmp    cl,0x19
c000ad3c:	77 32                	ja     c000ad70 <File::rename(char const*)+0x4a>
c000ad3e:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000ad45:	85 c9                	test   ecx,ecx
c000ad47:	74 27                	je     c000ad70 <File::rename(char const*)+0x4a>
c000ad49:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad4f:	85 c9                	test   ecx,ecx
c000ad51:	74 1d                	je     c000ad70 <File::rename(char const*)+0x4a>
c000ad53:	b8 06 00 00 00       	mov    eax,0x6
c000ad58:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad5c:	75 12                	jne    c000ad70 <File::rename(char const*)+0x4a>
c000ad5e:	83 c2 0d             	add    edx,0xd
c000ad61:	50                   	push   eax
c000ad62:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ad64:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad68:	52                   	push   edx
c000ad69:	51                   	push   ecx
c000ad6a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000ad6d:	83 c4 10             	add    esp,0x10
c000ad70:	83 c4 0c             	add    esp,0xc
c000ad73:	c3                   	ret    

c000ad74 <File::chfatattr(unsigned char, unsigned char)>:
c000ad74:	57                   	push   edi
c000ad75:	b8 0b 00 00 00       	mov    eax,0xb
c000ad7a:	56                   	push   esi
c000ad7b:	53                   	push   ebx
c000ad7c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad80:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ad84:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad8b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ad8f:	80 f9 19             	cmp    cl,0x19
c000ad92:	77 37                	ja     c000adcb <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad94:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000ad9b:	85 c9                	test   ecx,ecx
c000ad9d:	74 2c                	je     c000adcb <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad9f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ada5:	85 c9                	test   ecx,ecx
c000ada7:	74 22                	je     c000adcb <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ada9:	b8 06 00 00 00       	mov    eax,0x6
c000adae:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000adb2:	75 17                	jne    c000adcb <File::chfatattr(unsigned char, unsigned char)+0x57>
c000adb4:	8b 39                	mov    edi,DWORD PTR [ecx]
c000adb6:	89 f0                	mov    eax,esi
c000adb8:	83 c2 0d             	add    edx,0xd
c000adbb:	0f b6 f0             	movzx  esi,al
c000adbe:	0f b6 db             	movzx  ebx,bl
c000adc1:	56                   	push   esi
c000adc2:	53                   	push   ebx
c000adc3:	52                   	push   edx
c000adc4:	51                   	push   ecx
c000adc5:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000adc8:	83 c4 10             	add    esp,0x10
c000adcb:	5b                   	pop    ebx
c000adcc:	5e                   	pop    esi
c000adcd:	5f                   	pop    edi
c000adce:	c3                   	ret    
c000adcf:	90                   	nop

c000add0 <File::exists()>:
c000add0:	83 ec 0c             	sub    esp,0xc
c000add3:	31 c0                	xor    eax,eax
c000add5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000add9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ade0:	80 f9 19             	cmp    cl,0x19
c000ade3:	77 24                	ja     c000ae09 <File::exists()+0x39>
c000ade5:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000adec:	85 c9                	test   ecx,ecx
c000adee:	74 19                	je     c000ae09 <File::exists()+0x39>
c000adf0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000adf6:	85 c9                	test   ecx,ecx
c000adf8:	74 0f                	je     c000ae09 <File::exists()+0x39>
c000adfa:	83 c2 0d             	add    edx,0xd
c000adfd:	50                   	push   eax
c000adfe:	50                   	push   eax
c000adff:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae01:	52                   	push   edx
c000ae02:	51                   	push   ecx
c000ae03:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000ae06:	83 c4 10             	add    esp,0x10
c000ae09:	83 c4 0c             	add    esp,0xc
c000ae0c:	c3                   	ret    
c000ae0d:	90                   	nop

c000ae0e <File::stat(unsigned long long*, bool*)>:
c000ae0e:	56                   	push   esi
c000ae0f:	53                   	push   ebx
c000ae10:	50                   	push   eax
c000ae11:	b8 0b 00 00 00       	mov    eax,0xb
c000ae16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae1a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ae1e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae25:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ae29:	80 f9 19             	cmp    cl,0x19
c000ae2c:	77 3d                	ja     c000ae6b <File::stat(unsigned long long*, bool*)+0x5d>
c000ae2e:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000ae35:	85 c9                	test   ecx,ecx
c000ae37:	74 32                	je     c000ae6b <File::stat(unsigned long long*, bool*)+0x5d>
c000ae39:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ae3f:	85 c9                	test   ecx,ecx
c000ae41:	74 28                	je     c000ae6b <File::stat(unsigned long long*, bool*)+0x5d>
c000ae43:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae45:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae49:	74 13                	je     c000ae5e <File::stat(unsigned long long*, bool*)+0x50>
c000ae4b:	83 ec 04             	sub    esp,0x4
c000ae4e:	56                   	push   esi
c000ae4f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000ae55:	51                   	push   ecx
c000ae56:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000ae59:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000ae5c:	eb 0a                	jmp    c000ae68 <File::stat(unsigned long long*, bool*)+0x5a>
c000ae5e:	53                   	push   ebx
c000ae5f:	83 c2 0d             	add    edx,0xd
c000ae62:	56                   	push   esi
c000ae63:	52                   	push   edx
c000ae64:	51                   	push   ecx
c000ae65:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000ae68:	83 c4 10             	add    esp,0x10
c000ae6b:	5a                   	pop    edx
c000ae6c:	5b                   	pop    ebx
c000ae6d:	5e                   	pop    esi
c000ae6e:	c3                   	ret    

c000ae6f <Fs::setcwd(Process*, char*)>:
c000ae6f:	55                   	push   ebp
c000ae70:	57                   	push   edi
c000ae71:	56                   	push   esi
c000ae72:	53                   	push   ebx
c000ae73:	81 ec 20 02 00 00    	sub    esp,0x220
c000ae79:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000ae80:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000ae86:	57                   	push   edi
c000ae87:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000ae8e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000ae92:	56                   	push   esi
c000ae93:	e8 60 fa ff ff       	call   c000a8f8 <Fs::standardiseFiles(char*, char const*, char const*)>
c000ae98:	89 34 24             	mov    DWORD PTR [esp],esi
c000ae9b:	e8 a0 56 ff ff       	call   c0000540 <strlen>
c000aea0:	83 c4 10             	add    esp,0x10
c000aea3:	83 f8 02             	cmp    eax,0x2
c000aea6:	77 15                	ja     c000aebd <Fs::setcwd(Process*, char*)+0x4e>
c000aea8:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000aead:	83 eb 41             	sub    ebx,0x41
c000aeb0:	8b 04 9d 20 44 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbbe0]
c000aeb7:	85 c0                	test   eax,eax
c000aeb9:	75 1c                	jne    c000aed7 <Fs::setcwd(Process*, char*)+0x68>
c000aebb:	eb 2f                	jmp    c000aeec <Fs::setcwd(Process*, char*)+0x7d>
c000aebd:	83 ec 0c             	sub    esp,0xc
c000aec0:	56                   	push   esi
c000aec1:	e8 7a 56 ff ff       	call   c0000540 <strlen>
c000aec6:	83 c4 10             	add    esp,0x10
c000aec9:	83 f8 03             	cmp    eax,0x3
c000aecc:	75 57                	jne    c000af25 <Fs::setcwd(Process*, char*)+0xb6>
c000aece:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000aed3:	75 50                	jne    c000af25 <Fs::setcwd(Process*, char*)+0xb6>
c000aed5:	eb d1                	jmp    c000aea8 <Fs::setcwd(Process*, char*)+0x39>
c000aed7:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000aede:	75 0c                	jne    c000aeec <Fs::setcwd(Process*, char*)+0x7d>
c000aee0:	83 ec 0c             	sub    esp,0xc
c000aee3:	50                   	push   eax
c000aee4:	e8 a9 1c 00 00       	call   c000cb92 <LogicalDisk::mount()>
c000aee9:	83 c4 10             	add    esp,0x10
c000aeec:	b8 03 00 00 00       	mov    eax,0x3
c000aef1:	83 fb 19             	cmp    ebx,0x19
c000aef4:	0f 87 c6 00 00 00    	ja     c000afc0 <Fs::setcwd(Process*, char*)+0x151>
c000aefa:	8b 14 9d 20 44 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdbbe0]
c000af01:	b8 05 00 00 00       	mov    eax,0x5
c000af06:	85 d2                	test   edx,edx
c000af08:	0f 84 b2 00 00 00    	je     c000afc0 <Fs::setcwd(Process*, char*)+0x151>
c000af0e:	b8 06 00 00 00       	mov    eax,0x6
c000af13:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000af1a:	0f 85 92 00 00 00    	jne    c000afb2 <Fs::setcwd(Process*, char*)+0x143>
c000af20:	e9 9b 00 00 00       	jmp    c000afc0 <Fs::setcwd(Process*, char*)+0x151>
c000af25:	83 ec 0c             	sub    esp,0xc
c000af28:	68 14 01 00 00       	push   0x114
c000af2d:	e8 87 c8 ff ff       	call   c00077b9 <malloc>
c000af32:	83 c4 0c             	add    esp,0xc
c000af35:	89 c3                	mov    ebx,eax
c000af37:	55                   	push   ebp
c000af38:	56                   	push   esi
c000af39:	50                   	push   eax
c000af3a:	e8 63 fb ff ff       	call   c000aaa2 <File::File(char const*, Process*)>
c000af3f:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000af44:	83 c4 0c             	add    esp,0xc
c000af47:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000af4b:	50                   	push   eax
c000af4c:	8d 44 24 10          	lea    eax,[esp+0x10]
c000af50:	50                   	push   eax
c000af51:	53                   	push   ebx
c000af52:	e8 b7 fe ff ff       	call   c000ae0e <File::stat(unsigned long long*, bool*)>
c000af57:	83 c4 10             	add    esp,0x10
c000af5a:	83 f8 02             	cmp    eax,0x2
c000af5d:	74 04                	je     c000af63 <Fs::setcwd(Process*, char*)+0xf4>
c000af5f:	85 c0                	test   eax,eax
c000af61:	74 1c                	je     c000af7f <Fs::setcwd(Process*, char*)+0x110>
c000af63:	b8 01 00 00 00       	mov    eax,0x1
c000af68:	85 db                	test   ebx,ebx
c000af6a:	74 54                	je     c000afc0 <Fs::setcwd(Process*, char*)+0x151>
c000af6c:	83 ec 0c             	sub    esp,0xc
c000af6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af71:	53                   	push   ebx
c000af72:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	b8 01 00 00 00       	mov    eax,0x1
c000af7d:	eb 41                	jmp    c000afc0 <Fs::setcwd(Process*, char*)+0x151>
c000af7f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000af84:	75 1c                	jne    c000afa2 <Fs::setcwd(Process*, char*)+0x133>
c000af86:	b8 02 00 00 00       	mov    eax,0x2
c000af8b:	85 db                	test   ebx,ebx
c000af8d:	74 31                	je     c000afc0 <Fs::setcwd(Process*, char*)+0x151>
c000af8f:	83 ec 0c             	sub    esp,0xc
c000af92:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af94:	53                   	push   ebx
c000af95:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af98:	83 c4 10             	add    esp,0x10
c000af9b:	b8 02 00 00 00       	mov    eax,0x2
c000afa0:	eb 1e                	jmp    c000afc0 <Fs::setcwd(Process*, char*)+0x151>
c000afa2:	85 db                	test   ebx,ebx
c000afa4:	74 0c                	je     c000afb2 <Fs::setcwd(Process*, char*)+0x143>
c000afa6:	83 ec 0c             	sub    esp,0xc
c000afa9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afab:	53                   	push   ebx
c000afac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	50                   	push   eax
c000afb3:	50                   	push   eax
c000afb4:	56                   	push   esi
c000afb5:	57                   	push   edi
c000afb6:	e8 45 56 ff ff       	call   c0000600 <strcpy>
c000afbb:	83 c4 10             	add    esp,0x10
c000afbe:	31 c0                	xor    eax,eax
c000afc0:	81 c4 1c 02 00 00    	add    esp,0x21c
c000afc6:	5b                   	pop    ebx
c000afc7:	5e                   	pop    esi
c000afc8:	5f                   	pop    edi
c000afc9:	5d                   	pop    ebp
c000afca:	c3                   	ret    
c000afcb:	90                   	nop

c000afcc <Directory::Directory(char const*, Process*)>:
c000afcc:	83 ec 0c             	sub    esp,0xc
c000afcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afd3:	83 ec 08             	sub    esp,0x8
c000afd6:	6a 00                	push   0x0
c000afd8:	50                   	push   eax
c000afd9:	e8 64 de ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c000afde:	83 c4 10             	add    esp,0x10
c000afe1:	ba 00 de 01 c0       	mov    edx,0xc001de00
c000afe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afea:	89 10                	mov    DWORD PTR [eax],edx
c000afec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aff0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000aff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000affa:	83 c0 0d             	add    eax,0xd
c000affd:	83 ec 04             	sub    esp,0x4
c000b000:	52                   	push   edx
c000b001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b005:	50                   	push   eax
c000b006:	e8 ed f8 ff ff       	call   c000a8f8 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b00b:	83 c4 10             	add    esp,0x10
c000b00e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b012:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b015:	8d 50 bf             	lea    edx,[eax-0x41]
c000b018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b01c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b026:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b02a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b02e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b034:	25 ff 00 00 00       	and    eax,0xff
c000b039:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000b040:	85 c0                	test   eax,eax
c000b042:	74 42                	je     c000b086 <Directory::Directory(char const*, Process*)+0xba>
c000b044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b048:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b04e:	25 ff 00 00 00       	and    eax,0xff
c000b053:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000b05a:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b060:	85 c0                	test   eax,eax
c000b062:	75 22                	jne    c000b086 <Directory::Directory(char const*, Process*)+0xba>
c000b064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b068:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b06e:	25 ff 00 00 00       	and    eax,0xff
c000b073:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000b07a:	83 ec 0c             	sub    esp,0xc
c000b07d:	50                   	push   eax
c000b07e:	e8 0f 1b 00 00       	call   c000cb92 <LogicalDisk::mount()>
c000b083:	83 c4 10             	add    esp,0x10
c000b086:	90                   	nop
c000b087:	83 c4 0c             	add    esp,0xc
c000b08a:	c3                   	ret    
c000b08b:	90                   	nop

c000b08c <Directory::open()>:
c000b08c:	53                   	push   ebx
c000b08d:	b8 0b 00 00 00       	mov    eax,0xb
c000b092:	83 ec 08             	sub    esp,0x8
c000b095:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b099:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b0a0:	80 fa 19             	cmp    dl,0x19
c000b0a3:	77 3d                	ja     c000b0e2 <Directory::open()+0x56>
c000b0a5:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000b0ac:	85 d2                	test   edx,edx
c000b0ae:	74 32                	je     c000b0e2 <Directory::open()+0x56>
c000b0b0:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b0b6:	85 d2                	test   edx,edx
c000b0b8:	74 28                	je     c000b0e2 <Directory::open()+0x56>
c000b0ba:	b8 06 00 00 00       	mov    eax,0x6
c000b0bf:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b0c3:	75 1d                	jne    c000b0e2 <Directory::open()+0x56>
c000b0c5:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b0cb:	50                   	push   eax
c000b0cc:	8b 02                	mov    eax,DWORD PTR [edx]
c000b0ce:	51                   	push   ecx
c000b0cf:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b0d2:	51                   	push   ecx
c000b0d3:	52                   	push   edx
c000b0d4:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b0d7:	83 c4 10             	add    esp,0x10
c000b0da:	85 c0                	test   eax,eax
c000b0dc:	75 04                	jne    c000b0e2 <Directory::open()+0x56>
c000b0de:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b0e2:	83 c4 08             	add    esp,0x8
c000b0e5:	5b                   	pop    ebx
c000b0e6:	c3                   	ret    
c000b0e7:	90                   	nop

c000b0e8 <Directory::close()>:
c000b0e8:	53                   	push   ebx
c000b0e9:	b8 0b 00 00 00       	mov    eax,0xb
c000b0ee:	83 ec 08             	sub    esp,0x8
c000b0f1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b0f5:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b0fc:	80 fa 19             	cmp    dl,0x19
c000b0ff:	77 41                	ja     c000b142 <Directory::close()+0x5a>
c000b101:	8b 1c 95 20 44 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdbbe0]
c000b108:	85 db                	test   ebx,ebx
c000b10a:	74 36                	je     c000b142 <Directory::close()+0x5a>
c000b10c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b113:	74 2d                	je     c000b142 <Directory::close()+0x5a>
c000b115:	b8 05 00 00 00       	mov    eax,0x5
c000b11a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b11e:	74 22                	je     c000b142 <Directory::close()+0x5a>
c000b120:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b124:	8b 04 95 20 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbbe0]
c000b12b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b131:	53                   	push   ebx
c000b132:	53                   	push   ebx
c000b133:	8b 10                	mov    edx,DWORD PTR [eax]
c000b135:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b13b:	50                   	push   eax
c000b13c:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b13f:	83 c4 10             	add    esp,0x10
c000b142:	83 c4 08             	add    esp,0x8
c000b145:	5b                   	pop    ebx
c000b146:	c3                   	ret    
c000b147:	90                   	nop

c000b148 <Directory::unlink()>:
c000b148:	83 ec 0c             	sub    esp,0xc
c000b14b:	b8 0b 00 00 00       	mov    eax,0xb
c000b150:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b154:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b15b:	80 f9 19             	cmp    cl,0x19
c000b15e:	77 2f                	ja     c000b18f <Directory::unlink()+0x47>
c000b160:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b167:	85 c9                	test   ecx,ecx
c000b169:	74 24                	je     c000b18f <Directory::unlink()+0x47>
c000b16b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b171:	85 c9                	test   ecx,ecx
c000b173:	74 1a                	je     c000b18f <Directory::unlink()+0x47>
c000b175:	b8 06 00 00 00       	mov    eax,0x6
c000b17a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b17e:	75 0f                	jne    c000b18f <Directory::unlink()+0x47>
c000b180:	83 c2 0d             	add    edx,0xd
c000b183:	50                   	push   eax
c000b184:	50                   	push   eax
c000b185:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b187:	52                   	push   edx
c000b188:	51                   	push   ecx
c000b189:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b18c:	83 c4 10             	add    esp,0x10
c000b18f:	83 c4 0c             	add    esp,0xc
c000b192:	c3                   	ret    
c000b193:	90                   	nop

c000b194 <Directory::rename(char const*)>:
c000b194:	83 ec 0c             	sub    esp,0xc
c000b197:	b8 0b 00 00 00       	mov    eax,0xb
c000b19c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1a0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1a7:	80 f9 19             	cmp    cl,0x19
c000b1aa:	77 32                	ja     c000b1de <Directory::rename(char const*)+0x4a>
c000b1ac:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b1b3:	85 c9                	test   ecx,ecx
c000b1b5:	74 27                	je     c000b1de <Directory::rename(char const*)+0x4a>
c000b1b7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b1bd:	85 c9                	test   ecx,ecx
c000b1bf:	74 1d                	je     c000b1de <Directory::rename(char const*)+0x4a>
c000b1c1:	b8 06 00 00 00       	mov    eax,0x6
c000b1c6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b1ca:	75 12                	jne    c000b1de <Directory::rename(char const*)+0x4a>
c000b1cc:	83 c2 0d             	add    edx,0xd
c000b1cf:	50                   	push   eax
c000b1d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b1d6:	52                   	push   edx
c000b1d7:	51                   	push   ecx
c000b1d8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b1db:	83 c4 10             	add    esp,0x10
c000b1de:	83 c4 0c             	add    esp,0xc
c000b1e1:	c3                   	ret    

c000b1e2 <Directory::exists()>:
c000b1e2:	83 ec 0c             	sub    esp,0xc
c000b1e5:	31 c0                	xor    eax,eax
c000b1e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1eb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1f2:	80 f9 19             	cmp    cl,0x19
c000b1f5:	77 24                	ja     c000b21b <Directory::exists()+0x39>
c000b1f7:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b1fe:	85 c9                	test   ecx,ecx
c000b200:	74 19                	je     c000b21b <Directory::exists()+0x39>
c000b202:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b208:	85 c9                	test   ecx,ecx
c000b20a:	74 0f                	je     c000b21b <Directory::exists()+0x39>
c000b20c:	83 c2 0d             	add    edx,0xd
c000b20f:	50                   	push   eax
c000b210:	50                   	push   eax
c000b211:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b213:	52                   	push   edx
c000b214:	51                   	push   ecx
c000b215:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b218:	83 c4 10             	add    esp,0x10
c000b21b:	83 c4 0c             	add    esp,0xc
c000b21e:	c3                   	ret    
c000b21f:	90                   	nop

c000b220 <Directory::read(dirent*)>:
c000b220:	83 ec 1c             	sub    esp,0x1c
c000b223:	b8 0b 00 00 00       	mov    eax,0xb
c000b228:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b22c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b233:	80 fa 19             	cmp    dl,0x19
c000b236:	77 30                	ja     c000b268 <Directory::read(dirent*)+0x48>
c000b238:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000b23f:	85 d2                	test   edx,edx
c000b241:	74 25                	je     c000b268 <Directory::read(dirent*)+0x48>
c000b243:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b24a:	74 1c                	je     c000b268 <Directory::read(dirent*)+0x48>
c000b24c:	83 ec 0c             	sub    esp,0xc
c000b24f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b251:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b255:	52                   	push   edx
c000b256:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b25a:	6a 00                	push   0x0
c000b25c:	68 10 01 00 00       	push   0x110
c000b261:	51                   	push   ecx
c000b262:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b265:	83 c4 20             	add    esp,0x20
c000b268:	83 c4 1c             	add    esp,0x1c
c000b26b:	c3                   	ret    

c000b26c <Directory::create()>:
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	b8 0b 00 00 00       	mov    eax,0xb
c000b274:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b278:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b27f:	80 f9 19             	cmp    cl,0x19
c000b282:	77 2f                	ja     c000b2b3 <Directory::create()+0x47>
c000b284:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b28b:	85 c9                	test   ecx,ecx
c000b28d:	74 24                	je     c000b2b3 <Directory::create()+0x47>
c000b28f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b295:	85 c9                	test   ecx,ecx
c000b297:	74 1a                	je     c000b2b3 <Directory::create()+0x47>
c000b299:	b8 06 00 00 00       	mov    eax,0x6
c000b29e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2a2:	75 0f                	jne    c000b2b3 <Directory::create()+0x47>
c000b2a4:	83 c2 0d             	add    edx,0xd
c000b2a7:	50                   	push   eax
c000b2a8:	50                   	push   eax
c000b2a9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2ab:	52                   	push   edx
c000b2ac:	51                   	push   ecx
c000b2ad:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b2b0:	83 c4 10             	add    esp,0x10
c000b2b3:	83 c4 0c             	add    esp,0xc
c000b2b6:	c3                   	ret    
c000b2b7:	90                   	nop

c000b2b8 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b2b8:	b8 0a 00 00 00       	mov    eax,0xa
c000b2bd:	c3                   	ret    
c000b2be:	66 90                	xchg   ax,ax

c000b2c0 <Bus::Bus(char const*)>:
c000b2c0:	83 ec 0c             	sub    esp,0xc
c000b2c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2c7:	83 ec 08             	sub    esp,0x8
c000b2ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2ce:	50                   	push   eax
c000b2cf:	e8 30 08 00 00       	call   c000bb04 <Device::Device(char const*)>
c000b2d4:	83 c4 10             	add    esp,0x10
c000b2d7:	ba 1c de 01 c0       	mov    edx,0xc001de1c
c000b2dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2e0:	89 10                	mov    DWORD PTR [eax],edx
c000b2e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2e6:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b2f0:	90                   	nop
c000b2f1:	83 c4 0c             	add    esp,0xc
c000b2f4:	c3                   	ret    
c000b2f5:	90                   	nop
c000b2f6:	66 90                	xchg   ax,ax

c000b2f8 <Bus::~Bus()>:
c000b2f8:	83 ec 0c             	sub    esp,0xc
c000b2fb:	ba 1c de 01 c0       	mov    edx,0xc001de1c
c000b300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b304:	89 10                	mov    DWORD PTR [eax],edx
c000b306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b30a:	83 ec 0c             	sub    esp,0xc
c000b30d:	50                   	push   eax
c000b30e:	e8 5b 05 00 00       	call   c000b86e <Device::~Device()>
c000b313:	83 c4 10             	add    esp,0x10
c000b316:	90                   	nop
c000b317:	83 c4 0c             	add    esp,0xc
c000b31a:	c3                   	ret    
c000b31b:	90                   	nop

c000b31c <Bus::~Bus()>:
c000b31c:	83 ec 0c             	sub    esp,0xc
c000b31f:	83 ec 0c             	sub    esp,0xc
c000b322:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b326:	e8 cd ff ff ff       	call   c000b2f8 <Bus::~Bus()>
c000b32b:	83 c4 10             	add    esp,0x10
c000b32e:	83 ec 08             	sub    esp,0x8
c000b331:	68 58 01 00 00       	push   0x158
c000b336:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b33a:	e8 f8 f0 ff ff       	call   c000a437 <operator delete(void*, unsigned long)>
c000b33f:	83 c4 10             	add    esp,0x10
c000b342:	83 c4 0c             	add    esp,0xc
c000b345:	c3                   	ret    

c000b346 <beepThread(void*)>:
c000b346:	83 ec 0c             	sub    esp,0xc
c000b349:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000b34e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b352:	48                   	dec    eax
c000b353:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000b358:	75 01                	jne    c000b35b <beepThread(void*)+0x15>
c000b35a:	fb                   	sti    
c000b35b:	83 ec 0c             	sub    esp,0xc
c000b35e:	6b c2 0a             	imul   eax,edx,0xa
c000b361:	50                   	push   eax
c000b362:	e8 3d 87 00 00       	call   c0013aa4 <milliTenthSleep(unsigned int)>
c000b367:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b36e:	e8 e3 a4 00 00       	call   c0015856 <HalMakeBeep(int)>
c000b373:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b37b:	83 c4 1c             	add    esp,0x1c
c000b37e:	e9 1d 86 00 00       	jmp    c00139a0 <blockTask(TaskState)>

c000b383 <Krnl::beep(int, int, bool)>:
c000b383:	56                   	push   esi
c000b384:	53                   	push   ebx
c000b385:	83 ec 10             	sub    esp,0x10
c000b388:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b38c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b390:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b394:	e8 bd a4 00 00       	call   c0015856 <HalMakeBeep(int)>
c000b399:	83 c4 10             	add    esp,0x10
c000b39c:	89 f0                	mov    eax,esi
c000b39e:	84 c0                	test   al,al
c000b3a0:	74 1e                	je     c000b3c0 <Krnl::beep(int, int, bool)+0x3d>
c000b3a2:	83 ec 0c             	sub    esp,0xc
c000b3a5:	6b db 0a             	imul   ebx,ebx,0xa
c000b3a8:	53                   	push   ebx
c000b3a9:	e8 f6 86 00 00       	call   c0013aa4 <milliTenthSleep(unsigned int)>
c000b3ae:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b3b6:	83 c4 14             	add    esp,0x14
c000b3b9:	5b                   	pop    ebx
c000b3ba:	5e                   	pop    esi
c000b3bb:	e9 96 a4 00 00       	jmp    c0015856 <HalMakeBeep(int)>
c000b3c0:	68 e6 00 00 00       	push   0xe6
c000b3c5:	53                   	push   ebx
c000b3c6:	68 46 b3 00 c0       	push   0xc000b346
c000b3cb:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c000b3d1:	e8 ae 81 00 00       	call   c0013584 <Process::createThread(void (*)(void*), void*, int)>
c000b3d6:	83 c4 14             	add    esp,0x14
c000b3d9:	5b                   	pop    ebx
c000b3da:	5e                   	pop    esi
c000b3db:	c3                   	ret    

c000b3dc <User::loadClockSettings(int)>:
c000b3dc:	53                   	push   ebx
c000b3dd:	83 ec 14             	sub    esp,0x14
c000b3e0:	68 14 01 00 00       	push   0x114
c000b3e5:	e8 cf c3 ff ff       	call   c00077b9 <malloc>
c000b3ea:	83 c4 0c             	add    esp,0xc
c000b3ed:	89 c3                	mov    ebx,eax
c000b3ef:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c000b3f5:	68 40 de 01 c0       	push   0xc001de40
c000b3fa:	50                   	push   eax
c000b3fb:	e8 a2 f6 ff ff       	call   c000aaa2 <File::File(char const*, Process*)>
c000b400:	58                   	pop    eax
c000b401:	5a                   	pop    edx
c000b402:	6a 01                	push   0x1
c000b404:	53                   	push   ebx
c000b405:	e8 58 f7 ff ff       	call   c000ab62 <File::open(FileOpenMode)>
c000b40a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b40d:	e8 ae f7 ff ff       	call   c000abc0 <File::close()>
c000b412:	83 c4 10             	add    esp,0x10
c000b415:	85 db                	test   ebx,ebx
c000b417:	74 0f                	je     c000b428 <User::loadClockSettings(int)+0x4c>
c000b419:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b41b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b41f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b422:	83 c4 08             	add    esp,0x8
c000b425:	5b                   	pop    ebx
c000b426:	ff e0                	jmp    eax
c000b428:	83 c4 08             	add    esp,0x8
c000b42b:	5b                   	pop    ebx
c000b42c:	c3                   	ret    
c000b42d:	90                   	nop

c000b42e <Clock::Clock(char const*)>:
c000b42e:	83 ec 0c             	sub    esp,0xc
c000b431:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b435:	83 ec 08             	sub    esp,0x8
c000b438:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b43c:	50                   	push   eax
c000b43d:	e8 c2 06 00 00       	call   c000bb04 <Device::Device(char const*)>
c000b442:	83 c4 10             	add    esp,0x10
c000b445:	ba 68 de 01 c0       	mov    edx,0xc001de68
c000b44a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b44e:	89 10                	mov    DWORD PTR [eax],edx
c000b450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b454:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b45e:	90                   	nop
c000b45f:	83 c4 0c             	add    esp,0xc
c000b462:	c3                   	ret    
c000b463:	90                   	nop

c000b464 <Clock::~Clock()>:
c000b464:	83 ec 0c             	sub    esp,0xc
c000b467:	ba 68 de 01 c0       	mov    edx,0xc001de68
c000b46c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b470:	89 10                	mov    DWORD PTR [eax],edx
c000b472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b476:	83 ec 0c             	sub    esp,0xc
c000b479:	50                   	push   eax
c000b47a:	e8 ef 03 00 00       	call   c000b86e <Device::~Device()>
c000b47f:	83 c4 10             	add    esp,0x10
c000b482:	90                   	nop
c000b483:	83 c4 0c             	add    esp,0xc
c000b486:	c3                   	ret    
c000b487:	90                   	nop

c000b488 <Clock::~Clock()>:
c000b488:	83 ec 0c             	sub    esp,0xc
c000b48b:	83 ec 0c             	sub    esp,0xc
c000b48e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b492:	e8 cd ff ff ff       	call   c000b464 <Clock::~Clock()>
c000b497:	83 c4 10             	add    esp,0x10
c000b49a:	83 ec 08             	sub    esp,0x8
c000b49d:	68 58 01 00 00       	push   0x158
c000b4a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4a6:	e8 8c ef ff ff       	call   c000a437 <operator delete(void*, unsigned long)>
c000b4ab:	83 c4 10             	add    esp,0x10
c000b4ae:	83 c4 0c             	add    esp,0xc
c000b4b1:	c3                   	ret    

c000b4b2 <Clock::timeInSecondsLocal()>:
c000b4b2:	53                   	push   ebx
c000b4b3:	83 ec 14             	sub    esp,0x14
c000b4b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4ba:	8b 10                	mov    edx,DWORD PTR [eax]
c000b4bc:	50                   	push   eax
c000b4bd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b4c0:	0f b6 0d b8 1f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0021fb8
c000b4c7:	03 0d bc 1f 02 c0    	add    ecx,DWORD PTR ds:0xc0021fbc
c000b4cd:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b4d3:	89 cb                	mov    ebx,ecx
c000b4d5:	c1 fb 1f             	sar    ebx,0x1f
c000b4d8:	01 c8                	add    eax,ecx
c000b4da:	11 da                	adc    edx,ebx
c000b4dc:	83 c4 10             	add    esp,0x10
c000b4df:	31 c9                	xor    ecx,ecx
c000b4e1:	80 3d b9 1f 02 c0 00 	cmp    BYTE PTR ds:0xc0021fb9,0x0
c000b4e8:	74 05                	je     c000b4ef <Clock::timeInSecondsLocal()+0x3d>
c000b4ea:	b9 08 07 00 00       	mov    ecx,0x708
c000b4ef:	31 db                	xor    ebx,ebx
c000b4f1:	01 c8                	add    eax,ecx
c000b4f3:	11 da                	adc    edx,ebx
c000b4f5:	83 c4 08             	add    esp,0x8
c000b4f8:	5b                   	pop    ebx
c000b4f9:	c3                   	ret    

c000b4fa <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b4fa:	57                   	push   edi
c000b4fb:	56                   	push   esi
c000b4fc:	53                   	push   ebx
c000b4fd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b501:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b505:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b507:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b50b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b50e:	0f b6 05 b8 1f 02 c0 	movzx  eax,BYTE PTR ds:0xc0021fb8
c000b515:	03 05 bc 1f 02 c0    	add    eax,DWORD PTR ds:0xc0021fbc
c000b51b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b521:	99                   	cdq    
c000b522:	29 c6                	sub    esi,eax
c000b524:	19 d7                	sbb    edi,edx
c000b526:	89 f0                	mov    eax,esi
c000b528:	89 fa                	mov    edx,edi
c000b52a:	31 f6                	xor    esi,esi
c000b52c:	80 3d b9 1f 02 c0 00 	cmp    BYTE PTR ds:0xc0021fb9,0x0
c000b533:	74 05                	je     c000b53a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b535:	be 08 07 00 00       	mov    esi,0x708
c000b53a:	31 ff                	xor    edi,edi
c000b53c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b540:	29 f0                	sub    eax,esi
c000b542:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b546:	19 fa                	sbb    edx,edi
c000b548:	89 d8                	mov    eax,ebx
c000b54a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b54e:	5b                   	pop    ebx
c000b54f:	5e                   	pop    esi
c000b550:	5f                   	pop    edi
c000b551:	ff e0                	jmp    eax

c000b553 <datetimeToSeconds(datetime_t)>:
c000b553:	55                   	push   ebp
c000b554:	57                   	push   edi
c000b555:	56                   	push   esi
c000b556:	53                   	push   ebx
c000b557:	83 ec 14             	sub    esp,0x14
c000b55a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b55e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b562:	89 d3                	mov    ebx,edx
c000b564:	0f b6 c6             	movzx  eax,dh
c000b567:	c1 eb 10             	shr    ebx,0x10
c000b56a:	48                   	dec    eax
c000b56b:	66 81 eb 6c 07       	sub    bx,0x76c
c000b570:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b574:	0f b6 f5             	movzx  esi,ch
c000b577:	89 cf                	mov    edi,ecx
c000b579:	6b f6 3c             	imul   esi,esi,0x3c
c000b57c:	c1 ef 10             	shr    edi,0x10
c000b57f:	0f b6 c9             	movzx  ecx,cl
c000b582:	89 f8                	mov    eax,edi
c000b584:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b58a:	0f b6 f8             	movzx  edi,al
c000b58d:	0f b6 d2             	movzx  edx,dl
c000b590:	01 fe                	add    esi,edi
c000b592:	01 f1                	add    ecx,esi
c000b594:	0f b7 f3             	movzx  esi,bx
c000b597:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b59b:	c1 f9 1f             	sar    ecx,0x1f
c000b59e:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b5a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b5a7:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b5ac:	8b 0c 8d a0 de 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe2160]
c000b5b3:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b5b7:	76 29                	jbe    c000b5e2 <datetimeToSeconds(datetime_t)+0x8f>
c000b5b9:	f6 c3 03             	test   bl,0x3
c000b5bc:	75 24                	jne    c000b5e2 <datetimeToSeconds(datetime_t)+0x8f>
c000b5be:	31 d2                	xor    edx,edx
c000b5c0:	bf 64 00 00 00       	mov    edi,0x64
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	66 f7 f7             	div    di
c000b5ca:	66 85 d2             	test   dx,dx
c000b5cd:	75 12                	jne    c000b5e1 <datetimeToSeconds(datetime_t)+0x8e>
c000b5cf:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b5d5:	bf 90 01 00 00       	mov    edi,0x190
c000b5da:	99                   	cdq    
c000b5db:	f7 ff                	idiv   edi
c000b5dd:	85 d2                	test   edx,edx
c000b5df:	75 01                	jne    c000b5e2 <datetimeToSeconds(datetime_t)+0x8f>
c000b5e1:	41                   	inc    ecx
c000b5e2:	66 83 fb 46          	cmp    bx,0x46
c000b5e6:	76 45                	jbe    c000b62d <datetimeToSeconds(datetime_t)+0xda>
c000b5e8:	bb 46 00 00 00       	mov    ebx,0x46
c000b5ed:	bf 64 00 00 00       	mov    edi,0x64
c000b5f2:	bd 90 01 00 00       	mov    ebp,0x190
c000b5f7:	b8 6d 01 00 00       	mov    eax,0x16d
c000b5fc:	f6 c3 03             	test   bl,0x3
c000b5ff:	75 23                	jne    c000b624 <datetimeToSeconds(datetime_t)+0xd1>
c000b601:	89 d8                	mov    eax,ebx
c000b603:	99                   	cdq    
c000b604:	f7 ff                	idiv   edi
c000b606:	b8 6e 01 00 00       	mov    eax,0x16e
c000b60b:	85 d2                	test   edx,edx
c000b60d:	75 15                	jne    c000b624 <datetimeToSeconds(datetime_t)+0xd1>
c000b60f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b615:	99                   	cdq    
c000b616:	f7 fd                	idiv   ebp
c000b618:	31 c0                	xor    eax,eax
c000b61a:	85 d2                	test   edx,edx
c000b61c:	0f 94 c0             	sete   al
c000b61f:	05 6d 01 00 00       	add    eax,0x16d
c000b624:	01 c1                	add    ecx,eax
c000b626:	43                   	inc    ebx
c000b627:	39 f3                	cmp    ebx,esi
c000b629:	7c cc                	jl     c000b5f7 <datetimeToSeconds(datetime_t)+0xa4>
c000b62b:	eb 3b                	jmp    c000b668 <datetimeToSeconds(datetime_t)+0x115>
c000b62d:	74 39                	je     c000b668 <datetimeToSeconds(datetime_t)+0x115>
c000b62f:	b8 45 00 00 00       	mov    eax,0x45
c000b634:	89 c2                	mov    edx,eax
c000b636:	83 e2 03             	and    edx,0x3
c000b639:	39 f0                	cmp    eax,esi
c000b63b:	7e 13                	jle    c000b650 <datetimeToSeconds(datetime_t)+0xfd>
c000b63d:	85 d2                	test   edx,edx
c000b63f:	0f 94 c2             	sete   dl
c000b642:	48                   	dec    eax
c000b643:	0f b6 d2             	movzx  edx,dl
c000b646:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b64c:	29 d1                	sub    ecx,edx
c000b64e:	eb e4                	jmp    c000b634 <datetimeToSeconds(datetime_t)+0xe1>
c000b650:	b8 6d 01 00 00       	mov    eax,0x16d
c000b655:	85 d2                	test   edx,edx
c000b657:	75 0d                	jne    c000b666 <datetimeToSeconds(datetime_t)+0x113>
c000b659:	31 c0                	xor    eax,eax
c000b65b:	66 85 db             	test   bx,bx
c000b65e:	0f 95 c0             	setne  al
c000b661:	05 6d 01 00 00       	add    eax,0x16d
c000b666:	29 c1                	sub    ecx,eax
c000b668:	b8 80 51 01 00       	mov    eax,0x15180
c000b66d:	f7 e9                	imul   ecx
c000b66f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b673:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b677:	83 c4 14             	add    esp,0x14
c000b67a:	5b                   	pop    ebx
c000b67b:	5e                   	pop    esi
c000b67c:	5f                   	pop    edi
c000b67d:	5d                   	pop    ebp
c000b67e:	c3                   	ret    
c000b67f:	90                   	nop

c000b680 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b680:	57                   	push   edi
c000b681:	56                   	push   esi
c000b682:	53                   	push   ebx
c000b683:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b687:	8b 06                	mov    eax,DWORD PTR [esi]
c000b689:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b68c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b690:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b694:	e8 ba fe ff ff       	call   c000b553 <datetimeToSeconds(datetime_t)>
c000b699:	59                   	pop    ecx
c000b69a:	0f b6 0d b8 1f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0021fb8
c000b6a1:	5b                   	pop    ebx
c000b6a2:	03 0d bc 1f 02 c0    	add    ecx,DWORD PTR ds:0xc0021fbc
c000b6a8:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b6ae:	89 cb                	mov    ebx,ecx
c000b6b0:	c1 fb 1f             	sar    ebx,0x1f
c000b6b3:	29 c8                	sub    eax,ecx
c000b6b5:	19 da                	sbb    edx,ebx
c000b6b7:	31 c9                	xor    ecx,ecx
c000b6b9:	80 3d b9 1f 02 c0 00 	cmp    BYTE PTR ds:0xc0021fb9,0x0
c000b6c0:	74 05                	je     c000b6c7 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b6c2:	b9 08 07 00 00       	mov    ecx,0x708
c000b6c7:	31 db                	xor    ebx,ebx
c000b6c9:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b6cd:	29 c8                	sub    eax,ecx
c000b6cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b6d3:	19 da                	sbb    edx,ebx
c000b6d5:	89 f8                	mov    eax,edi
c000b6d7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b6db:	5b                   	pop    ebx
c000b6dc:	5e                   	pop    esi
c000b6dd:	5f                   	pop    edi
c000b6de:	ff e0                	jmp    eax

c000b6e0 <secondsToDatetime(unsigned long long)>:
c000b6e0:	55                   	push   ebp
c000b6e1:	57                   	push   edi
c000b6e2:	56                   	push   esi
c000b6e3:	53                   	push   ebx
c000b6e4:	83 ec 1c             	sub    esp,0x1c
c000b6e7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b6eb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b6ef:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b6f3:	6a 00                	push   0x0
c000b6f5:	68 80 51 01 00       	push   0x15180
c000b6fa:	55                   	push   ebp
c000b6fb:	57                   	push   edi
c000b6fc:	e8 ff 09 01 00       	call   c001c100 <__udivdi3>
c000b701:	83 c4 10             	add    esp,0x10
c000b704:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b70a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b70e:	6a 00                	push   0x0
c000b710:	68 80 51 01 00       	push   0x15180
c000b715:	55                   	push   ebp
c000b716:	57                   	push   edi
c000b717:	bf 10 0e 00 00       	mov    edi,0xe10
c000b71c:	e8 df 0a 01 00       	call   c001c200 <__umoddi3>
c000b721:	83 c4 10             	add    esp,0x10
c000b724:	99                   	cdq    
c000b725:	f7 ff                	idiv   edi
c000b727:	bf 3c 00 00 00       	mov    edi,0x3c
c000b72c:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b72f:	89 d0                	mov    eax,edx
c000b731:	99                   	cdq    
c000b732:	f7 ff                	idiv   edi
c000b734:	85 db                	test   ebx,ebx
c000b736:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b739:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b73c:	79 11                	jns    c000b74f <secondsToDatetime(unsigned long long)+0x6f>
c000b73e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b742:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b748:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b74d:	eb 07                	jmp    c000b756 <secondsToDatetime(unsigned long long)+0x76>
c000b74f:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b754:	89 d8                	mov    eax,ebx
c000b756:	bf b4 05 00 00       	mov    edi,0x5b4
c000b75b:	99                   	cdq    
c000b75c:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b761:	f7 f9                	idiv   ecx
c000b763:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b768:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76c:	31 d2                	xor    edx,edx
c000b76e:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b776:	01 c3                	add    ebx,eax
c000b778:	89 d8                	mov    eax,ebx
c000b77a:	f7 f1                	div    ecx
c000b77c:	31 d2                	xor    edx,edx
c000b77e:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b781:	89 d8                	mov    eax,ebx
c000b783:	f7 f7                	div    edi
c000b785:	31 d2                	xor    edx,edx
c000b787:	29 c1                	sub    ecx,eax
c000b789:	89 d8                	mov    eax,ebx
c000b78b:	f7 f5                	div    ebp
c000b78d:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b792:	29 c1                	sub    ecx,eax
c000b794:	31 d2                	xor    edx,edx
c000b796:	89 c8                	mov    eax,ecx
c000b798:	f7 f5                	div    ebp
c000b79a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b79f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b7a3:	31 d2                	xor    edx,edx
c000b7a5:	89 c8                	mov    eax,ecx
c000b7a7:	f7 f5                	div    ebp
c000b7a9:	31 d2                	xor    edx,edx
c000b7ab:	01 c3                	add    ebx,eax
c000b7ad:	89 c8                	mov    eax,ecx
c000b7af:	f7 f7                	div    edi
c000b7b1:	bf 99 00 00 00       	mov    edi,0x99
c000b7b6:	29 c3                	sub    ebx,eax
c000b7b8:	31 d2                	xor    edx,edx
c000b7ba:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b7c2:	29 c3                	sub    ebx,eax
c000b7c4:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b7c7:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b7ca:	bb 05 00 00 00       	mov    ebx,0x5
c000b7cf:	83 c1 02             	add    ecx,0x2
c000b7d2:	89 c8                	mov    eax,ecx
c000b7d4:	f7 f7                	div    edi
c000b7d6:	31 d2                	xor    edx,edx
c000b7d8:	89 c7                	mov    edi,eax
c000b7da:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b7e0:	83 c0 02             	add    eax,0x2
c000b7e3:	f7 f3                	div    ebx
c000b7e5:	89 eb                	mov    ebx,ebp
c000b7e7:	29 c3                	sub    ebx,eax
c000b7e9:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b7ef:	88 1e                	mov    BYTE PTR [esi],bl
c000b7f1:	19 c0                	sbb    eax,eax
c000b7f3:	31 d2                	xor    edx,edx
c000b7f5:	83 e0 0c             	and    eax,0xc
c000b7f8:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b7fc:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b804:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b808:	83 f9 01             	cmp    ecx,0x1
c000b80b:	0f 96 c2             	setbe  dl
c000b80e:	41                   	inc    ecx
c000b80f:	01 d0                	add    eax,edx
c000b811:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b814:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b818:	83 c4 1c             	add    esp,0x1c
c000b81b:	89 f0                	mov    eax,esi
c000b81d:	5b                   	pop    ebx
c000b81e:	5e                   	pop    esi
c000b81f:	5f                   	pop    edi
c000b820:	5d                   	pop    ebp
c000b821:	c2 04 00             	ret    0x4

c000b824 <Clock::timeInDatetimeLocal()>:
c000b824:	53                   	push   ebx
c000b825:	83 ec 14             	sub    esp,0x14
c000b828:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b82c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b830:	e8 7d fc ff ff       	call   c000b4b2 <Clock::timeInSecondsLocal()>
c000b835:	83 c4 0c             	add    esp,0xc
c000b838:	52                   	push   edx
c000b839:	50                   	push   eax
c000b83a:	53                   	push   ebx
c000b83b:	e8 a0 fe ff ff       	call   c000b6e0 <secondsToDatetime(unsigned long long)>
c000b840:	89 d8                	mov    eax,ebx
c000b842:	83 c4 14             	add    esp,0x14
c000b845:	5b                   	pop    ebx
c000b846:	c2 04 00             	ret    0x4
c000b849:	90                   	nop

c000b84a <Device::hibernate()>:
c000b84a:	c3                   	ret    
c000b84b:	90                   	nop

c000b84c <Device::wake()>:
c000b84c:	c3                   	ret    
c000b84d:	90                   	nop

c000b84e <Device::detect()>:
c000b84e:	c3                   	ret    
c000b84f:	90                   	nop

c000b850 <Device::disableLegacy()>:
c000b850:	c3                   	ret    
c000b851:	90                   	nop

c000b852 <Device::powerSaving(PowerSavingLevel)>:
c000b852:	c3                   	ret    
c000b853:	90                   	nop

c000b854 <DriverlessDevice::close(int, int, void*)>:
c000b854:	31 c0                	xor    eax,eax
c000b856:	c3                   	ret    
c000b857:	90                   	nop

c000b858 <DriverlessDevice::detect()>:
c000b858:	c3                   	ret    
c000b859:	90                   	nop

c000b85a <DriverlessDevice::open(int, int, void*)>:
c000b85a:	83 ec 18             	sub    esp,0x18
c000b85d:	68 d0 de 01 c0       	push   0xc001ded0
c000b862:	e8 48 49 00 00       	call   c00101af <KePanic(char const*)>
c000b867:	83 c8 ff             	or     eax,0xffffffff
c000b86a:	83 c4 1c             	add    esp,0x1c
c000b86d:	c3                   	ret    

c000b86e <Device::~Device()>:
c000b86e:	ba 30 df 01 c0       	mov    edx,0xc001df30
c000b873:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b877:	89 10                	mov    DWORD PTR [eax],edx
c000b879:	90                   	nop
c000b87a:	c3                   	ret    
c000b87b:	90                   	nop

c000b87c <Device::~Device()>:
c000b87c:	83 ec 0c             	sub    esp,0xc
c000b87f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b883:	e8 e6 ff ff ff       	call   c000b86e <Device::~Device()>
c000b888:	83 c4 04             	add    esp,0x4
c000b88b:	83 ec 08             	sub    esp,0x8
c000b88e:	68 58 01 00 00       	push   0x158
c000b893:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b897:	e8 9b eb ff ff       	call   c000a437 <operator delete(void*, unsigned long)>
c000b89c:	83 c4 10             	add    esp,0x10
c000b89f:	83 c4 0c             	add    esp,0xc
c000b8a2:	c3                   	ret    
c000b8a3:	90                   	nop

c000b8a4 <Device::findAndLoadDriver()>:
c000b8a4:	c7 44 24 04 ee de 01 c0 	mov    DWORD PTR [esp+0x4],0xc001deee
c000b8ac:	e9 7c ec ff ff       	jmp    c000a52d <Dbg::kprintf(char const*, ...)>
c000b8b1:	90                   	nop

c000b8b2 <Device::preOpenPCI(PCIDeviceInfo)>:
c000b8b2:	57                   	push   edi
c000b8b3:	b9 09 00 00 00       	mov    ecx,0x9
c000b8b8:	56                   	push   esi
c000b8b9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b8bd:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b8c1:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000b8cb:	81 c7 18 01 00 00    	add    edi,0x118
c000b8d1:	fc                   	cld    
c000b8d2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b8d4:	5e                   	pop    esi
c000b8d5:	5f                   	pop    edi
c000b8d6:	c3                   	ret    
c000b8d7:	90                   	nop

c000b8d8 <Device::preOpenACPI(void*, char*, char*)>:
c000b8d8:	57                   	push   edi
c000b8d9:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b8de:	56                   	push   esi
c000b8df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b8e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b8e7:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000b8f1:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000b8f7:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000b8fd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b901:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b903:	b9 0e 00 00 00       	mov    ecx,0xe
c000b908:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000b90e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b912:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b914:	5e                   	pop    esi
c000b915:	5f                   	pop    edi
c000b916:	c3                   	ret    
c000b917:	90                   	nop

c000b918 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b918:	53                   	push   ebx
c000b919:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b91d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b921:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b925:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b929:	0f b6 c0             	movzx  eax,al
c000b92c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000b930:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b934:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b938:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b93c:	5b                   	pop    ebx
c000b93d:	e9 a6 05 00 00       	jmp    c000bee8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000b942 <Device::getParent()>:
c000b942:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b946:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000b94c:	c3                   	ret    
c000b94d:	90                   	nop

c000b94e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000b94e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b952:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b956:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000b95b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b95f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b963:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b967:	e9 e8 06 00 00       	jmp    c000c054 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000b96c <Device::addChild(Device*)>:
c000b96c:	53                   	push   ebx
c000b96d:	83 ec 08             	sub    esp,0x8
c000b970:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b978:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000b97e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000b984:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b986:	85 d2                	test   edx,edx
c000b988:	74 04                	je     c000b98e <Device::addChild(Device*)+0x22>
c000b98a:	89 d3                	mov    ebx,edx
c000b98c:	eb f6                	jmp    c000b984 <Device::addChild(Device*)+0x18>
c000b98e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000b991:	83 ec 0c             	sub    esp,0xc
c000b994:	6a 08                	push   0x8
c000b996:	e8 1e be ff ff       	call   c00077b9 <malloc>
c000b99b:	89 03                	mov    DWORD PTR [ebx],eax
c000b99d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b9a3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b9aa:	83 c4 18             	add    esp,0x18
c000b9ad:	5b                   	pop    ebx
c000b9ae:	c3                   	ret    
c000b9af:	90                   	nop

c000b9b0 <Device::removeAllChildren()>:
c000b9b0:	56                   	push   esi
c000b9b1:	53                   	push   ebx
c000b9b2:	52                   	push   edx
c000b9b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b9b7:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000b9bd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b9c0:	74 17                	je     c000b9d9 <Device::removeAllChildren()+0x29>
c000b9c2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000b9c5:	85 c0                	test   eax,eax
c000b9c7:	74 0c                	je     c000b9d5 <Device::removeAllChildren()+0x25>
c000b9c9:	83 ec 0c             	sub    esp,0xc
c000b9cc:	8b 10                	mov    edx,DWORD PTR [eax]
c000b9ce:	50                   	push   eax
c000b9cf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000b9d2:	83 c4 10             	add    esp,0x10
c000b9d5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b9d7:	eb e4                	jmp    c000b9bd <Device::removeAllChildren()+0xd>
c000b9d9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b9df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b9e5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b9eb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b9f2:	58                   	pop    eax
c000b9f3:	5b                   	pop    ebx
c000b9f4:	5e                   	pop    esi
c000b9f5:	c3                   	ret    

c000b9f6 <Device::hibernateAll()>:
c000b9f6:	53                   	push   ebx
c000b9f7:	83 ec 14             	sub    esp,0x14
c000b9fa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b9fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba00:	53                   	push   ebx
c000ba01:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ba04:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba0a:	83 c4 10             	add    esp,0x10
c000ba0d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba10:	74 0f                	je     c000ba21 <Device::hibernateAll()+0x2b>
c000ba12:	83 ec 0c             	sub    esp,0xc
c000ba15:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba18:	e8 d9 ff ff ff       	call   c000b9f6 <Device::hibernateAll()>
c000ba1d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba1f:	eb e9                	jmp    c000ba0a <Device::hibernateAll()+0x14>
c000ba21:	83 c4 08             	add    esp,0x8
c000ba24:	5b                   	pop    ebx
c000ba25:	c3                   	ret    

c000ba26 <Device::wakeAll()>:
c000ba26:	53                   	push   ebx
c000ba27:	83 ec 14             	sub    esp,0x14
c000ba2a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ba2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba30:	53                   	push   ebx
c000ba31:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000ba34:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba3a:	83 c4 10             	add    esp,0x10
c000ba3d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba40:	74 0f                	je     c000ba51 <Device::wakeAll()+0x2b>
c000ba42:	83 ec 0c             	sub    esp,0xc
c000ba45:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba48:	e8 d9 ff ff ff       	call   c000ba26 <Device::wakeAll()>
c000ba4d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba4f:	eb e9                	jmp    c000ba3a <Device::wakeAll()+0x14>
c000ba51:	83 c4 08             	add    esp,0x8
c000ba54:	5b                   	pop    ebx
c000ba55:	c3                   	ret    

c000ba56 <Device::detectAll()>:
c000ba56:	53                   	push   ebx
c000ba57:	83 ec 14             	sub    esp,0x14
c000ba5a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ba5e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba60:	53                   	push   ebx
c000ba61:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000ba64:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba6a:	83 c4 10             	add    esp,0x10
c000ba6d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba70:	74 0f                	je     c000ba81 <Device::detectAll()+0x2b>
c000ba72:	83 ec 0c             	sub    esp,0xc
c000ba75:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba78:	e8 d9 ff ff ff       	call   c000ba56 <Device::detectAll()>
c000ba7d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba7f:	eb e9                	jmp    c000ba6a <Device::detectAll()+0x14>
c000ba81:	83 c4 08             	add    esp,0x8
c000ba84:	5b                   	pop    ebx
c000ba85:	c3                   	ret    

c000ba86 <Device::disableLegacyAll()>:
c000ba86:	c3                   	ret    
c000ba87:	90                   	nop

c000ba88 <Device::loadDriversForAll()>:
c000ba88:	c3                   	ret    
c000ba89:	90                   	nop

c000ba8a <Device::closeAll()>:
c000ba8a:	53                   	push   ebx
c000ba8b:	83 ec 08             	sub    esp,0x8
c000ba8e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ba92:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba94:	6a 00                	push   0x0
c000ba96:	6a 00                	push   0x0
c000ba98:	6a 00                	push   0x0
c000ba9a:	53                   	push   ebx
c000ba9b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ba9e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000baa4:	83 c4 10             	add    esp,0x10
c000baa7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000baaa:	74 0f                	je     c000babb <Device::closeAll()+0x31>
c000baac:	83 ec 0c             	sub    esp,0xc
c000baaf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bab2:	e8 d3 ff ff ff       	call   c000ba8a <Device::closeAll()>
c000bab7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bab9:	eb e9                	jmp    c000baa4 <Device::closeAll()+0x1a>
c000babb:	83 c4 08             	add    esp,0x8
c000babe:	5b                   	pop    ebx
c000babf:	c3                   	ret    

c000bac0 <Device::powerSavingAll(PowerSavingLevel)>:
c000bac0:	56                   	push   esi
c000bac1:	53                   	push   ebx
c000bac2:	83 ec 0c             	sub    esp,0xc
c000bac5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bac9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bacd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bacf:	56                   	push   esi
c000bad0:	53                   	push   ebx
c000bad1:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bad4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bada:	83 c4 10             	add    esp,0x10
c000badd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bae0:	74 0f                	je     c000baf1 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bae2:	52                   	push   edx
c000bae3:	52                   	push   edx
c000bae4:	56                   	push   esi
c000bae5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bae8:	e8 d3 ff ff ff       	call   c000bac0 <Device::powerSavingAll(PowerSavingLevel)>
c000baed:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000baef:	eb e9                	jmp    c000bada <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000baf1:	58                   	pop    eax
c000baf2:	5b                   	pop    ebx
c000baf3:	5e                   	pop    esi
c000baf4:	c3                   	ret    
c000baf5:	90                   	nop

c000baf6 <Device::setName(char const*)>:
c000baf6:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bafe:	e9 fd 4a ff ff       	jmp    c0000600 <strcpy>
c000bb03:	90                   	nop

c000bb04 <Device::Device(char const*)>:
c000bb04:	83 ec 1c             	sub    esp,0x1c
c000bb07:	ba 30 df 01 c0       	mov    edx,0xc001df30
c000bb0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb10:	89 10                	mov    DWORD PTR [eax],edx
c000bb12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb16:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bb20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb24:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bb2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb32:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bb3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb40:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bb4a:	83 ec 08             	sub    esp,0x8
c000bb4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb55:	e8 9c ff ff ff       	call   c000baf6 <Device::setName(char const*)>
c000bb5a:	83 c4 10             	add    esp,0x10
c000bb5d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bb65:	83 ec 0c             	sub    esp,0xc
c000bb68:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb6c:	e8 48 bc ff ff       	call   c00077b9 <malloc>
c000bb71:	83 c4 10             	add    esp,0x10
c000bb74:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bb7a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bb81:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bb85:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bb8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb8f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bb95:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bb9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb9f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bba5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bbac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbb0:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bbb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbbb:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bbc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbc6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bbd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbd4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bbde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbe2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bbec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbf0:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bbfa:	90                   	nop
c000bbfb:	83 c4 1c             	add    esp,0x1c
c000bbfe:	c3                   	ret    
c000bbff:	90                   	nop

c000bc00 <Device::getName()>:
c000bc00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc04:	05 d0 00 00 00       	add    eax,0xd0
c000bc09:	c3                   	ret    

c000bc0a <DriverlessDevice::DriverlessDevice(char const*)>:
c000bc0a:	83 ec 0c             	sub    esp,0xc
c000bc0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc11:	83 ec 08             	sub    esp,0x8
c000bc14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc18:	50                   	push   eax
c000bc19:	e8 e6 fe ff ff       	call   c000bb04 <Device::Device(char const*)>
c000bc1e:	83 c4 10             	add    esp,0x10
c000bc21:	ba 5c df 01 c0       	mov    edx,0xc001df5c
c000bc26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc2a:	89 10                	mov    DWORD PTR [eax],edx
c000bc2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc30:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000bc3a:	90                   	nop
c000bc3b:	83 c4 0c             	add    esp,0xc
c000bc3e:	c3                   	ret    
c000bc3f:	90                   	nop

c000bc40 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bc40:	57                   	push   edi
c000bc41:	56                   	push   esi
c000bc42:	53                   	push   ebx
c000bc43:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bc47:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bc4b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bc4f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bc55:	75 0c                	jne    c000bc63 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bc57:	52                   	push   edx
c000bc58:	52                   	push   edx
c000bc59:	53                   	push   ebx
c000bc5a:	56                   	push   esi
c000bc5b:	e8 52 09 01 00       	call   c001c5b2 <LinkedList<Device>::addElement(Device*)>
c000bc60:	83 c4 10             	add    esp,0x10
c000bc63:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bc69:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bc6c:	74 12                	je     c000bc80 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bc6e:	50                   	push   eax
c000bc6f:	57                   	push   edi
c000bc70:	56                   	push   esi
c000bc71:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bc74:	e8 c7 ff ff ff       	call   c000bc40 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bc79:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bc7b:	83 c4 10             	add    esp,0x10
c000bc7e:	eb e9                	jmp    c000bc69 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bc80:	5b                   	pop    ebx
c000bc81:	5e                   	pop    esi
c000bc82:	5f                   	pop    edi
c000bc83:	c3                   	ret    

c000bc84 <getDevicesOfType(DeviceType)>:
c000bc84:	53                   	push   ebx
c000bc85:	83 ec 14             	sub    esp,0x14
c000bc88:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bc8c:	53                   	push   ebx
c000bc8d:	e8 fc 09 01 00       	call   c001c68e <LinkedList<Device>::LinkedList()>
c000bc92:	83 c4 0c             	add    esp,0xc
c000bc95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc99:	53                   	push   ebx
c000bc9a:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c000bca0:	e8 9b ff ff ff       	call   c000bc40 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bca5:	89 d8                	mov    eax,ebx
c000bca7:	83 c4 18             	add    esp,0x18
c000bcaa:	5b                   	pop    ebx
c000bcab:	c2 04 00             	ret    0x4
c000bcae:	66 90                	xchg   ax,ax

c000bcb0 <HardDiskController::HardDiskController(char const*)>:
c000bcb0:	83 ec 0c             	sub    esp,0xc
c000bcb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcb7:	83 ec 08             	sub    esp,0x8
c000bcba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcbe:	50                   	push   eax
c000bcbf:	e8 40 fe ff ff       	call   c000bb04 <Device::Device(char const*)>
c000bcc4:	83 c4 10             	add    esp,0x10
c000bcc7:	ba 88 df 01 c0       	mov    edx,0xc001df88
c000bccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcd0:	89 10                	mov    DWORD PTR [eax],edx
c000bcd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcd6:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bce0:	90                   	nop
c000bce1:	83 c4 0c             	add    esp,0xc
c000bce4:	c3                   	ret    
c000bce5:	90                   	nop
c000bce6:	66 90                	xchg   ax,ax

c000bce8 <HardDiskController::~HardDiskController()>:
c000bce8:	83 ec 0c             	sub    esp,0xc
c000bceb:	ba 88 df 01 c0       	mov    edx,0xc001df88
c000bcf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcf4:	89 10                	mov    DWORD PTR [eax],edx
c000bcf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcfa:	83 ec 0c             	sub    esp,0xc
c000bcfd:	50                   	push   eax
c000bcfe:	e8 6b fb ff ff       	call   c000b86e <Device::~Device()>
c000bd03:	83 c4 10             	add    esp,0x10
c000bd06:	90                   	nop
c000bd07:	83 c4 0c             	add    esp,0xc
c000bd0a:	c3                   	ret    
c000bd0b:	90                   	nop

c000bd0c <HardDiskController::~HardDiskController()>:
c000bd0c:	83 ec 0c             	sub    esp,0xc
c000bd0f:	83 ec 0c             	sub    esp,0xc
c000bd12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd16:	e8 cd ff ff ff       	call   c000bce8 <HardDiskController::~HardDiskController()>
c000bd1b:	83 c4 10             	add    esp,0x10
c000bd1e:	83 ec 08             	sub    esp,0x8
c000bd21:	68 58 01 00 00       	push   0x158
c000bd26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd2a:	e8 08 e7 ff ff       	call   c000a437 <operator delete(void*, unsigned long)>
c000bd2f:	83 c4 10             	add    esp,0x10
c000bd32:	83 c4 0c             	add    esp,0xc
c000bd35:	c3                   	ret    

c000bd36 <PhysicalDisk::eject()>:
c000bd36:	83 c8 ff             	or     eax,0xffffffff
c000bd39:	c3                   	ret    

c000bd3a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000bd3a:	83 ec 0c             	sub    esp,0xc
c000bd3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd41:	83 ec 08             	sub    esp,0x8
c000bd44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd48:	50                   	push   eax
c000bd49:	e8 b6 fd ff ff       	call   c000bb04 <Device::Device(char const*)>
c000bd4e:	83 c4 10             	add    esp,0x10
c000bd51:	ba b4 df 01 c0       	mov    edx,0xc001dfb4
c000bd56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd5a:	89 10                	mov    DWORD PTR [eax],edx
c000bd5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd60:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bd67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd6b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000bd72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd76:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000bd80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd84:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd88:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000bd8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd92:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000bd9c:	90                   	nop
c000bd9d:	83 c4 0c             	add    esp,0xc
c000bda0:	c3                   	ret    
c000bda1:	90                   	nop

c000bda2 <PhysicalDisk::startCache()>:
c000bda2:	56                   	push   esi
c000bda3:	53                   	push   ebx
c000bda4:	83 ec 10             	sub    esp,0x10
c000bda7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bdab:	6a 44                	push   0x44
c000bdad:	e8 07 ba ff ff       	call   c00077b9 <malloc>
c000bdb2:	89 c6                	mov    esi,eax
c000bdb4:	58                   	pop    eax
c000bdb5:	5a                   	pop    edx
c000bdb6:	53                   	push   ebx
c000bdb7:	56                   	push   esi
c000bdb8:	e8 eb 15 00 00       	call   c000d3a8 <VCache::VCache(PhysicalDisk*)>
c000bdbd:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000bdc3:	83 c4 14             	add    esp,0x14
c000bdc6:	5b                   	pop    ebx
c000bdc7:	5e                   	pop    esi
c000bdc8:	c3                   	ret    
c000bdc9:	90                   	nop

c000bdca <PhysicalDisk::~PhysicalDisk()>:
c000bdca:	83 ec 0c             	sub    esp,0xc
c000bdcd:	ba b4 df 01 c0       	mov    edx,0xc001dfb4
c000bdd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdd6:	89 10                	mov    DWORD PTR [eax],edx
c000bdd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bddc:	83 ec 0c             	sub    esp,0xc
c000bddf:	50                   	push   eax
c000bde0:	e8 89 fa ff ff       	call   c000b86e <Device::~Device()>
c000bde5:	83 c4 10             	add    esp,0x10
c000bde8:	90                   	nop
c000bde9:	83 c4 0c             	add    esp,0xc
c000bdec:	c3                   	ret    
c000bded:	90                   	nop

c000bdee <PhysicalDisk::~PhysicalDisk()>:
c000bdee:	83 ec 0c             	sub    esp,0xc
c000bdf1:	83 ec 0c             	sub    esp,0xc
c000bdf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdf8:	e8 cd ff ff ff       	call   c000bdca <PhysicalDisk::~PhysicalDisk()>
c000bdfd:	83 c4 10             	add    esp,0x10
c000be00:	83 ec 08             	sub    esp,0x8
c000be03:	68 6c 01 00 00       	push   0x16c
c000be08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be0c:	e8 26 e6 ff ff       	call   c000a437 <operator delete(void*, unsigned long)>
c000be11:	83 c4 10             	add    esp,0x10
c000be14:	83 c4 0c             	add    esp,0xc
c000be17:	c3                   	ret    

c000be18 <int_handler>:
c000be18:	55                   	push   ebp
c000be19:	57                   	push   edi
c000be1a:	56                   	push   esi
c000be1b:	53                   	push   ebx
c000be1c:	83 ec 0c             	sub    esp,0xc
c000be1f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000be23:	80 3d 38 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024938,0x0
c000be2a:	74 0b                	je     c000be37 <int_handler+0x1f>
c000be2c:	fa                   	cli    
c000be2d:	f4                   	hlt    
c000be2e:	80 3d 38 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024938,0x0
c000be35:	75 f5                	jne    c000be2c <int_handler+0x14>
c000be37:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000be3a:	8d 46 e0             	lea    eax,[esi-0x20]
c000be3d:	83 f8 17             	cmp    eax,0x17
c000be40:	76 3e                	jbe    c000be80 <int_handler+0x68>
c000be42:	c1 e6 04             	shl    esi,0x4
c000be45:	31 db                	xor    ebx,ebx
c000be47:	8d ae c0 2f 02 c0    	lea    ebp,[esi-0x3ffdd040]
c000be4d:	81 c6 c0 1f 02 c0    	add    esi,0xc0021fc0
c000be53:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000be57:	85 c0                	test   eax,eax
c000be59:	74 13                	je     c000be6e <int_handler+0x56>
c000be5b:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000be5e:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000be62:	74 2a                	je     c000be8e <int_handler+0x76>
c000be64:	83 ec 08             	sub    esp,0x8
c000be67:	52                   	push   edx
c000be68:	57                   	push   edi
c000be69:	ff d0                	call   eax
c000be6b:	83 c4 10             	add    esp,0x10
c000be6e:	43                   	inc    ebx
c000be6f:	83 fb 04             	cmp    ebx,0x4
c000be72:	75 df                	jne    c000be53 <int_handler+0x3b>
c000be74:	83 c4 0c             	add    esp,0xc
c000be77:	31 c0                	xor    eax,eax
c000be79:	5b                   	pop    ebx
c000be7a:	31 d2                	xor    edx,edx
c000be7c:	5e                   	pop    esi
c000be7d:	5f                   	pop    edi
c000be7e:	5d                   	pop    ebp
c000be7f:	c3                   	ret    
c000be80:	83 ec 0c             	sub    esp,0xc
c000be83:	50                   	push   eax
c000be84:	e8 0a 9a 00 00       	call   c0015893 <HalEndOfInterrupt(int)>
c000be89:	83 c4 10             	add    esp,0x10
c000be8c:	eb b4                	jmp    c000be42 <int_handler+0x2a>
c000be8e:	83 ec 08             	sub    esp,0x8
c000be91:	52                   	push   edx
c000be92:	57                   	push   edi
c000be93:	ff d0                	call   eax
c000be95:	83 c4 10             	add    esp,0x10
c000be98:	83 c4 0c             	add    esp,0xc
c000be9b:	5b                   	pop    ebx
c000be9c:	5e                   	pop    esi
c000be9d:	5f                   	pop    edi
c000be9e:	5d                   	pop    ebp
c000be9f:	c3                   	ret    

c000bea0 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000bea0:	56                   	push   esi
c000bea1:	31 c0                	xor    eax,eax
c000bea3:	53                   	push   ebx
c000bea4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bea8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000beac:	89 ca                	mov    edx,ecx
c000beae:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000beb2:	c1 e2 04             	shl    edx,0x4
c000beb5:	83 bc 82 c0 2f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdd040],0x0
c000bebd:	74 15                	je     c000bed4 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000bebf:	40                   	inc    eax
c000bec0:	83 f8 04             	cmp    eax,0x4
c000bec3:	75 f0                	jne    c000beb5 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000bec5:	c7 44 24 0c e4 df 01 c0 	mov    DWORD PTR [esp+0xc],0xc001dfe4
c000becd:	5b                   	pop    ebx
c000bece:	5e                   	pop    esi
c000becf:	e9 db 42 00 00       	jmp    c00101af <KePanic(char const*)>
c000bed4:	8d 04 88             	lea    eax,[eax+ecx*4]
c000bed7:	89 1c 85 c0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd040],ebx
c000bede:	89 34 85 c0 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde040],esi
c000bee5:	5b                   	pop    ebx
c000bee6:	5e                   	pop    esi
c000bee7:	c3                   	ret    

c000bee8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bee8:	57                   	push   edi
c000bee9:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000beef:	56                   	push   esi
c000bef0:	53                   	push   ebx
c000bef1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bef5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bef9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000bf00:	74 5b                	je     c000bf5d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bf02:	89 c7                	mov    edi,eax
c000bf04:	84 c0                	test   al,al
c000bf06:	74 24                	je     c000bf2c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bf08:	83 fe 0f             	cmp    esi,0xf
c000bf0b:	0f 8f d9 00 00 00    	jg     c000bfea <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000bf11:	8a 86 20 f8 01 c0    	mov    al,BYTE PTR [esi-0x3ffe07e0]
c000bf17:	25 ff 00 00 00       	and    eax,0xff
c000bf1c:	66 8b bc 00 60 47 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdb8a0]
c000bf24:	89 c6                	mov    esi,eax
c000bf26:	66 d1 ef             	shr    di,1
c000bf29:	83 e7 01             	and    edi,0x1
c000bf2c:	83 ec 08             	sub    esp,0x8
c000bf2f:	a1 60 5b 02 c0       	mov    eax,ds:0xc0025b60
c000bf34:	31 db                	xor    ebx,ebx
c000bf36:	50                   	push   eax
c000bf37:	68 f1 df 01 c0       	push   0xc001dff1
c000bf3c:	e8 ec e5 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c000bf41:	83 c4 10             	add    esp,0x10
c000bf44:	a1 60 5b 02 c0       	mov    eax,ds:0xc0025b60
c000bf49:	85 c0                	test   eax,eax
c000bf4b:	7f 51                	jg     c000bf9e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000bf4d:	83 ec 0c             	sub    esp,0xc
c000bf50:	68 08 e0 01 c0       	push   0xc001e008
c000bf55:	e8 55 42 00 00       	call   c00101af <KePanic(char const*)>
c000bf5a:	83 c4 10             	add    esp,0x10
c000bf5d:	8d 4e 20             	lea    ecx,[esi+0x20]
c000bf60:	31 d2                	xor    edx,edx
c000bf62:	89 c8                	mov    eax,ecx
c000bf64:	c1 e0 04             	shl    eax,0x4
c000bf67:	8b 9c 90 c0 2f 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdd040]
c000bf6e:	85 db                	test   ebx,ebx
c000bf70:	0f 84 8b 00 00 00    	je     c000c001 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000bf76:	42                   	inc    edx
c000bf77:	83 fa 04             	cmp    edx,0x4
c000bf7a:	75 eb                	jne    c000bf67 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000bf7c:	83 ec 0c             	sub    esp,0xc
c000bf7f:	68 5c e0 01 c0       	push   0xc001e05c
c000bf84:	e8 26 42 00 00       	call   c00101af <KePanic(char const*)>
c000bf89:	83 c4 10             	add    esp,0x10
c000bf8c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bf91:	5b                   	pop    ebx
c000bf92:	5e                   	pop    esi
c000bf93:	5f                   	pop    edi
c000bf94:	c3                   	ret    
c000bf95:	43                   	inc    ebx
c000bf96:	39 1d 60 5b 02 c0    	cmp    DWORD PTR ds:0xc0025b60,ebx
c000bf9c:	7e af                	jle    c000bf4d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000bf9e:	83 ec 08             	sub    esp,0x8
c000bfa1:	8b 04 9d 80 5b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda480]
c000bfa8:	56                   	push   esi
c000bfa9:	50                   	push   eax
c000bfaa:	e8 d1 f5 00 00       	call   c001b580 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000bfaf:	83 c4 10             	add    esp,0x10
c000bfb2:	84 c0                	test   al,al
c000bfb4:	74 df                	je     c000bf95 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000bfb6:	81 e7 ff 00 00 00    	and    edi,0xff
c000bfbc:	50                   	push   eax
c000bfbd:	8d 46 20             	lea    eax,[esi+0x20]
c000bfc0:	57                   	push   edi
c000bfc1:	25 ff 00 00 00       	and    eax,0xff
c000bfc6:	6a 00                	push   0x0
c000bfc8:	50                   	push   eax
c000bfc9:	89 f0                	mov    eax,esi
c000bfcb:	6a 00                	push   0x0
c000bfcd:	25 ff 00 00 00       	and    eax,0xff
c000bfd2:	6a 00                	push   0x0
c000bfd4:	50                   	push   eax
c000bfd5:	8b 04 9d 80 5b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda480]
c000bfdc:	50                   	push   eax
c000bfdd:	e8 18 f7 00 00       	call   c001b6fa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000bfe2:	83 c4 20             	add    esp,0x20
c000bfe5:	e9 73 ff ff ff       	jmp    c000bf5d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bfea:	83 ec 0c             	sub    esp,0xc
c000bfed:	31 ff                	xor    edi,edi
c000bfef:	68 24 e0 01 c0       	push   0xc001e024
c000bff4:	e8 b6 41 00 00       	call   c00101af <KePanic(char const*)>
c000bff9:	83 c4 10             	add    esp,0x10
c000bffc:	e9 2b ff ff ff       	jmp    c000bf2c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c001:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c004:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c008:	89 14 85 c0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd040],edx
c000c00f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c013:	5b                   	pop    ebx
c000c014:	89 14 85 c0 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde040],edx
c000c01b:	89 f0                	mov    eax,esi
c000c01d:	5e                   	pop    esi
c000c01e:	5f                   	pop    edi
c000c01f:	c3                   	ret    

c000c020 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c020:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c024:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c028:	c1 e0 04             	shl    eax,0x4
c000c02b:	8d 50 10             	lea    edx,[eax+0x10]
c000c02e:	39 88 c0 2f 02 c0    	cmp    DWORD PTR [eax-0x3ffdd040],ecx
c000c034:	74 08                	je     c000c03e <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c036:	83 c0 04             	add    eax,0x4
c000c039:	39 d0                	cmp    eax,edx
c000c03b:	75 f1                	jne    c000c02e <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c03d:	c3                   	ret    
c000c03e:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c048:	c7 80 c0 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde040],0x0
c000c052:	eb e2                	jmp    c000c036 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c054 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c054:	53                   	push   ebx
c000c055:	83 ec 08             	sub    esp,0x8
c000c058:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c05c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c061:	74 0e                	je     c000c071 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c063:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000c068:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c06f:	75 37                	jne    c000c0a8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c071:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c075:	83 c0 20             	add    eax,0x20
c000c078:	c1 e0 04             	shl    eax,0x4
c000c07b:	8d 50 10             	lea    edx,[eax+0x10]
c000c07e:	39 98 c0 2f 02 c0    	cmp    DWORD PTR [eax-0x3ffdd040],ebx
c000c084:	74 0c                	je     c000c092 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c086:	83 c0 04             	add    eax,0x4
c000c089:	39 d0                	cmp    eax,edx
c000c08b:	75 f1                	jne    c000c07e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c08d:	83 c4 08             	add    esp,0x8
c000c090:	5b                   	pop    ebx
c000c091:	c3                   	ret    
c000c092:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c09c:	c7 80 c0 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde040],0x0
c000c0a6:	eb de                	jmp    c000c086 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c0a8:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c0ad:	7f 12                	jg     c000c0c1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c0af:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c0b3:	31 c0                	xor    eax,eax
c000c0b5:	8a 81 20 f8 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe07e0]
c000c0bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c0bf:	eb b0                	jmp    c000c071 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c0c1:	83 ec 0c             	sub    esp,0xc
c000c0c4:	68 15 e0 01 c0       	push   0xc001e015
c000c0c9:	e8 e1 40 00 00       	call   c00101af <KePanic(char const*)>
c000c0ce:	83 c4 10             	add    esp,0x10
c000c0d1:	eb 9e                	jmp    c000c071 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c0d3 <setupINTS()>:
c000c0d3:	31 c0                	xor    eax,eax
c000c0d5:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c0df:	c7 80 c0 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde040],0x0
c000c0e9:	c7 80 c4 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd03c],0x0
c000c0f3:	c7 80 c4 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde03c],0x0
c000c0fd:	c7 80 c8 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd038],0x0
c000c107:	c7 80 c8 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde038],0x0
c000c111:	c7 80 cc 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd034],0x0
c000c11b:	c7 80 cc 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde034],0x0
c000c125:	83 c0 10             	add    eax,0x10
c000c128:	3d 00 10 00 00       	cmp    eax,0x1000
c000c12d:	75 a6                	jne    c000c0d5 <setupINTS()+0x2>
c000c12f:	c3                   	ret    

c000c130 <convertLegacyIRQNumber(int)>:
c000c130:	83 ec 0c             	sub    esp,0xc
c000c133:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000c139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c13d:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c144:	74 0f                	je     c000c155 <convertLegacyIRQNumber(int)+0x25>
c000c146:	83 f8 0f             	cmp    eax,0xf
c000c149:	7f 0e                	jg     c000c159 <convertLegacyIRQNumber(int)+0x29>
c000c14b:	31 c9                	xor    ecx,ecx
c000c14d:	8a 88 20 f8 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe07e0]
c000c153:	89 c8                	mov    eax,ecx
c000c155:	83 c4 0c             	add    esp,0xc
c000c158:	c3                   	ret    
c000c159:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c15d:	83 ec 0c             	sub    esp,0xc
c000c160:	68 24 e0 01 c0       	push   0xc001e024
c000c165:	e8 45 40 00 00       	call   c00101af <KePanic(char const*)>
c000c16a:	83 c4 10             	add    esp,0x10
c000c16d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c171:	83 c4 0c             	add    esp,0xc
c000c174:	c3                   	ret    
c000c175:	90                   	nop

c000c176 <startGUI(void*)>:
c000c176:	55                   	push   ebp
c000c177:	89 e5                	mov    ebp,esp
c000c179:	53                   	push   ebx
c000c17a:	83 ec 04             	sub    esp,0x4
c000c17d:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c182:	48                   	dec    eax
c000c183:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c188:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c18d:	85 c0                	test   eax,eax
c000c18f:	75 01                	jne    c000c192 <startGUI(void*)+0x1c>
c000c191:	fb                   	sti    
c000c192:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c198:	83 ec 08             	sub    esp,0x8
c000c19b:	6a 01                	push   0x1
c000c19d:	68 81 e0 01 c0       	push   0xc001e081
c000c1a2:	e8 d2 6b 00 00       	call   c0012d79 <Thr::loadDLL(char const*, bool)>
c000c1a7:	83 c4 10             	add    esp,0x10
c000c1aa:	83 ec 08             	sub    esp,0x8
c000c1ad:	53                   	push   ebx
c000c1ae:	50                   	push   eax
c000c1af:	e8 f6 6d 00 00       	call   c0012faa <Thr::executeDLL(unsigned long, void*)>
c000c1b4:	83 c4 10             	add    esp,0x10
c000c1b7:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c1bd:	83 ec 08             	sub    esp,0x8
c000c1c0:	6a 01                	push   0x1
c000c1c2:	68 9b e0 01 c0       	push   0xc001e09b
c000c1c7:	e8 ad 6b 00 00       	call   c0012d79 <Thr::loadDLL(char const*, bool)>
c000c1cc:	83 c4 10             	add    esp,0x10
c000c1cf:	83 ec 08             	sub    esp,0x8
c000c1d2:	53                   	push   ebx
c000c1d3:	50                   	push   eax
c000c1d4:	e8 d1 6d 00 00       	call   c0012faa <Thr::executeDLL(unsigned long, void*)>
c000c1d9:	83 c4 10             	add    esp,0x10
c000c1dc:	90                   	nop
c000c1dd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c1e0:	c9                   	leave  
c000c1e1:	c3                   	ret    

c000c1e2 <startGUIVESA(void*)>:
c000c1e2:	55                   	push   ebp
c000c1e3:	89 e5                	mov    ebp,esp
c000c1e5:	53                   	push   ebx
c000c1e6:	83 ec 04             	sub    esp,0x4
c000c1e9:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c1ee:	48                   	dec    eax
c000c1ef:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c1f4:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c1f9:	85 c0                	test   eax,eax
c000c1fb:	75 01                	jne    c000c1fe <startGUIVESA(void*)+0x1c>
c000c1fd:	fb                   	sti    
c000c1fe:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c204:	83 ec 08             	sub    esp,0x8
c000c207:	6a 01                	push   0x1
c000c209:	68 b9 e0 01 c0       	push   0xc001e0b9
c000c20e:	e8 66 6b 00 00       	call   c0012d79 <Thr::loadDLL(char const*, bool)>
c000c213:	83 c4 10             	add    esp,0x10
c000c216:	83 ec 08             	sub    esp,0x8
c000c219:	53                   	push   ebx
c000c21a:	50                   	push   eax
c000c21b:	e8 8a 6d 00 00       	call   c0012faa <Thr::executeDLL(unsigned long, void*)>
c000c220:	83 c4 10             	add    esp,0x10
c000c223:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c229:	83 ec 08             	sub    esp,0x8
c000c22c:	6a 01                	push   0x1
c000c22e:	68 9b e0 01 c0       	push   0xc001e09b
c000c233:	e8 41 6b 00 00       	call   c0012d79 <Thr::loadDLL(char const*, bool)>
c000c238:	83 c4 10             	add    esp,0x10
c000c23b:	83 ec 08             	sub    esp,0x8
c000c23e:	53                   	push   ebx
c000c23f:	50                   	push   eax
c000c240:	e8 65 6d 00 00       	call   c0012faa <Thr::executeDLL(unsigned long, void*)>
c000c245:	83 c4 10             	add    esp,0x10
c000c248:	90                   	nop
c000c249:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c24c:	c9                   	leave  
c000c24d:	c3                   	ret    

c000c24e <sendKeyToTerminal(unsigned char)>:
c000c24e:	55                   	push   ebp
c000c24f:	89 e5                	mov    ebp,esp
c000c251:	83 ec 28             	sub    esp,0x28
c000c254:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c257:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c25a:	8b 15 04 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021f04
c000c260:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c263:	25 ff 00 00 00       	and    eax,0xff
c000c268:	83 ec 08             	sub    esp,0x8
c000c26b:	50                   	push   eax
c000c26c:	52                   	push   edx
c000c26d:	e8 d4 c7 ff ff       	call   c0008a46 <VgaText::receiveKey(unsigned char)>
c000c272:	83 c4 10             	add    esp,0x10
c000c275:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c279:	74 0a                	je     c000c285 <sendKeyToTerminal(unsigned char)+0x37>
c000c27b:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000c27f:	0f 85 8f 00 00 00    	jne    c000c314 <sendKeyToTerminal(unsigned char)+0xc6>
c000c285:	fa                   	cli    
c000c286:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c28b:	40                   	inc    eax
c000c28c:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c291:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000c296:	40                   	inc    eax
c000c297:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c000c29c:	a1 c0 3f 02 c0       	mov    eax,ds:0xc0023fc0
c000c2a1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c2a4:	c7 05 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023fc0,0x0
c000c2ae:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c2b2:	74 1f                	je     c000c2d3 <sendKeyToTerminal(unsigned char)+0x85>
c000c2b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c2b7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c2ba:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c2bd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c2c0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c2c3:	83 ec 0c             	sub    esp,0xc
c000c2c6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c2c9:	e8 9a 79 00 00       	call   c0013c68 <unblockTask(ThreadControlBlock*)>
c000c2ce:	83 c4 10             	add    esp,0x10
c000c2d1:	eb db                	jmp    c000c2ae <sendKeyToTerminal(unsigned char)+0x60>
c000c2d3:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000c2d8:	48                   	dec    eax
c000c2d9:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c000c2de:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000c2e3:	85 c0                	test   eax,eax
c000c2e5:	75 18                	jne    c000c2ff <sendKeyToTerminal(unsigned char)+0xb1>
c000c2e7:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c000c2ec:	85 c0                	test   eax,eax
c000c2ee:	74 0f                	je     c000c2ff <sendKeyToTerminal(unsigned char)+0xb1>
c000c2f0:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c000c2fa:	e8 a5 74 00 00       	call   c00137a4 <schedule()>
c000c2ff:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c304:	48                   	dec    eax
c000c305:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c30a:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c30f:	85 c0                	test   eax,eax
c000c311:	75 01                	jne    c000c314 <sendKeyToTerminal(unsigned char)+0xc6>
c000c313:	fb                   	sti    
c000c314:	90                   	nop
c000c315:	c9                   	leave  
c000c316:	c3                   	ret    

c000c317 <sendKeyboardToken(KeyboardToken)>:
c000c317:	55                   	push   ebp
c000c318:	89 e5                	mov    ebp,esp
c000c31a:	83 ec 18             	sub    esp,0x18
c000c31d:	e8 dd 3e 00 00       	call   c00101ff <Krnl::userIOReceived()>
c000c322:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c325:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c328:	25 ff ff 00 00       	and    eax,0xffff
c000c32d:	83 f2 01             	xor    edx,0x1
c000c330:	88 90 e0 3f 02 c0    	mov    BYTE PTR [eax-0x3ffdc020],dl
c000c336:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000c33b:	85 c0                	test   eax,eax
c000c33d:	74 24                	je     c000c363 <sendKeyboardToken(KeyboardToken)+0x4c>
c000c33f:	8b 0d c8 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fc8
c000c345:	83 ec 04             	sub    esp,0x4
c000c348:	68 e0 3f 02 c0       	push   0xc0023fe0
c000c34d:	83 ec 08             	sub    esp,0x8
c000c350:	89 e2                	mov    edx,esp
c000c352:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c355:	89 02                	mov    DWORD PTR [edx],eax
c000c357:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c35a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c35e:	ff d1                	call   ecx
c000c360:	83 c4 10             	add    esp,0x10
c000c363:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c367:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c36a:	a0 e8 43 02 c0       	mov    al,ds:0xc00243e8
c000c36f:	38 c2                	cmp    dl,al
c000c371:	74 1e                	je     c000c391 <sendKeyboardToken(KeyboardToken)+0x7a>
c000c373:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c376:	a2 e8 43 02 c0       	mov    ds:0xc00243e8,al
c000c37b:	a0 e8 43 02 c0       	mov    al,ds:0xc00243e8
c000c380:	25 ff 00 00 00       	and    eax,0xff
c000c385:	83 ec 0c             	sub    esp,0xc
c000c388:	50                   	push   eax
c000c389:	e8 0a be ff ff       	call   c0008198 <setTerminalScrollLock(bool)>
c000c38e:	83 c4 10             	add    esp,0x10
c000c391:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c394:	84 c0                	test   al,al
c000c396:	0f 84 ae 00 00 00    	je     c000c44a <sendKeyboardToken(KeyboardToken)+0x133>
c000c39c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c39f:	66 3d 10 03          	cmp    ax,0x310
c000c3a3:	75 06                	jne    c000c3ab <sendKeyboardToken(KeyboardToken)+0x94>
c000c3a5:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c3ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3ae:	66 3d 11 03          	cmp    ax,0x311
c000c3b2:	75 06                	jne    c000c3ba <sendKeyboardToken(KeyboardToken)+0xa3>
c000c3b4:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c3ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3bd:	66 3d 12 03          	cmp    ax,0x312
c000c3c1:	75 06                	jne    c000c3c9 <sendKeyboardToken(KeyboardToken)+0xb2>
c000c3c3:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c3c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3cc:	66 3d 13 03          	cmp    ax,0x313
c000c3d0:	75 06                	jne    c000c3d8 <sendKeyboardToken(KeyboardToken)+0xc1>
c000c3d2:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c3d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3db:	66 3d 14 03          	cmp    ax,0x314
c000c3df:	75 06                	jne    c000c3e7 <sendKeyboardToken(KeyboardToken)+0xd0>
c000c3e1:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c3e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3ea:	66 3d 15 03          	cmp    ax,0x315
c000c3ee:	75 06                	jne    c000c3f6 <sendKeyboardToken(KeyboardToken)+0xdf>
c000c3f0:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c3f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3f9:	66 3d 16 03          	cmp    ax,0x316
c000c3fd:	75 06                	jne    c000c405 <sendKeyboardToken(KeyboardToken)+0xee>
c000c3ff:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c405:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c408:	66 3d 17 03          	cmp    ax,0x317
c000c40c:	75 06                	jne    c000c414 <sendKeyboardToken(KeyboardToken)+0xfd>
c000c40e:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c414:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c417:	66 3d 18 03          	cmp    ax,0x318
c000c41b:	75 06                	jne    c000c423 <sendKeyboardToken(KeyboardToken)+0x10c>
c000c41d:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c423:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c426:	66 3d 19 03          	cmp    ax,0x319
c000c42a:	75 06                	jne    c000c432 <sendKeyboardToken(KeyboardToken)+0x11b>
c000c42c:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c432:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c435:	66 3d 1a 03          	cmp    ax,0x31a
c000c439:	0f 85 c9 00 00 00    	jne    c000c508 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c43f:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c445:	e9 be 00 00 00       	jmp    c000c508 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c44a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c44d:	66 3d 10 03          	cmp    ax,0x310
c000c451:	75 0a                	jne    c000c45d <sendKeyboardToken(KeyboardToken)+0x146>
c000c453:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c459:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c45d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c460:	66 3d 11 03          	cmp    ax,0x311
c000c464:	75 0a                	jne    c000c470 <sendKeyboardToken(KeyboardToken)+0x159>
c000c466:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c46c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c470:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c473:	66 3d 12 03          	cmp    ax,0x312
c000c477:	75 0a                	jne    c000c483 <sendKeyboardToken(KeyboardToken)+0x16c>
c000c479:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c47f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c483:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c486:	66 3d 13 03          	cmp    ax,0x313
c000c48a:	75 0a                	jne    c000c496 <sendKeyboardToken(KeyboardToken)+0x17f>
c000c48c:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c492:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c496:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c499:	66 3d 14 03          	cmp    ax,0x314
c000c49d:	75 0a                	jne    c000c4a9 <sendKeyboardToken(KeyboardToken)+0x192>
c000c49f:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c4a5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4ac:	66 3d 15 03          	cmp    ax,0x315
c000c4b0:	75 0a                	jne    c000c4bc <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c4b2:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c4b8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4bf:	66 3d 16 03          	cmp    ax,0x316
c000c4c3:	75 0a                	jne    c000c4cf <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c4c5:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c4cb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4d2:	66 3d 17 03          	cmp    ax,0x317
c000c4d6:	75 0a                	jne    c000c4e2 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c4d8:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c4de:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4e5:	66 3d 18 03          	cmp    ax,0x318
c000c4e9:	75 0a                	jne    c000c4f5 <sendKeyboardToken(KeyboardToken)+0x1de>
c000c4eb:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c4f1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4f8:	66 3d 19 03          	cmp    ax,0x319
c000c4fc:	75 0a                	jne    c000c508 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c4fe:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c504:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c508:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c50b:	66 3d 00 02          	cmp    ax,0x200
c000c50f:	75 2c                	jne    c000c53d <sendKeyboardToken(KeyboardToken)+0x226>
c000c511:	a0 e0 43 02 c0       	mov    al,ds:0xc00243e0
c000c516:	83 f0 01             	xor    eax,0x1
c000c519:	84 c0                	test   al,al
c000c51b:	74 20                	je     c000c53d <sendKeyboardToken(KeyboardToken)+0x226>
c000c51d:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000c522:	6a 01                	push   0x1
c000c524:	6a 00                	push   0x0
c000c526:	68 76 c1 00 c0       	push   0xc000c176
c000c52b:	50                   	push   eax
c000c52c:	e8 53 70 00 00       	call   c0013584 <Process::createThread(void (*)(void*), void*, int)>
c000c531:	83 c4 10             	add    esp,0x10
c000c534:	c6 05 e0 43 02 c0 01 	mov    BYTE PTR ds:0xc00243e0,0x1
c000c53b:	eb 33                	jmp    c000c570 <sendKeyboardToken(KeyboardToken)+0x259>
c000c53d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c540:	66 3d 01 02          	cmp    ax,0x201
c000c544:	75 2a                	jne    c000c570 <sendKeyboardToken(KeyboardToken)+0x259>
c000c546:	a0 e0 43 02 c0       	mov    al,ds:0xc00243e0
c000c54b:	83 f0 01             	xor    eax,0x1
c000c54e:	84 c0                	test   al,al
c000c550:	74 1e                	je     c000c570 <sendKeyboardToken(KeyboardToken)+0x259>
c000c552:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000c557:	6a 01                	push   0x1
c000c559:	6a 00                	push   0x0
c000c55b:	68 e2 c1 00 c0       	push   0xc000c1e2
c000c560:	50                   	push   eax
c000c561:	e8 1e 70 00 00       	call   c0013584 <Process::createThread(void (*)(void*), void*, int)>
c000c566:	83 c4 10             	add    esp,0x10
c000c569:	c6 05 e0 43 02 c0 01 	mov    BYTE PTR ds:0xc00243e0,0x1
c000c570:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c573:	66 3d 1d 03          	cmp    ax,0x31d
c000c577:	75 06                	jne    c000c57f <sendKeyboardToken(KeyboardToken)+0x268>
c000c579:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c57f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c582:	66 3d 1c 03          	cmp    ax,0x31c
c000c586:	75 06                	jne    c000c58e <sendKeyboardToken(KeyboardToken)+0x277>
c000c588:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c58e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c591:	66 3d 1b 03          	cmp    ax,0x31b
c000c595:	75 06                	jne    c000c59d <sendKeyboardToken(KeyboardToken)+0x286>
c000c597:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c59d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5a0:	66 3d 1e 03          	cmp    ax,0x31e
c000c5a4:	75 06                	jne    c000c5ac <sendKeyboardToken(KeyboardToken)+0x295>
c000c5a6:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c5ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5af:	66 3d 1f 03          	cmp    ax,0x31f
c000c5b3:	75 06                	jne    c000c5bb <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c5b5:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c5bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5be:	66 3d 1a 03          	cmp    ax,0x31a
c000c5c2:	75 06                	jne    c000c5ca <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c5c4:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c5ca:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c5ce:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c5d1:	83 f0 01             	xor    eax,0x1
c000c5d4:	84 c0                	test   al,al
c000c5d6:	74 7b                	je     c000c653 <sendKeyboardToken(KeyboardToken)+0x33c>
c000c5d8:	a0 e1 40 02 c0       	mov    al,ds:0xc00240e1
c000c5dd:	84 c0                	test   al,al
c000c5df:	74 43                	je     c000c624 <sendKeyboardToken(KeyboardToken)+0x30d>
c000c5e1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c5e5:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c5e9:	74 2d                	je     c000c618 <sendKeyboardToken(KeyboardToken)+0x301>
c000c5eb:	8b 15 e4 43 02 c0    	mov    edx,DWORD PTR ds:0xc00243e4
c000c5f1:	89 d0                	mov    eax,edx
c000c5f3:	c1 e0 02             	shl    eax,0x2
c000c5f6:	01 d0                	add    eax,edx
c000c5f8:	01 c0                	add    eax,eax
c000c5fa:	a3 e4 43 02 c0       	mov    ds:0xc00243e4,eax
c000c5ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c602:	25 ff ff 00 00       	and    eax,0xffff
c000c607:	8d 50 d0             	lea    edx,[eax-0x30]
c000c60a:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c60f:	01 d0                	add    eax,edx
c000c611:	a3 e4 43 02 c0       	mov    ds:0xc00243e4,eax
c000c616:	eb 71                	jmp    c000c689 <sendKeyboardToken(KeyboardToken)+0x372>
c000c618:	c7 05 e4 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00243e4,0x0
c000c622:	eb 65                	jmp    c000c689 <sendKeyboardToken(KeyboardToken)+0x372>
c000c624:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c629:	85 c0                	test   eax,eax
c000c62b:	74 1a                	je     c000c647 <sendKeyboardToken(KeyboardToken)+0x330>
c000c62d:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c632:	25 ff 00 00 00       	and    eax,0xff
c000c637:	83 ec 0c             	sub    esp,0xc
c000c63a:	50                   	push   eax
c000c63b:	e8 0e fc ff ff       	call   c000c24e <sendKeyToTerminal(unsigned char)>
c000c640:	83 c4 10             	add    esp,0x10
c000c643:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c647:	c7 05 e4 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00243e4,0x0
c000c651:	eb 36                	jmp    c000c689 <sendKeyboardToken(KeyboardToken)+0x372>
c000c653:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c656:	66 3d 01 01          	cmp    ax,0x101
c000c65a:	75 2d                	jne    c000c689 <sendKeyboardToken(KeyboardToken)+0x372>
c000c65c:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c661:	85 c0                	test   eax,eax
c000c663:	74 1a                	je     c000c67f <sendKeyboardToken(KeyboardToken)+0x368>
c000c665:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c66a:	25 ff 00 00 00       	and    eax,0xff
c000c66f:	83 ec 0c             	sub    esp,0xc
c000c672:	50                   	push   eax
c000c673:	e8 d6 fb ff ff       	call   c000c24e <sendKeyToTerminal(unsigned char)>
c000c678:	83 c4 10             	add    esp,0x10
c000c67b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c67f:	c7 05 e4 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00243e4,0x0
c000c689:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c68c:	83 f0 01             	xor    eax,0x1
c000c68f:	84 c0                	test   al,al
c000c691:	74 4e                	je     c000c6e1 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c693:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c696:	83 f0 01             	xor    eax,0x1
c000c699:	84 c0                	test   al,al
c000c69b:	74 44                	je     c000c6e1 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c69d:	a0 e0 40 02 c0       	mov    al,ds:0xc00240e0
c000c6a2:	83 f0 01             	xor    eax,0x1
c000c6a5:	84 c0                	test   al,al
c000c6a7:	74 38                	je     c000c6e1 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c6a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6ac:	66 83 f8 1f          	cmp    ax,0x1f
c000c6b0:	76 09                	jbe    c000c6bb <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c6b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6b5:	66 83 f8 7e          	cmp    ax,0x7e
c000c6b9:	76 12                	jbe    c000c6cd <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c6bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6be:	66 83 f8 0a          	cmp    ax,0xa
c000c6c2:	74 09                	je     c000c6cd <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c6c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6c7:	66 83 f8 08          	cmp    ax,0x8
c000c6cb:	75 14                	jne    c000c6e1 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c6cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6d0:	25 ff 00 00 00       	and    eax,0xff
c000c6d5:	83 ec 0c             	sub    esp,0xc
c000c6d8:	50                   	push   eax
c000c6d9:	e8 70 fb ff ff       	call   c000c24e <sendKeyToTerminal(unsigned char)>
c000c6de:	83 c4 10             	add    esp,0x10
c000c6e1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c6e4:	83 f0 01             	xor    eax,0x1
c000c6e7:	84 c0                	test   al,al
c000c6e9:	74 51                	je     c000c73c <sendKeyboardToken(KeyboardToken)+0x425>
c000c6eb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c6ee:	83 f0 01             	xor    eax,0x1
c000c6f1:	84 c0                	test   al,al
c000c6f3:	74 47                	je     c000c73c <sendKeyboardToken(KeyboardToken)+0x425>
c000c6f5:	a0 e0 40 02 c0       	mov    al,ds:0xc00240e0
c000c6fa:	84 c0                	test   al,al
c000c6fc:	74 3e                	je     c000c73c <sendKeyboardToken(KeyboardToken)+0x425>
c000c6fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c701:	66 83 f8 3f          	cmp    ax,0x3f
c000c705:	76 35                	jbe    c000c73c <sendKeyboardToken(KeyboardToken)+0x425>
c000c707:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c70a:	66 83 f8 7f          	cmp    ax,0x7f
c000c70e:	77 2c                	ja     c000c73c <sendKeyboardToken(KeyboardToken)+0x425>
c000c710:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c713:	88 c2                	mov    dl,al
c000c715:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c718:	66 83 f8 5f          	cmp    ax,0x5f
c000c71c:	76 04                	jbe    c000c722 <sendKeyboardToken(KeyboardToken)+0x40b>
c000c71e:	b0 20                	mov    al,0x20
c000c720:	eb 02                	jmp    c000c724 <sendKeyboardToken(KeyboardToken)+0x40d>
c000c722:	b0 00                	mov    al,0x0
c000c724:	29 c2                	sub    edx,eax
c000c726:	88 d0                	mov    al,dl
c000c728:	83 e8 40             	sub    eax,0x40
c000c72b:	25 ff 00 00 00       	and    eax,0xff
c000c730:	83 ec 0c             	sub    esp,0xc
c000c733:	50                   	push   eax
c000c734:	e8 15 fb ff ff       	call   c000c24e <sendKeyToTerminal(unsigned char)>
c000c739:	83 c4 10             	add    esp,0x10
c000c73c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c73f:	66 3d 00 03          	cmp    ax,0x300
c000c743:	75 0f                	jne    c000c754 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c745:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c748:	83 f0 01             	xor    eax,0x1
c000c74b:	84 c0                	test   al,al
c000c74d:	74 05                	je     c000c754 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c74f:	e8 45 ba ff ff       	call   c0008199 <doTerminalCycle()>
c000c754:	90                   	nop
c000c755:	c9                   	leave  
c000c756:	c3                   	ret    

c000c757 <clearInternalKeybuffer(VgaText*)>:
c000c757:	55                   	push   ebp
c000c758:	89 e5                	mov    ebp,esp
c000c75a:	83 ec 08             	sub    esp,0x8
c000c75d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c760:	05 b2 00 00 00       	add    eax,0xb2
c000c765:	83 ec 0c             	sub    esp,0xc
c000c768:	50                   	push   eax
c000c769:	e8 d2 3d ff ff       	call   c0000540 <strlen>
c000c76e:	83 c4 10             	add    esp,0x10
c000c771:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c774:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c77a:	83 ec 04             	sub    esp,0x4
c000c77d:	50                   	push   eax
c000c77e:	6a 00                	push   0x0
c000c780:	52                   	push   edx
c000c781:	e8 4a 3d ff ff       	call   c00004d0 <memset>
c000c786:	83 c4 10             	add    esp,0x10
c000c789:	90                   	nop
c000c78a:	c9                   	leave  
c000c78b:	c3                   	ret    

c000c78c <readKeyboard(VgaText*, char*, unsigned long)>:
c000c78c:	55                   	push   ebp
c000c78d:	89 e5                	mov    ebp,esp
c000c78f:	83 ec 18             	sub    esp,0x18
c000c792:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000c797:	85 c0                	test   eax,eax
c000c799:	74 2a                	je     c000c7c5 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c79b:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c7a1:	8b 0d c8 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fc8
c000c7a7:	83 ec 04             	sub    esp,0x4
c000c7aa:	68 e0 3f 02 c0       	push   0xc0023fe0
c000c7af:	83 ec 08             	sub    esp,0x8
c000c7b2:	89 e2                	mov    edx,esp
c000c7b4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c7b7:	89 02                	mov    DWORD PTR [edx],eax
c000c7b9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c7bc:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c7c0:	ff d1                	call   ecx
c000c7c2:	83 c4 10             	add    esp,0x10
c000c7c5:	fb                   	sti    
c000c7c6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c7cd:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c7d1:	0f 84 db 00 00 00    	je     c000c8b2 <readKeyboard(VgaText*, char*, unsigned long)+0x126>
c000c7d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7da:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c7e0:	84 c0                	test   al,al
c000c7e2:	75 28                	jne    c000c80c <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c7e4:	fa                   	cli    
c000c7e5:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c7ea:	40                   	inc    eax
c000c7eb:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c7f0:	e8 af 6f 00 00       	call   c00137a4 <schedule()>
c000c7f5:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c7fa:	48                   	dec    eax
c000c7fb:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c800:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c805:	85 c0                	test   eax,eax
c000c807:	75 ce                	jne    c000c7d7 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c809:	fb                   	sti    
c000c80a:	eb cb                	jmp    c000c7d7 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c80c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c80f:	8d 50 01             	lea    edx,[eax+0x1]
c000c812:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c815:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c818:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000c81e:	88 10                	mov    BYTE PTR [eax],dl
c000c820:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c823:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c829:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c82c:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c830:	75 2e                	jne    c000c860 <readKeyboard(VgaText*, char*, unsigned long)+0xd4>
c000c832:	83 ec 0c             	sub    esp,0xc
c000c835:	68 d4 e0 01 c0       	push   0xc001e0d4
c000c83a:	e8 ee dc ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c000c83f:	83 c4 10             	add    esp,0x10
c000c842:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c847:	8b 00                	mov    eax,DWORD PTR [eax]
c000c849:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c84c:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000c852:	83 ec 08             	sub    esp,0x8
c000c855:	6a 02                	push   0x2
c000c857:	50                   	push   eax
c000c858:	e8 3e 3d 00 00       	call   c001059b <KeRaiseSignal(SigHandlerBlock*, int)>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c863:	05 b2 00 00 00       	add    eax,0xb2
c000c868:	83 ec 0c             	sub    esp,0xc
c000c86b:	50                   	push   eax
c000c86c:	e8 cf 3c ff ff       	call   c0000540 <strlen>
c000c871:	83 c4 10             	add    esp,0x10
c000c874:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c877:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c87d:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c880:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c883:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c889:	83 ec 04             	sub    esp,0x4
c000c88c:	50                   	push   eax
c000c88d:	51                   	push   ecx
c000c88e:	52                   	push   edx
c000c88f:	e8 4c 3b ff ff       	call   c00003e0 <memmove>
c000c894:	83 c4 10             	add    esp,0x10
c000c897:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c89a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c89d:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c8a1:	74 0a                	je     c000c8ad <readKeyboard(VgaText*, char*, unsigned long)+0x121>
c000c8a3:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c8a7:	0f 85 20 ff ff ff    	jne    c000c7cd <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c8ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c8b0:	eb 03                	jmp    c000c8b5 <readKeyboard(VgaText*, char*, unsigned long)+0x129>
c000c8b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c8b5:	c9                   	leave  
c000c8b6:	c3                   	ret    
c000c8b7:	90                   	nop

c000c8b8 <Keyboard::Keyboard(char const*)>:
c000c8b8:	83 ec 0c             	sub    esp,0xc
c000c8bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8bf:	83 ec 08             	sub    esp,0x8
c000c8c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8c6:	50                   	push   eax
c000c8c7:	e8 38 f2 ff ff       	call   c000bb04 <Device::Device(char const*)>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	ba ec e0 01 c0       	mov    edx,0xc001e0ec
c000c8d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8d8:	89 10                	mov    DWORD PTR [eax],edx
c000c8da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8de:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000c8e8:	c6 05 c4 3f 02 c0 01 	mov    BYTE PTR ds:0xc0023fc4,0x1
c000c8ef:	90                   	nop
c000c8f0:	83 c4 0c             	add    esp,0xc
c000c8f3:	c3                   	ret    

c000c8f4 <Keyboard::~Keyboard()>:
c000c8f4:	83 ec 0c             	sub    esp,0xc
c000c8f7:	ba ec e0 01 c0       	mov    edx,0xc001e0ec
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	89 10                	mov    DWORD PTR [eax],edx
c000c902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c906:	83 ec 0c             	sub    esp,0xc
c000c909:	50                   	push   eax
c000c90a:	e8 5f ef ff ff       	call   c000b86e <Device::~Device()>
c000c90f:	83 c4 10             	add    esp,0x10
c000c912:	90                   	nop
c000c913:	83 c4 0c             	add    esp,0xc
c000c916:	c3                   	ret    
c000c917:	90                   	nop

c000c918 <Keyboard::~Keyboard()>:
c000c918:	83 ec 0c             	sub    esp,0xc
c000c91b:	83 ec 0c             	sub    esp,0xc
c000c91e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c922:	e8 cd ff ff ff       	call   c000c8f4 <Keyboard::~Keyboard()>
c000c927:	83 c4 10             	add    esp,0x10
c000c92a:	83 ec 08             	sub    esp,0x8
c000c92d:	68 5c 01 00 00       	push   0x15c
c000c932:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c936:	e8 fc da ff ff       	call   c000a437 <operator delete(void*, unsigned long)>
c000c93b:	83 c4 10             	add    esp,0x10
c000c93e:	83 c4 0c             	add    esp,0xc
c000c941:	c3                   	ret    

c000c942 <LogicalDisk::close(int, int, void*)>:
c000c942:	83 c8 ff             	or     eax,0xffffffff
c000c945:	c3                   	ret    

c000c946 <LogicalDisk::~LogicalDisk()>:
c000c946:	83 ec 0c             	sub    esp,0xc
c000c949:	ba 64 e1 01 c0       	mov    edx,0xc001e164
c000c94e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c952:	89 10                	mov    DWORD PTR [eax],edx
c000c954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c958:	83 ec 0c             	sub    esp,0xc
c000c95b:	50                   	push   eax
c000c95c:	e8 0d ef ff ff       	call   c000b86e <Device::~Device()>
c000c961:	83 c4 10             	add    esp,0x10
c000c964:	90                   	nop
c000c965:	83 c4 0c             	add    esp,0xc
c000c968:	c3                   	ret    
c000c969:	90                   	nop

c000c96a <LogicalDisk::~LogicalDisk()>:
c000c96a:	83 ec 0c             	sub    esp,0xc
c000c96d:	83 ec 0c             	sub    esp,0xc
c000c970:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c974:	e8 cd ff ff ff       	call   c000c946 <LogicalDisk::~LogicalDisk()>
c000c979:	83 c4 10             	add    esp,0x10
c000c97c:	83 ec 08             	sub    esp,0x8
c000c97f:	68 74 01 00 00       	push   0x174
c000c984:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c988:	e8 aa da ff ff       	call   c000a437 <operator delete(void*, unsigned long)>
c000c98d:	83 c4 10             	add    esp,0x10
c000c990:	83 c4 0c             	add    esp,0xc
c000c993:	c3                   	ret    

c000c994 <LogicalDisk::open(int, int, void*)>:
c000c994:	83 ec 18             	sub    esp,0x18
c000c997:	68 18 e1 01 c0       	push   0xc001e118
c000c99c:	e8 0e 38 00 00       	call   c00101af <KePanic(char const*)>
c000c9a1:	83 c8 ff             	or     eax,0xffffffff
c000c9a4:	83 c4 1c             	add    esp,0x1c
c000c9a7:	c3                   	ret    

c000c9a8 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000c9a8:	53                   	push   ebx
c000c9a9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c9ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c9b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c9b5:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000c9bb:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000c9c1:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000c9c7:	77 10                	ja     c000c9d9 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000c9c9:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000c9cf:	89 d3                	mov    ebx,edx
c000c9d1:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000c9d7:	72 05                	jb     c000c9de <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000c9d9:	83 c8 ff             	or     eax,0xffffffff
c000c9dc:	89 c2                	mov    edx,eax
c000c9de:	5b                   	pop    ebx
c000c9df:	c3                   	ret    

c000c9e0 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000c9e0:	56                   	push   esi
c000c9e1:	83 c8 ff             	or     eax,0xffffffff
c000c9e4:	53                   	push   ebx
c000c9e5:	89 c2                	mov    edx,eax
c000c9e7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c9eb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c9ef:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c9f3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000c9f9:	77 27                	ja     c000ca22 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000c9fb:	89 d8                	mov    eax,ebx
c000c9fd:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000ca03:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000ca09:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ca0e:	89 c2                	mov    edx,eax
c000ca10:	73 10                	jae    c000ca22 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ca12:	89 c8                	mov    eax,ecx
c000ca14:	89 da                	mov    edx,ebx
c000ca16:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000ca1c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000ca22:	5b                   	pop    ebx
c000ca23:	5e                   	pop    esi
c000ca24:	c3                   	ret    
c000ca25:	90                   	nop

c000ca26 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ca26:	83 ec 1c             	sub    esp,0x1c
c000ca29:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca2d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ca39:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ca3d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ca40:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ca44:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ca48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca4c:	83 ec 08             	sub    esp,0x8
c000ca4f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca53:	50                   	push   eax
c000ca54:	e8 ab f0 ff ff       	call   c000bb04 <Device::Device(char const*)>
c000ca59:	83 c4 10             	add    esp,0x10
c000ca5c:	ba 64 e1 01 c0       	mov    edx,0xc001e164
c000ca61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca65:	89 10                	mov    DWORD PTR [eax],edx
c000ca67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca6b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ca72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca76:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ca7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca81:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000ca8b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ca8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ca97:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000ca9d:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000caa3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000caa7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000caaa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000caae:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000cab4:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000caba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cabe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cac2:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000cac8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cacc:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cad6:	90                   	nop
c000cad7:	83 c4 1c             	add    esp,0x1c
c000cada:	c3                   	ret    
c000cadb:	90                   	nop

c000cadc <LogicalDisk::assignDriveLetter()>:
c000cadc:	55                   	push   ebp
c000cadd:	57                   	push   edi
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	83 ec 14             	sub    esp,0x14
c000cae3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cae7:	8b 3d 00 44 02 c0    	mov    edi,DWORD PTR ds:0xc0024400
c000caed:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000caf3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000caf7:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000cafd:	8b 3d 04 44 02 c0    	mov    edi,DWORD PTR ds:0xc0024404
c000cb03:	3c 01                	cmp    al,0x1
c000cb05:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000cb09:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000cb0d:	19 c0                	sbb    eax,eax
c000cb0f:	83 e0 02             	and    eax,0x2
c000cb12:	83 c0 41             	add    eax,0x41
c000cb15:	0f be e8             	movsx  ebp,al
c000cb18:	3c 43                	cmp    al,0x43
c000cb1a:	75 10                	jne    c000cb2c <LogicalDisk::assignDriveLetter()+0x50>
c000cb1c:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000cb23:	75 5d                	jne    c000cb82 <LogicalDisk::assignDriveLetter()+0xa6>
c000cb25:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000cb2a:	75 56                	jne    c000cb82 <LogicalDisk::assignDriveLetter()+0xa6>
c000cb2c:	8d 75 bf             	lea    esi,[ebp-0x41]
c000cb2f:	ba 01 00 00 00       	mov    edx,0x1
c000cb34:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000cb38:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000cb3c:	d3 e2                	shl    edx,cl
c000cb3e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cb42:	89 d7                	mov    edi,edx
c000cb44:	89 d6                	mov    esi,edx
c000cb46:	c1 ff 1f             	sar    edi,0x1f
c000cb49:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000cb4d:	21 f9                	and    ecx,edi
c000cb4f:	09 d1                	or     ecx,edx
c000cb51:	75 2f                	jne    c000cb82 <LogicalDisk::assignDriveLetter()+0xa6>
c000cb53:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000cb57:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cb5b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000cb61:	09 f2                	or     edx,esi
c000cb63:	89 15 00 44 02 c0    	mov    DWORD PTR ds:0xc0024400,edx
c000cb69:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb6d:	09 fa                	or     edx,edi
c000cb6f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000cb73:	89 15 04 44 02 c0    	mov    DWORD PTR ds:0xc0024404,edx
c000cb79:	89 1c bd 20 44 02 c0 	mov    DWORD PTR [edi*4-0x3ffdbbe0],ebx
c000cb80:	eb 08                	jmp    c000cb8a <LogicalDisk::assignDriveLetter()+0xae>
c000cb82:	45                   	inc    ebp
c000cb83:	40                   	inc    eax
c000cb84:	3c 5b                	cmp    al,0x5b
c000cb86:	75 90                	jne    c000cb18 <LogicalDisk::assignDriveLetter()+0x3c>
c000cb88:	31 c0                	xor    eax,eax
c000cb8a:	83 c4 14             	add    esp,0x14
c000cb8d:	5b                   	pop    ebx
c000cb8e:	5e                   	pop    esi
c000cb8f:	5f                   	pop    edi
c000cb90:	5d                   	pop    ebp
c000cb91:	c3                   	ret    

c000cb92 <LogicalDisk::mount()>:
c000cb92:	56                   	push   esi
c000cb93:	53                   	push   ebx
c000cb94:	53                   	push   ebx
c000cb95:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cb99:	8b 1d b4 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb4
c000cb9f:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000cba9:	85 db                	test   ebx,ebx
c000cbab:	74 27                	je     c000cbd4 <LogicalDisk::mount()+0x42>
c000cbad:	51                   	push   ecx
c000cbae:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000cbb5:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cbb7:	83 e8 41             	sub    eax,0x41
c000cbba:	50                   	push   eax
c000cbbb:	56                   	push   esi
c000cbbc:	53                   	push   ebx
c000cbbd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cbc0:	83 c4 10             	add    esp,0x10
c000cbc3:	84 c0                	test   al,al
c000cbc5:	74 08                	je     c000cbcf <LogicalDisk::mount()+0x3d>
c000cbc7:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000cbcd:	eb 07                	jmp    c000cbd6 <LogicalDisk::mount()+0x44>
c000cbcf:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000cbd2:	eb d5                	jmp    c000cba9 <LogicalDisk::mount()+0x17>
c000cbd4:	31 c0                	xor    eax,eax
c000cbd6:	5a                   	pop    edx
c000cbd7:	5b                   	pop    ebx
c000cbd8:	5e                   	pop    esi
c000cbd9:	c3                   	ret    

c000cbda <LogicalDisk::unmount()>:
c000cbda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cbde:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cbe8:	c3                   	ret    
c000cbe9:	90                   	nop

c000cbea <LogicalDisk::eject()>:
c000cbea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cbee:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000cbf4:	8b 10                	mov    edx,DWORD PTR [eax]
c000cbf6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cbfa:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000cbfd:	90                   	nop

c000cbfe <LogicalDisk::unassignDriveLetter()>:
c000cbfe:	57                   	push   edi
c000cbff:	56                   	push   esi
c000cc00:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cc04:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000cc0b:	84 c9                	test   cl,cl
c000cc0d:	75 0f                	jne    c000cc1e <LogicalDisk::unassignDriveLetter()+0x20>
c000cc0f:	c7 44 24 0c 3c e1 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e13c
c000cc17:	5e                   	pop    esi
c000cc18:	5f                   	pop    edi
c000cc19:	e9 91 35 00 00       	jmp    c00101af <KePanic(char const*)>
c000cc1e:	83 e9 41             	sub    ecx,0x41
c000cc21:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cc28:	b8 01 00 00 00       	mov    eax,0x1
c000cc2d:	c7 04 8d 20 44 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdbbe0],0x0
c000cc38:	d3 e0                	shl    eax,cl
c000cc3a:	89 c7                	mov    edi,eax
c000cc3c:	f7 d0                	not    eax
c000cc3e:	c1 ff 1f             	sar    edi,0x1f
c000cc41:	21 05 00 44 02 c0    	and    DWORD PTR ds:0xc0024400,eax
c000cc47:	89 fe                	mov    esi,edi
c000cc49:	f7 d6                	not    esi
c000cc4b:	21 35 04 44 02 c0    	and    DWORD PTR ds:0xc0024404,esi
c000cc51:	5e                   	pop    esi
c000cc52:	5f                   	pop    edi
c000cc53:	c3                   	ret    

c000cc54 <LogicalDisk::read(unsigned long long, int, void*)>:
c000cc54:	57                   	push   edi
c000cc55:	56                   	push   esi
c000cc56:	53                   	push   ebx
c000cc57:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cc5b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cc5f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cc63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cc67:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cc6d:	77 41                	ja     c000ccb0 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000cc6f:	99                   	cdq    
c000cc70:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cc76:	01 c8                	add    eax,ecx
c000cc78:	11 da                	adc    edx,ebx
c000cc7a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cc80:	19 d7                	sbb    edi,edx
c000cc82:	72 33                	jb     c000ccb7 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000cc84:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cc8a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cc90:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cc94:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cc98:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cc9e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cca4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cca8:	5b                   	pop    ebx
c000cca9:	5e                   	pop    esi
c000ccaa:	5f                   	pop    edi
c000ccab:	e9 4e 0a 00 00       	jmp    c000d6fe <VCache::read(unsigned long long, int, void*)>
c000ccb0:	b8 05 00 00 00       	mov    eax,0x5
c000ccb5:	eb 05                	jmp    c000ccbc <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000ccb7:	b8 07 00 00 00       	mov    eax,0x7
c000ccbc:	5b                   	pop    ebx
c000ccbd:	5e                   	pop    esi
c000ccbe:	5f                   	pop    edi
c000ccbf:	c3                   	ret    

c000ccc0 <LogicalDisk::write(unsigned long long, int, void*)>:
c000ccc0:	57                   	push   edi
c000ccc1:	56                   	push   esi
c000ccc2:	53                   	push   ebx
c000ccc3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ccc7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cccb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cccf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ccd3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ccd9:	77 41                	ja     c000cd1c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000ccdb:	99                   	cdq    
c000ccdc:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cce2:	01 c8                	add    eax,ecx
c000cce4:	11 da                	adc    edx,ebx
c000cce6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ccec:	19 d7                	sbb    edi,edx
c000ccee:	72 33                	jb     c000cd23 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000ccf0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ccf6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ccfc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cd00:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cd04:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cd0a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cd10:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cd14:	5b                   	pop    ebx
c000cd15:	5e                   	pop    esi
c000cd16:	5f                   	pop    edi
c000cd17:	e9 cc 08 00 00       	jmp    c000d5e8 <VCache::write(unsigned long long, int, void*)>
c000cd1c:	b8 05 00 00 00       	mov    eax,0x5
c000cd21:	eb 05                	jmp    c000cd28 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000cd23:	b8 07 00 00 00       	mov    eax,0x7
c000cd28:	5b                   	pop    ebx
c000cd29:	5e                   	pop    esi
c000cd2a:	5f                   	pop    edi
c000cd2b:	c3                   	ret    

c000cd2c <Mouse::Mouse(char const*)>:
c000cd2c:	83 ec 0c             	sub    esp,0xc
c000cd2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd33:	83 ec 08             	sub    esp,0x8
c000cd36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd3a:	50                   	push   eax
c000cd3b:	e8 c4 ed ff ff       	call   c000bb04 <Device::Device(char const*)>
c000cd40:	83 c4 10             	add    esp,0x10
c000cd43:	ba 90 e1 01 c0       	mov    edx,0xc001e190
c000cd48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd4c:	89 10                	mov    DWORD PTR [eax],edx
c000cd4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd52:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000cd5c:	90                   	nop
c000cd5d:	83 c4 0c             	add    esp,0xc
c000cd60:	c3                   	ret    
c000cd61:	90                   	nop
c000cd62:	66 90                	xchg   ax,ax

c000cd64 <Mouse::~Mouse()>:
c000cd64:	83 ec 0c             	sub    esp,0xc
c000cd67:	ba 90 e1 01 c0       	mov    edx,0xc001e190
c000cd6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd70:	89 10                	mov    DWORD PTR [eax],edx
c000cd72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd76:	83 ec 0c             	sub    esp,0xc
c000cd79:	50                   	push   eax
c000cd7a:	e8 ef ea ff ff       	call   c000b86e <Device::~Device()>
c000cd7f:	83 c4 10             	add    esp,0x10
c000cd82:	90                   	nop
c000cd83:	83 c4 0c             	add    esp,0xc
c000cd86:	c3                   	ret    
c000cd87:	90                   	nop

c000cd88 <Mouse::~Mouse()>:
c000cd88:	83 ec 0c             	sub    esp,0xc
c000cd8b:	83 ec 0c             	sub    esp,0xc
c000cd8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd92:	e8 cd ff ff ff       	call   c000cd64 <Mouse::~Mouse()>
c000cd97:	83 c4 10             	add    esp,0x10
c000cd9a:	83 ec 08             	sub    esp,0x8
c000cd9d:	68 58 01 00 00       	push   0x158
c000cda2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda6:	e8 8c d6 ff ff       	call   c000a437 <operator delete(void*, unsigned long)>
c000cdab:	83 c4 10             	add    esp,0x10
c000cdae:	83 c4 0c             	add    esp,0xc
c000cdb1:	c3                   	ret    

c000cdb2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cdb2:	55                   	push   ebp
c000cdb3:	57                   	push   edi
c000cdb4:	56                   	push   esi
c000cdb5:	53                   	push   ebx
c000cdb6:	81 ec 28 01 00 00    	sub    esp,0x128
c000cdbc:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000cdc3:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000cdca:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000cdd1:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000cdd8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cddc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cde0:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cde7:	e8 14 ee ff ff       	call   c000bc00 <Device::getName()>
c000cdec:	5a                   	pop    edx
c000cded:	59                   	pop    ecx
c000cdee:	50                   	push   eax
c000cdef:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cdf3:	55                   	push   ebp
c000cdf4:	e8 07 38 ff ff       	call   c0000600 <strcpy>
c000cdf9:	5b                   	pop    ebx
c000cdfa:	58                   	pop    eax
c000cdfb:	68 b4 e1 01 c0       	push   0xc001e1b4
c000ce00:	55                   	push   ebp
c000ce01:	e8 ba 39 ff ff       	call   c00007c0 <strcat>
c000ce06:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000ce0d:	e8 a7 a9 ff ff       	call   c00077b9 <malloc>
c000ce12:	83 c4 0c             	add    esp,0xc
c000ce15:	89 c3                	mov    ebx,eax
c000ce17:	57                   	push   edi
c000ce18:	56                   	push   esi
c000ce19:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ce1d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ce21:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000ce28:	55                   	push   ebp
c000ce29:	50                   	push   eax
c000ce2a:	e8 f7 fb ff ff       	call   c000ca26 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000ce2f:	83 c4 14             	add    esp,0x14
c000ce32:	53                   	push   ebx
c000ce33:	e8 a4 fc ff ff       	call   c000cadc <LogicalDisk::assignDriveLetter()>
c000ce38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ce3b:	e8 52 fd ff ff       	call   c000cb92 <LogicalDisk::mount()>
c000ce40:	58                   	pop    eax
c000ce41:	5a                   	pop    edx
c000ce42:	53                   	push   ebx
c000ce43:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ce4a:	e8 1d eb ff ff       	call   c000b96c <Device::addChild(Device*)>
c000ce4f:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ce55:	5b                   	pop    ebx
c000ce56:	5e                   	pop    esi
c000ce57:	5f                   	pop    edi
c000ce58:	5d                   	pop    ebp
c000ce59:	c3                   	ret    

c000ce5a <createPartitionsForDisk(PhysicalDisk*)>:
c000ce5a:	55                   	push   ebp
c000ce5b:	57                   	push   edi
c000ce5c:	56                   	push   esi
c000ce5d:	53                   	push   ebx
c000ce5e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000ce64:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000ce6b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ce71:	3d 00 02 00 00       	cmp    eax,0x200
c000ce76:	74 27                	je     c000ce9f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ce78:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ce7e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ce84:	83 ec 10             	sub    esp,0x10
c000ce87:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ce8b:	99                   	cdq    
c000ce8c:	c1 e6 0a             	shl    esi,0xa
c000ce8f:	52                   	push   edx
c000ce90:	89 fd                	mov    ebp,edi
c000ce92:	50                   	push   eax
c000ce93:	55                   	push   ebp
c000ce94:	56                   	push   esi
c000ce95:	e8 66 f2 00 00       	call   c001c100 <__udivdi3>
c000ce9a:	e9 b1 00 00 00       	jmp    c000cf50 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000ce9f:	83 ec 0c             	sub    esp,0xc
c000cea2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cea4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000cea8:	56                   	push   esi
c000cea9:	6a 01                	push   0x1
c000ceab:	6a 00                	push   0x0
c000cead:	6a 00                	push   0x0
c000ceaf:	53                   	push   ebx
c000ceb0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ceb3:	83 c4 20             	add    esp,0x20
c000ceb6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000cebe:	75 0a                	jne    c000ceca <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000cec0:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000cec8:	74 2c                	je     c000cef6 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000ceca:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ced0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ced6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cedc:	83 ec 10             	sub    esp,0x10
c000cedf:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cee3:	89 f7                	mov    edi,esi
c000cee5:	c1 e0 0a             	shl    eax,0xa
c000cee8:	c1 ff 1f             	sar    edi,0x1f
c000ceeb:	57                   	push   edi
c000ceec:	56                   	push   esi
c000ceed:	52                   	push   edx
c000ceee:	50                   	push   eax
c000ceef:	e8 0c f2 00 00       	call   c001c100 <__udivdi3>
c000cef4:	eb 5a                	jmp    c000cf50 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000cef6:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000cefd:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000cf04:	83 e1 7f             	and    ecx,0x7f
c000cf07:	83 e0 7f             	and    eax,0x7f
c000cf0a:	01 c1                	add    ecx,eax
c000cf0c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000cf13:	83 e0 7f             	and    eax,0x7f
c000cf16:	01 c1                	add    ecx,eax
c000cf18:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000cf1f:	83 e0 7f             	and    eax,0x7f
c000cf22:	00 c1                	add    cl,al
c000cf24:	74 41                	je     c000cf67 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000cf26:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cf2c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cf32:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cf38:	83 ec 10             	sub    esp,0x10
c000cf3b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cf3f:	89 f7                	mov    edi,esi
c000cf41:	c1 e0 0a             	shl    eax,0xa
c000cf44:	c1 ff 1f             	sar    edi,0x1f
c000cf47:	57                   	push   edi
c000cf48:	56                   	push   esi
c000cf49:	52                   	push   edx
c000cf4a:	50                   	push   eax
c000cf4b:	e8 b0 f1 00 00       	call   c001c100 <__udivdi3>
c000cf50:	83 c4 14             	add    esp,0x14
c000cf53:	52                   	push   edx
c000cf54:	50                   	push   eax
c000cf55:	6a 00                	push   0x0
c000cf57:	6a 00                	push   0x0
c000cf59:	53                   	push   ebx
c000cf5a:	e8 53 fe ff ff       	call   c000cdb2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000cf5f:	83 c4 20             	add    esp,0x20
c000cf62:	e9 79 01 00 00       	jmp    c000d0e0 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000cf67:	89 f0                	mov    eax,esi
c000cf69:	31 f6                	xor    esi,esi
c000cf6b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000cf72:	75 02                	jne    c000cf76 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000cf74:	89 f1                	mov    ecx,esi
c000cf76:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000cf7d:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000cf84:	c1 e2 08             	shl    edx,0x8
c000cf87:	c1 e7 10             	shl    edi,0x10
c000cf8a:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000cf92:	09 fa                	or     edx,edi
c000cf94:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000cf9c:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000cfa3:	83 c0 10             	add    eax,0x10
c000cfa6:	09 fa                	or     edx,edi
c000cfa8:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000cfaf:	c1 e7 18             	shl    edi,0x18
c000cfb2:	09 fa                	or     edx,edi
c000cfb4:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000cfbb:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000cfbf:	c1 e7 10             	shl    edi,0x10
c000cfc2:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000cfc9:	c1 e2 08             	shl    edx,0x8
c000cfcc:	09 fa                	or     edx,edi
c000cfce:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000cfd5:	09 fa                	or     edx,edi
c000cfd7:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000cfde:	c1 e7 18             	shl    edi,0x18
c000cfe1:	09 fa                	or     edx,edi
c000cfe3:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000cfe7:	46                   	inc    esi
c000cfe8:	83 fe 04             	cmp    esi,0x4
c000cfeb:	0f 85 7a ff ff ff    	jne    c000cf6b <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000cff1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cff5:	83 f0 01             	xor    eax,0x1
c000cff8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000cffc:	75 57                	jne    c000d055 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000cffe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d002:	83 f0 01             	xor    eax,0x1
c000d005:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d009:	75 4a                	jne    c000d055 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d00b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d00f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d017:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d01f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d025:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d02b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d031:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d035:	89 f7                	mov    edi,esi
c000d037:	c1 e0 0a             	shl    eax,0xa
c000d03a:	c1 ff 1f             	sar    edi,0x1f
c000d03d:	57                   	push   edi
c000d03e:	56                   	push   esi
c000d03f:	52                   	push   edx
c000d040:	50                   	push   eax
c000d041:	e8 ba f0 00 00       	call   c001c100 <__udivdi3>
c000d046:	83 c4 10             	add    esp,0x10
c000d049:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d04d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d051:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d055:	84 c9                	test   cl,cl
c000d057:	74 53                	je     c000d0ac <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d059:	0f b6 c9             	movzx  ecx,cl
c000d05c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d060:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d064:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d068:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d06c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d070:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d074:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d078:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d07c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d080:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d088:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d08c:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d090:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d094:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d098:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d09c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0a0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d0a4:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d0a8:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d0ac:	31 ed                	xor    ebp,ebp
c000d0ae:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d0b2:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d0b6:	89 f8                	mov    eax,edi
c000d0b8:	09 f0                	or     eax,esi
c000d0ba:	74 1e                	je     c000d0da <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d0bc:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d0c0:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d0c4:	89 d1                	mov    ecx,edx
c000d0c6:	09 c1                	or     ecx,eax
c000d0c8:	74 10                	je     c000d0da <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d0ca:	83 ec 0c             	sub    esp,0xc
c000d0cd:	57                   	push   edi
c000d0ce:	56                   	push   esi
c000d0cf:	52                   	push   edx
c000d0d0:	50                   	push   eax
c000d0d1:	53                   	push   ebx
c000d0d2:	e8 db fc ff ff       	call   c000cdb2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d0d7:	83 c4 20             	add    esp,0x20
c000d0da:	45                   	inc    ebp
c000d0db:	83 fd 04             	cmp    ebp,0x4
c000d0de:	75 ce                	jne    c000d0ae <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d0e0:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d0e6:	5b                   	pop    ebx
c000d0e7:	5e                   	pop    esi
c000d0e8:	5f                   	pop    edi
c000d0e9:	5d                   	pop    ebp
c000d0ea:	c3                   	ret    
c000d0eb:	90                   	nop

c000d0ec <Serial::Serial(char const*)>:
c000d0ec:	83 ec 0c             	sub    esp,0xc
c000d0ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0f3:	83 ec 08             	sub    esp,0x8
c000d0f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0fa:	50                   	push   eax
c000d0fb:	e8 04 ea ff ff       	call   c000bb04 <Device::Device(char const*)>
c000d100:	83 c4 10             	add    esp,0x10
c000d103:	ba c8 e1 01 c0       	mov    edx,0xc001e1c8
c000d108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d10c:	89 10                	mov    DWORD PTR [eax],edx
c000d10e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d112:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d11c:	90                   	nop
c000d11d:	83 c4 0c             	add    esp,0xc
c000d120:	c3                   	ret    
c000d121:	90                   	nop
c000d122:	66 90                	xchg   ax,ax

c000d124 <Serial::~Serial()>:
c000d124:	83 ec 0c             	sub    esp,0xc
c000d127:	ba c8 e1 01 c0       	mov    edx,0xc001e1c8
c000d12c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d130:	89 10                	mov    DWORD PTR [eax],edx
c000d132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d136:	83 ec 0c             	sub    esp,0xc
c000d139:	50                   	push   eax
c000d13a:	e8 2f e7 ff ff       	call   c000b86e <Device::~Device()>
c000d13f:	83 c4 10             	add    esp,0x10
c000d142:	90                   	nop
c000d143:	83 c4 0c             	add    esp,0xc
c000d146:	c3                   	ret    
c000d147:	90                   	nop

c000d148 <Serial::~Serial()>:
c000d148:	83 ec 0c             	sub    esp,0xc
c000d14b:	83 ec 0c             	sub    esp,0xc
c000d14e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d152:	e8 cd ff ff ff       	call   c000d124 <Serial::~Serial()>
c000d157:	83 c4 10             	add    esp,0x10
c000d15a:	83 ec 08             	sub    esp,0x8
c000d15d:	68 58 01 00 00       	push   0x158
c000d162:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d166:	e8 cc d2 ff ff       	call   c000a437 <operator delete(void*, unsigned long)>
c000d16b:	83 c4 10             	add    esp,0x10
c000d16e:	83 c4 0c             	add    esp,0xc
c000d171:	c3                   	ret    
c000d172:	66 90                	xchg   ax,ax

c000d174 <Timer::Timer(char const*)>:
c000d174:	83 ec 0c             	sub    esp,0xc
c000d177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d17b:	83 ec 08             	sub    esp,0x8
c000d17e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d182:	50                   	push   eax
c000d183:	e8 7c e9 ff ff       	call   c000bb04 <Device::Device(char const*)>
c000d188:	83 c4 10             	add    esp,0x10
c000d18b:	ba 0c e2 01 c0       	mov    edx,0xc001e20c
c000d190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d194:	89 10                	mov    DWORD PTR [eax],edx
c000d196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d19a:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d1a4:	90                   	nop
c000d1a5:	83 c4 0c             	add    esp,0xc
c000d1a8:	c3                   	ret    
c000d1a9:	90                   	nop
c000d1aa:	66 90                	xchg   ax,ax

c000d1ac <Timer::~Timer()>:
c000d1ac:	83 ec 0c             	sub    esp,0xc
c000d1af:	ba 0c e2 01 c0       	mov    edx,0xc001e20c
c000d1b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1b8:	89 10                	mov    DWORD PTR [eax],edx
c000d1ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1be:	83 ec 0c             	sub    esp,0xc
c000d1c1:	50                   	push   eax
c000d1c2:	e8 a7 e6 ff ff       	call   c000b86e <Device::~Device()>
c000d1c7:	83 c4 10             	add    esp,0x10
c000d1ca:	90                   	nop
c000d1cb:	83 c4 0c             	add    esp,0xc
c000d1ce:	c3                   	ret    
c000d1cf:	90                   	nop

c000d1d0 <Timer::~Timer()>:
c000d1d0:	83 ec 0c             	sub    esp,0xc
c000d1d3:	83 ec 0c             	sub    esp,0xc
c000d1d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1da:	e8 cd ff ff ff       	call   c000d1ac <Timer::~Timer()>
c000d1df:	83 c4 10             	add    esp,0x10
c000d1e2:	83 ec 08             	sub    esp,0x8
c000d1e5:	68 5c 01 00 00       	push   0x15c
c000d1ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1ee:	e8 44 d2 ff ff       	call   c000a437 <operator delete(void*, unsigned long)>
c000d1f3:	83 c4 10             	add    esp,0x10
c000d1f6:	83 c4 0c             	add    esp,0xc
c000d1f9:	c3                   	ret    

c000d1fa <Timer::read()>:
c000d1fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1fe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d204:	c3                   	ret    

c000d205 <setupTimer(int)>:
c000d205:	53                   	push   ebx
c000d206:	83 ec 14             	sub    esp,0x14
c000d209:	68 5c 01 00 00       	push   0x15c
c000d20e:	e8 a6 a5 ff ff       	call   c00077b9 <malloc>
c000d213:	89 04 24             	mov    DWORD PTR [esp],eax
c000d216:	89 c3                	mov    ebx,eax
c000d218:	e8 fb e7 00 00       	call   c001ba18 <PIT::PIT()>
c000d21d:	58                   	pop    eax
c000d21e:	5a                   	pop    edx
c000d21f:	53                   	push   ebx
c000d220:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c000d226:	e8 41 e7 ff ff       	call   c000b96c <Device::addChild(Device*)>
c000d22b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d22d:	6a 00                	push   0x0
c000d22f:	6a 00                	push   0x0
c000d231:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d235:	53                   	push   ebx
c000d236:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d239:	89 d8                	mov    eax,ebx
c000d23b:	83 c4 28             	add    esp,0x28
c000d23e:	5b                   	pop    ebx
c000d23f:	c3                   	ret    

c000d240 <timerHandler(unsigned int)>:
c000d240:	56                   	push   esi
c000d241:	53                   	push   ebx
c000d242:	51                   	push   ecx
c000d243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d247:	01 05 8c 44 02 c0    	add    DWORD PTR ds:0xc002448c,eax
c000d24d:	80 3d bd 1e 02 c0 00 	cmp    BYTE PTR ds:0xc0021ebd,0x0
c000d254:	0f 84 4a 01 00 00    	je     c000d3a4 <timerHandler(unsigned int)+0x164>
c000d25a:	fa                   	cli    
c000d25b:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c000d261:	83 ec 0c             	sub    esp,0xc
c000d264:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c000d26a:	68 78 51 02 c0       	push   0xc0025178
c000d26f:	e8 5c f4 00 00       	call   c001c6d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d274:	83 c4 10             	add    esp,0x10
c000d277:	84 c0                	test   al,al
c000d279:	0f 85 a1 00 00 00    	jne    c000d320 <timerHandler(unsigned int)+0xe0>
c000d27f:	83 ec 0c             	sub    esp,0xc
c000d282:	68 78 51 02 c0       	push   0xc0025178
c000d287:	e8 60 f4 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d28c:	83 c4 10             	add    esp,0x10
c000d28f:	89 c6                	mov    esi,eax
c000d291:	8d 76 00             	lea    esi,[esi+0x0]
c000d294:	83 ec 0c             	sub    esp,0xc
c000d297:	68 78 51 02 c0       	push   0xc0025178
c000d29c:	e8 4b f4 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d2a1:	c7 04 24 78 51 02 c0 	mov    DWORD PTR [esp],0xc0025178
c000d2a8:	89 c3                	mov    ebx,eax
c000d2aa:	e8 45 f4 00 00       	call   c001c6f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d2af:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d2b2:	83 c4 10             	add    esp,0x10
c000d2b5:	3b 05 8c 44 02 c0    	cmp    eax,DWORD PTR ds:0xc002448c
c000d2bb:	77 23                	ja     c000d2e0 <timerHandler(unsigned int)+0xa0>
c000d2bd:	83 ec 0c             	sub    esp,0xc
c000d2c0:	53                   	push   ebx
c000d2c1:	e8 a2 69 00 00       	call   c0013c68 <unblockTask(ThreadControlBlock*)>
c000d2c6:	83 c4 10             	add    esp,0x10
c000d2c9:	39 de                	cmp    esi,ebx
c000d2cb:	75 27                	jne    c000d2f4 <timerHandler(unsigned int)+0xb4>
c000d2cd:	83 ec 0c             	sub    esp,0xc
c000d2d0:	68 78 51 02 c0       	push   0xc0025178
c000d2d5:	e8 12 f4 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d2da:	89 c6                	mov    esi,eax
c000d2dc:	eb 12                	jmp    c000d2f0 <timerHandler(unsigned int)+0xb0>
c000d2de:	66 90                	xchg   ax,ax
c000d2e0:	52                   	push   edx
c000d2e1:	52                   	push   edx
c000d2e2:	53                   	push   ebx
c000d2e3:	68 78 51 02 c0       	push   0xc0025178
c000d2e8:	e8 bf f4 00 00       	call   c001c7ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d2ed:	8d 76 00             	lea    esi,[esi+0x0]
c000d2f0:	83 c4 10             	add    esp,0x10
c000d2f3:	90                   	nop
c000d2f4:	83 ec 0c             	sub    esp,0xc
c000d2f7:	68 78 51 02 c0       	push   0xc0025178
c000d2fc:	e8 cf f3 00 00       	call   c001c6d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d301:	83 c4 10             	add    esp,0x10
c000d304:	84 c0                	test   al,al
c000d306:	75 18                	jne    c000d320 <timerHandler(unsigned int)+0xe0>
c000d308:	83 ec 0c             	sub    esp,0xc
c000d30b:	68 78 51 02 c0       	push   0xc0025178
c000d310:	e8 d7 f3 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d315:	83 c4 10             	add    esp,0x10
c000d318:	39 f0                	cmp    eax,esi
c000d31a:	0f 85 74 ff ff ff    	jne    c000d294 <timerHandler(unsigned int)+0x54>
c000d320:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d325:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d329:	74 41                	je     c000d36c <timerHandler(unsigned int)+0x12c>
c000d32b:	80 3d bc 1e 02 c0 00 	cmp    BYTE PTR ds:0xc0021ebc,0x0
c000d332:	74 38                	je     c000d36c <timerHandler(unsigned int)+0x12c>
c000d334:	fa                   	cli    
c000d335:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c000d33b:	a1 8c 44 02 c0       	mov    eax,ds:0xc002448c
c000d340:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d346:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d349:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d34f:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d352:	72 08                	jb     c000d35c <timerHandler(unsigned int)+0x11c>
c000d354:	e8 4b 64 00 00       	call   c00137a4 <schedule()>
c000d359:	8d 76 00             	lea    esi,[esi+0x0]
c000d35c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000d361:	48                   	dec    eax
c000d362:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000d367:	75 03                	jne    c000d36c <timerHandler(unsigned int)+0x12c>
c000d369:	fb                   	sti    
c000d36a:	66 90                	xchg   ax,ax
c000d36c:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000d371:	48                   	dec    eax
c000d372:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c000d377:	75 1b                	jne    c000d394 <timerHandler(unsigned int)+0x154>
c000d379:	83 3d 60 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025160,0x0
c000d380:	74 12                	je     c000d394 <timerHandler(unsigned int)+0x154>
c000d382:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c000d38c:	e8 13 64 00 00       	call   c00137a4 <schedule()>
c000d391:	8d 76 00             	lea    esi,[esi+0x0]
c000d394:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000d399:	48                   	dec    eax
c000d39a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000d39f:	75 03                	jne    c000d3a4 <timerHandler(unsigned int)+0x164>
c000d3a1:	fb                   	sti    
c000d3a2:	66 90                	xchg   ax,ax
c000d3a4:	58                   	pop    eax
c000d3a5:	5b                   	pop    ebx
c000d3a6:	5e                   	pop    esi
c000d3a7:	c3                   	ret    

c000d3a8 <VCache::VCache(PhysicalDisk*)>:
c000d3a8:	53                   	push   ebx
c000d3a9:	83 ec 18             	sub    esp,0x18
c000d3ac:	ba 3c e2 01 c0       	mov    edx,0xc001e23c
c000d3b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3b5:	89 10                	mov    DWORD PTR [eax],edx
c000d3b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3bb:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d3c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3c6:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d3cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3d1:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d3d8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d3df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3e3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d3ea:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d3f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3f5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d3fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d400:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d404:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d408:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d40f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d416:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d41a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d41e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d422:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d426:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d42a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d42e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d432:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d439:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d441:	83 ec 0c             	sub    esp,0xc
c000d444:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d448:	e8 6c a3 ff ff       	call   c00077b9 <malloc>
c000d44d:	83 c4 10             	add    esp,0x10
c000d450:	89 c3                	mov    ebx,eax
c000d452:	83 ec 0c             	sub    esp,0xc
c000d455:	53                   	push   ebx
c000d456:	e8 15 61 00 00       	call   c0013570 <Mutex::Mutex()>
c000d45b:	83 c4 10             	add    esp,0x10
c000d45e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d462:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d465:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d469:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d46d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d470:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d474:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d47b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d47f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d485:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d489:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d48c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d490:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d496:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d49c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d4a0:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d4a3:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d4a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4aa:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d4ae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d4b2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d4b8:	05 00 01 00 00       	add    eax,0x100
c000d4bd:	c1 e0 04             	shl    eax,0x4
c000d4c0:	83 ec 0c             	sub    esp,0xc
c000d4c3:	50                   	push   eax
c000d4c4:	e8 f0 a2 ff ff       	call   c00077b9 <malloc>
c000d4c9:	83 c4 10             	add    esp,0x10
c000d4cc:	89 c2                	mov    edx,eax
c000d4ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4d2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d4d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4d9:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d4e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4e4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d4e8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d4ec:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d4f2:	c1 e0 06             	shl    eax,0x6
c000d4f5:	83 ec 0c             	sub    esp,0xc
c000d4f8:	50                   	push   eax
c000d4f9:	e8 bb a2 ff ff       	call   c00077b9 <malloc>
c000d4fe:	83 c4 10             	add    esp,0x10
c000d501:	89 c2                	mov    edx,eax
c000d503:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d507:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d50a:	90                   	nop
c000d50b:	83 c4 18             	add    esp,0x18
c000d50e:	5b                   	pop    ebx
c000d50f:	c3                   	ret    

c000d510 <VCache::invalidateReadBuffer()>:
c000d510:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d514:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d51a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d51e:	c3                   	ret    
c000d51f:	90                   	nop

c000d520 <VCache::writeWriteBuffer()>:
c000d520:	53                   	push   ebx
c000d521:	83 ec 08             	sub    esp,0x8
c000d524:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d528:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d52c:	74 1e                	je     c000d54c <VCache::writeWriteBuffer()+0x2c>
c000d52e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d531:	83 ec 0c             	sub    esp,0xc
c000d534:	8b 10                	mov    edx,DWORD PTR [eax]
c000d536:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d539:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d53c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d53f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d542:	50                   	push   eax
c000d543:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d546:	83 c4 20             	add    esp,0x20
c000d549:	8d 76 00             	lea    esi,[esi+0x0]
c000d54c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d553:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d55a:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d55e:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d565:	83 c4 08             	add    esp,0x8
c000d568:	5b                   	pop    ebx
c000d569:	c3                   	ret    
c000d56a:	66 90                	xchg   ax,ax

c000d56c <VCache::~VCache()>:
c000d56c:	83 ec 0c             	sub    esp,0xc
c000d56f:	ba 3c e2 01 c0       	mov    edx,0xc001e23c
c000d574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d578:	89 10                	mov    DWORD PTR [eax],edx
c000d57a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d57e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d581:	84 c0                	test   al,al
c000d583:	74 0f                	je     c000d594 <VCache::~VCache()+0x28>
c000d585:	83 ec 0c             	sub    esp,0xc
c000d588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d58c:	e8 8f ff ff ff       	call   c000d520 <VCache::writeWriteBuffer()>
c000d591:	83 c4 10             	add    esp,0x10
c000d594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d598:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d59b:	83 ec 0c             	sub    esp,0xc
c000d59e:	50                   	push   eax
c000d59f:	e8 25 a2 ff ff       	call   c00077c9 <free>
c000d5a4:	83 c4 10             	add    esp,0x10
c000d5a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5ab:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d5ae:	83 ec 0c             	sub    esp,0xc
c000d5b1:	50                   	push   eax
c000d5b2:	e8 12 a2 ff ff       	call   c00077c9 <free>
c000d5b7:	83 c4 10             	add    esp,0x10
c000d5ba:	90                   	nop
c000d5bb:	83 c4 0c             	add    esp,0xc
c000d5be:	c3                   	ret    
c000d5bf:	90                   	nop

c000d5c0 <VCache::~VCache()>:
c000d5c0:	83 ec 0c             	sub    esp,0xc
c000d5c3:	83 ec 0c             	sub    esp,0xc
c000d5c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ca:	e8 9d ff ff ff       	call   c000d56c <VCache::~VCache()>
c000d5cf:	83 c4 10             	add    esp,0x10
c000d5d2:	83 ec 08             	sub    esp,0x8
c000d5d5:	6a 44                	push   0x44
c000d5d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5db:	e8 57 ce ff ff       	call   c000a437 <operator delete(void*, unsigned long)>
c000d5e0:	83 c4 10             	add    esp,0x10
c000d5e3:	83 c4 0c             	add    esp,0xc
c000d5e6:	c3                   	ret    
c000d5e7:	90                   	nop

c000d5e8 <VCache::write(unsigned long long, int, void*)>:
c000d5e8:	55                   	push   ebp
c000d5e9:	57                   	push   edi
c000d5ea:	56                   	push   esi
c000d5eb:	53                   	push   ebx
c000d5ec:	83 ec 1c             	sub    esp,0x1c
c000d5ef:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d5f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d5f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5fb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d5ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d603:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d607:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d60b:	31 c0                	xor    eax,eax
c000d60d:	8d 76 00             	lea    esi,[esi+0x0]
c000d610:	39 e8                	cmp    eax,ebp
c000d612:	7d 18                	jge    c000d62c <VCache::write(unsigned long long, int, void*)+0x44>
c000d614:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d617:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d61d:	0f af c8             	imul   ecx,eax
c000d620:	89 ca                	mov    edx,ecx
c000d622:	01 f2                	add    edx,esi
c000d624:	8b 3a                	mov    edi,DWORD PTR [edx]
c000d626:	40                   	inc    eax
c000d627:	eb e7                	jmp    c000d610 <VCache::write(unsigned long long, int, void*)+0x28>
c000d629:	8d 76 00             	lea    esi,[esi+0x0]
c000d62c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d630:	74 0a                	je     c000d63c <VCache::write(unsigned long long, int, void*)+0x54>
c000d632:	53                   	push   ebx
c000d633:	e8 d8 fe ff ff       	call   c000d510 <VCache::invalidateReadBuffer()>
c000d638:	58                   	pop    eax
c000d639:	8d 76 00             	lea    esi,[esi+0x0]
c000d63c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d640:	74 5a                	je     c000d69c <VCache::write(unsigned long long, int, void*)+0xb4>
c000d642:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000d645:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d649:	89 f8                	mov    eax,edi
c000d64b:	99                   	cdq    
c000d64c:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d64f:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d652:	31 c1                	xor    ecx,eax
c000d654:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d658:	31 d0                	xor    eax,edx
c000d65a:	09 c1                	or     ecx,eax
c000d65c:	75 32                	jne    c000d690 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d65e:	83 fd 01             	cmp    ebp,0x1
c000d661:	75 2d                	jne    c000d690 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d663:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d666:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d66c:	0f af f9             	imul   edi,ecx
c000d66f:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000d672:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d674:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d677:	40                   	inc    eax
c000d678:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d67b:	83 f8 40             	cmp    eax,0x40
c000d67e:	75 74                	jne    c000d6f4 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d680:	83 ec 0c             	sub    esp,0xc
c000d683:	53                   	push   ebx
c000d684:	e8 97 fe ff ff       	call   c000d520 <VCache::writeWriteBuffer()>
c000d689:	83 c4 10             	add    esp,0x10
c000d68c:	eb 66                	jmp    c000d6f4 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d68e:	66 90                	xchg   ax,ax
c000d690:	83 ec 0c             	sub    esp,0xc
c000d693:	53                   	push   ebx
c000d694:	e8 87 fe ff ff       	call   c000d520 <VCache::writeWriteBuffer()>
c000d699:	83 c4 10             	add    esp,0x10
c000d69c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d69f:	83 fd 3f             	cmp    ebp,0x3f
c000d6a2:	7f 24                	jg     c000d6c8 <VCache::write(unsigned long long, int, void*)+0xe0>
c000d6a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d6a8:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000d6ab:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d6ae:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d6b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d6b6:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d6b9:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000d6bc:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d6c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d6c4:	eb 2e                	jmp    c000d6f4 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d6c6:	66 90                	xchg   ax,ax
c000d6c8:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6ca:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d6ce:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d6d2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d6d6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d6da:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d6de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d6e2:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000d6e6:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d6e9:	83 c4 1c             	add    esp,0x1c
c000d6ec:	5b                   	pop    ebx
c000d6ed:	5e                   	pop    esi
c000d6ee:	5f                   	pop    edi
c000d6ef:	5d                   	pop    ebp
c000d6f0:	ff e0                	jmp    eax
c000d6f2:	66 90                	xchg   ax,ax
c000d6f4:	83 c4 1c             	add    esp,0x1c
c000d6f7:	31 c0                	xor    eax,eax
c000d6f9:	5b                   	pop    ebx
c000d6fa:	5e                   	pop    esi
c000d6fb:	5f                   	pop    edi
c000d6fc:	5d                   	pop    ebp
c000d6fd:	c3                   	ret    

c000d6fe <VCache::read(unsigned long long, int, void*)>:
c000d6fe:	55                   	push   ebp
c000d6ff:	57                   	push   edi
c000d700:	56                   	push   esi
c000d701:	53                   	push   ebx
c000d702:	83 ec 1c             	sub    esp,0x1c
c000d705:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d709:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d70d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d711:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d715:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d719:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d71d:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000d721:	74 0d                	je     c000d730 <VCache::read(unsigned long long, int, void*)+0x32>
c000d723:	83 ec 0c             	sub    esp,0xc
c000d726:	55                   	push   ebp
c000d727:	e8 f4 fd ff ff       	call   c000d520 <VCache::writeWriteBuffer()>
c000d72c:	83 c4 10             	add    esp,0x10
c000d72f:	90                   	nop
c000d730:	83 ec 0c             	sub    esp,0xc
c000d733:	55                   	push   ebp
c000d734:	e8 d7 fd ff ff       	call   c000d510 <VCache::invalidateReadBuffer()>
c000d739:	83 c4 0c             	add    esp,0xc
c000d73c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d73f:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000d745:	6a 00                	push   0x0
c000d747:	53                   	push   ebx
c000d748:	e8 83 2d ff ff       	call   c00004d0 <memset>
c000d74d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d750:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d754:	8b 10                	mov    edx,DWORD PTR [eax]
c000d756:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
c000d75a:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c000d75e:	89 7c 24 48          	mov    DWORD PTR [esp+0x48],edi
c000d762:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
c000d766:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d76a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d76d:	83 c4 2c             	add    esp,0x2c
c000d770:	5b                   	pop    ebx
c000d771:	5e                   	pop    esi
c000d772:	5f                   	pop    edi
c000d773:	5d                   	pop    ebp
c000d774:	ff e0                	jmp    eax

c000d776 <Video::putrect(int, int, int, int, unsigned int)>:
c000d776:	55                   	push   ebp
c000d777:	57                   	push   edi
c000d778:	56                   	push   esi
c000d779:	53                   	push   ebx
c000d77a:	83 ec 1c             	sub    esp,0x1c
c000d77d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d781:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d785:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d789:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d78d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d791:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d795:	01 df                	add    edi,ebx
c000d797:	39 fb                	cmp    ebx,edi
c000d799:	7d 1f                	jge    c000d7ba <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d79b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d79f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d7a3:	7d 12                	jge    c000d7b7 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d7a5:	8b 16                	mov    edx,DWORD PTR [esi]
c000d7a7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d7ab:	53                   	push   ebx
c000d7ac:	55                   	push   ebp
c000d7ad:	45                   	inc    ebp
c000d7ae:	56                   	push   esi
c000d7af:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d7b2:	83 c4 10             	add    esp,0x10
c000d7b5:	eb e8                	jmp    c000d79f <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d7b7:	43                   	inc    ebx
c000d7b8:	eb dd                	jmp    c000d797 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d7ba:	83 c4 1c             	add    esp,0x1c
c000d7bd:	5b                   	pop    ebx
c000d7be:	5e                   	pop    esi
c000d7bf:	5f                   	pop    edi
c000d7c0:	5d                   	pop    ebp
c000d7c1:	c3                   	ret    

c000d7c2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d7c2:	55                   	push   ebp
c000d7c3:	57                   	push   edi
c000d7c4:	31 ff                	xor    edi,edi
c000d7c6:	56                   	push   esi
c000d7c7:	53                   	push   ebx
c000d7c8:	83 ec 1c             	sub    esp,0x1c
c000d7cb:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d7cf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d7d3:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d7da:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d7df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7e3:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d7e7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d7eb:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d7ee:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d7f2:	01 f9                	add    ecx,edi
c000d7f4:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000d7f8:	7d 2f                	jge    c000d829 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000d7fa:	31 f6                	xor    esi,esi
c000d7fc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d800:	01 f2                	add    edx,esi
c000d802:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d806:	7d 1a                	jge    c000d822 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000d808:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d80b:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000d80e:	46                   	inc    esi
c000d80f:	51                   	push   ecx
c000d810:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d814:	52                   	push   edx
c000d815:	55                   	push   ebp
c000d816:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d819:	83 c4 10             	add    esp,0x10
c000d81c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d820:	eb da                	jmp    c000d7fc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000d822:	47                   	inc    edi
c000d823:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000d827:	eb c5                	jmp    c000d7ee <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000d829:	83 c4 1c             	add    esp,0x1c
c000d82c:	5b                   	pop    ebx
c000d82d:	5e                   	pop    esi
c000d82e:	5f                   	pop    edi
c000d82f:	5d                   	pop    ebp
c000d830:	c3                   	ret    
c000d831:	90                   	nop

c000d832 <Video::blit(unsigned int*, int, int, int, int)>:
c000d832:	55                   	push   ebp
c000d833:	57                   	push   edi
c000d834:	56                   	push   esi
c000d835:	53                   	push   ebx
c000d836:	83 ec 1c             	sub    esp,0x1c
c000d839:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d83d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d841:	85 c0                	test   eax,eax
c000d843:	79 02                	jns    c000d847 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000d845:	31 c0                	xor    eax,eax
c000d847:	c1 e0 02             	shl    eax,0x2
c000d84a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000d84e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d852:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d856:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000d85a:	39 d8                	cmp    eax,ebx
c000d85c:	7e 49                	jle    c000d8a7 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d85e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d864:	7c 41                	jl     c000d8a7 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d866:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d86a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d86e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d872:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000d876:	39 f9                	cmp    ecx,edi
c000d878:	7e 22                	jle    c000d89c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000d87a:	83 c5 04             	add    ebp,0x4
c000d87d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d883:	7c 14                	jl     c000d899 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000d885:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d887:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000d88a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d88e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d892:	56                   	push   esi
c000d893:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000d896:	83 c4 10             	add    esp,0x10
c000d899:	47                   	inc    edi
c000d89a:	eb d2                	jmp    c000d86e <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000d89c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d8a0:	43                   	inc    ebx
c000d8a1:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d8a5:	eb ab                	jmp    c000d852 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000d8a7:	83 c4 1c             	add    esp,0x1c
c000d8aa:	5b                   	pop    ebx
c000d8ab:	5e                   	pop    esi
c000d8ac:	5f                   	pop    edi
c000d8ad:	5d                   	pop    ebp
c000d8ae:	c3                   	ret    
c000d8af:	90                   	nop

c000d8b0 <Video::clearScreen(unsigned int)>:
c000d8b0:	57                   	push   edi
c000d8b1:	56                   	push   esi
c000d8b2:	53                   	push   ebx
c000d8b3:	31 db                	xor    ebx,ebx
c000d8b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d8b9:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d8bf:	7e 1f                	jle    c000d8e0 <Video::clearScreen(unsigned int)+0x30>
c000d8c1:	31 ff                	xor    edi,edi
c000d8c3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d8c9:	7e 12                	jle    c000d8dd <Video::clearScreen(unsigned int)+0x2d>
c000d8cb:	8b 06                	mov    eax,DWORD PTR [esi]
c000d8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8d1:	53                   	push   ebx
c000d8d2:	57                   	push   edi
c000d8d3:	47                   	inc    edi
c000d8d4:	56                   	push   esi
c000d8d5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d8d8:	83 c4 10             	add    esp,0x10
c000d8db:	eb e6                	jmp    c000d8c3 <Video::clearScreen(unsigned int)+0x13>
c000d8dd:	43                   	inc    ebx
c000d8de:	eb d9                	jmp    c000d8b9 <Video::clearScreen(unsigned int)+0x9>
c000d8e0:	5b                   	pop    ebx
c000d8e1:	5e                   	pop    esi
c000d8e2:	5f                   	pop    edi
c000d8e3:	c3                   	ret    

c000d8e4 <Video::putpixel(int, int, unsigned int)>:
c000d8e4:	c7 44 24 04 44 e2 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e244
c000d8ec:	e9 be 28 00 00       	jmp    c00101af <KePanic(char const*)>
c000d8f1:	90                   	nop

c000d8f2 <Video::Video(char const*)>:
c000d8f2:	83 ec 0c             	sub    esp,0xc
c000d8f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8f9:	83 ec 08             	sub    esp,0x8
c000d8fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d900:	50                   	push   eax
c000d901:	e8 fe e1 ff ff       	call   c000bb04 <Device::Device(char const*)>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	ba b4 e2 01 c0       	mov    edx,0xc001e2b4
c000d90e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d912:	89 10                	mov    DWORD PTR [eax],edx
c000d914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d918:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000d922:	90                   	nop
c000d923:	83 c4 0c             	add    esp,0xc
c000d926:	c3                   	ret    
c000d927:	90                   	nop

c000d928 <Video::~Video()>:
c000d928:	83 ec 0c             	sub    esp,0xc
c000d92b:	ba b4 e2 01 c0       	mov    edx,0xc001e2b4
c000d930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d934:	89 10                	mov    DWORD PTR [eax],edx
c000d936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d93a:	83 ec 0c             	sub    esp,0xc
c000d93d:	50                   	push   eax
c000d93e:	e8 2b df ff ff       	call   c000b86e <Device::~Device()>
c000d943:	83 c4 10             	add    esp,0x10
c000d946:	90                   	nop
c000d947:	83 c4 0c             	add    esp,0xc
c000d94a:	c3                   	ret    
c000d94b:	90                   	nop

c000d94c <Video::~Video()>:
c000d94c:	83 ec 0c             	sub    esp,0xc
c000d94f:	83 ec 0c             	sub    esp,0xc
c000d952:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d956:	e8 cd ff ff ff       	call   c000d928 <Video::~Video()>
c000d95b:	83 c4 10             	add    esp,0x10
c000d95e:	83 ec 08             	sub    esp,0x8
c000d961:	68 64 01 00 00       	push   0x164
c000d966:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d96a:	e8 c8 ca ff ff       	call   c000a437 <operator delete(void*, unsigned long)>
c000d96f:	83 c4 10             	add    esp,0x10
c000d972:	83 c4 0c             	add    esp,0xc
c000d975:	c3                   	ret    

c000d976 <Video::isMonochrome()>:
c000d976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d97a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000d980:	c3                   	ret    
c000d981:	90                   	nop

c000d982 <Video::getWidth()>:
c000d982:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d986:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d98c:	c3                   	ret    
c000d98d:	90                   	nop

c000d98e <Video::getHeight()>:
c000d98e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d992:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d998:	c3                   	ret    
c000d999:	90                   	nop

c000d99a <Video::drawCursor(int, int, unsigned char*, int)>:
c000d99a:	55                   	push   ebp
c000d99b:	57                   	push   edi
c000d99c:	56                   	push   esi
c000d99d:	53                   	push   ebx
c000d99e:	83 ec 2c             	sub    esp,0x2c
c000d9a1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d9a5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d9a9:	83 f8 01             	cmp    eax,0x1
c000d9ac:	19 c9                	sbb    ecx,ecx
c000d9ae:	31 db                	xor    ebx,ebx
c000d9b0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000d9b4:	89 cd                	mov    ebp,ecx
c000d9b6:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000d9be:	f7 d5                	not    ebp
c000d9c0:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000d9c6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000d9ca:	01 d8                	add    eax,ebx
c000d9cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d9d0:	56                   	push   esi
c000d9d1:	e8 b8 ff ff ff       	call   c000d98e <Video::getHeight()>
c000d9d6:	59                   	pop    ecx
c000d9d7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d9db:	7e 70                	jle    c000da4d <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000d9dd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d9e1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000d9e5:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000d9e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d9ec:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d9f0:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000d9f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9fb:	89 f8                	mov    eax,edi
c000d9fd:	83 c0 20             	add    eax,0x20
c000da00:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000da04:	56                   	push   esi
c000da05:	e8 78 ff ff ff       	call   c000d982 <Video::getWidth()>
c000da0a:	5a                   	pop    edx
c000da0b:	39 c7                	cmp    edi,eax
c000da0d:	7d 34                	jge    c000da43 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000da0f:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000da14:	74 05                	je     c000da1b <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000da16:	8b 06                	mov    eax,DWORD PTR [esi]
c000da18:	55                   	push   ebp
c000da19:	eb 0d                	jmp    c000da28 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000da1b:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000da20:	74 12                	je     c000da34 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000da22:	8b 06                	mov    eax,DWORD PTR [esi]
c000da24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000da28:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000da2c:	57                   	push   edi
c000da2d:	56                   	push   esi
c000da2e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000da31:	83 c4 10             	add    esp,0x10
c000da34:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000da38:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000da3c:	47                   	inc    edi
c000da3d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000da41:	75 c1                	jne    c000da04 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000da43:	43                   	inc    ebx
c000da44:	83 fb 20             	cmp    ebx,0x20
c000da47:	0f 85 79 ff ff ff    	jne    c000d9c6 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000da4d:	83 c4 2c             	add    esp,0x2c
c000da50:	5b                   	pop    ebx
c000da51:	5e                   	pop    esi
c000da52:	5f                   	pop    edi
c000da53:	5d                   	pop    ebp
c000da54:	c3                   	ret    
c000da55:	90                   	nop

c000da56 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000da56:	55                   	push   ebp
c000da57:	57                   	push   edi
c000da58:	56                   	push   esi
c000da59:	53                   	push   ebx
c000da5a:	83 ec 28             	sub    esp,0x28
c000da5d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000da61:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000da65:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000da69:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000da6d:	c1 e6 08             	shl    esi,0x8
c000da70:	01 c6                	add    esi,eax
c000da72:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000da76:	c1 e0 08             	shl    eax,0x8
c000da79:	01 d0                	add    eax,edx
c000da7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000da7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da83:	0f af c6             	imul   eax,esi
c000da86:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000da8d:	50                   	push   eax
c000da8e:	e8 26 9d ff ff       	call   c00077b9 <malloc>
c000da93:	83 c4 10             	add    esp,0x10
c000da96:	89 c7                	mov    edi,eax
c000da98:	85 c0                	test   eax,eax
c000da9a:	75 10                	jne    c000daac <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000da9c:	83 ec 0c             	sub    esp,0xc
c000da9f:	68 65 e2 01 c0       	push   0xc001e265
c000daa4:	e8 06 27 00 00       	call   c00101af <KePanic(char const*)>
c000daa9:	83 c4 10             	add    esp,0x10
c000daac:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000daaf:	ba 12 00 00 00       	mov    edx,0x12
c000dab4:	84 c0                	test   al,al
c000dab6:	74 11                	je     c000dac9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000dab8:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000dabc:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000dac0:	c1 fa 03             	sar    edx,0x3
c000dac3:	0f af d1             	imul   edx,ecx
c000dac6:	83 c2 12             	add    edx,0x12
c000dac9:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000dacd:	74 04                	je     c000dad3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000dacf:	85 f6                	test   esi,esi
c000dad1:	75 12                	jne    c000dae5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000dad3:	83 ec 0c             	sub    esp,0xc
c000dad6:	68 75 e2 01 c0       	push   0xc001e275
c000dadb:	e8 4d ca ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c000dae0:	e9 b8 00 00 00       	jmp    c000db9d <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000dae5:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000dae9:	80 f9 02             	cmp    cl,0x2
c000daec:	0f 85 96 00 00 00    	jne    c000db88 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000daf2:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000daf7:	75 0e                	jne    c000db07 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000daf9:	84 c0                	test   al,al
c000dafb:	75 0a                	jne    c000db07 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dafd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000db00:	83 e8 18             	sub    eax,0x18
c000db03:	a8 f7                	test   al,0xf7
c000db05:	74 0a                	je     c000db11 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000db07:	83 ec 0c             	sub    esp,0xc
c000db0a:	68 8a e2 01 c0       	push   0xc001e28a
c000db0f:	eb 7f                	jmp    c000db90 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000db11:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000db19:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000db21:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000db25:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000db2d:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000db31:	75 0c                	jne    c000db3f <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000db33:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000db38:	c1 e0 18             	shl    eax,0x18
c000db3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db3f:	45                   	inc    ebp
c000db40:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000db45:	c1 e1 10             	shl    ecx,0x10
c000db48:	89 c8                	mov    eax,ecx
c000db4a:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000db4f:	c1 e1 08             	shl    ecx,0x8
c000db52:	09 c1                	or     ecx,eax
c000db54:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000db58:	09 c1                	or     ecx,eax
c000db5a:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000db5e:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000db62:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000db66:	c1 f8 03             	sar    eax,0x3
c000db69:	01 c2                	add    edx,eax
c000db6b:	89 e8                	mov    eax,ebp
c000db6d:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000db71:	39 c6                	cmp    esi,eax
c000db73:	7f b0                	jg     c000db25 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000db75:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000db79:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000db7d:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000db80:	7e 22                	jle    c000dba4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000db82:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000db86:	eb 99                	jmp    c000db21 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000db88:	50                   	push   eax
c000db89:	50                   	push   eax
c000db8a:	51                   	push   ecx
c000db8b:	68 98 e2 01 c0       	push   0xc001e298
c000db90:	e8 98 c9 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c000db95:	89 3c 24             	mov    DWORD PTR [esp],edi
c000db98:	e8 2c 9c ff ff       	call   c00077c9 <free>
c000db9d:	83 c4 10             	add    esp,0x10
c000dba0:	31 ff                	xor    edi,edi
c000dba2:	eb 0f                	jmp    c000dbb3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000dba4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dba8:	89 30                	mov    DWORD PTR [eax],esi
c000dbaa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dbae:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dbb1:	89 30                	mov    DWORD PTR [eax],esi
c000dbb3:	83 c4 1c             	add    esp,0x1c
c000dbb6:	89 f8                	mov    eax,edi
c000dbb8:	5b                   	pop    ebx
c000dbb9:	5e                   	pop    esi
c000dbba:	5f                   	pop    edi
c000dbbb:	5d                   	pop    ebp
c000dbbc:	c3                   	ret    
c000dbbd:	90                   	nop

c000dbbe <Video::putTGA(int, int, unsigned char*, int)>:
c000dbbe:	55                   	push   ebp
c000dbbf:	57                   	push   edi
c000dbc0:	56                   	push   esi
c000dbc1:	53                   	push   ebx
c000dbc2:	83 ec 28             	sub    esp,0x28
c000dbc5:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000dbc9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dbcd:	50                   	push   eax
c000dbce:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dbd2:	50                   	push   eax
c000dbd3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dbd7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dbdb:	56                   	push   esi
c000dbdc:	e8 75 fe ff ff       	call   c000da56 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000dbe1:	83 c4 20             	add    esp,0x20
c000dbe4:	85 c0                	test   eax,eax
c000dbe6:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000dbea:	74 35                	je     c000dc21 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dbec:	89 c7                	mov    edi,eax
c000dbee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dbf2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dbf6:	39 d8                	cmp    eax,ebx
c000dbf8:	7e 27                	jle    c000dc21 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dbfa:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000dbfe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dc02:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000dc06:	39 e8                	cmp    eax,ebp
c000dc08:	7e 14                	jle    c000dc1e <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000dc0a:	8b 06                	mov    eax,DWORD PTR [esi]
c000dc0c:	83 c7 04             	add    edi,0x4
c000dc0f:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000dc12:	53                   	push   ebx
c000dc13:	55                   	push   ebp
c000dc14:	45                   	inc    ebp
c000dc15:	56                   	push   esi
c000dc16:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dc19:	83 c4 10             	add    esp,0x10
c000dc1c:	eb e0                	jmp    c000dbfe <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000dc1e:	43                   	inc    ebx
c000dc1f:	eb cd                	jmp    c000dbee <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000dc21:	83 c4 1c             	add    esp,0x1c
c000dc24:	5b                   	pop    ebx
c000dc25:	5e                   	pop    esi
c000dc26:	5f                   	pop    edi
c000dc27:	5d                   	pop    ebp
c000dc28:	c3                   	ret    
c000dc29:	66 90                	xchg   ax,ax
c000dc2b:	90                   	nop

c000dc2c <ACPI::close(int, int, void*)>:
c000dc2c:	83 ec 1c             	sub    esp,0x1c
c000dc2f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000dc37:	74 0b                	je     c000dc44 <ACPI::close(int, int, void*)+0x18>
c000dc39:	b8 00 00 00 00       	mov    eax,0x0
c000dc3e:	e9 9d 00 00 00       	jmp    c000dce0 <ACPI::close(int, int, void*)+0xb4>
c000dc43:	90                   	nop
c000dc44:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000dc49:	75 29                	jne    c000dc74 <ACPI::close(int, int, void*)+0x48>
c000dc4b:	a1 a8 44 02 c0       	mov    eax,ds:0xc00244a8
c000dc50:	85 c0                	test   eax,eax
c000dc52:	74 08                	je     c000dc5c <ACPI::close(int, int, void*)+0x30>
c000dc54:	a1 a8 44 02 c0       	mov    eax,ds:0xc00244a8
c000dc59:	ff d0                	call   eax
c000dc5b:	90                   	nop
c000dc5c:	83 ec 0c             	sub    esp,0xc
c000dc5f:	68 f4 e2 01 c0       	push   0xc001e2f4
c000dc64:	e8 46 25 00 00       	call   c00101af <KePanic(char const*)>
c000dc69:	83 c4 10             	add    esp,0x10
c000dc6c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dc71:	eb 6d                	jmp    c000dce0 <ACPI::close(int, int, void*)+0xb4>
c000dc73:	90                   	nop
c000dc74:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000dc79:	75 5d                	jne    c000dcd8 <ACPI::close(int, int, void*)+0xac>
c000dc7b:	a1 a4 44 02 c0       	mov    eax,ds:0xc00244a4
c000dc80:	85 c0                	test   eax,eax
c000dc82:	74 08                	je     c000dc8c <ACPI::close(int, int, void*)+0x60>
c000dc84:	a1 a4 44 02 c0       	mov    eax,ds:0xc00244a4
c000dc89:	ff d0                	call   eax
c000dc8b:	90                   	nop
c000dc8c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000dc91:	8d 76 00             	lea    esi,[esi+0x0]
c000dc94:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dc98:	25 ff 00 00 00       	and    eax,0xff
c000dc9d:	83 e0 02             	and    eax,0x2
c000dca0:	74 1e                	je     c000dcc0 <ACPI::close(int, int, void*)+0x94>
c000dca2:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000dca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dcad:	89 c2                	mov    edx,eax
c000dcaf:	ec                   	in     al,dx
c000dcb0:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000dcb4:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000dcb8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000dcbc:	eb d6                	jmp    c000dc94 <ACPI::close(int, int, void*)+0x68>
c000dcbe:	66 90                	xchg   ax,ax
c000dcc0:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000dcc7:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000dccc:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000dcd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dcd4:	ee                   	out    dx,al
c000dcd5:	8d 76 00             	lea    esi,[esi+0x0]
c000dcd8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dcdd:	8d 76 00             	lea    esi,[esi+0x0]
c000dce0:	83 c4 1c             	add    esp,0x1c
c000dce3:	c3                   	ret    

c000dce4 <findRSDP()>:
c000dce4:	83 ec 1c             	sub    esp,0x1c
c000dce7:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000dcec:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dcf2:	83 e0 04             	and    eax,0x4
c000dcf5:	84 c0                	test   al,al
c000dcf7:	75 07                	jne    c000dd00 <findRSDP()+0x1c>
c000dcf9:	b8 00 00 00 00       	mov    eax,0x0
c000dcfe:	eb 70                	jmp    c000dd70 <findRSDP()+0x8c>
c000dd00:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c000dd05:	3d ff 07 00 00       	cmp    eax,0x7ff
c000dd0a:	7f 1c                	jg     c000dd28 <findRSDP()+0x44>
c000dd0c:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000dd11:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000dd17:	83 e2 fb             	and    edx,0xfffffffb
c000dd1a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000dd20:	b8 00 00 00 00       	mov    eax,0x0
c000dd25:	eb 49                	jmp    c000dd70 <findRSDP()+0x8c>
c000dd27:	90                   	nop
c000dd28:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000dd30:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000dd38:	77 2e                	ja     c000dd68 <findRSDP()+0x84>
c000dd3a:	83 ec 04             	sub    esp,0x4
c000dd3d:	6a 08                	push   0x8
c000dd3f:	68 8f e3 01 c0       	push   0xc001e38f
c000dd44:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dd48:	e8 43 26 ff ff       	call   c0000390 <memcmp>
c000dd4d:	83 c4 10             	add    esp,0x10
c000dd50:	85 c0                	test   eax,eax
c000dd52:	0f 94 c0             	sete   al
c000dd55:	84 c0                	test   al,al
c000dd57:	74 07                	je     c000dd60 <findRSDP()+0x7c>
c000dd59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dd5d:	eb 11                	jmp    c000dd70 <findRSDP()+0x8c>
c000dd5f:	90                   	nop
c000dd60:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000dd65:	eb c9                	jmp    c000dd30 <findRSDP()+0x4c>
c000dd67:	90                   	nop
c000dd68:	b8 00 00 00 00       	mov    eax,0x0
c000dd6d:	8d 76 00             	lea    esi,[esi+0x0]
c000dd70:	83 c4 1c             	add    esp,0x1c
c000dd73:	c3                   	ret    

c000dd74 <loadACPITables(unsigned char*)>:
c000dd74:	57                   	push   edi
c000dd75:	56                   	push   esi
c000dd76:	53                   	push   ebx
c000dd77:	83 ec 60             	sub    esp,0x60
c000dd7a:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000dd7f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dd85:	83 e0 04             	and    eax,0x4
c000dd88:	84 c0                	test   al,al
c000dd8a:	0f 84 3c 02 00 00    	je     c000dfcc <loadACPITables(unsigned char*)+0x258>
c000dd90:	a0 c0 46 02 c0       	mov    al,ds:0xc00246c0
c000dd95:	84 c0                	test   al,al
c000dd97:	74 77                	je     c000de10 <loadACPITables(unsigned char*)+0x9c>
c000dd99:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dd9d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000dda1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dda5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dda8:	83 e8 24             	sub    eax,0x24
c000ddab:	c1 e8 03             	shr    eax,0x3
c000ddae:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ddb2:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000ddba:	66 90                	xchg   ax,ax
c000ddbc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ddc0:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000ddc4:	0f 8d b6 00 00 00    	jge    c000de80 <loadACPITables(unsigned char*)+0x10c>
c000ddca:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ddce:	83 c0 24             	add    eax,0x24
c000ddd1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ddd5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ddd9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000dddd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dde1:	c1 e0 03             	shl    eax,0x3
c000dde4:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000dde8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ddec:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ddef:	8b 00                	mov    eax,DWORD PTR [eax]
c000ddf1:	89 c1                	mov    ecx,eax
c000ddf3:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000ddf8:	8d 50 01             	lea    edx,[eax+0x1]
c000ddfb:	89 15 ac 44 02 c0    	mov    DWORD PTR ds:0xc00244ac,edx
c000de01:	89 ca                	mov    edx,ecx
c000de03:	89 14 c5 c4 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbb3c],edx
c000de0a:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000de0e:	eb ac                	jmp    c000ddbc <loadACPITables(unsigned char*)+0x48>
c000de10:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000de14:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000de18:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000de1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000de1f:	83 e8 24             	sub    eax,0x24
c000de22:	c1 e8 02             	shr    eax,0x2
c000de25:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000de29:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000de31:	8d 76 00             	lea    esi,[esi+0x0]
c000de34:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000de38:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000de3c:	7d 42                	jge    c000de80 <loadACPITables(unsigned char*)+0x10c>
c000de3e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000de42:	83 c0 24             	add    eax,0x24
c000de45:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000de49:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000de4d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000de51:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000de55:	c1 e0 02             	shl    eax,0x2
c000de58:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000de5c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de60:	8b 08                	mov    ecx,DWORD PTR [eax]
c000de62:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000de67:	8d 50 01             	lea    edx,[eax+0x1]
c000de6a:	89 15 ac 44 02 c0    	mov    DWORD PTR ds:0xc00244ac,edx
c000de70:	89 ca                	mov    edx,ecx
c000de72:	89 14 c5 c4 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbb3c],edx
c000de79:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000de7d:	eb b5                	jmp    c000de34 <loadACPITables(unsigned char*)+0xc0>
c000de7f:	90                   	nop
c000de80:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000de88:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000de8d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000de91:	0f 8d 39 01 00 00    	jge    c000dfd0 <loadACPITables(unsigned char*)+0x25c>
c000de97:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000de9b:	8b 04 c5 c4 44 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdbb3c]
c000dea2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dea6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000deaa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000deae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000deb2:	25 ff 0f 00 00       	and    eax,0xfff
c000deb7:	89 c6                	mov    esi,eax
c000deb9:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000debf:	83 ec 0c             	sub    esp,0xc
c000dec2:	6a 01                	push   0x1
c000dec4:	e8 bc b3 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000dec9:	83 c4 10             	add    esp,0x10
c000decc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ded0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ded6:	83 ec 0c             	sub    esp,0xc
c000ded9:	6a 01                	push   0x1
c000dedb:	6a 01                	push   0x1
c000dedd:	50                   	push   eax
c000dede:	52                   	push   edx
c000dedf:	53                   	push   ebx
c000dee0:	e8 49 bd ff ff       	call   c0009c2e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000dee5:	83 c4 20             	add    esp,0x20
c000dee8:	09 f0                	or     eax,esi
c000deea:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000deee:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000def2:	c1 e0 03             	shl    eax,0x3
c000def5:	05 c0 44 02 c0       	add    eax,0xc00244c0
c000defa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000defe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df06:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000df0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000df12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df16:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000df1a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000df1e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000df22:	89 c6                	mov    esi,eax
c000df24:	89 d7                	mov    edi,edx
c000df26:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000df28:	89 c8                	mov    eax,ecx
c000df2a:	89 fa                	mov    edx,edi
c000df2c:	89 f3                	mov    ebx,esi
c000df2e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000df32:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000df36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000df3a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000df41:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000df45:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000df49:	05 00 10 00 00       	add    eax,0x1000
c000df4e:	c1 e8 0c             	shr    eax,0xc
c000df51:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000df55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df59:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df5d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df61:	25 ff 0f 00 00       	and    eax,0xfff
c000df66:	89 c6                	mov    esi,eax
c000df68:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000df6e:	83 ec 0c             	sub    esp,0xc
c000df71:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000df75:	e8 0b b3 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000df7a:	83 c4 10             	add    esp,0x10
c000df7d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000df81:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000df87:	83 ec 0c             	sub    esp,0xc
c000df8a:	6a 01                	push   0x1
c000df8c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000df90:	50                   	push   eax
c000df91:	52                   	push   edx
c000df92:	53                   	push   ebx
c000df93:	e8 96 bc ff ff       	call   c0009c2e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000df98:	83 c4 20             	add    esp,0x20
c000df9b:	09 f0                	or     eax,esi
c000df9d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dfa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfa5:	83 ec 0c             	sub    esp,0xc
c000dfa8:	50                   	push   eax
c000dfa9:	e8 07 b6 ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c000dfae:	83 c4 10             	add    esp,0x10
c000dfb1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000dfb5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000dfb9:	89 14 c5 c4 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbb3c],edx
c000dfc0:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000dfc4:	e9 bf fe ff ff       	jmp    c000de88 <loadACPITables(unsigned char*)+0x114>
c000dfc9:	8d 76 00             	lea    esi,[esi+0x0]
c000dfcc:	90                   	nop
c000dfcd:	8d 76 00             	lea    esi,[esi+0x0]
c000dfd0:	83 c4 60             	add    esp,0x60
c000dfd3:	5b                   	pop    ebx
c000dfd4:	5e                   	pop    esi
c000dfd5:	5f                   	pop    edi
c000dfd6:	c3                   	ret    
c000dfd7:	90                   	nop

c000dfd8 <findRSDT(unsigned char*)>:
c000dfd8:	57                   	push   edi
c000dfd9:	56                   	push   esi
c000dfda:	53                   	push   ebx
c000dfdb:	83 ec 50             	sub    esp,0x50
c000dfde:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000dfe3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dfe9:	83 e0 04             	and    eax,0x4
c000dfec:	84 c0                	test   al,al
c000dfee:	75 0c                	jne    c000dffc <findRSDT(unsigned char*)+0x24>
c000dff0:	b8 00 00 00 00       	mov    eax,0x0
c000dff5:	e9 26 01 00 00       	jmp    c000e120 <findRSDT(unsigned char*)+0x148>
c000dffa:	66 90                	xchg   ax,ax
c000dffc:	89 e0                	mov    eax,esp
c000dffe:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e002:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e006:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e00a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e012:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e016:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e01a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e01e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e022:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e026:	89 c6                	mov    esi,eax
c000e028:	89 d7                	mov    edi,edx
c000e02a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e02c:	89 c8                	mov    eax,ecx
c000e02e:	89 fa                	mov    edx,edi
c000e030:	89 f3                	mov    ebx,esi
c000e032:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e036:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e03a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e03e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e042:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e046:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e04e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e052:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e056:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e05a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e05e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e062:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e066:	25 ff 0f 00 00       	and    eax,0xfff
c000e06b:	89 c6                	mov    esi,eax
c000e06d:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000e073:	83 ec 0c             	sub    esp,0xc
c000e076:	6a 02                	push   0x2
c000e078:	e8 08 b2 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000e07d:	83 c4 10             	add    esp,0x10
c000e080:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e084:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e08a:	83 ec 0c             	sub    esp,0xc
c000e08d:	6a 01                	push   0x1
c000e08f:	6a 02                	push   0x2
c000e091:	50                   	push   eax
c000e092:	52                   	push   edx
c000e093:	53                   	push   ebx
c000e094:	e8 95 bb ff ff       	call   c0009c2e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e099:	83 c4 20             	add    esp,0x20
c000e09c:	09 f0                	or     eax,esi
c000e09e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e0a2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e0a6:	25 ff 0f 00 00       	and    eax,0xfff
c000e0ab:	89 c6                	mov    esi,eax
c000e0ad:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000e0b3:	83 ec 0c             	sub    esp,0xc
c000e0b6:	6a 02                	push   0x2
c000e0b8:	e8 c8 b1 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e0c4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e0ca:	83 ec 0c             	sub    esp,0xc
c000e0cd:	6a 01                	push   0x1
c000e0cf:	6a 02                	push   0x2
c000e0d1:	50                   	push   eax
c000e0d2:	52                   	push   edx
c000e0d3:	53                   	push   ebx
c000e0d4:	e8 55 bb ff ff       	call   c0009c2e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e0d9:	83 c4 20             	add    esp,0x20
c000e0dc:	09 f0                	or     eax,esi
c000e0de:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e0e2:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e0e7:	75 13                	jne    c000e0fc <findRSDT(unsigned char*)+0x124>
c000e0e9:	c6 05 c0 46 02 c0 00 	mov    BYTE PTR ds:0xc00246c0,0x0
c000e0f0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e0f4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e0f8:	eb 22                	jmp    c000e11c <findRSDT(unsigned char*)+0x144>
c000e0fa:	66 90                	xchg   ax,ax
c000e0fc:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e101:	75 11                	jne    c000e114 <findRSDT(unsigned char*)+0x13c>
c000e103:	c6 05 c0 46 02 c0 01 	mov    BYTE PTR ds:0xc00246c0,0x1
c000e10a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e10e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e112:	eb 08                	jmp    c000e11c <findRSDT(unsigned char*)+0x144>
c000e114:	b8 00 00 00 00       	mov    eax,0x0
c000e119:	eb 05                	jmp    c000e120 <findRSDT(unsigned char*)+0x148>
c000e11b:	90                   	nop
c000e11c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e120:	83 c4 50             	add    esp,0x50
c000e123:	5b                   	pop    ebx
c000e124:	5e                   	pop    esi
c000e125:	5f                   	pop    edi
c000e126:	c3                   	ret    
c000e127:	90                   	nop

c000e128 <findDataTable(unsigned char*, char*)>:
c000e128:	83 ec 1c             	sub    esp,0x1c
c000e12b:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e130:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e136:	83 e0 04             	and    eax,0x4
c000e139:	84 c0                	test   al,al
c000e13b:	75 07                	jne    c000e144 <findDataTable(unsigned char*, char*)+0x1c>
c000e13d:	b8 00 00 00 00       	mov    eax,0x0
c000e142:	eb 58                	jmp    c000e19c <findDataTable(unsigned char*, char*)+0x74>
c000e144:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e14c:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000e151:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e155:	7d 3d                	jge    c000e194 <findDataTable(unsigned char*, char*)+0x6c>
c000e157:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e15b:	c1 e0 03             	shl    eax,0x3
c000e15e:	05 c0 44 02 c0       	add    eax,0xc00244c0
c000e163:	83 ec 04             	sub    esp,0x4
c000e166:	6a 04                	push   0x4
c000e168:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e16c:	50                   	push   eax
c000e16d:	e8 1e 22 ff ff       	call   c0000390 <memcmp>
c000e172:	83 c4 10             	add    esp,0x10
c000e175:	85 c0                	test   eax,eax
c000e177:	0f 94 c0             	sete   al
c000e17a:	84 c0                	test   al,al
c000e17c:	74 0e                	je     c000e18c <findDataTable(unsigned char*, char*)+0x64>
c000e17e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e182:	8b 04 c5 c4 44 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdbb3c]
c000e189:	eb 11                	jmp    c000e19c <findDataTable(unsigned char*, char*)+0x74>
c000e18b:	90                   	nop
c000e18c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e190:	eb ba                	jmp    c000e14c <findDataTable(unsigned char*, char*)+0x24>
c000e192:	66 90                	xchg   ax,ax
c000e194:	b8 00 00 00 00       	mov    eax,0x0
c000e199:	8d 76 00             	lea    esi,[esi+0x0]
c000e19c:	83 c4 1c             	add    esp,0x1c
c000e19f:	c3                   	ret    

c000e1a0 <scanMADT()>:
c000e1a0:	53                   	push   ebx
c000e1a1:	83 ec 38             	sub    esp,0x38
c000e1a4:	a1 d0 1e 02 c0       	mov    eax,ds:0xc0021ed0
c000e1a9:	25 00 04 00 00       	and    eax,0x400
c000e1ae:	74 14                	je     c000e1c4 <scanMADT()+0x24>
c000e1b0:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e1b5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e1bb:	83 e2 fb             	and    edx,0xfffffffb
c000e1be:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e1c4:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e1c9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e1cf:	83 e0 04             	and    eax,0x4
c000e1d2:	84 c0                	test   al,al
c000e1d4:	0f 84 8a 04 00 00    	je     c000e664 <scanMADT()+0x4c4>
c000e1da:	e8 05 fb ff ff       	call   c000dce4 <findRSDP()>
c000e1df:	a3 cc 46 02 c0       	mov    ds:0xc00246cc,eax
c000e1e4:	a1 cc 46 02 c0       	mov    eax,ds:0xc00246cc
c000e1e9:	85 c0                	test   eax,eax
c000e1eb:	75 1b                	jne    c000e208 <scanMADT()+0x68>
c000e1ed:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e1f2:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e1f8:	83 e2 fb             	and    edx,0xfffffffb
c000e1fb:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e201:	e9 66 04 00 00       	jmp    c000e66c <scanMADT()+0x4cc>
c000e206:	66 90                	xchg   ax,ax
c000e208:	a1 cc 46 02 c0       	mov    eax,ds:0xc00246cc
c000e20d:	83 ec 0c             	sub    esp,0xc
c000e210:	50                   	push   eax
c000e211:	e8 c2 fd ff ff       	call   c000dfd8 <findRSDT(unsigned char*)>
c000e216:	83 c4 10             	add    esp,0x10
c000e219:	a3 c8 46 02 c0       	mov    ds:0xc00246c8,eax
c000e21e:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e223:	85 c0                	test   eax,eax
c000e225:	75 19                	jne    c000e240 <scanMADT()+0xa0>
c000e227:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e22c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e232:	83 e2 fb             	and    edx,0xfffffffb
c000e235:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e23b:	e9 2c 04 00 00       	jmp    c000e66c <scanMADT()+0x4cc>
c000e240:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e245:	83 ec 0c             	sub    esp,0xc
c000e248:	50                   	push   eax
c000e249:	e8 26 fb ff ff       	call   c000dd74 <loadACPITables(unsigned char*)>
c000e24e:	83 c4 10             	add    esp,0x10
c000e251:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e256:	83 ec 08             	sub    esp,0x8
c000e259:	68 98 e3 01 c0       	push   0xc001e398
c000e25e:	50                   	push   eax
c000e25f:	e8 c4 fe ff ff       	call   c000e128 <findDataTable(unsigned char*, char*)>
c000e264:	83 c4 10             	add    esp,0x10
c000e267:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e26b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e270:	75 1a                	jne    c000e28c <scanMADT()+0xec>
c000e272:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e277:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e27d:	83 e2 fe             	and    edx,0xfffffffe
c000e280:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e286:	e9 e1 03 00 00       	jmp    c000e66c <scanMADT()+0x4cc>
c000e28b:	90                   	nop
c000e28c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e294:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e298:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e29b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e29f:	0f 87 c7 03 00 00    	ja     c000e66c <scanMADT()+0x4cc>
c000e2a5:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e2ad:	0f 87 b9 03 00 00    	ja     c000e66c <scanMADT()+0x4cc>
c000e2b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2b7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e2bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2bf:	8d 50 01             	lea    edx,[eax+0x1]
c000e2c2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e2c6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e2ca:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e2ce:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e2d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2d6:	8d 50 01             	lea    edx,[eax+0x1]
c000e2d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e2dd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e2e1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e2e5:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e2e9:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e2ee:	0f 86 74 03 00 00    	jbe    c000e668 <scanMADT()+0x4c8>
c000e2f4:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e2f9:	75 5d                	jne    c000e358 <scanMADT()+0x1b8>
c000e2fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2ff:	8d 50 01             	lea    edx,[eax+0x1]
c000e302:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e306:	8a 15 c0 48 02 c0    	mov    dl,BYTE PTR ds:0xc00248c0
c000e30c:	81 e2 ff 00 00 00    	and    edx,0xff
c000e312:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e316:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e31a:	88 82 00 49 02 c0    	mov    BYTE PTR [edx-0x3ffdb700],al
c000e320:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e324:	8d 42 01             	lea    eax,[edx+0x1]
c000e327:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e32b:	a0 c0 48 02 c0       	mov    al,ds:0xc00248c0
c000e330:	8d 48 01             	lea    ecx,[eax+0x1]
c000e333:	88 0d c0 48 02 c0    	mov    BYTE PTR ds:0xc00248c0,cl
c000e339:	25 ff 00 00 00       	and    eax,0xff
c000e33e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e342:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e346:	88 90 e0 48 02 c0    	mov    BYTE PTR [eax-0x3ffdb720],dl
c000e34c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e351:	e9 f6 02 00 00       	jmp    c000e64c <scanMADT()+0x4ac>
c000e356:	66 90                	xchg   ax,ax
c000e358:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e35d:	0f 85 29 01 00 00    	jne    c000e48c <scanMADT()+0x2ec>
c000e363:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e367:	8d 50 01             	lea    edx,[eax+0x1]
c000e36a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e36e:	8a 15 80 47 02 c0    	mov    dl,BYTE PTR ds:0xc0024780
c000e374:	81 e2 ff 00 00 00    	and    edx,0xff
c000e37a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e37e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e382:	88 82 a0 47 02 c0    	mov    BYTE PTR [edx-0x3ffdb860],al
c000e388:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e38c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e390:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e394:	01 d0                	add    eax,edx
c000e396:	83 c0 2c             	add    eax,0x2c
c000e399:	8a 00                	mov    al,BYTE PTR [eax]
c000e39b:	31 d2                	xor    edx,edx
c000e39d:	88 c2                	mov    dl,al
c000e39f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3a3:	8d 48 01             	lea    ecx,[eax+0x1]
c000e3a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3aa:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e3ae:	25 ff 00 00 00       	and    eax,0xff
c000e3b3:	c1 e0 08             	shl    eax,0x8
c000e3b6:	89 d1                	mov    ecx,edx
c000e3b8:	09 c1                	or     ecx,eax
c000e3ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3be:	8d 50 02             	lea    edx,[eax+0x2]
c000e3c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3c5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e3c9:	25 ff 00 00 00       	and    eax,0xff
c000e3ce:	c1 e0 10             	shl    eax,0x10
c000e3d1:	09 c1                	or     ecx,eax
c000e3d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3d7:	8d 50 03             	lea    edx,[eax+0x3]
c000e3da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3de:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e3e2:	25 ff 00 00 00       	and    eax,0xff
c000e3e7:	c1 e0 18             	shl    eax,0x18
c000e3ea:	09 c1                	or     ecx,eax
c000e3ec:	89 ca                	mov    edx,ecx
c000e3ee:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c000e3f3:	25 ff 00 00 00       	and    eax,0xff
c000e3f8:	89 14 85 c0 47 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb840],edx
c000e3ff:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e404:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e408:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e40c:	01 d0                	add    eax,edx
c000e40e:	83 c0 2c             	add    eax,0x2c
c000e411:	8a 00                	mov    al,BYTE PTR [eax]
c000e413:	31 d2                	xor    edx,edx
c000e415:	88 c2                	mov    dl,al
c000e417:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e41b:	8d 48 01             	lea    ecx,[eax+0x1]
c000e41e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e422:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e426:	25 ff 00 00 00       	and    eax,0xff
c000e42b:	c1 e0 08             	shl    eax,0x8
c000e42e:	89 d1                	mov    ecx,edx
c000e430:	09 c1                	or     ecx,eax
c000e432:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e436:	8d 50 02             	lea    edx,[eax+0x2]
c000e439:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e43d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e441:	25 ff 00 00 00       	and    eax,0xff
c000e446:	c1 e0 10             	shl    eax,0x10
c000e449:	09 c1                	or     ecx,eax
c000e44b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e44f:	8d 50 03             	lea    edx,[eax+0x3]
c000e452:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e456:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e45a:	25 ff 00 00 00       	and    eax,0xff
c000e45f:	c1 e0 18             	shl    eax,0x18
c000e462:	09 c1                	or     ecx,eax
c000e464:	89 ca                	mov    edx,ecx
c000e466:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c000e46b:	25 ff 00 00 00       	and    eax,0xff
c000e470:	89 14 85 40 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb7c0],edx
c000e477:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e47c:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c000e481:	40                   	inc    eax
c000e482:	a2 80 47 02 c0       	mov    ds:0xc0024780,al
c000e487:	e9 c0 01 00 00       	jmp    c000e64c <scanMADT()+0x4ac>
c000e48c:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e491:	0f 85 fd 00 00 00    	jne    c000e594 <scanMADT()+0x3f4>
c000e497:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e49b:	8d 50 01             	lea    edx,[eax+0x1]
c000e49e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e4a2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4a6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e4aa:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e4ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4b2:	8d 50 01             	lea    edx,[eax+0x1]
c000e4b5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e4b9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4bd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e4c1:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e4c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4c9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4cd:	01 d0                	add    eax,edx
c000e4cf:	83 c0 2c             	add    eax,0x2c
c000e4d2:	8a 00                	mov    al,BYTE PTR [eax]
c000e4d4:	31 d2                	xor    edx,edx
c000e4d6:	88 c2                	mov    dl,al
c000e4d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4dc:	8d 48 01             	lea    ecx,[eax+0x1]
c000e4df:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4e3:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e4e7:	25 ff 00 00 00       	and    eax,0xff
c000e4ec:	c1 e0 08             	shl    eax,0x8
c000e4ef:	89 d1                	mov    ecx,edx
c000e4f1:	09 c1                	or     ecx,eax
c000e4f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4f7:	8d 50 02             	lea    edx,[eax+0x2]
c000e4fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4fe:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e502:	25 ff 00 00 00       	and    eax,0xff
c000e507:	c1 e0 10             	shl    eax,0x10
c000e50a:	09 c1                	or     ecx,eax
c000e50c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e510:	8d 50 03             	lea    edx,[eax+0x3]
c000e513:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e517:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e51b:	25 ff 00 00 00       	and    eax,0xff
c000e520:	c1 e0 18             	shl    eax,0x18
c000e523:	09 c8                	or     eax,ecx
c000e525:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e529:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e52e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e532:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e536:	01 d0                	add    eax,edx
c000e538:	83 c0 2c             	add    eax,0x2c
c000e53b:	8a 00                	mov    al,BYTE PTR [eax]
c000e53d:	25 ff 00 00 00       	and    eax,0xff
c000e542:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e546:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e549:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e54d:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e551:	81 e2 ff 00 00 00    	and    edx,0xff
c000e557:	c1 e2 08             	shl    edx,0x8
c000e55a:	09 d0                	or     eax,edx
c000e55c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e561:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e566:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e56a:	25 ff 00 00 00       	and    eax,0xff
c000e56f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e573:	88 90 20 f8 01 c0    	mov    BYTE PTR [eax-0x3ffe07e0],dl
c000e579:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e57d:	31 d2                	xor    edx,edx
c000e57f:	88 c2                	mov    dl,al
c000e581:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e586:	66 89 84 12 60 47 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdb8a0],ax
c000e58e:	e9 b9 00 00 00       	jmp    c000e64c <scanMADT()+0x4ac>
c000e593:	90                   	nop
c000e594:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e599:	0f 85 a1 00 00 00    	jne    c000e640 <scanMADT()+0x4a0>
c000e59f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5a3:	8d 50 01             	lea    edx,[eax+0x1]
c000e5a6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e5aa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5ae:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e5b2:	25 ff 00 00 00       	and    eax,0xff
c000e5b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e5bb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5c3:	01 d0                	add    eax,edx
c000e5c5:	83 c0 2c             	add    eax,0x2c
c000e5c8:	8a 00                	mov    al,BYTE PTR [eax]
c000e5ca:	31 d2                	xor    edx,edx
c000e5cc:	88 c2                	mov    dl,al
c000e5ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5d2:	8d 48 01             	lea    ecx,[eax+0x1]
c000e5d5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5d9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e5dd:	25 ff 00 00 00       	and    eax,0xff
c000e5e2:	c1 e0 08             	shl    eax,0x8
c000e5e5:	09 d0                	or     eax,edx
c000e5e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e5eb:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e5f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5f4:	8d 50 01             	lea    edx,[eax+0x1]
c000e5f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e5fb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5ff:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e603:	25 ff 00 00 00       	and    eax,0xff
c000e608:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e60c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e610:	c1 e0 08             	shl    eax,0x8
c000e613:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e617:	89 c1                	mov    ecx,eax
c000e619:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e61d:	c1 e0 18             	shl    eax,0x18
c000e620:	89 c3                	mov    ebx,eax
c000e622:	a1 d0 46 02 c0       	mov    eax,ds:0xc00246d0
c000e627:	8d 50 01             	lea    edx,[eax+0x1]
c000e62a:	89 15 d0 46 02 c0    	mov    DWORD PTR ds:0xc00246d0,edx
c000e630:	09 d9                	or     ecx,ebx
c000e632:	89 ca                	mov    edx,ecx
c000e634:	89 14 85 e0 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb920],edx
c000e63b:	eb 0f                	jmp    c000e64c <scanMADT()+0x4ac>
c000e63d:	8d 76 00             	lea    esi,[esi+0x0]
c000e640:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e645:	75 05                	jne    c000e64c <scanMADT()+0x4ac>
c000e647:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e64c:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e650:	31 d2                	xor    edx,edx
c000e652:	88 c2                	mov    dl,al
c000e654:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e658:	01 d0                	add    eax,edx
c000e65a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e65e:	e9 31 fc ff ff       	jmp    c000e294 <scanMADT()+0xf4>
c000e663:	90                   	nop
c000e664:	90                   	nop
c000e665:	eb 05                	jmp    c000e66c <scanMADT()+0x4cc>
c000e667:	90                   	nop
c000e668:	90                   	nop
c000e669:	8d 76 00             	lea    esi,[esi+0x0]
c000e66c:	83 c4 38             	add    esp,0x38
c000e66f:	5b                   	pop    ebx
c000e670:	c3                   	ret    
c000e671:	90                   	nop
c000e672:	66 90                	xchg   ax,ax

c000e674 <ACPI::ACPI()>:
c000e674:	83 ec 0c             	sub    esp,0xc
c000e677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e67b:	83 ec 08             	sub    esp,0x8
c000e67e:	68 9d e3 01 c0       	push   0xc001e39d
c000e683:	50                   	push   eax
c000e684:	e8 7b d4 ff ff       	call   c000bb04 <Device::Device(char const*)>
c000e689:	83 c4 10             	add    esp,0x10
c000e68c:	ba d4 e4 01 c0       	mov    edx,0xc001e4d4
c000e691:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e695:	89 10                	mov    DWORD PTR [eax],edx
c000e697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e69b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e6a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6a6:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e6b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6b4:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e6be:	e8 dd fa ff ff       	call   c000e1a0 <scanMADT()>
c000e6c3:	90                   	nop
c000e6c4:	83 c4 0c             	add    esp,0xc
c000e6c7:	c3                   	ret    

c000e6c8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e6c8:	83 ec 2c             	sub    esp,0x2c
c000e6cb:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e6cf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6d3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e6d7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e6db:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e6e0:	88 d0                	mov    al,dl
c000e6e2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e6e6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e6eb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e6f3:	90                   	nop
c000e6f4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6f8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e6fe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e702:	0f 8d 9c 00 00 00    	jge    c000e7a4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e708:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e70c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e710:	83 c2 2a             	add    edx,0x2a
c000e713:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e717:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e71c:	75 7a                	jne    c000e798 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e71e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e722:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e726:	83 c2 2a             	add    edx,0x2a
c000e729:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e72d:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e731:	75 65                	jne    c000e798 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e733:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e738:	74 3a                	je     c000e774 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e73a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e73e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e742:	83 c2 2a             	add    edx,0x2a
c000e745:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e749:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e74d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e750:	39 c2                	cmp    edx,eax
c000e752:	74 10                	je     c000e764 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e754:	83 ec 0c             	sub    esp,0xc
c000e757:	68 18 e3 01 c0       	push   0xc001e318
c000e75c:	e8 4e 1a 00 00       	call   c00101af <KePanic(char const*)>
c000e761:	83 c4 10             	add    esp,0x10
c000e764:	83 ec 0c             	sub    esp,0xc
c000e767:	68 a2 e3 01 c0       	push   0xc001e3a2
c000e76c:	e8 3e 1a 00 00       	call   c00101af <KePanic(char const*)>
c000e771:	83 c4 10             	add    esp,0x10
c000e774:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e778:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e77c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e780:	83 c2 2a             	add    edx,0x2a
c000e783:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e787:	8b 02                	mov    eax,DWORD PTR [edx]
c000e789:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e78c:	89 01                	mov    DWORD PTR [ecx],eax
c000e78e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e791:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e796:	66 90                	xchg   ax,ax
c000e798:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e79c:	e9 53 ff ff ff       	jmp    c000e6f4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e7a1:	8d 76 00             	lea    esi,[esi+0x0]
c000e7a4:	90                   	nop
c000e7a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7a9:	83 c4 2c             	add    esp,0x2c
c000e7ac:	c2 04 00             	ret    0x4
c000e7af:	90                   	nop

c000e7b0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e7b0:	83 ec 1c             	sub    esp,0x1c
c000e7b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e7b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e7bb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e7bf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e7c4:	88 c8                	mov    al,cl
c000e7c6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e7ca:	88 d0                	mov    al,dl
c000e7cc:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e7d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7d4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e7da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7de:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e7e1:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000e7e5:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000e7e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7ed:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e7f3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e7f7:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000e7fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7fe:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000e803:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e807:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e80d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000e811:	8d 48 01             	lea    ecx,[eax+0x1]
c000e814:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e818:	83 c2 2a             	add    edx,0x2a
c000e81b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000e81f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e823:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e829:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e82d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e830:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e834:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000e838:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e83c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e842:	8d 50 01             	lea    edx,[eax+0x1]
c000e845:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e849:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000e84f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e853:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e859:	3d 00 02 00 00       	cmp    eax,0x200
c000e85e:	75 10                	jne    c000e870 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000e860:	83 ec 0c             	sub    esp,0xc
c000e863:	68 b1 e3 01 c0       	push   0xc001e3b1
c000e868:	e8 42 19 00 00       	call   c00101af <KePanic(char const*)>
c000e86d:	83 c4 10             	add    esp,0x10
c000e870:	90                   	nop
c000e871:	83 c4 1c             	add    esp,0x1c
c000e874:	c3                   	ret    
c000e875:	90                   	nop
c000e876:	66 90                	xchg   ax,ax

c000e878 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000e878:	b8 00 00 00 00       	mov    eax,0x0
c000e87d:	c3                   	ret    
c000e87e:	66 90                	xchg   ax,ax

c000e880 <ACPI::detectPCI()>:
c000e880:	53                   	push   ebx
c000e881:	83 ec 28             	sub    esp,0x28
c000e884:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e889:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000e88e:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e893:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e899:	83 e0 04             	and    eax,0x4
c000e89c:	84 c0                	test   al,al
c000e89e:	74 2c                	je     c000e8cc <ACPI::detectPCI()+0x4c>
c000e8a0:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e8a5:	83 ec 08             	sub    esp,0x8
c000e8a8:	68 ce e3 01 c0       	push   0xc001e3ce
c000e8ad:	50                   	push   eax
c000e8ae:	e8 75 f8 ff ff       	call   c000e128 <findDataTable(unsigned char*, char*)>
c000e8b3:	83 c4 10             	add    esp,0x10
c000e8b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e8ba:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000e8bf:	74 0b                	je     c000e8cc <ACPI::detectPCI()+0x4c>
c000e8c1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8c6:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e8cb:	90                   	nop
c000e8cc:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000e8d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e8d8:	8a 00                	mov    al,BYTE PTR [eax]
c000e8da:	3c 01                	cmp    al,0x1
c000e8dc:	75 0e                	jne    c000e8ec <ACPI::detectPCI()+0x6c>
c000e8de:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8e3:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e8e8:	eb 2a                	jmp    c000e914 <ACPI::detectPCI()+0x94>
c000e8ea:	66 90                	xchg   ax,ax
c000e8ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e8f0:	8a 00                	mov    al,BYTE PTR [eax]
c000e8f2:	3c 02                	cmp    al,0x2
c000e8f4:	75 1e                	jne    c000e914 <ACPI::detectPCI()+0x94>
c000e8f6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8fb:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e900:	74 12                	je     c000e914 <ACPI::detectPCI()+0x94>
c000e902:	83 ec 0c             	sub    esp,0xc
c000e905:	68 48 e3 01 c0       	push   0xc001e348
c000e90a:	e8 a0 18 00 00       	call   c00101af <KePanic(char const*)>
c000e90f:	83 c4 10             	add    esp,0x10
c000e912:	66 90                	xchg   ax,ax
c000e914:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000e918:	83 f0 01             	xor    eax,0x1
c000e91b:	84 c0                	test   al,al
c000e91d:	74 41                	je     c000e960 <ACPI::detectPCI()+0xe0>
c000e91f:	e8 0c 18 ff ff       	call   c0000130 <manualPCIProbe>
c000e924:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e928:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e92d:	75 0d                	jne    c000e93c <ACPI::detectPCI()+0xbc>
c000e92f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e934:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e939:	eb 25                	jmp    c000e960 <ACPI::detectPCI()+0xe0>
c000e93b:	90                   	nop
c000e93c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000e941:	75 1d                	jne    c000e960 <ACPI::detectPCI()+0xe0>
c000e943:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e948:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e94d:	74 11                	je     c000e960 <ACPI::detectPCI()+0xe0>
c000e94f:	83 ec 0c             	sub    esp,0xc
c000e952:	68 48 e3 01 c0       	push   0xc001e348
c000e957:	e8 53 18 00 00       	call   c00101af <KePanic(char const*)>
c000e95c:	83 c4 10             	add    esp,0x10
c000e95f:	90                   	nop
c000e960:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e965:	0f 84 85 00 00 00    	je     c000e9f0 <ACPI::detectPCI()+0x170>
c000e96b:	83 ec 0c             	sub    esp,0xc
c000e96e:	68 d3 e3 01 c0       	push   0xc001e3d3
c000e973:	e8 bf 11 00 00       	call   c000fb37 <KeSetBootMessage(char const*)>
c000e978:	83 c4 10             	add    esp,0x10
c000e97b:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000e983:	83 ec 0c             	sub    esp,0xc
c000e986:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e98a:	e8 2a 8e ff ff       	call   c00077b9 <malloc>
c000e98f:	83 c4 10             	add    esp,0x10
c000e992:	89 c3                	mov    ebx,eax
c000e994:	83 ec 0c             	sub    esp,0xc
c000e997:	53                   	push   ebx
c000e998:	e8 ad 9a 00 00       	call   c001844a <PCI::PCI()>
c000e99d:	83 c4 10             	add    esp,0x10
c000e9a0:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e9a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9a8:	83 ec 08             	sub    esp,0x8
c000e9ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e9af:	50                   	push   eax
c000e9b0:	e8 b7 cf ff ff       	call   c000b96c <Device::addChild(Device*)>
c000e9b5:	83 c4 10             	add    esp,0x10
c000e9b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9bc:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9be:	83 c0 08             	add    eax,0x8
c000e9c1:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9c3:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e9c8:	74 0a                	je     c000e9d4 <ACPI::detectPCI()+0x154>
c000e9ca:	ba 01 00 00 00       	mov    edx,0x1
c000e9cf:	eb 0b                	jmp    c000e9dc <ACPI::detectPCI()+0x15c>
c000e9d1:	8d 76 00             	lea    esi,[esi+0x0]
c000e9d4:	ba 02 00 00 00       	mov    edx,0x2
c000e9d9:	8d 76 00             	lea    esi,[esi+0x0]
c000e9dc:	6a 00                	push   0x0
c000e9de:	6a 00                	push   0x0
c000e9e0:	52                   	push   edx
c000e9e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e9e5:	ff d0                	call   eax
c000e9e7:	83 c4 10             	add    esp,0x10
c000e9ea:	e9 91 00 00 00       	jmp    c000ea80 <ACPI::detectPCI()+0x200>
c000e9ef:	90                   	nop
c000e9f0:	83 ec 0c             	sub    esp,0xc
c000e9f3:	68 eb e3 01 c0       	push   0xc001e3eb
c000e9f8:	e8 3a 11 00 00       	call   c000fb37 <KeSetBootMessage(char const*)>
c000e9fd:	83 c4 10             	add    esp,0x10
c000ea00:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000ea07:	83 ec 0c             	sub    esp,0xc
c000ea0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ea0e:	e8 a6 8d ff ff       	call   c00077b9 <malloc>
c000ea13:	83 c4 10             	add    esp,0x10
c000ea16:	89 c3                	mov    ebx,eax
c000ea18:	83 ec 0c             	sub    esp,0xc
c000ea1b:	53                   	push   ebx
c000ea1c:	e8 55 a5 00 00       	call   c0018f76 <IDE::IDE()>
c000ea21:	83 c4 10             	add    esp,0x10
c000ea24:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ea28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea2c:	83 ec 08             	sub    esp,0x8
c000ea2f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ea33:	50                   	push   eax
c000ea34:	e8 33 cf ff ff       	call   c000b96c <Device::addChild(Device*)>
c000ea39:	83 c4 10             	add    esp,0x10
c000ea3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea40:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000ea4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea4e:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000ea57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea5b:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000ea64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea68:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea6a:	83 c0 08             	add    eax,0x8
c000ea6d:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea6f:	6a 00                	push   0x0
c000ea71:	6a 00                	push   0x0
c000ea73:	6a 00                	push   0x0
c000ea75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ea79:	ff d0                	call   eax
c000ea7b:	83 c4 10             	add    esp,0x10
c000ea7e:	66 90                	xchg   ax,ax
c000ea80:	90                   	nop
c000ea81:	83 c4 28             	add    esp,0x28
c000ea84:	5b                   	pop    ebx
c000ea85:	c3                   	ret    
c000ea86:	66 90                	xchg   ax,ax

c000ea88 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000ea88:	83 ec 1c             	sub    esp,0x1c
c000ea8b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ea8f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ea92:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ea96:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000ea9c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eaa0:	25 ff 00 00 00       	and    eax,0xff
c000eaa5:	83 ec 08             	sub    esp,0x8
c000eaa8:	50                   	push   eax
c000eaa9:	52                   	push   edx
c000eaaa:	e8 f7 83 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c000eaaf:	83 c4 10             	add    esp,0x10
c000eab2:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000eab6:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000eabc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eac0:	25 ff 00 00 00       	and    eax,0xff
c000eac5:	83 ec 04             	sub    esp,0x4
c000eac8:	6a 01                	push   0x1
c000eaca:	50                   	push   eax
c000eacb:	52                   	push   edx
c000eacc:	e8 eb 84 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c000ead1:	83 c4 10             	add    esp,0x10
c000ead4:	90                   	nop
c000ead5:	83 c4 1c             	add    esp,0x1c
c000ead8:	c3                   	ret    
c000ead9:	90                   	nop
c000eada:	66 90                	xchg   ax,ax

c000eadc <ACPI::sleep()>:
c000eadc:	83 ec 0c             	sub    esp,0xc
c000eadf:	a1 a0 44 02 c0       	mov    eax,ds:0xc00244a0
c000eae4:	85 c0                	test   eax,eax
c000eae6:	74 08                	je     c000eaf0 <ACPI::sleep()+0x14>
c000eae8:	a1 a0 44 02 c0       	mov    eax,ds:0xc00244a0
c000eaed:	ff d0                	call   eax
c000eaef:	90                   	nop
c000eaf0:	90                   	nop
c000eaf1:	83 c4 0c             	add    esp,0xc
c000eaf4:	c3                   	ret    
c000eaf5:	90                   	nop
c000eaf6:	66 90                	xchg   ax,ax

c000eaf8 <ACPI::open(int, int, void*)>:
c000eaf8:	57                   	push   edi
c000eaf9:	56                   	push   esi
c000eafa:	53                   	push   ebx
c000eafb:	81 ec 70 01 00 00    	sub    esp,0x170
c000eb01:	83 ec 0c             	sub    esp,0xc
c000eb04:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000eb0b:	e8 70 fd ff ff       	call   c000e880 <ACPI::detectPCI()>
c000eb10:	83 c4 10             	add    esp,0x10
c000eb13:	83 ec 0c             	sub    esp,0xc
c000eb16:	68 70 e3 01 c0       	push   0xc001e370
c000eb1b:	e8 17 10 00 00       	call   c000fb37 <KeSetBootMessage(char const*)>
c000eb20:	83 c4 10             	add    esp,0x10
c000eb23:	83 ec 0c             	sub    esp,0xc
c000eb26:	68 00 e4 01 c0       	push   0xc001e400
c000eb2b:	e8 d2 37 00 00       	call   c0012302 <Thr::loadKernelSymbolTable(char const*)>
c000eb30:	83 c4 10             	add    esp,0x10
c000eb33:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000eb3b:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000eb46:	83 ec 0c             	sub    esp,0xc
c000eb49:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000eb50:	e8 64 8c ff ff       	call   c00077b9 <malloc>
c000eb55:	83 c4 10             	add    esp,0x10
c000eb58:	89 c3                	mov    ebx,eax
c000eb5a:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000eb5f:	83 ec 04             	sub    esp,0x4
c000eb62:	50                   	push   eax
c000eb63:	68 1e e4 01 c0       	push   0xc001e41e
c000eb68:	53                   	push   ebx
c000eb69:	e8 34 bf ff ff       	call   c000aaa2 <File::File(char const*, Process*)>
c000eb6e:	83 c4 10             	add    esp,0x10
c000eb71:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	6a 01                	push   0x1
c000eb7d:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eb84:	e8 d9 bf ff ff       	call   c000ab62 <File::open(FileOpenMode)>
c000eb89:	83 c4 10             	add    esp,0x10
c000eb8c:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000eb93:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000eb9b:	75 17                	jne    c000ebb4 <ACPI::open(int, int, void*)+0xbc>
c000eb9d:	83 ec 0c             	sub    esp,0xc
c000eba0:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eba7:	e8 14 c0 ff ff       	call   c000abc0 <File::close()>
c000ebac:	83 c4 10             	add    esp,0x10
c000ebaf:	eb 0b                	jmp    c000ebbc <ACPI::open(int, int, void*)+0xc4>
c000ebb1:	8d 76 00             	lea    esi,[esi+0x0]
c000ebb4:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000ebbc:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000ebc4:	74 1e                	je     c000ebe4 <ACPI::open(int, int, void*)+0xec>
c000ebc6:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000ebcd:	8b 00                	mov    eax,DWORD PTR [eax]
c000ebcf:	83 c0 08             	add    eax,0x8
c000ebd2:	8b 00                	mov    eax,DWORD PTR [eax]
c000ebd4:	83 ec 0c             	sub    esp,0xc
c000ebd7:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ebde:	ff d0                	call   eax
c000ebe0:	83 c4 10             	add    esp,0x10
c000ebe3:	90                   	nop
c000ebe4:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000ebeb:	83 f0 01             	xor    eax,0x1
c000ebee:	84 c0                	test   al,al
c000ebf0:	74 42                	je     c000ec34 <ACPI::open(int, int, void*)+0x13c>
c000ebf2:	83 ec 0c             	sub    esp,0xc
c000ebf5:	68 3c e4 01 c0       	push   0xc001e43c
c000ebfa:	e8 38 0f 00 00       	call   c000fb37 <KeSetBootMessage(char const*)>
c000ebff:	83 c4 10             	add    esp,0x10
c000ec02:	83 ec 04             	sub    esp,0x4
c000ec05:	6a 0c                	push   0xc
c000ec07:	68 57 e4 01 c0       	push   0xc001e457
c000ec0c:	68 68 e4 01 c0       	push   0xc001e468
c000ec11:	e8 dc 2c 00 00       	call   c00118f2 <Reg::readIntWithDefault(char*, char*, int)>
c000ec16:	83 c4 10             	add    esp,0x10
c000ec19:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ec20:	83 ec 0c             	sub    esp,0xc
c000ec23:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ec2a:	e8 60 a8 ff ff       	call   c000948f <Virt::setupPageSwapping(int)>
c000ec2f:	83 c4 10             	add    esp,0x10
c000ec32:	66 90                	xchg   ax,ax
c000ec34:	83 ec 0c             	sub    esp,0xc
c000ec37:	68 97 d4 01 c0       	push   0xc001d497
c000ec3c:	e8 f6 0e 00 00       	call   c000fb37 <KeSetBootMessage(char const*)>
c000ec41:	83 c4 10             	add    esp,0x10
c000ec44:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ec4b:	83 ec 08             	sub    esp,0x8
c000ec4e:	6a 12                	push   0x12
c000ec50:	50                   	push   eax
c000ec51:	e8 2e d0 ff ff       	call   c000bc84 <getDevicesOfType(DeviceType)>
c000ec56:	83 c4 0c             	add    esp,0xc
c000ec59:	8d 76 00             	lea    esi,[esi+0x0]
c000ec5c:	83 ec 0c             	sub    esp,0xc
c000ec5f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ec66:	50                   	push   eax
c000ec67:	e8 70 dc 00 00       	call   c001c8dc <LinkedList<Device>::isEmpty()>
c000ec6c:	83 c4 10             	add    esp,0x10
c000ec6f:	83 f0 01             	xor    eax,0x1
c000ec72:	84 c0                	test   al,al
c000ec74:	0f 84 46 01 00 00    	je     c000edc0 <ACPI::open(int, int, void*)+0x2c8>
c000ec7a:	83 ec 0c             	sub    esp,0xc
c000ec7d:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ec84:	50                   	push   eax
c000ec85:	e8 6e dc 00 00       	call   c001c8f8 <LinkedList<Device>::getFirstElement()>
c000ec8a:	83 c4 10             	add    esp,0x10
c000ec8d:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ec94:	83 ec 0c             	sub    esp,0xc
c000ec97:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ec9e:	50                   	push   eax
c000ec9f:	e8 5c dc 00 00       	call   c001c900 <LinkedList<Device>::removeFirst()>
c000eca4:	83 c4 10             	add    esp,0x10
c000eca7:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ecae:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ecb5:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ecbc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ecc0:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ecc6:	ba 09 00 00 00       	mov    edx,0x9
c000eccb:	fc                   	cld    
c000eccc:	89 c7                	mov    edi,eax
c000ecce:	89 de                	mov    esi,ebx
c000ecd0:	89 d1                	mov    ecx,edx
c000ecd2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ecd4:	83 ec 08             	sub    esp,0x8
c000ecd7:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ecdb:	50                   	push   eax
c000ecdc:	83 ec 24             	sub    esp,0x24
c000ecdf:	89 e0                	mov    eax,esp
c000ece1:	89 c3                	mov    ebx,eax
c000ece3:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ece7:	ba 09 00 00 00       	mov    edx,0x9
c000ecec:	89 df                	mov    edi,ebx
c000ecee:	89 c6                	mov    esi,eax
c000ecf0:	89 d1                	mov    ecx,edx
c000ecf2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ecf4:	e8 33 9c 00 00       	call   c001892c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ecf9:	83 c4 30             	add    esp,0x30
c000ecfc:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ed03:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ed0b:	0f 84 4b ff ff ff    	je     c000ec5c <ACPI::open(int, int, void*)+0x164>
c000ed11:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ed1c:	83 ec 0c             	sub    esp,0xc
c000ed1f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ed26:	e8 8e 8a ff ff       	call   c00077b9 <malloc>
c000ed2b:	83 c4 10             	add    esp,0x10
c000ed2e:	89 c3                	mov    ebx,eax
c000ed30:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000ed35:	83 ec 04             	sub    esp,0x4
c000ed38:	50                   	push   eax
c000ed39:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ed40:	53                   	push   ebx
c000ed41:	e8 5c bd ff ff       	call   c000aaa2 <File::File(char const*, Process*)>
c000ed46:	83 c4 10             	add    esp,0x10
c000ed49:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000ed50:	83 ec 0c             	sub    esp,0xc
c000ed53:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ed5a:	e8 71 c0 ff ff       	call   c000add0 <File::exists()>
c000ed5f:	83 c4 10             	add    esp,0x10
c000ed62:	84 c0                	test   al,al
c000ed64:	74 2a                	je     c000ed90 <ACPI::open(int, int, void*)+0x298>
c000ed66:	83 ec 08             	sub    esp,0x8
c000ed69:	6a 01                	push   0x1
c000ed6b:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ed72:	e8 02 40 00 00       	call   c0012d79 <Thr::loadDLL(char const*, bool)>
c000ed77:	83 c4 10             	add    esp,0x10
c000ed7a:	83 ec 08             	sub    esp,0x8
c000ed7d:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ed84:	50                   	push   eax
c000ed85:	e8 20 42 00 00       	call   c0012faa <Thr::executeDLL(unsigned long, void*)>
c000ed8a:	83 c4 10             	add    esp,0x10
c000ed8d:	8d 76 00             	lea    esi,[esi+0x0]
c000ed90:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000ed98:	0f 84 be fe ff ff    	je     c000ec5c <ACPI::open(int, int, void*)+0x164>
c000ed9e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000eda5:	8b 00                	mov    eax,DWORD PTR [eax]
c000eda7:	83 c0 08             	add    eax,0x8
c000edaa:	8b 00                	mov    eax,DWORD PTR [eax]
c000edac:	83 ec 0c             	sub    esp,0xc
c000edaf:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000edb6:	ff d0                	call   eax
c000edb8:	83 c4 10             	add    esp,0x10
c000edbb:	e9 9c fe ff ff       	jmp    c000ec5c <ACPI::open(int, int, void*)+0x164>
c000edc0:	83 ec 0c             	sub    esp,0xc
c000edc3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000edca:	50                   	push   eax
c000edcb:	e8 08 db 00 00       	call   c001c8d8 <LinkedList<Device>::~LinkedList()>
c000edd0:	83 c4 10             	add    esp,0x10
c000edd3:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000edd9:	83 ec 08             	sub    esp,0x8
c000eddc:	6a 01                	push   0x1
c000edde:	68 6f e4 01 c0       	push   0xc001e46f
c000ede3:	e8 91 3f 00 00       	call   c0012d79 <Thr::loadDLL(char const*, bool)>
c000ede8:	83 c4 10             	add    esp,0x10
c000edeb:	83 ec 08             	sub    esp,0x8
c000edee:	53                   	push   ebx
c000edef:	50                   	push   eax
c000edf0:	e8 b5 41 00 00       	call   c0012faa <Thr::executeDLL(unsigned long, void*)>
c000edf5:	83 c4 10             	add    esp,0x10
c000edf8:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000edfd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ee03:	83 e0 04             	and    eax,0x4
c000ee06:	84 c0                	test   al,al
c000ee08:	0f 84 16 01 00 00    	je     c000ef24 <ACPI::open(int, int, void*)+0x42c>
c000ee0e:	83 ec 0c             	sub    esp,0xc
c000ee11:	68 8c e4 01 c0       	push   0xc001e48c
c000ee16:	e8 1c 0d 00 00       	call   c000fb37 <KeSetBootMessage(char const*)>
c000ee1b:	83 c4 10             	add    esp,0x10
c000ee1e:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000ee29:	83 ec 0c             	sub    esp,0xc
c000ee2c:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000ee33:	e8 81 89 ff ff       	call   c00077b9 <malloc>
c000ee38:	83 c4 10             	add    esp,0x10
c000ee3b:	89 c3                	mov    ebx,eax
c000ee3d:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000ee42:	83 ec 04             	sub    esp,0x4
c000ee45:	50                   	push   eax
c000ee46:	68 a9 e4 01 c0       	push   0xc001e4a9
c000ee4b:	53                   	push   ebx
c000ee4c:	e8 51 bc ff ff       	call   c000aaa2 <File::File(char const*, Process*)>
c000ee51:	83 c4 10             	add    esp,0x10
c000ee54:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000ee5b:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee63:	74 1b                	je     c000ee80 <ACPI::open(int, int, void*)+0x388>
c000ee65:	83 ec 0c             	sub    esp,0xc
c000ee68:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ee6f:	e8 5c bf ff ff       	call   c000add0 <File::exists()>
c000ee74:	83 c4 10             	add    esp,0x10
c000ee77:	84 c0                	test   al,al
c000ee79:	74 05                	je     c000ee80 <ACPI::open(int, int, void*)+0x388>
c000ee7b:	b0 01                	mov    al,0x1
c000ee7d:	eb 05                	jmp    c000ee84 <ACPI::open(int, int, void*)+0x38c>
c000ee7f:	90                   	nop
c000ee80:	b0 00                	mov    al,0x0
c000ee82:	66 90                	xchg   ax,ax
c000ee84:	84 c0                	test   al,al
c000ee86:	74 28                	je     c000eeb0 <ACPI::open(int, int, void*)+0x3b8>
c000ee88:	83 ec 08             	sub    esp,0x8
c000ee8b:	6a 01                	push   0x1
c000ee8d:	68 a9 e4 01 c0       	push   0xc001e4a9
c000ee92:	e8 e2 3e 00 00       	call   c0012d79 <Thr::loadDLL(char const*, bool)>
c000ee97:	83 c4 10             	add    esp,0x10
c000ee9a:	83 ec 08             	sub    esp,0x8
c000ee9d:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000eea4:	50                   	push   eax
c000eea5:	e8 00 41 00 00       	call   c0012faa <Thr::executeDLL(unsigned long, void*)>
c000eeaa:	83 c4 10             	add    esp,0x10
c000eead:	8d 76 00             	lea    esi,[esi+0x0]
c000eeb0:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000eeb8:	74 2a                	je     c000eee4 <ACPI::open(int, int, void*)+0x3ec>
c000eeba:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000eec2:	74 20                	je     c000eee4 <ACPI::open(int, int, void*)+0x3ec>
c000eec4:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000eecb:	8b 00                	mov    eax,DWORD PTR [eax]
c000eecd:	83 c0 08             	add    eax,0x8
c000eed0:	8b 00                	mov    eax,DWORD PTR [eax]
c000eed2:	83 ec 0c             	sub    esp,0xc
c000eed5:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000eedc:	ff d0                	call   eax
c000eede:	83 c4 10             	add    esp,0x10
c000eee1:	8d 76 00             	lea    esi,[esi+0x0]
c000eee4:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000eee9:	83 ec 08             	sub    esp,0x8
c000eeec:	68 c6 e4 01 c0       	push   0xc001e4c6
c000eef1:	50                   	push   eax
c000eef2:	e8 31 f2 ff ff       	call   c000e128 <findDataTable(unsigned char*, char*)>
c000eef7:	83 c4 10             	add    esp,0x10
c000eefa:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000ef01:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000ef09:	74 19                	je     c000ef24 <ACPI::open(int, int, void*)+0x42c>
c000ef0b:	83 ec 08             	sub    esp,0x8
c000ef0e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ef15:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ef1c:	e8 67 fb ff ff       	call   c000ea88 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000ef21:	83 c4 10             	add    esp,0x10
c000ef24:	b8 00 00 00 00       	mov    eax,0x0
c000ef29:	81 c4 70 01 00 00    	add    esp,0x170
c000ef2f:	5b                   	pop    ebx
c000ef30:	5e                   	pop    esi
c000ef31:	5f                   	pop    edi
c000ef32:	c3                   	ret    
c000ef33:	90                   	nop

c000ef34 <CPU::close(int, int, void*)>:
c000ef34:	31 c0                	xor    eax,eax
c000ef36:	c3                   	ret    
c000ef37:	90                   	nop

c000ef38 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000ef38:	60                   	pusha  
c000ef39:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ef3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ef45:	9c                   	pushf  
c000ef46:	fa                   	cli    
c000ef47:	0f 09                	wbinvd 
c000ef49:	0f 30                	wrmsr  
c000ef4b:	9d                   	popf   
c000ef4c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ef50:	89 02                	mov    DWORD PTR [edx],eax
c000ef52:	61                   	popa   
c000ef53:	c3                   	ret    

c000ef54 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000ef54:	60                   	pusha  
c000ef55:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ef59:	9c                   	pushf  
c000ef5a:	fa                   	cli    
c000ef5b:	0f 09                	wbinvd 
c000ef5d:	31 c0                	xor    eax,eax
c000ef5f:	31 d2                	xor    edx,edx
c000ef61:	0f 32                	rdmsr  
c000ef63:	9d                   	popf   
c000ef64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef68:	89 02                	mov    DWORD PTR [edx],eax
c000ef6a:	61                   	popa   
c000ef6b:	c3                   	ret    

c000ef6c <CPU::AMD_K6_writeback(int, int, int)>:
c000ef6c:	56                   	push   esi
c000ef6d:	53                   	push   ebx
c000ef6e:	83 ec 10             	sub    esp,0x10
c000ef71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef75:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000ef7a:	75 5d                	jne    c000efd9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef7c:	83 f8 08             	cmp    eax,0x8
c000ef7f:	75 09                	jne    c000ef8a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000ef81:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000ef86:	7e 13                	jle    c000ef9b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ef88:	eb 30                	jmp    c000efba <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ef8a:	83 f8 06             	cmp    eax,0x6
c000ef8d:	7c 4a                	jl     c000efd9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef8f:	83 f8 07             	cmp    eax,0x7
c000ef92:	7e 07                	jle    c000ef9b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ef94:	83 f8 09             	cmp    eax,0x9
c000ef97:	74 21                	je     c000efba <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ef99:	eb 3e                	jmp    c000efd9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef9b:	89 e6                	mov    esi,esp
c000ef9d:	8b 1d dc 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021edc
c000efa3:	56                   	push   esi
c000efa4:	c1 eb 15             	shr    ebx,0x15
c000efa7:	68 82 00 00 c0       	push   0xc0000082
c000efac:	83 e3 7e             	and    ebx,0x7e
c000efaf:	e8 a0 ff ff ff       	call   c000ef54 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000efb4:	56                   	push   esi
c000efb5:	6a 00                	push   0x0
c000efb7:	53                   	push   ebx
c000efb8:	eb 12                	jmp    c000efcc <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000efba:	89 e3                	mov    ebx,esp
c000efbc:	53                   	push   ebx
c000efbd:	68 82 00 00 c0       	push   0xc0000082
c000efc2:	e8 8d ff ff ff       	call   c000ef54 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000efc7:	53                   	push   ebx
c000efc8:	6a 00                	push   0x0
c000efca:	6a 00                	push   0x0
c000efcc:	68 82 00 00 c0       	push   0xc0000082
c000efd1:	e8 62 ff ff ff       	call   c000ef38 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000efd6:	83 c4 18             	add    esp,0x18
c000efd9:	83 c4 10             	add    esp,0x10
c000efdc:	5b                   	pop    ebx
c000efdd:	5e                   	pop    esi
c000efde:	c3                   	ret    
c000efdf:	90                   	nop

c000efe0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000efe0:	55                   	push   ebp
c000efe1:	57                   	push   edi
c000efe2:	56                   	push   esi
c000efe3:	53                   	push   ebx
c000efe4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efe8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000efec:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eff0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000eff4:	39 05 30 f8 01 c0    	cmp    DWORD PTR ds:0xc001f830,eax
c000effa:	75 23                	jne    c000f01f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000effc:	a1 2c 49 02 c0       	mov    eax,ds:0xc002492c
c000f001:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f005:	89 06                	mov    DWORD PTR [esi],eax
c000f007:	a1 28 49 02 c0       	mov    eax,ds:0xc0024928
c000f00c:	89 07                	mov    DWORD PTR [edi],eax
c000f00e:	a1 24 49 02 c0       	mov    eax,ds:0xc0024924
c000f013:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f016:	a1 20 49 02 c0       	mov    eax,ds:0xc0024920
c000f01b:	89 02                	mov    DWORD PTR [edx],eax
c000f01d:	eb 3f                	jmp    c000f05e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f01f:	31 c9                	xor    ecx,ecx
c000f021:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f025:	0f a2                	cpuid  
c000f027:	89 06                	mov    DWORD PTR [esi],eax
c000f029:	89 1f                	mov    DWORD PTR [edi],ebx
c000f02b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f02f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f032:	89 10                	mov    DWORD PTR [eax],edx
c000f034:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f038:	a3 30 f8 01 c0       	mov    ds:0xc001f830,eax
c000f03d:	8b 06                	mov    eax,DWORD PTR [esi]
c000f03f:	a3 2c 49 02 c0       	mov    ds:0xc002492c,eax
c000f044:	8b 07                	mov    eax,DWORD PTR [edi]
c000f046:	a3 28 49 02 c0       	mov    ds:0xc0024928,eax
c000f04b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f04e:	a3 24 49 02 c0       	mov    ds:0xc0024924,eax
c000f053:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f057:	8b 00                	mov    eax,DWORD PTR [eax]
c000f059:	a3 20 49 02 c0       	mov    ds:0xc0024920,eax
c000f05e:	5b                   	pop    ebx
c000f05f:	5e                   	pop    esi
c000f060:	5f                   	pop    edi
c000f061:	5d                   	pop    ebp
c000f062:	c3                   	ret    
c000f063:	90                   	nop

c000f064 <CPU::cpuidCheckEDX(unsigned int)>:
c000f064:	83 ec 10             	sub    esp,0x10
c000f067:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f06b:	50                   	push   eax
c000f06c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f070:	50                   	push   eax
c000f071:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f075:	50                   	push   eax
c000f076:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f07a:	50                   	push   eax
c000f07b:	6a 01                	push   0x1
c000f07d:	e8 5e ff ff ff       	call   c000efe0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f082:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f086:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f08a:	0f 95 c0             	setne  al
c000f08d:	83 c4 24             	add    esp,0x24
c000f090:	c3                   	ret    
c000f091:	90                   	nop

c000f092 <CPU::cpuidCheckECX(unsigned int)>:
c000f092:	83 ec 10             	sub    esp,0x10
c000f095:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f099:	50                   	push   eax
c000f09a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f09e:	50                   	push   eax
c000f09f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0a3:	50                   	push   eax
c000f0a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0a8:	50                   	push   eax
c000f0a9:	6a 01                	push   0x1
c000f0ab:	e8 30 ff ff ff       	call   c000efe0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f0b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f0b4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f0b8:	0f 95 c0             	setne  al
c000f0bb:	83 c4 24             	add    esp,0x24
c000f0be:	c3                   	ret    
c000f0bf:	90                   	nop

c000f0c0 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f0c0:	83 ec 10             	sub    esp,0x10
c000f0c3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0c7:	50                   	push   eax
c000f0c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0cc:	50                   	push   eax
c000f0cd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0d1:	50                   	push   eax
c000f0d2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0d6:	50                   	push   eax
c000f0d7:	6a 07                	push   0x7
c000f0d9:	e8 02 ff ff ff       	call   c000efe0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f0de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f0e2:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f0e6:	0f 95 c0             	setne  al
c000f0e9:	83 c4 24             	add    esp,0x24
c000f0ec:	c3                   	ret    
c000f0ed:	90                   	nop

c000f0ee <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f0ee:	83 ec 10             	sub    esp,0x10
c000f0f1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0f5:	50                   	push   eax
c000f0f6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0fa:	50                   	push   eax
c000f0fb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0ff:	50                   	push   eax
c000f100:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f104:	50                   	push   eax
c000f105:	6a 07                	push   0x7
c000f107:	e8 d4 fe ff ff       	call   c000efe0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f10c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f110:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f114:	0f 95 c0             	setne  al
c000f117:	83 c4 24             	add    esp,0x24
c000f11a:	c3                   	ret    
c000f11b:	90                   	nop

c000f11c <CPU::CPU()>:
c000f11c:	83 ec 0c             	sub    esp,0xc
c000f11f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f123:	83 ec 08             	sub    esp,0x8
c000f126:	68 e9 e5 01 c0       	push   0xc001e5e9
c000f12b:	50                   	push   eax
c000f12c:	e8 d3 c9 ff ff       	call   c000bb04 <Device::Device(char const*)>
c000f131:	83 c4 10             	add    esp,0x10
c000f134:	ba 70 e6 01 c0       	mov    edx,0xc001e670
c000f139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f13d:	89 10                	mov    DWORD PTR [eax],edx
c000f13f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f143:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f14d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f151:	05 78 01 00 00       	add    eax,0x178
c000f156:	83 ec 0c             	sub    esp,0xc
c000f159:	50                   	push   eax
c000f15a:	e8 1b 7f ff ff       	call   c000707a <GDT::GDT()>
c000f15f:	83 c4 10             	add    esp,0x10
c000f162:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f166:	05 7c 09 00 00       	add    eax,0x97c
c000f16b:	83 ec 0c             	sub    esp,0xc
c000f16e:	50                   	push   eax
c000f16f:	e8 40 81 ff ff       	call   c00072b4 <IDT::IDT()>
c000f174:	83 c4 10             	add    esp,0x10
c000f177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f17b:	05 7c 11 00 00       	add    eax,0x117c
c000f180:	83 ec 0c             	sub    esp,0xc
c000f183:	50                   	push   eax
c000f184:	e8 3f 9a ff ff       	call   c0008bc8 <TSS::TSS()>
c000f189:	83 c4 10             	add    esp,0x10
c000f18c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f190:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f197:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f19b:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f1a5:	90                   	nop
c000f1a6:	83 c4 0c             	add    esp,0xc
c000f1a9:	c3                   	ret    

c000f1aa <CPU::displayFeatures()>:
c000f1aa:	c3                   	ret    
c000f1ab:	90                   	nop

c000f1ac <CPU::detectFeatures()>:
c000f1ac:	55                   	push   ebp
c000f1ad:	57                   	push   edi
c000f1ae:	56                   	push   esi
c000f1af:	53                   	push   ebx
c000f1b0:	83 ec 30             	sub    esp,0x30
c000f1b3:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f1b7:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f1c1:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f1c8:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f1ce:	6a 0d                	push   0xd
c000f1d0:	6a 00                	push   0x0
c000f1d2:	55                   	push   ebp
c000f1d3:	e8 f8 12 ff ff       	call   c00004d0 <memset>
c000f1d8:	83 c4 10             	add    esp,0x10
c000f1db:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000f1e0:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f1e7:	0f 84 d5 05 00 00    	je     c000f7c2 <CPU::detectFeatures()+0x616>
c000f1ed:	83 ec 0c             	sub    esp,0xc
c000f1f0:	89 ef                	mov    edi,ebp
c000f1f2:	6a 10                	push   0x10
c000f1f4:	e8 6b fe ff ff       	call   c000f064 <CPU::cpuidCheckEDX(unsigned int)>
c000f1f9:	83 e0 01             	and    eax,0x1
c000f1fc:	8d 14 00             	lea    edx,[eax+eax*1]
c000f1ff:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f205:	83 e0 fd             	and    eax,0xfffffffd
c000f208:	09 d0                	or     eax,edx
c000f20a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f210:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f217:	e8 48 fe ff ff       	call   c000f064 <CPU::cpuidCheckEDX(unsigned int)>
c000f21c:	83 e0 01             	and    eax,0x1
c000f21f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f226:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f22c:	83 e0 fb             	and    eax,0xfffffffb
c000f22f:	09 d0                	or     eax,edx
c000f231:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f237:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f23e:	e8 21 fe ff ff       	call   c000f064 <CPU::cpuidCheckEDX(unsigned int)>
c000f243:	83 e0 01             	and    eax,0x1
c000f246:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f24d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f253:	83 e0 f7             	and    eax,0xfffffff7
c000f256:	09 d0                	or     eax,edx
c000f258:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f25e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f265:	e8 fa fd ff ff       	call   c000f064 <CPU::cpuidCheckEDX(unsigned int)>
c000f26a:	83 e0 01             	and    eax,0x1
c000f26d:	c1 e0 04             	shl    eax,0x4
c000f270:	88 c2                	mov    dl,al
c000f272:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f278:	83 e0 ef             	and    eax,0xffffffef
c000f27b:	09 d0                	or     eax,edx
c000f27d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f283:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f28a:	e8 d5 fd ff ff       	call   c000f064 <CPU::cpuidCheckEDX(unsigned int)>
c000f28f:	83 e0 01             	and    eax,0x1
c000f292:	c1 e0 05             	shl    eax,0x5
c000f295:	88 c2                	mov    dl,al
c000f297:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f29d:	83 e0 df             	and    eax,0xffffffdf
c000f2a0:	09 d0                	or     eax,edx
c000f2a2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f2a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f2af:	e8 b0 fd ff ff       	call   c000f064 <CPU::cpuidCheckEDX(unsigned int)>
c000f2b4:	83 e0 01             	and    eax,0x1
c000f2b7:	8d 14 00             	lea    edx,[eax+eax*1]
c000f2ba:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f2c0:	83 e0 fd             	and    eax,0xfffffffd
c000f2c3:	09 d0                	or     eax,edx
c000f2c5:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f2cb:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f2d2:	e8 8d fd ff ff       	call   c000f064 <CPU::cpuidCheckEDX(unsigned int)>
c000f2d7:	83 e0 01             	and    eax,0x1
c000f2da:	c1 e0 06             	shl    eax,0x6
c000f2dd:	88 c2                	mov    dl,al
c000f2df:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f2e5:	83 e0 bf             	and    eax,0xffffffbf
c000f2e8:	09 d0                	or     eax,edx
c000f2ea:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f2f0:	58                   	pop    eax
c000f2f1:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f2f5:	50                   	push   eax
c000f2f6:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f2fa:	50                   	push   eax
c000f2fb:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f2ff:	56                   	push   esi
c000f300:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f304:	50                   	push   eax
c000f305:	6a 00                	push   0x0
c000f307:	e8 d4 fc ff ff       	call   c000efe0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f30c:	b8 04 00 00 00       	mov    eax,0x4
c000f311:	89 c1                	mov    ecx,eax
c000f313:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f315:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f31b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f31f:	89 c1                	mov    ecx,eax
c000f321:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f323:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f329:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f32d:	89 c1                	mov    ecx,eax
c000f32f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f331:	83 c4 18             	add    esp,0x18
c000f334:	68 f8 e4 01 c0       	push   0xc001e4f8
c000f339:	55                   	push   ebp
c000f33a:	e8 a1 13 ff ff       	call   c00006e0 <strcmp>
c000f33f:	83 c4 10             	add    esp,0x10
c000f342:	85 c0                	test   eax,eax
c000f344:	75 0f                	jne    c000f355 <CPU::detectFeatures()+0x1a9>
c000f346:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f350:	e9 22 02 00 00       	jmp    c000f577 <CPU::detectFeatures()+0x3cb>
c000f355:	50                   	push   eax
c000f356:	50                   	push   eax
c000f357:	68 05 e5 01 c0       	push   0xc001e505
c000f35c:	55                   	push   ebp
c000f35d:	e8 7e 13 ff ff       	call   c00006e0 <strcmp>
c000f362:	83 c4 10             	add    esp,0x10
c000f365:	85 c0                	test   eax,eax
c000f367:	74 dd                	je     c000f346 <CPU::detectFeatures()+0x19a>
c000f369:	50                   	push   eax
c000f36a:	50                   	push   eax
c000f36b:	68 12 e5 01 c0       	push   0xc001e512
c000f370:	55                   	push   ebp
c000f371:	e8 6a 13 ff ff       	call   c00006e0 <strcmp>
c000f376:	83 c4 10             	add    esp,0x10
c000f379:	85 c0                	test   eax,eax
c000f37b:	74 2a                	je     c000f3a7 <CPU::detectFeatures()+0x1fb>
c000f37d:	50                   	push   eax
c000f37e:	50                   	push   eax
c000f37f:	68 1f e5 01 c0       	push   0xc001e51f
c000f384:	55                   	push   ebp
c000f385:	e8 56 13 ff ff       	call   c00006e0 <strcmp>
c000f38a:	83 c4 10             	add    esp,0x10
c000f38d:	85 c0                	test   eax,eax
c000f38f:	74 16                	je     c000f3a7 <CPU::detectFeatures()+0x1fb>
c000f391:	50                   	push   eax
c000f392:	50                   	push   eax
c000f393:	68 2c e5 01 c0       	push   0xc001e52c
c000f398:	55                   	push   ebp
c000f399:	e8 42 13 ff ff       	call   c00006e0 <strcmp>
c000f39e:	83 c4 10             	add    esp,0x10
c000f3a1:	85 c0                	test   eax,eax
c000f3a3:	74 48                	je     c000f3ed <CPU::detectFeatures()+0x241>
c000f3a5:	eb 0f                	jmp    c000f3b6 <CPU::detectFeatures()+0x20a>
c000f3a7:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f3b1:	e9 c1 01 00 00       	jmp    c000f577 <CPU::detectFeatures()+0x3cb>
c000f3b6:	50                   	push   eax
c000f3b7:	50                   	push   eax
c000f3b8:	68 39 e5 01 c0       	push   0xc001e539
c000f3bd:	55                   	push   ebp
c000f3be:	e8 1d 13 ff ff       	call   c00006e0 <strcmp>
c000f3c3:	83 c4 10             	add    esp,0x10
c000f3c6:	85 c0                	test   eax,eax
c000f3c8:	74 23                	je     c000f3ed <CPU::detectFeatures()+0x241>
c000f3ca:	57                   	push   edi
c000f3cb:	57                   	push   edi
c000f3cc:	68 46 e5 01 c0       	push   0xc001e546
c000f3d1:	55                   	push   ebp
c000f3d2:	e8 09 13 ff ff       	call   c00006e0 <strcmp>
c000f3d7:	83 c4 10             	add    esp,0x10
c000f3da:	85 c0                	test   eax,eax
c000f3dc:	75 1e                	jne    c000f3fc <CPU::detectFeatures()+0x250>
c000f3de:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f3e8:	e9 8a 01 00 00       	jmp    c000f577 <CPU::detectFeatures()+0x3cb>
c000f3ed:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f3f7:	e9 7b 01 00 00       	jmp    c000f577 <CPU::detectFeatures()+0x3cb>
c000f3fc:	56                   	push   esi
c000f3fd:	56                   	push   esi
c000f3fe:	68 53 e5 01 c0       	push   0xc001e553
c000f403:	55                   	push   ebp
c000f404:	e8 d7 12 ff ff       	call   c00006e0 <strcmp>
c000f409:	83 c4 10             	add    esp,0x10
c000f40c:	85 c0                	test   eax,eax
c000f40e:	75 0f                	jne    c000f41f <CPU::detectFeatures()+0x273>
c000f410:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f41a:	e9 58 01 00 00       	jmp    c000f577 <CPU::detectFeatures()+0x3cb>
c000f41f:	51                   	push   ecx
c000f420:	51                   	push   ecx
c000f421:	68 12 e5 01 c0       	push   0xc001e512
c000f426:	55                   	push   ebp
c000f427:	e8 b4 12 ff ff       	call   c00006e0 <strcmp>
c000f42c:	83 c4 10             	add    esp,0x10
c000f42f:	85 c0                	test   eax,eax
c000f431:	75 0f                	jne    c000f442 <CPU::detectFeatures()+0x296>
c000f433:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f43d:	e9 35 01 00 00       	jmp    c000f577 <CPU::detectFeatures()+0x3cb>
c000f442:	52                   	push   edx
c000f443:	52                   	push   edx
c000f444:	68 60 e5 01 c0       	push   0xc001e560
c000f449:	55                   	push   ebp
c000f44a:	e8 91 12 ff ff       	call   c00006e0 <strcmp>
c000f44f:	83 c4 10             	add    esp,0x10
c000f452:	85 c0                	test   eax,eax
c000f454:	75 0f                	jne    c000f465 <CPU::detectFeatures()+0x2b9>
c000f456:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f460:	e9 12 01 00 00       	jmp    c000f577 <CPU::detectFeatures()+0x3cb>
c000f465:	50                   	push   eax
c000f466:	50                   	push   eax
c000f467:	68 6d e5 01 c0       	push   0xc001e56d
c000f46c:	55                   	push   ebp
c000f46d:	e8 6e 12 ff ff       	call   c00006e0 <strcmp>
c000f472:	83 c4 10             	add    esp,0x10
c000f475:	85 c0                	test   eax,eax
c000f477:	75 0f                	jne    c000f488 <CPU::detectFeatures()+0x2dc>
c000f479:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f483:	e9 ef 00 00 00       	jmp    c000f577 <CPU::detectFeatures()+0x3cb>
c000f488:	50                   	push   eax
c000f489:	50                   	push   eax
c000f48a:	68 7a e5 01 c0       	push   0xc001e57a
c000f48f:	55                   	push   ebp
c000f490:	e8 4b 12 ff ff       	call   c00006e0 <strcmp>
c000f495:	83 c4 10             	add    esp,0x10
c000f498:	85 c0                	test   eax,eax
c000f49a:	75 0f                	jne    c000f4ab <CPU::detectFeatures()+0x2ff>
c000f49c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f4a6:	e9 cc 00 00 00       	jmp    c000f577 <CPU::detectFeatures()+0x3cb>
c000f4ab:	50                   	push   eax
c000f4ac:	50                   	push   eax
c000f4ad:	68 87 e5 01 c0       	push   0xc001e587
c000f4b2:	55                   	push   ebp
c000f4b3:	e8 28 12 ff ff       	call   c00006e0 <strcmp>
c000f4b8:	83 c4 10             	add    esp,0x10
c000f4bb:	85 c0                	test   eax,eax
c000f4bd:	75 0f                	jne    c000f4ce <CPU::detectFeatures()+0x322>
c000f4bf:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f4c9:	e9 a9 00 00 00       	jmp    c000f577 <CPU::detectFeatures()+0x3cb>
c000f4ce:	50                   	push   eax
c000f4cf:	50                   	push   eax
c000f4d0:	68 94 e5 01 c0       	push   0xc001e594
c000f4d5:	55                   	push   ebp
c000f4d6:	e8 05 12 ff ff       	call   c00006e0 <strcmp>
c000f4db:	83 c4 10             	add    esp,0x10
c000f4de:	85 c0                	test   eax,eax
c000f4e0:	75 0f                	jne    c000f4f1 <CPU::detectFeatures()+0x345>
c000f4e2:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f4ec:	e9 86 00 00 00       	jmp    c000f577 <CPU::detectFeatures()+0x3cb>
c000f4f1:	50                   	push   eax
c000f4f2:	50                   	push   eax
c000f4f3:	68 a1 e5 01 c0       	push   0xc001e5a1
c000f4f8:	55                   	push   ebp
c000f4f9:	e8 e2 11 ff ff       	call   c00006e0 <strcmp>
c000f4fe:	83 c4 10             	add    esp,0x10
c000f501:	85 c0                	test   eax,eax
c000f503:	75 0c                	jne    c000f511 <CPU::detectFeatures()+0x365>
c000f505:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f50f:	eb 66                	jmp    c000f577 <CPU::detectFeatures()+0x3cb>
c000f511:	50                   	push   eax
c000f512:	50                   	push   eax
c000f513:	68 ae e5 01 c0       	push   0xc001e5ae
c000f518:	55                   	push   ebp
c000f519:	e8 c2 11 ff ff       	call   c00006e0 <strcmp>
c000f51e:	83 c4 10             	add    esp,0x10
c000f521:	85 c0                	test   eax,eax
c000f523:	75 0c                	jne    c000f531 <CPU::detectFeatures()+0x385>
c000f525:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f52f:	eb 46                	jmp    c000f577 <CPU::detectFeatures()+0x3cb>
c000f531:	57                   	push   edi
c000f532:	57                   	push   edi
c000f533:	68 bb e5 01 c0       	push   0xc001e5bb
c000f538:	55                   	push   ebp
c000f539:	e8 a2 11 ff ff       	call   c00006e0 <strcmp>
c000f53e:	83 c4 10             	add    esp,0x10
c000f541:	85 c0                	test   eax,eax
c000f543:	74 e0                	je     c000f525 <CPU::detectFeatures()+0x379>
c000f545:	56                   	push   esi
c000f546:	56                   	push   esi
c000f547:	68 c8 e5 01 c0       	push   0xc001e5c8
c000f54c:	55                   	push   ebp
c000f54d:	e8 8e 11 ff ff       	call   c00006e0 <strcmp>
c000f552:	83 c4 10             	add    esp,0x10
c000f555:	85 c0                	test   eax,eax
c000f557:	74 cc                	je     c000f525 <CPU::detectFeatures()+0x379>
c000f559:	51                   	push   ecx
c000f55a:	51                   	push   ecx
c000f55b:	68 d5 e5 01 c0       	push   0xc001e5d5
c000f560:	55                   	push   ebp
c000f561:	e8 7a 11 ff ff       	call   c00006e0 <strcmp>
c000f566:	83 c4 10             	add    esp,0x10
c000f569:	85 c0                	test   eax,eax
c000f56b:	74 b8                	je     c000f525 <CPU::detectFeatures()+0x379>
c000f56d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f577:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f57c:	0f 86 be 00 00 00    	jbe    c000f640 <CPU::detectFeatures()+0x494>
c000f582:	83 ec 0c             	sub    esp,0xc
c000f585:	68 80 00 00 00       	push   0x80
c000f58a:	e8 31 fb ff ff       	call   c000f0c0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f58f:	83 e0 01             	and    eax,0x1
c000f592:	c1 e0 06             	shl    eax,0x6
c000f595:	88 c2                	mov    dl,al
c000f597:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f59d:	83 e0 bf             	and    eax,0xffffffbf
c000f5a0:	09 d0                	or     eax,edx
c000f5a2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f5a8:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f5af:	e8 0c fb ff ff       	call   c000f0c0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f5b4:	83 e0 01             	and    eax,0x1
c000f5b7:	c1 e0 04             	shl    eax,0x4
c000f5ba:	88 c2                	mov    dl,al
c000f5bc:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f5c2:	83 e0 ef             	and    eax,0xffffffef
c000f5c5:	09 d0                	or     eax,edx
c000f5c7:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f5cd:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f5d4:	e8 e7 fa ff ff       	call   c000f0c0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f5d9:	c1 e0 07             	shl    eax,0x7
c000f5dc:	88 c2                	mov    dl,al
c000f5de:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f5e4:	83 e0 7f             	and    eax,0x7f
c000f5e7:	09 d0                	or     eax,edx
c000f5e9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f5ef:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f5f6:	e8 f3 fa ff ff       	call   c000f0ee <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f5fb:	83 e0 01             	and    eax,0x1
c000f5fe:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f605:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f60b:	83 e0 f7             	and    eax,0xfffffff7
c000f60e:	09 d0                	or     eax,edx
c000f610:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f616:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f61d:	e8 cc fa ff ff       	call   c000f0ee <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f622:	83 c4 10             	add    esp,0x10
c000f625:	83 e0 01             	and    eax,0x1
c000f628:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f62f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f635:	83 e0 fb             	and    eax,0xfffffffb
c000f638:	09 d0                	or     eax,edx
c000f63a:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f640:	83 ec 0c             	sub    esp,0xc
c000f643:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f647:	50                   	push   eax
c000f648:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f64c:	50                   	push   eax
c000f64d:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f651:	56                   	push   esi
c000f652:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f656:	50                   	push   eax
c000f657:	6a 01                	push   0x1
c000f659:	e8 82 f9 ff ff       	call   c000efe0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f65e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f662:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f668:	88 ca                	mov    dl,cl
c000f66a:	83 e0 f0             	and    eax,0xfffffff0
c000f66d:	83 e2 0f             	and    edx,0xf
c000f670:	09 d0                	or     eax,edx
c000f672:	88 ca                	mov    dl,cl
c000f674:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f67a:	c0 ea 04             	shr    dl,0x4
c000f67d:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f681:	0f b6 c2             	movzx  eax,dl
c000f684:	83 c4 20             	add    esp,0x20
c000f687:	c1 e0 06             	shl    eax,0x6
c000f68a:	89 c7                	mov    edi,eax
c000f68c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f692:	66 25 3f c0          	and    ax,0xc03f
c000f696:	09 f8                	or     eax,edi
c000f698:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f69f:	89 c8                	mov    eax,ecx
c000f6a1:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f6a8:	c1 e8 08             	shr    eax,0x8
c000f6ab:	83 e5 3f             	and    ebp,0x3f
c000f6ae:	83 e0 0f             	and    eax,0xf
c000f6b1:	89 c7                	mov    edi,eax
c000f6b3:	c1 e7 06             	shl    edi,0x6
c000f6b6:	09 ef                	or     edi,ebp
c000f6b8:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f6bf:	89 fa                	mov    edx,edi
c000f6c1:	83 e5 c0             	and    ebp,0xffffffc0
c000f6c4:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f6ca:	88 c2                	mov    dl,al
c000f6cc:	c0 ea 02             	shr    dl,0x2
c000f6cf:	89 d7                	mov    edi,edx
c000f6d1:	09 ef                	or     edi,ebp
c000f6d3:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f6d9:	89 fa                	mov    edx,edi
c000f6db:	83 e5 cf             	and    ebp,0xffffffcf
c000f6de:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f6e4:	89 cf                	mov    edi,ecx
c000f6e6:	c1 ef 0c             	shr    edi,0xc
c000f6e9:	83 e7 03             	and    edi,0x3
c000f6ec:	c1 e7 04             	shl    edi,0x4
c000f6ef:	09 ef                	or     edi,ebp
c000f6f1:	3c 06                	cmp    al,0x6
c000f6f3:	89 fa                	mov    edx,edi
c000f6f5:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f6fb:	74 04                	je     c000f701 <CPU::detectFeatures()+0x555>
c000f6fd:	3c 0f                	cmp    al,0xf
c000f6ff:	75 5c                	jne    c000f75d <CPU::detectFeatures()+0x5b1>
c000f701:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f705:	89 cf                	mov    edi,ecx
c000f707:	c1 ef 10             	shr    edi,0x10
c000f70a:	c1 e7 04             	shl    edi,0x4
c000f70d:	09 fa                	or     edx,edi
c000f70f:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f715:	0f b6 d2             	movzx  edx,dl
c000f718:	66 81 e7 3f c0       	and    di,0xc03f
c000f71d:	c1 e2 06             	shl    edx,0x6
c000f720:	09 fa                	or     edx,edi
c000f722:	3c 0f                	cmp    al,0xf
c000f724:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f72b:	75 30                	jne    c000f75d <CPU::detectFeatures()+0x5b1>
c000f72d:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f733:	c1 e9 14             	shr    ecx,0x14
c000f736:	83 e0 3f             	and    eax,0x3f
c000f739:	83 c1 0f             	add    ecx,0xf
c000f73c:	88 ca                	mov    dl,cl
c000f73e:	c0 e9 02             	shr    cl,0x2
c000f741:	c1 e2 06             	shl    edx,0x6
c000f744:	09 d0                	or     eax,edx
c000f746:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f74c:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f752:	83 e0 c0             	and    eax,0xffffffc0
c000f755:	09 c1                	or     ecx,eax
c000f757:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f75d:	83 ec 0c             	sub    esp,0xc
c000f760:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f767:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f76b:	50                   	push   eax
c000f76c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f770:	55                   	push   ebp
c000f771:	56                   	push   esi
c000f772:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f776:	57                   	push   edi
c000f777:	68 00 00 00 80       	push   0x80000000
c000f77c:	e8 5f f8 ff ff       	call   c000efe0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f781:	83 c4 20             	add    esp,0x20
c000f784:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f78c:	76 22                	jbe    c000f7b0 <CPU::detectFeatures()+0x604>
c000f78e:	83 ec 0c             	sub    esp,0xc
c000f791:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f795:	50                   	push   eax
c000f796:	55                   	push   ebp
c000f797:	56                   	push   esi
c000f798:	57                   	push   edi
c000f799:	68 01 00 00 80       	push   0x80000001
c000f79e:	e8 3d f8 ff ff       	call   c000efe0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f7a3:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f7ad:	83 c4 20             	add    esp,0x20
c000f7b0:	52                   	push   edx
c000f7b1:	52                   	push   edx
c000f7b2:	68 e1 e5 01 c0       	push   0xc001e5e1
c000f7b7:	53                   	push   ebx
c000f7b8:	e8 39 c3 ff ff       	call   c000baf6 <Device::setName(char const*)>
c000f7bd:	83 c4 10             	add    esp,0x10
c000f7c0:	eb 67                	jmp    c000f829 <CPU::detectFeatures()+0x67d>
c000f7c2:	50                   	push   eax
c000f7c3:	50                   	push   eax
c000f7c4:	68 46 e5 01 c0       	push   0xc001e546
c000f7c9:	55                   	push   ebp
c000f7ca:	e8 31 0e ff ff       	call   c0000600 <strcpy>
c000f7cf:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f7d9:	e8 e5 09 ff ff       	call   c00001c3 <is486>
c000f7de:	83 c4 10             	add    esp,0x10
c000f7e1:	85 c0                	test   eax,eax
c000f7e3:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f7e9:	74 1d                	je     c000f808 <CPU::detectFeatures()+0x65c>
c000f7eb:	83 c8 07             	or     eax,0x7
c000f7ee:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f7f4:	0f 20 c0             	mov    eax,cr0
c000f7f7:	83 e0 14             	and    eax,0x14
c000f7fa:	83 f8 04             	cmp    eax,0x4
c000f7fd:	75 0e                	jne    c000f80d <CPU::detectFeatures()+0x661>
c000f7ff:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000f806:	eb 21                	jmp    c000f829 <CPU::detectFeatures()+0x67d>
c000f808:	83 e0 f8             	and    eax,0xfffffff8
c000f80b:	eb e1                	jmp    c000f7ee <CPU::detectFeatures()+0x642>
c000f80d:	e8 8c 09 ff ff       	call   c000019e <hasLegacyFPU>
c000f812:	83 e0 01             	and    eax,0x1
c000f815:	8d 14 00             	lea    edx,[eax+eax*1]
c000f818:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f81e:	83 e0 fd             	and    eax,0xfffffffd
c000f821:	09 d0                	or     eax,edx
c000f823:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f829:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000f830:	74 0e                	je     c000f840 <CPU::detectFeatures()+0x694>
c000f832:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000f837:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000f83e:	eb 20                	jmp    c000f860 <CPU::detectFeatures()+0x6b4>
c000f840:	e8 59 09 ff ff       	call   c000019e <hasLegacyFPU>
c000f845:	83 e0 01             	and    eax,0x1
c000f848:	8d 14 00             	lea    edx,[eax+eax*1]
c000f84b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f851:	83 e0 fd             	and    eax,0xfffffffd
c000f854:	09 d0                	or     eax,edx
c000f856:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f85c:	a8 02                	test   al,0x2
c000f85e:	75 d2                	jne    c000f832 <CPU::detectFeatures()+0x686>
c000f860:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000f867:	83 c4 2c             	add    esp,0x2c
c000f86a:	5b                   	pop    ebx
c000f86b:	5e                   	pop    esi
c000f86c:	5f                   	pop    edi
c000f86d:	5d                   	pop    ebp
c000f86e:	c3                   	ret    
c000f86f:	90                   	nop

c000f870 <CPU::setupSMEP()>:
c000f870:	0f 20 e0             	mov    eax,cr4
c000f873:	0d 00 00 10 00       	or     eax,0x100000
c000f878:	0f 22 e0             	mov    cr4,eax
c000f87b:	c3                   	ret    

c000f87c <CPU::setupUMIP()>:
c000f87c:	0f 20 e0             	mov    eax,cr4
c000f87f:	80 cc 08             	or     ah,0x8
c000f882:	0f 22 e0             	mov    cr4,eax
c000f885:	c3                   	ret    

c000f886 <CPU::setupTSC()>:
c000f886:	0f 20 e0             	mov    eax,cr4
c000f889:	83 c8 04             	or     eax,0x4
c000f88c:	0f 22 e0             	mov    cr4,eax
c000f88f:	c3                   	ret    

c000f890 <CPU::setupLargePages()>:
c000f890:	0f 20 e0             	mov    eax,cr4
c000f893:	83 c8 10             	or     eax,0x10
c000f896:	0f 22 e0             	mov    cr4,eax
c000f899:	c3                   	ret    

c000f89a <CPU::setupPAT()>:
c000f89a:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000f89f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000f8a6:	74 2c                	je     c000f8d4 <CPU::setupPAT()+0x3a>
c000f8a8:	53                   	push   ebx
c000f8a9:	83 ec 10             	sub    esp,0x10
c000f8ac:	68 77 02 00 00       	push   0x277
c000f8b1:	50                   	push   eax
c000f8b2:	e8 3b 75 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c000f8b7:	83 e2 f8             	and    edx,0xfffffff8
c000f8ba:	83 ca 01             	or     edx,0x1
c000f8bd:	52                   	push   edx
c000f8be:	50                   	push   eax
c000f8bf:	68 77 02 00 00       	push   0x277
c000f8c4:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c000f8ca:	e8 4f 75 ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f8cf:	83 c4 28             	add    esp,0x28
c000f8d2:	5b                   	pop    ebx
c000f8d3:	c3                   	ret    
c000f8d4:	c3                   	ret    
c000f8d5:	90                   	nop

c000f8d6 <CPU::setupMTRR()>:
c000f8d6:	c3                   	ret    
c000f8d7:	90                   	nop

c000f8d8 <CPU::setupGlobalPages()>:
c000f8d8:	0f 20 e0             	mov    eax,cr4
c000f8db:	0c 80                	or     al,0x80
c000f8dd:	0f 22 e0             	mov    cr4,eax
c000f8e0:	c3                   	ret    
c000f8e1:	90                   	nop

c000f8e2 <CPU::allowUsermodeDataAccess()>:
c000f8e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f8e6:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f8ed:	74 03                	je     c000f8f2 <CPU::allowUsermodeDataAccess()+0x10>
c000f8ef:	0f 01 cb             	stac   
c000f8f2:	c3                   	ret    
c000f8f3:	90                   	nop

c000f8f4 <CPU::prohibitUsermodeDataAccess()>:
c000f8f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f8f8:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f8ff:	74 03                	je     c000f904 <CPU::prohibitUsermodeDataAccess()+0x10>
c000f901:	0f 01 ca             	clac   
c000f904:	c3                   	ret    
c000f905:	90                   	nop

c000f906 <CPU::setupSMAP()>:
c000f906:	0f 20 e0             	mov    eax,cr4
c000f909:	0d 00 00 20 00       	or     eax,0x200000
c000f90e:	0f 22 e0             	mov    cr4,eax
c000f911:	eb e1                	jmp    c000f8f4 <CPU::prohibitUsermodeDataAccess()>
c000f913:	90                   	nop

c000f914 <CPU::setupFeatures()>:
c000f914:	53                   	push   ebx
c000f915:	83 ec 08             	sub    esp,0x8
c000f918:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f91c:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000f923:	74 18                	je     c000f93d <CPU::setupFeatures()+0x29>
c000f925:	83 ec 0c             	sub    esp,0xc
c000f928:	68 ed e5 01 c0       	push   0xc001e5ed
c000f92d:	e8 fb ab ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c000f932:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f935:	e8 42 ff ff ff       	call   c000f87c <CPU::setupUMIP()>
c000f93a:	83 c4 10             	add    esp,0x10
c000f93d:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000f944:	74 18                	je     c000f95e <CPU::setupFeatures()+0x4a>
c000f946:	83 ec 0c             	sub    esp,0xc
c000f949:	68 f7 e5 01 c0       	push   0xc001e5f7
c000f94e:	e8 da ab ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c000f953:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f956:	e8 2b ff ff ff       	call   c000f886 <CPU::setupTSC()>
c000f95b:	83 c4 10             	add    esp,0x10
c000f95e:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000f965:	74 18                	je     c000f97f <CPU::setupFeatures()+0x6b>
c000f967:	83 ec 0c             	sub    esp,0xc
c000f96a:	68 00 e6 01 c0       	push   0xc001e600
c000f96f:	e8 b9 ab ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c000f974:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f977:	e8 14 ff ff ff       	call   c000f890 <CPU::setupLargePages()>
c000f97c:	83 c4 10             	add    esp,0x10
c000f97f:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000f986:	74 18                	je     c000f9a0 <CPU::setupFeatures()+0x8c>
c000f988:	83 ec 0c             	sub    esp,0xc
c000f98b:	68 09 e6 01 c0       	push   0xc001e609
c000f990:	e8 98 ab ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c000f995:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f998:	e8 3b ff ff ff       	call   c000f8d8 <CPU::setupGlobalPages()>
c000f99d:	83 c4 10             	add    esp,0x10
c000f9a0:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000f9a7:	74 18                	je     c000f9c1 <CPU::setupFeatures()+0xad>
c000f9a9:	83 ec 0c             	sub    esp,0xc
c000f9ac:	68 1b e6 01 c0       	push   0xc001e61b
c000f9b1:	e8 77 ab ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c000f9b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f9b9:	e8 dc fe ff ff       	call   c000f89a <CPU::setupPAT()>
c000f9be:	83 c4 10             	add    esp,0x10
c000f9c1:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000f9c8:	74 11                	je     c000f9db <CPU::setupFeatures()+0xc7>
c000f9ca:	c7 44 24 10 24 e6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e624
c000f9d2:	83 c4 08             	add    esp,0x8
c000f9d5:	5b                   	pop    ebx
c000f9d6:	e9 52 ab ff ff       	jmp    c000a52d <Dbg::kprintf(char const*, ...)>
c000f9db:	83 c4 08             	add    esp,0x8
c000f9de:	5b                   	pop    ebx
c000f9df:	c3                   	ret    

c000f9e0 <CPU::open(int, int, void*)>:
c000f9e0:	57                   	push   edi
c000f9e1:	56                   	push   esi
c000f9e2:	53                   	push   ebx
c000f9e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f9e7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f9eb:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000f9f1:	83 ec 0c             	sub    esp,0xc
c000f9f4:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000f9fa:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000fa00:	50                   	push   eax
c000fa01:	e8 d6 76 ff ff       	call   c00070dc <GDT::setup()>
c000fa06:	83 c4 0c             	add    esp,0xc
c000fa09:	6a 00                	push   0x0
c000fa0b:	68 ef be ad de       	push   0xdeadbeef
c000fa10:	57                   	push   edi
c000fa11:	e8 f6 91 ff ff       	call   c0008c0c <TSS::setup(unsigned long, unsigned long)>
c000fa16:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fa19:	e8 ce 91 ff ff       	call   c0008bec <TSS::flush()>
c000fa1e:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000fa24:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa27:	e8 fe 78 ff ff       	call   c000732a <IDT::setup()>
c000fa2c:	b8 00 04 00 00       	mov    eax,0x400
c000fa31:	0f 23 f8             	mov    db7,eax
c000fa34:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000fa3e:	e8 52 80 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000fa43:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000fa49:	89 30                	mov    DWORD PTR [eax],esi
c000fa4b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000fa51:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000fa54:	58                   	pop    eax
c000fa55:	5a                   	pop    edx
c000fa56:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000fa5c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fa60:	e8 ab a1 ff ff       	call   c0009c10 <VAS::setCPUSpecific(unsigned long)>
c000fa65:	c7 04 24 2e e6 01 c0 	mov    DWORD PTR [esp],0xc001e62e
c000fa6c:	e8 c6 00 00 00       	call   c000fb37 <KeSetBootMessage(char const*)>
c000fa71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa74:	e8 33 f7 ff ff       	call   c000f1ac <CPU::detectFeatures()>
c000fa79:	c7 04 24 51 e6 01 c0 	mov    DWORD PTR [esp],0xc001e651
c000fa80:	e8 b2 00 00 00       	call   c000fb37 <KeSetBootMessage(char const*)>
c000fa85:	e8 26 5c 00 00       	call   c00156b0 <HalInitialise()>
c000fa8a:	a1 d0 1e 02 c0       	mov    eax,ds:0xc0021ed0
c000fa8f:	83 e0 10             	and    eax,0x10
c000fa92:	83 f8 01             	cmp    eax,0x1
c000fa95:	19 c0                	sbb    eax,eax
c000fa97:	83 e0 46             	and    eax,0x46
c000fa9a:	83 c0 1e             	add    eax,0x1e
c000fa9d:	89 04 24             	mov    DWORD PTR [esp],eax
c000faa0:	e8 60 d7 ff ff       	call   c000d205 <setupTimer(int)>
c000faa5:	83 c4 10             	add    esp,0x10
c000faa8:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000faae:	f6 05 d0 1e 02 c0 20 	test   BYTE PTR ds:0xc0021ed0,0x20
c000fab5:	74 0c                	je     c000fac3 <CPU::open(int, int, void*)+0xe3>
c000fab7:	83 ec 0c             	sub    esp,0xc
c000faba:	53                   	push   ebx
c000fabb:	e8 54 fe ff ff       	call   c000f914 <CPU::setupFeatures()>
c000fac0:	83 c4 10             	add    esp,0x10
c000fac3:	5b                   	pop    ebx
c000fac4:	31 c0                	xor    eax,eax
c000fac6:	5e                   	pop    esi
c000fac7:	5f                   	pop    edi
c000fac8:	c3                   	ret    

c000fac9 <KeDisplaySplashScreen()>:
c000fac9:	55                   	push   ebp
c000faca:	bd 05 00 00 00       	mov    ebp,0x5
c000facf:	57                   	push   edi
c000fad0:	bf 40 f8 01 c0       	mov    edi,0xc001f840
c000fad5:	56                   	push   esi
c000fad6:	be 0a 00 00 00       	mov    esi,0xa
c000fadb:	53                   	push   ebx
c000fadc:	31 db                	xor    ebx,ebx
c000fade:	83 ec 0c             	sub    esp,0xc
c000fae1:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fae4:	84 c0                	test   al,al
c000fae6:	74 47                	je     c000fb2f <KeDisplaySplashScreen()+0x66>
c000fae8:	80 bb 76 f8 01 c0 db 	cmp    BYTE PTR [ebx-0x3ffe078a],0xdb
c000faef:	75 13                	jne    c000fb04 <KeDisplaySplashScreen()+0x3b>
c000faf1:	0f b6 93 75 f8 01 c0 	movzx  edx,BYTE PTR [ebx-0x3ffe078b]
c000faf8:	83 e2 fe             	and    edx,0xfffffffe
c000fafb:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fb01:	75 01                	jne    c000fb04 <KeDisplaySplashScreen()+0x3b>
c000fb03:	46                   	inc    esi
c000fb04:	3c 0d                	cmp    al,0xd
c000fb06:	74 24                	je     c000fb2c <KeDisplaySplashScreen()+0x63>
c000fb08:	3c 0a                	cmp    al,0xa
c000fb0a:	75 0a                	jne    c000fb16 <KeDisplaySplashScreen()+0x4d>
c000fb0c:	45                   	inc    ebp
c000fb0d:	be 0a 00 00 00       	mov    esi,0xa
c000fb12:	31 db                	xor    ebx,ebx
c000fb14:	eb 16                	jmp    c000fb2c <KeDisplaySplashScreen()+0x63>
c000fb16:	83 ec 0c             	sub    esp,0xc
c000fb19:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fb1c:	55                   	push   ebp
c000fb1d:	43                   	inc    ebx
c000fb1e:	52                   	push   edx
c000fb1f:	6a 00                	push   0x0
c000fb21:	6a 0e                	push   0xe
c000fb23:	50                   	push   eax
c000fb24:	e8 eb 67 00 00       	call   c0016314 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fb29:	83 c4 20             	add    esp,0x20
c000fb2c:	47                   	inc    edi
c000fb2d:	eb b2                	jmp    c000fae1 <KeDisplaySplashScreen()+0x18>
c000fb2f:	83 c4 0c             	add    esp,0xc
c000fb32:	5b                   	pop    ebx
c000fb33:	5e                   	pop    esi
c000fb34:	5f                   	pop    edi
c000fb35:	5d                   	pop    ebp
c000fb36:	c3                   	ret    

c000fb37 <KeSetBootMessage(char const*)>:
c000fb37:	57                   	push   edi
c000fb38:	56                   	push   esi
c000fb39:	53                   	push   ebx
c000fb3a:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fb40:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fb47:	68 9e 00 00 00       	push   0x9e
c000fb4c:	6a 00                	push   0x0
c000fb4e:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fb52:	56                   	push   esi
c000fb53:	e8 78 09 ff ff       	call   c00004d0 <memset>
c000fb58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb5b:	e8 e0 09 ff ff       	call   c0000540 <strlen>
c000fb60:	ba 50 00 00 00       	mov    edx,0x50
c000fb65:	83 c4 10             	add    esp,0x10
c000fb68:	29 c2                	sub    edx,eax
c000fb6a:	31 c9                	xor    ecx,ecx
c000fb6c:	83 e2 fe             	and    edx,0xfffffffe
c000fb6f:	01 f2                	add    edx,esi
c000fb71:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fb76:	84 c0                	test   al,al
c000fb78:	74 0a                	je     c000fb84 <KeSetBootMessage(char const*)+0x4d>
c000fb7a:	80 cc 0f             	or     ah,0xf
c000fb7d:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fb81:	41                   	inc    ecx
c000fb82:	eb ed                	jmp    c000fb71 <KeSetBootMessage(char const*)+0x3a>
c000fb84:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fb89:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fb8e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fb90:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fb96:	5b                   	pop    ebx
c000fb97:	5e                   	pop    esi
c000fb98:	5f                   	pop    edi
c000fb99:	c3                   	ret    

c000fb9a <EnvVarContainer::getEnv(char const*)>:
c000fb9a:	57                   	push   edi
c000fb9b:	56                   	push   esi
c000fb9c:	53                   	push   ebx
c000fb9d:	31 db                	xor    ebx,ebx
c000fb9f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fba3:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fba5:	7e 2b                	jle    c000fbd2 <EnvVarContainer::getEnv(char const*)+0x38>
c000fba7:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fbae:	50                   	push   eax
c000fbaf:	50                   	push   eax
c000fbb0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fbb3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fbb6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fbba:	e8 21 0b ff ff       	call   c00006e0 <strcmp>
c000fbbf:	83 c4 10             	add    esp,0x10
c000fbc2:	85 c0                	test   eax,eax
c000fbc4:	75 09                	jne    c000fbcf <EnvVarContainer::getEnv(char const*)+0x35>
c000fbc6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fbc9:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fbcd:	eb 05                	jmp    c000fbd4 <EnvVarContainer::getEnv(char const*)+0x3a>
c000fbcf:	43                   	inc    ebx
c000fbd0:	eb d1                	jmp    c000fba3 <EnvVarContainer::getEnv(char const*)+0x9>
c000fbd2:	31 c0                	xor    eax,eax
c000fbd4:	5b                   	pop    ebx
c000fbd5:	5e                   	pop    esi
c000fbd6:	5f                   	pop    edi
c000fbd7:	c3                   	ret    

c000fbd8 <EnvVarContainer::setEnv(char const*, char const*)>:
c000fbd8:	55                   	push   ebp
c000fbd9:	57                   	push   edi
c000fbda:	56                   	push   esi
c000fbdb:	53                   	push   ebx
c000fbdc:	83 ec 28             	sub    esp,0x28
c000fbdf:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fbe3:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fbe7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fbeb:	56                   	push   esi
c000fbec:	e8 4f 09 ff ff       	call   c0000540 <strlen>
c000fbf1:	40                   	inc    eax
c000fbf2:	89 04 24             	mov    DWORD PTR [esp],eax
c000fbf5:	e8 bf 7b ff ff       	call   c00077b9 <malloc>
c000fbfa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbfd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fc01:	e8 3a 09 ff ff       	call   c0000540 <strlen>
c000fc06:	40                   	inc    eax
c000fc07:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc0a:	e8 aa 7b ff ff       	call   c00077b9 <malloc>
c000fc0f:	89 34 24             	mov    DWORD PTR [esp],esi
c000fc12:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fc16:	e8 25 09 ff ff       	call   c0000540 <strlen>
c000fc1b:	83 c4 0c             	add    esp,0xc
c000fc1e:	40                   	inc    eax
c000fc1f:	50                   	push   eax
c000fc20:	6a 00                	push   0x0
c000fc22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fc26:	e8 a5 08 ff ff       	call   c00004d0 <memset>
c000fc2b:	89 34 24             	mov    DWORD PTR [esp],esi
c000fc2e:	e8 0d 09 ff ff       	call   c0000540 <strlen>
c000fc33:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fc37:	8d 48 01             	lea    ecx,[eax+0x1]
c000fc3a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc3f:	89 de                	mov    esi,ebx
c000fc41:	e8 fa 08 ff ff       	call   c0000540 <strlen>
c000fc46:	83 c4 0c             	add    esp,0xc
c000fc49:	40                   	inc    eax
c000fc4a:	50                   	push   eax
c000fc4b:	6a 00                	push   0x0
c000fc4d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc51:	e8 7a 08 ff ff       	call   c00004d0 <memset>
c000fc56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc59:	e8 e2 08 ff ff       	call   c0000540 <strlen>
c000fc5e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fc62:	8d 48 01             	lea    ecx,[eax+0x1]
c000fc65:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc67:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fc6a:	40                   	inc    eax
c000fc6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fc6e:	c1 e0 03             	shl    eax,0x3
c000fc71:	5a                   	pop    edx
c000fc72:	59                   	pop    ecx
c000fc73:	50                   	push   eax
c000fc74:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fc77:	e8 29 7b ff ff       	call   c00077a5 <realloc>
c000fc7c:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fc80:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fc83:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fc86:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fc8a:	b9 08 00 00 00       	mov    ecx,0x8
c000fc8f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc91:	83 c4 2c             	add    esp,0x2c
c000fc94:	5b                   	pop    ebx
c000fc95:	5e                   	pop    esi
c000fc96:	5f                   	pop    edi
c000fc97:	5d                   	pop    ebp
c000fc98:	c3                   	ret    
c000fc99:	90                   	nop

c000fc9a <EnvVarContainer::deleteEnv(char const*)>:
c000fc9a:	c3                   	ret    
c000fc9b:	90                   	nop

c000fc9c <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fc9c:	55                   	push   ebp
c000fc9d:	57                   	push   edi
c000fc9e:	56                   	push   esi
c000fc9f:	53                   	push   ebx
c000fca0:	81 ec 38 01 00 00    	sub    esp,0x138
c000fca6:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fcad:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fcb4:	68 14 01 00 00       	push   0x114
c000fcb9:	e8 fb 7a ff ff       	call   c00077b9 <malloc>
c000fcbe:	83 c4 0c             	add    esp,0xc
c000fcc1:	89 c3                	mov    ebx,eax
c000fcc3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fcc6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fccd:	50                   	push   eax
c000fcce:	e8 cf ad ff ff       	call   c000aaa2 <File::File(char const*, Process*)>
c000fcd3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fcd6:	e8 f5 b0 ff ff       	call   c000add0 <File::exists()>
c000fcdb:	83 c4 10             	add    esp,0x10
c000fcde:	84 c0                	test   al,al
c000fce0:	75 31                	jne    c000fd13 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fce2:	50                   	push   eax
c000fce3:	50                   	push   eax
c000fce4:	6a 12                	push   0x12
c000fce6:	53                   	push   ebx
c000fce7:	e8 76 ae ff ff       	call   c000ab62 <File::open(FileOpenMode)>
c000fcec:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fcee:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000fcf1:	89 34 24             	mov    DWORD PTR [esp],esi
c000fcf4:	e8 47 08 ff ff       	call   c0000540 <strlen>
c000fcf9:	5a                   	pop    edx
c000fcfa:	31 d2                	xor    edx,edx
c000fcfc:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fd00:	51                   	push   ecx
c000fd01:	56                   	push   esi
c000fd02:	52                   	push   edx
c000fd03:	50                   	push   eax
c000fd04:	53                   	push   ebx
c000fd05:	ff d7                	call   edi
c000fd07:	83 c4 14             	add    esp,0x14
c000fd0a:	53                   	push   ebx
c000fd0b:	e8 b0 ae ff ff       	call   c000abc0 <File::close()>
c000fd10:	83 c4 10             	add    esp,0x10
c000fd13:	56                   	push   esi
c000fd14:	31 f6                	xor    esi,esi
c000fd16:	68 00 01 00 00       	push   0x100
c000fd1b:	6a 00                	push   0x0
c000fd1d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fd21:	50                   	push   eax
c000fd22:	e8 a9 07 ff ff       	call   c00004d0 <memset>
c000fd27:	5f                   	pop    edi
c000fd28:	58                   	pop    eax
c000fd29:	6a 01                	push   0x1
c000fd2b:	53                   	push   ebx
c000fd2c:	e8 31 ae ff ff       	call   c000ab62 <File::open(FileOpenMode)>
c000fd31:	83 c4 10             	add    esp,0x10
c000fd34:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fd3c:	83 ec 0c             	sub    esp,0xc
c000fd3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fd41:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fd45:	51                   	push   ecx
c000fd46:	8d 54 24 23          	lea    edx,[esp+0x23]
c000fd4a:	52                   	push   edx
c000fd4b:	6a 00                	push   0x0
c000fd4d:	6a 01                	push   0x1
c000fd4f:	53                   	push   ebx
c000fd50:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fd53:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000fd57:	83 c4 20             	add    esp,0x20
c000fd5a:	3c 0d                	cmp    al,0xd
c000fd5c:	0f 84 09 01 00 00    	je     c000fe6b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fd62:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fd67:	0f 84 ef 00 00 00    	je     c000fe5c <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fd6d:	3c 0a                	cmp    al,0xa
c000fd6f:	74 13                	je     c000fd84 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fd71:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fd76:	74 0c                	je     c000fd84 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fd78:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000fd7e:	0f 8e d8 00 00 00    	jle    c000fe5c <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fd84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd88:	83 ec 0c             	sub    esp,0xc
c000fd8b:	8d 78 01             	lea    edi,[eax+0x1]
c000fd8e:	57                   	push   edi
c000fd8f:	e8 25 7a ff ff       	call   c00077b9 <malloc>
c000fd94:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000fd98:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fd9c:	8d 56 04             	lea    edx,[esi+0x4]
c000fd9f:	89 14 24             	mov    DWORD PTR [esp],edx
c000fda2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fda6:	e8 0e 7a ff ff       	call   c00077b9 <malloc>
c000fdab:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000fdaf:	83 c4 0c             	add    esp,0xc
c000fdb2:	57                   	push   edi
c000fdb3:	6a 00                	push   0x0
c000fdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fdb9:	e8 12 07 ff ff       	call   c00004d0 <memset>
c000fdbe:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fdc2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000fdc6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000fdca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdcc:	83 c4 0c             	add    esp,0xc
c000fdcf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fdd3:	52                   	push   edx
c000fdd4:	6a 00                	push   0x0
c000fdd6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fdda:	e8 f1 06 ff ff       	call   c00004d0 <memset>
c000fddf:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fde3:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000fde7:	89 34 24             	mov    DWORD PTR [esp],esi
c000fdea:	e8 51 07 ff ff       	call   c0000540 <strlen>
c000fdef:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000fdf3:	89 c1                	mov    ecx,eax
c000fdf5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdf7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fdfa:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000fdfd:	40                   	inc    eax
c000fdfe:	83 c4 10             	add    esp,0x10
c000fe01:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fe04:	85 d2                	test   edx,edx
c000fe06:	75 0c                	jne    c000fe14 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000fe08:	83 ec 0c             	sub    esp,0xc
c000fe0b:	6a 08                	push   0x8
c000fe0d:	e8 a7 79 ff ff       	call   c00077b9 <malloc>
c000fe12:	eb 0c                	jmp    c000fe20 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000fe14:	c1 e0 03             	shl    eax,0x3
c000fe17:	51                   	push   ecx
c000fe18:	51                   	push   ecx
c000fe19:	50                   	push   eax
c000fe1a:	52                   	push   edx
c000fe1b:	e8 85 79 ff ff       	call   c00077a5 <realloc>
c000fe20:	83 c4 10             	add    esp,0x10
c000fe23:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fe26:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fe29:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000fe2c:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fe30:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fe34:	b9 08 00 00 00       	mov    ecx,0x8
c000fe39:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe3b:	31 f6                	xor    esi,esi
c000fe3d:	50                   	push   eax
c000fe3e:	68 00 01 00 00       	push   0x100
c000fe43:	6a 00                	push   0x0
c000fe45:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fe49:	50                   	push   eax
c000fe4a:	e8 81 06 ff ff       	call   c00004d0 <memset>
c000fe4f:	83 c4 10             	add    esp,0x10
c000fe52:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fe5a:	eb 0f                	jmp    c000fe6b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fe5c:	3c 3d                	cmp    al,0x3d
c000fe5e:	74 07                	je     c000fe67 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000fe60:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000fe64:	46                   	inc    esi
c000fe65:	eb 04                	jmp    c000fe6b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fe67:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000fe6b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fe70:	0f 85 c6 fe ff ff    	jne    c000fd3c <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000fe76:	81 c4 2c 01 00 00    	add    esp,0x12c
c000fe7c:	5b                   	pop    ebx
c000fe7d:	5e                   	pop    esi
c000fe7e:	5f                   	pop    edi
c000fe7f:	5d                   	pop    ebp
c000fe80:	c3                   	ret    
c000fe81:	90                   	nop

c000fe82 <EnvVarContainer::__loadSystem()>:
c000fe82:	83 ec 10             	sub    esp,0x10
c000fe85:	68 a0 f9 01 c0       	push   0xc001f9a0
c000fe8a:	68 94 e6 01 c0       	push   0xc001e694
c000fe8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe93:	e8 04 fe ff ff       	call   c000fc9c <EnvVarContainer::loadFrom(char const*, char const*)>
c000fe98:	83 c4 1c             	add    esp,0x1c
c000fe9b:	c3                   	ret    

c000fe9c <EnvVarContainer::__loadUser()>:
c000fe9c:	c3                   	ret    
c000fe9d:	90                   	nop

c000fe9e <EnvVarContainer::EnvVarContainer(Process*)>:
c000fe9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fea2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000fea8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000feac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000feb0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000feb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000feb7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000febe:	90                   	nop
c000febf:	c3                   	ret    

c000fec0 <EnvVarContainer::~EnvVarContainer()>:
c000fec0:	83 ec 0c             	sub    esp,0xc
c000fec3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fec7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000feca:	85 c0                	test   eax,eax
c000fecc:	74 1d                	je     c000feeb <EnvVarContainer::~EnvVarContainer()+0x2b>
c000fece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fed2:	8b 00                	mov    eax,DWORD PTR [eax]
c000fed4:	85 c0                	test   eax,eax
c000fed6:	74 13                	je     c000feeb <EnvVarContainer::~EnvVarContainer()+0x2b>
c000fed8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fedc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fedf:	83 ec 0c             	sub    esp,0xc
c000fee2:	50                   	push   eax
c000fee3:	e8 e1 78 ff ff       	call   c00077c9 <free>
c000fee8:	83 c4 10             	add    esp,0x10
c000feeb:	90                   	nop
c000feec:	83 c4 0c             	add    esp,0xc
c000feef:	c3                   	ret    

c000fef0 <Krnl::getEnv(Process*, char const*)>:
c000fef0:	53                   	push   ebx
c000fef1:	83 ec 08             	sub    esp,0x8
c000fef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fef8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fefc:	39 05 90 51 02 c0    	cmp    DWORD PTR ds:0xc0025190,eax
c000ff02:	74 04                	je     c000ff08 <Krnl::getEnv(Process*, char const*)+0x18>
c000ff04:	85 c0                	test   eax,eax
c000ff06:	75 0b                	jne    c000ff13 <Krnl::getEnv(Process*, char const*)+0x23>
c000ff08:	a1 30 49 02 c0       	mov    eax,ds:0xc0024930
c000ff0d:	85 c0                	test   eax,eax
c000ff0f:	75 19                	jne    c000ff2a <Krnl::getEnv(Process*, char const*)+0x3a>
c000ff11:	eb 27                	jmp    c000ff3a <Krnl::getEnv(Process*, char const*)+0x4a>
c000ff13:	52                   	push   edx
c000ff14:	52                   	push   edx
c000ff15:	53                   	push   ebx
c000ff16:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000ff1c:	e8 79 fc ff ff       	call   c000fb9a <EnvVarContainer::getEnv(char const*)>
c000ff21:	83 c4 10             	add    esp,0x10
c000ff24:	85 c0                	test   eax,eax
c000ff26:	75 28                	jne    c000ff50 <Krnl::getEnv(Process*, char const*)+0x60>
c000ff28:	eb de                	jmp    c000ff08 <Krnl::getEnv(Process*, char const*)+0x18>
c000ff2a:	52                   	push   edx
c000ff2b:	52                   	push   edx
c000ff2c:	53                   	push   ebx
c000ff2d:	50                   	push   eax
c000ff2e:	e8 67 fc ff ff       	call   c000fb9a <EnvVarContainer::getEnv(char const*)>
c000ff33:	83 c4 10             	add    esp,0x10
c000ff36:	85 c0                	test   eax,eax
c000ff38:	75 16                	jne    c000ff50 <Krnl::getEnv(Process*, char const*)+0x60>
c000ff3a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ff3e:	a1 34 49 02 c0       	mov    eax,ds:0xc0024934
c000ff43:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ff47:	83 c4 08             	add    esp,0x8
c000ff4a:	5b                   	pop    ebx
c000ff4b:	e9 4a fc ff ff       	jmp    c000fb9a <EnvVarContainer::getEnv(char const*)>
c000ff50:	83 c4 08             	add    esp,0x8
c000ff53:	5b                   	pop    ebx
c000ff54:	c3                   	ret    

c000ff55 <Krnl::setEnvSystem(char const*, char const*)>:
c000ff55:	83 ec 10             	sub    esp,0x10
c000ff58:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff5c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff60:	ff 35 34 49 02 c0    	push   DWORD PTR ds:0xc0024934
c000ff66:	e8 6d fc ff ff       	call   c000fbd8 <EnvVarContainer::setEnv(char const*, char const*)>
c000ff6b:	83 c4 1c             	add    esp,0x1c
c000ff6e:	c3                   	ret    

c000ff6f <Krnl::setEnvUser(char const*, char const*)>:
c000ff6f:	a1 30 49 02 c0       	mov    eax,ds:0xc0024930
c000ff74:	85 c0                	test   eax,eax
c000ff76:	74 15                	je     c000ff8d <Krnl::setEnvUser(char const*, char const*)+0x1e>
c000ff78:	83 ec 10             	sub    esp,0x10
c000ff7b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff7f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff83:	50                   	push   eax
c000ff84:	e8 4f fc ff ff       	call   c000fbd8 <EnvVarContainer::setEnv(char const*, char const*)>
c000ff89:	83 c4 1c             	add    esp,0x1c
c000ff8c:	c3                   	ret    
c000ff8d:	c3                   	ret    

c000ff8e <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c000ff8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff92:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000ff98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ff9c:	e9 37 fc ff ff       	jmp    c000fbd8 <EnvVarContainer::setEnv(char const*, char const*)>

c000ffa1 <Krnl::deleteEnvSystem(char const*)>:
c000ffa1:	c3                   	ret    

c000ffa2 <Krnl::deleteEnvUser(char const*)>:
c000ffa2:	c3                   	ret    

c000ffa3 <Krnl::deleteEnvProcess(Process*, char const*)>:
c000ffa3:	c3                   	ret    

c000ffa4 <Krnl::newProcessEnv(Process*)>:
c000ffa4:	83 ec 28             	sub    esp,0x28
c000ffa7:	6a 0c                	push   0xc
c000ffa9:	e8 0b 78 ff ff       	call   c00077b9 <malloc>
c000ffae:	5a                   	pop    edx
c000ffaf:	59                   	pop    ecx
c000ffb0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ffb4:	50                   	push   eax
c000ffb5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ffb9:	e8 e0 fe ff ff       	call   c000fe9e <EnvVarContainer::EnvVarContainer(Process*)>
c000ffbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ffc2:	83 c4 2c             	add    esp,0x2c
c000ffc5:	c3                   	ret    

c000ffc6 <Krnl::copyProcessEnv(Process*, Process*)>:
c000ffc6:	57                   	push   edi
c000ffc7:	56                   	push   esi
c000ffc8:	53                   	push   ebx
c000ffc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffcd:	83 ec 0c             	sub    esp,0xc
c000ffd0:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000ffd6:	6a 0c                	push   0xc
c000ffd8:	e8 dc 77 ff ff       	call   c00077b9 <malloc>
c000ffdd:	89 c3                	mov    ebx,eax
c000ffdf:	58                   	pop    eax
c000ffe0:	5a                   	pop    edx
c000ffe1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffe5:	53                   	push   ebx
c000ffe6:	e8 b3 fe ff ff       	call   c000fe9e <EnvVarContainer::EnvVarContainer(Process*)>
c000ffeb:	8b 07                	mov    eax,DWORD PTR [edi]
c000ffed:	89 03                	mov    DWORD PTR [ebx],eax
c000ffef:	c1 e0 03             	shl    eax,0x3
c000fff2:	89 04 24             	mov    DWORD PTR [esp],eax
c000fff5:	e8 bf 77 ff ff       	call   c00077b9 <malloc>
c000fffa:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000fffd:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000ffff:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0010002:	c1 e1 03             	shl    ecx,0x3
c0010005:	89 c7                	mov    edi,eax
c0010007:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010009:	83 c4 10             	add    esp,0x10
c001000c:	89 d8                	mov    eax,ebx
c001000e:	5b                   	pop    ebx
c001000f:	5e                   	pop    esi
c0010010:	5f                   	pop    edi
c0010011:	c3                   	ret    

c0010012 <Krnl::loadSystemEnv()>:
c0010012:	53                   	push   ebx
c0010013:	83 ec 14             	sub    esp,0x14
c0010016:	6a 0c                	push   0xc
c0010018:	e8 9c 77 ff ff       	call   c00077b9 <malloc>
c001001d:	89 c3                	mov    ebx,eax
c001001f:	58                   	pop    eax
c0010020:	5a                   	pop    edx
c0010021:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0010027:	53                   	push   ebx
c0010028:	e8 71 fe ff ff       	call   c000fe9e <EnvVarContainer::EnvVarContainer(Process*)>
c001002d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010030:	89 1d 34 49 02 c0    	mov    DWORD PTR ds:0xc0024934,ebx
c0010036:	e8 47 fe ff ff       	call   c000fe82 <EnvVarContainer::__loadSystem()>
c001003b:	83 c4 18             	add    esp,0x18
c001003e:	5b                   	pop    ebx
c001003f:	c3                   	ret    

c0010040 <Krnl::loadUserEnv()>:
c0010040:	53                   	push   ebx
c0010041:	83 ec 14             	sub    esp,0x14
c0010044:	6a 0c                	push   0xc
c0010046:	e8 6e 77 ff ff       	call   c00077b9 <malloc>
c001004b:	89 c3                	mov    ebx,eax
c001004d:	58                   	pop    eax
c001004e:	5a                   	pop    edx
c001004f:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0010055:	53                   	push   ebx
c0010056:	e8 43 fe ff ff       	call   c000fe9e <EnvVarContainer::EnvVarContainer(Process*)>
c001005b:	89 1d 30 49 02 c0    	mov    DWORD PTR ds:0xc0024930,ebx
c0010061:	83 c4 18             	add    esp,0x18
c0010064:	5b                   	pop    ebx
c0010065:	c3                   	ret    

c0010066 <Krnl::flushEnv()>:
c0010066:	c3                   	ret    

c0010067 <Krnl::getProcessTotalEnvCount(Process*)>:
c0010067:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001006b:	8b 15 30 49 02 c0    	mov    edx,DWORD PTR ds:0xc0024930
c0010071:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010077:	a1 34 49 02 c0       	mov    eax,ds:0xc0024934
c001007c:	8b 00                	mov    eax,DWORD PTR [eax]
c001007e:	03 01                	add    eax,DWORD PTR [ecx]
c0010080:	85 d2                	test   edx,edx
c0010082:	74 02                	je     c0010086 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0010084:	03 02                	add    eax,DWORD PTR [edx]
c0010086:	c3                   	ret    

c0010087 <Krnl::getProcessEnvPair(Process*, int)>:
c0010087:	57                   	push   edi
c0010088:	56                   	push   esi
c0010089:	8b 35 30 49 02 c0    	mov    esi,DWORD PTR ds:0xc0024930
c001008f:	53                   	push   ebx
c0010090:	85 f6                	test   esi,esi
c0010092:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010096:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001009a:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00100a0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00100a4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00100a6:	75 16                	jne    c00100be <Krnl::getProcessEnvPair(Process*, int)+0x37>
c00100a8:	39 c2                	cmp    edx,eax
c00100aa:	7c 16                	jl     c00100c2 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00100ac:	8b 0d 34 49 02 c0    	mov    ecx,DWORD PTR ds:0xc0024934
c00100b2:	8b 31                	mov    esi,DWORD PTR [ecx]
c00100b4:	01 c6                	add    esi,eax
c00100b6:	39 d6                	cmp    esi,edx
c00100b8:	7e 3c                	jle    c00100f6 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00100ba:	29 c2                	sub    edx,eax
c00100bc:	eb 04                	jmp    c00100c2 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00100be:	39 c2                	cmp    edx,eax
c00100c0:	7d 05                	jge    c00100c7 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c00100c2:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00100c5:	eb 20                	jmp    c00100e7 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00100c7:	8b 3e                	mov    edi,DWORD PTR [esi]
c00100c9:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00100cc:	39 d1                	cmp    ecx,edx
c00100ce:	7e 04                	jle    c00100d4 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00100d0:	29 c2                	sub    edx,eax
c00100d2:	eb 10                	jmp    c00100e4 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00100d4:	8b 35 34 49 02 c0    	mov    esi,DWORD PTR ds:0xc0024934
c00100da:	03 0e                	add    ecx,DWORD PTR [esi]
c00100dc:	39 d1                	cmp    ecx,edx
c00100de:	7e 16                	jle    c00100f6 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00100e0:	29 c2                	sub    edx,eax
c00100e2:	29 fa                	sub    edx,edi
c00100e4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00100e7:	8d 14 d0             	lea    edx,[eax+edx*8]
c00100ea:	8b 02                	mov    eax,DWORD PTR [edx]
c00100ec:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00100ef:	89 03                	mov    DWORD PTR [ebx],eax
c00100f1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00100f4:	eb 1d                	jmp    c0010113 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00100f6:	83 ec 0c             	sub    esp,0xc
c00100f9:	68 b6 e6 01 c0       	push   0xc001e6b6
c00100fe:	e8 ac 00 00 00       	call   c00101af <KePanic(char const*)>
c0010103:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010109:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010110:	83 c4 10             	add    esp,0x10
c0010113:	89 d8                	mov    eax,ebx
c0010115:	5b                   	pop    ebx
c0010116:	5e                   	pop    esi
c0010117:	5f                   	pop    edi
c0010118:	c2 04 00             	ret    0x4

c001011b <CPU::current()>:
c001011b:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0010120:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010126:	c3                   	ret    

c0010127 <operator new(unsigned long)>:
c0010127:	e9 8d 76 ff ff       	jmp    c00077b9 <malloc>

c001012c <operator delete(void*)>:
c001012c:	e9 a8 76 ff ff       	jmp    c00077d9 <rfree>

c0010131 <disableIRQs()>:
c0010131:	fa                   	cli    
c0010132:	c3                   	ret    

c0010133 <enableIRQs()>:
c0010133:	fb                   	sti    
c0010134:	c3                   	ret    

c0010135 <lockScheduler()>:
c0010135:	fa                   	cli    
c0010136:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001013c:	c3                   	ret    

c001013d <unlockScheduler()>:
c001013d:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0010142:	48                   	dec    eax
c0010143:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0010148:	75 01                	jne    c001014b <unlockScheduler()+0xe>
c001014a:	fb                   	sti    
c001014b:	c3                   	ret    

c001014c <lockStuff()>:
c001014c:	fa                   	cli    
c001014d:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0010153:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c0010159:	c3                   	ret    

c001015a <unlockStuff()>:
c001015a:	83 ec 0c             	sub    esp,0xc
c001015d:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0010162:	48                   	dec    eax
c0010163:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0010168:	75 18                	jne    c0010182 <unlockStuff()+0x28>
c001016a:	83 3d 60 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025160,0x0
c0010171:	74 0f                	je     c0010182 <unlockStuff()+0x28>
c0010173:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c001017d:	e8 22 36 00 00       	call   c00137a4 <schedule()>
c0010182:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0010187:	48                   	dec    eax
c0010188:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001018d:	75 01                	jne    c0010190 <unlockStuff()+0x36>
c001018f:	fb                   	sti    
c0010190:	83 c4 0c             	add    esp,0xc
c0010193:	c3                   	ret    

c0010194 <Virt::getAKernelVAS()>:
c0010194:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c0010199:	c3                   	ret    

c001019a <__not_memcpy>:
c001019a:	57                   	push   edi
c001019b:	56                   	push   esi
c001019c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00101a0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00101a4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00101a8:	89 c7                	mov    edi,eax
c00101aa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101ac:	5e                   	pop    esi
c00101ad:	5f                   	pop    edi
c00101ae:	c3                   	ret    

c00101af <KePanic(char const*)>:
c00101af:	c6 05 38 49 02 c0 01 	mov    BYTE PTR ds:0xc0024938,0x1
c00101b6:	e9 e1 53 00 00       	jmp    c001559c <HalPanic(char const*)>

c00101bb <Krnl::powerThread(void*)>:
c00101bb:	83 ec 0c             	sub    esp,0xc
c00101be:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00101c3:	48                   	dec    eax
c00101c4:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00101c9:	75 01                	jne    c00101cc <Krnl::powerThread(void*)+0x11>
c00101cb:	fb                   	sti    
c00101cc:	83 ec 0c             	sub    esp,0xc
c00101cf:	c6 05 40 49 02 c0 00 	mov    BYTE PTR ds:0xc0024940,0x0
c00101d6:	6a 0a                	push   0xa
c00101d8:	e8 d7 38 00 00       	call   c0013ab4 <sleep(unsigned int)>
c00101dd:	83 05 84 49 02 c0 0a 	add    DWORD PTR ds:0xc0024984,0xa
c00101e4:	83 c4 10             	add    esp,0x10
c00101e7:	eb e3                	jmp    c00101cc <Krnl::powerThread(void*)+0x11>

c00101e9 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c00101e9:	57                   	push   edi
c00101ea:	b9 09 00 00 00       	mov    ecx,0x9
c00101ef:	56                   	push   esi
c00101f0:	bf 60 49 02 c0       	mov    edi,0xc0024960
c00101f5:	fc                   	cld    
c00101f6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00101fa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00101fc:	5e                   	pop    esi
c00101fd:	5f                   	pop    edi
c00101fe:	c3                   	ret    

c00101ff <Krnl::userIOReceived()>:
c00101ff:	c7 05 84 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024984,0x0
c0010209:	c3                   	ret    

c001020a <Krnl::handlePowerButton()>:
c001020a:	83 ec 0c             	sub    esp,0xc
c001020d:	a1 60 49 02 c0       	mov    eax,ds:0xc0024960
c0010212:	83 f8 02             	cmp    eax,0x2
c0010215:	75 10                	jne    c0010227 <Krnl::handlePowerButton()+0x1d>
c0010217:	83 ec 0c             	sub    esp,0xc
c001021a:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0010220:	e8 31 6c ff ff       	call   c0006e56 <Computer::shutdown()>
c0010225:	eb 11                	jmp    c0010238 <Krnl::handlePowerButton()+0x2e>
c0010227:	48                   	dec    eax
c0010228:	75 11                	jne    c001023b <Krnl::handlePowerButton()+0x31>
c001022a:	83 ec 0c             	sub    esp,0xc
c001022d:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0010233:	e8 4e 6c ff ff       	call   c0006e86 <Computer::sleep()>
c0010238:	83 c4 10             	add    esp,0x10
c001023b:	83 c4 0c             	add    esp,0xc
c001023e:	c3                   	ret    

c001023f <Krnl::handleSleepButton()>:
c001023f:	83 ec 0c             	sub    esp,0xc
c0010242:	a1 64 49 02 c0       	mov    eax,ds:0xc0024964
c0010247:	83 f8 02             	cmp    eax,0x2
c001024a:	75 10                	jne    c001025c <Krnl::handleSleepButton()+0x1d>
c001024c:	83 ec 0c             	sub    esp,0xc
c001024f:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0010255:	e8 fc 6b ff ff       	call   c0006e56 <Computer::shutdown()>
c001025a:	eb 11                	jmp    c001026d <Krnl::handleSleepButton()+0x2e>
c001025c:	48                   	dec    eax
c001025d:	75 11                	jne    c0010270 <Krnl::handleSleepButton()+0x31>
c001025f:	83 ec 0c             	sub    esp,0xc
c0010262:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0010268:	e8 19 6c ff ff       	call   c0006e86 <Computer::sleep()>
c001026d:	83 c4 10             	add    esp,0x10
c0010270:	83 c4 0c             	add    esp,0xc
c0010273:	c3                   	ret    

c0010274 <Krnl::setupPowerManager()>:
c0010274:	83 ec 0c             	sub    esp,0xc
c0010277:	c7 05 84 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024984,0x0
c0010281:	68 f0 00 00 00       	push   0xf0
c0010286:	c6 05 40 49 02 c0 00 	mov    BYTE PTR ds:0xc0024940,0x0
c001028d:	6a 00                	push   0x0
c001028f:	68 bb 01 01 c0       	push   0xc00101bb
c0010294:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c001029a:	e8 e5 32 00 00       	call   c0013584 <Process::createThread(void (*)(void*), void*, int)>
c001029f:	c7 05 60 49 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0024960,0x2
c00102a9:	c7 05 64 49 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0024964,0x1
c00102b3:	c7 05 68 49 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0024968,0x3
c00102bd:	c7 05 6c 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002496c,0x0
c00102c7:	c7 05 78 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024978,0x0
c00102d1:	c7 05 70 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024970,0x0
c00102db:	c7 05 7c 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002497c,0x0
c00102e5:	c7 05 74 49 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0024974,0x3c
c00102ef:	c7 05 80 49 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0024980,0x3c
c00102f9:	83 c4 1c             	add    esp,0x1c
c00102fc:	c3                   	ret    
c00102fd:	66 90                	xchg   ax,ax
c00102ff:	90                   	nop

c0010300 <KeResolveCompatibilitySymbol(char*)>:
c0010300:	83 ec 0c             	sub    esp,0xc
c0010303:	83 ec 08             	sub    esp,0x8
c0010306:	68 d0 e6 01 c0       	push   0xc001e6d0
c001030b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001030f:	e8 cc 03 ff ff       	call   c00006e0 <strcmp>
c0010314:	83 c4 10             	add    esp,0x10
c0010317:	85 c0                	test   eax,eax
c0010319:	0f 94 c0             	sete   al
c001031c:	84 c0                	test   al,al
c001031e:	74 0c                	je     c001032c <KeResolveCompatibilitySymbol(char*)+0x2c>
c0010320:	b8 b8 1e 02 c0       	mov    eax,0xc0021eb8
c0010325:	e9 62 01 00 00       	jmp    c001048c <KeResolveCompatibilitySymbol(char*)+0x18c>
c001032a:	66 90                	xchg   ax,ax
c001032c:	83 ec 08             	sub    esp,0x8
c001032f:	68 d9 e6 01 c0       	push   0xc001e6d9
c0010334:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010338:	e8 a3 03 ff ff       	call   c00006e0 <strcmp>
c001033d:	83 c4 10             	add    esp,0x10
c0010340:	85 c0                	test   eax,eax
c0010342:	0f 94 c0             	sete   al
c0010345:	84 c0                	test   al,al
c0010347:	74 0b                	je     c0010354 <KeResolveCompatibilitySymbol(char*)+0x54>
c0010349:	b8 00 c1 01 c0       	mov    eax,0xc001c100
c001034e:	e9 39 01 00 00       	jmp    c001048c <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010353:	90                   	nop
c0010354:	83 ec 08             	sub    esp,0x8
c0010357:	68 e3 e6 01 c0       	push   0xc001e6e3
c001035c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010360:	e8 7b 03 ff ff       	call   c00006e0 <strcmp>
c0010365:	83 c4 10             	add    esp,0x10
c0010368:	85 c0                	test   eax,eax
c001036a:	0f 94 c0             	sete   al
c001036d:	84 c0                	test   al,al
c001036f:	74 0b                	je     c001037c <KeResolveCompatibilitySymbol(char*)+0x7c>
c0010371:	b8 34 be 01 c0       	mov    eax,0xc001be34
c0010376:	e9 11 01 00 00       	jmp    c001048c <KeResolveCompatibilitySymbol(char*)+0x18c>
c001037b:	90                   	nop
c001037c:	83 ec 08             	sub    esp,0x8
c001037f:	68 ec e6 01 c0       	push   0xc001e6ec
c0010384:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010388:	e8 53 03 ff ff       	call   c00006e0 <strcmp>
c001038d:	83 c4 10             	add    esp,0x10
c0010390:	85 c0                	test   eax,eax
c0010392:	0f 94 c0             	sete   al
c0010395:	84 c0                	test   al,al
c0010397:	74 0b                	je     c00103a4 <KeResolveCompatibilitySymbol(char*)+0xa4>
c0010399:	b8 af 01 01 c0       	mov    eax,0xc00101af
c001039e:	e9 e9 00 00 00       	jmp    c001048c <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103a3:	90                   	nop
c00103a4:	83 ec 08             	sub    esp,0x8
c00103a7:	68 ff e6 01 c0       	push   0xc001e6ff
c00103ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103b0:	e8 2b 03 ff ff       	call   c00006e0 <strcmp>
c00103b5:	83 c4 10             	add    esp,0x10
c00103b8:	85 c0                	test   eax,eax
c00103ba:	0f 94 c0             	sete   al
c00103bd:	84 c0                	test   al,al
c00103bf:	74 0b                	je     c00103cc <KeResolveCompatibilitySymbol(char*)+0xcc>
c00103c1:	b8 37 fb 00 c0       	mov    eax,0xc000fb37
c00103c6:	e9 c1 00 00 00       	jmp    c001048c <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103cb:	90                   	nop
c00103cc:	83 ec 08             	sub    esp,0x8
c00103cf:	68 1c e7 01 c0       	push   0xc001e71c
c00103d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103d8:	e8 03 03 ff ff       	call   c00006e0 <strcmp>
c00103dd:	83 c4 10             	add    esp,0x10
c00103e0:	85 c0                	test   eax,eax
c00103e2:	0f 94 c0             	sete   al
c00103e5:	84 c0                	test   al,al
c00103e7:	74 0b                	je     c00103f4 <KeResolveCompatibilitySymbol(char*)+0xf4>
c00103e9:	b8 00 c2 01 c0       	mov    eax,0xc001c200
c00103ee:	e9 99 00 00 00       	jmp    c001048c <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103f3:	90                   	nop
c00103f4:	83 ec 08             	sub    esp,0x8
c00103f7:	68 26 e7 01 c0       	push   0xc001e726
c00103fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010400:	e8 db 02 ff ff       	call   c00006e0 <strcmp>
c0010405:	83 c4 10             	add    esp,0x10
c0010408:	85 c0                	test   eax,eax
c001040a:	0f 94 c0             	sete   al
c001040d:	84 c0                	test   al,al
c001040f:	74 07                	je     c0010418 <KeResolveCompatibilitySymbol(char*)+0x118>
c0010411:	b8 80 bf 01 c0       	mov    eax,0xc001bf80
c0010416:	eb 74                	jmp    c001048c <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010418:	83 ec 08             	sub    esp,0x8
c001041b:	68 2f e7 01 c0       	push   0xc001e72f
c0010420:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010424:	e8 b7 02 ff ff       	call   c00006e0 <strcmp>
c0010429:	83 c4 10             	add    esp,0x10
c001042c:	85 c0                	test   eax,eax
c001042e:	0f 94 c0             	sete   al
c0010431:	84 c0                	test   al,al
c0010433:	74 07                	je     c001043c <KeResolveCompatibilitySymbol(char*)+0x13c>
c0010435:	b8 bc 1e 02 c0       	mov    eax,0xc0021ebc
c001043a:	eb 50                	jmp    c001048c <KeResolveCompatibilitySymbol(char*)+0x18c>
c001043c:	83 ec 08             	sub    esp,0x8
c001043f:	68 47 e7 01 c0       	push   0xc001e747
c0010444:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010448:	e8 93 02 ff ff       	call   c00006e0 <strcmp>
c001044d:	83 c4 10             	add    esp,0x10
c0010450:	85 c0                	test   eax,eax
c0010452:	0f 94 c0             	sete   al
c0010455:	84 c0                	test   al,al
c0010457:	74 07                	je     c0010460 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010459:	b8 bc 1e 02 c0       	mov    eax,0xc0021ebc
c001045e:	eb 2c                	jmp    c001048c <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010460:	83 ec 08             	sub    esp,0x8
c0010463:	68 54 e7 01 c0       	push   0xc001e754
c0010468:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001046c:	e8 6f 02 ff ff       	call   c00006e0 <strcmp>
c0010471:	83 c4 10             	add    esp,0x10
c0010474:	85 c0                	test   eax,eax
c0010476:	0f 94 c0             	sete   al
c0010479:	84 c0                	test   al,al
c001047b:	74 07                	je     c0010484 <KeResolveCompatibilitySymbol(char*)+0x184>
c001047d:	b8 bd 1e 02 c0       	mov    eax,0xc0021ebd
c0010482:	eb 08                	jmp    c001048c <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010484:	b8 00 00 00 00       	mov    eax,0x0
c0010489:	8d 76 00             	lea    esi,[esi+0x0]
c001048c:	83 c4 0c             	add    esp,0xc
c001048f:	c3                   	ret    

c0010490 <KiSigKill(int)>:
c0010490:	57                   	push   edi
c0010491:	b9 0a 00 00 00       	mov    ecx,0xa
c0010496:	56                   	push   esi
c0010497:	be 9d e7 01 c0       	mov    esi,0xc001e79d
c001049c:	83 ec 14             	sub    esp,0x14
c001049f:	8d 7c 24 06          	lea    edi,[esp+0x6]
c00104a3:	fc                   	cld    
c00104a4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00104a6:	8d 44 24 06          	lea    eax,[esp+0x6]
c00104aa:	50                   	push   eax
c00104ab:	6a 00                	push   0x0
c00104ad:	6a 00                	push   0x0
c00104af:	6a 27                	push   0x27
c00104b1:	e8 9c fb 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00104b6:	83 c4 24             	add    esp,0x24
c00104b9:	5e                   	pop    esi
c00104ba:	5f                   	pop    edi
c00104bb:	c3                   	ret    

c00104bc <KiDefaultSignalHandlerIgnore(int)>:
c00104bc:	c3                   	ret    

c00104bd <KiDefaultSignalHandlerPause(int)>:
c00104bd:	57                   	push   edi
c00104be:	b9 07 00 00 00       	mov    ecx,0x7
c00104c3:	56                   	push   esi
c00104c4:	be a7 e7 01 c0       	mov    esi,0xc001e7a7
c00104c9:	83 ec 24             	sub    esp,0x24
c00104cc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00104d0:	fc                   	cld    
c00104d1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00104d3:	8d 44 24 04          	lea    eax,[esp+0x4]
c00104d7:	50                   	push   eax
c00104d8:	6a 00                	push   0x0
c00104da:	6a 00                	push   0x0
c00104dc:	6a 27                	push   0x27
c00104de:	e8 6f fb 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00104e3:	83 c4 34             	add    esp,0x34
c00104e6:	5e                   	pop    esi
c00104e7:	5f                   	pop    edi
c00104e8:	c3                   	ret    

c00104e9 <KiDefaultSignalHandlerResume(int)>:
c00104e9:	57                   	push   edi
c00104ea:	b9 1d 00 00 00       	mov    ecx,0x1d
c00104ef:	56                   	push   esi
c00104f0:	be c3 e7 01 c0       	mov    esi,0xc001e7c3
c00104f5:	83 ec 24             	sub    esp,0x24
c00104f8:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00104fc:	fc                   	cld    
c00104fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00104ff:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010503:	50                   	push   eax
c0010504:	6a 00                	push   0x0
c0010506:	6a 00                	push   0x0
c0010508:	6a 27                	push   0x27
c001050a:	e8 43 fb 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001050f:	83 c4 34             	add    esp,0x34
c0010512:	5e                   	pop    esi
c0010513:	5f                   	pop    edi
c0010514:	c3                   	ret    

c0010515 <KeDeinitSignals(SigHandlerBlock*)>:
c0010515:	e9 af 72 ff ff       	jmp    c00077c9 <free>

c001051a <KeInitSignals()>:
c001051a:	53                   	push   ebx
c001051b:	83 ec 14             	sub    esp,0x14
c001051e:	68 c8 00 00 00       	push   0xc8
c0010523:	e8 91 72 ff ff       	call   c00077b9 <malloc>
c0010528:	83 c4 0c             	add    esp,0xc
c001052b:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010535:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c001053f:	89 c3                	mov    ebx,eax
c0010541:	6a 20                	push   0x20
c0010543:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010549:	6a 00                	push   0x0
c001054b:	50                   	push   eax
c001054c:	e8 7f ff fe ff       	call   c00004d0 <memset>
c0010551:	83 c4 0c             	add    esp,0xc
c0010554:	6a 44                	push   0x44
c0010556:	6a 00                	push   0x0
c0010558:	53                   	push   ebx
c0010559:	e8 72 ff fe ff       	call   c00004d0 <memset>
c001055e:	89 d8                	mov    eax,ebx
c0010560:	83 c4 18             	add    esp,0x18
c0010563:	5b                   	pop    ebx
c0010564:	c3                   	ret    

c0010565 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010565:	53                   	push   ebx
c0010566:	b8 01 00 00 00       	mov    eax,0x1
c001056b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001056f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010573:	83 f9 10             	cmp    ecx,0x10
c0010576:	7f 21                	jg     c0010599 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010578:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c001057b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001057f:	89 03                	mov    DWORD PTR [ebx],eax
c0010581:	b8 01 00 00 00       	mov    eax,0x1
c0010586:	d3 e0                	shl    eax,cl
c0010588:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001058c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001058f:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010597:	31 c0                	xor    eax,eax
c0010599:	5b                   	pop    ebx
c001059a:	c3                   	ret    

c001059b <KeRaiseSignal(SigHandlerBlock*, int)>:
c001059b:	55                   	push   ebp
c001059c:	57                   	push   edi
c001059d:	bf 08 00 00 00       	mov    edi,0x8
c00105a2:	56                   	push   esi
c00105a3:	53                   	push   ebx
c00105a4:	83 ec 18             	sub    esp,0x18
c00105a7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00105ab:	68 e0 e7 01 c0       	push   0xc001e7e0
c00105b0:	e8 78 9f ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c00105b5:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00105bc:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c00105c2:	83 c4 10             	add    esp,0x10
c00105c5:	31 c9                	xor    ecx,ecx
c00105c7:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00105cb:	99                   	cdq    
c00105cc:	f7 ff                	idiv   edi
c00105ce:	8d 42 24             	lea    eax,[edx+0x24]
c00105d1:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00105d5:	85 f6                	test   esi,esi
c00105d7:	75 1a                	jne    c00105f3 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c00105d9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00105dd:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c00105e1:	50                   	push   eax
c00105e2:	50                   	push   eax
c00105e3:	52                   	push   edx
c00105e4:	68 f1 e7 01 c0       	push   0xc001e7f1
c00105e9:	e8 3f 9f ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c00105ee:	83 c4 10             	add    esp,0x10
c00105f1:	eb 1b                	jmp    c001060e <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c00105f3:	41                   	inc    ecx
c00105f4:	83 f9 08             	cmp    ecx,0x8
c00105f7:	75 ce                	jne    c00105c7 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c00105f9:	83 ec 0c             	sub    esp,0xc
c00105fc:	be 01 00 00 00       	mov    esi,0x1
c0010601:	68 12 e8 01 c0       	push   0xc001e812
c0010606:	e8 22 9f ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c001060b:	83 c4 10             	add    esp,0x10
c001060e:	83 c4 0c             	add    esp,0xc
c0010611:	89 f0                	mov    eax,esi
c0010613:	5b                   	pop    ebx
c0010614:	5e                   	pop    esi
c0010615:	5f                   	pop    edi
c0010616:	5d                   	pop    ebp
c0010617:	c3                   	ret    

c0010618 <KeCheckSignal(SigHandlerBlock*)>:
c0010618:	55                   	push   ebp
c0010619:	57                   	push   edi
c001061a:	56                   	push   esi
c001061b:	53                   	push   ebx
c001061c:	51                   	push   ecx
c001061d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010621:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010628:	75 07                	jne    c0010631 <KeCheckSignal(SigHandlerBlock*)+0x19>
c001062a:	31 c0                	xor    eax,eax
c001062c:	e9 cc 00 00 00       	jmp    c00106fd <KeCheckSignal(SigHandlerBlock*)+0xe5>
c0010631:	31 c9                	xor    ecx,ecx
c0010633:	bf 08 00 00 00       	mov    edi,0x8
c0010638:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c001063e:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010641:	99                   	cdq    
c0010642:	f7 ff                	idiv   edi
c0010644:	8b 94 93 9c 00 00 00 	mov    edx,DWORD PTR [ebx+edx*4+0x9c]
c001064b:	85 d2                	test   edx,edx
c001064d:	0f 84 94 00 00 00    	je     c00106e7 <KeCheckSignal(SigHandlerBlock*)+0xcf>
c0010653:	88 d1                	mov    cl,dl
c0010655:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c001065b:	bf 01 00 00 00       	mov    edi,0x1
c0010660:	89 04 24             	mov    DWORD PTR [esp],eax
c0010663:	d3 e7                	shl    edi,cl
c0010665:	bd 01 00 00 00       	mov    ebp,0x1
c001066a:	31 c9                	xor    ecx,ecx
c001066c:	89 e8                	mov    eax,ebp
c001066e:	d3 e0                	shl    eax,cl
c0010670:	85 04 24             	test   DWORD PTR [esp],eax
c0010673:	74 06                	je     c001067b <KeCheckSignal(SigHandlerBlock*)+0x63>
c0010675:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010679:	75 af                	jne    c001062a <KeCheckSignal(SigHandlerBlock*)+0x12>
c001067b:	41                   	inc    ecx
c001067c:	83 f9 11             	cmp    ecx,0x11
c001067f:	75 eb                	jne    c001066c <KeCheckSignal(SigHandlerBlock*)+0x54>
c0010681:	8d 4e 01             	lea    ecx,[esi+0x1]
c0010684:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010687:	89 8b bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],ecx
c001068d:	09 f8                	or     eax,edi
c001068f:	c7 84 b3 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+esi*4+0x9c],0x0
c001069a:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c00106a0:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00106a7:	31 c0                	xor    eax,eax
c00106a9:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c00106b1:	74 09                	je     c00106bc <KeCheckSignal(SigHandlerBlock*)+0xa4>
c00106b3:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00106ba:	eb 06                	jmp    c00106c2 <KeCheckSignal(SigHandlerBlock*)+0xaa>
c00106bc:	40                   	inc    eax
c00106bd:	83 f8 08             	cmp    eax,0x8
c00106c0:	75 e7                	jne    c00106a9 <KeCheckSignal(SigHandlerBlock*)+0x91>
c00106c2:	8b 04 93             	mov    eax,DWORD PTR [ebx+edx*4]
c00106c5:	83 fa 09             	cmp    edx,0x9
c00106c8:	75 07                	jne    c00106d1 <KeCheckSignal(SigHandlerBlock*)+0xb9>
c00106ca:	b8 90 04 01 c0       	mov    eax,0xc0010490
c00106cf:	eb 2c                	jmp    c00106fd <KeCheckSignal(SigHandlerBlock*)+0xe5>
c00106d1:	83 f8 01             	cmp    eax,0x1
c00106d4:	0f 84 50 ff ff ff    	je     c001062a <KeCheckSignal(SigHandlerBlock*)+0x12>
c00106da:	85 c0                	test   eax,eax
c00106dc:	75 1f                	jne    c00106fd <KeCheckSignal(SigHandlerBlock*)+0xe5>
c00106de:	8b 04 95 00 fa 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0600]
c00106e5:	eb 16                	jmp    c00106fd <KeCheckSignal(SigHandlerBlock*)+0xe5>
c00106e7:	46                   	inc    esi
c00106e8:	41                   	inc    ecx
c00106e9:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00106ef:	83 f9 08             	cmp    ecx,0x8
c00106f2:	0f 85 40 ff ff ff    	jne    c0010638 <KeCheckSignal(SigHandlerBlock*)+0x20>
c00106f8:	e9 2d ff ff ff       	jmp    c001062a <KeCheckSignal(SigHandlerBlock*)+0x12>
c00106fd:	5a                   	pop    edx
c00106fe:	5b                   	pop    ebx
c00106ff:	5e                   	pop    esi
c0010700:	5f                   	pop    edi
c0010701:	5d                   	pop    ebp
c0010702:	c3                   	ret    

c0010703 <KiCheckSignalZ>:
c0010703:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010708:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001070b:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010711:	e8 02 ff ff ff       	call   c0010618 <KeCheckSignal(SigHandlerBlock*)>
c0010716:	5a                   	pop    edx
c0010717:	c3                   	ret    

c0010718 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010718:	56                   	push   esi
c0010719:	53                   	push   ebx
c001071a:	bb 01 00 00 00       	mov    ebx,0x1
c001071f:	52                   	push   edx
c0010720:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010724:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010728:	d3 e3                	shl    ebx,cl
c001072a:	83 f9 10             	cmp    ecx,0x10
c001072d:	7f 08                	jg     c0010737 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c001072f:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010735:	75 10                	jne    c0010747 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010737:	83 ec 0c             	sub    esp,0xc
c001073a:	68 23 e8 01 c0       	push   0xc001e823
c001073f:	e8 6b fa ff ff       	call   c00101af <KePanic(char const*)>
c0010744:	83 c4 10             	add    esp,0x10
c0010747:	f7 d3                	not    ebx
c0010749:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c001074f:	58                   	pop    eax
c0010750:	5b                   	pop    ebx
c0010751:	5e                   	pop    esi
c0010752:	c3                   	ret    

c0010753 <SysSeekDir(regs*)>:
c0010753:	31 c0                	xor    eax,eax
c0010755:	31 d2                	xor    edx,edx
c0010757:	c3                   	ret    

c0010758 <SysTellDir(regs*)>:
c0010758:	31 c0                	xor    eax,eax
c001075a:	31 d2                	xor    edx,edx
c001075c:	c3                   	ret    

c001075d <SysVerify(regs*)>:
c001075d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010761:	31 d2                	xor    edx,edx
c0010763:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010766:	c3                   	ret    

c0010767 <SysGetArgc(regs*)>:
c0010767:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001076c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001076f:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010775:	99                   	cdq    
c0010776:	c3                   	ret    

c0010777 <SysTTYName(regs*)>:
c0010777:	b8 01 00 00 00       	mov    eax,0x1
c001077c:	31 d2                	xor    edx,edx
c001077e:	c3                   	ret    

c001077f <SysFormatDisk(regs*)>:
c001077f:	56                   	push   esi
c0010780:	53                   	push   ebx
c0010781:	50                   	push   eax
c0010782:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010786:	8b 1d b4 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb4
c001078c:	eb 28                	jmp    c00107b6 <SysFormatDisk(regs*)+0x37>
c001078e:	83 ec 0c             	sub    esp,0xc
c0010791:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010794:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010797:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010799:	51                   	push   ecx
c001079a:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c001079d:	51                   	push   ecx
c001079e:	50                   	push   eax
c001079f:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c00107a6:	50                   	push   eax
c00107a7:	53                   	push   ebx
c00107a8:	ff 52 48             	call   DWORD PTR [edx+0x48]
c00107ab:	83 c4 20             	add    esp,0x20
c00107ae:	83 f8 08             	cmp    eax,0x8
c00107b1:	75 12                	jne    c00107c5 <SysFormatDisk(regs*)+0x46>
c00107b3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00107b6:	85 db                	test   ebx,ebx
c00107b8:	75 d4                	jne    c001078e <SysFormatDisk(regs*)+0xf>
c00107ba:	59                   	pop    ecx
c00107bb:	b8 03 00 00 00       	mov    eax,0x3
c00107c0:	31 d2                	xor    edx,edx
c00107c2:	5b                   	pop    ebx
c00107c3:	5e                   	pop    esi
c00107c4:	c3                   	ret    
c00107c5:	85 c0                	test   eax,eax
c00107c7:	74 1b                	je     c00107e4 <SysFormatDisk(regs*)+0x65>
c00107c9:	83 f8 09             	cmp    eax,0x9
c00107cc:	74 0b                	je     c00107d9 <SysFormatDisk(regs*)+0x5a>
c00107ce:	59                   	pop    ecx
c00107cf:	b8 02 00 00 00       	mov    eax,0x2
c00107d4:	31 d2                	xor    edx,edx
c00107d6:	5b                   	pop    ebx
c00107d7:	5e                   	pop    esi
c00107d8:	c3                   	ret    
c00107d9:	59                   	pop    ecx
c00107da:	b8 01 00 00 00       	mov    eax,0x1
c00107df:	31 d2                	xor    edx,edx
c00107e1:	5b                   	pop    ebx
c00107e2:	5e                   	pop    esi
c00107e3:	c3                   	ret    
c00107e4:	59                   	pop    ecx
c00107e5:	31 c0                	xor    eax,eax
c00107e7:	31 d2                	xor    edx,edx
c00107e9:	5b                   	pop    ebx
c00107ea:	5e                   	pop    esi
c00107eb:	c3                   	ret    

c00107ec <SysSetDiskVolumeLabel(regs*)>:
c00107ec:	56                   	push   esi
c00107ed:	53                   	push   ebx
c00107ee:	53                   	push   ebx
c00107ef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00107f3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00107f6:	83 f8 19             	cmp    eax,0x19
c00107f9:	77 2d                	ja     c0010828 <SysSetDiskVolumeLabel(regs*)+0x3c>
c00107fb:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c0010802:	85 c9                	test   ecx,ecx
c0010804:	74 22                	je     c0010828 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010806:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010809:	85 db                	test   ebx,ebx
c001080b:	74 1b                	je     c0010828 <SysSetDiskVolumeLabel(regs*)+0x3c>
c001080d:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0010813:	85 d2                	test   edx,edx
c0010815:	74 11                	je     c0010828 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010817:	8b 32                	mov    esi,DWORD PTR [edx]
c0010819:	53                   	push   ebx
c001081a:	50                   	push   eax
c001081b:	51                   	push   ecx
c001081c:	52                   	push   edx
c001081d:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010820:	83 c4 10             	add    esp,0x10
c0010823:	99                   	cdq    
c0010824:	59                   	pop    ecx
c0010825:	5b                   	pop    ebx
c0010826:	5e                   	pop    esi
c0010827:	c3                   	ret    
c0010828:	59                   	pop    ecx
c0010829:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001082e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010833:	5b                   	pop    ebx
c0010834:	5e                   	pop    esi
c0010835:	c3                   	ret    

c0010836 <SysGetDiskVolumeLabel(regs*)>:
c0010836:	57                   	push   edi
c0010837:	56                   	push   esi
c0010838:	53                   	push   ebx
c0010839:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001083d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010840:	83 fa 19             	cmp    edx,0x19
c0010843:	77 38                	ja     c001087d <SysGetDiskVolumeLabel(regs*)+0x47>
c0010845:	8b 0c 95 20 44 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdbbe0]
c001084c:	85 c9                	test   ecx,ecx
c001084e:	74 2d                	je     c001087d <SysGetDiskVolumeLabel(regs*)+0x47>
c0010850:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010853:	85 db                	test   ebx,ebx
c0010855:	74 26                	je     c001087d <SysGetDiskVolumeLabel(regs*)+0x47>
c0010857:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001085a:	85 f6                	test   esi,esi
c001085c:	74 1f                	je     c001087d <SysGetDiskVolumeLabel(regs*)+0x47>
c001085e:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0010864:	85 c0                	test   eax,eax
c0010866:	74 15                	je     c001087d <SysGetDiskVolumeLabel(regs*)+0x47>
c0010868:	83 ec 0c             	sub    esp,0xc
c001086b:	8b 38                	mov    edi,DWORD PTR [eax]
c001086d:	56                   	push   esi
c001086e:	53                   	push   ebx
c001086f:	52                   	push   edx
c0010870:	51                   	push   ecx
c0010871:	50                   	push   eax
c0010872:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0010875:	83 c4 20             	add    esp,0x20
c0010878:	99                   	cdq    
c0010879:	5b                   	pop    ebx
c001087a:	5e                   	pop    esi
c001087b:	5f                   	pop    edi
c001087c:	c3                   	ret    
c001087d:	5b                   	pop    ebx
c001087e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010883:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010888:	5e                   	pop    esi
c0010889:	5f                   	pop    edi
c001088a:	c3                   	ret    

c001088b <SysShutdown(regs*)>:
c001088b:	83 ec 0c             	sub    esp,0xc
c001088e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010892:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010895:	85 c0                	test   eax,eax
c0010897:	74 18                	je     c00108b1 <SysShutdown(regs*)+0x26>
c0010899:	83 f8 01             	cmp    eax,0x1
c001089c:	74 38                	je     c00108d6 <SysShutdown(regs*)+0x4b>
c001089e:	83 f8 02             	cmp    eax,0x2
c00108a1:	74 24                	je     c00108c7 <SysShutdown(regs*)+0x3c>
c00108a3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00108a8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00108ad:	83 c4 0c             	add    esp,0xc
c00108b0:	c3                   	ret    
c00108b1:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00108b6:	8b 10                	mov    edx,DWORD PTR [eax]
c00108b8:	6a 00                	push   0x0
c00108ba:	6a 00                	push   0x0
c00108bc:	6a 00                	push   0x0
c00108be:	50                   	push   eax
c00108bf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00108c2:	83 c4 10             	add    esp,0x10
c00108c5:	eb dc                	jmp    c00108a3 <SysShutdown(regs*)+0x18>
c00108c7:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00108cc:	8b 10                	mov    edx,DWORD PTR [eax]
c00108ce:	6a 00                	push   0x0
c00108d0:	6a 00                	push   0x0
c00108d2:	6a 01                	push   0x1
c00108d4:	eb e8                	jmp    c00108be <SysShutdown(regs*)+0x33>
c00108d6:	a1 a0 44 02 c0       	mov    eax,ds:0xc00244a0
c00108db:	85 c0                	test   eax,eax
c00108dd:	74 02                	je     c00108e1 <SysShutdown(regs*)+0x56>
c00108df:	ff d0                	call   eax
c00108e1:	31 c0                	xor    eax,eax
c00108e3:	31 d2                	xor    edx,edx
c00108e5:	83 c4 0c             	add    esp,0xc
c00108e8:	c3                   	ret    

c00108e9 <SysRealpath(regs*)>:
c00108e9:	83 ec 0c             	sub    esp,0xc
c00108ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f0:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00108f3:	85 d2                	test   edx,edx
c00108f5:	74 07                	je     c00108fe <SysRealpath(regs*)+0x15>
c00108f7:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00108fa:	85 c0                	test   eax,eax
c00108fc:	75 0b                	jne    c0010909 <SysRealpath(regs*)+0x20>
c00108fe:	b8 01 00 00 00       	mov    eax,0x1
c0010903:	31 d2                	xor    edx,edx
c0010905:	83 c4 0c             	add    esp,0xc
c0010908:	c3                   	ret    
c0010909:	51                   	push   ecx
c001090a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010910:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010913:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0010919:	51                   	push   ecx
c001091a:	52                   	push   edx
c001091b:	50                   	push   eax
c001091c:	e8 d7 9f ff ff       	call   c000a8f8 <Fs::standardiseFiles(char*, char const*, char const*)>
c0010921:	83 c4 10             	add    esp,0x10
c0010924:	31 c0                	xor    eax,eax
c0010926:	31 d2                	xor    edx,edx
c0010928:	83 c4 0c             	add    esp,0xc
c001092b:	c3                   	ret    

c001092c <SysReadDir(regs*)>:
c001092c:	53                   	push   ebx
c001092d:	83 ec 18             	sub    esp,0x18
c0010930:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010934:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010937:	83 f8 02             	cmp    eax,0x2
c001093a:	76 61                	jbe    c001099d <SysReadDir(regs*)+0x71>
c001093c:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010943:	77 49                	ja     c001098e <SysReadDir(regs*)+0x62>
c0010945:	83 ec 0c             	sub    esp,0xc
c0010948:	50                   	push   eax
c0010949:	e8 e1 87 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c001094e:	83 c4 10             	add    esp,0x10
c0010951:	85 c0                	test   eax,eax
c0010953:	74 39                	je     c001098e <SysReadDir(regs*)+0x62>
c0010955:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001095d:	83 ec 0c             	sub    esp,0xc
c0010960:	8b 10                	mov    edx,DWORD PTR [eax]
c0010962:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010966:	51                   	push   ecx
c0010967:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001096a:	51                   	push   ecx
c001096b:	6a 00                	push   0x0
c001096d:	68 10 01 00 00       	push   0x110
c0010972:	50                   	push   eax
c0010973:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010976:	83 c4 20             	add    esp,0x20
c0010979:	85 c0                	test   eax,eax
c001097b:	74 29                	je     c00109a6 <SysReadDir(regs*)+0x7a>
c001097d:	83 f8 07             	cmp    eax,0x7
c0010980:	74 1b                	je     c001099d <SysReadDir(regs*)+0x71>
c0010982:	b8 02 00 00 00       	mov    eax,0x2
c0010987:	31 d2                	xor    edx,edx
c0010989:	83 c4 18             	add    esp,0x18
c001098c:	5b                   	pop    ebx
c001098d:	c3                   	ret    
c001098e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010993:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010998:	83 c4 18             	add    esp,0x18
c001099b:	5b                   	pop    ebx
c001099c:	c3                   	ret    
c001099d:	b8 01 00 00 00       	mov    eax,0x1
c00109a2:	31 d2                	xor    edx,edx
c00109a4:	eb e3                	jmp    c0010989 <SysReadDir(regs*)+0x5d>
c00109a6:	31 c0                	xor    eax,eax
c00109a8:	31 d2                	xor    edx,edx
c00109aa:	eb dd                	jmp    c0010989 <SysReadDir(regs*)+0x5d>

c00109ac <SysIsATTY(regs*)>:
c00109ac:	83 ec 0c             	sub    esp,0xc
c00109af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00109b6:	83 f8 02             	cmp    eax,0x2
c00109b9:	76 07                	jbe    c00109c2 <SysIsATTY(regs*)+0x16>
c00109bb:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00109c0:	75 28                	jne    c00109ea <SysIsATTY(regs*)+0x3e>
c00109c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00109c7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00109ca:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00109d0:	85 c0                	test   eax,eax
c00109d2:	74 26                	je     c00109fa <SysIsATTY(regs*)+0x4e>
c00109d4:	83 ec 0c             	sub    esp,0xc
c00109d7:	8b 10                	mov    edx,DWORD PTR [eax]
c00109d9:	50                   	push   eax
c00109da:	ff 12                	call   DWORD PTR [edx]
c00109dc:	31 d2                	xor    edx,edx
c00109de:	25 ff 00 00 00       	and    eax,0xff
c00109e3:	83 c4 10             	add    esp,0x10
c00109e6:	83 c4 0c             	add    esp,0xc
c00109e9:	c3                   	ret    
c00109ea:	83 ec 0c             	sub    esp,0xc
c00109ed:	50                   	push   eax
c00109ee:	e8 3c 87 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c00109f3:	83 c4 10             	add    esp,0x10
c00109f6:	85 c0                	test   eax,eax
c00109f8:	75 da                	jne    c00109d4 <SysIsATTY(regs*)+0x28>
c00109fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00109ff:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a04:	83 c4 0c             	add    esp,0xc
c0010a07:	c3                   	ret    

c0010a08 <SysSeek(regs*)>:
c0010a08:	53                   	push   ebx
c0010a09:	83 ec 08             	sub    esp,0x8
c0010a0c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a10:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010a13:	8d 50 fd             	lea    edx,[eax-0x3]
c0010a16:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010a1c:	77 34                	ja     c0010a52 <SysSeek(regs*)+0x4a>
c0010a1e:	83 ec 0c             	sub    esp,0xc
c0010a21:	50                   	push   eax
c0010a22:	e8 08 87 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010a27:	83 c4 0c             	add    esp,0xc
c0010a2a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010a2d:	31 db                	xor    ebx,ebx
c0010a2f:	53                   	push   ebx
c0010a30:	51                   	push   ecx
c0010a31:	50                   	push   eax
c0010a32:	e8 e9 a1 ff ff       	call   c000ac20 <File::seek(unsigned long long)>
c0010a37:	83 c4 10             	add    esp,0x10
c0010a3a:	85 c0                	test   eax,eax
c0010a3c:	0f 95 c0             	setne  al
c0010a3f:	31 d2                	xor    edx,edx
c0010a41:	25 ff 00 00 00       	and    eax,0xff
c0010a46:	f7 d8                	neg    eax
c0010a48:	83 d2 00             	adc    edx,0x0
c0010a4b:	83 c4 08             	add    esp,0x8
c0010a4e:	f7 da                	neg    edx
c0010a50:	5b                   	pop    ebx
c0010a51:	c3                   	ret    
c0010a52:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a57:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a5c:	83 c4 08             	add    esp,0x8
c0010a5f:	5b                   	pop    ebx
c0010a60:	c3                   	ret    

c0010a61 <SysTell(regs*)>:
c0010a61:	53                   	push   ebx
c0010a62:	83 ec 08             	sub    esp,0x8
c0010a65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a69:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010a6c:	83 f8 02             	cmp    eax,0x2
c0010a6f:	76 50                	jbe    c0010ac1 <SysTell(regs*)+0x60>
c0010a71:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010a76:	76 19                	jbe    c0010a91 <SysTell(regs*)+0x30>
c0010a78:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010a7b:	31 d2                	xor    edx,edx
c0010a7d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010a83:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010a8a:	31 c0                	xor    eax,eax
c0010a8c:	83 c4 08             	add    esp,0x8
c0010a8f:	5b                   	pop    ebx
c0010a90:	c3                   	ret    
c0010a91:	83 ec 0c             	sub    esp,0xc
c0010a94:	50                   	push   eax
c0010a95:	e8 95 86 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010a9a:	5a                   	pop    edx
c0010a9b:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010a9e:	59                   	pop    ecx
c0010a9f:	53                   	push   ebx
c0010aa0:	50                   	push   eax
c0010aa1:	e8 d0 a1 ff ff       	call   c000ac76 <File::tell(unsigned long long*)>
c0010aa6:	83 c4 10             	add    esp,0x10
c0010aa9:	85 c0                	test   eax,eax
c0010aab:	0f 95 c0             	setne  al
c0010aae:	31 d2                	xor    edx,edx
c0010ab0:	25 ff 00 00 00       	and    eax,0xff
c0010ab5:	f7 d8                	neg    eax
c0010ab7:	83 d2 00             	adc    edx,0x0
c0010aba:	83 c4 08             	add    esp,0x8
c0010abd:	f7 da                	neg    edx
c0010abf:	5b                   	pop    ebx
c0010ac0:	c3                   	ret    
c0010ac1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010ac6:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010acb:	83 c4 08             	add    esp,0x8
c0010ace:	5b                   	pop    ebx
c0010acf:	c3                   	ret    

c0010ad0 <SysSize(regs*)>:
c0010ad0:	53                   	push   ebx
c0010ad1:	83 ec 18             	sub    esp,0x18
c0010ad4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010ad8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010adb:	83 f8 02             	cmp    eax,0x2
c0010ade:	76 56                	jbe    c0010b36 <SysSize(regs*)+0x66>
c0010ae0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010ae5:	76 19                	jbe    c0010b00 <SysSize(regs*)+0x30>
c0010ae7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010aea:	31 d2                	xor    edx,edx
c0010aec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010af2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010af9:	31 c0                	xor    eax,eax
c0010afb:	83 c4 18             	add    esp,0x18
c0010afe:	5b                   	pop    ebx
c0010aff:	c3                   	ret    
c0010b00:	83 ec 0c             	sub    esp,0xc
c0010b03:	50                   	push   eax
c0010b04:	e8 26 86 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010b09:	83 c4 0c             	add    esp,0xc
c0010b0c:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010b10:	52                   	push   edx
c0010b11:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010b14:	52                   	push   edx
c0010b15:	50                   	push   eax
c0010b16:	e8 f3 a2 ff ff       	call   c000ae0e <File::stat(unsigned long long*, bool*)>
c0010b1b:	83 c4 10             	add    esp,0x10
c0010b1e:	85 c0                	test   eax,eax
c0010b20:	0f 95 c0             	setne  al
c0010b23:	31 d2                	xor    edx,edx
c0010b25:	25 ff 00 00 00       	and    eax,0xff
c0010b2a:	f7 d8                	neg    eax
c0010b2c:	83 d2 00             	adc    edx,0x0
c0010b2f:	83 c4 18             	add    esp,0x18
c0010b32:	f7 da                	neg    edx
c0010b34:	5b                   	pop    ebx
c0010b35:	c3                   	ret    
c0010b36:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b3b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b40:	83 c4 18             	add    esp,0x18
c0010b43:	5b                   	pop    ebx
c0010b44:	c3                   	ret    

c0010b45 <SysSizeFromFilename(regs*)>:
c0010b45:	57                   	push   edi
c0010b46:	56                   	push   esi
c0010b47:	53                   	push   ebx
c0010b48:	83 ec 20             	sub    esp,0x20
c0010b4b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010b4f:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010b52:	83 fb 02             	cmp    ebx,0x2
c0010b55:	0f 86 8c 00 00 00    	jbe    c0010be7 <SysSizeFromFilename(regs*)+0xa2>
c0010b5b:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010b61:	76 1b                	jbe    c0010b7e <SysSizeFromFilename(regs*)+0x39>
c0010b63:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010b66:	31 d2                	xor    edx,edx
c0010b68:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010b6e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b75:	83 c4 20             	add    esp,0x20
c0010b78:	31 c0                	xor    eax,eax
c0010b7a:	5b                   	pop    ebx
c0010b7b:	5e                   	pop    esi
c0010b7c:	5f                   	pop    edi
c0010b7d:	c3                   	ret    
c0010b7e:	83 ec 0c             	sub    esp,0xc
c0010b81:	68 14 01 00 00       	push   0x114
c0010b86:	e8 2e 6c ff ff       	call   c00077b9 <malloc>
c0010b8b:	83 c4 0c             	add    esp,0xc
c0010b8e:	89 c7                	mov    edi,eax
c0010b90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010b95:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010b98:	50                   	push   eax
c0010b99:	53                   	push   ebx
c0010b9a:	57                   	push   edi
c0010b9b:	e8 02 9f ff ff       	call   c000aaa2 <File::File(char const*, Process*)>
c0010ba0:	83 c4 0c             	add    esp,0xc
c0010ba3:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010ba7:	50                   	push   eax
c0010ba8:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010bab:	52                   	push   edx
c0010bac:	57                   	push   edi
c0010bad:	e8 5c a2 ff ff       	call   c000ae0e <File::stat(unsigned long long*, bool*)>
c0010bb2:	83 c4 10             	add    esp,0x10
c0010bb5:	85 ff                	test   edi,edi
c0010bb7:	74 14                	je     c0010bcd <SysSizeFromFilename(regs*)+0x88>
c0010bb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010bbd:	8b 17                	mov    edx,DWORD PTR [edi]
c0010bbf:	83 ec 0c             	sub    esp,0xc
c0010bc2:	57                   	push   edi
c0010bc3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010bc6:	83 c4 10             	add    esp,0x10
c0010bc9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010bcd:	85 c0                	test   eax,eax
c0010bcf:	0f 95 c0             	setne  al
c0010bd2:	31 d2                	xor    edx,edx
c0010bd4:	25 ff 00 00 00       	and    eax,0xff
c0010bd9:	f7 d8                	neg    eax
c0010bdb:	83 d2 00             	adc    edx,0x0
c0010bde:	83 c4 20             	add    esp,0x20
c0010be1:	f7 da                	neg    edx
c0010be3:	5b                   	pop    ebx
c0010be4:	5e                   	pop    esi
c0010be5:	5f                   	pop    edi
c0010be6:	c3                   	ret    
c0010be7:	83 c4 20             	add    esp,0x20
c0010bea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010bef:	5b                   	pop    ebx
c0010bf0:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010bf5:	5e                   	pop    esi
c0010bf6:	5f                   	pop    edi
c0010bf7:	c3                   	ret    

c0010bf8 <SysClose(regs*)>:
c0010bf8:	53                   	push   ebx
c0010bf9:	83 ec 08             	sub    esp,0x8
c0010bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c00:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010c03:	83 f8 02             	cmp    eax,0x2
c0010c06:	76 41                	jbe    c0010c49 <SysClose(regs*)+0x51>
c0010c08:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010c0e:	83 fa 01             	cmp    edx,0x1
c0010c11:	76 2d                	jbe    c0010c40 <SysClose(regs*)+0x48>
c0010c13:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010c18:	77 2f                	ja     c0010c49 <SysClose(regs*)+0x51>
c0010c1a:	83 ec 0c             	sub    esp,0xc
c0010c1d:	50                   	push   eax
c0010c1e:	e8 0c 85 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010c23:	89 c3                	mov    ebx,eax
c0010c25:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c28:	e8 93 9f ff ff       	call   c000abc0 <File::close()>
c0010c2d:	83 c4 10             	add    esp,0x10
c0010c30:	85 db                	test   ebx,ebx
c0010c32:	74 0c                	je     c0010c40 <SysClose(regs*)+0x48>
c0010c34:	83 ec 0c             	sub    esp,0xc
c0010c37:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010c39:	53                   	push   ebx
c0010c3a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010c3d:	83 c4 10             	add    esp,0x10
c0010c40:	31 c0                	xor    eax,eax
c0010c42:	31 d2                	xor    edx,edx
c0010c44:	83 c4 08             	add    esp,0x8
c0010c47:	5b                   	pop    ebx
c0010c48:	c3                   	ret    
c0010c49:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c4e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c53:	83 c4 08             	add    esp,0x8
c0010c56:	5b                   	pop    ebx
c0010c57:	c3                   	ret    

c0010c58 <SysOpenDir(regs*)>:
c0010c58:	57                   	push   edi
c0010c59:	56                   	push   esi
c0010c5a:	53                   	push   ebx
c0010c5b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c5f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c62:	85 c0                	test   eax,eax
c0010c64:	0f 84 e7 00 00 00    	je     c0010d51 <SysOpenDir(regs*)+0xf9>
c0010c6a:	83 ec 0c             	sub    esp,0xc
c0010c6d:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010c70:	56                   	push   esi
c0010c71:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0010c74:	57                   	push   edi
c0010c75:	50                   	push   eax
c0010c76:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010c79:	50                   	push   eax
c0010c7a:	68 34 e8 01 c0       	push   0xc001e834
c0010c7f:	e8 a9 98 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0010c84:	83 c4 18             	add    esp,0x18
c0010c87:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c8a:	50                   	push   eax
c0010c8b:	68 5a e8 01 c0       	push   0xc001e85a
c0010c90:	e8 98 98 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0010c95:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0010c9c:	e8 18 6b ff ff       	call   c00077b9 <malloc>
c0010ca1:	83 c4 0c             	add    esp,0xc
c0010ca4:	89 c6                	mov    esi,eax
c0010ca6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010cab:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010cae:	50                   	push   eax
c0010caf:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010cb2:	50                   	push   eax
c0010cb3:	56                   	push   esi
c0010cb4:	e8 13 a3 ff ff       	call   c000afcc <Directory::Directory(char const*, Process*)>
c0010cb9:	c7 04 24 4e f6 01 c0 	mov    DWORD PTR [esp],0xc001f64e
c0010cc0:	e8 68 98 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0010cc5:	83 c4 10             	add    esp,0x10
c0010cc8:	85 f6                	test   esi,esi
c0010cca:	0f 84 8f 00 00 00    	je     c0010d5f <SysOpenDir(regs*)+0x107>
c0010cd0:	83 ec 0c             	sub    esp,0xc
c0010cd3:	68 6f e8 01 c0       	push   0xc001e86f
c0010cd8:	e8 50 98 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0010cdd:	58                   	pop    eax
c0010cde:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010ce1:	5a                   	pop    edx
c0010ce2:	51                   	push   ecx
c0010ce3:	68 73 e8 01 c0       	push   0xc001e873
c0010ce8:	e8 40 98 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0010ced:	89 34 24             	mov    DWORD PTR [esp],esi
c0010cf0:	e8 97 a3 ff ff       	call   c000b08c <Directory::open()>
c0010cf5:	c7 04 24 6b d6 01 c0 	mov    DWORD PTR [esp],0xc001d66b
c0010cfc:	89 c7                	mov    edi,eax
c0010cfe:	e8 2a 98 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0010d03:	83 c4 10             	add    esp,0x10
c0010d06:	85 ff                	test   edi,edi
c0010d08:	75 37                	jne    c0010d41 <SysOpenDir(regs*)+0xe9>
c0010d0a:	83 ec 0c             	sub    esp,0xc
c0010d0d:	68 84 e8 01 c0       	push   0xc001e884
c0010d12:	e8 16 98 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0010d17:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d1a:	e8 1b 81 ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c0010d1f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010d22:	89 02                	mov    DWORD PTR [edx],eax
c0010d24:	c1 f8 1f             	sar    eax,0x1f
c0010d27:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010d2a:	c7 04 24 88 e8 01 c0 	mov    DWORD PTR [esp],0xc001e888
c0010d31:	e8 f7 97 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0010d36:	83 c4 10             	add    esp,0x10
c0010d39:	31 c0                	xor    eax,eax
c0010d3b:	5b                   	pop    ebx
c0010d3c:	31 d2                	xor    edx,edx
c0010d3e:	5e                   	pop    esi
c0010d3f:	5f                   	pop    edi
c0010d40:	c3                   	ret    
c0010d41:	83 ec 0c             	sub    esp,0xc
c0010d44:	68 80 e8 01 c0       	push   0xc001e880
c0010d49:	e8 df 97 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0010d4e:	83 c4 10             	add    esp,0x10
c0010d51:	5b                   	pop    ebx
c0010d52:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d57:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d5c:	5e                   	pop    esi
c0010d5d:	5f                   	pop    edi
c0010d5e:	c3                   	ret    
c0010d5f:	83 ec 0c             	sub    esp,0xc
c0010d62:	68 6b e8 01 c0       	push   0xc001e86b
c0010d67:	eb e0                	jmp    c0010d49 <SysOpenDir(regs*)+0xf1>

c0010d69 <SysCloseDir(regs*)>:
c0010d69:	53                   	push   ebx
c0010d6a:	83 ec 08             	sub    esp,0x8
c0010d6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d71:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010d74:	8d 50 fd             	lea    edx,[eax-0x3]
c0010d77:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010d7d:	77 2f                	ja     c0010dae <SysCloseDir(regs*)+0x45>
c0010d7f:	83 ec 0c             	sub    esp,0xc
c0010d82:	50                   	push   eax
c0010d83:	e8 a7 83 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010d88:	89 c3                	mov    ebx,eax
c0010d8a:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d8d:	e8 56 a3 ff ff       	call   c000b0e8 <Directory::close()>
c0010d92:	83 c4 10             	add    esp,0x10
c0010d95:	85 db                	test   ebx,ebx
c0010d97:	74 0c                	je     c0010da5 <SysCloseDir(regs*)+0x3c>
c0010d99:	83 ec 0c             	sub    esp,0xc
c0010d9c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d9e:	53                   	push   ebx
c0010d9f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010da2:	83 c4 10             	add    esp,0x10
c0010da5:	31 c0                	xor    eax,eax
c0010da7:	31 d2                	xor    edx,edx
c0010da9:	83 c4 08             	add    esp,0x8
c0010dac:	5b                   	pop    ebx
c0010dad:	c3                   	ret    
c0010dae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010db3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010db8:	83 c4 08             	add    esp,0x8
c0010dbb:	5b                   	pop    ebx
c0010dbc:	c3                   	ret    

c0010dbd <SysMakeDir(regs*)>:
c0010dbd:	56                   	push   esi
c0010dbe:	53                   	push   ebx
c0010dbf:	83 ec 10             	sub    esp,0x10
c0010dc2:	68 14 01 00 00       	push   0x114
c0010dc7:	e8 ed 69 ff ff       	call   c00077b9 <malloc>
c0010dcc:	83 c4 0c             	add    esp,0xc
c0010dcf:	89 c3                	mov    ebx,eax
c0010dd1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010dd6:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010dd9:	56                   	push   esi
c0010dda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010dde:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010de1:	50                   	push   eax
c0010de2:	53                   	push   ebx
c0010de3:	e8 e4 a1 ff ff       	call   c000afcc <Directory::Directory(char const*, Process*)>
c0010de8:	83 c4 10             	add    esp,0x10
c0010deb:	85 db                	test   ebx,ebx
c0010ded:	74 32                	je     c0010e21 <SysMakeDir(regs*)+0x64>
c0010def:	83 ec 0c             	sub    esp,0xc
c0010df2:	53                   	push   ebx
c0010df3:	e8 74 a4 ff ff       	call   c000b26c <Directory::create()>
c0010df8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dfb:	89 c6                	mov    esi,eax
c0010dfd:	e8 e6 a2 ff ff       	call   c000b0e8 <Directory::close()>
c0010e02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e07:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010e0a:	83 c4 10             	add    esp,0x10
c0010e0d:	31 c0                	xor    eax,eax
c0010e0f:	59                   	pop    ecx
c0010e10:	85 f6                	test   esi,esi
c0010e12:	5b                   	pop    ebx
c0010e13:	0f 95 c0             	setne  al
c0010e16:	5e                   	pop    esi
c0010e17:	31 d2                	xor    edx,edx
c0010e19:	f7 d8                	neg    eax
c0010e1b:	83 d2 00             	adc    edx,0x0
c0010e1e:	f7 da                	neg    edx
c0010e20:	c3                   	ret    
c0010e21:	59                   	pop    ecx
c0010e22:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e27:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e2c:	5b                   	pop    ebx
c0010e2d:	5e                   	pop    esi
c0010e2e:	c3                   	ret    

c0010e2f <SysWait(regs*)>:
c0010e2f:	83 ec 10             	sub    esp,0x10
c0010e32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e36:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010e39:	52                   	push   edx
c0010e3a:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010e3d:	51                   	push   ecx
c0010e3e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010e41:	50                   	push   eax
c0010e42:	e8 89 2b 00 00       	call   c00139d0 <waitTask(int, int*, int)>
c0010e47:	83 c4 1c             	add    esp,0x1c
c0010e4a:	99                   	cdq    
c0010e4b:	c3                   	ret    

c0010e4c <SysNotImpl(regs*)>:
c0010e4c:	83 ec 18             	sub    esp,0x18
c0010e4f:	68 8c e8 01 c0       	push   0xc001e88c
c0010e54:	e8 56 f3 ff ff       	call   c00101af <KePanic(char const*)>
c0010e59:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e5e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e63:	83 c4 1c             	add    esp,0x1c
c0010e66:	c3                   	ret    

c0010e67 <SysPanic(regs*)>:
c0010e67:	83 ec 18             	sub    esp,0x18
c0010e6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e6e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010e71:	50                   	push   eax
c0010e72:	e8 38 f3 ff ff       	call   c00101af <KePanic(char const*)>
c0010e77:	b8 01 00 00 00       	mov    eax,0x1
c0010e7c:	31 d2                	xor    edx,edx
c0010e7e:	83 c4 1c             	add    esp,0x1c
c0010e81:	c3                   	ret    

c0010e82 <SysRmdir(regs*)>:
c0010e82:	56                   	push   esi
c0010e83:	53                   	push   ebx
c0010e84:	83 ec 20             	sub    esp,0x20
c0010e87:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010e8b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010e8e:	68 14 01 00 00       	push   0x114
c0010e93:	e8 21 69 ff ff       	call   c00077b9 <malloc>
c0010e98:	83 c4 0c             	add    esp,0xc
c0010e9b:	89 c3                	mov    ebx,eax
c0010e9d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ea2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ea5:	50                   	push   eax
c0010ea6:	56                   	push   esi
c0010ea7:	53                   	push   ebx
c0010ea8:	e8 f5 9b ff ff       	call   c000aaa2 <File::File(char const*, Process*)>
c0010ead:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010eb0:	e8 25 9e ff ff       	call   c000acda <File::unlink()>
c0010eb5:	83 c4 10             	add    esp,0x10
c0010eb8:	85 db                	test   ebx,ebx
c0010eba:	74 14                	je     c0010ed0 <SysRmdir(regs*)+0x4e>
c0010ebc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ec0:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010ec2:	83 ec 0c             	sub    esp,0xc
c0010ec5:	53                   	push   ebx
c0010ec6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010ec9:	83 c4 10             	add    esp,0x10
c0010ecc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ed0:	85 c0                	test   eax,eax
c0010ed2:	0f 95 c0             	setne  al
c0010ed5:	31 d2                	xor    edx,edx
c0010ed7:	25 ff 00 00 00       	and    eax,0xff
c0010edc:	f7 d8                	neg    eax
c0010ede:	83 d2 00             	adc    edx,0x0
c0010ee1:	83 c4 14             	add    esp,0x14
c0010ee4:	f7 da                	neg    edx
c0010ee6:	5b                   	pop    ebx
c0010ee7:	5e                   	pop    esi
c0010ee8:	c3                   	ret    

c0010ee9 <SysUnlink(regs*)>:
c0010ee9:	56                   	push   esi
c0010eea:	53                   	push   ebx
c0010eeb:	83 ec 20             	sub    esp,0x20
c0010eee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010ef2:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010ef5:	68 14 01 00 00       	push   0x114
c0010efa:	e8 ba 68 ff ff       	call   c00077b9 <malloc>
c0010eff:	83 c4 0c             	add    esp,0xc
c0010f02:	89 c3                	mov    ebx,eax
c0010f04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f09:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f0c:	50                   	push   eax
c0010f0d:	56                   	push   esi
c0010f0e:	53                   	push   ebx
c0010f0f:	e8 8e 9b ff ff       	call   c000aaa2 <File::File(char const*, Process*)>
c0010f14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f17:	e8 be 9d ff ff       	call   c000acda <File::unlink()>
c0010f1c:	83 c4 10             	add    esp,0x10
c0010f1f:	85 db                	test   ebx,ebx
c0010f21:	74 14                	je     c0010f37 <SysUnlink(regs*)+0x4e>
c0010f23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f27:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f29:	83 ec 0c             	sub    esp,0xc
c0010f2c:	53                   	push   ebx
c0010f2d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010f30:	83 c4 10             	add    esp,0x10
c0010f33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f37:	85 c0                	test   eax,eax
c0010f39:	0f 95 c0             	setne  al
c0010f3c:	31 d2                	xor    edx,edx
c0010f3e:	25 ff 00 00 00       	and    eax,0xff
c0010f43:	f7 d8                	neg    eax
c0010f45:	83 d2 00             	adc    edx,0x0
c0010f48:	83 c4 14             	add    esp,0x14
c0010f4b:	f7 da                	neg    edx
c0010f4d:	5b                   	pop    ebx
c0010f4e:	5e                   	pop    esi
c0010f4f:	c3                   	ret    

c0010f50 <SysGetArgv(regs*)>:
c0010f50:	83 ec 0c             	sub    esp,0xc
c0010f53:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010f57:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010f5a:	85 c0                	test   eax,eax
c0010f5c:	78 2c                	js     c0010f8a <SysGetArgv(regs*)+0x3a>
c0010f5e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010f64:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010f67:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010f6d:	7d 1b                	jge    c0010f8a <SysGetArgv(regs*)+0x3a>
c0010f6f:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010f76:	85 c0                	test   eax,eax
c0010f78:	74 18                	je     c0010f92 <SysGetArgv(regs*)+0x42>
c0010f7a:	83 ec 08             	sub    esp,0x8
c0010f7d:	50                   	push   eax
c0010f7e:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0010f81:	50                   	push   eax
c0010f82:	e8 79 f6 fe ff       	call   c0000600 <strcpy>
c0010f87:	83 c4 10             	add    esp,0x10
c0010f8a:	31 c0                	xor    eax,eax
c0010f8c:	31 d2                	xor    edx,edx
c0010f8e:	83 c4 0c             	add    esp,0xc
c0010f91:	c3                   	ret    
c0010f92:	b8 01 00 00 00       	mov    eax,0x1
c0010f97:	31 d2                	xor    edx,edx
c0010f99:	83 c4 0c             	add    esp,0xc
c0010f9c:	c3                   	ret    

c0010f9d <SysUSleep(regs*)>:
c0010f9d:	83 ec 1c             	sub    esp,0x1c
c0010fa0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010fa4:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010fa7:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010faa:	6a 00                	push   0x0
c0010fac:	6a 64                	push   0x64
c0010fae:	52                   	push   edx
c0010faf:	50                   	push   eax
c0010fb0:	e8 4b b1 00 00       	call   c001c100 <__udivdi3>
c0010fb5:	83 c4 14             	add    esp,0x14
c0010fb8:	50                   	push   eax
c0010fb9:	e8 e6 2a 00 00       	call   c0013aa4 <milliTenthSleep(unsigned int)>
c0010fbe:	31 c0                	xor    eax,eax
c0010fc0:	31 d2                	xor    edx,edx
c0010fc2:	83 c4 1c             	add    esp,0x1c
c0010fc5:	c3                   	ret    

c0010fc6 <SysSpawn(regs*)>:
c0010fc6:	56                   	push   esi
c0010fc7:	53                   	push   ebx
c0010fc8:	50                   	push   eax
c0010fc9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010fcd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010fd0:	85 c0                	test   eax,eax
c0010fd2:	75 08                	jne    c0010fdc <SysSpawn(regs*)+0x16>
c0010fd4:	59                   	pop    ecx
c0010fd5:	31 c0                	xor    eax,eax
c0010fd7:	31 d2                	xor    edx,edx
c0010fd9:	5b                   	pop    ebx
c0010fda:	5e                   	pop    esi
c0010fdb:	c3                   	ret    
c0010fdc:	83 ec 0c             	sub    esp,0xc
c0010fdf:	68 24 07 00 00       	push   0x724
c0010fe4:	e8 d0 67 ff ff       	call   c00077b9 <malloc>
c0010fe9:	83 c4 10             	add    esp,0x10
c0010fec:	89 c6                	mov    esi,eax
c0010fee:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010ff1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010ff4:	85 c0                	test   eax,eax
c0010ff6:	75 33                	jne    c001102b <SysSpawn(regs*)+0x65>
c0010ff8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ffd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011000:	52                   	push   edx
c0011001:	50                   	push   eax
c0011002:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0011005:	53                   	push   ebx
c0011006:	56                   	push   esi
c0011007:	e8 44 21 00 00       	call   c0013150 <Process::Process(char const*, Process*, char**)>
c001100c:	83 c4 10             	add    esp,0x10
c001100f:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011016:	75 bc                	jne    c0010fd4 <SysSpawn(regs*)+0xe>
c0011018:	83 ec 0c             	sub    esp,0xc
c001101b:	56                   	push   esi
c001101c:	e8 5b 26 00 00       	call   c001367c <Process::createUserThread()>
c0011021:	8b 06                	mov    eax,DWORD PTR [esi]
c0011023:	83 c4 10             	add    esp,0x10
c0011026:	99                   	cdq    
c0011027:	59                   	pop    ecx
c0011028:	5b                   	pop    ebx
c0011029:	5e                   	pop    esi
c001102a:	c3                   	ret    
c001102b:	31 c0                	xor    eax,eax
c001102d:	eb d1                	jmp    c0011000 <SysSpawn(regs*)+0x3a>

c001102f <SysGetEnv(regs*)>:
c001102f:	57                   	push   edi
c0011030:	56                   	push   esi
c0011031:	53                   	push   ebx
c0011032:	83 ec 1c             	sub    esp,0x1c
c0011035:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011039:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001103e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011041:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011044:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011047:	50                   	push   eax
c0011048:	e8 1a f0 ff ff       	call   c0010067 <Krnl::getProcessTotalEnvCount(Process*)>
c001104d:	83 c4 10             	add    esp,0x10
c0011050:	39 c7                	cmp    edi,eax
c0011052:	7c 14                	jl     c0011068 <SysGetEnv(regs*)+0x39>
c0011054:	85 f6                	test   esi,esi
c0011056:	75 0b                	jne    c0011063 <SysGetEnv(regs*)+0x34>
c0011058:	83 c4 10             	add    esp,0x10
c001105b:	31 c0                	xor    eax,eax
c001105d:	5b                   	pop    ebx
c001105e:	31 d2                	xor    edx,edx
c0011060:	5e                   	pop    esi
c0011061:	5f                   	pop    edi
c0011062:	c3                   	ret    
c0011063:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011066:	eb f0                	jmp    c0011058 <SysGetEnv(regs*)+0x29>
c0011068:	8d 44 24 08          	lea    eax,[esp+0x8]
c001106c:	52                   	push   edx
c001106d:	57                   	push   edi
c001106e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011074:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0011077:	51                   	push   ecx
c0011078:	50                   	push   eax
c0011079:	e8 09 f0 ff ff       	call   c0010087 <Krnl::getProcessEnvPair(Process*, int)>
c001107e:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011081:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011085:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011089:	83 c4 0c             	add    esp,0xc
c001108c:	85 db                	test   ebx,ebx
c001108e:	75 23                	jne    c00110b3 <SysGetEnv(regs*)+0x84>
c0011090:	83 ec 0c             	sub    esp,0xc
c0011093:	50                   	push   eax
c0011094:	e8 a7 f4 fe ff       	call   c0000540 <strlen>
c0011099:	89 3c 24             	mov    DWORD PTR [esp],edi
c001109c:	89 c3                	mov    ebx,eax
c001109e:	e8 9d f4 fe ff       	call   c0000540 <strlen>
c00110a3:	31 d2                	xor    edx,edx
c00110a5:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00110a9:	83 c4 10             	add    esp,0x10
c00110ac:	83 c4 10             	add    esp,0x10
c00110af:	5b                   	pop    ebx
c00110b0:	5e                   	pop    esi
c00110b1:	5f                   	pop    edi
c00110b2:	c3                   	ret    
c00110b3:	83 ec 08             	sub    esp,0x8
c00110b6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00110b9:	50                   	push   eax
c00110ba:	56                   	push   esi
c00110bb:	e8 40 f5 fe ff       	call   c0000600 <strcpy>
c00110c0:	58                   	pop    eax
c00110c1:	5a                   	pop    edx
c00110c2:	68 a6 e8 01 c0       	push   0xc001e8a6
c00110c7:	56                   	push   esi
c00110c8:	e8 f3 f6 fe ff       	call   c00007c0 <strcat>
c00110cd:	59                   	pop    ecx
c00110ce:	5b                   	pop    ebx
c00110cf:	57                   	push   edi
c00110d0:	56                   	push   esi
c00110d1:	e8 ea f6 fe ff       	call   c00007c0 <strcat>
c00110d6:	83 c4 10             	add    esp,0x10
c00110d9:	e9 7a ff ff ff       	jmp    c0011058 <SysGetEnv(regs*)+0x29>

c00110de <SysSetFatAttrib(regs*)>:
c00110de:	57                   	push   edi
c00110df:	56                   	push   esi
c00110e0:	53                   	push   ebx
c00110e1:	83 ec 1c             	sub    esp,0x1c
c00110e4:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00110e8:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00110eb:	68 14 01 00 00       	push   0x114
c00110f0:	e8 c4 66 ff ff       	call   c00077b9 <malloc>
c00110f5:	83 c4 0c             	add    esp,0xc
c00110f8:	89 c3                	mov    ebx,eax
c00110fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110ff:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011102:	50                   	push   eax
c0011103:	57                   	push   edi
c0011104:	53                   	push   ebx
c0011105:	e8 98 99 ff ff       	call   c000aaa2 <File::File(char const*, Process*)>
c001110a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001110d:	83 c4 0c             	add    esp,0xc
c0011110:	0f b6 d4             	movzx  edx,ah
c0011113:	25 ff 00 00 00       	and    eax,0xff
c0011118:	52                   	push   edx
c0011119:	50                   	push   eax
c001111a:	53                   	push   ebx
c001111b:	e8 54 9c ff ff       	call   c000ad74 <File::chfatattr(unsigned char, unsigned char)>
c0011120:	83 c4 10             	add    esp,0x10
c0011123:	85 db                	test   ebx,ebx
c0011125:	74 14                	je     c001113b <SysSetFatAttrib(regs*)+0x5d>
c0011127:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001112b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001112d:	83 ec 0c             	sub    esp,0xc
c0011130:	53                   	push   ebx
c0011131:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011134:	83 c4 10             	add    esp,0x10
c0011137:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001113b:	85 c0                	test   eax,eax
c001113d:	0f 95 c0             	setne  al
c0011140:	31 d2                	xor    edx,edx
c0011142:	25 ff 00 00 00       	and    eax,0xff
c0011147:	f7 d8                	neg    eax
c0011149:	83 d2 00             	adc    edx,0x0
c001114c:	83 c4 10             	add    esp,0x10
c001114f:	f7 da                	neg    edx
c0011151:	5b                   	pop    ebx
c0011152:	5e                   	pop    esi
c0011153:	5f                   	pop    edi
c0011154:	c3                   	ret    

c0011155 <SysPipe(regs*)>:
c0011155:	57                   	push   edi
c0011156:	56                   	push   esi
c0011157:	53                   	push   ebx
c0011158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001115c:	83 ec 0c             	sub    esp,0xc
c001115f:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011162:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011165:	6a 20                	push   0x20
c0011167:	e8 4d 66 ff ff       	call   c00077b9 <malloc>
c001116c:	89 c3                	mov    ebx,eax
c001116e:	58                   	pop    eax
c001116f:	5a                   	pop    edx
c0011170:	68 00 50 00 00       	push   0x5000
c0011175:	53                   	push   ebx
c0011176:	e8 43 6f ff ff       	call   c00080be <Pipe::Pipe(int)>
c001117b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001117e:	e8 b7 7c ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c0011183:	89 07                	mov    DWORD PTR [edi],eax
c0011185:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011188:	e8 ad 7c ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c001118d:	83 c4 10             	add    esp,0x10
c0011190:	89 06                	mov    DWORD PTR [esi],eax
c0011192:	31 d2                	xor    edx,edx
c0011194:	5b                   	pop    ebx
c0011195:	31 c0                	xor    eax,eax
c0011197:	5e                   	pop    esi
c0011198:	5f                   	pop    edi
c0011199:	c3                   	ret    

c001119a <SysGetUnixTime(regs*)>:
c001119a:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001119f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00111a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00111a9:	e9 04 a3 ff ff       	jmp    c000b4b2 <Clock::timeInSecondsLocal()>

c00111ae <string_ends_with(char const*, char const*)>:
c00111ae:	57                   	push   edi
c00111af:	56                   	push   esi
c00111b0:	53                   	push   ebx
c00111b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111b5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00111b9:	83 ec 0c             	sub    esp,0xc
c00111bc:	53                   	push   ebx
c00111bd:	e8 7e f3 fe ff       	call   c0000540 <strlen>
c00111c2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00111c5:	89 c6                	mov    esi,eax
c00111c7:	e8 74 f3 fe ff       	call   c0000540 <strlen>
c00111cc:	83 c4 10             	add    esp,0x10
c00111cf:	39 c6                	cmp    esi,eax
c00111d1:	7d 06                	jge    c00111d9 <string_ends_with(char const*, char const*)+0x2b>
c00111d3:	5b                   	pop    ebx
c00111d4:	31 c0                	xor    eax,eax
c00111d6:	5e                   	pop    esi
c00111d7:	5f                   	pop    edi
c00111d8:	c3                   	ret    
c00111d9:	83 ec 08             	sub    esp,0x8
c00111dc:	29 c6                	sub    esi,eax
c00111de:	57                   	push   edi
c00111df:	01 f3                	add    ebx,esi
c00111e1:	53                   	push   ebx
c00111e2:	e8 f9 f4 fe ff       	call   c00006e0 <strcmp>
c00111e7:	83 c4 10             	add    esp,0x10
c00111ea:	85 c0                	test   eax,eax
c00111ec:	5b                   	pop    ebx
c00111ed:	0f 94 c0             	sete   al
c00111f0:	5e                   	pop    esi
c00111f1:	25 ff 00 00 00       	and    eax,0xff
c00111f6:	5f                   	pop    edi
c00111f7:	c3                   	ret    

c00111f8 <SysOpen(regs*)>:
c00111f8:	56                   	push   esi
c00111f9:	53                   	push   ebx
c00111fa:	81 ec 04 01 00 00    	sub    esp,0x104
c0011200:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011207:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001120a:	85 d2                	test   edx,edx
c001120c:	0f 84 cc 01 00 00    	je     c00113de <SysOpen(regs*)+0x1e6>
c0011212:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011215:	85 c0                	test   eax,eax
c0011217:	0f 84 c1 01 00 00    	je     c00113de <SysOpen(regs*)+0x1e6>
c001121d:	83 ec 08             	sub    esp,0x8
c0011220:	50                   	push   eax
c0011221:	68 a8 e8 01 c0       	push   0xc001e8a8
c0011226:	e8 02 93 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c001122b:	83 c4 0c             	add    esp,0xc
c001122e:	68 b5 e8 01 c0       	push   0xc001e8b5
c0011233:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011236:	50                   	push   eax
c0011237:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001123b:	56                   	push   esi
c001123c:	e8 b7 96 ff ff       	call   c000a8f8 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011241:	89 34 24             	mov    DWORD PTR [esp],esi
c0011244:	e8 f7 f2 fe ff       	call   c0000540 <strlen>
c0011249:	83 c4 10             	add    esp,0x10
c001124c:	48                   	dec    eax
c001124d:	74 1d                	je     c001126c <SysOpen(regs*)+0x74>
c001124f:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0011252:	eb 0f                	jmp    c0011263 <SysOpen(regs*)+0x6b>
c0011254:	80 fa 3a             	cmp    dl,0x3a
c0011257:	74 0f                	je     c0011268 <SysOpen(regs*)+0x70>
c0011259:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001125d:	48                   	dec    eax
c001125e:	74 0c                	je     c001126c <SysOpen(regs*)+0x74>
c0011260:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0011263:	80 fa 2e             	cmp    dl,0x2e
c0011266:	75 ec                	jne    c0011254 <SysOpen(regs*)+0x5c>
c0011268:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001126c:	83 ec 08             	sub    esp,0x8
c001126f:	68 b9 e8 01 c0       	push   0xc001e8b9
c0011274:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011277:	50                   	push   eax
c0011278:	e8 31 ff ff ff       	call   c00111ae <string_ends_with(char const*, char const*)>
c001127d:	83 c4 10             	add    esp,0x10
c0011280:	85 c0                	test   eax,eax
c0011282:	74 1d                	je     c00112a1 <SysOpen(regs*)+0xa9>
c0011284:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011287:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001128d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011294:	81 c4 04 01 00 00    	add    esp,0x104
c001129a:	31 c0                	xor    eax,eax
c001129c:	31 d2                	xor    edx,edx
c001129e:	5b                   	pop    ebx
c001129f:	5e                   	pop    esi
c00112a0:	c3                   	ret    
c00112a1:	83 ec 08             	sub    esp,0x8
c00112a4:	68 be e8 01 c0       	push   0xc001e8be
c00112a9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112ac:	50                   	push   eax
c00112ad:	e8 fc fe ff ff       	call   c00111ae <string_ends_with(char const*, char const*)>
c00112b2:	83 c4 10             	add    esp,0x10
c00112b5:	85 c0                	test   eax,eax
c00112b7:	75 cb                	jne    c0011284 <SysOpen(regs*)+0x8c>
c00112b9:	83 ec 08             	sub    esp,0x8
c00112bc:	68 ba e8 01 c0       	push   0xc001e8ba
c00112c1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112c4:	50                   	push   eax
c00112c5:	e8 16 f4 fe ff       	call   c00006e0 <strcmp>
c00112ca:	83 c4 10             	add    esp,0x10
c00112cd:	85 c0                	test   eax,eax
c00112cf:	74 b3                	je     c0011284 <SysOpen(regs*)+0x8c>
c00112d1:	83 ec 08             	sub    esp,0x8
c00112d4:	68 b9 e8 01 c0       	push   0xc001e8b9
c00112d9:	56                   	push   esi
c00112da:	e8 cf fe ff ff       	call   c00111ae <string_ends_with(char const*, char const*)>
c00112df:	83 c4 10             	add    esp,0x10
c00112e2:	85 c0                	test   eax,eax
c00112e4:	75 9e                	jne    c0011284 <SysOpen(regs*)+0x8c>
c00112e6:	83 ec 08             	sub    esp,0x8
c00112e9:	68 c3 e8 01 c0       	push   0xc001e8c3
c00112ee:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112f1:	50                   	push   eax
c00112f2:	e8 b7 fe ff ff       	call   c00111ae <string_ends_with(char const*, char const*)>
c00112f7:	83 c4 10             	add    esp,0x10
c00112fa:	85 c0                	test   eax,eax
c00112fc:	0f 85 ef 00 00 00    	jne    c00113f1 <SysOpen(regs*)+0x1f9>
c0011302:	83 ec 08             	sub    esp,0x8
c0011305:	68 c8 e8 01 c0       	push   0xc001e8c8
c001130a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001130d:	50                   	push   eax
c001130e:	e8 9b fe ff ff       	call   c00111ae <string_ends_with(char const*, char const*)>
c0011313:	83 c4 10             	add    esp,0x10
c0011316:	85 c0                	test   eax,eax
c0011318:	0f 85 d3 00 00 00    	jne    c00113f1 <SysOpen(regs*)+0x1f9>
c001131e:	83 ec 08             	sub    esp,0x8
c0011321:	68 c4 e8 01 c0       	push   0xc001e8c4
c0011326:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011329:	51                   	push   ecx
c001132a:	e8 b1 f3 fe ff       	call   c00006e0 <strcmp>
c001132f:	83 c4 10             	add    esp,0x10
c0011332:	85 c0                	test   eax,eax
c0011334:	0f 84 b7 00 00 00    	je     c00113f1 <SysOpen(regs*)+0x1f9>
c001133a:	83 ec 08             	sub    esp,0x8
c001133d:	68 c3 e8 01 c0       	push   0xc001e8c3
c0011342:	56                   	push   esi
c0011343:	e8 66 fe ff ff       	call   c00111ae <string_ends_with(char const*, char const*)>
c0011348:	83 c4 10             	add    esp,0x10
c001134b:	85 c0                	test   eax,eax
c001134d:	0f 85 9e 00 00 00    	jne    c00113f1 <SysOpen(regs*)+0x1f9>
c0011353:	83 ec 0c             	sub    esp,0xc
c0011356:	68 14 01 00 00       	push   0x114
c001135b:	e8 59 64 ff ff       	call   c00077b9 <malloc>
c0011360:	83 c4 0c             	add    esp,0xc
c0011363:	89 c6                	mov    esi,eax
c0011365:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001136a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001136d:	50                   	push   eax
c001136e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011371:	52                   	push   edx
c0011372:	56                   	push   esi
c0011373:	e8 2a 97 ff ff       	call   c000aaa2 <File::File(char const*, Process*)>
c0011378:	83 c4 10             	add    esp,0x10
c001137b:	85 f6                	test   esi,esi
c001137d:	74 5f                	je     c00113de <SysOpen(regs*)+0x1e6>
c001137f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011382:	89 d0                	mov    eax,edx
c0011384:	25 ff 00 00 00       	and    eax,0xff
c0011389:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001138c:	89 d0                	mov    eax,edx
c001138e:	83 e0 01             	and    eax,0x1
c0011391:	f6 c2 02             	test   dl,0x2
c0011394:	74 03                	je     c0011399 <SysOpen(regs*)+0x1a1>
c0011396:	83 c8 02             	or     eax,0x2
c0011399:	f6 c2 04             	test   dl,0x4
c001139c:	74 03                	je     c00113a1 <SysOpen(regs*)+0x1a9>
c001139e:	83 c8 04             	or     eax,0x4
c00113a1:	f6 c2 08             	test   dl,0x8
c00113a4:	74 03                	je     c00113a9 <SysOpen(regs*)+0x1b1>
c00113a6:	83 c8 0a             	or     eax,0xa
c00113a9:	83 e2 10             	and    edx,0x10
c00113ac:	74 03                	je     c00113b1 <SysOpen(regs*)+0x1b9>
c00113ae:	83 c8 12             	or     eax,0x12
c00113b1:	83 ec 08             	sub    esp,0x8
c00113b4:	50                   	push   eax
c00113b5:	56                   	push   esi
c00113b6:	e8 a7 97 ff ff       	call   c000ab62 <File::open(FileOpenMode)>
c00113bb:	83 c4 10             	add    esp,0x10
c00113be:	85 c0                	test   eax,eax
c00113c0:	75 1c                	jne    c00113de <SysOpen(regs*)+0x1e6>
c00113c2:	83 ec 0c             	sub    esp,0xc
c00113c5:	56                   	push   esi
c00113c6:	e8 6f 7a ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c00113cb:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00113ce:	83 c4 10             	add    esp,0x10
c00113d1:	89 02                	mov    DWORD PTR [edx],eax
c00113d3:	c1 f8 1f             	sar    eax,0x1f
c00113d6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00113d9:	e9 b6 fe ff ff       	jmp    c0011294 <SysOpen(regs*)+0x9c>
c00113de:	81 c4 04 01 00 00    	add    esp,0x104
c00113e4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113e9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113ee:	5b                   	pop    ebx
c00113ef:	5e                   	pop    esi
c00113f0:	c3                   	ret    
c00113f1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00113f4:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00113fa:	e9 8e fe ff ff       	jmp    c001128d <SysOpen(regs*)+0x95>

c00113ff <KeSystemCall(regs*, void*)>:
c00113ff:	53                   	push   ebx
c0011400:	83 ec 10             	sub    esp,0x10
c0011403:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011407:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001140a:	68 cd e8 01 c0       	push   0xc001e8cd
c001140f:	e8 19 91 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0011414:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011417:	83 c4 10             	add    esp,0x10
c001141a:	83 f8 32             	cmp    eax,0x32
c001141d:	77 16                	ja     c0011435 <KeSystemCall(regs*, void*)+0x36>
c001141f:	8b 14 85 60 fa 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe05a0]
c0011426:	85 d2                	test   edx,edx
c0011428:	74 0b                	je     c0011435 <KeSystemCall(regs*, void*)+0x36>
c001142a:	83 ec 0c             	sub    esp,0xc
c001142d:	53                   	push   ebx
c001142e:	ff d2                	call   edx
c0011430:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011433:	eb 0d                	jmp    c0011442 <KeSystemCall(regs*, void*)+0x43>
c0011435:	52                   	push   edx
c0011436:	52                   	push   edx
c0011437:	50                   	push   eax
c0011438:	68 dd e8 01 c0       	push   0xc001e8dd
c001143d:	e8 eb 90 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0011442:	83 c4 10             	add    esp,0x10
c0011445:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001144a:	31 d2                	xor    edx,edx
c001144c:	83 c4 08             	add    esp,0x8
c001144f:	5b                   	pop    ebx
c0011450:	c3                   	ret    

c0011451 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0011451:	55                   	push   ebp
c0011452:	57                   	push   edi
c0011453:	56                   	push   esi
c0011454:	53                   	push   ebx
c0011455:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001145b:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0011462:	8a 1e                	mov    bl,BYTE PTR [esi]
c0011464:	8d 6e 01             	lea    ebp,[esi+0x1]
c0011467:	80 fb 40             	cmp    bl,0x40
c001146a:	75 1b                	jne    c0011487 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001146c:	8a 16                	mov    dl,BYTE PTR [esi]
c001146e:	84 d2                	test   dl,dl
c0011470:	0f 84 f1 00 00 00    	je     c0011567 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011476:	8d 46 01             	lea    eax,[esi+0x1]
c0011479:	80 fa 3a             	cmp    dl,0x3a
c001147c:	74 04                	je     c0011482 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001147e:	89 c6                	mov    esi,eax
c0011480:	eb ea                	jmp    c001146c <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0011482:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011485:	89 c6                	mov    esi,eax
c0011487:	50                   	push   eax
c0011488:	6a 40                	push   0x40
c001148a:	6a 00                	push   0x0
c001148c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0011490:	50                   	push   eax
c0011491:	e8 3a f0 fe ff       	call   c00004d0 <memset>
c0011496:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001149d:	31 c0                	xor    eax,eax
c001149f:	83 c4 10             	add    esp,0x10
c00114a2:	8a 0f                	mov    cl,BYTE PTR [edi]
c00114a4:	84 c9                	test   cl,cl
c00114a6:	0f 84 bb 00 00 00    	je     c0011567 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00114ac:	3d c7 00 00 00       	cmp    eax,0xc7
c00114b1:	0f 8f b0 00 00 00    	jg     c0011567 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00114b7:	80 f9 0a             	cmp    cl,0xa
c00114ba:	0f 85 98 00 00 00    	jne    c0011558 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00114c0:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00114c5:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00114c9:	a8 df                	test   al,0xdf
c00114cb:	0f 94 c1             	sete   cl
c00114ce:	3c 23                	cmp    al,0x23
c00114d0:	0f 94 c2             	sete   dl
c00114d3:	08 d1                	or     cl,dl
c00114d5:	75 4a                	jne    c0011521 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00114d7:	8d 50 f7             	lea    edx,[eax-0x9]
c00114da:	80 fa 01             	cmp    dl,0x1
c00114dd:	76 42                	jbe    c0011521 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00114df:	3c 5b                	cmp    al,0x5b
c00114e1:	75 42                	jne    c0011525 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00114e3:	80 fb 40             	cmp    bl,0x40
c00114e6:	75 39                	jne    c0011521 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00114e8:	83 ec 0c             	sub    esp,0xc
c00114eb:	8d 54 24 65          	lea    edx,[esp+0x65]
c00114ef:	52                   	push   edx
c00114f0:	e8 4b f0 fe ff       	call   c0000540 <strlen>
c00114f5:	83 c4 10             	add    esp,0x10
c00114f8:	83 f8 3f             	cmp    eax,0x3f
c00114fb:	77 6a                	ja     c0011567 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00114fd:	50                   	push   eax
c00114fe:	50                   	push   eax
c00114ff:	8d 54 24 61          	lea    edx,[esp+0x61]
c0011503:	52                   	push   edx
c0011504:	8d 54 24 24          	lea    edx,[esp+0x24]
c0011508:	52                   	push   edx
c0011509:	e8 f2 f0 fe ff       	call   c0000600 <strcpy>
c001150e:	58                   	pop    eax
c001150f:	8d 54 24 24          	lea    edx,[esp+0x24]
c0011513:	52                   	push   edx
c0011514:	e8 27 f0 fe ff       	call   c0000540 <strlen>
c0011519:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001151e:	83 c4 10             	add    esp,0x10
c0011521:	31 d2                	xor    edx,edx
c0011523:	eb 3a                	jmp    c001155f <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0011525:	80 fb 40             	cmp    bl,0x40
c0011528:	74 06                	je     c0011530 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001152a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001152e:	eb 20                	jmp    c0011550 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0011530:	50                   	push   eax
c0011531:	50                   	push   eax
c0011532:	55                   	push   ebp
c0011533:	8d 44 24 24          	lea    eax,[esp+0x24]
c0011537:	50                   	push   eax
c0011538:	e8 a3 f1 fe ff       	call   c00006e0 <strcmp>
c001153d:	83 c4 10             	add    esp,0x10
c0011540:	85 c0                	test   eax,eax
c0011542:	75 dd                	jne    c0011521 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011544:	eb e4                	jmp    c001152a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0011546:	8d 50 01             	lea    edx,[eax+0x1]
c0011549:	80 f9 3d             	cmp    cl,0x3d
c001154c:	74 1d                	je     c001156b <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001154e:	89 d0                	mov    eax,edx
c0011550:	8a 08                	mov    cl,BYTE PTR [eax]
c0011552:	84 c9                	test   cl,cl
c0011554:	75 f0                	jne    c0011546 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0011556:	eb 0f                	jmp    c0011567 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011558:	8d 50 01             	lea    edx,[eax+0x1]
c001155b:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001155f:	47                   	inc    edi
c0011560:	89 d0                	mov    eax,edx
c0011562:	e9 3b ff ff ff       	jmp    c00114a2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0011567:	31 c0                	xor    eax,eax
c0011569:	eb 33                	jmp    c001159e <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001156b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001156f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011572:	50                   	push   eax
c0011573:	50                   	push   eax
c0011574:	8d 44 24 60          	lea    eax,[esp+0x60]
c0011578:	50                   	push   eax
c0011579:	56                   	push   esi
c001157a:	e8 61 f1 fe ff       	call   c00006e0 <strcmp>
c001157f:	83 c4 10             	add    esp,0x10
c0011582:	85 c0                	test   eax,eax
c0011584:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011588:	75 97                	jne    c0011521 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001158a:	51                   	push   ecx
c001158b:	51                   	push   ecx
c001158c:	52                   	push   edx
c001158d:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0011594:	e8 67 f0 fe ff       	call   c0000600 <strcpy>
c0011599:	83 c4 10             	add    esp,0x10
c001159c:	b0 01                	mov    al,0x1
c001159e:	81 c4 2c 01 00 00    	add    esp,0x12c
c00115a4:	5b                   	pop    ebx
c00115a5:	5e                   	pop    esi
c00115a6:	5f                   	pop    edi
c00115a7:	5d                   	pop    ebp
c00115a8:	c3                   	ret    

c00115a9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00115a9:	57                   	push   edi
c00115aa:	56                   	push   esi
c00115ab:	53                   	push   ebx
c00115ac:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00115b2:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00115b9:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00115c0:	53                   	push   ebx
c00115c1:	e8 7a ef fe ff       	call   c0000540 <strlen>
c00115c6:	89 34 24             	mov    DWORD PTR [esp],esi
c00115c9:	89 c7                	mov    edi,eax
c00115cb:	e8 70 ef fe ff       	call   c0000540 <strlen>
c00115d0:	83 c4 10             	add    esp,0x10
c00115d3:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00115d7:	3d ff 00 00 00       	cmp    eax,0xff
c00115dc:	0f 87 d3 00 00 00    	ja     c00116b5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00115e2:	57                   	push   edi
c00115e3:	57                   	push   edi
c00115e4:	56                   	push   esi
c00115e5:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00115e9:	56                   	push   esi
c00115ea:	e8 11 f0 fe ff       	call   c0000600 <strcpy>
c00115ef:	58                   	pop    eax
c00115f0:	5a                   	pop    edx
c00115f1:	68 9a eb 01 c0       	push   0xc001eb9a
c00115f6:	56                   	push   esi
c00115f7:	e8 c4 f1 fe ff       	call   c00007c0 <strcat>
c00115fc:	59                   	pop    ecx
c00115fd:	5f                   	pop    edi
c00115fe:	53                   	push   ebx
c00115ff:	56                   	push   esi
c0011600:	e8 bb f1 fe ff       	call   c00007c0 <strcat>
c0011605:	58                   	pop    eax
c0011606:	5a                   	pop    edx
c0011607:	68 f1 e8 01 c0       	push   0xc001e8f1
c001160c:	56                   	push   esi
c001160d:	e8 ae f1 fe ff       	call   c00007c0 <strcat>
c0011612:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011619:	e8 9b 61 ff ff       	call   c00077b9 <malloc>
c001161e:	83 c4 0c             	add    esp,0xc
c0011621:	89 c3                	mov    ebx,eax
c0011623:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0011629:	56                   	push   esi
c001162a:	50                   	push   eax
c001162b:	e8 72 94 ff ff       	call   c000aaa2 <File::File(char const*, Process*)>
c0011630:	83 c4 10             	add    esp,0x10
c0011633:	85 db                	test   ebx,ebx
c0011635:	74 7e                	je     c00116b5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0011637:	51                   	push   ecx
c0011638:	51                   	push   ecx
c0011639:	6a 01                	push   0x1
c001163b:	53                   	push   ebx
c001163c:	e8 21 95 ff ff       	call   c000ab62 <File::open(FileOpenMode)>
c0011641:	83 c4 10             	add    esp,0x10
c0011644:	85 c0                	test   eax,eax
c0011646:	74 08                	je     c0011650 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0011648:	83 ec 0c             	sub    esp,0xc
c001164b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001164d:	53                   	push   ebx
c001164e:	eb 5f                	jmp    c00116af <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0011650:	52                   	push   edx
c0011651:	8d 44 24 17          	lea    eax,[esp+0x17]
c0011655:	50                   	push   eax
c0011656:	8d 44 24 20          	lea    eax,[esp+0x20]
c001165a:	50                   	push   eax
c001165b:	53                   	push   ebx
c001165c:	e8 ad 97 ff ff       	call   c000ae0e <File::stat(unsigned long long*, bool*)>
c0011661:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011665:	83 c4 10             	add    esp,0x10
c0011668:	89 c1                	mov    ecx,eax
c001166a:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001166e:	74 31                	je     c00116a1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0011670:	83 ec 0c             	sub    esp,0xc
c0011673:	50                   	push   eax
c0011674:	e8 40 61 ff ff       	call   c00077b9 <malloc>
c0011679:	89 c6                	mov    esi,eax
c001167b:	58                   	pop    eax
c001167c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001167e:	8d 54 24 20          	lea    edx,[esp+0x20]
c0011682:	52                   	push   edx
c0011683:	56                   	push   esi
c0011684:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011688:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001168c:	53                   	push   ebx
c001168d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011690:	83 c4 20             	add    esp,0x20
c0011693:	85 c0                	test   eax,eax
c0011695:	75 0a                	jne    c00116a1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0011697:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001169b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001169f:	74 18                	je     c00116b9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00116a1:	83 ec 0c             	sub    esp,0xc
c00116a4:	53                   	push   ebx
c00116a5:	e8 16 95 ff ff       	call   c000abc0 <File::close()>
c00116aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116af:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116b2:	83 c4 10             	add    esp,0x10
c00116b5:	31 c0                	xor    eax,eax
c00116b7:	eb 3b                	jmp    c00116f4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00116b9:	83 ec 0c             	sub    esp,0xc
c00116bc:	53                   	push   ebx
c00116bd:	e8 fe 94 ff ff       	call   c000abc0 <File::close()>
c00116c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116c7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116ca:	83 c4 0c             	add    esp,0xc
c00116cd:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00116d4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00116db:	56                   	push   esi
c00116dc:	e8 70 fd ff ff       	call   c0011451 <Reg::findLineFromLoadedData(char*, char*, char*)>
c00116e1:	89 34 24             	mov    DWORD PTR [esp],esi
c00116e4:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00116e8:	e8 dc 60 ff ff       	call   c00077c9 <free>
c00116ed:	83 c4 10             	add    esp,0x10
c00116f0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00116f4:	81 c4 20 01 00 00    	add    esp,0x120
c00116fa:	5b                   	pop    ebx
c00116fb:	5e                   	pop    esi
c00116fc:	5f                   	pop    edi
c00116fd:	c3                   	ret    

c00116fe <Reg::getLine(char*, char*, char*)>:
c00116fe:	57                   	push   edi
c00116ff:	56                   	push   esi
c0011700:	53                   	push   ebx
c0011701:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011705:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0011709:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001170d:	57                   	push   edi
c001170e:	56                   	push   esi
c001170f:	53                   	push   ebx
c0011710:	68 f6 e8 01 c0       	push   0xc001e8f6
c0011715:	e8 8f fe ff ff       	call   c00115a9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001171a:	83 c4 10             	add    esp,0x10
c001171d:	84 c0                	test   al,al
c001171f:	75 10                	jne    c0011731 <Reg::getLine(char*, char*, char*)+0x33>
c0011721:	57                   	push   edi
c0011722:	56                   	push   esi
c0011723:	53                   	push   ebx
c0011724:	68 1b e9 01 c0       	push   0xc001e91b
c0011729:	e8 7b fe ff ff       	call   c00115a9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001172e:	83 c4 10             	add    esp,0x10
c0011731:	5b                   	pop    ebx
c0011732:	5e                   	pop    esi
c0011733:	5f                   	pop    edi
c0011734:	c3                   	ret    

c0011735 <Reg::readInt(char*, char*, int*)>:
c0011735:	55                   	push   ebp
c0011736:	57                   	push   edi
c0011737:	56                   	push   esi
c0011738:	53                   	push   ebx
c0011739:	81 ec f0 00 00 00    	sub    esp,0xf0
c001173f:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0011743:	57                   	push   edi
c0011744:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001174b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0011752:	e8 a7 ff ff ff       	call   c00116fe <Reg::getLine(char*, char*, char*)>
c0011757:	83 c4 10             	add    esp,0x10
c001175a:	84 c0                	test   al,al
c001175c:	0f 84 b3 00 00 00    	je     c0011815 <Reg::readInt(char*, char*, int*)+0xe0>
c0011762:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0011766:	80 fa 2b             	cmp    dl,0x2b
c0011769:	74 0c                	je     c0011777 <Reg::readInt(char*, char*, int*)+0x42>
c001176b:	80 fa 2d             	cmp    dl,0x2d
c001176e:	75 0e                	jne    c001177e <Reg::readInt(char*, char*, int*)+0x49>
c0011770:	ba 01 00 00 00       	mov    edx,0x1
c0011775:	eb 0b                	jmp    c0011782 <Reg::readInt(char*, char*, int*)+0x4d>
c0011777:	ba 01 00 00 00       	mov    edx,0x1
c001177c:	eb 02                	jmp    c0011780 <Reg::readInt(char*, char*, int*)+0x4b>
c001177e:	31 d2                	xor    edx,edx
c0011780:	31 c0                	xor    eax,eax
c0011782:	be 0a 00 00 00       	mov    esi,0xa
c0011787:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001178c:	75 20                	jne    c00117ae <Reg::readInt(char*, char*, int*)+0x79>
c001178e:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0011792:	80 f9 78             	cmp    cl,0x78
c0011795:	75 0a                	jne    c00117a1 <Reg::readInt(char*, char*, int*)+0x6c>
c0011797:	83 c2 02             	add    edx,0x2
c001179a:	be 10 00 00 00       	mov    esi,0x10
c001179f:	eb 0d                	jmp    c00117ae <Reg::readInt(char*, char*, int*)+0x79>
c00117a1:	80 f9 62             	cmp    cl,0x62
c00117a4:	75 08                	jne    c00117ae <Reg::readInt(char*, char*, int*)+0x79>
c00117a6:	83 c2 02             	add    edx,0x2
c00117a9:	be 02 00 00 00       	mov    esi,0x2
c00117ae:	01 d7                	add    edi,edx
c00117b0:	31 d2                	xor    edx,edx
c00117b2:	8a 1f                	mov    bl,BYTE PTR [edi]
c00117b4:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00117b8:	80 fb 0d             	cmp    bl,0xd
c00117bb:	0f 94 c3             	sete   bl
c00117be:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00117c3:	0f 94 c1             	sete   cl
c00117c6:	08 cb                	or     bl,cl
c00117c8:	75 3a                	jne    c0011804 <Reg::readInt(char*, char*, int*)+0xcf>
c00117ca:	0f af d6             	imul   edx,esi
c00117cd:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00117d2:	83 fe 10             	cmp    esi,0x10
c00117d5:	75 26                	jne    c00117fd <Reg::readInt(char*, char*, int*)+0xc8>
c00117d7:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00117db:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00117de:	89 e9                	mov    ecx,ebp
c00117e0:	80 f9 05             	cmp    cl,0x5
c00117e3:	77 06                	ja     c00117eb <Reg::readInt(char*, char*, int*)+0xb6>
c00117e5:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00117e9:	eb 16                	jmp    c0011801 <Reg::readInt(char*, char*, int*)+0xcc>
c00117eb:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00117ef:	83 e9 61             	sub    ecx,0x61
c00117f2:	80 f9 05             	cmp    cl,0x5
c00117f5:	77 06                	ja     c00117fd <Reg::readInt(char*, char*, int*)+0xc8>
c00117f7:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00117fb:	eb 04                	jmp    c0011801 <Reg::readInt(char*, char*, int*)+0xcc>
c00117fd:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0011801:	47                   	inc    edi
c0011802:	eb ae                	jmp    c00117b2 <Reg::readInt(char*, char*, int*)+0x7d>
c0011804:	84 c0                	test   al,al
c0011806:	74 02                	je     c001180a <Reg::readInt(char*, char*, int*)+0xd5>
c0011808:	f7 da                	neg    edx
c001180a:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0011811:	89 10                	mov    DWORD PTR [eax],edx
c0011813:	88 d8                	mov    al,bl
c0011815:	81 c4 ec 00 00 00    	add    esp,0xec
c001181b:	5b                   	pop    ebx
c001181c:	5e                   	pop    esi
c001181d:	5f                   	pop    edi
c001181e:	5d                   	pop    ebp
c001181f:	c3                   	ret    

c0011820 <Reg::readString(char*, char*, char*, int)>:
c0011820:	57                   	push   edi
c0011821:	56                   	push   esi
c0011822:	53                   	push   ebx
c0011823:	81 ec d4 00 00 00    	sub    esp,0xd4
c0011829:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0011830:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0011834:	57                   	push   edi
c0011835:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001183c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0011843:	e8 b6 fe ff ff       	call   c00116fe <Reg::getLine(char*, char*, char*)>
c0011848:	83 c4 10             	add    esp,0x10
c001184b:	89 c6                	mov    esi,eax
c001184d:	84 c0                	test   al,al
c001184f:	74 44                	je     c0011895 <Reg::readString(char*, char*, char*, int)+0x75>
c0011851:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0011858:	31 c0                	xor    eax,eax
c001185a:	4a                   	dec    edx
c001185b:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001185e:	84 c9                	test   cl,cl
c0011860:	74 0f                	je     c0011871 <Reg::readString(char*, char*, char*, int)+0x51>
c0011862:	39 c2                	cmp    edx,eax
c0011864:	7e 0b                	jle    c0011871 <Reg::readString(char*, char*, char*, int)+0x51>
c0011866:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0011869:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001186e:	40                   	inc    eax
c001186f:	eb ea                	jmp    c001185b <Reg::readString(char*, char*, char*, int)+0x3b>
c0011871:	83 ec 0c             	sub    esp,0xc
c0011874:	53                   	push   ebx
c0011875:	e8 c6 ec fe ff       	call   c0000540 <strlen>
c001187a:	83 c4 10             	add    esp,0x10
c001187d:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0011882:	75 11                	jne    c0011895 <Reg::readString(char*, char*, char*, int)+0x75>
c0011884:	83 ec 0c             	sub    esp,0xc
c0011887:	53                   	push   ebx
c0011888:	e8 b3 ec fe ff       	call   c0000540 <strlen>
c001188d:	83 c4 10             	add    esp,0x10
c0011890:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0011895:	81 c4 d0 00 00 00    	add    esp,0xd0
c001189b:	89 f0                	mov    eax,esi
c001189d:	5b                   	pop    ebx
c001189e:	5e                   	pop    esi
c001189f:	5f                   	pop    edi
c00118a0:	c3                   	ret    

c00118a1 <Reg::readBool(char*, char*, bool*)>:
c00118a1:	83 ec 20             	sub    esp,0x20
c00118a4:	8d 44 24 10          	lea    eax,[esp+0x10]
c00118a8:	50                   	push   eax
c00118a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118b1:	e8 7f fe ff ff       	call   c0011735 <Reg::readInt(char*, char*, int*)>
c00118b6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00118bb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00118bf:	0f 95 02             	setne  BYTE PTR [edx]
c00118c2:	83 c4 2c             	add    esp,0x2c
c00118c5:	c3                   	ret    

c00118c6 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00118c6:	53                   	push   ebx
c00118c7:	83 ec 1c             	sub    esp,0x1c
c00118ca:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00118ce:	8d 44 24 13          	lea    eax,[esp+0x13]
c00118d2:	50                   	push   eax
c00118d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118db:	e8 c1 ff ff ff       	call   c00118a1 <Reg::readBool(char*, char*, bool*)>
c00118e0:	83 c4 10             	add    esp,0x10
c00118e3:	84 c0                	test   al,al
c00118e5:	74 04                	je     c00118eb <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00118e7:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00118eb:	88 d8                	mov    al,bl
c00118ed:	83 c4 18             	add    esp,0x18
c00118f0:	5b                   	pop    ebx
c00118f1:	c3                   	ret    

c00118f2 <Reg::readIntWithDefault(char*, char*, int)>:
c00118f2:	53                   	push   ebx
c00118f3:	83 ec 1c             	sub    esp,0x1c
c00118f6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00118fa:	8d 44 24 10          	lea    eax,[esp+0x10]
c00118fe:	50                   	push   eax
c00118ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011903:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011907:	e8 29 fe ff ff       	call   c0011735 <Reg::readInt(char*, char*, int*)>
c001190c:	83 c4 10             	add    esp,0x10
c001190f:	84 c0                	test   al,al
c0011911:	74 04                	je     c0011917 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0011913:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011917:	89 d8                	mov    eax,ebx
c0011919:	83 c4 18             	add    esp,0x18
c001191c:	5b                   	pop    ebx
c001191d:	c3                   	ret    

c001191e <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001191e:	57                   	push   edi
c001191f:	56                   	push   esi
c0011920:	56                   	push   esi
c0011921:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011925:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011929:	56                   	push   esi
c001192a:	57                   	push   edi
c001192b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001192f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011933:	e8 e8 fe ff ff       	call   c0011820 <Reg::readString(char*, char*, char*, int)>
c0011938:	83 c4 10             	add    esp,0x10
c001193b:	84 c0                	test   al,al
c001193d:	75 1a                	jne    c0011959 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001193f:	51                   	push   ecx
c0011940:	56                   	push   esi
c0011941:	6a 00                	push   0x0
c0011943:	57                   	push   edi
c0011944:	e8 87 eb fe ff       	call   c00004d0 <memset>
c0011949:	8d 4e ff             	lea    ecx,[esi-0x1]
c001194c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011950:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011952:	83 c4 10             	add    esp,0x10
c0011955:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011959:	89 f8                	mov    eax,edi
c001195b:	5a                   	pop    edx
c001195c:	5e                   	pop    esi
c001195d:	5f                   	pop    edi
c001195e:	c3                   	ret    

c001195f <SysEject(regs*)>:
c001195f:	83 ec 0c             	sub    esp,0xc
c0011962:	83 ca ff             	or     edx,0xffffffff
c0011965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011969:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001196c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011971:	83 e9 41             	sub    ecx,0x41
c0011974:	83 f9 19             	cmp    ecx,0x19
c0011977:	77 18                	ja     c0011991 <SysEject(regs*)+0x32>
c0011979:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c0011980:	85 c9                	test   ecx,ecx
c0011982:	74 0d                	je     c0011991 <SysEject(regs*)+0x32>
c0011984:	83 ec 0c             	sub    esp,0xc
c0011987:	51                   	push   ecx
c0011988:	e8 5d b2 ff ff       	call   c000cbea <LogicalDisk::eject()>
c001198d:	83 c4 10             	add    esp,0x10
c0011990:	99                   	cdq    
c0011991:	83 c4 0c             	add    esp,0xc
c0011994:	c3                   	ret    

c0011995 <SysExit(regs*)>:
c0011995:	83 ec 18             	sub    esp,0x18
c0011998:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001199c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001199f:	e8 24 27 00 00       	call   c00140c8 <terminateTask(int)>
c00119a4:	83 c8 ff             	or     eax,0xffffffff
c00119a7:	83 c4 1c             	add    esp,0x1c
c00119aa:	89 c2                	mov    edx,eax
c00119ac:	c3                   	ret    

c00119ad <SysGetCwd(regs*)>:
c00119ad:	83 ec 10             	sub    esp,0x10
c00119b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00119b4:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00119b7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00119ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119bf:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00119c2:	e8 dd 8e ff ff       	call   c000a8a4 <Fs::getcwd(Process*, char*, int)>
c00119c7:	83 c4 1c             	add    esp,0x1c
c00119ca:	99                   	cdq    
c00119cb:	c3                   	ret    

c00119cc <SysGetPID(regs*)>:
c00119cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119d1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00119d6:	99                   	cdq    
c00119d7:	c3                   	ret    

c00119d8 <SysGetRAMData(regs*)>:
c00119d8:	8b 0d e8 1e 02 c0    	mov    ecx,DWORD PTR ds:0xc0021ee8
c00119de:	69 05 e4 1e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0021ee4,0xc8
c00119e8:	99                   	cdq    
c00119e9:	f7 f9                	idiv   ecx
c00119eb:	c1 e0 18             	shl    eax,0x18
c00119ee:	09 c8                	or     eax,ecx
c00119f0:	99                   	cdq    
c00119f1:	c3                   	ret    

c00119f2 <SysGetVGAPtr(regs*)>:
c00119f2:	55                   	push   ebp
c00119f3:	57                   	push   edi
c00119f4:	56                   	push   esi
c00119f5:	53                   	push   ebx
c00119f6:	83 ec 18             	sub    esp,0x18
c00119f9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00119fd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0011a00:	e8 c3 21 00 00       	call   c0013bc8 <Thr::processFromPID(int)>
c0011a05:	83 c4 10             	add    esp,0x10
c0011a08:	89 c1                	mov    ecx,eax
c0011a0a:	b8 01 00 00 00       	mov    eax,0x1
c0011a0f:	85 c9                	test   ecx,ecx
c0011a11:	74 57                	je     c0011a6a <SysGetVGAPtr(regs*)+0x78>
c0011a13:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0011a19:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0011a1d:	74 0c                	je     c0011a2b <SysGetVGAPtr(regs*)+0x39>
c0011a1f:	83 ec 0c             	sub    esp,0xc
c0011a22:	55                   	push   ebp
c0011a23:	e8 cf 69 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0011a28:	83 c4 10             	add    esp,0x10
c0011a2b:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0011a2e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011a31:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0011a36:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011a38:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0011a3b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a3e:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0011a44:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a47:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0011a4a:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0011a50:	50                   	push   eax
c0011a51:	50                   	push   eax
c0011a52:	68 36 e9 01 c0       	push   0xc001e936
c0011a57:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a5a:	05 a8 0f 00 00       	add    eax,0xfa8
c0011a5f:	50                   	push   eax
c0011a60:	e8 9b eb fe ff       	call   c0000600 <strcpy>
c0011a65:	83 c4 10             	add    esp,0x10
c0011a68:	31 c0                	xor    eax,eax
c0011a6a:	83 c4 0c             	add    esp,0xc
c0011a6d:	31 d2                	xor    edx,edx
c0011a6f:	5b                   	pop    ebx
c0011a70:	5e                   	pop    esi
c0011a71:	5f                   	pop    edi
c0011a72:	5d                   	pop    ebp
c0011a73:	c3                   	ret    

c0011a74 <SysLoadDLL(regs*)>:
c0011a74:	56                   	push   esi
c0011a75:	53                   	push   ebx
c0011a76:	31 d2                	xor    edx,edx
c0011a78:	51                   	push   ecx
c0011a79:	b8 01 00 00 00       	mov    eax,0x1
c0011a7e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011a82:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0011a86:	0f 84 8c 00 00 00    	je     c0011b18 <SysLoadDLL(regs*)+0xa4>
c0011a8c:	83 ec 0c             	sub    esp,0xc
c0011a8f:	68 14 01 00 00       	push   0x114
c0011a94:	e8 20 5d ff ff       	call   c00077b9 <malloc>
c0011a99:	83 c4 0c             	add    esp,0xc
c0011a9c:	89 c3                	mov    ebx,eax
c0011a9e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011aa3:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011aa6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011aa9:	53                   	push   ebx
c0011aaa:	e8 f3 8f ff ff       	call   c000aaa2 <File::File(char const*, Process*)>
c0011aaf:	83 c4 10             	add    esp,0x10
c0011ab2:	31 d2                	xor    edx,edx
c0011ab4:	b8 02 00 00 00       	mov    eax,0x2
c0011ab9:	85 db                	test   ebx,ebx
c0011abb:	74 5b                	je     c0011b18 <SysLoadDLL(regs*)+0xa4>
c0011abd:	83 ec 0c             	sub    esp,0xc
c0011ac0:	53                   	push   ebx
c0011ac1:	e8 0a 93 ff ff       	call   c000add0 <File::exists()>
c0011ac6:	83 c4 10             	add    esp,0x10
c0011ac9:	84 c0                	test   al,al
c0011acb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011acd:	75 11                	jne    c0011ae0 <SysLoadDLL(regs*)+0x6c>
c0011acf:	83 ec 0c             	sub    esp,0xc
c0011ad2:	53                   	push   ebx
c0011ad3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ad6:	83 c4 10             	add    esp,0x10
c0011ad9:	b8 03 00 00 00       	mov    eax,0x3
c0011ade:	eb 36                	jmp    c0011b16 <SysLoadDLL(regs*)+0xa2>
c0011ae0:	83 ec 0c             	sub    esp,0xc
c0011ae3:	53                   	push   ebx
c0011ae4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ae7:	58                   	pop    eax
c0011ae8:	5a                   	pop    edx
c0011ae9:	6a 00                	push   0x0
c0011aeb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011aee:	e8 86 12 00 00       	call   c0012d79 <Thr::loadDLL(char const*, bool)>
c0011af3:	83 c4 10             	add    esp,0x10
c0011af6:	89 c1                	mov    ecx,eax
c0011af8:	31 d2                	xor    edx,edx
c0011afa:	b8 04 00 00 00       	mov    eax,0x4
c0011aff:	85 c9                	test   ecx,ecx
c0011b01:	74 15                	je     c0011b18 <SysLoadDLL(regs*)+0xa4>
c0011b03:	53                   	push   ebx
c0011b04:	53                   	push   ebx
c0011b05:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0011b0b:	51                   	push   ecx
c0011b0c:	e8 99 14 00 00       	call   c0012faa <Thr::executeDLL(unsigned long, void*)>
c0011b11:	83 c4 10             	add    esp,0x10
c0011b14:	31 c0                	xor    eax,eax
c0011b16:	31 d2                	xor    edx,edx
c0011b18:	59                   	pop    ecx
c0011b19:	5b                   	pop    ebx
c0011b1a:	5e                   	pop    esi
c0011b1b:	c3                   	ret    

c0011b1c <SysRead(regs*)>:
c0011b1c:	57                   	push   edi
c0011b1d:	56                   	push   esi
c0011b1e:	53                   	push   ebx
c0011b1f:	83 ec 10             	sub    esp,0x10
c0011b22:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011b26:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b29:	83 f8 02             	cmp    eax,0x2
c0011b2c:	77 10                	ja     c0011b3e <SysRead(regs*)+0x22>
c0011b2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b33:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b36:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011b3c:	eb 0e                	jmp    c0011b4c <SysRead(regs*)+0x30>
c0011b3e:	83 ec 0c             	sub    esp,0xc
c0011b41:	50                   	push   eax
c0011b42:	e8 e8 75 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0011b47:	83 c4 10             	add    esp,0x10
c0011b4a:	89 c1                	mov    ecx,eax
c0011b4c:	83 c8 ff             	or     eax,0xffffffff
c0011b4f:	85 c9                	test   ecx,ecx
c0011b51:	89 c2                	mov    edx,eax
c0011b53:	74 28                	je     c0011b7d <SysRead(regs*)+0x61>
c0011b55:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011b5d:	31 ff                	xor    edi,edi
c0011b5f:	83 ec 0c             	sub    esp,0xc
c0011b62:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011b64:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011b68:	52                   	push   edx
c0011b69:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011b6c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011b6f:	57                   	push   edi
c0011b70:	56                   	push   esi
c0011b71:	51                   	push   ecx
c0011b72:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011b75:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b79:	83 c4 20             	add    esp,0x20
c0011b7c:	99                   	cdq    
c0011b7d:	83 c4 10             	add    esp,0x10
c0011b80:	5b                   	pop    ebx
c0011b81:	5e                   	pop    esi
c0011b82:	5f                   	pop    edi
c0011b83:	c3                   	ret    

c0011b84 <SysRegisterSignal(regs*)>:
c0011b84:	83 ec 18             	sub    esp,0x18
c0011b87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011b8b:	6a 00                	push   0x0
c0011b8d:	6a 00                	push   0x0
c0011b8f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011b92:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011b95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b9a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b9d:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011ba3:	e8 bd e9 ff ff       	call   c0010565 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0011ba8:	83 c4 2c             	add    esp,0x2c
c0011bab:	99                   	cdq    
c0011bac:	c3                   	ret    

c0011bad <SysSbrk(regs*)>:
c0011bad:	56                   	push   esi
c0011bae:	53                   	push   ebx
c0011baf:	83 ec 0c             	sub    esp,0xc
c0011bb2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011bb6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011bb9:	68 40 e9 01 c0       	push   0xc001e940
c0011bbe:	e8 6a 89 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0011bc3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bc8:	8b 5b 20             	mov    ebx,DWORD PTR [ebx+0x20]
c0011bcb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bce:	83 c4 10             	add    esp,0x10
c0011bd1:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0011bd7:	85 db                	test   ebx,ebx
c0011bd9:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0011bdc:	74 02                	je     c0011be0 <SysSbrk(regs*)+0x33>
c0011bde:	79 06                	jns    c0011be6 <SysSbrk(regs*)+0x39>
c0011be0:	89 f0                	mov    eax,esi
c0011be2:	31 d2                	xor    edx,edx
c0011be4:	eb 2a                	jmp    c0011c10 <SysSbrk(regs*)+0x63>
c0011be6:	83 c8 ff             	or     eax,0xffffffff
c0011be9:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0011bef:	89 c2                	mov    edx,eax
c0011bf1:	77 1d                	ja     c0011c10 <SysSbrk(regs*)+0x63>
c0011bf3:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0011bf9:	50                   	push   eax
c0011bfa:	c1 ea 0c             	shr    edx,0xc
c0011bfd:	68 07 0c 00 00       	push   0xc07
c0011c02:	52                   	push   edx
c0011c03:	51                   	push   ecx
c0011c04:	e8 2f 7e ff ff       	call   c0009a38 <VAS::allocatePages(int, int)>
c0011c09:	89 f0                	mov    eax,esi
c0011c0b:	31 d2                	xor    edx,edx
c0011c0d:	83 c4 10             	add    esp,0x10
c0011c10:	59                   	pop    ecx
c0011c11:	5b                   	pop    ebx
c0011c12:	5e                   	pop    esi
c0011c13:	c3                   	ret    

c0011c14 <SysSetCwd(regs*)>:
c0011c14:	83 ec 14             	sub    esp,0x14
c0011c17:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011c1b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011c1e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c23:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011c26:	e8 44 92 ff ff       	call   c000ae6f <Fs::setcwd(Process*, char*)>
c0011c2b:	83 c4 1c             	add    esp,0x1c
c0011c2e:	99                   	cdq    
c0011c2f:	c3                   	ret    

c0011c30 <SysSetTime(regs*)>:
c0011c30:	55                   	push   ebp
c0011c31:	31 c9                	xor    ecx,ecx
c0011c33:	57                   	push   edi
c0011c34:	bd 0c 00 00 00       	mov    ebp,0xc
c0011c39:	56                   	push   esi
c0011c3a:	53                   	push   ebx
c0011c3b:	31 db                	xor    ebx,ebx
c0011c3d:	83 ec 10             	sub    esp,0x10
c0011c40:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011c44:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0011c47:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0011c4a:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0011c4d:	89 c2                	mov    edx,eax
c0011c4f:	66 81 ef 6c 07       	sub    di,0x76c
c0011c54:	83 e2 1f             	and    edx,0x1f
c0011c57:	c1 e7 10             	shl    edi,0x10
c0011c5a:	42                   	inc    edx
c0011c5b:	c1 e8 05             	shr    eax,0x5
c0011c5e:	88 d1                	mov    cl,dl
c0011c60:	31 d2                	xor    edx,edx
c0011c62:	f7 f5                	div    ebp
c0011c64:	89 dd                	mov    ebp,ebx
c0011c66:	88 d5                	mov    ch,dl
c0011c68:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0011c6e:	0f b7 c1             	movzx  eax,cx
c0011c71:	31 d2                	xor    edx,edx
c0011c73:	09 f8                	or     eax,edi
c0011c75:	bf 3c 00 00 00       	mov    edi,0x3c
c0011c7a:	89 c1                	mov    ecx,eax
c0011c7c:	89 f0                	mov    eax,esi
c0011c7e:	f7 f7                	div    edi
c0011c80:	c1 e2 10             	shl    edx,0x10
c0011c83:	09 d5                	or     ebp,edx
c0011c85:	31 d2                	xor    edx,edx
c0011c87:	89 eb                	mov    ebx,ebp
c0011c89:	f7 f7                	div    edi
c0011c8b:	bf 10 0e 00 00       	mov    edi,0xe10
c0011c90:	88 d7                	mov    bh,dl
c0011c92:	89 f0                	mov    eax,esi
c0011c94:	31 d2                	xor    edx,edx
c0011c96:	f7 f7                	div    edi
c0011c98:	bf 18 00 00 00       	mov    edi,0x18
c0011c9d:	31 d2                	xor    edx,edx
c0011c9f:	f7 f7                	div    edi
c0011ca1:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0011ca6:	88 d3                	mov    bl,dl
c0011ca8:	53                   	push   ebx
c0011ca9:	51                   	push   ecx
c0011caa:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0011cb0:	e8 cb 99 ff ff       	call   c000b680 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0011cb5:	83 c4 1c             	add    esp,0x1c
c0011cb8:	83 f0 01             	xor    eax,0x1
c0011cbb:	5b                   	pop    ebx
c0011cbc:	0f b6 c0             	movzx  eax,al
c0011cbf:	5e                   	pop    esi
c0011cc0:	31 d2                	xor    edx,edx
c0011cc2:	5f                   	pop    edi
c0011cc3:	5d                   	pop    ebp
c0011cc4:	c3                   	ret    

c0011cc5 <SysTimezone(regs*)>:
c0011cc5:	53                   	push   ebx
c0011cc6:	83 ec 08             	sub    esp,0x8
c0011cc9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011ccd:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0011cd1:	75 17                	jne    c0011cea <SysTimezone(regs*)+0x25>
c0011cd3:	83 ec 0c             	sub    esp,0xc
c0011cd6:	68 4c e9 01 c0       	push   0xc001e94c
c0011cdb:	e8 4d 88 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0011ce0:	83 c8 ff             	or     eax,0xffffffff
c0011ce3:	83 c4 10             	add    esp,0x10
c0011ce6:	89 c2                	mov    edx,eax
c0011ce8:	eb 20                	jmp    c0011d0a <SysTimezone(regs*)+0x45>
c0011cea:	83 ec 0c             	sub    esp,0xc
c0011ced:	68 61 e9 01 c0       	push   0xc001e961
c0011cf2:	e8 36 88 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0011cf7:	58                   	pop    eax
c0011cf8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011cfb:	e8 dc 96 ff ff       	call   c000b3dc <User::loadClockSettings(int)>
c0011d00:	83 c4 10             	add    esp,0x10
c0011d03:	b8 01 00 00 00       	mov    eax,0x1
c0011d08:	31 d2                	xor    edx,edx
c0011d0a:	83 c4 08             	add    esp,0x8
c0011d0d:	5b                   	pop    ebx
c0011d0e:	c3                   	ret    

c0011d0f <SysWrite(regs*)>:
c0011d0f:	57                   	push   edi
c0011d10:	56                   	push   esi
c0011d11:	53                   	push   ebx
c0011d12:	83 ec 10             	sub    esp,0x10
c0011d15:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d19:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d1c:	83 f8 02             	cmp    eax,0x2
c0011d1f:	77 10                	ja     c0011d31 <SysWrite(regs*)+0x22>
c0011d21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d26:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d29:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011d2f:	eb 0e                	jmp    c0011d3f <SysWrite(regs*)+0x30>
c0011d31:	83 ec 0c             	sub    esp,0xc
c0011d34:	50                   	push   eax
c0011d35:	e8 f5 73 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0011d3a:	83 c4 10             	add    esp,0x10
c0011d3d:	89 c1                	mov    ecx,eax
c0011d3f:	83 c8 ff             	or     eax,0xffffffff
c0011d42:	85 c9                	test   ecx,ecx
c0011d44:	89 c2                	mov    edx,eax
c0011d46:	74 28                	je     c0011d70 <SysWrite(regs*)+0x61>
c0011d48:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d50:	31 ff                	xor    edi,edi
c0011d52:	83 ec 0c             	sub    esp,0xc
c0011d55:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011d57:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011d5b:	52                   	push   edx
c0011d5c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011d5f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011d62:	57                   	push   edi
c0011d63:	56                   	push   esi
c0011d64:	51                   	push   ecx
c0011d65:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011d68:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d6c:	83 c4 20             	add    esp,0x20
c0011d6f:	99                   	cdq    
c0011d70:	83 c4 10             	add    esp,0x10
c0011d73:	5b                   	pop    ebx
c0011d74:	5e                   	pop    esi
c0011d75:	5f                   	pop    edi
c0011d76:	c3                   	ret    

c0011d77 <SysWsbe(regs*)>:
c0011d77:	57                   	push   edi
c0011d78:	b9 0b 00 00 00       	mov    ecx,0xb
c0011d7d:	56                   	push   esi
c0011d7e:	be a0 e9 01 c0       	mov    esi,0xc001e9a0
c0011d83:	53                   	push   ebx
c0011d84:	83 ec 30             	sub    esp,0x30
c0011d87:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011d8b:	fc                   	cld    
c0011d8c:	83 ec 0c             	sub    esp,0xc
c0011d8f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011d91:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0011d95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d9a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d9d:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0011da3:	8b 06                	mov    eax,DWORD PTR [esi]
c0011da5:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0011da8:	57                   	push   edi
c0011da9:	e8 92 e7 fe ff       	call   c0000540 <strlen>
c0011dae:	5a                   	pop    edx
c0011daf:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0011db3:	52                   	push   edx
c0011db4:	31 d2                	xor    edx,edx
c0011db6:	57                   	push   edi
c0011db7:	52                   	push   edx
c0011db8:	50                   	push   eax
c0011db9:	56                   	push   esi
c0011dba:	ff d3                	call   ebx
c0011dbc:	83 c4 14             	add    esp,0x14
c0011dbf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011dc3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011dc6:	e8 fd 22 00 00       	call   c00140c8 <terminateTask(int)>
c0011dcb:	83 c4 40             	add    esp,0x40
c0011dce:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011dd3:	5b                   	pop    ebx
c0011dd4:	31 d2                	xor    edx,edx
c0011dd6:	5e                   	pop    esi
c0011dd7:	5f                   	pop    edi
c0011dd8:	c3                   	ret    

c0011dd9 <SysYield(regs*)>:
c0011dd9:	83 ec 0c             	sub    esp,0xc
c0011ddc:	fa                   	cli    
c0011ddd:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0011de3:	e8 bc 19 00 00       	call   c00137a4 <schedule()>
c0011de8:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0011ded:	48                   	dec    eax
c0011dee:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0011df3:	75 01                	jne    c0011df6 <SysYield(regs*)+0x1d>
c0011df5:	fb                   	sti    
c0011df6:	31 c0                	xor    eax,eax
c0011df8:	31 d2                	xor    edx,edx
c0011dfa:	83 c4 0c             	add    esp,0xc
c0011dfd:	c3                   	ret    

c0011dfe <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0011dfe:	55                   	push   ebp
c0011dff:	57                   	push   edi
c0011e00:	56                   	push   esi
c0011e01:	53                   	push   ebx
c0011e02:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0011e08:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0011e10:	0f 95 c2             	setne  dl
c0011e13:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0011e1b:	0f 94 c0             	sete   al
c0011e1e:	84 c2                	test   dl,al
c0011e20:	74 34                	je     c0011e56 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011e22:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0011e2d:	74 27                	je     c0011e56 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011e2f:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0011e36:	05 00 10 00 00       	add    eax,0x1000
c0011e3b:	89 c1                	mov    ecx,eax
c0011e3d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011e42:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0011e48:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0011e4f:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0011e56:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0011e5d:	83 ec 0c             	sub    esp,0xc
c0011e60:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011e66:	6a 01                	push   0x1
c0011e68:	e8 18 74 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0011e6d:	83 c4 10             	add    esp,0x10
c0011e70:	89 c3                	mov    ebx,eax
c0011e72:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011e78:	0f 86 25 01 00 00    	jbe    c0011fa3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0011e7e:	c1 ee 0c             	shr    esi,0xc
c0011e81:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011e88:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0011e8c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011e94:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0011e9b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011e9f:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0011ea6:	29 ef                	sub    edi,ebp
c0011ea8:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0011eac:	0f 83 f8 00 00 00    	jae    c0011faa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0011eb2:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0011eb8:	76 05                	jbe    c0011ebf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0011eba:	bf 00 10 00 00       	mov    edi,0x1000
c0011ebf:	83 ec 0c             	sub    esp,0xc
c0011ec2:	31 d2                	xor    edx,edx
c0011ec4:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011ecb:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011ecd:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011ed1:	50                   	push   eax
c0011ed2:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011ed6:	56                   	push   esi
c0011ed7:	52                   	push   edx
c0011ed8:	57                   	push   edi
c0011ed9:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0011ee0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011ee3:	83 c4 20             	add    esp,0x20
c0011ee6:	85 c0                	test   eax,eax
c0011ee8:	75 06                	jne    c0011ef0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0011eea:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011eee:	74 13                	je     c0011f03 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0011ef0:	83 ec 0c             	sub    esp,0xc
c0011ef3:	53                   	push   ebx
c0011ef4:	e8 bc 76 ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c0011ef9:	83 c4 10             	add    esp,0x10
c0011efc:	31 c0                	xor    eax,eax
c0011efe:	e9 7c 01 00 00       	jmp    c001207f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0011f03:	fa                   	cli    
c0011f04:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0011f0a:	e8 86 5b ff ff       	call   c0007a95 <Phys::allocatePage()>
c0011f0f:	6a 07                	push   0x7
c0011f11:	89 c7                	mov    edi,eax
c0011f13:	53                   	push   ebx
c0011f14:	50                   	push   eax
c0011f15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f1a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f1d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f23:	e8 0c 7a ff ff       	call   c0009934 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011f28:	83 c4 0c             	add    esp,0xc
c0011f2b:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011f32:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f38:	6a 00                	push   0x0
c0011f3a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f3f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f42:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f48:	e8 59 78 ff ff       	call   c00097a6 <VAS::mapOtherVASIn(bool, VAS*)>
c0011f4d:	58                   	pop    eax
c0011f4e:	5a                   	pop    edx
c0011f4f:	68 07 0c 00 00       	push   0xc07
c0011f54:	55                   	push   ebp
c0011f55:	57                   	push   edi
c0011f56:	89 df                	mov    edi,ebx
c0011f58:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011f5f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f65:	6a 00                	push   0x0
c0011f67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f6c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f6f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f75:	e8 7a 7d ff ff       	call   c0009cf4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011f7a:	b9 00 10 00 00       	mov    ecx,0x1000
c0011f7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011f81:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0011f86:	83 c4 20             	add    esp,0x20
c0011f89:	48                   	dec    eax
c0011f8a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0011f8f:	85 c0                	test   eax,eax
c0011f91:	75 01                	jne    c0011f94 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0011f93:	fb                   	sti    
c0011f94:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011f9a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011f9e:	e9 f1 fe ff ff       	jmp    c0011e94 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0011fa3:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011faa:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011fb1:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011fb7:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011fbd:	0f 86 ae 00 00 00    	jbe    c0012071 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011fc3:	fa                   	cli    
c0011fc4:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0011fca:	c1 ee 0c             	shr    esi,0xc
c0011fcd:	51                   	push   ecx
c0011fce:	31 ff                	xor    edi,edi
c0011fd0:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011fd7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011fdd:	6a 00                	push   0x0
c0011fdf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011fe4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011fe7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011fed:	e8 b4 77 ff ff       	call   c00097a6 <VAS::mapOtherVASIn(bool, VAS*)>
c0011ff2:	83 c4 10             	add    esp,0x10
c0011ff5:	e8 9b 5a ff ff       	call   c0007a95 <Phys::allocatePage()>
c0011ffa:	47                   	inc    edi
c0011ffb:	6a 07                	push   0x7
c0011ffd:	53                   	push   ebx
c0011ffe:	50                   	push   eax
c0011fff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012003:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012009:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001200c:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0012012:	e8 1d 79 ff ff       	call   c0009934 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012017:	58                   	pop    eax
c0012018:	5a                   	pop    edx
c0012019:	68 07 0c 00 00       	push   0xc07
c001201e:	55                   	push   ebp
c001201f:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012025:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012029:	50                   	push   eax
c001202a:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012031:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012037:	6a 00                	push   0x0
c0012039:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001203e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012041:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012047:	e8 a8 7c ff ff       	call   c0009cf4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001204c:	83 c4 1c             	add    esp,0x1c
c001204f:	68 00 10 00 00       	push   0x1000
c0012054:	6a 00                	push   0x0
c0012056:	53                   	push   ebx
c0012057:	e8 74 e4 fe ff       	call   c00004d0 <memset>
c001205c:	83 c4 10             	add    esp,0x10
c001205f:	39 fe                	cmp    esi,edi
c0012061:	77 92                	ja     c0011ff5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0012063:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0012068:	48                   	dec    eax
c0012069:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001206e:	75 01                	jne    c0012071 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012070:	fb                   	sti    
c0012071:	83 ec 0c             	sub    esp,0xc
c0012074:	53                   	push   ebx
c0012075:	e8 3b 75 ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c001207a:	83 c4 10             	add    esp,0x10
c001207d:	b0 01                	mov    al,0x1
c001207f:	81 c4 2c 10 00 00    	add    esp,0x102c
c0012085:	5b                   	pop    ebx
c0012086:	5e                   	pop    esi
c0012087:	5f                   	pop    edi
c0012088:	5d                   	pop    ebp
c0012089:	c3                   	ret    

c001208a <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001208a:	55                   	push   ebp
c001208b:	57                   	push   edi
c001208c:	56                   	push   esi
c001208d:	53                   	push   ebx
c001208e:	83 ec 48             	sub    esp,0x48
c0012091:	68 14 01 00 00       	push   0x114
c0012096:	e8 1e 57 ff ff       	call   c00077b9 <malloc>
c001209b:	83 c4 0c             	add    esp,0xc
c001209e:	89 c6                	mov    esi,eax
c00120a0:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00120a4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00120a8:	50                   	push   eax
c00120a9:	e8 f4 89 ff ff       	call   c000aaa2 <File::File(char const*, Process*)>
c00120ae:	58                   	pop    eax
c00120af:	5a                   	pop    edx
c00120b0:	6a 01                	push   0x1
c00120b2:	56                   	push   esi
c00120b3:	e8 aa 8a ff ff       	call   c000ab62 <File::open(FileOpenMode)>
c00120b8:	83 c4 10             	add    esp,0x10
c00120bb:	85 c0                	test   eax,eax
c00120bd:	0f 85 47 01 00 00    	jne    c001220a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00120c3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00120cb:	83 ec 0c             	sub    esp,0xc
c00120ce:	6a 34                	push   0x34
c00120d0:	e8 e4 56 ff ff       	call   c00077b9 <malloc>
c00120d5:	89 c3                	mov    ebx,eax
c00120d7:	58                   	pop    eax
c00120d8:	8b 06                	mov    eax,DWORD PTR [esi]
c00120da:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00120de:	57                   	push   edi
c00120df:	53                   	push   ebx
c00120e0:	6a 00                	push   0x0
c00120e2:	6a 34                	push   0x34
c00120e4:	56                   	push   esi
c00120e5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00120e8:	83 c4 20             	add    esp,0x20
c00120eb:	85 c0                	test   eax,eax
c00120ed:	0f 85 17 01 00 00    	jne    c001220a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00120f3:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00120f9:	0f 85 0b 01 00 00    	jne    c001220a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00120ff:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012102:	85 c0                	test   eax,eax
c0012104:	0f 84 00 01 00 00    	je     c001220a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001210a:	31 d2                	xor    edx,edx
c001210c:	55                   	push   ebp
c001210d:	52                   	push   edx
c001210e:	50                   	push   eax
c001210f:	56                   	push   esi
c0012110:	e8 0b 8b ff ff       	call   c000ac20 <File::seek(unsigned long long)>
c0012115:	83 c4 10             	add    esp,0x10
c0012118:	85 c0                	test   eax,eax
c001211a:	0f 85 ea 00 00 00    	jne    c001220a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012120:	83 ec 0c             	sub    esp,0xc
c0012123:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012126:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001212a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001212e:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012132:	0f af c2             	imul   eax,edx
c0012135:	50                   	push   eax
c0012136:	e8 7e 56 ff ff       	call   c00077b9 <malloc>
c001213b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001213d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012141:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012144:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012148:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001214c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012150:	0f af c2             	imul   eax,edx
c0012153:	99                   	cdq    
c0012154:	52                   	push   edx
c0012155:	50                   	push   eax
c0012156:	56                   	push   esi
c0012157:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001215a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001215d:	83 c4 20             	add    esp,0x20
c0012160:	85 c0                	test   eax,eax
c0012162:	0f 84 a2 00 00 00    	je     c001220a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012168:	31 d2                	xor    edx,edx
c001216a:	51                   	push   ecx
c001216b:	52                   	push   edx
c001216c:	50                   	push   eax
c001216d:	56                   	push   esi
c001216e:	e8 ad 8a ff ff       	call   c000ac20 <File::seek(unsigned long long)>
c0012173:	83 c4 10             	add    esp,0x10
c0012176:	85 c0                	test   eax,eax
c0012178:	0f 85 8c 00 00 00    	jne    c001220a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001217e:	83 ec 0c             	sub    esp,0xc
c0012181:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0012185:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0012189:	31 ed                	xor    ebp,ebp
c001218b:	0f af c2             	imul   eax,edx
c001218e:	50                   	push   eax
c001218f:	e8 25 56 ff ff       	call   c00077b9 <malloc>
c0012194:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012196:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001219a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001219d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00121a1:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00121a5:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00121a9:	0f af c2             	imul   eax,edx
c00121ac:	99                   	cdq    
c00121ad:	52                   	push   edx
c00121ae:	50                   	push   eax
c00121af:	56                   	push   esi
c00121b0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00121b3:	83 c4 20             	add    esp,0x20
c00121b6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00121be:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00121c2:	0f 86 80 00 00 00    	jbe    c0012248 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00121c8:	0f b7 fd             	movzx  edi,bp
c00121cb:	c1 e7 05             	shl    edi,0x5
c00121ce:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00121d2:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00121d5:	75 6b                	jne    c0012242 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00121d7:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00121da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00121de:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00121e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00121e5:	52                   	push   edx
c00121e6:	31 d2                	xor    edx,edx
c00121e8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00121eb:	52                   	push   edx
c00121ec:	50                   	push   eax
c00121ed:	56                   	push   esi
c00121ee:	e8 2d 8a ff ff       	call   c000ac20 <File::seek(unsigned long long)>
c00121f3:	83 c4 10             	add    esp,0x10
c00121f6:	85 c0                	test   eax,eax
c00121f8:	74 17                	je     c0012211 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00121fa:	83 ec 0c             	sub    esp,0xc
c00121fd:	68 cc e9 01 c0       	push   0xc001e9cc
c0012202:	e8 26 83 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0012207:	83 c4 10             	add    esp,0x10
c001220a:	31 c0                	xor    eax,eax
c001220c:	e9 87 00 00 00       	jmp    c0012298 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0012211:	83 ec 0c             	sub    esp,0xc
c0012214:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0012217:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001221a:	50                   	push   eax
c001221b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001221f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012223:	56                   	push   esi
c0012224:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0012228:	e8 d1 fb ff ff       	call   c0011dfe <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001222d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012231:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0012235:	83 c4 20             	add    esp,0x20
c0012238:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001223c:	73 04                	jae    c0012242 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001223e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012242:	45                   	inc    ebp
c0012243:	e9 76 ff ff ff       	jmp    c00121be <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0012248:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001224c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012250:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012254:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c001225a:	83 ec 0c             	sub    esp,0xc
c001225d:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0012263:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012268:	05 00 10 00 00       	add    eax,0x1000
c001226d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012270:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012274:	e8 50 55 ff ff       	call   c00077c9 <free>
c0012279:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001227c:	e8 48 55 ff ff       	call   c00077c9 <free>
c0012281:	58                   	pop    eax
c0012282:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012286:	e8 3e 55 ff ff       	call   c00077c9 <free>
c001228b:	89 34 24             	mov    DWORD PTR [esp],esi
c001228e:	e8 2d 89 ff ff       	call   c000abc0 <File::close()>
c0012293:	83 c4 10             	add    esp,0x10
c0012296:	b0 01                	mov    al,0x1
c0012298:	83 c4 3c             	add    esp,0x3c
c001229b:	5b                   	pop    ebx
c001229c:	5e                   	pop    esi
c001229d:	5f                   	pop    edi
c001229e:	5d                   	pop    ebp
c001229f:	c3                   	ret    

c00122a0 <Thr::runtimeReferenceHelper()>:
c00122a0:	83 ec 18             	sub    esp,0x18
c00122a3:	68 d4 e9 01 c0       	push   0xc001e9d4
c00122a8:	e8 80 82 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c00122ad:	fa                   	cli    
c00122ae:	83 c4 10             	add    esp,0x10
c00122b1:	eb fe                	jmp    c00122b1 <Thr::runtimeReferenceHelper()+0x11>

c00122b3 <Thr::getAddressOfKernelSymbol(char const*)>:
c00122b3:	57                   	push   edi
c00122b4:	56                   	push   esi
c00122b5:	53                   	push   ebx
c00122b6:	31 db                	xor    ebx,ebx
c00122b8:	39 1d 40 51 02 c0    	cmp    DWORD PTR ds:0xc0025140,ebx
c00122be:	7e 3c                	jle    c00122fc <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00122c0:	8b 34 9d c0 50 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdaf40]
c00122c7:	31 ff                	xor    edi,edi
c00122c9:	39 3c 9d c0 4f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdb040],edi
c00122d0:	7e 27                	jle    c00122f9 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00122d2:	50                   	push   eax
c00122d3:	50                   	push   eax
c00122d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00122d8:	8b 06                	mov    eax,DWORD PTR [esi]
c00122da:	03 04 9d 40 50 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdafc0]
c00122e1:	50                   	push   eax
c00122e2:	e8 f9 e3 fe ff       	call   c00006e0 <strcmp>
c00122e7:	83 c4 10             	add    esp,0x10
c00122ea:	85 c0                	test   eax,eax
c00122ec:	75 05                	jne    c00122f3 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00122ee:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00122f1:	eb 0b                	jmp    c00122fe <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00122f3:	83 c6 10             	add    esi,0x10
c00122f6:	47                   	inc    edi
c00122f7:	eb d0                	jmp    c00122c9 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00122f9:	43                   	inc    ebx
c00122fa:	eb bc                	jmp    c00122b8 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00122fc:	31 c0                	xor    eax,eax
c00122fe:	5b                   	pop    ebx
c00122ff:	5e                   	pop    esi
c0012300:	5f                   	pop    edi
c0012301:	c3                   	ret    

c0012302 <Thr::loadKernelSymbolTable(char const*)>:
c0012302:	55                   	push   ebp
c0012303:	57                   	push   edi
c0012304:	56                   	push   esi
c0012305:	53                   	push   ebx
c0012306:	83 ec 68             	sub    esp,0x68
c0012309:	8b 35 90 51 02 c0    	mov    esi,DWORD PTR ds:0xc0025190
c001230f:	68 14 01 00 00       	push   0x114
c0012314:	e8 a0 54 ff ff       	call   c00077b9 <malloc>
c0012319:	83 c4 0c             	add    esp,0xc
c001231c:	89 c3                	mov    ebx,eax
c001231e:	56                   	push   esi
c001231f:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0012323:	50                   	push   eax
c0012324:	e8 79 87 ff ff       	call   c000aaa2 <File::File(char const*, Process*)>
c0012329:	5e                   	pop    esi
c001232a:	5f                   	pop    edi
c001232b:	6a 01                	push   0x1
c001232d:	53                   	push   ebx
c001232e:	e8 2f 88 ff ff       	call   c000ab62 <File::open(FileOpenMode)>
c0012333:	83 c4 10             	add    esp,0x10
c0012336:	85 c0                	test   eax,eax
c0012338:	74 0a                	je     c0012344 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001233a:	83 ec 0c             	sub    esp,0xc
c001233d:	68 f6 e9 01 c0       	push   0xc001e9f6
c0012342:	eb 34                	jmp    c0012378 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0012344:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001234c:	83 ec 0c             	sub    esp,0xc
c001234f:	6a 34                	push   0x34
c0012351:	e8 63 54 ff ff       	call   c00077b9 <malloc>
c0012356:	59                   	pop    ecx
c0012357:	89 c7                	mov    edi,eax
c0012359:	8d 74 24 34          	lea    esi,[esp+0x34]
c001235d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001235f:	56                   	push   esi
c0012360:	57                   	push   edi
c0012361:	6a 00                	push   0x0
c0012363:	6a 34                	push   0x34
c0012365:	53                   	push   ebx
c0012366:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012369:	83 c4 20             	add    esp,0x20
c001236c:	85 c0                	test   eax,eax
c001236e:	74 17                	je     c0012387 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0012370:	83 ec 0c             	sub    esp,0xc
c0012373:	68 0d ea 01 c0       	push   0xc001ea0d
c0012378:	e8 32 de ff ff       	call   c00101af <KePanic(char const*)>
c001237d:	83 c4 10             	add    esp,0x10
c0012380:	31 c0                	xor    eax,eax
c0012382:	e9 31 02 00 00       	jmp    c00125b8 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0012387:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001238d:	75 e1                	jne    c0012370 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001238f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0012392:	85 c0                	test   eax,eax
c0012394:	74 da                	je     c0012370 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012396:	52                   	push   edx
c0012397:	31 d2                	xor    edx,edx
c0012399:	52                   	push   edx
c001239a:	50                   	push   eax
c001239b:	53                   	push   ebx
c001239c:	e8 7f 88 ff ff       	call   c000ac20 <File::seek(unsigned long long)>
c00123a1:	83 c4 10             	add    esp,0x10
c00123a4:	85 c0                	test   eax,eax
c00123a6:	75 c8                	jne    c0012370 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00123a8:	83 ec 0c             	sub    esp,0xc
c00123ab:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00123af:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00123b3:	31 ed                	xor    ebp,ebp
c00123b5:	0f af c2             	imul   eax,edx
c00123b8:	50                   	push   eax
c00123b9:	e8 fb 53 ff ff       	call   c00077b9 <malloc>
c00123be:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00123c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00123c4:	89 34 24             	mov    DWORD PTR [esp],esi
c00123c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00123cb:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00123cf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00123d3:	0f af c2             	imul   eax,edx
c00123d6:	99                   	cdq    
c00123d7:	52                   	push   edx
c00123d8:	50                   	push   eax
c00123d9:	53                   	push   ebx
c00123da:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00123dd:	83 c4 20             	add    esp,0x20
c00123e0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00123e8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00123f0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00123f8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012400:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0012404:	0f 86 aa 00 00 00    	jbe    c00124b4 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001240a:	0f b7 f5             	movzx  esi,bp
c001240d:	6b f6 28             	imul   esi,esi,0x28
c0012410:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012414:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012417:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001241b:	50                   	push   eax
c001241c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012420:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0012424:	8b 16                	mov    edx,DWORD PTR [esi]
c0012426:	6b c0 28             	imul   eax,eax,0x28
c0012429:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001242d:	89 d0                	mov    eax,edx
c001242f:	31 d2                	xor    edx,edx
c0012431:	52                   	push   edx
c0012432:	50                   	push   eax
c0012433:	53                   	push   ebx
c0012434:	e8 e7 87 ff ff       	call   c000ac20 <File::seek(unsigned long long)>
c0012439:	83 c4 0c             	add    esp,0xc
c001243c:	6a 20                	push   0x20
c001243e:	6a 00                	push   0x0
c0012440:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012444:	52                   	push   edx
c0012445:	e8 86 e0 fe ff       	call   c00004d0 <memset>
c001244a:	58                   	pop    eax
c001244b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001244d:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0012451:	51                   	push   ecx
c0012452:	8d 54 24 40          	lea    edx,[esp+0x40]
c0012456:	52                   	push   edx
c0012457:	6a 00                	push   0x0
c0012459:	6a 1f                	push   0x1f
c001245b:	53                   	push   ebx
c001245c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001245f:	83 c4 18             	add    esp,0x18
c0012462:	68 24 ea 01 c0       	push   0xc001ea24
c0012467:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001246b:	52                   	push   edx
c001246c:	e8 6f e2 fe ff       	call   c00006e0 <strcmp>
c0012471:	83 c4 10             	add    esp,0x10
c0012474:	85 c0                	test   eax,eax
c0012476:	75 0f                	jne    c0012487 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0012478:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001247b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001247f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012483:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012487:	50                   	push   eax
c0012488:	50                   	push   eax
c0012489:	68 2c ea 01 c0       	push   0xc001ea2c
c001248e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012492:	50                   	push   eax
c0012493:	e8 48 e2 fe ff       	call   c00006e0 <strcmp>
c0012498:	83 c4 10             	add    esp,0x10
c001249b:	85 c0                	test   eax,eax
c001249d:	75 0f                	jne    c00124ae <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001249f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00124a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00124a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00124aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00124ae:	45                   	inc    ebp
c00124af:	e9 4c ff ff ff       	jmp    c0012400 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00124b4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00124b9:	75 10                	jne    c00124cb <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00124bb:	83 ec 0c             	sub    esp,0xc
c00124be:	68 34 ea 01 c0       	push   0xc001ea34
c00124c3:	e8 e7 dc ff ff       	call   c00101af <KePanic(char const*)>
c00124c8:	83 c4 10             	add    esp,0x10
c00124cb:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00124d0:	75 10                	jne    c00124e2 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00124d2:	83 ec 0c             	sub    esp,0xc
c00124d5:	68 34 ea 01 c0       	push   0xc001ea34
c00124da:	e8 d0 dc ff ff       	call   c00101af <KePanic(char const*)>
c00124df:	83 c4 10             	add    esp,0x10
c00124e2:	31 d2                	xor    edx,edx
c00124e4:	50                   	push   eax
c00124e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124e9:	52                   	push   edx
c00124ea:	50                   	push   eax
c00124eb:	53                   	push   ebx
c00124ec:	e8 2f 87 ff ff       	call   c000ac20 <File::seek(unsigned long long)>
c00124f1:	5a                   	pop    edx
c00124f2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00124f6:	e8 be 52 ff ff       	call   c00077b9 <malloc>
c00124fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00124ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012503:	31 c9                	xor    ecx,ecx
c0012505:	5e                   	pop    esi
c0012506:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012508:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001250c:	55                   	push   ebp
c001250d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012511:	51                   	push   ecx
c0012512:	52                   	push   edx
c0012513:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012517:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001251b:	53                   	push   ebx
c001251c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001251f:	83 c4 14             	add    esp,0x14
c0012522:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012526:	e8 8e 52 ff ff       	call   c00077b9 <malloc>
c001252b:	89 c6                	mov    esi,eax
c001252d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001252f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012532:	56                   	push   esi
c0012533:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012537:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001253b:	51                   	push   ecx
c001253c:	52                   	push   edx
c001253d:	53                   	push   ebx
c001253e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012541:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012545:	8b 15 40 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025140
c001254b:	83 c4 1c             	add    esp,0x1c
c001254e:	c1 e8 04             	shr    eax,0x4
c0012551:	89 04 95 c0 4f 02 c0 	mov    DWORD PTR [edx*4-0x3ffdb040],eax
c0012558:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001255c:	31 d2                	xor    edx,edx
c001255e:	52                   	push   edx
c001255f:	50                   	push   eax
c0012560:	53                   	push   ebx
c0012561:	e8 ba 86 ff ff       	call   c000ac20 <File::seek(unsigned long long)>
c0012566:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012568:	31 d2                	xor    edx,edx
c001256a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001256d:	56                   	push   esi
c001256e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012572:	52                   	push   edx
c0012573:	50                   	push   eax
c0012574:	53                   	push   ebx
c0012575:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012578:	83 c4 14             	add    esp,0x14
c001257b:	53                   	push   ebx
c001257c:	e8 3f 86 ff ff       	call   c000abc0 <File::close()>
c0012581:	5d                   	pop    ebp
c0012582:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012586:	e8 3e 52 ff ff       	call   c00077c9 <free>
c001258b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001258e:	e8 36 52 ff ff       	call   c00077c9 <free>
c0012593:	a1 40 51 02 c0       	mov    eax,ds:0xc0025140
c0012598:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001259c:	8d 50 01             	lea    edx,[eax+0x1]
c001259f:	89 0c 85 c0 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaf40],ecx
c00125a6:	89 34 85 40 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdafc0],esi
c00125ad:	89 15 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edx
c00125b3:	83 c4 10             	add    esp,0x10
c00125b6:	b0 01                	mov    al,0x1
c00125b8:	83 c4 5c             	add    esp,0x5c
c00125bb:	5b                   	pop    ebx
c00125bc:	5e                   	pop    esi
c00125bd:	5f                   	pop    edi
c00125be:	5d                   	pop    ebp
c00125bf:	c3                   	ret    

c00125c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00125c0:	55                   	push   ebp
c00125c1:	57                   	push   edi
c00125c2:	56                   	push   esi
c00125c3:	53                   	push   ebx
c00125c4:	81 ec 68 03 00 00    	sub    esp,0x368
c00125ca:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00125d1:	8b 1d 90 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025190
c00125d7:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00125db:	68 14 01 00 00       	push   0x114
c00125e0:	e8 d4 51 ff ff       	call   c00077b9 <malloc>
c00125e5:	83 c4 0c             	add    esp,0xc
c00125e8:	89 c5                	mov    ebp,eax
c00125ea:	53                   	push   ebx
c00125eb:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00125f2:	50                   	push   eax
c00125f3:	e8 aa 84 ff ff       	call   c000aaa2 <File::File(char const*, Process*)>
c00125f8:	5e                   	pop    esi
c00125f9:	5f                   	pop    edi
c00125fa:	6a 01                	push   0x1
c00125fc:	55                   	push   ebp
c00125fd:	e8 60 85 ff ff       	call   c000ab62 <File::open(FileOpenMode)>
c0012602:	83 c4 10             	add    esp,0x10
c0012605:	85 c0                	test   eax,eax
c0012607:	0f 85 a7 06 00 00    	jne    c0012cb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001260d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0012615:	83 ec 0c             	sub    esp,0xc
c0012618:	6a 34                	push   0x34
c001261a:	e8 9a 51 ff ff       	call   c00077b9 <malloc>
c001261f:	5b                   	pop    ebx
c0012620:	89 c7                	mov    edi,eax
c0012622:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012626:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012629:	53                   	push   ebx
c001262a:	57                   	push   edi
c001262b:	6a 00                	push   0x0
c001262d:	6a 34                	push   0x34
c001262f:	55                   	push   ebp
c0012630:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012633:	83 c4 20             	add    esp,0x20
c0012636:	85 c0                	test   eax,eax
c0012638:	0f 85 76 06 00 00    	jne    c0012cb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001263e:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0012644:	0f 85 6a 06 00 00    	jne    c0012cb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001264a:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001264d:	85 c0                	test   eax,eax
c001264f:	0f 84 5f 06 00 00    	je     c0012cb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012655:	31 d2                	xor    edx,edx
c0012657:	51                   	push   ecx
c0012658:	52                   	push   edx
c0012659:	50                   	push   eax
c001265a:	55                   	push   ebp
c001265b:	e8 c0 85 ff ff       	call   c000ac20 <File::seek(unsigned long long)>
c0012660:	83 c4 10             	add    esp,0x10
c0012663:	85 c0                	test   eax,eax
c0012665:	0f 85 49 06 00 00    	jne    c0012cb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001266b:	83 ec 0c             	sub    esp,0xc
c001266e:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0012671:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012675:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012679:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001267d:	0f af c2             	imul   eax,edx
c0012680:	50                   	push   eax
c0012681:	e8 33 51 ff ff       	call   c00077b9 <malloc>
c0012686:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012689:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001268d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012690:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012694:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012698:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001269c:	0f af c2             	imul   eax,edx
c001269f:	99                   	cdq    
c00126a0:	52                   	push   edx
c00126a1:	50                   	push   eax
c00126a2:	55                   	push   ebp
c00126a3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00126a6:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00126a9:	83 c4 20             	add    esp,0x20
c00126ac:	85 c0                	test   eax,eax
c00126ae:	0f 84 00 06 00 00    	je     c0012cb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126b4:	52                   	push   edx
c00126b5:	31 d2                	xor    edx,edx
c00126b7:	52                   	push   edx
c00126b8:	50                   	push   eax
c00126b9:	55                   	push   ebp
c00126ba:	e8 61 85 ff ff       	call   c000ac20 <File::seek(unsigned long long)>
c00126bf:	83 c4 10             	add    esp,0x10
c00126c2:	85 c0                	test   eax,eax
c00126c4:	0f 85 ea 05 00 00    	jne    c0012cb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126ca:	83 ec 0c             	sub    esp,0xc
c00126cd:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00126d1:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00126d5:	31 f6                	xor    esi,esi
c00126d7:	0f af c2             	imul   eax,edx
c00126da:	50                   	push   eax
c00126db:	e8 d9 50 ff ff       	call   c00077b9 <malloc>
c00126e0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00126e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00126e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00126ea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00126ee:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00126f2:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00126f6:	0f af c2             	imul   eax,edx
c00126f9:	99                   	cdq    
c00126fa:	52                   	push   edx
c00126fb:	50                   	push   eax
c00126fc:	55                   	push   ebp
c00126fd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012700:	83 c4 20             	add    esp,0x20
c0012703:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0012707:	0f 86 8a 00 00 00    	jbe    c0012797 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001270d:	0f b7 de             	movzx  ebx,si
c0012710:	c1 e3 05             	shl    ebx,0x5
c0012713:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0012717:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001271a:	75 75                	jne    c0012791 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001271c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001271f:	31 d2                	xor    edx,edx
c0012721:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012725:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0012728:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001272c:	50                   	push   eax
c001272d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0012730:	52                   	push   edx
c0012731:	50                   	push   eax
c0012732:	55                   	push   ebp
c0012733:	e8 e8 84 ff ff       	call   c000ac20 <File::seek(unsigned long long)>
c0012738:	83 c4 10             	add    esp,0x10
c001273b:	85 c0                	test   eax,eax
c001273d:	0f 85 71 05 00 00    	jne    c0012cb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012743:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001274a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001274d:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0012751:	31 d2                	xor    edx,edx
c0012753:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0012757:	83 ec 0c             	sub    esp,0xc
c001275a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001275e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012765:	50                   	push   eax
c0012766:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001276a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001276e:	52                   	push   edx
c001276f:	50                   	push   eax
c0012770:	55                   	push   ebp
c0012771:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012774:	83 c4 1c             	add    esp,0x1c
c0012777:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001277a:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001277d:	50                   	push   eax
c001277e:	6a 00                	push   0x0
c0012780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012784:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0012788:	50                   	push   eax
c0012789:	e8 42 dd fe ff       	call   c00004d0 <memset>
c001278e:	83 c4 10             	add    esp,0x10
c0012791:	46                   	inc    esi
c0012792:	e9 6c ff ff ff       	jmp    c0012703 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0012797:	53                   	push   ebx
c0012798:	31 db                	xor    ebx,ebx
c001279a:	68 00 01 00 00       	push   0x100
c001279f:	6a 00                	push   0x0
c00127a1:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00127a5:	50                   	push   eax
c00127a6:	e8 25 dd fe ff       	call   c00004d0 <memset>
c00127ab:	83 c4 0c             	add    esp,0xc
c00127ae:	68 00 01 00 00       	push   0x100
c00127b3:	6a 00                	push   0x0
c00127b5:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00127bc:	50                   	push   eax
c00127bd:	e8 0e dd fe ff       	call   c00004d0 <memset>
c00127c2:	83 c4 10             	add    esp,0x10
c00127c5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00127cd:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00127d5:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00127dd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00127e5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00127ed:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c00127f1:	0f 86 30 01 00 00    	jbe    c0012927 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00127f7:	0f b7 f3             	movzx  esi,bx
c00127fa:	6b f6 28             	imul   esi,esi,0x28
c00127fd:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012801:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012804:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012808:	52                   	push   edx
c0012809:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001280d:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0012811:	8b 06                	mov    eax,DWORD PTR [esi]
c0012813:	6b d2 28             	imul   edx,edx,0x28
c0012816:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001281a:	31 d2                	xor    edx,edx
c001281c:	52                   	push   edx
c001281d:	50                   	push   eax
c001281e:	55                   	push   ebp
c001281f:	e8 fc 83 ff ff       	call   c000ac20 <File::seek(unsigned long long)>
c0012824:	83 c4 0c             	add    esp,0xc
c0012827:	6a 20                	push   0x20
c0012829:	6a 00                	push   0x0
c001282b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012832:	51                   	push   ecx
c0012833:	e8 98 dc fe ff       	call   c00004d0 <memset>
c0012838:	59                   	pop    ecx
c0012839:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001283c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012840:	52                   	push   edx
c0012841:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0012848:	51                   	push   ecx
c0012849:	6a 00                	push   0x0
c001284b:	6a 1f                	push   0x1f
c001284d:	55                   	push   ebp
c001284e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012851:	83 c4 1c             	add    esp,0x1c
c0012854:	6a 09                	push   0x9
c0012856:	68 4e ea 01 c0       	push   0xc001ea4e
c001285b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012862:	51                   	push   ecx
c0012863:	e8 28 db fe ff       	call   c0000390 <memcmp>
c0012868:	83 c4 10             	add    esp,0x10
c001286b:	85 c0                	test   eax,eax
c001286d:	75 21                	jne    c0012890 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001286f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012873:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012877:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001287b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001287f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012882:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012889:	89 d0                	mov    eax,edx
c001288b:	40                   	inc    eax
c001288c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012890:	50                   	push   eax
c0012891:	6a 09                	push   0x9
c0012893:	68 58 ea 01 c0       	push   0xc001ea58
c0012898:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001289f:	50                   	push   eax
c00128a0:	e8 eb da fe ff       	call   c0000390 <memcmp>
c00128a5:	83 c4 10             	add    esp,0x10
c00128a8:	85 c0                	test   eax,eax
c00128aa:	75 21                	jne    c00128cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00128ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00128b4:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00128b8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00128bc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00128bf:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00128c6:	89 d0                	mov    eax,edx
c00128c8:	40                   	inc    eax
c00128c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128cd:	50                   	push   eax
c00128ce:	50                   	push   eax
c00128cf:	68 24 ea 01 c0       	push   0xc001ea24
c00128d4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00128db:	50                   	push   eax
c00128dc:	e8 ff dd fe ff       	call   c00006e0 <strcmp>
c00128e1:	83 c4 10             	add    esp,0x10
c00128e4:	85 c0                	test   eax,eax
c00128e6:	75 0f                	jne    c00128f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00128e8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00128eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00128ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00128f3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00128f7:	50                   	push   eax
c00128f8:	50                   	push   eax
c00128f9:	68 2c ea 01 c0       	push   0xc001ea2c
c00128fe:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012905:	50                   	push   eax
c0012906:	e8 d5 dd fe ff       	call   c00006e0 <strcmp>
c001290b:	83 c4 10             	add    esp,0x10
c001290e:	85 c0                	test   eax,eax
c0012910:	75 0f                	jne    c0012921 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0012912:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012915:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012919:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001291d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012921:	43                   	inc    ebx
c0012922:	e9 c6 fe ff ff       	jmp    c00127ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0012927:	31 d2                	xor    edx,edx
c0012929:	50                   	push   eax
c001292a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001292e:	52                   	push   edx
c001292f:	50                   	push   eax
c0012930:	55                   	push   ebp
c0012931:	e8 ea 82 ff ff       	call   c000ac20 <File::seek(unsigned long long)>
c0012936:	58                   	pop    eax
c0012937:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001293b:	e8 79 4e ff ff       	call   c00077b9 <malloc>
c0012940:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012943:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012947:	31 d2                	xor    edx,edx
c0012949:	58                   	pop    eax
c001294a:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001294e:	53                   	push   ebx
c001294f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012953:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012957:	52                   	push   edx
c0012958:	50                   	push   eax
c0012959:	55                   	push   ebp
c001295a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001295d:	83 c4 14             	add    esp,0x14
c0012960:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012964:	e8 50 4e ff ff       	call   c00077b9 <malloc>
c0012969:	31 d2                	xor    edx,edx
c001296b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001296f:	83 c4 0c             	add    esp,0xc
c0012972:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012976:	52                   	push   edx
c0012977:	50                   	push   eax
c0012978:	55                   	push   ebp
c0012979:	e8 a2 82 ff ff       	call   c000ac20 <File::seek(unsigned long long)>
c001297e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012981:	31 d2                	xor    edx,edx
c0012983:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012986:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001298a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001298e:	52                   	push   edx
c001298f:	50                   	push   eax
c0012990:	55                   	push   ebp
c0012991:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012994:	83 c4 20             	add    esp,0x20
c0012997:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001299f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00129a3:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00129a7:	0f 84 0b 03 00 00    	je     c0012cb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c00129ad:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00129b4:	31 d2                	xor    edx,edx
c00129b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129ba:	c1 e8 03             	shr    eax,0x3
c00129bd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00129c1:	51                   	push   ecx
c00129c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00129c6:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00129ca:	52                   	push   edx
c00129cb:	50                   	push   eax
c00129cc:	55                   	push   ebp
c00129cd:	e8 4e 82 ff ff       	call   c000ac20 <File::seek(unsigned long long)>
c00129d2:	5b                   	pop    ebx
c00129d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00129d7:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00129de:	e8 d6 4d ff ff       	call   c00077b9 <malloc>
c00129e3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00129e6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00129ea:	31 d2                	xor    edx,edx
c00129ec:	5e                   	pop    esi
c00129ed:	8d 44 24 58          	lea    eax,[esp+0x58]
c00129f1:	50                   	push   eax
c00129f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129fa:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0012a01:	52                   	push   edx
c0012a02:	50                   	push   eax
c0012a03:	55                   	push   ebp
c0012a04:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012a07:	83 c4 20             	add    esp,0x20
c0012a0a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012a12:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012a16:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0012a1a:	0f 8d 7c 02 00 00    	jge    c0012c9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012a20:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012a24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a28:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0012a2d:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012a34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a38:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0012a3c:	89 d8                	mov    eax,ebx
c0012a3e:	c1 e8 08             	shr    eax,0x8
c0012a41:	89 c6                	mov    esi,eax
c0012a43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012a47:	c1 e6 04             	shl    esi,0x4
c0012a4a:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0012a4e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0012a51:	85 d2                	test   edx,edx
c0012a53:	0f 85 bf 00 00 00    	jne    c0012b18 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012a59:	83 ec 0c             	sub    esp,0xc
c0012a5c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012a60:	03 06                	add    eax,DWORD PTR [esi]
c0012a62:	50                   	push   eax
c0012a63:	e8 4b f8 ff ff       	call   c00122b3 <Thr::getAddressOfKernelSymbol(char const*)>
c0012a68:	83 c4 10             	add    esp,0x10
c0012a6b:	89 c2                	mov    edx,eax
c0012a6d:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012a72:	85 c0                	test   eax,eax
c0012a74:	0f 85 9e 00 00 00    	jne    c0012b18 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012a7a:	83 ec 0c             	sub    esp,0xc
c0012a7d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012a81:	03 06                	add    eax,DWORD PTR [esi]
c0012a83:	50                   	push   eax
c0012a84:	e8 77 d8 ff ff       	call   c0010300 <KeResolveCompatibilitySymbol(char*)>
c0012a89:	83 c4 10             	add    esp,0x10
c0012a8c:	89 c2                	mov    edx,eax
c0012a8e:	85 c0                	test   eax,eax
c0012a90:	0f 85 82 00 00 00    	jne    c0012b18 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012a96:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012a9a:	50                   	push   eax
c0012a9b:	50                   	push   eax
c0012a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012aa0:	03 06                	add    eax,DWORD PTR [esi]
c0012aa2:	50                   	push   eax
c0012aa3:	68 62 ea 01 c0       	push   0xc001ea62
c0012aa8:	e8 80 7a ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0012aad:	58                   	pop    eax
c0012aae:	5a                   	pop    edx
c0012aaf:	68 7c ea 01 c0       	push   0xc001ea7c
c0012ab4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012abb:	50                   	push   eax
c0012abc:	e8 3f db fe ff       	call   c0000600 <strcpy>
c0012ac1:	59                   	pop    ecx
c0012ac2:	58                   	pop    eax
c0012ac3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ac7:	03 06                	add    eax,DWORD PTR [esi]
c0012ac9:	50                   	push   eax
c0012aca:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012ad1:	50                   	push   eax
c0012ad2:	e8 e9 dc fe ff       	call   c00007c0 <strcat>
c0012ad7:	58                   	pop    eax
c0012ad8:	5a                   	pop    edx
c0012ad9:	68 12 eb 01 c0       	push   0xc001eb12
c0012ade:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012ae5:	50                   	push   eax
c0012ae6:	e8 d5 dc fe ff       	call   c00007c0 <strcat>
c0012aeb:	83 c4 10             	add    esp,0x10
c0012aee:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012af3:	0f 84 5d 01 00 00    	je     c0012c56 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012af9:	83 ec 0c             	sub    esp,0xc
c0012afc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b03:	50                   	push   eax
c0012b04:	e8 a6 d6 ff ff       	call   c00101af <KePanic(char const*)>
c0012b09:	83 c4 10             	add    esp,0x10
c0012b0c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012b10:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012b14:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012b18:	80 fb 01             	cmp    bl,0x1
c0012b1b:	0f 85 88 00 00 00    	jne    c0012ba9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012b21:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012b28:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012b2c:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012b30:	01 ce                	add    esi,ecx
c0012b32:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012b38:	0f 94 c0             	sete   al
c0012b3b:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012b41:	0f 94 c3             	sete   bl
c0012b44:	09 c3                	or     ebx,eax
c0012b46:	8b 06                	mov    eax,DWORD PTR [esi]
c0012b48:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012b4d:	74 41                	je     c0012b90 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012b4f:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012b52:	84 db                	test   bl,bl
c0012b54:	75 15                	jne    c0012b6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0012b56:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012b5a:	66 83 f8 0c          	cmp    ax,0xc
c0012b5e:	76 05                	jbe    c0012b65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012b60:	b8 0c 00 00 00       	mov    eax,0xc
c0012b65:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012b69:	76 37                	jbe    c0012ba2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012b6b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012b6f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012b74:	0f 84 dc 00 00 00    	je     c0012c56 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012b7a:	83 ec 0c             	sub    esp,0xc
c0012b7d:	68 93 ea 01 c0       	push   0xc001ea93
c0012b82:	e8 28 d6 ff ff       	call   c00101af <KePanic(char const*)>
c0012b87:	83 c4 10             	add    esp,0x10
c0012b8a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012b8e:	eb 12                	jmp    c0012ba2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012b90:	01 c1                	add    ecx,eax
c0012b92:	84 db                	test   bl,bl
c0012b94:	75 0c                	jne    c0012ba2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012b96:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012b9a:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012b9e:	77 02                	ja     c0012ba2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012ba0:	01 d1                	add    ecx,edx
c0012ba2:	89 0e                	mov    DWORD PTR [esi],ecx
c0012ba4:	e9 ea 00 00 00       	jmp    c0012c93 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012ba9:	80 fb 02             	cmp    bl,0x2
c0012bac:	75 7c                	jne    c0012c2a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012bae:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012bb5:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012bb9:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012bbd:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012bc3:	74 20                	je     c0012be5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012bc5:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012bcb:	74 18                	je     c0012be5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012bcd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012bd1:	b9 0a 00 00 00       	mov    ecx,0xa
c0012bd6:	66 83 f8 0e          	cmp    ax,0xe
c0012bda:	77 03                	ja     c0012bdf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012bdc:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012bdf:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012be3:	76 1f                	jbe    c0012c04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012be5:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012be9:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012bee:	74 66                	je     c0012c56 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012bf0:	83 ec 0c             	sub    esp,0xc
c0012bf3:	68 af ea 01 c0       	push   0xc001eaaf
c0012bf8:	e8 b2 d5 ff ff       	call   c00101af <KePanic(char const*)>
c0012bfd:	83 c4 10             	add    esp,0x10
c0012c00:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012c04:	8b 06                	mov    eax,DWORD PTR [esi]
c0012c06:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012c0b:	74 13                	je     c0012c20 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012c0d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012c11:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012c18:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012c1c:	01 c8                	add    eax,ecx
c0012c1e:	eb 04                	jmp    c0012c24 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012c20:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012c24:	01 c2                	add    edx,eax
c0012c26:	89 16                	mov    DWORD PTR [esi],edx
c0012c28:	eb 69                	jmp    c0012c93 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012c2a:	0f b6 db             	movzx  ebx,bl
c0012c2d:	50                   	push   eax
c0012c2e:	50                   	push   eax
c0012c2f:	53                   	push   ebx
c0012c30:	68 cb ea 01 c0       	push   0xc001eacb
c0012c35:	e8 f3 78 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0012c3a:	83 c4 10             	add    esp,0x10
c0012c3d:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012c42:	74 12                	je     c0012c56 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012c44:	83 ec 0c             	sub    esp,0xc
c0012c47:	68 d6 ea 01 c0       	push   0xc001ead6
c0012c4c:	e8 5e d5 ff ff       	call   c00101af <KePanic(char const*)>
c0012c51:	83 c4 10             	add    esp,0x10
c0012c54:	eb 3d                	jmp    c0012c93 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012c56:	83 ec 0c             	sub    esp,0xc
c0012c59:	55                   	push   ebp
c0012c5a:	e8 61 7f ff ff       	call   c000abc0 <File::close()>
c0012c5f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c62:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012c65:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012c68:	59                   	pop    ecx
c0012c69:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012c6d:	e8 57 4b ff ff       	call   c00077c9 <free>
c0012c72:	5b                   	pop    ebx
c0012c73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c77:	e8 4d 4b ff ff       	call   c00077c9 <free>
c0012c7c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012c7f:	e8 45 4b ff ff       	call   c00077c9 <free>
c0012c84:	5e                   	pop    esi
c0012c85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c89:	e8 3b 4b ff ff       	call   c00077c9 <free>
c0012c8e:	83 c4 10             	add    esp,0x10
c0012c91:	eb 21                	jmp    c0012cb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012c93:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012c97:	e9 76 fd ff ff       	jmp    c0012a12 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012c9c:	83 ec 0c             	sub    esp,0xc
c0012c9f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012ca3:	e8 21 4b ff ff       	call   c00077c9 <free>
c0012ca8:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012cac:	83 c4 10             	add    esp,0x10
c0012caf:	e9 eb fc ff ff       	jmp    c001299f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012cb4:	31 c0                	xor    eax,eax
c0012cb6:	eb 33                	jmp    c0012ceb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012cb8:	83 ec 0c             	sub    esp,0xc
c0012cbb:	55                   	push   ebp
c0012cbc:	e8 ff 7e ff ff       	call   c000abc0 <File::close()>
c0012cc1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012cc4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012cc7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012cca:	58                   	pop    eax
c0012ccb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012ccf:	e8 f5 4a ff ff       	call   c00077c9 <free>
c0012cd4:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012cd7:	e8 ed 4a ff ff       	call   c00077c9 <free>
c0012cdc:	5a                   	pop    edx
c0012cdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ce1:	e8 e3 4a ff ff       	call   c00077c9 <free>
c0012ce6:	83 c4 10             	add    esp,0x10
c0012ce9:	b0 01                	mov    al,0x1
c0012ceb:	81 c4 5c 03 00 00    	add    esp,0x35c
c0012cf1:	5b                   	pop    ebx
c0012cf2:	5e                   	pop    esi
c0012cf3:	5f                   	pop    edi
c0012cf4:	5d                   	pop    ebp
c0012cf5:	c3                   	ret    

c0012cf6 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0012cf6:	56                   	push   esi
c0012cf7:	31 d2                	xor    edx,edx
c0012cf9:	53                   	push   ebx
c0012cfa:	8b 1d a0 49 02 c0    	mov    ebx,DWORD PTR ds:0xc00249a0
c0012d00:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012d04:	39 d3                	cmp    ebx,edx
c0012d06:	7e 1b                	jle    c0012d23 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0012d08:	8b 04 95 c0 4b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb440]
c0012d0f:	39 c8                	cmp    eax,ecx
c0012d11:	77 0d                	ja     c0012d20 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0012d13:	8b 34 95 c0 49 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdb640]
c0012d1a:	01 c6                	add    esi,eax
c0012d1c:	39 ce                	cmp    esi,ecx
c0012d1e:	77 05                	ja     c0012d25 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0012d20:	42                   	inc    edx
c0012d21:	eb e1                	jmp    c0012d04 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0012d23:	31 c0                	xor    eax,eax
c0012d25:	5b                   	pop    ebx
c0012d26:	5e                   	pop    esi
c0012d27:	c3                   	ret    

c0012d28 <Thr::getDriverNameFromAddress(unsigned long)>:
c0012d28:	53                   	push   ebx
c0012d29:	31 c0                	xor    eax,eax
c0012d2b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012d2f:	8b 1d a0 49 02 c0    	mov    ebx,DWORD PTR ds:0xc00249a0
c0012d35:	39 c3                	cmp    ebx,eax
c0012d37:	7e 22                	jle    c0012d5b <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0012d39:	8b 14 85 c0 4b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb440]
c0012d40:	39 ca                	cmp    edx,ecx
c0012d42:	77 14                	ja     c0012d58 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012d44:	03 14 85 c0 49 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdb640]
c0012d4b:	39 ca                	cmp    edx,ecx
c0012d4d:	76 09                	jbe    c0012d58 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012d4f:	8b 04 85 c0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb240]
c0012d56:	eb 05                	jmp    c0012d5d <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0012d58:	40                   	inc    eax
c0012d59:	eb da                	jmp    c0012d35 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0012d5b:	31 c0                	xor    eax,eax
c0012d5d:	5b                   	pop    ebx
c0012d5e:	c3                   	ret    

c0012d5f <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0012d5f:	53                   	push   ebx
c0012d60:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012d64:	53                   	push   ebx
c0012d65:	e8 8c ff ff ff       	call   c0012cf6 <Thr::getDriverBaseFromAddress(unsigned long)>
c0012d6a:	5a                   	pop    edx
c0012d6b:	31 d2                	xor    edx,edx
c0012d6d:	85 c0                	test   eax,eax
c0012d6f:	74 04                	je     c0012d75 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0012d71:	89 da                	mov    edx,ebx
c0012d73:	29 c2                	sub    edx,eax
c0012d75:	89 d0                	mov    eax,edx
c0012d77:	5b                   	pop    ebx
c0012d78:	c3                   	ret    

c0012d79 <Thr::loadDLL(char const*, bool)>:
c0012d79:	55                   	push   ebp
c0012d7a:	57                   	push   edi
c0012d7b:	56                   	push   esi
c0012d7c:	53                   	push   ebx
c0012d7d:	81 ec 34 01 00 00    	sub    esp,0x134
c0012d83:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012d8a:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012d91:	56                   	push   esi
c0012d92:	68 ee ea 01 c0       	push   0xc001eaee
c0012d97:	e8 91 77 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0012d9c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012da3:	e8 11 4a ff ff       	call   c00077b9 <malloc>
c0012da8:	83 c4 0c             	add    esp,0xc
c0012dab:	89 c3                	mov    ebx,eax
c0012dad:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0012db3:	56                   	push   esi
c0012db4:	50                   	push   eax
c0012db5:	e8 e8 7c ff ff       	call   c000aaa2 <File::File(char const*, Process*)>
c0012dba:	83 c4 10             	add    esp,0x10
c0012dbd:	85 db                	test   ebx,ebx
c0012dbf:	75 3c                	jne    c0012dfd <Thr::loadDLL(char const*, bool)+0x84>
c0012dc1:	89 f8                	mov    eax,edi
c0012dc3:	84 c0                	test   al,al
c0012dc5:	0f 84 d2 01 00 00    	je     c0012f9d <Thr::loadDLL(char const*, bool)+0x224>
c0012dcb:	55                   	push   ebp
c0012dcc:	55                   	push   ebp
c0012dcd:	68 ff ea 01 c0       	push   0xc001eaff
c0012dd2:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0012dd6:	55                   	push   ebp
c0012dd7:	e8 24 d8 fe ff       	call   c0000600 <strcpy>
c0012ddc:	58                   	pop    eax
c0012ddd:	5a                   	pop    edx
c0012dde:	56                   	push   esi
c0012ddf:	55                   	push   ebp
c0012de0:	e8 db d9 fe ff       	call   c00007c0 <strcat>
c0012de5:	59                   	pop    ecx
c0012de6:	58                   	pop    eax
c0012de7:	68 12 eb 01 c0       	push   0xc001eb12
c0012dec:	55                   	push   ebp
c0012ded:	e8 ce d9 fe ff       	call   c00007c0 <strcat>
c0012df2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012df5:	e8 b5 d3 ff ff       	call   c00101af <KePanic(char const*)>
c0012dfa:	83 c4 10             	add    esp,0x10
c0012dfd:	51                   	push   ecx
c0012dfe:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0012e02:	50                   	push   eax
c0012e03:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012e07:	50                   	push   eax
c0012e08:	53                   	push   ebx
c0012e09:	e8 00 80 ff ff       	call   c000ae0e <File::stat(unsigned long long*, bool*)>
c0012e0e:	83 c4 10             	add    esp,0x10
c0012e11:	85 db                	test   ebx,ebx
c0012e13:	74 0c                	je     c0012e21 <Thr::loadDLL(char const*, bool)+0xa8>
c0012e15:	83 ec 0c             	sub    esp,0xc
c0012e18:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e1a:	53                   	push   ebx
c0012e1b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012e1e:	83 c4 10             	add    esp,0x10
c0012e21:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012e26:	75 0a                	jne    c0012e32 <Thr::loadDLL(char const*, bool)+0xb9>
c0012e28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012e2c:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0012e30:	75 3c                	jne    c0012e6e <Thr::loadDLL(char const*, bool)+0xf5>
c0012e32:	89 f8                	mov    eax,edi
c0012e34:	84 c0                	test   al,al
c0012e36:	0f 84 49 01 00 00    	je     c0012f85 <Thr::loadDLL(char const*, bool)+0x20c>
c0012e3c:	51                   	push   ecx
c0012e3d:	51                   	push   ecx
c0012e3e:	68 ff ea 01 c0       	push   0xc001eaff
c0012e43:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0012e47:	53                   	push   ebx
c0012e48:	e8 b3 d7 fe ff       	call   c0000600 <strcpy>
c0012e4d:	5d                   	pop    ebp
c0012e4e:	58                   	pop    eax
c0012e4f:	56                   	push   esi
c0012e50:	53                   	push   ebx
c0012e51:	e8 6a d9 fe ff       	call   c00007c0 <strcat>
c0012e56:	58                   	pop    eax
c0012e57:	5a                   	pop    edx
c0012e58:	68 12 eb 01 c0       	push   0xc001eb12
c0012e5d:	53                   	push   ebx
c0012e5e:	e8 5d d9 fe ff       	call   c00007c0 <strcat>
c0012e63:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012e66:	e8 44 d3 ff ff       	call   c00101af <KePanic(char const*)>
c0012e6b:	83 c4 10             	add    esp,0x10
c0012e6e:	52                   	push   edx
c0012e6f:	6a 03                	push   0x3
c0012e71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e75:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012e79:	05 ff 0f 00 00       	add    eax,0xfff
c0012e7e:	83 d2 00             	adc    edx,0x0
c0012e81:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012e85:	50                   	push   eax
c0012e86:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0012e8c:	e8 a7 6b ff ff       	call   c0009a38 <VAS::allocatePages(int, int)>
c0012e91:	59                   	pop    ecx
c0012e92:	89 c3                	mov    ebx,eax
c0012e94:	5d                   	pop    ebp
c0012e95:	50                   	push   eax
c0012e96:	68 36 d7 01 c0       	push   0xc001d736
c0012e9b:	e8 8d 76 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0012ea0:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ea3:	e8 98 d6 fe ff       	call   c0000540 <strlen>
c0012ea8:	8b 2d a0 49 02 c0    	mov    ebp,DWORD PTR ds:0xc00249a0
c0012eae:	40                   	inc    eax
c0012eaf:	89 04 24             	mov    DWORD PTR [esp],eax
c0012eb2:	e8 02 49 ff ff       	call   c00077b9 <malloc>
c0012eb7:	89 04 ad c0 4d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdb240],eax
c0012ebe:	58                   	pop    eax
c0012ebf:	a1 a0 49 02 c0       	mov    eax,ds:0xc00249a0
c0012ec4:	5a                   	pop    edx
c0012ec5:	56                   	push   esi
c0012ec6:	ff 34 85 c0 4d 02 c0 	push   DWORD PTR [eax*4-0x3ffdb240]
c0012ecd:	e8 2e d7 fe ff       	call   c0000600 <strcpy>
c0012ed2:	a1 a0 49 02 c0       	mov    eax,ds:0xc00249a0
c0012ed7:	8d 50 01             	lea    edx,[eax+0x1]
c0012eda:	89 1c 85 c0 4b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb440],ebx
c0012ee1:	89 15 a0 49 02 c0    	mov    DWORD PTR ds:0xc00249a0,edx
c0012ee7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012eeb:	83 c4 0c             	add    esp,0xc
c0012eee:	89 14 85 c0 49 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb640],edx
c0012ef5:	6a 01                	push   0x1
c0012ef7:	53                   	push   ebx
c0012ef8:	56                   	push   esi
c0012ef9:	e8 c2 f6 ff ff       	call   c00125c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0012efe:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012f02:	83 c4 10             	add    esp,0x10
c0012f05:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f0a:	0f 85 89 00 00 00    	jne    c0012f99 <Thr::loadDLL(char const*, bool)+0x220>
c0012f10:	89 f8                	mov    eax,edi
c0012f12:	84 c0                	test   al,al
c0012f14:	74 73                	je     c0012f89 <Thr::loadDLL(char const*, bool)+0x210>
c0012f16:	83 ec 0c             	sub    esp,0xc
c0012f19:	68 14 eb 01 c0       	push   0xc001eb14
c0012f1e:	e8 8c d2 ff ff       	call   c00101af <KePanic(char const*)>
c0012f23:	83 c4 10             	add    esp,0x10
c0012f26:	eb 61                	jmp    c0012f89 <Thr::loadDLL(char const*, bool)+0x210>
c0012f28:	50                   	push   eax
c0012f29:	50                   	push   eax
c0012f2a:	89 e8                	mov    eax,ebp
c0012f2c:	c1 e0 0c             	shl    eax,0xc
c0012f2f:	01 d8                	add    eax,ebx
c0012f31:	50                   	push   eax
c0012f32:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0012f38:	e8 59 66 ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c0012f3d:	83 c4 10             	add    esp,0x10
c0012f40:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f42:	a8 60                	test   al,0x60
c0012f44:	75 11                	jne    c0012f57 <Thr::loadDLL(char const*, bool)+0x1de>
c0012f46:	83 ec 0c             	sub    esp,0xc
c0012f49:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012f4e:	50                   	push   eax
c0012f4f:	e8 df 4a ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0012f54:	83 c4 10             	add    esp,0x10
c0012f57:	45                   	inc    ebp
c0012f58:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012f5c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012f60:	05 ff 0f 00 00       	add    eax,0xfff
c0012f65:	bf 00 00 00 00       	mov    edi,0x0
c0012f6a:	83 d2 00             	adc    edx,0x0
c0012f6d:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012f71:	c1 ea 0c             	shr    edx,0xc
c0012f74:	39 c5                	cmp    ebp,eax
c0012f76:	89 d1                	mov    ecx,edx
c0012f78:	89 f8                	mov    eax,edi
c0012f7a:	19 c8                	sbb    eax,ecx
c0012f7c:	72 aa                	jb     c0012f28 <Thr::loadDLL(char const*, bool)+0x1af>
c0012f7e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f83:	75 18                	jne    c0012f9d <Thr::loadDLL(char const*, bool)+0x224>
c0012f85:	31 db                	xor    ebx,ebx
c0012f87:	eb 14                	jmp    c0012f9d <Thr::loadDLL(char const*, bool)+0x224>
c0012f89:	83 ec 0c             	sub    esp,0xc
c0012f8c:	68 33 eb 01 c0       	push   0xc001eb33
c0012f91:	e8 19 d2 ff ff       	call   c00101af <KePanic(char const*)>
c0012f96:	83 c4 10             	add    esp,0x10
c0012f99:	31 ed                	xor    ebp,ebp
c0012f9b:	eb bb                	jmp    c0012f58 <Thr::loadDLL(char const*, bool)+0x1df>
c0012f9d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012fa3:	89 d8                	mov    eax,ebx
c0012fa5:	5b                   	pop    ebx
c0012fa6:	5e                   	pop    esi
c0012fa7:	5f                   	pop    edi
c0012fa8:	5d                   	pop    ebp
c0012fa9:	c3                   	ret    

c0012faa <Thr::executeDLL(unsigned long, void*)>:
c0012faa:	56                   	push   esi
c0012fab:	53                   	push   ebx
c0012fac:	52                   	push   edx
c0012fad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012fb1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012fb5:	85 db                	test   ebx,ebx
c0012fb7:	75 10                	jne    c0012fc9 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0012fb9:	83 ec 0c             	sub    esp,0xc
c0012fbc:	68 4f eb 01 c0       	push   0xc001eb4f
c0012fc1:	e8 e9 d1 ff ff       	call   c00101af <KePanic(char const*)>
c0012fc6:	83 c4 10             	add    esp,0x10
c0012fc9:	50                   	push   eax
c0012fca:	50                   	push   eax
c0012fcb:	53                   	push   ebx
c0012fcc:	68 79 eb 01 c0       	push   0xc001eb79
c0012fd1:	e8 57 75 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0012fd6:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0012fda:	89 d8                	mov    eax,ebx
c0012fdc:	83 c4 14             	add    esp,0x14
c0012fdf:	5b                   	pop    ebx
c0012fe0:	5e                   	pop    esi
c0012fe1:	ff e0                	jmp    eax
c0012fe3:	90                   	nop

c0012fe4 <userModeEntryPoint(void*)>:
c0012fe4:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0012fe9:	48                   	dec    eax
c0012fea:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0012fef:	75 03                	jne    c0012ff4 <userModeEntryPoint(void*)+0x10>
c0012ff1:	fb                   	sti    
c0012ff2:	66 90                	xchg   ax,ax
c0012ff4:	fb                   	sti    
c0012ff5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ffa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012ffd:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0013003:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013007:	e9 33 d2 fe ff       	jmp    c000023f <goToUsermode>

c001300c <changeTSS>:
c001300c:	83 ec 14             	sub    esp,0x14
c001300f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013014:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0013017:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001301c:	c1 e2 15             	shl    edx,0x15
c001301f:	29 d0                	sub    eax,edx
c0013021:	50                   	push   eax
c0013022:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0013027:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001302d:	05 7c 11 00 00       	add    eax,0x117c
c0013032:	50                   	push   eax
c0013033:	e8 a0 5b ff ff       	call   c0008bd8 <TSS::setESP(unsigned long)>
c0013038:	83 c4 1c             	add    esp,0x1c
c001303b:	c3                   	ret    

c001303c <switchToThread(ThreadControlBlock*)>:
c001303c:	57                   	push   edi
c001303d:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013042:	56                   	push   esi
c0013043:	85 c0                	test   eax,eax
c0013045:	53                   	push   ebx
c0013046:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001304a:	0f 85 90 00 00 00    	jne    c00130e0 <switchToThread(ThreadControlBlock*)+0xa4>
c0013050:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0013053:	80 fa ff             	cmp    dl,0xff
c0013056:	0f 84 80 00 00 00    	je     c00130dc <switchToThread(ThreadControlBlock*)+0xa0>
c001305c:	81 e2 ff 00 00 00    	and    edx,0xff
c0013062:	b8 00 04 00 00       	mov    eax,0x400
c0013067:	29 d0                	sub    eax,edx
c0013069:	d1 f8                	sar    eax,1
c001306b:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c001306e:	66 90                	xchg   ax,ax
c0013070:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0013073:	e8 1d 26 00 00       	call   c0015695 <HalQueryPerformanceCounter()>
c0013078:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c001307d:	89 15 ac 51 02 c0    	mov    DWORD PTR ds:0xc00251ac,edx
c0013083:	89 c6                	mov    esi,eax
c0013085:	89 d7                	mov    edi,edx
c0013087:	2b 35 98 51 02 c0    	sub    esi,DWORD PTR ds:0xc0025198
c001308d:	a3 98 51 02 c0       	mov    ds:0xc0025198,eax
c0013092:	1b 3d 9c 51 02 c0    	sbb    edi,DWORD PTR ds:0xc002519c
c0013098:	89 35 a0 51 02 c0    	mov    DWORD PTR ds:0xc00251a0,esi
c001309e:	89 3d a4 51 02 c0    	mov    DWORD PTR ds:0xc00251a4,edi
c00130a4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00130aa:	89 15 9c 51 02 c0    	mov    DWORD PTR ds:0xc002519c,edx
c00130b0:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00130b3:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00130b6:	01 c6                	add    esi,eax
c00130b8:	11 d7                	adc    edi,edx
c00130ba:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00130bd:	83 ec 0c             	sub    esp,0xc
c00130c0:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00130c3:	53                   	push   ebx
c00130c4:	e8 ae d1 fe ff       	call   c0000277 <switchToThreadASM>
c00130c9:	0f 20 c0             	mov    eax,cr0
c00130cc:	83 c8 08             	or     eax,0x8
c00130cf:	0f 22 c0             	mov    cr0,eax
c00130d2:	83 c4 10             	add    esp,0x10
c00130d5:	5b                   	pop    ebx
c00130d6:	5e                   	pop    esi
c00130d7:	5f                   	pop    edi
c00130d8:	c3                   	ret    
c00130d9:	8d 76 00             	lea    esi,[esi+0x0]
c00130dc:	31 c0                	xor    eax,eax
c00130de:	eb 90                	jmp    c0013070 <switchToThread(ThreadControlBlock*)+0x34>
c00130e0:	5b                   	pop    ebx
c00130e1:	c7 05 60 51 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x1
c00130eb:	5e                   	pop    esi
c00130ec:	5f                   	pop    edi
c00130ed:	c3                   	ret    
c00130ee:	66 90                	xchg   ax,ax

c00130f0 <Process::addArgs(char**)>:
c00130f0:	57                   	push   edi
c00130f1:	56                   	push   esi
c00130f2:	53                   	push   ebx
c00130f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00130f7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00130fb:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0013105:	85 ff                	test   edi,edi
c0013107:	74 43                	je     c001314c <Process::addArgs(char**)+0x5c>
c0013109:	8b 07                	mov    eax,DWORD PTR [edi]
c001310b:	85 c0                	test   eax,eax
c001310d:	74 3d                	je     c001314c <Process::addArgs(char**)+0x5c>
c001310f:	31 db                	xor    ebx,ebx
c0013111:	8d 76 00             	lea    esi,[esi+0x0]
c0013114:	83 ec 0c             	sub    esp,0xc
c0013117:	50                   	push   eax
c0013118:	e8 23 d4 fe ff       	call   c0000540 <strlen>
c001311d:	40                   	inc    eax
c001311e:	89 04 24             	mov    DWORD PTR [esp],eax
c0013121:	e8 93 46 ff ff       	call   c00077b9 <malloc>
c0013126:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c001312d:	5a                   	pop    edx
c001312e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013131:	59                   	pop    ecx
c0013132:	43                   	inc    ebx
c0013133:	52                   	push   edx
c0013134:	50                   	push   eax
c0013135:	e8 c6 d4 fe ff       	call   c0000600 <strcpy>
c001313a:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0013140:	83 c4 10             	add    esp,0x10
c0013143:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0013146:	85 c0                	test   eax,eax
c0013148:	75 ca                	jne    c0013114 <Process::addArgs(char**)+0x24>
c001314a:	66 90                	xchg   ax,ax
c001314c:	5b                   	pop    ebx
c001314d:	5e                   	pop    esi
c001314e:	5f                   	pop    edi
c001314f:	c3                   	ret    

c0013150 <Process::Process(char const*, Process*, char**)>:
c0013150:	56                   	push   esi
c0013151:	53                   	push   ebx
c0013152:	83 ec 14             	sub    esp,0x14
c0013155:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013159:	05 0c 02 00 00       	add    eax,0x20c
c001315e:	bb 07 00 00 00       	mov    ebx,0x7
c0013163:	89 c6                	mov    esi,eax
c0013165:	8d 76 00             	lea    esi,[esi+0x0]
c0013168:	85 db                	test   ebx,ebx
c001316a:	78 14                	js     c0013180 <Process::Process(char const*, Process*, char**)+0x30>
c001316c:	83 ec 0c             	sub    esp,0xc
c001316f:	56                   	push   esi
c0013170:	e8 97 98 00 00       	call   c001ca0c <ThreadControlBlock::ThreadControlBlock()>
c0013175:	83 c4 10             	add    esp,0x10
c0013178:	83 c6 5f             	add    esi,0x5f
c001317b:	4b                   	dec    ebx
c001317c:	eb ea                	jmp    c0013168 <Process::Process(char const*, Process*, char**)+0x18>
c001317e:	66 90                	xchg   ax,ax
c0013180:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013184:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001318b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001318f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0013196:	83 ec 0c             	sub    esp,0xc
c0013199:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001319d:	e8 02 ce ff ff       	call   c000ffa4 <Krnl::newProcessEnv(Process*)>
c00131a2:	83 c4 10             	add    esp,0x10
c00131a5:	89 c2                	mov    edx,eax
c00131a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131ab:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00131b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131b5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00131be:	a1 2c fb 01 c0       	mov    eax,ds:0xc001fb2c
c00131c3:	8d 50 01             	lea    edx,[eax+0x1]
c00131c6:	89 15 2c fb 01 c0    	mov    DWORD PTR ds:0xc001fb2c,edx
c00131cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00131d0:	89 02                	mov    DWORD PTR [edx],eax
c00131d2:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00131da:	83 ec 0c             	sub    esp,0xc
c00131dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00131e1:	e8 d3 45 ff ff       	call   c00077b9 <malloc>
c00131e6:	83 c4 10             	add    esp,0x10
c00131e9:	89 c3                	mov    ebx,eax
c00131eb:	83 ec 08             	sub    esp,0x8
c00131ee:	6a 00                	push   0x0
c00131f0:	53                   	push   ebx
c00131f1:	e8 ec 6b ff ff       	call   c0009de2 <VAS::VAS(bool)>
c00131f6:	83 c4 10             	add    esp,0x10
c00131f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131fd:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0013203:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013207:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013211:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013215:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013219:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001321f:	e8 f6 d2 ff ff       	call   c001051a <KeInitSignals()>
c0013224:	89 c2                	mov    edx,eax
c0013226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001322a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0013230:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013234:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001323a:	85 c0                	test   eax,eax
c001323c:	74 42                	je     c0013280 <Process::Process(char const*, Process*, char**)+0x130>
c001323e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013242:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013248:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001324e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013252:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0013258:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001325c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013262:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013268:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001326c:	05 0c 01 00 00       	add    eax,0x10c
c0013271:	83 ec 08             	sub    esp,0x8
c0013274:	52                   	push   edx
c0013275:	50                   	push   eax
c0013276:	e8 85 d3 fe ff       	call   c0000600 <strcpy>
c001327b:	83 c4 10             	add    esp,0x10
c001327e:	eb 64                	jmp    c00132e4 <Process::Process(char const*, Process*, char**)+0x194>
c0013280:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c0013288:	83 ec 0c             	sub    esp,0xc
c001328b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001328f:	e8 25 45 ff ff       	call   c00077b9 <malloc>
c0013294:	83 c4 10             	add    esp,0x10
c0013297:	89 c3                	mov    ebx,eax
c0013299:	83 ec 08             	sub    esp,0x8
c001329c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132a0:	53                   	push   ebx
c00132a1:	e8 54 56 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c00132a6:	83 c4 10             	add    esp,0x10
c00132a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132ad:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00132b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132b7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00132bd:	83 ec 0c             	sub    esp,0xc
c00132c0:	50                   	push   eax
c00132c1:	e8 d4 4e ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c00132c6:	83 c4 10             	add    esp,0x10
c00132c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132cd:	05 0c 01 00 00       	add    eax,0x10c
c00132d2:	83 ec 08             	sub    esp,0x8
c00132d5:	68 98 eb 01 c0       	push   0xc001eb98
c00132da:	50                   	push   eax
c00132db:	e8 20 d3 fe ff       	call   c0000600 <strcpy>
c00132e0:	83 c4 10             	add    esp,0x10
c00132e3:	90                   	nop
c00132e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132e8:	83 c0 0c             	add    eax,0xc
c00132eb:	83 ec 08             	sub    esp,0x8
c00132ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132f2:	50                   	push   eax
c00132f3:	e8 08 d3 fe ff       	call   c0000600 <strcpy>
c00132f8:	83 c4 10             	add    esp,0x10
c00132fb:	83 ec 08             	sub    esp,0x8
c00132fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013302:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013306:	e8 e5 fd ff ff       	call   c00130f0 <Process::addArgs(char**)>
c001330b:	83 c4 10             	add    esp,0x10
c001330e:	83 ec 08             	sub    esp,0x8
c0013311:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013315:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013319:	e8 6c ed ff ff       	call   c001208a <Thr::loadProgramIntoMemory(Process*, char const*)>
c001331e:	83 c4 10             	add    esp,0x10
c0013321:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013325:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013329:	83 f0 01             	xor    eax,0x1
c001332c:	88 c2                	mov    dl,al
c001332e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013332:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0013338:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001333c:	25 ff 00 00 00       	and    eax,0xff
c0013341:	83 ec 08             	sub    esp,0x8
c0013344:	50                   	push   eax
c0013345:	68 f0 eb 01 c0       	push   0xc001ebf0
c001334a:	e8 de 71 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c001334f:	83 c4 10             	add    esp,0x10
c0013352:	90                   	nop
c0013353:	83 c4 14             	add    esp,0x14
c0013356:	5b                   	pop    ebx
c0013357:	5e                   	pop    esi
c0013358:	c3                   	ret    
c0013359:	90                   	nop
c001335a:	66 90                	xchg   ax,ax

c001335c <Process::Process(bool, char const*, Process*, char**)>:
c001335c:	56                   	push   esi
c001335d:	53                   	push   ebx
c001335e:	83 ec 24             	sub    esp,0x24
c0013361:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013365:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013369:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001336d:	05 0c 02 00 00       	add    eax,0x20c
c0013372:	bb 07 00 00 00       	mov    ebx,0x7
c0013377:	89 c6                	mov    esi,eax
c0013379:	8d 76 00             	lea    esi,[esi+0x0]
c001337c:	85 db                	test   ebx,ebx
c001337e:	78 14                	js     c0013394 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0013380:	83 ec 0c             	sub    esp,0xc
c0013383:	56                   	push   esi
c0013384:	e8 83 96 00 00       	call   c001ca0c <ThreadControlBlock::ThreadControlBlock()>
c0013389:	83 c4 10             	add    esp,0x10
c001338c:	83 c6 5f             	add    esi,0x5f
c001338f:	4b                   	dec    ebx
c0013390:	eb ea                	jmp    c001337c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0013392:	66 90                	xchg   ax,ax
c0013394:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013398:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001339f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133a3:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00133aa:	83 ec 0c             	sub    esp,0xc
c00133ad:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00133b1:	e8 ee cb ff ff       	call   c000ffa4 <Krnl::newProcessEnv(Process*)>
c00133b6:	83 c4 10             	add    esp,0x10
c00133b9:	89 c2                	mov    edx,eax
c00133bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133bf:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00133c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133c9:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00133d2:	a1 2c fb 01 c0       	mov    eax,ds:0xc001fb2c
c00133d7:	8d 50 01             	lea    edx,[eax+0x1]
c00133da:	89 15 2c fb 01 c0    	mov    DWORD PTR ds:0xc001fb2c,edx
c00133e0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00133e4:	89 02                	mov    DWORD PTR [edx],eax
c00133e6:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00133ee:	83 ec 0c             	sub    esp,0xc
c00133f1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00133f5:	e8 bf 43 ff ff       	call   c00077b9 <malloc>
c00133fa:	83 c4 10             	add    esp,0x10
c00133fd:	89 c3                	mov    ebx,eax
c00133ff:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0013403:	25 ff 00 00 00       	and    eax,0xff
c0013408:	83 ec 08             	sub    esp,0x8
c001340b:	50                   	push   eax
c001340c:	53                   	push   ebx
c001340d:	e8 d0 69 ff ff       	call   c0009de2 <VAS::VAS(bool)>
c0013412:	83 c4 10             	add    esp,0x10
c0013415:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013419:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001341f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013423:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001342d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013431:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013435:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001343b:	e8 da d0 ff ff       	call   c001051a <KeInitSignals()>
c0013440:	89 c2                	mov    edx,eax
c0013442:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013446:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c001344c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013450:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013456:	85 c0                	test   eax,eax
c0013458:	74 42                	je     c001349c <Process::Process(bool, char const*, Process*, char**)+0x140>
c001345a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001345e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013464:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001346a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001346e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0013474:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013478:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001347e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013484:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013488:	05 0c 01 00 00       	add    eax,0x10c
c001348d:	83 ec 08             	sub    esp,0x8
c0013490:	52                   	push   edx
c0013491:	50                   	push   eax
c0013492:	e8 69 d1 fe ff       	call   c0000600 <strcpy>
c0013497:	83 c4 10             	add    esp,0x10
c001349a:	eb 64                	jmp    c0013500 <Process::Process(bool, char const*, Process*, char**)+0x1a4>
c001349c:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c00134a4:	83 ec 0c             	sub    esp,0xc
c00134a7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00134ab:	e8 09 43 ff ff       	call   c00077b9 <malloc>
c00134b0:	83 c4 10             	add    esp,0x10
c00134b3:	89 c3                	mov    ebx,eax
c00134b5:	83 ec 08             	sub    esp,0x8
c00134b8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00134bc:	53                   	push   ebx
c00134bd:	e8 38 54 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c00134c2:	83 c4 10             	add    esp,0x10
c00134c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134c9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00134cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134d3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00134d9:	83 ec 0c             	sub    esp,0xc
c00134dc:	50                   	push   eax
c00134dd:	e8 b8 4c ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c00134e2:	83 c4 10             	add    esp,0x10
c00134e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134e9:	05 0c 01 00 00       	add    eax,0x10c
c00134ee:	83 ec 08             	sub    esp,0x8
c00134f1:	68 98 eb 01 c0       	push   0xc001eb98
c00134f6:	50                   	push   eax
c00134f7:	e8 04 d1 fe ff       	call   c0000600 <strcpy>
c00134fc:	83 c4 10             	add    esp,0x10
c00134ff:	90                   	nop
c0013500:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013504:	83 c0 0c             	add    eax,0xc
c0013507:	83 ec 08             	sub    esp,0x8
c001350a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001350e:	50                   	push   eax
c001350f:	e8 ec d0 fe ff       	call   c0000600 <strcpy>
c0013514:	83 c4 10             	add    esp,0x10
c0013517:	83 ec 08             	sub    esp,0x8
c001351a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001351e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013522:	e8 c9 fb ff ff       	call   c00130f0 <Process::addArgs(char**)>
c0013527:	83 c4 10             	add    esp,0x10
c001352a:	90                   	nop
c001352b:	83 c4 24             	add    esp,0x24
c001352e:	5b                   	pop    ebx
c001352f:	5e                   	pop    esi
c0013530:	c3                   	ret    
c0013531:	8d 76 00             	lea    esi,[esi+0x0]

c0013534 <taskStartupFunction>:
c0013534:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013539:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c001353c:	c3                   	ret    
c001353d:	90                   	nop
c001353e:	66 90                	xchg   ax,ax

c0013540 <Semaphore::Semaphore(int)>:
c0013540:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013544:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013548:	89 10                	mov    DWORD PTR [eax],edx
c001354a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001354e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0013555:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013559:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013560:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013564:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001356b:	90                   	nop
c001356c:	c3                   	ret    
c001356d:	90                   	nop
c001356e:	66 90                	xchg   ax,ax

c0013570 <Mutex::Mutex()>:
c0013570:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013574:	6a 01                	push   0x1
c0013576:	50                   	push   eax
c0013577:	e8 c4 ff ff ff       	call   c0013540 <Semaphore::Semaphore(int)>
c001357c:	83 c4 08             	add    esp,0x8
c001357f:	90                   	nop
c0013580:	c3                   	ret    
c0013581:	90                   	nop
c0013582:	66 90                	xchg   ax,ax

c0013584 <Process::createThread(void (*)(void*), void*, int)>:
c0013584:	57                   	push   edi
c0013585:	31 c9                	xor    ecx,ecx
c0013587:	56                   	push   esi
c0013588:	53                   	push   ebx
c0013589:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001358d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0013594:	89 f2                	mov    edx,esi
c0013596:	66 90                	xchg   ax,ax
c0013598:	31 c0                	xor    eax,eax
c001359a:	66 89 d0             	mov    ax,dx
c001359d:	83 e2 01             	and    edx,0x1
c00135a0:	74 12                	je     c00135b4 <Process::createThread(void (*)(void*), void*, int)+0x30>
c00135a2:	d1 f8                	sar    eax,1
c00135a4:	41                   	inc    ecx
c00135a5:	89 c2                	mov    edx,eax
c00135a7:	83 f9 10             	cmp    ecx,0x10
c00135aa:	75 ec                	jne    c0013598 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00135ac:	31 db                	xor    ebx,ebx
c00135ae:	89 d8                	mov    eax,ebx
c00135b0:	5b                   	pop    ebx
c00135b1:	5e                   	pop    esi
c00135b2:	5f                   	pop    edi
c00135b3:	c3                   	ret    
c00135b4:	b8 01 00 00 00       	mov    eax,0x1
c00135b9:	d3 e0                	shl    eax,cl
c00135bb:	09 c6                	or     esi,eax
c00135bd:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00135c0:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00135c7:	01 c0                	add    eax,eax
c00135c9:	01 c8                	add    eax,ecx
c00135cb:	8d 04 80             	lea    eax,[eax+eax*4]
c00135ce:	01 d8                	add    eax,ebx
c00135d0:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00135d7:	75 0b                	jne    c00135e4 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00135d9:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00135e3:	90                   	nop
c00135e4:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00135ea:	83 ec 08             	sub    esp,0x8
c00135ed:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00135f0:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00135f3:	01 c0                	add    eax,eax
c00135f5:	01 c8                	add    eax,ecx
c00135f7:	8d 3c 80             	lea    edi,[eax+eax*4]
c00135fa:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00135fd:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0013603:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0013609:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001360d:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0013613:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0013619:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0013620:	89 ca                	mov    edx,ecx
c0013622:	f7 da                	neg    edx
c0013624:	c1 e2 15             	shl    edx,0x15
c0013627:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001362d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0013633:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013637:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0013641:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0013647:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001364b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0013651:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001365b:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0013665:	53                   	push   ebx
c0013666:	68 84 51 02 c0       	push   0xc0025184
c001366b:	e8 3c 91 00 00       	call   c001c7ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013670:	83 c4 10             	add    esp,0x10
c0013673:	89 d8                	mov    eax,ebx
c0013675:	5b                   	pop    ebx
c0013676:	5e                   	pop    esi
c0013677:	5f                   	pop    edi
c0013678:	c3                   	ret    
c0013679:	90                   	nop
c001367a:	66 90                	xchg   ax,ax

c001367c <Process::createUserThread()>:
c001367c:	83 ec 0c             	sub    esp,0xc
c001367f:	68 80 00 00 00       	push   0x80
c0013684:	6a 00                	push   0x0
c0013686:	68 e4 2f 01 c0       	push   0xc0012fe4
c001368b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001368f:	50                   	push   eax
c0013690:	e8 ef fe ff ff       	call   c0013584 <Process::createThread(void (*)(void*), void*, int)>
c0013695:	83 c4 1c             	add    esp,0x1c
c0013698:	c3                   	ret    
c0013699:	8d 76 00             	lea    esi,[esi+0x0]

c001369c <setupMultitasking(void (*)())>:
c001369c:	56                   	push   esi
c001369d:	53                   	push   ebx
c001369e:	53                   	push   ebx
c001369f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136a3:	eb 13                	jmp    c00136b8 <setupMultitasking(void (*)())+0x1c>
c00136a5:	8d 76 00             	lea    esi,[esi+0x0]
c00136a8:	83 ec 0c             	sub    esp,0xc
c00136ab:	68 84 51 02 c0       	push   0xc0025184
c00136b0:	e8 3f 90 00 00       	call   c001c6f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00136b5:	83 c4 10             	add    esp,0x10
c00136b8:	83 ec 0c             	sub    esp,0xc
c00136bb:	68 84 51 02 c0       	push   0xc0025184
c00136c0:	e8 0b 90 00 00       	call   c001c6d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00136c5:	83 c4 10             	add    esp,0x10
c00136c8:	84 c0                	test   al,al
c00136ca:	74 dc                	je     c00136a8 <setupMultitasking(void (*)())+0xc>
c00136cc:	83 ec 0c             	sub    esp,0xc
c00136cf:	68 24 07 00 00       	push   0x724
c00136d4:	e8 e0 40 ff ff       	call   c00077b9 <malloc>
c00136d9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00136e0:	89 c3                	mov    ebx,eax
c00136e2:	6a 00                	push   0x0
c00136e4:	68 9c eb 01 c0       	push   0xc001eb9c
c00136e9:	6a 01                	push   0x1
c00136eb:	50                   	push   eax
c00136ec:	e8 6b fc ff ff       	call   c001335c <Process::Process(bool, char const*, Process*, char**)>
c00136f1:	83 c4 14             	add    esp,0x14
c00136f4:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00136fa:	89 1d 90 51 02 c0    	mov    DWORD PTR ds:0xc0025190,ebx
c0013700:	50                   	push   eax
c0013701:	e8 f1 4c ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0013706:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c001370e:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0013718:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001371e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013721:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c001372b:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0013731:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0013737:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0013741:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c001374b:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0013755:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001375b:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0013761:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001376b:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0013771:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001377b:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0013781:	5a                   	pop    edx
c0013782:	59                   	pop    ecx
c0013783:	68 98 eb 01 c0       	push   0xc001eb98
c0013788:	50                   	push   eax
c0013789:	e8 72 ce fe ff       	call   c0000600 <strcpy>
c001378e:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0013795:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0013799:	83 c4 14             	add    esp,0x14
c001379c:	5b                   	pop    ebx
c001379d:	5e                   	pop    esi
c001379e:	e9 c6 ca fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00137a3:	90                   	nop

c00137a4 <schedule()>:
c00137a4:	8b 15 64 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025164
c00137aa:	85 d2                	test   edx,edx
c00137ac:	74 0e                	je     c00137bc <schedule()+0x18>
c00137ae:	c7 05 60 51 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x1
c00137b8:	c3                   	ret    
c00137b9:	8d 76 00             	lea    esi,[esi+0x0]
c00137bc:	53                   	push   ebx
c00137bd:	83 ec 14             	sub    esp,0x14
c00137c0:	68 84 51 02 c0       	push   0xc0025184
c00137c5:	e8 06 8f 00 00       	call   c001c6d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00137ca:	83 c4 10             	add    esp,0x10
c00137cd:	84 c0                	test   al,al
c00137cf:	75 3b                	jne    c001380c <schedule()+0x68>
c00137d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137d6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00137d9:	4a                   	dec    edx
c00137da:	74 38                	je     c0013814 <schedule()+0x70>
c00137dc:	83 ec 0c             	sub    esp,0xc
c00137df:	68 84 51 02 c0       	push   0xc0025184
c00137e4:	e8 03 8f 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00137e9:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c00137f0:	89 c3                	mov    ebx,eax
c00137f2:	e8 fd 8e 00 00       	call   c001c6f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00137f7:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00137fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013801:	e8 36 f8 ff ff       	call   c001303c <switchToThread(ThreadControlBlock*)>
c0013806:	83 c4 10             	add    esp,0x10
c0013809:	8d 76 00             	lea    esi,[esi+0x0]
c001380c:	83 c4 08             	add    esp,0x8
c001380f:	5b                   	pop    ebx
c0013810:	c3                   	ret    
c0013811:	8d 76 00             	lea    esi,[esi+0x0]
c0013814:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001381b:	83 ec 08             	sub    esp,0x8
c001381e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013823:	50                   	push   eax
c0013824:	68 84 51 02 c0       	push   0xc0025184
c0013829:	e8 7e 8f 00 00       	call   c001c7ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001382e:	83 c4 10             	add    esp,0x10
c0013831:	eb a9                	jmp    c00137dc <schedule()+0x38>
c0013833:	90                   	nop

c0013834 <Semaphore::tryAcquire()>:
c0013834:	53                   	push   ebx
c0013835:	83 ec 08             	sub    esp,0x8
c0013838:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001383c:	fa                   	cli    
c001383d:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013842:	8d 50 01             	lea    edx,[eax+0x1]
c0013845:	89 15 68 51 02 c0    	mov    DWORD PTR ds:0xc0025168,edx
c001384b:	8b 15 64 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025164
c0013851:	8d 5a 01             	lea    ebx,[edx+0x1]
c0013854:	89 1d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ebx
c001385a:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001385d:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001385f:	7c 33                	jl     c0013894 <Semaphore::tryAcquire()+0x60>
c0013861:	89 15 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,edx
c0013867:	85 d2                	test   edx,edx
c0013869:	75 0d                	jne    c0013878 <Semaphore::tryAcquire()+0x44>
c001386b:	8b 15 60 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025160
c0013871:	85 d2                	test   edx,edx
c0013873:	75 6b                	jne    c00138e0 <Semaphore::tryAcquire()+0xac>
c0013875:	8d 76 00             	lea    esi,[esi+0x0]
c0013878:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001387d:	85 c0                	test   eax,eax
c001387f:	74 0b                	je     c001388c <Semaphore::tryAcquire()+0x58>
c0013881:	8d 76 00             	lea    esi,[esi+0x0]
c0013884:	31 c0                	xor    eax,eax
c0013886:	83 c4 08             	add    esp,0x8
c0013889:	5b                   	pop    ebx
c001388a:	c3                   	ret    
c001388b:	90                   	nop
c001388c:	fb                   	sti    
c001388d:	83 c4 08             	add    esp,0x8
c0013890:	5b                   	pop    ebx
c0013891:	c3                   	ret    
c0013892:	66 90                	xchg   ax,ax
c0013894:	43                   	inc    ebx
c0013895:	89 15 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,edx
c001389b:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001389e:	85 d2                	test   edx,edx
c00138a0:	75 22                	jne    c00138c4 <Semaphore::tryAcquire()+0x90>
c00138a2:	8b 0d 60 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025160
c00138a8:	85 c9                	test   ecx,ecx
c00138aa:	74 18                	je     c00138c4 <Semaphore::tryAcquire()+0x90>
c00138ac:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c00138b6:	e8 e9 fe ff ff       	call   c00137a4 <schedule()>
c00138bb:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00138c0:	48                   	dec    eax
c00138c1:	8d 76 00             	lea    esi,[esi+0x0]
c00138c4:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00138c9:	85 c0                	test   eax,eax
c00138cb:	75 0b                	jne    c00138d8 <Semaphore::tryAcquire()+0xa4>
c00138cd:	fb                   	sti    
c00138ce:	b0 01                	mov    al,0x1
c00138d0:	83 c4 08             	add    esp,0x8
c00138d3:	5b                   	pop    ebx
c00138d4:	c3                   	ret    
c00138d5:	8d 76 00             	lea    esi,[esi+0x0]
c00138d8:	b0 01                	mov    al,0x1
c00138da:	83 c4 08             	add    esp,0x8
c00138dd:	5b                   	pop    ebx
c00138de:	c3                   	ret    
c00138df:	90                   	nop
c00138e0:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c00138ea:	e8 b5 fe ff ff       	call   c00137a4 <schedule()>
c00138ef:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00138f4:	48                   	dec    eax
c00138f5:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00138fa:	85 c0                	test   eax,eax
c00138fc:	75 86                	jne    c0013884 <Semaphore::tryAcquire()+0x50>
c00138fe:	eb 8c                	jmp    c001388c <Semaphore::tryAcquire()+0x58>

c0013900 <Semaphore::assertLocked(char const*)>:
c0013900:	83 ec 0c             	sub    esp,0xc
c0013903:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013907:	fa                   	cli    
c0013908:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001390e:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013913:	8d 48 01             	lea    ecx,[eax+0x1]
c0013916:	89 0d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ecx
c001391c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001391e:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0013921:	7c 29                	jl     c001394c <Semaphore::assertLocked(char const*)+0x4c>
c0013923:	90                   	nop
c0013924:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0013929:	85 c0                	test   eax,eax
c001392b:	75 0b                	jne    c0013938 <Semaphore::assertLocked(char const*)+0x38>
c001392d:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0013932:	85 c0                	test   eax,eax
c0013934:	75 2e                	jne    c0013964 <Semaphore::assertLocked(char const*)+0x64>
c0013936:	66 90                	xchg   ax,ax
c0013938:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001393d:	48                   	dec    eax
c001393e:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013943:	75 03                	jne    c0013948 <Semaphore::assertLocked(char const*)+0x48>
c0013945:	fb                   	sti    
c0013946:	66 90                	xchg   ax,ax
c0013948:	83 c4 0c             	add    esp,0xc
c001394b:	c3                   	ret    
c001394c:	83 ec 0c             	sub    esp,0xc
c001394f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013953:	52                   	push   edx
c0013954:	e8 56 c8 ff ff       	call   c00101af <KePanic(char const*)>
c0013959:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c001395e:	83 c4 10             	add    esp,0x10
c0013961:	48                   	dec    eax
c0013962:	eb c0                	jmp    c0013924 <Semaphore::assertLocked(char const*)+0x24>
c0013964:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c001396e:	e8 31 fe ff ff       	call   c00137a4 <schedule()>
c0013973:	eb c3                	jmp    c0013938 <Semaphore::assertLocked(char const*)+0x38>
c0013975:	8d 76 00             	lea    esi,[esi+0x0]

c0013978 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0013978:	83 ec 0c             	sub    esp,0xc
c001397b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013980:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013984:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013987:	e8 18 fe ff ff       	call   c00137a4 <schedule()>
c001398c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013991:	48                   	dec    eax
c0013992:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013997:	75 03                	jne    c001399c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0013999:	fb                   	sti    
c001399a:	66 90                	xchg   ax,ax
c001399c:	83 c4 0c             	add    esp,0xc
c001399f:	c3                   	ret    

c00139a0 <blockTask(TaskState)>:
c00139a0:	83 ec 0c             	sub    esp,0xc
c00139a3:	fa                   	cli    
c00139a4:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00139aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139b3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00139b6:	e8 e9 fd ff ff       	call   c00137a4 <schedule()>
c00139bb:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00139c0:	48                   	dec    eax
c00139c1:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00139c6:	75 04                	jne    c00139cc <blockTask(TaskState)+0x2c>
c00139c8:	fb                   	sti    
c00139c9:	8d 76 00             	lea    esi,[esi+0x0]
c00139cc:	83 c4 0c             	add    esp,0xc
c00139cf:	c3                   	ret    

c00139d0 <waitTask(int, int*, int)>:
c00139d0:	83 ec 18             	sub    esp,0x18
c00139d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139d8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00139dc:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00139df:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00139e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139e8:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00139eb:	6a 07                	push   0x7
c00139ed:	e8 ae ff ff ff       	call   c00139a0 <blockTask(TaskState)>
c00139f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139f7:	83 c4 10             	add    esp,0x10
c00139fa:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00139fd:	85 d2                	test   edx,edx
c00139ff:	74 0b                	je     c0013a0c <waitTask(int, int*, int)+0x3c>
c0013a01:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0013a04:	89 02                	mov    DWORD PTR [edx],eax
c0013a06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a0b:	90                   	nop
c0013a0c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0013a0f:	83 c4 0c             	add    esp,0xc
c0013a12:	c3                   	ret    
c0013a13:	90                   	nop

c0013a14 <milliTenthSleepUntil(unsigned int)>:
c0013a14:	83 ec 0c             	sub    esp,0xc
c0013a17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a1b:	39 05 8c 44 02 c0    	cmp    DWORD PTR ds:0xc002448c,eax
c0013a21:	76 05                	jbe    c0013a28 <milliTenthSleepUntil(unsigned int)+0x14>
c0013a23:	90                   	nop
c0013a24:	83 c4 0c             	add    esp,0xc
c0013a27:	c3                   	ret    
c0013a28:	fa                   	cli    
c0013a29:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013a2f:	83 ec 08             	sub    esp,0x8
c0013a32:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c0013a38:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013a3e:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013a41:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013a47:	52                   	push   edx
c0013a48:	68 78 51 02 c0       	push   0xc0025178
c0013a4d:	e8 5a 8d 00 00       	call   c001c7ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013a52:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013a59:	e8 42 ff ff ff       	call   c00139a0 <blockTask(TaskState)>
c0013a5e:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013a63:	83 c4 10             	add    esp,0x10
c0013a66:	48                   	dec    eax
c0013a67:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0013a6c:	85 c0                	test   eax,eax
c0013a6e:	75 0c                	jne    c0013a7c <milliTenthSleepUntil(unsigned int)+0x68>
c0013a70:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0013a75:	85 c0                	test   eax,eax
c0013a77:	75 17                	jne    c0013a90 <milliTenthSleepUntil(unsigned int)+0x7c>
c0013a79:	8d 76 00             	lea    esi,[esi+0x0]
c0013a7c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013a81:	48                   	dec    eax
c0013a82:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013a87:	75 9b                	jne    c0013a24 <milliTenthSleepUntil(unsigned int)+0x10>
c0013a89:	fb                   	sti    
c0013a8a:	83 c4 0c             	add    esp,0xc
c0013a8d:	c3                   	ret    
c0013a8e:	66 90                	xchg   ax,ax
c0013a90:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0013a9a:	e8 05 fd ff ff       	call   c00137a4 <schedule()>
c0013a9f:	eb db                	jmp    c0013a7c <milliTenthSleepUntil(unsigned int)+0x68>
c0013aa1:	8d 76 00             	lea    esi,[esi+0x0]

c0013aa4 <milliTenthSleep(unsigned int)>:
c0013aa4:	a1 8c 44 02 c0       	mov    eax,ds:0xc002448c
c0013aa9:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0013aad:	e9 62 ff ff ff       	jmp    c0013a14 <milliTenthSleepUntil(unsigned int)>
c0013ab2:	66 90                	xchg   ax,ax

c0013ab4 <sleep(unsigned int)>:
c0013ab4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ab8:	8d 04 80             	lea    eax,[eax+eax*4]
c0013abb:	8d 04 80             	lea    eax,[eax+eax*4]
c0013abe:	8d 04 80             	lea    eax,[eax+eax*4]
c0013ac1:	8d 04 80             	lea    eax,[eax+eax*4]
c0013ac4:	c1 e0 04             	shl    eax,0x4
c0013ac7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013acb:	eb d7                	jmp    c0013aa4 <milliTenthSleep(unsigned int)>
c0013acd:	90                   	nop
c0013ace:	66 90                	xchg   ax,ax

c0013ad0 <Semaphore::acquire()>:
c0013ad0:	83 ec 0c             	sub    esp,0xc
c0013ad3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ad7:	fa                   	cli    
c0013ad8:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013add:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013ae3:	8d 48 01             	lea    ecx,[eax+0x1]
c0013ae6:	89 0d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ecx
c0013aec:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013aef:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013af1:	7d 2d                	jge    c0013b20 <Semaphore::acquire()+0x50>
c0013af3:	41                   	inc    ecx
c0013af4:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0013af7:	90                   	nop
c0013af8:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0013afd:	85 c0                	test   eax,eax
c0013aff:	75 0b                	jne    c0013b0c <Semaphore::acquire()+0x3c>
c0013b01:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0013b06:	85 c0                	test   eax,eax
c0013b08:	75 62                	jne    c0013b6c <Semaphore::acquire()+0x9c>
c0013b0a:	66 90                	xchg   ax,ax
c0013b0c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013b11:	48                   	dec    eax
c0013b12:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013b17:	75 03                	jne    c0013b1c <Semaphore::acquire()+0x4c>
c0013b19:	fb                   	sti    
c0013b1a:	66 90                	xchg   ax,ax
c0013b1c:	83 c4 0c             	add    esp,0xc
c0013b1f:	c3                   	ret    
c0013b20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b25:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013b2c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013b2f:	85 c9                	test   ecx,ecx
c0013b31:	74 4d                	je     c0013b80 <Semaphore::acquire()+0xb0>
c0013b33:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0013b36:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013b3c:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013b3f:	90                   	nop
c0013b40:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b45:	83 ec 0c             	sub    esp,0xc
c0013b48:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0013b4b:	68 18 ec 01 c0       	push   0xc001ec18
c0013b50:	e8 d8 69 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0013b55:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013b5c:	e8 3f fe ff ff       	call   c00139a0 <blockTask(TaskState)>
c0013b61:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013b66:	83 c4 10             	add    esp,0x10
c0013b69:	48                   	dec    eax
c0013b6a:	eb 8c                	jmp    c0013af8 <Semaphore::acquire()+0x28>
c0013b6c:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0013b76:	e8 29 fc ff ff       	call   c00137a4 <schedule()>
c0013b7b:	eb 8f                	jmp    c0013b0c <Semaphore::acquire()+0x3c>
c0013b7d:	8d 76 00             	lea    esi,[esi+0x0]
c0013b80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b85:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013b88:	eb b6                	jmp    c0013b40 <Semaphore::acquire()+0x70>
c0013b8a:	66 90                	xchg   ax,ax

c0013b8c <taskReturned>:
c0013b8c:	83 ec 18             	sub    esp,0x18
c0013b8f:	68 38 ec 01 c0       	push   0xc001ec38
c0013b94:	e8 16 c6 ff ff       	call   c00101af <KePanic(char const*)>
c0013b99:	83 c4 10             	add    esp,0x10
c0013b9c:	83 ec 0c             	sub    esp,0xc
c0013b9f:	6a 02                	push   0x2
c0013ba1:	e8 fa fd ff ff       	call   c00139a0 <blockTask(TaskState)>
c0013ba6:	fa                   	cli    
c0013ba7:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013bad:	e8 f2 fb ff ff       	call   c00137a4 <schedule()>
c0013bb2:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013bb7:	83 c4 10             	add    esp,0x10
c0013bba:	48                   	dec    eax
c0013bbb:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013bc0:	85 c0                	test   eax,eax
c0013bc2:	75 d8                	jne    c0013b9c <taskReturned+0x10>
c0013bc4:	fb                   	sti    
c0013bc5:	eb d5                	jmp    c0013b9c <taskReturned+0x10>
c0013bc7:	90                   	nop

c0013bc8 <Thr::processFromPID(int)>:
c0013bc8:	57                   	push   edi
c0013bc9:	56                   	push   esi
c0013bca:	53                   	push   ebx
c0013bcb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013bcf:	fa                   	cli    
c0013bd0:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013bd6:	83 ec 0c             	sub    esp,0xc
c0013bd9:	68 84 51 02 c0       	push   0xc0025184
c0013bde:	e8 09 8b 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013be3:	83 c4 10             	add    esp,0x10
c0013be6:	89 c7                	mov    edi,eax
c0013be8:	eb 16                	jmp    c0013c00 <Thr::processFromPID(int)+0x38>
c0013bea:	66 90                	xchg   ax,ax
c0013bec:	83 ec 0c             	sub    esp,0xc
c0013bef:	68 84 51 02 c0       	push   0xc0025184
c0013bf4:	e8 f3 8a 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013bf9:	83 c4 10             	add    esp,0x10
c0013bfc:	39 f8                	cmp    eax,edi
c0013bfe:	74 4c                	je     c0013c4c <Thr::processFromPID(int)+0x84>
c0013c00:	83 ec 0c             	sub    esp,0xc
c0013c03:	68 84 51 02 c0       	push   0xc0025184
c0013c08:	e8 df 8a 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c0d:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013c14:	89 c3                	mov    ebx,eax
c0013c16:	e8 d9 8a 00 00       	call   c001c6f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013c1b:	58                   	pop    eax
c0013c1c:	5a                   	pop    edx
c0013c1d:	53                   	push   ebx
c0013c1e:	68 84 51 02 c0       	push   0xc0025184
c0013c23:	e8 84 8b 00 00       	call   c001c7ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013c28:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013c2b:	83 c4 10             	add    esp,0x10
c0013c2e:	39 30                	cmp    DWORD PTR [eax],esi
c0013c30:	75 ba                	jne    c0013bec <Thr::processFromPID(int)+0x24>
c0013c32:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013c37:	48                   	dec    eax
c0013c38:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013c3d:	74 09                	je     c0013c48 <Thr::processFromPID(int)+0x80>
c0013c3f:	90                   	nop
c0013c40:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013c43:	5b                   	pop    ebx
c0013c44:	5e                   	pop    esi
c0013c45:	5f                   	pop    edi
c0013c46:	c3                   	ret    
c0013c47:	90                   	nop
c0013c48:	fb                   	sti    
c0013c49:	eb f5                	jmp    c0013c40 <Thr::processFromPID(int)+0x78>
c0013c4b:	90                   	nop
c0013c4c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013c51:	48                   	dec    eax
c0013c52:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013c57:	75 07                	jne    c0013c60 <Thr::processFromPID(int)+0x98>
c0013c59:	fb                   	sti    
c0013c5a:	5b                   	pop    ebx
c0013c5b:	5e                   	pop    esi
c0013c5c:	5f                   	pop    edi
c0013c5d:	c3                   	ret    
c0013c5e:	66 90                	xchg   ax,ax
c0013c60:	5b                   	pop    ebx
c0013c61:	31 c0                	xor    eax,eax
c0013c63:	5e                   	pop    esi
c0013c64:	5f                   	pop    edi
c0013c65:	c3                   	ret    
c0013c66:	66 90                	xchg   ax,ax

c0013c68 <unblockTask(ThreadControlBlock*)>:
c0013c68:	53                   	push   ebx
c0013c69:	83 ec 08             	sub    esp,0x8
c0013c6c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c70:	fa                   	cli    
c0013c71:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013c77:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013c7a:	85 c0                	test   eax,eax
c0013c7c:	74 66                	je     c0013ce4 <unblockTask(ThreadControlBlock*)+0x7c>
c0013c7e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013c81:	48                   	dec    eax
c0013c82:	74 38                	je     c0013cbc <unblockTask(ThreadControlBlock*)+0x54>
c0013c84:	83 ec 0c             	sub    esp,0xc
c0013c87:	68 84 51 02 c0       	push   0xc0025184
c0013c8c:	e8 5b 8a 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c91:	83 c4 10             	add    esp,0x10
c0013c94:	85 c0                	test   eax,eax
c0013c96:	75 1c                	jne    c0013cb4 <unblockTask(ThreadControlBlock*)+0x4c>
c0013c98:	eb 5e                	jmp    c0013cf8 <unblockTask(ThreadControlBlock*)+0x90>
c0013c9a:	66 90                	xchg   ax,ax
c0013c9c:	83 ec 08             	sub    esp,0x8
c0013c9f:	50                   	push   eax
c0013ca0:	68 84 51 02 c0       	push   0xc0025184
c0013ca5:	e8 f2 8d 00 00       	call   c001ca9c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013caa:	83 c4 10             	add    esp,0x10
c0013cad:	85 c0                	test   eax,eax
c0013caf:	74 47                	je     c0013cf8 <unblockTask(ThreadControlBlock*)+0x90>
c0013cb1:	8d 76 00             	lea    esi,[esi+0x0]
c0013cb4:	39 c3                	cmp    ebx,eax
c0013cb6:	75 e4                	jne    c0013c9c <unblockTask(ThreadControlBlock*)+0x34>
c0013cb8:	eb 12                	jmp    c0013ccc <unblockTask(ThreadControlBlock*)+0x64>
c0013cba:	66 90                	xchg   ax,ax
c0013cbc:	83 ec 0c             	sub    esp,0xc
c0013cbf:	68 ba eb 01 c0       	push   0xc001ebba
c0013cc4:	e8 64 68 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0013cc9:	83 c4 10             	add    esp,0x10
c0013ccc:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013cd1:	48                   	dec    eax
c0013cd2:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013cd7:	75 03                	jne    c0013cdc <unblockTask(ThreadControlBlock*)+0x74>
c0013cd9:	fb                   	sti    
c0013cda:	66 90                	xchg   ax,ax
c0013cdc:	83 c4 08             	add    esp,0x8
c0013cdf:	5b                   	pop    ebx
c0013ce0:	c3                   	ret    
c0013ce1:	8d 76 00             	lea    esi,[esi+0x0]
c0013ce4:	83 ec 0c             	sub    esp,0xc
c0013ce7:	68 a3 eb 01 c0       	push   0xc001eba3
c0013cec:	e8 3c 68 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0013cf1:	83 c4 10             	add    esp,0x10
c0013cf4:	eb d6                	jmp    c0013ccc <unblockTask(ThreadControlBlock*)+0x64>
c0013cf6:	66 90                	xchg   ax,ax
c0013cf8:	83 ec 08             	sub    esp,0x8
c0013cfb:	53                   	push   ebx
c0013cfc:	68 84 51 02 c0       	push   0xc0025184
c0013d01:	e8 a6 8a 00 00       	call   c001c7ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013d06:	83 c4 10             	add    esp,0x10
c0013d09:	eb c1                	jmp    c0013ccc <unblockTask(ThreadControlBlock*)+0x64>
c0013d0b:	90                   	nop

c0013d0c <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013d0c:	55                   	push   ebp
c0013d0d:	57                   	push   edi
c0013d0e:	56                   	push   esi
c0013d0f:	53                   	push   ebx
c0013d10:	83 ec 1c             	sub    esp,0x1c
c0013d13:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013d17:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013d1a:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0013d20:	85 ed                	test   ebp,ebp
c0013d22:	7e 24                	jle    c0013d48 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0013d24:	31 f6                	xor    esi,esi
c0013d26:	66 90                	xchg   ax,ax
c0013d28:	83 ec 0c             	sub    esp,0xc
c0013d2b:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0013d32:	46                   	inc    esi
c0013d33:	57                   	push   edi
c0013d34:	e8 90 3a ff ff       	call   c00077c9 <free>
c0013d39:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013d3c:	83 c4 10             	add    esp,0x10
c0013d3f:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0013d45:	7f e1                	jg     c0013d28 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0013d47:	90                   	nop
c0013d48:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013d52:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013d57:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0013d5a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013d5d:	d3 c0                	rol    eax,cl
c0013d5f:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0013d66:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013d69:	89 f7                	mov    edi,esi
c0013d6b:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0013d73:	0f 85 77 01 00 00    	jne    c0013ef0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013d79:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0013d7f:	85 ed                	test   ebp,ebp
c0013d81:	74 1d                	je     c0013da0 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0013d83:	83 ec 0c             	sub    esp,0xc
c0013d86:	55                   	push   ebp
c0013d87:	e8 34 c1 ff ff       	call   c000fec0 <EnvVarContainer::~EnvVarContainer()>
c0013d8c:	59                   	pop    ecx
c0013d8d:	5e                   	pop    esi
c0013d8e:	6a 0c                	push   0xc
c0013d90:	55                   	push   ebp
c0013d91:	e8 a1 66 ff ff       	call   c000a437 <operator delete(void*, unsigned long)>
c0013d96:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013d99:	83 c4 10             	add    esp,0x10
c0013d9c:	89 f7                	mov    edi,esi
c0013d9e:	66 90                	xchg   ax,ax
c0013da0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013da6:	85 c0                	test   eax,eax
c0013da8:	0f 84 b6 00 00 00    	je     c0013e64 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013dae:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0013db1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013db5:	31 c9                	xor    ecx,ecx
c0013db7:	eb 17                	jmp    c0013dd0 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0013db9:	8d 76 00             	lea    esi,[esi+0x0]
c0013dbc:	41                   	inc    ecx
c0013dbd:	83 f9 10             	cmp    ecx,0x10
c0013dc0:	0f 84 9e 00 00 00    	je     c0013e64 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013dc6:	66 90                	xchg   ax,ax
c0013dc8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013dce:	66 90                	xchg   ax,ax
c0013dd0:	31 d2                	xor    edx,edx
c0013dd2:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0013dd9:	d3 fa                	sar    edx,cl
c0013ddb:	83 e2 01             	and    edx,0x1
c0013dde:	74 dc                	je     c0013dbc <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013de0:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0013de3:	01 d2                	add    edx,edx
c0013de5:	01 ca                	add    edx,ecx
c0013de7:	8d 14 92             	lea    edx,[edx+edx*4]
c0013dea:	01 d0                	add    eax,edx
c0013dec:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0013df2:	83 fd 07             	cmp    ebp,0x7
c0013df5:	75 c5                	jne    c0013dbc <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013df7:	05 40 02 00 00       	add    eax,0x240
c0013dfc:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0013dff:	83 fd ff             	cmp    ebp,0xffffffff
c0013e02:	0f 8c f0 00 00 00    	jl     c0013ef8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0013e08:	0f 84 ae 01 00 00    	je     c0013fbc <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0013e0e:	85 ed                	test   ebp,ebp
c0013e10:	0f 84 92 01 00 00    	je     c0013fa8 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0013e16:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0013e18:	75 a2                	jne    c0013dbc <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013e1a:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013e20:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013e24:	01 d0                	add    eax,edx
c0013e26:	66 90                	xchg   ax,ax
c0013e28:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0013e2c:	83 ec 0c             	sub    esp,0xc
c0013e2f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0013e35:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013e38:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013e3e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0013e45:	50                   	push   eax
c0013e46:	e8 1d fe ff ff       	call   c0013c68 <unblockTask(ThreadControlBlock*)>
c0013e4b:	83 c4 10             	add    esp,0x10
c0013e4e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013e51:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013e55:	89 f7                	mov    edi,esi
c0013e57:	41                   	inc    ecx
c0013e58:	83 f9 10             	cmp    ecx,0x10
c0013e5b:	0f 85 67 ff ff ff    	jne    c0013dc8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0013e61:	8d 76 00             	lea    esi,[esi+0x0]
c0013e64:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0013e6a:	85 c0                	test   eax,eax
c0013e6c:	74 62                	je     c0013ed0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013e6e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0013e74:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0013e7a:	74 54                	je     c0013ed0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013e7c:	83 ec 0c             	sub    esp,0xc
c0013e7f:	68 84 51 02 c0       	push   0xc0025184
c0013e84:	e8 63 88 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013e89:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013e90:	89 c7                	mov    edi,eax
c0013e92:	e8 39 88 00 00       	call   c001c6d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013e97:	83 c4 10             	add    esp,0x10
c0013e9a:	84 c0                	test   al,al
c0013e9c:	0f 84 ce 00 00 00    	je     c0013f70 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0013ea2:	66 90                	xchg   ax,ax
c0013ea4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013ea7:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013ead:	85 d2                	test   edx,edx
c0013eaf:	74 0f                	je     c0013ec0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0013eb1:	83 ec 0c             	sub    esp,0xc
c0013eb4:	8b 02                	mov    eax,DWORD PTR [edx]
c0013eb6:	52                   	push   edx
c0013eb7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013eba:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013ebd:	83 c4 10             	add    esp,0x10
c0013ec0:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0013eca:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0013ecd:	8d 76 00             	lea    esi,[esi+0x0]
c0013ed0:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0013ed6:	85 db                	test   ebx,ebx
c0013ed8:	74 16                	je     c0013ef0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013eda:	83 ec 0c             	sub    esp,0xc
c0013edd:	53                   	push   ebx
c0013ede:	e8 ed 58 ff ff       	call   c00097d0 <VAS::~VAS()>
c0013ee3:	58                   	pop    eax
c0013ee4:	5a                   	pop    edx
c0013ee5:	6a 14                	push   0x14
c0013ee7:	53                   	push   ebx
c0013ee8:	e8 4a 65 ff ff       	call   c000a437 <operator delete(void*, unsigned long)>
c0013eed:	83 c4 10             	add    esp,0x10
c0013ef0:	83 c4 1c             	add    esp,0x1c
c0013ef3:	5b                   	pop    ebx
c0013ef4:	5e                   	pop    esi
c0013ef5:	5f                   	pop    edi
c0013ef6:	5d                   	pop    ebp
c0013ef7:	c3                   	ret    
c0013ef8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013efc:	83 ec 0c             	sub    esp,0xc
c0013eff:	68 6c ec 01 c0       	push   0xc001ec6c
c0013f04:	e8 a6 c2 ff ff       	call   c00101af <KePanic(char const*)>
c0013f09:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013f0c:	83 c4 10             	add    esp,0x10
c0013f0f:	89 f7                	mov    edi,esi
c0013f11:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013f15:	e9 a2 fe ff ff       	jmp    c0013dbc <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013f1a:	66 90                	xchg   ax,ax
c0013f1c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013f22:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0013f28:	75 1e                	jne    c0013f48 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013f2a:	83 ec 0c             	sub    esp,0xc
c0013f2d:	68 d4 ec 01 c0       	push   0xc001ecd4
c0013f32:	e8 f6 65 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0013f37:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013f3e:	e8 5d fa ff ff       	call   c00139a0 <blockTask(TaskState)>
c0013f43:	83 c4 10             	add    esp,0x10
c0013f46:	66 90                	xchg   ax,ax
c0013f48:	83 ec 08             	sub    esp,0x8
c0013f4b:	56                   	push   esi
c0013f4c:	68 84 51 02 c0       	push   0xc0025184
c0013f51:	e8 56 88 00 00       	call   c001c7ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013f56:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013f5d:	e8 8a 87 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f62:	83 c4 10             	add    esp,0x10
c0013f65:	39 f8                	cmp    eax,edi
c0013f67:	0f 84 37 ff ff ff    	je     c0013ea4 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0013f6d:	8d 76 00             	lea    esi,[esi+0x0]
c0013f70:	83 ec 0c             	sub    esp,0xc
c0013f73:	68 84 51 02 c0       	push   0xc0025184
c0013f78:	e8 6f 87 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f7d:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013f84:	89 c6                	mov    esi,eax
c0013f86:	e8 69 87 00 00       	call   c001c6f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013f8b:	83 c4 10             	add    esp,0x10
c0013f8e:	39 f3                	cmp    ebx,esi
c0013f90:	74 b6                	je     c0013f48 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013f92:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0013f95:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013f98:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0013f9e:	75 a8                	jne    c0013f48 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013fa0:	e9 77 ff ff ff       	jmp    c0013f1c <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0013fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0013fa8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013fac:	83 ec 0c             	sub    esp,0xc
c0013faf:	68 a0 ec 01 c0       	push   0xc001eca0
c0013fb4:	e9 4b ff ff ff       	jmp    c0013f04 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0013fb9:	8d 76 00             	lea    esi,[esi+0x0]
c0013fbc:	8b 36                	mov    esi,DWORD PTR [esi]
c0013fbe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013fc2:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0013fc5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013fc8:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0013fce:	01 d7                	add    edi,edx
c0013fd0:	89 f8                	mov    eax,edi
c0013fd2:	e9 51 fe ff ff       	jmp    c0013e28 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0013fd7:	90                   	nop

c0013fd8 <cleanerTaskFunction(void*)>:
c0013fd8:	53                   	push   ebx
c0013fd9:	83 ec 08             	sub    esp,0x8
c0013fdc:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013fe1:	48                   	dec    eax
c0013fe2:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013fe7:	75 03                	jne    c0013fec <cleanerTaskFunction(void*)+0x14>
c0013fe9:	fb                   	sti    
c0013fea:	66 90                	xchg   ax,ax
c0013fec:	fa                   	cli    
c0013fed:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013ff2:	80 3d 4c 51 02 c0 00 	cmp    BYTE PTR ds:0xc002514c,0x0
c0013ff9:	8d 50 01             	lea    edx,[eax+0x1]
c0013ffc:	89 15 68 51 02 c0    	mov    DWORD PTR ds:0xc0025168,edx
c0014002:	0f 84 ac 00 00 00    	je     c00140b4 <cleanerTaskFunction(void*)+0xdc>
c0014008:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001400d:	85 c0                	test   eax,eax
c001400f:	75 03                	jne    c0014014 <cleanerTaskFunction(void*)+0x3c>
c0014011:	fb                   	sti    
c0014012:	66 90                	xchg   ax,ax
c0014014:	c6 05 4c 51 02 c0 00 	mov    BYTE PTR ds:0xc002514c,0x0
c001401b:	fa                   	cli    
c001401c:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014022:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c0014028:	fa                   	cli    
c0014029:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001402f:	eb 2b                	jmp    c001405c <cleanerTaskFunction(void*)+0x84>
c0014031:	8d 76 00             	lea    esi,[esi+0x0]
c0014034:	83 ec 0c             	sub    esp,0xc
c0014037:	68 6c 51 02 c0       	push   0xc002516c
c001403c:	e8 ab 86 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014041:	c7 04 24 6c 51 02 c0 	mov    DWORD PTR [esp],0xc002516c
c0014048:	89 c3                	mov    ebx,eax
c001404a:	e8 a5 86 00 00       	call   c001c6f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001404f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014052:	e8 b5 fc ff ff       	call   c0013d0c <cleanupTerminatedTask(ThreadControlBlock*)>
c0014057:	83 c4 10             	add    esp,0x10
c001405a:	66 90                	xchg   ax,ax
c001405c:	83 ec 0c             	sub    esp,0xc
c001405f:	68 6c 51 02 c0       	push   0xc002516c
c0014064:	e8 67 86 00 00       	call   c001c6d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014069:	83 c4 10             	add    esp,0x10
c001406c:	84 c0                	test   al,al
c001406e:	74 c4                	je     c0014034 <cleanerTaskFunction(void*)+0x5c>
c0014070:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014075:	48                   	dec    eax
c0014076:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001407b:	75 03                	jne    c0014080 <cleanerTaskFunction(void*)+0xa8>
c001407d:	fb                   	sti    
c001407e:	66 90                	xchg   ax,ax
c0014080:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0014085:	48                   	dec    eax
c0014086:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c001408b:	0f 85 4b ff ff ff    	jne    c0013fdc <cleanerTaskFunction(void*)+0x4>
c0014091:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0014096:	85 c0                	test   eax,eax
c0014098:	0f 84 3e ff ff ff    	je     c0013fdc <cleanerTaskFunction(void*)+0x4>
c001409e:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c00140a8:	e8 f7 f6 ff ff       	call   c00137a4 <schedule()>
c00140ad:	e9 2a ff ff ff       	jmp    c0013fdc <cleanerTaskFunction(void*)+0x4>
c00140b2:	66 90                	xchg   ax,ax
c00140b4:	83 ec 0c             	sub    esp,0xc
c00140b7:	6a 02                	push   0x2
c00140b9:	e8 ba f8 ff ff       	call   c0013978 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00140be:	83 c4 10             	add    esp,0x10
c00140c1:	e9 4e ff ff ff       	jmp    c0014014 <cleanerTaskFunction(void*)+0x3c>
c00140c6:	66 90                	xchg   ax,ax

c00140c8 <terminateTask(int)>:
c00140c8:	83 ec 14             	sub    esp,0x14
c00140cb:	fa                   	cli    
c00140cc:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00140d2:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c00140d8:	fa                   	cli    
c00140d9:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00140df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00140e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140e8:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00140eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140f0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00140f3:	50                   	push   eax
c00140f4:	68 6c 51 02 c0       	push   0xc002516c
c00140f9:	e8 ae 86 00 00       	call   c001c7ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00140fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014103:	83 c4 10             	add    esp,0x10
c0014106:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001410d:	a1 48 51 02 c0       	mov    eax,ds:0xc0025148
c0014112:	85 c0                	test   eax,eax
c0014114:	74 5e                	je     c0014174 <terminateTask(int)+0xac>
c0014116:	83 ec 0c             	sub    esp,0xc
c0014119:	c6 05 4c 51 02 c0 01 	mov    BYTE PTR ds:0xc002514c,0x1
c0014120:	50                   	push   eax
c0014121:	e8 42 fb ff ff       	call   c0013c68 <unblockTask(ThreadControlBlock*)>
c0014126:	83 c4 10             	add    esp,0x10
c0014129:	8d 76 00             	lea    esi,[esi+0x0]
c001412c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014131:	48                   	dec    eax
c0014132:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014137:	75 03                	jne    c001413c <terminateTask(int)+0x74>
c0014139:	fb                   	sti    
c001413a:	66 90                	xchg   ax,ax
c001413c:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0014141:	48                   	dec    eax
c0014142:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0014147:	75 0b                	jne    c0014154 <terminateTask(int)+0x8c>
c0014149:	83 3d 60 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025160,0x0
c0014150:	75 36                	jne    c0014188 <terminateTask(int)+0xc0>
c0014152:	66 90                	xchg   ax,ax
c0014154:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014159:	48                   	dec    eax
c001415a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001415f:	75 03                	jne    c0014164 <terminateTask(int)+0x9c>
c0014161:	fb                   	sti    
c0014162:	66 90                	xchg   ax,ax
c0014164:	fa                   	cli    
c0014165:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001416b:	90                   	nop
c001416c:	e8 33 f6 ff ff       	call   c00137a4 <schedule()>
c0014171:	eb e1                	jmp    c0014154 <terminateTask(int)+0x8c>
c0014173:	90                   	nop
c0014174:	83 ec 0c             	sub    esp,0xc
c0014177:	68 d1 eb 01 c0       	push   0xc001ebd1
c001417c:	e8 ac 63 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0014181:	83 c4 10             	add    esp,0x10
c0014184:	eb a6                	jmp    c001412c <terminateTask(int)+0x64>
c0014186:	66 90                	xchg   ax,ax
c0014188:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0014192:	eb d8                	jmp    c001416c <terminateTask(int)+0xa4>

c0014194 <Thr::terminateFromIRQ(int)>:
c0014194:	83 ec 18             	sub    esp,0x18
c0014197:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001419b:	50                   	push   eax
c001419c:	e8 27 ff ff ff       	call   c00140c8 <terminateTask(int)>
c00141a1:	90                   	nop
c00141a2:	66 90                	xchg   ax,ax

c00141a4 <Semaphore::release()>:
c00141a4:	83 ec 0c             	sub    esp,0xc
c00141a7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00141ab:	fa                   	cli    
c00141ac:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c00141b1:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00141b7:	8d 48 01             	lea    ecx,[eax+0x1]
c00141ba:	89 0d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ecx
c00141c0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00141c3:	85 c9                	test   ecx,ecx
c00141c5:	74 41                	je     c0014208 <Semaphore::release()+0x64>
c00141c7:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00141ca:	83 ec 0c             	sub    esp,0xc
c00141cd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00141d0:	51                   	push   ecx
c00141d1:	e8 92 fa ff ff       	call   c0013c68 <unblockTask(ThreadControlBlock*)>
c00141d6:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c00141db:	83 c4 10             	add    esp,0x10
c00141de:	48                   	dec    eax
c00141df:	90                   	nop
c00141e0:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c00141e5:	85 c0                	test   eax,eax
c00141e7:	75 0b                	jne    c00141f4 <Semaphore::release()+0x50>
c00141e9:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c00141ee:	85 c0                	test   eax,eax
c00141f0:	75 1e                	jne    c0014210 <Semaphore::release()+0x6c>
c00141f2:	66 90                	xchg   ax,ax
c00141f4:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00141f9:	48                   	dec    eax
c00141fa:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00141ff:	75 03                	jne    c0014204 <Semaphore::release()+0x60>
c0014201:	fb                   	sti    
c0014202:	66 90                	xchg   ax,ax
c0014204:	83 c4 0c             	add    esp,0xc
c0014207:	c3                   	ret    
c0014208:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001420b:	eb d3                	jmp    c00141e0 <Semaphore::release()+0x3c>
c001420d:	8d 76 00             	lea    esi,[esi+0x0]
c0014210:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c001421a:	e8 85 f5 ff ff       	call   c00137a4 <schedule()>
c001421f:	eb d3                	jmp    c00141f4 <Semaphore::release()+0x50>
c0014221:	8d 76 00             	lea    esi,[esi+0x0]

c0014224 <__static_initialization_and_destruction_0(int, int)>:
c0014224:	83 ec 0c             	sub    esp,0xc
c0014227:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001422c:	0f 85 8e 00 00 00    	jne    c00142c0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0014232:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001423a:	0f 85 80 00 00 00    	jne    c00142c0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0014240:	83 ec 0c             	sub    esp,0xc
c0014243:	68 84 51 02 c0       	push   0xc0025184
c0014248:	e8 0b 88 00 00       	call   c001ca58 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001424d:	83 c4 10             	add    esp,0x10
c0014250:	83 ec 04             	sub    esp,0x4
c0014253:	68 84 f7 01 c0       	push   0xc001f784
c0014258:	68 84 51 02 c0       	push   0xc0025184
c001425d:	68 08 ca 01 c0       	push   0xc001ca08
c0014262:	e8 80 61 ff ff       	call   c000a3e7 <__cxa_atexit>
c0014267:	83 c4 10             	add    esp,0x10
c001426a:	83 ec 0c             	sub    esp,0xc
c001426d:	68 78 51 02 c0       	push   0xc0025178
c0014272:	e8 e1 87 00 00       	call   c001ca58 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014277:	83 c4 10             	add    esp,0x10
c001427a:	83 ec 04             	sub    esp,0x4
c001427d:	68 84 f7 01 c0       	push   0xc001f784
c0014282:	68 78 51 02 c0       	push   0xc0025178
c0014287:	68 08 ca 01 c0       	push   0xc001ca08
c001428c:	e8 56 61 ff ff       	call   c000a3e7 <__cxa_atexit>
c0014291:	83 c4 10             	add    esp,0x10
c0014294:	83 ec 0c             	sub    esp,0xc
c0014297:	68 6c 51 02 c0       	push   0xc002516c
c001429c:	e8 b7 87 00 00       	call   c001ca58 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00142a1:	83 c4 10             	add    esp,0x10
c00142a4:	83 ec 04             	sub    esp,0x4
c00142a7:	68 84 f7 01 c0       	push   0xc001f784
c00142ac:	68 6c 51 02 c0       	push   0xc002516c
c00142b1:	68 08 ca 01 c0       	push   0xc001ca08
c00142b6:	e8 2c 61 ff ff       	call   c000a3e7 <__cxa_atexit>
c00142bb:	83 c4 10             	add    esp,0x10
c00142be:	66 90                	xchg   ax,ax
c00142c0:	90                   	nop
c00142c1:	83 c4 0c             	add    esp,0xc
c00142c4:	c3                   	ret    
c00142c5:	8d 76 00             	lea    esi,[esi+0x0]

c00142c8 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00142c8:	83 ec 0c             	sub    esp,0xc
c00142cb:	83 ec 08             	sub    esp,0x8
c00142ce:	68 ff ff 00 00       	push   0xffff
c00142d3:	6a 01                	push   0x1
c00142d5:	e8 4a ff ff ff       	call   c0014224 <__static_initialization_and_destruction_0(int, int)>
c00142da:	83 c4 10             	add    esp,0x10
c00142dd:	83 c4 0c             	add    esp,0xc
c00142e0:	c3                   	ret    

c00142e1 <Vm::inbv(unsigned short)>:
c00142e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00142e5:	66 81 fa fe fe       	cmp    dx,0xfefe
c00142ea:	75 06                	jne    c00142f2 <Vm::inbv(unsigned short)+0x11>
c00142ec:	a0 cc 51 02 c0       	mov    al,ds:0xc00251cc
c00142f1:	c3                   	ret    
c00142f2:	ec                   	in     al,dx
c00142f3:	c3                   	ret    

c00142f4 <Vm::outbv(unsigned short, unsigned char)>:
c00142f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00142f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00142fc:	66 81 fa fe fe       	cmp    dx,0xfefe
c0014301:	75 25                	jne    c0014328 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0014303:	8b 0d cc 51 02 c0    	mov    ecx,DWORD PTR ds:0xc00251cc
c0014309:	8d 51 01             	lea    edx,[ecx+0x1]
c001430c:	88 81 e0 51 02 c0    	mov    BYTE PTR [ecx-0x3ffdae20],al
c0014312:	89 15 cc 51 02 c0    	mov    DWORD PTR ds:0xc00251cc,edx
c0014318:	83 fa 20             	cmp    edx,0x20
c001431b:	75 0c                	jne    c0014329 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001431d:	c7 05 cc 51 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x1f
c0014327:	c3                   	ret    
c0014328:	ee                   	out    dx,al
c0014329:	c3                   	ret    

c001432a <Vm::realToLinear(unsigned short, unsigned short)>:
c001432a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001432f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014334:	c1 e0 04             	shl    eax,0x4
c0014337:	01 d0                	add    eax,edx
c0014339:	c3                   	ret    

c001433a <Vm::getSegment(unsigned int)>:
c001433a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001433e:	c1 e8 10             	shr    eax,0x10
c0014341:	c3                   	ret    

c0014342 <Vm::getOffset(unsigned int)>:
c0014342:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014346:	c3                   	ret    

c0014347 <Vm::mainloop2()>:
c0014347:	83 ec 18             	sub    esp,0x18
c001434a:	fa                   	cli    
c001434b:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014351:	6a 02                	push   0x2
c0014353:	c6 05 c5 51 02 c0 01 	mov    BYTE PTR ds:0xc00251c5,0x1
c001435a:	e8 19 f6 ff ff       	call   c0013978 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001435f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014364:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0014368:	52                   	push   edx
c0014369:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c001436d:	52                   	push   edx
c001436e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0014372:	52                   	push   edx
c0014373:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0014377:	50                   	push   eax
c0014378:	e8 92 be fe ff       	call   c000020f <goToVM86>
c001437d:	83 c4 2c             	add    esp,0x2c
c0014380:	c3                   	ret    

c0014381 <Vm::mainVm8086Loop(void*)>:
c0014381:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014386:	48                   	dec    eax
c0014387:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001438c:	75 01                	jne    c001438f <Vm::mainVm8086Loop(void*)+0xe>
c001438e:	fb                   	sti    
c001438f:	eb b6                	jmp    c0014347 <Vm::mainloop2()>

c0014391 <Vm::mainloop3(unsigned long)>:
c0014391:	83 ec 18             	sub    esp,0x18
c0014394:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014398:	fa                   	cli    
c0014399:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001439f:	6a 02                	push   0x2
c00143a1:	c6 05 c4 51 02 c0 01 	mov    BYTE PTR ds:0xc00251c4,0x1
c00143a8:	a3 c0 51 02 c0       	mov    ds:0xc00251c0,eax
c00143ad:	e8 c6 f5 ff ff       	call   c0013978 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00143b2:	83 c4 1c             	add    esp,0x1c
c00143b5:	eb 90                	jmp    c0014347 <Vm::mainloop2()>

c00143b7 <Vm::initialise8086()>:
c00143b7:	83 ec 0c             	sub    esp,0xc
c00143ba:	68 80 00 00 00       	push   0x80
c00143bf:	6a 00                	push   0x0
c00143c1:	68 81 43 01 c0       	push   0xc0014381
c00143c6:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c00143cc:	e8 b3 f1 ff ff       	call   c0013584 <Process::createThread(void (*)(void*), void*, int)>
c00143d1:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00143d8:	a3 c8 51 02 c0       	mov    ds:0xc00251c8,eax
c00143dd:	68 00 01 00 00       	push   0x100
c00143e2:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00143e7:	6a 00                	push   0x0
c00143e9:	6a 00                	push   0x0
c00143eb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00143f1:	e8 38 58 ff ff       	call   c0009c2e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00143f6:	83 c4 2c             	add    esp,0x2c
c00143f9:	c3                   	ret    

c00143fa <Vm::finish8086()>:
c00143fa:	53                   	push   ebx
c00143fb:	83 ec 08             	sub    esp,0x8
c00143fe:	fa                   	cli    
c00143ff:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014405:	80 3d c4 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251c4,0x0
c001440c:	75 15                	jne    c0014423 <Vm::finish8086()+0x29>
c001440e:	e8 91 f3 ff ff       	call   c00137a4 <schedule()>
c0014413:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014418:	48                   	dec    eax
c0014419:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001441e:	75 de                	jne    c00143fe <Vm::finish8086()+0x4>
c0014420:	fb                   	sti    
c0014421:	eb db                	jmp    c00143fe <Vm::finish8086()+0x4>
c0014423:	83 ec 0c             	sub    esp,0xc
c0014426:	8b 1d c0 51 02 c0    	mov    ebx,DWORD PTR ds:0xc00251c0
c001442c:	ff 35 c8 51 02 c0    	push   DWORD PTR ds:0xc00251c8
c0014432:	c6 05 c4 51 02 c0 00 	mov    BYTE PTR ds:0xc00251c4,0x0
c0014439:	e8 2a f8 ff ff       	call   c0013c68 <unblockTask(ThreadControlBlock*)>
c001443e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014443:	83 c4 10             	add    esp,0x10
c0014446:	8d 50 ff             	lea    edx,[eax-0x1]
c0014449:	89 15 68 51 02 c0    	mov    DWORD PTR ds:0xc0025168,edx
c001444f:	85 d2                	test   edx,edx
c0014451:	75 01                	jne    c0014454 <Vm::finish8086()+0x5a>
c0014453:	fb                   	sti    
c0014454:	89 d8                	mov    eax,ebx
c0014456:	83 c4 08             	add    esp,0x8
c0014459:	5b                   	pop    ebx
c001445a:	c3                   	ret    

c001445b <Vm::getOutput8086(unsigned char*)>:
c001445b:	57                   	push   edi
c001445c:	8b 0d cc 51 02 c0    	mov    ecx,DWORD PTR ds:0xc00251cc
c0014462:	56                   	push   esi
c0014463:	be e0 51 02 c0       	mov    esi,0xc00251e0
c0014468:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001446c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001446e:	a1 cc 51 02 c0       	mov    eax,ds:0xc00251cc
c0014473:	5e                   	pop    esi
c0014474:	c7 05 cc 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x0
c001447e:	5f                   	pop    edi
c001447f:	c3                   	ret    

c0014480 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014480:	55                   	push   ebp
c0014481:	57                   	push   edi
c0014482:	56                   	push   esi
c0014483:	53                   	push   ebx
c0014484:	83 ec 0c             	sub    esp,0xc
c0014487:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001448b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001448f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0014493:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0014497:	fa                   	cli    
c0014498:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001449e:	80 3d c5 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251c5,0x0
c00144a5:	75 15                	jne    c00144bc <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00144a7:	e8 f8 f2 ff ff       	call   c00137a4 <schedule()>
c00144ac:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00144b1:	48                   	dec    eax
c00144b2:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00144b7:	75 de                	jne    c0014497 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00144b9:	fb                   	sti    
c00144ba:	eb db                	jmp    c0014497 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00144bc:	a1 c8 51 02 c0       	mov    eax,ds:0xc00251c8
c00144c1:	c7 05 cc 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x0
c00144cb:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00144cf:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00144d3:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00144d7:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00144db:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00144df:	0f b7 ff             	movzx  edi,di
c00144e2:	0f b7 f6             	movzx  esi,si
c00144e5:	50                   	push   eax
c00144e6:	6a 20                	push   0x20
c00144e8:	6a 00                	push   0x0
c00144ea:	68 e0 51 02 c0       	push   0xc00251e0
c00144ef:	e8 dc bf fe ff       	call   c00004d0 <memset>
c00144f4:	5a                   	pop    edx
c00144f5:	59                   	pop    ecx
c00144f6:	57                   	push   edi
c00144f7:	56                   	push   esi
c00144f8:	e8 2d fe ff ff       	call   c001432a <Vm::realToLinear(unsigned short, unsigned short)>
c00144fd:	83 c4 10             	add    esp,0x10
c0014500:	89 c7                	mov    edi,eax
c0014502:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014506:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001450a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001450c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014511:	c6 05 c5 51 02 c0 00 	mov    BYTE PTR ds:0xc00251c5,0x0
c0014518:	48                   	dec    eax
c0014519:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001451e:	75 01                	jne    c0014521 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0014520:	fb                   	sti    
c0014521:	83 ec 0c             	sub    esp,0xc
c0014524:	ff 35 c8 51 02 c0    	push   DWORD PTR ds:0xc00251c8
c001452a:	e8 39 f7 ff ff       	call   c0013c68 <unblockTask(ThreadControlBlock*)>
c001452f:	83 c4 1c             	add    esp,0x1c
c0014532:	b0 01                	mov    al,0x1
c0014534:	5b                   	pop    ebx
c0014535:	5e                   	pop    esi
c0014536:	5f                   	pop    edi
c0014537:	5d                   	pop    ebp
c0014538:	c3                   	ret    

c0014539 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014539:	55                   	push   ebp
c001453a:	57                   	push   edi
c001453b:	56                   	push   esi
c001453c:	53                   	push   ebx
c001453d:	83 ec 2c             	sub    esp,0x2c
c0014540:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0014544:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0014548:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001454c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0014550:	fa                   	cli    
c0014551:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014557:	0f b6 35 c5 51 02 c0 	movzx  esi,BYTE PTR ds:0xc00251c5
c001455e:	89 f0                	mov    eax,esi
c0014560:	84 c0                	test   al,al
c0014562:	75 1d                	jne    c0014581 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0014564:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014568:	e8 37 f2 ff ff       	call   c00137a4 <schedule()>
c001456d:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014572:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014576:	48                   	dec    eax
c0014577:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001457c:	75 d2                	jne    c0014550 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001457e:	fb                   	sti    
c001457f:	eb cf                	jmp    c0014550 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014581:	a1 c8 51 02 c0       	mov    eax,ds:0xc00251c8
c0014586:	c7 05 cc 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x0
c0014590:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0014594:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014598:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c001459c:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c00145a0:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00145a4:	50                   	push   eax
c00145a5:	6a 20                	push   0x20
c00145a7:	6a 00                	push   0x0
c00145a9:	68 e0 51 02 c0       	push   0xc00251e0
c00145ae:	e8 1d bf fe ff       	call   c00004d0 <memset>
c00145b3:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00145ba:	e8 fa 31 ff ff       	call   c00077b9 <malloc>
c00145bf:	83 c4 0c             	add    esp,0xc
c00145c2:	89 c3                	mov    ebx,eax
c00145c4:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c00145ca:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00145ce:	50                   	push   eax
c00145cf:	e8 ce 64 ff ff       	call   c000aaa2 <File::File(char const*, Process*)>
c00145d4:	83 c4 10             	add    esp,0x10
c00145d7:	85 db                	test   ebx,ebx
c00145d9:	75 0a                	jne    c00145e5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c00145db:	83 ec 0c             	sub    esp,0xc
c00145de:	68 fc ec 01 c0       	push   0xc001ecfc
c00145e3:	eb 3e                	jmp    c0014623 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00145e5:	50                   	push   eax
c00145e6:	8d 44 24 17          	lea    eax,[esp+0x17]
c00145ea:	50                   	push   eax
c00145eb:	8d 44 24 20          	lea    eax,[esp+0x20]
c00145ef:	50                   	push   eax
c00145f0:	53                   	push   ebx
c00145f1:	e8 18 68 ff ff       	call   c000ae0e <File::stat(unsigned long long*, bool*)>
c00145f6:	83 c4 10             	add    esp,0x10
c00145f9:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00145fe:	74 0a                	je     c001460a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0014600:	83 ec 0c             	sub    esp,0xc
c0014603:	68 10 ed 01 c0       	push   0xc001ed10
c0014608:	eb 19                	jmp    c0014623 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001460a:	51                   	push   ecx
c001460b:	51                   	push   ecx
c001460c:	6a 01                	push   0x1
c001460e:	53                   	push   ebx
c001460f:	e8 4e 65 ff ff       	call   c000ab62 <File::open(FileOpenMode)>
c0014614:	83 c4 10             	add    esp,0x10
c0014617:	85 c0                	test   eax,eax
c0014619:	74 24                	je     c001463f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001461b:	83 ec 0c             	sub    esp,0xc
c001461e:	68 29 ed 01 c0       	push   0xc001ed29
c0014623:	e8 87 bb ff ff       	call   c00101af <KePanic(char const*)>
c0014628:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001462d:	83 c4 10             	add    esp,0x10
c0014630:	48                   	dec    eax
c0014631:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014636:	85 c0                	test   eax,eax
c0014638:	75 01                	jne    c001463b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001463a:	fb                   	sti    
c001463b:	31 f6                	xor    esi,esi
c001463d:	eb 58                	jmp    c0014697 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001463f:	0f b7 ed             	movzx  ebp,bp
c0014642:	50                   	push   eax
c0014643:	0f b7 ff             	movzx  edi,di
c0014646:	50                   	push   eax
c0014647:	55                   	push   ebp
c0014648:	57                   	push   edi
c0014649:	e8 dc fc ff ff       	call   c001432a <Vm::realToLinear(unsigned short, unsigned short)>
c001464e:	5a                   	pop    edx
c001464f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014651:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014655:	51                   	push   ecx
c0014656:	50                   	push   eax
c0014657:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001465b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001465f:	53                   	push   ebx
c0014660:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0014663:	83 c4 14             	add    esp,0x14
c0014666:	53                   	push   ebx
c0014667:	e8 54 65 ff ff       	call   c000abc0 <File::close()>
c001466c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014671:	83 c4 10             	add    esp,0x10
c0014674:	48                   	dec    eax
c0014675:	c6 05 c5 51 02 c0 00 	mov    BYTE PTR ds:0xc00251c5,0x0
c001467c:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014681:	85 c0                	test   eax,eax
c0014683:	75 01                	jne    c0014686 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0014685:	fb                   	sti    
c0014686:	83 ec 0c             	sub    esp,0xc
c0014689:	ff 35 c8 51 02 c0    	push   DWORD PTR ds:0xc00251c8
c001468f:	e8 d4 f5 ff ff       	call   c0013c68 <unblockTask(ThreadControlBlock*)>
c0014694:	83 c4 10             	add    esp,0x10
c0014697:	83 c4 2c             	add    esp,0x2c
c001469a:	89 f0                	mov    eax,esi
c001469c:	5b                   	pop    ebx
c001469d:	5e                   	pop    esi
c001469e:	5f                   	pop    edi
c001469f:	5d                   	pop    ebp
c00146a0:	c3                   	ret    

c00146a1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00146a1:	57                   	push   edi
c00146a2:	56                   	push   esi
c00146a3:	53                   	push   ebx
c00146a4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00146a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146ac:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00146b0:	83 e8 06             	sub    eax,0x6
c00146b3:	0f b7 c0             	movzx  eax,ax
c00146b6:	50                   	push   eax
c00146b7:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00146bc:	50                   	push   eax
c00146bd:	e8 68 fc ff ff       	call   c001432a <Vm::realToLinear(unsigned short, unsigned short)>
c00146c2:	5a                   	pop    edx
c00146c3:	5e                   	pop    esi
c00146c4:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00146c7:	8d 56 fa             	lea    edx,[esi-0x6]
c00146ca:	81 e2 ff ff 00 00    	and    edx,0xffff
c00146d0:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00146d3:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00146d6:	83 c2 02             	add    edx,0x2
c00146d9:	66 89 10             	mov    WORD PTR [eax],dx
c00146dc:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00146df:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00146e3:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00146e6:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00146ea:	89 d6                	mov    esi,edx
c00146ec:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00146f2:	66 81 e6 ff fd       	and    si,0xfdff
c00146f7:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c00146fb:	74 07                	je     c0014704 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00146fd:	89 d6                	mov    esi,edx
c00146ff:	66 81 ce 00 02       	or     si,0x200
c0014704:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0014708:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001470d:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014711:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0014719:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001471c:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0014724:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0014727:	5b                   	pop    ebx
c0014728:	5e                   	pop    esi
c0014729:	5f                   	pop    edi
c001472a:	c3                   	ret    

c001472b <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001472b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014730:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014735:	c1 e0 04             	shl    eax,0x4
c0014738:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001473b:	c3                   	ret    

c001473c <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001473c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014741:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014746:	c1 e0 04             	shl    eax,0x4
c0014749:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001474d:	c3                   	ret    

c001474e <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001474e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014753:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014758:	c1 e0 04             	shl    eax,0x4
c001475b:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001475e:	c3                   	ret    

c001475f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001475f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014764:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014769:	c1 e0 04             	shl    eax,0x4
c001476c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014770:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0014773:	c3                   	ret    

c0014774 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0014774:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014779:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001477e:	c1 e0 04             	shl    eax,0x4
c0014781:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014785:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0014789:	c3                   	ret    

c001478a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001478a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001478f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014794:	c1 e0 04             	shl    eax,0x4
c0014797:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001479b:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001479e:	c3                   	ret    

c001479f <Vm::faultHandler(regs*)>:
c001479f:	55                   	push   ebp
c00147a0:	57                   	push   edi
c00147a1:	56                   	push   esi
c00147a2:	53                   	push   ebx
c00147a3:	83 ec 1c             	sub    esp,0x1c
c00147a6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00147aa:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00147ad:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00147b1:	0f b7 f8             	movzx  edi,ax
c00147b4:	52                   	push   edx
c00147b5:	0f b7 c0             	movzx  eax,ax
c00147b8:	50                   	push   eax
c00147b9:	e8 6c fb ff ff       	call   c001432a <Vm::realToLinear(unsigned short, unsigned short)>
c00147be:	5a                   	pop    edx
c00147bf:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00147c2:	59                   	pop    ecx
c00147c3:	89 c1                	mov    ecx,eax
c00147c5:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00147c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00147cc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00147d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00147d5:	0f b7 c5             	movzx  eax,bp
c00147d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00147dc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00147e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00147e4:	e8 41 fb ff ff       	call   c001432a <Vm::realToLinear(unsigned short, unsigned short)>
c00147e9:	5e                   	pop    esi
c00147ea:	be 06 00 00 00       	mov    esi,0x6
c00147ef:	5a                   	pop    edx
c00147f0:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00147f5:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00147fa:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00147fd:	80 fa 9d             	cmp    dl,0x9d
c0014800:	0f 84 2c 02 00 00    	je     c0014a32 <Vm::faultHandler(regs*)+0x293>
c0014806:	0f 87 91 00 00 00    	ja     c001489d <Vm::faultHandler(regs*)+0xfe>
c001480c:	80 fa 66             	cmp    dl,0x66
c001480f:	0f 84 98 01 00 00    	je     c00149ad <Vm::faultHandler(regs*)+0x20e>
c0014815:	77 47                	ja     c001485e <Vm::faultHandler(regs*)+0xbf>
c0014817:	80 fa 36             	cmp    dl,0x36
c001481a:	0f 84 80 01 00 00    	je     c00149a0 <Vm::faultHandler(regs*)+0x201>
c0014820:	77 1a                	ja     c001483c <Vm::faultHandler(regs*)+0x9d>
c0014822:	80 fa 26             	cmp    dl,0x26
c0014825:	0f 84 4e 01 00 00    	je     c0014979 <Vm::faultHandler(regs*)+0x1da>
c001482b:	80 fa 2e             	cmp    dl,0x2e
c001482e:	0f 85 e2 05 00 00    	jne    c0014e16 <Vm::faultHandler(regs*)+0x677>
c0014834:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014837:	31 f6                	xor    esi,esi
c0014839:	41                   	inc    ecx
c001483a:	eb be                	jmp    c00147fa <Vm::faultHandler(regs*)+0x5b>
c001483c:	80 fa 64             	cmp    dl,0x64
c001483f:	0f 84 41 01 00 00    	je     c0014986 <Vm::faultHandler(regs*)+0x1e7>
c0014845:	0f 87 48 01 00 00    	ja     c0014993 <Vm::faultHandler(regs*)+0x1f4>
c001484b:	80 fa 3e             	cmp    dl,0x3e
c001484e:	0f 85 c2 05 00 00    	jne    c0014e16 <Vm::faultHandler(regs*)+0x677>
c0014854:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014857:	be 01 00 00 00       	mov    esi,0x1
c001485c:	eb db                	jmp    c0014839 <Vm::faultHandler(regs*)+0x9a>
c001485e:	80 fa 6d             	cmp    dl,0x6d
c0014861:	0f 84 ec 02 00 00    	je     c0014b53 <Vm::faultHandler(regs*)+0x3b4>
c0014867:	77 17                	ja     c0014880 <Vm::faultHandler(regs*)+0xe1>
c0014869:	80 fa 67             	cmp    dl,0x67
c001486c:	0f 84 48 01 00 00    	je     c00149ba <Vm::faultHandler(regs*)+0x21b>
c0014872:	80 fa 6c             	cmp    dl,0x6c
c0014875:	0f 84 69 02 00 00    	je     c0014ae4 <Vm::faultHandler(regs*)+0x345>
c001487b:	e9 96 05 00 00       	jmp    c0014e16 <Vm::faultHandler(regs*)+0x677>
c0014880:	80 fa 6f             	cmp    dl,0x6f
c0014883:	0f 84 f4 03 00 00    	je     c0014c7d <Vm::faultHandler(regs*)+0x4de>
c0014889:	0f 82 59 03 00 00    	jb     c0014be8 <Vm::faultHandler(regs*)+0x449>
c001488f:	80 fa 9c             	cmp    dl,0x9c
c0014892:	0f 84 2f 01 00 00    	je     c00149c7 <Vm::faultHandler(regs*)+0x228>
c0014898:	e9 79 05 00 00       	jmp    c0014e16 <Vm::faultHandler(regs*)+0x677>
c001489d:	80 fa ec             	cmp    dl,0xec
c00148a0:	0f 84 14 05 00 00    	je     c0014dba <Vm::faultHandler(regs*)+0x61b>
c00148a6:	77 7b                	ja     c0014923 <Vm::faultHandler(regs*)+0x184>
c00148a8:	80 fa e4             	cmp    dl,0xe4
c00148ab:	0f 84 93 04 00 00    	je     c0014d44 <Vm::faultHandler(regs*)+0x5a5>
c00148b1:	77 53                	ja     c0014906 <Vm::faultHandler(regs*)+0x167>
c00148b3:	80 fa cd             	cmp    dl,0xcd
c00148b6:	0f 84 d9 01 00 00    	je     c0014a95 <Vm::faultHandler(regs*)+0x2f6>
c00148bc:	80 fa cf             	cmp    dl,0xcf
c00148bf:	0f 85 51 05 00 00    	jne    c0014e16 <Vm::faultHandler(regs*)+0x677>
c00148c5:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00148c8:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00148cb:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00148cf:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00148d2:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00148d6:	81 ca 00 02 02 00    	or     edx,0x20200
c00148dc:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00148df:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00148e3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00148e9:	66 c1 e8 09          	shr    ax,0x9
c00148ed:	83 e0 01             	and    eax,0x1
c00148f0:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00148f3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00148f6:	83 c0 06             	add    eax,0x6
c00148f9:	25 ff ff 00 00       	and    eax,0xffff
c00148fe:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014901:	e9 0c 05 00 00       	jmp    c0014e12 <Vm::faultHandler(regs*)+0x673>
c0014906:	80 fa e6             	cmp    dl,0xe6
c0014909:	0f 84 7f 04 00 00    	je     c0014d8e <Vm::faultHandler(regs*)+0x5ef>
c001490f:	0f 82 4b 04 00 00    	jb     c0014d60 <Vm::faultHandler(regs*)+0x5c1>
c0014915:	80 fa e7             	cmp    dl,0xe7
c0014918:	0f 84 87 04 00 00    	je     c0014da5 <Vm::faultHandler(regs*)+0x606>
c001491e:	e9 f3 04 00 00       	jmp    c0014e16 <Vm::faultHandler(regs*)+0x677>
c0014923:	80 fa ef             	cmp    dl,0xef
c0014926:	0f 84 d1 04 00 00    	je     c0014dfd <Vm::faultHandler(regs*)+0x65e>
c001492c:	77 28                	ja     c0014956 <Vm::faultHandler(regs*)+0x1b7>
c001492e:	80 fa ed             	cmp    dl,0xed
c0014931:	0f 84 9f 04 00 00    	je     c0014dd6 <Vm::faultHandler(regs*)+0x637>
c0014937:	80 fa ee             	cmp    dl,0xee
c001493a:	0f 85 d6 04 00 00    	jne    c0014e16 <Vm::faultHandler(regs*)+0x677>
c0014940:	50                   	push   eax
c0014941:	50                   	push   eax
c0014942:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014946:	50                   	push   eax
c0014947:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001494b:	50                   	push   eax
c001494c:	e8 a3 f9 ff ff       	call   c00142f4 <Vm::outbv(unsigned short, unsigned char)>
c0014951:	e9 9f 04 00 00       	jmp    c0014df5 <Vm::faultHandler(regs*)+0x656>
c0014956:	80 fa fa             	cmp    dl,0xfa
c0014959:	0f 84 69 01 00 00    	je     c0014ac8 <Vm::faultHandler(regs*)+0x329>
c001495f:	80 fa fb             	cmp    dl,0xfb
c0014962:	0f 84 6e 01 00 00    	je     c0014ad6 <Vm::faultHandler(regs*)+0x337>
c0014968:	80 fa f3             	cmp    dl,0xf3
c001496b:	0f 85 a5 04 00 00    	jne    c0014e16 <Vm::faultHandler(regs*)+0x677>
c0014971:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014974:	e9 c0 fe ff ff       	jmp    c0014839 <Vm::faultHandler(regs*)+0x9a>
c0014979:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001497c:	be 02 00 00 00       	mov    esi,0x2
c0014981:	e9 b3 fe ff ff       	jmp    c0014839 <Vm::faultHandler(regs*)+0x9a>
c0014986:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014989:	be 03 00 00 00       	mov    esi,0x3
c001498e:	e9 a6 fe ff ff       	jmp    c0014839 <Vm::faultHandler(regs*)+0x9a>
c0014993:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014996:	be 04 00 00 00       	mov    esi,0x4
c001499b:	e9 99 fe ff ff       	jmp    c0014839 <Vm::faultHandler(regs*)+0x9a>
c00149a0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149a3:	be 05 00 00 00       	mov    esi,0x5
c00149a8:	e9 8c fe ff ff       	jmp    c0014839 <Vm::faultHandler(regs*)+0x9a>
c00149ad:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149b0:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00149b5:	e9 7f fe ff ff       	jmp    c0014839 <Vm::faultHandler(regs*)+0x9a>
c00149ba:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149bd:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00149c2:	e9 72 fe ff ff       	jmp    c0014839 <Vm::faultHandler(regs*)+0x9a>
c00149c7:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00149ca:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00149ce:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00149d3:	74 30                	je     c0014a05 <Vm::faultHandler(regs*)+0x266>
c00149d5:	83 e9 04             	sub    ecx,0x4
c00149d8:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00149de:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00149e4:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00149e7:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00149ea:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00149f0:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00149f4:	0f 84 15 04 00 00    	je     c0014e0f <Vm::faultHandler(regs*)+0x670>
c00149fa:	80 ce 02             	or     dh,0x2
c00149fd:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014a00:	e9 0a 04 00 00       	jmp    c0014e0f <Vm::faultHandler(regs*)+0x670>
c0014a05:	83 e9 02             	sub    ecx,0x2
c0014a08:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014a0e:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014a11:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014a15:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014a1b:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014a1f:	74 05                	je     c0014a26 <Vm::faultHandler(regs*)+0x287>
c0014a21:	80 ce 02             	or     dh,0x2
c0014a24:	eb 03                	jmp    c0014a29 <Vm::faultHandler(regs*)+0x28a>
c0014a26:	80 e6 fd             	and    dh,0xfd
c0014a29:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014a2d:	e9 dd 03 00 00       	jmp    c0014e0f <Vm::faultHandler(regs*)+0x670>
c0014a32:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014a37:	74 2a                	je     c0014a63 <Vm::faultHandler(regs*)+0x2c4>
c0014a39:	8b 10                	mov    edx,DWORD PTR [eax]
c0014a3b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014a41:	81 ca 00 02 02 00    	or     edx,0x20200
c0014a47:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014a4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014a4c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014a52:	c1 e8 09             	shr    eax,0x9
c0014a55:	83 e0 01             	and    eax,0x1
c0014a58:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014a5b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014a5e:	83 c0 04             	add    eax,0x4
c0014a61:	eb 25                	jmp    c0014a88 <Vm::faultHandler(regs*)+0x2e9>
c0014a63:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014a66:	81 ca 00 02 02 00    	or     edx,0x20200
c0014a6c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014a6f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014a72:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014a78:	66 c1 e8 09          	shr    ax,0x9
c0014a7c:	83 e0 01             	and    eax,0x1
c0014a7f:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014a82:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014a85:	83 c0 02             	add    eax,0x2
c0014a88:	25 ff ff 00 00       	and    eax,0xffff
c0014a8d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014a90:	e9 7a 03 00 00       	jmp    c0014e0f <Vm::faultHandler(regs*)+0x670>
c0014a95:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014a99:	3c ee                	cmp    al,0xee
c0014a9b:	75 10                	jne    c0014aad <Vm::faultHandler(regs*)+0x30e>
c0014a9d:	83 ec 0c             	sub    esp,0xc
c0014aa0:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014aa3:	e8 e9 f8 ff ff       	call   c0014391 <Vm::mainloop3(unsigned long)>
c0014aa8:	e9 4b 03 00 00       	jmp    c0014df8 <Vm::faultHandler(regs*)+0x659>
c0014aad:	83 ec 0c             	sub    esp,0xc
c0014ab0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014ab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ab8:	51                   	push   ecx
c0014ab9:	50                   	push   eax
c0014aba:	53                   	push   ebx
c0014abb:	e8 e1 fb ff ff       	call   c00146a1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0014ac0:	83 c4 20             	add    esp,0x20
c0014ac3:	e9 4a 03 00 00       	jmp    c0014e12 <Vm::faultHandler(regs*)+0x673>
c0014ac8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014acd:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014ad1:	e9 39 03 00 00       	jmp    c0014e0f <Vm::faultHandler(regs*)+0x670>
c0014ad6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014adb:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014adf:	e9 2b 03 00 00       	jmp    c0014e0f <Vm::faultHandler(regs*)+0x670>
c0014ae4:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014ae7:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014aec:	74 2b                	je     c0014b19 <Vm::faultHandler(regs*)+0x37a>
c0014aee:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014af5:	76 22                	jbe    c0014b19 <Vm::faultHandler(regs*)+0x37a>
c0014af7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014afb:	50                   	push   eax
c0014afc:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014b00:	50                   	push   eax
c0014b01:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014b05:	50                   	push   eax
c0014b06:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014b0a:	50                   	push   eax
c0014b0b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014b0f:	50                   	push   eax
c0014b10:	6a 6c                	push   0x6c
c0014b12:	6a 6c                	push   0x6c
c0014b14:	e9 b9 01 00 00       	jmp    c0014cd2 <Vm::faultHandler(regs*)+0x533>
c0014b19:	83 ec 0c             	sub    esp,0xc
c0014b1c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014b20:	0f b7 f6             	movzx  esi,si
c0014b23:	50                   	push   eax
c0014b24:	e8 b8 f7 ff ff       	call   c00142e1 <Vm::inbv(unsigned short)>
c0014b29:	83 c4 0c             	add    esp,0xc
c0014b2c:	0f b6 c0             	movzx  eax,al
c0014b2f:	50                   	push   eax
c0014b30:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014b34:	50                   	push   eax
c0014b35:	56                   	push   esi
c0014b36:	e8 24 fc ff ff       	call   c001475f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014b3b:	83 c4 10             	add    esp,0x10
c0014b3e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014b41:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014b45:	74 03                	je     c0014b4a <Vm::faultHandler(regs*)+0x3ab>
c0014b47:	48                   	dec    eax
c0014b48:	eb 01                	jmp    c0014b4b <Vm::faultHandler(regs*)+0x3ac>
c0014b4a:	40                   	inc    eax
c0014b4b:	0f b7 c0             	movzx  eax,ax
c0014b4e:	e9 8d 00 00 00       	jmp    c0014be0 <Vm::faultHandler(regs*)+0x441>
c0014b53:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014b56:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014b59:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014b5e:	74 29                	je     c0014b89 <Vm::faultHandler(regs*)+0x3ea>
c0014b60:	3d ff ff 00 00       	cmp    eax,0xffff
c0014b65:	76 22                	jbe    c0014b89 <Vm::faultHandler(regs*)+0x3ea>
c0014b67:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014b6b:	50                   	push   eax
c0014b6c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014b70:	50                   	push   eax
c0014b71:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014b75:	50                   	push   eax
c0014b76:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014b7a:	50                   	push   eax
c0014b7b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014b7f:	50                   	push   eax
c0014b80:	6a 6d                	push   0x6d
c0014b82:	6a 6d                	push   0x6d
c0014b84:	e9 49 01 00 00       	jmp    c0014cd2 <Vm::faultHandler(regs*)+0x533>
c0014b89:	0f b7 c8             	movzx  ecx,ax
c0014b8c:	0f b7 f6             	movzx  esi,si
c0014b8f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014b92:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014b97:	74 20                	je     c0014bb9 <Vm::faultHandler(regs*)+0x41a>
c0014b99:	ed                   	in     eax,dx
c0014b9a:	55                   	push   ebp
c0014b9b:	50                   	push   eax
c0014b9c:	51                   	push   ecx
c0014b9d:	56                   	push   esi
c0014b9e:	e8 e7 fb ff ff       	call   c001478a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0014ba3:	83 c4 10             	add    esp,0x10
c0014ba6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014ba9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014bad:	74 05                	je     c0014bb4 <Vm::faultHandler(regs*)+0x415>
c0014baf:	83 e8 04             	sub    eax,0x4
c0014bb2:	eb 27                	jmp    c0014bdb <Vm::faultHandler(regs*)+0x43c>
c0014bb4:	83 c0 04             	add    eax,0x4
c0014bb7:	eb 22                	jmp    c0014bdb <Vm::faultHandler(regs*)+0x43c>
c0014bb9:	66 ed                	in     ax,dx
c0014bbb:	0f b7 c0             	movzx  eax,ax
c0014bbe:	57                   	push   edi
c0014bbf:	50                   	push   eax
c0014bc0:	51                   	push   ecx
c0014bc1:	56                   	push   esi
c0014bc2:	e8 ad fb ff ff       	call   c0014774 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014bc7:	83 c4 10             	add    esp,0x10
c0014bca:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014bcd:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014bd1:	74 05                	je     c0014bd8 <Vm::faultHandler(regs*)+0x439>
c0014bd3:	83 e8 02             	sub    eax,0x2
c0014bd6:	eb 03                	jmp    c0014bdb <Vm::faultHandler(regs*)+0x43c>
c0014bd8:	83 c0 02             	add    eax,0x2
c0014bdb:	25 ff ff 00 00       	and    eax,0xffff
c0014be0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014be3:	e9 27 02 00 00       	jmp    c0014e0f <Vm::faultHandler(regs*)+0x670>
c0014be8:	8d 46 ff             	lea    eax,[esi-0x1]
c0014beb:	3c 05                	cmp    al,0x5
c0014bed:	77 24                	ja     c0014c13 <Vm::faultHandler(regs*)+0x474>
c0014bef:	0f b6 c0             	movzx  eax,al
c0014bf2:	ff 24 85 9c ed 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1264]
c0014bf9:	0f b7 fd             	movzx  edi,bp
c0014bfc:	eb 15                	jmp    c0014c13 <Vm::faultHandler(regs*)+0x474>
c0014bfe:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0014c02:	eb 0f                	jmp    c0014c13 <Vm::faultHandler(regs*)+0x474>
c0014c04:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014c08:	eb 09                	jmp    c0014c13 <Vm::faultHandler(regs*)+0x474>
c0014c0a:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014c0e:	eb 03                	jmp    c0014c13 <Vm::faultHandler(regs*)+0x474>
c0014c10:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014c13:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014c16:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014c1b:	74 29                	je     c0014c46 <Vm::faultHandler(regs*)+0x4a7>
c0014c1d:	3d ff ff 00 00       	cmp    eax,0xffff
c0014c22:	76 22                	jbe    c0014c46 <Vm::faultHandler(regs*)+0x4a7>
c0014c24:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014c28:	50                   	push   eax
c0014c29:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014c2d:	50                   	push   eax
c0014c2e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014c32:	50                   	push   eax
c0014c33:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014c37:	50                   	push   eax
c0014c38:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014c3c:	50                   	push   eax
c0014c3d:	6a 6e                	push   0x6e
c0014c3f:	6a 6e                	push   0x6e
c0014c41:	e9 8c 00 00 00       	jmp    c0014cd2 <Vm::faultHandler(regs*)+0x533>
c0014c46:	0f b7 c0             	movzx  eax,ax
c0014c49:	52                   	push   edx
c0014c4a:	52                   	push   edx
c0014c4b:	50                   	push   eax
c0014c4c:	57                   	push   edi
c0014c4d:	e8 d9 fa ff ff       	call   c001472b <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014c52:	59                   	pop    ecx
c0014c53:	0f b6 c0             	movzx  eax,al
c0014c56:	5e                   	pop    esi
c0014c57:	50                   	push   eax
c0014c58:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014c5c:	50                   	push   eax
c0014c5d:	e8 92 f6 ff ff       	call   c00142f4 <Vm::outbv(unsigned short, unsigned char)>
c0014c62:	83 c4 10             	add    esp,0x10
c0014c65:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014c68:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014c6c:	74 03                	je     c0014c71 <Vm::faultHandler(regs*)+0x4d2>
c0014c6e:	48                   	dec    eax
c0014c6f:	eb 01                	jmp    c0014c72 <Vm::faultHandler(regs*)+0x4d3>
c0014c71:	40                   	inc    eax
c0014c72:	0f b7 c0             	movzx  eax,ax
c0014c75:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014c78:	e9 92 01 00 00       	jmp    c0014e0f <Vm::faultHandler(regs*)+0x670>
c0014c7d:	8d 46 ff             	lea    eax,[esi-0x1]
c0014c80:	3c 05                	cmp    al,0x5
c0014c82:	77 1f                	ja     c0014ca3 <Vm::faultHandler(regs*)+0x504>
c0014c84:	0f b6 c0             	movzx  eax,al
c0014c87:	ff 24 85 b4 ed 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe124c]
c0014c8e:	89 ef                	mov    edi,ebp
c0014c90:	eb 11                	jmp    c0014ca3 <Vm::faultHandler(regs*)+0x504>
c0014c92:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014c95:	eb 0c                	jmp    c0014ca3 <Vm::faultHandler(regs*)+0x504>
c0014c97:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0014c9a:	eb 07                	jmp    c0014ca3 <Vm::faultHandler(regs*)+0x504>
c0014c9c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0014c9f:	eb 02                	jmp    c0014ca3 <Vm::faultHandler(regs*)+0x504>
c0014ca1:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014ca3:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014ca6:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014cab:	74 37                	je     c0014ce4 <Vm::faultHandler(regs*)+0x545>
c0014cad:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014cb3:	76 2f                	jbe    c0014ce4 <Vm::faultHandler(regs*)+0x545>
c0014cb5:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014cb9:	50                   	push   eax
c0014cba:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014cbe:	50                   	push   eax
c0014cbf:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014cc3:	50                   	push   eax
c0014cc4:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014cc8:	50                   	push   eax
c0014cc9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014ccd:	50                   	push   eax
c0014cce:	6a 6f                	push   0x6f
c0014cd0:	6a 6f                	push   0x6f
c0014cd2:	68 42 ed 01 c0       	push   0xc001ed42
c0014cd7:	e8 51 58 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0014cdc:	83 c4 20             	add    esp,0x20
c0014cdf:	e9 86 01 00 00       	jmp    c0014e6a <Vm::faultHandler(regs*)+0x6cb>
c0014ce4:	0f b7 d7             	movzx  edx,di
c0014ce7:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014cea:	0f b7 c6             	movzx  eax,si
c0014ced:	81 e1 00 04 00 00    	and    ecx,0x400
c0014cf3:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0014cf6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014cfb:	74 1d                	je     c0014d1a <Vm::faultHandler(regs*)+0x57b>
c0014cfd:	55                   	push   ebp
c0014cfe:	55                   	push   ebp
c0014cff:	50                   	push   eax
c0014d00:	52                   	push   edx
c0014d01:	e8 48 fa ff ff       	call   c001474e <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0014d06:	83 c4 10             	add    esp,0x10
c0014d09:	89 fa                	mov    edx,edi
c0014d0b:	ef                   	out    dx,eax
c0014d0c:	85 c9                	test   ecx,ecx
c0014d0e:	74 05                	je     c0014d15 <Vm::faultHandler(regs*)+0x576>
c0014d10:	83 ee 04             	sub    esi,0x4
c0014d13:	eb 21                	jmp    c0014d36 <Vm::faultHandler(regs*)+0x597>
c0014d15:	83 c6 04             	add    esi,0x4
c0014d18:	eb 1c                	jmp    c0014d36 <Vm::faultHandler(regs*)+0x597>
c0014d1a:	55                   	push   ebp
c0014d1b:	55                   	push   ebp
c0014d1c:	50                   	push   eax
c0014d1d:	52                   	push   edx
c0014d1e:	e8 19 fa ff ff       	call   c001473c <Vm::readWordFromReal(unsigned short, unsigned short)>
c0014d23:	83 c4 10             	add    esp,0x10
c0014d26:	89 fa                	mov    edx,edi
c0014d28:	66 ef                	out    dx,ax
c0014d2a:	85 c9                	test   ecx,ecx
c0014d2c:	74 05                	je     c0014d33 <Vm::faultHandler(regs*)+0x594>
c0014d2e:	83 ee 02             	sub    esi,0x2
c0014d31:	eb 03                	jmp    c0014d36 <Vm::faultHandler(regs*)+0x597>
c0014d33:	83 c6 02             	add    esi,0x2
c0014d36:	81 e6 ff ff 00 00    	and    esi,0xffff
c0014d3c:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0014d3f:	e9 cb 00 00 00       	jmp    c0014e0f <Vm::faultHandler(regs*)+0x670>
c0014d44:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014d4b:	83 ec 0c             	sub    esp,0xc
c0014d4e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d52:	50                   	push   eax
c0014d53:	e8 89 f5 ff ff       	call   c00142e1 <Vm::inbv(unsigned short)>
c0014d58:	0f b6 c0             	movzx  eax,al
c0014d5b:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014d5e:	eb 3f                	jmp    c0014d9f <Vm::faultHandler(regs*)+0x600>
c0014d60:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014d65:	74 07                	je     c0014d6e <Vm::faultHandler(regs*)+0x5cf>
c0014d67:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014d6b:	ed                   	in     eax,dx
c0014d6c:	eb 14                	jmp    c0014d82 <Vm::faultHandler(regs*)+0x5e3>
c0014d6e:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0014d71:	66 31 f6             	xor    si,si
c0014d74:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0014d77:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014d7b:	66 ed                	in     ax,dx
c0014d7d:	0f b7 c0             	movzx  eax,ax
c0014d80:	09 f0                	or     eax,esi
c0014d82:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014d85:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014d89:	e9 84 00 00 00       	jmp    c0014e12 <Vm::faultHandler(regs*)+0x673>
c0014d8e:	52                   	push   edx
c0014d8f:	52                   	push   edx
c0014d90:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014d94:	50                   	push   eax
c0014d95:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d99:	50                   	push   eax
c0014d9a:	e8 55 f5 ff ff       	call   c00142f4 <Vm::outbv(unsigned short, unsigned char)>
c0014d9f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014da3:	eb 53                	jmp    c0014df8 <Vm::faultHandler(regs*)+0x659>
c0014da5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014da8:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014dac:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014db1:	74 03                	je     c0014db6 <Vm::faultHandler(regs*)+0x617>
c0014db3:	ef                   	out    dx,eax
c0014db4:	eb cf                	jmp    c0014d85 <Vm::faultHandler(regs*)+0x5e6>
c0014db6:	66 ef                	out    dx,ax
c0014db8:	eb cb                	jmp    c0014d85 <Vm::faultHandler(regs*)+0x5e6>
c0014dba:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014dc1:	83 ec 0c             	sub    esp,0xc
c0014dc4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014dc8:	50                   	push   eax
c0014dc9:	e8 13 f5 ff ff       	call   c00142e1 <Vm::inbv(unsigned short)>
c0014dce:	0f b6 c0             	movzx  eax,al
c0014dd1:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014dd4:	eb 1f                	jmp    c0014df5 <Vm::faultHandler(regs*)+0x656>
c0014dd6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014dd9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014dde:	74 03                	je     c0014de3 <Vm::faultHandler(regs*)+0x644>
c0014de0:	ed                   	in     eax,dx
c0014de1:	eb 0d                	jmp    c0014df0 <Vm::faultHandler(regs*)+0x651>
c0014de3:	66 ed                	in     ax,dx
c0014de5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0014de8:	0f b7 c0             	movzx  eax,ax
c0014deb:	66 31 d2             	xor    dx,dx
c0014dee:	09 d0                	or     eax,edx
c0014df0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014df3:	eb 1a                	jmp    c0014e0f <Vm::faultHandler(regs*)+0x670>
c0014df5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014df8:	83 c4 10             	add    esp,0x10
c0014dfb:	eb 15                	jmp    c0014e12 <Vm::faultHandler(regs*)+0x673>
c0014dfd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014e00:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014e03:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e08:	74 03                	je     c0014e0d <Vm::faultHandler(regs*)+0x66e>
c0014e0a:	ef                   	out    dx,eax
c0014e0b:	eb 02                	jmp    c0014e0f <Vm::faultHandler(regs*)+0x670>
c0014e0d:	66 ef                	out    dx,ax
c0014e0f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014e12:	b0 01                	mov    al,0x1
c0014e14:	eb 56                	jmp    c0014e6c <Vm::faultHandler(regs*)+0x6cd>
c0014e16:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014e1a:	50                   	push   eax
c0014e1b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014e1f:	50                   	push   eax
c0014e20:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014e24:	50                   	push   eax
c0014e25:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014e29:	50                   	push   eax
c0014e2a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e2e:	50                   	push   eax
c0014e2f:	52                   	push   edx
c0014e30:	52                   	push   edx
c0014e31:	68 6f ed 01 c0       	push   0xc001ed6f
c0014e36:	e8 f2 56 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0014e3b:	83 c4 20             	add    esp,0x20
c0014e3e:	83 ec 0c             	sub    esp,0xc
c0014e41:	6a 60                	push   0x60
c0014e43:	e8 99 f4 ff ff       	call   c00142e1 <Vm::inbv(unsigned short)>
c0014e48:	83 c4 10             	add    esp,0x10
c0014e4b:	3c 1c                	cmp    al,0x1c
c0014e4d:	74 04                	je     c0014e53 <Vm::faultHandler(regs*)+0x6b4>
c0014e4f:	3c 5a                	cmp    al,0x5a
c0014e51:	75 eb                	jne    c0014e3e <Vm::faultHandler(regs*)+0x69f>
c0014e53:	3c 5a                	cmp    al,0x5a
c0014e55:	74 04                	je     c0014e5b <Vm::faultHandler(regs*)+0x6bc>
c0014e57:	3c 1c                	cmp    al,0x1c
c0014e59:	75 0f                	jne    c0014e6a <Vm::faultHandler(regs*)+0x6cb>
c0014e5b:	83 ec 0c             	sub    esp,0xc
c0014e5e:	6a 60                	push   0x60
c0014e60:	e8 7c f4 ff ff       	call   c00142e1 <Vm::inbv(unsigned short)>
c0014e65:	83 c4 10             	add    esp,0x10
c0014e68:	eb e9                	jmp    c0014e53 <Vm::faultHandler(regs*)+0x6b4>
c0014e6a:	31 c0                	xor    eax,eax
c0014e6c:	83 c4 1c             	add    esp,0x1c
c0014e6f:	5b                   	pop    ebx
c0014e70:	5e                   	pop    esi
c0014e71:	5f                   	pop    edi
c0014e72:	5d                   	pop    ebp
c0014e73:	c3                   	ret    

c0014e74 <noCopro(unsigned long)>:
c0014e74:	c3                   	ret    

c0014e75 <nmiHandler(regs*, void*)>:
c0014e75:	83 ec 0c             	sub    esp,0xc
c0014e78:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0014e7d:	83 ec 0c             	sub    esp,0xc
c0014e80:	50                   	push   eax
c0014e81:	e8 54 21 ff ff       	call   c0006fda <Computer::handleNMI()>
c0014e86:	83 c4 10             	add    esp,0x10
c0014e89:	90                   	nop
c0014e8a:	83 c4 0c             	add    esp,0xc
c0014e8d:	c3                   	ret    

c0014e8e <doubleFault(regs*, void*)>:
c0014e8e:	55                   	push   ebp
c0014e8f:	89 e5                	mov    ebp,esp
c0014e91:	83 ec 08             	sub    esp,0x8
c0014e94:	83 ec 0c             	sub    esp,0xc
c0014e97:	68 cc ed 01 c0       	push   0xc001edcc
c0014e9c:	e8 0e b3 ff ff       	call   c00101af <KePanic(char const*)>
c0014ea1:	83 c4 10             	add    esp,0x10
c0014ea4:	90                   	nop
c0014ea5:	c9                   	leave  
c0014ea6:	c3                   	ret    

c0014ea7 <displayDebugInfo(regs*)>:
c0014ea7:	83 ec 1c             	sub    esp,0x1c
c0014eaa:	0f 20 c0             	mov    eax,cr0
c0014ead:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014eb1:	0f 20 d0             	mov    eax,cr2
c0014eb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014eb8:	0f 20 d8             	mov    eax,cr3
c0014ebb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014ebf:	0f 20 e0             	mov    eax,cr4
c0014ec2:	89 04 24             	mov    DWORD PTR [esp],eax
c0014ec5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ec9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014ecc:	83 ec 08             	sub    esp,0x8
c0014ecf:	50                   	push   eax
c0014ed0:	68 e8 ed 01 c0       	push   0xc001ede8
c0014ed5:	e8 53 56 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0014eda:	83 c4 10             	add    esp,0x10
c0014edd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ee1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014ee4:	83 ec 08             	sub    esp,0x8
c0014ee7:	50                   	push   eax
c0014ee8:	68 d9 ed 01 c0       	push   0xc001edd9
c0014eed:	e8 3b 56 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0014ef2:	83 c4 10             	add    esp,0x10
c0014ef5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ef9:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014efc:	83 ec 08             	sub    esp,0x8
c0014eff:	50                   	push   eax
c0014f00:	68 e4 ed 01 c0       	push   0xc001ede4
c0014f05:	e8 23 56 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0014f0a:	83 c4 10             	add    esp,0x10
c0014f0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f11:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f14:	83 ec 08             	sub    esp,0x8
c0014f17:	50                   	push   eax
c0014f18:	68 f3 ed 01 c0       	push   0xc001edf3
c0014f1d:	e8 0b 56 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0014f22:	83 c4 10             	add    esp,0x10
c0014f25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f29:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0014f2c:	83 ec 08             	sub    esp,0x8
c0014f2f:	50                   	push   eax
c0014f30:	68 fe ed 01 c0       	push   0xc001edfe
c0014f35:	e8 f3 55 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0014f3a:	83 c4 10             	add    esp,0x10
c0014f3d:	83 ec 08             	sub    esp,0x8
c0014f40:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014f44:	68 09 ee 01 c0       	push   0xc001ee09
c0014f49:	e8 df 55 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0014f4e:	83 c4 10             	add    esp,0x10
c0014f51:	83 ec 08             	sub    esp,0x8
c0014f54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014f58:	68 14 ee 01 c0       	push   0xc001ee14
c0014f5d:	e8 cb 55 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0014f62:	83 c4 10             	add    esp,0x10
c0014f65:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014f6a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014f70:	83 ec 0c             	sub    esp,0xc
c0014f73:	50                   	push   eax
c0014f74:	e8 7e 34 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0014f79:	83 c4 10             	add    esp,0x10
c0014f7c:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014f81:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014f87:	83 ec 08             	sub    esp,0x8
c0014f8a:	68 1f ee 01 c0       	push   0xc001ee1f
c0014f8f:	50                   	push   eax
c0014f90:	e8 a1 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014f95:	83 c4 10             	add    esp,0x10
c0014f98:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014f9d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fa3:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0014fa8:	8b 12                	mov    edx,DWORD PTR [edx]
c0014faa:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014fad:	83 c2 0c             	add    edx,0xc
c0014fb0:	83 ec 08             	sub    esp,0x8
c0014fb3:	52                   	push   edx
c0014fb4:	50                   	push   eax
c0014fb5:	e8 7c 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014fba:	83 c4 10             	add    esp,0x10
c0014fbd:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014fc2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fc8:	83 ec 08             	sub    esp,0x8
c0014fcb:	68 28 ee 01 c0       	push   0xc001ee28
c0014fd0:	50                   	push   eax
c0014fd1:	e8 60 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014fd6:	83 c4 10             	add    esp,0x10
c0014fd9:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014fde:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fe4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014fe8:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0014feb:	83 ec 08             	sub    esp,0x8
c0014fee:	52                   	push   edx
c0014fef:	50                   	push   eax
c0014ff0:	e8 fb 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014ff5:	83 c4 10             	add    esp,0x10
c0014ff8:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014ffd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015003:	83 ec 08             	sub    esp,0x8
c0015006:	68 30 ee 01 c0       	push   0xc001ee30
c001500b:	50                   	push   eax
c001500c:	e8 25 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015011:	83 c4 10             	add    esp,0x10
c0015014:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015019:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001501f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015023:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0015026:	83 ec 08             	sub    esp,0x8
c0015029:	52                   	push   edx
c001502a:	50                   	push   eax
c001502b:	e8 c0 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015030:	83 c4 10             	add    esp,0x10
c0015033:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015038:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001503e:	83 ec 08             	sub    esp,0x8
c0015041:	68 38 ee 01 c0       	push   0xc001ee38
c0015046:	50                   	push   eax
c0015047:	e8 ea 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001504c:	83 c4 10             	add    esp,0x10
c001504f:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015054:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001505a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001505e:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0015061:	83 ec 08             	sub    esp,0x8
c0015064:	52                   	push   edx
c0015065:	50                   	push   eax
c0015066:	e8 85 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c001506b:	83 c4 10             	add    esp,0x10
c001506e:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015073:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015079:	83 ec 08             	sub    esp,0x8
c001507c:	68 40 ee 01 c0       	push   0xc001ee40
c0015081:	50                   	push   eax
c0015082:	e8 af 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015087:	83 c4 10             	add    esp,0x10
c001508a:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001508f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015095:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015099:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001509c:	83 ec 08             	sub    esp,0x8
c001509f:	52                   	push   edx
c00150a0:	50                   	push   eax
c00150a1:	e8 4a 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00150a6:	83 c4 10             	add    esp,0x10
c00150a9:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00150ae:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150b4:	83 ec 08             	sub    esp,0x8
c00150b7:	68 48 ee 01 c0       	push   0xc001ee48
c00150bc:	50                   	push   eax
c00150bd:	e8 74 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00150c2:	83 c4 10             	add    esp,0x10
c00150c5:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00150ca:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150d0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00150d4:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00150d7:	83 ec 08             	sub    esp,0x8
c00150da:	52                   	push   edx
c00150db:	50                   	push   eax
c00150dc:	e8 0f 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00150e1:	83 c4 10             	add    esp,0x10
c00150e4:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00150e9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150ef:	83 ec 08             	sub    esp,0x8
c00150f2:	68 50 ee 01 c0       	push   0xc001ee50
c00150f7:	50                   	push   eax
c00150f8:	e8 39 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00150fd:	83 c4 10             	add    esp,0x10
c0015100:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015105:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001510b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001510f:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0015112:	83 ec 08             	sub    esp,0x8
c0015115:	52                   	push   edx
c0015116:	50                   	push   eax
c0015117:	e8 d4 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c001511c:	83 c4 10             	add    esp,0x10
c001511f:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015124:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001512a:	83 ec 08             	sub    esp,0x8
c001512d:	68 58 ee 01 c0       	push   0xc001ee58
c0015132:	50                   	push   eax
c0015133:	e8 fe 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015138:	83 c4 10             	add    esp,0x10
c001513b:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015140:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015146:	83 ec 08             	sub    esp,0x8
c0015149:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001514d:	50                   	push   eax
c001514e:	e8 9d 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015153:	83 c4 10             	add    esp,0x10
c0015156:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001515b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015161:	83 ec 08             	sub    esp,0x8
c0015164:	68 61 ee 01 c0       	push   0xc001ee61
c0015169:	50                   	push   eax
c001516a:	e8 c7 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001516f:	83 c4 10             	add    esp,0x10
c0015172:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015177:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001517d:	83 ec 08             	sub    esp,0x8
c0015180:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015184:	50                   	push   eax
c0015185:	e8 66 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c001518a:	83 c4 10             	add    esp,0x10
c001518d:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015192:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015198:	83 ec 08             	sub    esp,0x8
c001519b:	68 69 ee 01 c0       	push   0xc001ee69
c00151a0:	50                   	push   eax
c00151a1:	e8 90 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00151a6:	83 c4 10             	add    esp,0x10
c00151a9:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00151ae:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151b4:	83 ec 08             	sub    esp,0x8
c00151b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00151bb:	50                   	push   eax
c00151bc:	e8 2f 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00151c1:	83 c4 10             	add    esp,0x10
c00151c4:	fa                   	cli    
c00151c5:	f4                   	hlt    
c00151c6:	eb fe                	jmp    c00151c6 <displayDebugInfo(regs*)+0x31f>

c00151c8 <HalSystemIdle()>:
c00151c8:	56                   	push   esi
c00151c9:	53                   	push   ebx
c00151ca:	83 ec 14             	sub    esp,0x14
c00151cd:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00151d2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00151d8:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c00151de:	83 e0 04             	and    eax,0x4
c00151e1:	84 c0                	test   al,al
c00151e3:	0f 95 c0             	setne  al
c00151e6:	84 c0                	test   al,al
c00151e8:	74 4c                	je     c0015236 <HalSystemIdle()+0x6e>
c00151ea:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00151ef:	83 ec 08             	sub    esp,0x8
c00151f2:	68 e1 00 00 00       	push   0xe1
c00151f7:	50                   	push   eax
c00151f8:	e8 f5 1b ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c00151fd:	83 c4 10             	add    esp,0x10
c0015200:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015204:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015208:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001520d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015211:	83 e2 02             	and    edx,0x2
c0015214:	89 d3                	mov    ebx,edx
c0015216:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001521a:	83 e2 00             	and    edx,0x0
c001521d:	89 d6                	mov    esi,edx
c001521f:	56                   	push   esi
c0015220:	53                   	push   ebx
c0015221:	68 e1 00 00 00       	push   0xe1
c0015226:	50                   	push   eax
c0015227:	e8 f2 1b ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c001522c:	83 c4 10             	add    esp,0x10
c001522f:	e8 60 af fe ff       	call   c0000194 <doTPAUSE>
c0015234:	eb 01                	jmp    c0015237 <HalSystemIdle()+0x6f>
c0015236:	f4                   	hlt    
c0015237:	90                   	nop
c0015238:	83 c4 14             	add    esp,0x14
c001523b:	5b                   	pop    ebx
c001523c:	5e                   	pop    esi
c001523d:	c3                   	ret    

c001523e <displayProgramFault(char const*)>:
c001523e:	83 ec 0c             	sub    esp,0xc
c0015241:	83 ec 0c             	sub    esp,0xc
c0015244:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015248:	e8 e0 52 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c001524d:	83 c4 10             	add    esp,0x10
c0015250:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015255:	8b 00                	mov    eax,DWORD PTR [eax]
c0015257:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001525a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015260:	85 c0                	test   eax,eax
c0015262:	74 21                	je     c0015285 <displayProgramFault(char const*)+0x47>
c0015264:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015269:	8b 00                	mov    eax,DWORD PTR [eax]
c001526b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001526e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015274:	6a 04                	push   0x4
c0015276:	6a 0f                	push   0xf
c0015278:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001527c:	50                   	push   eax
c001527d:	e8 26 35 ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015282:	83 c4 10             	add    esp,0x10
c0015285:	90                   	nop
c0015286:	83 c4 0c             	add    esp,0xc
c0015289:	c3                   	ret    

c001528a <gpFault(regs*, void*)>:
c001528a:	83 ec 1c             	sub    esp,0x1c
c001528d:	c7 05 10 52 02 c0 9f 47 01 c0 	mov    DWORD PTR ds:0xc0025210,0xc001479f
c0015297:	a1 10 52 02 c0       	mov    eax,ds:0xc0025210
c001529c:	85 c0                	test   eax,eax
c001529e:	74 1c                	je     c00152bc <gpFault(regs*, void*)+0x32>
c00152a0:	a1 10 52 02 c0       	mov    eax,ds:0xc0025210
c00152a5:	83 ec 0c             	sub    esp,0xc
c00152a8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00152ac:	ff d0                	call   eax
c00152ae:	83 c4 10             	add    esp,0x10
c00152b1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00152b5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00152ba:	75 2e                	jne    c00152ea <gpFault(regs*, void*)+0x60>
c00152bc:	83 ec 0c             	sub    esp,0xc
c00152bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00152c3:	e8 df fb ff ff       	call   c0014ea7 <displayDebugInfo(regs*)>
c00152c8:	83 c4 10             	add    esp,0x10
c00152cb:	83 ec 0c             	sub    esp,0xc
c00152ce:	68 71 ee 01 c0       	push   0xc001ee71
c00152d3:	e8 66 ff ff ff       	call   c001523e <displayProgramFault(char const*)>
c00152d8:	83 c4 10             	add    esp,0x10
c00152db:	83 ec 0c             	sub    esp,0xc
c00152de:	6a 00                	push   0x0
c00152e0:	e8 af ee ff ff       	call   c0014194 <Thr::terminateFromIRQ(int)>
c00152e5:	83 c4 10             	add    esp,0x10
c00152e8:	eb 01                	jmp    c00152eb <gpFault(regs*, void*)+0x61>
c00152ea:	90                   	nop
c00152eb:	83 c4 1c             	add    esp,0x1c
c00152ee:	c3                   	ret    

c00152ef <pgFault(regs*, void*)>:
c00152ef:	83 ec 1c             	sub    esp,0x1c
c00152f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152f6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00152f9:	0f 20 d0             	mov    eax,cr2
c00152fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015300:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015304:	83 ec 04             	sub    esp,0x4
c0015307:	52                   	push   edx
c0015308:	50                   	push   eax
c0015309:	68 50 ef 01 c0       	push   0xc001ef50
c001530e:	e8 1a 52 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c0015313:	83 c4 10             	add    esp,0x10
c0015316:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001531b:	8b 00                	mov    eax,DWORD PTR [eax]
c001531d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015320:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0015326:	0f 20 d2             	mov    edx,cr2
c0015329:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001532d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015331:	83 ec 08             	sub    esp,0x8
c0015334:	52                   	push   edx
c0015335:	50                   	push   eax
c0015336:	e8 e9 4d ff ff       	call   c000a124 <VAS::tryLoadBackOffDisk(unsigned long)>
c001533b:	83 c4 10             	add    esp,0x10
c001533e:	84 c0                	test   al,al
c0015340:	75 2e                	jne    c0015370 <pgFault(regs*, void*)+0x81>
c0015342:	83 ec 0c             	sub    esp,0xc
c0015345:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015349:	e8 59 fb ff ff       	call   c0014ea7 <displayDebugInfo(regs*)>
c001534e:	83 c4 10             	add    esp,0x10
c0015351:	83 ec 0c             	sub    esp,0xc
c0015354:	68 8a ee 01 c0       	push   0xc001ee8a
c0015359:	e8 e0 fe ff ff       	call   c001523e <displayProgramFault(char const*)>
c001535e:	83 c4 10             	add    esp,0x10
c0015361:	83 ec 0c             	sub    esp,0xc
c0015364:	6a 00                	push   0x0
c0015366:	e8 29 ee ff ff       	call   c0014194 <Thr::terminateFromIRQ(int)>
c001536b:	83 c4 10             	add    esp,0x10
c001536e:	eb 01                	jmp    c0015371 <pgFault(regs*, void*)+0x82>
c0015370:	90                   	nop
c0015371:	83 c4 1c             	add    esp,0x1c
c0015374:	c3                   	ret    

c0015375 <otherISRHandler(regs*, void*)>:
c0015375:	83 ec 0c             	sub    esp,0xc
c0015378:	83 ec 0c             	sub    esp,0xc
c001537b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001537f:	e8 23 fb ff ff       	call   c0014ea7 <displayDebugInfo(regs*)>
c0015384:	83 c4 10             	add    esp,0x10
c0015387:	83 ec 0c             	sub    esp,0xc
c001538a:	68 78 ef 01 c0       	push   0xc001ef78
c001538f:	e8 aa fe ff ff       	call   c001523e <displayProgramFault(char const*)>
c0015394:	83 c4 10             	add    esp,0x10
c0015397:	83 ec 0c             	sub    esp,0xc
c001539a:	6a 00                	push   0x0
c001539c:	e8 f3 ed ff ff       	call   c0014194 <Thr::terminateFromIRQ(int)>
c00153a1:	83 c4 10             	add    esp,0x10
c00153a4:	90                   	nop
c00153a5:	83 c4 0c             	add    esp,0xc
c00153a8:	c3                   	ret    

c00153a9 <opcodeFault(regs*, void*)>:
c00153a9:	55                   	push   ebp
c00153aa:	89 e5                	mov    ebp,esp
c00153ac:	83 ec 08             	sub    esp,0x8
c00153af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153b5:	83 ec 08             	sub    esp,0x8
c00153b8:	50                   	push   eax
c00153b9:	68 95 ee 01 c0       	push   0xc001ee95
c00153be:	e8 6a 51 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c00153c3:	83 c4 10             	add    esp,0x10
c00153c6:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00153cb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00153d1:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00153d7:	84 c0                	test   al,al
c00153d9:	74 21                	je     c00153fc <opcodeFault(regs*, void*)+0x53>
c00153db:	83 ec 0c             	sub    esp,0xc
c00153de:	68 a0 ef 01 c0       	push   0xc001efa0
c00153e3:	e8 45 51 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c00153e8:	83 c4 10             	add    esp,0x10
c00153eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ee:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153f1:	8d 50 19             	lea    edx,[eax+0x19]
c00153f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153fa:	eb 2b                	jmp    c0015427 <opcodeFault(regs*, void*)+0x7e>
c00153fc:	83 ec 0c             	sub    esp,0xc
c00153ff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015402:	e8 a0 fa ff ff       	call   c0014ea7 <displayDebugInfo(regs*)>
c0015407:	83 c4 10             	add    esp,0x10
c001540a:	83 ec 0c             	sub    esp,0xc
c001540d:	68 a3 ee 01 c0       	push   0xc001eea3
c0015412:	e8 27 fe ff ff       	call   c001523e <displayProgramFault(char const*)>
c0015417:	83 c4 10             	add    esp,0x10
c001541a:	83 ec 0c             	sub    esp,0xc
c001541d:	6a 00                	push   0x0
c001541f:	e8 70 ed ff ff       	call   c0014194 <Thr::terminateFromIRQ(int)>
c0015424:	83 c4 10             	add    esp,0x10
c0015427:	c9                   	leave  
c0015428:	c3                   	ret    

c0015429 <i386SaveCoprocessor(void*)>:
c0015429:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001542d:	83 c0 3f             	add    eax,0x3f
c0015430:	83 e0 c0             	and    eax,0xffffffc0
c0015433:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015437:	ff 25 0c 52 02 c0    	jmp    DWORD PTR ds:0xc002520c

c001543d <i386LoadCoprocessor(void*)>:
c001543d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015441:	83 c0 3f             	add    eax,0x3f
c0015444:	83 e0 c0             	and    eax,0xffffffc0
c0015447:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001544b:	ff 25 08 52 02 c0    	jmp    DWORD PTR ds:0xc0025208

c0015451 <x87EmulHandler(regs*, void*)>:
c0015451:	53                   	push   ebx
c0015452:	83 ec 08             	sub    esp,0x8
c0015455:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001545a:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c001545e:	74 10                	je     c0015470 <x87EmulHandler(regs*, void*)+0x1f>
c0015460:	83 ec 0c             	sub    esp,0xc
c0015463:	68 b0 ee 01 c0       	push   0xc001eeb0
c0015468:	e8 42 ad ff ff       	call   c00101af <KePanic(char const*)>
c001546d:	83 c4 10             	add    esp,0x10
c0015470:	0f 20 c0             	mov    eax,cr0
c0015473:	a8 08                	test   al,0x8
c0015475:	74 59                	je     c00154d0 <x87EmulHandler(regs*, void*)+0x7f>
c0015477:	0f 06                	clts   
c0015479:	a1 04 52 02 c0       	mov    eax,ds:0xc0025204
c001547e:	85 c0                	test   eax,eax
c0015480:	74 0e                	je     c0015490 <x87EmulHandler(regs*, void*)+0x3f>
c0015482:	83 ec 0c             	sub    esp,0xc
c0015485:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015488:	e8 9c ff ff ff       	call   c0015429 <i386SaveCoprocessor(void*)>
c001548d:	83 c4 10             	add    esp,0x10
c0015490:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0015496:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c001549a:	75 12                	jne    c00154ae <x87EmulHandler(regs*, void*)+0x5d>
c001549c:	83 ec 0c             	sub    esp,0xc
c001549f:	68 40 02 00 00       	push   0x240
c00154a4:	e8 10 23 ff ff       	call   c00077b9 <malloc>
c00154a9:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00154ac:	eb 10                	jmp    c00154be <x87EmulHandler(regs*, void*)+0x6d>
c00154ae:	83 ec 0c             	sub    esp,0xc
c00154b1:	a1 04 52 02 c0       	mov    eax,ds:0xc0025204
c00154b6:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00154b9:	e8 7f ff ff ff       	call   c001543d <i386LoadCoprocessor(void*)>
c00154be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154c3:	83 c4 10             	add    esp,0x10
c00154c6:	a3 04 52 02 c0       	mov    ds:0xc0025204,eax
c00154cb:	83 c4 08             	add    esp,0x8
c00154ce:	5b                   	pop    ebx
c00154cf:	c3                   	ret    
c00154d0:	83 ec 0c             	sub    esp,0xc
c00154d3:	68 c4 ee 01 c0       	push   0xc001eec4
c00154d8:	e8 50 50 ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c00154dd:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00154e5:	83 c4 18             	add    esp,0x18
c00154e8:	5b                   	pop    ebx
c00154e9:	e9 a6 ec ff ff       	jmp    c0014194 <Thr::terminateFromIRQ(int)>

c00154ee <HalInitialiseCoprocessor()>:
c00154ee:	83 ec 10             	sub    esp,0x10
c00154f1:	c7 05 04 52 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025204,0x0
c00154fb:	6a 00                	push   0x0
c00154fd:	68 51 54 01 c0       	push   0xc0015451
c0015502:	6a 07                	push   0x7
c0015504:	e8 97 69 ff ff       	call   c000bea0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015509:	e8 92 65 00 00       	call   c001baa0 <avxDetect>
c001550e:	83 c4 10             	add    esp,0x10
c0015511:	85 c0                	test   eax,eax
c0015513:	74 1c                	je     c0015531 <HalInitialiseCoprocessor()+0x43>
c0015515:	c7 05 0c 52 02 c0 ca ba 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001baca
c001551f:	c7 05 08 52 02 c0 db ba 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc001badb
c0015529:	83 c4 0c             	add    esp,0xc
c001552c:	e9 bb 65 00 00       	jmp    c001baec <avxInit>
c0015531:	e8 4a 68 00 00       	call   c001bd80 <absolutelyNoChanceInHell>
c0015536:	85 c0                	test   eax,eax
c0015538:	74 1c                	je     c0015556 <HalInitialiseCoprocessor()+0x68>
c001553a:	c7 05 0c 52 02 c0 98 bd 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001bd98
c0015544:	c7 05 08 52 02 c0 a0 bd 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc001bda0
c001554e:	83 c4 0c             	add    esp,0xc
c0015551:	e9 52 68 00 00       	jmp    c001bda8 <sseInit>
c0015556:	e8 6b 68 00 00       	call   c001bdc6 <x87Detect>
c001555b:	85 c0                	test   eax,eax
c001555d:	74 1c                	je     c001557b <HalInitialiseCoprocessor()+0x8d>
c001555f:	c7 05 0c 52 02 c0 e1 bd 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001bde1
c0015569:	c7 05 08 52 02 c0 e8 bd 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc001bde8
c0015573:	83 c4 0c             	add    esp,0xc
c0015576:	e9 74 68 00 00       	jmp    c001bdef <x87Init>
c001557b:	c7 05 0c 52 02 c0 74 4e 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc0014e74
c0015585:	c7 05 08 52 02 c0 74 4e 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc0014e74
c001558f:	0f 20 c0             	mov    eax,cr0
c0015592:	83 c8 04             	or     eax,0x4
c0015595:	0f 22 c0             	mov    cr0,eax
c0015598:	83 c4 0c             	add    esp,0xc
c001559b:	c3                   	ret    

c001559c <HalPanic(char const*)>:
c001559c:	53                   	push   ebx
c001559d:	83 ec 10             	sub    esp,0x10
c00155a0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00155a4:	fa                   	cli    
c00155a5:	53                   	push   ebx
c00155a6:	68 da ee 01 c0       	push   0xc001eeda
c00155ab:	e8 7d 4f ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c00155b0:	83 c4 0c             	add    esp,0xc
c00155b3:	6a 01                	push   0x1
c00155b5:	6a 0f                	push   0xf
c00155b7:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00155bd:	e8 88 2c ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00155c2:	58                   	pop    eax
c00155c3:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00155c9:	e8 74 2e ff ff       	call   c0008442 <VgaText::clearScreen()>
c00155ce:	5a                   	pop    edx
c00155cf:	59                   	pop    ecx
c00155d0:	68 e8 d7 01 c0       	push   0xc001d7e8
c00155d5:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00155db:	e8 a2 2c ff ff       	call   c0008282 <VgaText::setTitle(char*)>
c00155e0:	83 c4 0c             	add    esp,0xc
c00155e3:	6a 01                	push   0x1
c00155e5:	6a 0f                	push   0xf
c00155e7:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00155ed:	e8 58 2c ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00155f2:	58                   	pop    eax
c00155f3:	5a                   	pop    edx
c00155f4:	68 f3 ee 01 c0       	push   0xc001eef3
c00155f9:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00155ff:	e8 32 31 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015604:	83 c4 0c             	add    esp,0xc
c0015607:	6a 0f                	push   0xf
c0015609:	6a 01                	push   0x1
c001560b:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015611:	e8 34 2c ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015616:	59                   	pop    ecx
c0015617:	58                   	pop    eax
c0015618:	68 fc ee 01 c0       	push   0xc001eefc
c001561d:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015623:	e8 0e 31 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015628:	83 c4 0c             	add    esp,0xc
c001562b:	6a 01                	push   0x1
c001562d:	6a 0f                	push   0xf
c001562f:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015635:	e8 10 2c ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001563a:	58                   	pop    eax
c001563b:	5a                   	pop    edx
c001563c:	68 40 ef 01 c0       	push   0xc001ef40
c0015641:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015647:	e8 ea 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001564c:	59                   	pop    ecx
c001564d:	58                   	pop    eax
c001564e:	68 09 ef 01 c0       	push   0xc001ef09
c0015653:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015659:	e8 d8 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001565e:	58                   	pop    eax
c001565f:	5a                   	pop    edx
c0015660:	68 43 ef 01 c0       	push   0xc001ef43
c0015665:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001566b:	e8 c6 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015670:	59                   	pop    ecx
c0015671:	58                   	pop    eax
c0015672:	53                   	push   ebx
c0015673:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015679:	e8 b8 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001567e:	58                   	pop    eax
c001567f:	5a                   	pop    edx
c0015680:	68 40 ef 01 c0       	push   0xc001ef40
c0015685:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001568b:	e8 a6 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015690:	83 c4 10             	add    esp,0x10
c0015693:	eb fe                	jmp    c0015693 <HalPanic(char const*)+0xf7>

c0015695 <HalQueryPerformanceCounter()>:
c0015695:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001569a:	31 d2                	xor    edx,edx
c001569c:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00156a2:	31 c0                	xor    eax,eax
c00156a4:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00156ab:	74 02                	je     c00156af <HalQueryPerformanceCounter()+0x1a>
c00156ad:	0f 31                	rdtsc  
c00156af:	c3                   	ret    

c00156b0 <HalInitialise()>:
c00156b0:	53                   	push   ebx
c00156b1:	83 ec 08             	sub    esp,0x8
c00156b4:	e8 1a 6a ff ff       	call   c000c0d3 <setupINTS()>
c00156b9:	80 3d 80 47 02 c0 00 	cmp    BYTE PTR ds:0xc0024780,0x0
c00156c0:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00156c5:	75 07                	jne    c00156ce <HalInitialise()+0x1e>
c00156c7:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c00156ce:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c00156d4:	83 e0 01             	and    eax,0x1
c00156d7:	a2 00 52 02 c0       	mov    ds:0xc0025200,al
c00156dc:	e8 a7 02 00 00       	call   c0015988 <picOpen()>
c00156e1:	80 3d 00 52 02 c0 00 	cmp    BYTE PTR ds:0xc0025200,0x0
c00156e8:	74 0a                	je     c00156f4 <HalInitialise()+0x44>
c00156ea:	e8 e1 01 00 00       	call   c00158d0 <picDisable()>
c00156ef:	e8 26 5d 00 00       	call   c001b41a <apicOpen()>
c00156f4:	bb 0f 00 00 00       	mov    ebx,0xf
c00156f9:	50                   	push   eax
c00156fa:	6a 00                	push   0x0
c00156fc:	68 75 53 01 c0       	push   0xc0015375
c0015701:	6a 00                	push   0x0
c0015703:	e8 98 67 ff ff       	call   c000bea0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015708:	83 c4 0c             	add    esp,0xc
c001570b:	6a 00                	push   0x0
c001570d:	68 75 53 01 c0       	push   0xc0015375
c0015712:	6a 01                	push   0x1
c0015714:	e8 87 67 ff ff       	call   c000bea0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015719:	83 c4 0c             	add    esp,0xc
c001571c:	6a 00                	push   0x0
c001571e:	68 75 4e 01 c0       	push   0xc0014e75
c0015723:	6a 02                	push   0x2
c0015725:	e8 76 67 ff ff       	call   c000bea0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001572a:	83 c4 0c             	add    esp,0xc
c001572d:	6a 00                	push   0x0
c001572f:	68 75 53 01 c0       	push   0xc0015375
c0015734:	6a 03                	push   0x3
c0015736:	e8 65 67 ff ff       	call   c000bea0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001573b:	83 c4 0c             	add    esp,0xc
c001573e:	6a 00                	push   0x0
c0015740:	68 75 53 01 c0       	push   0xc0015375
c0015745:	6a 04                	push   0x4
c0015747:	e8 54 67 ff ff       	call   c000bea0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001574c:	83 c4 0c             	add    esp,0xc
c001574f:	6a 00                	push   0x0
c0015751:	68 75 53 01 c0       	push   0xc0015375
c0015756:	6a 05                	push   0x5
c0015758:	e8 43 67 ff ff       	call   c000bea0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001575d:	83 c4 0c             	add    esp,0xc
c0015760:	6a 00                	push   0x0
c0015762:	68 a9 53 01 c0       	push   0xc00153a9
c0015767:	6a 06                	push   0x6
c0015769:	e8 32 67 ff ff       	call   c000bea0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001576e:	83 c4 0c             	add    esp,0xc
c0015771:	6a 00                	push   0x0
c0015773:	68 8e 4e 01 c0       	push   0xc0014e8e
c0015778:	6a 08                	push   0x8
c001577a:	e8 21 67 ff ff       	call   c000bea0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001577f:	83 c4 0c             	add    esp,0xc
c0015782:	6a 00                	push   0x0
c0015784:	68 75 53 01 c0       	push   0xc0015375
c0015789:	6a 09                	push   0x9
c001578b:	e8 10 67 ff ff       	call   c000bea0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015790:	83 c4 0c             	add    esp,0xc
c0015793:	6a 00                	push   0x0
c0015795:	68 75 53 01 c0       	push   0xc0015375
c001579a:	6a 0a                	push   0xa
c001579c:	e8 ff 66 ff ff       	call   c000bea0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157a1:	83 c4 0c             	add    esp,0xc
c00157a4:	6a 00                	push   0x0
c00157a6:	68 75 53 01 c0       	push   0xc0015375
c00157ab:	6a 0b                	push   0xb
c00157ad:	e8 ee 66 ff ff       	call   c000bea0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157b2:	83 c4 0c             	add    esp,0xc
c00157b5:	6a 00                	push   0x0
c00157b7:	68 8a 52 01 c0       	push   0xc001528a
c00157bc:	6a 0d                	push   0xd
c00157be:	e8 dd 66 ff ff       	call   c000bea0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157c3:	83 c4 0c             	add    esp,0xc
c00157c6:	6a 00                	push   0x0
c00157c8:	68 ef 52 01 c0       	push   0xc00152ef
c00157cd:	6a 0e                	push   0xe
c00157cf:	e8 cc 66 ff ff       	call   c000bea0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157d4:	83 c4 10             	add    esp,0x10
c00157d7:	50                   	push   eax
c00157d8:	6a 00                	push   0x0
c00157da:	68 75 53 01 c0       	push   0xc0015375
c00157df:	53                   	push   ebx
c00157e0:	43                   	inc    ebx
c00157e1:	e8 ba 66 ff ff       	call   c000bea0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157e6:	83 c4 10             	add    esp,0x10
c00157e9:	83 fb 1e             	cmp    ebx,0x1e
c00157ec:	75 e9                	jne    c00157d7 <HalInitialise()+0x127>
c00157ee:	50                   	push   eax
c00157ef:	6a 00                	push   0x0
c00157f1:	68 ff 13 01 c0       	push   0xc00113ff
c00157f6:	6a 60                	push   0x60
c00157f8:	e8 a3 66 ff ff       	call   c000bea0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157fd:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0015802:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001580c:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0015813:	e8 a1 1f ff ff       	call   c00077b9 <malloc>
c0015818:	89 04 24             	mov    DWORD PTR [esp],eax
c001581b:	89 c3                	mov    ebx,eax
c001581d:	e8 2e 09 00 00       	call   c0016150 <RTC::RTC()>
c0015822:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001582c:	5a                   	pop    edx
c001582d:	59                   	pop    ecx
c001582e:	53                   	push   ebx
c001582f:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015835:	e8 32 61 ff ff       	call   c000b96c <Device::addChild(Device*)>
c001583a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001583c:	6a 00                	push   0x0
c001583e:	6a 00                	push   0x0
c0015840:	6a 00                	push   0x0
c0015842:	53                   	push   ebx
c0015843:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015846:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001584b:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0015851:	83 c4 28             	add    esp,0x28
c0015854:	5b                   	pop    ebx
c0015855:	c3                   	ret    

c0015856 <HalMakeBeep(int)>:
c0015856:	53                   	push   ebx
c0015857:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001585b:	85 db                	test   ebx,ebx
c001585d:	75 07                	jne    c0015866 <HalMakeBeep(int)+0x10>
c001585f:	e4 61                	in     al,0x61
c0015861:	83 e0 fc             	and    eax,0xfffffffc
c0015864:	eb 26                	jmp    c001588c <HalMakeBeep(int)+0x36>
c0015866:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001586b:	99                   	cdq    
c001586c:	f7 fb                	idiv   ebx
c001586e:	89 c1                	mov    ecx,eax
c0015870:	b0 b6                	mov    al,0xb6
c0015872:	e6 43                	out    0x43,al
c0015874:	88 c8                	mov    al,cl
c0015876:	e6 42                	out    0x42,al
c0015878:	89 c8                	mov    eax,ecx
c001587a:	c1 e8 08             	shr    eax,0x8
c001587d:	e6 42                	out    0x42,al
c001587f:	e4 61                	in     al,0x61
c0015881:	88 c2                	mov    dl,al
c0015883:	83 ca 03             	or     edx,0x3
c0015886:	38 c2                	cmp    dl,al
c0015888:	74 04                	je     c001588e <HalMakeBeep(int)+0x38>
c001588a:	88 d0                	mov    al,dl
c001588c:	e6 61                	out    0x61,al
c001588e:	5b                   	pop    ebx
c001588f:	c3                   	ret    

c0015890 <HalGetRand()>:
c0015890:	31 c0                	xor    eax,eax
c0015892:	c3                   	ret    

c0015893 <HalEndOfInterrupt(int)>:
c0015893:	80 3d 00 52 02 c0 00 	cmp    BYTE PTR ds:0xc0025200,0x0
c001589a:	74 23                	je     c00158bf <HalEndOfInterrupt(int)+0x2c>
c001589c:	83 ec 14             	sub    esp,0x14
c001589f:	6a 1b                	push   0x1b
c00158a1:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00158a7:	e8 46 15 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c00158ac:	25 00 f0 ff ff       	and    eax,0xfffff000
c00158b1:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00158bb:	83 c4 1c             	add    esp,0x1c
c00158be:	c3                   	ret    
c00158bf:	e9 54 02 00 00       	jmp    c0015b18 <picEOI(int)>

c00158c4 <HalRestart()>:
c00158c4:	c3                   	ret    

c00158c5 <HalShutdown()>:
c00158c5:	c3                   	ret    

c00158c6 <HalSleep()>:
c00158c6:	c3                   	ret    
c00158c7:	90                   	nop

c00158c8 <picIoWait()>:
c00158c8:	eb 00                	jmp    c00158ca <picIoWait()+0x2>
c00158ca:	eb 00                	jmp    c00158cc <picIoWait()+0x4>
c00158cc:	90                   	nop
c00158cd:	c3                   	ret    
c00158ce:	66 90                	xchg   ax,ax

c00158d0 <picDisable()>:
c00158d0:	83 ec 10             	sub    esp,0x10
c00158d3:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00158da:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00158df:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00158e3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00158e8:	ee                   	out    dx,al
c00158e9:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00158f0:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00158f5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00158f9:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00158fe:	ee                   	out    dx,al
c00158ff:	90                   	nop
c0015900:	83 c4 10             	add    esp,0x10
c0015903:	c3                   	ret    

c0015904 <picGetIRQReg(int)>:
c0015904:	83 ec 10             	sub    esp,0x10
c0015907:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001590b:	25 ff 00 00 00       	and    eax,0xff
c0015910:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015917:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001591b:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001591f:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015924:	ee                   	out    dx,al
c0015925:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015929:	25 ff 00 00 00       	and    eax,0xff
c001592e:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015935:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0015939:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001593d:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015942:	ee                   	out    dx,al
c0015943:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001594a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001594f:	89 c2                	mov    edx,eax
c0015951:	ec                   	in     al,dx
c0015952:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0015956:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001595a:	25 ff 00 00 00       	and    eax,0xff
c001595f:	c1 e0 08             	shl    eax,0x8
c0015962:	89 c1                	mov    ecx,eax
c0015964:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001596b:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015970:	89 c2                	mov    edx,eax
c0015972:	ec                   	in     al,dx
c0015973:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0015977:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001597b:	25 ff 00 00 00       	and    eax,0xff
c0015980:	09 c8                	or     eax,ecx
c0015982:	83 c4 10             	add    esp,0x10
c0015985:	c3                   	ret    
c0015986:	66 90                	xchg   ax,ax

c0015988 <picOpen()>:
c0015988:	83 ec 50             	sub    esp,0x50
c001598b:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0015992:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015997:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001599b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001599f:	ee                   	out    dx,al
c00159a0:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00159a7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00159ac:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00159b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00159b4:	ee                   	out    dx,al
c00159b5:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00159bd:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00159c5:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00159cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00159d0:	89 c2                	mov    edx,eax
c00159d2:	ec                   	in     al,dx
c00159d3:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00159d7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00159db:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00159df:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00159e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00159ea:	89 c2                	mov    edx,eax
c00159ec:	ec                   	in     al,dx
c00159ed:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00159f1:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00159f5:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00159f9:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0015a00:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0015a05:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015a09:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015a0d:	ee                   	out    dx,al
c0015a0e:	e8 b5 fe ff ff       	call   c00158c8 <picIoWait()>
c0015a13:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0015a1a:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0015a1f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015a23:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015a27:	ee                   	out    dx,al
c0015a28:	e8 9b fe ff ff       	call   c00158c8 <picIoWait()>
c0015a2d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015a31:	25 ff 00 00 00       	and    eax,0xff
c0015a36:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015a3d:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015a41:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015a45:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015a49:	ee                   	out    dx,al
c0015a4a:	e8 79 fe ff ff       	call   c00158c8 <picIoWait()>
c0015a4f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015a53:	25 ff 00 00 00       	and    eax,0xff
c0015a58:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015a5f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015a63:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015a67:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015a6b:	ee                   	out    dx,al
c0015a6c:	e8 57 fe ff ff       	call   c00158c8 <picIoWait()>
c0015a71:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015a78:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015a7d:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015a81:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015a85:	ee                   	out    dx,al
c0015a86:	e8 3d fe ff ff       	call   c00158c8 <picIoWait()>
c0015a8b:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015a92:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015a97:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0015a9b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015a9f:	ee                   	out    dx,al
c0015aa0:	e8 23 fe ff ff       	call   c00158c8 <picIoWait()>
c0015aa5:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015aac:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015ab1:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015ab5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015ab9:	ee                   	out    dx,al
c0015aba:	e8 09 fe ff ff       	call   c00158c8 <picIoWait()>
c0015abf:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015ac6:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015acb:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015acf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015ad3:	ee                   	out    dx,al
c0015ad4:	e8 ef fd ff ff       	call   c00158c8 <picIoWait()>
c0015ad9:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015add:	25 ff 00 00 00       	and    eax,0xff
c0015ae2:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015ae9:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015aed:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015af1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015af5:	ee                   	out    dx,al
c0015af6:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0015afa:	25 ff 00 00 00       	and    eax,0xff
c0015aff:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015b06:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015b0a:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015b0e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015b12:	ee                   	out    dx,al
c0015b13:	90                   	nop
c0015b14:	83 c4 50             	add    esp,0x50
c0015b17:	c3                   	ret    

c0015b18 <picEOI(int)>:
c0015b18:	83 ec 10             	sub    esp,0x10
c0015b1b:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015b20:	75 22                	jne    c0015b44 <picEOI(int)+0x2c>
c0015b22:	6a 0b                	push   0xb
c0015b24:	e8 db fd ff ff       	call   c0015904 <picGetIRQReg(int)>
c0015b29:	83 c4 04             	add    esp,0x4
c0015b2c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015b31:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015b36:	25 ff ff 00 00       	and    eax,0xffff
c0015b3b:	25 80 00 00 00       	and    eax,0x80
c0015b40:	74 72                	je     c0015bb4 <picEOI(int)+0x9c>
c0015b42:	66 90                	xchg   ax,ax
c0015b44:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015b49:	75 31                	jne    c0015b7c <picEOI(int)+0x64>
c0015b4b:	6a 0b                	push   0xb
c0015b4d:	e8 b2 fd ff ff       	call   c0015904 <picGetIRQReg(int)>
c0015b52:	83 c4 04             	add    esp,0x4
c0015b55:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015b5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015b5e:	66 85 c0             	test   ax,ax
c0015b61:	78 19                	js     c0015b7c <picEOI(int)+0x64>
c0015b63:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015b6a:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015b6f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015b73:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015b78:	ee                   	out    dx,al
c0015b79:	eb 3d                	jmp    c0015bb8 <picEOI(int)+0xa0>
c0015b7b:	90                   	nop
c0015b7c:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015b81:	7e 19                	jle    c0015b9c <picEOI(int)+0x84>
c0015b83:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015b8a:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015b8f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015b93:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015b98:	ee                   	out    dx,al
c0015b99:	8d 76 00             	lea    esi,[esi+0x0]
c0015b9c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015ba3:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015ba8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015bac:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015bb1:	ee                   	out    dx,al
c0015bb2:	eb 04                	jmp    c0015bb8 <picEOI(int)+0xa0>
c0015bb4:	90                   	nop
c0015bb5:	8d 76 00             	lea    esi,[esi+0x0]
c0015bb8:	83 c4 10             	add    esp,0x10
c0015bbb:	c3                   	ret    

c0015bbc <RTC::open(int, int, void*)>:
c0015bbc:	31 c0                	xor    eax,eax
c0015bbe:	c3                   	ret    
c0015bbf:	90                   	nop

c0015bc0 <RTC::close(int, int, void*)>:
c0015bc0:	31 c0                	xor    eax,eax
c0015bc2:	c3                   	ret    
c0015bc3:	90                   	nop

c0015bc4 <RTC::timeInSecondsUTC()>:
c0015bc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015bc8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015bce:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015bd4:	c3                   	ret    
c0015bd5:	90                   	nop

c0015bd6 <RTC::timeInDatetimeUTC()>:
c0015bd6:	53                   	push   ebx
c0015bd7:	83 ec 14             	sub    esp,0x14
c0015bda:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015bde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015be2:	8b 10                	mov    edx,DWORD PTR [eax]
c0015be4:	50                   	push   eax
c0015be5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015be8:	83 c4 0c             	add    esp,0xc
c0015beb:	52                   	push   edx
c0015bec:	50                   	push   eax
c0015bed:	53                   	push   ebx
c0015bee:	e8 ed 5a ff ff       	call   c000b6e0 <secondsToDatetime(unsigned long long)>
c0015bf3:	89 d8                	mov    eax,ebx
c0015bf5:	83 c4 14             	add    esp,0x14
c0015bf8:	5b                   	pop    ebx
c0015bf9:	c2 04 00             	ret    0x4

c0015bfc <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015bfc:	56                   	push   esi
c0015bfd:	53                   	push   ebx
c0015bfe:	83 ec 14             	sub    esp,0x14
c0015c01:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015c05:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015c07:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015c0a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015c0e:	52                   	push   edx
c0015c0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c17:	50                   	push   eax
c0015c18:	e8 c3 5a ff ff       	call   c000b6e0 <secondsToDatetime(unsigned long long)>
c0015c1d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015c21:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015c25:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015c29:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015c2d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015c31:	89 f0                	mov    eax,esi
c0015c33:	83 c4 20             	add    esp,0x20
c0015c36:	5b                   	pop    ebx
c0015c37:	5e                   	pop    esi
c0015c38:	ff e0                	jmp    eax

c0015c3a <RTC::~RTC()>:
c0015c3a:	83 ec 0c             	sub    esp,0xc
c0015c3d:	ba e0 ef 01 c0       	mov    edx,0xc001efe0
c0015c42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c46:	89 10                	mov    DWORD PTR [eax],edx
c0015c48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c4c:	83 ec 0c             	sub    esp,0xc
c0015c4f:	50                   	push   eax
c0015c50:	e8 0f 58 ff ff       	call   c000b464 <Clock::~Clock()>
c0015c55:	83 c4 10             	add    esp,0x10
c0015c58:	90                   	nop
c0015c59:	83 c4 0c             	add    esp,0xc
c0015c5c:	c3                   	ret    
c0015c5d:	90                   	nop

c0015c5e <RTC::~RTC()>:
c0015c5e:	83 ec 0c             	sub    esp,0xc
c0015c61:	83 ec 0c             	sub    esp,0xc
c0015c64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c68:	e8 cd ff ff ff       	call   c0015c3a <RTC::~RTC()>
c0015c6d:	83 c4 10             	add    esp,0x10
c0015c70:	83 ec 08             	sub    esp,0x8
c0015c73:	68 60 01 00 00       	push   0x160
c0015c78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c7c:	e8 b6 47 ff ff       	call   c000a437 <operator delete(void*, unsigned long)>
c0015c81:	83 c4 10             	add    esp,0x10
c0015c84:	83 c4 0c             	add    esp,0xc
c0015c87:	c3                   	ret    

c0015c88 <RTC::get_update_in_progress_flag()>:
c0015c88:	83 ec 14             	sub    esp,0x14
c0015c8b:	6a 0a                	push   0xa
c0015c8d:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015c93:	e8 0e 12 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015c98:	83 c4 1c             	add    esp,0x1c
c0015c9b:	c0 e8 07             	shr    al,0x7
c0015c9e:	c3                   	ret    
c0015c9f:	90                   	nop

c0015ca0 <RTC::completeRTCRefresh()>:
c0015ca0:	55                   	push   ebp
c0015ca1:	57                   	push   edi
c0015ca2:	56                   	push   esi
c0015ca3:	53                   	push   ebx
c0015ca4:	83 ec 2c             	sub    esp,0x2c
c0015ca7:	8b 1d 8c 44 02 c0    	mov    ebx,DWORD PTR ds:0xc002448c
c0015cad:	83 ec 0c             	sub    esp,0xc
c0015cb0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015cb4:	e8 cf ff ff ff       	call   c0015c88 <RTC::get_update_in_progress_flag()>
c0015cb9:	83 c4 10             	add    esp,0x10
c0015cbc:	84 c0                	test   al,al
c0015cbe:	74 0e                	je     c0015cce <RTC::completeRTCRefresh()+0x2e>
c0015cc0:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015cc6:	3b 05 8c 44 02 c0    	cmp    eax,DWORD PTR ds:0xc002448c
c0015ccc:	73 df                	jae    c0015cad <RTC::completeRTCRefresh()+0xd>
c0015cce:	55                   	push   ebp
c0015ccf:	55                   	push   ebp
c0015cd0:	6a 00                	push   0x0
c0015cd2:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015cd8:	e8 c9 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015cdd:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015ce1:	58                   	pop    eax
c0015ce2:	5a                   	pop    edx
c0015ce3:	6a 02                	push   0x2
c0015ce5:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015ceb:	e8 b6 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015cf0:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015cf4:	59                   	pop    ecx
c0015cf5:	5b                   	pop    ebx
c0015cf6:	6a 04                	push   0x4
c0015cf8:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015cfe:	e8 a3 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d03:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015d07:	5e                   	pop    esi
c0015d08:	5f                   	pop    edi
c0015d09:	6a 07                	push   0x7
c0015d0b:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d11:	e8 90 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d16:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015d1a:	5d                   	pop    ebp
c0015d1b:	58                   	pop    eax
c0015d1c:	6a 08                	push   0x8
c0015d1e:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d24:	e8 7d 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d29:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015d2d:	58                   	pop    eax
c0015d2e:	5a                   	pop    edx
c0015d2f:	6a 09                	push   0x9
c0015d31:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d37:	e8 6a 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d3c:	83 c4 10             	add    esp,0x10
c0015d3f:	0f b6 e8             	movzx  ebp,al
c0015d42:	8b 1d 8c 44 02 c0    	mov    ebx,DWORD PTR ds:0xc002448c
c0015d48:	83 ec 0c             	sub    esp,0xc
c0015d4b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015d4f:	e8 34 ff ff ff       	call   c0015c88 <RTC::get_update_in_progress_flag()>
c0015d54:	83 c4 10             	add    esp,0x10
c0015d57:	84 c0                	test   al,al
c0015d59:	74 0e                	je     c0015d69 <RTC::completeRTCRefresh()+0xc9>
c0015d5b:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015d61:	3b 05 8c 44 02 c0    	cmp    eax,DWORD PTR ds:0xc002448c
c0015d67:	73 df                	jae    c0015d48 <RTC::completeRTCRefresh()+0xa8>
c0015d69:	50                   	push   eax
c0015d6a:	50                   	push   eax
c0015d6b:	6a 00                	push   0x0
c0015d6d:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d73:	e8 2e 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d78:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015d7c:	58                   	pop    eax
c0015d7d:	5a                   	pop    edx
c0015d7e:	6a 02                	push   0x2
c0015d80:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d86:	e8 1b 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d8b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015d8f:	59                   	pop    ecx
c0015d90:	5b                   	pop    ebx
c0015d91:	6a 04                	push   0x4
c0015d93:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d99:	e8 08 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d9e:	5e                   	pop    esi
c0015d9f:	88 c3                	mov    bl,al
c0015da1:	5f                   	pop    edi
c0015da2:	6a 07                	push   0x7
c0015da4:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015daa:	e8 f7 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015daf:	89 c6                	mov    esi,eax
c0015db1:	58                   	pop    eax
c0015db2:	5a                   	pop    edx
c0015db3:	6a 08                	push   0x8
c0015db5:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015dbb:	e8 e6 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015dc0:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015dc4:	59                   	pop    ecx
c0015dc5:	5f                   	pop    edi
c0015dc6:	6a 09                	push   0x9
c0015dc8:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015dce:	e8 d3 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015dd3:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015dd7:	0f b6 f8             	movzx  edi,al
c0015dda:	83 c4 10             	add    esp,0x10
c0015ddd:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015de1:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015de5:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015de9:	89 f1                	mov    ecx,esi
c0015deb:	0f 94 c0             	sete   al
c0015dee:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015df2:	0f 94 c2             	sete   dl
c0015df5:	21 d0                	and    eax,edx
c0015df7:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015dfb:	0f 94 c2             	sete   dl
c0015dfe:	21 c2                	and    edx,eax
c0015e00:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015e04:	0f 94 c0             	sete   al
c0015e07:	21 d0                	and    eax,edx
c0015e09:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015e0d:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015e11:	0f 94 c1             	sete   cl
c0015e14:	84 c8                	test   al,cl
c0015e16:	75 29                	jne    c0015e41 <RTC::completeRTCRefresh()+0x1a1>
c0015e18:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015e1c:	89 fd                	mov    ebp,edi
c0015e1e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015e22:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015e26:	89 f0                	mov    eax,esi
c0015e28:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015e2c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015e30:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015e34:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015e38:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015e3c:	e9 01 ff ff ff       	jmp    c0015d42 <RTC::completeRTCRefresh()+0xa2>
c0015e41:	39 fd                	cmp    ebp,edi
c0015e43:	75 d3                	jne    c0015e18 <RTC::completeRTCRefresh()+0x178>
c0015e45:	55                   	push   ebp
c0015e46:	55                   	push   ebp
c0015e47:	6a 0b                	push   0xb
c0015e49:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015e4f:	e8 52 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e54:	83 c4 10             	add    esp,0x10
c0015e57:	89 c5                	mov    ebp,eax
c0015e59:	a8 04                	test   al,0x4
c0015e5b:	75 78                	jne    c0015ed5 <RTC::completeRTCRefresh()+0x235>
c0015e5d:	b1 0a                	mov    cl,0xa
c0015e5f:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015e63:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015e67:	83 e2 0f             	and    edx,0xf
c0015e6a:	c0 e8 04             	shr    al,0x4
c0015e6d:	c1 ef 04             	shr    edi,0x4
c0015e70:	f6 e1                	mul    cl
c0015e72:	6b ff 0a             	imul   edi,edi,0xa
c0015e75:	01 d0                	add    eax,edx
c0015e77:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015e7b:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0015e7f:	83 e2 0f             	and    edx,0xf
c0015e82:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015e86:	c0 e8 04             	shr    al,0x4
c0015e89:	f6 e1                	mul    cl
c0015e8b:	01 d0                	add    eax,edx
c0015e8d:	88 da                	mov    dl,bl
c0015e8f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015e93:	83 e2 0f             	and    edx,0xf
c0015e96:	88 d8                	mov    al,bl
c0015e98:	83 e3 80             	and    ebx,0xffffff80
c0015e9b:	c0 e8 04             	shr    al,0x4
c0015e9e:	83 e0 07             	and    eax,0x7
c0015ea1:	f6 e1                	mul    cl
c0015ea3:	01 d0                	add    eax,edx
c0015ea5:	89 f2                	mov    edx,esi
c0015ea7:	09 c3                	or     ebx,eax
c0015ea9:	83 e2 0f             	and    edx,0xf
c0015eac:	89 f0                	mov    eax,esi
c0015eae:	c0 e8 04             	shr    al,0x4
c0015eb1:	f6 e1                	mul    cl
c0015eb3:	8d 34 02             	lea    esi,[edx+eax*1]
c0015eb6:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015eba:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015ebe:	83 e2 0f             	and    edx,0xf
c0015ec1:	c0 e8 04             	shr    al,0x4
c0015ec4:	f6 e1                	mul    cl
c0015ec6:	01 d0                	add    eax,edx
c0015ec8:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0015ecc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015ed0:	83 e0 0f             	and    eax,0xf
c0015ed3:	01 c7                	add    edi,eax
c0015ed5:	83 e5 02             	and    ebp,0x2
c0015ed8:	75 14                	jne    c0015eee <RTC::completeRTCRefresh()+0x24e>
c0015eda:	84 db                	test   bl,bl
c0015edc:	79 10                	jns    c0015eee <RTC::completeRTCRefresh()+0x24e>
c0015ede:	83 e3 7f             	and    ebx,0x7f
c0015ee1:	b9 18 00 00 00       	mov    ecx,0x18
c0015ee6:	8d 43 0c             	lea    eax,[ebx+0xc]
c0015ee9:	99                   	cdq    
c0015eea:	f7 f9                	idiv   ecx
c0015eec:	88 d3                	mov    bl,dl
c0015eee:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0015ef4:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0015efa:	77 06                	ja     c0015f02 <RTC::completeRTCRefresh()+0x262>
c0015efc:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0015f02:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0015f07:	31 d2                	xor    edx,edx
c0015f09:	c1 e1 10             	shl    ecx,0x10
c0015f0c:	89 d7                	mov    edi,edx
c0015f0e:	c1 e5 10             	shl    ebp,0x10
c0015f11:	31 c0                	xor    eax,eax
c0015f13:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0015f19:	09 cf                	or     edi,ecx
c0015f1b:	89 fa                	mov    edx,edi
c0015f1d:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0015f21:	88 da                	mov    dl,bl
c0015f23:	89 f3                	mov    ebx,esi
c0015f25:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0015f29:	88 d8                	mov    al,bl
c0015f2b:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0015f2f:	0f b7 c8             	movzx  ecx,ax
c0015f32:	09 e9                	or     ecx,ebp
c0015f34:	89 c8                	mov    eax,ecx
c0015f36:	51                   	push   ecx
c0015f37:	51                   	push   ecx
c0015f38:	52                   	push   edx
c0015f39:	50                   	push   eax
c0015f3a:	e8 14 56 ff ff       	call   c000b553 <datetimeToSeconds(datetime_t)>
c0015f3f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0015f43:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0015f49:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0015f4f:	83 c4 3c             	add    esp,0x3c
c0015f52:	5b                   	pop    ebx
c0015f53:	5e                   	pop    esi
c0015f54:	5f                   	pop    edi
c0015f55:	5d                   	pop    ebp
c0015f56:	c3                   	ret    
c0015f57:	90                   	nop

c0015f58 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0015f58:	55                   	push   ebp
c0015f59:	57                   	push   edi
c0015f5a:	56                   	push   esi
c0015f5b:	53                   	push   ebx
c0015f5c:	83 ec 30             	sub    esp,0x30
c0015f5f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015f63:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0015f67:	6a 00                	push   0x0
c0015f69:	6a 00                	push   0x0
c0015f6b:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015f71:	e8 46 10 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015f76:	83 c4 0c             	add    esp,0xc
c0015f79:	6a 00                	push   0x0
c0015f7b:	6a 02                	push   0x2
c0015f7d:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015f83:	e8 34 10 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015f88:	31 d2                	xor    edx,edx
c0015f8a:	89 f9                	mov    ecx,edi
c0015f8c:	89 f8                	mov    eax,edi
c0015f8e:	c1 e9 10             	shr    ecx,0x10
c0015f91:	0f b6 c4             	movzx  eax,ah
c0015f94:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0015f98:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0015f9c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015fa0:	b9 64 00 00 00       	mov    ecx,0x64
c0015fa5:	89 f0                	mov    eax,esi
c0015fa7:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0015fab:	89 f0                	mov    eax,esi
c0015fad:	0f b6 c4             	movzx  eax,ah
c0015fb0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015fb4:	89 f0                	mov    eax,esi
c0015fb6:	c1 e8 10             	shr    eax,0x10
c0015fb9:	66 f7 f1             	div    cx
c0015fbc:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0015fc1:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0015fc6:	59                   	pop    ecx
c0015fc7:	5b                   	pop    ebx
c0015fc8:	89 fb                	mov    ebx,edi
c0015fca:	6a 0b                	push   0xb
c0015fcc:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015fd2:	e8 cf 0e ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015fd7:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0015fdb:	83 c4 10             	add    esp,0x10
c0015fde:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0015fe3:	75 74                	jne    c0016059 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0015fe5:	b2 0a                	mov    dl,0xa
c0015fe7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015feb:	0f b6 c1             	movzx  eax,cl
c0015fee:	f6 f2                	div    dl
c0015ff0:	88 c3                	mov    bl,al
c0015ff2:	88 e0                	mov    al,ah
c0015ff4:	c1 e3 04             	shl    ebx,0x4
c0015ff7:	09 c3                	or     ebx,eax
c0015ff9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015ffe:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0016002:	f6 f2                	div    dl
c0016004:	88 c1                	mov    cl,al
c0016006:	88 e0                	mov    al,ah
c0016008:	c1 e1 04             	shl    ecx,0x4
c001600b:	09 c1                	or     ecx,eax
c001600d:	89 f8                	mov    eax,edi
c001600f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0016013:	0f b6 c0             	movzx  eax,al
c0016016:	f6 f2                	div    dl
c0016018:	88 c3                	mov    bl,al
c001601a:	88 e0                	mov    al,ah
c001601c:	c1 e3 04             	shl    ebx,0x4
c001601f:	09 c3                	or     ebx,eax
c0016021:	89 f0                	mov    eax,esi
c0016023:	0f b6 c0             	movzx  eax,al
c0016026:	f6 f2                	div    dl
c0016028:	88 c1                	mov    cl,al
c001602a:	88 e0                	mov    al,ah
c001602c:	c1 e1 04             	shl    ecx,0x4
c001602f:	09 c1                	or     ecx,eax
c0016031:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016036:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c001603a:	f6 f2                	div    dl
c001603c:	88 c1                	mov    cl,al
c001603e:	88 e0                	mov    al,ah
c0016040:	c1 e1 04             	shl    ecx,0x4
c0016043:	09 c1                	or     ecx,eax
c0016045:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c001604a:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001604e:	f6 f2                	div    dl
c0016050:	89 c5                	mov    ebp,eax
c0016052:	88 e0                	mov    al,ah
c0016054:	c1 e5 04             	shl    ebp,0x4
c0016057:	09 c5                	or     ebp,eax
c0016059:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c001605e:	75 17                	jne    c0016077 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016060:	80 fb 0b             	cmp    bl,0xb
c0016063:	76 0c                	jbe    c0016071 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c0016065:	80 eb 0c             	sub    bl,0xc
c0016068:	75 02                	jne    c001606c <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c001606a:	b3 0c                	mov    bl,0xc
c001606c:	83 cb 80             	or     ebx,0xffffff80
c001606f:	eb 06                	jmp    c0016077 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016071:	84 db                	test   bl,bl
c0016073:	75 02                	jne    c0016077 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016075:	b3 0c                	mov    bl,0xc
c0016077:	0f b6 db             	movzx  ebx,bl
c001607a:	50                   	push   eax
c001607b:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0016080:	50                   	push   eax
c0016081:	6a 00                	push   0x0
c0016083:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0016089:	e8 2e 0f ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c001608e:	83 c4 0c             	add    esp,0xc
c0016091:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016096:	50                   	push   eax
c0016097:	6a 02                	push   0x2
c0016099:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c001609f:	e8 18 0f ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160a4:	83 c4 0c             	add    esp,0xc
c00160a7:	53                   	push   ebx
c00160a8:	6a 04                	push   0x4
c00160aa:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00160b0:	e8 07 0f ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160b5:	83 c4 0c             	add    esp,0xc
c00160b8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00160bd:	50                   	push   eax
c00160be:	6a 07                	push   0x7
c00160c0:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00160c6:	e8 f1 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160cb:	83 c4 0c             	add    esp,0xc
c00160ce:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00160d3:	50                   	push   eax
c00160d4:	6a 08                	push   0x8
c00160d6:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00160dc:	e8 db 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160e1:	83 c4 0c             	add    esp,0xc
c00160e4:	89 e8                	mov    eax,ebp
c00160e6:	0f b6 e8             	movzx  ebp,al
c00160e9:	55                   	push   ebp
c00160ea:	6a 09                	push   0x9
c00160ec:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00160f2:	e8 c5 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160f7:	5a                   	pop    edx
c00160f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00160fc:	e8 9f fb ff ff       	call   c0015ca0 <RTC::completeRTCRefresh()>
c0016101:	83 c4 3c             	add    esp,0x3c
c0016104:	b0 01                	mov    al,0x1
c0016106:	5b                   	pop    ebx
c0016107:	5e                   	pop    esi
c0016108:	5f                   	pop    edi
c0016109:	5d                   	pop    ebp
c001610a:	c3                   	ret    

c001610b <rtcIRQHandler(regs*, void*)>:
c001610b:	53                   	push   ebx
c001610c:	83 ec 10             	sub    esp,0x10
c001610f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016113:	6a 0c                	push   0xc
c0016115:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c001611b:	e8 86 0d ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0016120:	83 c4 10             	add    esp,0x10
c0016123:	84 c0                	test   al,al
c0016125:	79 24                	jns    c001614b <rtcIRQHandler(regs*, void*)+0x40>
c0016127:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001612e:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0016135:	66 ff 05 14 52 02 c0 	inc    WORD PTR ds:0xc0025214
c001613c:	75 0d                	jne    c001614b <rtcIRQHandler(regs*, void*)+0x40>
c001613e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0016142:	83 c4 08             	add    esp,0x8
c0016145:	5b                   	pop    ebx
c0016146:	e9 55 fb ff ff       	jmp    c0015ca0 <RTC::completeRTCRefresh()>
c001614b:	83 c4 08             	add    esp,0x8
c001614e:	5b                   	pop    ebx
c001614f:	c3                   	ret    

c0016150 <RTC::RTC()>:
c0016150:	83 ec 1c             	sub    esp,0x1c
c0016153:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016157:	83 ec 08             	sub    esp,0x8
c001615a:	68 c3 ef 01 c0       	push   0xc001efc3
c001615f:	50                   	push   eax
c0016160:	e8 c9 52 ff ff       	call   c000b42e <Clock::Clock(char const*)>
c0016165:	83 c4 10             	add    esp,0x10
c0016168:	ba e0 ef 01 c0       	mov    edx,0xc001efe0
c001616d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016171:	89 10                	mov    DWORD PTR [eax],edx
c0016173:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016177:	83 ec 0c             	sub    esp,0xc
c001617a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001617e:	6a 01                	push   0x1
c0016180:	68 0b 61 01 c0       	push   0xc001610b
c0016185:	6a 08                	push   0x8
c0016187:	50                   	push   eax
c0016188:	e8 8b 57 ff ff       	call   c000b918 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001618d:	83 c4 20             	add    esp,0x20
c0016190:	89 c2                	mov    edx,eax
c0016192:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016196:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001619c:	fa                   	cli    
c001619d:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00161a2:	40                   	inc    eax
c00161a3:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00161a8:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00161ad:	83 ec 08             	sub    esp,0x8
c00161b0:	6a 0b                	push   0xb
c00161b2:	50                   	push   eax
c00161b3:	e8 ee 0c ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00161b8:	83 c4 10             	add    esp,0x10
c00161bb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00161bf:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00161c4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00161c8:	83 ca 10             	or     edx,0x10
c00161cb:	81 e2 ff 00 00 00    	and    edx,0xff
c00161d1:	83 ec 04             	sub    esp,0x4
c00161d4:	52                   	push   edx
c00161d5:	6a 0b                	push   0xb
c00161d7:	50                   	push   eax
c00161d8:	e8 df 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00161dd:	83 c4 10             	add    esp,0x10
c00161e0:	83 ec 0c             	sub    esp,0xc
c00161e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00161e7:	e8 b4 fa ff ff       	call   c0015ca0 <RTC::completeRTCRefresh()>
c00161ec:	83 c4 10             	add    esp,0x10
c00161ef:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00161f4:	48                   	dec    eax
c00161f5:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00161fa:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00161ff:	85 c0                	test   eax,eax
c0016201:	75 01                	jne    c0016204 <RTC::RTC()+0xb4>
c0016203:	fb                   	sti    
c0016204:	90                   	nop
c0016205:	83 c4 1c             	add    esp,0x1c
c0016208:	c3                   	ret    
c0016209:	66 90                	xchg   ax,ax
c001620b:	90                   	nop

c001620c <HalConsoleScroll(int, int)>:
c001620c:	83 ec 10             	sub    esp,0x10
c001620f:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0016217:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001621f:	90                   	nop
c0016220:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0016225:	0f 8f e1 00 00 00    	jg     c001630c <HalConsoleScroll(int, int)+0x100>
c001622b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016233:	90                   	nop
c0016234:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001623c:	0f 8f be 00 00 00    	jg     c0016300 <HalConsoleScroll(int, int)+0xf4>
c0016242:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016246:	89 d0                	mov    eax,edx
c0016248:	c1 e0 02             	shl    eax,0x2
c001624b:	01 d0                	add    eax,edx
c001624d:	c1 e0 05             	shl    eax,0x5
c0016250:	89 c2                	mov    edx,eax
c0016252:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016256:	01 d0                	add    eax,edx
c0016258:	89 c2                	mov    edx,eax
c001625a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001625e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0016261:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016265:	89 d0                	mov    eax,edx
c0016267:	c1 e0 02             	shl    eax,0x2
c001626a:	01 d0                	add    eax,edx
c001626c:	c1 e0 05             	shl    eax,0x5
c001626f:	89 c2                	mov    edx,eax
c0016271:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016275:	01 d0                	add    eax,edx
c0016277:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001627d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016281:	01 c2                	add    edx,eax
c0016283:	8a 01                	mov    al,BYTE PTR [ecx]
c0016285:	88 02                	mov    BYTE PTR [edx],al
c0016287:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001628c:	75 66                	jne    c00162f4 <HalConsoleScroll(int, int)+0xe8>
c001628e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016292:	83 e0 01             	and    eax,0x1
c0016295:	74 39                	je     c00162d0 <HalConsoleScroll(int, int)+0xc4>
c0016297:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001629b:	83 e0 0f             	and    eax,0xf
c001629e:	88 c2                	mov    dl,al
c00162a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00162a4:	c1 e0 04             	shl    eax,0x4
c00162a7:	88 d1                	mov    cl,dl
c00162a9:	09 c1                	or     ecx,eax
c00162ab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00162af:	89 d0                	mov    eax,edx
c00162b1:	c1 e0 02             	shl    eax,0x2
c00162b4:	01 d0                	add    eax,edx
c00162b6:	c1 e0 05             	shl    eax,0x5
c00162b9:	89 c2                	mov    edx,eax
c00162bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162bf:	01 d0                	add    eax,edx
c00162c1:	89 c2                	mov    edx,eax
c00162c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162c7:	01 d0                	add    eax,edx
c00162c9:	88 ca                	mov    dl,cl
c00162cb:	88 10                	mov    BYTE PTR [eax],dl
c00162cd:	eb 25                	jmp    c00162f4 <HalConsoleScroll(int, int)+0xe8>
c00162cf:	90                   	nop
c00162d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00162d4:	89 d0                	mov    eax,edx
c00162d6:	c1 e0 02             	shl    eax,0x2
c00162d9:	01 d0                	add    eax,edx
c00162db:	c1 e0 05             	shl    eax,0x5
c00162de:	89 c2                	mov    edx,eax
c00162e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162e4:	01 d0                	add    eax,edx
c00162e6:	89 c2                	mov    edx,eax
c00162e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162ec:	01 d0                	add    eax,edx
c00162ee:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00162f1:	8d 76 00             	lea    esi,[esi+0x0]
c00162f4:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00162f8:	e9 37 ff ff ff       	jmp    c0016234 <HalConsoleScroll(int, int)+0x28>
c00162fd:	8d 76 00             	lea    esi,[esi+0x0]
c0016300:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016304:	e9 17 ff ff ff       	jmp    c0016220 <HalConsoleScroll(int, int)+0x14>
c0016309:	8d 76 00             	lea    esi,[esi+0x0]
c001630c:	90                   	nop
c001630d:	83 c4 10             	add    esp,0x10
c0016310:	c3                   	ret    
c0016311:	8d 76 00             	lea    esi,[esi+0x0]

c0016314 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0016314:	83 ec 14             	sub    esp,0x14
c0016317:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001631b:	88 04 24             	mov    BYTE PTR [esp],al
c001631e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016321:	25 ff 00 00 00       	and    eax,0xff
c0016326:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001632a:	89 d1                	mov    ecx,edx
c001632c:	83 e1 0f             	and    ecx,0xf
c001632f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016333:	c1 e2 04             	shl    edx,0x4
c0016336:	81 e2 ff 00 00 00    	and    edx,0xff
c001633c:	09 ca                	or     edx,ecx
c001633e:	c1 e2 08             	shl    edx,0x8
c0016341:	09 d0                	or     eax,edx
c0016343:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0016348:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0016350:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016354:	89 d0                	mov    eax,edx
c0016356:	c1 e0 02             	shl    eax,0x2
c0016359:	01 d0                	add    eax,edx
c001635b:	c1 e0 04             	shl    eax,0x4
c001635e:	89 c2                	mov    edx,eax
c0016360:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016364:	01 d0                	add    eax,edx
c0016366:	01 c0                	add    eax,eax
c0016368:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001636c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016370:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0016375:	66 89 02             	mov    WORD PTR [edx],ax
c0016378:	90                   	nop
c0016379:	83 c4 14             	add    esp,0x14
c001637c:	c3                   	ret    
c001637d:	8d 76 00             	lea    esi,[esi+0x0]

c0016380 <HalConsoleCursorUpdate(int, int)>:
c0016380:	83 ec 20             	sub    esp,0x20
c0016383:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016387:	89 c2                	mov    edx,eax
c0016389:	89 d0                	mov    eax,edx
c001638b:	c1 e0 02             	shl    eax,0x2
c001638e:	01 d0                	add    eax,edx
c0016390:	c1 e0 04             	shl    eax,0x4
c0016393:	89 c2                	mov    edx,eax
c0016395:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016399:	01 d0                	add    eax,edx
c001639b:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00163a0:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00163a7:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00163ac:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00163b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163b4:	ee                   	out    dx,al
c00163b5:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00163ba:	25 ff 00 00 00       	and    eax,0xff
c00163bf:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00163c6:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00163ca:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00163ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00163d2:	ee                   	out    dx,al
c00163d3:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00163da:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00163df:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00163e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00163e7:	ee                   	out    dx,al
c00163e8:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00163ed:	66 c1 e8 08          	shr    ax,0x8
c00163f1:	25 ff 00 00 00       	and    eax,0xff
c00163f6:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00163fd:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0016401:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0016405:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016409:	ee                   	out    dx,al
c001640a:	90                   	nop
c001640b:	83 c4 20             	add    esp,0x20
c001640e:	c3                   	ret    
c001640f:	90                   	nop

c0016410 <FAT::getName()>:
c0016410:	b8 14 f0 01 c0       	mov    eax,0xc001f014
c0016415:	c3                   	ret    
c0016416:	66 90                	xchg   ax,ax

c0016418 <FAT::tell(void*, unsigned long long*)>:
c0016418:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001641d:	75 09                	jne    c0016428 <FAT::tell(void*, unsigned long long*)+0x10>
c001641f:	b8 04 00 00 00       	mov    eax,0x4
c0016424:	c3                   	ret    
c0016425:	8d 76 00             	lea    esi,[esi+0x0]
c0016428:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001642d:	75 09                	jne    c0016438 <FAT::tell(void*, unsigned long long*)+0x20>
c001642f:	b8 04 00 00 00       	mov    eax,0x4
c0016434:	c3                   	ret    
c0016435:	8d 76 00             	lea    esi,[esi+0x0]
c0016438:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001643c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001643f:	ba 00 00 00 00       	mov    edx,0x0
c0016444:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016448:	89 01                	mov    DWORD PTR [ecx],eax
c001644a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001644d:	b8 00 00 00 00       	mov    eax,0x0
c0016452:	c3                   	ret    
c0016453:	90                   	nop

c0016454 <FAT::stat(void*, unsigned long long*)>:
c0016454:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016459:	75 09                	jne    c0016464 <FAT::stat(void*, unsigned long long*)+0x10>
c001645b:	b8 04 00 00 00       	mov    eax,0x4
c0016460:	c3                   	ret    
c0016461:	8d 76 00             	lea    esi,[esi+0x0]
c0016464:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016469:	75 09                	jne    c0016474 <FAT::stat(void*, unsigned long long*)+0x20>
c001646b:	b8 04 00 00 00       	mov    eax,0x4
c0016470:	c3                   	ret    
c0016471:	8d 76 00             	lea    esi,[esi+0x0]
c0016474:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016478:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001647b:	ba 00 00 00 00       	mov    edx,0x0
c0016480:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016484:	89 01                	mov    DWORD PTR [ecx],eax
c0016486:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016489:	b8 00 00 00 00       	mov    eax,0x0
c001648e:	c3                   	ret    
c001648f:	90                   	nop

c0016490 <FAT::~FAT()>:
c0016490:	83 ec 0c             	sub    esp,0xc
c0016493:	ba 60 f0 01 c0       	mov    edx,0xc001f060
c0016498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001649c:	89 10                	mov    DWORD PTR [eax],edx
c001649e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164a2:	83 ec 0c             	sub    esp,0xc
c00164a5:	50                   	push   eax
c00164a6:	e8 c7 43 ff ff       	call   c000a872 <Filesystem::~Filesystem()>
c00164ab:	83 c4 10             	add    esp,0x10
c00164ae:	90                   	nop
c00164af:	83 c4 0c             	add    esp,0xc
c00164b2:	c3                   	ret    
c00164b3:	90                   	nop

c00164b4 <FAT::~FAT()>:
c00164b4:	83 ec 0c             	sub    esp,0xc
c00164b7:	83 ec 0c             	sub    esp,0xc
c00164ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164be:	e8 cd ff ff ff       	call   c0016490 <FAT::~FAT()>
c00164c3:	83 c4 10             	add    esp,0x10
c00164c6:	83 ec 08             	sub    esp,0x8
c00164c9:	6a 08                	push   0x8
c00164cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164cf:	e8 63 3f ff ff       	call   c000a437 <operator delete(void*, unsigned long)>
c00164d4:	83 c4 10             	add    esp,0x10
c00164d7:	83 c4 0c             	add    esp,0xc
c00164da:	c3                   	ret    
c00164db:	90                   	nop

c00164dc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00164dc:	83 ec 1c             	sub    esp,0x1c
c00164df:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00164e6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00164eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00164ef:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c00164f6:	83 f8 ff             	cmp    eax,0xffffffff
c00164f9:	75 35                	jne    c0016530 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00164fb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00164ff:	88 c2                	mov    dl,al
c0016501:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016506:	01 d0                	add    eax,edx
c0016508:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001650c:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c0016512:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016516:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c001651d:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016522:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016526:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c001652d:	eb 19                	jmp    c0016548 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001652f:	90                   	nop
c0016530:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016534:	88 c2                	mov    dl,al
c0016536:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001653a:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0016541:	01 d0                	add    eax,edx
c0016543:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016547:	90                   	nop
c0016548:	83 ec 04             	sub    esp,0x4
c001654b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001654f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016553:	8d 44 24 15          	lea    eax,[esp+0x15]
c0016557:	50                   	push   eax
c0016558:	e8 f7 e8 fe ff       	call   c0004e54 <f_getlabel>
c001655d:	83 c4 10             	add    esp,0x10
c0016560:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016564:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016569:	75 09                	jne    c0016574 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001656b:	b8 00 00 00 00       	mov    eax,0x0
c0016570:	eb 0a                	jmp    c001657c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0016572:	66 90                	xchg   ax,ax
c0016574:	b8 01 00 00 00       	mov    eax,0x1
c0016579:	8d 76 00             	lea    esi,[esi+0x0]
c001657c:	83 c4 1c             	add    esp,0x1c
c001657f:	c3                   	ret    

c0016580 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0016580:	57                   	push   edi
c0016581:	83 ec 58             	sub    esp,0x58
c0016584:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001658c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016590:	b8 00 00 00 00       	mov    eax,0x0
c0016595:	b9 0f 00 00 00       	mov    ecx,0xf
c001659a:	fc                   	cld    
c001659b:	89 d7                	mov    edi,edx
c001659d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001659f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00165a3:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c00165aa:	83 f8 ff             	cmp    eax,0xffffffff
c00165ad:	75 35                	jne    c00165e4 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c00165af:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00165b3:	88 c2                	mov    dl,al
c00165b5:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00165ba:	01 d0                	add    eax,edx
c00165bc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00165c0:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c00165c6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00165ca:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c00165d1:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00165d6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00165da:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c00165e1:	eb 19                	jmp    c00165fc <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c00165e3:	90                   	nop
c00165e4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00165e8:	88 c2                	mov    dl,al
c00165ea:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00165ee:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c00165f5:	01 d0                	add    eax,edx
c00165f7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00165fb:	90                   	nop
c00165fc:	83 ec 08             	sub    esp,0x8
c00165ff:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0016603:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016607:	50                   	push   eax
c0016608:	e8 b3 a1 fe ff       	call   c00007c0 <strcat>
c001660d:	83 c4 10             	add    esp,0x10
c0016610:	83 ec 0c             	sub    esp,0xc
c0016613:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016617:	50                   	push   eax
c0016618:	e8 88 e9 fe ff       	call   c0004fa5 <f_setlabel>
c001661d:	83 c4 10             	add    esp,0x10
c0016620:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0016624:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0016629:	75 09                	jne    c0016634 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001662b:	b8 00 00 00 00       	mov    eax,0x0
c0016630:	eb 0a                	jmp    c001663c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0016632:	66 90                	xchg   ax,ax
c0016634:	b8 01 00 00 00       	mov    eax,0x1
c0016639:	8d 76 00             	lea    esi,[esi+0x0]
c001663c:	83 c4 58             	add    esp,0x58
c001663f:	5f                   	pop    edi
c0016640:	c3                   	ret    
c0016641:	90                   	nop
c0016642:	66 90                	xchg   ax,ax

c0016644 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0016644:	83 ec 2c             	sub    esp,0x2c
c0016647:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001664f:	83 ec 08             	sub    esp,0x8
c0016652:	68 38 f0 01 c0       	push   0xc001f038
c0016657:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001665b:	e8 80 a0 fe ff       	call   c00006e0 <strcmp>
c0016660:	83 c4 10             	add    esp,0x10
c0016663:	85 c0                	test   eax,eax
c0016665:	0f 94 c0             	sete   al
c0016668:	84 c0                	test   al,al
c001666a:	74 10                	je     c001667c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001666c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016674:	e9 b3 00 00 00       	jmp    c001672c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016679:	8d 76 00             	lea    esi,[esi+0x0]
c001667c:	83 ec 08             	sub    esp,0x8
c001667f:	68 2a f0 01 c0       	push   0xc001f02a
c0016684:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016688:	e8 53 a0 fe ff       	call   c00006e0 <strcmp>
c001668d:	83 c4 10             	add    esp,0x10
c0016690:	85 c0                	test   eax,eax
c0016692:	0f 94 c0             	sete   al
c0016695:	84 c0                	test   al,al
c0016697:	74 0f                	je     c00166a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0016699:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00166a1:	e9 86 00 00 00       	jmp    c001672c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00166a6:	66 90                	xchg   ax,ax
c00166a8:	83 ec 08             	sub    esp,0x8
c00166ab:	68 30 f0 01 c0       	push   0xc001f030
c00166b0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166b4:	e8 27 a0 fe ff       	call   c00006e0 <strcmp>
c00166b9:	83 c4 10             	add    esp,0x10
c00166bc:	85 c0                	test   eax,eax
c00166be:	0f 94 c0             	sete   al
c00166c1:	84 c0                	test   al,al
c00166c3:	74 0b                	je     c00166d0 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c00166c5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00166cd:	eb 5d                	jmp    c001672c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00166cf:	90                   	nop
c00166d0:	83 ec 08             	sub    esp,0x8
c00166d3:	68 fc ce 01 c0       	push   0xc001cefc
c00166d8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166dc:	e8 ff 9f fe ff       	call   c00006e0 <strcmp>
c00166e1:	83 c4 10             	add    esp,0x10
c00166e4:	85 c0                	test   eax,eax
c00166e6:	0f 94 c0             	sete   al
c00166e9:	84 c0                	test   al,al
c00166eb:	74 0b                	je     c00166f8 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c00166ed:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00166f5:	eb 35                	jmp    c001672c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00166f7:	90                   	nop
c00166f8:	83 ec 08             	sub    esp,0x8
c00166fb:	68 36 f0 01 c0       	push   0xc001f036
c0016700:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016704:	e8 d7 9f fe ff       	call   c00006e0 <strcmp>
c0016709:	83 c4 10             	add    esp,0x10
c001670c:	85 c0                	test   eax,eax
c001670e:	0f 94 c0             	sete   al
c0016711:	84 c0                	test   al,al
c0016713:	74 0b                	je     c0016720 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c0016715:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001671d:	eb 0d                	jmp    c001672c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001671f:	90                   	nop
c0016720:	b8 08 00 00 00       	mov    eax,0x8
c0016725:	e9 ea 00 00 00       	jmp    c0016814 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001672a:	66 90                	xchg   ax,ax
c001672c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0016733:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0016738:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001673c:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0016743:	83 f8 ff             	cmp    eax,0xffffffff
c0016746:	75 34                	jne    c001677c <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c0016748:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001674c:	88 c2                	mov    dl,al
c001674e:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016753:	01 d0                	add    eax,edx
c0016755:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016759:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c001675f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016763:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c001676a:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c001676f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016773:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c001677a:	eb 18                	jmp    c0016794 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001677c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016780:	88 c2                	mov    dl,al
c0016782:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016786:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c001678d:	01 d0                	add    eax,edx
c001678f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016793:	90                   	nop
c0016794:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016798:	88 04 24             	mov    BYTE PTR [esp],al
c001679b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001679f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00167a3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00167ab:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00167b0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00167b8:	83 ec 0c             	sub    esp,0xc
c00167bb:	68 00 20 00 00       	push   0x2000
c00167c0:	e8 f4 0f ff ff       	call   c00077b9 <malloc>
c00167c5:	83 c4 10             	add    esp,0x10
c00167c8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00167cc:	68 00 20 00 00       	push   0x2000
c00167d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167d5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00167d9:	50                   	push   eax
c00167da:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00167de:	50                   	push   eax
c00167df:	e8 b1 ea fe ff       	call   c0005295 <f_mkfs>
c00167e4:	83 c4 10             	add    esp,0x10
c00167e7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00167eb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00167f0:	75 0a                	jne    c00167fc <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c00167f2:	b8 00 00 00 00       	mov    eax,0x0
c00167f7:	eb 1b                	jmp    c0016814 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00167f9:	8d 76 00             	lea    esi,[esi+0x0]
c00167fc:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0016801:	75 09                	jne    c001680c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0016803:	b8 09 00 00 00       	mov    eax,0x9
c0016808:	eb 0a                	jmp    c0016814 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001680a:	66 90                	xchg   ax,ax
c001680c:	b8 01 00 00 00       	mov    eax,0x1
c0016811:	8d 76 00             	lea    esi,[esi+0x0]
c0016814:	83 c4 2c             	add    esp,0x2c
c0016817:	c3                   	ret    

c0016818 <FAT::tryMount(LogicalDisk*, int)>:
c0016818:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001681e:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016823:	83 f8 14             	cmp    eax,0x14
c0016826:	75 18                	jne    c0016840 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0016828:	83 ec 0c             	sub    esp,0xc
c001682b:	68 3c f0 01 c0       	push   0xc001f03c
c0016830:	e8 7a 99 ff ff       	call   c00101af <KePanic(char const*)>
c0016835:	83 c4 10             	add    esp,0x10
c0016838:	b0 00                	mov    al,0x0
c001683a:	e9 e9 01 00 00       	jmp    c0016a28 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001683f:	90                   	nop
c0016840:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0016847:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001684d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016853:	3d 00 02 00 00       	cmp    eax,0x200
c0016858:	74 0a                	je     c0016864 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001685a:	b0 00                	mov    al,0x0
c001685c:	e9 c7 01 00 00       	jmp    c0016a28 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016861:	8d 76 00             	lea    esi,[esi+0x0]
c0016864:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001686c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016873:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c001687a:	83 f8 ff             	cmp    eax,0xffffffff
c001687d:	74 09                	je     c0016888 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001687f:	b0 01                	mov    al,0x1
c0016881:	e9 a2 01 00 00       	jmp    c0016a28 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016886:	66 90                	xchg   ax,ax
c0016888:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0016892:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001689a:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00168a1:	88 c2                	mov    dl,al
c00168a3:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00168a8:	01 d0                	add    eax,edx
c00168aa:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00168b1:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c00168b7:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00168be:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c00168c5:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00168ca:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00168d1:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c00168d8:	83 ec 0c             	sub    esp,0xc
c00168db:	68 34 02 00 00       	push   0x234
c00168e0:	e8 d4 0e ff ff       	call   c00077b9 <malloc>
c00168e5:	83 c4 10             	add    esp,0x10
c00168e8:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00168ef:	83 ec 04             	sub    esp,0x4
c00168f2:	6a 00                	push   0x0
c00168f4:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00168fb:	50                   	push   eax
c00168fc:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016903:	e8 b3 d1 fe ff       	call   c0003abb <f_mount>
c0016908:	83 c4 10             	add    esp,0x10
c001690b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016912:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001691a:	74 1c                	je     c0016938 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001691c:	83 ec 0c             	sub    esp,0xc
c001691f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016926:	e8 ae 0e ff ff       	call   c00077d9 <rfree>
c001692b:	83 c4 10             	add    esp,0x10
c001692e:	b0 00                	mov    al,0x0
c0016930:	e9 f3 00 00 00       	jmp    c0016a28 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016935:	8d 76 00             	lea    esi,[esi+0x0]
c0016938:	83 ec 04             	sub    esp,0x4
c001693b:	68 00 01 00 00       	push   0x100
c0016940:	6a 00                	push   0x0
c0016942:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016949:	50                   	push   eax
c001694a:	e8 81 9b fe ff       	call   c00004d0 <memset>
c001694f:	83 c4 10             	add    esp,0x10
c0016952:	83 ec 08             	sub    esp,0x8
c0016955:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001695c:	50                   	push   eax
c001695d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016964:	50                   	push   eax
c0016965:	e8 56 9e fe ff       	call   c00007c0 <strcat>
c001696a:	83 c4 10             	add    esp,0x10
c001696d:	83 ec 08             	sub    esp,0x8
c0016970:	68 4a f0 01 c0       	push   0xc001f04a
c0016975:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001697c:	50                   	push   eax
c001697d:	e8 3e 9e fe ff       	call   c00007c0 <strcat>
c0016982:	83 c4 10             	add    esp,0x10
c0016985:	83 ec 04             	sub    esp,0x4
c0016988:	6a 01                	push   0x1
c001698a:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0016991:	50                   	push   eax
c0016992:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016996:	50                   	push   eax
c0016997:	e8 81 d1 fe ff       	call   c0003b1d <f_open>
c001699c:	83 c4 10             	add    esp,0x10
c001699f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00169a6:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00169ad:	85 c0                	test   eax,eax
c00169af:	74 0b                	je     c00169bc <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00169b1:	78 31                	js     c00169e4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00169b3:	83 e8 04             	sub    eax,0x4
c00169b6:	83 f8 01             	cmp    eax,0x1
c00169b9:	77 29                	ja     c00169e4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00169bb:	90                   	nop
c00169bc:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00169c4:	83 ec 0c             	sub    esp,0xc
c00169c7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00169cb:	50                   	push   eax
c00169cc:	e8 ff d8 fe ff       	call   c00042d0 <f_close>
c00169d1:	83 c4 10             	add    esp,0x10
c00169d4:	90                   	nop
c00169d5:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c00169dd:	74 41                	je     c0016a20 <FAT::tryMount(LogicalDisk*, int)+0x208>
c00169df:	eb 33                	jmp    c0016a14 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00169e1:	8d 76 00             	lea    esi,[esi+0x0]
c00169e4:	83 ec 0c             	sub    esp,0xc
c00169e7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00169ee:	e8 e6 0d ff ff       	call   c00077d9 <rfree>
c00169f3:	83 c4 10             	add    esp,0x10
c00169f6:	83 ec 04             	sub    esp,0x4
c00169f9:	6a 00                	push   0x0
c00169fb:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016a02:	50                   	push   eax
c0016a03:	6a 00                	push   0x0
c0016a05:	e8 b1 d0 fe ff       	call   c0003abb <f_mount>
c0016a0a:	83 c4 10             	add    esp,0x10
c0016a0d:	b0 00                	mov    al,0x0
c0016a0f:	eb 17                	jmp    c0016a28 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016a11:	8d 76 00             	lea    esi,[esi+0x0]
c0016a14:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016a19:	40                   	inc    eax
c0016a1a:	a3 20 52 02 c0       	mov    ds:0xc0025220,eax
c0016a1f:	90                   	nop
c0016a20:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016a27:	90                   	nop
c0016a28:	81 c4 4c 03 00 00    	add    esp,0x34c
c0016a2e:	c3                   	ret    
c0016a2f:	90                   	nop

c0016a30 <FAT::allocateSwapfile(char const*, int)>:
c0016a30:	55                   	push   ebp
c0016a31:	57                   	push   edi
c0016a32:	56                   	push   esi
c0016a33:	53                   	push   ebx
c0016a34:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016a3a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016a45:	83 ec 0c             	sub    esp,0xc
c0016a48:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016a4f:	e8 65 0d ff ff       	call   c00077b9 <malloc>
c0016a54:	83 c4 10             	add    esp,0x10
c0016a57:	89 c7                	mov    edi,eax
c0016a59:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0016a5e:	83 ec 04             	sub    esp,0x4
c0016a61:	50                   	push   eax
c0016a62:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016a69:	57                   	push   edi
c0016a6a:	e8 33 40 ff ff       	call   c000aaa2 <File::File(char const*, Process*)>
c0016a6f:	83 c4 10             	add    esp,0x10
c0016a72:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016a79:	83 ec 04             	sub    esp,0x4
c0016a7c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016a80:	50                   	push   eax
c0016a81:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016a85:	50                   	push   eax
c0016a86:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016a8d:	e8 7c 43 ff ff       	call   c000ae0e <File::stat(unsigned long long*, bool*)>
c0016a92:	83 c4 10             	add    esp,0x10
c0016a95:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016a9c:	c1 e0 14             	shl    eax,0x14
c0016a9f:	89 c7                	mov    edi,eax
c0016aa1:	89 c5                	mov    ebp,eax
c0016aa3:	c1 fd 1f             	sar    ebp,0x1f
c0016aa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016aaa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016aae:	89 f9                	mov    ecx,edi
c0016ab0:	31 c1                	xor    ecx,eax
c0016ab2:	89 cb                	mov    ebx,ecx
c0016ab4:	89 e9                	mov    ecx,ebp
c0016ab6:	31 d1                	xor    ecx,edx
c0016ab8:	89 ce                	mov    esi,ecx
c0016aba:	89 f0                	mov    eax,esi
c0016abc:	09 d8                	or     eax,ebx
c0016abe:	0f 84 9c 00 00 00    	je     c0016b60 <FAT::allocateSwapfile(char const*, int)+0x130>
c0016ac4:	83 ec 0c             	sub    esp,0xc
c0016ac7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016ace:	e8 07 42 ff ff       	call   c000acda <File::unlink()>
c0016ad3:	83 c4 10             	add    esp,0x10
c0016ad6:	83 ec 08             	sub    esp,0x8
c0016ad9:	6a 12                	push   0x12
c0016adb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016ae2:	e8 7b 40 ff ff       	call   c000ab62 <File::open(FileOpenMode)>
c0016ae7:	83 c4 10             	add    esp,0x10
c0016aea:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016af1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016af7:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016afe:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016b05:	c1 e0 14             	shl    eax,0x14
c0016b08:	83 ec 04             	sub    esp,0x4
c0016b0b:	6a 01                	push   0x1
c0016b0d:	50                   	push   eax
c0016b0e:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016b15:	e8 1b e6 fe ff       	call   c0005135 <f_expand>
c0016b1a:	83 c4 10             	add    esp,0x10
c0016b1d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016b24:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b26:	83 c0 10             	add    eax,0x10
c0016b29:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b2b:	83 ec 0c             	sub    esp,0xc
c0016b2e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016b32:	52                   	push   edx
c0016b33:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016b37:	52                   	push   edx
c0016b38:	6a 00                	push   0x0
c0016b3a:	68 00 04 00 00       	push   0x400
c0016b3f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016b46:	ff d0                	call   eax
c0016b48:	83 c4 20             	add    esp,0x20
c0016b4b:	83 ec 0c             	sub    esp,0xc
c0016b4e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b55:	e8 66 40 ff ff       	call   c000abc0 <File::close()>
c0016b5a:	83 c4 10             	add    esp,0x10
c0016b5d:	8d 76 00             	lea    esi,[esi+0x0]
c0016b60:	83 ec 08             	sub    esp,0x8
c0016b63:	6a 01                	push   0x1
c0016b65:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b6c:	e8 f1 3f ff ff       	call   c000ab62 <File::open(FileOpenMode)>
c0016b71:	83 c4 10             	add    esp,0x10
c0016b74:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016b7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b7d:	83 c0 0c             	add    eax,0xc
c0016b80:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b82:	83 ec 0c             	sub    esp,0xc
c0016b85:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016b89:	52                   	push   edx
c0016b8a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016b8e:	52                   	push   edx
c0016b8f:	6a 00                	push   0x0
c0016b91:	6a 04                	push   0x4
c0016b93:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016b9a:	ff d0                	call   eax
c0016b9c:	83 c4 20             	add    esp,0x20
c0016b9f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016ba6:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016bac:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016bb3:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016bba:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016bbd:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016bc4:	83 ec 0c             	sub    esp,0xc
c0016bc7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016bce:	e8 ed 3f ff ff       	call   c000abc0 <File::close()>
c0016bd3:	83 c4 10             	add    esp,0x10
c0016bd6:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016bdd:	ba 00 00 00 00       	mov    edx,0x0
c0016be2:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016be8:	5b                   	pop    ebx
c0016be9:	5e                   	pop    esi
c0016bea:	5f                   	pop    edi
c0016beb:	5d                   	pop    ebp
c0016bec:	c3                   	ret    
c0016bed:	90                   	nop
c0016bee:	66 90                	xchg   ax,ax

c0016bf0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016bf0:	57                   	push   edi
c0016bf1:	56                   	push   esi
c0016bf2:	53                   	push   ebx
c0016bf3:	81 ec 50 02 00 00    	sub    esp,0x250
c0016bf9:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016c01:	74 0d                	je     c0016c10 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016c03:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016c0b:	75 0f                	jne    c0016c1c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0016c10:	b8 04 00 00 00       	mov    eax,0x4
c0016c15:	e9 36 01 00 00       	jmp    c0016d50 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016c1a:	66 90                	xchg   ax,ax
c0016c1c:	83 ec 08             	sub    esp,0x8
c0016c1f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016c26:	50                   	push   eax
c0016c27:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016c2e:	e8 60 d9 fe ff       	call   c0004593 <f_readdir>
c0016c33:	83 c4 10             	add    esp,0x10
c0016c36:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016c3d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016c44:	83 ec 0c             	sub    esp,0xc
c0016c47:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016c4e:	83 c0 16             	add    eax,0x16
c0016c51:	50                   	push   eax
c0016c52:	e8 e9 98 fe ff       	call   c0000540 <strlen>
c0016c57:	83 c4 10             	add    esp,0x10
c0016c5a:	ba 00 00 00 00       	mov    edx,0x0
c0016c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c63:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016c67:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016c6e:	25 ff 00 00 00       	and    eax,0xff
c0016c73:	83 e0 10             	and    eax,0x10
c0016c76:	74 08                	je     c0016c80 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016c78:	b8 02 00 00 00       	mov    eax,0x2
c0016c7d:	eb 09                	jmp    c0016c88 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016c7f:	90                   	nop
c0016c80:	b8 01 00 00 00       	mov    eax,0x1
c0016c85:	8d 76 00             	lea    esi,[esi+0x0]
c0016c88:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016c8c:	83 ec 08             	sub    esp,0x8
c0016c8f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016c96:	83 c0 16             	add    eax,0x16
c0016c99:	50                   	push   eax
c0016c9a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016c9e:	83 c0 10             	add    eax,0x10
c0016ca1:	50                   	push   eax
c0016ca2:	e8 59 99 fe ff       	call   c0000600 <strcpy>
c0016ca7:	83 c4 10             	add    esp,0x10
c0016caa:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016cb1:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016cb8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016cbc:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016cc3:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016cca:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016cd1:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016cd8:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016cdf:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016ce6:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016ced:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016cf4:	89 c6                	mov    esi,eax
c0016cf6:	89 d7                	mov    edi,edx
c0016cf8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016cfa:	89 c8                	mov    eax,ecx
c0016cfc:	89 fa                	mov    edx,edi
c0016cfe:	89 f3                	mov    ebx,esi
c0016d00:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016d07:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016d0e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016d15:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016d1c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016d22:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016d29:	84 c0                	test   al,al
c0016d2b:	75 07                	jne    c0016d34 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016d2d:	b8 07 00 00 00       	mov    eax,0x7
c0016d32:	eb 1c                	jmp    c0016d50 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016d34:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016d3b:	85 c0                	test   eax,eax
c0016d3d:	75 09                	jne    c0016d48 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016d3f:	b8 00 00 00 00       	mov    eax,0x0
c0016d44:	eb 0a                	jmp    c0016d50 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016d46:	66 90                	xchg   ax,ax
c0016d48:	b8 01 00 00 00       	mov    eax,0x1
c0016d4d:	8d 76 00             	lea    esi,[esi+0x0]
c0016d50:	81 c4 50 02 00 00    	add    esp,0x250
c0016d56:	5b                   	pop    ebx
c0016d57:	5e                   	pop    esi
c0016d58:	5f                   	pop    edi
c0016d59:	c3                   	ret    
c0016d5a:	66 90                	xchg   ax,ax

c0016d5c <FAT::read(void*, unsigned long, void*, int*)>:
c0016d5c:	83 ec 1c             	sub    esp,0x1c
c0016d5f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016d64:	74 0a                	je     c0016d70 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016d66:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016d6b:	75 0b                	jne    c0016d78 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016d6d:	8d 76 00             	lea    esi,[esi+0x0]
c0016d70:	b8 04 00 00 00       	mov    eax,0x4
c0016d75:	eb 41                	jmp    c0016db8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016d77:	90                   	nop
c0016d78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016d7c:	50                   	push   eax
c0016d7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016d81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016d85:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016d89:	e8 5a d0 fe ff       	call   c0003de8 <f_read>
c0016d8e:	83 c4 10             	add    esp,0x10
c0016d91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d95:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d99:	89 c2                	mov    edx,eax
c0016d9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d9f:	89 10                	mov    DWORD PTR [eax],edx
c0016da1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016da5:	85 c0                	test   eax,eax
c0016da7:	75 07                	jne    c0016db0 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016da9:	b8 00 00 00 00       	mov    eax,0x0
c0016dae:	eb 08                	jmp    c0016db8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016db0:	b8 01 00 00 00       	mov    eax,0x1
c0016db5:	8d 76 00             	lea    esi,[esi+0x0]
c0016db8:	83 c4 1c             	add    esp,0x1c
c0016dbb:	c3                   	ret    

c0016dbc <FAT::write(void*, unsigned long, void*, int*)>:
c0016dbc:	83 ec 1c             	sub    esp,0x1c
c0016dbf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016dc4:	74 0a                	je     c0016dd0 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016dc6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016dcb:	75 0b                	jne    c0016dd8 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0016dd0:	b8 04 00 00 00       	mov    eax,0x4
c0016dd5:	eb 41                	jmp    c0016e18 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016dd7:	90                   	nop
c0016dd8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016ddc:	50                   	push   eax
c0016ddd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016de1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016de5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016de9:	e8 f9 d1 fe ff       	call   c0003fe7 <f_write>
c0016dee:	83 c4 10             	add    esp,0x10
c0016df1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016df5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016df9:	89 c2                	mov    edx,eax
c0016dfb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016dff:	89 10                	mov    DWORD PTR [eax],edx
c0016e01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e05:	85 c0                	test   eax,eax
c0016e07:	75 07                	jne    c0016e10 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016e09:	b8 00 00 00 00       	mov    eax,0x0
c0016e0e:	eb 08                	jmp    c0016e18 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016e10:	b8 01 00 00 00       	mov    eax,0x1
c0016e15:	8d 76 00             	lea    esi,[esi+0x0]
c0016e18:	83 c4 1c             	add    esp,0x1c
c0016e1b:	c3                   	ret    

c0016e1c <FAT::close(void*)>:
c0016e1c:	83 ec 1c             	sub    esp,0x1c
c0016e1f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016e24:	75 0a                	jne    c0016e30 <FAT::close(void*)+0x14>
c0016e26:	b8 04 00 00 00       	mov    eax,0x4
c0016e2b:	eb 3f                	jmp    c0016e6c <FAT::close(void*)+0x50>
c0016e2d:	8d 76 00             	lea    esi,[esi+0x0]
c0016e30:	83 ec 0c             	sub    esp,0xc
c0016e33:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e37:	e8 94 d4 fe ff       	call   c00042d0 <f_close>
c0016e3c:	83 c4 10             	add    esp,0x10
c0016e3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e43:	83 ec 0c             	sub    esp,0xc
c0016e46:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e4a:	e8 7a 09 ff ff       	call   c00077c9 <free>
c0016e4f:	83 c4 10             	add    esp,0x10
c0016e52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e56:	85 c0                	test   eax,eax
c0016e58:	75 0a                	jne    c0016e64 <FAT::close(void*)+0x48>
c0016e5a:	b8 00 00 00 00       	mov    eax,0x0
c0016e5f:	eb 0b                	jmp    c0016e6c <FAT::close(void*)+0x50>
c0016e61:	8d 76 00             	lea    esi,[esi+0x0]
c0016e64:	b8 01 00 00 00       	mov    eax,0x1
c0016e69:	8d 76 00             	lea    esi,[esi+0x0]
c0016e6c:	83 c4 1c             	add    esp,0x1c
c0016e6f:	c3                   	ret    

c0016e70 <FAT::closeDir(void*)>:
c0016e70:	83 ec 1c             	sub    esp,0x1c
c0016e73:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016e78:	75 0a                	jne    c0016e84 <FAT::closeDir(void*)+0x14>
c0016e7a:	b8 04 00 00 00       	mov    eax,0x4
c0016e7f:	eb 3f                	jmp    c0016ec0 <FAT::closeDir(void*)+0x50>
c0016e81:	8d 76 00             	lea    esi,[esi+0x0]
c0016e84:	83 ec 0c             	sub    esp,0xc
c0016e87:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e8b:	e8 e1 d6 fe ff       	call   c0004571 <f_closedir>
c0016e90:	83 c4 10             	add    esp,0x10
c0016e93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e97:	83 ec 0c             	sub    esp,0xc
c0016e9a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e9e:	e8 26 09 ff ff       	call   c00077c9 <free>
c0016ea3:	83 c4 10             	add    esp,0x10
c0016ea6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016eaa:	85 c0                	test   eax,eax
c0016eac:	75 0a                	jne    c0016eb8 <FAT::closeDir(void*)+0x48>
c0016eae:	b8 00 00 00 00       	mov    eax,0x0
c0016eb3:	eb 0b                	jmp    c0016ec0 <FAT::closeDir(void*)+0x50>
c0016eb5:	8d 76 00             	lea    esi,[esi+0x0]
c0016eb8:	b8 01 00 00 00       	mov    eax,0x1
c0016ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0016ec0:	83 c4 1c             	add    esp,0x1c
c0016ec3:	c3                   	ret    

c0016ec4 <FAT::seek(void*, unsigned long long)>:
c0016ec4:	83 ec 2c             	sub    esp,0x2c
c0016ec7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016ecb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ecf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016ed3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ed7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0016edc:	75 0a                	jne    c0016ee8 <FAT::seek(void*, unsigned long long)+0x24>
c0016ede:	b8 04 00 00 00       	mov    eax,0x4
c0016ee3:	eb 33                	jmp    c0016f18 <FAT::seek(void*, unsigned long long)+0x54>
c0016ee5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ee8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016eec:	83 ec 08             	sub    esp,0x8
c0016eef:	50                   	push   eax
c0016ef0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016ef4:	e8 06 d4 fe ff       	call   c00042ff <f_lseek>
c0016ef9:	83 c4 10             	add    esp,0x10
c0016efc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016f00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016f04:	85 c0                	test   eax,eax
c0016f06:	75 08                	jne    c0016f10 <FAT::seek(void*, unsigned long long)+0x4c>
c0016f08:	b8 00 00 00 00       	mov    eax,0x0
c0016f0d:	eb 09                	jmp    c0016f18 <FAT::seek(void*, unsigned long long)+0x54>
c0016f0f:	90                   	nop
c0016f10:	b8 01 00 00 00       	mov    eax,0x1
c0016f15:	8d 76 00             	lea    esi,[esi+0x0]
c0016f18:	83 c4 2c             	add    esp,0x2c
c0016f1b:	c3                   	ret    

c0016f1c <fatWrapperReadDisk>:
c0016f1c:	53                   	push   ebx
c0016f1d:	83 ec 18             	sub    esp,0x18
c0016f20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f24:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016f28:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016f2c:	25 ff 00 00 00       	and    eax,0xff
c0016f31:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c0016f38:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016f3c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016f40:	ba 00 00 00 00       	mov    edx,0x0
c0016f45:	83 ec 0c             	sub    esp,0xc
c0016f48:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f4c:	53                   	push   ebx
c0016f4d:	52                   	push   edx
c0016f4e:	50                   	push   eax
c0016f4f:	51                   	push   ecx
c0016f50:	e8 ff 5c ff ff       	call   c000cc54 <LogicalDisk::read(unsigned long long, int, void*)>
c0016f55:	83 c4 20             	add    esp,0x20
c0016f58:	83 c4 18             	add    esp,0x18
c0016f5b:	5b                   	pop    ebx
c0016f5c:	c3                   	ret    
c0016f5d:	8d 76 00             	lea    esi,[esi+0x0]

c0016f60 <fatWrapperWriteDisk>:
c0016f60:	53                   	push   ebx
c0016f61:	83 ec 18             	sub    esp,0x18
c0016f64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f68:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016f6c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016f70:	25 ff 00 00 00       	and    eax,0xff
c0016f75:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c0016f7c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016f80:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016f84:	ba 00 00 00 00       	mov    edx,0x0
c0016f89:	83 ec 0c             	sub    esp,0xc
c0016f8c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f90:	53                   	push   ebx
c0016f91:	52                   	push   edx
c0016f92:	50                   	push   eax
c0016f93:	51                   	push   ecx
c0016f94:	e8 27 5d ff ff       	call   c000ccc0 <LogicalDisk::write(unsigned long long, int, void*)>
c0016f99:	83 c4 20             	add    esp,0x20
c0016f9c:	83 c4 18             	add    esp,0x18
c0016f9f:	5b                   	pop    ebx
c0016fa0:	c3                   	ret    
c0016fa1:	8d 76 00             	lea    esi,[esi+0x0]

c0016fa4 <fatWrapperIoctl>:
c0016fa4:	53                   	push   ebx
c0016fa5:	83 ec 28             	sub    esp,0x28
c0016fa8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016fac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016fb0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0016fb4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016fb8:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0016fbd:	75 35                	jne    c0016ff4 <fatWrapperIoctl+0x50>
c0016fbf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016fc3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016fc7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016fcb:	25 ff 00 00 00       	and    eax,0xff
c0016fd0:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c0016fd7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016fdd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016fe3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016fe7:	66 89 02             	mov    WORD PTR [edx],ax
c0016fea:	b8 00 00 00 00       	mov    eax,0x0
c0016fef:	e9 c4 00 00 00       	jmp    c00170b8 <fatWrapperIoctl+0x114>
c0016ff4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0016ff9:	75 75                	jne    c0017070 <fatWrapperIoctl+0xcc>
c0016ffb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016fff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017003:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017007:	25 ff 00 00 00       	and    eax,0xff
c001700c:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c0017013:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017019:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001701f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0017025:	89 c8                	mov    eax,ecx
c0017027:	89 da                	mov    edx,ebx
c0017029:	0f a4 c2 0a          	shld   edx,eax,0xa
c001702d:	c1 e0 0a             	shl    eax,0xa
c0017030:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017034:	81 e1 ff 00 00 00    	and    ecx,0xff
c001703a:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c0017041:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0017047:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001704d:	89 cb                	mov    ebx,ecx
c001704f:	c1 fb 1f             	sar    ebx,0x1f
c0017052:	53                   	push   ebx
c0017053:	51                   	push   ecx
c0017054:	52                   	push   edx
c0017055:	50                   	push   eax
c0017056:	e8 a5 50 00 00       	call   c001c100 <__udivdi3>
c001705b:	83 c4 10             	add    esp,0x10
c001705e:	89 c2                	mov    edx,eax
c0017060:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017064:	89 10                	mov    DWORD PTR [eax],edx
c0017066:	b8 00 00 00 00       	mov    eax,0x0
c001706b:	eb 4b                	jmp    c00170b8 <fatWrapperIoctl+0x114>
c001706d:	8d 76 00             	lea    esi,[esi+0x0]
c0017070:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0017075:	75 09                	jne    c0017080 <fatWrapperIoctl+0xdc>
c0017077:	b8 00 00 00 00       	mov    eax,0x0
c001707c:	eb 3a                	jmp    c00170b8 <fatWrapperIoctl+0x114>
c001707e:	66 90                	xchg   ax,ax
c0017080:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0017085:	75 19                	jne    c00170a0 <fatWrapperIoctl+0xfc>
c0017087:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001708b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001708f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017093:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0017099:	b8 00 00 00 00       	mov    eax,0x0
c001709e:	eb 18                	jmp    c00170b8 <fatWrapperIoctl+0x114>
c00170a0:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00170a5:	75 09                	jne    c00170b0 <fatWrapperIoctl+0x10c>
c00170a7:	b8 00 00 00 00       	mov    eax,0x0
c00170ac:	eb 0a                	jmp    c00170b8 <fatWrapperIoctl+0x114>
c00170ae:	66 90                	xchg   ax,ax
c00170b0:	b8 04 00 00 00       	mov    eax,0x4
c00170b5:	8d 76 00             	lea    esi,[esi+0x0]
c00170b8:	83 c4 28             	add    esp,0x28
c00170bb:	5b                   	pop    ebx
c00170bc:	c3                   	ret    
c00170bd:	90                   	nop
c00170be:	66 90                	xchg   ax,ax

c00170c0 <FAT::FAT()>:
c00170c0:	83 ec 1c             	sub    esp,0x1c
c00170c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170c7:	83 ec 0c             	sub    esp,0xc
c00170ca:	50                   	push   eax
c00170cb:	e8 7e 37 ff ff       	call   c000a84e <Filesystem::Filesystem()>
c00170d0:	83 c4 10             	add    esp,0x10
c00170d3:	ba 60 f0 01 c0       	mov    edx,0xc001f060
c00170d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170dc:	89 10                	mov    DWORD PTR [eax],edx
c00170de:	c7 05 20 52 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025220,0x0
c00170e8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00170f0:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00170f5:	7f 15                	jg     c001710c <FAT::FAT()+0x4c>
c00170f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170fb:	c7 04 85 40 52 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdadc0],0xffffffff
c0017106:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001710a:	eb e4                	jmp    c00170f0 <FAT::FAT()+0x30>
c001710c:	90                   	nop
c001710d:	83 c4 1c             	add    esp,0x1c
c0017110:	c3                   	ret    
c0017111:	90                   	nop
c0017112:	66 90                	xchg   ax,ax

c0017114 <FAT::fixFilepath(char*)>:
c0017114:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017118:	8a 00                	mov    al,BYTE PTR [eax]
c001711a:	3c 40                	cmp    al,0x40
c001711c:	7e 2e                	jle    c001714c <FAT::fixFilepath(char*)+0x38>
c001711e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017122:	8a 00                	mov    al,BYTE PTR [eax]
c0017124:	83 e8 41             	sub    eax,0x41
c0017127:	88 c2                	mov    dl,al
c0017129:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001712d:	88 10                	mov    BYTE PTR [eax],dl
c001712f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017133:	8a 00                	mov    al,BYTE PTR [eax]
c0017135:	0f be c0             	movsx  eax,al
c0017138:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c001713f:	83 c0 30             	add    eax,0x30
c0017142:	88 c2                	mov    dl,al
c0017144:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017148:	88 10                	mov    BYTE PTR [eax],dl
c001714a:	66 90                	xchg   ax,ax
c001714c:	90                   	nop
c001714d:	c3                   	ret    
c001714e:	66 90                	xchg   ax,ax

c0017150 <FAT::open(char const*, void**, FileOpenMode)>:
c0017150:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017156:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001715e:	74 0c                	je     c001716c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0017160:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017168:	75 0e                	jne    c0017178 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001716a:	66 90                	xchg   ax,ax
c001716c:	b8 04 00 00 00       	mov    eax,0x4
c0017171:	e9 0a 01 00 00       	jmp    c0017280 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0017176:	66 90                	xchg   ax,ax
c0017178:	83 ec 08             	sub    esp,0x8
c001717b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017182:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017186:	50                   	push   eax
c0017187:	e8 74 94 fe ff       	call   c0000600 <strcpy>
c001718c:	83 c4 10             	add    esp,0x10
c001718f:	83 ec 08             	sub    esp,0x8
c0017192:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017196:	50                   	push   eax
c0017197:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001719e:	e8 71 ff ff ff       	call   c0017114 <FAT::fixFilepath(char*)>
c00171a3:	83 c4 10             	add    esp,0x10
c00171a6:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00171ae:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00171b5:	83 e0 01             	and    eax,0x1
c00171b8:	74 0a                	je     c00171c4 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c00171ba:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00171c2:	66 90                	xchg   ax,ax
c00171c4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00171cb:	83 e0 04             	and    eax,0x4
c00171ce:	74 10                	je     c00171e0 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c00171d0:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00171d8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00171e0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00171e7:	83 e0 02             	and    eax,0x2
c00171ea:	74 08                	je     c00171f4 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c00171ec:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00171f4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00171fb:	83 e0 08             	and    eax,0x8
c00171fe:	74 08                	je     c0017208 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0017200:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0017208:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001720f:	83 e0 10             	and    eax,0x10
c0017212:	74 08                	je     c001721c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0017214:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001721c:	83 ec 0c             	sub    esp,0xc
c001721f:	68 28 02 00 00       	push   0x228
c0017224:	e8 90 05 ff ff       	call   c00077b9 <malloc>
c0017229:	83 c4 10             	add    esp,0x10
c001722c:	89 c2                	mov    edx,eax
c001722e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017235:	89 10                	mov    DWORD PTR [eax],edx
c0017237:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001723e:	31 d2                	xor    edx,edx
c0017240:	88 c2                	mov    dl,al
c0017242:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017249:	8b 00                	mov    eax,DWORD PTR [eax]
c001724b:	83 ec 04             	sub    esp,0x4
c001724e:	52                   	push   edx
c001724f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0017253:	52                   	push   edx
c0017254:	50                   	push   eax
c0017255:	e8 c3 c8 fe ff       	call   c0003b1d <f_open>
c001725a:	83 c4 10             	add    esp,0x10
c001725d:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0017264:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001726c:	74 0a                	je     c0017278 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c001726e:	b8 01 00 00 00       	mov    eax,0x1
c0017273:	eb 0b                	jmp    c0017280 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0017275:	8d 76 00             	lea    esi,[esi+0x0]
c0017278:	b8 00 00 00 00       	mov    eax,0x0
c001727d:	8d 76 00             	lea    esi,[esi+0x0]
c0017280:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017286:	c3                   	ret    
c0017287:	90                   	nop

c0017288 <FAT::openDir(char const*, void**)>:
c0017288:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001728e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017296:	74 0c                	je     c00172a4 <FAT::openDir(char const*, void**)+0x1c>
c0017298:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00172a0:	75 0e                	jne    c00172b0 <FAT::openDir(char const*, void**)+0x28>
c00172a2:	66 90                	xchg   ax,ax
c00172a4:	b8 04 00 00 00       	mov    eax,0x4
c00172a9:	e9 82 00 00 00       	jmp    c0017330 <FAT::openDir(char const*, void**)+0xa8>
c00172ae:	66 90                	xchg   ax,ax
c00172b0:	83 ec 08             	sub    esp,0x8
c00172b3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00172ba:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172be:	50                   	push   eax
c00172bf:	e8 3c 93 fe ff       	call   c0000600 <strcpy>
c00172c4:	83 c4 10             	add    esp,0x10
c00172c7:	83 ec 08             	sub    esp,0x8
c00172ca:	8d 44 24 14          	lea    eax,[esp+0x14]
c00172ce:	50                   	push   eax
c00172cf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00172d6:	e8 39 fe ff ff       	call   c0017114 <FAT::fixFilepath(char*)>
c00172db:	83 c4 10             	add    esp,0x10
c00172de:	83 ec 0c             	sub    esp,0xc
c00172e1:	6a 30                	push   0x30
c00172e3:	e8 d1 04 ff ff       	call   c00077b9 <malloc>
c00172e8:	83 c4 10             	add    esp,0x10
c00172eb:	89 c2                	mov    edx,eax
c00172ed:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00172f4:	89 10                	mov    DWORD PTR [eax],edx
c00172f6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00172fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00172ff:	83 ec 08             	sub    esp,0x8
c0017302:	8d 54 24 14          	lea    edx,[esp+0x14]
c0017306:	52                   	push   edx
c0017307:	50                   	push   eax
c0017308:	e8 99 d1 fe ff       	call   c00044a6 <f_opendir>
c001730d:	83 c4 10             	add    esp,0x10
c0017310:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017317:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001731f:	74 07                	je     c0017328 <FAT::openDir(char const*, void**)+0xa0>
c0017321:	b8 01 00 00 00       	mov    eax,0x1
c0017326:	eb 08                	jmp    c0017330 <FAT::openDir(char const*, void**)+0xa8>
c0017328:	b8 00 00 00 00       	mov    eax,0x0
c001732d:	8d 76 00             	lea    esi,[esi+0x0]
c0017330:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017336:	c3                   	ret    
c0017337:	90                   	nop

c0017338 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0017338:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001733e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0017346:	75 0c                	jne    c0017354 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0017348:	b8 04 00 00 00       	mov    eax,0x4
c001734d:	e9 d6 00 00 00       	jmp    c0017428 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017352:	66 90                	xchg   ax,ax
c0017354:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001735c:	75 0a                	jne    c0017368 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001735e:	b8 04 00 00 00       	mov    eax,0x4
c0017363:	e9 c0 00 00 00       	jmp    c0017428 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017368:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0017370:	75 0a                	jne    c001737c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0017372:	b8 04 00 00 00       	mov    eax,0x4
c0017377:	e9 ac 00 00 00       	jmp    c0017428 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001737c:	83 ec 08             	sub    esp,0x8
c001737f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017386:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001738d:	50                   	push   eax
c001738e:	e8 6d 92 fe ff       	call   c0000600 <strcpy>
c0017393:	83 c4 10             	add    esp,0x10
c0017396:	83 ec 08             	sub    esp,0x8
c0017399:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00173a0:	50                   	push   eax
c00173a1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00173a8:	e8 67 fd ff ff       	call   c0017114 <FAT::fixFilepath(char*)>
c00173ad:	83 c4 10             	add    esp,0x10
c00173b0:	83 ec 08             	sub    esp,0x8
c00173b3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00173b7:	50                   	push   eax
c00173b8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00173bf:	50                   	push   eax
c00173c0:	e8 60 d2 fe ff       	call   c0004625 <f_stat>
c00173c5:	83 c4 10             	add    esp,0x10
c00173c8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00173cf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00173d6:	85 c0                	test   eax,eax
c00173d8:	74 0a                	je     c00173e4 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c00173da:	83 f8 04             	cmp    eax,0x4
c00173dd:	74 39                	je     c0017418 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c00173df:	eb 3f                	jmp    c0017420 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c00173e1:	8d 76 00             	lea    esi,[esi+0x0]
c00173e4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00173e8:	25 ff 00 00 00       	and    eax,0xff
c00173ed:	83 e0 10             	and    eax,0x10
c00173f0:	0f 95 c2             	setne  dl
c00173f3:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00173fa:	88 10                	mov    BYTE PTR [eax],dl
c00173fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017400:	ba 00 00 00 00       	mov    edx,0x0
c0017405:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001740c:	89 01                	mov    DWORD PTR [ecx],eax
c001740e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017411:	b8 00 00 00 00       	mov    eax,0x0
c0017416:	eb 10                	jmp    c0017428 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017418:	b8 02 00 00 00       	mov    eax,0x2
c001741d:	eb 09                	jmp    c0017428 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001741f:	90                   	nop
c0017420:	b8 01 00 00 00       	mov    eax,0x1
c0017425:	8d 76 00             	lea    esi,[esi+0x0]
c0017428:	81 c4 2c 02 00 00    	add    esp,0x22c
c001742e:	c3                   	ret    
c001742f:	90                   	nop

c0017430 <FAT::unlink(char const*)>:
c0017430:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017436:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001743e:	75 08                	jne    c0017448 <FAT::unlink(char const*)+0x18>
c0017440:	b8 04 00 00 00       	mov    eax,0x4
c0017445:	eb 61                	jmp    c00174a8 <FAT::unlink(char const*)+0x78>
c0017447:	90                   	nop
c0017448:	83 ec 08             	sub    esp,0x8
c001744b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017452:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017456:	50                   	push   eax
c0017457:	e8 a4 91 fe ff       	call   c0000600 <strcpy>
c001745c:	83 c4 10             	add    esp,0x10
c001745f:	83 ec 08             	sub    esp,0x8
c0017462:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017466:	50                   	push   eax
c0017467:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001746e:	e8 a1 fc ff ff       	call   c0017114 <FAT::fixFilepath(char*)>
c0017473:	83 c4 10             	add    esp,0x10
c0017476:	83 ec 0c             	sub    esp,0xc
c0017479:	8d 44 24 18          	lea    eax,[esp+0x18]
c001747d:	50                   	push   eax
c001747e:	e8 07 d4 fe ff       	call   c000488a <f_unlink>
c0017483:	83 c4 10             	add    esp,0x10
c0017486:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001748d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017494:	85 c0                	test   eax,eax
c0017496:	75 08                	jne    c00174a0 <FAT::unlink(char const*)+0x70>
c0017498:	b8 00 00 00 00       	mov    eax,0x0
c001749d:	eb 09                	jmp    c00174a8 <FAT::unlink(char const*)+0x78>
c001749f:	90                   	nop
c00174a0:	b8 01 00 00 00       	mov    eax,0x1
c00174a5:	8d 76 00             	lea    esi,[esi+0x0]
c00174a8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00174ae:	c3                   	ret    
c00174af:	90                   	nop

c00174b0 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00174b0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00174b6:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00174bd:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00174c4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00174c8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00174cc:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00174d4:	75 0a                	jne    c00174e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00174d6:	b8 04 00 00 00       	mov    eax,0x4
c00174db:	e9 54 01 00 00       	jmp    c0017634 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00174e0:	83 ec 08             	sub    esp,0x8
c00174e3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00174ea:	8d 44 24 24          	lea    eax,[esp+0x24]
c00174ee:	50                   	push   eax
c00174ef:	e8 0c 91 fe ff       	call   c0000600 <strcpy>
c00174f4:	83 c4 10             	add    esp,0x10
c00174f7:	83 ec 08             	sub    esp,0x8
c00174fa:	8d 44 24 20          	lea    eax,[esp+0x20]
c00174fe:	50                   	push   eax
c00174ff:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0017506:	e8 09 fc ff ff       	call   c0017114 <FAT::fixFilepath(char*)>
c001750b:	83 c4 10             	add    esp,0x10
c001750e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0017516:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001751e:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017522:	25 ff 00 00 00       	and    eax,0xff
c0017527:	83 e0 01             	and    eax,0x1
c001752a:	74 08                	je     c0017534 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c001752c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0017534:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017538:	25 ff 00 00 00       	and    eax,0xff
c001753d:	83 e0 02             	and    eax,0x2
c0017540:	74 0a                	je     c001754c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c0017542:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001754a:	66 90                	xchg   ax,ax
c001754c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017550:	25 ff 00 00 00       	and    eax,0xff
c0017555:	83 e0 04             	and    eax,0x4
c0017558:	74 0a                	je     c0017564 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c001755a:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0017562:	66 90                	xchg   ax,ax
c0017564:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017568:	25 ff 00 00 00       	and    eax,0xff
c001756d:	83 e0 08             	and    eax,0x8
c0017570:	74 0a                	je     c001757c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c0017572:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001757a:	66 90                	xchg   ax,ax
c001757c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017580:	25 ff 00 00 00       	and    eax,0xff
c0017585:	83 e0 01             	and    eax,0x1
c0017588:	74 0a                	je     c0017594 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001758a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0017592:	66 90                	xchg   ax,ax
c0017594:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017598:	25 ff 00 00 00       	and    eax,0xff
c001759d:	83 e0 02             	and    eax,0x2
c00175a0:	74 0a                	je     c00175ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c00175a2:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00175aa:	66 90                	xchg   ax,ax
c00175ac:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00175b0:	25 ff 00 00 00       	and    eax,0xff
c00175b5:	83 e0 04             	and    eax,0x4
c00175b8:	74 0a                	je     c00175c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c00175ba:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00175c2:	66 90                	xchg   ax,ax
c00175c4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00175c8:	25 ff 00 00 00       	and    eax,0xff
c00175cd:	83 e0 08             	and    eax,0x8
c00175d0:	74 0a                	je     c00175dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c00175d2:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00175da:	66 90                	xchg   ax,ax
c00175dc:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00175e3:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00175ea:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00175f1:	31 d2                	xor    edx,edx
c00175f3:	88 c2                	mov    dl,al
c00175f5:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00175fc:	25 ff 00 00 00       	and    eax,0xff
c0017601:	83 ec 04             	sub    esp,0x4
c0017604:	52                   	push   edx
c0017605:	50                   	push   eax
c0017606:	8d 44 24 24          	lea    eax,[esp+0x24]
c001760a:	50                   	push   eax
c001760b:	e8 ed d6 fe ff       	call   c0004cfd <f_chmod>
c0017610:	83 c4 10             	add    esp,0x10
c0017613:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001761a:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0017621:	85 c0                	test   eax,eax
c0017623:	75 07                	jne    c001762c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c0017625:	b8 00 00 00 00       	mov    eax,0x0
c001762a:	eb 08                	jmp    c0017634 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c001762c:	b8 01 00 00 00       	mov    eax,0x1
c0017631:	8d 76 00             	lea    esi,[esi+0x0]
c0017634:	81 c4 2c 01 00 00    	add    esp,0x12c
c001763a:	c3                   	ret    
c001763b:	90                   	nop

c001763c <FAT::rename(char const*, char const*)>:
c001763c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0017642:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001764a:	74 0c                	je     c0017658 <FAT::rename(char const*, char const*)+0x1c>
c001764c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0017654:	75 0e                	jne    c0017664 <FAT::rename(char const*, char const*)+0x28>
c0017656:	66 90                	xchg   ax,ax
c0017658:	b8 04 00 00 00       	mov    eax,0x4
c001765d:	e9 9e 00 00 00       	jmp    c0017700 <FAT::rename(char const*, char const*)+0xc4>
c0017662:	66 90                	xchg   ax,ax
c0017664:	83 ec 08             	sub    esp,0x8
c0017667:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001766e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017675:	50                   	push   eax
c0017676:	e8 85 8f fe ff       	call   c0000600 <strcpy>
c001767b:	83 c4 10             	add    esp,0x10
c001767e:	83 ec 08             	sub    esp,0x8
c0017681:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0017688:	50                   	push   eax
c0017689:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017690:	e8 7f fa ff ff       	call   c0017114 <FAT::fixFilepath(char*)>
c0017695:	83 c4 10             	add    esp,0x10
c0017698:	83 ec 08             	sub    esp,0x8
c001769b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00176a2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00176a6:	50                   	push   eax
c00176a7:	e8 54 8f fe ff       	call   c0000600 <strcpy>
c00176ac:	83 c4 10             	add    esp,0x10
c00176af:	83 ec 08             	sub    esp,0x8
c00176b2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00176b6:	50                   	push   eax
c00176b7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00176be:	e8 51 fa ff ff       	call   c0017114 <FAT::fixFilepath(char*)>
c00176c3:	83 c4 10             	add    esp,0x10
c00176c6:	83 ec 08             	sub    esp,0x8
c00176c9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00176cd:	50                   	push   eax
c00176ce:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00176d5:	50                   	push   eax
c00176d6:	e8 6c d4 fe ff       	call   c0004b47 <f_rename>
c00176db:	83 c4 10             	add    esp,0x10
c00176de:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00176e5:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00176ec:	85 c0                	test   eax,eax
c00176ee:	75 08                	jne    c00176f8 <FAT::rename(char const*, char const*)+0xbc>
c00176f0:	b8 00 00 00 00       	mov    eax,0x0
c00176f5:	eb 09                	jmp    c0017700 <FAT::rename(char const*, char const*)+0xc4>
c00176f7:	90                   	nop
c00176f8:	b8 01 00 00 00       	mov    eax,0x1
c00176fd:	8d 76 00             	lea    esi,[esi+0x0]
c0017700:	81 c4 1c 02 00 00    	add    esp,0x21c
c0017706:	c3                   	ret    
c0017707:	90                   	nop

c0017708 <FAT::mkdir(char const*)>:
c0017708:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001770e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017716:	75 08                	jne    c0017720 <FAT::mkdir(char const*)+0x18>
c0017718:	b8 04 00 00 00       	mov    eax,0x4
c001771d:	eb 61                	jmp    c0017780 <FAT::mkdir(char const*)+0x78>
c001771f:	90                   	nop
c0017720:	83 ec 08             	sub    esp,0x8
c0017723:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001772a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001772e:	50                   	push   eax
c001772f:	e8 cc 8e fe ff       	call   c0000600 <strcpy>
c0017734:	83 c4 10             	add    esp,0x10
c0017737:	83 ec 08             	sub    esp,0x8
c001773a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001773e:	50                   	push   eax
c001773f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017746:	e8 c9 f9 ff ff       	call   c0017114 <FAT::fixFilepath(char*)>
c001774b:	83 c4 10             	add    esp,0x10
c001774e:	83 ec 0c             	sub    esp,0xc
c0017751:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017755:	50                   	push   eax
c0017756:	e8 51 d2 fe ff       	call   c00049ac <f_mkdir>
c001775b:	83 c4 10             	add    esp,0x10
c001775e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017765:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001776c:	85 c0                	test   eax,eax
c001776e:	75 08                	jne    c0017778 <FAT::mkdir(char const*)+0x70>
c0017770:	b8 00 00 00 00       	mov    eax,0x0
c0017775:	eb 09                	jmp    c0017780 <FAT::mkdir(char const*)+0x78>
c0017777:	90                   	nop
c0017778:	b8 01 00 00 00       	mov    eax,0x1
c001777d:	8d 76 00             	lea    esi,[esi+0x0]
c0017780:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017786:	c3                   	ret    
c0017787:	90                   	nop

c0017788 <FAT::exists(char const*)>:
c0017788:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001778e:	83 ec 08             	sub    esp,0x8
c0017791:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017798:	8d 44 24 10          	lea    eax,[esp+0x10]
c001779c:	50                   	push   eax
c001779d:	e8 5e 8e fe ff       	call   c0000600 <strcpy>
c00177a2:	83 c4 10             	add    esp,0x10
c00177a5:	83 ec 08             	sub    esp,0x8
c00177a8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177ac:	50                   	push   eax
c00177ad:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00177b4:	e8 5b f9 ff ff       	call   c0017114 <FAT::fixFilepath(char*)>
c00177b9:	83 c4 10             	add    esp,0x10
c00177bc:	83 ec 08             	sub    esp,0x8
c00177bf:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c00177c6:	50                   	push   eax
c00177c7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00177cb:	50                   	push   eax
c00177cc:	e8 54 ce fe ff       	call   c0004625 <f_stat>
c00177d1:	83 c4 10             	add    esp,0x10
c00177d4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00177db:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00177e2:	85 c0                	test   eax,eax
c00177e4:	75 06                	jne    c00177ec <FAT::exists(char const*)+0x64>
c00177e6:	b0 01                	mov    al,0x1
c00177e8:	eb 06                	jmp    c00177f0 <FAT::exists(char const*)+0x68>
c00177ea:	66 90                	xchg   ax,ax
c00177ec:	b0 00                	mov    al,0x0
c00177ee:	66 90                	xchg   ax,ax
c00177f0:	81 c4 2c 02 00 00    	add    esp,0x22c
c00177f6:	c3                   	ret    
c00177f7:	90                   	nop

c00177f8 <isoReadDiscSectorHelper>:
c00177f8:	83 ec 2c             	sub    esp,0x2c
c00177fb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00177ff:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017803:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0017808:	83 e8 41             	sub    eax,0x41
c001780b:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c0017812:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017816:	ba 00 00 00 00       	mov    edx,0x0
c001781b:	83 ec 0c             	sub    esp,0xc
c001781e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017822:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017826:	52                   	push   edx
c0017827:	50                   	push   eax
c0017828:	51                   	push   ecx
c0017829:	e8 26 54 ff ff       	call   c000cc54 <LogicalDisk::read(unsigned long long, int, void*)>
c001782e:	83 c4 20             	add    esp,0x20
c0017831:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017835:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001783a:	74 0c                	je     c0017848 <isoReadDiscSectorHelper+0x50>
c001783c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017840:	c1 e0 0b             	shl    eax,0xb
c0017843:	eb 0b                	jmp    c0017850 <isoReadDiscSectorHelper+0x58>
c0017845:	8d 76 00             	lea    esi,[esi+0x0]
c0017848:	b8 00 00 00 00       	mov    eax,0x0
c001784d:	8d 76 00             	lea    esi,[esi+0x0]
c0017850:	83 c4 2c             	add    esp,0x2c
c0017853:	c3                   	ret    

c0017854 <iso_kprintf>:
c0017854:	83 ec 0c             	sub    esp,0xc
c0017857:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c001785c:	83 ec 08             	sub    esp,0x8
c001785f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017863:	50                   	push   eax
c0017864:	e8 cd 0e ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0017869:	83 c4 10             	add    esp,0x10
c001786c:	90                   	nop
c001786d:	83 c4 0c             	add    esp,0xc
c0017870:	c3                   	ret    
c0017871:	8d 76 00             	lea    esi,[esi+0x0]

c0017874 <iso_kprintfd>:
c0017874:	83 ec 0c             	sub    esp,0xc
c0017877:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c001787c:	83 ec 08             	sub    esp,0x8
c001787f:	68 c0 f0 01 c0       	push   0xc001f0c0
c0017884:	50                   	push   eax
c0017885:	e8 ac 0e ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001788a:	83 c4 10             	add    esp,0x10
c001788d:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c0017892:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017896:	83 ec 08             	sub    esp,0x8
c0017899:	52                   	push   edx
c001789a:	50                   	push   eax
c001789b:	e8 50 0e ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00178a0:	83 c4 10             	add    esp,0x10
c00178a3:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c00178a8:	83 ec 08             	sub    esp,0x8
c00178ab:	68 41 ef 01 c0       	push   0xc001ef41
c00178b0:	50                   	push   eax
c00178b1:	e8 80 0e ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00178b6:	83 c4 10             	add    esp,0x10
c00178b9:	90                   	nop
c00178ba:	83 c4 0c             	add    esp,0xc
c00178bd:	c3                   	ret    

c00178be <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00178be:	b8 08 00 00 00       	mov    eax,0x8
c00178c3:	c3                   	ret    

c00178c4 <ISO9660::getName()>:
c00178c4:	b8 c3 f0 01 c0       	mov    eax,0xc001f0c3
c00178c9:	c3                   	ret    

c00178ca <ISO9660::closeDir(void*)>:
c00178ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00178ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00178d0:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00178d3:	90                   	nop

c00178d4 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00178d4:	b8 01 00 00 00       	mov    eax,0x1
c00178d9:	c3                   	ret    

c00178da <ISO9660::unlink(char const*)>:
c00178da:	b8 01 00 00 00       	mov    eax,0x1
c00178df:	c3                   	ret    

c00178e0 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00178e0:	b8 03 00 00 00       	mov    eax,0x3
c00178e5:	c3                   	ret    

c00178e6 <ISO9660::rename(char const*, char const*)>:
c00178e6:	b8 01 00 00 00       	mov    eax,0x1
c00178eb:	c3                   	ret    

c00178ec <ISO9660::mkdir(char const*)>:
c00178ec:	b8 01 00 00 00       	mov    eax,0x1
c00178f1:	c3                   	ret    

c00178f2 <ISO9660::~ISO9660()>:
c00178f2:	83 ec 0c             	sub    esp,0xc
c00178f5:	ba 14 f1 01 c0       	mov    edx,0xc001f114
c00178fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178fe:	89 10                	mov    DWORD PTR [eax],edx
c0017900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017904:	83 ec 0c             	sub    esp,0xc
c0017907:	50                   	push   eax
c0017908:	e8 65 2f ff ff       	call   c000a872 <Filesystem::~Filesystem()>
c001790d:	83 c4 10             	add    esp,0x10
c0017910:	90                   	nop
c0017911:	83 c4 0c             	add    esp,0xc
c0017914:	c3                   	ret    
c0017915:	90                   	nop

c0017916 <ISO9660::~ISO9660()>:
c0017916:	83 ec 0c             	sub    esp,0xc
c0017919:	83 ec 0c             	sub    esp,0xc
c001791c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017920:	e8 cd ff ff ff       	call   c00178f2 <ISO9660::~ISO9660()>
c0017925:	83 c4 10             	add    esp,0x10
c0017928:	83 ec 08             	sub    esp,0x8
c001792b:	6a 08                	push   0x8
c001792d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017931:	e8 01 2b ff ff       	call   c000a437 <operator delete(void*, unsigned long)>
c0017936:	83 c4 10             	add    esp,0x10
c0017939:	83 c4 0c             	add    esp,0xc
c001793c:	c3                   	ret    
c001793d:	90                   	nop

c001793e <ISO9660::exists(char const*)>:
c001793e:	83 ec 18             	sub    esp,0x18
c0017941:	68 de f0 01 c0       	push   0xc001f0de
c0017946:	e8 64 88 ff ff       	call   c00101af <KePanic(char const*)>
c001794b:	31 c0                	xor    eax,eax
c001794d:	83 c4 1c             	add    esp,0x1c
c0017950:	c3                   	ret    
c0017951:	90                   	nop

c0017952 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0017952:	56                   	push   esi
c0017953:	53                   	push   ebx
c0017954:	50                   	push   eax
c0017955:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017959:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001795d:	85 db                	test   ebx,ebx
c001795f:	0f 84 82 00 00 00    	je     c00179e7 <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c0017965:	85 f6                	test   esi,esi
c0017967:	74 7e                	je     c00179e7 <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c0017969:	ba 03 00 00 00       	mov    edx,0x3
c001796e:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0017973:	75 77                	jne    c00179ec <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017975:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017978:	3a 05 20 53 02 c0    	cmp    al,BYTE PTR ds:0xc0025320
c001797e:	74 34                	je     c00179b4 <ISO9660::open(char const*, void**, FileOpenMode)+0x62>
c0017980:	83 ec 0c             	sub    esp,0xc
c0017983:	50                   	push   eax
c0017984:	e8 36 ee fe ff       	call   c00067bf <init_percd>
c0017989:	83 c4 10             	add    esp,0x10
c001798c:	ba 0b 00 00 00       	mov    edx,0xb
c0017991:	40                   	inc    eax
c0017992:	74 58                	je     c00179ec <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017994:	80 3d 20 53 02 c0 00 	cmp    BYTE PTR ds:0xc0025320,0x0
c001799b:	74 10                	je     c00179ad <ISO9660::open(char const*, void**, FileOpenMode)+0x5b>
c001799d:	83 ec 0c             	sub    esp,0xc
c00179a0:	68 fc f0 01 c0       	push   0xc001f0fc
c00179a5:	e8 05 88 ff ff       	call   c00101af <KePanic(char const*)>
c00179aa:	83 c4 10             	add    esp,0x10
c00179ad:	8a 03                	mov    al,BYTE PTR [ebx]
c00179af:	a2 20 53 02 c0       	mov    ds:0xc0025320,al
c00179b4:	83 ec 0c             	sub    esp,0xc
c00179b7:	0f be 05 20 53 02 c0 	movsx  eax,BYTE PTR ds:0xc0025320
c00179be:	83 c3 03             	add    ebx,0x3
c00179c1:	50                   	push   eax
c00179c2:	e8 f8 ed fe ff       	call   c00067bf <init_percd>
c00179c7:	59                   	pop    ecx
c00179c8:	58                   	pop    eax
c00179c9:	6a 00                	push   0x0
c00179cb:	53                   	push   ebx
c00179cc:	e8 2c e9 fe ff       	call   c00062fd <iso_open>
c00179d1:	83 c4 10             	add    esp,0x10
c00179d4:	ba 01 00 00 00       	mov    edx,0x1
c00179d9:	83 f8 ff             	cmp    eax,0xffffffff
c00179dc:	74 0e                	je     c00179ec <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c00179de:	83 c0 64             	add    eax,0x64
c00179e1:	31 d2                	xor    edx,edx
c00179e3:	89 06                	mov    DWORD PTR [esi],eax
c00179e5:	eb 05                	jmp    c00179ec <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c00179e7:	ba 04 00 00 00       	mov    edx,0x4
c00179ec:	89 d0                	mov    eax,edx
c00179ee:	5a                   	pop    edx
c00179ef:	5b                   	pop    ebx
c00179f0:	5e                   	pop    esi
c00179f1:	c3                   	ret    

c00179f2 <ISO9660::openDir(char const*, void**)>:
c00179f2:	56                   	push   esi
c00179f3:	53                   	push   ebx
c00179f4:	50                   	push   eax
c00179f5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00179f9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00179fd:	85 db                	test   ebx,ebx
c00179ff:	74 76                	je     c0017a77 <ISO9660::openDir(char const*, void**)+0x85>
c0017a01:	85 f6                	test   esi,esi
c0017a03:	74 72                	je     c0017a77 <ISO9660::openDir(char const*, void**)+0x85>
c0017a05:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017a08:	3a 05 20 53 02 c0    	cmp    al,BYTE PTR ds:0xc0025320
c0017a0e:	74 34                	je     c0017a44 <ISO9660::openDir(char const*, void**)+0x52>
c0017a10:	83 ec 0c             	sub    esp,0xc
c0017a13:	50                   	push   eax
c0017a14:	e8 a6 ed fe ff       	call   c00067bf <init_percd>
c0017a19:	83 c4 10             	add    esp,0x10
c0017a1c:	ba 0b 00 00 00       	mov    edx,0xb
c0017a21:	40                   	inc    eax
c0017a22:	74 58                	je     c0017a7c <ISO9660::openDir(char const*, void**)+0x8a>
c0017a24:	80 3d 20 53 02 c0 00 	cmp    BYTE PTR ds:0xc0025320,0x0
c0017a2b:	74 10                	je     c0017a3d <ISO9660::openDir(char const*, void**)+0x4b>
c0017a2d:	83 ec 0c             	sub    esp,0xc
c0017a30:	68 fc f0 01 c0       	push   0xc001f0fc
c0017a35:	e8 75 87 ff ff       	call   c00101af <KePanic(char const*)>
c0017a3a:	83 c4 10             	add    esp,0x10
c0017a3d:	8a 03                	mov    al,BYTE PTR [ebx]
c0017a3f:	a2 20 53 02 c0       	mov    ds:0xc0025320,al
c0017a44:	83 ec 0c             	sub    esp,0xc
c0017a47:	0f be 05 20 53 02 c0 	movsx  eax,BYTE PTR ds:0xc0025320
c0017a4e:	83 c3 03             	add    ebx,0x3
c0017a51:	50                   	push   eax
c0017a52:	e8 68 ed fe ff       	call   c00067bf <init_percd>
c0017a57:	59                   	pop    ecx
c0017a58:	58                   	pop    eax
c0017a59:	6a 01                	push   0x1
c0017a5b:	53                   	push   ebx
c0017a5c:	e8 9c e8 fe ff       	call   c00062fd <iso_open>
c0017a61:	83 c4 10             	add    esp,0x10
c0017a64:	ba 01 00 00 00       	mov    edx,0x1
c0017a69:	83 f8 ff             	cmp    eax,0xffffffff
c0017a6c:	74 0e                	je     c0017a7c <ISO9660::openDir(char const*, void**)+0x8a>
c0017a6e:	83 c0 64             	add    eax,0x64
c0017a71:	31 d2                	xor    edx,edx
c0017a73:	89 06                	mov    DWORD PTR [esi],eax
c0017a75:	eb 05                	jmp    c0017a7c <ISO9660::openDir(char const*, void**)+0x8a>
c0017a77:	ba 04 00 00 00       	mov    edx,0x4
c0017a7c:	89 d0                	mov    eax,edx
c0017a7e:	5a                   	pop    edx
c0017a7f:	5b                   	pop    ebx
c0017a80:	5e                   	pop    esi
c0017a81:	c3                   	ret    

c0017a82 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0017a82:	53                   	push   ebx
c0017a83:	83 ec 08             	sub    esp,0x8
c0017a86:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a8a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017a8e:	85 c0                	test   eax,eax
c0017a90:	74 25                	je     c0017ab7 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017a92:	85 db                	test   ebx,ebx
c0017a94:	74 21                	je     c0017ab7 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017a96:	83 e8 64             	sub    eax,0x64
c0017a99:	52                   	push   edx
c0017a9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a9e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017aa2:	50                   	push   eax
c0017aa3:	e8 fd e8 fe ff       	call   c00063a5 <iso_read>
c0017aa8:	83 c4 10             	add    esp,0x10
c0017aab:	89 03                	mov    DWORD PTR [ebx],eax
c0017aad:	09 d0                	or     eax,edx
c0017aaf:	0f 94 c0             	sete   al
c0017ab2:	0f b6 c0             	movzx  eax,al
c0017ab5:	eb 05                	jmp    c0017abc <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c0017ab7:	b8 04 00 00 00       	mov    eax,0x4
c0017abc:	83 c4 08             	add    esp,0x8
c0017abf:	5b                   	pop    ebx
c0017ac0:	c3                   	ret    
c0017ac1:	90                   	nop

c0017ac2 <ISO9660::seek(void*, unsigned long long)>:
c0017ac2:	57                   	push   edi
c0017ac3:	56                   	push   esi
c0017ac4:	b8 04 00 00 00       	mov    eax,0x4
c0017ac9:	51                   	push   ecx
c0017aca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017ace:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017ad2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017ad6:	85 d2                	test   edx,edx
c0017ad8:	74 1c                	je     c0017af6 <ISO9660::seek(void*, unsigned long long)+0x34>
c0017ada:	6a 00                	push   0x0
c0017adc:	83 ea 64             	sub    edx,0x64
c0017adf:	57                   	push   edi
c0017ae0:	56                   	push   esi
c0017ae1:	52                   	push   edx
c0017ae2:	e8 d4 e9 fe ff       	call   c00064bb <iso_seek>
c0017ae7:	83 c4 10             	add    esp,0x10
c0017aea:	31 f0                	xor    eax,esi
c0017aec:	31 fa                	xor    edx,edi
c0017aee:	09 d0                	or     eax,edx
c0017af0:	0f 95 c0             	setne  al
c0017af3:	0f b6 c0             	movzx  eax,al
c0017af6:	5a                   	pop    edx
c0017af7:	5e                   	pop    esi
c0017af8:	5f                   	pop    edi
c0017af9:	c3                   	ret    

c0017afa <ISO9660::tell(void*, unsigned long long*)>:
c0017afa:	53                   	push   ebx
c0017afb:	83 ec 08             	sub    esp,0x8
c0017afe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b02:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017b06:	85 c0                	test   eax,eax
c0017b08:	74 1c                	je     c0017b26 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017b0a:	85 db                	test   ebx,ebx
c0017b0c:	74 18                	je     c0017b26 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017b0e:	83 ec 0c             	sub    esp,0xc
c0017b11:	83 e8 64             	sub    eax,0x64
c0017b14:	50                   	push   eax
c0017b15:	e8 25 ea fe ff       	call   c000653f <iso_tell>
c0017b1a:	83 c4 10             	add    esp,0x10
c0017b1d:	89 03                	mov    DWORD PTR [ebx],eax
c0017b1f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017b22:	31 c0                	xor    eax,eax
c0017b24:	eb 05                	jmp    c0017b2b <ISO9660::tell(void*, unsigned long long*)+0x31>
c0017b26:	b8 04 00 00 00       	mov    eax,0x4
c0017b2b:	83 c4 08             	add    esp,0x8
c0017b2e:	5b                   	pop    ebx
c0017b2f:	c3                   	ret    

c0017b30 <ISO9660::stat(void*, unsigned long long*)>:
c0017b30:	53                   	push   ebx
c0017b31:	83 ec 08             	sub    esp,0x8
c0017b34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b38:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017b3c:	85 c0                	test   eax,eax
c0017b3e:	74 20                	je     c0017b60 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017b40:	85 db                	test   ebx,ebx
c0017b42:	74 1c                	je     c0017b60 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017b44:	83 ec 0c             	sub    esp,0xc
c0017b47:	83 e8 64             	sub    eax,0x64
c0017b4a:	50                   	push   eax
c0017b4b:	e8 20 ea fe ff       	call   c0006570 <iso_total>
c0017b50:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017b57:	89 03                	mov    DWORD PTR [ebx],eax
c0017b59:	83 c4 10             	add    esp,0x10
c0017b5c:	31 c0                	xor    eax,eax
c0017b5e:	eb 05                	jmp    c0017b65 <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017b60:	b8 04 00 00 00       	mov    eax,0x4
c0017b65:	83 c4 08             	add    esp,0x8
c0017b68:	5b                   	pop    ebx
c0017b69:	c3                   	ret    

c0017b6a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017b6a:	55                   	push   ebp
c0017b6b:	57                   	push   edi
c0017b6c:	56                   	push   esi
c0017b6d:	53                   	push   ebx
c0017b6e:	83 ec 0c             	sub    esp,0xc
c0017b71:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017b75:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0017b79:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017b7d:	85 ff                	test   edi,edi
c0017b7f:	0f 94 c2             	sete   dl
c0017b82:	85 f6                	test   esi,esi
c0017b84:	0f 94 c0             	sete   al
c0017b87:	08 c2                	or     dl,al
c0017b89:	0f 85 9e 00 00 00    	jne    c0017c2d <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017b8f:	85 db                	test   ebx,ebx
c0017b91:	0f 84 96 00 00 00    	je     c0017c2d <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017b97:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0017b9a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0017ba0:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017ba7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017baa:	3a 05 20 53 02 c0    	cmp    al,BYTE PTR ds:0xc0025320
c0017bb0:	74 34                	je     c0017be6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x7c>
c0017bb2:	83 ec 0c             	sub    esp,0xc
c0017bb5:	50                   	push   eax
c0017bb6:	e8 04 ec fe ff       	call   c00067bf <init_percd>
c0017bbb:	83 c4 10             	add    esp,0x10
c0017bbe:	ba 0b 00 00 00       	mov    edx,0xb
c0017bc3:	40                   	inc    eax
c0017bc4:	74 6c                	je     c0017c32 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017bc6:	80 3d 20 53 02 c0 00 	cmp    BYTE PTR ds:0xc0025320,0x0
c0017bcd:	74 10                	je     c0017bdf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x75>
c0017bcf:	83 ec 0c             	sub    esp,0xc
c0017bd2:	68 fc f0 01 c0       	push   0xc001f0fc
c0017bd7:	e8 d3 85 ff ff       	call   c00101af <KePanic(char const*)>
c0017bdc:	83 c4 10             	add    esp,0x10
c0017bdf:	8a 03                	mov    al,BYTE PTR [ebx]
c0017be1:	a2 20 53 02 c0       	mov    ds:0xc0025320,al
c0017be6:	83 c3 03             	add    ebx,0x3
c0017be9:	52                   	push   edx
c0017bea:	52                   	push   edx
c0017beb:	6a 00                	push   0x0
c0017bed:	53                   	push   ebx
c0017bee:	e8 0a e7 fe ff       	call   c00062fd <iso_open>
c0017bf3:	83 c4 10             	add    esp,0x10
c0017bf6:	89 c5                	mov    ebp,eax
c0017bf8:	83 f8 ff             	cmp    eax,0xffffffff
c0017bfb:	75 0f                	jne    c0017c0c <ISO9660::stat(char const*, unsigned long long*, bool*)+0xa2>
c0017bfd:	50                   	push   eax
c0017bfe:	50                   	push   eax
c0017bff:	6a 01                	push   0x1
c0017c01:	53                   	push   ebx
c0017c02:	e8 f6 e6 fe ff       	call   c00062fd <iso_open>
c0017c07:	c6 07 01             	mov    BYTE PTR [edi],0x1
c0017c0a:	eb 1a                	jmp    c0017c26 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xbc>
c0017c0c:	83 ec 0c             	sub    esp,0xc
c0017c0f:	50                   	push   eax
c0017c10:	e8 5b e9 fe ff       	call   c0006570 <iso_total>
c0017c15:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017c1c:	89 06                	mov    DWORD PTR [esi],eax
c0017c1e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017c21:	e8 61 e7 fe ff       	call   c0006387 <iso_close>
c0017c26:	83 c4 10             	add    esp,0x10
c0017c29:	31 d2                	xor    edx,edx
c0017c2b:	eb 05                	jmp    c0017c32 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017c2d:	ba 04 00 00 00       	mov    edx,0x4
c0017c32:	83 c4 0c             	add    esp,0xc
c0017c35:	89 d0                	mov    eax,edx
c0017c37:	5b                   	pop    ebx
c0017c38:	5e                   	pop    esi
c0017c39:	5f                   	pop    edi
c0017c3a:	5d                   	pop    ebp
c0017c3b:	c3                   	ret    

c0017c3c <ISO9660::close(void*)>:
c0017c3c:	83 ec 0c             	sub    esp,0xc
c0017c3f:	b8 04 00 00 00       	mov    eax,0x4
c0017c44:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c48:	85 d2                	test   edx,edx
c0017c4a:	74 11                	je     c0017c5d <ISO9660::close(void*)+0x21>
c0017c4c:	83 ec 0c             	sub    esp,0xc
c0017c4f:	83 ea 64             	sub    edx,0x64
c0017c52:	52                   	push   edx
c0017c53:	e8 2f e7 fe ff       	call   c0006387 <iso_close>
c0017c58:	83 c4 10             	add    esp,0x10
c0017c5b:	31 c0                	xor    eax,eax
c0017c5d:	83 c4 0c             	add    esp,0xc
c0017c60:	c3                   	ret    
c0017c61:	90                   	nop

c0017c62 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017c62:	55                   	push   ebp
c0017c63:	57                   	push   edi
c0017c64:	56                   	push   esi
c0017c65:	53                   	push   ebx
c0017c66:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017c6c:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0017c73:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0017c7a:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0017c81:	85 c0                	test   eax,eax
c0017c83:	0f 84 96 00 00 00    	je     c0017d1f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017c89:	85 db                	test   ebx,ebx
c0017c8b:	0f 84 8e 00 00 00    	je     c0017d1f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017c91:	83 ec 0c             	sub    esp,0xc
c0017c94:	83 e8 64             	sub    eax,0x64
c0017c97:	50                   	push   eax
c0017c98:	e8 24 e9 fe ff       	call   c00065c1 <iso_readdir>
c0017c9d:	83 c4 10             	add    esp,0x10
c0017ca0:	89 c6                	mov    esi,eax
c0017ca2:	85 c0                	test   eax,eax
c0017ca4:	75 18                	jne    c0017cbe <ISO9660::readDir(void*, unsigned long, void*, int*)+0x5c>
c0017ca6:	52                   	push   edx
c0017ca7:	68 10 01 00 00       	push   0x110
c0017cac:	6a 00                	push   0x0
c0017cae:	57                   	push   edi
c0017caf:	e8 1c 88 fe ff       	call   c00004d0 <memset>
c0017cb4:	83 c4 10             	add    esp,0x10
c0017cb7:	b8 01 00 00 00       	mov    eax,0x1
c0017cbc:	eb 66                	jmp    c0017d24 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017cbe:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0017cc4:	8d 68 08             	lea    ebp,[eax+0x8]
c0017cc7:	83 ec 0c             	sub    esp,0xc
c0017cca:	55                   	push   ebp
c0017ccb:	e8 70 88 fe ff       	call   c0000540 <strlen>
c0017cd0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017cd8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017cdc:	83 c4 10             	add    esp,0x10
c0017cdf:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0017ce3:	75 0a                	jne    c0017cef <ISO9660::readDir(void*, unsigned long, void*, int*)+0x8d>
c0017ce5:	b8 02 00 00 00       	mov    eax,0x2
c0017cea:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0017ced:	74 05                	je     c0017cf4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0017cef:	b8 01 00 00 00       	mov    eax,0x1
c0017cf4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017cf8:	50                   	push   eax
c0017cf9:	50                   	push   eax
c0017cfa:	55                   	push   ebp
c0017cfb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017cff:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0017d03:	50                   	push   eax
c0017d04:	e8 f7 88 fe ff       	call   c0000600 <strcpy>
c0017d09:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0017d10:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017d12:	31 c0                	xor    eax,eax
c0017d14:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0017d1a:	83 c4 10             	add    esp,0x10
c0017d1d:	eb 05                	jmp    c0017d24 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017d1f:	b8 04 00 00 00       	mov    eax,0x4
c0017d24:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017d2a:	5b                   	pop    ebx
c0017d2b:	5e                   	pop    esi
c0017d2c:	5f                   	pop    edi
c0017d2d:	5d                   	pop    ebp
c0017d2e:	c3                   	ret    

c0017d2f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017d2f:	57                   	push   edi
c0017d30:	56                   	push   esi
c0017d31:	53                   	push   ebx
c0017d32:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017d36:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017d3a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017d3e:	39 35 24 53 02 c0    	cmp    DWORD PTR ds:0xc0025324,esi
c0017d44:	75 08                	jne    c0017d4e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017d46:	38 1d 30 fb 01 c0    	cmp    BYTE PTR ds:0xc001fb30,bl
c0017d4c:	74 4a                	je     c0017d98 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017d4e:	83 ec 0c             	sub    esp,0xc
c0017d51:	31 d2                	xor    edx,edx
c0017d53:	68 40 53 02 c0       	push   0xc0025340
c0017d58:	0f be c3             	movsx  eax,bl
c0017d5b:	6a 01                	push   0x1
c0017d5d:	52                   	push   edx
c0017d5e:	56                   	push   esi
c0017d5f:	ff 34 85 1c 43 02 c0 	push   DWORD PTR [eax*4-0x3ffdbce4]
c0017d66:	e8 e9 4e ff ff       	call   c000cc54 <LogicalDisk::read(unsigned long long, int, void*)>
c0017d6b:	83 c4 20             	add    esp,0x20
c0017d6e:	85 c0                	test   eax,eax
c0017d70:	75 0e                	jne    c0017d80 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017d72:	89 35 24 53 02 c0    	mov    DWORD PTR ds:0xc0025324,esi
c0017d78:	88 1d 30 fb 01 c0    	mov    BYTE PTR ds:0xc001fb30,bl
c0017d7e:	eb 18                	jmp    c0017d98 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017d80:	50                   	push   eax
c0017d81:	68 00 08 00 00       	push   0x800
c0017d86:	6a 00                	push   0x0
c0017d88:	57                   	push   edi
c0017d89:	e8 42 87 fe ff       	call   c00004d0 <memset>
c0017d8e:	83 c4 10             	add    esp,0x10
c0017d91:	b8 01 00 00 00       	mov    eax,0x1
c0017d96:	eb 0e                	jmp    c0017da6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0017d98:	be 40 53 02 c0       	mov    esi,0xc0025340
c0017d9d:	b9 00 08 00 00       	mov    ecx,0x800
c0017da2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017da4:	31 c0                	xor    eax,eax
c0017da6:	5b                   	pop    ebx
c0017da7:	5e                   	pop    esi
c0017da8:	5f                   	pop    edi
c0017da9:	c3                   	ret    

c0017daa <ISO9660::tryMount(LogicalDisk*, int)>:
c0017daa:	53                   	push   ebx
c0017dab:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017db1:	c7 05 24 53 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0025324,0xdeadbeef
c0017dbb:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017dc2:	8d 58 41             	lea    ebx,[eax+0x41]
c0017dc5:	0f be db             	movsx  ebx,bl
c0017dc8:	53                   	push   ebx
c0017dc9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017dcd:	50                   	push   eax
c0017dce:	6a 10                	push   0x10
c0017dd0:	e8 5a ff ff ff       	call   c0017d2f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017dd5:	83 c4 10             	add    esp,0x10
c0017dd8:	31 d2                	xor    edx,edx
c0017dda:	85 c0                	test   eax,eax
c0017ddc:	75 33                	jne    c0017e11 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017dde:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017de3:	75 2c                	jne    c0017e11 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017de5:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017dea:	75 25                	jne    c0017e11 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017dec:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017df1:	75 1e                	jne    c0017e11 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017df3:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017df8:	75 17                	jne    c0017e11 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017dfa:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017dff:	75 10                	jne    c0017e11 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e01:	83 ec 0c             	sub    esp,0xc
c0017e04:	53                   	push   ebx
c0017e05:	e8 b5 e9 fe ff       	call   c00067bf <init_percd>
c0017e0a:	83 c4 10             	add    esp,0x10
c0017e0d:	40                   	inc    eax
c0017e0e:	0f 95 c2             	setne  dl
c0017e11:	88 d0                	mov    al,dl
c0017e13:	81 c4 08 08 00 00    	add    esp,0x808
c0017e19:	5b                   	pop    ebx
c0017e1a:	c3                   	ret    
c0017e1b:	90                   	nop

c0017e1c <ISO9660::ISO9660()>:
c0017e1c:	83 ec 0c             	sub    esp,0xc
c0017e1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e23:	83 ec 0c             	sub    esp,0xc
c0017e26:	50                   	push   eax
c0017e27:	e8 22 2a ff ff       	call   c000a84e <Filesystem::Filesystem()>
c0017e2c:	83 c4 10             	add    esp,0x10
c0017e2f:	ba 14 f1 01 c0       	mov    edx,0xc001f114
c0017e34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e38:	89 10                	mov    DWORD PTR [eax],edx
c0017e3a:	e8 82 ea fe ff       	call   c00068c1 <fs_iso9660_init>
c0017e3f:	90                   	nop
c0017e40:	83 c4 0c             	add    esp,0xc
c0017e43:	c3                   	ret    

c0017e44 <SoundCard::beginPlayback()>:
c0017e44:	c7 44 24 04 74 f1 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f174
c0017e4c:	e9 5e 83 ff ff       	jmp    c00101af <KePanic(char const*)>
c0017e51:	90                   	nop

c0017e52 <SoundCard::stopPlayback()>:
c0017e52:	c7 44 24 04 74 f1 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f174
c0017e5a:	e9 50 83 ff ff       	jmp    c00101af <KePanic(char const*)>
c0017e5f:	90                   	nop

c0017e60 <SoundCard::SoundCard(char const*)>:
c0017e60:	83 ec 1c             	sub    esp,0x1c
c0017e63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e67:	83 ec 08             	sub    esp,0x8
c0017e6a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e6e:	50                   	push   eax
c0017e6f:	e8 90 3c ff ff       	call   c000bb04 <Device::Device(char const*)>
c0017e74:	83 c4 10             	add    esp,0x10
c0017e77:	ba c0 f1 01 c0       	mov    edx,0xc001f1c0
c0017e7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e80:	89 10                	mov    DWORD PTR [eax],edx
c0017e82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e86:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017e8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e91:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017e9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e9f:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017ea9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ead:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017eb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ebb:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0017ec5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017ecd:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017ed2:	7f 19                	jg     c0017eed <SoundCard::SoundCard(char const*)+0x8d>
c0017ed4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ed8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017edc:	83 c2 54             	add    edx,0x54
c0017edf:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0017ee7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017eeb:	eb e0                	jmp    c0017ecd <SoundCard::SoundCard(char const*)+0x6d>
c0017eed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ef1:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017ef8:	90                   	nop
c0017ef9:	83 c4 1c             	add    esp,0x1c
c0017efc:	c3                   	ret    
c0017efd:	90                   	nop

c0017efe <SoundCard::~SoundCard()>:
c0017efe:	83 ec 0c             	sub    esp,0xc
c0017f01:	ba c0 f1 01 c0       	mov    edx,0xc001f1c0
c0017f06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f0a:	89 10                	mov    DWORD PTR [eax],edx
c0017f0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f10:	83 ec 0c             	sub    esp,0xc
c0017f13:	50                   	push   eax
c0017f14:	e8 55 39 ff ff       	call   c000b86e <Device::~Device()>
c0017f19:	83 c4 10             	add    esp,0x10
c0017f1c:	90                   	nop
c0017f1d:	83 c4 0c             	add    esp,0xc
c0017f20:	c3                   	ret    
c0017f21:	90                   	nop

c0017f22 <SoundCard::~SoundCard()>:
c0017f22:	83 ec 0c             	sub    esp,0xc
c0017f25:	83 ec 0c             	sub    esp,0xc
c0017f28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f2c:	e8 cd ff ff ff       	call   c0017efe <SoundCard::~SoundCard()>
c0017f31:	83 c4 10             	add    esp,0x10
c0017f34:	83 ec 08             	sub    esp,0x8
c0017f37:	68 e8 01 00 00       	push   0x1e8
c0017f3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f40:	e8 f2 24 ff ff       	call   c000a437 <operator delete(void*, unsigned long)>
c0017f45:	83 c4 10             	add    esp,0x10
c0017f48:	83 c4 0c             	add    esp,0xc
c0017f4b:	c3                   	ret    

c0017f4c <SoundCard::configureRates(int, int, int)>:
c0017f4c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017f50:	31 c0                	xor    eax,eax
c0017f52:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0017f59:	75 20                	jne    c0017f7b <SoundCard::configureRates(int, int, int)+0x2f>
c0017f5b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f5f:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0017f65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017f69:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0017f6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f73:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0017f79:	b0 01                	mov    al,0x1
c0017f7b:	c3                   	ret    

c0017f7c <SoundCard::getSamples16(int, short*)>:
c0017f7c:	55                   	push   ebp
c0017f7d:	57                   	push   edi
c0017f7e:	31 ff                	xor    edi,edi
c0017f80:	56                   	push   esi
c0017f81:	53                   	push   ebx
c0017f82:	31 db                	xor    ebx,ebx
c0017f84:	83 ec 10             	sub    esp,0x10
c0017f87:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017f8b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017f8f:	8d 04 36             	lea    eax,[esi+esi*1]
c0017f92:	50                   	push   eax
c0017f93:	6a 00                	push   0x0
c0017f95:	55                   	push   ebp
c0017f96:	e8 35 85 fe ff       	call   c00004d0 <memset>
c0017f9b:	83 c4 10             	add    esp,0x10
c0017f9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fa2:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0017fa9:	85 c0                	test   eax,eax
c0017fab:	74 1b                	je     c0017fc8 <SoundCard::getSamples16(int, short*)+0x4c>
c0017fad:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017fb1:	75 15                	jne    c0017fc8 <SoundCard::getSamples16(int, short*)+0x4c>
c0017fb3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017fb7:	55                   	push   ebp
c0017fb8:	56                   	push   esi
c0017fb9:	50                   	push   eax
c0017fba:	e8 ed 02 00 00       	call   c00182ac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0017fbf:	83 c4 10             	add    esp,0x10
c0017fc2:	39 c7                	cmp    edi,eax
c0017fc4:	7d 02                	jge    c0017fc8 <SoundCard::getSamples16(int, short*)+0x4c>
c0017fc6:	89 c7                	mov    edi,eax
c0017fc8:	43                   	inc    ebx
c0017fc9:	83 fb 20             	cmp    ebx,0x20
c0017fcc:	75 d0                	jne    c0017f9e <SoundCard::getSamples16(int, short*)+0x22>
c0017fce:	83 c4 0c             	add    esp,0xc
c0017fd1:	89 f8                	mov    eax,edi
c0017fd3:	5b                   	pop    ebx
c0017fd4:	5e                   	pop    esi
c0017fd5:	5f                   	pop    edi
c0017fd6:	5d                   	pop    ebp
c0017fd7:	c3                   	ret    

c0017fd8 <SoundCard::getSamples32(int, int*)>:
c0017fd8:	55                   	push   ebp
c0017fd9:	57                   	push   edi
c0017fda:	31 ff                	xor    edi,edi
c0017fdc:	56                   	push   esi
c0017fdd:	31 f6                	xor    esi,esi
c0017fdf:	53                   	push   ebx
c0017fe0:	83 ec 10             	sub    esp,0x10
c0017fe3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fe7:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017feb:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017fef:	c1 e0 02             	shl    eax,0x2
c0017ff2:	50                   	push   eax
c0017ff3:	6a 00                	push   0x0
c0017ff5:	55                   	push   ebp
c0017ff6:	e8 d5 84 fe ff       	call   c00004d0 <memset>
c0017ffb:	83 c4 10             	add    esp,0x10
c0017ffe:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0018005:	85 c0                	test   eax,eax
c0018007:	74 1b                	je     c0018024 <SoundCard::getSamples32(int, int*)+0x4c>
c0018009:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001800d:	75 15                	jne    c0018024 <SoundCard::getSamples32(int, int*)+0x4c>
c001800f:	53                   	push   ebx
c0018010:	55                   	push   ebp
c0018011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018015:	50                   	push   eax
c0018016:	e8 55 03 00 00       	call   c0018370 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001801b:	83 c4 10             	add    esp,0x10
c001801e:	39 c6                	cmp    esi,eax
c0018020:	7d 02                	jge    c0018024 <SoundCard::getSamples32(int, int*)+0x4c>
c0018022:	89 c6                	mov    esi,eax
c0018024:	47                   	inc    edi
c0018025:	83 ff 20             	cmp    edi,0x20
c0018028:	75 d4                	jne    c0017ffe <SoundCard::getSamples32(int, int*)+0x26>
c001802a:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0018030:	85 f6                	test   esi,esi
c0018032:	75 0f                	jne    c0018043 <SoundCard::getSamples32(int, int*)+0x6b>
c0018034:	84 c0                	test   al,al
c0018036:	74 1b                	je     c0018053 <SoundCard::getSamples32(int, int*)+0x7b>
c0018038:	83 ec 0c             	sub    esp,0xc
c001803b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001803d:	53                   	push   ebx
c001803e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0018041:	eb 0d                	jmp    c0018050 <SoundCard::getSamples32(int, int*)+0x78>
c0018043:	84 c0                	test   al,al
c0018045:	75 0c                	jne    c0018053 <SoundCard::getSamples32(int, int*)+0x7b>
c0018047:	83 ec 0c             	sub    esp,0xc
c001804a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001804c:	53                   	push   ebx
c001804d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0018050:	83 c4 10             	add    esp,0x10
c0018053:	83 c4 0c             	add    esp,0xc
c0018056:	89 f0                	mov    eax,esi
c0018058:	5b                   	pop    ebx
c0018059:	5e                   	pop    esi
c001805a:	5f                   	pop    edi
c001805b:	5d                   	pop    ebp
c001805c:	c3                   	ret    
c001805d:	90                   	nop

c001805e <SoundCard::addChannel(SoundPort*)>:
c001805e:	83 ec 0c             	sub    esp,0xc
c0018061:	31 c0                	xor    eax,eax
c0018063:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018067:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001806f:	74 1b                	je     c001808c <SoundCard::addChannel(SoundPort*)+0x2e>
c0018071:	40                   	inc    eax
c0018072:	83 f8 20             	cmp    eax,0x20
c0018075:	75 f0                	jne    c0018067 <SoundCard::addChannel(SoundPort*)+0x9>
c0018077:	83 ec 0c             	sub    esp,0xc
c001807a:	68 99 f1 01 c0       	push   0xc001f199
c001807f:	e8 2b 81 ff ff       	call   c00101af <KePanic(char const*)>
c0018084:	83 c4 10             	add    esp,0x10
c0018087:	83 c8 ff             	or     eax,0xffffffff
c001808a:	eb 0b                	jmp    c0018097 <SoundCard::addChannel(SoundPort*)+0x39>
c001808c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018090:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0018097:	83 c4 0c             	add    esp,0xc
c001809a:	c3                   	ret    
c001809b:	90                   	nop

c001809c <SoundCard::removeChannel(int)>:
c001809c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00180a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00180a4:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c00180af:	c3                   	ret    

c00180b0 <SoundPort::SoundPort(int, int, int, int)>:
c00180b0:	83 ec 0c             	sub    esp,0xc
c00180b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180b7:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00180be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180c2:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00180c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180ca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00180ce:	89 10                	mov    DWORD PTR [eax],edx
c00180d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180d4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00180d8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00180db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180df:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00180e3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00180e6:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c00180eb:	75 13                	jne    c0018100 <SoundPort::SoundPort(int, int, int, int)+0x50>
c00180ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00180f3:	05 a0 0f 00 00       	add    eax,0xfa0
c00180f8:	01 c0                	add    eax,eax
c00180fa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00180fe:	66 90                	xchg   ax,ax
c0018100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018104:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018108:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001810b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001810f:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0018116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001811a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001811d:	c1 e0 02             	shl    eax,0x2
c0018120:	83 ec 0c             	sub    esp,0xc
c0018123:	50                   	push   eax
c0018124:	e8 90 f6 fe ff       	call   c00077b9 <malloc>
c0018129:	83 c4 10             	add    esp,0x10
c001812c:	89 c2                	mov    edx,eax
c001812e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018132:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018135:	90                   	nop
c0018136:	83 c4 0c             	add    esp,0xc
c0018139:	c3                   	ret    
c001813a:	66 90                	xchg   ax,ax

c001813c <SoundPort::~SoundPort()>:
c001813c:	83 ec 0c             	sub    esp,0xc
c001813f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018143:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018146:	85 c0                	test   eax,eax
c0018148:	74 1e                	je     c0018168 <SoundPort::~SoundPort()+0x2c>
c001814a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001814e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018151:	83 ec 0c             	sub    esp,0xc
c0018154:	50                   	push   eax
c0018155:	e8 6f f6 fe ff       	call   c00077c9 <free>
c001815a:	83 c4 10             	add    esp,0x10
c001815d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018161:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018168:	90                   	nop
c0018169:	83 c4 0c             	add    esp,0xc
c001816c:	c3                   	ret    
c001816d:	90                   	nop
c001816e:	66 90                	xchg   ax,ax

c0018170 <SoundPort::unpause()>:
c0018170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018174:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0018178:	c3                   	ret    
c0018179:	90                   	nop
c001817a:	66 90                	xchg   ax,ax

c001817c <SoundPort::pause()>:
c001817c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018180:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0018184:	c3                   	ret    
c0018185:	90                   	nop
c0018186:	66 90                	xchg   ax,ax

c0018188 <SoundPort::getBufferUsed()>:
c0018188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001818c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001818f:	c3                   	ret    

c0018190 <SoundPort::getBufferSize()>:
c0018190:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018194:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018197:	c3                   	ret    

c0018198 <SoundPort::buffer16(short*, int)>:
c0018198:	55                   	push   ebp
c0018199:	57                   	push   edi
c001819a:	56                   	push   esi
c001819b:	53                   	push   ebx
c001819c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00181a0:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00181a4:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00181a7:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c00181aa:	74 68                	je     c0018214 <SoundPort::buffer16(short*, int)+0x7c>
c00181ac:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00181b0:	85 c9                	test   ecx,ecx
c00181b2:	7e 60                	jle    c0018214 <SoundPort::buffer16(short*, int)+0x7c>
c00181b4:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c00181b8:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00181bb:	c1 e1 0f             	shl    ecx,0xf
c00181be:	8d 70 01             	lea    esi,[eax+0x1]
c00181c1:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00181c4:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c00181c7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00181ca:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00181cd:	74 4d                	je     c001821c <SoundPort::buffer16(short*, int)+0x84>
c00181cf:	31 f6                	xor    esi,esi
c00181d1:	eb 21                	jmp    c00181f4 <SoundPort::buffer16(short*, int)+0x5c>
c00181d3:	90                   	nop
c00181d4:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c00181d9:	8d 79 01             	lea    edi,[ecx+0x1]
c00181dc:	c1 e3 0f             	shl    ebx,0xf
c00181df:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c00181e2:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c00181e5:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c00181e8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00181eb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00181ee:	74 1c                	je     c001820c <SoundPort::buffer16(short*, int)+0x74>
c00181f0:	89 c6                	mov    esi,eax
c00181f2:	66 90                	xchg   ax,ax
c00181f4:	8d 46 01             	lea    eax,[esi+0x1]
c00181f7:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00181fb:	75 d7                	jne    c00181d4 <SoundPort::buffer16(short*, int)+0x3c>
c00181fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018201:	8d 76 00             	lea    esi,[esi+0x0]
c0018204:	5b                   	pop    ebx
c0018205:	5e                   	pop    esi
c0018206:	5f                   	pop    edi
c0018207:	5d                   	pop    ebp
c0018208:	c3                   	ret    
c0018209:	8d 76 00             	lea    esi,[esi+0x0]
c001820c:	5b                   	pop    ebx
c001820d:	8d 46 02             	lea    eax,[esi+0x2]
c0018210:	5e                   	pop    esi
c0018211:	5f                   	pop    edi
c0018212:	5d                   	pop    ebp
c0018213:	c3                   	ret    
c0018214:	5b                   	pop    ebx
c0018215:	31 c0                	xor    eax,eax
c0018217:	5e                   	pop    esi
c0018218:	5f                   	pop    edi
c0018219:	5d                   	pop    ebp
c001821a:	c3                   	ret    
c001821b:	90                   	nop
c001821c:	b8 01 00 00 00       	mov    eax,0x1
c0018221:	eb e1                	jmp    c0018204 <SoundPort::buffer16(short*, int)+0x6c>
c0018223:	90                   	nop

c0018224 <SoundPort::buffer32(int*, int)>:
c0018224:	55                   	push   ebp
c0018225:	57                   	push   edi
c0018226:	56                   	push   esi
c0018227:	53                   	push   ebx
c0018228:	51                   	push   ecx
c0018229:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001822d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018231:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018234:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018238:	89 04 24             	mov    DWORD PTR [esp],eax
c001823b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001823e:	74 5c                	je     c001829c <SoundPort::buffer32(int*, int)+0x78>
c0018240:	85 c0                	test   eax,eax
c0018242:	7e 58                	jle    c001829c <SoundPort::buffer32(int*, int)+0x78>
c0018244:	8d 71 01             	lea    esi,[ecx+0x1]
c0018247:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001824a:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001824d:	8b 37                	mov    esi,DWORD PTR [edi]
c001824f:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0018252:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018255:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018258:	74 4a                	je     c00182a4 <SoundPort::buffer32(int*, int)+0x80>
c001825a:	31 f6                	xor    esi,esi
c001825c:	eb 1e                	jmp    c001827c <SoundPort::buffer32(int*, int)+0x58>
c001825e:	66 90                	xchg   ax,ax
c0018260:	8d 69 01             	lea    ebp,[ecx+0x1]
c0018263:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0018266:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0018269:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001826c:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0018270:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018273:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018276:	74 18                	je     c0018290 <SoundPort::buffer32(int*, int)+0x6c>
c0018278:	89 de                	mov    esi,ebx
c001827a:	66 90                	xchg   ax,ax
c001827c:	8d 5e 01             	lea    ebx,[esi+0x1]
c001827f:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0018282:	75 dc                	jne    c0018260 <SoundPort::buffer32(int*, int)+0x3c>
c0018284:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0018287:	90                   	nop
c0018288:	5a                   	pop    edx
c0018289:	5b                   	pop    ebx
c001828a:	5e                   	pop    esi
c001828b:	5f                   	pop    edi
c001828c:	5d                   	pop    ebp
c001828d:	c3                   	ret    
c001828e:	66 90                	xchg   ax,ax
c0018290:	5a                   	pop    edx
c0018291:	8d 46 02             	lea    eax,[esi+0x2]
c0018294:	5b                   	pop    ebx
c0018295:	5e                   	pop    esi
c0018296:	5f                   	pop    edi
c0018297:	5d                   	pop    ebp
c0018298:	c3                   	ret    
c0018299:	8d 76 00             	lea    esi,[esi+0x0]
c001829c:	5a                   	pop    edx
c001829d:	31 c0                	xor    eax,eax
c001829f:	5b                   	pop    ebx
c00182a0:	5e                   	pop    esi
c00182a1:	5f                   	pop    edi
c00182a2:	5d                   	pop    ebp
c00182a3:	c3                   	ret    
c00182a4:	b8 01 00 00 00       	mov    eax,0x1
c00182a9:	eb dd                	jmp    c0018288 <SoundPort::buffer32(int*, int)+0x64>
c00182ab:	90                   	nop

c00182ac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c00182ac:	57                   	push   edi
c00182ad:	56                   	push   esi
c00182ae:	53                   	push   ebx
c00182af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00182b3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00182b7:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c00182bd:	39 03                	cmp    DWORD PTR [ebx],eax
c00182bf:	74 13                	je     c00182d4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c00182c1:	83 ec 0c             	sub    esp,0xc
c00182c4:	68 ec f1 01 c0       	push   0xc001f1ec
c00182c9:	e8 e1 7e ff ff       	call   c00101af <KePanic(char const*)>
c00182ce:	83 c4 10             	add    esp,0x10
c00182d1:	8d 76 00             	lea    esi,[esi+0x0]
c00182d4:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c00182da:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c00182dd:	74 11                	je     c00182f0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c00182df:	83 ec 0c             	sub    esp,0xc
c00182e2:	68 2b f2 01 c0       	push   0xc001f22b
c00182e7:	e8 c3 7e ff ff       	call   c00101af <KePanic(char const*)>
c00182ec:	83 c4 10             	add    esp,0x10
c00182ef:	90                   	nop
c00182f0:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c00182f6:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c00182f9:	74 11                	je     c001830c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c00182fb:	83 ec 0c             	sub    esp,0xc
c00182fe:	68 2b f2 01 c0       	push   0xc001f22b
c0018303:	e8 a7 7e ff ff       	call   c00101af <KePanic(char const*)>
c0018308:	83 c4 10             	add    esp,0x10
c001830b:	90                   	nop
c001830c:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001830f:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0018313:	7e 07                	jle    c001831c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0018315:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018319:	8d 76 00             	lea    esi,[esi+0x0]
c001831c:	85 f6                	test   esi,esi
c001831e:	7e 2c                	jle    c001834c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0018320:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018324:	8d 3c 36             	lea    edi,[esi+esi*1]
c0018327:	31 c9                	xor    ecx,ecx
c0018329:	01 d7                	add    edi,edx
c001832b:	90                   	nop
c001832c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001832f:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0018332:	85 c0                	test   eax,eax
c0018334:	79 06                	jns    c001833c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0018336:	05 ff 7f 00 00       	add    eax,0x7fff
c001833b:	90                   	nop
c001833c:	c1 f8 0f             	sar    eax,0xf
c001833f:	83 c1 04             	add    ecx,0x4
c0018342:	66 01 02             	add    WORD PTR [edx],ax
c0018345:	83 c2 02             	add    edx,0x2
c0018348:	39 d7                	cmp    edi,edx
c001834a:	75 e0                	jne    c001832c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001834c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001834f:	50                   	push   eax
c0018350:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018353:	29 f0                	sub    eax,esi
c0018355:	c1 e0 02             	shl    eax,0x2
c0018358:	50                   	push   eax
c0018359:	8d 04 b2             	lea    eax,[edx+esi*4]
c001835c:	50                   	push   eax
c001835d:	52                   	push   edx
c001835e:	e8 7d 80 fe ff       	call   c00003e0 <memmove>
c0018363:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c0018366:	83 c4 10             	add    esp,0x10
c0018369:	89 f0                	mov    eax,esi
c001836b:	5b                   	pop    ebx
c001836c:	5e                   	pop    esi
c001836d:	5f                   	pop    edi
c001836e:	c3                   	ret    
c001836f:	90                   	nop

c0018370 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0018370:	57                   	push   edi
c0018371:	56                   	push   esi
c0018372:	53                   	push   ebx
c0018373:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018377:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001837b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001837f:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0018385:	39 06                	cmp    DWORD PTR [esi],eax
c0018387:	74 13                	je     c001839c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0018389:	83 ec 0c             	sub    esp,0xc
c001838c:	68 0c f2 01 c0       	push   0xc001f20c
c0018391:	e8 19 7e ff ff       	call   c00101af <KePanic(char const*)>
c0018396:	83 c4 10             	add    esp,0x10
c0018399:	8d 76 00             	lea    esi,[esi+0x0]
c001839c:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c00183a2:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c00183a5:	74 11                	je     c00183b8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c00183a7:	83 ec 0c             	sub    esp,0xc
c00183aa:	68 47 f2 01 c0       	push   0xc001f247
c00183af:	e8 fb 7d ff ff       	call   c00101af <KePanic(char const*)>
c00183b4:	83 c4 10             	add    esp,0x10
c00183b7:	90                   	nop
c00183b8:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c00183be:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c00183c1:	74 11                	je     c00183d4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c00183c3:	83 ec 0c             	sub    esp,0xc
c00183c6:	68 47 f2 01 c0       	push   0xc001f247
c00183cb:	e8 df 7d ff ff       	call   c00101af <KePanic(char const*)>
c00183d0:	83 c4 10             	add    esp,0x10
c00183d3:	90                   	nop
c00183d4:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00183d7:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c00183db:	7e 07                	jle    c00183e4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c00183dd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00183e1:	8d 76 00             	lea    esi,[esi+0x0]
c00183e4:	85 ff                	test   edi,edi
c00183e6:	7e 1c                	jle    c0018404 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c00183e8:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c00183ef:	31 c0                	xor    eax,eax
c00183f1:	8d 76 00             	lea    esi,[esi+0x0]
c00183f4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00183f7:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c00183fa:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c00183fd:	83 c0 04             	add    eax,0x4
c0018400:	39 c1                	cmp    ecx,eax
c0018402:	75 f0                	jne    c00183f4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0018404:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0018407:	50                   	push   eax
c0018408:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001840b:	29 f8                	sub    eax,edi
c001840d:	c1 e0 02             	shl    eax,0x2
c0018410:	50                   	push   eax
c0018411:	8d 04 ba             	lea    eax,[edx+edi*4]
c0018414:	50                   	push   eax
c0018415:	52                   	push   edx
c0018416:	e8 c5 7f fe ff       	call   c00003e0 <memmove>
c001841b:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001841e:	83 c4 10             	add    esp,0x10
c0018421:	89 f8                	mov    eax,edi
c0018423:	5b                   	pop    ebx
c0018424:	5e                   	pop    esi
c0018425:	5f                   	pop    edi
c0018426:	c3                   	ret    
c0018427:	90                   	nop

c0018428 <PCI::open(int, int, void*)>:
c0018428:	83 ec 18             	sub    esp,0x18
c001842b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001842f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018433:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0018439:	8b 10                	mov    edx,DWORD PTR [eax]
c001843b:	50                   	push   eax
c001843c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001843f:	31 c0                	xor    eax,eax
c0018441:	83 c4 1c             	add    esp,0x1c
c0018444:	c3                   	ret    
c0018445:	90                   	nop

c0018446 <PCI::close(int, int, void*)>:
c0018446:	31 c0                	xor    eax,eax
c0018448:	c3                   	ret    
c0018449:	90                   	nop

c001844a <PCI::PCI()>:
c001844a:	83 ec 0c             	sub    esp,0xc
c001844d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018451:	83 ec 08             	sub    esp,0x8
c0018454:	68 63 f2 01 c0       	push   0xc001f263
c0018459:	50                   	push   eax
c001845a:	e8 61 2e ff ff       	call   c000b2c0 <Bus::Bus(char const*)>
c001845f:	83 c4 10             	add    esp,0x10
c0018462:	ba 0c f3 01 c0       	mov    edx,0xc001f30c
c0018467:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001846b:	89 10                	mov    DWORD PTR [eax],edx
c001846d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018471:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001847b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001847f:	a3 40 5b 02 c0       	mov    ds:0xc0025b40,eax
c0018484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018488:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001848e:	31 d2                	xor    edx,edx
c0018490:	88 c2                	mov    dl,al
c0018492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018496:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001849d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184a1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00184a7:	31 d2                	xor    edx,edx
c00184a9:	88 c2                	mov    dl,al
c00184ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184af:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00184b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184b8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00184be:	8d 50 01             	lea    edx,[eax+0x1]
c00184c1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00184c5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00184cb:	31 d2                	xor    edx,edx
c00184cd:	88 c2                	mov    dl,al
c00184cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184d3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00184d7:	83 c9 c0             	or     ecx,0xffffffc0
c00184da:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00184de:	90                   	nop
c00184df:	83 c4 0c             	add    esp,0xc
c00184e2:	c3                   	ret    
c00184e3:	90                   	nop

c00184e4 <PCI::readBAR8(unsigned int, int)>:
c00184e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00184e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00184ec:	f6 c2 01             	test   dl,0x1
c00184ef:	74 07                	je     c00184f8 <PCI::readBAR8(unsigned int, int)+0x14>
c00184f1:	83 e2 fc             	and    edx,0xfffffffc
c00184f4:	01 c2                	add    edx,eax
c00184f6:	ec                   	in     al,dx
c00184f7:	c3                   	ret    
c00184f8:	83 e2 f0             	and    edx,0xfffffff0
c00184fb:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00184fe:	c3                   	ret    
c00184ff:	90                   	nop

c0018500 <PCI::readBAR16(unsigned int, int)>:
c0018500:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018504:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018508:	f6 c2 01             	test   dl,0x1
c001850b:	74 08                	je     c0018515 <PCI::readBAR16(unsigned int, int)+0x15>
c001850d:	83 e2 fc             	and    edx,0xfffffffc
c0018510:	01 c2                	add    edx,eax
c0018512:	66 ed                	in     ax,dx
c0018514:	c3                   	ret    
c0018515:	83 e2 f0             	and    edx,0xfffffff0
c0018518:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001851c:	c3                   	ret    
c001851d:	90                   	nop

c001851e <PCI::readBAR32(unsigned int, int)>:
c001851e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018522:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018526:	f6 c2 01             	test   dl,0x1
c0018529:	74 07                	je     c0018532 <PCI::readBAR32(unsigned int, int)+0x14>
c001852b:	83 e2 fc             	and    edx,0xfffffffc
c001852e:	01 c2                	add    edx,eax
c0018530:	ed                   	in     eax,dx
c0018531:	c3                   	ret    
c0018532:	83 e2 f0             	and    edx,0xfffffff0
c0018535:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0018538:	c3                   	ret    
c0018539:	90                   	nop

c001853a <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001853a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001853e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018542:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018546:	f6 c2 01             	test   dl,0x1
c0018549:	74 07                	je     c0018552 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001854b:	83 e2 fc             	and    edx,0xfffffffc
c001854e:	01 ca                	add    edx,ecx
c0018550:	ee                   	out    dx,al
c0018551:	c3                   	ret    
c0018552:	83 e2 f0             	and    edx,0xfffffff0
c0018555:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0018558:	c3                   	ret    
c0018559:	90                   	nop

c001855a <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001855a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001855e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018562:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018566:	f6 c2 01             	test   dl,0x1
c0018569:	74 08                	je     c0018573 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001856b:	83 e2 fc             	and    edx,0xfffffffc
c001856e:	01 ca                	add    edx,ecx
c0018570:	66 ef                	out    dx,ax
c0018572:	c3                   	ret    
c0018573:	83 e2 f0             	and    edx,0xfffffff0
c0018576:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001857a:	c3                   	ret    
c001857b:	90                   	nop

c001857c <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001857c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018580:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018584:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018588:	f6 c2 01             	test   dl,0x1
c001858b:	74 07                	je     c0018594 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001858d:	83 e2 fc             	and    edx,0xfffffffc
c0018590:	01 ca                	add    edx,ecx
c0018592:	ef                   	out    dx,eax
c0018593:	c3                   	ret    
c0018594:	83 e2 f0             	and    edx,0xfffffff0
c0018597:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001859a:	c3                   	ret    
c001859b:	90                   	nop

c001859c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001859c:	55                   	push   ebp
c001859d:	57                   	push   edi
c001859e:	56                   	push   esi
c001859f:	53                   	push   ebx
c00185a0:	83 ec 0c             	sub    esp,0xc
c00185a3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00185a7:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00185ab:	89 f0                	mov    eax,esi
c00185ad:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00185b1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00185b5:	3c 07                	cmp    al,0x7
c00185b7:	76 10                	jbe    c00185c9 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00185b9:	83 ec 0c             	sub    esp,0xc
c00185bc:	68 6b f2 01 c0       	push   0xc001f26b
c00185c1:	e8 e9 7b ff ff       	call   c00101af <KePanic(char const*)>
c00185c6:	83 c4 10             	add    esp,0x10
c00185c9:	80 fb 0f             	cmp    bl,0xf
c00185cc:	76 10                	jbe    c00185de <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00185ce:	83 ec 0c             	sub    esp,0xc
c00185d1:	68 9b f2 01 c0       	push   0xc001f29b
c00185d6:	e8 d4 7b ff ff       	call   c00101af <KePanic(char const*)>
c00185db:	83 c4 10             	add    esp,0x10
c00185de:	8d 04 36             	lea    eax,[esi+esi*1]
c00185e1:	ba f8 0c 00 00       	mov    edx,0xcf8
c00185e6:	83 c8 f0             	or     eax,0xfffffff0
c00185e9:	ee                   	out    dx,al
c00185ea:	ba fa 0c 00 00       	mov    edx,0xcfa
c00185ef:	89 e8                	mov    eax,ebp
c00185f1:	ee                   	out    dx,al
c00185f2:	83 c4 0c             	add    esp,0xc
c00185f5:	89 d8                	mov    eax,ebx
c00185f7:	66 81 e7 fc 00       	and    di,0xfc
c00185fc:	5b                   	pop    ebx
c00185fd:	c1 e0 08             	shl    eax,0x8
c0018600:	5e                   	pop    esi
c0018601:	09 f8                	or     eax,edi
c0018603:	5f                   	pop    edi
c0018604:	66 0d 00 c0          	or     ax,0xc000
c0018608:	5d                   	pop    ebp
c0018609:	c3                   	ret    

c001860a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001860a:	57                   	push   edi
c001860b:	56                   	push   esi
c001860c:	53                   	push   ebx
c001860d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018611:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018615:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001861b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001861f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018623:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018627:	83 ff 01             	cmp    edi,0x1
c001862a:	75 3e                	jne    c001866a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001862c:	89 de                	mov    esi,ebx
c001862e:	0f b6 c0             	movzx  eax,al
c0018631:	81 e6 fc 00 00 00    	and    esi,0xfc
c0018637:	c1 e0 10             	shl    eax,0x10
c001863a:	0f b6 c9             	movzx  ecx,cl
c001863d:	09 f0                	or     eax,esi
c001863f:	c1 e1 08             	shl    ecx,0x8
c0018642:	0f b6 d2             	movzx  edx,dl
c0018645:	09 c8                	or     eax,ecx
c0018647:	c1 e2 0b             	shl    edx,0xb
c001864a:	09 d0                	or     eax,edx
c001864c:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018651:	0d 00 00 00 80       	or     eax,0x80000000
c0018656:	ef                   	out    dx,eax
c0018657:	ba fc 0c 00 00       	mov    edx,0xcfc
c001865c:	ed                   	in     eax,dx
c001865d:	83 e3 02             	and    ebx,0x2
c0018660:	0f b6 cb             	movzx  ecx,bl
c0018663:	c1 e1 03             	shl    ecx,0x3
c0018666:	d3 e8                	shr    eax,cl
c0018668:	eb 43                	jmp    c00186ad <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001866a:	83 ff 02             	cmp    edi,0x2
c001866d:	75 2c                	jne    c001869b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001866f:	83 ec 0c             	sub    esp,0xc
c0018672:	0f b6 c9             	movzx  ecx,cl
c0018675:	0f b6 d2             	movzx  edx,dl
c0018678:	0f b6 fb             	movzx  edi,bl
c001867b:	0f b6 c0             	movzx  eax,al
c001867e:	57                   	push   edi
c001867f:	51                   	push   ecx
c0018680:	52                   	push   edx
c0018681:	50                   	push   eax
c0018682:	56                   	push   esi
c0018683:	e8 14 ff ff ff       	call   c001859c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018688:	89 c2                	mov    edx,eax
c001868a:	ed                   	in     eax,dx
c001868b:	83 e3 02             	and    ebx,0x2
c001868e:	83 c4 20             	add    esp,0x20
c0018691:	0f b6 cb             	movzx  ecx,bl
c0018694:	c1 e1 03             	shl    ecx,0x3
c0018697:	d3 e8                	shr    eax,cl
c0018699:	eb 12                	jmp    c00186ad <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001869b:	83 ec 0c             	sub    esp,0xc
c001869e:	68 cb f2 01 c0       	push   0xc001f2cb
c00186a3:	e8 07 7b ff ff       	call   c00101af <KePanic(char const*)>
c00186a8:	83 c4 10             	add    esp,0x10
c00186ab:	31 c0                	xor    eax,eax
c00186ad:	5b                   	pop    ebx
c00186ae:	5e                   	pop    esi
c00186af:	5f                   	pop    edi
c00186b0:	c3                   	ret    
c00186b1:	90                   	nop

c00186b2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00186b2:	83 ec 18             	sub    esp,0x18
c00186b5:	6a 00                	push   0x0
c00186b7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186bc:	50                   	push   eax
c00186bd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186c2:	50                   	push   eax
c00186c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186c8:	50                   	push   eax
c00186c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186cd:	e8 38 ff ff ff       	call   c001860a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00186d2:	83 c4 2c             	add    esp,0x2c
c00186d5:	c3                   	ret    

c00186d6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00186d6:	83 ec 18             	sub    esp,0x18
c00186d9:	6a 0e                	push   0xe
c00186db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186e0:	50                   	push   eax
c00186e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186e6:	50                   	push   eax
c00186e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186ec:	50                   	push   eax
c00186ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186f1:	e8 14 ff ff ff       	call   c001860a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00186f6:	83 c4 2c             	add    esp,0x2c
c00186f9:	0f b6 c0             	movzx  eax,al
c00186fc:	c3                   	ret    
c00186fd:	90                   	nop

c00186fe <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00186fe:	55                   	push   ebp
c00186ff:	57                   	push   edi
c0018700:	56                   	push   esi
c0018701:	53                   	push   ebx
c0018702:	83 ec 18             	sub    esp,0x18
c0018705:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001870a:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001870f:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0018714:	6a 0a                	push   0xa
c0018716:	56                   	push   esi
c0018717:	55                   	push   ebp
c0018718:	57                   	push   edi
c0018719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001871d:	e8 e8 fe ff ff       	call   c001860a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018722:	83 c4 14             	add    esp,0x14
c0018725:	89 c3                	mov    ebx,eax
c0018727:	6a 0a                	push   0xa
c0018729:	0f b6 db             	movzx  ebx,bl
c001872c:	56                   	push   esi
c001872d:	55                   	push   ebp
c001872e:	57                   	push   edi
c001872f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018733:	e8 d2 fe ff ff       	call   c001860a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018738:	83 c4 2c             	add    esp,0x2c
c001873b:	25 00 ff 00 00       	and    eax,0xff00
c0018740:	09 d8                	or     eax,ebx
c0018742:	5b                   	pop    ebx
c0018743:	5e                   	pop    esi
c0018744:	5f                   	pop    edi
c0018745:	5d                   	pop    ebp
c0018746:	c3                   	ret    
c0018747:	90                   	nop

c0018748 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0018748:	83 ec 18             	sub    esp,0x18
c001874b:	6a 08                	push   0x8
c001874d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018752:	50                   	push   eax
c0018753:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018758:	50                   	push   eax
c0018759:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001875e:	50                   	push   eax
c001875f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018763:	e8 a2 fe ff ff       	call   c001860a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018768:	83 c4 2c             	add    esp,0x2c
c001876b:	0f b6 c4             	movzx  eax,ah
c001876e:	c3                   	ret    
c001876f:	90                   	nop

c0018770 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0018770:	83 ec 18             	sub    esp,0x18
c0018773:	6a 08                	push   0x8
c0018775:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001877a:	50                   	push   eax
c001877b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018780:	50                   	push   eax
c0018781:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018786:	50                   	push   eax
c0018787:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001878b:	e8 7a fe ff ff       	call   c001860a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018790:	83 c4 2c             	add    esp,0x2c
c0018793:	c3                   	ret    

c0018794 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0018794:	83 ec 18             	sub    esp,0x18
c0018797:	6a 3c                	push   0x3c
c0018799:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001879e:	50                   	push   eax
c001879f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187a4:	50                   	push   eax
c00187a5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187aa:	50                   	push   eax
c00187ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187af:	e8 56 fe ff ff       	call   c001860a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187b4:	83 c4 2c             	add    esp,0x2c
c00187b7:	c3                   	ret    

c00187b8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00187b8:	83 ec 18             	sub    esp,0x18
c00187bb:	6a 18                	push   0x18
c00187bd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187c2:	50                   	push   eax
c00187c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187c8:	50                   	push   eax
c00187c9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187ce:	50                   	push   eax
c00187cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187d3:	e8 32 fe ff ff       	call   c001860a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187d8:	83 c4 2c             	add    esp,0x2c
c00187db:	0f b6 c4             	movzx  eax,ah
c00187de:	c3                   	ret    
c00187df:	90                   	nop

c00187e0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00187e0:	55                   	push   ebp
c00187e1:	57                   	push   edi
c00187e2:	56                   	push   esi
c00187e3:	53                   	push   ebx
c00187e4:	83 ec 28             	sub    esp,0x28
c00187e7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00187eb:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c00187f0:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c00187f5:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c00187fa:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0018801:	8d 43 12             	lea    eax,[ebx+0x12]
c0018804:	83 c3 10             	add    ebx,0x10
c0018807:	0f b6 c0             	movzx  eax,al
c001880a:	0f b6 db             	movzx  ebx,bl
c001880d:	50                   	push   eax
c001880e:	51                   	push   ecx
c001880f:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0018813:	57                   	push   edi
c0018814:	55                   	push   ebp
c0018815:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018819:	e8 ec fd ff ff       	call   c001860a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001881e:	83 c4 14             	add    esp,0x14
c0018821:	89 c6                	mov    esi,eax
c0018823:	53                   	push   ebx
c0018824:	c1 e6 10             	shl    esi,0x10
c0018827:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001882b:	51                   	push   ecx
c001882c:	57                   	push   edi
c001882d:	55                   	push   ebp
c001882e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018832:	e8 d3 fd ff ff       	call   c001860a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018837:	83 c4 3c             	add    esp,0x3c
c001883a:	0f b7 c0             	movzx  eax,ax
c001883d:	5b                   	pop    ebx
c001883e:	09 f0                	or     eax,esi
c0018840:	5e                   	pop    esi
c0018841:	5f                   	pop    edi
c0018842:	5d                   	pop    ebp
c0018843:	c3                   	ret    

c0018844 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0018844:	55                   	push   ebp
c0018845:	57                   	push   edi
c0018846:	56                   	push   esi
c0018847:	53                   	push   ebx
c0018848:	83 ec 0c             	sub    esp,0xc
c001884b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001884f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018853:	89 f5                	mov    ebp,esi
c0018855:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001885b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001885f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018863:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018867:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001886b:	83 f9 01             	cmp    ecx,0x1
c001886e:	75 5d                	jne    c00188cd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0018870:	0f b6 c8             	movzx  ecx,al
c0018873:	0f b6 d2             	movzx  edx,dl
c0018876:	c1 e1 10             	shl    ecx,0x10
c0018879:	c1 e2 0b             	shl    edx,0xb
c001887c:	89 f0                	mov    eax,esi
c001887e:	25 fc 00 00 00       	and    eax,0xfc
c0018883:	09 c1                	or     ecx,eax
c0018885:	89 e8                	mov    eax,ebp
c0018887:	0f b6 c0             	movzx  eax,al
c001888a:	c1 e0 08             	shl    eax,0x8
c001888d:	09 c1                	or     ecx,eax
c001888f:	09 d1                	or     ecx,edx
c0018891:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018896:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001889c:	89 c8                	mov    eax,ecx
c001889e:	ef                   	out    dx,eax
c001889f:	ba fc 0c 00 00       	mov    edx,0xcfc
c00188a4:	ed                   	in     eax,dx
c00188a5:	0f b7 db             	movzx  ebx,bx
c00188a8:	83 e6 02             	and    esi,0x2
c00188ab:	74 0a                	je     c00188b7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c00188ad:	0f b7 d0             	movzx  edx,ax
c00188b0:	c1 e3 10             	shl    ebx,0x10
c00188b3:	09 d3                	or     ebx,edx
c00188b5:	eb 05                	jmp    c00188bc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00188b7:	66 31 c0             	xor    ax,ax
c00188ba:	09 c3                	or     ebx,eax
c00188bc:	ba f8 0c 00 00       	mov    edx,0xcf8
c00188c1:	89 c8                	mov    eax,ecx
c00188c3:	ef                   	out    dx,eax
c00188c4:	ba fc 0c 00 00       	mov    edx,0xcfc
c00188c9:	89 d8                	mov    eax,ebx
c00188cb:	eb 41                	jmp    c001890e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00188cd:	83 f9 02             	cmp    ecx,0x2
c00188d0:	75 45                	jne    c0018917 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00188d2:	83 ec 0c             	sub    esp,0xc
c00188d5:	0f b6 d2             	movzx  edx,dl
c00188d8:	89 f1                	mov    ecx,esi
c00188da:	0f b6 c0             	movzx  eax,al
c00188dd:	0f b6 f1             	movzx  esi,cl
c00188e0:	89 e9                	mov    ecx,ebp
c00188e2:	56                   	push   esi
c00188e3:	0f b6 c9             	movzx  ecx,cl
c00188e6:	51                   	push   ecx
c00188e7:	52                   	push   edx
c00188e8:	50                   	push   eax
c00188e9:	57                   	push   edi
c00188ea:	e8 ad fc ff ff       	call   c001859c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188ef:	89 c2                	mov    edx,eax
c00188f1:	ed                   	in     eax,dx
c00188f2:	83 c4 20             	add    esp,0x20
c00188f5:	0f b7 db             	movzx  ebx,bx
c00188f8:	f6 c2 02             	test   dl,0x2
c00188fb:	74 0c                	je     c0018909 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c00188fd:	0f b7 c8             	movzx  ecx,ax
c0018900:	89 d8                	mov    eax,ebx
c0018902:	c1 e0 10             	shl    eax,0x10
c0018905:	09 c8                	or     eax,ecx
c0018907:	eb 05                	jmp    c001890e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018909:	66 31 c0             	xor    ax,ax
c001890c:	09 d8                	or     eax,ebx
c001890e:	ef                   	out    dx,eax
c001890f:	83 c4 0c             	add    esp,0xc
c0018912:	5b                   	pop    ebx
c0018913:	5e                   	pop    esi
c0018914:	5f                   	pop    edi
c0018915:	5d                   	pop    ebp
c0018916:	c3                   	ret    
c0018917:	c7 44 24 20 cb f2 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f2cb
c001891f:	83 c4 0c             	add    esp,0xc
c0018922:	5b                   	pop    ebx
c0018923:	5e                   	pop    esi
c0018924:	5f                   	pop    edi
c0018925:	5d                   	pop    ebp
c0018926:	e9 84 78 ff ff       	jmp    c00101af <KePanic(char const*)>
c001892b:	90                   	nop

c001892c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001892c:	55                   	push   ebp
c001892d:	57                   	push   edi
c001892e:	56                   	push   esi
c001892f:	53                   	push   ebx
c0018930:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018936:	80 3d 4c 5b 02 c0 00 	cmp    BYTE PTR ds:0xc0025b4c,0x0
c001893d:	0f 85 84 00 00 00    	jne    c00189c7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0018943:	83 ec 0c             	sub    esp,0xc
c0018946:	68 14 01 00 00       	push   0x114
c001894b:	e8 69 ee fe ff       	call   c00077b9 <malloc>
c0018950:	83 c4 0c             	add    esp,0xc
c0018953:	89 c3                	mov    ebx,eax
c0018955:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c001895b:	68 d1 f2 01 c0       	push   0xc001f2d1
c0018960:	50                   	push   eax
c0018961:	e8 3c 21 ff ff       	call   c000aaa2 <File::File(char const*, Process*)>
c0018966:	5a                   	pop    edx
c0018967:	59                   	pop    ecx
c0018968:	6a 01                	push   0x1
c001896a:	53                   	push   ebx
c001896b:	e8 f2 21 ff ff       	call   c000ab62 <File::open(FileOpenMode)>
c0018970:	83 c4 0c             	add    esp,0xc
c0018973:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0018977:	50                   	push   eax
c0018978:	8d 44 24 28          	lea    eax,[esp+0x28]
c001897c:	50                   	push   eax
c001897d:	53                   	push   ebx
c001897e:	e8 8b 24 ff ff       	call   c000ae0e <File::stat(unsigned long long*, bool*)>
c0018983:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018987:	40                   	inc    eax
c0018988:	89 04 24             	mov    DWORD PTR [esp],eax
c001898b:	e8 29 ee fe ff       	call   c00077b9 <malloc>
c0018990:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018994:	a3 48 5b 02 c0       	mov    ds:0xc0025b48,eax
c0018999:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001899d:	5e                   	pop    esi
c001899e:	8b 13                	mov    edx,DWORD PTR [ebx]
c00189a0:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00189a4:	51                   	push   ecx
c00189a5:	50                   	push   eax
c00189a6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00189aa:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00189ae:	53                   	push   ebx
c00189af:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00189b2:	83 c4 14             	add    esp,0x14
c00189b5:	53                   	push   ebx
c00189b6:	e8 05 22 ff ff       	call   c000abc0 <File::close()>
c00189bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189bf:	83 c4 10             	add    esp,0x10
c00189c2:	a3 44 5b 02 c0       	mov    ds:0xc0025b44,eax
c00189c7:	a1 44 5b 02 c0       	mov    eax,ds:0xc0025b44
c00189cc:	8b 15 48 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025b48
c00189d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00189d5:	31 ff                	xor    edi,edi
c00189d7:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c00189df:	31 f6                	xor    esi,esi
c00189e1:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00189e6:	31 db                	xor    ebx,ebx
c00189e8:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c00189f0:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00189f5:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c00189fc:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018a00:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0018a07:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018a0b:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018a0e:	0f 8e 6b 01 00 00    	jle    c0018b7f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018a14:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018a17:	d4 40                	aam    0x40
c0018a19:	d5 39                	aad    0x39
c0018a1b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018a1f:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018a23:	d4 40                	aam    0x40
c0018a25:	d5 39                	aad    0x39
c0018a27:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018a2b:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018a2f:	d4 40                	aam    0x40
c0018a31:	d5 39                	aad    0x39
c0018a33:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018a37:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018a3b:	d4 40                	aam    0x40
c0018a3d:	d5 39                	aad    0x39
c0018a3f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018a43:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0018a47:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018a4b:	3c 56                	cmp    al,0x56
c0018a4d:	74 45                	je     c0018a94 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018a4f:	d4 40                	aam    0x40
c0018a51:	d5 39                	aad    0x39
c0018a53:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018a56:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018a5a:	0f b6 c9             	movzx  ecx,cl
c0018a5d:	c1 e1 04             	shl    ecx,0x4
c0018a60:	d4 40                	aam    0x40
c0018a62:	d5 39                	aad    0x39
c0018a64:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018a67:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018a6b:	0f b6 db             	movzx  ebx,bl
c0018a6e:	09 cb                	or     ebx,ecx
c0018a70:	c1 e3 04             	shl    ebx,0x4
c0018a73:	d4 40                	aam    0x40
c0018a75:	d5 39                	aad    0x39
c0018a77:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018a7a:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018a7e:	0f b6 c9             	movzx  ecx,cl
c0018a81:	09 cb                	or     ebx,ecx
c0018a83:	c1 e3 04             	shl    ebx,0x4
c0018a86:	89 d9                	mov    ecx,ebx
c0018a88:	d4 40                	aam    0x40
c0018a8a:	d5 39                	aad    0x39
c0018a8c:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018a8f:	0f b6 db             	movzx  ebx,bl
c0018a92:	09 cb                	or     ebx,ecx
c0018a94:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018a98:	80 f9 44             	cmp    cl,0x44
c0018a9b:	74 47                	je     c0018ae4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018a9d:	88 c8                	mov    al,cl
c0018a9f:	d4 40                	aam    0x40
c0018aa1:	d5 39                	aad    0x39
c0018aa3:	83 e8 30             	sub    eax,0x30
c0018aa6:	0f b6 e8             	movzx  ebp,al
c0018aa9:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018aad:	c1 e5 04             	shl    ebp,0x4
c0018ab0:	d4 40                	aam    0x40
c0018ab2:	d5 39                	aad    0x39
c0018ab4:	83 e8 30             	sub    eax,0x30
c0018ab7:	0f b6 f0             	movzx  esi,al
c0018aba:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018abe:	09 ee                	or     esi,ebp
c0018ac0:	c1 e6 04             	shl    esi,0x4
c0018ac3:	d4 40                	aam    0x40
c0018ac5:	d5 39                	aad    0x39
c0018ac7:	83 e8 30             	sub    eax,0x30
c0018aca:	0f b6 e8             	movzx  ebp,al
c0018acd:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018ad1:	09 ee                	or     esi,ebp
c0018ad3:	c1 e6 04             	shl    esi,0x4
c0018ad6:	89 f5                	mov    ebp,esi
c0018ad8:	d4 40                	aam    0x40
c0018ada:	d5 39                	aad    0x39
c0018adc:	83 e8 30             	sub    eax,0x30
c0018adf:	0f b6 f0             	movzx  esi,al
c0018ae2:	09 ee                	or     esi,ebp
c0018ae4:	83 c7 10             	add    edi,0x10
c0018ae7:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018aeb:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018aee:	3c 0a                	cmp    al,0xa
c0018af0:	74 09                	je     c0018afb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018af2:	45                   	inc    ebp
c0018af3:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018af6:	75 16                	jne    c0018b0e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018af8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018afb:	3c 0a                	cmp    al,0xa
c0018afd:	0f 94 c0             	sete   al
c0018b00:	0f b6 c0             	movzx  eax,al
c0018b03:	01 c7                	add    edi,eax
c0018b05:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018b0a:	75 0c                	jne    c0018b18 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018b0c:	eb 15                	jmp    c0018b23 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018b0e:	47                   	inc    edi
c0018b0f:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018b12:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018b16:	eb d3                	jmp    c0018aeb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018b18:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018b1d:	0f 85 e8 fe ff ff    	jne    c0018a0b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018b23:	80 f9 44             	cmp    cl,0x44
c0018b26:	74 0b                	je     c0018b33 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018b28:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018b2d:	0f 85 d8 fe ff ff    	jne    c0018a0b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018b33:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018b37:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018b3b:	c1 e1 04             	shl    ecx,0x4
c0018b3e:	83 e8 30             	sub    eax,0x30
c0018b41:	09 c8                	or     eax,ecx
c0018b43:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018b47:	0f 85 be fe ff ff    	jne    c0018a0b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018b4d:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018b51:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018b55:	c1 e1 04             	shl    ecx,0x4
c0018b58:	83 e8 30             	sub    eax,0x30
c0018b5b:	09 c8                	or     eax,ecx
c0018b5d:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018b61:	0f 85 a4 fe ff ff    	jne    c0018a0b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018b67:	50                   	push   eax
c0018b68:	50                   	push   eax
c0018b69:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018b6d:	50                   	push   eax
c0018b6e:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018b75:	e8 86 7a fe ff       	call   c0000600 <strcpy>
c0018b7a:	83 c4 10             	add    esp,0x10
c0018b7d:	eb 15                	jmp    c0018b94 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018b7f:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018b86:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018b91:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018b94:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018b9b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018ba1:	5b                   	pop    ebx
c0018ba2:	5e                   	pop    esi
c0018ba3:	5f                   	pop    edi
c0018ba4:	5d                   	pop    ebp
c0018ba5:	c3                   	ret    

c0018ba6 <PCI::checkBus(unsigned char)>:
c0018ba6:	56                   	push   esi
c0018ba7:	53                   	push   ebx
c0018ba8:	31 f6                	xor    esi,esi
c0018baa:	51                   	push   ecx
c0018bab:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018baf:	0f b6 c3             	movzx  eax,bl
c0018bb2:	52                   	push   edx
c0018bb3:	56                   	push   esi
c0018bb4:	46                   	inc    esi
c0018bb5:	50                   	push   eax
c0018bb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018bba:	e8 f3 02 00 00       	call   c0018eb2 <PCI::checkDevice(unsigned char, unsigned char)>
c0018bbf:	83 c4 10             	add    esp,0x10
c0018bc2:	83 fe 20             	cmp    esi,0x20
c0018bc5:	75 e8                	jne    c0018baf <PCI::checkBus(unsigned char)+0x9>
c0018bc7:	58                   	pop    eax
c0018bc8:	5b                   	pop    ebx
c0018bc9:	5e                   	pop    esi
c0018bca:	c3                   	ret    
c0018bcb:	90                   	nop

c0018bcc <PCI::foundDevice(PCIDeviceInfo)>:
c0018bcc:	55                   	push   ebp
c0018bcd:	57                   	push   edi
c0018bce:	56                   	push   esi
c0018bcf:	53                   	push   ebx
c0018bd0:	83 ec 1c             	sub    esp,0x1c
c0018bd3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018bd7:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018bdd:	0f 84 52 01 00 00    	je     c0018d35 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018be3:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018be7:	66 81 f9 06 04       	cmp    cx,0x406
c0018bec:	75 2c                	jne    c0018c1a <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018bee:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018bf3:	50                   	push   eax
c0018bf4:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018bf9:	50                   	push   eax
c0018bfa:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018bff:	50                   	push   eax
c0018c00:	56                   	push   esi
c0018c01:	e8 b2 fb ff ff       	call   c00187b8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0018c06:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018c0a:	0f b6 c0             	movzx  eax,al
c0018c0d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018c11:	83 c4 2c             	add    esp,0x2c
c0018c14:	5b                   	pop    ebx
c0018c15:	5e                   	pop    esi
c0018c16:	5f                   	pop    edi
c0018c17:	5d                   	pop    ebp
c0018c18:	eb 8c                	jmp    c0018ba6 <PCI::checkBus(unsigned char)>
c0018c1a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018c1e:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018c24:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018c28:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018c2c:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018c30:	88 d3                	mov    bl,dl
c0018c32:	85 c0                	test   eax,eax
c0018c34:	74 33                	je     c0018c69 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0018c36:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018c39:	85 d2                	test   edx,edx
c0018c3b:	74 28                	je     c0018c65 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018c3d:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018c43:	31 ef                	xor    edi,ebp
c0018c45:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018c4b:	75 18                	jne    c0018c65 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018c51:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0018c57:	75 0c                	jne    c0018c65 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018c59:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018c5f:	0f 84 d0 00 00 00    	je     c0018d35 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018c65:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c67:	eb c9                	jmp    c0018c32 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018c69:	66 81 f9 01 06       	cmp    cx,0x601
c0018c6e:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018c72:	75 19                	jne    c0018c8d <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018c74:	83 ec 0c             	sub    esp,0xc
c0018c77:	68 64 01 00 00       	push   0x164
c0018c7c:	e8 38 eb fe ff       	call   c00077b9 <malloc>
c0018c81:	89 c5                	mov    ebp,eax
c0018c83:	89 04 24             	mov    DWORD PTR [esp],eax
c0018c86:	e8 47 0e 00 00       	call   c0019ad2 <SATABus::SATABus()>
c0018c8b:	eb 1e                	jmp    c0018cab <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018c8d:	66 81 f9 01 01       	cmp    cx,0x101
c0018c92:	75 60                	jne    c0018cf4 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018c94:	83 ec 0c             	sub    esp,0xc
c0018c97:	68 70 02 00 00       	push   0x270
c0018c9c:	e8 18 eb fe ff       	call   c00077b9 <malloc>
c0018ca1:	89 c5                	mov    ebp,eax
c0018ca3:	89 04 24             	mov    DWORD PTR [esp],eax
c0018ca6:	e8 cb 02 00 00       	call   c0018f76 <IDE::IDE()>
c0018cab:	58                   	pop    eax
c0018cac:	5a                   	pop    edx
c0018cad:	55                   	push   ebp
c0018cae:	56                   	push   esi
c0018caf:	e8 b8 2c ff ff       	call   c000b96c <Device::addChild(Device*)>
c0018cb4:	83 ec 1c             	sub    esp,0x1c
c0018cb7:	b9 09 00 00 00       	mov    ecx,0x9
c0018cbc:	fc                   	cld    
c0018cbd:	89 e7                	mov    edi,esp
c0018cbf:	89 de                	mov    esi,ebx
c0018cc1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018cc3:	55                   	push   ebp
c0018cc4:	e8 e9 2b ff ff       	call   c000b8b2 <Device::preOpenPCI(PCIDeviceInfo)>
c0018cc9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018ccc:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018cd0:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018cd8:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018ce0:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018ce8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018ceb:	83 c4 4c             	add    esp,0x4c
c0018cee:	5b                   	pop    ebx
c0018cef:	5e                   	pop    esi
c0018cf0:	5f                   	pop    edi
c0018cf1:	5d                   	pop    ebp
c0018cf2:	ff e0                	jmp    eax
c0018cf4:	83 ec 0c             	sub    esp,0xc
c0018cf7:	68 58 01 00 00       	push   0x158
c0018cfc:	e8 b8 ea fe ff       	call   c00077b9 <malloc>
c0018d01:	89 c5                	mov    ebp,eax
c0018d03:	58                   	pop    eax
c0018d04:	5a                   	pop    edx
c0018d05:	68 ea f2 01 c0       	push   0xc001f2ea
c0018d0a:	55                   	push   ebp
c0018d0b:	e8 fa 2e ff ff       	call   c000bc0a <DriverlessDevice::DriverlessDevice(char const*)>
c0018d10:	59                   	pop    ecx
c0018d11:	5f                   	pop    edi
c0018d12:	55                   	push   ebp
c0018d13:	56                   	push   esi
c0018d14:	e8 53 2c ff ff       	call   c000b96c <Device::addChild(Device*)>
c0018d19:	b9 09 00 00 00       	mov    ecx,0x9
c0018d1e:	fc                   	cld    
c0018d1f:	89 df                	mov    edi,ebx
c0018d21:	89 de                	mov    esi,ebx
c0018d23:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018d25:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018d29:	83 c4 2c             	add    esp,0x2c
c0018d2c:	5b                   	pop    ebx
c0018d2d:	5e                   	pop    esi
c0018d2e:	5f                   	pop    edi
c0018d2f:	5d                   	pop    ebp
c0018d30:	e9 7d 2b ff ff       	jmp    c000b8b2 <Device::preOpenPCI(PCIDeviceInfo)>
c0018d35:	83 c4 1c             	add    esp,0x1c
c0018d38:	5b                   	pop    ebx
c0018d39:	5e                   	pop    esi
c0018d3a:	5f                   	pop    edi
c0018d3b:	5d                   	pop    ebp
c0018d3c:	c3                   	ret    
c0018d3d:	90                   	nop

c0018d3e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018d3e:	55                   	push   ebp
c0018d3f:	57                   	push   edi
c0018d40:	56                   	push   esi
c0018d41:	53                   	push   ebx
c0018d42:	83 ec 68             	sub    esp,0x68
c0018d45:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018d49:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018d50:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018d54:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018d5b:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018d60:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018d64:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018d6b:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018d70:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018d74:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018d79:	6a 0c                	push   0xc
c0018d7b:	57                   	push   edi
c0018d7c:	53                   	push   ebx
c0018d7d:	56                   	push   esi
c0018d7e:	55                   	push   ebp
c0018d7f:	e8 86 f8 ff ff       	call   c001860a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018d84:	83 c4 20             	add    esp,0x20
c0018d87:	57                   	push   edi
c0018d88:	53                   	push   ebx
c0018d89:	56                   	push   esi
c0018d8a:	55                   	push   ebp
c0018d8b:	e8 6e f9 ff ff       	call   c00186fe <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018d90:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018d95:	57                   	push   edi
c0018d96:	53                   	push   ebx
c0018d97:	56                   	push   esi
c0018d98:	55                   	push   ebp
c0018d99:	e8 f6 f9 ff ff       	call   c0018794 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018d9e:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018da2:	83 c4 14             	add    esp,0x14
c0018da5:	6a 3c                	push   0x3c
c0018da7:	57                   	push   edi
c0018da8:	53                   	push   ebx
c0018da9:	56                   	push   esi
c0018daa:	55                   	push   ebp
c0018dab:	e8 5a f8 ff ff       	call   c001860a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018db0:	0f b6 c4             	movzx  eax,ah
c0018db3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018db7:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018dbb:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018dbf:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0018dc4:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018dca:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018dd0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018dd4:	83 c4 20             	add    esp,0x20
c0018dd7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018ddc:	74 30                	je     c0018e0e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018dde:	31 c0                	xor    eax,eax
c0018de0:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018de4:	7e 28                	jle    c0018e0e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018de6:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018dee:	39 cb                	cmp    ebx,ecx
c0018df0:	75 19                	jne    c0018e0b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018df2:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018dfa:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018dfe:	75 0b                	jne    c0018e0b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018e00:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0018e07:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018e0b:	40                   	inc    eax
c0018e0c:	eb d2                	jmp    c0018de0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018e0e:	31 d2                	xor    edx,edx
c0018e10:	83 ec 0c             	sub    esp,0xc
c0018e13:	57                   	push   edi
c0018e14:	53                   	push   ebx
c0018e15:	56                   	push   esi
c0018e16:	52                   	push   edx
c0018e17:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018e1b:	55                   	push   ebp
c0018e1c:	e8 bf f9 ff ff       	call   c00187e0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e21:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018e25:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018e29:	42                   	inc    edx
c0018e2a:	83 c4 20             	add    esp,0x20
c0018e2d:	83 fa 06             	cmp    edx,0x6
c0018e30:	75 de                	jne    c0018e10 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018e32:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018e37:	83 ec 0c             	sub    esp,0xc
c0018e3a:	86 e0                	xchg   al,ah
c0018e3c:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018e41:	6a 02                	push   0x2
c0018e43:	57                   	push   edi
c0018e44:	53                   	push   ebx
c0018e45:	56                   	push   esi
c0018e46:	55                   	push   ebp
c0018e47:	e8 be f7 ff ff       	call   c001860a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e4c:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018e51:	83 c4 20             	add    esp,0x20
c0018e54:	57                   	push   edi
c0018e55:	53                   	push   ebx
c0018e56:	56                   	push   esi
c0018e57:	55                   	push   ebp
c0018e58:	e8 eb f8 ff ff       	call   c0018748 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018e5d:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018e61:	57                   	push   edi
c0018e62:	53                   	push   ebx
c0018e63:	56                   	push   esi
c0018e64:	55                   	push   ebp
c0018e65:	e8 48 f8 ff ff       	call   c00186b2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018e6a:	b9 09 00 00 00       	mov    ecx,0x9
c0018e6f:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018e74:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018e78:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018e7c:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018e80:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018e84:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018e88:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018e8c:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018e90:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018e94:	83 ec 0c             	sub    esp,0xc
c0018e97:	fc                   	cld    
c0018e98:	89 e7                	mov    edi,esp
c0018e9a:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018e9e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018ea0:	55                   	push   ebp
c0018ea1:	e8 26 fd ff ff       	call   c0018bcc <PCI::foundDevice(PCIDeviceInfo)>
c0018ea6:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018eac:	5b                   	pop    ebx
c0018ead:	5e                   	pop    esi
c0018eae:	5f                   	pop    edi
c0018eaf:	5d                   	pop    ebp
c0018eb0:	c3                   	ret    
c0018eb1:	90                   	nop

c0018eb2 <PCI::checkDevice(unsigned char, unsigned char)>:
c0018eb2:	55                   	push   ebp
c0018eb3:	57                   	push   edi
c0018eb4:	56                   	push   esi
c0018eb5:	53                   	push   ebx
c0018eb6:	83 ec 0c             	sub    esp,0xc
c0018eb9:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018ebd:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0018ec2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018ec7:	6a 00                	push   0x0
c0018ec9:	56                   	push   esi
c0018eca:	57                   	push   edi
c0018ecb:	55                   	push   ebp
c0018ecc:	e8 e1 f7 ff ff       	call   c00186b2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018ed1:	6a 00                	push   0x0
c0018ed3:	56                   	push   esi
c0018ed4:	57                   	push   edi
c0018ed5:	55                   	push   ebp
c0018ed6:	e8 63 fe ff ff       	call   c0018d3e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018edb:	83 c4 20             	add    esp,0x20
c0018ede:	6a 00                	push   0x0
c0018ee0:	56                   	push   esi
c0018ee1:	57                   	push   edi
c0018ee2:	55                   	push   ebp
c0018ee3:	e8 ee f7 ff ff       	call   c00186d6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018ee8:	83 c4 10             	add    esp,0x10
c0018eeb:	84 c0                	test   al,al
c0018eed:	79 27                	jns    c0018f16 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0018eef:	bb 01 00 00 00       	mov    ebx,0x1
c0018ef4:	53                   	push   ebx
c0018ef5:	56                   	push   esi
c0018ef6:	57                   	push   edi
c0018ef7:	55                   	push   ebp
c0018ef8:	e8 b5 f7 ff ff       	call   c00186b2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018efd:	83 c4 10             	add    esp,0x10
c0018f00:	66 40                	inc    ax
c0018f02:	74 0c                	je     c0018f10 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0018f04:	53                   	push   ebx
c0018f05:	56                   	push   esi
c0018f06:	57                   	push   edi
c0018f07:	55                   	push   ebp
c0018f08:	e8 31 fe ff ff       	call   c0018d3e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018f0d:	83 c4 10             	add    esp,0x10
c0018f10:	43                   	inc    ebx
c0018f11:	83 fb 08             	cmp    ebx,0x8
c0018f14:	75 de                	jne    c0018ef4 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0018f16:	83 c4 0c             	add    esp,0xc
c0018f19:	5b                   	pop    ebx
c0018f1a:	5e                   	pop    esi
c0018f1b:	5f                   	pop    edi
c0018f1c:	5d                   	pop    ebp
c0018f1d:	c3                   	ret    

c0018f1e <PCI::detect()>:
c0018f1e:	56                   	push   esi
c0018f1f:	53                   	push   ebx
c0018f20:	53                   	push   ebx
c0018f21:	31 db                	xor    ebx,ebx
c0018f23:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018f27:	6a 00                	push   0x0
c0018f29:	6a 00                	push   0x0
c0018f2b:	6a 00                	push   0x0
c0018f2d:	56                   	push   esi
c0018f2e:	e8 a3 f7 ff ff       	call   c00186d6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018f33:	83 c4 10             	add    esp,0x10
c0018f36:	a8 80                	test   al,0x80
c0018f38:	75 21                	jne    c0018f5b <PCI::detect()+0x3d>
c0018f3a:	51                   	push   ecx
c0018f3b:	51                   	push   ecx
c0018f3c:	6a 00                	push   0x0
c0018f3e:	56                   	push   esi
c0018f3f:	e8 62 fc ff ff       	call   c0018ba6 <PCI::checkBus(unsigned char)>
c0018f44:	83 c4 10             	add    esp,0x10
c0018f47:	eb 24                	jmp    c0018f6d <PCI::detect()+0x4f>
c0018f49:	52                   	push   edx
c0018f4a:	52                   	push   edx
c0018f4b:	53                   	push   ebx
c0018f4c:	43                   	inc    ebx
c0018f4d:	56                   	push   esi
c0018f4e:	e8 53 fc ff ff       	call   c0018ba6 <PCI::checkBus(unsigned char)>
c0018f53:	83 c4 10             	add    esp,0x10
c0018f56:	83 fb 08             	cmp    ebx,0x8
c0018f59:	74 12                	je     c0018f6d <PCI::detect()+0x4f>
c0018f5b:	53                   	push   ebx
c0018f5c:	6a 00                	push   0x0
c0018f5e:	6a 00                	push   0x0
c0018f60:	56                   	push   esi
c0018f61:	e8 4c f7 ff ff       	call   c00186b2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018f66:	83 c4 10             	add    esp,0x10
c0018f69:	66 40                	inc    ax
c0018f6b:	74 dc                	je     c0018f49 <PCI::detect()+0x2b>
c0018f6d:	58                   	pop    eax
c0018f6e:	5b                   	pop    ebx
c0018f6f:	5e                   	pop    esi
c0018f70:	c3                   	ret    
c0018f71:	90                   	nop

c0018f72 <IDE::close(int, int, void*)>:
c0018f72:	83 c8 ff             	or     eax,0xffffffff
c0018f75:	c3                   	ret    

c0018f76 <IDE::IDE()>:
c0018f76:	83 ec 0c             	sub    esp,0xc
c0018f79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f7d:	83 ec 08             	sub    esp,0x8
c0018f80:	68 30 f3 01 c0       	push   0xc001f330
c0018f85:	50                   	push   eax
c0018f86:	e8 25 2d ff ff       	call   c000bcb0 <HardDiskController::HardDiskController(char const*)>
c0018f8b:	83 c4 10             	add    esp,0x10
c0018f8e:	ba c0 f3 01 c0       	mov    edx,0xc001f3c0
c0018f93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f97:	89 10                	mov    DWORD PTR [eax],edx
c0018f99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f9d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018fa4:	90                   	nop
c0018fa5:	83 c4 0c             	add    esp,0xc
c0018fa8:	c3                   	ret    
c0018fa9:	90                   	nop

c0018faa <IDE::prepareInterrupt(unsigned char)>:
c0018faa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018faf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018fb3:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0018fbb:	c3                   	ret    

c0018fbc <selectDrive(unsigned char, unsigned char)>:
c0018fbc:	c3                   	ret    
c0018fbd:	90                   	nop

c0018fbe <IDE::getBase(unsigned char)>:
c0018fbe:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0018fc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018fc7:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0018fcf:	c3                   	ret    

c0018fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0018fd0:	55                   	push   ebp
c0018fd1:	57                   	push   edi
c0018fd2:	56                   	push   esi
c0018fd3:	53                   	push   ebx
c0018fd4:	83 ec 1c             	sub    esp,0x1c
c0018fd7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018fdb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018fdf:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0018fe2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018fe6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018fea:	80 f9 03             	cmp    cl,0x3
c0018fed:	77 51                	ja     c0019040 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0018fef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018ff3:	0f b6 f2             	movzx  esi,dl
c0018ff6:	0f b6 db             	movzx  ebx,bl
c0018ff9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0018ffc:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0019000:	83 ca 80             	or     edx,0xffffff80
c0019003:	0f b6 d2             	movzx  edx,dl
c0019006:	52                   	push   edx
c0019007:	6a 0c                	push   0xc
c0019009:	56                   	push   esi
c001900a:	57                   	push   edi
c001900b:	e8 c0 ff ff ff       	call   c0018fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019010:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0019015:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019019:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001901d:	ee                   	out    dx,al
c001901e:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0019023:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0019027:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001902b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001902f:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0019037:	83 c4 2c             	add    esp,0x2c
c001903a:	5b                   	pop    ebx
c001903b:	5e                   	pop    esi
c001903c:	5f                   	pop    edi
c001903d:	5d                   	pop    ebp
c001903e:	eb 90                	jmp    c0018fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019040:	80 fb 07             	cmp    bl,0x7
c0019043:	77 12                	ja     c0019057 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0019045:	0f b6 d2             	movzx  edx,dl
c0019048:	0f b6 db             	movzx  ebx,bl
c001904b:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0019053:	89 da                	mov    edx,ebx
c0019055:	eb 2f                	jmp    c0019086 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0019057:	80 fb 0d             	cmp    bl,0xd
c001905a:	77 13                	ja     c001906f <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001905c:	0f b6 d2             	movzx  edx,dl
c001905f:	0f b6 db             	movzx  ebx,bl
c0019062:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0019069:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001906d:	eb 17                	jmp    c0019086 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001906f:	80 fb 15             	cmp    bl,0x15
c0019072:	77 13                	ja     c0019087 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0019074:	0f b6 d2             	movzx  edx,dl
c0019077:	0f b6 db             	movzx  ebx,bl
c001907a:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0019082:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0019086:	ee                   	out    dx,al
c0019087:	83 c4 1c             	add    esp,0x1c
c001908a:	5b                   	pop    ebx
c001908b:	5e                   	pop    esi
c001908c:	5f                   	pop    edi
c001908d:	5d                   	pop    ebp
c001908e:	c3                   	ret    
c001908f:	90                   	nop

c0019090 <IDE::read(unsigned char, unsigned char)>:
c0019090:	55                   	push   ebp
c0019091:	57                   	push   edi
c0019092:	56                   	push   esi
c0019093:	53                   	push   ebx
c0019094:	83 ec 1c             	sub    esp,0x1c
c0019097:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001909b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001909f:	8d 43 f8             	lea    eax,[ebx-0x8]
c00190a2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00190a6:	3c 03                	cmp    al,0x3
c00190a8:	77 43                	ja     c00190ed <IDE::read(unsigned char, unsigned char)+0x5d>
c00190aa:	0f b6 f2             	movzx  esi,dl
c00190ad:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00190b0:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00190b4:	83 c8 80             	or     eax,0xffffff80
c00190b7:	0f b6 c0             	movzx  eax,al
c00190ba:	50                   	push   eax
c00190bb:	6a 0c                	push   0xc
c00190bd:	56                   	push   esi
c00190be:	57                   	push   edi
c00190bf:	e8 0c ff ff ff       	call   c0018fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00190c4:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00190c9:	0f b6 c3             	movzx  eax,bl
c00190cc:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00190d0:	ec                   	in     al,dx
c00190d1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00190d5:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00190da:	52                   	push   edx
c00190db:	6a 0c                	push   0xc
c00190dd:	56                   	push   esi
c00190de:	57                   	push   edi
c00190df:	e8 ec fe ff ff       	call   c0018fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00190e4:	83 c4 20             	add    esp,0x20
c00190e7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00190eb:	eb 49                	jmp    c0019136 <IDE::read(unsigned char, unsigned char)+0xa6>
c00190ed:	80 fb 07             	cmp    bl,0x7
c00190f0:	77 12                	ja     c0019104 <IDE::read(unsigned char, unsigned char)+0x74>
c00190f2:	0f b6 d2             	movzx  edx,dl
c00190f5:	0f b6 c3             	movzx  eax,bl
c00190f8:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0019100:	89 c2                	mov    edx,eax
c0019102:	eb 31                	jmp    c0019135 <IDE::read(unsigned char, unsigned char)+0xa5>
c0019104:	80 fb 0d             	cmp    bl,0xd
c0019107:	77 13                	ja     c001911c <IDE::read(unsigned char, unsigned char)+0x8c>
c0019109:	0f b6 d2             	movzx  edx,dl
c001910c:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0019113:	0f b6 d3             	movzx  edx,bl
c0019116:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001911a:	eb 19                	jmp    c0019135 <IDE::read(unsigned char, unsigned char)+0xa5>
c001911c:	31 c0                	xor    eax,eax
c001911e:	80 fb 15             	cmp    bl,0x15
c0019121:	77 13                	ja     c0019136 <IDE::read(unsigned char, unsigned char)+0xa6>
c0019123:	0f b6 d2             	movzx  edx,dl
c0019126:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001912e:	0f b6 d3             	movzx  edx,bl
c0019131:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0019135:	ec                   	in     al,dx
c0019136:	83 c4 1c             	add    esp,0x1c
c0019139:	5b                   	pop    ebx
c001913a:	5e                   	pop    esi
c001913b:	5f                   	pop    edi
c001913c:	5d                   	pop    ebp
c001913d:	c3                   	ret    

c001913e <IDE::waitInterrupt(unsigned char)>:
c001913e:	57                   	push   edi
c001913f:	56                   	push   esi
c0019140:	31 f6                	xor    esi,esi
c0019142:	53                   	push   ebx
c0019143:	83 ec 10             	sub    esp,0x10
c0019146:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001914a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001914e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019152:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0019157:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001915e:	84 db                	test   bl,bl
c0019160:	75 33                	jne    c0019195 <IDE::waitInterrupt(unsigned char)+0x57>
c0019162:	52                   	push   edx
c0019163:	6a 0c                	push   0xc
c0019165:	50                   	push   eax
c0019166:	57                   	push   edi
c0019167:	e8 24 ff ff ff       	call   c0019090 <IDE::read(unsigned char, unsigned char)>
c001916c:	83 c4 10             	add    esp,0x10
c001916f:	a8 01                	test   al,0x1
c0019171:	75 2a                	jne    c001919d <IDE::waitInterrupt(unsigned char)+0x5f>
c0019173:	f7 c6 04 00 00 00    	test   esi,0x4
c0019179:	75 12                	jne    c001918d <IDE::waitInterrupt(unsigned char)+0x4f>
c001917b:	83 fe 32             	cmp    esi,0x32
c001917e:	7e 0d                	jle    c001918d <IDE::waitInterrupt(unsigned char)+0x4f>
c0019180:	83 ec 0c             	sub    esp,0xc
c0019183:	6a 64                	push   0x64
c0019185:	e8 1a a9 ff ff       	call   c0013aa4 <milliTenthSleep(unsigned int)>
c001918a:	83 c4 10             	add    esp,0x10
c001918d:	83 fe 3c             	cmp    esi,0x3c
c0019190:	74 0b                	je     c001919d <IDE::waitInterrupt(unsigned char)+0x5f>
c0019192:	46                   	inc    esi
c0019193:	eb bd                	jmp    c0019152 <IDE::waitInterrupt(unsigned char)+0x14>
c0019195:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c001919d:	83 c4 10             	add    esp,0x10
c00191a0:	88 d8                	mov    al,bl
c00191a2:	5b                   	pop    ebx
c00191a3:	5e                   	pop    esi
c00191a4:	5f                   	pop    edi
c00191a5:	c3                   	ret    

c00191a6 <ideChannel0IRQHandler(regs*, void*)>:
c00191a6:	83 ec 10             	sub    esp,0x10
c00191a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00191ad:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00191b4:	6a 07                	push   0x7
c00191b6:	6a 00                	push   0x0
c00191b8:	50                   	push   eax
c00191b9:	e8 d2 fe ff ff       	call   c0019090 <IDE::read(unsigned char, unsigned char)>
c00191be:	83 c4 1c             	add    esp,0x1c
c00191c1:	c3                   	ret    

c00191c2 <ideChannel1IRQHandler(regs*, void*)>:
c00191c2:	83 ec 10             	sub    esp,0x10
c00191c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00191c9:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00191d0:	6a 07                	push   0x7
c00191d2:	6a 01                	push   0x1
c00191d4:	50                   	push   eax
c00191d5:	e8 b6 fe ff ff       	call   c0019090 <IDE::read(unsigned char, unsigned char)>
c00191da:	83 c4 1c             	add    esp,0x1c
c00191dd:	c3                   	ret    

c00191de <IDE::enableIRQs(unsigned char, bool)>:
c00191de:	57                   	push   edi
c00191df:	56                   	push   esi
c00191e0:	be 04 00 00 00       	mov    esi,0x4
c00191e5:	53                   	push   ebx
c00191e6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00191eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00191ef:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00191f4:	0f 94 c0             	sete   al
c00191f7:	01 c0                	add    eax,eax
c00191f9:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0019200:	0f b6 c0             	movzx  eax,al
c0019203:	50                   	push   eax
c0019204:	6a 0c                	push   0xc
c0019206:	57                   	push   edi
c0019207:	53                   	push   ebx
c0019208:	e8 c3 fd ff ff       	call   c0018fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001920d:	83 c4 10             	add    esp,0x10
c0019210:	50                   	push   eax
c0019211:	6a 0c                	push   0xc
c0019213:	57                   	push   edi
c0019214:	53                   	push   ebx
c0019215:	e8 76 fe ff ff       	call   c0019090 <IDE::read(unsigned char, unsigned char)>
c001921a:	83 c4 10             	add    esp,0x10
c001921d:	4e                   	dec    esi
c001921e:	75 f0                	jne    c0019210 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0019220:	5b                   	pop    ebx
c0019221:	5e                   	pop    esi
c0019222:	5f                   	pop    edi
c0019223:	c3                   	ret    

c0019224 <IDE::open(int, int, void*)>:
c0019224:	55                   	push   ebp
c0019225:	57                   	push   edi
c0019226:	56                   	push   esi
c0019227:	53                   	push   ebx
c0019228:	83 ec 1c             	sub    esp,0x1c
c001922b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001922f:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0019238:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0019241:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0019248:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001924f:	0f 85 b0 02 00 00    	jne    c0019505 <IDE::open(int, int, void*)+0x2e1>
c0019255:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001925b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001925f:	83 e0 7f             	and    eax,0x7f
c0019262:	3c 05                	cmp    al,0x5
c0019264:	74 04                	je     c001926a <IDE::open(int, int, void*)+0x46>
c0019266:	3c 0f                	cmp    al,0xf
c0019268:	75 32                	jne    c001929c <IDE::open(int, int, void*)+0x78>
c001926a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0019270:	83 e0 fc             	and    eax,0xfffffffc
c0019273:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001927a:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0019280:	83 e0 fc             	and    eax,0xfffffffc
c0019283:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001928a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0019290:	83 e0 fc             	and    eax,0xfffffffc
c0019293:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001929a:	eb 14                	jmp    c00192b0 <IDE::open(int, int, void*)+0x8c>
c001929c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00192a6:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00192b0:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00192b7:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00192be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00192c2:	89 c6                	mov    esi,eax
c00192c4:	bf f8 0c 00 00       	mov    edi,0xcf8
c00192c9:	c1 e6 10             	shl    esi,0x10
c00192cc:	89 e8                	mov    eax,ebp
c00192ce:	89 fa                	mov    edx,edi
c00192d0:	c1 e0 0b             	shl    eax,0xb
c00192d3:	09 f0                	or     eax,esi
c00192d5:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00192dc:	c1 e6 08             	shl    esi,0x8
c00192df:	09 c6                	or     esi,eax
c00192e1:	89 f0                	mov    eax,esi
c00192e3:	0d 08 00 00 80       	or     eax,0x80000008
c00192e8:	ef                   	out    dx,eax
c00192e9:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00192ee:	89 ca                	mov    edx,ecx
c00192f0:	ed                   	in     eax,dx
c00192f1:	c1 e8 10             	shr    eax,0x10
c00192f4:	3d ff ff 00 00       	cmp    eax,0xffff
c00192f9:	0f 84 f5 00 00 00    	je     c00193f4 <IDE::open(int, int, void*)+0x1d0>
c00192ff:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0019305:	89 fa                	mov    edx,edi
c0019307:	89 f0                	mov    eax,esi
c0019309:	ef                   	out    dx,eax
c001930a:	b0 fe                	mov    al,0xfe
c001930c:	89 ca                	mov    edx,ecx
c001930e:	ee                   	out    dx,al
c001930f:	89 f0                	mov    eax,esi
c0019311:	89 fa                	mov    edx,edi
c0019313:	ef                   	out    dx,eax
c0019314:	89 ca                	mov    edx,ecx
c0019316:	ed                   	in     eax,dx
c0019317:	3c fe                	cmp    al,0xfe
c0019319:	0f 85 a9 00 00 00    	jne    c00193c8 <IDE::open(int, int, void*)+0x1a4>
c001931f:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c0019325:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001932c:	74 33                	je     c0019361 <IDE::open(int, int, void*)+0x13d>
c001932e:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0019334:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0019338:	40                   	inc    eax
c0019339:	83 ec 0c             	sub    esp,0xc
c001933c:	0f b6 c0             	movzx  eax,al
c001933f:	50                   	push   eax
c0019340:	55                   	push   ebp
c0019341:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019345:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001934b:	51                   	push   ecx
c001934c:	e8 77 53 ff ff       	call   c000e6c8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0019351:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0019356:	83 c4 1c             	add    esp,0x1c
c0019359:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001935f:	eb 0a                	jmp    c001936b <IDE::open(int, int, void*)+0x147>
c0019361:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001936b:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0019372:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0019379:	c1 e1 10             	shl    ecx,0x10
c001937c:	c1 e0 08             	shl    eax,0x8
c001937f:	bf f8 0c 00 00       	mov    edi,0xcf8
c0019384:	09 c1                	or     ecx,eax
c0019386:	89 fa                	mov    edx,edi
c0019388:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001938f:	c1 e0 0b             	shl    eax,0xb
c0019392:	09 c1                	or     ecx,eax
c0019394:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001939a:	89 c8                	mov    eax,ecx
c001939c:	ef                   	out    dx,eax
c001939d:	be fc 0c 00 00       	mov    esi,0xcfc
c00193a2:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00193a8:	89 f2                	mov    edx,esi
c00193aa:	ee                   	out    dx,al
c00193ab:	89 c8                	mov    eax,ecx
c00193ad:	89 fa                	mov    edx,edi
c00193af:	ef                   	out    dx,eax
c00193b0:	89 f2                	mov    edx,esi
c00193b2:	ed                   	in     eax,dx
c00193b3:	0f b6 c0             	movzx  eax,al
c00193b6:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00193bc:	74 46                	je     c0019404 <IDE::open(int, int, void*)+0x1e0>
c00193be:	83 ec 0c             	sub    esp,0xc
c00193c1:	68 48 f3 01 c0       	push   0xc001f348
c00193c6:	eb 34                	jmp    c00193fc <IDE::open(int, int, void*)+0x1d8>
c00193c8:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00193d1:	75 17                	jne    c00193ea <IDE::open(int, int, void*)+0x1c6>
c00193d3:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00193d8:	74 07                	je     c00193e1 <IDE::open(int, int, void*)+0x1bd>
c00193da:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00193df:	75 09                	jne    c00193ea <IDE::open(int, int, void*)+0x1c6>
c00193e1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00193e8:	eb 1a                	jmp    c0019404 <IDE::open(int, int, void*)+0x1e0>
c00193ea:	83 ec 0c             	sub    esp,0xc
c00193ed:	68 50 f3 01 c0       	push   0xc001f350
c00193f2:	eb 08                	jmp    c00193fc <IDE::open(int, int, void*)+0x1d8>
c00193f4:	83 ec 0c             	sub    esp,0xc
c00193f7:	68 81 f3 01 c0       	push   0xc001f381
c00193fc:	e8 ae 6d ff ff       	call   c00101af <KePanic(char const*)>
c0019401:	83 c4 10             	add    esp,0x10
c0019404:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001940b:	79 1a                	jns    c0019427 <IDE::open(int, int, void*)+0x203>
c001940d:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0019413:	83 e0 fc             	and    eax,0xfffffffc
c0019416:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001941d:	83 c0 08             	add    eax,0x8
c0019420:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0019427:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001942d:	89 c2                	mov    edx,eax
c001942f:	83 e2 0f             	and    edx,0xf
c0019432:	66 83 fa 08          	cmp    dx,0x8
c0019436:	75 0a                	jne    c0019442 <IDE::open(int, int, void*)+0x21e>
c0019438:	83 e8 02             	sub    eax,0x2
c001943b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019442:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0019448:	89 c2                	mov    edx,eax
c001944a:	83 e2 0f             	and    edx,0xf
c001944d:	66 83 fa 08          	cmp    dx,0x8
c0019451:	75 0a                	jne    c001945d <IDE::open(int, int, void*)+0x239>
c0019453:	83 e8 02             	sub    eax,0x2
c0019456:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001945d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019464:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001946b:	89 d0                	mov    eax,edx
c001946d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019470:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019474:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0019478:	8d 4a 01             	lea    ecx,[edx+0x1]
c001947b:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019480:	0f b6 c9             	movzx  ecx,cl
c0019483:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001948a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001948d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019491:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0019495:	8d 50 02             	lea    edx,[eax+0x2]
c0019498:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001949d:	0f b6 d2             	movzx  edx,dl
c00194a0:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00194a6:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00194a9:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00194ad:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00194b1:	8d 48 03             	lea    ecx,[eax+0x3]
c00194b4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00194b9:	0f b6 c9             	movzx  ecx,cl
c00194bc:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00194c2:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00194c5:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00194c9:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00194cd:	8d 50 04             	lea    edx,[eax+0x4]
c00194d0:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00194d6:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00194db:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00194e2:	66 85 f6             	test   si,si
c00194e5:	74 5b                	je     c0019542 <IDE::open(int, int, void*)+0x31e>
c00194e7:	0f b6 d2             	movzx  edx,dl
c00194ea:	83 c0 05             	add    eax,0x5
c00194ed:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00194f0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00194f4:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00194f8:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00194fe:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019503:	eb 3d                	jmp    c0019542 <IDE::open(int, int, void*)+0x31e>
c0019505:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001950b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0019512:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0019519:	66 05 06 02          	add    ax,0x206
c001951d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019524:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001952b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0019532:	66 05 06 02          	add    ax,0x206
c0019536:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001953d:	e9 e5 fe ff ff       	jmp    c0019427 <IDE::open(int, int, void*)+0x203>
c0019542:	50                   	push   eax
c0019543:	50                   	push   eax
c0019544:	6a 00                	push   0x0
c0019546:	53                   	push   ebx
c0019547:	e8 5e fa ff ff       	call   c0018faa <IDE::prepareInterrupt(unsigned char)>
c001954c:	5a                   	pop    edx
c001954d:	59                   	pop    ecx
c001954e:	6a 01                	push   0x1
c0019550:	53                   	push   ebx
c0019551:	e8 54 fa ff ff       	call   c0018faa <IDE::prepareInterrupt(unsigned char)>
c0019556:	83 c4 0c             	add    esp,0xc
c0019559:	6a 00                	push   0x0
c001955b:	6a 00                	push   0x0
c001955d:	53                   	push   ebx
c001955e:	e8 7b fc ff ff       	call   c00191de <IDE::enableIRQs(unsigned char, bool)>
c0019563:	83 c4 0c             	add    esp,0xc
c0019566:	6a 00                	push   0x0
c0019568:	6a 01                	push   0x1
c001956a:	53                   	push   ebx
c001956b:	e8 6e fc ff ff       	call   c00191de <IDE::enableIRQs(unsigned char, bool)>
c0019570:	83 c4 10             	add    esp,0x10
c0019573:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001957a:	74 34                	je     c00195b0 <IDE::open(int, int, void*)+0x38c>
c001957c:	83 ec 0c             	sub    esp,0xc
c001957f:	53                   	push   ebx
c0019580:	6a 01                	push   0x1
c0019582:	68 a6 91 01 c0       	push   0xc00191a6
c0019587:	6a 0e                	push   0xe
c0019589:	53                   	push   ebx
c001958a:	e8 89 23 ff ff       	call   c000b918 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001958f:	83 c4 14             	add    esp,0x14
c0019592:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0019598:	53                   	push   ebx
c0019599:	6a 01                	push   0x1
c001959b:	68 c2 91 01 c0       	push   0xc00191c2
c00195a0:	6a 0f                	push   0xf
c00195a2:	53                   	push   ebx
c00195a3:	e8 70 23 ff ff       	call   c000b918 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00195a8:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00195ae:	eb 38                	jmp    c00195e8 <IDE::open(int, int, void*)+0x3c4>
c00195b0:	83 ec 0c             	sub    esp,0xc
c00195b3:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00195bd:	53                   	push   ebx
c00195be:	6a 00                	push   0x0
c00195c0:	68 a6 91 01 c0       	push   0xc00191a6
c00195c5:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00195cb:	53                   	push   ebx
c00195cc:	e8 47 23 ff ff       	call   c000b918 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00195d1:	83 c4 14             	add    esp,0x14
c00195d4:	53                   	push   ebx
c00195d5:	6a 00                	push   0x0
c00195d7:	68 c2 91 01 c0       	push   0xc00191c2
c00195dc:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00195e2:	53                   	push   ebx
c00195e3:	e8 30 23 ff ff       	call   c000b918 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00195e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00195ea:	83 c4 20             	add    esp,0x20
c00195ed:	83 ec 0c             	sub    esp,0xc
c00195f0:	53                   	push   ebx
c00195f1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00195f4:	83 c4 0c             	add    esp,0xc
c00195f7:	6a 07                	push   0x7
c00195f9:	6a 00                	push   0x0
c00195fb:	53                   	push   ebx
c00195fc:	e8 8f fa ff ff       	call   c0019090 <IDE::read(unsigned char, unsigned char)>
c0019601:	83 c4 0c             	add    esp,0xc
c0019604:	6a 07                	push   0x7
c0019606:	6a 01                	push   0x1
c0019608:	53                   	push   ebx
c0019609:	e8 82 fa ff ff       	call   c0019090 <IDE::read(unsigned char, unsigned char)>
c001960e:	83 c4 0c             	add    esp,0xc
c0019611:	6a 01                	push   0x1
c0019613:	6a 00                	push   0x0
c0019615:	53                   	push   ebx
c0019616:	e8 c3 fb ff ff       	call   c00191de <IDE::enableIRQs(unsigned char, bool)>
c001961b:	83 c4 0c             	add    esp,0xc
c001961e:	6a 01                	push   0x1
c0019620:	6a 01                	push   0x1
c0019622:	53                   	push   ebx
c0019623:	e8 b6 fb ff ff       	call   c00191de <IDE::enableIRQs(unsigned char, bool)>
c0019628:	83 c4 2c             	add    esp,0x2c
c001962b:	31 c0                	xor    eax,eax
c001962d:	5b                   	pop    ebx
c001962e:	5e                   	pop    esi
c001962f:	5f                   	pop    edi
c0019630:	5d                   	pop    ebp
c0019631:	c3                   	ret    

c0019632 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0019632:	55                   	push   ebp
c0019633:	57                   	push   edi
c0019634:	56                   	push   esi
c0019635:	53                   	push   ebx
c0019636:	83 ec 1c             	sub    esp,0x1c
c0019639:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001963d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019641:	8d 50 f8             	lea    edx,[eax-0x8]
c0019644:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019648:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001964c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0019650:	80 fa 03             	cmp    dl,0x3
c0019653:	77 5d                	ja     c00196b2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0019655:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019659:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001965d:	0f b6 db             	movzx  ebx,bl
c0019660:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0019663:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0019667:	83 ca 80             	or     edx,0xffffff80
c001966a:	0f b6 d2             	movzx  edx,dl
c001966d:	52                   	push   edx
c001966e:	6a 0c                	push   0xc
c0019670:	53                   	push   ebx
c0019671:	56                   	push   esi
c0019672:	e8 59 f9 ff ff       	call   c0018fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019677:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001967c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019680:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019684:	0f b6 c0             	movzx  eax,al
c0019687:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001968b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001968d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0019692:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0019696:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001969a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001969e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00196a6:	83 c4 2c             	add    esp,0x2c
c00196a9:	5b                   	pop    ebx
c00196aa:	5e                   	pop    esi
c00196ab:	5f                   	pop    edi
c00196ac:	5d                   	pop    ebp
c00196ad:	e9 1e f9 ff ff       	jmp    c0018fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00196b2:	3c 07                	cmp    al,0x7
c00196b4:	77 10                	ja     c00196c6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00196b6:	0f b6 db             	movzx  ebx,bl
c00196b9:	0f b6 d0             	movzx  edx,al
c00196bc:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00196c4:	eb 2d                	jmp    c00196f3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00196c6:	3c 0d                	cmp    al,0xd
c00196c8:	77 13                	ja     c00196dd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00196ca:	0f b6 db             	movzx  ebx,bl
c00196cd:	0f b6 c0             	movzx  eax,al
c00196d0:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00196d7:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00196db:	eb 16                	jmp    c00196f3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00196dd:	3c 15                	cmp    al,0x15
c00196df:	77 14                	ja     c00196f5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00196e1:	0f b6 db             	movzx  ebx,bl
c00196e4:	0f b6 c0             	movzx  eax,al
c00196e7:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00196ef:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00196f3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00196f5:	83 c4 1c             	add    esp,0x1c
c00196f8:	5b                   	pop    ebx
c00196f9:	5e                   	pop    esi
c00196fa:	5f                   	pop    edi
c00196fb:	5d                   	pop    ebp
c00196fc:	c3                   	ret    
c00196fd:	90                   	nop

c00196fe <IDE::detect()>:
c00196fe:	55                   	push   ebp
c00196ff:	57                   	push   edi
c0019700:	56                   	push   esi
c0019701:	53                   	push   ebx
c0019702:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019708:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001970f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0019716:	0f 85 97 02 00 00    	jne    c00199b3 <IDE::detect()+0x2b5>
c001971c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0019723:	31 f6                	xor    esi,esi
c0019725:	31 ed                	xor    ebp,ebp
c0019727:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001972f:	89 e8                	mov    eax,ebp
c0019731:	c1 e0 06             	shl    eax,0x6
c0019734:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001973c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019740:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019744:	c1 e0 04             	shl    eax,0x4
c0019747:	83 c8 a0             	or     eax,0xffffffa0
c001974a:	0f b6 c0             	movzx  eax,al
c001974d:	50                   	push   eax
c001974e:	6a 06                	push   0x6
c0019750:	56                   	push   esi
c0019751:	53                   	push   ebx
c0019752:	e8 79 f8 ff ff       	call   c0018fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019757:	83 c4 0c             	add    esp,0xc
c001975a:	6a 0c                	push   0xc
c001975c:	56                   	push   esi
c001975d:	53                   	push   ebx
c001975e:	e8 2d f9 ff ff       	call   c0019090 <IDE::read(unsigned char, unsigned char)>
c0019763:	83 c4 0c             	add    esp,0xc
c0019766:	6a 0c                	push   0xc
c0019768:	56                   	push   esi
c0019769:	53                   	push   ebx
c001976a:	e8 21 f9 ff ff       	call   c0019090 <IDE::read(unsigned char, unsigned char)>
c001976f:	83 c4 0c             	add    esp,0xc
c0019772:	6a 0c                	push   0xc
c0019774:	56                   	push   esi
c0019775:	53                   	push   ebx
c0019776:	e8 15 f9 ff ff       	call   c0019090 <IDE::read(unsigned char, unsigned char)>
c001977b:	83 c4 0c             	add    esp,0xc
c001977e:	6a 0c                	push   0xc
c0019780:	56                   	push   esi
c0019781:	53                   	push   ebx
c0019782:	e8 09 f9 ff ff       	call   c0019090 <IDE::read(unsigned char, unsigned char)>
c0019787:	68 ec 00 00 00       	push   0xec
c001978c:	6a 07                	push   0x7
c001978e:	56                   	push   esi
c001978f:	53                   	push   ebx
c0019790:	e8 3b f8 ff ff       	call   c0018fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019795:	83 c4 1c             	add    esp,0x1c
c0019798:	6a 0c                	push   0xc
c001979a:	56                   	push   esi
c001979b:	53                   	push   ebx
c001979c:	e8 ef f8 ff ff       	call   c0019090 <IDE::read(unsigned char, unsigned char)>
c00197a1:	83 c4 0c             	add    esp,0xc
c00197a4:	6a 0c                	push   0xc
c00197a6:	56                   	push   esi
c00197a7:	53                   	push   ebx
c00197a8:	e8 e3 f8 ff ff       	call   c0019090 <IDE::read(unsigned char, unsigned char)>
c00197ad:	83 c4 0c             	add    esp,0xc
c00197b0:	6a 0c                	push   0xc
c00197b2:	56                   	push   esi
c00197b3:	53                   	push   ebx
c00197b4:	e8 d7 f8 ff ff       	call   c0019090 <IDE::read(unsigned char, unsigned char)>
c00197b9:	83 c4 0c             	add    esp,0xc
c00197bc:	6a 0c                	push   0xc
c00197be:	56                   	push   esi
c00197bf:	53                   	push   ebx
c00197c0:	e8 cb f8 ff ff       	call   c0019090 <IDE::read(unsigned char, unsigned char)>
c00197c5:	83 c4 0c             	add    esp,0xc
c00197c8:	6a 0c                	push   0xc
c00197ca:	56                   	push   esi
c00197cb:	53                   	push   ebx
c00197cc:	e8 bf f8 ff ff       	call   c0019090 <IDE::read(unsigned char, unsigned char)>
c00197d1:	83 c4 10             	add    esp,0x10
c00197d4:	84 c0                	test   al,al
c00197d6:	0f 84 5f 01 00 00    	je     c001993b <IDE::detect()+0x23d>
c00197dc:	31 ff                	xor    edi,edi
c00197de:	50                   	push   eax
c00197df:	6a 0c                	push   0xc
c00197e1:	56                   	push   esi
c00197e2:	53                   	push   ebx
c00197e3:	e8 a8 f8 ff ff       	call   c0019090 <IDE::read(unsigned char, unsigned char)>
c00197e8:	83 c4 10             	add    esp,0x10
c00197eb:	a8 01                	test   al,0x1
c00197ed:	0f 85 69 01 00 00    	jne    c001995c <IDE::detect()+0x25e>
c00197f3:	84 c0                	test   al,al
c00197f5:	78 04                	js     c00197fb <IDE::detect()+0xfd>
c00197f7:	a8 08                	test   al,0x8
c00197f9:	75 23                	jne    c001981e <IDE::detect()+0x120>
c00197fb:	47                   	inc    edi
c00197fc:	81 ff 17 01 00 00    	cmp    edi,0x117
c0019802:	7e da                	jle    c00197de <IDE::detect()+0xe0>
c0019804:	83 ec 0c             	sub    esp,0xc
c0019807:	6a 32                	push   0x32
c0019809:	e8 96 a2 ff ff       	call   c0013aa4 <milliTenthSleep(unsigned int)>
c001980e:	83 c4 10             	add    esp,0x10
c0019811:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0019817:	75 c5                	jne    c00197de <IDE::detect()+0xe0>
c0019819:	e9 3e 01 00 00       	jmp    c001995c <IDE::detect()+0x25e>
c001981e:	31 c9                	xor    ecx,ecx
c0019820:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0019824:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019828:	83 ec 0c             	sub    esp,0xc
c001982b:	68 80 00 00 00       	push   0x80
c0019830:	57                   	push   edi
c0019831:	6a 00                	push   0x0
c0019833:	56                   	push   esi
c0019834:	53                   	push   ebx
c0019835:	e8 f8 fd ff ff       	call   c0019632 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001983a:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001983f:	89 e8                	mov    eax,ebp
c0019841:	89 d1                	mov    ecx,edx
c0019843:	c1 e0 06             	shl    eax,0x6
c0019846:	01 d8                	add    eax,ebx
c0019848:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001984f:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0019856:	89 f2                	mov    edx,esi
c0019858:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001985e:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0019862:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0019868:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001986c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0019873:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001987b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0019882:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001988a:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0019890:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0019897:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001989d:	8d 54 24 58          	lea    edx,[esp+0x58]
c00198a1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00198a5:	83 c4 20             	add    esp,0x20
c00198a8:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00198ab:	83 c0 02             	add    eax,0x2
c00198ae:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00198b4:	83 c7 02             	add    edi,0x2
c00198b7:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00198ba:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00198c0:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00198c4:	75 e2                	jne    c00198a8 <IDE::detect()+0x1aa>
c00198c6:	89 e8                	mov    eax,ebp
c00198c8:	c1 e0 06             	shl    eax,0x6
c00198cb:	01 d8                	add    eax,ebx
c00198cd:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00198d3:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00198da:	66 c1 ea 09          	shr    dx,0x9
c00198de:	83 e2 01             	and    edx,0x1
c00198e1:	84 c9                	test   cl,cl
c00198e3:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00198e9:	75 22                	jne    c001990d <IDE::detect()+0x20f>
c00198eb:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c00198f2:	74 46                	je     c001993a <IDE::detect()+0x23c>
c00198f4:	83 ec 0c             	sub    esp,0xc
c00198f7:	68 7c 01 00 00       	push   0x17c
c00198fc:	e8 b8 de fe ff       	call   c00077b9 <malloc>
c0019901:	89 c7                	mov    edi,eax
c0019903:	89 04 24             	mov    DWORD PTR [esp],eax
c0019906:	e8 11 05 00 00       	call   c0019e1c <ATA::ATA()>
c001990b:	eb 17                	jmp    c0019924 <IDE::detect()+0x226>
c001990d:	83 ec 0c             	sub    esp,0xc
c0019910:	68 84 01 00 00       	push   0x184
c0019915:	e8 9f de fe ff       	call   c00077b9 <malloc>
c001991a:	89 c7                	mov    edi,eax
c001991c:	89 04 24             	mov    DWORD PTR [esp],eax
c001991f:	e8 f0 0a 00 00       	call   c001a414 <ATAPI::ATAPI()>
c0019924:	5a                   	pop    edx
c0019925:	59                   	pop    ecx
c0019926:	57                   	push   edi
c0019927:	53                   	push   ebx
c0019928:	e8 3f 20 ff ff       	call   c000b96c <Device::addChild(Device*)>
c001992d:	8b 07                	mov    eax,DWORD PTR [edi]
c001992f:	53                   	push   ebx
c0019930:	55                   	push   ebp
c0019931:	6a 00                	push   0x0
c0019933:	57                   	push   edi
c0019934:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019937:	83 c4 20             	add    esp,0x20
c001993a:	45                   	inc    ebp
c001993b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0019940:	74 0d                	je     c001994f <IDE::detect()+0x251>
c0019942:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001994a:	e9 e0 fd ff ff       	jmp    c001972f <IDE::detect()+0x31>
c001994f:	4e                   	dec    esi
c0019950:	74 61                	je     c00199b3 <IDE::detect()+0x2b5>
c0019952:	be 01 00 00 00       	mov    esi,0x1
c0019957:	e9 cb fd ff ff       	jmp    c0019727 <IDE::detect()+0x29>
c001995c:	50                   	push   eax
c001995d:	6a 04                	push   0x4
c001995f:	56                   	push   esi
c0019960:	53                   	push   ebx
c0019961:	e8 2a f7 ff ff       	call   c0019090 <IDE::read(unsigned char, unsigned char)>
c0019966:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001996a:	83 c4 0c             	add    esp,0xc
c001996d:	6a 05                	push   0x5
c001996f:	56                   	push   esi
c0019970:	53                   	push   ebx
c0019971:	e8 1a f7 ff ff       	call   c0019090 <IDE::read(unsigned char, unsigned char)>
c0019976:	83 c4 10             	add    esp,0x10
c0019979:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001997d:	80 fa 14             	cmp    dl,0x14
c0019980:	75 04                	jne    c0019986 <IDE::detect()+0x288>
c0019982:	3c eb                	cmp    al,0xeb
c0019984:	eb 07                	jmp    c001998d <IDE::detect()+0x28f>
c0019986:	3c 96                	cmp    al,0x96
c0019988:	75 b1                	jne    c001993b <IDE::detect()+0x23d>
c001998a:	80 fa 69             	cmp    dl,0x69
c001998d:	75 ac                	jne    c001993b <IDE::detect()+0x23d>
c001998f:	68 a1 00 00 00       	push   0xa1
c0019994:	6a 07                	push   0x7
c0019996:	56                   	push   esi
c0019997:	53                   	push   ebx
c0019998:	e8 33 f6 ff ff       	call   c0018fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001999d:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c00199a4:	e8 fb a0 ff ff       	call   c0013aa4 <milliTenthSleep(unsigned int)>
c00199a9:	83 c4 10             	add    esp,0x10
c00199ac:	b1 01                	mov    cl,0x1
c00199ae:	e9 6d fe ff ff       	jmp    c0019820 <IDE::detect()+0x122>
c00199b3:	81 c4 1c 02 00 00    	add    esp,0x21c
c00199b9:	5b                   	pop    ebx
c00199ba:	5e                   	pop    esi
c00199bb:	5f                   	pop    edi
c00199bc:	5d                   	pop    ebp
c00199bd:	c3                   	ret    

c00199be <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00199be:	55                   	push   ebp
c00199bf:	57                   	push   edi
c00199c0:	56                   	push   esi
c00199c1:	53                   	push   ebx
c00199c2:	83 ec 1c             	sub    esp,0x1c
c00199c5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00199c9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00199cd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00199d1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00199d5:	88 c3                	mov    bl,al
c00199d7:	84 c0                	test   al,al
c00199d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199dd:	0f 84 81 00 00 00    	je     c0019a64 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00199e3:	83 ec 0c             	sub    esp,0xc
c00199e6:	68 ab f3 01 c0       	push   0xc001f3ab
c00199eb:	e8 3d 0b ff ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c00199f0:	83 c4 10             	add    esp,0x10
c00199f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199f7:	3c 01                	cmp    al,0x1
c00199f9:	74 63                	je     c0019a5e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c00199fb:	3c 02                	cmp    al,0x2
c00199fd:	75 53                	jne    c0019a52 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c00199ff:	01 f6                	add    esi,esi
c0019a01:	09 ee                	or     esi,ebp
c0019a03:	50                   	push   eax
c0019a04:	89 f0                	mov    eax,esi
c0019a06:	6a 01                	push   0x1
c0019a08:	0f b6 f0             	movzx  esi,al
c0019a0b:	c1 e6 06             	shl    esi,0x6
c0019a0e:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0019a16:	50                   	push   eax
c0019a17:	57                   	push   edi
c0019a18:	e8 73 f6 ff ff       	call   c0019090 <IDE::read(unsigned char, unsigned char)>
c0019a1d:	83 c4 10             	add    esp,0x10
c0019a20:	a8 01                	test   al,0x1
c0019a22:	74 02                	je     c0019a26 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019a24:	b3 07                	mov    bl,0x7
c0019a26:	a8 02                	test   al,0x2
c0019a28:	74 02                	je     c0019a2c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0019a2a:	b3 03                	mov    bl,0x3
c0019a2c:	a8 04                	test   al,0x4
c0019a2e:	74 02                	je     c0019a32 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019a30:	b3 14                	mov    bl,0x14
c0019a32:	a8 08                	test   al,0x8
c0019a34:	74 02                	je     c0019a38 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0019a36:	b3 03                	mov    bl,0x3
c0019a38:	a8 10                	test   al,0x10
c0019a3a:	74 02                	je     c0019a3e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019a3c:	b3 15                	mov    bl,0x15
c0019a3e:	a8 20                	test   al,0x20
c0019a40:	74 02                	je     c0019a44 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019a42:	b3 03                	mov    bl,0x3
c0019a44:	a8 40                	test   al,0x40
c0019a46:	74 02                	je     c0019a4a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019a48:	b3 16                	mov    bl,0x16
c0019a4a:	84 c0                	test   al,al
c0019a4c:	79 16                	jns    c0019a64 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a4e:	b3 0d                	mov    bl,0xd
c0019a50:	eb 12                	jmp    c0019a64 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a52:	3c 03                	cmp    al,0x3
c0019a54:	74 0c                	je     c0019a62 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019a56:	3c 04                	cmp    al,0x4
c0019a58:	75 0a                	jne    c0019a64 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a5a:	b3 08                	mov    bl,0x8
c0019a5c:	eb 06                	jmp    c0019a64 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a5e:	b3 13                	mov    bl,0x13
c0019a60:	eb 02                	jmp    c0019a64 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a62:	b3 17                	mov    bl,0x17
c0019a64:	83 c4 1c             	add    esp,0x1c
c0019a67:	88 d8                	mov    al,bl
c0019a69:	5b                   	pop    ebx
c0019a6a:	5e                   	pop    esi
c0019a6b:	5f                   	pop    edi
c0019a6c:	5d                   	pop    ebp
c0019a6d:	c3                   	ret    

c0019a6e <IDE::polling(unsigned char, unsigned int)>:
c0019a6e:	55                   	push   ebp
c0019a6f:	bd 04 00 00 00       	mov    ebp,0x4
c0019a74:	57                   	push   edi
c0019a75:	56                   	push   esi
c0019a76:	53                   	push   ebx
c0019a77:	83 ec 0c             	sub    esp,0xc
c0019a7a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019a7e:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0019a82:	0f b6 f3             	movzx  esi,bl
c0019a85:	52                   	push   edx
c0019a86:	6a 0c                	push   0xc
c0019a88:	56                   	push   esi
c0019a89:	57                   	push   edi
c0019a8a:	e8 01 f6 ff ff       	call   c0019090 <IDE::read(unsigned char, unsigned char)>
c0019a8f:	83 c4 10             	add    esp,0x10
c0019a92:	4d                   	dec    ebp
c0019a93:	75 ed                	jne    c0019a82 <IDE::polling(unsigned char, unsigned int)+0x14>
c0019a95:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019a9a:	50                   	push   eax
c0019a9b:	6a 0c                	push   0xc
c0019a9d:	56                   	push   esi
c0019a9e:	57                   	push   edi
c0019a9f:	e8 ec f5 ff ff       	call   c0019090 <IDE::read(unsigned char, unsigned char)>
c0019aa4:	83 c4 10             	add    esp,0x10
c0019aa7:	a8 01                	test   al,0x1
c0019aa9:	75 17                	jne    c0019ac2 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019aab:	a8 20                	test   al,0x20
c0019aad:	75 0f                	jne    c0019abe <IDE::polling(unsigned char, unsigned int)+0x50>
c0019aaf:	4b                   	dec    ebx
c0019ab0:	74 10                	je     c0019ac2 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019ab2:	84 c0                	test   al,al
c0019ab4:	78 e4                	js     c0019a9a <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019ab6:	a8 08                	test   al,0x8
c0019ab8:	74 e0                	je     c0019a9a <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019aba:	31 c0                	xor    eax,eax
c0019abc:	eb 06                	jmp    c0019ac4 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019abe:	b0 01                	mov    al,0x1
c0019ac0:	eb 02                	jmp    c0019ac4 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019ac2:	b0 02                	mov    al,0x2
c0019ac4:	83 c4 0c             	add    esp,0xc
c0019ac7:	5b                   	pop    ebx
c0019ac8:	5e                   	pop    esi
c0019ac9:	5f                   	pop    edi
c0019aca:	5d                   	pop    ebp
c0019acb:	c3                   	ret    

c0019acc <SATABus::close(int, int, void*)>:
c0019acc:	31 c0                	xor    eax,eax
c0019ace:	c3                   	ret    
c0019acf:	90                   	nop

c0019ad0 <SATABus::detect()>:
c0019ad0:	c3                   	ret    
c0019ad1:	90                   	nop

c0019ad2 <SATABus::SATABus()>:
c0019ad2:	83 ec 0c             	sub    esp,0xc
c0019ad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ad9:	83 ec 08             	sub    esp,0x8
c0019adc:	68 e4 f3 01 c0       	push   0xc001f3e4
c0019ae1:	50                   	push   eax
c0019ae2:	e8 c9 21 ff ff       	call   c000bcb0 <HardDiskController::HardDiskController(char const*)>
c0019ae7:	83 c4 10             	add    esp,0x10
c0019aea:	ba 10 f4 01 c0       	mov    edx,0xc001f410
c0019aef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019af3:	89 10                	mov    DWORD PTR [eax],edx
c0019af5:	83 ec 0c             	sub    esp,0xc
c0019af8:	6a 50                	push   0x50
c0019afa:	e8 54 e0 fe ff       	call   c0007b53 <Phys::allocateContiguousPages(int)>
c0019aff:	83 c4 10             	add    esp,0x10
c0019b02:	89 c2                	mov    edx,eax
c0019b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b08:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019b0e:	83 ec 0c             	sub    esp,0xc
c0019b11:	6a 50                	push   0x50
c0019b13:	e8 6d f7 fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0019b18:	83 c4 10             	add    esp,0x10
c0019b1b:	89 c2                	mov    edx,eax
c0019b1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b21:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019b27:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c0019b2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b30:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019b36:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b3a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019b40:	83 ec 0c             	sub    esp,0xc
c0019b43:	6a 03                	push   0x3
c0019b45:	6a 50                	push   0x50
c0019b47:	51                   	push   ecx
c0019b48:	52                   	push   edx
c0019b49:	50                   	push   eax
c0019b4a:	e8 df 00 ff ff       	call   c0009c2e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019b4f:	83 c4 20             	add    esp,0x20
c0019b52:	90                   	nop
c0019b53:	83 c4 0c             	add    esp,0xc
c0019b56:	c3                   	ret    
c0019b57:	90                   	nop

c0019b58 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019b58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b5c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019b5f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019b62:	09 c2                	or     edx,eax
c0019b64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b68:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019b6e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019b70:	31 c0                	xor    eax,eax
c0019b72:	c1 e9 08             	shr    ecx,0x8
c0019b75:	83 e1 0f             	and    ecx,0xf
c0019b78:	39 c8                	cmp    eax,ecx
c0019b7a:	74 0a                	je     c0019b86 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019b7c:	f6 c2 01             	test   dl,0x1
c0019b7f:	74 08                	je     c0019b89 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019b81:	d1 ea                	shr    edx,1
c0019b83:	40                   	inc    eax
c0019b84:	eb f2                	jmp    c0019b78 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019b86:	83 c8 ff             	or     eax,0xffffffff
c0019b89:	c3                   	ret    

c0019b8a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019b8a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019b8e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019b91:	89 c2                	mov    edx,eax
c0019b93:	c1 ea 08             	shr    edx,0x8
c0019b96:	83 e2 0f             	and    edx,0xf
c0019b99:	fe ca                	dec    dl
c0019b9b:	75 31                	jne    c0019bce <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019b9d:	83 e0 0f             	and    eax,0xf
c0019ba0:	3c 03                	cmp    al,0x3
c0019ba2:	75 2a                	jne    c0019bce <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019ba4:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019ba7:	b8 02 00 00 00       	mov    eax,0x2
c0019bac:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019bb2:	74 1c                	je     c0019bd0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019bb4:	b8 04 00 00 00       	mov    eax,0x4
c0019bb9:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019bbf:	74 0f                	je     c0019bd0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019bc1:	31 c0                	xor    eax,eax
c0019bc3:	83 fa 03             	cmp    edx,0x3
c0019bc6:	0f 94 c0             	sete   al
c0019bc9:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019bcd:	c3                   	ret    
c0019bce:	31 c0                	xor    eax,eax
c0019bd0:	c3                   	ret    
c0019bd1:	90                   	nop

c0019bd2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019bd2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bd6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019bd9:	0f ba e2 0f          	bt     edx,0xf
c0019bdd:	72 f7                	jb     c0019bd6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019bdf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019be2:	83 ca 10             	or     edx,0x10
c0019be5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019be8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019beb:	83 ca 01             	or     edx,0x1
c0019bee:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019bf1:	c3                   	ret    

c0019bf2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019bf2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bf6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019bf9:	83 e2 fe             	and    edx,0xfffffffe
c0019bfc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019bff:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c02:	83 e2 ef             	and    edx,0xffffffef
c0019c05:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019c08:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c0b:	0f ba e2 0e          	bt     edx,0xe
c0019c0f:	72 f7                	jb     c0019c08 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019c11:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c14:	0f ba e2 0f          	bt     edx,0xf
c0019c18:	72 ee                	jb     c0019c08 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019c1a:	c3                   	ret    
c0019c1b:	90                   	nop

c0019c1c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019c1c:	55                   	push   ebp
c0019c1d:	57                   	push   edi
c0019c1e:	56                   	push   esi
c0019c1f:	53                   	push   ebx
c0019c20:	83 ec 1c             	sub    esp,0x1c
c0019c23:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019c27:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019c2b:	53                   	push   ebx
c0019c2c:	56                   	push   esi
c0019c2d:	e8 c0 ff ff ff       	call   c0019bf2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019c32:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019c36:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019c3c:	83 ec 0c             	sub    esp,0xc
c0019c3f:	c1 e5 0a             	shl    ebp,0xa
c0019c42:	01 e8                	add    eax,ebp
c0019c44:	89 03                	mov    DWORD PTR [ebx],eax
c0019c46:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c48:	68 00 04 00 00       	push   0x400
c0019c4d:	6a 00                	push   0x0
c0019c4f:	50                   	push   eax
c0019c50:	e8 7b 68 fe ff       	call   c00004d0 <memset>
c0019c55:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019c5b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019c5f:	01 e8                	add    eax,ebp
c0019c61:	83 c4 1c             	add    esp,0x1c
c0019c64:	89 03                	mov    DWORD PTR [ebx],eax
c0019c66:	c1 e2 08             	shl    edx,0x8
c0019c69:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019c70:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019c76:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019c7c:	01 f8                	add    eax,edi
c0019c7e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019c81:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019c84:	68 00 01 00 00       	push   0x100
c0019c89:	6a 00                	push   0x0
c0019c8b:	50                   	push   eax
c0019c8c:	e8 3f 68 fe ff       	call   c00004d0 <memset>
c0019c91:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019c97:	01 fa                	add    edx,edi
c0019c99:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019c9d:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019ca0:	c1 e7 0d             	shl    edi,0xd
c0019ca3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019caa:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019cb0:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019cb6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019cba:	31 ff                	xor    edi,edi
c0019cbc:	83 c4 10             	add    esp,0x10
c0019cbf:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019cc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019cc9:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019ccf:	83 c5 20             	add    ebp,0x20
c0019cd2:	01 f8                	add    eax,edi
c0019cd4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019cd7:	52                   	push   edx
c0019cd8:	68 00 01 00 00       	push   0x100
c0019cdd:	6a 00                	push   0x0
c0019cdf:	50                   	push   eax
c0019ce0:	e8 eb 67 fe ff       	call   c00004d0 <memset>
c0019ce5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019ce9:	83 c4 10             	add    esp,0x10
c0019cec:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019cf2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019cf9:	01 f8                	add    eax,edi
c0019cfb:	81 c7 00 01 00 00    	add    edi,0x100
c0019d01:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019d04:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019d0a:	75 b3                	jne    c0019cbf <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019d0c:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019d13:	50                   	push   eax
c0019d14:	50                   	push   eax
c0019d15:	53                   	push   ebx
c0019d16:	56                   	push   esi
c0019d17:	e8 b6 fe ff ff       	call   c0019bd2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019d1c:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019d23:	83 c4 2c             	add    esp,0x2c
c0019d26:	5b                   	pop    ebx
c0019d27:	5e                   	pop    esi
c0019d28:	5f                   	pop    edi
c0019d29:	5d                   	pop    ebp
c0019d2a:	c3                   	ret    
c0019d2b:	90                   	nop

c0019d2c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019d2c:	55                   	push   ebp
c0019d2d:	57                   	push   edi
c0019d2e:	56                   	push   esi
c0019d2f:	53                   	push   ebx
c0019d30:	31 db                	xor    ebx,ebx
c0019d32:	83 ec 0c             	sub    esp,0xc
c0019d35:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019d39:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019d3d:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019d40:	f7 c7 01 00 00 00    	test   edi,0x1
c0019d46:	74 7a                	je     c0019dc2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019d48:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019d4c:	89 d8                	mov    eax,ebx
c0019d4e:	c1 e0 07             	shl    eax,0x7
c0019d51:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019d58:	55                   	push   ebp
c0019d59:	56                   	push   esi
c0019d5a:	e8 2b fe ff ff       	call   c0019b8a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019d5f:	5a                   	pop    edx
c0019d60:	83 f8 01             	cmp    eax,0x1
c0019d63:	59                   	pop    ecx
c0019d64:	75 21                	jne    c0019d87 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019d66:	50                   	push   eax
c0019d67:	53                   	push   ebx
c0019d68:	55                   	push   ebp
c0019d69:	56                   	push   esi
c0019d6a:	e8 ad fe ff ff       	call   c0019c1c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019d6f:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019d76:	e8 3e da fe ff       	call   c00077b9 <malloc>
c0019d7b:	89 c5                	mov    ebp,eax
c0019d7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d80:	e8 43 0d 00 00       	call   c001aac8 <SATA::SATA()>
c0019d85:	eb 24                	jmp    c0019dab <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019d87:	83 f8 04             	cmp    eax,0x4
c0019d8a:	75 36                	jne    c0019dc2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019d8c:	51                   	push   ecx
c0019d8d:	53                   	push   ebx
c0019d8e:	55                   	push   ebp
c0019d8f:	56                   	push   esi
c0019d90:	e8 87 fe ff ff       	call   c0019c1c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019d95:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019d9c:	e8 18 da fe ff       	call   c00077b9 <malloc>
c0019da1:	89 c5                	mov    ebp,eax
c0019da3:	89 04 24             	mov    DWORD PTR [esp],eax
c0019da6:	e8 79 10 00 00       	call   c001ae24 <SATAPI::SATAPI()>
c0019dab:	58                   	pop    eax
c0019dac:	5a                   	pop    edx
c0019dad:	55                   	push   ebp
c0019dae:	56                   	push   esi
c0019daf:	e8 b8 1b ff ff       	call   c000b96c <Device::addChild(Device*)>
c0019db4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019db7:	56                   	push   esi
c0019db8:	6a 00                	push   0x0
c0019dba:	53                   	push   ebx
c0019dbb:	55                   	push   ebp
c0019dbc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019dbf:	83 c4 20             	add    esp,0x20
c0019dc2:	d1 ef                	shr    edi,1
c0019dc4:	43                   	inc    ebx
c0019dc5:	83 fb 20             	cmp    ebx,0x20
c0019dc8:	0f 85 72 ff ff ff    	jne    c0019d40 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019dce:	83 c4 0c             	add    esp,0xc
c0019dd1:	5b                   	pop    ebx
c0019dd2:	5e                   	pop    esi
c0019dd3:	5f                   	pop    edi
c0019dd4:	5d                   	pop    ebp
c0019dd5:	c3                   	ret    

c0019dd6 <SATABus::open(int, int, void*)>:
c0019dd6:	83 ec 14             	sub    esp,0x14
c0019dd9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019ddd:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019de3:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019de9:	52                   	push   edx
c0019dea:	50                   	push   eax
c0019deb:	e8 3c ff ff ff       	call   c0019d2c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019df0:	31 c0                	xor    eax,eax
c0019df2:	83 c4 1c             	add    esp,0x1c
c0019df5:	c3                   	ret    

c0019df6 <ATA::close(int, int, void*)>:
c0019df6:	83 ec 0c             	sub    esp,0xc
c0019df9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019dfd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019e03:	85 c0                	test   eax,eax
c0019e05:	74 0c                	je     c0019e13 <ATA::close(int, int, void*)+0x1d>
c0019e07:	83 ec 0c             	sub    esp,0xc
c0019e0a:	8b 10                	mov    edx,DWORD PTR [eax]
c0019e0c:	50                   	push   eax
c0019e0d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019e10:	83 c4 10             	add    esp,0x10
c0019e13:	31 c0                	xor    eax,eax
c0019e15:	83 c4 0c             	add    esp,0xc
c0019e18:	c3                   	ret    
c0019e19:	90                   	nop

c0019e1a <ATA::powerSaving(PowerSavingLevel)>:
c0019e1a:	c3                   	ret    
c0019e1b:	90                   	nop

c0019e1c <ATA::ATA()>:
c0019e1c:	83 ec 0c             	sub    esp,0xc
c0019e1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e23:	83 ec 04             	sub    esp,0x4
c0019e26:	68 00 02 00 00       	push   0x200
c0019e2b:	68 dd f4 01 c0       	push   0xc001f4dd
c0019e30:	50                   	push   eax
c0019e31:	e8 04 1f ff ff       	call   c000bd3a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019e36:	83 c4 10             	add    esp,0x10
c0019e39:	ba 50 f4 01 c0       	mov    edx,0xc001f450
c0019e3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e42:	89 10                	mov    DWORD PTR [eax],edx
c0019e44:	90                   	nop
c0019e45:	83 c4 0c             	add    esp,0xc
c0019e48:	c3                   	ret    
c0019e49:	90                   	nop

c0019e4a <ATA::flush(bool)>:
c0019e4a:	53                   	push   ebx
c0019e4b:	83 ec 08             	sub    esp,0x8
c0019e4e:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019e53:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e57:	19 c0                	sbb    eax,eax
c0019e59:	83 e0 fd             	and    eax,0xfffffffd
c0019e5c:	05 ea 00 00 00       	add    eax,0xea
c0019e61:	50                   	push   eax
c0019e62:	6a 07                	push   0x7
c0019e64:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019e6b:	50                   	push   eax
c0019e6c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019e72:	e8 59 f1 ff ff       	call   c0018fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019e77:	83 c4 0c             	add    esp,0xc
c0019e7a:	6a 00                	push   0x0
c0019e7c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019e83:	50                   	push   eax
c0019e84:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019e8a:	e8 df fb ff ff       	call   c0019a6e <IDE::polling(unsigned char, unsigned int)>
c0019e8f:	83 c4 18             	add    esp,0x18
c0019e92:	5b                   	pop    ebx
c0019e93:	c3                   	ret    

c0019e94 <ATA::readyForCommand()>:
c0019e94:	56                   	push   esi
c0019e95:	53                   	push   ebx
c0019e96:	53                   	push   ebx
c0019e97:	31 db                	xor    ebx,ebx
c0019e99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019e9d:	51                   	push   ecx
c0019e9e:	6a 0c                	push   0xc
c0019ea0:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019ea7:	50                   	push   eax
c0019ea8:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019eae:	e8 dd f1 ff ff       	call   c0019090 <IDE::read(unsigned char, unsigned char)>
c0019eb3:	83 c4 10             	add    esp,0x10
c0019eb6:	a8 88                	test   al,0x88
c0019eb8:	74 1f                	je     c0019ed9 <ATA::readyForCommand()+0x45>
c0019eba:	43                   	inc    ebx
c0019ebb:	83 fb 63             	cmp    ebx,0x63
c0019ebe:	7e dd                	jle    c0019e9d <ATA::readyForCommand()+0x9>
c0019ec0:	83 ec 0c             	sub    esp,0xc
c0019ec3:	6a 0a                	push   0xa
c0019ec5:	e8 da 9b ff ff       	call   c0013aa4 <milliTenthSleep(unsigned int)>
c0019eca:	83 c4 10             	add    esp,0x10
c0019ecd:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0019ed3:	75 c8                	jne    c0019e9d <ATA::readyForCommand()+0x9>
c0019ed5:	31 c0                	xor    eax,eax
c0019ed7:	eb 02                	jmp    c0019edb <ATA::readyForCommand()+0x47>
c0019ed9:	b0 01                	mov    al,0x1
c0019edb:	5a                   	pop    edx
c0019edc:	5b                   	pop    ebx
c0019edd:	5e                   	pop    esi
c0019ede:	c3                   	ret    
c0019edf:	90                   	nop

c0019ee0 <ATA::access(unsigned long long, int, void*, bool)>:
c0019ee0:	55                   	push   ebp
c0019ee1:	57                   	push   edi
c0019ee2:	56                   	push   esi
c0019ee3:	53                   	push   ebx
c0019ee4:	83 ec 2c             	sub    esp,0x2c
c0019ee7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019eeb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0019eef:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019ef3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019ef7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019efb:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019eff:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019f03:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019f09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f0d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019f13:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019f17:	c1 e0 06             	shl    eax,0x6
c0019f1a:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0019f22:	74 5d                	je     c0019f81 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0019f24:	89 fa                	mov    edx,edi
c0019f26:	89 f0                	mov    eax,esi
c0019f28:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0019f2c:	c1 ea 1c             	shr    edx,0x1c
c0019f2f:	89 d1                	mov    ecx,edx
c0019f31:	09 c1                	or     ecx,eax
c0019f33:	74 25                	je     c0019f5a <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0019f35:	31 ed                	xor    ebp,ebp
c0019f37:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0019f3e:	89 fa                	mov    edx,edi
c0019f40:	89 f0                	mov    eax,esi
c0019f42:	0f ad d0             	shrd   eax,edx,cl
c0019f45:	d3 ea                	shr    edx,cl
c0019f47:	f6 c1 20             	test   cl,0x20
c0019f4a:	74 02                	je     c0019f4e <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0019f4c:	89 d0                	mov    eax,edx
c0019f4e:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0019f52:	45                   	inc    ebp
c0019f53:	83 fd 06             	cmp    ebp,0x6
c0019f56:	75 df                	jne    c0019f37 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0019f58:	eb 76                	jmp    c0019fd0 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0019f5a:	89 f0                	mov    eax,esi
c0019f5c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0019f61:	89 fa                	mov    edx,edi
c0019f63:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019f6a:	0f ac d0 10          	shrd   eax,edx,0x10
c0019f6e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019f73:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019f77:	c1 ee 18             	shr    esi,0x18
c0019f7a:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0019f7f:	eb 56                	jmp    c0019fd7 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019f81:	6a 00                	push   0x0
c0019f83:	6a 3f                	push   0x3f
c0019f85:	57                   	push   edi
c0019f86:	56                   	push   esi
c0019f87:	e8 74 22 00 00       	call   c001c200 <__umoddi3>
c0019f8c:	83 c4 10             	add    esp,0x10
c0019f8f:	40                   	inc    eax
c0019f90:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0019f94:	6a 00                	push   0x0
c0019f96:	68 f0 03 00 00       	push   0x3f0
c0019f9b:	57                   	push   edi
c0019f9c:	56                   	push   esi
c0019f9d:	e8 5e 21 00 00       	call   c001c100 <__udivdi3>
c0019fa2:	83 c4 10             	add    esp,0x10
c0019fa5:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0019faa:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019fb1:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019fb6:	6a 00                	push   0x0
c0019fb8:	6a 3f                	push   0x3f
c0019fba:	57                   	push   edi
c0019fbb:	56                   	push   esi
c0019fbc:	e8 3f 21 00 00       	call   c001c100 <__udivdi3>
c0019fc1:	83 c4 10             	add    esp,0x10
c0019fc4:	89 c6                	mov    esi,eax
c0019fc6:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0019fcb:	83 e6 0f             	and    esi,0xf
c0019fce:	eb 07                	jmp    c0019fd7 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019fd0:	31 f6                	xor    esi,esi
c0019fd2:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0019fd7:	bf 01 00 00 00       	mov    edi,0x1
c0019fdc:	50                   	push   eax
c0019fdd:	6a 00                	push   0x0
c0019fdf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019fe6:	50                   	push   eax
c0019fe7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019feb:	e8 ee f1 ff ff       	call   c00191de <IDE::enableIRQs(unsigned char, bool)>
c0019ff0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ff3:	e8 9c fe ff ff       	call   c0019e94 <ATA::readyForCommand()>
c0019ff8:	83 c4 10             	add    esp,0x10
c0019ffb:	84 c0                	test   al,al
c0019ffd:	0f 84 4e 02 00 00    	je     c001a251 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a003:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a009:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a00f:	c1 e0 04             	shl    eax,0x4
c001a012:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001a019:	09 c6                	or     esi,eax
c001a01b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001a020:	75 05                	jne    c001a027 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001a022:	83 ce a0             	or     esi,0xffffffa0
c001a025:	eb 03                	jmp    c001a02a <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001a027:	83 ce e0             	or     esi,0xffffffe0
c001a02a:	89 f0                	mov    eax,esi
c001a02c:	0f b6 f0             	movzx  esi,al
c001a02f:	56                   	push   esi
c001a030:	6a 06                	push   0x6
c001a032:	51                   	push   ecx
c001a033:	52                   	push   edx
c001a034:	e8 97 ef ff ff       	call   c0018fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a039:	83 c4 10             	add    esp,0x10
c001a03c:	6a 00                	push   0x0
c001a03e:	6a 01                	push   0x1
c001a040:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a047:	50                   	push   eax
c001a048:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a04e:	e8 7d ef ff ff       	call   c0018fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a053:	83 c4 10             	add    esp,0x10
c001a056:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a05b:	75 6e                	jne    c001a0cb <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001a05d:	6a 00                	push   0x0
c001a05f:	6a 08                	push   0x8
c001a061:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a068:	50                   	push   eax
c001a069:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a06f:	e8 5c ef ff ff       	call   c0018fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a074:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001a079:	50                   	push   eax
c001a07a:	6a 09                	push   0x9
c001a07c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a083:	50                   	push   eax
c001a084:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a08a:	e8 41 ef ff ff       	call   c0018fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a08f:	83 c4 20             	add    esp,0x20
c001a092:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001a097:	50                   	push   eax
c001a098:	6a 0a                	push   0xa
c001a09a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0a1:	50                   	push   eax
c001a0a2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0a8:	e8 23 ef ff ff       	call   c0018fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0ad:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001a0b2:	50                   	push   eax
c001a0b3:	6a 0b                	push   0xb
c001a0b5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0bc:	50                   	push   eax
c001a0bd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0c3:	e8 08 ef ff ff       	call   c0018fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0c8:	83 c4 20             	add    esp,0x20
c001a0cb:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001a0d0:	50                   	push   eax
c001a0d1:	6a 02                	push   0x2
c001a0d3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0da:	50                   	push   eax
c001a0db:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0e1:	e8 ea ee ff ff       	call   c0018fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0e6:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001a0eb:	50                   	push   eax
c001a0ec:	6a 03                	push   0x3
c001a0ee:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0f5:	50                   	push   eax
c001a0f6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0fc:	e8 cf ee ff ff       	call   c0018fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a101:	83 c4 20             	add    esp,0x20
c001a104:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001a109:	50                   	push   eax
c001a10a:	6a 04                	push   0x4
c001a10c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a113:	50                   	push   eax
c001a114:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a11a:	e8 b1 ee ff ff       	call   c0018fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a11f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a124:	50                   	push   eax
c001a125:	6a 05                	push   0x5
c001a127:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a12e:	50                   	push   eax
c001a12f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a135:	e8 96 ee ff ff       	call   c0018fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a13a:	83 c4 20             	add    esp,0x20
c001a13d:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a142:	0f 94 c0             	sete   al
c001a145:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a14a:	74 09                	je     c001a155 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001a14c:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001a153:	eb 07                	jmp    c001a15c <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001a155:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001a15c:	0f b6 c0             	movzx  eax,al
c001a15f:	50                   	push   eax
c001a160:	6a 07                	push   0x7
c001a162:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a169:	50                   	push   eax
c001a16a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a170:	e8 5b ee ff ff       	call   c0018fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a175:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a179:	83 c4 10             	add    esp,0x10
c001a17c:	85 f6                	test   esi,esi
c001a17e:	0f 84 ae 00 00 00    	je     c001a232 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001a184:	50                   	push   eax
c001a185:	6a 01                	push   0x1
c001a187:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a18e:	50                   	push   eax
c001a18f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a195:	e8 d4 f8 ff ff       	call   c0019a6e <IDE::polling(unsigned char, unsigned int)>
c001a19a:	83 c4 10             	add    esp,0x10
c001a19d:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a1a3:	84 c0                	test   al,al
c001a1a5:	74 20                	je     c001a1c7 <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001a1a7:	0f b6 f8             	movzx  edi,al
c001a1aa:	0f b6 d2             	movzx  edx,dl
c001a1ad:	57                   	push   edi
c001a1ae:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001a1b5:	50                   	push   eax
c001a1b6:	52                   	push   edx
c001a1b7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1bd:	e8 fc f7 ff ff       	call   c00199be <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a1c2:	e9 87 00 00 00       	jmp    c001a24e <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001a1c7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a1cc:	74 33                	je     c001a201 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001a1ce:	31 ed                	xor    ebp,ebp
c001a1d0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a1d4:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001a1d8:	50                   	push   eax
c001a1d9:	50                   	push   eax
c001a1da:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1e1:	50                   	push   eax
c001a1e2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1e8:	e8 d1 ed ff ff       	call   c0018fbe <IDE::getBase(unsigned char)>
c001a1ed:	89 c2                	mov    edx,eax
c001a1ef:	89 f8                	mov    eax,edi
c001a1f1:	66 ef                	out    dx,ax
c001a1f3:	45                   	inc    ebp
c001a1f4:	83 c4 10             	add    esp,0x10
c001a1f7:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001a1fd:	75 d1                	jne    c001a1d0 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001a1ff:	eb 23                	jmp    c001a224 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001a201:	0f b6 d2             	movzx  edx,dl
c001a204:	51                   	push   ecx
c001a205:	51                   	push   ecx
c001a206:	52                   	push   edx
c001a207:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a20d:	e8 ac ed ff ff       	call   c0018fbe <IDE::getBase(unsigned char)>
c001a212:	b9 00 01 00 00       	mov    ecx,0x100
c001a217:	89 c2                	mov    edx,eax
c001a219:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001a21d:	fc                   	cld    
c001a21e:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001a221:	83 c4 10             	add    esp,0x10
c001a224:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001a22c:	4e                   	dec    esi
c001a22d:	e9 4a ff ff ff       	jmp    c001a17c <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001a232:	31 ff                	xor    edi,edi
c001a234:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a239:	74 16                	je     c001a251 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a23b:	50                   	push   eax
c001a23c:	50                   	push   eax
c001a23d:	31 c0                	xor    eax,eax
c001a23f:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001a244:	0f 94 c0             	sete   al
c001a247:	50                   	push   eax
c001a248:	53                   	push   ebx
c001a249:	e8 fc fb ff ff       	call   c0019e4a <ATA::flush(bool)>
c001a24e:	83 c4 10             	add    esp,0x10
c001a251:	83 c4 2c             	add    esp,0x2c
c001a254:	89 f8                	mov    eax,edi
c001a256:	5b                   	pop    ebx
c001a257:	5e                   	pop    esi
c001a258:	5f                   	pop    edi
c001a259:	5d                   	pop    ebp
c001a25a:	c3                   	ret    
c001a25b:	90                   	nop

c001a25c <ATA::read(unsigned long long, int, void*)>:
c001a25c:	57                   	push   edi
c001a25d:	b8 04 00 00 00       	mov    eax,0x4
c001a262:	56                   	push   esi
c001a263:	53                   	push   ebx
c001a264:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a268:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a26c:	8d 7a ff             	lea    edi,[edx-0x1]
c001a26f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a273:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a277:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a27d:	77 25                	ja     c001a2a4 <ATA::read(unsigned long long, int, void*)+0x48>
c001a27f:	b8 06 00 00 00       	mov    eax,0x6
c001a284:	85 f6                	test   esi,esi
c001a286:	74 1c                	je     c001a2a4 <ATA::read(unsigned long long, int, void*)+0x48>
c001a288:	50                   	push   eax
c001a289:	50                   	push   eax
c001a28a:	6a 00                	push   0x0
c001a28c:	56                   	push   esi
c001a28d:	52                   	push   edx
c001a28e:	53                   	push   ebx
c001a28f:	51                   	push   ecx
c001a290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a294:	e8 47 fc ff ff       	call   c0019ee0 <ATA::access(unsigned long long, int, void*, bool)>
c001a299:	83 c4 20             	add    esp,0x20
c001a29c:	85 c0                	test   eax,eax
c001a29e:	0f 95 c0             	setne  al
c001a2a1:	0f b6 c0             	movzx  eax,al
c001a2a4:	5b                   	pop    ebx
c001a2a5:	5e                   	pop    esi
c001a2a6:	5f                   	pop    edi
c001a2a7:	c3                   	ret    

c001a2a8 <ATA::write(unsigned long long, int, void*)>:
c001a2a8:	57                   	push   edi
c001a2a9:	b8 04 00 00 00       	mov    eax,0x4
c001a2ae:	56                   	push   esi
c001a2af:	53                   	push   ebx
c001a2b0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a2b4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a2b8:	8d 7a ff             	lea    edi,[edx-0x1]
c001a2bb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a2bf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a2c3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a2c9:	77 25                	ja     c001a2f0 <ATA::write(unsigned long long, int, void*)+0x48>
c001a2cb:	b8 06 00 00 00       	mov    eax,0x6
c001a2d0:	85 f6                	test   esi,esi
c001a2d2:	74 1c                	je     c001a2f0 <ATA::write(unsigned long long, int, void*)+0x48>
c001a2d4:	50                   	push   eax
c001a2d5:	50                   	push   eax
c001a2d6:	6a 01                	push   0x1
c001a2d8:	56                   	push   esi
c001a2d9:	52                   	push   edx
c001a2da:	53                   	push   ebx
c001a2db:	51                   	push   ecx
c001a2dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a2e0:	e8 fb fb ff ff       	call   c0019ee0 <ATA::access(unsigned long long, int, void*, bool)>
c001a2e5:	83 c4 20             	add    esp,0x20
c001a2e8:	85 c0                	test   eax,eax
c001a2ea:	0f 95 c0             	setne  al
c001a2ed:	0f b6 c0             	movzx  eax,al
c001a2f0:	5b                   	pop    ebx
c001a2f1:	5e                   	pop    esi
c001a2f2:	5f                   	pop    edi
c001a2f3:	c3                   	ret    

c001a2f4 <ATA::detectCHS()>:
c001a2f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a2f8:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001a2fe:	c1 e0 06             	shl    eax,0x6
c001a301:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001a307:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001a311:	c7 44 24 04 34 f4 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f434
c001a319:	e9 91 5e ff ff       	jmp    c00101af <KePanic(char const*)>

c001a31e <ATA::open(int, int, void*)>:
c001a31e:	53                   	push   ebx
c001a31f:	83 ec 08             	sub    esp,0x8
c001a322:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a326:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a32a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a32e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a334:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a33a:	c1 e0 06             	shl    eax,0x6
c001a33d:	01 d0                	add    eax,edx
c001a33f:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001a346:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001a34c:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001a353:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a35d:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001a363:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a36a:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001a371:	75 0c                	jne    c001a37f <ATA::open(int, int, void*)+0x61>
c001a373:	83 ec 0c             	sub    esp,0xc
c001a376:	53                   	push   ebx
c001a377:	e8 78 ff ff ff       	call   c001a2f4 <ATA::detectCHS()>
c001a37c:	83 c4 10             	add    esp,0x10
c001a37f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a385:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a38b:	c1 e0 06             	shl    eax,0x6
c001a38e:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001a395:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a39f:	d1 e8                	shr    eax,1
c001a3a1:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001a3a7:	6a 04                	push   0x4
c001a3a9:	6a 0c                	push   0xc
c001a3ab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a3b2:	50                   	push   eax
c001a3b3:	52                   	push   edx
c001a3b4:	e8 17 ec ff ff       	call   c0018fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a3b9:	90                   	nop
c001a3ba:	90                   	nop
c001a3bb:	6a 00                	push   0x0
c001a3bd:	6a 0c                	push   0xc
c001a3bf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a3c6:	50                   	push   eax
c001a3c7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a3cd:	e8 fe eb ff ff       	call   c0018fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a3d2:	83 c4 14             	add    esp,0x14
c001a3d5:	53                   	push   ebx
c001a3d6:	e8 c7 19 ff ff       	call   c000bda2 <PhysicalDisk::startCache()>
c001a3db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a3de:	e8 77 2a ff ff       	call   c000ce5a <createPartitionsForDisk(PhysicalDisk*)>
c001a3e3:	31 c0                	xor    eax,eax
c001a3e5:	83 c4 18             	add    esp,0x18
c001a3e8:	5b                   	pop    ebx
c001a3e9:	c3                   	ret    

c001a3ea <ATAPI::write(unsigned long long, int, void*)>:
c001a3ea:	b8 03 00 00 00       	mov    eax,0x3
c001a3ef:	c3                   	ret    

c001a3f0 <ATAPI::close(int, int, void*)>:
c001a3f0:	83 ec 0c             	sub    esp,0xc
c001a3f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3f7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a3fd:	85 c0                	test   eax,eax
c001a3ff:	74 0c                	je     c001a40d <ATAPI::close(int, int, void*)+0x1d>
c001a401:	83 ec 0c             	sub    esp,0xc
c001a404:	8b 10                	mov    edx,DWORD PTR [eax]
c001a406:	50                   	push   eax
c001a407:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a40a:	83 c4 10             	add    esp,0x10
c001a40d:	31 c0                	xor    eax,eax
c001a40f:	83 c4 0c             	add    esp,0xc
c001a412:	c3                   	ret    
c001a413:	90                   	nop

c001a414 <ATAPI::ATAPI()>:
c001a414:	83 ec 0c             	sub    esp,0xc
c001a417:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a41b:	83 ec 04             	sub    esp,0x4
c001a41e:	68 00 08 00 00       	push   0x800
c001a423:	68 7d f5 01 c0       	push   0xc001f57d
c001a428:	50                   	push   eax
c001a429:	e8 0c 19 ff ff       	call   c000bd3a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a42e:	83 c4 10             	add    esp,0x10
c001a431:	ba 98 f4 01 c0       	mov    edx,0xc001f498
c001a436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a43a:	89 10                	mov    DWORD PTR [eax],edx
c001a43c:	90                   	nop
c001a43d:	83 c4 0c             	add    esp,0xc
c001a440:	c3                   	ret    
c001a441:	90                   	nop

c001a442 <ATAPI::readyForCommand()>:
c001a442:	56                   	push   esi
c001a443:	53                   	push   ebx
c001a444:	53                   	push   ebx
c001a445:	31 db                	xor    ebx,ebx
c001a447:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a44b:	51                   	push   ecx
c001a44c:	6a 0c                	push   0xc
c001a44e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a455:	50                   	push   eax
c001a456:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a45c:	e8 2f ec ff ff       	call   c0019090 <IDE::read(unsigned char, unsigned char)>
c001a461:	83 c4 10             	add    esp,0x10
c001a464:	a8 88                	test   al,0x88
c001a466:	74 25                	je     c001a48d <ATAPI::readyForCommand()+0x4b>
c001a468:	43                   	inc    ebx
c001a469:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a46f:	7e da                	jle    c001a44b <ATAPI::readyForCommand()+0x9>
c001a471:	83 ec 0c             	sub    esp,0xc
c001a474:	68 5e 01 00 00       	push   0x15e
c001a479:	e8 26 96 ff ff       	call   c0013aa4 <milliTenthSleep(unsigned int)>
c001a47e:	83 c4 10             	add    esp,0x10
c001a481:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a487:	75 c2                	jne    c001a44b <ATAPI::readyForCommand()+0x9>
c001a489:	31 c0                	xor    eax,eax
c001a48b:	eb 02                	jmp    c001a48f <ATAPI::readyForCommand()+0x4d>
c001a48d:	b0 01                	mov    al,0x1
c001a48f:	5a                   	pop    edx
c001a490:	5b                   	pop    ebx
c001a491:	5e                   	pop    esi
c001a492:	c3                   	ret    
c001a493:	90                   	nop

c001a494 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a494:	55                   	push   ebp
c001a495:	57                   	push   edi
c001a496:	56                   	push   esi
c001a497:	53                   	push   ebx
c001a498:	83 ec 20             	sub    esp,0x20
c001a49b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a49f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a4a3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a4a7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a4ab:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a4af:	6a 01                	push   0x1
c001a4b1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a4b8:	50                   	push   eax
c001a4b9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a4bf:	e8 1a ed ff ff       	call   c00191de <IDE::enableIRQs(unsigned char, bool)>
c001a4c4:	5e                   	pop    esi
c001a4c5:	58                   	pop    eax
c001a4c6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a4cd:	50                   	push   eax
c001a4ce:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a4d4:	e8 d1 ea ff ff       	call   c0018faa <IDE::prepareInterrupt(unsigned char)>
c001a4d9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a4dc:	e8 61 ff ff ff       	call   c001a442 <ATAPI::readyForCommand()>
c001a4e1:	83 c4 10             	add    esp,0x10
c001a4e4:	84 c0                	test   al,al
c001a4e6:	75 0a                	jne    c001a4f2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a4e8:	bb 01 00 00 00       	mov    ebx,0x1
c001a4ed:	e9 57 02 00 00       	jmp    c001a749 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a4f2:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a4f8:	c1 e0 04             	shl    eax,0x4
c001a4fb:	0f b6 c0             	movzx  eax,al
c001a4fe:	50                   	push   eax
c001a4ff:	6a 06                	push   0x6
c001a501:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a508:	50                   	push   eax
c001a509:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a50f:	e8 bc ea ff ff       	call   c0018fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a514:	6a 00                	push   0x0
c001a516:	6a 01                	push   0x1
c001a518:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a51f:	50                   	push   eax
c001a520:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a526:	e8 a5 ea ff ff       	call   c0018fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a52b:	83 c4 20             	add    esp,0x20
c001a52e:	0f b6 c3             	movzx  eax,bl
c001a531:	0f b6 df             	movzx  ebx,bh
c001a534:	50                   	push   eax
c001a535:	6a 04                	push   0x4
c001a537:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a53e:	50                   	push   eax
c001a53f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a545:	e8 86 ea ff ff       	call   c0018fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a54a:	53                   	push   ebx
c001a54b:	6a 05                	push   0x5
c001a54d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a554:	50                   	push   eax
c001a555:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a55b:	e8 70 ea ff ff       	call   c0018fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a560:	83 c4 20             	add    esp,0x20
c001a563:	68 a0 00 00 00       	push   0xa0
c001a568:	6a 07                	push   0x7
c001a56a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a571:	50                   	push   eax
c001a572:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a578:	e8 53 ea ff ff       	call   c0018fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a57d:	83 c4 0c             	add    esp,0xc
c001a580:	6a 01                	push   0x1
c001a582:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a589:	50                   	push   eax
c001a58a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a590:	e8 d9 f4 ff ff       	call   c0019a6e <IDE::polling(unsigned char, unsigned int)>
c001a595:	83 c4 10             	add    esp,0x10
c001a598:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a59e:	84 c0                	test   al,al
c001a5a0:	74 23                	je     c001a5c5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a5a2:	0f b6 d8             	movzx  ebx,al
c001a5a5:	0f b6 d2             	movzx  edx,dl
c001a5a8:	53                   	push   ebx
c001a5a9:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a5b0:	50                   	push   eax
c001a5b1:	52                   	push   edx
c001a5b2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5b8:	e8 01 f4 ff ff       	call   c00199be <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a5bd:	83 c4 10             	add    esp,0x10
c001a5c0:	e9 84 01 00 00       	jmp    c001a749 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a5c5:	0f b6 d2             	movzx  edx,dl
c001a5c8:	53                   	push   ebx
c001a5c9:	53                   	push   ebx
c001a5ca:	52                   	push   edx
c001a5cb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5d1:	e8 e8 e9 ff ff       	call   c0018fbe <IDE::getBase(unsigned char)>
c001a5d6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a5da:	b9 06 00 00 00       	mov    ecx,0x6
c001a5df:	89 c2                	mov    edx,eax
c001a5e1:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a5e4:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a5e8:	83 c4 10             	add    esp,0x10
c001a5eb:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a5f1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a5f8:	85 db                	test   ebx,ebx
c001a5fa:	0f 84 ec 00 00 00    	je     c001a6ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a600:	51                   	push   ecx
c001a601:	51                   	push   ecx
c001a602:	52                   	push   edx
c001a603:	50                   	push   eax
c001a604:	e8 35 eb ff ff       	call   c001913e <IDE::waitInterrupt(unsigned char)>
c001a609:	83 c4 10             	add    esp,0x10
c001a60c:	84 c0                	test   al,al
c001a60e:	0f 84 d4 fe ff ff    	je     c001a4e8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a614:	56                   	push   esi
c001a615:	56                   	push   esi
c001a616:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a61d:	50                   	push   eax
c001a61e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a624:	e8 81 e9 ff ff       	call   c0018faa <IDE::prepareInterrupt(unsigned char)>
c001a629:	83 c4 0c             	add    esp,0xc
c001a62c:	6a 04                	push   0x4
c001a62e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a635:	50                   	push   eax
c001a636:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a63c:	e8 4f ea ff ff       	call   c0019090 <IDE::read(unsigned char, unsigned char)>
c001a641:	83 c4 0c             	add    esp,0xc
c001a644:	89 c6                	mov    esi,eax
c001a646:	6a 05                	push   0x5
c001a648:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a64f:	50                   	push   eax
c001a650:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a656:	e8 35 ea ff ff       	call   c0019090 <IDE::read(unsigned char, unsigned char)>
c001a65b:	89 f1                	mov    ecx,esi
c001a65d:	0f b6 c0             	movzx  eax,al
c001a660:	0f b6 f1             	movzx  esi,cl
c001a663:	c1 e0 08             	shl    eax,0x8
c001a666:	09 c6                	or     esi,eax
c001a668:	d1 fe                	sar    esi,1
c001a66a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a66e:	83 c4 10             	add    esp,0x10
c001a671:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a676:	74 41                	je     c001a6b9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a678:	31 c9                	xor    ecx,ecx
c001a67a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a680:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a687:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a68b:	75 0a                	jne    c001a697 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a68d:	01 c9                	add    ecx,ecx
c001a68f:	01 cd                	add    ebp,ecx
c001a691:	4b                   	dec    ebx
c001a692:	e9 54 ff ff ff       	jmp    c001a5eb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a697:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a69c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a6a0:	51                   	push   ecx
c001a6a1:	51                   	push   ecx
c001a6a2:	52                   	push   edx
c001a6a3:	50                   	push   eax
c001a6a4:	e8 15 e9 ff ff       	call   c0018fbe <IDE::getBase(unsigned char)>
c001a6a9:	89 c2                	mov    edx,eax
c001a6ab:	89 f0                	mov    eax,esi
c001a6ad:	66 ef                	out    dx,ax
c001a6af:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a6b3:	83 c4 10             	add    esp,0x10
c001a6b6:	41                   	inc    ecx
c001a6b7:	eb c1                	jmp    c001a67a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a6b9:	31 f6                	xor    esi,esi
c001a6bb:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a6c1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a6c8:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a6cc:	75 06                	jne    c001a6d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a6ce:	01 f6                	add    esi,esi
c001a6d0:	01 f5                	add    ebp,esi
c001a6d2:	eb bd                	jmp    c001a691 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a6d4:	51                   	push   ecx
c001a6d5:	51                   	push   ecx
c001a6d6:	52                   	push   edx
c001a6d7:	50                   	push   eax
c001a6d8:	e8 e1 e8 ff ff       	call   c0018fbe <IDE::getBase(unsigned char)>
c001a6dd:	89 c2                	mov    edx,eax
c001a6df:	66 ed                	in     ax,dx
c001a6e1:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a6e6:	83 c4 10             	add    esp,0x10
c001a6e9:	46                   	inc    esi
c001a6ea:	eb cf                	jmp    c001a6bb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a6ec:	51                   	push   ecx
c001a6ed:	51                   	push   ecx
c001a6ee:	52                   	push   edx
c001a6ef:	50                   	push   eax
c001a6f0:	e8 49 ea ff ff       	call   c001913e <IDE::waitInterrupt(unsigned char)>
c001a6f5:	83 c4 10             	add    esp,0x10
c001a6f8:	84 c0                	test   al,al
c001a6fa:	0f 84 e8 fd ff ff    	je     c001a4e8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a700:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a705:	52                   	push   edx
c001a706:	52                   	push   edx
c001a707:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a70e:	50                   	push   eax
c001a70f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a715:	e8 90 e8 ff ff       	call   c0018faa <IDE::prepareInterrupt(unsigned char)>
c001a71a:	83 c4 10             	add    esp,0x10
c001a71d:	50                   	push   eax
c001a71e:	50                   	push   eax
c001a71f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a726:	50                   	push   eax
c001a727:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a72d:	e8 8c e8 ff ff       	call   c0018fbe <IDE::getBase(unsigned char)>
c001a732:	8d 50 07             	lea    edx,[eax+0x7]
c001a735:	ec                   	in     al,dx
c001a736:	83 c4 10             	add    esp,0x10
c001a739:	a8 88                	test   al,0x88
c001a73b:	74 0a                	je     c001a747 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a73d:	4b                   	dec    ebx
c001a73e:	75 dd                	jne    c001a71d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a740:	bb 02 00 00 00       	mov    ebx,0x2
c001a745:	eb 02                	jmp    c001a749 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a747:	31 db                	xor    ebx,ebx
c001a749:	83 c4 1c             	add    esp,0x1c
c001a74c:	89 d8                	mov    eax,ebx
c001a74e:	5b                   	pop    ebx
c001a74f:	5e                   	pop    esi
c001a750:	5f                   	pop    edi
c001a751:	5d                   	pop    ebp
c001a752:	c3                   	ret    
c001a753:	90                   	nop

c001a754 <ATAPI::diskRemoved()>:
c001a754:	53                   	push   ebx
c001a755:	83 ec 14             	sub    esp,0x14
c001a758:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a75c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a763:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a769:	e8 6c 24 ff ff       	call   c000cbda <LogicalDisk::unmount()>
c001a76e:	58                   	pop    eax
c001a76f:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a775:	e8 a6 2d ff ff       	call   c000d520 <VCache::writeWriteBuffer()>
c001a77a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a780:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a784:	83 c4 18             	add    esp,0x18
c001a787:	5b                   	pop    ebx
c001a788:	e9 83 2d ff ff       	jmp    c000d510 <VCache::invalidateReadBuffer()>
c001a78d:	90                   	nop

c001a78e <ATAPI::eject()>:
c001a78e:	57                   	push   edi
c001a78f:	b9 03 00 00 00       	mov    ecx,0x3
c001a794:	53                   	push   ebx
c001a795:	83 ec 14             	sub    esp,0x14
c001a798:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a79c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a7a0:	fc                   	cld    
c001a7a1:	31 c0                	xor    eax,eax
c001a7a3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a7a5:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a7aa:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a7af:	50                   	push   eax
c001a7b0:	50                   	push   eax
c001a7b1:	6a 00                	push   0x0
c001a7b3:	6a 00                	push   0x0
c001a7b5:	6a 00                	push   0x0
c001a7b7:	6a 02                	push   0x2
c001a7b9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a7bd:	50                   	push   eax
c001a7be:	53                   	push   ebx
c001a7bf:	e8 d0 fc ff ff       	call   c001a494 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a7c4:	83 c4 14             	add    esp,0x14
c001a7c7:	53                   	push   ebx
c001a7c8:	e8 87 ff ff ff       	call   c001a754 <ATAPI::diskRemoved()>
c001a7cd:	83 c4 24             	add    esp,0x24
c001a7d0:	31 c0                	xor    eax,eax
c001a7d2:	5b                   	pop    ebx
c001a7d3:	5f                   	pop    edi
c001a7d4:	c3                   	ret    
c001a7d5:	90                   	nop

c001a7d6 <ATAPI::diskInserted()>:
c001a7d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7da:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a7e1:	c3                   	ret    

c001a7e2 <ATAPI::detectMedia()>:
c001a7e2:	56                   	push   esi
c001a7e3:	53                   	push   ebx
c001a7e4:	83 ec 28             	sub    esp,0x28
c001a7e7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a7eb:	6a 0c                	push   0xc
c001a7ed:	6a 00                	push   0x0
c001a7ef:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a7f3:	56                   	push   esi
c001a7f4:	e8 d7 5c fe ff       	call   c00004d0 <memset>
c001a7f9:	58                   	pop    eax
c001a7fa:	5a                   	pop    edx
c001a7fb:	6a 00                	push   0x0
c001a7fd:	6a 00                	push   0x0
c001a7ff:	6a 00                	push   0x0
c001a801:	6a 00                	push   0x0
c001a803:	56                   	push   esi
c001a804:	53                   	push   ebx
c001a805:	e8 8a fc ff ff       	call   c001a494 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a80a:	83 c4 1c             	add    esp,0x1c
c001a80d:	6a 0c                	push   0xc
c001a80f:	6a 00                	push   0x0
c001a811:	56                   	push   esi
c001a812:	e8 b9 5c fe ff       	call   c00004d0 <memset>
c001a817:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a81c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a821:	59                   	pop    ecx
c001a822:	58                   	pop    eax
c001a823:	6a 01                	push   0x1
c001a825:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a829:	50                   	push   eax
c001a82a:	6a 00                	push   0x0
c001a82c:	6a 12                	push   0x12
c001a82e:	56                   	push   esi
c001a82f:	53                   	push   ebx
c001a830:	e8 5f fc ff ff       	call   c001a494 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a835:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a839:	83 c4 20             	add    esp,0x20
c001a83c:	83 e0 7f             	and    eax,0x7f
c001a83f:	3c 70                	cmp    al,0x70
c001a841:	74 15                	je     c001a858 <ATAPI::detectMedia()+0x76>
c001a843:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a84a:	75 0c                	jne    c001a858 <ATAPI::detectMedia()+0x76>
c001a84c:	83 ec 0c             	sub    esp,0xc
c001a84f:	53                   	push   ebx
c001a850:	e8 81 ff ff ff       	call   c001a7d6 <ATAPI::diskInserted()>
c001a855:	83 c4 10             	add    esp,0x10
c001a858:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a85c:	83 e0 0f             	and    eax,0xf
c001a85f:	3c 02                	cmp    al,0x2
c001a861:	75 1b                	jne    c001a87e <ATAPI::detectMedia()+0x9c>
c001a863:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a868:	75 2d                	jne    c001a897 <ATAPI::detectMedia()+0xb5>
c001a86a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a871:	74 24                	je     c001a897 <ATAPI::detectMedia()+0xb5>
c001a873:	83 ec 0c             	sub    esp,0xc
c001a876:	53                   	push   ebx
c001a877:	e8 d8 fe ff ff       	call   c001a754 <ATAPI::diskRemoved()>
c001a87c:	eb 16                	jmp    c001a894 <ATAPI::detectMedia()+0xb2>
c001a87e:	84 c0                	test   al,al
c001a880:	75 15                	jne    c001a897 <ATAPI::detectMedia()+0xb5>
c001a882:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a889:	75 0c                	jne    c001a897 <ATAPI::detectMedia()+0xb5>
c001a88b:	83 ec 0c             	sub    esp,0xc
c001a88e:	53                   	push   ebx
c001a88f:	e8 42 ff ff ff       	call   c001a7d6 <ATAPI::diskInserted()>
c001a894:	83 c4 10             	add    esp,0x10
c001a897:	83 c4 24             	add    esp,0x24
c001a89a:	5b                   	pop    ebx
c001a89b:	5e                   	pop    esi
c001a89c:	c3                   	ret    
c001a89d:	90                   	nop

c001a89e <ATAPI::open(int, int, void*)>:
c001a89e:	56                   	push   esi
c001a89f:	53                   	push   ebx
c001a8a0:	50                   	push   eax
c001a8a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a8a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a8a9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a8ad:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a8b3:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a8b9:	c1 e0 06             	shl    eax,0x6
c001a8bc:	01 d0                	add    eax,edx
c001a8be:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001a8c5:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001a8cb:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001a8d2:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a8dc:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a8e2:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a8e9:	6a 04                	push   0x4
c001a8eb:	6a 0c                	push   0xc
c001a8ed:	51                   	push   ecx
c001a8ee:	52                   	push   edx
c001a8ef:	e8 dc e6 ff ff       	call   c0018fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a8f4:	90                   	nop
c001a8f5:	90                   	nop
c001a8f6:	6a 00                	push   0x0
c001a8f8:	6a 0c                	push   0xc
c001a8fa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a901:	50                   	push   eax
c001a902:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a908:	e8 c3 e6 ff ff       	call   c0018fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a90d:	83 c4 14             	add    esp,0x14
c001a910:	68 74 01 00 00       	push   0x174
c001a915:	e8 9f ce fe ff       	call   c00077b9 <malloc>
c001a91a:	83 c4 0c             	add    esp,0xc
c001a91d:	89 c6                	mov    esi,eax
c001a91f:	6a 00                	push   0x0
c001a921:	68 ff ff ff 7f       	push   0x7fffffff
c001a926:	6a 00                	push   0x0
c001a928:	6a 00                	push   0x0
c001a92a:	53                   	push   ebx
c001a92b:	68 34 f6 01 c0       	push   0xc001f634
c001a930:	50                   	push   eax
c001a931:	e8 f0 20 ff ff       	call   c000ca26 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001a936:	83 c4 14             	add    esp,0x14
c001a939:	56                   	push   esi
c001a93a:	e8 9d 21 ff ff       	call   c000cadc <LogicalDisk::assignDriveLetter()>
c001a93f:	5a                   	pop    edx
c001a940:	0f be c0             	movsx  eax,al
c001a943:	59                   	pop    ecx
c001a944:	50                   	push   eax
c001a945:	68 80 f4 01 c0       	push   0xc001f480
c001a94a:	e8 de fb fe ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c001a94f:	58                   	pop    eax
c001a950:	5a                   	pop    edx
c001a951:	56                   	push   esi
c001a952:	53                   	push   ebx
c001a953:	e8 14 10 ff ff       	call   c000b96c <Device::addChild(Device*)>
c001a958:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001a95e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a961:	e8 3c 14 ff ff       	call   c000bda2 <PhysicalDisk::startCache()>
c001a966:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a96d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a970:	e8 6d fe ff ff       	call   c001a7e2 <ATAPI::detectMedia()>
c001a975:	83 c4 14             	add    esp,0x14
c001a978:	31 c0                	xor    eax,eax
c001a97a:	5b                   	pop    ebx
c001a97b:	5e                   	pop    esi
c001a97c:	c3                   	ret    
c001a97d:	90                   	nop

c001a97e <ATAPI::read(unsigned long long, int, void*)>:
c001a97e:	55                   	push   ebp
c001a97f:	57                   	push   edi
c001a980:	56                   	push   esi
c001a981:	53                   	push   ebx
c001a982:	83 ec 1c             	sub    esp,0x1c
c001a985:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a989:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a98d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001a991:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a998:	74 3c                	je     c001a9d6 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001a99a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a99e:	b9 03 00 00 00       	mov    ecx,0x3
c001a9a3:	fc                   	cld    
c001a9a4:	31 c0                	xor    eax,eax
c001a9a6:	0f ce                	bswap  esi
c001a9a8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a9aa:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001a9af:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001a9b3:	89 e8                	mov    eax,ebp
c001a9b5:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001a9b9:	50                   	push   eax
c001a9ba:	50                   	push   eax
c001a9bb:	55                   	push   ebp
c001a9bc:	c1 e5 0b             	shl    ebp,0xb
c001a9bf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a9c3:	6a 00                	push   0x0
c001a9c5:	55                   	push   ebp
c001a9c6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a9ca:	50                   	push   eax
c001a9cb:	53                   	push   ebx
c001a9cc:	e8 c3 fa ff ff       	call   c001a494 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a9d1:	83 c4 20             	add    esp,0x20
c001a9d4:	eb 1a                	jmp    c001a9f0 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001a9d6:	83 ec 0c             	sub    esp,0xc
c001a9d9:	53                   	push   ebx
c001a9da:	e8 03 fe ff ff       	call   c001a7e2 <ATAPI::detectMedia()>
c001a9df:	83 c4 10             	add    esp,0x10
c001a9e2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a9e9:	75 af                	jne    c001a99a <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001a9eb:	b8 02 00 00 00       	mov    eax,0x2
c001a9f0:	83 c4 1c             	add    esp,0x1c
c001a9f3:	5b                   	pop    ebx
c001a9f4:	5e                   	pop    esi
c001a9f5:	5f                   	pop    edi
c001a9f6:	5d                   	pop    ebp
c001a9f7:	c3                   	ret    

c001a9f8 <SATA::close(int, int, void*)>:
c001a9f8:	83 ec 0c             	sub    esp,0xc
c001a9fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9ff:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001aa05:	85 c0                	test   eax,eax
c001aa07:	74 0c                	je     c001aa15 <SATA::close(int, int, void*)+0x1d>
c001aa09:	83 ec 0c             	sub    esp,0xc
c001aa0c:	8b 10                	mov    edx,DWORD PTR [eax]
c001aa0e:	50                   	push   eax
c001aa0f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001aa12:	83 c4 10             	add    esp,0x10
c001aa15:	31 c0                	xor    eax,eax
c001aa17:	83 c4 0c             	add    esp,0xc
c001aa1a:	c3                   	ret    
c001aa1b:	90                   	nop

c001aa1c <SATA::powerSaving(PowerSavingLevel)>:
c001aa1c:	c3                   	ret    
c001aa1d:	90                   	nop

c001aa1e <SATA::open(int, int, void*)>:
c001aa1e:	56                   	push   esi
c001aa1f:	53                   	push   ebx
c001aa20:	50                   	push   eax
c001aa21:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aa29:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001aa33:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001aa39:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001aa43:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa47:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001aa51:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001aa57:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001aa5e:	e8 32 d0 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001aa63:	89 c6                	mov    esi,eax
c001aa65:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001aa6b:	81 c6 00 10 00 00    	add    esi,0x1000
c001aa71:	e8 1f d0 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001aa76:	39 c6                	cmp    esi,eax
c001aa78:	74 10                	je     c001aa8a <SATA::open(int, int, void*)+0x6c>
c001aa7a:	83 ec 0c             	sub    esp,0xc
c001aa7d:	68 c8 f4 01 c0       	push   0xc001f4c8
c001aa82:	e8 28 57 ff ff       	call   c00101af <KePanic(char const*)>
c001aa87:	83 c4 10             	add    esp,0x10
c001aa8a:	83 ec 0c             	sub    esp,0xc
c001aa8d:	6a 02                	push   0x2
c001aa8f:	e8 f1 e7 fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c001aa94:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001aa9a:	6a 03                	push   0x3
c001aa9c:	50                   	push   eax
c001aa9d:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001aaa3:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c001aaa9:	e8 86 ee fe ff       	call   c0009934 <VAS::mapPage(unsigned long, unsigned long, int)>
c001aaae:	83 c4 14             	add    esp,0x14
c001aab1:	53                   	push   ebx
c001aab2:	e8 eb 12 ff ff       	call   c000bda2 <PhysicalDisk::startCache()>
c001aab7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aaba:	e8 9b 23 ff ff       	call   c000ce5a <createPartitionsForDisk(PhysicalDisk*)>
c001aabf:	83 c4 14             	add    esp,0x14
c001aac2:	31 c0                	xor    eax,eax
c001aac4:	5b                   	pop    ebx
c001aac5:	5e                   	pop    esi
c001aac6:	c3                   	ret    
c001aac7:	90                   	nop

c001aac8 <SATA::SATA()>:
c001aac8:	83 ec 0c             	sub    esp,0xc
c001aacb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aacf:	83 ec 04             	sub    esp,0x4
c001aad2:	68 00 02 00 00       	push   0x200
c001aad7:	68 dc f4 01 c0       	push   0xc001f4dc
c001aadc:	50                   	push   eax
c001aadd:	e8 58 12 ff ff       	call   c000bd3a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001aae2:	83 c4 10             	add    esp,0x10
c001aae5:	ba 4c f5 01 c0       	mov    edx,0xc001f54c
c001aaea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aaee:	89 10                	mov    DWORD PTR [eax],edx
c001aaf0:	90                   	nop
c001aaf1:	83 c4 0c             	add    esp,0xc
c001aaf4:	c3                   	ret    
c001aaf5:	90                   	nop

c001aaf6 <SATA::access(unsigned long long, int, void*, bool)>:
c001aaf6:	55                   	push   ebp
c001aaf7:	57                   	push   edi
c001aaf8:	56                   	push   esi
c001aaf9:	53                   	push   ebx
c001aafa:	83 ec 2c             	sub    esp,0x2c
c001aafd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ab01:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ab05:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ab09:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ab0d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ab11:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001ab16:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab1a:	7e 10                	jle    c001ab2c <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001ab1c:	83 ec 0c             	sub    esp,0xc
c001ab1f:	68 ec f4 01 c0       	push   0xc001f4ec
c001ab24:	e8 86 56 ff ff       	call   c00101af <KePanic(char const*)>
c001ab29:	83 c4 10             	add    esp,0x10
c001ab2c:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ab32:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001ab38:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ab3e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ab42:	89 d0                	mov    eax,edx
c001ab44:	c1 e0 07             	shl    eax,0x7
c001ab47:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ab4b:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001ab55:	51                   	push   ecx
c001ab56:	8d 42 02             	lea    eax,[edx+0x2]
c001ab59:	51                   	push   ecx
c001ab5a:	c1 e0 07             	shl    eax,0x7
c001ab5d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ab61:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ab65:	50                   	push   eax
c001ab66:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001ab6c:	e8 e7 ef ff ff       	call   c0019b58 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ab71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ab75:	83 c4 10             	add    esp,0x10
c001ab78:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001ab7d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ab81:	0f 84 4f 01 00 00    	je     c001acd6 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ab87:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ab8b:	c1 e0 09             	shl    eax,0x9
c001ab8e:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ab93:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ab97:	74 0e                	je     c001aba7 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001ab99:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001ab9f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001aba3:	89 c1                	mov    ecx,eax
c001aba5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aba7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001abab:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001abb1:	8d 42 02             	lea    eax,[edx+0x2]
c001abb4:	c1 e0 07             	shl    eax,0x7
c001abb7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001abbb:	8b 00                	mov    eax,DWORD PTR [eax]
c001abbd:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001abc3:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001abc9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001abcd:	c1 e1 05             	shl    ecx,0x5
c001abd0:	01 c8                	add    eax,ecx
c001abd2:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001abd6:	83 e1 01             	and    ecx,0x1
c001abd9:	89 ce                	mov    esi,ecx
c001abdb:	8a 08                	mov    cl,BYTE PTR [eax]
c001abdd:	c1 e6 06             	shl    esi,0x6
c001abe0:	83 e1 bf             	and    ecx,0xffffffbf
c001abe3:	09 f1                	or     ecx,esi
c001abe5:	88 08                	mov    BYTE PTR [eax],cl
c001abe7:	8b 08                	mov    ecx,DWORD PTR [eax]
c001abe9:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001abef:	81 c9 05 00 01 00    	or     ecx,0x10005
c001abf5:	89 08                	mov    DWORD PTR [eax],ecx
c001abf7:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001abfd:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001ac03:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001ac09:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001ac0c:	50                   	push   eax
c001ac0d:	68 90 00 00 00       	push   0x90
c001ac12:	6a 00                	push   0x0
c001ac14:	56                   	push   esi
c001ac15:	e8 b6 58 fe ff       	call   c00004d0 <memset>
c001ac1a:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ac20:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001ac24:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001ac2a:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001ac2e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ac32:	83 c4 10             	add    esp,0x10
c001ac35:	48                   	dec    eax
c001ac36:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ac3b:	89 c1                	mov    ecx,eax
c001ac3d:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001ac43:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ac48:	09 c8                	or     eax,ecx
c001ac4a:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001ac50:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ac53:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001ac5a:	66 25 00 7f          	and    ax,0x7f00
c001ac5e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ac62:	66 0d 27 80          	or     ax,0x8027
c001ac66:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001ac6b:	66 89 06             	mov    WORD PTR [esi],ax
c001ac6e:	19 c0                	sbb    eax,eax
c001ac70:	83 e0 f0             	and    eax,0xfffffff0
c001ac73:	83 c0 35             	add    eax,0x35
c001ac76:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001ac79:	89 e8                	mov    eax,ebp
c001ac7b:	c1 e8 10             	shr    eax,0x10
c001ac7e:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001ac81:	89 e8                	mov    eax,ebp
c001ac83:	c1 e8 18             	shr    eax,0x18
c001ac86:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001ac89:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ac8d:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ac90:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac94:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001ac97:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ac9b:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001ac9f:	89 d6                	mov    esi,edx
c001aca1:	31 c0                	xor    eax,eax
c001aca3:	c1 e6 07             	shl    esi,0x7
c001aca6:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001acaa:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001acb0:	80 e1 88             	and    cl,0x88
c001acb3:	74 0a                	je     c001acbf <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001acb5:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001acba:	74 0a                	je     c001acc6 <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001acbc:	40                   	inc    eax
c001acbd:	eb eb                	jmp    c001acaa <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001acbf:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001acc4:	75 17                	jne    c001acdd <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001acc6:	83 ec 0c             	sub    esp,0xc
c001acc9:	68 25 f5 01 c0       	push   0xc001f525
c001acce:	e8 5a f8 fe ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c001acd3:	83 c4 10             	add    esp,0x10
c001acd6:	b8 01 00 00 00       	mov    eax,0x1
c001acdb:	eb 5d                	jmp    c001ad3a <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001acdd:	b8 01 00 00 00       	mov    eax,0x1
c001ace2:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001ace6:	c1 e2 07             	shl    edx,0x7
c001ace9:	d3 e0                	shl    eax,cl
c001aceb:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001acef:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001acf5:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001acfb:	85 c8                	test   eax,ecx
c001acfd:	74 16                	je     c001ad15 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001acff:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001ad05:	0f ba e1 1e          	bt     ecx,0x1e
c001ad09:	73 ea                	jae    c001acf5 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001ad0b:	83 ec 0c             	sub    esp,0xc
c001ad0e:	68 33 f5 01 c0       	push   0xc001f533
c001ad13:	eb b9                	jmp    c001acce <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001ad15:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001ad1b:	0f ba e0 1e          	bt     eax,0x1e
c001ad1f:	72 b5                	jb     c001acd6 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ad21:	31 c0                	xor    eax,eax
c001ad23:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ad28:	75 10                	jne    c001ad3a <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ad2a:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001ad30:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ad34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ad38:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad3a:	83 c4 2c             	add    esp,0x2c
c001ad3d:	5b                   	pop    ebx
c001ad3e:	5e                   	pop    esi
c001ad3f:	5f                   	pop    edi
c001ad40:	5d                   	pop    ebp
c001ad41:	c3                   	ret    

c001ad42 <SATA::read(unsigned long long, int, void*)>:
c001ad42:	57                   	push   edi
c001ad43:	b8 04 00 00 00       	mov    eax,0x4
c001ad48:	56                   	push   esi
c001ad49:	53                   	push   ebx
c001ad4a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad4e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ad52:	8d 7a ff             	lea    edi,[edx-0x1]
c001ad55:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ad59:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ad5d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ad63:	77 25                	ja     c001ad8a <SATA::read(unsigned long long, int, void*)+0x48>
c001ad65:	b8 06 00 00 00       	mov    eax,0x6
c001ad6a:	85 f6                	test   esi,esi
c001ad6c:	74 1c                	je     c001ad8a <SATA::read(unsigned long long, int, void*)+0x48>
c001ad6e:	50                   	push   eax
c001ad6f:	50                   	push   eax
c001ad70:	6a 00                	push   0x0
c001ad72:	56                   	push   esi
c001ad73:	52                   	push   edx
c001ad74:	53                   	push   ebx
c001ad75:	51                   	push   ecx
c001ad76:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad7a:	e8 77 fd ff ff       	call   c001aaf6 <SATA::access(unsigned long long, int, void*, bool)>
c001ad7f:	83 c4 20             	add    esp,0x20
c001ad82:	85 c0                	test   eax,eax
c001ad84:	0f 95 c0             	setne  al
c001ad87:	0f b6 c0             	movzx  eax,al
c001ad8a:	5b                   	pop    ebx
c001ad8b:	5e                   	pop    esi
c001ad8c:	5f                   	pop    edi
c001ad8d:	c3                   	ret    

c001ad8e <SATA::write(unsigned long long, int, void*)>:
c001ad8e:	55                   	push   ebp
c001ad8f:	b8 04 00 00 00       	mov    eax,0x4
c001ad94:	57                   	push   edi
c001ad95:	56                   	push   esi
c001ad96:	53                   	push   ebx
c001ad97:	83 ec 0c             	sub    esp,0xc
c001ad9a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ad9e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ada2:	8d 73 ff             	lea    esi,[ebx-0x1]
c001ada5:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ada9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001adad:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001adb3:	77 3d                	ja     c001adf2 <SATA::write(unsigned long long, int, void*)+0x64>
c001adb5:	b8 06 00 00 00       	mov    eax,0x6
c001adba:	85 ed                	test   ebp,ebp
c001adbc:	74 34                	je     c001adf2 <SATA::write(unsigned long long, int, void*)+0x64>
c001adbe:	c1 e3 09             	shl    ebx,0x9
c001adc1:	01 eb                	add    ebx,ebp
c001adc3:	89 d6                	mov    esi,edx
c001adc5:	89 cf                	mov    edi,ecx
c001adc7:	83 c6 01             	add    esi,0x1
c001adca:	83 d7 00             	adc    edi,0x0
c001adcd:	50                   	push   eax
c001adce:	50                   	push   eax
c001adcf:	6a 01                	push   0x1
c001add1:	55                   	push   ebp
c001add2:	81 c5 00 02 00 00    	add    ebp,0x200
c001add8:	6a 01                	push   0x1
c001adda:	51                   	push   ecx
c001addb:	52                   	push   edx
c001addc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ade0:	e8 11 fd ff ff       	call   c001aaf6 <SATA::access(unsigned long long, int, void*, bool)>
c001ade5:	83 c4 20             	add    esp,0x20
c001ade8:	89 f2                	mov    edx,esi
c001adea:	89 f9                	mov    ecx,edi
c001adec:	39 dd                	cmp    ebp,ebx
c001adee:	75 d3                	jne    c001adc3 <SATA::write(unsigned long long, int, void*)+0x35>
c001adf0:	31 c0                	xor    eax,eax
c001adf2:	83 c4 0c             	add    esp,0xc
c001adf5:	5b                   	pop    ebx
c001adf6:	5e                   	pop    esi
c001adf7:	5f                   	pop    edi
c001adf8:	5d                   	pop    ebp
c001adf9:	c3                   	ret    

c001adfa <SATAPI::write(unsigned long long, int, void*)>:
c001adfa:	b8 03 00 00 00       	mov    eax,0x3
c001adff:	c3                   	ret    

c001ae00 <SATAPI::close(int, int, void*)>:
c001ae00:	83 ec 0c             	sub    esp,0xc
c001ae03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae07:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ae0d:	85 c0                	test   eax,eax
c001ae0f:	74 0c                	je     c001ae1d <SATAPI::close(int, int, void*)+0x1d>
c001ae11:	83 ec 0c             	sub    esp,0xc
c001ae14:	8b 10                	mov    edx,DWORD PTR [eax]
c001ae16:	50                   	push   eax
c001ae17:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ae1a:	83 c4 10             	add    esp,0x10
c001ae1d:	31 c0                	xor    eax,eax
c001ae1f:	83 c4 0c             	add    esp,0xc
c001ae22:	c3                   	ret    
c001ae23:	90                   	nop

c001ae24 <SATAPI::SATAPI()>:
c001ae24:	83 ec 0c             	sub    esp,0xc
c001ae27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae2b:	83 ec 04             	sub    esp,0x4
c001ae2e:	68 00 08 00 00       	push   0x800
c001ae33:	68 7c f5 01 c0       	push   0xc001f57c
c001ae38:	50                   	push   eax
c001ae39:	e8 fc 0e ff ff       	call   c000bd3a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ae3e:	83 c4 10             	add    esp,0x10
c001ae41:	ba 84 f6 01 c0       	mov    edx,0xc001f684
c001ae46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae4a:	89 10                	mov    DWORD PTR [eax],edx
c001ae4c:	90                   	nop
c001ae4d:	83 c4 0c             	add    esp,0xc
c001ae50:	c3                   	ret    
c001ae51:	90                   	nop

c001ae52 <SATAPI::diskRemoved()>:
c001ae52:	c3                   	ret    
c001ae53:	90                   	nop

c001ae54 <SATAPI::diskInserted()>:
c001ae54:	83 ec 18             	sub    esp,0x18
c001ae57:	68 88 f5 01 c0       	push   0xc001f588
c001ae5c:	e8 cc f6 fe ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c001ae61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ae65:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001ae6c:	83 c4 1c             	add    esp,0x1c
c001ae6f:	c3                   	ret    

c001ae70 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001ae70:	55                   	push   ebp
c001ae71:	57                   	push   edi
c001ae72:	56                   	push   esi
c001ae73:	53                   	push   ebx
c001ae74:	83 ec 38             	sub    esp,0x38
c001ae77:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ae7b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001ae7f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001ae83:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ae87:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001ae8b:	68 a0 f5 01 c0       	push   0xc001f5a0
c001ae90:	e8 98 f6 fe ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c001ae95:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001ae9b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001aea1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aea5:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001aeab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aeaf:	83 c0 02             	add    eax,0x2
c001aeb2:	c1 e0 07             	shl    eax,0x7
c001aeb5:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001aeb9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aebd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aec1:	c1 e0 07             	shl    eax,0x7
c001aec4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001aec8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aecc:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001aed6:	58                   	pop    eax
c001aed7:	5a                   	pop    edx
c001aed8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001aedc:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001aee2:	e8 71 ec ff ff       	call   c0019b58 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001aee7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aeeb:	83 c4 10             	add    esp,0x10
c001aeee:	b8 01 00 00 00       	mov    eax,0x1
c001aef3:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001aef8:	0f 84 49 02 00 00    	je     c001b147 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001aefe:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001af04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af08:	8b 00                	mov    eax,DWORD PTR [eax]
c001af0a:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001af10:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001af16:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001af1a:	c1 e1 05             	shl    ecx,0x5
c001af1d:	01 c8                	add    eax,ecx
c001af1f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001af21:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001af27:	81 c9 25 00 01 00    	or     ecx,0x10025
c001af2d:	89 08                	mov    DWORD PTR [eax],ecx
c001af2f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001af35:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001af3b:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001af41:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001af44:	8d 7b 40             	lea    edi,[ebx+0x40]
c001af47:	50                   	push   eax
c001af48:	68 90 00 00 00       	push   0x90
c001af4d:	6a 00                	push   0x0
c001af4f:	53                   	push   ebx
c001af50:	e8 7b 55 fe ff       	call   c00004d0 <memset>
c001af55:	b9 0c 00 00 00       	mov    ecx,0xc
c001af5a:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001af5e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001af60:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001af66:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001af6a:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001af70:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001af74:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001af78:	48                   	dec    eax
c001af79:	25 ff ff 3f 00       	and    eax,0x3fffff
c001af7e:	89 c1                	mov    ecx,eax
c001af80:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001af86:	25 00 00 c0 ff       	and    eax,0xffc00000
c001af8b:	09 c8                	or     eax,ecx
c001af8d:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001af93:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001af96:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001af9d:	66 25 00 7f          	and    ax,0x7f00
c001afa1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001afa5:	66 0d 27 80          	or     ax,0x8027
c001afa9:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001afad:	66 89 03             	mov    WORD PTR [ebx],ax
c001afb0:	89 d0                	mov    eax,edx
c001afb2:	c1 ea 18             	shr    edx,0x18
c001afb5:	c1 e8 10             	shr    eax,0x10
c001afb8:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001afbb:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001afbe:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001afc2:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001afc5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001afc9:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001afcc:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001afd0:	83 c4 10             	add    esp,0x10
c001afd3:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001afd7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001afdb:	31 c0                	xor    eax,eax
c001afdd:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001afe3:	80 e1 88             	and    cl,0x88
c001afe6:	74 0a                	je     c001aff2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x182>
c001afe8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001afed:	74 0a                	je     c001aff9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x189>
c001afef:	40                   	inc    eax
c001aff0:	eb eb                	jmp    c001afdd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16d>
c001aff2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001aff7:	75 43                	jne    c001b03c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cc>
c001aff9:	83 ec 0c             	sub    esp,0xc
c001affc:	68 ba f5 01 c0       	push   0xc001f5ba
c001b001:	e8 27 f5 fe ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c001b006:	58                   	pop    eax
c001b007:	5a                   	pop    edx
c001b008:	68 cf f5 01 c0       	push   0xc001f5cf
c001b00d:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001b013:	e8 1e d7 fe ff       	call   c0008736 <VgaText::puts(char const*)>
c001b018:	59                   	pop    ecx
c001b019:	5b                   	pop    ebx
c001b01a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b01e:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b024:	e8 c9 eb ff ff       	call   c0019bf2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b029:	5e                   	pop    esi
c001b02a:	5f                   	pop    edi
c001b02b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b02f:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b035:	e8 98 eb ff ff       	call   c0019bd2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b03a:	eb 48                	jmp    c001b084 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x214>
c001b03c:	be 01 00 00 00       	mov    esi,0x1
c001b041:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b045:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b049:	d3 e6                	shl    esi,cl
c001b04b:	c1 e7 07             	shl    edi,0x7
c001b04e:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001b054:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001b059:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001b05d:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001b063:	85 c6                	test   esi,eax
c001b065:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001b06b:	0f 84 a3 00 00 00    	je     c001b114 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a4>
c001b071:	0f ba e0 1e          	bt     eax,0x1e
c001b075:	73 1a                	jae    c001b091 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x221>
c001b077:	83 ec 0c             	sub    esp,0xc
c001b07a:	68 e1 f5 01 c0       	push   0xc001f5e1
c001b07f:	e8 a9 f4 fe ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c001b084:	83 c4 10             	add    esp,0x10
c001b087:	b8 01 00 00 00       	mov    eax,0x1
c001b08c:	e9 b6 00 00 00       	jmp    c001b147 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001b091:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001b097:	83 f8 0d             	cmp    eax,0xd
c001b09a:	77 0a                	ja     c001b0a6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c001b09c:	83 ec 0c             	sub    esp,0xc
c001b09f:	68 c8 00 00 00       	push   0xc8
c001b0a4:	eb 28                	jmp    c001b0ce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001b0a6:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001b0ac:	83 f8 0d             	cmp    eax,0xd
c001b0af:	77 0a                	ja     c001b0bb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c001b0b1:	83 ec 0c             	sub    esp,0xc
c001b0b4:	68 58 02 00 00       	push   0x258
c001b0b9:	eb 13                	jmp    c001b0ce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001b0bb:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001b0c1:	83 f8 06             	cmp    eax,0x6
c001b0c4:	77 10                	ja     c001b0d6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c001b0c6:	83 ec 0c             	sub    esp,0xc
c001b0c9:	68 dc 05 00 00       	push   0x5dc
c001b0ce:	e8 d1 89 ff ff       	call   c0013aa4 <milliTenthSleep(unsigned int)>
c001b0d3:	83 c4 10             	add    esp,0x10
c001b0d6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001b0da:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001b0dd:	75 06                	jne    c001b0e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x275>
c001b0df:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001b0e3:	74 15                	je     c001b0fa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001b0e5:	83 fb 06             	cmp    ebx,0x6
c001b0e8:	77 10                	ja     c001b0fa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001b0ea:	83 ec 0c             	sub    esp,0xc
c001b0ed:	68 c4 09 00 00       	push   0x9c4
c001b0f2:	e8 ad 89 ff ff       	call   c0013aa4 <milliTenthSleep(unsigned int)>
c001b0f7:	83 c4 10             	add    esp,0x10
c001b0fa:	43                   	inc    ebx
c001b0fb:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001b101:	0f 85 56 ff ff ff    	jne    c001b05d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ed>
c001b107:	83 ec 0c             	sub    esp,0xc
c001b10a:	68 f4 f5 01 c0       	push   0xc001f5f4
c001b10f:	e9 6b ff ff ff       	jmp    c001b07f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001b114:	0f ba e0 1e          	bt     eax,0x1e
c001b118:	73 0d                	jae    c001b127 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b7>
c001b11a:	83 ec 0c             	sub    esp,0xc
c001b11d:	68 08 f6 01 c0       	push   0xc001f608
c001b122:	e9 58 ff ff ff       	jmp    c001b07f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001b127:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001b12c:	74 17                	je     c001b145 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001b12e:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001b133:	74 10                	je     c001b145 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001b135:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001b13b:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001b13f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b143:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b145:	31 c0                	xor    eax,eax
c001b147:	83 c4 2c             	add    esp,0x2c
c001b14a:	5b                   	pop    ebx
c001b14b:	5e                   	pop    esi
c001b14c:	5f                   	pop    edi
c001b14d:	5d                   	pop    ebp
c001b14e:	c3                   	ret    
c001b14f:	90                   	nop

c001b150 <SATAPI::eject()>:
c001b150:	57                   	push   edi
c001b151:	b9 03 00 00 00       	mov    ecx,0x3
c001b156:	83 ec 18             	sub    esp,0x18
c001b159:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b15d:	fc                   	cld    
c001b15e:	31 c0                	xor    eax,eax
c001b160:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b162:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001b167:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001b16c:	50                   	push   eax
c001b16d:	6a 00                	push   0x0
c001b16f:	6a 00                	push   0x0
c001b171:	6a 00                	push   0x0
c001b173:	6a 00                	push   0x0
c001b175:	6a 02                	push   0x2
c001b177:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b17b:	50                   	push   eax
c001b17c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b180:	e8 eb fc ff ff       	call   c001ae70 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b185:	31 c0                	xor    eax,eax
c001b187:	83 c4 38             	add    esp,0x38
c001b18a:	5f                   	pop    edi
c001b18b:	c3                   	ret    

c001b18c <SATAPI::detectMedia()>:
c001b18c:	53                   	push   ebx
c001b18d:	83 ec 14             	sub    esp,0x14
c001b190:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b194:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001b19a:	e8 81 23 ff ff       	call   c000d520 <VCache::writeWriteBuffer()>
c001b19f:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001b1a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b1a9:	83 c4 18             	add    esp,0x18
c001b1ac:	5b                   	pop    ebx
c001b1ad:	e9 5e 23 ff ff       	jmp    c000d510 <VCache::invalidateReadBuffer()>

c001b1b2 <SATAPI::open(int, int, void*)>:
c001b1b2:	56                   	push   esi
c001b1b3:	53                   	push   ebx
c001b1b4:	51                   	push   ecx
c001b1b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b1b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b1bd:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001b1c7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001b1cd:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b1d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b1db:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001b1e5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001b1eb:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001b1f2:	e8 9e c8 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001b1f7:	89 c6                	mov    esi,eax
c001b1f9:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001b1ff:	81 c6 00 10 00 00    	add    esi,0x1000
c001b205:	e8 8b c8 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001b20a:	39 c6                	cmp    esi,eax
c001b20c:	74 10                	je     c001b21e <SATAPI::open(int, int, void*)+0x6c>
c001b20e:	83 ec 0c             	sub    esp,0xc
c001b211:	68 1d f6 01 c0       	push   0xc001f61d
c001b216:	e8 94 4f ff ff       	call   c00101af <KePanic(char const*)>
c001b21b:	83 c4 10             	add    esp,0x10
c001b21e:	83 ec 0c             	sub    esp,0xc
c001b221:	6a 02                	push   0x2
c001b223:	e8 5d e0 fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c001b228:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001b22e:	6a 03                	push   0x3
c001b230:	50                   	push   eax
c001b231:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001b237:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c001b23d:	e8 f2 e6 fe ff       	call   c0009934 <VAS::mapPage(unsigned long, unsigned long, int)>
c001b242:	83 c4 14             	add    esp,0x14
c001b245:	68 74 01 00 00       	push   0x174
c001b24a:	e8 6a c5 fe ff       	call   c00077b9 <malloc>
c001b24f:	83 c4 0c             	add    esp,0xc
c001b252:	89 c6                	mov    esi,eax
c001b254:	6a 00                	push   0x0
c001b256:	68 ff ff ff 7f       	push   0x7fffffff
c001b25b:	6a 00                	push   0x0
c001b25d:	6a 00                	push   0x0
c001b25f:	53                   	push   ebx
c001b260:	68 33 f6 01 c0       	push   0xc001f633
c001b265:	50                   	push   eax
c001b266:	e8 bb 17 ff ff       	call   c000ca26 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001b26b:	83 c4 14             	add    esp,0x14
c001b26e:	56                   	push   esi
c001b26f:	e8 68 18 ff ff       	call   c000cadc <LogicalDisk::assignDriveLetter()>
c001b274:	5a                   	pop    edx
c001b275:	0f be c0             	movsx  eax,al
c001b278:	59                   	pop    ecx
c001b279:	50                   	push   eax
c001b27a:	68 80 f4 01 c0       	push   0xc001f480
c001b27f:	e8 a9 f2 fe ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c001b284:	58                   	pop    eax
c001b285:	5a                   	pop    edx
c001b286:	56                   	push   esi
c001b287:	53                   	push   ebx
c001b288:	e8 df 06 ff ff       	call   c000b96c <Device::addChild(Device*)>
c001b28d:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001b293:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b296:	e8 07 0b ff ff       	call   c000bda2 <PhysicalDisk::startCache()>
c001b29b:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001b2a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b2a5:	e8 e2 fe ff ff       	call   c001b18c <SATAPI::detectMedia()>
c001b2aa:	83 c4 14             	add    esp,0x14
c001b2ad:	31 c0                	xor    eax,eax
c001b2af:	5b                   	pop    ebx
c001b2b0:	5e                   	pop    esi
c001b2b1:	c3                   	ret    

c001b2b2 <SATAPI::read(unsigned long long, int, void*)>:
c001b2b2:	57                   	push   edi
c001b2b3:	56                   	push   esi
c001b2b4:	53                   	push   ebx
c001b2b5:	83 ec 3c             	sub    esp,0x3c
c001b2b8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b2bc:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001b2c0:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b2c4:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001b2c8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b2cc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b2d0:	68 41 f6 01 c0       	push   0xc001f641
c001b2d5:	e8 53 f2 fe ff       	call   c000a52d <Dbg::kprintf(char const*, ...)>
c001b2da:	83 c4 10             	add    esp,0x10
c001b2dd:	83 fe 04             	cmp    esi,0x4
c001b2e0:	7e 10                	jle    c001b2f2 <SATAPI::read(unsigned long long, int, void*)+0x40>
c001b2e2:	83 ec 0c             	sub    esp,0xc
c001b2e5:	68 52 f6 01 c0       	push   0xc001f652
c001b2ea:	e8 c0 4e ff ff       	call   c00101af <KePanic(char const*)>
c001b2ef:	83 c4 10             	add    esp,0x10
c001b2f2:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b2f8:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001b2fe:	51                   	push   ecx
c001b2ff:	50                   	push   eax
c001b300:	83 c0 02             	add    eax,0x2
c001b303:	c1 e0 07             	shl    eax,0x7
c001b306:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001b30c:	50                   	push   eax
c001b30d:	52                   	push   edx
c001b30e:	e8 09 e9 ff ff       	call   c0019c1c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b313:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001b317:	b9 03 00 00 00       	mov    ecx,0x3
c001b31c:	fc                   	cld    
c001b31d:	31 c0                	xor    eax,eax
c001b31f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b321:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001b326:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001b32b:	83 c4 0c             	add    esp,0xc
c001b32e:	6a 00                	push   0x0
c001b330:	6a 00                	push   0x0
c001b332:	6a 00                	push   0x0
c001b334:	6a 00                	push   0x0
c001b336:	6a 02                	push   0x2
c001b338:	8d 44 24 30          	lea    eax,[esp+0x30]
c001b33c:	50                   	push   eax
c001b33d:	53                   	push   ebx
c001b33e:	e8 2d fb ff ff       	call   c001ae70 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b343:	83 c4 20             	add    esp,0x20
c001b346:	85 c0                	test   eax,eax
c001b348:	75 44                	jne    c001b38e <SATAPI::read(unsigned long long, int, void*)+0xdc>
c001b34a:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b34e:	b9 03 00 00 00       	mov    ecx,0x3
c001b353:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b355:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b359:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001b35e:	0f c8                	bswap  eax
c001b360:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001b364:	89 f0                	mov    eax,esi
c001b366:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b36a:	50                   	push   eax
c001b36b:	56                   	push   esi
c001b36c:	c1 e6 0b             	shl    esi,0xb
c001b36f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b373:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b377:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b37b:	56                   	push   esi
c001b37c:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b380:	50                   	push   eax
c001b381:	53                   	push   ebx
c001b382:	e8 e9 fa ff ff       	call   c001ae70 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b387:	83 c4 20             	add    esp,0x20
c001b38a:	85 c0                	test   eax,eax
c001b38c:	74 14                	je     c001b3a2 <SATAPI::read(unsigned long long, int, void*)+0xf0>
c001b38e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b392:	83 ec 0c             	sub    esp,0xc
c001b395:	53                   	push   ebx
c001b396:	e8 f1 fd ff ff       	call   c001b18c <SATAPI::detectMedia()>
c001b39b:	83 c4 10             	add    esp,0x10
c001b39e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b3a2:	83 c4 30             	add    esp,0x30
c001b3a5:	5b                   	pop    ebx
c001b3a6:	5e                   	pop    esi
c001b3a7:	5f                   	pop    edi
c001b3a8:	c3                   	ret    
c001b3a9:	90                   	nop

c001b3aa <IOAPIC::close(int, int, void*)>:
c001b3aa:	b8 00 00 00 00       	mov    eax,0x0
c001b3af:	c3                   	ret    

c001b3b0 <apicGetBase()>:
c001b3b0:	55                   	push   ebp
c001b3b1:	89 e5                	mov    ebp,esp
c001b3b3:	83 ec 18             	sub    esp,0x18
c001b3b6:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001b3bb:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001b3c1:	83 e0 08             	and    eax,0x8
c001b3c4:	84 c0                	test   al,al
c001b3c6:	75 07                	jne    c001b3cf <apicGetBase()+0x1f>
c001b3c8:	b8 00 00 00 00       	mov    eax,0x0
c001b3cd:	eb 21                	jmp    c001b3f0 <apicGetBase()+0x40>
c001b3cf:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001b3d4:	83 ec 08             	sub    esp,0x8
c001b3d7:	6a 1b                	push   0x1b
c001b3d9:	50                   	push   eax
c001b3da:	e8 13 ba fe ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c001b3df:	83 c4 10             	add    esp,0x10
c001b3e2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b3e5:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001b3e8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b3eb:	25 00 00 ff ff       	and    eax,0xffff0000
c001b3f0:	c9                   	leave  
c001b3f1:	c3                   	ret    

c001b3f2 <IOAPIC::IOAPIC()>:
c001b3f2:	83 ec 0c             	sub    esp,0xc
c001b3f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3f9:	83 ec 08             	sub    esp,0x8
c001b3fc:	68 b4 f6 01 c0       	push   0xc001f6b4
c001b401:	50                   	push   eax
c001b402:	e8 fd 06 ff ff       	call   c000bb04 <Device::Device(char const*)>
c001b407:	83 c4 10             	add    esp,0x10
c001b40a:	ba c4 f6 01 c0       	mov    edx,0xc001f6c4
c001b40f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b413:	89 10                	mov    DWORD PTR [eax],edx
c001b415:	90                   	nop
c001b416:	83 c4 0c             	add    esp,0xc
c001b419:	c3                   	ret    

c001b41a <apicOpen()>:
c001b41a:	55                   	push   ebp
c001b41b:	89 e5                	mov    ebp,esp
c001b41d:	53                   	push   ebx
c001b41e:	83 ec 34             	sub    esp,0x34
c001b421:	a0 a0 5b 02 c0       	mov    al,ds:0xc0025ba0
c001b426:	83 f0 01             	xor    eax,0x1
c001b429:	84 c0                	test   al,al
c001b42b:	0f 84 9d 00 00 00    	je     c001b4ce <apicOpen()+0xb4>
c001b431:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001b435:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c001b43a:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001b43d:	0f 83 84 00 00 00    	jae    c001b4c7 <apicOpen()+0xad>
c001b443:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001b44a:	83 ec 0c             	sub    esp,0xc
c001b44d:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001b450:	e8 64 c3 fe ff       	call   c00077b9 <malloc>
c001b455:	83 c4 10             	add    esp,0x10
c001b458:	89 c3                	mov    ebx,eax
c001b45a:	83 ec 0c             	sub    esp,0xc
c001b45d:	53                   	push   ebx
c001b45e:	e8 8f ff ff ff       	call   c001b3f2 <IOAPIC::IOAPIC()>
c001b463:	83 c4 10             	add    esp,0x10
c001b466:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b469:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b46c:	25 ff 00 00 00       	and    eax,0xff
c001b471:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b474:	89 14 85 80 5b 02 c0 	mov    DWORD PTR [eax*4-0x3ffda480],edx
c001b47b:	a1 60 5b 02 c0       	mov    eax,ds:0xc0025b60
c001b480:	40                   	inc    eax
c001b481:	a3 60 5b 02 c0       	mov    ds:0xc0025b60,eax
c001b486:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001b48b:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001b491:	83 ec 08             	sub    esp,0x8
c001b494:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b497:	50                   	push   eax
c001b498:	e8 cf 04 ff ff       	call   c000b96c <Device::addChild(Device*)>
c001b49d:	83 c4 10             	add    esp,0x10
c001b4a0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b4a3:	8b 00                	mov    eax,DWORD PTR [eax]
c001b4a5:	83 c0 08             	add    eax,0x8
c001b4a8:	8b 10                	mov    edx,DWORD PTR [eax]
c001b4aa:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b4ad:	25 ff 00 00 00       	and    eax,0xff
c001b4b2:	6a 00                	push   0x0
c001b4b4:	6a 00                	push   0x0
c001b4b6:	50                   	push   eax
c001b4b7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b4ba:	ff d2                	call   edx
c001b4bc:	83 c4 10             	add    esp,0x10
c001b4bf:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b4c2:	e9 6e ff ff ff       	jmp    c001b435 <apicOpen()+0x1b>
c001b4c7:	c6 05 a0 5b 02 c0 01 	mov    BYTE PTR ds:0xc0025ba0,0x1
c001b4ce:	e8 dd fe ff ff       	call   c001b3b0 <apicGetBase()>
c001b4d3:	05 f0 00 00 00       	add    eax,0xf0
c001b4d8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b4db:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b4de:	8b 00                	mov    eax,DWORD PTR [eax]
c001b4e0:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b4e3:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b4ea:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b4f1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b4f4:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b4f7:	89 10                	mov    DWORD PTR [eax],edx
c001b4f9:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b500:	a1 d0 46 02 c0       	mov    eax,ds:0xc00246d0
c001b505:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b508:	7d 70                	jge    c001b57a <apicOpen()+0x160>
c001b50a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b50d:	8b 04 85 e0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb920]
c001b514:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b517:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b51a:	8b 04 85 e0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb920]
c001b521:	c1 e8 08             	shr    eax,0x8
c001b524:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b528:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b52b:	8b 04 85 e0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb920]
c001b532:	c1 e8 18             	shr    eax,0x18
c001b535:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b538:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b53c:	75 37                	jne    c001b575 <apicOpen()+0x15b>
c001b53e:	e8 6d fe ff ff       	call   c001b3b0 <apicGetBase()>
c001b543:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b547:	75 07                	jne    c001b550 <apicOpen()+0x136>
c001b549:	ba 60 03 00 00       	mov    edx,0x360
c001b54e:	eb 05                	jmp    c001b555 <apicOpen()+0x13b>
c001b550:	ba 50 03 00 00       	mov    edx,0x350
c001b555:	01 d0                	add    eax,edx
c001b557:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b55a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b55d:	8b 00                	mov    eax,DWORD PTR [eax]
c001b55f:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b562:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b569:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b56d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b570:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b573:	89 10                	mov    DWORD PTR [eax],edx
c001b575:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b578:	eb 86                	jmp    c001b500 <apicOpen()+0xe6>
c001b57a:	90                   	nop
c001b57b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b57e:	c9                   	leave  
c001b57f:	c3                   	ret    

c001b580 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b580:	55                   	push   ebp
c001b581:	89 e5                	mov    ebp,esp
c001b583:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b586:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b58c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b58f:	72 1d                	jb     c001b5ae <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b591:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b594:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b59a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b59d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b5a3:	01 d0                	add    eax,edx
c001b5a5:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b5a8:	73 04                	jae    c001b5ae <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b5aa:	b0 01                	mov    al,0x1
c001b5ac:	eb 02                	jmp    c001b5b0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b5ae:	b0 00                	mov    al,0x0
c001b5b0:	5d                   	pop    ebp
c001b5b1:	c3                   	ret    

c001b5b2 <IOAPIC::read(int)>:
c001b5b2:	55                   	push   ebp
c001b5b3:	89 e5                	mov    ebp,esp
c001b5b5:	83 ec 10             	sub    esp,0x10
c001b5b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5bb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b5c1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b5c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b5c7:	31 d2                	xor    edx,edx
c001b5c9:	88 c2                	mov    dl,al
c001b5cb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b5ce:	89 10                	mov    DWORD PTR [eax],edx
c001b5d0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b5d3:	83 c0 10             	add    eax,0x10
c001b5d6:	8b 00                	mov    eax,DWORD PTR [eax]
c001b5d8:	c9                   	leave  
c001b5d9:	c3                   	ret    

c001b5da <IOAPIC::open(int, int, void*)>:
c001b5da:	55                   	push   ebp
c001b5db:	89 e5                	mov    ebp,esp
c001b5dd:	57                   	push   edi
c001b5de:	56                   	push   esi
c001b5df:	53                   	push   ebx
c001b5e0:	83 ec 04             	sub    esp,0x4
c001b5e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5e6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b5e9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b5ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5f2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b5f8:	8b 14 85 c0 47 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb840]
c001b5ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b602:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b608:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b60b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b611:	8b 14 85 40 48 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb7c0]
c001b618:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b61b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b621:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b624:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b62a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b62d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b633:	89 c6                	mov    esi,eax
c001b635:	81 e6 ff 00 00 00    	and    esi,0xff
c001b63b:	89 d0                	mov    eax,edx
c001b63d:	ba 00 00 00 00       	mov    edx,0x0
c001b642:	89 c7                	mov    edi,eax
c001b644:	83 e7 ff             	and    edi,0xffffffff
c001b647:	89 f9                	mov    ecx,edi
c001b649:	89 d0                	mov    eax,edx
c001b64b:	25 ff 00 00 00       	and    eax,0xff
c001b650:	89 c3                	mov    ebx,eax
c001b652:	89 c8                	mov    eax,ecx
c001b654:	89 da                	mov    edx,ebx
c001b656:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b659:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b65c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b660:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b664:	83 e0 00             	and    eax,0x0
c001b667:	09 d0                	or     eax,edx
c001b669:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b66d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b670:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b676:	8d 50 01             	lea    edx,[eax+0x1]
c001b679:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b67c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b682:	31 d2                	xor    edx,edx
c001b684:	88 c2                	mov    dl,al
c001b686:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b689:	83 c2 08             	add    edx,0x8
c001b68c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b690:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b696:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b69c:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b6a0:	6a 01                	push   0x1
c001b6a2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b6a5:	e8 08 ff ff ff       	call   c001b5b2 <IOAPIC::read(int)>
c001b6aa:	83 c4 08             	add    esp,0x8
c001b6ad:	c1 f8 10             	sar    eax,0x10
c001b6b0:	25 ff 00 00 00       	and    eax,0xff
c001b6b5:	8d 50 01             	lea    edx,[eax+0x1]
c001b6b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6bb:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b6c1:	b8 00 00 00 00       	mov    eax,0x0
c001b6c6:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b6c9:	5b                   	pop    ebx
c001b6ca:	5e                   	pop    esi
c001b6cb:	5f                   	pop    edi
c001b6cc:	5d                   	pop    ebp
c001b6cd:	c3                   	ret    

c001b6ce <IOAPIC::write(int, int)>:
c001b6ce:	55                   	push   ebp
c001b6cf:	89 e5                	mov    ebp,esp
c001b6d1:	83 ec 10             	sub    esp,0x10
c001b6d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6d7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b6dd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b6e0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b6e3:	31 d2                	xor    edx,edx
c001b6e5:	88 c2                	mov    dl,al
c001b6e7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b6ea:	89 10                	mov    DWORD PTR [eax],edx
c001b6ec:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b6ef:	8d 50 10             	lea    edx,[eax+0x10]
c001b6f2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b6f5:	89 02                	mov    DWORD PTR [edx],eax
c001b6f7:	90                   	nop
c001b6f8:	c9                   	leave  
c001b6f9:	c3                   	ret    

c001b6fa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b6fa:	55                   	push   ebp
c001b6fb:	89 e5                	mov    ebp,esp
c001b6fd:	53                   	push   ebx
c001b6fe:	83 ec 2c             	sub    esp,0x2c
c001b701:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b704:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b707:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b70a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b70d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b710:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b713:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b716:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b719:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b71c:	88 d8                	mov    al,bl
c001b71e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b721:	88 c8                	mov    al,cl
c001b723:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b726:	88 d0                	mov    al,dl
c001b728:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b72b:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b72e:	25 ff 00 00 00       	and    eax,0xff
c001b733:	83 c0 08             	add    eax,0x8
c001b736:	01 c0                	add    eax,eax
c001b738:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b73b:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b73e:	25 ff 00 00 00       	and    eax,0xff
c001b743:	83 c0 08             	add    eax,0x8
c001b746:	01 c0                	add    eax,eax
c001b748:	40                   	inc    eax
c001b749:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b74c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b74f:	50                   	push   eax
c001b750:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b753:	e8 5a fe ff ff       	call   c001b5b2 <IOAPIC::read(int)>
c001b758:	83 c4 08             	add    esp,0x8
c001b75b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b75e:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b765:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b768:	c1 e0 18             	shl    eax,0x18
c001b76b:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b76e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b771:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b774:	52                   	push   edx
c001b775:	50                   	push   eax
c001b776:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b779:	e8 50 ff ff ff       	call   c001b6ce <IOAPIC::write(int, int)>
c001b77e:	83 c4 0c             	add    esp,0xc
c001b781:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b784:	50                   	push   eax
c001b785:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b788:	e8 25 fe ff ff       	call   c001b5b2 <IOAPIC::read(int)>
c001b78d:	83 c4 08             	add    esp,0x8
c001b790:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b793:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b79a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b7a1:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b7a8:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b7ac:	74 09                	je     c001b7b7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b7ae:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b7b5:	eb 07                	jmp    c001b7be <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b7b7:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b7be:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b7c2:	74 09                	je     c001b7cd <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b7c4:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b7cb:	eb 07                	jmp    c001b7d4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b7cd:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b7d4:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b7db:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b7de:	25 ff 00 00 00       	and    eax,0xff
c001b7e3:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b7e6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b7e9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b7ec:	52                   	push   edx
c001b7ed:	50                   	push   eax
c001b7ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b7f1:	e8 d8 fe ff ff       	call   c001b6ce <IOAPIC::write(int, int)>
c001b7f6:	83 c4 0c             	add    esp,0xc
c001b7f9:	90                   	nop
c001b7fa:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b7fd:	c9                   	leave  
c001b7fe:	c3                   	ret    
c001b7ff:	90                   	nop

c001b800 <APICTimer::close(int, int, void*)>:
c001b800:	b8 00 00 00 00       	mov    eax,0x0
c001b805:	c3                   	ret    
c001b806:	66 90                	xchg   ax,ax

c001b808 <apicTimerHandler(regs*, void*)>:
c001b808:	83 ec 0c             	sub    esp,0xc
c001b80b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b80f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b811:	b8 10 27 00 00       	mov    eax,0x2710
c001b816:	ba 00 00 00 00       	mov    edx,0x0
c001b81b:	f7 f1                	div    ecx
c001b81d:	83 ec 0c             	sub    esp,0xc
c001b820:	50                   	push   eax
c001b821:	e8 1a 1a ff ff       	call   c000d240 <timerHandler(unsigned int)>
c001b826:	83 c4 10             	add    esp,0x10
c001b829:	90                   	nop
c001b82a:	83 c4 0c             	add    esp,0xc
c001b82d:	c3                   	ret    
c001b82e:	66 90                	xchg   ax,ax

c001b830 <APICTimer::open(int, int, void*)>:
c001b830:	83 ec 0c             	sub    esp,0xc
c001b833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b837:	8b 00                	mov    eax,DWORD PTR [eax]
c001b839:	83 c0 24             	add    eax,0x24
c001b83c:	8b 00                	mov    eax,DWORD PTR [eax]
c001b83e:	83 ec 08             	sub    esp,0x8
c001b841:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b845:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b849:	ff d0                	call   eax
c001b84b:	83 c4 10             	add    esp,0x10
c001b84e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b852:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b856:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b85c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b860:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b864:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b86a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b86e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b874:	83 ec 0c             	sub    esp,0xc
c001b877:	51                   	push   ecx
c001b878:	6a 01                	push   0x1
c001b87a:	68 08 b8 01 c0       	push   0xc001b808
c001b87f:	52                   	push   edx
c001b880:	50                   	push   eax
c001b881:	e8 92 00 ff ff       	call   c000b918 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b886:	83 c4 20             	add    esp,0x20
c001b889:	89 c2                	mov    edx,eax
c001b88b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b88f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b895:	b8 00 00 00 00       	mov    eax,0x0
c001b89a:	83 c4 0c             	add    esp,0xc
c001b89d:	c3                   	ret    
c001b89e:	66 90                	xchg   ax,ax

c001b8a0 <APICTimer::write(int)>:
c001b8a0:	83 ec 0c             	sub    esp,0xc
c001b8a3:	83 ec 0c             	sub    esp,0xc
c001b8a6:	68 e8 f6 01 c0       	push   0xc001f6e8
c001b8ab:	e8 ff 48 ff ff       	call   c00101af <KePanic(char const*)>
c001b8b0:	83 c4 10             	add    esp,0x10
c001b8b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b8bb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b8c1:	90                   	nop
c001b8c2:	83 c4 0c             	add    esp,0xc
c001b8c5:	c3                   	ret    
c001b8c6:	66 90                	xchg   ax,ax

c001b8c8 <APICTimer::APICTimer()>:
c001b8c8:	83 ec 0c             	sub    esp,0xc
c001b8cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8cf:	83 ec 08             	sub    esp,0x8
c001b8d2:	68 f8 f6 01 c0       	push   0xc001f6f8
c001b8d7:	50                   	push   eax
c001b8d8:	e8 97 18 ff ff       	call   c000d174 <Timer::Timer(char const*)>
c001b8dd:	83 c4 10             	add    esp,0x10
c001b8e0:	ba 0c f7 01 c0       	mov    edx,0xc001f70c
c001b8e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8e9:	89 10                	mov    DWORD PTR [eax],edx
c001b8eb:	90                   	nop
c001b8ec:	83 c4 0c             	add    esp,0xc
c001b8ef:	c3                   	ret    

c001b8f0 <PIT::write(int)>:
c001b8f0:	83 ec 10             	sub    esp,0x10
c001b8f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b8f7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b8fb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b901:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b905:	a3 a4 5b 02 c0       	mov    ds:0xc0025ba4,eax
c001b90a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001b90f:	99                   	cdq    
c001b910:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001b914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b918:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001b91f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001b924:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b928:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b92d:	ee                   	out    dx,al
c001b92e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b932:	25 ff 00 00 00       	and    eax,0xff
c001b937:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001b93e:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001b942:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b946:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b94b:	ee                   	out    dx,al
c001b94c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b950:	c1 f8 08             	sar    eax,0x8
c001b953:	25 ff 00 00 00       	and    eax,0xff
c001b958:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001b95f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b963:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b967:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b96c:	ee                   	out    dx,al
c001b96d:	90                   	nop
c001b96e:	83 c4 10             	add    esp,0x10
c001b971:	c3                   	ret    
c001b972:	66 90                	xchg   ax,ax

c001b974 <pitHandler(regs*, void*)>:
c001b974:	83 ec 0c             	sub    esp,0xc
c001b977:	8b 0d a4 5b 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ba4
c001b97d:	b8 10 27 00 00       	mov    eax,0x2710
c001b982:	99                   	cdq    
c001b983:	f7 f9                	idiv   ecx
c001b985:	83 ec 0c             	sub    esp,0xc
c001b988:	50                   	push   eax
c001b989:	e8 b2 18 ff ff       	call   c000d240 <timerHandler(unsigned int)>
c001b98e:	83 c4 10             	add    esp,0x10
c001b991:	90                   	nop
c001b992:	83 c4 0c             	add    esp,0xc
c001b995:	c3                   	ret    
c001b996:	66 90                	xchg   ax,ax

c001b998 <PIT::open(int, int, void*)>:
c001b998:	83 ec 0c             	sub    esp,0xc
c001b99b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b99f:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9a1:	83 c0 24             	add    eax,0x24
c001b9a4:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9a6:	83 ec 08             	sub    esp,0x8
c001b9a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9b1:	ff d0                	call   eax
c001b9b3:	83 c4 10             	add    esp,0x10
c001b9b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9ba:	83 ec 0c             	sub    esp,0xc
c001b9bd:	6a 00                	push   0x0
c001b9bf:	6a 01                	push   0x1
c001b9c1:	68 74 b9 01 c0       	push   0xc001b974
c001b9c6:	6a 00                	push   0x0
c001b9c8:	50                   	push   eax
c001b9c9:	e8 4a ff fe ff       	call   c000b918 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b9ce:	83 c4 20             	add    esp,0x20
c001b9d1:	89 c2                	mov    edx,eax
c001b9d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9d7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b9dd:	b8 00 00 00 00       	mov    eax,0x0
c001b9e2:	83 c4 0c             	add    esp,0xc
c001b9e5:	c3                   	ret    
c001b9e6:	66 90                	xchg   ax,ax

c001b9e8 <PIT::close(int, int, void*)>:
c001b9e8:	83 ec 0c             	sub    esp,0xc
c001b9eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9ef:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b9f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9fd:	6a 01                	push   0x1
c001b9ff:	68 74 b9 01 c0       	push   0xc001b974
c001ba04:	6a 00                	push   0x0
c001ba06:	50                   	push   eax
c001ba07:	e8 42 ff fe ff       	call   c000b94e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ba0c:	83 c4 10             	add    esp,0x10
c001ba0f:	b8 00 00 00 00       	mov    eax,0x0
c001ba14:	83 c4 0c             	add    esp,0xc
c001ba17:	c3                   	ret    

c001ba18 <PIT::PIT()>:
c001ba18:	83 ec 0c             	sub    esp,0xc
c001ba1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba1f:	83 ec 08             	sub    esp,0x8
c001ba22:	68 34 f7 01 c0       	push   0xc001f734
c001ba27:	50                   	push   eax
c001ba28:	e8 47 17 ff ff       	call   c000d174 <Timer::Timer(char const*)>
c001ba2d:	83 c4 10             	add    esp,0x10
c001ba30:	ba 5c f7 01 c0       	mov    edx,0xc001f75c
c001ba35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba39:	89 10                	mov    DWORD PTR [eax],edx
c001ba3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba3f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ba45:	31 d2                	xor    edx,edx
c001ba47:	88 c2                	mov    dl,al
c001ba49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba4d:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001ba54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba58:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ba5e:	31 d2                	xor    edx,edx
c001ba60:	88 c2                	mov    dl,al
c001ba62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba66:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001ba6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba6f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ba75:	8d 50 01             	lea    edx,[eax+0x1]
c001ba78:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ba7c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ba82:	31 d2                	xor    edx,edx
c001ba84:	88 c2                	mov    dl,al
c001ba86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba8a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ba8e:	83 e1 3f             	and    ecx,0x3f
c001ba91:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ba95:	90                   	nop
c001ba96:	83 c4 0c             	add    esp,0xc
c001ba99:	c3                   	ret    
c001ba9a:	66 90                	xchg   ax,ax
c001ba9c:	66 90                	xchg   ax,ax
c001ba9e:	66 90                	xchg   ax,ax

c001baa0 <avxDetect>:
c001baa0:	b8 01 00 00 00       	mov    eax,0x1
c001baa5:	0f a2                	cpuid  
c001baa7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001baad:	74 15                	je     c001bac4 <avxDetect.noAVX>
c001baaf:	b8 01 00 00 00       	mov    eax,0x1
c001bab4:	0f a2                	cpuid  
c001bab6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001babc:	74 06                	je     c001bac4 <avxDetect.noAVX>
c001babe:	b8 01 00 00 00       	mov    eax,0x1
c001bac3:	c3                   	ret    

c001bac4 <avxDetect.noAVX>:
c001bac4:	b8 00 00 00 00       	mov    eax,0x0
c001bac9:	c3                   	ret    

c001baca <avxSave>:
c001baca:	53                   	push   ebx
c001bacb:	52                   	push   edx
c001bacc:	31 c0                	xor    eax,eax
c001bace:	48                   	dec    eax
c001bacf:	89 c2                	mov    edx,eax
c001bad1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bad5:	0f ae 23             	xsave  [ebx]
c001bad8:	5a                   	pop    edx
c001bad9:	5b                   	pop    ebx
c001bada:	c3                   	ret    

c001badb <avxLoad>:
c001badb:	53                   	push   ebx
c001badc:	52                   	push   edx
c001badd:	31 c0                	xor    eax,eax
c001badf:	48                   	dec    eax
c001bae0:	89 c2                	mov    edx,eax
c001bae2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bae6:	0f ae 2b             	xrstor [ebx]
c001bae9:	5a                   	pop    edx
c001baea:	5b                   	pop    ebx
c001baeb:	c3                   	ret    

c001baec <avxInit>:
c001baec:	e8 b7 02 00 00       	call   c001bda8 <sseInit>
c001baf1:	50                   	push   eax
c001baf2:	51                   	push   ecx
c001baf3:	0f 20 e0             	mov    eax,cr4
c001baf6:	0d 00 00 04 00       	or     eax,0x40000
c001bafb:	0f 22 e0             	mov    cr4,eax
c001bafe:	31 c9                	xor    ecx,ecx
c001bb00:	0f 01 d0             	xgetbv 
c001bb03:	0d 07 00 00 00       	or     eax,0x7
c001bb08:	0f 01 d1             	xsetbv 
c001bb0b:	59                   	pop    ecx
c001bb0c:	58                   	pop    eax
c001bb0d:	c3                   	ret    

c001bb0e <avxClose>:
c001bb0e:	c3                   	ret    

c001bb0f <wouldSheSayYes>:
c001bb0f:	c3                   	ret    
c001bb10:	49                   	dec    ecx
c001bb11:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001bb15:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001bb19:	75 20                	jne    c001bb3b <isr0+0xb>
c001bb1b:	4e                   	dec    esi
c001bb1c:	79 61                	jns    c001bb7f <isr7+0x3>
c001bb1e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001bb23:	66 90                	xchg   ax,ax
c001bb25:	66 90                	xchg   ax,ax
c001bb27:	66 90                	xchg   ax,ax
c001bb29:	66 90                	xchg   ax,ax
c001bb2b:	66 90                	xchg   ax,ax
c001bb2d:	66 90                	xchg   ax,ax
c001bb2f:	90                   	nop

c001bb30 <isr0>:
c001bb30:	fa                   	cli    
c001bb31:	68 00 00 00 00       	push   0x0
c001bb36:	68 00 00 00 00       	push   0x0
c001bb3b:	e9 44 01 00 00       	jmp    c001bc84 <int_common_stub>

c001bb40 <isr1>:
c001bb40:	fa                   	cli    
c001bb41:	6a 00                	push   0x0
c001bb43:	6a 01                	push   0x1
c001bb45:	e9 3a 01 00 00       	jmp    c001bc84 <int_common_stub>

c001bb4a <isr2>:
c001bb4a:	fa                   	cli    
c001bb4b:	6a 00                	push   0x0
c001bb4d:	6a 02                	push   0x2
c001bb4f:	e9 30 01 00 00       	jmp    c001bc84 <int_common_stub>

c001bb54 <isr3>:
c001bb54:	fa                   	cli    
c001bb55:	6a 00                	push   0x0
c001bb57:	6a 03                	push   0x3
c001bb59:	e9 26 01 00 00       	jmp    c001bc84 <int_common_stub>

c001bb5e <isr4>:
c001bb5e:	fa                   	cli    
c001bb5f:	6a 00                	push   0x0
c001bb61:	6a 04                	push   0x4
c001bb63:	e9 1c 01 00 00       	jmp    c001bc84 <int_common_stub>

c001bb68 <isr5>:
c001bb68:	fa                   	cli    
c001bb69:	6a 00                	push   0x0
c001bb6b:	6a 05                	push   0x5
c001bb6d:	e9 12 01 00 00       	jmp    c001bc84 <int_common_stub>

c001bb72 <isr6>:
c001bb72:	fa                   	cli    
c001bb73:	6a 00                	push   0x0
c001bb75:	6a 06                	push   0x6
c001bb77:	e9 08 01 00 00       	jmp    c001bc84 <int_common_stub>

c001bb7c <isr7>:
c001bb7c:	fa                   	cli    
c001bb7d:	6a 00                	push   0x0
c001bb7f:	6a 07                	push   0x7
c001bb81:	e9 fe 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bb86 <isr8>:
c001bb86:	fa                   	cli    
c001bb87:	6a 08                	push   0x8
c001bb89:	e9 f6 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bb8e <isr9>:
c001bb8e:	fa                   	cli    
c001bb8f:	6a 00                	push   0x0
c001bb91:	6a 09                	push   0x9
c001bb93:	e9 ec 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bb98 <isr10>:
c001bb98:	fa                   	cli    
c001bb99:	6a 0a                	push   0xa
c001bb9b:	e9 e4 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bba0 <isr11>:
c001bba0:	fa                   	cli    
c001bba1:	6a 0b                	push   0xb
c001bba3:	e9 dc 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bba8 <isr12>:
c001bba8:	fa                   	cli    
c001bba9:	6a 0c                	push   0xc
c001bbab:	e9 d4 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bbb0 <isr13>:
c001bbb0:	fa                   	cli    
c001bbb1:	6a 0d                	push   0xd
c001bbb3:	e9 cc 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bbb8 <isr14>:
c001bbb8:	fa                   	cli    
c001bbb9:	6a 0e                	push   0xe
c001bbbb:	e9 c4 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bbc0 <isr15>:
c001bbc0:	fa                   	cli    
c001bbc1:	6a 00                	push   0x0
c001bbc3:	6a 0f                	push   0xf
c001bbc5:	e9 ba 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bbca <isr16>:
c001bbca:	fa                   	cli    
c001bbcb:	6a 00                	push   0x0
c001bbcd:	6a 10                	push   0x10
c001bbcf:	e9 b0 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bbd4 <isr17>:
c001bbd4:	fa                   	cli    
c001bbd5:	6a 00                	push   0x0
c001bbd7:	6a 11                	push   0x11
c001bbd9:	e9 a6 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bbde <isr18>:
c001bbde:	fa                   	cli    
c001bbdf:	6a 00                	push   0x0
c001bbe1:	6a 12                	push   0x12
c001bbe3:	e9 9c 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bbe8 <irq3>:
c001bbe8:	fa                   	cli    
c001bbe9:	6a 00                	push   0x0
c001bbeb:	6a 23                	push   0x23
c001bbed:	e9 92 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bbf2 <irq4>:
c001bbf2:	fa                   	cli    
c001bbf3:	6a 00                	push   0x0
c001bbf5:	6a 24                	push   0x24
c001bbf7:	e9 88 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bbfc <irq5>:
c001bbfc:	fa                   	cli    
c001bbfd:	6a 00                	push   0x0
c001bbff:	6a 25                	push   0x25
c001bc01:	e9 7e 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bc06 <irq6>:
c001bc06:	fa                   	cli    
c001bc07:	6a 00                	push   0x0
c001bc09:	6a 26                	push   0x26
c001bc0b:	e9 74 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bc10 <irq7>:
c001bc10:	fa                   	cli    
c001bc11:	6a 00                	push   0x0
c001bc13:	6a 27                	push   0x27
c001bc15:	e9 6a 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bc1a <irq8>:
c001bc1a:	fa                   	cli    
c001bc1b:	6a 00                	push   0x0
c001bc1d:	6a 28                	push   0x28
c001bc1f:	e9 60 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bc24 <irq9>:
c001bc24:	fa                   	cli    
c001bc25:	6a 00                	push   0x0
c001bc27:	6a 29                	push   0x29
c001bc29:	e9 56 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bc2e <irq10>:
c001bc2e:	fa                   	cli    
c001bc2f:	6a 00                	push   0x0
c001bc31:	6a 2a                	push   0x2a
c001bc33:	e9 4c 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bc38 <irq11>:
c001bc38:	fa                   	cli    
c001bc39:	6a 00                	push   0x0
c001bc3b:	6a 2b                	push   0x2b
c001bc3d:	e9 42 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bc42 <irq12>:
c001bc42:	fa                   	cli    
c001bc43:	6a 00                	push   0x0
c001bc45:	6a 2c                	push   0x2c
c001bc47:	e9 38 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bc4c <irq13>:
c001bc4c:	fa                   	cli    
c001bc4d:	6a 00                	push   0x0
c001bc4f:	6a 2d                	push   0x2d
c001bc51:	e9 2e 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bc56 <irq14>:
c001bc56:	fa                   	cli    
c001bc57:	6a 00                	push   0x0
c001bc59:	6a 2e                	push   0x2e
c001bc5b:	e9 24 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bc60 <irq15>:
c001bc60:	fa                   	cli    
c001bc61:	6a 00                	push   0x0
c001bc63:	6a 2f                	push   0x2f
c001bc65:	e9 1a 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bc6a <irq1>:
c001bc6a:	fa                   	cli    
c001bc6b:	6a 00                	push   0x0
c001bc6d:	6a 21                	push   0x21
c001bc6f:	eb 13                	jmp    c001bc84 <int_common_stub>

c001bc71 <irq2>:
c001bc71:	fa                   	cli    
c001bc72:	6a 00                	push   0x0
c001bc74:	6a 22                	push   0x22
c001bc76:	eb 0c                	jmp    c001bc84 <int_common_stub>

c001bc78 <isr96>:
c001bc78:	6a 00                	push   0x0
c001bc7a:	6a 60                	push   0x60
c001bc7c:	fb                   	sti    
c001bc7d:	eb 37                	jmp    c001bcb6 <syscall_common_stub>

c001bc7f <irq0>:
c001bc7f:	fa                   	cli    
c001bc80:	6a 00                	push   0x0
c001bc82:	6a 20                	push   0x20

c001bc84 <int_common_stub>:
c001bc84:	60                   	pusha  
c001bc85:	1e                   	push   ds
c001bc86:	06                   	push   es
c001bc87:	0f a0                	push   fs
c001bc89:	0f a8                	push   gs
c001bc8b:	66 b8 10 00          	mov    ax,0x10
c001bc8f:	66 8e d8             	mov    ds,ax
c001bc92:	66 8e c0             	mov    es,ax
c001bc95:	66 8e e0             	mov    fs,ax
c001bc98:	66 8e e8             	mov    gs,ax
c001bc9b:	54                   	push   esp
c001bc9c:	fc                   	cld    
c001bc9d:	e8 76 01 ff ff       	call   c000be18 <int_handler>
c001bca2:	81 c4 04 00 00 00    	add    esp,0x4
c001bca8:	0f a9                	pop    gs
c001bcaa:	0f a1                	pop    fs
c001bcac:	07                   	pop    es
c001bcad:	1f                   	pop    ds
c001bcae:	61                   	popa   
c001bcaf:	81 c4 08 00 00 00    	add    esp,0x8
c001bcb5:	cf                   	iret   

c001bcb6 <syscall_common_stub>:
c001bcb6:	60                   	pusha  
c001bcb7:	1e                   	push   ds
c001bcb8:	06                   	push   es
c001bcb9:	0f a0                	push   fs
c001bcbb:	0f a8                	push   gs
c001bcbd:	66 b8 10 00          	mov    ax,0x10
c001bcc1:	66 8e d8             	mov    ds,ax
c001bcc4:	66 8e c0             	mov    es,ax
c001bcc7:	66 8e e0             	mov    fs,ax
c001bcca:	66 8e e8             	mov    gs,ax
c001bccd:	54                   	push   esp
c001bcce:	fc                   	cld    
c001bccf:	e8 44 01 ff ff       	call   c000be18 <int_handler>
c001bcd4:	81 c4 04 00 00 00    	add    esp,0x4
c001bcda:	0f a9                	pop    gs
c001bcdc:	0f a1                	pop    fs
c001bcde:	07                   	pop    es
c001bcdf:	1f                   	pop    ds
c001bce0:	e8 1e 4a ff ff       	call   c0010703 <KiCheckSignalZ>
c001bce5:	3d 00 00 00 00       	cmp    eax,0x0
c001bcea:	74 1d                	je     c001bd09 <syscall_common_stub.skipSignals>
c001bcec:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001bcf0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bcf4:	89 e3                	mov    ebx,esp
c001bcf6:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001bcf9:	51                   	push   ecx
c001bcfa:	68 11 bd 01 c0       	push   0xc001bd11
c001bcff:	89 dc                	mov    esp,ebx
c001bd01:	61                   	popa   
c001bd02:	81 c4 08 00 00 00    	add    esp,0x8
c001bd08:	cf                   	iret   

c001bd09 <syscall_common_stub.skipSignals>:
c001bd09:	61                   	popa   
c001bd0a:	81 c4 08 00 00 00    	add    esp,0x8
c001bd10:	cf                   	iret   

c001bd11 <irq16>:
c001bd11:	fa                   	cli    
c001bd12:	6a 00                	push   0x0
c001bd14:	6a 30                	push   0x30
c001bd16:	e9 69 ff ff ff       	jmp    c001bc84 <int_common_stub>

c001bd1b <irq17>:
c001bd1b:	fa                   	cli    
c001bd1c:	6a 00                	push   0x0
c001bd1e:	6a 31                	push   0x31
c001bd20:	e9 5f ff ff ff       	jmp    c001bc84 <int_common_stub>

c001bd25 <irq18>:
c001bd25:	fa                   	cli    
c001bd26:	6a 00                	push   0x0
c001bd28:	6a 32                	push   0x32
c001bd2a:	e9 55 ff ff ff       	jmp    c001bc84 <int_common_stub>

c001bd2f <irq19>:
c001bd2f:	fa                   	cli    
c001bd30:	6a 00                	push   0x0
c001bd32:	6a 33                	push   0x33
c001bd34:	e9 4b ff ff ff       	jmp    c001bc84 <int_common_stub>

c001bd39 <irq20>:
c001bd39:	fa                   	cli    
c001bd3a:	6a 00                	push   0x0
c001bd3c:	6a 34                	push   0x34
c001bd3e:	e9 41 ff ff ff       	jmp    c001bc84 <int_common_stub>

c001bd43 <irq21>:
c001bd43:	fa                   	cli    
c001bd44:	6a 00                	push   0x0
c001bd46:	6a 35                	push   0x35
c001bd48:	e9 37 ff ff ff       	jmp    c001bc84 <int_common_stub>

c001bd4d <irq22>:
c001bd4d:	fa                   	cli    
c001bd4e:	6a 00                	push   0x0
c001bd50:	6a 36                	push   0x36
c001bd52:	e9 2d ff ff ff       	jmp    c001bc84 <int_common_stub>

c001bd57 <irq23>:
c001bd57:	fa                   	cli    
c001bd58:	6a 00                	push   0x0
c001bd5a:	6a 37                	push   0x37
c001bd5c:	e9 23 ff ff ff       	jmp    c001bc84 <int_common_stub>
c001bd61:	66 90                	xchg   ax,ax
c001bd63:	66 90                	xchg   ax,ax
c001bd65:	66 90                	xchg   ax,ax
c001bd67:	66 90                	xchg   ax,ax
c001bd69:	66 90                	xchg   ax,ax
c001bd6b:	66 90                	xchg   ax,ax
c001bd6d:	66 90                	xchg   ax,ax
c001bd6f:	90                   	nop

c001bd70 <i386GetRDRAND>:
c001bd70:	b9 64 00 00 00       	mov    ecx,0x64

c001bd75 <retry>:
c001bd75:	0f c7 f0             	rdrand eax
c001bd78:	72 05                	jb     c001bd7f <retry.done>
c001bd7a:	e2 f9                	loop   c001bd75 <retry>

c001bd7c <retry.fail>:
c001bd7c:	31 c0                	xor    eax,eax
c001bd7e:	c3                   	ret    

c001bd7f <retry.done>:
c001bd7f:	c3                   	ret    

c001bd80 <absolutelyNoChanceInHell>:
c001bd80:	b8 01 00 00 00       	mov    eax,0x1
c001bd85:	0f a2                	cpuid  
c001bd87:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001bd8d:	74 06                	je     c001bd95 <sseDetect.noSSE>
c001bd8f:	b8 01 00 00 00       	mov    eax,0x1
c001bd94:	c3                   	ret    

c001bd95 <sseDetect.noSSE>:
c001bd95:	31 c0                	xor    eax,eax
c001bd97:	c3                   	ret    

c001bd98 <sseSave>:
c001bd98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd9c:	0f ae 00             	fxsave [eax]
c001bd9f:	c3                   	ret    

c001bda0 <sseLoad>:
c001bda0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bda4:	0f ae 08             	fxrstor [eax]
c001bda7:	c3                   	ret    

c001bda8 <sseInit>:
c001bda8:	e8 42 00 00 00       	call   c001bdef <x87Init>
c001bdad:	0f 20 e0             	mov    eax,cr4
c001bdb0:	66 0d 00 06          	or     ax,0x600
c001bdb4:	0f 22 e0             	mov    cr4,eax
c001bdb7:	c3                   	ret    

c001bdb8 <sseClose>:
c001bdb8:	c3                   	ret    
c001bdb9:	66 90                	xchg   ax,ax
c001bdbb:	66 90                	xchg   ax,ax
c001bdbd:	66 90                	xchg   ax,ax
c001bdbf:	90                   	nop

c001bdc0 <value_37F>:
c001bdc0:	7f 03                	jg     c001bdc5 <value_37A+0x1>

c001bdc2 <value_37E>:
c001bdc2:	7e 03                	jle    c001bdc7 <x87Detect+0x1>

c001bdc4 <value_37A>:
c001bdc4:	7a 03                	jp     c001bdc9 <x87Detect+0x3>

c001bdc6 <x87Detect>:
c001bdc6:	b8 01 00 00 00       	mov    eax,0x1
c001bdcb:	0f a2                	cpuid  
c001bdcd:	f7 c2 01 00 00 00    	test   edx,0x1
c001bdd3:	74 06                	je     c001bddb <x87Detect.nox87>
c001bdd5:	b8 01 00 00 00       	mov    eax,0x1
c001bdda:	c3                   	ret    

c001bddb <x87Detect.nox87>:
c001bddb:	b8 00 00 00 00       	mov    eax,0x0
c001bde0:	c3                   	ret    

c001bde1 <x87Save>:
c001bde1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bde5:	dd 30                	fnsave [eax]
c001bde7:	c3                   	ret    

c001bde8 <x87Load>:
c001bde8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bdec:	dd 20                	frstor [eax]
c001bdee:	c3                   	ret    

c001bdef <x87Init>:
c001bdef:	0f 20 c0             	mov    eax,cr0
c001bdf2:	66 25 fb ff          	and    ax,0xfffb
c001bdf6:	66 0d 22 00          	or     ax,0x22
c001bdfa:	0f 22 c0             	mov    cr0,eax
c001bdfd:	db e3                	fninit 
c001bdff:	0f 06                	clts   
c001be01:	d9 2d c4 bd 01 c0    	fldcw  WORD PTR ds:0xc001bdc4
c001be07:	c3                   	ret    

c001be08 <x87Close>:
c001be08:	c3                   	ret    
c001be09:	66 90                	xchg   ax,ax
c001be0b:	90                   	nop

c001be0c <__do_global_ctors_aux>:
c001be0c:	a1 bc cd 01 c0       	mov    eax,ds:0xc001cdbc
c001be11:	83 f8 ff             	cmp    eax,0xffffffff
c001be14:	74 1a                	je     c001be30 <__do_global_ctors_aux+0x24>
c001be16:	55                   	push   ebp
c001be17:	89 e5                	mov    ebp,esp
c001be19:	53                   	push   ebx
c001be1a:	52                   	push   edx
c001be1b:	bb bc cd 01 c0       	mov    ebx,0xc001cdbc
c001be20:	ff d0                	call   eax
c001be22:	83 eb 04             	sub    ebx,0x4
c001be25:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be27:	83 f8 ff             	cmp    eax,0xffffffff
c001be2a:	75 f4                	jne    c001be20 <__do_global_ctors_aux+0x14>
c001be2c:	58                   	pop    eax
c001be2d:	5b                   	pop    ebx
c001be2e:	5d                   	pop    ebp
c001be2f:	c3                   	ret    
c001be30:	c3                   	ret    
c001be31:	66 90                	xchg   ax,ax
c001be33:	90                   	nop

c001be34 <__divdi3>:
c001be34:	55                   	push   ebp
c001be35:	57                   	push   edi
c001be36:	56                   	push   esi
c001be37:	53                   	push   ebx
c001be38:	83 ec 1c             	sub    esp,0x1c
c001be3b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001be3f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001be43:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001be46:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001be4a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001be4e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001be52:	85 db                	test   ebx,ebx
c001be54:	0f 88 8e 00 00 00    	js     c001bee8 <__divdi3+0xb4>
c001be5a:	89 dd                	mov    ebp,ebx
c001be5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001be64:	89 d3                	mov    ebx,edx
c001be66:	85 d2                	test   edx,edx
c001be68:	79 0d                	jns    c001be77 <__divdi3+0x43>
c001be6a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001be6e:	f7 d8                	neg    eax
c001be70:	83 d2 00             	adc    edx,0x0
c001be73:	f7 da                	neg    edx
c001be75:	89 d3                	mov    ebx,edx
c001be77:	89 c7                	mov    edi,eax
c001be79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001be7c:	85 db                	test   ebx,ebx
c001be7e:	75 48                	jne    c001bec8 <__divdi3+0x94>
c001be80:	39 ef                	cmp    edi,ebp
c001be82:	76 24                	jbe    c001bea8 <__divdi3+0x74>
c001be84:	89 ea                	mov    edx,ebp
c001be86:	f7 f7                	div    edi
c001be88:	89 c1                	mov    ecx,eax
c001be8a:	31 f6                	xor    esi,esi
c001be8c:	89 c8                	mov    eax,ecx
c001be8e:	89 f2                	mov    edx,esi
c001be90:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001be94:	85 c9                	test   ecx,ecx
c001be96:	74 07                	je     c001be9f <__divdi3+0x6b>
c001be98:	f7 d8                	neg    eax
c001be9a:	83 d2 00             	adc    edx,0x0
c001be9d:	f7 da                	neg    edx
c001be9f:	83 c4 1c             	add    esp,0x1c
c001bea2:	5b                   	pop    ebx
c001bea3:	5e                   	pop    esi
c001bea4:	5f                   	pop    edi
c001bea5:	5d                   	pop    ebp
c001bea6:	c3                   	ret    
c001bea7:	90                   	nop
c001bea8:	85 ff                	test   edi,edi
c001beaa:	75 0b                	jne    c001beb7 <__divdi3+0x83>
c001beac:	b8 01 00 00 00       	mov    eax,0x1
c001beb1:	31 d2                	xor    edx,edx
c001beb3:	f7 f3                	div    ebx
c001beb5:	89 c7                	mov    edi,eax
c001beb7:	31 d2                	xor    edx,edx
c001beb9:	89 e8                	mov    eax,ebp
c001bebb:	f7 f7                	div    edi
c001bebd:	89 c6                	mov    esi,eax
c001bebf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bec2:	f7 f7                	div    edi
c001bec4:	89 c1                	mov    ecx,eax
c001bec6:	eb c4                	jmp    c001be8c <__divdi3+0x58>
c001bec8:	39 eb                	cmp    ebx,ebp
c001beca:	77 3c                	ja     c001bf08 <__divdi3+0xd4>
c001becc:	0f bd f3             	bsr    esi,ebx
c001becf:	83 f6 1f             	xor    esi,0x1f
c001bed2:	75 40                	jne    c001bf14 <__divdi3+0xe0>
c001bed4:	39 eb                	cmp    ebx,ebp
c001bed6:	72 09                	jb     c001bee1 <__divdi3+0xad>
c001bed8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001bedb:	0f 87 97 00 00 00    	ja     c001bf78 <__divdi3+0x144>
c001bee1:	b9 01 00 00 00       	mov    ecx,0x1
c001bee6:	eb a4                	jmp    c001be8c <__divdi3+0x58>
c001bee8:	f7 d9                	neg    ecx
c001beea:	83 d3 00             	adc    ebx,0x0
c001beed:	f7 db                	neg    ebx
c001beef:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bef2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001bef6:	89 dd                	mov    ebp,ebx
c001bef8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001bf00:	e9 5f ff ff ff       	jmp    c001be64 <__divdi3+0x30>
c001bf05:	8d 76 00             	lea    esi,[esi+0x0]
c001bf08:	31 f6                	xor    esi,esi
c001bf0a:	31 c9                	xor    ecx,ecx
c001bf0c:	e9 7b ff ff ff       	jmp    c001be8c <__divdi3+0x58>
c001bf11:	8d 76 00             	lea    esi,[esi+0x0]
c001bf14:	b8 20 00 00 00       	mov    eax,0x20
c001bf19:	29 f0                	sub    eax,esi
c001bf1b:	89 f1                	mov    ecx,esi
c001bf1d:	d3 e3                	shl    ebx,cl
c001bf1f:	89 fa                	mov    edx,edi
c001bf21:	88 c1                	mov    cl,al
c001bf23:	d3 ea                	shr    edx,cl
c001bf25:	09 da                	or     edx,ebx
c001bf27:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bf2b:	89 f1                	mov    ecx,esi
c001bf2d:	d3 e7                	shl    edi,cl
c001bf2f:	89 eb                	mov    ebx,ebp
c001bf31:	88 c1                	mov    cl,al
c001bf33:	d3 eb                	shr    ebx,cl
c001bf35:	89 f1                	mov    ecx,esi
c001bf37:	d3 e5                	shl    ebp,cl
c001bf39:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001bf3c:	88 c1                	mov    cl,al
c001bf3e:	d3 ea                	shr    edx,cl
c001bf40:	09 d5                	or     ebp,edx
c001bf42:	89 e8                	mov    eax,ebp
c001bf44:	89 da                	mov    edx,ebx
c001bf46:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001bf4a:	89 d3                	mov    ebx,edx
c001bf4c:	89 c5                	mov    ebp,eax
c001bf4e:	f7 e7                	mul    edi
c001bf50:	39 d3                	cmp    ebx,edx
c001bf52:	72 18                	jb     c001bf6c <__divdi3+0x138>
c001bf54:	74 0a                	je     c001bf60 <__divdi3+0x12c>
c001bf56:	89 e9                	mov    ecx,ebp
c001bf58:	31 f6                	xor    esi,esi
c001bf5a:	e9 2d ff ff ff       	jmp    c001be8c <__divdi3+0x58>
c001bf5f:	90                   	nop
c001bf60:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001bf63:	89 f1                	mov    ecx,esi
c001bf65:	d3 e7                	shl    edi,cl
c001bf67:	39 c7                	cmp    edi,eax
c001bf69:	73 eb                	jae    c001bf56 <__divdi3+0x122>
c001bf6b:	90                   	nop
c001bf6c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001bf6f:	31 f6                	xor    esi,esi
c001bf71:	e9 16 ff ff ff       	jmp    c001be8c <__divdi3+0x58>
c001bf76:	66 90                	xchg   ax,ax
c001bf78:	31 c9                	xor    ecx,ecx
c001bf7a:	e9 0d ff ff ff       	jmp    c001be8c <__divdi3+0x58>
c001bf7f:	90                   	nop

c001bf80 <__moddi3>:
c001bf80:	55                   	push   ebp
c001bf81:	57                   	push   edi
c001bf82:	56                   	push   esi
c001bf83:	53                   	push   ebx
c001bf84:	83 ec 2c             	sub    esp,0x2c
c001bf87:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001bf8b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001bf8f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001bf93:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001bf97:	85 db                	test   ebx,ebx
c001bf99:	0f 88 85 00 00 00    	js     c001c024 <__moddi3+0xa4>
c001bf9f:	89 de                	mov    esi,ebx
c001bfa1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001bfa9:	89 d7                	mov    edi,edx
c001bfab:	85 d2                	test   edx,edx
c001bfad:	79 09                	jns    c001bfb8 <__moddi3+0x38>
c001bfaf:	f7 d8                	neg    eax
c001bfb1:	83 d2 00             	adc    edx,0x0
c001bfb4:	f7 da                	neg    edx
c001bfb6:	89 d7                	mov    edi,edx
c001bfb8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bfbc:	89 cd                	mov    ebp,ecx
c001bfbe:	85 ff                	test   edi,edi
c001bfc0:	75 52                	jne    c001c014 <__moddi3+0x94>
c001bfc2:	89 c3                	mov    ebx,eax
c001bfc4:	39 f0                	cmp    eax,esi
c001bfc6:	76 24                	jbe    c001bfec <__moddi3+0x6c>
c001bfc8:	89 c8                	mov    eax,ecx
c001bfca:	89 f2                	mov    edx,esi
c001bfcc:	f7 f3                	div    ebx
c001bfce:	89 d6                	mov    esi,edx
c001bfd0:	89 f0                	mov    eax,esi
c001bfd2:	31 d2                	xor    edx,edx
c001bfd4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bfd8:	85 c9                	test   ecx,ecx
c001bfda:	74 07                	je     c001bfe3 <__moddi3+0x63>
c001bfdc:	f7 d8                	neg    eax
c001bfde:	83 d2 00             	adc    edx,0x0
c001bfe1:	f7 da                	neg    edx
c001bfe3:	83 c4 2c             	add    esp,0x2c
c001bfe6:	5b                   	pop    ebx
c001bfe7:	5e                   	pop    esi
c001bfe8:	5f                   	pop    edi
c001bfe9:	5d                   	pop    ebp
c001bfea:	c3                   	ret    
c001bfeb:	90                   	nop
c001bfec:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bff0:	85 db                	test   ebx,ebx
c001bff2:	75 0d                	jne    c001c001 <__moddi3+0x81>
c001bff4:	b8 01 00 00 00       	mov    eax,0x1
c001bff9:	31 d2                	xor    edx,edx
c001bffb:	f7 f7                	div    edi
c001bffd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c001:	89 f0                	mov    eax,esi
c001c003:	31 d2                	xor    edx,edx
c001c005:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c009:	f7 f7                	div    edi
c001c00b:	89 e8                	mov    eax,ebp
c001c00d:	f7 f7                	div    edi
c001c00f:	89 d6                	mov    esi,edx
c001c011:	eb bd                	jmp    c001bfd0 <__moddi3+0x50>
c001c013:	90                   	nop
c001c014:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c018:	39 f7                	cmp    edi,esi
c001c01a:	76 20                	jbe    c001c03c <__moddi3+0xbc>
c001c01c:	89 c8                	mov    eax,ecx
c001c01e:	89 f2                	mov    edx,esi
c001c020:	eb b2                	jmp    c001bfd4 <__moddi3+0x54>
c001c022:	66 90                	xchg   ax,ax
c001c024:	f7 d9                	neg    ecx
c001c026:	83 d3 00             	adc    ebx,0x0
c001c029:	f7 db                	neg    ebx
c001c02b:	89 de                	mov    esi,ebx
c001c02d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001c035:	e9 6f ff ff ff       	jmp    c001bfa9 <__moddi3+0x29>
c001c03a:	66 90                	xchg   ax,ax
c001c03c:	0f bd c7             	bsr    eax,edi
c001c03f:	83 f0 1f             	xor    eax,0x1f
c001c042:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c046:	75 24                	jne    c001c06c <__moddi3+0xec>
c001c048:	39 f7                	cmp    edi,esi
c001c04a:	72 06                	jb     c001c052 <__moddi3+0xd2>
c001c04c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001c050:	77 0c                	ja     c001c05e <__moddi3+0xde>
c001c052:	89 e9                	mov    ecx,ebp
c001c054:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001c058:	19 fe                	sbb    esi,edi
c001c05a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c062:	89 f2                	mov    edx,esi
c001c064:	e9 6b ff ff ff       	jmp    c001bfd4 <__moddi3+0x54>
c001c069:	8d 76 00             	lea    esi,[esi+0x0]
c001c06c:	b8 20 00 00 00       	mov    eax,0x20
c001c071:	89 c2                	mov    edx,eax
c001c073:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c077:	29 da                	sub    edx,ebx
c001c079:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c07d:	88 d9                	mov    cl,bl
c001c07f:	d3 e7                	shl    edi,cl
c001c081:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c085:	88 d1                	mov    cl,dl
c001c087:	d3 e8                	shr    eax,cl
c001c089:	09 c7                	or     edi,eax
c001c08b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001c08f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c093:	89 d8                	mov    eax,ebx
c001c095:	88 d9                	mov    cl,bl
c001c097:	d3 e7                	shl    edi,cl
c001c099:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c09d:	89 f3                	mov    ebx,esi
c001c09f:	88 d1                	mov    cl,dl
c001c0a1:	d3 eb                	shr    ebx,cl
c001c0a3:	89 c7                	mov    edi,eax
c001c0a5:	88 c1                	mov    cl,al
c001c0a7:	d3 e6                	shl    esi,cl
c001c0a9:	89 e8                	mov    eax,ebp
c001c0ab:	88 d1                	mov    cl,dl
c001c0ad:	d3 e8                	shr    eax,cl
c001c0af:	09 f0                	or     eax,esi
c001c0b1:	89 f9                	mov    ecx,edi
c001c0b3:	d3 e5                	shl    ebp,cl
c001c0b5:	89 da                	mov    edx,ebx
c001c0b7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001c0bb:	89 d3                	mov    ebx,edx
c001c0bd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c0c1:	89 c6                	mov    esi,eax
c001c0c3:	89 d1                	mov    ecx,edx
c001c0c5:	39 d3                	cmp    ebx,edx
c001c0c7:	72 27                	jb     c001c0f0 <__moddi3+0x170>
c001c0c9:	74 21                	je     c001c0ec <__moddi3+0x16c>
c001c0cb:	29 f5                	sub    ebp,esi
c001c0cd:	19 cb                	sbb    ebx,ecx
c001c0cf:	89 de                	mov    esi,ebx
c001c0d1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001c0d5:	d3 e6                	shl    esi,cl
c001c0d7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c0db:	89 f9                	mov    ecx,edi
c001c0dd:	d3 ed                	shr    ebp,cl
c001c0df:	09 ee                	or     esi,ebp
c001c0e1:	89 f0                	mov    eax,esi
c001c0e3:	d3 eb                	shr    ebx,cl
c001c0e5:	89 da                	mov    edx,ebx
c001c0e7:	e9 e8 fe ff ff       	jmp    c001bfd4 <__moddi3+0x54>
c001c0ec:	39 c5                	cmp    ebp,eax
c001c0ee:	73 db                	jae    c001c0cb <__moddi3+0x14b>
c001c0f0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c0f4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001c0f8:	89 d1                	mov    ecx,edx
c001c0fa:	89 c6                	mov    esi,eax
c001c0fc:	eb cd                	jmp    c001c0cb <__moddi3+0x14b>
c001c0fe:	66 90                	xchg   ax,ax

c001c100 <__udivdi3>:
c001c100:	55                   	push   ebp
c001c101:	57                   	push   edi
c001c102:	56                   	push   esi
c001c103:	53                   	push   ebx
c001c104:	83 ec 1c             	sub    esp,0x1c
c001c107:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c10b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c10f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c113:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c117:	85 d2                	test   edx,edx
c001c119:	75 41                	jne    c001c15c <__udivdi3+0x5c>
c001c11b:	39 f7                	cmp    edi,esi
c001c11d:	76 15                	jbe    c001c134 <__udivdi3+0x34>
c001c11f:	89 e8                	mov    eax,ebp
c001c121:	89 f2                	mov    edx,esi
c001c123:	f7 f7                	div    edi
c001c125:	31 db                	xor    ebx,ebx
c001c127:	89 da                	mov    edx,ebx
c001c129:	83 c4 1c             	add    esp,0x1c
c001c12c:	5b                   	pop    ebx
c001c12d:	5e                   	pop    esi
c001c12e:	5f                   	pop    edi
c001c12f:	5d                   	pop    ebp
c001c130:	c3                   	ret    
c001c131:	8d 76 00             	lea    esi,[esi+0x0]
c001c134:	89 f9                	mov    ecx,edi
c001c136:	85 ff                	test   edi,edi
c001c138:	75 0b                	jne    c001c145 <__udivdi3+0x45>
c001c13a:	b8 01 00 00 00       	mov    eax,0x1
c001c13f:	31 d2                	xor    edx,edx
c001c141:	f7 f7                	div    edi
c001c143:	89 c1                	mov    ecx,eax
c001c145:	31 d2                	xor    edx,edx
c001c147:	89 f0                	mov    eax,esi
c001c149:	f7 f1                	div    ecx
c001c14b:	89 c3                	mov    ebx,eax
c001c14d:	89 e8                	mov    eax,ebp
c001c14f:	f7 f1                	div    ecx
c001c151:	89 da                	mov    edx,ebx
c001c153:	83 c4 1c             	add    esp,0x1c
c001c156:	5b                   	pop    ebx
c001c157:	5e                   	pop    esi
c001c158:	5f                   	pop    edi
c001c159:	5d                   	pop    ebp
c001c15a:	c3                   	ret    
c001c15b:	90                   	nop
c001c15c:	39 f2                	cmp    edx,esi
c001c15e:	77 1c                	ja     c001c17c <__udivdi3+0x7c>
c001c160:	0f bd da             	bsr    ebx,edx
c001c163:	83 f3 1f             	xor    ebx,0x1f
c001c166:	75 24                	jne    c001c18c <__udivdi3+0x8c>
c001c168:	39 f2                	cmp    edx,esi
c001c16a:	72 08                	jb     c001c174 <__udivdi3+0x74>
c001c16c:	39 ef                	cmp    edi,ebp
c001c16e:	0f 87 84 00 00 00    	ja     c001c1f8 <__udivdi3+0xf8>
c001c174:	b8 01 00 00 00       	mov    eax,0x1
c001c179:	eb ac                	jmp    c001c127 <__udivdi3+0x27>
c001c17b:	90                   	nop
c001c17c:	31 db                	xor    ebx,ebx
c001c17e:	31 c0                	xor    eax,eax
c001c180:	89 da                	mov    edx,ebx
c001c182:	83 c4 1c             	add    esp,0x1c
c001c185:	5b                   	pop    ebx
c001c186:	5e                   	pop    esi
c001c187:	5f                   	pop    edi
c001c188:	5d                   	pop    ebp
c001c189:	c3                   	ret    
c001c18a:	66 90                	xchg   ax,ax
c001c18c:	b8 20 00 00 00       	mov    eax,0x20
c001c191:	29 d8                	sub    eax,ebx
c001c193:	88 d9                	mov    cl,bl
c001c195:	d3 e2                	shl    edx,cl
c001c197:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c19b:	89 fa                	mov    edx,edi
c001c19d:	88 c1                	mov    cl,al
c001c19f:	d3 ea                	shr    edx,cl
c001c1a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c1a5:	09 d1                	or     ecx,edx
c001c1a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c1ab:	88 d9                	mov    cl,bl
c001c1ad:	d3 e7                	shl    edi,cl
c001c1af:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c1b3:	89 f7                	mov    edi,esi
c001c1b5:	88 c1                	mov    cl,al
c001c1b7:	d3 ef                	shr    edi,cl
c001c1b9:	88 d9                	mov    cl,bl
c001c1bb:	d3 e6                	shl    esi,cl
c001c1bd:	89 ea                	mov    edx,ebp
c001c1bf:	88 c1                	mov    cl,al
c001c1c1:	d3 ea                	shr    edx,cl
c001c1c3:	09 d6                	or     esi,edx
c001c1c5:	89 f0                	mov    eax,esi
c001c1c7:	89 fa                	mov    edx,edi
c001c1c9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c1cd:	89 d7                	mov    edi,edx
c001c1cf:	89 c6                	mov    esi,eax
c001c1d1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c1d5:	39 d7                	cmp    edi,edx
c001c1d7:	72 13                	jb     c001c1ec <__udivdi3+0xec>
c001c1d9:	74 09                	je     c001c1e4 <__udivdi3+0xe4>
c001c1db:	89 f0                	mov    eax,esi
c001c1dd:	31 db                	xor    ebx,ebx
c001c1df:	e9 43 ff ff ff       	jmp    c001c127 <__udivdi3+0x27>
c001c1e4:	88 d9                	mov    cl,bl
c001c1e6:	d3 e5                	shl    ebp,cl
c001c1e8:	39 c5                	cmp    ebp,eax
c001c1ea:	73 ef                	jae    c001c1db <__udivdi3+0xdb>
c001c1ec:	8d 46 ff             	lea    eax,[esi-0x1]
c001c1ef:	31 db                	xor    ebx,ebx
c001c1f1:	e9 31 ff ff ff       	jmp    c001c127 <__udivdi3+0x27>
c001c1f6:	66 90                	xchg   ax,ax
c001c1f8:	31 c0                	xor    eax,eax
c001c1fa:	e9 28 ff ff ff       	jmp    c001c127 <__udivdi3+0x27>
c001c1ff:	90                   	nop

c001c200 <__umoddi3>:
c001c200:	55                   	push   ebp
c001c201:	57                   	push   edi
c001c202:	56                   	push   esi
c001c203:	53                   	push   ebx
c001c204:	83 ec 1c             	sub    esp,0x1c
c001c207:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c20b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c20f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c213:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c217:	89 da                	mov    edx,ebx
c001c219:	85 c0                	test   eax,eax
c001c21b:	75 37                	jne    c001c254 <__umoddi3+0x54>
c001c21d:	39 df                	cmp    edi,ebx
c001c21f:	76 13                	jbe    c001c234 <__umoddi3+0x34>
c001c221:	89 f0                	mov    eax,esi
c001c223:	f7 f7                	div    edi
c001c225:	89 d0                	mov    eax,edx
c001c227:	31 d2                	xor    edx,edx
c001c229:	83 c4 1c             	add    esp,0x1c
c001c22c:	5b                   	pop    ebx
c001c22d:	5e                   	pop    esi
c001c22e:	5f                   	pop    edi
c001c22f:	5d                   	pop    ebp
c001c230:	c3                   	ret    
c001c231:	8d 76 00             	lea    esi,[esi+0x0]
c001c234:	89 fd                	mov    ebp,edi
c001c236:	85 ff                	test   edi,edi
c001c238:	75 0b                	jne    c001c245 <__umoddi3+0x45>
c001c23a:	b8 01 00 00 00       	mov    eax,0x1
c001c23f:	31 d2                	xor    edx,edx
c001c241:	f7 f7                	div    edi
c001c243:	89 c5                	mov    ebp,eax
c001c245:	89 d8                	mov    eax,ebx
c001c247:	31 d2                	xor    edx,edx
c001c249:	f7 f5                	div    ebp
c001c24b:	89 f0                	mov    eax,esi
c001c24d:	f7 f5                	div    ebp
c001c24f:	89 d0                	mov    eax,edx
c001c251:	eb d4                	jmp    c001c227 <__umoddi3+0x27>
c001c253:	90                   	nop
c001c254:	89 f1                	mov    ecx,esi
c001c256:	39 d8                	cmp    eax,ebx
c001c258:	76 0a                	jbe    c001c264 <__umoddi3+0x64>
c001c25a:	89 f0                	mov    eax,esi
c001c25c:	83 c4 1c             	add    esp,0x1c
c001c25f:	5b                   	pop    ebx
c001c260:	5e                   	pop    esi
c001c261:	5f                   	pop    edi
c001c262:	5d                   	pop    ebp
c001c263:	c3                   	ret    
c001c264:	0f bd e8             	bsr    ebp,eax
c001c267:	83 f5 1f             	xor    ebp,0x1f
c001c26a:	75 1c                	jne    c001c288 <__umoddi3+0x88>
c001c26c:	39 d8                	cmp    eax,ebx
c001c26e:	72 04                	jb     c001c274 <__umoddi3+0x74>
c001c270:	39 f7                	cmp    edi,esi
c001c272:	77 08                	ja     c001c27c <__umoddi3+0x7c>
c001c274:	89 da                	mov    edx,ebx
c001c276:	29 fe                	sub    esi,edi
c001c278:	19 c2                	sbb    edx,eax
c001c27a:	89 f1                	mov    ecx,esi
c001c27c:	89 c8                	mov    eax,ecx
c001c27e:	83 c4 1c             	add    esp,0x1c
c001c281:	5b                   	pop    ebx
c001c282:	5e                   	pop    esi
c001c283:	5f                   	pop    edi
c001c284:	5d                   	pop    ebp
c001c285:	c3                   	ret    
c001c286:	66 90                	xchg   ax,ax
c001c288:	ba 20 00 00 00       	mov    edx,0x20
c001c28d:	29 ea                	sub    edx,ebp
c001c28f:	89 e9                	mov    ecx,ebp
c001c291:	d3 e0                	shl    eax,cl
c001c293:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c297:	89 f8                	mov    eax,edi
c001c299:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c29d:	88 d1                	mov    cl,dl
c001c29f:	d3 e8                	shr    eax,cl
c001c2a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c2a5:	09 c1                	or     ecx,eax
c001c2a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c2ab:	89 e9                	mov    ecx,ebp
c001c2ad:	d3 e7                	shl    edi,cl
c001c2af:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c2b3:	89 d8                	mov    eax,ebx
c001c2b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c2b9:	88 d1                	mov    cl,dl
c001c2bb:	d3 e8                	shr    eax,cl
c001c2bd:	89 c7                	mov    edi,eax
c001c2bf:	89 e9                	mov    ecx,ebp
c001c2c1:	d3 e3                	shl    ebx,cl
c001c2c3:	89 f0                	mov    eax,esi
c001c2c5:	88 d1                	mov    cl,dl
c001c2c7:	d3 e8                	shr    eax,cl
c001c2c9:	09 d8                	or     eax,ebx
c001c2cb:	89 e9                	mov    ecx,ebp
c001c2cd:	d3 e6                	shl    esi,cl
c001c2cf:	89 f3                	mov    ebx,esi
c001c2d1:	89 fa                	mov    edx,edi
c001c2d3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c2d7:	89 d1                	mov    ecx,edx
c001c2d9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c2dd:	89 c6                	mov    esi,eax
c001c2df:	89 d7                	mov    edi,edx
c001c2e1:	39 d1                	cmp    ecx,edx
c001c2e3:	72 27                	jb     c001c30c <__umoddi3+0x10c>
c001c2e5:	74 21                	je     c001c308 <__umoddi3+0x108>
c001c2e7:	89 ca                	mov    edx,ecx
c001c2e9:	29 f3                	sub    ebx,esi
c001c2eb:	19 fa                	sbb    edx,edi
c001c2ed:	89 d0                	mov    eax,edx
c001c2ef:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001c2f3:	d3 e0                	shl    eax,cl
c001c2f5:	89 e9                	mov    ecx,ebp
c001c2f7:	d3 eb                	shr    ebx,cl
c001c2f9:	09 d8                	or     eax,ebx
c001c2fb:	d3 ea                	shr    edx,cl
c001c2fd:	83 c4 1c             	add    esp,0x1c
c001c300:	5b                   	pop    ebx
c001c301:	5e                   	pop    esi
c001c302:	5f                   	pop    edi
c001c303:	5d                   	pop    ebp
c001c304:	c3                   	ret    
c001c305:	8d 76 00             	lea    esi,[esi+0x0]
c001c308:	39 c3                	cmp    ebx,eax
c001c30a:	73 db                	jae    c001c2e7 <__umoddi3+0xe7>
c001c30c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c310:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001c314:	89 d7                	mov    edi,edx
c001c316:	89 c6                	mov    esi,eax
c001c318:	eb cd                	jmp    c001c2e7 <__umoddi3+0xe7>

Disassembly of section .init:

c001c31a <_init>:
c001c31a:	55                   	push   ebp
c001c31b:	89 e5                	mov    ebp,esp
c001c31d:	e8 d2 3d fe ff       	call   c00000f4 <frame_dummy>
c001c322:	e8 e5 fa ff ff       	call   c001be0c <__do_global_ctors_aux>
c001c327:	5d                   	pop    ebp
c001c328:	c3                   	ret    

Disassembly of section .fini:

c001c329 <_fini>:
c001c329:	55                   	push   ebp
c001c32a:	89 e5                	mov    ebp,esp
c001c32c:	e8 53 3d fe ff       	call   c0000084 <__do_global_dtors_aux>
c001c331:	5d                   	pop    ebp
c001c332:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001c334 <Computer::~Computer()>:
c001c334:	83 ec 0c             	sub    esp,0xc
c001c337:	ba f8 d5 01 c0       	mov    edx,0xc001d5f8
c001c33c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c340:	89 10                	mov    DWORD PTR [eax],edx
c001c342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c346:	83 ec 0c             	sub    esp,0xc
c001c349:	50                   	push   eax
c001c34a:	e8 1f f5 fe ff       	call   c000b86e <Device::~Device()>
c001c34f:	83 c4 10             	add    esp,0x10
c001c352:	90                   	nop
c001c353:	83 c4 0c             	add    esp,0xc
c001c356:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001c358 <Computer::~Computer()>:
c001c358:	83 ec 0c             	sub    esp,0xc
c001c35b:	83 ec 0c             	sub    esp,0xc
c001c35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c362:	e8 cd ff ff ff       	call   c001c334 <Computer::~Computer()>
c001c367:	83 c4 10             	add    esp,0x10
c001c36a:	83 ec 08             	sub    esp,0x8
c001c36d:	68 70 01 00 00       	push   0x170
c001c372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c376:	e8 bc e0 fe ff       	call   c000a437 <operator delete(void*, unsigned long)>
c001c37b:	83 c4 10             	add    esp,0x10
c001c37e:	83 c4 0c             	add    esp,0xc
c001c381:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001c382 <idleCommon()>:
c001c382:	83 ec 0c             	sub    esp,0xc
c001c385:	fa                   	cli    
c001c386:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001c38c:	e8 13 74 ff ff       	call   c00137a4 <schedule()>
c001c391:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001c396:	48                   	dec    eax
c001c397:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001c39c:	75 01                	jne    c001c39f <idleCommon()+0x1d>
c001c39e:	fb                   	sti    
c001c39f:	83 c4 0c             	add    esp,0xc
c001c3a2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001c3a4 <LinkedList<UnixFile>::~LinkedList()>:
c001c3a4:	90                   	nop
c001c3a5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001c3a6 <LinkedList<UnixFile>::LinkedList()>:
c001c3a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3aa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c3b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c3bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3bf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c3c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c3d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c3db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3df:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c3e6:	90                   	nop
c001c3e7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001c3e8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001c3e8:	83 ec 0c             	sub    esp,0xc
c001c3eb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c3f0:	75 10                	jne    c001c402 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001c3f2:	83 ec 0c             	sub    esp,0xc
c001c3f5:	68 58 d8 01 c0       	push   0xc001d858
c001c3fa:	e8 b0 3d ff ff       	call   c00101af <KePanic(char const*)>
c001c3ff:	83 c4 10             	add    esp,0x10
c001c402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c406:	8b 00                	mov    eax,DWORD PTR [eax]
c001c408:	85 c0                	test   eax,eax
c001c40a:	74 34                	je     c001c440 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c40c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c410:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c413:	85 c0                	test   eax,eax
c001c415:	74 29                	je     c001c440 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c417:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c41b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c41e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c422:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c429:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c42d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c434:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c437:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c43e:	eb 65                	jmp    c001c4a5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c444:	8b 00                	mov    eax,DWORD PTR [eax]
c001c446:	85 c0                	test   eax,eax
c001c448:	75 4b                	jne    c001c495 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c44a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c44e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c451:	85 c0                	test   eax,eax
c001c453:	75 40                	jne    c001c495 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c455:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c459:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c45d:	89 10                	mov    DWORD PTR [eax],edx
c001c45f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c463:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c467:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c46a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c46e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c471:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c47c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c47f:	85 c0                	test   eax,eax
c001c481:	74 22                	je     c001c4a5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c483:	83 ec 0c             	sub    esp,0xc
c001c486:	68 7a d8 01 c0       	push   0xc001d87a
c001c48b:	e8 1f 3d ff ff       	call   c00101af <KePanic(char const*)>
c001c490:	83 c4 10             	add    esp,0x10
c001c493:	eb 10                	jmp    c001c4a5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c495:	83 ec 0c             	sub    esp,0xc
c001c498:	68 84 d8 01 c0       	push   0xc001d884
c001c49d:	e8 0d 3d ff ff       	call   c00101af <KePanic(char const*)>
c001c4a2:	83 c4 10             	add    esp,0x10
c001c4a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4a9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c4ac:	8d 50 01             	lea    edx,[eax+0x1]
c001c4af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4b3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c4b6:	90                   	nop
c001c4b7:	83 c4 0c             	add    esp,0xc
c001c4ba:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001c4bc <LinkedList<UnixFile>::getFirstElement()>:
c001c4bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c4c4 <LinkedList<UnixFile>::removeFirst()>:
c001c4c4:	83 ec 0c             	sub    esp,0xc
c001c4c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4cb:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4cd:	85 c0                	test   eax,eax
c001c4cf:	75 12                	jne    c001c4e3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c4d1:	83 ec 0c             	sub    esp,0xc
c001c4d4:	68 90 d8 01 c0       	push   0xc001d890
c001c4d9:	e8 d1 3c ff ff       	call   c00101af <KePanic(char const*)>
c001c4de:	83 c4 10             	add    esp,0x10
c001c4e1:	eb 7e                	jmp    c001c561 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c4e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c4ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c4ed:	85 c0                	test   eax,eax
c001c4ef:	74 10                	je     c001c501 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c4f1:	83 ec 0c             	sub    esp,0xc
c001c4f4:	68 db d8 01 c0       	push   0xc001d8db
c001c4f9:	e8 b1 3c ff ff       	call   c00101af <KePanic(char const*)>
c001c4fe:	83 c4 10             	add    esp,0x10
c001c501:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c505:	8b 00                	mov    eax,DWORD PTR [eax]
c001c507:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c50a:	85 c0                	test   eax,eax
c001c50c:	75 33                	jne    c001c541 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c50e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c512:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c51c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c527:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c52a:	83 f8 01             	cmp    eax,0x1
c001c52d:	74 21                	je     c001c550 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c52f:	83 ec 0c             	sub    esp,0xc
c001c532:	68 b4 d8 01 c0       	push   0xc001d8b4
c001c537:	e8 73 3c ff ff       	call   c00101af <KePanic(char const*)>
c001c53c:	83 c4 10             	add    esp,0x10
c001c53f:	eb 0f                	jmp    c001c550 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c545:	8b 00                	mov    eax,DWORD PTR [eax]
c001c547:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c54a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c54e:	89 10                	mov    DWORD PTR [eax],edx
c001c550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c554:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c557:	8d 50 ff             	lea    edx,[eax-0x1]
c001c55a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c55e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c561:	83 c4 0c             	add    esp,0xc
c001c564:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c566 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c566:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c56a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c56d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c56e <DriverlessDevice::~DriverlessDevice()>:
c001c56e:	ba 5c df 01 c0       	mov    edx,0xc001df5c
c001c573:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c577:	89 10                	mov    DWORD PTR [eax],edx
c001c579:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c57d:	50                   	push   eax
c001c57e:	e8 eb f2 fe ff       	call   c000b86e <Device::~Device()>
c001c583:	83 c4 04             	add    esp,0x4
c001c586:	90                   	nop
c001c587:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c588 <DriverlessDevice::~DriverlessDevice()>:
c001c588:	83 ec 0c             	sub    esp,0xc
c001c58b:	83 ec 0c             	sub    esp,0xc
c001c58e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c592:	e8 d7 ff ff ff       	call   c001c56e <DriverlessDevice::~DriverlessDevice()>
c001c597:	83 c4 10             	add    esp,0x10
c001c59a:	83 ec 08             	sub    esp,0x8
c001c59d:	68 58 01 00 00       	push   0x158
c001c5a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5a6:	e8 8c de fe ff       	call   c000a437 <operator delete(void*, unsigned long)>
c001c5ab:	83 c4 10             	add    esp,0x10
c001c5ae:	83 c4 0c             	add    esp,0xc
c001c5b1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c5b2 <LinkedList<Device>::addElement(Device*)>:
c001c5b2:	83 ec 0c             	sub    esp,0xc
c001c5b5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c5ba:	75 10                	jne    c001c5cc <LinkedList<Device>::addElement(Device*)+0x1a>
c001c5bc:	83 ec 0c             	sub    esp,0xc
c001c5bf:	68 58 d8 01 c0       	push   0xc001d858
c001c5c4:	e8 e6 3b ff ff       	call   c00101af <KePanic(char const*)>
c001c5c9:	83 c4 10             	add    esp,0x10
c001c5cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5d2:	85 c0                	test   eax,eax
c001c5d4:	74 3a                	je     c001c610 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c5d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c5dd:	85 c0                	test   eax,eax
c001c5df:	74 2f                	je     c001c610 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c5e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5e5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c5e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c5ec:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c5f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c5fa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c5fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c601:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c604:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c60e:	eb 68                	jmp    c001c678 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c614:	8b 00                	mov    eax,DWORD PTR [eax]
c001c616:	85 c0                	test   eax,eax
c001c618:	75 4e                	jne    c001c668 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c61a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c61e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c621:	85 c0                	test   eax,eax
c001c623:	75 43                	jne    c001c668 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c625:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c629:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c62d:	89 10                	mov    DWORD PTR [eax],edx
c001c62f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c633:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c637:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c63a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c63e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c641:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c64b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c64f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c652:	85 c0                	test   eax,eax
c001c654:	74 22                	je     c001c678 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c656:	83 ec 0c             	sub    esp,0xc
c001c659:	68 7a d8 01 c0       	push   0xc001d87a
c001c65e:	e8 4c 3b ff ff       	call   c00101af <KePanic(char const*)>
c001c663:	83 c4 10             	add    esp,0x10
c001c666:	eb 10                	jmp    c001c678 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c668:	83 ec 0c             	sub    esp,0xc
c001c66b:	68 84 d8 01 c0       	push   0xc001d884
c001c670:	e8 3a 3b ff ff       	call   c00101af <KePanic(char const*)>
c001c675:	83 c4 10             	add    esp,0x10
c001c678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c67c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c67f:	8d 50 01             	lea    edx,[eax+0x1]
c001c682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c686:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c689:	90                   	nop
c001c68a:	83 c4 0c             	add    esp,0xc
c001c68d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c68e <LinkedList<Device>::LinkedList()>:
c001c68e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c692:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c698:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c69c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c6a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6a7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c6ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c6b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6bc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c6c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6c7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c6ce:	90                   	nop
c001c6cf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c6d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c6d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6d4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6d6:	85 c0                	test   eax,eax
c001c6d8:	75 0e                	jne    c001c6e8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c6da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6e1:	85 c0                	test   eax,eax
c001c6e3:	75 03                	jne    c001c6e8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c6e5:	b0 01                	mov    al,0x1
c001c6e7:	c3                   	ret    
c001c6e8:	b0 00                	mov    al,0x0
c001c6ea:	90                   	nop
c001c6eb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c6ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6f2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c6f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c6f4:	83 ec 0c             	sub    esp,0xc
c001c6f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6fb:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6fd:	85 c0                	test   eax,eax
c001c6ff:	75 17                	jne    c001c718 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c701:	83 ec 0c             	sub    esp,0xc
c001c704:	68 90 d8 01 c0       	push   0xc001d890
c001c709:	e8 a1 3a ff ff       	call   c00101af <KePanic(char const*)>
c001c70e:	83 c4 10             	add    esp,0x10
c001c711:	e9 92 00 00 00       	jmp    c001c7a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c716:	66 90                	xchg   ax,ax
c001c718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c71c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c71f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c722:	85 c0                	test   eax,eax
c001c724:	0f 95 c0             	setne  al
c001c727:	84 c0                	test   al,al
c001c729:	74 11                	je     c001c73c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c72b:	83 ec 0c             	sub    esp,0xc
c001c72e:	68 db d8 01 c0       	push   0xc001d8db
c001c733:	e8 77 3a ff ff       	call   c00101af <KePanic(char const*)>
c001c738:	83 c4 10             	add    esp,0x10
c001c73b:	90                   	nop
c001c73c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c740:	8b 00                	mov    eax,DWORD PTR [eax]
c001c742:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c745:	85 c0                	test   eax,eax
c001c747:	0f 94 c0             	sete   al
c001c74a:	84 c0                	test   al,al
c001c74c:	74 36                	je     c001c784 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c74e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c752:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c75c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c763:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c767:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c76a:	83 f8 01             	cmp    eax,0x1
c001c76d:	74 25                	je     c001c794 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c76f:	83 ec 0c             	sub    esp,0xc
c001c772:	68 b4 d8 01 c0       	push   0xc001d8b4
c001c777:	e8 33 3a ff ff       	call   c00101af <KePanic(char const*)>
c001c77c:	83 c4 10             	add    esp,0x10
c001c77f:	eb 13                	jmp    c001c794 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c781:	8d 76 00             	lea    esi,[esi+0x0]
c001c784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c788:	8b 00                	mov    eax,DWORD PTR [eax]
c001c78a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c78d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c791:	89 10                	mov    DWORD PTR [eax],edx
c001c793:	90                   	nop
c001c794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c798:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c79b:	8d 50 ff             	lea    edx,[eax-0x1]
c001c79e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7a2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c7a5:	8d 76 00             	lea    esi,[esi+0x0]
c001c7a8:	83 c4 0c             	add    esp,0xc
c001c7ab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c7ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c7ac:	83 ec 0c             	sub    esp,0xc
c001c7af:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c7b4:	75 12                	jne    c001c7c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c7b6:	83 ec 0c             	sub    esp,0xc
c001c7b9:	68 58 d8 01 c0       	push   0xc001d858
c001c7be:	e8 ec 39 ff ff       	call   c00101af <KePanic(char const*)>
c001c7c3:	83 c4 10             	add    esp,0x10
c001c7c6:	66 90                	xchg   ax,ax
c001c7c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7cc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7ce:	85 c0                	test   eax,eax
c001c7d0:	74 36                	je     c001c808 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c7d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c7d9:	85 c0                	test   eax,eax
c001c7db:	74 2b                	je     c001c808 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c7dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7e1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c7e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c7e8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c7eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7ef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c7f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c7f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c7fd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c804:	eb 6a                	jmp    c001c870 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c806:	66 90                	xchg   ax,ax
c001c808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c80c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c80e:	85 c0                	test   eax,eax
c001c810:	75 4e                	jne    c001c860 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c816:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c819:	85 c0                	test   eax,eax
c001c81b:	75 43                	jne    c001c860 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c81d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c821:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c825:	89 10                	mov    DWORD PTR [eax],edx
c001c827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c82b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c82f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c836:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c839:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c844:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c847:	85 c0                	test   eax,eax
c001c849:	74 25                	je     c001c870 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c84b:	83 ec 0c             	sub    esp,0xc
c001c84e:	68 7a d8 01 c0       	push   0xc001d87a
c001c853:	e8 57 39 ff ff       	call   c00101af <KePanic(char const*)>
c001c858:	83 c4 10             	add    esp,0x10
c001c85b:	eb 13                	jmp    c001c870 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c85d:	8d 76 00             	lea    esi,[esi+0x0]
c001c860:	83 ec 0c             	sub    esp,0xc
c001c863:	68 84 d8 01 c0       	push   0xc001d884
c001c868:	e8 42 39 ff ff       	call   c00101af <KePanic(char const*)>
c001c86d:	83 c4 10             	add    esp,0x10
c001c870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c874:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c877:	8d 50 01             	lea    edx,[eax+0x1]
c001c87a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c87e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c881:	90                   	nop
c001c882:	83 c4 0c             	add    esp,0xc
c001c885:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c888 <ACPI::~ACPI()>:
c001c888:	83 ec 0c             	sub    esp,0xc
c001c88b:	ba d4 e4 01 c0       	mov    edx,0xc001e4d4
c001c890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c894:	89 10                	mov    DWORD PTR [eax],edx
c001c896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c89a:	83 ec 0c             	sub    esp,0xc
c001c89d:	50                   	push   eax
c001c89e:	e8 cb ef fe ff       	call   c000b86e <Device::~Device()>
c001c8a3:	83 c4 10             	add    esp,0x10
c001c8a6:	90                   	nop
c001c8a7:	83 c4 0c             	add    esp,0xc
c001c8aa:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c8ac <ACPI::~ACPI()>:
c001c8ac:	83 ec 0c             	sub    esp,0xc
c001c8af:	83 ec 0c             	sub    esp,0xc
c001c8b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8b6:	e8 cd ff ff ff       	call   c001c888 <ACPI::~ACPI()>
c001c8bb:	83 c4 10             	add    esp,0x10
c001c8be:	83 ec 08             	sub    esp,0x8
c001c8c1:	68 64 12 00 00       	push   0x1264
c001c8c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8ca:	e8 68 db fe ff       	call   c000a437 <operator delete(void*, unsigned long)>
c001c8cf:	83 c4 10             	add    esp,0x10
c001c8d2:	83 c4 0c             	add    esp,0xc
c001c8d5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001c8d8 <LinkedList<Device>::~LinkedList()>:
c001c8d8:	90                   	nop
c001c8d9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001c8dc <LinkedList<Device>::isEmpty()>:
c001c8dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8e2:	85 c0                	test   eax,eax
c001c8e4:	75 0e                	jne    c001c8f4 <LinkedList<Device>::isEmpty()+0x18>
c001c8e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8ed:	85 c0                	test   eax,eax
c001c8ef:	75 03                	jne    c001c8f4 <LinkedList<Device>::isEmpty()+0x18>
c001c8f1:	b0 01                	mov    al,0x1
c001c8f3:	c3                   	ret    
c001c8f4:	b0 00                	mov    al,0x0
c001c8f6:	90                   	nop
c001c8f7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001c8f8 <LinkedList<Device>::getFirstElement()>:
c001c8f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8fc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8fe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001c900 <LinkedList<Device>::removeFirst()>:
c001c900:	83 ec 0c             	sub    esp,0xc
c001c903:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c907:	8b 00                	mov    eax,DWORD PTR [eax]
c001c909:	85 c0                	test   eax,eax
c001c90b:	75 17                	jne    c001c924 <LinkedList<Device>::removeFirst()+0x24>
c001c90d:	83 ec 0c             	sub    esp,0xc
c001c910:	68 90 d8 01 c0       	push   0xc001d890
c001c915:	e8 95 38 ff ff       	call   c00101af <KePanic(char const*)>
c001c91a:	83 c4 10             	add    esp,0x10
c001c91d:	e9 92 00 00 00       	jmp    c001c9b4 <LinkedList<Device>::removeFirst()+0xb4>
c001c922:	66 90                	xchg   ax,ax
c001c924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c928:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c92b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c931:	85 c0                	test   eax,eax
c001c933:	74 13                	je     c001c948 <LinkedList<Device>::removeFirst()+0x48>
c001c935:	83 ec 0c             	sub    esp,0xc
c001c938:	68 db d8 01 c0       	push   0xc001d8db
c001c93d:	e8 6d 38 ff ff       	call   c00101af <KePanic(char const*)>
c001c942:	83 c4 10             	add    esp,0x10
c001c945:	8d 76 00             	lea    esi,[esi+0x0]
c001c948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c94c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c94e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c954:	85 c0                	test   eax,eax
c001c956:	75 34                	jne    c001c98c <LinkedList<Device>::removeFirst()+0x8c>
c001c958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c95c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c966:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c96d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c971:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c974:	83 f8 01             	cmp    eax,0x1
c001c977:	74 27                	je     c001c9a0 <LinkedList<Device>::removeFirst()+0xa0>
c001c979:	83 ec 0c             	sub    esp,0xc
c001c97c:	68 b4 d8 01 c0       	push   0xc001d8b4
c001c981:	e8 29 38 ff ff       	call   c00101af <KePanic(char const*)>
c001c986:	83 c4 10             	add    esp,0x10
c001c989:	eb 15                	jmp    c001c9a0 <LinkedList<Device>::removeFirst()+0xa0>
c001c98b:	90                   	nop
c001c98c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c990:	8b 00                	mov    eax,DWORD PTR [eax]
c001c992:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001c998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c99c:	89 10                	mov    DWORD PTR [eax],edx
c001c99e:	66 90                	xchg   ax,ax
c001c9a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c9a7:	8d 50 ff             	lea    edx,[eax-0x1]
c001c9aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9ae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c9b1:	8d 76 00             	lea    esi,[esi+0x0]
c001c9b4:	83 c4 0c             	add    esp,0xc
c001c9b7:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001c9b8 <CPU::~CPU()>:
c001c9b8:	83 ec 0c             	sub    esp,0xc
c001c9bb:	ba 70 e6 01 c0       	mov    edx,0xc001e670
c001c9c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9c4:	89 10                	mov    DWORD PTR [eax],edx
c001c9c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9ca:	83 ec 0c             	sub    esp,0xc
c001c9cd:	50                   	push   eax
c001c9ce:	e8 9b ee fe ff       	call   c000b86e <Device::~Device()>
c001c9d3:	83 c4 10             	add    esp,0x10
c001c9d6:	90                   	nop
c001c9d7:	83 c4 0c             	add    esp,0xc
c001c9da:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001c9dc <CPU::~CPU()>:
c001c9dc:	83 ec 0c             	sub    esp,0xc
c001c9df:	83 ec 0c             	sub    esp,0xc
c001c9e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9e6:	e8 cd ff ff ff       	call   c001c9b8 <CPU::~CPU()>
c001c9eb:	83 c4 10             	add    esp,0x10
c001c9ee:	83 ec 08             	sub    esp,0x8
c001c9f1:	68 94 11 00 00       	push   0x1194
c001c9f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9fa:	e8 38 da fe ff       	call   c000a437 <operator delete(void*, unsigned long)>
c001c9ff:	83 c4 10             	add    esp,0x10
c001ca02:	83 c4 0c             	add    esp,0xc
c001ca05:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001ca08 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001ca08:	90                   	nop
c001ca09:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ca0c <ThreadControlBlock::ThreadControlBlock()>:
c001ca0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca10:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ca17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca1b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ca22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca26:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001ca2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca31:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001ca38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca3c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001ca43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca47:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001ca4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca4f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001ca53:	90                   	nop
c001ca54:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001ca58 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001ca58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca5c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ca62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca66:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ca6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca71:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ca78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca7c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ca82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca86:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ca8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca91:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ca98:	90                   	nop
c001ca99:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ca9c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ca9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001caa0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001caa3:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001caa4 <PCI::~PCI()>:
c001caa4:	83 ec 0c             	sub    esp,0xc
c001caa7:	ba 0c f3 01 c0       	mov    edx,0xc001f30c
c001caac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cab0:	89 10                	mov    DWORD PTR [eax],edx
c001cab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cab6:	83 ec 0c             	sub    esp,0xc
c001cab9:	50                   	push   eax
c001caba:	e8 39 e8 fe ff       	call   c000b2f8 <Bus::~Bus()>
c001cabf:	83 c4 10             	add    esp,0x10
c001cac2:	90                   	nop
c001cac3:	83 c4 0c             	add    esp,0xc
c001cac6:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001cac8 <PCI::~PCI()>:
c001cac8:	83 ec 0c             	sub    esp,0xc
c001cacb:	83 ec 0c             	sub    esp,0xc
c001cace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cad2:	e8 cd ff ff ff       	call   c001caa4 <PCI::~PCI()>
c001cad7:	83 c4 10             	add    esp,0x10
c001cada:	83 ec 08             	sub    esp,0x8
c001cadd:	68 5c 01 00 00       	push   0x15c
c001cae2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cae6:	e8 4c d9 fe ff       	call   c000a437 <operator delete(void*, unsigned long)>
c001caeb:	83 c4 10             	add    esp,0x10
c001caee:	83 c4 0c             	add    esp,0xc
c001caf1:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001caf2 <IDE::~IDE()>:
c001caf2:	83 ec 0c             	sub    esp,0xc
c001caf5:	ba c0 f3 01 c0       	mov    edx,0xc001f3c0
c001cafa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cafe:	89 10                	mov    DWORD PTR [eax],edx
c001cb00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb04:	83 ec 0c             	sub    esp,0xc
c001cb07:	50                   	push   eax
c001cb08:	e8 db f1 fe ff       	call   c000bce8 <HardDiskController::~HardDiskController()>
c001cb0d:	83 c4 10             	add    esp,0x10
c001cb10:	90                   	nop
c001cb11:	83 c4 0c             	add    esp,0xc
c001cb14:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001cb16 <IDE::~IDE()>:
c001cb16:	83 ec 0c             	sub    esp,0xc
c001cb19:	83 ec 0c             	sub    esp,0xc
c001cb1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb20:	e8 cd ff ff ff       	call   c001caf2 <IDE::~IDE()>
c001cb25:	83 c4 10             	add    esp,0x10
c001cb28:	83 ec 08             	sub    esp,0x8
c001cb2b:	68 70 02 00 00       	push   0x270
c001cb30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb34:	e8 fe d8 fe ff       	call   c000a437 <operator delete(void*, unsigned long)>
c001cb39:	83 c4 10             	add    esp,0x10
c001cb3c:	83 c4 0c             	add    esp,0xc
c001cb3f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001cb40 <SATABus::~SATABus()>:
c001cb40:	83 ec 0c             	sub    esp,0xc
c001cb43:	ba 10 f4 01 c0       	mov    edx,0xc001f410
c001cb48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb4c:	89 10                	mov    DWORD PTR [eax],edx
c001cb4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb52:	83 ec 0c             	sub    esp,0xc
c001cb55:	50                   	push   eax
c001cb56:	e8 8d f1 fe ff       	call   c000bce8 <HardDiskController::~HardDiskController()>
c001cb5b:	83 c4 10             	add    esp,0x10
c001cb5e:	90                   	nop
c001cb5f:	83 c4 0c             	add    esp,0xc
c001cb62:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001cb64 <SATABus::~SATABus()>:
c001cb64:	83 ec 0c             	sub    esp,0xc
c001cb67:	83 ec 0c             	sub    esp,0xc
c001cb6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb6e:	e8 cd ff ff ff       	call   c001cb40 <SATABus::~SATABus()>
c001cb73:	83 c4 10             	add    esp,0x10
c001cb76:	83 ec 08             	sub    esp,0x8
c001cb79:	68 64 01 00 00       	push   0x164
c001cb7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb82:	e8 b0 d8 fe ff       	call   c000a437 <operator delete(void*, unsigned long)>
c001cb87:	83 c4 10             	add    esp,0x10
c001cb8a:	83 c4 0c             	add    esp,0xc
c001cb8d:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001cb8e <ATA::~ATA()>:
c001cb8e:	83 ec 0c             	sub    esp,0xc
c001cb91:	ba 50 f4 01 c0       	mov    edx,0xc001f450
c001cb96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb9a:	89 10                	mov    DWORD PTR [eax],edx
c001cb9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cba0:	83 ec 0c             	sub    esp,0xc
c001cba3:	50                   	push   eax
c001cba4:	e8 21 f2 fe ff       	call   c000bdca <PhysicalDisk::~PhysicalDisk()>
c001cba9:	83 c4 10             	add    esp,0x10
c001cbac:	90                   	nop
c001cbad:	83 c4 0c             	add    esp,0xc
c001cbb0:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001cbb2 <ATA::~ATA()>:
c001cbb2:	83 ec 0c             	sub    esp,0xc
c001cbb5:	83 ec 0c             	sub    esp,0xc
c001cbb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbbc:	e8 cd ff ff ff       	call   c001cb8e <ATA::~ATA()>
c001cbc1:	83 c4 10             	add    esp,0x10
c001cbc4:	83 ec 08             	sub    esp,0x8
c001cbc7:	68 7c 01 00 00       	push   0x17c
c001cbcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbd0:	e8 62 d8 fe ff       	call   c000a437 <operator delete(void*, unsigned long)>
c001cbd5:	83 c4 10             	add    esp,0x10
c001cbd8:	83 c4 0c             	add    esp,0xc
c001cbdb:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001cbdc <ATAPI::~ATAPI()>:
c001cbdc:	83 ec 0c             	sub    esp,0xc
c001cbdf:	ba 98 f4 01 c0       	mov    edx,0xc001f498
c001cbe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbe8:	89 10                	mov    DWORD PTR [eax],edx
c001cbea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbee:	83 ec 0c             	sub    esp,0xc
c001cbf1:	50                   	push   eax
c001cbf2:	e8 d3 f1 fe ff       	call   c000bdca <PhysicalDisk::~PhysicalDisk()>
c001cbf7:	83 c4 10             	add    esp,0x10
c001cbfa:	90                   	nop
c001cbfb:	83 c4 0c             	add    esp,0xc
c001cbfe:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001cc00 <ATAPI::~ATAPI()>:
c001cc00:	83 ec 0c             	sub    esp,0xc
c001cc03:	83 ec 0c             	sub    esp,0xc
c001cc06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc0a:	e8 cd ff ff ff       	call   c001cbdc <ATAPI::~ATAPI()>
c001cc0f:	83 c4 10             	add    esp,0x10
c001cc12:	83 ec 08             	sub    esp,0x8
c001cc15:	68 84 01 00 00       	push   0x184
c001cc1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc1e:	e8 14 d8 fe ff       	call   c000a437 <operator delete(void*, unsigned long)>
c001cc23:	83 c4 10             	add    esp,0x10
c001cc26:	83 c4 0c             	add    esp,0xc
c001cc29:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001cc2a <SATA::~SATA()>:
c001cc2a:	83 ec 0c             	sub    esp,0xc
c001cc2d:	ba 4c f5 01 c0       	mov    edx,0xc001f54c
c001cc32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc36:	89 10                	mov    DWORD PTR [eax],edx
c001cc38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc3c:	83 ec 0c             	sub    esp,0xc
c001cc3f:	50                   	push   eax
c001cc40:	e8 85 f1 fe ff       	call   c000bdca <PhysicalDisk::~PhysicalDisk()>
c001cc45:	83 c4 10             	add    esp,0x10
c001cc48:	90                   	nop
c001cc49:	83 c4 0c             	add    esp,0xc
c001cc4c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001cc4e <SATA::~SATA()>:
c001cc4e:	83 ec 0c             	sub    esp,0xc
c001cc51:	83 ec 0c             	sub    esp,0xc
c001cc54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc58:	e8 cd ff ff ff       	call   c001cc2a <SATA::~SATA()>
c001cc5d:	83 c4 10             	add    esp,0x10
c001cc60:	83 ec 08             	sub    esp,0x8
c001cc63:	68 7c 01 00 00       	push   0x17c
c001cc68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc6c:	e8 c6 d7 fe ff       	call   c000a437 <operator delete(void*, unsigned long)>
c001cc71:	83 c4 10             	add    esp,0x10
c001cc74:	83 c4 0c             	add    esp,0xc
c001cc77:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001cc78 <SATAPI::~SATAPI()>:
c001cc78:	83 ec 0c             	sub    esp,0xc
c001cc7b:	ba 84 f6 01 c0       	mov    edx,0xc001f684
c001cc80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc84:	89 10                	mov    DWORD PTR [eax],edx
c001cc86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc8a:	83 ec 0c             	sub    esp,0xc
c001cc8d:	50                   	push   eax
c001cc8e:	e8 37 f1 fe ff       	call   c000bdca <PhysicalDisk::~PhysicalDisk()>
c001cc93:	83 c4 10             	add    esp,0x10
c001cc96:	90                   	nop
c001cc97:	83 c4 0c             	add    esp,0xc
c001cc9a:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001cc9c <SATAPI::~SATAPI()>:
c001cc9c:	83 ec 0c             	sub    esp,0xc
c001cc9f:	83 ec 0c             	sub    esp,0xc
c001cca2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cca6:	e8 cd ff ff ff       	call   c001cc78 <SATAPI::~SATAPI()>
c001ccab:	83 c4 10             	add    esp,0x10
c001ccae:	83 ec 08             	sub    esp,0x8
c001ccb1:	68 84 01 00 00       	push   0x184
c001ccb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccba:	e8 78 d7 fe ff       	call   c000a437 <operator delete(void*, unsigned long)>
c001ccbf:	83 c4 10             	add    esp,0x10
c001ccc2:	83 c4 0c             	add    esp,0xc
c001ccc5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001ccc6 <IOAPIC::~IOAPIC()>:
c001ccc6:	83 ec 0c             	sub    esp,0xc
c001ccc9:	ba c4 f6 01 c0       	mov    edx,0xc001f6c4
c001ccce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccd2:	89 10                	mov    DWORD PTR [eax],edx
c001ccd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccd8:	83 ec 0c             	sub    esp,0xc
c001ccdb:	50                   	push   eax
c001ccdc:	e8 8d eb fe ff       	call   c000b86e <Device::~Device()>
c001cce1:	83 c4 10             	add    esp,0x10
c001cce4:	90                   	nop
c001cce5:	83 c4 0c             	add    esp,0xc
c001cce8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001ccea <IOAPIC::~IOAPIC()>:
c001ccea:	83 ec 0c             	sub    esp,0xc
c001cced:	83 ec 0c             	sub    esp,0xc
c001ccf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccf4:	e8 cd ff ff ff       	call   c001ccc6 <IOAPIC::~IOAPIC()>
c001ccf9:	83 c4 10             	add    esp,0x10
c001ccfc:	83 ec 08             	sub    esp,0x8
c001ccff:	68 68 01 00 00       	push   0x168
c001cd04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd08:	e8 2a d7 fe ff       	call   c000a437 <operator delete(void*, unsigned long)>
c001cd0d:	83 c4 10             	add    esp,0x10
c001cd10:	83 c4 0c             	add    esp,0xc
c001cd13:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001cd14 <APICTimer::~APICTimer()>:
c001cd14:	83 ec 0c             	sub    esp,0xc
c001cd17:	ba 0c f7 01 c0       	mov    edx,0xc001f70c
c001cd1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd20:	89 10                	mov    DWORD PTR [eax],edx
c001cd22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd26:	83 ec 0c             	sub    esp,0xc
c001cd29:	50                   	push   eax
c001cd2a:	e8 7d 04 ff ff       	call   c000d1ac <Timer::~Timer()>
c001cd2f:	83 c4 10             	add    esp,0x10
c001cd32:	90                   	nop
c001cd33:	83 c4 0c             	add    esp,0xc
c001cd36:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001cd38 <APICTimer::~APICTimer()>:
c001cd38:	83 ec 0c             	sub    esp,0xc
c001cd3b:	83 ec 0c             	sub    esp,0xc
c001cd3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd42:	e8 cd ff ff ff       	call   c001cd14 <APICTimer::~APICTimer()>
c001cd47:	83 c4 10             	add    esp,0x10
c001cd4a:	83 ec 08             	sub    esp,0x8
c001cd4d:	68 60 01 00 00       	push   0x160
c001cd52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd56:	e8 dc d6 fe ff       	call   c000a437 <operator delete(void*, unsigned long)>
c001cd5b:	83 c4 10             	add    esp,0x10
c001cd5e:	83 c4 0c             	add    esp,0xc
c001cd61:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001cd64 <PIT::~PIT()>:
c001cd64:	83 ec 0c             	sub    esp,0xc
c001cd67:	ba 5c f7 01 c0       	mov    edx,0xc001f75c
c001cd6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd70:	89 10                	mov    DWORD PTR [eax],edx
c001cd72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd76:	83 ec 0c             	sub    esp,0xc
c001cd79:	50                   	push   eax
c001cd7a:	e8 2d 04 ff ff       	call   c000d1ac <Timer::~Timer()>
c001cd7f:	83 c4 10             	add    esp,0x10
c001cd82:	90                   	nop
c001cd83:	83 c4 0c             	add    esp,0xc
c001cd86:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001cd88 <PIT::~PIT()>:
c001cd88:	83 ec 0c             	sub    esp,0xc
c001cd8b:	83 ec 0c             	sub    esp,0xc
c001cd8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd92:	e8 cd ff ff ff       	call   c001cd64 <PIT::~PIT()>
c001cd97:	83 c4 10             	add    esp,0x10
c001cd9a:	83 ec 08             	sub    esp,0x8
c001cd9d:	68 5c 01 00 00       	push   0x15c
c001cda2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cda6:	e8 8c d6 fe ff       	call   c000a437 <operator delete(void*, unsigned long)>
c001cdab:	83 c4 10             	add    esp,0x10
c001cdae:	83 c4 0c             	add    esp,0xc
c001cdb1:	c3                   	ret    

Disassembly of section userkernel:

c0020000 <KiDefaultSignalHandlerAbort(int)>:
c0020000:	57                   	push   edi
c0020001:	b9 07 00 00 00       	mov    ecx,0x7
c0020006:	56                   	push   esi
c0020007:	be 61 e7 01 c0       	mov    esi,0xc001e761
c002000c:	83 ec 24             	sub    esp,0x24
c002000f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020013:	fc                   	cld    
c0020014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002001a:	50                   	push   eax
c002001b:	6a 00                	push   0x0
c002001d:	6a 00                	push   0x0
c002001f:	6a 27                	push   0x27
c0020021:	e8 2c 00 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020026:	83 c4 34             	add    esp,0x34
c0020029:	5e                   	pop    esi
c002002a:	5f                   	pop    edi
c002002b:	c3                   	ret    

c002002c <KiDefaultSignalHandlerTerminate(int)>:
c002002c:	57                   	push   edi
c002002d:	b9 08 00 00 00       	mov    ecx,0x8
c0020032:	56                   	push   esi
c0020033:	be 7d e7 01 c0       	mov    esi,0xc001e77d
c0020038:	83 ec 24             	sub    esp,0x24
c002003b:	89 e7                	mov    edi,esp
c002003d:	fc                   	cld    
c002003e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020040:	54                   	push   esp
c0020041:	6a 00                	push   0x0
c0020043:	6a 00                	push   0x0
c0020045:	6a 27                	push   0x27
c0020047:	e8 06 00 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002004c:	83 c4 34             	add    esp,0x34
c002004f:	5e                   	pop    esi
c0020050:	5f                   	pop    edi
c0020051:	c3                   	ret    

c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0020052:	53                   	push   ebx
c0020053:	83 ec 10             	sub    esp,0x10
c0020056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002005a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002005e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020066:	cd 60                	int    0x60
c0020068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002006c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020078:	83 c4 10             	add    esp,0x10
c002007b:	5b                   	pop    ebx
c002007c:	c3                   	ret    

Disassembly of section align_previous:

c0021000 <DO_NOT_DELETE()>:
c0021000:	c3                   	ret    
