
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 5b 78 00 00       	call   c000787b <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 b4 02 02 c0       	mov    eax,0xc00202b4
c0000025:	3d b4 02 02 c0       	cmp    eax,0xc00202b4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 b4 02 02 c0       	push   0xc00202b4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 b4 02 02 c0       	mov    eax,0xc00202b4
c0000051:	2d b4 02 02 c0       	sub    eax,0xc00202b4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 b4 02 02 c0       	push   0xc00202b4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 20 02 c0 00 	cmp    BYTE PTR ds:0xc00220c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb e8 d5 01 c0       	mov    ebx,0xc001d5e8
c0000097:	81 eb e4 d5 01 c0    	sub    ebx,0xc001d5e4
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be e4 d5 01 c0       	mov    esi,0xc001d5e4
c00000a6:	a1 c4 20 02 c0       	mov    eax,ds:0xc00220c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 20 02 c0       	mov    ds:0xc00220c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 20 02 c0       	mov    eax,ds:0xc00220c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 b4 02 02 c0       	push   0xc00202b4
c00000d8:	e8 23 ff ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 20 02 c0 01 	mov    BYTE PTR ds:0xc00220c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 20 02 c0       	push   0xc00220c8
c0000108:	68 b4 02 02 c0       	push   0xc00202b4
c000010d:	e8 ee fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000297:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000029a:	0f 20 d9             	mov    ecx,cr3
c000029d:	39 c8                	cmp    eax,ecx
c000029f:	74 03                	je     c00002a4 <commonThreadSwitch.doneVAS>
c00002a1:	0f 22 d8             	mov    cr3,eax

c00002a4 <commonThreadSwitch.doneVAS>:
c00002a4:	85 d2                	test   edx,edx
c00002a6:	75 11                	jne    c00002b9 <commonThreadSwitch.firstTime>
c00002a8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ab:	e8 98 2d 01 00       	call   c0013048 <changeTSS>
c00002b0:	5d                   	pop    ebp
c00002b1:	5f                   	pop    edi
c00002b2:	5e                   	pop    esi
c00002b3:	5a                   	pop    edx
c00002b4:	59                   	pop    ecx
c00002b5:	5b                   	pop    ebx
c00002b6:	58                   	pop    eax
c00002b7:	9d                   	popf   
c00002b8:	c3                   	ret    

c00002b9 <commonThreadSwitch.firstTime>:
c00002b9:	fa                   	cli    
c00002ba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002bd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002c2:	60                   	pusha  
c00002c3:	e8 b6 a0 00 00       	call   c000a37e <mapVASFirstTime>
c00002c8:	61                   	popa   
c00002c9:	89 c4                	mov    esp,eax
c00002cb:	56                   	push   esi
c00002cc:	52                   	push   edx
c00002cd:	e8 76 2d 01 00       	call   c0013048 <changeTSS>
c00002d2:	5a                   	pop    edx
c00002d3:	5e                   	pop    esi
c00002d4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002db:	5d                   	pop    ebp
c00002dc:	5f                   	pop    edi
c00002dd:	5e                   	pop    esi
c00002de:	59                   	pop    ecx
c00002df:	59                   	pop    ecx
c00002e0:	5b                   	pop    ebx
c00002e1:	58                   	pop    eax
c00002e2:	81 c4 04 00 00 00    	add    esp,0x4
c00002e8:	6a 02                	push   0x2
c00002ea:	9d                   	popf   
c00002eb:	52                   	push   edx
c00002ec:	e8 7f 32 01 00       	call   c0013570 <taskStartupFunction>
c00002f1:	5a                   	pop    edx
c00002f2:	50                   	push   eax
c00002f3:	ff d2                	call   edx
c00002f5:	e8 ce 38 01 00       	call   c0013bc8 <taskReturned>
c00002fa:	e9 fb ff ff ff       	jmp    c00002fa <commonThreadSwitch.firstTime+0x41>

c00002ff <asmQuickAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmQuickAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 02                	jb     c000030e <asmQuickAcquireLock.spin_with_pause>
c000030c:	fa                   	cli    
c000030d:	c3                   	ret    

c000030e <asmQuickAcquireLock.spin_with_pause>:
c000030e:	f3 90                	pause  
c0000310:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000316:	75 f6                	jne    c000030e <asmQuickAcquireLock.spin_with_pause>
c0000318:	e9 e8 ff ff ff       	jmp    c0000305 <asmQuickAcquireLock.retry>

c000031d <asmQuickReleaseLock>:
c000031d:	55                   	push   ebp
c000031e:	89 e5                	mov    ebp,esp
c0000320:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000327:	5d                   	pop    ebp
c0000328:	c3                   	ret    

c0000329 <asmAcquireLock>:
c0000329:	55                   	push   ebp
c000032a:	89 e5                	mov    ebp,esp
c000032c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032f <asmAcquireLock.retry>:
c000032f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000334:	72 05                	jb     c000033b <asmAcquireLock.spin_with_pause>
c0000336:	9c                   	pushf  
c0000337:	58                   	pop    eax
c0000338:	fa                   	cli    
c0000339:	5d                   	pop    ebp
c000033a:	c3                   	ret    

c000033b <asmAcquireLock.spin_with_pause>:
c000033b:	f3 90                	pause  
c000033d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000343:	75 f6                	jne    c000033b <asmAcquireLock.spin_with_pause>
c0000345:	e9 e5 ff ff ff       	jmp    c000032f <asmAcquireLock.retry>

c000034a <asmReleaseLock>:
c000034a:	55                   	push   ebp
c000034b:	89 e5                	mov    ebp,esp
c000034d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000350:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000353:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000359:	52                   	push   edx
c000035a:	9d                   	popf   
c000035b:	5d                   	pop    ebp
c000035c:	c3                   	ret    

c000035d <loadGDT>:
c000035d:	0f 01 15 c0 2e 02 c0 	lgdtd  ds:0xc0022ec0
c0000364:	66 b8 10 00          	mov    ax,0x10
c0000368:	66 8e d8             	mov    ds,ax
c000036b:	66 8e c0             	mov    es,ax
c000036e:	66 8e e0             	mov    fs,ax
c0000371:	66 8e e8             	mov    gs,ax
c0000374:	66 8e d0             	mov    ss,ax
c0000377:	e9 00 00 00 00       	jmp    c000037c <flush2>

c000037c <flush2>:
c000037c:	c3                   	ret    

c000037d <memcpy>:
c000037d:	e9 2c ff 00 00       	jmp    c00102ae <__not_memcpy>
c0000382:	66 90                	xchg   ax,ax
c0000384:	66 90                	xchg   ax,ax
c0000386:	66 90                	xchg   ax,ax
c0000388:	66 90                	xchg   ax,ax
c000038a:	66 90                	xchg   ax,ax
c000038c:	66 90                	xchg   ax,ax
c000038e:	66 90                	xchg   ax,ax

c0000390 <memcmp>:
c0000390:	56                   	push   esi
c0000391:	53                   	push   ebx
c0000392:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000039a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000039e:	85 f6                	test   esi,esi
c00003a0:	74 1c                	je     c00003be <memcmp+0x2e>
c00003a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a6:	38 cb                	cmp    bl,cl
c00003a8:	75 26                	jne    c00003d0 <memcmp+0x40>
c00003aa:	01 c6                	add    esi,eax
c00003ac:	eb 0a                	jmp    c00003b8 <memcmp+0x28>
c00003ae:	66 90                	xchg   ax,ax
c00003b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003b4:	38 d9                	cmp    cl,bl
c00003b6:	75 18                	jne    c00003d0 <memcmp+0x40>
c00003b8:	40                   	inc    eax
c00003b9:	42                   	inc    edx
c00003ba:	39 f0                	cmp    eax,esi
c00003bc:	75 f2                	jne    c00003b0 <memcmp+0x20>
c00003be:	31 c0                	xor    eax,eax
c00003c0:	5b                   	pop    ebx
c00003c1:	5e                   	pop    esi
c00003c2:	c3                   	ret    
c00003c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003d0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003d6:	31 c0                	xor    eax,eax
c00003d8:	88 c8                	mov    al,cl
c00003da:	29 d8                	sub    eax,ebx
c00003dc:	5b                   	pop    ebx
c00003dd:	5e                   	pop    esi
c00003de:	c3                   	ret    
c00003df:	90                   	nop

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 98 00 00 00    	jae    c0000490 <memmove+0xb0>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	0f 84 7c 00 00 00    	je     c000047c <memmove+0x9c>
c0000400:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000403:	8d 75 04             	lea    esi,[ebp+0x4]
c0000406:	39 cd                	cmp    ebp,ecx
c0000408:	0f 93 c1             	setae  cl
c000040b:	39 f3                	cmp    ebx,esi
c000040d:	0f 93 c0             	setae  al
c0000410:	89 c6                	mov    esi,eax
c0000412:	09 ce                	or     esi,ecx
c0000414:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000417:	89 f0                	mov    eax,esi
c0000419:	83 f9 0c             	cmp    ecx,0xc
c000041c:	0f 97 c1             	seta   cl
c000041f:	84 c8                	test   al,cl
c0000421:	0f 84 89 00 00 00    	je     c00004b0 <memmove+0xd0>
c0000427:	89 e9                	mov    ecx,ebp
c0000429:	09 d9                	or     ecx,ebx
c000042b:	83 e1 03             	and    ecx,0x3
c000042e:	0f 85 7c 00 00 00    	jne    c00004b0 <memmove+0xd0>
c0000434:	89 d7                	mov    edi,edx
c0000436:	89 d9                	mov    ecx,ebx
c0000438:	83 e7 fc             	and    edi,0xfffffffc
c000043b:	89 ee                	mov    esi,ebp
c000043d:	01 df                	add    edi,ebx
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x60>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0x9c>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0x9c>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0x9c>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0x9c>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0x9c>
c0000496:	4b                   	dec    ebx
c0000497:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	4a                   	dec    edx
c00004a7:	75 f7                	jne    c00004a0 <memmove+0xc0>
c00004a9:	5b                   	pop    ebx
c00004aa:	89 e8                	mov    eax,ebp
c00004ac:	5e                   	pop    esi
c00004ad:	5f                   	pop    edi
c00004ae:	5d                   	pop    ebp
c00004af:	c3                   	ret    
c00004b0:	01 ea                	add    edx,ebp
c00004b2:	89 e9                	mov    ecx,ebp
c00004b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004c0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004c2:	41                   	inc    ecx
c00004c3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004c6:	43                   	inc    ebx
c00004c7:	39 d1                	cmp    ecx,edx
c00004c9:	75 f5                	jne    c00004c0 <memmove+0xe0>
c00004cb:	eb af                	jmp    c000047c <memmove+0x9c>
c00004cd:	8d 76 00             	lea    esi,[esi+0x0]

c00004d0 <memset>:
c00004d0:	57                   	push   edi
c00004d1:	53                   	push   ebx
c00004d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004d6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004da:	85 d2                	test   edx,edx
c00004dc:	74 1f                	je     c00004fd <memset+0x2d>
c00004de:	31 c0                	xor    eax,eax
c00004e0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004e4:	88 c4                	mov    ah,al
c00004e6:	89 c1                	mov    ecx,eax
c00004e8:	c1 e1 10             	shl    ecx,0x10
c00004eb:	09 c8                	or     eax,ecx
c00004ed:	83 fa 04             	cmp    edx,0x4
c00004f0:	73 1e                	jae    c0000510 <memset+0x40>
c00004f2:	85 d2                	test   edx,edx
c00004f4:	74 07                	je     c00004fd <memset+0x2d>
c00004f6:	88 03                	mov    BYTE PTR [ebx],al
c00004f8:	f6 c2 02             	test   dl,0x2
c00004fb:	75 30                	jne    c000052d <memset+0x5d>
c00004fd:	89 d8                	mov    eax,ebx
c00004ff:	5b                   	pop    ebx
c0000500:	5f                   	pop    edi
c0000501:	c3                   	ret    
c0000502:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000509:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000510:	89 03                	mov    DWORD PTR [ebx],eax
c0000512:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000515:	89 d9                	mov    ecx,ebx
c0000517:	83 e7 fc             	and    edi,0xfffffffc
c000051a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000051e:	29 f9                	sub    ecx,edi
c0000520:	01 d1                	add    ecx,edx
c0000522:	c1 e9 02             	shr    ecx,0x2
c0000525:	fc                   	cld    
c0000526:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000528:	89 d8                	mov    eax,ebx
c000052a:	5b                   	pop    ebx
c000052b:	5f                   	pop    edi
c000052c:	c3                   	ret    
c000052d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000532:	eb c9                	jmp    c00004fd <memset+0x2d>
c0000534:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000053a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000540 <strlen>:
c0000540:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000544:	31 c0                	xor    eax,eax
c0000546:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000549:	74 15                	je     c0000560 <strlen+0x20>
c000054b:	90                   	nop
c000054c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000550:	40                   	inc    eax
c0000551:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000555:	75 f9                	jne    c0000550 <strlen+0x10>
c0000557:	c3                   	ret    
c0000558:	90                   	nop
c0000559:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000560:	c3                   	ret    
c0000561:	eb 0d                	jmp    c0000570 <strpbrk>
c0000563:	90                   	nop
c0000564:	90                   	nop
c0000565:	90                   	nop
c0000566:	90                   	nop
c0000567:	90                   	nop
c0000568:	90                   	nop
c0000569:	90                   	nop
c000056a:	90                   	nop
c000056b:	90                   	nop
c000056c:	90                   	nop
c000056d:	90                   	nop
c000056e:	90                   	nop
c000056f:	90                   	nop

c0000570 <strpbrk>:
c0000570:	57                   	push   edi
c0000571:	56                   	push   esi
c0000572:	53                   	push   ebx
c0000573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000577:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000057b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000057d:	84 db                	test   bl,bl
c000057f:	74 21                	je     c00005a2 <strpbrk+0x32>
c0000581:	8a 07                	mov    al,BYTE PTR [edi]
c0000583:	84 c0                	test   al,al
c0000585:	74 14                	je     c000059b <strpbrk+0x2b>
c0000587:	38 d8                	cmp    al,bl
c0000589:	74 19                	je     c00005a4 <strpbrk+0x34>
c000058b:	89 fa                	mov    edx,edi
c000058d:	eb 05                	jmp    c0000594 <strpbrk+0x24>
c000058f:	90                   	nop
c0000590:	38 d9                	cmp    cl,bl
c0000592:	74 10                	je     c00005a4 <strpbrk+0x34>
c0000594:	42                   	inc    edx
c0000595:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000597:	84 c9                	test   cl,cl
c0000599:	75 f5                	jne    c0000590 <strpbrk+0x20>
c000059b:	46                   	inc    esi
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	84 db                	test   bl,bl
c00005a0:	75 e1                	jne    c0000583 <strpbrk+0x13>
c00005a2:	31 f6                	xor    esi,esi
c00005a4:	89 f0                	mov    eax,esi
c00005a6:	5b                   	pop    ebx
c00005a7:	5e                   	pop    esi
c00005a8:	5f                   	pop    edi
c00005a9:	c3                   	ret    
c00005aa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005b0 <strtok>:
c00005b0:	56                   	push   esi
c00005b1:	53                   	push   ebx
c00005b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005ba:	85 db                	test   ebx,ebx
c00005bc:	75 07                	jne    c00005c5 <strtok+0x15>
c00005be:	eb 30                	jmp    c00005f0 <strtok+0x40>
c00005c0:	43                   	inc    ebx
c00005c1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005c5:	56                   	push   esi
c00005c6:	53                   	push   ebx
c00005c7:	e8 a4 ff ff ff       	call   c0000570 <strpbrk>
c00005cc:	5a                   	pop    edx
c00005cd:	a3 e0 20 02 c0       	mov    ds:0xc00220e0,eax
c00005d2:	59                   	pop    ecx
c00005d3:	39 d8                	cmp    eax,ebx
c00005d5:	74 e9                	je     c00005c0 <strtok+0x10>
c00005d7:	85 c0                	test   eax,eax
c00005d9:	74 1f                	je     c00005fa <strtok+0x4a>
c00005db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005de:	8d 50 01             	lea    edx,[eax+0x1]
c00005e1:	89 d8                	mov    eax,ebx
c00005e3:	89 15 e0 20 02 c0    	mov    DWORD PTR ds:0xc00220e0,edx
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	c3                   	ret    
c00005ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005f0:	8b 1d e0 20 02 c0    	mov    ebx,DWORD PTR ds:0xc00220e0
c00005f6:	85 db                	test   ebx,ebx
c00005f8:	75 cb                	jne    c00005c5 <strtok+0x15>
c00005fa:	31 c0                	xor    eax,eax
c00005fc:	5b                   	pop    ebx
c00005fd:	5e                   	pop    esi
c00005fe:	c3                   	ret    
c00005ff:	90                   	nop

c0000600 <strcpy>:
c0000600:	53                   	push   ebx
c0000601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000605:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000609:	89 c3                	mov    ebx,eax
c000060b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000060d:	84 d2                	test   dl,dl
c000060f:	74 19                	je     c000062a <strcpy+0x2a>
c0000611:	eb 0d                	jmp    c0000620 <strcpy+0x20>
c0000613:	90                   	nop
c0000614:	90                   	nop
c0000615:	90                   	nop
c0000616:	90                   	nop
c0000617:	90                   	nop
c0000618:	90                   	nop
c0000619:	90                   	nop
c000061a:	90                   	nop
c000061b:	90                   	nop
c000061c:	90                   	nop
c000061d:	90                   	nop
c000061e:	90                   	nop
c000061f:	90                   	nop
c0000620:	88 13                	mov    BYTE PTR [ebx],dl
c0000622:	41                   	inc    ecx
c0000623:	43                   	inc    ebx
c0000624:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000626:	84 d2                	test   dl,dl
c0000628:	75 f6                	jne    c0000620 <strcpy+0x20>
c000062a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000062d:	5b                   	pop    ebx
c000062e:	c3                   	ret    
c000062f:	90                   	nop

c0000630 <strncpy>:
c0000630:	57                   	push   edi
c0000631:	56                   	push   esi
c0000632:	53                   	push   ebx
c0000633:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000637:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000063b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000063f:	85 ff                	test   edi,edi
c0000641:	74 3e                	je     c0000681 <strncpy+0x51>
c0000643:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000645:	8d 47 ff             	lea    eax,[edi-0x1]
c0000648:	8d 4a 01             	lea    ecx,[edx+0x1]
c000064b:	88 1a                	mov    BYTE PTR [edx],bl
c000064d:	84 db                	test   bl,bl
c000064f:	74 3f                	je     c0000690 <strncpy+0x60>
c0000651:	85 c0                	test   eax,eax
c0000653:	74 2c                	je     c0000681 <strncpy+0x51>
c0000655:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000658:	8d 47 fe             	lea    eax,[edi-0x2]
c000065b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000065e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000661:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000664:	84 db                	test   bl,bl
c0000666:	75 15                	jne    c000067d <strncpy+0x4d>
c0000668:	eb 26                	jmp    c0000690 <strncpy+0x60>
c000066a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000670:	47                   	inc    edi
c0000671:	41                   	inc    ecx
c0000672:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000675:	48                   	dec    eax
c0000676:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000679:	84 db                	test   bl,bl
c000067b:	74 13                	je     c0000690 <strncpy+0x60>
c000067d:	85 c0                	test   eax,eax
c000067f:	75 ef                	jne    c0000670 <strncpy+0x40>
c0000681:	5b                   	pop    ebx
c0000682:	89 d0                	mov    eax,edx
c0000684:	5e                   	pop    esi
c0000685:	5f                   	pop    edi
c0000686:	c3                   	ret    
c0000687:	89 f6                	mov    esi,esi
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000690:	85 c0                	test   eax,eax
c0000692:	74 ed                	je     c0000681 <strncpy+0x51>
c0000694:	83 f8 04             	cmp    eax,0x4
c0000697:	73 17                	jae    c00006b0 <strncpy+0x80>
c0000699:	85 c0                	test   eax,eax
c000069b:	74 e4                	je     c0000681 <strncpy+0x51>
c000069d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006a0:	a8 02                	test   al,0x2
c00006a2:	74 dd                	je     c0000681 <strncpy+0x51>
c00006a4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006ab:	eb d4                	jmp    c0000681 <strncpy+0x51>
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]
c00006b0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006b6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006b9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006c1:	83 e7 fc             	and    edi,0xfffffffc
c00006c4:	29 f9                	sub    ecx,edi
c00006c6:	01 c1                	add    ecx,eax
c00006c8:	c1 e9 02             	shr    ecx,0x2
c00006cb:	fc                   	cld    
c00006cc:	31 c0                	xor    eax,eax
c00006ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006d0:	89 d0                	mov    eax,edx
c00006d2:	5b                   	pop    ebx
c00006d3:	5e                   	pop    esi
c00006d4:	5f                   	pop    edi
c00006d5:	c3                   	ret    
c00006d6:	8d 76 00             	lea    esi,[esi+0x0]
c00006d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006e0 <strcmp>:
c00006e0:	56                   	push   esi
c00006e1:	53                   	push   ebx
c00006e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006ea:	8a 16                	mov    dl,BYTE PTR [esi]
c00006ec:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006ee:	38 d1                	cmp    cl,dl
c00006f0:	75 1d                	jne    c000070f <strcmp+0x2f>
c00006f2:	84 c9                	test   cl,cl
c00006f4:	74 2a                	je     c0000720 <strcmp+0x40>
c00006f6:	b8 01 00 00 00       	mov    eax,0x1
c00006fb:	eb 08                	jmp    c0000705 <strcmp+0x25>
c00006fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000700:	40                   	inc    eax
c0000701:	84 d2                	test   dl,dl
c0000703:	74 1b                	je     c0000720 <strcmp+0x40>
c0000705:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000708:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000070b:	38 ca                	cmp    dl,cl
c000070d:	74 f1                	je     c0000700 <strcmp+0x20>
c000070f:	31 c0                	xor    eax,eax
c0000711:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000717:	88 d0                	mov    al,dl
c0000719:	5b                   	pop    ebx
c000071a:	29 c8                	sub    eax,ecx
c000071c:	5e                   	pop    esi
c000071d:	c3                   	ret    
c000071e:	66 90                	xchg   ax,ax
c0000720:	31 c0                	xor    eax,eax
c0000722:	5b                   	pop    ebx
c0000723:	5e                   	pop    esi
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000730 <strchr>:
c0000730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000734:	8a 10                	mov    dl,BYTE PTR [eax]
c0000736:	84 d2                	test   dl,dl
c0000738:	74 21                	je     c000075b <strchr+0x2b>
c000073a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000073e:	38 ca                	cmp    dl,cl
c0000740:	75 12                	jne    c0000754 <strchr+0x24>
c0000742:	eb 1a                	jmp    c000075e <strchr+0x2e>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000750:	38 ca                	cmp    dl,cl
c0000752:	74 09                	je     c000075d <strchr+0x2d>
c0000754:	40                   	inc    eax
c0000755:	8a 10                	mov    dl,BYTE PTR [eax]
c0000757:	84 d2                	test   dl,dl
c0000759:	75 f5                	jne    c0000750 <strchr+0x20>
c000075b:	31 c0                	xor    eax,eax
c000075d:	c3                   	ret    
c000075e:	c3                   	ret    
c000075f:	90                   	nop

c0000760 <strncmp>:
c0000760:	57                   	push   edi
c0000761:	56                   	push   esi
c0000762:	53                   	push   ebx
c0000763:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000076f:	85 ff                	test   edi,edi
c0000771:	74 2f                	je     c00007a2 <strncmp+0x42>
c0000773:	8a 16                	mov    dl,BYTE PTR [esi]
c0000775:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000777:	38 d1                	cmp    cl,dl
c0000779:	75 35                	jne    c00007b0 <strncmp+0x50>
c000077b:	8d 46 01             	lea    eax,[esi+0x1]
c000077e:	84 c9                	test   cl,cl
c0000780:	74 20                	je     c00007a2 <strncmp+0x42>
c0000782:	01 fe                	add    esi,edi
c0000784:	eb 17                	jmp    c000079d <strncmp+0x3d>
c0000786:	8d 76 00             	lea    esi,[esi+0x0]
c0000789:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000790:	8a 10                	mov    dl,BYTE PTR [eax]
c0000792:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000794:	38 ca                	cmp    dl,cl
c0000796:	75 18                	jne    c00007b0 <strncmp+0x50>
c0000798:	40                   	inc    eax
c0000799:	84 d2                	test   dl,dl
c000079b:	74 05                	je     c00007a2 <strncmp+0x42>
c000079d:	43                   	inc    ebx
c000079e:	39 c6                	cmp    esi,eax
c00007a0:	75 ee                	jne    c0000790 <strncmp+0x30>
c00007a2:	5b                   	pop    ebx
c00007a3:	31 c0                	xor    eax,eax
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	5b                   	pop    ebx
c00007b1:	31 c0                	xor    eax,eax
c00007b3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007b9:	88 d0                	mov    al,dl
c00007bb:	5e                   	pop    esi
c00007bc:	29 c8                	sub    eax,ecx
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    

c00007c0 <strcat>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	89 c3                	mov    ebx,eax
c00007cc:	eb 04                	jmp    c00007d2 <strcat+0x12>
c00007ce:	66 90                	xchg   ax,ax
c00007d0:	89 d3                	mov    ebx,edx
c00007d2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x10>
c00007db:	31 d2                	xor    edx,edx
c00007dd:	8d 76 00             	lea    esi,[esi+0x0]
c00007e0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007e3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007e6:	42                   	inc    edx
c00007e7:	84 c9                	test   cl,cl
c00007e9:	75 f5                	jne    c00007e0 <strcat+0x20>
c00007eb:	5b                   	pop    ebx
c00007ec:	5e                   	pop    esi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strncat>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007fe:	85 f6                	test   esi,esi
c0000800:	74 2e                	je     c0000830 <strncat+0x40>
c0000802:	89 c2                	mov    edx,eax
c0000804:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000080a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000810:	42                   	inc    edx
c0000811:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000815:	75 f9                	jne    c0000810 <strncat+0x20>
c0000817:	01 ce                	add    esi,ecx
c0000819:	eb 0a                	jmp    c0000825 <strncat+0x35>
c000081b:	90                   	nop
c000081c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000820:	39 f1                	cmp    ecx,esi
c0000822:	74 1c                	je     c0000840 <strncat+0x50>
c0000824:	42                   	inc    edx
c0000825:	41                   	inc    ecx
c0000826:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000829:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000082c:	84 db                	test   bl,bl
c000082e:	75 f0                	jne    c0000820 <strncat+0x30>
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000840:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000843:	5b                   	pop    ebx
c0000844:	5e                   	pop    esi
c0000845:	c3                   	ret    
c0000846:	8d 76 00             	lea    esi,[esi+0x0]
c0000849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000850 <strstr>:
c0000850:	57                   	push   edi
c0000851:	56                   	push   esi
c0000852:	53                   	push   ebx
c0000853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000857:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000085b:	57                   	push   edi
c000085c:	e8 df fc ff ff       	call   c0000540 <strlen>
c0000861:	59                   	pop    ecx
c0000862:	85 c0                	test   eax,eax
c0000864:	74 3a                	je     c00008a0 <strstr+0x50>
c0000866:	89 c6                	mov    esi,eax
c0000868:	eb 16                	jmp    c0000880 <strstr+0x30>
c000086a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000870:	56                   	push   esi
c0000871:	57                   	push   edi
c0000872:	53                   	push   ebx
c0000873:	e8 18 fb ff ff       	call   c0000390 <memcmp>
c0000878:	83 c4 0c             	add    esp,0xc
c000087b:	85 c0                	test   eax,eax
c000087d:	74 21                	je     c00008a0 <strstr+0x50>
c000087f:	43                   	inc    ebx
c0000880:	53                   	push   ebx
c0000881:	e8 ba fc ff ff       	call   c0000540 <strlen>
c0000886:	5a                   	pop    edx
c0000887:	39 f0                	cmp    eax,esi
c0000889:	73 e5                	jae    c0000870 <strstr+0x20>
c000088b:	5b                   	pop    ebx
c000088c:	31 c0                	xor    eax,eax
c000088e:	5e                   	pop    esi
c000088f:	5f                   	pop    edi
c0000890:	c3                   	ret    
c0000891:	eb 0d                	jmp    c00008a0 <strstr+0x50>
c0000893:	90                   	nop
c0000894:	90                   	nop
c0000895:	90                   	nop
c0000896:	90                   	nop
c0000897:	90                   	nop
c0000898:	90                   	nop
c0000899:	90                   	nop
c000089a:	90                   	nop
c000089b:	90                   	nop
c000089c:	90                   	nop
c000089d:	90                   	nop
c000089e:	90                   	nop
c000089f:	90                   	nop
c00008a0:	89 d8                	mov    eax,ebx
c00008a2:	5b                   	pop    ebx
c00008a3:	5e                   	pop    esi
c00008a4:	5f                   	pop    edi
c00008a5:	c3                   	ret    
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008b0 <toupper>:
c00008b0:	31 d2                	xor    edx,edx
c00008b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b6:	88 c2                	mov    dl,al
c00008b8:	f6 82 00 d6 01 c0 02 	test   BYTE PTR [edx-0x3ffe2a00],0x2
c00008bf:	74 03                	je     c00008c4 <toupper+0x14>
c00008c1:	83 e8 20             	sub    eax,0x20
c00008c4:	c3                   	ret    
c00008c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <tolower>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 00 d6 01 c0 01 	test   BYTE PTR [edx-0x3ffe2a00],0x1
c00008df:	74 03                	je     c00008e4 <tolower+0x14>
c00008e1:	83 c0 20             	add    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <simple_strtoul>:
c00008f0:	55                   	push   ebp
c00008f1:	57                   	push   edi
c00008f2:	56                   	push   esi
c00008f3:	53                   	push   ebx
c00008f4:	83 ec 08             	sub    esp,0x8
c00008f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ff:	90                   	nop
c0000900:	31 d2                	xor    edx,edx
c0000902:	8a 01                	mov    al,BYTE PTR [ecx]
c0000904:	88 c2                	mov    dl,al
c0000906:	f6 82 00 d6 01 c0 08 	test   BYTE PTR [edx-0x3ffe2a00],0x8
c000090d:	75 04                	jne    c0000913 <simple_strtoul+0x23>
c000090f:	3c 09                	cmp    al,0x9
c0000911:	75 0d                	jne    c0000920 <simple_strtoul+0x30>
c0000913:	41                   	inc    ecx
c0000914:	eb ea                	jmp    c0000900 <simple_strtoul+0x10>
c0000916:	8d 76 00             	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	3c 2d                	cmp    al,0x2d
c0000922:	0f 84 48 01 00 00    	je     c0000a70 <simple_strtoul+0x180>
c0000928:	3c 2b                	cmp    al,0x2b
c000092a:	0f 84 e0 00 00 00    	je     c0000a10 <simple_strtoul+0x120>
c0000930:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000938:	85 f6                	test   esi,esi
c000093a:	0f 85 e1 00 00 00    	jne    c0000a21 <simple_strtoul+0x131>
c0000940:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000943:	80 fa 30             	cmp    dl,0x30
c0000946:	0f 84 75 01 00 00    	je     c0000ac1 <simple_strtoul+0x1d1>
c000094c:	be 0a 00 00 00       	mov    esi,0xa
c0000951:	84 d2                	test   dl,dl
c0000953:	0f 84 9f 01 00 00    	je     c0000af8 <simple_strtoul+0x208>
c0000959:	31 ed                	xor    ebp,ebp
c000095b:	31 ff                	xor    edi,edi
c000095d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000964:	eb 35                	jmp    c000099b <simple_strtoul+0xab>
c0000966:	8d 76 00             	lea    esi,[esi+0x0]
c0000969:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000970:	83 eb 30             	sub    ebx,0x30
c0000973:	39 f3                	cmp    ebx,esi
c0000975:	73 59                	jae    c00009d0 <simple_strtoul+0xe0>
c0000977:	31 d2                	xor    edx,edx
c0000979:	89 d8                	mov    eax,ebx
c000097b:	f7 d0                	not    eax
c000097d:	f7 f6                	div    esi
c000097f:	39 f8                	cmp    eax,edi
c0000981:	0f 82 c9 00 00 00    	jb     c0000a50 <simple_strtoul+0x160>
c0000987:	0f af fe             	imul   edi,esi
c000098a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000991:	01 df                	add    edi,ebx
c0000993:	41                   	inc    ecx
c0000994:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000997:	84 d2                	test   dl,dl
c0000999:	74 35                	je     c00009d0 <simple_strtoul+0xe0>
c000099b:	31 db                	xor    ebx,ebx
c000099d:	88 d3                	mov    bl,dl
c000099f:	f6 83 00 d6 01 c0 04 	test   BYTE PTR [ebx-0x3ffe2a00],0x4
c00009a6:	75 c8                	jne    c0000970 <simple_strtoul+0x80>
c00009a8:	52                   	push   edx
c00009a9:	e8 02 ff ff ff       	call   c00008b0 <toupper>
c00009ae:	31 d2                	xor    edx,edx
c00009b0:	5b                   	pop    ebx
c00009b1:	88 c2                	mov    dl,al
c00009b3:	f6 82 00 d6 01 c0 01 	test   BYTE PTR [edx-0x3ffe2a00],0x1
c00009ba:	74 14                	je     c00009d0 <simple_strtoul+0xe0>
c00009bc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009bf:	39 f3                	cmp    ebx,esi
c00009c1:	72 b4                	jb     c0000977 <simple_strtoul+0x87>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d4:	85 c0                	test   eax,eax
c00009d6:	74 18                	je     c00009f0 <simple_strtoul+0x100>
c00009d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009db:	09 f8                	or     eax,edi
c00009dd:	0f 85 7d 00 00 00    	jne    c0000a60 <simple_strtoul+0x170>
c00009e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009eb:	31 ff                	xor    edi,edi
c00009ed:	89 30                	mov    DWORD PTR [eax],esi
c00009ef:	90                   	nop
c00009f0:	4d                   	dec    ebp
c00009f1:	75 05                	jne    c00009f8 <simple_strtoul+0x108>
c00009f3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009f8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009fd:	75 02                	jne    c0000a01 <simple_strtoul+0x111>
c00009ff:	f7 df                	neg    edi
c0000a01:	83 c4 08             	add    esp,0x8
c0000a04:	89 f8                	mov    eax,edi
c0000a06:	5b                   	pop    ebx
c0000a07:	5e                   	pop    esi
c0000a08:	5f                   	pop    edi
c0000a09:	5d                   	pop    ebp
c0000a0a:	c3                   	ret    
c0000a0b:	90                   	nop
c0000a0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a10:	41                   	inc    ecx
c0000a11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a19:	85 f6                	test   esi,esi
c0000a1b:	0f 84 1f ff ff ff    	je     c0000940 <simple_strtoul+0x50>
c0000a21:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a24:	83 f8 22             	cmp    eax,0x22
c0000a27:	77 7b                	ja     c0000aa4 <simple_strtoul+0x1b4>
c0000a29:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a2c:	83 fe 08             	cmp    esi,0x8
c0000a2f:	0f 84 b3 00 00 00    	je     c0000ae8 <simple_strtoul+0x1f8>
c0000a35:	83 fe 10             	cmp    esi,0x10
c0000a38:	0f 85 13 ff ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000a3e:	80 fa 30             	cmp    dl,0x30
c0000a41:	74 3b                	je     c0000a7e <simple_strtoul+0x18e>
c0000a43:	be 10 00 00 00       	mov    esi,0x10
c0000a48:	e9 04 ff ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a50:	bd 01 00 00 00       	mov    ebp,0x1
c0000a55:	31 ff                	xor    edi,edi
c0000a57:	e9 37 ff ff ff       	jmp    c0000993 <simple_strtoul+0xa3>
c0000a5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	89 08                	mov    DWORD PTR [eax],ecx
c0000a66:	eb 88                	jmp    c00009f0 <simple_strtoul+0x100>
c0000a68:	90                   	nop
c0000a69:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a70:	41                   	inc    ecx
c0000a71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a79:	e9 ba fe ff ff       	jmp    c0000938 <simple_strtoul+0x48>
c0000a7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a82:	88 04 24             	mov    BYTE PTR [esp],al
c0000a85:	50                   	push   eax
c0000a86:	e8 45 fe ff ff       	call   c00008d0 <tolower>
c0000a8b:	5e                   	pop    esi
c0000a8c:	83 f8 78             	cmp    eax,0x78
c0000a8f:	0f 84 88 00 00 00    	je     c0000b1d <simple_strtoul+0x22d>
c0000a95:	41                   	inc    ecx
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a9f:	e9 ad fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000aa4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aa8:	85 ff                	test   edi,edi
c0000aaa:	74 5e                	je     c0000b0a <simple_strtoul+0x21a>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	85 c9                	test   ecx,ecx
c0000ab2:	75 50                	jne    c0000b04 <simple_strtoul+0x214>
c0000ab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aba:	31 ff                	xor    edi,edi
c0000abc:	e9 37 ff ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000ac1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac8:	50                   	push   eax
c0000ac9:	e8 02 fe ff ff       	call   c00008d0 <tolower>
c0000ace:	5d                   	pop    ebp
c0000acf:	83 f8 78             	cmp    eax,0x78
c0000ad2:	74 3d                	je     c0000b11 <simple_strtoul+0x221>
c0000ad4:	41                   	inc    ecx
c0000ad5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ad9:	80 fa 30             	cmp    dl,0x30
c0000adc:	74 13                	je     c0000af1 <simple_strtoul+0x201>
c0000ade:	be 08 00 00 00       	mov    esi,0x8
c0000ae3:	e9 69 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000ae8:	80 fa 30             	cmp    dl,0x30
c0000aeb:	0f 85 60 fe ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000af1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000af5:	41                   	inc    ecx
c0000af6:	eb e6                	jmp    c0000ade <simple_strtoul+0x1ee>
c0000af8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000afc:	85 d2                	test   edx,edx
c0000afe:	74 0a                	je     c0000b0a <simple_strtoul+0x21a>
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b08:	89 30                	mov    DWORD PTR [eax],esi
c0000b0a:	31 ff                	xor    edi,edi
c0000b0c:	e9 e7 fe ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000b11:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b15:	83 c1 02             	add    ecx,0x2
c0000b18:	e9 21 ff ff ff       	jmp    c0000a3e <simple_strtoul+0x14e>
c0000b1d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b21:	be 10 00 00 00       	mov    esi,0x10
c0000b26:	83 c1 02             	add    ecx,0x2
c0000b29:	e9 23 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>

c0000b2e <largebin_index>:
c0000b2e:	89 c2                	mov    edx,eax
c0000b30:	c1 ea 08             	shr    edx,0x8
c0000b33:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b39:	77 10                	ja     c0000b4b <largebin_index+0x1d>
c0000b3b:	0f bd d2             	bsr    edx,edx
c0000b3e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b41:	d3 e8                	shr    eax,cl
c0000b43:	83 e0 03             	and    eax,0x3
c0000b46:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b4a:	c3                   	ret    
c0000b4b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b50:	c3                   	ret    

c0000b51 <malloc_init_state>:
c0000b51:	53                   	push   ebx
c0000b52:	8d 50 34             	lea    edx,[eax+0x34]
c0000b55:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b5b:	89 d1                	mov    ecx,edx
c0000b5d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b60:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b63:	83 c2 08             	add    edx,0x8
c0000b66:	39 da                	cmp    edx,ebx
c0000b68:	75 f3                	jne    c0000b5d <malloc_init_state+0xc>
c0000b6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b6c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b76:	83 e2 03             	and    edx,0x3
c0000b79:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b83:	83 ca 48             	or     edx,0x48
c0000b86:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b90:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b9a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ba1:	89 10                	mov    DWORD PTR [eax],edx
c0000ba3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ba6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bb0:	5b                   	pop    ebx
c0000bb1:	c3                   	ret    

c0000bb2 <malloc_consolidate>:
c0000bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bb4:	85 d2                	test   edx,edx
c0000bb6:	0f 84 d8 00 00 00    	je     c0000c94 <malloc_consolidate+0xe2>
c0000bbc:	55                   	push   ebp
c0000bbd:	83 e2 fd             	and    edx,0xfffffffd
c0000bc0:	57                   	push   edi
c0000bc1:	89 c5                	mov    ebp,eax
c0000bc3:	56                   	push   esi
c0000bc4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bc7:	53                   	push   ebx
c0000bc8:	83 ec 10             	sub    esp,0x10
c0000bcb:	89 10                	mov    DWORD PTR [eax],edx
c0000bcd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bd1:	c1 ea 03             	shr    edx,0x3
c0000bd4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bd8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bdc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bdf:	85 d2                	test   edx,edx
c0000be1:	0f 84 98 00 00 00    	je     c0000c7f <malloc_consolidate+0xcd>
c0000be7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bee:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000bf1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000bf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000bf8:	89 f9                	mov    ecx,edi
c0000bfa:	83 e1 fe             	and    ecx,0xfffffffe
c0000bfd:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c00:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c03:	83 e3 fc             	and    ebx,0xfffffffc
c0000c06:	83 e7 01             	and    edi,0x1
c0000c09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c0c:	75 14                	jne    c0000c22 <malloc_consolidate+0x70>
c0000c0e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c10:	29 fa                	sub    edx,edi
c0000c12:	01 f9                	add    ecx,edi
c0000c14:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c17:	89 fb                	mov    ebx,edi
c0000c19:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c1c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c1f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c22:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c25:	74 40                	je     c0000c67 <malloc_consolidate+0xb5>
c0000c27:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c2a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c2d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c31:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c34:	83 e7 01             	and    edi,0x1
c0000c37:	75 0e                	jne    c0000c47 <malloc_consolidate+0x95>
c0000c39:	01 d9                	add    ecx,ebx
c0000c3b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c3e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c41:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c44:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c47:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c4a:	89 ce                	mov    esi,ecx
c0000c4c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c4f:	83 ce 01             	or     esi,0x1
c0000c52:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c55:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c58:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c5b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c5f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c62:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c65:	eb 0c                	jmp    c0000c73 <malloc_consolidate+0xc1>
c0000c67:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c6a:	83 c9 01             	or     ecx,0x1
c0000c6d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c70:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c77:	85 d2                	test   edx,edx
c0000c79:	0f 85 6f ff ff ff    	jne    c0000bee <malloc_consolidate+0x3c>
c0000c7f:	83 c5 04             	add    ebp,0x4
c0000c82:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c86:	0f 85 50 ff ff ff    	jne    c0000bdc <malloc_consolidate+0x2a>
c0000c8c:	83 c4 10             	add    esp,0x10
c0000c8f:	5b                   	pop    ebx
c0000c90:	5e                   	pop    esi
c0000c91:	5f                   	pop    edi
c0000c92:	5d                   	pop    ebp
c0000c93:	c3                   	ret    
c0000c94:	e9 b8 fe ff ff       	jmp    c0000b51 <malloc_init_state>

c0000c99 <dlfree>:
c0000c99:	57                   	push   edi
c0000c9a:	56                   	push   esi
c0000c9b:	53                   	push   ebx
c0000c9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ca0:	85 db                	test   ebx,ebx
c0000ca2:	0f 84 e2 00 00 00    	je     c0000d8a <dlfree+0xf1>
c0000ca8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cab:	8b 0d 00 21 02 c0    	mov    ecx,DWORD PTR ds:0xc0022100
c0000cb1:	89 f0                	mov    eax,esi
c0000cb3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cb6:	83 e0 fc             	and    eax,0xfffffffc
c0000cb9:	39 c1                	cmp    ecx,eax
c0000cbb:	72 24                	jb     c0000ce1 <dlfree+0x48>
c0000cbd:	83 c9 03             	or     ecx,0x3
c0000cc0:	c1 e8 03             	shr    eax,0x3
c0000cc3:	89 0d 00 21 02 c0    	mov    DWORD PTR ds:0xc0022100,ecx
c0000cc9:	83 e8 02             	sub    eax,0x2
c0000ccc:	8b 0c 85 04 21 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffddefc]
c0000cd3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cd5:	89 14 85 04 21 02 c0 	mov    DWORD PTR [eax*4-0x3ffddefc],edx
c0000cdc:	e9 a9 00 00 00       	jmp    c0000d8a <dlfree+0xf1>
c0000ce1:	83 e6 02             	and    esi,0x2
c0000ce4:	0f 85 a0 00 00 00    	jne    c0000d8a <dlfree+0xf1>
c0000cea:	83 c9 01             	or     ecx,0x1
c0000ced:	8d 34 02             	lea    esi,[edx+eax*1]
c0000cf0:	89 0d 00 21 02 c0    	mov    DWORD PTR ds:0xc0022100,ecx
c0000cf6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000cf9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cfc:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d00:	75 13                	jne    c0000d15 <dlfree+0x7c>
c0000d02:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d05:	29 da                	sub    edx,ebx
c0000d07:	01 d8                	add    eax,ebx
c0000d09:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d0f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d12:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d15:	39 35 2c 21 02 c0    	cmp    DWORD PTR ds:0xc002212c,esi
c0000d1b:	74 40                	je     c0000d5d <dlfree+0xc4>
c0000d1d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d21:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d24:	80 e3 01             	and    bl,0x1
c0000d27:	75 0e                	jne    c0000d37 <dlfree+0x9e>
c0000d29:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d2c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d2f:	01 c8                	add    eax,ecx
c0000d31:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d34:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d37:	8b 0d 3c 21 02 c0    	mov    ecx,DWORD PTR ds:0xc002213c
c0000d3d:	c7 42 0c 34 21 02 c0 	mov    DWORD PTR [edx+0xc],0xc0022134
c0000d44:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d47:	89 15 3c 21 02 c0    	mov    DWORD PTR ds:0xc002213c,edx
c0000d4d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d50:	89 c1                	mov    ecx,eax
c0000d52:	83 c9 01             	or     ecx,0x1
c0000d55:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d58:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d5b:	eb 10                	jmp    c0000d6d <dlfree+0xd4>
c0000d5d:	01 c8                	add    eax,ecx
c0000d5f:	89 c1                	mov    ecx,eax
c0000d61:	83 c9 01             	or     ecx,0x1
c0000d64:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d67:	89 15 2c 21 02 c0    	mov    DWORD PTR ds:0xc002212c,edx
c0000d6d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d72:	76 16                	jbe    c0000d8a <dlfree+0xf1>
c0000d74:	f6 05 00 21 02 c0 02 	test   BYTE PTR ds:0xc0022100,0x2
c0000d7b:	74 0d                	je     c0000d8a <dlfree+0xf1>
c0000d7d:	5b                   	pop    ebx
c0000d7e:	b8 00 21 02 c0       	mov    eax,0xc0022100
c0000d83:	5e                   	pop    esi
c0000d84:	5f                   	pop    edi
c0000d85:	e9 28 fe ff ff       	jmp    c0000bb2 <malloc_consolidate>
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	c3                   	ret    

c0000d8e <sYSMALLOc>:
c0000d8e:	55                   	push   ebp
c0000d8f:	57                   	push   edi
c0000d90:	56                   	push   esi
c0000d91:	53                   	push   ebx
c0000d92:	89 d3                	mov    ebx,edx
c0000d94:	83 ec 2c             	sub    esp,0x2c
c0000d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d9b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000da1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000da4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dab:	74 1f                	je     c0000dcc <sYSMALLOc+0x3e>
c0000dad:	89 d8                	mov    eax,ebx
c0000daf:	e8 fe fd ff ff       	call   c0000bb2 <malloc_consolidate>
c0000db4:	83 ec 0c             	sub    esp,0xc
c0000db7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dbb:	83 e8 07             	sub    eax,0x7
c0000dbe:	50                   	push   eax
c0000dbf:	e8 30 02 00 00       	call   c0000ff4 <dlmalloc>
c0000dc4:	83 c4 10             	add    esp,0x10
c0000dc7:	e9 20 02 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000dcc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dcf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dd5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dd8:	83 e0 fc             	and    eax,0xfffffffc
c0000ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000de3:	83 c0 10             	add    eax,0x10
c0000de6:	01 c1                	add    ecx,eax
c0000de8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000dec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000df3:	74 04                	je     c0000df9 <sYSMALLOc+0x6b>
c0000df5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000df9:	f7 da                	neg    edx
c0000dfb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000dff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e03:	21 d1                	and    ecx,edx
c0000e05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e09:	7f 07                	jg     c0000e12 <sYSMALLOc+0x84>
c0000e0b:	31 c0                	xor    eax,eax
c0000e0d:	e9 da 01 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000e12:	83 ec 0c             	sub    esp,0xc
c0000e15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e19:	e8 da 68 00 00       	call   c00076f8 <sbrk>
c0000e1e:	83 c4 10             	add    esp,0x10
c0000e21:	89 c6                	mov    esi,eax
c0000e23:	83 f8 ff             	cmp    eax,0xffffffff
c0000e26:	74 e3                	je     c0000e0b <sYSMALLOc+0x7d>
c0000e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e2c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e30:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e33:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e39:	39 f1                	cmp    ecx,esi
c0000e3b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e41:	75 13                	jne    c0000e56 <sYSMALLOc+0xc8>
c0000e43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e47:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e4b:	83 c8 01             	or     eax,0x1
c0000e4e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e51:	e9 3e 01 00 00       	jmp    c0000f94 <sYSMALLOc+0x206>
c0000e56:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e5c:	88 d0                	mov    al,dl
c0000e5e:	83 e0 01             	and    eax,0x1
c0000e61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e66:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e6a:	0f 95 c0             	setne  al
c0000e6d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e71:	39 f1                	cmp    ecx,esi
c0000e73:	76 12                	jbe    c0000e87 <sYSMALLOc+0xf9>
c0000e75:	84 c0                	test   al,al
c0000e77:	74 0e                	je     c0000e87 <sYSMALLOc+0xf9>
c0000e79:	83 e2 fe             	and    edx,0xfffffffe
c0000e7c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e82:	e9 83 00 00 00       	jmp    c0000f0a <sYSMALLOc+0x17c>
c0000e87:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e8c:	74 7c                	je     c0000f0a <sYSMALLOc+0x17c>
c0000e8e:	84 c0                	test   al,al
c0000e90:	74 0c                	je     c0000e9e <sYSMALLOc+0x110>
c0000e92:	89 f0                	mov    eax,esi
c0000e94:	29 c8                	sub    eax,ecx
c0000e96:	01 e8                	add    eax,ebp
c0000e98:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e9e:	89 f2                	mov    edx,esi
c0000ea0:	83 e2 07             	and    edx,0x7
c0000ea3:	74 0c                	je     c0000eb1 <sYSMALLOc+0x123>
c0000ea5:	b8 08 00 00 00       	mov    eax,0x8
c0000eaa:	29 d0                	sub    eax,edx
c0000eac:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eaf:	eb 04                	jmp    c0000eb5 <sYSMALLOc+0x127>
c0000eb1:	89 f5                	mov    ebp,esi
c0000eb3:	31 c0                	xor    eax,eax
c0000eb5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000eb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ebd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ec1:	01 c1                	add    ecx,eax
c0000ec3:	83 ec 0c             	sub    esp,0xc
c0000ec6:	01 f1                	add    ecx,esi
c0000ec8:	01 ca                	add    edx,ecx
c0000eca:	29 c8                	sub    eax,ecx
c0000ecc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	52                   	push   edx
c0000ed3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ed7:	e8 1c 68 00 00       	call   c00076f8 <sbrk>
c0000edc:	83 c4 10             	add    esp,0x10
c0000edf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee6:	75 0f                	jne    c0000ef7 <sYSMALLOc+0x169>
c0000ee8:	83 ec 0c             	sub    esp,0xc
c0000eeb:	6a 00                	push   0x0
c0000eed:	e8 06 68 00 00       	call   c00076f8 <sbrk>
c0000ef2:	83 c4 10             	add    esp,0x10
c0000ef5:	eb 30                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000ef7:	39 c6                	cmp    esi,eax
c0000ef9:	76 33                	jbe    c0000f2e <sYSMALLOc+0x1a0>
c0000efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eff:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f06:	01 f0                	add    eax,esi
c0000f08:	eb 1d                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000f0a:	83 ec 0c             	sub    esp,0xc
c0000f0d:	89 f5                	mov    ebp,esi
c0000f0f:	6a 00                	push   0x0
c0000f11:	e8 e2 67 00 00       	call   c00076f8 <sbrk>
c0000f16:	89 c2                	mov    edx,eax
c0000f18:	29 f2                	sub    edx,esi
c0000f1a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f1e:	83 c4 10             	add    esp,0x10
c0000f21:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f27:	31 d2                	xor    edx,edx
c0000f29:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2c:	74 66                	je     c0000f94 <sYSMALLOc+0x206>
c0000f2e:	29 e8                	sub    eax,ebp
c0000f30:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f33:	01 d0                	add    eax,edx
c0000f35:	83 c8 01             	or     eax,0x1
c0000f38:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f3b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f41:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f46:	74 4c                	je     c0000f94 <sYSMALLOc+0x206>
c0000f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4c:	83 e8 0c             	sub    eax,0xc
c0000f4f:	83 e0 f8             	and    eax,0xfffffff8
c0000f52:	89 c2                	mov    edx,eax
c0000f54:	83 ca 01             	or     edx,0x1
c0000f57:	83 f8 0f             	cmp    eax,0xf
c0000f5a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f5d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f65:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f6d:	76 25                	jbe    c0000f94 <sYSMALLOc+0x206>
c0000f6f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f75:	83 ec 0c             	sub    esp,0xc
c0000f78:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f82:	83 c7 08             	add    edi,0x8
c0000f85:	57                   	push   edi
c0000f86:	e8 0e fd ff ff       	call   c0000c99 <dlfree>
c0000f8b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f91:	83 c4 10             	add    esp,0x10
c0000f94:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f9a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fa0:	73 06                	jae    c0000fa8 <sYSMALLOc+0x21a>
c0000fa2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fa8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fae:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fb4:	73 06                	jae    c0000fbc <sYSMALLOc+0x22e>
c0000fb6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fbc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fbf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fc2:	83 e2 fc             	and    edx,0xfffffffc
c0000fc5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fc9:	0f 82 3c fe ff ff    	jb     c0000e0b <sYSMALLOc+0x7d>
c0000fcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fd3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fd6:	29 fa                	sub    edx,edi
c0000fd8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fdb:	83 ca 01             	or     edx,0x1
c0000fde:	89 fb                	mov    ebx,edi
c0000fe0:	83 c0 08             	add    eax,0x8
c0000fe3:	83 cb 01             	or     ebx,0x1
c0000fe6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fe9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fec:	83 c4 2c             	add    esp,0x2c
c0000fef:	5b                   	pop    ebx
c0000ff0:	5e                   	pop    esi
c0000ff1:	5f                   	pop    edi
c0000ff2:	5d                   	pop    ebp
c0000ff3:	c3                   	ret    

c0000ff4 <dlmalloc>:
c0000ff4:	55                   	push   ebp
c0000ff5:	57                   	push   edi
c0000ff6:	56                   	push   esi
c0000ff7:	53                   	push   ebx
c0000ff8:	83 ec 1c             	sub    esp,0x1c
c0000ffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fff:	83 f8 df             	cmp    eax,0xffffffdf
c0001002:	0f 87 70 03 00 00    	ja     c0001378 <dlmalloc+0x384>
c0001008:	83 c0 0b             	add    eax,0xb
c000100b:	be 10 00 00 00       	mov    esi,0x10
c0001010:	83 f8 0f             	cmp    eax,0xf
c0001013:	76 05                	jbe    c000101a <dlmalloc+0x26>
c0001015:	83 e0 f8             	and    eax,0xfffffff8
c0001018:	89 c6                	mov    esi,eax
c000101a:	8b 3d 00 21 02 c0    	mov    edi,DWORD PTR ds:0xc0022100
c0001020:	f7 c7 01 00 00 00    	test   edi,0x1
c0001026:	75 17                	jne    c000103f <dlmalloc+0x4b>
c0001028:	85 ff                	test   edi,edi
c000102a:	0f 85 05 03 00 00    	jne    c0001335 <dlmalloc+0x341>
c0001030:	b8 00 21 02 c0       	mov    eax,0xc0022100
c0001035:	e8 78 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c000103a:	e9 f6 02 00 00       	jmp    c0001335 <dlmalloc+0x341>
c000103f:	39 f7                	cmp    edi,esi
c0001041:	72 1f                	jb     c0001062 <dlmalloc+0x6e>
c0001043:	89 f2                	mov    edx,esi
c0001045:	c1 ea 03             	shr    edx,0x3
c0001048:	83 ea 02             	sub    edx,0x2
c000104b:	8b 04 95 04 21 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffddefc]
c0001052:	85 c0                	test   eax,eax
c0001054:	74 0c                	je     c0001062 <dlmalloc+0x6e>
c0001056:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001059:	89 0c 95 04 21 02 c0 	mov    DWORD PTR [edx*4-0x3ffddefc],ecx
c0001060:	eb 30                	jmp    c0001092 <dlmalloc+0x9e>
c0001062:	89 f0                	mov    eax,esi
c0001064:	81 fe ff 00 00 00    	cmp    esi,0xff
c000106a:	77 2e                	ja     c000109a <dlmalloc+0xa6>
c000106c:	c1 e8 03             	shr    eax,0x3
c000106f:	8d 14 c5 34 21 02 c0 	lea    edx,[eax*8-0x3ffddecc]
c0001076:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000107a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000107d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001080:	39 c3                	cmp    ebx,eax
c0001082:	74 2e                	je     c00010b2 <dlmalloc+0xbe>
c0001084:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001087:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000108c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000108f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001092:	83 c0 08             	add    eax,0x8
c0001095:	e9 e0 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c000109a:	e8 8f fa ff ff       	call   c0000b2e <largebin_index>
c000109f:	83 e7 02             	and    edi,0x2
c00010a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a6:	74 0a                	je     c00010b2 <dlmalloc+0xbe>
c00010a8:	b8 00 21 02 c0       	mov    eax,0xc0022100
c00010ad:	e8 00 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c00010b2:	8d 46 10             	lea    eax,[esi+0x10]
c00010b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010b9:	8b 1d 40 21 02 c0    	mov    ebx,DWORD PTR ds:0xc0022140
c00010bf:	81 fb 34 21 02 c0    	cmp    ebx,0xc0022134
c00010c5:	0f 84 13 01 00 00    	je     c00011de <dlmalloc+0x1ea>
c00010cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010d1:	83 e7 fc             	and    edi,0xfffffffc
c00010d4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010da:	77 4c                	ja     c0001128 <dlmalloc+0x134>
c00010dc:	3d 34 21 02 c0       	cmp    eax,0xc0022134
c00010e1:	75 45                	jne    c0001128 <dlmalloc+0x134>
c00010e3:	39 1d 30 21 02 c0    	cmp    DWORD PTR ds:0xc0022130,ebx
c00010e9:	75 3d                	jne    c0001128 <dlmalloc+0x134>
c00010eb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010ef:	73 37                	jae    c0001128 <dlmalloc+0x134>
c00010f1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010f4:	89 fa                	mov    edx,edi
c00010f6:	a3 3c 21 02 c0       	mov    ds:0xc002213c,eax
c00010fb:	a3 40 21 02 c0       	mov    ds:0xc0022140,eax
c0001100:	a3 30 21 02 c0       	mov    ds:0xc0022130,eax
c0001105:	29 f2                	sub    edx,esi
c0001107:	c7 40 08 34 21 02 c0 	mov    DWORD PTR [eax+0x8],0xc0022134
c000110e:	c7 40 0c 34 21 02 c0 	mov    DWORD PTR [eax+0xc],0xc0022134
c0001115:	83 ce 01             	or     esi,0x1
c0001118:	89 d1                	mov    ecx,edx
c000111a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000111d:	83 c9 01             	or     ecx,0x1
c0001120:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001123:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001126:	eb 15                	jmp    c000113d <dlmalloc+0x149>
c0001128:	a3 40 21 02 c0       	mov    ds:0xc0022140,eax
c000112d:	39 fe                	cmp    esi,edi
c000112f:	c7 40 08 34 21 02 c0 	mov    DWORD PTR [eax+0x8],0xc0022134
c0001136:	75 0d                	jne    c0001145 <dlmalloc+0x151>
c0001138:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000113d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001140:	e9 35 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001145:	89 f8                	mov    eax,edi
c0001147:	81 ff ff 00 00 00    	cmp    edi,0xff
c000114d:	77 19                	ja     c0001168 <dlmalloc+0x174>
c000114f:	c1 e8 03             	shr    eax,0x3
c0001152:	8d 14 00             	lea    edx,[eax+eax*1]
c0001155:	83 c2 0d             	add    edx,0xd
c0001158:	8d 2c 95 f8 20 02 c0 	lea    ebp,[edx*4-0x3ffddf08]
c000115f:	8b 14 95 00 21 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffddf00]
c0001166:	eb 46                	jmp    c00011ae <dlmalloc+0x1ba>
c0001168:	e8 c1 f9 ff ff       	call   c0000b2e <largebin_index>
c000116d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001170:	83 c2 0d             	add    edx,0xd
c0001173:	8d 0c 95 00 21 02 c0 	lea    ecx,[edx*4-0x3ffddf00]
c000117a:	8b 14 95 00 21 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffddf00]
c0001181:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001184:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001188:	89 d5                	mov    ebp,edx
c000118a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000118e:	74 1e                	je     c00011ae <dlmalloc+0x1ba>
c0001190:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001193:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001196:	77 12                	ja     c00011aa <dlmalloc+0x1b6>
c0001198:	83 cf 01             	or     edi,0x1
c000119b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000119e:	76 05                	jbe    c00011a5 <dlmalloc+0x1b1>
c00011a0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011a3:	eb f6                	jmp    c000119b <dlmalloc+0x1a7>
c00011a5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011a8:	eb 04                	jmp    c00011ae <dlmalloc+0x1ba>
c00011aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ae:	89 c7                	mov    edi,eax
c00011b0:	88 c1                	mov    cl,al
c00011b2:	c1 ff 05             	sar    edi,0x5
c00011b5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011b9:	bf 01 00 00 00       	mov    edi,0x1
c00011be:	d3 e7                	shl    edi,cl
c00011c0:	89 f8                	mov    eax,edi
c00011c2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011c6:	09 04 bd 34 24 02 c0 	or     DWORD PTR [edi*4-0x3ffddbcc],eax
c00011cd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011d3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011d6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011d9:	e9 db fe ff ff       	jmp    c00010b9 <dlmalloc+0xc5>
c00011de:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011e4:	76 78                	jbe    c000125e <dlmalloc+0x26a>
c00011e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011ea:	8d 04 c5 34 21 02 c0 	lea    eax,[eax*8-0x3ffddecc]
c00011f1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011f7:	39 ca                	cmp    edx,ecx
c00011f9:	74 63                	je     c000125e <dlmalloc+0x26a>
c00011fb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011fe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001201:	83 e3 fc             	and    ebx,0xfffffffc
c0001204:	39 de                	cmp    esi,ebx
c0001206:	77 52                	ja     c000125a <dlmalloc+0x266>
c0001208:	89 df                	mov    edi,ebx
c000120a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000120d:	29 f7                	sub    edi,esi
c000120f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001212:	01 d3                	add    ebx,edx
c0001214:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001217:	83 ff 0f             	cmp    edi,0xf
c000121a:	8d 42 08             	lea    eax,[edx+0x8]
c000121d:	77 09                	ja     c0001228 <dlmalloc+0x234>
c000121f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001223:	e9 52 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001228:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000122b:	83 ce 01             	or     esi,0x1
c000122e:	89 0d 3c 21 02 c0    	mov    DWORD PTR ds:0xc002213c,ecx
c0001234:	89 0d 40 21 02 c0    	mov    DWORD PTR ds:0xc0022140,ecx
c000123a:	c7 41 08 34 21 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0022134
c0001241:	c7 41 0c 34 21 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0022134
c0001248:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000124b:	89 fa                	mov    edx,edi
c000124d:	83 ca 01             	or     edx,0x1
c0001250:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001253:	89 3b                	mov    DWORD PTR [ebx],edi
c0001255:	e9 20 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c000125a:	89 c2                	mov    edx,eax
c000125c:	eb 99                	jmp    c00011f7 <dlmalloc+0x203>
c000125e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001262:	b8 01 00 00 00       	mov    eax,0x1
c0001267:	41                   	inc    ecx
c0001268:	89 cb                	mov    ebx,ecx
c000126a:	8d 14 cd 2c 21 02 c0 	lea    edx,[ecx*8-0x3ffdded4]
c0001271:	c1 eb 05             	shr    ebx,0x5
c0001274:	d3 e0                	shl    eax,cl
c0001276:	8b 3c 9d 34 24 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffddbcc]
c000127d:	39 f8                	cmp    eax,edi
c000127f:	77 04                	ja     c0001285 <dlmalloc+0x291>
c0001281:	85 c0                	test   eax,eax
c0001283:	75 26                	jne    c00012ab <dlmalloc+0x2b7>
c0001285:	43                   	inc    ebx
c0001286:	83 fb 02             	cmp    ebx,0x2
c0001289:	0f 87 a6 00 00 00    	ja     c0001335 <dlmalloc+0x341>
c000128f:	8b 3c 9d 34 24 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffddbcc]
c0001296:	85 ff                	test   edi,edi
c0001298:	74 eb                	je     c0001285 <dlmalloc+0x291>
c000129a:	89 d8                	mov    eax,ebx
c000129c:	c1 e0 06             	shl    eax,0x6
c000129f:	8d 14 85 2c 21 02 c0 	lea    edx,[eax*4-0x3ffdded4]
c00012a6:	b8 01 00 00 00       	mov    eax,0x1
c00012ab:	85 f8                	test   eax,edi
c00012ad:	75 07                	jne    c00012b6 <dlmalloc+0x2c2>
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	01 c0                	add    eax,eax
c00012b4:	eb f5                	jmp    c00012ab <dlmalloc+0x2b7>
c00012b6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012b9:	39 ca                	cmp    edx,ecx
c00012bb:	75 14                	jne    c00012d1 <dlmalloc+0x2dd>
c00012bd:	89 c1                	mov    ecx,eax
c00012bf:	83 c2 08             	add    edx,0x8
c00012c2:	f7 d1                	not    ecx
c00012c4:	01 c0                	add    eax,eax
c00012c6:	21 cf                	and    edi,ecx
c00012c8:	89 3c 9d 34 24 02 c0 	mov    DWORD PTR [ebx*4-0x3ffddbcc],edi
c00012cf:	eb ac                	jmp    c000127d <dlmalloc+0x289>
c00012d1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012d4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012d7:	83 e0 fc             	and    eax,0xfffffffc
c00012da:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012dd:	89 c3                	mov    ebx,eax
c00012df:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012e2:	29 f3                	sub    ebx,esi
c00012e4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012e7:	83 fb 0f             	cmp    ebx,0xf
c00012ea:	8d 41 08             	lea    eax,[ecx+0x8]
c00012ed:	77 09                	ja     c00012f8 <dlmalloc+0x304>
c00012ef:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012f3:	e9 82 00 00 00       	jmp    c000137a <dlmalloc+0x386>
c00012f8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001301:	89 3d 3c 21 02 c0    	mov    DWORD PTR ds:0xc002213c,edi
c0001307:	89 3d 40 21 02 c0    	mov    DWORD PTR ds:0xc0022140,edi
c000130d:	c7 47 08 34 21 02 c0 	mov    DWORD PTR [edi+0x8],0xc0022134
c0001314:	c7 47 0c 34 21 02 c0 	mov    DWORD PTR [edi+0xc],0xc0022134
c000131b:	77 06                	ja     c0001323 <dlmalloc+0x32f>
c000131d:	89 3d 30 21 02 c0    	mov    DWORD PTR ds:0xc0022130,edi
c0001323:	83 ce 01             	or     esi,0x1
c0001326:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001329:	89 d9                	mov    ecx,ebx
c000132b:	83 c9 01             	or     ecx,0x1
c000132e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001331:	89 1a                	mov    DWORD PTR [edx],ebx
c0001333:	eb 45                	jmp    c000137a <dlmalloc+0x386>
c0001335:	a1 2c 21 02 c0       	mov    eax,ds:0xc002212c
c000133a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000133d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001340:	83 e2 fc             	and    edx,0xfffffffc
c0001343:	39 d1                	cmp    ecx,edx
c0001345:	77 1e                	ja     c0001365 <dlmalloc+0x371>
c0001347:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000134a:	89 f3                	mov    ebx,esi
c000134c:	89 0d 2c 21 02 c0    	mov    DWORD PTR ds:0xc002212c,ecx
c0001352:	83 cb 01             	or     ebx,0x1
c0001355:	29 f2                	sub    edx,esi
c0001357:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000135a:	83 ca 01             	or     edx,0x1
c000135d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001360:	e9 2d fd ff ff       	jmp    c0001092 <dlmalloc+0x9e>
c0001365:	83 c4 1c             	add    esp,0x1c
c0001368:	89 f0                	mov    eax,esi
c000136a:	5b                   	pop    ebx
c000136b:	ba 00 21 02 c0       	mov    edx,0xc0022100
c0001370:	5e                   	pop    esi
c0001371:	5f                   	pop    edi
c0001372:	5d                   	pop    ebp
c0001373:	e9 16 fa ff ff       	jmp    c0000d8e <sYSMALLOc>
c0001378:	31 c0                	xor    eax,eax
c000137a:	83 c4 1c             	add    esp,0x1c
c000137d:	5b                   	pop    ebx
c000137e:	5e                   	pop    esi
c000137f:	5f                   	pop    edi
c0001380:	5d                   	pop    ebp
c0001381:	c3                   	ret    

c0001382 <iALLOc>:
c0001382:	55                   	push   ebp
c0001383:	89 c5                	mov    ebp,eax
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 2c             	sub    esp,0x2c
c000138b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000138f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001397:	83 3d 00 21 02 c0 00 	cmp    DWORD PTR ds:0xc0022100,0x0
c000139e:	75 12                	jne    c00013b2 <iALLOc+0x30>
c00013a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013a4:	b8 00 21 02 c0       	mov    eax,0xc0022100
c00013a9:	e8 04 f8 ff ff       	call   c0000bb2 <malloc_consolidate>
c00013ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013b2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013b7:	74 12                	je     c00013cb <iALLOc+0x49>
c00013b9:	85 ed                	test   ebp,ebp
c00013bb:	0f 84 64 01 00 00    	je     c0001525 <iALLOc+0x1a3>
c00013c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013c9:	eb 33                	jmp    c00013fe <iALLOc+0x7c>
c00013cb:	85 ed                	test   ebp,ebp
c00013cd:	75 14                	jne    c00013e3 <iALLOc+0x61>
c00013cf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013d7:	83 c4 2c             	add    esp,0x2c
c00013da:	5b                   	pop    ebx
c00013db:	5e                   	pop    esi
c00013dc:	5f                   	pop    edi
c00013dd:	5d                   	pop    ebp
c00013de:	e9 11 fc ff ff       	jmp    c0000ff4 <dlmalloc>
c00013e3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013ea:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013f2:	83 f8 0f             	cmp    eax,0xf
c00013f5:	76 07                	jbe    c00013fe <iALLOc+0x7c>
c00013f7:	83 e0 f8             	and    eax,0xfffffff8
c00013fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013fe:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001403:	75 09                	jne    c000140e <iALLOc+0x8c>
c0001405:	89 d0                	mov    eax,edx
c0001407:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000140a:	31 f6                	xor    esi,esi
c000140c:	eb 3b                	jmp    c0001449 <iALLOc+0xc7>
c000140e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001410:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001418:	83 c0 0b             	add    eax,0xb
c000141b:	83 f8 0f             	cmp    eax,0xf
c000141e:	76 07                	jbe    c0001427 <iALLOc+0xa5>
c0001420:	83 e0 f8             	and    eax,0xfffffff8
c0001423:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000142b:	0f af f5             	imul   esi,ebp
c000142e:	eb 25                	jmp    c0001455 <iALLOc+0xd3>
c0001430:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001432:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001435:	bb 10 00 00 00       	mov    ebx,0x10
c000143a:	83 f9 0f             	cmp    ecx,0xf
c000143d:	76 05                	jbe    c0001444 <iALLOc+0xc2>
c000143f:	83 e1 f8             	and    ecx,0xfffffff8
c0001442:	89 cb                	mov    ebx,ecx
c0001444:	01 de                	add    esi,ebx
c0001446:	83 c0 04             	add    eax,0x4
c0001449:	39 c7                	cmp    edi,eax
c000144b:	75 e3                	jne    c0001430 <iALLOc+0xae>
c000144d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001455:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001459:	8b 1d 54 24 02 c0    	mov    ebx,DWORD PTR ds:0xc0022454
c000145f:	83 ec 0c             	sub    esp,0xc
c0001462:	c7 05 54 24 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022454,0x0
c000146c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001470:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001474:	50                   	push   eax
c0001475:	e8 7a fb ff ff       	call   c0000ff4 <dlmalloc>
c000147a:	83 c4 10             	add    esp,0x10
c000147d:	89 1d 54 24 02 c0    	mov    DWORD PTR ds:0xc0022454,ebx
c0001483:	85 c0                	test   eax,eax
c0001485:	0f 84 92 00 00 00    	je     c000151d <iALLOc+0x19b>
c000148b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000148e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001491:	83 e3 fc             	and    ebx,0xfffffffc
c0001494:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001498:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000149d:	74 1e                	je     c00014bd <iALLOc+0x13b>
c000149f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014a3:	89 d9                	mov    ecx,ebx
c00014a5:	52                   	push   edx
c00014a6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014aa:	83 e9 04             	sub    ecx,0x4
c00014ad:	51                   	push   ecx
c00014ae:	6a 00                	push   0x0
c00014b0:	50                   	push   eax
c00014b1:	e8 1a f0 ff ff       	call   c00004d0 <memset>
c00014b6:	83 c4 10             	add    esp,0x10
c00014b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014c2:	75 14                	jne    c00014d8 <iALLOc+0x156>
c00014c4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014c7:	29 f3                	sub    ebx,esi
c00014c9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014cc:	83 cb 01             	or     ebx,0x1
c00014cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014d3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014d6:	89 f3                	mov    ebx,esi
c00014d8:	31 c0                	xor    eax,eax
c00014da:	4d                   	dec    ebp
c00014db:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014e2:	39 c5                	cmp    ebp,eax
c00014e4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014e7:	74 2c                	je     c0001515 <iALLOc+0x193>
c00014e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014ed:	85 c9                	test   ecx,ecx
c00014ef:	75 15                	jne    c0001506 <iALLOc+0x184>
c00014f1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014f4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014f7:	b9 10 00 00 00       	mov    ecx,0x10
c00014fc:	83 fe 0f             	cmp    esi,0xf
c00014ff:	76 05                	jbe    c0001506 <iALLOc+0x184>
c0001501:	83 e6 f8             	and    esi,0xfffffff8
c0001504:	89 f1                	mov    ecx,esi
c0001506:	89 ce                	mov    esi,ecx
c0001508:	29 cb                	sub    ebx,ecx
c000150a:	83 ce 01             	or     esi,0x1
c000150d:	40                   	inc    eax
c000150e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001511:	01 cf                	add    edi,ecx
c0001513:	eb c6                	jmp    c00014db <iALLOc+0x159>
c0001515:	83 cb 01             	or     ebx,0x1
c0001518:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000151b:	eb 08                	jmp    c0001525 <iALLOc+0x1a3>
c000151d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001525:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001529:	83 c4 2c             	add    esp,0x2c
c000152c:	5b                   	pop    ebx
c000152d:	5e                   	pop    esi
c000152e:	5f                   	pop    edi
c000152f:	5d                   	pop    ebp
c0001530:	c3                   	ret    

c0001531 <dlrealloc>:
c0001531:	55                   	push   ebp
c0001532:	57                   	push   edi
c0001533:	56                   	push   esi
c0001534:	53                   	push   ebx
c0001535:	83 ec 1c             	sub    esp,0x1c
c0001538:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000153c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001540:	85 db                	test   ebx,ebx
c0001542:	75 10                	jne    c0001554 <dlrealloc+0x23>
c0001544:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001548:	83 c4 1c             	add    esp,0x1c
c000154b:	5b                   	pop    ebx
c000154c:	5e                   	pop    esi
c000154d:	5f                   	pop    edi
c000154e:	5d                   	pop    ebp
c000154f:	e9 a0 fa ff ff       	jmp    c0000ff4 <dlmalloc>
c0001554:	83 f8 df             	cmp    eax,0xffffffdf
c0001557:	76 07                	jbe    c0001560 <dlrealloc+0x2f>
c0001559:	31 db                	xor    ebx,ebx
c000155b:	e9 6a 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c0001560:	83 c0 0b             	add    eax,0xb
c0001563:	bd 10 00 00 00       	mov    ebp,0x10
c0001568:	83 f8 0f             	cmp    eax,0xf
c000156b:	76 05                	jbe    c0001572 <dlrealloc+0x41>
c000156d:	83 e0 f8             	and    eax,0xfffffff8
c0001570:	89 c5                	mov    ebp,eax
c0001572:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001575:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001578:	89 c6                	mov    esi,eax
c000157a:	83 e6 fc             	and    esi,0xfffffffc
c000157d:	a8 02                	test   al,0x2
c000157f:	75 d8                	jne    c0001559 <dlrealloc+0x28>
c0001581:	39 f5                	cmp    ebp,esi
c0001583:	0f 86 04 01 00 00    	jbe    c000168d <dlrealloc+0x15c>
c0001589:	8d 14 37             	lea    edx,[edi+esi*1]
c000158c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000158f:	39 15 2c 21 02 c0    	cmp    DWORD PTR ds:0xc002212c,edx
c0001595:	75 33                	jne    c00015ca <dlrealloc+0x99>
c0001597:	83 e1 fc             	and    ecx,0xfffffffc
c000159a:	01 f1                	add    ecx,esi
c000159c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015a3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015a7:	77 49                	ja     c00015f2 <dlrealloc+0xc1>
c00015a9:	01 ef                	add    edi,ebp
c00015ab:	83 e0 01             	and    eax,0x1
c00015ae:	09 e8                	or     eax,ebp
c00015b0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015b3:	89 3d 2c 21 02 c0    	mov    DWORD PTR ds:0xc002212c,edi
c00015b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015bd:	29 e8                	sub    eax,ebp
c00015bf:	83 c8 01             	or     eax,0x1
c00015c2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015c5:	e9 00 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c00015ca:	89 c8                	mov    eax,ecx
c00015cc:	83 e0 fe             	and    eax,0xfffffffe
c00015cf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015d4:	75 1c                	jne    c00015f2 <dlrealloc+0xc1>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	39 cd                	cmp    ebp,ecx
c00015dd:	77 13                	ja     c00015f2 <dlrealloc+0xc1>
c00015df:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015e2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015e5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015e8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015eb:	89 ce                	mov    esi,ecx
c00015ed:	e9 9b 00 00 00       	jmp    c000168d <dlrealloc+0x15c>
c00015f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015f6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015f9:	83 ec 0c             	sub    esp,0xc
c00015fc:	50                   	push   eax
c00015fd:	e8 f2 f9 ff ff       	call   c0000ff4 <dlmalloc>
c0001602:	83 c4 10             	add    esp,0x10
c0001605:	85 c0                	test   eax,eax
c0001607:	0f 84 4c ff ff ff    	je     c0001559 <dlrealloc+0x28>
c000160d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001614:	39 ca                	cmp    edx,ecx
c0001616:	75 0a                	jne    c0001622 <dlrealloc+0xf1>
c0001618:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000161b:	83 e0 fc             	and    eax,0xfffffffc
c000161e:	01 c6                	add    esi,eax
c0001620:	eb 6b                	jmp    c000168d <dlrealloc+0x15c>
c0001622:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001625:	83 f9 27             	cmp    ecx,0x27
c0001628:	76 08                	jbe    c0001632 <dlrealloc+0x101>
c000162a:	89 de                	mov    esi,ebx
c000162c:	89 c7                	mov    edi,eax
c000162e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001630:	eb 43                	jmp    c0001675 <dlrealloc+0x144>
c0001632:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001634:	83 f9 13             	cmp    ecx,0x13
c0001637:	89 10                	mov    DWORD PTR [eax],edx
c0001639:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000163c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000163f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001642:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001645:	76 2e                	jbe    c0001675 <dlrealloc+0x144>
c0001647:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000164a:	83 f9 1b             	cmp    ecx,0x1b
c000164d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001650:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001653:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001656:	76 1d                	jbe    c0001675 <dlrealloc+0x144>
c0001658:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000165b:	83 f9 23             	cmp    ecx,0x23
c000165e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001661:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001664:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001667:	76 0c                	jbe    c0001675 <dlrealloc+0x144>
c0001669:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000166c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000166f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001672:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001679:	83 ec 0c             	sub    esp,0xc
c000167c:	53                   	push   ebx
c000167d:	e8 17 f6 ff ff       	call   c0000c99 <dlfree>
c0001682:	83 c4 10             	add    esp,0x10
c0001685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001689:	89 c3                	mov    ebx,eax
c000168b:	eb 3d                	jmp    c00016ca <dlrealloc+0x199>
c000168d:	89 f2                	mov    edx,esi
c000168f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001692:	29 ea                	sub    edx,ebp
c0001694:	83 e1 01             	and    ecx,0x1
c0001697:	8d 04 37             	lea    eax,[edi+esi*1]
c000169a:	83 fa 0f             	cmp    edx,0xf
c000169d:	77 0b                	ja     c00016aa <dlrealloc+0x179>
c000169f:	09 ce                	or     esi,ecx
c00016a1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016a4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016a8:	eb 20                	jmp    c00016ca <dlrealloc+0x199>
c00016aa:	01 ef                	add    edi,ebp
c00016ac:	83 ec 0c             	sub    esp,0xc
c00016af:	09 cd                	or     ebp,ecx
c00016b1:	83 ca 01             	or     edx,0x1
c00016b4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016b7:	83 c7 08             	add    edi,0x8
c00016ba:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c1:	57                   	push   edi
c00016c2:	e8 d2 f5 ff ff       	call   c0000c99 <dlfree>
c00016c7:	83 c4 10             	add    esp,0x10
c00016ca:	83 c4 1c             	add    esp,0x1c
c00016cd:	89 d8                	mov    eax,ebx
c00016cf:	5b                   	pop    ebx
c00016d0:	5e                   	pop    esi
c00016d1:	5f                   	pop    edi
c00016d2:	5d                   	pop    ebp
c00016d3:	c3                   	ret    

c00016d4 <dlmemalign>:
c00016d4:	55                   	push   ebp
c00016d5:	57                   	push   edi
c00016d6:	56                   	push   esi
c00016d7:	53                   	push   ebx
c00016d8:	83 ec 0c             	sub    esp,0xc
c00016db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016e3:	83 fa 08             	cmp    edx,0x8
c00016e6:	77 10                	ja     c00016f8 <dlmemalign+0x24>
c00016e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016ec:	83 c4 0c             	add    esp,0xc
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	e9 fc f8 ff ff       	jmp    c0000ff4 <dlmalloc>
c00016f8:	bf 10 00 00 00       	mov    edi,0x10
c00016fd:	83 fa 0f             	cmp    edx,0xf
c0001700:	76 13                	jbe    c0001715 <dlmemalign+0x41>
c0001702:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001705:	85 d1                	test   ecx,edx
c0001707:	75 04                	jne    c000170d <dlmemalign+0x39>
c0001709:	89 d7                	mov    edi,edx
c000170b:	eb 08                	jmp    c0001715 <dlmemalign+0x41>
c000170d:	39 d7                	cmp    edi,edx
c000170f:	73 04                	jae    c0001715 <dlmemalign+0x41>
c0001711:	01 ff                	add    edi,edi
c0001713:	eb f8                	jmp    c000170d <dlmemalign+0x39>
c0001715:	83 f8 df             	cmp    eax,0xffffffdf
c0001718:	76 07                	jbe    c0001721 <dlmemalign+0x4d>
c000171a:	31 c0                	xor    eax,eax
c000171c:	e9 ce 00 00 00       	jmp    c00017ef <dlmemalign+0x11b>
c0001721:	83 c0 0b             	add    eax,0xb
c0001724:	bd 10 00 00 00       	mov    ebp,0x10
c0001729:	83 f8 0f             	cmp    eax,0xf
c000172c:	76 05                	jbe    c0001733 <dlmemalign+0x5f>
c000172e:	83 e0 f8             	and    eax,0xfffffff8
c0001731:	89 c5                	mov    ebp,eax
c0001733:	83 ec 0c             	sub    esp,0xc
c0001736:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000173a:	50                   	push   eax
c000173b:	e8 b4 f8 ff ff       	call   c0000ff4 <dlmalloc>
c0001740:	83 c4 10             	add    esp,0x10
c0001743:	89 c1                	mov    ecx,eax
c0001745:	85 c0                	test   eax,eax
c0001747:	74 d1                	je     c000171a <dlmemalign+0x46>
c0001749:	31 d2                	xor    edx,edx
c000174b:	8d 70 f8             	lea    esi,[eax-0x8]
c000174e:	f7 f7                	div    edi
c0001750:	85 d2                	test   edx,edx
c0001752:	74 62                	je     c00017b6 <dlmemalign+0xe2>
c0001754:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001758:	89 f8                	mov    eax,edi
c000175a:	f7 d8                	neg    eax
c000175c:	21 c3                	and    ebx,eax
c000175e:	83 eb 08             	sub    ebx,0x8
c0001761:	89 d8                	mov    eax,ebx
c0001763:	29 f0                	sub    eax,esi
c0001765:	83 f8 0f             	cmp    eax,0xf
c0001768:	77 02                	ja     c000176c <dlmemalign+0x98>
c000176a:	01 fb                	add    ebx,edi
c000176c:	89 d8                	mov    eax,ebx
c000176e:	29 f0                	sub    eax,esi
c0001770:	89 c6                	mov    esi,eax
c0001772:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001775:	89 c2                	mov    edx,eax
c0001777:	83 e2 fc             	and    edx,0xfffffffc
c000177a:	29 f2                	sub    edx,esi
c000177c:	a8 02                	test   al,0x2
c000177e:	74 10                	je     c0001790 <dlmemalign+0xbc>
c0001780:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001783:	83 ca 02             	or     edx,0x2
c0001786:	8d 43 08             	lea    eax,[ebx+0x8]
c0001789:	89 33                	mov    DWORD PTR [ebx],esi
c000178b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000178e:	eb 5f                	jmp    c00017ef <dlmemalign+0x11b>
c0001790:	83 ec 0c             	sub    esp,0xc
c0001793:	89 d0                	mov    eax,edx
c0001795:	83 c8 01             	or     eax,0x1
c0001798:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000179b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017a0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a3:	83 e0 01             	and    eax,0x1
c00017a6:	09 f0                	or     eax,esi
c00017a8:	89 de                	mov    esi,ebx
c00017aa:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ad:	51                   	push   ecx
c00017ae:	e8 e6 f4 ff ff       	call   c0000c99 <dlfree>
c00017b3:	83 c4 10             	add    esp,0x10
c00017b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017b9:	a8 02                	test   al,0x2
c00017bb:	75 2f                	jne    c00017ec <dlmemalign+0x118>
c00017bd:	83 e0 fc             	and    eax,0xfffffffc
c00017c0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017c3:	39 c2                	cmp    edx,eax
c00017c5:	73 25                	jae    c00017ec <dlmemalign+0x118>
c00017c7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ca:	83 ec 0c             	sub    esp,0xc
c00017cd:	29 e8                	sub    eax,ebp
c00017cf:	83 c2 08             	add    edx,0x8
c00017d2:	83 c8 01             	or     eax,0x1
c00017d5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017db:	83 e0 01             	and    eax,0x1
c00017de:	09 c5                	or     ebp,eax
c00017e0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017e3:	52                   	push   edx
c00017e4:	e8 b0 f4 ff ff       	call   c0000c99 <dlfree>
c00017e9:	83 c4 10             	add    esp,0x10
c00017ec:	8d 46 08             	lea    eax,[esi+0x8]
c00017ef:	83 c4 0c             	add    esp,0xc
c00017f2:	5b                   	pop    ebx
c00017f3:	5e                   	pop    esi
c00017f4:	5f                   	pop    edi
c00017f5:	5d                   	pop    ebp
c00017f6:	c3                   	ret    

c00017f7 <dlcalloc>:
c00017f7:	53                   	push   ebx
c00017f8:	83 ec 14             	sub    esp,0x14
c00017fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ff:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001804:	50                   	push   eax
c0001805:	e8 ea f7 ff ff       	call   c0000ff4 <dlmalloc>
c000180a:	83 c4 10             	add    esp,0x10
c000180d:	89 c3                	mov    ebx,eax
c000180f:	85 c0                	test   eax,eax
c0001811:	74 77                	je     c000188a <dlcalloc+0x93>
c0001813:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001816:	89 d0                	mov    eax,edx
c0001818:	83 e0 fc             	and    eax,0xfffffffc
c000181b:	80 e2 02             	and    dl,0x2
c000181e:	75 5a                	jne    c000187a <dlcalloc+0x83>
c0001820:	83 e8 04             	sub    eax,0x4
c0001823:	83 f8 27             	cmp    eax,0x27
c0001826:	76 03                	jbe    c000182b <dlcalloc+0x34>
c0001828:	51                   	push   ecx
c0001829:	eb 53                	jmp    c000187e <dlcalloc+0x87>
c000182b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001831:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001838:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000183f:	83 f8 13             	cmp    eax,0x13
c0001842:	76 46                	jbe    c000188a <dlcalloc+0x93>
c0001844:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000184b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001852:	83 f8 1b             	cmp    eax,0x1b
c0001855:	76 33                	jbe    c000188a <dlcalloc+0x93>
c0001857:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000185e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001865:	83 f8 23             	cmp    eax,0x23
c0001868:	76 20                	jbe    c000188a <dlcalloc+0x93>
c000186a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001871:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001878:	eb 10                	jmp    c000188a <dlcalloc+0x93>
c000187a:	83 e8 08             	sub    eax,0x8
c000187d:	52                   	push   edx
c000187e:	50                   	push   eax
c000187f:	6a 00                	push   0x0
c0001881:	53                   	push   ebx
c0001882:	e8 49 ec ff ff       	call   c00004d0 <memset>
c0001887:	83 c4 10             	add    esp,0x10
c000188a:	89 d8                	mov    eax,ebx
c000188c:	83 c4 08             	add    esp,0x8
c000188f:	5b                   	pop    ebx
c0001890:	c3                   	ret    

c0001891 <dlcfree>:
c0001891:	e9 03 f4 ff ff       	jmp    c0000c99 <dlfree>

c0001896 <dlindependent_calloc>:
c0001896:	83 ec 28             	sub    esp,0x28
c0001899:	b9 03 00 00 00       	mov    ecx,0x3
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018aa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018b2:	e8 cb fa ff ff       	call   c0001382 <iALLOc>
c00018b7:	83 c4 2c             	add    esp,0x2c
c00018ba:	c3                   	ret    

c00018bb <dlindependent_comalloc>:
c00018bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018c3:	31 c9                	xor    ecx,ecx
c00018c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018cd:	e9 b0 fa ff ff       	jmp    c0001382 <iALLOc>

c00018d2 <dlvalloc>:
c00018d2:	83 ec 0c             	sub    esp,0xc
c00018d5:	83 3d 00 21 02 c0 00 	cmp    DWORD PTR ds:0xc0022100,0x0
c00018dc:	75 0a                	jne    c00018e8 <dlvalloc+0x16>
c00018de:	b8 00 21 02 c0       	mov    eax,0xc0022100
c00018e3:	e8 ca f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c00018e8:	50                   	push   eax
c00018e9:	50                   	push   eax
c00018ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018ee:	ff 35 5c 24 02 c0    	push   DWORD PTR ds:0xc002245c
c00018f4:	e8 db fd ff ff       	call   c00016d4 <dlmemalign>
c00018f9:	83 c4 1c             	add    esp,0x1c
c00018fc:	c3                   	ret    

c00018fd <dlpvalloc>:
c00018fd:	83 ec 0c             	sub    esp,0xc
c0001900:	83 3d 00 21 02 c0 00 	cmp    DWORD PTR ds:0xc0022100,0x0
c0001907:	75 0a                	jne    c0001913 <dlpvalloc+0x16>
c0001909:	b8 00 21 02 c0       	mov    eax,0xc0022100
c000190e:	e8 9f f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001913:	a1 5c 24 02 c0       	mov    eax,ds:0xc002245c
c0001918:	89 c1                	mov    ecx,eax
c000191a:	52                   	push   edx
c000191b:	f7 d9                	neg    ecx
c000191d:	52                   	push   edx
c000191e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001922:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001926:	21 ca                	and    edx,ecx
c0001928:	52                   	push   edx
c0001929:	50                   	push   eax
c000192a:	e8 a5 fd ff ff       	call   c00016d4 <dlmemalign>
c000192f:	83 c4 1c             	add    esp,0x1c
c0001932:	c3                   	ret    

c0001933 <dlmalloc_trim>:
c0001933:	b8 00 21 02 c0       	mov    eax,0xc0022100
c0001938:	e8 75 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <dlmalloc_usable_size>:
c0001940:	53                   	push   ebx
c0001941:	31 c0                	xor    eax,eax
c0001943:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001947:	85 c9                	test   ecx,ecx
c0001949:	74 24                	je     c000196f <dlmalloc_usable_size+0x2f>
c000194b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000194e:	f6 c2 02             	test   dl,0x2
c0001951:	74 08                	je     c000195b <dlmalloc_usable_size+0x1b>
c0001953:	83 e2 fc             	and    edx,0xfffffffc
c0001956:	8d 42 f8             	lea    eax,[edx-0x8]
c0001959:	eb 14                	jmp    c000196f <dlmalloc_usable_size+0x2f>
c000195b:	89 d3                	mov    ebx,edx
c000195d:	31 c0                	xor    eax,eax
c000195f:	83 e3 fe             	and    ebx,0xfffffffe
c0001962:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001967:	74 06                	je     c000196f <dlmalloc_usable_size+0x2f>
c0001969:	83 e2 fc             	and    edx,0xfffffffc
c000196c:	8d 42 fc             	lea    eax,[edx-0x4]
c000196f:	5b                   	pop    ebx
c0001970:	c3                   	ret    

c0001971 <dlmallinfo>:
c0001971:	55                   	push   ebp
c0001972:	57                   	push   edi
c0001973:	56                   	push   esi
c0001974:	53                   	push   ebx
c0001975:	83 ec 08             	sub    esp,0x8
c0001978:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000197c:	83 3d 2c 21 02 c0 00 	cmp    DWORD PTR ds:0xc002212c,0x0
c0001983:	75 0a                	jne    c000198f <dlmallinfo+0x1e>
c0001985:	b8 00 21 02 c0       	mov    eax,0xc0022100
c000198a:	e8 23 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000198f:	a1 2c 21 02 c0       	mov    eax,ds:0xc002212c
c0001994:	31 ed                	xor    ebp,ebp
c0001996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001999:	31 c9                	xor    ecx,ecx
c000199b:	83 e0 fc             	and    eax,0xfffffffc
c000199e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019a2:	31 c0                	xor    eax,eax
c00019a4:	8b 14 85 04 21 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddefc]
c00019ab:	85 d2                	test   edx,edx
c00019ad:	74 0e                	je     c00019bd <dlmallinfo+0x4c>
c00019af:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019b2:	45                   	inc    ebp
c00019b3:	83 e6 fc             	and    esi,0xfffffffc
c00019b6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019b9:	01 f1                	add    ecx,esi
c00019bb:	eb ee                	jmp    c00019ab <dlmallinfo+0x3a>
c00019bd:	40                   	inc    eax
c00019be:	83 f8 0a             	cmp    eax,0xa
c00019c1:	75 e1                	jne    c00019a4 <dlmallinfo+0x33>
c00019c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019c7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ce:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019d1:	b8 34 21 02 c0       	mov    eax,0xc0022134
c00019d6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019d9:	39 f0                	cmp    eax,esi
c00019db:	74 10                	je     c00019ed <dlmallinfo+0x7c>
c00019dd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019e0:	ff 04 24             	inc    DWORD PTR [esp]
c00019e3:	83 e7 fc             	and    edi,0xfffffffc
c00019e6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019e9:	01 fa                	add    edx,edi
c00019eb:	eb ec                	jmp    c00019d9 <dlmallinfo+0x68>
c00019ed:	83 c0 08             	add    eax,0x8
c00019f0:	3d 2c 24 02 c0       	cmp    eax,0xc002242c
c00019f5:	75 df                	jne    c00019d6 <dlmallinfo+0x65>
c00019f7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019fa:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019fd:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a00:	a1 68 24 02 c0       	mov    eax,ds:0xc0022468
c0001a05:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a08:	89 03                	mov    DWORD PTR [ebx],eax
c0001a0a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a0d:	8b 35 50 24 02 c0    	mov    esi,DWORD PTR ds:0xc0022450
c0001a13:	29 d0                	sub    eax,edx
c0001a15:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a18:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a1b:	8b 35 64 24 02 c0    	mov    esi,DWORD PTR ds:0xc0022464
c0001a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a25:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a28:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a2b:	8b 35 74 24 02 c0    	mov    esi,DWORD PTR ds:0xc0022474
c0001a31:	89 d8                	mov    eax,ebx
c0001a33:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a36:	83 c4 08             	add    esp,0x8
c0001a39:	5b                   	pop    ebx
c0001a3a:	5e                   	pop    esi
c0001a3b:	5f                   	pop    edi
c0001a3c:	5d                   	pop    ebp
c0001a3d:	c2 04 00             	ret    0x4

c0001a40 <dlmalloc_stats>:
c0001a40:	83 ec 30             	sub    esp,0x30
c0001a43:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a47:	50                   	push   eax
c0001a48:	e8 24 ff ff ff       	call   c0001971 <dlmallinfo>
c0001a4d:	83 c4 30             	add    esp,0x30
c0001a50:	c3                   	ret    

c0001a51 <dlmallopt>:
c0001a51:	56                   	push   esi
c0001a52:	b8 00 21 02 c0       	mov    eax,0xc0022100
c0001a57:	53                   	push   ebx
c0001a58:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a60:	e8 4d f1 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001a65:	8d 46 04             	lea    eax,[esi+0x4]
c0001a68:	83 f8 05             	cmp    eax,0x5
c0001a6b:	77 67                	ja     c0001ad4 <dlmallopt+0x83>
c0001a6d:	ff 24 85 04 d7 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe28fc]
c0001a74:	83 fb 50             	cmp    ebx,0x50
c0001a77:	77 5b                	ja     c0001ad4 <dlmallopt+0x83>
c0001a79:	ba 08 00 00 00       	mov    edx,0x8
c0001a7e:	85 db                	test   ebx,ebx
c0001a80:	74 12                	je     c0001a94 <dlmallopt+0x43>
c0001a82:	83 c3 0b             	add    ebx,0xb
c0001a85:	ba 10 00 00 00       	mov    edx,0x10
c0001a8a:	83 fb 0f             	cmp    ebx,0xf
c0001a8d:	76 05                	jbe    c0001a94 <dlmallopt+0x43>
c0001a8f:	89 da                	mov    edx,ebx
c0001a91:	83 e2 f8             	and    edx,0xfffffff8
c0001a94:	a1 00 21 02 c0       	mov    eax,ds:0xc0022100
c0001a99:	83 e0 03             	and    eax,0x3
c0001a9c:	09 d0                	or     eax,edx
c0001a9e:	a3 00 21 02 c0       	mov    ds:0xc0022100,eax
c0001aa3:	eb 31                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aa5:	89 1d 44 24 02 c0    	mov    DWORD PTR ds:0xc0022444,ebx
c0001aab:	eb 06                	jmp    c0001ab3 <dlmallopt+0x62>
c0001aad:	89 1d 48 24 02 c0    	mov    DWORD PTR ds:0xc0022448,ebx
c0001ab3:	be 01 00 00 00       	mov    esi,0x1
c0001ab8:	eb 1c                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aba:	89 1d 4c 24 02 c0    	mov    DWORD PTR ds:0xc002244c,ebx
c0001ac0:	eb f1                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ac2:	31 f6                	xor    esi,esi
c0001ac4:	85 db                	test   ebx,ebx
c0001ac6:	75 0e                	jne    c0001ad6 <dlmallopt+0x85>
c0001ac8:	c7 05 54 24 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022454,0x0
c0001ad2:	eb df                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ad4:	31 f6                	xor    esi,esi
c0001ad6:	89 f0                	mov    eax,esi
c0001ad8:	5b                   	pop    ebx
c0001ad9:	5e                   	pop    esi
c0001ada:	c3                   	ret    
c0001adb:	90                   	nop

c0001adc <isblank>:
c0001adc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ae1:	74 09                	je     c0001aec <isblank+0x10>
c0001ae3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ae8:	75 0a                	jne    c0001af4 <isblank+0x18>
c0001aea:	66 90                	xchg   ax,ax
c0001aec:	b8 01 00 00 00       	mov    eax,0x1
c0001af1:	c3                   	ret    
c0001af2:	66 90                	xchg   ax,ax
c0001af4:	b8 00 00 00 00       	mov    eax,0x0
c0001af9:	c3                   	ret    
c0001afa:	66 90                	xchg   ax,ax

c0001afc <iscntrl>:
c0001afc:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b01:	7e 09                	jle    c0001b0c <iscntrl+0x10>
c0001b03:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b08:	75 0a                	jne    c0001b14 <iscntrl+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <isdigit>:
c0001b1c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b21:	7e 0d                	jle    c0001b30 <isdigit+0x14>
c0001b23:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b28:	7f 06                	jg     c0001b30 <isdigit+0x14>
c0001b2a:	b8 01 00 00 00       	mov    eax,0x1
c0001b2f:	c3                   	ret    
c0001b30:	b8 00 00 00 00       	mov    eax,0x0
c0001b35:	c3                   	ret    
c0001b36:	66 90                	xchg   ax,ax

c0001b38 <islower>:
c0001b38:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b3d:	7e 0d                	jle    c0001b4c <islower+0x14>
c0001b3f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b44:	7f 06                	jg     c0001b4c <islower+0x14>
c0001b46:	b8 01 00 00 00       	mov    eax,0x1
c0001b4b:	c3                   	ret    
c0001b4c:	b8 00 00 00 00       	mov    eax,0x0
c0001b51:	c3                   	ret    
c0001b52:	66 90                	xchg   ax,ax

c0001b54 <isspace>:
c0001b54:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b59:	7c 19                	jl     c0001b74 <isspace+0x20>
c0001b5b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b60:	7e 0a                	jle    c0001b6c <isspace+0x18>
c0001b62:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b67:	75 0b                	jne    c0001b74 <isspace+0x20>
c0001b69:	8d 76 00             	lea    esi,[esi+0x0]
c0001b6c:	b8 01 00 00 00       	mov    eax,0x1
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax
c0001b74:	b8 00 00 00 00       	mov    eax,0x0
c0001b79:	c3                   	ret    
c0001b7a:	66 90                	xchg   ax,ax

c0001b7c <isupper>:
c0001b7c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b81:	7e 0d                	jle    c0001b90 <isupper+0x14>
c0001b83:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b88:	7f 06                	jg     c0001b90 <isupper+0x14>
c0001b8a:	b8 01 00 00 00       	mov    eax,0x1
c0001b8f:	c3                   	ret    
c0001b90:	b8 00 00 00 00       	mov    eax,0x0
c0001b95:	c3                   	ret    
c0001b96:	66 90                	xchg   ax,ax

c0001b98 <isalpha>:
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 db ff ff ff       	call   c0001b7c <isupper>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	75 10                	jne    c0001bb8 <isalpha+0x20>
c0001ba8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bac:	e8 87 ff ff ff       	call   c0001b38 <islower>
c0001bb1:	83 c4 04             	add    esp,0x4
c0001bb4:	85 c0                	test   eax,eax
c0001bb6:	74 08                	je     c0001bc0 <isalpha+0x28>
c0001bb8:	b8 01 00 00 00       	mov    eax,0x1
c0001bbd:	c3                   	ret    
c0001bbe:	66 90                	xchg   ax,ax
c0001bc0:	b8 00 00 00 00       	mov    eax,0x0
c0001bc5:	c3                   	ret    
c0001bc6:	66 90                	xchg   ax,ax

c0001bc8 <isalnum>:
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 c7 ff ff ff       	call   c0001b98 <isalpha>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	75 10                	jne    c0001be8 <isalnum+0x20>
c0001bd8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bdc:	e8 3b ff ff ff       	call   c0001b1c <isdigit>
c0001be1:	83 c4 04             	add    esp,0x4
c0001be4:	85 c0                	test   eax,eax
c0001be6:	74 08                	je     c0001bf0 <isalnum+0x28>
c0001be8:	b8 01 00 00 00       	mov    eax,0x1
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax
c0001bf0:	b8 00 00 00 00       	mov    eax,0x0
c0001bf5:	c3                   	ret    
c0001bf6:	66 90                	xchg   ax,ax

c0001bf8 <ispunct>:
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 c7 ff ff ff       	call   c0001bc8 <isalnum>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 28                	jne    c0001c30 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 43 ff ff ff       	call   c0001b54 <isspace>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 18                	jne    c0001c30 <ispunct+0x38>
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 db fe ff ff       	call   c0001afc <iscntrl>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 08                	jne    c0001c30 <ispunct+0x38>
c0001c28:	b8 01 00 00 00       	mov    eax,0x1
c0001c2d:	c3                   	ret    
c0001c2e:	66 90                	xchg   ax,ax
c0001c30:	b8 00 00 00 00       	mov    eax,0x0
c0001c35:	c3                   	ret    
c0001c36:	66 90                	xchg   ax,ax

c0001c38 <isgraph>:
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 87 ff ff ff       	call   c0001bc8 <isalnum>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 10                	jne    c0001c58 <isgraph+0x20>
c0001c48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c4c:	e8 a7 ff ff ff       	call   c0001bf8 <ispunct>
c0001c51:	83 c4 04             	add    esp,0x4
c0001c54:	85 c0                	test   eax,eax
c0001c56:	74 08                	je     c0001c60 <isgraph+0x28>
c0001c58:	b8 01 00 00 00       	mov    eax,0x1
c0001c5d:	c3                   	ret    
c0001c5e:	66 90                	xchg   ax,ax
c0001c60:	b8 00 00 00 00       	mov    eax,0x0
c0001c65:	c3                   	ret    
c0001c66:	66 90                	xchg   ax,ax

c0001c68 <isprint>:
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 c7 ff ff ff       	call   c0001c38 <isgraph>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	75 08                	jne    c0001c80 <isprint+0x18>
c0001c78:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c7d:	75 09                	jne    c0001c88 <isprint+0x20>
c0001c7f:	90                   	nop
c0001c80:	b8 01 00 00 00       	mov    eax,0x1
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax
c0001c88:	b8 00 00 00 00       	mov    eax,0x0
c0001c8d:	c3                   	ret    
c0001c8e:	66 90                	xchg   ax,ax

c0001c90 <isxdigit>:
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 83 fe ff ff       	call   c0001b1c <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	75 20                	jne    c0001cc0 <isxdigit+0x30>
c0001ca0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ca5:	7e 09                	jle    c0001cb0 <isxdigit+0x20>
c0001ca7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001cac:	7e 12                	jle    c0001cc0 <isxdigit+0x30>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cb5:	7e 11                	jle    c0001cc8 <isxdigit+0x38>
c0001cb7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cbc:	7f 0a                	jg     c0001cc8 <isxdigit+0x38>
c0001cbe:	66 90                	xchg   ax,ax
c0001cc0:	b8 01 00 00 00       	mov    eax,0x1
c0001cc5:	c3                   	ret    
c0001cc6:	66 90                	xchg   ax,ax
c0001cc8:	b8 00 00 00 00       	mov    eax,0x0
c0001ccd:	c3                   	ret    

c0001cce <disk_status>:
c0001cce:	31 c0                	xor    eax,eax
c0001cd0:	c3                   	ret    

c0001cd1 <disk_initialize>:
c0001cd1:	31 c0                	xor    eax,eax
c0001cd3:	c3                   	ret    

c0001cd4 <disk_read>:
c0001cd4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cd9:	0f b6 04 85 c0 62 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd9d40]
c0001ce1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ce5:	e9 6e 52 01 00       	jmp    c0016f58 <fatWrapperReadDisk>

c0001cea <disk_write>:
c0001cea:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cef:	0f b6 04 85 c0 62 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd9d40]
c0001cf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cfb:	e9 9c 52 01 00       	jmp    c0016f9c <fatWrapperWriteDisk>

c0001d00 <disk_ioctl>:
c0001d00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d09:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0e:	0f b6 04 85 c0 62 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd9d40]
c0001d16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1a:	e9 c1 52 01 00       	jmp    c0016fe0 <fatWrapperIoctl>

c0001d1f <ld_word>:
c0001d1f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d23:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d26:	c1 e2 08             	shl    edx,0x8
c0001d29:	09 d0                	or     eax,edx
c0001d2b:	c3                   	ret    

c0001d2c <ld_dword>:
c0001d2c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d30:	89 d1                	mov    ecx,edx
c0001d32:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d36:	c1 e1 08             	shl    ecx,0x8
c0001d39:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d3c:	09 ca                	or     edx,ecx
c0001d3e:	c1 e2 08             	shl    edx,0x8
c0001d41:	09 d0                	or     eax,edx
c0001d43:	c3                   	ret    

c0001d44 <st_word>:
c0001d44:	66 89 10             	mov    WORD PTR [eax],dx
c0001d47:	c3                   	ret    

c0001d48 <st_dword>:
c0001d48:	89 10                	mov    DWORD PTR [eax],edx
c0001d4a:	c3                   	ret    

c0001d4b <mem_cpy>:
c0001d4b:	85 c9                	test   ecx,ecx
c0001d4d:	74 10                	je     c0001d5f <mem_cpy+0x14>
c0001d4f:	57                   	push   edi
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	56                   	push   esi
c0001d53:	89 c7                	mov    edi,eax
c0001d55:	89 d6                	mov    esi,edx
c0001d57:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d58:	39 f9                	cmp    ecx,edi
c0001d5a:	75 fb                	jne    c0001d57 <mem_cpy+0xc>
c0001d5c:	5e                   	pop    esi
c0001d5d:	5f                   	pop    edi
c0001d5e:	c3                   	ret    
c0001d5f:	c3                   	ret    

c0001d60 <mem_set>:
c0001d60:	01 c1                	add    ecx,eax
c0001d62:	40                   	inc    eax
c0001d63:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d66:	39 c8                	cmp    eax,ecx
c0001d68:	75 f8                	jne    c0001d62 <mem_set+0x2>
c0001d6a:	c3                   	ret    

c0001d6b <mem_cmp>:
c0001d6b:	57                   	push   edi
c0001d6c:	56                   	push   esi
c0001d6d:	89 c6                	mov    esi,eax
c0001d6f:	53                   	push   ebx
c0001d70:	46                   	inc    esi
c0001d71:	42                   	inc    edx
c0001d72:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d76:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d7a:	29 fb                	sub    ebx,edi
c0001d7c:	89 cf                	mov    edi,ecx
c0001d7e:	29 f7                	sub    edi,esi
c0001d80:	01 c7                	add    edi,eax
c0001d82:	74 04                	je     c0001d88 <mem_cmp+0x1d>
c0001d84:	85 db                	test   ebx,ebx
c0001d86:	74 e8                	je     c0001d70 <mem_cmp+0x5>
c0001d88:	89 d8                	mov    eax,ebx
c0001d8a:	5b                   	pop    ebx
c0001d8b:	5e                   	pop    esi
c0001d8c:	5f                   	pop    edi
c0001d8d:	c3                   	ret    

c0001d8e <chk_chr>:
c0001d8e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d91:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d94:	74 07                	je     c0001d9d <chk_chr+0xf>
c0001d96:	39 d1                	cmp    ecx,edx
c0001d98:	74 03                	je     c0001d9d <chk_chr+0xf>
c0001d9a:	40                   	inc    eax
c0001d9b:	eb f1                	jmp    c0001d8e <chk_chr>
c0001d9d:	89 c8                	mov    eax,ecx
c0001d9f:	c3                   	ret    

c0001da0 <dbc_1st>:
c0001da0:	31 c0                	xor    eax,eax
c0001da2:	c3                   	ret    

c0001da3 <dbc_2nd>:
c0001da3:	31 c0                	xor    eax,eax
c0001da5:	c3                   	ret    

c0001da6 <tchar2uni>:
c0001da6:	57                   	push   edi
c0001da7:	89 c7                	mov    edi,eax
c0001da9:	56                   	push   esi
c0001daa:	53                   	push   ebx
c0001dab:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dad:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001daf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001db2:	84 c9                	test   cl,cl
c0001db4:	78 0a                	js     c0001dc0 <tchar2uni+0x1a>
c0001db6:	0f b6 d1             	movzx  edx,cl
c0001db9:	89 f3                	mov    ebx,esi
c0001dbb:	e9 9f 00 00 00       	jmp    c0001e5f <tchar2uni+0xb9>
c0001dc0:	88 ca                	mov    dl,cl
c0001dc2:	83 e2 e0             	and    edx,0xffffffe0
c0001dc5:	80 fa c0             	cmp    dl,0xc0
c0001dc8:	75 0c                	jne    c0001dd6 <tchar2uni+0x30>
c0001dca:	89 ca                	mov    edx,ecx
c0001dcc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dd1:	83 e2 1f             	and    edx,0x1f
c0001dd4:	eb 2e                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dd6:	88 ca                	mov    dl,cl
c0001dd8:	83 e2 f0             	and    edx,0xfffffff0
c0001ddb:	80 fa e0             	cmp    dl,0xe0
c0001dde:	75 0c                	jne    c0001dec <tchar2uni+0x46>
c0001de0:	89 ca                	mov    edx,ecx
c0001de2:	b9 02 00 00 00       	mov    ecx,0x2
c0001de7:	83 e2 0f             	and    edx,0xf
c0001dea:	eb 18                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dec:	88 ca                	mov    dl,cl
c0001dee:	83 e2 f8             	and    edx,0xfffffff8
c0001df1:	88 d0                	mov    al,dl
c0001df3:	83 ca ff             	or     edx,0xffffffff
c0001df6:	3c f0                	cmp    al,0xf0
c0001df8:	75 6c                	jne    c0001e66 <tchar2uni+0xc0>
c0001dfa:	89 ca                	mov    edx,ecx
c0001dfc:	b9 03 00 00 00       	mov    ecx,0x3
c0001e01:	83 e2 07             	and    edx,0x7
c0001e04:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e08:	46                   	inc    esi
c0001e09:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e0c:	88 c8                	mov    al,cl
c0001e0e:	83 e0 c0             	and    eax,0xffffffc0
c0001e11:	3c 80                	cmp    al,0x80
c0001e13:	75 4e                	jne    c0001e63 <tchar2uni+0xbd>
c0001e15:	c1 e2 06             	shl    edx,0x6
c0001e18:	83 e1 3f             	and    ecx,0x3f
c0001e1b:	09 ca                	or     edx,ecx
c0001e1d:	39 de                	cmp    esi,ebx
c0001e1f:	75 e7                	jne    c0001e08 <tchar2uni+0x62>
c0001e21:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e24:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e2a:	77 37                	ja     c0001e63 <tchar2uni+0xbd>
c0001e2c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e32:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e38:	76 29                	jbe    c0001e63 <tchar2uni+0xbd>
c0001e3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e40:	76 1d                	jbe    c0001e5f <tchar2uni+0xb9>
c0001e42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e4e:	c1 e1 06             	shl    ecx,0x6
c0001e51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e57:	09 ca                	or     edx,ecx
c0001e59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e5f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e61:	eb 03                	jmp    c0001e66 <tchar2uni+0xc0>
c0001e63:	83 ca ff             	or     edx,0xffffffff
c0001e66:	5b                   	pop    ebx
c0001e67:	89 d0                	mov    eax,edx
c0001e69:	5e                   	pop    esi
c0001e6a:	5f                   	pop    edi
c0001e6b:	c3                   	ret    

c0001e6c <put_utf>:
c0001e6c:	53                   	push   ebx
c0001e6d:	83 f8 7f             	cmp    eax,0x7f
c0001e70:	89 c3                	mov    ebx,eax
c0001e72:	b0 00                	mov    al,0x0
c0001e74:	77 11                	ja     c0001e87 <put_utf+0x1b>
c0001e76:	85 c9                	test   ecx,ecx
c0001e78:	0f 84 e5 00 00 00    	je     c0001f63 <put_utf+0xf7>
c0001e7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e80:	b0 01                	mov    al,0x1
c0001e82:	e9 dc 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001e87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e8d:	77 23                	ja     c0001eb2 <put_utf+0x46>
c0001e8f:	83 f9 01             	cmp    ecx,0x1
c0001e92:	0f 86 cb 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001e98:	89 d8                	mov    eax,ebx
c0001e9a:	83 e3 3f             	and    ebx,0x3f
c0001e9d:	c1 e8 06             	shr    eax,0x6
c0001ea0:	83 cb 80             	or     ebx,0xffffff80
c0001ea3:	83 c8 c0             	or     eax,0xffffffc0
c0001ea6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ea9:	88 02                	mov    BYTE PTR [edx],al
c0001eab:	b0 02                	mov    al,0x2
c0001ead:	e9 b1 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001eb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001eb8:	77 40                	ja     c0001efa <put_utf+0x8e>
c0001eba:	83 f9 02             	cmp    ecx,0x2
c0001ebd:	0f 86 a0 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ec3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ec9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ecf:	0f 86 8e 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 c8 e0             	or     eax,0xffffffe0
c0001edd:	88 02                	mov    BYTE PTR [edx],al
c0001edf:	89 d8                	mov    eax,ebx
c0001ee1:	83 e3 3f             	and    ebx,0x3f
c0001ee4:	c1 e8 06             	shr    eax,0x6
c0001ee7:	83 cb 80             	or     ebx,0xffffff80
c0001eea:	83 e0 3f             	and    eax,0x3f
c0001eed:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ef0:	83 c8 80             	or     eax,0xffffff80
c0001ef3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ef6:	b0 03                	mov    al,0x3
c0001ef8:	eb 69                	jmp    c0001f63 <put_utf+0xf7>
c0001efa:	83 f9 03             	cmp    ecx,0x3
c0001efd:	76 64                	jbe    c0001f63 <put_utf+0xf7>
c0001eff:	89 d9                	mov    ecx,ebx
c0001f01:	0f b7 c3             	movzx  eax,bx
c0001f04:	66 31 c9             	xor    cx,cx
c0001f07:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f0d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f13:	c1 e9 06             	shr    ecx,0x6
c0001f16:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f1c:	77 43                	ja     c0001f61 <put_utf+0xf5>
c0001f1e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f24:	77 3b                	ja     c0001f61 <put_utf+0xf5>
c0001f26:	09 cb                	or     ebx,ecx
c0001f28:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f2e:	89 d8                	mov    eax,ebx
c0001f30:	c1 e8 12             	shr    eax,0x12
c0001f33:	83 c8 f0             	or     eax,0xfffffff0
c0001f36:	88 02                	mov    BYTE PTR [edx],al
c0001f38:	89 d8                	mov    eax,ebx
c0001f3a:	c1 e8 0c             	shr    eax,0xc
c0001f3d:	83 e0 3f             	and    eax,0x3f
c0001f40:	83 c8 80             	or     eax,0xffffff80
c0001f43:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f46:	89 d8                	mov    eax,ebx
c0001f48:	83 e3 3f             	and    ebx,0x3f
c0001f4b:	c1 e8 06             	shr    eax,0x6
c0001f4e:	83 cb 80             	or     ebx,0xffffff80
c0001f51:	83 e0 3f             	and    eax,0x3f
c0001f54:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f57:	83 c8 80             	or     eax,0xffffff80
c0001f5a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f5d:	b0 04                	mov    al,0x4
c0001f5f:	eb 02                	jmp    c0001f63 <put_utf+0xf7>
c0001f61:	31 c0                	xor    eax,eax
c0001f63:	5b                   	pop    ebx
c0001f64:	c3                   	ret    

c0001f65 <clst2sect>:
c0001f65:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f6b:	83 ea 02             	sub    edx,0x2
c0001f6e:	39 ca                	cmp    edx,ecx
c0001f70:	76 0d                	jbe    c0001f7f <clst2sect+0x1a>
c0001f72:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f76:	0f af d1             	imul   edx,ecx
c0001f79:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f7c:	89 d0                	mov    eax,edx
c0001f7e:	c3                   	ret    
c0001f7f:	31 c0                	xor    eax,eax
c0001f81:	c3                   	ret    

c0001f82 <pick_lfn>:
c0001f82:	55                   	push   ebp
c0001f83:	57                   	push   edi
c0001f84:	56                   	push   esi
c0001f85:	89 d6                	mov    esi,edx
c0001f87:	53                   	push   ebx
c0001f88:	89 c3                	mov    ebx,eax
c0001f8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f8d:	e8 8d fd ff ff       	call   c0001d1f <ld_word>
c0001f92:	66 85 c0             	test   ax,ax
c0001f95:	74 04                	je     c0001f9b <pick_lfn+0x19>
c0001f97:	31 c0                	xor    eax,eax
c0001f99:	eb 5c                	jmp    c0001ff7 <pick_lfn+0x75>
c0001f9b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f9e:	bd 01 00 00 00       	mov    ebp,0x1
c0001fa3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fa6:	31 ff                	xor    edi,edi
c0001fa8:	49                   	dec    ecx
c0001fa9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fac:	0f b6 87 60 d8 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe27a0]
c0001fb3:	01 f0                	add    eax,esi
c0001fb5:	e8 65 fd ff ff       	call   c0001d1f <ld_word>
c0001fba:	66 85 ed             	test   bp,bp
c0001fbd:	74 11                	je     c0001fd0 <pick_lfn+0x4e>
c0001fbf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fc5:	77 d0                	ja     c0001f97 <pick_lfn+0x15>
c0001fc7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fcb:	89 c5                	mov    ebp,eax
c0001fcd:	41                   	inc    ecx
c0001fce:	eb 04                	jmp    c0001fd4 <pick_lfn+0x52>
c0001fd0:	66 40                	inc    ax
c0001fd2:	75 c3                	jne    c0001f97 <pick_lfn+0x15>
c0001fd4:	47                   	inc    edi
c0001fd5:	83 ff 0d             	cmp    edi,0xd
c0001fd8:	75 d2                	jne    c0001fac <pick_lfn+0x2a>
c0001fda:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fdd:	74 13                	je     c0001ff2 <pick_lfn+0x70>
c0001fdf:	66 85 ed             	test   bp,bp
c0001fe2:	74 0e                	je     c0001ff2 <pick_lfn+0x70>
c0001fe4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fea:	77 ab                	ja     c0001f97 <pick_lfn+0x15>
c0001fec:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ff2:	b8 01 00 00 00       	mov    eax,0x1
c0001ff7:	5b                   	pop    ebx
c0001ff8:	5e                   	pop    esi
c0001ff9:	5f                   	pop    edi
c0001ffa:	5d                   	pop    ebp
c0001ffb:	c3                   	ret    

c0001ffc <put_lfn>:
c0001ffc:	55                   	push   ebp
c0001ffd:	31 ed                	xor    ebp,ebp
c0001fff:	57                   	push   edi
c0002000:	89 d7                	mov    edi,edx
c0002002:	56                   	push   esi
c0002003:	31 f6                	xor    esi,esi
c0002005:	53                   	push   ebx
c0002006:	83 ec 08             	sub    esp,0x8
c0002009:	89 04 24             	mov    DWORD PTR [esp],eax
c000200c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002010:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002014:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000201a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000201d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002020:	31 d2                	xor    edx,edx
c0002022:	e8 1d fd ff ff       	call   c0001d44 <st_word>
c0002027:	0f b6 d9             	movzx  ebx,cl
c000202a:	4b                   	dec    ebx
c000202b:	6b db 0d             	imul   ebx,ebx,0xd
c000202e:	66 83 fe ff          	cmp    si,0xffff
c0002032:	74 08                	je     c000203c <put_lfn+0x40>
c0002034:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002037:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000203b:	43                   	inc    ebx
c000203c:	0f b6 85 60 d8 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe27a0]
c0002043:	0f b7 d6             	movzx  edx,si
c0002046:	01 f8                	add    eax,edi
c0002048:	e8 f7 fc ff ff       	call   c0001d44 <st_word>
c000204d:	66 85 f6             	test   si,si
c0002050:	75 03                	jne    c0002055 <put_lfn+0x59>
c0002052:	83 ce ff             	or     esi,0xffffffff
c0002055:	45                   	inc    ebp
c0002056:	83 fd 0d             	cmp    ebp,0xd
c0002059:	75 d3                	jne    c000202e <put_lfn+0x32>
c000205b:	66 46                	inc    si
c000205d:	74 0a                	je     c0002069 <put_lfn+0x6d>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002067:	75 09                	jne    c0002072 <put_lfn+0x76>
c0002069:	88 c8                	mov    al,cl
c000206b:	83 c8 40             	or     eax,0x40
c000206e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002072:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002076:	88 07                	mov    BYTE PTR [edi],al
c0002078:	83 c4 08             	add    esp,0x8
c000207b:	5b                   	pop    ebx
c000207c:	5e                   	pop    esi
c000207d:	5f                   	pop    edi
c000207e:	5d                   	pop    ebp
c000207f:	c3                   	ret    

c0002080 <gen_numname>:
c0002080:	57                   	push   edi
c0002081:	89 cf                	mov    edi,ecx
c0002083:	56                   	push   esi
c0002084:	b9 0b 00 00 00       	mov    ecx,0xb
c0002089:	53                   	push   ebx
c000208a:	89 c6                	mov    esi,eax
c000208c:	83 ec 10             	sub    esp,0x10
c000208f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002093:	e8 b3 fc ff ff       	call   c0001d4b <mem_cpy>
c0002098:	83 fb 05             	cmp    ebx,0x5
c000209b:	76 2d                	jbe    c00020ca <gen_numname+0x4a>
c000209d:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020a0:	66 85 c0             	test   ax,ax
c00020a3:	74 25                	je     c00020ca <gen_numname+0x4a>
c00020a5:	83 c7 02             	add    edi,0x2
c00020a8:	ba 10 00 00 00       	mov    edx,0x10
c00020ad:	01 db                	add    ebx,ebx
c00020af:	89 c1                	mov    ecx,eax
c00020b1:	66 d1 e8             	shr    ax,1
c00020b4:	83 e1 01             	and    ecx,0x1
c00020b7:	01 cb                	add    ebx,ecx
c00020b9:	0f ba e3 10          	bt     ebx,0x10
c00020bd:	73 06                	jae    c00020c5 <gen_numname+0x45>
c00020bf:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020c5:	4a                   	dec    edx
c00020c6:	75 e5                	jne    c00020ad <gen_numname+0x2d>
c00020c8:	eb d3                	jmp    c000209d <gen_numname+0x1d>
c00020ca:	b8 07 00 00 00       	mov    eax,0x7
c00020cf:	88 d9                	mov    cl,bl
c00020d1:	83 e1 0f             	and    ecx,0xf
c00020d4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020d7:	80 fa 39             	cmp    dl,0x39
c00020da:	76 03                	jbe    c00020df <gen_numname+0x5f>
c00020dc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020df:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020e2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020e6:	89 da                	mov    edx,ebx
c00020e8:	c1 ea 04             	shr    edx,0x4
c00020eb:	83 fb 0f             	cmp    ebx,0xf
c00020ee:	76 06                	jbe    c00020f6 <gen_numname+0x76>
c00020f0:	89 c8                	mov    eax,ecx
c00020f2:	89 d3                	mov    ebx,edx
c00020f4:	eb d9                	jmp    c00020cf <gen_numname+0x4f>
c00020f6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002100:	8d 04 16             	lea    eax,[esi+edx*1]
c0002103:	39 ca                	cmp    edx,ecx
c0002105:	73 18                	jae    c000211f <gen_numname+0x9f>
c0002107:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000210a:	3c 20                	cmp    al,0x20
c000210c:	74 11                	je     c000211f <gen_numname+0x9f>
c000210e:	e8 8d fc ff ff       	call   c0001da0 <dbc_1st>
c0002113:	85 c0                	test   eax,eax
c0002115:	74 05                	je     c000211c <gen_numname+0x9c>
c0002117:	39 d3                	cmp    ebx,edx
c0002119:	74 04                	je     c000211f <gen_numname+0x9f>
c000211b:	42                   	inc    edx
c000211c:	42                   	inc    edx
c000211d:	eb e1                	jmp    c0002100 <gen_numname+0x80>
c000211f:	b0 20                	mov    al,0x20
c0002121:	83 f9 07             	cmp    ecx,0x7
c0002124:	77 05                	ja     c000212b <gen_numname+0xab>
c0002126:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000212a:	41                   	inc    ecx
c000212b:	42                   	inc    edx
c000212c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002130:	83 fa 07             	cmp    edx,0x7
c0002133:	76 ea                	jbe    c000211f <gen_numname+0x9f>
c0002135:	83 c4 10             	add    esp,0x10
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	c3                   	ret    

c000213c <sum_sfn>:
c000213c:	31 c9                	xor    ecx,ecx
c000213e:	31 d2                	xor    edx,edx
c0002140:	d0 ca                	ror    dl,1
c0002142:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002145:	41                   	inc    ecx
c0002146:	83 f9 0b             	cmp    ecx,0xb
c0002149:	75 f5                	jne    c0002140 <sum_sfn+0x4>
c000214b:	88 d0                	mov    al,dl
c000214d:	c3                   	ret    

c000214e <get_ldnumber>:
c000214e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002150:	85 d2                	test   edx,edx
c0002152:	74 14                	je     c0002168 <get_ldnumber+0x1a>
c0002154:	56                   	push   esi
c0002155:	53                   	push   ebx
c0002156:	89 d3                	mov    ebx,edx
c0002158:	43                   	inc    ebx
c0002159:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215c:	80 f9 1f             	cmp    cl,0x1f
c000215f:	76 0d                	jbe    c000216e <get_ldnumber+0x20>
c0002161:	80 f9 3a             	cmp    cl,0x3a
c0002164:	75 f2                	jne    c0002158 <get_ldnumber+0xa>
c0002166:	eb 0a                	jmp    c0002172 <get_ldnumber+0x24>
c0002168:	83 c9 ff             	or     ecx,0xffffffff
c000216b:	89 c8                	mov    eax,ecx
c000216d:	c3                   	ret    
c000216e:	31 c9                	xor    ecx,ecx
c0002170:	eb 24                	jmp    c0002196 <get_ldnumber+0x48>
c0002172:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002175:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002178:	80 f9 09             	cmp    cl,0x9
c000217b:	77 16                	ja     c0002193 <get_ldnumber+0x45>
c000217d:	83 c2 02             	add    edx,0x2
c0002180:	83 c9 ff             	or     ecx,0xffffffff
c0002183:	39 d3                	cmp    ebx,edx
c0002185:	75 0f                	jne    c0002196 <get_ldnumber+0x48>
c0002187:	89 f2                	mov    edx,esi
c0002189:	89 18                	mov    DWORD PTR [eax],ebx
c000218b:	0f be ca             	movsx  ecx,dl
c000218e:	83 e9 30             	sub    ecx,0x30
c0002191:	eb 03                	jmp    c0002196 <get_ldnumber+0x48>
c0002193:	83 c9 ff             	or     ecx,0xffffffff
c0002196:	89 c8                	mov    eax,ecx
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	c3                   	ret    

c000219b <validate>:
c000219b:	56                   	push   esi
c000219c:	53                   	push   ebx
c000219d:	89 d6                	mov    esi,edx
c000219f:	51                   	push   ecx
c00021a0:	85 c0                	test   eax,eax
c00021a2:	75 09                	jne    c00021ad <validate+0x12>
c00021a4:	b8 09 00 00 00       	mov    eax,0x9
c00021a9:	31 c9                	xor    ecx,ecx
c00021ab:	eb 2f                	jmp    c00021dc <validate+0x41>
c00021ad:	89 c3                	mov    ebx,eax
c00021af:	8b 00                	mov    eax,DWORD PTR [eax]
c00021b1:	85 c0                	test   eax,eax
c00021b3:	74 ef                	je     c00021a4 <validate+0x9>
c00021b5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021b8:	74 ea                	je     c00021a4 <validate+0x9>
c00021ba:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021be:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021c2:	75 e0                	jne    c00021a4 <validate+0x9>
c00021c4:	83 ec 0c             	sub    esp,0xc
c00021c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021cb:	50                   	push   eax
c00021cc:	e8 fd fa ff ff       	call   c0001cce <disk_status>
c00021d1:	83 c4 10             	add    esp,0x10
c00021d4:	a8 01                	test   al,0x1
c00021d6:	75 cc                	jne    c00021a4 <validate+0x9>
c00021d8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021da:	31 c0                	xor    eax,eax
c00021dc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021de:	5a                   	pop    edx
c00021df:	5b                   	pop    ebx
c00021e0:	5e                   	pop    esi
c00021e1:	c3                   	ret    

c00021e2 <sync_window>:
c00021e2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021e6:	74 58                	je     c0002240 <sync_window+0x5e>
c00021e8:	56                   	push   esi
c00021e9:	53                   	push   ebx
c00021ea:	8d 70 34             	lea    esi,[eax+0x34]
c00021ed:	51                   	push   ecx
c00021ee:	89 c3                	mov    ebx,eax
c00021f0:	6a 01                	push   0x1
c00021f2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021f5:	56                   	push   esi
c00021f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021fa:	50                   	push   eax
c00021fb:	e8 ea fa ff ff       	call   c0001cea <disk_write>
c0002200:	83 c4 10             	add    esp,0x10
c0002203:	ba 01 00 00 00       	mov    edx,0x1
c0002208:	85 c0                	test   eax,eax
c000220a:	75 2e                	jne    c000223a <sync_window+0x58>
c000220c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000220f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002212:	89 c1                	mov    ecx,eax
c0002214:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002218:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000221b:	39 d1                	cmp    ecx,edx
c000221d:	73 19                	jae    c0002238 <sync_window+0x56>
c000221f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002223:	75 13                	jne    c0002238 <sync_window+0x56>
c0002225:	6a 01                	push   0x1
c0002227:	01 d0                	add    eax,edx
c0002229:	50                   	push   eax
c000222a:	56                   	push   esi
c000222b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000222f:	50                   	push   eax
c0002230:	e8 b5 fa ff ff       	call   c0001cea <disk_write>
c0002235:	83 c4 10             	add    esp,0x10
c0002238:	31 d2                	xor    edx,edx
c000223a:	89 d0                	mov    eax,edx
c000223c:	5a                   	pop    edx
c000223d:	5b                   	pop    ebx
c000223e:	5e                   	pop    esi
c000223f:	c3                   	ret    
c0002240:	31 d2                	xor    edx,edx
c0002242:	89 d0                	mov    eax,edx
c0002244:	c3                   	ret    

c0002245 <move_window>:
c0002245:	57                   	push   edi
c0002246:	56                   	push   esi
c0002247:	31 f6                	xor    esi,esi
c0002249:	53                   	push   ebx
c000224a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000224d:	74 32                	je     c0002281 <move_window+0x3c>
c000224f:	89 c3                	mov    ebx,eax
c0002251:	89 d7                	mov    edi,edx
c0002253:	e8 8a ff ff ff       	call   c00021e2 <sync_window>
c0002258:	89 c6                	mov    esi,eax
c000225a:	85 c0                	test   eax,eax
c000225c:	75 23                	jne    c0002281 <move_window+0x3c>
c000225e:	6a 01                	push   0x1
c0002260:	8d 43 34             	lea    eax,[ebx+0x34]
c0002263:	57                   	push   edi
c0002264:	50                   	push   eax
c0002265:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002269:	50                   	push   eax
c000226a:	e8 65 fa ff ff       	call   c0001cd4 <disk_read>
c000226f:	83 c4 10             	add    esp,0x10
c0002272:	85 c0                	test   eax,eax
c0002274:	74 08                	je     c000227e <move_window+0x39>
c0002276:	be 01 00 00 00       	mov    esi,0x1
c000227b:	83 cf ff             	or     edi,0xffffffff
c000227e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002281:	89 f0                	mov    eax,esi
c0002283:	5b                   	pop    ebx
c0002284:	5e                   	pop    esi
c0002285:	5f                   	pop    edi
c0002286:	c3                   	ret    

c0002287 <check_fs>:
c0002287:	53                   	push   ebx
c0002288:	89 c3                	mov    ebx,eax
c000228a:	83 ec 08             	sub    esp,0x8
c000228d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002291:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002298:	e8 a8 ff ff ff       	call   c0002245 <move_window>
c000229d:	ba 04 00 00 00       	mov    edx,0x4
c00022a2:	85 c0                	test   eax,eax
c00022a4:	75 68                	jne    c000230e <check_fs+0x87>
c00022a6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022ac:	e8 6e fa ff ff       	call   c0001d1f <ld_word>
c00022b1:	ba 03 00 00 00       	mov    edx,0x3
c00022b6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ba:	75 52                	jne    c000230e <check_fs+0x87>
c00022bc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022bf:	8d 50 18             	lea    edx,[eax+0x18]
c00022c2:	80 fa 01             	cmp    dl,0x1
c00022c5:	76 09                	jbe    c00022d0 <check_fs+0x49>
c00022c7:	ba 02 00 00 00       	mov    edx,0x2
c00022cc:	3c eb                	cmp    al,0xeb
c00022ce:	75 3e                	jne    c000230e <check_fs+0x87>
c00022d0:	ba 68 f7 01 c0       	mov    edx,0xc001f768
c00022d5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022d8:	b9 03 00 00 00       	mov    ecx,0x3
c00022dd:	e8 89 fa ff ff       	call   c0001d6b <mem_cmp>
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	85 c0                	test   eax,eax
c00022e6:	74 26                	je     c000230e <check_fs+0x87>
c00022e8:	ba 1c d7 01 c0       	mov    edx,0xc001d71c
c00022ed:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022f3:	b9 05 00 00 00       	mov    ecx,0x5
c00022f8:	e8 6e fa ff ff       	call   c0001d6b <mem_cmp>
c00022fd:	31 d2                	xor    edx,edx
c00022ff:	85 c0                	test   eax,eax
c0002301:	74 0b                	je     c000230e <check_fs+0x87>
c0002303:	31 d2                	xor    edx,edx
c0002305:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002309:	0f 95 c2             	setne  dl
c000230c:	01 d2                	add    edx,edx
c000230e:	89 d0                	mov    eax,edx
c0002310:	83 c4 08             	add    esp,0x8
c0002313:	5b                   	pop    ebx
c0002314:	c3                   	ret    

c0002315 <find_volume>:
c0002315:	55                   	push   ebp
c0002316:	57                   	push   edi
c0002317:	56                   	push   esi
c0002318:	89 c6                	mov    esi,eax
c000231a:	53                   	push   ebx
c000231b:	89 d3                	mov    ebx,edx
c000231d:	83 ec 2c             	sub    esp,0x2c
c0002320:	31 d2                	xor    edx,edx
c0002322:	e8 60 ff ff ff       	call   c0002287 <check_fs>
c0002327:	83 f8 02             	cmp    eax,0x2
c000232a:	74 06                	je     c0002332 <find_volume+0x1d>
c000232c:	77 62                	ja     c0002390 <find_volume+0x7b>
c000232e:	85 db                	test   ebx,ebx
c0002330:	74 5e                	je     c0002390 <find_volume+0x7b>
c0002332:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002336:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000233c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002342:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002346:	89 cf                	mov    edi,ecx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 e8                	mov    eax,ebp
c000234e:	83 c5 10             	add    ebp,0x10
c0002351:	e8 d6 f9 ff ff       	call   c0001d2c <ld_dword>
c0002356:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235a:	89 01                	mov    DWORD PTR [ecx],eax
c000235c:	83 c1 04             	add    ecx,0x4
c000235f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002363:	75 e3                	jne    c0002348 <find_volume+0x33>
c0002365:	31 ed                	xor    ebp,ebp
c0002367:	85 db                	test   ebx,ebx
c0002369:	74 03                	je     c000236e <find_volume+0x59>
c000236b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000236e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002371:	b8 03 00 00 00       	mov    eax,0x3
c0002376:	85 d2                	test   edx,edx
c0002378:	74 0c                	je     c0002386 <find_volume+0x71>
c000237a:	89 f0                	mov    eax,esi
c000237c:	e8 06 ff ff ff       	call   c0002287 <check_fs>
c0002381:	83 f8 01             	cmp    eax,0x1
c0002384:	76 0a                	jbe    c0002390 <find_volume+0x7b>
c0002386:	85 db                	test   ebx,ebx
c0002388:	75 06                	jne    c0002390 <find_volume+0x7b>
c000238a:	45                   	inc    ebp
c000238b:	83 fd 03             	cmp    ebp,0x3
c000238e:	76 de                	jbe    c000236e <find_volume+0x59>
c0002390:	83 c4 2c             	add    esp,0x2c
c0002393:	5b                   	pop    ebx
c0002394:	5e                   	pop    esi
c0002395:	5f                   	pop    edi
c0002396:	5d                   	pop    ebp
c0002397:	c3                   	ret    

c0002398 <mount_volume>:
c0002398:	55                   	push   ebp
c0002399:	89 d5                	mov    ebp,edx
c000239b:	57                   	push   edi
c000239c:	89 cf                	mov    edi,ecx
c000239e:	56                   	push   esi
c000239f:	53                   	push   ebx
c00023a0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023a5:	83 ec 2c             	sub    esp,0x2c
c00023a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ae:	e8 9b fd ff ff       	call   c000214e <get_ldnumber>
c00023b3:	85 c0                	test   eax,eax
c00023b5:	0f 88 d6 02 00 00    	js     c0002691 <mount_volume+0x2f9>
c00023bb:	8b 34 85 a0 24 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffddb60]
c00023c2:	89 c2                	mov    edx,eax
c00023c4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023c9:	85 f6                	test   esi,esi
c00023cb:	0f 84 c0 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c00023d1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023d4:	83 e7 fe             	and    edi,0xfffffffe
c00023d7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023da:	74 3a                	je     c0002416 <mount_volume+0x7e>
c00023dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023e0:	83 ec 0c             	sub    esp,0xc
c00023e3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023e7:	50                   	push   eax
c00023e8:	e8 e1 f8 ff ff       	call   c0001cce <disk_status>
c00023ed:	83 c4 10             	add    esp,0x10
c00023f0:	a8 01                	test   al,0x1
c00023f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023f6:	75 1e                	jne    c0002416 <mount_volume+0x7e>
c00023f8:	31 db                	xor    ebx,ebx
c00023fa:	89 f9                	mov    ecx,edi
c00023fc:	84 c9                	test   cl,cl
c00023fe:	0f 84 8d 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002404:	a8 04                	test   al,0x4
c0002406:	0f 84 85 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c000240c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002411:	e9 7b 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002416:	83 ec 0c             	sub    esp,0xc
c0002419:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000241c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000241f:	0f b6 c2             	movzx  eax,dl
c0002422:	bb 03 00 00 00       	mov    ebx,0x3
c0002427:	50                   	push   eax
c0002428:	e8 a4 f8 ff ff       	call   c0001cd1 <disk_initialize>
c000242d:	83 c4 10             	add    esp,0x10
c0002430:	a8 01                	test   al,0x1
c0002432:	0f 85 59 02 00 00    	jne    c0002691 <mount_volume+0x2f9>
c0002438:	89 f9                	mov    ecx,edi
c000243a:	84 c9                	test   cl,cl
c000243c:	74 04                	je     c0002442 <mount_volume+0xaa>
c000243e:	a8 04                	test   al,0x4
c0002440:	75 ca                	jne    c000240c <mount_volume+0x74>
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 f0                	mov    eax,esi
c0002446:	bb 01 00 00 00       	mov    ebx,0x1
c000244b:	e8 c5 fe ff ff       	call   c0002315 <find_volume>
c0002450:	83 f8 04             	cmp    eax,0x4
c0002453:	0f 84 38 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002459:	83 f8 01             	cmp    eax,0x1
c000245c:	76 0a                	jbe    c0002468 <mount_volume+0xd0>
c000245e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002463:	e9 29 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002468:	8d 46 3f             	lea    eax,[esi+0x3f]
c000246b:	e8 af f8 ff ff       	call   c0001d1f <ld_word>
c0002470:	66 3d 00 02          	cmp    ax,0x200
c0002474:	75 e8                	jne    c000245e <mount_volume+0xc6>
c0002476:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002479:	e8 a1 f8 ff ff       	call   c0001d1f <ld_word>
c000247e:	0f b7 c0             	movzx  eax,ax
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	85 c0                	test   eax,eax
c0002487:	75 0c                	jne    c0002495 <mount_volume+0xfd>
c0002489:	8d 46 58             	lea    eax,[esi+0x58]
c000248c:	e8 9b f8 ff ff       	call   c0001d2c <ld_dword>
c0002491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002495:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002498:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000249b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000249f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024a3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024a6:	89 e8                	mov    eax,ebp
c00024a8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024ab:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ae:	3c 01                	cmp    al,0x1
c00024b0:	77 ac                	ja     c000245e <mount_volume+0xc6>
c00024b2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024b6:	89 c3                	mov    ebx,eax
c00024b8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024bc:	66 85 c0             	test   ax,ax
c00024bf:	74 9d                	je     c000245e <mount_volume+0xc6>
c00024c1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024c4:	85 d8                	test   eax,ebx
c00024c6:	75 96                	jne    c000245e <mount_volume+0xc6>
c00024c8:	8d 46 45             	lea    eax,[esi+0x45]
c00024cb:	e8 4f f8 ff ff       	call   c0001d1f <ld_word>
c00024d0:	89 c7                	mov    edi,eax
c00024d2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024d6:	a8 0f                	test   al,0xf
c00024d8:	75 84                	jne    c000245e <mount_volume+0xc6>
c00024da:	8d 46 47             	lea    eax,[esi+0x47]
c00024dd:	e8 3d f8 ff ff       	call   c0001d1f <ld_word>
c00024e2:	0f b7 d0             	movzx  edx,ax
c00024e5:	85 d2                	test   edx,edx
c00024e7:	75 0a                	jne    c00024f3 <mount_volume+0x15b>
c00024e9:	8d 46 54             	lea    eax,[esi+0x54]
c00024ec:	e8 3b f8 ff ff       	call   c0001d2c <ld_dword>
c00024f1:	89 c2                	mov    edx,eax
c00024f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f7:	8d 46 42             	lea    eax,[esi+0x42]
c00024fa:	e8 20 f8 ff ff       	call   c0001d1f <ld_word>
c00024ff:	66 85 c0             	test   ax,ax
c0002502:	0f 84 56 ff ff ff    	je     c000245e <mount_volume+0xc6>
c0002508:	89 e9                	mov    ecx,ebp
c000250a:	0f b7 c0             	movzx  eax,ax
c000250d:	0f b6 e9             	movzx  ebp,cl
c0002510:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002514:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002518:	89 f8                	mov    eax,edi
c000251a:	0f af cd             	imul   ecx,ebp
c000251d:	66 c1 e8 04          	shr    ax,0x4
c0002521:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002525:	0f b7 c0             	movzx  eax,ax
c0002528:	01 c8                	add    eax,ecx
c000252a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000252e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002532:	39 c2                	cmp    edx,eax
c0002534:	0f 82 24 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000253a:	29 c2                	sub    edx,eax
c000253c:	89 d5                	mov    ebp,edx
c000253e:	89 d0                	mov    eax,edx
c0002540:	31 d2                	xor    edx,edx
c0002542:	f7 f3                	div    ebx
c0002544:	39 dd                	cmp    ebp,ebx
c0002546:	0f 82 12 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000254c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002551:	0f 87 07 ff ff ff    	ja     c000245e <mount_volume+0xc6>
c0002557:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000255c:	0f 86 1f 01 00 00    	jbe    c0002681 <mount_volume+0x2e9>
c0002562:	bb 03 00 00 00       	mov    ebx,0x3
c0002567:	8d 68 02             	lea    ebp,[eax+0x2]
c000256a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000256e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002572:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002576:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002579:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000257c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002580:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002583:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002587:	83 fb 03             	cmp    ebx,0x3
c000258a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000258d:	75 21                	jne    c00025b0 <mount_volume+0x218>
c000258f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002592:	e8 88 f7 ff ff       	call   c0001d1f <ld_word>
c0002597:	66 09 c7             	or     di,ax
c000259a:	0f 85 be fe ff ff    	jne    c000245e <mount_volume+0xc6>
c00025a0:	8d 46 60             	lea    eax,[esi+0x60]
c00025a3:	c1 e5 02             	shl    ebp,0x2
c00025a6:	e8 81 f7 ff ff       	call   c0001d2c <ld_dword>
c00025ab:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ae:	eb 22                	jmp    c00025d2 <mount_volume+0x23a>
c00025b0:	66 85 ff             	test   di,di
c00025b3:	0f 84 a5 fe ff ff    	je     c000245e <mount_volume+0xc6>
c00025b9:	01 c8                	add    eax,ecx
c00025bb:	83 fb 02             	cmp    ebx,0x2
c00025be:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025c1:	75 04                	jne    c00025c7 <mount_volume+0x22f>
c00025c3:	01 ed                	add    ebp,ebp
c00025c5:	eb 0b                	jmp    c00025d2 <mount_volume+0x23a>
c00025c7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025cb:	83 e5 01             	and    ebp,0x1
c00025ce:	d1 e8                	shr    eax,1
c00025d0:	01 c5                	add    ebp,eax
c00025d2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025d8:	c1 ed 09             	shr    ebp,0x9
c00025db:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025df:	0f 87 79 fe ff ff    	ja     c000245e <mount_volume+0xc6>
c00025e5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025ec:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025f3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025f7:	83 fb 03             	cmp    ebx,0x3
c00025fa:	75 6e                	jne    c000266a <mount_volume+0x2d2>
c00025fc:	8d 46 64             	lea    eax,[esi+0x64]
c00025ff:	e8 1b f7 ff ff       	call   c0001d1f <ld_word>
c0002604:	66 48                	dec    ax
c0002606:	75 62                	jne    c000266a <mount_volume+0x2d2>
c0002608:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000260c:	89 f0                	mov    eax,esi
c000260e:	42                   	inc    edx
c000260f:	e8 31 fc ff ff       	call   c0002245 <move_window>
c0002614:	85 c0                	test   eax,eax
c0002616:	75 52                	jne    c000266a <mount_volume+0x2d2>
c0002618:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000261c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002622:	e8 f8 f6 ff ff       	call   c0001d1f <ld_word>
c0002627:	66 3d 55 aa          	cmp    ax,0xaa55
c000262b:	75 3d                	jne    c000266a <mount_volume+0x2d2>
c000262d:	8d 46 34             	lea    eax,[esi+0x34]
c0002630:	e8 f7 f6 ff ff       	call   c0001d2c <ld_dword>
c0002635:	3d 52 52 61 41       	cmp    eax,0x41615252
c000263a:	75 2e                	jne    c000266a <mount_volume+0x2d2>
c000263c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002642:	e8 e5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002647:	3d 72 72 41 61       	cmp    eax,0x61417272
c000264c:	75 1c                	jne    c000266a <mount_volume+0x2d2>
c000264e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002654:	e8 d3 f6 ff ff       	call   c0001d2c <ld_dword>
c0002659:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000265c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002662:	e8 c5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000266a:	66 a1 80 24 02 c0    	mov    ax,ds:0xc0022480
c0002670:	88 1e                	mov    BYTE PTR [esi],bl
c0002672:	40                   	inc    eax
c0002673:	31 db                	xor    ebx,ebx
c0002675:	66 a3 80 24 02 c0    	mov    ds:0xc0022480,ax
c000267b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000267f:	eb 10                	jmp    c0002691 <mount_volume+0x2f9>
c0002681:	31 db                	xor    ebx,ebx
c0002683:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002688:	0f 97 c3             	seta   bl
c000268b:	43                   	inc    ebx
c000268c:	e9 d6 fe ff ff       	jmp    c0002567 <mount_volume+0x1cf>
c0002691:	83 c4 2c             	add    esp,0x2c
c0002694:	89 d8                	mov    eax,ebx
c0002696:	5b                   	pop    ebx
c0002697:	5e                   	pop    esi
c0002698:	5f                   	pop    edi
c0002699:	5d                   	pop    ebp
c000269a:	c3                   	ret    

c000269b <put_fat>:
c000269b:	55                   	push   ebp
c000269c:	bd 02 00 00 00       	mov    ebp,0x2
c00026a1:	57                   	push   edi
c00026a2:	56                   	push   esi
c00026a3:	53                   	push   ebx
c00026a4:	83 ec 1c             	sub    esp,0x1c
c00026a7:	83 fa 01             	cmp    edx,0x1
c00026aa:	0f 86 31 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026b3:	0f 86 28 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b9:	89 c6                	mov    esi,eax
c00026bb:	89 cf                	mov    edi,ecx
c00026bd:	8a 00                	mov    al,BYTE PTR [eax]
c00026bf:	89 d3                	mov    ebx,edx
c00026c1:	3c 02                	cmp    al,0x2
c00026c3:	0f 84 ac 00 00 00    	je     c0002775 <put_fat+0xda>
c00026c9:	3c 03                	cmp    al,0x3
c00026cb:	0f 84 d1 00 00 00    	je     c00027a2 <put_fat+0x107>
c00026d1:	fe c8                	dec    al
c00026d3:	0f 85 08 01 00 00    	jne    c00027e1 <put_fat+0x146>
c00026d9:	89 d1                	mov    ecx,edx
c00026db:	89 f0                	mov    eax,esi
c00026dd:	d1 e9                	shr    ecx,1
c00026df:	01 d1                	add    ecx,edx
c00026e1:	89 ca                	mov    edx,ecx
c00026e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026e7:	c1 ea 09             	shr    edx,0x9
c00026ea:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026ed:	e8 53 fb ff ff       	call   c0002245 <move_window>
c00026f2:	89 c5                	mov    ebp,eax
c00026f4:	85 c0                	test   eax,eax
c00026f6:	0f 85 e5 00 00 00    	jne    c00027e1 <put_fat+0x146>
c00026fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002700:	8d 46 34             	lea    eax,[esi+0x34]
c0002703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002707:	8d 41 01             	lea    eax,[ecx+0x1]
c000270a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002714:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002718:	89 f8                	mov    eax,edi
c000271a:	83 e3 01             	and    ebx,0x1
c000271d:	74 0c                	je     c000272b <put_fat+0x90>
c000271f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002721:	89 f8                	mov    eax,edi
c0002723:	83 e2 0f             	and    edx,0xf
c0002726:	c1 e0 04             	shl    eax,0x4
c0002729:	09 d0                	or     eax,edx
c000272b:	88 01                	mov    BYTE PTR [ecx],al
c000272d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002731:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002735:	c1 ea 09             	shr    edx,0x9
c0002738:	89 f0                	mov    eax,esi
c000273a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000273d:	e8 03 fb ff ff       	call   c0002245 <move_window>
c0002742:	89 c5                	mov    ebp,eax
c0002744:	85 c0                	test   eax,eax
c0002746:	0f 85 95 00 00 00    	jne    c00027e1 <put_fat+0x146>
c000274c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002750:	25 ff 01 00 00       	and    eax,0x1ff
c0002755:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002759:	85 db                	test   ebx,ebx
c000275b:	74 07                	je     c0002764 <put_fat+0xc9>
c000275d:	c1 ef 04             	shr    edi,0x4
c0002760:	89 f9                	mov    ecx,edi
c0002762:	eb 0d                	jmp    c0002771 <put_fat+0xd6>
c0002764:	8a 08                	mov    cl,BYTE PTR [eax]
c0002766:	c1 ef 08             	shr    edi,0x8
c0002769:	83 e1 f0             	and    ecx,0xfffffff0
c000276c:	83 e7 0f             	and    edi,0xf
c000276f:	09 f9                	or     ecx,edi
c0002771:	88 08                	mov    BYTE PTR [eax],cl
c0002773:	eb 27                	jmp    c000279c <put_fat+0x101>
c0002775:	c1 ea 08             	shr    edx,0x8
c0002778:	89 f0                	mov    eax,esi
c000277a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000277d:	e8 c3 fa ff ff       	call   c0002245 <move_window>
c0002782:	89 c5                	mov    ebp,eax
c0002784:	85 c0                	test   eax,eax
c0002786:	75 59                	jne    c00027e1 <put_fat+0x146>
c0002788:	01 db                	add    ebx,ebx
c000278a:	0f b7 d7             	movzx  edx,di
c000278d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002793:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002797:	e8 a8 f5 ff ff       	call   c0001d44 <st_word>
c000279c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027a0:	eb 3f                	jmp    c00027e1 <put_fat+0x146>
c00027a2:	c1 ea 07             	shr    edx,0x7
c00027a5:	89 f0                	mov    eax,esi
c00027a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027aa:	e8 96 fa ff ff       	call   c0002245 <move_window>
c00027af:	89 c5                	mov    ebp,eax
c00027b1:	85 c0                	test   eax,eax
c00027b3:	75 2c                	jne    c00027e1 <put_fat+0x146>
c00027b5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027bb:	c1 e3 02             	shl    ebx,0x2
c00027be:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027c4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 5d f5 ff ff       	call   c0001d2c <ld_dword>
c00027cf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027d4:	09 f8                	or     eax,edi
c00027d6:	89 c2                	mov    edx,eax
c00027d8:	89 d8                	mov    eax,ebx
c00027da:	e8 69 f5 ff ff       	call   c0001d48 <st_dword>
c00027df:	eb bb                	jmp    c000279c <put_fat+0x101>
c00027e1:	83 c4 1c             	add    esp,0x1c
c00027e4:	89 e8                	mov    eax,ebp
c00027e6:	5b                   	pop    ebx
c00027e7:	5e                   	pop    esi
c00027e8:	5f                   	pop    edi
c00027e9:	5d                   	pop    ebp
c00027ea:	c3                   	ret    

c00027eb <dir_clear>:
c00027eb:	55                   	push   ebp
c00027ec:	57                   	push   edi
c00027ed:	56                   	push   esi
c00027ee:	89 c6                	mov    esi,eax
c00027f0:	53                   	push   ebx
c00027f1:	83 ec 1c             	sub    esp,0x1c
c00027f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027f8:	e8 e5 f9 ff ff       	call   c00021e2 <sync_window>
c00027fd:	85 c0                	test   eax,eax
c00027ff:	0f 85 c0 00 00 00    	jne    c00028c5 <dir_clear+0xda>
c0002805:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002809:	89 f0                	mov    eax,esi
c000280b:	e8 55 f7 ff ff       	call   c0001f65 <clst2sect>
c0002810:	31 d2                	xor    edx,edx
c0002812:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002815:	89 c5                	mov    ebp,eax
c0002817:	b9 00 02 00 00       	mov    ecx,0x200
c000281c:	8d 46 34             	lea    eax,[esi+0x34]
c000281f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002823:	e8 38 f5 ff ff       	call   c0001d60 <mem_set>
c0002828:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000282c:	c1 e3 09             	shl    ebx,0x9
c000282f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002835:	76 1b                	jbe    c0002852 <dir_clear+0x67>
c0002837:	bb 00 80 00 00       	mov    ebx,0x8000
c000283c:	eb 14                	jmp    c0002852 <dir_clear+0x67>
c000283e:	83 ec 0c             	sub    esp,0xc
c0002841:	53                   	push   ebx
c0002842:	e8 25 32 00 00       	call   c0005a6c <ff_memalloc>
c0002847:	83 c4 10             	add    esp,0x10
c000284a:	89 c7                	mov    edi,eax
c000284c:	85 c0                	test   eax,eax
c000284e:	75 7c                	jne    c00028cc <dir_clear+0xe1>
c0002850:	d1 eb                	shr    ebx,1
c0002852:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002858:	77 e4                	ja     c000283e <dir_clear+0x53>
c000285a:	31 db                	xor    ebx,ebx
c000285c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002860:	39 d8                	cmp    eax,ebx
c0002862:	76 53                	jbe    c00028b7 <dir_clear+0xcc>
c0002864:	6a 01                	push   0x1
c0002866:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002869:	50                   	push   eax
c000286a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000286e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002872:	50                   	push   eax
c0002873:	e8 72 f4 ff ff       	call   c0001cea <disk_write>
c0002878:	83 c4 10             	add    esp,0x10
c000287b:	85 c0                	test   eax,eax
c000287d:	75 38                	jne    c00028b7 <dir_clear+0xcc>
c000287f:	43                   	inc    ebx
c0002880:	eb da                	jmp    c000285c <dir_clear+0x71>
c0002882:	52                   	push   edx
c0002883:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002886:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000288a:	50                   	push   eax
c000288b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288f:	57                   	push   edi
c0002890:	50                   	push   eax
c0002891:	e8 54 f4 ff ff       	call   c0001cea <disk_write>
c0002896:	83 c4 10             	add    esp,0x10
c0002899:	85 c0                	test   eax,eax
c000289b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000289f:	75 0a                	jne    c00028ab <dir_clear+0xc0>
c00028a1:	01 d3                	add    ebx,edx
c00028a3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028a7:	39 d8                	cmp    eax,ebx
c00028a9:	77 d7                	ja     c0002882 <dir_clear+0x97>
c00028ab:	83 ec 0c             	sub    esp,0xc
c00028ae:	57                   	push   edi
c00028af:	e8 d0 31 00 00       	call   c0005a84 <ff_memfree>
c00028b4:	83 c4 10             	add    esp,0x10
c00028b7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028bb:	39 d8                	cmp    eax,ebx
c00028bd:	0f 95 c0             	setne  al
c00028c0:	0f b6 c0             	movzx  eax,al
c00028c3:	eb 19                	jmp    c00028de <dir_clear+0xf3>
c00028c5:	b8 01 00 00 00       	mov    eax,0x1
c00028ca:	eb 12                	jmp    c00028de <dir_clear+0xf3>
c00028cc:	89 d9                	mov    ecx,ebx
c00028ce:	31 d2                	xor    edx,edx
c00028d0:	e8 8b f4 ff ff       	call   c0001d60 <mem_set>
c00028d5:	89 da                	mov    edx,ebx
c00028d7:	31 db                	xor    ebx,ebx
c00028d9:	c1 ea 09             	shr    edx,0x9
c00028dc:	eb c5                	jmp    c00028a3 <dir_clear+0xb8>
c00028de:	83 c4 1c             	add    esp,0x1c
c00028e1:	5b                   	pop    ebx
c00028e2:	5e                   	pop    esi
c00028e3:	5f                   	pop    edi
c00028e4:	5d                   	pop    ebp
c00028e5:	c3                   	ret    

c00028e6 <create_name>:
c00028e6:	55                   	push   ebp
c00028e7:	89 d5                	mov    ebp,edx
c00028e9:	57                   	push   edi
c00028ea:	89 c7                	mov    edi,eax
c00028ec:	56                   	push   esi
c00028ed:	31 f6                	xor    esi,esi
c00028ef:	53                   	push   ebx
c00028f0:	83 ec 3c             	sub    esp,0x3c
c00028f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002902:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002906:	e8 9b f4 ff ff       	call   c0001da6 <tchar2uni>
c000290b:	89 c3                	mov    ebx,eax
c000290d:	83 f8 ff             	cmp    eax,0xffffffff
c0002910:	75 0a                	jne    c000291c <create_name+0x36>
c0002912:	b8 06 00 00 00       	mov    eax,0x6
c0002917:	e9 9e 02 00 00       	jmp    c0002bba <create_name+0x2d4>
c000291c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002921:	76 0c                	jbe    c000292f <create_name+0x49>
c0002923:	c1 e8 10             	shr    eax,0x10
c0002926:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000292a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000292e:	46                   	inc    esi
c000292f:	66 83 fb 1f          	cmp    bx,0x1f
c0002933:	76 4f                	jbe    c0002984 <create_name+0x9e>
c0002935:	66 83 fb 5c          	cmp    bx,0x5c
c0002939:	74 35                	je     c0002970 <create_name+0x8a>
c000293b:	66 83 fb 2f          	cmp    bx,0x2f
c000293f:	74 2f                	je     c0002970 <create_name+0x8a>
c0002941:	66 83 fb 7f          	cmp    bx,0x7f
c0002945:	77 11                	ja     c0002958 <create_name+0x72>
c0002947:	0f b7 d3             	movzx  edx,bx
c000294a:	b8 22 d7 01 c0       	mov    eax,0xc001d722
c000294f:	e8 3a f4 ff ff       	call   c0001d8e <chk_chr>
c0002954:	85 c0                	test   eax,eax
c0002956:	75 ba                	jne    c0002912 <create_name+0x2c>
c0002958:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000295e:	77 b2                	ja     c0002912 <create_name+0x2c>
c0002960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002964:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002968:	46                   	inc    esi
c0002969:	eb 97                	jmp    c0002902 <create_name+0x1c>
c000296b:	40                   	inc    eax
c000296c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002970:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002974:	8a 10                	mov    dl,BYTE PTR [eax]
c0002976:	80 fa 2f             	cmp    dl,0x2f
c0002979:	74 f0                	je     c000296b <create_name+0x85>
c000297b:	80 fa 5c             	cmp    dl,0x5c
c000297e:	74 eb                	je     c000296b <create_name+0x85>
c0002980:	31 db                	xor    ebx,ebx
c0002982:	eb 02                	jmp    c0002986 <create_name+0xa0>
c0002984:	b3 04                	mov    bl,0x4
c0002986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000298a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000298d:	85 f6                	test   esi,esi
c000298f:	74 18                	je     c00029a9 <create_name+0xc3>
c0002991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002995:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000299a:	66 83 f8 20          	cmp    ax,0x20
c000299e:	74 06                	je     c00029a6 <create_name+0xc0>
c00029a0:	66 83 f8 2e          	cmp    ax,0x2e
c00029a4:	75 03                	jne    c00029a9 <create_name+0xc3>
c00029a6:	4e                   	dec    esi
c00029a7:	eb e4                	jmp    c000298d <create_name+0xa7>
c00029a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ad:	31 ed                	xor    ebp,ebp
c00029af:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029b5:	85 f6                	test   esi,esi
c00029b7:	0f 84 55 ff ff ff    	je     c0002912 <create_name+0x2c>
c00029bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029c1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029c4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029c8:	66 83 f8 20          	cmp    ax,0x20
c00029cc:	75 04                	jne    c00029d2 <create_name+0xec>
c00029ce:	89 d5                	mov    ebp,edx
c00029d0:	eb eb                	jmp    c00029bd <create_name+0xd7>
c00029d2:	85 ed                	test   ebp,ebp
c00029d4:	75 06                	jne    c00029dc <create_name+0xf6>
c00029d6:	66 83 f8 2e          	cmp    ax,0x2e
c00029da:	75 08                	jne    c00029e4 <create_name+0xfe>
c00029dc:	83 cb 03             	or     ebx,0x3
c00029df:	eb 03                	jmp    c00029e4 <create_name+0xfe>
c00029e1:	4e                   	dec    esi
c00029e2:	74 0c                	je     c00029f0 <create_name+0x10a>
c00029e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029ee:	75 f1                	jne    c00029e1 <create_name+0xfb>
c00029f0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029f5:	8d 47 20             	lea    eax,[edi+0x20]
c00029f8:	ba 20 00 00 00       	mov    edx,0x20
c00029fd:	e8 5e f3 ff ff       	call   c0001d60 <mem_set>
c0002a02:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a0a:	31 c9                	xor    ecx,ecx
c0002a0c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a11:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a1c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a20:	66 85 ed             	test   bp,bp
c0002a23:	0f 84 30 01 00 00    	je     c0002b59 <create_name+0x273>
c0002a29:	66 83 fd 20          	cmp    bp,0x20
c0002a2d:	74 10                	je     c0002a3f <create_name+0x159>
c0002a2f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a33:	75 13                	jne    c0002a48 <create_name+0x162>
c0002a35:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a39:	0f 84 6b 01 00 00    	je     c0002baa <create_name+0x2c4>
c0002a3f:	83 cb 03             	or     ebx,0x3
c0002a42:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a46:	eb c9                	jmp    c0002a11 <create_name+0x12b>
c0002a48:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a4c:	73 0b                	jae    c0002a59 <create_name+0x173>
c0002a4e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a52:	75 47                	jne    c0002a9b <create_name+0x1b5>
c0002a54:	e9 51 01 00 00       	jmp    c0002baa <create_name+0x2c4>
c0002a59:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a5e:	75 10                	jne    c0002a70 <create_name+0x18a>
c0002a60:	83 cb 03             	or     ebx,0x3
c0002a63:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a6b:	e9 e9 00 00 00       	jmp    c0002b59 <create_name+0x273>
c0002a70:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a74:	74 0d                	je     c0002a83 <create_name+0x19d>
c0002a76:	83 cb 03             	or     ebx,0x3
c0002a79:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a7d:	0f 87 d6 00 00 00    	ja     c0002b59 <create_name+0x273>
c0002a83:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a88:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a8c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a94:	b9 08 00 00 00       	mov    ecx,0x8
c0002a99:	eb a7                	jmp    c0002a42 <create_name+0x15c>
c0002a9b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a9f:	76 68                	jbe    c0002b09 <create_name+0x223>
c0002aa1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002aa5:	88 da                	mov    dl,bl
c0002aa7:	83 ca 02             	or     edx,0x2
c0002aaa:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002aae:	50                   	push   eax
c0002aaf:	50                   	push   eax
c0002ab0:	68 b5 01 00 00       	push   0x1b5
c0002ab5:	55                   	push   ebp
c0002ab6:	e8 e1 2f 00 00       	call   c0005a9c <ff_uni2oem>
c0002abb:	83 c4 10             	add    esp,0x10
c0002abe:	89 c5                	mov    ebp,eax
c0002ac0:	a8 80                	test   al,0x80
c0002ac2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ac6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aca:	74 0c                	je     c0002ad8 <create_name+0x1f2>
c0002acc:	83 e5 7f             	and    ebp,0x7f
c0002acf:	0f b6 ad e0 d7 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe2820]
c0002ad6:	eb 2a                	jmp    c0002b02 <create_name+0x21c>
c0002ad8:	66 3d ff 00          	cmp    ax,0xff
c0002adc:	76 24                	jbe    c0002b02 <create_name+0x21c>
c0002ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae2:	48                   	dec    eax
c0002ae3:	39 c8                	cmp    eax,ecx
c0002ae5:	77 0c                	ja     c0002af3 <create_name+0x20d>
c0002ae7:	83 cb 03             	or     ebx,0x3
c0002aea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002aee:	e9 4f ff ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002af3:	89 e8                	mov    eax,ebp
c0002af5:	88 d3                	mov    bl,dl
c0002af7:	66 c1 e8 08          	shr    ax,0x8
c0002afb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aff:	41                   	inc    ecx
c0002b00:	eb 4b                	jmp    c0002b4d <create_name+0x267>
c0002b02:	88 d3                	mov    bl,dl
c0002b04:	66 85 ed             	test   bp,bp
c0002b07:	74 19                	je     c0002b22 <create_name+0x23c>
c0002b09:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b0d:	0f b7 d5             	movzx  edx,bp
c0002b10:	b8 2b d7 01 c0       	mov    eax,0xc001d72b
c0002b15:	e8 74 f2 ff ff       	call   c0001d8e <chk_chr>
c0002b1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1e:	85 c0                	test   eax,eax
c0002b20:	74 0a                	je     c0002b2c <create_name+0x246>
c0002b22:	83 cb 03             	or     ebx,0x3
c0002b25:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b2a:	eb 21                	jmp    c0002b4d <create_name+0x267>
c0002b2c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 07                	ja     c0002b3c <create_name+0x256>
c0002b35:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b3a:	eb 11                	jmp    c0002b4d <create_name+0x267>
c0002b3c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b3f:	66 83 f8 19          	cmp    ax,0x19
c0002b43:	77 08                	ja     c0002b4d <create_name+0x267>
c0002b45:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b4a:	83 ed 20             	sub    ebp,0x20
c0002b4d:	89 e8                	mov    eax,ebp
c0002b4f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b53:	41                   	inc    ecx
c0002b54:	e9 e9 fe ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002b59:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b5d:	75 04                	jne    c0002b63 <create_name+0x27d>
c0002b5f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b63:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b68:	75 05                	jne    c0002b6f <create_name+0x289>
c0002b6a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b6f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b73:	83 e0 0c             	and    eax,0xc
c0002b76:	3c 0c                	cmp    al,0xc
c0002b78:	74 0b                	je     c0002b85 <create_name+0x29f>
c0002b7a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b7e:	83 e0 03             	and    eax,0x3
c0002b81:	3c 03                	cmp    al,0x3
c0002b83:	75 05                	jne    c0002b8a <create_name+0x2a4>
c0002b85:	83 cb 02             	or     ebx,0x2
c0002b88:	eb 19                	jmp    c0002ba3 <create_name+0x2bd>
c0002b8a:	f6 c3 02             	test   bl,0x2
c0002b8d:	75 14                	jne    c0002ba3 <create_name+0x2bd>
c0002b8f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b94:	74 03                	je     c0002b99 <create_name+0x2b3>
c0002b96:	83 cb 10             	or     ebx,0x10
c0002b99:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b9e:	74 03                	je     c0002ba3 <create_name+0x2bd>
c0002ba0:	83 cb 08             	or     ebx,0x8
c0002ba3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002ba6:	31 c0                	xor    eax,eax
c0002ba8:	eb 10                	jmp    c0002bba <create_name+0x2d4>
c0002baa:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002baf:	0f 85 ce fe ff ff    	jne    c0002a83 <create_name+0x19d>
c0002bb5:	e9 a6 fe ff ff       	jmp    c0002a60 <create_name+0x17a>
c0002bba:	83 c4 3c             	add    esp,0x3c
c0002bbd:	5b                   	pop    ebx
c0002bbe:	5e                   	pop    esi
c0002bbf:	5f                   	pop    edi
c0002bc0:	5d                   	pop    ebp
c0002bc1:	c3                   	ret    

c0002bc2 <cmp_lfn>:
c0002bc2:	55                   	push   ebp
c0002bc3:	57                   	push   edi
c0002bc4:	89 d7                	mov    edi,edx
c0002bc6:	56                   	push   esi
c0002bc7:	53                   	push   ebx
c0002bc8:	83 ec 1c             	sub    esp,0x1c
c0002bcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bcf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bd2:	e8 48 f1 ff ff       	call   c0001d1f <ld_word>
c0002bd7:	66 85 c0             	test   ax,ax
c0002bda:	74 07                	je     c0002be3 <cmp_lfn+0x21>
c0002bdc:	31 c0                	xor    eax,eax
c0002bde:	e9 9a 00 00 00       	jmp    c0002c7d <cmp_lfn+0xbb>
c0002be3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002be5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bea:	83 e3 3f             	and    ebx,0x3f
c0002bed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002bf5:	4b                   	dec    ebx
c0002bf6:	6b db 0d             	imul   ebx,ebx,0xd
c0002bf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bfd:	0f b6 80 60 d8 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe27a0]
c0002c04:	01 f8                	add    eax,edi
c0002c06:	e8 14 f1 ff ff       	call   c0001d1f <ld_word>
c0002c0b:	66 85 ed             	test   bp,bp
c0002c0e:	89 c6                	mov    esi,eax
c0002c10:	74 3c                	je     c0002c4e <cmp_lfn+0x8c>
c0002c12:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c18:	77 c2                	ja     c0002bdc <cmp_lfn+0x1a>
c0002c1a:	83 ec 0c             	sub    esp,0xc
c0002c1d:	0f b7 c0             	movzx  eax,ax
c0002c20:	50                   	push   eax
c0002c21:	e8 8e 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c26:	89 c5                	mov    ebp,eax
c0002c28:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c33:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c3a:	e8 75 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c3f:	83 c4 10             	add    esp,0x10
c0002c42:	39 c5                	cmp    ebp,eax
c0002c44:	75 96                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c46:	89 f5                	mov    ebp,esi
c0002c48:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c4c:	eb 04                	jmp    c0002c52 <cmp_lfn+0x90>
c0002c4e:	66 46                	inc    si
c0002c50:	75 8a                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c52:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c56:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c5b:	75 9c                	jne    c0002bf9 <cmp_lfn+0x37>
c0002c5d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c60:	74 16                	je     c0002c78 <cmp_lfn+0xb6>
c0002c62:	66 85 ed             	test   bp,bp
c0002c65:	74 11                	je     c0002c78 <cmp_lfn+0xb6>
c0002c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c6b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c70:	0f 94 c0             	sete   al
c0002c73:	0f b6 c0             	movzx  eax,al
c0002c76:	eb 05                	jmp    c0002c7d <cmp_lfn+0xbb>
c0002c78:	b8 01 00 00 00       	mov    eax,0x1
c0002c7d:	83 c4 1c             	add    esp,0x1c
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <sync_fs>:
c0002c85:	56                   	push   esi
c0002c86:	53                   	push   ebx
c0002c87:	53                   	push   ebx
c0002c88:	89 c3                	mov    ebx,eax
c0002c8a:	e8 53 f5 ff ff       	call   c00021e2 <sync_window>
c0002c8f:	85 c0                	test   eax,eax
c0002c91:	0f 85 9a 00 00 00    	jne    c0002d31 <sync_fs+0xac>
c0002c97:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c9a:	75 7b                	jne    c0002d17 <sync_fs+0x92>
c0002c9c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002ca0:	75 75                	jne    c0002d17 <sync_fs+0x92>
c0002ca2:	b9 00 02 00 00       	mov    ecx,0x200
c0002ca7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002caa:	31 d2                	xor    edx,edx
c0002cac:	89 f0                	mov    eax,esi
c0002cae:	e8 ad f0 ff ff       	call   c0001d60 <mem_set>
c0002cb3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cbe:	e8 81 f0 ff ff       	call   c0001d44 <st_word>
c0002cc3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	e8 79 f0 ff ff       	call   c0001d48 <st_dword>
c0002ccf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cd5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cda:	e8 69 f0 ff ff       	call   c0001d48 <st_dword>
c0002cdf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002ce2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002ce8:	e8 5b f0 ff ff       	call   c0001d48 <st_dword>
c0002ced:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002cf0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002cf6:	e8 4d f0 ff ff       	call   c0001d48 <st_dword>
c0002cfb:	6a 01                	push   0x1
c0002cfd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d00:	40                   	inc    eax
c0002d01:	50                   	push   eax
c0002d02:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d05:	56                   	push   esi
c0002d06:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0a:	50                   	push   eax
c0002d0b:	e8 da ef ff ff       	call   c0001cea <disk_write>
c0002d10:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d14:	83 c4 10             	add    esp,0x10
c0002d17:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d1b:	51                   	push   ecx
c0002d1c:	6a 00                	push   0x0
c0002d1e:	6a 00                	push   0x0
c0002d20:	50                   	push   eax
c0002d21:	e8 da ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d26:	83 c4 10             	add    esp,0x10
c0002d29:	85 c0                	test   eax,eax
c0002d2b:	0f 95 c0             	setne  al
c0002d2e:	0f b6 c0             	movzx  eax,al
c0002d31:	5a                   	pop    edx
c0002d32:	5b                   	pop    ebx
c0002d33:	5e                   	pop    esi
c0002d34:	c3                   	ret    

c0002d35 <create_partition>:
c0002d35:	55                   	push   ebp
c0002d36:	0f b6 c0             	movzx  eax,al
c0002d39:	57                   	push   edi
c0002d3a:	56                   	push   esi
c0002d3b:	53                   	push   ebx
c0002d3c:	83 ec 40             	sub    esp,0x40
c0002d3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d47:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d4b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d4f:	50                   	push   eax
c0002d50:	6a 01                	push   0x1
c0002d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d56:	e8 a5 ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d5b:	83 c4 10             	add    esp,0x10
c0002d5e:	85 c0                	test   eax,eax
c0002d60:	0f 85 69 01 00 00    	jne    c0002ecf <create_partition+0x19a>
c0002d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d6a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d73:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d78:	31 d2                	xor    edx,edx
c0002d7a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d83:	f7 f3                	div    ebx
c0002d85:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d8a:	76 0c                	jbe    c0002d98 <create_partition+0x63>
c0002d8c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d90:	49                   	dec    ecx
c0002d91:	75 e5                	jne    c0002d78 <create_partition+0x43>
c0002d93:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d98:	b9 00 02 00 00       	mov    ecx,0x200
c0002d9d:	31 d2                	xor    edx,edx
c0002d9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002da3:	e8 b8 ef ff ff       	call   c0001d60 <mem_set>
c0002da8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002db1:	31 d2                	xor    edx,edx
c0002db3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dbb:	f7 f1                	div    ecx
c0002dbd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002dc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002dc6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dca:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dd0:	85 c9                	test   ecx,ecx
c0002dd2:	75 34                	jne    c0002e08 <create_partition+0xd3>
c0002dd4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dd8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ddd:	05 fe 01 00 00       	add    eax,0x1fe
c0002de2:	e8 5d ef ff ff       	call   c0001d44 <st_word>
c0002de7:	6a 01                	push   0x1
c0002de9:	6a 00                	push   0x0
c0002deb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002df3:	e8 f2 ee ff ff       	call   c0001cea <disk_write>
c0002df8:	83 c4 10             	add    esp,0x10
c0002dfb:	85 c0                	test   eax,eax
c0002dfd:	0f 95 c0             	setne  al
c0002e00:	0f b6 c0             	movzx  eax,al
c0002e03:	e9 cc 00 00 00       	jmp    c0002ed4 <create_partition+0x19f>
c0002e08:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e0c:	76 c6                	jbe    c0002dd4 <create_partition+0x9f>
c0002e0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e12:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e16:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e19:	83 fe 64             	cmp    esi,0x64
c0002e1c:	77 0d                	ja     c0002e2b <create_partition+0xf6>
c0002e1e:	74 07                	je     c0002e27 <create_partition+0xf2>
c0002e20:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e25:	eb 04                	jmp    c0002e2b <create_partition+0xf6>
c0002e27:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e2b:	31 c0                	xor    eax,eax
c0002e2d:	89 f2                	mov    edx,esi
c0002e2f:	01 ca                	add    edx,ecx
c0002e31:	0f 92 c0             	setb   al
c0002e34:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e38:	77 04                	ja     c0002e3e <create_partition+0x109>
c0002e3a:	85 c0                	test   eax,eax
c0002e3c:	74 08                	je     c0002e46 <create_partition+0x111>
c0002e3e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e42:	29 ce                	sub    esi,ecx
c0002e44:	eb 04                	jmp    c0002e4a <create_partition+0x115>
c0002e46:	85 f6                	test   esi,esi
c0002e48:	74 8a                	je     c0002dd4 <create_partition+0x9f>
c0002e4a:	89 ca                	mov    edx,ecx
c0002e4c:	89 d8                	mov    eax,ebx
c0002e4e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e53:	e8 f0 ee ff ff       	call   c0001d48 <st_dword>
c0002e58:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e5b:	89 f2                	mov    edx,esi
c0002e5d:	83 c3 10             	add    ebx,0x10
c0002e60:	e8 e3 ee ff ff       	call   c0001d48 <st_dword>
c0002e65:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e6a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e73:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e77:	89 c8                	mov    eax,ecx
c0002e79:	01 f1                	add    ecx,esi
c0002e7b:	f7 f5                	div    ebp
c0002e7d:	89 d5                	mov    ebp,edx
c0002e7f:	31 d2                	xor    edx,edx
c0002e81:	45                   	inc    ebp
c0002e82:	f7 f7                	div    edi
c0002e84:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e87:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e8a:	89 c2                	mov    edx,eax
c0002e8c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e8f:	c1 ea 02             	shr    edx,0x2
c0002e92:	83 e2 c0             	and    edx,0xffffffc0
c0002e95:	09 ea                	or     edx,ebp
c0002e97:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e9c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	f7 f5                	div    ebp
c0002ea3:	89 d6                	mov    esi,edx
c0002ea5:	31 d2                	xor    edx,edx
c0002ea7:	46                   	inc    esi
c0002ea8:	f7 f7                	div    edi
c0002eaa:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ead:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002eb0:	89 c7                	mov    edi,eax
c0002eb2:	c1 ef 02             	shr    edi,0x2
c0002eb5:	83 e7 c0             	and    edi,0xffffffc0
c0002eb8:	09 fe                	or     esi,edi
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002ebf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ec4:	0f 85 06 ff ff ff    	jne    c0002dd0 <create_partition+0x9b>
c0002eca:	e9 05 ff ff ff       	jmp    c0002dd4 <create_partition+0x9f>
c0002ecf:	b8 01 00 00 00       	mov    eax,0x1
c0002ed4:	83 c4 3c             	add    esp,0x3c
c0002ed7:	5b                   	pop    ebx
c0002ed8:	5e                   	pop    esi
c0002ed9:	5f                   	pop    edi
c0002eda:	5d                   	pop    ebp
c0002edb:	c3                   	ret    

c0002edc <get_fileinfo>:
c0002edc:	55                   	push   ebp
c0002edd:	57                   	push   edi
c0002ede:	56                   	push   esi
c0002edf:	53                   	push   ebx
c0002ee0:	83 ec 1c             	sub    esp,0x1c
c0002ee3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ee5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ee9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002eed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ef1:	0f 84 c1 01 00 00    	je     c00030b8 <get_fileinfo+0x1dc>
c0002ef7:	89 d3                	mov    ebx,edx
c0002ef9:	89 c6                	mov    esi,eax
c0002efb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eff:	74 6a                	je     c0002f6b <get_fileinfo+0x8f>
c0002f01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f09:	31 ed                	xor    ebp,ebp
c0002f0b:	31 ff                	xor    edi,edi
c0002f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f18:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f1c:	66 85 d2             	test   dx,dx
c0002f1f:	74 3e                	je     c0002f5f <get_fileinfo+0x83>
c0002f21:	66 85 ed             	test   bp,bp
c0002f24:	75 0c                	jne    c0002f32 <get_fileinfo+0x56>
c0002f26:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f2c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f30:	76 22                	jbe    c0002f54 <get_fileinfo+0x78>
c0002f32:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f37:	89 e8                	mov    eax,ebp
c0002f39:	29 f9                	sub    ecx,edi
c0002f3b:	c1 e0 10             	shl    eax,0x10
c0002f3e:	09 d0                	or     eax,edx
c0002f40:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f44:	e8 23 ef ff ff       	call   c0001e6c <put_utf>
c0002f49:	84 c0                	test   al,al
c0002f4b:	74 10                	je     c0002f5d <get_fileinfo+0x81>
c0002f4d:	0f b6 c0             	movzx  eax,al
c0002f50:	31 d2                	xor    edx,edx
c0002f52:	01 c7                	add    edi,eax
c0002f54:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f59:	89 d5                	mov    ebp,edx
c0002f5b:	eb b0                	jmp    c0002f0d <get_fileinfo+0x31>
c0002f5d:	31 ff                	xor    edi,edi
c0002f5f:	66 85 ed             	test   bp,bp
c0002f62:	74 02                	je     c0002f66 <get_fileinfo+0x8a>
c0002f64:	31 ff                	xor    edi,edi
c0002f66:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f6b:	31 ff                	xor    edi,edi
c0002f6d:	31 c9                	xor    ecx,ecx
c0002f6f:	83 f9 0a             	cmp    ecx,0xa
c0002f72:	0f 87 ad 00 00 00    	ja     c0003025 <get_fileinfo+0x149>
c0002f78:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f7b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f7e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f82:	66 83 fa 20          	cmp    dx,0x20
c0002f86:	0f 84 92 00 00 00    	je     c000301e <get_fileinfo+0x142>
c0002f8c:	66 83 fa 05          	cmp    dx,0x5
c0002f90:	75 05                	jne    c0002f97 <get_fileinfo+0xbb>
c0002f92:	ba e5 00 00 00       	mov    edx,0xe5
c0002f97:	83 ff 0b             	cmp    edi,0xb
c0002f9a:	77 0b                	ja     c0002fa7 <get_fileinfo+0xcb>
c0002f9c:	83 fd 09             	cmp    ebp,0x9
c0002f9f:	75 06                	jne    c0002fa7 <get_fileinfo+0xcb>
c0002fa1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fa6:	47                   	inc    edi
c0002fa7:	0f b7 c2             	movzx  eax,dx
c0002faa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fae:	e8 ed ed ff ff       	call   c0001da0 <dbc_1st>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	74 2f                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fb7:	83 fd 08             	cmp    ebp,0x8
c0002fba:	74 2a                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fbc:	83 fd 0b             	cmp    ebp,0xb
c0002fbf:	74 25                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fc1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fc4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fc8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fcc:	e8 d2 ed ff ff       	call   c0001da3 <dbc_2nd>
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 11                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fd9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fde:	c1 e2 08             	shl    edx,0x8
c0002fe1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fe4:	09 c2                	or     edx,eax
c0002fe6:	0f b7 d2             	movzx  edx,dx
c0002fe9:	50                   	push   eax
c0002fea:	50                   	push   eax
c0002feb:	68 b5 01 00 00       	push   0x1b5
c0002ff0:	52                   	push   edx
c0002ff1:	e8 46 2b 00 00       	call   c0005b3c <ff_oem2uni>
c0002ff6:	83 c4 10             	add    esp,0x10
c0002ff9:	66 85 c0             	test   ax,ax
c0002ffc:	75 04                	jne    c0003002 <get_fileinfo+0x126>
c0002ffe:	31 ff                	xor    edi,edi
c0003000:	eb 23                	jmp    c0003025 <get_fileinfo+0x149>
c0003002:	b9 0c 00 00 00       	mov    ecx,0xc
c0003007:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000300b:	29 f9                	sub    ecx,edi
c000300d:	0f b7 c0             	movzx  eax,ax
c0003010:	e8 57 ee ff ff       	call   c0001e6c <put_utf>
c0003015:	84 c0                	test   al,al
c0003017:	74 e5                	je     c0002ffe <get_fileinfo+0x122>
c0003019:	0f b6 c0             	movzx  eax,al
c000301c:	01 c7                	add    edi,eax
c000301e:	89 e9                	mov    ecx,ebp
c0003020:	e9 4a ff ff ff       	jmp    c0002f6f <get_fileinfo+0x93>
c0003025:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000302a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000302e:	75 54                	jne    c0003084 <get_fileinfo+0x1a8>
c0003030:	85 ff                	test   edi,edi
c0003032:	75 0b                	jne    c000303f <get_fileinfo+0x163>
c0003034:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003038:	ba 01 00 00 00       	mov    edx,0x1
c000303d:	eb 33                	jmp    c0003072 <get_fileinfo+0x196>
c000303f:	b1 08                	mov    cl,0x8
c0003041:	31 d2                	xor    edx,edx
c0003043:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003049:	84 c0                	test   al,al
c000304b:	74 25                	je     c0003072 <get_fileinfo+0x196>
c000304d:	66 83 f8 2e          	cmp    ax,0x2e
c0003051:	74 16                	je     c0003069 <get_fileinfo+0x18d>
c0003053:	8d 78 bf             	lea    edi,[eax-0x41]
c0003056:	66 83 ff 19          	cmp    di,0x19
c000305a:	77 0f                	ja     c000306b <get_fileinfo+0x18f>
c000305c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000305f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003062:	74 07                	je     c000306b <get_fileinfo+0x18f>
c0003064:	83 c0 20             	add    eax,0x20
c0003067:	eb 02                	jmp    c000306b <get_fileinfo+0x18f>
c0003069:	b1 10                	mov    cl,0x10
c000306b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000306f:	42                   	inc    edx
c0003070:	eb d1                	jmp    c0003043 <get_fileinfo+0x167>
c0003072:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003077:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000307a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000307e:	75 04                	jne    c0003084 <get_fileinfo+0x1a8>
c0003080:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003084:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003087:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000308a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000308d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003090:	83 c0 1c             	add    eax,0x1c
c0003093:	e8 94 ec ff ff       	call   c0001d2c <ld_dword>
c0003098:	89 03                	mov    DWORD PTR [ebx],eax
c000309a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309d:	83 c0 16             	add    eax,0x16
c00030a0:	e8 7a ec ff ff       	call   c0001d1f <ld_word>
c00030a5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030a9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030ac:	83 c0 18             	add    eax,0x18
c00030af:	e8 6b ec ff ff       	call   c0001d1f <ld_word>
c00030b4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030b8:	83 c4 1c             	add    esp,0x1c
c00030bb:	5b                   	pop    ebx
c00030bc:	5e                   	pop    esi
c00030bd:	5f                   	pop    edi
c00030be:	5d                   	pop    ebp
c00030bf:	c3                   	ret    

c00030c0 <ld_clust.isra.0>:
c00030c0:	56                   	push   esi
c00030c1:	89 c6                	mov    esi,eax
c00030c3:	53                   	push   ebx
c00030c4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030c7:	89 d3                	mov    ebx,edx
c00030c9:	e8 51 ec ff ff       	call   c0001d1f <ld_word>
c00030ce:	0f b7 c8             	movzx  ecx,ax
c00030d1:	89 f0                	mov    eax,esi
c00030d3:	3c 03                	cmp    al,0x3
c00030d5:	75 0d                	jne    c00030e4 <ld_clust.isra.0+0x24>
c00030d7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030da:	e8 40 ec ff ff       	call   c0001d1f <ld_word>
c00030df:	c1 e0 10             	shl    eax,0x10
c00030e2:	09 c1                	or     ecx,eax
c00030e4:	89 c8                	mov    eax,ecx
c00030e6:	5b                   	pop    ebx
c00030e7:	5e                   	pop    esi
c00030e8:	c3                   	ret    

c00030e9 <st_clust.isra.1>:
c00030e9:	56                   	push   esi
c00030ea:	89 c6                	mov    esi,eax
c00030ec:	53                   	push   ebx
c00030ed:	89 d3                	mov    ebx,edx
c00030ef:	0f b7 d1             	movzx  edx,cx
c00030f2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030f5:	e8 4a ec ff ff       	call   c0001d44 <st_word>
c00030fa:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030fd:	75 0f                	jne    c000310e <st_clust.isra.1+0x25>
c00030ff:	c1 e9 10             	shr    ecx,0x10
c0003102:	8d 43 14             	lea    eax,[ebx+0x14]
c0003105:	89 ca                	mov    edx,ecx
c0003107:	5b                   	pop    ebx
c0003108:	5e                   	pop    esi
c0003109:	e9 36 ec ff ff       	jmp    c0001d44 <st_word>
c000310e:	5b                   	pop    ebx
c000310f:	5e                   	pop    esi
c0003110:	c3                   	ret    

c0003111 <get_fat.isra.2>:
c0003111:	b9 01 00 00 00       	mov    ecx,0x1
c0003116:	83 fa 01             	cmp    edx,0x1
c0003119:	0f 86 f1 00 00 00    	jbe    c0003210 <get_fat.isra.2+0xff>
c000311f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003122:	0f 83 e8 00 00 00    	jae    c0003210 <get_fat.isra.2+0xff>
c0003128:	55                   	push   ebp
c0003129:	57                   	push   edi
c000312a:	89 c7                	mov    edi,eax
c000312c:	56                   	push   esi
c000312d:	89 d6                	mov    esi,edx
c000312f:	53                   	push   ebx
c0003130:	83 ec 0c             	sub    esp,0xc
c0003133:	8a 00                	mov    al,BYTE PTR [eax]
c0003135:	3c 02                	cmp    al,0x2
c0003137:	74 78                	je     c00031b1 <get_fat.isra.2+0xa0>
c0003139:	3c 03                	cmp    al,0x3
c000313b:	0f 84 97 00 00 00    	je     c00031d8 <get_fat.isra.2+0xc7>
c0003141:	fe c8                	dec    al
c0003143:	0f 85 bd 00 00 00    	jne    c0003206 <get_fat.isra.2+0xf5>
c0003149:	89 d3                	mov    ebx,edx
c000314b:	89 f8                	mov    eax,edi
c000314d:	d1 eb                	shr    ebx,1
c000314f:	01 d3                	add    ebx,edx
c0003151:	89 da                	mov    edx,ebx
c0003153:	c1 ea 09             	shr    edx,0x9
c0003156:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003159:	e8 e7 f0 ff ff       	call   c0002245 <move_window>
c000315e:	85 c0                	test   eax,eax
c0003160:	74 08                	je     c000316a <get_fat.isra.2+0x59>
c0003162:	83 c9 ff             	or     ecx,0xffffffff
c0003165:	e9 9c 00 00 00       	jmp    c0003206 <get_fat.isra.2+0xf5>
c000316a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000316d:	89 f8                	mov    eax,edi
c000316f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003175:	89 ea                	mov    edx,ebp
c0003177:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000317b:	c1 ea 09             	shr    edx,0x9
c000317e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003181:	e8 bf f0 ff ff       	call   c0002245 <move_window>
c0003186:	85 c0                	test   eax,eax
c0003188:	75 d8                	jne    c0003162 <get_fat.isra.2+0x51>
c000318a:	0f b6 c3             	movzx  eax,bl
c000318d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003193:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003198:	c1 e3 08             	shl    ebx,0x8
c000319b:	09 c3                	or     ebx,eax
c000319d:	89 d9                	mov    ecx,ebx
c000319f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031a5:	83 e6 01             	and    esi,0x1
c00031a8:	74 5c                	je     c0003206 <get_fat.isra.2+0xf5>
c00031aa:	89 d9                	mov    ecx,ebx
c00031ac:	c1 e9 04             	shr    ecx,0x4
c00031af:	eb 55                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031b1:	c1 ea 08             	shr    edx,0x8
c00031b4:	89 f8                	mov    eax,edi
c00031b6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031b9:	e8 87 f0 ff ff       	call   c0002245 <move_window>
c00031be:	85 c0                	test   eax,eax
c00031c0:	75 a0                	jne    c0003162 <get_fat.isra.2+0x51>
c00031c2:	01 f6                	add    esi,esi
c00031c4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ca:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ce:	e8 4c eb ff ff       	call   c0001d1f <ld_word>
c00031d3:	0f b7 c8             	movzx  ecx,ax
c00031d6:	eb 2e                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031d8:	c1 ea 07             	shr    edx,0x7
c00031db:	89 f8                	mov    eax,edi
c00031dd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031e0:	e8 60 f0 ff ff       	call   c0002245 <move_window>
c00031e5:	85 c0                	test   eax,eax
c00031e7:	0f 85 75 ff ff ff    	jne    c0003162 <get_fat.isra.2+0x51>
c00031ed:	c1 e6 02             	shl    esi,0x2
c00031f0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031f6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031fa:	e8 2d eb ff ff       	call   c0001d2c <ld_dword>
c00031ff:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003204:	89 c1                	mov    ecx,eax
c0003206:	83 c4 0c             	add    esp,0xc
c0003209:	89 c8                	mov    eax,ecx
c000320b:	5b                   	pop    ebx
c000320c:	5e                   	pop    esi
c000320d:	5f                   	pop    edi
c000320e:	5d                   	pop    ebp
c000320f:	c3                   	ret    
c0003210:	89 c8                	mov    eax,ecx
c0003212:	c3                   	ret    

c0003213 <dir_sdi>:
c0003213:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003219:	0f 87 b6 00 00 00    	ja     c00032d5 <dir_sdi+0xc2>
c000321f:	55                   	push   ebp
c0003220:	57                   	push   edi
c0003221:	56                   	push   esi
c0003222:	53                   	push   ebx
c0003223:	89 d3                	mov    ebx,edx
c0003225:	83 ec 1c             	sub    esp,0x1c
c0003228:	f6 c2 1f             	test   dl,0x1f
c000322b:	74 0a                	je     c0003237 <dir_sdi+0x24>
c000322d:	b8 02 00 00 00       	mov    eax,0x2
c0003232:	e9 96 00 00 00       	jmp    c00032cd <dir_sdi+0xba>
c0003237:	89 c6                	mov    esi,eax
c0003239:	8b 38                	mov    edi,DWORD PTR [eax]
c000323b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000323e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003241:	85 c9                	test   ecx,ecx
c0003243:	75 23                	jne    c0003268 <dir_sdi+0x55>
c0003245:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003248:	76 07                	jbe    c0003251 <dir_sdi+0x3e>
c000324a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000324d:	85 c0                	test   eax,eax
c000324f:	75 15                	jne    c0003266 <dir_sdi+0x53>
c0003251:	89 da                	mov    edx,ebx
c0003253:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003257:	c1 ea 05             	shr    edx,0x5
c000325a:	39 c2                	cmp    edx,eax
c000325c:	73 cf                	jae    c000322d <dir_sdi+0x1a>
c000325e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003261:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003264:	eb 3d                	jmp    c00032a3 <dir_sdi+0x90>
c0003266:	89 c1                	mov    ecx,eax
c0003268:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000326c:	c1 e5 09             	shl    ebp,0x9
c000326f:	89 ca                	mov    edx,ecx
c0003271:	39 eb                	cmp    ebx,ebp
c0003273:	72 1c                	jb     c0003291 <dir_sdi+0x7e>
c0003275:	8b 06                	mov    eax,DWORD PTR [esi]
c0003277:	e8 95 fe ff ff       	call   c0003111 <get_fat.isra.2>
c000327c:	89 c1                	mov    ecx,eax
c000327e:	83 f8 ff             	cmp    eax,0xffffffff
c0003281:	74 45                	je     c00032c8 <dir_sdi+0xb5>
c0003283:	83 f8 01             	cmp    eax,0x1
c0003286:	76 a5                	jbe    c000322d <dir_sdi+0x1a>
c0003288:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000328b:	76 a0                	jbe    c000322d <dir_sdi+0x1a>
c000328d:	29 eb                	sub    ebx,ebp
c000328f:	eb de                	jmp    c000326f <dir_sdi+0x5c>
c0003291:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003295:	89 f8                	mov    eax,edi
c0003297:	e8 c9 ec ff ff       	call   c0001f65 <clst2sect>
c000329c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032a0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032a3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032a6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032a9:	85 d2                	test   edx,edx
c00032ab:	74 80                	je     c000322d <dir_sdi+0x1a>
c00032ad:	89 d8                	mov    eax,ebx
c00032af:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032b5:	c1 e8 09             	shr    eax,0x9
c00032b8:	01 d0                	add    eax,edx
c00032ba:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032bd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032c4:	31 c0                	xor    eax,eax
c00032c6:	eb 05                	jmp    c00032cd <dir_sdi+0xba>
c00032c8:	b8 01 00 00 00       	mov    eax,0x1
c00032cd:	83 c4 1c             	add    esp,0x1c
c00032d0:	5b                   	pop    ebx
c00032d1:	5e                   	pop    esi
c00032d2:	5f                   	pop    edi
c00032d3:	5d                   	pop    ebp
c00032d4:	c3                   	ret    
c00032d5:	b8 02 00 00 00       	mov    eax,0x2
c00032da:	c3                   	ret    

c00032db <create_chain>:
c00032db:	55                   	push   ebp
c00032dc:	89 c5                	mov    ebp,eax
c00032de:	57                   	push   edi
c00032df:	89 d7                	mov    edi,edx
c00032e1:	56                   	push   esi
c00032e2:	53                   	push   ebx
c00032e3:	83 ec 1c             	sub    esp,0x1c
c00032e6:	85 d2                	test   edx,edx
c00032e8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ea:	75 0e                	jne    c00032fa <create_chain+0x1f>
c00032ec:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032ef:	85 c9                	test   ecx,ecx
c00032f1:	74 34                	je     c0003327 <create_chain+0x4c>
c00032f3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032f6:	77 34                	ja     c000332c <create_chain+0x51>
c00032f8:	eb 2d                	jmp    c0003327 <create_chain+0x4c>
c00032fa:	89 f0                	mov    eax,esi
c00032fc:	e8 10 fe ff ff       	call   c0003111 <get_fat.isra.2>
c0003301:	89 c3                	mov    ebx,eax
c0003303:	83 f8 01             	cmp    eax,0x1
c0003306:	77 0a                	ja     c0003312 <create_chain+0x37>
c0003308:	bb 01 00 00 00       	mov    ebx,0x1
c000330d:	e9 f9 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003312:	83 f8 ff             	cmp    eax,0xffffffff
c0003315:	0f 84 ed 00 00 00    	je     c0003408 <create_chain+0x12d>
c000331b:	89 f9                	mov    ecx,edi
c000331d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003320:	76 0a                	jbe    c000332c <create_chain+0x51>
c0003322:	e9 e4 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003330:	75 07                	jne    c0003339 <create_chain+0x5e>
c0003332:	31 db                	xor    ebx,ebx
c0003334:	e9 d2 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003339:	39 f9                	cmp    ecx,edi
c000333b:	75 46                	jne    c0003383 <create_chain+0xa8>
c000333d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003340:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003343:	77 05                	ja     c000334a <create_chain+0x6f>
c0003345:	bb 02 00 00 00       	mov    ebx,0x2
c000334a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334e:	89 da                	mov    edx,ebx
c0003350:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003353:	e8 b9 fd ff ff       	call   c0003111 <get_fat.isra.2>
c0003358:	83 f8 01             	cmp    eax,0x1
c000335b:	74 ab                	je     c0003308 <create_chain+0x2d>
c000335d:	83 f8 ff             	cmp    eax,0xffffffff
c0003360:	0f 84 a2 00 00 00    	je     c0003408 <create_chain+0x12d>
c0003366:	85 c0                	test   eax,eax
c0003368:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336c:	74 11                	je     c000337f <create_chain+0xa4>
c000336e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003371:	83 f8 01             	cmp    eax,0x1
c0003374:	76 0d                	jbe    c0003383 <create_chain+0xa8>
c0003376:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003379:	73 08                	jae    c0003383 <create_chain+0xa8>
c000337b:	89 c1                	mov    ecx,eax
c000337d:	eb 04                	jmp    c0003383 <create_chain+0xa8>
c000337f:	85 db                	test   ebx,ebx
c0003381:	75 3d                	jne    c00033c0 <create_chain+0xe5>
c0003383:	89 cb                	mov    ebx,ecx
c0003385:	43                   	inc    ebx
c0003386:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003389:	77 0a                	ja     c0003395 <create_chain+0xba>
c000338b:	83 f9 01             	cmp    ecx,0x1
c000338e:	76 a2                	jbe    c0003332 <create_chain+0x57>
c0003390:	bb 02 00 00 00       	mov    ebx,0x2
c0003395:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003399:	89 da                	mov    edx,ebx
c000339b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000339e:	e8 6e fd ff ff       	call   c0003111 <get_fat.isra.2>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	74 19                	je     c00033c0 <create_chain+0xe5>
c00033a7:	83 f8 01             	cmp    eax,0x1
c00033aa:	0f 84 58 ff ff ff    	je     c0003308 <create_chain+0x2d>
c00033b0:	40                   	inc    eax
c00033b1:	74 55                	je     c0003408 <create_chain+0x12d>
c00033b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033b7:	39 cb                	cmp    ebx,ecx
c00033b9:	75 ca                	jne    c0003385 <create_chain+0xaa>
c00033bb:	e9 72 ff ff ff       	jmp    c0003332 <create_chain+0x57>
c00033c0:	83 c9 ff             	or     ecx,0xffffffff
c00033c3:	89 da                	mov    edx,ebx
c00033c5:	89 f0                	mov    eax,esi
c00033c7:	e8 cf f2 ff ff       	call   c000269b <put_fat>
c00033cc:	85 c0                	test   eax,eax
c00033ce:	75 31                	jne    c0003401 <create_chain+0x126>
c00033d0:	85 ff                	test   edi,edi
c00033d2:	75 16                	jne    c00033ea <create_chain+0x10f>
c00033d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033da:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033dd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033e0:	39 d0                	cmp    eax,edx
c00033e2:	77 17                	ja     c00033fb <create_chain+0x120>
c00033e4:	48                   	dec    eax
c00033e5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033e8:	eb 11                	jmp    c00033fb <create_chain+0x120>
c00033ea:	89 d9                	mov    ecx,ebx
c00033ec:	89 fa                	mov    edx,edi
c00033ee:	89 f0                	mov    eax,esi
c00033f0:	e8 a6 f2 ff ff       	call   c000269b <put_fat>
c00033f5:	85 c0                	test   eax,eax
c00033f7:	74 db                	je     c00033d4 <create_chain+0xf9>
c00033f9:	eb 06                	jmp    c0003401 <create_chain+0x126>
c00033fb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ff:	eb 0a                	jmp    c000340b <create_chain+0x130>
c0003401:	48                   	dec    eax
c0003402:	0f 85 00 ff ff ff    	jne    c0003308 <create_chain+0x2d>
c0003408:	83 cb ff             	or     ebx,0xffffffff
c000340b:	83 c4 1c             	add    esp,0x1c
c000340e:	89 d8                	mov    eax,ebx
c0003410:	5b                   	pop    ebx
c0003411:	5e                   	pop    esi
c0003412:	5f                   	pop    edi
c0003413:	5d                   	pop    ebp
c0003414:	c3                   	ret    

c0003415 <remove_chain>:
c0003415:	55                   	push   ebp
c0003416:	57                   	push   edi
c0003417:	56                   	push   esi
c0003418:	89 d6                	mov    esi,edx
c000341a:	53                   	push   ebx
c000341b:	83 ec 0c             	sub    esp,0xc
c000341e:	83 fa 01             	cmp    edx,0x1
c0003421:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003423:	76 65                	jbe    c000348a <remove_chain+0x75>
c0003425:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003428:	76 60                	jbe    c000348a <remove_chain+0x75>
c000342a:	89 c5                	mov    ebp,eax
c000342c:	89 ca                	mov    edx,ecx
c000342e:	85 c9                	test   ecx,ecx
c0003430:	74 0e                	je     c0003440 <remove_chain+0x2b>
c0003432:	83 c9 ff             	or     ecx,0xffffffff
c0003435:	89 d8                	mov    eax,ebx
c0003437:	e8 5f f2 ff ff       	call   c000269b <put_fat>
c000343c:	85 c0                	test   eax,eax
c000343e:	75 56                	jne    c0003496 <remove_chain+0x81>
c0003440:	89 f2                	mov    edx,esi
c0003442:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003445:	e8 c7 fc ff ff       	call   c0003111 <get_fat.isra.2>
c000344a:	89 c7                	mov    edi,eax
c000344c:	85 c0                	test   eax,eax
c000344e:	75 04                	jne    c0003454 <remove_chain+0x3f>
c0003450:	31 c0                	xor    eax,eax
c0003452:	eb 42                	jmp    c0003496 <remove_chain+0x81>
c0003454:	83 f8 01             	cmp    eax,0x1
c0003457:	74 31                	je     c000348a <remove_chain+0x75>
c0003459:	83 f8 ff             	cmp    eax,0xffffffff
c000345c:	74 33                	je     c0003491 <remove_chain+0x7c>
c000345e:	31 c9                	xor    ecx,ecx
c0003460:	89 f2                	mov    edx,esi
c0003462:	89 d8                	mov    eax,ebx
c0003464:	e8 32 f2 ff ff       	call   c000269b <put_fat>
c0003469:	85 c0                	test   eax,eax
c000346b:	75 29                	jne    c0003496 <remove_chain+0x81>
c000346d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003470:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003473:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003476:	39 c8                	cmp    eax,ecx
c0003478:	73 08                	jae    c0003482 <remove_chain+0x6d>
c000347a:	40                   	inc    eax
c000347b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000347f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003482:	89 fe                	mov    esi,edi
c0003484:	39 fa                	cmp    edx,edi
c0003486:	77 b8                	ja     c0003440 <remove_chain+0x2b>
c0003488:	eb c6                	jmp    c0003450 <remove_chain+0x3b>
c000348a:	b8 02 00 00 00       	mov    eax,0x2
c000348f:	eb 05                	jmp    c0003496 <remove_chain+0x81>
c0003491:	b8 01 00 00 00       	mov    eax,0x1
c0003496:	83 c4 0c             	add    esp,0xc
c0003499:	5b                   	pop    ebx
c000349a:	5e                   	pop    esi
c000349b:	5f                   	pop    edi
c000349c:	5d                   	pop    ebp
c000349d:	c3                   	ret    

c000349e <dir_next>:
c000349e:	55                   	push   ebp
c000349f:	57                   	push   edi
c00034a0:	56                   	push   esi
c00034a1:	53                   	push   ebx
c00034a2:	83 ec 1c             	sub    esp,0x1c
c00034a5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034a8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034aa:	83 c7 20             	add    edi,0x20
c00034ad:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034b3:	76 07                	jbe    c00034bc <dir_next+0x1e>
c00034b5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034bc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034bf:	b9 04 00 00 00       	mov    ecx,0x4
c00034c4:	85 f6                	test   esi,esi
c00034c6:	0f 84 cd 00 00 00    	je     c0003599 <dir_next+0xfb>
c00034cc:	89 c3                	mov    ebx,eax
c00034ce:	89 d1                	mov    ecx,edx
c00034d0:	89 f8                	mov    eax,edi
c00034d2:	25 ff 01 00 00       	and    eax,0x1ff
c00034d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034db:	0f 85 a8 00 00 00    	jne    c0003589 <dir_next+0xeb>
c00034e1:	46                   	inc    esi
c00034e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034e5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034e8:	85 d2                	test   edx,edx
c00034ea:	75 22                	jne    c000350e <dir_next+0x70>
c00034ec:	89 fa                	mov    edx,edi
c00034ee:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034f2:	c1 ea 05             	shr    edx,0x5
c00034f5:	39 c2                	cmp    edx,eax
c00034f7:	0f 82 8c 00 00 00    	jb     c0003589 <dir_next+0xeb>
c00034fd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003504:	b9 04 00 00 00       	mov    ecx,0x4
c0003509:	e9 8b 00 00 00       	jmp    c0003599 <dir_next+0xfb>
c000350e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003512:	89 fe                	mov    esi,edi
c0003514:	48                   	dec    eax
c0003515:	c1 ee 09             	shr    esi,0x9
c0003518:	85 f0                	test   eax,esi
c000351a:	75 6d                	jne    c0003589 <dir_next+0xeb>
c000351c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003520:	89 e8                	mov    eax,ebp
c0003522:	e8 ea fb ff ff       	call   c0003111 <get_fat.isra.2>
c0003527:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000352b:	89 c6                	mov    esi,eax
c000352d:	83 f8 01             	cmp    eax,0x1
c0003530:	77 07                	ja     c0003539 <dir_next+0x9b>
c0003532:	b9 02 00 00 00       	mov    ecx,0x2
c0003537:	eb 60                	jmp    c0003599 <dir_next+0xfb>
c0003539:	83 f8 ff             	cmp    eax,0xffffffff
c000353c:	75 07                	jne    c0003545 <dir_next+0xa7>
c000353e:	b9 01 00 00 00       	mov    ecx,0x1
c0003543:	eb 54                	jmp    c0003599 <dir_next+0xfb>
c0003545:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003548:	77 30                	ja     c000357a <dir_next+0xdc>
c000354a:	85 c9                	test   ecx,ecx
c000354c:	74 af                	je     c00034fd <dir_next+0x5f>
c000354e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003551:	89 d8                	mov    eax,ebx
c0003553:	e8 83 fd ff ff       	call   c00032db <create_chain>
c0003558:	b9 07 00 00 00       	mov    ecx,0x7
c000355d:	89 c6                	mov    esi,eax
c000355f:	85 c0                	test   eax,eax
c0003561:	74 36                	je     c0003599 <dir_next+0xfb>
c0003563:	83 f8 01             	cmp    eax,0x1
c0003566:	74 ca                	je     c0003532 <dir_next+0x94>
c0003568:	83 f8 ff             	cmp    eax,0xffffffff
c000356b:	74 d1                	je     c000353e <dir_next+0xa0>
c000356d:	89 c2                	mov    edx,eax
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 75 f2 ff ff       	call   c00027eb <dir_clear>
c0003576:	85 c0                	test   eax,eax
c0003578:	75 c4                	jne    c000353e <dir_next+0xa0>
c000357a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000357d:	89 f2                	mov    edx,esi
c000357f:	89 e8                	mov    eax,ebp
c0003581:	e8 df e9 ff ff       	call   c0001f65 <clst2sect>
c0003586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000358d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003590:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003594:	31 c9                	xor    ecx,ecx
c0003596:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003599:	83 c4 1c             	add    esp,0x1c
c000359c:	89 c8                	mov    eax,ecx
c000359e:	5b                   	pop    ebx
c000359f:	5e                   	pop    esi
c00035a0:	5f                   	pop    edi
c00035a1:	5d                   	pop    ebp
c00035a2:	c3                   	ret    

c00035a3 <dir_alloc>:
c00035a3:	55                   	push   ebp
c00035a4:	89 c5                	mov    ebp,eax
c00035a6:	57                   	push   edi
c00035a7:	89 d7                	mov    edi,edx
c00035a9:	56                   	push   esi
c00035aa:	31 d2                	xor    edx,edx
c00035ac:	53                   	push   ebx
c00035ad:	83 ec 0c             	sub    esp,0xc
c00035b0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035b2:	e8 5c fc ff ff       	call   c0003213 <dir_sdi>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 37                	jne    c00035f2 <dir_alloc+0x4f>
c00035bb:	31 db                	xor    ebx,ebx
c00035bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035c0:	89 f0                	mov    eax,esi
c00035c2:	e8 7e ec ff ff       	call   c0002245 <move_window>
c00035c7:	85 c0                	test   eax,eax
c00035c9:	75 27                	jne    c00035f2 <dir_alloc+0x4f>
c00035cb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ce:	8a 12                	mov    dl,BYTE PTR [edx]
c00035d0:	84 d2                	test   dl,dl
c00035d2:	74 05                	je     c00035d9 <dir_alloc+0x36>
c00035d4:	80 fa e5             	cmp    dl,0xe5
c00035d7:	75 07                	jne    c00035e0 <dir_alloc+0x3d>
c00035d9:	43                   	inc    ebx
c00035da:	39 fb                	cmp    ebx,edi
c00035dc:	75 04                	jne    c00035e2 <dir_alloc+0x3f>
c00035de:	eb 1c                	jmp    c00035fc <dir_alloc+0x59>
c00035e0:	31 db                	xor    ebx,ebx
c00035e2:	ba 01 00 00 00       	mov    edx,0x1
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 b0 fe ff ff       	call   c000349e <dir_next>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	74 cb                	je     c00035bd <dir_alloc+0x1a>
c00035f2:	83 f8 04             	cmp    eax,0x4
c00035f5:	75 05                	jne    c00035fc <dir_alloc+0x59>
c00035f7:	b8 07 00 00 00       	mov    eax,0x7
c00035fc:	83 c4 0c             	add    esp,0xc
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_read>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	bf ff ff ff ff       	mov    edi,0xffffffff
c000360b:	56                   	push   esi
c000360c:	be 04 00 00 00       	mov    esi,0x4
c0003611:	53                   	push   ebx
c0003612:	89 c3                	mov    ebx,eax
c0003614:	83 ec 1c             	sub    esp,0x1c
c0003617:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003622:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003625:	85 d2                	test   edx,edx
c0003627:	0f 84 d8 00 00 00    	je     c0003705 <dir_read+0x101>
c000362d:	89 e8                	mov    eax,ebp
c000362f:	e8 11 ec ff ff       	call   c0002245 <move_window>
c0003634:	89 c6                	mov    esi,eax
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 d2 00 00 00    	jne    c0003710 <dir_read+0x10c>
c000363e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003641:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003643:	84 c9                	test   cl,cl
c0003645:	0f 84 c0 00 00 00    	je     c000370b <dir_read+0x107>
c000364b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000364e:	83 e0 3f             	and    eax,0x3f
c0003651:	80 f9 2e             	cmp    cl,0x2e
c0003654:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003658:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000365b:	0f 84 8a 00 00 00    	je     c00036eb <dir_read+0xe7>
c0003661:	80 f9 e5             	cmp    cl,0xe5
c0003664:	0f 84 81 00 00 00    	je     c00036eb <dir_read+0xe7>
c000366a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000366e:	83 e0 1f             	and    eax,0x1f
c0003671:	83 f8 08             	cmp    eax,0x8
c0003674:	0f 94 c0             	sete   al
c0003677:	0f b6 c0             	movzx  eax,al
c000367a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000367e:	75 6b                	jne    c00036eb <dir_read+0xe7>
c0003680:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003685:	75 44                	jne    c00036cb <dir_read+0xc7>
c0003687:	f6 c1 40             	test   cl,0x40
c000368a:	74 12                	je     c000369e <dir_read+0x9a>
c000368c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000368f:	83 e1 bf             	and    ecx,0xffffffbf
c0003692:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003696:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003699:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000369c:	eb 06                	jmp    c00036a4 <dir_read+0xa0>
c000369e:	89 f8                	mov    eax,edi
c00036a0:	38 c8                	cmp    al,cl
c00036a2:	75 47                	jne    c00036eb <dir_read+0xe7>
c00036a4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036a8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ad:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036b0:	75 3e                	jne    c00036f0 <dir_read+0xec>
c00036b2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036b9:	e8 c4 e8 ff ff       	call   c0001f82 <pick_lfn>
c00036be:	85 c0                	test   eax,eax
c00036c0:	74 2e                	je     c00036f0 <dir_read+0xec>
c00036c2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036c6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036c9:	eb 25                	jmp    c00036f0 <dir_read+0xec>
c00036cb:	89 f8                	mov    eax,edi
c00036cd:	84 c0                	test   al,al
c00036cf:	75 11                	jne    c00036e2 <dir_read+0xde>
c00036d1:	89 d0                	mov    eax,edx
c00036d3:	e8 64 ea ff ff       	call   c000213c <sum_sfn>
c00036d8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036dc:	75 04                	jne    c00036e2 <dir_read+0xde>
c00036de:	31 f6                	xor    esi,esi
c00036e0:	eb 35                	jmp    c0003717 <dir_read+0x113>
c00036e2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036e9:	eb 2c                	jmp    c0003717 <dir_read+0x113>
c00036eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036f0:	31 d2                	xor    edx,edx
c00036f2:	89 d8                	mov    eax,ebx
c00036f4:	e8 a5 fd ff ff       	call   c000349e <dir_next>
c00036f9:	89 c6                	mov    esi,eax
c00036fb:	85 c0                	test   eax,eax
c00036fd:	0f 84 1f ff ff ff    	je     c0003622 <dir_read+0x1e>
c0003703:	eb 0b                	jmp    c0003710 <dir_read+0x10c>
c0003705:	85 f6                	test   esi,esi
c0003707:	74 d5                	je     c00036de <dir_read+0xda>
c0003709:	eb 05                	jmp    c0003710 <dir_read+0x10c>
c000370b:	be 04 00 00 00       	mov    esi,0x4
c0003710:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003717:	83 c4 1c             	add    esp,0x1c
c000371a:	89 f0                	mov    eax,esi
c000371c:	5b                   	pop    ebx
c000371d:	5e                   	pop    esi
c000371e:	5f                   	pop    edi
c000371f:	5d                   	pop    ebp
c0003720:	c3                   	ret    

c0003721 <dir_remove>:
c0003721:	57                   	push   edi
c0003722:	56                   	push   esi
c0003723:	53                   	push   ebx
c0003724:	89 c3                	mov    ebx,eax
c0003726:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003729:	8b 30                	mov    esi,DWORD PTR [eax]
c000372b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000372e:	83 fa ff             	cmp    edx,0xffffffff
c0003731:	74 09                	je     c000373c <dir_remove+0x1b>
c0003733:	e8 db fa ff ff       	call   c0003213 <dir_sdi>
c0003738:	85 c0                	test   eax,eax
c000373a:	75 34                	jne    c0003770 <dir_remove+0x4f>
c000373c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000373f:	89 f0                	mov    eax,esi
c0003741:	e8 ff ea ff ff       	call   c0002245 <move_window>
c0003746:	85 c0                	test   eax,eax
c0003748:	75 1c                	jne    c0003766 <dir_remove+0x45>
c000374a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000374d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003750:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003754:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003757:	73 17                	jae    c0003770 <dir_remove+0x4f>
c0003759:	31 d2                	xor    edx,edx
c000375b:	89 d8                	mov    eax,ebx
c000375d:	e8 3c fd ff ff       	call   c000349e <dir_next>
c0003762:	85 c0                	test   eax,eax
c0003764:	74 d6                	je     c000373c <dir_remove+0x1b>
c0003766:	83 f8 04             	cmp    eax,0x4
c0003769:	75 05                	jne    c0003770 <dir_remove+0x4f>
c000376b:	b8 02 00 00 00       	mov    eax,0x2
c0003770:	5b                   	pop    ebx
c0003771:	5e                   	pop    esi
c0003772:	5f                   	pop    edi
c0003773:	c3                   	ret    

c0003774 <dir_find>:
c0003774:	55                   	push   ebp
c0003775:	31 d2                	xor    edx,edx
c0003777:	57                   	push   edi
c0003778:	56                   	push   esi
c0003779:	53                   	push   ebx
c000377a:	89 c3                	mov    ebx,eax
c000377c:	83 ec 1c             	sub    esp,0x1c
c000377f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003781:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	e8 87 fa ff ff       	call   c0003213 <dir_sdi>
c000378c:	89 c6                	mov    esi,eax
c000378e:	85 c0                	test   eax,eax
c0003790:	0f 85 02 01 00 00    	jne    c0003898 <dir_find+0x124>
c0003796:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000379d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037a2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037a7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ae:	e8 92 ea ff ff       	call   c0002245 <move_window>
c00037b3:	89 c6                	mov    esi,eax
c00037b5:	85 c0                	test   eax,eax
c00037b7:	0f 85 db 00 00 00    	jne    c0003898 <dir_find+0x124>
c00037bd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037c0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037c3:	84 c9                	test   cl,cl
c00037c5:	0f 84 c8 00 00 00    	je     c0003893 <dir_find+0x11f>
c00037cb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ce:	88 d0                	mov    al,dl
c00037d0:	83 e0 3f             	and    eax,0x3f
c00037d3:	80 f9 e5             	cmp    cl,0xe5
c00037d6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037d9:	0f 84 93 00 00 00    	je     c0003872 <dir_find+0xfe>
c00037df:	80 e2 08             	and    dl,0x8
c00037e2:	74 0a                	je     c00037ee <dir_find+0x7a>
c00037e4:	3c 0f                	cmp    al,0xf
c00037e6:	0f 85 86 00 00 00    	jne    c0003872 <dir_find+0xfe>
c00037ec:	eb 04                	jmp    c00037f2 <dir_find+0x7e>
c00037ee:	3c 0f                	cmp    al,0xf
c00037f0:	75 54                	jne    c0003846 <dir_find+0xd2>
c00037f2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037f6:	0f 85 82 00 00 00    	jne    c000387e <dir_find+0x10a>
c00037fc:	f6 c1 40             	test   cl,0x40
c00037ff:	74 12                	je     c0003813 <dir_find+0x9f>
c0003801:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003804:	83 e1 bf             	and    ecx,0xffffffbf
c0003807:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000380b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000380e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003811:	eb 06                	jmp    c0003819 <dir_find+0xa5>
c0003813:	89 f8                	mov    eax,edi
c0003815:	38 c8                	cmp    al,cl
c0003817:	75 60                	jne    c0003879 <dir_find+0x105>
c0003819:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000381d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003822:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003825:	75 57                	jne    c000387e <dir_find+0x10a>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000382f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003832:	89 ea                	mov    edx,ebp
c0003834:	e8 89 f3 ff ff       	call   c0002bc2 <cmp_lfn>
c0003839:	85 c0                	test   eax,eax
c000383b:	74 41                	je     c000387e <dir_find+0x10a>
c000383d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003841:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003844:	eb 38                	jmp    c000387e <dir_find+0x10a>
c0003846:	89 f8                	mov    eax,edi
c0003848:	84 c0                	test   al,al
c000384a:	75 0d                	jne    c0003859 <dir_find+0xe5>
c000384c:	89 e8                	mov    eax,ebp
c000384e:	e8 e9 e8 ff ff       	call   c000213c <sum_sfn>
c0003853:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003857:	74 3f                	je     c0003898 <dir_find+0x124>
c0003859:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000385d:	75 13                	jne    c0003872 <dir_find+0xfe>
c000385f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003862:	b9 0b 00 00 00       	mov    ecx,0xb
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 fd e4 ff ff       	call   c0001d6b <mem_cmp>
c000386e:	85 c0                	test   eax,eax
c0003870:	74 26                	je     c0003898 <dir_find+0x124>
c0003872:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003879:	bf ff ff ff ff       	mov    edi,0xffffffff
c000387e:	31 d2                	xor    edx,edx
c0003880:	89 d8                	mov    eax,ebx
c0003882:	e8 17 fc ff ff       	call   c000349e <dir_next>
c0003887:	89 c6                	mov    esi,eax
c0003889:	85 c0                	test   eax,eax
c000388b:	0f 84 16 ff ff ff    	je     c00037a7 <dir_find+0x33>
c0003891:	eb 05                	jmp    c0003898 <dir_find+0x124>
c0003893:	be 04 00 00 00       	mov    esi,0x4
c0003898:	83 c4 1c             	add    esp,0x1c
c000389b:	89 f0                	mov    eax,esi
c000389d:	5b                   	pop    ebx
c000389e:	5e                   	pop    esi
c000389f:	5f                   	pop    edi
c00038a0:	5d                   	pop    ebp
c00038a1:	c3                   	ret    

c00038a2 <follow_path>:
c00038a2:	56                   	push   esi
c00038a3:	53                   	push   ebx
c00038a4:	89 c3                	mov    ebx,eax
c00038a6:	83 ec 14             	sub    esp,0x14
c00038a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00038af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038b3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038b5:	80 fa 5c             	cmp    dl,0x5c
c00038b8:	75 07                	jne    c00038c1 <follow_path+0x1f>
c00038ba:	40                   	inc    eax
c00038bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038bf:	eb ee                	jmp    c00038af <follow_path+0xd>
c00038c1:	80 fa 2f             	cmp    dl,0x2f
c00038c4:	74 f4                	je     c00038ba <follow_path+0x18>
c00038c6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038cd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038d0:	77 3e                	ja     c0003910 <follow_path+0x6e>
c00038d2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038d6:	31 d2                	xor    edx,edx
c00038d8:	89 d8                	mov    eax,ebx
c00038da:	e8 34 f9 ff ff       	call   c0003213 <dir_sdi>
c00038df:	eb 4f                	jmp    c0003930 <follow_path+0x8e>
c00038e1:	89 d8                	mov    eax,ebx
c00038e3:	e8 8c fe ff ff       	call   c0003774 <dir_find>
c00038e8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038eb:	85 c0                	test   eax,eax
c00038ed:	75 32                	jne    c0003921 <follow_path+0x7f>
c00038ef:	80 e2 04             	and    dl,0x4
c00038f2:	75 3c                	jne    c0003930 <follow_path+0x8e>
c00038f4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038f8:	74 31                	je     c000392b <follow_path+0x89>
c00038fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038fd:	25 ff 01 00 00       	and    eax,0x1ff
c0003902:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003906:	8a 06                	mov    al,BYTE PTR [esi]
c0003908:	e8 b3 f7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000390d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003910:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003914:	89 d8                	mov    eax,ebx
c0003916:	e8 cb ef ff ff       	call   c00028e6 <create_name>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c2                	je     c00038e1 <follow_path+0x3f>
c000391f:	eb 0f                	jmp    c0003930 <follow_path+0x8e>
c0003921:	83 f8 04             	cmp    eax,0x4
c0003924:	75 0a                	jne    c0003930 <follow_path+0x8e>
c0003926:	80 e2 04             	and    dl,0x4
c0003929:	75 05                	jne    c0003930 <follow_path+0x8e>
c000392b:	b8 05 00 00 00       	mov    eax,0x5
c0003930:	83 c4 14             	add    esp,0x14
c0003933:	5b                   	pop    ebx
c0003934:	5e                   	pop    esi
c0003935:	c3                   	ret    

c0003936 <dir_register>:
c0003936:	55                   	push   ebp
c0003937:	57                   	push   edi
c0003938:	56                   	push   esi
c0003939:	be 06 00 00 00       	mov    esi,0x6
c000393e:	53                   	push   ebx
c000393f:	83 ec 2c             	sub    esp,0x2c
c0003942:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003946:	0f 85 65 01 00 00    	jne    c0003ab1 <dir_register+0x17b>
c000394c:	8b 38                	mov    edi,DWORD PTR [eax]
c000394e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003956:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003959:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000395d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003962:	74 06                	je     c000396a <dir_register+0x34>
c0003964:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003968:	eb ef                	jmp    c0003959 <dir_register+0x23>
c000396a:	89 c3                	mov    ebx,eax
c000396c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003971:	8d 40 20             	lea    eax,[eax+0x20]
c0003974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003978:	89 c2                	mov    edx,eax
c000397a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000397e:	e8 c8 e3 ff ff       	call   c0001d4b <mem_cpy>
c0003983:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003988:	74 48                	je     c00039d2 <dir_register+0x9c>
c000398a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000398e:	bd 01 00 00 00       	mov    ebp,0x1
c0003993:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003996:	55                   	push   ebp
c0003997:	8d 54 24 18          	lea    edx,[esp+0x18]
c000399b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000399f:	e8 dc e6 ff ff       	call   c0002080 <gen_numname>
c00039a4:	58                   	pop    eax
c00039a5:	89 d8                	mov    eax,ebx
c00039a7:	e8 c8 fd ff ff       	call   c0003774 <dir_find>
c00039ac:	89 c6                	mov    esi,eax
c00039ae:	85 c0                	test   eax,eax
c00039b0:	75 10                	jne    c00039c2 <dir_register+0x8c>
c00039b2:	45                   	inc    ebp
c00039b3:	83 fd 64             	cmp    ebp,0x64
c00039b6:	75 db                	jne    c0003993 <dir_register+0x5d>
c00039b8:	be 07 00 00 00       	mov    esi,0x7
c00039bd:	e9 ef 00 00 00       	jmp    c0003ab1 <dir_register+0x17b>
c00039c2:	83 f8 04             	cmp    eax,0x4
c00039c5:	0f 85 e6 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c00039cb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039cf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039d2:	bd 01 00 00 00       	mov    ebp,0x1
c00039d7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039dc:	74 13                	je     c00039f1 <dir_register+0xbb>
c00039de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039e2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039e7:	83 c0 0c             	add    eax,0xc
c00039ea:	31 d2                	xor    edx,edx
c00039ec:	f7 f1                	div    ecx
c00039ee:	8d 68 01             	lea    ebp,[eax+0x1]
c00039f1:	89 ea                	mov    edx,ebp
c00039f3:	89 d8                	mov    eax,ebx
c00039f5:	e8 a9 fb ff ff       	call   c00035a3 <dir_alloc>
c00039fa:	89 c6                	mov    esi,eax
c00039fc:	85 c0                	test   eax,eax
c00039fe:	0f 85 ad 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a04:	4d                   	dec    ebp
c0003a05:	74 6a                	je     c0003a71 <dir_register+0x13b>
c0003a07:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a0a:	89 e8                	mov    eax,ebp
c0003a0c:	c1 e0 05             	shl    eax,0x5
c0003a0f:	29 c2                	sub    edx,eax
c0003a11:	89 d8                	mov    eax,ebx
c0003a13:	e8 fb f7 ff ff       	call   c0003213 <dir_sdi>
c0003a18:	89 c6                	mov    esi,eax
c0003a1a:	85 c0                	test   eax,eax
c0003a1c:	0f 85 8f 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a26:	e8 11 e7 ff ff       	call   c000213c <sum_sfn>
c0003a2b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a2f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a32:	89 f8                	mov    eax,edi
c0003a34:	e8 0c e8 ff ff       	call   c0002245 <move_window>
c0003a39:	89 c6                	mov    esi,eax
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	75 72                	jne    c0003ab1 <dir_register+0x17b>
c0003a3f:	83 ec 0c             	sub    esp,0xc
c0003a42:	89 e8                	mov    eax,ebp
c0003a44:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a49:	0f b6 c8             	movzx  ecx,al
c0003a4c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a4f:	52                   	push   edx
c0003a50:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a53:	e8 a4 e5 ff ff       	call   c0001ffc <put_lfn>
c0003a58:	31 d2                	xor    edx,edx
c0003a5a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a5e:	89 d8                	mov    eax,ebx
c0003a60:	e8 39 fa ff ff       	call   c000349e <dir_next>
c0003a65:	83 c4 10             	add    esp,0x10
c0003a68:	89 c6                	mov    esi,eax
c0003a6a:	85 c0                	test   eax,eax
c0003a6c:	75 43                	jne    c0003ab1 <dir_register+0x17b>
c0003a6e:	4d                   	dec    ebp
c0003a6f:	75 be                	jne    c0003a2f <dir_register+0xf9>
c0003a71:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a74:	89 f8                	mov    eax,edi
c0003a76:	e8 ca e7 ff ff       	call   c0002245 <move_window>
c0003a7b:	89 c6                	mov    esi,eax
c0003a7d:	85 c0                	test   eax,eax
c0003a7f:	75 30                	jne    c0003ab1 <dir_register+0x17b>
c0003a81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a84:	b9 20 00 00 00       	mov    ecx,0x20
c0003a89:	31 d2                	xor    edx,edx
c0003a8b:	e8 d0 e2 ff ff       	call   c0001d60 <mem_set>
c0003a90:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a9c:	e8 aa e2 ff ff       	call   c0001d4b <mem_cpy>
c0003aa1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003aa4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa7:	83 e0 18             	and    eax,0x18
c0003aaa:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ab1:	83 c4 2c             	add    esp,0x2c
c0003ab4:	89 f0                	mov    eax,esi
c0003ab6:	5b                   	pop    ebx
c0003ab7:	5e                   	pop    esi
c0003ab8:	5f                   	pop    edi
c0003ab9:	5d                   	pop    ebp
c0003aba:	c3                   	ret    

c0003abb <f_mount>:
c0003abb:	53                   	push   ebx
c0003abc:	83 ec 18             	sub    esp,0x18
c0003abf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ac3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003acb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003acf:	e8 7a e6 ff ff       	call   c000214e <get_ldnumber>
c0003ad4:	89 c2                	mov    edx,eax
c0003ad6:	b8 0b 00 00 00       	mov    eax,0xb
c0003adb:	85 d2                	test   edx,edx
c0003add:	78 39                	js     c0003b18 <f_mount+0x5d>
c0003adf:	8b 04 95 a0 24 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffddb60]
c0003ae6:	85 c0                	test   eax,eax
c0003ae8:	74 03                	je     c0003aed <f_mount+0x32>
c0003aea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003af1:	85 c0                	test   eax,eax
c0003af3:	74 03                	je     c0003af8 <f_mount+0x3d>
c0003af5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003afc:	89 04 95 a0 24 02 c0 	mov    DWORD PTR [edx*4-0x3ffddb60],eax
c0003b03:	31 c0                	xor    eax,eax
c0003b05:	84 db                	test   bl,bl
c0003b07:	74 0f                	je     c0003b18 <f_mount+0x5d>
c0003b09:	31 c9                	xor    ecx,ecx
c0003b0b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b13:	e8 80 e8 ff ff       	call   c0002398 <mount_volume>
c0003b18:	83 c4 18             	add    esp,0x18
c0003b1b:	5b                   	pop    ebx
c0003b1c:	c3                   	ret    

c0003b1d <f_open>:
c0003b1d:	55                   	push   ebp
c0003b1e:	b8 09 00 00 00       	mov    eax,0x9
c0003b23:	57                   	push   edi
c0003b24:	56                   	push   esi
c0003b25:	53                   	push   ebx
c0003b26:	83 ec 5c             	sub    esp,0x5c
c0003b29:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b2d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b31:	85 db                	test   ebx,ebx
c0003b33:	0f 84 a7 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b39:	89 fe                	mov    esi,edi
c0003b3b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b3f:	83 e6 3f             	and    esi,0x3f
c0003b42:	89 f0                	mov    eax,esi
c0003b44:	0f b6 c8             	movzx  ecx,al
c0003b47:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b4b:	e8 48 e8 ff ff       	call   c0002398 <mount_volume>
c0003b50:	85 c0                	test   eax,eax
c0003b52:	0f 85 82 02 00 00    	jne    c0003dda <f_open+0x2bd>
c0003b58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b5c:	83 ec 0c             	sub    esp,0xc
c0003b5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b63:	68 00 02 00 00       	push   0x200
c0003b68:	e8 ff 1e 00 00       	call   c0005a6c <ff_memalloc>
c0003b6d:	83 c4 10             	add    esp,0x10
c0003b70:	89 c5                	mov    ebp,eax
c0003b72:	b8 11 00 00 00       	mov    eax,0x11
c0003b77:	85 ed                	test   ebp,ebp
c0003b79:	0f 84 61 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b83:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b87:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b8e:	e8 0f fd ff ff       	call   c00038a2 <follow_path>
c0003b93:	85 c0                	test   eax,eax
c0003b95:	75 0c                	jne    c0003ba3 <f_open+0x86>
c0003b97:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b9c:	79 05                	jns    c0003ba3 <f_open+0x86>
c0003b9e:	b8 06 00 00 00       	mov    eax,0x6
c0003ba3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ba9:	0f 84 de 00 00 00    	je     c0003c8d <f_open+0x170>
c0003baf:	85 c0                	test   eax,eax
c0003bb1:	74 1e                	je     c0003bd1 <f_open+0xb4>
c0003bb3:	83 f8 04             	cmp    eax,0x4
c0003bb6:	0f 85 06 02 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bbc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bc0:	83 ce 08             	or     esi,0x8
c0003bc3:	e8 6e fd ff ff       	call   c0003936 <dir_register>
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	74 2f                	je     c0003bfb <f_open+0xde>
c0003bcc:	e9 f1 01 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003bd1:	b8 07 00 00 00       	mov    eax,0x7
c0003bd6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bdb:	0f 85 e1 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003be1:	b8 08 00 00 00       	mov    eax,0x8
c0003be6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bec:	0f 85 d0 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bf2:	83 e7 08             	and    edi,0x8
c0003bf5:	0f 84 bf 00 00 00    	je     c0003cba <f_open+0x19d>
c0003bfb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c03:	89 ca                	mov    edx,ecx
c0003c05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c09:	8a 00                	mov    al,BYTE PTR [eax]
c0003c0b:	e8 b0 f4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003c10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c14:	89 c7                	mov    edi,eax
c0003c16:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c1b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c1e:	e8 25 e1 ff ff       	call   c0001d48 <st_dword>
c0003c23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c27:	31 c9                	xor    ecx,ecx
c0003c29:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c35:	e8 af f4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0003c3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c3e:	31 d2                	xor    edx,edx
c0003c40:	83 c0 1c             	add    eax,0x1c
c0003c43:	e8 00 e1 ff ff       	call   c0001d48 <st_dword>
c0003c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c4c:	85 ff                	test   edi,edi
c0003c4e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c52:	74 66                	je     c0003cba <f_open+0x19d>
c0003c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c58:	31 c9                	xor    ecx,ecx
c0003c5a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c5d:	89 fa                	mov    edx,edi
c0003c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c63:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c67:	e8 a9 f7 ff ff       	call   c0003415 <remove_chain>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	0f 85 4e 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c78:	4f                   	dec    edi
c0003c79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c7d:	e8 c3 e5 ff ff       	call   c0002245 <move_window>
c0003c82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c86:	85 c0                	test   eax,eax
c0003c88:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c8b:	eb 27                	jmp    c0003cb4 <f_open+0x197>
c0003c8d:	85 c0                	test   eax,eax
c0003c8f:	0f 85 2d 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c95:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c99:	b8 04 00 00 00       	mov    eax,0x4
c0003c9e:	f6 c2 10             	test   dl,0x10
c0003ca1:	0f 85 1b 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003ca7:	83 e7 02             	and    edi,0x2
c0003caa:	74 0e                	je     c0003cba <f_open+0x19d>
c0003cac:	b8 07 00 00 00       	mov    eax,0x7
c0003cb1:	80 e2 01             	and    dl,0x1
c0003cb4:	0f 85 08 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003cba:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cc0:	74 03                	je     c0003cc5 <f_open+0x1a8>
c0003cc2:	83 ce 40             	or     esi,0x40
c0003cc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cc9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ccd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cd0:	89 fa                	mov    edx,edi
c0003cd2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cd9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cdc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cde:	e8 dd f3 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003ce3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003ce6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003ce9:	e8 3e e0 ff ff       	call   c0001d2c <ld_dword>
c0003cee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cf2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003cf5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003cf7:	31 d2                	xor    edx,edx
c0003cf9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003cfd:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d01:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d05:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d0c:	89 f0                	mov    eax,esi
c0003d0e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d15:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d18:	b9 00 02 00 00       	mov    ecx,0x200
c0003d1d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d24:	e8 37 e0 ff ff       	call   c0001d60 <mem_set>
c0003d29:	83 e6 20             	and    esi,0x20
c0003d2c:	75 07                	jne    c0003d35 <f_open+0x218>
c0003d2e:	31 c0                	xor    eax,eax
c0003d30:	e9 8d 00 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003d35:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d38:	85 ff                	test   edi,edi
c0003d3a:	74 f2                	je     c0003d2e <f_open+0x211>
c0003d3c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d43:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d46:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d4a:	c1 e6 09             	shl    esi,0x9
c0003d4d:	39 fe                	cmp    esi,edi
c0003d4f:	73 1c                	jae    c0003d6d <f_open+0x250>
c0003d51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d53:	29 f7                	sub    edi,esi
c0003d55:	e8 b7 f3 ff ff       	call   c0003111 <get_fat.isra.2>
c0003d5a:	89 c2                	mov    edx,eax
c0003d5c:	83 f8 01             	cmp    eax,0x1
c0003d5f:	76 10                	jbe    c0003d71 <f_open+0x254>
c0003d61:	83 f8 ff             	cmp    eax,0xffffffff
c0003d64:	75 e7                	jne    c0003d4d <f_open+0x230>
c0003d66:	b8 01 00 00 00       	mov    eax,0x1
c0003d6b:	eb 09                	jmp    c0003d76 <f_open+0x259>
c0003d6d:	31 c0                	xor    eax,eax
c0003d6f:	eb 05                	jmp    c0003d76 <f_open+0x259>
c0003d71:	b8 02 00 00 00       	mov    eax,0x2
c0003d76:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d79:	85 c0                	test   eax,eax
c0003d7b:	75 45                	jne    c0003dc2 <f_open+0x2a5>
c0003d7d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d83:	74 a9                	je     c0003d2e <f_open+0x211>
c0003d85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d89:	89 f0                	mov    eax,esi
c0003d8b:	e8 d5 e1 ff ff       	call   c0001f65 <clst2sect>
c0003d90:	89 c2                	mov    edx,eax
c0003d92:	b8 02 00 00 00       	mov    eax,0x2
c0003d97:	85 d2                	test   edx,edx
c0003d99:	74 27                	je     c0003dc2 <f_open+0x2a5>
c0003d9b:	89 f9                	mov    ecx,edi
c0003d9d:	c1 e9 09             	shr    ecx,0x9
c0003da0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003da3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003da6:	6a 01                	push   0x1
c0003da8:	50                   	push   eax
c0003da9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dad:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003db1:	50                   	push   eax
c0003db2:	e8 1d df ff ff       	call   c0001cd4 <disk_read>
c0003db7:	83 c4 10             	add    esp,0x10
c0003dba:	85 c0                	test   eax,eax
c0003dbc:	0f 95 c0             	setne  al
c0003dbf:	0f b6 c0             	movzx  eax,al
c0003dc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003dc6:	83 ec 0c             	sub    esp,0xc
c0003dc9:	55                   	push   ebp
c0003dca:	e8 b5 1c 00 00       	call   c0005a84 <ff_memfree>
c0003dcf:	83 c4 10             	add    esp,0x10
c0003dd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 06                	je     c0003de0 <f_open+0x2c3>
c0003dda:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003de0:	83 c4 5c             	add    esp,0x5c
c0003de3:	5b                   	pop    ebx
c0003de4:	5e                   	pop    esi
c0003de5:	5f                   	pop    edi
c0003de6:	5d                   	pop    ebp
c0003de7:	c3                   	ret    

c0003de8 <f_read>:
c0003de8:	55                   	push   ebp
c0003de9:	57                   	push   edi
c0003dea:	56                   	push   esi
c0003deb:	53                   	push   ebx
c0003dec:	83 ec 2c             	sub    esp,0x2c
c0003def:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003df3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003df7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003dfd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e05:	89 d8                	mov    eax,ebx
c0003e07:	e8 8f e3 ff ff       	call   c000219b <validate>
c0003e0c:	89 c5                	mov    ebp,eax
c0003e0e:	85 c0                	test   eax,eax
c0003e10:	0f 85 c7 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e16:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e1a:	85 ed                	test   ebp,ebp
c0003e1c:	0f 85 bb 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e22:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e26:	0f 84 ac 01 00 00    	je     c0003fd8 <f_read+0x1f0>
c0003e2c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e2f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e32:	89 c7                	mov    edi,eax
c0003e34:	39 f0                	cmp    eax,esi
c0003e36:	0f 86 ad 00 00 00    	jbe    c0003ee9 <f_read+0x101>
c0003e3c:	89 f7                	mov    edi,esi
c0003e3e:	e9 a6 00 00 00       	jmp    c0003ee9 <f_read+0x101>
c0003e43:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e46:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e4c:	0f 85 5b 01 00 00    	jne    c0003fad <f_read+0x1c5>
c0003e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e56:	89 d1                	mov    ecx,edx
c0003e58:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e5c:	c1 e9 09             	shr    ecx,0x9
c0003e5f:	48                   	dec    eax
c0003e60:	21 c8                	and    eax,ecx
c0003e62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e66:	0f 84 8a 00 00 00    	je     c0003ef6 <f_read+0x10e>
c0003e6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e73:	89 c8                	mov    eax,ecx
c0003e75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e79:	e8 e7 e0 ff ff       	call   c0001f65 <clst2sect>
c0003e7e:	85 c0                	test   eax,eax
c0003e80:	0f 84 88 00 00 00    	je     c0003f0e <f_read+0x126>
c0003e86:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e92:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e98:	0f 86 bd 00 00 00    	jbe    c0003f5b <f_read+0x173>
c0003e9e:	89 fe                	mov    esi,edi
c0003ea0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ea4:	c1 ee 09             	shr    esi,0x9
c0003ea7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003eab:	01 f2                	add    edx,esi
c0003ead:	39 c2                	cmp    edx,eax
c0003eaf:	76 06                	jbe    c0003eb7 <f_read+0xcf>
c0003eb1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eb5:	89 c6                	mov    esi,eax
c0003eb7:	56                   	push   esi
c0003eb8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ebc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ec0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ec4:	50                   	push   eax
c0003ec5:	e8 0a de ff ff       	call   c0001cd4 <disk_read>
c0003eca:	83 c4 10             	add    esp,0x10
c0003ecd:	85 c0                	test   eax,eax
c0003ecf:	75 50                	jne    c0003f21 <f_read+0x139>
c0003ed1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ed5:	78 60                	js     c0003f37 <f_read+0x14f>
c0003ed7:	c1 e6 09             	shl    esi,0x9
c0003eda:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ede:	29 f7                	sub    edi,esi
c0003ee0:	01 30                	add    DWORD PTR [eax],esi
c0003ee2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ee6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ee9:	85 ff                	test   edi,edi
c0003eeb:	0f 85 52 ff ff ff    	jne    c0003e43 <f_read+0x5b>
c0003ef1:	e9 e7 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003ef6:	85 d2                	test   edx,edx
c0003ef8:	75 05                	jne    c0003eff <f_read+0x117>
c0003efa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003efd:	eb 0a                	jmp    c0003f09 <f_read+0x121>
c0003eff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f04:	e8 08 f2 ff ff       	call   c0003111 <get_fat.isra.2>
c0003f09:	83 f8 01             	cmp    eax,0x1
c0003f0c:	77 0e                	ja     c0003f1c <f_read+0x134>
c0003f0e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f12:	bd 02 00 00 00       	mov    ebp,0x2
c0003f17:	e9 c1 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f1c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f1f:	75 0e                	jne    c0003f2f <f_read+0x147>
c0003f21:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f25:	bd 01 00 00 00       	mov    ebp,0x1
c0003f2a:	e9 ae 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f2f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f32:	e9 35 ff ff ff       	jmp    c0003e6c <f_read+0x84>
c0003f37:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f3a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f3e:	39 f0                	cmp    eax,esi
c0003f40:	73 95                	jae    c0003ed7 <f_read+0xef>
c0003f42:	c1 e0 09             	shl    eax,0x9
c0003f45:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f48:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f4c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f51:	e8 f5 dd ff ff       	call   c0001d4b <mem_cpy>
c0003f56:	e9 7c ff ff ff       	jmp    c0003ed7 <f_read+0xef>
c0003f5b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f62:	74 42                	je     c0003fa6 <f_read+0x1be>
c0003f64:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f67:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f6b:	79 19                	jns    c0003f86 <f_read+0x19e>
c0003f6d:	6a 01                	push   0x1
c0003f6f:	50                   	push   eax
c0003f70:	56                   	push   esi
c0003f71:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f75:	50                   	push   eax
c0003f76:	e8 6f dd ff ff       	call   c0001cea <disk_write>
c0003f7b:	83 c4 10             	add    esp,0x10
c0003f7e:	85 c0                	test   eax,eax
c0003f80:	75 9f                	jne    c0003f21 <f_read+0x139>
c0003f82:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f86:	6a 01                	push   0x1
c0003f88:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f8c:	56                   	push   esi
c0003f8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 39 dd ff ff       	call   c0001cd4 <disk_read>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	0f 85 7b ff ff ff    	jne    c0003f21 <f_read+0x139>
c0003fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003faa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fb0:	ba 00 02 00 00       	mov    edx,0x200
c0003fb5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fba:	89 fe                	mov    esi,edi
c0003fbc:	29 c2                	sub    edx,eax
c0003fbe:	39 d7                	cmp    edi,edx
c0003fc0:	76 02                	jbe    c0003fc4 <f_read+0x1dc>
c0003fc2:	89 d6                	mov    esi,edx
c0003fc4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fc8:	89 f1                	mov    ecx,esi
c0003fca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fce:	e8 78 dd ff ff       	call   c0001d4b <mem_cpy>
c0003fd3:	e9 02 ff ff ff       	jmp    c0003eda <f_read+0xf2>
c0003fd8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fdd:	83 c4 2c             	add    esp,0x2c
c0003fe0:	89 e8                	mov    eax,ebp
c0003fe2:	5b                   	pop    ebx
c0003fe3:	5e                   	pop    esi
c0003fe4:	5f                   	pop    edi
c0003fe5:	5d                   	pop    ebp
c0003fe6:	c3                   	ret    

c0003fe7 <f_write>:
c0003fe7:	55                   	push   ebp
c0003fe8:	57                   	push   edi
c0003fe9:	56                   	push   esi
c0003fea:	53                   	push   ebx
c0003feb:	83 ec 2c             	sub    esp,0x2c
c0003fee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ff2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003ff6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004000:	89 d8                	mov    eax,ebx
c0004002:	e8 94 e1 ff ff       	call   c000219b <validate>
c0004007:	89 c5                	mov    ebp,eax
c0004009:	85 c0                	test   eax,eax
c000400b:	0f 85 00 02 00 00    	jne    c0004211 <f_write+0x22a>
c0004011:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004015:	85 ed                	test   ebp,ebp
c0004017:	0f 85 f4 01 00 00    	jne    c0004211 <f_write+0x22a>
c000401d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004021:	0f 84 e5 01 00 00    	je     c000420c <f_write+0x225>
c0004027:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000402a:	89 c7                	mov    edi,eax
c000402c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004030:	0f 83 ea 00 00 00    	jae    c0004120 <f_write+0x139>
c0004036:	f7 d0                	not    eax
c0004038:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000403c:	e9 df 00 00 00       	jmp    c0004120 <f_write+0x139>
c0004041:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004044:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000404a:	0f 85 8b 01 00 00    	jne    c00041db <f_write+0x1f4>
c0004050:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004054:	89 d1                	mov    ecx,edx
c0004056:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000405a:	c1 e9 09             	shr    ecx,0x9
c000405d:	48                   	dec    eax
c000405e:	21 c8                	and    eax,ecx
c0004060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004064:	0f 84 c3 00 00 00    	je     c000412d <f_write+0x146>
c000406a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000406e:	0f 88 18 01 00 00    	js     c000418c <f_write+0x1a5>
c0004074:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004078:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000407b:	89 c8                	mov    eax,ecx
c000407d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004081:	e8 df de ff ff       	call   c0001f65 <clst2sect>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 84 c8 00 00 00    	je     c0004156 <f_write+0x16f>
c000408e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004092:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004096:	01 c7                	add    edi,eax
c0004098:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040a0:	0f 86 0d 01 00 00    	jbe    c00041b3 <f_write+0x1cc>
c00040a6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040aa:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ae:	c1 ee 09             	shr    esi,0x9
c00040b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040b5:	01 f2                	add    edx,esi
c00040b7:	39 c2                	cmp    edx,eax
c00040b9:	76 06                	jbe    c00040c1 <f_write+0xda>
c00040bb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040bf:	89 c6                	mov    esi,eax
c00040c1:	56                   	push   esi
c00040c2:	57                   	push   edi
c00040c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040cb:	50                   	push   eax
c00040cc:	e8 19 dc ff ff       	call   c0001cea <disk_write>
c00040d1:	83 c4 10             	add    esp,0x10
c00040d4:	85 c0                	test   eax,eax
c00040d6:	0f 85 8d 00 00 00    	jne    c0004169 <f_write+0x182>
c00040dc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040df:	29 fa                	sub    edx,edi
c00040e1:	39 f2                	cmp    edx,esi
c00040e3:	73 18                	jae    c00040fd <f_write+0x116>
c00040e5:	c1 e2 09             	shl    edx,0x9
c00040e8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040eb:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040ef:	b9 00 02 00 00       	mov    ecx,0x200
c00040f4:	e8 52 dc ff ff       	call   c0001d4b <mem_cpy>
c00040f9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040fd:	c1 e6 09             	shl    esi,0x9
c0004100:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004104:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004108:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000410c:	01 30                	add    DWORD PTR [eax],esi
c000410e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004111:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004114:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004117:	39 f0                	cmp    eax,esi
c0004119:	73 02                	jae    c000411d <f_write+0x136>
c000411b:	89 f0                	mov    eax,esi
c000411d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004120:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004125:	0f 85 16 ff ff ff    	jne    c0004041 <f_write+0x5a>
c000412b:	eb 1b                	jmp    c0004148 <f_write+0x161>
c000412d:	85 d2                	test   edx,edx
c000412f:	75 09                	jne    c000413a <f_write+0x153>
c0004131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004134:	85 c0                	test   eax,eax
c0004136:	75 19                	jne    c0004151 <f_write+0x16a>
c0004138:	eb 03                	jmp    c000413d <f_write+0x156>
c000413a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000413d:	89 d8                	mov    eax,ebx
c000413f:	e8 97 f1 ff ff       	call   c00032db <create_chain>
c0004144:	85 c0                	test   eax,eax
c0004146:	75 09                	jne    c0004151 <f_write+0x16a>
c0004148:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000414c:	e9 c0 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004151:	83 f8 01             	cmp    eax,0x1
c0004154:	75 0e                	jne    c0004164 <f_write+0x17d>
c0004156:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000415a:	bd 02 00 00 00       	mov    ebp,0x2
c000415f:	e9 ad 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004164:	83 f8 ff             	cmp    eax,0xffffffff
c0004167:	75 0e                	jne    c0004177 <f_write+0x190>
c0004169:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000416d:	bd 01 00 00 00       	mov    ebp,0x1
c0004172:	e9 9a 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004177:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000417a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000417e:	0f 85 e6 fe ff ff    	jne    c000406a <f_write+0x83>
c0004184:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004187:	e9 de fe ff ff       	jmp    c000406a <f_write+0x83>
c000418c:	6a 01                	push   0x1
c000418e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004191:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004194:	50                   	push   eax
c0004195:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004199:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000419d:	50                   	push   eax
c000419e:	e8 47 db ff ff       	call   c0001cea <disk_write>
c00041a3:	83 c4 10             	add    esp,0x10
c00041a6:	85 c0                	test   eax,eax
c00041a8:	75 bf                	jne    c0004169 <f_write+0x182>
c00041aa:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ae:	e9 c1 fe ff ff       	jmp    c0004074 <f_write+0x8d>
c00041b3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041b6:	74 20                	je     c00041d8 <f_write+0x1f1>
c00041b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041bb:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041be:	76 18                	jbe    c00041d8 <f_write+0x1f1>
c00041c0:	6a 01                	push   0x1
c00041c2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041c5:	57                   	push   edi
c00041c6:	50                   	push   eax
c00041c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041cb:	50                   	push   eax
c00041cc:	e8 03 db ff ff       	call   c0001cd4 <disk_read>
c00041d1:	83 c4 10             	add    esp,0x10
c00041d4:	85 c0                	test   eax,eax
c00041d6:	75 91                	jne    c0004169 <f_write+0x182>
c00041d8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041de:	ba 00 02 00 00       	mov    edx,0x200
c00041e3:	25 ff 01 00 00       	and    eax,0x1ff
c00041e8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041ec:	29 c2                	sub    edx,eax
c00041ee:	39 d6                	cmp    esi,edx
c00041f0:	76 02                	jbe    c00041f4 <f_write+0x20d>
c00041f2:	89 d6                	mov    esi,edx
c00041f4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041f8:	89 f1                	mov    ecx,esi
c00041fa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041fe:	e8 48 db ff ff       	call   c0001d4b <mem_cpy>
c0004203:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004207:	e9 f4 fe ff ff       	jmp    c0004100 <f_write+0x119>
c000420c:	bd 07 00 00 00       	mov    ebp,0x7
c0004211:	83 c4 2c             	add    esp,0x2c
c0004214:	89 e8                	mov    eax,ebp
c0004216:	5b                   	pop    ebx
c0004217:	5e                   	pop    esi
c0004218:	5f                   	pop    edi
c0004219:	5d                   	pop    ebp
c000421a:	c3                   	ret    

c000421b <f_sync>:
c000421b:	56                   	push   esi
c000421c:	53                   	push   ebx
c000421d:	83 ec 14             	sub    esp,0x14
c0004220:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004224:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 6c df ff ff       	call   c000219b <validate>
c000422f:	85 c0                	test   eax,eax
c0004231:	0f 85 93 00 00 00    	jne    c00042ca <f_sync+0xaf>
c0004237:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000423a:	f6 c2 40             	test   dl,0x40
c000423d:	0f 84 87 00 00 00    	je     c00042ca <f_sync+0xaf>
c0004243:	84 d2                	test   dl,dl
c0004245:	79 29                	jns    c0004270 <f_sync+0x55>
c0004247:	6a 01                	push   0x1
c0004249:	8d 43 28             	lea    eax,[ebx+0x28]
c000424c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000424f:	50                   	push   eax
c0004250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004254:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004258:	50                   	push   eax
c0004259:	e8 8c da ff ff       	call   c0001cea <disk_write>
c000425e:	83 c4 10             	add    esp,0x10
c0004261:	89 c2                	mov    edx,eax
c0004263:	b8 01 00 00 00       	mov    eax,0x1
c0004268:	85 d2                	test   edx,edx
c000426a:	75 5e                	jne    c00042ca <f_sync+0xaf>
c000426c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004270:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004277:	e8 c9 df ff ff       	call   c0002245 <move_window>
c000427c:	85 c0                	test   eax,eax
c000427e:	75 4a                	jne    c00042ca <f_sync+0xaf>
c0004280:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004283:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004287:	89 f2                	mov    edx,esi
c0004289:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000428c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000428e:	e8 56 ee ff ff       	call   c00030e9 <st_clust.isra.1>
c0004293:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004296:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004299:	e8 aa da ff ff       	call   c0001d48 <st_dword>
c000429e:	8d 46 16             	lea    eax,[esi+0x16]
c00042a1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042a6:	e8 9d da ff ff       	call   c0001d48 <st_dword>
c00042ab:	8d 46 12             	lea    eax,[esi+0x12]
c00042ae:	31 d2                	xor    edx,edx
c00042b0:	e8 8f da ff ff       	call   c0001d44 <st_word>
c00042b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042c1:	e8 bf e9 ff ff       	call   c0002c85 <sync_fs>
c00042c6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ca:	83 c4 14             	add    esp,0x14
c00042cd:	5b                   	pop    ebx
c00042ce:	5e                   	pop    esi
c00042cf:	c3                   	ret    

c00042d0 <f_close>:
c00042d0:	53                   	push   ebx
c00042d1:	83 ec 24             	sub    esp,0x24
c00042d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042d8:	53                   	push   ebx
c00042d9:	e8 3d ff ff ff       	call   c000421b <f_sync>
c00042de:	83 c4 10             	add    esp,0x10
c00042e1:	85 c0                	test   eax,eax
c00042e3:	75 15                	jne    c00042fa <f_close+0x2a>
c00042e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042e9:	89 d8                	mov    eax,ebx
c00042eb:	e8 ab de ff ff       	call   c000219b <validate>
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 06                	jne    c00042fa <f_close+0x2a>
c00042f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042fa:	83 c4 18             	add    esp,0x18
c00042fd:	5b                   	pop    ebx
c00042fe:	c3                   	ret    

c00042ff <f_lseek>:
c00042ff:	55                   	push   ebp
c0004300:	57                   	push   edi
c0004301:	56                   	push   esi
c0004302:	53                   	push   ebx
c0004303:	83 ec 2c             	sub    esp,0x2c
c0004306:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000430a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000430e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004312:	89 d8                	mov    eax,ebx
c0004314:	e8 82 de ff ff       	call   c000219b <validate>
c0004319:	89 c5                	mov    ebp,eax
c000431b:	85 c0                	test   eax,eax
c000431d:	0f 85 79 01 00 00    	jne    c000449c <f_lseek+0x19d>
c0004323:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004327:	85 ed                	test   ebp,ebp
c0004329:	0f 85 6d 01 00 00    	jne    c000449c <f_lseek+0x19d>
c000432f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004332:	39 f0                	cmp    eax,esi
c0004334:	73 08                	jae    c000433e <f_lseek+0x3f>
c0004336:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433a:	75 02                	jne    c000433e <f_lseek+0x3f>
c000433c:	89 c6                	mov    esi,eax
c000433e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004341:	85 f6                	test   esi,esi
c0004343:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000434a:	75 07                	jne    c0004353 <f_lseek+0x54>
c000434c:	31 f6                	xor    esi,esi
c000434e:	e9 e2 00 00 00       	jmp    c0004435 <f_lseek+0x136>
c0004353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004357:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000435b:	c1 e7 09             	shl    edi,0x9
c000435e:	85 c9                	test   ecx,ecx
c0004360:	74 28                	je     c000438a <f_lseek+0x8b>
c0004362:	49                   	dec    ecx
c0004363:	31 d2                	xor    edx,edx
c0004365:	8d 46 ff             	lea    eax,[esi-0x1]
c0004368:	f7 f7                	div    edi
c000436a:	31 d2                	xor    edx,edx
c000436c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004370:	89 c8                	mov    eax,ecx
c0004372:	f7 f7                	div    edi
c0004374:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004378:	72 10                	jb     c000438a <f_lseek+0x8b>
c000437a:	89 f8                	mov    eax,edi
c000437c:	f7 d8                	neg    eax
c000437e:	21 c1                	and    ecx,eax
c0004380:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004383:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004386:	29 ce                	sub    esi,ecx
c0004388:	eb 3c                	jmp    c00043c6 <f_lseek+0xc7>
c000438a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000438d:	85 c0                	test   eax,eax
c000438f:	75 32                	jne    c00043c3 <f_lseek+0xc4>
c0004391:	31 d2                	xor    edx,edx
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 41 ef ff ff       	call   c00032db <create_chain>
c000439a:	83 f8 01             	cmp    eax,0x1
c000439d:	75 0e                	jne    c00043ad <f_lseek+0xae>
c000439f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043a3:	bd 02 00 00 00       	mov    ebp,0x2
c00043a8:	e9 ef 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043ad:	83 f8 ff             	cmp    eax,0xffffffff
c00043b0:	75 0e                	jne    c00043c0 <f_lseek+0xc1>
c00043b2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043b6:	bd 01 00 00 00       	mov    ebp,0x1
c00043bb:	e9 dc 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043c0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043c6:	85 c0                	test   eax,eax
c00043c8:	74 82                	je     c000434c <f_lseek+0x4d>
c00043ca:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043cd:	39 fe                	cmp    esi,edi
c00043cf:	76 3d                	jbe    c000440e <f_lseek+0x10f>
c00043d1:	01 fa                	add    edx,edi
c00043d3:	29 fe                	sub    esi,edi
c00043d5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043d8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043dc:	89 c2                	mov    edx,eax
c00043de:	74 0d                	je     c00043ed <f_lseek+0xee>
c00043e0:	89 d8                	mov    eax,ebx
c00043e2:	e8 f4 ee ff ff       	call   c00032db <create_chain>
c00043e7:	85 c0                	test   eax,eax
c00043e9:	75 09                	jne    c00043f4 <f_lseek+0xf5>
c00043eb:	eb 1f                	jmp    c000440c <f_lseek+0x10d>
c00043ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043ef:	e8 1d ed ff ff       	call   c0003111 <get_fat.isra.2>
c00043f4:	83 f8 ff             	cmp    eax,0xffffffff
c00043f7:	74 b9                	je     c00043b2 <f_lseek+0xb3>
c00043f9:	83 f8 01             	cmp    eax,0x1
c00043fc:	76 a1                	jbe    c000439f <f_lseek+0xa0>
c00043fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004402:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004405:	76 98                	jbe    c000439f <f_lseek+0xa0>
c0004407:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000440a:	eb be                	jmp    c00043ca <f_lseek+0xcb>
c000440c:	31 f6                	xor    esi,esi
c000440e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004411:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004417:	0f 84 2f ff ff ff    	je     c000434c <f_lseek+0x4d>
c000441d:	89 c2                	mov    edx,eax
c000441f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004423:	e8 3d db ff ff       	call   c0001f65 <clst2sect>
c0004428:	85 c0                	test   eax,eax
c000442a:	0f 84 6f ff ff ff    	je     c000439f <f_lseek+0xa0>
c0004430:	c1 ee 09             	shr    esi,0x9
c0004433:	01 c6                	add    esi,eax
c0004435:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004438:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000443b:	76 07                	jbe    c0004444 <f_lseek+0x145>
c000443d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004440:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004444:	a9 ff 01 00 00       	test   eax,0x1ff
c0004449:	74 51                	je     c000449c <f_lseek+0x19d>
c000444b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000444e:	39 f0                	cmp    eax,esi
c0004450:	74 4a                	je     c000449c <f_lseek+0x19d>
c0004452:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004455:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004459:	79 21                	jns    c000447c <f_lseek+0x17d>
c000445b:	6a 01                	push   0x1
c000445d:	50                   	push   eax
c000445e:	57                   	push   edi
c000445f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004463:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004467:	50                   	push   eax
c0004468:	e8 7d d8 ff ff       	call   c0001cea <disk_write>
c000446d:	83 c4 10             	add    esp,0x10
c0004470:	85 c0                	test   eax,eax
c0004472:	0f 85 3a ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004478:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000447c:	6a 01                	push   0x1
c000447e:	56                   	push   esi
c000447f:	57                   	push   edi
c0004480:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004484:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004488:	50                   	push   eax
c0004489:	e8 46 d8 ff ff       	call   c0001cd4 <disk_read>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	85 c0                	test   eax,eax
c0004493:	0f 85 19 ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004499:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000449c:	83 c4 2c             	add    esp,0x2c
c000449f:	89 e8                	mov    eax,ebp
c00044a1:	5b                   	pop    ebx
c00044a2:	5e                   	pop    esi
c00044a3:	5f                   	pop    edi
c00044a4:	5d                   	pop    ebp
c00044a5:	c3                   	ret    

c00044a6 <f_opendir>:
c00044a6:	56                   	push   esi
c00044a7:	b8 09 00 00 00       	mov    eax,0x9
c00044ac:	53                   	push   ebx
c00044ad:	83 ec 24             	sub    esp,0x24
c00044b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044b4:	85 db                	test   ebx,ebx
c00044b6:	0f 84 af 00 00 00    	je     c000456b <f_opendir+0xc5>
c00044bc:	31 c9                	xor    ecx,ecx
c00044be:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044c2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044c6:	e8 cd de ff ff       	call   c0002398 <mount_volume>
c00044cb:	85 c0                	test   eax,eax
c00044cd:	0f 85 92 00 00 00    	jne    c0004565 <f_opendir+0xbf>
c00044d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d7:	83 ec 0c             	sub    esp,0xc
c00044da:	89 03                	mov    DWORD PTR [ebx],eax
c00044dc:	68 00 02 00 00       	push   0x200
c00044e1:	e8 86 15 00 00       	call   c0005a6c <ff_memalloc>
c00044e6:	83 c4 10             	add    esp,0x10
c00044e9:	89 c6                	mov    esi,eax
c00044eb:	b8 11 00 00 00       	mov    eax,0x11
c00044f0:	85 f6                	test   esi,esi
c00044f2:	74 77                	je     c000456b <f_opendir+0xc5>
c00044f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044fc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 9c f3 ff ff       	call   c00038a2 <follow_path>
c0004506:	85 c0                	test   eax,eax
c0004508:	75 37                	jne    c0004541 <f_opendir+0x9b>
c000450a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000450e:	78 1c                	js     c000452c <f_opendir+0x86>
c0004510:	b8 05 00 00 00       	mov    eax,0x5
c0004515:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004519:	74 26                	je     c0004541 <f_opendir+0x9b>
c000451b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000451e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004522:	8a 00                	mov    al,BYTE PTR [eax]
c0004524:	e8 97 eb ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004529:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000452c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004530:	31 d2                	xor    edx,edx
c0004532:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004536:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000453a:	89 d8                	mov    eax,ebx
c000453c:	e8 d2 ec ff ff       	call   c0003213 <dir_sdi>
c0004541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004545:	83 ec 0c             	sub    esp,0xc
c0004548:	56                   	push   esi
c0004549:	e8 36 15 00 00       	call   c0005a84 <ff_memfree>
c000454e:	83 c4 10             	add    esp,0x10
c0004551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004555:	83 f8 04             	cmp    eax,0x4
c0004558:	74 06                	je     c0004560 <f_opendir+0xba>
c000455a:	85 c0                	test   eax,eax
c000455c:	74 0d                	je     c000456b <f_opendir+0xc5>
c000455e:	eb 05                	jmp    c0004565 <f_opendir+0xbf>
c0004560:	b8 05 00 00 00       	mov    eax,0x5
c0004565:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000456b:	83 c4 24             	add    esp,0x24
c000456e:	5b                   	pop    ebx
c000456f:	5e                   	pop    esi
c0004570:	c3                   	ret    

c0004571 <f_closedir>:
c0004571:	53                   	push   ebx
c0004572:	83 ec 18             	sub    esp,0x18
c0004575:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004579:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000457d:	89 d8                	mov    eax,ebx
c000457f:	e8 17 dc ff ff       	call   c000219b <validate>
c0004584:	85 c0                	test   eax,eax
c0004586:	75 06                	jne    c000458e <f_closedir+0x1d>
c0004588:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458e:	83 c4 18             	add    esp,0x18
c0004591:	5b                   	pop    ebx
c0004592:	c3                   	ret    

c0004593 <f_readdir>:
c0004593:	57                   	push   edi
c0004594:	56                   	push   esi
c0004595:	53                   	push   ebx
c0004596:	83 ec 20             	sub    esp,0x20
c0004599:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000459d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045a1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045a5:	89 d8                	mov    eax,ebx
c00045a7:	e8 ef db ff ff       	call   c000219b <validate>
c00045ac:	85 c0                	test   eax,eax
c00045ae:	75 6e                	jne    c000461e <f_readdir+0x8b>
c00045b0:	85 ff                	test   edi,edi
c00045b2:	75 0b                	jne    c00045bf <f_readdir+0x2c>
c00045b4:	31 d2                	xor    edx,edx
c00045b6:	89 d8                	mov    eax,ebx
c00045b8:	e8 56 ec ff ff       	call   c0003213 <dir_sdi>
c00045bd:	eb 5f                	jmp    c000461e <f_readdir+0x8b>
c00045bf:	83 ec 0c             	sub    esp,0xc
c00045c2:	68 00 02 00 00       	push   0x200
c00045c7:	e8 a0 14 00 00       	call   c0005a6c <ff_memalloc>
c00045cc:	83 c4 10             	add    esp,0x10
c00045cf:	89 c6                	mov    esi,eax
c00045d1:	b8 11 00 00 00       	mov    eax,0x11
c00045d6:	85 f6                	test   esi,esi
c00045d8:	74 44                	je     c000461e <f_readdir+0x8b>
c00045da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045de:	31 d2                	xor    edx,edx
c00045e0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 1a f0 ff ff       	call   c0003604 <dir_read>
c00045ea:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045ef:	75 19                	jne    c000460a <f_readdir+0x77>
c00045f1:	89 fa                	mov    edx,edi
c00045f3:	89 d8                	mov    eax,ebx
c00045f5:	e8 e2 e8 ff ff       	call   c0002edc <get_fileinfo>
c00045fa:	31 d2                	xor    edx,edx
c00045fc:	89 d8                	mov    eax,ebx
c00045fe:	e8 9b ee ff ff       	call   c000349e <dir_next>
c0004603:	83 f8 04             	cmp    eax,0x4
c0004606:	75 02                	jne    c000460a <f_readdir+0x77>
c0004608:	31 c0                	xor    eax,eax
c000460a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000460e:	83 ec 0c             	sub    esp,0xc
c0004611:	56                   	push   esi
c0004612:	e8 6d 14 00 00       	call   c0005a84 <ff_memfree>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461e:	83 c4 20             	add    esp,0x20
c0004621:	5b                   	pop    ebx
c0004622:	5e                   	pop    esi
c0004623:	5f                   	pop    edi
c0004624:	c3                   	ret    

c0004625 <f_stat>:
c0004625:	57                   	push   edi
c0004626:	31 c9                	xor    ecx,ecx
c0004628:	56                   	push   esi
c0004629:	53                   	push   ebx
c000462a:	83 ec 30             	sub    esp,0x30
c000462d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004631:	89 e2                	mov    edx,esp
c0004633:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004637:	e8 5c dd ff ff       	call   c0002398 <mount_volume>
c000463c:	89 c3                	mov    ebx,eax
c000463e:	85 c0                	test   eax,eax
c0004640:	75 59                	jne    c000469b <f_stat+0x76>
c0004642:	83 ec 0c             	sub    esp,0xc
c0004645:	bb 11 00 00 00       	mov    ebx,0x11
c000464a:	68 00 02 00 00       	push   0x200
c000464f:	e8 18 14 00 00       	call   c0005a6c <ff_memalloc>
c0004654:	83 c4 10             	add    esp,0x10
c0004657:	89 c6                	mov    esi,eax
c0004659:	85 c0                	test   eax,eax
c000465b:	74 3e                	je     c000469b <f_stat+0x76>
c000465d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004660:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004664:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004667:	89 e0                	mov    eax,esp
c0004669:	e8 34 f2 ff ff       	call   c00038a2 <follow_path>
c000466e:	89 c3                	mov    ebx,eax
c0004670:	85 c0                	test   eax,eax
c0004672:	75 1b                	jne    c000468f <f_stat+0x6a>
c0004674:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004679:	78 0f                	js     c000468a <f_stat+0x65>
c000467b:	85 ff                	test   edi,edi
c000467d:	74 10                	je     c000468f <f_stat+0x6a>
c000467f:	89 fa                	mov    edx,edi
c0004681:	89 e0                	mov    eax,esp
c0004683:	e8 54 e8 ff ff       	call   c0002edc <get_fileinfo>
c0004688:	eb 05                	jmp    c000468f <f_stat+0x6a>
c000468a:	bb 06 00 00 00       	mov    ebx,0x6
c000468f:	83 ec 0c             	sub    esp,0xc
c0004692:	56                   	push   esi
c0004693:	e8 ec 13 00 00       	call   c0005a84 <ff_memfree>
c0004698:	83 c4 10             	add    esp,0x10
c000469b:	83 c4 30             	add    esp,0x30
c000469e:	89 d8                	mov    eax,ebx
c00046a0:	5b                   	pop    ebx
c00046a1:	5e                   	pop    esi
c00046a2:	5f                   	pop    edi
c00046a3:	c3                   	ret    

c00046a4 <f_getfree>:
c00046a4:	55                   	push   ebp
c00046a5:	31 c9                	xor    ecx,ecx
c00046a7:	57                   	push   edi
c00046a8:	56                   	push   esi
c00046a9:	53                   	push   ebx
c00046aa:	83 ec 2c             	sub    esp,0x2c
c00046ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046b1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046b5:	e8 de dc ff ff       	call   c0002398 <mount_volume>
c00046ba:	89 c7                	mov    edi,eax
c00046bc:	85 c0                	test   eax,eax
c00046be:	0f 85 d8 00 00 00    	jne    c000479c <f_getfree+0xf8>
c00046c4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046cc:	89 30                	mov    DWORD PTR [eax],esi
c00046ce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046d1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046d4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046d7:	39 d0                	cmp    eax,edx
c00046d9:	77 0b                	ja     c00046e6 <f_getfree+0x42>
c00046db:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046df:	89 01                	mov    DWORD PTR [ecx],eax
c00046e1:	e9 b6 00 00 00       	jmp    c000479c <f_getfree+0xf8>
c00046e6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046e9:	75 29                	jne    c0004714 <f_getfree+0x70>
c00046eb:	bd 02 00 00 00       	mov    ebp,0x2
c00046f0:	31 db                	xor    ebx,ebx
c00046f2:	89 ea                	mov    edx,ebp
c00046f4:	89 f0                	mov    eax,esi
c00046f6:	e8 16 ea ff ff       	call   c0003111 <get_fat.isra.2>
c00046fb:	83 f8 ff             	cmp    eax,0xffffffff
c00046fe:	74 7b                	je     c000477b <f_getfree+0xd7>
c0004700:	83 f8 01             	cmp    eax,0x1
c0004703:	74 7d                	je     c0004782 <f_getfree+0xde>
c0004705:	83 d3 00             	adc    ebx,0x0
c0004708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000470c:	45                   	inc    ebp
c000470d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004710:	77 e0                	ja     c00046f2 <f_getfree+0x4e>
c0004712:	eb 77                	jmp    c000478b <f_getfree+0xe7>
c0004714:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004717:	31 db                	xor    ebx,ebx
c0004719:	31 f6                	xor    esi,esi
c000471b:	85 f6                	test   esi,esi
c000471d:	75 18                	jne    c0004737 <f_getfree+0x93>
c000471f:	8d 42 01             	lea    eax,[edx+0x1]
c0004722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004726:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472a:	e8 16 db ff ff       	call   c0002245 <move_window>
c000472f:	85 c0                	test   eax,eax
c0004731:	75 56                	jne    c0004789 <f_getfree+0xe5>
c0004733:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004737:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000473b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000473f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004743:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004746:	75 11                	jne    c0004759 <f_getfree+0xb5>
c0004748:	e8 d2 d5 ff ff       	call   c0001d1f <ld_word>
c000474d:	66 83 f8 01          	cmp    ax,0x1
c0004751:	83 d3 00             	adc    ebx,0x0
c0004754:	83 c6 02             	add    esi,0x2
c0004757:	eb 13                	jmp    c000476c <f_getfree+0xc8>
c0004759:	e8 ce d5 ff ff       	call   c0001d2c <ld_dword>
c000475e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004763:	83 f8 01             	cmp    eax,0x1
c0004766:	83 d3 00             	adc    ebx,0x0
c0004769:	83 c6 04             	add    esi,0x4
c000476c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004772:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004776:	4d                   	dec    ebp
c0004777:	75 a2                	jne    c000471b <f_getfree+0x77>
c0004779:	eb 10                	jmp    c000478b <f_getfree+0xe7>
c000477b:	bf 01 00 00 00       	mov    edi,0x1
c0004780:	eb 09                	jmp    c000478b <f_getfree+0xe7>
c0004782:	bf 02 00 00 00       	mov    edi,0x2
c0004787:	eb 02                	jmp    c000478b <f_getfree+0xe7>
c0004789:	89 c7                	mov    edi,eax
c000478b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000478f:	89 18                	mov    DWORD PTR [eax],ebx
c0004791:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004795:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004798:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000479c:	83 c4 2c             	add    esp,0x2c
c000479f:	89 f8                	mov    eax,edi
c00047a1:	5b                   	pop    ebx
c00047a2:	5e                   	pop    esi
c00047a3:	5f                   	pop    edi
c00047a4:	5d                   	pop    ebp
c00047a5:	c3                   	ret    

c00047a6 <f_truncate>:
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 14             	sub    esp,0x14
c00047ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047af:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047b3:	89 d8                	mov    eax,ebx
c00047b5:	e8 e1 d9 ff ff       	call   c000219b <validate>
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	0f 85 be 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047c4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047c8:	85 f6                	test   esi,esi
c00047ca:	0f 85 b2 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047d0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047d4:	0f 84 a3 00 00 00    	je     c000487d <f_truncate+0xd7>
c00047da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047e0:	0f 83 9c 00 00 00    	jae    c0004882 <f_truncate+0xdc>
c00047e6:	85 c0                	test   eax,eax
c00047e8:	75 15                	jne    c00047ff <f_truncate+0x59>
c00047ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047ed:	31 c9                	xor    ecx,ecx
c00047ef:	89 d8                	mov    eax,ebx
c00047f1:	e8 1f ec ff ff       	call   c0003415 <remove_chain>
c00047f6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047fd:	eb 35                	jmp    c0004834 <f_truncate+0x8e>
c00047ff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004802:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004804:	e8 08 e9 ff ff       	call   c0003111 <get_fat.isra.2>
c0004809:	89 c2                	mov    edx,eax
c000480b:	b8 01 00 00 00       	mov    eax,0x1
c0004810:	83 fa ff             	cmp    edx,0xffffffff
c0004813:	74 1f                	je     c0004834 <f_truncate+0x8e>
c0004815:	b8 02 00 00 00       	mov    eax,0x2
c000481a:	83 fa 01             	cmp    edx,0x1
c000481d:	74 15                	je     c0004834 <f_truncate+0x8e>
c000481f:	31 c0                	xor    eax,eax
c0004821:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004825:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004828:	76 0a                	jbe    c0004834 <f_truncate+0x8e>
c000482a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000482d:	89 d8                	mov    eax,ebx
c000482f:	e8 e1 eb ff ff       	call   c0003415 <remove_chain>
c0004834:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004837:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000483a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000483d:	83 ca 40             	or     edx,0x40
c0004840:	85 c0                	test   eax,eax
c0004842:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004845:	75 2f                	jne    c0004876 <f_truncate+0xd0>
c0004847:	84 d2                	test   dl,dl
c0004849:	79 37                	jns    c0004882 <f_truncate+0xdc>
c000484b:	6a 01                	push   0x1
c000484d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004850:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004853:	50                   	push   eax
c0004854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004858:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000485c:	50                   	push   eax
c000485d:	e8 88 d4 ff ff       	call   c0001cea <disk_write>
c0004862:	83 c4 10             	add    esp,0x10
c0004865:	85 c0                	test   eax,eax
c0004867:	75 08                	jne    c0004871 <f_truncate+0xcb>
c0004869:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000486d:	31 f6                	xor    esi,esi
c000486f:	eb 11                	jmp    c0004882 <f_truncate+0xdc>
c0004871:	b8 01 00 00 00       	mov    eax,0x1
c0004876:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004879:	89 c6                	mov    esi,eax
c000487b:	eb 05                	jmp    c0004882 <f_truncate+0xdc>
c000487d:	be 07 00 00 00       	mov    esi,0x7
c0004882:	89 f0                	mov    eax,esi
c0004884:	83 c4 14             	add    esp,0x14
c0004887:	5b                   	pop    ebx
c0004888:	5e                   	pop    esi
c0004889:	c3                   	ret    

c000488a <f_unlink>:
c000488a:	55                   	push   ebp
c000488b:	b9 02 00 00 00       	mov    ecx,0x2
c0004890:	57                   	push   edi
c0004891:	56                   	push   esi
c0004892:	53                   	push   ebx
c0004893:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004899:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000489d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048a4:	e8 ef da ff ff       	call   c0002398 <mount_volume>
c00048a9:	85 c0                	test   eax,eax
c00048ab:	0f 85 f0 00 00 00    	jne    c00049a1 <f_unlink+0x117>
c00048b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b5:	83 ec 0c             	sub    esp,0xc
c00048b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048bc:	68 00 02 00 00       	push   0x200
c00048c1:	e8 a6 11 00 00       	call   c0005a6c <ff_memalloc>
c00048c6:	83 c4 10             	add    esp,0x10
c00048c9:	89 c3                	mov    ebx,eax
c00048cb:	b8 11 00 00 00       	mov    eax,0x11
c00048d0:	85 db                	test   ebx,ebx
c00048d2:	0f 84 c9 00 00 00    	je     c00049a1 <f_unlink+0x117>
c00048d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048dc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048e3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048ea:	e8 b3 ef ff ff       	call   c00038a2 <follow_path>
c00048ef:	85 c0                	test   eax,eax
c00048f1:	0f 85 96 00 00 00    	jne    c000498d <f_unlink+0x103>
c00048f7:	b8 06 00 00 00       	mov    eax,0x6
c00048fc:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004901:	0f 88 86 00 00 00    	js     c000498d <f_unlink+0x103>
c0004907:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000490c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004912:	74 07                	je     c000491b <f_unlink+0x91>
c0004914:	b8 07 00 00 00       	mov    eax,0x7
c0004919:	eb 72                	jmp    c000498d <f_unlink+0x103>
c000491b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000491f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004923:	8a 07                	mov    al,BYTE PTR [edi]
c0004925:	e8 96 e7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000492a:	83 e5 10             	and    ebp,0x10
c000492d:	89 c6                	mov    esi,eax
c000492f:	75 0f                	jne    c0004940 <f_unlink+0xb6>
c0004931:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004935:	e8 e7 ed ff ff       	call   c0003721 <dir_remove>
c000493a:	85 c0                	test   eax,eax
c000493c:	74 2f                	je     c000496d <f_unlink+0xe3>
c000493e:	eb 4d                	jmp    c000498d <f_unlink+0x103>
c0004940:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004944:	31 d2                	xor    edx,edx
c0004946:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000494a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494e:	e8 c0 e8 ff ff       	call   c0003213 <dir_sdi>
c0004953:	85 c0                	test   eax,eax
c0004955:	75 36                	jne    c000498d <f_unlink+0x103>
c0004957:	31 d2                	xor    edx,edx
c0004959:	8d 44 24 50          	lea    eax,[esp+0x50]
c000495d:	e8 a2 ec ff ff       	call   c0003604 <dir_read>
c0004962:	85 c0                	test   eax,eax
c0004964:	74 ae                	je     c0004914 <f_unlink+0x8a>
c0004966:	83 f8 04             	cmp    eax,0x4
c0004969:	75 22                	jne    c000498d <f_unlink+0x103>
c000496b:	eb c4                	jmp    c0004931 <f_unlink+0xa7>
c000496d:	85 f6                	test   esi,esi
c000496f:	75 0b                	jne    c000497c <f_unlink+0xf2>
c0004971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004975:	e8 0b e3 ff ff       	call   c0002c85 <sync_fs>
c000497a:	eb 11                	jmp    c000498d <f_unlink+0x103>
c000497c:	31 c9                	xor    ecx,ecx
c000497e:	89 f2                	mov    edx,esi
c0004980:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004984:	e8 8c ea ff ff       	call   c0003415 <remove_chain>
c0004989:	85 c0                	test   eax,eax
c000498b:	74 e4                	je     c0004971 <f_unlink+0xe7>
c000498d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004991:	83 ec 0c             	sub    esp,0xc
c0004994:	53                   	push   ebx
c0004995:	e8 ea 10 00 00       	call   c0005a84 <ff_memfree>
c000499a:	83 c4 10             	add    esp,0x10
c000499d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049a1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049a7:	5b                   	pop    ebx
c00049a8:	5e                   	pop    esi
c00049a9:	5f                   	pop    edi
c00049aa:	5d                   	pop    ebp
c00049ab:	c3                   	ret    

c00049ac <f_mkdir>:
c00049ac:	57                   	push   edi
c00049ad:	b9 02 00 00 00       	mov    ecx,0x2
c00049b2:	56                   	push   esi
c00049b3:	53                   	push   ebx
c00049b4:	83 ec 50             	sub    esp,0x50
c00049b7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049bb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049bf:	e8 d4 d9 ff ff       	call   c0002398 <mount_volume>
c00049c4:	89 c3                	mov    ebx,eax
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 70 01 00 00    	jne    c0004b3e <f_mkdir+0x192>
c00049ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049d2:	bb 11 00 00 00       	mov    ebx,0x11
c00049d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	68 00 02 00 00       	push   0x200
c00049e3:	e8 84 10 00 00       	call   c0005a6c <ff_memalloc>
c00049e8:	83 c4 10             	add    esp,0x10
c00049eb:	89 c7                	mov    edi,eax
c00049ed:	85 c0                	test   eax,eax
c00049ef:	0f 84 49 01 00 00    	je     c0004b3e <f_mkdir+0x192>
c00049f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a00:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a04:	e8 99 ee ff ff       	call   c00038a2 <follow_path>
c0004a09:	89 c3                	mov    ebx,eax
c0004a0b:	85 c0                	test   eax,eax
c0004a0d:	74 3e                	je     c0004a4d <f_mkdir+0xa1>
c0004a0f:	83 f8 04             	cmp    eax,0x4
c0004a12:	75 3e                	jne    c0004a52 <f_mkdir+0xa6>
c0004a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a18:	31 d2                	xor    edx,edx
c0004a1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a22:	e8 b4 e8 ff ff       	call   c00032db <create_chain>
c0004a27:	89 c6                	mov    esi,eax
c0004a29:	85 c0                	test   eax,eax
c0004a2b:	74 0c                	je     c0004a39 <f_mkdir+0x8d>
c0004a2d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a32:	83 f8 01             	cmp    eax,0x1
c0004a35:	74 07                	je     c0004a3e <f_mkdir+0x92>
c0004a37:	eb 2a                	jmp    c0004a63 <f_mkdir+0xb7>
c0004a39:	bb 07 00 00 00       	mov    ebx,0x7
c0004a3e:	31 c9                	xor    ecx,ecx
c0004a40:	89 f2                	mov    edx,esi
c0004a42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a46:	e8 ca e9 ff ff       	call   c0003415 <remove_chain>
c0004a4b:	eb 05                	jmp    c0004a52 <f_mkdir+0xa6>
c0004a4d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a52:	83 ec 0c             	sub    esp,0xc
c0004a55:	57                   	push   edi
c0004a56:	e8 29 10 00 00       	call   c0005a84 <ff_memfree>
c0004a5b:	83 c4 10             	add    esp,0x10
c0004a5e:	e9 db 00 00 00       	jmp    c0004b3e <f_mkdir+0x192>
c0004a63:	bb 01 00 00 00       	mov    ebx,0x1
c0004a68:	83 f8 ff             	cmp    eax,0xffffffff
c0004a6b:	74 d1                	je     c0004a3e <f_mkdir+0x92>
c0004a6d:	89 f2                	mov    edx,esi
c0004a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a73:	e8 73 dd ff ff       	call   c00027eb <dir_clear>
c0004a78:	89 c3                	mov    ebx,eax
c0004a7a:	85 c0                	test   eax,eax
c0004a7c:	75 c0                	jne    c0004a3e <f_mkdir+0x92>
c0004a7e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a87:	ba 20 00 00 00       	mov    edx,0x20
c0004a8c:	83 c0 34             	add    eax,0x34
c0004a8f:	e8 cc d2 ff ff       	call   c0001d60 <mem_set>
c0004a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a98:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a9d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004aa1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004aa5:	83 c0 4a             	add    eax,0x4a
c0004aa8:	e8 9b d2 ff ff       	call   c0001d48 <st_dword>
c0004aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab1:	89 f1                	mov    ecx,esi
c0004ab3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab6:	e8 2e e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004abb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004abf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ac4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ac7:	83 c0 54             	add    eax,0x54
c0004aca:	e8 7c d2 ff ff       	call   c0001d4b <mem_cpy>
c0004acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ad7:	8d 50 54             	lea    edx,[eax+0x54]
c0004ada:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ade:	e8 06 e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004ae3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004aeb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aef:	e8 42 ee ff ff       	call   c0003936 <dir_register>
c0004af4:	89 c3                	mov    ebx,eax
c0004af6:	85 c0                	test   eax,eax
c0004af8:	0f 85 40 ff ff ff    	jne    c0004a3e <f_mkdir+0x92>
c0004afe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b07:	83 c0 16             	add    eax,0x16
c0004b0a:	e8 39 d2 ff ff       	call   c0001d48 <st_dword>
c0004b0f:	89 f1                	mov    ecx,esi
c0004b11:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b19:	e8 cb e5 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b2a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b32:	e8 4e e1 ff ff       	call   c0002c85 <sync_fs>
c0004b37:	89 c3                	mov    ebx,eax
c0004b39:	e9 14 ff ff ff       	jmp    c0004a52 <f_mkdir+0xa6>
c0004b3e:	83 c4 50             	add    esp,0x50
c0004b41:	89 d8                	mov    eax,ebx
c0004b43:	5b                   	pop    ebx
c0004b44:	5e                   	pop    esi
c0004b45:	5f                   	pop    edi
c0004b46:	c3                   	ret    

c0004b47 <f_rename>:
c0004b47:	57                   	push   edi
c0004b48:	56                   	push   esi
c0004b49:	53                   	push   ebx
c0004b4a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b50:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b57:	e8 f2 d5 ff ff       	call   c000214e <get_ldnumber>
c0004b5c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b65:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b6c:	e8 27 d8 ff ff       	call   c0002398 <mount_volume>
c0004b71:	85 c0                	test   eax,eax
c0004b73:	0f 85 7a 01 00 00    	jne    c0004cf3 <f_rename+0x1ac>
c0004b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b7d:	83 ec 0c             	sub    esp,0xc
c0004b80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b84:	68 00 02 00 00       	push   0x200
c0004b89:	e8 de 0e 00 00       	call   c0005a6c <ff_memalloc>
c0004b8e:	83 c4 10             	add    esp,0x10
c0004b91:	89 c6                	mov    esi,eax
c0004b93:	b8 11 00 00 00       	mov    eax,0x11
c0004b98:	85 f6                	test   esi,esi
c0004b9a:	0f 84 53 01 00 00    	je     c0004cf3 <f_rename+0x1ac>
c0004ba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ba4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bae:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bb2:	e8 eb ec ff ff       	call   c00038a2 <follow_path>
c0004bb7:	85 c0                	test   eax,eax
c0004bb9:	0f 85 20 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bbf:	b8 06 00 00 00       	mov    eax,0x6
c0004bc4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bc9:	0f 85 10 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bd4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bd8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bdc:	e8 6a d1 ff ff       	call   c0001d4b <mem_cpy>
c0004be1:	b9 30 00 00 00       	mov    ecx,0x30
c0004be6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 58 d1 ff ff       	call   c0001d4b <mem_cpy>
c0004bf3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bfa:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bfe:	e8 9f ec ff ff       	call   c00038a2 <follow_path>
c0004c03:	85 c0                	test   eax,eax
c0004c05:	75 20                	jne    c0004c27 <f_rename+0xe0>
c0004c07:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c0b:	b8 08 00 00 00       	mov    eax,0x8
c0004c10:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c14:	0f 85 c5 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c1a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c1e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c25:	eb 03                	jmp    c0004c2a <f_rename+0xe3>
c0004c27:	83 f8 04             	cmp    eax,0x4
c0004c2a:	0f 85 af 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c30:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c34:	e8 fd ec ff ff       	call   c0003936 <dir_register>
c0004c39:	85 c0                	test   eax,eax
c0004c3b:	0f 85 9e 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c41:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c48:	b9 13 00 00 00       	mov    ecx,0x13
c0004c4d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c50:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c54:	e8 f2 d0 ff ff       	call   c0001d4b <mem_cpy>
c0004c59:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c5d:	a8 10                	test   al,0x10
c0004c5f:	75 03                	jne    c0004c64 <f_rename+0x11d>
c0004c61:	83 c8 20             	or     eax,0x20
c0004c64:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c6b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c6f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c73:	74 54                	je     c0004cc9 <f_rename+0x182>
c0004c75:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c79:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c7d:	74 4a                	je     c0004cc9 <f_rename+0x182>
c0004c7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c83:	89 da                	mov    edx,ebx
c0004c85:	8a 07                	mov    al,BYTE PTR [edi]
c0004c87:	e8 34 e4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004c8c:	89 c2                	mov    edx,eax
c0004c8e:	89 f8                	mov    eax,edi
c0004c90:	e8 d0 d2 ff ff       	call   c0001f65 <clst2sect>
c0004c95:	89 c2                	mov    edx,eax
c0004c97:	b8 02 00 00 00       	mov    eax,0x2
c0004c9c:	85 d2                	test   edx,edx
c0004c9e:	74 3f                	je     c0004cdf <f_rename+0x198>
c0004ca0:	89 f8                	mov    eax,edi
c0004ca2:	e8 9e d5 ff ff       	call   c0002245 <move_window>
c0004ca7:	85 c0                	test   eax,eax
c0004ca9:	75 34                	jne    c0004cdf <f_rename+0x198>
c0004cab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004caf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cb3:	75 14                	jne    c0004cc9 <f_rename+0x182>
c0004cb5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cb8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cbc:	e8 28 e4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cc5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ccd:	e8 4f ea ff ff       	call   c0003721 <dir_remove>
c0004cd2:	85 c0                	test   eax,eax
c0004cd4:	75 09                	jne    c0004cdf <f_rename+0x198>
c0004cd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cda:	e8 a6 df ff ff       	call   c0002c85 <sync_fs>
c0004cdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce3:	83 ec 0c             	sub    esp,0xc
c0004ce6:	56                   	push   esi
c0004ce7:	e8 98 0d 00 00       	call   c0005a84 <ff_memfree>
c0004cec:	83 c4 10             	add    esp,0x10
c0004cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004cf9:	5b                   	pop    ebx
c0004cfa:	5e                   	pop    esi
c0004cfb:	5f                   	pop    edi
c0004cfc:	c3                   	ret    

c0004cfd <f_chmod>:
c0004cfd:	57                   	push   edi
c0004cfe:	b9 02 00 00 00       	mov    ecx,0x2
c0004d03:	56                   	push   esi
c0004d04:	53                   	push   ebx
c0004d05:	83 ec 50             	sub    esp,0x50
c0004d08:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d0c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 7b d6 ff ff       	call   c0002398 <mount_volume>
c0004d1d:	85 c0                	test   eax,eax
c0004d1f:	75 7e                	jne    c0004d9f <f_chmod+0xa2>
c0004d21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d25:	83 ec 0c             	sub    esp,0xc
c0004d28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d2c:	68 00 02 00 00       	push   0x200
c0004d31:	e8 36 0d 00 00       	call   c0005a6c <ff_memalloc>
c0004d36:	83 c4 10             	add    esp,0x10
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	b8 11 00 00 00       	mov    eax,0x11
c0004d40:	85 f6                	test   esi,esi
c0004d42:	74 5b                	je     c0004d9f <f_chmod+0xa2>
c0004d44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d48:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d4c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d4f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d53:	e8 4a eb ff ff       	call   c00038a2 <follow_path>
c0004d58:	85 c0                	test   eax,eax
c0004d5a:	75 2f                	jne    c0004d8b <f_chmod+0x8e>
c0004d5c:	b8 06 00 00 00       	mov    eax,0x6
c0004d61:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d66:	75 23                	jne    c0004d8b <f_chmod+0x8e>
c0004d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d6c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d6f:	21 fb                	and    ebx,edi
c0004d71:	83 e3 27             	and    ebx,0x27
c0004d74:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d77:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d7e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d86:	e8 fa de ff ff       	call   c0002c85 <sync_fs>
c0004d8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8f:	83 ec 0c             	sub    esp,0xc
c0004d92:	56                   	push   esi
c0004d93:	e8 ec 0c 00 00       	call   c0005a84 <ff_memfree>
c0004d98:	83 c4 10             	add    esp,0x10
c0004d9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d9f:	83 c4 50             	add    esp,0x50
c0004da2:	5b                   	pop    ebx
c0004da3:	5e                   	pop    esi
c0004da4:	5f                   	pop    edi
c0004da5:	c3                   	ret    

c0004da6 <f_utime>:
c0004da6:	56                   	push   esi
c0004da7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dac:	53                   	push   ebx
c0004dad:	83 ec 54             	sub    esp,0x54
c0004db0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004db4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004db8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dbc:	e8 d7 d5 ff ff       	call   c0002398 <mount_volume>
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	0f 85 85 00 00 00    	jne    c0004e4e <f_utime+0xa8>
c0004dc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dd4:	68 00 02 00 00       	push   0x200
c0004dd9:	e8 8e 0c 00 00       	call   c0005a6c <ff_memalloc>
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	89 c3                	mov    ebx,eax
c0004de3:	b8 11 00 00 00       	mov    eax,0x11
c0004de8:	85 db                	test   ebx,ebx
c0004dea:	74 62                	je     c0004e4e <f_utime+0xa8>
c0004dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004df0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004df4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004df7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004dfb:	e8 a2 ea ff ff       	call   c00038a2 <follow_path>
c0004e00:	85 c0                	test   eax,eax
c0004e02:	75 36                	jne    c0004e3a <f_utime+0x94>
c0004e04:	b8 06 00 00 00       	mov    eax,0x6
c0004e09:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e0e:	75 2a                	jne    c0004e3a <f_utime+0x94>
c0004e10:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e14:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e18:	c1 e2 10             	shl    edx,0x10
c0004e1b:	09 c2                	or     edx,eax
c0004e1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e21:	83 c0 16             	add    eax,0x16
c0004e24:	e8 1f cf ff ff       	call   c0001d48 <st_dword>
c0004e29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e35:	e8 4b de ff ff       	call   c0002c85 <sync_fs>
c0004e3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e3e:	83 ec 0c             	sub    esp,0xc
c0004e41:	53                   	push   ebx
c0004e42:	e8 3d 0c 00 00       	call   c0005a84 <ff_memfree>
c0004e47:	83 c4 10             	add    esp,0x10
c0004e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e4e:	83 c4 54             	add    esp,0x54
c0004e51:	5b                   	pop    ebx
c0004e52:	5e                   	pop    esi
c0004e53:	c3                   	ret    

c0004e54 <f_getlabel>:
c0004e54:	55                   	push   ebp
c0004e55:	31 c9                	xor    ecx,ecx
c0004e57:	57                   	push   edi
c0004e58:	56                   	push   esi
c0004e59:	53                   	push   ebx
c0004e5a:	83 ec 5c             	sub    esp,0x5c
c0004e5d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e65:	e8 2e d5 ff ff       	call   c0002398 <mount_volume>
c0004e6a:	89 c6                	mov    esi,eax
c0004e6c:	85 c0                	test   eax,eax
c0004e6e:	0f 85 27 01 00 00    	jne    c0004f9b <f_getlabel+0x147>
c0004e74:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e79:	0f 84 d1 00 00 00    	je     c0004f50 <f_getlabel+0xfc>
c0004e7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e83:	31 d2                	xor    edx,edx
c0004e85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e89:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e91:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e95:	e8 79 e3 ff ff       	call   c0003213 <dir_sdi>
c0004e9a:	85 c0                	test   eax,eax
c0004e9c:	0f 85 a2 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004ea2:	ba 01 00 00 00       	mov    edx,0x1
c0004ea7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eab:	e8 54 e7 ff ff       	call   c0003604 <dir_read>
c0004eb0:	85 c0                	test   eax,eax
c0004eb2:	0f 85 8c 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004eb8:	31 db                	xor    ebx,ebx
c0004eba:	31 c9                	xor    ecx,ecx
c0004ebc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ec0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ec3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ec8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ed1:	e8 ca ce ff ff       	call   c0001da0 <dbc_1st>
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	74 16                	je     c0004ef0 <f_getlabel+0x9c>
c0004eda:	83 ff 0b             	cmp    edi,0xb
c0004edd:	74 11                	je     c0004ef0 <f_getlabel+0x9c>
c0004edf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ee8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004eeb:	c1 e0 08             	shl    eax,0x8
c0004eee:	09 c2                	or     edx,eax
c0004ef0:	0f b7 d2             	movzx  edx,dx
c0004ef3:	50                   	push   eax
c0004ef4:	50                   	push   eax
c0004ef5:	68 b5 01 00 00       	push   0x1b5
c0004efa:	52                   	push   edx
c0004efb:	e8 3c 0c 00 00       	call   c0005b3c <ff_oem2uni>
c0004f00:	83 c4 10             	add    esp,0x10
c0004f03:	66 85 c0             	test   ax,ax
c0004f06:	74 25                	je     c0004f2d <f_getlabel+0xd9>
c0004f08:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f0c:	0f b7 c0             	movzx  eax,ax
c0004f0f:	01 da                	add    edx,ebx
c0004f11:	b9 04 00 00 00       	mov    ecx,0x4
c0004f16:	e8 51 cf ff ff       	call   c0001e6c <put_utf>
c0004f1b:	84 c0                	test   al,al
c0004f1d:	74 0e                	je     c0004f2d <f_getlabel+0xd9>
c0004f1f:	0f b6 c0             	movzx  eax,al
c0004f22:	01 c3                	add    ebx,eax
c0004f24:	83 ff 0b             	cmp    edi,0xb
c0004f27:	74 06                	je     c0004f2f <f_getlabel+0xdb>
c0004f29:	89 f9                	mov    ecx,edi
c0004f2b:	eb 8f                	jmp    c0004ebc <f_getlabel+0x68>
c0004f2d:	31 db                	xor    ebx,ebx
c0004f2f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f33:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f36:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f3a:	74 14                	je     c0004f50 <f_getlabel+0xfc>
c0004f3c:	4b                   	dec    ebx
c0004f3d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f40:	74 f1                	je     c0004f33 <f_getlabel+0xdf>
c0004f42:	eb 0c                	jmp    c0004f50 <f_getlabel+0xfc>
c0004f44:	83 f8 04             	cmp    eax,0x4
c0004f47:	75 50                	jne    c0004f99 <f_getlabel+0x145>
c0004f49:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f50:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f55:	74 44                	je     c0004f9b <f_getlabel+0x147>
c0004f57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f5b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f5e:	e8 e2 d2 ff ff       	call   c0002245 <move_window>
c0004f63:	89 c6                	mov    esi,eax
c0004f65:	85 c0                	test   eax,eax
c0004f67:	75 32                	jne    c0004f9b <f_getlabel+0x147>
c0004f69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f6d:	b8 43 00 00 00       	mov    eax,0x43
c0004f72:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f74:	80 f9 03             	cmp    cl,0x3
c0004f77:	74 0f                	je     c0004f88 <f_getlabel+0x134>
c0004f79:	31 c0                	xor    eax,eax
c0004f7b:	80 f9 04             	cmp    cl,0x4
c0004f7e:	0f 94 c0             	sete   al
c0004f81:	48                   	dec    eax
c0004f82:	83 e0 c3             	and    eax,0xffffffc3
c0004f85:	83 c0 64             	add    eax,0x64
c0004f88:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f8c:	e8 9b cd ff ff       	call   c0001d2c <ld_dword>
c0004f91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f95:	89 07                	mov    DWORD PTR [edi],eax
c0004f97:	eb 02                	jmp    c0004f9b <f_getlabel+0x147>
c0004f99:	89 c6                	mov    esi,eax
c0004f9b:	83 c4 5c             	add    esp,0x5c
c0004f9e:	89 f0                	mov    eax,esi
c0004fa0:	5b                   	pop    ebx
c0004fa1:	5e                   	pop    esi
c0004fa2:	5f                   	pop    edi
c0004fa3:	5d                   	pop    ebp
c0004fa4:	c3                   	ret    

c0004fa5 <f_setlabel>:
c0004fa5:	56                   	push   esi
c0004fa6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fab:	53                   	push   ebx
c0004fac:	83 ec 54             	sub    esp,0x54
c0004faf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fb3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fb7:	e8 dc d3 ff ff       	call   c0002398 <mount_volume>
c0004fbc:	89 c6                	mov    esi,eax
c0004fbe:	85 c0                	test   eax,eax
c0004fc0:	0f 85 67 01 00 00    	jne    c000512d <f_setlabel+0x188>
c0004fc6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fcb:	ba 20 00 00 00       	mov    edx,0x20
c0004fd0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fd4:	31 db                	xor    ebx,ebx
c0004fd6:	e8 85 cd ff ff       	call   c0001d60 <mem_set>
c0004fdb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fdf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fe2:	76 5b                	jbe    c000503f <f_setlabel+0x9a>
c0004fe4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fe8:	e8 b9 cd ff ff       	call   c0001da6 <tchar2uni>
c0004fed:	3d ff ff 00 00       	cmp    eax,0xffff
c0004ff2:	76 0a                	jbe    c0004ffe <f_setlabel+0x59>
c0004ff4:	be 06 00 00 00       	mov    esi,0x6
c0004ff9:	e9 2f 01 00 00       	jmp    c000512d <f_setlabel+0x188>
c0004ffe:	83 ec 0c             	sub    esp,0xc
c0005001:	50                   	push   eax
c0005002:	e8 ad 0b 00 00       	call   c0005bb4 <ff_wtoupper>
c0005007:	5a                   	pop    edx
c0005008:	59                   	pop    ecx
c0005009:	68 b5 01 00 00       	push   0x1b5
c000500e:	50                   	push   eax
c000500f:	e8 88 0a 00 00       	call   c0005a9c <ff_uni2oem>
c0005014:	83 c4 10             	add    esp,0x10
c0005017:	89 c6                	mov    esi,eax
c0005019:	66 85 c0             	test   ax,ax
c000501c:	74 d6                	je     c0004ff4 <f_setlabel+0x4f>
c000501e:	0f b7 d0             	movzx  edx,ax
c0005021:	b8 b0 d7 01 c0       	mov    eax,0xc001d7b0
c0005026:	e8 63 cd ff ff       	call   c0001d8e <chk_chr>
c000502b:	85 c0                	test   eax,eax
c000502d:	75 c5                	jne    c0004ff4 <f_setlabel+0x4f>
c000502f:	66 81 fe ff 00       	cmp    si,0xff
c0005034:	0f 87 c9 00 00 00    	ja     c0005103 <f_setlabel+0x15e>
c000503a:	e9 e4 00 00 00       	jmp    c0005123 <f_setlabel+0x17e>
c000503f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005044:	74 ae                	je     c0004ff4 <f_setlabel+0x4f>
c0005046:	85 db                	test   ebx,ebx
c0005048:	74 0e                	je     c0005058 <f_setlabel+0xb3>
c000504a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000504d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005052:	75 04                	jne    c0005058 <f_setlabel+0xb3>
c0005054:	89 c3                	mov    ebx,eax
c0005056:	eb ee                	jmp    c0005046 <f_setlabel+0xa1>
c0005058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000505c:	31 d2                	xor    edx,edx
c000505e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005062:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000506a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000506e:	e8 a0 e1 ff ff       	call   c0003213 <dir_sdi>
c0005073:	89 c6                	mov    esi,eax
c0005075:	85 c0                	test   eax,eax
c0005077:	0f 85 b0 00 00 00    	jne    c000512d <f_setlabel+0x188>
c000507d:	ba 01 00 00 00       	mov    edx,0x1
c0005082:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005086:	e8 79 e5 ff ff       	call   c0003604 <dir_read>
c000508b:	85 c0                	test   eax,eax
c000508d:	75 18                	jne    c00050a7 <f_setlabel+0x102>
c000508f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005093:	85 db                	test   ebx,ebx
c0005095:	74 0b                	je     c00050a2 <f_setlabel+0xfd>
c0005097:	b9 0b 00 00 00       	mov    ecx,0xb
c000509c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050a0:	eb 47                	jmp    c00050e9 <f_setlabel+0x144>
c00050a2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050a5:	eb 47                	jmp    c00050ee <f_setlabel+0x149>
c00050a7:	83 f8 04             	cmp    eax,0x4
c00050aa:	75 53                	jne    c00050ff <f_setlabel+0x15a>
c00050ac:	85 db                	test   ebx,ebx
c00050ae:	74 7d                	je     c000512d <f_setlabel+0x188>
c00050b0:	ba 01 00 00 00       	mov    edx,0x1
c00050b5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b9:	e8 e5 e4 ff ff       	call   c00035a3 <dir_alloc>
c00050be:	89 c6                	mov    esi,eax
c00050c0:	85 c0                	test   eax,eax
c00050c2:	75 69                	jne    c000512d <f_setlabel+0x188>
c00050c4:	b9 20 00 00 00       	mov    ecx,0x20
c00050c9:	31 d2                	xor    edx,edx
c00050cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cf:	e8 8c cc ff ff       	call   c0001d60 <mem_set>
c00050d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050dd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050e1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	e8 5d cc ff ff       	call   c0001d4b <mem_cpy>
c00050ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050fa:	e8 86 db ff ff       	call   c0002c85 <sync_fs>
c00050ff:	89 c6                	mov    esi,eax
c0005101:	eb 2a                	jmp    c000512d <f_setlabel+0x188>
c0005103:	83 fb 09             	cmp    ebx,0x9
c0005106:	0f 87 e8 fe ff ff    	ja     c0004ff4 <f_setlabel+0x4f>
c000510c:	89 f0                	mov    eax,esi
c000510e:	66 c1 e8 08          	shr    ax,0x8
c0005112:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005116:	43                   	inc    ebx
c0005117:	89 f0                	mov    eax,esi
c0005119:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000511d:	43                   	inc    ebx
c000511e:	e9 b8 fe ff ff       	jmp    c0004fdb <f_setlabel+0x36>
c0005123:	83 fb 0a             	cmp    ebx,0xa
c0005126:	76 ef                	jbe    c0005117 <f_setlabel+0x172>
c0005128:	e9 c7 fe ff ff       	jmp    c0004ff4 <f_setlabel+0x4f>
c000512d:	89 f0                	mov    eax,esi
c000512f:	83 c4 54             	add    esp,0x54
c0005132:	5b                   	pop    ebx
c0005133:	5e                   	pop    esi
c0005134:	c3                   	ret    

c0005135 <f_expand>:
c0005135:	55                   	push   ebp
c0005136:	57                   	push   edi
c0005137:	56                   	push   esi
c0005138:	53                   	push   ebx
c0005139:	83 ec 2c             	sub    esp,0x2c
c000513c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005140:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005144:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005148:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000514c:	89 d8                	mov    eax,ebx
c000514e:	e8 48 d0 ff ff       	call   c000219b <validate>
c0005153:	89 c6                	mov    esi,eax
c0005155:	85 c0                	test   eax,eax
c0005157:	0f 85 2e 01 00 00    	jne    c000528b <f_expand+0x156>
c000515d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005161:	85 f6                	test   esi,esi
c0005163:	0f 85 22 01 00 00    	jne    c000528b <f_expand+0x156>
c0005169:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000516e:	75 0a                	jne    c000517a <f_expand+0x45>
c0005170:	be 07 00 00 00       	mov    esi,0x7
c0005175:	e9 11 01 00 00       	jmp    c000528b <f_expand+0x156>
c000517a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000517e:	75 f0                	jne    c0005170 <f_expand+0x3b>
c0005180:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005184:	74 ea                	je     c0005170 <f_expand+0x3b>
c0005186:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000518a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000518e:	c1 e1 09             	shl    ecx,0x9
c0005191:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005194:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005198:	0f 95 c0             	setne  al
c000519b:	31 d2                	xor    edx,edx
c000519d:	0f b6 c0             	movzx  eax,al
c00051a0:	89 c7                	mov    edi,eax
c00051a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051a6:	f7 f1                	div    ecx
c00051a8:	01 f8                	add    eax,edi
c00051aa:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051b1:	83 ff 01             	cmp    edi,0x1
c00051b4:	76 05                	jbe    c00051bb <f_expand+0x86>
c00051b6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051b9:	77 05                	ja     c00051c0 <f_expand+0x8b>
c00051bb:	bf 02 00 00 00       	mov    edi,0x2
c00051c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051c3:	89 fd                	mov    ebp,edi
c00051c5:	31 c9                	xor    ecx,ecx
c00051c7:	89 ea                	mov    edx,ebp
c00051c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051cf:	45                   	inc    ebp
c00051d0:	e8 3c df ff ff       	call   c0003111 <get_fat.isra.2>
c00051d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051dd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051e0:	77 05                	ja     c00051e7 <f_expand+0xb2>
c00051e2:	bd 02 00 00 00       	mov    ebp,0x2
c00051e7:	83 f8 01             	cmp    eax,0x1
c00051ea:	74 20                	je     c000520c <f_expand+0xd7>
c00051ec:	83 f8 ff             	cmp    eax,0xffffffff
c00051ef:	74 22                	je     c0005213 <f_expand+0xde>
c00051f1:	85 c0                	test   eax,eax
c00051f3:	75 09                	jne    c00051fe <f_expand+0xc9>
c00051f5:	41                   	inc    ecx
c00051f6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051fa:	75 07                	jne    c0005203 <f_expand+0xce>
c00051fc:	eb 1c                	jmp    c000521a <f_expand+0xe5>
c00051fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005201:	31 c9                	xor    ecx,ecx
c0005203:	39 fd                	cmp    ebp,edi
c0005205:	75 c0                	jne    c00051c7 <f_expand+0x92>
c0005207:	e9 64 ff ff ff       	jmp    c0005170 <f_expand+0x3b>
c000520c:	be 02 00 00 00       	mov    esi,0x2
c0005211:	eb 78                	jmp    c000528b <f_expand+0x156>
c0005213:	be 01 00 00 00       	mov    esi,0x1
c0005218:	eb 71                	jmp    c000528b <f_expand+0x156>
c000521a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000521f:	74 2b                	je     c000524c <f_expand+0x117>
c0005221:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005224:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005228:	85 ed                	test   ebp,ebp
c000522a:	74 24                	je     c0005250 <f_expand+0x11b>
c000522c:	83 c9 ff             	or     ecx,0xffffffff
c000522f:	83 fd 01             	cmp    ebp,0x1
c0005232:	74 03                	je     c0005237 <f_expand+0x102>
c0005234:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005237:	89 fa                	mov    edx,edi
c0005239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000523d:	e8 59 d4 ff ff       	call   c000269b <put_fat>
c0005242:	85 c0                	test   eax,eax
c0005244:	75 43                	jne    c0005289 <f_expand+0x154>
c0005246:	89 f8                	mov    eax,edi
c0005248:	4d                   	dec    ebp
c0005249:	47                   	inc    edi
c000524a:	eb dc                	jmp    c0005228 <f_expand+0xf3>
c000524c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000524f:	48                   	dec    eax
c0005250:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005254:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005259:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000525c:	74 2d                	je     c000528b <f_expand+0x156>
c000525e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005262:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005265:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005268:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000526c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005272:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005275:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005278:	39 c8                	cmp    eax,ecx
c000527a:	77 0f                	ja     c000528b <f_expand+0x156>
c000527c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005280:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005284:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005287:	eb 02                	jmp    c000528b <f_expand+0x156>
c0005289:	89 c6                	mov    esi,eax
c000528b:	83 c4 2c             	add    esp,0x2c
c000528e:	89 f0                	mov    eax,esi
c0005290:	5b                   	pop    ebx
c0005291:	5e                   	pop    esi
c0005292:	5f                   	pop    edi
c0005293:	5d                   	pop    ebp
c0005294:	c3                   	ret    

c0005295 <f_mkfs>:
c0005295:	55                   	push   ebp
c0005296:	57                   	push   edi
c0005297:	bf 0b 00 00 00       	mov    edi,0xb
c000529c:	56                   	push   esi
c000529d:	53                   	push   ebx
c000529e:	83 ec 4c             	sub    esp,0x4c
c00052a1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052a5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052a9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052ad:	e8 9c ce ff ff       	call   c000214e <get_ldnumber>
c00052b2:	85 c0                	test   eax,eax
c00052b4:	0f 88 a6 07 00 00    	js     c0005a60 <f_mkfs+0x7cb>
c00052ba:	8b 14 85 a0 24 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddb60]
c00052c1:	85 d2                	test   edx,edx
c00052c3:	74 03                	je     c00052c8 <f_mkfs+0x33>
c00052c5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052c8:	85 db                	test   ebx,ebx
c00052ca:	75 05                	jne    c00052d1 <f_mkfs+0x3c>
c00052cc:	bb a0 d7 01 c0       	mov    ebx,0xc001d7a0
c00052d1:	83 ec 0c             	sub    esp,0xc
c00052d4:	0f b6 c0             	movzx  eax,al
c00052d7:	bf 03 00 00 00       	mov    edi,0x3
c00052dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052e4:	e8 e8 c9 ff ff       	call   c0001cd1 <disk_initialize>
c00052e9:	83 c4 10             	add    esp,0x10
c00052ec:	a8 01                	test   al,0x1
c00052ee:	0f 85 6c 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c00052f4:	bf 0a 00 00 00       	mov    edi,0xa
c00052f9:	a8 04                	test   al,0x4
c00052fb:	0f 85 5f 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c0005301:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005304:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005308:	85 c0                	test   eax,eax
c000530a:	75 20                	jne    c000532c <f_mkfs+0x97>
c000530c:	51                   	push   ecx
c000530d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005311:	50                   	push   eax
c0005312:	6a 03                	push   0x3
c0005314:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005318:	e8 e3 c9 ff ff       	call   c0001d00 <disk_ioctl>
c000531d:	83 c4 10             	add    esp,0x10
c0005320:	85 c0                	test   eax,eax
c0005322:	74 08                	je     c000532c <f_mkfs+0x97>
c0005324:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000532c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005330:	8d 42 ff             	lea    eax,[edx-0x1]
c0005333:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005338:	77 04                	ja     c000533e <f_mkfs+0xa9>
c000533a:	85 c2                	test   edx,eax
c000533c:	74 08                	je     c0005346 <f_mkfs+0xb1>
c000533e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005346:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005349:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000534d:	48                   	dec    eax
c000534e:	3c 01                	cmp    al,0x1
c0005350:	76 05                	jbe    c0005357 <f_mkfs+0xc2>
c0005352:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005357:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000535a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535e:	48                   	dec    eax
c000535f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005364:	77 07                	ja     c000536d <f_mkfs+0xd8>
c0005366:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000536b:	74 08                	je     c0005375 <f_mkfs+0xe0>
c000536d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005375:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005378:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000537e:	77 07                	ja     c0005387 <f_mkfs+0xf2>
c0005380:	8d 47 ff             	lea    eax,[edi-0x1]
c0005383:	85 f8                	test   eax,edi
c0005385:	74 02                	je     c0005389 <f_mkfs+0xf4>
c0005387:	31 ff                	xor    edi,edi
c0005389:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005391:	77 0a                	ja     c000539d <f_mkfs+0x108>
c0005393:	bf 11 00 00 00       	mov    edi,0x11
c0005398:	e9 c3 06 00 00       	jmp    c0005a60 <f_mkfs+0x7cb>
c000539d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000539f:	89 ee                	mov    esi,ebp
c00053a1:	85 ed                	test   ebp,ebp
c00053a3:	75 1b                	jne    c00053c0 <f_mkfs+0x12b>
c00053a5:	83 ec 0c             	sub    esp,0xc
c00053a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053ac:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053b1:	50                   	push   eax
c00053b2:	e8 b5 06 00 00       	call   c0005a6c <ff_memalloc>
c00053b7:	83 c4 10             	add    esp,0x10
c00053ba:	89 c6                	mov    esi,eax
c00053bc:	85 c0                	test   eax,eax
c00053be:	74 d3                	je     c0005393 <f_mkfs+0xfe>
c00053c0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053c8:	52                   	push   edx
c00053c9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053cd:	50                   	push   eax
c00053ce:	6a 01                	push   0x1
c00053d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053d4:	e8 27 c9 ff ff       	call   c0001d00 <disk_ioctl>
c00053d9:	83 c4 10             	add    esp,0x10
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 25 06 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00053e4:	88 d8                	mov    al,bl
c00053e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053ee:	24 08                	and    al,0x8
c00053f0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053f4:	75 18                	jne    c000540e <f_mkfs+0x179>
c00053f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053fa:	83 f8 3f             	cmp    eax,0x3f
c00053fd:	76 0f                	jbe    c000540e <f_mkfs+0x179>
c00053ff:	83 e8 3f             	sub    eax,0x3f
c0005402:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000540a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000540e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005412:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005416:	83 f8 7f             	cmp    eax,0x7f
c0005419:	0f 86 52 02 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000541f:	b9 80 00 00 00       	mov    ecx,0x80
c0005424:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000542a:	77 05                	ja     c0005431 <f_mkfs+0x19c>
c000542c:	89 f9                	mov    ecx,edi
c000542e:	c1 e9 09             	shr    ecx,0x9
c0005431:	88 d8                	mov    al,bl
c0005433:	83 e0 01             	and    eax,0x1
c0005436:	80 e3 02             	and    bl,0x2
c0005439:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000543d:	74 0a                	je     c0005449 <f_mkfs+0x1b4>
c000543f:	84 c0                	test   al,al
c0005441:	0f 84 4c 01 00 00    	je     c0005593 <f_mkfs+0x2fe>
c0005447:	eb 38                	jmp    c0005481 <f_mkfs+0x1ec>
c0005449:	bf 13 00 00 00       	mov    edi,0x13
c000544e:	84 c0                	test   al,al
c0005450:	75 2f                	jne    c0005481 <f_mkfs+0x1ec>
c0005452:	e9 c9 05 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c0005457:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000545c:	0f 85 08 02 00 00    	jne    c000566a <f_mkfs+0x3d5>
c0005462:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005467:	0f 86 e1 01 00 00    	jbe    c000564e <f_mkfs+0x3b9>
c000546d:	85 c9                	test   ecx,ecx
c000546f:	0f 85 bd 05 00 00    	jne    c0005a32 <f_mkfs+0x79d>
c0005475:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005478:	83 f9 40             	cmp    ecx,0x40
c000547b:	0f 87 c1 05 00 00    	ja     c0005a42 <f_mkfs+0x7ad>
c0005481:	89 cf                	mov    edi,ecx
c0005483:	85 c9                	test   ecx,ecx
c0005485:	75 1d                	jne    c00054a4 <f_mkfs+0x20f>
c0005487:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000548b:	ba 80 d7 01 c0       	mov    edx,0xc001d780
c0005490:	c1 eb 0c             	shr    ebx,0xc
c0005493:	bf 01 00 00 00       	mov    edi,0x1
c0005498:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000549b:	66 85 c0             	test   ax,ax
c000549e:	0f 85 5f 01 00 00    	jne    c0005603 <f_mkfs+0x36e>
c00054a4:	31 d2                	xor    edx,edx
c00054a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054aa:	f7 f7                	div    edi
c00054ac:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054b1:	0f 86 5e 01 00 00    	jbe    c0005615 <f_mkfs+0x380>
c00054b7:	83 c0 02             	add    eax,0x2
c00054ba:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054bf:	01 c0                	add    eax,eax
c00054c1:	05 ff 01 00 00       	add    eax,0x1ff
c00054c6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ce:	c1 e8 09             	shr    eax,0x9
c00054d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054d9:	c1 e0 05             	shl    eax,0x5
c00054dc:	c1 e8 09             	shr    eax,0x9
c00054df:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054e3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054f0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054fc:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005501:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005505:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005509:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000550d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005511:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005515:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005519:	f7 d8                	neg    eax
c000551b:	21 c3                	and    ebx,eax
c000551d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005521:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005526:	0f 85 fc 00 00 00    	jne    c0005628 <f_mkfs+0x393>
c000552c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005530:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005534:	89 f8                	mov    eax,edi
c0005536:	c1 e0 04             	shl    eax,0x4
c0005539:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000553d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005541:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005545:	0f 82 26 01 00 00    	jb     c0005671 <f_mkfs+0x3dc>
c000554b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000554f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005553:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005557:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000555c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005560:	29 d0                	sub    eax,edx
c0005562:	31 d2                	xor    edx,edx
c0005564:	f7 f7                	div    edi
c0005566:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000556b:	89 c3                	mov    ebx,eax
c000556d:	0f 85 e4 fe ff ff    	jne    c0005457 <f_mkfs+0x1c2>
c0005573:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005578:	0f 87 02 01 00 00    	ja     c0005680 <f_mkfs+0x3eb>
c000557e:	85 c9                	test   ecx,ecx
c0005580:	0f 85 eb 00 00 00    	jne    c0005671 <f_mkfs+0x3dc>
c0005586:	83 ff 01             	cmp    edi,0x1
c0005589:	0f 86 e2 00 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000558f:	89 f9                	mov    ecx,edi
c0005591:	d1 e9                	shr    ecx,1
c0005593:	89 cb                	mov    ebx,ecx
c0005595:	85 c9                	test   ecx,ecx
c0005597:	75 26                	jne    c00055bf <f_mkfs+0x32a>
c0005599:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000559d:	ba 90 d7 01 c0       	mov    edx,0xc001d790
c00055a2:	c1 eb 11             	shr    ebx,0x11
c00055a5:	b9 01 00 00 00       	mov    ecx,0x1
c00055aa:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055ad:	66 85 c0             	test   ax,ax
c00055b0:	74 0b                	je     c00055bd <f_mkfs+0x328>
c00055b2:	83 c2 02             	add    edx,0x2
c00055b5:	39 d8                	cmp    eax,ebx
c00055b7:	77 04                	ja     c00055bd <f_mkfs+0x328>
c00055b9:	01 c9                	add    ecx,ecx
c00055bb:	eb ed                	jmp    c00055aa <f_mkfs+0x315>
c00055bd:	31 db                	xor    ebx,ebx
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055c5:	f7 f1                	div    ecx
c00055c7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ce:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055d3:	c1 ea 09             	shr    edx,0x9
c00055d6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055df:	0f 87 8c 00 00 00    	ja     c0005671 <f_mkfs+0x3dc>
c00055e5:	89 cf                	mov    edi,ecx
c00055e7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055ef:	89 d9                	mov    ecx,ebx
c00055f1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055f9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055fe:	e9 e0 fe ff ff       	jmp    c00054e3 <f_mkfs+0x24e>
c0005603:	83 c2 02             	add    edx,0x2
c0005606:	39 d8                	cmp    eax,ebx
c0005608:	0f 87 96 fe ff ff    	ja     c00054a4 <f_mkfs+0x20f>
c000560e:	01 ff                	add    edi,edi
c0005610:	e9 83 fe ff ff       	jmp    c0005498 <f_mkfs+0x203>
c0005615:	8d 04 40             	lea    eax,[eax+eax*2]
c0005618:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000561d:	40                   	inc    eax
c000561e:	d1 e8                	shr    eax,1
c0005620:	83 c0 03             	add    eax,0x3
c0005623:	e9 99 fe ff ff       	jmp    c00054c1 <f_mkfs+0x22c>
c0005628:	31 d2                	xor    edx,edx
c000562a:	89 d8                	mov    eax,ebx
c000562c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005630:	85 d2                	test   edx,edx
c0005632:	74 09                	je     c000563d <f_mkfs+0x3a8>
c0005634:	4b                   	dec    ebx
c0005635:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005639:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000563d:	89 d8                	mov    eax,ebx
c000563f:	31 d2                	xor    edx,edx
c0005641:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005645:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005649:	e9 e6 fe ff ff       	jmp    c0005534 <f_mkfs+0x29f>
c000564e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005653:	77 2b                	ja     c0005680 <f_mkfs+0x3eb>
c0005655:	85 c9                	test   ecx,ecx
c0005657:	75 18                	jne    c0005671 <f_mkfs+0x3dc>
c0005659:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000565c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005662:	0f 86 19 fe ff ff    	jbe    c0005481 <f_mkfs+0x1ec>
c0005668:	eb 07                	jmp    c0005671 <f_mkfs+0x3dc>
c000566a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000566f:	76 0a                	jbe    c000567b <f_mkfs+0x3e6>
c0005671:	bf 0e 00 00 00       	mov    edi,0xe
c0005676:	e9 a5 03 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c000567b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005680:	31 d2                	xor    edx,edx
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	89 f0                	mov    eax,esi
c0005689:	e8 d2 c6 ff ff       	call   c0001d60 <mem_set>
c000568e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005693:	ba 32 d7 01 c0       	mov    edx,0xc001d732
c0005698:	89 f0                	mov    eax,esi
c000569a:	e8 ac c6 ff ff       	call   c0001d4b <mem_cpy>
c000569f:	8d 46 0b             	lea    eax,[esi+0xb]
c00056a2:	ba 00 02 00 00       	mov    edx,0x200
c00056a7:	e8 98 c6 ff ff       	call   c0001d44 <st_word>
c00056ac:	89 f8                	mov    eax,edi
c00056ae:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056b3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056b6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056b9:	e8 86 c6 ff ff       	call   c0001d44 <st_word>
c00056be:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056c2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056c7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ca:	75 08                	jne    c00056d4 <f_mkfs+0x43f>
c00056cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056d8:	8d 46 11             	lea    eax,[esi+0x11]
c00056db:	e8 64 c6 ff ff       	call   c0001d44 <st_word>
c00056e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056ea:	77 0a                	ja     c00056f6 <f_mkfs+0x461>
c00056ec:	8d 46 13             	lea    eax,[esi+0x13]
c00056ef:	e8 50 c6 ff ff       	call   c0001d44 <st_word>
c00056f4:	eb 08                	jmp    c00056fe <f_mkfs+0x469>
c00056f6:	8d 46 20             	lea    eax,[esi+0x20]
c00056f9:	e8 4a c6 ff ff       	call   c0001d48 <st_dword>
c00056fe:	8d 46 18             	lea    eax,[esi+0x18]
c0005701:	ba 3f 00 00 00       	mov    edx,0x3f
c0005706:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000570a:	e8 35 c6 ff ff       	call   c0001d44 <st_word>
c000570f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005712:	ba ff 00 00 00       	mov    edx,0xff
c0005717:	e8 28 c6 ff ff       	call   c0001d44 <st_word>
c000571c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000571f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005723:	e8 20 c6 ff ff       	call   c0001d48 <st_dword>
c0005728:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000572d:	75 57                	jne    c0005786 <f_mkfs+0x4f1>
c000572f:	8d 46 43             	lea    eax,[esi+0x43]
c0005732:	ba 00 00 21 50       	mov    edx,0x50210000
c0005737:	e8 0c c6 ff ff       	call   c0001d48 <st_dword>
c000573c:	8d 46 24             	lea    eax,[esi+0x24]
c000573f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005743:	e8 00 c6 ff ff       	call   c0001d48 <st_dword>
c0005748:	8d 46 2c             	lea    eax,[esi+0x2c]
c000574b:	ba 02 00 00 00       	mov    edx,0x2
c0005750:	e8 f3 c5 ff ff       	call   c0001d48 <st_dword>
c0005755:	8d 46 30             	lea    eax,[esi+0x30]
c0005758:	ba 01 00 00 00       	mov    edx,0x1
c000575d:	e8 e2 c5 ff ff       	call   c0001d44 <st_word>
c0005762:	8d 46 32             	lea    eax,[esi+0x32]
c0005765:	ba 06 00 00 00       	mov    edx,0x6
c000576a:	e8 d5 c5 ff ff       	call   c0001d44 <st_word>
c000576f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005773:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005777:	8d 46 47             	lea    eax,[esi+0x47]
c000577a:	b9 13 00 00 00       	mov    ecx,0x13
c000577f:	ba 3e d7 01 c0       	mov    edx,0xc001d73e
c0005784:	eb 2f                	jmp    c00057b5 <f_mkfs+0x520>
c0005786:	8d 46 27             	lea    eax,[esi+0x27]
c0005789:	ba 00 00 21 50       	mov    edx,0x50210000
c000578e:	e8 b5 c5 ff ff       	call   c0001d48 <st_dword>
c0005793:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005798:	8d 46 16             	lea    eax,[esi+0x16]
c000579b:	e8 a4 c5 ff ff       	call   c0001d44 <st_word>
c00057a0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057a4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057a8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057ab:	b9 13 00 00 00       	mov    ecx,0x13
c00057b0:	ba 52 d7 01 c0       	mov    edx,0xc001d752
c00057b5:	e8 91 c5 ff ff       	call   c0001d4b <mem_cpy>
c00057ba:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057c0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057c9:	e8 76 c5 ff ff       	call   c0001d44 <st_word>
c00057ce:	6a 01                	push   0x1
c00057d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057d4:	56                   	push   esi
c00057d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057d9:	e8 0c c5 ff ff       	call   c0001cea <disk_write>
c00057de:	83 c4 10             	add    esp,0x10
c00057e1:	85 c0                	test   eax,eax
c00057e3:	0f 85 20 02 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00057e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057ee:	0f 85 98 00 00 00    	jne    c000588c <f_mkfs+0x5f7>
c00057f4:	6a 01                	push   0x1
c00057f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057fa:	83 c0 06             	add    eax,0x6
c00057fd:	50                   	push   eax
c00057fe:	56                   	push   esi
c00057ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005803:	e8 e2 c4 ff ff       	call   c0001cea <disk_write>
c0005808:	b9 00 02 00 00       	mov    ecx,0x200
c000580d:	31 d2                	xor    edx,edx
c000580f:	89 f0                	mov    eax,esi
c0005811:	e8 4a c5 ff ff       	call   c0001d60 <mem_set>
c0005816:	ba 52 52 61 41       	mov    edx,0x41615252
c000581b:	89 f0                	mov    eax,esi
c000581d:	e8 26 c5 ff ff       	call   c0001d48 <st_dword>
c0005822:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005828:	ba 72 72 41 61       	mov    edx,0x61417272
c000582d:	e8 16 c5 ff ff       	call   c0001d48 <st_dword>
c0005832:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005835:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000583b:	e8 08 c5 ff ff       	call   c0001d48 <st_dword>
c0005840:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005846:	ba 02 00 00 00       	mov    edx,0x2
c000584b:	e8 f8 c4 ff ff       	call   c0001d48 <st_dword>
c0005850:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005855:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000585b:	e8 e4 c4 ff ff       	call   c0001d44 <st_word>
c0005860:	6a 01                	push   0x1
c0005862:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005866:	83 c0 07             	add    eax,0x7
c0005869:	50                   	push   eax
c000586a:	56                   	push   esi
c000586b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000586f:	e8 76 c4 ff ff       	call   c0001cea <disk_write>
c0005874:	83 c4 20             	add    esp,0x20
c0005877:	6a 01                	push   0x1
c0005879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000587d:	40                   	inc    eax
c000587e:	50                   	push   eax
c000587f:	56                   	push   esi
c0005880:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005884:	e8 61 c4 ff ff       	call   c0001cea <disk_write>
c0005889:	83 c4 10             	add    esp,0x10
c000588c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005890:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005894:	c1 e8 09             	shr    eax,0x9
c0005897:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000589d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058a1:	31 d2                	xor    edx,edx
c00058a3:	31 db                	xor    ebx,ebx
c00058a5:	89 f0                	mov    eax,esi
c00058a7:	e8 b4 c4 ff ff       	call   c0001d60 <mem_set>
c00058ac:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058b1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058b9:	0f 94 c3             	sete   bl
c00058bc:	4b                   	dec    ebx
c00058bd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058c3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058c9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ce:	75 21                	jne    c00058f1 <f_mkfs+0x65c>
c00058d0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058d5:	89 f0                	mov    eax,esi
c00058d7:	e8 6c c4 ff ff       	call   c0001d48 <st_dword>
c00058dc:	8d 46 04             	lea    eax,[esi+0x4]
c00058df:	83 ca ff             	or     edx,0xffffffff
c00058e2:	e8 61 c4 ff ff       	call   c0001d48 <st_dword>
c00058e7:	8d 46 08             	lea    eax,[esi+0x8]
c00058ea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058ef:	eb 04                	jmp    c00058f5 <f_mkfs+0x660>
c00058f1:	89 da                	mov    edx,ebx
c00058f3:	89 f0                	mov    eax,esi
c00058f5:	e8 4e c4 ff ff       	call   c0001d48 <st_dword>
c00058fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000590a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000590e:	76 08                	jbe    c0005918 <f_mkfs+0x683>
c0005910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005918:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000591c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005920:	56                   	push   esi
c0005921:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005925:	e8 c0 c3 ff ff       	call   c0001cea <disk_write>
c000592a:	83 c4 10             	add    esp,0x10
c000592d:	85 c0                	test   eax,eax
c000592f:	0f 85 d4 00 00 00    	jne    c0005a09 <f_mkfs+0x774>
c0005935:	b9 00 02 00 00       	mov    ecx,0x200
c000593a:	31 d2                	xor    edx,edx
c000593c:	89 f0                	mov    eax,esi
c000593e:	e8 1d c4 ff ff       	call   c0001d60 <mem_set>
c0005943:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005947:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000594b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000594f:	75 b1                	jne    c0005902 <f_mkfs+0x66d>
c0005951:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005955:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000595d:	40                   	inc    eax
c000595e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005962:	0f 87 61 ff ff ff    	ja     c00058c9 <f_mkfs+0x634>
c0005968:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000596d:	74 04                	je     c0005973 <f_mkfs+0x6de>
c000596f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005973:	89 fb                	mov    ebx,edi
c0005975:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005979:	76 04                	jbe    c000597f <f_mkfs+0x6ea>
c000597b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000597f:	53                   	push   ebx
c0005980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005984:	56                   	push   esi
c0005985:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005989:	e8 5c c3 ff ff       	call   c0001cea <disk_write>
c000598e:	83 c4 10             	add    esp,0x10
c0005991:	85 c0                	test   eax,eax
c0005993:	75 74                	jne    c0005a09 <f_mkfs+0x774>
c0005995:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005999:	29 df                	sub    edi,ebx
c000599b:	75 d6                	jne    c0005973 <f_mkfs+0x6de>
c000599d:	b1 0c                	mov    cl,0xc
c000599f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059a4:	74 18                	je     c00059be <f_mkfs+0x729>
c00059a6:	b1 06                	mov    cl,0x6
c00059a8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059b0:	77 0c                	ja     c00059be <f_mkfs+0x729>
c00059b2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059b7:	0f 94 c1             	sete   cl
c00059ba:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059be:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059c3:	75 2d                	jne    c00059f2 <f_mkfs+0x75d>
c00059c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059c9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059d1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059d5:	0f b6 c9             	movzx  ecx,cl
c00059d8:	83 ec 0c             	sub    esp,0xc
c00059db:	56                   	push   esi
c00059dc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059e4:	e8 4c d3 ff ff       	call   c0002d35 <create_partition>
c00059e9:	83 c4 10             	add    esp,0x10
c00059ec:	89 c7                	mov    edi,eax
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 2e                	jne    c0005a20 <f_mkfs+0x78b>
c00059f2:	31 ff                	xor    edi,edi
c00059f4:	50                   	push   eax
c00059f5:	6a 00                	push   0x0
c00059f7:	6a 00                	push   0x0
c00059f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059fd:	e8 fe c2 ff ff       	call   c0001d00 <disk_ioctl>
c0005a02:	83 c4 10             	add    esp,0x10
c0005a05:	85 c0                	test   eax,eax
c0005a07:	74 17                	je     c0005a20 <f_mkfs+0x78b>
c0005a09:	85 ed                	test   ebp,ebp
c0005a0b:	75 0c                	jne    c0005a19 <f_mkfs+0x784>
c0005a0d:	83 ec 0c             	sub    esp,0xc
c0005a10:	56                   	push   esi
c0005a11:	e8 6e 00 00 00       	call   c0005a84 <ff_memfree>
c0005a16:	83 c4 10             	add    esp,0x10
c0005a19:	bf 01 00 00 00       	mov    edi,0x1
c0005a1e:	eb 40                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a20:	85 ed                	test   ebp,ebp
c0005a22:	75 3c                	jne    c0005a60 <f_mkfs+0x7cb>
c0005a24:	83 ec 0c             	sub    esp,0xc
c0005a27:	56                   	push   esi
c0005a28:	e8 57 00 00 00       	call   c0005a84 <ff_memfree>
c0005a2d:	83 c4 10             	add    esp,0x10
c0005a30:	eb 2e                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 56 fb ff ff    	jne    c0005593 <f_mkfs+0x2fe>
c0005a3d:	e9 2f fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a42:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a47:	0f 85 4c fb ff ff    	jne    c0005599 <f_mkfs+0x304>
c0005a4d:	89 cf                	mov    edi,ecx
c0005a4f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a55:	0f 86 49 fa ff ff    	jbe    c00054a4 <f_mkfs+0x20f>
c0005a5b:	e9 11 fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a60:	83 c4 4c             	add    esp,0x4c
c0005a63:	89 f8                	mov    eax,edi
c0005a65:	5b                   	pop    ebx
c0005a66:	5e                   	pop    esi
c0005a67:	5f                   	pop    edi
c0005a68:	5d                   	pop    ebp
c0005a69:	c3                   	ret    
c0005a6a:	66 90                	xchg   ax,ax

c0005a6c <ff_memalloc>:
c0005a6c:	83 ec 0c             	sub    esp,0xc
c0005a6f:	83 ec 0c             	sub    esp,0xc
c0005a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a76:	e8 a6 1d 00 00       	call   c0007821 <malloc>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	83 c4 0c             	add    esp,0xc
c0005a81:	c3                   	ret    
c0005a82:	66 90                	xchg   ax,ax

c0005a84 <ff_memfree>:
c0005a84:	83 ec 0c             	sub    esp,0xc
c0005a87:	83 ec 0c             	sub    esp,0xc
c0005a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a8e:	e8 9e 1d 00 00       	call   c0007831 <free>
c0005a93:	83 c4 10             	add    esp,0x10
c0005a96:	90                   	nop
c0005a97:	83 c4 0c             	add    esp,0xc
c0005a9a:	c3                   	ret    
c0005a9b:	90                   	nop

c0005a9c <ff_uni2oem>:
c0005a9c:	83 ec 14             	sub    esp,0x14
c0005a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005aa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005aae:	c7 44 24 0c 80 db 01 c0 	mov    DWORD PTR [esp+0xc],0xc001db80
c0005ab6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005abb:	77 0b                	ja     c0005ac8 <ff_uni2oem+0x2c>
c0005abd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ac1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ac6:	eb 68                	jmp    c0005b30 <ff_uni2oem+0x94>
c0005ac8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ad0:	77 5e                	ja     c0005b30 <ff_uni2oem+0x94>
c0005ad2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ad8:	75 56                	jne    c0005b30 <ff_uni2oem+0x94>
c0005ada:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ae1:	eb 0d                	jmp    c0005af0 <ff_uni2oem+0x54>
c0005ae3:	90                   	nop
c0005ae4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ae9:	40                   	inc    eax
c0005aea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005aef:	90                   	nop
c0005af0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005af6:	77 24                	ja     c0005b1c <ff_uni2oem+0x80>
c0005af8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005afd:	25 ff ff 00 00       	and    eax,0xffff
c0005b02:	01 c0                	add    eax,eax
c0005b04:	89 c2                	mov    edx,eax
c0005b06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b0a:	01 d0                	add    eax,edx
c0005b0c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b0f:	25 ff ff 00 00       	and    eax,0xffff
c0005b14:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b18:	75 ca                	jne    c0005ae4 <ff_uni2oem+0x48>
c0005b1a:	66 90                	xchg   ax,ax
c0005b1c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b21:	83 e8 80             	sub    eax,0xffffff80
c0005b24:	25 ff 00 00 00       	and    eax,0xff
c0005b29:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b35:	83 c4 14             	add    esp,0x14
c0005b38:	c3                   	ret    
c0005b39:	8d 76 00             	lea    esi,[esi+0x0]

c0005b3c <ff_oem2uni>:
c0005b3c:	83 ec 18             	sub    esp,0x18
c0005b3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b47:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b4c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b50:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b57:	c7 44 24 10 80 db 01 c0 	mov    DWORD PTR [esp+0x10],0xc001db80
c0005b5f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b65:	77 0d                	ja     c0005b74 <ff_oem2uni+0x38>
c0005b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b6b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b70:	eb 36                	jmp    c0005ba8 <ff_oem2uni+0x6c>
c0005b72:	66 90                	xchg   ax,ax
c0005b74:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b7a:	75 2c                	jne    c0005ba8 <ff_oem2uni+0x6c>
c0005b7c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b83:	77 23                	ja     c0005ba8 <ff_oem2uni+0x6c>
c0005b85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b89:	25 ff ff 00 00       	and    eax,0xffff
c0005b8e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b93:	01 c0                	add    eax,eax
c0005b95:	89 c2                	mov    edx,eax
c0005b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b9b:	01 d0                	add    eax,edx
c0005b9d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ba0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ba8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bad:	83 c4 18             	add    esp,0x18
c0005bb0:	c3                   	ret    
c0005bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bb4 <ff_wtoupper>:
c0005bb4:	83 ec 10             	sub    esp,0x10
c0005bb7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bbf:	0f 87 77 01 00 00    	ja     c0005d3c <ff_wtoupper+0x188>
c0005bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bc9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bce:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bd5:	77 09                	ja     c0005be0 <ff_wtoupper+0x2c>
c0005bd7:	b8 80 d9 01 c0       	mov    eax,0xc001d980
c0005bdc:	eb 0a                	jmp    c0005be8 <ff_wtoupper+0x34>
c0005bde:	66 90                	xchg   ax,ax
c0005be0:	b8 c0 d8 01 c0       	mov    eax,0xc001d8c0
c0005be5:	8d 76 00             	lea    esi,[esi+0x0]
c0005be8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf0:	8d 50 02             	lea    edx,[eax+0x2]
c0005bf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bf7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bfa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c05:	0f 84 21 01 00 00    	je     c0005d2c <ff_wtoupper+0x178>
c0005c0b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c10:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c15:	0f 82 11 01 00 00    	jb     c0005d2c <ff_wtoupper+0x178>
c0005c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c1f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c29:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c2e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c33:	66 c1 e8 08          	shr    ax,0x8
c0005c37:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c3c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c43:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c48:	31 d2                	xor    edx,edx
c0005c4a:	66 89 c2             	mov    dx,ax
c0005c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c51:	31 c9                	xor    ecx,ecx
c0005c53:	66 89 c1             	mov    cx,ax
c0005c56:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c5b:	25 ff ff 00 00       	and    eax,0xffff
c0005c60:	01 c8                	add    eax,ecx
c0005c62:	39 c2                	cmp    edx,eax
c0005c64:	0f 8d 9a 00 00 00    	jge    c0005d04 <ff_wtoupper+0x150>
c0005c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c6e:	25 ff ff 00 00       	and    eax,0xffff
c0005c73:	83 f8 08             	cmp    eax,0x8
c0005c76:	0f 87 ac 00 00 00    	ja     c0005d28 <ff_wtoupper+0x174>
c0005c7c:	8b 04 85 80 d8 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe2780]
c0005c83:	ff e0                	jmp    eax
c0005c85:	8d 76 00             	lea    esi,[esi+0x0]
c0005c88:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c8d:	31 d2                	xor    edx,edx
c0005c8f:	66 89 c2             	mov    dx,ax
c0005c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c96:	25 ff ff 00 00       	and    eax,0xffff
c0005c9b:	29 c2                	sub    edx,eax
c0005c9d:	89 d0                	mov    eax,edx
c0005c9f:	01 c0                	add    eax,eax
c0005ca1:	89 c2                	mov    edx,eax
c0005ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ca7:	01 d0                	add    eax,edx
c0005ca9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cac:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cb1:	eb 4d                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cb3:	90                   	nop
c0005cb4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cb9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cbd:	83 e0 01             	and    eax,0x1
c0005cc0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cc5:	eb 39                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cc7:	90                   	nop
c0005cc8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cce:	eb 30                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cd6:	eb 28                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cde:	eb 20                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005ce6:	eb 18                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cee:	eb 10                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005cf6:	eb 08                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cff:	90                   	nop
c0005d00:	eb 26                	jmp    c0005d28 <ff_wtoupper+0x174>
c0005d02:	66 90                	xchg   ax,ax
c0005d04:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d0a:	0f 85 dc fe ff ff    	jne    c0005bec <ff_wtoupper+0x38>
c0005d10:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d15:	25 ff ff 00 00       	and    eax,0xffff
c0005d1a:	01 c0                	add    eax,eax
c0005d1c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d20:	e9 c7 fe ff ff       	jmp    c0005bec <ff_wtoupper+0x38>
c0005d25:	8d 76 00             	lea    esi,[esi+0x0]
c0005d28:	90                   	nop
c0005d29:	8d 76 00             	lea    esi,[esi+0x0]
c0005d2c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d31:	25 ff ff 00 00       	and    eax,0xffff
c0005d36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d3a:	66 90                	xchg   ax,ax
c0005d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	c3                   	ret    

c0005d44 <utf2ucs>:
c0005d44:	57                   	push   edi
c0005d45:	31 c9                	xor    ecx,ecx
c0005d47:	56                   	push   esi
c0005d48:	89 d7                	mov    edi,edx
c0005d4a:	53                   	push   ebx
c0005d4b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d4f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d53:	89 de                	mov    esi,ebx
c0005d55:	c1 fe 08             	sar    esi,0x8
c0005d58:	89 f2                	mov    edx,esi
c0005d5a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d5d:	41                   	inc    ecx
c0005d5e:	85 db                	test   ebx,ebx
c0005d60:	75 e9                	jne    c0005d4b <utf2ucs+0x7>
c0005d62:	5b                   	pop    ebx
c0005d63:	5e                   	pop    esi
c0005d64:	5f                   	pop    edi
c0005d65:	c3                   	ret    

c0005d66 <ucs2utfn>:
c0005d66:	83 e1 fe             	and    ecx,0xfffffffe
c0005d69:	01 d1                	add    ecx,edx
c0005d6b:	39 d1                	cmp    ecx,edx
c0005d6d:	75 04                	jne    c0005d73 <ucs2utfn+0xd>
c0005d6f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d72:	c3                   	ret    
c0005d73:	57                   	push   edi
c0005d74:	56                   	push   esi
c0005d75:	53                   	push   ebx
c0005d76:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d79:	83 c2 02             	add    edx,0x2
c0005d7c:	89 de                	mov    esi,ebx
c0005d7e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d82:	c1 e6 08             	shl    esi,0x8
c0005d85:	09 f3                	or     ebx,esi
c0005d87:	83 fb 3b             	cmp    ebx,0x3b
c0005d8a:	74 51                	je     c0005ddd <ucs2utfn+0x77>
c0005d8c:	83 fb 7f             	cmp    ebx,0x7f
c0005d8f:	7f 05                	jg     c0005d96 <ucs2utfn+0x30>
c0005d91:	88 18                	mov    BYTE PTR [eax],bl
c0005d93:	40                   	inc    eax
c0005d94:	eb 43                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005d96:	89 de                	mov    esi,ebx
c0005d98:	89 df                	mov    edi,ebx
c0005d9a:	c1 fe 06             	sar    esi,0x6
c0005d9d:	83 e7 3f             	and    edi,0x3f
c0005da0:	83 cf 80             	or     edi,0xffffff80
c0005da3:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005da9:	7f 12                	jg     c0005dbd <ucs2utfn+0x57>
c0005dab:	89 f3                	mov    ebx,esi
c0005dad:	83 c0 02             	add    eax,0x2
c0005db0:	83 cb c0             	or     ebx,0xffffffc0
c0005db3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005db6:	89 fb                	mov    ebx,edi
c0005db8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dbb:	eb 1c                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005dbd:	c1 fb 0c             	sar    ebx,0xc
c0005dc0:	83 e6 3f             	and    esi,0x3f
c0005dc3:	83 cb e0             	or     ebx,0xffffffe0
c0005dc6:	83 c0 03             	add    eax,0x3
c0005dc9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dcc:	89 f3                	mov    ebx,esi
c0005dce:	83 cb 80             	or     ebx,0xffffff80
c0005dd1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dd4:	89 fb                	mov    ebx,edi
c0005dd6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dd9:	39 d1                	cmp    ecx,edx
c0005ddb:	75 99                	jne    c0005d76 <ucs2utfn+0x10>
c0005ddd:	5b                   	pop    ebx
c0005dde:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005de1:	5e                   	pop    esi
c0005de2:	5f                   	pop    edi
c0005de3:	c3                   	ret    

c0005de4 <isjoliet>:
c0005de4:	31 d2                	xor    edx,edx
c0005de6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005de9:	75 22                	jne    c0005e0d <isjoliet+0x29>
c0005deb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005def:	75 1c                	jne    c0005e0d <isjoliet+0x29>
c0005df1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005df4:	ba 02 00 00 00       	mov    edx,0x2
c0005df9:	3c 43                	cmp    al,0x43
c0005dfb:	74 10                	je     c0005e0d <isjoliet+0x29>
c0005dfd:	ba 03 00 00 00       	mov    edx,0x3
c0005e02:	3c 45                	cmp    al,0x45
c0005e04:	74 07                	je     c0005e0d <isjoliet+0x29>
c0005e06:	31 d2                	xor    edx,edx
c0005e08:	3c 40                	cmp    al,0x40
c0005e0a:	0f 94 c2             	sete   dl
c0005e0d:	89 d0                	mov    eax,edx
c0005e0f:	c3                   	ret    

c0005e10 <htohl_32>:
c0005e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e12:	c3                   	ret    

c0005e13 <iso_733>:
c0005e13:	eb fb                	jmp    c0005e10 <htohl_32>

c0005e15 <bclear_cache>:
c0005e15:	31 c0                	xor    eax,eax
c0005e17:	8b 14 85 20 20 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddfe0]
c0005e1e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e24:	8b 14 85 80 20 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddf80]
c0005e2b:	40                   	inc    eax
c0005e2c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e32:	83 f8 10             	cmp    eax,0x10
c0005e35:	75 e0                	jne    c0005e17 <bclear_cache+0x2>
c0005e37:	c3                   	ret    

c0005e38 <bgrad_cache>:
c0005e38:	83 fa 0e             	cmp    edx,0xe
c0005e3b:	77 16                	ja     c0005e53 <bgrad_cache+0x1b>
c0005e3d:	53                   	push   ebx
c0005e3e:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e41:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e45:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e48:	42                   	inc    edx
c0005e49:	83 fa 0f             	cmp    edx,0xf
c0005e4c:	75 f3                	jne    c0005e41 <bgrad_cache+0x9>
c0005e4e:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e51:	5b                   	pop    ebx
c0005e52:	c3                   	ret    
c0005e53:	c3                   	ret    

c0005e54 <bclear>:
c0005e54:	eb bf                	jmp    c0005e15 <bclear_cache>

c0005e56 <iso_break_all>:
c0005e56:	31 c0                	xor    eax,eax
c0005e58:	c7 80 d0 25 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdda30],0x1
c0005e62:	05 94 00 00 00       	add    eax,0x94
c0005e67:	3d 40 09 00 00       	cmp    eax,0x940
c0005e6c:	75 ea                	jne    c0005e58 <iso_break_all+0x2>
c0005e6e:	c3                   	ret    

c0005e6f <ucscompare>:
c0005e6f:	55                   	push   ebp
c0005e70:	57                   	push   edi
c0005e71:	89 c7                	mov    edi,eax
c0005e73:	56                   	push   esi
c0005e74:	89 d6                	mov    esi,edx
c0005e76:	53                   	push   ebx
c0005e77:	31 d2                	xor    edx,edx
c0005e79:	83 ec 1c             	sub    esp,0x1c
c0005e7c:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e80:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e85:	c1 e3 08             	shl    ebx,0x8
c0005e88:	09 c3                	or     ebx,eax
c0005e8a:	39 ca                	cmp    edx,ecx
c0005e8c:	7d 42                	jge    c0005ed0 <ucscompare+0x61>
c0005e8e:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e92:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e97:	c1 e0 08             	shl    eax,0x8
c0005e9a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e9e:	09 e8                	or     eax,ebp
c0005ea0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005ea4:	83 f8 3b             	cmp    eax,0x3b
c0005ea7:	74 27                	je     c0005ed0 <ucscompare+0x61>
c0005ea9:	83 ec 0c             	sub    esp,0xc
c0005eac:	50                   	push   eax
c0005ead:	e8 1e aa ff ff       	call   c00008d0 <tolower>
c0005eb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005eb5:	89 c5                	mov    ebp,eax
c0005eb7:	e8 14 aa ff ff       	call   c00008d0 <tolower>
c0005ebc:	83 c4 10             	add    esp,0x10
c0005ebf:	39 c5                	cmp    ebp,eax
c0005ec1:	75 20                	jne    c0005ee3 <ucscompare+0x74>
c0005ec3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005ec7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005ecb:	83 c2 02             	add    edx,0x2
c0005ece:	eb ac                	jmp    c0005e7c <ucscompare+0xd>
c0005ed0:	85 db                	test   ebx,ebx
c0005ed2:	0f 95 c2             	setne  dl
c0005ed5:	31 c0                	xor    eax,eax
c0005ed7:	83 fb 2f             	cmp    ebx,0x2f
c0005eda:	0f 95 c0             	setne  al
c0005edd:	21 d0                	and    eax,edx
c0005edf:	f7 d8                	neg    eax
c0005ee1:	eb 03                	jmp    c0005ee6 <ucscompare+0x77>
c0005ee3:	83 c8 ff             	or     eax,0xffffffff
c0005ee6:	83 c4 1c             	add    esp,0x1c
c0005ee9:	5b                   	pop    ebx
c0005eea:	5e                   	pop    esi
c0005eeb:	5f                   	pop    edi
c0005eec:	5d                   	pop    ebp
c0005eed:	c3                   	ret    

c0005eee <fncompare>:
c0005eee:	55                   	push   ebp
c0005eef:	57                   	push   edi
c0005ef0:	89 c7                	mov    edi,eax
c0005ef2:	56                   	push   esi
c0005ef3:	89 ce                	mov    esi,ecx
c0005ef5:	53                   	push   ebx
c0005ef6:	31 db                	xor    ebx,ebx
c0005ef8:	83 ec 1c             	sub    esp,0x1c
c0005efb:	39 d3                	cmp    ebx,edx
c0005efd:	7d 43                	jge    c0005f42 <fncompare+0x54>
c0005eff:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005f03:	3c 3b                	cmp    al,0x3b
c0005f05:	74 3b                	je     c0005f42 <fncompare+0x54>
c0005f07:	3c 2e                	cmp    al,0x2e
c0005f09:	75 0e                	jne    c0005f19 <fncompare+0x2b>
c0005f0b:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005f0e:	39 d9                	cmp    ecx,ebx
c0005f10:	74 30                	je     c0005f42 <fncompare+0x54>
c0005f12:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005f17:	74 29                	je     c0005f42 <fncompare+0x54>
c0005f19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f1d:	83 ec 0c             	sub    esp,0xc
c0005f20:	50                   	push   eax
c0005f21:	e8 aa a9 ff ff       	call   c00008d0 <tolower>
c0005f26:	89 c5                	mov    ebp,eax
c0005f28:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005f2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0005f2f:	e8 9c a9 ff ff       	call   c00008d0 <tolower>
c0005f34:	83 c4 10             	add    esp,0x10
c0005f37:	39 c5                	cmp    ebp,eax
c0005f39:	75 1d                	jne    c0005f58 <fncompare+0x6a>
c0005f3b:	43                   	inc    ebx
c0005f3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f40:	eb b9                	jmp    c0005efb <fncompare+0xd>
c0005f42:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005f45:	84 d2                	test   dl,dl
c0005f47:	0f 95 c1             	setne  cl
c0005f4a:	31 c0                	xor    eax,eax
c0005f4c:	80 fa 2f             	cmp    dl,0x2f
c0005f4f:	0f 95 c0             	setne  al
c0005f52:	21 c8                	and    eax,ecx
c0005f54:	f7 d8                	neg    eax
c0005f56:	eb 03                	jmp    c0005f5b <fncompare+0x6d>
c0005f58:	83 c8 ff             	or     eax,0xffffffff
c0005f5b:	83 c4 1c             	add    esp,0x1c
c0005f5e:	5b                   	pop    ebx
c0005f5f:	5e                   	pop    esi
c0005f60:	5f                   	pop    edi
c0005f61:	5d                   	pop    ebp
c0005f62:	c3                   	ret    

c0005f63 <isoReadDiscSector>:
c0005f63:	83 ec 0c             	sub    esp,0xc
c0005f66:	0f be 05 60 20 02 c0 	movsx  eax,BYTE PTR ds:0xc0022060
c0005f6d:	50                   	push   eax
c0005f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f7a:	e8 b5 18 01 00       	call   c0017834 <isoReadDiscSectorHelper>
c0005f7f:	83 c4 1c             	add    esp,0x1c
c0005f82:	c3                   	ret    

c0005f83 <bread_cache>:
c0005f83:	55                   	push   ebp
c0005f84:	57                   	push   edi
c0005f85:	89 d7                	mov    edi,edx
c0005f87:	56                   	push   esi
c0005f88:	ba 0f 00 00 00       	mov    edx,0xf
c0005f8d:	53                   	push   ebx
c0005f8e:	89 c6                	mov    esi,eax
c0005f90:	83 ec 0c             	sub    esp,0xc
c0005f93:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005f96:	39 38                	cmp    DWORD PTR [eax],edi
c0005f98:	74 3c                	je     c0005fd6 <bread_cache+0x53>
c0005f9a:	4a                   	dec    edx
c0005f9b:	83 fa ff             	cmp    edx,0xffffffff
c0005f9e:	75 f3                	jne    c0005f93 <bread_cache+0x10>
c0005fa0:	31 db                	xor    ebx,ebx
c0005fa2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fa5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fa8:	74 08                	je     c0005fb2 <bread_cache+0x2f>
c0005faa:	43                   	inc    ebx
c0005fab:	83 fb 10             	cmp    ebx,0x10
c0005fae:	75 f2                	jne    c0005fa2 <bread_cache+0x1f>
c0005fb0:	31 db                	xor    ebx,ebx
c0005fb2:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fb5:	50                   	push   eax
c0005fb6:	6a 01                	push   0x1
c0005fb8:	57                   	push   edi
c0005fb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fbc:	83 c0 04             	add    eax,0x4
c0005fbf:	50                   	push   eax
c0005fc0:	e8 9e ff ff ff       	call   c0005f63 <isoReadDiscSector>
c0005fc5:	83 c4 10             	add    esp,0x10
c0005fc8:	83 c9 ff             	or     ecx,0xffffffff
c0005fcb:	85 c0                	test   eax,eax
c0005fcd:	78 13                	js     c0005fe2 <bread_cache+0x5f>
c0005fcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fd2:	89 da                	mov    edx,ebx
c0005fd4:	89 38                	mov    DWORD PTR [eax],edi
c0005fd6:	89 f0                	mov    eax,esi
c0005fd8:	e8 5b fe ff ff       	call   c0005e38 <bgrad_cache>
c0005fdd:	b9 0f 00 00 00       	mov    ecx,0xf
c0005fe2:	83 c4 0c             	add    esp,0xc
c0005fe5:	89 c8                	mov    eax,ecx
c0005fe7:	5b                   	pop    ebx
c0005fe8:	5e                   	pop    esi
c0005fe9:	5f                   	pop    edi
c0005fea:	5d                   	pop    ebp
c0005feb:	c3                   	ret    

c0005fec <biread>:
c0005fec:	89 c2                	mov    edx,eax
c0005fee:	b8 80 20 02 c0       	mov    eax,0xc0022080
c0005ff3:	eb 8e                	jmp    c0005f83 <bread_cache>

c0005ff5 <bdread>:
c0005ff5:	89 c2                	mov    edx,eax
c0005ff7:	b8 20 20 02 c0       	mov    eax,0xc0022020
c0005ffc:	eb 85                	jmp    c0005f83 <bread_cache>

c0005ffe <strnicmp>:
c0005ffe:	55                   	push   ebp
c0005fff:	57                   	push   edi
c0006000:	56                   	push   esi
c0006001:	31 f6                	xor    esi,esi
c0006003:	53                   	push   ebx
c0006004:	83 ec 0c             	sub    esp,0xc
c0006007:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000600b:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c000600f:	74 42                	je     c0006053 <strnicmp+0x55>
c0006011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006015:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c0006019:	84 c0                	test   al,al
c000601b:	74 36                	je     c0006053 <strnicmp+0x55>
c000601d:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006020:	84 d2                	test   dl,dl
c0006022:	74 2f                	je     c0006053 <strnicmp+0x55>
c0006024:	38 d0                	cmp    al,dl
c0006026:	8d 6e 01             	lea    ebp,[esi+0x1]
c0006029:	75 04                	jne    c000602f <strnicmp+0x31>
c000602b:	89 ee                	mov    esi,ebp
c000602d:	eb dc                	jmp    c000600b <strnicmp+0xd>
c000602f:	83 ec 0c             	sub    esp,0xc
c0006032:	50                   	push   eax
c0006033:	e8 98 a8 ff ff       	call   c00008d0 <tolower>
c0006038:	89 c7                	mov    edi,eax
c000603a:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c000603e:	89 ee                	mov    esi,ebp
c0006040:	89 04 24             	mov    DWORD PTR [esp],eax
c0006043:	e8 88 a8 ff ff       	call   c00008d0 <tolower>
c0006048:	83 c4 10             	add    esp,0x10
c000604b:	29 c7                	sub    edi,eax
c000604d:	89 f8                	mov    eax,edi
c000604f:	74 ba                	je     c000600b <strnicmp+0xd>
c0006051:	eb 02                	jmp    c0006055 <strnicmp+0x57>
c0006053:	31 c0                	xor    eax,eax
c0006055:	83 c4 0c             	add    esp,0xc
c0006058:	5b                   	pop    ebx
c0006059:	5e                   	pop    esi
c000605a:	5f                   	pop    edi
c000605b:	5d                   	pop    ebp
c000605c:	c3                   	ret    

c000605d <find_object>:
c000605d:	55                   	push   ebp
c000605e:	89 c5                	mov    ebp,eax
c0006060:	57                   	push   edi
c0006061:	56                   	push   esi
c0006062:	53                   	push   ebx
c0006063:	89 d3                	mov    ebx,edx
c0006065:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000606b:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006072:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006076:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000607a:	83 3d b4 2e 02 c0 00 	cmp    DWORD PTR ds:0xc0022eb4,0x0
c0006081:	74 0b                	je     c000608e <find_object+0x31>
c0006083:	89 ea                	mov    edx,ebp
c0006085:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006089:	e8 b6 fc ff ff       	call   c0005d44 <utf2ucs>
c000608e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006091:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006095:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000609a:	7e 11                	jle    c00060ad <find_object+0x50>
c000609c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060a0:	e8 47 ff ff ff       	call   c0005fec <biread>
c00060a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060a9:	85 c0                	test   eax,eax
c00060ab:	79 07                	jns    c00060b4 <find_object+0x57>
c00060ad:	31 db                	xor    ebx,ebx
c00060af:	e9 5b 01 00 00       	jmp    c000620f <find_object+0x1b2>
c00060b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060c4:	8b 04 85 80 20 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffddf80]
c00060cb:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060cf:	8a 03                	mov    al,BYTE PTR [ebx]
c00060d1:	84 c0                	test   al,al
c00060d3:	75 0e                	jne    c00060e3 <find_object+0x86>
c00060d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060d9:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c00060e1:	eb b2                	jmp    c0006095 <find_object+0x38>
c00060e3:	8b 35 b4 2e 02 c0    	mov    esi,DWORD PTR ds:0xc0022eb4
c00060e9:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00060ed:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00060f1:	89 ca                	mov    edx,ecx
c00060f3:	85 f6                	test   esi,esi
c00060f5:	74 2b                	je     c0006122 <find_object+0xc5>
c00060f7:	8d 43 21             	lea    eax,[ebx+0x21]
c00060fa:	8d 54 24 20          	lea    edx,[esp+0x20]
c00060fe:	e8 6c fd ff ff       	call   c0005e6f <ucscompare>
c0006103:	85 c0                	test   eax,eax
c0006105:	0f 84 c1 00 00 00    	je     c00061cc <find_object+0x16f>
c000610b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000610e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006112:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c000611a:	0f 8e dc 00 00 00    	jle    c00061fc <find_object+0x19f>
c0006120:	eb b3                	jmp    c00060d5 <find_object+0x78>
c0006122:	0f b6 f0             	movzx  esi,al
c0006125:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c0006129:	29 ce                	sub    esi,ecx
c000612b:	80 e2 01             	and    dl,0x1
c000612e:	74 05                	je     c0006135 <find_object+0xd8>
c0006130:	83 ee 21             	sub    esi,0x21
c0006133:	eb 55                	jmp    c000618a <find_object+0x12d>
c0006135:	47                   	inc    edi
c0006136:	83 ee 22             	sub    esi,0x22
c0006139:	eb 4f                	jmp    c000618a <find_object+0x12d>
c000613b:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000613e:	48                   	dec    eax
c000613f:	3c 01                	cmp    al,0x1
c0006141:	77 4c                	ja     c000618f <find_object+0x132>
c0006143:	50                   	push   eax
c0006144:	6a 02                	push   0x2
c0006146:	68 80 dc 01 c0       	push   0xc001dc80
c000614b:	57                   	push   edi
c000614c:	e8 0f a6 ff ff       	call   c0000760 <strncmp>
c0006151:	83 c4 10             	add    esp,0x10
c0006154:	85 c0                	test   eax,eax
c0006156:	75 2a                	jne    c0006182 <find_object+0x125>
c0006158:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c000615c:	8d 42 fb             	lea    eax,[edx-0x5]
c000615f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006163:	50                   	push   eax
c0006164:	8d 47 05             	lea    eax,[edi+0x5]
c0006167:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000616b:	50                   	push   eax
c000616c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006170:	50                   	push   eax
c0006171:	e8 ba a4 ff ff       	call   c0000630 <strncpy>
c0006176:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000617a:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006186:	29 c6                	sub    esi,eax
c0006188:	01 c7                	add    edi,eax
c000618a:	83 fe 03             	cmp    esi,0x3
c000618d:	7f ac                	jg     c000613b <find_object+0xde>
c000618f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0006194:	7e 40                	jle    c00061d6 <find_object+0x179>
c0006196:	51                   	push   ecx
c0006197:	51                   	push   ecx
c0006198:	6a 2f                	push   0x2f
c000619a:	55                   	push   ebp
c000619b:	e8 90 a5 ff ff       	call   c0000730 <strchr>
c00061a0:	83 c4 10             	add    esp,0x10
c00061a3:	85 c0                	test   eax,eax
c00061a5:	74 04                	je     c00061ab <find_object+0x14e>
c00061a7:	29 e8                	sub    eax,ebp
c00061a9:	eb 0c                	jmp    c00061b7 <find_object+0x15a>
c00061ab:	83 ec 0c             	sub    esp,0xc
c00061ae:	55                   	push   ebp
c00061af:	e8 8c a3 ff ff       	call   c0000540 <strlen>
c00061b4:	83 c4 10             	add    esp,0x10
c00061b7:	52                   	push   edx
c00061b8:	50                   	push   eax
c00061b9:	55                   	push   ebp
c00061ba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061be:	50                   	push   eax
c00061bf:	e8 3a fe ff ff       	call   c0005ffe <strnicmp>
c00061c4:	83 c4 10             	add    esp,0x10
c00061c7:	e9 37 ff ff ff       	jmp    c0006103 <find_object+0xa6>
c00061cc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061d0:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061d4:	eb 1e                	jmp    c00061f4 <find_object+0x197>
c00061d6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00061da:	8d 43 21             	lea    eax,[ebx+0x21]
c00061dd:	89 e9                	mov    ecx,ebp
c00061df:	e8 0a fd ff ff       	call   c0005eee <fncompare>
c00061e4:	85 c0                	test   eax,eax
c00061e6:	0f 85 1f ff ff ff    	jne    c000610b <find_object+0xae>
c00061ec:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061f0:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00061f4:	0f 85 11 ff ff ff    	jne    c000610b <find_object+0xae>
c00061fa:	eb 13                	jmp    c000620f <find_object+0x1b2>
c00061fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006200:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c0006204:	0f 8f b2 fe ff ff    	jg     c00060bc <find_object+0x5f>
c000620a:	e9 c6 fe ff ff       	jmp    c00060d5 <find_object+0x78>
c000620f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006215:	89 d8                	mov    eax,ebx
c0006217:	5b                   	pop    ebx
c0006218:	5e                   	pop    esi
c0006219:	5f                   	pop    edi
c000621a:	5d                   	pop    ebp
c000621b:	c3                   	ret    

c000621c <find_object_path>:
c000621c:	55                   	push   ebp
c000621d:	57                   	push   edi
c000621e:	89 d7                	mov    edi,edx
c0006220:	56                   	push   esi
c0006221:	89 c6                	mov    esi,eax
c0006223:	53                   	push   ebx
c0006224:	89 cb                	mov    ebx,ecx
c0006226:	83 ec 0c             	sub    esp,0xc
c0006229:	50                   	push   eax
c000622a:	50                   	push   eax
c000622b:	6a 2f                	push   0x2f
c000622d:	56                   	push   esi
c000622e:	e8 fd a4 ff ff       	call   c0000730 <strchr>
c0006233:	83 c4 10             	add    esp,0x10
c0006236:	89 c5                	mov    ebp,eax
c0006238:	85 c0                	test   eax,eax
c000623a:	74 3a                	je     c0006276 <find_object_path+0x5a>
c000623c:	39 ee                	cmp    esi,ebp
c000623e:	74 31                	je     c0006271 <find_object_path+0x55>
c0006240:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006243:	e8 cb fb ff ff       	call   c0005e13 <iso_733>
c0006248:	89 c2                	mov    edx,eax
c000624a:	8d 43 02             	lea    eax,[ebx+0x2]
c000624d:	e8 c1 fb ff ff       	call   c0005e13 <iso_733>
c0006252:	83 ec 0c             	sub    esp,0xc
c0006255:	89 c1                	mov    ecx,eax
c0006257:	52                   	push   edx
c0006258:	89 f0                	mov    eax,esi
c000625a:	ba 01 00 00 00       	mov    edx,0x1
c000625f:	e8 f9 fd ff ff       	call   c000605d <find_object>
c0006264:	83 c4 10             	add    esp,0x10
c0006267:	89 c3                	mov    ebx,eax
c0006269:	85 c0                	test   eax,eax
c000626b:	75 04                	jne    c0006271 <find_object_path+0x55>
c000626d:	31 db                	xor    ebx,ebx
c000626f:	eb 36                	jmp    c00062a7 <find_object_path+0x8b>
c0006271:	8d 75 01             	lea    esi,[ebp+0x1]
c0006274:	eb b3                	jmp    c0006229 <find_object_path+0xd>
c0006276:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006279:	74 28                	je     c00062a3 <find_object_path+0x87>
c000627b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000627e:	e8 90 fb ff ff       	call   c0005e13 <iso_733>
c0006283:	89 c2                	mov    edx,eax
c0006285:	8d 43 02             	lea    eax,[ebx+0x2]
c0006288:	e8 86 fb ff ff       	call   c0005e13 <iso_733>
c000628d:	83 ec 0c             	sub    esp,0xc
c0006290:	89 c1                	mov    ecx,eax
c0006292:	52                   	push   edx
c0006293:	89 f0                	mov    eax,esi
c0006295:	89 fa                	mov    edx,edi
c0006297:	e8 c1 fd ff ff       	call   c000605d <find_object>
c000629c:	83 c4 10             	add    esp,0x10
c000629f:	89 c3                	mov    ebx,eax
c00062a1:	eb 04                	jmp    c00062a7 <find_object_path+0x8b>
c00062a3:	85 ff                	test   edi,edi
c00062a5:	74 c6                	je     c000626d <find_object_path+0x51>
c00062a7:	83 c4 0c             	add    esp,0xc
c00062aa:	89 d8                	mov    eax,ebx
c00062ac:	5b                   	pop    ebx
c00062ad:	5e                   	pop    esi
c00062ae:	5f                   	pop    edi
c00062af:	5d                   	pop    ebp
c00062b0:	c3                   	ret    

c00062b1 <stricmp>:
c00062b1:	57                   	push   edi
c00062b2:	56                   	push   esi
c00062b3:	31 f6                	xor    esi,esi
c00062b5:	53                   	push   ebx
c00062b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062ba:	83 ec 0c             	sub    esp,0xc
c00062bd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062c5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062c9:	50                   	push   eax
c00062ca:	e8 e1 a5 ff ff       	call   c00008b0 <toupper>
c00062cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00062d2:	e8 f9 a5 ff ff       	call   c00008d0 <tolower>
c00062d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062da:	89 c3                	mov    ebx,eax
c00062dc:	e8 cf a5 ff ff       	call   c00008b0 <toupper>
c00062e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00062e4:	e8 e7 a5 ff ff       	call   c00008d0 <tolower>
c00062e9:	83 c4 10             	add    esp,0x10
c00062ec:	39 c3                	cmp    ebx,eax
c00062ee:	75 05                	jne    c00062f5 <stricmp+0x44>
c00062f0:	46                   	inc    esi
c00062f1:	85 db                	test   ebx,ebx
c00062f3:	75 c1                	jne    c00062b6 <stricmp+0x5>
c00062f5:	29 c3                	sub    ebx,eax
c00062f7:	89 d8                	mov    eax,ebx
c00062f9:	5b                   	pop    ebx
c00062fa:	5e                   	pop    esi
c00062fb:	5f                   	pop    edi
c00062fc:	c3                   	ret    

c00062fd <iso_open>:
c00062fd:	57                   	push   edi
c00062fe:	31 c0                	xor    eax,eax
c0006300:	56                   	push   esi
c0006301:	b9 80 2e 02 c0       	mov    ecx,0xc0022e80
c0006306:	53                   	push   ebx
c0006307:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000630c:	0f 95 c0             	setne  al
c000630f:	89 c2                	mov    edx,eax
c0006311:	89 c6                	mov    esi,eax
c0006313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006317:	e8 00 ff ff ff       	call   c000621c <find_object_path>
c000631c:	83 ca ff             	or     edx,0xffffffff
c000631f:	85 c0                	test   eax,eax
c0006321:	74 5e                	je     c0006381 <iso_open+0x84>
c0006323:	89 c1                	mov    ecx,eax
c0006325:	31 d2                	xor    edx,edx
c0006327:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000632d:	83 bf 40 25 02 c0 00 	cmp    DWORD PTR [edi-0x3ffddac0],0x0
c0006334:	75 42                	jne    c0006378 <iso_open+0x7b>
c0006336:	8d 41 02             	lea    eax,[ecx+0x2]
c0006339:	c7 87 40 25 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffddac0],0xffffffff
c0006343:	e8 cb fa ff ff       	call   c0005e13 <iso_733>
c0006348:	89 b7 44 25 02 c0    	mov    DWORD PTR [edi-0x3ffddabc],esi
c000634e:	89 87 40 25 02 c0    	mov    DWORD PTR [edi-0x3ffddac0],eax
c0006354:	c7 87 48 25 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffddab8],0x0
c000635e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006361:	e8 ad fa ff ff       	call   c0005e13 <iso_733>
c0006366:	c7 87 d0 25 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdda30],0x0
c0006370:	89 87 4c 25 02 c0    	mov    DWORD PTR [edi-0x3ffddab4],eax
c0006376:	eb 09                	jmp    c0006381 <iso_open+0x84>
c0006378:	42                   	inc    edx
c0006379:	83 fa 10             	cmp    edx,0x10
c000637c:	75 a9                	jne    c0006327 <iso_open+0x2a>
c000637e:	83 ca ff             	or     edx,0xffffffff
c0006381:	5b                   	pop    ebx
c0006382:	89 d0                	mov    eax,edx
c0006384:	5e                   	pop    esi
c0006385:	5f                   	pop    edi
c0006386:	c3                   	ret    

c0006387 <iso_close>:
c0006387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000638b:	83 f8 0f             	cmp    eax,0xf
c000638e:	7f 10                	jg     c00063a0 <iso_close+0x19>
c0006390:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006396:	c7 80 40 25 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffddac0],0x0
c00063a0:	e9 70 fa ff ff       	jmp    c0005e15 <bclear_cache>

c00063a5 <iso_read>:
c00063a5:	55                   	push   ebp
c00063a6:	57                   	push   edi
c00063a7:	56                   	push   esi
c00063a8:	53                   	push   ebx
c00063a9:	83 ec 1c             	sub    esp,0x1c
c00063ac:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063b0:	83 fd 0f             	cmp    ebp,0xf
c00063b3:	7e 0a                	jle    c00063bf <iso_read+0x1a>
c00063b5:	83 c8 ff             	or     eax,0xffffffff
c00063b8:	89 c2                	mov    edx,eax
c00063ba:	e9 f4 00 00 00       	jmp    c00064b3 <iso_read+0x10e>
c00063bf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063c5:	83 bd 40 25 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffddac0],0x0
c00063cc:	74 e7                	je     c00063b5 <iso_read+0x10>
c00063ce:	8b 95 d0 25 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdda30]
c00063d4:	85 d2                	test   edx,edx
c00063d6:	75 dd                	jne    c00063b5 <iso_read+0x10>
c00063d8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063dd:	0f 84 cd 00 00 00    	je     c00064b0 <iso_read+0x10b>
c00063e3:	8b 85 48 25 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffddab8]
c00063e9:	8b 8d 4c 25 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffddab4]
c00063ef:	29 c1                	sub    ecx,eax
c00063f1:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00063f5:	76 04                	jbe    c00063fb <iso_read+0x56>
c00063f7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00063fb:	85 c9                	test   ecx,ecx
c00063fd:	0f 84 ad 00 00 00    	je     c00064b0 <iso_read+0x10b>
c0006403:	89 c6                	mov    esi,eax
c0006405:	bb 00 08 00 00       	mov    ebx,0x800
c000640a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006410:	c1 e8 0b             	shr    eax,0xb
c0006413:	29 f3                	sub    ebx,esi
c0006415:	03 85 40 25 02 c0    	add    eax,DWORD PTR [ebp-0x3ffddac0]
c000641b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006421:	7e 3f                	jle    c0006462 <iso_read+0xbd>
c0006423:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006429:	75 37                	jne    c0006462 <iso_read+0xbd>
c000642b:	be 20 00 00 00       	mov    esi,0x20
c0006430:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006436:	7f 05                	jg     c000643d <iso_read+0x98>
c0006438:	89 ce                	mov    esi,ecx
c000643a:	c1 fe 0b             	sar    esi,0xb
c000643d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006441:	89 f3                	mov    ebx,esi
c0006443:	c1 e3 0b             	shl    ebx,0xb
c0006446:	52                   	push   edx
c0006447:	56                   	push   esi
c0006448:	50                   	push   eax
c0006449:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000644d:	e8 11 fb ff ff       	call   c0005f63 <isoReadDiscSector>
c0006452:	83 c4 10             	add    esp,0x10
c0006455:	85 c0                	test   eax,eax
c0006457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000645b:	7f 3e                	jg     c000649b <iso_read+0xf6>
c000645d:	e9 53 ff ff ff       	jmp    c00063b5 <iso_read+0x10>
c0006462:	39 cb                	cmp    ebx,ecx
c0006464:	7e 02                	jle    c0006468 <iso_read+0xc3>
c0006466:	89 cb                	mov    ebx,ecx
c0006468:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000646c:	e8 84 fb ff ff       	call   c0005ff5 <bdread>
c0006471:	85 c0                	test   eax,eax
c0006473:	0f 88 3c ff ff ff    	js     c00063b5 <iso_read+0x10>
c0006479:	8b 0c 85 20 20 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffddfe0]
c0006480:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006484:	8b 85 48 25 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffddab8]
c000648a:	25 ff 07 00 00       	and    eax,0x7ff
c000648f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006493:	89 d9                	mov    ecx,ebx
c0006495:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006497:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000649b:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c000649f:	01 9d 48 25 02 c0    	add    DWORD PTR [ebp-0x3ffddab8],ebx
c00064a5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064a9:	01 da                	add    edx,ebx
c00064ab:	e9 28 ff ff ff       	jmp    c00063d8 <iso_read+0x33>
c00064b0:	89 d0                	mov    eax,edx
c00064b2:	99                   	cdq    
c00064b3:	83 c4 1c             	add    esp,0x1c
c00064b6:	5b                   	pop    ebx
c00064b7:	5e                   	pop    esi
c00064b8:	5f                   	pop    edi
c00064b9:	5d                   	pop    ebp
c00064ba:	c3                   	ret    

c00064bb <iso_seek>:
c00064bb:	55                   	push   ebp
c00064bc:	83 c8 ff             	or     eax,0xffffffff
c00064bf:	57                   	push   edi
c00064c0:	89 c2                	mov    edx,eax
c00064c2:	56                   	push   esi
c00064c3:	53                   	push   ebx
c00064c4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064c8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064d0:	83 fe 0f             	cmp    esi,0xf
c00064d3:	7f 65                	jg     c000653a <iso_seek+0x7f>
c00064d5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064db:	8d 8d 40 25 02 c0    	lea    ecx,[ebp-0x3ffddac0]
c00064e1:	83 bd 40 25 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffddac0],0x0
c00064e8:	74 50                	je     c000653a <iso_seek+0x7f>
c00064ea:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00064f1:	75 47                	jne    c000653a <iso_seek+0x7f>
c00064f3:	83 fb 01             	cmp    ebx,0x1
c00064f6:	74 0e                	je     c0006506 <iso_seek+0x4b>
c00064f8:	83 fb 02             	cmp    ebx,0x2
c00064fb:	74 0e                	je     c000650b <iso_seek+0x50>
c00064fd:	85 db                	test   ebx,ebx
c00064ff:	75 39                	jne    c000653a <iso_seek+0x7f>
c0006501:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006504:	eb 0d                	jmp    c0006513 <iso_seek+0x58>
c0006506:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006509:	eb 08                	jmp    c0006513 <iso_seek+0x58>
c000650b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000650e:	01 f8                	add    eax,edi
c0006510:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006513:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006519:	8b 88 4c 25 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffddab4]
c000651f:	05 40 25 02 c0       	add    eax,0xc0022540
c0006524:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006527:	76 03                	jbe    c000652c <iso_seek+0x71>
c0006529:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000652c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006532:	8b 82 48 25 02 c0    	mov    eax,DWORD PTR [edx-0x3ffddab8]
c0006538:	31 d2                	xor    edx,edx
c000653a:	5b                   	pop    ebx
c000653b:	5e                   	pop    esi
c000653c:	5f                   	pop    edi
c000653d:	5d                   	pop    ebp
c000653e:	c3                   	ret    

c000653f <iso_tell>:
c000653f:	83 c8 ff             	or     eax,0xffffffff
c0006542:	53                   	push   ebx
c0006543:	89 c2                	mov    edx,eax
c0006545:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006549:	83 f9 0f             	cmp    ecx,0xf
c000654c:	7f 20                	jg     c000656e <iso_tell+0x2f>
c000654e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006554:	83 bb 40 25 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffddac0],0x0
c000655b:	74 11                	je     c000656e <iso_tell+0x2f>
c000655d:	83 bb d0 25 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdda30],0x0
c0006564:	75 08                	jne    c000656e <iso_tell+0x2f>
c0006566:	8b 83 48 25 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffddab8]
c000656c:	31 d2                	xor    edx,edx
c000656e:	5b                   	pop    ebx
c000656f:	c3                   	ret    

c0006570 <iso_total>:
c0006570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006574:	83 c8 ff             	or     eax,0xffffffff
c0006577:	83 fa 0f             	cmp    edx,0xf
c000657a:	7f 1e                	jg     c000659a <iso_total+0x2a>
c000657c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006582:	83 ba 40 25 02 c0 00 	cmp    DWORD PTR [edx-0x3ffddac0],0x0
c0006589:	74 0f                	je     c000659a <iso_total+0x2a>
c000658b:	83 ba d0 25 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdda30],0x0
c0006592:	75 06                	jne    c000659a <iso_total+0x2a>
c0006594:	8b 82 4c 25 02 c0    	mov    eax,DWORD PTR [edx-0x3ffddab4]
c000659a:	c3                   	ret    

c000659b <fn_postprocess>:
c000659b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000659f:	89 d0                	mov    eax,edx
c00065a1:	8a 08                	mov    cl,BYTE PTR [eax]
c00065a3:	80 f9 3b             	cmp    cl,0x3b
c00065a6:	74 07                	je     c00065af <fn_postprocess+0x14>
c00065a8:	84 c9                	test   cl,cl
c00065aa:	74 03                	je     c00065af <fn_postprocess+0x14>
c00065ac:	40                   	inc    eax
c00065ad:	eb f2                	jmp    c00065a1 <fn_postprocess+0x6>
c00065af:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065b2:	39 d0                	cmp    eax,edx
c00065b4:	76 0a                	jbe    c00065c0 <fn_postprocess+0x25>
c00065b6:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065ba:	75 04                	jne    c00065c0 <fn_postprocess+0x25>
c00065bc:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065c0:	c3                   	ret    

c00065c1 <iso_readdir>:
c00065c1:	55                   	push   ebp
c00065c2:	57                   	push   edi
c00065c3:	56                   	push   esi
c00065c4:	53                   	push   ebx
c00065c5:	83 ec 1c             	sub    esp,0x1c
c00065c8:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00065cc:	83 fb 0f             	cmp    ebx,0xf
c00065cf:	7f 28                	jg     c00065f9 <iso_readdir+0x38>
c00065d1:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00065d7:	8d b8 40 25 02 c0    	lea    edi,[eax-0x3ffddac0]
c00065dd:	83 b8 40 25 02 c0 00 	cmp    DWORD PTR [eax-0x3ffddac0],0x0
c00065e4:	74 13                	je     c00065f9 <iso_readdir+0x38>
c00065e6:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00065ea:	74 0d                	je     c00065f9 <iso_readdir+0x38>
c00065ec:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00065f3:	0f 84 b1 00 00 00    	je     c00066aa <iso_readdir+0xe9>
c00065f9:	83 ec 0c             	sub    esp,0xc
c00065fc:	68 83 dc 01 c0       	push   0xc001dc83
c0006601:	e8 8a 12 01 00       	call   c0017890 <iso_kprintf>
c0006606:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006609:	e8 a2 12 01 00       	call   c00178b0 <iso_kprintfd>
c000660e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006614:	c7 04 24 88 dc 01 c0 	mov    DWORD PTR [esp],0xc001dc88
c000661b:	e8 70 12 01 00       	call   c0017890 <iso_kprintf>
c0006620:	5d                   	pop    ebp
c0006621:	ff b3 40 25 02 c0    	push   DWORD PTR [ebx-0x3ffddac0]
c0006627:	e8 84 12 01 00       	call   c00178b0 <iso_kprintfd>
c000662c:	c7 04 24 8e dc 01 c0 	mov    DWORD PTR [esp],0xc001dc8e
c0006633:	e8 58 12 01 00       	call   c0017890 <iso_kprintf>
c0006638:	58                   	pop    eax
c0006639:	ff b3 44 25 02 c0    	push   DWORD PTR [ebx-0x3ffddabc]
c000663f:	e8 6c 12 01 00       	call   c00178b0 <iso_kprintfd>
c0006644:	c7 04 24 94 dc 01 c0 	mov    DWORD PTR [esp],0xc001dc94
c000664b:	e8 40 12 01 00       	call   c0017890 <iso_kprintf>
c0006650:	58                   	pop    eax
c0006651:	ff b3 d0 25 02 c0    	push   DWORD PTR [ebx-0x3ffdda30]
c0006657:	e8 54 12 01 00       	call   c00178b0 <iso_kprintfd>
c000665c:	83 c4 10             	add    esp,0x10
c000665f:	eb 42                	jmp    c00066a3 <iso_readdir+0xe2>
c0006661:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006664:	8b 34 85 80 20 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffddf80]
c000666b:	89 d1                	mov    ecx,edx
c000666d:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006673:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006677:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000667a:	75 35                	jne    c00066b1 <iso_readdir+0xf0>
c000667c:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006682:	81 c2 00 08 00 00    	add    edx,0x800
c0006688:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000668b:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000668e:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006691:	73 1e                	jae    c00066b1 <iso_readdir+0xf0>
c0006693:	c1 ea 0b             	shr    edx,0xb
c0006696:	8b 07                	mov    eax,DWORD PTR [edi]
c0006698:	01 d0                	add    eax,edx
c000669a:	e8 4d f9 ff ff       	call   c0005fec <biread>
c000669f:	85 c0                	test   eax,eax
c00066a1:	79 be                	jns    c0006661 <iso_readdir+0xa0>
c00066a3:	31 c0                	xor    eax,eax
c00066a5:	e9 66 01 00 00       	jmp    c0006810 <iso_readdir+0x24f>
c00066aa:	31 f6                	xor    esi,esi
c00066ac:	83 c8 ff             	or     eax,0xffffffff
c00066af:	eb da                	jmp    c000668b <iso_readdir+0xca>
c00066b1:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00066b7:	8b ba 48 25 02 c0    	mov    edi,DWORD PTR [edx-0x3ffddab8]
c00066bd:	81 c2 40 25 02 c0    	add    edx,0xc0022540
c00066c3:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00066c6:	73 db                	jae    c00066a3 <iso_readdir+0xe2>
c00066c8:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00066cc:	75 34                	jne    c0006702 <iso_readdir+0x141>
c00066ce:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00066d2:	75 2e                	jne    c0006702 <iso_readdir+0x141>
c00066d4:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00066d7:	8b 34 85 80 20 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffddf80]
c00066de:	01 f9                	add    ecx,edi
c00066e0:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00066e3:	89 c8                	mov    eax,ecx
c00066e5:	25 ff 07 00 00       	and    eax,0x7ff
c00066ea:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c00066ef:	01 c8                	add    eax,ecx
c00066f1:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00066f4:	25 ff 07 00 00       	and    eax,0x7ff
c00066f9:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c00066fd:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006700:	74 a1                	je     c00066a3 <iso_readdir+0xe2>
c0006702:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006708:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000670c:	8d 56 21             	lea    edx,[esi+0x21]
c000670f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006713:	8d a8 58 25 02 c0    	lea    ebp,[eax-0x3ffddaa8]
c0006719:	83 3d b4 2e 02 c0 00 	cmp    DWORD PTR ds:0xc0022eb4,0x0
c0006720:	74 0c                	je     c000672e <iso_readdir+0x16d>
c0006722:	89 e8                	mov    eax,ebp
c0006724:	e8 3d f6 ff ff       	call   c0005d66 <ucs2utfn>
c0006729:	e9 a6 00 00 00       	jmp    c00067d4 <iso_readdir+0x213>
c000672e:	57                   	push   edi
c000672f:	51                   	push   ecx
c0006730:	52                   	push   edx
c0006731:	55                   	push   ebp
c0006732:	e8 f9 9e ff ff       	call   c0000630 <strncpy>
c0006737:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000673b:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006741:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006744:	c6 84 01 58 25 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffddaa8],0x0
c000674c:	e8 4a fe ff ff       	call   c000659b <fn_postprocess>
c0006751:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006755:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006758:	83 c4 10             	add    esp,0x10
c000675b:	29 d0                	sub    eax,edx
c000675d:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006761:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006765:	74 05                	je     c000676c <iso_readdir+0x1ab>
c0006767:	83 e8 21             	sub    eax,0x21
c000676a:	eb 04                	jmp    c0006770 <iso_readdir+0x1af>
c000676c:	47                   	inc    edi
c000676d:	83 e8 22             	sub    eax,0x22
c0006770:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006774:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000677a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000677e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006783:	7e 4f                	jle    c00067d4 <iso_readdir+0x213>
c0006785:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006788:	48                   	dec    eax
c0006789:	3c 01                	cmp    al,0x1
c000678b:	77 47                	ja     c00067d4 <iso_readdir+0x213>
c000678d:	52                   	push   edx
c000678e:	6a 02                	push   0x2
c0006790:	68 80 dc 01 c0       	push   0xc001dc80
c0006795:	57                   	push   edi
c0006796:	e8 c5 9f ff ff       	call   c0000760 <strncmp>
c000679b:	83 c4 10             	add    esp,0x10
c000679e:	85 c0                	test   eax,eax
c00067a0:	75 26                	jne    c00067c8 <iso_readdir+0x207>
c00067a2:	50                   	push   eax
c00067a3:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067a7:	83 e8 05             	sub    eax,0x5
c00067aa:	50                   	push   eax
c00067ab:	8d 47 05             	lea    eax,[edi+0x5]
c00067ae:	50                   	push   eax
c00067af:	55                   	push   ebp
c00067b0:	e8 7b 9e ff ff       	call   c0000630 <strncpy>
c00067b5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00067b9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067bd:	83 c4 10             	add    esp,0x10
c00067c0:	c6 84 08 53 25 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffddaad],0x0
c00067c8:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067cc:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00067d0:	01 c7                	add    edi,eax
c00067d2:	eb aa                	jmp    c000677e <iso_readdir+0x1bd>
c00067d4:	83 c8 ff             	or     eax,0xffffffff
c00067d7:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00067db:	89 c2                	mov    edx,eax
c00067dd:	75 0a                	jne    c00067e9 <iso_readdir+0x228>
c00067df:	8d 46 0a             	lea    eax,[esi+0xa]
c00067e2:	e8 2c f6 ff ff       	call   c0005e13 <iso_733>
c00067e7:	31 d2                	xor    edx,edx
c00067e9:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c00067ef:	89 83 50 25 02 c0    	mov    DWORD PTR [ebx-0x3ffddab0],eax
c00067f5:	89 93 54 25 02 c0    	mov    DWORD PTR [ebx-0x3ffddaac],edx
c00067fb:	81 c3 40 25 02 c0    	add    ebx,0xc0022540
c0006801:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006804:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006807:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000680b:	05 50 25 02 c0       	add    eax,0xc0022550
c0006810:	83 c4 1c             	add    esp,0x1c
c0006813:	5b                   	pop    ebx
c0006814:	5e                   	pop    esi
c0006815:	5f                   	pop    edi
c0006816:	5d                   	pop    ebp
c0006817:	c3                   	ret    

c0006818 <iso_reset>:
c0006818:	e8 39 f6 ff ff       	call   c0005e56 <iso_break_all>
c000681d:	e8 32 f6 ff ff       	call   c0005e54 <bclear>
c0006822:	31 c0                	xor    eax,eax
c0006824:	c3                   	ret    

c0006825 <init_percd>:
c0006825:	57                   	push   edi
c0006826:	56                   	push   esi
c0006827:	53                   	push   ebx
c0006828:	bb 01 00 00 00       	mov    ebx,0x1
c000682d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006831:	a2 60 20 02 c0       	mov    ds:0xc0022060,al
c0006836:	e8 dd ff ff ff       	call   c0006818 <iso_reset>
c000683b:	c7 05 b4 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022eb4,0x0
c0006845:	a1 ac 2e 02 c0       	mov    eax,ds:0xc0022eac
c000684a:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c000684e:	e8 99 f7 ff ff       	call   c0005fec <biread>
c0006853:	89 c6                	mov    esi,eax
c0006855:	85 c0                	test   eax,eax
c0006857:	0f 88 ba 00 00 00    	js     c0006917 <init_percd+0xf2>
c000685d:	8b 04 85 80 20 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffddf80]
c0006864:	83 c0 04             	add    eax,0x4
c0006867:	52                   	push   edx
c0006868:	6a 06                	push   0x6
c000686a:	68 9d dc 01 c0       	push   0xc001dc9d
c000686f:	50                   	push   eax
c0006870:	e8 1b 9b ff ff       	call   c0000390 <memcmp>
c0006875:	83 c4 10             	add    esp,0x10
c0006878:	85 c0                	test   eax,eax
c000687a:	74 08                	je     c0006884 <init_percd+0x5f>
c000687c:	43                   	inc    ebx
c000687d:	83 fb 04             	cmp    ebx,0x4
c0006880:	75 c3                	jne    c0006845 <init_percd+0x20>
c0006882:	eb 1a                	jmp    c000689e <init_percd+0x79>
c0006884:	8b 04 b5 80 20 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffddf80]
c000688b:	83 c0 5c             	add    eax,0x5c
c000688e:	e8 51 f5 ff ff       	call   c0005de4 <isjoliet>
c0006893:	a3 b4 2e 02 c0       	mov    ds:0xc0022eb4,eax
c0006898:	85 c0                	test   eax,eax
c000689a:	74 e0                	je     c000687c <init_percd+0x57>
c000689c:	eb 3e                	jmp    c00068dc <init_percd+0xb7>
c000689e:	83 3d b4 2e 02 c0 00 	cmp    DWORD PTR ds:0xc0022eb4,0x0
c00068a5:	75 35                	jne    c00068dc <init_percd+0xb7>
c00068a7:	a1 ac 2e 02 c0       	mov    eax,ds:0xc0022eac
c00068ac:	83 c0 10             	add    eax,0x10
c00068af:	e8 38 f7 ff ff       	call   c0005fec <biread>
c00068b4:	89 c6                	mov    esi,eax
c00068b6:	85 c0                	test   eax,eax
c00068b8:	78 5f                	js     c0006919 <init_percd+0xf4>
c00068ba:	83 cb ff             	or     ebx,0xffffffff
c00068bd:	50                   	push   eax
c00068be:	8b 04 b5 80 20 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffddf80]
c00068c5:	6a 06                	push   0x6
c00068c7:	83 c0 04             	add    eax,0x4
c00068ca:	68 a4 dc 01 c0       	push   0xc001dca4
c00068cf:	50                   	push   eax
c00068d0:	e8 bb 9a ff ff       	call   c0000390 <memcmp>
c00068d5:	83 c4 10             	add    esp,0x10
c00068d8:	85 c0                	test   eax,eax
c00068da:	75 3d                	jne    c0006919 <init_percd+0xf4>
c00068dc:	8b 34 b5 80 20 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffddf80]
c00068e3:	bf 80 2e 02 c0       	mov    edi,0xc0022e80
c00068e8:	81 c6 a0 00 00 00    	add    esi,0xa0
c00068ee:	b9 22 00 00 00       	mov    ecx,0x22
c00068f3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00068f5:	b8 82 2e 02 c0       	mov    eax,0xc0022e82
c00068fa:	31 db                	xor    ebx,ebx
c00068fc:	e8 12 f5 ff ff       	call   c0005e13 <iso_733>
c0006901:	a3 a8 2e 02 c0       	mov    ds:0xc0022ea8,eax
c0006906:	b8 8a 2e 02 c0       	mov    eax,0xc0022e8a
c000690b:	e8 03 f5 ff ff       	call   c0005e13 <iso_733>
c0006910:	a3 a4 2e 02 c0       	mov    ds:0xc0022ea4,eax
c0006915:	eb 02                	jmp    c0006919 <init_percd+0xf4>
c0006917:	89 c3                	mov    ebx,eax
c0006919:	89 d8                	mov    eax,ebx
c000691b:	5b                   	pop    ebx
c000691c:	5e                   	pop    esi
c000691d:	5f                   	pop    edi
c000691e:	c3                   	ret    

c000691f <iso_ioctl>:
c000691f:	e8 f4 fe ff ff       	call   c0006818 <iso_reset>
c0006924:	31 c0                	xor    eax,eax
c0006926:	c3                   	ret    

c0006927 <fs_iso9660_init>:
c0006927:	53                   	push   ebx
c0006928:	31 db                	xor    ebx,ebx
c000692a:	83 ec 0c             	sub    esp,0xc
c000692d:	68 40 09 00 00       	push   0x940
c0006932:	6a 00                	push   0x0
c0006934:	68 40 25 02 c0       	push   0xc0022540
c0006939:	e8 92 9b ff ff       	call   c00004d0 <memset>
c000693e:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006945:	c7 05 40 25 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0022540,0xffffffff
c000694f:	e8 cd 0e 00 00       	call   c0007821 <malloc>
c0006954:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000695b:	a3 b0 2e 02 c0       	mov    ds:0xc0022eb0,eax
c0006960:	e8 bc 0e 00 00       	call   c0007821 <malloc>
c0006965:	83 c4 10             	add    esp,0x10
c0006968:	a3 20 25 02 c0       	mov    ds:0xc0022520,eax
c000696d:	83 ec 0c             	sub    esp,0xc
c0006970:	68 04 08 00 00       	push   0x804
c0006975:	e8 a7 0e 00 00       	call   c0007821 <malloc>
c000697a:	89 04 9d 80 20 02 c0 	mov    DWORD PTR [ebx*4-0x3ffddf80],eax
c0006981:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006987:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c000698e:	e8 8e 0e 00 00       	call   c0007821 <malloc>
c0006993:	83 c4 10             	add    esp,0x10
c0006996:	89 04 9d 20 20 02 c0 	mov    DWORD PTR [ebx*4-0x3ffddfe0],eax
c000699d:	43                   	inc    ebx
c000699e:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00069a4:	83 fb 10             	cmp    ebx,0x10
c00069a7:	75 c4                	jne    c000696d <fs_iso9660_init+0x46>
c00069a9:	31 c0                	xor    eax,eax
c00069ab:	83 c4 08             	add    esp,0x8
c00069ae:	5b                   	pop    ebx
c00069af:	c3                   	ret    

c00069b0 <fs_iso9660_shutdown>:
c00069b0:	53                   	push   ebx
c00069b1:	31 db                	xor    ebx,ebx
c00069b3:	83 ec 08             	sub    esp,0x8
c00069b6:	83 ec 0c             	sub    esp,0xc
c00069b9:	ff 34 9d 80 20 02 c0 	push   DWORD PTR [ebx*4-0x3ffddf80]
c00069c0:	e8 6c 0e 00 00       	call   c0007831 <free>
c00069c5:	58                   	pop    eax
c00069c6:	ff 34 9d 20 20 02 c0 	push   DWORD PTR [ebx*4-0x3ffddfe0]
c00069cd:	43                   	inc    ebx
c00069ce:	e8 5e 0e 00 00       	call   c0007831 <free>
c00069d3:	83 c4 10             	add    esp,0x10
c00069d6:	83 fb 10             	cmp    ebx,0x10
c00069d9:	75 db                	jne    c00069b6 <fs_iso9660_shutdown+0x6>
c00069db:	a1 b0 2e 02 c0       	mov    eax,ds:0xc0022eb0
c00069e0:	85 c0                	test   eax,eax
c00069e2:	74 0c                	je     c00069f0 <fs_iso9660_shutdown+0x40>
c00069e4:	83 ec 0c             	sub    esp,0xc
c00069e7:	50                   	push   eax
c00069e8:	e8 44 0e 00 00       	call   c0007831 <free>
c00069ed:	83 c4 10             	add    esp,0x10
c00069f0:	a1 20 25 02 c0       	mov    eax,ds:0xc0022520
c00069f5:	85 c0                	test   eax,eax
c00069f7:	74 0c                	je     c0006a05 <fs_iso9660_shutdown+0x55>
c00069f9:	83 ec 0c             	sub    esp,0xc
c00069fc:	50                   	push   eax
c00069fd:	e8 2f 0e 00 00       	call   c0007831 <free>
c0006a02:	83 c4 10             	add    esp,0x10
c0006a05:	c7 05 20 25 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022520,0x0
c0006a0f:	c7 05 b0 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022eb0,0x0
c0006a19:	31 c0                	xor    eax,eax
c0006a1b:	83 c4 08             	add    esp,0x8
c0006a1e:	5b                   	pop    ebx
c0006a1f:	c3                   	ret    

c0006a20 <Computer::close(int, int, void*)>:
c0006a20:	57                   	push   edi
c0006a21:	56                   	push   esi
c0006a22:	53                   	push   ebx
c0006a23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006a27:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006a2b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006a2f:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006a35:	83 ec 0c             	sub    esp,0xc
c0006a38:	50                   	push   eax
c0006a39:	e8 d8 50 00 00       	call   c000bb16 <Device::closeAll()>
c0006a3e:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006a44:	83 c4 10             	add    esp,0x10
c0006a47:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a49:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006a4d:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006a55:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006a59:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006a5d:	5b                   	pop    ebx
c0006a5e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006a61:	5e                   	pop    esi
c0006a62:	5f                   	pop    edi
c0006a63:	ff e0                	jmp    eax

c0006a65 <Krnl::firstTask()>:
c0006a65:	53                   	push   ebx
c0006a66:	83 ec 14             	sub    esp,0x14
c0006a69:	fb                   	sti    
c0006a6a:	68 ab dc 01 c0       	push   0xc001dcab
c0006a6f:	e8 d7 91 00 00       	call   c000fc4b <KeSetBootMessage(char const*)>
c0006a74:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006a7b:	e8 a1 0d 00 00       	call   c0007821 <malloc>
c0006a80:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006a87:	89 c3                	mov    ebx,eax
c0006a89:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0006a8e:	50                   	push   eax
c0006a8f:	68 c4 dc 01 c0       	push   0xc001dcc4
c0006a94:	6a 01                	push   0x1
c0006a96:	53                   	push   ebx
c0006a97:	e8 fc c8 00 00       	call   c0013398 <Process::Process(bool, char const*, Process*, char**)>
c0006a9c:	83 c4 20             	add    esp,0x20
c0006a9f:	68 ff 00 00 00       	push   0xff
c0006aa4:	6a 00                	push   0x0
c0006aa6:	68 75 72 00 c0       	push   0xc0007275
c0006aab:	53                   	push   ebx
c0006aac:	e8 0f cb 00 00       	call   c00135c0 <Process::createThread(void (*)(void*), void*, int)>
c0006ab1:	8b 15 90 61 02 c0    	mov    edx,DWORD PTR ds:0xc0026190
c0006ab7:	6a 7a                	push   0x7a
c0006ab9:	6a 00                	push   0x0
c0006abb:	68 14 40 01 c0       	push   0xc0014014
c0006ac0:	52                   	push   edx
c0006ac1:	e8 fa ca 00 00       	call   c00135c0 <Process::createThread(void (*)(void*), void*, int)>
c0006ac6:	83 c4 14             	add    esp,0x14
c0006ac9:	a3 48 61 02 c0       	mov    ds:0xc0026148,eax
c0006ace:	68 c0 dd 01 c0       	push   0xc001ddc0
c0006ad3:	c6 05 bd 2e 02 c0 01 	mov    BYTE PTR ds:0xc0022ebd,0x1
c0006ada:	e8 6c 91 00 00       	call   c000fc4b <KeSetBootMessage(char const*)>
c0006adf:	e8 0f d9 00 00       	call   c00143f3 <Vm::initialise8086()>
c0006ae4:	e8 73 3e 00 00       	call   c000a95c <Fs::initVFS()>
c0006ae9:	c7 04 24 d1 dc 01 c0 	mov    DWORD PTR [esp],0xc001dcd1
c0006af0:	e8 56 91 00 00       	call   c000fc4b <KeSetBootMessage(char const*)>
c0006af5:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0006afa:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006b00:	8b 10                	mov    edx,DWORD PTR [eax]
c0006b02:	6a 00                	push   0x0
c0006b04:	6a 00                	push   0x0
c0006b06:	6a 00                	push   0x0
c0006b08:	50                   	push   eax
c0006b09:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006b0c:	83 c4 14             	add    esp,0x14
c0006b0f:	68 c0 dd 01 c0       	push   0xc001ddc0
c0006b14:	e8 32 91 00 00       	call   c000fc4b <KeSetBootMessage(char const*)>
c0006b19:	e8 08 96 00 00       	call   c0010126 <Krnl::loadSystemEnv()>
c0006b1e:	e8 65 98 00 00       	call   c0010388 <Krnl::setupPowerManager()>
c0006b23:	83 c4 0c             	add    esp,0xc
c0006b26:	6a 3a                	push   0x3a
c0006b28:	68 eb dc 01 c0       	push   0xc001dceb
c0006b2d:	68 f4 dc 01 c0       	push   0xc001dcf4
c0006b32:	e8 0a ae 00 00       	call   c0011941 <Reg::readIntWithDefault(char*, char*, int)>
c0006b37:	89 04 24             	mov    DWORD PTR [esp],eax
c0006b3a:	e8 29 49 00 00       	call   c000b468 <User::loadClockSettings(int)>
c0006b3f:	c7 04 24 e4 dd 01 c0 	mov    DWORD PTR [esp],0xc001dde4
c0006b46:	e8 00 91 00 00       	call   c000fc4b <KeSetBootMessage(char const*)>
c0006b4b:	59                   	pop    ecx
c0006b4c:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0006b51:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006b57:	53                   	push   ebx
c0006b58:	e8 b7 4f 00 00       	call   c000bb14 <Device::loadDriversForAll()>
c0006b5d:	c7 04 24 fc dc 01 c0 	mov    DWORD PTR [esp],0xc001dcfc
c0006b64:	e8 e2 90 00 00       	call   c000fc4b <KeSetBootMessage(char const*)>
c0006b69:	58                   	pop    eax
c0006b6a:	8b 1d b8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022eb8
c0006b70:	5a                   	pop    edx
c0006b71:	6a 01                	push   0x1
c0006b73:	68 0d dd 01 c0       	push   0xc001dd0d
c0006b78:	e8 39 c2 00 00       	call   c0012db6 <Thr::loadDLL(char const*, bool)>
c0006b7d:	59                   	pop    ecx
c0006b7e:	5a                   	pop    edx
c0006b7f:	53                   	push   ebx
c0006b80:	50                   	push   eax
c0006b81:	e8 61 c4 00 00       	call   c0012fe7 <Thr::executeDLL(unsigned long, void*)>
c0006b86:	83 c4 10             	add    esp,0x10
c0006b89:	83 ec 0c             	sub    esp,0xc
c0006b8c:	6a 02                	push   0x2
c0006b8e:	e8 49 ce 00 00       	call   c00139dc <blockTask(TaskState)>
c0006b93:	83 c4 10             	add    esp,0x10
c0006b96:	eb f1                	jmp    c0006b89 <Krnl::firstTask()+0x124>

c0006b98 <Computer::Computer()>:
c0006b98:	83 ec 0c             	sub    esp,0xc
c0006b9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b9f:	83 ec 08             	sub    esp,0x8
c0006ba2:	68 29 dd 01 c0       	push   0xc001dd29
c0006ba7:	50                   	push   eax
c0006ba8:	e8 e3 4f 00 00       	call   c000bb90 <Device::Device(char const*)>
c0006bad:	83 c4 10             	add    esp,0x10
c0006bb0:	ba 30 de 01 c0       	mov    edx,0xc001de30
c0006bb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb9:	89 10                	mov    DWORD PTR [eax],edx
c0006bbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bbf:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006bc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcd:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006bd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bdb:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006be1:	83 ca 04             	or     edx,0x4
c0006be4:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006bea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bee:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006bf4:	31 d2                	xor    edx,edx
c0006bf6:	88 c2                	mov    dl,al
c0006bf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfc:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006c03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c07:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c0d:	31 d2                	xor    edx,edx
c0006c0f:	88 c2                	mov    dl,al
c0006c11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c15:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006c1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c1e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c24:	8d 50 01             	lea    edx,[eax+0x1]
c0006c27:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006c2b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006c31:	31 d2                	xor    edx,edx
c0006c33:	88 c2                	mov    dl,al
c0006c35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c39:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006c3d:	83 e1 3f             	and    ecx,0x3f
c0006c40:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006c44:	90                   	nop
c0006c45:	83 c4 0c             	add    esp,0xc
c0006c48:	c3                   	ret    
c0006c49:	90                   	nop

c0006c4a <Computer::setBootMessage(char const*)>:
c0006c4a:	c3                   	ret    
c0006c4b:	90                   	nop

c0006c4c <Computer::detectFeatures()>:
c0006c4c:	55                   	push   ebp
c0006c4d:	57                   	push   edi
c0006c4e:	56                   	push   esi
c0006c4f:	53                   	push   ebx
c0006c50:	83 ec 1c             	sub    esp,0x1c
c0006c53:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006c57:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006c61:	e8 93 95 ff ff       	call   c00001f9 <detectCPUID>
c0006c66:	85 c0                	test   eax,eax
c0006c68:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c6e:	0f 95 c2             	setne  dl
c0006c71:	83 e0 fd             	and    eax,0xfffffffd
c0006c74:	01 d2                	add    edx,edx
c0006c76:	09 d0                	or     eax,edx
c0006c78:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c7e:	a8 02                	test   al,0x2
c0006c80:	75 46                	jne    c0006cc8 <Computer::detectFeatures()+0x7c>
c0006c82:	f6 05 d1 2e 02 c0 04 	test   BYTE PTR ds:0xc0022ed1,0x4
c0006c89:	74 07                	je     c0006c92 <Computer::detectFeatures()+0x46>
c0006c8b:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006c92:	e8 4f 59 01 00       	call   c001c5e6 <x87Detect>
c0006c97:	83 e0 01             	and    eax,0x1
c0006c9a:	c1 e0 04             	shl    eax,0x4
c0006c9d:	88 c2                	mov    dl,al
c0006c9f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ca5:	83 e0 ef             	and    eax,0xffffffef
c0006ca8:	09 d0                	or     eax,edx
c0006caa:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cb0:	a8 10                	test   al,0x10
c0006cb2:	0f 85 2a 01 00 00    	jne    c0006de2 <Computer::detectFeatures()+0x196>
c0006cb8:	84 c0                	test   al,al
c0006cba:	0f 88 45 01 00 00    	js     c0006e05 <Computer::detectFeatures()+0x1b9>
c0006cc0:	83 c4 1c             	add    esp,0x1c
c0006cc3:	5b                   	pop    ebx
c0006cc4:	5e                   	pop    esi
c0006cc5:	5f                   	pop    edi
c0006cc6:	5d                   	pop    ebp
c0006cc7:	c3                   	ret    
c0006cc8:	83 ec 0c             	sub    esp,0xc
c0006ccb:	6a 20                	push   0x20
c0006ccd:	e8 a6 84 00 00       	call   c000f178 <CPU::cpuidCheckEDX(unsigned int)>
c0006cd2:	83 e0 01             	and    eax,0x1
c0006cd5:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006cdc:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ce2:	83 e0 f7             	and    eax,0xfffffff7
c0006ce5:	09 d0                	or     eax,edx
c0006ce7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ced:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006cf4:	e8 7f 84 00 00       	call   c000f178 <CPU::cpuidCheckEDX(unsigned int)>
c0006cf9:	83 e0 01             	and    eax,0x1
c0006cfc:	88 c2                	mov    dl,al
c0006cfe:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006d04:	83 e0 fe             	and    eax,0xfffffffe
c0006d07:	09 d0                	or     eax,edx
c0006d09:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006d0f:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006d16:	e8 5d 84 00 00       	call   c000f178 <CPU::cpuidCheckEDX(unsigned int)>
c0006d1b:	c1 e0 07             	shl    eax,0x7
c0006d1e:	88 c2                	mov    dl,al
c0006d20:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006d26:	83 e0 7f             	and    eax,0x7f
c0006d29:	09 d0                	or     eax,edx
c0006d2b:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006d31:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006d38:	e8 3b 84 00 00       	call   c000f178 <CPU::cpuidCheckEDX(unsigned int)>
c0006d3d:	83 c4 10             	add    esp,0x10
c0006d40:	83 e0 01             	and    eax,0x1
c0006d43:	c1 e0 05             	shl    eax,0x5
c0006d46:	88 c2                	mov    dl,al
c0006d48:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d4e:	83 e0 df             	and    eax,0xffffffdf
c0006d51:	09 d0                	or     eax,edx
c0006d53:	f7 05 d0 2e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0022ed0,0x401
c0006d5d:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d63:	0f 84 c2 00 00 00    	je     c0006e2b <Computer::detectFeatures()+0x1df>
c0006d69:	83 e0 fe             	and    eax,0xfffffffe
c0006d6c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d72:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d78:	88 c2                	mov    dl,al
c0006d7a:	83 e2 09             	and    edx,0x9
c0006d7d:	fe ca                	dec    dl
c0006d7f:	75 09                	jne    c0006d8a <Computer::detectFeatures()+0x13e>
c0006d81:	83 e0 fe             	and    eax,0xfffffffe
c0006d84:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d8a:	83 ec 0c             	sub    esp,0xc
c0006d8d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006d91:	50                   	push   eax
c0006d92:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006d96:	55                   	push   ebp
c0006d97:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006d9b:	57                   	push   edi
c0006d9c:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006da0:	56                   	push   esi
c0006da1:	68 00 00 00 80       	push   0x80000000
c0006da6:	e8 49 83 00 00       	call   c000f0f4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006dab:	83 c4 20             	add    esp,0x20
c0006dae:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006db5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006db9:	0f 86 c3 fe ff ff    	jbe    c0006c82 <Computer::detectFeatures()+0x36>
c0006dbf:	83 ec 0c             	sub    esp,0xc
c0006dc2:	50                   	push   eax
c0006dc3:	55                   	push   ebp
c0006dc4:	57                   	push   edi
c0006dc5:	56                   	push   esi
c0006dc6:	68 01 00 00 80       	push   0x80000001
c0006dcb:	e8 24 83 00 00       	call   c000f0f4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006dd0:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006dda:	83 c4 20             	add    esp,0x20
c0006ddd:	e9 a0 fe ff ff       	jmp    c0006c82 <Computer::detectFeatures()+0x36>
c0006de2:	e8 b9 57 01 00       	call   c001c5a0 <absolutelyNoChanceInHell>
c0006de7:	88 c2                	mov    dl,al
c0006de9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006def:	c1 e2 07             	shl    edx,0x7
c0006df2:	83 e0 7f             	and    eax,0x7f
c0006df5:	09 d0                	or     eax,edx
c0006df7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006dfd:	84 c0                	test   al,al
c0006dff:	0f 89 bb fe ff ff    	jns    c0006cc0 <Computer::detectFeatures()+0x74>
c0006e05:	e8 b6 54 01 00       	call   c001c2c0 <avxDetect>
c0006e0a:	83 e0 01             	and    eax,0x1
c0006e0d:	c1 e0 05             	shl    eax,0x5
c0006e10:	88 c2                	mov    dl,al
c0006e12:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006e18:	83 e0 df             	and    eax,0xffffffdf
c0006e1b:	09 d0                	or     eax,edx
c0006e1d:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006e23:	83 c4 1c             	add    esp,0x1c
c0006e26:	5b                   	pop    ebx
c0006e27:	5e                   	pop    esi
c0006e28:	5f                   	pop    edi
c0006e29:	5d                   	pop    ebp
c0006e2a:	c3                   	ret    
c0006e2b:	83 ec 0c             	sub    esp,0xc
c0006e2e:	68 00 02 00 00       	push   0x200
c0006e33:	e8 40 83 00 00       	call   c000f178 <CPU::cpuidCheckEDX(unsigned int)>
c0006e38:	83 c4 10             	add    esp,0x10
c0006e3b:	83 e0 01             	and    eax,0x1
c0006e3e:	88 c2                	mov    dl,al
c0006e40:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006e46:	83 e0 fe             	and    eax,0xfffffffe
c0006e49:	09 d0                	or     eax,edx
c0006e4b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006e51:	e9 1c ff ff ff       	jmp    c0006d72 <Computer::detectFeatures()+0x126>

c0006e56 <Computer::displayFeatures()>:
c0006e56:	c3                   	ret    
c0006e57:	90                   	nop

c0006e58 <Computer::rdmsr(unsigned int)>:
c0006e58:	83 ec 0c             	sub    esp,0xc
c0006e5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e66:	74 0a                	je     c0006e72 <Computer::rdmsr(unsigned int)+0x1a>
c0006e68:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e6c:	0f 32                	rdmsr  
c0006e6e:	83 c4 0c             	add    esp,0xc
c0006e71:	c3                   	ret    
c0006e72:	83 ec 0c             	sub    esp,0xc
c0006e75:	68 32 dd 01 c0       	push   0xc001dd32
c0006e7a:	e8 44 94 00 00       	call   c00102c3 <KePanic(char const*)>
c0006e7f:	83 c4 10             	add    esp,0x10
c0006e82:	eb e4                	jmp    c0006e68 <Computer::rdmsr(unsigned int)+0x10>

c0006e84 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006e84:	57                   	push   edi
c0006e85:	56                   	push   esi
c0006e86:	52                   	push   edx
c0006e87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e8b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006e8f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006e93:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e9a:	74 0e                	je     c0006eaa <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006e9c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006ea0:	89 f0                	mov    eax,esi
c0006ea2:	89 fa                	mov    edx,edi
c0006ea4:	0f 30                	wrmsr  
c0006ea6:	58                   	pop    eax
c0006ea7:	5e                   	pop    esi
c0006ea8:	5f                   	pop    edi
c0006ea9:	c3                   	ret    
c0006eaa:	83 ec 0c             	sub    esp,0xc
c0006ead:	68 38 dd 01 c0       	push   0xc001dd38
c0006eb2:	e8 0c 94 00 00       	call   c00102c3 <KePanic(char const*)>
c0006eb7:	83 c4 10             	add    esp,0x10
c0006eba:	eb e0                	jmp    c0006e9c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006ebc <Computer::shutdown()>:
c0006ebc:	83 ec 0c             	sub    esp,0xc
c0006ebf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ec3:	8b 10                	mov    edx,DWORD PTR [eax]
c0006ec5:	6a 00                	push   0x0
c0006ec7:	6a 00                	push   0x0
c0006ec9:	6a 00                	push   0x0
c0006ecb:	50                   	push   eax
c0006ecc:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006ecf:	83 c4 1c             	add    esp,0x1c
c0006ed2:	c3                   	ret    
c0006ed3:	90                   	nop

c0006ed4 <Computer::restart()>:
c0006ed4:	83 ec 0c             	sub    esp,0xc
c0006ed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006edb:	8b 10                	mov    edx,DWORD PTR [eax]
c0006edd:	6a 00                	push   0x0
c0006edf:	6a 00                	push   0x0
c0006ee1:	6a 01                	push   0x1
c0006ee3:	50                   	push   eax
c0006ee4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006ee7:	83 c4 1c             	add    esp,0x1c
c0006eea:	c3                   	ret    
c0006eeb:	90                   	nop

c0006eec <Computer::sleep()>:
c0006eec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006ef0:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006ef6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006efa:	e9 f1 7c 00 00       	jmp    c000ebf0 <ACPI::sleep()>
c0006eff:	90                   	nop

c0006f00 <Computer::nmiEnabled()>:
c0006f00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f04:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006f0a:	c3                   	ret    
c0006f0b:	90                   	nop

c0006f0c <Computer::readCMOS(unsigned char)>:
c0006f0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f10:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006f17:	19 c0                	sbb    eax,eax
c0006f19:	83 e0 80             	and    eax,0xffffff80
c0006f1c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006f20:	e6 70                	out    0x70,al
c0006f22:	e4 71                	in     al,0x71
c0006f24:	c3                   	ret    
c0006f25:	90                   	nop

c0006f26 <Computer::enableNMI(bool)>:
c0006f26:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006f2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f2e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006f34:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006f3c:	eb ce                	jmp    c0006f0c <Computer::readCMOS(unsigned char)>

c0006f3e <Computer::open(int, int, void*)>:
c0006f3e:	56                   	push   esi
c0006f3f:	53                   	push   ebx
c0006f40:	83 ec 10             	sub    esp,0x10
c0006f43:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006f47:	f6 05 d0 2e 02 c0 04 	test   BYTE PTR ds:0xc0022ed0,0x4
c0006f4e:	68 3e dd 01 c0       	push   0xc001dd3e
c0006f53:	0f 94 05 20 ff 01 c0 	sete   BYTE PTR ds:0xc001ff20
c0006f5a:	e8 ec 8c 00 00       	call   c000fc4b <KeSetBootMessage(char const*)>
c0006f5f:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006f66:	e8 b6 08 00 00       	call   c0007821 <malloc>
c0006f6b:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f6e:	89 c6                	mov    esi,eax
c0006f70:	e8 13 78 00 00       	call   c000e788 <ACPI::ACPI()>
c0006f75:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006f7b:	58                   	pop    eax
c0006f7c:	5a                   	pop    edx
c0006f7d:	56                   	push   esi
c0006f7e:	53                   	push   ebx
c0006f7f:	e8 74 4a 00 00       	call   c000b9f8 <Device::addChild(Device*)>
c0006f84:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006f87:	e8 c0 fc ff ff       	call   c0006c4c <Computer::detectFeatures()>
c0006f8c:	59                   	pop    ecx
c0006f8d:	5e                   	pop    esi
c0006f8e:	6a 01                	push   0x1
c0006f90:	53                   	push   ebx
c0006f91:	e8 90 ff ff ff       	call   c0006f26 <Computer::enableNMI(bool)>
c0006f96:	c7 04 24 56 dd 01 c0 	mov    DWORD PTR [esp],0xc001dd56
c0006f9d:	e8 a9 8c 00 00       	call   c000fc4b <KeSetBootMessage(char const*)>
c0006fa2:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006fa9:	e8 73 08 00 00       	call   c0007821 <malloc>
c0006fae:	89 04 24             	mov    DWORD PTR [esp],eax
c0006fb1:	89 c6                	mov    esi,eax
c0006fb3:	e8 78 82 00 00       	call   c000f230 <CPU::CPU()>
c0006fb8:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0006fbe:	58                   	pop    eax
c0006fbf:	5a                   	pop    edx
c0006fc0:	56                   	push   esi
c0006fc1:	53                   	push   ebx
c0006fc2:	e8 31 4a 00 00       	call   c000b9f8 <Device::addChild(Device*)>
c0006fc7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0006fcd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0006fd1:	8b 10                	mov    edx,DWORD PTR [eax]
c0006fd3:	51                   	push   ecx
c0006fd4:	6a 00                	push   0x0
c0006fd6:	6a 00                	push   0x0
c0006fd8:	50                   	push   eax
c0006fd9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006fdc:	83 c4 14             	add    esp,0x14
c0006fdf:	68 04 de 01 c0       	push   0xc001de04
c0006fe4:	e8 62 8c 00 00       	call   c000fc4b <KeSetBootMessage(char const*)>
c0006fe9:	e8 3c e5 00 00       	call   c001552a <HalInitialiseCoprocessor()>
c0006fee:	c7 04 24 70 dd 01 c0 	mov    DWORD PTR [esp],0xc001dd70
c0006ff5:	e8 51 8c 00 00       	call   c000fc4b <KeSetBootMessage(char const*)>
c0006ffa:	c7 04 24 65 6a 00 c0 	mov    DWORD PTR [esp],0xc0006a65
c0007001:	e8 d2 c6 00 00       	call   c00136d8 <setupMultitasking(void (*)())>
c0007006:	83 c4 14             	add    esp,0x14
c0007009:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000700e:	5b                   	pop    ebx
c000700f:	5e                   	pop    esi
c0007010:	c3                   	ret    
c0007011:	90                   	nop

c0007012 <Computer::disableNMI()>:
c0007012:	6a 00                	push   0x0
c0007014:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007018:	50                   	push   eax
c0007019:	e8 08 ff ff ff       	call   c0006f26 <Computer::enableNMI(bool)>
c000701e:	5a                   	pop    edx
c000701f:	59                   	pop    ecx
c0007020:	c3                   	ret    
c0007021:	90                   	nop

c0007022 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007022:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007026:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000702d:	19 c0                	sbb    eax,eax
c000702f:	83 e0 80             	and    eax,0xffffff80
c0007032:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0007036:	e6 70                	out    0x70,al
c0007038:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000703c:	e6 71                	out    0x71,al
c000703e:	c3                   	ret    
c000703f:	90                   	nop

c0007040 <Computer::handleNMI()>:
c0007040:	56                   	push   esi
c0007041:	53                   	push   ebx
c0007042:	83 ec 10             	sub    esp,0x10
c0007045:	e4 92                	in     al,0x92
c0007047:	89 c6                	mov    esi,eax
c0007049:	e4 61                	in     al,0x61
c000704b:	68 8b dd 01 c0       	push   0xc001dd8b
c0007050:	88 c3                	mov    bl,al
c0007052:	e8 63 35 00 00       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0007057:	83 c4 10             	add    esp,0x10
c000705a:	83 e6 10             	and    esi,0x10
c000705d:	75 0d                	jne    c000706c <Computer::handleNMI()+0x2c>
c000705f:	f6 c3 40             	test   bl,0x40
c0007062:	75 1d                	jne    c0007081 <Computer::handleNMI()+0x41>
c0007064:	84 db                	test   bl,bl
c0007066:	78 2d                	js     c0007095 <Computer::handleNMI()+0x55>
c0007068:	58                   	pop    eax
c0007069:	5b                   	pop    ebx
c000706a:	5e                   	pop    esi
c000706b:	c3                   	ret    
c000706c:	83 ec 0c             	sub    esp,0xc
c000706f:	68 9c dd 01 c0       	push   0xc001dd9c
c0007074:	e8 4a 92 00 00       	call   c00102c3 <KePanic(char const*)>
c0007079:	83 c4 10             	add    esp,0x10
c000707c:	f6 c3 40             	test   bl,0x40
c000707f:	74 e3                	je     c0007064 <Computer::handleNMI()+0x24>
c0007081:	83 ec 0c             	sub    esp,0xc
c0007084:	68 a9 dd 01 c0       	push   0xc001dda9
c0007089:	e8 35 92 00 00       	call   c00102c3 <KePanic(char const*)>
c000708e:	83 c4 10             	add    esp,0x10
c0007091:	84 db                	test   bl,bl
c0007093:	79 d3                	jns    c0007068 <Computer::handleNMI()+0x28>
c0007095:	c7 44 24 10 b3 dd 01 c0 	mov    DWORD PTR [esp+0x10],0xc001ddb3
c000709d:	5a                   	pop    edx
c000709e:	5b                   	pop    ebx
c000709f:	5e                   	pop    esi
c00070a0:	e9 1e 92 00 00       	jmp    c00102c3 <KePanic(char const*)>
c00070a5:	90                   	nop

c00070a6 <GDTEntry::setBase(unsigned int)>:
c00070a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070aa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00070ae:	89 c1                	mov    ecx,eax
c00070b0:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00070b4:	c1 e9 10             	shr    ecx,0x10
c00070b7:	c1 e8 18             	shr    eax,0x18
c00070ba:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c00070bd:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c00070c0:	c3                   	ret    
c00070c1:	90                   	nop

c00070c2 <GDTEntry::setLimit(unsigned int)>:
c00070c2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00070c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070ca:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c00070cd:	66 89 01             	mov    WORD PTR [ecx],ax
c00070d0:	83 e2 f0             	and    edx,0xfffffff0
c00070d3:	c1 e8 10             	shr    eax,0x10
c00070d6:	83 e0 0f             	and    eax,0xf
c00070d9:	09 d0                	or     eax,edx
c00070db:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c00070de:	c3                   	ret    
c00070df:	90                   	nop

c00070e0 <GDT::GDT()>:
c00070e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070e4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00070ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070ee:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00070f4:	90                   	nop
c00070f5:	c3                   	ret    

c00070f6 <GDT::addEntry(GDTEntry)>:
c00070f6:	53                   	push   ebx
c00070f7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070fb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00070ff:	8b 02                	mov    eax,DWORD PTR [edx]
c0007101:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007105:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0007109:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000710d:	8d 48 01             	lea    ecx,[eax+0x1]
c0007110:	c1 e0 03             	shl    eax,0x3
c0007113:	89 0a                	mov    DWORD PTR [edx],ecx
c0007115:	5b                   	pop    ebx
c0007116:	c3                   	ret    
c0007117:	90                   	nop

c0007118 <GDT::getNumberOfEntries()>:
c0007118:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000711c:	8b 00                	mov    eax,DWORD PTR [eax]
c000711e:	c3                   	ret    
c000711f:	90                   	nop

c0007120 <GDT::flush()>:
c0007120:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007124:	8b 10                	mov    edx,DWORD PTR [eax]
c0007126:	83 c0 04             	add    eax,0x4
c0007129:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0007130:	a3 c2 2e 02 c0       	mov    ds:0xc0022ec2,eax
c0007135:	66 89 15 c0 2e 02 c0 	mov    WORD PTR ds:0xc0022ec0,dx
c000713c:	e9 1c 92 ff ff       	jmp    c000035d <loadGDT>
c0007141:	90                   	nop

c0007142 <GDT::setup()>:
c0007142:	57                   	push   edi
c0007143:	56                   	push   esi
c0007144:	53                   	push   ebx
c0007145:	83 ec 30             	sub    esp,0x30
c0007148:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000714c:	6a 00                	push   0x0
c000714e:	8d 74 24 14          	lea    esi,[esp+0x14]
c0007152:	56                   	push   esi
c0007153:	e8 4e ff ff ff       	call   c00070a6 <GDTEntry::setBase(unsigned int)>
c0007158:	6a 00                	push   0x0
c000715a:	56                   	push   esi
c000715b:	e8 62 ff ff ff       	call   c00070c2 <GDTEntry::setLimit(unsigned int)>
c0007160:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007168:	6a 00                	push   0x0
c000716a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000716e:	56                   	push   esi
c000716f:	e8 32 ff ff ff       	call   c00070a6 <GDTEntry::setBase(unsigned int)>
c0007174:	68 ff ff ff 00       	push   0xffffff
c0007179:	56                   	push   esi
c000717a:	e8 43 ff ff ff       	call   c00070c2 <GDTEntry::setLimit(unsigned int)>
c000717f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007183:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007187:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000718b:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000718f:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007194:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007199:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000719d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00071a1:	89 f8                	mov    eax,edi
c00071a3:	89 fa                	mov    edx,edi
c00071a5:	80 e4 f7             	and    ah,0xf7
c00071a8:	80 ce 60             	or     dh,0x60
c00071ab:	89 c7                	mov    edi,eax
c00071ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00071b1:	80 cc 60             	or     ah,0x60
c00071b4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00071b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00071bc:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00071c0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00071c4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00071c8:	83 c4 20             	add    esp,0x20
c00071cb:	6a 00                	push   0x0
c00071cd:	8d 44 24 24          	lea    eax,[esp+0x24]
c00071d1:	50                   	push   eax
c00071d2:	e8 cf fe ff ff       	call   c00070a6 <GDTEntry::setBase(unsigned int)>
c00071d7:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00071db:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c00071df:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c00071e4:	6a 00                	push   0x0
c00071e6:	8d 44 24 34          	lea    eax,[esp+0x34]
c00071ea:	50                   	push   eax
c00071eb:	e8 b6 fe ff ff       	call   c00070a6 <GDTEntry::setBase(unsigned int)>
c00071f0:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c00071f5:	83 c4 0c             	add    esp,0xc
c00071f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007200:	53                   	push   ebx
c0007201:	e8 f0 fe ff ff       	call   c00070f6 <GDT::addEntry(GDTEntry)>
c0007206:	83 c4 0c             	add    esp,0xc
c0007209:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000720d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007211:	53                   	push   ebx
c0007212:	e8 df fe ff ff       	call   c00070f6 <GDT::addEntry(GDTEntry)>
c0007217:	83 c4 0c             	add    esp,0xc
c000721a:	57                   	push   edi
c000721b:	56                   	push   esi
c000721c:	53                   	push   ebx
c000721d:	e8 d4 fe ff ff       	call   c00070f6 <GDT::addEntry(GDTEntry)>
c0007222:	83 c4 0c             	add    esp,0xc
c0007225:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0007229:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000722d:	53                   	push   ebx
c000722e:	e8 c3 fe ff ff       	call   c00070f6 <GDT::addEntry(GDTEntry)>
c0007233:	83 c4 0c             	add    esp,0xc
c0007236:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000723a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000723e:	53                   	push   ebx
c000723f:	e8 b2 fe ff ff       	call   c00070f6 <GDT::addEntry(GDTEntry)>
c0007244:	83 c4 0c             	add    esp,0xc
c0007247:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000724b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000724f:	53                   	push   ebx
c0007250:	e8 a1 fe ff ff       	call   c00070f6 <GDT::addEntry(GDTEntry)>
c0007255:	83 c4 0c             	add    esp,0xc
c0007258:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000725c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007260:	53                   	push   ebx
c0007261:	e8 90 fe ff ff       	call   c00070f6 <GDT::addEntry(GDTEntry)>
c0007266:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007269:	e8 b2 fe ff ff       	call   c0007120 <GDT::flush()>
c000726e:	83 c4 40             	add    esp,0x40
c0007271:	5b                   	pop    ebx
c0007272:	5e                   	pop    esi
c0007273:	5f                   	pop    edi
c0007274:	c3                   	ret    

c0007275 <idleFunction(void*)>:
c0007275:	83 ec 0c             	sub    esp,0xc
c0007278:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000727d:	48                   	dec    eax
c000727e:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0007283:	75 01                	jne    c0007286 <idleFunction(void*)+0x11>
c0007285:	fb                   	sti    
c0007286:	e8 79 df 00 00       	call   c0015204 <HalSystemIdle()>
c000728b:	e8 12 59 01 00       	call   c001cba2 <idleCommon()>
c0007290:	eb f4                	jmp    c0007286 <idleFunction(void*)+0x11>
c0007292:	66 90                	xchg   ax,ax

c0007294 <IDTEntry::IDTEntry(bool)>:
c0007294:	83 ec 04             	sub    esp,0x4
c0007297:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000729b:	88 04 24             	mov    BYTE PTR [esp],al
c000729e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a2:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00072a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072ac:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00072b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072b4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00072b7:	83 e2 f0             	and    edx,0xfffffff0
c00072ba:	83 ca 0e             	or     edx,0xe
c00072bd:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00072c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072c4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00072c7:	83 e2 ef             	and    edx,0xffffffef
c00072ca:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00072cd:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00072d1:	74 05                	je     c00072d8 <IDTEntry::IDTEntry(bool)+0x44>
c00072d3:	b2 03                	mov    dl,0x3
c00072d5:	eb 05                	jmp    c00072dc <IDTEntry::IDTEntry(bool)+0x48>
c00072d7:	90                   	nop
c00072d8:	b2 00                	mov    dl,0x0
c00072da:	66 90                	xchg   ax,ax
c00072dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072e0:	83 e2 03             	and    edx,0x3
c00072e3:	88 d1                	mov    cl,dl
c00072e5:	c1 e1 05             	shl    ecx,0x5
c00072e8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00072eb:	83 e2 9f             	and    edx,0xffffff9f
c00072ee:	09 ca                	or     edx,ecx
c00072f0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00072f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072f7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00072fa:	83 ca 80             	or     edx,0xffffff80
c00072fd:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007300:	90                   	nop
c0007301:	83 c4 04             	add    esp,0x4
c0007304:	c3                   	ret    
c0007305:	90                   	nop

c0007306 <IDTEntry::setOffset(unsigned int)>:
c0007306:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000730a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000730e:	66 89 02             	mov    WORD PTR [edx],ax
c0007311:	c1 e8 10             	shr    eax,0x10
c0007314:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0007318:	c3                   	ret    
c0007319:	90                   	nop
c000731a:	66 90                	xchg   ax,ax

c000731c <IDT::IDT()>:
c000731c:	90                   	nop
c000731d:	c3                   	ret    

c000731e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000731e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007322:	83 c0 30             	add    eax,0x30
c0007325:	c3                   	ret    

c0007326 <IDT::addEntry(IDTEntry, int)>:
c0007326:	53                   	push   ebx
c0007327:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000732b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000732f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007333:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007337:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000733a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000733e:	5b                   	pop    ebx
c000733f:	c3                   	ret    

c0007340 <IDT::addEntry(int, void (*)(), bool)>:
c0007340:	53                   	push   ebx
c0007341:	83 ec 10             	sub    esp,0x10
c0007344:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0007349:	50                   	push   eax
c000734a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000734e:	53                   	push   ebx
c000734f:	e8 40 ff ff ff       	call   c0007294 <IDTEntry::IDTEntry(bool)>
c0007354:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007358:	53                   	push   ebx
c0007359:	e8 a8 ff ff ff       	call   c0007306 <IDTEntry::setOffset(unsigned int)>
c000735e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007362:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007366:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000736a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000736e:	e8 b3 ff ff ff       	call   c0007326 <IDT::addEntry(IDTEntry, int)>
c0007373:	83 c4 30             	add    esp,0x30
c0007376:	5b                   	pop    ebx
c0007377:	c3                   	ret    

c0007378 <IDT::flush()>:
c0007378:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000737c:	66 c7 05 c8 2e 02 c0 ff 07 	mov    WORD PTR ds:0xc0022ec8,0x7ff
c0007385:	a3 ca 2e 02 c0       	mov    ds:0xc0022eca,eax
c000738a:	0f 01 1d c8 2e 02 c0 	lidtd  ds:0xc0022ec8
c0007391:	c3                   	ret    

c0007392 <IDT::setup()>:
c0007392:	57                   	push   edi
c0007393:	56                   	push   esi
c0007394:	53                   	push   ebx
c0007395:	83 ec 10             	sub    esp,0x10
c0007398:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000739c:	6a 00                	push   0x0
c000739e:	68 50 c3 01 c0       	push   0xc001c350
c00073a3:	6a 00                	push   0x0
c00073a5:	53                   	push   ebx
c00073a6:	e8 95 ff ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c00073ab:	6a 00                	push   0x0
c00073ad:	68 60 c3 01 c0       	push   0xc001c360
c00073b2:	6a 01                	push   0x1
c00073b4:	53                   	push   ebx
c00073b5:	e8 86 ff ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c00073ba:	83 c4 20             	add    esp,0x20
c00073bd:	6a 00                	push   0x0
c00073bf:	68 6a c3 01 c0       	push   0xc001c36a
c00073c4:	6a 02                	push   0x2
c00073c6:	53                   	push   ebx
c00073c7:	e8 74 ff ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c00073cc:	6a 00                	push   0x0
c00073ce:	68 74 c3 01 c0       	push   0xc001c374
c00073d3:	6a 03                	push   0x3
c00073d5:	53                   	push   ebx
c00073d6:	e8 65 ff ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c00073db:	83 c4 20             	add    esp,0x20
c00073de:	6a 00                	push   0x0
c00073e0:	68 7e c3 01 c0       	push   0xc001c37e
c00073e5:	6a 04                	push   0x4
c00073e7:	53                   	push   ebx
c00073e8:	e8 53 ff ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c00073ed:	6a 00                	push   0x0
c00073ef:	68 88 c3 01 c0       	push   0xc001c388
c00073f4:	6a 05                	push   0x5
c00073f6:	53                   	push   ebx
c00073f7:	e8 44 ff ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c00073fc:	83 c4 20             	add    esp,0x20
c00073ff:	6a 00                	push   0x0
c0007401:	68 92 c3 01 c0       	push   0xc001c392
c0007406:	6a 06                	push   0x6
c0007408:	53                   	push   ebx
c0007409:	e8 32 ff ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c000740e:	6a 00                	push   0x0
c0007410:	68 9c c3 01 c0       	push   0xc001c39c
c0007415:	6a 07                	push   0x7
c0007417:	53                   	push   ebx
c0007418:	e8 23 ff ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c000741d:	83 c4 20             	add    esp,0x20
c0007420:	6a 00                	push   0x0
c0007422:	68 a6 c3 01 c0       	push   0xc001c3a6
c0007427:	6a 08                	push   0x8
c0007429:	53                   	push   ebx
c000742a:	e8 11 ff ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c000742f:	6a 00                	push   0x0
c0007431:	68 ae c3 01 c0       	push   0xc001c3ae
c0007436:	6a 09                	push   0x9
c0007438:	53                   	push   ebx
c0007439:	e8 02 ff ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c000743e:	83 c4 20             	add    esp,0x20
c0007441:	6a 00                	push   0x0
c0007443:	68 b8 c3 01 c0       	push   0xc001c3b8
c0007448:	6a 0a                	push   0xa
c000744a:	53                   	push   ebx
c000744b:	e8 f0 fe ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c0007450:	6a 00                	push   0x0
c0007452:	68 c0 c3 01 c0       	push   0xc001c3c0
c0007457:	6a 0b                	push   0xb
c0007459:	53                   	push   ebx
c000745a:	e8 e1 fe ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c000745f:	83 c4 20             	add    esp,0x20
c0007462:	6a 00                	push   0x0
c0007464:	68 c8 c3 01 c0       	push   0xc001c3c8
c0007469:	6a 0c                	push   0xc
c000746b:	53                   	push   ebx
c000746c:	e8 cf fe ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c0007471:	6a 00                	push   0x0
c0007473:	68 d0 c3 01 c0       	push   0xc001c3d0
c0007478:	6a 0d                	push   0xd
c000747a:	53                   	push   ebx
c000747b:	e8 c0 fe ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c0007480:	83 c4 20             	add    esp,0x20
c0007483:	6a 00                	push   0x0
c0007485:	68 d8 c3 01 c0       	push   0xc001c3d8
c000748a:	6a 0e                	push   0xe
c000748c:	53                   	push   ebx
c000748d:	e8 ae fe ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c0007492:	6a 00                	push   0x0
c0007494:	68 e0 c3 01 c0       	push   0xc001c3e0
c0007499:	6a 0f                	push   0xf
c000749b:	53                   	push   ebx
c000749c:	e8 9f fe ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c00074a1:	83 c4 20             	add    esp,0x20
c00074a4:	6a 00                	push   0x0
c00074a6:	68 ea c3 01 c0       	push   0xc001c3ea
c00074ab:	6a 10                	push   0x10
c00074ad:	53                   	push   ebx
c00074ae:	e8 8d fe ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c00074b3:	6a 00                	push   0x0
c00074b5:	68 f4 c3 01 c0       	push   0xc001c3f4
c00074ba:	6a 11                	push   0x11
c00074bc:	53                   	push   ebx
c00074bd:	e8 7e fe ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c00074c2:	83 c4 20             	add    esp,0x20
c00074c5:	6a 00                	push   0x0
c00074c7:	68 fe c3 01 c0       	push   0xc001c3fe
c00074cc:	6a 12                	push   0x12
c00074ce:	53                   	push   ebx
c00074cf:	e8 6c fe ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c00074d4:	6a 01                	push   0x1
c00074d6:	68 98 c4 01 c0       	push   0xc001c498
c00074db:	6a 60                	push   0x60
c00074dd:	53                   	push   ebx
c00074de:	e8 5d fe ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c00074e3:	83 c4 20             	add    esp,0x20
c00074e6:	6a 00                	push   0x0
c00074e8:	68 9f c4 01 c0       	push   0xc001c49f
c00074ed:	6a 20                	push   0x20
c00074ef:	53                   	push   ebx
c00074f0:	e8 4b fe ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c00074f5:	6a 00                	push   0x0
c00074f7:	68 8a c4 01 c0       	push   0xc001c48a
c00074fc:	6a 21                	push   0x21
c00074fe:	53                   	push   ebx
c00074ff:	e8 3c fe ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c0007504:	83 c4 20             	add    esp,0x20
c0007507:	6a 00                	push   0x0
c0007509:	68 91 c4 01 c0       	push   0xc001c491
c000750e:	6a 22                	push   0x22
c0007510:	53                   	push   ebx
c0007511:	e8 2a fe ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c0007516:	6a 00                	push   0x0
c0007518:	68 08 c4 01 c0       	push   0xc001c408
c000751d:	6a 23                	push   0x23
c000751f:	53                   	push   ebx
c0007520:	e8 1b fe ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c0007525:	83 c4 20             	add    esp,0x20
c0007528:	6a 00                	push   0x0
c000752a:	68 12 c4 01 c0       	push   0xc001c412
c000752f:	6a 24                	push   0x24
c0007531:	53                   	push   ebx
c0007532:	e8 09 fe ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c0007537:	6a 00                	push   0x0
c0007539:	68 1c c4 01 c0       	push   0xc001c41c
c000753e:	6a 25                	push   0x25
c0007540:	53                   	push   ebx
c0007541:	e8 fa fd ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c0007546:	83 c4 20             	add    esp,0x20
c0007549:	6a 00                	push   0x0
c000754b:	68 26 c4 01 c0       	push   0xc001c426
c0007550:	6a 26                	push   0x26
c0007552:	53                   	push   ebx
c0007553:	e8 e8 fd ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c0007558:	6a 00                	push   0x0
c000755a:	68 30 c4 01 c0       	push   0xc001c430
c000755f:	6a 27                	push   0x27
c0007561:	53                   	push   ebx
c0007562:	e8 d9 fd ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c0007567:	83 c4 20             	add    esp,0x20
c000756a:	6a 00                	push   0x0
c000756c:	68 3a c4 01 c0       	push   0xc001c43a
c0007571:	6a 28                	push   0x28
c0007573:	53                   	push   ebx
c0007574:	e8 c7 fd ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c0007579:	6a 00                	push   0x0
c000757b:	68 44 c4 01 c0       	push   0xc001c444
c0007580:	6a 29                	push   0x29
c0007582:	53                   	push   ebx
c0007583:	e8 b8 fd ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c0007588:	83 c4 20             	add    esp,0x20
c000758b:	6a 00                	push   0x0
c000758d:	68 4e c4 01 c0       	push   0xc001c44e
c0007592:	6a 2a                	push   0x2a
c0007594:	53                   	push   ebx
c0007595:	e8 a6 fd ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c000759a:	6a 00                	push   0x0
c000759c:	68 58 c4 01 c0       	push   0xc001c458
c00075a1:	6a 2b                	push   0x2b
c00075a3:	53                   	push   ebx
c00075a4:	e8 97 fd ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c00075a9:	83 c4 20             	add    esp,0x20
c00075ac:	6a 00                	push   0x0
c00075ae:	68 62 c4 01 c0       	push   0xc001c462
c00075b3:	6a 2c                	push   0x2c
c00075b5:	53                   	push   ebx
c00075b6:	e8 85 fd ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c00075bb:	6a 00                	push   0x0
c00075bd:	68 6c c4 01 c0       	push   0xc001c46c
c00075c2:	6a 2d                	push   0x2d
c00075c4:	53                   	push   ebx
c00075c5:	e8 76 fd ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c00075ca:	83 c4 20             	add    esp,0x20
c00075cd:	6a 00                	push   0x0
c00075cf:	68 76 c4 01 c0       	push   0xc001c476
c00075d4:	6a 2e                	push   0x2e
c00075d6:	53                   	push   ebx
c00075d7:	e8 64 fd ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c00075dc:	6a 00                	push   0x0
c00075de:	68 80 c4 01 c0       	push   0xc001c480
c00075e3:	6a 2f                	push   0x2f
c00075e5:	53                   	push   ebx
c00075e6:	e8 55 fd ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c00075eb:	83 c4 20             	add    esp,0x20
c00075ee:	6a 00                	push   0x0
c00075f0:	68 31 c5 01 c0       	push   0xc001c531
c00075f5:	6a 30                	push   0x30
c00075f7:	53                   	push   ebx
c00075f8:	e8 43 fd ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c00075fd:	6a 00                	push   0x0
c00075ff:	68 3b c5 01 c0       	push   0xc001c53b
c0007604:	6a 31                	push   0x31
c0007606:	53                   	push   ebx
c0007607:	e8 34 fd ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c000760c:	83 c4 20             	add    esp,0x20
c000760f:	6a 00                	push   0x0
c0007611:	68 45 c5 01 c0       	push   0xc001c545
c0007616:	6a 32                	push   0x32
c0007618:	53                   	push   ebx
c0007619:	e8 22 fd ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c000761e:	6a 00                	push   0x0
c0007620:	68 4f c5 01 c0       	push   0xc001c54f
c0007625:	6a 33                	push   0x33
c0007627:	53                   	push   ebx
c0007628:	e8 13 fd ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c000762d:	83 c4 20             	add    esp,0x20
c0007630:	6a 00                	push   0x0
c0007632:	68 59 c5 01 c0       	push   0xc001c559
c0007637:	6a 34                	push   0x34
c0007639:	53                   	push   ebx
c000763a:	e8 01 fd ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c000763f:	6a 00                	push   0x0
c0007641:	68 63 c5 01 c0       	push   0xc001c563
c0007646:	6a 35                	push   0x35
c0007648:	53                   	push   ebx
c0007649:	e8 f2 fc ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c000764e:	83 c4 20             	add    esp,0x20
c0007651:	6a 00                	push   0x0
c0007653:	68 6d c5 01 c0       	push   0xc001c56d
c0007658:	6a 36                	push   0x36
c000765a:	53                   	push   ebx
c000765b:	e8 e0 fc ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c0007660:	6a 00                	push   0x0
c0007662:	68 77 c5 01 c0       	push   0xc001c577
c0007667:	6a 37                	push   0x37
c0007669:	53                   	push   ebx
c000766a:	e8 d1 fc ff ff       	call   c0007340 <IDT::addEntry(int, void (*)(), bool)>
c000766f:	83 c4 1c             	add    esp,0x1c
c0007672:	6a 03                	push   0x3
c0007674:	6a 02                	push   0x2
c0007676:	ff 35 b0 2f 02 c0    	push   DWORD PTR ds:0xc0022fb0
c000767c:	e8 43 24 00 00       	call   c0009ac4 <VAS::allocatePages(int, int)>
c0007681:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007688:	89 c6                	mov    esi,eax
c000768a:	e8 92 01 00 00       	call   c0007821 <malloc>
c000768f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007695:	89 04 24             	mov    DWORD PTR [esp],eax
c0007698:	89 c7                	mov    edi,eax
c000769a:	e8 a1 15 00 00       	call   c0008c40 <TSS::TSS()>
c000769f:	83 c4 0c             	add    esp,0xc
c00076a2:	68 a6 c3 01 c0       	push   0xc001c3a6
c00076a7:	56                   	push   esi
c00076a8:	57                   	push   edi
c00076a9:	e8 d6 15 00 00       	call   c0008c84 <TSS::setup(unsigned long, unsigned long)>
c00076ae:	89 c6                	mov    esi,eax
c00076b0:	58                   	pop    eax
c00076b1:	5a                   	pop    edx
c00076b2:	6a 00                	push   0x0
c00076b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00076b8:	50                   	push   eax
c00076b9:	e8 d6 fb ff ff       	call   c0007294 <IDTEntry::IDTEntry(bool)>
c00076be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00076c2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00076c7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c00076ce:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c00076d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076d8:	80 ce 05             	or     dh,0x5
c00076db:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c00076de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00076e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00076e6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00076e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00076ec:	e8 87 fc ff ff       	call   c0007378 <IDT::flush()>
c00076f1:	83 c4 20             	add    esp,0x20
c00076f4:	5b                   	pop    ebx
c00076f5:	5e                   	pop    esi
c00076f6:	5f                   	pop    edi
c00076f7:	c3                   	ret    

c00076f8 <sbrk>:
c00076f8:	55                   	push   ebp
c00076f9:	57                   	push   edi
c00076fa:	56                   	push   esi
c00076fb:	53                   	push   ebx
c00076fc:	83 ec 1c             	sub    esp,0x1c
c00076ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007703:	85 c0                	test   eax,eax
c0007705:	74 5f                	je     c0007766 <sbrk+0x6e>
c0007707:	78 64                	js     c000776d <sbrk+0x75>
c0007709:	8b 15 14 ff 01 c0    	mov    edx,DWORD PTR ds:0xc001ff14
c000770f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007713:	05 ff 0f 00 00       	add    eax,0xfff
c0007718:	89 c5                	mov    ebp,eax
c000771a:	78 69                	js     c0007785 <sbrk+0x8d>
c000771c:	c1 fd 0c             	sar    ebp,0xc
c000771f:	bb 00 00 00 00       	mov    ebx,0x0
c0007724:	8b 35 b0 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022fb0
c000772a:	8b 3d 14 ff 01 c0    	mov    edi,DWORD PTR ds:0xc001ff14
c0007730:	e8 c8 03 00 00       	call   c0007afd <Phys::allocatePage()>
c0007735:	68 01 04 00 00       	push   0x401
c000773a:	57                   	push   edi
c000773b:	50                   	push   eax
c000773c:	56                   	push   esi
c000773d:	e8 7e 22 00 00       	call   c00099c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0007742:	81 05 14 ff 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001ff14,0x1000
c000774c:	43                   	inc    ebx
c000774d:	83 c4 10             	add    esp,0x10
c0007750:	39 dd                	cmp    ebp,ebx
c0007752:	75 d0                	jne    c0007724 <sbrk+0x2c>
c0007754:	0f 20 d8             	mov    eax,cr3
c0007757:	0f 22 d8             	mov    cr3,eax
c000775a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000775e:	83 c4 1c             	add    esp,0x1c
c0007761:	5b                   	pop    ebx
c0007762:	5e                   	pop    esi
c0007763:	5f                   	pop    edi
c0007764:	5d                   	pop    ebp
c0007765:	c3                   	ret    
c0007766:	a1 14 ff 01 c0       	mov    eax,ds:0xc001ff14
c000776b:	eb f1                	jmp    c000775e <sbrk+0x66>
c000776d:	83 ec 08             	sub    esp,0x8
c0007770:	50                   	push   eax
c0007771:	68 54 de 01 c0       	push   0xc001de54
c0007776:	e8 3f 2e 00 00       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c000777b:	83 c4 10             	add    esp,0x10
c000777e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007783:	eb d9                	jmp    c000775e <sbrk+0x66>
c0007785:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c000778b:	eb 8f                	jmp    c000771c <sbrk+0x24>

c000778d <mmap>:
c000778d:	83 ec 18             	sub    esp,0x18
c0007790:	68 84 de 01 c0       	push   0xc001de84
c0007795:	e8 29 8b 00 00       	call   c00102c3 <KePanic(char const*)>
c000779a:	b8 00 00 00 00       	mov    eax,0x0
c000779f:	83 c4 1c             	add    esp,0x1c
c00077a2:	c3                   	ret    

c00077a3 <munmap>:
c00077a3:	83 ec 18             	sub    esp,0x18
c00077a6:	68 89 de 01 c0       	push   0xc001de89
c00077ab:	e8 13 8b 00 00       	call   c00102c3 <KePanic(char const*)>
c00077b0:	b8 00 00 00 00       	mov    eax,0x0
c00077b5:	83 c4 1c             	add    esp,0x1c
c00077b8:	c3                   	ret    

c00077b9 <liballoc_lock()>:
c00077b9:	fa                   	cli    
c00077ba:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c00077c0:	b8 00 00 00 00       	mov    eax,0x0
c00077c5:	c3                   	ret    

c00077c6 <liballoc_unlock()>:
c00077c6:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00077cb:	48                   	dec    eax
c00077cc:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00077d1:	75 01                	jne    c00077d4 <liballoc_unlock()+0xe>
c00077d3:	fb                   	sti    
c00077d4:	b8 00 00 00 00       	mov    eax,0x0
c00077d9:	c3                   	ret    

c00077da <liballoc_alloc(int)>:
c00077da:	83 ec 10             	sub    esp,0x10
c00077dd:	6a 01                	push   0x1
c00077df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00077e3:	ff 35 b0 2f 02 c0    	push   DWORD PTR ds:0xc0022fb0
c00077e9:	e8 d6 22 00 00       	call   c0009ac4 <VAS::allocatePages(int, int)>
c00077ee:	83 c4 1c             	add    esp,0x1c
c00077f1:	c3                   	ret    

c00077f2 <liballoc_free(void*, int)>:
c00077f2:	83 ec 14             	sub    esp,0x14
c00077f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00077f9:	ff 35 b0 2f 02 c0    	push   DWORD PTR ds:0xc0022fb0
c00077ff:	e8 12 1f 00 00       	call   c0009716 <VAS::freeAllocatedPages(unsigned long)>
c0007804:	b8 00 00 00 00       	mov    eax,0x0
c0007809:	83 c4 1c             	add    esp,0x1c
c000780c:	c3                   	ret    

c000780d <realloc>:
c000780d:	83 ec 14             	sub    esp,0x14
c0007810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007814:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007818:	e8 14 9d ff ff       	call   c0001531 <dlrealloc>
c000781d:	83 c4 1c             	add    esp,0x1c
c0007820:	c3                   	ret    

c0007821 <malloc>:
c0007821:	83 ec 18             	sub    esp,0x18
c0007824:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007828:	e8 c7 97 ff ff       	call   c0000ff4 <dlmalloc>
c000782d:	83 c4 1c             	add    esp,0x1c
c0007830:	c3                   	ret    

c0007831 <free>:
c0007831:	83 ec 18             	sub    esp,0x18
c0007834:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007838:	e8 5c 94 ff ff       	call   c0000c99 <dlfree>
c000783d:	83 c4 1c             	add    esp,0x1c
c0007840:	c3                   	ret    

c0007841 <rfree>:
c0007841:	83 ec 18             	sub    esp,0x18
c0007844:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007848:	e8 4c 94 ff ff       	call   c0000c99 <dlfree>
c000784d:	83 c4 1c             	add    esp,0x1c
c0007850:	c3                   	ret    

c0007851 <calloc>:
c0007851:	56                   	push   esi
c0007852:	53                   	push   ebx
c0007853:	83 ec 10             	sub    esp,0x10
c0007856:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000785a:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000785f:	53                   	push   ebx
c0007860:	e8 bc ff ff ff       	call   c0007821 <malloc>
c0007865:	89 c6                	mov    esi,eax
c0007867:	83 c4 0c             	add    esp,0xc
c000786a:	53                   	push   ebx
c000786b:	6a 00                	push   0x0
c000786d:	50                   	push   eax
c000786e:	e8 5d 8c ff ff       	call   c00004d0 <memset>
c0007873:	89 f0                	mov    eax,esi
c0007875:	83 c4 14             	add    esp,0x14
c0007878:	5b                   	pop    ebx
c0007879:	5e                   	pop    esi
c000787a:	c3                   	ret    

c000787b <KeEntryPoint>:
c000787b:	57                   	push   edi
c000787c:	bf f9 03 00 00       	mov    edi,0x3f9
c0007881:	56                   	push   esi
c0007882:	89 fa                	mov    edx,edi
c0007884:	53                   	push   ebx
c0007885:	31 f6                	xor    esi,esi
c0007887:	83 ec 2c             	sub    esp,0x2c
c000788a:	a1 00 05 00 00       	mov    eax,ds:0x500
c000788f:	a3 d0 2e 02 c0       	mov    ds:0xc0022ed0,eax
c0007894:	89 f0                	mov    eax,esi
c0007896:	ee                   	out    dx,al
c0007897:	bb fb 03 00 00       	mov    ebx,0x3fb
c000789c:	b0 80                	mov    al,0x80
c000789e:	89 da                	mov    edx,ebx
c00078a0:	ee                   	out    dx,al
c00078a1:	b1 03                	mov    cl,0x3
c00078a3:	ba f8 03 00 00       	mov    edx,0x3f8
c00078a8:	88 c8                	mov    al,cl
c00078aa:	ee                   	out    dx,al
c00078ab:	89 f0                	mov    eax,esi
c00078ad:	89 fa                	mov    edx,edi
c00078af:	ee                   	out    dx,al
c00078b0:	88 c8                	mov    al,cl
c00078b2:	89 da                	mov    edx,ebx
c00078b4:	ee                   	out    dx,al
c00078b5:	b0 c7                	mov    al,0xc7
c00078b7:	ba fa 03 00 00       	mov    edx,0x3fa
c00078bc:	ee                   	out    dx,al
c00078bd:	b0 0b                	mov    al,0xb
c00078bf:	ba fc 03 00 00       	mov    edx,0x3fc
c00078c4:	ee                   	out    dx,al
c00078c5:	68 90 de 01 c0       	push   0xc001de90
c00078ca:	e8 eb 2c 00 00       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c00078cf:	e8 09 83 00 00       	call   c000fbdd <KeDisplaySplashScreen()>
c00078d4:	a1 24 05 00 00       	mov    eax,ds:0x524
c00078d9:	05 ff 0f 00 00       	add    eax,0xfff
c00078de:	25 00 f0 ff ff       	and    eax,0xfffff000
c00078e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00078e6:	e8 64 03 00 00       	call   c0007c4f <Phys::physicalMemorySetup(unsigned int)>
c00078eb:	e8 cc 1b 00 00       	call   c00094bc <Virt::virtualMemorySetup()>
c00078f0:	58                   	pop    eax
c00078f1:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c00078f5:	53                   	push   ebx
c00078f6:	e8 99 1e 00 00       	call   c0009794 <VAS::VAS()>
c00078fb:	89 1d b0 2f 02 c0    	mov    DWORD PTR ds:0xc0022fb0,ebx
c0007901:	e8 34 52 01 00       	call   c001cb3a <_init>
c0007906:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c000790d:	e8 0f ff ff ff       	call   c0007821 <malloc>
c0007912:	89 04 24             	mov    DWORD PTR [esp],eax
c0007915:	89 c6                	mov    esi,eax
c0007917:	e8 7c f2 ff ff       	call   c0006b98 <Computer::Computer()>
c000791c:	6a 00                	push   0x0
c000791e:	89 35 b8 2e 02 c0    	mov    DWORD PTR ds:0xc0022eb8,esi
c0007924:	6a 00                	push   0x0
c0007926:	6a 00                	push   0x0
c0007928:	56                   	push   esi
c0007929:	e8 10 f6 ff ff       	call   c0006f3e <Computer::open(int, int, void*)>
c000792e:	83 c4 14             	add    esp,0x14
c0007931:	53                   	push   ebx
c0007932:	e8 25 1f 00 00       	call   c000985c <VAS::~VAS()>
c0007937:	83 c4 30             	add    esp,0x30
c000793a:	5b                   	pop    ebx
c000793b:	5e                   	pop    esi
c000793c:	5f                   	pop    edi
c000793d:	c3                   	ret    

c000793e <Phys::allocateDMA(unsigned long)>:
c000793e:	55                   	push   ebp
c000793f:	31 ed                	xor    ebp,ebp
c0007941:	57                   	push   edi
c0007942:	56                   	push   esi
c0007943:	53                   	push   ebx
c0007944:	31 db                	xor    ebx,ebx
c0007946:	83 ec 1c             	sub    esp,0x1c
c0007949:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000794d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007955:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000795b:	31 c0                	xor    eax,eax
c000795d:	c1 ef 0c             	shr    edi,0xc
c0007960:	eb 19                	jmp    c000797b <Phys::allocateDMA(unsigned long)+0x3d>
c0007962:	85 c0                	test   eax,eax
c0007964:	75 06                	jne    c000796c <Phys::allocateDMA(unsigned long)+0x2e>
c0007966:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000796a:	89 dd                	mov    ebp,ebx
c000796c:	8d 70 01             	lea    esi,[eax+0x1]
c000796f:	39 f7                	cmp    edi,esi
c0007971:	74 33                	je     c00079a6 <Phys::allocateDMA(unsigned long)+0x68>
c0007973:	89 f0                	mov    eax,esi
c0007975:	43                   	inc    ebx
c0007976:	83 fb 0f             	cmp    ebx,0xf
c0007979:	7f 11                	jg     c000798c <Phys::allocateDMA(unsigned long)+0x4e>
c000797b:	80 bb ec 2e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdd114],0x0
c0007982:	74 de                	je     c0007962 <Phys::allocateDMA(unsigned long)+0x24>
c0007984:	31 c0                	xor    eax,eax
c0007986:	43                   	inc    ebx
c0007987:	83 fb 0f             	cmp    ebx,0xf
c000798a:	7e ef                	jle    c000797b <Phys::allocateDMA(unsigned long)+0x3d>
c000798c:	83 ec 0c             	sub    esp,0xc
c000798f:	68 a8 de 01 c0       	push   0xc001dea8
c0007994:	e8 2a 89 00 00       	call   c00102c3 <KePanic(char const*)>
c0007999:	83 c4 10             	add    esp,0x10
c000799c:	31 c0                	xor    eax,eax
c000799e:	83 c4 1c             	add    esp,0x1c
c00079a1:	5b                   	pop    ebx
c00079a2:	5e                   	pop    esi
c00079a3:	5f                   	pop    edi
c00079a4:	5d                   	pop    ebp
c00079a5:	c3                   	ret    
c00079a6:	89 e9                	mov    ecx,ebp
c00079a8:	c1 f9 04             	sar    ecx,0x4
c00079ab:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00079af:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c00079b3:	89 ca                	mov    edx,ecx
c00079b5:	4a                   	dec    edx
c00079b6:	79 03                	jns    c00079bb <Phys::allocateDMA(unsigned long)+0x7d>
c00079b8:	8d 51 0e             	lea    edx,[ecx+0xe]
c00079bb:	c1 fa 04             	sar    edx,0x4
c00079be:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c00079c2:	74 08                	je     c00079cc <Phys::allocateDMA(unsigned long)+0x8e>
c00079c4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00079c8:	31 c0                	xor    eax,eax
c00079ca:	eb ba                	jmp    c0007986 <Phys::allocateDMA(unsigned long)+0x48>
c00079cc:	85 f6                	test   esi,esi
c00079ce:	74 15                	je     c00079e5 <Phys::allocateDMA(unsigned long)+0xa7>
c00079d0:	8d 95 ec 2e 02 c0    	lea    edx,[ebp-0x3ffdd114]
c00079d6:	8d 84 05 ed 2e 02 c0 	lea    eax,[ebp+eax*1-0x3ffdd113]
c00079dd:	c6 02 01             	mov    BYTE PTR [edx],0x1
c00079e0:	42                   	inc    edx
c00079e1:	39 d0                	cmp    eax,edx
c00079e3:	75 f8                	jne    c00079dd <Phys::allocateDMA(unsigned long)+0x9f>
c00079e5:	01 3d e4 2e 02 c0    	add    DWORD PTR ds:0xc0022ee4,edi
c00079eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079ef:	85 c0                	test   eax,eax
c00079f1:	74 17                	je     c0007a0a <Phys::allocateDMA(unsigned long)+0xcc>
c00079f3:	83 ec 0c             	sub    esp,0xc
c00079f6:	68 a8 de 01 c0       	push   0xc001dea8
c00079fb:	e8 c3 88 00 00       	call   c00102c3 <KePanic(char const*)>
c0007a00:	83 c4 10             	add    esp,0x10
c0007a03:	89 f0                	mov    eax,esi
c0007a05:	e9 6b ff ff ff       	jmp    c0007975 <Phys::allocateDMA(unsigned long)+0x37>
c0007a0a:	c1 e5 0c             	shl    ebp,0xc
c0007a0d:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007a13:	eb 89                	jmp    c000799e <Phys::allocateDMA(unsigned long)+0x60>

c0007a15 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007a15:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a19:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007a1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a23:	c1 ea 0c             	shr    edx,0xc
c0007a26:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007a2b:	29 15 e4 2e 02 c0    	sub    DWORD PTR ds:0xc0022ee4,edx
c0007a31:	c1 e8 0c             	shr    eax,0xc
c0007a34:	85 d2                	test   edx,edx
c0007a36:	74 0f                	je     c0007a47 <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0007a38:	05 ec 2e 02 c0       	add    eax,0xc0022eec
c0007a3d:	01 c2                	add    edx,eax
c0007a3f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007a42:	40                   	inc    eax
c0007a43:	39 d0                	cmp    eax,edx
c0007a45:	75 f8                	jne    c0007a3f <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0007a47:	c3                   	ret    

c0007a48 <Phys::setPageState(unsigned long, bool)>:
c0007a48:	56                   	push   esi
c0007a49:	ba 01 00 00 00       	mov    edx,0x1
c0007a4e:	53                   	push   ebx
c0007a4f:	8b 35 18 ff 01 c0    	mov    esi,DWORD PTR ds:0xc001ff18
c0007a55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007a59:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007a5d:	89 c8                	mov    eax,ecx
c0007a5f:	83 e1 07             	and    ecx,0x7
c0007a62:	c1 e8 03             	shr    eax,0x3
c0007a65:	d3 e3                	shl    ebx,cl
c0007a67:	01 c6                	add    esi,eax
c0007a69:	d3 e2                	shl    edx,cl
c0007a6b:	f7 d2                	not    edx
c0007a6d:	20 16                	and    BYTE PTR [esi],dl
c0007a6f:	03 05 18 ff 01 c0    	add    eax,DWORD PTR ds:0xc001ff18
c0007a75:	08 18                	or     BYTE PTR [eax],bl
c0007a77:	5b                   	pop    ebx
c0007a78:	5e                   	pop    esi
c0007a79:	c3                   	ret    

c0007a7a <Phys::getPageState(unsigned long)>:
c0007a7a:	53                   	push   ebx
c0007a7b:	8b 15 18 ff 01 c0    	mov    edx,DWORD PTR ds:0xc001ff18
c0007a81:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007a85:	31 db                	xor    ebx,ebx
c0007a87:	89 c8                	mov    eax,ecx
c0007a89:	83 e1 07             	and    ecx,0x7
c0007a8c:	c1 e8 03             	shr    eax,0x3
c0007a8f:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007a92:	89 d8                	mov    eax,ebx
c0007a94:	5b                   	pop    ebx
c0007a95:	d3 f8                	sar    eax,cl
c0007a97:	83 e0 01             	and    eax,0x1
c0007a9a:	c3                   	ret    

c0007a9b <Phys::freePage(unsigned long)>:
c0007a9b:	53                   	push   ebx
c0007a9c:	83 ec 08             	sub    esp,0x8
c0007a9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007aa3:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007aa9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007aaf:	76 3a                	jbe    c0007aeb <Phys::freePage(unsigned long)+0x50>
c0007ab1:	c1 e8 0c             	shr    eax,0xc
c0007ab4:	50                   	push   eax
c0007ab5:	89 c3                	mov    ebx,eax
c0007ab7:	e8 be ff ff ff       	call   c0007a7a <Phys::getPageState(unsigned long)>
c0007abc:	5a                   	pop    edx
c0007abd:	84 c0                	test   al,al
c0007abf:	74 19                	je     c0007ada <Phys::freePage(unsigned long)+0x3f>
c0007ac1:	83 ec 08             	sub    esp,0x8
c0007ac4:	ff 0d e4 2e 02 c0    	dec    DWORD PTR ds:0xc0022ee4
c0007aca:	6a 00                	push   0x0
c0007acc:	53                   	push   ebx
c0007acd:	e8 76 ff ff ff       	call   c0007a48 <Phys::setPageState(unsigned long, bool)>
c0007ad2:	83 c4 10             	add    esp,0x10
c0007ad5:	83 c4 08             	add    esp,0x8
c0007ad8:	5b                   	pop    ebx
c0007ad9:	c3                   	ret    
c0007ada:	c7 44 24 10 4d df 01 c0 	mov    DWORD PTR [esp+0x10],0xc001df4d
c0007ae2:	83 c4 08             	add    esp,0x8
c0007ae5:	5b                   	pop    ebx
c0007ae6:	e9 d8 87 00 00       	jmp    c00102c3 <KePanic(char const*)>
c0007aeb:	68 00 10 00 00       	push   0x1000
c0007af0:	50                   	push   eax
c0007af1:	e8 1f ff ff ff       	call   c0007a15 <Phys::freeDMA(unsigned long, unsigned long)>
c0007af6:	59                   	pop    ecx
c0007af7:	5b                   	pop    ebx
c0007af8:	83 c4 08             	add    esp,0x8
c0007afb:	5b                   	pop    ebx
c0007afc:	c3                   	ret    

c0007afd <Phys::allocatePage()>:
c0007afd:	56                   	push   esi
c0007afe:	53                   	push   ebx
c0007aff:	83 ec 14             	sub    esp,0x14
c0007b02:	8b 35 d8 2e 02 c0    	mov    esi,DWORD PTR ds:0xc0022ed8
c0007b08:	89 f3                	mov    ebx,esi
c0007b0a:	eb 0a                	jmp    c0007b16 <Phys::allocatePage()+0x19>
c0007b0c:	89 1d d8 2e 02 c0    	mov    DWORD PTR ds:0xc0022ed8,ebx
c0007b12:	39 de                	cmp    esi,ebx
c0007b14:	74 24                	je     c0007b3a <Phys::allocatePage()+0x3d>
c0007b16:	53                   	push   ebx
c0007b17:	e8 5e ff ff ff       	call   c0007a7a <Phys::getPageState(unsigned long)>
c0007b1c:	5a                   	pop    edx
c0007b1d:	84 c0                	test   al,al
c0007b1f:	74 5f                	je     c0007b80 <Phys::allocatePage()+0x83>
c0007b21:	43                   	inc    ebx
c0007b22:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007b28:	75 e2                	jne    c0007b0c <Phys::allocatePage()+0xf>
c0007b2a:	31 db                	xor    ebx,ebx
c0007b2c:	c7 05 d8 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ed8,0x0
c0007b36:	39 de                	cmp    esi,ebx
c0007b38:	75 dc                	jne    c0007b16 <Phys::allocatePage()+0x19>
c0007b3a:	83 ec 0c             	sub    esp,0xc
c0007b3d:	80 35 fc 2e 02 c0 01 	xor    BYTE PTR ds:0xc0022efc,0x1
c0007b44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007b49:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007b4c:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007b52:	50                   	push   eax
c0007b53:	e8 46 27 00 00       	call   c000a29e <VAS::scanForEviction()>
c0007b58:	83 c4 10             	add    esp,0x10
c0007b5b:	85 c0                	test   eax,eax
c0007b5d:	75 3f                	jne    c0007b9e <Phys::allocatePage()+0xa1>
c0007b5f:	83 ec 0c             	sub    esp,0xc
c0007b62:	68 d0 de 01 c0       	push   0xc001ded0
c0007b67:	e8 57 87 00 00       	call   c00102c3 <KePanic(char const*)>
c0007b6c:	83 c4 10             	add    esp,0x10
c0007b6f:	8b 1d d8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022ed8
c0007b75:	53                   	push   ebx
c0007b76:	e8 ff fe ff ff       	call   c0007a7a <Phys::getPageState(unsigned long)>
c0007b7b:	5a                   	pop    edx
c0007b7c:	84 c0                	test   al,al
c0007b7e:	75 a1                	jne    c0007b21 <Phys::allocatePage()+0x24>
c0007b80:	6a 01                	push   0x1
c0007b82:	53                   	push   ebx
c0007b83:	e8 c0 fe ff ff       	call   c0007a48 <Phys::setPageState(unsigned long, bool)>
c0007b88:	a1 d8 2e 02 c0       	mov    eax,ds:0xc0022ed8
c0007b8d:	5a                   	pop    edx
c0007b8e:	ff 05 e4 2e 02 c0    	inc    DWORD PTR ds:0xc0022ee4
c0007b94:	c1 e0 0c             	shl    eax,0xc
c0007b97:	59                   	pop    ecx
c0007b98:	83 c4 14             	add    esp,0x14
c0007b9b:	5b                   	pop    ebx
c0007b9c:	5e                   	pop    esi
c0007b9d:	c3                   	ret    
c0007b9e:	83 ec 08             	sub    esp,0x8
c0007ba1:	89 c2                	mov    edx,eax
c0007ba3:	6a 01                	push   0x1
c0007ba5:	c1 ea 0c             	shr    edx,0xc
c0007ba8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bac:	52                   	push   edx
c0007bad:	e8 96 fe ff ff       	call   c0007a48 <Phys::setPageState(unsigned long, bool)>
c0007bb2:	83 c4 10             	add    esp,0x10
c0007bb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bb9:	eb dd                	jmp    c0007b98 <Phys::allocatePage()+0x9b>

c0007bbb <Phys::allocateContiguousPages(int)>:
c0007bbb:	57                   	push   edi
c0007bbc:	56                   	push   esi
c0007bbd:	53                   	push   ebx
c0007bbe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007bc2:	fa                   	cli    
c0007bc3:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0007bc9:	31 db                	xor    ebx,ebx
c0007bcb:	85 db                	test   ebx,ebx
c0007bcd:	75 11                	jne    c0007be0 <Phys::allocateContiguousPages(int)+0x25>
c0007bcf:	e8 29 ff ff ff       	call   c0007afd <Phys::allocatePage()>
c0007bd4:	83 fe 01             	cmp    esi,0x1
c0007bd7:	89 c7                	mov    edi,eax
c0007bd9:	74 21                	je     c0007bfc <Phys::allocateContiguousPages(int)+0x41>
c0007bdb:	bb 01 00 00 00       	mov    ebx,0x1
c0007be0:	e8 18 ff ff ff       	call   c0007afd <Phys::allocatePage()>
c0007be5:	89 da                	mov    edx,ebx
c0007be7:	c1 e2 0c             	shl    edx,0xc
c0007bea:	01 fa                	add    edx,edi
c0007bec:	39 c2                	cmp    edx,eax
c0007bee:	74 20                	je     c0007c10 <Phys::allocateContiguousPages(int)+0x55>
c0007bf0:	bb 01 00 00 00       	mov    ebx,0x1
c0007bf5:	89 c7                	mov    edi,eax
c0007bf7:	83 fe 01             	cmp    esi,0x1
c0007bfa:	75 e4                	jne    c0007be0 <Phys::allocateContiguousPages(int)+0x25>
c0007bfc:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0007c01:	48                   	dec    eax
c0007c02:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0007c07:	75 01                	jne    c0007c0a <Phys::allocateContiguousPages(int)+0x4f>
c0007c09:	fb                   	sti    
c0007c0a:	89 f8                	mov    eax,edi
c0007c0c:	5b                   	pop    ebx
c0007c0d:	5e                   	pop    esi
c0007c0e:	5f                   	pop    edi
c0007c0f:	c3                   	ret    
c0007c10:	43                   	inc    ebx
c0007c11:	39 f3                	cmp    ebx,esi
c0007c13:	75 b6                	jne    c0007bcb <Phys::allocateContiguousPages(int)+0x10>
c0007c15:	eb e5                	jmp    c0007bfc <Phys::allocateContiguousPages(int)+0x41>

c0007c17 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007c17:	56                   	push   esi
c0007c18:	53                   	push   ebx
c0007c19:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007c1d:	39 1d dc 2e 02 c0    	cmp    DWORD PTR ds:0xc0022edc,ebx
c0007c23:	73 06                	jae    c0007c2b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007c25:	89 1d dc 2e 02 c0    	mov    DWORD PTR ds:0xc0022edc,ebx
c0007c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c2f:	c1 eb 0c             	shr    ebx,0xc
c0007c32:	c1 e8 0c             	shr    eax,0xc
c0007c35:	39 d8                	cmp    eax,ebx
c0007c37:	73 13                	jae    c0007c4c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007c39:	6a 00                	push   0x0
c0007c3b:	8d 70 01             	lea    esi,[eax+0x1]
c0007c3e:	50                   	push   eax
c0007c3f:	e8 04 fe ff ff       	call   c0007a48 <Phys::setPageState(unsigned long, bool)>
c0007c44:	5a                   	pop    edx
c0007c45:	89 f0                	mov    eax,esi
c0007c47:	59                   	pop    ecx
c0007c48:	39 f3                	cmp    ebx,esi
c0007c4a:	75 ed                	jne    c0007c39 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007c4c:	5b                   	pop    ebx
c0007c4d:	5e                   	pop    esi
c0007c4e:	c3                   	ret    

c0007c4f <Phys::physicalMemorySetup(unsigned int)>:
c0007c4f:	55                   	push   ebp
c0007c50:	57                   	push   edi
c0007c51:	56                   	push   esi
c0007c52:	53                   	push   ebx
c0007c53:	31 db                	xor    ebx,ebx
c0007c55:	83 ec 40             	sub    esp,0x40
c0007c58:	6a 10                	push   0x10
c0007c5a:	6a 00                	push   0x0
c0007c5c:	68 ec 2e 02 c0       	push   0xc0022eec
c0007c61:	e8 6a 88 ff ff       	call   c00004d0 <memset>
c0007c66:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007c6a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007c6f:	05 00 10 00 00       	add    eax,0x1000
c0007c74:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007c78:	5a                   	pop    edx
c0007c79:	59                   	pop    ecx
c0007c7a:	50                   	push   eax
c0007c7b:	68 63 df 01 c0       	push   0xc001df63
c0007c80:	e8 35 29 00 00       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0007c85:	83 c4 10             	add    esp,0x10
c0007c88:	83 ec 08             	sub    esp,0x8
c0007c8b:	6a 01                	push   0x1
c0007c8d:	53                   	push   ebx
c0007c8e:	43                   	inc    ebx
c0007c8f:	e8 b4 fd ff ff       	call   c0007a48 <Phys::setPageState(unsigned long, bool)>
c0007c94:	83 c4 10             	add    esp,0x10
c0007c97:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007c9d:	75 e9                	jne    c0007c88 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007c9f:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007ca5:	66 85 c0             	test   ax,ax
c0007ca8:	0f 84 97 01 00 00    	je     c0007e45 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007cae:	89 c7                	mov    edi,eax
c0007cb0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007cb8:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007cbe:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007cc3:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007cc7:	eb 15                	jmp    c0007cde <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007cc9:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007ccd:	83 c3 18             	add    ebx,0x18
c0007cd0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007cd4:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007cd8:	0f 84 77 01 00 00    	je     c0007e55 <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007cde:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007ce1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007ce4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007ce7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007ceb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007cef:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007cf1:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007cf4:	01 f0                	add    eax,esi
c0007cf6:	55                   	push   ebp
c0007cf7:	11 fa                	adc    edx,edi
c0007cf9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007cfd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007d01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d05:	50                   	push   eax
c0007d06:	56                   	push   esi
c0007d07:	68 00 df 01 c0       	push   0xc001df00
c0007d0c:	e8 a9 28 00 00       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0007d11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007d15:	83 c4 10             	add    esp,0x10
c0007d18:	09 f8                	or     eax,edi
c0007d1a:	0f 85 35 01 00 00    	jne    c0007e55 <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007d20:	4d                   	dec    ebp
c0007d21:	75 a6                	jne    c0007cc9 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d23:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007d27:	ba 00 00 08 00       	mov    edx,0x80000
c0007d2c:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007d30:	39 f2                	cmp    edx,esi
c0007d32:	89 c1                	mov    ecx,eax
c0007d34:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007d3c:	19 f9                	sbb    ecx,edi
c0007d3e:	0f 82 a7 00 00 00    	jb     c0007deb <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007d44:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007d48:	89 c1                	mov    ecx,eax
c0007d4a:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007d4e:	0f 83 97 00 00 00    	jae    c0007deb <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007d54:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007d59:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d5d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007d61:	39 fa                	cmp    edx,edi
c0007d63:	19 e8                	sbb    eax,ebp
c0007d65:	0f 82 9a 01 00 00    	jb     c0007f05 <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007d6b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d6f:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007d73:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007d79:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007d7e:	83 d5 ff             	adc    ebp,0xffffffff
c0007d81:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007d85:	31 c0                	xor    eax,eax
c0007d87:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007d8b:	39 fa                	cmp    edx,edi
c0007d8d:	89 c1                	mov    ecx,eax
c0007d8f:	19 e9                	sbb    ecx,ebp
c0007d91:	0f 83 32 ff ff ff    	jae    c0007cc9 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d97:	be 00 00 08 00       	mov    esi,0x80000
c0007d9c:	51                   	push   ecx
c0007d9d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007da1:	57                   	push   edi
c0007da2:	56                   	push   esi
c0007da3:	68 24 df 01 c0       	push   0xc001df24
c0007da8:	e8 0d 28 00 00       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0007dad:	5d                   	pop    ebp
c0007dae:	58                   	pop    eax
c0007daf:	57                   	push   edi
c0007db0:	56                   	push   esi
c0007db1:	e8 61 fe ff ff       	call   c0007c17 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007db6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007dbe:	83 c4 0c             	add    esp,0xc
c0007dc1:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007dc5:	03 05 e8 2e 02 c0    	add    eax,DWORD PTR ds:0xc0022ee8
c0007dcb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007dd2:	a3 e8 2e 02 c0       	mov    ds:0xc0022ee8,eax
c0007dd7:	52                   	push   edx
c0007dd8:	50                   	push   eax
c0007dd9:	68 89 df 01 c0       	push   0xc001df89
c0007dde:	e8 d7 27 00 00       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0007de3:	83 c4 10             	add    esp,0x10
c0007de6:	e9 de fe ff ff       	jmp    c0007cc9 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007deb:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007def:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007df3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007df7:	39 ea                	cmp    edx,ebp
c0007df9:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007dfd:	0f 82 c6 fe ff ff    	jb     c0007cc9 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007e03:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007e08:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007e0c:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007e10:	0f 83 b3 fe ff ff    	jae    c0007cc9 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007e16:	39 ee                	cmp    esi,ebp
c0007e18:	89 f8                	mov    eax,edi
c0007e1a:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007e1e:	0f 83 78 ff ff ff    	jae    c0007d9c <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007e24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e28:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007e2c:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007e30:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007e34:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007e38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e3c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007e40:	e9 57 ff ff ff       	jmp    c0007d9c <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007e45:	83 ec 0c             	sub    esp,0xc
c0007e48:	68 7b df 01 c0       	push   0xc001df7b
c0007e4d:	e8 71 84 00 00       	call   c00102c3 <KePanic(char const*)>
c0007e52:	83 c4 10             	add    esp,0x10
c0007e55:	83 ec 08             	sub    esp,0x8
c0007e58:	bb 60 00 00 00       	mov    ebx,0x60
c0007e5d:	6a 00                	push   0x0
c0007e5f:	6a 06                	push   0x6
c0007e61:	e8 e2 fb ff ff       	call   c0007a48 <Phys::setPageState(unsigned long, bool)>
c0007e66:	58                   	pop    eax
c0007e67:	5a                   	pop    edx
c0007e68:	6a 00                	push   0x0
c0007e6a:	6a 07                	push   0x7
c0007e6c:	e8 d7 fb ff ff       	call   c0007a48 <Phys::setPageState(unsigned long, bool)>
c0007e71:	83 05 e8 2e 02 c0 02 	add    DWORD PTR ds:0xc0022ee8,0x2
c0007e78:	83 c4 10             	add    esp,0x10
c0007e7b:	83 ec 08             	sub    esp,0x8
c0007e7e:	6a 00                	push   0x0
c0007e80:	53                   	push   ebx
c0007e81:	43                   	inc    ebx
c0007e82:	e8 c1 fb ff ff       	call   c0007a48 <Phys::setPageState(unsigned long, bool)>
c0007e87:	83 c4 10             	add    esp,0x10
c0007e8a:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007e90:	75 e9                	jne    c0007e7b <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007e92:	a1 e8 2e 02 c0       	mov    eax,ds:0xc0022ee8
c0007e97:	bb 40 01 00 00       	mov    ebx,0x140
c0007e9c:	83 c0 20             	add    eax,0x20
c0007e9f:	a3 e8 2e 02 c0       	mov    ds:0xc0022ee8,eax
c0007ea4:	eb 22                	jmp    c0007ec8 <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007ea6:	83 ec 08             	sub    esp,0x8
c0007ea9:	6a 00                	push   0x0
c0007eab:	53                   	push   ebx
c0007eac:	43                   	inc    ebx
c0007ead:	e8 96 fb ff ff       	call   c0007a48 <Phys::setPageState(unsigned long, bool)>
c0007eb2:	a1 e8 2e 02 c0       	mov    eax,ds:0xc0022ee8
c0007eb7:	83 c4 10             	add    esp,0x10
c0007eba:	40                   	inc    eax
c0007ebb:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007ec1:	a3 e8 2e 02 c0       	mov    ds:0xc0022ee8,eax
c0007ec6:	74 07                	je     c0007ecf <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007ec8:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007ecd:	7e d7                	jle    c0007ea6 <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007ecf:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007ed4:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007ed9:	7f 22                	jg     c0007efd <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007edb:	83 ec 08             	sub    esp,0x8
c0007ede:	6a 00                	push   0x0
c0007ee0:	53                   	push   ebx
c0007ee1:	43                   	inc    ebx
c0007ee2:	e8 61 fb ff ff       	call   c0007a48 <Phys::setPageState(unsigned long, bool)>
c0007ee7:	a1 e8 2e 02 c0       	mov    eax,ds:0xc0022ee8
c0007eec:	83 c4 10             	add    esp,0x10
c0007eef:	40                   	inc    eax
c0007ef0:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007ef6:	a3 e8 2e 02 c0       	mov    ds:0xc0022ee8,eax
c0007efb:	75 d7                	jne    c0007ed4 <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007efd:	83 c4 3c             	add    esp,0x3c
c0007f00:	5b                   	pop    ebx
c0007f01:	5e                   	pop    esi
c0007f02:	5f                   	pop    edi
c0007f03:	5d                   	pop    ebp
c0007f04:	c3                   	ret    
c0007f05:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007f0d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007f15:	e9 51 fe ff ff       	jmp    c0007d6b <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007f1a <Pipe::isAtty()>:
c0007f1a:	31 c0                	xor    eax,eax
c0007f1c:	c3                   	ret    
c0007f1d:	90                   	nop

c0007f1e <Pipe::~Pipe()>:
c0007f1e:	83 ec 0c             	sub    esp,0xc
c0007f21:	ba e8 df 01 c0       	mov    edx,0xc001dfe8
c0007f26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f2a:	89 10                	mov    DWORD PTR [eax],edx
c0007f2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f30:	83 ec 0c             	sub    esp,0xc
c0007f33:	50                   	push   eax
c0007f34:	e8 63 11 00 00       	call   c000909c <UnixFile::~UnixFile()>
c0007f39:	83 c4 10             	add    esp,0x10
c0007f3c:	90                   	nop
c0007f3d:	83 c4 0c             	add    esp,0xc
c0007f40:	c3                   	ret    
c0007f41:	90                   	nop

c0007f42 <Pipe::~Pipe()>:
c0007f42:	83 ec 0c             	sub    esp,0xc
c0007f45:	83 ec 0c             	sub    esp,0xc
c0007f48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f4c:	e8 cd ff ff ff       	call   c0007f1e <Pipe::~Pipe()>
c0007f51:	83 c4 10             	add    esp,0x10
c0007f54:	83 ec 08             	sub    esp,0x8
c0007f57:	6a 20                	push   0x20
c0007f59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f5d:	e8 62 25 00 00       	call   c000a4c4 <operator delete(void*, unsigned long)>
c0007f62:	83 c4 10             	add    esp,0x10
c0007f65:	83 c4 0c             	add    esp,0xc
c0007f68:	c3                   	ret    
c0007f69:	90                   	nop

c0007f6a <Pipe::write(unsigned long long, void*, int*)>:
c0007f6a:	55                   	push   ebp
c0007f6b:	57                   	push   edi
c0007f6c:	56                   	push   esi
c0007f6d:	53                   	push   ebx
c0007f6e:	83 ec 1c             	sub    esp,0x1c
c0007f71:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007f75:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007f79:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007f7c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f80:	89 04 24             	mov    DWORD PTR [esp],eax
c0007f83:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007f87:	89 d8                	mov    eax,ebx
c0007f89:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007f8c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f90:	89 d6                	mov    esi,edx
c0007f92:	89 d7                	mov    edi,edx
c0007f94:	c1 ff 1f             	sar    edi,0x1f
c0007f97:	03 34 24             	add    esi,DWORD PTR [esp]
c0007f9a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007f9e:	c1 f8 1f             	sar    eax,0x1f
c0007fa1:	39 f3                	cmp    ebx,esi
c0007fa3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007fa7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007fab:	19 f8                	sbb    eax,edi
c0007fad:	b8 01 00 00 00       	mov    eax,0x1
c0007fb2:	72 6e                	jb     c0008022 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0007fb4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0007fb7:	01 d0                	add    eax,edx
c0007fb9:	99                   	cdq    
c0007fba:	f7 fb                	idiv   ebx
c0007fbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007fc0:	29 d3                	sub    ebx,edx
c0007fc2:	89 d7                	mov    edi,edx
c0007fc4:	89 de                	mov    esi,ebx
c0007fc6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007fc9:	c1 fb 1f             	sar    ebx,0x1f
c0007fcc:	39 f2                	cmp    edx,esi
c0007fce:	19 d8                	sbb    eax,ebx
c0007fd0:	b8 00 00 00 00       	mov    eax,0x0
c0007fd5:	72 04                	jb     c0007fdb <Pipe::write(unsigned long long, void*, int*)+0x71>
c0007fd7:	89 d0                	mov    eax,edx
c0007fd9:	29 f0                	sub    eax,esi
c0007fdb:	89 d3                	mov    ebx,edx
c0007fdd:	29 c3                	sub    ebx,eax
c0007fdf:	74 0b                	je     c0007fec <Pipe::write(unsigned long long, void*, int*)+0x82>
c0007fe1:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0007fe4:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0007fe8:	89 d9                	mov    ecx,ebx
c0007fea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007fec:	85 c0                	test   eax,eax
c0007fee:	74 0d                	je     c0007ffd <Pipe::write(unsigned long long, void*, int*)+0x93>
c0007ff0:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0007ff4:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0007ff7:	89 de                	mov    esi,ebx
c0007ff9:	89 c1                	mov    ecx,eax
c0007ffb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007ffd:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008000:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008005:	75 10                	jne    c0008017 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008007:	83 ec 0c             	sub    esp,0xc
c000800a:	68 a5 df 01 c0       	push   0xc001dfa5
c000800f:	e8 af 82 00 00       	call   c00102c3 <KePanic(char const*)>
c0008014:	83 c4 10             	add    esp,0x10
c0008017:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000801b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000801e:	89 08                	mov    DWORD PTR [eax],ecx
c0008020:	31 c0                	xor    eax,eax
c0008022:	83 c4 1c             	add    esp,0x1c
c0008025:	5b                   	pop    ebx
c0008026:	5e                   	pop    esi
c0008027:	5f                   	pop    edi
c0008028:	5d                   	pop    ebp
c0008029:	c3                   	ret    

c000802a <Pipe::read(unsigned long long, void*, int*)>:
c000802a:	55                   	push   ebp
c000802b:	57                   	push   edi
c000802c:	56                   	push   esi
c000802d:	53                   	push   ebx
c000802e:	83 ec 1c             	sub    esp,0x1c
c0008031:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008035:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008039:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000803d:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008040:	89 c8                	mov    eax,ecx
c0008042:	99                   	cdq    
c0008043:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008047:	74 24                	je     c000806d <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008049:	39 f9                	cmp    ecx,edi
c000804b:	89 d1                	mov    ecx,edx
c000804d:	19 f1                	sbb    ecx,esi
c000804f:	73 1c                	jae    c000806d <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008051:	fa                   	cli    
c0008052:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0008058:	e8 83 b7 00 00       	call   c00137e0 <schedule()>
c000805d:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0008062:	48                   	dec    eax
c0008063:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0008068:	75 d3                	jne    c000803d <Pipe::read(unsigned long long, void*, int*)+0x13>
c000806a:	fb                   	sti    
c000806b:	eb d0                	jmp    c000803d <Pipe::read(unsigned long long, void*, int*)+0x13>
c000806d:	39 f8                	cmp    eax,edi
c000806f:	89 d1                	mov    ecx,edx
c0008071:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008074:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008078:	19 f1                	sbb    ecx,esi
c000807a:	73 07                	jae    c0008083 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000807c:	89 04 24             	mov    DWORD PTR [esp],eax
c000807f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008083:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008086:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008089:	29 f7                	sub    edi,esi
c000808b:	89 f8                	mov    eax,edi
c000808d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008091:	99                   	cdq    
c0008092:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008095:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008099:	19 d0                	sbb    eax,edx
c000809b:	73 07                	jae    c00080a4 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000809d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00080a4:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00080a7:	89 ea                	mov    edx,ebp
c00080a9:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00080ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00080b2:	74 0d                	je     c00080c1 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00080b4:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00080b7:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00080bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080bf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00080c1:	85 d2                	test   edx,edx
c00080c3:	74 11                	je     c00080d6 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00080c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00080c9:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00080cc:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00080d0:	89 d1                	mov    ecx,edx
c00080d2:	89 c7                	mov    edi,eax
c00080d4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00080d6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00080d9:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00080dc:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00080df:	99                   	cdq    
c00080e0:	89 f7                	mov    edi,esi
c00080e2:	03 04 24             	add    eax,DWORD PTR [esp]
c00080e5:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00080e9:	c1 ff 1f             	sar    edi,0x1f
c00080ec:	57                   	push   edi
c00080ed:	56                   	push   esi
c00080ee:	52                   	push   edx
c00080ef:	50                   	push   eax
c00080f0:	e8 2b 49 01 00       	call   c001ca20 <__umoddi3>
c00080f5:	83 c4 10             	add    esp,0x10
c00080f8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00080fb:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008100:	75 10                	jne    c0008112 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008102:	83 ec 0c             	sub    esp,0xc
c0008105:	68 c2 df 01 c0       	push   0xc001dfc2
c000810a:	e8 b4 81 00 00       	call   c00102c3 <KePanic(char const*)>
c000810f:	83 c4 10             	add    esp,0x10
c0008112:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008116:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0008119:	89 10                	mov    DWORD PTR [eax],edx
c000811b:	83 c4 1c             	add    esp,0x1c
c000811e:	31 c0                	xor    eax,eax
c0008120:	5b                   	pop    ebx
c0008121:	5e                   	pop    esi
c0008122:	5f                   	pop    edi
c0008123:	5d                   	pop    ebp
c0008124:	c3                   	ret    
c0008125:	90                   	nop

c0008126 <Pipe::Pipe(int)>:
c0008126:	83 ec 0c             	sub    esp,0xc
c0008129:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000812d:	83 ec 08             	sub    esp,0x8
c0008130:	6a 00                	push   0x0
c0008132:	50                   	push   eax
c0008133:	e8 82 0d 00 00       	call   c0008eba <UnixFile::UnixFile(int)>
c0008138:	83 c4 10             	add    esp,0x10
c000813b:	ba e8 df 01 c0       	mov    edx,0xc001dfe8
c0008140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008144:	89 10                	mov    DWORD PTR [eax],edx
c0008146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000814a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000814e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008155:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000815c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008160:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008167:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000816b:	83 ec 0c             	sub    esp,0xc
c000816e:	50                   	push   eax
c000816f:	e8 ad f6 ff ff       	call   c0007821 <malloc>
c0008174:	83 c4 10             	add    esp,0x10
c0008177:	89 c2                	mov    edx,eax
c0008179:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000817d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008184:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008188:	90                   	nop
c0008189:	83 c4 0c             	add    esp,0xc
c000818c:	c3                   	ret    
c000818d:	90                   	nop

c000818e <VgaText::isAtty()>:
c000818e:	b0 01                	mov    al,0x1
c0008190:	c3                   	ret    
c0008191:	90                   	nop

c0008192 <VgaText::~VgaText()>:
c0008192:	83 ec 0c             	sub    esp,0xc
c0008195:	ba 30 e0 01 c0       	mov    edx,0xc001e030
c000819a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000819e:	89 10                	mov    DWORD PTR [eax],edx
c00081a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081a4:	83 ec 0c             	sub    esp,0xc
c00081a7:	50                   	push   eax
c00081a8:	e8 ef 0e 00 00       	call   c000909c <UnixFile::~UnixFile()>
c00081ad:	83 c4 10             	add    esp,0x10
c00081b0:	90                   	nop
c00081b1:	83 c4 0c             	add    esp,0xc
c00081b4:	c3                   	ret    
c00081b5:	90                   	nop

c00081b6 <VgaText::~VgaText()>:
c00081b6:	83 ec 0c             	sub    esp,0xc
c00081b9:	83 ec 0c             	sub    esp,0xc
c00081bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081c0:	e8 cd ff ff ff       	call   c0008192 <VgaText::~VgaText()>
c00081c5:	83 c4 10             	add    esp,0x10
c00081c8:	83 ec 08             	sub    esp,0x8
c00081cb:	68 84 01 00 00       	push   0x184
c00081d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081d4:	e8 eb 22 00 00       	call   c000a4c4 <operator delete(void*, unsigned long)>
c00081d9:	83 c4 10             	add    esp,0x10
c00081dc:	83 c4 0c             	add    esp,0xc
c00081df:	c3                   	ret    

c00081e0 <VgaText::read(unsigned long long, void*, int*)>:
c00081e0:	83 ec 10             	sub    esp,0x10
c00081e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081e7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081ef:	e8 24 46 00 00       	call   c000c818 <readKeyboard(VgaText*, char*, unsigned long)>
c00081f4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00081f8:	89 02                	mov    DWORD PTR [edx],eax
c00081fa:	31 c0                	xor    eax,eax
c00081fc:	83 c4 1c             	add    esp,0x1c
c00081ff:	c3                   	ret    

c0008200 <setTerminalScrollLock(bool)>:
c0008200:	c3                   	ret    

c0008201 <doTerminalCycle()>:
c0008201:	c3                   	ret    

c0008202 <addToTerminalCycle(VgaText*)>:
c0008202:	c3                   	ret    

c0008203 <scrollTerminalScrollLock(int)>:
c0008203:	c3                   	ret    

c0008204 <VgaText::updateTitle()>:
c0008204:	c3                   	ret    
c0008205:	90                   	nop

c0008206 <VgaText::load()>:
c0008206:	c3                   	ret    
c0008207:	90                   	nop

c0008208 <VgaText::updateCursor()>:
c0008208:	83 ec 14             	sub    esp,0x14
c000820b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000820f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008212:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008215:	e8 a2 e1 00 00       	call   c00163bc <HalConsoleCursorUpdate(int, int)>
c000821a:	83 c4 1c             	add    esp,0x1c
c000821d:	c3                   	ret    

c000821e <VgaText::doANSI_SGR(int)>:
c000821e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008222:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008226:	85 d2                	test   edx,edx
c0008228:	75 0b                	jne    c0008235 <VgaText::doANSI_SGR(int)+0x17>
c000822a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000822d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008230:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008233:	eb 59                	jmp    c000828e <VgaText::doANSI_SGR(int)+0x70>
c0008235:	83 fa 07             	cmp    edx,0x7
c0008238:	75 0b                	jne    c0008245 <VgaText::doANSI_SGR(int)+0x27>
c000823a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000823d:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008240:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008243:	eb 49                	jmp    c000828e <VgaText::doANSI_SGR(int)+0x70>
c0008245:	83 fa 1b             	cmp    edx,0x1b
c0008248:	74 e0                	je     c000822a <VgaText::doANSI_SGR(int)+0xc>
c000824a:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000824d:	83 f9 07             	cmp    ecx,0x7
c0008250:	77 09                	ja     c000825b <VgaText::doANSI_SGR(int)+0x3d>
c0008252:	8b 14 8d 40 ff 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe00c0]
c0008259:	eb 20                	jmp    c000827b <VgaText::doANSI_SGR(int)+0x5d>
c000825b:	8d 4a d8             	lea    ecx,[edx-0x28]
c000825e:	83 f9 07             	cmp    ecx,0x7
c0008261:	77 09                	ja     c000826c <VgaText::doANSI_SGR(int)+0x4e>
c0008263:	8b 14 8d 40 ff 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe00c0]
c000826a:	eb 22                	jmp    c000828e <VgaText::doANSI_SGR(int)+0x70>
c000826c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000826f:	83 f9 07             	cmp    ecx,0x7
c0008272:	77 0b                	ja     c000827f <VgaText::doANSI_SGR(int)+0x61>
c0008274:	8b 14 95 f8 fd 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0208]
c000827b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000827e:	c3                   	ret    
c000827f:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008282:	83 f9 07             	cmp    ecx,0x7
c0008285:	77 0a                	ja     c0008291 <VgaText::doANSI_SGR(int)+0x73>
c0008287:	8b 14 95 d0 fd 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0230]
c000828e:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008291:	c3                   	ret    

c0008292 <VgaText::setDefaultBgColour(VgaColour)>:
c0008292:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008296:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000829a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000829d:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00082a0:	c3                   	ret    
c00082a1:	90                   	nop

c00082a2 <VgaText::setDefaultFgColour(VgaColour)>:
c00082a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00082aa:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00082ad:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00082b0:	c3                   	ret    
c00082b1:	90                   	nop

c00082b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00082b2:	53                   	push   ebx
c00082b3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00082b7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00082bb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00082bf:	51                   	push   ecx
c00082c0:	e8 cd ff ff ff       	call   c0008292 <VgaText::setDefaultBgColour(VgaColour)>
c00082c5:	58                   	pop    eax
c00082c6:	5a                   	pop    edx
c00082c7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00082cb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00082cf:	5b                   	pop    ebx
c00082d0:	eb d0                	jmp    c00082a2 <VgaText::setDefaultFgColour(VgaColour)>

c00082d2 <VgaText::setTitleTextColour(VgaColour)>:
c00082d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00082da:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00082dd:	c3                   	ret    

c00082de <VgaText::setTitleColour(VgaColour)>:
c00082de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00082e6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00082e9:	c3                   	ret    

c00082ea <VgaText::setTitle(char*)>:
c00082ea:	c3                   	ret    
c00082eb:	90                   	nop

c00082ec <VgaText::combineColours(unsigned char, unsigned char)>:
c00082ec:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00082f0:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00082f5:	83 e0 0f             	and    eax,0xf
c00082f8:	c1 e2 04             	shl    edx,0x4
c00082fb:	09 d0                	or     eax,edx
c00082fd:	c3                   	ret    

c00082fe <VgaText::scrollScreen()>:
c00082fe:	55                   	push   ebp
c00082ff:	b9 01 00 00 00       	mov    ecx,0x1
c0008304:	57                   	push   edi
c0008305:	56                   	push   esi
c0008306:	53                   	push   ebx
c0008307:	83 ec 0c             	sub    esp,0xc
c000830a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000830e:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0008314:	31 ff                	xor    edi,edi
c0008316:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008319:	83 f9 18             	cmp    ecx,0x18
c000831c:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000831f:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0008326:	75 27                	jne    c000834f <VgaText::scrollScreen()+0x51>
c0008328:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000832b:	01 f5                	add    ebp,esi
c000832d:	f7 c7 01 00 00 00    	test   edi,0x1
c0008333:	74 16                	je     c000834b <VgaText::scrollScreen()+0x4d>
c0008335:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008339:	50                   	push   eax
c000833a:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000833e:	50                   	push   eax
c000833f:	e8 a8 ff ff ff       	call   c00082ec <VgaText::combineColours(unsigned char, unsigned char)>
c0008344:	5a                   	pop    edx
c0008345:	5a                   	pop    edx
c0008346:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0008349:	eb 04                	jmp    c000834f <VgaText::scrollScreen()+0x51>
c000834b:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000834f:	47                   	inc    edi
c0008350:	46                   	inc    esi
c0008351:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008357:	75 bd                	jne    c0008316 <VgaText::scrollScreen()+0x18>
c0008359:	41                   	inc    ecx
c000835a:	83 f9 19             	cmp    ecx,0x19
c000835d:	75 af                	jne    c000830e <VgaText::scrollScreen()+0x10>
c000835f:	39 1d 04 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f04,ebx
c0008365:	75 1f                	jne    c0008386 <VgaText::scrollScreen()+0x88>
c0008367:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000836b:	74 05                	je     c0008372 <VgaText::scrollScreen()+0x74>
c000836d:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008370:	eb 14                	jmp    c0008386 <VgaText::scrollScreen()+0x88>
c0008372:	50                   	push   eax
c0008373:	50                   	push   eax
c0008374:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008378:	50                   	push   eax
c0008379:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000837d:	50                   	push   eax
c000837e:	e8 c5 de 00 00       	call   c0016248 <HalConsoleScroll(int, int)>
c0008383:	83 c4 10             	add    esp,0x10
c0008386:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000838a:	83 c4 0c             	add    esp,0xc
c000838d:	5b                   	pop    ebx
c000838e:	5e                   	pop    esi
c000838f:	5f                   	pop    edi
c0008390:	5d                   	pop    ebp
c0008391:	e9 72 fe ff ff       	jmp    c0008208 <VgaText::updateCursor()>

c0008396 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008396:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000839b:	c1 e0 08             	shl    eax,0x8
c000839e:	89 c2                	mov    edx,eax
c00083a0:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00083a5:	09 d0                	or     eax,edx
c00083a7:	c3                   	ret    

c00083a8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00083a8:	55                   	push   ebp
c00083a9:	57                   	push   edi
c00083aa:	56                   	push   esi
c00083ab:	53                   	push   ebx
c00083ac:	83 ec 1c             	sub    esp,0x1c
c00083af:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00083b3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00083b7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00083bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083bf:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00083c3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00083c7:	0f b6 c3             	movzx  eax,bl
c00083ca:	50                   	push   eax
c00083cb:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00083d0:	50                   	push   eax
c00083d1:	e8 16 ff ff ff       	call   c00082ec <VgaText::combineColours(unsigned char, unsigned char)>
c00083d6:	5a                   	pop    edx
c00083d7:	0f b6 c0             	movzx  eax,al
c00083da:	59                   	pop    ecx
c00083db:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00083e0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00083e4:	50                   	push   eax
c00083e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00083e9:	e8 a8 ff ff ff       	call   c0008396 <VgaText::combineCharAndColour(char, unsigned char)>
c00083ee:	5a                   	pop    edx
c00083ef:	66 6b d7 50          	imul   dx,di,0x50
c00083f3:	59                   	pop    ecx
c00083f4:	01 f2                	add    edx,esi
c00083f6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00083f9:	0f b7 d2             	movzx  edx,dx
c00083fc:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008400:	39 2d 04 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f04,ebp
c0008406:	75 28                	jne    c0008430 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c0008408:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000840c:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008410:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008414:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008418:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000841c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008420:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008424:	83 c4 1c             	add    esp,0x1c
c0008427:	5b                   	pop    ebx
c0008428:	5e                   	pop    esi
c0008429:	5f                   	pop    edi
c000842a:	5d                   	pop    ebp
c000842b:	e9 20 df 00 00       	jmp    c0016350 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008430:	83 c4 1c             	add    esp,0x1c
c0008433:	5b                   	pop    ebx
c0008434:	5e                   	pop    esi
c0008435:	5f                   	pop    edi
c0008436:	5d                   	pop    ebp
c0008437:	c3                   	ret    

c0008438 <VgaText::getCursorX()>:
c0008438:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000843c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000843f:	c3                   	ret    

c0008440 <VgaText::getCursorY()>:
c0008440:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008444:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008447:	c3                   	ret    

c0008448 <VgaText::setCursor(int, int)>:
c0008448:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000844c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008450:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008453:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008457:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000845a:	e9 a9 fd ff ff       	jmp    c0008208 <VgaText::updateCursor()>

c000845f <setActiveTerminal(VgaText*)>:
c000845f:	53                   	push   ebx
c0008460:	83 ec 08             	sub    esp,0x8
c0008463:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008467:	85 db                	test   ebx,ebx
c0008469:	75 11                	jne    c000847c <setActiveTerminal(VgaText*)+0x1d>
c000846b:	c7 44 24 10 fc df 01 c0 	mov    DWORD PTR [esp+0x10],0xc001dffc
c0008473:	83 c4 08             	add    esp,0x8
c0008476:	5b                   	pop    ebx
c0008477:	e9 47 7e 00 00       	jmp    c00102c3 <KePanic(char const*)>
c000847c:	a1 04 2f 02 c0       	mov    eax,ds:0xc0022f04
c0008481:	85 c0                	test   eax,eax
c0008483:	74 0c                	je     c0008491 <setActiveTerminal(VgaText*)+0x32>
c0008485:	83 ec 0c             	sub    esp,0xc
c0008488:	50                   	push   eax
c0008489:	e8 7a fd ff ff       	call   c0008208 <VgaText::updateCursor()>
c000848e:	83 c4 10             	add    esp,0x10
c0008491:	89 1d 04 2f 02 c0    	mov    DWORD PTR ds:0xc0022f04,ebx
c0008497:	50                   	push   eax
c0008498:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000849b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000849e:	53                   	push   ebx
c000849f:	e8 a4 ff ff ff       	call   c0008448 <VgaText::setCursor(int, int)>
c00084a4:	83 c4 18             	add    esp,0x18
c00084a7:	5b                   	pop    ebx
c00084a8:	c3                   	ret    
c00084a9:	90                   	nop

c00084aa <VgaText::clearScreen()>:
c00084aa:	57                   	push   edi
c00084ab:	56                   	push   esi
c00084ac:	31 f6                	xor    esi,esi
c00084ae:	53                   	push   ebx
c00084af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084b3:	52                   	push   edx
c00084b4:	6a 00                	push   0x0
c00084b6:	6a 00                	push   0x0
c00084b8:	53                   	push   ebx
c00084b9:	e8 8a ff ff ff       	call   c0008448 <VgaText::setCursor(int, int)>
c00084be:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00084c5:	83 c4 10             	add    esp,0x10
c00084c8:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00084cb:	7e 20                	jle    c00084ed <VgaText::clearScreen()+0x43>
c00084cd:	31 ff                	xor    edi,edi
c00084cf:	50                   	push   eax
c00084d0:	50                   	push   eax
c00084d1:	56                   	push   esi
c00084d2:	57                   	push   edi
c00084d3:	47                   	inc    edi
c00084d4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00084d7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00084da:	6a 20                	push   0x20
c00084dc:	53                   	push   ebx
c00084dd:	e8 c6 fe ff ff       	call   c00083a8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00084e2:	83 c4 20             	add    esp,0x20
c00084e5:	83 ff 50             	cmp    edi,0x50
c00084e8:	75 e5                	jne    c00084cf <VgaText::clearScreen()+0x25>
c00084ea:	46                   	inc    esi
c00084eb:	eb db                	jmp    c00084c8 <VgaText::clearScreen()+0x1e>
c00084ed:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00084f4:	5b                   	pop    ebx
c00084f5:	5e                   	pop    esi
c00084f6:	5f                   	pop    edi
c00084f7:	c3                   	ret    

c00084f8 <VgaText::setCursorX(int)>:
c00084f8:	83 ec 10             	sub    esp,0x10
c00084fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084ff:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008502:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008506:	50                   	push   eax
c0008507:	e8 3c ff ff ff       	call   c0008448 <VgaText::setCursor(int, int)>
c000850c:	83 c4 1c             	add    esp,0x1c
c000850f:	c3                   	ret    

c0008510 <VgaText::setCursorY(int)>:
c0008510:	83 ec 10             	sub    esp,0x10
c0008513:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008517:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000851b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000851e:	50                   	push   eax
c000851f:	e8 24 ff ff ff       	call   c0008448 <VgaText::setCursor(int, int)>
c0008524:	83 c4 1c             	add    esp,0x1c
c0008527:	c3                   	ret    

c0008528 <VgaText::incrementCursor(bool)>:
c0008528:	56                   	push   esi
c0008529:	53                   	push   ebx
c000852a:	51                   	push   ecx
c000852b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000852f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008533:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008536:	40                   	inc    eax
c0008537:	83 f8 50             	cmp    eax,0x50
c000853a:	74 05                	je     c0008541 <VgaText::incrementCursor(bool)+0x19>
c000853c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000853f:	eb 24                	jmp    c0008565 <VgaText::incrementCursor(bool)+0x3d>
c0008541:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008544:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000854b:	8d 50 01             	lea    edx,[eax+0x1]
c000854e:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008551:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008554:	75 0f                	jne    c0008565 <VgaText::incrementCursor(bool)+0x3d>
c0008556:	83 ec 0c             	sub    esp,0xc
c0008559:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000855c:	53                   	push   ebx
c000855d:	e8 9c fd ff ff       	call   c00082fe <VgaText::scrollScreen()>
c0008562:	83 c4 10             	add    esp,0x10
c0008565:	89 f0                	mov    eax,esi
c0008567:	84 c0                	test   al,al
c0008569:	74 0c                	je     c0008577 <VgaText::incrementCursor(bool)+0x4f>
c000856b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000856f:	5a                   	pop    edx
c0008570:	5b                   	pop    ebx
c0008571:	5e                   	pop    esi
c0008572:	e9 91 fc ff ff       	jmp    c0008208 <VgaText::updateCursor()>
c0008577:	58                   	pop    eax
c0008578:	5b                   	pop    ebx
c0008579:	5e                   	pop    esi
c000857a:	c3                   	ret    
c000857b:	90                   	nop

c000857c <VgaText::decrementCursor(bool)>:
c000857c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008580:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008584:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008587:	85 c0                	test   eax,eax
c0008589:	74 04                	je     c000858f <VgaText::decrementCursor(bool)+0x13>
c000858b:	48                   	dec    eax
c000858c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000858f:	84 c9                	test   cl,cl
c0008591:	74 09                	je     c000859c <VgaText::decrementCursor(bool)+0x20>
c0008593:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008597:	e9 6c fc ff ff       	jmp    c0008208 <VgaText::updateCursor()>
c000859c:	c3                   	ret    
c000859d:	90                   	nop

c000859e <VgaText::putchar(char, VgaColour, VgaColour)>:
c000859e:	53                   	push   ebx
c000859f:	83 ec 08             	sub    esp,0x8
c00085a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085a6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00085aa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00085ae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00085b2:	3c 07                	cmp    al,0x7
c00085b4:	75 21                	jne    c00085d7 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c00085b6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00085be:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00085c6:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00085ce:	83 c4 08             	add    esp,0x8
c00085d1:	5b                   	pop    ebx
c00085d2:	e9 38 2e 00 00       	jmp    c000b40f <Krnl::beep(int, int, bool)>
c00085d7:	3c 0d                	cmp    al,0xd
c00085d9:	75 09                	jne    c00085e4 <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c00085db:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00085e2:	eb 2c                	jmp    c0008610 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00085e4:	3c 0a                	cmp    al,0xa
c00085e6:	75 31                	jne    c0008619 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c00085e8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00085eb:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00085f2:	8d 50 01             	lea    edx,[eax+0x1]
c00085f5:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00085f8:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00085fb:	75 0f                	jne    c000860c <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c00085fd:	83 ec 0c             	sub    esp,0xc
c0008600:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008603:	53                   	push   ebx
c0008604:	e8 f5 fc ff ff       	call   c00082fe <VgaText::scrollScreen()>
c0008609:	83 c4 10             	add    esp,0x10
c000860c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008610:	83 c4 08             	add    esp,0x8
c0008613:	5b                   	pop    ebx
c0008614:	e9 ef fb ff ff       	jmp    c0008208 <VgaText::updateCursor()>
c0008619:	3c 08                	cmp    al,0x8
c000861b:	75 25                	jne    c0008642 <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c000861d:	50                   	push   eax
c000861e:	50                   	push   eax
c000861f:	6a 01                	push   0x1
c0008621:	53                   	push   ebx
c0008622:	e8 55 ff ff ff       	call   c000857c <VgaText::decrementCursor(bool)>
c0008627:	5a                   	pop    edx
c0008628:	59                   	pop    ecx
c0008629:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000862c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000862f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008632:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008635:	6a 20                	push   0x20
c0008637:	53                   	push   ebx
c0008638:	e8 6b fd ff ff       	call   c00083a8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000863d:	83 c4 28             	add    esp,0x28
c0008640:	5b                   	pop    ebx
c0008641:	c3                   	ret    
c0008642:	83 ec 08             	sub    esp,0x8
c0008645:	0f be c0             	movsx  eax,al
c0008648:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000864b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000864e:	51                   	push   ecx
c000864f:	52                   	push   edx
c0008650:	50                   	push   eax
c0008651:	53                   	push   ebx
c0008652:	e8 51 fd ff ff       	call   c00083a8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008657:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000865b:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008663:	83 c4 28             	add    esp,0x28
c0008666:	5b                   	pop    ebx
c0008667:	e9 bc fe ff ff       	jmp    c0008528 <VgaText::incrementCursor(bool)>

c000866c <VgaText::putchar(char)>:
c000866c:	56                   	push   esi
c000866d:	53                   	push   ebx
c000866e:	83 ec 14             	sub    esp,0x14
c0008671:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008675:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008679:	3c 5b                	cmp    al,0x5b
c000867b:	75 18                	jne    c0008695 <VgaText::putchar(char)+0x29>
c000867d:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008681:	74 1f                	je     c00086a2 <VgaText::putchar(char)+0x36>
c0008683:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008689:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008690:	e9 bd 00 00 00       	jmp    c0008752 <VgaText::putchar(char)+0xe6>
c0008695:	3c 1b                	cmp    al,0x1b
c0008697:	75 09                	jne    c00086a2 <VgaText::putchar(char)+0x36>
c0008699:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000869d:	e9 b0 00 00 00       	jmp    c0008752 <VgaText::putchar(char)+0xe6>
c00086a2:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00086a5:	84 c9                	test   cl,cl
c00086a7:	0f 84 92 00 00 00    	je     c000873f <VgaText::putchar(char)+0xd3>
c00086ad:	8d 50 c0             	lea    edx,[eax-0x40]
c00086b0:	80 fa 3e             	cmp    dl,0x3e
c00086b3:	77 76                	ja     c000872b <VgaText::putchar(char)+0xbf>
c00086b5:	3c 6d                	cmp    al,0x6d
c00086b7:	75 47                	jne    c0008700 <VgaText::putchar(char)+0x94>
c00086b9:	31 f6                	xor    esi,esi
c00086bb:	31 d2                	xor    edx,edx
c00086bd:	31 c0                	xor    eax,eax
c00086bf:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00086c2:	7e 2d                	jle    c00086f1 <VgaText::putchar(char)+0x85>
c00086c4:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00086c9:	80 fa 3b             	cmp    dl,0x3b
c00086cc:	75 17                	jne    c00086e5 <VgaText::putchar(char)+0x79>
c00086ce:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00086d2:	50                   	push   eax
c00086d3:	53                   	push   ebx
c00086d4:	e8 45 fb ff ff       	call   c000821e <VgaText::doANSI_SGR(int)>
c00086d9:	59                   	pop    ecx
c00086da:	31 d2                	xor    edx,edx
c00086dc:	58                   	pop    eax
c00086dd:	31 c0                	xor    eax,eax
c00086df:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00086e3:	eb 09                	jmp    c00086ee <VgaText::putchar(char)+0x82>
c00086e5:	6b c0 0a             	imul   eax,eax,0xa
c00086e8:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00086ec:	88 ca                	mov    dl,cl
c00086ee:	46                   	inc    esi
c00086ef:	eb ce                	jmp    c00086bf <VgaText::putchar(char)+0x53>
c00086f1:	84 d2                	test   dl,dl
c00086f3:	74 2e                	je     c0008723 <VgaText::putchar(char)+0xb7>
c00086f5:	50                   	push   eax
c00086f6:	53                   	push   ebx
c00086f7:	e8 22 fb ff ff       	call   c000821e <VgaText::doANSI_SGR(int)>
c00086fc:	58                   	pop    eax
c00086fd:	5a                   	pop    edx
c00086fe:	eb 23                	jmp    c0008723 <VgaText::putchar(char)+0xb7>
c0008700:	3c 4a                	cmp    al,0x4a
c0008702:	75 1f                	jne    c0008723 <VgaText::putchar(char)+0xb7>
c0008704:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008708:	75 19                	jne    c0008723 <VgaText::putchar(char)+0xb7>
c000870a:	83 ec 0c             	sub    esp,0xc
c000870d:	53                   	push   ebx
c000870e:	e8 97 fd ff ff       	call   c00084aa <VgaText::clearScreen()>
c0008713:	83 c4 0c             	add    esp,0xc
c0008716:	6a 00                	push   0x0
c0008718:	6a 00                	push   0x0
c000871a:	53                   	push   ebx
c000871b:	e8 28 fd ff ff       	call   c0008448 <VgaText::setCursor(int, int)>
c0008720:	83 c4 10             	add    esp,0x10
c0008723:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008729:	eb 27                	jmp    c0008752 <VgaText::putchar(char)+0xe6>
c000872b:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000872e:	83 fa 0e             	cmp    edx,0xe
c0008731:	7f 1f                	jg     c0008752 <VgaText::putchar(char)+0xe6>
c0008733:	8d 4a 01             	lea    ecx,[edx+0x1]
c0008736:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008739:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000873d:	eb 13                	jmp    c0008752 <VgaText::putchar(char)+0xe6>
c000873f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008742:	0f be c0             	movsx  eax,al
c0008745:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008748:	50                   	push   eax
c0008749:	53                   	push   ebx
c000874a:	e8 4f fe ff ff       	call   c000859e <VgaText::putchar(char, VgaColour, VgaColour)>
c000874f:	83 c4 10             	add    esp,0x10
c0008752:	83 c4 14             	add    esp,0x14
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <VgaText::putx(unsigned int)>:
c0008758:	57                   	push   edi
c0008759:	b9 11 00 00 00       	mov    ecx,0x11
c000875e:	56                   	push   esi
c000875f:	be 0a e0 01 c0       	mov    esi,0xc001e00a
c0008764:	53                   	push   ebx
c0008765:	83 ec 20             	sub    esp,0x20
c0008768:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000876c:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008770:	fc                   	cld    
c0008771:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008773:	be 08 00 00 00       	mov    esi,0x8
c0008778:	50                   	push   eax
c0008779:	50                   	push   eax
c000877a:	89 d8                	mov    eax,ebx
c000877c:	c1 e3 04             	shl    ebx,0x4
c000877f:	c1 e8 1c             	shr    eax,0x1c
c0008782:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008787:	50                   	push   eax
c0008788:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000878c:	e8 db fe ff ff       	call   c000866c <VgaText::putchar(char)>
c0008791:	83 c4 10             	add    esp,0x10
c0008794:	4e                   	dec    esi
c0008795:	75 e1                	jne    c0008778 <VgaText::putx(unsigned int)+0x20>
c0008797:	83 c4 20             	add    esp,0x20
c000879a:	5b                   	pop    ebx
c000879b:	5e                   	pop    esi
c000879c:	5f                   	pop    edi
c000879d:	c3                   	ret    

c000879e <VgaText::puts(char const*)>:
c000879e:	53                   	push   ebx
c000879f:	83 ec 08             	sub    esp,0x8
c00087a2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00087a6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00087a9:	84 c0                	test   al,al
c00087ab:	74 12                	je     c00087bf <VgaText::puts(char const*)+0x21>
c00087ad:	43                   	inc    ebx
c00087ae:	51                   	push   ecx
c00087af:	51                   	push   ecx
c00087b0:	50                   	push   eax
c00087b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00087b5:	e8 b2 fe ff ff       	call   c000866c <VgaText::putchar(char)>
c00087ba:	83 c4 10             	add    esp,0x10
c00087bd:	eb e7                	jmp    c00087a6 <VgaText::puts(char const*)+0x8>
c00087bf:	83 c4 08             	add    esp,0x8
c00087c2:	5b                   	pop    ebx
c00087c3:	c3                   	ret    

c00087c4 <VgaText::write(unsigned long long, void*, int*)>:
c00087c4:	55                   	push   ebp
c00087c5:	57                   	push   edi
c00087c6:	56                   	push   esi
c00087c7:	53                   	push   ebx
c00087c8:	83 ec 0c             	sub    esp,0xc
c00087cb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00087cf:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00087d3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00087d7:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00087de:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00087e1:	39 eb                	cmp    ebx,ebp
c00087e3:	74 13                	je     c00087f8 <VgaText::write(unsigned long long, void*, int*)+0x34>
c00087e5:	43                   	inc    ebx
c00087e6:	50                   	push   eax
c00087e7:	50                   	push   eax
c00087e8:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00087ec:	50                   	push   eax
c00087ed:	56                   	push   esi
c00087ee:	e8 79 fe ff ff       	call   c000866c <VgaText::putchar(char)>
c00087f3:	83 c4 10             	add    esp,0x10
c00087f6:	eb e9                	jmp    c00087e1 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00087f8:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c00087ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008803:	89 38                	mov    DWORD PTR [eax],edi
c0008805:	83 c4 0c             	add    esp,0xc
c0008808:	31 c0                	xor    eax,eax
c000880a:	5b                   	pop    ebx
c000880b:	5e                   	pop    esi
c000880c:	5f                   	pop    edi
c000880d:	5d                   	pop    ebp
c000880e:	c3                   	ret    
c000880f:	90                   	nop

c0008810 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008810:	55                   	push   ebp
c0008811:	57                   	push   edi
c0008812:	56                   	push   esi
c0008813:	53                   	push   ebx
c0008814:	83 ec 0c             	sub    esp,0xc
c0008817:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000881b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008820:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008827:	50                   	push   eax
c0008828:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000882d:	50                   	push   eax
c000882e:	e8 b9 fa ff ff       	call   c00082ec <VgaText::combineColours(unsigned char, unsigned char)>
c0008833:	5a                   	pop    edx
c0008834:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008839:	59                   	pop    ecx
c000883a:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000883d:	89 c5                	mov    ebp,eax
c000883f:	0f b7 f6             	movzx  esi,si
c0008842:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008846:	01 f6                	add    esi,esi
c0008848:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000884b:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000884e:	84 c0                	test   al,al
c0008850:	0f 84 f4 00 00 00    	je     c000894a <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0008856:	3c 0d                	cmp    al,0xd
c0008858:	75 0c                	jne    c0008866 <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c000885a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008861:	e9 de 00 00 00       	jmp    c0008944 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008866:	3c 0a                	cmp    al,0xa
c0008868:	75 45                	jne    c00088af <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c000886a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000886d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008874:	8d 48 01             	lea    ecx,[eax+0x1]
c0008877:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000887a:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000887d:	75 0f                	jne    c000888e <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c000887f:	83 ec 0c             	sub    esp,0xc
c0008882:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008885:	53                   	push   ebx
c0008886:	e8 73 fa ff ff       	call   c00082fe <VgaText::scrollScreen()>
c000888b:	83 c4 10             	add    esp,0x10
c000888e:	83 ec 0c             	sub    esp,0xc
c0008891:	53                   	push   ebx
c0008892:	e8 71 f9 ff ff       	call   c0008208 <VgaText::updateCursor()>
c0008897:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000889c:	83 c4 10             	add    esp,0x10
c000889f:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00088a2:	0f b7 f6             	movzx  esi,si
c00088a5:	01 f6                	add    esi,esi
c00088a7:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088aa:	e9 95 00 00 00       	jmp    c0008944 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088af:	3c 08                	cmp    al,0x8
c00088b1:	75 35                	jne    c00088e8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c00088b3:	51                   	push   ecx
c00088b4:	51                   	push   ecx
c00088b5:	6a 01                	push   0x1
c00088b7:	53                   	push   ebx
c00088b8:	e8 bf fc ff ff       	call   c000857c <VgaText::decrementCursor(bool)>
c00088bd:	5e                   	pop    esi
c00088be:	58                   	pop    eax
c00088bf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088c2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088c5:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00088c8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00088cb:	6a 20                	push   0x20
c00088cd:	53                   	push   ebx
c00088ce:	e8 d5 fa ff ff       	call   c00083a8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00088d3:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088d8:	83 c4 20             	add    esp,0x20
c00088db:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00088de:	0f b7 f6             	movzx  esi,si
c00088e1:	01 f6                	add    esi,esi
c00088e3:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088e6:	eb 5c                	jmp    c0008944 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088e8:	52                   	push   edx
c00088e9:	52                   	push   edx
c00088ea:	89 ea                	mov    edx,ebp
c00088ec:	0f b6 ca             	movzx  ecx,dl
c00088ef:	51                   	push   ecx
c00088f0:	50                   	push   eax
c00088f1:	e8 a0 fa ff ff       	call   c0008396 <VgaText::combineCharAndColour(char, unsigned char)>
c00088f6:	83 c4 10             	add    esp,0x10
c00088f9:	66 89 06             	mov    WORD PTR [esi],ax
c00088fc:	39 1d 04 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f04,ebx
c0008902:	75 1d                	jne    c0008921 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c0008904:	83 ec 0c             	sub    esp,0xc
c0008907:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000890a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000890d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008911:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008915:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008918:	50                   	push   eax
c0008919:	e8 32 da 00 00       	call   c0016350 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000891e:	83 c4 20             	add    esp,0x20
c0008921:	83 c6 02             	add    esi,0x2
c0008924:	50                   	push   eax
c0008925:	50                   	push   eax
c0008926:	6a 00                	push   0x0
c0008928:	53                   	push   ebx
c0008929:	e8 fa fb ff ff       	call   c0008528 <VgaText::incrementCursor(bool)>
c000892e:	83 c4 10             	add    esp,0x10
c0008931:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008935:	75 0d                	jne    c0008944 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008937:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000893c:	0f b7 f6             	movzx  esi,si
c000893f:	01 f6                	add    esi,esi
c0008941:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008944:	47                   	inc    edi
c0008945:	e9 01 ff ff ff       	jmp    c000884b <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c000894a:	83 ec 0c             	sub    esp,0xc
c000894d:	53                   	push   ebx
c000894e:	e8 b5 f8 ff ff       	call   c0008208 <VgaText::updateCursor()>
c0008953:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000895a:	83 c4 1c             	add    esp,0x1c
c000895d:	5b                   	pop    ebx
c000895e:	5e                   	pop    esi
c000895f:	5f                   	pop    edi
c0008960:	5d                   	pop    ebp
c0008961:	c3                   	ret    

c0008962 <VgaText::VgaText(char const*)>:
c0008962:	56                   	push   esi
c0008963:	53                   	push   ebx
c0008964:	83 ec 04             	sub    esp,0x4
c0008967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000896b:	83 ec 08             	sub    esp,0x8
c000896e:	6a 00                	push   0x0
c0008970:	50                   	push   eax
c0008971:	e8 44 05 00 00       	call   c0008eba <UnixFile::UnixFile(int)>
c0008976:	83 c4 10             	add    esp,0x10
c0008979:	ba 30 e0 01 c0       	mov    edx,0xc001e030
c000897e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008982:	89 10                	mov    DWORD PTR [eax],edx
c0008984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008988:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000898f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008993:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000899a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000899e:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00089a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089a6:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00089aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089ae:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00089b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089b9:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00089c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089c4:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00089cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089cf:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00089d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089da:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c00089e1:	83 ec 0c             	sub    esp,0xc
c00089e4:	6a 01                	push   0x1
c00089e6:	e8 12 09 00 00       	call   c00092fd <Virt::allocateKernelVirtualPages(int)>
c00089eb:	83 c4 10             	add    esp,0x10
c00089ee:	89 c2                	mov    edx,eax
c00089f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089f4:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00089f7:	8b 1d b0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb0
c00089fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a01:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008a04:	89 c6                	mov    esi,eax
c0008a06:	e8 f2 f0 ff ff       	call   c0007afd <Phys::allocatePage()>
c0008a0b:	68 05 0c 00 00       	push   0xc05
c0008a10:	56                   	push   esi
c0008a11:	50                   	push   eax
c0008a12:	53                   	push   ebx
c0008a13:	e8 a8 0f 00 00       	call   c00099c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008a18:	83 c4 10             	add    esp,0x10
c0008a1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a1f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008a22:	83 ec 04             	sub    esp,0x4
c0008a25:	68 a0 0f 00 00       	push   0xfa0
c0008a2a:	6a 00                	push   0x0
c0008a2c:	50                   	push   eax
c0008a2d:	e8 9e 7a ff ff       	call   c00004d0 <memset>
c0008a32:	83 c4 10             	add    esp,0x10
c0008a35:	83 ec 04             	sub    esp,0x4
c0008a38:	6a 00                	push   0x0
c0008a3a:	6a 07                	push   0x7
c0008a3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a40:	e8 6d f8 ff ff       	call   c00082b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008a45:	83 c4 10             	add    esp,0x10
c0008a48:	83 ec 04             	sub    esp,0x4
c0008a4b:	6a 00                	push   0x0
c0008a4d:	6a 00                	push   0x0
c0008a4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a53:	e8 f0 f9 ff ff       	call   c0008448 <VgaText::setCursor(int, int)>
c0008a58:	83 c4 10             	add    esp,0x10
c0008a5b:	83 ec 0c             	sub    esp,0xc
c0008a5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a62:	e8 43 fa ff ff       	call   c00084aa <VgaText::clearScreen()>
c0008a67:	83 c4 10             	add    esp,0x10
c0008a6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a6e:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008a72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a76:	05 82 00 00 00       	add    eax,0x82
c0008a7b:	83 ec 04             	sub    esp,0x4
c0008a7e:	68 80 00 00 00       	push   0x80
c0008a83:	6a 00                	push   0x0
c0008a85:	50                   	push   eax
c0008a86:	e8 45 7a ff ff       	call   c00004d0 <memset>
c0008a8b:	83 c4 10             	add    esp,0x10
c0008a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a92:	05 02 01 00 00       	add    eax,0x102
c0008a97:	83 ec 04             	sub    esp,0x4
c0008a9a:	68 80 00 00 00       	push   0x80
c0008a9f:	6a 00                	push   0x0
c0008aa1:	50                   	push   eax
c0008aa2:	e8 29 7a ff ff       	call   c00004d0 <memset>
c0008aa7:	83 c4 10             	add    esp,0x10
c0008aaa:	90                   	nop
c0008aab:	83 c4 04             	add    esp,0x4
c0008aae:	5b                   	pop    ebx
c0008aaf:	5e                   	pop    esi
c0008ab0:	c3                   	ret    
c0008ab1:	90                   	nop

c0008ab2 <VgaText::receiveKey(unsigned char)>:
c0008ab2:	55                   	push   ebp
c0008ab3:	57                   	push   edi
c0008ab4:	56                   	push   esi
c0008ab5:	53                   	push   ebx
c0008ab6:	83 ec 1c             	sub    esp,0x1c
c0008ab9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0008abd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008ac1:	89 f0                	mov    eax,esi
c0008ac3:	84 c0                	test   al,al
c0008ac5:	0f 84 47 01 00 00    	je     c0008c12 <VgaText::receiveKey(unsigned char)+0x160>
c0008acb:	8d bb 82 00 00 00    	lea    edi,[ebx+0x82]
c0008ad1:	3c 08                	cmp    al,0x8
c0008ad3:	75 6b                	jne    c0008b40 <VgaText::receiveKey(unsigned char)+0x8e>
c0008ad5:	83 ec 0c             	sub    esp,0xc
c0008ad8:	57                   	push   edi
c0008ad9:	e8 62 7a ff ff       	call   c0000540 <strlen>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	85 c0                	test   eax,eax
c0008ae3:	0f 84 ee 00 00 00    	je     c0008bd7 <VgaText::receiveKey(unsigned char)+0x125>
c0008ae9:	50                   	push   eax
c0008aea:	50                   	push   eax
c0008aeb:	6a 08                	push   0x8
c0008aed:	53                   	push   ebx
c0008aee:	e8 79 fb ff ff       	call   c000866c <VgaText::putchar(char)>
c0008af3:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008af6:	e8 45 7a ff ff       	call   c0000540 <strlen>
c0008afb:	83 c4 10             	add    esp,0x10
c0008afe:	8a 84 03 81 00 00 00 	mov    al,BYTE PTR [ebx+eax*1+0x81]
c0008b05:	3c 0d                	cmp    al,0xd
c0008b07:	0f 95 c1             	setne  cl
c0008b0a:	3c 18                	cmp    al,0x18
c0008b0c:	0f 9e c2             	setle  dl
c0008b0f:	84 d1                	test   cl,dl
c0008b11:	74 17                	je     c0008b2a <VgaText::receiveKey(unsigned char)+0x78>
c0008b13:	83 e8 08             	sub    eax,0x8
c0008b16:	3c 02                	cmp    al,0x2
c0008b18:	76 10                	jbe    c0008b2a <VgaText::receiveKey(unsigned char)+0x78>
c0008b1a:	55                   	push   ebp
c0008b1b:	55                   	push   ebp
c0008b1c:	68 1b e0 01 c0       	push   0xc001e01b
c0008b21:	53                   	push   ebx
c0008b22:	e8 77 fc ff ff       	call   c000879e <VgaText::puts(char const*)>
c0008b27:	83 c4 10             	add    esp,0x10
c0008b2a:	83 ec 0c             	sub    esp,0xc
c0008b2d:	57                   	push   edi
c0008b2e:	e8 0d 7a ff ff       	call   c0000540 <strlen>
c0008b33:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008b3b:	e9 94 00 00 00       	jmp    c0008bd4 <VgaText::receiveKey(unsigned char)+0x122>
c0008b40:	83 ec 0c             	sub    esp,0xc
c0008b43:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008b49:	50                   	push   eax
c0008b4a:	e8 f1 79 ff ff       	call   c0000540 <strlen>
c0008b4f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b52:	89 c5                	mov    ebp,eax
c0008b54:	e8 e7 79 ff ff       	call   c0000540 <strlen>
c0008b59:	83 c4 10             	add    esp,0x10
c0008b5c:	8d 44 05 03          	lea    eax,[ebp+eax*1+0x3]
c0008b60:	3d 80 00 00 00       	cmp    eax,0x80
c0008b65:	0f 87 a7 00 00 00    	ja     c0008c12 <VgaText::receiveKey(unsigned char)+0x160>
c0008b6b:	89 f0                	mov    eax,esi
c0008b6d:	3c 18                	cmp    al,0x18
c0008b6f:	0f 96 c2             	setbe  dl
c0008b72:	3c 0d                	cmp    al,0xd
c0008b74:	0f 95 c0             	setne  al
c0008b77:	84 c2                	test   dl,al
c0008b79:	74 30                	je     c0008bab <VgaText::receiveKey(unsigned char)+0xf9>
c0008b7b:	8d 46 f7             	lea    eax,[esi-0x9]
c0008b7e:	3c 01                	cmp    al,0x1
c0008b80:	76 29                	jbe    c0008bab <VgaText::receiveKey(unsigned char)+0xf9>
c0008b82:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008b85:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008b88:	68 21 e0 01 c0       	push   0xc001e021
c0008b8d:	53                   	push   ebx
c0008b8e:	e8 7d fc ff ff       	call   c0008810 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008b93:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008b96:	8d 46 40             	lea    eax,[esi+0x40]
c0008b99:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008b9c:	0f b6 c0             	movzx  eax,al
c0008b9f:	50                   	push   eax
c0008ba0:	53                   	push   ebx
c0008ba1:	e8 f8 f9 ff ff       	call   c000859e <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ba6:	83 c4 20             	add    esp,0x20
c0008ba9:	eb 11                	jmp    c0008bbc <VgaText::receiveKey(unsigned char)+0x10a>
c0008bab:	89 f0                	mov    eax,esi
c0008bad:	51                   	push   ecx
c0008bae:	0f be c0             	movsx  eax,al
c0008bb1:	51                   	push   ecx
c0008bb2:	50                   	push   eax
c0008bb3:	53                   	push   ebx
c0008bb4:	e8 b3 fa ff ff       	call   c000866c <VgaText::putchar(char)>
c0008bb9:	83 c4 10             	add    esp,0x10
c0008bbc:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008bc1:	89 f0                	mov    eax,esi
c0008bc3:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0008bc7:	52                   	push   edx
c0008bc8:	52                   	push   edx
c0008bc9:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008bcd:	50                   	push   eax
c0008bce:	57                   	push   edi
c0008bcf:	e8 ec 7b ff ff       	call   c00007c0 <strcat>
c0008bd4:	83 c4 10             	add    esp,0x10
c0008bd7:	89 f0                	mov    eax,esi
c0008bd9:	3c 03                	cmp    al,0x3
c0008bdb:	0f 94 c2             	sete   dl
c0008bde:	3c 0a                	cmp    al,0xa
c0008be0:	0f 94 c0             	sete   al
c0008be3:	08 c2                	or     dl,al
c0008be5:	75 09                	jne    c0008bf0 <VgaText::receiveKey(unsigned char)+0x13e>
c0008be7:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008bee:	74 22                	je     c0008c12 <VgaText::receiveKey(unsigned char)+0x160>
c0008bf0:	81 c3 02 01 00 00    	add    ebx,0x102
c0008bf6:	50                   	push   eax
c0008bf7:	50                   	push   eax
c0008bf8:	57                   	push   edi
c0008bf9:	53                   	push   ebx
c0008bfa:	e8 c1 7b ff ff       	call   c00007c0 <strcat>
c0008bff:	83 c4 0c             	add    esp,0xc
c0008c02:	68 80 00 00 00       	push   0x80
c0008c07:	6a 00                	push   0x0
c0008c09:	57                   	push   edi
c0008c0a:	e8 c1 78 ff ff       	call   c00004d0 <memset>
c0008c0f:	83 c4 10             	add    esp,0x10
c0008c12:	83 c4 1c             	add    esp,0x1c
c0008c15:	5b                   	pop    ebx
c0008c16:	5e                   	pop    esi
c0008c17:	5f                   	pop    edi
c0008c18:	5d                   	pop    ebp
c0008c19:	c3                   	ret    

c0008c1a <VgaText::doUpdate()>:
c0008c1a:	c3                   	ret    

c0008c1b <newTerminal(char*)>:
c0008c1b:	83 ec 28             	sub    esp,0x28
c0008c1e:	68 84 01 00 00       	push   0x184
c0008c23:	e8 f9 eb ff ff       	call   c0007821 <malloc>
c0008c28:	5a                   	pop    edx
c0008c29:	59                   	pop    ecx
c0008c2a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008c2e:	50                   	push   eax
c0008c2f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008c33:	e8 2a fd ff ff       	call   c0008962 <VgaText::VgaText(char const*)>
c0008c38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c3c:	83 c4 2c             	add    esp,0x2c
c0008c3f:	c3                   	ret    

c0008c40 <TSS::TSS()>:
c0008c40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008c44:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008c4b:	90                   	nop
c0008c4c:	c3                   	ret    
c0008c4d:	90                   	nop
c0008c4e:	66 90                	xchg   ax,ax

c0008c50 <TSS::setESP(unsigned long)>:
c0008c50:	55                   	push   ebp
c0008c51:	89 e5                	mov    ebp,esp
c0008c53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c59:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008c5c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c5f:	90                   	nop
c0008c60:	5d                   	pop    ebp
c0008c61:	c3                   	ret    
c0008c62:	66 90                	xchg   ax,ax

c0008c64 <TSS::flush()>:
c0008c64:	55                   	push   ebp
c0008c65:	89 e5                	mov    ebp,esp
c0008c67:	83 ec 10             	sub    esp,0x10
c0008c6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0008c6f:	83 c8 03             	or     eax,0x3
c0008c72:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008c76:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008c7a:	66 89 d0             	mov    ax,dx
c0008c7d:	0f 00 d8             	ltr    ax
c0008c80:	90                   	nop
c0008c81:	c9                   	leave  
c0008c82:	c3                   	ret    
c0008c83:	90                   	nop

c0008c84 <TSS::setup(unsigned long, unsigned long)>:
c0008c84:	55                   	push   ebp
c0008c85:	89 e5                	mov    ebp,esp
c0008c87:	83 ec 18             	sub    esp,0x18
c0008c8a:	83 ec 0c             	sub    esp,0xc
c0008c8d:	6a 68                	push   0x68
c0008c8f:	e8 8d eb ff ff       	call   c0007821 <malloc>
c0008c94:	83 c4 10             	add    esp,0x10
c0008c97:	89 c2                	mov    edx,eax
c0008c99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c9c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ca2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ca5:	83 ec 04             	sub    esp,0x4
c0008ca8:	6a 68                	push   0x68
c0008caa:	6a 00                	push   0x0
c0008cac:	50                   	push   eax
c0008cad:	e8 1e 78 ff ff       	call   c00004d0 <memset>
c0008cb2:	83 c4 10             	add    esp,0x10
c0008cb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cbb:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008cc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cc7:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008ccd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cd0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cd3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008cd6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008cd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cdc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cdf:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008ce5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ce8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ceb:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008cf1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cf4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cf7:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008cfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d03:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008d09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d0f:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008d15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d1b:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008d21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d27:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008d2a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008d2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d30:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d33:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008d36:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008d39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d3f:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008d46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d49:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d4c:	0f 20 da             	mov    edx,cr3
c0008d4f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008d52:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008d55:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008d58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d5e:	83 ec 08             	sub    esp,0x8
c0008d61:	50                   	push   eax
c0008d62:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008d65:	50                   	push   eax
c0008d66:	e8 3b e3 ff ff       	call   c00070a6 <GDTEntry::setBase(unsigned int)>
c0008d6b:	83 c4 10             	add    esp,0x10
c0008d6e:	83 ec 08             	sub    esp,0x8
c0008d71:	6a 68                	push   0x68
c0008d73:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008d76:	50                   	push   eax
c0008d77:	e8 46 e3 ff ff       	call   c00070c2 <GDTEntry::setLimit(unsigned int)>
c0008d7c:	83 c4 10             	add    esp,0x10
c0008d7f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008d83:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d86:	83 e0 0f             	and    eax,0xf
c0008d89:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d8c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d8f:	83 c8 40             	or     eax,0x40
c0008d92:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d95:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0008d9a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008da0:	05 78 01 00 00       	add    eax,0x178
c0008da5:	83 ec 04             	sub    esp,0x4
c0008da8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008dab:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008dae:	50                   	push   eax
c0008daf:	e8 42 e3 ff ff       	call   c00070f6 <GDT::addEntry(GDTEntry)>
c0008db4:	83 c4 10             	add    esp,0x10
c0008db7:	89 c2                	mov    edx,eax
c0008db9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008dbc:	89 10                	mov    DWORD PTR [eax],edx
c0008dbe:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0008dc3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008dc9:	05 78 01 00 00       	add    eax,0x178
c0008dce:	83 ec 0c             	sub    esp,0xc
c0008dd1:	50                   	push   eax
c0008dd2:	e8 49 e3 ff ff       	call   c0007120 <GDT::flush()>
c0008dd7:	83 c4 10             	add    esp,0x10
c0008dda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ddd:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ddf:	c9                   	leave  
c0008de0:	c3                   	ret    
c0008de1:	90                   	nop

c0008de2 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008de2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008de6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008dea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ded:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008df2:	75 08                	jne    c0008dfc <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008df4:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008dfa:	eb 38                	jmp    c0008e34 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008dfc:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008e01:	75 17                	jne    c0008e1a <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008e03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008e08:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008e0b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008e11:	8b 10                	mov    edx,DWORD PTR [eax]
c0008e13:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e17:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008e1a:	89 c1                	mov    ecx,eax
c0008e1c:	83 e1 fd             	and    ecx,0xfffffffd
c0008e1f:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008e25:	74 cd                	je     c0008df4 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008e27:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008e2c:	83 e0 ef             	and    eax,0xffffffef
c0008e2f:	83 f8 08             	cmp    eax,0x8
c0008e32:	76 c0                	jbe    c0008df4 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008e34:	31 c0                	xor    eax,eax
c0008e36:	c3                   	ret    
c0008e37:	90                   	nop

c0008e38 <ReservedFilename::isAtty()>:
c0008e38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e3c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e3f:	31 c0                	xor    eax,eax
c0008e41:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008e47:	74 09                	je     c0008e52 <ReservedFilename::isAtty()+0x1a>
c0008e49:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008e4f:	0f 94 c0             	sete   al
c0008e52:	c3                   	ret    
c0008e53:	90                   	nop

c0008e54 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008e54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e58:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008e5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e5f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008e63:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008e68:	75 08                	jne    c0008e72 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008e6a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008e70:	eb 3d                	jmp    c0008eaf <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008e72:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008e77:	75 17                	jne    c0008e90 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008e79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008e7e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008e81:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008e87:	8b 10                	mov    edx,DWORD PTR [eax]
c0008e89:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e8d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008e90:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008e95:	75 04                	jne    c0008e9b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008e97:	89 0a                	mov    DWORD PTR [edx],ecx
c0008e99:	eb 14                	jmp    c0008eaf <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008e9b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008ea0:	74 c8                	je     c0008e6a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008ea2:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008ea7:	83 e0 ef             	and    eax,0xffffffef
c0008eaa:	83 f8 08             	cmp    eax,0x8
c0008ead:	76 bb                	jbe    c0008e6a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008eaf:	31 c0                	xor    eax,eax
c0008eb1:	c3                   	ret    

c0008eb2 <UnixFile::getFileDescriptor()>:
c0008eb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008eb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008eb9:	c3                   	ret    

c0008eba <UnixFile::UnixFile(int)>:
c0008eba:	53                   	push   ebx
c0008ebb:	83 ec 28             	sub    esp,0x28
c0008ebe:	ba f8 e0 01 c0       	mov    edx,0xc001e0f8
c0008ec3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008ec7:	89 10                	mov    DWORD PTR [eax],edx
c0008ec9:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008ed1:	0f 8f 8c 01 00 00    	jg     c0009063 <UnixFile::UnixFile(int)+0x1a9>
c0008ed7:	a1 80 ff 01 c0       	mov    eax,ds:0xc001ff80
c0008edc:	8d 50 01             	lea    edx,[eax+0x1]
c0008edf:	89 15 80 ff 01 c0    	mov    DWORD PTR ds:0xc001ff80,edx
c0008ee5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008ee9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008eec:	83 ec 08             	sub    esp,0x8
c0008eef:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008ef3:	68 98 2f 02 c0       	push   0xc0022f98
c0008ef8:	e8 0b 3d 01 00       	call   c001cc08 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008efd:	83 c4 10             	add    esp,0x10
c0008f00:	a0 94 2f 02 c0       	mov    al,ds:0xc0022f94
c0008f05:	83 f0 01             	xor    eax,0x1
c0008f08:	84 c0                	test   al,al
c0008f0a:	0f 84 54 01 00 00    	je     c0009064 <UnixFile::UnixFile(int)+0x1aa>
c0008f10:	c6 05 94 2f 02 c0 01 	mov    BYTE PTR ds:0xc0022f94,0x1
c0008f17:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008f1f:	83 ec 0c             	sub    esp,0xc
c0008f22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008f26:	e8 f6 e8 ff ff       	call   c0007821 <malloc>
c0008f2b:	83 c4 10             	add    esp,0x10
c0008f2e:	89 c3                	mov    ebx,eax
c0008f30:	83 ec 08             	sub    esp,0x8
c0008f33:	68 03 ff ff 0f       	push   0xfffff03
c0008f38:	53                   	push   ebx
c0008f39:	e8 2c 01 00 00       	call   c000906a <ReservedFilename::ReservedFilename(int)>
c0008f3e:	83 c4 10             	add    esp,0x10
c0008f41:	89 1d 8c 2f 02 c0    	mov    DWORD PTR ds:0xc0022f8c,ebx
c0008f47:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008f4f:	83 ec 0c             	sub    esp,0xc
c0008f52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f56:	e8 c6 e8 ff ff       	call   c0007821 <malloc>
c0008f5b:	83 c4 10             	add    esp,0x10
c0008f5e:	89 c3                	mov    ebx,eax
c0008f60:	83 ec 08             	sub    esp,0x8
c0008f63:	68 01 ff ff 0f       	push   0xfffff01
c0008f68:	53                   	push   ebx
c0008f69:	e8 fc 00 00 00       	call   c000906a <ReservedFilename::ReservedFilename(int)>
c0008f6e:	83 c4 10             	add    esp,0x10
c0008f71:	89 1d 90 2f 02 c0    	mov    DWORD PTR ds:0xc0022f90,ebx
c0008f77:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008f7f:	83 ec 0c             	sub    esp,0xc
c0008f82:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f86:	e8 96 e8 ff ff       	call   c0007821 <malloc>
c0008f8b:	83 c4 10             	add    esp,0x10
c0008f8e:	89 c3                	mov    ebx,eax
c0008f90:	83 ec 08             	sub    esp,0x8
c0008f93:	68 00 ff ff 0f       	push   0xfffff00
c0008f98:	53                   	push   ebx
c0008f99:	e8 cc 00 00 00       	call   c000906a <ReservedFilename::ReservedFilename(int)>
c0008f9e:	83 c4 10             	add    esp,0x10
c0008fa1:	89 1d 84 2f 02 c0    	mov    DWORD PTR ds:0xc0022f84,ebx
c0008fa7:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008faf:	83 ec 0c             	sub    esp,0xc
c0008fb2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008fb6:	e8 66 e8 ff ff       	call   c0007821 <malloc>
c0008fbb:	83 c4 10             	add    esp,0x10
c0008fbe:	89 c3                	mov    ebx,eax
c0008fc0:	83 ec 08             	sub    esp,0x8
c0008fc3:	68 02 ff ff 0f       	push   0xfffff02
c0008fc8:	53                   	push   ebx
c0008fc9:	e8 9c 00 00 00       	call   c000906a <ReservedFilename::ReservedFilename(int)>
c0008fce:	83 c4 10             	add    esp,0x10
c0008fd1:	89 1d 88 2f 02 c0    	mov    DWORD PTR ds:0xc0022f88,ebx
c0008fd7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008fdf:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008fe4:	7f 7e                	jg     c0009064 <UnixFile::UnixFile(int)+0x1aa>
c0008fe6:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0008fee:	83 ec 0c             	sub    esp,0xc
c0008ff1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008ff5:	e8 27 e8 ff ff       	call   c0007821 <malloc>
c0008ffa:	83 c4 10             	add    esp,0x10
c0008ffd:	89 c3                	mov    ebx,eax
c0008fff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009003:	05 10 ff ff 0f       	add    eax,0xfffff10
c0009008:	83 ec 08             	sub    esp,0x8
c000900b:	50                   	push   eax
c000900c:	53                   	push   ebx
c000900d:	e8 58 00 00 00       	call   c000906a <ReservedFilename::ReservedFilename(int)>
c0009012:	83 c4 10             	add    esp,0x10
c0009015:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009019:	89 1c 85 60 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd0a0],ebx
c0009020:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009028:	83 ec 0c             	sub    esp,0xc
c000902b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000902f:	e8 ed e7 ff ff       	call   c0007821 <malloc>
c0009034:	83 c4 10             	add    esp,0x10
c0009037:	89 c3                	mov    ebx,eax
c0009039:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000903d:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009042:	83 ec 08             	sub    esp,0x8
c0009045:	50                   	push   eax
c0009046:	53                   	push   ebx
c0009047:	e8 1e 00 00 00       	call   c000906a <ReservedFilename::ReservedFilename(int)>
c000904c:	83 c4 10             	add    esp,0x10
c000904f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009053:	89 1c 85 20 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd0e0],ebx
c000905a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000905e:	e9 7c ff ff ff       	jmp    c0008fdf <UnixFile::UnixFile(int)+0x125>
c0009063:	90                   	nop
c0009064:	83 c4 28             	add    esp,0x28
c0009067:	5b                   	pop    ebx
c0009068:	c3                   	ret    
c0009069:	90                   	nop

c000906a <ReservedFilename::ReservedFilename(int)>:
c000906a:	83 ec 0c             	sub    esp,0xc
c000906d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009071:	83 ec 08             	sub    esp,0x8
c0009074:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009078:	50                   	push   eax
c0009079:	e8 3c fe ff ff       	call   c0008eba <UnixFile::UnixFile(int)>
c000907e:	83 c4 10             	add    esp,0x10
c0009081:	ba 14 e1 01 c0       	mov    edx,0xc001e114
c0009086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000908a:	89 10                	mov    DWORD PTR [eax],edx
c000908c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009090:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009094:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009097:	90                   	nop
c0009098:	83 c4 0c             	add    esp,0xc
c000909b:	c3                   	ret    

c000909c <UnixFile::~UnixFile()>:
c000909c:	83 ec 1c             	sub    esp,0x1c
c000909f:	ba f8 e0 01 c0       	mov    edx,0xc001e0f8
c00090a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00090a8:	89 10                	mov    DWORD PTR [eax],edx
c00090aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00090ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090b1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00090b6:	7f 73                	jg     c000912b <UnixFile::~UnixFile()+0x8f>
c00090b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00090c0:	83 ec 0c             	sub    esp,0xc
c00090c3:	68 98 2f 02 c0       	push   0xc0022f98
c00090c8:	e8 0f 3c 01 00       	call   c001ccdc <LinkedList<UnixFile>::getFirstElement()>
c00090cd:	83 c4 10             	add    esp,0x10
c00090d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090d4:	83 ec 0c             	sub    esp,0xc
c00090d7:	68 98 2f 02 c0       	push   0xc0022f98
c00090dc:	e8 03 3c 01 00       	call   c001cce4 <LinkedList<UnixFile>::removeFirst()>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00090e8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00090ec:	74 40                	je     c000912e <UnixFile::~UnixFile()+0x92>
c00090ee:	83 ec 08             	sub    esp,0x8
c00090f1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00090f5:	68 98 2f 02 c0       	push   0xc0022f98
c00090fa:	e8 09 3b 01 00       	call   c001cc08 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009106:	8d 50 01             	lea    edx,[eax+0x1]
c0009109:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000910d:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009112:	0f 94 c0             	sete   al
c0009115:	84 c0                	test   al,al
c0009117:	74 a7                	je     c00090c0 <UnixFile::~UnixFile()+0x24>
c0009119:	83 ec 0c             	sub    esp,0xc
c000911c:	68 d0 e0 01 c0       	push   0xc001e0d0
c0009121:	e8 9d 71 00 00       	call   c00102c3 <KePanic(char const*)>
c0009126:	83 c4 10             	add    esp,0x10
c0009129:	eb 95                	jmp    c00090c0 <UnixFile::~UnixFile()+0x24>
c000912b:	90                   	nop
c000912c:	eb 01                	jmp    c000912f <UnixFile::~UnixFile()+0x93>
c000912e:	90                   	nop
c000912f:	90                   	nop
c0009130:	83 c4 1c             	add    esp,0x1c
c0009133:	c3                   	ret    

c0009134 <UnixFile::~UnixFile()>:
c0009134:	83 ec 0c             	sub    esp,0xc
c0009137:	83 ec 0c             	sub    esp,0xc
c000913a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000913e:	e8 59 ff ff ff       	call   c000909c <UnixFile::~UnixFile()>
c0009143:	83 c4 10             	add    esp,0x10
c0009146:	83 ec 08             	sub    esp,0x8
c0009149:	6a 0c                	push   0xc
c000914b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000914f:	e8 70 13 00 00       	call   c000a4c4 <operator delete(void*, unsigned long)>
c0009154:	83 c4 10             	add    esp,0x10
c0009157:	83 c4 0c             	add    esp,0xc
c000915a:	c3                   	ret    
c000915b:	90                   	nop

c000915c <ReservedFilename::~ReservedFilename()>:
c000915c:	83 ec 0c             	sub    esp,0xc
c000915f:	ba 14 e1 01 c0       	mov    edx,0xc001e114
c0009164:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009168:	89 10                	mov    DWORD PTR [eax],edx
c000916a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000916e:	83 ec 0c             	sub    esp,0xc
c0009171:	50                   	push   eax
c0009172:	e8 25 ff ff ff       	call   c000909c <UnixFile::~UnixFile()>
c0009177:	83 c4 10             	add    esp,0x10
c000917a:	90                   	nop
c000917b:	83 c4 0c             	add    esp,0xc
c000917e:	c3                   	ret    
c000917f:	90                   	nop

c0009180 <ReservedFilename::~ReservedFilename()>:
c0009180:	83 ec 0c             	sub    esp,0xc
c0009183:	83 ec 0c             	sub    esp,0xc
c0009186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000918a:	e8 cd ff ff ff       	call   c000915c <ReservedFilename::~ReservedFilename()>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	83 ec 08             	sub    esp,0x8
c0009195:	6a 0c                	push   0xc
c0009197:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000919b:	e8 24 13 00 00       	call   c000a4c4 <operator delete(void*, unsigned long)>
c00091a0:	83 c4 10             	add    esp,0x10
c00091a3:	83 c4 0c             	add    esp,0xc
c00091a6:	c3                   	ret    

c00091a7 <getFromFileDescriptor(int)>:
c00091a7:	53                   	push   ebx
c00091a8:	83 ec 08             	sub    esp,0x8
c00091ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00091af:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00091b5:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00091bb:	7f 2c                	jg     c00091e9 <getFromFileDescriptor(int)+0x42>
c00091bd:	83 ec 0c             	sub    esp,0xc
c00091c0:	68 98 2f 02 c0       	push   0xc0022f98
c00091c5:	e8 12 3b 01 00       	call   c001ccdc <LinkedList<UnixFile>::getFirstElement()>
c00091ca:	83 c4 10             	add    esp,0x10
c00091cd:	85 c0                	test   eax,eax
c00091cf:	75 04                	jne    c00091d5 <getFromFileDescriptor(int)+0x2e>
c00091d1:	31 c0                	xor    eax,eax
c00091d3:	eb 6e                	jmp    c0009243 <getFromFileDescriptor(int)+0x9c>
c00091d5:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00091d8:	74 69                	je     c0009243 <getFromFileDescriptor(int)+0x9c>
c00091da:	52                   	push   edx
c00091db:	52                   	push   edx
c00091dc:	50                   	push   eax
c00091dd:	68 98 2f 02 c0       	push   0xc0022f98
c00091e2:	e8 9f 3b 01 00       	call   c001cd86 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00091e7:	eb e1                	jmp    c00091ca <getFromFileDescriptor(int)+0x23>
c00091e9:	a1 8c 2f 02 c0       	mov    eax,ds:0xc0022f8c
c00091ee:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00091f4:	74 4d                	je     c0009243 <getFromFileDescriptor(int)+0x9c>
c00091f6:	a1 90 2f 02 c0       	mov    eax,ds:0xc0022f90
c00091fb:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009201:	74 40                	je     c0009243 <getFromFileDescriptor(int)+0x9c>
c0009203:	a1 88 2f 02 c0       	mov    eax,ds:0xc0022f88
c0009208:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000920e:	74 33                	je     c0009243 <getFromFileDescriptor(int)+0x9c>
c0009210:	a1 84 2f 02 c0       	mov    eax,ds:0xc0022f84
c0009215:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000921b:	74 26                	je     c0009243 <getFromFileDescriptor(int)+0x9c>
c000921d:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009223:	83 f8 08             	cmp    eax,0x8
c0009226:	77 09                	ja     c0009231 <getFromFileDescriptor(int)+0x8a>
c0009228:	8b 04 85 60 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0a0]
c000922f:	eb 12                	jmp    c0009243 <getFromFileDescriptor(int)+0x9c>
c0009231:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009237:	83 fb 08             	cmp    ebx,0x8
c000923a:	77 95                	ja     c00091d1 <getFromFileDescriptor(int)+0x2a>
c000923c:	8b 04 9d 20 2f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdd0e0]
c0009243:	83 c4 08             	add    esp,0x8
c0009246:	5b                   	pop    ebx
c0009247:	c3                   	ret    

c0009248 <__static_initialization_and_destruction_0(int, int)>:
c0009248:	83 ec 0c             	sub    esp,0xc
c000924b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009250:	75 34                	jne    c0009286 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009252:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000925a:	75 2a                	jne    c0009286 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000925c:	83 ec 0c             	sub    esp,0xc
c000925f:	68 98 2f 02 c0       	push   0xc0022f98
c0009264:	e8 5d 39 01 00       	call   c001cbc6 <LinkedList<UnixFile>::LinkedList()>
c0009269:	83 c4 10             	add    esp,0x10
c000926c:	83 ec 04             	sub    esp,0x4
c000926f:	68 10 ff 01 c0       	push   0xc001ff10
c0009274:	68 98 2f 02 c0       	push   0xc0022f98
c0009279:	68 c4 cb 01 c0       	push   0xc001cbc4
c000927e:	e8 f1 11 00 00       	call   c000a474 <__cxa_atexit>
c0009283:	83 c4 10             	add    esp,0x10
c0009286:	90                   	nop
c0009287:	83 c4 0c             	add    esp,0xc
c000928a:	c3                   	ret    

c000928b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000928b:	83 ec 0c             	sub    esp,0xc
c000928e:	83 ec 08             	sub    esp,0x8
c0009291:	68 ff ff 00 00       	push   0xffff
c0009296:	6a 01                	push   0x1
c0009298:	e8 ab ff ff ff       	call   c0009248 <__static_initialization_and_destruction_0(int, int)>
c000929d:	83 c4 10             	add    esp,0x10
c00092a0:	83 c4 0c             	add    esp,0xc
c00092a3:	c3                   	ret    

c00092a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00092a4:	53                   	push   ebx
c00092a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00092a9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00092ad:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00092b3:	89 c8                	mov    eax,ecx
c00092b5:	d1 e8                	shr    eax,1
c00092b7:	03 05 88 ff 01 c0    	add    eax,DWORD PTR ds:0xc001ff88
c00092bd:	83 e1 01             	and    ecx,0x1
c00092c0:	8a 10                	mov    dl,BYTE PTR [eax]
c00092c2:	75 09                	jne    c00092cd <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00092c4:	83 e2 f0             	and    edx,0xfffffff0
c00092c7:	09 da                	or     edx,ebx
c00092c9:	88 10                	mov    BYTE PTR [eax],dl
c00092cb:	5b                   	pop    ebx
c00092cc:	c3                   	ret    
c00092cd:	c1 e3 04             	shl    ebx,0x4
c00092d0:	83 e2 0f             	and    edx,0xf
c00092d3:	09 da                	or     edx,ebx
c00092d5:	88 10                	mov    BYTE PTR [eax],dl
c00092d7:	5b                   	pop    ebx
c00092d8:	c3                   	ret    

c00092d9 <Virt::getPageState(unsigned long)>:
c00092d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092dd:	8b 0d 88 ff 01 c0    	mov    ecx,DWORD PTR ds:0xc001ff88
c00092e3:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00092e9:	89 d0                	mov    eax,edx
c00092eb:	d1 e8                	shr    eax,1
c00092ed:	83 e2 01             	and    edx,0x1
c00092f0:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00092f3:	75 04                	jne    c00092f9 <Virt::getPageState(unsigned long)+0x20>
c00092f5:	83 e0 0f             	and    eax,0xf
c00092f8:	c3                   	ret    
c00092f9:	c0 e8 04             	shr    al,0x4
c00092fc:	c3                   	ret    

c00092fd <Virt::allocateKernelVirtualPages(int)>:
c00092fd:	55                   	push   ebp
c00092fe:	31 ed                	xor    ebp,ebp
c0009300:	57                   	push   edi
c0009301:	56                   	push   esi
c0009302:	53                   	push   ebx
c0009303:	31 db                	xor    ebx,ebx
c0009305:	83 ec 1c             	sub    esp,0x1c
c0009308:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000930c:	8b 3d 84 ff 01 c0    	mov    edi,DWORD PTR ds:0xc001ff84
c0009312:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009317:	57                   	push   edi
c0009318:	e8 bc ff ff ff       	call   c00092d9 <Virt::getPageState(unsigned long)>
c000931d:	5a                   	pop    edx
c000931e:	84 c0                	test   al,al
c0009320:	75 3a                	jne    c000935c <Virt::allocateKernelVirtualPages(int)+0x5f>
c0009322:	85 db                	test   ebx,ebx
c0009324:	75 02                	jne    c0009328 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0009326:	89 fd                	mov    ebp,edi
c0009328:	43                   	inc    ebx
c0009329:	39 f3                	cmp    ebx,esi
c000932b:	74 5a                	je     c0009387 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000932d:	47                   	inc    edi
c000932e:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0009334:	76 31                	jbe    c0009367 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0009336:	c7 05 84 ff 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001ff84,0xc8000
c0009340:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0009345:	75 28                	jne    c000936f <Virt::allocateKernelVirtualPages(int)+0x72>
c0009347:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000934c:	bf 00 80 0c 00       	mov    edi,0xc8000
c0009351:	57                   	push   edi
c0009352:	e8 82 ff ff ff       	call   c00092d9 <Virt::getPageState(unsigned long)>
c0009357:	5a                   	pop    edx
c0009358:	84 c0                	test   al,al
c000935a:	74 c6                	je     c0009322 <Virt::allocateKernelVirtualPages(int)+0x25>
c000935c:	31 db                	xor    ebx,ebx
c000935e:	47                   	inc    edi
c000935f:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0009365:	77 cf                	ja     c0009336 <Virt::allocateKernelVirtualPages(int)+0x39>
c0009367:	89 3d 84 ff 01 c0    	mov    DWORD PTR ds:0xc001ff84,edi
c000936d:	eb a8                	jmp    c0009317 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000936f:	83 ec 0c             	sub    esp,0xc
c0009372:	68 28 e1 01 c0       	push   0xc001e128
c0009377:	e8 47 6f 00 00       	call   c00102c3 <KePanic(char const*)>
c000937c:	8b 3d 84 ff 01 c0    	mov    edi,DWORD PTR ds:0xc001ff84
c0009382:	83 c4 10             	add    esp,0x10
c0009385:	eb 90                	jmp    c0009317 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009387:	89 2d 84 ff 01 c0    	mov    DWORD PTR ds:0xc001ff84,ebp
c000938d:	4b                   	dec    ebx
c000938e:	74 5f                	je     c00093ef <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009390:	85 f6                	test   esi,esi
c0009392:	74 3d                	je     c00093d1 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009394:	89 e8                	mov    eax,ebp
c0009396:	31 db                	xor    ebx,ebx
c0009398:	8d 7e ff             	lea    edi,[esi-0x1]
c000939b:	eb 14                	jmp    c00093b1 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000939d:	6a 01                	push   0x1
c000939f:	43                   	inc    ebx
c00093a0:	50                   	push   eax
c00093a1:	e8 fe fe ff ff       	call   c00092a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00093a6:	58                   	pop    eax
c00093a7:	39 f3                	cmp    ebx,esi
c00093a9:	5a                   	pop    edx
c00093aa:	74 25                	je     c00093d1 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00093ac:	a1 84 ff 01 c0       	mov    eax,ds:0xc001ff84
c00093b1:	8d 50 01             	lea    edx,[eax+0x1]
c00093b4:	85 db                	test   ebx,ebx
c00093b6:	89 15 84 ff 01 c0    	mov    DWORD PTR ds:0xc001ff84,edx
c00093bc:	74 20                	je     c00093de <Virt::allocateKernelVirtualPages(int)+0xe1>
c00093be:	39 df                	cmp    edi,ebx
c00093c0:	75 db                	jne    c000939d <Virt::allocateKernelVirtualPages(int)+0xa0>
c00093c2:	6a 03                	push   0x3
c00093c4:	43                   	inc    ebx
c00093c5:	50                   	push   eax
c00093c6:	e8 d9 fe ff ff       	call   c00092a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00093cb:	59                   	pop    ecx
c00093cc:	39 f3                	cmp    ebx,esi
c00093ce:	58                   	pop    eax
c00093cf:	75 db                	jne    c00093ac <Virt::allocateKernelVirtualPages(int)+0xaf>
c00093d1:	83 c4 1c             	add    esp,0x1c
c00093d4:	89 e8                	mov    eax,ebp
c00093d6:	5b                   	pop    ebx
c00093d7:	c1 e0 0c             	shl    eax,0xc
c00093da:	5e                   	pop    esi
c00093db:	5f                   	pop    edi
c00093dc:	5d                   	pop    ebp
c00093dd:	c3                   	ret    
c00093de:	6a 02                	push   0x2
c00093e0:	bb 01 00 00 00       	mov    ebx,0x1
c00093e5:	50                   	push   eax
c00093e6:	e8 b9 fe ff ff       	call   c00092a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00093eb:	58                   	pop    eax
c00093ec:	5a                   	pop    edx
c00093ed:	eb bd                	jmp    c00093ac <Virt::allocateKernelVirtualPages(int)+0xaf>
c00093ef:	6a 04                	push   0x4
c00093f1:	8d 45 01             	lea    eax,[ebp+0x1]
c00093f4:	55                   	push   ebp
c00093f5:	a3 84 ff 01 c0       	mov    ds:0xc001ff84,eax
c00093fa:	e8 a5 fe ff ff       	call   c00092a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00093ff:	59                   	pop    ecx
c0009400:	89 e8                	mov    eax,ebp
c0009402:	5b                   	pop    ebx
c0009403:	c1 e0 0c             	shl    eax,0xc
c0009406:	83 c4 1c             	add    esp,0x1c
c0009409:	5b                   	pop    ebx
c000940a:	5e                   	pop    esi
c000940b:	5f                   	pop    edi
c000940c:	5d                   	pop    ebp
c000940d:	c3                   	ret    

c000940e <Virt::freeSwapfilePage(unsigned long)>:
c000940e:	53                   	push   ebx
c000940f:	8b 15 ac 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022fac
c0009415:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009419:	b8 01 00 00 00       	mov    eax,0x1
c000941e:	89 cb                	mov    ebx,ecx
c0009420:	d3 e0                	shl    eax,cl
c0009422:	c1 eb 05             	shr    ebx,0x5
c0009425:	f7 d0                	not    eax
c0009427:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000942a:	5b                   	pop    ebx
c000942b:	c3                   	ret    

c000942c <Virt::swapIDToSector(unsigned long)>:
c000942c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009430:	0f af 05 8c ff 01 c0 	imul   eax,DWORD PTR ds:0xc001ff8c
c0009437:	03 05 94 ff 01 c0    	add    eax,DWORD PTR ds:0xc001ff94
c000943d:	c3                   	ret    

c000943e <Virt::allocateSwapfilePage()>:
c000943e:	55                   	push   ebp
c000943f:	31 d2                	xor    edx,edx
c0009441:	57                   	push   edi
c0009442:	56                   	push   esi
c0009443:	53                   	push   ebx
c0009444:	83 ec 0c             	sub    esp,0xc
c0009447:	8b 0d 8c ff 01 c0    	mov    ecx,DWORD PTR ds:0xc001ff8c
c000944d:	a1 90 ff 01 c0       	mov    eax,ds:0xc001ff90
c0009452:	f7 f1                	div    ecx
c0009454:	39 0d 90 ff 01 c0    	cmp    DWORD PTR ds:0xc001ff90,ecx
c000945a:	72 2d                	jb     c0009489 <Virt::allocateSwapfilePage()+0x4b>
c000945c:	8b 35 ac 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022fac
c0009462:	8b 16                	mov    edx,DWORD PTR [esi]
c0009464:	f6 c2 01             	test   dl,0x1
c0009467:	74 3c                	je     c00094a5 <Virt::allocateSwapfilePage()+0x67>
c0009469:	31 c9                	xor    ecx,ecx
c000946b:	bf 01 00 00 00       	mov    edi,0x1
c0009470:	eb 12                	jmp    c0009484 <Virt::allocateSwapfilePage()+0x46>
c0009472:	89 fd                	mov    ebp,edi
c0009474:	89 ca                	mov    edx,ecx
c0009476:	d3 e5                	shl    ebp,cl
c0009478:	c1 ea 05             	shr    edx,0x5
c000947b:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000947e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009480:	85 ea                	test   edx,ebp
c0009482:	74 2a                	je     c00094ae <Virt::allocateSwapfilePage()+0x70>
c0009484:	41                   	inc    ecx
c0009485:	39 c8                	cmp    eax,ecx
c0009487:	77 e9                	ja     c0009472 <Virt::allocateSwapfilePage()+0x34>
c0009489:	83 ec 0c             	sub    esp,0xc
c000948c:	68 8f e2 01 c0       	push   0xc001e28f
c0009491:	e8 2d 6e 00 00       	call   c00102c3 <KePanic(char const*)>
c0009496:	83 c4 10             	add    esp,0x10
c0009499:	31 c9                	xor    ecx,ecx
c000949b:	83 c4 0c             	add    esp,0xc
c000949e:	89 c8                	mov    eax,ecx
c00094a0:	5b                   	pop    ebx
c00094a1:	5e                   	pop    esi
c00094a2:	5f                   	pop    edi
c00094a3:	5d                   	pop    ebp
c00094a4:	c3                   	ret    
c00094a5:	89 f3                	mov    ebx,esi
c00094a7:	bd 01 00 00 00       	mov    ebp,0x1
c00094ac:	31 c9                	xor    ecx,ecx
c00094ae:	09 ea                	or     edx,ebp
c00094b0:	89 c8                	mov    eax,ecx
c00094b2:	89 13                	mov    DWORD PTR [ebx],edx
c00094b4:	83 c4 0c             	add    esp,0xc
c00094b7:	5b                   	pop    ebx
c00094b8:	5e                   	pop    esi
c00094b9:	5f                   	pop    edi
c00094ba:	5d                   	pop    ebp
c00094bb:	c3                   	ret    

c00094bc <Virt::virtualMemorySetup()>:
c00094bc:	53                   	push   ebx
c00094bd:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00094c2:	6a 0f                	push   0xf
c00094c4:	53                   	push   ebx
c00094c5:	43                   	inc    ebx
c00094c6:	e8 d9 fd ff ff       	call   c00092a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00094cb:	58                   	pop    eax
c00094cc:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00094d2:	5a                   	pop    edx
c00094d3:	75 ed                	jne    c00094c2 <Virt::virtualMemorySetup()+0x6>
c00094d5:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00094da:	6a 00                	push   0x0
c00094dc:	53                   	push   ebx
c00094dd:	43                   	inc    ebx
c00094de:	e8 c1 fd ff ff       	call   c00092a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00094e3:	59                   	pop    ecx
c00094e4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00094ea:	58                   	pop    eax
c00094eb:	75 ed                	jne    c00094da <Virt::virtualMemorySetup()+0x1e>
c00094ed:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00094f2:	6a 0f                	push   0xf
c00094f4:	53                   	push   ebx
c00094f5:	43                   	inc    ebx
c00094f6:	e8 a9 fd ff ff       	call   c00092a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00094fb:	58                   	pop    eax
c00094fc:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009502:	5a                   	pop    edx
c0009503:	75 ed                	jne    c00094f2 <Virt::virtualMemorySetup()+0x36>
c0009505:	5b                   	pop    ebx
c0009506:	c3                   	ret    

c0009507 <Virt::setupPageSwapping(int)>:
c0009507:	53                   	push   ebx
c0009508:	83 ec 0c             	sub    esp,0xc
c000950b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000950f:	a1 28 54 02 c0       	mov    eax,ds:0xc0025428
c0009514:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000951a:	8b 10                	mov    edx,DWORD PTR [eax]
c000951c:	53                   	push   ebx
c000951d:	c1 e3 0b             	shl    ebx,0xb
c0009520:	68 a6 e2 01 c0       	push   0xc001e2a6
c0009525:	50                   	push   eax
c0009526:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0009529:	89 1d 90 ff 01 c0    	mov    DWORD PTR ds:0xc001ff90,ebx
c000952f:	c6 05 98 ff 01 c0 43 	mov    BYTE PTR ds:0xc001ff98,0x43
c0009536:	c1 eb 08             	shr    ebx,0x8
c0009539:	a3 94 ff 01 c0       	mov    ds:0xc001ff94,eax
c000953e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009541:	c7 05 8c ff 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001ff8c,0x8
c000954b:	e8 d1 e2 ff ff       	call   c0007821 <malloc>
c0009550:	83 c4 0c             	add    esp,0xc
c0009553:	89 c1                	mov    ecx,eax
c0009555:	a3 ac 2f 02 c0       	mov    ds:0xc0022fac,eax
c000955a:	31 d2                	xor    edx,edx
c000955c:	a1 90 ff 01 c0       	mov    eax,ds:0xc001ff90
c0009561:	f7 35 8c ff 01 c0    	div    DWORD PTR ds:0xc001ff8c
c0009567:	c1 e8 05             	shr    eax,0x5
c000956a:	50                   	push   eax
c000956b:	6a 00                	push   0x0
c000956d:	51                   	push   ecx
c000956e:	e8 5d 6f ff ff       	call   c00004d0 <memset>
c0009573:	83 c4 18             	add    esp,0x18
c0009576:	5b                   	pop    ebx
c0009577:	c3                   	ret    

c0009578 <VAS::VAS(VAS*)>:
c0009578:	83 ec 0c             	sub    esp,0xc
c000957b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000957f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000958a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009591:	83 ec 0c             	sub    esp,0xc
c0009594:	68 48 e1 01 c0       	push   0xc001e148
c0009599:	e8 25 6d 00 00       	call   c00102c3 <KePanic(char const*)>
c000959e:	83 c4 10             	add    esp,0x10
c00095a1:	90                   	nop
c00095a2:	83 c4 0c             	add    esp,0xc
c00095a5:	c3                   	ret    

c00095a6 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00095a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00095aa:	89 c2                	mov    edx,eax
c00095ac:	c1 e8 0a             	shr    eax,0xa
c00095af:	c1 ea 16             	shr    edx,0x16
c00095b2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00095b7:	19 c9                	sbb    ecx,ecx
c00095b9:	c1 e2 0c             	shl    edx,0xc
c00095bc:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00095c2:	25 fc 0f 00 00       	and    eax,0xffc
c00095c7:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00095ce:	01 d0                	add    eax,edx
c00095d0:	c3                   	ret    
c00095d1:	90                   	nop

c00095d2 <VAS::getPageTableEntry(unsigned long)>:
c00095d2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00095d6:	89 ca                	mov    edx,ecx
c00095d8:	c1 e9 0a             	shr    ecx,0xa
c00095db:	c1 ea 16             	shr    edx,0x16
c00095de:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00095e4:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00095ea:	c1 e0 0c             	shl    eax,0xc
c00095ed:	8d 04 08             	lea    eax,[eax+ecx*1]
c00095f0:	c3                   	ret    

c00095f1 <Virt::freeKernelVirtualPages(unsigned long)>:
c00095f1:	57                   	push   edi
c00095f2:	56                   	push   esi
c00095f3:	be 01 00 00 00       	mov    esi,0x1
c00095f8:	53                   	push   ebx
c00095f9:	83 ec 10             	sub    esp,0x10
c00095fc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009600:	c1 eb 0c             	shr    ebx,0xc
c0009603:	eb 3f                	jmp    c0009644 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0009605:	83 ec 08             	sub    esp,0x8
c0009608:	a1 b0 2f 02 c0       	mov    eax,ds:0xc0022fb0
c000960d:	57                   	push   edi
c000960e:	50                   	push   eax
c000960f:	e8 be ff ff ff       	call   c00095d2 <VAS::getPageTableEntry(unsigned long)>
c0009614:	83 c4 10             	add    esp,0x10
c0009617:	8b 00                	mov    eax,DWORD PTR [eax]
c0009619:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000961d:	f6 c4 04             	test   ah,0x4
c0009620:	75 60                	jne    c0009682 <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c0009622:	80 fa 04             	cmp    dl,0x4
c0009625:	74 79                	je     c00096a0 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c0009627:	80 fa 02             	cmp    dl,0x2
c000962a:	0f 84 89 00 00 00    	je     c00096b9 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c0009630:	80 fa 03             	cmp    dl,0x3
c0009633:	0f 84 ae 00 00 00    	je     c00096e7 <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c0009639:	fe ca                	dec    dl
c000963b:	0f 84 93 00 00 00    	je     c00096d4 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009641:	43                   	inc    ebx
c0009642:	31 f6                	xor    esi,esi
c0009644:	53                   	push   ebx
c0009645:	89 df                	mov    edi,ebx
c0009647:	e8 8d fc ff ff       	call   c00092d9 <Virt::getPageState(unsigned long)>
c000964c:	c1 e7 0c             	shl    edi,0xc
c000964f:	5a                   	pop    edx
c0009650:	84 c0                	test   al,al
c0009652:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0009656:	75 ad                	jne    c0009605 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0009658:	83 ec 0c             	sub    esp,0xc
c000965b:	68 bd e2 01 c0       	push   0xc001e2bd
c0009660:	e8 5e 6c 00 00       	call   c00102c3 <KePanic(char const*)>
c0009665:	5a                   	pop    edx
c0009666:	59                   	pop    ecx
c0009667:	57                   	push   edi
c0009668:	8b 3d b0 2f 02 c0    	mov    edi,DWORD PTR ds:0xc0022fb0
c000966e:	57                   	push   edi
c000966f:	e8 5e ff ff ff       	call   c00095d2 <VAS::getPageTableEntry(unsigned long)>
c0009674:	83 c4 10             	add    esp,0x10
c0009677:	8b 00                	mov    eax,DWORD PTR [eax]
c0009679:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000967d:	f6 c4 04             	test   ah,0x4
c0009680:	74 bf                	je     c0009641 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009682:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0009686:	25 00 f0 ff ff       	and    eax,0xfffff000
c000968b:	83 ec 0c             	sub    esp,0xc
c000968e:	50                   	push   eax
c000968f:	e8 07 e4 ff ff       	call   c0007a9b <Phys::freePage(unsigned long)>
c0009694:	83 c4 10             	add    esp,0x10
c0009697:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000969b:	80 fa 04             	cmp    dl,0x4
c000969e:	75 87                	jne    c0009627 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00096a0:	89 f0                	mov    eax,esi
c00096a2:	84 c0                	test   al,al
c00096a4:	75 47                	jne    c00096ed <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c00096a6:	c7 44 24 20 6c e1 01 c0 	mov    DWORD PTR [esp+0x20],0xc001e16c
c00096ae:	83 c4 10             	add    esp,0x10
c00096b1:	5b                   	pop    ebx
c00096b2:	5e                   	pop    esi
c00096b3:	5f                   	pop    edi
c00096b4:	e9 0a 6c 00 00       	jmp    c00102c3 <KePanic(char const*)>
c00096b9:	89 f0                	mov    eax,esi
c00096bb:	84 c0                	test   al,al
c00096bd:	75 15                	jne    c00096d4 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c00096bf:	83 ec 0c             	sub    esp,0xc
c00096c2:	68 d9 e2 01 c0       	push   0xc001e2d9
c00096c7:	e8 f7 6b 00 00       	call   c00102c3 <KePanic(char const*)>
c00096cc:	83 c4 10             	add    esp,0x10
c00096cf:	e9 6d ff ff ff       	jmp    c0009641 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00096d4:	83 ec 08             	sub    esp,0x8
c00096d7:	6a 00                	push   0x0
c00096d9:	53                   	push   ebx
c00096da:	e8 c5 fb ff ff       	call   c00092a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096df:	83 c4 10             	add    esp,0x10
c00096e2:	e9 5a ff ff ff       	jmp    c0009641 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00096e7:	89 f0                	mov    eax,esi
c00096e9:	84 c0                	test   al,al
c00096eb:	75 15                	jne    c0009702 <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c00096ed:	83 ec 08             	sub    esp,0x8
c00096f0:	6a 00                	push   0x0
c00096f2:	53                   	push   ebx
c00096f3:	e8 ac fb ff ff       	call   c00092a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096f8:	83 c4 10             	add    esp,0x10
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	5b                   	pop    ebx
c00096ff:	5e                   	pop    esi
c0009700:	5f                   	pop    edi
c0009701:	c3                   	ret    
c0009702:	c7 44 24 20 f5 e2 01 c0 	mov    DWORD PTR [esp+0x20],0xc001e2f5
c000970a:	83 c4 10             	add    esp,0x10
c000970d:	5b                   	pop    ebx
c000970e:	5e                   	pop    esi
c000970f:	5f                   	pop    edi
c0009710:	e9 ae 6b 00 00       	jmp    c00102c3 <KePanic(char const*)>
c0009715:	90                   	nop

c0009716 <VAS::freeAllocatedPages(unsigned long)>:
c0009716:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000971a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000971e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009722:	74 09                	je     c000972d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009724:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009728:	e9 c4 fe ff ff       	jmp    c00095f1 <Virt::freeKernelVirtualPages(unsigned long)>
c000972d:	c7 44 24 04 90 e1 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e190
c0009735:	e9 80 0e 00 00       	jmp    c000a5ba <Dbg::kprintf(char const*, ...)>

c000973a <VAS::virtualToPhysical(unsigned long)>:
c000973a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000973e:	50                   	push   eax
c000973f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009743:	52                   	push   edx
c0009744:	e8 89 fe ff ff       	call   c00095d2 <VAS::getPageTableEntry(unsigned long)>
c0009749:	59                   	pop    ecx
c000974a:	8b 00                	mov    eax,DWORD PTR [eax]
c000974c:	5a                   	pop    edx
c000974d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009752:	c3                   	ret    
c0009753:	90                   	nop

c0009754 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009754:	55                   	push   ebp
c0009755:	57                   	push   edi
c0009756:	56                   	push   esi
c0009757:	53                   	push   ebx
c0009758:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000975c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009760:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009764:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009768:	85 db                	test   ebx,ebx
c000976a:	7e 22                	jle    c000978e <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000976c:	c1 e3 0c             	shl    ebx,0xc
c000976f:	01 f3                	add    ebx,esi
c0009771:	56                   	push   esi
c0009772:	81 c6 00 10 00 00    	add    esi,0x1000
c0009778:	55                   	push   ebp
c0009779:	e8 54 fe ff ff       	call   c00095d2 <VAS::getPageTableEntry(unsigned long)>
c000977e:	5a                   	pop    edx
c000977f:	59                   	pop    ecx
c0009780:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009782:	21 f9                	and    ecx,edi
c0009784:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0009788:	39 f3                	cmp    ebx,esi
c000978a:	89 08                	mov    DWORD PTR [eax],ecx
c000978c:	75 e3                	jne    c0009771 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000978e:	5b                   	pop    ebx
c000978f:	5e                   	pop    esi
c0009790:	5f                   	pop    edi
c0009791:	5d                   	pop    ebp
c0009792:	c3                   	ret    
c0009793:	90                   	nop

c0009794 <VAS::VAS()>:
c0009794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009798:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000979f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097a3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00097aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097ae:	a3 b0 2f 02 c0       	mov    ds:0xc0022fb0,eax
c00097b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097b7:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00097bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097bf:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00097c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097c6:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00097cd:	ba 7d 10 02 c0       	mov    edx,0xc002107d
c00097d2:	b8 00 10 02 c0       	mov    eax,0xc0021000
c00097d7:	29 c2                	sub    edx,eax
c00097d9:	89 d0                	mov    eax,edx
c00097db:	05 ff 0f 00 00       	add    eax,0xfff
c00097e0:	c1 e8 0c             	shr    eax,0xc
c00097e3:	89 c2                	mov    edx,eax
c00097e5:	b8 00 10 02 c0       	mov    eax,0xc0021000
c00097ea:	6a 04                	push   0x4
c00097ec:	6a ff                	push   0xffffffff
c00097ee:	52                   	push   edx
c00097ef:	50                   	push   eax
c00097f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097f4:	e8 5b ff ff ff       	call   c0009754 <VAS::reflagRange(unsigned long, int, int, int)>
c00097f9:	83 c4 14             	add    esp,0x14
c00097fc:	90                   	nop
c00097fd:	c3                   	ret    

c00097fe <VAS::setToWriteCombining(unsigned long, int)>:
c00097fe:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0009803:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009809:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009810:	75 01                	jne    c0009813 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009812:	c3                   	ret    
c0009813:	68 80 00 00 00       	push   0x80
c0009818:	6a ff                	push   0xffffffff
c000981a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000981e:	50                   	push   eax
c000981f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009823:	52                   	push   edx
c0009824:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009828:	51                   	push   ecx
c0009829:	e8 26 ff ff ff       	call   c0009754 <VAS::reflagRange(unsigned long, int, int, int)>
c000982e:	83 c4 14             	add    esp,0x14
c0009831:	c3                   	ret    

c0009832 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009832:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009837:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000983b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000983e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009842:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009845:	19 c0                	sbb    eax,eax
c0009847:	83 ca 03             	or     edx,0x3
c000984a:	83 e0 fc             	and    eax,0xfffffffc
c000984d:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009854:	0f 20 d8             	mov    eax,cr3
c0009857:	0f 22 d8             	mov    cr3,eax
c000985a:	c3                   	ret    
c000985b:	90                   	nop

c000985c <VAS::~VAS()>:
c000985c:	83 ec 2c             	sub    esp,0x2c
c000985f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009867:	fa                   	cli    
c0009868:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000986d:	40                   	inc    eax
c000986e:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0009873:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009878:	8b 00                	mov    eax,DWORD PTR [eax]
c000987a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000987d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009883:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009887:	6a 01                	push   0x1
c0009889:	50                   	push   eax
c000988a:	e8 a3 ff ff ff       	call   c0009832 <VAS::mapOtherVASIn(bool, VAS*)>
c000988f:	83 c4 0c             	add    esp,0xc
c0009892:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000989a:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00098a2:	0f 8f d4 00 00 00    	jg     c000997c <VAS::~VAS()+0x120>
c00098a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098ac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00098af:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00098b3:	c1 e2 02             	shl    edx,0x2
c00098b6:	01 d0                	add    eax,edx
c00098b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00098ba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00098be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c2:	83 e0 01             	and    eax,0x1
c00098c5:	0f 84 a8 00 00 00    	je     c0009973 <VAS::~VAS()+0x117>
c00098cb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00098d3:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00098db:	7f 72                	jg     c000994f <VAS::~VAS()+0xf3>
c00098dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00098e1:	c1 e0 0a             	shl    eax,0xa
c00098e4:	89 c2                	mov    edx,eax
c00098e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00098ea:	01 d0                	add    eax,edx
c00098ec:	c1 e0 0c             	shl    eax,0xc
c00098ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00098f3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00098f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00098fa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00098fd:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009903:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009907:	6a 01                	push   0x1
c0009909:	50                   	push   eax
c000990a:	e8 97 fc ff ff       	call   c00095a6 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000990f:	83 c4 0c             	add    esp,0xc
c0009912:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009916:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000991a:	8b 00                	mov    eax,DWORD PTR [eax]
c000991c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009920:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009924:	25 01 04 00 00       	and    eax,0x401
c0009929:	3d 01 04 00 00       	cmp    eax,0x401
c000992e:	75 19                	jne    c0009949 <VAS::~VAS()+0xed>
c0009930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009934:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009939:	83 ec 0c             	sub    esp,0xc
c000993c:	50                   	push   eax
c000993d:	e8 59 e1 ff ff       	call   c0007a9b <Phys::freePage(unsigned long)>
c0009942:	83 c4 10             	add    esp,0x10
c0009945:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009949:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000994d:	eb 84                	jmp    c00098d3 <VAS::~VAS()+0x77>
c000994f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009953:	25 00 04 00 00       	and    eax,0x400
c0009958:	74 19                	je     c0009973 <VAS::~VAS()+0x117>
c000995a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000995e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009963:	83 ec 0c             	sub    esp,0xc
c0009966:	50                   	push   eax
c0009967:	e8 2f e1 ff ff       	call   c0007a9b <Phys::freePage(unsigned long)>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009973:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009977:	e9 1e ff ff ff       	jmp    c000989a <VAS::~VAS()+0x3e>
c000997c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009980:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009983:	83 ec 0c             	sub    esp,0xc
c0009986:	50                   	push   eax
c0009987:	e8 65 fc ff ff       	call   c00095f1 <Virt::freeKernelVirtualPages(unsigned long)>
c000998c:	83 c4 10             	add    esp,0x10
c000998f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009993:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009996:	83 ec 0c             	sub    esp,0xc
c0009999:	50                   	push   eax
c000999a:	e8 fc e0 ff ff       	call   c0007a9b <Phys::freePage(unsigned long)>
c000999f:	83 c4 10             	add    esp,0x10
c00099a2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00099a6:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00099ab:	48                   	dec    eax
c00099ac:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00099b1:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00099b6:	85 c0                	test   eax,eax
c00099b8:	75 01                	jne    c00099bb <VAS::~VAS()+0x15f>
c00099ba:	fb                   	sti    
c00099bb:	90                   	nop
c00099bc:	83 c4 2c             	add    esp,0x2c
c00099bf:	c3                   	ret    

c00099c0 <VAS::mapPage(unsigned long, unsigned long, int)>:
c00099c0:	55                   	push   ebp
c00099c1:	57                   	push   edi
c00099c2:	56                   	push   esi
c00099c3:	53                   	push   ebx
c00099c4:	83 ec 1c             	sub    esp,0x1c
c00099c7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00099cb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00099cf:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00099d5:	77 0b                	ja     c00099e2 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c00099d7:	0f 20 d8             	mov    eax,cr3
c00099da:	0f 20 d8             	mov    eax,cr3
c00099dd:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c00099e0:	75 47                	jne    c0009a29 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c00099e2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00099e6:	09 d8                	or     eax,ebx
c00099e8:	a9 ff 0f 00 00       	test   eax,0xfff
c00099ed:	75 57                	jne    c0009a46 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c00099ef:	89 de                	mov    esi,ebx
c00099f1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00099f4:	c1 ee 16             	shr    esi,0x16
c00099f7:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00099fe:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009a02:	74 54                	je     c0009a58 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c0009a04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009a08:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009a0e:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0009a12:	c1 e6 0c             	shl    esi,0xc
c0009a15:	c1 eb 0a             	shr    ebx,0xa
c0009a18:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009a1e:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009a21:	83 c4 1c             	add    esp,0x1c
c0009a24:	5b                   	pop    ebx
c0009a25:	5e                   	pop    esi
c0009a26:	5f                   	pop    edi
c0009a27:	5d                   	pop    ebp
c0009a28:	c3                   	ret    
c0009a29:	83 ec 0c             	sub    esp,0xc
c0009a2c:	68 b4 e1 01 c0       	push   0xc001e1b4
c0009a31:	e8 84 0b 00 00       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0009a36:	83 c4 10             	add    esp,0x10
c0009a39:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a3d:	09 d8                	or     eax,ebx
c0009a3f:	a9 ff 0f 00 00       	test   eax,0xfff
c0009a44:	74 a9                	je     c00099ef <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009a46:	83 ec 0c             	sub    esp,0xc
c0009a49:	68 1c e2 01 c0       	push   0xc001e21c
c0009a4e:	e8 70 68 00 00       	call   c00102c3 <KePanic(char const*)>
c0009a53:	83 c4 10             	add    esp,0x10
c0009a56:	eb 97                	jmp    c00099ef <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009a58:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a5c:	e8 9c e0 ff ff       	call   c0007afd <Phys::allocatePage()>
c0009a61:	83 ec 0c             	sub    esp,0xc
c0009a64:	89 c5                	mov    ebp,eax
c0009a66:	8b 0d b0 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022fb0
c0009a6c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009a70:	6a 01                	push   0x1
c0009a72:	e8 86 f8 ff ff       	call   c00092fd <Virt::allocateKernelVirtualPages(int)>
c0009a77:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009a7e:	6a 01                	push   0x1
c0009a80:	50                   	push   eax
c0009a81:	55                   	push   ebp
c0009a82:	81 cd 07 04 00 00    	or     ebp,0x407
c0009a88:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009a8c:	51                   	push   ecx
c0009a8d:	e8 28 02 00 00       	call   c0009cba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009a92:	83 c4 1c             	add    esp,0x1c
c0009a95:	68 00 10 00 00       	push   0x1000
c0009a9a:	6a 00                	push   0x0
c0009a9c:	50                   	push   eax
c0009a9d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009aa1:	e8 2a 6a ff ff       	call   c00004d0 <memset>
c0009aa6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009aaa:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aad:	e8 3f fb ff ff       	call   c00095f1 <Virt::freeKernelVirtualPages(unsigned long)>
c0009ab2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009ab6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009ab9:	83 c4 10             	add    esp,0x10
c0009abc:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009abf:	e9 40 ff ff ff       	jmp    c0009a04 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009ac4 <VAS::allocatePages(int, int)>:
c0009ac4:	55                   	push   ebp
c0009ac5:	57                   	push   edi
c0009ac6:	56                   	push   esi
c0009ac7:	53                   	push   ebx
c0009ac8:	83 ec 1c             	sub    esp,0x1c
c0009acb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009acf:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0009ad4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ada:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009ae0:	83 e0 01             	and    eax,0x1
c0009ae3:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009ae7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009aeb:	0f 85 cc 00 00 00    	jne    c0009bbd <VAS::allocatePages(int, int)+0xf9>
c0009af1:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009af4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009af8:	85 c0                	test   eax,eax
c0009afa:	0f 84 a1 00 00 00    	je     c0009ba1 <VAS::allocatePages(int, int)+0xdd>
c0009b00:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009b04:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b08:	c1 e6 0c             	shl    esi,0xc
c0009b0b:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009b0f:	85 c0                	test   eax,eax
c0009b11:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009b14:	7e 33                	jle    c0009b49 <VAS::allocatePages(int, int)+0x85>
c0009b16:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009b1a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b1e:	81 cd 00 04 00 00    	or     ebp,0x400
c0009b24:	e8 d4 df ff ff       	call   c0007afd <Phys::allocatePage()>
c0009b29:	55                   	push   ebp
c0009b2a:	53                   	push   ebx
c0009b2b:	50                   	push   eax
c0009b2c:	57                   	push   edi
c0009b2d:	e8 8e fe ff ff       	call   c00099c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009b32:	83 c4 10             	add    esp,0x10
c0009b35:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b3a:	74 03                	je     c0009b3f <VAS::allocatePages(int, int)+0x7b>
c0009b3c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b3f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b45:	39 de                	cmp    esi,ebx
c0009b47:	75 db                	jne    c0009b24 <VAS::allocatePages(int, int)+0x60>
c0009b49:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b4e:	75 12                	jne    c0009b62 <VAS::allocatePages(int, int)+0x9e>
c0009b50:	0f 20 d8             	mov    eax,cr3
c0009b53:	0f 22 d8             	mov    cr3,eax
c0009b56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b5a:	83 c4 1c             	add    esp,0x1c
c0009b5d:	5b                   	pop    ebx
c0009b5e:	5e                   	pop    esi
c0009b5f:	5f                   	pop    edi
c0009b60:	5d                   	pop    ebp
c0009b61:	c3                   	ret    
c0009b62:	c1 ee 0a             	shr    esi,0xa
c0009b65:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b69:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009b6f:	c1 eb 0a             	shr    ebx,0xa
c0009b72:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009b78:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009b7e:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009b84:	39 c3                	cmp    ebx,eax
c0009b86:	77 ce                	ja     c0009b56 <VAS::allocatePages(int, int)+0x92>
c0009b88:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b8b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b91:	39 d8                	cmp    eax,ebx
c0009b93:	73 f3                	jae    c0009b88 <VAS::allocatePages(int, int)+0xc4>
c0009b95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b99:	83 c4 1c             	add    esp,0x1c
c0009b9c:	5b                   	pop    ebx
c0009b9d:	5e                   	pop    esi
c0009b9e:	5f                   	pop    edi
c0009b9f:	5d                   	pop    ebp
c0009ba0:	c3                   	ret    
c0009ba1:	83 ec 0c             	sub    esp,0xc
c0009ba4:	68 40 e2 01 c0       	push   0xc001e240
c0009ba9:	e8 15 67 00 00       	call   c00102c3 <KePanic(char const*)>
c0009bae:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009bb1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009bb5:	83 c4 10             	add    esp,0x10
c0009bb8:	e9 43 ff ff ff       	jmp    c0009b00 <VAS::allocatePages(int, int)+0x3c>
c0009bbd:	83 ec 0c             	sub    esp,0xc
c0009bc0:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009bc4:	51                   	push   ecx
c0009bc5:	e8 33 f7 ff ff       	call   c00092fd <Virt::allocateKernelVirtualPages(int)>
c0009bca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009bce:	83 c4 10             	add    esp,0x10
c0009bd1:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009bd6:	0f 87 9b 00 00 00    	ja     c0009c77 <VAS::allocatePages(int, int)+0x1b3>
c0009bdc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009be0:	85 d2                	test   edx,edx
c0009be2:	7e 3c                	jle    c0009c20 <VAS::allocatePages(int, int)+0x15c>
c0009be4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009be8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009bec:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009bf0:	c1 e5 0c             	shl    ebp,0xc
c0009bf3:	81 ce 00 04 00 00    	or     esi,0x400
c0009bf9:	01 dd                	add    ebp,ebx
c0009bfb:	e8 fd de ff ff       	call   c0007afd <Phys::allocatePage()>
c0009c00:	56                   	push   esi
c0009c01:	53                   	push   ebx
c0009c02:	50                   	push   eax
c0009c03:	57                   	push   edi
c0009c04:	e8 b7 fd ff ff       	call   c00099c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c09:	83 c4 10             	add    esp,0x10
c0009c0c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c11:	74 03                	je     c0009c16 <VAS::allocatePages(int, int)+0x152>
c0009c13:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c16:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c1c:	39 dd                	cmp    ebp,ebx
c0009c1e:	75 db                	jne    c0009bfb <VAS::allocatePages(int, int)+0x137>
c0009c20:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c25:	0f 84 25 ff ff ff    	je     c0009b50 <VAS::allocatePages(int, int)+0x8c>
c0009c2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c2f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009c33:	89 d3                	mov    ebx,edx
c0009c35:	c1 e0 0c             	shl    eax,0xc
c0009c38:	c1 eb 0a             	shr    ebx,0xa
c0009c3b:	01 d0                	add    eax,edx
c0009c3d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009c43:	c1 e8 0a             	shr    eax,0xa
c0009c46:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009c4c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c51:	2d 00 00 40 00       	sub    eax,0x400000
c0009c56:	39 c3                	cmp    ebx,eax
c0009c58:	0f 87 f8 fe ff ff    	ja     c0009b56 <VAS::allocatePages(int, int)+0x92>
c0009c5e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c61:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c67:	39 d8                	cmp    eax,ebx
c0009c69:	73 f3                	jae    c0009c5e <VAS::allocatePages(int, int)+0x19a>
c0009c6b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009c6f:	83 c4 1c             	add    esp,0x1c
c0009c72:	5b                   	pop    ebx
c0009c73:	5e                   	pop    esi
c0009c74:	5f                   	pop    edi
c0009c75:	5d                   	pop    ebp
c0009c76:	c3                   	ret    
c0009c77:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0009c7c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009c82:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009c89:	0f 84 4d ff ff ff    	je     c0009bdc <VAS::allocatePages(int, int)+0x118>
c0009c8f:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009c97:	e9 40 ff ff ff       	jmp    c0009bdc <VAS::allocatePages(int, int)+0x118>

c0009c9c <VAS::setCPUSpecific(unsigned long)>:
c0009c9c:	83 ec 0c             	sub    esp,0xc
c0009c9f:	6a 05                	push   0x5
c0009ca1:	68 00 00 40 c2       	push   0xc2400000
c0009ca6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009caa:	50                   	push   eax
c0009cab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009caf:	52                   	push   edx
c0009cb0:	e8 0b fd ff ff       	call   c00099c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009cb5:	83 c4 1c             	add    esp,0x1c
c0009cb8:	c3                   	ret    
c0009cb9:	90                   	nop

c0009cba <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009cba:	55                   	push   ebp
c0009cbb:	57                   	push   edi
c0009cbc:	56                   	push   esi
c0009cbd:	53                   	push   ebx
c0009cbe:	83 ec 1c             	sub    esp,0x1c
c0009cc1:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0009cc6:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009cca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009cd0:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009cd4:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009cda:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009cde:	83 e0 01             	and    eax,0x1
c0009ce1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009ce5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009ce9:	85 c0                	test   eax,eax
c0009ceb:	7e 39                	jle    c0009d26 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009ced:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009cf1:	89 f3                	mov    ebx,esi
c0009cf3:	c1 e0 0c             	shl    eax,0xc
c0009cf6:	01 f0                	add    eax,esi
c0009cf8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009cfc:	55                   	push   ebp
c0009cfd:	53                   	push   ebx
c0009cfe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d02:	29 f0                	sub    eax,esi
c0009d04:	01 d8                	add    eax,ebx
c0009d06:	50                   	push   eax
c0009d07:	57                   	push   edi
c0009d08:	e8 b3 fc ff ff       	call   c00099c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009d0d:	83 c4 10             	add    esp,0x10
c0009d10:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009d15:	74 03                	je     c0009d1a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009d17:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009d1a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009d20:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009d24:	75 d6                	jne    c0009cfc <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009d26:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009d2b:	75 10                	jne    c0009d3d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009d2d:	0f 20 d8             	mov    eax,cr3
c0009d30:	0f 22 d8             	mov    cr3,eax
c0009d33:	83 c4 1c             	add    esp,0x1c
c0009d36:	89 f0                	mov    eax,esi
c0009d38:	5b                   	pop    ebx
c0009d39:	5e                   	pop    esi
c0009d3a:	5f                   	pop    edi
c0009d3b:	5d                   	pop    ebp
c0009d3c:	c3                   	ret    
c0009d3d:	89 f3                	mov    ebx,esi
c0009d3f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d43:	c1 eb 0a             	shr    ebx,0xa
c0009d46:	c1 e0 0c             	shl    eax,0xc
c0009d49:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009d4f:	01 f0                	add    eax,esi
c0009d51:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009d57:	c1 e8 0a             	shr    eax,0xa
c0009d5a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009d5f:	2d 00 00 40 00       	sub    eax,0x400000
c0009d64:	39 c3                	cmp    ebx,eax
c0009d66:	77 cb                	ja     c0009d33 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009d68:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009d6b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009d71:	39 d8                	cmp    eax,ebx
c0009d73:	73 f3                	jae    c0009d68 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009d75:	83 c4 1c             	add    esp,0x1c
c0009d78:	89 f0                	mov    eax,esi
c0009d7a:	5b                   	pop    ebx
c0009d7b:	5e                   	pop    esi
c0009d7c:	5f                   	pop    edi
c0009d7d:	5d                   	pop    ebp
c0009d7e:	c3                   	ret    
c0009d7f:	90                   	nop

c0009d80 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009d80:	55                   	push   ebp
c0009d81:	57                   	push   edi
c0009d82:	56                   	push   esi
c0009d83:	53                   	push   ebx
c0009d84:	83 ec 1c             	sub    esp,0x1c
c0009d87:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d8b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d8f:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009d93:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009d97:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d9c:	75 4a                	jne    c0009de8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009d9e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009da2:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009da5:	c1 eb 16             	shr    ebx,0x16
c0009da8:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009daf:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009db3:	74 4d                	je     c0009e02 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009db5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009db9:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009dbd:	c1 e8 0a             	shr    eax,0xa
c0009dc0:	80 fa 01             	cmp    dl,0x1
c0009dc3:	19 d2                	sbb    edx,edx
c0009dc5:	c1 e3 0c             	shl    ebx,0xc
c0009dc8:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009dcc:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009dd2:	25 fc 0f 00 00       	and    eax,0xffc
c0009dd7:	01 d8                	add    eax,ebx
c0009dd9:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009de0:	83 c4 1c             	add    esp,0x1c
c0009de3:	5b                   	pop    ebx
c0009de4:	5e                   	pop    esi
c0009de5:	5f                   	pop    edi
c0009de6:	5d                   	pop    ebp
c0009de7:	c3                   	ret    
c0009de8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009dec:	83 ec 0c             	sub    esp,0xc
c0009def:	68 6c e2 01 c0       	push   0xc001e26c
c0009df4:	e8 ca 64 00 00       	call   c00102c3 <KePanic(char const*)>
c0009df9:	83 c4 10             	add    esp,0x10
c0009dfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009e00:	eb 9c                	jmp    c0009d9e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009e02:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e06:	e8 f2 dc ff ff       	call   c0007afd <Phys::allocatePage()>
c0009e0b:	83 ec 0c             	sub    esp,0xc
c0009e0e:	89 c5                	mov    ebp,eax
c0009e10:	8b 0d b0 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022fb0
c0009e16:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009e1a:	6a 01                	push   0x1
c0009e1c:	e8 dc f4 ff ff       	call   c00092fd <Virt::allocateKernelVirtualPages(int)>
c0009e21:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009e28:	6a 01                	push   0x1
c0009e2a:	50                   	push   eax
c0009e2b:	55                   	push   ebp
c0009e2c:	81 cd 07 04 00 00    	or     ebp,0x407
c0009e32:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009e36:	51                   	push   ecx
c0009e37:	e8 7e fe ff ff       	call   c0009cba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e3c:	83 c4 1c             	add    esp,0x1c
c0009e3f:	68 00 10 00 00       	push   0x1000
c0009e44:	6a 00                	push   0x0
c0009e46:	50                   	push   eax
c0009e47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e4b:	e8 80 66 ff ff       	call   c00004d0 <memset>
c0009e50:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e54:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e57:	e8 95 f7 ff ff       	call   c00095f1 <Virt::freeKernelVirtualPages(unsigned long)>
c0009e5c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e5f:	83 c4 10             	add    esp,0x10
c0009e62:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009e65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009e69:	e9 47 ff ff ff       	jmp    c0009db5 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009e6e <VAS::VAS(bool)>:
c0009e6e:	53                   	push   ebx
c0009e6f:	83 ec 28             	sub    esp,0x28
c0009e72:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e76:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009e7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e7e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009e85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e89:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009e90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e94:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009e98:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009e9b:	e8 5d dc ff ff       	call   c0007afd <Phys::allocatePage()>
c0009ea0:	89 c2                	mov    edx,eax
c0009ea2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ea6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009ea9:	8b 1d b0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb0
c0009eaf:	83 ec 0c             	sub    esp,0xc
c0009eb2:	6a 01                	push   0x1
c0009eb4:	e8 44 f4 ff ff       	call   c00092fd <Virt::allocateKernelVirtualPages(int)>
c0009eb9:	83 c4 10             	add    esp,0x10
c0009ebc:	89 c2                	mov    edx,eax
c0009ebe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ec2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009ec5:	83 ec 0c             	sub    esp,0xc
c0009ec8:	6a 03                	push   0x3
c0009eca:	6a 01                	push   0x1
c0009ecc:	52                   	push   edx
c0009ecd:	50                   	push   eax
c0009ece:	53                   	push   ebx
c0009ecf:	e8 e6 fd ff ff       	call   c0009cba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009ed4:	83 c4 20             	add    esp,0x20
c0009ed7:	89 c2                	mov    edx,eax
c0009ed9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009edd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009ee0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009ee8:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009ef0:	7f 1c                	jg     c0009f0e <VAS::VAS(bool)+0xa0>
c0009ef2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ef6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ef9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009efd:	c1 e2 02             	shl    edx,0x2
c0009f00:	01 d0                	add    eax,edx
c0009f02:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009f08:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009f0c:	eb da                	jmp    c0009ee8 <VAS::VAS(bool)+0x7a>
c0009f0e:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009f16:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009f1e:	7f 7a                	jg     c0009f9a <VAS::VAS(bool)+0x12c>
c0009f20:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f24:	2d 00 02 00 00       	sub    eax,0x200
c0009f29:	c1 e0 0c             	shl    eax,0xc
c0009f2c:	83 c8 05             	or     eax,0x5
c0009f2f:	89 c2                	mov    edx,eax
c0009f31:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0009f36:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f3c:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f42:	83 e0 10             	and    eax,0x10
c0009f45:	84 c0                	test   al,al
c0009f47:	74 07                	je     c0009f50 <VAS::VAS(bool)+0xe2>
c0009f49:	b8 00 01 00 00       	mov    eax,0x100
c0009f4e:	eb 05                	jmp    c0009f55 <VAS::VAS(bool)+0xe7>
c0009f50:	b8 00 00 00 00       	mov    eax,0x0
c0009f55:	09 d0                	or     eax,edx
c0009f57:	89 c1                	mov    ecx,eax
c0009f59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f5d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f60:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009f64:	c1 e2 02             	shl    edx,0x2
c0009f67:	01 d0                	add    eax,edx
c0009f69:	89 ca                	mov    edx,ecx
c0009f6b:	89 10                	mov    DWORD PTR [eax],edx
c0009f6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f71:	2d 40 03 00 00       	sub    eax,0x340
c0009f76:	83 f8 7f             	cmp    eax,0x7f
c0009f79:	77 16                	ja     c0009f91 <VAS::VAS(bool)+0x123>
c0009f7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f82:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009f86:	c1 e2 02             	shl    edx,0x2
c0009f89:	01 d0                	add    eax,edx
c0009f8b:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009f91:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009f95:	e9 7c ff ff ff       	jmp    c0009f16 <VAS::VAS(bool)+0xa8>
c0009f9a:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0009f9f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fa5:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009fab:	83 e0 10             	and    eax,0x10
c0009fae:	84 c0                	test   al,al
c0009fb0:	74 07                	je     c0009fb9 <VAS::VAS(bool)+0x14b>
c0009fb2:	b8 03 41 00 00       	mov    eax,0x4103
c0009fb7:	eb 05                	jmp    c0009fbe <VAS::VAS(bool)+0x150>
c0009fb9:	b8 03 40 00 00       	mov    eax,0x4003
c0009fbe:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009fc2:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009fc5:	81 c2 20 0c 00 00    	add    edx,0xc20
c0009fcb:	89 02                	mov    DWORD PTR [edx],eax
c0009fcd:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0009fd2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fd8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0009fde:	83 ec 08             	sub    esp,0x8
c0009fe1:	50                   	push   eax
c0009fe2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009fe6:	e8 b1 fc ff ff       	call   c0009c9c <VAS::setCPUSpecific(unsigned long)>
c0009feb:	83 c4 10             	add    esp,0x10
c0009fee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ff2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009ff5:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0009ffa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a000:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a006:	83 e0 10             	and    eax,0x10
c000a009:	84 c0                	test   al,al
c000a00b:	74 07                	je     c000a014 <VAS::VAS(bool)+0x1a6>
c000a00d:	b8 00 01 00 00       	mov    eax,0x100
c000a012:	eb 05                	jmp    c000a019 <VAS::VAS(bool)+0x1ab>
c000a014:	b8 00 00 00 00       	mov    eax,0x0
c000a019:	09 c2                	or     edx,eax
c000a01b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a01f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a022:	05 fc 0f 00 00       	add    eax,0xffc
c000a027:	83 ca 03             	or     edx,0x3
c000a02a:	89 10                	mov    DWORD PTR [eax],edx
c000a02c:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000a031:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a037:	83 ec 0c             	sub    esp,0xc
c000a03a:	50                   	push   eax
c000a03b:	e8 4c 1c 00 00       	call   c000bc8c <Device::getName()>
c000a040:	83 c4 10             	add    esp,0x10
c000a043:	83 ec 08             	sub    esp,0x8
c000a046:	68 0f e3 01 c0       	push   0xc001e30f
c000a04b:	50                   	push   eax
c000a04c:	e8 8f 66 ff ff       	call   c00006e0 <strcmp>
c000a051:	83 c4 10             	add    esp,0x10
c000a054:	85 c0                	test   eax,eax
c000a056:	0f 94 c0             	sete   al
c000a059:	84 c0                	test   al,al
c000a05b:	0f 84 87 00 00 00    	je     c000a0e8 <VAS::VAS(bool)+0x27a>
c000a061:	fa                   	cli    
c000a062:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000a067:	40                   	inc    eax
c000a068:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000a06d:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000a072:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a078:	05 7c 09 00 00       	add    eax,0x97c
c000a07d:	83 ec 0c             	sub    esp,0xc
c000a080:	50                   	push   eax
c000a081:	e8 98 d2 ff ff       	call   c000731e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a086:	83 c4 10             	add    esp,0x10
c000a089:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a08e:	89 c3                	mov    ebx,eax
c000a090:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000a095:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a09b:	05 7c 09 00 00       	add    eax,0x97c
c000a0a0:	83 ec 0c             	sub    esp,0xc
c000a0a3:	50                   	push   eax
c000a0a4:	e8 75 d2 ff ff       	call   c000731e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a0a9:	83 c4 10             	add    esp,0x10
c000a0ac:	83 ec 08             	sub    esp,0x8
c000a0af:	50                   	push   eax
c000a0b0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a0b4:	e8 19 f5 ff ff       	call   c00095d2 <VAS::getPageTableEntry(unsigned long)>
c000a0b9:	83 c4 10             	add    esp,0x10
c000a0bc:	8b 00                	mov    eax,DWORD PTR [eax]
c000a0be:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a0c3:	6a 11                	push   0x11
c000a0c5:	53                   	push   ebx
c000a0c6:	50                   	push   eax
c000a0c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a0cb:	e8 f0 f8 ff ff       	call   c00099c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a0d0:	83 c4 10             	add    esp,0x10
c000a0d3:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000a0d8:	48                   	dec    eax
c000a0d9:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000a0de:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000a0e3:	85 c0                	test   eax,eax
c000a0e5:	75 01                	jne    c000a0e8 <VAS::VAS(bool)+0x27a>
c000a0e7:	fb                   	sti    
c000a0e8:	90                   	nop
c000a0e9:	83 c4 28             	add    esp,0x28
c000a0ec:	5b                   	pop    ebx
c000a0ed:	c3                   	ret    

c000a0ee <VAS::evict(unsigned long)>:
c000a0ee:	55                   	push   ebp
c000a0ef:	57                   	push   edi
c000a0f0:	56                   	push   esi
c000a0f1:	53                   	push   ebx
c000a0f2:	83 ec 1c             	sub    esp,0x1c
c000a0f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0f9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a0fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a101:	e8 38 f3 ff ff       	call   c000943e <Virt::allocateSwapfilePage()>
c000a106:	8b 0d 8c ff 01 c0    	mov    ecx,DWORD PTR ds:0xc001ff8c
c000a10c:	89 c7                	mov    edi,eax
c000a10e:	85 c9                	test   ecx,ecx
c000a110:	7e 3e                	jle    c000a150 <VAS::evict(unsigned long)+0x62>
c000a112:	89 ee                	mov    esi,ebp
c000a114:	31 db                	xor    ebx,ebx
c000a116:	83 ec 0c             	sub    esp,0xc
c000a119:	57                   	push   edi
c000a11a:	e8 0d f3 ff ff       	call   c000942c <Virt::swapIDToSector(unsigned long)>
c000a11f:	89 34 24             	mov    DWORD PTR [esp],esi
c000a122:	01 d8                	add    eax,ebx
c000a124:	6a 01                	push   0x1
c000a126:	31 d2                	xor    edx,edx
c000a128:	43                   	inc    ebx
c000a129:	52                   	push   edx
c000a12a:	81 c6 00 02 00 00    	add    esi,0x200
c000a130:	50                   	push   eax
c000a131:	0f be 05 98 ff 01 c0 	movsx  eax,BYTE PTR ds:0xc001ff98
c000a138:	8b 14 85 1c 53 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdace4]
c000a13f:	52                   	push   edx
c000a140:	e8 f7 2b 00 00       	call   c000cd3c <LogicalDisk::write(unsigned long long, int, void*)>
c000a145:	83 c4 20             	add    esp,0x20
c000a148:	39 1d 8c ff 01 c0    	cmp    DWORD PTR ds:0xc001ff8c,ebx
c000a14e:	7f c6                	jg     c000a116 <VAS::evict(unsigned long)+0x28>
c000a150:	83 ec 08             	sub    esp,0x8
c000a153:	c1 e7 0b             	shl    edi,0xb
c000a156:	55                   	push   ebp
c000a157:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a15b:	50                   	push   eax
c000a15c:	e8 71 f4 ff ff       	call   c00095d2 <VAS::getPageTableEntry(unsigned long)>
c000a161:	8b 10                	mov    edx,DWORD PTR [eax]
c000a163:	89 d1                	mov    ecx,edx
c000a165:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a16b:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a171:	09 cf                	or     edi,ecx
c000a173:	89 38                	mov    DWORD PTR [eax],edi
c000a175:	89 14 24             	mov    DWORD PTR [esp],edx
c000a178:	ff 05 a8 2f 02 c0    	inc    DWORD PTR ds:0xc0022fa8
c000a17e:	e8 18 d9 ff ff       	call   c0007a9b <Phys::freePage(unsigned long)>
c000a183:	0f 20 d8             	mov    eax,cr3
c000a186:	0f 22 d8             	mov    cr3,eax
c000a189:	a1 a4 2f 02 c0       	mov    eax,ds:0xc0022fa4
c000a18e:	c7 44 24 40 1d e3 01 c0 	mov    DWORD PTR [esp+0x40],0xc001e31d
c000a196:	8d 50 01             	lea    edx,[eax+0x1]
c000a199:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a19d:	89 15 a4 2f 02 c0    	mov    DWORD PTR ds:0xc0022fa4,edx
c000a1a3:	83 c4 2c             	add    esp,0x2c
c000a1a6:	5b                   	pop    ebx
c000a1a7:	5e                   	pop    esi
c000a1a8:	5f                   	pop    edi
c000a1a9:	5d                   	pop    ebp
c000a1aa:	e9 0b 04 00 00       	jmp    c000a5ba <Dbg::kprintf(char const*, ...)>
c000a1af:	90                   	nop

c000a1b0 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a1b0:	55                   	push   ebp
c000a1b1:	57                   	push   edi
c000a1b2:	56                   	push   esi
c000a1b3:	53                   	push   ebx
c000a1b4:	83 ec 14             	sub    esp,0x14
c000a1b7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a1bb:	53                   	push   ebx
c000a1bc:	68 2e e3 01 c0       	push   0xc001e32e
c000a1c1:	e8 f4 03 00 00       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c000a1c6:	83 c4 10             	add    esp,0x10
c000a1c9:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a1cf:	74 21                	je     c000a1f2 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a1d1:	83 ec 08             	sub    esp,0x8
c000a1d4:	53                   	push   ebx
c000a1d5:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a1d9:	57                   	push   edi
c000a1da:	e8 f3 f3 ff ff       	call   c00095d2 <VAS::getPageTableEntry(unsigned long)>
c000a1df:	83 c4 10             	add    esp,0x10
c000a1e2:	89 c6                	mov    esi,eax
c000a1e4:	85 c0                	test   eax,eax
c000a1e6:	74 0a                	je     c000a1f2 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a1e8:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a1ea:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a1f0:	74 0a                	je     c000a1fc <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a1f2:	31 c0                	xor    eax,eax
c000a1f4:	83 c4 0c             	add    esp,0xc
c000a1f7:	5b                   	pop    ebx
c000a1f8:	5e                   	pop    esi
c000a1f9:	5f                   	pop    edi
c000a1fa:	5d                   	pop    ebp
c000a1fb:	c3                   	ret    
c000a1fc:	e8 fc d8 ff ff       	call   c0007afd <Phys::allocatePage()>
c000a201:	c1 ed 0b             	shr    ebp,0xb
c000a204:	8b 16                	mov    edx,DWORD PTR [esi]
c000a206:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a20c:	09 c2                	or     edx,eax
c000a20e:	81 ca 01 08 00 00    	or     edx,0x801
c000a214:	89 16                	mov    DWORD PTR [esi],edx
c000a216:	8b 35 8c ff 01 c0    	mov    esi,DWORD PTR ds:0xc001ff8c
c000a21c:	85 f6                	test   esi,esi
c000a21e:	7e 3e                	jle    c000a25e <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a220:	89 df                	mov    edi,ebx
c000a222:	31 f6                	xor    esi,esi
c000a224:	83 ec 0c             	sub    esp,0xc
c000a227:	55                   	push   ebp
c000a228:	e8 ff f1 ff ff       	call   c000942c <Virt::swapIDToSector(unsigned long)>
c000a22d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a230:	01 f0                	add    eax,esi
c000a232:	6a 01                	push   0x1
c000a234:	31 d2                	xor    edx,edx
c000a236:	46                   	inc    esi
c000a237:	52                   	push   edx
c000a238:	81 c7 00 02 00 00    	add    edi,0x200
c000a23e:	50                   	push   eax
c000a23f:	0f be 05 98 ff 01 c0 	movsx  eax,BYTE PTR ds:0xc001ff98
c000a246:	8b 0c 85 1c 53 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdace4]
c000a24d:	51                   	push   ecx
c000a24e:	e8 7d 2a 00 00       	call   c000ccd0 <LogicalDisk::read(unsigned long long, int, void*)>
c000a253:	83 c4 20             	add    esp,0x20
c000a256:	39 35 8c ff 01 c0    	cmp    DWORD PTR ds:0xc001ff8c,esi
c000a25c:	7f c6                	jg     c000a224 <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a25e:	a1 a8 2f 02 c0       	mov    eax,ds:0xc0022fa8
c000a263:	48                   	dec    eax
c000a264:	52                   	push   edx
c000a265:	a3 a8 2f 02 c0       	mov    ds:0xc0022fa8,eax
c000a26a:	50                   	push   eax
c000a26b:	53                   	push   ebx
c000a26c:	68 41 e3 01 c0       	push   0xc001e341
c000a271:	e8 44 03 00 00       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c000a276:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a279:	e8 90 f1 ff ff       	call   c000940e <Virt::freeSwapfilePage(unsigned long)>
c000a27e:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000a283:	83 c4 10             	add    esp,0x10
c000a286:	48                   	dec    eax
c000a287:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000a28c:	85 c0                	test   eax,eax
c000a28e:	75 01                	jne    c000a291 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a290:	fb                   	sti    
c000a291:	0f 20 d8             	mov    eax,cr3
c000a294:	0f 22 d8             	mov    cr3,eax
c000a297:	b0 01                	mov    al,0x1
c000a299:	e9 56 ff ff ff       	jmp    c000a1f4 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a29e <VAS::scanForEviction()>:
c000a29e:	57                   	push   edi
c000a29f:	31 ff                	xor    edi,edi
c000a2a1:	56                   	push   esi
c000a2a2:	53                   	push   ebx
c000a2a3:	83 ec 10             	sub    esp,0x10
c000a2a6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a2aa:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a2ad:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a2b3:	75 0e                	jne    c000a2c3 <VAS::scanForEviction()+0x25>
c000a2b5:	89 da                	mov    edx,ebx
c000a2b7:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a2ba:	c1 ea 16             	shr    edx,0x16
c000a2bd:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a2c1:	74 4e                	je     c000a311 <VAS::scanForEviction()+0x73>
c000a2c3:	53                   	push   ebx
c000a2c4:	56                   	push   esi
c000a2c5:	e8 08 f3 ff ff       	call   c00095d2 <VAS::getPageTableEntry(unsigned long)>
c000a2ca:	5a                   	pop    edx
c000a2cb:	8b 10                	mov    edx,DWORD PTR [eax]
c000a2cd:	59                   	pop    ecx
c000a2ce:	89 d1                	mov    ecx,edx
c000a2d0:	81 e1 01 08 00 00    	and    ecx,0x801
c000a2d6:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a2dc:	74 3e                	je     c000a31c <VAS::scanForEviction()+0x7e>
c000a2de:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a2e4:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a2ea:	76 2b                	jbe    c000a317 <VAS::scanForEviction()+0x79>
c000a2ec:	47                   	inc    edi
c000a2ed:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a2f4:	83 ff 03             	cmp    edi,0x3
c000a2f7:	74 32                	je     c000a32b <VAS::scanForEviction()+0x8d>
c000a2f9:	31 db                	xor    ebx,ebx
c000a2fb:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a301:	75 c0                	jne    c000a2c3 <VAS::scanForEviction()+0x25>
c000a303:	89 da                	mov    edx,ebx
c000a305:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a308:	c1 ea 16             	shr    edx,0x16
c000a30b:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a30f:	75 b2                	jne    c000a2c3 <VAS::scanForEviction()+0x25>
c000a311:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a317:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a31a:	eb 91                	jmp    c000a2ad <VAS::scanForEviction()+0xf>
c000a31c:	f6 c2 20             	test   dl,0x20
c000a31f:	74 13                	je     c000a334 <VAS::scanForEviction()+0x96>
c000a321:	83 e2 df             	and    edx,0xffffffdf
c000a324:	89 10                	mov    DWORD PTR [eax],edx
c000a326:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a329:	eb b3                	jmp    c000a2de <VAS::scanForEviction()+0x40>
c000a32b:	83 c4 10             	add    esp,0x10
c000a32e:	31 c0                	xor    eax,eax
c000a330:	5b                   	pop    ebx
c000a331:	5e                   	pop    esi
c000a332:	5f                   	pop    edi
c000a333:	c3                   	ret    
c000a334:	83 ec 08             	sub    esp,0x8
c000a337:	89 d0                	mov    eax,edx
c000a339:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a33e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a342:	53                   	push   ebx
c000a343:	68 56 e3 01 c0       	push   0xc001e356
c000a348:	e8 6d 02 00 00       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c000a34d:	58                   	pop    eax
c000a34e:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a351:	5a                   	pop    edx
c000a352:	51                   	push   ecx
c000a353:	56                   	push   esi
c000a354:	e8 95 fd ff ff       	call   c000a0ee <VAS::evict(unsigned long)>
c000a359:	5b                   	pop    ebx
c000a35a:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a35d:	5f                   	pop    edi
c000a35e:	50                   	push   eax
c000a35f:	68 6a e3 01 c0       	push   0xc001e36a
c000a364:	e8 51 02 00 00       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c000a369:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a370:	83 c4 10             	add    esp,0x10
c000a373:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a377:	83 c4 10             	add    esp,0x10
c000a37a:	5b                   	pop    ebx
c000a37b:	5e                   	pop    esi
c000a37c:	5f                   	pop    edi
c000a37d:	c3                   	ret    

c000a37e <mapVASFirstTime>:
c000a37e:	55                   	push   ebp
c000a37f:	57                   	push   edi
c000a380:	56                   	push   esi
c000a381:	53                   	push   ebx
c000a382:	83 ec 0c             	sub    esp,0xc
c000a385:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a38a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a38d:	4a                   	dec    edx
c000a38e:	0f 84 c8 00 00 00    	je     c000a45c <mapVASFirstTime+0xde>
c000a394:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a397:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a39a:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a39f:	c1 e5 15             	shl    ebp,0x15
c000a3a2:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a3a7:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a3ad:	29 eb                	sub    ebx,ebp
c000a3af:	29 ef                	sub    edi,ebp
c000a3b1:	e8 47 d7 ff ff       	call   c0007afd <Phys::allocatePage()>
c000a3b6:	83 ec 0c             	sub    esp,0xc
c000a3b9:	68 03 04 00 00       	push   0x403
c000a3be:	6a 01                	push   0x1
c000a3c0:	53                   	push   ebx
c000a3c1:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a3c7:	50                   	push   eax
c000a3c8:	56                   	push   esi
c000a3c9:	e8 ec f8 ff ff       	call   c0009cba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a3ce:	83 c4 20             	add    esp,0x20
c000a3d1:	39 fb                	cmp    ebx,edi
c000a3d3:	75 dc                	jne    c000a3b1 <mapVASFirstTime+0x33>
c000a3d5:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a3da:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a3df:	29 eb                	sub    ebx,ebp
c000a3e1:	29 ef                	sub    edi,ebp
c000a3e3:	e8 15 d7 ff ff       	call   c0007afd <Phys::allocatePage()>
c000a3e8:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a3ec:	19 d2                	sbb    edx,edx
c000a3ee:	83 ec 0c             	sub    esp,0xc
c000a3f1:	83 e2 04             	and    edx,0x4
c000a3f4:	81 c2 03 04 00 00    	add    edx,0x403
c000a3fa:	52                   	push   edx
c000a3fb:	6a 01                	push   0x1
c000a3fd:	53                   	push   ebx
c000a3fe:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a404:	50                   	push   eax
c000a405:	56                   	push   esi
c000a406:	e8 af f8 ff ff       	call   c0009cba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a40b:	83 c4 20             	add    esp,0x20
c000a40e:	39 df                	cmp    edi,ebx
c000a410:	75 d1                	jne    c000a3e3 <mapVASFirstTime+0x65>
c000a412:	83 ec 0c             	sub    esp,0xc
c000a415:	bb 7c 20 02 c0       	mov    ebx,0xc002207c
c000a41a:	6a 04                	push   0x4
c000a41c:	81 eb 00 10 02 c0    	sub    ebx,0xc0021000
c000a422:	6a ff                	push   0xffffffff
c000a424:	c1 eb 0c             	shr    ebx,0xc
c000a427:	53                   	push   ebx
c000a428:	68 00 10 02 c0       	push   0xc0021000
c000a42d:	56                   	push   esi
c000a42e:	e8 21 f3 ff ff       	call   c0009754 <VAS::reflagRange(unsigned long, int, int, int)>
c000a433:	83 c4 14             	add    esp,0x14
c000a436:	a1 b0 2f 02 c0       	mov    eax,ds:0xc0022fb0
c000a43b:	6a 04                	push   0x4
c000a43d:	6a ff                	push   0xffffffff
c000a43f:	53                   	push   ebx
c000a440:	68 00 10 02 c0       	push   0xc0021000
c000a445:	50                   	push   eax
c000a446:	e8 09 f3 ff ff       	call   c0009754 <VAS::reflagRange(unsigned long, int, int, int)>
c000a44b:	0f 20 d8             	mov    eax,cr3
c000a44e:	0f 22 d8             	mov    cr3,eax
c000a451:	83 c4 20             	add    esp,0x20
c000a454:	83 c4 0c             	add    esp,0xc
c000a457:	5b                   	pop    ebx
c000a458:	5e                   	pop    esi
c000a459:	5f                   	pop    edi
c000a45a:	5d                   	pop    ebp
c000a45b:	c3                   	ret    
c000a45c:	83 ec 0c             	sub    esp,0xc
c000a45f:	68 7d e3 01 c0       	push   0xc001e37d
c000a464:	e8 51 01 00 00       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c000a469:	83 c4 10             	add    esp,0x10
c000a46c:	83 c4 0c             	add    esp,0xc
c000a46f:	5b                   	pop    ebx
c000a470:	5e                   	pop    esi
c000a471:	5f                   	pop    edi
c000a472:	5d                   	pop    ebp
c000a473:	c3                   	ret    

c000a474 <__cxa_atexit>:
c000a474:	31 c0                	xor    eax,eax
c000a476:	c3                   	ret    

c000a477 <__cxa_finalize>:
c000a477:	c3                   	ret    

c000a478 <__stack_chk_fail>:
c000a478:	55                   	push   ebp
c000a479:	89 e5                	mov    ebp,esp
c000a47b:	83 ec 10             	sub    esp,0x10
c000a47e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a481:	68 96 e3 01 c0       	push   0xc001e396
c000a486:	e8 2f 01 00 00       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c000a48b:	58                   	pop    eax
c000a48c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a48f:	5a                   	pop    edx
c000a490:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a493:	68 96 e3 01 c0       	push   0xc001e396
c000a498:	e8 1d 01 00 00       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c000a49d:	c7 04 24 9e e3 01 c0 	mov    DWORD PTR [esp],0xc001e39e
c000a4a4:	e8 1a 5e 00 00       	call   c00102c3 <KePanic(char const*)>
c000a4a9:	83 c4 10             	add    esp,0x10
c000a4ac:	c9                   	leave  
c000a4ad:	c3                   	ret    

c000a4ae <__cxa_pure_virtual>:
c000a4ae:	83 ec 18             	sub    esp,0x18
c000a4b1:	68 b6 e3 01 c0       	push   0xc001e3b6
c000a4b6:	e8 08 5e 00 00       	call   c00102c3 <KePanic(char const*)>
c000a4bb:	83 c4 1c             	add    esp,0x1c
c000a4be:	c3                   	ret    

c000a4bf <operator new[](unsigned long)>:
c000a4bf:	e9 5d d3 ff ff       	jmp    c0007821 <malloc>

c000a4c4 <operator delete(void*, unsigned long)>:
c000a4c4:	e9 78 d3 ff ff       	jmp    c0007841 <rfree>

c000a4c9 <operator delete[](void*)>:
c000a4c9:	e9 73 d3 ff ff       	jmp    c0007841 <rfree>

c000a4ce <operator delete[](void*, unsigned long)>:
c000a4ce:	e9 6e d3 ff ff       	jmp    c0007841 <rfree>

c000a4d3 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a4d3:	55                   	push   ebp
c000a4d4:	b9 04 00 00 00       	mov    ecx,0x4
c000a4d9:	57                   	push   edi
c000a4da:	56                   	push   esi
c000a4db:	be 0b e0 01 c0       	mov    esi,0xc001e00b
c000a4e0:	53                   	push   ebx
c000a4e1:	83 ec 20             	sub    esp,0x20
c000a4e4:	a1 0a e0 01 c0       	mov    eax,ds:0xc001e00a
c000a4e9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a4ed:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a4f1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a4f5:	a1 17 e0 01 c0       	mov    eax,ds:0xc001e017
c000a4fa:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a4fe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a502:	fc                   	cld    
c000a503:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a505:	89 ee                	mov    esi,ebp
c000a507:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a50b:	eb 02                	jmp    c000a50f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a50d:	89 c6                	mov    esi,eax
c000a50f:	31 d2                	xor    edx,edx
c000a511:	41                   	inc    ecx
c000a512:	89 f0                	mov    eax,esi
c000a514:	f7 f3                	div    ebx
c000a516:	39 de                	cmp    esi,ebx
c000a518:	73 f3                	jae    c000a50d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a51a:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a51d:	eb 02                	jmp    c000a521 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a51f:	89 c5                	mov    ebp,eax
c000a521:	31 d2                	xor    edx,edx
c000a523:	49                   	dec    ecx
c000a524:	89 e8                	mov    eax,ebp
c000a526:	f7 f3                	div    ebx
c000a528:	39 dd                	cmp    ebp,ebx
c000a52a:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a52e:	88 11                	mov    BYTE PTR [ecx],dl
c000a530:	73 ed                	jae    c000a51f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a532:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a536:	83 c4 20             	add    esp,0x20
c000a539:	5b                   	pop    ebx
c000a53a:	5e                   	pop    esi
c000a53b:	5f                   	pop    edi
c000a53c:	5d                   	pop    ebp
c000a53d:	c3                   	ret    

c000a53e <Dbg::logc(char)>:
c000a53e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a542:	f6 05 d0 2e 02 c0 10 	test   BYTE PTR ds:0xc0022ed0,0x10
c000a549:	75 12                	jne    c000a55d <Dbg::logc(char)+0x1f>
c000a54b:	ba fd 03 00 00       	mov    edx,0x3fd
c000a550:	ec                   	in     al,dx
c000a551:	a8 20                	test   al,0x20
c000a553:	74 fb                	je     c000a550 <Dbg::logc(char)+0x12>
c000a555:	ba f8 03 00 00       	mov    edx,0x3f8
c000a55a:	88 c8                	mov    al,cl
c000a55c:	ee                   	out    dx,al
c000a55d:	c3                   	ret    

c000a55e <Dbg::logs(char*)>:
c000a55e:	53                   	push   ebx
c000a55f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a563:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a566:	84 c0                	test   al,al
c000a568:	74 0f                	je     c000a579 <Dbg::logs(char*)+0x1b>
c000a56a:	50                   	push   eax
c000a56b:	43                   	inc    ebx
c000a56c:	e8 cd ff ff ff       	call   c000a53e <Dbg::logc(char)>
c000a571:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a574:	5a                   	pop    edx
c000a575:	84 c0                	test   al,al
c000a577:	75 f1                	jne    c000a56a <Dbg::logs(char*)+0xc>
c000a579:	5b                   	pop    ebx
c000a57a:	c3                   	ret    

c000a57b <Dbg::logWriteInt(unsigned int)>:
c000a57b:	83 ec 10             	sub    esp,0x10
c000a57e:	6a 0a                	push   0xa
c000a580:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a584:	50                   	push   eax
c000a585:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a589:	50                   	push   eax
c000a58a:	e8 44 ff ff ff       	call   c000a4d3 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a58f:	50                   	push   eax
c000a590:	e8 c9 ff ff ff       	call   c000a55e <Dbg::logs(char*)>
c000a595:	83 c4 20             	add    esp,0x20
c000a598:	c3                   	ret    

c000a599 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a599:	83 ec 10             	sub    esp,0x10
c000a59c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a5a0:	50                   	push   eax
c000a5a1:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a5a5:	50                   	push   eax
c000a5a6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a5aa:	52                   	push   edx
c000a5ab:	e8 23 ff ff ff       	call   c000a4d3 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a5b0:	50                   	push   eax
c000a5b1:	e8 a8 ff ff ff       	call   c000a55e <Dbg::logs(char*)>
c000a5b6:	83 c4 20             	add    esp,0x20
c000a5b9:	c3                   	ret    

c000a5ba <Dbg::kprintf(char const*, ...)>:
c000a5ba:	55                   	push   ebp
c000a5bb:	57                   	push   edi
c000a5bc:	56                   	push   esi
c000a5bd:	53                   	push   ebx
c000a5be:	83 ec 0c             	sub    esp,0xc
c000a5c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a5c5:	f6 05 d0 2e 02 c0 10 	test   BYTE PTR ds:0xc0022ed0,0x10
c000a5cc:	74 08                	je     c000a5d6 <Dbg::kprintf(char const*, ...)+0x1c>
c000a5ce:	83 c4 0c             	add    esp,0xc
c000a5d1:	5b                   	pop    ebx
c000a5d2:	5e                   	pop    esi
c000a5d3:	5f                   	pop    edi
c000a5d4:	5d                   	pop    ebp
c000a5d5:	c3                   	ret    
c000a5d6:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a5da:	31 ff                	xor    edi,edi
c000a5dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a5e0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a5e3:	84 c0                	test   al,al
c000a5e5:	74 e7                	je     c000a5ce <Dbg::kprintf(char const*, ...)+0x14>
c000a5e7:	8d 77 01             	lea    esi,[edi+0x1]
c000a5ea:	3c 25                	cmp    al,0x25
c000a5ec:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a5ef:	75 47                	jne    c000a638 <Dbg::kprintf(char const*, ...)+0x7e>
c000a5f1:	83 c7 02             	add    edi,0x2
c000a5f4:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a5f7:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a5fa:	83 e8 25             	sub    eax,0x25
c000a5fd:	3c 53                	cmp    al,0x53
c000a5ff:	0f 87 d2 00 00 00    	ja     c000a6d7 <Dbg::kprintf(char const*, ...)+0x11d>
c000a605:	25 ff 00 00 00       	and    eax,0xff
c000a60a:	ff 24 85 cc e3 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1c34]
c000a611:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a615:	89 c8                	mov    eax,ecx
c000a617:	83 c1 04             	add    ecx,0x4
c000a61a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a61e:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a620:	55                   	push   ebp
c000a621:	e8 55 ff ff ff       	call   c000a57b <Dbg::logWriteInt(unsigned int)>
c000a626:	58                   	pop    eax
c000a627:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a62a:	84 c0                	test   al,al
c000a62c:	74 a0                	je     c000a5ce <Dbg::kprintf(char const*, ...)+0x14>
c000a62e:	8d 77 01             	lea    esi,[edi+0x1]
c000a631:	3c 25                	cmp    al,0x25
c000a633:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a636:	74 b9                	je     c000a5f1 <Dbg::kprintf(char const*, ...)+0x37>
c000a638:	50                   	push   eax
c000a639:	89 f7                	mov    edi,esi
c000a63b:	e8 fe fe ff ff       	call   c000a53e <Dbg::logc(char)>
c000a640:	89 ee                	mov    esi,ebp
c000a642:	58                   	pop    eax
c000a643:	eb e2                	jmp    c000a627 <Dbg::kprintf(char const*, ...)+0x6d>
c000a645:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a649:	89 c8                	mov    eax,ecx
c000a64b:	83 c1 04             	add    ecx,0x4
c000a64e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a650:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a654:	50                   	push   eax
c000a655:	e8 04 ff ff ff       	call   c000a55e <Dbg::logs(char*)>
c000a65a:	58                   	pop    eax
c000a65b:	eb ca                	jmp    c000a627 <Dbg::kprintf(char const*, ...)+0x6d>
c000a65d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a661:	89 d0                	mov    eax,edx
c000a663:	83 c2 04             	add    edx,0x4
c000a666:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a66a:	8b 00                	mov    eax,DWORD PTR [eax]
c000a66c:	50                   	push   eax
c000a66d:	e8 09 ff ff ff       	call   c000a57b <Dbg::logWriteInt(unsigned int)>
c000a672:	58                   	pop    eax
c000a673:	eb b2                	jmp    c000a627 <Dbg::kprintf(char const*, ...)+0x6d>
c000a675:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a679:	89 d0                	mov    eax,edx
c000a67b:	83 c2 04             	add    edx,0x4
c000a67e:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a681:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a685:	50                   	push   eax
c000a686:	e8 b3 fe ff ff       	call   c000a53e <Dbg::logc(char)>
c000a68b:	58                   	pop    eax
c000a68c:	eb 99                	jmp    c000a627 <Dbg::kprintf(char const*, ...)+0x6d>
c000a68e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a692:	89 c8                	mov    eax,ecx
c000a694:	83 c1 04             	add    ecx,0x4
c000a697:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a69b:	6a 10                	push   0x10
c000a69d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a69f:	51                   	push   ecx
c000a6a0:	e8 f4 fe ff ff       	call   c000a599 <Dbg::logWriteIntBase(unsigned int, int)>
c000a6a5:	5d                   	pop    ebp
c000a6a6:	58                   	pop    eax
c000a6a7:	e9 7b ff ff ff       	jmp    c000a627 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6ac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a6b0:	89 d0                	mov    eax,edx
c000a6b2:	83 c2 08             	add    edx,0x8
c000a6b5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a6b9:	6a 10                	push   0x10
c000a6bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000a6bd:	50                   	push   eax
c000a6be:	e8 d6 fe ff ff       	call   c000a599 <Dbg::logWriteIntBase(unsigned int, int)>
c000a6c3:	58                   	pop    eax
c000a6c4:	5a                   	pop    edx
c000a6c5:	e9 5d ff ff ff       	jmp    c000a627 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6ca:	6a 25                	push   0x25
c000a6cc:	e8 6d fe ff ff       	call   c000a53e <Dbg::logc(char)>
c000a6d1:	5a                   	pop    edx
c000a6d2:	e9 50 ff ff ff       	jmp    c000a627 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6d7:	6a 25                	push   0x25
c000a6d9:	e8 60 fe ff ff       	call   c000a53e <Dbg::logc(char)>
c000a6de:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a6e2:	50                   	push   eax
c000a6e3:	e8 56 fe ff ff       	call   c000a53e <Dbg::logc(char)>
c000a6e8:	5a                   	pop    edx
c000a6e9:	59                   	pop    ecx
c000a6ea:	e9 38 ff ff ff       	jmp    c000a627 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6ef:	90                   	nop

c000a6f0 <File::read(unsigned long long, void*, int*)>:
c000a6f0:	53                   	push   ebx
c000a6f1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6f5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a6f9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a700:	3c 19                	cmp    al,0x19
c000a702:	77 35                	ja     c000a739 <File::read(unsigned long long, void*, int*)+0x49>
c000a704:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000a70b:	85 c0                	test   eax,eax
c000a70d:	74 2a                	je     c000a739 <File::read(unsigned long long, void*, int*)+0x49>
c000a70f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a715:	85 c0                	test   eax,eax
c000a717:	74 20                	je     c000a739 <File::read(unsigned long long, void*, int*)+0x49>
c000a719:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a71d:	74 21                	je     c000a740 <File::read(unsigned long long, void*, int*)+0x50>
c000a71f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a721:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a725:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a72b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a72f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a733:	5b                   	pop    ebx
c000a734:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a737:	ff e0                	jmp    eax
c000a739:	b8 0b 00 00 00       	mov    eax,0xb
c000a73e:	eb 05                	jmp    c000a745 <File::read(unsigned long long, void*, int*)+0x55>
c000a740:	b8 05 00 00 00       	mov    eax,0x5
c000a745:	5b                   	pop    ebx
c000a746:	c3                   	ret    
c000a747:	90                   	nop

c000a748 <File::write(unsigned long long, void*, int*)>:
c000a748:	53                   	push   ebx
c000a749:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a74d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a751:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a758:	3c 19                	cmp    al,0x19
c000a75a:	77 35                	ja     c000a791 <File::write(unsigned long long, void*, int*)+0x49>
c000a75c:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000a763:	85 c0                	test   eax,eax
c000a765:	74 2a                	je     c000a791 <File::write(unsigned long long, void*, int*)+0x49>
c000a767:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a76d:	85 c0                	test   eax,eax
c000a76f:	74 20                	je     c000a791 <File::write(unsigned long long, void*, int*)+0x49>
c000a771:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a775:	74 21                	je     c000a798 <File::write(unsigned long long, void*, int*)+0x50>
c000a777:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a779:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a77d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a783:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a787:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a78b:	5b                   	pop    ebx
c000a78c:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a78f:	ff e0                	jmp    eax
c000a791:	b8 0b 00 00 00       	mov    eax,0xb
c000a796:	eb 05                	jmp    c000a79d <File::write(unsigned long long, void*, int*)+0x55>
c000a798:	b8 05 00 00 00       	mov    eax,0x5
c000a79d:	5b                   	pop    ebx
c000a79e:	c3                   	ret    
c000a79f:	90                   	nop

c000a7a0 <Directory::read(unsigned long long, void*, int*)>:
c000a7a0:	53                   	push   ebx
c000a7a1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a7a5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a7a9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a7b0:	3c 19                	cmp    al,0x19
c000a7b2:	77 35                	ja     c000a7e9 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a7b4:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000a7bb:	85 c0                	test   eax,eax
c000a7bd:	74 2a                	je     c000a7e9 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a7bf:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a7c5:	85 c0                	test   eax,eax
c000a7c7:	74 20                	je     c000a7e9 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a7c9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a7cd:	74 21                	je     c000a7f0 <Directory::read(unsigned long long, void*, int*)+0x50>
c000a7cf:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a7d1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a7d5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a7db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a7df:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a7e3:	5b                   	pop    ebx
c000a7e4:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a7e7:	ff e0                	jmp    eax
c000a7e9:	b8 0b 00 00 00       	mov    eax,0xb
c000a7ee:	eb 05                	jmp    c000a7f5 <Directory::read(unsigned long long, void*, int*)+0x55>
c000a7f0:	b8 05 00 00 00       	mov    eax,0x5
c000a7f5:	5b                   	pop    ebx
c000a7f6:	c3                   	ret    
c000a7f7:	90                   	nop

c000a7f8 <Directory::write(unsigned long long, void*, int*)>:
c000a7f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a7fc:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a803:	b8 0b 00 00 00       	mov    eax,0xb
c000a808:	80 fa 19             	cmp    dl,0x19
c000a80b:	77 18                	ja     c000a825 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a80d:	8b 14 95 20 54 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdabe0]
c000a814:	85 d2                	test   edx,edx
c000a816:	74 0d                	je     c000a825 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a818:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000a81f:	19 c0                	sbb    eax,eax
c000a821:	83 e0 0a             	and    eax,0xa
c000a824:	40                   	inc    eax
c000a825:	c3                   	ret    

c000a826 <File::isAtty()>:
c000a826:	31 c0                	xor    eax,eax
c000a828:	c3                   	ret    
c000a829:	90                   	nop

c000a82a <Directory::isAtty()>:
c000a82a:	31 c0                	xor    eax,eax
c000a82c:	c3                   	ret    
c000a82d:	90                   	nop

c000a82e <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a82e:	b8 0a 00 00 00       	mov    eax,0xa
c000a833:	c3                   	ret    

c000a834 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a834:	b8 0a 00 00 00       	mov    eax,0xa
c000a839:	c3                   	ret    

c000a83a <Filesystem::allocateSwapfile(char const*, int)>:
c000a83a:	31 c0                	xor    eax,eax
c000a83c:	31 d2                	xor    edx,edx
c000a83e:	c3                   	ret    
c000a83f:	90                   	nop

c000a840 <File::~File()>:
c000a840:	83 ec 0c             	sub    esp,0xc
c000a843:	ba 8c e5 01 c0       	mov    edx,0xc001e58c
c000a848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a84c:	89 10                	mov    DWORD PTR [eax],edx
c000a84e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a852:	83 ec 0c             	sub    esp,0xc
c000a855:	50                   	push   eax
c000a856:	e8 41 e8 ff ff       	call   c000909c <UnixFile::~UnixFile()>
c000a85b:	83 c4 10             	add    esp,0x10
c000a85e:	90                   	nop
c000a85f:	83 c4 0c             	add    esp,0xc
c000a862:	c3                   	ret    
c000a863:	90                   	nop

c000a864 <File::~File()>:
c000a864:	83 ec 0c             	sub    esp,0xc
c000a867:	83 ec 0c             	sub    esp,0xc
c000a86a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a86e:	e8 cd ff ff ff       	call   c000a840 <File::~File()>
c000a873:	83 c4 10             	add    esp,0x10
c000a876:	83 ec 08             	sub    esp,0x8
c000a879:	68 14 01 00 00       	push   0x114
c000a87e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a882:	e8 3d fc ff ff       	call   c000a4c4 <operator delete(void*, unsigned long)>
c000a887:	83 c4 10             	add    esp,0x10
c000a88a:	83 c4 0c             	add    esp,0xc
c000a88d:	c3                   	ret    

c000a88e <Directory::~Directory()>:
c000a88e:	83 ec 0c             	sub    esp,0xc
c000a891:	ba a8 e5 01 c0       	mov    edx,0xc001e5a8
c000a896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a89a:	89 10                	mov    DWORD PTR [eax],edx
c000a89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8a0:	83 ec 0c             	sub    esp,0xc
c000a8a3:	50                   	push   eax
c000a8a4:	e8 f3 e7 ff ff       	call   c000909c <UnixFile::~UnixFile()>
c000a8a9:	83 c4 10             	add    esp,0x10
c000a8ac:	90                   	nop
c000a8ad:	83 c4 0c             	add    esp,0xc
c000a8b0:	c3                   	ret    
c000a8b1:	90                   	nop

c000a8b2 <Directory::~Directory()>:
c000a8b2:	83 ec 0c             	sub    esp,0xc
c000a8b5:	83 ec 0c             	sub    esp,0xc
c000a8b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8bc:	e8 cd ff ff ff       	call   c000a88e <Directory::~Directory()>
c000a8c1:	83 c4 10             	add    esp,0x10
c000a8c4:	83 ec 08             	sub    esp,0x8
c000a8c7:	68 14 01 00 00       	push   0x114
c000a8cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8d0:	e8 ef fb ff ff       	call   c000a4c4 <operator delete(void*, unsigned long)>
c000a8d5:	83 c4 10             	add    esp,0x10
c000a8d8:	83 c4 0c             	add    esp,0xc
c000a8db:	c3                   	ret    

c000a8dc <Filesystem::Filesystem()>:
c000a8dc:	ba 24 e5 01 c0       	mov    edx,0xc001e524
c000a8e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8e5:	89 10                	mov    DWORD PTR [eax],edx
c000a8e7:	8b 15 b4 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022fb4
c000a8ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8f1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a8f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8f8:	a3 b4 2f 02 c0       	mov    ds:0xc0022fb4,eax
c000a8fd:	90                   	nop
c000a8fe:	c3                   	ret    
c000a8ff:	90                   	nop

c000a900 <Filesystem::~Filesystem()>:
c000a900:	ba 24 e5 01 c0       	mov    edx,0xc001e524
c000a905:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a909:	89 10                	mov    DWORD PTR [eax],edx
c000a90b:	90                   	nop
c000a90c:	c3                   	ret    
c000a90d:	90                   	nop

c000a90e <Filesystem::~Filesystem()>:
c000a90e:	83 ec 0c             	sub    esp,0xc
c000a911:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a915:	e8 e6 ff ff ff       	call   c000a900 <Filesystem::~Filesystem()>
c000a91a:	83 c4 04             	add    esp,0x4
c000a91d:	83 ec 08             	sub    esp,0x8
c000a920:	6a 08                	push   0x8
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	e8 99 fb ff ff       	call   c000a4c4 <operator delete(void*, unsigned long)>
c000a92b:	83 c4 10             	add    esp,0x10
c000a92e:	83 c4 0c             	add    esp,0xc
c000a931:	c3                   	ret    

c000a932 <Fs::getcwd(Process*, char*, int)>:
c000a932:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a936:	31 c0                	xor    eax,eax
c000a938:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a93b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a93f:	7d 15                	jge    c000a956 <Fs::getcwd(Process*, char*, int)+0x24>
c000a941:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a945:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a94c:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a94f:	84 c9                	test   cl,cl
c000a951:	74 06                	je     c000a959 <Fs::getcwd(Process*, char*, int)+0x27>
c000a953:	40                   	inc    eax
c000a954:	eb e2                	jmp    c000a938 <Fs::getcwd(Process*, char*, int)+0x6>
c000a956:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a959:	31 c0                	xor    eax,eax
c000a95b:	c3                   	ret    

c000a95c <Fs::initVFS()>:
c000a95c:	83 ec 18             	sub    esp,0x18
c000a95f:	6a 08                	push   0x8
c000a961:	e8 bb ce ff ff       	call   c0007821 <malloc>
c000a966:	89 04 24             	mov    DWORD PTR [esp],eax
c000a969:	e8 8e c7 00 00       	call   c00170fc <FAT::FAT()>
c000a96e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000a975:	e8 a7 ce ff ff       	call   c0007821 <malloc>
c000a97a:	89 04 24             	mov    DWORD PTR [esp],eax
c000a97d:	e8 a6 d5 00 00       	call   c0017f28 <ISO9660::ISO9660()>
c000a982:	83 c4 1c             	add    esp,0x1c
c000a985:	c3                   	ret    

c000a986 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000a986:	55                   	push   ebp
c000a987:	57                   	push   edi
c000a988:	56                   	push   esi
c000a989:	53                   	push   ebx
c000a98a:	81 ec 10 04 00 00    	sub    esp,0x410
c000a990:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000a997:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000a99e:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000a9a5:	68 00 04 00 00       	push   0x400
c000a9aa:	6a 00                	push   0x0
c000a9ac:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000a9b0:	56                   	push   esi
c000a9b1:	e8 1a 5b ff ff       	call   c00004d0 <memset>
c000a9b6:	83 c4 10             	add    esp,0x10
c000a9b9:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000a9bd:	75 0b                	jne    c000a9ca <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000a9bf:	50                   	push   eax
c000a9c0:	50                   	push   eax
c000a9c1:	57                   	push   edi
c000a9c2:	56                   	push   esi
c000a9c3:	e8 38 5c ff ff       	call   c0000600 <strcpy>
c000a9c8:	eb 41                	jmp    c000aa0b <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000a9ca:	8a 07                	mov    al,BYTE PTR [edi]
c000a9cc:	3c 5c                	cmp    al,0x5c
c000a9ce:	74 04                	je     c000a9d4 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000a9d0:	3c 2f                	cmp    al,0x2f
c000a9d2:	75 18                	jne    c000a9ec <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000a9d4:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a9d7:	3c 60                	cmp    al,0x60
c000a9d9:	7e 03                	jle    c000a9de <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000a9db:	83 e8 20             	sub    eax,0x20
c000a9de:	88 04 24             	mov    BYTE PTR [esp],al
c000a9e1:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a9e8:	50                   	push   eax
c000a9e9:	50                   	push   eax
c000a9ea:	eb 18                	jmp    c000aa04 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000a9ec:	50                   	push   eax
c000a9ed:	50                   	push   eax
c000a9ee:	55                   	push   ebp
c000a9ef:	56                   	push   esi
c000a9f0:	e8 0b 5c ff ff       	call   c0000600 <strcpy>
c000a9f5:	5a                   	pop    edx
c000a9f6:	59                   	pop    ecx
c000a9f7:	68 c9 f2 01 c0       	push   0xc001f2c9
c000a9fc:	56                   	push   esi
c000a9fd:	e8 be 5d ff ff       	call   c00007c0 <strcat>
c000aa02:	5d                   	pop    ebp
c000aa03:	58                   	pop    eax
c000aa04:	57                   	push   edi
c000aa05:	56                   	push   esi
c000aa06:	e8 b5 5d ff ff       	call   c00007c0 <strcat>
c000aa0b:	83 c4 10             	add    esp,0x10
c000aa0e:	8a 04 24             	mov    al,BYTE PTR [esp]
c000aa11:	3c 60                	cmp    al,0x60
c000aa13:	7e 03                	jle    c000aa18 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000aa15:	83 e8 20             	sub    eax,0x20
c000aa18:	88 04 24             	mov    BYTE PTR [esp],al
c000aa1b:	88 03                	mov    BYTE PTR [ebx],al
c000aa1d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aa24:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000aa2a:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000aa2e:	bf 03 00 00 00       	mov    edi,0x3
c000aa33:	b8 03 00 00 00       	mov    eax,0x3
c000aa38:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000aa3b:	84 d2                	test   dl,dl
c000aa3d:	0f 84 91 00 00 00    	je     c000aad4 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000aa43:	8d 4f 01             	lea    ecx,[edi+0x1]
c000aa46:	80 fa 5c             	cmp    dl,0x5c
c000aa49:	74 05                	je     c000aa50 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000aa4b:	80 fa 2f             	cmp    dl,0x2f
c000aa4e:	75 12                	jne    c000aa62 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000aa50:	89 c5                	mov    ebp,eax
c000aa52:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aa57:	74 09                	je     c000aa62 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000aa59:	40                   	inc    eax
c000aa5a:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000aa5e:	89 cf                	mov    edi,ecx
c000aa60:	eb d6                	jmp    c000aa38 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000aa62:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000aa67:	75 5b                	jne    c000aac4 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000aa69:	80 fa 2e             	cmp    dl,0x2e
c000aa6c:	75 56                	jne    c000aac4 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000aa6e:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000aa72:	74 19                	je     c000aa8d <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000aa74:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aa79:	74 53                	je     c000aace <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aa7b:	89 f9                	mov    ecx,edi
c000aa7d:	41                   	inc    ecx
c000aa7e:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aa81:	80 fa 2f             	cmp    dl,0x2f
c000aa84:	74 f7                	je     c000aa7d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aa86:	80 fa 5c             	cmp    dl,0x5c
c000aa89:	74 f2                	je     c000aa7d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aa8b:	eb d1                	jmp    c000aa5e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa8d:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aa92:	74 3a                	je     c000aace <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aa94:	83 f8 03             	cmp    eax,0x3
c000aa97:	74 c5                	je     c000aa5e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa99:	41                   	inc    ecx
c000aa9a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aa9d:	80 fa 2f             	cmp    dl,0x2f
c000aaa0:	74 f7                	je     c000aa99 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aaa2:	80 fa 5c             	cmp    dl,0x5c
c000aaa5:	74 f2                	je     c000aa99 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aaa7:	48                   	dec    eax
c000aaa8:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aaac:	75 06                	jne    c000aab4 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000aaae:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aab2:	eb f3                	jmp    c000aaa7 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000aab4:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aab8:	74 07                	je     c000aac1 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000aaba:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aabe:	48                   	dec    eax
c000aabf:	eb f3                	jmp    c000aab4 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000aac1:	40                   	inc    eax
c000aac2:	eb 9a                	jmp    c000aa5e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aac4:	80 fa 2f             	cmp    dl,0x2f
c000aac7:	74 95                	je     c000aa5e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aac9:	80 fa 5c             	cmp    dl,0x5c
c000aacc:	74 90                	je     c000aa5e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aace:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000aad1:	40                   	inc    eax
c000aad2:	eb 8a                	jmp    c000aa5e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aad4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aad8:	83 ec 0c             	sub    esp,0xc
c000aadb:	53                   	push   ebx
c000aadc:	e8 5f 5a ff ff       	call   c0000540 <strlen>
c000aae1:	83 c4 10             	add    esp,0x10
c000aae4:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000aae9:	75 26                	jne    c000ab11 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000aaeb:	83 ec 0c             	sub    esp,0xc
c000aaee:	53                   	push   ebx
c000aaef:	e8 4c 5a ff ff       	call   c0000540 <strlen>
c000aaf4:	83 c4 10             	add    esp,0x10
c000aaf7:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000aafc:	74 26                	je     c000ab24 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000aafe:	83 ec 0c             	sub    esp,0xc
c000ab01:	53                   	push   ebx
c000ab02:	e8 39 5a ff ff       	call   c0000540 <strlen>
c000ab07:	83 c4 10             	add    esp,0x10
c000ab0a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000ab0f:	eb c7                	jmp    c000aad8 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000ab11:	83 ec 0c             	sub    esp,0xc
c000ab14:	53                   	push   ebx
c000ab15:	e8 26 5a ff ff       	call   c0000540 <strlen>
c000ab1a:	83 c4 10             	add    esp,0x10
c000ab1d:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ab22:	74 c7                	je     c000aaeb <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000ab24:	81 c4 0c 04 00 00    	add    esp,0x40c
c000ab2a:	5b                   	pop    ebx
c000ab2b:	5e                   	pop    esi
c000ab2c:	5f                   	pop    edi
c000ab2d:	5d                   	pop    ebp
c000ab2e:	c3                   	ret    
c000ab2f:	90                   	nop

c000ab30 <File::File(char const*, Process*)>:
c000ab30:	83 ec 0c             	sub    esp,0xc
c000ab33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab37:	83 ec 08             	sub    esp,0x8
c000ab3a:	6a 00                	push   0x0
c000ab3c:	50                   	push   eax
c000ab3d:	e8 78 e3 ff ff       	call   c0008eba <UnixFile::UnixFile(int)>
c000ab42:	83 c4 10             	add    esp,0x10
c000ab45:	ba 8c e5 01 c0       	mov    edx,0xc001e58c
c000ab4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab4e:	89 10                	mov    DWORD PTR [eax],edx
c000ab50:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ab54:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000ab5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab5e:	83 c0 0d             	add    eax,0xd
c000ab61:	83 ec 04             	sub    esp,0x4
c000ab64:	52                   	push   edx
c000ab65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab69:	50                   	push   eax
c000ab6a:	e8 17 fe ff ff       	call   c000a986 <Fs::standardiseFiles(char*, char const*, char const*)>
c000ab6f:	83 c4 10             	add    esp,0x10
c000ab72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab76:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000ab79:	8d 50 bf             	lea    edx,[eax-0x41]
c000ab7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab80:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000ab86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab8a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000ab8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab92:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ab98:	25 ff 00 00 00       	and    eax,0xff
c000ab9d:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000aba4:	85 c0                	test   eax,eax
c000aba6:	74 42                	je     c000abea <File::File(char const*, Process*)+0xba>
c000aba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abac:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000abb2:	25 ff 00 00 00       	and    eax,0xff
c000abb7:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000abbe:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000abc4:	85 c0                	test   eax,eax
c000abc6:	75 22                	jne    c000abea <File::File(char const*, Process*)+0xba>
c000abc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abcc:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000abd2:	25 ff 00 00 00       	and    eax,0xff
c000abd7:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000abde:	83 ec 0c             	sub    esp,0xc
c000abe1:	50                   	push   eax
c000abe2:	e8 27 20 00 00       	call   c000cc0e <LogicalDisk::mount()>
c000abe7:	83 c4 10             	add    esp,0x10
c000abea:	90                   	nop
c000abeb:	83 c4 0c             	add    esp,0xc
c000abee:	c3                   	ret    
c000abef:	90                   	nop

c000abf0 <File::open(FileOpenMode)>:
c000abf0:	53                   	push   ebx
c000abf1:	b8 0b 00 00 00       	mov    eax,0xb
c000abf6:	83 ec 08             	sub    esp,0x8
c000abf9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000abfd:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000ac04:	80 fa 19             	cmp    dl,0x19
c000ac07:	77 40                	ja     c000ac49 <File::open(FileOpenMode)+0x59>
c000ac09:	8b 14 95 20 54 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdabe0]
c000ac10:	85 d2                	test   edx,edx
c000ac12:	74 35                	je     c000ac49 <File::open(FileOpenMode)+0x59>
c000ac14:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ac1a:	85 d2                	test   edx,edx
c000ac1c:	74 2b                	je     c000ac49 <File::open(FileOpenMode)+0x59>
c000ac1e:	b8 06 00 00 00       	mov    eax,0x6
c000ac23:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000ac27:	75 20                	jne    c000ac49 <File::open(FileOpenMode)+0x59>
c000ac29:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac2b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000ac31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac35:	51                   	push   ecx
c000ac36:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000ac39:	51                   	push   ecx
c000ac3a:	52                   	push   edx
c000ac3b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ac3e:	83 c4 10             	add    esp,0x10
c000ac41:	85 c0                	test   eax,eax
c000ac43:	75 04                	jne    c000ac49 <File::open(FileOpenMode)+0x59>
c000ac45:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000ac49:	83 c4 08             	add    esp,0x8
c000ac4c:	5b                   	pop    ebx
c000ac4d:	c3                   	ret    

c000ac4e <File::close()>:
c000ac4e:	53                   	push   ebx
c000ac4f:	b8 0b 00 00 00       	mov    eax,0xb
c000ac54:	83 ec 08             	sub    esp,0x8
c000ac57:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ac5b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ac62:	80 fa 19             	cmp    dl,0x19
c000ac65:	77 41                	ja     c000aca8 <File::close()+0x5a>
c000ac67:	8b 1c 95 20 54 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdabe0]
c000ac6e:	85 db                	test   ebx,ebx
c000ac70:	74 36                	je     c000aca8 <File::close()+0x5a>
c000ac72:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000ac79:	74 2d                	je     c000aca8 <File::close()+0x5a>
c000ac7b:	b8 05 00 00 00       	mov    eax,0x5
c000ac80:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ac84:	74 22                	je     c000aca8 <File::close()+0x5a>
c000ac86:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000ac8a:	8b 04 95 20 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdabe0]
c000ac91:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ac97:	53                   	push   ebx
c000ac98:	53                   	push   ebx
c000ac99:	8b 10                	mov    edx,DWORD PTR [eax]
c000ac9b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000aca1:	50                   	push   eax
c000aca2:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000aca5:	83 c4 10             	add    esp,0x10
c000aca8:	83 c4 08             	add    esp,0x8
c000acab:	5b                   	pop    ebx
c000acac:	c3                   	ret    
c000acad:	90                   	nop

c000acae <File::seek(unsigned long long)>:
c000acae:	56                   	push   esi
c000acaf:	53                   	push   ebx
c000acb0:	b8 0b 00 00 00       	mov    eax,0xb
c000acb5:	51                   	push   ecx
c000acb6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000acba:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000acbe:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000acc5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000acc9:	80 fa 19             	cmp    dl,0x19
c000accc:	77 31                	ja     c000acff <File::seek(unsigned long long)+0x51>
c000acce:	8b 14 95 20 54 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdabe0]
c000acd5:	85 d2                	test   edx,edx
c000acd7:	74 26                	je     c000acff <File::seek(unsigned long long)+0x51>
c000acd9:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000acdf:	85 d2                	test   edx,edx
c000ace1:	74 1c                	je     c000acff <File::seek(unsigned long long)+0x51>
c000ace3:	b8 05 00 00 00       	mov    eax,0x5
c000ace8:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000acec:	74 11                	je     c000acff <File::seek(unsigned long long)+0x51>
c000acee:	8b 02                	mov    eax,DWORD PTR [edx]
c000acf0:	53                   	push   ebx
c000acf1:	51                   	push   ecx
c000acf2:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000acf8:	52                   	push   edx
c000acf9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	5a                   	pop    edx
c000ad00:	5b                   	pop    ebx
c000ad01:	5e                   	pop    esi
c000ad02:	c3                   	ret    
c000ad03:	90                   	nop

c000ad04 <File::tell(unsigned long long*)>:
c000ad04:	83 ec 0c             	sub    esp,0xc
c000ad07:	b8 0b 00 00 00       	mov    eax,0xb
c000ad0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ad10:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ad17:	80 fa 19             	cmp    dl,0x19
c000ad1a:	77 34                	ja     c000ad50 <File::tell(unsigned long long*)+0x4c>
c000ad1c:	8b 14 95 20 54 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdabe0]
c000ad23:	85 d2                	test   edx,edx
c000ad25:	74 29                	je     c000ad50 <File::tell(unsigned long long*)+0x4c>
c000ad27:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ad2d:	85 d2                	test   edx,edx
c000ad2f:	74 1f                	je     c000ad50 <File::tell(unsigned long long*)+0x4c>
c000ad31:	b8 05 00 00 00       	mov    eax,0x5
c000ad36:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ad3a:	74 14                	je     c000ad50 <File::tell(unsigned long long*)+0x4c>
c000ad3c:	50                   	push   eax
c000ad3d:	8b 02                	mov    eax,DWORD PTR [edx]
c000ad3f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad43:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ad49:	52                   	push   edx
c000ad4a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	83 c4 0c             	add    esp,0xc
c000ad53:	c3                   	ret    

c000ad54 <File::rewind()>:
c000ad54:	83 ec 10             	sub    esp,0x10
c000ad57:	6a 00                	push   0x0
c000ad59:	6a 00                	push   0x0
c000ad5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad5f:	e8 4a ff ff ff       	call   c000acae <File::seek(unsigned long long)>
c000ad64:	83 c4 1c             	add    esp,0x1c
c000ad67:	c3                   	ret    

c000ad68 <File::unlink()>:
c000ad68:	83 ec 0c             	sub    esp,0xc
c000ad6b:	b8 0b 00 00 00       	mov    eax,0xb
c000ad70:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad74:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad7b:	80 f9 19             	cmp    cl,0x19
c000ad7e:	77 2f                	ja     c000adaf <File::unlink()+0x47>
c000ad80:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000ad87:	85 c9                	test   ecx,ecx
c000ad89:	74 24                	je     c000adaf <File::unlink()+0x47>
c000ad8b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad91:	85 c9                	test   ecx,ecx
c000ad93:	74 1a                	je     c000adaf <File::unlink()+0x47>
c000ad95:	b8 06 00 00 00       	mov    eax,0x6
c000ad9a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad9e:	75 0f                	jne    c000adaf <File::unlink()+0x47>
c000ada0:	83 c2 0d             	add    edx,0xd
c000ada3:	50                   	push   eax
c000ada4:	50                   	push   eax
c000ada5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ada7:	52                   	push   edx
c000ada8:	51                   	push   ecx
c000ada9:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000adac:	83 c4 10             	add    esp,0x10
c000adaf:	83 c4 0c             	add    esp,0xc
c000adb2:	c3                   	ret    
c000adb3:	90                   	nop

c000adb4 <File::rename(char const*)>:
c000adb4:	83 ec 0c             	sub    esp,0xc
c000adb7:	b8 0b 00 00 00       	mov    eax,0xb
c000adbc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000adc0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000adc7:	80 f9 19             	cmp    cl,0x19
c000adca:	77 32                	ja     c000adfe <File::rename(char const*)+0x4a>
c000adcc:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000add3:	85 c9                	test   ecx,ecx
c000add5:	74 27                	je     c000adfe <File::rename(char const*)+0x4a>
c000add7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000addd:	85 c9                	test   ecx,ecx
c000addf:	74 1d                	je     c000adfe <File::rename(char const*)+0x4a>
c000ade1:	b8 06 00 00 00       	mov    eax,0x6
c000ade6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000adea:	75 12                	jne    c000adfe <File::rename(char const*)+0x4a>
c000adec:	83 c2 0d             	add    edx,0xd
c000adef:	50                   	push   eax
c000adf0:	8b 01                	mov    eax,DWORD PTR [ecx]
c000adf2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000adf6:	52                   	push   edx
c000adf7:	51                   	push   ecx
c000adf8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000adfb:	83 c4 10             	add    esp,0x10
c000adfe:	83 c4 0c             	add    esp,0xc
c000ae01:	c3                   	ret    

c000ae02 <File::chfatattr(unsigned char, unsigned char)>:
c000ae02:	57                   	push   edi
c000ae03:	b8 0b 00 00 00       	mov    eax,0xb
c000ae08:	56                   	push   esi
c000ae09:	53                   	push   ebx
c000ae0a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae0e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ae12:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae19:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ae1d:	80 f9 19             	cmp    cl,0x19
c000ae20:	77 37                	ja     c000ae59 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae22:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000ae29:	85 c9                	test   ecx,ecx
c000ae2b:	74 2c                	je     c000ae59 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae2d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ae33:	85 c9                	test   ecx,ecx
c000ae35:	74 22                	je     c000ae59 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae37:	b8 06 00 00 00       	mov    eax,0x6
c000ae3c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae40:	75 17                	jne    c000ae59 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae42:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ae44:	89 f0                	mov    eax,esi
c000ae46:	83 c2 0d             	add    edx,0xd
c000ae49:	0f b6 f0             	movzx  esi,al
c000ae4c:	0f b6 db             	movzx  ebx,bl
c000ae4f:	56                   	push   esi
c000ae50:	53                   	push   ebx
c000ae51:	52                   	push   edx
c000ae52:	51                   	push   ecx
c000ae53:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000ae56:	83 c4 10             	add    esp,0x10
c000ae59:	5b                   	pop    ebx
c000ae5a:	5e                   	pop    esi
c000ae5b:	5f                   	pop    edi
c000ae5c:	c3                   	ret    
c000ae5d:	90                   	nop

c000ae5e <File::exists()>:
c000ae5e:	83 ec 0c             	sub    esp,0xc
c000ae61:	31 c0                	xor    eax,eax
c000ae63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae67:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae6e:	80 f9 19             	cmp    cl,0x19
c000ae71:	77 24                	ja     c000ae97 <File::exists()+0x39>
c000ae73:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000ae7a:	85 c9                	test   ecx,ecx
c000ae7c:	74 19                	je     c000ae97 <File::exists()+0x39>
c000ae7e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ae84:	85 c9                	test   ecx,ecx
c000ae86:	74 0f                	je     c000ae97 <File::exists()+0x39>
c000ae88:	83 c2 0d             	add    edx,0xd
c000ae8b:	50                   	push   eax
c000ae8c:	50                   	push   eax
c000ae8d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae8f:	52                   	push   edx
c000ae90:	51                   	push   ecx
c000ae91:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000ae94:	83 c4 10             	add    esp,0x10
c000ae97:	83 c4 0c             	add    esp,0xc
c000ae9a:	c3                   	ret    
c000ae9b:	90                   	nop

c000ae9c <File::stat(unsigned long long*, bool*)>:
c000ae9c:	56                   	push   esi
c000ae9d:	53                   	push   ebx
c000ae9e:	50                   	push   eax
c000ae9f:	b8 0b 00 00 00       	mov    eax,0xb
c000aea4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aea8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000aeac:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000aeb3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aeb7:	80 f9 19             	cmp    cl,0x19
c000aeba:	77 3d                	ja     c000aef9 <File::stat(unsigned long long*, bool*)+0x5d>
c000aebc:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000aec3:	85 c9                	test   ecx,ecx
c000aec5:	74 32                	je     c000aef9 <File::stat(unsigned long long*, bool*)+0x5d>
c000aec7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000aecd:	85 c9                	test   ecx,ecx
c000aecf:	74 28                	je     c000aef9 <File::stat(unsigned long long*, bool*)+0x5d>
c000aed1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000aed3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000aed7:	74 13                	je     c000aeec <File::stat(unsigned long long*, bool*)+0x50>
c000aed9:	83 ec 04             	sub    esp,0x4
c000aedc:	56                   	push   esi
c000aedd:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000aee3:	51                   	push   ecx
c000aee4:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000aee7:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000aeea:	eb 0a                	jmp    c000aef6 <File::stat(unsigned long long*, bool*)+0x5a>
c000aeec:	53                   	push   ebx
c000aeed:	83 c2 0d             	add    edx,0xd
c000aef0:	56                   	push   esi
c000aef1:	52                   	push   edx
c000aef2:	51                   	push   ecx
c000aef3:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	5a                   	pop    edx
c000aefa:	5b                   	pop    ebx
c000aefb:	5e                   	pop    esi
c000aefc:	c3                   	ret    

c000aefd <Fs::setcwd(Process*, char*)>:
c000aefd:	55                   	push   ebp
c000aefe:	57                   	push   edi
c000aeff:	56                   	push   esi
c000af00:	53                   	push   ebx
c000af01:	81 ec 20 02 00 00    	sub    esp,0x220
c000af07:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000af0e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000af14:	57                   	push   edi
c000af15:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000af1c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000af20:	56                   	push   esi
c000af21:	e8 60 fa ff ff       	call   c000a986 <Fs::standardiseFiles(char*, char const*, char const*)>
c000af26:	89 34 24             	mov    DWORD PTR [esp],esi
c000af29:	e8 12 56 ff ff       	call   c0000540 <strlen>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	83 f8 02             	cmp    eax,0x2
c000af34:	77 15                	ja     c000af4b <Fs::setcwd(Process*, char*)+0x4e>
c000af36:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000af3b:	83 eb 41             	sub    ebx,0x41
c000af3e:	8b 04 9d 20 54 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdabe0]
c000af45:	85 c0                	test   eax,eax
c000af47:	75 1c                	jne    c000af65 <Fs::setcwd(Process*, char*)+0x68>
c000af49:	eb 2f                	jmp    c000af7a <Fs::setcwd(Process*, char*)+0x7d>
c000af4b:	83 ec 0c             	sub    esp,0xc
c000af4e:	56                   	push   esi
c000af4f:	e8 ec 55 ff ff       	call   c0000540 <strlen>
c000af54:	83 c4 10             	add    esp,0x10
c000af57:	83 f8 03             	cmp    eax,0x3
c000af5a:	75 57                	jne    c000afb3 <Fs::setcwd(Process*, char*)+0xb6>
c000af5c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000af61:	75 50                	jne    c000afb3 <Fs::setcwd(Process*, char*)+0xb6>
c000af63:	eb d1                	jmp    c000af36 <Fs::setcwd(Process*, char*)+0x39>
c000af65:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000af6c:	75 0c                	jne    c000af7a <Fs::setcwd(Process*, char*)+0x7d>
c000af6e:	83 ec 0c             	sub    esp,0xc
c000af71:	50                   	push   eax
c000af72:	e8 97 1c 00 00       	call   c000cc0e <LogicalDisk::mount()>
c000af77:	83 c4 10             	add    esp,0x10
c000af7a:	b8 03 00 00 00       	mov    eax,0x3
c000af7f:	83 fb 19             	cmp    ebx,0x19
c000af82:	0f 87 c6 00 00 00    	ja     c000b04e <Fs::setcwd(Process*, char*)+0x151>
c000af88:	8b 14 9d 20 54 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdabe0]
c000af8f:	b8 05 00 00 00       	mov    eax,0x5
c000af94:	85 d2                	test   edx,edx
c000af96:	0f 84 b2 00 00 00    	je     c000b04e <Fs::setcwd(Process*, char*)+0x151>
c000af9c:	b8 06 00 00 00       	mov    eax,0x6
c000afa1:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000afa8:	0f 85 92 00 00 00    	jne    c000b040 <Fs::setcwd(Process*, char*)+0x143>
c000afae:	e9 9b 00 00 00       	jmp    c000b04e <Fs::setcwd(Process*, char*)+0x151>
c000afb3:	83 ec 0c             	sub    esp,0xc
c000afb6:	68 14 01 00 00       	push   0x114
c000afbb:	e8 61 c8 ff ff       	call   c0007821 <malloc>
c000afc0:	83 c4 0c             	add    esp,0xc
c000afc3:	89 c3                	mov    ebx,eax
c000afc5:	55                   	push   ebp
c000afc6:	56                   	push   esi
c000afc7:	50                   	push   eax
c000afc8:	e8 63 fb ff ff       	call   c000ab30 <File::File(char const*, Process*)>
c000afcd:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000afd2:	83 c4 0c             	add    esp,0xc
c000afd5:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000afd9:	50                   	push   eax
c000afda:	8d 44 24 10          	lea    eax,[esp+0x10]
c000afde:	50                   	push   eax
c000afdf:	53                   	push   ebx
c000afe0:	e8 b7 fe ff ff       	call   c000ae9c <File::stat(unsigned long long*, bool*)>
c000afe5:	83 c4 10             	add    esp,0x10
c000afe8:	83 f8 02             	cmp    eax,0x2
c000afeb:	74 27                	je     c000b014 <Fs::setcwd(Process*, char*)+0x117>
c000afed:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000aff2:	75 1c                	jne    c000b010 <Fs::setcwd(Process*, char*)+0x113>
c000aff4:	b8 02 00 00 00       	mov    eax,0x2
c000aff9:	85 db                	test   ebx,ebx
c000affb:	74 51                	je     c000b04e <Fs::setcwd(Process*, char*)+0x151>
c000affd:	83 ec 0c             	sub    esp,0xc
c000b000:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b002:	53                   	push   ebx
c000b003:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b006:	83 c4 10             	add    esp,0x10
c000b009:	b8 02 00 00 00       	mov    eax,0x2
c000b00e:	eb 3e                	jmp    c000b04e <Fs::setcwd(Process*, char*)+0x151>
c000b010:	85 c0                	test   eax,eax
c000b012:	74 1c                	je     c000b030 <Fs::setcwd(Process*, char*)+0x133>
c000b014:	b8 01 00 00 00       	mov    eax,0x1
c000b019:	85 db                	test   ebx,ebx
c000b01b:	74 31                	je     c000b04e <Fs::setcwd(Process*, char*)+0x151>
c000b01d:	83 ec 0c             	sub    esp,0xc
c000b020:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b022:	53                   	push   ebx
c000b023:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	b8 01 00 00 00       	mov    eax,0x1
c000b02e:	eb 1e                	jmp    c000b04e <Fs::setcwd(Process*, char*)+0x151>
c000b030:	85 db                	test   ebx,ebx
c000b032:	74 0c                	je     c000b040 <Fs::setcwd(Process*, char*)+0x143>
c000b034:	83 ec 0c             	sub    esp,0xc
c000b037:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b039:	53                   	push   ebx
c000b03a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b03d:	83 c4 10             	add    esp,0x10
c000b040:	50                   	push   eax
c000b041:	50                   	push   eax
c000b042:	56                   	push   esi
c000b043:	57                   	push   edi
c000b044:	e8 b7 55 ff ff       	call   c0000600 <strcpy>
c000b049:	83 c4 10             	add    esp,0x10
c000b04c:	31 c0                	xor    eax,eax
c000b04e:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b054:	5b                   	pop    ebx
c000b055:	5e                   	pop    esi
c000b056:	5f                   	pop    edi
c000b057:	5d                   	pop    ebp
c000b058:	c3                   	ret    
c000b059:	90                   	nop

c000b05a <Directory::Directory(char const*, Process*)>:
c000b05a:	83 ec 0c             	sub    esp,0xc
c000b05d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b061:	83 ec 08             	sub    esp,0x8
c000b064:	6a 00                	push   0x0
c000b066:	50                   	push   eax
c000b067:	e8 4e de ff ff       	call   c0008eba <UnixFile::UnixFile(int)>
c000b06c:	83 c4 10             	add    esp,0x10
c000b06f:	ba a8 e5 01 c0       	mov    edx,0xc001e5a8
c000b074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b078:	89 10                	mov    DWORD PTR [eax],edx
c000b07a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b07e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b088:	83 c0 0d             	add    eax,0xd
c000b08b:	83 ec 04             	sub    esp,0x4
c000b08e:	52                   	push   edx
c000b08f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b093:	50                   	push   eax
c000b094:	e8 ed f8 ff ff       	call   c000a986 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b099:	83 c4 10             	add    esp,0x10
c000b09c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0a0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b0a3:	8d 50 bf             	lea    edx,[eax-0x41]
c000b0a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0aa:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b0b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0b4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b0b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0bc:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b0c2:	25 ff 00 00 00       	and    eax,0xff
c000b0c7:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000b0ce:	85 c0                	test   eax,eax
c000b0d0:	74 42                	je     c000b114 <Directory::Directory(char const*, Process*)+0xba>
c000b0d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0d6:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b0dc:	25 ff 00 00 00       	and    eax,0xff
c000b0e1:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000b0e8:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b0ee:	85 c0                	test   eax,eax
c000b0f0:	75 22                	jne    c000b114 <Directory::Directory(char const*, Process*)+0xba>
c000b0f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0f6:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b0fc:	25 ff 00 00 00       	and    eax,0xff
c000b101:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000b108:	83 ec 0c             	sub    esp,0xc
c000b10b:	50                   	push   eax
c000b10c:	e8 fd 1a 00 00       	call   c000cc0e <LogicalDisk::mount()>
c000b111:	83 c4 10             	add    esp,0x10
c000b114:	90                   	nop
c000b115:	83 c4 0c             	add    esp,0xc
c000b118:	c3                   	ret    
c000b119:	90                   	nop

c000b11a <Directory::open()>:
c000b11a:	53                   	push   ebx
c000b11b:	b8 0b 00 00 00       	mov    eax,0xb
c000b120:	83 ec 08             	sub    esp,0x8
c000b123:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b127:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b12e:	80 fa 19             	cmp    dl,0x19
c000b131:	77 3d                	ja     c000b170 <Directory::open()+0x56>
c000b133:	8b 14 95 20 54 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdabe0]
c000b13a:	85 d2                	test   edx,edx
c000b13c:	74 32                	je     c000b170 <Directory::open()+0x56>
c000b13e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b144:	85 d2                	test   edx,edx
c000b146:	74 28                	je     c000b170 <Directory::open()+0x56>
c000b148:	b8 06 00 00 00       	mov    eax,0x6
c000b14d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b151:	75 1d                	jne    c000b170 <Directory::open()+0x56>
c000b153:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b159:	50                   	push   eax
c000b15a:	8b 02                	mov    eax,DWORD PTR [edx]
c000b15c:	51                   	push   ecx
c000b15d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b160:	51                   	push   ecx
c000b161:	52                   	push   edx
c000b162:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b165:	83 c4 10             	add    esp,0x10
c000b168:	85 c0                	test   eax,eax
c000b16a:	75 04                	jne    c000b170 <Directory::open()+0x56>
c000b16c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b170:	83 c4 08             	add    esp,0x8
c000b173:	5b                   	pop    ebx
c000b174:	c3                   	ret    
c000b175:	90                   	nop

c000b176 <Directory::close()>:
c000b176:	53                   	push   ebx
c000b177:	b8 0b 00 00 00       	mov    eax,0xb
c000b17c:	83 ec 08             	sub    esp,0x8
c000b17f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b183:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b18a:	80 fa 19             	cmp    dl,0x19
c000b18d:	77 41                	ja     c000b1d0 <Directory::close()+0x5a>
c000b18f:	8b 1c 95 20 54 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdabe0]
c000b196:	85 db                	test   ebx,ebx
c000b198:	74 36                	je     c000b1d0 <Directory::close()+0x5a>
c000b19a:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b1a1:	74 2d                	je     c000b1d0 <Directory::close()+0x5a>
c000b1a3:	b8 05 00 00 00       	mov    eax,0x5
c000b1a8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b1ac:	74 22                	je     c000b1d0 <Directory::close()+0x5a>
c000b1ae:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b1b2:	8b 04 95 20 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdabe0]
c000b1b9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b1bf:	53                   	push   ebx
c000b1c0:	53                   	push   ebx
c000b1c1:	8b 10                	mov    edx,DWORD PTR [eax]
c000b1c3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b1c9:	50                   	push   eax
c000b1ca:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b1cd:	83 c4 10             	add    esp,0x10
c000b1d0:	83 c4 08             	add    esp,0x8
c000b1d3:	5b                   	pop    ebx
c000b1d4:	c3                   	ret    
c000b1d5:	90                   	nop

c000b1d6 <Directory::unlink()>:
c000b1d6:	83 ec 0c             	sub    esp,0xc
c000b1d9:	b8 0b 00 00 00       	mov    eax,0xb
c000b1de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1e2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1e9:	80 f9 19             	cmp    cl,0x19
c000b1ec:	77 2f                	ja     c000b21d <Directory::unlink()+0x47>
c000b1ee:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000b1f5:	85 c9                	test   ecx,ecx
c000b1f7:	74 24                	je     c000b21d <Directory::unlink()+0x47>
c000b1f9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b1ff:	85 c9                	test   ecx,ecx
c000b201:	74 1a                	je     c000b21d <Directory::unlink()+0x47>
c000b203:	b8 06 00 00 00       	mov    eax,0x6
c000b208:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b20c:	75 0f                	jne    c000b21d <Directory::unlink()+0x47>
c000b20e:	83 c2 0d             	add    edx,0xd
c000b211:	50                   	push   eax
c000b212:	50                   	push   eax
c000b213:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b215:	52                   	push   edx
c000b216:	51                   	push   ecx
c000b217:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b21a:	83 c4 10             	add    esp,0x10
c000b21d:	83 c4 0c             	add    esp,0xc
c000b220:	c3                   	ret    
c000b221:	90                   	nop

c000b222 <Directory::rename(char const*)>:
c000b222:	83 ec 0c             	sub    esp,0xc
c000b225:	b8 0b 00 00 00       	mov    eax,0xb
c000b22a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b22e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b235:	80 f9 19             	cmp    cl,0x19
c000b238:	77 32                	ja     c000b26c <Directory::rename(char const*)+0x4a>
c000b23a:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000b241:	85 c9                	test   ecx,ecx
c000b243:	74 27                	je     c000b26c <Directory::rename(char const*)+0x4a>
c000b245:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b24b:	85 c9                	test   ecx,ecx
c000b24d:	74 1d                	je     c000b26c <Directory::rename(char const*)+0x4a>
c000b24f:	b8 06 00 00 00       	mov    eax,0x6
c000b254:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b258:	75 12                	jne    c000b26c <Directory::rename(char const*)+0x4a>
c000b25a:	83 c2 0d             	add    edx,0xd
c000b25d:	50                   	push   eax
c000b25e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b260:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b264:	52                   	push   edx
c000b265:	51                   	push   ecx
c000b266:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b269:	83 c4 10             	add    esp,0x10
c000b26c:	83 c4 0c             	add    esp,0xc
c000b26f:	c3                   	ret    

c000b270 <Directory::exists()>:
c000b270:	83 ec 0c             	sub    esp,0xc
c000b273:	31 c0                	xor    eax,eax
c000b275:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b279:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b280:	80 f9 19             	cmp    cl,0x19
c000b283:	77 24                	ja     c000b2a9 <Directory::exists()+0x39>
c000b285:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000b28c:	85 c9                	test   ecx,ecx
c000b28e:	74 19                	je     c000b2a9 <Directory::exists()+0x39>
c000b290:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b296:	85 c9                	test   ecx,ecx
c000b298:	74 0f                	je     c000b2a9 <Directory::exists()+0x39>
c000b29a:	83 c2 0d             	add    edx,0xd
c000b29d:	50                   	push   eax
c000b29e:	50                   	push   eax
c000b29f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2a1:	52                   	push   edx
c000b2a2:	51                   	push   ecx
c000b2a3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	83 c4 0c             	add    esp,0xc
c000b2ac:	c3                   	ret    
c000b2ad:	90                   	nop

c000b2ae <Directory::read(dirent*)>:
c000b2ae:	83 ec 1c             	sub    esp,0x1c
c000b2b1:	b8 0b 00 00 00       	mov    eax,0xb
c000b2b6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b2ba:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b2c1:	80 fa 19             	cmp    dl,0x19
c000b2c4:	77 30                	ja     c000b2f6 <Directory::read(dirent*)+0x48>
c000b2c6:	8b 14 95 20 54 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdabe0]
c000b2cd:	85 d2                	test   edx,edx
c000b2cf:	74 25                	je     c000b2f6 <Directory::read(dirent*)+0x48>
c000b2d1:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b2d8:	74 1c                	je     c000b2f6 <Directory::read(dirent*)+0x48>
c000b2da:	83 ec 0c             	sub    esp,0xc
c000b2dd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2df:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b2e3:	52                   	push   edx
c000b2e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2e8:	6a 00                	push   0x0
c000b2ea:	68 10 01 00 00       	push   0x110
c000b2ef:	51                   	push   ecx
c000b2f0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b2f3:	83 c4 20             	add    esp,0x20
c000b2f6:	83 c4 1c             	add    esp,0x1c
c000b2f9:	c3                   	ret    

c000b2fa <Directory::create()>:
c000b2fa:	83 ec 0c             	sub    esp,0xc
c000b2fd:	b8 0b 00 00 00       	mov    eax,0xb
c000b302:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b306:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b30d:	80 f9 19             	cmp    cl,0x19
c000b310:	77 2f                	ja     c000b341 <Directory::create()+0x47>
c000b312:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000b319:	85 c9                	test   ecx,ecx
c000b31b:	74 24                	je     c000b341 <Directory::create()+0x47>
c000b31d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b323:	85 c9                	test   ecx,ecx
c000b325:	74 1a                	je     c000b341 <Directory::create()+0x47>
c000b327:	b8 06 00 00 00       	mov    eax,0x6
c000b32c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b330:	75 0f                	jne    c000b341 <Directory::create()+0x47>
c000b332:	83 c2 0d             	add    edx,0xd
c000b335:	50                   	push   eax
c000b336:	50                   	push   eax
c000b337:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b339:	52                   	push   edx
c000b33a:	51                   	push   ecx
c000b33b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b33e:	83 c4 10             	add    esp,0x10
c000b341:	83 c4 0c             	add    esp,0xc
c000b344:	c3                   	ret    
c000b345:	90                   	nop

c000b346 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b346:	b8 0a 00 00 00       	mov    eax,0xa
c000b34b:	c3                   	ret    

c000b34c <Bus::Bus(char const*)>:
c000b34c:	83 ec 0c             	sub    esp,0xc
c000b34f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b353:	83 ec 08             	sub    esp,0x8
c000b356:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b35a:	50                   	push   eax
c000b35b:	e8 30 08 00 00       	call   c000bb90 <Device::Device(char const*)>
c000b360:	83 c4 10             	add    esp,0x10
c000b363:	ba c4 e5 01 c0       	mov    edx,0xc001e5c4
c000b368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b36c:	89 10                	mov    DWORD PTR [eax],edx
c000b36e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b372:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b37c:	90                   	nop
c000b37d:	83 c4 0c             	add    esp,0xc
c000b380:	c3                   	ret    
c000b381:	90                   	nop
c000b382:	66 90                	xchg   ax,ax

c000b384 <Bus::~Bus()>:
c000b384:	83 ec 0c             	sub    esp,0xc
c000b387:	ba c4 e5 01 c0       	mov    edx,0xc001e5c4
c000b38c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b390:	89 10                	mov    DWORD PTR [eax],edx
c000b392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b396:	83 ec 0c             	sub    esp,0xc
c000b399:	50                   	push   eax
c000b39a:	e8 5b 05 00 00       	call   c000b8fa <Device::~Device()>
c000b39f:	83 c4 10             	add    esp,0x10
c000b3a2:	90                   	nop
c000b3a3:	83 c4 0c             	add    esp,0xc
c000b3a6:	c3                   	ret    
c000b3a7:	90                   	nop

c000b3a8 <Bus::~Bus()>:
c000b3a8:	83 ec 0c             	sub    esp,0xc
c000b3ab:	83 ec 0c             	sub    esp,0xc
c000b3ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3b2:	e8 cd ff ff ff       	call   c000b384 <Bus::~Bus()>
c000b3b7:	83 c4 10             	add    esp,0x10
c000b3ba:	83 ec 08             	sub    esp,0x8
c000b3bd:	68 58 01 00 00       	push   0x158
c000b3c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3c6:	e8 f9 f0 ff ff       	call   c000a4c4 <operator delete(void*, unsigned long)>
c000b3cb:	83 c4 10             	add    esp,0x10
c000b3ce:	83 c4 0c             	add    esp,0xc
c000b3d1:	c3                   	ret    

c000b3d2 <beepThread(void*)>:
c000b3d2:	83 ec 0c             	sub    esp,0xc
c000b3d5:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000b3da:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b3de:	48                   	dec    eax
c000b3df:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000b3e4:	75 01                	jne    c000b3e7 <beepThread(void*)+0x15>
c000b3e6:	fb                   	sti    
c000b3e7:	83 ec 0c             	sub    esp,0xc
c000b3ea:	6b c2 0a             	imul   eax,edx,0xa
c000b3ed:	50                   	push   eax
c000b3ee:	e8 ed 86 00 00       	call   c0013ae0 <milliTenthSleep(unsigned int)>
c000b3f3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b3fa:	e8 93 a4 00 00       	call   c0015892 <HalMakeBeep(int)>
c000b3ff:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b407:	83 c4 1c             	add    esp,0x1c
c000b40a:	e9 cd 85 00 00       	jmp    c00139dc <blockTask(TaskState)>

c000b40f <Krnl::beep(int, int, bool)>:
c000b40f:	56                   	push   esi
c000b410:	53                   	push   ebx
c000b411:	83 ec 10             	sub    esp,0x10
c000b414:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b418:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b41c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b420:	e8 6d a4 00 00       	call   c0015892 <HalMakeBeep(int)>
c000b425:	83 c4 10             	add    esp,0x10
c000b428:	89 f0                	mov    eax,esi
c000b42a:	84 c0                	test   al,al
c000b42c:	74 1e                	je     c000b44c <Krnl::beep(int, int, bool)+0x3d>
c000b42e:	83 ec 0c             	sub    esp,0xc
c000b431:	6b db 0a             	imul   ebx,ebx,0xa
c000b434:	53                   	push   ebx
c000b435:	e8 a6 86 00 00       	call   c0013ae0 <milliTenthSleep(unsigned int)>
c000b43a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b442:	83 c4 14             	add    esp,0x14
c000b445:	5b                   	pop    ebx
c000b446:	5e                   	pop    esi
c000b447:	e9 46 a4 00 00       	jmp    c0015892 <HalMakeBeep(int)>
c000b44c:	68 e6 00 00 00       	push   0xe6
c000b451:	53                   	push   ebx
c000b452:	68 d2 b3 00 c0       	push   0xc000b3d2
c000b457:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c000b45d:	e8 5e 81 00 00       	call   c00135c0 <Process::createThread(void (*)(void*), void*, int)>
c000b462:	83 c4 14             	add    esp,0x14
c000b465:	5b                   	pop    ebx
c000b466:	5e                   	pop    esi
c000b467:	c3                   	ret    

c000b468 <User::loadClockSettings(int)>:
c000b468:	53                   	push   ebx
c000b469:	83 ec 14             	sub    esp,0x14
c000b46c:	68 14 01 00 00       	push   0x114
c000b471:	e8 ab c3 ff ff       	call   c0007821 <malloc>
c000b476:	83 c4 0c             	add    esp,0xc
c000b479:	89 c3                	mov    ebx,eax
c000b47b:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c000b481:	68 e8 e5 01 c0       	push   0xc001e5e8
c000b486:	50                   	push   eax
c000b487:	e8 a4 f6 ff ff       	call   c000ab30 <File::File(char const*, Process*)>
c000b48c:	58                   	pop    eax
c000b48d:	5a                   	pop    edx
c000b48e:	6a 01                	push   0x1
c000b490:	53                   	push   ebx
c000b491:	e8 5a f7 ff ff       	call   c000abf0 <File::open(FileOpenMode)>
c000b496:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b499:	e8 b0 f7 ff ff       	call   c000ac4e <File::close()>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	85 db                	test   ebx,ebx
c000b4a3:	74 0f                	je     c000b4b4 <User::loadClockSettings(int)+0x4c>
c000b4a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4a7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b4ab:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b4ae:	83 c4 08             	add    esp,0x8
c000b4b1:	5b                   	pop    ebx
c000b4b2:	ff e0                	jmp    eax
c000b4b4:	83 c4 08             	add    esp,0x8
c000b4b7:	5b                   	pop    ebx
c000b4b8:	c3                   	ret    
c000b4b9:	90                   	nop

c000b4ba <Clock::Clock(char const*)>:
c000b4ba:	83 ec 0c             	sub    esp,0xc
c000b4bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4c1:	83 ec 08             	sub    esp,0x8
c000b4c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4c8:	50                   	push   eax
c000b4c9:	e8 c2 06 00 00       	call   c000bb90 <Device::Device(char const*)>
c000b4ce:	83 c4 10             	add    esp,0x10
c000b4d1:	ba 10 e6 01 c0       	mov    edx,0xc001e610
c000b4d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4da:	89 10                	mov    DWORD PTR [eax],edx
c000b4dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4e0:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b4ea:	90                   	nop
c000b4eb:	83 c4 0c             	add    esp,0xc
c000b4ee:	c3                   	ret    
c000b4ef:	90                   	nop

c000b4f0 <Clock::~Clock()>:
c000b4f0:	83 ec 0c             	sub    esp,0xc
c000b4f3:	ba 10 e6 01 c0       	mov    edx,0xc001e610
c000b4f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4fc:	89 10                	mov    DWORD PTR [eax],edx
c000b4fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b502:	83 ec 0c             	sub    esp,0xc
c000b505:	50                   	push   eax
c000b506:	e8 ef 03 00 00       	call   c000b8fa <Device::~Device()>
c000b50b:	83 c4 10             	add    esp,0x10
c000b50e:	90                   	nop
c000b50f:	83 c4 0c             	add    esp,0xc
c000b512:	c3                   	ret    
c000b513:	90                   	nop

c000b514 <Clock::~Clock()>:
c000b514:	83 ec 0c             	sub    esp,0xc
c000b517:	83 ec 0c             	sub    esp,0xc
c000b51a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b51e:	e8 cd ff ff ff       	call   c000b4f0 <Clock::~Clock()>
c000b523:	83 c4 10             	add    esp,0x10
c000b526:	83 ec 08             	sub    esp,0x8
c000b529:	68 58 01 00 00       	push   0x158
c000b52e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b532:	e8 8d ef ff ff       	call   c000a4c4 <operator delete(void*, unsigned long)>
c000b537:	83 c4 10             	add    esp,0x10
c000b53a:	83 c4 0c             	add    esp,0xc
c000b53d:	c3                   	ret    

c000b53e <Clock::timeInSecondsLocal()>:
c000b53e:	53                   	push   ebx
c000b53f:	83 ec 14             	sub    esp,0x14
c000b542:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b546:	8b 10                	mov    edx,DWORD PTR [eax]
c000b548:	50                   	push   eax
c000b549:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b54c:	0f b6 0d b8 2f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0022fb8
c000b553:	03 0d bc 2f 02 c0    	add    ecx,DWORD PTR ds:0xc0022fbc
c000b559:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b55f:	89 cb                	mov    ebx,ecx
c000b561:	c1 fb 1f             	sar    ebx,0x1f
c000b564:	01 c8                	add    eax,ecx
c000b566:	11 da                	adc    edx,ebx
c000b568:	83 c4 10             	add    esp,0x10
c000b56b:	31 c9                	xor    ecx,ecx
c000b56d:	80 3d b9 2f 02 c0 00 	cmp    BYTE PTR ds:0xc0022fb9,0x0
c000b574:	74 05                	je     c000b57b <Clock::timeInSecondsLocal()+0x3d>
c000b576:	b9 08 07 00 00       	mov    ecx,0x708
c000b57b:	31 db                	xor    ebx,ebx
c000b57d:	01 c8                	add    eax,ecx
c000b57f:	11 da                	adc    edx,ebx
c000b581:	83 c4 08             	add    esp,0x8
c000b584:	5b                   	pop    ebx
c000b585:	c3                   	ret    

c000b586 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b586:	57                   	push   edi
c000b587:	56                   	push   esi
c000b588:	53                   	push   ebx
c000b589:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b58d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b591:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b593:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b597:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b59a:	0f b6 05 b8 2f 02 c0 	movzx  eax,BYTE PTR ds:0xc0022fb8
c000b5a1:	03 05 bc 2f 02 c0    	add    eax,DWORD PTR ds:0xc0022fbc
c000b5a7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b5ad:	99                   	cdq    
c000b5ae:	29 c6                	sub    esi,eax
c000b5b0:	19 d7                	sbb    edi,edx
c000b5b2:	89 f0                	mov    eax,esi
c000b5b4:	89 fa                	mov    edx,edi
c000b5b6:	31 f6                	xor    esi,esi
c000b5b8:	80 3d b9 2f 02 c0 00 	cmp    BYTE PTR ds:0xc0022fb9,0x0
c000b5bf:	74 05                	je     c000b5c6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b5c1:	be 08 07 00 00       	mov    esi,0x708
c000b5c6:	31 ff                	xor    edi,edi
c000b5c8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b5cc:	29 f0                	sub    eax,esi
c000b5ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b5d2:	19 fa                	sbb    edx,edi
c000b5d4:	89 d8                	mov    eax,ebx
c000b5d6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b5da:	5b                   	pop    ebx
c000b5db:	5e                   	pop    esi
c000b5dc:	5f                   	pop    edi
c000b5dd:	ff e0                	jmp    eax

c000b5df <datetimeToSeconds(datetime_t)>:
c000b5df:	55                   	push   ebp
c000b5e0:	57                   	push   edi
c000b5e1:	56                   	push   esi
c000b5e2:	53                   	push   ebx
c000b5e3:	83 ec 14             	sub    esp,0x14
c000b5e6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b5ea:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b5ee:	89 d3                	mov    ebx,edx
c000b5f0:	0f b6 c6             	movzx  eax,dh
c000b5f3:	c1 eb 10             	shr    ebx,0x10
c000b5f6:	48                   	dec    eax
c000b5f7:	66 81 eb 6c 07       	sub    bx,0x76c
c000b5fc:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b600:	0f b6 f5             	movzx  esi,ch
c000b603:	89 cf                	mov    edi,ecx
c000b605:	6b f6 3c             	imul   esi,esi,0x3c
c000b608:	c1 ef 10             	shr    edi,0x10
c000b60b:	0f b6 c9             	movzx  ecx,cl
c000b60e:	89 f8                	mov    eax,edi
c000b610:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b616:	0f b6 f8             	movzx  edi,al
c000b619:	0f b6 d2             	movzx  edx,dl
c000b61c:	01 fe                	add    esi,edi
c000b61e:	01 f1                	add    ecx,esi
c000b620:	0f b7 f3             	movzx  esi,bx
c000b623:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b627:	c1 f9 1f             	sar    ecx,0x1f
c000b62a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b62f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b633:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b638:	8b 0c 8d 60 e6 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe19a0]
c000b63f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b643:	76 29                	jbe    c000b66e <datetimeToSeconds(datetime_t)+0x8f>
c000b645:	f6 c3 03             	test   bl,0x3
c000b648:	75 24                	jne    c000b66e <datetimeToSeconds(datetime_t)+0x8f>
c000b64a:	31 d2                	xor    edx,edx
c000b64c:	bf 64 00 00 00       	mov    edi,0x64
c000b651:	89 d8                	mov    eax,ebx
c000b653:	66 f7 f7             	div    di
c000b656:	66 85 d2             	test   dx,dx
c000b659:	75 12                	jne    c000b66d <datetimeToSeconds(datetime_t)+0x8e>
c000b65b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b661:	bf 90 01 00 00       	mov    edi,0x190
c000b666:	99                   	cdq    
c000b667:	f7 ff                	idiv   edi
c000b669:	85 d2                	test   edx,edx
c000b66b:	75 01                	jne    c000b66e <datetimeToSeconds(datetime_t)+0x8f>
c000b66d:	41                   	inc    ecx
c000b66e:	66 83 fb 46          	cmp    bx,0x46
c000b672:	76 45                	jbe    c000b6b9 <datetimeToSeconds(datetime_t)+0xda>
c000b674:	bb 46 00 00 00       	mov    ebx,0x46
c000b679:	bf 64 00 00 00       	mov    edi,0x64
c000b67e:	bd 90 01 00 00       	mov    ebp,0x190
c000b683:	b8 6d 01 00 00       	mov    eax,0x16d
c000b688:	f6 c3 03             	test   bl,0x3
c000b68b:	75 23                	jne    c000b6b0 <datetimeToSeconds(datetime_t)+0xd1>
c000b68d:	89 d8                	mov    eax,ebx
c000b68f:	99                   	cdq    
c000b690:	f7 ff                	idiv   edi
c000b692:	b8 6e 01 00 00       	mov    eax,0x16e
c000b697:	85 d2                	test   edx,edx
c000b699:	75 15                	jne    c000b6b0 <datetimeToSeconds(datetime_t)+0xd1>
c000b69b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b6a1:	99                   	cdq    
c000b6a2:	f7 fd                	idiv   ebp
c000b6a4:	31 c0                	xor    eax,eax
c000b6a6:	85 d2                	test   edx,edx
c000b6a8:	0f 94 c0             	sete   al
c000b6ab:	05 6d 01 00 00       	add    eax,0x16d
c000b6b0:	01 c1                	add    ecx,eax
c000b6b2:	43                   	inc    ebx
c000b6b3:	39 f3                	cmp    ebx,esi
c000b6b5:	7c cc                	jl     c000b683 <datetimeToSeconds(datetime_t)+0xa4>
c000b6b7:	eb 3b                	jmp    c000b6f4 <datetimeToSeconds(datetime_t)+0x115>
c000b6b9:	74 39                	je     c000b6f4 <datetimeToSeconds(datetime_t)+0x115>
c000b6bb:	b8 45 00 00 00       	mov    eax,0x45
c000b6c0:	89 c2                	mov    edx,eax
c000b6c2:	83 e2 03             	and    edx,0x3
c000b6c5:	39 f0                	cmp    eax,esi
c000b6c7:	7e 13                	jle    c000b6dc <datetimeToSeconds(datetime_t)+0xfd>
c000b6c9:	85 d2                	test   edx,edx
c000b6cb:	0f 94 c2             	sete   dl
c000b6ce:	48                   	dec    eax
c000b6cf:	0f b6 d2             	movzx  edx,dl
c000b6d2:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b6d8:	29 d1                	sub    ecx,edx
c000b6da:	eb e4                	jmp    c000b6c0 <datetimeToSeconds(datetime_t)+0xe1>
c000b6dc:	b8 6d 01 00 00       	mov    eax,0x16d
c000b6e1:	85 d2                	test   edx,edx
c000b6e3:	75 0d                	jne    c000b6f2 <datetimeToSeconds(datetime_t)+0x113>
c000b6e5:	31 c0                	xor    eax,eax
c000b6e7:	66 85 db             	test   bx,bx
c000b6ea:	0f 95 c0             	setne  al
c000b6ed:	05 6d 01 00 00       	add    eax,0x16d
c000b6f2:	29 c1                	sub    ecx,eax
c000b6f4:	b8 80 51 01 00       	mov    eax,0x15180
c000b6f9:	f7 e9                	imul   ecx
c000b6fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b6ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b703:	83 c4 14             	add    esp,0x14
c000b706:	5b                   	pop    ebx
c000b707:	5e                   	pop    esi
c000b708:	5f                   	pop    edi
c000b709:	5d                   	pop    ebp
c000b70a:	c3                   	ret    
c000b70b:	90                   	nop

c000b70c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b70c:	57                   	push   edi
c000b70d:	56                   	push   esi
c000b70e:	53                   	push   ebx
c000b70f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b713:	8b 06                	mov    eax,DWORD PTR [esi]
c000b715:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b718:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b71c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b720:	e8 ba fe ff ff       	call   c000b5df <datetimeToSeconds(datetime_t)>
c000b725:	59                   	pop    ecx
c000b726:	0f b6 0d b8 2f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0022fb8
c000b72d:	5b                   	pop    ebx
c000b72e:	03 0d bc 2f 02 c0    	add    ecx,DWORD PTR ds:0xc0022fbc
c000b734:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b73a:	89 cb                	mov    ebx,ecx
c000b73c:	c1 fb 1f             	sar    ebx,0x1f
c000b73f:	29 c8                	sub    eax,ecx
c000b741:	19 da                	sbb    edx,ebx
c000b743:	31 c9                	xor    ecx,ecx
c000b745:	80 3d b9 2f 02 c0 00 	cmp    BYTE PTR ds:0xc0022fb9,0x0
c000b74c:	74 05                	je     c000b753 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b74e:	b9 08 07 00 00       	mov    ecx,0x708
c000b753:	31 db                	xor    ebx,ebx
c000b755:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b759:	29 c8                	sub    eax,ecx
c000b75b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b75f:	19 da                	sbb    edx,ebx
c000b761:	89 f8                	mov    eax,edi
c000b763:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b767:	5b                   	pop    ebx
c000b768:	5e                   	pop    esi
c000b769:	5f                   	pop    edi
c000b76a:	ff e0                	jmp    eax

c000b76c <secondsToDatetime(unsigned long long)>:
c000b76c:	55                   	push   ebp
c000b76d:	57                   	push   edi
c000b76e:	56                   	push   esi
c000b76f:	53                   	push   ebx
c000b770:	83 ec 1c             	sub    esp,0x1c
c000b773:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b777:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b77b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b77f:	6a 00                	push   0x0
c000b781:	68 80 51 01 00       	push   0x15180
c000b786:	55                   	push   ebp
c000b787:	57                   	push   edi
c000b788:	e8 93 11 01 00       	call   c001c920 <__udivdi3>
c000b78d:	83 c4 10             	add    esp,0x10
c000b790:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b796:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b79a:	6a 00                	push   0x0
c000b79c:	68 80 51 01 00       	push   0x15180
c000b7a1:	55                   	push   ebp
c000b7a2:	57                   	push   edi
c000b7a3:	bf 10 0e 00 00       	mov    edi,0xe10
c000b7a8:	e8 73 12 01 00       	call   c001ca20 <__umoddi3>
c000b7ad:	83 c4 10             	add    esp,0x10
c000b7b0:	99                   	cdq    
c000b7b1:	f7 ff                	idiv   edi
c000b7b3:	bf 3c 00 00 00       	mov    edi,0x3c
c000b7b8:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b7bb:	89 d0                	mov    eax,edx
c000b7bd:	99                   	cdq    
c000b7be:	f7 ff                	idiv   edi
c000b7c0:	85 db                	test   ebx,ebx
c000b7c2:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b7c5:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b7c8:	79 11                	jns    c000b7db <secondsToDatetime(unsigned long long)+0x6f>
c000b7ca:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b7ce:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b7d4:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b7d9:	eb 07                	jmp    c000b7e2 <secondsToDatetime(unsigned long long)+0x76>
c000b7db:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b7e0:	89 d8                	mov    eax,ebx
c000b7e2:	bf b4 05 00 00       	mov    edi,0x5b4
c000b7e7:	99                   	cdq    
c000b7e8:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b7ed:	f7 f9                	idiv   ecx
c000b7ef:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b7f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7f8:	31 d2                	xor    edx,edx
c000b7fa:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b802:	01 c3                	add    ebx,eax
c000b804:	89 d8                	mov    eax,ebx
c000b806:	f7 f1                	div    ecx
c000b808:	31 d2                	xor    edx,edx
c000b80a:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b80d:	89 d8                	mov    eax,ebx
c000b80f:	f7 f7                	div    edi
c000b811:	31 d2                	xor    edx,edx
c000b813:	29 c1                	sub    ecx,eax
c000b815:	89 d8                	mov    eax,ebx
c000b817:	f7 f5                	div    ebp
c000b819:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b81e:	29 c1                	sub    ecx,eax
c000b820:	31 d2                	xor    edx,edx
c000b822:	89 c8                	mov    eax,ecx
c000b824:	f7 f5                	div    ebp
c000b826:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b82b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b82f:	31 d2                	xor    edx,edx
c000b831:	89 c8                	mov    eax,ecx
c000b833:	f7 f5                	div    ebp
c000b835:	31 d2                	xor    edx,edx
c000b837:	01 c3                	add    ebx,eax
c000b839:	89 c8                	mov    eax,ecx
c000b83b:	f7 f7                	div    edi
c000b83d:	bf 99 00 00 00       	mov    edi,0x99
c000b842:	29 c3                	sub    ebx,eax
c000b844:	31 d2                	xor    edx,edx
c000b846:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b84e:	29 c3                	sub    ebx,eax
c000b850:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b853:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b856:	bb 05 00 00 00       	mov    ebx,0x5
c000b85b:	83 c1 02             	add    ecx,0x2
c000b85e:	89 c8                	mov    eax,ecx
c000b860:	f7 f7                	div    edi
c000b862:	31 d2                	xor    edx,edx
c000b864:	89 c7                	mov    edi,eax
c000b866:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b86c:	83 c0 02             	add    eax,0x2
c000b86f:	f7 f3                	div    ebx
c000b871:	89 eb                	mov    ebx,ebp
c000b873:	29 c3                	sub    ebx,eax
c000b875:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b87b:	88 1e                	mov    BYTE PTR [esi],bl
c000b87d:	19 c0                	sbb    eax,eax
c000b87f:	31 d2                	xor    edx,edx
c000b881:	83 e0 0c             	and    eax,0xc
c000b884:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b888:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b890:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b894:	83 f9 01             	cmp    ecx,0x1
c000b897:	0f 96 c2             	setbe  dl
c000b89a:	41                   	inc    ecx
c000b89b:	01 d0                	add    eax,edx
c000b89d:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b8a0:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b8a4:	83 c4 1c             	add    esp,0x1c
c000b8a7:	89 f0                	mov    eax,esi
c000b8a9:	5b                   	pop    ebx
c000b8aa:	5e                   	pop    esi
c000b8ab:	5f                   	pop    edi
c000b8ac:	5d                   	pop    ebp
c000b8ad:	c2 04 00             	ret    0x4

c000b8b0 <Clock::timeInDatetimeLocal()>:
c000b8b0:	53                   	push   ebx
c000b8b1:	83 ec 14             	sub    esp,0x14
c000b8b4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b8b8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b8bc:	e8 7d fc ff ff       	call   c000b53e <Clock::timeInSecondsLocal()>
c000b8c1:	83 c4 0c             	add    esp,0xc
c000b8c4:	52                   	push   edx
c000b8c5:	50                   	push   eax
c000b8c6:	53                   	push   ebx
c000b8c7:	e8 a0 fe ff ff       	call   c000b76c <secondsToDatetime(unsigned long long)>
c000b8cc:	89 d8                	mov    eax,ebx
c000b8ce:	83 c4 14             	add    esp,0x14
c000b8d1:	5b                   	pop    ebx
c000b8d2:	c2 04 00             	ret    0x4
c000b8d5:	90                   	nop

c000b8d6 <Device::hibernate()>:
c000b8d6:	c3                   	ret    
c000b8d7:	90                   	nop

c000b8d8 <Device::wake()>:
c000b8d8:	c3                   	ret    
c000b8d9:	90                   	nop

c000b8da <Device::detect()>:
c000b8da:	c3                   	ret    
c000b8db:	90                   	nop

c000b8dc <Device::disableLegacy()>:
c000b8dc:	c3                   	ret    
c000b8dd:	90                   	nop

c000b8de <Device::powerSaving(PowerSavingLevel)>:
c000b8de:	c3                   	ret    
c000b8df:	90                   	nop

c000b8e0 <DriverlessDevice::close(int, int, void*)>:
c000b8e0:	31 c0                	xor    eax,eax
c000b8e2:	c3                   	ret    
c000b8e3:	90                   	nop

c000b8e4 <DriverlessDevice::detect()>:
c000b8e4:	c3                   	ret    
c000b8e5:	90                   	nop

c000b8e6 <DriverlessDevice::open(int, int, void*)>:
c000b8e6:	83 ec 18             	sub    esp,0x18
c000b8e9:	68 90 e6 01 c0       	push   0xc001e690
c000b8ee:	e8 d0 49 00 00       	call   c00102c3 <KePanic(char const*)>
c000b8f3:	83 c8 ff             	or     eax,0xffffffff
c000b8f6:	83 c4 1c             	add    esp,0x1c
c000b8f9:	c3                   	ret    

c000b8fa <Device::~Device()>:
c000b8fa:	ba f0 e6 01 c0       	mov    edx,0xc001e6f0
c000b8ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b903:	89 10                	mov    DWORD PTR [eax],edx
c000b905:	90                   	nop
c000b906:	c3                   	ret    
c000b907:	90                   	nop

c000b908 <Device::~Device()>:
c000b908:	83 ec 0c             	sub    esp,0xc
c000b90b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b90f:	e8 e6 ff ff ff       	call   c000b8fa <Device::~Device()>
c000b914:	83 c4 04             	add    esp,0x4
c000b917:	83 ec 08             	sub    esp,0x8
c000b91a:	68 58 01 00 00       	push   0x158
c000b91f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b923:	e8 9c eb ff ff       	call   c000a4c4 <operator delete(void*, unsigned long)>
c000b928:	83 c4 10             	add    esp,0x10
c000b92b:	83 c4 0c             	add    esp,0xc
c000b92e:	c3                   	ret    
c000b92f:	90                   	nop

c000b930 <Device::findAndLoadDriver()>:
c000b930:	c7 44 24 04 ae e6 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e6ae
c000b938:	e9 7d ec ff ff       	jmp    c000a5ba <Dbg::kprintf(char const*, ...)>
c000b93d:	90                   	nop

c000b93e <Device::preOpenPCI(PCIDeviceInfo)>:
c000b93e:	57                   	push   edi
c000b93f:	b9 09 00 00 00       	mov    ecx,0x9
c000b944:	56                   	push   esi
c000b945:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b949:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b94d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000b957:	81 c7 18 01 00 00    	add    edi,0x118
c000b95d:	fc                   	cld    
c000b95e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b960:	5e                   	pop    esi
c000b961:	5f                   	pop    edi
c000b962:	c3                   	ret    
c000b963:	90                   	nop

c000b964 <Device::preOpenACPI(void*, char*, char*)>:
c000b964:	57                   	push   edi
c000b965:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b96a:	56                   	push   esi
c000b96b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b96f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b973:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000b97d:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000b983:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000b989:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b98d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b98f:	b9 0e 00 00 00       	mov    ecx,0xe
c000b994:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000b99a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b99e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b9a0:	5e                   	pop    esi
c000b9a1:	5f                   	pop    edi
c000b9a2:	c3                   	ret    
c000b9a3:	90                   	nop

c000b9a4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b9a4:	53                   	push   ebx
c000b9a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b9ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b9b1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b9b5:	0f b6 c0             	movzx  eax,al
c000b9b8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000b9bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b9c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b9c4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b9c8:	5b                   	pop    ebx
c000b9c9:	e9 a6 05 00 00       	jmp    c000bf74 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000b9ce <Device::getParent()>:
c000b9ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9d2:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000b9d8:	c3                   	ret    
c000b9d9:	90                   	nop

c000b9da <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000b9da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9e2:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000b9e7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b9eb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b9ef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b9f3:	e9 e8 06 00 00       	jmp    c000c0e0 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000b9f8 <Device::addChild(Device*)>:
c000b9f8:	53                   	push   ebx
c000b9f9:	83 ec 08             	sub    esp,0x8
c000b9fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ba04:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000ba0a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000ba10:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ba12:	85 d2                	test   edx,edx
c000ba14:	74 04                	je     c000ba1a <Device::addChild(Device*)+0x22>
c000ba16:	89 d3                	mov    ebx,edx
c000ba18:	eb f6                	jmp    c000ba10 <Device::addChild(Device*)+0x18>
c000ba1a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ba1d:	83 ec 0c             	sub    esp,0xc
c000ba20:	6a 08                	push   0x8
c000ba22:	e8 fa bd ff ff       	call   c0007821 <malloc>
c000ba27:	89 03                	mov    DWORD PTR [ebx],eax
c000ba29:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ba2f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ba36:	83 c4 18             	add    esp,0x18
c000ba39:	5b                   	pop    ebx
c000ba3a:	c3                   	ret    
c000ba3b:	90                   	nop

c000ba3c <Device::removeAllChildren()>:
c000ba3c:	56                   	push   esi
c000ba3d:	53                   	push   ebx
c000ba3e:	52                   	push   edx
c000ba3f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ba43:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ba49:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba4c:	74 17                	je     c000ba65 <Device::removeAllChildren()+0x29>
c000ba4e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ba51:	85 c0                	test   eax,eax
c000ba53:	74 0c                	je     c000ba61 <Device::removeAllChildren()+0x25>
c000ba55:	83 ec 0c             	sub    esp,0xc
c000ba58:	8b 10                	mov    edx,DWORD PTR [eax]
c000ba5a:	50                   	push   eax
c000ba5b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000ba5e:	83 c4 10             	add    esp,0x10
c000ba61:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba63:	eb e4                	jmp    c000ba49 <Device::removeAllChildren()+0xd>
c000ba65:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ba6b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ba71:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ba77:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ba7e:	58                   	pop    eax
c000ba7f:	5b                   	pop    ebx
c000ba80:	5e                   	pop    esi
c000ba81:	c3                   	ret    

c000ba82 <Device::hibernateAll()>:
c000ba82:	53                   	push   ebx
c000ba83:	83 ec 14             	sub    esp,0x14
c000ba86:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ba8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba8c:	53                   	push   ebx
c000ba8d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ba90:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba96:	83 c4 10             	add    esp,0x10
c000ba99:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba9c:	74 0f                	je     c000baad <Device::hibernateAll()+0x2b>
c000ba9e:	83 ec 0c             	sub    esp,0xc
c000baa1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000baa4:	e8 d9 ff ff ff       	call   c000ba82 <Device::hibernateAll()>
c000baa9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000baab:	eb e9                	jmp    c000ba96 <Device::hibernateAll()+0x14>
c000baad:	83 c4 08             	add    esp,0x8
c000bab0:	5b                   	pop    ebx
c000bab1:	c3                   	ret    

c000bab2 <Device::wakeAll()>:
c000bab2:	53                   	push   ebx
c000bab3:	83 ec 14             	sub    esp,0x14
c000bab6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000baba:	8b 03                	mov    eax,DWORD PTR [ebx]
c000babc:	53                   	push   ebx
c000babd:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000bac0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bac6:	83 c4 10             	add    esp,0x10
c000bac9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bacc:	74 0f                	je     c000badd <Device::wakeAll()+0x2b>
c000bace:	83 ec 0c             	sub    esp,0xc
c000bad1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bad4:	e8 d9 ff ff ff       	call   c000bab2 <Device::wakeAll()>
c000bad9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000badb:	eb e9                	jmp    c000bac6 <Device::wakeAll()+0x14>
c000badd:	83 c4 08             	add    esp,0x8
c000bae0:	5b                   	pop    ebx
c000bae1:	c3                   	ret    

c000bae2 <Device::detectAll()>:
c000bae2:	53                   	push   ebx
c000bae3:	83 ec 14             	sub    esp,0x14
c000bae6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000baea:	8b 03                	mov    eax,DWORD PTR [ebx]
c000baec:	53                   	push   ebx
c000baed:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000baf0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000baf6:	83 c4 10             	add    esp,0x10
c000baf9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bafc:	74 0f                	je     c000bb0d <Device::detectAll()+0x2b>
c000bafe:	83 ec 0c             	sub    esp,0xc
c000bb01:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb04:	e8 d9 ff ff ff       	call   c000bae2 <Device::detectAll()>
c000bb09:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb0b:	eb e9                	jmp    c000baf6 <Device::detectAll()+0x14>
c000bb0d:	83 c4 08             	add    esp,0x8
c000bb10:	5b                   	pop    ebx
c000bb11:	c3                   	ret    

c000bb12 <Device::disableLegacyAll()>:
c000bb12:	c3                   	ret    
c000bb13:	90                   	nop

c000bb14 <Device::loadDriversForAll()>:
c000bb14:	c3                   	ret    
c000bb15:	90                   	nop

c000bb16 <Device::closeAll()>:
c000bb16:	53                   	push   ebx
c000bb17:	83 ec 08             	sub    esp,0x8
c000bb1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb1e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb20:	6a 00                	push   0x0
c000bb22:	6a 00                	push   0x0
c000bb24:	6a 00                	push   0x0
c000bb26:	53                   	push   ebx
c000bb27:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bb2a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb30:	83 c4 10             	add    esp,0x10
c000bb33:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb36:	74 0f                	je     c000bb47 <Device::closeAll()+0x31>
c000bb38:	83 ec 0c             	sub    esp,0xc
c000bb3b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb3e:	e8 d3 ff ff ff       	call   c000bb16 <Device::closeAll()>
c000bb43:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb45:	eb e9                	jmp    c000bb30 <Device::closeAll()+0x1a>
c000bb47:	83 c4 08             	add    esp,0x8
c000bb4a:	5b                   	pop    ebx
c000bb4b:	c3                   	ret    

c000bb4c <Device::powerSavingAll(PowerSavingLevel)>:
c000bb4c:	56                   	push   esi
c000bb4d:	53                   	push   ebx
c000bb4e:	83 ec 0c             	sub    esp,0xc
c000bb51:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bb55:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bb59:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb5b:	56                   	push   esi
c000bb5c:	53                   	push   ebx
c000bb5d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bb60:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb66:	83 c4 10             	add    esp,0x10
c000bb69:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb6c:	74 0f                	je     c000bb7d <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bb6e:	52                   	push   edx
c000bb6f:	52                   	push   edx
c000bb70:	56                   	push   esi
c000bb71:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb74:	e8 d3 ff ff ff       	call   c000bb4c <Device::powerSavingAll(PowerSavingLevel)>
c000bb79:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb7b:	eb e9                	jmp    c000bb66 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bb7d:	58                   	pop    eax
c000bb7e:	5b                   	pop    ebx
c000bb7f:	5e                   	pop    esi
c000bb80:	c3                   	ret    
c000bb81:	90                   	nop

c000bb82 <Device::setName(char const*)>:
c000bb82:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bb8a:	e9 71 4a ff ff       	jmp    c0000600 <strcpy>
c000bb8f:	90                   	nop

c000bb90 <Device::Device(char const*)>:
c000bb90:	83 ec 1c             	sub    esp,0x1c
c000bb93:	ba f0 e6 01 c0       	mov    edx,0xc001e6f0
c000bb98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb9c:	89 10                	mov    DWORD PTR [eax],edx
c000bb9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bba2:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bbac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbb0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bbba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbbe:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bbc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbcc:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bbd6:	83 ec 08             	sub    esp,0x8
c000bbd9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbdd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbe1:	e8 9c ff ff ff       	call   c000bb82 <Device::setName(char const*)>
c000bbe6:	83 c4 10             	add    esp,0x10
c000bbe9:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bbf1:	83 ec 0c             	sub    esp,0xc
c000bbf4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbf8:	e8 24 bc ff ff       	call   c0007821 <malloc>
c000bbfd:	83 c4 10             	add    esp,0x10
c000bc00:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bc06:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc0d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bc11:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bc17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc1b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bc21:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bc27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc2b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bc31:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc3c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bc43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc47:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bc4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc52:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bc5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc60:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bc6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc6e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bc78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc7c:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bc86:	90                   	nop
c000bc87:	83 c4 1c             	add    esp,0x1c
c000bc8a:	c3                   	ret    
c000bc8b:	90                   	nop

c000bc8c <Device::getName()>:
c000bc8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc90:	05 d0 00 00 00       	add    eax,0xd0
c000bc95:	c3                   	ret    

c000bc96 <DriverlessDevice::DriverlessDevice(char const*)>:
c000bc96:	83 ec 0c             	sub    esp,0xc
c000bc99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc9d:	83 ec 08             	sub    esp,0x8
c000bca0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca4:	50                   	push   eax
c000bca5:	e8 e6 fe ff ff       	call   c000bb90 <Device::Device(char const*)>
c000bcaa:	83 c4 10             	add    esp,0x10
c000bcad:	ba 1c e7 01 c0       	mov    edx,0xc001e71c
c000bcb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcb6:	89 10                	mov    DWORD PTR [eax],edx
c000bcb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcbc:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000bcc6:	90                   	nop
c000bcc7:	83 c4 0c             	add    esp,0xc
c000bcca:	c3                   	ret    
c000bccb:	90                   	nop

c000bccc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bccc:	57                   	push   edi
c000bccd:	56                   	push   esi
c000bcce:	53                   	push   ebx
c000bccf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bcd3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bcd7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bcdb:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bce1:	75 0c                	jne    c000bcef <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bce3:	52                   	push   edx
c000bce4:	52                   	push   edx
c000bce5:	53                   	push   ebx
c000bce6:	56                   	push   esi
c000bce7:	e8 e6 10 01 00       	call   c001cdd2 <LinkedList<Device>::addElement(Device*)>
c000bcec:	83 c4 10             	add    esp,0x10
c000bcef:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bcf5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bcf8:	74 12                	je     c000bd0c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bcfa:	50                   	push   eax
c000bcfb:	57                   	push   edi
c000bcfc:	56                   	push   esi
c000bcfd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bd00:	e8 c7 ff ff ff       	call   c000bccc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bd05:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bd07:	83 c4 10             	add    esp,0x10
c000bd0a:	eb e9                	jmp    c000bcf5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bd0c:	5b                   	pop    ebx
c000bd0d:	5e                   	pop    esi
c000bd0e:	5f                   	pop    edi
c000bd0f:	c3                   	ret    

c000bd10 <getDevicesOfType(DeviceType)>:
c000bd10:	53                   	push   ebx
c000bd11:	83 ec 14             	sub    esp,0x14
c000bd14:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bd18:	53                   	push   ebx
c000bd19:	e8 90 11 01 00       	call   c001ceae <LinkedList<Device>::LinkedList()>
c000bd1e:	83 c4 0c             	add    esp,0xc
c000bd21:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd25:	53                   	push   ebx
c000bd26:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c000bd2c:	e8 9b ff ff ff       	call   c000bccc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bd31:	89 d8                	mov    eax,ebx
c000bd33:	83 c4 18             	add    esp,0x18
c000bd36:	5b                   	pop    ebx
c000bd37:	c2 04 00             	ret    0x4
c000bd3a:	66 90                	xchg   ax,ax

c000bd3c <HardDiskController::HardDiskController(char const*)>:
c000bd3c:	83 ec 0c             	sub    esp,0xc
c000bd3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd43:	83 ec 08             	sub    esp,0x8
c000bd46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd4a:	50                   	push   eax
c000bd4b:	e8 40 fe ff ff       	call   c000bb90 <Device::Device(char const*)>
c000bd50:	83 c4 10             	add    esp,0x10
c000bd53:	ba 48 e7 01 c0       	mov    edx,0xc001e748
c000bd58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd5c:	89 10                	mov    DWORD PTR [eax],edx
c000bd5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd62:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bd6c:	90                   	nop
c000bd6d:	83 c4 0c             	add    esp,0xc
c000bd70:	c3                   	ret    
c000bd71:	90                   	nop
c000bd72:	66 90                	xchg   ax,ax

c000bd74 <HardDiskController::~HardDiskController()>:
c000bd74:	83 ec 0c             	sub    esp,0xc
c000bd77:	ba 48 e7 01 c0       	mov    edx,0xc001e748
c000bd7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd80:	89 10                	mov    DWORD PTR [eax],edx
c000bd82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd86:	83 ec 0c             	sub    esp,0xc
c000bd89:	50                   	push   eax
c000bd8a:	e8 6b fb ff ff       	call   c000b8fa <Device::~Device()>
c000bd8f:	83 c4 10             	add    esp,0x10
c000bd92:	90                   	nop
c000bd93:	83 c4 0c             	add    esp,0xc
c000bd96:	c3                   	ret    
c000bd97:	90                   	nop

c000bd98 <HardDiskController::~HardDiskController()>:
c000bd98:	83 ec 0c             	sub    esp,0xc
c000bd9b:	83 ec 0c             	sub    esp,0xc
c000bd9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bda2:	e8 cd ff ff ff       	call   c000bd74 <HardDiskController::~HardDiskController()>
c000bda7:	83 c4 10             	add    esp,0x10
c000bdaa:	83 ec 08             	sub    esp,0x8
c000bdad:	68 58 01 00 00       	push   0x158
c000bdb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdb6:	e8 09 e7 ff ff       	call   c000a4c4 <operator delete(void*, unsigned long)>
c000bdbb:	83 c4 10             	add    esp,0x10
c000bdbe:	83 c4 0c             	add    esp,0xc
c000bdc1:	c3                   	ret    

c000bdc2 <PhysicalDisk::eject()>:
c000bdc2:	83 c8 ff             	or     eax,0xffffffff
c000bdc5:	c3                   	ret    

c000bdc6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000bdc6:	83 ec 0c             	sub    esp,0xc
c000bdc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdcd:	83 ec 08             	sub    esp,0x8
c000bdd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdd4:	50                   	push   eax
c000bdd5:	e8 b6 fd ff ff       	call   c000bb90 <Device::Device(char const*)>
c000bdda:	83 c4 10             	add    esp,0x10
c000bddd:	ba 74 e7 01 c0       	mov    edx,0xc001e774
c000bde2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bde6:	89 10                	mov    DWORD PTR [eax],edx
c000bde8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdec:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bdf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdf7:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000bdfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be02:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000be0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be10:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000be14:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000be1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be1e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000be28:	90                   	nop
c000be29:	83 c4 0c             	add    esp,0xc
c000be2c:	c3                   	ret    
c000be2d:	90                   	nop

c000be2e <PhysicalDisk::startCache()>:
c000be2e:	56                   	push   esi
c000be2f:	53                   	push   ebx
c000be30:	83 ec 10             	sub    esp,0x10
c000be33:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be37:	6a 44                	push   0x44
c000be39:	e8 e3 b9 ff ff       	call   c0007821 <malloc>
c000be3e:	89 c6                	mov    esi,eax
c000be40:	58                   	pop    eax
c000be41:	5a                   	pop    edx
c000be42:	53                   	push   ebx
c000be43:	56                   	push   esi
c000be44:	e8 db 15 00 00       	call   c000d424 <VCache::VCache(PhysicalDisk*)>
c000be49:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000be4f:	83 c4 14             	add    esp,0x14
c000be52:	5b                   	pop    ebx
c000be53:	5e                   	pop    esi
c000be54:	c3                   	ret    
c000be55:	90                   	nop

c000be56 <PhysicalDisk::~PhysicalDisk()>:
c000be56:	83 ec 0c             	sub    esp,0xc
c000be59:	ba 74 e7 01 c0       	mov    edx,0xc001e774
c000be5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be62:	89 10                	mov    DWORD PTR [eax],edx
c000be64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be68:	83 ec 0c             	sub    esp,0xc
c000be6b:	50                   	push   eax
c000be6c:	e8 89 fa ff ff       	call   c000b8fa <Device::~Device()>
c000be71:	83 c4 10             	add    esp,0x10
c000be74:	90                   	nop
c000be75:	83 c4 0c             	add    esp,0xc
c000be78:	c3                   	ret    
c000be79:	90                   	nop

c000be7a <PhysicalDisk::~PhysicalDisk()>:
c000be7a:	83 ec 0c             	sub    esp,0xc
c000be7d:	83 ec 0c             	sub    esp,0xc
c000be80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be84:	e8 cd ff ff ff       	call   c000be56 <PhysicalDisk::~PhysicalDisk()>
c000be89:	83 c4 10             	add    esp,0x10
c000be8c:	83 ec 08             	sub    esp,0x8
c000be8f:	68 6c 01 00 00       	push   0x16c
c000be94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be98:	e8 27 e6 ff ff       	call   c000a4c4 <operator delete(void*, unsigned long)>
c000be9d:	83 c4 10             	add    esp,0x10
c000bea0:	83 c4 0c             	add    esp,0xc
c000bea3:	c3                   	ret    

c000bea4 <int_handler>:
c000bea4:	55                   	push   ebp
c000bea5:	57                   	push   edi
c000bea6:	56                   	push   esi
c000bea7:	53                   	push   ebx
c000bea8:	83 ec 0c             	sub    esp,0xc
c000beab:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000beaf:	80 3d 38 59 02 c0 00 	cmp    BYTE PTR ds:0xc0025938,0x0
c000beb6:	74 0b                	je     c000bec3 <int_handler+0x1f>
c000beb8:	fa                   	cli    
c000beb9:	f4                   	hlt    
c000beba:	80 3d 38 59 02 c0 00 	cmp    BYTE PTR ds:0xc0025938,0x0
c000bec1:	75 f5                	jne    c000beb8 <int_handler+0x14>
c000bec3:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000bec6:	8d 46 e0             	lea    eax,[esi-0x20]
c000bec9:	83 f8 17             	cmp    eax,0x17
c000becc:	76 3e                	jbe    c000bf0c <int_handler+0x68>
c000bece:	c1 e6 04             	shl    esi,0x4
c000bed1:	31 db                	xor    ebx,ebx
c000bed3:	8d ae c0 3f 02 c0    	lea    ebp,[esi-0x3ffdc040]
c000bed9:	81 c6 c0 2f 02 c0    	add    esi,0xc0022fc0
c000bedf:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000bee3:	85 c0                	test   eax,eax
c000bee5:	74 13                	je     c000befa <int_handler+0x56>
c000bee7:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000beea:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000beee:	74 2a                	je     c000bf1a <int_handler+0x76>
c000bef0:	83 ec 08             	sub    esp,0x8
c000bef3:	52                   	push   edx
c000bef4:	57                   	push   edi
c000bef5:	ff d0                	call   eax
c000bef7:	83 c4 10             	add    esp,0x10
c000befa:	43                   	inc    ebx
c000befb:	83 fb 04             	cmp    ebx,0x4
c000befe:	75 df                	jne    c000bedf <int_handler+0x3b>
c000bf00:	83 c4 0c             	add    esp,0xc
c000bf03:	31 c0                	xor    eax,eax
c000bf05:	5b                   	pop    ebx
c000bf06:	31 d2                	xor    edx,edx
c000bf08:	5e                   	pop    esi
c000bf09:	5f                   	pop    edi
c000bf0a:	5d                   	pop    ebp
c000bf0b:	c3                   	ret    
c000bf0c:	83 ec 0c             	sub    esp,0xc
c000bf0f:	50                   	push   eax
c000bf10:	e8 ba 99 00 00       	call   c00158cf <HalEndOfInterrupt(int)>
c000bf15:	83 c4 10             	add    esp,0x10
c000bf18:	eb b4                	jmp    c000bece <int_handler+0x2a>
c000bf1a:	83 ec 08             	sub    esp,0x8
c000bf1d:	52                   	push   edx
c000bf1e:	57                   	push   edi
c000bf1f:	ff d0                	call   eax
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	83 c4 0c             	add    esp,0xc
c000bf27:	5b                   	pop    ebx
c000bf28:	5e                   	pop    esi
c000bf29:	5f                   	pop    edi
c000bf2a:	5d                   	pop    ebp
c000bf2b:	c3                   	ret    

c000bf2c <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000bf2c:	56                   	push   esi
c000bf2d:	31 c0                	xor    eax,eax
c000bf2f:	53                   	push   ebx
c000bf30:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bf34:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bf38:	89 ca                	mov    edx,ecx
c000bf3a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bf3e:	c1 e2 04             	shl    edx,0x4
c000bf41:	83 bc 82 c0 3f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdc040],0x0
c000bf49:	74 15                	je     c000bf60 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000bf4b:	40                   	inc    eax
c000bf4c:	83 f8 04             	cmp    eax,0x4
c000bf4f:	75 f0                	jne    c000bf41 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000bf51:	c7 44 24 0c a4 e7 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e7a4
c000bf59:	5b                   	pop    ebx
c000bf5a:	5e                   	pop    esi
c000bf5b:	e9 63 43 00 00       	jmp    c00102c3 <KePanic(char const*)>
c000bf60:	8d 04 88             	lea    eax,[eax+ecx*4]
c000bf63:	89 1c 85 c0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc040],ebx
c000bf6a:	89 34 85 c0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd040],esi
c000bf71:	5b                   	pop    ebx
c000bf72:	5e                   	pop    esi
c000bf73:	c3                   	ret    

c000bf74 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bf74:	57                   	push   edi
c000bf75:	8b 15 b8 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022eb8
c000bf7b:	56                   	push   esi
c000bf7c:	53                   	push   ebx
c000bf7d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bf81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf85:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000bf8c:	74 5b                	je     c000bfe9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bf8e:	89 c7                	mov    edi,eax
c000bf90:	84 c0                	test   al,al
c000bf92:	74 24                	je     c000bfb8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bf94:	83 fe 0f             	cmp    esi,0xf
c000bf97:	0f 8f d9 00 00 00    	jg     c000c076 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000bf9d:	8a 86 a0 ff 01 c0    	mov    al,BYTE PTR [esi-0x3ffe0060]
c000bfa3:	25 ff 00 00 00       	and    eax,0xff
c000bfa8:	66 8b bc 00 60 57 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffda8a0]
c000bfb0:	89 c6                	mov    esi,eax
c000bfb2:	66 d1 ef             	shr    di,1
c000bfb5:	83 e7 01             	and    edi,0x1
c000bfb8:	83 ec 08             	sub    esp,0x8
c000bfbb:	a1 60 6b 02 c0       	mov    eax,ds:0xc0026b60
c000bfc0:	31 db                	xor    ebx,ebx
c000bfc2:	50                   	push   eax
c000bfc3:	68 b1 e7 01 c0       	push   0xc001e7b1
c000bfc8:	e8 ed e5 ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c000bfcd:	83 c4 10             	add    esp,0x10
c000bfd0:	a1 60 6b 02 c0       	mov    eax,ds:0xc0026b60
c000bfd5:	85 c0                	test   eax,eax
c000bfd7:	7f 51                	jg     c000c02a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000bfd9:	83 ec 0c             	sub    esp,0xc
c000bfdc:	68 c8 e7 01 c0       	push   0xc001e7c8
c000bfe1:	e8 dd 42 00 00       	call   c00102c3 <KePanic(char const*)>
c000bfe6:	83 c4 10             	add    esp,0x10
c000bfe9:	8d 4e 20             	lea    ecx,[esi+0x20]
c000bfec:	31 d2                	xor    edx,edx
c000bfee:	89 c8                	mov    eax,ecx
c000bff0:	c1 e0 04             	shl    eax,0x4
c000bff3:	8b 9c 90 c0 3f 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdc040]
c000bffa:	85 db                	test   ebx,ebx
c000bffc:	0f 84 8b 00 00 00    	je     c000c08d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000c002:	42                   	inc    edx
c000c003:	83 fa 04             	cmp    edx,0x4
c000c006:	75 eb                	jne    c000bff3 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c008:	83 ec 0c             	sub    esp,0xc
c000c00b:	68 1c e8 01 c0       	push   0xc001e81c
c000c010:	e8 ae 42 00 00       	call   c00102c3 <KePanic(char const*)>
c000c015:	83 c4 10             	add    esp,0x10
c000c018:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c01d:	5b                   	pop    ebx
c000c01e:	5e                   	pop    esi
c000c01f:	5f                   	pop    edi
c000c020:	c3                   	ret    
c000c021:	43                   	inc    ebx
c000c022:	39 1d 60 6b 02 c0    	cmp    DWORD PTR ds:0xc0026b60,ebx
c000c028:	7e af                	jle    c000bfd9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c02a:	83 ec 08             	sub    esp,0x8
c000c02d:	8b 04 9d 80 6b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9480]
c000c034:	56                   	push   esi
c000c035:	50                   	push   eax
c000c036:	e8 63 fd 00 00       	call   c001bd9e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c03b:	83 c4 10             	add    esp,0x10
c000c03e:	84 c0                	test   al,al
c000c040:	74 df                	je     c000c021 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000c042:	81 e7 ff 00 00 00    	and    edi,0xff
c000c048:	50                   	push   eax
c000c049:	8d 46 20             	lea    eax,[esi+0x20]
c000c04c:	57                   	push   edi
c000c04d:	25 ff 00 00 00       	and    eax,0xff
c000c052:	6a 00                	push   0x0
c000c054:	50                   	push   eax
c000c055:	89 f0                	mov    eax,esi
c000c057:	6a 00                	push   0x0
c000c059:	25 ff 00 00 00       	and    eax,0xff
c000c05e:	6a 00                	push   0x0
c000c060:	50                   	push   eax
c000c061:	8b 04 9d 80 6b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9480]
c000c068:	50                   	push   eax
c000c069:	e8 aa fe 00 00       	call   c001bf18 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c06e:	83 c4 20             	add    esp,0x20
c000c071:	e9 73 ff ff ff       	jmp    c000bfe9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c076:	83 ec 0c             	sub    esp,0xc
c000c079:	31 ff                	xor    edi,edi
c000c07b:	68 e4 e7 01 c0       	push   0xc001e7e4
c000c080:	e8 3e 42 00 00       	call   c00102c3 <KePanic(char const*)>
c000c085:	83 c4 10             	add    esp,0x10
c000c088:	e9 2b ff ff ff       	jmp    c000bfb8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c08d:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c090:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c094:	89 14 85 c0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc040],edx
c000c09b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c09f:	5b                   	pop    ebx
c000c0a0:	89 14 85 c0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd040],edx
c000c0a7:	89 f0                	mov    eax,esi
c000c0a9:	5e                   	pop    esi
c000c0aa:	5f                   	pop    edi
c000c0ab:	c3                   	ret    

c000c0ac <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c0ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c0b0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c0b4:	c1 e0 04             	shl    eax,0x4
c000c0b7:	8d 50 10             	lea    edx,[eax+0x10]
c000c0ba:	39 88 c0 3f 02 c0    	cmp    DWORD PTR [eax-0x3ffdc040],ecx
c000c0c0:	74 08                	je     c000c0ca <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c0c2:	83 c0 04             	add    eax,0x4
c000c0c5:	39 d0                	cmp    eax,edx
c000c0c7:	75 f1                	jne    c000c0ba <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c0c9:	c3                   	ret    
c000c0ca:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c0d4:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c0de:	eb e2                	jmp    c000c0c2 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c0e0 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c0e0:	53                   	push   ebx
c000c0e1:	83 ec 08             	sub    esp,0x8
c000c0e4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c0e8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c0ed:	74 0e                	je     c000c0fd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c0ef:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000c0f4:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c0fb:	75 37                	jne    c000c134 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c0fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c101:	83 c0 20             	add    eax,0x20
c000c104:	c1 e0 04             	shl    eax,0x4
c000c107:	8d 50 10             	lea    edx,[eax+0x10]
c000c10a:	39 98 c0 3f 02 c0    	cmp    DWORD PTR [eax-0x3ffdc040],ebx
c000c110:	74 0c                	je     c000c11e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c112:	83 c0 04             	add    eax,0x4
c000c115:	39 d0                	cmp    eax,edx
c000c117:	75 f1                	jne    c000c10a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c119:	83 c4 08             	add    esp,0x8
c000c11c:	5b                   	pop    ebx
c000c11d:	c3                   	ret    
c000c11e:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c128:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c132:	eb de                	jmp    c000c112 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c134:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c139:	7f 12                	jg     c000c14d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c13b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c13f:	31 c0                	xor    eax,eax
c000c141:	8a 81 a0 ff 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe0060]
c000c147:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14b:	eb b0                	jmp    c000c0fd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c14d:	83 ec 0c             	sub    esp,0xc
c000c150:	68 d5 e7 01 c0       	push   0xc001e7d5
c000c155:	e8 69 41 00 00       	call   c00102c3 <KePanic(char const*)>
c000c15a:	83 c4 10             	add    esp,0x10
c000c15d:	eb 9e                	jmp    c000c0fd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c15f <setupINTS()>:
c000c15f:	31 c0                	xor    eax,eax
c000c161:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c16b:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c175:	c7 80 c4 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc03c],0x0
c000c17f:	c7 80 c4 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd03c],0x0
c000c189:	c7 80 c8 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc038],0x0
c000c193:	c7 80 c8 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd038],0x0
c000c19d:	c7 80 cc 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc034],0x0
c000c1a7:	c7 80 cc 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd034],0x0
c000c1b1:	83 c0 10             	add    eax,0x10
c000c1b4:	3d 00 10 00 00       	cmp    eax,0x1000
c000c1b9:	75 a6                	jne    c000c161 <setupINTS()+0x2>
c000c1bb:	c3                   	ret    

c000c1bc <convertLegacyIRQNumber(int)>:
c000c1bc:	83 ec 0c             	sub    esp,0xc
c000c1bf:	8b 15 b8 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022eb8
c000c1c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1c9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c1d0:	74 0f                	je     c000c1e1 <convertLegacyIRQNumber(int)+0x25>
c000c1d2:	83 f8 0f             	cmp    eax,0xf
c000c1d5:	7f 0e                	jg     c000c1e5 <convertLegacyIRQNumber(int)+0x29>
c000c1d7:	31 c9                	xor    ecx,ecx
c000c1d9:	8a 88 a0 ff 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe0060]
c000c1df:	89 c8                	mov    eax,ecx
c000c1e1:	83 c4 0c             	add    esp,0xc
c000c1e4:	c3                   	ret    
c000c1e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c1e9:	83 ec 0c             	sub    esp,0xc
c000c1ec:	68 e4 e7 01 c0       	push   0xc001e7e4
c000c1f1:	e8 cd 40 00 00       	call   c00102c3 <KePanic(char const*)>
c000c1f6:	83 c4 10             	add    esp,0x10
c000c1f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1fd:	83 c4 0c             	add    esp,0xc
c000c200:	c3                   	ret    
c000c201:	90                   	nop

c000c202 <startGUI(void*)>:
c000c202:	55                   	push   ebp
c000c203:	89 e5                	mov    ebp,esp
c000c205:	53                   	push   ebx
c000c206:	83 ec 04             	sub    esp,0x4
c000c209:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c20e:	48                   	dec    eax
c000c20f:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000c214:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c219:	85 c0                	test   eax,eax
c000c21b:	75 01                	jne    c000c21e <startGUI(void*)+0x1c>
c000c21d:	fb                   	sti    
c000c21e:	8b 1d b8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022eb8
c000c224:	83 ec 08             	sub    esp,0x8
c000c227:	6a 01                	push   0x1
c000c229:	68 41 e8 01 c0       	push   0xc001e841
c000c22e:	e8 83 6b 00 00       	call   c0012db6 <Thr::loadDLL(char const*, bool)>
c000c233:	83 c4 10             	add    esp,0x10
c000c236:	83 ec 08             	sub    esp,0x8
c000c239:	53                   	push   ebx
c000c23a:	50                   	push   eax
c000c23b:	e8 a7 6d 00 00       	call   c0012fe7 <Thr::executeDLL(unsigned long, void*)>
c000c240:	83 c4 10             	add    esp,0x10
c000c243:	8b 1d b8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022eb8
c000c249:	83 ec 08             	sub    esp,0x8
c000c24c:	6a 01                	push   0x1
c000c24e:	68 5b e8 01 c0       	push   0xc001e85b
c000c253:	e8 5e 6b 00 00       	call   c0012db6 <Thr::loadDLL(char const*, bool)>
c000c258:	83 c4 10             	add    esp,0x10
c000c25b:	83 ec 08             	sub    esp,0x8
c000c25e:	53                   	push   ebx
c000c25f:	50                   	push   eax
c000c260:	e8 82 6d 00 00       	call   c0012fe7 <Thr::executeDLL(unsigned long, void*)>
c000c265:	83 c4 10             	add    esp,0x10
c000c268:	90                   	nop
c000c269:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c26c:	c9                   	leave  
c000c26d:	c3                   	ret    

c000c26e <startGUIVESA(void*)>:
c000c26e:	55                   	push   ebp
c000c26f:	89 e5                	mov    ebp,esp
c000c271:	53                   	push   ebx
c000c272:	83 ec 04             	sub    esp,0x4
c000c275:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c27a:	48                   	dec    eax
c000c27b:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000c280:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c285:	85 c0                	test   eax,eax
c000c287:	75 01                	jne    c000c28a <startGUIVESA(void*)+0x1c>
c000c289:	fb                   	sti    
c000c28a:	8b 1d b8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022eb8
c000c290:	83 ec 08             	sub    esp,0x8
c000c293:	6a 01                	push   0x1
c000c295:	68 79 e8 01 c0       	push   0xc001e879
c000c29a:	e8 17 6b 00 00       	call   c0012db6 <Thr::loadDLL(char const*, bool)>
c000c29f:	83 c4 10             	add    esp,0x10
c000c2a2:	83 ec 08             	sub    esp,0x8
c000c2a5:	53                   	push   ebx
c000c2a6:	50                   	push   eax
c000c2a7:	e8 3b 6d 00 00       	call   c0012fe7 <Thr::executeDLL(unsigned long, void*)>
c000c2ac:	83 c4 10             	add    esp,0x10
c000c2af:	8b 1d b8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022eb8
c000c2b5:	83 ec 08             	sub    esp,0x8
c000c2b8:	6a 01                	push   0x1
c000c2ba:	68 5b e8 01 c0       	push   0xc001e85b
c000c2bf:	e8 f2 6a 00 00       	call   c0012db6 <Thr::loadDLL(char const*, bool)>
c000c2c4:	83 c4 10             	add    esp,0x10
c000c2c7:	83 ec 08             	sub    esp,0x8
c000c2ca:	53                   	push   ebx
c000c2cb:	50                   	push   eax
c000c2cc:	e8 16 6d 00 00       	call   c0012fe7 <Thr::executeDLL(unsigned long, void*)>
c000c2d1:	83 c4 10             	add    esp,0x10
c000c2d4:	90                   	nop
c000c2d5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c2d8:	c9                   	leave  
c000c2d9:	c3                   	ret    

c000c2da <sendKeyToTerminal(unsigned char)>:
c000c2da:	55                   	push   ebp
c000c2db:	89 e5                	mov    ebp,esp
c000c2dd:	83 ec 28             	sub    esp,0x28
c000c2e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2e3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c2e6:	8b 15 04 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f04
c000c2ec:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c2ef:	25 ff 00 00 00       	and    eax,0xff
c000c2f4:	83 ec 08             	sub    esp,0x8
c000c2f7:	50                   	push   eax
c000c2f8:	52                   	push   edx
c000c2f9:	e8 b4 c7 ff ff       	call   c0008ab2 <VgaText::receiveKey(unsigned char)>
c000c2fe:	83 c4 10             	add    esp,0x10
c000c301:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c305:	74 0a                	je     c000c311 <sendKeyToTerminal(unsigned char)+0x37>
c000c307:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000c30b:	0f 85 8f 00 00 00    	jne    c000c3a0 <sendKeyToTerminal(unsigned char)+0xc6>
c000c311:	fa                   	cli    
c000c312:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c317:	40                   	inc    eax
c000c318:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000c31d:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c000c322:	40                   	inc    eax
c000c323:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c000c328:	a1 c0 4f 02 c0       	mov    eax,ds:0xc0024fc0
c000c32d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c330:	c7 05 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024fc0,0x0
c000c33a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c33e:	74 1f                	je     c000c35f <sendKeyToTerminal(unsigned char)+0x85>
c000c340:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c343:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c346:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c349:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c34c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c34f:	83 ec 0c             	sub    esp,0xc
c000c352:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c355:	e8 4a 79 00 00       	call   c0013ca4 <unblockTask(ThreadControlBlock*)>
c000c35a:	83 c4 10             	add    esp,0x10
c000c35d:	eb db                	jmp    c000c33a <sendKeyToTerminal(unsigned char)+0x60>
c000c35f:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c000c364:	48                   	dec    eax
c000c365:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c000c36a:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c000c36f:	85 c0                	test   eax,eax
c000c371:	75 18                	jne    c000c38b <sendKeyToTerminal(unsigned char)+0xb1>
c000c373:	a1 60 61 02 c0       	mov    eax,ds:0xc0026160
c000c378:	85 c0                	test   eax,eax
c000c37a:	74 0f                	je     c000c38b <sendKeyToTerminal(unsigned char)+0xb1>
c000c37c:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c000c386:	e8 55 74 00 00       	call   c00137e0 <schedule()>
c000c38b:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c390:	48                   	dec    eax
c000c391:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000c396:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c39b:	85 c0                	test   eax,eax
c000c39d:	75 01                	jne    c000c3a0 <sendKeyToTerminal(unsigned char)+0xc6>
c000c39f:	fb                   	sti    
c000c3a0:	90                   	nop
c000c3a1:	c9                   	leave  
c000c3a2:	c3                   	ret    

c000c3a3 <sendKeyboardToken(KeyboardToken)>:
c000c3a3:	55                   	push   ebp
c000c3a4:	89 e5                	mov    ebp,esp
c000c3a6:	83 ec 18             	sub    esp,0x18
c000c3a9:	e8 65 3f 00 00       	call   c0010313 <Krnl::userIOReceived()>
c000c3ae:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c3b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3b4:	25 ff ff 00 00       	and    eax,0xffff
c000c3b9:	83 f2 01             	xor    edx,0x1
c000c3bc:	88 90 e0 4f 02 c0    	mov    BYTE PTR [eax-0x3ffdb020],dl
c000c3c2:	a1 c8 4f 02 c0       	mov    eax,ds:0xc0024fc8
c000c3c7:	85 c0                	test   eax,eax
c000c3c9:	74 24                	je     c000c3ef <sendKeyboardToken(KeyboardToken)+0x4c>
c000c3cb:	8b 0d c8 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fc8
c000c3d1:	83 ec 04             	sub    esp,0x4
c000c3d4:	68 e0 4f 02 c0       	push   0xc0024fe0
c000c3d9:	83 ec 08             	sub    esp,0x8
c000c3dc:	89 e2                	mov    edx,esp
c000c3de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3e1:	89 02                	mov    DWORD PTR [edx],eax
c000c3e3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c3e6:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c3ea:	ff d1                	call   ecx
c000c3ec:	83 c4 10             	add    esp,0x10
c000c3ef:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c3f3:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c3f6:	a0 e8 53 02 c0       	mov    al,ds:0xc00253e8
c000c3fb:	38 c2                	cmp    dl,al
c000c3fd:	74 1e                	je     c000c41d <sendKeyboardToken(KeyboardToken)+0x7a>
c000c3ff:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c402:	a2 e8 53 02 c0       	mov    ds:0xc00253e8,al
c000c407:	a0 e8 53 02 c0       	mov    al,ds:0xc00253e8
c000c40c:	25 ff 00 00 00       	and    eax,0xff
c000c411:	83 ec 0c             	sub    esp,0xc
c000c414:	50                   	push   eax
c000c415:	e8 e6 bd ff ff       	call   c0008200 <setTerminalScrollLock(bool)>
c000c41a:	83 c4 10             	add    esp,0x10
c000c41d:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c420:	84 c0                	test   al,al
c000c422:	0f 84 ae 00 00 00    	je     c000c4d6 <sendKeyboardToken(KeyboardToken)+0x133>
c000c428:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c42b:	66 3d 10 03          	cmp    ax,0x310
c000c42f:	75 06                	jne    c000c437 <sendKeyboardToken(KeyboardToken)+0x94>
c000c431:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c437:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c43a:	66 3d 11 03          	cmp    ax,0x311
c000c43e:	75 06                	jne    c000c446 <sendKeyboardToken(KeyboardToken)+0xa3>
c000c440:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c446:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c449:	66 3d 12 03          	cmp    ax,0x312
c000c44d:	75 06                	jne    c000c455 <sendKeyboardToken(KeyboardToken)+0xb2>
c000c44f:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c455:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c458:	66 3d 13 03          	cmp    ax,0x313
c000c45c:	75 06                	jne    c000c464 <sendKeyboardToken(KeyboardToken)+0xc1>
c000c45e:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c464:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c467:	66 3d 14 03          	cmp    ax,0x314
c000c46b:	75 06                	jne    c000c473 <sendKeyboardToken(KeyboardToken)+0xd0>
c000c46d:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c473:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c476:	66 3d 15 03          	cmp    ax,0x315
c000c47a:	75 06                	jne    c000c482 <sendKeyboardToken(KeyboardToken)+0xdf>
c000c47c:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c482:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c485:	66 3d 16 03          	cmp    ax,0x316
c000c489:	75 06                	jne    c000c491 <sendKeyboardToken(KeyboardToken)+0xee>
c000c48b:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c491:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c494:	66 3d 17 03          	cmp    ax,0x317
c000c498:	75 06                	jne    c000c4a0 <sendKeyboardToken(KeyboardToken)+0xfd>
c000c49a:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c4a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4a3:	66 3d 18 03          	cmp    ax,0x318
c000c4a7:	75 06                	jne    c000c4af <sendKeyboardToken(KeyboardToken)+0x10c>
c000c4a9:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c4af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4b2:	66 3d 19 03          	cmp    ax,0x319
c000c4b6:	75 06                	jne    c000c4be <sendKeyboardToken(KeyboardToken)+0x11b>
c000c4b8:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c4be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4c1:	66 3d 1a 03          	cmp    ax,0x31a
c000c4c5:	0f 85 c9 00 00 00    	jne    c000c594 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c4cb:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c4d1:	e9 be 00 00 00       	jmp    c000c594 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c4d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4d9:	66 3d 10 03          	cmp    ax,0x310
c000c4dd:	75 0a                	jne    c000c4e9 <sendKeyboardToken(KeyboardToken)+0x146>
c000c4df:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c4e5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4ec:	66 3d 11 03          	cmp    ax,0x311
c000c4f0:	75 0a                	jne    c000c4fc <sendKeyboardToken(KeyboardToken)+0x159>
c000c4f2:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c4f8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4ff:	66 3d 12 03          	cmp    ax,0x312
c000c503:	75 0a                	jne    c000c50f <sendKeyboardToken(KeyboardToken)+0x16c>
c000c505:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c50b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c50f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c512:	66 3d 13 03          	cmp    ax,0x313
c000c516:	75 0a                	jne    c000c522 <sendKeyboardToken(KeyboardToken)+0x17f>
c000c518:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c51e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c522:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c525:	66 3d 14 03          	cmp    ax,0x314
c000c529:	75 0a                	jne    c000c535 <sendKeyboardToken(KeyboardToken)+0x192>
c000c52b:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c531:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c535:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c538:	66 3d 15 03          	cmp    ax,0x315
c000c53c:	75 0a                	jne    c000c548 <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c53e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c544:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c548:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c54b:	66 3d 16 03          	cmp    ax,0x316
c000c54f:	75 0a                	jne    c000c55b <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c551:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c557:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c55b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c55e:	66 3d 17 03          	cmp    ax,0x317
c000c562:	75 0a                	jne    c000c56e <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c564:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c56a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c56e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c571:	66 3d 18 03          	cmp    ax,0x318
c000c575:	75 0a                	jne    c000c581 <sendKeyboardToken(KeyboardToken)+0x1de>
c000c577:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c57d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c584:	66 3d 19 03          	cmp    ax,0x319
c000c588:	75 0a                	jne    c000c594 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c58a:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c590:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c594:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c597:	66 3d 00 02          	cmp    ax,0x200
c000c59b:	75 2c                	jne    c000c5c9 <sendKeyboardToken(KeyboardToken)+0x226>
c000c59d:	a0 e0 53 02 c0       	mov    al,ds:0xc00253e0
c000c5a2:	83 f0 01             	xor    eax,0x1
c000c5a5:	84 c0                	test   al,al
c000c5a7:	74 20                	je     c000c5c9 <sendKeyboardToken(KeyboardToken)+0x226>
c000c5a9:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c000c5ae:	6a 01                	push   0x1
c000c5b0:	6a 00                	push   0x0
c000c5b2:	68 02 c2 00 c0       	push   0xc000c202
c000c5b7:	50                   	push   eax
c000c5b8:	e8 03 70 00 00       	call   c00135c0 <Process::createThread(void (*)(void*), void*, int)>
c000c5bd:	83 c4 10             	add    esp,0x10
c000c5c0:	c6 05 e0 53 02 c0 01 	mov    BYTE PTR ds:0xc00253e0,0x1
c000c5c7:	eb 33                	jmp    c000c5fc <sendKeyboardToken(KeyboardToken)+0x259>
c000c5c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5cc:	66 3d 01 02          	cmp    ax,0x201
c000c5d0:	75 2a                	jne    c000c5fc <sendKeyboardToken(KeyboardToken)+0x259>
c000c5d2:	a0 e0 53 02 c0       	mov    al,ds:0xc00253e0
c000c5d7:	83 f0 01             	xor    eax,0x1
c000c5da:	84 c0                	test   al,al
c000c5dc:	74 1e                	je     c000c5fc <sendKeyboardToken(KeyboardToken)+0x259>
c000c5de:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c000c5e3:	6a 01                	push   0x1
c000c5e5:	6a 00                	push   0x0
c000c5e7:	68 6e c2 00 c0       	push   0xc000c26e
c000c5ec:	50                   	push   eax
c000c5ed:	e8 ce 6f 00 00       	call   c00135c0 <Process::createThread(void (*)(void*), void*, int)>
c000c5f2:	83 c4 10             	add    esp,0x10
c000c5f5:	c6 05 e0 53 02 c0 01 	mov    BYTE PTR ds:0xc00253e0,0x1
c000c5fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5ff:	66 3d 1d 03          	cmp    ax,0x31d
c000c603:	75 06                	jne    c000c60b <sendKeyboardToken(KeyboardToken)+0x268>
c000c605:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c60b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c60e:	66 3d 1c 03          	cmp    ax,0x31c
c000c612:	75 06                	jne    c000c61a <sendKeyboardToken(KeyboardToken)+0x277>
c000c614:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c61a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c61d:	66 3d 1b 03          	cmp    ax,0x31b
c000c621:	75 06                	jne    c000c629 <sendKeyboardToken(KeyboardToken)+0x286>
c000c623:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c629:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c62c:	66 3d 1e 03          	cmp    ax,0x31e
c000c630:	75 06                	jne    c000c638 <sendKeyboardToken(KeyboardToken)+0x295>
c000c632:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c638:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c63b:	66 3d 1f 03          	cmp    ax,0x31f
c000c63f:	75 06                	jne    c000c647 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c641:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c647:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c64a:	66 3d 1a 03          	cmp    ax,0x31a
c000c64e:	75 06                	jne    c000c656 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c650:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c656:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c65a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c65d:	83 f0 01             	xor    eax,0x1
c000c660:	84 c0                	test   al,al
c000c662:	74 7b                	je     c000c6df <sendKeyboardToken(KeyboardToken)+0x33c>
c000c664:	a0 e1 50 02 c0       	mov    al,ds:0xc00250e1
c000c669:	84 c0                	test   al,al
c000c66b:	74 43                	je     c000c6b0 <sendKeyboardToken(KeyboardToken)+0x30d>
c000c66d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c671:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c675:	74 2d                	je     c000c6a4 <sendKeyboardToken(KeyboardToken)+0x301>
c000c677:	8b 15 e4 53 02 c0    	mov    edx,DWORD PTR ds:0xc00253e4
c000c67d:	89 d0                	mov    eax,edx
c000c67f:	c1 e0 02             	shl    eax,0x2
c000c682:	01 d0                	add    eax,edx
c000c684:	01 c0                	add    eax,eax
c000c686:	a3 e4 53 02 c0       	mov    ds:0xc00253e4,eax
c000c68b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c68e:	25 ff ff 00 00       	and    eax,0xffff
c000c693:	8d 50 d0             	lea    edx,[eax-0x30]
c000c696:	a1 e4 53 02 c0       	mov    eax,ds:0xc00253e4
c000c69b:	01 d0                	add    eax,edx
c000c69d:	a3 e4 53 02 c0       	mov    ds:0xc00253e4,eax
c000c6a2:	eb 71                	jmp    c000c715 <sendKeyboardToken(KeyboardToken)+0x372>
c000c6a4:	c7 05 e4 53 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00253e4,0x0
c000c6ae:	eb 65                	jmp    c000c715 <sendKeyboardToken(KeyboardToken)+0x372>
c000c6b0:	a1 e4 53 02 c0       	mov    eax,ds:0xc00253e4
c000c6b5:	85 c0                	test   eax,eax
c000c6b7:	74 1a                	je     c000c6d3 <sendKeyboardToken(KeyboardToken)+0x330>
c000c6b9:	a1 e4 53 02 c0       	mov    eax,ds:0xc00253e4
c000c6be:	25 ff 00 00 00       	and    eax,0xff
c000c6c3:	83 ec 0c             	sub    esp,0xc
c000c6c6:	50                   	push   eax
c000c6c7:	e8 0e fc ff ff       	call   c000c2da <sendKeyToTerminal(unsigned char)>
c000c6cc:	83 c4 10             	add    esp,0x10
c000c6cf:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c6d3:	c7 05 e4 53 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00253e4,0x0
c000c6dd:	eb 36                	jmp    c000c715 <sendKeyboardToken(KeyboardToken)+0x372>
c000c6df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6e2:	66 3d 01 01          	cmp    ax,0x101
c000c6e6:	75 2d                	jne    c000c715 <sendKeyboardToken(KeyboardToken)+0x372>
c000c6e8:	a1 e4 53 02 c0       	mov    eax,ds:0xc00253e4
c000c6ed:	85 c0                	test   eax,eax
c000c6ef:	74 1a                	je     c000c70b <sendKeyboardToken(KeyboardToken)+0x368>
c000c6f1:	a1 e4 53 02 c0       	mov    eax,ds:0xc00253e4
c000c6f6:	25 ff 00 00 00       	and    eax,0xff
c000c6fb:	83 ec 0c             	sub    esp,0xc
c000c6fe:	50                   	push   eax
c000c6ff:	e8 d6 fb ff ff       	call   c000c2da <sendKeyToTerminal(unsigned char)>
c000c704:	83 c4 10             	add    esp,0x10
c000c707:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c70b:	c7 05 e4 53 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00253e4,0x0
c000c715:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c718:	83 f0 01             	xor    eax,0x1
c000c71b:	84 c0                	test   al,al
c000c71d:	74 4e                	je     c000c76d <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c71f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c722:	83 f0 01             	xor    eax,0x1
c000c725:	84 c0                	test   al,al
c000c727:	74 44                	je     c000c76d <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c729:	a0 e0 50 02 c0       	mov    al,ds:0xc00250e0
c000c72e:	83 f0 01             	xor    eax,0x1
c000c731:	84 c0                	test   al,al
c000c733:	74 38                	je     c000c76d <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c735:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c738:	66 83 f8 1f          	cmp    ax,0x1f
c000c73c:	76 09                	jbe    c000c747 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c73e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c741:	66 83 f8 7e          	cmp    ax,0x7e
c000c745:	76 12                	jbe    c000c759 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c747:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c74a:	66 83 f8 0a          	cmp    ax,0xa
c000c74e:	74 09                	je     c000c759 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c750:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c753:	66 83 f8 08          	cmp    ax,0x8
c000c757:	75 14                	jne    c000c76d <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c759:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c75c:	25 ff 00 00 00       	and    eax,0xff
c000c761:	83 ec 0c             	sub    esp,0xc
c000c764:	50                   	push   eax
c000c765:	e8 70 fb ff ff       	call   c000c2da <sendKeyToTerminal(unsigned char)>
c000c76a:	83 c4 10             	add    esp,0x10
c000c76d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c770:	83 f0 01             	xor    eax,0x1
c000c773:	84 c0                	test   al,al
c000c775:	74 51                	je     c000c7c8 <sendKeyboardToken(KeyboardToken)+0x425>
c000c777:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c77a:	83 f0 01             	xor    eax,0x1
c000c77d:	84 c0                	test   al,al
c000c77f:	74 47                	je     c000c7c8 <sendKeyboardToken(KeyboardToken)+0x425>
c000c781:	a0 e0 50 02 c0       	mov    al,ds:0xc00250e0
c000c786:	84 c0                	test   al,al
c000c788:	74 3e                	je     c000c7c8 <sendKeyboardToken(KeyboardToken)+0x425>
c000c78a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c78d:	66 83 f8 3f          	cmp    ax,0x3f
c000c791:	76 35                	jbe    c000c7c8 <sendKeyboardToken(KeyboardToken)+0x425>
c000c793:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c796:	66 83 f8 7f          	cmp    ax,0x7f
c000c79a:	77 2c                	ja     c000c7c8 <sendKeyboardToken(KeyboardToken)+0x425>
c000c79c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c79f:	88 c2                	mov    dl,al
c000c7a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7a4:	66 83 f8 5f          	cmp    ax,0x5f
c000c7a8:	76 04                	jbe    c000c7ae <sendKeyboardToken(KeyboardToken)+0x40b>
c000c7aa:	b0 20                	mov    al,0x20
c000c7ac:	eb 02                	jmp    c000c7b0 <sendKeyboardToken(KeyboardToken)+0x40d>
c000c7ae:	b0 00                	mov    al,0x0
c000c7b0:	29 c2                	sub    edx,eax
c000c7b2:	88 d0                	mov    al,dl
c000c7b4:	83 e8 40             	sub    eax,0x40
c000c7b7:	25 ff 00 00 00       	and    eax,0xff
c000c7bc:	83 ec 0c             	sub    esp,0xc
c000c7bf:	50                   	push   eax
c000c7c0:	e8 15 fb ff ff       	call   c000c2da <sendKeyToTerminal(unsigned char)>
c000c7c5:	83 c4 10             	add    esp,0x10
c000c7c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7cb:	66 3d 00 03          	cmp    ax,0x300
c000c7cf:	75 0f                	jne    c000c7e0 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c7d1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c7d4:	83 f0 01             	xor    eax,0x1
c000c7d7:	84 c0                	test   al,al
c000c7d9:	74 05                	je     c000c7e0 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c7db:	e8 21 ba ff ff       	call   c0008201 <doTerminalCycle()>
c000c7e0:	90                   	nop
c000c7e1:	c9                   	leave  
c000c7e2:	c3                   	ret    

c000c7e3 <clearInternalKeybuffer(VgaText*)>:
c000c7e3:	55                   	push   ebp
c000c7e4:	89 e5                	mov    ebp,esp
c000c7e6:	83 ec 08             	sub    esp,0x8
c000c7e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7ec:	05 02 01 00 00       	add    eax,0x102
c000c7f1:	83 ec 0c             	sub    esp,0xc
c000c7f4:	50                   	push   eax
c000c7f5:	e8 46 3d ff ff       	call   c0000540 <strlen>
c000c7fa:	83 c4 10             	add    esp,0x10
c000c7fd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c800:	81 c2 02 01 00 00    	add    edx,0x102
c000c806:	83 ec 04             	sub    esp,0x4
c000c809:	50                   	push   eax
c000c80a:	6a 00                	push   0x0
c000c80c:	52                   	push   edx
c000c80d:	e8 be 3c ff ff       	call   c00004d0 <memset>
c000c812:	83 c4 10             	add    esp,0x10
c000c815:	90                   	nop
c000c816:	c9                   	leave  
c000c817:	c3                   	ret    

c000c818 <readKeyboard(VgaText*, char*, unsigned long)>:
c000c818:	55                   	push   ebp
c000c819:	89 e5                	mov    ebp,esp
c000c81b:	83 ec 18             	sub    esp,0x18
c000c81e:	a1 c8 4f 02 c0       	mov    eax,ds:0xc0024fc8
c000c823:	85 c0                	test   eax,eax
c000c825:	74 2a                	je     c000c851 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c827:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c82d:	8b 0d c8 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fc8
c000c833:	83 ec 04             	sub    esp,0x4
c000c836:	68 e0 4f 02 c0       	push   0xc0024fe0
c000c83b:	83 ec 08             	sub    esp,0x8
c000c83e:	89 e2                	mov    edx,esp
c000c840:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c843:	89 02                	mov    DWORD PTR [edx],eax
c000c845:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c848:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c84c:	ff d1                	call   ecx
c000c84e:	83 c4 10             	add    esp,0x10
c000c851:	fb                   	sti    
c000c852:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c859:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c85d:	0f 84 cb 00 00 00    	je     c000c92e <readKeyboard(VgaText*, char*, unsigned long)+0x116>
c000c863:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c866:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000c86c:	84 c0                	test   al,al
c000c86e:	75 28                	jne    c000c898 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c870:	fa                   	cli    
c000c871:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c876:	40                   	inc    eax
c000c877:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000c87c:	e8 5f 6f 00 00       	call   c00137e0 <schedule()>
c000c881:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c886:	48                   	dec    eax
c000c887:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000c88c:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c891:	85 c0                	test   eax,eax
c000c893:	75 ce                	jne    c000c863 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c895:	fb                   	sti    
c000c896:	eb cb                	jmp    c000c863 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c898:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c89b:	8d 50 01             	lea    edx,[eax+0x1]
c000c89e:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c8a1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c8a4:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000c8aa:	88 10                	mov    BYTE PTR [eax],dl
c000c8ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8af:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000c8b5:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c8b8:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c8bc:	75 1e                	jne    c000c8dc <readKeyboard(VgaText*, char*, unsigned long)+0xc4>
c000c8be:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c8c3:	8b 00                	mov    eax,DWORD PTR [eax]
c000c8c5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c8c8:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000c8ce:	83 ec 08             	sub    esp,0x8
c000c8d1:	6a 02                	push   0x2
c000c8d3:	50                   	push   eax
c000c8d4:	e8 d6 3d 00 00       	call   c00106af <KeRaiseSignal(SigHandlerBlock*, int)>
c000c8d9:	83 c4 10             	add    esp,0x10
c000c8dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8df:	05 02 01 00 00       	add    eax,0x102
c000c8e4:	83 ec 0c             	sub    esp,0xc
c000c8e7:	50                   	push   eax
c000c8e8:	e8 53 3c ff ff       	call   c0000540 <strlen>
c000c8ed:	83 c4 10             	add    esp,0x10
c000c8f0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c8f3:	81 c2 02 01 00 00    	add    edx,0x102
c000c8f9:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c8fc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c8ff:	81 c2 02 01 00 00    	add    edx,0x102
c000c905:	83 ec 04             	sub    esp,0x4
c000c908:	50                   	push   eax
c000c909:	51                   	push   ecx
c000c90a:	52                   	push   edx
c000c90b:	e8 d0 3a ff ff       	call   c00003e0 <memmove>
c000c910:	83 c4 10             	add    esp,0x10
c000c913:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c916:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c919:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c91d:	74 0a                	je     c000c929 <readKeyboard(VgaText*, char*, unsigned long)+0x111>
c000c91f:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c923:	0f 85 30 ff ff ff    	jne    c000c859 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c929:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c92c:	eb 03                	jmp    c000c931 <readKeyboard(VgaText*, char*, unsigned long)+0x119>
c000c92e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c931:	c9                   	leave  
c000c932:	c3                   	ret    
c000c933:	90                   	nop

c000c934 <Keyboard::Keyboard(char const*)>:
c000c934:	83 ec 0c             	sub    esp,0xc
c000c937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93b:	83 ec 08             	sub    esp,0x8
c000c93e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c942:	50                   	push   eax
c000c943:	e8 48 f2 ff ff       	call   c000bb90 <Device::Device(char const*)>
c000c948:	83 c4 10             	add    esp,0x10
c000c94b:	ba 9c e8 01 c0       	mov    edx,0xc001e89c
c000c950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c954:	89 10                	mov    DWORD PTR [eax],edx
c000c956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c95a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000c964:	c6 05 c4 4f 02 c0 01 	mov    BYTE PTR ds:0xc0024fc4,0x1
c000c96b:	90                   	nop
c000c96c:	83 c4 0c             	add    esp,0xc
c000c96f:	c3                   	ret    

c000c970 <Keyboard::~Keyboard()>:
c000c970:	83 ec 0c             	sub    esp,0xc
c000c973:	ba 9c e8 01 c0       	mov    edx,0xc001e89c
c000c978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c97c:	89 10                	mov    DWORD PTR [eax],edx
c000c97e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c982:	83 ec 0c             	sub    esp,0xc
c000c985:	50                   	push   eax
c000c986:	e8 6f ef ff ff       	call   c000b8fa <Device::~Device()>
c000c98b:	83 c4 10             	add    esp,0x10
c000c98e:	90                   	nop
c000c98f:	83 c4 0c             	add    esp,0xc
c000c992:	c3                   	ret    
c000c993:	90                   	nop

c000c994 <Keyboard::~Keyboard()>:
c000c994:	83 ec 0c             	sub    esp,0xc
c000c997:	83 ec 0c             	sub    esp,0xc
c000c99a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c99e:	e8 cd ff ff ff       	call   c000c970 <Keyboard::~Keyboard()>
c000c9a3:	83 c4 10             	add    esp,0x10
c000c9a6:	83 ec 08             	sub    esp,0x8
c000c9a9:	68 5c 01 00 00       	push   0x15c
c000c9ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9b2:	e8 0d db ff ff       	call   c000a4c4 <operator delete(void*, unsigned long)>
c000c9b7:	83 c4 10             	add    esp,0x10
c000c9ba:	83 c4 0c             	add    esp,0xc
c000c9bd:	c3                   	ret    

c000c9be <LogicalDisk::close(int, int, void*)>:
c000c9be:	83 c8 ff             	or     eax,0xffffffff
c000c9c1:	c3                   	ret    

c000c9c2 <LogicalDisk::~LogicalDisk()>:
c000c9c2:	83 ec 0c             	sub    esp,0xc
c000c9c5:	ba 14 e9 01 c0       	mov    edx,0xc001e914
c000c9ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9ce:	89 10                	mov    DWORD PTR [eax],edx
c000c9d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9d4:	83 ec 0c             	sub    esp,0xc
c000c9d7:	50                   	push   eax
c000c9d8:	e8 1d ef ff ff       	call   c000b8fa <Device::~Device()>
c000c9dd:	83 c4 10             	add    esp,0x10
c000c9e0:	90                   	nop
c000c9e1:	83 c4 0c             	add    esp,0xc
c000c9e4:	c3                   	ret    
c000c9e5:	90                   	nop

c000c9e6 <LogicalDisk::~LogicalDisk()>:
c000c9e6:	83 ec 0c             	sub    esp,0xc
c000c9e9:	83 ec 0c             	sub    esp,0xc
c000c9ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f0:	e8 cd ff ff ff       	call   c000c9c2 <LogicalDisk::~LogicalDisk()>
c000c9f5:	83 c4 10             	add    esp,0x10
c000c9f8:	83 ec 08             	sub    esp,0x8
c000c9fb:	68 74 01 00 00       	push   0x174
c000ca00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca04:	e8 bb da ff ff       	call   c000a4c4 <operator delete(void*, unsigned long)>
c000ca09:	83 c4 10             	add    esp,0x10
c000ca0c:	83 c4 0c             	add    esp,0xc
c000ca0f:	c3                   	ret    

c000ca10 <LogicalDisk::open(int, int, void*)>:
c000ca10:	83 ec 18             	sub    esp,0x18
c000ca13:	68 c8 e8 01 c0       	push   0xc001e8c8
c000ca18:	e8 a6 38 00 00       	call   c00102c3 <KePanic(char const*)>
c000ca1d:	83 c8 ff             	or     eax,0xffffffff
c000ca20:	83 c4 1c             	add    esp,0x1c
c000ca23:	c3                   	ret    

c000ca24 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000ca24:	53                   	push   ebx
c000ca25:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ca29:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ca2d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca31:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000ca37:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000ca3d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000ca43:	77 10                	ja     c000ca55 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000ca45:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000ca4b:	89 d3                	mov    ebx,edx
c000ca4d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000ca53:	72 05                	jb     c000ca5a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000ca55:	83 c8 ff             	or     eax,0xffffffff
c000ca58:	89 c2                	mov    edx,eax
c000ca5a:	5b                   	pop    ebx
c000ca5b:	c3                   	ret    

c000ca5c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000ca5c:	56                   	push   esi
c000ca5d:	83 c8 ff             	or     eax,0xffffffff
c000ca60:	53                   	push   ebx
c000ca61:	89 c2                	mov    edx,eax
c000ca63:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ca67:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000ca6b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ca6f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ca75:	77 27                	ja     c000ca9e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ca77:	89 d8                	mov    eax,ebx
c000ca79:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000ca7f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000ca85:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ca8a:	89 c2                	mov    edx,eax
c000ca8c:	73 10                	jae    c000ca9e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ca8e:	89 c8                	mov    eax,ecx
c000ca90:	89 da                	mov    edx,ebx
c000ca92:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000ca98:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000ca9e:	5b                   	pop    ebx
c000ca9f:	5e                   	pop    esi
c000caa0:	c3                   	ret    
c000caa1:	90                   	nop

c000caa2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000caa2:	83 ec 1c             	sub    esp,0x1c
c000caa5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000caa9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000caad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cab1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cab5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cab9:	89 04 24             	mov    DWORD PTR [esp],eax
c000cabc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cac0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cac4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cac8:	83 ec 08             	sub    esp,0x8
c000cacb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cacf:	50                   	push   eax
c000cad0:	e8 bb f0 ff ff       	call   c000bb90 <Device::Device(char const*)>
c000cad5:	83 c4 10             	add    esp,0x10
c000cad8:	ba 14 e9 01 c0       	mov    edx,0xc001e914
c000cadd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cae1:	89 10                	mov    DWORD PTR [eax],edx
c000cae3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cae7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000caee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000caf2:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000caf9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cafd:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000cb07:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cb0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb13:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000cb19:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000cb1f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cb23:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cb26:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb2a:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000cb30:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000cb36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb3a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cb3e:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000cb44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb48:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cb52:	90                   	nop
c000cb53:	83 c4 1c             	add    esp,0x1c
c000cb56:	c3                   	ret    
c000cb57:	90                   	nop

c000cb58 <LogicalDisk::assignDriveLetter()>:
c000cb58:	55                   	push   ebp
c000cb59:	57                   	push   edi
c000cb5a:	56                   	push   esi
c000cb5b:	53                   	push   ebx
c000cb5c:	83 ec 14             	sub    esp,0x14
c000cb5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cb63:	8b 3d 00 54 02 c0    	mov    edi,DWORD PTR ds:0xc0025400
c000cb69:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000cb6f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000cb73:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000cb79:	8b 3d 04 54 02 c0    	mov    edi,DWORD PTR ds:0xc0025404
c000cb7f:	3c 01                	cmp    al,0x1
c000cb81:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000cb85:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000cb89:	19 c0                	sbb    eax,eax
c000cb8b:	83 e0 02             	and    eax,0x2
c000cb8e:	83 c0 41             	add    eax,0x41
c000cb91:	0f be e8             	movsx  ebp,al
c000cb94:	3c 43                	cmp    al,0x43
c000cb96:	75 10                	jne    c000cba8 <LogicalDisk::assignDriveLetter()+0x50>
c000cb98:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000cb9f:	75 5d                	jne    c000cbfe <LogicalDisk::assignDriveLetter()+0xa6>
c000cba1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000cba6:	75 56                	jne    c000cbfe <LogicalDisk::assignDriveLetter()+0xa6>
c000cba8:	8d 75 bf             	lea    esi,[ebp-0x41]
c000cbab:	ba 01 00 00 00       	mov    edx,0x1
c000cbb0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000cbb4:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000cbb8:	d3 e2                	shl    edx,cl
c000cbba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cbbe:	89 d7                	mov    edi,edx
c000cbc0:	89 d6                	mov    esi,edx
c000cbc2:	c1 ff 1f             	sar    edi,0x1f
c000cbc5:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000cbc9:	21 f9                	and    ecx,edi
c000cbcb:	09 d1                	or     ecx,edx
c000cbcd:	75 2f                	jne    c000cbfe <LogicalDisk::assignDriveLetter()+0xa6>
c000cbcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000cbd3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cbd7:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000cbdd:	09 f2                	or     edx,esi
c000cbdf:	89 15 00 54 02 c0    	mov    DWORD PTR ds:0xc0025400,edx
c000cbe5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cbe9:	09 fa                	or     edx,edi
c000cbeb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000cbef:	89 15 04 54 02 c0    	mov    DWORD PTR ds:0xc0025404,edx
c000cbf5:	89 1c bd 20 54 02 c0 	mov    DWORD PTR [edi*4-0x3ffdabe0],ebx
c000cbfc:	eb 08                	jmp    c000cc06 <LogicalDisk::assignDriveLetter()+0xae>
c000cbfe:	45                   	inc    ebp
c000cbff:	40                   	inc    eax
c000cc00:	3c 5b                	cmp    al,0x5b
c000cc02:	75 90                	jne    c000cb94 <LogicalDisk::assignDriveLetter()+0x3c>
c000cc04:	31 c0                	xor    eax,eax
c000cc06:	83 c4 14             	add    esp,0x14
c000cc09:	5b                   	pop    ebx
c000cc0a:	5e                   	pop    esi
c000cc0b:	5f                   	pop    edi
c000cc0c:	5d                   	pop    ebp
c000cc0d:	c3                   	ret    

c000cc0e <LogicalDisk::mount()>:
c000cc0e:	56                   	push   esi
c000cc0f:	53                   	push   ebx
c000cc10:	53                   	push   ebx
c000cc11:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cc15:	8b 1d b4 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb4
c000cc1b:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000cc25:	85 db                	test   ebx,ebx
c000cc27:	74 27                	je     c000cc50 <LogicalDisk::mount()+0x42>
c000cc29:	51                   	push   ecx
c000cc2a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000cc31:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cc33:	83 e8 41             	sub    eax,0x41
c000cc36:	50                   	push   eax
c000cc37:	56                   	push   esi
c000cc38:	53                   	push   ebx
c000cc39:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cc3c:	83 c4 10             	add    esp,0x10
c000cc3f:	84 c0                	test   al,al
c000cc41:	74 08                	je     c000cc4b <LogicalDisk::mount()+0x3d>
c000cc43:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000cc49:	eb 07                	jmp    c000cc52 <LogicalDisk::mount()+0x44>
c000cc4b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000cc4e:	eb d5                	jmp    c000cc25 <LogicalDisk::mount()+0x17>
c000cc50:	31 c0                	xor    eax,eax
c000cc52:	5a                   	pop    edx
c000cc53:	5b                   	pop    ebx
c000cc54:	5e                   	pop    esi
c000cc55:	c3                   	ret    

c000cc56 <LogicalDisk::unmount()>:
c000cc56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc5a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cc64:	c3                   	ret    
c000cc65:	90                   	nop

c000cc66 <LogicalDisk::eject()>:
c000cc66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc6a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000cc70:	8b 10                	mov    edx,DWORD PTR [eax]
c000cc72:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cc76:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000cc79:	90                   	nop

c000cc7a <LogicalDisk::unassignDriveLetter()>:
c000cc7a:	57                   	push   edi
c000cc7b:	56                   	push   esi
c000cc7c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cc80:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000cc87:	84 c9                	test   cl,cl
c000cc89:	75 0f                	jne    c000cc9a <LogicalDisk::unassignDriveLetter()+0x20>
c000cc8b:	c7 44 24 0c ec e8 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e8ec
c000cc93:	5e                   	pop    esi
c000cc94:	5f                   	pop    edi
c000cc95:	e9 29 36 00 00       	jmp    c00102c3 <KePanic(char const*)>
c000cc9a:	83 e9 41             	sub    ecx,0x41
c000cc9d:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cca4:	b8 01 00 00 00       	mov    eax,0x1
c000cca9:	c7 04 8d 20 54 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdabe0],0x0
c000ccb4:	d3 e0                	shl    eax,cl
c000ccb6:	89 c7                	mov    edi,eax
c000ccb8:	f7 d0                	not    eax
c000ccba:	c1 ff 1f             	sar    edi,0x1f
c000ccbd:	21 05 00 54 02 c0    	and    DWORD PTR ds:0xc0025400,eax
c000ccc3:	89 fe                	mov    esi,edi
c000ccc5:	f7 d6                	not    esi
c000ccc7:	21 35 04 54 02 c0    	and    DWORD PTR ds:0xc0025404,esi
c000cccd:	5e                   	pop    esi
c000ccce:	5f                   	pop    edi
c000cccf:	c3                   	ret    

c000ccd0 <LogicalDisk::read(unsigned long long, int, void*)>:
c000ccd0:	57                   	push   edi
c000ccd1:	56                   	push   esi
c000ccd2:	53                   	push   ebx
c000ccd3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ccd7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ccdb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccdf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cce3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cce9:	77 41                	ja     c000cd2c <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000cceb:	99                   	cdq    
c000ccec:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ccf2:	01 c8                	add    eax,ecx
c000ccf4:	11 da                	adc    edx,ebx
c000ccf6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ccfc:	19 d7                	sbb    edi,edx
c000ccfe:	72 33                	jb     c000cd33 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000cd00:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cd06:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cd0c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cd10:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cd14:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cd1a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cd20:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cd24:	5b                   	pop    ebx
c000cd25:	5e                   	pop    esi
c000cd26:	5f                   	pop    edi
c000cd27:	e9 56 0a 00 00       	jmp    c000d782 <VCache::read(unsigned long long, int, void*)>
c000cd2c:	b8 05 00 00 00       	mov    eax,0x5
c000cd31:	eb 05                	jmp    c000cd38 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000cd33:	b8 07 00 00 00       	mov    eax,0x7
c000cd38:	5b                   	pop    ebx
c000cd39:	5e                   	pop    esi
c000cd3a:	5f                   	pop    edi
c000cd3b:	c3                   	ret    

c000cd3c <LogicalDisk::write(unsigned long long, int, void*)>:
c000cd3c:	57                   	push   edi
c000cd3d:	56                   	push   esi
c000cd3e:	53                   	push   ebx
c000cd3f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd43:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cd47:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cd4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cd4f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cd55:	77 41                	ja     c000cd98 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000cd57:	99                   	cdq    
c000cd58:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cd5e:	01 c8                	add    eax,ecx
c000cd60:	11 da                	adc    edx,ebx
c000cd62:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cd68:	19 d7                	sbb    edi,edx
c000cd6a:	72 33                	jb     c000cd9f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000cd6c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cd72:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cd78:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cd7c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cd80:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cd86:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cd8c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cd90:	5b                   	pop    ebx
c000cd91:	5e                   	pop    esi
c000cd92:	5f                   	pop    edi
c000cd93:	e9 d4 08 00 00       	jmp    c000d66c <VCache::write(unsigned long long, int, void*)>
c000cd98:	b8 05 00 00 00       	mov    eax,0x5
c000cd9d:	eb 05                	jmp    c000cda4 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000cd9f:	b8 07 00 00 00       	mov    eax,0x7
c000cda4:	5b                   	pop    ebx
c000cda5:	5e                   	pop    esi
c000cda6:	5f                   	pop    edi
c000cda7:	c3                   	ret    

c000cda8 <Mouse::Mouse(char const*)>:
c000cda8:	83 ec 0c             	sub    esp,0xc
c000cdab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdaf:	83 ec 08             	sub    esp,0x8
c000cdb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdb6:	50                   	push   eax
c000cdb7:	e8 d4 ed ff ff       	call   c000bb90 <Device::Device(char const*)>
c000cdbc:	83 c4 10             	add    esp,0x10
c000cdbf:	ba 40 e9 01 c0       	mov    edx,0xc001e940
c000cdc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdc8:	89 10                	mov    DWORD PTR [eax],edx
c000cdca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdce:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000cdd8:	90                   	nop
c000cdd9:	83 c4 0c             	add    esp,0xc
c000cddc:	c3                   	ret    
c000cddd:	90                   	nop
c000cdde:	66 90                	xchg   ax,ax

c000cde0 <Mouse::~Mouse()>:
c000cde0:	83 ec 0c             	sub    esp,0xc
c000cde3:	ba 40 e9 01 c0       	mov    edx,0xc001e940
c000cde8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdec:	89 10                	mov    DWORD PTR [eax],edx
c000cdee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdf2:	83 ec 0c             	sub    esp,0xc
c000cdf5:	50                   	push   eax
c000cdf6:	e8 ff ea ff ff       	call   c000b8fa <Device::~Device()>
c000cdfb:	83 c4 10             	add    esp,0x10
c000cdfe:	90                   	nop
c000cdff:	83 c4 0c             	add    esp,0xc
c000ce02:	c3                   	ret    
c000ce03:	90                   	nop

c000ce04 <Mouse::~Mouse()>:
c000ce04:	83 ec 0c             	sub    esp,0xc
c000ce07:	83 ec 0c             	sub    esp,0xc
c000ce0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce0e:	e8 cd ff ff ff       	call   c000cde0 <Mouse::~Mouse()>
c000ce13:	83 c4 10             	add    esp,0x10
c000ce16:	83 ec 08             	sub    esp,0x8
c000ce19:	68 58 01 00 00       	push   0x158
c000ce1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce22:	e8 9d d6 ff ff       	call   c000a4c4 <operator delete(void*, unsigned long)>
c000ce27:	83 c4 10             	add    esp,0x10
c000ce2a:	83 c4 0c             	add    esp,0xc
c000ce2d:	c3                   	ret    

c000ce2e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ce2e:	55                   	push   ebp
c000ce2f:	57                   	push   edi
c000ce30:	56                   	push   esi
c000ce31:	53                   	push   ebx
c000ce32:	81 ec 28 01 00 00    	sub    esp,0x128
c000ce38:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000ce3f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000ce46:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000ce4d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000ce54:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ce58:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ce5c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ce63:	e8 24 ee ff ff       	call   c000bc8c <Device::getName()>
c000ce68:	5a                   	pop    edx
c000ce69:	59                   	pop    ecx
c000ce6a:	50                   	push   eax
c000ce6b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ce6f:	55                   	push   ebp
c000ce70:	e8 8b 37 ff ff       	call   c0000600 <strcpy>
c000ce75:	5b                   	pop    ebx
c000ce76:	58                   	pop    eax
c000ce77:	68 64 e9 01 c0       	push   0xc001e964
c000ce7c:	55                   	push   ebp
c000ce7d:	e8 3e 39 ff ff       	call   c00007c0 <strcat>
c000ce82:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000ce89:	e8 93 a9 ff ff       	call   c0007821 <malloc>
c000ce8e:	83 c4 0c             	add    esp,0xc
c000ce91:	89 c3                	mov    ebx,eax
c000ce93:	57                   	push   edi
c000ce94:	56                   	push   esi
c000ce95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ce99:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ce9d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000cea4:	55                   	push   ebp
c000cea5:	50                   	push   eax
c000cea6:	e8 f7 fb ff ff       	call   c000caa2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000ceab:	83 c4 14             	add    esp,0x14
c000ceae:	53                   	push   ebx
c000ceaf:	e8 a4 fc ff ff       	call   c000cb58 <LogicalDisk::assignDriveLetter()>
c000ceb4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ceb7:	e8 52 fd ff ff       	call   c000cc0e <LogicalDisk::mount()>
c000cebc:	58                   	pop    eax
c000cebd:	5a                   	pop    edx
c000cebe:	53                   	push   ebx
c000cebf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cec6:	e8 2d eb ff ff       	call   c000b9f8 <Device::addChild(Device*)>
c000cecb:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ced1:	5b                   	pop    ebx
c000ced2:	5e                   	pop    esi
c000ced3:	5f                   	pop    edi
c000ced4:	5d                   	pop    ebp
c000ced5:	c3                   	ret    

c000ced6 <createPartitionsForDisk(PhysicalDisk*)>:
c000ced6:	55                   	push   ebp
c000ced7:	57                   	push   edi
c000ced8:	56                   	push   esi
c000ced9:	53                   	push   ebx
c000ceda:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000cee0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000cee7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ceed:	3d 00 02 00 00       	cmp    eax,0x200
c000cef2:	74 27                	je     c000cf1b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000cef4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000cefa:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000cf00:	83 ec 10             	sub    esp,0x10
c000cf03:	0f a4 f7 0a          	shld   edi,esi,0xa
c000cf07:	99                   	cdq    
c000cf08:	c1 e6 0a             	shl    esi,0xa
c000cf0b:	52                   	push   edx
c000cf0c:	89 fd                	mov    ebp,edi
c000cf0e:	50                   	push   eax
c000cf0f:	55                   	push   ebp
c000cf10:	56                   	push   esi
c000cf11:	e8 0a fa 00 00       	call   c001c920 <__udivdi3>
c000cf16:	e9 b1 00 00 00       	jmp    c000cfcc <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000cf1b:	83 ec 0c             	sub    esp,0xc
c000cf1e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cf20:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000cf24:	56                   	push   esi
c000cf25:	6a 01                	push   0x1
c000cf27:	6a 00                	push   0x0
c000cf29:	6a 00                	push   0x0
c000cf2b:	53                   	push   ebx
c000cf2c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000cf2f:	83 c4 20             	add    esp,0x20
c000cf32:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000cf3a:	75 0a                	jne    c000cf46 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000cf3c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000cf44:	74 2c                	je     c000cf72 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000cf46:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cf4c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cf52:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cf58:	83 ec 10             	sub    esp,0x10
c000cf5b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cf5f:	89 f7                	mov    edi,esi
c000cf61:	c1 e0 0a             	shl    eax,0xa
c000cf64:	c1 ff 1f             	sar    edi,0x1f
c000cf67:	57                   	push   edi
c000cf68:	56                   	push   esi
c000cf69:	52                   	push   edx
c000cf6a:	50                   	push   eax
c000cf6b:	e8 b0 f9 00 00       	call   c001c920 <__udivdi3>
c000cf70:	eb 5a                	jmp    c000cfcc <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000cf72:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000cf79:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000cf80:	83 e1 7f             	and    ecx,0x7f
c000cf83:	83 e0 7f             	and    eax,0x7f
c000cf86:	01 c1                	add    ecx,eax
c000cf88:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000cf8f:	83 e0 7f             	and    eax,0x7f
c000cf92:	01 c1                	add    ecx,eax
c000cf94:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000cf9b:	83 e0 7f             	and    eax,0x7f
c000cf9e:	00 c1                	add    cl,al
c000cfa0:	74 41                	je     c000cfe3 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000cfa2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cfa8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cfae:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cfb4:	83 ec 10             	sub    esp,0x10
c000cfb7:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cfbb:	89 f7                	mov    edi,esi
c000cfbd:	c1 e0 0a             	shl    eax,0xa
c000cfc0:	c1 ff 1f             	sar    edi,0x1f
c000cfc3:	57                   	push   edi
c000cfc4:	56                   	push   esi
c000cfc5:	52                   	push   edx
c000cfc6:	50                   	push   eax
c000cfc7:	e8 54 f9 00 00       	call   c001c920 <__udivdi3>
c000cfcc:	83 c4 14             	add    esp,0x14
c000cfcf:	52                   	push   edx
c000cfd0:	50                   	push   eax
c000cfd1:	6a 00                	push   0x0
c000cfd3:	6a 00                	push   0x0
c000cfd5:	53                   	push   ebx
c000cfd6:	e8 53 fe ff ff       	call   c000ce2e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000cfdb:	83 c4 20             	add    esp,0x20
c000cfde:	e9 79 01 00 00       	jmp    c000d15c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000cfe3:	89 f0                	mov    eax,esi
c000cfe5:	31 f6                	xor    esi,esi
c000cfe7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000cfee:	75 02                	jne    c000cff2 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000cff0:	89 f1                	mov    ecx,esi
c000cff2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000cff9:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000d000:	c1 e2 08             	shl    edx,0x8
c000d003:	c1 e7 10             	shl    edi,0x10
c000d006:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000d00e:	09 fa                	or     edx,edi
c000d010:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000d018:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000d01f:	83 c0 10             	add    eax,0x10
c000d022:	09 fa                	or     edx,edi
c000d024:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000d02b:	c1 e7 18             	shl    edi,0x18
c000d02e:	09 fa                	or     edx,edi
c000d030:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000d037:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000d03b:	c1 e7 10             	shl    edi,0x10
c000d03e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d045:	c1 e2 08             	shl    edx,0x8
c000d048:	09 fa                	or     edx,edi
c000d04a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000d051:	09 fa                	or     edx,edi
c000d053:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000d05a:	c1 e7 18             	shl    edi,0x18
c000d05d:	09 fa                	or     edx,edi
c000d05f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000d063:	46                   	inc    esi
c000d064:	83 fe 04             	cmp    esi,0x4
c000d067:	0f 85 7a ff ff ff    	jne    c000cfe7 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000d06d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d071:	83 f0 01             	xor    eax,0x1
c000d074:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d078:	75 57                	jne    c000d0d1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d07a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d07e:	83 f0 01             	xor    eax,0x1
c000d081:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d085:	75 4a                	jne    c000d0d1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d087:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d08b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d093:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d09b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d0a1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d0a7:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d0ad:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d0b1:	89 f7                	mov    edi,esi
c000d0b3:	c1 e0 0a             	shl    eax,0xa
c000d0b6:	c1 ff 1f             	sar    edi,0x1f
c000d0b9:	57                   	push   edi
c000d0ba:	56                   	push   esi
c000d0bb:	52                   	push   edx
c000d0bc:	50                   	push   eax
c000d0bd:	e8 5e f8 00 00       	call   c001c920 <__udivdi3>
c000d0c2:	83 c4 10             	add    esp,0x10
c000d0c5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0c9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d0cd:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d0d1:	84 c9                	test   cl,cl
c000d0d3:	74 53                	je     c000d128 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d0d5:	0f b6 c9             	movzx  ecx,cl
c000d0d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d0e0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d0e4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d0e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0f0:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d0f4:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d0f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d0fc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d100:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d104:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d108:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d10c:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d110:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d114:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d118:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d11c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d120:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d124:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d128:	31 ed                	xor    ebp,ebp
c000d12a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d12e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d132:	89 f8                	mov    eax,edi
c000d134:	09 f0                	or     eax,esi
c000d136:	74 1e                	je     c000d156 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d138:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d13c:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d140:	89 d1                	mov    ecx,edx
c000d142:	09 c1                	or     ecx,eax
c000d144:	74 10                	je     c000d156 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d146:	83 ec 0c             	sub    esp,0xc
c000d149:	57                   	push   edi
c000d14a:	56                   	push   esi
c000d14b:	52                   	push   edx
c000d14c:	50                   	push   eax
c000d14d:	53                   	push   ebx
c000d14e:	e8 db fc ff ff       	call   c000ce2e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d153:	83 c4 20             	add    esp,0x20
c000d156:	45                   	inc    ebp
c000d157:	83 fd 04             	cmp    ebp,0x4
c000d15a:	75 ce                	jne    c000d12a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d15c:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d162:	5b                   	pop    ebx
c000d163:	5e                   	pop    esi
c000d164:	5f                   	pop    edi
c000d165:	5d                   	pop    ebp
c000d166:	c3                   	ret    
c000d167:	90                   	nop

c000d168 <Serial::Serial(char const*)>:
c000d168:	83 ec 0c             	sub    esp,0xc
c000d16b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d16f:	83 ec 08             	sub    esp,0x8
c000d172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d176:	50                   	push   eax
c000d177:	e8 14 ea ff ff       	call   c000bb90 <Device::Device(char const*)>
c000d17c:	83 c4 10             	add    esp,0x10
c000d17f:	ba 78 e9 01 c0       	mov    edx,0xc001e978
c000d184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d188:	89 10                	mov    DWORD PTR [eax],edx
c000d18a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d18e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d198:	90                   	nop
c000d199:	83 c4 0c             	add    esp,0xc
c000d19c:	c3                   	ret    
c000d19d:	90                   	nop
c000d19e:	66 90                	xchg   ax,ax

c000d1a0 <Serial::~Serial()>:
c000d1a0:	83 ec 0c             	sub    esp,0xc
c000d1a3:	ba 78 e9 01 c0       	mov    edx,0xc001e978
c000d1a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1ac:	89 10                	mov    DWORD PTR [eax],edx
c000d1ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1b2:	83 ec 0c             	sub    esp,0xc
c000d1b5:	50                   	push   eax
c000d1b6:	e8 3f e7 ff ff       	call   c000b8fa <Device::~Device()>
c000d1bb:	83 c4 10             	add    esp,0x10
c000d1be:	90                   	nop
c000d1bf:	83 c4 0c             	add    esp,0xc
c000d1c2:	c3                   	ret    
c000d1c3:	90                   	nop

c000d1c4 <Serial::~Serial()>:
c000d1c4:	83 ec 0c             	sub    esp,0xc
c000d1c7:	83 ec 0c             	sub    esp,0xc
c000d1ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1ce:	e8 cd ff ff ff       	call   c000d1a0 <Serial::~Serial()>
c000d1d3:	83 c4 10             	add    esp,0x10
c000d1d6:	83 ec 08             	sub    esp,0x8
c000d1d9:	68 58 01 00 00       	push   0x158
c000d1de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1e2:	e8 dd d2 ff ff       	call   c000a4c4 <operator delete(void*, unsigned long)>
c000d1e7:	83 c4 10             	add    esp,0x10
c000d1ea:	83 c4 0c             	add    esp,0xc
c000d1ed:	c3                   	ret    
c000d1ee:	66 90                	xchg   ax,ax

c000d1f0 <Timer::Timer(char const*)>:
c000d1f0:	83 ec 0c             	sub    esp,0xc
c000d1f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1f7:	83 ec 08             	sub    esp,0x8
c000d1fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1fe:	50                   	push   eax
c000d1ff:	e8 8c e9 ff ff       	call   c000bb90 <Device::Device(char const*)>
c000d204:	83 c4 10             	add    esp,0x10
c000d207:	ba bc e9 01 c0       	mov    edx,0xc001e9bc
c000d20c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d210:	89 10                	mov    DWORD PTR [eax],edx
c000d212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d216:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d220:	90                   	nop
c000d221:	83 c4 0c             	add    esp,0xc
c000d224:	c3                   	ret    
c000d225:	90                   	nop
c000d226:	66 90                	xchg   ax,ax

c000d228 <Timer::~Timer()>:
c000d228:	83 ec 0c             	sub    esp,0xc
c000d22b:	ba bc e9 01 c0       	mov    edx,0xc001e9bc
c000d230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d234:	89 10                	mov    DWORD PTR [eax],edx
c000d236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d23a:	83 ec 0c             	sub    esp,0xc
c000d23d:	50                   	push   eax
c000d23e:	e8 b7 e6 ff ff       	call   c000b8fa <Device::~Device()>
c000d243:	83 c4 10             	add    esp,0x10
c000d246:	90                   	nop
c000d247:	83 c4 0c             	add    esp,0xc
c000d24a:	c3                   	ret    
c000d24b:	90                   	nop

c000d24c <Timer::~Timer()>:
c000d24c:	83 ec 0c             	sub    esp,0xc
c000d24f:	83 ec 0c             	sub    esp,0xc
c000d252:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d256:	e8 cd ff ff ff       	call   c000d228 <Timer::~Timer()>
c000d25b:	83 c4 10             	add    esp,0x10
c000d25e:	83 ec 08             	sub    esp,0x8
c000d261:	68 5c 01 00 00       	push   0x15c
c000d266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d26a:	e8 55 d2 ff ff       	call   c000a4c4 <operator delete(void*, unsigned long)>
c000d26f:	83 c4 10             	add    esp,0x10
c000d272:	83 c4 0c             	add    esp,0xc
c000d275:	c3                   	ret    

c000d276 <Timer::read()>:
c000d276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d27a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d280:	c3                   	ret    

c000d281 <setupTimer(int)>:
c000d281:	53                   	push   ebx
c000d282:	83 ec 14             	sub    esp,0x14
c000d285:	68 5c 01 00 00       	push   0x15c
c000d28a:	e8 92 a5 ff ff       	call   c0007821 <malloc>
c000d28f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d292:	89 c3                	mov    ebx,eax
c000d294:	e8 9f ef 00 00       	call   c001c238 <PIT::PIT()>
c000d299:	58                   	pop    eax
c000d29a:	5a                   	pop    edx
c000d29b:	53                   	push   ebx
c000d29c:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c000d2a2:	e8 51 e7 ff ff       	call   c000b9f8 <Device::addChild(Device*)>
c000d2a7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d2a9:	6a 00                	push   0x0
c000d2ab:	6a 00                	push   0x0
c000d2ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d2b1:	53                   	push   ebx
c000d2b2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d2b5:	89 d8                	mov    eax,ebx
c000d2b7:	83 c4 28             	add    esp,0x28
c000d2ba:	5b                   	pop    ebx
c000d2bb:	c3                   	ret    

c000d2bc <timerHandler(unsigned int)>:
c000d2bc:	56                   	push   esi
c000d2bd:	53                   	push   ebx
c000d2be:	51                   	push   ecx
c000d2bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2c3:	01 05 8c 54 02 c0    	add    DWORD PTR ds:0xc002548c,eax
c000d2c9:	80 3d bd 2e 02 c0 00 	cmp    BYTE PTR ds:0xc0022ebd,0x0
c000d2d0:	0f 84 4a 01 00 00    	je     c000d420 <timerHandler(unsigned int)+0x164>
c000d2d6:	fa                   	cli    
c000d2d7:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c000d2dd:	83 ec 0c             	sub    esp,0xc
c000d2e0:	ff 05 64 61 02 c0    	inc    DWORD PTR ds:0xc0026164
c000d2e6:	68 78 61 02 c0       	push   0xc0026178
c000d2eb:	e8 00 fc 00 00       	call   c001cef0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d2f0:	83 c4 10             	add    esp,0x10
c000d2f3:	84 c0                	test   al,al
c000d2f5:	0f 85 a1 00 00 00    	jne    c000d39c <timerHandler(unsigned int)+0xe0>
c000d2fb:	83 ec 0c             	sub    esp,0xc
c000d2fe:	68 78 61 02 c0       	push   0xc0026178
c000d303:	e8 04 fc 00 00       	call   c001cf0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d308:	83 c4 10             	add    esp,0x10
c000d30b:	89 c6                	mov    esi,eax
c000d30d:	8d 76 00             	lea    esi,[esi+0x0]
c000d310:	83 ec 0c             	sub    esp,0xc
c000d313:	68 78 61 02 c0       	push   0xc0026178
c000d318:	e8 ef fb 00 00       	call   c001cf0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d31d:	c7 04 24 78 61 02 c0 	mov    DWORD PTR [esp],0xc0026178
c000d324:	89 c3                	mov    ebx,eax
c000d326:	e8 e9 fb 00 00       	call   c001cf14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d32b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d32e:	83 c4 10             	add    esp,0x10
c000d331:	3b 05 8c 54 02 c0    	cmp    eax,DWORD PTR ds:0xc002548c
c000d337:	77 23                	ja     c000d35c <timerHandler(unsigned int)+0xa0>
c000d339:	83 ec 0c             	sub    esp,0xc
c000d33c:	53                   	push   ebx
c000d33d:	e8 62 69 00 00       	call   c0013ca4 <unblockTask(ThreadControlBlock*)>
c000d342:	83 c4 10             	add    esp,0x10
c000d345:	39 de                	cmp    esi,ebx
c000d347:	75 27                	jne    c000d370 <timerHandler(unsigned int)+0xb4>
c000d349:	83 ec 0c             	sub    esp,0xc
c000d34c:	68 78 61 02 c0       	push   0xc0026178
c000d351:	e8 b6 fb 00 00       	call   c001cf0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d356:	89 c6                	mov    esi,eax
c000d358:	eb 12                	jmp    c000d36c <timerHandler(unsigned int)+0xb0>
c000d35a:	66 90                	xchg   ax,ax
c000d35c:	52                   	push   edx
c000d35d:	52                   	push   edx
c000d35e:	53                   	push   ebx
c000d35f:	68 78 61 02 c0       	push   0xc0026178
c000d364:	e8 63 fc 00 00       	call   c001cfcc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d369:	8d 76 00             	lea    esi,[esi+0x0]
c000d36c:	83 c4 10             	add    esp,0x10
c000d36f:	90                   	nop
c000d370:	83 ec 0c             	sub    esp,0xc
c000d373:	68 78 61 02 c0       	push   0xc0026178
c000d378:	e8 73 fb 00 00       	call   c001cef0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d37d:	83 c4 10             	add    esp,0x10
c000d380:	84 c0                	test   al,al
c000d382:	75 18                	jne    c000d39c <timerHandler(unsigned int)+0xe0>
c000d384:	83 ec 0c             	sub    esp,0xc
c000d387:	68 78 61 02 c0       	push   0xc0026178
c000d38c:	e8 7b fb 00 00       	call   c001cf0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d391:	83 c4 10             	add    esp,0x10
c000d394:	39 f0                	cmp    eax,esi
c000d396:	0f 85 74 ff ff ff    	jne    c000d310 <timerHandler(unsigned int)+0x54>
c000d39c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d3a1:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d3a5:	74 41                	je     c000d3e8 <timerHandler(unsigned int)+0x12c>
c000d3a7:	80 3d bc 2e 02 c0 00 	cmp    BYTE PTR ds:0xc0022ebc,0x0
c000d3ae:	74 38                	je     c000d3e8 <timerHandler(unsigned int)+0x12c>
c000d3b0:	fa                   	cli    
c000d3b1:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c000d3b7:	a1 8c 54 02 c0       	mov    eax,ds:0xc002548c
c000d3bc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d3c2:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d3c5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d3cb:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d3ce:	72 08                	jb     c000d3d8 <timerHandler(unsigned int)+0x11c>
c000d3d0:	e8 0b 64 00 00       	call   c00137e0 <schedule()>
c000d3d5:	8d 76 00             	lea    esi,[esi+0x0]
c000d3d8:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000d3dd:	48                   	dec    eax
c000d3de:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000d3e3:	75 03                	jne    c000d3e8 <timerHandler(unsigned int)+0x12c>
c000d3e5:	fb                   	sti    
c000d3e6:	66 90                	xchg   ax,ax
c000d3e8:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c000d3ed:	48                   	dec    eax
c000d3ee:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c000d3f3:	75 1b                	jne    c000d410 <timerHandler(unsigned int)+0x154>
c000d3f5:	83 3d 60 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026160,0x0
c000d3fc:	74 12                	je     c000d410 <timerHandler(unsigned int)+0x154>
c000d3fe:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c000d408:	e8 d3 63 00 00       	call   c00137e0 <schedule()>
c000d40d:	8d 76 00             	lea    esi,[esi+0x0]
c000d410:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000d415:	48                   	dec    eax
c000d416:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000d41b:	75 03                	jne    c000d420 <timerHandler(unsigned int)+0x164>
c000d41d:	fb                   	sti    
c000d41e:	66 90                	xchg   ax,ax
c000d420:	58                   	pop    eax
c000d421:	5b                   	pop    ebx
c000d422:	5e                   	pop    esi
c000d423:	c3                   	ret    

c000d424 <VCache::VCache(PhysicalDisk*)>:
c000d424:	53                   	push   ebx
c000d425:	83 ec 18             	sub    esp,0x18
c000d428:	ba ec e9 01 c0       	mov    edx,0xc001e9ec
c000d42d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d431:	89 10                	mov    DWORD PTR [eax],edx
c000d433:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d437:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d43e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d442:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d449:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d44d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d454:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d45b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d45f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d466:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d46d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d471:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d478:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d47c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d480:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d484:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d48b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d492:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d496:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d49a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d49e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d4a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4a6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d4aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4ae:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d4b5:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d4bd:	83 ec 0c             	sub    esp,0xc
c000d4c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d4c4:	e8 58 a3 ff ff       	call   c0007821 <malloc>
c000d4c9:	83 c4 10             	add    esp,0x10
c000d4cc:	89 c3                	mov    ebx,eax
c000d4ce:	83 ec 0c             	sub    esp,0xc
c000d4d1:	53                   	push   ebx
c000d4d2:	e8 d5 60 00 00       	call   c00135ac <Mutex::Mutex()>
c000d4d7:	83 c4 10             	add    esp,0x10
c000d4da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4de:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d4e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4e5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d4e9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d4ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4f0:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d4f7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d4fb:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d501:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d505:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d508:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d50c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d512:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d518:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d51c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d51f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d522:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d526:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d52a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d52e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d534:	05 00 02 00 00       	add    eax,0x200
c000d539:	c1 e0 03             	shl    eax,0x3
c000d53c:	83 ec 0c             	sub    esp,0xc
c000d53f:	50                   	push   eax
c000d540:	e8 dc a2 ff ff       	call   c0007821 <malloc>
c000d545:	83 c4 10             	add    esp,0x10
c000d548:	89 c2                	mov    edx,eax
c000d54a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d54e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d551:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d555:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d55c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d560:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d564:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d568:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d56e:	89 d0                	mov    eax,edx
c000d570:	c1 e0 02             	shl    eax,0x2
c000d573:	01 d0                	add    eax,edx
c000d575:	c1 e0 04             	shl    eax,0x4
c000d578:	83 ec 0c             	sub    esp,0xc
c000d57b:	50                   	push   eax
c000d57c:	e8 a0 a2 ff ff       	call   c0007821 <malloc>
c000d581:	83 c4 10             	add    esp,0x10
c000d584:	89 c2                	mov    edx,eax
c000d586:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d58a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d58d:	90                   	nop
c000d58e:	83 c4 18             	add    esp,0x18
c000d591:	5b                   	pop    ebx
c000d592:	c3                   	ret    
c000d593:	90                   	nop

c000d594 <VCache::invalidateReadBuffer()>:
c000d594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d598:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d59e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d5a2:	c3                   	ret    
c000d5a3:	90                   	nop

c000d5a4 <VCache::writeWriteBuffer()>:
c000d5a4:	53                   	push   ebx
c000d5a5:	83 ec 08             	sub    esp,0x8
c000d5a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d5ac:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d5b0:	74 1e                	je     c000d5d0 <VCache::writeWriteBuffer()+0x2c>
c000d5b2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d5b5:	83 ec 0c             	sub    esp,0xc
c000d5b8:	8b 10                	mov    edx,DWORD PTR [eax]
c000d5ba:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d5bd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d5c0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d5c3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d5c6:	50                   	push   eax
c000d5c7:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d5ca:	83 c4 20             	add    esp,0x20
c000d5cd:	8d 76 00             	lea    esi,[esi+0x0]
c000d5d0:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d5d7:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d5de:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d5e2:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d5e9:	83 c4 08             	add    esp,0x8
c000d5ec:	5b                   	pop    ebx
c000d5ed:	c3                   	ret    
c000d5ee:	66 90                	xchg   ax,ax

c000d5f0 <VCache::~VCache()>:
c000d5f0:	83 ec 0c             	sub    esp,0xc
c000d5f3:	ba ec e9 01 c0       	mov    edx,0xc001e9ec
c000d5f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5fc:	89 10                	mov    DWORD PTR [eax],edx
c000d5fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d602:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d605:	84 c0                	test   al,al
c000d607:	74 0f                	je     c000d618 <VCache::~VCache()+0x28>
c000d609:	83 ec 0c             	sub    esp,0xc
c000d60c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d610:	e8 8f ff ff ff       	call   c000d5a4 <VCache::writeWriteBuffer()>
c000d615:	83 c4 10             	add    esp,0x10
c000d618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d61c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d61f:	83 ec 0c             	sub    esp,0xc
c000d622:	50                   	push   eax
c000d623:	e8 09 a2 ff ff       	call   c0007831 <free>
c000d628:	83 c4 10             	add    esp,0x10
c000d62b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d62f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d632:	83 ec 0c             	sub    esp,0xc
c000d635:	50                   	push   eax
c000d636:	e8 f6 a1 ff ff       	call   c0007831 <free>
c000d63b:	83 c4 10             	add    esp,0x10
c000d63e:	90                   	nop
c000d63f:	83 c4 0c             	add    esp,0xc
c000d642:	c3                   	ret    
c000d643:	90                   	nop

c000d644 <VCache::~VCache()>:
c000d644:	83 ec 0c             	sub    esp,0xc
c000d647:	83 ec 0c             	sub    esp,0xc
c000d64a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d64e:	e8 9d ff ff ff       	call   c000d5f0 <VCache::~VCache()>
c000d653:	83 c4 10             	add    esp,0x10
c000d656:	83 ec 08             	sub    esp,0x8
c000d659:	6a 44                	push   0x44
c000d65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d65f:	e8 60 ce ff ff       	call   c000a4c4 <operator delete(void*, unsigned long)>
c000d664:	83 c4 10             	add    esp,0x10
c000d667:	83 c4 0c             	add    esp,0xc
c000d66a:	c3                   	ret    
c000d66b:	90                   	nop

c000d66c <VCache::write(unsigned long long, int, void*)>:
c000d66c:	55                   	push   ebp
c000d66d:	57                   	push   edi
c000d66e:	56                   	push   esi
c000d66f:	53                   	push   ebx
c000d670:	83 ec 1c             	sub    esp,0x1c
c000d673:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d677:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d67b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d67f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d683:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d687:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d68b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d68f:	31 c0                	xor    eax,eax
c000d691:	8d 76 00             	lea    esi,[esi+0x0]
c000d694:	39 e8                	cmp    eax,ebp
c000d696:	7d 18                	jge    c000d6b0 <VCache::write(unsigned long long, int, void*)+0x44>
c000d698:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d69b:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d6a1:	0f af c8             	imul   ecx,eax
c000d6a4:	89 ca                	mov    edx,ecx
c000d6a6:	01 f2                	add    edx,esi
c000d6a8:	8b 3a                	mov    edi,DWORD PTR [edx]
c000d6aa:	40                   	inc    eax
c000d6ab:	eb e7                	jmp    c000d694 <VCache::write(unsigned long long, int, void*)+0x28>
c000d6ad:	8d 76 00             	lea    esi,[esi+0x0]
c000d6b0:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d6b4:	74 0a                	je     c000d6c0 <VCache::write(unsigned long long, int, void*)+0x54>
c000d6b6:	53                   	push   ebx
c000d6b7:	e8 d8 fe ff ff       	call   c000d594 <VCache::invalidateReadBuffer()>
c000d6bc:	58                   	pop    eax
c000d6bd:	8d 76 00             	lea    esi,[esi+0x0]
c000d6c0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d6c4:	74 5a                	je     c000d720 <VCache::write(unsigned long long, int, void*)+0xb4>
c000d6c6:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000d6c9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d6cd:	89 f8                	mov    eax,edi
c000d6cf:	99                   	cdq    
c000d6d0:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d6d3:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d6d6:	31 c1                	xor    ecx,eax
c000d6d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d6dc:	31 d0                	xor    eax,edx
c000d6de:	09 c1                	or     ecx,eax
c000d6e0:	75 32                	jne    c000d714 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d6e2:	83 fd 01             	cmp    ebp,0x1
c000d6e5:	75 2d                	jne    c000d714 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d6e7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d6ea:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d6f0:	0f af f9             	imul   edi,ecx
c000d6f3:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000d6f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d6f8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d6fb:	40                   	inc    eax
c000d6fc:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d6ff:	83 f8 50             	cmp    eax,0x50
c000d702:	75 74                	jne    c000d778 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d704:	83 ec 0c             	sub    esp,0xc
c000d707:	53                   	push   ebx
c000d708:	e8 97 fe ff ff       	call   c000d5a4 <VCache::writeWriteBuffer()>
c000d70d:	83 c4 10             	add    esp,0x10
c000d710:	eb 66                	jmp    c000d778 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d712:	66 90                	xchg   ax,ax
c000d714:	83 ec 0c             	sub    esp,0xc
c000d717:	53                   	push   ebx
c000d718:	e8 87 fe ff ff       	call   c000d5a4 <VCache::writeWriteBuffer()>
c000d71d:	83 c4 10             	add    esp,0x10
c000d720:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d723:	83 fd 4f             	cmp    ebp,0x4f
c000d726:	7f 24                	jg     c000d74c <VCache::write(unsigned long long, int, void*)+0xe0>
c000d728:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d72c:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000d72f:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d732:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d73a:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d73d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000d740:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d746:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d748:	eb 2e                	jmp    c000d778 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d74a:	66 90                	xchg   ax,ax
c000d74c:	8b 10                	mov    edx,DWORD PTR [eax]
c000d74e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d752:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d756:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d75a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d75e:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d762:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d766:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000d76a:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d76d:	83 c4 1c             	add    esp,0x1c
c000d770:	5b                   	pop    ebx
c000d771:	5e                   	pop    esi
c000d772:	5f                   	pop    edi
c000d773:	5d                   	pop    ebp
c000d774:	ff e0                	jmp    eax
c000d776:	66 90                	xchg   ax,ax
c000d778:	83 c4 1c             	add    esp,0x1c
c000d77b:	31 c0                	xor    eax,eax
c000d77d:	5b                   	pop    ebx
c000d77e:	5e                   	pop    esi
c000d77f:	5f                   	pop    edi
c000d780:	5d                   	pop    ebp
c000d781:	c3                   	ret    

c000d782 <VCache::read(unsigned long long, int, void*)>:
c000d782:	55                   	push   ebp
c000d783:	57                   	push   edi
c000d784:	56                   	push   esi
c000d785:	53                   	push   ebx
c000d786:	83 ec 1c             	sub    esp,0x1c
c000d789:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000d78d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d791:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d795:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000d799:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d79d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d7a1:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000d7a5:	74 0d                	je     c000d7b4 <VCache::read(unsigned long long, int, void*)+0x32>
c000d7a7:	83 ec 0c             	sub    esp,0xc
c000d7aa:	57                   	push   edi
c000d7ab:	e8 f4 fd ff ff       	call   c000d5a4 <VCache::writeWriteBuffer()>
c000d7b0:	83 c4 10             	add    esp,0x10
c000d7b3:	90                   	nop
c000d7b4:	83 fd 01             	cmp    ebp,0x1
c000d7b7:	0f 85 93 00 00 00    	jne    c000d850 <VCache::read(unsigned long long, int, void*)+0xce>
c000d7bd:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d7c0:	89 04 24             	mov    DWORD PTR [esp],eax
c000d7c3:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000d7ca:	0f 85 80 00 00 00    	jne    c000d850 <VCache::read(unsigned long long, int, void*)+0xce>
c000d7d0:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000d7d3:	89 e9                	mov    ecx,ebp
c000d7d5:	f7 d9                	neg    ecx
c000d7d7:	89 c8                	mov    eax,ecx
c000d7d9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000d7dd:	c1 f8 1f             	sar    eax,0x1f
c000d7e0:	21 d9                	and    ecx,ebx
c000d7e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7e6:	89 c8                	mov    eax,ecx
c000d7e8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d7ec:	21 f1                	and    ecx,esi
c000d7ee:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000d7f2:	89 ca                	mov    edx,ecx
c000d7f4:	74 2e                	je     c000d824 <VCache::read(unsigned long long, int, void*)+0xa2>
c000d7f6:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000d7f9:	75 29                	jne    c000d824 <VCache::read(unsigned long long, int, void*)+0xa2>
c000d7fb:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000d7fe:	75 24                	jne    c000d824 <VCache::read(unsigned long long, int, void*)+0xa2>
c000d800:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d803:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d809:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000d80c:	8d 70 ff             	lea    esi,[eax-0x1]
c000d80f:	21 f3                	and    ebx,esi
c000d811:	0f af d9             	imul   ebx,ecx
c000d814:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000d817:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000d81b:	89 de                	mov    esi,ebx
c000d81d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d81f:	31 c0                	xor    eax,eax
c000d821:	eb 61                	jmp    c000d884 <VCache::read(unsigned long long, int, void*)+0x102>
c000d823:	90                   	nop
c000d824:	83 ec 0c             	sub    esp,0xc
c000d827:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000d82b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d82f:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000d832:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000d835:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d837:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000d83a:	55                   	push   ebp
c000d83b:	52                   	push   edx
c000d83c:	50                   	push   eax
c000d83d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d841:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000d844:	83 c4 20             	add    esp,0x20
c000d847:	85 c0                	test   eax,eax
c000d849:	75 39                	jne    c000d884 <VCache::read(unsigned long long, int, void*)+0x102>
c000d84b:	eb b3                	jmp    c000d800 <VCache::read(unsigned long long, int, void*)+0x7e>
c000d84d:	8d 76 00             	lea    esi,[esi+0x0]
c000d850:	83 ec 0c             	sub    esp,0xc
c000d853:	57                   	push   edi
c000d854:	e8 3b fd ff ff       	call   c000d594 <VCache::invalidateReadBuffer()>
c000d859:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d85c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d860:	8b 10                	mov    edx,DWORD PTR [eax]
c000d862:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000d866:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000d86a:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000d86e:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000d872:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d876:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d879:	83 c4 2c             	add    esp,0x2c
c000d87c:	5b                   	pop    ebx
c000d87d:	5e                   	pop    esi
c000d87e:	5f                   	pop    edi
c000d87f:	5d                   	pop    ebp
c000d880:	ff e0                	jmp    eax
c000d882:	66 90                	xchg   ax,ax
c000d884:	83 c4 1c             	add    esp,0x1c
c000d887:	5b                   	pop    ebx
c000d888:	5e                   	pop    esi
c000d889:	5f                   	pop    edi
c000d88a:	5d                   	pop    ebp
c000d88b:	c3                   	ret    

c000d88c <Video::putrect(int, int, int, int, unsigned int)>:
c000d88c:	55                   	push   ebp
c000d88d:	57                   	push   edi
c000d88e:	56                   	push   esi
c000d88f:	53                   	push   ebx
c000d890:	83 ec 1c             	sub    esp,0x1c
c000d893:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d897:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d89b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d89f:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d8a3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d8a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d8ab:	01 df                	add    edi,ebx
c000d8ad:	39 fb                	cmp    ebx,edi
c000d8af:	7d 1f                	jge    c000d8d0 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d8b1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d8b5:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d8b9:	7d 12                	jge    c000d8cd <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d8bb:	8b 16                	mov    edx,DWORD PTR [esi]
c000d8bd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8c1:	53                   	push   ebx
c000d8c2:	55                   	push   ebp
c000d8c3:	45                   	inc    ebp
c000d8c4:	56                   	push   esi
c000d8c5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d8c8:	83 c4 10             	add    esp,0x10
c000d8cb:	eb e8                	jmp    c000d8b5 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d8cd:	43                   	inc    ebx
c000d8ce:	eb dd                	jmp    c000d8ad <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d8d0:	83 c4 1c             	add    esp,0x1c
c000d8d3:	5b                   	pop    ebx
c000d8d4:	5e                   	pop    esi
c000d8d5:	5f                   	pop    edi
c000d8d6:	5d                   	pop    ebp
c000d8d7:	c3                   	ret    

c000d8d8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d8d8:	55                   	push   ebp
c000d8d9:	57                   	push   edi
c000d8da:	31 ff                	xor    edi,edi
c000d8dc:	56                   	push   esi
c000d8dd:	53                   	push   ebx
c000d8de:	83 ec 1c             	sub    esp,0x1c
c000d8e1:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d8e5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d8e9:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d8f0:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d8f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d8f9:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d8fd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d901:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d904:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d908:	01 f9                	add    ecx,edi
c000d90a:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000d90e:	7d 2f                	jge    c000d93f <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000d910:	31 f6                	xor    esi,esi
c000d912:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d916:	01 f2                	add    edx,esi
c000d918:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d91c:	7d 1a                	jge    c000d938 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000d91e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d921:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000d924:	46                   	inc    esi
c000d925:	51                   	push   ecx
c000d926:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d92a:	52                   	push   edx
c000d92b:	55                   	push   ebp
c000d92c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d92f:	83 c4 10             	add    esp,0x10
c000d932:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d936:	eb da                	jmp    c000d912 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000d938:	47                   	inc    edi
c000d939:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000d93d:	eb c5                	jmp    c000d904 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000d93f:	83 c4 1c             	add    esp,0x1c
c000d942:	5b                   	pop    ebx
c000d943:	5e                   	pop    esi
c000d944:	5f                   	pop    edi
c000d945:	5d                   	pop    ebp
c000d946:	c3                   	ret    
c000d947:	90                   	nop

c000d948 <Video::blit(unsigned int*, int, int, int, int)>:
c000d948:	55                   	push   ebp
c000d949:	57                   	push   edi
c000d94a:	56                   	push   esi
c000d94b:	53                   	push   ebx
c000d94c:	83 ec 1c             	sub    esp,0x1c
c000d94f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d953:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d957:	85 c0                	test   eax,eax
c000d959:	79 02                	jns    c000d95d <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000d95b:	31 c0                	xor    eax,eax
c000d95d:	c1 e0 02             	shl    eax,0x2
c000d960:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000d964:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d968:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d96c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000d970:	39 d8                	cmp    eax,ebx
c000d972:	7e 49                	jle    c000d9bd <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d974:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d97a:	7c 41                	jl     c000d9bd <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d97c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d980:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d984:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d988:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000d98c:	39 f9                	cmp    ecx,edi
c000d98e:	7e 22                	jle    c000d9b2 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000d990:	83 c5 04             	add    ebp,0x4
c000d993:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d999:	7c 14                	jl     c000d9af <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000d99b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d99d:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000d9a0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d9a4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d9a8:	56                   	push   esi
c000d9a9:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000d9ac:	83 c4 10             	add    esp,0x10
c000d9af:	47                   	inc    edi
c000d9b0:	eb d2                	jmp    c000d984 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000d9b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d9b6:	43                   	inc    ebx
c000d9b7:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d9bb:	eb ab                	jmp    c000d968 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000d9bd:	83 c4 1c             	add    esp,0x1c
c000d9c0:	5b                   	pop    ebx
c000d9c1:	5e                   	pop    esi
c000d9c2:	5f                   	pop    edi
c000d9c3:	5d                   	pop    ebp
c000d9c4:	c3                   	ret    
c000d9c5:	90                   	nop

c000d9c6 <Video::clearScreen(unsigned int)>:
c000d9c6:	57                   	push   edi
c000d9c7:	56                   	push   esi
c000d9c8:	53                   	push   ebx
c000d9c9:	31 db                	xor    ebx,ebx
c000d9cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d9cf:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d9d5:	7e 1f                	jle    c000d9f6 <Video::clearScreen(unsigned int)+0x30>
c000d9d7:	31 ff                	xor    edi,edi
c000d9d9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d9df:	7e 12                	jle    c000d9f3 <Video::clearScreen(unsigned int)+0x2d>
c000d9e1:	8b 06                	mov    eax,DWORD PTR [esi]
c000d9e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9e7:	53                   	push   ebx
c000d9e8:	57                   	push   edi
c000d9e9:	47                   	inc    edi
c000d9ea:	56                   	push   esi
c000d9eb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d9ee:	83 c4 10             	add    esp,0x10
c000d9f1:	eb e6                	jmp    c000d9d9 <Video::clearScreen(unsigned int)+0x13>
c000d9f3:	43                   	inc    ebx
c000d9f4:	eb d9                	jmp    c000d9cf <Video::clearScreen(unsigned int)+0x9>
c000d9f6:	5b                   	pop    ebx
c000d9f7:	5e                   	pop    esi
c000d9f8:	5f                   	pop    edi
c000d9f9:	c3                   	ret    

c000d9fa <Video::putpixel(int, int, unsigned int)>:
c000d9fa:	c7 44 24 04 f4 e9 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e9f4
c000da02:	e9 bc 28 00 00       	jmp    c00102c3 <KePanic(char const*)>
c000da07:	90                   	nop

c000da08 <Video::Video(char const*)>:
c000da08:	83 ec 0c             	sub    esp,0xc
c000da0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da0f:	83 ec 08             	sub    esp,0x8
c000da12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da16:	50                   	push   eax
c000da17:	e8 74 e1 ff ff       	call   c000bb90 <Device::Device(char const*)>
c000da1c:	83 c4 10             	add    esp,0x10
c000da1f:	ba 64 ea 01 c0       	mov    edx,0xc001ea64
c000da24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da28:	89 10                	mov    DWORD PTR [eax],edx
c000da2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da2e:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000da38:	90                   	nop
c000da39:	83 c4 0c             	add    esp,0xc
c000da3c:	c3                   	ret    
c000da3d:	90                   	nop

c000da3e <Video::~Video()>:
c000da3e:	83 ec 0c             	sub    esp,0xc
c000da41:	ba 64 ea 01 c0       	mov    edx,0xc001ea64
c000da46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da4a:	89 10                	mov    DWORD PTR [eax],edx
c000da4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da50:	83 ec 0c             	sub    esp,0xc
c000da53:	50                   	push   eax
c000da54:	e8 a1 de ff ff       	call   c000b8fa <Device::~Device()>
c000da59:	83 c4 10             	add    esp,0x10
c000da5c:	90                   	nop
c000da5d:	83 c4 0c             	add    esp,0xc
c000da60:	c3                   	ret    
c000da61:	90                   	nop

c000da62 <Video::~Video()>:
c000da62:	83 ec 0c             	sub    esp,0xc
c000da65:	83 ec 0c             	sub    esp,0xc
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	e8 cd ff ff ff       	call   c000da3e <Video::~Video()>
c000da71:	83 c4 10             	add    esp,0x10
c000da74:	83 ec 08             	sub    esp,0x8
c000da77:	68 64 01 00 00       	push   0x164
c000da7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da80:	e8 3f ca ff ff       	call   c000a4c4 <operator delete(void*, unsigned long)>
c000da85:	83 c4 10             	add    esp,0x10
c000da88:	83 c4 0c             	add    esp,0xc
c000da8b:	c3                   	ret    

c000da8c <Video::isMonochrome()>:
c000da8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da90:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000da96:	c3                   	ret    
c000da97:	90                   	nop

c000da98 <Video::getWidth()>:
c000da98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da9c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000daa2:	c3                   	ret    
c000daa3:	90                   	nop

c000daa4 <Video::getHeight()>:
c000daa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000daa8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000daae:	c3                   	ret    
c000daaf:	90                   	nop

c000dab0 <Video::drawCursor(int, int, unsigned char*, int)>:
c000dab0:	55                   	push   ebp
c000dab1:	57                   	push   edi
c000dab2:	56                   	push   esi
c000dab3:	53                   	push   ebx
c000dab4:	83 ec 2c             	sub    esp,0x2c
c000dab7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dabb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000dabf:	83 f8 01             	cmp    eax,0x1
c000dac2:	19 c9                	sbb    ecx,ecx
c000dac4:	31 db                	xor    ebx,ebx
c000dac6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000daca:	89 cd                	mov    ebp,ecx
c000dacc:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000dad4:	f7 d5                	not    ebp
c000dad6:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000dadc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dae0:	01 d8                	add    eax,ebx
c000dae2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dae6:	56                   	push   esi
c000dae7:	e8 b8 ff ff ff       	call   c000daa4 <Video::getHeight()>
c000daec:	59                   	pop    ecx
c000daed:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000daf1:	7e 70                	jle    c000db63 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000daf3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000daf7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000dafb:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000dafe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000db02:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000db06:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000db0d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db11:	89 f8                	mov    eax,edi
c000db13:	83 c0 20             	add    eax,0x20
c000db16:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000db1a:	56                   	push   esi
c000db1b:	e8 78 ff ff ff       	call   c000da98 <Video::getWidth()>
c000db20:	5a                   	pop    edx
c000db21:	39 c7                	cmp    edi,eax
c000db23:	7d 34                	jge    c000db59 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000db25:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000db2a:	74 05                	je     c000db31 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000db2c:	8b 06                	mov    eax,DWORD PTR [esi]
c000db2e:	55                   	push   ebp
c000db2f:	eb 0d                	jmp    c000db3e <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000db31:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000db36:	74 12                	je     c000db4a <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000db38:	8b 06                	mov    eax,DWORD PTR [esi]
c000db3a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db3e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000db42:	57                   	push   edi
c000db43:	56                   	push   esi
c000db44:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000db47:	83 c4 10             	add    esp,0x10
c000db4a:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000db4e:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000db52:	47                   	inc    edi
c000db53:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000db57:	75 c1                	jne    c000db1a <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000db59:	43                   	inc    ebx
c000db5a:	83 fb 20             	cmp    ebx,0x20
c000db5d:	0f 85 79 ff ff ff    	jne    c000dadc <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000db63:	83 c4 2c             	add    esp,0x2c
c000db66:	5b                   	pop    ebx
c000db67:	5e                   	pop    esi
c000db68:	5f                   	pop    edi
c000db69:	5d                   	pop    ebp
c000db6a:	c3                   	ret    
c000db6b:	90                   	nop

c000db6c <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000db6c:	55                   	push   ebp
c000db6d:	57                   	push   edi
c000db6e:	56                   	push   esi
c000db6f:	53                   	push   ebx
c000db70:	83 ec 28             	sub    esp,0x28
c000db73:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000db77:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000db7b:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000db7f:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000db83:	c1 e6 08             	shl    esi,0x8
c000db86:	01 c6                	add    esi,eax
c000db88:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000db8c:	c1 e0 08             	shl    eax,0x8
c000db8f:	01 d0                	add    eax,edx
c000db91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000db95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db99:	0f af c6             	imul   eax,esi
c000db9c:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000dba3:	50                   	push   eax
c000dba4:	e8 78 9c ff ff       	call   c0007821 <malloc>
c000dba9:	83 c4 10             	add    esp,0x10
c000dbac:	89 c7                	mov    edi,eax
c000dbae:	85 c0                	test   eax,eax
c000dbb0:	75 10                	jne    c000dbc2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000dbb2:	83 ec 0c             	sub    esp,0xc
c000dbb5:	68 15 ea 01 c0       	push   0xc001ea15
c000dbba:	e8 04 27 00 00       	call   c00102c3 <KePanic(char const*)>
c000dbbf:	83 c4 10             	add    esp,0x10
c000dbc2:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000dbc5:	ba 12 00 00 00       	mov    edx,0x12
c000dbca:	84 c0                	test   al,al
c000dbcc:	74 11                	je     c000dbdf <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000dbce:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000dbd2:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000dbd6:	c1 fa 03             	sar    edx,0x3
c000dbd9:	0f af d1             	imul   edx,ecx
c000dbdc:	83 c2 12             	add    edx,0x12
c000dbdf:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000dbe3:	74 04                	je     c000dbe9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000dbe5:	85 f6                	test   esi,esi
c000dbe7:	75 12                	jne    c000dbfb <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000dbe9:	83 ec 0c             	sub    esp,0xc
c000dbec:	68 25 ea 01 c0       	push   0xc001ea25
c000dbf1:	e8 c4 c9 ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c000dbf6:	e9 b8 00 00 00       	jmp    c000dcb3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000dbfb:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000dbff:	80 f9 02             	cmp    cl,0x2
c000dc02:	0f 85 96 00 00 00    	jne    c000dc9e <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000dc08:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000dc0d:	75 0e                	jne    c000dc1d <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dc0f:	84 c0                	test   al,al
c000dc11:	75 0a                	jne    c000dc1d <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dc13:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000dc16:	83 e8 18             	sub    eax,0x18
c000dc19:	a8 f7                	test   al,0xf7
c000dc1b:	74 0a                	je     c000dc27 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000dc1d:	83 ec 0c             	sub    esp,0xc
c000dc20:	68 3a ea 01 c0       	push   0xc001ea3a
c000dc25:	eb 7f                	jmp    c000dca6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000dc27:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dc2f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000dc37:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000dc3b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dc43:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000dc47:	75 0c                	jne    c000dc55 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000dc49:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000dc4e:	c1 e0 18             	shl    eax,0x18
c000dc51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc55:	45                   	inc    ebp
c000dc56:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000dc5b:	c1 e1 10             	shl    ecx,0x10
c000dc5e:	89 c8                	mov    eax,ecx
c000dc60:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000dc65:	c1 e1 08             	shl    ecx,0x8
c000dc68:	09 c1                	or     ecx,eax
c000dc6a:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000dc6e:	09 c1                	or     ecx,eax
c000dc70:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000dc74:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000dc78:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000dc7c:	c1 f8 03             	sar    eax,0x3
c000dc7f:	01 c2                	add    edx,eax
c000dc81:	89 e8                	mov    eax,ebp
c000dc83:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000dc87:	39 c6                	cmp    esi,eax
c000dc89:	7f b0                	jg     c000dc3b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000dc8b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000dc8f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dc93:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000dc96:	7e 22                	jle    c000dcba <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000dc98:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000dc9c:	eb 99                	jmp    c000dc37 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000dc9e:	50                   	push   eax
c000dc9f:	50                   	push   eax
c000dca0:	51                   	push   ecx
c000dca1:	68 48 ea 01 c0       	push   0xc001ea48
c000dca6:	e8 0f c9 ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c000dcab:	89 3c 24             	mov    DWORD PTR [esp],edi
c000dcae:	e8 7e 9b ff ff       	call   c0007831 <free>
c000dcb3:	83 c4 10             	add    esp,0x10
c000dcb6:	31 ff                	xor    edi,edi
c000dcb8:	eb 0f                	jmp    c000dcc9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000dcba:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dcbe:	89 30                	mov    DWORD PTR [eax],esi
c000dcc0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dcc4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dcc7:	89 30                	mov    DWORD PTR [eax],esi
c000dcc9:	83 c4 1c             	add    esp,0x1c
c000dccc:	89 f8                	mov    eax,edi
c000dcce:	5b                   	pop    ebx
c000dccf:	5e                   	pop    esi
c000dcd0:	5f                   	pop    edi
c000dcd1:	5d                   	pop    ebp
c000dcd2:	c3                   	ret    
c000dcd3:	90                   	nop

c000dcd4 <Video::putTGA(int, int, unsigned char*, int)>:
c000dcd4:	55                   	push   ebp
c000dcd5:	57                   	push   edi
c000dcd6:	56                   	push   esi
c000dcd7:	53                   	push   ebx
c000dcd8:	83 ec 28             	sub    esp,0x28
c000dcdb:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000dcdf:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dce3:	50                   	push   eax
c000dce4:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dce8:	50                   	push   eax
c000dce9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dced:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dcf1:	56                   	push   esi
c000dcf2:	e8 75 fe ff ff       	call   c000db6c <Video::tgaParse(unsigned char*, int, int*, int*)>
c000dcf7:	83 c4 20             	add    esp,0x20
c000dcfa:	85 c0                	test   eax,eax
c000dcfc:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000dd00:	74 35                	je     c000dd37 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dd02:	89 c7                	mov    edi,eax
c000dd04:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dd08:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dd0c:	39 d8                	cmp    eax,ebx
c000dd0e:	7e 27                	jle    c000dd37 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dd10:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000dd14:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dd18:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000dd1c:	39 e8                	cmp    eax,ebp
c000dd1e:	7e 14                	jle    c000dd34 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000dd20:	8b 06                	mov    eax,DWORD PTR [esi]
c000dd22:	83 c7 04             	add    edi,0x4
c000dd25:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000dd28:	53                   	push   ebx
c000dd29:	55                   	push   ebp
c000dd2a:	45                   	inc    ebp
c000dd2b:	56                   	push   esi
c000dd2c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dd2f:	83 c4 10             	add    esp,0x10
c000dd32:	eb e0                	jmp    c000dd14 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000dd34:	43                   	inc    ebx
c000dd35:	eb cd                	jmp    c000dd04 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000dd37:	83 c4 1c             	add    esp,0x1c
c000dd3a:	5b                   	pop    ebx
c000dd3b:	5e                   	pop    esi
c000dd3c:	5f                   	pop    edi
c000dd3d:	5d                   	pop    ebp
c000dd3e:	c3                   	ret    
c000dd3f:	90                   	nop

c000dd40 <ACPI::close(int, int, void*)>:
c000dd40:	83 ec 1c             	sub    esp,0x1c
c000dd43:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000dd4b:	74 0b                	je     c000dd58 <ACPI::close(int, int, void*)+0x18>
c000dd4d:	b8 00 00 00 00       	mov    eax,0x0
c000dd52:	e9 9d 00 00 00       	jmp    c000ddf4 <ACPI::close(int, int, void*)+0xb4>
c000dd57:	90                   	nop
c000dd58:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000dd5d:	75 29                	jne    c000dd88 <ACPI::close(int, int, void*)+0x48>
c000dd5f:	a1 a8 54 02 c0       	mov    eax,ds:0xc00254a8
c000dd64:	85 c0                	test   eax,eax
c000dd66:	74 08                	je     c000dd70 <ACPI::close(int, int, void*)+0x30>
c000dd68:	a1 a8 54 02 c0       	mov    eax,ds:0xc00254a8
c000dd6d:	ff d0                	call   eax
c000dd6f:	90                   	nop
c000dd70:	83 ec 0c             	sub    esp,0xc
c000dd73:	68 a4 ea 01 c0       	push   0xc001eaa4
c000dd78:	e8 46 25 00 00       	call   c00102c3 <KePanic(char const*)>
c000dd7d:	83 c4 10             	add    esp,0x10
c000dd80:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dd85:	eb 6d                	jmp    c000ddf4 <ACPI::close(int, int, void*)+0xb4>
c000dd87:	90                   	nop
c000dd88:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000dd8d:	75 5d                	jne    c000ddec <ACPI::close(int, int, void*)+0xac>
c000dd8f:	a1 a4 54 02 c0       	mov    eax,ds:0xc00254a4
c000dd94:	85 c0                	test   eax,eax
c000dd96:	74 08                	je     c000dda0 <ACPI::close(int, int, void*)+0x60>
c000dd98:	a1 a4 54 02 c0       	mov    eax,ds:0xc00254a4
c000dd9d:	ff d0                	call   eax
c000dd9f:	90                   	nop
c000dda0:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000dda5:	8d 76 00             	lea    esi,[esi+0x0]
c000dda8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ddac:	25 ff 00 00 00       	and    eax,0xff
c000ddb1:	83 e0 02             	and    eax,0x2
c000ddb4:	74 1e                	je     c000ddd4 <ACPI::close(int, int, void*)+0x94>
c000ddb6:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000ddbd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ddc1:	89 c2                	mov    edx,eax
c000ddc3:	ec                   	in     al,dx
c000ddc4:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ddc8:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000ddcc:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ddd0:	eb d6                	jmp    c000dda8 <ACPI::close(int, int, void*)+0x68>
c000ddd2:	66 90                	xchg   ax,ax
c000ddd4:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000dddb:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000dde0:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000dde4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dde8:	ee                   	out    dx,al
c000dde9:	8d 76 00             	lea    esi,[esi+0x0]
c000ddec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ddf1:	8d 76 00             	lea    esi,[esi+0x0]
c000ddf4:	83 c4 1c             	add    esp,0x1c
c000ddf7:	c3                   	ret    

c000ddf8 <findRSDP()>:
c000ddf8:	83 ec 1c             	sub    esp,0x1c
c000ddfb:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000de00:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000de06:	83 e0 04             	and    eax,0x4
c000de09:	84 c0                	test   al,al
c000de0b:	75 07                	jne    c000de14 <findRSDP()+0x1c>
c000de0d:	b8 00 00 00 00       	mov    eax,0x0
c000de12:	eb 70                	jmp    c000de84 <findRSDP()+0x8c>
c000de14:	a1 e8 2e 02 c0       	mov    eax,ds:0xc0022ee8
c000de19:	3d ff 07 00 00       	cmp    eax,0x7ff
c000de1e:	7f 1c                	jg     c000de3c <findRSDP()+0x44>
c000de20:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000de25:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000de2b:	83 e2 fb             	and    edx,0xfffffffb
c000de2e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000de34:	b8 00 00 00 00       	mov    eax,0x0
c000de39:	eb 49                	jmp    c000de84 <findRSDP()+0x8c>
c000de3b:	90                   	nop
c000de3c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000de44:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000de4c:	77 2e                	ja     c000de7c <findRSDP()+0x84>
c000de4e:	83 ec 04             	sub    esp,0x4
c000de51:	6a 08                	push   0x8
c000de53:	68 3f eb 01 c0       	push   0xc001eb3f
c000de58:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000de5c:	e8 2f 25 ff ff       	call   c0000390 <memcmp>
c000de61:	83 c4 10             	add    esp,0x10
c000de64:	85 c0                	test   eax,eax
c000de66:	0f 94 c0             	sete   al
c000de69:	84 c0                	test   al,al
c000de6b:	74 07                	je     c000de74 <findRSDP()+0x7c>
c000de6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de71:	eb 11                	jmp    c000de84 <findRSDP()+0x8c>
c000de73:	90                   	nop
c000de74:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000de79:	eb c9                	jmp    c000de44 <findRSDP()+0x4c>
c000de7b:	90                   	nop
c000de7c:	b8 00 00 00 00       	mov    eax,0x0
c000de81:	8d 76 00             	lea    esi,[esi+0x0]
c000de84:	83 c4 1c             	add    esp,0x1c
c000de87:	c3                   	ret    

c000de88 <loadACPITables(unsigned char*)>:
c000de88:	57                   	push   edi
c000de89:	56                   	push   esi
c000de8a:	53                   	push   ebx
c000de8b:	83 ec 60             	sub    esp,0x60
c000de8e:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000de93:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000de99:	83 e0 04             	and    eax,0x4
c000de9c:	84 c0                	test   al,al
c000de9e:	0f 84 3c 02 00 00    	je     c000e0e0 <loadACPITables(unsigned char*)+0x258>
c000dea4:	a0 c0 56 02 c0       	mov    al,ds:0xc00256c0
c000dea9:	84 c0                	test   al,al
c000deab:	74 77                	je     c000df24 <loadACPITables(unsigned char*)+0x9c>
c000dead:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000deb1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000deb5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000deb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000debc:	83 e8 24             	sub    eax,0x24
c000debf:	c1 e8 03             	shr    eax,0x3
c000dec2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000dec6:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000dece:	66 90                	xchg   ax,ax
c000ded0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ded4:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000ded8:	0f 8d b6 00 00 00    	jge    c000df94 <loadACPITables(unsigned char*)+0x10c>
c000dede:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dee2:	83 c0 24             	add    eax,0x24
c000dee5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dee9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000deed:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000def1:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000def5:	c1 e0 03             	shl    eax,0x3
c000def8:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000defc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000df00:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000df03:	8b 00                	mov    eax,DWORD PTR [eax]
c000df05:	89 c1                	mov    ecx,eax
c000df07:	a1 ac 54 02 c0       	mov    eax,ds:0xc00254ac
c000df0c:	8d 50 01             	lea    edx,[eax+0x1]
c000df0f:	89 15 ac 54 02 c0    	mov    DWORD PTR ds:0xc00254ac,edx
c000df15:	89 ca                	mov    edx,ecx
c000df17:	89 14 c5 c4 54 02 c0 	mov    DWORD PTR [eax*8-0x3ffdab3c],edx
c000df1e:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000df22:	eb ac                	jmp    c000ded0 <loadACPITables(unsigned char*)+0x48>
c000df24:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000df28:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000df2c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000df30:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000df33:	83 e8 24             	sub    eax,0x24
c000df36:	c1 e8 02             	shr    eax,0x2
c000df39:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000df3d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000df45:	8d 76 00             	lea    esi,[esi+0x0]
c000df48:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000df4c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000df50:	7d 42                	jge    c000df94 <loadACPITables(unsigned char*)+0x10c>
c000df52:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000df56:	83 c0 24             	add    eax,0x24
c000df59:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000df5d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000df61:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000df65:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000df69:	c1 e0 02             	shl    eax,0x2
c000df6c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000df70:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000df74:	8b 08                	mov    ecx,DWORD PTR [eax]
c000df76:	a1 ac 54 02 c0       	mov    eax,ds:0xc00254ac
c000df7b:	8d 50 01             	lea    edx,[eax+0x1]
c000df7e:	89 15 ac 54 02 c0    	mov    DWORD PTR ds:0xc00254ac,edx
c000df84:	89 ca                	mov    edx,ecx
c000df86:	89 14 c5 c4 54 02 c0 	mov    DWORD PTR [eax*8-0x3ffdab3c],edx
c000df8d:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000df91:	eb b5                	jmp    c000df48 <loadACPITables(unsigned char*)+0xc0>
c000df93:	90                   	nop
c000df94:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000df9c:	a1 ac 54 02 c0       	mov    eax,ds:0xc00254ac
c000dfa1:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000dfa5:	0f 8d 39 01 00 00    	jge    c000e0e4 <loadACPITables(unsigned char*)+0x25c>
c000dfab:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000dfaf:	8b 04 c5 c4 54 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdab3c]
c000dfb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dfba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dfbe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000dfc2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dfc6:	25 ff 0f 00 00       	and    eax,0xfff
c000dfcb:	89 c6                	mov    esi,eax
c000dfcd:	8b 1d b0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb0
c000dfd3:	83 ec 0c             	sub    esp,0xc
c000dfd6:	6a 01                	push   0x1
c000dfd8:	e8 20 b3 ff ff       	call   c00092fd <Virt::allocateKernelVirtualPages(int)>
c000dfdd:	83 c4 10             	add    esp,0x10
c000dfe0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000dfe4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000dfea:	83 ec 0c             	sub    esp,0xc
c000dfed:	6a 01                	push   0x1
c000dfef:	6a 01                	push   0x1
c000dff1:	50                   	push   eax
c000dff2:	52                   	push   edx
c000dff3:	53                   	push   ebx
c000dff4:	e8 c1 bc ff ff       	call   c0009cba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000dff9:	83 c4 20             	add    esp,0x20
c000dffc:	09 f0                	or     eax,esi
c000dffe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e002:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e006:	c1 e0 03             	shl    eax,0x3
c000e009:	05 c0 54 02 c0       	add    eax,0xc00254c0
c000e00e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e012:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e016:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e01a:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e022:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e026:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e02a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e02e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e032:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e036:	89 c6                	mov    esi,eax
c000e038:	89 d7                	mov    edi,edx
c000e03a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e03c:	89 c8                	mov    eax,ecx
c000e03e:	89 fa                	mov    edx,edi
c000e040:	89 f3                	mov    ebx,esi
c000e042:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e046:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e04a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e04e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e052:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e055:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e059:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e05d:	05 00 10 00 00       	add    eax,0x1000
c000e062:	c1 e8 0c             	shr    eax,0xc
c000e065:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e069:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e06d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e071:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e075:	25 ff 0f 00 00       	and    eax,0xfff
c000e07a:	89 c6                	mov    esi,eax
c000e07c:	8b 1d b0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb0
c000e082:	83 ec 0c             	sub    esp,0xc
c000e085:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e089:	e8 6f b2 ff ff       	call   c00092fd <Virt::allocateKernelVirtualPages(int)>
c000e08e:	83 c4 10             	add    esp,0x10
c000e091:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e095:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e09b:	83 ec 0c             	sub    esp,0xc
c000e09e:	6a 01                	push   0x1
c000e0a0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e0a4:	50                   	push   eax
c000e0a5:	52                   	push   edx
c000e0a6:	53                   	push   ebx
c000e0a7:	e8 0e bc ff ff       	call   c0009cba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e0ac:	83 c4 20             	add    esp,0x20
c000e0af:	09 f0                	or     eax,esi
c000e0b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e0b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0b9:	83 ec 0c             	sub    esp,0xc
c000e0bc:	50                   	push   eax
c000e0bd:	e8 2f b5 ff ff       	call   c00095f1 <Virt::freeKernelVirtualPages(unsigned long)>
c000e0c2:	83 c4 10             	add    esp,0x10
c000e0c5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e0c9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e0cd:	89 14 c5 c4 54 02 c0 	mov    DWORD PTR [eax*8-0x3ffdab3c],edx
c000e0d4:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000e0d8:	e9 bf fe ff ff       	jmp    c000df9c <loadACPITables(unsigned char*)+0x114>
c000e0dd:	8d 76 00             	lea    esi,[esi+0x0]
c000e0e0:	90                   	nop
c000e0e1:	8d 76 00             	lea    esi,[esi+0x0]
c000e0e4:	83 c4 60             	add    esp,0x60
c000e0e7:	5b                   	pop    ebx
c000e0e8:	5e                   	pop    esi
c000e0e9:	5f                   	pop    edi
c000e0ea:	c3                   	ret    
c000e0eb:	90                   	nop

c000e0ec <findRSDT(unsigned char*)>:
c000e0ec:	57                   	push   edi
c000e0ed:	56                   	push   esi
c000e0ee:	53                   	push   ebx
c000e0ef:	83 ec 50             	sub    esp,0x50
c000e0f2:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e0f7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e0fd:	83 e0 04             	and    eax,0x4
c000e100:	84 c0                	test   al,al
c000e102:	75 0c                	jne    c000e110 <findRSDT(unsigned char*)+0x24>
c000e104:	b8 00 00 00 00       	mov    eax,0x0
c000e109:	e9 26 01 00 00       	jmp    c000e234 <findRSDT(unsigned char*)+0x148>
c000e10e:	66 90                	xchg   ax,ax
c000e110:	89 e0                	mov    eax,esp
c000e112:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e116:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e11a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e11e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e126:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e12a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e12e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e132:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e136:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e13a:	89 c6                	mov    esi,eax
c000e13c:	89 d7                	mov    edi,edx
c000e13e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e140:	89 c8                	mov    eax,ecx
c000e142:	89 fa                	mov    edx,edi
c000e144:	89 f3                	mov    ebx,esi
c000e146:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e14a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e14e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e152:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e156:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e15a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e162:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e166:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e16a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e16e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e172:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e176:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e17a:	25 ff 0f 00 00       	and    eax,0xfff
c000e17f:	89 c6                	mov    esi,eax
c000e181:	8b 1d b0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb0
c000e187:	83 ec 0c             	sub    esp,0xc
c000e18a:	6a 02                	push   0x2
c000e18c:	e8 6c b1 ff ff       	call   c00092fd <Virt::allocateKernelVirtualPages(int)>
c000e191:	83 c4 10             	add    esp,0x10
c000e194:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e198:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e19e:	83 ec 0c             	sub    esp,0xc
c000e1a1:	6a 01                	push   0x1
c000e1a3:	6a 02                	push   0x2
c000e1a5:	50                   	push   eax
c000e1a6:	52                   	push   edx
c000e1a7:	53                   	push   ebx
c000e1a8:	e8 0d bb ff ff       	call   c0009cba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e1ad:	83 c4 20             	add    esp,0x20
c000e1b0:	09 f0                	or     eax,esi
c000e1b2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e1b6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e1ba:	25 ff 0f 00 00       	and    eax,0xfff
c000e1bf:	89 c6                	mov    esi,eax
c000e1c1:	8b 1d b0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb0
c000e1c7:	83 ec 0c             	sub    esp,0xc
c000e1ca:	6a 02                	push   0x2
c000e1cc:	e8 2c b1 ff ff       	call   c00092fd <Virt::allocateKernelVirtualPages(int)>
c000e1d1:	83 c4 10             	add    esp,0x10
c000e1d4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e1d8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e1de:	83 ec 0c             	sub    esp,0xc
c000e1e1:	6a 01                	push   0x1
c000e1e3:	6a 02                	push   0x2
c000e1e5:	50                   	push   eax
c000e1e6:	52                   	push   edx
c000e1e7:	53                   	push   ebx
c000e1e8:	e8 cd ba ff ff       	call   c0009cba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e1ed:	83 c4 20             	add    esp,0x20
c000e1f0:	09 f0                	or     eax,esi
c000e1f2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e1f6:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e1fb:	75 13                	jne    c000e210 <findRSDT(unsigned char*)+0x124>
c000e1fd:	c6 05 c0 56 02 c0 00 	mov    BYTE PTR ds:0xc00256c0,0x0
c000e204:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e208:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e20c:	eb 22                	jmp    c000e230 <findRSDT(unsigned char*)+0x144>
c000e20e:	66 90                	xchg   ax,ax
c000e210:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e215:	75 11                	jne    c000e228 <findRSDT(unsigned char*)+0x13c>
c000e217:	c6 05 c0 56 02 c0 01 	mov    BYTE PTR ds:0xc00256c0,0x1
c000e21e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e222:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e226:	eb 08                	jmp    c000e230 <findRSDT(unsigned char*)+0x144>
c000e228:	b8 00 00 00 00       	mov    eax,0x0
c000e22d:	eb 05                	jmp    c000e234 <findRSDT(unsigned char*)+0x148>
c000e22f:	90                   	nop
c000e230:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e234:	83 c4 50             	add    esp,0x50
c000e237:	5b                   	pop    ebx
c000e238:	5e                   	pop    esi
c000e239:	5f                   	pop    edi
c000e23a:	c3                   	ret    
c000e23b:	90                   	nop

c000e23c <findDataTable(unsigned char*, char*)>:
c000e23c:	83 ec 1c             	sub    esp,0x1c
c000e23f:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e244:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e24a:	83 e0 04             	and    eax,0x4
c000e24d:	84 c0                	test   al,al
c000e24f:	75 07                	jne    c000e258 <findDataTable(unsigned char*, char*)+0x1c>
c000e251:	b8 00 00 00 00       	mov    eax,0x0
c000e256:	eb 58                	jmp    c000e2b0 <findDataTable(unsigned char*, char*)+0x74>
c000e258:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e260:	a1 ac 54 02 c0       	mov    eax,ds:0xc00254ac
c000e265:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e269:	7d 3d                	jge    c000e2a8 <findDataTable(unsigned char*, char*)+0x6c>
c000e26b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e26f:	c1 e0 03             	shl    eax,0x3
c000e272:	05 c0 54 02 c0       	add    eax,0xc00254c0
c000e277:	83 ec 04             	sub    esp,0x4
c000e27a:	6a 04                	push   0x4
c000e27c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e280:	50                   	push   eax
c000e281:	e8 0a 21 ff ff       	call   c0000390 <memcmp>
c000e286:	83 c4 10             	add    esp,0x10
c000e289:	85 c0                	test   eax,eax
c000e28b:	0f 94 c0             	sete   al
c000e28e:	84 c0                	test   al,al
c000e290:	74 0e                	je     c000e2a0 <findDataTable(unsigned char*, char*)+0x64>
c000e292:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e296:	8b 04 c5 c4 54 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdab3c]
c000e29d:	eb 11                	jmp    c000e2b0 <findDataTable(unsigned char*, char*)+0x74>
c000e29f:	90                   	nop
c000e2a0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e2a4:	eb ba                	jmp    c000e260 <findDataTable(unsigned char*, char*)+0x24>
c000e2a6:	66 90                	xchg   ax,ax
c000e2a8:	b8 00 00 00 00       	mov    eax,0x0
c000e2ad:	8d 76 00             	lea    esi,[esi+0x0]
c000e2b0:	83 c4 1c             	add    esp,0x1c
c000e2b3:	c3                   	ret    

c000e2b4 <scanMADT()>:
c000e2b4:	53                   	push   ebx
c000e2b5:	83 ec 38             	sub    esp,0x38
c000e2b8:	a1 d0 2e 02 c0       	mov    eax,ds:0xc0022ed0
c000e2bd:	25 00 04 00 00       	and    eax,0x400
c000e2c2:	74 14                	je     c000e2d8 <scanMADT()+0x24>
c000e2c4:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e2c9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e2cf:	83 e2 fb             	and    edx,0xfffffffb
c000e2d2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e2d8:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e2dd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e2e3:	83 e0 04             	and    eax,0x4
c000e2e6:	84 c0                	test   al,al
c000e2e8:	0f 84 8a 04 00 00    	je     c000e778 <scanMADT()+0x4c4>
c000e2ee:	e8 05 fb ff ff       	call   c000ddf8 <findRSDP()>
c000e2f3:	a3 cc 56 02 c0       	mov    ds:0xc00256cc,eax
c000e2f8:	a1 cc 56 02 c0       	mov    eax,ds:0xc00256cc
c000e2fd:	85 c0                	test   eax,eax
c000e2ff:	75 1b                	jne    c000e31c <scanMADT()+0x68>
c000e301:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e306:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e30c:	83 e2 fb             	and    edx,0xfffffffb
c000e30f:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e315:	e9 66 04 00 00       	jmp    c000e780 <scanMADT()+0x4cc>
c000e31a:	66 90                	xchg   ax,ax
c000e31c:	a1 cc 56 02 c0       	mov    eax,ds:0xc00256cc
c000e321:	83 ec 0c             	sub    esp,0xc
c000e324:	50                   	push   eax
c000e325:	e8 c2 fd ff ff       	call   c000e0ec <findRSDT(unsigned char*)>
c000e32a:	83 c4 10             	add    esp,0x10
c000e32d:	a3 c8 56 02 c0       	mov    ds:0xc00256c8,eax
c000e332:	a1 c8 56 02 c0       	mov    eax,ds:0xc00256c8
c000e337:	85 c0                	test   eax,eax
c000e339:	75 19                	jne    c000e354 <scanMADT()+0xa0>
c000e33b:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e340:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e346:	83 e2 fb             	and    edx,0xfffffffb
c000e349:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e34f:	e9 2c 04 00 00       	jmp    c000e780 <scanMADT()+0x4cc>
c000e354:	a1 c8 56 02 c0       	mov    eax,ds:0xc00256c8
c000e359:	83 ec 0c             	sub    esp,0xc
c000e35c:	50                   	push   eax
c000e35d:	e8 26 fb ff ff       	call   c000de88 <loadACPITables(unsigned char*)>
c000e362:	83 c4 10             	add    esp,0x10
c000e365:	a1 c8 56 02 c0       	mov    eax,ds:0xc00256c8
c000e36a:	83 ec 08             	sub    esp,0x8
c000e36d:	68 48 eb 01 c0       	push   0xc001eb48
c000e372:	50                   	push   eax
c000e373:	e8 c4 fe ff ff       	call   c000e23c <findDataTable(unsigned char*, char*)>
c000e378:	83 c4 10             	add    esp,0x10
c000e37b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e37f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e384:	75 1a                	jne    c000e3a0 <scanMADT()+0xec>
c000e386:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e38b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e391:	83 e2 fe             	and    edx,0xfffffffe
c000e394:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e39a:	e9 e1 03 00 00       	jmp    c000e780 <scanMADT()+0x4cc>
c000e39f:	90                   	nop
c000e3a0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e3a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e3af:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e3b3:	0f 87 c7 03 00 00    	ja     c000e780 <scanMADT()+0x4cc>
c000e3b9:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e3c1:	0f 87 b9 03 00 00    	ja     c000e780 <scanMADT()+0x4cc>
c000e3c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3cb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e3cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3d3:	8d 50 01             	lea    edx,[eax+0x1]
c000e3d6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e3da:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e3de:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e3e2:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e3e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3ea:	8d 50 01             	lea    edx,[eax+0x1]
c000e3ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e3f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e3f5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e3f9:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e3fd:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e402:	0f 86 74 03 00 00    	jbe    c000e77c <scanMADT()+0x4c8>
c000e408:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e40d:	75 5d                	jne    c000e46c <scanMADT()+0x1b8>
c000e40f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e413:	8d 50 01             	lea    edx,[eax+0x1]
c000e416:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e41a:	8a 15 c0 58 02 c0    	mov    dl,BYTE PTR ds:0xc00258c0
c000e420:	81 e2 ff 00 00 00    	and    edx,0xff
c000e426:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e42a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e42e:	88 82 00 59 02 c0    	mov    BYTE PTR [edx-0x3ffda700],al
c000e434:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e438:	8d 42 01             	lea    eax,[edx+0x1]
c000e43b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e43f:	a0 c0 58 02 c0       	mov    al,ds:0xc00258c0
c000e444:	8d 48 01             	lea    ecx,[eax+0x1]
c000e447:	88 0d c0 58 02 c0    	mov    BYTE PTR ds:0xc00258c0,cl
c000e44d:	25 ff 00 00 00       	and    eax,0xff
c000e452:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e456:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e45a:	88 90 e0 58 02 c0    	mov    BYTE PTR [eax-0x3ffda720],dl
c000e460:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e465:	e9 f6 02 00 00       	jmp    c000e760 <scanMADT()+0x4ac>
c000e46a:	66 90                	xchg   ax,ax
c000e46c:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e471:	0f 85 29 01 00 00    	jne    c000e5a0 <scanMADT()+0x2ec>
c000e477:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e47b:	8d 50 01             	lea    edx,[eax+0x1]
c000e47e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e482:	8a 15 80 57 02 c0    	mov    dl,BYTE PTR ds:0xc0025780
c000e488:	81 e2 ff 00 00 00    	and    edx,0xff
c000e48e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e492:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e496:	88 82 a0 57 02 c0    	mov    BYTE PTR [edx-0x3ffda860],al
c000e49c:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e4a0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4a4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4a8:	01 d0                	add    eax,edx
c000e4aa:	83 c0 2c             	add    eax,0x2c
c000e4ad:	8a 00                	mov    al,BYTE PTR [eax]
c000e4af:	31 d2                	xor    edx,edx
c000e4b1:	88 c2                	mov    dl,al
c000e4b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4b7:	8d 48 01             	lea    ecx,[eax+0x1]
c000e4ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4be:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e4c2:	25 ff 00 00 00       	and    eax,0xff
c000e4c7:	c1 e0 08             	shl    eax,0x8
c000e4ca:	89 d1                	mov    ecx,edx
c000e4cc:	09 c1                	or     ecx,eax
c000e4ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4d2:	8d 50 02             	lea    edx,[eax+0x2]
c000e4d5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4d9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e4dd:	25 ff 00 00 00       	and    eax,0xff
c000e4e2:	c1 e0 10             	shl    eax,0x10
c000e4e5:	09 c1                	or     ecx,eax
c000e4e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4eb:	8d 50 03             	lea    edx,[eax+0x3]
c000e4ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4f2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e4f6:	25 ff 00 00 00       	and    eax,0xff
c000e4fb:	c1 e0 18             	shl    eax,0x18
c000e4fe:	09 c1                	or     ecx,eax
c000e500:	89 ca                	mov    edx,ecx
c000e502:	a0 80 57 02 c0       	mov    al,ds:0xc0025780
c000e507:	25 ff 00 00 00       	and    eax,0xff
c000e50c:	89 14 85 c0 57 02 c0 	mov    DWORD PTR [eax*4-0x3ffda840],edx
c000e513:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e518:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e51c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e520:	01 d0                	add    eax,edx
c000e522:	83 c0 2c             	add    eax,0x2c
c000e525:	8a 00                	mov    al,BYTE PTR [eax]
c000e527:	31 d2                	xor    edx,edx
c000e529:	88 c2                	mov    dl,al
c000e52b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e52f:	8d 48 01             	lea    ecx,[eax+0x1]
c000e532:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e536:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e53a:	25 ff 00 00 00       	and    eax,0xff
c000e53f:	c1 e0 08             	shl    eax,0x8
c000e542:	89 d1                	mov    ecx,edx
c000e544:	09 c1                	or     ecx,eax
c000e546:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e54a:	8d 50 02             	lea    edx,[eax+0x2]
c000e54d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e551:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e555:	25 ff 00 00 00       	and    eax,0xff
c000e55a:	c1 e0 10             	shl    eax,0x10
c000e55d:	09 c1                	or     ecx,eax
c000e55f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e563:	8d 50 03             	lea    edx,[eax+0x3]
c000e566:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e56a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e56e:	25 ff 00 00 00       	and    eax,0xff
c000e573:	c1 e0 18             	shl    eax,0x18
c000e576:	09 c1                	or     ecx,eax
c000e578:	89 ca                	mov    edx,ecx
c000e57a:	a0 80 57 02 c0       	mov    al,ds:0xc0025780
c000e57f:	25 ff 00 00 00       	and    eax,0xff
c000e584:	89 14 85 40 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda7c0],edx
c000e58b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e590:	a0 80 57 02 c0       	mov    al,ds:0xc0025780
c000e595:	40                   	inc    eax
c000e596:	a2 80 57 02 c0       	mov    ds:0xc0025780,al
c000e59b:	e9 c0 01 00 00       	jmp    c000e760 <scanMADT()+0x4ac>
c000e5a0:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e5a5:	0f 85 fd 00 00 00    	jne    c000e6a8 <scanMADT()+0x3f4>
c000e5ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5af:	8d 50 01             	lea    edx,[eax+0x1]
c000e5b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e5b6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5ba:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e5be:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e5c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5c6:	8d 50 01             	lea    edx,[eax+0x1]
c000e5c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e5cd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5d1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e5d5:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e5d9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5e1:	01 d0                	add    eax,edx
c000e5e3:	83 c0 2c             	add    eax,0x2c
c000e5e6:	8a 00                	mov    al,BYTE PTR [eax]
c000e5e8:	31 d2                	xor    edx,edx
c000e5ea:	88 c2                	mov    dl,al
c000e5ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5f0:	8d 48 01             	lea    ecx,[eax+0x1]
c000e5f3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5f7:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e5fb:	25 ff 00 00 00       	and    eax,0xff
c000e600:	c1 e0 08             	shl    eax,0x8
c000e603:	89 d1                	mov    ecx,edx
c000e605:	09 c1                	or     ecx,eax
c000e607:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e60b:	8d 50 02             	lea    edx,[eax+0x2]
c000e60e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e612:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e616:	25 ff 00 00 00       	and    eax,0xff
c000e61b:	c1 e0 10             	shl    eax,0x10
c000e61e:	09 c1                	or     ecx,eax
c000e620:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e624:	8d 50 03             	lea    edx,[eax+0x3]
c000e627:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e62b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e62f:	25 ff 00 00 00       	and    eax,0xff
c000e634:	c1 e0 18             	shl    eax,0x18
c000e637:	09 c8                	or     eax,ecx
c000e639:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e63d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e642:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e646:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e64a:	01 d0                	add    eax,edx
c000e64c:	83 c0 2c             	add    eax,0x2c
c000e64f:	8a 00                	mov    al,BYTE PTR [eax]
c000e651:	25 ff 00 00 00       	and    eax,0xff
c000e656:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e65a:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e65d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e661:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e665:	81 e2 ff 00 00 00    	and    edx,0xff
c000e66b:	c1 e2 08             	shl    edx,0x8
c000e66e:	09 d0                	or     eax,edx
c000e670:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e675:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e67a:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e67e:	25 ff 00 00 00       	and    eax,0xff
c000e683:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e687:	88 90 a0 ff 01 c0    	mov    BYTE PTR [eax-0x3ffe0060],dl
c000e68d:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e691:	31 d2                	xor    edx,edx
c000e693:	88 c2                	mov    dl,al
c000e695:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e69a:	66 89 84 12 60 57 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffda8a0],ax
c000e6a2:	e9 b9 00 00 00       	jmp    c000e760 <scanMADT()+0x4ac>
c000e6a7:	90                   	nop
c000e6a8:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e6ad:	0f 85 a1 00 00 00    	jne    c000e754 <scanMADT()+0x4a0>
c000e6b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e6ba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e6be:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6c2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e6c6:	25 ff 00 00 00       	and    eax,0xff
c000e6cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e6cf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6d7:	01 d0                	add    eax,edx
c000e6d9:	83 c0 2c             	add    eax,0x2c
c000e6dc:	8a 00                	mov    al,BYTE PTR [eax]
c000e6de:	31 d2                	xor    edx,edx
c000e6e0:	88 c2                	mov    dl,al
c000e6e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6e6:	8d 48 01             	lea    ecx,[eax+0x1]
c000e6e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e6ed:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e6f1:	25 ff 00 00 00       	and    eax,0xff
c000e6f6:	c1 e0 08             	shl    eax,0x8
c000e6f9:	09 d0                	or     eax,edx
c000e6fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e6ff:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e704:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e708:	8d 50 01             	lea    edx,[eax+0x1]
c000e70b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e70f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e713:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e717:	25 ff 00 00 00       	and    eax,0xff
c000e71c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e724:	c1 e0 08             	shl    eax,0x8
c000e727:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e72b:	89 c1                	mov    ecx,eax
c000e72d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e731:	c1 e0 18             	shl    eax,0x18
c000e734:	89 c3                	mov    ebx,eax
c000e736:	a1 d0 56 02 c0       	mov    eax,ds:0xc00256d0
c000e73b:	8d 50 01             	lea    edx,[eax+0x1]
c000e73e:	89 15 d0 56 02 c0    	mov    DWORD PTR ds:0xc00256d0,edx
c000e744:	09 d9                	or     ecx,ebx
c000e746:	89 ca                	mov    edx,ecx
c000e748:	89 14 85 e0 56 02 c0 	mov    DWORD PTR [eax*4-0x3ffda920],edx
c000e74f:	eb 0f                	jmp    c000e760 <scanMADT()+0x4ac>
c000e751:	8d 76 00             	lea    esi,[esi+0x0]
c000e754:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e759:	75 05                	jne    c000e760 <scanMADT()+0x4ac>
c000e75b:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e760:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e764:	31 d2                	xor    edx,edx
c000e766:	88 c2                	mov    dl,al
c000e768:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e76c:	01 d0                	add    eax,edx
c000e76e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e772:	e9 31 fc ff ff       	jmp    c000e3a8 <scanMADT()+0xf4>
c000e777:	90                   	nop
c000e778:	90                   	nop
c000e779:	eb 05                	jmp    c000e780 <scanMADT()+0x4cc>
c000e77b:	90                   	nop
c000e77c:	90                   	nop
c000e77d:	8d 76 00             	lea    esi,[esi+0x0]
c000e780:	83 c4 38             	add    esp,0x38
c000e783:	5b                   	pop    ebx
c000e784:	c3                   	ret    
c000e785:	90                   	nop
c000e786:	66 90                	xchg   ax,ax

c000e788 <ACPI::ACPI()>:
c000e788:	83 ec 0c             	sub    esp,0xc
c000e78b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e78f:	83 ec 08             	sub    esp,0x8
c000e792:	68 4d eb 01 c0       	push   0xc001eb4d
c000e797:	50                   	push   eax
c000e798:	e8 f3 d3 ff ff       	call   c000bb90 <Device::Device(char const*)>
c000e79d:	83 c4 10             	add    esp,0x10
c000e7a0:	ba 84 ec 01 c0       	mov    edx,0xc001ec84
c000e7a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a9:	89 10                	mov    DWORD PTR [eax],edx
c000e7ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7af:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e7b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ba:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e7c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c8:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e7d2:	e8 dd fa ff ff       	call   c000e2b4 <scanMADT()>
c000e7d7:	90                   	nop
c000e7d8:	83 c4 0c             	add    esp,0xc
c000e7db:	c3                   	ret    

c000e7dc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e7dc:	83 ec 2c             	sub    esp,0x2c
c000e7df:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e7e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e7e7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e7eb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e7ef:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e7f4:	88 d0                	mov    al,dl
c000e7f6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e7fa:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e7ff:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e807:	90                   	nop
c000e808:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e80c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e812:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e816:	0f 8d 9c 00 00 00    	jge    c000e8b8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e81c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e820:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e824:	83 c2 2a             	add    edx,0x2a
c000e827:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e82b:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e830:	75 7a                	jne    c000e8ac <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e832:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e836:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e83a:	83 c2 2a             	add    edx,0x2a
c000e83d:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e841:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e845:	75 65                	jne    c000e8ac <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e847:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e84c:	74 3a                	je     c000e888 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e84e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e852:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e856:	83 c2 2a             	add    edx,0x2a
c000e859:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e85d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e861:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e864:	39 c2                	cmp    edx,eax
c000e866:	74 10                	je     c000e878 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e868:	83 ec 0c             	sub    esp,0xc
c000e86b:	68 c8 ea 01 c0       	push   0xc001eac8
c000e870:	e8 4e 1a 00 00       	call   c00102c3 <KePanic(char const*)>
c000e875:	83 c4 10             	add    esp,0x10
c000e878:	83 ec 0c             	sub    esp,0xc
c000e87b:	68 52 eb 01 c0       	push   0xc001eb52
c000e880:	e8 3e 1a 00 00       	call   c00102c3 <KePanic(char const*)>
c000e885:	83 c4 10             	add    esp,0x10
c000e888:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e88c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e890:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e894:	83 c2 2a             	add    edx,0x2a
c000e897:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e89b:	8b 02                	mov    eax,DWORD PTR [edx]
c000e89d:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e8a0:	89 01                	mov    DWORD PTR [ecx],eax
c000e8a2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e8a5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8aa:	66 90                	xchg   ax,ax
c000e8ac:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e8b0:	e9 53 ff ff ff       	jmp    c000e808 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e8b5:	8d 76 00             	lea    esi,[esi+0x0]
c000e8b8:	90                   	nop
c000e8b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e8bd:	83 c4 2c             	add    esp,0x2c
c000e8c0:	c2 04 00             	ret    0x4
c000e8c3:	90                   	nop

c000e8c4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e8c4:	83 ec 1c             	sub    esp,0x1c
c000e8c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e8cb:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e8cf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e8d3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e8d8:	88 c8                	mov    al,cl
c000e8da:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e8de:	88 d0                	mov    al,dl
c000e8e0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e8e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8e8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e8ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8f2:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e8f5:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000e8f9:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000e8fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e901:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e907:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e90b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000e90e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e912:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000e917:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e91b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e921:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000e925:	8d 48 01             	lea    ecx,[eax+0x1]
c000e928:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e92c:	83 c2 2a             	add    edx,0x2a
c000e92f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000e933:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e937:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e93d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e941:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e944:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e948:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000e94c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e950:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e956:	8d 50 01             	lea    edx,[eax+0x1]
c000e959:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e95d:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000e963:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e967:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e96d:	3d 00 02 00 00       	cmp    eax,0x200
c000e972:	75 10                	jne    c000e984 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000e974:	83 ec 0c             	sub    esp,0xc
c000e977:	68 61 eb 01 c0       	push   0xc001eb61
c000e97c:	e8 42 19 00 00       	call   c00102c3 <KePanic(char const*)>
c000e981:	83 c4 10             	add    esp,0x10
c000e984:	90                   	nop
c000e985:	83 c4 1c             	add    esp,0x1c
c000e988:	c3                   	ret    
c000e989:	90                   	nop
c000e98a:	66 90                	xchg   ax,ax

c000e98c <ACPI::setScreenBrightnessLevel(void*, int)>:
c000e98c:	b8 00 00 00 00       	mov    eax,0x0
c000e991:	c3                   	ret    
c000e992:	66 90                	xchg   ax,ax

c000e994 <ACPI::detectPCI()>:
c000e994:	53                   	push   ebx
c000e995:	83 ec 28             	sub    esp,0x28
c000e998:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e99d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000e9a2:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e9a7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e9ad:	83 e0 04             	and    eax,0x4
c000e9b0:	84 c0                	test   al,al
c000e9b2:	74 2c                	je     c000e9e0 <ACPI::detectPCI()+0x4c>
c000e9b4:	a1 c8 56 02 c0       	mov    eax,ds:0xc00256c8
c000e9b9:	83 ec 08             	sub    esp,0x8
c000e9bc:	68 7e eb 01 c0       	push   0xc001eb7e
c000e9c1:	50                   	push   eax
c000e9c2:	e8 75 f8 ff ff       	call   c000e23c <findDataTable(unsigned char*, char*)>
c000e9c7:	83 c4 10             	add    esp,0x10
c000e9ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e9ce:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000e9d3:	74 0b                	je     c000e9e0 <ACPI::detectPCI()+0x4c>
c000e9d5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e9da:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e9df:	90                   	nop
c000e9e0:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000e9e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9ec:	8a 00                	mov    al,BYTE PTR [eax]
c000e9ee:	3c 01                	cmp    al,0x1
c000e9f0:	75 0e                	jne    c000ea00 <ACPI::detectPCI()+0x6c>
c000e9f2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e9f7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e9fc:	eb 2a                	jmp    c000ea28 <ACPI::detectPCI()+0x94>
c000e9fe:	66 90                	xchg   ax,ax
c000ea00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea04:	8a 00                	mov    al,BYTE PTR [eax]
c000ea06:	3c 02                	cmp    al,0x2
c000ea08:	75 1e                	jne    c000ea28 <ACPI::detectPCI()+0x94>
c000ea0a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ea0f:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ea14:	74 12                	je     c000ea28 <ACPI::detectPCI()+0x94>
c000ea16:	83 ec 0c             	sub    esp,0xc
c000ea19:	68 f8 ea 01 c0       	push   0xc001eaf8
c000ea1e:	e8 a0 18 00 00       	call   c00102c3 <KePanic(char const*)>
c000ea23:	83 c4 10             	add    esp,0x10
c000ea26:	66 90                	xchg   ax,ax
c000ea28:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000ea2c:	83 f0 01             	xor    eax,0x1
c000ea2f:	84 c0                	test   al,al
c000ea31:	74 41                	je     c000ea74 <ACPI::detectPCI()+0xe0>
c000ea33:	e8 f8 16 ff ff       	call   c0000130 <manualPCIProbe>
c000ea38:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ea3c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ea41:	75 0d                	jne    c000ea50 <ACPI::detectPCI()+0xbc>
c000ea43:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ea48:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ea4d:	eb 25                	jmp    c000ea74 <ACPI::detectPCI()+0xe0>
c000ea4f:	90                   	nop
c000ea50:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000ea55:	75 1d                	jne    c000ea74 <ACPI::detectPCI()+0xe0>
c000ea57:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ea5c:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ea61:	74 11                	je     c000ea74 <ACPI::detectPCI()+0xe0>
c000ea63:	83 ec 0c             	sub    esp,0xc
c000ea66:	68 f8 ea 01 c0       	push   0xc001eaf8
c000ea6b:	e8 53 18 00 00       	call   c00102c3 <KePanic(char const*)>
c000ea70:	83 c4 10             	add    esp,0x10
c000ea73:	90                   	nop
c000ea74:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000ea79:	0f 84 85 00 00 00    	je     c000eb04 <ACPI::detectPCI()+0x170>
c000ea7f:	83 ec 0c             	sub    esp,0xc
c000ea82:	68 83 eb 01 c0       	push   0xc001eb83
c000ea87:	e8 bf 11 00 00       	call   c000fc4b <KeSetBootMessage(char const*)>
c000ea8c:	83 c4 10             	add    esp,0x10
c000ea8f:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000ea97:	83 ec 0c             	sub    esp,0xc
c000ea9a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ea9e:	e8 7e 8d ff ff       	call   c0007821 <malloc>
c000eaa3:	83 c4 10             	add    esp,0x10
c000eaa6:	89 c3                	mov    ebx,eax
c000eaa8:	83 ec 0c             	sub    esp,0xc
c000eaab:	53                   	push   ebx
c000eaac:	e8 a5 9a 00 00       	call   c0018556 <PCI::PCI()>
c000eab1:	83 c4 10             	add    esp,0x10
c000eab4:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000eab8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eabc:	83 ec 08             	sub    esp,0x8
c000eabf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eac3:	50                   	push   eax
c000eac4:	e8 2f cf ff ff       	call   c000b9f8 <Device::addChild(Device*)>
c000eac9:	83 c4 10             	add    esp,0x10
c000eacc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ead0:	8b 00                	mov    eax,DWORD PTR [eax]
c000ead2:	83 c0 08             	add    eax,0x8
c000ead5:	8b 00                	mov    eax,DWORD PTR [eax]
c000ead7:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000eadc:	74 0a                	je     c000eae8 <ACPI::detectPCI()+0x154>
c000eade:	ba 01 00 00 00       	mov    edx,0x1
c000eae3:	eb 0b                	jmp    c000eaf0 <ACPI::detectPCI()+0x15c>
c000eae5:	8d 76 00             	lea    esi,[esi+0x0]
c000eae8:	ba 02 00 00 00       	mov    edx,0x2
c000eaed:	8d 76 00             	lea    esi,[esi+0x0]
c000eaf0:	6a 00                	push   0x0
c000eaf2:	6a 00                	push   0x0
c000eaf4:	52                   	push   edx
c000eaf5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eaf9:	ff d0                	call   eax
c000eafb:	83 c4 10             	add    esp,0x10
c000eafe:	e9 91 00 00 00       	jmp    c000eb94 <ACPI::detectPCI()+0x200>
c000eb03:	90                   	nop
c000eb04:	83 ec 0c             	sub    esp,0xc
c000eb07:	68 9b eb 01 c0       	push   0xc001eb9b
c000eb0c:	e8 3a 11 00 00       	call   c000fc4b <KeSetBootMessage(char const*)>
c000eb11:	83 c4 10             	add    esp,0x10
c000eb14:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000eb1b:	83 ec 0c             	sub    esp,0xc
c000eb1e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000eb22:	e8 fa 8c ff ff       	call   c0007821 <malloc>
c000eb27:	83 c4 10             	add    esp,0x10
c000eb2a:	89 c3                	mov    ebx,eax
c000eb2c:	83 ec 0c             	sub    esp,0xc
c000eb2f:	53                   	push   ebx
c000eb30:	e8 4d a5 00 00       	call   c0019082 <IDE::IDE()>
c000eb35:	83 c4 10             	add    esp,0x10
c000eb38:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000eb3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb40:	83 ec 08             	sub    esp,0x8
c000eb43:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000eb47:	50                   	push   eax
c000eb48:	e8 ab ce ff ff       	call   c000b9f8 <Device::addChild(Device*)>
c000eb4d:	83 c4 10             	add    esp,0x10
c000eb50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb54:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000eb5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb62:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000eb6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb6f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000eb78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb7c:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb7e:	83 c0 08             	add    eax,0x8
c000eb81:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb83:	6a 00                	push   0x0
c000eb85:	6a 00                	push   0x0
c000eb87:	6a 00                	push   0x0
c000eb89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eb8d:	ff d0                	call   eax
c000eb8f:	83 c4 10             	add    esp,0x10
c000eb92:	66 90                	xchg   ax,ax
c000eb94:	90                   	nop
c000eb95:	83 c4 28             	add    esp,0x28
c000eb98:	5b                   	pop    ebx
c000eb99:	c3                   	ret    
c000eb9a:	66 90                	xchg   ax,ax

c000eb9c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000eb9c:	83 ec 1c             	sub    esp,0x1c
c000eb9f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000eba3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000eba6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ebaa:	8b 15 b8 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022eb8
c000ebb0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ebb4:	25 ff 00 00 00       	and    eax,0xff
c000ebb9:	83 ec 08             	sub    esp,0x8
c000ebbc:	50                   	push   eax
c000ebbd:	52                   	push   edx
c000ebbe:	e8 49 83 ff ff       	call   c0006f0c <Computer::readCMOS(unsigned char)>
c000ebc3:	83 c4 10             	add    esp,0x10
c000ebc6:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000ebca:	8b 15 b8 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022eb8
c000ebd0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ebd4:	25 ff 00 00 00       	and    eax,0xff
c000ebd9:	83 ec 04             	sub    esp,0x4
c000ebdc:	6a 01                	push   0x1
c000ebde:	50                   	push   eax
c000ebdf:	52                   	push   edx
c000ebe0:	e8 3d 84 ff ff       	call   c0007022 <Computer::writeCMOS(unsigned char, unsigned char)>
c000ebe5:	83 c4 10             	add    esp,0x10
c000ebe8:	90                   	nop
c000ebe9:	83 c4 1c             	add    esp,0x1c
c000ebec:	c3                   	ret    
c000ebed:	90                   	nop
c000ebee:	66 90                	xchg   ax,ax

c000ebf0 <ACPI::sleep()>:
c000ebf0:	83 ec 0c             	sub    esp,0xc
c000ebf3:	a1 a0 54 02 c0       	mov    eax,ds:0xc00254a0
c000ebf8:	85 c0                	test   eax,eax
c000ebfa:	74 08                	je     c000ec04 <ACPI::sleep()+0x14>
c000ebfc:	a1 a0 54 02 c0       	mov    eax,ds:0xc00254a0
c000ec01:	ff d0                	call   eax
c000ec03:	90                   	nop
c000ec04:	90                   	nop
c000ec05:	83 c4 0c             	add    esp,0xc
c000ec08:	c3                   	ret    
c000ec09:	90                   	nop
c000ec0a:	66 90                	xchg   ax,ax

c000ec0c <ACPI::open(int, int, void*)>:
c000ec0c:	57                   	push   edi
c000ec0d:	56                   	push   esi
c000ec0e:	53                   	push   ebx
c000ec0f:	81 ec 70 01 00 00    	sub    esp,0x170
c000ec15:	83 ec 0c             	sub    esp,0xc
c000ec18:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ec1f:	e8 70 fd ff ff       	call   c000e994 <ACPI::detectPCI()>
c000ec24:	83 c4 10             	add    esp,0x10
c000ec27:	83 ec 0c             	sub    esp,0xc
c000ec2a:	68 20 eb 01 c0       	push   0xc001eb20
c000ec2f:	e8 17 10 00 00       	call   c000fc4b <KeSetBootMessage(char const*)>
c000ec34:	83 c4 10             	add    esp,0x10
c000ec37:	83 ec 0c             	sub    esp,0xc
c000ec3a:	68 b0 eb 01 c0       	push   0xc001ebb0
c000ec3f:	e8 fb 36 00 00       	call   c001233f <Thr::loadKernelSymbolTable(char const*)>
c000ec44:	83 c4 10             	add    esp,0x10
c000ec47:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000ec4f:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000ec5a:	83 ec 0c             	sub    esp,0xc
c000ec5d:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ec64:	e8 b8 8b ff ff       	call   c0007821 <malloc>
c000ec69:	83 c4 10             	add    esp,0x10
c000ec6c:	89 c3                	mov    ebx,eax
c000ec6e:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c000ec73:	83 ec 04             	sub    esp,0x4
c000ec76:	50                   	push   eax
c000ec77:	68 ce eb 01 c0       	push   0xc001ebce
c000ec7c:	53                   	push   ebx
c000ec7d:	e8 ae be ff ff       	call   c000ab30 <File::File(char const*, Process*)>
c000ec82:	83 c4 10             	add    esp,0x10
c000ec85:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000ec8c:	83 ec 08             	sub    esp,0x8
c000ec8f:	6a 01                	push   0x1
c000ec91:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ec98:	e8 53 bf ff ff       	call   c000abf0 <File::open(FileOpenMode)>
c000ec9d:	83 c4 10             	add    esp,0x10
c000eca0:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000eca7:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000ecaf:	75 17                	jne    c000ecc8 <ACPI::open(int, int, void*)+0xbc>
c000ecb1:	83 ec 0c             	sub    esp,0xc
c000ecb4:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ecbb:	e8 8e bf ff ff       	call   c000ac4e <File::close()>
c000ecc0:	83 c4 10             	add    esp,0x10
c000ecc3:	eb 0b                	jmp    c000ecd0 <ACPI::open(int, int, void*)+0xc4>
c000ecc5:	8d 76 00             	lea    esi,[esi+0x0]
c000ecc8:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000ecd0:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000ecd8:	74 1e                	je     c000ecf8 <ACPI::open(int, int, void*)+0xec>
c000ecda:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000ece1:	8b 00                	mov    eax,DWORD PTR [eax]
c000ece3:	83 c0 08             	add    eax,0x8
c000ece6:	8b 00                	mov    eax,DWORD PTR [eax]
c000ece8:	83 ec 0c             	sub    esp,0xc
c000eceb:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ecf2:	ff d0                	call   eax
c000ecf4:	83 c4 10             	add    esp,0x10
c000ecf7:	90                   	nop
c000ecf8:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000ecff:	83 f0 01             	xor    eax,0x1
c000ed02:	84 c0                	test   al,al
c000ed04:	74 42                	je     c000ed48 <ACPI::open(int, int, void*)+0x13c>
c000ed06:	83 ec 0c             	sub    esp,0xc
c000ed09:	68 ec eb 01 c0       	push   0xc001ebec
c000ed0e:	e8 38 0f 00 00       	call   c000fc4b <KeSetBootMessage(char const*)>
c000ed13:	83 c4 10             	add    esp,0x10
c000ed16:	83 ec 04             	sub    esp,0x4
c000ed19:	6a 0c                	push   0xc
c000ed1b:	68 07 ec 01 c0       	push   0xc001ec07
c000ed20:	68 18 ec 01 c0       	push   0xc001ec18
c000ed25:	e8 17 2c 00 00       	call   c0011941 <Reg::readIntWithDefault(char*, char*, int)>
c000ed2a:	83 c4 10             	add    esp,0x10
c000ed2d:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ed34:	83 ec 0c             	sub    esp,0xc
c000ed37:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ed3e:	e8 c4 a7 ff ff       	call   c0009507 <Virt::setupPageSwapping(int)>
c000ed43:	83 c4 10             	add    esp,0x10
c000ed46:	66 90                	xchg   ax,ax
c000ed48:	83 ec 0c             	sub    esp,0xc
c000ed4b:	68 d1 dc 01 c0       	push   0xc001dcd1
c000ed50:	e8 f6 0e 00 00       	call   c000fc4b <KeSetBootMessage(char const*)>
c000ed55:	83 c4 10             	add    esp,0x10
c000ed58:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ed5f:	83 ec 08             	sub    esp,0x8
c000ed62:	6a 12                	push   0x12
c000ed64:	50                   	push   eax
c000ed65:	e8 a6 cf ff ff       	call   c000bd10 <getDevicesOfType(DeviceType)>
c000ed6a:	83 c4 0c             	add    esp,0xc
c000ed6d:	8d 76 00             	lea    esi,[esi+0x0]
c000ed70:	83 ec 0c             	sub    esp,0xc
c000ed73:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ed7a:	50                   	push   eax
c000ed7b:	e8 7c e3 00 00       	call   c001d0fc <LinkedList<Device>::isEmpty()>
c000ed80:	83 c4 10             	add    esp,0x10
c000ed83:	83 f0 01             	xor    eax,0x1
c000ed86:	84 c0                	test   al,al
c000ed88:	0f 84 46 01 00 00    	je     c000eed4 <ACPI::open(int, int, void*)+0x2c8>
c000ed8e:	83 ec 0c             	sub    esp,0xc
c000ed91:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ed98:	50                   	push   eax
c000ed99:	e8 7a e3 00 00       	call   c001d118 <LinkedList<Device>::getFirstElement()>
c000ed9e:	83 c4 10             	add    esp,0x10
c000eda1:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000eda8:	83 ec 0c             	sub    esp,0xc
c000edab:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000edb2:	50                   	push   eax
c000edb3:	e8 68 e3 00 00       	call   c001d120 <LinkedList<Device>::removeFirst()>
c000edb8:	83 c4 10             	add    esp,0x10
c000edbb:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000edc2:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000edc9:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000edd0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000edd4:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000edda:	ba 09 00 00 00       	mov    edx,0x9
c000eddf:	fc                   	cld    
c000ede0:	89 c7                	mov    edi,eax
c000ede2:	89 de                	mov    esi,ebx
c000ede4:	89 d1                	mov    ecx,edx
c000ede6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ede8:	83 ec 08             	sub    esp,0x8
c000edeb:	8d 44 24 38          	lea    eax,[esp+0x38]
c000edef:	50                   	push   eax
c000edf0:	83 ec 24             	sub    esp,0x24
c000edf3:	89 e0                	mov    eax,esp
c000edf5:	89 c3                	mov    ebx,eax
c000edf7:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000edfb:	ba 09 00 00 00       	mov    edx,0x9
c000ee00:	89 df                	mov    edi,ebx
c000ee02:	89 c6                	mov    esi,eax
c000ee04:	89 d1                	mov    ecx,edx
c000ee06:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ee08:	e8 2b 9c 00 00       	call   c0018a38 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ee0d:	83 c4 30             	add    esp,0x30
c000ee10:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ee17:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ee1f:	0f 84 4b ff ff ff    	je     c000ed70 <ACPI::open(int, int, void*)+0x164>
c000ee25:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ee30:	83 ec 0c             	sub    esp,0xc
c000ee33:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ee3a:	e8 e2 89 ff ff       	call   c0007821 <malloc>
c000ee3f:	83 c4 10             	add    esp,0x10
c000ee42:	89 c3                	mov    ebx,eax
c000ee44:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c000ee49:	83 ec 04             	sub    esp,0x4
c000ee4c:	50                   	push   eax
c000ee4d:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ee54:	53                   	push   ebx
c000ee55:	e8 d6 bc ff ff       	call   c000ab30 <File::File(char const*, Process*)>
c000ee5a:	83 c4 10             	add    esp,0x10
c000ee5d:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000ee64:	83 ec 0c             	sub    esp,0xc
c000ee67:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ee6e:	e8 eb bf ff ff       	call   c000ae5e <File::exists()>
c000ee73:	83 c4 10             	add    esp,0x10
c000ee76:	84 c0                	test   al,al
c000ee78:	74 2a                	je     c000eea4 <ACPI::open(int, int, void*)+0x298>
c000ee7a:	83 ec 08             	sub    esp,0x8
c000ee7d:	6a 01                	push   0x1
c000ee7f:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ee86:	e8 2b 3f 00 00       	call   c0012db6 <Thr::loadDLL(char const*, bool)>
c000ee8b:	83 c4 10             	add    esp,0x10
c000ee8e:	83 ec 08             	sub    esp,0x8
c000ee91:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ee98:	50                   	push   eax
c000ee99:	e8 49 41 00 00       	call   c0012fe7 <Thr::executeDLL(unsigned long, void*)>
c000ee9e:	83 c4 10             	add    esp,0x10
c000eea1:	8d 76 00             	lea    esi,[esi+0x0]
c000eea4:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000eeac:	0f 84 be fe ff ff    	je     c000ed70 <ACPI::open(int, int, void*)+0x164>
c000eeb2:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000eeb9:	8b 00                	mov    eax,DWORD PTR [eax]
c000eebb:	83 c0 08             	add    eax,0x8
c000eebe:	8b 00                	mov    eax,DWORD PTR [eax]
c000eec0:	83 ec 0c             	sub    esp,0xc
c000eec3:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000eeca:	ff d0                	call   eax
c000eecc:	83 c4 10             	add    esp,0x10
c000eecf:	e9 9c fe ff ff       	jmp    c000ed70 <ACPI::open(int, int, void*)+0x164>
c000eed4:	83 ec 0c             	sub    esp,0xc
c000eed7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000eede:	50                   	push   eax
c000eedf:	e8 14 e2 00 00       	call   c001d0f8 <LinkedList<Device>::~LinkedList()>
c000eee4:	83 c4 10             	add    esp,0x10
c000eee7:	8b 1d b8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022eb8
c000eeed:	83 ec 08             	sub    esp,0x8
c000eef0:	6a 01                	push   0x1
c000eef2:	68 1f ec 01 c0       	push   0xc001ec1f
c000eef7:	e8 ba 3e 00 00       	call   c0012db6 <Thr::loadDLL(char const*, bool)>
c000eefc:	83 c4 10             	add    esp,0x10
c000eeff:	83 ec 08             	sub    esp,0x8
c000ef02:	53                   	push   ebx
c000ef03:	50                   	push   eax
c000ef04:	e8 de 40 00 00       	call   c0012fe7 <Thr::executeDLL(unsigned long, void*)>
c000ef09:	83 c4 10             	add    esp,0x10
c000ef0c:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000ef11:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef17:	83 e0 04             	and    eax,0x4
c000ef1a:	84 c0                	test   al,al
c000ef1c:	0f 84 16 01 00 00    	je     c000f038 <ACPI::open(int, int, void*)+0x42c>
c000ef22:	83 ec 0c             	sub    esp,0xc
c000ef25:	68 3c ec 01 c0       	push   0xc001ec3c
c000ef2a:	e8 1c 0d 00 00       	call   c000fc4b <KeSetBootMessage(char const*)>
c000ef2f:	83 c4 10             	add    esp,0x10
c000ef32:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000ef3d:	83 ec 0c             	sub    esp,0xc
c000ef40:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000ef47:	e8 d5 88 ff ff       	call   c0007821 <malloc>
c000ef4c:	83 c4 10             	add    esp,0x10
c000ef4f:	89 c3                	mov    ebx,eax
c000ef51:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c000ef56:	83 ec 04             	sub    esp,0x4
c000ef59:	50                   	push   eax
c000ef5a:	68 59 ec 01 c0       	push   0xc001ec59
c000ef5f:	53                   	push   ebx
c000ef60:	e8 cb bb ff ff       	call   c000ab30 <File::File(char const*, Process*)>
c000ef65:	83 c4 10             	add    esp,0x10
c000ef68:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000ef6f:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ef77:	74 1b                	je     c000ef94 <ACPI::open(int, int, void*)+0x388>
c000ef79:	83 ec 0c             	sub    esp,0xc
c000ef7c:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ef83:	e8 d6 be ff ff       	call   c000ae5e <File::exists()>
c000ef88:	83 c4 10             	add    esp,0x10
c000ef8b:	84 c0                	test   al,al
c000ef8d:	74 05                	je     c000ef94 <ACPI::open(int, int, void*)+0x388>
c000ef8f:	b0 01                	mov    al,0x1
c000ef91:	eb 05                	jmp    c000ef98 <ACPI::open(int, int, void*)+0x38c>
c000ef93:	90                   	nop
c000ef94:	b0 00                	mov    al,0x0
c000ef96:	66 90                	xchg   ax,ax
c000ef98:	84 c0                	test   al,al
c000ef9a:	74 28                	je     c000efc4 <ACPI::open(int, int, void*)+0x3b8>
c000ef9c:	83 ec 08             	sub    esp,0x8
c000ef9f:	6a 01                	push   0x1
c000efa1:	68 59 ec 01 c0       	push   0xc001ec59
c000efa6:	e8 0b 3e 00 00       	call   c0012db6 <Thr::loadDLL(char const*, bool)>
c000efab:	83 c4 10             	add    esp,0x10
c000efae:	83 ec 08             	sub    esp,0x8
c000efb1:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000efb8:	50                   	push   eax
c000efb9:	e8 29 40 00 00       	call   c0012fe7 <Thr::executeDLL(unsigned long, void*)>
c000efbe:	83 c4 10             	add    esp,0x10
c000efc1:	8d 76 00             	lea    esi,[esi+0x0]
c000efc4:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000efcc:	74 2a                	je     c000eff8 <ACPI::open(int, int, void*)+0x3ec>
c000efce:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000efd6:	74 20                	je     c000eff8 <ACPI::open(int, int, void*)+0x3ec>
c000efd8:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000efdf:	8b 00                	mov    eax,DWORD PTR [eax]
c000efe1:	83 c0 08             	add    eax,0x8
c000efe4:	8b 00                	mov    eax,DWORD PTR [eax]
c000efe6:	83 ec 0c             	sub    esp,0xc
c000efe9:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000eff0:	ff d0                	call   eax
c000eff2:	83 c4 10             	add    esp,0x10
c000eff5:	8d 76 00             	lea    esi,[esi+0x0]
c000eff8:	a1 c8 56 02 c0       	mov    eax,ds:0xc00256c8
c000effd:	83 ec 08             	sub    esp,0x8
c000f000:	68 76 ec 01 c0       	push   0xc001ec76
c000f005:	50                   	push   eax
c000f006:	e8 31 f2 ff ff       	call   c000e23c <findDataTable(unsigned char*, char*)>
c000f00b:	83 c4 10             	add    esp,0x10
c000f00e:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f015:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f01d:	74 19                	je     c000f038 <ACPI::open(int, int, void*)+0x42c>
c000f01f:	83 ec 08             	sub    esp,0x8
c000f022:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f029:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f030:	e8 67 fb ff ff       	call   c000eb9c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f035:	83 c4 10             	add    esp,0x10
c000f038:	b8 00 00 00 00       	mov    eax,0x0
c000f03d:	81 c4 70 01 00 00    	add    esp,0x170
c000f043:	5b                   	pop    ebx
c000f044:	5e                   	pop    esi
c000f045:	5f                   	pop    edi
c000f046:	c3                   	ret    
c000f047:	90                   	nop

c000f048 <CPU::close(int, int, void*)>:
c000f048:	31 c0                	xor    eax,eax
c000f04a:	c3                   	ret    
c000f04b:	90                   	nop

c000f04c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f04c:	60                   	pusha  
c000f04d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f051:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f055:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f059:	9c                   	pushf  
c000f05a:	fa                   	cli    
c000f05b:	0f 09                	wbinvd 
c000f05d:	0f 30                	wrmsr  
c000f05f:	9d                   	popf   
c000f060:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f064:	89 02                	mov    DWORD PTR [edx],eax
c000f066:	61                   	popa   
c000f067:	c3                   	ret    

c000f068 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f068:	60                   	pusha  
c000f069:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f06d:	9c                   	pushf  
c000f06e:	fa                   	cli    
c000f06f:	0f 09                	wbinvd 
c000f071:	31 c0                	xor    eax,eax
c000f073:	31 d2                	xor    edx,edx
c000f075:	0f 32                	rdmsr  
c000f077:	9d                   	popf   
c000f078:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f07c:	89 02                	mov    DWORD PTR [edx],eax
c000f07e:	61                   	popa   
c000f07f:	c3                   	ret    

c000f080 <CPU::AMD_K6_writeback(int, int, int)>:
c000f080:	56                   	push   esi
c000f081:	53                   	push   ebx
c000f082:	83 ec 10             	sub    esp,0x10
c000f085:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f089:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f08e:	75 5d                	jne    c000f0ed <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f090:	83 f8 08             	cmp    eax,0x8
c000f093:	75 09                	jne    c000f09e <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f095:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f09a:	7e 13                	jle    c000f0af <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f09c:	eb 30                	jmp    c000f0ce <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f09e:	83 f8 06             	cmp    eax,0x6
c000f0a1:	7c 4a                	jl     c000f0ed <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f0a3:	83 f8 07             	cmp    eax,0x7
c000f0a6:	7e 07                	jle    c000f0af <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f0a8:	83 f8 09             	cmp    eax,0x9
c000f0ab:	74 21                	je     c000f0ce <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f0ad:	eb 3e                	jmp    c000f0ed <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f0af:	89 e6                	mov    esi,esp
c000f0b1:	8b 1d dc 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022edc
c000f0b7:	56                   	push   esi
c000f0b8:	c1 eb 15             	shr    ebx,0x15
c000f0bb:	68 82 00 00 c0       	push   0xc0000082
c000f0c0:	83 e3 7e             	and    ebx,0x7e
c000f0c3:	e8 a0 ff ff ff       	call   c000f068 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f0c8:	56                   	push   esi
c000f0c9:	6a 00                	push   0x0
c000f0cb:	53                   	push   ebx
c000f0cc:	eb 12                	jmp    c000f0e0 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f0ce:	89 e3                	mov    ebx,esp
c000f0d0:	53                   	push   ebx
c000f0d1:	68 82 00 00 c0       	push   0xc0000082
c000f0d6:	e8 8d ff ff ff       	call   c000f068 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f0db:	53                   	push   ebx
c000f0dc:	6a 00                	push   0x0
c000f0de:	6a 00                	push   0x0
c000f0e0:	68 82 00 00 c0       	push   0xc0000082
c000f0e5:	e8 62 ff ff ff       	call   c000f04c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f0ea:	83 c4 18             	add    esp,0x18
c000f0ed:	83 c4 10             	add    esp,0x10
c000f0f0:	5b                   	pop    ebx
c000f0f1:	5e                   	pop    esi
c000f0f2:	c3                   	ret    
c000f0f3:	90                   	nop

c000f0f4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f0f4:	55                   	push   ebp
c000f0f5:	57                   	push   edi
c000f0f6:	56                   	push   esi
c000f0f7:	53                   	push   ebx
c000f0f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f0fc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f100:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f104:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f108:	39 05 b0 ff 01 c0    	cmp    DWORD PTR ds:0xc001ffb0,eax
c000f10e:	75 23                	jne    c000f133 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f110:	a1 2c 59 02 c0       	mov    eax,ds:0xc002592c
c000f115:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f119:	89 06                	mov    DWORD PTR [esi],eax
c000f11b:	a1 28 59 02 c0       	mov    eax,ds:0xc0025928
c000f120:	89 07                	mov    DWORD PTR [edi],eax
c000f122:	a1 24 59 02 c0       	mov    eax,ds:0xc0025924
c000f127:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f12a:	a1 20 59 02 c0       	mov    eax,ds:0xc0025920
c000f12f:	89 02                	mov    DWORD PTR [edx],eax
c000f131:	eb 3f                	jmp    c000f172 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f133:	31 c9                	xor    ecx,ecx
c000f135:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f139:	0f a2                	cpuid  
c000f13b:	89 06                	mov    DWORD PTR [esi],eax
c000f13d:	89 1f                	mov    DWORD PTR [edi],ebx
c000f13f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f143:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f146:	89 10                	mov    DWORD PTR [eax],edx
c000f148:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f14c:	a3 b0 ff 01 c0       	mov    ds:0xc001ffb0,eax
c000f151:	8b 06                	mov    eax,DWORD PTR [esi]
c000f153:	a3 2c 59 02 c0       	mov    ds:0xc002592c,eax
c000f158:	8b 07                	mov    eax,DWORD PTR [edi]
c000f15a:	a3 28 59 02 c0       	mov    ds:0xc0025928,eax
c000f15f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f162:	a3 24 59 02 c0       	mov    ds:0xc0025924,eax
c000f167:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f16b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f16d:	a3 20 59 02 c0       	mov    ds:0xc0025920,eax
c000f172:	5b                   	pop    ebx
c000f173:	5e                   	pop    esi
c000f174:	5f                   	pop    edi
c000f175:	5d                   	pop    ebp
c000f176:	c3                   	ret    
c000f177:	90                   	nop

c000f178 <CPU::cpuidCheckEDX(unsigned int)>:
c000f178:	83 ec 10             	sub    esp,0x10
c000f17b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f17f:	50                   	push   eax
c000f180:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f184:	50                   	push   eax
c000f185:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f189:	50                   	push   eax
c000f18a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f18e:	50                   	push   eax
c000f18f:	6a 01                	push   0x1
c000f191:	e8 5e ff ff ff       	call   c000f0f4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f196:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f19a:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f19e:	0f 95 c0             	setne  al
c000f1a1:	83 c4 24             	add    esp,0x24
c000f1a4:	c3                   	ret    
c000f1a5:	90                   	nop

c000f1a6 <CPU::cpuidCheckECX(unsigned int)>:
c000f1a6:	83 ec 10             	sub    esp,0x10
c000f1a9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1ad:	50                   	push   eax
c000f1ae:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1b2:	50                   	push   eax
c000f1b3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1b7:	50                   	push   eax
c000f1b8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1bc:	50                   	push   eax
c000f1bd:	6a 01                	push   0x1
c000f1bf:	e8 30 ff ff ff       	call   c000f0f4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f1c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f1c8:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f1cc:	0f 95 c0             	setne  al
c000f1cf:	83 c4 24             	add    esp,0x24
c000f1d2:	c3                   	ret    
c000f1d3:	90                   	nop

c000f1d4 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f1d4:	83 ec 10             	sub    esp,0x10
c000f1d7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1db:	50                   	push   eax
c000f1dc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1e0:	50                   	push   eax
c000f1e1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1e5:	50                   	push   eax
c000f1e6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1ea:	50                   	push   eax
c000f1eb:	6a 07                	push   0x7
c000f1ed:	e8 02 ff ff ff       	call   c000f0f4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f1f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f1f6:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f1fa:	0f 95 c0             	setne  al
c000f1fd:	83 c4 24             	add    esp,0x24
c000f200:	c3                   	ret    
c000f201:	90                   	nop

c000f202 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f202:	83 ec 10             	sub    esp,0x10
c000f205:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f209:	50                   	push   eax
c000f20a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f20e:	50                   	push   eax
c000f20f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f213:	50                   	push   eax
c000f214:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f218:	50                   	push   eax
c000f219:	6a 07                	push   0x7
c000f21b:	e8 d4 fe ff ff       	call   c000f0f4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f220:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f224:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f228:	0f 95 c0             	setne  al
c000f22b:	83 c4 24             	add    esp,0x24
c000f22e:	c3                   	ret    
c000f22f:	90                   	nop

c000f230 <CPU::CPU()>:
c000f230:	83 ec 0c             	sub    esp,0xc
c000f233:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f237:	83 ec 08             	sub    esp,0x8
c000f23a:	68 99 ed 01 c0       	push   0xc001ed99
c000f23f:	50                   	push   eax
c000f240:	e8 4b c9 ff ff       	call   c000bb90 <Device::Device(char const*)>
c000f245:	83 c4 10             	add    esp,0x10
c000f248:	ba 20 ee 01 c0       	mov    edx,0xc001ee20
c000f24d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f251:	89 10                	mov    DWORD PTR [eax],edx
c000f253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f257:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f261:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f265:	05 78 01 00 00       	add    eax,0x178
c000f26a:	83 ec 0c             	sub    esp,0xc
c000f26d:	50                   	push   eax
c000f26e:	e8 6d 7e ff ff       	call   c00070e0 <GDT::GDT()>
c000f273:	83 c4 10             	add    esp,0x10
c000f276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f27a:	05 7c 09 00 00       	add    eax,0x97c
c000f27f:	83 ec 0c             	sub    esp,0xc
c000f282:	50                   	push   eax
c000f283:	e8 94 80 ff ff       	call   c000731c <IDT::IDT()>
c000f288:	83 c4 10             	add    esp,0x10
c000f28b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f28f:	05 7c 11 00 00       	add    eax,0x117c
c000f294:	83 ec 0c             	sub    esp,0xc
c000f297:	50                   	push   eax
c000f298:	e8 a3 99 ff ff       	call   c0008c40 <TSS::TSS()>
c000f29d:	83 c4 10             	add    esp,0x10
c000f2a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2a4:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f2ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2af:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f2b9:	90                   	nop
c000f2ba:	83 c4 0c             	add    esp,0xc
c000f2bd:	c3                   	ret    

c000f2be <CPU::displayFeatures()>:
c000f2be:	c3                   	ret    
c000f2bf:	90                   	nop

c000f2c0 <CPU::detectFeatures()>:
c000f2c0:	55                   	push   ebp
c000f2c1:	57                   	push   edi
c000f2c2:	56                   	push   esi
c000f2c3:	53                   	push   ebx
c000f2c4:	83 ec 30             	sub    esp,0x30
c000f2c7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f2cb:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f2d5:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f2dc:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f2e2:	6a 0d                	push   0xd
c000f2e4:	6a 00                	push   0x0
c000f2e6:	55                   	push   ebp
c000f2e7:	e8 e4 11 ff ff       	call   c00004d0 <memset>
c000f2ec:	83 c4 10             	add    esp,0x10
c000f2ef:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000f2f4:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f2fb:	0f 84 d5 05 00 00    	je     c000f8d6 <CPU::detectFeatures()+0x616>
c000f301:	83 ec 0c             	sub    esp,0xc
c000f304:	89 ef                	mov    edi,ebp
c000f306:	6a 10                	push   0x10
c000f308:	e8 6b fe ff ff       	call   c000f178 <CPU::cpuidCheckEDX(unsigned int)>
c000f30d:	83 e0 01             	and    eax,0x1
c000f310:	8d 14 00             	lea    edx,[eax+eax*1]
c000f313:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f319:	83 e0 fd             	and    eax,0xfffffffd
c000f31c:	09 d0                	or     eax,edx
c000f31e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f324:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f32b:	e8 48 fe ff ff       	call   c000f178 <CPU::cpuidCheckEDX(unsigned int)>
c000f330:	83 e0 01             	and    eax,0x1
c000f333:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f33a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f340:	83 e0 fb             	and    eax,0xfffffffb
c000f343:	09 d0                	or     eax,edx
c000f345:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f34b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f352:	e8 21 fe ff ff       	call   c000f178 <CPU::cpuidCheckEDX(unsigned int)>
c000f357:	83 e0 01             	and    eax,0x1
c000f35a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f361:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f367:	83 e0 f7             	and    eax,0xfffffff7
c000f36a:	09 d0                	or     eax,edx
c000f36c:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f372:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f379:	e8 fa fd ff ff       	call   c000f178 <CPU::cpuidCheckEDX(unsigned int)>
c000f37e:	83 e0 01             	and    eax,0x1
c000f381:	c1 e0 04             	shl    eax,0x4
c000f384:	88 c2                	mov    dl,al
c000f386:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f38c:	83 e0 ef             	and    eax,0xffffffef
c000f38f:	09 d0                	or     eax,edx
c000f391:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f397:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f39e:	e8 d5 fd ff ff       	call   c000f178 <CPU::cpuidCheckEDX(unsigned int)>
c000f3a3:	83 e0 01             	and    eax,0x1
c000f3a6:	c1 e0 05             	shl    eax,0x5
c000f3a9:	88 c2                	mov    dl,al
c000f3ab:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f3b1:	83 e0 df             	and    eax,0xffffffdf
c000f3b4:	09 d0                	or     eax,edx
c000f3b6:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f3bc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f3c3:	e8 b0 fd ff ff       	call   c000f178 <CPU::cpuidCheckEDX(unsigned int)>
c000f3c8:	83 e0 01             	and    eax,0x1
c000f3cb:	8d 14 00             	lea    edx,[eax+eax*1]
c000f3ce:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f3d4:	83 e0 fd             	and    eax,0xfffffffd
c000f3d7:	09 d0                	or     eax,edx
c000f3d9:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f3df:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f3e6:	e8 8d fd ff ff       	call   c000f178 <CPU::cpuidCheckEDX(unsigned int)>
c000f3eb:	83 e0 01             	and    eax,0x1
c000f3ee:	c1 e0 06             	shl    eax,0x6
c000f3f1:	88 c2                	mov    dl,al
c000f3f3:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f3f9:	83 e0 bf             	and    eax,0xffffffbf
c000f3fc:	09 d0                	or     eax,edx
c000f3fe:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f404:	58                   	pop    eax
c000f405:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f409:	50                   	push   eax
c000f40a:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f40e:	50                   	push   eax
c000f40f:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f413:	56                   	push   esi
c000f414:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f418:	50                   	push   eax
c000f419:	6a 00                	push   0x0
c000f41b:	e8 d4 fc ff ff       	call   c000f0f4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f420:	b8 04 00 00 00       	mov    eax,0x4
c000f425:	89 c1                	mov    ecx,eax
c000f427:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f429:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f42f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f433:	89 c1                	mov    ecx,eax
c000f435:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f437:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f43d:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f441:	89 c1                	mov    ecx,eax
c000f443:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f445:	83 c4 18             	add    esp,0x18
c000f448:	68 a8 ec 01 c0       	push   0xc001eca8
c000f44d:	55                   	push   ebp
c000f44e:	e8 8d 12 ff ff       	call   c00006e0 <strcmp>
c000f453:	83 c4 10             	add    esp,0x10
c000f456:	85 c0                	test   eax,eax
c000f458:	75 0f                	jne    c000f469 <CPU::detectFeatures()+0x1a9>
c000f45a:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f464:	e9 22 02 00 00       	jmp    c000f68b <CPU::detectFeatures()+0x3cb>
c000f469:	50                   	push   eax
c000f46a:	50                   	push   eax
c000f46b:	68 b5 ec 01 c0       	push   0xc001ecb5
c000f470:	55                   	push   ebp
c000f471:	e8 6a 12 ff ff       	call   c00006e0 <strcmp>
c000f476:	83 c4 10             	add    esp,0x10
c000f479:	85 c0                	test   eax,eax
c000f47b:	74 dd                	je     c000f45a <CPU::detectFeatures()+0x19a>
c000f47d:	50                   	push   eax
c000f47e:	50                   	push   eax
c000f47f:	68 c2 ec 01 c0       	push   0xc001ecc2
c000f484:	55                   	push   ebp
c000f485:	e8 56 12 ff ff       	call   c00006e0 <strcmp>
c000f48a:	83 c4 10             	add    esp,0x10
c000f48d:	85 c0                	test   eax,eax
c000f48f:	74 2a                	je     c000f4bb <CPU::detectFeatures()+0x1fb>
c000f491:	50                   	push   eax
c000f492:	50                   	push   eax
c000f493:	68 cf ec 01 c0       	push   0xc001eccf
c000f498:	55                   	push   ebp
c000f499:	e8 42 12 ff ff       	call   c00006e0 <strcmp>
c000f49e:	83 c4 10             	add    esp,0x10
c000f4a1:	85 c0                	test   eax,eax
c000f4a3:	74 16                	je     c000f4bb <CPU::detectFeatures()+0x1fb>
c000f4a5:	50                   	push   eax
c000f4a6:	50                   	push   eax
c000f4a7:	68 dc ec 01 c0       	push   0xc001ecdc
c000f4ac:	55                   	push   ebp
c000f4ad:	e8 2e 12 ff ff       	call   c00006e0 <strcmp>
c000f4b2:	83 c4 10             	add    esp,0x10
c000f4b5:	85 c0                	test   eax,eax
c000f4b7:	74 48                	je     c000f501 <CPU::detectFeatures()+0x241>
c000f4b9:	eb 0f                	jmp    c000f4ca <CPU::detectFeatures()+0x20a>
c000f4bb:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f4c5:	e9 c1 01 00 00       	jmp    c000f68b <CPU::detectFeatures()+0x3cb>
c000f4ca:	50                   	push   eax
c000f4cb:	50                   	push   eax
c000f4cc:	68 e9 ec 01 c0       	push   0xc001ece9
c000f4d1:	55                   	push   ebp
c000f4d2:	e8 09 12 ff ff       	call   c00006e0 <strcmp>
c000f4d7:	83 c4 10             	add    esp,0x10
c000f4da:	85 c0                	test   eax,eax
c000f4dc:	74 23                	je     c000f501 <CPU::detectFeatures()+0x241>
c000f4de:	57                   	push   edi
c000f4df:	57                   	push   edi
c000f4e0:	68 f6 ec 01 c0       	push   0xc001ecf6
c000f4e5:	55                   	push   ebp
c000f4e6:	e8 f5 11 ff ff       	call   c00006e0 <strcmp>
c000f4eb:	83 c4 10             	add    esp,0x10
c000f4ee:	85 c0                	test   eax,eax
c000f4f0:	75 1e                	jne    c000f510 <CPU::detectFeatures()+0x250>
c000f4f2:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f4fc:	e9 8a 01 00 00       	jmp    c000f68b <CPU::detectFeatures()+0x3cb>
c000f501:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f50b:	e9 7b 01 00 00       	jmp    c000f68b <CPU::detectFeatures()+0x3cb>
c000f510:	56                   	push   esi
c000f511:	56                   	push   esi
c000f512:	68 03 ed 01 c0       	push   0xc001ed03
c000f517:	55                   	push   ebp
c000f518:	e8 c3 11 ff ff       	call   c00006e0 <strcmp>
c000f51d:	83 c4 10             	add    esp,0x10
c000f520:	85 c0                	test   eax,eax
c000f522:	75 0f                	jne    c000f533 <CPU::detectFeatures()+0x273>
c000f524:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f52e:	e9 58 01 00 00       	jmp    c000f68b <CPU::detectFeatures()+0x3cb>
c000f533:	51                   	push   ecx
c000f534:	51                   	push   ecx
c000f535:	68 c2 ec 01 c0       	push   0xc001ecc2
c000f53a:	55                   	push   ebp
c000f53b:	e8 a0 11 ff ff       	call   c00006e0 <strcmp>
c000f540:	83 c4 10             	add    esp,0x10
c000f543:	85 c0                	test   eax,eax
c000f545:	75 0f                	jne    c000f556 <CPU::detectFeatures()+0x296>
c000f547:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f551:	e9 35 01 00 00       	jmp    c000f68b <CPU::detectFeatures()+0x3cb>
c000f556:	52                   	push   edx
c000f557:	52                   	push   edx
c000f558:	68 10 ed 01 c0       	push   0xc001ed10
c000f55d:	55                   	push   ebp
c000f55e:	e8 7d 11 ff ff       	call   c00006e0 <strcmp>
c000f563:	83 c4 10             	add    esp,0x10
c000f566:	85 c0                	test   eax,eax
c000f568:	75 0f                	jne    c000f579 <CPU::detectFeatures()+0x2b9>
c000f56a:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f574:	e9 12 01 00 00       	jmp    c000f68b <CPU::detectFeatures()+0x3cb>
c000f579:	50                   	push   eax
c000f57a:	50                   	push   eax
c000f57b:	68 1d ed 01 c0       	push   0xc001ed1d
c000f580:	55                   	push   ebp
c000f581:	e8 5a 11 ff ff       	call   c00006e0 <strcmp>
c000f586:	83 c4 10             	add    esp,0x10
c000f589:	85 c0                	test   eax,eax
c000f58b:	75 0f                	jne    c000f59c <CPU::detectFeatures()+0x2dc>
c000f58d:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f597:	e9 ef 00 00 00       	jmp    c000f68b <CPU::detectFeatures()+0x3cb>
c000f59c:	50                   	push   eax
c000f59d:	50                   	push   eax
c000f59e:	68 2a ed 01 c0       	push   0xc001ed2a
c000f5a3:	55                   	push   ebp
c000f5a4:	e8 37 11 ff ff       	call   c00006e0 <strcmp>
c000f5a9:	83 c4 10             	add    esp,0x10
c000f5ac:	85 c0                	test   eax,eax
c000f5ae:	75 0f                	jne    c000f5bf <CPU::detectFeatures()+0x2ff>
c000f5b0:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f5ba:	e9 cc 00 00 00       	jmp    c000f68b <CPU::detectFeatures()+0x3cb>
c000f5bf:	50                   	push   eax
c000f5c0:	50                   	push   eax
c000f5c1:	68 37 ed 01 c0       	push   0xc001ed37
c000f5c6:	55                   	push   ebp
c000f5c7:	e8 14 11 ff ff       	call   c00006e0 <strcmp>
c000f5cc:	83 c4 10             	add    esp,0x10
c000f5cf:	85 c0                	test   eax,eax
c000f5d1:	75 0f                	jne    c000f5e2 <CPU::detectFeatures()+0x322>
c000f5d3:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f5dd:	e9 a9 00 00 00       	jmp    c000f68b <CPU::detectFeatures()+0x3cb>
c000f5e2:	50                   	push   eax
c000f5e3:	50                   	push   eax
c000f5e4:	68 44 ed 01 c0       	push   0xc001ed44
c000f5e9:	55                   	push   ebp
c000f5ea:	e8 f1 10 ff ff       	call   c00006e0 <strcmp>
c000f5ef:	83 c4 10             	add    esp,0x10
c000f5f2:	85 c0                	test   eax,eax
c000f5f4:	75 0f                	jne    c000f605 <CPU::detectFeatures()+0x345>
c000f5f6:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f600:	e9 86 00 00 00       	jmp    c000f68b <CPU::detectFeatures()+0x3cb>
c000f605:	50                   	push   eax
c000f606:	50                   	push   eax
c000f607:	68 51 ed 01 c0       	push   0xc001ed51
c000f60c:	55                   	push   ebp
c000f60d:	e8 ce 10 ff ff       	call   c00006e0 <strcmp>
c000f612:	83 c4 10             	add    esp,0x10
c000f615:	85 c0                	test   eax,eax
c000f617:	75 0c                	jne    c000f625 <CPU::detectFeatures()+0x365>
c000f619:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f623:	eb 66                	jmp    c000f68b <CPU::detectFeatures()+0x3cb>
c000f625:	50                   	push   eax
c000f626:	50                   	push   eax
c000f627:	68 5e ed 01 c0       	push   0xc001ed5e
c000f62c:	55                   	push   ebp
c000f62d:	e8 ae 10 ff ff       	call   c00006e0 <strcmp>
c000f632:	83 c4 10             	add    esp,0x10
c000f635:	85 c0                	test   eax,eax
c000f637:	75 0c                	jne    c000f645 <CPU::detectFeatures()+0x385>
c000f639:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f643:	eb 46                	jmp    c000f68b <CPU::detectFeatures()+0x3cb>
c000f645:	57                   	push   edi
c000f646:	57                   	push   edi
c000f647:	68 6b ed 01 c0       	push   0xc001ed6b
c000f64c:	55                   	push   ebp
c000f64d:	e8 8e 10 ff ff       	call   c00006e0 <strcmp>
c000f652:	83 c4 10             	add    esp,0x10
c000f655:	85 c0                	test   eax,eax
c000f657:	74 e0                	je     c000f639 <CPU::detectFeatures()+0x379>
c000f659:	56                   	push   esi
c000f65a:	56                   	push   esi
c000f65b:	68 78 ed 01 c0       	push   0xc001ed78
c000f660:	55                   	push   ebp
c000f661:	e8 7a 10 ff ff       	call   c00006e0 <strcmp>
c000f666:	83 c4 10             	add    esp,0x10
c000f669:	85 c0                	test   eax,eax
c000f66b:	74 cc                	je     c000f639 <CPU::detectFeatures()+0x379>
c000f66d:	51                   	push   ecx
c000f66e:	51                   	push   ecx
c000f66f:	68 85 ed 01 c0       	push   0xc001ed85
c000f674:	55                   	push   ebp
c000f675:	e8 66 10 ff ff       	call   c00006e0 <strcmp>
c000f67a:	83 c4 10             	add    esp,0x10
c000f67d:	85 c0                	test   eax,eax
c000f67f:	74 b8                	je     c000f639 <CPU::detectFeatures()+0x379>
c000f681:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f68b:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f690:	0f 86 be 00 00 00    	jbe    c000f754 <CPU::detectFeatures()+0x494>
c000f696:	83 ec 0c             	sub    esp,0xc
c000f699:	68 80 00 00 00       	push   0x80
c000f69e:	e8 31 fb ff ff       	call   c000f1d4 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f6a3:	83 e0 01             	and    eax,0x1
c000f6a6:	c1 e0 06             	shl    eax,0x6
c000f6a9:	88 c2                	mov    dl,al
c000f6ab:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f6b1:	83 e0 bf             	and    eax,0xffffffbf
c000f6b4:	09 d0                	or     eax,edx
c000f6b6:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f6bc:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f6c3:	e8 0c fb ff ff       	call   c000f1d4 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f6c8:	83 e0 01             	and    eax,0x1
c000f6cb:	c1 e0 04             	shl    eax,0x4
c000f6ce:	88 c2                	mov    dl,al
c000f6d0:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f6d6:	83 e0 ef             	and    eax,0xffffffef
c000f6d9:	09 d0                	or     eax,edx
c000f6db:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f6e1:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f6e8:	e8 e7 fa ff ff       	call   c000f1d4 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f6ed:	c1 e0 07             	shl    eax,0x7
c000f6f0:	88 c2                	mov    dl,al
c000f6f2:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f6f8:	83 e0 7f             	and    eax,0x7f
c000f6fb:	09 d0                	or     eax,edx
c000f6fd:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f703:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f70a:	e8 f3 fa ff ff       	call   c000f202 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f70f:	83 e0 01             	and    eax,0x1
c000f712:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f719:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f71f:	83 e0 f7             	and    eax,0xfffffff7
c000f722:	09 d0                	or     eax,edx
c000f724:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f72a:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f731:	e8 cc fa ff ff       	call   c000f202 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f736:	83 c4 10             	add    esp,0x10
c000f739:	83 e0 01             	and    eax,0x1
c000f73c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f743:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f749:	83 e0 fb             	and    eax,0xfffffffb
c000f74c:	09 d0                	or     eax,edx
c000f74e:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f754:	83 ec 0c             	sub    esp,0xc
c000f757:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f75b:	50                   	push   eax
c000f75c:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f760:	50                   	push   eax
c000f761:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f765:	56                   	push   esi
c000f766:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f76a:	50                   	push   eax
c000f76b:	6a 01                	push   0x1
c000f76d:	e8 82 f9 ff ff       	call   c000f0f4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f772:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f776:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f77c:	88 ca                	mov    dl,cl
c000f77e:	83 e0 f0             	and    eax,0xfffffff0
c000f781:	83 e2 0f             	and    edx,0xf
c000f784:	09 d0                	or     eax,edx
c000f786:	88 ca                	mov    dl,cl
c000f788:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f78e:	c0 ea 04             	shr    dl,0x4
c000f791:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f795:	0f b6 c2             	movzx  eax,dl
c000f798:	83 c4 20             	add    esp,0x20
c000f79b:	c1 e0 06             	shl    eax,0x6
c000f79e:	89 c7                	mov    edi,eax
c000f7a0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f7a6:	66 25 3f c0          	and    ax,0xc03f
c000f7aa:	09 f8                	or     eax,edi
c000f7ac:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f7b3:	89 c8                	mov    eax,ecx
c000f7b5:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f7bc:	c1 e8 08             	shr    eax,0x8
c000f7bf:	83 e5 3f             	and    ebp,0x3f
c000f7c2:	83 e0 0f             	and    eax,0xf
c000f7c5:	89 c7                	mov    edi,eax
c000f7c7:	c1 e7 06             	shl    edi,0x6
c000f7ca:	09 ef                	or     edi,ebp
c000f7cc:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f7d3:	89 fa                	mov    edx,edi
c000f7d5:	83 e5 c0             	and    ebp,0xffffffc0
c000f7d8:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f7de:	88 c2                	mov    dl,al
c000f7e0:	c0 ea 02             	shr    dl,0x2
c000f7e3:	89 d7                	mov    edi,edx
c000f7e5:	09 ef                	or     edi,ebp
c000f7e7:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f7ed:	89 fa                	mov    edx,edi
c000f7ef:	83 e5 cf             	and    ebp,0xffffffcf
c000f7f2:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f7f8:	89 cf                	mov    edi,ecx
c000f7fa:	c1 ef 0c             	shr    edi,0xc
c000f7fd:	83 e7 03             	and    edi,0x3
c000f800:	c1 e7 04             	shl    edi,0x4
c000f803:	09 ef                	or     edi,ebp
c000f805:	3c 06                	cmp    al,0x6
c000f807:	89 fa                	mov    edx,edi
c000f809:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f80f:	74 04                	je     c000f815 <CPU::detectFeatures()+0x555>
c000f811:	3c 0f                	cmp    al,0xf
c000f813:	75 5c                	jne    c000f871 <CPU::detectFeatures()+0x5b1>
c000f815:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f819:	89 cf                	mov    edi,ecx
c000f81b:	c1 ef 10             	shr    edi,0x10
c000f81e:	c1 e7 04             	shl    edi,0x4
c000f821:	09 fa                	or     edx,edi
c000f823:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f829:	0f b6 d2             	movzx  edx,dl
c000f82c:	66 81 e7 3f c0       	and    di,0xc03f
c000f831:	c1 e2 06             	shl    edx,0x6
c000f834:	09 fa                	or     edx,edi
c000f836:	3c 0f                	cmp    al,0xf
c000f838:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f83f:	75 30                	jne    c000f871 <CPU::detectFeatures()+0x5b1>
c000f841:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f847:	c1 e9 14             	shr    ecx,0x14
c000f84a:	83 e0 3f             	and    eax,0x3f
c000f84d:	83 c1 0f             	add    ecx,0xf
c000f850:	88 ca                	mov    dl,cl
c000f852:	c0 e9 02             	shr    cl,0x2
c000f855:	c1 e2 06             	shl    edx,0x6
c000f858:	09 d0                	or     eax,edx
c000f85a:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f860:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f866:	83 e0 c0             	and    eax,0xffffffc0
c000f869:	09 c1                	or     ecx,eax
c000f86b:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f871:	83 ec 0c             	sub    esp,0xc
c000f874:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f87b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f87f:	50                   	push   eax
c000f880:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f884:	55                   	push   ebp
c000f885:	56                   	push   esi
c000f886:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f88a:	57                   	push   edi
c000f88b:	68 00 00 00 80       	push   0x80000000
c000f890:	e8 5f f8 ff ff       	call   c000f0f4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f895:	83 c4 20             	add    esp,0x20
c000f898:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f8a0:	76 22                	jbe    c000f8c4 <CPU::detectFeatures()+0x604>
c000f8a2:	83 ec 0c             	sub    esp,0xc
c000f8a5:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f8a9:	50                   	push   eax
c000f8aa:	55                   	push   ebp
c000f8ab:	56                   	push   esi
c000f8ac:	57                   	push   edi
c000f8ad:	68 01 00 00 80       	push   0x80000001
c000f8b2:	e8 3d f8 ff ff       	call   c000f0f4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f8b7:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f8c1:	83 c4 20             	add    esp,0x20
c000f8c4:	52                   	push   edx
c000f8c5:	52                   	push   edx
c000f8c6:	68 91 ed 01 c0       	push   0xc001ed91
c000f8cb:	53                   	push   ebx
c000f8cc:	e8 b1 c2 ff ff       	call   c000bb82 <Device::setName(char const*)>
c000f8d1:	83 c4 10             	add    esp,0x10
c000f8d4:	eb 67                	jmp    c000f93d <CPU::detectFeatures()+0x67d>
c000f8d6:	50                   	push   eax
c000f8d7:	50                   	push   eax
c000f8d8:	68 f6 ec 01 c0       	push   0xc001ecf6
c000f8dd:	55                   	push   ebp
c000f8de:	e8 1d 0d ff ff       	call   c0000600 <strcpy>
c000f8e3:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f8ed:	e8 d1 08 ff ff       	call   c00001c3 <is486>
c000f8f2:	83 c4 10             	add    esp,0x10
c000f8f5:	85 c0                	test   eax,eax
c000f8f7:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f8fd:	74 1d                	je     c000f91c <CPU::detectFeatures()+0x65c>
c000f8ff:	83 c8 07             	or     eax,0x7
c000f902:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f908:	0f 20 c0             	mov    eax,cr0
c000f90b:	83 e0 14             	and    eax,0x14
c000f90e:	83 f8 04             	cmp    eax,0x4
c000f911:	75 0e                	jne    c000f921 <CPU::detectFeatures()+0x661>
c000f913:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000f91a:	eb 21                	jmp    c000f93d <CPU::detectFeatures()+0x67d>
c000f91c:	83 e0 f8             	and    eax,0xfffffff8
c000f91f:	eb e1                	jmp    c000f902 <CPU::detectFeatures()+0x642>
c000f921:	e8 78 08 ff ff       	call   c000019e <hasLegacyFPU>
c000f926:	83 e0 01             	and    eax,0x1
c000f929:	8d 14 00             	lea    edx,[eax+eax*1]
c000f92c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f932:	83 e0 fd             	and    eax,0xfffffffd
c000f935:	09 d0                	or     eax,edx
c000f937:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f93d:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000f944:	74 0e                	je     c000f954 <CPU::detectFeatures()+0x694>
c000f946:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000f94b:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000f952:	eb 20                	jmp    c000f974 <CPU::detectFeatures()+0x6b4>
c000f954:	e8 45 08 ff ff       	call   c000019e <hasLegacyFPU>
c000f959:	83 e0 01             	and    eax,0x1
c000f95c:	8d 14 00             	lea    edx,[eax+eax*1]
c000f95f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f965:	83 e0 fd             	and    eax,0xfffffffd
c000f968:	09 d0                	or     eax,edx
c000f96a:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f970:	a8 02                	test   al,0x2
c000f972:	75 d2                	jne    c000f946 <CPU::detectFeatures()+0x686>
c000f974:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000f97b:	83 c4 2c             	add    esp,0x2c
c000f97e:	5b                   	pop    ebx
c000f97f:	5e                   	pop    esi
c000f980:	5f                   	pop    edi
c000f981:	5d                   	pop    ebp
c000f982:	c3                   	ret    
c000f983:	90                   	nop

c000f984 <CPU::setupSMEP()>:
c000f984:	0f 20 e0             	mov    eax,cr4
c000f987:	0d 00 00 10 00       	or     eax,0x100000
c000f98c:	0f 22 e0             	mov    cr4,eax
c000f98f:	c3                   	ret    

c000f990 <CPU::setupUMIP()>:
c000f990:	0f 20 e0             	mov    eax,cr4
c000f993:	80 cc 08             	or     ah,0x8
c000f996:	0f 22 e0             	mov    cr4,eax
c000f999:	c3                   	ret    

c000f99a <CPU::setupTSC()>:
c000f99a:	0f 20 e0             	mov    eax,cr4
c000f99d:	83 c8 04             	or     eax,0x4
c000f9a0:	0f 22 e0             	mov    cr4,eax
c000f9a3:	c3                   	ret    

c000f9a4 <CPU::setupLargePages()>:
c000f9a4:	0f 20 e0             	mov    eax,cr4
c000f9a7:	83 c8 10             	or     eax,0x10
c000f9aa:	0f 22 e0             	mov    cr4,eax
c000f9ad:	c3                   	ret    

c000f9ae <CPU::setupPAT()>:
c000f9ae:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000f9b3:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000f9ba:	74 2c                	je     c000f9e8 <CPU::setupPAT()+0x3a>
c000f9bc:	53                   	push   ebx
c000f9bd:	83 ec 10             	sub    esp,0x10
c000f9c0:	68 77 02 00 00       	push   0x277
c000f9c5:	50                   	push   eax
c000f9c6:	e8 8d 74 ff ff       	call   c0006e58 <Computer::rdmsr(unsigned int)>
c000f9cb:	83 e2 f8             	and    edx,0xfffffff8
c000f9ce:	83 ca 01             	or     edx,0x1
c000f9d1:	52                   	push   edx
c000f9d2:	50                   	push   eax
c000f9d3:	68 77 02 00 00       	push   0x277
c000f9d8:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c000f9de:	e8 a1 74 ff ff       	call   c0006e84 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f9e3:	83 c4 28             	add    esp,0x28
c000f9e6:	5b                   	pop    ebx
c000f9e7:	c3                   	ret    
c000f9e8:	c3                   	ret    
c000f9e9:	90                   	nop

c000f9ea <CPU::setupMTRR()>:
c000f9ea:	c3                   	ret    
c000f9eb:	90                   	nop

c000f9ec <CPU::setupGlobalPages()>:
c000f9ec:	0f 20 e0             	mov    eax,cr4
c000f9ef:	0c 80                	or     al,0x80
c000f9f1:	0f 22 e0             	mov    cr4,eax
c000f9f4:	c3                   	ret    
c000f9f5:	90                   	nop

c000f9f6 <CPU::allowUsermodeDataAccess()>:
c000f9f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f9fa:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fa01:	74 03                	je     c000fa06 <CPU::allowUsermodeDataAccess()+0x10>
c000fa03:	0f 01 cb             	stac   
c000fa06:	c3                   	ret    
c000fa07:	90                   	nop

c000fa08 <CPU::prohibitUsermodeDataAccess()>:
c000fa08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fa0c:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fa13:	74 03                	je     c000fa18 <CPU::prohibitUsermodeDataAccess()+0x10>
c000fa15:	0f 01 ca             	clac   
c000fa18:	c3                   	ret    
c000fa19:	90                   	nop

c000fa1a <CPU::setupSMAP()>:
c000fa1a:	0f 20 e0             	mov    eax,cr4
c000fa1d:	0d 00 00 20 00       	or     eax,0x200000
c000fa22:	0f 22 e0             	mov    cr4,eax
c000fa25:	eb e1                	jmp    c000fa08 <CPU::prohibitUsermodeDataAccess()>
c000fa27:	90                   	nop

c000fa28 <CPU::setupFeatures()>:
c000fa28:	53                   	push   ebx
c000fa29:	83 ec 08             	sub    esp,0x8
c000fa2c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa30:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000fa37:	74 18                	je     c000fa51 <CPU::setupFeatures()+0x29>
c000fa39:	83 ec 0c             	sub    esp,0xc
c000fa3c:	68 9d ed 01 c0       	push   0xc001ed9d
c000fa41:	e8 74 ab ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c000fa46:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa49:	e8 42 ff ff ff       	call   c000f990 <CPU::setupUMIP()>
c000fa4e:	83 c4 10             	add    esp,0x10
c000fa51:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000fa58:	74 18                	je     c000fa72 <CPU::setupFeatures()+0x4a>
c000fa5a:	83 ec 0c             	sub    esp,0xc
c000fa5d:	68 a7 ed 01 c0       	push   0xc001eda7
c000fa62:	e8 53 ab ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c000fa67:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa6a:	e8 2b ff ff ff       	call   c000f99a <CPU::setupTSC()>
c000fa6f:	83 c4 10             	add    esp,0x10
c000fa72:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000fa79:	74 18                	je     c000fa93 <CPU::setupFeatures()+0x6b>
c000fa7b:	83 ec 0c             	sub    esp,0xc
c000fa7e:	68 b0 ed 01 c0       	push   0xc001edb0
c000fa83:	e8 32 ab ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c000fa88:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa8b:	e8 14 ff ff ff       	call   c000f9a4 <CPU::setupLargePages()>
c000fa90:	83 c4 10             	add    esp,0x10
c000fa93:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000fa9a:	74 18                	je     c000fab4 <CPU::setupFeatures()+0x8c>
c000fa9c:	83 ec 0c             	sub    esp,0xc
c000fa9f:	68 b9 ed 01 c0       	push   0xc001edb9
c000faa4:	e8 11 ab ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c000faa9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000faac:	e8 3b ff ff ff       	call   c000f9ec <CPU::setupGlobalPages()>
c000fab1:	83 c4 10             	add    esp,0x10
c000fab4:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000fabb:	74 18                	je     c000fad5 <CPU::setupFeatures()+0xad>
c000fabd:	83 ec 0c             	sub    esp,0xc
c000fac0:	68 cb ed 01 c0       	push   0xc001edcb
c000fac5:	e8 f0 aa ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c000faca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000facd:	e8 dc fe ff ff       	call   c000f9ae <CPU::setupPAT()>
c000fad2:	83 c4 10             	add    esp,0x10
c000fad5:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000fadc:	74 11                	je     c000faef <CPU::setupFeatures()+0xc7>
c000fade:	c7 44 24 10 d4 ed 01 c0 	mov    DWORD PTR [esp+0x10],0xc001edd4
c000fae6:	83 c4 08             	add    esp,0x8
c000fae9:	5b                   	pop    ebx
c000faea:	e9 cb aa ff ff       	jmp    c000a5ba <Dbg::kprintf(char const*, ...)>
c000faef:	83 c4 08             	add    esp,0x8
c000faf2:	5b                   	pop    ebx
c000faf3:	c3                   	ret    

c000faf4 <CPU::open(int, int, void*)>:
c000faf4:	57                   	push   edi
c000faf5:	56                   	push   esi
c000faf6:	53                   	push   ebx
c000faf7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fafb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000faff:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000fb05:	83 ec 0c             	sub    esp,0xc
c000fb08:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000fb0e:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000fb14:	50                   	push   eax
c000fb15:	e8 28 76 ff ff       	call   c0007142 <GDT::setup()>
c000fb1a:	83 c4 0c             	add    esp,0xc
c000fb1d:	6a 00                	push   0x0
c000fb1f:	68 ef be ad de       	push   0xdeadbeef
c000fb24:	57                   	push   edi
c000fb25:	e8 5a 91 ff ff       	call   c0008c84 <TSS::setup(unsigned long, unsigned long)>
c000fb2a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fb2d:	e8 32 91 ff ff       	call   c0008c64 <TSS::flush()>
c000fb32:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000fb38:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb3b:	e8 52 78 ff ff       	call   c0007392 <IDT::setup()>
c000fb40:	b8 00 04 00 00       	mov    eax,0x400
c000fb45:	0f 23 f8             	mov    db7,eax
c000fb48:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000fb52:	e8 a6 7f ff ff       	call   c0007afd <Phys::allocatePage()>
c000fb57:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000fb5d:	89 30                	mov    DWORD PTR [eax],esi
c000fb5f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000fb65:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000fb68:	58                   	pop    eax
c000fb69:	5a                   	pop    edx
c000fb6a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000fb70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fb74:	e8 23 a1 ff ff       	call   c0009c9c <VAS::setCPUSpecific(unsigned long)>
c000fb79:	c7 04 24 de ed 01 c0 	mov    DWORD PTR [esp],0xc001edde
c000fb80:	e8 c6 00 00 00       	call   c000fc4b <KeSetBootMessage(char const*)>
c000fb85:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb88:	e8 33 f7 ff ff       	call   c000f2c0 <CPU::detectFeatures()>
c000fb8d:	c7 04 24 01 ee 01 c0 	mov    DWORD PTR [esp],0xc001ee01
c000fb94:	e8 b2 00 00 00       	call   c000fc4b <KeSetBootMessage(char const*)>
c000fb99:	e8 4e 5b 00 00       	call   c00156ec <HalInitialise()>
c000fb9e:	a1 d0 2e 02 c0       	mov    eax,ds:0xc0022ed0
c000fba3:	83 e0 10             	and    eax,0x10
c000fba6:	83 f8 01             	cmp    eax,0x1
c000fba9:	19 c0                	sbb    eax,eax
c000fbab:	83 e0 46             	and    eax,0x46
c000fbae:	83 c0 1e             	add    eax,0x1e
c000fbb1:	89 04 24             	mov    DWORD PTR [esp],eax
c000fbb4:	e8 c8 d6 ff ff       	call   c000d281 <setupTimer(int)>
c000fbb9:	83 c4 10             	add    esp,0x10
c000fbbc:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fbc2:	f6 05 d0 2e 02 c0 20 	test   BYTE PTR ds:0xc0022ed0,0x20
c000fbc9:	74 0c                	je     c000fbd7 <CPU::open(int, int, void*)+0xe3>
c000fbcb:	83 ec 0c             	sub    esp,0xc
c000fbce:	53                   	push   ebx
c000fbcf:	e8 54 fe ff ff       	call   c000fa28 <CPU::setupFeatures()>
c000fbd4:	83 c4 10             	add    esp,0x10
c000fbd7:	5b                   	pop    ebx
c000fbd8:	31 c0                	xor    eax,eax
c000fbda:	5e                   	pop    esi
c000fbdb:	5f                   	pop    edi
c000fbdc:	c3                   	ret    

c000fbdd <KeDisplaySplashScreen()>:
c000fbdd:	55                   	push   ebp
c000fbde:	bd 05 00 00 00       	mov    ebp,0x5
c000fbe3:	57                   	push   edi
c000fbe4:	bf c0 ff 01 c0       	mov    edi,0xc001ffc0
c000fbe9:	56                   	push   esi
c000fbea:	be 0a 00 00 00       	mov    esi,0xa
c000fbef:	53                   	push   ebx
c000fbf0:	31 db                	xor    ebx,ebx
c000fbf2:	83 ec 0c             	sub    esp,0xc
c000fbf5:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fbf8:	84 c0                	test   al,al
c000fbfa:	74 47                	je     c000fc43 <KeDisplaySplashScreen()+0x66>
c000fbfc:	80 bb f6 ff 01 c0 db 	cmp    BYTE PTR [ebx-0x3ffe000a],0xdb
c000fc03:	75 13                	jne    c000fc18 <KeDisplaySplashScreen()+0x3b>
c000fc05:	0f b6 93 f5 ff 01 c0 	movzx  edx,BYTE PTR [ebx-0x3ffe000b]
c000fc0c:	83 e2 fe             	and    edx,0xfffffffe
c000fc0f:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fc15:	75 01                	jne    c000fc18 <KeDisplaySplashScreen()+0x3b>
c000fc17:	46                   	inc    esi
c000fc18:	3c 0d                	cmp    al,0xd
c000fc1a:	74 24                	je     c000fc40 <KeDisplaySplashScreen()+0x63>
c000fc1c:	3c 0a                	cmp    al,0xa
c000fc1e:	75 0a                	jne    c000fc2a <KeDisplaySplashScreen()+0x4d>
c000fc20:	45                   	inc    ebp
c000fc21:	be 0a 00 00 00       	mov    esi,0xa
c000fc26:	31 db                	xor    ebx,ebx
c000fc28:	eb 16                	jmp    c000fc40 <KeDisplaySplashScreen()+0x63>
c000fc2a:	83 ec 0c             	sub    esp,0xc
c000fc2d:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fc30:	55                   	push   ebp
c000fc31:	43                   	inc    ebx
c000fc32:	52                   	push   edx
c000fc33:	6a 00                	push   0x0
c000fc35:	6a 0e                	push   0xe
c000fc37:	50                   	push   eax
c000fc38:	e8 13 67 00 00       	call   c0016350 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fc3d:	83 c4 20             	add    esp,0x20
c000fc40:	47                   	inc    edi
c000fc41:	eb b2                	jmp    c000fbf5 <KeDisplaySplashScreen()+0x18>
c000fc43:	83 c4 0c             	add    esp,0xc
c000fc46:	5b                   	pop    ebx
c000fc47:	5e                   	pop    esi
c000fc48:	5f                   	pop    edi
c000fc49:	5d                   	pop    ebp
c000fc4a:	c3                   	ret    

c000fc4b <KeSetBootMessage(char const*)>:
c000fc4b:	57                   	push   edi
c000fc4c:	56                   	push   esi
c000fc4d:	53                   	push   ebx
c000fc4e:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fc54:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fc5b:	68 9e 00 00 00       	push   0x9e
c000fc60:	6a 00                	push   0x0
c000fc62:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fc66:	56                   	push   esi
c000fc67:	e8 64 08 ff ff       	call   c00004d0 <memset>
c000fc6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc6f:	e8 cc 08 ff ff       	call   c0000540 <strlen>
c000fc74:	ba 50 00 00 00       	mov    edx,0x50
c000fc79:	83 c4 10             	add    esp,0x10
c000fc7c:	29 c2                	sub    edx,eax
c000fc7e:	31 c9                	xor    ecx,ecx
c000fc80:	83 e2 fe             	and    edx,0xfffffffe
c000fc83:	01 f2                	add    edx,esi
c000fc85:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fc8a:	84 c0                	test   al,al
c000fc8c:	74 0a                	je     c000fc98 <KeSetBootMessage(char const*)+0x4d>
c000fc8e:	80 cc 0f             	or     ah,0xf
c000fc91:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fc95:	41                   	inc    ecx
c000fc96:	eb ed                	jmp    c000fc85 <KeSetBootMessage(char const*)+0x3a>
c000fc98:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fc9d:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fca2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fca4:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fcaa:	5b                   	pop    ebx
c000fcab:	5e                   	pop    esi
c000fcac:	5f                   	pop    edi
c000fcad:	c3                   	ret    

c000fcae <EnvVarContainer::getEnv(char const*)>:
c000fcae:	57                   	push   edi
c000fcaf:	56                   	push   esi
c000fcb0:	53                   	push   ebx
c000fcb1:	31 db                	xor    ebx,ebx
c000fcb3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fcb7:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fcb9:	7e 2b                	jle    c000fce6 <EnvVarContainer::getEnv(char const*)+0x38>
c000fcbb:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fcc2:	50                   	push   eax
c000fcc3:	50                   	push   eax
c000fcc4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fcc7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fcca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fcce:	e8 0d 0a ff ff       	call   c00006e0 <strcmp>
c000fcd3:	83 c4 10             	add    esp,0x10
c000fcd6:	85 c0                	test   eax,eax
c000fcd8:	75 09                	jne    c000fce3 <EnvVarContainer::getEnv(char const*)+0x35>
c000fcda:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fcdd:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fce1:	eb 05                	jmp    c000fce8 <EnvVarContainer::getEnv(char const*)+0x3a>
c000fce3:	43                   	inc    ebx
c000fce4:	eb d1                	jmp    c000fcb7 <EnvVarContainer::getEnv(char const*)+0x9>
c000fce6:	31 c0                	xor    eax,eax
c000fce8:	5b                   	pop    ebx
c000fce9:	5e                   	pop    esi
c000fcea:	5f                   	pop    edi
c000fceb:	c3                   	ret    

c000fcec <EnvVarContainer::setEnv(char const*, char const*)>:
c000fcec:	55                   	push   ebp
c000fced:	57                   	push   edi
c000fcee:	56                   	push   esi
c000fcef:	53                   	push   ebx
c000fcf0:	83 ec 28             	sub    esp,0x28
c000fcf3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fcf7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fcfb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fcff:	56                   	push   esi
c000fd00:	e8 3b 08 ff ff       	call   c0000540 <strlen>
c000fd05:	40                   	inc    eax
c000fd06:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd09:	e8 13 7b ff ff       	call   c0007821 <malloc>
c000fd0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd11:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd15:	e8 26 08 ff ff       	call   c0000540 <strlen>
c000fd1a:	40                   	inc    eax
c000fd1b:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd1e:	e8 fe 7a ff ff       	call   c0007821 <malloc>
c000fd23:	89 34 24             	mov    DWORD PTR [esp],esi
c000fd26:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fd2a:	e8 11 08 ff ff       	call   c0000540 <strlen>
c000fd2f:	83 c4 0c             	add    esp,0xc
c000fd32:	40                   	inc    eax
c000fd33:	50                   	push   eax
c000fd34:	6a 00                	push   0x0
c000fd36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fd3a:	e8 91 07 ff ff       	call   c00004d0 <memset>
c000fd3f:	89 34 24             	mov    DWORD PTR [esp],esi
c000fd42:	e8 f9 07 ff ff       	call   c0000540 <strlen>
c000fd47:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fd4b:	8d 48 01             	lea    ecx,[eax+0x1]
c000fd4e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd50:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd53:	89 de                	mov    esi,ebx
c000fd55:	e8 e6 07 ff ff       	call   c0000540 <strlen>
c000fd5a:	83 c4 0c             	add    esp,0xc
c000fd5d:	40                   	inc    eax
c000fd5e:	50                   	push   eax
c000fd5f:	6a 00                	push   0x0
c000fd61:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd65:	e8 66 07 ff ff       	call   c00004d0 <memset>
c000fd6a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd6d:	e8 ce 07 ff ff       	call   c0000540 <strlen>
c000fd72:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fd76:	8d 48 01             	lea    ecx,[eax+0x1]
c000fd79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd7b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fd7e:	40                   	inc    eax
c000fd7f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fd82:	c1 e0 03             	shl    eax,0x3
c000fd85:	5a                   	pop    edx
c000fd86:	59                   	pop    ecx
c000fd87:	50                   	push   eax
c000fd88:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fd8b:	e8 7d 7a ff ff       	call   c000780d <realloc>
c000fd90:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fd94:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fd97:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fd9a:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fd9e:	b9 08 00 00 00       	mov    ecx,0x8
c000fda3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fda5:	83 c4 2c             	add    esp,0x2c
c000fda8:	5b                   	pop    ebx
c000fda9:	5e                   	pop    esi
c000fdaa:	5f                   	pop    edi
c000fdab:	5d                   	pop    ebp
c000fdac:	c3                   	ret    
c000fdad:	90                   	nop

c000fdae <EnvVarContainer::deleteEnv(char const*)>:
c000fdae:	c3                   	ret    
c000fdaf:	90                   	nop

c000fdb0 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fdb0:	55                   	push   ebp
c000fdb1:	57                   	push   edi
c000fdb2:	56                   	push   esi
c000fdb3:	53                   	push   ebx
c000fdb4:	81 ec 38 01 00 00    	sub    esp,0x138
c000fdba:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fdc1:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fdc8:	68 14 01 00 00       	push   0x114
c000fdcd:	e8 4f 7a ff ff       	call   c0007821 <malloc>
c000fdd2:	83 c4 0c             	add    esp,0xc
c000fdd5:	89 c3                	mov    ebx,eax
c000fdd7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fdda:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fde1:	50                   	push   eax
c000fde2:	e8 49 ad ff ff       	call   c000ab30 <File::File(char const*, Process*)>
c000fde7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fdea:	e8 6f b0 ff ff       	call   c000ae5e <File::exists()>
c000fdef:	83 c4 10             	add    esp,0x10
c000fdf2:	84 c0                	test   al,al
c000fdf4:	75 31                	jne    c000fe27 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fdf6:	50                   	push   eax
c000fdf7:	50                   	push   eax
c000fdf8:	6a 12                	push   0x12
c000fdfa:	53                   	push   ebx
c000fdfb:	e8 f0 ad ff ff       	call   c000abf0 <File::open(FileOpenMode)>
c000fe00:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fe02:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000fe05:	89 34 24             	mov    DWORD PTR [esp],esi
c000fe08:	e8 33 07 ff ff       	call   c0000540 <strlen>
c000fe0d:	5a                   	pop    edx
c000fe0e:	31 d2                	xor    edx,edx
c000fe10:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fe14:	51                   	push   ecx
c000fe15:	56                   	push   esi
c000fe16:	52                   	push   edx
c000fe17:	50                   	push   eax
c000fe18:	53                   	push   ebx
c000fe19:	ff d7                	call   edi
c000fe1b:	83 c4 14             	add    esp,0x14
c000fe1e:	53                   	push   ebx
c000fe1f:	e8 2a ae ff ff       	call   c000ac4e <File::close()>
c000fe24:	83 c4 10             	add    esp,0x10
c000fe27:	56                   	push   esi
c000fe28:	31 f6                	xor    esi,esi
c000fe2a:	68 00 01 00 00       	push   0x100
c000fe2f:	6a 00                	push   0x0
c000fe31:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fe35:	50                   	push   eax
c000fe36:	e8 95 06 ff ff       	call   c00004d0 <memset>
c000fe3b:	5f                   	pop    edi
c000fe3c:	58                   	pop    eax
c000fe3d:	6a 01                	push   0x1
c000fe3f:	53                   	push   ebx
c000fe40:	e8 ab ad ff ff       	call   c000abf0 <File::open(FileOpenMode)>
c000fe45:	83 c4 10             	add    esp,0x10
c000fe48:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fe50:	83 ec 0c             	sub    esp,0xc
c000fe53:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fe55:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fe59:	51                   	push   ecx
c000fe5a:	8d 54 24 23          	lea    edx,[esp+0x23]
c000fe5e:	52                   	push   edx
c000fe5f:	6a 00                	push   0x0
c000fe61:	6a 01                	push   0x1
c000fe63:	53                   	push   ebx
c000fe64:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fe67:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000fe6b:	83 c4 20             	add    esp,0x20
c000fe6e:	3c 0d                	cmp    al,0xd
c000fe70:	0f 84 09 01 00 00    	je     c000ff7f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fe76:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fe7b:	0f 84 ef 00 00 00    	je     c000ff70 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fe81:	3c 0a                	cmp    al,0xa
c000fe83:	74 13                	je     c000fe98 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fe85:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fe8a:	74 0c                	je     c000fe98 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fe8c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000fe92:	0f 8e d8 00 00 00    	jle    c000ff70 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fe98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fe9c:	83 ec 0c             	sub    esp,0xc
c000fe9f:	8d 78 01             	lea    edi,[eax+0x1]
c000fea2:	57                   	push   edi
c000fea3:	e8 79 79 ff ff       	call   c0007821 <malloc>
c000fea8:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000feac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000feb0:	8d 56 04             	lea    edx,[esi+0x4]
c000feb3:	89 14 24             	mov    DWORD PTR [esp],edx
c000feb6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000feba:	e8 62 79 ff ff       	call   c0007821 <malloc>
c000febf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000fec3:	83 c4 0c             	add    esp,0xc
c000fec6:	57                   	push   edi
c000fec7:	6a 00                	push   0x0
c000fec9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fecd:	e8 fe 05 ff ff       	call   c00004d0 <memset>
c000fed2:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fed6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000feda:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000fede:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fee0:	83 c4 0c             	add    esp,0xc
c000fee3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fee7:	52                   	push   edx
c000fee8:	6a 00                	push   0x0
c000feea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000feee:	e8 dd 05 ff ff       	call   c00004d0 <memset>
c000fef3:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fef7:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000fefb:	89 34 24             	mov    DWORD PTR [esp],esi
c000fefe:	e8 3d 06 ff ff       	call   c0000540 <strlen>
c000ff03:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000ff07:	89 c1                	mov    ecx,eax
c000ff09:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff0b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ff0e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ff11:	40                   	inc    eax
c000ff12:	83 c4 10             	add    esp,0x10
c000ff15:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ff18:	85 d2                	test   edx,edx
c000ff1a:	75 0c                	jne    c000ff28 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000ff1c:	83 ec 0c             	sub    esp,0xc
c000ff1f:	6a 08                	push   0x8
c000ff21:	e8 fb 78 ff ff       	call   c0007821 <malloc>
c000ff26:	eb 0c                	jmp    c000ff34 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000ff28:	c1 e0 03             	shl    eax,0x3
c000ff2b:	51                   	push   ecx
c000ff2c:	51                   	push   ecx
c000ff2d:	50                   	push   eax
c000ff2e:	52                   	push   edx
c000ff2f:	e8 d9 78 ff ff       	call   c000780d <realloc>
c000ff34:	83 c4 10             	add    esp,0x10
c000ff37:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000ff3a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000ff3d:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000ff40:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ff44:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000ff48:	b9 08 00 00 00       	mov    ecx,0x8
c000ff4d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff4f:	31 f6                	xor    esi,esi
c000ff51:	50                   	push   eax
c000ff52:	68 00 01 00 00       	push   0x100
c000ff57:	6a 00                	push   0x0
c000ff59:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000ff5d:	50                   	push   eax
c000ff5e:	e8 6d 05 ff ff       	call   c00004d0 <memset>
c000ff63:	83 c4 10             	add    esp,0x10
c000ff66:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ff6e:	eb 0f                	jmp    c000ff7f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000ff70:	3c 3d                	cmp    al,0x3d
c000ff72:	74 07                	je     c000ff7b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000ff74:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000ff78:	46                   	inc    esi
c000ff79:	eb 04                	jmp    c000ff7f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000ff7b:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000ff7f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ff84:	0f 85 c6 fe ff ff    	jne    c000fe50 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000ff8a:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ff90:	5b                   	pop    ebx
c000ff91:	5e                   	pop    esi
c000ff92:	5f                   	pop    edi
c000ff93:	5d                   	pop    ebp
c000ff94:	c3                   	ret    
c000ff95:	90                   	nop

c000ff96 <EnvVarContainer::__loadSystem()>:
c000ff96:	83 ec 10             	sub    esp,0x10
c000ff99:	68 20 01 02 c0       	push   0xc0020120
c000ff9e:	68 44 ee 01 c0       	push   0xc001ee44
c000ffa3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffa7:	e8 04 fe ff ff       	call   c000fdb0 <EnvVarContainer::loadFrom(char const*, char const*)>
c000ffac:	83 c4 1c             	add    esp,0x1c
c000ffaf:	c3                   	ret    

c000ffb0 <EnvVarContainer::__loadUser()>:
c000ffb0:	c3                   	ret    
c000ffb1:	90                   	nop

c000ffb2 <EnvVarContainer::EnvVarContainer(Process*)>:
c000ffb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffb6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ffbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ffc4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ffc7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffcb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ffd2:	90                   	nop
c000ffd3:	c3                   	ret    

c000ffd4 <EnvVarContainer::~EnvVarContainer()>:
c000ffd4:	83 ec 0c             	sub    esp,0xc
c000ffd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffdb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ffde:	85 c0                	test   eax,eax
c000ffe0:	74 1d                	je     c000ffff <EnvVarContainer::~EnvVarContainer()+0x2b>
c000ffe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe6:	8b 00                	mov    eax,DWORD PTR [eax]
c000ffe8:	85 c0                	test   eax,eax
c000ffea:	74 13                	je     c000ffff <EnvVarContainer::~EnvVarContainer()+0x2b>
c000ffec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fff0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fff3:	83 ec 0c             	sub    esp,0xc
c000fff6:	50                   	push   eax
c000fff7:	e8 35 78 ff ff       	call   c0007831 <free>
c000fffc:	83 c4 10             	add    esp,0x10
c000ffff:	90                   	nop
c0010000:	83 c4 0c             	add    esp,0xc
c0010003:	c3                   	ret    

c0010004 <Krnl::getEnv(Process*, char const*)>:
c0010004:	53                   	push   ebx
c0010005:	83 ec 08             	sub    esp,0x8
c0010008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001000c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010010:	39 05 90 61 02 c0    	cmp    DWORD PTR ds:0xc0026190,eax
c0010016:	74 04                	je     c001001c <Krnl::getEnv(Process*, char const*)+0x18>
c0010018:	85 c0                	test   eax,eax
c001001a:	75 0b                	jne    c0010027 <Krnl::getEnv(Process*, char const*)+0x23>
c001001c:	a1 30 59 02 c0       	mov    eax,ds:0xc0025930
c0010021:	85 c0                	test   eax,eax
c0010023:	75 19                	jne    c001003e <Krnl::getEnv(Process*, char const*)+0x3a>
c0010025:	eb 27                	jmp    c001004e <Krnl::getEnv(Process*, char const*)+0x4a>
c0010027:	52                   	push   edx
c0010028:	52                   	push   edx
c0010029:	53                   	push   ebx
c001002a:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010030:	e8 79 fc ff ff       	call   c000fcae <EnvVarContainer::getEnv(char const*)>
c0010035:	83 c4 10             	add    esp,0x10
c0010038:	85 c0                	test   eax,eax
c001003a:	75 28                	jne    c0010064 <Krnl::getEnv(Process*, char const*)+0x60>
c001003c:	eb de                	jmp    c001001c <Krnl::getEnv(Process*, char const*)+0x18>
c001003e:	52                   	push   edx
c001003f:	52                   	push   edx
c0010040:	53                   	push   ebx
c0010041:	50                   	push   eax
c0010042:	e8 67 fc ff ff       	call   c000fcae <EnvVarContainer::getEnv(char const*)>
c0010047:	83 c4 10             	add    esp,0x10
c001004a:	85 c0                	test   eax,eax
c001004c:	75 16                	jne    c0010064 <Krnl::getEnv(Process*, char const*)+0x60>
c001004e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010052:	a1 34 59 02 c0       	mov    eax,ds:0xc0025934
c0010057:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001005b:	83 c4 08             	add    esp,0x8
c001005e:	5b                   	pop    ebx
c001005f:	e9 4a fc ff ff       	jmp    c000fcae <EnvVarContainer::getEnv(char const*)>
c0010064:	83 c4 08             	add    esp,0x8
c0010067:	5b                   	pop    ebx
c0010068:	c3                   	ret    

c0010069 <Krnl::setEnvSystem(char const*, char const*)>:
c0010069:	83 ec 10             	sub    esp,0x10
c001006c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010070:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010074:	ff 35 34 59 02 c0    	push   DWORD PTR ds:0xc0025934
c001007a:	e8 6d fc ff ff       	call   c000fcec <EnvVarContainer::setEnv(char const*, char const*)>
c001007f:	83 c4 1c             	add    esp,0x1c
c0010082:	c3                   	ret    

c0010083 <Krnl::setEnvUser(char const*, char const*)>:
c0010083:	a1 30 59 02 c0       	mov    eax,ds:0xc0025930
c0010088:	85 c0                	test   eax,eax
c001008a:	74 15                	je     c00100a1 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001008c:	83 ec 10             	sub    esp,0x10
c001008f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010093:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010097:	50                   	push   eax
c0010098:	e8 4f fc ff ff       	call   c000fcec <EnvVarContainer::setEnv(char const*, char const*)>
c001009d:	83 c4 1c             	add    esp,0x1c
c00100a0:	c3                   	ret    
c00100a1:	c3                   	ret    

c00100a2 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00100a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100a6:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00100ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00100b0:	e9 37 fc ff ff       	jmp    c000fcec <EnvVarContainer::setEnv(char const*, char const*)>

c00100b5 <Krnl::deleteEnvSystem(char const*)>:
c00100b5:	c3                   	ret    

c00100b6 <Krnl::deleteEnvUser(char const*)>:
c00100b6:	c3                   	ret    

c00100b7 <Krnl::deleteEnvProcess(Process*, char const*)>:
c00100b7:	c3                   	ret    

c00100b8 <Krnl::newProcessEnv(Process*)>:
c00100b8:	83 ec 28             	sub    esp,0x28
c00100bb:	6a 0c                	push   0xc
c00100bd:	e8 5f 77 ff ff       	call   c0007821 <malloc>
c00100c2:	5a                   	pop    edx
c00100c3:	59                   	pop    ecx
c00100c4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00100c8:	50                   	push   eax
c00100c9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00100cd:	e8 e0 fe ff ff       	call   c000ffb2 <EnvVarContainer::EnvVarContainer(Process*)>
c00100d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100d6:	83 c4 2c             	add    esp,0x2c
c00100d9:	c3                   	ret    

c00100da <Krnl::copyProcessEnv(Process*, Process*)>:
c00100da:	57                   	push   edi
c00100db:	56                   	push   esi
c00100dc:	53                   	push   ebx
c00100dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100e1:	83 ec 0c             	sub    esp,0xc
c00100e4:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00100ea:	6a 0c                	push   0xc
c00100ec:	e8 30 77 ff ff       	call   c0007821 <malloc>
c00100f1:	89 c3                	mov    ebx,eax
c00100f3:	58                   	pop    eax
c00100f4:	5a                   	pop    edx
c00100f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100f9:	53                   	push   ebx
c00100fa:	e8 b3 fe ff ff       	call   c000ffb2 <EnvVarContainer::EnvVarContainer(Process*)>
c00100ff:	8b 07                	mov    eax,DWORD PTR [edi]
c0010101:	89 03                	mov    DWORD PTR [ebx],eax
c0010103:	c1 e0 03             	shl    eax,0x3
c0010106:	89 04 24             	mov    DWORD PTR [esp],eax
c0010109:	e8 13 77 ff ff       	call   c0007821 <malloc>
c001010e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010111:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0010113:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0010116:	c1 e1 03             	shl    ecx,0x3
c0010119:	89 c7                	mov    edi,eax
c001011b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001011d:	83 c4 10             	add    esp,0x10
c0010120:	89 d8                	mov    eax,ebx
c0010122:	5b                   	pop    ebx
c0010123:	5e                   	pop    esi
c0010124:	5f                   	pop    edi
c0010125:	c3                   	ret    

c0010126 <Krnl::loadSystemEnv()>:
c0010126:	53                   	push   ebx
c0010127:	83 ec 14             	sub    esp,0x14
c001012a:	6a 0c                	push   0xc
c001012c:	e8 f0 76 ff ff       	call   c0007821 <malloc>
c0010131:	89 c3                	mov    ebx,eax
c0010133:	58                   	pop    eax
c0010134:	5a                   	pop    edx
c0010135:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c001013b:	53                   	push   ebx
c001013c:	e8 71 fe ff ff       	call   c000ffb2 <EnvVarContainer::EnvVarContainer(Process*)>
c0010141:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010144:	89 1d 34 59 02 c0    	mov    DWORD PTR ds:0xc0025934,ebx
c001014a:	e8 47 fe ff ff       	call   c000ff96 <EnvVarContainer::__loadSystem()>
c001014f:	83 c4 18             	add    esp,0x18
c0010152:	5b                   	pop    ebx
c0010153:	c3                   	ret    

c0010154 <Krnl::loadUserEnv()>:
c0010154:	53                   	push   ebx
c0010155:	83 ec 14             	sub    esp,0x14
c0010158:	6a 0c                	push   0xc
c001015a:	e8 c2 76 ff ff       	call   c0007821 <malloc>
c001015f:	89 c3                	mov    ebx,eax
c0010161:	58                   	pop    eax
c0010162:	5a                   	pop    edx
c0010163:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c0010169:	53                   	push   ebx
c001016a:	e8 43 fe ff ff       	call   c000ffb2 <EnvVarContainer::EnvVarContainer(Process*)>
c001016f:	89 1d 30 59 02 c0    	mov    DWORD PTR ds:0xc0025930,ebx
c0010175:	83 c4 18             	add    esp,0x18
c0010178:	5b                   	pop    ebx
c0010179:	c3                   	ret    

c001017a <Krnl::flushEnv()>:
c001017a:	c3                   	ret    

c001017b <Krnl::getProcessTotalEnvCount(Process*)>:
c001017b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001017f:	8b 15 30 59 02 c0    	mov    edx,DWORD PTR ds:0xc0025930
c0010185:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001018b:	a1 34 59 02 c0       	mov    eax,ds:0xc0025934
c0010190:	8b 00                	mov    eax,DWORD PTR [eax]
c0010192:	03 01                	add    eax,DWORD PTR [ecx]
c0010194:	85 d2                	test   edx,edx
c0010196:	74 02                	je     c001019a <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0010198:	03 02                	add    eax,DWORD PTR [edx]
c001019a:	c3                   	ret    

c001019b <Krnl::getProcessEnvPair(Process*, int)>:
c001019b:	57                   	push   edi
c001019c:	56                   	push   esi
c001019d:	8b 35 30 59 02 c0    	mov    esi,DWORD PTR ds:0xc0025930
c00101a3:	53                   	push   ebx
c00101a4:	85 f6                	test   esi,esi
c00101a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00101ae:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00101b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00101b8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00101ba:	75 16                	jne    c00101d2 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c00101bc:	39 c2                	cmp    edx,eax
c00101be:	7c 16                	jl     c00101d6 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00101c0:	8b 0d 34 59 02 c0    	mov    ecx,DWORD PTR ds:0xc0025934
c00101c6:	8b 31                	mov    esi,DWORD PTR [ecx]
c00101c8:	01 c6                	add    esi,eax
c00101ca:	39 d6                	cmp    esi,edx
c00101cc:	7e 3c                	jle    c001020a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00101ce:	29 c2                	sub    edx,eax
c00101d0:	eb 04                	jmp    c00101d6 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00101d2:	39 c2                	cmp    edx,eax
c00101d4:	7d 05                	jge    c00101db <Krnl::getProcessEnvPair(Process*, int)+0x40>
c00101d6:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00101d9:	eb 20                	jmp    c00101fb <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00101db:	8b 3e                	mov    edi,DWORD PTR [esi]
c00101dd:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00101e0:	39 d1                	cmp    ecx,edx
c00101e2:	7e 04                	jle    c00101e8 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00101e4:	29 c2                	sub    edx,eax
c00101e6:	eb 10                	jmp    c00101f8 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00101e8:	8b 35 34 59 02 c0    	mov    esi,DWORD PTR ds:0xc0025934
c00101ee:	03 0e                	add    ecx,DWORD PTR [esi]
c00101f0:	39 d1                	cmp    ecx,edx
c00101f2:	7e 16                	jle    c001020a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00101f4:	29 c2                	sub    edx,eax
c00101f6:	29 fa                	sub    edx,edi
c00101f8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00101fb:	8d 14 d0             	lea    edx,[eax+edx*8]
c00101fe:	8b 02                	mov    eax,DWORD PTR [edx]
c0010200:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010203:	89 03                	mov    DWORD PTR [ebx],eax
c0010205:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0010208:	eb 1d                	jmp    c0010227 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001020a:	83 ec 0c             	sub    esp,0xc
c001020d:	68 66 ee 01 c0       	push   0xc001ee66
c0010212:	e8 ac 00 00 00       	call   c00102c3 <KePanic(char const*)>
c0010217:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001021d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010224:	83 c4 10             	add    esp,0x10
c0010227:	89 d8                	mov    eax,ebx
c0010229:	5b                   	pop    ebx
c001022a:	5e                   	pop    esi
c001022b:	5f                   	pop    edi
c001022c:	c2 04 00             	ret    0x4

c001022f <CPU::current()>:
c001022f:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0010234:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001023a:	c3                   	ret    

c001023b <operator new(unsigned long)>:
c001023b:	e9 e1 75 ff ff       	jmp    c0007821 <malloc>

c0010240 <operator delete(void*)>:
c0010240:	e9 fc 75 ff ff       	jmp    c0007841 <rfree>

c0010245 <disableIRQs()>:
c0010245:	fa                   	cli    
c0010246:	c3                   	ret    

c0010247 <enableIRQs()>:
c0010247:	fb                   	sti    
c0010248:	c3                   	ret    

c0010249 <lockScheduler()>:
c0010249:	fa                   	cli    
c001024a:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0010250:	c3                   	ret    

c0010251 <unlockScheduler()>:
c0010251:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0010256:	48                   	dec    eax
c0010257:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001025c:	75 01                	jne    c001025f <unlockScheduler()+0xe>
c001025e:	fb                   	sti    
c001025f:	c3                   	ret    

c0010260 <lockStuff()>:
c0010260:	fa                   	cli    
c0010261:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0010267:	ff 05 64 61 02 c0    	inc    DWORD PTR ds:0xc0026164
c001026d:	c3                   	ret    

c001026e <unlockStuff()>:
c001026e:	83 ec 0c             	sub    esp,0xc
c0010271:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c0010276:	48                   	dec    eax
c0010277:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c001027c:	75 18                	jne    c0010296 <unlockStuff()+0x28>
c001027e:	83 3d 60 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026160,0x0
c0010285:	74 0f                	je     c0010296 <unlockStuff()+0x28>
c0010287:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c0010291:	e8 4a 35 00 00       	call   c00137e0 <schedule()>
c0010296:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001029b:	48                   	dec    eax
c001029c:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00102a1:	75 01                	jne    c00102a4 <unlockStuff()+0x36>
c00102a3:	fb                   	sti    
c00102a4:	83 c4 0c             	add    esp,0xc
c00102a7:	c3                   	ret    

c00102a8 <Virt::getAKernelVAS()>:
c00102a8:	a1 b0 2f 02 c0       	mov    eax,ds:0xc0022fb0
c00102ad:	c3                   	ret    

c00102ae <__not_memcpy>:
c00102ae:	57                   	push   edi
c00102af:	56                   	push   esi
c00102b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00102b4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00102b8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00102bc:	89 c7                	mov    edi,eax
c00102be:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102c0:	5e                   	pop    esi
c00102c1:	5f                   	pop    edi
c00102c2:	c3                   	ret    

c00102c3 <KePanic(char const*)>:
c00102c3:	c6 05 38 59 02 c0 01 	mov    BYTE PTR ds:0xc0025938,0x1
c00102ca:	e9 09 53 00 00       	jmp    c00155d8 <HalPanic(char const*)>

c00102cf <Krnl::powerThread(void*)>:
c00102cf:	83 ec 0c             	sub    esp,0xc
c00102d2:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00102d7:	48                   	dec    eax
c00102d8:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00102dd:	75 01                	jne    c00102e0 <Krnl::powerThread(void*)+0x11>
c00102df:	fb                   	sti    
c00102e0:	83 ec 0c             	sub    esp,0xc
c00102e3:	c6 05 40 59 02 c0 00 	mov    BYTE PTR ds:0xc0025940,0x0
c00102ea:	6a 0a                	push   0xa
c00102ec:	e8 ff 37 00 00       	call   c0013af0 <sleep(unsigned int)>
c00102f1:	83 05 84 59 02 c0 0a 	add    DWORD PTR ds:0xc0025984,0xa
c00102f8:	83 c4 10             	add    esp,0x10
c00102fb:	eb e3                	jmp    c00102e0 <Krnl::powerThread(void*)+0x11>

c00102fd <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c00102fd:	57                   	push   edi
c00102fe:	b9 09 00 00 00       	mov    ecx,0x9
c0010303:	56                   	push   esi
c0010304:	bf 60 59 02 c0       	mov    edi,0xc0025960
c0010309:	fc                   	cld    
c001030a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001030e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010310:	5e                   	pop    esi
c0010311:	5f                   	pop    edi
c0010312:	c3                   	ret    

c0010313 <Krnl::userIOReceived()>:
c0010313:	c7 05 84 59 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025984,0x0
c001031d:	c3                   	ret    

c001031e <Krnl::handlePowerButton()>:
c001031e:	83 ec 0c             	sub    esp,0xc
c0010321:	a1 60 59 02 c0       	mov    eax,ds:0xc0025960
c0010326:	83 f8 02             	cmp    eax,0x2
c0010329:	75 10                	jne    c001033b <Krnl::handlePowerButton()+0x1d>
c001032b:	83 ec 0c             	sub    esp,0xc
c001032e:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0010334:	e8 83 6b ff ff       	call   c0006ebc <Computer::shutdown()>
c0010339:	eb 11                	jmp    c001034c <Krnl::handlePowerButton()+0x2e>
c001033b:	48                   	dec    eax
c001033c:	75 11                	jne    c001034f <Krnl::handlePowerButton()+0x31>
c001033e:	83 ec 0c             	sub    esp,0xc
c0010341:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0010347:	e8 a0 6b ff ff       	call   c0006eec <Computer::sleep()>
c001034c:	83 c4 10             	add    esp,0x10
c001034f:	83 c4 0c             	add    esp,0xc
c0010352:	c3                   	ret    

c0010353 <Krnl::handleSleepButton()>:
c0010353:	83 ec 0c             	sub    esp,0xc
c0010356:	a1 64 59 02 c0       	mov    eax,ds:0xc0025964
c001035b:	83 f8 02             	cmp    eax,0x2
c001035e:	75 10                	jne    c0010370 <Krnl::handleSleepButton()+0x1d>
c0010360:	83 ec 0c             	sub    esp,0xc
c0010363:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0010369:	e8 4e 6b ff ff       	call   c0006ebc <Computer::shutdown()>
c001036e:	eb 11                	jmp    c0010381 <Krnl::handleSleepButton()+0x2e>
c0010370:	48                   	dec    eax
c0010371:	75 11                	jne    c0010384 <Krnl::handleSleepButton()+0x31>
c0010373:	83 ec 0c             	sub    esp,0xc
c0010376:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c001037c:	e8 6b 6b ff ff       	call   c0006eec <Computer::sleep()>
c0010381:	83 c4 10             	add    esp,0x10
c0010384:	83 c4 0c             	add    esp,0xc
c0010387:	c3                   	ret    

c0010388 <Krnl::setupPowerManager()>:
c0010388:	83 ec 0c             	sub    esp,0xc
c001038b:	c7 05 84 59 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025984,0x0
c0010395:	68 f0 00 00 00       	push   0xf0
c001039a:	c6 05 40 59 02 c0 00 	mov    BYTE PTR ds:0xc0025940,0x0
c00103a1:	6a 00                	push   0x0
c00103a3:	68 cf 02 01 c0       	push   0xc00102cf
c00103a8:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c00103ae:	e8 0d 32 00 00       	call   c00135c0 <Process::createThread(void (*)(void*), void*, int)>
c00103b3:	c7 05 60 59 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0025960,0x2
c00103bd:	c7 05 64 59 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025964,0x1
c00103c7:	c7 05 68 59 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0025968,0x3
c00103d1:	c7 05 6c 59 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002596c,0x0
c00103db:	c7 05 78 59 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025978,0x0
c00103e5:	c7 05 70 59 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025970,0x0
c00103ef:	c7 05 7c 59 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002597c,0x0
c00103f9:	c7 05 74 59 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0025974,0x3c
c0010403:	c7 05 80 59 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0025980,0x3c
c001040d:	83 c4 1c             	add    esp,0x1c
c0010410:	c3                   	ret    
c0010411:	66 90                	xchg   ax,ax
c0010413:	90                   	nop

c0010414 <KeResolveCompatibilitySymbol(char*)>:
c0010414:	83 ec 0c             	sub    esp,0xc
c0010417:	83 ec 08             	sub    esp,0x8
c001041a:	68 80 ee 01 c0       	push   0xc001ee80
c001041f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010423:	e8 b8 02 ff ff       	call   c00006e0 <strcmp>
c0010428:	83 c4 10             	add    esp,0x10
c001042b:	85 c0                	test   eax,eax
c001042d:	0f 94 c0             	sete   al
c0010430:	84 c0                	test   al,al
c0010432:	74 0c                	je     c0010440 <KeResolveCompatibilitySymbol(char*)+0x2c>
c0010434:	b8 b8 2e 02 c0       	mov    eax,0xc0022eb8
c0010439:	e9 62 01 00 00       	jmp    c00105a0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001043e:	66 90                	xchg   ax,ax
c0010440:	83 ec 08             	sub    esp,0x8
c0010443:	68 89 ee 01 c0       	push   0xc001ee89
c0010448:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001044c:	e8 8f 02 ff ff       	call   c00006e0 <strcmp>
c0010451:	83 c4 10             	add    esp,0x10
c0010454:	85 c0                	test   eax,eax
c0010456:	0f 94 c0             	sete   al
c0010459:	84 c0                	test   al,al
c001045b:	74 0b                	je     c0010468 <KeResolveCompatibilitySymbol(char*)+0x54>
c001045d:	b8 20 c9 01 c0       	mov    eax,0xc001c920
c0010462:	e9 39 01 00 00       	jmp    c00105a0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010467:	90                   	nop
c0010468:	83 ec 08             	sub    esp,0x8
c001046b:	68 93 ee 01 c0       	push   0xc001ee93
c0010470:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010474:	e8 67 02 ff ff       	call   c00006e0 <strcmp>
c0010479:	83 c4 10             	add    esp,0x10
c001047c:	85 c0                	test   eax,eax
c001047e:	0f 94 c0             	sete   al
c0010481:	84 c0                	test   al,al
c0010483:	74 0b                	je     c0010490 <KeResolveCompatibilitySymbol(char*)+0x7c>
c0010485:	b8 54 c6 01 c0       	mov    eax,0xc001c654
c001048a:	e9 11 01 00 00       	jmp    c00105a0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001048f:	90                   	nop
c0010490:	83 ec 08             	sub    esp,0x8
c0010493:	68 9c ee 01 c0       	push   0xc001ee9c
c0010498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001049c:	e8 3f 02 ff ff       	call   c00006e0 <strcmp>
c00104a1:	83 c4 10             	add    esp,0x10
c00104a4:	85 c0                	test   eax,eax
c00104a6:	0f 94 c0             	sete   al
c00104a9:	84 c0                	test   al,al
c00104ab:	74 0b                	je     c00104b8 <KeResolveCompatibilitySymbol(char*)+0xa4>
c00104ad:	b8 c3 02 01 c0       	mov    eax,0xc00102c3
c00104b2:	e9 e9 00 00 00       	jmp    c00105a0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00104b7:	90                   	nop
c00104b8:	83 ec 08             	sub    esp,0x8
c00104bb:	68 af ee 01 c0       	push   0xc001eeaf
c00104c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104c4:	e8 17 02 ff ff       	call   c00006e0 <strcmp>
c00104c9:	83 c4 10             	add    esp,0x10
c00104cc:	85 c0                	test   eax,eax
c00104ce:	0f 94 c0             	sete   al
c00104d1:	84 c0                	test   al,al
c00104d3:	74 0b                	je     c00104e0 <KeResolveCompatibilitySymbol(char*)+0xcc>
c00104d5:	b8 4b fc 00 c0       	mov    eax,0xc000fc4b
c00104da:	e9 c1 00 00 00       	jmp    c00105a0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00104df:	90                   	nop
c00104e0:	83 ec 08             	sub    esp,0x8
c00104e3:	68 cc ee 01 c0       	push   0xc001eecc
c00104e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104ec:	e8 ef 01 ff ff       	call   c00006e0 <strcmp>
c00104f1:	83 c4 10             	add    esp,0x10
c00104f4:	85 c0                	test   eax,eax
c00104f6:	0f 94 c0             	sete   al
c00104f9:	84 c0                	test   al,al
c00104fb:	74 0b                	je     c0010508 <KeResolveCompatibilitySymbol(char*)+0xf4>
c00104fd:	b8 20 ca 01 c0       	mov    eax,0xc001ca20
c0010502:	e9 99 00 00 00       	jmp    c00105a0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010507:	90                   	nop
c0010508:	83 ec 08             	sub    esp,0x8
c001050b:	68 d6 ee 01 c0       	push   0xc001eed6
c0010510:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010514:	e8 c7 01 ff ff       	call   c00006e0 <strcmp>
c0010519:	83 c4 10             	add    esp,0x10
c001051c:	85 c0                	test   eax,eax
c001051e:	0f 94 c0             	sete   al
c0010521:	84 c0                	test   al,al
c0010523:	74 07                	je     c001052c <KeResolveCompatibilitySymbol(char*)+0x118>
c0010525:	b8 a0 c7 01 c0       	mov    eax,0xc001c7a0
c001052a:	eb 74                	jmp    c00105a0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001052c:	83 ec 08             	sub    esp,0x8
c001052f:	68 df ee 01 c0       	push   0xc001eedf
c0010534:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010538:	e8 a3 01 ff ff       	call   c00006e0 <strcmp>
c001053d:	83 c4 10             	add    esp,0x10
c0010540:	85 c0                	test   eax,eax
c0010542:	0f 94 c0             	sete   al
c0010545:	84 c0                	test   al,al
c0010547:	74 07                	je     c0010550 <KeResolveCompatibilitySymbol(char*)+0x13c>
c0010549:	b8 bc 2e 02 c0       	mov    eax,0xc0022ebc
c001054e:	eb 50                	jmp    c00105a0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010550:	83 ec 08             	sub    esp,0x8
c0010553:	68 f7 ee 01 c0       	push   0xc001eef7
c0010558:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001055c:	e8 7f 01 ff ff       	call   c00006e0 <strcmp>
c0010561:	83 c4 10             	add    esp,0x10
c0010564:	85 c0                	test   eax,eax
c0010566:	0f 94 c0             	sete   al
c0010569:	84 c0                	test   al,al
c001056b:	74 07                	je     c0010574 <KeResolveCompatibilitySymbol(char*)+0x160>
c001056d:	b8 bc 2e 02 c0       	mov    eax,0xc0022ebc
c0010572:	eb 2c                	jmp    c00105a0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010574:	83 ec 08             	sub    esp,0x8
c0010577:	68 04 ef 01 c0       	push   0xc001ef04
c001057c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010580:	e8 5b 01 ff ff       	call   c00006e0 <strcmp>
c0010585:	83 c4 10             	add    esp,0x10
c0010588:	85 c0                	test   eax,eax
c001058a:	0f 94 c0             	sete   al
c001058d:	84 c0                	test   al,al
c001058f:	74 07                	je     c0010598 <KeResolveCompatibilitySymbol(char*)+0x184>
c0010591:	b8 bd 2e 02 c0       	mov    eax,0xc0022ebd
c0010596:	eb 08                	jmp    c00105a0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010598:	b8 00 00 00 00       	mov    eax,0x0
c001059d:	8d 76 00             	lea    esi,[esi+0x0]
c00105a0:	83 c4 0c             	add    esp,0xc
c00105a3:	c3                   	ret    

c00105a4 <KiSigKill(int)>:
c00105a4:	57                   	push   edi
c00105a5:	b9 0a 00 00 00       	mov    ecx,0xa
c00105aa:	56                   	push   esi
c00105ab:	be 4d ef 01 c0       	mov    esi,0xc001ef4d
c00105b0:	83 ec 14             	sub    esp,0x14
c00105b3:	8d 7c 24 06          	lea    edi,[esp+0x6]
c00105b7:	fc                   	cld    
c00105b8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105ba:	8d 44 24 06          	lea    eax,[esp+0x6]
c00105be:	50                   	push   eax
c00105bf:	6a 00                	push   0x0
c00105c1:	6a 00                	push   0x0
c00105c3:	6a 27                	push   0x27
c00105c5:	e8 88 0a 01 00       	call   c0021052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00105ca:	83 c4 24             	add    esp,0x24
c00105cd:	5e                   	pop    esi
c00105ce:	5f                   	pop    edi
c00105cf:	c3                   	ret    

c00105d0 <KiDefaultSignalHandlerIgnore(int)>:
c00105d0:	c3                   	ret    

c00105d1 <KiDefaultSignalHandlerPause(int)>:
c00105d1:	57                   	push   edi
c00105d2:	b9 07 00 00 00       	mov    ecx,0x7
c00105d7:	56                   	push   esi
c00105d8:	be 57 ef 01 c0       	mov    esi,0xc001ef57
c00105dd:	83 ec 24             	sub    esp,0x24
c00105e0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00105e4:	fc                   	cld    
c00105e5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00105e7:	8d 44 24 04          	lea    eax,[esp+0x4]
c00105eb:	50                   	push   eax
c00105ec:	6a 00                	push   0x0
c00105ee:	6a 00                	push   0x0
c00105f0:	6a 27                	push   0x27
c00105f2:	e8 5b 0a 01 00       	call   c0021052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00105f7:	83 c4 34             	add    esp,0x34
c00105fa:	5e                   	pop    esi
c00105fb:	5f                   	pop    edi
c00105fc:	c3                   	ret    

c00105fd <KiDefaultSignalHandlerResume(int)>:
c00105fd:	57                   	push   edi
c00105fe:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010603:	56                   	push   esi
c0010604:	be 73 ef 01 c0       	mov    esi,0xc001ef73
c0010609:	83 ec 24             	sub    esp,0x24
c001060c:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010610:	fc                   	cld    
c0010611:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010613:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010617:	50                   	push   eax
c0010618:	6a 00                	push   0x0
c001061a:	6a 00                	push   0x0
c001061c:	6a 27                	push   0x27
c001061e:	e8 2f 0a 01 00       	call   c0021052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010623:	83 c4 34             	add    esp,0x34
c0010626:	5e                   	pop    esi
c0010627:	5f                   	pop    edi
c0010628:	c3                   	ret    

c0010629 <KeDeinitSignals(SigHandlerBlock*)>:
c0010629:	e9 03 72 ff ff       	jmp    c0007831 <free>

c001062e <KeInitSignals()>:
c001062e:	53                   	push   ebx
c001062f:	83 ec 14             	sub    esp,0x14
c0010632:	68 c8 00 00 00       	push   0xc8
c0010637:	e8 e5 71 ff ff       	call   c0007821 <malloc>
c001063c:	83 c4 0c             	add    esp,0xc
c001063f:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010649:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0010653:	89 c3                	mov    ebx,eax
c0010655:	6a 20                	push   0x20
c0010657:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c001065d:	6a 00                	push   0x0
c001065f:	50                   	push   eax
c0010660:	e8 6b fe fe ff       	call   c00004d0 <memset>
c0010665:	83 c4 0c             	add    esp,0xc
c0010668:	6a 44                	push   0x44
c001066a:	6a 00                	push   0x0
c001066c:	53                   	push   ebx
c001066d:	e8 5e fe fe ff       	call   c00004d0 <memset>
c0010672:	89 d8                	mov    eax,ebx
c0010674:	83 c4 18             	add    esp,0x18
c0010677:	5b                   	pop    ebx
c0010678:	c3                   	ret    

c0010679 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010679:	53                   	push   ebx
c001067a:	b8 01 00 00 00       	mov    eax,0x1
c001067f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010683:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010687:	83 f9 10             	cmp    ecx,0x10
c001068a:	7f 21                	jg     c00106ad <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c001068c:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c001068f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010693:	89 03                	mov    DWORD PTR [ebx],eax
c0010695:	b8 01 00 00 00       	mov    eax,0x1
c001069a:	d3 e0                	shl    eax,cl
c001069c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00106a0:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00106a3:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c00106ab:	31 c0                	xor    eax,eax
c00106ad:	5b                   	pop    ebx
c00106ae:	c3                   	ret    

c00106af <KeRaiseSignal(SigHandlerBlock*, int)>:
c00106af:	55                   	push   ebp
c00106b0:	57                   	push   edi
c00106b1:	bf 08 00 00 00       	mov    edi,0x8
c00106b6:	56                   	push   esi
c00106b7:	53                   	push   ebx
c00106b8:	83 ec 18             	sub    esp,0x18
c00106bb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00106bf:	68 90 ef 01 c0       	push   0xc001ef90
c00106c4:	e8 f1 9e ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c00106c9:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00106d0:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c00106d6:	83 c4 10             	add    esp,0x10
c00106d9:	31 c9                	xor    ecx,ecx
c00106db:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00106df:	99                   	cdq    
c00106e0:	f7 ff                	idiv   edi
c00106e2:	8d 42 24             	lea    eax,[edx+0x24]
c00106e5:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00106e9:	85 f6                	test   esi,esi
c00106eb:	75 1a                	jne    c0010707 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c00106ed:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00106f1:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c00106f5:	50                   	push   eax
c00106f6:	50                   	push   eax
c00106f7:	52                   	push   edx
c00106f8:	68 a1 ef 01 c0       	push   0xc001efa1
c00106fd:	e8 b8 9e ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0010702:	83 c4 10             	add    esp,0x10
c0010705:	eb 1b                	jmp    c0010722 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0010707:	41                   	inc    ecx
c0010708:	83 f9 08             	cmp    ecx,0x8
c001070b:	75 ce                	jne    c00106db <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c001070d:	83 ec 0c             	sub    esp,0xc
c0010710:	be 01 00 00 00       	mov    esi,0x1
c0010715:	68 c2 ef 01 c0       	push   0xc001efc2
c001071a:	e8 9b 9e ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c001071f:	83 c4 10             	add    esp,0x10
c0010722:	83 c4 0c             	add    esp,0xc
c0010725:	89 f0                	mov    eax,esi
c0010727:	5b                   	pop    ebx
c0010728:	5e                   	pop    esi
c0010729:	5f                   	pop    edi
c001072a:	5d                   	pop    ebp
c001072b:	c3                   	ret    

c001072c <KeCheckSignal(SigHandlerBlock*)>:
c001072c:	55                   	push   ebp
c001072d:	57                   	push   edi
c001072e:	56                   	push   esi
c001072f:	53                   	push   ebx
c0010730:	51                   	push   ecx
c0010731:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010735:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c001073c:	75 07                	jne    c0010745 <KeCheckSignal(SigHandlerBlock*)+0x19>
c001073e:	31 c0                	xor    eax,eax
c0010740:	e9 cc 00 00 00       	jmp    c0010811 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c0010745:	31 c9                	xor    ecx,ecx
c0010747:	bf 08 00 00 00       	mov    edi,0x8
c001074c:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010752:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010755:	99                   	cdq    
c0010756:	f7 ff                	idiv   edi
c0010758:	8b 94 93 9c 00 00 00 	mov    edx,DWORD PTR [ebx+edx*4+0x9c]
c001075f:	85 d2                	test   edx,edx
c0010761:	0f 84 94 00 00 00    	je     c00107fb <KeCheckSignal(SigHandlerBlock*)+0xcf>
c0010767:	88 d1                	mov    cl,dl
c0010769:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c001076f:	bf 01 00 00 00       	mov    edi,0x1
c0010774:	89 04 24             	mov    DWORD PTR [esp],eax
c0010777:	d3 e7                	shl    edi,cl
c0010779:	bd 01 00 00 00       	mov    ebp,0x1
c001077e:	31 c9                	xor    ecx,ecx
c0010780:	89 e8                	mov    eax,ebp
c0010782:	d3 e0                	shl    eax,cl
c0010784:	85 04 24             	test   DWORD PTR [esp],eax
c0010787:	74 06                	je     c001078f <KeCheckSignal(SigHandlerBlock*)+0x63>
c0010789:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c001078d:	75 af                	jne    c001073e <KeCheckSignal(SigHandlerBlock*)+0x12>
c001078f:	41                   	inc    ecx
c0010790:	83 f9 11             	cmp    ecx,0x11
c0010793:	75 eb                	jne    c0010780 <KeCheckSignal(SigHandlerBlock*)+0x54>
c0010795:	8d 4e 01             	lea    ecx,[esi+0x1]
c0010798:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001079b:	89 8b bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],ecx
c00107a1:	09 f8                	or     eax,edi
c00107a3:	c7 84 b3 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+esi*4+0x9c],0x0
c00107ae:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c00107b4:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00107bb:	31 c0                	xor    eax,eax
c00107bd:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c00107c5:	74 09                	je     c00107d0 <KeCheckSignal(SigHandlerBlock*)+0xa4>
c00107c7:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00107ce:	eb 06                	jmp    c00107d6 <KeCheckSignal(SigHandlerBlock*)+0xaa>
c00107d0:	40                   	inc    eax
c00107d1:	83 f8 08             	cmp    eax,0x8
c00107d4:	75 e7                	jne    c00107bd <KeCheckSignal(SigHandlerBlock*)+0x91>
c00107d6:	8b 04 93             	mov    eax,DWORD PTR [ebx+edx*4]
c00107d9:	83 fa 09             	cmp    edx,0x9
c00107dc:	75 07                	jne    c00107e5 <KeCheckSignal(SigHandlerBlock*)+0xb9>
c00107de:	b8 a4 05 01 c0       	mov    eax,0xc00105a4
c00107e3:	eb 2c                	jmp    c0010811 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c00107e5:	83 f8 01             	cmp    eax,0x1
c00107e8:	0f 84 50 ff ff ff    	je     c001073e <KeCheckSignal(SigHandlerBlock*)+0x12>
c00107ee:	85 c0                	test   eax,eax
c00107f0:	75 1f                	jne    c0010811 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c00107f2:	8b 04 95 80 01 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfe80]
c00107f9:	eb 16                	jmp    c0010811 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c00107fb:	46                   	inc    esi
c00107fc:	41                   	inc    ecx
c00107fd:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010803:	83 f9 08             	cmp    ecx,0x8
c0010806:	0f 85 40 ff ff ff    	jne    c001074c <KeCheckSignal(SigHandlerBlock*)+0x20>
c001080c:	e9 2d ff ff ff       	jmp    c001073e <KeCheckSignal(SigHandlerBlock*)+0x12>
c0010811:	5a                   	pop    edx
c0010812:	5b                   	pop    ebx
c0010813:	5e                   	pop    esi
c0010814:	5f                   	pop    edi
c0010815:	5d                   	pop    ebp
c0010816:	c3                   	ret    

c0010817 <KiCheckSignalZ>:
c0010817:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001081c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001081f:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010825:	e8 02 ff ff ff       	call   c001072c <KeCheckSignal(SigHandlerBlock*)>
c001082a:	5a                   	pop    edx
c001082b:	c3                   	ret    

c001082c <KeCompleteSignal(SigHandlerBlock*, int)>:
c001082c:	56                   	push   esi
c001082d:	53                   	push   ebx
c001082e:	bb 01 00 00 00       	mov    ebx,0x1
c0010833:	52                   	push   edx
c0010834:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010838:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001083c:	d3 e3                	shl    ebx,cl
c001083e:	83 f9 10             	cmp    ecx,0x10
c0010841:	7f 08                	jg     c001084b <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010843:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010849:	75 10                	jne    c001085b <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c001084b:	83 ec 0c             	sub    esp,0xc
c001084e:	68 d3 ef 01 c0       	push   0xc001efd3
c0010853:	e8 6b fa ff ff       	call   c00102c3 <KePanic(char const*)>
c0010858:	83 c4 10             	add    esp,0x10
c001085b:	f7 d3                	not    ebx
c001085d:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010863:	58                   	pop    eax
c0010864:	5b                   	pop    ebx
c0010865:	5e                   	pop    esi
c0010866:	c3                   	ret    

c0010867 <SysSeekDir(regs*)>:
c0010867:	31 c0                	xor    eax,eax
c0010869:	31 d2                	xor    edx,edx
c001086b:	c3                   	ret    

c001086c <SysTellDir(regs*)>:
c001086c:	31 c0                	xor    eax,eax
c001086e:	31 d2                	xor    edx,edx
c0010870:	c3                   	ret    

c0010871 <SysVerify(regs*)>:
c0010871:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010875:	31 d2                	xor    edx,edx
c0010877:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001087a:	c3                   	ret    

c001087b <SysGetArgc(regs*)>:
c001087b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010880:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010883:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010889:	99                   	cdq    
c001088a:	c3                   	ret    

c001088b <SysTTYName(regs*)>:
c001088b:	b8 01 00 00 00       	mov    eax,0x1
c0010890:	31 d2                	xor    edx,edx
c0010892:	c3                   	ret    

c0010893 <SysFormatDisk(regs*)>:
c0010893:	56                   	push   esi
c0010894:	53                   	push   ebx
c0010895:	50                   	push   eax
c0010896:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001089a:	8b 1d b4 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb4
c00108a0:	eb 28                	jmp    c00108ca <SysFormatDisk(regs*)+0x37>
c00108a2:	83 ec 0c             	sub    esp,0xc
c00108a5:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00108a8:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00108ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00108ad:	51                   	push   ecx
c00108ae:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00108b1:	51                   	push   ecx
c00108b2:	50                   	push   eax
c00108b3:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c00108ba:	50                   	push   eax
c00108bb:	53                   	push   ebx
c00108bc:	ff 52 48             	call   DWORD PTR [edx+0x48]
c00108bf:	83 c4 20             	add    esp,0x20
c00108c2:	83 f8 08             	cmp    eax,0x8
c00108c5:	75 12                	jne    c00108d9 <SysFormatDisk(regs*)+0x46>
c00108c7:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00108ca:	85 db                	test   ebx,ebx
c00108cc:	75 d4                	jne    c00108a2 <SysFormatDisk(regs*)+0xf>
c00108ce:	59                   	pop    ecx
c00108cf:	b8 03 00 00 00       	mov    eax,0x3
c00108d4:	31 d2                	xor    edx,edx
c00108d6:	5b                   	pop    ebx
c00108d7:	5e                   	pop    esi
c00108d8:	c3                   	ret    
c00108d9:	85 c0                	test   eax,eax
c00108db:	74 1b                	je     c00108f8 <SysFormatDisk(regs*)+0x65>
c00108dd:	83 f8 09             	cmp    eax,0x9
c00108e0:	74 0b                	je     c00108ed <SysFormatDisk(regs*)+0x5a>
c00108e2:	59                   	pop    ecx
c00108e3:	b8 02 00 00 00       	mov    eax,0x2
c00108e8:	31 d2                	xor    edx,edx
c00108ea:	5b                   	pop    ebx
c00108eb:	5e                   	pop    esi
c00108ec:	c3                   	ret    
c00108ed:	59                   	pop    ecx
c00108ee:	b8 01 00 00 00       	mov    eax,0x1
c00108f3:	31 d2                	xor    edx,edx
c00108f5:	5b                   	pop    ebx
c00108f6:	5e                   	pop    esi
c00108f7:	c3                   	ret    
c00108f8:	59                   	pop    ecx
c00108f9:	31 c0                	xor    eax,eax
c00108fb:	31 d2                	xor    edx,edx
c00108fd:	5b                   	pop    ebx
c00108fe:	5e                   	pop    esi
c00108ff:	c3                   	ret    

c0010900 <SysSetDiskVolumeLabel(regs*)>:
c0010900:	56                   	push   esi
c0010901:	53                   	push   ebx
c0010902:	53                   	push   ebx
c0010903:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010907:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001090a:	83 f8 19             	cmp    eax,0x19
c001090d:	77 2d                	ja     c001093c <SysSetDiskVolumeLabel(regs*)+0x3c>
c001090f:	8b 0c 85 20 54 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdabe0]
c0010916:	85 c9                	test   ecx,ecx
c0010918:	74 22                	je     c001093c <SysSetDiskVolumeLabel(regs*)+0x3c>
c001091a:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001091d:	85 db                	test   ebx,ebx
c001091f:	74 1b                	je     c001093c <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010921:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0010927:	85 d2                	test   edx,edx
c0010929:	74 11                	je     c001093c <SysSetDiskVolumeLabel(regs*)+0x3c>
c001092b:	8b 32                	mov    esi,DWORD PTR [edx]
c001092d:	53                   	push   ebx
c001092e:	50                   	push   eax
c001092f:	51                   	push   ecx
c0010930:	52                   	push   edx
c0010931:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010934:	83 c4 10             	add    esp,0x10
c0010937:	99                   	cdq    
c0010938:	59                   	pop    ecx
c0010939:	5b                   	pop    ebx
c001093a:	5e                   	pop    esi
c001093b:	c3                   	ret    
c001093c:	59                   	pop    ecx
c001093d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010942:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010947:	5b                   	pop    ebx
c0010948:	5e                   	pop    esi
c0010949:	c3                   	ret    

c001094a <SysGetDiskVolumeLabel(regs*)>:
c001094a:	57                   	push   edi
c001094b:	56                   	push   esi
c001094c:	53                   	push   ebx
c001094d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010951:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010954:	83 fa 19             	cmp    edx,0x19
c0010957:	77 38                	ja     c0010991 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010959:	8b 0c 95 20 54 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdabe0]
c0010960:	85 c9                	test   ecx,ecx
c0010962:	74 2d                	je     c0010991 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010964:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010967:	85 db                	test   ebx,ebx
c0010969:	74 26                	je     c0010991 <SysGetDiskVolumeLabel(regs*)+0x47>
c001096b:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001096e:	85 f6                	test   esi,esi
c0010970:	74 1f                	je     c0010991 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010972:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0010978:	85 c0                	test   eax,eax
c001097a:	74 15                	je     c0010991 <SysGetDiskVolumeLabel(regs*)+0x47>
c001097c:	83 ec 0c             	sub    esp,0xc
c001097f:	8b 38                	mov    edi,DWORD PTR [eax]
c0010981:	56                   	push   esi
c0010982:	53                   	push   ebx
c0010983:	52                   	push   edx
c0010984:	51                   	push   ecx
c0010985:	50                   	push   eax
c0010986:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0010989:	83 c4 20             	add    esp,0x20
c001098c:	99                   	cdq    
c001098d:	5b                   	pop    ebx
c001098e:	5e                   	pop    esi
c001098f:	5f                   	pop    edi
c0010990:	c3                   	ret    
c0010991:	5b                   	pop    ebx
c0010992:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010997:	ba ff ff ff ff       	mov    edx,0xffffffff
c001099c:	5e                   	pop    esi
c001099d:	5f                   	pop    edi
c001099e:	c3                   	ret    

c001099f <SysShutdown(regs*)>:
c001099f:	83 ec 0c             	sub    esp,0xc
c00109a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00109a9:	85 c0                	test   eax,eax
c00109ab:	74 18                	je     c00109c5 <SysShutdown(regs*)+0x26>
c00109ad:	83 f8 01             	cmp    eax,0x1
c00109b0:	74 38                	je     c00109ea <SysShutdown(regs*)+0x4b>
c00109b2:	83 f8 02             	cmp    eax,0x2
c00109b5:	74 24                	je     c00109db <SysShutdown(regs*)+0x3c>
c00109b7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00109bc:	ba ff ff ff ff       	mov    edx,0xffffffff
c00109c1:	83 c4 0c             	add    esp,0xc
c00109c4:	c3                   	ret    
c00109c5:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c00109ca:	8b 10                	mov    edx,DWORD PTR [eax]
c00109cc:	6a 00                	push   0x0
c00109ce:	6a 00                	push   0x0
c00109d0:	6a 00                	push   0x0
c00109d2:	50                   	push   eax
c00109d3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00109d6:	83 c4 10             	add    esp,0x10
c00109d9:	eb dc                	jmp    c00109b7 <SysShutdown(regs*)+0x18>
c00109db:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c00109e0:	8b 10                	mov    edx,DWORD PTR [eax]
c00109e2:	6a 00                	push   0x0
c00109e4:	6a 00                	push   0x0
c00109e6:	6a 01                	push   0x1
c00109e8:	eb e8                	jmp    c00109d2 <SysShutdown(regs*)+0x33>
c00109ea:	a1 a0 54 02 c0       	mov    eax,ds:0xc00254a0
c00109ef:	85 c0                	test   eax,eax
c00109f1:	74 02                	je     c00109f5 <SysShutdown(regs*)+0x56>
c00109f3:	ff d0                	call   eax
c00109f5:	31 c0                	xor    eax,eax
c00109f7:	31 d2                	xor    edx,edx
c00109f9:	83 c4 0c             	add    esp,0xc
c00109fc:	c3                   	ret    

c00109fd <SysRealpath(regs*)>:
c00109fd:	83 ec 0c             	sub    esp,0xc
c0010a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a04:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010a07:	85 d2                	test   edx,edx
c0010a09:	74 07                	je     c0010a12 <SysRealpath(regs*)+0x15>
c0010a0b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010a0e:	85 c0                	test   eax,eax
c0010a10:	75 0b                	jne    c0010a1d <SysRealpath(regs*)+0x20>
c0010a12:	b8 01 00 00 00       	mov    eax,0x1
c0010a17:	31 d2                	xor    edx,edx
c0010a19:	83 c4 0c             	add    esp,0xc
c0010a1c:	c3                   	ret    
c0010a1d:	51                   	push   ecx
c0010a1e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010a24:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010a27:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0010a2d:	51                   	push   ecx
c0010a2e:	52                   	push   edx
c0010a2f:	50                   	push   eax
c0010a30:	e8 51 9f ff ff       	call   c000a986 <Fs::standardiseFiles(char*, char const*, char const*)>
c0010a35:	83 c4 10             	add    esp,0x10
c0010a38:	31 c0                	xor    eax,eax
c0010a3a:	31 d2                	xor    edx,edx
c0010a3c:	83 c4 0c             	add    esp,0xc
c0010a3f:	c3                   	ret    

c0010a40 <SysReadDir(regs*)>:
c0010a40:	53                   	push   ebx
c0010a41:	83 ec 18             	sub    esp,0x18
c0010a44:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010a48:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010a4b:	83 f8 02             	cmp    eax,0x2
c0010a4e:	76 61                	jbe    c0010ab1 <SysReadDir(regs*)+0x71>
c0010a50:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010a57:	77 49                	ja     c0010aa2 <SysReadDir(regs*)+0x62>
c0010a59:	83 ec 0c             	sub    esp,0xc
c0010a5c:	50                   	push   eax
c0010a5d:	e8 45 87 ff ff       	call   c00091a7 <getFromFileDescriptor(int)>
c0010a62:	83 c4 10             	add    esp,0x10
c0010a65:	85 c0                	test   eax,eax
c0010a67:	74 39                	je     c0010aa2 <SysReadDir(regs*)+0x62>
c0010a69:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010a71:	83 ec 0c             	sub    esp,0xc
c0010a74:	8b 10                	mov    edx,DWORD PTR [eax]
c0010a76:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010a7a:	51                   	push   ecx
c0010a7b:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010a7e:	51                   	push   ecx
c0010a7f:	6a 00                	push   0x0
c0010a81:	68 10 01 00 00       	push   0x110
c0010a86:	50                   	push   eax
c0010a87:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010a8a:	83 c4 20             	add    esp,0x20
c0010a8d:	85 c0                	test   eax,eax
c0010a8f:	74 29                	je     c0010aba <SysReadDir(regs*)+0x7a>
c0010a91:	83 f8 07             	cmp    eax,0x7
c0010a94:	74 1b                	je     c0010ab1 <SysReadDir(regs*)+0x71>
c0010a96:	b8 02 00 00 00       	mov    eax,0x2
c0010a9b:	31 d2                	xor    edx,edx
c0010a9d:	83 c4 18             	add    esp,0x18
c0010aa0:	5b                   	pop    ebx
c0010aa1:	c3                   	ret    
c0010aa2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010aa7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010aac:	83 c4 18             	add    esp,0x18
c0010aaf:	5b                   	pop    ebx
c0010ab0:	c3                   	ret    
c0010ab1:	b8 01 00 00 00       	mov    eax,0x1
c0010ab6:	31 d2                	xor    edx,edx
c0010ab8:	eb e3                	jmp    c0010a9d <SysReadDir(regs*)+0x5d>
c0010aba:	31 c0                	xor    eax,eax
c0010abc:	31 d2                	xor    edx,edx
c0010abe:	eb dd                	jmp    c0010a9d <SysReadDir(regs*)+0x5d>

c0010ac0 <SysIsATTY(regs*)>:
c0010ac0:	83 ec 0c             	sub    esp,0xc
c0010ac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ac7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010aca:	83 f8 02             	cmp    eax,0x2
c0010acd:	76 07                	jbe    c0010ad6 <SysIsATTY(regs*)+0x16>
c0010acf:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010ad4:	75 28                	jne    c0010afe <SysIsATTY(regs*)+0x3e>
c0010ad6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010adb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ade:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010ae4:	85 c0                	test   eax,eax
c0010ae6:	74 26                	je     c0010b0e <SysIsATTY(regs*)+0x4e>
c0010ae8:	83 ec 0c             	sub    esp,0xc
c0010aeb:	8b 10                	mov    edx,DWORD PTR [eax]
c0010aed:	50                   	push   eax
c0010aee:	ff 12                	call   DWORD PTR [edx]
c0010af0:	31 d2                	xor    edx,edx
c0010af2:	25 ff 00 00 00       	and    eax,0xff
c0010af7:	83 c4 10             	add    esp,0x10
c0010afa:	83 c4 0c             	add    esp,0xc
c0010afd:	c3                   	ret    
c0010afe:	83 ec 0c             	sub    esp,0xc
c0010b01:	50                   	push   eax
c0010b02:	e8 a0 86 ff ff       	call   c00091a7 <getFromFileDescriptor(int)>
c0010b07:	83 c4 10             	add    esp,0x10
c0010b0a:	85 c0                	test   eax,eax
c0010b0c:	75 da                	jne    c0010ae8 <SysIsATTY(regs*)+0x28>
c0010b0e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b13:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b18:	83 c4 0c             	add    esp,0xc
c0010b1b:	c3                   	ret    

c0010b1c <SysSeek(regs*)>:
c0010b1c:	53                   	push   ebx
c0010b1d:	83 ec 08             	sub    esp,0x8
c0010b20:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b24:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010b27:	8d 50 fd             	lea    edx,[eax-0x3]
c0010b2a:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010b30:	77 34                	ja     c0010b66 <SysSeek(regs*)+0x4a>
c0010b32:	83 ec 0c             	sub    esp,0xc
c0010b35:	50                   	push   eax
c0010b36:	e8 6c 86 ff ff       	call   c00091a7 <getFromFileDescriptor(int)>
c0010b3b:	83 c4 0c             	add    esp,0xc
c0010b3e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010b41:	31 db                	xor    ebx,ebx
c0010b43:	53                   	push   ebx
c0010b44:	51                   	push   ecx
c0010b45:	50                   	push   eax
c0010b46:	e8 63 a1 ff ff       	call   c000acae <File::seek(unsigned long long)>
c0010b4b:	83 c4 10             	add    esp,0x10
c0010b4e:	85 c0                	test   eax,eax
c0010b50:	0f 95 c0             	setne  al
c0010b53:	31 d2                	xor    edx,edx
c0010b55:	25 ff 00 00 00       	and    eax,0xff
c0010b5a:	f7 d8                	neg    eax
c0010b5c:	83 d2 00             	adc    edx,0x0
c0010b5f:	83 c4 08             	add    esp,0x8
c0010b62:	f7 da                	neg    edx
c0010b64:	5b                   	pop    ebx
c0010b65:	c3                   	ret    
c0010b66:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b6b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b70:	83 c4 08             	add    esp,0x8
c0010b73:	5b                   	pop    ebx
c0010b74:	c3                   	ret    

c0010b75 <SysTell(regs*)>:
c0010b75:	53                   	push   ebx
c0010b76:	83 ec 08             	sub    esp,0x8
c0010b79:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b7d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010b80:	83 f8 02             	cmp    eax,0x2
c0010b83:	76 50                	jbe    c0010bd5 <SysTell(regs*)+0x60>
c0010b85:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010b8a:	76 19                	jbe    c0010ba5 <SysTell(regs*)+0x30>
c0010b8c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010b8f:	31 d2                	xor    edx,edx
c0010b91:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010b97:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b9e:	31 c0                	xor    eax,eax
c0010ba0:	83 c4 08             	add    esp,0x8
c0010ba3:	5b                   	pop    ebx
c0010ba4:	c3                   	ret    
c0010ba5:	83 ec 0c             	sub    esp,0xc
c0010ba8:	50                   	push   eax
c0010ba9:	e8 f9 85 ff ff       	call   c00091a7 <getFromFileDescriptor(int)>
c0010bae:	5a                   	pop    edx
c0010baf:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010bb2:	59                   	pop    ecx
c0010bb3:	53                   	push   ebx
c0010bb4:	50                   	push   eax
c0010bb5:	e8 4a a1 ff ff       	call   c000ad04 <File::tell(unsigned long long*)>
c0010bba:	83 c4 10             	add    esp,0x10
c0010bbd:	85 c0                	test   eax,eax
c0010bbf:	0f 95 c0             	setne  al
c0010bc2:	31 d2                	xor    edx,edx
c0010bc4:	25 ff 00 00 00       	and    eax,0xff
c0010bc9:	f7 d8                	neg    eax
c0010bcb:	83 d2 00             	adc    edx,0x0
c0010bce:	83 c4 08             	add    esp,0x8
c0010bd1:	f7 da                	neg    edx
c0010bd3:	5b                   	pop    ebx
c0010bd4:	c3                   	ret    
c0010bd5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010bda:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010bdf:	83 c4 08             	add    esp,0x8
c0010be2:	5b                   	pop    ebx
c0010be3:	c3                   	ret    

c0010be4 <SysSize(regs*)>:
c0010be4:	53                   	push   ebx
c0010be5:	83 ec 18             	sub    esp,0x18
c0010be8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010bec:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010bef:	83 f8 02             	cmp    eax,0x2
c0010bf2:	76 56                	jbe    c0010c4a <SysSize(regs*)+0x66>
c0010bf4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010bf9:	76 19                	jbe    c0010c14 <SysSize(regs*)+0x30>
c0010bfb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010bfe:	31 d2                	xor    edx,edx
c0010c00:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010c06:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010c0d:	31 c0                	xor    eax,eax
c0010c0f:	83 c4 18             	add    esp,0x18
c0010c12:	5b                   	pop    ebx
c0010c13:	c3                   	ret    
c0010c14:	83 ec 0c             	sub    esp,0xc
c0010c17:	50                   	push   eax
c0010c18:	e8 8a 85 ff ff       	call   c00091a7 <getFromFileDescriptor(int)>
c0010c1d:	83 c4 0c             	add    esp,0xc
c0010c20:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010c24:	52                   	push   edx
c0010c25:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010c28:	52                   	push   edx
c0010c29:	50                   	push   eax
c0010c2a:	e8 6d a2 ff ff       	call   c000ae9c <File::stat(unsigned long long*, bool*)>
c0010c2f:	83 c4 10             	add    esp,0x10
c0010c32:	85 c0                	test   eax,eax
c0010c34:	0f 95 c0             	setne  al
c0010c37:	31 d2                	xor    edx,edx
c0010c39:	25 ff 00 00 00       	and    eax,0xff
c0010c3e:	f7 d8                	neg    eax
c0010c40:	83 d2 00             	adc    edx,0x0
c0010c43:	83 c4 18             	add    esp,0x18
c0010c46:	f7 da                	neg    edx
c0010c48:	5b                   	pop    ebx
c0010c49:	c3                   	ret    
c0010c4a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c4f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c54:	83 c4 18             	add    esp,0x18
c0010c57:	5b                   	pop    ebx
c0010c58:	c3                   	ret    

c0010c59 <SysSizeFromFilename(regs*)>:
c0010c59:	57                   	push   edi
c0010c5a:	56                   	push   esi
c0010c5b:	53                   	push   ebx
c0010c5c:	83 ec 20             	sub    esp,0x20
c0010c5f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010c63:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010c66:	83 fb 02             	cmp    ebx,0x2
c0010c69:	0f 86 8c 00 00 00    	jbe    c0010cfb <SysSizeFromFilename(regs*)+0xa2>
c0010c6f:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010c75:	76 1b                	jbe    c0010c92 <SysSizeFromFilename(regs*)+0x39>
c0010c77:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010c7a:	31 d2                	xor    edx,edx
c0010c7c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010c82:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010c89:	83 c4 20             	add    esp,0x20
c0010c8c:	31 c0                	xor    eax,eax
c0010c8e:	5b                   	pop    ebx
c0010c8f:	5e                   	pop    esi
c0010c90:	5f                   	pop    edi
c0010c91:	c3                   	ret    
c0010c92:	83 ec 0c             	sub    esp,0xc
c0010c95:	68 14 01 00 00       	push   0x114
c0010c9a:	e8 82 6b ff ff       	call   c0007821 <malloc>
c0010c9f:	83 c4 0c             	add    esp,0xc
c0010ca2:	89 c7                	mov    edi,eax
c0010ca4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ca9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010cac:	50                   	push   eax
c0010cad:	53                   	push   ebx
c0010cae:	57                   	push   edi
c0010caf:	e8 7c 9e ff ff       	call   c000ab30 <File::File(char const*, Process*)>
c0010cb4:	83 c4 0c             	add    esp,0xc
c0010cb7:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010cbb:	50                   	push   eax
c0010cbc:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010cbf:	52                   	push   edx
c0010cc0:	57                   	push   edi
c0010cc1:	e8 d6 a1 ff ff       	call   c000ae9c <File::stat(unsigned long long*, bool*)>
c0010cc6:	83 c4 10             	add    esp,0x10
c0010cc9:	85 ff                	test   edi,edi
c0010ccb:	74 14                	je     c0010ce1 <SysSizeFromFilename(regs*)+0x88>
c0010ccd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010cd1:	8b 17                	mov    edx,DWORD PTR [edi]
c0010cd3:	83 ec 0c             	sub    esp,0xc
c0010cd6:	57                   	push   edi
c0010cd7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010cda:	83 c4 10             	add    esp,0x10
c0010cdd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ce1:	85 c0                	test   eax,eax
c0010ce3:	0f 95 c0             	setne  al
c0010ce6:	31 d2                	xor    edx,edx
c0010ce8:	25 ff 00 00 00       	and    eax,0xff
c0010ced:	f7 d8                	neg    eax
c0010cef:	83 d2 00             	adc    edx,0x0
c0010cf2:	83 c4 20             	add    esp,0x20
c0010cf5:	f7 da                	neg    edx
c0010cf7:	5b                   	pop    ebx
c0010cf8:	5e                   	pop    esi
c0010cf9:	5f                   	pop    edi
c0010cfa:	c3                   	ret    
c0010cfb:	83 c4 20             	add    esp,0x20
c0010cfe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d03:	5b                   	pop    ebx
c0010d04:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d09:	5e                   	pop    esi
c0010d0a:	5f                   	pop    edi
c0010d0b:	c3                   	ret    

c0010d0c <SysClose(regs*)>:
c0010d0c:	53                   	push   ebx
c0010d0d:	83 ec 08             	sub    esp,0x8
c0010d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d14:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010d17:	83 f8 02             	cmp    eax,0x2
c0010d1a:	76 41                	jbe    c0010d5d <SysClose(regs*)+0x51>
c0010d1c:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010d22:	83 fa 01             	cmp    edx,0x1
c0010d25:	76 2d                	jbe    c0010d54 <SysClose(regs*)+0x48>
c0010d27:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010d2c:	77 2f                	ja     c0010d5d <SysClose(regs*)+0x51>
c0010d2e:	83 ec 0c             	sub    esp,0xc
c0010d31:	50                   	push   eax
c0010d32:	e8 70 84 ff ff       	call   c00091a7 <getFromFileDescriptor(int)>
c0010d37:	89 c3                	mov    ebx,eax
c0010d39:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d3c:	e8 0d 9f ff ff       	call   c000ac4e <File::close()>
c0010d41:	83 c4 10             	add    esp,0x10
c0010d44:	85 db                	test   ebx,ebx
c0010d46:	74 0c                	je     c0010d54 <SysClose(regs*)+0x48>
c0010d48:	83 ec 0c             	sub    esp,0xc
c0010d4b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d4d:	53                   	push   ebx
c0010d4e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010d51:	83 c4 10             	add    esp,0x10
c0010d54:	31 c0                	xor    eax,eax
c0010d56:	31 d2                	xor    edx,edx
c0010d58:	83 c4 08             	add    esp,0x8
c0010d5b:	5b                   	pop    ebx
c0010d5c:	c3                   	ret    
c0010d5d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d62:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d67:	83 c4 08             	add    esp,0x8
c0010d6a:	5b                   	pop    ebx
c0010d6b:	c3                   	ret    

c0010d6c <SysOpenDir(regs*)>:
c0010d6c:	56                   	push   esi
c0010d6d:	53                   	push   ebx
c0010d6e:	50                   	push   eax
c0010d6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d73:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010d76:	85 c0                	test   eax,eax
c0010d78:	74 5b                	je     c0010dd5 <SysOpenDir(regs*)+0x69>
c0010d7a:	83 ec 0c             	sub    esp,0xc
c0010d7d:	68 14 01 00 00       	push   0x114
c0010d82:	e8 9a 6a ff ff       	call   c0007821 <malloc>
c0010d87:	83 c4 0c             	add    esp,0xc
c0010d8a:	89 c6                	mov    esi,eax
c0010d8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d91:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010d94:	50                   	push   eax
c0010d95:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d98:	50                   	push   eax
c0010d99:	56                   	push   esi
c0010d9a:	e8 bb a2 ff ff       	call   c000b05a <Directory::Directory(char const*, Process*)>
c0010d9f:	83 c4 10             	add    esp,0x10
c0010da2:	85 f6                	test   esi,esi
c0010da4:	74 2f                	je     c0010dd5 <SysOpenDir(regs*)+0x69>
c0010da6:	83 ec 0c             	sub    esp,0xc
c0010da9:	56                   	push   esi
c0010daa:	e8 6b a3 ff ff       	call   c000b11a <Directory::open()>
c0010daf:	83 c4 10             	add    esp,0x10
c0010db2:	85 c0                	test   eax,eax
c0010db4:	75 1f                	jne    c0010dd5 <SysOpenDir(regs*)+0x69>
c0010db6:	83 ec 0c             	sub    esp,0xc
c0010db9:	56                   	push   esi
c0010dba:	e8 f3 80 ff ff       	call   c0008eb2 <UnixFile::getFileDescriptor()>
c0010dbf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010dc2:	83 c4 10             	add    esp,0x10
c0010dc5:	89 02                	mov    DWORD PTR [edx],eax
c0010dc7:	c1 f8 1f             	sar    eax,0x1f
c0010dca:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010dcd:	31 c0                	xor    eax,eax
c0010dcf:	59                   	pop    ecx
c0010dd0:	31 d2                	xor    edx,edx
c0010dd2:	5b                   	pop    ebx
c0010dd3:	5e                   	pop    esi
c0010dd4:	c3                   	ret    
c0010dd5:	59                   	pop    ecx
c0010dd6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010ddb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010de0:	5b                   	pop    ebx
c0010de1:	5e                   	pop    esi
c0010de2:	c3                   	ret    

c0010de3 <SysMakeDir(regs*)>:
c0010de3:	56                   	push   esi
c0010de4:	53                   	push   ebx
c0010de5:	83 ec 10             	sub    esp,0x10
c0010de8:	68 14 01 00 00       	push   0x114
c0010ded:	e8 2f 6a ff ff       	call   c0007821 <malloc>
c0010df2:	83 c4 0c             	add    esp,0xc
c0010df5:	89 c3                	mov    ebx,eax
c0010df7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010dfc:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010dff:	56                   	push   esi
c0010e00:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010e04:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010e07:	50                   	push   eax
c0010e08:	53                   	push   ebx
c0010e09:	e8 4c a2 ff ff       	call   c000b05a <Directory::Directory(char const*, Process*)>
c0010e0e:	83 c4 10             	add    esp,0x10
c0010e11:	85 db                	test   ebx,ebx
c0010e13:	74 2a                	je     c0010e3f <SysMakeDir(regs*)+0x5c>
c0010e15:	83 ec 0c             	sub    esp,0xc
c0010e18:	53                   	push   ebx
c0010e19:	e8 dc a4 ff ff       	call   c000b2fa <Directory::create()>
c0010e1e:	89 c6                	mov    esi,eax
c0010e20:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e22:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e25:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010e28:	83 c4 10             	add    esp,0x10
c0010e2b:	31 c0                	xor    eax,eax
c0010e2d:	59                   	pop    ecx
c0010e2e:	85 f6                	test   esi,esi
c0010e30:	5b                   	pop    ebx
c0010e31:	0f 95 c0             	setne  al
c0010e34:	5e                   	pop    esi
c0010e35:	31 d2                	xor    edx,edx
c0010e37:	f7 d8                	neg    eax
c0010e39:	83 d2 00             	adc    edx,0x0
c0010e3c:	f7 da                	neg    edx
c0010e3e:	c3                   	ret    
c0010e3f:	59                   	pop    ecx
c0010e40:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e45:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e4a:	5b                   	pop    ebx
c0010e4b:	5e                   	pop    esi
c0010e4c:	c3                   	ret    

c0010e4d <SysCloseDir(regs*)>:
c0010e4d:	53                   	push   ebx
c0010e4e:	83 ec 08             	sub    esp,0x8
c0010e51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e55:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010e58:	8d 50 fd             	lea    edx,[eax-0x3]
c0010e5b:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010e61:	77 2f                	ja     c0010e92 <SysCloseDir(regs*)+0x45>
c0010e63:	83 ec 0c             	sub    esp,0xc
c0010e66:	50                   	push   eax
c0010e67:	e8 3b 83 ff ff       	call   c00091a7 <getFromFileDescriptor(int)>
c0010e6c:	89 c3                	mov    ebx,eax
c0010e6e:	89 04 24             	mov    DWORD PTR [esp],eax
c0010e71:	e8 00 a3 ff ff       	call   c000b176 <Directory::close()>
c0010e76:	83 c4 10             	add    esp,0x10
c0010e79:	85 db                	test   ebx,ebx
c0010e7b:	74 0c                	je     c0010e89 <SysCloseDir(regs*)+0x3c>
c0010e7d:	83 ec 0c             	sub    esp,0xc
c0010e80:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e82:	53                   	push   ebx
c0010e83:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010e86:	83 c4 10             	add    esp,0x10
c0010e89:	31 c0                	xor    eax,eax
c0010e8b:	31 d2                	xor    edx,edx
c0010e8d:	83 c4 08             	add    esp,0x8
c0010e90:	5b                   	pop    ebx
c0010e91:	c3                   	ret    
c0010e92:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e97:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e9c:	83 c4 08             	add    esp,0x8
c0010e9f:	5b                   	pop    ebx
c0010ea0:	c3                   	ret    

c0010ea1 <SysWait(regs*)>:
c0010ea1:	83 ec 10             	sub    esp,0x10
c0010ea4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010ea8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010eab:	52                   	push   edx
c0010eac:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010eaf:	51                   	push   ecx
c0010eb0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010eb3:	50                   	push   eax
c0010eb4:	e8 53 2b 00 00       	call   c0013a0c <waitTask(int, int*, int)>
c0010eb9:	83 c4 1c             	add    esp,0x1c
c0010ebc:	99                   	cdq    
c0010ebd:	c3                   	ret    

c0010ebe <SysNotImpl(regs*)>:
c0010ebe:	83 ec 18             	sub    esp,0x18
c0010ec1:	68 e4 ef 01 c0       	push   0xc001efe4
c0010ec6:	e8 f8 f3 ff ff       	call   c00102c3 <KePanic(char const*)>
c0010ecb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010ed0:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ed5:	83 c4 1c             	add    esp,0x1c
c0010ed8:	c3                   	ret    

c0010ed9 <SysPanic(regs*)>:
c0010ed9:	83 ec 18             	sub    esp,0x18
c0010edc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ee0:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010ee3:	50                   	push   eax
c0010ee4:	e8 da f3 ff ff       	call   c00102c3 <KePanic(char const*)>
c0010ee9:	b8 01 00 00 00       	mov    eax,0x1
c0010eee:	31 d2                	xor    edx,edx
c0010ef0:	83 c4 1c             	add    esp,0x1c
c0010ef3:	c3                   	ret    

c0010ef4 <SysRmdir(regs*)>:
c0010ef4:	56                   	push   esi
c0010ef5:	53                   	push   ebx
c0010ef6:	83 ec 20             	sub    esp,0x20
c0010ef9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010efd:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010f00:	68 14 01 00 00       	push   0x114
c0010f05:	e8 17 69 ff ff       	call   c0007821 <malloc>
c0010f0a:	83 c4 0c             	add    esp,0xc
c0010f0d:	89 c3                	mov    ebx,eax
c0010f0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f14:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f17:	50                   	push   eax
c0010f18:	56                   	push   esi
c0010f19:	53                   	push   ebx
c0010f1a:	e8 11 9c ff ff       	call   c000ab30 <File::File(char const*, Process*)>
c0010f1f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f22:	e8 41 9e ff ff       	call   c000ad68 <File::unlink()>
c0010f27:	83 c4 10             	add    esp,0x10
c0010f2a:	85 db                	test   ebx,ebx
c0010f2c:	74 14                	je     c0010f42 <SysRmdir(regs*)+0x4e>
c0010f2e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f32:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f34:	83 ec 0c             	sub    esp,0xc
c0010f37:	53                   	push   ebx
c0010f38:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010f3b:	83 c4 10             	add    esp,0x10
c0010f3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f42:	85 c0                	test   eax,eax
c0010f44:	0f 95 c0             	setne  al
c0010f47:	31 d2                	xor    edx,edx
c0010f49:	25 ff 00 00 00       	and    eax,0xff
c0010f4e:	f7 d8                	neg    eax
c0010f50:	83 d2 00             	adc    edx,0x0
c0010f53:	83 c4 14             	add    esp,0x14
c0010f56:	f7 da                	neg    edx
c0010f58:	5b                   	pop    ebx
c0010f59:	5e                   	pop    esi
c0010f5a:	c3                   	ret    

c0010f5b <SysUnlink(regs*)>:
c0010f5b:	56                   	push   esi
c0010f5c:	53                   	push   ebx
c0010f5d:	83 ec 20             	sub    esp,0x20
c0010f60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010f64:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010f67:	68 14 01 00 00       	push   0x114
c0010f6c:	e8 b0 68 ff ff       	call   c0007821 <malloc>
c0010f71:	83 c4 0c             	add    esp,0xc
c0010f74:	89 c3                	mov    ebx,eax
c0010f76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f7b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f7e:	50                   	push   eax
c0010f7f:	56                   	push   esi
c0010f80:	53                   	push   ebx
c0010f81:	e8 aa 9b ff ff       	call   c000ab30 <File::File(char const*, Process*)>
c0010f86:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f89:	e8 da 9d ff ff       	call   c000ad68 <File::unlink()>
c0010f8e:	83 c4 10             	add    esp,0x10
c0010f91:	85 db                	test   ebx,ebx
c0010f93:	74 14                	je     c0010fa9 <SysUnlink(regs*)+0x4e>
c0010f95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f99:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f9b:	83 ec 0c             	sub    esp,0xc
c0010f9e:	53                   	push   ebx
c0010f9f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010fa2:	83 c4 10             	add    esp,0x10
c0010fa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fa9:	85 c0                	test   eax,eax
c0010fab:	0f 95 c0             	setne  al
c0010fae:	31 d2                	xor    edx,edx
c0010fb0:	25 ff 00 00 00       	and    eax,0xff
c0010fb5:	f7 d8                	neg    eax
c0010fb7:	83 d2 00             	adc    edx,0x0
c0010fba:	83 c4 14             	add    esp,0x14
c0010fbd:	f7 da                	neg    edx
c0010fbf:	5b                   	pop    ebx
c0010fc0:	5e                   	pop    esi
c0010fc1:	c3                   	ret    

c0010fc2 <SysGetArgv(regs*)>:
c0010fc2:	83 ec 0c             	sub    esp,0xc
c0010fc5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010fc9:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010fcc:	85 c0                	test   eax,eax
c0010fce:	78 2c                	js     c0010ffc <SysGetArgv(regs*)+0x3a>
c0010fd0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010fd6:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010fd9:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010fdf:	7d 1b                	jge    c0010ffc <SysGetArgv(regs*)+0x3a>
c0010fe1:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010fe8:	85 c0                	test   eax,eax
c0010fea:	74 18                	je     c0011004 <SysGetArgv(regs*)+0x42>
c0010fec:	83 ec 08             	sub    esp,0x8
c0010fef:	50                   	push   eax
c0010ff0:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0010ff3:	50                   	push   eax
c0010ff4:	e8 07 f6 fe ff       	call   c0000600 <strcpy>
c0010ff9:	83 c4 10             	add    esp,0x10
c0010ffc:	31 c0                	xor    eax,eax
c0010ffe:	31 d2                	xor    edx,edx
c0011000:	83 c4 0c             	add    esp,0xc
c0011003:	c3                   	ret    
c0011004:	b8 01 00 00 00       	mov    eax,0x1
c0011009:	31 d2                	xor    edx,edx
c001100b:	83 c4 0c             	add    esp,0xc
c001100e:	c3                   	ret    

c001100f <SysUSleep(regs*)>:
c001100f:	83 ec 1c             	sub    esp,0x1c
c0011012:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011016:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011019:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c001101c:	6a 00                	push   0x0
c001101e:	6a 64                	push   0x64
c0011020:	52                   	push   edx
c0011021:	50                   	push   eax
c0011022:	e8 f9 b8 00 00       	call   c001c920 <__udivdi3>
c0011027:	83 c4 14             	add    esp,0x14
c001102a:	50                   	push   eax
c001102b:	e8 b0 2a 00 00       	call   c0013ae0 <milliTenthSleep(unsigned int)>
c0011030:	31 c0                	xor    eax,eax
c0011032:	31 d2                	xor    edx,edx
c0011034:	83 c4 1c             	add    esp,0x1c
c0011037:	c3                   	ret    

c0011038 <SysSpawn(regs*)>:
c0011038:	56                   	push   esi
c0011039:	53                   	push   ebx
c001103a:	50                   	push   eax
c001103b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001103f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011042:	85 c0                	test   eax,eax
c0011044:	75 08                	jne    c001104e <SysSpawn(regs*)+0x16>
c0011046:	59                   	pop    ecx
c0011047:	31 c0                	xor    eax,eax
c0011049:	31 d2                	xor    edx,edx
c001104b:	5b                   	pop    ebx
c001104c:	5e                   	pop    esi
c001104d:	c3                   	ret    
c001104e:	83 ec 0c             	sub    esp,0xc
c0011051:	68 24 07 00 00       	push   0x724
c0011056:	e8 c6 67 ff ff       	call   c0007821 <malloc>
c001105b:	83 c4 10             	add    esp,0x10
c001105e:	89 c6                	mov    esi,eax
c0011060:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011063:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011066:	85 c0                	test   eax,eax
c0011068:	75 33                	jne    c001109d <SysSpawn(regs*)+0x65>
c001106a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001106f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011072:	52                   	push   edx
c0011073:	50                   	push   eax
c0011074:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0011077:	53                   	push   ebx
c0011078:	56                   	push   esi
c0011079:	e8 0e 21 00 00       	call   c001318c <Process::Process(char const*, Process*, char**)>
c001107e:	83 c4 10             	add    esp,0x10
c0011081:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011088:	75 bc                	jne    c0011046 <SysSpawn(regs*)+0xe>
c001108a:	83 ec 0c             	sub    esp,0xc
c001108d:	56                   	push   esi
c001108e:	e8 25 26 00 00       	call   c00136b8 <Process::createUserThread()>
c0011093:	8b 06                	mov    eax,DWORD PTR [esi]
c0011095:	83 c4 10             	add    esp,0x10
c0011098:	99                   	cdq    
c0011099:	59                   	pop    ecx
c001109a:	5b                   	pop    ebx
c001109b:	5e                   	pop    esi
c001109c:	c3                   	ret    
c001109d:	31 c0                	xor    eax,eax
c001109f:	eb d1                	jmp    c0011072 <SysSpawn(regs*)+0x3a>

c00110a1 <SysGetEnv(regs*)>:
c00110a1:	57                   	push   edi
c00110a2:	56                   	push   esi
c00110a3:	53                   	push   ebx
c00110a4:	83 ec 1c             	sub    esp,0x1c
c00110a7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00110ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110b0:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00110b3:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00110b6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00110b9:	50                   	push   eax
c00110ba:	e8 bc f0 ff ff       	call   c001017b <Krnl::getProcessTotalEnvCount(Process*)>
c00110bf:	83 c4 10             	add    esp,0x10
c00110c2:	39 c7                	cmp    edi,eax
c00110c4:	7c 14                	jl     c00110da <SysGetEnv(regs*)+0x39>
c00110c6:	85 f6                	test   esi,esi
c00110c8:	75 0b                	jne    c00110d5 <SysGetEnv(regs*)+0x34>
c00110ca:	83 c4 10             	add    esp,0x10
c00110cd:	31 c0                	xor    eax,eax
c00110cf:	5b                   	pop    ebx
c00110d0:	31 d2                	xor    edx,edx
c00110d2:	5e                   	pop    esi
c00110d3:	5f                   	pop    edi
c00110d4:	c3                   	ret    
c00110d5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00110d8:	eb f0                	jmp    c00110ca <SysGetEnv(regs*)+0x29>
c00110da:	8d 44 24 08          	lea    eax,[esp+0x8]
c00110de:	52                   	push   edx
c00110df:	57                   	push   edi
c00110e0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00110e6:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c00110e9:	51                   	push   ecx
c00110ea:	50                   	push   eax
c00110eb:	e8 ab f0 ff ff       	call   c001019b <Krnl::getProcessEnvPair(Process*, int)>
c00110f0:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00110f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00110f7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00110fb:	83 c4 0c             	add    esp,0xc
c00110fe:	85 db                	test   ebx,ebx
c0011100:	75 23                	jne    c0011125 <SysGetEnv(regs*)+0x84>
c0011102:	83 ec 0c             	sub    esp,0xc
c0011105:	50                   	push   eax
c0011106:	e8 35 f4 fe ff       	call   c0000540 <strlen>
c001110b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001110e:	89 c3                	mov    ebx,eax
c0011110:	e8 2b f4 fe ff       	call   c0000540 <strlen>
c0011115:	31 d2                	xor    edx,edx
c0011117:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001111b:	83 c4 10             	add    esp,0x10
c001111e:	83 c4 10             	add    esp,0x10
c0011121:	5b                   	pop    ebx
c0011122:	5e                   	pop    esi
c0011123:	5f                   	pop    edi
c0011124:	c3                   	ret    
c0011125:	83 ec 08             	sub    esp,0x8
c0011128:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001112b:	50                   	push   eax
c001112c:	56                   	push   esi
c001112d:	e8 ce f4 fe ff       	call   c0000600 <strcpy>
c0011132:	58                   	pop    eax
c0011133:	5a                   	pop    edx
c0011134:	68 fe ef 01 c0       	push   0xc001effe
c0011139:	56                   	push   esi
c001113a:	e8 81 f6 fe ff       	call   c00007c0 <strcat>
c001113f:	59                   	pop    ecx
c0011140:	5b                   	pop    ebx
c0011141:	57                   	push   edi
c0011142:	56                   	push   esi
c0011143:	e8 78 f6 fe ff       	call   c00007c0 <strcat>
c0011148:	83 c4 10             	add    esp,0x10
c001114b:	e9 7a ff ff ff       	jmp    c00110ca <SysGetEnv(regs*)+0x29>

c0011150 <SysSetFatAttrib(regs*)>:
c0011150:	57                   	push   edi
c0011151:	56                   	push   esi
c0011152:	53                   	push   ebx
c0011153:	83 ec 1c             	sub    esp,0x1c
c0011156:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001115a:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001115d:	68 14 01 00 00       	push   0x114
c0011162:	e8 ba 66 ff ff       	call   c0007821 <malloc>
c0011167:	83 c4 0c             	add    esp,0xc
c001116a:	89 c3                	mov    ebx,eax
c001116c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011171:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011174:	50                   	push   eax
c0011175:	57                   	push   edi
c0011176:	53                   	push   ebx
c0011177:	e8 b4 99 ff ff       	call   c000ab30 <File::File(char const*, Process*)>
c001117c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001117f:	83 c4 0c             	add    esp,0xc
c0011182:	0f b6 d4             	movzx  edx,ah
c0011185:	25 ff 00 00 00       	and    eax,0xff
c001118a:	52                   	push   edx
c001118b:	50                   	push   eax
c001118c:	53                   	push   ebx
c001118d:	e8 70 9c ff ff       	call   c000ae02 <File::chfatattr(unsigned char, unsigned char)>
c0011192:	83 c4 10             	add    esp,0x10
c0011195:	85 db                	test   ebx,ebx
c0011197:	74 14                	je     c00111ad <SysSetFatAttrib(regs*)+0x5d>
c0011199:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001119d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001119f:	83 ec 0c             	sub    esp,0xc
c00111a2:	53                   	push   ebx
c00111a3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00111a6:	83 c4 10             	add    esp,0x10
c00111a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00111ad:	85 c0                	test   eax,eax
c00111af:	0f 95 c0             	setne  al
c00111b2:	31 d2                	xor    edx,edx
c00111b4:	25 ff 00 00 00       	and    eax,0xff
c00111b9:	f7 d8                	neg    eax
c00111bb:	83 d2 00             	adc    edx,0x0
c00111be:	83 c4 10             	add    esp,0x10
c00111c1:	f7 da                	neg    edx
c00111c3:	5b                   	pop    ebx
c00111c4:	5e                   	pop    esi
c00111c5:	5f                   	pop    edi
c00111c6:	c3                   	ret    

c00111c7 <SysPipe(regs*)>:
c00111c7:	57                   	push   edi
c00111c8:	56                   	push   esi
c00111c9:	53                   	push   ebx
c00111ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ce:	83 ec 0c             	sub    esp,0xc
c00111d1:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00111d4:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00111d7:	6a 20                	push   0x20
c00111d9:	e8 43 66 ff ff       	call   c0007821 <malloc>
c00111de:	89 c3                	mov    ebx,eax
c00111e0:	58                   	pop    eax
c00111e1:	5a                   	pop    edx
c00111e2:	68 00 50 00 00       	push   0x5000
c00111e7:	53                   	push   ebx
c00111e8:	e8 39 6f ff ff       	call   c0008126 <Pipe::Pipe(int)>
c00111ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111f0:	e8 bd 7c ff ff       	call   c0008eb2 <UnixFile::getFileDescriptor()>
c00111f5:	89 07                	mov    DWORD PTR [edi],eax
c00111f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111fa:	e8 b3 7c ff ff       	call   c0008eb2 <UnixFile::getFileDescriptor()>
c00111ff:	83 c4 10             	add    esp,0x10
c0011202:	89 06                	mov    DWORD PTR [esi],eax
c0011204:	31 d2                	xor    edx,edx
c0011206:	5b                   	pop    ebx
c0011207:	31 c0                	xor    eax,eax
c0011209:	5e                   	pop    esi
c001120a:	5f                   	pop    edi
c001120b:	c3                   	ret    

c001120c <SysGetUnixTime(regs*)>:
c001120c:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0011211:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011217:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001121b:	e9 1e a3 ff ff       	jmp    c000b53e <Clock::timeInSecondsLocal()>

c0011220 <string_ends_with(char const*, char const*)>:
c0011220:	57                   	push   edi
c0011221:	56                   	push   esi
c0011222:	53                   	push   ebx
c0011223:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011227:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001122b:	83 ec 0c             	sub    esp,0xc
c001122e:	53                   	push   ebx
c001122f:	e8 0c f3 fe ff       	call   c0000540 <strlen>
c0011234:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011237:	89 c6                	mov    esi,eax
c0011239:	e8 02 f3 fe ff       	call   c0000540 <strlen>
c001123e:	83 c4 10             	add    esp,0x10
c0011241:	39 c6                	cmp    esi,eax
c0011243:	7d 06                	jge    c001124b <string_ends_with(char const*, char const*)+0x2b>
c0011245:	5b                   	pop    ebx
c0011246:	31 c0                	xor    eax,eax
c0011248:	5e                   	pop    esi
c0011249:	5f                   	pop    edi
c001124a:	c3                   	ret    
c001124b:	83 ec 08             	sub    esp,0x8
c001124e:	29 c6                	sub    esi,eax
c0011250:	57                   	push   edi
c0011251:	01 f3                	add    ebx,esi
c0011253:	53                   	push   ebx
c0011254:	e8 87 f4 fe ff       	call   c00006e0 <strcmp>
c0011259:	83 c4 10             	add    esp,0x10
c001125c:	85 c0                	test   eax,eax
c001125e:	5b                   	pop    ebx
c001125f:	0f 94 c0             	sete   al
c0011262:	5e                   	pop    esi
c0011263:	25 ff 00 00 00       	and    eax,0xff
c0011268:	5f                   	pop    edi
c0011269:	c3                   	ret    

c001126a <SysOpen(regs*)>:
c001126a:	56                   	push   esi
c001126b:	53                   	push   ebx
c001126c:	81 ec 04 01 00 00    	sub    esp,0x104
c0011272:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011279:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001127c:	85 c9                	test   ecx,ecx
c001127e:	0f 84 b9 01 00 00    	je     c001143d <SysOpen(regs*)+0x1d3>
c0011284:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011287:	85 c0                	test   eax,eax
c0011289:	0f 84 ae 01 00 00    	je     c001143d <SysOpen(regs*)+0x1d3>
c001128f:	52                   	push   edx
c0011290:	68 00 f0 01 c0       	push   0xc001f000
c0011295:	50                   	push   eax
c0011296:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001129a:	56                   	push   esi
c001129b:	e8 e6 96 ff ff       	call   c000a986 <Fs::standardiseFiles(char*, char const*, char const*)>
c00112a0:	89 34 24             	mov    DWORD PTR [esp],esi
c00112a3:	e8 98 f2 fe ff       	call   c0000540 <strlen>
c00112a8:	83 c4 10             	add    esp,0x10
c00112ab:	48                   	dec    eax
c00112ac:	74 1d                	je     c00112cb <SysOpen(regs*)+0x61>
c00112ae:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00112b1:	eb 0f                	jmp    c00112c2 <SysOpen(regs*)+0x58>
c00112b3:	80 fa 3a             	cmp    dl,0x3a
c00112b6:	74 0f                	je     c00112c7 <SysOpen(regs*)+0x5d>
c00112b8:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00112bc:	48                   	dec    eax
c00112bd:	74 0c                	je     c00112cb <SysOpen(regs*)+0x61>
c00112bf:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00112c2:	80 fa 2e             	cmp    dl,0x2e
c00112c5:	75 ec                	jne    c00112b3 <SysOpen(regs*)+0x49>
c00112c7:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00112cb:	83 ec 08             	sub    esp,0x8
c00112ce:	68 04 f0 01 c0       	push   0xc001f004
c00112d3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112d6:	50                   	push   eax
c00112d7:	e8 44 ff ff ff       	call   c0011220 <string_ends_with(char const*, char const*)>
c00112dc:	83 c4 10             	add    esp,0x10
c00112df:	85 c0                	test   eax,eax
c00112e1:	74 1d                	je     c0011300 <SysOpen(regs*)+0x96>
c00112e3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00112e6:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00112ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112f3:	81 c4 04 01 00 00    	add    esp,0x104
c00112f9:	31 c0                	xor    eax,eax
c00112fb:	31 d2                	xor    edx,edx
c00112fd:	5b                   	pop    ebx
c00112fe:	5e                   	pop    esi
c00112ff:	c3                   	ret    
c0011300:	83 ec 08             	sub    esp,0x8
c0011303:	68 09 f0 01 c0       	push   0xc001f009
c0011308:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001130b:	50                   	push   eax
c001130c:	e8 0f ff ff ff       	call   c0011220 <string_ends_with(char const*, char const*)>
c0011311:	83 c4 10             	add    esp,0x10
c0011314:	85 c0                	test   eax,eax
c0011316:	75 cb                	jne    c00112e3 <SysOpen(regs*)+0x79>
c0011318:	83 ec 08             	sub    esp,0x8
c001131b:	68 05 f0 01 c0       	push   0xc001f005
c0011320:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011323:	50                   	push   eax
c0011324:	e8 b7 f3 fe ff       	call   c00006e0 <strcmp>
c0011329:	83 c4 10             	add    esp,0x10
c001132c:	85 c0                	test   eax,eax
c001132e:	74 b3                	je     c00112e3 <SysOpen(regs*)+0x79>
c0011330:	83 ec 08             	sub    esp,0x8
c0011333:	68 04 f0 01 c0       	push   0xc001f004
c0011338:	56                   	push   esi
c0011339:	e8 e2 fe ff ff       	call   c0011220 <string_ends_with(char const*, char const*)>
c001133e:	83 c4 10             	add    esp,0x10
c0011341:	85 c0                	test   eax,eax
c0011343:	75 9e                	jne    c00112e3 <SysOpen(regs*)+0x79>
c0011345:	83 ec 08             	sub    esp,0x8
c0011348:	68 0e f0 01 c0       	push   0xc001f00e
c001134d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011350:	50                   	push   eax
c0011351:	e8 ca fe ff ff       	call   c0011220 <string_ends_with(char const*, char const*)>
c0011356:	83 c4 10             	add    esp,0x10
c0011359:	85 c0                	test   eax,eax
c001135b:	0f 85 ef 00 00 00    	jne    c0011450 <SysOpen(regs*)+0x1e6>
c0011361:	83 ec 08             	sub    esp,0x8
c0011364:	68 13 f0 01 c0       	push   0xc001f013
c0011369:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001136c:	50                   	push   eax
c001136d:	e8 ae fe ff ff       	call   c0011220 <string_ends_with(char const*, char const*)>
c0011372:	83 c4 10             	add    esp,0x10
c0011375:	85 c0                	test   eax,eax
c0011377:	0f 85 d3 00 00 00    	jne    c0011450 <SysOpen(regs*)+0x1e6>
c001137d:	83 ec 08             	sub    esp,0x8
c0011380:	68 0f f0 01 c0       	push   0xc001f00f
c0011385:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011388:	51                   	push   ecx
c0011389:	e8 52 f3 fe ff       	call   c00006e0 <strcmp>
c001138e:	83 c4 10             	add    esp,0x10
c0011391:	85 c0                	test   eax,eax
c0011393:	0f 84 b7 00 00 00    	je     c0011450 <SysOpen(regs*)+0x1e6>
c0011399:	83 ec 08             	sub    esp,0x8
c001139c:	68 0e f0 01 c0       	push   0xc001f00e
c00113a1:	56                   	push   esi
c00113a2:	e8 79 fe ff ff       	call   c0011220 <string_ends_with(char const*, char const*)>
c00113a7:	83 c4 10             	add    esp,0x10
c00113aa:	85 c0                	test   eax,eax
c00113ac:	0f 85 9e 00 00 00    	jne    c0011450 <SysOpen(regs*)+0x1e6>
c00113b2:	83 ec 0c             	sub    esp,0xc
c00113b5:	68 14 01 00 00       	push   0x114
c00113ba:	e8 62 64 ff ff       	call   c0007821 <malloc>
c00113bf:	83 c4 0c             	add    esp,0xc
c00113c2:	89 c6                	mov    esi,eax
c00113c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113c9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00113cc:	50                   	push   eax
c00113cd:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00113d0:	52                   	push   edx
c00113d1:	56                   	push   esi
c00113d2:	e8 59 97 ff ff       	call   c000ab30 <File::File(char const*, Process*)>
c00113d7:	83 c4 10             	add    esp,0x10
c00113da:	85 f6                	test   esi,esi
c00113dc:	74 5f                	je     c001143d <SysOpen(regs*)+0x1d3>
c00113de:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00113e1:	89 d0                	mov    eax,edx
c00113e3:	25 ff 00 00 00       	and    eax,0xff
c00113e8:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00113eb:	89 d0                	mov    eax,edx
c00113ed:	83 e0 01             	and    eax,0x1
c00113f0:	f6 c2 02             	test   dl,0x2
c00113f3:	74 03                	je     c00113f8 <SysOpen(regs*)+0x18e>
c00113f5:	83 c8 02             	or     eax,0x2
c00113f8:	f6 c2 04             	test   dl,0x4
c00113fb:	74 03                	je     c0011400 <SysOpen(regs*)+0x196>
c00113fd:	83 c8 04             	or     eax,0x4
c0011400:	f6 c2 08             	test   dl,0x8
c0011403:	74 03                	je     c0011408 <SysOpen(regs*)+0x19e>
c0011405:	83 c8 0a             	or     eax,0xa
c0011408:	83 e2 10             	and    edx,0x10
c001140b:	74 03                	je     c0011410 <SysOpen(regs*)+0x1a6>
c001140d:	83 c8 12             	or     eax,0x12
c0011410:	83 ec 08             	sub    esp,0x8
c0011413:	50                   	push   eax
c0011414:	56                   	push   esi
c0011415:	e8 d6 97 ff ff       	call   c000abf0 <File::open(FileOpenMode)>
c001141a:	83 c4 10             	add    esp,0x10
c001141d:	85 c0                	test   eax,eax
c001141f:	75 1c                	jne    c001143d <SysOpen(regs*)+0x1d3>
c0011421:	83 ec 0c             	sub    esp,0xc
c0011424:	56                   	push   esi
c0011425:	e8 88 7a ff ff       	call   c0008eb2 <UnixFile::getFileDescriptor()>
c001142a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001142d:	83 c4 10             	add    esp,0x10
c0011430:	89 02                	mov    DWORD PTR [edx],eax
c0011432:	c1 f8 1f             	sar    eax,0x1f
c0011435:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011438:	e9 b6 fe ff ff       	jmp    c00112f3 <SysOpen(regs*)+0x89>
c001143d:	81 c4 04 01 00 00    	add    esp,0x104
c0011443:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011448:	ba ff ff ff ff       	mov    edx,0xffffffff
c001144d:	5b                   	pop    ebx
c001144e:	5e                   	pop    esi
c001144f:	c3                   	ret    
c0011450:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011453:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011459:	e9 8e fe ff ff       	jmp    c00112ec <SysOpen(regs*)+0x82>

c001145e <KeSystemCall(regs*, void*)>:
c001145e:	53                   	push   ebx
c001145f:	83 ec 08             	sub    esp,0x8
c0011462:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011466:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011469:	83 f8 32             	cmp    eax,0x32
c001146c:	77 16                	ja     c0011484 <KeSystemCall(regs*, void*)+0x26>
c001146e:	8b 14 85 e0 01 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdfe20]
c0011475:	85 d2                	test   edx,edx
c0011477:	74 0b                	je     c0011484 <KeSystemCall(regs*, void*)+0x26>
c0011479:	83 ec 0c             	sub    esp,0xc
c001147c:	53                   	push   ebx
c001147d:	ff d2                	call   edx
c001147f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011482:	eb 0d                	jmp    c0011491 <KeSystemCall(regs*, void*)+0x33>
c0011484:	52                   	push   edx
c0011485:	52                   	push   edx
c0011486:	50                   	push   eax
c0011487:	68 18 f0 01 c0       	push   0xc001f018
c001148c:	e8 29 91 ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0011491:	83 c4 10             	add    esp,0x10
c0011494:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011499:	31 d2                	xor    edx,edx
c001149b:	83 c4 08             	add    esp,0x8
c001149e:	5b                   	pop    ebx
c001149f:	c3                   	ret    

c00114a0 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00114a0:	55                   	push   ebp
c00114a1:	57                   	push   edi
c00114a2:	56                   	push   esi
c00114a3:	53                   	push   ebx
c00114a4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00114aa:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00114b1:	8a 1e                	mov    bl,BYTE PTR [esi]
c00114b3:	8d 6e 01             	lea    ebp,[esi+0x1]
c00114b6:	80 fb 40             	cmp    bl,0x40
c00114b9:	75 1b                	jne    c00114d6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c00114bb:	8a 16                	mov    dl,BYTE PTR [esi]
c00114bd:	84 d2                	test   dl,dl
c00114bf:	0f 84 f1 00 00 00    	je     c00115b6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00114c5:	8d 46 01             	lea    eax,[esi+0x1]
c00114c8:	80 fa 3a             	cmp    dl,0x3a
c00114cb:	74 04                	je     c00114d1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c00114cd:	89 c6                	mov    esi,eax
c00114cf:	eb ea                	jmp    c00114bb <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00114d1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00114d4:	89 c6                	mov    esi,eax
c00114d6:	50                   	push   eax
c00114d7:	6a 40                	push   0x40
c00114d9:	6a 00                	push   0x0
c00114db:	8d 44 24 24          	lea    eax,[esp+0x24]
c00114df:	50                   	push   eax
c00114e0:	e8 eb ef fe ff       	call   c00004d0 <memset>
c00114e5:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00114ec:	31 c0                	xor    eax,eax
c00114ee:	83 c4 10             	add    esp,0x10
c00114f1:	8a 0f                	mov    cl,BYTE PTR [edi]
c00114f3:	84 c9                	test   cl,cl
c00114f5:	0f 84 bb 00 00 00    	je     c00115b6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00114fb:	3d c7 00 00 00       	cmp    eax,0xc7
c0011500:	0f 8f b0 00 00 00    	jg     c00115b6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011506:	80 f9 0a             	cmp    cl,0xa
c0011509:	0f 85 98 00 00 00    	jne    c00115a7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001150f:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0011514:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0011518:	a8 df                	test   al,0xdf
c001151a:	0f 94 c1             	sete   cl
c001151d:	3c 23                	cmp    al,0x23
c001151f:	0f 94 c2             	sete   dl
c0011522:	08 d1                	or     cl,dl
c0011524:	75 4a                	jne    c0011570 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011526:	8d 50 f7             	lea    edx,[eax-0x9]
c0011529:	80 fa 01             	cmp    dl,0x1
c001152c:	76 42                	jbe    c0011570 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001152e:	3c 5b                	cmp    al,0x5b
c0011530:	75 42                	jne    c0011574 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0011532:	80 fb 40             	cmp    bl,0x40
c0011535:	75 39                	jne    c0011570 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011537:	83 ec 0c             	sub    esp,0xc
c001153a:	8d 54 24 65          	lea    edx,[esp+0x65]
c001153e:	52                   	push   edx
c001153f:	e8 fc ef fe ff       	call   c0000540 <strlen>
c0011544:	83 c4 10             	add    esp,0x10
c0011547:	83 f8 3f             	cmp    eax,0x3f
c001154a:	77 6a                	ja     c00115b6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001154c:	50                   	push   eax
c001154d:	50                   	push   eax
c001154e:	8d 54 24 61          	lea    edx,[esp+0x61]
c0011552:	52                   	push   edx
c0011553:	8d 54 24 24          	lea    edx,[esp+0x24]
c0011557:	52                   	push   edx
c0011558:	e8 a3 f0 fe ff       	call   c0000600 <strcpy>
c001155d:	58                   	pop    eax
c001155e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0011562:	52                   	push   edx
c0011563:	e8 d8 ef fe ff       	call   c0000540 <strlen>
c0011568:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001156d:	83 c4 10             	add    esp,0x10
c0011570:	31 d2                	xor    edx,edx
c0011572:	eb 3a                	jmp    c00115ae <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0011574:	80 fb 40             	cmp    bl,0x40
c0011577:	74 06                	je     c001157f <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0011579:	8d 44 24 58          	lea    eax,[esp+0x58]
c001157d:	eb 20                	jmp    c001159f <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001157f:	50                   	push   eax
c0011580:	50                   	push   eax
c0011581:	55                   	push   ebp
c0011582:	8d 44 24 24          	lea    eax,[esp+0x24]
c0011586:	50                   	push   eax
c0011587:	e8 54 f1 fe ff       	call   c00006e0 <strcmp>
c001158c:	83 c4 10             	add    esp,0x10
c001158f:	85 c0                	test   eax,eax
c0011591:	75 dd                	jne    c0011570 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011593:	eb e4                	jmp    c0011579 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0011595:	8d 50 01             	lea    edx,[eax+0x1]
c0011598:	80 f9 3d             	cmp    cl,0x3d
c001159b:	74 1d                	je     c00115ba <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001159d:	89 d0                	mov    eax,edx
c001159f:	8a 08                	mov    cl,BYTE PTR [eax]
c00115a1:	84 c9                	test   cl,cl
c00115a3:	75 f0                	jne    c0011595 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c00115a5:	eb 0f                	jmp    c00115b6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00115a7:	8d 50 01             	lea    edx,[eax+0x1]
c00115aa:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00115ae:	47                   	inc    edi
c00115af:	89 d0                	mov    eax,edx
c00115b1:	e9 3b ff ff ff       	jmp    c00114f1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c00115b6:	31 c0                	xor    eax,eax
c00115b8:	eb 33                	jmp    c00115ed <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c00115ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00115be:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00115c1:	50                   	push   eax
c00115c2:	50                   	push   eax
c00115c3:	8d 44 24 60          	lea    eax,[esp+0x60]
c00115c7:	50                   	push   eax
c00115c8:	56                   	push   esi
c00115c9:	e8 12 f1 fe ff       	call   c00006e0 <strcmp>
c00115ce:	83 c4 10             	add    esp,0x10
c00115d1:	85 c0                	test   eax,eax
c00115d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00115d7:	75 97                	jne    c0011570 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00115d9:	51                   	push   ecx
c00115da:	51                   	push   ecx
c00115db:	52                   	push   edx
c00115dc:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00115e3:	e8 18 f0 fe ff       	call   c0000600 <strcpy>
c00115e8:	83 c4 10             	add    esp,0x10
c00115eb:	b0 01                	mov    al,0x1
c00115ed:	81 c4 2c 01 00 00    	add    esp,0x12c
c00115f3:	5b                   	pop    ebx
c00115f4:	5e                   	pop    esi
c00115f5:	5f                   	pop    edi
c00115f6:	5d                   	pop    ebp
c00115f7:	c3                   	ret    

c00115f8 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00115f8:	57                   	push   edi
c00115f9:	56                   	push   esi
c00115fa:	53                   	push   ebx
c00115fb:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0011601:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0011608:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001160f:	53                   	push   ebx
c0011610:	e8 2b ef fe ff       	call   c0000540 <strlen>
c0011615:	89 34 24             	mov    DWORD PTR [esp],esi
c0011618:	89 c7                	mov    edi,eax
c001161a:	e8 21 ef fe ff       	call   c0000540 <strlen>
c001161f:	83 c4 10             	add    esp,0x10
c0011622:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0011626:	3d ff 00 00 00       	cmp    eax,0xff
c001162b:	0f 87 d3 00 00 00    	ja     c0011704 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0011631:	57                   	push   edi
c0011632:	57                   	push   edi
c0011633:	56                   	push   esi
c0011634:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0011638:	56                   	push   esi
c0011639:	e8 c2 ef fe ff       	call   c0000600 <strcpy>
c001163e:	58                   	pop    eax
c001163f:	5a                   	pop    edx
c0011640:	68 c9 f2 01 c0       	push   0xc001f2c9
c0011645:	56                   	push   esi
c0011646:	e8 75 f1 fe ff       	call   c00007c0 <strcat>
c001164b:	59                   	pop    ecx
c001164c:	5f                   	pop    edi
c001164d:	53                   	push   ebx
c001164e:	56                   	push   esi
c001164f:	e8 6c f1 fe ff       	call   c00007c0 <strcat>
c0011654:	58                   	pop    eax
c0011655:	5a                   	pop    edx
c0011656:	68 2c f0 01 c0       	push   0xc001f02c
c001165b:	56                   	push   esi
c001165c:	e8 5f f1 fe ff       	call   c00007c0 <strcat>
c0011661:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011668:	e8 b4 61 ff ff       	call   c0007821 <malloc>
c001166d:	83 c4 0c             	add    esp,0xc
c0011670:	89 c3                	mov    ebx,eax
c0011672:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c0011678:	56                   	push   esi
c0011679:	50                   	push   eax
c001167a:	e8 b1 94 ff ff       	call   c000ab30 <File::File(char const*, Process*)>
c001167f:	83 c4 10             	add    esp,0x10
c0011682:	85 db                	test   ebx,ebx
c0011684:	74 7e                	je     c0011704 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0011686:	51                   	push   ecx
c0011687:	51                   	push   ecx
c0011688:	6a 01                	push   0x1
c001168a:	53                   	push   ebx
c001168b:	e8 60 95 ff ff       	call   c000abf0 <File::open(FileOpenMode)>
c0011690:	83 c4 10             	add    esp,0x10
c0011693:	85 c0                	test   eax,eax
c0011695:	74 08                	je     c001169f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0011697:	83 ec 0c             	sub    esp,0xc
c001169a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001169c:	53                   	push   ebx
c001169d:	eb 5f                	jmp    c00116fe <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001169f:	52                   	push   edx
c00116a0:	8d 44 24 17          	lea    eax,[esp+0x17]
c00116a4:	50                   	push   eax
c00116a5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00116a9:	50                   	push   eax
c00116aa:	53                   	push   ebx
c00116ab:	e8 ec 97 ff ff       	call   c000ae9c <File::stat(unsigned long long*, bool*)>
c00116b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00116b4:	83 c4 10             	add    esp,0x10
c00116b7:	89 c1                	mov    ecx,eax
c00116b9:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00116bd:	74 31                	je     c00116f0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00116bf:	83 ec 0c             	sub    esp,0xc
c00116c2:	50                   	push   eax
c00116c3:	e8 59 61 ff ff       	call   c0007821 <malloc>
c00116c8:	89 c6                	mov    esi,eax
c00116ca:	58                   	pop    eax
c00116cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116cd:	8d 54 24 20          	lea    edx,[esp+0x20]
c00116d1:	52                   	push   edx
c00116d2:	56                   	push   esi
c00116d3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00116d7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00116db:	53                   	push   ebx
c00116dc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00116df:	83 c4 20             	add    esp,0x20
c00116e2:	85 c0                	test   eax,eax
c00116e4:	75 0a                	jne    c00116f0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00116e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00116ea:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00116ee:	74 18                	je     c0011708 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00116f0:	83 ec 0c             	sub    esp,0xc
c00116f3:	53                   	push   ebx
c00116f4:	e8 55 95 ff ff       	call   c000ac4e <File::close()>
c00116f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116fe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011701:	83 c4 10             	add    esp,0x10
c0011704:	31 c0                	xor    eax,eax
c0011706:	eb 3b                	jmp    c0011743 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0011708:	83 ec 0c             	sub    esp,0xc
c001170b:	53                   	push   ebx
c001170c:	e8 3d 95 ff ff       	call   c000ac4e <File::close()>
c0011711:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011713:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011716:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011719:	83 c4 0c             	add    esp,0xc
c001171c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0011723:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001172a:	56                   	push   esi
c001172b:	e8 70 fd ff ff       	call   c00114a0 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0011730:	89 34 24             	mov    DWORD PTR [esp],esi
c0011733:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011737:	e8 f5 60 ff ff       	call   c0007831 <free>
c001173c:	83 c4 10             	add    esp,0x10
c001173f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011743:	81 c4 20 01 00 00    	add    esp,0x120
c0011749:	5b                   	pop    ebx
c001174a:	5e                   	pop    esi
c001174b:	5f                   	pop    edi
c001174c:	c3                   	ret    

c001174d <Reg::getLine(char*, char*, char*)>:
c001174d:	57                   	push   edi
c001174e:	56                   	push   esi
c001174f:	53                   	push   ebx
c0011750:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011754:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0011758:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001175c:	57                   	push   edi
c001175d:	56                   	push   esi
c001175e:	53                   	push   ebx
c001175f:	68 31 f0 01 c0       	push   0xc001f031
c0011764:	e8 8f fe ff ff       	call   c00115f8 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0011769:	83 c4 10             	add    esp,0x10
c001176c:	84 c0                	test   al,al
c001176e:	75 10                	jne    c0011780 <Reg::getLine(char*, char*, char*)+0x33>
c0011770:	57                   	push   edi
c0011771:	56                   	push   esi
c0011772:	53                   	push   ebx
c0011773:	68 56 f0 01 c0       	push   0xc001f056
c0011778:	e8 7b fe ff ff       	call   c00115f8 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001177d:	83 c4 10             	add    esp,0x10
c0011780:	5b                   	pop    ebx
c0011781:	5e                   	pop    esi
c0011782:	5f                   	pop    edi
c0011783:	c3                   	ret    

c0011784 <Reg::readInt(char*, char*, int*)>:
c0011784:	55                   	push   ebp
c0011785:	57                   	push   edi
c0011786:	56                   	push   esi
c0011787:	53                   	push   ebx
c0011788:	81 ec f0 00 00 00    	sub    esp,0xf0
c001178e:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0011792:	57                   	push   edi
c0011793:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001179a:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00117a1:	e8 a7 ff ff ff       	call   c001174d <Reg::getLine(char*, char*, char*)>
c00117a6:	83 c4 10             	add    esp,0x10
c00117a9:	84 c0                	test   al,al
c00117ab:	0f 84 b3 00 00 00    	je     c0011864 <Reg::readInt(char*, char*, int*)+0xe0>
c00117b1:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00117b5:	80 fa 2b             	cmp    dl,0x2b
c00117b8:	74 0c                	je     c00117c6 <Reg::readInt(char*, char*, int*)+0x42>
c00117ba:	80 fa 2d             	cmp    dl,0x2d
c00117bd:	75 0e                	jne    c00117cd <Reg::readInt(char*, char*, int*)+0x49>
c00117bf:	ba 01 00 00 00       	mov    edx,0x1
c00117c4:	eb 0b                	jmp    c00117d1 <Reg::readInt(char*, char*, int*)+0x4d>
c00117c6:	ba 01 00 00 00       	mov    edx,0x1
c00117cb:	eb 02                	jmp    c00117cf <Reg::readInt(char*, char*, int*)+0x4b>
c00117cd:	31 d2                	xor    edx,edx
c00117cf:	31 c0                	xor    eax,eax
c00117d1:	be 0a 00 00 00       	mov    esi,0xa
c00117d6:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00117db:	75 20                	jne    c00117fd <Reg::readInt(char*, char*, int*)+0x79>
c00117dd:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00117e1:	80 f9 78             	cmp    cl,0x78
c00117e4:	75 0a                	jne    c00117f0 <Reg::readInt(char*, char*, int*)+0x6c>
c00117e6:	83 c2 02             	add    edx,0x2
c00117e9:	be 10 00 00 00       	mov    esi,0x10
c00117ee:	eb 0d                	jmp    c00117fd <Reg::readInt(char*, char*, int*)+0x79>
c00117f0:	80 f9 62             	cmp    cl,0x62
c00117f3:	75 08                	jne    c00117fd <Reg::readInt(char*, char*, int*)+0x79>
c00117f5:	83 c2 02             	add    edx,0x2
c00117f8:	be 02 00 00 00       	mov    esi,0x2
c00117fd:	01 d7                	add    edi,edx
c00117ff:	31 d2                	xor    edx,edx
c0011801:	8a 1f                	mov    bl,BYTE PTR [edi]
c0011803:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0011807:	80 fb 0d             	cmp    bl,0xd
c001180a:	0f 94 c3             	sete   bl
c001180d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011812:	0f 94 c1             	sete   cl
c0011815:	08 cb                	or     bl,cl
c0011817:	75 3a                	jne    c0011853 <Reg::readInt(char*, char*, int*)+0xcf>
c0011819:	0f af d6             	imul   edx,esi
c001181c:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0011821:	83 fe 10             	cmp    esi,0x10
c0011824:	75 26                	jne    c001184c <Reg::readInt(char*, char*, int*)+0xc8>
c0011826:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001182a:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001182d:	89 e9                	mov    ecx,ebp
c001182f:	80 f9 05             	cmp    cl,0x5
c0011832:	77 06                	ja     c001183a <Reg::readInt(char*, char*, int*)+0xb6>
c0011834:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0011838:	eb 16                	jmp    c0011850 <Reg::readInt(char*, char*, int*)+0xcc>
c001183a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001183e:	83 e9 61             	sub    ecx,0x61
c0011841:	80 f9 05             	cmp    cl,0x5
c0011844:	77 06                	ja     c001184c <Reg::readInt(char*, char*, int*)+0xc8>
c0011846:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001184a:	eb 04                	jmp    c0011850 <Reg::readInt(char*, char*, int*)+0xcc>
c001184c:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0011850:	47                   	inc    edi
c0011851:	eb ae                	jmp    c0011801 <Reg::readInt(char*, char*, int*)+0x7d>
c0011853:	84 c0                	test   al,al
c0011855:	74 02                	je     c0011859 <Reg::readInt(char*, char*, int*)+0xd5>
c0011857:	f7 da                	neg    edx
c0011859:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0011860:	89 10                	mov    DWORD PTR [eax],edx
c0011862:	88 d8                	mov    al,bl
c0011864:	81 c4 ec 00 00 00    	add    esp,0xec
c001186a:	5b                   	pop    ebx
c001186b:	5e                   	pop    esi
c001186c:	5f                   	pop    edi
c001186d:	5d                   	pop    ebp
c001186e:	c3                   	ret    

c001186f <Reg::readString(char*, char*, char*, int)>:
c001186f:	57                   	push   edi
c0011870:	56                   	push   esi
c0011871:	53                   	push   ebx
c0011872:	81 ec d4 00 00 00    	sub    esp,0xd4
c0011878:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001187f:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0011883:	57                   	push   edi
c0011884:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001188b:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0011892:	e8 b6 fe ff ff       	call   c001174d <Reg::getLine(char*, char*, char*)>
c0011897:	83 c4 10             	add    esp,0x10
c001189a:	89 c6                	mov    esi,eax
c001189c:	84 c0                	test   al,al
c001189e:	74 44                	je     c00118e4 <Reg::readString(char*, char*, char*, int)+0x75>
c00118a0:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00118a7:	31 c0                	xor    eax,eax
c00118a9:	4a                   	dec    edx
c00118aa:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00118ad:	84 c9                	test   cl,cl
c00118af:	74 0f                	je     c00118c0 <Reg::readString(char*, char*, char*, int)+0x51>
c00118b1:	39 c2                	cmp    edx,eax
c00118b3:	7e 0b                	jle    c00118c0 <Reg::readString(char*, char*, char*, int)+0x51>
c00118b5:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00118b8:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00118bd:	40                   	inc    eax
c00118be:	eb ea                	jmp    c00118aa <Reg::readString(char*, char*, char*, int)+0x3b>
c00118c0:	83 ec 0c             	sub    esp,0xc
c00118c3:	53                   	push   ebx
c00118c4:	e8 77 ec fe ff       	call   c0000540 <strlen>
c00118c9:	83 c4 10             	add    esp,0x10
c00118cc:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00118d1:	75 11                	jne    c00118e4 <Reg::readString(char*, char*, char*, int)+0x75>
c00118d3:	83 ec 0c             	sub    esp,0xc
c00118d6:	53                   	push   ebx
c00118d7:	e8 64 ec fe ff       	call   c0000540 <strlen>
c00118dc:	83 c4 10             	add    esp,0x10
c00118df:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00118e4:	81 c4 d0 00 00 00    	add    esp,0xd0
c00118ea:	89 f0                	mov    eax,esi
c00118ec:	5b                   	pop    ebx
c00118ed:	5e                   	pop    esi
c00118ee:	5f                   	pop    edi
c00118ef:	c3                   	ret    

c00118f0 <Reg::readBool(char*, char*, bool*)>:
c00118f0:	83 ec 20             	sub    esp,0x20
c00118f3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00118f7:	50                   	push   eax
c00118f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011900:	e8 7f fe ff ff       	call   c0011784 <Reg::readInt(char*, char*, int*)>
c0011905:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001190a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001190e:	0f 95 02             	setne  BYTE PTR [edx]
c0011911:	83 c4 2c             	add    esp,0x2c
c0011914:	c3                   	ret    

c0011915 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0011915:	53                   	push   ebx
c0011916:	83 ec 1c             	sub    esp,0x1c
c0011919:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001191d:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011921:	50                   	push   eax
c0011922:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011926:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001192a:	e8 c1 ff ff ff       	call   c00118f0 <Reg::readBool(char*, char*, bool*)>
c001192f:	83 c4 10             	add    esp,0x10
c0011932:	84 c0                	test   al,al
c0011934:	74 04                	je     c001193a <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0011936:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001193a:	88 d8                	mov    al,bl
c001193c:	83 c4 18             	add    esp,0x18
c001193f:	5b                   	pop    ebx
c0011940:	c3                   	ret    

c0011941 <Reg::readIntWithDefault(char*, char*, int)>:
c0011941:	53                   	push   ebx
c0011942:	83 ec 1c             	sub    esp,0x1c
c0011945:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011949:	8d 44 24 10          	lea    eax,[esp+0x10]
c001194d:	50                   	push   eax
c001194e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011952:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011956:	e8 29 fe ff ff       	call   c0011784 <Reg::readInt(char*, char*, int*)>
c001195b:	83 c4 10             	add    esp,0x10
c001195e:	84 c0                	test   al,al
c0011960:	74 04                	je     c0011966 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0011962:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011966:	89 d8                	mov    eax,ebx
c0011968:	83 c4 18             	add    esp,0x18
c001196b:	5b                   	pop    ebx
c001196c:	c3                   	ret    

c001196d <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001196d:	57                   	push   edi
c001196e:	56                   	push   esi
c001196f:	56                   	push   esi
c0011970:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011974:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011978:	56                   	push   esi
c0011979:	57                   	push   edi
c001197a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001197e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011982:	e8 e8 fe ff ff       	call   c001186f <Reg::readString(char*, char*, char*, int)>
c0011987:	83 c4 10             	add    esp,0x10
c001198a:	84 c0                	test   al,al
c001198c:	75 1a                	jne    c00119a8 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001198e:	51                   	push   ecx
c001198f:	56                   	push   esi
c0011990:	6a 00                	push   0x0
c0011992:	57                   	push   edi
c0011993:	e8 38 eb fe ff       	call   c00004d0 <memset>
c0011998:	8d 4e ff             	lea    ecx,[esi-0x1]
c001199b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001199f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00119a1:	83 c4 10             	add    esp,0x10
c00119a4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00119a8:	89 f8                	mov    eax,edi
c00119aa:	5a                   	pop    edx
c00119ab:	5e                   	pop    esi
c00119ac:	5f                   	pop    edi
c00119ad:	c3                   	ret    

c00119ae <SysEject(regs*)>:
c00119ae:	83 ec 0c             	sub    esp,0xc
c00119b1:	83 ca ff             	or     edx,0xffffffff
c00119b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119b8:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00119bb:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00119c0:	83 e9 41             	sub    ecx,0x41
c00119c3:	83 f9 19             	cmp    ecx,0x19
c00119c6:	77 18                	ja     c00119e0 <SysEject(regs*)+0x32>
c00119c8:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c00119cf:	85 c9                	test   ecx,ecx
c00119d1:	74 0d                	je     c00119e0 <SysEject(regs*)+0x32>
c00119d3:	83 ec 0c             	sub    esp,0xc
c00119d6:	51                   	push   ecx
c00119d7:	e8 8a b2 ff ff       	call   c000cc66 <LogicalDisk::eject()>
c00119dc:	83 c4 10             	add    esp,0x10
c00119df:	99                   	cdq    
c00119e0:	83 c4 0c             	add    esp,0xc
c00119e3:	c3                   	ret    

c00119e4 <SysExit(regs*)>:
c00119e4:	83 ec 18             	sub    esp,0x18
c00119e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00119eb:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00119ee:	e8 11 27 00 00       	call   c0014104 <terminateTask(int)>
c00119f3:	83 c8 ff             	or     eax,0xffffffff
c00119f6:	83 c4 1c             	add    esp,0x1c
c00119f9:	89 c2                	mov    edx,eax
c00119fb:	c3                   	ret    

c00119fc <SysGetCwd(regs*)>:
c00119fc:	83 ec 10             	sub    esp,0x10
c00119ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011a03:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0011a06:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011a09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a0e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011a11:	e8 1c 8f ff ff       	call   c000a932 <Fs::getcwd(Process*, char*, int)>
c0011a16:	83 c4 1c             	add    esp,0x1c
c0011a19:	99                   	cdq    
c0011a1a:	c3                   	ret    

c0011a1b <SysGetPID(regs*)>:
c0011a1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a20:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a23:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a25:	99                   	cdq    
c0011a26:	c3                   	ret    

c0011a27 <SysGetRAMData(regs*)>:
c0011a27:	8b 0d e8 2e 02 c0    	mov    ecx,DWORD PTR ds:0xc0022ee8
c0011a2d:	69 05 e4 2e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0022ee4,0xc8
c0011a37:	99                   	cdq    
c0011a38:	f7 f9                	idiv   ecx
c0011a3a:	c1 e0 18             	shl    eax,0x18
c0011a3d:	09 c8                	or     eax,ecx
c0011a3f:	99                   	cdq    
c0011a40:	c3                   	ret    

c0011a41 <SysGetVGAPtr(regs*)>:
c0011a41:	55                   	push   ebp
c0011a42:	57                   	push   edi
c0011a43:	56                   	push   esi
c0011a44:	53                   	push   ebx
c0011a45:	83 ec 18             	sub    esp,0x18
c0011a48:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011a4c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0011a4f:	e8 b0 21 00 00       	call   c0013c04 <Thr::processFromPID(int)>
c0011a54:	83 c4 10             	add    esp,0x10
c0011a57:	89 c1                	mov    ecx,eax
c0011a59:	b8 01 00 00 00       	mov    eax,0x1
c0011a5e:	85 c9                	test   ecx,ecx
c0011a60:	74 57                	je     c0011ab9 <SysGetVGAPtr(regs*)+0x78>
c0011a62:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0011a68:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0011a6c:	74 0c                	je     c0011a7a <SysGetVGAPtr(regs*)+0x39>
c0011a6e:	83 ec 0c             	sub    esp,0xc
c0011a71:	55                   	push   ebp
c0011a72:	e8 e8 69 ff ff       	call   c000845f <setActiveTerminal(VgaText*)>
c0011a77:	83 c4 10             	add    esp,0x10
c0011a7a:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0011a7d:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011a80:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0011a85:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011a87:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0011a8a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a8d:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0011a93:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a96:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0011a99:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0011a9f:	50                   	push   eax
c0011aa0:	50                   	push   eax
c0011aa1:	68 71 f0 01 c0       	push   0xc001f071
c0011aa6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011aa9:	05 a8 0f 00 00       	add    eax,0xfa8
c0011aae:	50                   	push   eax
c0011aaf:	e8 4c eb fe ff       	call   c0000600 <strcpy>
c0011ab4:	83 c4 10             	add    esp,0x10
c0011ab7:	31 c0                	xor    eax,eax
c0011ab9:	83 c4 0c             	add    esp,0xc
c0011abc:	31 d2                	xor    edx,edx
c0011abe:	5b                   	pop    ebx
c0011abf:	5e                   	pop    esi
c0011ac0:	5f                   	pop    edi
c0011ac1:	5d                   	pop    ebp
c0011ac2:	c3                   	ret    

c0011ac3 <SysLoadDLL(regs*)>:
c0011ac3:	56                   	push   esi
c0011ac4:	53                   	push   ebx
c0011ac5:	31 d2                	xor    edx,edx
c0011ac7:	51                   	push   ecx
c0011ac8:	b8 01 00 00 00       	mov    eax,0x1
c0011acd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011ad1:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0011ad5:	0f 84 8c 00 00 00    	je     c0011b67 <SysLoadDLL(regs*)+0xa4>
c0011adb:	83 ec 0c             	sub    esp,0xc
c0011ade:	68 14 01 00 00       	push   0x114
c0011ae3:	e8 39 5d ff ff       	call   c0007821 <malloc>
c0011ae8:	83 c4 0c             	add    esp,0xc
c0011aeb:	89 c3                	mov    ebx,eax
c0011aed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011af2:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011af5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011af8:	53                   	push   ebx
c0011af9:	e8 32 90 ff ff       	call   c000ab30 <File::File(char const*, Process*)>
c0011afe:	83 c4 10             	add    esp,0x10
c0011b01:	31 d2                	xor    edx,edx
c0011b03:	b8 02 00 00 00       	mov    eax,0x2
c0011b08:	85 db                	test   ebx,ebx
c0011b0a:	74 5b                	je     c0011b67 <SysLoadDLL(regs*)+0xa4>
c0011b0c:	83 ec 0c             	sub    esp,0xc
c0011b0f:	53                   	push   ebx
c0011b10:	e8 49 93 ff ff       	call   c000ae5e <File::exists()>
c0011b15:	83 c4 10             	add    esp,0x10
c0011b18:	84 c0                	test   al,al
c0011b1a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011b1c:	75 11                	jne    c0011b2f <SysLoadDLL(regs*)+0x6c>
c0011b1e:	83 ec 0c             	sub    esp,0xc
c0011b21:	53                   	push   ebx
c0011b22:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b25:	83 c4 10             	add    esp,0x10
c0011b28:	b8 03 00 00 00       	mov    eax,0x3
c0011b2d:	eb 36                	jmp    c0011b65 <SysLoadDLL(regs*)+0xa2>
c0011b2f:	83 ec 0c             	sub    esp,0xc
c0011b32:	53                   	push   ebx
c0011b33:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b36:	58                   	pop    eax
c0011b37:	5a                   	pop    edx
c0011b38:	6a 00                	push   0x0
c0011b3a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011b3d:	e8 74 12 00 00       	call   c0012db6 <Thr::loadDLL(char const*, bool)>
c0011b42:	83 c4 10             	add    esp,0x10
c0011b45:	89 c1                	mov    ecx,eax
c0011b47:	31 d2                	xor    edx,edx
c0011b49:	b8 04 00 00 00       	mov    eax,0x4
c0011b4e:	85 c9                	test   ecx,ecx
c0011b50:	74 15                	je     c0011b67 <SysLoadDLL(regs*)+0xa4>
c0011b52:	53                   	push   ebx
c0011b53:	53                   	push   ebx
c0011b54:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0011b5a:	51                   	push   ecx
c0011b5b:	e8 87 14 00 00       	call   c0012fe7 <Thr::executeDLL(unsigned long, void*)>
c0011b60:	83 c4 10             	add    esp,0x10
c0011b63:	31 c0                	xor    eax,eax
c0011b65:	31 d2                	xor    edx,edx
c0011b67:	59                   	pop    ecx
c0011b68:	5b                   	pop    ebx
c0011b69:	5e                   	pop    esi
c0011b6a:	c3                   	ret    

c0011b6b <SysRead(regs*)>:
c0011b6b:	57                   	push   edi
c0011b6c:	56                   	push   esi
c0011b6d:	53                   	push   ebx
c0011b6e:	83 ec 10             	sub    esp,0x10
c0011b71:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011b75:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b78:	83 f8 02             	cmp    eax,0x2
c0011b7b:	77 10                	ja     c0011b8d <SysRead(regs*)+0x22>
c0011b7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b82:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b85:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011b8b:	eb 0e                	jmp    c0011b9b <SysRead(regs*)+0x30>
c0011b8d:	83 ec 0c             	sub    esp,0xc
c0011b90:	50                   	push   eax
c0011b91:	e8 11 76 ff ff       	call   c00091a7 <getFromFileDescriptor(int)>
c0011b96:	83 c4 10             	add    esp,0x10
c0011b99:	89 c1                	mov    ecx,eax
c0011b9b:	83 c8 ff             	or     eax,0xffffffff
c0011b9e:	85 c9                	test   ecx,ecx
c0011ba0:	89 c2                	mov    edx,eax
c0011ba2:	74 28                	je     c0011bcc <SysRead(regs*)+0x61>
c0011ba4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011bac:	31 ff                	xor    edi,edi
c0011bae:	83 ec 0c             	sub    esp,0xc
c0011bb1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011bb3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011bb7:	52                   	push   edx
c0011bb8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011bbb:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011bbe:	57                   	push   edi
c0011bbf:	56                   	push   esi
c0011bc0:	51                   	push   ecx
c0011bc1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011bc4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bc8:	83 c4 20             	add    esp,0x20
c0011bcb:	99                   	cdq    
c0011bcc:	83 c4 10             	add    esp,0x10
c0011bcf:	5b                   	pop    ebx
c0011bd0:	5e                   	pop    esi
c0011bd1:	5f                   	pop    edi
c0011bd2:	c3                   	ret    

c0011bd3 <SysRegisterSignal(regs*)>:
c0011bd3:	83 ec 18             	sub    esp,0x18
c0011bd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011bda:	6a 00                	push   0x0
c0011bdc:	6a 00                	push   0x0
c0011bde:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011be1:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011be4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011be9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bec:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011bf2:	e8 82 ea ff ff       	call   c0010679 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0011bf7:	83 c4 2c             	add    esp,0x2c
c0011bfa:	99                   	cdq    
c0011bfb:	c3                   	ret    

c0011bfc <SysSbrk(regs*)>:
c0011bfc:	56                   	push   esi
c0011bfd:	53                   	push   ebx
c0011bfe:	50                   	push   eax
c0011bff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c04:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011c08:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c0b:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0011c0e:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0011c14:	85 db                	test   ebx,ebx
c0011c16:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0011c19:	74 02                	je     c0011c1d <SysSbrk(regs*)+0x21>
c0011c1b:	79 06                	jns    c0011c23 <SysSbrk(regs*)+0x27>
c0011c1d:	89 f0                	mov    eax,esi
c0011c1f:	31 d2                	xor    edx,edx
c0011c21:	eb 2a                	jmp    c0011c4d <SysSbrk(regs*)+0x51>
c0011c23:	83 c8 ff             	or     eax,0xffffffff
c0011c26:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0011c2c:	89 c2                	mov    edx,eax
c0011c2e:	77 1d                	ja     c0011c4d <SysSbrk(regs*)+0x51>
c0011c30:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0011c36:	50                   	push   eax
c0011c37:	c1 ea 0c             	shr    edx,0xc
c0011c3a:	68 07 0c 00 00       	push   0xc07
c0011c3f:	52                   	push   edx
c0011c40:	51                   	push   ecx
c0011c41:	e8 7e 7e ff ff       	call   c0009ac4 <VAS::allocatePages(int, int)>
c0011c46:	89 f0                	mov    eax,esi
c0011c48:	31 d2                	xor    edx,edx
c0011c4a:	83 c4 10             	add    esp,0x10
c0011c4d:	59                   	pop    ecx
c0011c4e:	5b                   	pop    ebx
c0011c4f:	5e                   	pop    esi
c0011c50:	c3                   	ret    

c0011c51 <SysSetCwd(regs*)>:
c0011c51:	83 ec 14             	sub    esp,0x14
c0011c54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011c58:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011c5b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c60:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011c63:	e8 95 92 ff ff       	call   c000aefd <Fs::setcwd(Process*, char*)>
c0011c68:	83 c4 1c             	add    esp,0x1c
c0011c6b:	99                   	cdq    
c0011c6c:	c3                   	ret    

c0011c6d <SysSetTime(regs*)>:
c0011c6d:	55                   	push   ebp
c0011c6e:	31 c9                	xor    ecx,ecx
c0011c70:	57                   	push   edi
c0011c71:	bd 0c 00 00 00       	mov    ebp,0xc
c0011c76:	56                   	push   esi
c0011c77:	53                   	push   ebx
c0011c78:	31 db                	xor    ebx,ebx
c0011c7a:	83 ec 10             	sub    esp,0x10
c0011c7d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011c81:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0011c84:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0011c87:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0011c8a:	89 c2                	mov    edx,eax
c0011c8c:	66 81 ef 6c 07       	sub    di,0x76c
c0011c91:	83 e2 1f             	and    edx,0x1f
c0011c94:	c1 e7 10             	shl    edi,0x10
c0011c97:	42                   	inc    edx
c0011c98:	c1 e8 05             	shr    eax,0x5
c0011c9b:	88 d1                	mov    cl,dl
c0011c9d:	31 d2                	xor    edx,edx
c0011c9f:	f7 f5                	div    ebp
c0011ca1:	89 dd                	mov    ebp,ebx
c0011ca3:	88 d5                	mov    ch,dl
c0011ca5:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0011cab:	0f b7 c1             	movzx  eax,cx
c0011cae:	31 d2                	xor    edx,edx
c0011cb0:	09 f8                	or     eax,edi
c0011cb2:	bf 3c 00 00 00       	mov    edi,0x3c
c0011cb7:	89 c1                	mov    ecx,eax
c0011cb9:	89 f0                	mov    eax,esi
c0011cbb:	f7 f7                	div    edi
c0011cbd:	c1 e2 10             	shl    edx,0x10
c0011cc0:	09 d5                	or     ebp,edx
c0011cc2:	31 d2                	xor    edx,edx
c0011cc4:	89 eb                	mov    ebx,ebp
c0011cc6:	f7 f7                	div    edi
c0011cc8:	bf 10 0e 00 00       	mov    edi,0xe10
c0011ccd:	88 d7                	mov    bh,dl
c0011ccf:	89 f0                	mov    eax,esi
c0011cd1:	31 d2                	xor    edx,edx
c0011cd3:	f7 f7                	div    edi
c0011cd5:	bf 18 00 00 00       	mov    edi,0x18
c0011cda:	31 d2                	xor    edx,edx
c0011cdc:	f7 f7                	div    edi
c0011cde:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0011ce3:	88 d3                	mov    bl,dl
c0011ce5:	53                   	push   ebx
c0011ce6:	51                   	push   ecx
c0011ce7:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0011ced:	e8 1a 9a ff ff       	call   c000b70c <Clock::setTimeInDatetimeLocal(datetime_t)>
c0011cf2:	83 c4 1c             	add    esp,0x1c
c0011cf5:	83 f0 01             	xor    eax,0x1
c0011cf8:	5b                   	pop    ebx
c0011cf9:	0f b6 c0             	movzx  eax,al
c0011cfc:	5e                   	pop    esi
c0011cfd:	31 d2                	xor    edx,edx
c0011cff:	5f                   	pop    edi
c0011d00:	5d                   	pop    ebp
c0011d01:	c3                   	ret    

c0011d02 <SysTimezone(regs*)>:
c0011d02:	53                   	push   ebx
c0011d03:	83 ec 08             	sub    esp,0x8
c0011d06:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011d0a:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0011d0e:	75 17                	jne    c0011d27 <SysTimezone(regs*)+0x25>
c0011d10:	83 ec 0c             	sub    esp,0xc
c0011d13:	68 7b f0 01 c0       	push   0xc001f07b
c0011d18:	e8 9d 88 ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0011d1d:	83 c8 ff             	or     eax,0xffffffff
c0011d20:	83 c4 10             	add    esp,0x10
c0011d23:	89 c2                	mov    edx,eax
c0011d25:	eb 20                	jmp    c0011d47 <SysTimezone(regs*)+0x45>
c0011d27:	83 ec 0c             	sub    esp,0xc
c0011d2a:	68 90 f0 01 c0       	push   0xc001f090
c0011d2f:	e8 86 88 ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0011d34:	58                   	pop    eax
c0011d35:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011d38:	e8 2b 97 ff ff       	call   c000b468 <User::loadClockSettings(int)>
c0011d3d:	83 c4 10             	add    esp,0x10
c0011d40:	b8 01 00 00 00       	mov    eax,0x1
c0011d45:	31 d2                	xor    edx,edx
c0011d47:	83 c4 08             	add    esp,0x8
c0011d4a:	5b                   	pop    ebx
c0011d4b:	c3                   	ret    

c0011d4c <SysWrite(regs*)>:
c0011d4c:	57                   	push   edi
c0011d4d:	56                   	push   esi
c0011d4e:	53                   	push   ebx
c0011d4f:	83 ec 10             	sub    esp,0x10
c0011d52:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d56:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d59:	83 f8 02             	cmp    eax,0x2
c0011d5c:	77 10                	ja     c0011d6e <SysWrite(regs*)+0x22>
c0011d5e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d63:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d66:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011d6c:	eb 0e                	jmp    c0011d7c <SysWrite(regs*)+0x30>
c0011d6e:	83 ec 0c             	sub    esp,0xc
c0011d71:	50                   	push   eax
c0011d72:	e8 30 74 ff ff       	call   c00091a7 <getFromFileDescriptor(int)>
c0011d77:	83 c4 10             	add    esp,0x10
c0011d7a:	89 c1                	mov    ecx,eax
c0011d7c:	83 c8 ff             	or     eax,0xffffffff
c0011d7f:	85 c9                	test   ecx,ecx
c0011d81:	89 c2                	mov    edx,eax
c0011d83:	74 28                	je     c0011dad <SysWrite(regs*)+0x61>
c0011d85:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d8d:	31 ff                	xor    edi,edi
c0011d8f:	83 ec 0c             	sub    esp,0xc
c0011d92:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011d94:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011d98:	52                   	push   edx
c0011d99:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011d9c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011d9f:	57                   	push   edi
c0011da0:	56                   	push   esi
c0011da1:	51                   	push   ecx
c0011da2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011da5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011da9:	83 c4 20             	add    esp,0x20
c0011dac:	99                   	cdq    
c0011dad:	83 c4 10             	add    esp,0x10
c0011db0:	5b                   	pop    ebx
c0011db1:	5e                   	pop    esi
c0011db2:	5f                   	pop    edi
c0011db3:	c3                   	ret    

c0011db4 <SysWsbe(regs*)>:
c0011db4:	57                   	push   edi
c0011db5:	b9 0b 00 00 00       	mov    ecx,0xb
c0011dba:	56                   	push   esi
c0011dbb:	be cf f0 01 c0       	mov    esi,0xc001f0cf
c0011dc0:	53                   	push   ebx
c0011dc1:	83 ec 30             	sub    esp,0x30
c0011dc4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011dc8:	fc                   	cld    
c0011dc9:	83 ec 0c             	sub    esp,0xc
c0011dcc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011dce:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0011dd2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011dd7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011dda:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0011de0:	8b 06                	mov    eax,DWORD PTR [esi]
c0011de2:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0011de5:	57                   	push   edi
c0011de6:	e8 55 e7 fe ff       	call   c0000540 <strlen>
c0011deb:	5a                   	pop    edx
c0011dec:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0011df0:	52                   	push   edx
c0011df1:	31 d2                	xor    edx,edx
c0011df3:	57                   	push   edi
c0011df4:	52                   	push   edx
c0011df5:	50                   	push   eax
c0011df6:	56                   	push   esi
c0011df7:	ff d3                	call   ebx
c0011df9:	83 c4 14             	add    esp,0x14
c0011dfc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011e00:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011e03:	e8 fc 22 00 00       	call   c0014104 <terminateTask(int)>
c0011e08:	83 c4 40             	add    esp,0x40
c0011e0b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011e10:	5b                   	pop    ebx
c0011e11:	31 d2                	xor    edx,edx
c0011e13:	5e                   	pop    esi
c0011e14:	5f                   	pop    edi
c0011e15:	c3                   	ret    

c0011e16 <SysYield(regs*)>:
c0011e16:	83 ec 0c             	sub    esp,0xc
c0011e19:	fa                   	cli    
c0011e1a:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0011e20:	e8 bb 19 00 00       	call   c00137e0 <schedule()>
c0011e25:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0011e2a:	48                   	dec    eax
c0011e2b:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0011e30:	75 01                	jne    c0011e33 <SysYield(regs*)+0x1d>
c0011e32:	fb                   	sti    
c0011e33:	31 c0                	xor    eax,eax
c0011e35:	31 d2                	xor    edx,edx
c0011e37:	83 c4 0c             	add    esp,0xc
c0011e3a:	c3                   	ret    

c0011e3b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0011e3b:	55                   	push   ebp
c0011e3c:	57                   	push   edi
c0011e3d:	56                   	push   esi
c0011e3e:	53                   	push   ebx
c0011e3f:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0011e45:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0011e4d:	0f 95 c2             	setne  dl
c0011e50:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0011e58:	0f 94 c0             	sete   al
c0011e5b:	84 c2                	test   dl,al
c0011e5d:	74 34                	je     c0011e93 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011e5f:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0011e6a:	74 27                	je     c0011e93 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011e6c:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0011e73:	05 00 10 00 00       	add    eax,0x1000
c0011e78:	89 c1                	mov    ecx,eax
c0011e7a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011e7f:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0011e85:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0011e8c:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0011e93:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0011e9a:	83 ec 0c             	sub    esp,0xc
c0011e9d:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011ea3:	6a 01                	push   0x1
c0011ea5:	e8 53 74 ff ff       	call   c00092fd <Virt::allocateKernelVirtualPages(int)>
c0011eaa:	83 c4 10             	add    esp,0x10
c0011ead:	89 c3                	mov    ebx,eax
c0011eaf:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011eb5:	0f 86 25 01 00 00    	jbe    c0011fe0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0011ebb:	c1 ee 0c             	shr    esi,0xc
c0011ebe:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011ec5:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0011ec9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011ed1:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0011ed8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011edc:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0011ee3:	29 ef                	sub    edi,ebp
c0011ee5:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0011ee9:	0f 83 f8 00 00 00    	jae    c0011fe7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0011eef:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0011ef5:	76 05                	jbe    c0011efc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0011ef7:	bf 00 10 00 00       	mov    edi,0x1000
c0011efc:	83 ec 0c             	sub    esp,0xc
c0011eff:	31 d2                	xor    edx,edx
c0011f01:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011f08:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011f0a:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011f0e:	50                   	push   eax
c0011f0f:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011f13:	56                   	push   esi
c0011f14:	52                   	push   edx
c0011f15:	57                   	push   edi
c0011f16:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0011f1d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011f20:	83 c4 20             	add    esp,0x20
c0011f23:	85 c0                	test   eax,eax
c0011f25:	75 06                	jne    c0011f2d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0011f27:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011f2b:	74 13                	je     c0011f40 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0011f2d:	83 ec 0c             	sub    esp,0xc
c0011f30:	53                   	push   ebx
c0011f31:	e8 bb 76 ff ff       	call   c00095f1 <Virt::freeKernelVirtualPages(unsigned long)>
c0011f36:	83 c4 10             	add    esp,0x10
c0011f39:	31 c0                	xor    eax,eax
c0011f3b:	e9 7c 01 00 00       	jmp    c00120bc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0011f40:	fa                   	cli    
c0011f41:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0011f47:	e8 b1 5b ff ff       	call   c0007afd <Phys::allocatePage()>
c0011f4c:	6a 07                	push   0x7
c0011f4e:	89 c7                	mov    edi,eax
c0011f50:	53                   	push   ebx
c0011f51:	50                   	push   eax
c0011f52:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f57:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f5a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f60:	e8 5b 7a ff ff       	call   c00099c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011f65:	83 c4 0c             	add    esp,0xc
c0011f68:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011f6f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f75:	6a 00                	push   0x0
c0011f77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f7c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f7f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f85:	e8 a8 78 ff ff       	call   c0009832 <VAS::mapOtherVASIn(bool, VAS*)>
c0011f8a:	58                   	pop    eax
c0011f8b:	5a                   	pop    edx
c0011f8c:	68 07 0c 00 00       	push   0xc07
c0011f91:	55                   	push   ebp
c0011f92:	57                   	push   edi
c0011f93:	89 df                	mov    edi,ebx
c0011f95:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011f9c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011fa2:	6a 00                	push   0x0
c0011fa4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011fa9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011fac:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011fb2:	e8 c9 7d ff ff       	call   c0009d80 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011fb7:	b9 00 10 00 00       	mov    ecx,0x1000
c0011fbc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011fbe:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0011fc3:	83 c4 20             	add    esp,0x20
c0011fc6:	48                   	dec    eax
c0011fc7:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0011fcc:	85 c0                	test   eax,eax
c0011fce:	75 01                	jne    c0011fd1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0011fd0:	fb                   	sti    
c0011fd1:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011fd7:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011fdb:	e9 f1 fe ff ff       	jmp    c0011ed1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0011fe0:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011fe7:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011fee:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011ff4:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011ffa:	0f 86 ae 00 00 00    	jbe    c00120ae <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012000:	fa                   	cli    
c0012001:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0012007:	c1 ee 0c             	shr    esi,0xc
c001200a:	51                   	push   ecx
c001200b:	31 ff                	xor    edi,edi
c001200d:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0012014:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001201a:	6a 00                	push   0x0
c001201c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012021:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012024:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001202a:	e8 03 78 ff ff       	call   c0009832 <VAS::mapOtherVASIn(bool, VAS*)>
c001202f:	83 c4 10             	add    esp,0x10
c0012032:	e8 c6 5a ff ff       	call   c0007afd <Phys::allocatePage()>
c0012037:	47                   	inc    edi
c0012038:	6a 07                	push   0x7
c001203a:	53                   	push   ebx
c001203b:	50                   	push   eax
c001203c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012040:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012046:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0012049:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c001204f:	e8 6c 79 ff ff       	call   c00099c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012054:	58                   	pop    eax
c0012055:	5a                   	pop    edx
c0012056:	68 07 0c 00 00       	push   0xc07
c001205b:	55                   	push   ebp
c001205c:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012062:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012066:	50                   	push   eax
c0012067:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001206e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012074:	6a 00                	push   0x0
c0012076:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001207b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001207e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012084:	e8 f7 7c ff ff       	call   c0009d80 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0012089:	83 c4 1c             	add    esp,0x1c
c001208c:	68 00 10 00 00       	push   0x1000
c0012091:	6a 00                	push   0x0
c0012093:	53                   	push   ebx
c0012094:	e8 37 e4 fe ff       	call   c00004d0 <memset>
c0012099:	83 c4 10             	add    esp,0x10
c001209c:	39 fe                	cmp    esi,edi
c001209e:	77 92                	ja     c0012032 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c00120a0:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00120a5:	48                   	dec    eax
c00120a6:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00120ab:	75 01                	jne    c00120ae <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c00120ad:	fb                   	sti    
c00120ae:	83 ec 0c             	sub    esp,0xc
c00120b1:	53                   	push   ebx
c00120b2:	e8 3a 75 ff ff       	call   c00095f1 <Virt::freeKernelVirtualPages(unsigned long)>
c00120b7:	83 c4 10             	add    esp,0x10
c00120ba:	b0 01                	mov    al,0x1
c00120bc:	81 c4 2c 10 00 00    	add    esp,0x102c
c00120c2:	5b                   	pop    ebx
c00120c3:	5e                   	pop    esi
c00120c4:	5f                   	pop    edi
c00120c5:	5d                   	pop    ebp
c00120c6:	c3                   	ret    

c00120c7 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00120c7:	55                   	push   ebp
c00120c8:	57                   	push   edi
c00120c9:	56                   	push   esi
c00120ca:	53                   	push   ebx
c00120cb:	83 ec 48             	sub    esp,0x48
c00120ce:	68 14 01 00 00       	push   0x114
c00120d3:	e8 49 57 ff ff       	call   c0007821 <malloc>
c00120d8:	83 c4 0c             	add    esp,0xc
c00120db:	89 c6                	mov    esi,eax
c00120dd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00120e1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00120e5:	50                   	push   eax
c00120e6:	e8 45 8a ff ff       	call   c000ab30 <File::File(char const*, Process*)>
c00120eb:	58                   	pop    eax
c00120ec:	5a                   	pop    edx
c00120ed:	6a 01                	push   0x1
c00120ef:	56                   	push   esi
c00120f0:	e8 fb 8a ff ff       	call   c000abf0 <File::open(FileOpenMode)>
c00120f5:	83 c4 10             	add    esp,0x10
c00120f8:	85 c0                	test   eax,eax
c00120fa:	0f 85 47 01 00 00    	jne    c0012247 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012100:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0012108:	83 ec 0c             	sub    esp,0xc
c001210b:	6a 34                	push   0x34
c001210d:	e8 0f 57 ff ff       	call   c0007821 <malloc>
c0012112:	89 c3                	mov    ebx,eax
c0012114:	58                   	pop    eax
c0012115:	8b 06                	mov    eax,DWORD PTR [esi]
c0012117:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001211b:	57                   	push   edi
c001211c:	53                   	push   ebx
c001211d:	6a 00                	push   0x0
c001211f:	6a 34                	push   0x34
c0012121:	56                   	push   esi
c0012122:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012125:	83 c4 20             	add    esp,0x20
c0012128:	85 c0                	test   eax,eax
c001212a:	0f 85 17 01 00 00    	jne    c0012247 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012130:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0012136:	0f 85 0b 01 00 00    	jne    c0012247 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001213c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001213f:	85 c0                	test   eax,eax
c0012141:	0f 84 00 01 00 00    	je     c0012247 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012147:	31 d2                	xor    edx,edx
c0012149:	55                   	push   ebp
c001214a:	52                   	push   edx
c001214b:	50                   	push   eax
c001214c:	56                   	push   esi
c001214d:	e8 5c 8b ff ff       	call   c000acae <File::seek(unsigned long long)>
c0012152:	83 c4 10             	add    esp,0x10
c0012155:	85 c0                	test   eax,eax
c0012157:	0f 85 ea 00 00 00    	jne    c0012247 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001215d:	83 ec 0c             	sub    esp,0xc
c0012160:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012163:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0012167:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001216b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001216f:	0f af c2             	imul   eax,edx
c0012172:	50                   	push   eax
c0012173:	e8 a9 56 ff ff       	call   c0007821 <malloc>
c0012178:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001217a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001217e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012181:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012185:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0012189:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001218d:	0f af c2             	imul   eax,edx
c0012190:	99                   	cdq    
c0012191:	52                   	push   edx
c0012192:	50                   	push   eax
c0012193:	56                   	push   esi
c0012194:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012197:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001219a:	83 c4 20             	add    esp,0x20
c001219d:	85 c0                	test   eax,eax
c001219f:	0f 84 a2 00 00 00    	je     c0012247 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00121a5:	31 d2                	xor    edx,edx
c00121a7:	51                   	push   ecx
c00121a8:	52                   	push   edx
c00121a9:	50                   	push   eax
c00121aa:	56                   	push   esi
c00121ab:	e8 fe 8a ff ff       	call   c000acae <File::seek(unsigned long long)>
c00121b0:	83 c4 10             	add    esp,0x10
c00121b3:	85 c0                	test   eax,eax
c00121b5:	0f 85 8c 00 00 00    	jne    c0012247 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00121bb:	83 ec 0c             	sub    esp,0xc
c00121be:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00121c2:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00121c6:	31 ed                	xor    ebp,ebp
c00121c8:	0f af c2             	imul   eax,edx
c00121cb:	50                   	push   eax
c00121cc:	e8 50 56 ff ff       	call   c0007821 <malloc>
c00121d1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00121d3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00121d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00121da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00121de:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00121e2:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00121e6:	0f af c2             	imul   eax,edx
c00121e9:	99                   	cdq    
c00121ea:	52                   	push   edx
c00121eb:	50                   	push   eax
c00121ec:	56                   	push   esi
c00121ed:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00121f0:	83 c4 20             	add    esp,0x20
c00121f3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00121fb:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00121ff:	0f 86 80 00 00 00    	jbe    c0012285 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0012205:	0f b7 fd             	movzx  edi,bp
c0012208:	c1 e7 05             	shl    edi,0x5
c001220b:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001220f:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0012212:	75 6b                	jne    c001227f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0012214:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012217:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001221b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001221e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012222:	52                   	push   edx
c0012223:	31 d2                	xor    edx,edx
c0012225:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012228:	52                   	push   edx
c0012229:	50                   	push   eax
c001222a:	56                   	push   esi
c001222b:	e8 7e 8a ff ff       	call   c000acae <File::seek(unsigned long long)>
c0012230:	83 c4 10             	add    esp,0x10
c0012233:	85 c0                	test   eax,eax
c0012235:	74 17                	je     c001224e <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0012237:	83 ec 0c             	sub    esp,0xc
c001223a:	68 fb f0 01 c0       	push   0xc001f0fb
c001223f:	e8 76 83 ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0012244:	83 c4 10             	add    esp,0x10
c0012247:	31 c0                	xor    eax,eax
c0012249:	e9 87 00 00 00       	jmp    c00122d5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001224e:	83 ec 0c             	sub    esp,0xc
c0012251:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0012254:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0012257:	50                   	push   eax
c0012258:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001225c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012260:	56                   	push   esi
c0012261:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0012265:	e8 d1 fb ff ff       	call   c0011e3b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001226a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001226e:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0012272:	83 c4 20             	add    esp,0x20
c0012275:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0012279:	73 04                	jae    c001227f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001227b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001227f:	45                   	inc    ebp
c0012280:	e9 76 ff ff ff       	jmp    c00121fb <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0012285:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0012289:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001228d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012291:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0012297:	83 ec 0c             	sub    esp,0xc
c001229a:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c00122a0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122a5:	05 00 10 00 00       	add    eax,0x1000
c00122aa:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00122ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122b1:	e8 7b 55 ff ff       	call   c0007831 <free>
c00122b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00122b9:	e8 73 55 ff ff       	call   c0007831 <free>
c00122be:	58                   	pop    eax
c00122bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00122c3:	e8 69 55 ff ff       	call   c0007831 <free>
c00122c8:	89 34 24             	mov    DWORD PTR [esp],esi
c00122cb:	e8 7e 89 ff ff       	call   c000ac4e <File::close()>
c00122d0:	83 c4 10             	add    esp,0x10
c00122d3:	b0 01                	mov    al,0x1
c00122d5:	83 c4 3c             	add    esp,0x3c
c00122d8:	5b                   	pop    ebx
c00122d9:	5e                   	pop    esi
c00122da:	5f                   	pop    edi
c00122db:	5d                   	pop    ebp
c00122dc:	c3                   	ret    

c00122dd <Thr::runtimeReferenceHelper()>:
c00122dd:	83 ec 18             	sub    esp,0x18
c00122e0:	68 03 f1 01 c0       	push   0xc001f103
c00122e5:	e8 d0 82 ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c00122ea:	fa                   	cli    
c00122eb:	83 c4 10             	add    esp,0x10
c00122ee:	eb fe                	jmp    c00122ee <Thr::runtimeReferenceHelper()+0x11>

c00122f0 <Thr::getAddressOfKernelSymbol(char const*)>:
c00122f0:	57                   	push   edi
c00122f1:	56                   	push   esi
c00122f2:	53                   	push   ebx
c00122f3:	31 db                	xor    ebx,ebx
c00122f5:	39 1d 40 61 02 c0    	cmp    DWORD PTR ds:0xc0026140,ebx
c00122fb:	7e 3c                	jle    c0012339 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00122fd:	8b 34 9d c0 60 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd9f40]
c0012304:	31 ff                	xor    edi,edi
c0012306:	39 3c 9d c0 5f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffda040],edi
c001230d:	7e 27                	jle    c0012336 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001230f:	50                   	push   eax
c0012310:	50                   	push   eax
c0012311:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012315:	8b 06                	mov    eax,DWORD PTR [esi]
c0012317:	03 04 9d 40 60 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd9fc0]
c001231e:	50                   	push   eax
c001231f:	e8 bc e3 fe ff       	call   c00006e0 <strcmp>
c0012324:	83 c4 10             	add    esp,0x10
c0012327:	85 c0                	test   eax,eax
c0012329:	75 05                	jne    c0012330 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001232b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001232e:	eb 0b                	jmp    c001233b <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0012330:	83 c6 10             	add    esi,0x10
c0012333:	47                   	inc    edi
c0012334:	eb d0                	jmp    c0012306 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0012336:	43                   	inc    ebx
c0012337:	eb bc                	jmp    c00122f5 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0012339:	31 c0                	xor    eax,eax
c001233b:	5b                   	pop    ebx
c001233c:	5e                   	pop    esi
c001233d:	5f                   	pop    edi
c001233e:	c3                   	ret    

c001233f <Thr::loadKernelSymbolTable(char const*)>:
c001233f:	55                   	push   ebp
c0012340:	57                   	push   edi
c0012341:	56                   	push   esi
c0012342:	53                   	push   ebx
c0012343:	83 ec 68             	sub    esp,0x68
c0012346:	8b 35 90 61 02 c0    	mov    esi,DWORD PTR ds:0xc0026190
c001234c:	68 14 01 00 00       	push   0x114
c0012351:	e8 cb 54 ff ff       	call   c0007821 <malloc>
c0012356:	83 c4 0c             	add    esp,0xc
c0012359:	89 c3                	mov    ebx,eax
c001235b:	56                   	push   esi
c001235c:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0012360:	50                   	push   eax
c0012361:	e8 ca 87 ff ff       	call   c000ab30 <File::File(char const*, Process*)>
c0012366:	5e                   	pop    esi
c0012367:	5f                   	pop    edi
c0012368:	6a 01                	push   0x1
c001236a:	53                   	push   ebx
c001236b:	e8 80 88 ff ff       	call   c000abf0 <File::open(FileOpenMode)>
c0012370:	83 c4 10             	add    esp,0x10
c0012373:	85 c0                	test   eax,eax
c0012375:	74 0a                	je     c0012381 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0012377:	83 ec 0c             	sub    esp,0xc
c001237a:	68 25 f1 01 c0       	push   0xc001f125
c001237f:	eb 34                	jmp    c00123b5 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0012381:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0012389:	83 ec 0c             	sub    esp,0xc
c001238c:	6a 34                	push   0x34
c001238e:	e8 8e 54 ff ff       	call   c0007821 <malloc>
c0012393:	59                   	pop    ecx
c0012394:	89 c7                	mov    edi,eax
c0012396:	8d 74 24 34          	lea    esi,[esp+0x34]
c001239a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001239c:	56                   	push   esi
c001239d:	57                   	push   edi
c001239e:	6a 00                	push   0x0
c00123a0:	6a 34                	push   0x34
c00123a2:	53                   	push   ebx
c00123a3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00123a6:	83 c4 20             	add    esp,0x20
c00123a9:	85 c0                	test   eax,eax
c00123ab:	74 17                	je     c00123c4 <Thr::loadKernelSymbolTable(char const*)+0x85>
c00123ad:	83 ec 0c             	sub    esp,0xc
c00123b0:	68 3c f1 01 c0       	push   0xc001f13c
c00123b5:	e8 09 df ff ff       	call   c00102c3 <KePanic(char const*)>
c00123ba:	83 c4 10             	add    esp,0x10
c00123bd:	31 c0                	xor    eax,eax
c00123bf:	e9 31 02 00 00       	jmp    c00125f5 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00123c4:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00123ca:	75 e1                	jne    c00123ad <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00123cc:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00123cf:	85 c0                	test   eax,eax
c00123d1:	74 da                	je     c00123ad <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00123d3:	52                   	push   edx
c00123d4:	31 d2                	xor    edx,edx
c00123d6:	52                   	push   edx
c00123d7:	50                   	push   eax
c00123d8:	53                   	push   ebx
c00123d9:	e8 d0 88 ff ff       	call   c000acae <File::seek(unsigned long long)>
c00123de:	83 c4 10             	add    esp,0x10
c00123e1:	85 c0                	test   eax,eax
c00123e3:	75 c8                	jne    c00123ad <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00123e5:	83 ec 0c             	sub    esp,0xc
c00123e8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00123ec:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00123f0:	31 ed                	xor    ebp,ebp
c00123f2:	0f af c2             	imul   eax,edx
c00123f5:	50                   	push   eax
c00123f6:	e8 26 54 ff ff       	call   c0007821 <malloc>
c00123fb:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00123fd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012401:	89 34 24             	mov    DWORD PTR [esp],esi
c0012404:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012408:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001240c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012410:	0f af c2             	imul   eax,edx
c0012413:	99                   	cdq    
c0012414:	52                   	push   edx
c0012415:	50                   	push   eax
c0012416:	53                   	push   ebx
c0012417:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001241a:	83 c4 20             	add    esp,0x20
c001241d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012425:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001242d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0012435:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001243d:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0012441:	0f 86 aa 00 00 00    	jbe    c00124f1 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0012447:	0f b7 f5             	movzx  esi,bp
c001244a:	6b f6 28             	imul   esi,esi,0x28
c001244d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012451:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012454:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012458:	50                   	push   eax
c0012459:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001245d:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0012461:	8b 16                	mov    edx,DWORD PTR [esi]
c0012463:	6b c0 28             	imul   eax,eax,0x28
c0012466:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001246a:	89 d0                	mov    eax,edx
c001246c:	31 d2                	xor    edx,edx
c001246e:	52                   	push   edx
c001246f:	50                   	push   eax
c0012470:	53                   	push   ebx
c0012471:	e8 38 88 ff ff       	call   c000acae <File::seek(unsigned long long)>
c0012476:	83 c4 0c             	add    esp,0xc
c0012479:	6a 20                	push   0x20
c001247b:	6a 00                	push   0x0
c001247d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012481:	52                   	push   edx
c0012482:	e8 49 e0 fe ff       	call   c00004d0 <memset>
c0012487:	58                   	pop    eax
c0012488:	8b 03                	mov    eax,DWORD PTR [ebx]
c001248a:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001248e:	51                   	push   ecx
c001248f:	8d 54 24 40          	lea    edx,[esp+0x40]
c0012493:	52                   	push   edx
c0012494:	6a 00                	push   0x0
c0012496:	6a 1f                	push   0x1f
c0012498:	53                   	push   ebx
c0012499:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001249c:	83 c4 18             	add    esp,0x18
c001249f:	68 53 f1 01 c0       	push   0xc001f153
c00124a4:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00124a8:	52                   	push   edx
c00124a9:	e8 32 e2 fe ff       	call   c00006e0 <strcmp>
c00124ae:	83 c4 10             	add    esp,0x10
c00124b1:	85 c0                	test   eax,eax
c00124b3:	75 0f                	jne    c00124c4 <Thr::loadKernelSymbolTable(char const*)+0x185>
c00124b5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00124b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00124bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00124c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00124c4:	50                   	push   eax
c00124c5:	50                   	push   eax
c00124c6:	68 5b f1 01 c0       	push   0xc001f15b
c00124cb:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00124cf:	50                   	push   eax
c00124d0:	e8 0b e2 fe ff       	call   c00006e0 <strcmp>
c00124d5:	83 c4 10             	add    esp,0x10
c00124d8:	85 c0                	test   eax,eax
c00124da:	75 0f                	jne    c00124eb <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00124dc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00124df:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00124e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00124e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00124eb:	45                   	inc    ebp
c00124ec:	e9 4c ff ff ff       	jmp    c001243d <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00124f1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00124f6:	75 10                	jne    c0012508 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00124f8:	83 ec 0c             	sub    esp,0xc
c00124fb:	68 63 f1 01 c0       	push   0xc001f163
c0012500:	e8 be dd ff ff       	call   c00102c3 <KePanic(char const*)>
c0012505:	83 c4 10             	add    esp,0x10
c0012508:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001250d:	75 10                	jne    c001251f <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001250f:	83 ec 0c             	sub    esp,0xc
c0012512:	68 63 f1 01 c0       	push   0xc001f163
c0012517:	e8 a7 dd ff ff       	call   c00102c3 <KePanic(char const*)>
c001251c:	83 c4 10             	add    esp,0x10
c001251f:	31 d2                	xor    edx,edx
c0012521:	50                   	push   eax
c0012522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012526:	52                   	push   edx
c0012527:	50                   	push   eax
c0012528:	53                   	push   ebx
c0012529:	e8 80 87 ff ff       	call   c000acae <File::seek(unsigned long long)>
c001252e:	5a                   	pop    edx
c001252f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012533:	e8 e9 52 ff ff       	call   c0007821 <malloc>
c0012538:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001253c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012540:	31 c9                	xor    ecx,ecx
c0012542:	5e                   	pop    esi
c0012543:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012545:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0012549:	55                   	push   ebp
c001254a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001254e:	51                   	push   ecx
c001254f:	52                   	push   edx
c0012550:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012554:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0012558:	53                   	push   ebx
c0012559:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001255c:	83 c4 14             	add    esp,0x14
c001255f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012563:	e8 b9 52 ff ff       	call   c0007821 <malloc>
c0012568:	89 c6                	mov    esi,eax
c001256a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001256c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001256f:	56                   	push   esi
c0012570:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012574:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0012578:	51                   	push   ecx
c0012579:	52                   	push   edx
c001257a:	53                   	push   ebx
c001257b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001257e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012582:	8b 15 40 61 02 c0    	mov    edx,DWORD PTR ds:0xc0026140
c0012588:	83 c4 1c             	add    esp,0x1c
c001258b:	c1 e8 04             	shr    eax,0x4
c001258e:	89 04 95 c0 5f 02 c0 	mov    DWORD PTR [edx*4-0x3ffda040],eax
c0012595:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012599:	31 d2                	xor    edx,edx
c001259b:	52                   	push   edx
c001259c:	50                   	push   eax
c001259d:	53                   	push   ebx
c001259e:	e8 0b 87 ff ff       	call   c000acae <File::seek(unsigned long long)>
c00125a3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00125a5:	31 d2                	xor    edx,edx
c00125a7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00125aa:	56                   	push   esi
c00125ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00125af:	52                   	push   edx
c00125b0:	50                   	push   eax
c00125b1:	53                   	push   ebx
c00125b2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00125b5:	83 c4 14             	add    esp,0x14
c00125b8:	53                   	push   ebx
c00125b9:	e8 90 86 ff ff       	call   c000ac4e <File::close()>
c00125be:	5d                   	pop    ebp
c00125bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00125c3:	e8 69 52 ff ff       	call   c0007831 <free>
c00125c8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00125cb:	e8 61 52 ff ff       	call   c0007831 <free>
c00125d0:	a1 40 61 02 c0       	mov    eax,ds:0xc0026140
c00125d5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00125d9:	8d 50 01             	lea    edx,[eax+0x1]
c00125dc:	89 0c 85 c0 60 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9f40],ecx
c00125e3:	89 34 85 40 60 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9fc0],esi
c00125ea:	89 15 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edx
c00125f0:	83 c4 10             	add    esp,0x10
c00125f3:	b0 01                	mov    al,0x1
c00125f5:	83 c4 5c             	add    esp,0x5c
c00125f8:	5b                   	pop    ebx
c00125f9:	5e                   	pop    esi
c00125fa:	5f                   	pop    edi
c00125fb:	5d                   	pop    ebp
c00125fc:	c3                   	ret    

c00125fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00125fd:	55                   	push   ebp
c00125fe:	57                   	push   edi
c00125ff:	56                   	push   esi
c0012600:	53                   	push   ebx
c0012601:	81 ec 68 03 00 00    	sub    esp,0x368
c0012607:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001260e:	8b 1d 90 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026190
c0012614:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0012618:	68 14 01 00 00       	push   0x114
c001261d:	e8 ff 51 ff ff       	call   c0007821 <malloc>
c0012622:	83 c4 0c             	add    esp,0xc
c0012625:	89 c5                	mov    ebp,eax
c0012627:	53                   	push   ebx
c0012628:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001262f:	50                   	push   eax
c0012630:	e8 fb 84 ff ff       	call   c000ab30 <File::File(char const*, Process*)>
c0012635:	5e                   	pop    esi
c0012636:	5f                   	pop    edi
c0012637:	6a 01                	push   0x1
c0012639:	55                   	push   ebp
c001263a:	e8 b1 85 ff ff       	call   c000abf0 <File::open(FileOpenMode)>
c001263f:	83 c4 10             	add    esp,0x10
c0012642:	85 c0                	test   eax,eax
c0012644:	0f 85 a7 06 00 00    	jne    c0012cf1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001264a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0012652:	83 ec 0c             	sub    esp,0xc
c0012655:	6a 34                	push   0x34
c0012657:	e8 c5 51 ff ff       	call   c0007821 <malloc>
c001265c:	5b                   	pop    ebx
c001265d:	89 c7                	mov    edi,eax
c001265f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012663:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012666:	53                   	push   ebx
c0012667:	57                   	push   edi
c0012668:	6a 00                	push   0x0
c001266a:	6a 34                	push   0x34
c001266c:	55                   	push   ebp
c001266d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012670:	83 c4 20             	add    esp,0x20
c0012673:	85 c0                	test   eax,eax
c0012675:	0f 85 76 06 00 00    	jne    c0012cf1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001267b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0012681:	0f 85 6a 06 00 00    	jne    c0012cf1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012687:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001268a:	85 c0                	test   eax,eax
c001268c:	0f 84 5f 06 00 00    	je     c0012cf1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012692:	31 d2                	xor    edx,edx
c0012694:	51                   	push   ecx
c0012695:	52                   	push   edx
c0012696:	50                   	push   eax
c0012697:	55                   	push   ebp
c0012698:	e8 11 86 ff ff       	call   c000acae <File::seek(unsigned long long)>
c001269d:	83 c4 10             	add    esp,0x10
c00126a0:	85 c0                	test   eax,eax
c00126a2:	0f 85 49 06 00 00    	jne    c0012cf1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126a8:	83 ec 0c             	sub    esp,0xc
c00126ab:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00126ae:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00126b2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00126b6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00126ba:	0f af c2             	imul   eax,edx
c00126bd:	50                   	push   eax
c00126be:	e8 5e 51 ff ff       	call   c0007821 <malloc>
c00126c3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00126c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00126cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00126d1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00126d5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00126d9:	0f af c2             	imul   eax,edx
c00126dc:	99                   	cdq    
c00126dd:	52                   	push   edx
c00126de:	50                   	push   eax
c00126df:	55                   	push   ebp
c00126e0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00126e3:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00126e6:	83 c4 20             	add    esp,0x20
c00126e9:	85 c0                	test   eax,eax
c00126eb:	0f 84 00 06 00 00    	je     c0012cf1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126f1:	52                   	push   edx
c00126f2:	31 d2                	xor    edx,edx
c00126f4:	52                   	push   edx
c00126f5:	50                   	push   eax
c00126f6:	55                   	push   ebp
c00126f7:	e8 b2 85 ff ff       	call   c000acae <File::seek(unsigned long long)>
c00126fc:	83 c4 10             	add    esp,0x10
c00126ff:	85 c0                	test   eax,eax
c0012701:	0f 85 ea 05 00 00    	jne    c0012cf1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012707:	83 ec 0c             	sub    esp,0xc
c001270a:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001270e:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0012712:	31 f6                	xor    esi,esi
c0012714:	0f af c2             	imul   eax,edx
c0012717:	50                   	push   eax
c0012718:	e8 04 51 ff ff       	call   c0007821 <malloc>
c001271d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012720:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012724:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012727:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001272b:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001272f:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0012733:	0f af c2             	imul   eax,edx
c0012736:	99                   	cdq    
c0012737:	52                   	push   edx
c0012738:	50                   	push   eax
c0012739:	55                   	push   ebp
c001273a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001273d:	83 c4 20             	add    esp,0x20
c0012740:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0012744:	0f 86 8a 00 00 00    	jbe    c00127d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001274a:	0f b7 de             	movzx  ebx,si
c001274d:	c1 e3 05             	shl    ebx,0x5
c0012750:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0012754:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0012757:	75 75                	jne    c00127ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0012759:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001275c:	31 d2                	xor    edx,edx
c001275e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012762:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0012765:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012769:	50                   	push   eax
c001276a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001276d:	52                   	push   edx
c001276e:	50                   	push   eax
c001276f:	55                   	push   ebp
c0012770:	e8 39 85 ff ff       	call   c000acae <File::seek(unsigned long long)>
c0012775:	83 c4 10             	add    esp,0x10
c0012778:	85 c0                	test   eax,eax
c001277a:	0f 85 71 05 00 00    	jne    c0012cf1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012780:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0012787:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001278a:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001278e:	31 d2                	xor    edx,edx
c0012790:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0012794:	83 ec 0c             	sub    esp,0xc
c0012797:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001279b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00127a2:	50                   	push   eax
c00127a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00127a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00127ab:	52                   	push   edx
c00127ac:	50                   	push   eax
c00127ad:	55                   	push   ebp
c00127ae:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00127b1:	83 c4 1c             	add    esp,0x1c
c00127b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00127b7:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c00127ba:	50                   	push   eax
c00127bb:	6a 00                	push   0x0
c00127bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127c1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00127c5:	50                   	push   eax
c00127c6:	e8 05 dd fe ff       	call   c00004d0 <memset>
c00127cb:	83 c4 10             	add    esp,0x10
c00127ce:	46                   	inc    esi
c00127cf:	e9 6c ff ff ff       	jmp    c0012740 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c00127d4:	53                   	push   ebx
c00127d5:	31 db                	xor    ebx,ebx
c00127d7:	68 00 01 00 00       	push   0x100
c00127dc:	6a 00                	push   0x0
c00127de:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00127e2:	50                   	push   eax
c00127e3:	e8 e8 dc fe ff       	call   c00004d0 <memset>
c00127e8:	83 c4 0c             	add    esp,0xc
c00127eb:	68 00 01 00 00       	push   0x100
c00127f0:	6a 00                	push   0x0
c00127f2:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00127f9:	50                   	push   eax
c00127fa:	e8 d1 dc fe ff       	call   c00004d0 <memset>
c00127ff:	83 c4 10             	add    esp,0x10
c0012802:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001280a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012812:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001281a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012822:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001282a:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001282e:	0f 86 30 01 00 00    	jbe    c0012964 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0012834:	0f b7 f3             	movzx  esi,bx
c0012837:	6b f6 28             	imul   esi,esi,0x28
c001283a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001283e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012841:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012845:	52                   	push   edx
c0012846:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001284a:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001284e:	8b 06                	mov    eax,DWORD PTR [esi]
c0012850:	6b d2 28             	imul   edx,edx,0x28
c0012853:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0012857:	31 d2                	xor    edx,edx
c0012859:	52                   	push   edx
c001285a:	50                   	push   eax
c001285b:	55                   	push   ebp
c001285c:	e8 4d 84 ff ff       	call   c000acae <File::seek(unsigned long long)>
c0012861:	83 c4 0c             	add    esp,0xc
c0012864:	6a 20                	push   0x20
c0012866:	6a 00                	push   0x0
c0012868:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001286f:	51                   	push   ecx
c0012870:	e8 5b dc fe ff       	call   c00004d0 <memset>
c0012875:	59                   	pop    ecx
c0012876:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012879:	8d 54 24 58          	lea    edx,[esp+0x58]
c001287d:	52                   	push   edx
c001287e:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0012885:	51                   	push   ecx
c0012886:	6a 00                	push   0x0
c0012888:	6a 1f                	push   0x1f
c001288a:	55                   	push   ebp
c001288b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001288e:	83 c4 1c             	add    esp,0x1c
c0012891:	6a 09                	push   0x9
c0012893:	68 7d f1 01 c0       	push   0xc001f17d
c0012898:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001289f:	51                   	push   ecx
c00128a0:	e8 eb da fe ff       	call   c0000390 <memcmp>
c00128a5:	83 c4 10             	add    esp,0x10
c00128a8:	85 c0                	test   eax,eax
c00128aa:	75 21                	jne    c00128cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00128ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00128b4:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00128b8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00128bc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00128bf:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00128c6:	89 d0                	mov    eax,edx
c00128c8:	40                   	inc    eax
c00128c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128cd:	50                   	push   eax
c00128ce:	6a 09                	push   0x9
c00128d0:	68 87 f1 01 c0       	push   0xc001f187
c00128d5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00128dc:	50                   	push   eax
c00128dd:	e8 ae da fe ff       	call   c0000390 <memcmp>
c00128e2:	83 c4 10             	add    esp,0x10
c00128e5:	85 c0                	test   eax,eax
c00128e7:	75 21                	jne    c001290a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00128e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00128f1:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00128f5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00128f9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00128fc:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012903:	89 d0                	mov    eax,edx
c0012905:	40                   	inc    eax
c0012906:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001290a:	50                   	push   eax
c001290b:	50                   	push   eax
c001290c:	68 53 f1 01 c0       	push   0xc001f153
c0012911:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012918:	50                   	push   eax
c0012919:	e8 c2 dd fe ff       	call   c00006e0 <strcmp>
c001291e:	83 c4 10             	add    esp,0x10
c0012921:	85 c0                	test   eax,eax
c0012923:	75 0f                	jne    c0012934 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0012925:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012928:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001292c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012930:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012934:	50                   	push   eax
c0012935:	50                   	push   eax
c0012936:	68 5b f1 01 c0       	push   0xc001f15b
c001293b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012942:	50                   	push   eax
c0012943:	e8 98 dd fe ff       	call   c00006e0 <strcmp>
c0012948:	83 c4 10             	add    esp,0x10
c001294b:	85 c0                	test   eax,eax
c001294d:	75 0f                	jne    c001295e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001294f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012952:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012956:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001295a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001295e:	43                   	inc    ebx
c001295f:	e9 c6 fe ff ff       	jmp    c001282a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0012964:	31 d2                	xor    edx,edx
c0012966:	50                   	push   eax
c0012967:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001296b:	52                   	push   edx
c001296c:	50                   	push   eax
c001296d:	55                   	push   ebp
c001296e:	e8 3b 83 ff ff       	call   c000acae <File::seek(unsigned long long)>
c0012973:	58                   	pop    eax
c0012974:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012978:	e8 a4 4e ff ff       	call   c0007821 <malloc>
c001297d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012980:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012984:	31 d2                	xor    edx,edx
c0012986:	58                   	pop    eax
c0012987:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001298b:	53                   	push   ebx
c001298c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012990:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012994:	52                   	push   edx
c0012995:	50                   	push   eax
c0012996:	55                   	push   ebp
c0012997:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001299a:	83 c4 14             	add    esp,0x14
c001299d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129a1:	e8 7b 4e ff ff       	call   c0007821 <malloc>
c00129a6:	31 d2                	xor    edx,edx
c00129a8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00129ac:	83 c4 0c             	add    esp,0xc
c00129af:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129b3:	52                   	push   edx
c00129b4:	50                   	push   eax
c00129b5:	55                   	push   ebp
c00129b6:	e8 f3 82 ff ff       	call   c000acae <File::seek(unsigned long long)>
c00129bb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00129be:	31 d2                	xor    edx,edx
c00129c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00129c3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00129c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00129cb:	52                   	push   edx
c00129cc:	50                   	push   eax
c00129cd:	55                   	push   ebp
c00129ce:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00129d1:	83 c4 20             	add    esp,0x20
c00129d4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00129dc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00129e0:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00129e4:	0f 84 0b 03 00 00    	je     c0012cf5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c00129ea:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00129f1:	31 d2                	xor    edx,edx
c00129f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129f7:	c1 e8 03             	shr    eax,0x3
c00129fa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00129fe:	51                   	push   ecx
c00129ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012a03:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0012a07:	52                   	push   edx
c0012a08:	50                   	push   eax
c0012a09:	55                   	push   ebp
c0012a0a:	e8 9f 82 ff ff       	call   c000acae <File::seek(unsigned long long)>
c0012a0f:	5b                   	pop    ebx
c0012a10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a14:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0012a1b:	e8 01 4e ff ff       	call   c0007821 <malloc>
c0012a20:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012a23:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012a27:	31 d2                	xor    edx,edx
c0012a29:	5e                   	pop    esi
c0012a2a:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012a2e:	50                   	push   eax
c0012a2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a33:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a37:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0012a3e:	52                   	push   edx
c0012a3f:	50                   	push   eax
c0012a40:	55                   	push   ebp
c0012a41:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012a44:	83 c4 20             	add    esp,0x20
c0012a47:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012a4f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012a53:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0012a57:	0f 8d 7c 02 00 00    	jge    c0012cd9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012a5d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012a61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a65:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0012a6a:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012a6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012a71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a75:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0012a79:	89 d8                	mov    eax,ebx
c0012a7b:	c1 e8 08             	shr    eax,0x8
c0012a7e:	89 c6                	mov    esi,eax
c0012a80:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012a84:	c1 e6 04             	shl    esi,0x4
c0012a87:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0012a8b:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0012a8e:	85 d2                	test   edx,edx
c0012a90:	0f 85 bf 00 00 00    	jne    c0012b55 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012a96:	83 ec 0c             	sub    esp,0xc
c0012a99:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012a9d:	03 06                	add    eax,DWORD PTR [esi]
c0012a9f:	50                   	push   eax
c0012aa0:	e8 4b f8 ff ff       	call   c00122f0 <Thr::getAddressOfKernelSymbol(char const*)>
c0012aa5:	83 c4 10             	add    esp,0x10
c0012aa8:	89 c2                	mov    edx,eax
c0012aaa:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012aaf:	85 c0                	test   eax,eax
c0012ab1:	0f 85 9e 00 00 00    	jne    c0012b55 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012ab7:	83 ec 0c             	sub    esp,0xc
c0012aba:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012abe:	03 06                	add    eax,DWORD PTR [esi]
c0012ac0:	50                   	push   eax
c0012ac1:	e8 4e d9 ff ff       	call   c0010414 <KeResolveCompatibilitySymbol(char*)>
c0012ac6:	83 c4 10             	add    esp,0x10
c0012ac9:	89 c2                	mov    edx,eax
c0012acb:	85 c0                	test   eax,eax
c0012acd:	0f 85 82 00 00 00    	jne    c0012b55 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012ad3:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012ad7:	50                   	push   eax
c0012ad8:	50                   	push   eax
c0012ad9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012add:	03 06                	add    eax,DWORD PTR [esi]
c0012adf:	50                   	push   eax
c0012ae0:	68 91 f1 01 c0       	push   0xc001f191
c0012ae5:	e8 d0 7a ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0012aea:	58                   	pop    eax
c0012aeb:	5a                   	pop    edx
c0012aec:	68 ab f1 01 c0       	push   0xc001f1ab
c0012af1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012af8:	50                   	push   eax
c0012af9:	e8 02 db fe ff       	call   c0000600 <strcpy>
c0012afe:	59                   	pop    ecx
c0012aff:	58                   	pop    eax
c0012b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b04:	03 06                	add    eax,DWORD PTR [esi]
c0012b06:	50                   	push   eax
c0012b07:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b0e:	50                   	push   eax
c0012b0f:	e8 ac dc fe ff       	call   c00007c0 <strcat>
c0012b14:	58                   	pop    eax
c0012b15:	5a                   	pop    edx
c0012b16:	68 41 f2 01 c0       	push   0xc001f241
c0012b1b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b22:	50                   	push   eax
c0012b23:	e8 98 dc fe ff       	call   c00007c0 <strcat>
c0012b28:	83 c4 10             	add    esp,0x10
c0012b2b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012b30:	0f 84 5d 01 00 00    	je     c0012c93 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012b36:	83 ec 0c             	sub    esp,0xc
c0012b39:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b40:	50                   	push   eax
c0012b41:	e8 7d d7 ff ff       	call   c00102c3 <KePanic(char const*)>
c0012b46:	83 c4 10             	add    esp,0x10
c0012b49:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012b4d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012b51:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012b55:	80 fb 01             	cmp    bl,0x1
c0012b58:	0f 85 88 00 00 00    	jne    c0012be6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012b5e:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012b65:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012b69:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012b6d:	01 ce                	add    esi,ecx
c0012b6f:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012b75:	0f 94 c0             	sete   al
c0012b78:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012b7e:	0f 94 c3             	sete   bl
c0012b81:	09 c3                	or     ebx,eax
c0012b83:	8b 06                	mov    eax,DWORD PTR [esi]
c0012b85:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012b8a:	74 41                	je     c0012bcd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012b8c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012b8f:	84 db                	test   bl,bl
c0012b91:	75 15                	jne    c0012ba8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0012b93:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012b97:	66 83 f8 0c          	cmp    ax,0xc
c0012b9b:	76 05                	jbe    c0012ba2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012b9d:	b8 0c 00 00 00       	mov    eax,0xc
c0012ba2:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012ba6:	76 37                	jbe    c0012bdf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012ba8:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012bac:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012bb1:	0f 84 dc 00 00 00    	je     c0012c93 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012bb7:	83 ec 0c             	sub    esp,0xc
c0012bba:	68 c2 f1 01 c0       	push   0xc001f1c2
c0012bbf:	e8 ff d6 ff ff       	call   c00102c3 <KePanic(char const*)>
c0012bc4:	83 c4 10             	add    esp,0x10
c0012bc7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012bcb:	eb 12                	jmp    c0012bdf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012bcd:	01 c1                	add    ecx,eax
c0012bcf:	84 db                	test   bl,bl
c0012bd1:	75 0c                	jne    c0012bdf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012bd3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012bd7:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012bdb:	77 02                	ja     c0012bdf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012bdd:	01 d1                	add    ecx,edx
c0012bdf:	89 0e                	mov    DWORD PTR [esi],ecx
c0012be1:	e9 ea 00 00 00       	jmp    c0012cd0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012be6:	80 fb 02             	cmp    bl,0x2
c0012be9:	75 7c                	jne    c0012c67 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012beb:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012bf2:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012bf6:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012bfa:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012c00:	74 20                	je     c0012c22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012c02:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012c08:	74 18                	je     c0012c22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012c0a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012c0e:	b9 0a 00 00 00       	mov    ecx,0xa
c0012c13:	66 83 f8 0e          	cmp    ax,0xe
c0012c17:	77 03                	ja     c0012c1c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012c19:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012c1c:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012c20:	76 1f                	jbe    c0012c41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012c22:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012c26:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012c2b:	74 66                	je     c0012c93 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012c2d:	83 ec 0c             	sub    esp,0xc
c0012c30:	68 de f1 01 c0       	push   0xc001f1de
c0012c35:	e8 89 d6 ff ff       	call   c00102c3 <KePanic(char const*)>
c0012c3a:	83 c4 10             	add    esp,0x10
c0012c3d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012c41:	8b 06                	mov    eax,DWORD PTR [esi]
c0012c43:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012c48:	74 13                	je     c0012c5d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012c4a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012c4e:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012c55:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012c59:	01 c8                	add    eax,ecx
c0012c5b:	eb 04                	jmp    c0012c61 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012c5d:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012c61:	01 c2                	add    edx,eax
c0012c63:	89 16                	mov    DWORD PTR [esi],edx
c0012c65:	eb 69                	jmp    c0012cd0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012c67:	0f b6 db             	movzx  ebx,bl
c0012c6a:	50                   	push   eax
c0012c6b:	50                   	push   eax
c0012c6c:	53                   	push   ebx
c0012c6d:	68 fa f1 01 c0       	push   0xc001f1fa
c0012c72:	e8 43 79 ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0012c77:	83 c4 10             	add    esp,0x10
c0012c7a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012c7f:	74 12                	je     c0012c93 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012c81:	83 ec 0c             	sub    esp,0xc
c0012c84:	68 05 f2 01 c0       	push   0xc001f205
c0012c89:	e8 35 d6 ff ff       	call   c00102c3 <KePanic(char const*)>
c0012c8e:	83 c4 10             	add    esp,0x10
c0012c91:	eb 3d                	jmp    c0012cd0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012c93:	83 ec 0c             	sub    esp,0xc
c0012c96:	55                   	push   ebp
c0012c97:	e8 b2 7f ff ff       	call   c000ac4e <File::close()>
c0012c9c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c9f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012ca2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012ca5:	59                   	pop    ecx
c0012ca6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012caa:	e8 82 4b ff ff       	call   c0007831 <free>
c0012caf:	5b                   	pop    ebx
c0012cb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012cb4:	e8 78 4b ff ff       	call   c0007831 <free>
c0012cb9:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012cbc:	e8 70 4b ff ff       	call   c0007831 <free>
c0012cc1:	5e                   	pop    esi
c0012cc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cc6:	e8 66 4b ff ff       	call   c0007831 <free>
c0012ccb:	83 c4 10             	add    esp,0x10
c0012cce:	eb 21                	jmp    c0012cf1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012cd0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012cd4:	e9 76 fd ff ff       	jmp    c0012a4f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012cd9:	83 ec 0c             	sub    esp,0xc
c0012cdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012ce0:	e8 4c 4b ff ff       	call   c0007831 <free>
c0012ce5:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012ce9:	83 c4 10             	add    esp,0x10
c0012cec:	e9 eb fc ff ff       	jmp    c00129dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012cf1:	31 c0                	xor    eax,eax
c0012cf3:	eb 33                	jmp    c0012d28 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012cf5:	83 ec 0c             	sub    esp,0xc
c0012cf8:	55                   	push   ebp
c0012cf9:	e8 50 7f ff ff       	call   c000ac4e <File::close()>
c0012cfe:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d01:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012d04:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012d07:	58                   	pop    eax
c0012d08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d0c:	e8 20 4b ff ff       	call   c0007831 <free>
c0012d11:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012d14:	e8 18 4b ff ff       	call   c0007831 <free>
c0012d19:	5a                   	pop    edx
c0012d1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d1e:	e8 0e 4b ff ff       	call   c0007831 <free>
c0012d23:	83 c4 10             	add    esp,0x10
c0012d26:	b0 01                	mov    al,0x1
c0012d28:	81 c4 5c 03 00 00    	add    esp,0x35c
c0012d2e:	5b                   	pop    ebx
c0012d2f:	5e                   	pop    esi
c0012d30:	5f                   	pop    edi
c0012d31:	5d                   	pop    ebp
c0012d32:	c3                   	ret    

c0012d33 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0012d33:	56                   	push   esi
c0012d34:	31 d2                	xor    edx,edx
c0012d36:	53                   	push   ebx
c0012d37:	8b 1d a0 59 02 c0    	mov    ebx,DWORD PTR ds:0xc00259a0
c0012d3d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012d41:	39 d3                	cmp    ebx,edx
c0012d43:	7e 1b                	jle    c0012d60 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0012d45:	8b 04 95 c0 5b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffda440]
c0012d4c:	39 c8                	cmp    eax,ecx
c0012d4e:	77 0d                	ja     c0012d5d <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0012d50:	8b 34 95 c0 59 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffda640]
c0012d57:	01 c6                	add    esi,eax
c0012d59:	39 ce                	cmp    esi,ecx
c0012d5b:	77 05                	ja     c0012d62 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0012d5d:	42                   	inc    edx
c0012d5e:	eb e1                	jmp    c0012d41 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0012d60:	31 c0                	xor    eax,eax
c0012d62:	5b                   	pop    ebx
c0012d63:	5e                   	pop    esi
c0012d64:	c3                   	ret    

c0012d65 <Thr::getDriverNameFromAddress(unsigned long)>:
c0012d65:	53                   	push   ebx
c0012d66:	31 c0                	xor    eax,eax
c0012d68:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012d6c:	8b 1d a0 59 02 c0    	mov    ebx,DWORD PTR ds:0xc00259a0
c0012d72:	39 c3                	cmp    ebx,eax
c0012d74:	7e 22                	jle    c0012d98 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0012d76:	8b 14 85 c0 5b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda440]
c0012d7d:	39 ca                	cmp    edx,ecx
c0012d7f:	77 14                	ja     c0012d95 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012d81:	03 14 85 c0 59 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffda640]
c0012d88:	39 ca                	cmp    edx,ecx
c0012d8a:	76 09                	jbe    c0012d95 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012d8c:	8b 04 85 c0 5d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda240]
c0012d93:	eb 05                	jmp    c0012d9a <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0012d95:	40                   	inc    eax
c0012d96:	eb da                	jmp    c0012d72 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0012d98:	31 c0                	xor    eax,eax
c0012d9a:	5b                   	pop    ebx
c0012d9b:	c3                   	ret    

c0012d9c <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0012d9c:	53                   	push   ebx
c0012d9d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012da1:	53                   	push   ebx
c0012da2:	e8 8c ff ff ff       	call   c0012d33 <Thr::getDriverBaseFromAddress(unsigned long)>
c0012da7:	5a                   	pop    edx
c0012da8:	31 d2                	xor    edx,edx
c0012daa:	85 c0                	test   eax,eax
c0012dac:	74 04                	je     c0012db2 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0012dae:	89 da                	mov    edx,ebx
c0012db0:	29 c2                	sub    edx,eax
c0012db2:	89 d0                	mov    eax,edx
c0012db4:	5b                   	pop    ebx
c0012db5:	c3                   	ret    

c0012db6 <Thr::loadDLL(char const*, bool)>:
c0012db6:	55                   	push   ebp
c0012db7:	57                   	push   edi
c0012db8:	56                   	push   esi
c0012db9:	53                   	push   ebx
c0012dba:	81 ec 34 01 00 00    	sub    esp,0x134
c0012dc0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012dc7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012dce:	56                   	push   esi
c0012dcf:	68 1d f2 01 c0       	push   0xc001f21d
c0012dd4:	e8 e1 77 ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0012dd9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012de0:	e8 3c 4a ff ff       	call   c0007821 <malloc>
c0012de5:	83 c4 0c             	add    esp,0xc
c0012de8:	89 c3                	mov    ebx,eax
c0012dea:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c0012df0:	56                   	push   esi
c0012df1:	50                   	push   eax
c0012df2:	e8 39 7d ff ff       	call   c000ab30 <File::File(char const*, Process*)>
c0012df7:	83 c4 10             	add    esp,0x10
c0012dfa:	85 db                	test   ebx,ebx
c0012dfc:	75 3c                	jne    c0012e3a <Thr::loadDLL(char const*, bool)+0x84>
c0012dfe:	89 f8                	mov    eax,edi
c0012e00:	84 c0                	test   al,al
c0012e02:	0f 84 d2 01 00 00    	je     c0012fda <Thr::loadDLL(char const*, bool)+0x224>
c0012e08:	55                   	push   ebp
c0012e09:	55                   	push   ebp
c0012e0a:	68 2e f2 01 c0       	push   0xc001f22e
c0012e0f:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0012e13:	55                   	push   ebp
c0012e14:	e8 e7 d7 fe ff       	call   c0000600 <strcpy>
c0012e19:	58                   	pop    eax
c0012e1a:	5a                   	pop    edx
c0012e1b:	56                   	push   esi
c0012e1c:	55                   	push   ebp
c0012e1d:	e8 9e d9 fe ff       	call   c00007c0 <strcat>
c0012e22:	59                   	pop    ecx
c0012e23:	58                   	pop    eax
c0012e24:	68 41 f2 01 c0       	push   0xc001f241
c0012e29:	55                   	push   ebp
c0012e2a:	e8 91 d9 fe ff       	call   c00007c0 <strcat>
c0012e2f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012e32:	e8 8c d4 ff ff       	call   c00102c3 <KePanic(char const*)>
c0012e37:	83 c4 10             	add    esp,0x10
c0012e3a:	51                   	push   ecx
c0012e3b:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0012e3f:	50                   	push   eax
c0012e40:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012e44:	50                   	push   eax
c0012e45:	53                   	push   ebx
c0012e46:	e8 51 80 ff ff       	call   c000ae9c <File::stat(unsigned long long*, bool*)>
c0012e4b:	83 c4 10             	add    esp,0x10
c0012e4e:	85 db                	test   ebx,ebx
c0012e50:	74 0c                	je     c0012e5e <Thr::loadDLL(char const*, bool)+0xa8>
c0012e52:	83 ec 0c             	sub    esp,0xc
c0012e55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e57:	53                   	push   ebx
c0012e58:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012e5b:	83 c4 10             	add    esp,0x10
c0012e5e:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012e63:	75 0a                	jne    c0012e6f <Thr::loadDLL(char const*, bool)+0xb9>
c0012e65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012e69:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0012e6d:	75 3c                	jne    c0012eab <Thr::loadDLL(char const*, bool)+0xf5>
c0012e6f:	89 f8                	mov    eax,edi
c0012e71:	84 c0                	test   al,al
c0012e73:	0f 84 49 01 00 00    	je     c0012fc2 <Thr::loadDLL(char const*, bool)+0x20c>
c0012e79:	51                   	push   ecx
c0012e7a:	51                   	push   ecx
c0012e7b:	68 2e f2 01 c0       	push   0xc001f22e
c0012e80:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0012e84:	53                   	push   ebx
c0012e85:	e8 76 d7 fe ff       	call   c0000600 <strcpy>
c0012e8a:	5d                   	pop    ebp
c0012e8b:	58                   	pop    eax
c0012e8c:	56                   	push   esi
c0012e8d:	53                   	push   ebx
c0012e8e:	e8 2d d9 fe ff       	call   c00007c0 <strcat>
c0012e93:	58                   	pop    eax
c0012e94:	5a                   	pop    edx
c0012e95:	68 41 f2 01 c0       	push   0xc001f241
c0012e9a:	53                   	push   ebx
c0012e9b:	e8 20 d9 fe ff       	call   c00007c0 <strcat>
c0012ea0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012ea3:	e8 1b d4 ff ff       	call   c00102c3 <KePanic(char const*)>
c0012ea8:	83 c4 10             	add    esp,0x10
c0012eab:	52                   	push   edx
c0012eac:	6a 03                	push   0x3
c0012eae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012eb2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012eb6:	05 ff 0f 00 00       	add    eax,0xfff
c0012ebb:	83 d2 00             	adc    edx,0x0
c0012ebe:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012ec2:	50                   	push   eax
c0012ec3:	ff 35 b0 2f 02 c0    	push   DWORD PTR ds:0xc0022fb0
c0012ec9:	e8 f6 6b ff ff       	call   c0009ac4 <VAS::allocatePages(int, int)>
c0012ece:	59                   	pop    ecx
c0012ecf:	89 c3                	mov    ebx,eax
c0012ed1:	5d                   	pop    ebp
c0012ed2:	50                   	push   eax
c0012ed3:	68 6e df 01 c0       	push   0xc001df6e
c0012ed8:	e8 dd 76 ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0012edd:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ee0:	e8 5b d6 fe ff       	call   c0000540 <strlen>
c0012ee5:	8b 2d a0 59 02 c0    	mov    ebp,DWORD PTR ds:0xc00259a0
c0012eeb:	40                   	inc    eax
c0012eec:	89 04 24             	mov    DWORD PTR [esp],eax
c0012eef:	e8 2d 49 ff ff       	call   c0007821 <malloc>
c0012ef4:	89 04 ad c0 5d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffda240],eax
c0012efb:	58                   	pop    eax
c0012efc:	a1 a0 59 02 c0       	mov    eax,ds:0xc00259a0
c0012f01:	5a                   	pop    edx
c0012f02:	56                   	push   esi
c0012f03:	ff 34 85 c0 5d 02 c0 	push   DWORD PTR [eax*4-0x3ffda240]
c0012f0a:	e8 f1 d6 fe ff       	call   c0000600 <strcpy>
c0012f0f:	a1 a0 59 02 c0       	mov    eax,ds:0xc00259a0
c0012f14:	8d 50 01             	lea    edx,[eax+0x1]
c0012f17:	89 1c 85 c0 5b 02 c0 	mov    DWORD PTR [eax*4-0x3ffda440],ebx
c0012f1e:	89 15 a0 59 02 c0    	mov    DWORD PTR ds:0xc00259a0,edx
c0012f24:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012f28:	83 c4 0c             	add    esp,0xc
c0012f2b:	89 14 85 c0 59 02 c0 	mov    DWORD PTR [eax*4-0x3ffda640],edx
c0012f32:	6a 01                	push   0x1
c0012f34:	53                   	push   ebx
c0012f35:	56                   	push   esi
c0012f36:	e8 c2 f6 ff ff       	call   c00125fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0012f3b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012f3f:	83 c4 10             	add    esp,0x10
c0012f42:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f47:	0f 85 89 00 00 00    	jne    c0012fd6 <Thr::loadDLL(char const*, bool)+0x220>
c0012f4d:	89 f8                	mov    eax,edi
c0012f4f:	84 c0                	test   al,al
c0012f51:	74 73                	je     c0012fc6 <Thr::loadDLL(char const*, bool)+0x210>
c0012f53:	83 ec 0c             	sub    esp,0xc
c0012f56:	68 43 f2 01 c0       	push   0xc001f243
c0012f5b:	e8 63 d3 ff ff       	call   c00102c3 <KePanic(char const*)>
c0012f60:	83 c4 10             	add    esp,0x10
c0012f63:	eb 61                	jmp    c0012fc6 <Thr::loadDLL(char const*, bool)+0x210>
c0012f65:	50                   	push   eax
c0012f66:	50                   	push   eax
c0012f67:	89 e8                	mov    eax,ebp
c0012f69:	c1 e0 0c             	shl    eax,0xc
c0012f6c:	01 d8                	add    eax,ebx
c0012f6e:	50                   	push   eax
c0012f6f:	ff 35 b0 2f 02 c0    	push   DWORD PTR ds:0xc0022fb0
c0012f75:	e8 58 66 ff ff       	call   c00095d2 <VAS::getPageTableEntry(unsigned long)>
c0012f7a:	83 c4 10             	add    esp,0x10
c0012f7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f7f:	a8 60                	test   al,0x60
c0012f81:	75 11                	jne    c0012f94 <Thr::loadDLL(char const*, bool)+0x1de>
c0012f83:	83 ec 0c             	sub    esp,0xc
c0012f86:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012f8b:	50                   	push   eax
c0012f8c:	e8 0a 4b ff ff       	call   c0007a9b <Phys::freePage(unsigned long)>
c0012f91:	83 c4 10             	add    esp,0x10
c0012f94:	45                   	inc    ebp
c0012f95:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012f99:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012f9d:	05 ff 0f 00 00       	add    eax,0xfff
c0012fa2:	bf 00 00 00 00       	mov    edi,0x0
c0012fa7:	83 d2 00             	adc    edx,0x0
c0012faa:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012fae:	c1 ea 0c             	shr    edx,0xc
c0012fb1:	39 c5                	cmp    ebp,eax
c0012fb3:	89 d1                	mov    ecx,edx
c0012fb5:	89 f8                	mov    eax,edi
c0012fb7:	19 c8                	sbb    eax,ecx
c0012fb9:	72 aa                	jb     c0012f65 <Thr::loadDLL(char const*, bool)+0x1af>
c0012fbb:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012fc0:	75 18                	jne    c0012fda <Thr::loadDLL(char const*, bool)+0x224>
c0012fc2:	31 db                	xor    ebx,ebx
c0012fc4:	eb 14                	jmp    c0012fda <Thr::loadDLL(char const*, bool)+0x224>
c0012fc6:	83 ec 0c             	sub    esp,0xc
c0012fc9:	68 62 f2 01 c0       	push   0xc001f262
c0012fce:	e8 f0 d2 ff ff       	call   c00102c3 <KePanic(char const*)>
c0012fd3:	83 c4 10             	add    esp,0x10
c0012fd6:	31 ed                	xor    ebp,ebp
c0012fd8:	eb bb                	jmp    c0012f95 <Thr::loadDLL(char const*, bool)+0x1df>
c0012fda:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012fe0:	89 d8                	mov    eax,ebx
c0012fe2:	5b                   	pop    ebx
c0012fe3:	5e                   	pop    esi
c0012fe4:	5f                   	pop    edi
c0012fe5:	5d                   	pop    ebp
c0012fe6:	c3                   	ret    

c0012fe7 <Thr::executeDLL(unsigned long, void*)>:
c0012fe7:	56                   	push   esi
c0012fe8:	53                   	push   ebx
c0012fe9:	52                   	push   edx
c0012fea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012fee:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012ff2:	85 db                	test   ebx,ebx
c0012ff4:	75 10                	jne    c0013006 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0012ff6:	83 ec 0c             	sub    esp,0xc
c0012ff9:	68 7e f2 01 c0       	push   0xc001f27e
c0012ffe:	e8 c0 d2 ff ff       	call   c00102c3 <KePanic(char const*)>
c0013003:	83 c4 10             	add    esp,0x10
c0013006:	50                   	push   eax
c0013007:	50                   	push   eax
c0013008:	53                   	push   ebx
c0013009:	68 a8 f2 01 c0       	push   0xc001f2a8
c001300e:	e8 a7 75 ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0013013:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0013017:	89 d8                	mov    eax,ebx
c0013019:	83 c4 14             	add    esp,0x14
c001301c:	5b                   	pop    ebx
c001301d:	5e                   	pop    esi
c001301e:	ff e0                	jmp    eax

c0013020 <userModeEntryPoint(void*)>:
c0013020:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013025:	48                   	dec    eax
c0013026:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001302b:	75 03                	jne    c0013030 <userModeEntryPoint(void*)+0x10>
c001302d:	fb                   	sti    
c001302e:	66 90                	xchg   ax,ax
c0013030:	fb                   	sti    
c0013031:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013036:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013039:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001303f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013043:	e9 f7 d1 fe ff       	jmp    c000023f <goToUsermode>

c0013048 <changeTSS>:
c0013048:	83 ec 14             	sub    esp,0x14
c001304b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013050:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0013053:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0013058:	c1 e2 15             	shl    edx,0x15
c001305b:	29 d0                	sub    eax,edx
c001305d:	50                   	push   eax
c001305e:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0013063:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013069:	05 7c 11 00 00       	add    eax,0x117c
c001306e:	50                   	push   eax
c001306f:	e8 dc 5b ff ff       	call   c0008c50 <TSS::setESP(unsigned long)>
c0013074:	83 c4 1c             	add    esp,0x1c
c0013077:	c3                   	ret    

c0013078 <switchToThread(ThreadControlBlock*)>:
c0013078:	57                   	push   edi
c0013079:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c001307e:	56                   	push   esi
c001307f:	85 c0                	test   eax,eax
c0013081:	53                   	push   ebx
c0013082:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013086:	0f 85 90 00 00 00    	jne    c001311c <switchToThread(ThreadControlBlock*)+0xa4>
c001308c:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c001308f:	80 fa ff             	cmp    dl,0xff
c0013092:	0f 84 80 00 00 00    	je     c0013118 <switchToThread(ThreadControlBlock*)+0xa0>
c0013098:	81 e2 ff 00 00 00    	and    edx,0xff
c001309e:	b8 00 04 00 00       	mov    eax,0x400
c00130a3:	29 d0                	sub    eax,edx
c00130a5:	d1 f8                	sar    eax,1
c00130a7:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c00130aa:	66 90                	xchg   ax,ax
c00130ac:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00130af:	e8 1d 26 00 00       	call   c00156d1 <HalQueryPerformanceCounter()>
c00130b4:	a3 a8 61 02 c0       	mov    ds:0xc00261a8,eax
c00130b9:	89 15 ac 61 02 c0    	mov    DWORD PTR ds:0xc00261ac,edx
c00130bf:	89 c6                	mov    esi,eax
c00130c1:	89 d7                	mov    edi,edx
c00130c3:	2b 35 98 61 02 c0    	sub    esi,DWORD PTR ds:0xc0026198
c00130c9:	a3 98 61 02 c0       	mov    ds:0xc0026198,eax
c00130ce:	1b 3d 9c 61 02 c0    	sbb    edi,DWORD PTR ds:0xc002619c
c00130d4:	89 35 a0 61 02 c0    	mov    DWORD PTR ds:0xc00261a0,esi
c00130da:	89 3d a4 61 02 c0    	mov    DWORD PTR ds:0xc00261a4,edi
c00130e0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00130e6:	89 15 9c 61 02 c0    	mov    DWORD PTR ds:0xc002619c,edx
c00130ec:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00130ef:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00130f2:	01 c6                	add    esi,eax
c00130f4:	11 d7                	adc    edi,edx
c00130f6:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00130f9:	83 ec 0c             	sub    esp,0xc
c00130fc:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00130ff:	53                   	push   ebx
c0013100:	e8 72 d1 fe ff       	call   c0000277 <switchToThreadASM>
c0013105:	0f 20 c0             	mov    eax,cr0
c0013108:	83 c8 08             	or     eax,0x8
c001310b:	0f 22 c0             	mov    cr0,eax
c001310e:	83 c4 10             	add    esp,0x10
c0013111:	5b                   	pop    ebx
c0013112:	5e                   	pop    esi
c0013113:	5f                   	pop    edi
c0013114:	c3                   	ret    
c0013115:	8d 76 00             	lea    esi,[esi+0x0]
c0013118:	31 c0                	xor    eax,eax
c001311a:	eb 90                	jmp    c00130ac <switchToThread(ThreadControlBlock*)+0x34>
c001311c:	5b                   	pop    ebx
c001311d:	c7 05 60 61 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x1
c0013127:	5e                   	pop    esi
c0013128:	5f                   	pop    edi
c0013129:	c3                   	ret    
c001312a:	66 90                	xchg   ax,ax

c001312c <Process::addArgs(char**)>:
c001312c:	57                   	push   edi
c001312d:	56                   	push   esi
c001312e:	53                   	push   ebx
c001312f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013133:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0013137:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0013141:	85 ff                	test   edi,edi
c0013143:	74 43                	je     c0013188 <Process::addArgs(char**)+0x5c>
c0013145:	8b 07                	mov    eax,DWORD PTR [edi]
c0013147:	85 c0                	test   eax,eax
c0013149:	74 3d                	je     c0013188 <Process::addArgs(char**)+0x5c>
c001314b:	31 db                	xor    ebx,ebx
c001314d:	8d 76 00             	lea    esi,[esi+0x0]
c0013150:	83 ec 0c             	sub    esp,0xc
c0013153:	50                   	push   eax
c0013154:	e8 e7 d3 fe ff       	call   c0000540 <strlen>
c0013159:	40                   	inc    eax
c001315a:	89 04 24             	mov    DWORD PTR [esp],eax
c001315d:	e8 bf 46 ff ff       	call   c0007821 <malloc>
c0013162:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0013169:	5a                   	pop    edx
c001316a:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001316d:	59                   	pop    ecx
c001316e:	43                   	inc    ebx
c001316f:	52                   	push   edx
c0013170:	50                   	push   eax
c0013171:	e8 8a d4 fe ff       	call   c0000600 <strcpy>
c0013176:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c001317c:	83 c4 10             	add    esp,0x10
c001317f:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0013182:	85 c0                	test   eax,eax
c0013184:	75 ca                	jne    c0013150 <Process::addArgs(char**)+0x24>
c0013186:	66 90                	xchg   ax,ax
c0013188:	5b                   	pop    ebx
c0013189:	5e                   	pop    esi
c001318a:	5f                   	pop    edi
c001318b:	c3                   	ret    

c001318c <Process::Process(char const*, Process*, char**)>:
c001318c:	56                   	push   esi
c001318d:	53                   	push   ebx
c001318e:	83 ec 14             	sub    esp,0x14
c0013191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013195:	05 0c 02 00 00       	add    eax,0x20c
c001319a:	bb 07 00 00 00       	mov    ebx,0x7
c001319f:	89 c6                	mov    esi,eax
c00131a1:	8d 76 00             	lea    esi,[esi+0x0]
c00131a4:	85 db                	test   ebx,ebx
c00131a6:	78 14                	js     c00131bc <Process::Process(char const*, Process*, char**)+0x30>
c00131a8:	83 ec 0c             	sub    esp,0xc
c00131ab:	56                   	push   esi
c00131ac:	e8 7b a0 00 00       	call   c001d22c <ThreadControlBlock::ThreadControlBlock()>
c00131b1:	83 c4 10             	add    esp,0x10
c00131b4:	83 c6 5f             	add    esi,0x5f
c00131b7:	4b                   	dec    ebx
c00131b8:	eb ea                	jmp    c00131a4 <Process::Process(char const*, Process*, char**)+0x18>
c00131ba:	66 90                	xchg   ax,ax
c00131bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131c0:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00131c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131cb:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00131d2:	83 ec 0c             	sub    esp,0xc
c00131d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00131d9:	e8 da ce ff ff       	call   c00100b8 <Krnl::newProcessEnv(Process*)>
c00131de:	83 c4 10             	add    esp,0x10
c00131e1:	89 c2                	mov    edx,eax
c00131e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131e7:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00131ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131f1:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00131fa:	a1 ac 02 02 c0       	mov    eax,ds:0xc00202ac
c00131ff:	8d 50 01             	lea    edx,[eax+0x1]
c0013202:	89 15 ac 02 02 c0    	mov    DWORD PTR ds:0xc00202ac,edx
c0013208:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001320c:	89 02                	mov    DWORD PTR [edx],eax
c001320e:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0013216:	83 ec 0c             	sub    esp,0xc
c0013219:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001321d:	e8 ff 45 ff ff       	call   c0007821 <malloc>
c0013222:	83 c4 10             	add    esp,0x10
c0013225:	89 c3                	mov    ebx,eax
c0013227:	83 ec 08             	sub    esp,0x8
c001322a:	6a 00                	push   0x0
c001322c:	53                   	push   ebx
c001322d:	e8 3c 6c ff ff       	call   c0009e6e <VAS::VAS(bool)>
c0013232:	83 c4 10             	add    esp,0x10
c0013235:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013239:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001323f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013243:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001324d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013251:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013255:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001325b:	e8 ce d3 ff ff       	call   c001062e <KeInitSignals()>
c0013260:	89 c2                	mov    edx,eax
c0013262:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013266:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c001326c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013270:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013276:	85 c0                	test   eax,eax
c0013278:	74 42                	je     c00132bc <Process::Process(char const*, Process*, char**)+0x130>
c001327a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001327e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013284:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001328a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001328e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0013294:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013298:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001329e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00132a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132a8:	05 0c 01 00 00       	add    eax,0x10c
c00132ad:	83 ec 08             	sub    esp,0x8
c00132b0:	52                   	push   edx
c00132b1:	50                   	push   eax
c00132b2:	e8 49 d3 fe ff       	call   c0000600 <strcpy>
c00132b7:	83 c4 10             	add    esp,0x10
c00132ba:	eb 64                	jmp    c0013320 <Process::Process(char const*, Process*, char**)+0x194>
c00132bc:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c00132c4:	83 ec 0c             	sub    esp,0xc
c00132c7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00132cb:	e8 51 45 ff ff       	call   c0007821 <malloc>
c00132d0:	83 c4 10             	add    esp,0x10
c00132d3:	89 c3                	mov    ebx,eax
c00132d5:	83 ec 08             	sub    esp,0x8
c00132d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132dc:	53                   	push   ebx
c00132dd:	e8 80 56 ff ff       	call   c0008962 <VgaText::VgaText(char const*)>
c00132e2:	83 c4 10             	add    esp,0x10
c00132e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132e9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00132ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132f3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00132f9:	83 ec 0c             	sub    esp,0xc
c00132fc:	50                   	push   eax
c00132fd:	e8 00 4f ff ff       	call   c0008202 <addToTerminalCycle(VgaText*)>
c0013302:	83 c4 10             	add    esp,0x10
c0013305:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013309:	05 0c 01 00 00       	add    eax,0x10c
c001330e:	83 ec 08             	sub    esp,0x8
c0013311:	68 c7 f2 01 c0       	push   0xc001f2c7
c0013316:	50                   	push   eax
c0013317:	e8 e4 d2 fe ff       	call   c0000600 <strcpy>
c001331c:	83 c4 10             	add    esp,0x10
c001331f:	90                   	nop
c0013320:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013324:	83 c0 0c             	add    eax,0xc
c0013327:	83 ec 08             	sub    esp,0x8
c001332a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001332e:	50                   	push   eax
c001332f:	e8 cc d2 fe ff       	call   c0000600 <strcpy>
c0013334:	83 c4 10             	add    esp,0x10
c0013337:	83 ec 08             	sub    esp,0x8
c001333a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001333e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013342:	e8 e5 fd ff ff       	call   c001312c <Process::addArgs(char**)>
c0013347:	83 c4 10             	add    esp,0x10
c001334a:	83 ec 08             	sub    esp,0x8
c001334d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013351:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013355:	e8 6d ed ff ff       	call   c00120c7 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001335a:	83 c4 10             	add    esp,0x10
c001335d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013361:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013365:	83 f0 01             	xor    eax,0x1
c0013368:	88 c2                	mov    dl,al
c001336a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001336e:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0013374:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013378:	25 ff 00 00 00       	and    eax,0xff
c001337d:	83 ec 08             	sub    esp,0x8
c0013380:	50                   	push   eax
c0013381:	68 20 f3 01 c0       	push   0xc001f320
c0013386:	e8 2f 72 ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c001338b:	83 c4 10             	add    esp,0x10
c001338e:	90                   	nop
c001338f:	83 c4 14             	add    esp,0x14
c0013392:	5b                   	pop    ebx
c0013393:	5e                   	pop    esi
c0013394:	c3                   	ret    
c0013395:	90                   	nop
c0013396:	66 90                	xchg   ax,ax

c0013398 <Process::Process(bool, char const*, Process*, char**)>:
c0013398:	56                   	push   esi
c0013399:	53                   	push   ebx
c001339a:	83 ec 24             	sub    esp,0x24
c001339d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00133a1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00133a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133a9:	05 0c 02 00 00       	add    eax,0x20c
c00133ae:	bb 07 00 00 00       	mov    ebx,0x7
c00133b3:	89 c6                	mov    esi,eax
c00133b5:	8d 76 00             	lea    esi,[esi+0x0]
c00133b8:	85 db                	test   ebx,ebx
c00133ba:	78 14                	js     c00133d0 <Process::Process(bool, char const*, Process*, char**)+0x38>
c00133bc:	83 ec 0c             	sub    esp,0xc
c00133bf:	56                   	push   esi
c00133c0:	e8 67 9e 00 00       	call   c001d22c <ThreadControlBlock::ThreadControlBlock()>
c00133c5:	83 c4 10             	add    esp,0x10
c00133c8:	83 c6 5f             	add    esi,0x5f
c00133cb:	4b                   	dec    ebx
c00133cc:	eb ea                	jmp    c00133b8 <Process::Process(bool, char const*, Process*, char**)+0x20>
c00133ce:	66 90                	xchg   ax,ax
c00133d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133d4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00133db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133df:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00133e6:	83 ec 0c             	sub    esp,0xc
c00133e9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00133ed:	e8 c6 cc ff ff       	call   c00100b8 <Krnl::newProcessEnv(Process*)>
c00133f2:	83 c4 10             	add    esp,0x10
c00133f5:	89 c2                	mov    edx,eax
c00133f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133fb:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0013401:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013405:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001340e:	a1 ac 02 02 c0       	mov    eax,ds:0xc00202ac
c0013413:	8d 50 01             	lea    edx,[eax+0x1]
c0013416:	89 15 ac 02 02 c0    	mov    DWORD PTR ds:0xc00202ac,edx
c001341c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013420:	89 02                	mov    DWORD PTR [edx],eax
c0013422:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001342a:	83 ec 0c             	sub    esp,0xc
c001342d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013431:	e8 eb 43 ff ff       	call   c0007821 <malloc>
c0013436:	83 c4 10             	add    esp,0x10
c0013439:	89 c3                	mov    ebx,eax
c001343b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001343f:	25 ff 00 00 00       	and    eax,0xff
c0013444:	83 ec 08             	sub    esp,0x8
c0013447:	50                   	push   eax
c0013448:	53                   	push   ebx
c0013449:	e8 20 6a ff ff       	call   c0009e6e <VAS::VAS(bool)>
c001344e:	83 c4 10             	add    esp,0x10
c0013451:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013455:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001345b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001345f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013469:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001346d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013471:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0013477:	e8 b2 d1 ff ff       	call   c001062e <KeInitSignals()>
c001347c:	89 c2                	mov    edx,eax
c001347e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013482:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0013488:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001348c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013492:	85 c0                	test   eax,eax
c0013494:	74 42                	je     c00134d8 <Process::Process(bool, char const*, Process*, char**)+0x140>
c0013496:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001349a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00134a0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00134a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134aa:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00134b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134b4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00134ba:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00134c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134c4:	05 0c 01 00 00       	add    eax,0x10c
c00134c9:	83 ec 08             	sub    esp,0x8
c00134cc:	52                   	push   edx
c00134cd:	50                   	push   eax
c00134ce:	e8 2d d1 fe ff       	call   c0000600 <strcpy>
c00134d3:	83 c4 10             	add    esp,0x10
c00134d6:	eb 64                	jmp    c001353c <Process::Process(bool, char const*, Process*, char**)+0x1a4>
c00134d8:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c00134e0:	83 ec 0c             	sub    esp,0xc
c00134e3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00134e7:	e8 35 43 ff ff       	call   c0007821 <malloc>
c00134ec:	83 c4 10             	add    esp,0x10
c00134ef:	89 c3                	mov    ebx,eax
c00134f1:	83 ec 08             	sub    esp,0x8
c00134f4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00134f8:	53                   	push   ebx
c00134f9:	e8 64 54 ff ff       	call   c0008962 <VgaText::VgaText(char const*)>
c00134fe:	83 c4 10             	add    esp,0x10
c0013501:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013505:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001350b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001350f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013515:	83 ec 0c             	sub    esp,0xc
c0013518:	50                   	push   eax
c0013519:	e8 e4 4c ff ff       	call   c0008202 <addToTerminalCycle(VgaText*)>
c001351e:	83 c4 10             	add    esp,0x10
c0013521:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013525:	05 0c 01 00 00       	add    eax,0x10c
c001352a:	83 ec 08             	sub    esp,0x8
c001352d:	68 c7 f2 01 c0       	push   0xc001f2c7
c0013532:	50                   	push   eax
c0013533:	e8 c8 d0 fe ff       	call   c0000600 <strcpy>
c0013538:	83 c4 10             	add    esp,0x10
c001353b:	90                   	nop
c001353c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013540:	83 c0 0c             	add    eax,0xc
c0013543:	83 ec 08             	sub    esp,0x8
c0013546:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001354a:	50                   	push   eax
c001354b:	e8 b0 d0 fe ff       	call   c0000600 <strcpy>
c0013550:	83 c4 10             	add    esp,0x10
c0013553:	83 ec 08             	sub    esp,0x8
c0013556:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001355a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001355e:	e8 c9 fb ff ff       	call   c001312c <Process::addArgs(char**)>
c0013563:	83 c4 10             	add    esp,0x10
c0013566:	90                   	nop
c0013567:	83 c4 24             	add    esp,0x24
c001356a:	5b                   	pop    ebx
c001356b:	5e                   	pop    esi
c001356c:	c3                   	ret    
c001356d:	8d 76 00             	lea    esi,[esi+0x0]

c0013570 <taskStartupFunction>:
c0013570:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013575:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0013578:	c3                   	ret    
c0013579:	90                   	nop
c001357a:	66 90                	xchg   ax,ax

c001357c <Semaphore::Semaphore(int)>:
c001357c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013580:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013584:	89 10                	mov    DWORD PTR [eax],edx
c0013586:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001358a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0013591:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013595:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001359c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135a0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00135a7:	90                   	nop
c00135a8:	c3                   	ret    
c00135a9:	90                   	nop
c00135aa:	66 90                	xchg   ax,ax

c00135ac <Mutex::Mutex()>:
c00135ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135b0:	6a 01                	push   0x1
c00135b2:	50                   	push   eax
c00135b3:	e8 c4 ff ff ff       	call   c001357c <Semaphore::Semaphore(int)>
c00135b8:	83 c4 08             	add    esp,0x8
c00135bb:	90                   	nop
c00135bc:	c3                   	ret    
c00135bd:	90                   	nop
c00135be:	66 90                	xchg   ax,ax

c00135c0 <Process::createThread(void (*)(void*), void*, int)>:
c00135c0:	57                   	push   edi
c00135c1:	31 c9                	xor    ecx,ecx
c00135c3:	56                   	push   esi
c00135c4:	53                   	push   ebx
c00135c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00135c9:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00135d0:	89 f2                	mov    edx,esi
c00135d2:	66 90                	xchg   ax,ax
c00135d4:	31 c0                	xor    eax,eax
c00135d6:	66 89 d0             	mov    ax,dx
c00135d9:	83 e2 01             	and    edx,0x1
c00135dc:	74 12                	je     c00135f0 <Process::createThread(void (*)(void*), void*, int)+0x30>
c00135de:	d1 f8                	sar    eax,1
c00135e0:	41                   	inc    ecx
c00135e1:	89 c2                	mov    edx,eax
c00135e3:	83 f9 10             	cmp    ecx,0x10
c00135e6:	75 ec                	jne    c00135d4 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00135e8:	31 db                	xor    ebx,ebx
c00135ea:	89 d8                	mov    eax,ebx
c00135ec:	5b                   	pop    ebx
c00135ed:	5e                   	pop    esi
c00135ee:	5f                   	pop    edi
c00135ef:	c3                   	ret    
c00135f0:	b8 01 00 00 00       	mov    eax,0x1
c00135f5:	d3 e0                	shl    eax,cl
c00135f7:	09 c6                	or     esi,eax
c00135f9:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00135fc:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0013603:	01 c0                	add    eax,eax
c0013605:	01 c8                	add    eax,ecx
c0013607:	8d 04 80             	lea    eax,[eax+eax*4]
c001360a:	01 d8                	add    eax,ebx
c001360c:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0013613:	75 0b                	jne    c0013620 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0013615:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c001361f:	90                   	nop
c0013620:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0013626:	83 ec 08             	sub    esp,0x8
c0013629:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001362c:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001362f:	01 c0                	add    eax,eax
c0013631:	01 c8                	add    eax,ecx
c0013633:	8d 3c 80             	lea    edi,[eax+eax*4]
c0013636:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0013639:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001363f:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0013645:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013649:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c001364f:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0013655:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c001365c:	89 ca                	mov    edx,ecx
c001365e:	f7 da                	neg    edx
c0013660:	c1 e2 15             	shl    edx,0x15
c0013663:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0013669:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001366f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013673:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001367d:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0013683:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013687:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001368d:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0013697:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00136a1:	53                   	push   ebx
c00136a2:	68 84 61 02 c0       	push   0xc0026184
c00136a7:	e8 20 99 00 00       	call   c001cfcc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00136ac:	83 c4 10             	add    esp,0x10
c00136af:	89 d8                	mov    eax,ebx
c00136b1:	5b                   	pop    ebx
c00136b2:	5e                   	pop    esi
c00136b3:	5f                   	pop    edi
c00136b4:	c3                   	ret    
c00136b5:	90                   	nop
c00136b6:	66 90                	xchg   ax,ax

c00136b8 <Process::createUserThread()>:
c00136b8:	83 ec 0c             	sub    esp,0xc
c00136bb:	68 80 00 00 00       	push   0x80
c00136c0:	6a 00                	push   0x0
c00136c2:	68 20 30 01 c0       	push   0xc0013020
c00136c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00136cb:	50                   	push   eax
c00136cc:	e8 ef fe ff ff       	call   c00135c0 <Process::createThread(void (*)(void*), void*, int)>
c00136d1:	83 c4 1c             	add    esp,0x1c
c00136d4:	c3                   	ret    
c00136d5:	8d 76 00             	lea    esi,[esi+0x0]

c00136d8 <setupMultitasking(void (*)())>:
c00136d8:	56                   	push   esi
c00136d9:	53                   	push   ebx
c00136da:	53                   	push   ebx
c00136db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136df:	eb 13                	jmp    c00136f4 <setupMultitasking(void (*)())+0x1c>
c00136e1:	8d 76 00             	lea    esi,[esi+0x0]
c00136e4:	83 ec 0c             	sub    esp,0xc
c00136e7:	68 84 61 02 c0       	push   0xc0026184
c00136ec:	e8 23 98 00 00       	call   c001cf14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00136f1:	83 c4 10             	add    esp,0x10
c00136f4:	83 ec 0c             	sub    esp,0xc
c00136f7:	68 84 61 02 c0       	push   0xc0026184
c00136fc:	e8 ef 97 00 00       	call   c001cef0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013701:	83 c4 10             	add    esp,0x10
c0013704:	84 c0                	test   al,al
c0013706:	74 dc                	je     c00136e4 <setupMultitasking(void (*)())+0xc>
c0013708:	83 ec 0c             	sub    esp,0xc
c001370b:	68 24 07 00 00       	push   0x724
c0013710:	e8 0c 41 ff ff       	call   c0007821 <malloc>
c0013715:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001371c:	89 c3                	mov    ebx,eax
c001371e:	6a 00                	push   0x0
c0013720:	68 cb f2 01 c0       	push   0xc001f2cb
c0013725:	6a 01                	push   0x1
c0013727:	50                   	push   eax
c0013728:	e8 6b fc ff ff       	call   c0013398 <Process::Process(bool, char const*, Process*, char**)>
c001372d:	83 c4 14             	add    esp,0x14
c0013730:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0013736:	89 1d 90 61 02 c0    	mov    DWORD PTR ds:0xc0026190,ebx
c001373c:	50                   	push   eax
c001373d:	e8 1d 4d ff ff       	call   c000845f <setActiveTerminal(VgaText*)>
c0013742:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c001374a:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0013754:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001375a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001375d:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0013767:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001376d:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0013773:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001377d:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0013787:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0013791:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0013797:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001379d:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00137a7:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00137ad:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00137b7:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00137bd:	5a                   	pop    edx
c00137be:	59                   	pop    ecx
c00137bf:	68 c7 f2 01 c0       	push   0xc001f2c7
c00137c4:	50                   	push   eax
c00137c5:	e8 36 ce fe ff       	call   c0000600 <strcpy>
c00137ca:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00137d1:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00137d5:	83 c4 14             	add    esp,0x14
c00137d8:	5b                   	pop    ebx
c00137d9:	5e                   	pop    esi
c00137da:	e9 8a ca fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00137df:	90                   	nop

c00137e0 <schedule()>:
c00137e0:	8b 15 64 61 02 c0    	mov    edx,DWORD PTR ds:0xc0026164
c00137e6:	85 d2                	test   edx,edx
c00137e8:	74 0e                	je     c00137f8 <schedule()+0x18>
c00137ea:	c7 05 60 61 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x1
c00137f4:	c3                   	ret    
c00137f5:	8d 76 00             	lea    esi,[esi+0x0]
c00137f8:	53                   	push   ebx
c00137f9:	83 ec 14             	sub    esp,0x14
c00137fc:	68 84 61 02 c0       	push   0xc0026184
c0013801:	e8 ea 96 00 00       	call   c001cef0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013806:	83 c4 10             	add    esp,0x10
c0013809:	84 c0                	test   al,al
c001380b:	75 3b                	jne    c0013848 <schedule()+0x68>
c001380d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013812:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0013815:	4a                   	dec    edx
c0013816:	74 38                	je     c0013850 <schedule()+0x70>
c0013818:	83 ec 0c             	sub    esp,0xc
c001381b:	68 84 61 02 c0       	push   0xc0026184
c0013820:	e8 e7 96 00 00       	call   c001cf0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013825:	c7 04 24 84 61 02 c0 	mov    DWORD PTR [esp],0xc0026184
c001382c:	89 c3                	mov    ebx,eax
c001382e:	e8 e1 96 00 00       	call   c001cf14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013833:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001383a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001383d:	e8 36 f8 ff ff       	call   c0013078 <switchToThread(ThreadControlBlock*)>
c0013842:	83 c4 10             	add    esp,0x10
c0013845:	8d 76 00             	lea    esi,[esi+0x0]
c0013848:	83 c4 08             	add    esp,0x8
c001384b:	5b                   	pop    ebx
c001384c:	c3                   	ret    
c001384d:	8d 76 00             	lea    esi,[esi+0x0]
c0013850:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0013857:	83 ec 08             	sub    esp,0x8
c001385a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001385f:	50                   	push   eax
c0013860:	68 84 61 02 c0       	push   0xc0026184
c0013865:	e8 62 97 00 00       	call   c001cfcc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001386a:	83 c4 10             	add    esp,0x10
c001386d:	eb a9                	jmp    c0013818 <schedule()+0x38>
c001386f:	90                   	nop

c0013870 <Semaphore::tryAcquire()>:
c0013870:	53                   	push   ebx
c0013871:	83 ec 08             	sub    esp,0x8
c0013874:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013878:	fa                   	cli    
c0013879:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001387e:	8d 50 01             	lea    edx,[eax+0x1]
c0013881:	89 15 68 61 02 c0    	mov    DWORD PTR ds:0xc0026168,edx
c0013887:	8b 15 64 61 02 c0    	mov    edx,DWORD PTR ds:0xc0026164
c001388d:	8d 5a 01             	lea    ebx,[edx+0x1]
c0013890:	89 1d 64 61 02 c0    	mov    DWORD PTR ds:0xc0026164,ebx
c0013896:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0013899:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001389b:	7c 33                	jl     c00138d0 <Semaphore::tryAcquire()+0x60>
c001389d:	89 15 64 61 02 c0    	mov    DWORD PTR ds:0xc0026164,edx
c00138a3:	85 d2                	test   edx,edx
c00138a5:	75 0d                	jne    c00138b4 <Semaphore::tryAcquire()+0x44>
c00138a7:	8b 15 60 61 02 c0    	mov    edx,DWORD PTR ds:0xc0026160
c00138ad:	85 d2                	test   edx,edx
c00138af:	75 6b                	jne    c001391c <Semaphore::tryAcquire()+0xac>
c00138b1:	8d 76 00             	lea    esi,[esi+0x0]
c00138b4:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00138b9:	85 c0                	test   eax,eax
c00138bb:	74 0b                	je     c00138c8 <Semaphore::tryAcquire()+0x58>
c00138bd:	8d 76 00             	lea    esi,[esi+0x0]
c00138c0:	31 c0                	xor    eax,eax
c00138c2:	83 c4 08             	add    esp,0x8
c00138c5:	5b                   	pop    ebx
c00138c6:	c3                   	ret    
c00138c7:	90                   	nop
c00138c8:	fb                   	sti    
c00138c9:	83 c4 08             	add    esp,0x8
c00138cc:	5b                   	pop    ebx
c00138cd:	c3                   	ret    
c00138ce:	66 90                	xchg   ax,ax
c00138d0:	43                   	inc    ebx
c00138d1:	89 15 64 61 02 c0    	mov    DWORD PTR ds:0xc0026164,edx
c00138d7:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00138da:	85 d2                	test   edx,edx
c00138dc:	75 22                	jne    c0013900 <Semaphore::tryAcquire()+0x90>
c00138de:	8b 0d 60 61 02 c0    	mov    ecx,DWORD PTR ds:0xc0026160
c00138e4:	85 c9                	test   ecx,ecx
c00138e6:	74 18                	je     c0013900 <Semaphore::tryAcquire()+0x90>
c00138e8:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c00138f2:	e8 e9 fe ff ff       	call   c00137e0 <schedule()>
c00138f7:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00138fc:	48                   	dec    eax
c00138fd:	8d 76 00             	lea    esi,[esi+0x0]
c0013900:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013905:	85 c0                	test   eax,eax
c0013907:	75 0b                	jne    c0013914 <Semaphore::tryAcquire()+0xa4>
c0013909:	fb                   	sti    
c001390a:	b0 01                	mov    al,0x1
c001390c:	83 c4 08             	add    esp,0x8
c001390f:	5b                   	pop    ebx
c0013910:	c3                   	ret    
c0013911:	8d 76 00             	lea    esi,[esi+0x0]
c0013914:	b0 01                	mov    al,0x1
c0013916:	83 c4 08             	add    esp,0x8
c0013919:	5b                   	pop    ebx
c001391a:	c3                   	ret    
c001391b:	90                   	nop
c001391c:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c0013926:	e8 b5 fe ff ff       	call   c00137e0 <schedule()>
c001392b:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013930:	48                   	dec    eax
c0013931:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013936:	85 c0                	test   eax,eax
c0013938:	75 86                	jne    c00138c0 <Semaphore::tryAcquire()+0x50>
c001393a:	eb 8c                	jmp    c00138c8 <Semaphore::tryAcquire()+0x58>

c001393c <Semaphore::assertLocked(char const*)>:
c001393c:	83 ec 0c             	sub    esp,0xc
c001393f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013943:	fa                   	cli    
c0013944:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c001394a:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c001394f:	8d 48 01             	lea    ecx,[eax+0x1]
c0013952:	89 0d 64 61 02 c0    	mov    DWORD PTR ds:0xc0026164,ecx
c0013958:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001395a:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001395d:	7c 29                	jl     c0013988 <Semaphore::assertLocked(char const*)+0x4c>
c001395f:	90                   	nop
c0013960:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c0013965:	85 c0                	test   eax,eax
c0013967:	75 0b                	jne    c0013974 <Semaphore::assertLocked(char const*)+0x38>
c0013969:	a1 60 61 02 c0       	mov    eax,ds:0xc0026160
c001396e:	85 c0                	test   eax,eax
c0013970:	75 2e                	jne    c00139a0 <Semaphore::assertLocked(char const*)+0x64>
c0013972:	66 90                	xchg   ax,ax
c0013974:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013979:	48                   	dec    eax
c001397a:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001397f:	75 03                	jne    c0013984 <Semaphore::assertLocked(char const*)+0x48>
c0013981:	fb                   	sti    
c0013982:	66 90                	xchg   ax,ax
c0013984:	83 c4 0c             	add    esp,0xc
c0013987:	c3                   	ret    
c0013988:	83 ec 0c             	sub    esp,0xc
c001398b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001398f:	52                   	push   edx
c0013990:	e8 2e c9 ff ff       	call   c00102c3 <KePanic(char const*)>
c0013995:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c001399a:	83 c4 10             	add    esp,0x10
c001399d:	48                   	dec    eax
c001399e:	eb c0                	jmp    c0013960 <Semaphore::assertLocked(char const*)+0x24>
c00139a0:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c00139aa:	e8 31 fe ff ff       	call   c00137e0 <schedule()>
c00139af:	eb c3                	jmp    c0013974 <Semaphore::assertLocked(char const*)+0x38>
c00139b1:	8d 76 00             	lea    esi,[esi+0x0]

c00139b4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00139b4:	83 ec 0c             	sub    esp,0xc
c00139b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139c0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00139c3:	e8 18 fe ff ff       	call   c00137e0 <schedule()>
c00139c8:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00139cd:	48                   	dec    eax
c00139ce:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00139d3:	75 03                	jne    c00139d8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00139d5:	fb                   	sti    
c00139d6:	66 90                	xchg   ax,ax
c00139d8:	83 c4 0c             	add    esp,0xc
c00139db:	c3                   	ret    

c00139dc <blockTask(TaskState)>:
c00139dc:	83 ec 0c             	sub    esp,0xc
c00139df:	fa                   	cli    
c00139e0:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c00139e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139ef:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00139f2:	e8 e9 fd ff ff       	call   c00137e0 <schedule()>
c00139f7:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00139fc:	48                   	dec    eax
c00139fd:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013a02:	75 04                	jne    c0013a08 <blockTask(TaskState)+0x2c>
c0013a04:	fb                   	sti    
c0013a05:	8d 76 00             	lea    esi,[esi+0x0]
c0013a08:	83 c4 0c             	add    esp,0xc
c0013a0b:	c3                   	ret    

c0013a0c <waitTask(int, int*, int)>:
c0013a0c:	83 ec 18             	sub    esp,0x18
c0013a0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a14:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013a18:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0013a1b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013a1f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a24:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0013a27:	6a 07                	push   0x7
c0013a29:	e8 ae ff ff ff       	call   c00139dc <blockTask(TaskState)>
c0013a2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a33:	83 c4 10             	add    esp,0x10
c0013a36:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0013a39:	85 d2                	test   edx,edx
c0013a3b:	74 0b                	je     c0013a48 <waitTask(int, int*, int)+0x3c>
c0013a3d:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0013a40:	89 02                	mov    DWORD PTR [edx],eax
c0013a42:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a47:	90                   	nop
c0013a48:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0013a4b:	83 c4 0c             	add    esp,0xc
c0013a4e:	c3                   	ret    
c0013a4f:	90                   	nop

c0013a50 <milliTenthSleepUntil(unsigned int)>:
c0013a50:	83 ec 0c             	sub    esp,0xc
c0013a53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a57:	39 05 8c 54 02 c0    	cmp    DWORD PTR ds:0xc002548c,eax
c0013a5d:	76 05                	jbe    c0013a64 <milliTenthSleepUntil(unsigned int)+0x14>
c0013a5f:	90                   	nop
c0013a60:	83 c4 0c             	add    esp,0xc
c0013a63:	c3                   	ret    
c0013a64:	fa                   	cli    
c0013a65:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0013a6b:	83 ec 08             	sub    esp,0x8
c0013a6e:	ff 05 64 61 02 c0    	inc    DWORD PTR ds:0xc0026164
c0013a74:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013a7a:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013a7d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013a83:	52                   	push   edx
c0013a84:	68 78 61 02 c0       	push   0xc0026178
c0013a89:	e8 3e 95 00 00       	call   c001cfcc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013a8e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013a95:	e8 42 ff ff ff       	call   c00139dc <blockTask(TaskState)>
c0013a9a:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c0013a9f:	83 c4 10             	add    esp,0x10
c0013aa2:	48                   	dec    eax
c0013aa3:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c0013aa8:	85 c0                	test   eax,eax
c0013aaa:	75 0c                	jne    c0013ab8 <milliTenthSleepUntil(unsigned int)+0x68>
c0013aac:	a1 60 61 02 c0       	mov    eax,ds:0xc0026160
c0013ab1:	85 c0                	test   eax,eax
c0013ab3:	75 17                	jne    c0013acc <milliTenthSleepUntil(unsigned int)+0x7c>
c0013ab5:	8d 76 00             	lea    esi,[esi+0x0]
c0013ab8:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013abd:	48                   	dec    eax
c0013abe:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013ac3:	75 9b                	jne    c0013a60 <milliTenthSleepUntil(unsigned int)+0x10>
c0013ac5:	fb                   	sti    
c0013ac6:	83 c4 0c             	add    esp,0xc
c0013ac9:	c3                   	ret    
c0013aca:	66 90                	xchg   ax,ax
c0013acc:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c0013ad6:	e8 05 fd ff ff       	call   c00137e0 <schedule()>
c0013adb:	eb db                	jmp    c0013ab8 <milliTenthSleepUntil(unsigned int)+0x68>
c0013add:	8d 76 00             	lea    esi,[esi+0x0]

c0013ae0 <milliTenthSleep(unsigned int)>:
c0013ae0:	a1 8c 54 02 c0       	mov    eax,ds:0xc002548c
c0013ae5:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0013ae9:	e9 62 ff ff ff       	jmp    c0013a50 <milliTenthSleepUntil(unsigned int)>
c0013aee:	66 90                	xchg   ax,ax

c0013af0 <sleep(unsigned int)>:
c0013af0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013af4:	8d 04 80             	lea    eax,[eax+eax*4]
c0013af7:	8d 04 80             	lea    eax,[eax+eax*4]
c0013afa:	8d 04 80             	lea    eax,[eax+eax*4]
c0013afd:	8d 04 80             	lea    eax,[eax+eax*4]
c0013b00:	c1 e0 04             	shl    eax,0x4
c0013b03:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b07:	eb d7                	jmp    c0013ae0 <milliTenthSleep(unsigned int)>
c0013b09:	90                   	nop
c0013b0a:	66 90                	xchg   ax,ax

c0013b0c <Semaphore::acquire()>:
c0013b0c:	83 ec 0c             	sub    esp,0xc
c0013b0f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b13:	fa                   	cli    
c0013b14:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c0013b19:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0013b1f:	8d 48 01             	lea    ecx,[eax+0x1]
c0013b22:	89 0d 64 61 02 c0    	mov    DWORD PTR ds:0xc0026164,ecx
c0013b28:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013b2b:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013b2d:	7d 2d                	jge    c0013b5c <Semaphore::acquire()+0x50>
c0013b2f:	41                   	inc    ecx
c0013b30:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0013b33:	90                   	nop
c0013b34:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c0013b39:	85 c0                	test   eax,eax
c0013b3b:	75 0b                	jne    c0013b48 <Semaphore::acquire()+0x3c>
c0013b3d:	a1 60 61 02 c0       	mov    eax,ds:0xc0026160
c0013b42:	85 c0                	test   eax,eax
c0013b44:	75 62                	jne    c0013ba8 <Semaphore::acquire()+0x9c>
c0013b46:	66 90                	xchg   ax,ax
c0013b48:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013b4d:	48                   	dec    eax
c0013b4e:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013b53:	75 03                	jne    c0013b58 <Semaphore::acquire()+0x4c>
c0013b55:	fb                   	sti    
c0013b56:	66 90                	xchg   ax,ax
c0013b58:	83 c4 0c             	add    esp,0xc
c0013b5b:	c3                   	ret    
c0013b5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b61:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013b68:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013b6b:	85 c9                	test   ecx,ecx
c0013b6d:	74 4d                	je     c0013bbc <Semaphore::acquire()+0xb0>
c0013b6f:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0013b72:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013b78:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013b7b:	90                   	nop
c0013b7c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b81:	83 ec 0c             	sub    esp,0xc
c0013b84:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0013b87:	68 48 f3 01 c0       	push   0xc001f348
c0013b8c:	e8 29 6a ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0013b91:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013b98:	e8 3f fe ff ff       	call   c00139dc <blockTask(TaskState)>
c0013b9d:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c0013ba2:	83 c4 10             	add    esp,0x10
c0013ba5:	48                   	dec    eax
c0013ba6:	eb 8c                	jmp    c0013b34 <Semaphore::acquire()+0x28>
c0013ba8:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c0013bb2:	e8 29 fc ff ff       	call   c00137e0 <schedule()>
c0013bb7:	eb 8f                	jmp    c0013b48 <Semaphore::acquire()+0x3c>
c0013bb9:	8d 76 00             	lea    esi,[esi+0x0]
c0013bbc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013bc1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013bc4:	eb b6                	jmp    c0013b7c <Semaphore::acquire()+0x70>
c0013bc6:	66 90                	xchg   ax,ax

c0013bc8 <taskReturned>:
c0013bc8:	83 ec 18             	sub    esp,0x18
c0013bcb:	68 68 f3 01 c0       	push   0xc001f368
c0013bd0:	e8 ee c6 ff ff       	call   c00102c3 <KePanic(char const*)>
c0013bd5:	83 c4 10             	add    esp,0x10
c0013bd8:	83 ec 0c             	sub    esp,0xc
c0013bdb:	6a 02                	push   0x2
c0013bdd:	e8 fa fd ff ff       	call   c00139dc <blockTask(TaskState)>
c0013be2:	fa                   	cli    
c0013be3:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0013be9:	e8 f2 fb ff ff       	call   c00137e0 <schedule()>
c0013bee:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013bf3:	83 c4 10             	add    esp,0x10
c0013bf6:	48                   	dec    eax
c0013bf7:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013bfc:	85 c0                	test   eax,eax
c0013bfe:	75 d8                	jne    c0013bd8 <taskReturned+0x10>
c0013c00:	fb                   	sti    
c0013c01:	eb d5                	jmp    c0013bd8 <taskReturned+0x10>
c0013c03:	90                   	nop

c0013c04 <Thr::processFromPID(int)>:
c0013c04:	57                   	push   edi
c0013c05:	56                   	push   esi
c0013c06:	53                   	push   ebx
c0013c07:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c0b:	fa                   	cli    
c0013c0c:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0013c12:	83 ec 0c             	sub    esp,0xc
c0013c15:	68 84 61 02 c0       	push   0xc0026184
c0013c1a:	e8 ed 92 00 00       	call   c001cf0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c1f:	83 c4 10             	add    esp,0x10
c0013c22:	89 c7                	mov    edi,eax
c0013c24:	eb 16                	jmp    c0013c3c <Thr::processFromPID(int)+0x38>
c0013c26:	66 90                	xchg   ax,ax
c0013c28:	83 ec 0c             	sub    esp,0xc
c0013c2b:	68 84 61 02 c0       	push   0xc0026184
c0013c30:	e8 d7 92 00 00       	call   c001cf0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c35:	83 c4 10             	add    esp,0x10
c0013c38:	39 f8                	cmp    eax,edi
c0013c3a:	74 4c                	je     c0013c88 <Thr::processFromPID(int)+0x84>
c0013c3c:	83 ec 0c             	sub    esp,0xc
c0013c3f:	68 84 61 02 c0       	push   0xc0026184
c0013c44:	e8 c3 92 00 00       	call   c001cf0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c49:	c7 04 24 84 61 02 c0 	mov    DWORD PTR [esp],0xc0026184
c0013c50:	89 c3                	mov    ebx,eax
c0013c52:	e8 bd 92 00 00       	call   c001cf14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013c57:	58                   	pop    eax
c0013c58:	5a                   	pop    edx
c0013c59:	53                   	push   ebx
c0013c5a:	68 84 61 02 c0       	push   0xc0026184
c0013c5f:	e8 68 93 00 00       	call   c001cfcc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013c64:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013c67:	83 c4 10             	add    esp,0x10
c0013c6a:	39 30                	cmp    DWORD PTR [eax],esi
c0013c6c:	75 ba                	jne    c0013c28 <Thr::processFromPID(int)+0x24>
c0013c6e:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013c73:	48                   	dec    eax
c0013c74:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013c79:	74 09                	je     c0013c84 <Thr::processFromPID(int)+0x80>
c0013c7b:	90                   	nop
c0013c7c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013c7f:	5b                   	pop    ebx
c0013c80:	5e                   	pop    esi
c0013c81:	5f                   	pop    edi
c0013c82:	c3                   	ret    
c0013c83:	90                   	nop
c0013c84:	fb                   	sti    
c0013c85:	eb f5                	jmp    c0013c7c <Thr::processFromPID(int)+0x78>
c0013c87:	90                   	nop
c0013c88:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013c8d:	48                   	dec    eax
c0013c8e:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013c93:	75 07                	jne    c0013c9c <Thr::processFromPID(int)+0x98>
c0013c95:	fb                   	sti    
c0013c96:	5b                   	pop    ebx
c0013c97:	5e                   	pop    esi
c0013c98:	5f                   	pop    edi
c0013c99:	c3                   	ret    
c0013c9a:	66 90                	xchg   ax,ax
c0013c9c:	5b                   	pop    ebx
c0013c9d:	31 c0                	xor    eax,eax
c0013c9f:	5e                   	pop    esi
c0013ca0:	5f                   	pop    edi
c0013ca1:	c3                   	ret    
c0013ca2:	66 90                	xchg   ax,ax

c0013ca4 <unblockTask(ThreadControlBlock*)>:
c0013ca4:	53                   	push   ebx
c0013ca5:	83 ec 08             	sub    esp,0x8
c0013ca8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013cac:	fa                   	cli    
c0013cad:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0013cb3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013cb6:	85 c0                	test   eax,eax
c0013cb8:	74 66                	je     c0013d20 <unblockTask(ThreadControlBlock*)+0x7c>
c0013cba:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013cbd:	48                   	dec    eax
c0013cbe:	74 38                	je     c0013cf8 <unblockTask(ThreadControlBlock*)+0x54>
c0013cc0:	83 ec 0c             	sub    esp,0xc
c0013cc3:	68 84 61 02 c0       	push   0xc0026184
c0013cc8:	e8 3f 92 00 00       	call   c001cf0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ccd:	83 c4 10             	add    esp,0x10
c0013cd0:	85 c0                	test   eax,eax
c0013cd2:	75 1c                	jne    c0013cf0 <unblockTask(ThreadControlBlock*)+0x4c>
c0013cd4:	eb 5e                	jmp    c0013d34 <unblockTask(ThreadControlBlock*)+0x90>
c0013cd6:	66 90                	xchg   ax,ax
c0013cd8:	83 ec 08             	sub    esp,0x8
c0013cdb:	50                   	push   eax
c0013cdc:	68 84 61 02 c0       	push   0xc0026184
c0013ce1:	e8 d6 95 00 00       	call   c001d2bc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013ce6:	83 c4 10             	add    esp,0x10
c0013ce9:	85 c0                	test   eax,eax
c0013ceb:	74 47                	je     c0013d34 <unblockTask(ThreadControlBlock*)+0x90>
c0013ced:	8d 76 00             	lea    esi,[esi+0x0]
c0013cf0:	39 c3                	cmp    ebx,eax
c0013cf2:	75 e4                	jne    c0013cd8 <unblockTask(ThreadControlBlock*)+0x34>
c0013cf4:	eb 12                	jmp    c0013d08 <unblockTask(ThreadControlBlock*)+0x64>
c0013cf6:	66 90                	xchg   ax,ax
c0013cf8:	83 ec 0c             	sub    esp,0xc
c0013cfb:	68 e9 f2 01 c0       	push   0xc001f2e9
c0013d00:	e8 b5 68 ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0013d05:	83 c4 10             	add    esp,0x10
c0013d08:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013d0d:	48                   	dec    eax
c0013d0e:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013d13:	75 03                	jne    c0013d18 <unblockTask(ThreadControlBlock*)+0x74>
c0013d15:	fb                   	sti    
c0013d16:	66 90                	xchg   ax,ax
c0013d18:	83 c4 08             	add    esp,0x8
c0013d1b:	5b                   	pop    ebx
c0013d1c:	c3                   	ret    
c0013d1d:	8d 76 00             	lea    esi,[esi+0x0]
c0013d20:	83 ec 0c             	sub    esp,0xc
c0013d23:	68 d2 f2 01 c0       	push   0xc001f2d2
c0013d28:	e8 8d 68 ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0013d2d:	83 c4 10             	add    esp,0x10
c0013d30:	eb d6                	jmp    c0013d08 <unblockTask(ThreadControlBlock*)+0x64>
c0013d32:	66 90                	xchg   ax,ax
c0013d34:	83 ec 08             	sub    esp,0x8
c0013d37:	53                   	push   ebx
c0013d38:	68 84 61 02 c0       	push   0xc0026184
c0013d3d:	e8 8a 92 00 00       	call   c001cfcc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013d42:	83 c4 10             	add    esp,0x10
c0013d45:	eb c1                	jmp    c0013d08 <unblockTask(ThreadControlBlock*)+0x64>
c0013d47:	90                   	nop

c0013d48 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013d48:	55                   	push   ebp
c0013d49:	57                   	push   edi
c0013d4a:	56                   	push   esi
c0013d4b:	53                   	push   ebx
c0013d4c:	83 ec 1c             	sub    esp,0x1c
c0013d4f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013d53:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013d56:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0013d5c:	85 ed                	test   ebp,ebp
c0013d5e:	7e 24                	jle    c0013d84 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0013d60:	31 f6                	xor    esi,esi
c0013d62:	66 90                	xchg   ax,ax
c0013d64:	83 ec 0c             	sub    esp,0xc
c0013d67:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0013d6e:	46                   	inc    esi
c0013d6f:	57                   	push   edi
c0013d70:	e8 bc 3a ff ff       	call   c0007831 <free>
c0013d75:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013d78:	83 c4 10             	add    esp,0x10
c0013d7b:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0013d81:	7f e1                	jg     c0013d64 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0013d83:	90                   	nop
c0013d84:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013d8e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013d93:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0013d96:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013d99:	d3 c0                	rol    eax,cl
c0013d9b:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0013da2:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013da5:	89 f7                	mov    edi,esi
c0013da7:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0013daf:	0f 85 77 01 00 00    	jne    c0013f2c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013db5:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0013dbb:	85 ed                	test   ebp,ebp
c0013dbd:	74 1d                	je     c0013ddc <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0013dbf:	83 ec 0c             	sub    esp,0xc
c0013dc2:	55                   	push   ebp
c0013dc3:	e8 0c c2 ff ff       	call   c000ffd4 <EnvVarContainer::~EnvVarContainer()>
c0013dc8:	59                   	pop    ecx
c0013dc9:	5e                   	pop    esi
c0013dca:	6a 0c                	push   0xc
c0013dcc:	55                   	push   ebp
c0013dcd:	e8 f2 66 ff ff       	call   c000a4c4 <operator delete(void*, unsigned long)>
c0013dd2:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013dd5:	83 c4 10             	add    esp,0x10
c0013dd8:	89 f7                	mov    edi,esi
c0013dda:	66 90                	xchg   ax,ax
c0013ddc:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013de2:	85 c0                	test   eax,eax
c0013de4:	0f 84 b6 00 00 00    	je     c0013ea0 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013dea:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0013ded:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013df1:	31 c9                	xor    ecx,ecx
c0013df3:	eb 17                	jmp    c0013e0c <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0013df5:	8d 76 00             	lea    esi,[esi+0x0]
c0013df8:	41                   	inc    ecx
c0013df9:	83 f9 10             	cmp    ecx,0x10
c0013dfc:	0f 84 9e 00 00 00    	je     c0013ea0 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013e02:	66 90                	xchg   ax,ax
c0013e04:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013e0a:	66 90                	xchg   ax,ax
c0013e0c:	31 d2                	xor    edx,edx
c0013e0e:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0013e15:	d3 fa                	sar    edx,cl
c0013e17:	83 e2 01             	and    edx,0x1
c0013e1a:	74 dc                	je     c0013df8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013e1c:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0013e1f:	01 d2                	add    edx,edx
c0013e21:	01 ca                	add    edx,ecx
c0013e23:	8d 14 92             	lea    edx,[edx+edx*4]
c0013e26:	01 d0                	add    eax,edx
c0013e28:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0013e2e:	83 fd 07             	cmp    ebp,0x7
c0013e31:	75 c5                	jne    c0013df8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013e33:	05 40 02 00 00       	add    eax,0x240
c0013e38:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0013e3b:	83 fd ff             	cmp    ebp,0xffffffff
c0013e3e:	0f 8c f0 00 00 00    	jl     c0013f34 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0013e44:	0f 84 ae 01 00 00    	je     c0013ff8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0013e4a:	85 ed                	test   ebp,ebp
c0013e4c:	0f 84 92 01 00 00    	je     c0013fe4 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0013e52:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0013e54:	75 a2                	jne    c0013df8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013e56:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013e5c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013e60:	01 d0                	add    eax,edx
c0013e62:	66 90                	xchg   ax,ax
c0013e64:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0013e68:	83 ec 0c             	sub    esp,0xc
c0013e6b:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0013e71:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013e74:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013e7a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0013e81:	50                   	push   eax
c0013e82:	e8 1d fe ff ff       	call   c0013ca4 <unblockTask(ThreadControlBlock*)>
c0013e87:	83 c4 10             	add    esp,0x10
c0013e8a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013e8d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013e91:	89 f7                	mov    edi,esi
c0013e93:	41                   	inc    ecx
c0013e94:	83 f9 10             	cmp    ecx,0x10
c0013e97:	0f 85 67 ff ff ff    	jne    c0013e04 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0013e9d:	8d 76 00             	lea    esi,[esi+0x0]
c0013ea0:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0013ea6:	85 c0                	test   eax,eax
c0013ea8:	74 62                	je     c0013f0c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013eaa:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0013eb0:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0013eb6:	74 54                	je     c0013f0c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013eb8:	83 ec 0c             	sub    esp,0xc
c0013ebb:	68 84 61 02 c0       	push   0xc0026184
c0013ec0:	e8 47 90 00 00       	call   c001cf0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ec5:	c7 04 24 84 61 02 c0 	mov    DWORD PTR [esp],0xc0026184
c0013ecc:	89 c7                	mov    edi,eax
c0013ece:	e8 1d 90 00 00       	call   c001cef0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013ed3:	83 c4 10             	add    esp,0x10
c0013ed6:	84 c0                	test   al,al
c0013ed8:	0f 84 ce 00 00 00    	je     c0013fac <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0013ede:	66 90                	xchg   ax,ax
c0013ee0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013ee3:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013ee9:	85 d2                	test   edx,edx
c0013eeb:	74 0f                	je     c0013efc <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0013eed:	83 ec 0c             	sub    esp,0xc
c0013ef0:	8b 02                	mov    eax,DWORD PTR [edx]
c0013ef2:	52                   	push   edx
c0013ef3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013ef6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013ef9:	83 c4 10             	add    esp,0x10
c0013efc:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0013f06:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0013f09:	8d 76 00             	lea    esi,[esi+0x0]
c0013f0c:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0013f12:	85 db                	test   ebx,ebx
c0013f14:	74 16                	je     c0013f2c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013f16:	83 ec 0c             	sub    esp,0xc
c0013f19:	53                   	push   ebx
c0013f1a:	e8 3d 59 ff ff       	call   c000985c <VAS::~VAS()>
c0013f1f:	58                   	pop    eax
c0013f20:	5a                   	pop    edx
c0013f21:	6a 14                	push   0x14
c0013f23:	53                   	push   ebx
c0013f24:	e8 9b 65 ff ff       	call   c000a4c4 <operator delete(void*, unsigned long)>
c0013f29:	83 c4 10             	add    esp,0x10
c0013f2c:	83 c4 1c             	add    esp,0x1c
c0013f2f:	5b                   	pop    ebx
c0013f30:	5e                   	pop    esi
c0013f31:	5f                   	pop    edi
c0013f32:	5d                   	pop    ebp
c0013f33:	c3                   	ret    
c0013f34:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f38:	83 ec 0c             	sub    esp,0xc
c0013f3b:	68 9c f3 01 c0       	push   0xc001f39c
c0013f40:	e8 7e c3 ff ff       	call   c00102c3 <KePanic(char const*)>
c0013f45:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013f48:	83 c4 10             	add    esp,0x10
c0013f4b:	89 f7                	mov    edi,esi
c0013f4d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013f51:	e9 a2 fe ff ff       	jmp    c0013df8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013f56:	66 90                	xchg   ax,ax
c0013f58:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013f5e:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0013f64:	75 1e                	jne    c0013f84 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013f66:	83 ec 0c             	sub    esp,0xc
c0013f69:	68 04 f4 01 c0       	push   0xc001f404
c0013f6e:	e8 47 66 ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0013f73:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013f7a:	e8 5d fa ff ff       	call   c00139dc <blockTask(TaskState)>
c0013f7f:	83 c4 10             	add    esp,0x10
c0013f82:	66 90                	xchg   ax,ax
c0013f84:	83 ec 08             	sub    esp,0x8
c0013f87:	56                   	push   esi
c0013f88:	68 84 61 02 c0       	push   0xc0026184
c0013f8d:	e8 3a 90 00 00       	call   c001cfcc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013f92:	c7 04 24 84 61 02 c0 	mov    DWORD PTR [esp],0xc0026184
c0013f99:	e8 6e 8f 00 00       	call   c001cf0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f9e:	83 c4 10             	add    esp,0x10
c0013fa1:	39 f8                	cmp    eax,edi
c0013fa3:	0f 84 37 ff ff ff    	je     c0013ee0 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0013fa9:	8d 76 00             	lea    esi,[esi+0x0]
c0013fac:	83 ec 0c             	sub    esp,0xc
c0013faf:	68 84 61 02 c0       	push   0xc0026184
c0013fb4:	e8 53 8f 00 00       	call   c001cf0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013fb9:	c7 04 24 84 61 02 c0 	mov    DWORD PTR [esp],0xc0026184
c0013fc0:	89 c6                	mov    esi,eax
c0013fc2:	e8 4d 8f 00 00       	call   c001cf14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013fc7:	83 c4 10             	add    esp,0x10
c0013fca:	39 f3                	cmp    ebx,esi
c0013fcc:	74 b6                	je     c0013f84 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013fce:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0013fd1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013fd4:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0013fda:	75 a8                	jne    c0013f84 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013fdc:	e9 77 ff ff ff       	jmp    c0013f58 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0013fe1:	8d 76 00             	lea    esi,[esi+0x0]
c0013fe4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013fe8:	83 ec 0c             	sub    esp,0xc
c0013feb:	68 d0 f3 01 c0       	push   0xc001f3d0
c0013ff0:	e9 4b ff ff ff       	jmp    c0013f40 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0013ff5:	8d 76 00             	lea    esi,[esi+0x0]
c0013ff8:	8b 36                	mov    esi,DWORD PTR [esi]
c0013ffa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013ffe:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0014001:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014004:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001400a:	01 d7                	add    edi,edx
c001400c:	89 f8                	mov    eax,edi
c001400e:	e9 51 fe ff ff       	jmp    c0013e64 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0014013:	90                   	nop

c0014014 <cleanerTaskFunction(void*)>:
c0014014:	53                   	push   ebx
c0014015:	83 ec 08             	sub    esp,0x8
c0014018:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001401d:	48                   	dec    eax
c001401e:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0014023:	75 03                	jne    c0014028 <cleanerTaskFunction(void*)+0x14>
c0014025:	fb                   	sti    
c0014026:	66 90                	xchg   ax,ax
c0014028:	fa                   	cli    
c0014029:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001402e:	80 3d 4c 61 02 c0 00 	cmp    BYTE PTR ds:0xc002614c,0x0
c0014035:	8d 50 01             	lea    edx,[eax+0x1]
c0014038:	89 15 68 61 02 c0    	mov    DWORD PTR ds:0xc0026168,edx
c001403e:	0f 84 ac 00 00 00    	je     c00140f0 <cleanerTaskFunction(void*)+0xdc>
c0014044:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0014049:	85 c0                	test   eax,eax
c001404b:	75 03                	jne    c0014050 <cleanerTaskFunction(void*)+0x3c>
c001404d:	fb                   	sti    
c001404e:	66 90                	xchg   ax,ax
c0014050:	c6 05 4c 61 02 c0 00 	mov    BYTE PTR ds:0xc002614c,0x0
c0014057:	fa                   	cli    
c0014058:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c001405e:	ff 05 64 61 02 c0    	inc    DWORD PTR ds:0xc0026164
c0014064:	fa                   	cli    
c0014065:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c001406b:	eb 2b                	jmp    c0014098 <cleanerTaskFunction(void*)+0x84>
c001406d:	8d 76 00             	lea    esi,[esi+0x0]
c0014070:	83 ec 0c             	sub    esp,0xc
c0014073:	68 6c 61 02 c0       	push   0xc002616c
c0014078:	e8 8f 8e 00 00       	call   c001cf0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001407d:	c7 04 24 6c 61 02 c0 	mov    DWORD PTR [esp],0xc002616c
c0014084:	89 c3                	mov    ebx,eax
c0014086:	e8 89 8e 00 00       	call   c001cf14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001408b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001408e:	e8 b5 fc ff ff       	call   c0013d48 <cleanupTerminatedTask(ThreadControlBlock*)>
c0014093:	83 c4 10             	add    esp,0x10
c0014096:	66 90                	xchg   ax,ax
c0014098:	83 ec 0c             	sub    esp,0xc
c001409b:	68 6c 61 02 c0       	push   0xc002616c
c00140a0:	e8 4b 8e 00 00       	call   c001cef0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00140a5:	83 c4 10             	add    esp,0x10
c00140a8:	84 c0                	test   al,al
c00140aa:	74 c4                	je     c0014070 <cleanerTaskFunction(void*)+0x5c>
c00140ac:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00140b1:	48                   	dec    eax
c00140b2:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00140b7:	75 03                	jne    c00140bc <cleanerTaskFunction(void*)+0xa8>
c00140b9:	fb                   	sti    
c00140ba:	66 90                	xchg   ax,ax
c00140bc:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c00140c1:	48                   	dec    eax
c00140c2:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c00140c7:	0f 85 4b ff ff ff    	jne    c0014018 <cleanerTaskFunction(void*)+0x4>
c00140cd:	a1 60 61 02 c0       	mov    eax,ds:0xc0026160
c00140d2:	85 c0                	test   eax,eax
c00140d4:	0f 84 3e ff ff ff    	je     c0014018 <cleanerTaskFunction(void*)+0x4>
c00140da:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c00140e4:	e8 f7 f6 ff ff       	call   c00137e0 <schedule()>
c00140e9:	e9 2a ff ff ff       	jmp    c0014018 <cleanerTaskFunction(void*)+0x4>
c00140ee:	66 90                	xchg   ax,ax
c00140f0:	83 ec 0c             	sub    esp,0xc
c00140f3:	6a 02                	push   0x2
c00140f5:	e8 ba f8 ff ff       	call   c00139b4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00140fa:	83 c4 10             	add    esp,0x10
c00140fd:	e9 4e ff ff ff       	jmp    c0014050 <cleanerTaskFunction(void*)+0x3c>
c0014102:	66 90                	xchg   ax,ax

c0014104 <terminateTask(int)>:
c0014104:	83 ec 14             	sub    esp,0x14
c0014107:	fa                   	cli    
c0014108:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c001410e:	ff 05 64 61 02 c0    	inc    DWORD PTR ds:0xc0026164
c0014114:	fa                   	cli    
c0014115:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c001411b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001411f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014124:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0014127:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001412c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001412f:	50                   	push   eax
c0014130:	68 6c 61 02 c0       	push   0xc002616c
c0014135:	e8 92 8e 00 00       	call   c001cfcc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001413a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001413f:	83 c4 10             	add    esp,0x10
c0014142:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0014149:	a1 48 61 02 c0       	mov    eax,ds:0xc0026148
c001414e:	85 c0                	test   eax,eax
c0014150:	74 5e                	je     c00141b0 <terminateTask(int)+0xac>
c0014152:	83 ec 0c             	sub    esp,0xc
c0014155:	c6 05 4c 61 02 c0 01 	mov    BYTE PTR ds:0xc002614c,0x1
c001415c:	50                   	push   eax
c001415d:	e8 42 fb ff ff       	call   c0013ca4 <unblockTask(ThreadControlBlock*)>
c0014162:	83 c4 10             	add    esp,0x10
c0014165:	8d 76 00             	lea    esi,[esi+0x0]
c0014168:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001416d:	48                   	dec    eax
c001416e:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0014173:	75 03                	jne    c0014178 <terminateTask(int)+0x74>
c0014175:	fb                   	sti    
c0014176:	66 90                	xchg   ax,ax
c0014178:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c001417d:	48                   	dec    eax
c001417e:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c0014183:	75 0b                	jne    c0014190 <terminateTask(int)+0x8c>
c0014185:	83 3d 60 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026160,0x0
c001418c:	75 36                	jne    c00141c4 <terminateTask(int)+0xc0>
c001418e:	66 90                	xchg   ax,ax
c0014190:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0014195:	48                   	dec    eax
c0014196:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001419b:	75 03                	jne    c00141a0 <terminateTask(int)+0x9c>
c001419d:	fb                   	sti    
c001419e:	66 90                	xchg   ax,ax
c00141a0:	fa                   	cli    
c00141a1:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c00141a7:	90                   	nop
c00141a8:	e8 33 f6 ff ff       	call   c00137e0 <schedule()>
c00141ad:	eb e1                	jmp    c0014190 <terminateTask(int)+0x8c>
c00141af:	90                   	nop
c00141b0:	83 ec 0c             	sub    esp,0xc
c00141b3:	68 00 f3 01 c0       	push   0xc001f300
c00141b8:	e8 fd 63 ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c00141bd:	83 c4 10             	add    esp,0x10
c00141c0:	eb a6                	jmp    c0014168 <terminateTask(int)+0x64>
c00141c2:	66 90                	xchg   ax,ax
c00141c4:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c00141ce:	eb d8                	jmp    c00141a8 <terminateTask(int)+0xa4>

c00141d0 <Thr::terminateFromIRQ(int)>:
c00141d0:	83 ec 18             	sub    esp,0x18
c00141d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00141d7:	50                   	push   eax
c00141d8:	e8 27 ff ff ff       	call   c0014104 <terminateTask(int)>
c00141dd:	90                   	nop
c00141de:	66 90                	xchg   ax,ax

c00141e0 <Semaphore::release()>:
c00141e0:	83 ec 0c             	sub    esp,0xc
c00141e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00141e7:	fa                   	cli    
c00141e8:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c00141ed:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c00141f3:	8d 48 01             	lea    ecx,[eax+0x1]
c00141f6:	89 0d 64 61 02 c0    	mov    DWORD PTR ds:0xc0026164,ecx
c00141fc:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00141ff:	85 c9                	test   ecx,ecx
c0014201:	74 41                	je     c0014244 <Semaphore::release()+0x64>
c0014203:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0014206:	83 ec 0c             	sub    esp,0xc
c0014209:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001420c:	51                   	push   ecx
c001420d:	e8 92 fa ff ff       	call   c0013ca4 <unblockTask(ThreadControlBlock*)>
c0014212:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c0014217:	83 c4 10             	add    esp,0x10
c001421a:	48                   	dec    eax
c001421b:	90                   	nop
c001421c:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c0014221:	85 c0                	test   eax,eax
c0014223:	75 0b                	jne    c0014230 <Semaphore::release()+0x50>
c0014225:	a1 60 61 02 c0       	mov    eax,ds:0xc0026160
c001422a:	85 c0                	test   eax,eax
c001422c:	75 1e                	jne    c001424c <Semaphore::release()+0x6c>
c001422e:	66 90                	xchg   ax,ax
c0014230:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0014235:	48                   	dec    eax
c0014236:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001423b:	75 03                	jne    c0014240 <Semaphore::release()+0x60>
c001423d:	fb                   	sti    
c001423e:	66 90                	xchg   ax,ax
c0014240:	83 c4 0c             	add    esp,0xc
c0014243:	c3                   	ret    
c0014244:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0014247:	eb d3                	jmp    c001421c <Semaphore::release()+0x3c>
c0014249:	8d 76 00             	lea    esi,[esi+0x0]
c001424c:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c0014256:	e8 85 f5 ff ff       	call   c00137e0 <schedule()>
c001425b:	eb d3                	jmp    c0014230 <Semaphore::release()+0x50>
c001425d:	8d 76 00             	lea    esi,[esi+0x0]

c0014260 <__static_initialization_and_destruction_0(int, int)>:
c0014260:	83 ec 0c             	sub    esp,0xc
c0014263:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0014268:	0f 85 8e 00 00 00    	jne    c00142fc <__static_initialization_and_destruction_0(int, int)+0x9c>
c001426e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0014276:	0f 85 80 00 00 00    	jne    c00142fc <__static_initialization_and_destruction_0(int, int)+0x9c>
c001427c:	83 ec 0c             	sub    esp,0xc
c001427f:	68 84 61 02 c0       	push   0xc0026184
c0014284:	e8 ef 8f 00 00       	call   c001d278 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014289:	83 c4 10             	add    esp,0x10
c001428c:	83 ec 04             	sub    esp,0x4
c001428f:	68 10 ff 01 c0       	push   0xc001ff10
c0014294:	68 84 61 02 c0       	push   0xc0026184
c0014299:	68 28 d2 01 c0       	push   0xc001d228
c001429e:	e8 d1 61 ff ff       	call   c000a474 <__cxa_atexit>
c00142a3:	83 c4 10             	add    esp,0x10
c00142a6:	83 ec 0c             	sub    esp,0xc
c00142a9:	68 78 61 02 c0       	push   0xc0026178
c00142ae:	e8 c5 8f 00 00       	call   c001d278 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00142b3:	83 c4 10             	add    esp,0x10
c00142b6:	83 ec 04             	sub    esp,0x4
c00142b9:	68 10 ff 01 c0       	push   0xc001ff10
c00142be:	68 78 61 02 c0       	push   0xc0026178
c00142c3:	68 28 d2 01 c0       	push   0xc001d228
c00142c8:	e8 a7 61 ff ff       	call   c000a474 <__cxa_atexit>
c00142cd:	83 c4 10             	add    esp,0x10
c00142d0:	83 ec 0c             	sub    esp,0xc
c00142d3:	68 6c 61 02 c0       	push   0xc002616c
c00142d8:	e8 9b 8f 00 00       	call   c001d278 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00142dd:	83 c4 10             	add    esp,0x10
c00142e0:	83 ec 04             	sub    esp,0x4
c00142e3:	68 10 ff 01 c0       	push   0xc001ff10
c00142e8:	68 6c 61 02 c0       	push   0xc002616c
c00142ed:	68 28 d2 01 c0       	push   0xc001d228
c00142f2:	e8 7d 61 ff ff       	call   c000a474 <__cxa_atexit>
c00142f7:	83 c4 10             	add    esp,0x10
c00142fa:	66 90                	xchg   ax,ax
c00142fc:	90                   	nop
c00142fd:	83 c4 0c             	add    esp,0xc
c0014300:	c3                   	ret    
c0014301:	8d 76 00             	lea    esi,[esi+0x0]

c0014304 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0014304:	83 ec 0c             	sub    esp,0xc
c0014307:	83 ec 08             	sub    esp,0x8
c001430a:	68 ff ff 00 00       	push   0xffff
c001430f:	6a 01                	push   0x1
c0014311:	e8 4a ff ff ff       	call   c0014260 <__static_initialization_and_destruction_0(int, int)>
c0014316:	83 c4 10             	add    esp,0x10
c0014319:	83 c4 0c             	add    esp,0xc
c001431c:	c3                   	ret    

c001431d <Vm::inbv(unsigned short)>:
c001431d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014321:	66 81 fa fe fe       	cmp    dx,0xfefe
c0014326:	75 06                	jne    c001432e <Vm::inbv(unsigned short)+0x11>
c0014328:	a0 cc 61 02 c0       	mov    al,ds:0xc00261cc
c001432d:	c3                   	ret    
c001432e:	ec                   	in     al,dx
c001432f:	c3                   	ret    

c0014330 <Vm::outbv(unsigned short, unsigned char)>:
c0014330:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014334:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014338:	66 81 fa fe fe       	cmp    dx,0xfefe
c001433d:	75 25                	jne    c0014364 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001433f:	8b 0d cc 61 02 c0    	mov    ecx,DWORD PTR ds:0xc00261cc
c0014345:	8d 51 01             	lea    edx,[ecx+0x1]
c0014348:	88 81 e0 61 02 c0    	mov    BYTE PTR [ecx-0x3ffd9e20],al
c001434e:	89 15 cc 61 02 c0    	mov    DWORD PTR ds:0xc00261cc,edx
c0014354:	83 fa 20             	cmp    edx,0x20
c0014357:	75 0c                	jne    c0014365 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0014359:	c7 05 cc 61 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00261cc,0x1f
c0014363:	c3                   	ret    
c0014364:	ee                   	out    dx,al
c0014365:	c3                   	ret    

c0014366 <Vm::realToLinear(unsigned short, unsigned short)>:
c0014366:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001436b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014370:	c1 e0 04             	shl    eax,0x4
c0014373:	01 d0                	add    eax,edx
c0014375:	c3                   	ret    

c0014376 <Vm::getSegment(unsigned int)>:
c0014376:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001437a:	c1 e8 10             	shr    eax,0x10
c001437d:	c3                   	ret    

c001437e <Vm::getOffset(unsigned int)>:
c001437e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014382:	c3                   	ret    

c0014383 <Vm::mainloop2()>:
c0014383:	83 ec 18             	sub    esp,0x18
c0014386:	fa                   	cli    
c0014387:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c001438d:	6a 02                	push   0x2
c001438f:	c6 05 c5 61 02 c0 01 	mov    BYTE PTR ds:0xc00261c5,0x1
c0014396:	e8 19 f6 ff ff       	call   c00139b4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001439b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143a0:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00143a4:	52                   	push   edx
c00143a5:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00143a9:	52                   	push   edx
c00143aa:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00143ae:	52                   	push   edx
c00143af:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00143b3:	50                   	push   eax
c00143b4:	e8 56 be fe ff       	call   c000020f <goToVM86>
c00143b9:	83 c4 2c             	add    esp,0x2c
c00143bc:	c3                   	ret    

c00143bd <Vm::mainVm8086Loop(void*)>:
c00143bd:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00143c2:	48                   	dec    eax
c00143c3:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00143c8:	75 01                	jne    c00143cb <Vm::mainVm8086Loop(void*)+0xe>
c00143ca:	fb                   	sti    
c00143cb:	eb b6                	jmp    c0014383 <Vm::mainloop2()>

c00143cd <Vm::mainloop3(unsigned long)>:
c00143cd:	83 ec 18             	sub    esp,0x18
c00143d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00143d4:	fa                   	cli    
c00143d5:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c00143db:	6a 02                	push   0x2
c00143dd:	c6 05 c4 61 02 c0 01 	mov    BYTE PTR ds:0xc00261c4,0x1
c00143e4:	a3 c0 61 02 c0       	mov    ds:0xc00261c0,eax
c00143e9:	e8 c6 f5 ff ff       	call   c00139b4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00143ee:	83 c4 1c             	add    esp,0x1c
c00143f1:	eb 90                	jmp    c0014383 <Vm::mainloop2()>

c00143f3 <Vm::initialise8086()>:
c00143f3:	83 ec 0c             	sub    esp,0xc
c00143f6:	68 80 00 00 00       	push   0x80
c00143fb:	6a 00                	push   0x0
c00143fd:	68 bd 43 01 c0       	push   0xc00143bd
c0014402:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c0014408:	e8 b3 f1 ff ff       	call   c00135c0 <Process::createThread(void (*)(void*), void*, int)>
c001440d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0014414:	a3 c8 61 02 c0       	mov    ds:0xc00261c8,eax
c0014419:	68 00 01 00 00       	push   0x100
c001441e:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0014423:	6a 00                	push   0x0
c0014425:	6a 00                	push   0x0
c0014427:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001442d:	e8 88 58 ff ff       	call   c0009cba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014432:	83 c4 2c             	add    esp,0x2c
c0014435:	c3                   	ret    

c0014436 <Vm::finish8086()>:
c0014436:	53                   	push   ebx
c0014437:	83 ec 08             	sub    esp,0x8
c001443a:	fa                   	cli    
c001443b:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0014441:	80 3d c4 61 02 c0 00 	cmp    BYTE PTR ds:0xc00261c4,0x0
c0014448:	75 15                	jne    c001445f <Vm::finish8086()+0x29>
c001444a:	e8 91 f3 ff ff       	call   c00137e0 <schedule()>
c001444f:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0014454:	48                   	dec    eax
c0014455:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001445a:	75 de                	jne    c001443a <Vm::finish8086()+0x4>
c001445c:	fb                   	sti    
c001445d:	eb db                	jmp    c001443a <Vm::finish8086()+0x4>
c001445f:	83 ec 0c             	sub    esp,0xc
c0014462:	8b 1d c0 61 02 c0    	mov    ebx,DWORD PTR ds:0xc00261c0
c0014468:	ff 35 c8 61 02 c0    	push   DWORD PTR ds:0xc00261c8
c001446e:	c6 05 c4 61 02 c0 00 	mov    BYTE PTR ds:0xc00261c4,0x0
c0014475:	e8 2a f8 ff ff       	call   c0013ca4 <unblockTask(ThreadControlBlock*)>
c001447a:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001447f:	83 c4 10             	add    esp,0x10
c0014482:	8d 50 ff             	lea    edx,[eax-0x1]
c0014485:	89 15 68 61 02 c0    	mov    DWORD PTR ds:0xc0026168,edx
c001448b:	85 d2                	test   edx,edx
c001448d:	75 01                	jne    c0014490 <Vm::finish8086()+0x5a>
c001448f:	fb                   	sti    
c0014490:	89 d8                	mov    eax,ebx
c0014492:	83 c4 08             	add    esp,0x8
c0014495:	5b                   	pop    ebx
c0014496:	c3                   	ret    

c0014497 <Vm::getOutput8086(unsigned char*)>:
c0014497:	57                   	push   edi
c0014498:	8b 0d cc 61 02 c0    	mov    ecx,DWORD PTR ds:0xc00261cc
c001449e:	56                   	push   esi
c001449f:	be e0 61 02 c0       	mov    esi,0xc00261e0
c00144a4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00144a8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00144aa:	a1 cc 61 02 c0       	mov    eax,ds:0xc00261cc
c00144af:	5e                   	pop    esi
c00144b0:	c7 05 cc 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00261cc,0x0
c00144ba:	5f                   	pop    edi
c00144bb:	c3                   	ret    

c00144bc <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00144bc:	55                   	push   ebp
c00144bd:	57                   	push   edi
c00144be:	56                   	push   esi
c00144bf:	53                   	push   ebx
c00144c0:	83 ec 0c             	sub    esp,0xc
c00144c3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00144c7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00144cb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00144cf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00144d3:	fa                   	cli    
c00144d4:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c00144da:	80 3d c5 61 02 c0 00 	cmp    BYTE PTR ds:0xc00261c5,0x0
c00144e1:	75 15                	jne    c00144f8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00144e3:	e8 f8 f2 ff ff       	call   c00137e0 <schedule()>
c00144e8:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00144ed:	48                   	dec    eax
c00144ee:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00144f3:	75 de                	jne    c00144d3 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00144f5:	fb                   	sti    
c00144f6:	eb db                	jmp    c00144d3 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00144f8:	a1 c8 61 02 c0       	mov    eax,ds:0xc00261c8
c00144fd:	c7 05 cc 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00261cc,0x0
c0014507:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001450b:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001450f:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0014513:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014517:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001451b:	0f b7 ff             	movzx  edi,di
c001451e:	0f b7 f6             	movzx  esi,si
c0014521:	50                   	push   eax
c0014522:	6a 20                	push   0x20
c0014524:	6a 00                	push   0x0
c0014526:	68 e0 61 02 c0       	push   0xc00261e0
c001452b:	e8 a0 bf fe ff       	call   c00004d0 <memset>
c0014530:	5a                   	pop    edx
c0014531:	59                   	pop    ecx
c0014532:	57                   	push   edi
c0014533:	56                   	push   esi
c0014534:	e8 2d fe ff ff       	call   c0014366 <Vm::realToLinear(unsigned short, unsigned short)>
c0014539:	83 c4 10             	add    esp,0x10
c001453c:	89 c7                	mov    edi,eax
c001453e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014542:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014546:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014548:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001454d:	c6 05 c5 61 02 c0 00 	mov    BYTE PTR ds:0xc00261c5,0x0
c0014554:	48                   	dec    eax
c0014555:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001455a:	75 01                	jne    c001455d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c001455c:	fb                   	sti    
c001455d:	83 ec 0c             	sub    esp,0xc
c0014560:	ff 35 c8 61 02 c0    	push   DWORD PTR ds:0xc00261c8
c0014566:	e8 39 f7 ff ff       	call   c0013ca4 <unblockTask(ThreadControlBlock*)>
c001456b:	83 c4 1c             	add    esp,0x1c
c001456e:	b0 01                	mov    al,0x1
c0014570:	5b                   	pop    ebx
c0014571:	5e                   	pop    esi
c0014572:	5f                   	pop    edi
c0014573:	5d                   	pop    ebp
c0014574:	c3                   	ret    

c0014575 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014575:	55                   	push   ebp
c0014576:	57                   	push   edi
c0014577:	56                   	push   esi
c0014578:	53                   	push   ebx
c0014579:	83 ec 2c             	sub    esp,0x2c
c001457c:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0014580:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0014584:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0014588:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001458c:	fa                   	cli    
c001458d:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0014593:	0f b6 35 c5 61 02 c0 	movzx  esi,BYTE PTR ds:0xc00261c5
c001459a:	89 f0                	mov    eax,esi
c001459c:	84 c0                	test   al,al
c001459e:	75 1d                	jne    c00145bd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c00145a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00145a4:	e8 37 f2 ff ff       	call   c00137e0 <schedule()>
c00145a9:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00145ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00145b2:	48                   	dec    eax
c00145b3:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00145b8:	75 d2                	jne    c001458c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00145ba:	fb                   	sti    
c00145bb:	eb cf                	jmp    c001458c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00145bd:	a1 c8 61 02 c0       	mov    eax,ds:0xc00261c8
c00145c2:	c7 05 cc 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00261cc,0x0
c00145cc:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c00145d0:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00145d4:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c00145d8:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c00145dc:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00145e0:	50                   	push   eax
c00145e1:	6a 20                	push   0x20
c00145e3:	6a 00                	push   0x0
c00145e5:	68 e0 61 02 c0       	push   0xc00261e0
c00145ea:	e8 e1 be fe ff       	call   c00004d0 <memset>
c00145ef:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00145f6:	e8 26 32 ff ff       	call   c0007821 <malloc>
c00145fb:	83 c4 0c             	add    esp,0xc
c00145fe:	89 c3                	mov    ebx,eax
c0014600:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c0014606:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001460a:	50                   	push   eax
c001460b:	e8 20 65 ff ff       	call   c000ab30 <File::File(char const*, Process*)>
c0014610:	83 c4 10             	add    esp,0x10
c0014613:	85 db                	test   ebx,ebx
c0014615:	75 0a                	jne    c0014621 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0014617:	83 ec 0c             	sub    esp,0xc
c001461a:	68 2c f4 01 c0       	push   0xc001f42c
c001461f:	eb 3e                	jmp    c001465f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0014621:	50                   	push   eax
c0014622:	8d 44 24 17          	lea    eax,[esp+0x17]
c0014626:	50                   	push   eax
c0014627:	8d 44 24 20          	lea    eax,[esp+0x20]
c001462b:	50                   	push   eax
c001462c:	53                   	push   ebx
c001462d:	e8 6a 68 ff ff       	call   c000ae9c <File::stat(unsigned long long*, bool*)>
c0014632:	83 c4 10             	add    esp,0x10
c0014635:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001463a:	74 0a                	je     c0014646 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001463c:	83 ec 0c             	sub    esp,0xc
c001463f:	68 40 f4 01 c0       	push   0xc001f440
c0014644:	eb 19                	jmp    c001465f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0014646:	51                   	push   ecx
c0014647:	51                   	push   ecx
c0014648:	6a 01                	push   0x1
c001464a:	53                   	push   ebx
c001464b:	e8 a0 65 ff ff       	call   c000abf0 <File::open(FileOpenMode)>
c0014650:	83 c4 10             	add    esp,0x10
c0014653:	85 c0                	test   eax,eax
c0014655:	74 24                	je     c001467b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0014657:	83 ec 0c             	sub    esp,0xc
c001465a:	68 59 f4 01 c0       	push   0xc001f459
c001465f:	e8 5f bc ff ff       	call   c00102c3 <KePanic(char const*)>
c0014664:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0014669:	83 c4 10             	add    esp,0x10
c001466c:	48                   	dec    eax
c001466d:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0014672:	85 c0                	test   eax,eax
c0014674:	75 01                	jne    c0014677 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0014676:	fb                   	sti    
c0014677:	31 f6                	xor    esi,esi
c0014679:	eb 58                	jmp    c00146d3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001467b:	0f b7 ed             	movzx  ebp,bp
c001467e:	50                   	push   eax
c001467f:	0f b7 ff             	movzx  edi,di
c0014682:	50                   	push   eax
c0014683:	55                   	push   ebp
c0014684:	57                   	push   edi
c0014685:	e8 dc fc ff ff       	call   c0014366 <Vm::realToLinear(unsigned short, unsigned short)>
c001468a:	5a                   	pop    edx
c001468b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001468d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014691:	51                   	push   ecx
c0014692:	50                   	push   eax
c0014693:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014697:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001469b:	53                   	push   ebx
c001469c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001469f:	83 c4 14             	add    esp,0x14
c00146a2:	53                   	push   ebx
c00146a3:	e8 a6 65 ff ff       	call   c000ac4e <File::close()>
c00146a8:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00146ad:	83 c4 10             	add    esp,0x10
c00146b0:	48                   	dec    eax
c00146b1:	c6 05 c5 61 02 c0 00 	mov    BYTE PTR ds:0xc00261c5,0x0
c00146b8:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00146bd:	85 c0                	test   eax,eax
c00146bf:	75 01                	jne    c00146c2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c00146c1:	fb                   	sti    
c00146c2:	83 ec 0c             	sub    esp,0xc
c00146c5:	ff 35 c8 61 02 c0    	push   DWORD PTR ds:0xc00261c8
c00146cb:	e8 d4 f5 ff ff       	call   c0013ca4 <unblockTask(ThreadControlBlock*)>
c00146d0:	83 c4 10             	add    esp,0x10
c00146d3:	83 c4 2c             	add    esp,0x2c
c00146d6:	89 f0                	mov    eax,esi
c00146d8:	5b                   	pop    ebx
c00146d9:	5e                   	pop    esi
c00146da:	5f                   	pop    edi
c00146db:	5d                   	pop    ebp
c00146dc:	c3                   	ret    

c00146dd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00146dd:	57                   	push   edi
c00146de:	56                   	push   esi
c00146df:	53                   	push   ebx
c00146e0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00146e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146e8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00146ec:	83 e8 06             	sub    eax,0x6
c00146ef:	0f b7 c0             	movzx  eax,ax
c00146f2:	50                   	push   eax
c00146f3:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00146f8:	50                   	push   eax
c00146f9:	e8 68 fc ff ff       	call   c0014366 <Vm::realToLinear(unsigned short, unsigned short)>
c00146fe:	5a                   	pop    edx
c00146ff:	5e                   	pop    esi
c0014700:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0014703:	8d 56 fa             	lea    edx,[esi-0x6]
c0014706:	81 e2 ff ff 00 00    	and    edx,0xffff
c001470c:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001470f:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0014712:	83 c2 02             	add    edx,0x2
c0014715:	66 89 10             	mov    WORD PTR [eax],dx
c0014718:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001471b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001471f:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0014722:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0014726:	89 d6                	mov    esi,edx
c0014728:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001472e:	66 81 e6 ff fd       	and    si,0xfdff
c0014733:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0014737:	74 07                	je     c0014740 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0014739:	89 d6                	mov    esi,edx
c001473b:	66 81 ce 00 02       	or     si,0x200
c0014740:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0014744:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014749:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001474d:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0014755:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0014758:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0014760:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0014763:	5b                   	pop    ebx
c0014764:	5e                   	pop    esi
c0014765:	5f                   	pop    edi
c0014766:	c3                   	ret    

c0014767 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0014767:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001476c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014771:	c1 e0 04             	shl    eax,0x4
c0014774:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0014777:	c3                   	ret    

c0014778 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0014778:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001477d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014782:	c1 e0 04             	shl    eax,0x4
c0014785:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0014789:	c3                   	ret    

c001478a <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001478a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001478f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014794:	c1 e0 04             	shl    eax,0x4
c0014797:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001479a:	c3                   	ret    

c001479b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001479b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00147a0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00147a5:	c1 e0 04             	shl    eax,0x4
c00147a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00147ac:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00147af:	c3                   	ret    

c00147b0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00147b0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00147b5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00147ba:	c1 e0 04             	shl    eax,0x4
c00147bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00147c1:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00147c5:	c3                   	ret    

c00147c6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00147c6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00147cb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00147d0:	c1 e0 04             	shl    eax,0x4
c00147d3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00147d7:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00147da:	c3                   	ret    

c00147db <Vm::faultHandler(regs*)>:
c00147db:	55                   	push   ebp
c00147dc:	57                   	push   edi
c00147dd:	56                   	push   esi
c00147de:	53                   	push   ebx
c00147df:	83 ec 1c             	sub    esp,0x1c
c00147e2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00147e6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00147e9:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00147ed:	0f b7 f8             	movzx  edi,ax
c00147f0:	52                   	push   edx
c00147f1:	0f b7 c0             	movzx  eax,ax
c00147f4:	50                   	push   eax
c00147f5:	e8 6c fb ff ff       	call   c0014366 <Vm::realToLinear(unsigned short, unsigned short)>
c00147fa:	5a                   	pop    edx
c00147fb:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00147fe:	59                   	pop    ecx
c00147ff:	89 c1                	mov    ecx,eax
c0014801:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014804:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014808:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001480d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014811:	0f b7 c5             	movzx  eax,bp
c0014814:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014818:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001481c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014820:	e8 41 fb ff ff       	call   c0014366 <Vm::realToLinear(unsigned short, unsigned short)>
c0014825:	5e                   	pop    esi
c0014826:	be 06 00 00 00       	mov    esi,0x6
c001482b:	5a                   	pop    edx
c001482c:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0014831:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0014836:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0014839:	80 fa 9d             	cmp    dl,0x9d
c001483c:	0f 84 2c 02 00 00    	je     c0014a6e <Vm::faultHandler(regs*)+0x293>
c0014842:	0f 87 91 00 00 00    	ja     c00148d9 <Vm::faultHandler(regs*)+0xfe>
c0014848:	80 fa 66             	cmp    dl,0x66
c001484b:	0f 84 98 01 00 00    	je     c00149e9 <Vm::faultHandler(regs*)+0x20e>
c0014851:	77 47                	ja     c001489a <Vm::faultHandler(regs*)+0xbf>
c0014853:	80 fa 36             	cmp    dl,0x36
c0014856:	0f 84 80 01 00 00    	je     c00149dc <Vm::faultHandler(regs*)+0x201>
c001485c:	77 1a                	ja     c0014878 <Vm::faultHandler(regs*)+0x9d>
c001485e:	80 fa 26             	cmp    dl,0x26
c0014861:	0f 84 4e 01 00 00    	je     c00149b5 <Vm::faultHandler(regs*)+0x1da>
c0014867:	80 fa 2e             	cmp    dl,0x2e
c001486a:	0f 85 e2 05 00 00    	jne    c0014e52 <Vm::faultHandler(regs*)+0x677>
c0014870:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014873:	31 f6                	xor    esi,esi
c0014875:	41                   	inc    ecx
c0014876:	eb be                	jmp    c0014836 <Vm::faultHandler(regs*)+0x5b>
c0014878:	80 fa 64             	cmp    dl,0x64
c001487b:	0f 84 41 01 00 00    	je     c00149c2 <Vm::faultHandler(regs*)+0x1e7>
c0014881:	0f 87 48 01 00 00    	ja     c00149cf <Vm::faultHandler(regs*)+0x1f4>
c0014887:	80 fa 3e             	cmp    dl,0x3e
c001488a:	0f 85 c2 05 00 00    	jne    c0014e52 <Vm::faultHandler(regs*)+0x677>
c0014890:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014893:	be 01 00 00 00       	mov    esi,0x1
c0014898:	eb db                	jmp    c0014875 <Vm::faultHandler(regs*)+0x9a>
c001489a:	80 fa 6d             	cmp    dl,0x6d
c001489d:	0f 84 ec 02 00 00    	je     c0014b8f <Vm::faultHandler(regs*)+0x3b4>
c00148a3:	77 17                	ja     c00148bc <Vm::faultHandler(regs*)+0xe1>
c00148a5:	80 fa 67             	cmp    dl,0x67
c00148a8:	0f 84 48 01 00 00    	je     c00149f6 <Vm::faultHandler(regs*)+0x21b>
c00148ae:	80 fa 6c             	cmp    dl,0x6c
c00148b1:	0f 84 69 02 00 00    	je     c0014b20 <Vm::faultHandler(regs*)+0x345>
c00148b7:	e9 96 05 00 00       	jmp    c0014e52 <Vm::faultHandler(regs*)+0x677>
c00148bc:	80 fa 6f             	cmp    dl,0x6f
c00148bf:	0f 84 f4 03 00 00    	je     c0014cb9 <Vm::faultHandler(regs*)+0x4de>
c00148c5:	0f 82 59 03 00 00    	jb     c0014c24 <Vm::faultHandler(regs*)+0x449>
c00148cb:	80 fa 9c             	cmp    dl,0x9c
c00148ce:	0f 84 2f 01 00 00    	je     c0014a03 <Vm::faultHandler(regs*)+0x228>
c00148d4:	e9 79 05 00 00       	jmp    c0014e52 <Vm::faultHandler(regs*)+0x677>
c00148d9:	80 fa ec             	cmp    dl,0xec
c00148dc:	0f 84 14 05 00 00    	je     c0014df6 <Vm::faultHandler(regs*)+0x61b>
c00148e2:	77 7b                	ja     c001495f <Vm::faultHandler(regs*)+0x184>
c00148e4:	80 fa e4             	cmp    dl,0xe4
c00148e7:	0f 84 93 04 00 00    	je     c0014d80 <Vm::faultHandler(regs*)+0x5a5>
c00148ed:	77 53                	ja     c0014942 <Vm::faultHandler(regs*)+0x167>
c00148ef:	80 fa cd             	cmp    dl,0xcd
c00148f2:	0f 84 d9 01 00 00    	je     c0014ad1 <Vm::faultHandler(regs*)+0x2f6>
c00148f8:	80 fa cf             	cmp    dl,0xcf
c00148fb:	0f 85 51 05 00 00    	jne    c0014e52 <Vm::faultHandler(regs*)+0x677>
c0014901:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014904:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0014907:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001490b:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001490e:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0014912:	81 ca 00 02 02 00    	or     edx,0x20200
c0014918:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001491b:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001491f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014925:	66 c1 e8 09          	shr    ax,0x9
c0014929:	83 e0 01             	and    eax,0x1
c001492c:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001492f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014932:	83 c0 06             	add    eax,0x6
c0014935:	25 ff ff 00 00       	and    eax,0xffff
c001493a:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001493d:	e9 0c 05 00 00       	jmp    c0014e4e <Vm::faultHandler(regs*)+0x673>
c0014942:	80 fa e6             	cmp    dl,0xe6
c0014945:	0f 84 7f 04 00 00    	je     c0014dca <Vm::faultHandler(regs*)+0x5ef>
c001494b:	0f 82 4b 04 00 00    	jb     c0014d9c <Vm::faultHandler(regs*)+0x5c1>
c0014951:	80 fa e7             	cmp    dl,0xe7
c0014954:	0f 84 87 04 00 00    	je     c0014de1 <Vm::faultHandler(regs*)+0x606>
c001495a:	e9 f3 04 00 00       	jmp    c0014e52 <Vm::faultHandler(regs*)+0x677>
c001495f:	80 fa ef             	cmp    dl,0xef
c0014962:	0f 84 d1 04 00 00    	je     c0014e39 <Vm::faultHandler(regs*)+0x65e>
c0014968:	77 28                	ja     c0014992 <Vm::faultHandler(regs*)+0x1b7>
c001496a:	80 fa ed             	cmp    dl,0xed
c001496d:	0f 84 9f 04 00 00    	je     c0014e12 <Vm::faultHandler(regs*)+0x637>
c0014973:	80 fa ee             	cmp    dl,0xee
c0014976:	0f 85 d6 04 00 00    	jne    c0014e52 <Vm::faultHandler(regs*)+0x677>
c001497c:	50                   	push   eax
c001497d:	50                   	push   eax
c001497e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014982:	50                   	push   eax
c0014983:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014987:	50                   	push   eax
c0014988:	e8 a3 f9 ff ff       	call   c0014330 <Vm::outbv(unsigned short, unsigned char)>
c001498d:	e9 9f 04 00 00       	jmp    c0014e31 <Vm::faultHandler(regs*)+0x656>
c0014992:	80 fa fa             	cmp    dl,0xfa
c0014995:	0f 84 69 01 00 00    	je     c0014b04 <Vm::faultHandler(regs*)+0x329>
c001499b:	80 fa fb             	cmp    dl,0xfb
c001499e:	0f 84 6e 01 00 00    	je     c0014b12 <Vm::faultHandler(regs*)+0x337>
c00149a4:	80 fa f3             	cmp    dl,0xf3
c00149a7:	0f 85 a5 04 00 00    	jne    c0014e52 <Vm::faultHandler(regs*)+0x677>
c00149ad:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149b0:	e9 c0 fe ff ff       	jmp    c0014875 <Vm::faultHandler(regs*)+0x9a>
c00149b5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149b8:	be 02 00 00 00       	mov    esi,0x2
c00149bd:	e9 b3 fe ff ff       	jmp    c0014875 <Vm::faultHandler(regs*)+0x9a>
c00149c2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149c5:	be 03 00 00 00       	mov    esi,0x3
c00149ca:	e9 a6 fe ff ff       	jmp    c0014875 <Vm::faultHandler(regs*)+0x9a>
c00149cf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149d2:	be 04 00 00 00       	mov    esi,0x4
c00149d7:	e9 99 fe ff ff       	jmp    c0014875 <Vm::faultHandler(regs*)+0x9a>
c00149dc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149df:	be 05 00 00 00       	mov    esi,0x5
c00149e4:	e9 8c fe ff ff       	jmp    c0014875 <Vm::faultHandler(regs*)+0x9a>
c00149e9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149ec:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00149f1:	e9 7f fe ff ff       	jmp    c0014875 <Vm::faultHandler(regs*)+0x9a>
c00149f6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149f9:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00149fe:	e9 72 fe ff ff       	jmp    c0014875 <Vm::faultHandler(regs*)+0x9a>
c0014a03:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0014a06:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014a0a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014a0f:	74 30                	je     c0014a41 <Vm::faultHandler(regs*)+0x266>
c0014a11:	83 e9 04             	sub    ecx,0x4
c0014a14:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014a1a:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014a20:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014a23:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014a26:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014a2c:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014a30:	0f 84 15 04 00 00    	je     c0014e4b <Vm::faultHandler(regs*)+0x670>
c0014a36:	80 ce 02             	or     dh,0x2
c0014a39:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014a3c:	e9 0a 04 00 00       	jmp    c0014e4b <Vm::faultHandler(regs*)+0x670>
c0014a41:	83 e9 02             	sub    ecx,0x2
c0014a44:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014a4a:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014a4d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014a51:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014a57:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014a5b:	74 05                	je     c0014a62 <Vm::faultHandler(regs*)+0x287>
c0014a5d:	80 ce 02             	or     dh,0x2
c0014a60:	eb 03                	jmp    c0014a65 <Vm::faultHandler(regs*)+0x28a>
c0014a62:	80 e6 fd             	and    dh,0xfd
c0014a65:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014a69:	e9 dd 03 00 00       	jmp    c0014e4b <Vm::faultHandler(regs*)+0x670>
c0014a6e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014a73:	74 2a                	je     c0014a9f <Vm::faultHandler(regs*)+0x2c4>
c0014a75:	8b 10                	mov    edx,DWORD PTR [eax]
c0014a77:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014a7d:	81 ca 00 02 02 00    	or     edx,0x20200
c0014a83:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014a86:	8b 00                	mov    eax,DWORD PTR [eax]
c0014a88:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014a8e:	c1 e8 09             	shr    eax,0x9
c0014a91:	83 e0 01             	and    eax,0x1
c0014a94:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014a97:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014a9a:	83 c0 04             	add    eax,0x4
c0014a9d:	eb 25                	jmp    c0014ac4 <Vm::faultHandler(regs*)+0x2e9>
c0014a9f:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014aa2:	81 ca 00 02 02 00    	or     edx,0x20200
c0014aa8:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014aab:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014aae:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014ab4:	66 c1 e8 09          	shr    ax,0x9
c0014ab8:	83 e0 01             	and    eax,0x1
c0014abb:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014abe:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014ac1:	83 c0 02             	add    eax,0x2
c0014ac4:	25 ff ff 00 00       	and    eax,0xffff
c0014ac9:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014acc:	e9 7a 03 00 00       	jmp    c0014e4b <Vm::faultHandler(regs*)+0x670>
c0014ad1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014ad5:	3c ee                	cmp    al,0xee
c0014ad7:	75 10                	jne    c0014ae9 <Vm::faultHandler(regs*)+0x30e>
c0014ad9:	83 ec 0c             	sub    esp,0xc
c0014adc:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014adf:	e8 e9 f8 ff ff       	call   c00143cd <Vm::mainloop3(unsigned long)>
c0014ae4:	e9 4b 03 00 00       	jmp    c0014e34 <Vm::faultHandler(regs*)+0x659>
c0014ae9:	83 ec 0c             	sub    esp,0xc
c0014aec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014af0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014af4:	51                   	push   ecx
c0014af5:	50                   	push   eax
c0014af6:	53                   	push   ebx
c0014af7:	e8 e1 fb ff ff       	call   c00146dd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0014afc:	83 c4 20             	add    esp,0x20
c0014aff:	e9 4a 03 00 00       	jmp    c0014e4e <Vm::faultHandler(regs*)+0x673>
c0014b04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b09:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014b0d:	e9 39 03 00 00       	jmp    c0014e4b <Vm::faultHandler(regs*)+0x670>
c0014b12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b17:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014b1b:	e9 2b 03 00 00       	jmp    c0014e4b <Vm::faultHandler(regs*)+0x670>
c0014b20:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014b23:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014b28:	74 2b                	je     c0014b55 <Vm::faultHandler(regs*)+0x37a>
c0014b2a:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014b31:	76 22                	jbe    c0014b55 <Vm::faultHandler(regs*)+0x37a>
c0014b33:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014b37:	50                   	push   eax
c0014b38:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014b3c:	50                   	push   eax
c0014b3d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014b41:	50                   	push   eax
c0014b42:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014b46:	50                   	push   eax
c0014b47:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014b4b:	50                   	push   eax
c0014b4c:	6a 6c                	push   0x6c
c0014b4e:	6a 6c                	push   0x6c
c0014b50:	e9 b9 01 00 00       	jmp    c0014d0e <Vm::faultHandler(regs*)+0x533>
c0014b55:	83 ec 0c             	sub    esp,0xc
c0014b58:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014b5c:	0f b7 f6             	movzx  esi,si
c0014b5f:	50                   	push   eax
c0014b60:	e8 b8 f7 ff ff       	call   c001431d <Vm::inbv(unsigned short)>
c0014b65:	83 c4 0c             	add    esp,0xc
c0014b68:	0f b6 c0             	movzx  eax,al
c0014b6b:	50                   	push   eax
c0014b6c:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014b70:	50                   	push   eax
c0014b71:	56                   	push   esi
c0014b72:	e8 24 fc ff ff       	call   c001479b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014b77:	83 c4 10             	add    esp,0x10
c0014b7a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014b7d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014b81:	74 03                	je     c0014b86 <Vm::faultHandler(regs*)+0x3ab>
c0014b83:	48                   	dec    eax
c0014b84:	eb 01                	jmp    c0014b87 <Vm::faultHandler(regs*)+0x3ac>
c0014b86:	40                   	inc    eax
c0014b87:	0f b7 c0             	movzx  eax,ax
c0014b8a:	e9 8d 00 00 00       	jmp    c0014c1c <Vm::faultHandler(regs*)+0x441>
c0014b8f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014b92:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014b95:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014b9a:	74 29                	je     c0014bc5 <Vm::faultHandler(regs*)+0x3ea>
c0014b9c:	3d ff ff 00 00       	cmp    eax,0xffff
c0014ba1:	76 22                	jbe    c0014bc5 <Vm::faultHandler(regs*)+0x3ea>
c0014ba3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014ba7:	50                   	push   eax
c0014ba8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014bac:	50                   	push   eax
c0014bad:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014bb1:	50                   	push   eax
c0014bb2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014bb6:	50                   	push   eax
c0014bb7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014bbb:	50                   	push   eax
c0014bbc:	6a 6d                	push   0x6d
c0014bbe:	6a 6d                	push   0x6d
c0014bc0:	e9 49 01 00 00       	jmp    c0014d0e <Vm::faultHandler(regs*)+0x533>
c0014bc5:	0f b7 c8             	movzx  ecx,ax
c0014bc8:	0f b7 f6             	movzx  esi,si
c0014bcb:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014bce:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014bd3:	74 20                	je     c0014bf5 <Vm::faultHandler(regs*)+0x41a>
c0014bd5:	ed                   	in     eax,dx
c0014bd6:	55                   	push   ebp
c0014bd7:	50                   	push   eax
c0014bd8:	51                   	push   ecx
c0014bd9:	56                   	push   esi
c0014bda:	e8 e7 fb ff ff       	call   c00147c6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0014bdf:	83 c4 10             	add    esp,0x10
c0014be2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014be5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014be9:	74 05                	je     c0014bf0 <Vm::faultHandler(regs*)+0x415>
c0014beb:	83 e8 04             	sub    eax,0x4
c0014bee:	eb 27                	jmp    c0014c17 <Vm::faultHandler(regs*)+0x43c>
c0014bf0:	83 c0 04             	add    eax,0x4
c0014bf3:	eb 22                	jmp    c0014c17 <Vm::faultHandler(regs*)+0x43c>
c0014bf5:	66 ed                	in     ax,dx
c0014bf7:	0f b7 c0             	movzx  eax,ax
c0014bfa:	57                   	push   edi
c0014bfb:	50                   	push   eax
c0014bfc:	51                   	push   ecx
c0014bfd:	56                   	push   esi
c0014bfe:	e8 ad fb ff ff       	call   c00147b0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014c03:	83 c4 10             	add    esp,0x10
c0014c06:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014c09:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014c0d:	74 05                	je     c0014c14 <Vm::faultHandler(regs*)+0x439>
c0014c0f:	83 e8 02             	sub    eax,0x2
c0014c12:	eb 03                	jmp    c0014c17 <Vm::faultHandler(regs*)+0x43c>
c0014c14:	83 c0 02             	add    eax,0x2
c0014c17:	25 ff ff 00 00       	and    eax,0xffff
c0014c1c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014c1f:	e9 27 02 00 00       	jmp    c0014e4b <Vm::faultHandler(regs*)+0x670>
c0014c24:	8d 46 ff             	lea    eax,[esi-0x1]
c0014c27:	3c 05                	cmp    al,0x5
c0014c29:	77 24                	ja     c0014c4f <Vm::faultHandler(regs*)+0x474>
c0014c2b:	0f b6 c0             	movzx  eax,al
c0014c2e:	ff 24 85 cc f4 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0b34]
c0014c35:	0f b7 fd             	movzx  edi,bp
c0014c38:	eb 15                	jmp    c0014c4f <Vm::faultHandler(regs*)+0x474>
c0014c3a:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0014c3e:	eb 0f                	jmp    c0014c4f <Vm::faultHandler(regs*)+0x474>
c0014c40:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014c44:	eb 09                	jmp    c0014c4f <Vm::faultHandler(regs*)+0x474>
c0014c46:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014c4a:	eb 03                	jmp    c0014c4f <Vm::faultHandler(regs*)+0x474>
c0014c4c:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014c4f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014c52:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014c57:	74 29                	je     c0014c82 <Vm::faultHandler(regs*)+0x4a7>
c0014c59:	3d ff ff 00 00       	cmp    eax,0xffff
c0014c5e:	76 22                	jbe    c0014c82 <Vm::faultHandler(regs*)+0x4a7>
c0014c60:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014c64:	50                   	push   eax
c0014c65:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014c69:	50                   	push   eax
c0014c6a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014c6e:	50                   	push   eax
c0014c6f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014c73:	50                   	push   eax
c0014c74:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014c78:	50                   	push   eax
c0014c79:	6a 6e                	push   0x6e
c0014c7b:	6a 6e                	push   0x6e
c0014c7d:	e9 8c 00 00 00       	jmp    c0014d0e <Vm::faultHandler(regs*)+0x533>
c0014c82:	0f b7 c0             	movzx  eax,ax
c0014c85:	52                   	push   edx
c0014c86:	52                   	push   edx
c0014c87:	50                   	push   eax
c0014c88:	57                   	push   edi
c0014c89:	e8 d9 fa ff ff       	call   c0014767 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014c8e:	59                   	pop    ecx
c0014c8f:	0f b6 c0             	movzx  eax,al
c0014c92:	5e                   	pop    esi
c0014c93:	50                   	push   eax
c0014c94:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014c98:	50                   	push   eax
c0014c99:	e8 92 f6 ff ff       	call   c0014330 <Vm::outbv(unsigned short, unsigned char)>
c0014c9e:	83 c4 10             	add    esp,0x10
c0014ca1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014ca4:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014ca8:	74 03                	je     c0014cad <Vm::faultHandler(regs*)+0x4d2>
c0014caa:	48                   	dec    eax
c0014cab:	eb 01                	jmp    c0014cae <Vm::faultHandler(regs*)+0x4d3>
c0014cad:	40                   	inc    eax
c0014cae:	0f b7 c0             	movzx  eax,ax
c0014cb1:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014cb4:	e9 92 01 00 00       	jmp    c0014e4b <Vm::faultHandler(regs*)+0x670>
c0014cb9:	8d 46 ff             	lea    eax,[esi-0x1]
c0014cbc:	3c 05                	cmp    al,0x5
c0014cbe:	77 1f                	ja     c0014cdf <Vm::faultHandler(regs*)+0x504>
c0014cc0:	0f b6 c0             	movzx  eax,al
c0014cc3:	ff 24 85 e4 f4 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0b1c]
c0014cca:	89 ef                	mov    edi,ebp
c0014ccc:	eb 11                	jmp    c0014cdf <Vm::faultHandler(regs*)+0x504>
c0014cce:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014cd1:	eb 0c                	jmp    c0014cdf <Vm::faultHandler(regs*)+0x504>
c0014cd3:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0014cd6:	eb 07                	jmp    c0014cdf <Vm::faultHandler(regs*)+0x504>
c0014cd8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0014cdb:	eb 02                	jmp    c0014cdf <Vm::faultHandler(regs*)+0x504>
c0014cdd:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014cdf:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014ce2:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014ce7:	74 37                	je     c0014d20 <Vm::faultHandler(regs*)+0x545>
c0014ce9:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014cef:	76 2f                	jbe    c0014d20 <Vm::faultHandler(regs*)+0x545>
c0014cf1:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014cf5:	50                   	push   eax
c0014cf6:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014cfa:	50                   	push   eax
c0014cfb:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014cff:	50                   	push   eax
c0014d00:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014d04:	50                   	push   eax
c0014d05:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d09:	50                   	push   eax
c0014d0a:	6a 6f                	push   0x6f
c0014d0c:	6a 6f                	push   0x6f
c0014d0e:	68 72 f4 01 c0       	push   0xc001f472
c0014d13:	e8 a2 58 ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0014d18:	83 c4 20             	add    esp,0x20
c0014d1b:	e9 86 01 00 00       	jmp    c0014ea6 <Vm::faultHandler(regs*)+0x6cb>
c0014d20:	0f b7 d7             	movzx  edx,di
c0014d23:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014d26:	0f b7 c6             	movzx  eax,si
c0014d29:	81 e1 00 04 00 00    	and    ecx,0x400
c0014d2f:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0014d32:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014d37:	74 1d                	je     c0014d56 <Vm::faultHandler(regs*)+0x57b>
c0014d39:	55                   	push   ebp
c0014d3a:	55                   	push   ebp
c0014d3b:	50                   	push   eax
c0014d3c:	52                   	push   edx
c0014d3d:	e8 48 fa ff ff       	call   c001478a <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0014d42:	83 c4 10             	add    esp,0x10
c0014d45:	89 fa                	mov    edx,edi
c0014d47:	ef                   	out    dx,eax
c0014d48:	85 c9                	test   ecx,ecx
c0014d4a:	74 05                	je     c0014d51 <Vm::faultHandler(regs*)+0x576>
c0014d4c:	83 ee 04             	sub    esi,0x4
c0014d4f:	eb 21                	jmp    c0014d72 <Vm::faultHandler(regs*)+0x597>
c0014d51:	83 c6 04             	add    esi,0x4
c0014d54:	eb 1c                	jmp    c0014d72 <Vm::faultHandler(regs*)+0x597>
c0014d56:	55                   	push   ebp
c0014d57:	55                   	push   ebp
c0014d58:	50                   	push   eax
c0014d59:	52                   	push   edx
c0014d5a:	e8 19 fa ff ff       	call   c0014778 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0014d5f:	83 c4 10             	add    esp,0x10
c0014d62:	89 fa                	mov    edx,edi
c0014d64:	66 ef                	out    dx,ax
c0014d66:	85 c9                	test   ecx,ecx
c0014d68:	74 05                	je     c0014d6f <Vm::faultHandler(regs*)+0x594>
c0014d6a:	83 ee 02             	sub    esi,0x2
c0014d6d:	eb 03                	jmp    c0014d72 <Vm::faultHandler(regs*)+0x597>
c0014d6f:	83 c6 02             	add    esi,0x2
c0014d72:	81 e6 ff ff 00 00    	and    esi,0xffff
c0014d78:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0014d7b:	e9 cb 00 00 00       	jmp    c0014e4b <Vm::faultHandler(regs*)+0x670>
c0014d80:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014d87:	83 ec 0c             	sub    esp,0xc
c0014d8a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d8e:	50                   	push   eax
c0014d8f:	e8 89 f5 ff ff       	call   c001431d <Vm::inbv(unsigned short)>
c0014d94:	0f b6 c0             	movzx  eax,al
c0014d97:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014d9a:	eb 3f                	jmp    c0014ddb <Vm::faultHandler(regs*)+0x600>
c0014d9c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014da1:	74 07                	je     c0014daa <Vm::faultHandler(regs*)+0x5cf>
c0014da3:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014da7:	ed                   	in     eax,dx
c0014da8:	eb 14                	jmp    c0014dbe <Vm::faultHandler(regs*)+0x5e3>
c0014daa:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0014dad:	66 31 f6             	xor    si,si
c0014db0:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0014db3:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014db7:	66 ed                	in     ax,dx
c0014db9:	0f b7 c0             	movzx  eax,ax
c0014dbc:	09 f0                	or     eax,esi
c0014dbe:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014dc1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014dc5:	e9 84 00 00 00       	jmp    c0014e4e <Vm::faultHandler(regs*)+0x673>
c0014dca:	52                   	push   edx
c0014dcb:	52                   	push   edx
c0014dcc:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014dd0:	50                   	push   eax
c0014dd1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014dd5:	50                   	push   eax
c0014dd6:	e8 55 f5 ff ff       	call   c0014330 <Vm::outbv(unsigned short, unsigned char)>
c0014ddb:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014ddf:	eb 53                	jmp    c0014e34 <Vm::faultHandler(regs*)+0x659>
c0014de1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014de4:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014de8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014ded:	74 03                	je     c0014df2 <Vm::faultHandler(regs*)+0x617>
c0014def:	ef                   	out    dx,eax
c0014df0:	eb cf                	jmp    c0014dc1 <Vm::faultHandler(regs*)+0x5e6>
c0014df2:	66 ef                	out    dx,ax
c0014df4:	eb cb                	jmp    c0014dc1 <Vm::faultHandler(regs*)+0x5e6>
c0014df6:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014dfd:	83 ec 0c             	sub    esp,0xc
c0014e00:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014e04:	50                   	push   eax
c0014e05:	e8 13 f5 ff ff       	call   c001431d <Vm::inbv(unsigned short)>
c0014e0a:	0f b6 c0             	movzx  eax,al
c0014e0d:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014e10:	eb 1f                	jmp    c0014e31 <Vm::faultHandler(regs*)+0x656>
c0014e12:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014e15:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e1a:	74 03                	je     c0014e1f <Vm::faultHandler(regs*)+0x644>
c0014e1c:	ed                   	in     eax,dx
c0014e1d:	eb 0d                	jmp    c0014e2c <Vm::faultHandler(regs*)+0x651>
c0014e1f:	66 ed                	in     ax,dx
c0014e21:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0014e24:	0f b7 c0             	movzx  eax,ax
c0014e27:	66 31 d2             	xor    dx,dx
c0014e2a:	09 d0                	or     eax,edx
c0014e2c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014e2f:	eb 1a                	jmp    c0014e4b <Vm::faultHandler(regs*)+0x670>
c0014e31:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014e34:	83 c4 10             	add    esp,0x10
c0014e37:	eb 15                	jmp    c0014e4e <Vm::faultHandler(regs*)+0x673>
c0014e39:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014e3c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014e3f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e44:	74 03                	je     c0014e49 <Vm::faultHandler(regs*)+0x66e>
c0014e46:	ef                   	out    dx,eax
c0014e47:	eb 02                	jmp    c0014e4b <Vm::faultHandler(regs*)+0x670>
c0014e49:	66 ef                	out    dx,ax
c0014e4b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014e4e:	b0 01                	mov    al,0x1
c0014e50:	eb 56                	jmp    c0014ea8 <Vm::faultHandler(regs*)+0x6cd>
c0014e52:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014e56:	50                   	push   eax
c0014e57:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014e5b:	50                   	push   eax
c0014e5c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014e60:	50                   	push   eax
c0014e61:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014e65:	50                   	push   eax
c0014e66:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e6a:	50                   	push   eax
c0014e6b:	52                   	push   edx
c0014e6c:	52                   	push   edx
c0014e6d:	68 9f f4 01 c0       	push   0xc001f49f
c0014e72:	e8 43 57 ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0014e77:	83 c4 20             	add    esp,0x20
c0014e7a:	83 ec 0c             	sub    esp,0xc
c0014e7d:	6a 60                	push   0x60
c0014e7f:	e8 99 f4 ff ff       	call   c001431d <Vm::inbv(unsigned short)>
c0014e84:	83 c4 10             	add    esp,0x10
c0014e87:	3c 1c                	cmp    al,0x1c
c0014e89:	74 04                	je     c0014e8f <Vm::faultHandler(regs*)+0x6b4>
c0014e8b:	3c 5a                	cmp    al,0x5a
c0014e8d:	75 eb                	jne    c0014e7a <Vm::faultHandler(regs*)+0x69f>
c0014e8f:	3c 5a                	cmp    al,0x5a
c0014e91:	74 04                	je     c0014e97 <Vm::faultHandler(regs*)+0x6bc>
c0014e93:	3c 1c                	cmp    al,0x1c
c0014e95:	75 0f                	jne    c0014ea6 <Vm::faultHandler(regs*)+0x6cb>
c0014e97:	83 ec 0c             	sub    esp,0xc
c0014e9a:	6a 60                	push   0x60
c0014e9c:	e8 7c f4 ff ff       	call   c001431d <Vm::inbv(unsigned short)>
c0014ea1:	83 c4 10             	add    esp,0x10
c0014ea4:	eb e9                	jmp    c0014e8f <Vm::faultHandler(regs*)+0x6b4>
c0014ea6:	31 c0                	xor    eax,eax
c0014ea8:	83 c4 1c             	add    esp,0x1c
c0014eab:	5b                   	pop    ebx
c0014eac:	5e                   	pop    esi
c0014ead:	5f                   	pop    edi
c0014eae:	5d                   	pop    ebp
c0014eaf:	c3                   	ret    

c0014eb0 <noCopro(unsigned long)>:
c0014eb0:	c3                   	ret    

c0014eb1 <nmiHandler(regs*, void*)>:
c0014eb1:	83 ec 0c             	sub    esp,0xc
c0014eb4:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0014eb9:	83 ec 0c             	sub    esp,0xc
c0014ebc:	50                   	push   eax
c0014ebd:	e8 7e 21 ff ff       	call   c0007040 <Computer::handleNMI()>
c0014ec2:	83 c4 10             	add    esp,0x10
c0014ec5:	90                   	nop
c0014ec6:	83 c4 0c             	add    esp,0xc
c0014ec9:	c3                   	ret    

c0014eca <doubleFault(regs*, void*)>:
c0014eca:	55                   	push   ebp
c0014ecb:	89 e5                	mov    ebp,esp
c0014ecd:	83 ec 08             	sub    esp,0x8
c0014ed0:	83 ec 0c             	sub    esp,0xc
c0014ed3:	68 fc f4 01 c0       	push   0xc001f4fc
c0014ed8:	e8 e6 b3 ff ff       	call   c00102c3 <KePanic(char const*)>
c0014edd:	83 c4 10             	add    esp,0x10
c0014ee0:	90                   	nop
c0014ee1:	c9                   	leave  
c0014ee2:	c3                   	ret    

c0014ee3 <displayDebugInfo(regs*)>:
c0014ee3:	83 ec 1c             	sub    esp,0x1c
c0014ee6:	0f 20 c0             	mov    eax,cr0
c0014ee9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014eed:	0f 20 d0             	mov    eax,cr2
c0014ef0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014ef4:	0f 20 d8             	mov    eax,cr3
c0014ef7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014efb:	0f 20 e0             	mov    eax,cr4
c0014efe:	89 04 24             	mov    DWORD PTR [esp],eax
c0014f01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f05:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014f08:	83 ec 08             	sub    esp,0x8
c0014f0b:	50                   	push   eax
c0014f0c:	68 18 f5 01 c0       	push   0xc001f518
c0014f11:	e8 a4 56 ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0014f16:	83 c4 10             	add    esp,0x10
c0014f19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f1d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014f20:	83 ec 08             	sub    esp,0x8
c0014f23:	50                   	push   eax
c0014f24:	68 09 f5 01 c0       	push   0xc001f509
c0014f29:	e8 8c 56 ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0014f2e:	83 c4 10             	add    esp,0x10
c0014f31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f35:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014f38:	83 ec 08             	sub    esp,0x8
c0014f3b:	50                   	push   eax
c0014f3c:	68 14 f5 01 c0       	push   0xc001f514
c0014f41:	e8 74 56 ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0014f46:	83 c4 10             	add    esp,0x10
c0014f49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f4d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f50:	83 ec 08             	sub    esp,0x8
c0014f53:	50                   	push   eax
c0014f54:	68 23 f5 01 c0       	push   0xc001f523
c0014f59:	e8 5c 56 ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0014f5e:	83 c4 10             	add    esp,0x10
c0014f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f65:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0014f68:	83 ec 08             	sub    esp,0x8
c0014f6b:	50                   	push   eax
c0014f6c:	68 2e f5 01 c0       	push   0xc001f52e
c0014f71:	e8 44 56 ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0014f76:	83 c4 10             	add    esp,0x10
c0014f79:	83 ec 08             	sub    esp,0x8
c0014f7c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014f80:	68 39 f5 01 c0       	push   0xc001f539
c0014f85:	e8 30 56 ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0014f8a:	83 c4 10             	add    esp,0x10
c0014f8d:	83 ec 08             	sub    esp,0x8
c0014f90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014f94:	68 44 f5 01 c0       	push   0xc001f544
c0014f99:	e8 1c 56 ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0014f9e:	83 c4 10             	add    esp,0x10
c0014fa1:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0014fa6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fac:	83 ec 0c             	sub    esp,0xc
c0014faf:	50                   	push   eax
c0014fb0:	e8 aa 34 ff ff       	call   c000845f <setActiveTerminal(VgaText*)>
c0014fb5:	83 c4 10             	add    esp,0x10
c0014fb8:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0014fbd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fc3:	83 ec 08             	sub    esp,0x8
c0014fc6:	68 4f f5 01 c0       	push   0xc001f54f
c0014fcb:	50                   	push   eax
c0014fcc:	e8 cd 37 ff ff       	call   c000879e <VgaText::puts(char const*)>
c0014fd1:	83 c4 10             	add    esp,0x10
c0014fd4:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0014fd9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fdf:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0014fe4:	8b 12                	mov    edx,DWORD PTR [edx]
c0014fe6:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014fe9:	83 c2 0c             	add    edx,0xc
c0014fec:	83 ec 08             	sub    esp,0x8
c0014fef:	52                   	push   edx
c0014ff0:	50                   	push   eax
c0014ff1:	e8 a8 37 ff ff       	call   c000879e <VgaText::puts(char const*)>
c0014ff6:	83 c4 10             	add    esp,0x10
c0014ff9:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0014ffe:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015004:	83 ec 08             	sub    esp,0x8
c0015007:	68 58 f5 01 c0       	push   0xc001f558
c001500c:	50                   	push   eax
c001500d:	e8 8c 37 ff ff       	call   c000879e <VgaText::puts(char const*)>
c0015012:	83 c4 10             	add    esp,0x10
c0015015:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c001501a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015020:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015024:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0015027:	83 ec 08             	sub    esp,0x8
c001502a:	52                   	push   edx
c001502b:	50                   	push   eax
c001502c:	e8 27 37 ff ff       	call   c0008758 <VgaText::putx(unsigned int)>
c0015031:	83 c4 10             	add    esp,0x10
c0015034:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015039:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001503f:	83 ec 08             	sub    esp,0x8
c0015042:	68 60 f5 01 c0       	push   0xc001f560
c0015047:	50                   	push   eax
c0015048:	e8 51 37 ff ff       	call   c000879e <VgaText::puts(char const*)>
c001504d:	83 c4 10             	add    esp,0x10
c0015050:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015055:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001505b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001505f:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0015062:	83 ec 08             	sub    esp,0x8
c0015065:	52                   	push   edx
c0015066:	50                   	push   eax
c0015067:	e8 ec 36 ff ff       	call   c0008758 <VgaText::putx(unsigned int)>
c001506c:	83 c4 10             	add    esp,0x10
c001506f:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015074:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001507a:	83 ec 08             	sub    esp,0x8
c001507d:	68 68 f5 01 c0       	push   0xc001f568
c0015082:	50                   	push   eax
c0015083:	e8 16 37 ff ff       	call   c000879e <VgaText::puts(char const*)>
c0015088:	83 c4 10             	add    esp,0x10
c001508b:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015090:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015096:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001509a:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c001509d:	83 ec 08             	sub    esp,0x8
c00150a0:	52                   	push   edx
c00150a1:	50                   	push   eax
c00150a2:	e8 b1 36 ff ff       	call   c0008758 <VgaText::putx(unsigned int)>
c00150a7:	83 c4 10             	add    esp,0x10
c00150aa:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c00150af:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150b5:	83 ec 08             	sub    esp,0x8
c00150b8:	68 70 f5 01 c0       	push   0xc001f570
c00150bd:	50                   	push   eax
c00150be:	e8 db 36 ff ff       	call   c000879e <VgaText::puts(char const*)>
c00150c3:	83 c4 10             	add    esp,0x10
c00150c6:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c00150cb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150d1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00150d5:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00150d8:	83 ec 08             	sub    esp,0x8
c00150db:	52                   	push   edx
c00150dc:	50                   	push   eax
c00150dd:	e8 76 36 ff ff       	call   c0008758 <VgaText::putx(unsigned int)>
c00150e2:	83 c4 10             	add    esp,0x10
c00150e5:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c00150ea:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150f0:	83 ec 08             	sub    esp,0x8
c00150f3:	68 78 f5 01 c0       	push   0xc001f578
c00150f8:	50                   	push   eax
c00150f9:	e8 a0 36 ff ff       	call   c000879e <VgaText::puts(char const*)>
c00150fe:	83 c4 10             	add    esp,0x10
c0015101:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015106:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001510c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015110:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0015113:	83 ec 08             	sub    esp,0x8
c0015116:	52                   	push   edx
c0015117:	50                   	push   eax
c0015118:	e8 3b 36 ff ff       	call   c0008758 <VgaText::putx(unsigned int)>
c001511d:	83 c4 10             	add    esp,0x10
c0015120:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015125:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001512b:	83 ec 08             	sub    esp,0x8
c001512e:	68 80 f5 01 c0       	push   0xc001f580
c0015133:	50                   	push   eax
c0015134:	e8 65 36 ff ff       	call   c000879e <VgaText::puts(char const*)>
c0015139:	83 c4 10             	add    esp,0x10
c001513c:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015141:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015147:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001514b:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001514e:	83 ec 08             	sub    esp,0x8
c0015151:	52                   	push   edx
c0015152:	50                   	push   eax
c0015153:	e8 00 36 ff ff       	call   c0008758 <VgaText::putx(unsigned int)>
c0015158:	83 c4 10             	add    esp,0x10
c001515b:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015160:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015166:	83 ec 08             	sub    esp,0x8
c0015169:	68 88 f5 01 c0       	push   0xc001f588
c001516e:	50                   	push   eax
c001516f:	e8 2a 36 ff ff       	call   c000879e <VgaText::puts(char const*)>
c0015174:	83 c4 10             	add    esp,0x10
c0015177:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c001517c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015182:	83 ec 08             	sub    esp,0x8
c0015185:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015189:	50                   	push   eax
c001518a:	e8 c9 35 ff ff       	call   c0008758 <VgaText::putx(unsigned int)>
c001518f:	83 c4 10             	add    esp,0x10
c0015192:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015197:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001519d:	83 ec 08             	sub    esp,0x8
c00151a0:	68 91 f5 01 c0       	push   0xc001f591
c00151a5:	50                   	push   eax
c00151a6:	e8 f3 35 ff ff       	call   c000879e <VgaText::puts(char const*)>
c00151ab:	83 c4 10             	add    esp,0x10
c00151ae:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c00151b3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151b9:	83 ec 08             	sub    esp,0x8
c00151bc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00151c0:	50                   	push   eax
c00151c1:	e8 92 35 ff ff       	call   c0008758 <VgaText::putx(unsigned int)>
c00151c6:	83 c4 10             	add    esp,0x10
c00151c9:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c00151ce:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151d4:	83 ec 08             	sub    esp,0x8
c00151d7:	68 99 f5 01 c0       	push   0xc001f599
c00151dc:	50                   	push   eax
c00151dd:	e8 bc 35 ff ff       	call   c000879e <VgaText::puts(char const*)>
c00151e2:	83 c4 10             	add    esp,0x10
c00151e5:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c00151ea:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151f0:	83 ec 08             	sub    esp,0x8
c00151f3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00151f7:	50                   	push   eax
c00151f8:	e8 5b 35 ff ff       	call   c0008758 <VgaText::putx(unsigned int)>
c00151fd:	83 c4 10             	add    esp,0x10
c0015200:	fa                   	cli    
c0015201:	f4                   	hlt    
c0015202:	eb fe                	jmp    c0015202 <displayDebugInfo(regs*)+0x31f>

c0015204 <HalSystemIdle()>:
c0015204:	56                   	push   esi
c0015205:	53                   	push   ebx
c0015206:	83 ec 14             	sub    esp,0x14
c0015209:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c001520e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015214:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c001521a:	83 e0 04             	and    eax,0x4
c001521d:	84 c0                	test   al,al
c001521f:	0f 95 c0             	setne  al
c0015222:	84 c0                	test   al,al
c0015224:	74 4c                	je     c0015272 <HalSystemIdle()+0x6e>
c0015226:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c001522b:	83 ec 08             	sub    esp,0x8
c001522e:	68 e1 00 00 00       	push   0xe1
c0015233:	50                   	push   eax
c0015234:	e8 1f 1c ff ff       	call   c0006e58 <Computer::rdmsr(unsigned int)>
c0015239:	83 c4 10             	add    esp,0x10
c001523c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015240:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015244:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0015249:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001524d:	83 e2 02             	and    edx,0x2
c0015250:	89 d3                	mov    ebx,edx
c0015252:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015256:	83 e2 00             	and    edx,0x0
c0015259:	89 d6                	mov    esi,edx
c001525b:	56                   	push   esi
c001525c:	53                   	push   ebx
c001525d:	68 e1 00 00 00       	push   0xe1
c0015262:	50                   	push   eax
c0015263:	e8 1c 1c ff ff       	call   c0006e84 <Computer::wrmsr(unsigned int, unsigned long long)>
c0015268:	83 c4 10             	add    esp,0x10
c001526b:	e8 24 af fe ff       	call   c0000194 <doTPAUSE>
c0015270:	eb 01                	jmp    c0015273 <HalSystemIdle()+0x6f>
c0015272:	f4                   	hlt    
c0015273:	90                   	nop
c0015274:	83 c4 14             	add    esp,0x14
c0015277:	5b                   	pop    ebx
c0015278:	5e                   	pop    esi
c0015279:	c3                   	ret    

c001527a <displayProgramFault(char const*)>:
c001527a:	83 ec 0c             	sub    esp,0xc
c001527d:	83 ec 0c             	sub    esp,0xc
c0015280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015284:	e8 31 53 ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0015289:	83 c4 10             	add    esp,0x10
c001528c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015291:	8b 00                	mov    eax,DWORD PTR [eax]
c0015293:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015296:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001529c:	85 c0                	test   eax,eax
c001529e:	74 21                	je     c00152c1 <displayProgramFault(char const*)+0x47>
c00152a0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00152a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00152a7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00152aa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152b0:	6a 04                	push   0x4
c00152b2:	6a 0f                	push   0xf
c00152b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00152b8:	50                   	push   eax
c00152b9:	e8 52 35 ff ff       	call   c0008810 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00152be:	83 c4 10             	add    esp,0x10
c00152c1:	90                   	nop
c00152c2:	83 c4 0c             	add    esp,0xc
c00152c5:	c3                   	ret    

c00152c6 <gpFault(regs*, void*)>:
c00152c6:	83 ec 1c             	sub    esp,0x1c
c00152c9:	c7 05 10 62 02 c0 db 47 01 c0 	mov    DWORD PTR ds:0xc0026210,0xc00147db
c00152d3:	a1 10 62 02 c0       	mov    eax,ds:0xc0026210
c00152d8:	85 c0                	test   eax,eax
c00152da:	74 1c                	je     c00152f8 <gpFault(regs*, void*)+0x32>
c00152dc:	a1 10 62 02 c0       	mov    eax,ds:0xc0026210
c00152e1:	83 ec 0c             	sub    esp,0xc
c00152e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00152e8:	ff d0                	call   eax
c00152ea:	83 c4 10             	add    esp,0x10
c00152ed:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00152f1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00152f6:	75 2e                	jne    c0015326 <gpFault(regs*, void*)+0x60>
c00152f8:	83 ec 0c             	sub    esp,0xc
c00152fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00152ff:	e8 df fb ff ff       	call   c0014ee3 <displayDebugInfo(regs*)>
c0015304:	83 c4 10             	add    esp,0x10
c0015307:	83 ec 0c             	sub    esp,0xc
c001530a:	68 a1 f5 01 c0       	push   0xc001f5a1
c001530f:	e8 66 ff ff ff       	call   c001527a <displayProgramFault(char const*)>
c0015314:	83 c4 10             	add    esp,0x10
c0015317:	83 ec 0c             	sub    esp,0xc
c001531a:	6a 00                	push   0x0
c001531c:	e8 af ee ff ff       	call   c00141d0 <Thr::terminateFromIRQ(int)>
c0015321:	83 c4 10             	add    esp,0x10
c0015324:	eb 01                	jmp    c0015327 <gpFault(regs*, void*)+0x61>
c0015326:	90                   	nop
c0015327:	83 c4 1c             	add    esp,0x1c
c001532a:	c3                   	ret    

c001532b <pgFault(regs*, void*)>:
c001532b:	83 ec 1c             	sub    esp,0x1c
c001532e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015332:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015335:	0f 20 d0             	mov    eax,cr2
c0015338:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001533c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015340:	83 ec 04             	sub    esp,0x4
c0015343:	52                   	push   edx
c0015344:	50                   	push   eax
c0015345:	68 80 f6 01 c0       	push   0xc001f680
c001534a:	e8 6b 52 ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c001534f:	83 c4 10             	add    esp,0x10
c0015352:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015357:	8b 00                	mov    eax,DWORD PTR [eax]
c0015359:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001535c:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0015362:	0f 20 d2             	mov    edx,cr2
c0015365:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015369:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001536d:	83 ec 08             	sub    esp,0x8
c0015370:	52                   	push   edx
c0015371:	50                   	push   eax
c0015372:	e8 39 4e ff ff       	call   c000a1b0 <VAS::tryLoadBackOffDisk(unsigned long)>
c0015377:	83 c4 10             	add    esp,0x10
c001537a:	84 c0                	test   al,al
c001537c:	75 2e                	jne    c00153ac <pgFault(regs*, void*)+0x81>
c001537e:	83 ec 0c             	sub    esp,0xc
c0015381:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015385:	e8 59 fb ff ff       	call   c0014ee3 <displayDebugInfo(regs*)>
c001538a:	83 c4 10             	add    esp,0x10
c001538d:	83 ec 0c             	sub    esp,0xc
c0015390:	68 ba f5 01 c0       	push   0xc001f5ba
c0015395:	e8 e0 fe ff ff       	call   c001527a <displayProgramFault(char const*)>
c001539a:	83 c4 10             	add    esp,0x10
c001539d:	83 ec 0c             	sub    esp,0xc
c00153a0:	6a 00                	push   0x0
c00153a2:	e8 29 ee ff ff       	call   c00141d0 <Thr::terminateFromIRQ(int)>
c00153a7:	83 c4 10             	add    esp,0x10
c00153aa:	eb 01                	jmp    c00153ad <pgFault(regs*, void*)+0x82>
c00153ac:	90                   	nop
c00153ad:	83 c4 1c             	add    esp,0x1c
c00153b0:	c3                   	ret    

c00153b1 <otherISRHandler(regs*, void*)>:
c00153b1:	83 ec 0c             	sub    esp,0xc
c00153b4:	83 ec 0c             	sub    esp,0xc
c00153b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00153bb:	e8 23 fb ff ff       	call   c0014ee3 <displayDebugInfo(regs*)>
c00153c0:	83 c4 10             	add    esp,0x10
c00153c3:	83 ec 0c             	sub    esp,0xc
c00153c6:	68 a8 f6 01 c0       	push   0xc001f6a8
c00153cb:	e8 aa fe ff ff       	call   c001527a <displayProgramFault(char const*)>
c00153d0:	83 c4 10             	add    esp,0x10
c00153d3:	83 ec 0c             	sub    esp,0xc
c00153d6:	6a 00                	push   0x0
c00153d8:	e8 f3 ed ff ff       	call   c00141d0 <Thr::terminateFromIRQ(int)>
c00153dd:	83 c4 10             	add    esp,0x10
c00153e0:	90                   	nop
c00153e1:	83 c4 0c             	add    esp,0xc
c00153e4:	c3                   	ret    

c00153e5 <opcodeFault(regs*, void*)>:
c00153e5:	55                   	push   ebp
c00153e6:	89 e5                	mov    ebp,esp
c00153e8:	83 ec 08             	sub    esp,0x8
c00153eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ee:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153f1:	83 ec 08             	sub    esp,0x8
c00153f4:	50                   	push   eax
c00153f5:	68 c5 f5 01 c0       	push   0xc001f5c5
c00153fa:	e8 bb 51 ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c00153ff:	83 c4 10             	add    esp,0x10
c0015402:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0015407:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001540d:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0015413:	84 c0                	test   al,al
c0015415:	74 21                	je     c0015438 <opcodeFault(regs*, void*)+0x53>
c0015417:	83 ec 0c             	sub    esp,0xc
c001541a:	68 d0 f6 01 c0       	push   0xc001f6d0
c001541f:	e8 96 51 ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0015424:	83 c4 10             	add    esp,0x10
c0015427:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001542a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001542d:	8d 50 19             	lea    edx,[eax+0x19]
c0015430:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015433:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015436:	eb 2b                	jmp    c0015463 <opcodeFault(regs*, void*)+0x7e>
c0015438:	83 ec 0c             	sub    esp,0xc
c001543b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001543e:	e8 a0 fa ff ff       	call   c0014ee3 <displayDebugInfo(regs*)>
c0015443:	83 c4 10             	add    esp,0x10
c0015446:	83 ec 0c             	sub    esp,0xc
c0015449:	68 d3 f5 01 c0       	push   0xc001f5d3
c001544e:	e8 27 fe ff ff       	call   c001527a <displayProgramFault(char const*)>
c0015453:	83 c4 10             	add    esp,0x10
c0015456:	83 ec 0c             	sub    esp,0xc
c0015459:	6a 00                	push   0x0
c001545b:	e8 70 ed ff ff       	call   c00141d0 <Thr::terminateFromIRQ(int)>
c0015460:	83 c4 10             	add    esp,0x10
c0015463:	c9                   	leave  
c0015464:	c3                   	ret    

c0015465 <i386SaveCoprocessor(void*)>:
c0015465:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015469:	83 c0 3f             	add    eax,0x3f
c001546c:	83 e0 c0             	and    eax,0xffffffc0
c001546f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015473:	ff 25 0c 62 02 c0    	jmp    DWORD PTR ds:0xc002620c

c0015479 <i386LoadCoprocessor(void*)>:
c0015479:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001547d:	83 c0 3f             	add    eax,0x3f
c0015480:	83 e0 c0             	and    eax,0xffffffc0
c0015483:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015487:	ff 25 08 62 02 c0    	jmp    DWORD PTR ds:0xc0026208

c001548d <x87EmulHandler(regs*, void*)>:
c001548d:	53                   	push   ebx
c001548e:	83 ec 08             	sub    esp,0x8
c0015491:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015496:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c001549a:	74 10                	je     c00154ac <x87EmulHandler(regs*, void*)+0x1f>
c001549c:	83 ec 0c             	sub    esp,0xc
c001549f:	68 e0 f5 01 c0       	push   0xc001f5e0
c00154a4:	e8 1a ae ff ff       	call   c00102c3 <KePanic(char const*)>
c00154a9:	83 c4 10             	add    esp,0x10
c00154ac:	0f 20 c0             	mov    eax,cr0
c00154af:	a8 08                	test   al,0x8
c00154b1:	74 59                	je     c001550c <x87EmulHandler(regs*, void*)+0x7f>
c00154b3:	0f 06                	clts   
c00154b5:	a1 04 62 02 c0       	mov    eax,ds:0xc0026204
c00154ba:	85 c0                	test   eax,eax
c00154bc:	74 0e                	je     c00154cc <x87EmulHandler(regs*, void*)+0x3f>
c00154be:	83 ec 0c             	sub    esp,0xc
c00154c1:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00154c4:	e8 9c ff ff ff       	call   c0015465 <i386SaveCoprocessor(void*)>
c00154c9:	83 c4 10             	add    esp,0x10
c00154cc:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00154d2:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00154d6:	75 12                	jne    c00154ea <x87EmulHandler(regs*, void*)+0x5d>
c00154d8:	83 ec 0c             	sub    esp,0xc
c00154db:	68 40 02 00 00       	push   0x240
c00154e0:	e8 3c 23 ff ff       	call   c0007821 <malloc>
c00154e5:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00154e8:	eb 10                	jmp    c00154fa <x87EmulHandler(regs*, void*)+0x6d>
c00154ea:	83 ec 0c             	sub    esp,0xc
c00154ed:	a1 04 62 02 c0       	mov    eax,ds:0xc0026204
c00154f2:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00154f5:	e8 7f ff ff ff       	call   c0015479 <i386LoadCoprocessor(void*)>
c00154fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154ff:	83 c4 10             	add    esp,0x10
c0015502:	a3 04 62 02 c0       	mov    ds:0xc0026204,eax
c0015507:	83 c4 08             	add    esp,0x8
c001550a:	5b                   	pop    ebx
c001550b:	c3                   	ret    
c001550c:	83 ec 0c             	sub    esp,0xc
c001550f:	68 f4 f5 01 c0       	push   0xc001f5f4
c0015514:	e8 a1 50 ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0015519:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015521:	83 c4 18             	add    esp,0x18
c0015524:	5b                   	pop    ebx
c0015525:	e9 a6 ec ff ff       	jmp    c00141d0 <Thr::terminateFromIRQ(int)>

c001552a <HalInitialiseCoprocessor()>:
c001552a:	83 ec 10             	sub    esp,0x10
c001552d:	c7 05 04 62 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026204,0x0
c0015537:	6a 00                	push   0x0
c0015539:	68 8d 54 01 c0       	push   0xc001548d
c001553e:	6a 07                	push   0x7
c0015540:	e8 e7 69 ff ff       	call   c000bf2c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015545:	e8 76 6d 00 00       	call   c001c2c0 <avxDetect>
c001554a:	83 c4 10             	add    esp,0x10
c001554d:	85 c0                	test   eax,eax
c001554f:	74 1c                	je     c001556d <HalInitialiseCoprocessor()+0x43>
c0015551:	c7 05 0c 62 02 c0 ea c2 01 c0 	mov    DWORD PTR ds:0xc002620c,0xc001c2ea
c001555b:	c7 05 08 62 02 c0 fb c2 01 c0 	mov    DWORD PTR ds:0xc0026208,0xc001c2fb
c0015565:	83 c4 0c             	add    esp,0xc
c0015568:	e9 9f 6d 00 00       	jmp    c001c30c <avxInit>
c001556d:	e8 2e 70 00 00       	call   c001c5a0 <absolutelyNoChanceInHell>
c0015572:	85 c0                	test   eax,eax
c0015574:	74 1c                	je     c0015592 <HalInitialiseCoprocessor()+0x68>
c0015576:	c7 05 0c 62 02 c0 b8 c5 01 c0 	mov    DWORD PTR ds:0xc002620c,0xc001c5b8
c0015580:	c7 05 08 62 02 c0 c0 c5 01 c0 	mov    DWORD PTR ds:0xc0026208,0xc001c5c0
c001558a:	83 c4 0c             	add    esp,0xc
c001558d:	e9 36 70 00 00       	jmp    c001c5c8 <sseInit>
c0015592:	e8 4f 70 00 00       	call   c001c5e6 <x87Detect>
c0015597:	85 c0                	test   eax,eax
c0015599:	74 1c                	je     c00155b7 <HalInitialiseCoprocessor()+0x8d>
c001559b:	c7 05 0c 62 02 c0 01 c6 01 c0 	mov    DWORD PTR ds:0xc002620c,0xc001c601
c00155a5:	c7 05 08 62 02 c0 08 c6 01 c0 	mov    DWORD PTR ds:0xc0026208,0xc001c608
c00155af:	83 c4 0c             	add    esp,0xc
c00155b2:	e9 58 70 00 00       	jmp    c001c60f <x87Init>
c00155b7:	c7 05 0c 62 02 c0 b0 4e 01 c0 	mov    DWORD PTR ds:0xc002620c,0xc0014eb0
c00155c1:	c7 05 08 62 02 c0 b0 4e 01 c0 	mov    DWORD PTR ds:0xc0026208,0xc0014eb0
c00155cb:	0f 20 c0             	mov    eax,cr0
c00155ce:	83 c8 04             	or     eax,0x4
c00155d1:	0f 22 c0             	mov    cr0,eax
c00155d4:	83 c4 0c             	add    esp,0xc
c00155d7:	c3                   	ret    

c00155d8 <HalPanic(char const*)>:
c00155d8:	53                   	push   ebx
c00155d9:	83 ec 10             	sub    esp,0x10
c00155dc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00155e0:	fa                   	cli    
c00155e1:	53                   	push   ebx
c00155e2:	68 0a f6 01 c0       	push   0xc001f60a
c00155e7:	e8 ce 4f ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c00155ec:	83 c4 0c             	add    esp,0xc
c00155ef:	6a 01                	push   0x1
c00155f1:	6a 0f                	push   0xf
c00155f3:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c00155f9:	e8 b4 2c ff ff       	call   c00082b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00155fe:	58                   	pop    eax
c00155ff:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c0015605:	e8 a0 2e ff ff       	call   c00084aa <VgaText::clearScreen()>
c001560a:	5a                   	pop    edx
c001560b:	59                   	pop    ecx
c001560c:	68 20 e0 01 c0       	push   0xc001e020
c0015611:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c0015617:	e8 ce 2c ff ff       	call   c00082ea <VgaText::setTitle(char*)>
c001561c:	83 c4 0c             	add    esp,0xc
c001561f:	6a 01                	push   0x1
c0015621:	6a 0f                	push   0xf
c0015623:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c0015629:	e8 84 2c ff ff       	call   c00082b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001562e:	58                   	pop    eax
c001562f:	5a                   	pop    edx
c0015630:	68 23 f6 01 c0       	push   0xc001f623
c0015635:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c001563b:	e8 5e 31 ff ff       	call   c000879e <VgaText::puts(char const*)>
c0015640:	83 c4 0c             	add    esp,0xc
c0015643:	6a 0f                	push   0xf
c0015645:	6a 01                	push   0x1
c0015647:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c001564d:	e8 60 2c ff ff       	call   c00082b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015652:	59                   	pop    ecx
c0015653:	58                   	pop    eax
c0015654:	68 2c f6 01 c0       	push   0xc001f62c
c0015659:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c001565f:	e8 3a 31 ff ff       	call   c000879e <VgaText::puts(char const*)>
c0015664:	83 c4 0c             	add    esp,0xc
c0015667:	6a 01                	push   0x1
c0015669:	6a 0f                	push   0xf
c001566b:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c0015671:	e8 3c 2c ff ff       	call   c00082b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015676:	58                   	pop    eax
c0015677:	5a                   	pop    edx
c0015678:	68 70 f6 01 c0       	push   0xc001f670
c001567d:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c0015683:	e8 16 31 ff ff       	call   c000879e <VgaText::puts(char const*)>
c0015688:	59                   	pop    ecx
c0015689:	58                   	pop    eax
c001568a:	68 39 f6 01 c0       	push   0xc001f639
c001568f:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c0015695:	e8 04 31 ff ff       	call   c000879e <VgaText::puts(char const*)>
c001569a:	58                   	pop    eax
c001569b:	5a                   	pop    edx
c001569c:	68 73 f6 01 c0       	push   0xc001f673
c00156a1:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c00156a7:	e8 f2 30 ff ff       	call   c000879e <VgaText::puts(char const*)>
c00156ac:	59                   	pop    ecx
c00156ad:	58                   	pop    eax
c00156ae:	53                   	push   ebx
c00156af:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c00156b5:	e8 e4 30 ff ff       	call   c000879e <VgaText::puts(char const*)>
c00156ba:	58                   	pop    eax
c00156bb:	5a                   	pop    edx
c00156bc:	68 70 f6 01 c0       	push   0xc001f670
c00156c1:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c00156c7:	e8 d2 30 ff ff       	call   c000879e <VgaText::puts(char const*)>
c00156cc:	83 c4 10             	add    esp,0x10
c00156cf:	eb fe                	jmp    c00156cf <HalPanic(char const*)+0xf7>

c00156d1 <HalQueryPerformanceCounter()>:
c00156d1:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c00156d6:	31 d2                	xor    edx,edx
c00156d8:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00156de:	31 c0                	xor    eax,eax
c00156e0:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00156e7:	74 02                	je     c00156eb <HalQueryPerformanceCounter()+0x1a>
c00156e9:	0f 31                	rdtsc  
c00156eb:	c3                   	ret    

c00156ec <HalInitialise()>:
c00156ec:	53                   	push   ebx
c00156ed:	83 ec 08             	sub    esp,0x8
c00156f0:	e8 6a 6a ff ff       	call   c000c15f <setupINTS()>
c00156f5:	80 3d 80 57 02 c0 00 	cmp    BYTE PTR ds:0xc0025780,0x0
c00156fc:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0015701:	75 07                	jne    c001570a <HalInitialise()+0x1e>
c0015703:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c001570a:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0015711:	c6 05 00 62 02 c0 00 	mov    BYTE PTR ds:0xc0026200,0x0
c0015718:	e8 a7 02 00 00       	call   c00159c4 <picOpen()>
c001571d:	80 3d 00 62 02 c0 00 	cmp    BYTE PTR ds:0xc0026200,0x0
c0015724:	74 0a                	je     c0015730 <HalInitialise()+0x44>
c0015726:	e8 e1 01 00 00       	call   c001590c <picDisable()>
c001572b:	e8 08 65 00 00       	call   c001bc38 <apicOpen()>
c0015730:	bb 0f 00 00 00       	mov    ebx,0xf
c0015735:	50                   	push   eax
c0015736:	6a 00                	push   0x0
c0015738:	68 b1 53 01 c0       	push   0xc00153b1
c001573d:	6a 00                	push   0x0
c001573f:	e8 e8 67 ff ff       	call   c000bf2c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015744:	83 c4 0c             	add    esp,0xc
c0015747:	6a 00                	push   0x0
c0015749:	68 b1 53 01 c0       	push   0xc00153b1
c001574e:	6a 01                	push   0x1
c0015750:	e8 d7 67 ff ff       	call   c000bf2c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015755:	83 c4 0c             	add    esp,0xc
c0015758:	6a 00                	push   0x0
c001575a:	68 b1 4e 01 c0       	push   0xc0014eb1
c001575f:	6a 02                	push   0x2
c0015761:	e8 c6 67 ff ff       	call   c000bf2c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015766:	83 c4 0c             	add    esp,0xc
c0015769:	6a 00                	push   0x0
c001576b:	68 b1 53 01 c0       	push   0xc00153b1
c0015770:	6a 03                	push   0x3
c0015772:	e8 b5 67 ff ff       	call   c000bf2c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015777:	83 c4 0c             	add    esp,0xc
c001577a:	6a 00                	push   0x0
c001577c:	68 b1 53 01 c0       	push   0xc00153b1
c0015781:	6a 04                	push   0x4
c0015783:	e8 a4 67 ff ff       	call   c000bf2c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015788:	83 c4 0c             	add    esp,0xc
c001578b:	6a 00                	push   0x0
c001578d:	68 b1 53 01 c0       	push   0xc00153b1
c0015792:	6a 05                	push   0x5
c0015794:	e8 93 67 ff ff       	call   c000bf2c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015799:	83 c4 0c             	add    esp,0xc
c001579c:	6a 00                	push   0x0
c001579e:	68 e5 53 01 c0       	push   0xc00153e5
c00157a3:	6a 06                	push   0x6
c00157a5:	e8 82 67 ff ff       	call   c000bf2c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157aa:	83 c4 0c             	add    esp,0xc
c00157ad:	6a 00                	push   0x0
c00157af:	68 ca 4e 01 c0       	push   0xc0014eca
c00157b4:	6a 08                	push   0x8
c00157b6:	e8 71 67 ff ff       	call   c000bf2c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157bb:	83 c4 0c             	add    esp,0xc
c00157be:	6a 00                	push   0x0
c00157c0:	68 b1 53 01 c0       	push   0xc00153b1
c00157c5:	6a 09                	push   0x9
c00157c7:	e8 60 67 ff ff       	call   c000bf2c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157cc:	83 c4 0c             	add    esp,0xc
c00157cf:	6a 00                	push   0x0
c00157d1:	68 b1 53 01 c0       	push   0xc00153b1
c00157d6:	6a 0a                	push   0xa
c00157d8:	e8 4f 67 ff ff       	call   c000bf2c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157dd:	83 c4 0c             	add    esp,0xc
c00157e0:	6a 00                	push   0x0
c00157e2:	68 b1 53 01 c0       	push   0xc00153b1
c00157e7:	6a 0b                	push   0xb
c00157e9:	e8 3e 67 ff ff       	call   c000bf2c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157ee:	83 c4 0c             	add    esp,0xc
c00157f1:	6a 00                	push   0x0
c00157f3:	68 c6 52 01 c0       	push   0xc00152c6
c00157f8:	6a 0d                	push   0xd
c00157fa:	e8 2d 67 ff ff       	call   c000bf2c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157ff:	83 c4 0c             	add    esp,0xc
c0015802:	6a 00                	push   0x0
c0015804:	68 2b 53 01 c0       	push   0xc001532b
c0015809:	6a 0e                	push   0xe
c001580b:	e8 1c 67 ff ff       	call   c000bf2c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015810:	83 c4 10             	add    esp,0x10
c0015813:	50                   	push   eax
c0015814:	6a 00                	push   0x0
c0015816:	68 b1 53 01 c0       	push   0xc00153b1
c001581b:	53                   	push   ebx
c001581c:	43                   	inc    ebx
c001581d:	e8 0a 67 ff ff       	call   c000bf2c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015822:	83 c4 10             	add    esp,0x10
c0015825:	83 fb 1e             	cmp    ebx,0x1e
c0015828:	75 e9                	jne    c0015813 <HalInitialise()+0x127>
c001582a:	50                   	push   eax
c001582b:	6a 00                	push   0x0
c001582d:	68 5e 14 01 c0       	push   0xc001145e
c0015832:	6a 60                	push   0x60
c0015834:	e8 f3 66 ff ff       	call   c000bf2c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015839:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c001583e:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0015848:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001584f:	e8 cd 1f ff ff       	call   c0007821 <malloc>
c0015854:	89 04 24             	mov    DWORD PTR [esp],eax
c0015857:	89 c3                	mov    ebx,eax
c0015859:	e8 2e 09 00 00       	call   c001618c <RTC::RTC()>
c001585e:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0015868:	5a                   	pop    edx
c0015869:	59                   	pop    ecx
c001586a:	53                   	push   ebx
c001586b:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015871:	e8 82 61 ff ff       	call   c000b9f8 <Device::addChild(Device*)>
c0015876:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015878:	6a 00                	push   0x0
c001587a:	6a 00                	push   0x0
c001587c:	6a 00                	push   0x0
c001587e:	53                   	push   ebx
c001587f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015882:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0015887:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001588d:	83 c4 28             	add    esp,0x28
c0015890:	5b                   	pop    ebx
c0015891:	c3                   	ret    

c0015892 <HalMakeBeep(int)>:
c0015892:	53                   	push   ebx
c0015893:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015897:	85 db                	test   ebx,ebx
c0015899:	75 07                	jne    c00158a2 <HalMakeBeep(int)+0x10>
c001589b:	e4 61                	in     al,0x61
c001589d:	83 e0 fc             	and    eax,0xfffffffc
c00158a0:	eb 26                	jmp    c00158c8 <HalMakeBeep(int)+0x36>
c00158a2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00158a7:	99                   	cdq    
c00158a8:	f7 fb                	idiv   ebx
c00158aa:	89 c1                	mov    ecx,eax
c00158ac:	b0 b6                	mov    al,0xb6
c00158ae:	e6 43                	out    0x43,al
c00158b0:	88 c8                	mov    al,cl
c00158b2:	e6 42                	out    0x42,al
c00158b4:	89 c8                	mov    eax,ecx
c00158b6:	c1 e8 08             	shr    eax,0x8
c00158b9:	e6 42                	out    0x42,al
c00158bb:	e4 61                	in     al,0x61
c00158bd:	88 c2                	mov    dl,al
c00158bf:	83 ca 03             	or     edx,0x3
c00158c2:	38 c2                	cmp    dl,al
c00158c4:	74 04                	je     c00158ca <HalMakeBeep(int)+0x38>
c00158c6:	88 d0                	mov    al,dl
c00158c8:	e6 61                	out    0x61,al
c00158ca:	5b                   	pop    ebx
c00158cb:	c3                   	ret    

c00158cc <HalGetRand()>:
c00158cc:	31 c0                	xor    eax,eax
c00158ce:	c3                   	ret    

c00158cf <HalEndOfInterrupt(int)>:
c00158cf:	80 3d 00 62 02 c0 00 	cmp    BYTE PTR ds:0xc0026200,0x0
c00158d6:	74 23                	je     c00158fb <HalEndOfInterrupt(int)+0x2c>
c00158d8:	83 ec 14             	sub    esp,0x14
c00158db:	6a 1b                	push   0x1b
c00158dd:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c00158e3:	e8 70 15 ff ff       	call   c0006e58 <Computer::rdmsr(unsigned int)>
c00158e8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00158ed:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00158f7:	83 c4 1c             	add    esp,0x1c
c00158fa:	c3                   	ret    
c00158fb:	e9 54 02 00 00       	jmp    c0015b54 <picEOI(int)>

c0015900 <HalRestart()>:
c0015900:	c3                   	ret    

c0015901 <HalShutdown()>:
c0015901:	c3                   	ret    

c0015902 <HalSleep()>:
c0015902:	c3                   	ret    
c0015903:	90                   	nop

c0015904 <picIoWait()>:
c0015904:	eb 00                	jmp    c0015906 <picIoWait()+0x2>
c0015906:	eb 00                	jmp    c0015908 <picIoWait()+0x4>
c0015908:	90                   	nop
c0015909:	c3                   	ret    
c001590a:	66 90                	xchg   ax,ax

c001590c <picDisable()>:
c001590c:	83 ec 10             	sub    esp,0x10
c001590f:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0015916:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001591b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001591f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015924:	ee                   	out    dx,al
c0015925:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001592c:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0015931:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015935:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001593a:	ee                   	out    dx,al
c001593b:	90                   	nop
c001593c:	83 c4 10             	add    esp,0x10
c001593f:	c3                   	ret    

c0015940 <picGetIRQReg(int)>:
c0015940:	83 ec 10             	sub    esp,0x10
c0015943:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015947:	25 ff 00 00 00       	and    eax,0xff
c001594c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015953:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0015957:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001595b:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015960:	ee                   	out    dx,al
c0015961:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015965:	25 ff 00 00 00       	and    eax,0xff
c001596a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015971:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0015975:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015979:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001597e:	ee                   	out    dx,al
c001597f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0015986:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001598b:	89 c2                	mov    edx,eax
c001598d:	ec                   	in     al,dx
c001598e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0015992:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015996:	25 ff 00 00 00       	and    eax,0xff
c001599b:	c1 e0 08             	shl    eax,0x8
c001599e:	89 c1                	mov    ecx,eax
c00159a0:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00159a7:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00159ac:	89 c2                	mov    edx,eax
c00159ae:	ec                   	in     al,dx
c00159af:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00159b3:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00159b7:	25 ff 00 00 00       	and    eax,0xff
c00159bc:	09 c8                	or     eax,ecx
c00159be:	83 c4 10             	add    esp,0x10
c00159c1:	c3                   	ret    
c00159c2:	66 90                	xchg   ax,ax

c00159c4 <picOpen()>:
c00159c4:	83 ec 50             	sub    esp,0x50
c00159c7:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00159ce:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00159d3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00159d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00159db:	ee                   	out    dx,al
c00159dc:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00159e3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00159e8:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00159ec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00159f0:	ee                   	out    dx,al
c00159f1:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00159f9:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0015a01:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0015a08:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015a0c:	89 c2                	mov    edx,eax
c0015a0e:	ec                   	in     al,dx
c0015a0f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0015a13:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015a17:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0015a1b:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0015a22:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015a26:	89 c2                	mov    edx,eax
c0015a28:	ec                   	in     al,dx
c0015a29:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015a2d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015a31:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0015a35:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0015a3c:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0015a41:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015a45:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015a49:	ee                   	out    dx,al
c0015a4a:	e8 b5 fe ff ff       	call   c0015904 <picIoWait()>
c0015a4f:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0015a56:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0015a5b:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015a5f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015a63:	ee                   	out    dx,al
c0015a64:	e8 9b fe ff ff       	call   c0015904 <picIoWait()>
c0015a69:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015a6d:	25 ff 00 00 00       	and    eax,0xff
c0015a72:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015a79:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015a7d:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015a81:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015a85:	ee                   	out    dx,al
c0015a86:	e8 79 fe ff ff       	call   c0015904 <picIoWait()>
c0015a8b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015a8f:	25 ff 00 00 00       	and    eax,0xff
c0015a94:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015a9b:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015a9f:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015aa3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015aa7:	ee                   	out    dx,al
c0015aa8:	e8 57 fe ff ff       	call   c0015904 <picIoWait()>
c0015aad:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015ab4:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015ab9:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015abd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015ac1:	ee                   	out    dx,al
c0015ac2:	e8 3d fe ff ff       	call   c0015904 <picIoWait()>
c0015ac7:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015ace:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015ad3:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0015ad7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015adb:	ee                   	out    dx,al
c0015adc:	e8 23 fe ff ff       	call   c0015904 <picIoWait()>
c0015ae1:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015ae8:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015aed:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015af1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015af5:	ee                   	out    dx,al
c0015af6:	e8 09 fe ff ff       	call   c0015904 <picIoWait()>
c0015afb:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015b02:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015b07:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015b0b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015b0f:	ee                   	out    dx,al
c0015b10:	e8 ef fd ff ff       	call   c0015904 <picIoWait()>
c0015b15:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015b19:	25 ff 00 00 00       	and    eax,0xff
c0015b1e:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015b25:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015b29:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015b2d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015b31:	ee                   	out    dx,al
c0015b32:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0015b36:	25 ff 00 00 00       	and    eax,0xff
c0015b3b:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015b42:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015b46:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015b4a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015b4e:	ee                   	out    dx,al
c0015b4f:	90                   	nop
c0015b50:	83 c4 50             	add    esp,0x50
c0015b53:	c3                   	ret    

c0015b54 <picEOI(int)>:
c0015b54:	83 ec 10             	sub    esp,0x10
c0015b57:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015b5c:	75 22                	jne    c0015b80 <picEOI(int)+0x2c>
c0015b5e:	6a 0b                	push   0xb
c0015b60:	e8 db fd ff ff       	call   c0015940 <picGetIRQReg(int)>
c0015b65:	83 c4 04             	add    esp,0x4
c0015b68:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015b6d:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015b72:	25 ff ff 00 00       	and    eax,0xffff
c0015b77:	25 80 00 00 00       	and    eax,0x80
c0015b7c:	74 72                	je     c0015bf0 <picEOI(int)+0x9c>
c0015b7e:	66 90                	xchg   ax,ax
c0015b80:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015b85:	75 31                	jne    c0015bb8 <picEOI(int)+0x64>
c0015b87:	6a 0b                	push   0xb
c0015b89:	e8 b2 fd ff ff       	call   c0015940 <picGetIRQReg(int)>
c0015b8e:	83 c4 04             	add    esp,0x4
c0015b91:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015b96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015b9a:	66 85 c0             	test   ax,ax
c0015b9d:	78 19                	js     c0015bb8 <picEOI(int)+0x64>
c0015b9f:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015ba6:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015bab:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015baf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015bb4:	ee                   	out    dx,al
c0015bb5:	eb 3d                	jmp    c0015bf4 <picEOI(int)+0xa0>
c0015bb7:	90                   	nop
c0015bb8:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015bbd:	7e 19                	jle    c0015bd8 <picEOI(int)+0x84>
c0015bbf:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015bc6:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015bcb:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015bcf:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015bd4:	ee                   	out    dx,al
c0015bd5:	8d 76 00             	lea    esi,[esi+0x0]
c0015bd8:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015bdf:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015be4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015be8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015bed:	ee                   	out    dx,al
c0015bee:	eb 04                	jmp    c0015bf4 <picEOI(int)+0xa0>
c0015bf0:	90                   	nop
c0015bf1:	8d 76 00             	lea    esi,[esi+0x0]
c0015bf4:	83 c4 10             	add    esp,0x10
c0015bf7:	c3                   	ret    

c0015bf8 <RTC::open(int, int, void*)>:
c0015bf8:	31 c0                	xor    eax,eax
c0015bfa:	c3                   	ret    
c0015bfb:	90                   	nop

c0015bfc <RTC::close(int, int, void*)>:
c0015bfc:	31 c0                	xor    eax,eax
c0015bfe:	c3                   	ret    
c0015bff:	90                   	nop

c0015c00 <RTC::timeInSecondsUTC()>:
c0015c00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c04:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015c0a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015c10:	c3                   	ret    
c0015c11:	90                   	nop

c0015c12 <RTC::timeInDatetimeUTC()>:
c0015c12:	53                   	push   ebx
c0015c13:	83 ec 14             	sub    esp,0x14
c0015c16:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015c1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c1e:	8b 10                	mov    edx,DWORD PTR [eax]
c0015c20:	50                   	push   eax
c0015c21:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015c24:	83 c4 0c             	add    esp,0xc
c0015c27:	52                   	push   edx
c0015c28:	50                   	push   eax
c0015c29:	53                   	push   ebx
c0015c2a:	e8 3d 5b ff ff       	call   c000b76c <secondsToDatetime(unsigned long long)>
c0015c2f:	89 d8                	mov    eax,ebx
c0015c31:	83 c4 14             	add    esp,0x14
c0015c34:	5b                   	pop    ebx
c0015c35:	c2 04 00             	ret    0x4

c0015c38 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015c38:	56                   	push   esi
c0015c39:	53                   	push   ebx
c0015c3a:	83 ec 14             	sub    esp,0x14
c0015c3d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015c41:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015c43:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015c46:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015c4a:	52                   	push   edx
c0015c4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c4f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c53:	50                   	push   eax
c0015c54:	e8 13 5b ff ff       	call   c000b76c <secondsToDatetime(unsigned long long)>
c0015c59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015c5d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015c61:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015c65:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015c69:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015c6d:	89 f0                	mov    eax,esi
c0015c6f:	83 c4 20             	add    esp,0x20
c0015c72:	5b                   	pop    ebx
c0015c73:	5e                   	pop    esi
c0015c74:	ff e0                	jmp    eax

c0015c76 <RTC::~RTC()>:
c0015c76:	83 ec 0c             	sub    esp,0xc
c0015c79:	ba 10 f7 01 c0       	mov    edx,0xc001f710
c0015c7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c82:	89 10                	mov    DWORD PTR [eax],edx
c0015c84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c88:	83 ec 0c             	sub    esp,0xc
c0015c8b:	50                   	push   eax
c0015c8c:	e8 5f 58 ff ff       	call   c000b4f0 <Clock::~Clock()>
c0015c91:	83 c4 10             	add    esp,0x10
c0015c94:	90                   	nop
c0015c95:	83 c4 0c             	add    esp,0xc
c0015c98:	c3                   	ret    
c0015c99:	90                   	nop

c0015c9a <RTC::~RTC()>:
c0015c9a:	83 ec 0c             	sub    esp,0xc
c0015c9d:	83 ec 0c             	sub    esp,0xc
c0015ca0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ca4:	e8 cd ff ff ff       	call   c0015c76 <RTC::~RTC()>
c0015ca9:	83 c4 10             	add    esp,0x10
c0015cac:	83 ec 08             	sub    esp,0x8
c0015caf:	68 60 01 00 00       	push   0x160
c0015cb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cb8:	e8 07 48 ff ff       	call   c000a4c4 <operator delete(void*, unsigned long)>
c0015cbd:	83 c4 10             	add    esp,0x10
c0015cc0:	83 c4 0c             	add    esp,0xc
c0015cc3:	c3                   	ret    

c0015cc4 <RTC::get_update_in_progress_flag()>:
c0015cc4:	83 ec 14             	sub    esp,0x14
c0015cc7:	6a 0a                	push   0xa
c0015cc9:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015ccf:	e8 38 12 ff ff       	call   c0006f0c <Computer::readCMOS(unsigned char)>
c0015cd4:	83 c4 1c             	add    esp,0x1c
c0015cd7:	c0 e8 07             	shr    al,0x7
c0015cda:	c3                   	ret    
c0015cdb:	90                   	nop

c0015cdc <RTC::completeRTCRefresh()>:
c0015cdc:	55                   	push   ebp
c0015cdd:	57                   	push   edi
c0015cde:	56                   	push   esi
c0015cdf:	53                   	push   ebx
c0015ce0:	83 ec 2c             	sub    esp,0x2c
c0015ce3:	8b 1d 8c 54 02 c0    	mov    ebx,DWORD PTR ds:0xc002548c
c0015ce9:	83 ec 0c             	sub    esp,0xc
c0015cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015cf0:	e8 cf ff ff ff       	call   c0015cc4 <RTC::get_update_in_progress_flag()>
c0015cf5:	83 c4 10             	add    esp,0x10
c0015cf8:	84 c0                	test   al,al
c0015cfa:	74 0e                	je     c0015d0a <RTC::completeRTCRefresh()+0x2e>
c0015cfc:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015d02:	3b 05 8c 54 02 c0    	cmp    eax,DWORD PTR ds:0xc002548c
c0015d08:	73 df                	jae    c0015ce9 <RTC::completeRTCRefresh()+0xd>
c0015d0a:	55                   	push   ebp
c0015d0b:	55                   	push   ebp
c0015d0c:	6a 00                	push   0x0
c0015d0e:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015d14:	e8 f3 11 ff ff       	call   c0006f0c <Computer::readCMOS(unsigned char)>
c0015d19:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015d1d:	58                   	pop    eax
c0015d1e:	5a                   	pop    edx
c0015d1f:	6a 02                	push   0x2
c0015d21:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015d27:	e8 e0 11 ff ff       	call   c0006f0c <Computer::readCMOS(unsigned char)>
c0015d2c:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015d30:	59                   	pop    ecx
c0015d31:	5b                   	pop    ebx
c0015d32:	6a 04                	push   0x4
c0015d34:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015d3a:	e8 cd 11 ff ff       	call   c0006f0c <Computer::readCMOS(unsigned char)>
c0015d3f:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015d43:	5e                   	pop    esi
c0015d44:	5f                   	pop    edi
c0015d45:	6a 07                	push   0x7
c0015d47:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015d4d:	e8 ba 11 ff ff       	call   c0006f0c <Computer::readCMOS(unsigned char)>
c0015d52:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015d56:	5d                   	pop    ebp
c0015d57:	58                   	pop    eax
c0015d58:	6a 08                	push   0x8
c0015d5a:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015d60:	e8 a7 11 ff ff       	call   c0006f0c <Computer::readCMOS(unsigned char)>
c0015d65:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015d69:	58                   	pop    eax
c0015d6a:	5a                   	pop    edx
c0015d6b:	6a 09                	push   0x9
c0015d6d:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015d73:	e8 94 11 ff ff       	call   c0006f0c <Computer::readCMOS(unsigned char)>
c0015d78:	83 c4 10             	add    esp,0x10
c0015d7b:	0f b6 e8             	movzx  ebp,al
c0015d7e:	8b 1d 8c 54 02 c0    	mov    ebx,DWORD PTR ds:0xc002548c
c0015d84:	83 ec 0c             	sub    esp,0xc
c0015d87:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015d8b:	e8 34 ff ff ff       	call   c0015cc4 <RTC::get_update_in_progress_flag()>
c0015d90:	83 c4 10             	add    esp,0x10
c0015d93:	84 c0                	test   al,al
c0015d95:	74 0e                	je     c0015da5 <RTC::completeRTCRefresh()+0xc9>
c0015d97:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015d9d:	3b 05 8c 54 02 c0    	cmp    eax,DWORD PTR ds:0xc002548c
c0015da3:	73 df                	jae    c0015d84 <RTC::completeRTCRefresh()+0xa8>
c0015da5:	50                   	push   eax
c0015da6:	50                   	push   eax
c0015da7:	6a 00                	push   0x0
c0015da9:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015daf:	e8 58 11 ff ff       	call   c0006f0c <Computer::readCMOS(unsigned char)>
c0015db4:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015db8:	58                   	pop    eax
c0015db9:	5a                   	pop    edx
c0015dba:	6a 02                	push   0x2
c0015dbc:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015dc2:	e8 45 11 ff ff       	call   c0006f0c <Computer::readCMOS(unsigned char)>
c0015dc7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015dcb:	59                   	pop    ecx
c0015dcc:	5b                   	pop    ebx
c0015dcd:	6a 04                	push   0x4
c0015dcf:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015dd5:	e8 32 11 ff ff       	call   c0006f0c <Computer::readCMOS(unsigned char)>
c0015dda:	5e                   	pop    esi
c0015ddb:	88 c3                	mov    bl,al
c0015ddd:	5f                   	pop    edi
c0015dde:	6a 07                	push   0x7
c0015de0:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015de6:	e8 21 11 ff ff       	call   c0006f0c <Computer::readCMOS(unsigned char)>
c0015deb:	89 c6                	mov    esi,eax
c0015ded:	58                   	pop    eax
c0015dee:	5a                   	pop    edx
c0015def:	6a 08                	push   0x8
c0015df1:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015df7:	e8 10 11 ff ff       	call   c0006f0c <Computer::readCMOS(unsigned char)>
c0015dfc:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015e00:	59                   	pop    ecx
c0015e01:	5f                   	pop    edi
c0015e02:	6a 09                	push   0x9
c0015e04:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015e0a:	e8 fd 10 ff ff       	call   c0006f0c <Computer::readCMOS(unsigned char)>
c0015e0f:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015e13:	0f b6 f8             	movzx  edi,al
c0015e16:	83 c4 10             	add    esp,0x10
c0015e19:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015e1d:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015e21:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015e25:	89 f1                	mov    ecx,esi
c0015e27:	0f 94 c0             	sete   al
c0015e2a:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015e2e:	0f 94 c2             	sete   dl
c0015e31:	21 d0                	and    eax,edx
c0015e33:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015e37:	0f 94 c2             	sete   dl
c0015e3a:	21 c2                	and    edx,eax
c0015e3c:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015e40:	0f 94 c0             	sete   al
c0015e43:	21 d0                	and    eax,edx
c0015e45:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015e49:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015e4d:	0f 94 c1             	sete   cl
c0015e50:	84 c8                	test   al,cl
c0015e52:	75 29                	jne    c0015e7d <RTC::completeRTCRefresh()+0x1a1>
c0015e54:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015e58:	89 fd                	mov    ebp,edi
c0015e5a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015e5e:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015e62:	89 f0                	mov    eax,esi
c0015e64:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015e68:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015e6c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015e70:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015e74:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015e78:	e9 01 ff ff ff       	jmp    c0015d7e <RTC::completeRTCRefresh()+0xa2>
c0015e7d:	39 fd                	cmp    ebp,edi
c0015e7f:	75 d3                	jne    c0015e54 <RTC::completeRTCRefresh()+0x178>
c0015e81:	55                   	push   ebp
c0015e82:	55                   	push   ebp
c0015e83:	6a 0b                	push   0xb
c0015e85:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015e8b:	e8 7c 10 ff ff       	call   c0006f0c <Computer::readCMOS(unsigned char)>
c0015e90:	83 c4 10             	add    esp,0x10
c0015e93:	89 c5                	mov    ebp,eax
c0015e95:	a8 04                	test   al,0x4
c0015e97:	75 78                	jne    c0015f11 <RTC::completeRTCRefresh()+0x235>
c0015e99:	b1 0a                	mov    cl,0xa
c0015e9b:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015e9f:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015ea3:	83 e2 0f             	and    edx,0xf
c0015ea6:	c0 e8 04             	shr    al,0x4
c0015ea9:	c1 ef 04             	shr    edi,0x4
c0015eac:	f6 e1                	mul    cl
c0015eae:	6b ff 0a             	imul   edi,edi,0xa
c0015eb1:	01 d0                	add    eax,edx
c0015eb3:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015eb7:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0015ebb:	83 e2 0f             	and    edx,0xf
c0015ebe:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015ec2:	c0 e8 04             	shr    al,0x4
c0015ec5:	f6 e1                	mul    cl
c0015ec7:	01 d0                	add    eax,edx
c0015ec9:	88 da                	mov    dl,bl
c0015ecb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015ecf:	83 e2 0f             	and    edx,0xf
c0015ed2:	88 d8                	mov    al,bl
c0015ed4:	83 e3 80             	and    ebx,0xffffff80
c0015ed7:	c0 e8 04             	shr    al,0x4
c0015eda:	83 e0 07             	and    eax,0x7
c0015edd:	f6 e1                	mul    cl
c0015edf:	01 d0                	add    eax,edx
c0015ee1:	89 f2                	mov    edx,esi
c0015ee3:	09 c3                	or     ebx,eax
c0015ee5:	83 e2 0f             	and    edx,0xf
c0015ee8:	89 f0                	mov    eax,esi
c0015eea:	c0 e8 04             	shr    al,0x4
c0015eed:	f6 e1                	mul    cl
c0015eef:	8d 34 02             	lea    esi,[edx+eax*1]
c0015ef2:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015ef6:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015efa:	83 e2 0f             	and    edx,0xf
c0015efd:	c0 e8 04             	shr    al,0x4
c0015f00:	f6 e1                	mul    cl
c0015f02:	01 d0                	add    eax,edx
c0015f04:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0015f08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015f0c:	83 e0 0f             	and    eax,0xf
c0015f0f:	01 c7                	add    edi,eax
c0015f11:	83 e5 02             	and    ebp,0x2
c0015f14:	75 14                	jne    c0015f2a <RTC::completeRTCRefresh()+0x24e>
c0015f16:	84 db                	test   bl,bl
c0015f18:	79 10                	jns    c0015f2a <RTC::completeRTCRefresh()+0x24e>
c0015f1a:	83 e3 7f             	and    ebx,0x7f
c0015f1d:	b9 18 00 00 00       	mov    ecx,0x18
c0015f22:	8d 43 0c             	lea    eax,[ebx+0xc]
c0015f25:	99                   	cdq    
c0015f26:	f7 f9                	idiv   ecx
c0015f28:	88 d3                	mov    bl,dl
c0015f2a:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0015f30:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0015f36:	77 06                	ja     c0015f3e <RTC::completeRTCRefresh()+0x262>
c0015f38:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0015f3e:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0015f43:	31 d2                	xor    edx,edx
c0015f45:	c1 e1 10             	shl    ecx,0x10
c0015f48:	89 d7                	mov    edi,edx
c0015f4a:	c1 e5 10             	shl    ebp,0x10
c0015f4d:	31 c0                	xor    eax,eax
c0015f4f:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0015f55:	09 cf                	or     edi,ecx
c0015f57:	89 fa                	mov    edx,edi
c0015f59:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0015f5d:	88 da                	mov    dl,bl
c0015f5f:	89 f3                	mov    ebx,esi
c0015f61:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0015f65:	88 d8                	mov    al,bl
c0015f67:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0015f6b:	0f b7 c8             	movzx  ecx,ax
c0015f6e:	09 e9                	or     ecx,ebp
c0015f70:	89 c8                	mov    eax,ecx
c0015f72:	51                   	push   ecx
c0015f73:	51                   	push   ecx
c0015f74:	52                   	push   edx
c0015f75:	50                   	push   eax
c0015f76:	e8 64 56 ff ff       	call   c000b5df <datetimeToSeconds(datetime_t)>
c0015f7b:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0015f7f:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0015f85:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0015f8b:	83 c4 3c             	add    esp,0x3c
c0015f8e:	5b                   	pop    ebx
c0015f8f:	5e                   	pop    esi
c0015f90:	5f                   	pop    edi
c0015f91:	5d                   	pop    ebp
c0015f92:	c3                   	ret    
c0015f93:	90                   	nop

c0015f94 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0015f94:	55                   	push   ebp
c0015f95:	57                   	push   edi
c0015f96:	56                   	push   esi
c0015f97:	53                   	push   ebx
c0015f98:	83 ec 30             	sub    esp,0x30
c0015f9b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015f9f:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0015fa3:	6a 00                	push   0x0
c0015fa5:	6a 00                	push   0x0
c0015fa7:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015fad:	e8 70 10 ff ff       	call   c0007022 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015fb2:	83 c4 0c             	add    esp,0xc
c0015fb5:	6a 00                	push   0x0
c0015fb7:	6a 02                	push   0x2
c0015fb9:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015fbf:	e8 5e 10 ff ff       	call   c0007022 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015fc4:	31 d2                	xor    edx,edx
c0015fc6:	89 f9                	mov    ecx,edi
c0015fc8:	89 f8                	mov    eax,edi
c0015fca:	c1 e9 10             	shr    ecx,0x10
c0015fcd:	0f b6 c4             	movzx  eax,ah
c0015fd0:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0015fd4:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0015fd8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015fdc:	b9 64 00 00 00       	mov    ecx,0x64
c0015fe1:	89 f0                	mov    eax,esi
c0015fe3:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0015fe7:	89 f0                	mov    eax,esi
c0015fe9:	0f b6 c4             	movzx  eax,ah
c0015fec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015ff0:	89 f0                	mov    eax,esi
c0015ff2:	c1 e8 10             	shr    eax,0x10
c0015ff5:	66 f7 f1             	div    cx
c0015ff8:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0015ffd:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0016002:	59                   	pop    ecx
c0016003:	5b                   	pop    ebx
c0016004:	89 fb                	mov    ebx,edi
c0016006:	6a 0b                	push   0xb
c0016008:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c001600e:	e8 f9 0e ff ff       	call   c0006f0c <Computer::readCMOS(unsigned char)>
c0016013:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0016017:	83 c4 10             	add    esp,0x10
c001601a:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c001601f:	75 74                	jne    c0016095 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0016021:	b2 0a                	mov    dl,0xa
c0016023:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016027:	0f b6 c1             	movzx  eax,cl
c001602a:	f6 f2                	div    dl
c001602c:	88 c3                	mov    bl,al
c001602e:	88 e0                	mov    al,ah
c0016030:	c1 e3 04             	shl    ebx,0x4
c0016033:	09 c3                	or     ebx,eax
c0016035:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001603a:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c001603e:	f6 f2                	div    dl
c0016040:	88 c1                	mov    cl,al
c0016042:	88 e0                	mov    al,ah
c0016044:	c1 e1 04             	shl    ecx,0x4
c0016047:	09 c1                	or     ecx,eax
c0016049:	89 f8                	mov    eax,edi
c001604b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001604f:	0f b6 c0             	movzx  eax,al
c0016052:	f6 f2                	div    dl
c0016054:	88 c3                	mov    bl,al
c0016056:	88 e0                	mov    al,ah
c0016058:	c1 e3 04             	shl    ebx,0x4
c001605b:	09 c3                	or     ebx,eax
c001605d:	89 f0                	mov    eax,esi
c001605f:	0f b6 c0             	movzx  eax,al
c0016062:	f6 f2                	div    dl
c0016064:	88 c1                	mov    cl,al
c0016066:	88 e0                	mov    al,ah
c0016068:	c1 e1 04             	shl    ecx,0x4
c001606b:	09 c1                	or     ecx,eax
c001606d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016072:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c0016076:	f6 f2                	div    dl
c0016078:	88 c1                	mov    cl,al
c001607a:	88 e0                	mov    al,ah
c001607c:	c1 e1 04             	shl    ecx,0x4
c001607f:	09 c1                	or     ecx,eax
c0016081:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c0016086:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001608a:	f6 f2                	div    dl
c001608c:	89 c5                	mov    ebp,eax
c001608e:	88 e0                	mov    al,ah
c0016090:	c1 e5 04             	shl    ebp,0x4
c0016093:	09 c5                	or     ebp,eax
c0016095:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c001609a:	75 17                	jne    c00160b3 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c001609c:	80 fb 0b             	cmp    bl,0xb
c001609f:	76 0c                	jbe    c00160ad <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c00160a1:	80 eb 0c             	sub    bl,0xc
c00160a4:	75 02                	jne    c00160a8 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c00160a6:	b3 0c                	mov    bl,0xc
c00160a8:	83 cb 80             	or     ebx,0xffffff80
c00160ab:	eb 06                	jmp    c00160b3 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00160ad:	84 db                	test   bl,bl
c00160af:	75 02                	jne    c00160b3 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00160b1:	b3 0c                	mov    bl,0xc
c00160b3:	0f b6 db             	movzx  ebx,bl
c00160b6:	50                   	push   eax
c00160b7:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00160bc:	50                   	push   eax
c00160bd:	6a 00                	push   0x0
c00160bf:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c00160c5:	e8 58 0f ff ff       	call   c0007022 <Computer::writeCMOS(unsigned char, unsigned char)>
c00160ca:	83 c4 0c             	add    esp,0xc
c00160cd:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00160d2:	50                   	push   eax
c00160d3:	6a 02                	push   0x2
c00160d5:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c00160db:	e8 42 0f ff ff       	call   c0007022 <Computer::writeCMOS(unsigned char, unsigned char)>
c00160e0:	83 c4 0c             	add    esp,0xc
c00160e3:	53                   	push   ebx
c00160e4:	6a 04                	push   0x4
c00160e6:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c00160ec:	e8 31 0f ff ff       	call   c0007022 <Computer::writeCMOS(unsigned char, unsigned char)>
c00160f1:	83 c4 0c             	add    esp,0xc
c00160f4:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00160f9:	50                   	push   eax
c00160fa:	6a 07                	push   0x7
c00160fc:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0016102:	e8 1b 0f ff ff       	call   c0007022 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016107:	83 c4 0c             	add    esp,0xc
c001610a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001610f:	50                   	push   eax
c0016110:	6a 08                	push   0x8
c0016112:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0016118:	e8 05 0f ff ff       	call   c0007022 <Computer::writeCMOS(unsigned char, unsigned char)>
c001611d:	83 c4 0c             	add    esp,0xc
c0016120:	89 e8                	mov    eax,ebp
c0016122:	0f b6 e8             	movzx  ebp,al
c0016125:	55                   	push   ebp
c0016126:	6a 09                	push   0x9
c0016128:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c001612e:	e8 ef 0e ff ff       	call   c0007022 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016133:	5a                   	pop    edx
c0016134:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016138:	e8 9f fb ff ff       	call   c0015cdc <RTC::completeRTCRefresh()>
c001613d:	83 c4 3c             	add    esp,0x3c
c0016140:	b0 01                	mov    al,0x1
c0016142:	5b                   	pop    ebx
c0016143:	5e                   	pop    esi
c0016144:	5f                   	pop    edi
c0016145:	5d                   	pop    ebp
c0016146:	c3                   	ret    

c0016147 <rtcIRQHandler(regs*, void*)>:
c0016147:	53                   	push   ebx
c0016148:	83 ec 10             	sub    esp,0x10
c001614b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001614f:	6a 0c                	push   0xc
c0016151:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0016157:	e8 b0 0d ff ff       	call   c0006f0c <Computer::readCMOS(unsigned char)>
c001615c:	83 c4 10             	add    esp,0x10
c001615f:	84 c0                	test   al,al
c0016161:	79 24                	jns    c0016187 <rtcIRQHandler(regs*, void*)+0x40>
c0016163:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001616a:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0016171:	66 ff 05 14 62 02 c0 	inc    WORD PTR ds:0xc0026214
c0016178:	75 0d                	jne    c0016187 <rtcIRQHandler(regs*, void*)+0x40>
c001617a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001617e:	83 c4 08             	add    esp,0x8
c0016181:	5b                   	pop    ebx
c0016182:	e9 55 fb ff ff       	jmp    c0015cdc <RTC::completeRTCRefresh()>
c0016187:	83 c4 08             	add    esp,0x8
c001618a:	5b                   	pop    ebx
c001618b:	c3                   	ret    

c001618c <RTC::RTC()>:
c001618c:	83 ec 1c             	sub    esp,0x1c
c001618f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016193:	83 ec 08             	sub    esp,0x8
c0016196:	68 f3 f6 01 c0       	push   0xc001f6f3
c001619b:	50                   	push   eax
c001619c:	e8 19 53 ff ff       	call   c000b4ba <Clock::Clock(char const*)>
c00161a1:	83 c4 10             	add    esp,0x10
c00161a4:	ba 10 f7 01 c0       	mov    edx,0xc001f710
c00161a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161ad:	89 10                	mov    DWORD PTR [eax],edx
c00161af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161b3:	83 ec 0c             	sub    esp,0xc
c00161b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00161ba:	6a 01                	push   0x1
c00161bc:	68 47 61 01 c0       	push   0xc0016147
c00161c1:	6a 08                	push   0x8
c00161c3:	50                   	push   eax
c00161c4:	e8 db 57 ff ff       	call   c000b9a4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00161c9:	83 c4 20             	add    esp,0x20
c00161cc:	89 c2                	mov    edx,eax
c00161ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161d2:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00161d8:	fa                   	cli    
c00161d9:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00161de:	40                   	inc    eax
c00161df:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00161e4:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c00161e9:	83 ec 08             	sub    esp,0x8
c00161ec:	6a 0b                	push   0xb
c00161ee:	50                   	push   eax
c00161ef:	e8 18 0d ff ff       	call   c0006f0c <Computer::readCMOS(unsigned char)>
c00161f4:	83 c4 10             	add    esp,0x10
c00161f7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00161fb:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0016200:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0016204:	83 ca 10             	or     edx,0x10
c0016207:	81 e2 ff 00 00 00    	and    edx,0xff
c001620d:	83 ec 04             	sub    esp,0x4
c0016210:	52                   	push   edx
c0016211:	6a 0b                	push   0xb
c0016213:	50                   	push   eax
c0016214:	e8 09 0e ff ff       	call   c0007022 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016219:	83 c4 10             	add    esp,0x10
c001621c:	83 ec 0c             	sub    esp,0xc
c001621f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016223:	e8 b4 fa ff ff       	call   c0015cdc <RTC::completeRTCRefresh()>
c0016228:	83 c4 10             	add    esp,0x10
c001622b:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0016230:	48                   	dec    eax
c0016231:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0016236:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001623b:	85 c0                	test   eax,eax
c001623d:	75 01                	jne    c0016240 <RTC::RTC()+0xb4>
c001623f:	fb                   	sti    
c0016240:	90                   	nop
c0016241:	83 c4 1c             	add    esp,0x1c
c0016244:	c3                   	ret    
c0016245:	66 90                	xchg   ax,ax
c0016247:	90                   	nop

c0016248 <HalConsoleScroll(int, int)>:
c0016248:	83 ec 10             	sub    esp,0x10
c001624b:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0016253:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001625b:	90                   	nop
c001625c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0016261:	0f 8f e1 00 00 00    	jg     c0016348 <HalConsoleScroll(int, int)+0x100>
c0016267:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001626f:	90                   	nop
c0016270:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0016278:	0f 8f be 00 00 00    	jg     c001633c <HalConsoleScroll(int, int)+0xf4>
c001627e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016282:	89 d0                	mov    eax,edx
c0016284:	c1 e0 02             	shl    eax,0x2
c0016287:	01 d0                	add    eax,edx
c0016289:	c1 e0 05             	shl    eax,0x5
c001628c:	89 c2                	mov    edx,eax
c001628e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016292:	01 d0                	add    eax,edx
c0016294:	89 c2                	mov    edx,eax
c0016296:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001629a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001629d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00162a1:	89 d0                	mov    eax,edx
c00162a3:	c1 e0 02             	shl    eax,0x2
c00162a6:	01 d0                	add    eax,edx
c00162a8:	c1 e0 05             	shl    eax,0x5
c00162ab:	89 c2                	mov    edx,eax
c00162ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162b1:	01 d0                	add    eax,edx
c00162b3:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c00162b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162bd:	01 c2                	add    edx,eax
c00162bf:	8a 01                	mov    al,BYTE PTR [ecx]
c00162c1:	88 02                	mov    BYTE PTR [edx],al
c00162c3:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00162c8:	75 66                	jne    c0016330 <HalConsoleScroll(int, int)+0xe8>
c00162ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162ce:	83 e0 01             	and    eax,0x1
c00162d1:	74 39                	je     c001630c <HalConsoleScroll(int, int)+0xc4>
c00162d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00162d7:	83 e0 0f             	and    eax,0xf
c00162da:	88 c2                	mov    dl,al
c00162dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00162e0:	c1 e0 04             	shl    eax,0x4
c00162e3:	88 d1                	mov    cl,dl
c00162e5:	09 c1                	or     ecx,eax
c00162e7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00162eb:	89 d0                	mov    eax,edx
c00162ed:	c1 e0 02             	shl    eax,0x2
c00162f0:	01 d0                	add    eax,edx
c00162f2:	c1 e0 05             	shl    eax,0x5
c00162f5:	89 c2                	mov    edx,eax
c00162f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162fb:	01 d0                	add    eax,edx
c00162fd:	89 c2                	mov    edx,eax
c00162ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016303:	01 d0                	add    eax,edx
c0016305:	88 ca                	mov    dl,cl
c0016307:	88 10                	mov    BYTE PTR [eax],dl
c0016309:	eb 25                	jmp    c0016330 <HalConsoleScroll(int, int)+0xe8>
c001630b:	90                   	nop
c001630c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016310:	89 d0                	mov    eax,edx
c0016312:	c1 e0 02             	shl    eax,0x2
c0016315:	01 d0                	add    eax,edx
c0016317:	c1 e0 05             	shl    eax,0x5
c001631a:	89 c2                	mov    edx,eax
c001631c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016320:	01 d0                	add    eax,edx
c0016322:	89 c2                	mov    edx,eax
c0016324:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016328:	01 d0                	add    eax,edx
c001632a:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001632d:	8d 76 00             	lea    esi,[esi+0x0]
c0016330:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0016334:	e9 37 ff ff ff       	jmp    c0016270 <HalConsoleScroll(int, int)+0x28>
c0016339:	8d 76 00             	lea    esi,[esi+0x0]
c001633c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016340:	e9 17 ff ff ff       	jmp    c001625c <HalConsoleScroll(int, int)+0x14>
c0016345:	8d 76 00             	lea    esi,[esi+0x0]
c0016348:	90                   	nop
c0016349:	83 c4 10             	add    esp,0x10
c001634c:	c3                   	ret    
c001634d:	8d 76 00             	lea    esi,[esi+0x0]

c0016350 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0016350:	83 ec 14             	sub    esp,0x14
c0016353:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016357:	88 04 24             	mov    BYTE PTR [esp],al
c001635a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001635d:	25 ff 00 00 00       	and    eax,0xff
c0016362:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016366:	89 d1                	mov    ecx,edx
c0016368:	83 e1 0f             	and    ecx,0xf
c001636b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001636f:	c1 e2 04             	shl    edx,0x4
c0016372:	81 e2 ff 00 00 00    	and    edx,0xff
c0016378:	09 ca                	or     edx,ecx
c001637a:	c1 e2 08             	shl    edx,0x8
c001637d:	09 d0                	or     eax,edx
c001637f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0016384:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001638c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016390:	89 d0                	mov    eax,edx
c0016392:	c1 e0 02             	shl    eax,0x2
c0016395:	01 d0                	add    eax,edx
c0016397:	c1 e0 04             	shl    eax,0x4
c001639a:	89 c2                	mov    edx,eax
c001639c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00163a0:	01 d0                	add    eax,edx
c00163a2:	01 c0                	add    eax,eax
c00163a4:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00163a8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163ac:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00163b1:	66 89 02             	mov    WORD PTR [edx],ax
c00163b4:	90                   	nop
c00163b5:	83 c4 14             	add    esp,0x14
c00163b8:	c3                   	ret    
c00163b9:	8d 76 00             	lea    esi,[esi+0x0]

c00163bc <HalConsoleCursorUpdate(int, int)>:
c00163bc:	83 ec 20             	sub    esp,0x20
c00163bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00163c3:	89 c2                	mov    edx,eax
c00163c5:	89 d0                	mov    eax,edx
c00163c7:	c1 e0 02             	shl    eax,0x2
c00163ca:	01 d0                	add    eax,edx
c00163cc:	c1 e0 04             	shl    eax,0x4
c00163cf:	89 c2                	mov    edx,eax
c00163d1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00163d5:	01 d0                	add    eax,edx
c00163d7:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00163dc:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00163e3:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00163e8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00163ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163f0:	ee                   	out    dx,al
c00163f1:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00163f6:	25 ff 00 00 00       	and    eax,0xff
c00163fb:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0016402:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0016406:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001640a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001640e:	ee                   	out    dx,al
c001640f:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0016416:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001641b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001641f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016423:	ee                   	out    dx,al
c0016424:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0016429:	66 c1 e8 08          	shr    ax,0x8
c001642d:	25 ff 00 00 00       	and    eax,0xff
c0016432:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0016439:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001643d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0016441:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016445:	ee                   	out    dx,al
c0016446:	90                   	nop
c0016447:	83 c4 20             	add    esp,0x20
c001644a:	c3                   	ret    
c001644b:	90                   	nop

c001644c <FAT::getName()>:
c001644c:	b8 44 f7 01 c0       	mov    eax,0xc001f744
c0016451:	c3                   	ret    
c0016452:	66 90                	xchg   ax,ax

c0016454 <FAT::tell(void*, unsigned long long*)>:
c0016454:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016459:	75 09                	jne    c0016464 <FAT::tell(void*, unsigned long long*)+0x10>
c001645b:	b8 04 00 00 00       	mov    eax,0x4
c0016460:	c3                   	ret    
c0016461:	8d 76 00             	lea    esi,[esi+0x0]
c0016464:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016469:	75 09                	jne    c0016474 <FAT::tell(void*, unsigned long long*)+0x20>
c001646b:	b8 04 00 00 00       	mov    eax,0x4
c0016470:	c3                   	ret    
c0016471:	8d 76 00             	lea    esi,[esi+0x0]
c0016474:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016478:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001647b:	ba 00 00 00 00       	mov    edx,0x0
c0016480:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016484:	89 01                	mov    DWORD PTR [ecx],eax
c0016486:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016489:	b8 00 00 00 00       	mov    eax,0x0
c001648e:	c3                   	ret    
c001648f:	90                   	nop

c0016490 <FAT::stat(void*, unsigned long long*)>:
c0016490:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016495:	75 09                	jne    c00164a0 <FAT::stat(void*, unsigned long long*)+0x10>
c0016497:	b8 04 00 00 00       	mov    eax,0x4
c001649c:	c3                   	ret    
c001649d:	8d 76 00             	lea    esi,[esi+0x0]
c00164a0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00164a5:	75 09                	jne    c00164b0 <FAT::stat(void*, unsigned long long*)+0x20>
c00164a7:	b8 04 00 00 00       	mov    eax,0x4
c00164ac:	c3                   	ret    
c00164ad:	8d 76 00             	lea    esi,[esi+0x0]
c00164b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00164b4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00164b7:	ba 00 00 00 00       	mov    edx,0x0
c00164bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00164c0:	89 01                	mov    DWORD PTR [ecx],eax
c00164c2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00164c5:	b8 00 00 00 00       	mov    eax,0x0
c00164ca:	c3                   	ret    
c00164cb:	90                   	nop

c00164cc <FAT::~FAT()>:
c00164cc:	83 ec 0c             	sub    esp,0xc
c00164cf:	ba 90 f7 01 c0       	mov    edx,0xc001f790
c00164d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164d8:	89 10                	mov    DWORD PTR [eax],edx
c00164da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164de:	83 ec 0c             	sub    esp,0xc
c00164e1:	50                   	push   eax
c00164e2:	e8 19 44 ff ff       	call   c000a900 <Filesystem::~Filesystem()>
c00164e7:	83 c4 10             	add    esp,0x10
c00164ea:	90                   	nop
c00164eb:	83 c4 0c             	add    esp,0xc
c00164ee:	c3                   	ret    
c00164ef:	90                   	nop

c00164f0 <FAT::~FAT()>:
c00164f0:	83 ec 0c             	sub    esp,0xc
c00164f3:	83 ec 0c             	sub    esp,0xc
c00164f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164fa:	e8 cd ff ff ff       	call   c00164cc <FAT::~FAT()>
c00164ff:	83 c4 10             	add    esp,0x10
c0016502:	83 ec 08             	sub    esp,0x8
c0016505:	6a 08                	push   0x8
c0016507:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001650b:	e8 b4 3f ff ff       	call   c000a4c4 <operator delete(void*, unsigned long)>
c0016510:	83 c4 10             	add    esp,0x10
c0016513:	83 c4 0c             	add    esp,0xc
c0016516:	c3                   	ret    
c0016517:	90                   	nop

c0016518 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0016518:	83 ec 1c             	sub    esp,0x1c
c001651b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0016522:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0016527:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001652b:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c0016532:	83 f8 ff             	cmp    eax,0xffffffff
c0016535:	75 35                	jne    c001656c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0016537:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001653b:	88 c2                	mov    dl,al
c001653d:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c0016542:	01 d0                	add    eax,edx
c0016544:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016548:	8b 15 20 62 02 c0    	mov    edx,DWORD PTR ds:0xc0026220
c001654e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016552:	89 14 85 40 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9dc0],edx
c0016559:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c001655e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016562:	89 14 85 c0 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9d40],edx
c0016569:	eb 19                	jmp    c0016584 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001656b:	90                   	nop
c001656c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016570:	88 c2                	mov    dl,al
c0016572:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016576:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c001657d:	01 d0                	add    eax,edx
c001657f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016583:	90                   	nop
c0016584:	83 ec 04             	sub    esp,0x4
c0016587:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001658b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001658f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0016593:	50                   	push   eax
c0016594:	e8 bb e8 fe ff       	call   c0004e54 <f_getlabel>
c0016599:	83 c4 10             	add    esp,0x10
c001659c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00165a0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00165a5:	75 09                	jne    c00165b0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00165a7:	b8 00 00 00 00       	mov    eax,0x0
c00165ac:	eb 0a                	jmp    c00165b8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00165ae:	66 90                	xchg   ax,ax
c00165b0:	b8 01 00 00 00       	mov    eax,0x1
c00165b5:	8d 76 00             	lea    esi,[esi+0x0]
c00165b8:	83 c4 1c             	add    esp,0x1c
c00165bb:	c3                   	ret    

c00165bc <FAT::setlabel(LogicalDisk*, int, char*)>:
c00165bc:	57                   	push   edi
c00165bd:	83 ec 58             	sub    esp,0x58
c00165c0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00165c8:	8d 54 24 10          	lea    edx,[esp+0x10]
c00165cc:	b8 00 00 00 00       	mov    eax,0x0
c00165d1:	b9 0f 00 00 00       	mov    ecx,0xf
c00165d6:	fc                   	cld    
c00165d7:	89 d7                	mov    edi,edx
c00165d9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00165db:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00165df:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c00165e6:	83 f8 ff             	cmp    eax,0xffffffff
c00165e9:	75 35                	jne    c0016620 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c00165eb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00165ef:	88 c2                	mov    dl,al
c00165f1:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c00165f6:	01 d0                	add    eax,edx
c00165f8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00165fc:	8b 15 20 62 02 c0    	mov    edx,DWORD PTR ds:0xc0026220
c0016602:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016606:	89 14 85 40 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9dc0],edx
c001660d:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c0016612:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0016616:	89 14 85 c0 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9d40],edx
c001661d:	eb 19                	jmp    c0016638 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001661f:	90                   	nop
c0016620:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016624:	88 c2                	mov    dl,al
c0016626:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001662a:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c0016631:	01 d0                	add    eax,edx
c0016633:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016637:	90                   	nop
c0016638:	83 ec 08             	sub    esp,0x8
c001663b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001663f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016643:	50                   	push   eax
c0016644:	e8 77 a1 fe ff       	call   c00007c0 <strcat>
c0016649:	83 c4 10             	add    esp,0x10
c001664c:	83 ec 0c             	sub    esp,0xc
c001664f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016653:	50                   	push   eax
c0016654:	e8 4c e9 fe ff       	call   c0004fa5 <f_setlabel>
c0016659:	83 c4 10             	add    esp,0x10
c001665c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0016660:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0016665:	75 09                	jne    c0016670 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0016667:	b8 00 00 00 00       	mov    eax,0x0
c001666c:	eb 0a                	jmp    c0016678 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001666e:	66 90                	xchg   ax,ax
c0016670:	b8 01 00 00 00       	mov    eax,0x1
c0016675:	8d 76 00             	lea    esi,[esi+0x0]
c0016678:	83 c4 58             	add    esp,0x58
c001667b:	5f                   	pop    edi
c001667c:	c3                   	ret    
c001667d:	90                   	nop
c001667e:	66 90                	xchg   ax,ax

c0016680 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0016680:	83 ec 2c             	sub    esp,0x2c
c0016683:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001668b:	83 ec 08             	sub    esp,0x8
c001668e:	68 68 f7 01 c0       	push   0xc001f768
c0016693:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016697:	e8 44 a0 fe ff       	call   c00006e0 <strcmp>
c001669c:	83 c4 10             	add    esp,0x10
c001669f:	85 c0                	test   eax,eax
c00166a1:	0f 94 c0             	sete   al
c00166a4:	84 c0                	test   al,al
c00166a6:	74 10                	je     c00166b8 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00166a8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00166b0:	e9 b3 00 00 00       	jmp    c0016768 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00166b5:	8d 76 00             	lea    esi,[esi+0x0]
c00166b8:	83 ec 08             	sub    esp,0x8
c00166bb:	68 5a f7 01 c0       	push   0xc001f75a
c00166c0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166c4:	e8 17 a0 fe ff       	call   c00006e0 <strcmp>
c00166c9:	83 c4 10             	add    esp,0x10
c00166cc:	85 c0                	test   eax,eax
c00166ce:	0f 94 c0             	sete   al
c00166d1:	84 c0                	test   al,al
c00166d3:	74 0f                	je     c00166e4 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c00166d5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00166dd:	e9 86 00 00 00       	jmp    c0016768 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00166e2:	66 90                	xchg   ax,ax
c00166e4:	83 ec 08             	sub    esp,0x8
c00166e7:	68 60 f7 01 c0       	push   0xc001f760
c00166ec:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166f0:	e8 eb 9f fe ff       	call   c00006e0 <strcmp>
c00166f5:	83 c4 10             	add    esp,0x10
c00166f8:	85 c0                	test   eax,eax
c00166fa:	0f 94 c0             	sete   al
c00166fd:	84 c0                	test   al,al
c00166ff:	74 0b                	je     c001670c <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c0016701:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016709:	eb 5d                	jmp    c0016768 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001670b:	90                   	nop
c001670c:	83 ec 08             	sub    esp,0x8
c001670f:	68 1c d7 01 c0       	push   0xc001d71c
c0016714:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016718:	e8 c3 9f fe ff       	call   c00006e0 <strcmp>
c001671d:	83 c4 10             	add    esp,0x10
c0016720:	85 c0                	test   eax,eax
c0016722:	0f 94 c0             	sete   al
c0016725:	84 c0                	test   al,al
c0016727:	74 0b                	je     c0016734 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0016729:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0016731:	eb 35                	jmp    c0016768 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016733:	90                   	nop
c0016734:	83 ec 08             	sub    esp,0x8
c0016737:	68 66 f7 01 c0       	push   0xc001f766
c001673c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016740:	e8 9b 9f fe ff       	call   c00006e0 <strcmp>
c0016745:	83 c4 10             	add    esp,0x10
c0016748:	85 c0                	test   eax,eax
c001674a:	0f 94 c0             	sete   al
c001674d:	84 c0                	test   al,al
c001674f:	74 0b                	je     c001675c <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c0016751:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0016759:	eb 0d                	jmp    c0016768 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001675b:	90                   	nop
c001675c:	b8 08 00 00 00       	mov    eax,0x8
c0016761:	e9 ea 00 00 00       	jmp    c0016850 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016766:	66 90                	xchg   ax,ax
c0016768:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001676f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0016774:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016778:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c001677f:	83 f8 ff             	cmp    eax,0xffffffff
c0016782:	75 34                	jne    c00167b8 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c0016784:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016788:	88 c2                	mov    dl,al
c001678a:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c001678f:	01 d0                	add    eax,edx
c0016791:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016795:	8b 15 20 62 02 c0    	mov    edx,DWORD PTR ds:0xc0026220
c001679b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001679f:	89 14 85 40 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9dc0],edx
c00167a6:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c00167ab:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00167af:	89 14 85 c0 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9d40],edx
c00167b6:	eb 18                	jmp    c00167d0 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c00167b8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00167bc:	88 c2                	mov    dl,al
c00167be:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00167c2:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c00167c9:	01 d0                	add    eax,edx
c00167cb:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00167cf:	90                   	nop
c00167d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167d4:	88 04 24             	mov    BYTE PTR [esp],al
c00167d7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00167db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00167df:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00167e7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00167ec:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00167f4:	83 ec 0c             	sub    esp,0xc
c00167f7:	68 00 20 00 00       	push   0x2000
c00167fc:	e8 20 10 ff ff       	call   c0007821 <malloc>
c0016801:	83 c4 10             	add    esp,0x10
c0016804:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016808:	68 00 20 00 00       	push   0x2000
c001680d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016811:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016815:	50                   	push   eax
c0016816:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001681a:	50                   	push   eax
c001681b:	e8 75 ea fe ff       	call   c0005295 <f_mkfs>
c0016820:	83 c4 10             	add    esp,0x10
c0016823:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016827:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001682c:	75 0a                	jne    c0016838 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001682e:	b8 00 00 00 00       	mov    eax,0x0
c0016833:	eb 1b                	jmp    c0016850 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016835:	8d 76 00             	lea    esi,[esi+0x0]
c0016838:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001683d:	75 09                	jne    c0016848 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001683f:	b8 09 00 00 00       	mov    eax,0x9
c0016844:	eb 0a                	jmp    c0016850 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016846:	66 90                	xchg   ax,ax
c0016848:	b8 01 00 00 00       	mov    eax,0x1
c001684d:	8d 76 00             	lea    esi,[esi+0x0]
c0016850:	83 c4 2c             	add    esp,0x2c
c0016853:	c3                   	ret    

c0016854 <FAT::tryMount(LogicalDisk*, int)>:
c0016854:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001685a:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c001685f:	83 f8 14             	cmp    eax,0x14
c0016862:	75 18                	jne    c001687c <FAT::tryMount(LogicalDisk*, int)+0x28>
c0016864:	83 ec 0c             	sub    esp,0xc
c0016867:	68 6c f7 01 c0       	push   0xc001f76c
c001686c:	e8 52 9a ff ff       	call   c00102c3 <KePanic(char const*)>
c0016871:	83 c4 10             	add    esp,0x10
c0016874:	b0 00                	mov    al,0x0
c0016876:	e9 e9 01 00 00       	jmp    c0016a64 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001687b:	90                   	nop
c001687c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0016883:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016889:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001688f:	3d 00 02 00 00       	cmp    eax,0x200
c0016894:	74 0a                	je     c00168a0 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0016896:	b0 00                	mov    al,0x0
c0016898:	e9 c7 01 00 00       	jmp    c0016a64 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001689d:	8d 76 00             	lea    esi,[esi+0x0]
c00168a0:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00168a8:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00168af:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c00168b6:	83 f8 ff             	cmp    eax,0xffffffff
c00168b9:	74 09                	je     c00168c4 <FAT::tryMount(LogicalDisk*, int)+0x70>
c00168bb:	b0 01                	mov    al,0x1
c00168bd:	e9 a2 01 00 00       	jmp    c0016a64 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00168c2:	66 90                	xchg   ax,ax
c00168c4:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00168ce:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00168d6:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00168dd:	88 c2                	mov    dl,al
c00168df:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c00168e4:	01 d0                	add    eax,edx
c00168e6:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00168ed:	8b 15 20 62 02 c0    	mov    edx,DWORD PTR ds:0xc0026220
c00168f3:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00168fa:	89 14 85 40 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9dc0],edx
c0016901:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c0016906:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001690d:	89 14 85 c0 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9d40],edx
c0016914:	83 ec 0c             	sub    esp,0xc
c0016917:	68 34 02 00 00       	push   0x234
c001691c:	e8 00 0f ff ff       	call   c0007821 <malloc>
c0016921:	83 c4 10             	add    esp,0x10
c0016924:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001692b:	83 ec 04             	sub    esp,0x4
c001692e:	6a 00                	push   0x0
c0016930:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016937:	50                   	push   eax
c0016938:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001693f:	e8 77 d1 fe ff       	call   c0003abb <f_mount>
c0016944:	83 c4 10             	add    esp,0x10
c0016947:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001694e:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0016956:	74 1c                	je     c0016974 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0016958:	83 ec 0c             	sub    esp,0xc
c001695b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016962:	e8 da 0e ff ff       	call   c0007841 <rfree>
c0016967:	83 c4 10             	add    esp,0x10
c001696a:	b0 00                	mov    al,0x0
c001696c:	e9 f3 00 00 00       	jmp    c0016a64 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016971:	8d 76 00             	lea    esi,[esi+0x0]
c0016974:	83 ec 04             	sub    esp,0x4
c0016977:	68 00 01 00 00       	push   0x100
c001697c:	6a 00                	push   0x0
c001697e:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016985:	50                   	push   eax
c0016986:	e8 45 9b fe ff       	call   c00004d0 <memset>
c001698b:	83 c4 10             	add    esp,0x10
c001698e:	83 ec 08             	sub    esp,0x8
c0016991:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016998:	50                   	push   eax
c0016999:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00169a0:	50                   	push   eax
c00169a1:	e8 1a 9e fe ff       	call   c00007c0 <strcat>
c00169a6:	83 c4 10             	add    esp,0x10
c00169a9:	83 ec 08             	sub    esp,0x8
c00169ac:	68 7a f7 01 c0       	push   0xc001f77a
c00169b1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00169b8:	50                   	push   eax
c00169b9:	e8 02 9e fe ff       	call   c00007c0 <strcat>
c00169be:	83 c4 10             	add    esp,0x10
c00169c1:	83 ec 04             	sub    esp,0x4
c00169c4:	6a 01                	push   0x1
c00169c6:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00169cd:	50                   	push   eax
c00169ce:	8d 44 24 14          	lea    eax,[esp+0x14]
c00169d2:	50                   	push   eax
c00169d3:	e8 45 d1 fe ff       	call   c0003b1d <f_open>
c00169d8:	83 c4 10             	add    esp,0x10
c00169db:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00169e2:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00169e9:	85 c0                	test   eax,eax
c00169eb:	74 0b                	je     c00169f8 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00169ed:	78 31                	js     c0016a20 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00169ef:	83 e8 04             	sub    eax,0x4
c00169f2:	83 f8 01             	cmp    eax,0x1
c00169f5:	77 29                	ja     c0016a20 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00169f7:	90                   	nop
c00169f8:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0016a00:	83 ec 0c             	sub    esp,0xc
c0016a03:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016a07:	50                   	push   eax
c0016a08:	e8 c3 d8 fe ff       	call   c00042d0 <f_close>
c0016a0d:	83 c4 10             	add    esp,0x10
c0016a10:	90                   	nop
c0016a11:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0016a19:	74 41                	je     c0016a5c <FAT::tryMount(LogicalDisk*, int)+0x208>
c0016a1b:	eb 33                	jmp    c0016a50 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0016a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0016a20:	83 ec 0c             	sub    esp,0xc
c0016a23:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016a2a:	e8 12 0e ff ff       	call   c0007841 <rfree>
c0016a2f:	83 c4 10             	add    esp,0x10
c0016a32:	83 ec 04             	sub    esp,0x4
c0016a35:	6a 00                	push   0x0
c0016a37:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016a3e:	50                   	push   eax
c0016a3f:	6a 00                	push   0x0
c0016a41:	e8 75 d0 fe ff       	call   c0003abb <f_mount>
c0016a46:	83 c4 10             	add    esp,0x10
c0016a49:	b0 00                	mov    al,0x0
c0016a4b:	eb 17                	jmp    c0016a64 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0016a50:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c0016a55:	40                   	inc    eax
c0016a56:	a3 20 62 02 c0       	mov    ds:0xc0026220,eax
c0016a5b:	90                   	nop
c0016a5c:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016a63:	90                   	nop
c0016a64:	81 c4 4c 03 00 00    	add    esp,0x34c
c0016a6a:	c3                   	ret    
c0016a6b:	90                   	nop

c0016a6c <FAT::allocateSwapfile(char const*, int)>:
c0016a6c:	55                   	push   ebp
c0016a6d:	57                   	push   edi
c0016a6e:	56                   	push   esi
c0016a6f:	53                   	push   ebx
c0016a70:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016a76:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016a81:	83 ec 0c             	sub    esp,0xc
c0016a84:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016a8b:	e8 91 0d ff ff       	call   c0007821 <malloc>
c0016a90:	83 c4 10             	add    esp,0x10
c0016a93:	89 c7                	mov    edi,eax
c0016a95:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0016a9a:	83 ec 04             	sub    esp,0x4
c0016a9d:	50                   	push   eax
c0016a9e:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016aa5:	57                   	push   edi
c0016aa6:	e8 85 40 ff ff       	call   c000ab30 <File::File(char const*, Process*)>
c0016aab:	83 c4 10             	add    esp,0x10
c0016aae:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016ab5:	83 ec 04             	sub    esp,0x4
c0016ab8:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016abc:	50                   	push   eax
c0016abd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016ac1:	50                   	push   eax
c0016ac2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016ac9:	e8 ce 43 ff ff       	call   c000ae9c <File::stat(unsigned long long*, bool*)>
c0016ace:	83 c4 10             	add    esp,0x10
c0016ad1:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016ad8:	c1 e0 14             	shl    eax,0x14
c0016adb:	89 c7                	mov    edi,eax
c0016add:	89 c5                	mov    ebp,eax
c0016adf:	c1 fd 1f             	sar    ebp,0x1f
c0016ae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ae6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016aea:	89 f9                	mov    ecx,edi
c0016aec:	31 c1                	xor    ecx,eax
c0016aee:	89 cb                	mov    ebx,ecx
c0016af0:	89 e9                	mov    ecx,ebp
c0016af2:	31 d1                	xor    ecx,edx
c0016af4:	89 ce                	mov    esi,ecx
c0016af6:	89 f0                	mov    eax,esi
c0016af8:	09 d8                	or     eax,ebx
c0016afa:	0f 84 9c 00 00 00    	je     c0016b9c <FAT::allocateSwapfile(char const*, int)+0x130>
c0016b00:	83 ec 0c             	sub    esp,0xc
c0016b03:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b0a:	e8 59 42 ff ff       	call   c000ad68 <File::unlink()>
c0016b0f:	83 c4 10             	add    esp,0x10
c0016b12:	83 ec 08             	sub    esp,0x8
c0016b15:	6a 12                	push   0x12
c0016b17:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b1e:	e8 cd 40 ff ff       	call   c000abf0 <File::open(FileOpenMode)>
c0016b23:	83 c4 10             	add    esp,0x10
c0016b26:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016b2d:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016b33:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016b3a:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016b41:	c1 e0 14             	shl    eax,0x14
c0016b44:	83 ec 04             	sub    esp,0x4
c0016b47:	6a 01                	push   0x1
c0016b49:	50                   	push   eax
c0016b4a:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016b51:	e8 df e5 fe ff       	call   c0005135 <f_expand>
c0016b56:	83 c4 10             	add    esp,0x10
c0016b59:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016b60:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b62:	83 c0 10             	add    eax,0x10
c0016b65:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b67:	83 ec 0c             	sub    esp,0xc
c0016b6a:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016b6e:	52                   	push   edx
c0016b6f:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016b73:	52                   	push   edx
c0016b74:	6a 00                	push   0x0
c0016b76:	68 00 04 00 00       	push   0x400
c0016b7b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016b82:	ff d0                	call   eax
c0016b84:	83 c4 20             	add    esp,0x20
c0016b87:	83 ec 0c             	sub    esp,0xc
c0016b8a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b91:	e8 b8 40 ff ff       	call   c000ac4e <File::close()>
c0016b96:	83 c4 10             	add    esp,0x10
c0016b99:	8d 76 00             	lea    esi,[esi+0x0]
c0016b9c:	83 ec 08             	sub    esp,0x8
c0016b9f:	6a 01                	push   0x1
c0016ba1:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016ba8:	e8 43 40 ff ff       	call   c000abf0 <File::open(FileOpenMode)>
c0016bad:	83 c4 10             	add    esp,0x10
c0016bb0:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016bb7:	8b 00                	mov    eax,DWORD PTR [eax]
c0016bb9:	83 c0 0c             	add    eax,0xc
c0016bbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0016bbe:	83 ec 0c             	sub    esp,0xc
c0016bc1:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016bc5:	52                   	push   edx
c0016bc6:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016bca:	52                   	push   edx
c0016bcb:	6a 00                	push   0x0
c0016bcd:	6a 04                	push   0x4
c0016bcf:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016bd6:	ff d0                	call   eax
c0016bd8:	83 c4 20             	add    esp,0x20
c0016bdb:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016be2:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016be8:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016bef:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016bf6:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016bf9:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016c00:	83 ec 0c             	sub    esp,0xc
c0016c03:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c0a:	e8 3f 40 ff ff       	call   c000ac4e <File::close()>
c0016c0f:	83 c4 10             	add    esp,0x10
c0016c12:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016c19:	ba 00 00 00 00       	mov    edx,0x0
c0016c1e:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016c24:	5b                   	pop    ebx
c0016c25:	5e                   	pop    esi
c0016c26:	5f                   	pop    edi
c0016c27:	5d                   	pop    ebp
c0016c28:	c3                   	ret    
c0016c29:	90                   	nop
c0016c2a:	66 90                	xchg   ax,ax

c0016c2c <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016c2c:	57                   	push   edi
c0016c2d:	56                   	push   esi
c0016c2e:	53                   	push   ebx
c0016c2f:	81 ec 50 02 00 00    	sub    esp,0x250
c0016c35:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016c3d:	74 0d                	je     c0016c4c <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016c3f:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016c47:	75 0f                	jne    c0016c58 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016c49:	8d 76 00             	lea    esi,[esi+0x0]
c0016c4c:	b8 04 00 00 00       	mov    eax,0x4
c0016c51:	e9 36 01 00 00       	jmp    c0016d8c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016c56:	66 90                	xchg   ax,ax
c0016c58:	83 ec 08             	sub    esp,0x8
c0016c5b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016c62:	50                   	push   eax
c0016c63:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016c6a:	e8 24 d9 fe ff       	call   c0004593 <f_readdir>
c0016c6f:	83 c4 10             	add    esp,0x10
c0016c72:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016c79:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016c80:	83 ec 0c             	sub    esp,0xc
c0016c83:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016c8a:	83 c0 16             	add    eax,0x16
c0016c8d:	50                   	push   eax
c0016c8e:	e8 ad 98 fe ff       	call   c0000540 <strlen>
c0016c93:	83 c4 10             	add    esp,0x10
c0016c96:	ba 00 00 00 00       	mov    edx,0x0
c0016c9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c9f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016ca3:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016caa:	25 ff 00 00 00       	and    eax,0xff
c0016caf:	83 e0 10             	and    eax,0x10
c0016cb2:	74 08                	je     c0016cbc <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016cb4:	b8 02 00 00 00       	mov    eax,0x2
c0016cb9:	eb 09                	jmp    c0016cc4 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016cbb:	90                   	nop
c0016cbc:	b8 01 00 00 00       	mov    eax,0x1
c0016cc1:	8d 76 00             	lea    esi,[esi+0x0]
c0016cc4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016cc8:	83 ec 08             	sub    esp,0x8
c0016ccb:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016cd2:	83 c0 16             	add    eax,0x16
c0016cd5:	50                   	push   eax
c0016cd6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016cda:	83 c0 10             	add    eax,0x10
c0016cdd:	50                   	push   eax
c0016cde:	e8 1d 99 fe ff       	call   c0000600 <strcpy>
c0016ce3:	83 c4 10             	add    esp,0x10
c0016ce6:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016ced:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016cf4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016cf8:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016cff:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016d06:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016d0d:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016d14:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016d1b:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016d22:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016d29:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016d30:	89 c6                	mov    esi,eax
c0016d32:	89 d7                	mov    edi,edx
c0016d34:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d36:	89 c8                	mov    eax,ecx
c0016d38:	89 fa                	mov    edx,edi
c0016d3a:	89 f3                	mov    ebx,esi
c0016d3c:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016d43:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016d4a:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016d51:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016d58:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016d5e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016d65:	84 c0                	test   al,al
c0016d67:	75 07                	jne    c0016d70 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016d69:	b8 07 00 00 00       	mov    eax,0x7
c0016d6e:	eb 1c                	jmp    c0016d8c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016d70:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016d77:	85 c0                	test   eax,eax
c0016d79:	75 09                	jne    c0016d84 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016d7b:	b8 00 00 00 00       	mov    eax,0x0
c0016d80:	eb 0a                	jmp    c0016d8c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016d82:	66 90                	xchg   ax,ax
c0016d84:	b8 01 00 00 00       	mov    eax,0x1
c0016d89:	8d 76 00             	lea    esi,[esi+0x0]
c0016d8c:	81 c4 50 02 00 00    	add    esp,0x250
c0016d92:	5b                   	pop    ebx
c0016d93:	5e                   	pop    esi
c0016d94:	5f                   	pop    edi
c0016d95:	c3                   	ret    
c0016d96:	66 90                	xchg   ax,ax

c0016d98 <FAT::read(void*, unsigned long, void*, int*)>:
c0016d98:	83 ec 1c             	sub    esp,0x1c
c0016d9b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016da0:	74 0a                	je     c0016dac <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016da2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016da7:	75 0b                	jne    c0016db4 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016da9:	8d 76 00             	lea    esi,[esi+0x0]
c0016dac:	b8 04 00 00 00       	mov    eax,0x4
c0016db1:	eb 41                	jmp    c0016df4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016db3:	90                   	nop
c0016db4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016db8:	50                   	push   eax
c0016db9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016dbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016dc1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016dc5:	e8 1e d0 fe ff       	call   c0003de8 <f_read>
c0016dca:	83 c4 10             	add    esp,0x10
c0016dcd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016dd1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016dd5:	89 c2                	mov    edx,eax
c0016dd7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ddb:	89 10                	mov    DWORD PTR [eax],edx
c0016ddd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016de1:	85 c0                	test   eax,eax
c0016de3:	75 07                	jne    c0016dec <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016de5:	b8 00 00 00 00       	mov    eax,0x0
c0016dea:	eb 08                	jmp    c0016df4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016dec:	b8 01 00 00 00       	mov    eax,0x1
c0016df1:	8d 76 00             	lea    esi,[esi+0x0]
c0016df4:	83 c4 1c             	add    esp,0x1c
c0016df7:	c3                   	ret    

c0016df8 <FAT::write(void*, unsigned long, void*, int*)>:
c0016df8:	83 ec 1c             	sub    esp,0x1c
c0016dfb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016e00:	74 0a                	je     c0016e0c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016e02:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016e07:	75 0b                	jne    c0016e14 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016e09:	8d 76 00             	lea    esi,[esi+0x0]
c0016e0c:	b8 04 00 00 00       	mov    eax,0x4
c0016e11:	eb 41                	jmp    c0016e54 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016e13:	90                   	nop
c0016e14:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016e18:	50                   	push   eax
c0016e19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016e1d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016e21:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e25:	e8 bd d1 fe ff       	call   c0003fe7 <f_write>
c0016e2a:	83 c4 10             	add    esp,0x10
c0016e2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e35:	89 c2                	mov    edx,eax
c0016e37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e3b:	89 10                	mov    DWORD PTR [eax],edx
c0016e3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e41:	85 c0                	test   eax,eax
c0016e43:	75 07                	jne    c0016e4c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016e45:	b8 00 00 00 00       	mov    eax,0x0
c0016e4a:	eb 08                	jmp    c0016e54 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016e4c:	b8 01 00 00 00       	mov    eax,0x1
c0016e51:	8d 76 00             	lea    esi,[esi+0x0]
c0016e54:	83 c4 1c             	add    esp,0x1c
c0016e57:	c3                   	ret    

c0016e58 <FAT::close(void*)>:
c0016e58:	83 ec 1c             	sub    esp,0x1c
c0016e5b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016e60:	75 0a                	jne    c0016e6c <FAT::close(void*)+0x14>
c0016e62:	b8 04 00 00 00       	mov    eax,0x4
c0016e67:	eb 3f                	jmp    c0016ea8 <FAT::close(void*)+0x50>
c0016e69:	8d 76 00             	lea    esi,[esi+0x0]
c0016e6c:	83 ec 0c             	sub    esp,0xc
c0016e6f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e73:	e8 58 d4 fe ff       	call   c00042d0 <f_close>
c0016e78:	83 c4 10             	add    esp,0x10
c0016e7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e7f:	83 ec 0c             	sub    esp,0xc
c0016e82:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e86:	e8 a6 09 ff ff       	call   c0007831 <free>
c0016e8b:	83 c4 10             	add    esp,0x10
c0016e8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e92:	85 c0                	test   eax,eax
c0016e94:	75 0a                	jne    c0016ea0 <FAT::close(void*)+0x48>
c0016e96:	b8 00 00 00 00       	mov    eax,0x0
c0016e9b:	eb 0b                	jmp    c0016ea8 <FAT::close(void*)+0x50>
c0016e9d:	8d 76 00             	lea    esi,[esi+0x0]
c0016ea0:	b8 01 00 00 00       	mov    eax,0x1
c0016ea5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ea8:	83 c4 1c             	add    esp,0x1c
c0016eab:	c3                   	ret    

c0016eac <FAT::closeDir(void*)>:
c0016eac:	83 ec 1c             	sub    esp,0x1c
c0016eaf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016eb4:	75 0a                	jne    c0016ec0 <FAT::closeDir(void*)+0x14>
c0016eb6:	b8 04 00 00 00       	mov    eax,0x4
c0016ebb:	eb 3f                	jmp    c0016efc <FAT::closeDir(void*)+0x50>
c0016ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0016ec0:	83 ec 0c             	sub    esp,0xc
c0016ec3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ec7:	e8 a5 d6 fe ff       	call   c0004571 <f_closedir>
c0016ecc:	83 c4 10             	add    esp,0x10
c0016ecf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ed3:	83 ec 0c             	sub    esp,0xc
c0016ed6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016eda:	e8 52 09 ff ff       	call   c0007831 <free>
c0016edf:	83 c4 10             	add    esp,0x10
c0016ee2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ee6:	85 c0                	test   eax,eax
c0016ee8:	75 0a                	jne    c0016ef4 <FAT::closeDir(void*)+0x48>
c0016eea:	b8 00 00 00 00       	mov    eax,0x0
c0016eef:	eb 0b                	jmp    c0016efc <FAT::closeDir(void*)+0x50>
c0016ef1:	8d 76 00             	lea    esi,[esi+0x0]
c0016ef4:	b8 01 00 00 00       	mov    eax,0x1
c0016ef9:	8d 76 00             	lea    esi,[esi+0x0]
c0016efc:	83 c4 1c             	add    esp,0x1c
c0016eff:	c3                   	ret    

c0016f00 <FAT::seek(void*, unsigned long long)>:
c0016f00:	83 ec 2c             	sub    esp,0x2c
c0016f03:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016f07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016f0b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f13:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0016f18:	75 0a                	jne    c0016f24 <FAT::seek(void*, unsigned long long)+0x24>
c0016f1a:	b8 04 00 00 00       	mov    eax,0x4
c0016f1f:	eb 33                	jmp    c0016f54 <FAT::seek(void*, unsigned long long)+0x54>
c0016f21:	8d 76 00             	lea    esi,[esi+0x0]
c0016f24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f28:	83 ec 08             	sub    esp,0x8
c0016f2b:	50                   	push   eax
c0016f2c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016f30:	e8 ca d3 fe ff       	call   c00042ff <f_lseek>
c0016f35:	83 c4 10             	add    esp,0x10
c0016f38:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016f3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016f40:	85 c0                	test   eax,eax
c0016f42:	75 08                	jne    c0016f4c <FAT::seek(void*, unsigned long long)+0x4c>
c0016f44:	b8 00 00 00 00       	mov    eax,0x0
c0016f49:	eb 09                	jmp    c0016f54 <FAT::seek(void*, unsigned long long)+0x54>
c0016f4b:	90                   	nop
c0016f4c:	b8 01 00 00 00       	mov    eax,0x1
c0016f51:	8d 76 00             	lea    esi,[esi+0x0]
c0016f54:	83 c4 2c             	add    esp,0x2c
c0016f57:	c3                   	ret    

c0016f58 <fatWrapperReadDisk>:
c0016f58:	53                   	push   ebx
c0016f59:	83 ec 18             	sub    esp,0x18
c0016f5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f60:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016f64:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016f68:	25 ff 00 00 00       	and    eax,0xff
c0016f6d:	8b 0c 85 20 54 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdabe0]
c0016f74:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016f78:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016f7c:	ba 00 00 00 00       	mov    edx,0x0
c0016f81:	83 ec 0c             	sub    esp,0xc
c0016f84:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f88:	53                   	push   ebx
c0016f89:	52                   	push   edx
c0016f8a:	50                   	push   eax
c0016f8b:	51                   	push   ecx
c0016f8c:	e8 3f 5d ff ff       	call   c000ccd0 <LogicalDisk::read(unsigned long long, int, void*)>
c0016f91:	83 c4 20             	add    esp,0x20
c0016f94:	83 c4 18             	add    esp,0x18
c0016f97:	5b                   	pop    ebx
c0016f98:	c3                   	ret    
c0016f99:	8d 76 00             	lea    esi,[esi+0x0]

c0016f9c <fatWrapperWriteDisk>:
c0016f9c:	53                   	push   ebx
c0016f9d:	83 ec 18             	sub    esp,0x18
c0016fa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fa4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016fa8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016fac:	25 ff 00 00 00       	and    eax,0xff
c0016fb1:	8b 0c 85 20 54 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdabe0]
c0016fb8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016fbc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016fc0:	ba 00 00 00 00       	mov    edx,0x0
c0016fc5:	83 ec 0c             	sub    esp,0xc
c0016fc8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fcc:	53                   	push   ebx
c0016fcd:	52                   	push   edx
c0016fce:	50                   	push   eax
c0016fcf:	51                   	push   ecx
c0016fd0:	e8 67 5d ff ff       	call   c000cd3c <LogicalDisk::write(unsigned long long, int, void*)>
c0016fd5:	83 c4 20             	add    esp,0x20
c0016fd8:	83 c4 18             	add    esp,0x18
c0016fdb:	5b                   	pop    ebx
c0016fdc:	c3                   	ret    
c0016fdd:	8d 76 00             	lea    esi,[esi+0x0]

c0016fe0 <fatWrapperIoctl>:
c0016fe0:	53                   	push   ebx
c0016fe1:	83 ec 28             	sub    esp,0x28
c0016fe4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016fe8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016fec:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0016ff0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016ff4:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0016ff9:	75 35                	jne    c0017030 <fatWrapperIoctl+0x50>
c0016ffb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016fff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017003:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017007:	25 ff 00 00 00       	and    eax,0xff
c001700c:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c0017013:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017019:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001701f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017023:	66 89 02             	mov    WORD PTR [edx],ax
c0017026:	b8 00 00 00 00       	mov    eax,0x0
c001702b:	e9 c4 00 00 00       	jmp    c00170f4 <fatWrapperIoctl+0x114>
c0017030:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0017035:	75 75                	jne    c00170ac <fatWrapperIoctl+0xcc>
c0017037:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001703b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001703f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017043:	25 ff 00 00 00       	and    eax,0xff
c0017048:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c001704f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017055:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001705b:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0017061:	89 c8                	mov    eax,ecx
c0017063:	89 da                	mov    edx,ebx
c0017065:	0f a4 c2 0a          	shld   edx,eax,0xa
c0017069:	c1 e0 0a             	shl    eax,0xa
c001706c:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017070:	81 e1 ff 00 00 00    	and    ecx,0xff
c0017076:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c001707d:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0017083:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0017089:	89 cb                	mov    ebx,ecx
c001708b:	c1 fb 1f             	sar    ebx,0x1f
c001708e:	53                   	push   ebx
c001708f:	51                   	push   ecx
c0017090:	52                   	push   edx
c0017091:	50                   	push   eax
c0017092:	e8 89 58 00 00       	call   c001c920 <__udivdi3>
c0017097:	83 c4 10             	add    esp,0x10
c001709a:	89 c2                	mov    edx,eax
c001709c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00170a0:	89 10                	mov    DWORD PTR [eax],edx
c00170a2:	b8 00 00 00 00       	mov    eax,0x0
c00170a7:	eb 4b                	jmp    c00170f4 <fatWrapperIoctl+0x114>
c00170a9:	8d 76 00             	lea    esi,[esi+0x0]
c00170ac:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00170b1:	75 09                	jne    c00170bc <fatWrapperIoctl+0xdc>
c00170b3:	b8 00 00 00 00       	mov    eax,0x0
c00170b8:	eb 3a                	jmp    c00170f4 <fatWrapperIoctl+0x114>
c00170ba:	66 90                	xchg   ax,ax
c00170bc:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00170c1:	75 19                	jne    c00170dc <fatWrapperIoctl+0xfc>
c00170c3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00170c7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00170cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00170cf:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00170d5:	b8 00 00 00 00       	mov    eax,0x0
c00170da:	eb 18                	jmp    c00170f4 <fatWrapperIoctl+0x114>
c00170dc:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00170e1:	75 09                	jne    c00170ec <fatWrapperIoctl+0x10c>
c00170e3:	b8 00 00 00 00       	mov    eax,0x0
c00170e8:	eb 0a                	jmp    c00170f4 <fatWrapperIoctl+0x114>
c00170ea:	66 90                	xchg   ax,ax
c00170ec:	b8 04 00 00 00       	mov    eax,0x4
c00170f1:	8d 76 00             	lea    esi,[esi+0x0]
c00170f4:	83 c4 28             	add    esp,0x28
c00170f7:	5b                   	pop    ebx
c00170f8:	c3                   	ret    
c00170f9:	90                   	nop
c00170fa:	66 90                	xchg   ax,ax

c00170fc <FAT::FAT()>:
c00170fc:	83 ec 1c             	sub    esp,0x1c
c00170ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017103:	83 ec 0c             	sub    esp,0xc
c0017106:	50                   	push   eax
c0017107:	e8 d0 37 ff ff       	call   c000a8dc <Filesystem::Filesystem()>
c001710c:	83 c4 10             	add    esp,0x10
c001710f:	ba 90 f7 01 c0       	mov    edx,0xc001f790
c0017114:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017118:	89 10                	mov    DWORD PTR [eax],edx
c001711a:	c7 05 20 62 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026220,0x0
c0017124:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001712c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0017131:	7f 15                	jg     c0017148 <FAT::FAT()+0x4c>
c0017133:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017137:	c7 04 85 40 62 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd9dc0],0xffffffff
c0017142:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017146:	eb e4                	jmp    c001712c <FAT::FAT()+0x30>
c0017148:	90                   	nop
c0017149:	83 c4 1c             	add    esp,0x1c
c001714c:	c3                   	ret    
c001714d:	90                   	nop
c001714e:	66 90                	xchg   ax,ax

c0017150 <FAT::fixFilepath(char*)>:
c0017150:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017154:	8a 00                	mov    al,BYTE PTR [eax]
c0017156:	3c 40                	cmp    al,0x40
c0017158:	7e 2e                	jle    c0017188 <FAT::fixFilepath(char*)+0x38>
c001715a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001715e:	8a 00                	mov    al,BYTE PTR [eax]
c0017160:	83 e8 41             	sub    eax,0x41
c0017163:	88 c2                	mov    dl,al
c0017165:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017169:	88 10                	mov    BYTE PTR [eax],dl
c001716b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001716f:	8a 00                	mov    al,BYTE PTR [eax]
c0017171:	0f be c0             	movsx  eax,al
c0017174:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c001717b:	83 c0 30             	add    eax,0x30
c001717e:	88 c2                	mov    dl,al
c0017180:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017184:	88 10                	mov    BYTE PTR [eax],dl
c0017186:	66 90                	xchg   ax,ax
c0017188:	90                   	nop
c0017189:	c3                   	ret    
c001718a:	66 90                	xchg   ax,ax

c001718c <FAT::open(char const*, void**, FileOpenMode)>:
c001718c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017192:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001719a:	74 0c                	je     c00171a8 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001719c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00171a4:	75 0e                	jne    c00171b4 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c00171a6:	66 90                	xchg   ax,ax
c00171a8:	b8 04 00 00 00       	mov    eax,0x4
c00171ad:	e9 0a 01 00 00       	jmp    c00172bc <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00171b2:	66 90                	xchg   ax,ax
c00171b4:	83 ec 08             	sub    esp,0x8
c00171b7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00171be:	8d 44 24 14          	lea    eax,[esp+0x14]
c00171c2:	50                   	push   eax
c00171c3:	e8 38 94 fe ff       	call   c0000600 <strcpy>
c00171c8:	83 c4 10             	add    esp,0x10
c00171cb:	83 ec 08             	sub    esp,0x8
c00171ce:	8d 44 24 10          	lea    eax,[esp+0x10]
c00171d2:	50                   	push   eax
c00171d3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00171da:	e8 71 ff ff ff       	call   c0017150 <FAT::fixFilepath(char*)>
c00171df:	83 c4 10             	add    esp,0x10
c00171e2:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00171ea:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00171f1:	83 e0 01             	and    eax,0x1
c00171f4:	74 0a                	je     c0017200 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c00171f6:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00171fe:	66 90                	xchg   ax,ax
c0017200:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017207:	83 e0 04             	and    eax,0x4
c001720a:	74 10                	je     c001721c <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001720c:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0017214:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001721c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017223:	83 e0 02             	and    eax,0x2
c0017226:	74 08                	je     c0017230 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0017228:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0017230:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017237:	83 e0 08             	and    eax,0x8
c001723a:	74 08                	je     c0017244 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001723c:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0017244:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001724b:	83 e0 10             	and    eax,0x10
c001724e:	74 08                	je     c0017258 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0017250:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0017258:	83 ec 0c             	sub    esp,0xc
c001725b:	68 28 02 00 00       	push   0x228
c0017260:	e8 bc 05 ff ff       	call   c0007821 <malloc>
c0017265:	83 c4 10             	add    esp,0x10
c0017268:	89 c2                	mov    edx,eax
c001726a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017271:	89 10                	mov    DWORD PTR [eax],edx
c0017273:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001727a:	31 d2                	xor    edx,edx
c001727c:	88 c2                	mov    dl,al
c001727e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017285:	8b 00                	mov    eax,DWORD PTR [eax]
c0017287:	83 ec 04             	sub    esp,0x4
c001728a:	52                   	push   edx
c001728b:	8d 54 24 10          	lea    edx,[esp+0x10]
c001728f:	52                   	push   edx
c0017290:	50                   	push   eax
c0017291:	e8 87 c8 fe ff       	call   c0003b1d <f_open>
c0017296:	83 c4 10             	add    esp,0x10
c0017299:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00172a0:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00172a8:	74 0a                	je     c00172b4 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c00172aa:	b8 01 00 00 00       	mov    eax,0x1
c00172af:	eb 0b                	jmp    c00172bc <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00172b1:	8d 76 00             	lea    esi,[esi+0x0]
c00172b4:	b8 00 00 00 00       	mov    eax,0x0
c00172b9:	8d 76 00             	lea    esi,[esi+0x0]
c00172bc:	81 c4 1c 01 00 00    	add    esp,0x11c
c00172c2:	c3                   	ret    
c00172c3:	90                   	nop

c00172c4 <FAT::openDir(char const*, void**)>:
c00172c4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00172ca:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00172d2:	74 0c                	je     c00172e0 <FAT::openDir(char const*, void**)+0x1c>
c00172d4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00172dc:	75 0e                	jne    c00172ec <FAT::openDir(char const*, void**)+0x28>
c00172de:	66 90                	xchg   ax,ax
c00172e0:	b8 04 00 00 00       	mov    eax,0x4
c00172e5:	e9 82 00 00 00       	jmp    c001736c <FAT::openDir(char const*, void**)+0xa8>
c00172ea:	66 90                	xchg   ax,ax
c00172ec:	83 ec 08             	sub    esp,0x8
c00172ef:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00172f6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172fa:	50                   	push   eax
c00172fb:	e8 00 93 fe ff       	call   c0000600 <strcpy>
c0017300:	83 c4 10             	add    esp,0x10
c0017303:	83 ec 08             	sub    esp,0x8
c0017306:	8d 44 24 14          	lea    eax,[esp+0x14]
c001730a:	50                   	push   eax
c001730b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017312:	e8 39 fe ff ff       	call   c0017150 <FAT::fixFilepath(char*)>
c0017317:	83 c4 10             	add    esp,0x10
c001731a:	83 ec 0c             	sub    esp,0xc
c001731d:	6a 30                	push   0x30
c001731f:	e8 fd 04 ff ff       	call   c0007821 <malloc>
c0017324:	83 c4 10             	add    esp,0x10
c0017327:	89 c2                	mov    edx,eax
c0017329:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017330:	89 10                	mov    DWORD PTR [eax],edx
c0017332:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017339:	8b 00                	mov    eax,DWORD PTR [eax]
c001733b:	83 ec 08             	sub    esp,0x8
c001733e:	8d 54 24 14          	lea    edx,[esp+0x14]
c0017342:	52                   	push   edx
c0017343:	50                   	push   eax
c0017344:	e8 5d d1 fe ff       	call   c00044a6 <f_opendir>
c0017349:	83 c4 10             	add    esp,0x10
c001734c:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017353:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001735b:	74 07                	je     c0017364 <FAT::openDir(char const*, void**)+0xa0>
c001735d:	b8 01 00 00 00       	mov    eax,0x1
c0017362:	eb 08                	jmp    c001736c <FAT::openDir(char const*, void**)+0xa8>
c0017364:	b8 00 00 00 00       	mov    eax,0x0
c0017369:	8d 76 00             	lea    esi,[esi+0x0]
c001736c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017372:	c3                   	ret    
c0017373:	90                   	nop

c0017374 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0017374:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001737a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0017382:	75 0c                	jne    c0017390 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0017384:	b8 04 00 00 00       	mov    eax,0x4
c0017389:	e9 d6 00 00 00       	jmp    c0017464 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001738e:	66 90                	xchg   ax,ax
c0017390:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0017398:	75 0a                	jne    c00173a4 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001739a:	b8 04 00 00 00       	mov    eax,0x4
c001739f:	e9 c0 00 00 00       	jmp    c0017464 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00173a4:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00173ac:	75 0a                	jne    c00173b8 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c00173ae:	b8 04 00 00 00       	mov    eax,0x4
c00173b3:	e9 ac 00 00 00       	jmp    c0017464 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00173b8:	83 ec 08             	sub    esp,0x8
c00173bb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00173c2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00173c9:	50                   	push   eax
c00173ca:	e8 31 92 fe ff       	call   c0000600 <strcpy>
c00173cf:	83 c4 10             	add    esp,0x10
c00173d2:	83 ec 08             	sub    esp,0x8
c00173d5:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00173dc:	50                   	push   eax
c00173dd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00173e4:	e8 67 fd ff ff       	call   c0017150 <FAT::fixFilepath(char*)>
c00173e9:	83 c4 10             	add    esp,0x10
c00173ec:	83 ec 08             	sub    esp,0x8
c00173ef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00173f3:	50                   	push   eax
c00173f4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00173fb:	50                   	push   eax
c00173fc:	e8 24 d2 fe ff       	call   c0004625 <f_stat>
c0017401:	83 c4 10             	add    esp,0x10
c0017404:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001740b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0017412:	85 c0                	test   eax,eax
c0017414:	74 0a                	je     c0017420 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0017416:	83 f8 04             	cmp    eax,0x4
c0017419:	74 39                	je     c0017454 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001741b:	eb 3f                	jmp    c001745c <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001741d:	8d 76 00             	lea    esi,[esi+0x0]
c0017420:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017424:	25 ff 00 00 00       	and    eax,0xff
c0017429:	83 e0 10             	and    eax,0x10
c001742c:	0f 95 c2             	setne  dl
c001742f:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0017436:	88 10                	mov    BYTE PTR [eax],dl
c0017438:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001743c:	ba 00 00 00 00       	mov    edx,0x0
c0017441:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0017448:	89 01                	mov    DWORD PTR [ecx],eax
c001744a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001744d:	b8 00 00 00 00       	mov    eax,0x0
c0017452:	eb 10                	jmp    c0017464 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017454:	b8 02 00 00 00       	mov    eax,0x2
c0017459:	eb 09                	jmp    c0017464 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001745b:	90                   	nop
c001745c:	b8 01 00 00 00       	mov    eax,0x1
c0017461:	8d 76 00             	lea    esi,[esi+0x0]
c0017464:	81 c4 2c 02 00 00    	add    esp,0x22c
c001746a:	c3                   	ret    
c001746b:	90                   	nop

c001746c <FAT::unlink(char const*)>:
c001746c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017472:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001747a:	75 08                	jne    c0017484 <FAT::unlink(char const*)+0x18>
c001747c:	b8 04 00 00 00       	mov    eax,0x4
c0017481:	eb 61                	jmp    c00174e4 <FAT::unlink(char const*)+0x78>
c0017483:	90                   	nop
c0017484:	83 ec 08             	sub    esp,0x8
c0017487:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001748e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017492:	50                   	push   eax
c0017493:	e8 68 91 fe ff       	call   c0000600 <strcpy>
c0017498:	83 c4 10             	add    esp,0x10
c001749b:	83 ec 08             	sub    esp,0x8
c001749e:	8d 44 24 14          	lea    eax,[esp+0x14]
c00174a2:	50                   	push   eax
c00174a3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00174aa:	e8 a1 fc ff ff       	call   c0017150 <FAT::fixFilepath(char*)>
c00174af:	83 c4 10             	add    esp,0x10
c00174b2:	83 ec 0c             	sub    esp,0xc
c00174b5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00174b9:	50                   	push   eax
c00174ba:	e8 cb d3 fe ff       	call   c000488a <f_unlink>
c00174bf:	83 c4 10             	add    esp,0x10
c00174c2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00174c9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00174d0:	85 c0                	test   eax,eax
c00174d2:	75 08                	jne    c00174dc <FAT::unlink(char const*)+0x70>
c00174d4:	b8 00 00 00 00       	mov    eax,0x0
c00174d9:	eb 09                	jmp    c00174e4 <FAT::unlink(char const*)+0x78>
c00174db:	90                   	nop
c00174dc:	b8 01 00 00 00       	mov    eax,0x1
c00174e1:	8d 76 00             	lea    esi,[esi+0x0]
c00174e4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00174ea:	c3                   	ret    
c00174eb:	90                   	nop

c00174ec <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00174ec:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00174f2:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00174f9:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0017500:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017504:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017508:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0017510:	75 0a                	jne    c001751c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0017512:	b8 04 00 00 00       	mov    eax,0x4
c0017517:	e9 54 01 00 00       	jmp    c0017670 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c001751c:	83 ec 08             	sub    esp,0x8
c001751f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0017526:	8d 44 24 24          	lea    eax,[esp+0x24]
c001752a:	50                   	push   eax
c001752b:	e8 d0 90 fe ff       	call   c0000600 <strcpy>
c0017530:	83 c4 10             	add    esp,0x10
c0017533:	83 ec 08             	sub    esp,0x8
c0017536:	8d 44 24 20          	lea    eax,[esp+0x20]
c001753a:	50                   	push   eax
c001753b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0017542:	e8 09 fc ff ff       	call   c0017150 <FAT::fixFilepath(char*)>
c0017547:	83 c4 10             	add    esp,0x10
c001754a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0017552:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001755a:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001755e:	25 ff 00 00 00       	and    eax,0xff
c0017563:	83 e0 01             	and    eax,0x1
c0017566:	74 08                	je     c0017570 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c0017568:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0017570:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017574:	25 ff 00 00 00       	and    eax,0xff
c0017579:	83 e0 02             	and    eax,0x2
c001757c:	74 0a                	je     c0017588 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c001757e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0017586:	66 90                	xchg   ax,ax
c0017588:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001758c:	25 ff 00 00 00       	and    eax,0xff
c0017591:	83 e0 04             	and    eax,0x4
c0017594:	74 0a                	je     c00175a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c0017596:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001759e:	66 90                	xchg   ax,ax
c00175a0:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00175a4:	25 ff 00 00 00       	and    eax,0xff
c00175a9:	83 e0 08             	and    eax,0x8
c00175ac:	74 0a                	je     c00175b8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c00175ae:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00175b6:	66 90                	xchg   ax,ax
c00175b8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00175bc:	25 ff 00 00 00       	and    eax,0xff
c00175c1:	83 e0 01             	and    eax,0x1
c00175c4:	74 0a                	je     c00175d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c00175c6:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00175ce:	66 90                	xchg   ax,ax
c00175d0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00175d4:	25 ff 00 00 00       	and    eax,0xff
c00175d9:	83 e0 02             	and    eax,0x2
c00175dc:	74 0a                	je     c00175e8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c00175de:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00175e6:	66 90                	xchg   ax,ax
c00175e8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00175ec:	25 ff 00 00 00       	and    eax,0xff
c00175f1:	83 e0 04             	and    eax,0x4
c00175f4:	74 0a                	je     c0017600 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c00175f6:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00175fe:	66 90                	xchg   ax,ax
c0017600:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017604:	25 ff 00 00 00       	and    eax,0xff
c0017609:	83 e0 08             	and    eax,0x8
c001760c:	74 0a                	je     c0017618 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c001760e:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0017616:	66 90                	xchg   ax,ax
c0017618:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001761f:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0017626:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001762d:	31 d2                	xor    edx,edx
c001762f:	88 c2                	mov    dl,al
c0017631:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0017638:	25 ff 00 00 00       	and    eax,0xff
c001763d:	83 ec 04             	sub    esp,0x4
c0017640:	52                   	push   edx
c0017641:	50                   	push   eax
c0017642:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017646:	50                   	push   eax
c0017647:	e8 b1 d6 fe ff       	call   c0004cfd <f_chmod>
c001764c:	83 c4 10             	add    esp,0x10
c001764f:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0017656:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001765d:	85 c0                	test   eax,eax
c001765f:	75 07                	jne    c0017668 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c0017661:	b8 00 00 00 00       	mov    eax,0x0
c0017666:	eb 08                	jmp    c0017670 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017668:	b8 01 00 00 00       	mov    eax,0x1
c001766d:	8d 76 00             	lea    esi,[esi+0x0]
c0017670:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017676:	c3                   	ret    
c0017677:	90                   	nop

c0017678 <FAT::rename(char const*, char const*)>:
c0017678:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001767e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0017686:	74 0c                	je     c0017694 <FAT::rename(char const*, char const*)+0x1c>
c0017688:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0017690:	75 0e                	jne    c00176a0 <FAT::rename(char const*, char const*)+0x28>
c0017692:	66 90                	xchg   ax,ax
c0017694:	b8 04 00 00 00       	mov    eax,0x4
c0017699:	e9 9e 00 00 00       	jmp    c001773c <FAT::rename(char const*, char const*)+0xc4>
c001769e:	66 90                	xchg   ax,ax
c00176a0:	83 ec 08             	sub    esp,0x8
c00176a3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00176aa:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00176b1:	50                   	push   eax
c00176b2:	e8 49 8f fe ff       	call   c0000600 <strcpy>
c00176b7:	83 c4 10             	add    esp,0x10
c00176ba:	83 ec 08             	sub    esp,0x8
c00176bd:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00176c4:	50                   	push   eax
c00176c5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00176cc:	e8 7f fa ff ff       	call   c0017150 <FAT::fixFilepath(char*)>
c00176d1:	83 c4 10             	add    esp,0x10
c00176d4:	83 ec 08             	sub    esp,0x8
c00176d7:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00176de:	8d 44 24 18          	lea    eax,[esp+0x18]
c00176e2:	50                   	push   eax
c00176e3:	e8 18 8f fe ff       	call   c0000600 <strcpy>
c00176e8:	83 c4 10             	add    esp,0x10
c00176eb:	83 ec 08             	sub    esp,0x8
c00176ee:	8d 44 24 14          	lea    eax,[esp+0x14]
c00176f2:	50                   	push   eax
c00176f3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00176fa:	e8 51 fa ff ff       	call   c0017150 <FAT::fixFilepath(char*)>
c00176ff:	83 c4 10             	add    esp,0x10
c0017702:	83 ec 08             	sub    esp,0x8
c0017705:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017709:	50                   	push   eax
c001770a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017711:	50                   	push   eax
c0017712:	e8 30 d4 fe ff       	call   c0004b47 <f_rename>
c0017717:	83 c4 10             	add    esp,0x10
c001771a:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0017721:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0017728:	85 c0                	test   eax,eax
c001772a:	75 08                	jne    c0017734 <FAT::rename(char const*, char const*)+0xbc>
c001772c:	b8 00 00 00 00       	mov    eax,0x0
c0017731:	eb 09                	jmp    c001773c <FAT::rename(char const*, char const*)+0xc4>
c0017733:	90                   	nop
c0017734:	b8 01 00 00 00       	mov    eax,0x1
c0017739:	8d 76 00             	lea    esi,[esi+0x0]
c001773c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0017742:	c3                   	ret    
c0017743:	90                   	nop

c0017744 <FAT::mkdir(char const*)>:
c0017744:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001774a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017752:	75 08                	jne    c001775c <FAT::mkdir(char const*)+0x18>
c0017754:	b8 04 00 00 00       	mov    eax,0x4
c0017759:	eb 61                	jmp    c00177bc <FAT::mkdir(char const*)+0x78>
c001775b:	90                   	nop
c001775c:	83 ec 08             	sub    esp,0x8
c001775f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017766:	8d 44 24 18          	lea    eax,[esp+0x18]
c001776a:	50                   	push   eax
c001776b:	e8 90 8e fe ff       	call   c0000600 <strcpy>
c0017770:	83 c4 10             	add    esp,0x10
c0017773:	83 ec 08             	sub    esp,0x8
c0017776:	8d 44 24 14          	lea    eax,[esp+0x14]
c001777a:	50                   	push   eax
c001777b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017782:	e8 c9 f9 ff ff       	call   c0017150 <FAT::fixFilepath(char*)>
c0017787:	83 c4 10             	add    esp,0x10
c001778a:	83 ec 0c             	sub    esp,0xc
c001778d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017791:	50                   	push   eax
c0017792:	e8 15 d2 fe ff       	call   c00049ac <f_mkdir>
c0017797:	83 c4 10             	add    esp,0x10
c001779a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00177a1:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00177a8:	85 c0                	test   eax,eax
c00177aa:	75 08                	jne    c00177b4 <FAT::mkdir(char const*)+0x70>
c00177ac:	b8 00 00 00 00       	mov    eax,0x0
c00177b1:	eb 09                	jmp    c00177bc <FAT::mkdir(char const*)+0x78>
c00177b3:	90                   	nop
c00177b4:	b8 01 00 00 00       	mov    eax,0x1
c00177b9:	8d 76 00             	lea    esi,[esi+0x0]
c00177bc:	81 c4 1c 01 00 00    	add    esp,0x11c
c00177c2:	c3                   	ret    
c00177c3:	90                   	nop

c00177c4 <FAT::exists(char const*)>:
c00177c4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00177ca:	83 ec 08             	sub    esp,0x8
c00177cd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00177d4:	8d 44 24 10          	lea    eax,[esp+0x10]
c00177d8:	50                   	push   eax
c00177d9:	e8 22 8e fe ff       	call   c0000600 <strcpy>
c00177de:	83 c4 10             	add    esp,0x10
c00177e1:	83 ec 08             	sub    esp,0x8
c00177e4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177e8:	50                   	push   eax
c00177e9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00177f0:	e8 5b f9 ff ff       	call   c0017150 <FAT::fixFilepath(char*)>
c00177f5:	83 c4 10             	add    esp,0x10
c00177f8:	83 ec 08             	sub    esp,0x8
c00177fb:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0017802:	50                   	push   eax
c0017803:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017807:	50                   	push   eax
c0017808:	e8 18 ce fe ff       	call   c0004625 <f_stat>
c001780d:	83 c4 10             	add    esp,0x10
c0017810:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0017817:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001781e:	85 c0                	test   eax,eax
c0017820:	75 06                	jne    c0017828 <FAT::exists(char const*)+0x64>
c0017822:	b0 01                	mov    al,0x1
c0017824:	eb 06                	jmp    c001782c <FAT::exists(char const*)+0x68>
c0017826:	66 90                	xchg   ax,ax
c0017828:	b0 00                	mov    al,0x0
c001782a:	66 90                	xchg   ax,ax
c001782c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0017832:	c3                   	ret    
c0017833:	90                   	nop

c0017834 <isoReadDiscSectorHelper>:
c0017834:	83 ec 2c             	sub    esp,0x2c
c0017837:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001783b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001783f:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0017844:	83 e8 41             	sub    eax,0x41
c0017847:	8b 0c 85 20 54 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdabe0]
c001784e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017852:	ba 00 00 00 00       	mov    edx,0x0
c0017857:	83 ec 0c             	sub    esp,0xc
c001785a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001785e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017862:	52                   	push   edx
c0017863:	50                   	push   eax
c0017864:	51                   	push   ecx
c0017865:	e8 66 54 ff ff       	call   c000ccd0 <LogicalDisk::read(unsigned long long, int, void*)>
c001786a:	83 c4 20             	add    esp,0x20
c001786d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017871:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0017876:	74 0c                	je     c0017884 <isoReadDiscSectorHelper+0x50>
c0017878:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001787c:	c1 e0 0b             	shl    eax,0xb
c001787f:	eb 0b                	jmp    c001788c <isoReadDiscSectorHelper+0x58>
c0017881:	8d 76 00             	lea    esi,[esi+0x0]
c0017884:	b8 00 00 00 00       	mov    eax,0x0
c0017889:	8d 76 00             	lea    esi,[esi+0x0]
c001788c:	83 c4 2c             	add    esp,0x2c
c001788f:	c3                   	ret    

c0017890 <iso_kprintf>:
c0017890:	83 ec 0c             	sub    esp,0xc
c0017893:	a1 04 2f 02 c0       	mov    eax,ds:0xc0022f04
c0017898:	83 ec 08             	sub    esp,0x8
c001789b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001789f:	50                   	push   eax
c00178a0:	e8 f9 0e ff ff       	call   c000879e <VgaText::puts(char const*)>
c00178a5:	83 c4 10             	add    esp,0x10
c00178a8:	90                   	nop
c00178a9:	83 c4 0c             	add    esp,0xc
c00178ac:	c3                   	ret    
c00178ad:	8d 76 00             	lea    esi,[esi+0x0]

c00178b0 <iso_kprintfd>:
c00178b0:	83 ec 0c             	sub    esp,0xc
c00178b3:	a1 04 2f 02 c0       	mov    eax,ds:0xc0022f04
c00178b8:	83 ec 08             	sub    esp,0x8
c00178bb:	68 f0 f7 01 c0       	push   0xc001f7f0
c00178c0:	50                   	push   eax
c00178c1:	e8 d8 0e ff ff       	call   c000879e <VgaText::puts(char const*)>
c00178c6:	83 c4 10             	add    esp,0x10
c00178c9:	a1 04 2f 02 c0       	mov    eax,ds:0xc0022f04
c00178ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00178d2:	83 ec 08             	sub    esp,0x8
c00178d5:	52                   	push   edx
c00178d6:	50                   	push   eax
c00178d7:	e8 7c 0e ff ff       	call   c0008758 <VgaText::putx(unsigned int)>
c00178dc:	83 c4 10             	add    esp,0x10
c00178df:	a1 04 2f 02 c0       	mov    eax,ds:0xc0022f04
c00178e4:	83 ec 08             	sub    esp,0x8
c00178e7:	68 71 f6 01 c0       	push   0xc001f671
c00178ec:	50                   	push   eax
c00178ed:	e8 ac 0e ff ff       	call   c000879e <VgaText::puts(char const*)>
c00178f2:	83 c4 10             	add    esp,0x10
c00178f5:	90                   	nop
c00178f6:	83 c4 0c             	add    esp,0xc
c00178f9:	c3                   	ret    

c00178fa <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00178fa:	b8 08 00 00 00       	mov    eax,0x8
c00178ff:	c3                   	ret    

c0017900 <ISO9660::getName()>:
c0017900:	b8 f3 f7 01 c0       	mov    eax,0xc001f7f3
c0017905:	c3                   	ret    

c0017906 <ISO9660::closeDir(void*)>:
c0017906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001790a:	8b 00                	mov    eax,DWORD PTR [eax]
c001790c:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001790f:	90                   	nop

c0017910 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0017910:	b8 01 00 00 00       	mov    eax,0x1
c0017915:	c3                   	ret    

c0017916 <ISO9660::unlink(char const*)>:
c0017916:	b8 01 00 00 00       	mov    eax,0x1
c001791b:	c3                   	ret    

c001791c <ISO9660::write(void*, unsigned long, void*, int*)>:
c001791c:	b8 03 00 00 00       	mov    eax,0x3
c0017921:	c3                   	ret    

c0017922 <ISO9660::rename(char const*, char const*)>:
c0017922:	b8 01 00 00 00       	mov    eax,0x1
c0017927:	c3                   	ret    

c0017928 <ISO9660::mkdir(char const*)>:
c0017928:	b8 01 00 00 00       	mov    eax,0x1
c001792d:	c3                   	ret    

c001792e <ISO9660::~ISO9660()>:
c001792e:	83 ec 0c             	sub    esp,0xc
c0017931:	ba c8 f8 01 c0       	mov    edx,0xc001f8c8
c0017936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001793a:	89 10                	mov    DWORD PTR [eax],edx
c001793c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017940:	83 ec 0c             	sub    esp,0xc
c0017943:	50                   	push   eax
c0017944:	e8 b7 2f ff ff       	call   c000a900 <Filesystem::~Filesystem()>
c0017949:	83 c4 10             	add    esp,0x10
c001794c:	90                   	nop
c001794d:	83 c4 0c             	add    esp,0xc
c0017950:	c3                   	ret    
c0017951:	90                   	nop

c0017952 <ISO9660::~ISO9660()>:
c0017952:	83 ec 0c             	sub    esp,0xc
c0017955:	83 ec 0c             	sub    esp,0xc
c0017958:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001795c:	e8 cd ff ff ff       	call   c001792e <ISO9660::~ISO9660()>
c0017961:	83 c4 10             	add    esp,0x10
c0017964:	83 ec 08             	sub    esp,0x8
c0017967:	6a 08                	push   0x8
c0017969:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001796d:	e8 52 2b ff ff       	call   c000a4c4 <operator delete(void*, unsigned long)>
c0017972:	83 c4 10             	add    esp,0x10
c0017975:	83 c4 0c             	add    esp,0xc
c0017978:	c3                   	ret    
c0017979:	90                   	nop

c001797a <ISO9660::exists(char const*)>:
c001797a:	83 ec 18             	sub    esp,0x18
c001797d:	68 0e f8 01 c0       	push   0xc001f80e
c0017982:	e8 3c 89 ff ff       	call   c00102c3 <KePanic(char const*)>
c0017987:	31 c0                	xor    eax,eax
c0017989:	83 c4 1c             	add    esp,0x1c
c001798c:	c3                   	ret    
c001798d:	90                   	nop

c001798e <ISO9660::open(char const*, void**, FileOpenMode)>:
c001798e:	56                   	push   esi
c001798f:	53                   	push   ebx
c0017990:	50                   	push   eax
c0017991:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017995:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017999:	85 f6                	test   esi,esi
c001799b:	0f 84 88 00 00 00    	je     c0017a29 <ISO9660::open(char const*, void**, FileOpenMode)+0x9b>
c00179a1:	85 db                	test   ebx,ebx
c00179a3:	0f 84 80 00 00 00    	je     c0017a29 <ISO9660::open(char const*, void**, FileOpenMode)+0x9b>
c00179a9:	b9 03 00 00 00       	mov    ecx,0x3
c00179ae:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c00179b3:	75 79                	jne    c0017a2e <ISO9660::open(char const*, void**, FileOpenMode)+0xa0>
c00179b5:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00179b8:	3a 05 20 63 02 c0    	cmp    al,BYTE PTR ds:0xc0026320
c00179be:	74 34                	je     c00179f4 <ISO9660::open(char const*, void**, FileOpenMode)+0x66>
c00179c0:	83 ec 0c             	sub    esp,0xc
c00179c3:	50                   	push   eax
c00179c4:	e8 5c ee fe ff       	call   c0006825 <init_percd>
c00179c9:	83 c4 10             	add    esp,0x10
c00179cc:	b9 0b 00 00 00       	mov    ecx,0xb
c00179d1:	40                   	inc    eax
c00179d2:	74 5a                	je     c0017a2e <ISO9660::open(char const*, void**, FileOpenMode)+0xa0>
c00179d4:	80 3d 20 63 02 c0 00 	cmp    BYTE PTR ds:0xc0026320,0x0
c00179db:	74 10                	je     c00179ed <ISO9660::open(char const*, void**, FileOpenMode)+0x5f>
c00179dd:	83 ec 0c             	sub    esp,0xc
c00179e0:	68 2c f8 01 c0       	push   0xc001f82c
c00179e5:	e8 d9 88 ff ff       	call   c00102c3 <KePanic(char const*)>
c00179ea:	83 c4 10             	add    esp,0x10
c00179ed:	8a 06                	mov    al,BYTE PTR [esi]
c00179ef:	a2 20 63 02 c0       	mov    ds:0xc0026320,al
c00179f4:	83 ec 0c             	sub    esp,0xc
c00179f7:	0f be 05 20 63 02 c0 	movsx  eax,BYTE PTR ds:0xc0026320
c00179fe:	83 c6 03             	add    esi,0x3
c0017a01:	50                   	push   eax
c0017a02:	e8 1e ee fe ff       	call   c0006825 <init_percd>
c0017a07:	59                   	pop    ecx
c0017a08:	58                   	pop    eax
c0017a09:	6a 00                	push   0x0
c0017a0b:	56                   	push   esi
c0017a0c:	e8 ec e8 fe ff       	call   c00062fd <iso_open>
c0017a11:	83 c4 10             	add    esp,0x10
c0017a14:	b9 01 00 00 00       	mov    ecx,0x1
c0017a19:	83 f8 ff             	cmp    eax,0xffffffff
c0017a1c:	74 10                	je     c0017a2e <ISO9660::open(char const*, void**, FileOpenMode)+0xa0>
c0017a1e:	8d 50 32             	lea    edx,[eax+0x32]
c0017a21:	31 c9                	xor    ecx,ecx
c0017a23:	01 d2                	add    edx,edx
c0017a25:	89 13                	mov    DWORD PTR [ebx],edx
c0017a27:	eb 05                	jmp    c0017a2e <ISO9660::open(char const*, void**, FileOpenMode)+0xa0>
c0017a29:	b9 04 00 00 00       	mov    ecx,0x4
c0017a2e:	5a                   	pop    edx
c0017a2f:	89 c8                	mov    eax,ecx
c0017a31:	5b                   	pop    ebx
c0017a32:	5e                   	pop    esi
c0017a33:	c3                   	ret    

c0017a34 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0017a34:	53                   	push   ebx
c0017a35:	83 ec 08             	sub    esp,0x8
c0017a38:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a3c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017a40:	85 c0                	test   eax,eax
c0017a42:	74 2d                	je     c0017a71 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0017a44:	85 db                	test   ebx,ebx
c0017a46:	74 29                	je     c0017a71 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0017a48:	b9 02 00 00 00       	mov    ecx,0x2
c0017a4d:	52                   	push   edx
c0017a4e:	99                   	cdq    
c0017a4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a53:	f7 f9                	idiv   ecx
c0017a55:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017a59:	83 e8 32             	sub    eax,0x32
c0017a5c:	50                   	push   eax
c0017a5d:	e8 43 e9 fe ff       	call   c00063a5 <iso_read>
c0017a62:	83 c4 10             	add    esp,0x10
c0017a65:	89 03                	mov    DWORD PTR [ebx],eax
c0017a67:	09 d0                	or     eax,edx
c0017a69:	0f 94 c0             	sete   al
c0017a6c:	0f b6 c0             	movzx  eax,al
c0017a6f:	eb 05                	jmp    c0017a76 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c0017a71:	b8 04 00 00 00       	mov    eax,0x4
c0017a76:	83 c4 08             	add    esp,0x8
c0017a79:	5b                   	pop    ebx
c0017a7a:	c3                   	ret    
c0017a7b:	90                   	nop

c0017a7c <ISO9660::seek(void*, unsigned long long)>:
c0017a7c:	57                   	push   edi
c0017a7d:	56                   	push   esi
c0017a7e:	b8 04 00 00 00       	mov    eax,0x4
c0017a83:	51                   	push   ecx
c0017a84:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017a88:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017a8c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017a90:	85 d2                	test   edx,edx
c0017a92:	74 26                	je     c0017aba <ISO9660::seek(void*, unsigned long long)+0x3e>
c0017a94:	6a 00                	push   0x0
c0017a96:	b9 02 00 00 00       	mov    ecx,0x2
c0017a9b:	57                   	push   edi
c0017a9c:	89 d0                	mov    eax,edx
c0017a9e:	56                   	push   esi
c0017a9f:	99                   	cdq    
c0017aa0:	f7 f9                	idiv   ecx
c0017aa2:	83 e8 32             	sub    eax,0x32
c0017aa5:	50                   	push   eax
c0017aa6:	e8 10 ea fe ff       	call   c00064bb <iso_seek>
c0017aab:	83 c4 10             	add    esp,0x10
c0017aae:	31 f0                	xor    eax,esi
c0017ab0:	31 fa                	xor    edx,edi
c0017ab2:	09 d0                	or     eax,edx
c0017ab4:	0f 95 c0             	setne  al
c0017ab7:	0f b6 c0             	movzx  eax,al
c0017aba:	5a                   	pop    edx
c0017abb:	5e                   	pop    esi
c0017abc:	5f                   	pop    edi
c0017abd:	c3                   	ret    

c0017abe <ISO9660::tell(void*, unsigned long long*)>:
c0017abe:	53                   	push   ebx
c0017abf:	83 ec 08             	sub    esp,0x8
c0017ac2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ac6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017aca:	85 c0                	test   eax,eax
c0017acc:	74 24                	je     c0017af2 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0017ace:	85 db                	test   ebx,ebx
c0017ad0:	74 20                	je     c0017af2 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0017ad2:	83 ec 0c             	sub    esp,0xc
c0017ad5:	b9 02 00 00 00       	mov    ecx,0x2
c0017ada:	99                   	cdq    
c0017adb:	f7 f9                	idiv   ecx
c0017add:	83 e8 32             	sub    eax,0x32
c0017ae0:	50                   	push   eax
c0017ae1:	e8 59 ea fe ff       	call   c000653f <iso_tell>
c0017ae6:	83 c4 10             	add    esp,0x10
c0017ae9:	89 03                	mov    DWORD PTR [ebx],eax
c0017aeb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017aee:	31 c0                	xor    eax,eax
c0017af0:	eb 05                	jmp    c0017af7 <ISO9660::tell(void*, unsigned long long*)+0x39>
c0017af2:	b8 04 00 00 00       	mov    eax,0x4
c0017af7:	83 c4 08             	add    esp,0x8
c0017afa:	5b                   	pop    ebx
c0017afb:	c3                   	ret    

c0017afc <ISO9660::openDir(char const*, void**)>:
c0017afc:	57                   	push   edi
c0017afd:	56                   	push   esi
c0017afe:	53                   	push   ebx
c0017aff:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017b03:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017b07:	85 ff                	test   edi,edi
c0017b09:	0f 84 b0 00 00 00    	je     c0017bbf <ISO9660::openDir(char const*, void**)+0xc3>
c0017b0f:	85 f6                	test   esi,esi
c0017b11:	0f 84 a8 00 00 00    	je     c0017bbf <ISO9660::openDir(char const*, void**)+0xc3>
c0017b17:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0017b1a:	3a 05 20 63 02 c0    	cmp    al,BYTE PTR ds:0xc0026320
c0017b20:	74 38                	je     c0017b5a <ISO9660::openDir(char const*, void**)+0x5e>
c0017b22:	83 ec 0c             	sub    esp,0xc
c0017b25:	50                   	push   eax
c0017b26:	e8 fa ec fe ff       	call   c0006825 <init_percd>
c0017b2b:	83 c4 10             	add    esp,0x10
c0017b2e:	ba 0b 00 00 00       	mov    edx,0xb
c0017b33:	40                   	inc    eax
c0017b34:	0f 84 8a 00 00 00    	je     c0017bc4 <ISO9660::openDir(char const*, void**)+0xc8>
c0017b3a:	80 3d 20 63 02 c0 00 	cmp    BYTE PTR ds:0xc0026320,0x0
c0017b41:	74 10                	je     c0017b53 <ISO9660::openDir(char const*, void**)+0x57>
c0017b43:	83 ec 0c             	sub    esp,0xc
c0017b46:	68 2c f8 01 c0       	push   0xc001f82c
c0017b4b:	e8 73 87 ff ff       	call   c00102c3 <KePanic(char const*)>
c0017b50:	83 c4 10             	add    esp,0x10
c0017b53:	8a 07                	mov    al,BYTE PTR [edi]
c0017b55:	a2 20 63 02 c0       	mov    ds:0xc0026320,al
c0017b5a:	83 ec 0c             	sub    esp,0xc
c0017b5d:	0f be 05 20 63 02 c0 	movsx  eax,BYTE PTR ds:0xc0026320
c0017b64:	50                   	push   eax
c0017b65:	e8 bb ec fe ff       	call   c0006825 <init_percd>
c0017b6a:	c7 04 24 3c f8 01 c0 	mov    DWORD PTR [esp],0xc001f83c
c0017b71:	e8 44 2a ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0017b76:	59                   	pop    ecx
c0017b77:	8d 47 03             	lea    eax,[edi+0x3]
c0017b7a:	5b                   	pop    ebx
c0017b7b:	6a 01                	push   0x1
c0017b7d:	50                   	push   eax
c0017b7e:	e8 7a e7 fe ff       	call   c00062fd <iso_open>
c0017b83:	83 c4 10             	add    esp,0x10
c0017b86:	89 c3                	mov    ebx,eax
c0017b88:	83 f8 ff             	cmp    eax,0xffffffff
c0017b8b:	75 17                	jne    c0017ba4 <ISO9660::openDir(char const*, void**)+0xa8>
c0017b8d:	52                   	push   edx
c0017b8e:	52                   	push   edx
c0017b8f:	57                   	push   edi
c0017b90:	68 47 f8 01 c0       	push   0xc001f847
c0017b95:	e8 20 2a ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0017b9a:	83 c4 10             	add    esp,0x10
c0017b9d:	ba 01 00 00 00       	mov    edx,0x1
c0017ba2:	eb 20                	jmp    c0017bc4 <ISO9660::openDir(char const*, void**)+0xc8>
c0017ba4:	01 db                	add    ebx,ebx
c0017ba6:	50                   	push   eax
c0017ba7:	83 c3 65             	add    ebx,0x65
c0017baa:	50                   	push   eax
c0017bab:	57                   	push   edi
c0017bac:	68 5d f8 01 c0       	push   0xc001f85d
c0017bb1:	e8 04 2a ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0017bb6:	89 1e                	mov    DWORD PTR [esi],ebx
c0017bb8:	83 c4 10             	add    esp,0x10
c0017bbb:	31 d2                	xor    edx,edx
c0017bbd:	eb 05                	jmp    c0017bc4 <ISO9660::openDir(char const*, void**)+0xc8>
c0017bbf:	ba 04 00 00 00       	mov    edx,0x4
c0017bc4:	5b                   	pop    ebx
c0017bc5:	89 d0                	mov    eax,edx
c0017bc7:	5e                   	pop    esi
c0017bc8:	5f                   	pop    edi
c0017bc9:	c3                   	ret    

c0017bca <ISO9660::stat(void*, unsigned long long*)>:
c0017bca:	53                   	push   ebx
c0017bcb:	83 ec 14             	sub    esp,0x14
c0017bce:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017bd2:	68 73 f8 01 c0       	push   0xc001f873
c0017bd7:	e8 de 29 ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0017bdc:	83 c4 10             	add    esp,0x10
c0017bdf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017be4:	74 2c                	je     c0017c12 <ISO9660::stat(void*, unsigned long long*)+0x48>
c0017be6:	85 db                	test   ebx,ebx
c0017be8:	74 28                	je     c0017c12 <ISO9660::stat(void*, unsigned long long*)+0x48>
c0017bea:	83 ec 0c             	sub    esp,0xc
c0017bed:	b9 02 00 00 00       	mov    ecx,0x2
c0017bf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bf6:	99                   	cdq    
c0017bf7:	f7 f9                	idiv   ecx
c0017bf9:	83 e8 32             	sub    eax,0x32
c0017bfc:	50                   	push   eax
c0017bfd:	e8 6e e9 fe ff       	call   c0006570 <iso_total>
c0017c02:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017c09:	89 03                	mov    DWORD PTR [ebx],eax
c0017c0b:	83 c4 10             	add    esp,0x10
c0017c0e:	31 c0                	xor    eax,eax
c0017c10:	eb 05                	jmp    c0017c17 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c0017c12:	b8 04 00 00 00       	mov    eax,0x4
c0017c17:	83 c4 08             	add    esp,0x8
c0017c1a:	5b                   	pop    ebx
c0017c1b:	c3                   	ret    

c0017c1c <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017c1c:	55                   	push   ebp
c0017c1d:	57                   	push   edi
c0017c1e:	56                   	push   esi
c0017c1f:	53                   	push   ebx
c0017c20:	83 ec 18             	sub    esp,0x18
c0017c23:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0017c27:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0017c2b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017c2f:	68 7b f8 01 c0       	push   0xc001f87b
c0017c34:	e8 81 29 ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0017c39:	83 c4 10             	add    esp,0x10
c0017c3c:	85 f6                	test   esi,esi
c0017c3e:	0f 94 c2             	sete   dl
c0017c41:	85 ff                	test   edi,edi
c0017c43:	0f 94 c0             	sete   al
c0017c46:	08 c2                	or     dl,al
c0017c48:	0f 85 88 00 00 00    	jne    c0017cd6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xba>
c0017c4e:	85 db                	test   ebx,ebx
c0017c50:	0f 84 80 00 00 00    	je     c0017cd6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xba>
c0017c56:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0017c59:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0017c5f:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017c66:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017c69:	3a 05 20 63 02 c0    	cmp    al,BYTE PTR ds:0xc0026320
c0017c6f:	74 34                	je     c0017ca5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x89>
c0017c71:	83 ec 0c             	sub    esp,0xc
c0017c74:	50                   	push   eax
c0017c75:	e8 ab eb fe ff       	call   c0006825 <init_percd>
c0017c7a:	83 c4 10             	add    esp,0x10
c0017c7d:	ba 0b 00 00 00       	mov    edx,0xb
c0017c82:	40                   	inc    eax
c0017c83:	74 77                	je     c0017cfc <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c0017c85:	80 3d 20 63 02 c0 00 	cmp    BYTE PTR ds:0xc0026320,0x0
c0017c8c:	74 10                	je     c0017c9e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x82>
c0017c8e:	83 ec 0c             	sub    esp,0xc
c0017c91:	68 2c f8 01 c0       	push   0xc001f82c
c0017c96:	e8 28 86 ff ff       	call   c00102c3 <KePanic(char const*)>
c0017c9b:	83 c4 10             	add    esp,0x10
c0017c9e:	8a 03                	mov    al,BYTE PTR [ebx]
c0017ca0:	a2 20 63 02 c0       	mov    ds:0xc0026320,al
c0017ca5:	83 c3 03             	add    ebx,0x3
c0017ca8:	52                   	push   edx
c0017ca9:	52                   	push   edx
c0017caa:	6a 00                	push   0x0
c0017cac:	53                   	push   ebx
c0017cad:	e8 4b e6 fe ff       	call   c00062fd <iso_open>
c0017cb2:	83 c4 10             	add    esp,0x10
c0017cb5:	89 c5                	mov    ebp,eax
c0017cb7:	83 f8 ff             	cmp    eax,0xffffffff
c0017cba:	75 21                	jne    c0017cdd <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc1>
c0017cbc:	50                   	push   eax
c0017cbd:	50                   	push   eax
c0017cbe:	6a 01                	push   0x1
c0017cc0:	53                   	push   ebx
c0017cc1:	e8 37 e6 fe ff       	call   c00062fd <iso_open>
c0017cc6:	83 c4 10             	add    esp,0x10
c0017cc9:	ba 02 00 00 00       	mov    edx,0x2
c0017cce:	40                   	inc    eax
c0017ccf:	74 2b                	je     c0017cfc <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c0017cd1:	c6 07 01             	mov    BYTE PTR [edi],0x1
c0017cd4:	eb 24                	jmp    c0017cfa <ISO9660::stat(char const*, unsigned long long*, bool*)+0xde>
c0017cd6:	ba 04 00 00 00       	mov    edx,0x4
c0017cdb:	eb 1f                	jmp    c0017cfc <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c0017cdd:	83 ec 0c             	sub    esp,0xc
c0017ce0:	50                   	push   eax
c0017ce1:	e8 8a e8 fe ff       	call   c0006570 <iso_total>
c0017ce6:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017ced:	89 06                	mov    DWORD PTR [esi],eax
c0017cef:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017cf2:	e8 90 e6 fe ff       	call   c0006387 <iso_close>
c0017cf7:	83 c4 10             	add    esp,0x10
c0017cfa:	31 d2                	xor    edx,edx
c0017cfc:	83 c4 0c             	add    esp,0xc
c0017cff:	89 d0                	mov    eax,edx
c0017d01:	5b                   	pop    ebx
c0017d02:	5e                   	pop    esi
c0017d03:	5f                   	pop    edi
c0017d04:	5d                   	pop    ebp
c0017d05:	c3                   	ret    

c0017d06 <ISO9660::close(void*)>:
c0017d06:	83 ec 0c             	sub    esp,0xc
c0017d09:	b8 04 00 00 00       	mov    eax,0x4
c0017d0e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d12:	85 d2                	test   edx,edx
c0017d14:	74 1b                	je     c0017d31 <ISO9660::close(void*)+0x2b>
c0017d16:	83 ec 0c             	sub    esp,0xc
c0017d19:	b9 02 00 00 00       	mov    ecx,0x2
c0017d1e:	89 d0                	mov    eax,edx
c0017d20:	99                   	cdq    
c0017d21:	f7 f9                	idiv   ecx
c0017d23:	83 e8 32             	sub    eax,0x32
c0017d26:	50                   	push   eax
c0017d27:	e8 5b e6 fe ff       	call   c0006387 <iso_close>
c0017d2c:	83 c4 10             	add    esp,0x10
c0017d2f:	31 c0                	xor    eax,eax
c0017d31:	83 c4 0c             	add    esp,0xc
c0017d34:	c3                   	ret    
c0017d35:	90                   	nop

c0017d36 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017d36:	55                   	push   ebp
c0017d37:	57                   	push   edi
c0017d38:	56                   	push   esi
c0017d39:	53                   	push   ebx
c0017d3a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017d40:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c0017d47:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0017d4e:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c0017d55:	85 db                	test   ebx,ebx
c0017d57:	0f 84 ce 00 00 00    	je     c0017e2b <ISO9660::readDir(void*, unsigned long, void*, int*)+0xf5>
c0017d5d:	85 ed                	test   ebp,ebp
c0017d5f:	0f 84 c6 00 00 00    	je     c0017e2b <ISO9660::readDir(void*, unsigned long, void*, int*)+0xf5>
c0017d65:	83 ec 0c             	sub    esp,0xc
c0017d68:	68 83 f8 01 c0       	push   0xc001f883
c0017d6d:	e8 48 28 ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0017d72:	b9 02 00 00 00       	mov    ecx,0x2
c0017d77:	89 d8                	mov    eax,ebx
c0017d79:	99                   	cdq    
c0017d7a:	f7 f9                	idiv   ecx
c0017d7c:	83 e8 32             	sub    eax,0x32
c0017d7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0017d82:	e8 3a e8 fe ff       	call   c00065c1 <iso_readdir>
c0017d87:	83 c4 10             	add    esp,0x10
c0017d8a:	89 c6                	mov    esi,eax
c0017d8c:	85 c0                	test   eax,eax
c0017d8e:	75 27                	jne    c0017db7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x81>
c0017d90:	83 ec 0c             	sub    esp,0xc
c0017d93:	68 8e f8 01 c0       	push   0xc001f88e
c0017d98:	e8 1d 28 ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0017d9d:	83 c4 0c             	add    esp,0xc
c0017da0:	68 10 01 00 00       	push   0x110
c0017da5:	6a 00                	push   0x0
c0017da7:	57                   	push   edi
c0017da8:	e8 23 87 fe ff       	call   c00004d0 <memset>
c0017dad:	83 c4 10             	add    esp,0x10
c0017db0:	b8 01 00 00 00       	mov    eax,0x1
c0017db5:	eb 79                	jmp    c0017e30 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xfa>
c0017db7:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0017dbd:	8d 58 08             	lea    ebx,[eax+0x8]
c0017dc0:	83 ec 0c             	sub    esp,0xc
c0017dc3:	53                   	push   ebx
c0017dc4:	e8 77 87 fe ff       	call   c0000540 <strlen>
c0017dc9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017dd1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017dd5:	83 c4 10             	add    esp,0x10
c0017dd8:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0017ddc:	75 0a                	jne    c0017de8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xb2>
c0017dde:	b8 02 00 00 00       	mov    eax,0x2
c0017de3:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0017de6:	74 05                	je     c0017ded <ISO9660::readDir(void*, unsigned long, void*, int*)+0xb7>
c0017de8:	b8 01 00 00 00       	mov    eax,0x1
c0017ded:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017df1:	50                   	push   eax
c0017df2:	50                   	push   eax
c0017df3:	53                   	push   ebx
c0017df4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017df8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0017dfc:	50                   	push   eax
c0017dfd:	e8 fe 87 fe ff       	call   c0000600 <strcpy>
c0017e02:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0017e09:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017e0b:	83 c4 0c             	add    esp,0xc
c0017e0e:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c0017e15:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017e19:	53                   	push   ebx
c0017e1a:	68 a1 f8 01 c0       	push   0xc001f8a1
c0017e1f:	e8 96 27 ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0017e24:	83 c4 10             	add    esp,0x10
c0017e27:	31 c0                	xor    eax,eax
c0017e29:	eb 05                	jmp    c0017e30 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xfa>
c0017e2b:	b8 04 00 00 00       	mov    eax,0x4
c0017e30:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017e36:	5b                   	pop    ebx
c0017e37:	5e                   	pop    esi
c0017e38:	5f                   	pop    edi
c0017e39:	5d                   	pop    ebp
c0017e3a:	c3                   	ret    

c0017e3b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017e3b:	57                   	push   edi
c0017e3c:	56                   	push   esi
c0017e3d:	53                   	push   ebx
c0017e3e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017e42:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017e46:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017e4a:	39 35 24 63 02 c0    	cmp    DWORD PTR ds:0xc0026324,esi
c0017e50:	75 08                	jne    c0017e5a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017e52:	38 1d b0 02 02 c0    	cmp    BYTE PTR ds:0xc00202b0,bl
c0017e58:	74 4a                	je     c0017ea4 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017e5a:	83 ec 0c             	sub    esp,0xc
c0017e5d:	31 d2                	xor    edx,edx
c0017e5f:	68 40 63 02 c0       	push   0xc0026340
c0017e64:	0f be c3             	movsx  eax,bl
c0017e67:	6a 01                	push   0x1
c0017e69:	52                   	push   edx
c0017e6a:	56                   	push   esi
c0017e6b:	ff 34 85 1c 53 02 c0 	push   DWORD PTR [eax*4-0x3ffdace4]
c0017e72:	e8 59 4e ff ff       	call   c000ccd0 <LogicalDisk::read(unsigned long long, int, void*)>
c0017e77:	83 c4 20             	add    esp,0x20
c0017e7a:	85 c0                	test   eax,eax
c0017e7c:	75 0e                	jne    c0017e8c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017e7e:	89 35 24 63 02 c0    	mov    DWORD PTR ds:0xc0026324,esi
c0017e84:	88 1d b0 02 02 c0    	mov    BYTE PTR ds:0xc00202b0,bl
c0017e8a:	eb 18                	jmp    c0017ea4 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017e8c:	50                   	push   eax
c0017e8d:	68 00 08 00 00       	push   0x800
c0017e92:	6a 00                	push   0x0
c0017e94:	57                   	push   edi
c0017e95:	e8 36 86 fe ff       	call   c00004d0 <memset>
c0017e9a:	83 c4 10             	add    esp,0x10
c0017e9d:	b8 01 00 00 00       	mov    eax,0x1
c0017ea2:	eb 0e                	jmp    c0017eb2 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0017ea4:	be 40 63 02 c0       	mov    esi,0xc0026340
c0017ea9:	b9 00 08 00 00       	mov    ecx,0x800
c0017eae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017eb0:	31 c0                	xor    eax,eax
c0017eb2:	5b                   	pop    ebx
c0017eb3:	5e                   	pop    esi
c0017eb4:	5f                   	pop    edi
c0017eb5:	c3                   	ret    

c0017eb6 <ISO9660::tryMount(LogicalDisk*, int)>:
c0017eb6:	53                   	push   ebx
c0017eb7:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017ebd:	c7 05 24 63 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0026324,0xdeadbeef
c0017ec7:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017ece:	8d 58 41             	lea    ebx,[eax+0x41]
c0017ed1:	0f be db             	movsx  ebx,bl
c0017ed4:	53                   	push   ebx
c0017ed5:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017ed9:	50                   	push   eax
c0017eda:	6a 10                	push   0x10
c0017edc:	e8 5a ff ff ff       	call   c0017e3b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017ee1:	83 c4 10             	add    esp,0x10
c0017ee4:	31 d2                	xor    edx,edx
c0017ee6:	85 c0                	test   eax,eax
c0017ee8:	75 33                	jne    c0017f1d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017eea:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017eef:	75 2c                	jne    c0017f1d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017ef1:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017ef6:	75 25                	jne    c0017f1d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017ef8:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017efd:	75 1e                	jne    c0017f1d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017eff:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017f04:	75 17                	jne    c0017f1d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f06:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017f0b:	75 10                	jne    c0017f1d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f0d:	83 ec 0c             	sub    esp,0xc
c0017f10:	53                   	push   ebx
c0017f11:	e8 0f e9 fe ff       	call   c0006825 <init_percd>
c0017f16:	83 c4 10             	add    esp,0x10
c0017f19:	40                   	inc    eax
c0017f1a:	0f 95 c2             	setne  dl
c0017f1d:	88 d0                	mov    al,dl
c0017f1f:	81 c4 08 08 00 00    	add    esp,0x808
c0017f25:	5b                   	pop    ebx
c0017f26:	c3                   	ret    
c0017f27:	90                   	nop

c0017f28 <ISO9660::ISO9660()>:
c0017f28:	83 ec 0c             	sub    esp,0xc
c0017f2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f2f:	83 ec 0c             	sub    esp,0xc
c0017f32:	50                   	push   eax
c0017f33:	e8 a4 29 ff ff       	call   c000a8dc <Filesystem::Filesystem()>
c0017f38:	83 c4 10             	add    esp,0x10
c0017f3b:	ba c8 f8 01 c0       	mov    edx,0xc001f8c8
c0017f40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f44:	89 10                	mov    DWORD PTR [eax],edx
c0017f46:	e8 dc e9 fe ff       	call   c0006927 <fs_iso9660_init>
c0017f4b:	90                   	nop
c0017f4c:	83 c4 0c             	add    esp,0xc
c0017f4f:	c3                   	ret    

c0017f50 <SoundCard::beginPlayback()>:
c0017f50:	c7 44 24 04 28 f9 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f928
c0017f58:	e9 66 83 ff ff       	jmp    c00102c3 <KePanic(char const*)>
c0017f5d:	90                   	nop

c0017f5e <SoundCard::stopPlayback()>:
c0017f5e:	c7 44 24 04 28 f9 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f928
c0017f66:	e9 58 83 ff ff       	jmp    c00102c3 <KePanic(char const*)>
c0017f6b:	90                   	nop

c0017f6c <SoundCard::SoundCard(char const*)>:
c0017f6c:	83 ec 1c             	sub    esp,0x1c
c0017f6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f73:	83 ec 08             	sub    esp,0x8
c0017f76:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f7a:	50                   	push   eax
c0017f7b:	e8 10 3c ff ff       	call   c000bb90 <Device::Device(char const*)>
c0017f80:	83 c4 10             	add    esp,0x10
c0017f83:	ba 74 f9 01 c0       	mov    edx,0xc001f974
c0017f88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f8c:	89 10                	mov    DWORD PTR [eax],edx
c0017f8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f92:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017f99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f9d:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017fa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fab:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017fb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fb9:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017fc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fc7:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0017fd1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017fd9:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017fde:	7f 19                	jg     c0017ff9 <SoundCard::SoundCard(char const*)+0x8d>
c0017fe0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fe4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017fe8:	83 c2 54             	add    edx,0x54
c0017feb:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0017ff3:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017ff7:	eb e0                	jmp    c0017fd9 <SoundCard::SoundCard(char const*)+0x6d>
c0017ff9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ffd:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0018004:	90                   	nop
c0018005:	83 c4 1c             	add    esp,0x1c
c0018008:	c3                   	ret    
c0018009:	90                   	nop

c001800a <SoundCard::~SoundCard()>:
c001800a:	83 ec 0c             	sub    esp,0xc
c001800d:	ba 74 f9 01 c0       	mov    edx,0xc001f974
c0018012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018016:	89 10                	mov    DWORD PTR [eax],edx
c0018018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001801c:	83 ec 0c             	sub    esp,0xc
c001801f:	50                   	push   eax
c0018020:	e8 d5 38 ff ff       	call   c000b8fa <Device::~Device()>
c0018025:	83 c4 10             	add    esp,0x10
c0018028:	90                   	nop
c0018029:	83 c4 0c             	add    esp,0xc
c001802c:	c3                   	ret    
c001802d:	90                   	nop

c001802e <SoundCard::~SoundCard()>:
c001802e:	83 ec 0c             	sub    esp,0xc
c0018031:	83 ec 0c             	sub    esp,0xc
c0018034:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018038:	e8 cd ff ff ff       	call   c001800a <SoundCard::~SoundCard()>
c001803d:	83 c4 10             	add    esp,0x10
c0018040:	83 ec 08             	sub    esp,0x8
c0018043:	68 e8 01 00 00       	push   0x1e8
c0018048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001804c:	e8 73 24 ff ff       	call   c000a4c4 <operator delete(void*, unsigned long)>
c0018051:	83 c4 10             	add    esp,0x10
c0018054:	83 c4 0c             	add    esp,0xc
c0018057:	c3                   	ret    

c0018058 <SoundCard::configureRates(int, int, int)>:
c0018058:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001805c:	31 c0                	xor    eax,eax
c001805e:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0018065:	75 20                	jne    c0018087 <SoundCard::configureRates(int, int, int)+0x2f>
c0018067:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001806b:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0018071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018075:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001807b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001807f:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0018085:	b0 01                	mov    al,0x1
c0018087:	c3                   	ret    

c0018088 <SoundCard::getSamples16(int, short*)>:
c0018088:	55                   	push   ebp
c0018089:	57                   	push   edi
c001808a:	31 ff                	xor    edi,edi
c001808c:	56                   	push   esi
c001808d:	53                   	push   ebx
c001808e:	31 db                	xor    ebx,ebx
c0018090:	83 ec 10             	sub    esp,0x10
c0018093:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0018097:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001809b:	8d 04 36             	lea    eax,[esi+esi*1]
c001809e:	50                   	push   eax
c001809f:	6a 00                	push   0x0
c00180a1:	55                   	push   ebp
c00180a2:	e8 29 84 fe ff       	call   c00004d0 <memset>
c00180a7:	83 c4 10             	add    esp,0x10
c00180aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180ae:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c00180b5:	85 c0                	test   eax,eax
c00180b7:	74 1b                	je     c00180d4 <SoundCard::getSamples16(int, short*)+0x4c>
c00180b9:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c00180bd:	75 15                	jne    c00180d4 <SoundCard::getSamples16(int, short*)+0x4c>
c00180bf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00180c3:	55                   	push   ebp
c00180c4:	56                   	push   esi
c00180c5:	50                   	push   eax
c00180c6:	e8 ed 02 00 00       	call   c00183b8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c00180cb:	83 c4 10             	add    esp,0x10
c00180ce:	39 c7                	cmp    edi,eax
c00180d0:	7d 02                	jge    c00180d4 <SoundCard::getSamples16(int, short*)+0x4c>
c00180d2:	89 c7                	mov    edi,eax
c00180d4:	43                   	inc    ebx
c00180d5:	83 fb 20             	cmp    ebx,0x20
c00180d8:	75 d0                	jne    c00180aa <SoundCard::getSamples16(int, short*)+0x22>
c00180da:	83 c4 0c             	add    esp,0xc
c00180dd:	89 f8                	mov    eax,edi
c00180df:	5b                   	pop    ebx
c00180e0:	5e                   	pop    esi
c00180e1:	5f                   	pop    edi
c00180e2:	5d                   	pop    ebp
c00180e3:	c3                   	ret    

c00180e4 <SoundCard::getSamples32(int, int*)>:
c00180e4:	55                   	push   ebp
c00180e5:	57                   	push   edi
c00180e6:	31 ff                	xor    edi,edi
c00180e8:	56                   	push   esi
c00180e9:	31 f6                	xor    esi,esi
c00180eb:	53                   	push   ebx
c00180ec:	83 ec 10             	sub    esp,0x10
c00180ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180f3:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00180f7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00180fb:	c1 e0 02             	shl    eax,0x2
c00180fe:	50                   	push   eax
c00180ff:	6a 00                	push   0x0
c0018101:	55                   	push   ebp
c0018102:	e8 c9 83 fe ff       	call   c00004d0 <memset>
c0018107:	83 c4 10             	add    esp,0x10
c001810a:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0018111:	85 c0                	test   eax,eax
c0018113:	74 1b                	je     c0018130 <SoundCard::getSamples32(int, int*)+0x4c>
c0018115:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0018119:	75 15                	jne    c0018130 <SoundCard::getSamples32(int, int*)+0x4c>
c001811b:	53                   	push   ebx
c001811c:	55                   	push   ebp
c001811d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018121:	50                   	push   eax
c0018122:	e8 55 03 00 00       	call   c001847c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0018127:	83 c4 10             	add    esp,0x10
c001812a:	39 c6                	cmp    esi,eax
c001812c:	7d 02                	jge    c0018130 <SoundCard::getSamples32(int, int*)+0x4c>
c001812e:	89 c6                	mov    esi,eax
c0018130:	47                   	inc    edi
c0018131:	83 ff 20             	cmp    edi,0x20
c0018134:	75 d4                	jne    c001810a <SoundCard::getSamples32(int, int*)+0x26>
c0018136:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001813c:	85 f6                	test   esi,esi
c001813e:	75 0f                	jne    c001814f <SoundCard::getSamples32(int, int*)+0x6b>
c0018140:	84 c0                	test   al,al
c0018142:	74 1b                	je     c001815f <SoundCard::getSamples32(int, int*)+0x7b>
c0018144:	83 ec 0c             	sub    esp,0xc
c0018147:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018149:	53                   	push   ebx
c001814a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001814d:	eb 0d                	jmp    c001815c <SoundCard::getSamples32(int, int*)+0x78>
c001814f:	84 c0                	test   al,al
c0018151:	75 0c                	jne    c001815f <SoundCard::getSamples32(int, int*)+0x7b>
c0018153:	83 ec 0c             	sub    esp,0xc
c0018156:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018158:	53                   	push   ebx
c0018159:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001815c:	83 c4 10             	add    esp,0x10
c001815f:	83 c4 0c             	add    esp,0xc
c0018162:	89 f0                	mov    eax,esi
c0018164:	5b                   	pop    ebx
c0018165:	5e                   	pop    esi
c0018166:	5f                   	pop    edi
c0018167:	5d                   	pop    ebp
c0018168:	c3                   	ret    
c0018169:	90                   	nop

c001816a <SoundCard::addChannel(SoundPort*)>:
c001816a:	83 ec 0c             	sub    esp,0xc
c001816d:	31 c0                	xor    eax,eax
c001816f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018173:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001817b:	74 1b                	je     c0018198 <SoundCard::addChannel(SoundPort*)+0x2e>
c001817d:	40                   	inc    eax
c001817e:	83 f8 20             	cmp    eax,0x20
c0018181:	75 f0                	jne    c0018173 <SoundCard::addChannel(SoundPort*)+0x9>
c0018183:	83 ec 0c             	sub    esp,0xc
c0018186:	68 4d f9 01 c0       	push   0xc001f94d
c001818b:	e8 33 81 ff ff       	call   c00102c3 <KePanic(char const*)>
c0018190:	83 c4 10             	add    esp,0x10
c0018193:	83 c8 ff             	or     eax,0xffffffff
c0018196:	eb 0b                	jmp    c00181a3 <SoundCard::addChannel(SoundPort*)+0x39>
c0018198:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001819c:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c00181a3:	83 c4 0c             	add    esp,0xc
c00181a6:	c3                   	ret    
c00181a7:	90                   	nop

c00181a8 <SoundCard::removeChannel(int)>:
c00181a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00181b0:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c00181bb:	c3                   	ret    

c00181bc <SoundPort::SoundPort(int, int, int, int)>:
c00181bc:	83 ec 0c             	sub    esp,0xc
c00181bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181c3:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00181ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181ce:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00181d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00181da:	89 10                	mov    DWORD PTR [eax],edx
c00181dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181e0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00181e4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00181e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181eb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00181ef:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00181f2:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c00181f7:	75 13                	jne    c001820c <SoundPort::SoundPort(int, int, int, int)+0x50>
c00181f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00181ff:	05 a0 0f 00 00       	add    eax,0xfa0
c0018204:	01 c0                	add    eax,eax
c0018206:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001820a:	66 90                	xchg   ax,ax
c001820c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018210:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018214:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018217:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001821b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0018222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018226:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018229:	c1 e0 02             	shl    eax,0x2
c001822c:	83 ec 0c             	sub    esp,0xc
c001822f:	50                   	push   eax
c0018230:	e8 ec f5 fe ff       	call   c0007821 <malloc>
c0018235:	83 c4 10             	add    esp,0x10
c0018238:	89 c2                	mov    edx,eax
c001823a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001823e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018241:	90                   	nop
c0018242:	83 c4 0c             	add    esp,0xc
c0018245:	c3                   	ret    
c0018246:	66 90                	xchg   ax,ax

c0018248 <SoundPort::~SoundPort()>:
c0018248:	83 ec 0c             	sub    esp,0xc
c001824b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001824f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018252:	85 c0                	test   eax,eax
c0018254:	74 1e                	je     c0018274 <SoundPort::~SoundPort()+0x2c>
c0018256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001825a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001825d:	83 ec 0c             	sub    esp,0xc
c0018260:	50                   	push   eax
c0018261:	e8 cb f5 fe ff       	call   c0007831 <free>
c0018266:	83 c4 10             	add    esp,0x10
c0018269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001826d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018274:	90                   	nop
c0018275:	83 c4 0c             	add    esp,0xc
c0018278:	c3                   	ret    
c0018279:	90                   	nop
c001827a:	66 90                	xchg   ax,ax

c001827c <SoundPort::unpause()>:
c001827c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018280:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0018284:	c3                   	ret    
c0018285:	90                   	nop
c0018286:	66 90                	xchg   ax,ax

c0018288 <SoundPort::pause()>:
c0018288:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001828c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0018290:	c3                   	ret    
c0018291:	90                   	nop
c0018292:	66 90                	xchg   ax,ax

c0018294 <SoundPort::getBufferUsed()>:
c0018294:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018298:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001829b:	c3                   	ret    

c001829c <SoundPort::getBufferSize()>:
c001829c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182a0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00182a3:	c3                   	ret    

c00182a4 <SoundPort::buffer16(short*, int)>:
c00182a4:	55                   	push   ebp
c00182a5:	57                   	push   edi
c00182a6:	56                   	push   esi
c00182a7:	53                   	push   ebx
c00182a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00182ac:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00182b0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00182b3:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c00182b6:	74 68                	je     c0018320 <SoundPort::buffer16(short*, int)+0x7c>
c00182b8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00182bc:	85 c9                	test   ecx,ecx
c00182be:	7e 60                	jle    c0018320 <SoundPort::buffer16(short*, int)+0x7c>
c00182c0:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c00182c4:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00182c7:	c1 e1 0f             	shl    ecx,0xf
c00182ca:	8d 70 01             	lea    esi,[eax+0x1]
c00182cd:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00182d0:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c00182d3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00182d6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00182d9:	74 4d                	je     c0018328 <SoundPort::buffer16(short*, int)+0x84>
c00182db:	31 f6                	xor    esi,esi
c00182dd:	eb 21                	jmp    c0018300 <SoundPort::buffer16(short*, int)+0x5c>
c00182df:	90                   	nop
c00182e0:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c00182e5:	8d 79 01             	lea    edi,[ecx+0x1]
c00182e8:	c1 e3 0f             	shl    ebx,0xf
c00182eb:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c00182ee:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c00182f1:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c00182f4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00182f7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00182fa:	74 1c                	je     c0018318 <SoundPort::buffer16(short*, int)+0x74>
c00182fc:	89 c6                	mov    esi,eax
c00182fe:	66 90                	xchg   ax,ax
c0018300:	8d 46 01             	lea    eax,[esi+0x1]
c0018303:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0018307:	75 d7                	jne    c00182e0 <SoundPort::buffer16(short*, int)+0x3c>
c0018309:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001830d:	8d 76 00             	lea    esi,[esi+0x0]
c0018310:	5b                   	pop    ebx
c0018311:	5e                   	pop    esi
c0018312:	5f                   	pop    edi
c0018313:	5d                   	pop    ebp
c0018314:	c3                   	ret    
c0018315:	8d 76 00             	lea    esi,[esi+0x0]
c0018318:	5b                   	pop    ebx
c0018319:	8d 46 02             	lea    eax,[esi+0x2]
c001831c:	5e                   	pop    esi
c001831d:	5f                   	pop    edi
c001831e:	5d                   	pop    ebp
c001831f:	c3                   	ret    
c0018320:	5b                   	pop    ebx
c0018321:	31 c0                	xor    eax,eax
c0018323:	5e                   	pop    esi
c0018324:	5f                   	pop    edi
c0018325:	5d                   	pop    ebp
c0018326:	c3                   	ret    
c0018327:	90                   	nop
c0018328:	b8 01 00 00 00       	mov    eax,0x1
c001832d:	eb e1                	jmp    c0018310 <SoundPort::buffer16(short*, int)+0x6c>
c001832f:	90                   	nop

c0018330 <SoundPort::buffer32(int*, int)>:
c0018330:	55                   	push   ebp
c0018331:	57                   	push   edi
c0018332:	56                   	push   esi
c0018333:	53                   	push   ebx
c0018334:	51                   	push   ecx
c0018335:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018339:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001833d:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018340:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018344:	89 04 24             	mov    DWORD PTR [esp],eax
c0018347:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001834a:	74 5c                	je     c00183a8 <SoundPort::buffer32(int*, int)+0x78>
c001834c:	85 c0                	test   eax,eax
c001834e:	7e 58                	jle    c00183a8 <SoundPort::buffer32(int*, int)+0x78>
c0018350:	8d 71 01             	lea    esi,[ecx+0x1]
c0018353:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0018356:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0018359:	8b 37                	mov    esi,DWORD PTR [edi]
c001835b:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001835e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018361:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018364:	74 4a                	je     c00183b0 <SoundPort::buffer32(int*, int)+0x80>
c0018366:	31 f6                	xor    esi,esi
c0018368:	eb 1e                	jmp    c0018388 <SoundPort::buffer32(int*, int)+0x58>
c001836a:	66 90                	xchg   ax,ax
c001836c:	8d 69 01             	lea    ebp,[ecx+0x1]
c001836f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0018372:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0018375:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0018378:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001837c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001837f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018382:	74 18                	je     c001839c <SoundPort::buffer32(int*, int)+0x6c>
c0018384:	89 de                	mov    esi,ebx
c0018386:	66 90                	xchg   ax,ax
c0018388:	8d 5e 01             	lea    ebx,[esi+0x1]
c001838b:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001838e:	75 dc                	jne    c001836c <SoundPort::buffer32(int*, int)+0x3c>
c0018390:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0018393:	90                   	nop
c0018394:	5a                   	pop    edx
c0018395:	5b                   	pop    ebx
c0018396:	5e                   	pop    esi
c0018397:	5f                   	pop    edi
c0018398:	5d                   	pop    ebp
c0018399:	c3                   	ret    
c001839a:	66 90                	xchg   ax,ax
c001839c:	5a                   	pop    edx
c001839d:	8d 46 02             	lea    eax,[esi+0x2]
c00183a0:	5b                   	pop    ebx
c00183a1:	5e                   	pop    esi
c00183a2:	5f                   	pop    edi
c00183a3:	5d                   	pop    ebp
c00183a4:	c3                   	ret    
c00183a5:	8d 76 00             	lea    esi,[esi+0x0]
c00183a8:	5a                   	pop    edx
c00183a9:	31 c0                	xor    eax,eax
c00183ab:	5b                   	pop    ebx
c00183ac:	5e                   	pop    esi
c00183ad:	5f                   	pop    edi
c00183ae:	5d                   	pop    ebp
c00183af:	c3                   	ret    
c00183b0:	b8 01 00 00 00       	mov    eax,0x1
c00183b5:	eb dd                	jmp    c0018394 <SoundPort::buffer32(int*, int)+0x64>
c00183b7:	90                   	nop

c00183b8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c00183b8:	57                   	push   edi
c00183b9:	56                   	push   esi
c00183ba:	53                   	push   ebx
c00183bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00183bf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00183c3:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c00183c9:	39 03                	cmp    DWORD PTR [ebx],eax
c00183cb:	74 13                	je     c00183e0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c00183cd:	83 ec 0c             	sub    esp,0xc
c00183d0:	68 a0 f9 01 c0       	push   0xc001f9a0
c00183d5:	e8 e9 7e ff ff       	call   c00102c3 <KePanic(char const*)>
c00183da:	83 c4 10             	add    esp,0x10
c00183dd:	8d 76 00             	lea    esi,[esi+0x0]
c00183e0:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c00183e6:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c00183e9:	74 11                	je     c00183fc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c00183eb:	83 ec 0c             	sub    esp,0xc
c00183ee:	68 df f9 01 c0       	push   0xc001f9df
c00183f3:	e8 cb 7e ff ff       	call   c00102c3 <KePanic(char const*)>
c00183f8:	83 c4 10             	add    esp,0x10
c00183fb:	90                   	nop
c00183fc:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c0018402:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0018405:	74 11                	je     c0018418 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0018407:	83 ec 0c             	sub    esp,0xc
c001840a:	68 df f9 01 c0       	push   0xc001f9df
c001840f:	e8 af 7e ff ff       	call   c00102c3 <KePanic(char const*)>
c0018414:	83 c4 10             	add    esp,0x10
c0018417:	90                   	nop
c0018418:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001841b:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001841f:	7e 07                	jle    c0018428 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0018421:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018425:	8d 76 00             	lea    esi,[esi+0x0]
c0018428:	85 f6                	test   esi,esi
c001842a:	7e 2c                	jle    c0018458 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001842c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018430:	8d 3c 36             	lea    edi,[esi+esi*1]
c0018433:	31 c9                	xor    ecx,ecx
c0018435:	01 d7                	add    edi,edx
c0018437:	90                   	nop
c0018438:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001843b:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001843e:	85 c0                	test   eax,eax
c0018440:	79 06                	jns    c0018448 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0018442:	05 ff 7f 00 00       	add    eax,0x7fff
c0018447:	90                   	nop
c0018448:	c1 f8 0f             	sar    eax,0xf
c001844b:	83 c1 04             	add    ecx,0x4
c001844e:	66 01 02             	add    WORD PTR [edx],ax
c0018451:	83 c2 02             	add    edx,0x2
c0018454:	39 d7                	cmp    edi,edx
c0018456:	75 e0                	jne    c0018438 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0018458:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001845b:	50                   	push   eax
c001845c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001845f:	29 f0                	sub    eax,esi
c0018461:	c1 e0 02             	shl    eax,0x2
c0018464:	50                   	push   eax
c0018465:	8d 04 b2             	lea    eax,[edx+esi*4]
c0018468:	50                   	push   eax
c0018469:	52                   	push   edx
c001846a:	e8 71 7f fe ff       	call   c00003e0 <memmove>
c001846f:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c0018472:	83 c4 10             	add    esp,0x10
c0018475:	89 f0                	mov    eax,esi
c0018477:	5b                   	pop    ebx
c0018478:	5e                   	pop    esi
c0018479:	5f                   	pop    edi
c001847a:	c3                   	ret    
c001847b:	90                   	nop

c001847c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001847c:	57                   	push   edi
c001847d:	56                   	push   esi
c001847e:	53                   	push   ebx
c001847f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018483:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018487:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001848b:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0018491:	39 06                	cmp    DWORD PTR [esi],eax
c0018493:	74 13                	je     c00184a8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0018495:	83 ec 0c             	sub    esp,0xc
c0018498:	68 c0 f9 01 c0       	push   0xc001f9c0
c001849d:	e8 21 7e ff ff       	call   c00102c3 <KePanic(char const*)>
c00184a2:	83 c4 10             	add    esp,0x10
c00184a5:	8d 76 00             	lea    esi,[esi+0x0]
c00184a8:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c00184ae:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c00184b1:	74 11                	je     c00184c4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c00184b3:	83 ec 0c             	sub    esp,0xc
c00184b6:	68 fb f9 01 c0       	push   0xc001f9fb
c00184bb:	e8 03 7e ff ff       	call   c00102c3 <KePanic(char const*)>
c00184c0:	83 c4 10             	add    esp,0x10
c00184c3:	90                   	nop
c00184c4:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c00184ca:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c00184cd:	74 11                	je     c00184e0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c00184cf:	83 ec 0c             	sub    esp,0xc
c00184d2:	68 fb f9 01 c0       	push   0xc001f9fb
c00184d7:	e8 e7 7d ff ff       	call   c00102c3 <KePanic(char const*)>
c00184dc:	83 c4 10             	add    esp,0x10
c00184df:	90                   	nop
c00184e0:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00184e3:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c00184e7:	7e 07                	jle    c00184f0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c00184e9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00184ed:	8d 76 00             	lea    esi,[esi+0x0]
c00184f0:	85 ff                	test   edi,edi
c00184f2:	7e 1c                	jle    c0018510 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c00184f4:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c00184fb:	31 c0                	xor    eax,eax
c00184fd:	8d 76 00             	lea    esi,[esi+0x0]
c0018500:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0018503:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0018506:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0018509:	83 c0 04             	add    eax,0x4
c001850c:	39 c1                	cmp    ecx,eax
c001850e:	75 f0                	jne    c0018500 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0018510:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0018513:	50                   	push   eax
c0018514:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0018517:	29 f8                	sub    eax,edi
c0018519:	c1 e0 02             	shl    eax,0x2
c001851c:	50                   	push   eax
c001851d:	8d 04 ba             	lea    eax,[edx+edi*4]
c0018520:	50                   	push   eax
c0018521:	52                   	push   edx
c0018522:	e8 b9 7e fe ff       	call   c00003e0 <memmove>
c0018527:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001852a:	83 c4 10             	add    esp,0x10
c001852d:	89 f8                	mov    eax,edi
c001852f:	5b                   	pop    ebx
c0018530:	5e                   	pop    esi
c0018531:	5f                   	pop    edi
c0018532:	c3                   	ret    
c0018533:	90                   	nop

c0018534 <PCI::open(int, int, void*)>:
c0018534:	83 ec 18             	sub    esp,0x18
c0018537:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001853b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001853f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0018545:	8b 10                	mov    edx,DWORD PTR [eax]
c0018547:	50                   	push   eax
c0018548:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001854b:	31 c0                	xor    eax,eax
c001854d:	83 c4 1c             	add    esp,0x1c
c0018550:	c3                   	ret    
c0018551:	90                   	nop

c0018552 <PCI::close(int, int, void*)>:
c0018552:	31 c0                	xor    eax,eax
c0018554:	c3                   	ret    
c0018555:	90                   	nop

c0018556 <PCI::PCI()>:
c0018556:	83 ec 0c             	sub    esp,0xc
c0018559:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001855d:	83 ec 08             	sub    esp,0x8
c0018560:	68 17 fa 01 c0       	push   0xc001fa17
c0018565:	50                   	push   eax
c0018566:	e8 e1 2d ff ff       	call   c000b34c <Bus::Bus(char const*)>
c001856b:	83 c4 10             	add    esp,0x10
c001856e:	ba c0 fa 01 c0       	mov    edx,0xc001fac0
c0018573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018577:	89 10                	mov    DWORD PTR [eax],edx
c0018579:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001857d:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0018587:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001858b:	a3 40 6b 02 c0       	mov    ds:0xc0026b40,eax
c0018590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018594:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001859a:	31 d2                	xor    edx,edx
c001859c:	88 c2                	mov    dl,al
c001859e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185a2:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00185a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185ad:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00185b3:	31 d2                	xor    edx,edx
c00185b5:	88 c2                	mov    dl,al
c00185b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185bb:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00185c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185c4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00185ca:	8d 50 01             	lea    edx,[eax+0x1]
c00185cd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00185d1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00185d7:	31 d2                	xor    edx,edx
c00185d9:	88 c2                	mov    dl,al
c00185db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185df:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00185e3:	83 c9 c0             	or     ecx,0xffffffc0
c00185e6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00185ea:	90                   	nop
c00185eb:	83 c4 0c             	add    esp,0xc
c00185ee:	c3                   	ret    
c00185ef:	90                   	nop

c00185f0 <PCI::readBAR8(unsigned int, int)>:
c00185f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185f8:	f6 c2 01             	test   dl,0x1
c00185fb:	74 07                	je     c0018604 <PCI::readBAR8(unsigned int, int)+0x14>
c00185fd:	83 e2 fc             	and    edx,0xfffffffc
c0018600:	01 c2                	add    edx,eax
c0018602:	ec                   	in     al,dx
c0018603:	c3                   	ret    
c0018604:	83 e2 f0             	and    edx,0xfffffff0
c0018607:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001860a:	c3                   	ret    
c001860b:	90                   	nop

c001860c <PCI::readBAR16(unsigned int, int)>:
c001860c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018610:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018614:	f6 c2 01             	test   dl,0x1
c0018617:	74 08                	je     c0018621 <PCI::readBAR16(unsigned int, int)+0x15>
c0018619:	83 e2 fc             	and    edx,0xfffffffc
c001861c:	01 c2                	add    edx,eax
c001861e:	66 ed                	in     ax,dx
c0018620:	c3                   	ret    
c0018621:	83 e2 f0             	and    edx,0xfffffff0
c0018624:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0018628:	c3                   	ret    
c0018629:	90                   	nop

c001862a <PCI::readBAR32(unsigned int, int)>:
c001862a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001862e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018632:	f6 c2 01             	test   dl,0x1
c0018635:	74 07                	je     c001863e <PCI::readBAR32(unsigned int, int)+0x14>
c0018637:	83 e2 fc             	and    edx,0xfffffffc
c001863a:	01 c2                	add    edx,eax
c001863c:	ed                   	in     eax,dx
c001863d:	c3                   	ret    
c001863e:	83 e2 f0             	and    edx,0xfffffff0
c0018641:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0018644:	c3                   	ret    
c0018645:	90                   	nop

c0018646 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0018646:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001864a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001864e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018652:	f6 c2 01             	test   dl,0x1
c0018655:	74 07                	je     c001865e <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0018657:	83 e2 fc             	and    edx,0xfffffffc
c001865a:	01 ca                	add    edx,ecx
c001865c:	ee                   	out    dx,al
c001865d:	c3                   	ret    
c001865e:	83 e2 f0             	and    edx,0xfffffff0
c0018661:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0018664:	c3                   	ret    
c0018665:	90                   	nop

c0018666 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0018666:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001866a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001866e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018672:	f6 c2 01             	test   dl,0x1
c0018675:	74 08                	je     c001867f <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0018677:	83 e2 fc             	and    edx,0xfffffffc
c001867a:	01 ca                	add    edx,ecx
c001867c:	66 ef                	out    dx,ax
c001867e:	c3                   	ret    
c001867f:	83 e2 f0             	and    edx,0xfffffff0
c0018682:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0018686:	c3                   	ret    
c0018687:	90                   	nop

c0018688 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0018688:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001868c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018690:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018694:	f6 c2 01             	test   dl,0x1
c0018697:	74 07                	je     c00186a0 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0018699:	83 e2 fc             	and    edx,0xfffffffc
c001869c:	01 ca                	add    edx,ecx
c001869e:	ef                   	out    dx,eax
c001869f:	c3                   	ret    
c00186a0:	83 e2 f0             	and    edx,0xfffffff0
c00186a3:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00186a6:	c3                   	ret    
c00186a7:	90                   	nop

c00186a8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00186a8:	55                   	push   ebp
c00186a9:	57                   	push   edi
c00186aa:	56                   	push   esi
c00186ab:	53                   	push   ebx
c00186ac:	83 ec 0c             	sub    esp,0xc
c00186af:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00186b3:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00186b7:	89 f0                	mov    eax,esi
c00186b9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00186bd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00186c1:	3c 07                	cmp    al,0x7
c00186c3:	76 10                	jbe    c00186d5 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00186c5:	83 ec 0c             	sub    esp,0xc
c00186c8:	68 1f fa 01 c0       	push   0xc001fa1f
c00186cd:	e8 f1 7b ff ff       	call   c00102c3 <KePanic(char const*)>
c00186d2:	83 c4 10             	add    esp,0x10
c00186d5:	80 fb 0f             	cmp    bl,0xf
c00186d8:	76 10                	jbe    c00186ea <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00186da:	83 ec 0c             	sub    esp,0xc
c00186dd:	68 4f fa 01 c0       	push   0xc001fa4f
c00186e2:	e8 dc 7b ff ff       	call   c00102c3 <KePanic(char const*)>
c00186e7:	83 c4 10             	add    esp,0x10
c00186ea:	8d 04 36             	lea    eax,[esi+esi*1]
c00186ed:	ba f8 0c 00 00       	mov    edx,0xcf8
c00186f2:	83 c8 f0             	or     eax,0xfffffff0
c00186f5:	ee                   	out    dx,al
c00186f6:	ba fa 0c 00 00       	mov    edx,0xcfa
c00186fb:	89 e8                	mov    eax,ebp
c00186fd:	ee                   	out    dx,al
c00186fe:	83 c4 0c             	add    esp,0xc
c0018701:	89 d8                	mov    eax,ebx
c0018703:	66 81 e7 fc 00       	and    di,0xfc
c0018708:	5b                   	pop    ebx
c0018709:	c1 e0 08             	shl    eax,0x8
c001870c:	5e                   	pop    esi
c001870d:	09 f8                	or     eax,edi
c001870f:	5f                   	pop    edi
c0018710:	66 0d 00 c0          	or     ax,0xc000
c0018714:	5d                   	pop    ebp
c0018715:	c3                   	ret    

c0018716 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018716:	57                   	push   edi
c0018717:	56                   	push   esi
c0018718:	53                   	push   ebx
c0018719:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001871d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018721:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0018727:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001872b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001872f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018733:	83 ff 01             	cmp    edi,0x1
c0018736:	75 3e                	jne    c0018776 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0018738:	89 de                	mov    esi,ebx
c001873a:	0f b6 c0             	movzx  eax,al
c001873d:	81 e6 fc 00 00 00    	and    esi,0xfc
c0018743:	c1 e0 10             	shl    eax,0x10
c0018746:	0f b6 c9             	movzx  ecx,cl
c0018749:	09 f0                	or     eax,esi
c001874b:	c1 e1 08             	shl    ecx,0x8
c001874e:	0f b6 d2             	movzx  edx,dl
c0018751:	09 c8                	or     eax,ecx
c0018753:	c1 e2 0b             	shl    edx,0xb
c0018756:	09 d0                	or     eax,edx
c0018758:	ba f8 0c 00 00       	mov    edx,0xcf8
c001875d:	0d 00 00 00 80       	or     eax,0x80000000
c0018762:	ef                   	out    dx,eax
c0018763:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018768:	ed                   	in     eax,dx
c0018769:	83 e3 02             	and    ebx,0x2
c001876c:	0f b6 cb             	movzx  ecx,bl
c001876f:	c1 e1 03             	shl    ecx,0x3
c0018772:	d3 e8                	shr    eax,cl
c0018774:	eb 43                	jmp    c00187b9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0018776:	83 ff 02             	cmp    edi,0x2
c0018779:	75 2c                	jne    c00187a7 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001877b:	83 ec 0c             	sub    esp,0xc
c001877e:	0f b6 c9             	movzx  ecx,cl
c0018781:	0f b6 d2             	movzx  edx,dl
c0018784:	0f b6 fb             	movzx  edi,bl
c0018787:	0f b6 c0             	movzx  eax,al
c001878a:	57                   	push   edi
c001878b:	51                   	push   ecx
c001878c:	52                   	push   edx
c001878d:	50                   	push   eax
c001878e:	56                   	push   esi
c001878f:	e8 14 ff ff ff       	call   c00186a8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018794:	89 c2                	mov    edx,eax
c0018796:	ed                   	in     eax,dx
c0018797:	83 e3 02             	and    ebx,0x2
c001879a:	83 c4 20             	add    esp,0x20
c001879d:	0f b6 cb             	movzx  ecx,bl
c00187a0:	c1 e1 03             	shl    ecx,0x3
c00187a3:	d3 e8                	shr    eax,cl
c00187a5:	eb 12                	jmp    c00187b9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00187a7:	83 ec 0c             	sub    esp,0xc
c00187aa:	68 7f fa 01 c0       	push   0xc001fa7f
c00187af:	e8 0f 7b ff ff       	call   c00102c3 <KePanic(char const*)>
c00187b4:	83 c4 10             	add    esp,0x10
c00187b7:	31 c0                	xor    eax,eax
c00187b9:	5b                   	pop    ebx
c00187ba:	5e                   	pop    esi
c00187bb:	5f                   	pop    edi
c00187bc:	c3                   	ret    
c00187bd:	90                   	nop

c00187be <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00187be:	83 ec 18             	sub    esp,0x18
c00187c1:	6a 00                	push   0x0
c00187c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187c8:	50                   	push   eax
c00187c9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187ce:	50                   	push   eax
c00187cf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187d4:	50                   	push   eax
c00187d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187d9:	e8 38 ff ff ff       	call   c0018716 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187de:	83 c4 2c             	add    esp,0x2c
c00187e1:	c3                   	ret    

c00187e2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00187e2:	83 ec 18             	sub    esp,0x18
c00187e5:	6a 0e                	push   0xe
c00187e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187ec:	50                   	push   eax
c00187ed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187f2:	50                   	push   eax
c00187f3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187f8:	50                   	push   eax
c00187f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187fd:	e8 14 ff ff ff       	call   c0018716 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018802:	83 c4 2c             	add    esp,0x2c
c0018805:	0f b6 c0             	movzx  eax,al
c0018808:	c3                   	ret    
c0018809:	90                   	nop

c001880a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001880a:	55                   	push   ebp
c001880b:	57                   	push   edi
c001880c:	56                   	push   esi
c001880d:	53                   	push   ebx
c001880e:	83 ec 18             	sub    esp,0x18
c0018811:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0018816:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001881b:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0018820:	6a 0a                	push   0xa
c0018822:	56                   	push   esi
c0018823:	55                   	push   ebp
c0018824:	57                   	push   edi
c0018825:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018829:	e8 e8 fe ff ff       	call   c0018716 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001882e:	83 c4 14             	add    esp,0x14
c0018831:	89 c3                	mov    ebx,eax
c0018833:	6a 0a                	push   0xa
c0018835:	0f b6 db             	movzx  ebx,bl
c0018838:	56                   	push   esi
c0018839:	55                   	push   ebp
c001883a:	57                   	push   edi
c001883b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001883f:	e8 d2 fe ff ff       	call   c0018716 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018844:	83 c4 2c             	add    esp,0x2c
c0018847:	25 00 ff 00 00       	and    eax,0xff00
c001884c:	09 d8                	or     eax,ebx
c001884e:	5b                   	pop    ebx
c001884f:	5e                   	pop    esi
c0018850:	5f                   	pop    edi
c0018851:	5d                   	pop    ebp
c0018852:	c3                   	ret    
c0018853:	90                   	nop

c0018854 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0018854:	83 ec 18             	sub    esp,0x18
c0018857:	6a 08                	push   0x8
c0018859:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001885e:	50                   	push   eax
c001885f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018864:	50                   	push   eax
c0018865:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001886a:	50                   	push   eax
c001886b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001886f:	e8 a2 fe ff ff       	call   c0018716 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018874:	83 c4 2c             	add    esp,0x2c
c0018877:	0f b6 c4             	movzx  eax,ah
c001887a:	c3                   	ret    
c001887b:	90                   	nop

c001887c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001887c:	83 ec 18             	sub    esp,0x18
c001887f:	6a 08                	push   0x8
c0018881:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018886:	50                   	push   eax
c0018887:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001888c:	50                   	push   eax
c001888d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018892:	50                   	push   eax
c0018893:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018897:	e8 7a fe ff ff       	call   c0018716 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001889c:	83 c4 2c             	add    esp,0x2c
c001889f:	c3                   	ret    

c00188a0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00188a0:	83 ec 18             	sub    esp,0x18
c00188a3:	6a 3c                	push   0x3c
c00188a5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188aa:	50                   	push   eax
c00188ab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188b0:	50                   	push   eax
c00188b1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188b6:	50                   	push   eax
c00188b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188bb:	e8 56 fe ff ff       	call   c0018716 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188c0:	83 c4 2c             	add    esp,0x2c
c00188c3:	c3                   	ret    

c00188c4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00188c4:	83 ec 18             	sub    esp,0x18
c00188c7:	6a 18                	push   0x18
c00188c9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188ce:	50                   	push   eax
c00188cf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188d4:	50                   	push   eax
c00188d5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188da:	50                   	push   eax
c00188db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188df:	e8 32 fe ff ff       	call   c0018716 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188e4:	83 c4 2c             	add    esp,0x2c
c00188e7:	0f b6 c4             	movzx  eax,ah
c00188ea:	c3                   	ret    
c00188eb:	90                   	nop

c00188ec <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00188ec:	55                   	push   ebp
c00188ed:	57                   	push   edi
c00188ee:	56                   	push   esi
c00188ef:	53                   	push   ebx
c00188f0:	83 ec 28             	sub    esp,0x28
c00188f3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00188f7:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c00188fc:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0018901:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0018906:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001890d:	8d 43 12             	lea    eax,[ebx+0x12]
c0018910:	83 c3 10             	add    ebx,0x10
c0018913:	0f b6 c0             	movzx  eax,al
c0018916:	0f b6 db             	movzx  ebx,bl
c0018919:	50                   	push   eax
c001891a:	51                   	push   ecx
c001891b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001891f:	57                   	push   edi
c0018920:	55                   	push   ebp
c0018921:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018925:	e8 ec fd ff ff       	call   c0018716 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001892a:	83 c4 14             	add    esp,0x14
c001892d:	89 c6                	mov    esi,eax
c001892f:	53                   	push   ebx
c0018930:	c1 e6 10             	shl    esi,0x10
c0018933:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018937:	51                   	push   ecx
c0018938:	57                   	push   edi
c0018939:	55                   	push   ebp
c001893a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001893e:	e8 d3 fd ff ff       	call   c0018716 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018943:	83 c4 3c             	add    esp,0x3c
c0018946:	0f b7 c0             	movzx  eax,ax
c0018949:	5b                   	pop    ebx
c001894a:	09 f0                	or     eax,esi
c001894c:	5e                   	pop    esi
c001894d:	5f                   	pop    edi
c001894e:	5d                   	pop    ebp
c001894f:	c3                   	ret    

c0018950 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0018950:	55                   	push   ebp
c0018951:	57                   	push   edi
c0018952:	56                   	push   esi
c0018953:	53                   	push   ebx
c0018954:	83 ec 0c             	sub    esp,0xc
c0018957:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001895b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001895f:	89 f5                	mov    ebp,esi
c0018961:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0018967:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001896b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001896f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018973:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0018977:	83 f9 01             	cmp    ecx,0x1
c001897a:	75 5d                	jne    c00189d9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001897c:	0f b6 c8             	movzx  ecx,al
c001897f:	0f b6 d2             	movzx  edx,dl
c0018982:	c1 e1 10             	shl    ecx,0x10
c0018985:	c1 e2 0b             	shl    edx,0xb
c0018988:	89 f0                	mov    eax,esi
c001898a:	25 fc 00 00 00       	and    eax,0xfc
c001898f:	09 c1                	or     ecx,eax
c0018991:	89 e8                	mov    eax,ebp
c0018993:	0f b6 c0             	movzx  eax,al
c0018996:	c1 e0 08             	shl    eax,0x8
c0018999:	09 c1                	or     ecx,eax
c001899b:	09 d1                	or     ecx,edx
c001899d:	ba f8 0c 00 00       	mov    edx,0xcf8
c00189a2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00189a8:	89 c8                	mov    eax,ecx
c00189aa:	ef                   	out    dx,eax
c00189ab:	ba fc 0c 00 00       	mov    edx,0xcfc
c00189b0:	ed                   	in     eax,dx
c00189b1:	0f b7 db             	movzx  ebx,bx
c00189b4:	83 e6 02             	and    esi,0x2
c00189b7:	74 0a                	je     c00189c3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c00189b9:	0f b7 d0             	movzx  edx,ax
c00189bc:	c1 e3 10             	shl    ebx,0x10
c00189bf:	09 d3                	or     ebx,edx
c00189c1:	eb 05                	jmp    c00189c8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00189c3:	66 31 c0             	xor    ax,ax
c00189c6:	09 c3                	or     ebx,eax
c00189c8:	ba f8 0c 00 00       	mov    edx,0xcf8
c00189cd:	89 c8                	mov    eax,ecx
c00189cf:	ef                   	out    dx,eax
c00189d0:	ba fc 0c 00 00       	mov    edx,0xcfc
c00189d5:	89 d8                	mov    eax,ebx
c00189d7:	eb 41                	jmp    c0018a1a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00189d9:	83 f9 02             	cmp    ecx,0x2
c00189dc:	75 45                	jne    c0018a23 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00189de:	83 ec 0c             	sub    esp,0xc
c00189e1:	0f b6 d2             	movzx  edx,dl
c00189e4:	89 f1                	mov    ecx,esi
c00189e6:	0f b6 c0             	movzx  eax,al
c00189e9:	0f b6 f1             	movzx  esi,cl
c00189ec:	89 e9                	mov    ecx,ebp
c00189ee:	56                   	push   esi
c00189ef:	0f b6 c9             	movzx  ecx,cl
c00189f2:	51                   	push   ecx
c00189f3:	52                   	push   edx
c00189f4:	50                   	push   eax
c00189f5:	57                   	push   edi
c00189f6:	e8 ad fc ff ff       	call   c00186a8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00189fb:	89 c2                	mov    edx,eax
c00189fd:	ed                   	in     eax,dx
c00189fe:	83 c4 20             	add    esp,0x20
c0018a01:	0f b7 db             	movzx  ebx,bx
c0018a04:	f6 c2 02             	test   dl,0x2
c0018a07:	74 0c                	je     c0018a15 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0018a09:	0f b7 c8             	movzx  ecx,ax
c0018a0c:	89 d8                	mov    eax,ebx
c0018a0e:	c1 e0 10             	shl    eax,0x10
c0018a11:	09 c8                	or     eax,ecx
c0018a13:	eb 05                	jmp    c0018a1a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018a15:	66 31 c0             	xor    ax,ax
c0018a18:	09 d8                	or     eax,ebx
c0018a1a:	ef                   	out    dx,eax
c0018a1b:	83 c4 0c             	add    esp,0xc
c0018a1e:	5b                   	pop    ebx
c0018a1f:	5e                   	pop    esi
c0018a20:	5f                   	pop    edi
c0018a21:	5d                   	pop    ebp
c0018a22:	c3                   	ret    
c0018a23:	c7 44 24 20 7f fa 01 c0 	mov    DWORD PTR [esp+0x20],0xc001fa7f
c0018a2b:	83 c4 0c             	add    esp,0xc
c0018a2e:	5b                   	pop    ebx
c0018a2f:	5e                   	pop    esi
c0018a30:	5f                   	pop    edi
c0018a31:	5d                   	pop    ebp
c0018a32:	e9 8c 78 ff ff       	jmp    c00102c3 <KePanic(char const*)>
c0018a37:	90                   	nop

c0018a38 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0018a38:	55                   	push   ebp
c0018a39:	57                   	push   edi
c0018a3a:	56                   	push   esi
c0018a3b:	53                   	push   ebx
c0018a3c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018a42:	80 3d 4c 6b 02 c0 00 	cmp    BYTE PTR ds:0xc0026b4c,0x0
c0018a49:	0f 85 84 00 00 00    	jne    c0018ad3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0018a4f:	83 ec 0c             	sub    esp,0xc
c0018a52:	68 14 01 00 00       	push   0x114
c0018a57:	e8 c5 ed fe ff       	call   c0007821 <malloc>
c0018a5c:	83 c4 0c             	add    esp,0xc
c0018a5f:	89 c3                	mov    ebx,eax
c0018a61:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c0018a67:	68 85 fa 01 c0       	push   0xc001fa85
c0018a6c:	50                   	push   eax
c0018a6d:	e8 be 20 ff ff       	call   c000ab30 <File::File(char const*, Process*)>
c0018a72:	5a                   	pop    edx
c0018a73:	59                   	pop    ecx
c0018a74:	6a 01                	push   0x1
c0018a76:	53                   	push   ebx
c0018a77:	e8 74 21 ff ff       	call   c000abf0 <File::open(FileOpenMode)>
c0018a7c:	83 c4 0c             	add    esp,0xc
c0018a7f:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0018a83:	50                   	push   eax
c0018a84:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018a88:	50                   	push   eax
c0018a89:	53                   	push   ebx
c0018a8a:	e8 0d 24 ff ff       	call   c000ae9c <File::stat(unsigned long long*, bool*)>
c0018a8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a93:	40                   	inc    eax
c0018a94:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a97:	e8 85 ed fe ff       	call   c0007821 <malloc>
c0018a9c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018aa0:	a3 48 6b 02 c0       	mov    ds:0xc0026b48,eax
c0018aa5:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0018aa9:	5e                   	pop    esi
c0018aaa:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018aac:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0018ab0:	51                   	push   ecx
c0018ab1:	50                   	push   eax
c0018ab2:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018ab6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018aba:	53                   	push   ebx
c0018abb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018abe:	83 c4 14             	add    esp,0x14
c0018ac1:	53                   	push   ebx
c0018ac2:	e8 87 21 ff ff       	call   c000ac4e <File::close()>
c0018ac7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018acb:	83 c4 10             	add    esp,0x10
c0018ace:	a3 44 6b 02 c0       	mov    ds:0xc0026b44,eax
c0018ad3:	a1 44 6b 02 c0       	mov    eax,ds:0xc0026b44
c0018ad8:	8b 15 48 6b 02 c0    	mov    edx,DWORD PTR ds:0xc0026b48
c0018ade:	89 04 24             	mov    DWORD PTR [esp],eax
c0018ae1:	31 ff                	xor    edi,edi
c0018ae3:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0018aeb:	31 f6                	xor    esi,esi
c0018aed:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018af2:	31 db                	xor    ebx,ebx
c0018af4:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0018afc:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018b01:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0018b08:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018b0c:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0018b13:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018b17:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018b1a:	0f 8e 6b 01 00 00    	jle    c0018c8b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018b20:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018b23:	d4 40                	aam    0x40
c0018b25:	d5 39                	aad    0x39
c0018b27:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018b2b:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018b2f:	d4 40                	aam    0x40
c0018b31:	d5 39                	aad    0x39
c0018b33:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018b37:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018b3b:	d4 40                	aam    0x40
c0018b3d:	d5 39                	aad    0x39
c0018b3f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018b43:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018b47:	d4 40                	aam    0x40
c0018b49:	d5 39                	aad    0x39
c0018b4b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018b4f:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0018b53:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018b57:	3c 56                	cmp    al,0x56
c0018b59:	74 45                	je     c0018ba0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018b5b:	d4 40                	aam    0x40
c0018b5d:	d5 39                	aad    0x39
c0018b5f:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018b62:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018b66:	0f b6 c9             	movzx  ecx,cl
c0018b69:	c1 e1 04             	shl    ecx,0x4
c0018b6c:	d4 40                	aam    0x40
c0018b6e:	d5 39                	aad    0x39
c0018b70:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018b73:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018b77:	0f b6 db             	movzx  ebx,bl
c0018b7a:	09 cb                	or     ebx,ecx
c0018b7c:	c1 e3 04             	shl    ebx,0x4
c0018b7f:	d4 40                	aam    0x40
c0018b81:	d5 39                	aad    0x39
c0018b83:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018b86:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018b8a:	0f b6 c9             	movzx  ecx,cl
c0018b8d:	09 cb                	or     ebx,ecx
c0018b8f:	c1 e3 04             	shl    ebx,0x4
c0018b92:	89 d9                	mov    ecx,ebx
c0018b94:	d4 40                	aam    0x40
c0018b96:	d5 39                	aad    0x39
c0018b98:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018b9b:	0f b6 db             	movzx  ebx,bl
c0018b9e:	09 cb                	or     ebx,ecx
c0018ba0:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018ba4:	80 f9 44             	cmp    cl,0x44
c0018ba7:	74 47                	je     c0018bf0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018ba9:	88 c8                	mov    al,cl
c0018bab:	d4 40                	aam    0x40
c0018bad:	d5 39                	aad    0x39
c0018baf:	83 e8 30             	sub    eax,0x30
c0018bb2:	0f b6 e8             	movzx  ebp,al
c0018bb5:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018bb9:	c1 e5 04             	shl    ebp,0x4
c0018bbc:	d4 40                	aam    0x40
c0018bbe:	d5 39                	aad    0x39
c0018bc0:	83 e8 30             	sub    eax,0x30
c0018bc3:	0f b6 f0             	movzx  esi,al
c0018bc6:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018bca:	09 ee                	or     esi,ebp
c0018bcc:	c1 e6 04             	shl    esi,0x4
c0018bcf:	d4 40                	aam    0x40
c0018bd1:	d5 39                	aad    0x39
c0018bd3:	83 e8 30             	sub    eax,0x30
c0018bd6:	0f b6 e8             	movzx  ebp,al
c0018bd9:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018bdd:	09 ee                	or     esi,ebp
c0018bdf:	c1 e6 04             	shl    esi,0x4
c0018be2:	89 f5                	mov    ebp,esi
c0018be4:	d4 40                	aam    0x40
c0018be6:	d5 39                	aad    0x39
c0018be8:	83 e8 30             	sub    eax,0x30
c0018beb:	0f b6 f0             	movzx  esi,al
c0018bee:	09 ee                	or     esi,ebp
c0018bf0:	83 c7 10             	add    edi,0x10
c0018bf3:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018bf7:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018bfa:	3c 0a                	cmp    al,0xa
c0018bfc:	74 09                	je     c0018c07 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018bfe:	45                   	inc    ebp
c0018bff:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018c02:	75 16                	jne    c0018c1a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018c04:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018c07:	3c 0a                	cmp    al,0xa
c0018c09:	0f 94 c0             	sete   al
c0018c0c:	0f b6 c0             	movzx  eax,al
c0018c0f:	01 c7                	add    edi,eax
c0018c11:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018c16:	75 0c                	jne    c0018c24 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018c18:	eb 15                	jmp    c0018c2f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018c1a:	47                   	inc    edi
c0018c1b:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018c1e:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018c22:	eb d3                	jmp    c0018bf7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018c24:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018c29:	0f 85 e8 fe ff ff    	jne    c0018b17 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c2f:	80 f9 44             	cmp    cl,0x44
c0018c32:	74 0b                	je     c0018c3f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018c34:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018c39:	0f 85 d8 fe ff ff    	jne    c0018b17 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c3f:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018c43:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018c47:	c1 e1 04             	shl    ecx,0x4
c0018c4a:	83 e8 30             	sub    eax,0x30
c0018c4d:	09 c8                	or     eax,ecx
c0018c4f:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018c53:	0f 85 be fe ff ff    	jne    c0018b17 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c59:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018c5d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018c61:	c1 e1 04             	shl    ecx,0x4
c0018c64:	83 e8 30             	sub    eax,0x30
c0018c67:	09 c8                	or     eax,ecx
c0018c69:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018c6d:	0f 85 a4 fe ff ff    	jne    c0018b17 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c73:	50                   	push   eax
c0018c74:	50                   	push   eax
c0018c75:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018c79:	50                   	push   eax
c0018c7a:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018c81:	e8 7a 79 fe ff       	call   c0000600 <strcpy>
c0018c86:	83 c4 10             	add    esp,0x10
c0018c89:	eb 15                	jmp    c0018ca0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018c8b:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018c92:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018c9d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018ca0:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018ca7:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018cad:	5b                   	pop    ebx
c0018cae:	5e                   	pop    esi
c0018caf:	5f                   	pop    edi
c0018cb0:	5d                   	pop    ebp
c0018cb1:	c3                   	ret    

c0018cb2 <PCI::checkBus(unsigned char)>:
c0018cb2:	56                   	push   esi
c0018cb3:	53                   	push   ebx
c0018cb4:	31 f6                	xor    esi,esi
c0018cb6:	51                   	push   ecx
c0018cb7:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018cbb:	0f b6 c3             	movzx  eax,bl
c0018cbe:	52                   	push   edx
c0018cbf:	56                   	push   esi
c0018cc0:	46                   	inc    esi
c0018cc1:	50                   	push   eax
c0018cc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018cc6:	e8 f3 02 00 00       	call   c0018fbe <PCI::checkDevice(unsigned char, unsigned char)>
c0018ccb:	83 c4 10             	add    esp,0x10
c0018cce:	83 fe 20             	cmp    esi,0x20
c0018cd1:	75 e8                	jne    c0018cbb <PCI::checkBus(unsigned char)+0x9>
c0018cd3:	58                   	pop    eax
c0018cd4:	5b                   	pop    ebx
c0018cd5:	5e                   	pop    esi
c0018cd6:	c3                   	ret    
c0018cd7:	90                   	nop

c0018cd8 <PCI::foundDevice(PCIDeviceInfo)>:
c0018cd8:	55                   	push   ebp
c0018cd9:	57                   	push   edi
c0018cda:	56                   	push   esi
c0018cdb:	53                   	push   ebx
c0018cdc:	83 ec 1c             	sub    esp,0x1c
c0018cdf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018ce3:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018ce9:	0f 84 52 01 00 00    	je     c0018e41 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018cef:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018cf3:	66 81 f9 06 04       	cmp    cx,0x406
c0018cf8:	75 2c                	jne    c0018d26 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018cfa:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018cff:	50                   	push   eax
c0018d00:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018d05:	50                   	push   eax
c0018d06:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018d0b:	50                   	push   eax
c0018d0c:	56                   	push   esi
c0018d0d:	e8 b2 fb ff ff       	call   c00188c4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0018d12:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018d16:	0f b6 c0             	movzx  eax,al
c0018d19:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018d1d:	83 c4 2c             	add    esp,0x2c
c0018d20:	5b                   	pop    ebx
c0018d21:	5e                   	pop    esi
c0018d22:	5f                   	pop    edi
c0018d23:	5d                   	pop    ebp
c0018d24:	eb 8c                	jmp    c0018cb2 <PCI::checkBus(unsigned char)>
c0018d26:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018d2a:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018d30:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018d34:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018d38:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018d3c:	88 d3                	mov    bl,dl
c0018d3e:	85 c0                	test   eax,eax
c0018d40:	74 33                	je     c0018d75 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0018d42:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018d45:	85 d2                	test   edx,edx
c0018d47:	74 28                	je     c0018d71 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d49:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018d4f:	31 ef                	xor    edi,ebp
c0018d51:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018d57:	75 18                	jne    c0018d71 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d59:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018d5d:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0018d63:	75 0c                	jne    c0018d71 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d65:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018d6b:	0f 84 d0 00 00 00    	je     c0018e41 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018d71:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d73:	eb c9                	jmp    c0018d3e <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018d75:	66 81 f9 01 06       	cmp    cx,0x601
c0018d7a:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018d7e:	75 19                	jne    c0018d99 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018d80:	83 ec 0c             	sub    esp,0xc
c0018d83:	68 64 01 00 00       	push   0x164
c0018d88:	e8 94 ea fe ff       	call   c0007821 <malloc>
c0018d8d:	89 c5                	mov    ebp,eax
c0018d8f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d92:	e8 47 0e 00 00       	call   c0019bde <SATABus::SATABus()>
c0018d97:	eb 1e                	jmp    c0018db7 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018d99:	66 81 f9 01 01       	cmp    cx,0x101
c0018d9e:	75 60                	jne    c0018e00 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018da0:	83 ec 0c             	sub    esp,0xc
c0018da3:	68 70 02 00 00       	push   0x270
c0018da8:	e8 74 ea fe ff       	call   c0007821 <malloc>
c0018dad:	89 c5                	mov    ebp,eax
c0018daf:	89 04 24             	mov    DWORD PTR [esp],eax
c0018db2:	e8 cb 02 00 00       	call   c0019082 <IDE::IDE()>
c0018db7:	58                   	pop    eax
c0018db8:	5a                   	pop    edx
c0018db9:	55                   	push   ebp
c0018dba:	56                   	push   esi
c0018dbb:	e8 38 2c ff ff       	call   c000b9f8 <Device::addChild(Device*)>
c0018dc0:	83 ec 1c             	sub    esp,0x1c
c0018dc3:	b9 09 00 00 00       	mov    ecx,0x9
c0018dc8:	fc                   	cld    
c0018dc9:	89 e7                	mov    edi,esp
c0018dcb:	89 de                	mov    esi,ebx
c0018dcd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018dcf:	55                   	push   ebp
c0018dd0:	e8 69 2b ff ff       	call   c000b93e <Device::preOpenPCI(PCIDeviceInfo)>
c0018dd5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018dd8:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018ddc:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018de4:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018dec:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018df4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018df7:	83 c4 4c             	add    esp,0x4c
c0018dfa:	5b                   	pop    ebx
c0018dfb:	5e                   	pop    esi
c0018dfc:	5f                   	pop    edi
c0018dfd:	5d                   	pop    ebp
c0018dfe:	ff e0                	jmp    eax
c0018e00:	83 ec 0c             	sub    esp,0xc
c0018e03:	68 58 01 00 00       	push   0x158
c0018e08:	e8 14 ea fe ff       	call   c0007821 <malloc>
c0018e0d:	89 c5                	mov    ebp,eax
c0018e0f:	58                   	pop    eax
c0018e10:	5a                   	pop    edx
c0018e11:	68 9e fa 01 c0       	push   0xc001fa9e
c0018e16:	55                   	push   ebp
c0018e17:	e8 7a 2e ff ff       	call   c000bc96 <DriverlessDevice::DriverlessDevice(char const*)>
c0018e1c:	59                   	pop    ecx
c0018e1d:	5f                   	pop    edi
c0018e1e:	55                   	push   ebp
c0018e1f:	56                   	push   esi
c0018e20:	e8 d3 2b ff ff       	call   c000b9f8 <Device::addChild(Device*)>
c0018e25:	b9 09 00 00 00       	mov    ecx,0x9
c0018e2a:	fc                   	cld    
c0018e2b:	89 df                	mov    edi,ebx
c0018e2d:	89 de                	mov    esi,ebx
c0018e2f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018e31:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018e35:	83 c4 2c             	add    esp,0x2c
c0018e38:	5b                   	pop    ebx
c0018e39:	5e                   	pop    esi
c0018e3a:	5f                   	pop    edi
c0018e3b:	5d                   	pop    ebp
c0018e3c:	e9 fd 2a ff ff       	jmp    c000b93e <Device::preOpenPCI(PCIDeviceInfo)>
c0018e41:	83 c4 1c             	add    esp,0x1c
c0018e44:	5b                   	pop    ebx
c0018e45:	5e                   	pop    esi
c0018e46:	5f                   	pop    edi
c0018e47:	5d                   	pop    ebp
c0018e48:	c3                   	ret    
c0018e49:	90                   	nop

c0018e4a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018e4a:	55                   	push   ebp
c0018e4b:	57                   	push   edi
c0018e4c:	56                   	push   esi
c0018e4d:	53                   	push   ebx
c0018e4e:	83 ec 68             	sub    esp,0x68
c0018e51:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018e55:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018e5c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018e60:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018e67:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018e6c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018e70:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018e77:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018e7c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018e80:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018e85:	6a 0c                	push   0xc
c0018e87:	57                   	push   edi
c0018e88:	53                   	push   ebx
c0018e89:	56                   	push   esi
c0018e8a:	55                   	push   ebp
c0018e8b:	e8 86 f8 ff ff       	call   c0018716 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e90:	83 c4 20             	add    esp,0x20
c0018e93:	57                   	push   edi
c0018e94:	53                   	push   ebx
c0018e95:	56                   	push   esi
c0018e96:	55                   	push   ebp
c0018e97:	e8 6e f9 ff ff       	call   c001880a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018e9c:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018ea1:	57                   	push   edi
c0018ea2:	53                   	push   ebx
c0018ea3:	56                   	push   esi
c0018ea4:	55                   	push   ebp
c0018ea5:	e8 f6 f9 ff ff       	call   c00188a0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018eaa:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018eae:	83 c4 14             	add    esp,0x14
c0018eb1:	6a 3c                	push   0x3c
c0018eb3:	57                   	push   edi
c0018eb4:	53                   	push   ebx
c0018eb5:	56                   	push   esi
c0018eb6:	55                   	push   ebp
c0018eb7:	e8 5a f8 ff ff       	call   c0018716 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018ebc:	0f b6 c4             	movzx  eax,ah
c0018ebf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018ec3:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018ec7:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018ecb:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0018ed0:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018ed6:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018edc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018ee0:	83 c4 20             	add    esp,0x20
c0018ee3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018ee8:	74 30                	je     c0018f1a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018eea:	31 c0                	xor    eax,eax
c0018eec:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018ef0:	7e 28                	jle    c0018f1a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018ef2:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018efa:	39 cb                	cmp    ebx,ecx
c0018efc:	75 19                	jne    c0018f17 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018efe:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018f06:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018f0a:	75 0b                	jne    c0018f17 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018f0c:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0018f13:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018f17:	40                   	inc    eax
c0018f18:	eb d2                	jmp    c0018eec <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018f1a:	31 d2                	xor    edx,edx
c0018f1c:	83 ec 0c             	sub    esp,0xc
c0018f1f:	57                   	push   edi
c0018f20:	53                   	push   ebx
c0018f21:	56                   	push   esi
c0018f22:	52                   	push   edx
c0018f23:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018f27:	55                   	push   ebp
c0018f28:	e8 bf f9 ff ff       	call   c00188ec <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018f2d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018f31:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018f35:	42                   	inc    edx
c0018f36:	83 c4 20             	add    esp,0x20
c0018f39:	83 fa 06             	cmp    edx,0x6
c0018f3c:	75 de                	jne    c0018f1c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018f3e:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018f43:	83 ec 0c             	sub    esp,0xc
c0018f46:	86 e0                	xchg   al,ah
c0018f48:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018f4d:	6a 02                	push   0x2
c0018f4f:	57                   	push   edi
c0018f50:	53                   	push   ebx
c0018f51:	56                   	push   esi
c0018f52:	55                   	push   ebp
c0018f53:	e8 be f7 ff ff       	call   c0018716 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018f58:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018f5d:	83 c4 20             	add    esp,0x20
c0018f60:	57                   	push   edi
c0018f61:	53                   	push   ebx
c0018f62:	56                   	push   esi
c0018f63:	55                   	push   ebp
c0018f64:	e8 eb f8 ff ff       	call   c0018854 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018f69:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018f6d:	57                   	push   edi
c0018f6e:	53                   	push   ebx
c0018f6f:	56                   	push   esi
c0018f70:	55                   	push   ebp
c0018f71:	e8 48 f8 ff ff       	call   c00187be <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018f76:	b9 09 00 00 00       	mov    ecx,0x9
c0018f7b:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018f80:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018f84:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018f88:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018f8c:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018f90:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018f94:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018f98:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018f9c:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018fa0:	83 ec 0c             	sub    esp,0xc
c0018fa3:	fc                   	cld    
c0018fa4:	89 e7                	mov    edi,esp
c0018fa6:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018faa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018fac:	55                   	push   ebp
c0018fad:	e8 26 fd ff ff       	call   c0018cd8 <PCI::foundDevice(PCIDeviceInfo)>
c0018fb2:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018fb8:	5b                   	pop    ebx
c0018fb9:	5e                   	pop    esi
c0018fba:	5f                   	pop    edi
c0018fbb:	5d                   	pop    ebp
c0018fbc:	c3                   	ret    
c0018fbd:	90                   	nop

c0018fbe <PCI::checkDevice(unsigned char, unsigned char)>:
c0018fbe:	55                   	push   ebp
c0018fbf:	57                   	push   edi
c0018fc0:	56                   	push   esi
c0018fc1:	53                   	push   ebx
c0018fc2:	83 ec 0c             	sub    esp,0xc
c0018fc5:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018fc9:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0018fce:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018fd3:	6a 00                	push   0x0
c0018fd5:	56                   	push   esi
c0018fd6:	57                   	push   edi
c0018fd7:	55                   	push   ebp
c0018fd8:	e8 e1 f7 ff ff       	call   c00187be <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018fdd:	6a 00                	push   0x0
c0018fdf:	56                   	push   esi
c0018fe0:	57                   	push   edi
c0018fe1:	55                   	push   ebp
c0018fe2:	e8 63 fe ff ff       	call   c0018e4a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018fe7:	83 c4 20             	add    esp,0x20
c0018fea:	6a 00                	push   0x0
c0018fec:	56                   	push   esi
c0018fed:	57                   	push   edi
c0018fee:	55                   	push   ebp
c0018fef:	e8 ee f7 ff ff       	call   c00187e2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018ff4:	83 c4 10             	add    esp,0x10
c0018ff7:	84 c0                	test   al,al
c0018ff9:	79 27                	jns    c0019022 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0018ffb:	bb 01 00 00 00       	mov    ebx,0x1
c0019000:	53                   	push   ebx
c0019001:	56                   	push   esi
c0019002:	57                   	push   edi
c0019003:	55                   	push   ebp
c0019004:	e8 b5 f7 ff ff       	call   c00187be <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0019009:	83 c4 10             	add    esp,0x10
c001900c:	66 40                	inc    ax
c001900e:	74 0c                	je     c001901c <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0019010:	53                   	push   ebx
c0019011:	56                   	push   esi
c0019012:	57                   	push   edi
c0019013:	55                   	push   ebp
c0019014:	e8 31 fe ff ff       	call   c0018e4a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0019019:	83 c4 10             	add    esp,0x10
c001901c:	43                   	inc    ebx
c001901d:	83 fb 08             	cmp    ebx,0x8
c0019020:	75 de                	jne    c0019000 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0019022:	83 c4 0c             	add    esp,0xc
c0019025:	5b                   	pop    ebx
c0019026:	5e                   	pop    esi
c0019027:	5f                   	pop    edi
c0019028:	5d                   	pop    ebp
c0019029:	c3                   	ret    

c001902a <PCI::detect()>:
c001902a:	56                   	push   esi
c001902b:	53                   	push   ebx
c001902c:	53                   	push   ebx
c001902d:	31 db                	xor    ebx,ebx
c001902f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019033:	6a 00                	push   0x0
c0019035:	6a 00                	push   0x0
c0019037:	6a 00                	push   0x0
c0019039:	56                   	push   esi
c001903a:	e8 a3 f7 ff ff       	call   c00187e2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001903f:	83 c4 10             	add    esp,0x10
c0019042:	a8 80                	test   al,0x80
c0019044:	75 21                	jne    c0019067 <PCI::detect()+0x3d>
c0019046:	51                   	push   ecx
c0019047:	51                   	push   ecx
c0019048:	6a 00                	push   0x0
c001904a:	56                   	push   esi
c001904b:	e8 62 fc ff ff       	call   c0018cb2 <PCI::checkBus(unsigned char)>
c0019050:	83 c4 10             	add    esp,0x10
c0019053:	eb 24                	jmp    c0019079 <PCI::detect()+0x4f>
c0019055:	52                   	push   edx
c0019056:	52                   	push   edx
c0019057:	53                   	push   ebx
c0019058:	43                   	inc    ebx
c0019059:	56                   	push   esi
c001905a:	e8 53 fc ff ff       	call   c0018cb2 <PCI::checkBus(unsigned char)>
c001905f:	83 c4 10             	add    esp,0x10
c0019062:	83 fb 08             	cmp    ebx,0x8
c0019065:	74 12                	je     c0019079 <PCI::detect()+0x4f>
c0019067:	53                   	push   ebx
c0019068:	6a 00                	push   0x0
c001906a:	6a 00                	push   0x0
c001906c:	56                   	push   esi
c001906d:	e8 4c f7 ff ff       	call   c00187be <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0019072:	83 c4 10             	add    esp,0x10
c0019075:	66 40                	inc    ax
c0019077:	74 dc                	je     c0019055 <PCI::detect()+0x2b>
c0019079:	58                   	pop    eax
c001907a:	5b                   	pop    ebx
c001907b:	5e                   	pop    esi
c001907c:	c3                   	ret    
c001907d:	90                   	nop

c001907e <IDE::close(int, int, void*)>:
c001907e:	83 c8 ff             	or     eax,0xffffffff
c0019081:	c3                   	ret    

c0019082 <IDE::IDE()>:
c0019082:	83 ec 0c             	sub    esp,0xc
c0019085:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019089:	83 ec 08             	sub    esp,0x8
c001908c:	68 e4 fa 01 c0       	push   0xc001fae4
c0019091:	50                   	push   eax
c0019092:	e8 a5 2c ff ff       	call   c000bd3c <HardDiskController::HardDiskController(char const*)>
c0019097:	83 c4 10             	add    esp,0x10
c001909a:	ba 74 fb 01 c0       	mov    edx,0xc001fb74
c001909f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190a3:	89 10                	mov    DWORD PTR [eax],edx
c00190a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190a9:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00190b0:	90                   	nop
c00190b1:	83 c4 0c             	add    esp,0xc
c00190b4:	c3                   	ret    
c00190b5:	90                   	nop

c00190b6 <IDE::prepareInterrupt(unsigned char)>:
c00190b6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00190bb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00190bf:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00190c7:	c3                   	ret    

c00190c8 <selectDrive(unsigned char, unsigned char)>:
c00190c8:	c3                   	ret    
c00190c9:	90                   	nop

c00190ca <IDE::getBase(unsigned char)>:
c00190ca:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00190cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00190d3:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00190db:	c3                   	ret    

c00190dc <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00190dc:	55                   	push   ebp
c00190dd:	57                   	push   edi
c00190de:	56                   	push   esi
c00190df:	53                   	push   ebx
c00190e0:	83 ec 1c             	sub    esp,0x1c
c00190e3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00190e7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00190eb:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00190ee:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00190f2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00190f6:	80 f9 03             	cmp    cl,0x3
c00190f9:	77 51                	ja     c001914c <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00190fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00190ff:	0f b6 f2             	movzx  esi,dl
c0019102:	0f b6 db             	movzx  ebx,bl
c0019105:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0019108:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001910c:	83 ca 80             	or     edx,0xffffff80
c001910f:	0f b6 d2             	movzx  edx,dl
c0019112:	52                   	push   edx
c0019113:	6a 0c                	push   0xc
c0019115:	56                   	push   esi
c0019116:	57                   	push   edi
c0019117:	e8 c0 ff ff ff       	call   c00190dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001911c:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0019121:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019125:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0019129:	ee                   	out    dx,al
c001912a:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001912f:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0019133:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0019137:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001913b:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0019143:	83 c4 2c             	add    esp,0x2c
c0019146:	5b                   	pop    ebx
c0019147:	5e                   	pop    esi
c0019148:	5f                   	pop    edi
c0019149:	5d                   	pop    ebp
c001914a:	eb 90                	jmp    c00190dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001914c:	80 fb 07             	cmp    bl,0x7
c001914f:	77 12                	ja     c0019163 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0019151:	0f b6 d2             	movzx  edx,dl
c0019154:	0f b6 db             	movzx  ebx,bl
c0019157:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001915f:	89 da                	mov    edx,ebx
c0019161:	eb 2f                	jmp    c0019192 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0019163:	80 fb 0d             	cmp    bl,0xd
c0019166:	77 13                	ja     c001917b <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0019168:	0f b6 d2             	movzx  edx,dl
c001916b:	0f b6 db             	movzx  ebx,bl
c001916e:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0019175:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0019179:	eb 17                	jmp    c0019192 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001917b:	80 fb 15             	cmp    bl,0x15
c001917e:	77 13                	ja     c0019193 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0019180:	0f b6 d2             	movzx  edx,dl
c0019183:	0f b6 db             	movzx  ebx,bl
c0019186:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001918e:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0019192:	ee                   	out    dx,al
c0019193:	83 c4 1c             	add    esp,0x1c
c0019196:	5b                   	pop    ebx
c0019197:	5e                   	pop    esi
c0019198:	5f                   	pop    edi
c0019199:	5d                   	pop    ebp
c001919a:	c3                   	ret    
c001919b:	90                   	nop

c001919c <IDE::read(unsigned char, unsigned char)>:
c001919c:	55                   	push   ebp
c001919d:	57                   	push   edi
c001919e:	56                   	push   esi
c001919f:	53                   	push   ebx
c00191a0:	83 ec 1c             	sub    esp,0x1c
c00191a3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00191a7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00191ab:	8d 43 f8             	lea    eax,[ebx-0x8]
c00191ae:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00191b2:	3c 03                	cmp    al,0x3
c00191b4:	77 43                	ja     c00191f9 <IDE::read(unsigned char, unsigned char)+0x5d>
c00191b6:	0f b6 f2             	movzx  esi,dl
c00191b9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00191bc:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00191c0:	83 c8 80             	or     eax,0xffffff80
c00191c3:	0f b6 c0             	movzx  eax,al
c00191c6:	50                   	push   eax
c00191c7:	6a 0c                	push   0xc
c00191c9:	56                   	push   esi
c00191ca:	57                   	push   edi
c00191cb:	e8 0c ff ff ff       	call   c00190dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c00191d0:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00191d5:	0f b6 c3             	movzx  eax,bl
c00191d8:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00191dc:	ec                   	in     al,dx
c00191dd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00191e1:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00191e6:	52                   	push   edx
c00191e7:	6a 0c                	push   0xc
c00191e9:	56                   	push   esi
c00191ea:	57                   	push   edi
c00191eb:	e8 ec fe ff ff       	call   c00190dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c00191f0:	83 c4 20             	add    esp,0x20
c00191f3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00191f7:	eb 49                	jmp    c0019242 <IDE::read(unsigned char, unsigned char)+0xa6>
c00191f9:	80 fb 07             	cmp    bl,0x7
c00191fc:	77 12                	ja     c0019210 <IDE::read(unsigned char, unsigned char)+0x74>
c00191fe:	0f b6 d2             	movzx  edx,dl
c0019201:	0f b6 c3             	movzx  eax,bl
c0019204:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001920c:	89 c2                	mov    edx,eax
c001920e:	eb 31                	jmp    c0019241 <IDE::read(unsigned char, unsigned char)+0xa5>
c0019210:	80 fb 0d             	cmp    bl,0xd
c0019213:	77 13                	ja     c0019228 <IDE::read(unsigned char, unsigned char)+0x8c>
c0019215:	0f b6 d2             	movzx  edx,dl
c0019218:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001921f:	0f b6 d3             	movzx  edx,bl
c0019222:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0019226:	eb 19                	jmp    c0019241 <IDE::read(unsigned char, unsigned char)+0xa5>
c0019228:	31 c0                	xor    eax,eax
c001922a:	80 fb 15             	cmp    bl,0x15
c001922d:	77 13                	ja     c0019242 <IDE::read(unsigned char, unsigned char)+0xa6>
c001922f:	0f b6 d2             	movzx  edx,dl
c0019232:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001923a:	0f b6 d3             	movzx  edx,bl
c001923d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0019241:	ec                   	in     al,dx
c0019242:	83 c4 1c             	add    esp,0x1c
c0019245:	5b                   	pop    ebx
c0019246:	5e                   	pop    esi
c0019247:	5f                   	pop    edi
c0019248:	5d                   	pop    ebp
c0019249:	c3                   	ret    

c001924a <IDE::waitInterrupt(unsigned char)>:
c001924a:	57                   	push   edi
c001924b:	56                   	push   esi
c001924c:	31 f6                	xor    esi,esi
c001924e:	53                   	push   ebx
c001924f:	83 ec 10             	sub    esp,0x10
c0019252:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0019256:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001925a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001925e:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0019263:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001926a:	84 db                	test   bl,bl
c001926c:	75 33                	jne    c00192a1 <IDE::waitInterrupt(unsigned char)+0x57>
c001926e:	52                   	push   edx
c001926f:	6a 0c                	push   0xc
c0019271:	50                   	push   eax
c0019272:	57                   	push   edi
c0019273:	e8 24 ff ff ff       	call   c001919c <IDE::read(unsigned char, unsigned char)>
c0019278:	83 c4 10             	add    esp,0x10
c001927b:	a8 01                	test   al,0x1
c001927d:	75 2a                	jne    c00192a9 <IDE::waitInterrupt(unsigned char)+0x5f>
c001927f:	f7 c6 04 00 00 00    	test   esi,0x4
c0019285:	75 12                	jne    c0019299 <IDE::waitInterrupt(unsigned char)+0x4f>
c0019287:	83 fe 32             	cmp    esi,0x32
c001928a:	7e 0d                	jle    c0019299 <IDE::waitInterrupt(unsigned char)+0x4f>
c001928c:	83 ec 0c             	sub    esp,0xc
c001928f:	6a 64                	push   0x64
c0019291:	e8 4a a8 ff ff       	call   c0013ae0 <milliTenthSleep(unsigned int)>
c0019296:	83 c4 10             	add    esp,0x10
c0019299:	83 fe 3c             	cmp    esi,0x3c
c001929c:	74 0b                	je     c00192a9 <IDE::waitInterrupt(unsigned char)+0x5f>
c001929e:	46                   	inc    esi
c001929f:	eb bd                	jmp    c001925e <IDE::waitInterrupt(unsigned char)+0x14>
c00192a1:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c00192a9:	83 c4 10             	add    esp,0x10
c00192ac:	88 d8                	mov    al,bl
c00192ae:	5b                   	pop    ebx
c00192af:	5e                   	pop    esi
c00192b0:	5f                   	pop    edi
c00192b1:	c3                   	ret    

c00192b2 <ideChannel0IRQHandler(regs*, void*)>:
c00192b2:	83 ec 10             	sub    esp,0x10
c00192b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00192b9:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00192c0:	6a 07                	push   0x7
c00192c2:	6a 00                	push   0x0
c00192c4:	50                   	push   eax
c00192c5:	e8 d2 fe ff ff       	call   c001919c <IDE::read(unsigned char, unsigned char)>
c00192ca:	83 c4 1c             	add    esp,0x1c
c00192cd:	c3                   	ret    

c00192ce <ideChannel1IRQHandler(regs*, void*)>:
c00192ce:	83 ec 10             	sub    esp,0x10
c00192d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00192d5:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00192dc:	6a 07                	push   0x7
c00192de:	6a 01                	push   0x1
c00192e0:	50                   	push   eax
c00192e1:	e8 b6 fe ff ff       	call   c001919c <IDE::read(unsigned char, unsigned char)>
c00192e6:	83 c4 1c             	add    esp,0x1c
c00192e9:	c3                   	ret    

c00192ea <IDE::enableIRQs(unsigned char, bool)>:
c00192ea:	57                   	push   edi
c00192eb:	56                   	push   esi
c00192ec:	be 04 00 00 00       	mov    esi,0x4
c00192f1:	53                   	push   ebx
c00192f2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00192f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00192fb:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0019300:	0f 94 c0             	sete   al
c0019303:	01 c0                	add    eax,eax
c0019305:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001930c:	0f b6 c0             	movzx  eax,al
c001930f:	50                   	push   eax
c0019310:	6a 0c                	push   0xc
c0019312:	57                   	push   edi
c0019313:	53                   	push   ebx
c0019314:	e8 c3 fd ff ff       	call   c00190dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019319:	83 c4 10             	add    esp,0x10
c001931c:	50                   	push   eax
c001931d:	6a 0c                	push   0xc
c001931f:	57                   	push   edi
c0019320:	53                   	push   ebx
c0019321:	e8 76 fe ff ff       	call   c001919c <IDE::read(unsigned char, unsigned char)>
c0019326:	83 c4 10             	add    esp,0x10
c0019329:	4e                   	dec    esi
c001932a:	75 f0                	jne    c001931c <IDE::enableIRQs(unsigned char, bool)+0x32>
c001932c:	5b                   	pop    ebx
c001932d:	5e                   	pop    esi
c001932e:	5f                   	pop    edi
c001932f:	c3                   	ret    

c0019330 <IDE::open(int, int, void*)>:
c0019330:	55                   	push   ebp
c0019331:	57                   	push   edi
c0019332:	56                   	push   esi
c0019333:	53                   	push   ebx
c0019334:	83 ec 1c             	sub    esp,0x1c
c0019337:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001933b:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0019344:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001934d:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0019354:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001935b:	0f 85 b0 02 00 00    	jne    c0019611 <IDE::open(int, int, void*)+0x2e1>
c0019361:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0019367:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001936b:	83 e0 7f             	and    eax,0x7f
c001936e:	3c 05                	cmp    al,0x5
c0019370:	74 04                	je     c0019376 <IDE::open(int, int, void*)+0x46>
c0019372:	3c 0f                	cmp    al,0xf
c0019374:	75 32                	jne    c00193a8 <IDE::open(int, int, void*)+0x78>
c0019376:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001937c:	83 e0 fc             	and    eax,0xfffffffc
c001937f:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0019386:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001938c:	83 e0 fc             	and    eax,0xfffffffc
c001938f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0019396:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001939c:	83 e0 fc             	and    eax,0xfffffffc
c001939f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00193a6:	eb 14                	jmp    c00193bc <IDE::open(int, int, void*)+0x8c>
c00193a8:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00193b2:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00193bc:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00193c3:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00193ca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00193ce:	89 c6                	mov    esi,eax
c00193d0:	bf f8 0c 00 00       	mov    edi,0xcf8
c00193d5:	c1 e6 10             	shl    esi,0x10
c00193d8:	89 e8                	mov    eax,ebp
c00193da:	89 fa                	mov    edx,edi
c00193dc:	c1 e0 0b             	shl    eax,0xb
c00193df:	09 f0                	or     eax,esi
c00193e1:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00193e8:	c1 e6 08             	shl    esi,0x8
c00193eb:	09 c6                	or     esi,eax
c00193ed:	89 f0                	mov    eax,esi
c00193ef:	0d 08 00 00 80       	or     eax,0x80000008
c00193f4:	ef                   	out    dx,eax
c00193f5:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00193fa:	89 ca                	mov    edx,ecx
c00193fc:	ed                   	in     eax,dx
c00193fd:	c1 e8 10             	shr    eax,0x10
c0019400:	3d ff ff 00 00       	cmp    eax,0xffff
c0019405:	0f 84 f5 00 00 00    	je     c0019500 <IDE::open(int, int, void*)+0x1d0>
c001940b:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0019411:	89 fa                	mov    edx,edi
c0019413:	89 f0                	mov    eax,esi
c0019415:	ef                   	out    dx,eax
c0019416:	b0 fe                	mov    al,0xfe
c0019418:	89 ca                	mov    edx,ecx
c001941a:	ee                   	out    dx,al
c001941b:	89 f0                	mov    eax,esi
c001941d:	89 fa                	mov    edx,edi
c001941f:	ef                   	out    dx,eax
c0019420:	89 ca                	mov    edx,ecx
c0019422:	ed                   	in     eax,dx
c0019423:	3c fe                	cmp    al,0xfe
c0019425:	0f 85 a9 00 00 00    	jne    c00194d4 <IDE::open(int, int, void*)+0x1a4>
c001942b:	8b 15 b8 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022eb8
c0019431:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c0019438:	74 33                	je     c001946d <IDE::open(int, int, void*)+0x13d>
c001943a:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0019440:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0019444:	40                   	inc    eax
c0019445:	83 ec 0c             	sub    esp,0xc
c0019448:	0f b6 c0             	movzx  eax,al
c001944b:	50                   	push   eax
c001944c:	55                   	push   ebp
c001944d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019451:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c0019457:	51                   	push   ecx
c0019458:	e8 7f 53 ff ff       	call   c000e7dc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001945d:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0019462:	83 c4 1c             	add    esp,0x1c
c0019465:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001946b:	eb 0a                	jmp    c0019477 <IDE::open(int, int, void*)+0x147>
c001946d:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0019477:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001947e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0019485:	c1 e1 10             	shl    ecx,0x10
c0019488:	c1 e0 08             	shl    eax,0x8
c001948b:	bf f8 0c 00 00       	mov    edi,0xcf8
c0019490:	09 c1                	or     ecx,eax
c0019492:	89 fa                	mov    edx,edi
c0019494:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001949b:	c1 e0 0b             	shl    eax,0xb
c001949e:	09 c1                	or     ecx,eax
c00194a0:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00194a6:	89 c8                	mov    eax,ecx
c00194a8:	ef                   	out    dx,eax
c00194a9:	be fc 0c 00 00       	mov    esi,0xcfc
c00194ae:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00194b4:	89 f2                	mov    edx,esi
c00194b6:	ee                   	out    dx,al
c00194b7:	89 c8                	mov    eax,ecx
c00194b9:	89 fa                	mov    edx,edi
c00194bb:	ef                   	out    dx,eax
c00194bc:	89 f2                	mov    edx,esi
c00194be:	ed                   	in     eax,dx
c00194bf:	0f b6 c0             	movzx  eax,al
c00194c2:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00194c8:	74 46                	je     c0019510 <IDE::open(int, int, void*)+0x1e0>
c00194ca:	83 ec 0c             	sub    esp,0xc
c00194cd:	68 fc fa 01 c0       	push   0xc001fafc
c00194d2:	eb 34                	jmp    c0019508 <IDE::open(int, int, void*)+0x1d8>
c00194d4:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00194dd:	75 17                	jne    c00194f6 <IDE::open(int, int, void*)+0x1c6>
c00194df:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00194e4:	74 07                	je     c00194ed <IDE::open(int, int, void*)+0x1bd>
c00194e6:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00194eb:	75 09                	jne    c00194f6 <IDE::open(int, int, void*)+0x1c6>
c00194ed:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00194f4:	eb 1a                	jmp    c0019510 <IDE::open(int, int, void*)+0x1e0>
c00194f6:	83 ec 0c             	sub    esp,0xc
c00194f9:	68 04 fb 01 c0       	push   0xc001fb04
c00194fe:	eb 08                	jmp    c0019508 <IDE::open(int, int, void*)+0x1d8>
c0019500:	83 ec 0c             	sub    esp,0xc
c0019503:	68 35 fb 01 c0       	push   0xc001fb35
c0019508:	e8 b6 6d ff ff       	call   c00102c3 <KePanic(char const*)>
c001950d:	83 c4 10             	add    esp,0x10
c0019510:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0019517:	79 1a                	jns    c0019533 <IDE::open(int, int, void*)+0x203>
c0019519:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001951f:	83 e0 fc             	and    eax,0xfffffffc
c0019522:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0019529:	83 c0 08             	add    eax,0x8
c001952c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0019533:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019539:	89 c2                	mov    edx,eax
c001953b:	83 e2 0f             	and    edx,0xf
c001953e:	66 83 fa 08          	cmp    dx,0x8
c0019542:	75 0a                	jne    c001954e <IDE::open(int, int, void*)+0x21e>
c0019544:	83 e8 02             	sub    eax,0x2
c0019547:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001954e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0019554:	89 c2                	mov    edx,eax
c0019556:	83 e2 0f             	and    edx,0xf
c0019559:	66 83 fa 08          	cmp    dx,0x8
c001955d:	75 0a                	jne    c0019569 <IDE::open(int, int, void*)+0x239>
c001955f:	83 e8 02             	sub    eax,0x2
c0019562:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019569:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019570:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0019577:	89 d0                	mov    eax,edx
c0019579:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001957c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019580:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0019584:	8d 4a 01             	lea    ecx,[edx+0x1]
c0019587:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001958c:	0f b6 c9             	movzx  ecx,cl
c001958f:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0019596:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019599:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001959d:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00195a1:	8d 50 02             	lea    edx,[eax+0x2]
c00195a4:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00195a9:	0f b6 d2             	movzx  edx,dl
c00195ac:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00195b2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00195b5:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00195b9:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00195bd:	8d 48 03             	lea    ecx,[eax+0x3]
c00195c0:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00195c5:	0f b6 c9             	movzx  ecx,cl
c00195c8:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00195ce:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00195d1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00195d5:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00195d9:	8d 50 04             	lea    edx,[eax+0x4]
c00195dc:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00195e2:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00195e7:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00195ee:	66 85 f6             	test   si,si
c00195f1:	74 5b                	je     c001964e <IDE::open(int, int, void*)+0x31e>
c00195f3:	0f b6 d2             	movzx  edx,dl
c00195f6:	83 c0 05             	add    eax,0x5
c00195f9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00195fc:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019600:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0019604:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001960a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001960f:	eb 3d                	jmp    c001964e <IDE::open(int, int, void*)+0x31e>
c0019611:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0019617:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001961e:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0019625:	66 05 06 02          	add    ax,0x206
c0019629:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019630:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0019637:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001963e:	66 05 06 02          	add    ax,0x206
c0019642:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019649:	e9 e5 fe ff ff       	jmp    c0019533 <IDE::open(int, int, void*)+0x203>
c001964e:	50                   	push   eax
c001964f:	50                   	push   eax
c0019650:	6a 00                	push   0x0
c0019652:	53                   	push   ebx
c0019653:	e8 5e fa ff ff       	call   c00190b6 <IDE::prepareInterrupt(unsigned char)>
c0019658:	5a                   	pop    edx
c0019659:	59                   	pop    ecx
c001965a:	6a 01                	push   0x1
c001965c:	53                   	push   ebx
c001965d:	e8 54 fa ff ff       	call   c00190b6 <IDE::prepareInterrupt(unsigned char)>
c0019662:	83 c4 0c             	add    esp,0xc
c0019665:	6a 00                	push   0x0
c0019667:	6a 00                	push   0x0
c0019669:	53                   	push   ebx
c001966a:	e8 7b fc ff ff       	call   c00192ea <IDE::enableIRQs(unsigned char, bool)>
c001966f:	83 c4 0c             	add    esp,0xc
c0019672:	6a 00                	push   0x0
c0019674:	6a 01                	push   0x1
c0019676:	53                   	push   ebx
c0019677:	e8 6e fc ff ff       	call   c00192ea <IDE::enableIRQs(unsigned char, bool)>
c001967c:	83 c4 10             	add    esp,0x10
c001967f:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0019686:	74 34                	je     c00196bc <IDE::open(int, int, void*)+0x38c>
c0019688:	83 ec 0c             	sub    esp,0xc
c001968b:	53                   	push   ebx
c001968c:	6a 01                	push   0x1
c001968e:	68 b2 92 01 c0       	push   0xc00192b2
c0019693:	6a 0e                	push   0xe
c0019695:	53                   	push   ebx
c0019696:	e8 09 23 ff ff       	call   c000b9a4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001969b:	83 c4 14             	add    esp,0x14
c001969e:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00196a4:	53                   	push   ebx
c00196a5:	6a 01                	push   0x1
c00196a7:	68 ce 92 01 c0       	push   0xc00192ce
c00196ac:	6a 0f                	push   0xf
c00196ae:	53                   	push   ebx
c00196af:	e8 f0 22 ff ff       	call   c000b9a4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00196b4:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00196ba:	eb 38                	jmp    c00196f4 <IDE::open(int, int, void*)+0x3c4>
c00196bc:	83 ec 0c             	sub    esp,0xc
c00196bf:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00196c9:	53                   	push   ebx
c00196ca:	6a 00                	push   0x0
c00196cc:	68 b2 92 01 c0       	push   0xc00192b2
c00196d1:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00196d7:	53                   	push   ebx
c00196d8:	e8 c7 22 ff ff       	call   c000b9a4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00196dd:	83 c4 14             	add    esp,0x14
c00196e0:	53                   	push   ebx
c00196e1:	6a 00                	push   0x0
c00196e3:	68 ce 92 01 c0       	push   0xc00192ce
c00196e8:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00196ee:	53                   	push   ebx
c00196ef:	e8 b0 22 ff ff       	call   c000b9a4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00196f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00196f6:	83 c4 20             	add    esp,0x20
c00196f9:	83 ec 0c             	sub    esp,0xc
c00196fc:	53                   	push   ebx
c00196fd:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0019700:	83 c4 0c             	add    esp,0xc
c0019703:	6a 07                	push   0x7
c0019705:	6a 00                	push   0x0
c0019707:	53                   	push   ebx
c0019708:	e8 8f fa ff ff       	call   c001919c <IDE::read(unsigned char, unsigned char)>
c001970d:	83 c4 0c             	add    esp,0xc
c0019710:	6a 07                	push   0x7
c0019712:	6a 01                	push   0x1
c0019714:	53                   	push   ebx
c0019715:	e8 82 fa ff ff       	call   c001919c <IDE::read(unsigned char, unsigned char)>
c001971a:	83 c4 0c             	add    esp,0xc
c001971d:	6a 01                	push   0x1
c001971f:	6a 00                	push   0x0
c0019721:	53                   	push   ebx
c0019722:	e8 c3 fb ff ff       	call   c00192ea <IDE::enableIRQs(unsigned char, bool)>
c0019727:	83 c4 0c             	add    esp,0xc
c001972a:	6a 01                	push   0x1
c001972c:	6a 01                	push   0x1
c001972e:	53                   	push   ebx
c001972f:	e8 b6 fb ff ff       	call   c00192ea <IDE::enableIRQs(unsigned char, bool)>
c0019734:	83 c4 2c             	add    esp,0x2c
c0019737:	31 c0                	xor    eax,eax
c0019739:	5b                   	pop    ebx
c001973a:	5e                   	pop    esi
c001973b:	5f                   	pop    edi
c001973c:	5d                   	pop    ebp
c001973d:	c3                   	ret    

c001973e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001973e:	55                   	push   ebp
c001973f:	57                   	push   edi
c0019740:	56                   	push   esi
c0019741:	53                   	push   ebx
c0019742:	83 ec 1c             	sub    esp,0x1c
c0019745:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019749:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001974d:	8d 50 f8             	lea    edx,[eax-0x8]
c0019750:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019754:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0019758:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001975c:	80 fa 03             	cmp    dl,0x3
c001975f:	77 5d                	ja     c00197be <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0019761:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019765:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019769:	0f b6 db             	movzx  ebx,bl
c001976c:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001976f:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0019773:	83 ca 80             	or     edx,0xffffff80
c0019776:	0f b6 d2             	movzx  edx,dl
c0019779:	52                   	push   edx
c001977a:	6a 0c                	push   0xc
c001977c:	53                   	push   ebx
c001977d:	56                   	push   esi
c001977e:	e8 59 f9 ff ff       	call   c00190dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019783:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0019788:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001978c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019790:	0f b6 c0             	movzx  eax,al
c0019793:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0019797:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019799:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001979e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00197a2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00197a6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00197aa:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00197b2:	83 c4 2c             	add    esp,0x2c
c00197b5:	5b                   	pop    ebx
c00197b6:	5e                   	pop    esi
c00197b7:	5f                   	pop    edi
c00197b8:	5d                   	pop    ebp
c00197b9:	e9 1e f9 ff ff       	jmp    c00190dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c00197be:	3c 07                	cmp    al,0x7
c00197c0:	77 10                	ja     c00197d2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00197c2:	0f b6 db             	movzx  ebx,bl
c00197c5:	0f b6 d0             	movzx  edx,al
c00197c8:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00197d0:	eb 2d                	jmp    c00197ff <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00197d2:	3c 0d                	cmp    al,0xd
c00197d4:	77 13                	ja     c00197e9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00197d6:	0f b6 db             	movzx  ebx,bl
c00197d9:	0f b6 c0             	movzx  eax,al
c00197dc:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00197e3:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00197e7:	eb 16                	jmp    c00197ff <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00197e9:	3c 15                	cmp    al,0x15
c00197eb:	77 14                	ja     c0019801 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00197ed:	0f b6 db             	movzx  ebx,bl
c00197f0:	0f b6 c0             	movzx  eax,al
c00197f3:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00197fb:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00197ff:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019801:	83 c4 1c             	add    esp,0x1c
c0019804:	5b                   	pop    ebx
c0019805:	5e                   	pop    esi
c0019806:	5f                   	pop    edi
c0019807:	5d                   	pop    ebp
c0019808:	c3                   	ret    
c0019809:	90                   	nop

c001980a <IDE::detect()>:
c001980a:	55                   	push   ebp
c001980b:	57                   	push   edi
c001980c:	56                   	push   esi
c001980d:	53                   	push   ebx
c001980e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019814:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001981b:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0019822:	0f 85 97 02 00 00    	jne    c0019abf <IDE::detect()+0x2b5>
c0019828:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001982f:	31 f6                	xor    esi,esi
c0019831:	31 ed                	xor    ebp,ebp
c0019833:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001983b:	89 e8                	mov    eax,ebp
c001983d:	c1 e0 06             	shl    eax,0x6
c0019840:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0019848:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001984c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019850:	c1 e0 04             	shl    eax,0x4
c0019853:	83 c8 a0             	or     eax,0xffffffa0
c0019856:	0f b6 c0             	movzx  eax,al
c0019859:	50                   	push   eax
c001985a:	6a 06                	push   0x6
c001985c:	56                   	push   esi
c001985d:	53                   	push   ebx
c001985e:	e8 79 f8 ff ff       	call   c00190dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019863:	83 c4 0c             	add    esp,0xc
c0019866:	6a 0c                	push   0xc
c0019868:	56                   	push   esi
c0019869:	53                   	push   ebx
c001986a:	e8 2d f9 ff ff       	call   c001919c <IDE::read(unsigned char, unsigned char)>
c001986f:	83 c4 0c             	add    esp,0xc
c0019872:	6a 0c                	push   0xc
c0019874:	56                   	push   esi
c0019875:	53                   	push   ebx
c0019876:	e8 21 f9 ff ff       	call   c001919c <IDE::read(unsigned char, unsigned char)>
c001987b:	83 c4 0c             	add    esp,0xc
c001987e:	6a 0c                	push   0xc
c0019880:	56                   	push   esi
c0019881:	53                   	push   ebx
c0019882:	e8 15 f9 ff ff       	call   c001919c <IDE::read(unsigned char, unsigned char)>
c0019887:	83 c4 0c             	add    esp,0xc
c001988a:	6a 0c                	push   0xc
c001988c:	56                   	push   esi
c001988d:	53                   	push   ebx
c001988e:	e8 09 f9 ff ff       	call   c001919c <IDE::read(unsigned char, unsigned char)>
c0019893:	68 ec 00 00 00       	push   0xec
c0019898:	6a 07                	push   0x7
c001989a:	56                   	push   esi
c001989b:	53                   	push   ebx
c001989c:	e8 3b f8 ff ff       	call   c00190dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c00198a1:	83 c4 1c             	add    esp,0x1c
c00198a4:	6a 0c                	push   0xc
c00198a6:	56                   	push   esi
c00198a7:	53                   	push   ebx
c00198a8:	e8 ef f8 ff ff       	call   c001919c <IDE::read(unsigned char, unsigned char)>
c00198ad:	83 c4 0c             	add    esp,0xc
c00198b0:	6a 0c                	push   0xc
c00198b2:	56                   	push   esi
c00198b3:	53                   	push   ebx
c00198b4:	e8 e3 f8 ff ff       	call   c001919c <IDE::read(unsigned char, unsigned char)>
c00198b9:	83 c4 0c             	add    esp,0xc
c00198bc:	6a 0c                	push   0xc
c00198be:	56                   	push   esi
c00198bf:	53                   	push   ebx
c00198c0:	e8 d7 f8 ff ff       	call   c001919c <IDE::read(unsigned char, unsigned char)>
c00198c5:	83 c4 0c             	add    esp,0xc
c00198c8:	6a 0c                	push   0xc
c00198ca:	56                   	push   esi
c00198cb:	53                   	push   ebx
c00198cc:	e8 cb f8 ff ff       	call   c001919c <IDE::read(unsigned char, unsigned char)>
c00198d1:	83 c4 0c             	add    esp,0xc
c00198d4:	6a 0c                	push   0xc
c00198d6:	56                   	push   esi
c00198d7:	53                   	push   ebx
c00198d8:	e8 bf f8 ff ff       	call   c001919c <IDE::read(unsigned char, unsigned char)>
c00198dd:	83 c4 10             	add    esp,0x10
c00198e0:	84 c0                	test   al,al
c00198e2:	0f 84 5f 01 00 00    	je     c0019a47 <IDE::detect()+0x23d>
c00198e8:	31 ff                	xor    edi,edi
c00198ea:	50                   	push   eax
c00198eb:	6a 0c                	push   0xc
c00198ed:	56                   	push   esi
c00198ee:	53                   	push   ebx
c00198ef:	e8 a8 f8 ff ff       	call   c001919c <IDE::read(unsigned char, unsigned char)>
c00198f4:	83 c4 10             	add    esp,0x10
c00198f7:	a8 01                	test   al,0x1
c00198f9:	0f 85 69 01 00 00    	jne    c0019a68 <IDE::detect()+0x25e>
c00198ff:	84 c0                	test   al,al
c0019901:	78 04                	js     c0019907 <IDE::detect()+0xfd>
c0019903:	a8 08                	test   al,0x8
c0019905:	75 23                	jne    c001992a <IDE::detect()+0x120>
c0019907:	47                   	inc    edi
c0019908:	81 ff 17 01 00 00    	cmp    edi,0x117
c001990e:	7e da                	jle    c00198ea <IDE::detect()+0xe0>
c0019910:	83 ec 0c             	sub    esp,0xc
c0019913:	6a 32                	push   0x32
c0019915:	e8 c6 a1 ff ff       	call   c0013ae0 <milliTenthSleep(unsigned int)>
c001991a:	83 c4 10             	add    esp,0x10
c001991d:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0019923:	75 c5                	jne    c00198ea <IDE::detect()+0xe0>
c0019925:	e9 3e 01 00 00       	jmp    c0019a68 <IDE::detect()+0x25e>
c001992a:	31 c9                	xor    ecx,ecx
c001992c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0019930:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019934:	83 ec 0c             	sub    esp,0xc
c0019937:	68 80 00 00 00       	push   0x80
c001993c:	57                   	push   edi
c001993d:	6a 00                	push   0x0
c001993f:	56                   	push   esi
c0019940:	53                   	push   ebx
c0019941:	e8 f8 fd ff ff       	call   c001973e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0019946:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001994b:	89 e8                	mov    eax,ebp
c001994d:	89 d1                	mov    ecx,edx
c001994f:	c1 e0 06             	shl    eax,0x6
c0019952:	01 d8                	add    eax,ebx
c0019954:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001995b:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0019962:	89 f2                	mov    edx,esi
c0019964:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001996a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001996e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0019974:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019978:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001997f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0019987:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001998e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0019996:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001999c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00199a3:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00199a9:	8d 54 24 58          	lea    edx,[esp+0x58]
c00199ad:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00199b1:	83 c4 20             	add    esp,0x20
c00199b4:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00199b7:	83 c0 02             	add    eax,0x2
c00199ba:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00199c0:	83 c7 02             	add    edi,0x2
c00199c3:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00199c6:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00199cc:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00199d0:	75 e2                	jne    c00199b4 <IDE::detect()+0x1aa>
c00199d2:	89 e8                	mov    eax,ebp
c00199d4:	c1 e0 06             	shl    eax,0x6
c00199d7:	01 d8                	add    eax,ebx
c00199d9:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00199df:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00199e6:	66 c1 ea 09          	shr    dx,0x9
c00199ea:	83 e2 01             	and    edx,0x1
c00199ed:	84 c9                	test   cl,cl
c00199ef:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00199f5:	75 22                	jne    c0019a19 <IDE::detect()+0x20f>
c00199f7:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c00199fe:	74 46                	je     c0019a46 <IDE::detect()+0x23c>
c0019a00:	83 ec 0c             	sub    esp,0xc
c0019a03:	68 7c 01 00 00       	push   0x17c
c0019a08:	e8 14 de fe ff       	call   c0007821 <malloc>
c0019a0d:	89 c7                	mov    edi,eax
c0019a0f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a12:	e8 11 05 00 00       	call   c0019f28 <ATA::ATA()>
c0019a17:	eb 17                	jmp    c0019a30 <IDE::detect()+0x226>
c0019a19:	83 ec 0c             	sub    esp,0xc
c0019a1c:	68 84 01 00 00       	push   0x184
c0019a21:	e8 fb dd fe ff       	call   c0007821 <malloc>
c0019a26:	89 c7                	mov    edi,eax
c0019a28:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a2b:	e8 1e 0e 00 00       	call   c001a84e <ATAPI::ATAPI()>
c0019a30:	5a                   	pop    edx
c0019a31:	59                   	pop    ecx
c0019a32:	57                   	push   edi
c0019a33:	53                   	push   ebx
c0019a34:	e8 bf 1f ff ff       	call   c000b9f8 <Device::addChild(Device*)>
c0019a39:	8b 07                	mov    eax,DWORD PTR [edi]
c0019a3b:	53                   	push   ebx
c0019a3c:	55                   	push   ebp
c0019a3d:	6a 00                	push   0x0
c0019a3f:	57                   	push   edi
c0019a40:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a43:	83 c4 20             	add    esp,0x20
c0019a46:	45                   	inc    ebp
c0019a47:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0019a4c:	74 0d                	je     c0019a5b <IDE::detect()+0x251>
c0019a4e:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0019a56:	e9 e0 fd ff ff       	jmp    c001983b <IDE::detect()+0x31>
c0019a5b:	4e                   	dec    esi
c0019a5c:	74 61                	je     c0019abf <IDE::detect()+0x2b5>
c0019a5e:	be 01 00 00 00       	mov    esi,0x1
c0019a63:	e9 cb fd ff ff       	jmp    c0019833 <IDE::detect()+0x29>
c0019a68:	50                   	push   eax
c0019a69:	6a 04                	push   0x4
c0019a6b:	56                   	push   esi
c0019a6c:	53                   	push   ebx
c0019a6d:	e8 2a f7 ff ff       	call   c001919c <IDE::read(unsigned char, unsigned char)>
c0019a72:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019a76:	83 c4 0c             	add    esp,0xc
c0019a79:	6a 05                	push   0x5
c0019a7b:	56                   	push   esi
c0019a7c:	53                   	push   ebx
c0019a7d:	e8 1a f7 ff ff       	call   c001919c <IDE::read(unsigned char, unsigned char)>
c0019a82:	83 c4 10             	add    esp,0x10
c0019a85:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019a89:	80 fa 14             	cmp    dl,0x14
c0019a8c:	75 04                	jne    c0019a92 <IDE::detect()+0x288>
c0019a8e:	3c eb                	cmp    al,0xeb
c0019a90:	eb 07                	jmp    c0019a99 <IDE::detect()+0x28f>
c0019a92:	3c 96                	cmp    al,0x96
c0019a94:	75 b1                	jne    c0019a47 <IDE::detect()+0x23d>
c0019a96:	80 fa 69             	cmp    dl,0x69
c0019a99:	75 ac                	jne    c0019a47 <IDE::detect()+0x23d>
c0019a9b:	68 a1 00 00 00       	push   0xa1
c0019aa0:	6a 07                	push   0x7
c0019aa2:	56                   	push   esi
c0019aa3:	53                   	push   ebx
c0019aa4:	e8 33 f6 ff ff       	call   c00190dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019aa9:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0019ab0:	e8 2b a0 ff ff       	call   c0013ae0 <milliTenthSleep(unsigned int)>
c0019ab5:	83 c4 10             	add    esp,0x10
c0019ab8:	b1 01                	mov    cl,0x1
c0019aba:	e9 6d fe ff ff       	jmp    c001992c <IDE::detect()+0x122>
c0019abf:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019ac5:	5b                   	pop    ebx
c0019ac6:	5e                   	pop    esi
c0019ac7:	5f                   	pop    edi
c0019ac8:	5d                   	pop    ebp
c0019ac9:	c3                   	ret    

c0019aca <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0019aca:	55                   	push   ebp
c0019acb:	57                   	push   edi
c0019acc:	56                   	push   esi
c0019acd:	53                   	push   ebx
c0019ace:	83 ec 1c             	sub    esp,0x1c
c0019ad1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019ad5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019ad9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019add:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0019ae1:	88 c3                	mov    bl,al
c0019ae3:	84 c0                	test   al,al
c0019ae5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019ae9:	0f 84 81 00 00 00    	je     c0019b70 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019aef:	83 ec 0c             	sub    esp,0xc
c0019af2:	68 5f fb 01 c0       	push   0xc001fb5f
c0019af7:	e8 be 0a ff ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c0019afc:	83 c4 10             	add    esp,0x10
c0019aff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019b03:	3c 01                	cmp    al,0x1
c0019b05:	74 63                	je     c0019b6a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0019b07:	3c 02                	cmp    al,0x2
c0019b09:	75 53                	jne    c0019b5e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0019b0b:	01 f6                	add    esi,esi
c0019b0d:	09 ee                	or     esi,ebp
c0019b0f:	50                   	push   eax
c0019b10:	89 f0                	mov    eax,esi
c0019b12:	6a 01                	push   0x1
c0019b14:	0f b6 f0             	movzx  esi,al
c0019b17:	c1 e6 06             	shl    esi,0x6
c0019b1a:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0019b22:	50                   	push   eax
c0019b23:	57                   	push   edi
c0019b24:	e8 73 f6 ff ff       	call   c001919c <IDE::read(unsigned char, unsigned char)>
c0019b29:	83 c4 10             	add    esp,0x10
c0019b2c:	a8 01                	test   al,0x1
c0019b2e:	74 02                	je     c0019b32 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019b30:	b3 07                	mov    bl,0x7
c0019b32:	a8 02                	test   al,0x2
c0019b34:	74 02                	je     c0019b38 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0019b36:	b3 03                	mov    bl,0x3
c0019b38:	a8 04                	test   al,0x4
c0019b3a:	74 02                	je     c0019b3e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019b3c:	b3 14                	mov    bl,0x14
c0019b3e:	a8 08                	test   al,0x8
c0019b40:	74 02                	je     c0019b44 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0019b42:	b3 03                	mov    bl,0x3
c0019b44:	a8 10                	test   al,0x10
c0019b46:	74 02                	je     c0019b4a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019b48:	b3 15                	mov    bl,0x15
c0019b4a:	a8 20                	test   al,0x20
c0019b4c:	74 02                	je     c0019b50 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019b4e:	b3 03                	mov    bl,0x3
c0019b50:	a8 40                	test   al,0x40
c0019b52:	74 02                	je     c0019b56 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019b54:	b3 16                	mov    bl,0x16
c0019b56:	84 c0                	test   al,al
c0019b58:	79 16                	jns    c0019b70 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b5a:	b3 0d                	mov    bl,0xd
c0019b5c:	eb 12                	jmp    c0019b70 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b5e:	3c 03                	cmp    al,0x3
c0019b60:	74 0c                	je     c0019b6e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019b62:	3c 04                	cmp    al,0x4
c0019b64:	75 0a                	jne    c0019b70 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b66:	b3 08                	mov    bl,0x8
c0019b68:	eb 06                	jmp    c0019b70 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b6a:	b3 13                	mov    bl,0x13
c0019b6c:	eb 02                	jmp    c0019b70 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b6e:	b3 17                	mov    bl,0x17
c0019b70:	83 c4 1c             	add    esp,0x1c
c0019b73:	88 d8                	mov    al,bl
c0019b75:	5b                   	pop    ebx
c0019b76:	5e                   	pop    esi
c0019b77:	5f                   	pop    edi
c0019b78:	5d                   	pop    ebp
c0019b79:	c3                   	ret    

c0019b7a <IDE::polling(unsigned char, unsigned int)>:
c0019b7a:	55                   	push   ebp
c0019b7b:	bd 04 00 00 00       	mov    ebp,0x4
c0019b80:	57                   	push   edi
c0019b81:	56                   	push   esi
c0019b82:	53                   	push   ebx
c0019b83:	83 ec 0c             	sub    esp,0xc
c0019b86:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019b8a:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0019b8e:	0f b6 f3             	movzx  esi,bl
c0019b91:	52                   	push   edx
c0019b92:	6a 0c                	push   0xc
c0019b94:	56                   	push   esi
c0019b95:	57                   	push   edi
c0019b96:	e8 01 f6 ff ff       	call   c001919c <IDE::read(unsigned char, unsigned char)>
c0019b9b:	83 c4 10             	add    esp,0x10
c0019b9e:	4d                   	dec    ebp
c0019b9f:	75 ed                	jne    c0019b8e <IDE::polling(unsigned char, unsigned int)+0x14>
c0019ba1:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019ba6:	50                   	push   eax
c0019ba7:	6a 0c                	push   0xc
c0019ba9:	56                   	push   esi
c0019baa:	57                   	push   edi
c0019bab:	e8 ec f5 ff ff       	call   c001919c <IDE::read(unsigned char, unsigned char)>
c0019bb0:	83 c4 10             	add    esp,0x10
c0019bb3:	a8 01                	test   al,0x1
c0019bb5:	75 17                	jne    c0019bce <IDE::polling(unsigned char, unsigned int)+0x54>
c0019bb7:	a8 20                	test   al,0x20
c0019bb9:	75 0f                	jne    c0019bca <IDE::polling(unsigned char, unsigned int)+0x50>
c0019bbb:	4b                   	dec    ebx
c0019bbc:	74 10                	je     c0019bce <IDE::polling(unsigned char, unsigned int)+0x54>
c0019bbe:	84 c0                	test   al,al
c0019bc0:	78 e4                	js     c0019ba6 <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019bc2:	a8 08                	test   al,0x8
c0019bc4:	74 e0                	je     c0019ba6 <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019bc6:	31 c0                	xor    eax,eax
c0019bc8:	eb 06                	jmp    c0019bd0 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019bca:	b0 01                	mov    al,0x1
c0019bcc:	eb 02                	jmp    c0019bd0 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019bce:	b0 02                	mov    al,0x2
c0019bd0:	83 c4 0c             	add    esp,0xc
c0019bd3:	5b                   	pop    ebx
c0019bd4:	5e                   	pop    esi
c0019bd5:	5f                   	pop    edi
c0019bd6:	5d                   	pop    ebp
c0019bd7:	c3                   	ret    

c0019bd8 <SATABus::close(int, int, void*)>:
c0019bd8:	31 c0                	xor    eax,eax
c0019bda:	c3                   	ret    
c0019bdb:	90                   	nop

c0019bdc <SATABus::detect()>:
c0019bdc:	c3                   	ret    
c0019bdd:	90                   	nop

c0019bde <SATABus::SATABus()>:
c0019bde:	83 ec 0c             	sub    esp,0xc
c0019be1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019be5:	83 ec 08             	sub    esp,0x8
c0019be8:	68 98 fb 01 c0       	push   0xc001fb98
c0019bed:	50                   	push   eax
c0019bee:	e8 49 21 ff ff       	call   c000bd3c <HardDiskController::HardDiskController(char const*)>
c0019bf3:	83 c4 10             	add    esp,0x10
c0019bf6:	ba c4 fb 01 c0       	mov    edx,0xc001fbc4
c0019bfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bff:	89 10                	mov    DWORD PTR [eax],edx
c0019c01:	83 ec 0c             	sub    esp,0xc
c0019c04:	6a 50                	push   0x50
c0019c06:	e8 b0 df fe ff       	call   c0007bbb <Phys::allocateContiguousPages(int)>
c0019c0b:	83 c4 10             	add    esp,0x10
c0019c0e:	89 c2                	mov    edx,eax
c0019c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c14:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019c1a:	83 ec 0c             	sub    esp,0xc
c0019c1d:	6a 50                	push   0x50
c0019c1f:	e8 d9 f6 fe ff       	call   c00092fd <Virt::allocateKernelVirtualPages(int)>
c0019c24:	83 c4 10             	add    esp,0x10
c0019c27:	89 c2                	mov    edx,eax
c0019c29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c2d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019c33:	a1 b0 2f 02 c0       	mov    eax,ds:0xc0022fb0
c0019c38:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c3c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019c42:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c46:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019c4c:	83 ec 0c             	sub    esp,0xc
c0019c4f:	6a 03                	push   0x3
c0019c51:	6a 50                	push   0x50
c0019c53:	51                   	push   ecx
c0019c54:	52                   	push   edx
c0019c55:	50                   	push   eax
c0019c56:	e8 5f 00 ff ff       	call   c0009cba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019c5b:	83 c4 20             	add    esp,0x20
c0019c5e:	90                   	nop
c0019c5f:	83 c4 0c             	add    esp,0xc
c0019c62:	c3                   	ret    
c0019c63:	90                   	nop

c0019c64 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019c64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c68:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019c6b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019c6e:	09 c2                	or     edx,eax
c0019c70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c74:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019c7a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019c7c:	31 c0                	xor    eax,eax
c0019c7e:	c1 e9 08             	shr    ecx,0x8
c0019c81:	83 e1 0f             	and    ecx,0xf
c0019c84:	39 c8                	cmp    eax,ecx
c0019c86:	74 0a                	je     c0019c92 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019c88:	f6 c2 01             	test   dl,0x1
c0019c8b:	74 08                	je     c0019c95 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019c8d:	d1 ea                	shr    edx,1
c0019c8f:	40                   	inc    eax
c0019c90:	eb f2                	jmp    c0019c84 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019c92:	83 c8 ff             	or     eax,0xffffffff
c0019c95:	c3                   	ret    

c0019c96 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019c96:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019c9a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019c9d:	89 c2                	mov    edx,eax
c0019c9f:	c1 ea 08             	shr    edx,0x8
c0019ca2:	83 e2 0f             	and    edx,0xf
c0019ca5:	fe ca                	dec    dl
c0019ca7:	75 31                	jne    c0019cda <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019ca9:	83 e0 0f             	and    eax,0xf
c0019cac:	3c 03                	cmp    al,0x3
c0019cae:	75 2a                	jne    c0019cda <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019cb0:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019cb3:	b8 02 00 00 00       	mov    eax,0x2
c0019cb8:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019cbe:	74 1c                	je     c0019cdc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019cc0:	b8 04 00 00 00       	mov    eax,0x4
c0019cc5:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019ccb:	74 0f                	je     c0019cdc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019ccd:	31 c0                	xor    eax,eax
c0019ccf:	83 fa 03             	cmp    edx,0x3
c0019cd2:	0f 94 c0             	sete   al
c0019cd5:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019cd9:	c3                   	ret    
c0019cda:	31 c0                	xor    eax,eax
c0019cdc:	c3                   	ret    
c0019cdd:	90                   	nop

c0019cde <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019cde:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ce2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019ce5:	0f ba e2 0f          	bt     edx,0xf
c0019ce9:	72 f7                	jb     c0019ce2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019ceb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cee:	83 ca 10             	or     edx,0x10
c0019cf1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019cf4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cf7:	83 ca 01             	or     edx,0x1
c0019cfa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019cfd:	c3                   	ret    

c0019cfe <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019cfe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d02:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d05:	83 e2 fe             	and    edx,0xfffffffe
c0019d08:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d0b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d0e:	83 e2 ef             	and    edx,0xffffffef
c0019d11:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d14:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d17:	0f ba e2 0e          	bt     edx,0xe
c0019d1b:	72 f7                	jb     c0019d14 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019d1d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d20:	0f ba e2 0f          	bt     edx,0xf
c0019d24:	72 ee                	jb     c0019d14 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019d26:	c3                   	ret    
c0019d27:	90                   	nop

c0019d28 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019d28:	55                   	push   ebp
c0019d29:	57                   	push   edi
c0019d2a:	56                   	push   esi
c0019d2b:	53                   	push   ebx
c0019d2c:	83 ec 1c             	sub    esp,0x1c
c0019d2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019d33:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019d37:	53                   	push   ebx
c0019d38:	56                   	push   esi
c0019d39:	e8 c0 ff ff ff       	call   c0019cfe <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019d3e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019d42:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019d48:	83 ec 0c             	sub    esp,0xc
c0019d4b:	c1 e5 0a             	shl    ebp,0xa
c0019d4e:	01 e8                	add    eax,ebp
c0019d50:	89 03                	mov    DWORD PTR [ebx],eax
c0019d52:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d54:	68 00 04 00 00       	push   0x400
c0019d59:	6a 00                	push   0x0
c0019d5b:	50                   	push   eax
c0019d5c:	e8 6f 67 fe ff       	call   c00004d0 <memset>
c0019d61:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019d67:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019d6b:	01 e8                	add    eax,ebp
c0019d6d:	83 c4 1c             	add    esp,0x1c
c0019d70:	89 03                	mov    DWORD PTR [ebx],eax
c0019d72:	c1 e2 08             	shl    edx,0x8
c0019d75:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019d7c:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019d82:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019d88:	01 f8                	add    eax,edi
c0019d8a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019d8d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019d90:	68 00 01 00 00       	push   0x100
c0019d95:	6a 00                	push   0x0
c0019d97:	50                   	push   eax
c0019d98:	e8 33 67 fe ff       	call   c00004d0 <memset>
c0019d9d:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019da3:	01 fa                	add    edx,edi
c0019da5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019da9:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019dac:	c1 e7 0d             	shl    edi,0xd
c0019daf:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019db6:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019dbc:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019dc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019dc6:	31 ff                	xor    edi,edi
c0019dc8:	83 c4 10             	add    esp,0x10
c0019dcb:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019dd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019dd5:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019ddb:	83 c5 20             	add    ebp,0x20
c0019dde:	01 f8                	add    eax,edi
c0019de0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019de3:	52                   	push   edx
c0019de4:	68 00 01 00 00       	push   0x100
c0019de9:	6a 00                	push   0x0
c0019deb:	50                   	push   eax
c0019dec:	e8 df 66 fe ff       	call   c00004d0 <memset>
c0019df1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019df5:	83 c4 10             	add    esp,0x10
c0019df8:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019dfe:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019e05:	01 f8                	add    eax,edi
c0019e07:	81 c7 00 01 00 00    	add    edi,0x100
c0019e0d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019e10:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019e16:	75 b3                	jne    c0019dcb <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019e18:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019e1f:	50                   	push   eax
c0019e20:	50                   	push   eax
c0019e21:	53                   	push   ebx
c0019e22:	56                   	push   esi
c0019e23:	e8 b6 fe ff ff       	call   c0019cde <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019e28:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019e2f:	83 c4 2c             	add    esp,0x2c
c0019e32:	5b                   	pop    ebx
c0019e33:	5e                   	pop    esi
c0019e34:	5f                   	pop    edi
c0019e35:	5d                   	pop    ebp
c0019e36:	c3                   	ret    
c0019e37:	90                   	nop

c0019e38 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019e38:	55                   	push   ebp
c0019e39:	57                   	push   edi
c0019e3a:	56                   	push   esi
c0019e3b:	53                   	push   ebx
c0019e3c:	31 db                	xor    ebx,ebx
c0019e3e:	83 ec 0c             	sub    esp,0xc
c0019e41:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019e45:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019e49:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019e4c:	f7 c7 01 00 00 00    	test   edi,0x1
c0019e52:	74 7a                	je     c0019ece <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019e54:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019e58:	89 d8                	mov    eax,ebx
c0019e5a:	c1 e0 07             	shl    eax,0x7
c0019e5d:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019e64:	55                   	push   ebp
c0019e65:	56                   	push   esi
c0019e66:	e8 2b fe ff ff       	call   c0019c96 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019e6b:	5a                   	pop    edx
c0019e6c:	83 f8 01             	cmp    eax,0x1
c0019e6f:	59                   	pop    ecx
c0019e70:	75 21                	jne    c0019e93 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019e72:	50                   	push   eax
c0019e73:	53                   	push   ebx
c0019e74:	55                   	push   ebp
c0019e75:	56                   	push   esi
c0019e76:	e8 ad fe ff ff       	call   c0019d28 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019e7b:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019e82:	e8 9a d9 fe ff       	call   c0007821 <malloc>
c0019e87:	89 c5                	mov    ebp,eax
c0019e89:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e8c:	e8 71 10 00 00       	call   c001af02 <SATA::SATA()>
c0019e91:	eb 24                	jmp    c0019eb7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019e93:	83 f8 04             	cmp    eax,0x4
c0019e96:	75 36                	jne    c0019ece <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019e98:	51                   	push   ecx
c0019e99:	53                   	push   ebx
c0019e9a:	55                   	push   ebp
c0019e9b:	56                   	push   esi
c0019e9c:	e8 87 fe ff ff       	call   c0019d28 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019ea1:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019ea8:	e8 74 d9 fe ff       	call   c0007821 <malloc>
c0019ead:	89 c5                	mov    ebp,eax
c0019eaf:	89 04 24             	mov    DWORD PTR [esp],eax
c0019eb2:	e8 a5 17 00 00       	call   c001b65c <SATAPI::SATAPI()>
c0019eb7:	58                   	pop    eax
c0019eb8:	5a                   	pop    edx
c0019eb9:	55                   	push   ebp
c0019eba:	56                   	push   esi
c0019ebb:	e8 38 1b ff ff       	call   c000b9f8 <Device::addChild(Device*)>
c0019ec0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019ec3:	56                   	push   esi
c0019ec4:	6a 00                	push   0x0
c0019ec6:	53                   	push   ebx
c0019ec7:	55                   	push   ebp
c0019ec8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019ecb:	83 c4 20             	add    esp,0x20
c0019ece:	d1 ef                	shr    edi,1
c0019ed0:	43                   	inc    ebx
c0019ed1:	83 fb 20             	cmp    ebx,0x20
c0019ed4:	0f 85 72 ff ff ff    	jne    c0019e4c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019eda:	83 c4 0c             	add    esp,0xc
c0019edd:	5b                   	pop    ebx
c0019ede:	5e                   	pop    esi
c0019edf:	5f                   	pop    edi
c0019ee0:	5d                   	pop    ebp
c0019ee1:	c3                   	ret    

c0019ee2 <SATABus::open(int, int, void*)>:
c0019ee2:	83 ec 14             	sub    esp,0x14
c0019ee5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019ee9:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019eef:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019ef5:	52                   	push   edx
c0019ef6:	50                   	push   eax
c0019ef7:	e8 3c ff ff ff       	call   c0019e38 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019efc:	31 c0                	xor    eax,eax
c0019efe:	83 c4 1c             	add    esp,0x1c
c0019f01:	c3                   	ret    

c0019f02 <ATA::close(int, int, void*)>:
c0019f02:	83 ec 0c             	sub    esp,0xc
c0019f05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f09:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019f0f:	85 c0                	test   eax,eax
c0019f11:	74 0c                	je     c0019f1f <ATA::close(int, int, void*)+0x1d>
c0019f13:	83 ec 0c             	sub    esp,0xc
c0019f16:	8b 10                	mov    edx,DWORD PTR [eax]
c0019f18:	50                   	push   eax
c0019f19:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019f1c:	83 c4 10             	add    esp,0x10
c0019f1f:	31 c0                	xor    eax,eax
c0019f21:	83 c4 0c             	add    esp,0xc
c0019f24:	c3                   	ret    
c0019f25:	90                   	nop

c0019f26 <ATA::powerSaving(PowerSavingLevel)>:
c0019f26:	c3                   	ret    
c0019f27:	90                   	nop

c0019f28 <ATA::ATA()>:
c0019f28:	83 ec 0c             	sub    esp,0xc
c0019f2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f2f:	83 ec 04             	sub    esp,0x4
c0019f32:	68 00 02 00 00       	push   0x200
c0019f37:	68 91 fc 01 c0       	push   0xc001fc91
c0019f3c:	50                   	push   eax
c0019f3d:	e8 84 1e ff ff       	call   c000bdc6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019f42:	83 c4 10             	add    esp,0x10
c0019f45:	ba 04 fc 01 c0       	mov    edx,0xc001fc04
c0019f4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f4e:	89 10                	mov    DWORD PTR [eax],edx
c0019f50:	90                   	nop
c0019f51:	83 c4 0c             	add    esp,0xc
c0019f54:	c3                   	ret    
c0019f55:	90                   	nop

c0019f56 <ATA::flush(bool)>:
c0019f56:	53                   	push   ebx
c0019f57:	83 ec 08             	sub    esp,0x8
c0019f5a:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019f5f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f63:	19 c0                	sbb    eax,eax
c0019f65:	83 e0 fd             	and    eax,0xfffffffd
c0019f68:	05 ea 00 00 00       	add    eax,0xea
c0019f6d:	50                   	push   eax
c0019f6e:	6a 07                	push   0x7
c0019f70:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019f77:	50                   	push   eax
c0019f78:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f7e:	e8 59 f1 ff ff       	call   c00190dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019f83:	83 c4 0c             	add    esp,0xc
c0019f86:	6a 00                	push   0x0
c0019f88:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019f8f:	50                   	push   eax
c0019f90:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f96:	e8 df fb ff ff       	call   c0019b7a <IDE::polling(unsigned char, unsigned int)>
c0019f9b:	83 c4 18             	add    esp,0x18
c0019f9e:	5b                   	pop    ebx
c0019f9f:	c3                   	ret    

c0019fa0 <ATA::readyForCommand()>:
c0019fa0:	56                   	push   esi
c0019fa1:	53                   	push   ebx
c0019fa2:	53                   	push   ebx
c0019fa3:	31 db                	xor    ebx,ebx
c0019fa5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019fa9:	51                   	push   ecx
c0019faa:	6a 0c                	push   0xc
c0019fac:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019fb3:	50                   	push   eax
c0019fb4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019fba:	e8 dd f1 ff ff       	call   c001919c <IDE::read(unsigned char, unsigned char)>
c0019fbf:	83 c4 10             	add    esp,0x10
c0019fc2:	a8 88                	test   al,0x88
c0019fc4:	74 1f                	je     c0019fe5 <ATA::readyForCommand()+0x45>
c0019fc6:	43                   	inc    ebx
c0019fc7:	83 fb 63             	cmp    ebx,0x63
c0019fca:	7e dd                	jle    c0019fa9 <ATA::readyForCommand()+0x9>
c0019fcc:	83 ec 0c             	sub    esp,0xc
c0019fcf:	6a 0a                	push   0xa
c0019fd1:	e8 0a 9b ff ff       	call   c0013ae0 <milliTenthSleep(unsigned int)>
c0019fd6:	83 c4 10             	add    esp,0x10
c0019fd9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0019fdf:	75 c8                	jne    c0019fa9 <ATA::readyForCommand()+0x9>
c0019fe1:	31 c0                	xor    eax,eax
c0019fe3:	eb 02                	jmp    c0019fe7 <ATA::readyForCommand()+0x47>
c0019fe5:	b0 01                	mov    al,0x1
c0019fe7:	5a                   	pop    edx
c0019fe8:	5b                   	pop    ebx
c0019fe9:	5e                   	pop    esi
c0019fea:	c3                   	ret    
c0019feb:	90                   	nop

c0019fec <ATA::access(unsigned long long, int, void*, bool)>:
c0019fec:	55                   	push   ebp
c0019fed:	57                   	push   edi
c0019fee:	56                   	push   esi
c0019fef:	53                   	push   ebx
c0019ff0:	83 ec 2c             	sub    esp,0x2c
c0019ff3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019ff7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0019ffb:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019fff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a003:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001a007:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001a00b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a00f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001a015:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a019:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a01f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a023:	c1 e0 06             	shl    eax,0x6
c001a026:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001a02e:	74 5d                	je     c001a08d <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001a030:	89 fa                	mov    edx,edi
c001a032:	89 f0                	mov    eax,esi
c001a034:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001a038:	c1 ea 1c             	shr    edx,0x1c
c001a03b:	89 d1                	mov    ecx,edx
c001a03d:	09 c1                	or     ecx,eax
c001a03f:	74 25                	je     c001a066 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001a041:	31 ed                	xor    ebp,ebp
c001a043:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001a04a:	89 fa                	mov    edx,edi
c001a04c:	89 f0                	mov    eax,esi
c001a04e:	0f ad d0             	shrd   eax,edx,cl
c001a051:	d3 ea                	shr    edx,cl
c001a053:	f6 c1 20             	test   cl,0x20
c001a056:	74 02                	je     c001a05a <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001a058:	89 d0                	mov    eax,edx
c001a05a:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001a05e:	45                   	inc    ebp
c001a05f:	83 fd 06             	cmp    ebp,0x6
c001a062:	75 df                	jne    c001a043 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001a064:	eb 76                	jmp    c001a0dc <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001a066:	89 f0                	mov    eax,esi
c001a068:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001a06d:	89 fa                	mov    edx,edi
c001a06f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a076:	0f ac d0 10          	shrd   eax,edx,0x10
c001a07a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a07f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a083:	c1 ee 18             	shr    esi,0x18
c001a086:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001a08b:	eb 56                	jmp    c001a0e3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a08d:	6a 00                	push   0x0
c001a08f:	6a 3f                	push   0x3f
c001a091:	57                   	push   edi
c001a092:	56                   	push   esi
c001a093:	e8 88 29 00 00       	call   c001ca20 <__umoddi3>
c001a098:	83 c4 10             	add    esp,0x10
c001a09b:	40                   	inc    eax
c001a09c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001a0a0:	6a 00                	push   0x0
c001a0a2:	68 f0 03 00 00       	push   0x3f0
c001a0a7:	57                   	push   edi
c001a0a8:	56                   	push   esi
c001a0a9:	e8 72 28 00 00       	call   c001c920 <__udivdi3>
c001a0ae:	83 c4 10             	add    esp,0x10
c001a0b1:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001a0b6:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a0bd:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a0c2:	6a 00                	push   0x0
c001a0c4:	6a 3f                	push   0x3f
c001a0c6:	57                   	push   edi
c001a0c7:	56                   	push   esi
c001a0c8:	e8 53 28 00 00       	call   c001c920 <__udivdi3>
c001a0cd:	83 c4 10             	add    esp,0x10
c001a0d0:	89 c6                	mov    esi,eax
c001a0d2:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001a0d7:	83 e6 0f             	and    esi,0xf
c001a0da:	eb 07                	jmp    c001a0e3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a0dc:	31 f6                	xor    esi,esi
c001a0de:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001a0e3:	bf 01 00 00 00       	mov    edi,0x1
c001a0e8:	50                   	push   eax
c001a0e9:	6a 00                	push   0x0
c001a0eb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0f2:	50                   	push   eax
c001a0f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a0f7:	e8 ee f1 ff ff       	call   c00192ea <IDE::enableIRQs(unsigned char, bool)>
c001a0fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a0ff:	e8 9c fe ff ff       	call   c0019fa0 <ATA::readyForCommand()>
c001a104:	83 c4 10             	add    esp,0x10
c001a107:	84 c0                	test   al,al
c001a109:	0f 84 4e 02 00 00    	je     c001a35d <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a10f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a115:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a11b:	c1 e0 04             	shl    eax,0x4
c001a11e:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001a125:	09 c6                	or     esi,eax
c001a127:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001a12c:	75 05                	jne    c001a133 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001a12e:	83 ce a0             	or     esi,0xffffffa0
c001a131:	eb 03                	jmp    c001a136 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001a133:	83 ce e0             	or     esi,0xffffffe0
c001a136:	89 f0                	mov    eax,esi
c001a138:	0f b6 f0             	movzx  esi,al
c001a13b:	56                   	push   esi
c001a13c:	6a 06                	push   0x6
c001a13e:	51                   	push   ecx
c001a13f:	52                   	push   edx
c001a140:	e8 97 ef ff ff       	call   c00190dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a145:	83 c4 10             	add    esp,0x10
c001a148:	6a 00                	push   0x0
c001a14a:	6a 01                	push   0x1
c001a14c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a153:	50                   	push   eax
c001a154:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a15a:	e8 7d ef ff ff       	call   c00190dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a15f:	83 c4 10             	add    esp,0x10
c001a162:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a167:	75 6e                	jne    c001a1d7 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001a169:	6a 00                	push   0x0
c001a16b:	6a 08                	push   0x8
c001a16d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a174:	50                   	push   eax
c001a175:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a17b:	e8 5c ef ff ff       	call   c00190dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a180:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001a185:	50                   	push   eax
c001a186:	6a 09                	push   0x9
c001a188:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a18f:	50                   	push   eax
c001a190:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a196:	e8 41 ef ff ff       	call   c00190dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a19b:	83 c4 20             	add    esp,0x20
c001a19e:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001a1a3:	50                   	push   eax
c001a1a4:	6a 0a                	push   0xa
c001a1a6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1ad:	50                   	push   eax
c001a1ae:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1b4:	e8 23 ef ff ff       	call   c00190dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1b9:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001a1be:	50                   	push   eax
c001a1bf:	6a 0b                	push   0xb
c001a1c1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1c8:	50                   	push   eax
c001a1c9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1cf:	e8 08 ef ff ff       	call   c00190dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1d4:	83 c4 20             	add    esp,0x20
c001a1d7:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001a1dc:	50                   	push   eax
c001a1dd:	6a 02                	push   0x2
c001a1df:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1e6:	50                   	push   eax
c001a1e7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1ed:	e8 ea ee ff ff       	call   c00190dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1f2:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001a1f7:	50                   	push   eax
c001a1f8:	6a 03                	push   0x3
c001a1fa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a201:	50                   	push   eax
c001a202:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a208:	e8 cf ee ff ff       	call   c00190dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a20d:	83 c4 20             	add    esp,0x20
c001a210:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001a215:	50                   	push   eax
c001a216:	6a 04                	push   0x4
c001a218:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a21f:	50                   	push   eax
c001a220:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a226:	e8 b1 ee ff ff       	call   c00190dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a22b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a230:	50                   	push   eax
c001a231:	6a 05                	push   0x5
c001a233:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a23a:	50                   	push   eax
c001a23b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a241:	e8 96 ee ff ff       	call   c00190dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a246:	83 c4 20             	add    esp,0x20
c001a249:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a24e:	0f 94 c0             	sete   al
c001a251:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a256:	74 09                	je     c001a261 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001a258:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001a25f:	eb 07                	jmp    c001a268 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001a261:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001a268:	0f b6 c0             	movzx  eax,al
c001a26b:	50                   	push   eax
c001a26c:	6a 07                	push   0x7
c001a26e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a275:	50                   	push   eax
c001a276:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a27c:	e8 5b ee ff ff       	call   c00190dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a281:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a285:	83 c4 10             	add    esp,0x10
c001a288:	85 f6                	test   esi,esi
c001a28a:	0f 84 ae 00 00 00    	je     c001a33e <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001a290:	50                   	push   eax
c001a291:	6a 01                	push   0x1
c001a293:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a29a:	50                   	push   eax
c001a29b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2a1:	e8 d4 f8 ff ff       	call   c0019b7a <IDE::polling(unsigned char, unsigned int)>
c001a2a6:	83 c4 10             	add    esp,0x10
c001a2a9:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a2af:	84 c0                	test   al,al
c001a2b1:	74 20                	je     c001a2d3 <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001a2b3:	0f b6 f8             	movzx  edi,al
c001a2b6:	0f b6 d2             	movzx  edx,dl
c001a2b9:	57                   	push   edi
c001a2ba:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001a2c1:	50                   	push   eax
c001a2c2:	52                   	push   edx
c001a2c3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2c9:	e8 fc f7 ff ff       	call   c0019aca <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a2ce:	e9 87 00 00 00       	jmp    c001a35a <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001a2d3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a2d8:	74 33                	je     c001a30d <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001a2da:	31 ed                	xor    ebp,ebp
c001a2dc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a2e0:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001a2e4:	50                   	push   eax
c001a2e5:	50                   	push   eax
c001a2e6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a2ed:	50                   	push   eax
c001a2ee:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2f4:	e8 d1 ed ff ff       	call   c00190ca <IDE::getBase(unsigned char)>
c001a2f9:	89 c2                	mov    edx,eax
c001a2fb:	89 f8                	mov    eax,edi
c001a2fd:	66 ef                	out    dx,ax
c001a2ff:	45                   	inc    ebp
c001a300:	83 c4 10             	add    esp,0x10
c001a303:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001a309:	75 d1                	jne    c001a2dc <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001a30b:	eb 23                	jmp    c001a330 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001a30d:	0f b6 d2             	movzx  edx,dl
c001a310:	51                   	push   ecx
c001a311:	51                   	push   ecx
c001a312:	52                   	push   edx
c001a313:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a319:	e8 ac ed ff ff       	call   c00190ca <IDE::getBase(unsigned char)>
c001a31e:	b9 00 01 00 00       	mov    ecx,0x100
c001a323:	89 c2                	mov    edx,eax
c001a325:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001a329:	fc                   	cld    
c001a32a:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001a32d:	83 c4 10             	add    esp,0x10
c001a330:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001a338:	4e                   	dec    esi
c001a339:	e9 4a ff ff ff       	jmp    c001a288 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001a33e:	31 ff                	xor    edi,edi
c001a340:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a345:	74 16                	je     c001a35d <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a347:	50                   	push   eax
c001a348:	50                   	push   eax
c001a349:	31 c0                	xor    eax,eax
c001a34b:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001a350:	0f 94 c0             	sete   al
c001a353:	50                   	push   eax
c001a354:	53                   	push   ebx
c001a355:	e8 fc fb ff ff       	call   c0019f56 <ATA::flush(bool)>
c001a35a:	83 c4 10             	add    esp,0x10
c001a35d:	83 c4 2c             	add    esp,0x2c
c001a360:	89 f8                	mov    eax,edi
c001a362:	5b                   	pop    ebx
c001a363:	5e                   	pop    esi
c001a364:	5f                   	pop    edi
c001a365:	5d                   	pop    ebp
c001a366:	c3                   	ret    
c001a367:	90                   	nop

c001a368 <ATA::detectCHS()>:
c001a368:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a36c:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001a372:	c1 e0 06             	shl    eax,0x6
c001a375:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001a37b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001a385:	c7 44 24 04 e8 fb 01 c0 	mov    DWORD PTR [esp+0x4],0xc001fbe8
c001a38d:	e9 31 5f ff ff       	jmp    c00102c3 <KePanic(char const*)>

c001a392 <ATA::open(int, int, void*)>:
c001a392:	53                   	push   ebx
c001a393:	83 ec 08             	sub    esp,0x8
c001a396:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a39a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a39e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a3a2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a3a8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a3ae:	c1 e0 06             	shl    eax,0x6
c001a3b1:	01 d0                	add    eax,edx
c001a3b3:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001a3ba:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001a3c0:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001a3c7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a3d1:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001a3d7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a3de:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001a3e5:	75 0c                	jne    c001a3f3 <ATA::open(int, int, void*)+0x61>
c001a3e7:	83 ec 0c             	sub    esp,0xc
c001a3ea:	53                   	push   ebx
c001a3eb:	e8 78 ff ff ff       	call   c001a368 <ATA::detectCHS()>
c001a3f0:	83 c4 10             	add    esp,0x10
c001a3f3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a3f9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a3ff:	c1 e0 06             	shl    eax,0x6
c001a402:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001a409:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a413:	d1 e8                	shr    eax,1
c001a415:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001a41b:	6a 04                	push   0x4
c001a41d:	6a 0c                	push   0xc
c001a41f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a426:	50                   	push   eax
c001a427:	52                   	push   edx
c001a428:	e8 af ec ff ff       	call   c00190dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a42d:	90                   	nop
c001a42e:	90                   	nop
c001a42f:	6a 00                	push   0x0
c001a431:	6a 0c                	push   0xc
c001a433:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a43a:	50                   	push   eax
c001a43b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a441:	e8 96 ec ff ff       	call   c00190dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a446:	83 c4 14             	add    esp,0x14
c001a449:	53                   	push   ebx
c001a44a:	e8 df 19 ff ff       	call   c000be2e <PhysicalDisk::startCache()>
c001a44f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a452:	e8 7f 2a ff ff       	call   c000ced6 <createPartitionsForDisk(PhysicalDisk*)>
c001a457:	31 c0                	xor    eax,eax
c001a459:	83 c4 18             	add    esp,0x18
c001a45c:	5b                   	pop    ebx
c001a45d:	c3                   	ret    

c001a45e <combineCharAndColour(char, unsigned char)>:
c001a45e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a463:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001a469:	c1 e0 08             	shl    eax,0x8
c001a46c:	09 d0                	or     eax,edx
c001a46e:	c3                   	ret    

c001a46f <combineColours(unsigned char, unsigned char)>:
c001a46f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a474:	c1 e0 04             	shl    eax,0x4
c001a477:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001a47b:	c3                   	ret    

c001a47c <ATA::read(unsigned long long, int, void*)>:
c001a47c:	55                   	push   ebp
c001a47d:	57                   	push   edi
c001a47e:	56                   	push   esi
c001a47f:	be 04 00 00 00       	mov    esi,0x4
c001a484:	53                   	push   ebx
c001a485:	83 ec 0c             	sub    esp,0xc
c001a488:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a48c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a490:	8d 7b ff             	lea    edi,[ebx-0x1]
c001a493:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a497:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001a49b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a4a1:	0f 87 a1 01 00 00    	ja     c001a648 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001a4a7:	be 06 00 00 00       	mov    esi,0x6
c001a4ac:	85 c9                	test   ecx,ecx
c001a4ae:	0f 84 94 01 00 00    	je     c001a648 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001a4b4:	55                   	push   ebp
c001a4b5:	55                   	push   ebp
c001a4b6:	6a 00                	push   0x0
c001a4b8:	51                   	push   ecx
c001a4b9:	53                   	push   ebx
c001a4ba:	52                   	push   edx
c001a4bb:	50                   	push   eax
c001a4bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a4c0:	e8 27 fb ff ff       	call   c0019fec <ATA::access(unsigned long long, int, void*, bool)>
c001a4c5:	83 c4 20             	add    esp,0x20
c001a4c8:	89 c6                	mov    esi,eax
c001a4ca:	85 c0                	test   eax,eax
c001a4cc:	0f 85 71 01 00 00    	jne    c001a643 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001a4d2:	03 1d 54 6b 02 c0    	add    ebx,DWORD PTR ds:0xc0026b54
c001a4d8:	89 da                	mov    edx,ebx
c001a4da:	50                   	push   eax
c001a4db:	bd 10 27 00 00       	mov    ebp,0x2710
c001a4e0:	50                   	push   eax
c001a4e1:	89 1d 54 6b 02 c0    	mov    DWORD PTR ds:0xc0026b54,ebx
c001a4e7:	6a 0f                	push   0xf
c001a4e9:	6a 00                	push   0x0
c001a4eb:	e8 7f ff ff ff       	call   c001a46f <combineColours(unsigned char, unsigned char)>
c001a4f0:	59                   	pop    ecx
c001a4f1:	b9 0a 00 00 00       	mov    ecx,0xa
c001a4f6:	5b                   	pop    ebx
c001a4f7:	0f b6 d8             	movzx  ebx,al
c001a4fa:	89 d0                	mov    eax,edx
c001a4fc:	53                   	push   ebx
c001a4fd:	99                   	cdq    
c001a4fe:	f7 fd                	idiv   ebp
c001a500:	99                   	cdq    
c001a501:	f7 f9                	idiv   ecx
c001a503:	83 c2 30             	add    edx,0x30
c001a506:	0f b6 d2             	movzx  edx,dl
c001a509:	52                   	push   edx
c001a50a:	e8 4f ff ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001a50f:	5f                   	pop    edi
c001a510:	bf e8 03 00 00       	mov    edi,0x3e8
c001a515:	5a                   	pop    edx
c001a516:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001a51c:	53                   	push   ebx
c001a51d:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a522:	99                   	cdq    
c001a523:	f7 ff                	idiv   edi
c001a525:	99                   	cdq    
c001a526:	f7 f9                	idiv   ecx
c001a528:	8d 42 30             	lea    eax,[edx+0x30]
c001a52b:	0f b6 c0             	movzx  eax,al
c001a52e:	50                   	push   eax
c001a52f:	e8 2a ff ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001a534:	5f                   	pop    edi
c001a535:	bf 64 00 00 00       	mov    edi,0x64
c001a53a:	5a                   	pop    edx
c001a53b:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001a541:	53                   	push   ebx
c001a542:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a547:	99                   	cdq    
c001a548:	f7 ff                	idiv   edi
c001a54a:	99                   	cdq    
c001a54b:	f7 f9                	idiv   ecx
c001a54d:	8d 42 30             	lea    eax,[edx+0x30]
c001a550:	0f b6 c0             	movzx  eax,al
c001a553:	50                   	push   eax
c001a554:	e8 05 ff ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001a559:	5a                   	pop    edx
c001a55a:	5a                   	pop    edx
c001a55b:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001a561:	53                   	push   ebx
c001a562:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a567:	99                   	cdq    
c001a568:	f7 f9                	idiv   ecx
c001a56a:	99                   	cdq    
c001a56b:	f7 f9                	idiv   ecx
c001a56d:	8d 42 30             	lea    eax,[edx+0x30]
c001a570:	0f b6 c0             	movzx  eax,al
c001a573:	50                   	push   eax
c001a574:	e8 e5 fe ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001a579:	5a                   	pop    edx
c001a57a:	5a                   	pop    edx
c001a57b:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001a581:	53                   	push   ebx
c001a582:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a587:	99                   	cdq    
c001a588:	f7 f9                	idiv   ecx
c001a58a:	83 c2 30             	add    edx,0x30
c001a58d:	0f b6 d2             	movzx  edx,dl
c001a590:	52                   	push   edx
c001a591:	e8 c8 fe ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001a596:	5a                   	pop    edx
c001a597:	5a                   	pop    edx
c001a598:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001a59e:	53                   	push   ebx
c001a59f:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a5a4:	99                   	cdq    
c001a5a5:	f7 fd                	idiv   ebp
c001a5a7:	99                   	cdq    
c001a5a8:	f7 f9                	idiv   ecx
c001a5aa:	8d 42 30             	lea    eax,[edx+0x30]
c001a5ad:	0f b6 c0             	movzx  eax,al
c001a5b0:	50                   	push   eax
c001a5b1:	e8 a8 fe ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001a5b6:	5d                   	pop    ebp
c001a5b7:	bd e8 03 00 00       	mov    ebp,0x3e8
c001a5bc:	5a                   	pop    edx
c001a5bd:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001a5c3:	53                   	push   ebx
c001a5c4:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a5c9:	99                   	cdq    
c001a5ca:	f7 fd                	idiv   ebp
c001a5cc:	99                   	cdq    
c001a5cd:	f7 f9                	idiv   ecx
c001a5cf:	8d 42 30             	lea    eax,[edx+0x30]
c001a5d2:	0f b6 c0             	movzx  eax,al
c001a5d5:	50                   	push   eax
c001a5d6:	e8 83 fe ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001a5db:	5d                   	pop    ebp
c001a5dc:	5a                   	pop    edx
c001a5dd:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001a5e3:	53                   	push   ebx
c001a5e4:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a5e9:	99                   	cdq    
c001a5ea:	f7 ff                	idiv   edi
c001a5ec:	99                   	cdq    
c001a5ed:	f7 f9                	idiv   ecx
c001a5ef:	8d 42 30             	lea    eax,[edx+0x30]
c001a5f2:	0f b6 c0             	movzx  eax,al
c001a5f5:	50                   	push   eax
c001a5f6:	e8 63 fe ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001a5fb:	5f                   	pop    edi
c001a5fc:	5d                   	pop    ebp
c001a5fd:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001a603:	53                   	push   ebx
c001a604:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a609:	99                   	cdq    
c001a60a:	f7 f9                	idiv   ecx
c001a60c:	99                   	cdq    
c001a60d:	f7 f9                	idiv   ecx
c001a60f:	8d 42 30             	lea    eax,[edx+0x30]
c001a612:	0f b6 c0             	movzx  eax,al
c001a615:	50                   	push   eax
c001a616:	e8 43 fe ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001a61b:	5a                   	pop    edx
c001a61c:	5f                   	pop    edi
c001a61d:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001a623:	53                   	push   ebx
c001a624:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a629:	99                   	cdq    
c001a62a:	f7 f9                	idiv   ecx
c001a62c:	83 c2 30             	add    edx,0x30
c001a62f:	0f b6 d2             	movzx  edx,dl
c001a632:	52                   	push   edx
c001a633:	e8 26 fe ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001a638:	83 c4 10             	add    esp,0x10
c001a63b:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001a641:	eb 05                	jmp    c001a648 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001a643:	be 01 00 00 00       	mov    esi,0x1
c001a648:	83 c4 0c             	add    esp,0xc
c001a64b:	89 f0                	mov    eax,esi
c001a64d:	5b                   	pop    ebx
c001a64e:	5e                   	pop    esi
c001a64f:	5f                   	pop    edi
c001a650:	5d                   	pop    ebp
c001a651:	c3                   	ret    

c001a652 <ATA::write(unsigned long long, int, void*)>:
c001a652:	55                   	push   ebp
c001a653:	57                   	push   edi
c001a654:	56                   	push   esi
c001a655:	be 04 00 00 00       	mov    esi,0x4
c001a65a:	53                   	push   ebx
c001a65b:	83 ec 0c             	sub    esp,0xc
c001a65e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a662:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a666:	8d 7b ff             	lea    edi,[ebx-0x1]
c001a669:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a66d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001a671:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a677:	0f 87 9c 01 00 00    	ja     c001a819 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001a67d:	be 06 00 00 00       	mov    esi,0x6
c001a682:	85 c9                	test   ecx,ecx
c001a684:	0f 84 8f 01 00 00    	je     c001a819 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001a68a:	55                   	push   ebp
c001a68b:	55                   	push   ebp
c001a68c:	6a 01                	push   0x1
c001a68e:	51                   	push   ecx
c001a68f:	53                   	push   ebx
c001a690:	52                   	push   edx
c001a691:	50                   	push   eax
c001a692:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a696:	e8 51 f9 ff ff       	call   c0019fec <ATA::access(unsigned long long, int, void*, bool)>
c001a69b:	83 c4 20             	add    esp,0x20
c001a69e:	89 c6                	mov    esi,eax
c001a6a0:	85 c0                	test   eax,eax
c001a6a2:	0f 85 6c 01 00 00    	jne    c001a814 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001a6a8:	01 1d 50 6b 02 c0    	add    DWORD PTR ds:0xc0026b50,ebx
c001a6ae:	bd 10 27 00 00       	mov    ebp,0x2710
c001a6b3:	50                   	push   eax
c001a6b4:	50                   	push   eax
c001a6b5:	6a 0f                	push   0xf
c001a6b7:	6a 00                	push   0x0
c001a6b9:	e8 b1 fd ff ff       	call   c001a46f <combineColours(unsigned char, unsigned char)>
c001a6be:	5a                   	pop    edx
c001a6bf:	0f b6 d8             	movzx  ebx,al
c001a6c2:	59                   	pop    ecx
c001a6c3:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a6c8:	53                   	push   ebx
c001a6c9:	b9 0a 00 00 00       	mov    ecx,0xa
c001a6ce:	99                   	cdq    
c001a6cf:	f7 fd                	idiv   ebp
c001a6d1:	99                   	cdq    
c001a6d2:	f7 f9                	idiv   ecx
c001a6d4:	8d 42 30             	lea    eax,[edx+0x30]
c001a6d7:	0f b6 c0             	movzx  eax,al
c001a6da:	50                   	push   eax
c001a6db:	e8 7e fd ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001a6e0:	5f                   	pop    edi
c001a6e1:	bf e8 03 00 00       	mov    edi,0x3e8
c001a6e6:	5a                   	pop    edx
c001a6e7:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001a6ed:	53                   	push   ebx
c001a6ee:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a6f3:	99                   	cdq    
c001a6f4:	f7 ff                	idiv   edi
c001a6f6:	99                   	cdq    
c001a6f7:	f7 f9                	idiv   ecx
c001a6f9:	8d 42 30             	lea    eax,[edx+0x30]
c001a6fc:	0f b6 c0             	movzx  eax,al
c001a6ff:	50                   	push   eax
c001a700:	e8 59 fd ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001a705:	5f                   	pop    edi
c001a706:	bf 64 00 00 00       	mov    edi,0x64
c001a70b:	5a                   	pop    edx
c001a70c:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001a712:	53                   	push   ebx
c001a713:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a718:	99                   	cdq    
c001a719:	f7 ff                	idiv   edi
c001a71b:	99                   	cdq    
c001a71c:	f7 f9                	idiv   ecx
c001a71e:	8d 42 30             	lea    eax,[edx+0x30]
c001a721:	0f b6 c0             	movzx  eax,al
c001a724:	50                   	push   eax
c001a725:	e8 34 fd ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001a72a:	5a                   	pop    edx
c001a72b:	5a                   	pop    edx
c001a72c:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001a732:	53                   	push   ebx
c001a733:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a738:	99                   	cdq    
c001a739:	f7 f9                	idiv   ecx
c001a73b:	99                   	cdq    
c001a73c:	f7 f9                	idiv   ecx
c001a73e:	8d 42 30             	lea    eax,[edx+0x30]
c001a741:	0f b6 c0             	movzx  eax,al
c001a744:	50                   	push   eax
c001a745:	e8 14 fd ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001a74a:	5a                   	pop    edx
c001a74b:	5a                   	pop    edx
c001a74c:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001a752:	53                   	push   ebx
c001a753:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a758:	99                   	cdq    
c001a759:	f7 f9                	idiv   ecx
c001a75b:	8d 42 30             	lea    eax,[edx+0x30]
c001a75e:	0f b6 c0             	movzx  eax,al
c001a761:	50                   	push   eax
c001a762:	e8 f7 fc ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001a767:	5a                   	pop    edx
c001a768:	5a                   	pop    edx
c001a769:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001a76f:	53                   	push   ebx
c001a770:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a775:	99                   	cdq    
c001a776:	f7 fd                	idiv   ebp
c001a778:	99                   	cdq    
c001a779:	f7 f9                	idiv   ecx
c001a77b:	8d 42 30             	lea    eax,[edx+0x30]
c001a77e:	0f b6 c0             	movzx  eax,al
c001a781:	50                   	push   eax
c001a782:	e8 d7 fc ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001a787:	5d                   	pop    ebp
c001a788:	bd e8 03 00 00       	mov    ebp,0x3e8
c001a78d:	5a                   	pop    edx
c001a78e:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001a794:	53                   	push   ebx
c001a795:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a79a:	99                   	cdq    
c001a79b:	f7 fd                	idiv   ebp
c001a79d:	99                   	cdq    
c001a79e:	f7 f9                	idiv   ecx
c001a7a0:	8d 42 30             	lea    eax,[edx+0x30]
c001a7a3:	0f b6 c0             	movzx  eax,al
c001a7a6:	50                   	push   eax
c001a7a7:	e8 b2 fc ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001a7ac:	5d                   	pop    ebp
c001a7ad:	5a                   	pop    edx
c001a7ae:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001a7b4:	53                   	push   ebx
c001a7b5:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a7ba:	99                   	cdq    
c001a7bb:	f7 ff                	idiv   edi
c001a7bd:	99                   	cdq    
c001a7be:	f7 f9                	idiv   ecx
c001a7c0:	8d 42 30             	lea    eax,[edx+0x30]
c001a7c3:	0f b6 c0             	movzx  eax,al
c001a7c6:	50                   	push   eax
c001a7c7:	e8 92 fc ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001a7cc:	5f                   	pop    edi
c001a7cd:	5d                   	pop    ebp
c001a7ce:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001a7d4:	53                   	push   ebx
c001a7d5:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a7da:	99                   	cdq    
c001a7db:	f7 f9                	idiv   ecx
c001a7dd:	99                   	cdq    
c001a7de:	f7 f9                	idiv   ecx
c001a7e0:	8d 42 30             	lea    eax,[edx+0x30]
c001a7e3:	0f b6 c0             	movzx  eax,al
c001a7e6:	50                   	push   eax
c001a7e7:	e8 72 fc ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001a7ec:	5a                   	pop    edx
c001a7ed:	5f                   	pop    edi
c001a7ee:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001a7f4:	53                   	push   ebx
c001a7f5:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a7fa:	99                   	cdq    
c001a7fb:	f7 f9                	idiv   ecx
c001a7fd:	83 c2 30             	add    edx,0x30
c001a800:	0f b6 d2             	movzx  edx,dl
c001a803:	52                   	push   edx
c001a804:	e8 55 fc ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001a809:	83 c4 10             	add    esp,0x10
c001a80c:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001a812:	eb 05                	jmp    c001a819 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001a814:	be 01 00 00 00       	mov    esi,0x1
c001a819:	83 c4 0c             	add    esp,0xc
c001a81c:	89 f0                	mov    eax,esi
c001a81e:	5b                   	pop    ebx
c001a81f:	5e                   	pop    esi
c001a820:	5f                   	pop    edi
c001a821:	5d                   	pop    ebp
c001a822:	c3                   	ret    
c001a823:	90                   	nop

c001a824 <ATAPI::write(unsigned long long, int, void*)>:
c001a824:	b8 03 00 00 00       	mov    eax,0x3
c001a829:	c3                   	ret    

c001a82a <ATAPI::close(int, int, void*)>:
c001a82a:	83 ec 0c             	sub    esp,0xc
c001a82d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a831:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a837:	85 c0                	test   eax,eax
c001a839:	74 0c                	je     c001a847 <ATAPI::close(int, int, void*)+0x1d>
c001a83b:	83 ec 0c             	sub    esp,0xc
c001a83e:	8b 10                	mov    edx,DWORD PTR [eax]
c001a840:	50                   	push   eax
c001a841:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a844:	83 c4 10             	add    esp,0x10
c001a847:	31 c0                	xor    eax,eax
c001a849:	83 c4 0c             	add    esp,0xc
c001a84c:	c3                   	ret    
c001a84d:	90                   	nop

c001a84e <ATAPI::ATAPI()>:
c001a84e:	83 ec 0c             	sub    esp,0xc
c001a851:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a855:	83 ec 04             	sub    esp,0x4
c001a858:	68 00 08 00 00       	push   0x800
c001a85d:	68 31 fd 01 c0       	push   0xc001fd31
c001a862:	50                   	push   eax
c001a863:	e8 5e 15 ff ff       	call   c000bdc6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a868:	83 c4 10             	add    esp,0x10
c001a86b:	ba 4c fc 01 c0       	mov    edx,0xc001fc4c
c001a870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a874:	89 10                	mov    DWORD PTR [eax],edx
c001a876:	90                   	nop
c001a877:	83 c4 0c             	add    esp,0xc
c001a87a:	c3                   	ret    
c001a87b:	90                   	nop

c001a87c <ATAPI::readyForCommand()>:
c001a87c:	56                   	push   esi
c001a87d:	53                   	push   ebx
c001a87e:	53                   	push   ebx
c001a87f:	31 db                	xor    ebx,ebx
c001a881:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a885:	51                   	push   ecx
c001a886:	6a 0c                	push   0xc
c001a888:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a88f:	50                   	push   eax
c001a890:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a896:	e8 01 e9 ff ff       	call   c001919c <IDE::read(unsigned char, unsigned char)>
c001a89b:	83 c4 10             	add    esp,0x10
c001a89e:	a8 88                	test   al,0x88
c001a8a0:	74 25                	je     c001a8c7 <ATAPI::readyForCommand()+0x4b>
c001a8a2:	43                   	inc    ebx
c001a8a3:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a8a9:	7e da                	jle    c001a885 <ATAPI::readyForCommand()+0x9>
c001a8ab:	83 ec 0c             	sub    esp,0xc
c001a8ae:	68 5e 01 00 00       	push   0x15e
c001a8b3:	e8 28 92 ff ff       	call   c0013ae0 <milliTenthSleep(unsigned int)>
c001a8b8:	83 c4 10             	add    esp,0x10
c001a8bb:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a8c1:	75 c2                	jne    c001a885 <ATAPI::readyForCommand()+0x9>
c001a8c3:	31 c0                	xor    eax,eax
c001a8c5:	eb 02                	jmp    c001a8c9 <ATAPI::readyForCommand()+0x4d>
c001a8c7:	b0 01                	mov    al,0x1
c001a8c9:	5a                   	pop    edx
c001a8ca:	5b                   	pop    ebx
c001a8cb:	5e                   	pop    esi
c001a8cc:	c3                   	ret    
c001a8cd:	90                   	nop

c001a8ce <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a8ce:	55                   	push   ebp
c001a8cf:	57                   	push   edi
c001a8d0:	56                   	push   esi
c001a8d1:	53                   	push   ebx
c001a8d2:	83 ec 20             	sub    esp,0x20
c001a8d5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a8d9:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a8dd:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a8e1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a8e5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a8e9:	6a 01                	push   0x1
c001a8eb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a8f2:	50                   	push   eax
c001a8f3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a8f9:	e8 ec e9 ff ff       	call   c00192ea <IDE::enableIRQs(unsigned char, bool)>
c001a8fe:	5e                   	pop    esi
c001a8ff:	58                   	pop    eax
c001a900:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a907:	50                   	push   eax
c001a908:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a90e:	e8 a3 e7 ff ff       	call   c00190b6 <IDE::prepareInterrupt(unsigned char)>
c001a913:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a916:	e8 61 ff ff ff       	call   c001a87c <ATAPI::readyForCommand()>
c001a91b:	83 c4 10             	add    esp,0x10
c001a91e:	84 c0                	test   al,al
c001a920:	75 0a                	jne    c001a92c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a922:	bb 01 00 00 00       	mov    ebx,0x1
c001a927:	e9 57 02 00 00       	jmp    c001ab83 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a92c:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a932:	c1 e0 04             	shl    eax,0x4
c001a935:	0f b6 c0             	movzx  eax,al
c001a938:	50                   	push   eax
c001a939:	6a 06                	push   0x6
c001a93b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a942:	50                   	push   eax
c001a943:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a949:	e8 8e e7 ff ff       	call   c00190dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a94e:	6a 00                	push   0x0
c001a950:	6a 01                	push   0x1
c001a952:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a959:	50                   	push   eax
c001a95a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a960:	e8 77 e7 ff ff       	call   c00190dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a965:	83 c4 20             	add    esp,0x20
c001a968:	0f b6 c3             	movzx  eax,bl
c001a96b:	0f b6 df             	movzx  ebx,bh
c001a96e:	50                   	push   eax
c001a96f:	6a 04                	push   0x4
c001a971:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a978:	50                   	push   eax
c001a979:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a97f:	e8 58 e7 ff ff       	call   c00190dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a984:	53                   	push   ebx
c001a985:	6a 05                	push   0x5
c001a987:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a98e:	50                   	push   eax
c001a98f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a995:	e8 42 e7 ff ff       	call   c00190dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a99a:	83 c4 20             	add    esp,0x20
c001a99d:	68 a0 00 00 00       	push   0xa0
c001a9a2:	6a 07                	push   0x7
c001a9a4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a9ab:	50                   	push   eax
c001a9ac:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a9b2:	e8 25 e7 ff ff       	call   c00190dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a9b7:	83 c4 0c             	add    esp,0xc
c001a9ba:	6a 01                	push   0x1
c001a9bc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a9c3:	50                   	push   eax
c001a9c4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a9ca:	e8 ab f1 ff ff       	call   c0019b7a <IDE::polling(unsigned char, unsigned int)>
c001a9cf:	83 c4 10             	add    esp,0x10
c001a9d2:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a9d8:	84 c0                	test   al,al
c001a9da:	74 23                	je     c001a9ff <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a9dc:	0f b6 d8             	movzx  ebx,al
c001a9df:	0f b6 d2             	movzx  edx,dl
c001a9e2:	53                   	push   ebx
c001a9e3:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a9ea:	50                   	push   eax
c001a9eb:	52                   	push   edx
c001a9ec:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a9f2:	e8 d3 f0 ff ff       	call   c0019aca <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a9f7:	83 c4 10             	add    esp,0x10
c001a9fa:	e9 84 01 00 00       	jmp    c001ab83 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a9ff:	0f b6 d2             	movzx  edx,dl
c001aa02:	53                   	push   ebx
c001aa03:	53                   	push   ebx
c001aa04:	52                   	push   edx
c001aa05:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001aa0b:	e8 ba e6 ff ff       	call   c00190ca <IDE::getBase(unsigned char)>
c001aa10:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001aa14:	b9 06 00 00 00       	mov    ecx,0x6
c001aa19:	89 c2                	mov    edx,eax
c001aa1b:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001aa1e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001aa22:	83 c4 10             	add    esp,0x10
c001aa25:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001aa2b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001aa32:	85 db                	test   ebx,ebx
c001aa34:	0f 84 ec 00 00 00    	je     c001ab26 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001aa3a:	51                   	push   ecx
c001aa3b:	51                   	push   ecx
c001aa3c:	52                   	push   edx
c001aa3d:	50                   	push   eax
c001aa3e:	e8 07 e8 ff ff       	call   c001924a <IDE::waitInterrupt(unsigned char)>
c001aa43:	83 c4 10             	add    esp,0x10
c001aa46:	84 c0                	test   al,al
c001aa48:	0f 84 d4 fe ff ff    	je     c001a922 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001aa4e:	56                   	push   esi
c001aa4f:	56                   	push   esi
c001aa50:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001aa57:	50                   	push   eax
c001aa58:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001aa5e:	e8 53 e6 ff ff       	call   c00190b6 <IDE::prepareInterrupt(unsigned char)>
c001aa63:	83 c4 0c             	add    esp,0xc
c001aa66:	6a 04                	push   0x4
c001aa68:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001aa6f:	50                   	push   eax
c001aa70:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001aa76:	e8 21 e7 ff ff       	call   c001919c <IDE::read(unsigned char, unsigned char)>
c001aa7b:	83 c4 0c             	add    esp,0xc
c001aa7e:	89 c6                	mov    esi,eax
c001aa80:	6a 05                	push   0x5
c001aa82:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001aa89:	50                   	push   eax
c001aa8a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001aa90:	e8 07 e7 ff ff       	call   c001919c <IDE::read(unsigned char, unsigned char)>
c001aa95:	89 f1                	mov    ecx,esi
c001aa97:	0f b6 c0             	movzx  eax,al
c001aa9a:	0f b6 f1             	movzx  esi,cl
c001aa9d:	c1 e0 08             	shl    eax,0x8
c001aaa0:	09 c6                	or     esi,eax
c001aaa2:	d1 fe                	sar    esi,1
c001aaa4:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001aaa8:	83 c4 10             	add    esp,0x10
c001aaab:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001aab0:	74 41                	je     c001aaf3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001aab2:	31 c9                	xor    ecx,ecx
c001aab4:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001aaba:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001aac1:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001aac5:	75 0a                	jne    c001aad1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001aac7:	01 c9                	add    ecx,ecx
c001aac9:	01 cd                	add    ebp,ecx
c001aacb:	4b                   	dec    ebx
c001aacc:	e9 54 ff ff ff       	jmp    c001aa25 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001aad1:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001aad6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001aada:	51                   	push   ecx
c001aadb:	51                   	push   ecx
c001aadc:	52                   	push   edx
c001aadd:	50                   	push   eax
c001aade:	e8 e7 e5 ff ff       	call   c00190ca <IDE::getBase(unsigned char)>
c001aae3:	89 c2                	mov    edx,eax
c001aae5:	89 f0                	mov    eax,esi
c001aae7:	66 ef                	out    dx,ax
c001aae9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001aaed:	83 c4 10             	add    esp,0x10
c001aaf0:	41                   	inc    ecx
c001aaf1:	eb c1                	jmp    c001aab4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001aaf3:	31 f6                	xor    esi,esi
c001aaf5:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001aafb:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ab02:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001ab06:	75 06                	jne    c001ab0e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001ab08:	01 f6                	add    esi,esi
c001ab0a:	01 f5                	add    ebp,esi
c001ab0c:	eb bd                	jmp    c001aacb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001ab0e:	51                   	push   ecx
c001ab0f:	51                   	push   ecx
c001ab10:	52                   	push   edx
c001ab11:	50                   	push   eax
c001ab12:	e8 b3 e5 ff ff       	call   c00190ca <IDE::getBase(unsigned char)>
c001ab17:	89 c2                	mov    edx,eax
c001ab19:	66 ed                	in     ax,dx
c001ab1b:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001ab20:	83 c4 10             	add    esp,0x10
c001ab23:	46                   	inc    esi
c001ab24:	eb cf                	jmp    c001aaf5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001ab26:	51                   	push   ecx
c001ab27:	51                   	push   ecx
c001ab28:	52                   	push   edx
c001ab29:	50                   	push   eax
c001ab2a:	e8 1b e7 ff ff       	call   c001924a <IDE::waitInterrupt(unsigned char)>
c001ab2f:	83 c4 10             	add    esp,0x10
c001ab32:	84 c0                	test   al,al
c001ab34:	0f 84 e8 fd ff ff    	je     c001a922 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001ab3a:	bb a0 86 01 00       	mov    ebx,0x186a0
c001ab3f:	52                   	push   edx
c001ab40:	52                   	push   edx
c001ab41:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ab48:	50                   	push   eax
c001ab49:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ab4f:	e8 62 e5 ff ff       	call   c00190b6 <IDE::prepareInterrupt(unsigned char)>
c001ab54:	83 c4 10             	add    esp,0x10
c001ab57:	50                   	push   eax
c001ab58:	50                   	push   eax
c001ab59:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ab60:	50                   	push   eax
c001ab61:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ab67:	e8 5e e5 ff ff       	call   c00190ca <IDE::getBase(unsigned char)>
c001ab6c:	8d 50 07             	lea    edx,[eax+0x7]
c001ab6f:	ec                   	in     al,dx
c001ab70:	83 c4 10             	add    esp,0x10
c001ab73:	a8 88                	test   al,0x88
c001ab75:	74 0a                	je     c001ab81 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001ab77:	4b                   	dec    ebx
c001ab78:	75 dd                	jne    c001ab57 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001ab7a:	bb 02 00 00 00       	mov    ebx,0x2
c001ab7f:	eb 02                	jmp    c001ab83 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ab81:	31 db                	xor    ebx,ebx
c001ab83:	83 c4 1c             	add    esp,0x1c
c001ab86:	89 d8                	mov    eax,ebx
c001ab88:	5b                   	pop    ebx
c001ab89:	5e                   	pop    esi
c001ab8a:	5f                   	pop    edi
c001ab8b:	5d                   	pop    ebp
c001ab8c:	c3                   	ret    
c001ab8d:	90                   	nop

c001ab8e <ATAPI::diskRemoved()>:
c001ab8e:	53                   	push   ebx
c001ab8f:	83 ec 14             	sub    esp,0x14
c001ab92:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ab96:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001ab9d:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001aba3:	e8 ae 20 ff ff       	call   c000cc56 <LogicalDisk::unmount()>
c001aba8:	58                   	pop    eax
c001aba9:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001abaf:	e8 f0 29 ff ff       	call   c000d5a4 <VCache::writeWriteBuffer()>
c001abb4:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001abba:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001abbe:	83 c4 18             	add    esp,0x18
c001abc1:	5b                   	pop    ebx
c001abc2:	e9 cd 29 ff ff       	jmp    c000d594 <VCache::invalidateReadBuffer()>
c001abc7:	90                   	nop

c001abc8 <ATAPI::eject()>:
c001abc8:	57                   	push   edi
c001abc9:	b9 03 00 00 00       	mov    ecx,0x3
c001abce:	53                   	push   ebx
c001abcf:	83 ec 14             	sub    esp,0x14
c001abd2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001abd6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001abda:	fc                   	cld    
c001abdb:	31 c0                	xor    eax,eax
c001abdd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001abdf:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001abe4:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001abe9:	50                   	push   eax
c001abea:	50                   	push   eax
c001abeb:	6a 00                	push   0x0
c001abed:	6a 00                	push   0x0
c001abef:	6a 00                	push   0x0
c001abf1:	6a 02                	push   0x2
c001abf3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001abf7:	50                   	push   eax
c001abf8:	53                   	push   ebx
c001abf9:	e8 d0 fc ff ff       	call   c001a8ce <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001abfe:	83 c4 14             	add    esp,0x14
c001ac01:	53                   	push   ebx
c001ac02:	e8 87 ff ff ff       	call   c001ab8e <ATAPI::diskRemoved()>
c001ac07:	83 c4 24             	add    esp,0x24
c001ac0a:	31 c0                	xor    eax,eax
c001ac0c:	5b                   	pop    ebx
c001ac0d:	5f                   	pop    edi
c001ac0e:	c3                   	ret    
c001ac0f:	90                   	nop

c001ac10 <ATAPI::diskInserted()>:
c001ac10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac14:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001ac1b:	c3                   	ret    

c001ac1c <ATAPI::detectMedia()>:
c001ac1c:	56                   	push   esi
c001ac1d:	53                   	push   ebx
c001ac1e:	83 ec 28             	sub    esp,0x28
c001ac21:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ac25:	6a 0c                	push   0xc
c001ac27:	6a 00                	push   0x0
c001ac29:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001ac2d:	56                   	push   esi
c001ac2e:	e8 9d 58 fe ff       	call   c00004d0 <memset>
c001ac33:	58                   	pop    eax
c001ac34:	5a                   	pop    edx
c001ac35:	6a 00                	push   0x0
c001ac37:	6a 00                	push   0x0
c001ac39:	6a 00                	push   0x0
c001ac3b:	6a 00                	push   0x0
c001ac3d:	56                   	push   esi
c001ac3e:	53                   	push   ebx
c001ac3f:	e8 8a fc ff ff       	call   c001a8ce <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ac44:	83 c4 1c             	add    esp,0x1c
c001ac47:	6a 0c                	push   0xc
c001ac49:	6a 00                	push   0x0
c001ac4b:	56                   	push   esi
c001ac4c:	e8 7f 58 fe ff       	call   c00004d0 <memset>
c001ac51:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001ac56:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001ac5b:	59                   	pop    ecx
c001ac5c:	58                   	pop    eax
c001ac5d:	6a 01                	push   0x1
c001ac5f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001ac63:	50                   	push   eax
c001ac64:	6a 00                	push   0x0
c001ac66:	6a 12                	push   0x12
c001ac68:	56                   	push   esi
c001ac69:	53                   	push   ebx
c001ac6a:	e8 5f fc ff ff       	call   c001a8ce <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ac6f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001ac73:	83 c4 20             	add    esp,0x20
c001ac76:	83 e0 7f             	and    eax,0x7f
c001ac79:	3c 70                	cmp    al,0x70
c001ac7b:	74 15                	je     c001ac92 <ATAPI::detectMedia()+0x76>
c001ac7d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ac84:	75 0c                	jne    c001ac92 <ATAPI::detectMedia()+0x76>
c001ac86:	83 ec 0c             	sub    esp,0xc
c001ac89:	53                   	push   ebx
c001ac8a:	e8 81 ff ff ff       	call   c001ac10 <ATAPI::diskInserted()>
c001ac8f:	83 c4 10             	add    esp,0x10
c001ac92:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001ac96:	83 e0 0f             	and    eax,0xf
c001ac99:	3c 02                	cmp    al,0x2
c001ac9b:	75 1b                	jne    c001acb8 <ATAPI::detectMedia()+0x9c>
c001ac9d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001aca2:	75 2d                	jne    c001acd1 <ATAPI::detectMedia()+0xb5>
c001aca4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001acab:	74 24                	je     c001acd1 <ATAPI::detectMedia()+0xb5>
c001acad:	83 ec 0c             	sub    esp,0xc
c001acb0:	53                   	push   ebx
c001acb1:	e8 d8 fe ff ff       	call   c001ab8e <ATAPI::diskRemoved()>
c001acb6:	eb 16                	jmp    c001acce <ATAPI::detectMedia()+0xb2>
c001acb8:	84 c0                	test   al,al
c001acba:	75 15                	jne    c001acd1 <ATAPI::detectMedia()+0xb5>
c001acbc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001acc3:	75 0c                	jne    c001acd1 <ATAPI::detectMedia()+0xb5>
c001acc5:	83 ec 0c             	sub    esp,0xc
c001acc8:	53                   	push   ebx
c001acc9:	e8 42 ff ff ff       	call   c001ac10 <ATAPI::diskInserted()>
c001acce:	83 c4 10             	add    esp,0x10
c001acd1:	83 c4 24             	add    esp,0x24
c001acd4:	5b                   	pop    ebx
c001acd5:	5e                   	pop    esi
c001acd6:	c3                   	ret    
c001acd7:	90                   	nop

c001acd8 <ATAPI::open(int, int, void*)>:
c001acd8:	56                   	push   esi
c001acd9:	53                   	push   ebx
c001acda:	50                   	push   eax
c001acdb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001acdf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ace3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ace7:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001aced:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001acf3:	c1 e0 06             	shl    eax,0x6
c001acf6:	01 d0                	add    eax,edx
c001acf8:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001acff:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001ad05:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001ad0c:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001ad16:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ad1c:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001ad23:	6a 04                	push   0x4
c001ad25:	6a 0c                	push   0xc
c001ad27:	51                   	push   ecx
c001ad28:	52                   	push   edx
c001ad29:	e8 ae e3 ff ff       	call   c00190dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ad2e:	90                   	nop
c001ad2f:	90                   	nop
c001ad30:	6a 00                	push   0x0
c001ad32:	6a 0c                	push   0xc
c001ad34:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ad3b:	50                   	push   eax
c001ad3c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ad42:	e8 95 e3 ff ff       	call   c00190dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ad47:	83 c4 14             	add    esp,0x14
c001ad4a:	68 74 01 00 00       	push   0x174
c001ad4f:	e8 cd ca fe ff       	call   c0007821 <malloc>
c001ad54:	83 c4 0c             	add    esp,0xc
c001ad57:	89 c6                	mov    esi,eax
c001ad59:	6a 00                	push   0x0
c001ad5b:	68 ff ff ff 7f       	push   0x7fffffff
c001ad60:	6a 00                	push   0x0
c001ad62:	6a 00                	push   0x0
c001ad64:	53                   	push   ebx
c001ad65:	68 ce fd 01 c0       	push   0xc001fdce
c001ad6a:	50                   	push   eax
c001ad6b:	e8 32 1d ff ff       	call   c000caa2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001ad70:	83 c4 14             	add    esp,0x14
c001ad73:	56                   	push   esi
c001ad74:	e8 df 1d ff ff       	call   c000cb58 <LogicalDisk::assignDriveLetter()>
c001ad79:	5a                   	pop    edx
c001ad7a:	0f be c0             	movsx  eax,al
c001ad7d:	59                   	pop    ecx
c001ad7e:	50                   	push   eax
c001ad7f:	68 34 fc 01 c0       	push   0xc001fc34
c001ad84:	e8 31 f8 fe ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c001ad89:	58                   	pop    eax
c001ad8a:	5a                   	pop    edx
c001ad8b:	56                   	push   esi
c001ad8c:	53                   	push   ebx
c001ad8d:	e8 66 0c ff ff       	call   c000b9f8 <Device::addChild(Device*)>
c001ad92:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001ad98:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad9b:	e8 8e 10 ff ff       	call   c000be2e <PhysicalDisk::startCache()>
c001ada0:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001ada7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001adaa:	e8 6d fe ff ff       	call   c001ac1c <ATAPI::detectMedia()>
c001adaf:	83 c4 14             	add    esp,0x14
c001adb2:	31 c0                	xor    eax,eax
c001adb4:	5b                   	pop    ebx
c001adb5:	5e                   	pop    esi
c001adb6:	c3                   	ret    
c001adb7:	90                   	nop

c001adb8 <ATAPI::read(unsigned long long, int, void*)>:
c001adb8:	55                   	push   ebp
c001adb9:	57                   	push   edi
c001adba:	56                   	push   esi
c001adbb:	53                   	push   ebx
c001adbc:	83 ec 1c             	sub    esp,0x1c
c001adbf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001adc3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001adc7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001adcb:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001add2:	74 3c                	je     c001ae10 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001add4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001add8:	b9 03 00 00 00       	mov    ecx,0x3
c001addd:	fc                   	cld    
c001adde:	31 c0                	xor    eax,eax
c001ade0:	0f ce                	bswap  esi
c001ade2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ade4:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001ade9:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001aded:	89 e8                	mov    eax,ebp
c001adef:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001adf3:	50                   	push   eax
c001adf4:	50                   	push   eax
c001adf5:	55                   	push   ebp
c001adf6:	c1 e5 0b             	shl    ebp,0xb
c001adf9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001adfd:	6a 00                	push   0x0
c001adff:	55                   	push   ebp
c001ae00:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ae04:	50                   	push   eax
c001ae05:	53                   	push   ebx
c001ae06:	e8 c3 fa ff ff       	call   c001a8ce <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ae0b:	83 c4 20             	add    esp,0x20
c001ae0e:	eb 1a                	jmp    c001ae2a <ATAPI::read(unsigned long long, int, void*)+0x72>
c001ae10:	83 ec 0c             	sub    esp,0xc
c001ae13:	53                   	push   ebx
c001ae14:	e8 03 fe ff ff       	call   c001ac1c <ATAPI::detectMedia()>
c001ae19:	83 c4 10             	add    esp,0x10
c001ae1c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ae23:	75 af                	jne    c001add4 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001ae25:	b8 02 00 00 00       	mov    eax,0x2
c001ae2a:	83 c4 1c             	add    esp,0x1c
c001ae2d:	5b                   	pop    ebx
c001ae2e:	5e                   	pop    esi
c001ae2f:	5f                   	pop    edi
c001ae30:	5d                   	pop    ebp
c001ae31:	c3                   	ret    

c001ae32 <SATA::close(int, int, void*)>:
c001ae32:	83 ec 0c             	sub    esp,0xc
c001ae35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae39:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ae3f:	85 c0                	test   eax,eax
c001ae41:	74 0c                	je     c001ae4f <SATA::close(int, int, void*)+0x1d>
c001ae43:	83 ec 0c             	sub    esp,0xc
c001ae46:	8b 10                	mov    edx,DWORD PTR [eax]
c001ae48:	50                   	push   eax
c001ae49:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ae4c:	83 c4 10             	add    esp,0x10
c001ae4f:	31 c0                	xor    eax,eax
c001ae51:	83 c4 0c             	add    esp,0xc
c001ae54:	c3                   	ret    
c001ae55:	90                   	nop

c001ae56 <SATA::powerSaving(PowerSavingLevel)>:
c001ae56:	c3                   	ret    
c001ae57:	90                   	nop

c001ae58 <SATA::open(int, int, void*)>:
c001ae58:	56                   	push   esi
c001ae59:	53                   	push   ebx
c001ae5a:	50                   	push   eax
c001ae5b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ae5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ae63:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ae6d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ae73:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ae7d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae81:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ae8b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ae91:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ae98:	e8 60 cc fe ff       	call   c0007afd <Phys::allocatePage()>
c001ae9d:	89 c6                	mov    esi,eax
c001ae9f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001aea5:	81 c6 00 10 00 00    	add    esi,0x1000
c001aeab:	e8 4d cc fe ff       	call   c0007afd <Phys::allocatePage()>
c001aeb0:	39 c6                	cmp    esi,eax
c001aeb2:	74 10                	je     c001aec4 <SATA::open(int, int, void*)+0x6c>
c001aeb4:	83 ec 0c             	sub    esp,0xc
c001aeb7:	68 7c fc 01 c0       	push   0xc001fc7c
c001aebc:	e8 02 54 ff ff       	call   c00102c3 <KePanic(char const*)>
c001aec1:	83 c4 10             	add    esp,0x10
c001aec4:	83 ec 0c             	sub    esp,0xc
c001aec7:	6a 02                	push   0x2
c001aec9:	e8 2f e4 fe ff       	call   c00092fd <Virt::allocateKernelVirtualPages(int)>
c001aece:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001aed4:	6a 03                	push   0x3
c001aed6:	50                   	push   eax
c001aed7:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001aedd:	ff 35 b0 2f 02 c0    	push   DWORD PTR ds:0xc0022fb0
c001aee3:	e8 d8 ea fe ff       	call   c00099c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001aee8:	83 c4 14             	add    esp,0x14
c001aeeb:	53                   	push   ebx
c001aeec:	e8 3d 0f ff ff       	call   c000be2e <PhysicalDisk::startCache()>
c001aef1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aef4:	e8 dd 1f ff ff       	call   c000ced6 <createPartitionsForDisk(PhysicalDisk*)>
c001aef9:	83 c4 14             	add    esp,0x14
c001aefc:	31 c0                	xor    eax,eax
c001aefe:	5b                   	pop    ebx
c001aeff:	5e                   	pop    esi
c001af00:	c3                   	ret    
c001af01:	90                   	nop

c001af02 <SATA::SATA()>:
c001af02:	83 ec 0c             	sub    esp,0xc
c001af05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af09:	83 ec 04             	sub    esp,0x4
c001af0c:	68 00 02 00 00       	push   0x200
c001af11:	68 90 fc 01 c0       	push   0xc001fc90
c001af16:	50                   	push   eax
c001af17:	e8 aa 0e ff ff       	call   c000bdc6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001af1c:	83 c4 10             	add    esp,0x10
c001af1f:	ba 00 fd 01 c0       	mov    edx,0xc001fd00
c001af24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af28:	89 10                	mov    DWORD PTR [eax],edx
c001af2a:	90                   	nop
c001af2b:	83 c4 0c             	add    esp,0xc
c001af2e:	c3                   	ret    
c001af2f:	90                   	nop

c001af30 <SATA::access(unsigned long long, int, void*, bool)>:
c001af30:	55                   	push   ebp
c001af31:	57                   	push   edi
c001af32:	56                   	push   esi
c001af33:	53                   	push   ebx
c001af34:	83 ec 2c             	sub    esp,0x2c
c001af37:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001af3b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001af3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001af43:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001af47:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001af4b:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001af50:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af54:	7e 10                	jle    c001af66 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001af56:	83 ec 0c             	sub    esp,0xc
c001af59:	68 a0 fc 01 c0       	push   0xc001fca0
c001af5e:	e8 60 53 ff ff       	call   c00102c3 <KePanic(char const*)>
c001af63:	83 c4 10             	add    esp,0x10
c001af66:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001af6c:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001af72:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001af78:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001af7c:	89 d0                	mov    eax,edx
c001af7e:	c1 e0 07             	shl    eax,0x7
c001af81:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001af85:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001af8f:	51                   	push   ecx
c001af90:	8d 42 02             	lea    eax,[edx+0x2]
c001af93:	51                   	push   ecx
c001af94:	c1 e0 07             	shl    eax,0x7
c001af97:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001af9b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001af9f:	50                   	push   eax
c001afa0:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001afa6:	e8 b9 ec ff ff       	call   c0019c64 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001afab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001afaf:	83 c4 10             	add    esp,0x10
c001afb2:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001afb7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001afbb:	0f 84 4f 01 00 00    	je     c001b110 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001afc1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001afc5:	c1 e0 09             	shl    eax,0x9
c001afc8:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001afcd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001afd1:	74 0e                	je     c001afe1 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001afd3:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001afd9:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001afdd:	89 c1                	mov    ecx,eax
c001afdf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001afe1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001afe5:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001afeb:	8d 42 02             	lea    eax,[edx+0x2]
c001afee:	c1 e0 07             	shl    eax,0x7
c001aff1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001aff5:	8b 00                	mov    eax,DWORD PTR [eax]
c001aff7:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001affd:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001b003:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b007:	c1 e1 05             	shl    ecx,0x5
c001b00a:	01 c8                	add    eax,ecx
c001b00c:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001b010:	83 e1 01             	and    ecx,0x1
c001b013:	89 ce                	mov    esi,ecx
c001b015:	8a 08                	mov    cl,BYTE PTR [eax]
c001b017:	c1 e6 06             	shl    esi,0x6
c001b01a:	83 e1 bf             	and    ecx,0xffffffbf
c001b01d:	09 f1                	or     ecx,esi
c001b01f:	88 08                	mov    BYTE PTR [eax],cl
c001b021:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b023:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001b029:	81 c9 05 00 01 00    	or     ecx,0x10005
c001b02f:	89 08                	mov    DWORD PTR [eax],ecx
c001b031:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001b037:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001b03d:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001b043:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001b046:	50                   	push   eax
c001b047:	68 90 00 00 00       	push   0x90
c001b04c:	6a 00                	push   0x0
c001b04e:	56                   	push   esi
c001b04f:	e8 7c 54 fe ff       	call   c00004d0 <memset>
c001b054:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001b05a:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001b05e:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001b064:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001b068:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b06c:	83 c4 10             	add    esp,0x10
c001b06f:	48                   	dec    eax
c001b070:	25 ff ff 3f 00       	and    eax,0x3fffff
c001b075:	89 c1                	mov    ecx,eax
c001b077:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001b07d:	25 00 00 c0 ff       	and    eax,0xffc00000
c001b082:	09 c8                	or     eax,ecx
c001b084:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001b08a:	66 8b 06             	mov    ax,WORD PTR [esi]
c001b08d:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001b094:	66 25 00 7f          	and    ax,0x7f00
c001b098:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b09c:	66 0d 27 80          	or     ax,0x8027
c001b0a0:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001b0a5:	66 89 06             	mov    WORD PTR [esi],ax
c001b0a8:	19 c0                	sbb    eax,eax
c001b0aa:	83 e0 f0             	and    eax,0xfffffff0
c001b0ad:	83 c0 35             	add    eax,0x35
c001b0b0:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001b0b3:	89 e8                	mov    eax,ebp
c001b0b5:	c1 e8 10             	shr    eax,0x10
c001b0b8:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001b0bb:	89 e8                	mov    eax,ebp
c001b0bd:	c1 e8 18             	shr    eax,0x18
c001b0c0:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001b0c3:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001b0c7:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001b0ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b0ce:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001b0d1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b0d5:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001b0d9:	89 d6                	mov    esi,edx
c001b0db:	31 c0                	xor    eax,eax
c001b0dd:	c1 e6 07             	shl    esi,0x7
c001b0e0:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001b0e4:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001b0ea:	80 e1 88             	and    cl,0x88
c001b0ed:	74 0a                	je     c001b0f9 <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001b0ef:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b0f4:	74 0a                	je     c001b100 <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001b0f6:	40                   	inc    eax
c001b0f7:	eb eb                	jmp    c001b0e4 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001b0f9:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b0fe:	75 17                	jne    c001b117 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001b100:	83 ec 0c             	sub    esp,0xc
c001b103:	68 d9 fc 01 c0       	push   0xc001fcd9
c001b108:	e8 ad f4 fe ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c001b10d:	83 c4 10             	add    esp,0x10
c001b110:	b8 01 00 00 00       	mov    eax,0x1
c001b115:	eb 5d                	jmp    c001b174 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001b117:	b8 01 00 00 00       	mov    eax,0x1
c001b11c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b120:	c1 e2 07             	shl    edx,0x7
c001b123:	d3 e0                	shl    eax,cl
c001b125:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001b129:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001b12f:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001b135:	85 c8                	test   eax,ecx
c001b137:	74 16                	je     c001b14f <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001b139:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001b13f:	0f ba e1 1e          	bt     ecx,0x1e
c001b143:	73 ea                	jae    c001b12f <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001b145:	83 ec 0c             	sub    esp,0xc
c001b148:	68 e7 fc 01 c0       	push   0xc001fce7
c001b14d:	eb b9                	jmp    c001b108 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001b14f:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001b155:	0f ba e0 1e          	bt     eax,0x1e
c001b159:	72 b5                	jb     c001b110 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001b15b:	31 c0                	xor    eax,eax
c001b15d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001b162:	75 10                	jne    c001b174 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001b164:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001b16a:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001b16e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b172:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b174:	83 c4 2c             	add    esp,0x2c
c001b177:	5b                   	pop    ebx
c001b178:	5e                   	pop    esi
c001b179:	5f                   	pop    edi
c001b17a:	5d                   	pop    ebp
c001b17b:	c3                   	ret    

c001b17c <SATA::read(unsigned long long, int, void*)>:
c001b17c:	55                   	push   ebp
c001b17d:	57                   	push   edi
c001b17e:	56                   	push   esi
c001b17f:	be 04 00 00 00       	mov    esi,0x4
c001b184:	53                   	push   ebx
c001b185:	83 ec 0c             	sub    esp,0xc
c001b188:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b18c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b190:	8d 7b ff             	lea    edi,[ebx-0x1]
c001b193:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b197:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b19b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001b1a1:	0f 87 1a 02 00 00    	ja     c001b3c1 <SATA::read(unsigned long long, int, void*)+0x245>
c001b1a7:	be 06 00 00 00       	mov    esi,0x6
c001b1ac:	85 c9                	test   ecx,ecx
c001b1ae:	0f 84 0d 02 00 00    	je     c001b3c1 <SATA::read(unsigned long long, int, void*)+0x245>
c001b1b4:	56                   	push   esi
c001b1b5:	56                   	push   esi
c001b1b6:	6a 00                	push   0x0
c001b1b8:	51                   	push   ecx
c001b1b9:	53                   	push   ebx
c001b1ba:	52                   	push   edx
c001b1bb:	50                   	push   eax
c001b1bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b1c0:	e8 6b fd ff ff       	call   c001af30 <SATA::access(unsigned long long, int, void*, bool)>
c001b1c5:	83 c4 20             	add    esp,0x20
c001b1c8:	89 c6                	mov    esi,eax
c001b1ca:	85 c0                	test   eax,eax
c001b1cc:	0f 85 ea 01 00 00    	jne    c001b3bc <SATA::read(unsigned long long, int, void*)+0x240>
c001b1d2:	01 1d 54 6b 02 c0    	add    DWORD PTR ds:0xc0026b54,ebx
c001b1d8:	bb 0a 00 00 00       	mov    ebx,0xa
c001b1dd:	50                   	push   eax
c001b1de:	50                   	push   eax
c001b1df:	6a 0f                	push   0xf
c001b1e1:	6a 00                	push   0x0
c001b1e3:	e8 87 f2 ff ff       	call   c001a46f <combineColours(unsigned char, unsigned char)>
c001b1e8:	5a                   	pop    edx
c001b1e9:	0f b6 c0             	movzx  eax,al
c001b1ec:	59                   	pop    ecx
c001b1ed:	b9 10 27 00 00       	mov    ecx,0x2710
c001b1f2:	50                   	push   eax
c001b1f3:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b1f8:	99                   	cdq    
c001b1f9:	f7 f9                	idiv   ecx
c001b1fb:	99                   	cdq    
c001b1fc:	f7 fb                	idiv   ebx
c001b1fe:	8d 42 30             	lea    eax,[edx+0x30]
c001b201:	0f b6 c0             	movzx  eax,al
c001b204:	50                   	push   eax
c001b205:	e8 54 f2 ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001b20a:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001b210:	5f                   	pop    edi
c001b211:	5d                   	pop    ebp
c001b212:	bd e8 03 00 00       	mov    ebp,0x3e8
c001b217:	6a 0f                	push   0xf
c001b219:	6a 00                	push   0x0
c001b21b:	e8 4f f2 ff ff       	call   c001a46f <combineColours(unsigned char, unsigned char)>
c001b220:	5a                   	pop    edx
c001b221:	0f b6 c0             	movzx  eax,al
c001b224:	59                   	pop    ecx
c001b225:	50                   	push   eax
c001b226:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b22b:	99                   	cdq    
c001b22c:	f7 fd                	idiv   ebp
c001b22e:	99                   	cdq    
c001b22f:	f7 fb                	idiv   ebx
c001b231:	8d 42 30             	lea    eax,[edx+0x30]
c001b234:	0f b6 c0             	movzx  eax,al
c001b237:	50                   	push   eax
c001b238:	e8 21 f2 ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001b23d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001b243:	5f                   	pop    edi
c001b244:	bf 64 00 00 00       	mov    edi,0x64
c001b249:	58                   	pop    eax
c001b24a:	6a 0f                	push   0xf
c001b24c:	6a 00                	push   0x0
c001b24e:	e8 1c f2 ff ff       	call   c001a46f <combineColours(unsigned char, unsigned char)>
c001b253:	5a                   	pop    edx
c001b254:	0f b6 c0             	movzx  eax,al
c001b257:	59                   	pop    ecx
c001b258:	50                   	push   eax
c001b259:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b25e:	99                   	cdq    
c001b25f:	f7 ff                	idiv   edi
c001b261:	99                   	cdq    
c001b262:	f7 fb                	idiv   ebx
c001b264:	8d 42 30             	lea    eax,[edx+0x30]
c001b267:	0f b6 c0             	movzx  eax,al
c001b26a:	50                   	push   eax
c001b26b:	e8 ee f1 ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001b270:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001b276:	58                   	pop    eax
c001b277:	5a                   	pop    edx
c001b278:	6a 0f                	push   0xf
c001b27a:	6a 00                	push   0x0
c001b27c:	e8 ee f1 ff ff       	call   c001a46f <combineColours(unsigned char, unsigned char)>
c001b281:	59                   	pop    ecx
c001b282:	0f b6 c0             	movzx  eax,al
c001b285:	5a                   	pop    edx
c001b286:	50                   	push   eax
c001b287:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b28c:	99                   	cdq    
c001b28d:	f7 fb                	idiv   ebx
c001b28f:	99                   	cdq    
c001b290:	f7 fb                	idiv   ebx
c001b292:	8d 42 30             	lea    eax,[edx+0x30]
c001b295:	0f b6 c0             	movzx  eax,al
c001b298:	50                   	push   eax
c001b299:	e8 c0 f1 ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001b29e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001b2a4:	59                   	pop    ecx
c001b2a5:	58                   	pop    eax
c001b2a6:	6a 0f                	push   0xf
c001b2a8:	6a 00                	push   0x0
c001b2aa:	e8 c0 f1 ff ff       	call   c001a46f <combineColours(unsigned char, unsigned char)>
c001b2af:	5a                   	pop    edx
c001b2b0:	0f b6 c0             	movzx  eax,al
c001b2b3:	59                   	pop    ecx
c001b2b4:	50                   	push   eax
c001b2b5:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b2ba:	99                   	cdq    
c001b2bb:	f7 fb                	idiv   ebx
c001b2bd:	8d 42 30             	lea    eax,[edx+0x30]
c001b2c0:	0f b6 c0             	movzx  eax,al
c001b2c3:	50                   	push   eax
c001b2c4:	e8 95 f1 ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001b2c9:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001b2cf:	58                   	pop    eax
c001b2d0:	5a                   	pop    edx
c001b2d1:	6a 0f                	push   0xf
c001b2d3:	6a 00                	push   0x0
c001b2d5:	e8 95 f1 ff ff       	call   c001a46f <combineColours(unsigned char, unsigned char)>
c001b2da:	59                   	pop    ecx
c001b2db:	0f b6 c0             	movzx  eax,al
c001b2de:	5a                   	pop    edx
c001b2df:	b9 10 27 00 00       	mov    ecx,0x2710
c001b2e4:	50                   	push   eax
c001b2e5:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b2ea:	99                   	cdq    
c001b2eb:	f7 f9                	idiv   ecx
c001b2ed:	99                   	cdq    
c001b2ee:	f7 fb                	idiv   ebx
c001b2f0:	8d 42 30             	lea    eax,[edx+0x30]
c001b2f3:	0f b6 c0             	movzx  eax,al
c001b2f6:	50                   	push   eax
c001b2f7:	e8 62 f1 ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001b2fc:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001b302:	59                   	pop    ecx
c001b303:	58                   	pop    eax
c001b304:	6a 0f                	push   0xf
c001b306:	6a 00                	push   0x0
c001b308:	e8 62 f1 ff ff       	call   c001a46f <combineColours(unsigned char, unsigned char)>
c001b30d:	5a                   	pop    edx
c001b30e:	0f b6 c0             	movzx  eax,al
c001b311:	59                   	pop    ecx
c001b312:	50                   	push   eax
c001b313:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b318:	99                   	cdq    
c001b319:	f7 fd                	idiv   ebp
c001b31b:	99                   	cdq    
c001b31c:	f7 fb                	idiv   ebx
c001b31e:	8d 42 30             	lea    eax,[edx+0x30]
c001b321:	0f b6 c0             	movzx  eax,al
c001b324:	50                   	push   eax
c001b325:	e8 34 f1 ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001b32a:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001b330:	5d                   	pop    ebp
c001b331:	58                   	pop    eax
c001b332:	6a 0f                	push   0xf
c001b334:	6a 00                	push   0x0
c001b336:	e8 34 f1 ff ff       	call   c001a46f <combineColours(unsigned char, unsigned char)>
c001b33b:	5a                   	pop    edx
c001b33c:	0f b6 c0             	movzx  eax,al
c001b33f:	59                   	pop    ecx
c001b340:	50                   	push   eax
c001b341:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b346:	99                   	cdq    
c001b347:	f7 ff                	idiv   edi
c001b349:	99                   	cdq    
c001b34a:	f7 fb                	idiv   ebx
c001b34c:	8d 42 30             	lea    eax,[edx+0x30]
c001b34f:	0f b6 c0             	movzx  eax,al
c001b352:	50                   	push   eax
c001b353:	e8 06 f1 ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001b358:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001b35e:	5f                   	pop    edi
c001b35f:	5d                   	pop    ebp
c001b360:	6a 0f                	push   0xf
c001b362:	6a 00                	push   0x0
c001b364:	e8 06 f1 ff ff       	call   c001a46f <combineColours(unsigned char, unsigned char)>
c001b369:	5a                   	pop    edx
c001b36a:	0f b6 c0             	movzx  eax,al
c001b36d:	59                   	pop    ecx
c001b36e:	50                   	push   eax
c001b36f:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b374:	99                   	cdq    
c001b375:	f7 fb                	idiv   ebx
c001b377:	99                   	cdq    
c001b378:	f7 fb                	idiv   ebx
c001b37a:	8d 42 30             	lea    eax,[edx+0x30]
c001b37d:	0f b6 c0             	movzx  eax,al
c001b380:	50                   	push   eax
c001b381:	e8 d8 f0 ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001b386:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001b38c:	5f                   	pop    edi
c001b38d:	5d                   	pop    ebp
c001b38e:	6a 0f                	push   0xf
c001b390:	6a 00                	push   0x0
c001b392:	e8 d8 f0 ff ff       	call   c001a46f <combineColours(unsigned char, unsigned char)>
c001b397:	5a                   	pop    edx
c001b398:	0f b6 c0             	movzx  eax,al
c001b39b:	59                   	pop    ecx
c001b39c:	50                   	push   eax
c001b39d:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b3a2:	99                   	cdq    
c001b3a3:	f7 fb                	idiv   ebx
c001b3a5:	83 c2 30             	add    edx,0x30
c001b3a8:	0f b6 d2             	movzx  edx,dl
c001b3ab:	52                   	push   edx
c001b3ac:	e8 ad f0 ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001b3b1:	83 c4 10             	add    esp,0x10
c001b3b4:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001b3ba:	eb 05                	jmp    c001b3c1 <SATA::read(unsigned long long, int, void*)+0x245>
c001b3bc:	be 01 00 00 00       	mov    esi,0x1
c001b3c1:	83 c4 0c             	add    esp,0xc
c001b3c4:	89 f0                	mov    eax,esi
c001b3c6:	5b                   	pop    ebx
c001b3c7:	5e                   	pop    esi
c001b3c8:	5f                   	pop    edi
c001b3c9:	5d                   	pop    ebp
c001b3ca:	c3                   	ret    
c001b3cb:	90                   	nop

c001b3cc <SATA::write(unsigned long long, int, void*)>:
c001b3cc:	55                   	push   ebp
c001b3cd:	b8 04 00 00 00       	mov    eax,0x4
c001b3d2:	57                   	push   edi
c001b3d3:	56                   	push   esi
c001b3d4:	53                   	push   ebx
c001b3d5:	83 ec 1c             	sub    esp,0x1c
c001b3d8:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001b3dc:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b3e0:	8d 75 ff             	lea    esi,[ebp-0x1]
c001b3e3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b3e7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001b3eb:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001b3f1:	0f 87 32 02 00 00    	ja     c001b629 <SATA::write(unsigned long long, int, void*)+0x25d>
c001b3f7:	b8 06 00 00 00       	mov    eax,0x6
c001b3fc:	85 ff                	test   edi,edi
c001b3fe:	0f 84 25 02 00 00    	je     c001b629 <SATA::write(unsigned long long, int, void*)+0x25d>
c001b404:	89 ee                	mov    esi,ebp
c001b406:	c1 e6 09             	shl    esi,0x9
c001b409:	01 fe                	add    esi,edi
c001b40b:	89 c8                	mov    eax,ecx
c001b40d:	89 da                	mov    edx,ebx
c001b40f:	83 c0 01             	add    eax,0x1
c001b412:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b416:	83 d2 00             	adc    edx,0x0
c001b419:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b41d:	50                   	push   eax
c001b41e:	50                   	push   eax
c001b41f:	6a 01                	push   0x1
c001b421:	57                   	push   edi
c001b422:	81 c7 00 02 00 00    	add    edi,0x200
c001b428:	6a 01                	push   0x1
c001b42a:	53                   	push   ebx
c001b42b:	51                   	push   ecx
c001b42c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b430:	e8 fb fa ff ff       	call   c001af30 <SATA::access(unsigned long long, int, void*, bool)>
c001b435:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001b439:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b43d:	83 c4 20             	add    esp,0x20
c001b440:	39 f7                	cmp    edi,esi
c001b442:	75 c7                	jne    c001b40b <SATA::write(unsigned long long, int, void*)+0x3f>
c001b444:	bb 0a 00 00 00       	mov    ebx,0xa
c001b449:	01 2d 50 6b 02 c0    	add    DWORD PTR ds:0xc0026b50,ebp
c001b44f:	bd 10 27 00 00       	mov    ebp,0x2710
c001b454:	50                   	push   eax
c001b455:	50                   	push   eax
c001b456:	6a 0f                	push   0xf
c001b458:	6a 00                	push   0x0
c001b45a:	e8 10 f0 ff ff       	call   c001a46f <combineColours(unsigned char, unsigned char)>
c001b45f:	5a                   	pop    edx
c001b460:	0f b6 c0             	movzx  eax,al
c001b463:	59                   	pop    ecx
c001b464:	50                   	push   eax
c001b465:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b46a:	99                   	cdq    
c001b46b:	f7 fd                	idiv   ebp
c001b46d:	99                   	cdq    
c001b46e:	f7 fb                	idiv   ebx
c001b470:	8d 42 30             	lea    eax,[edx+0x30]
c001b473:	0f b6 c0             	movzx  eax,al
c001b476:	50                   	push   eax
c001b477:	e8 e2 ef ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001b47c:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001b482:	5e                   	pop    esi
c001b483:	5f                   	pop    edi
c001b484:	bf e8 03 00 00       	mov    edi,0x3e8
c001b489:	6a 0f                	push   0xf
c001b48b:	6a 00                	push   0x0
c001b48d:	e8 dd ef ff ff       	call   c001a46f <combineColours(unsigned char, unsigned char)>
c001b492:	5a                   	pop    edx
c001b493:	0f b6 c0             	movzx  eax,al
c001b496:	59                   	pop    ecx
c001b497:	50                   	push   eax
c001b498:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b49d:	99                   	cdq    
c001b49e:	f7 ff                	idiv   edi
c001b4a0:	99                   	cdq    
c001b4a1:	f7 fb                	idiv   ebx
c001b4a3:	8d 42 30             	lea    eax,[edx+0x30]
c001b4a6:	0f b6 c0             	movzx  eax,al
c001b4a9:	50                   	push   eax
c001b4aa:	e8 af ef ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001b4af:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001b4b5:	5e                   	pop    esi
c001b4b6:	be 64 00 00 00       	mov    esi,0x64
c001b4bb:	58                   	pop    eax
c001b4bc:	6a 0f                	push   0xf
c001b4be:	6a 00                	push   0x0
c001b4c0:	e8 aa ef ff ff       	call   c001a46f <combineColours(unsigned char, unsigned char)>
c001b4c5:	5a                   	pop    edx
c001b4c6:	0f b6 c0             	movzx  eax,al
c001b4c9:	59                   	pop    ecx
c001b4ca:	50                   	push   eax
c001b4cb:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b4d0:	99                   	cdq    
c001b4d1:	f7 fe                	idiv   esi
c001b4d3:	99                   	cdq    
c001b4d4:	f7 fb                	idiv   ebx
c001b4d6:	8d 42 30             	lea    eax,[edx+0x30]
c001b4d9:	0f b6 c0             	movzx  eax,al
c001b4dc:	50                   	push   eax
c001b4dd:	e8 7c ef ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001b4e2:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001b4e8:	58                   	pop    eax
c001b4e9:	5a                   	pop    edx
c001b4ea:	6a 0f                	push   0xf
c001b4ec:	6a 00                	push   0x0
c001b4ee:	e8 7c ef ff ff       	call   c001a46f <combineColours(unsigned char, unsigned char)>
c001b4f3:	59                   	pop    ecx
c001b4f4:	0f b6 c0             	movzx  eax,al
c001b4f7:	5a                   	pop    edx
c001b4f8:	50                   	push   eax
c001b4f9:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b4fe:	99                   	cdq    
c001b4ff:	f7 fb                	idiv   ebx
c001b501:	99                   	cdq    
c001b502:	f7 fb                	idiv   ebx
c001b504:	8d 42 30             	lea    eax,[edx+0x30]
c001b507:	0f b6 c0             	movzx  eax,al
c001b50a:	50                   	push   eax
c001b50b:	e8 4e ef ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001b510:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001b516:	59                   	pop    ecx
c001b517:	58                   	pop    eax
c001b518:	6a 0f                	push   0xf
c001b51a:	6a 00                	push   0x0
c001b51c:	e8 4e ef ff ff       	call   c001a46f <combineColours(unsigned char, unsigned char)>
c001b521:	5a                   	pop    edx
c001b522:	0f b6 c0             	movzx  eax,al
c001b525:	59                   	pop    ecx
c001b526:	50                   	push   eax
c001b527:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b52c:	99                   	cdq    
c001b52d:	f7 fb                	idiv   ebx
c001b52f:	83 c2 30             	add    edx,0x30
c001b532:	0f b6 d2             	movzx  edx,dl
c001b535:	52                   	push   edx
c001b536:	e8 23 ef ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001b53b:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001b541:	58                   	pop    eax
c001b542:	5a                   	pop    edx
c001b543:	6a 0f                	push   0xf
c001b545:	6a 00                	push   0x0
c001b547:	e8 23 ef ff ff       	call   c001a46f <combineColours(unsigned char, unsigned char)>
c001b54c:	59                   	pop    ecx
c001b54d:	0f b6 c0             	movzx  eax,al
c001b550:	5a                   	pop    edx
c001b551:	50                   	push   eax
c001b552:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b557:	99                   	cdq    
c001b558:	f7 fd                	idiv   ebp
c001b55a:	99                   	cdq    
c001b55b:	f7 fb                	idiv   ebx
c001b55d:	8d 42 30             	lea    eax,[edx+0x30]
c001b560:	0f b6 c0             	movzx  eax,al
c001b563:	50                   	push   eax
c001b564:	e8 f5 ee ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001b569:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001b56f:	59                   	pop    ecx
c001b570:	5d                   	pop    ebp
c001b571:	6a 0f                	push   0xf
c001b573:	6a 00                	push   0x0
c001b575:	e8 f5 ee ff ff       	call   c001a46f <combineColours(unsigned char, unsigned char)>
c001b57a:	5a                   	pop    edx
c001b57b:	0f b6 c0             	movzx  eax,al
c001b57e:	59                   	pop    ecx
c001b57f:	50                   	push   eax
c001b580:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b585:	99                   	cdq    
c001b586:	f7 ff                	idiv   edi
c001b588:	99                   	cdq    
c001b589:	f7 fb                	idiv   ebx
c001b58b:	8d 42 30             	lea    eax,[edx+0x30]
c001b58e:	0f b6 c0             	movzx  eax,al
c001b591:	50                   	push   eax
c001b592:	e8 c7 ee ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001b597:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001b59d:	5f                   	pop    edi
c001b59e:	5d                   	pop    ebp
c001b59f:	6a 0f                	push   0xf
c001b5a1:	6a 00                	push   0x0
c001b5a3:	e8 c7 ee ff ff       	call   c001a46f <combineColours(unsigned char, unsigned char)>
c001b5a8:	5a                   	pop    edx
c001b5a9:	0f b6 c0             	movzx  eax,al
c001b5ac:	59                   	pop    ecx
c001b5ad:	50                   	push   eax
c001b5ae:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b5b3:	99                   	cdq    
c001b5b4:	f7 fe                	idiv   esi
c001b5b6:	99                   	cdq    
c001b5b7:	f7 fb                	idiv   ebx
c001b5b9:	8d 42 30             	lea    eax,[edx+0x30]
c001b5bc:	0f b6 c0             	movzx  eax,al
c001b5bf:	50                   	push   eax
c001b5c0:	e8 99 ee ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001b5c5:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001b5cb:	5e                   	pop    esi
c001b5cc:	5f                   	pop    edi
c001b5cd:	6a 0f                	push   0xf
c001b5cf:	6a 00                	push   0x0
c001b5d1:	e8 99 ee ff ff       	call   c001a46f <combineColours(unsigned char, unsigned char)>
c001b5d6:	5d                   	pop    ebp
c001b5d7:	0f b6 c0             	movzx  eax,al
c001b5da:	5a                   	pop    edx
c001b5db:	50                   	push   eax
c001b5dc:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b5e1:	99                   	cdq    
c001b5e2:	f7 fb                	idiv   ebx
c001b5e4:	99                   	cdq    
c001b5e5:	f7 fb                	idiv   ebx
c001b5e7:	8d 42 30             	lea    eax,[edx+0x30]
c001b5ea:	0f b6 c0             	movzx  eax,al
c001b5ed:	50                   	push   eax
c001b5ee:	e8 6b ee ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001b5f3:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001b5f9:	59                   	pop    ecx
c001b5fa:	5e                   	pop    esi
c001b5fb:	6a 0f                	push   0xf
c001b5fd:	6a 00                	push   0x0
c001b5ff:	e8 6b ee ff ff       	call   c001a46f <combineColours(unsigned char, unsigned char)>
c001b604:	5f                   	pop    edi
c001b605:	0f b6 c0             	movzx  eax,al
c001b608:	5d                   	pop    ebp
c001b609:	50                   	push   eax
c001b60a:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b60f:	99                   	cdq    
c001b610:	f7 fb                	idiv   ebx
c001b612:	83 c2 30             	add    edx,0x30
c001b615:	0f b6 d2             	movzx  edx,dl
c001b618:	52                   	push   edx
c001b619:	e8 40 ee ff ff       	call   c001a45e <combineCharAndColour(char, unsigned char)>
c001b61e:	83 c4 10             	add    esp,0x10
c001b621:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001b627:	31 c0                	xor    eax,eax
c001b629:	83 c4 1c             	add    esp,0x1c
c001b62c:	5b                   	pop    ebx
c001b62d:	5e                   	pop    esi
c001b62e:	5f                   	pop    edi
c001b62f:	5d                   	pop    ebp
c001b630:	c3                   	ret    
c001b631:	90                   	nop

c001b632 <SATAPI::write(unsigned long long, int, void*)>:
c001b632:	b8 03 00 00 00       	mov    eax,0x3
c001b637:	c3                   	ret    

c001b638 <SATAPI::close(int, int, void*)>:
c001b638:	83 ec 0c             	sub    esp,0xc
c001b63b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b63f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b645:	85 c0                	test   eax,eax
c001b647:	74 0c                	je     c001b655 <SATAPI::close(int, int, void*)+0x1d>
c001b649:	83 ec 0c             	sub    esp,0xc
c001b64c:	8b 10                	mov    edx,DWORD PTR [eax]
c001b64e:	50                   	push   eax
c001b64f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b652:	83 c4 10             	add    esp,0x10
c001b655:	31 c0                	xor    eax,eax
c001b657:	83 c4 0c             	add    esp,0xc
c001b65a:	c3                   	ret    
c001b65b:	90                   	nop

c001b65c <SATAPI::SATAPI()>:
c001b65c:	83 ec 0c             	sub    esp,0xc
c001b65f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b663:	83 ec 04             	sub    esp,0x4
c001b666:	68 00 08 00 00       	push   0x800
c001b66b:	68 30 fd 01 c0       	push   0xc001fd30
c001b670:	50                   	push   eax
c001b671:	e8 50 07 ff ff       	call   c000bdc6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001b676:	83 c4 10             	add    esp,0x10
c001b679:	ba 10 fe 01 c0       	mov    edx,0xc001fe10
c001b67e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b682:	89 10                	mov    DWORD PTR [eax],edx
c001b684:	90                   	nop
c001b685:	83 c4 0c             	add    esp,0xc
c001b688:	c3                   	ret    
c001b689:	90                   	nop

c001b68a <SATAPI::diskRemoved()>:
c001b68a:	c3                   	ret    
c001b68b:	90                   	nop

c001b68c <SATAPI::diskInserted()>:
c001b68c:	83 ec 18             	sub    esp,0x18
c001b68f:	68 3c fd 01 c0       	push   0xc001fd3c
c001b694:	e8 21 ef fe ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c001b699:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b69d:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001b6a4:	83 c4 1c             	add    esp,0x1c
c001b6a7:	c3                   	ret    

c001b6a8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001b6a8:	55                   	push   ebp
c001b6a9:	57                   	push   edi
c001b6aa:	56                   	push   esi
c001b6ab:	53                   	push   ebx
c001b6ac:	83 ec 34             	sub    esp,0x34
c001b6af:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001b6b3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001b6b7:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001b6bb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b6bf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001b6c3:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001b6c9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b6d3:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001b6d9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b6dd:	83 c0 02             	add    eax,0x2
c001b6e0:	c1 e0 07             	shl    eax,0x7
c001b6e3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001b6e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b6eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b6ef:	c1 e0 07             	shl    eax,0x7
c001b6f2:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001b6f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b6fa:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001b704:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b708:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b70e:	e8 51 e5 ff ff       	call   c0019c64 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001b713:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b717:	83 c4 10             	add    esp,0x10
c001b71a:	b8 01 00 00 00       	mov    eax,0x1
c001b71f:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001b724:	0f 84 49 02 00 00    	je     c001b973 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2cb>
c001b72a:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b734:	8b 00                	mov    eax,DWORD PTR [eax]
c001b736:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001b73c:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001b742:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b746:	c1 e1 05             	shl    ecx,0x5
c001b749:	01 c8                	add    eax,ecx
c001b74b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b74d:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001b753:	81 c9 25 00 01 00    	or     ecx,0x10025
c001b759:	89 08                	mov    DWORD PTR [eax],ecx
c001b75b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b761:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001b767:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001b76d:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001b770:	8d 7b 40             	lea    edi,[ebx+0x40]
c001b773:	50                   	push   eax
c001b774:	68 90 00 00 00       	push   0x90
c001b779:	6a 00                	push   0x0
c001b77b:	53                   	push   ebx
c001b77c:	e8 4f 4d fe ff       	call   c00004d0 <memset>
c001b781:	b9 0c 00 00 00       	mov    ecx,0xc
c001b786:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001b78a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b78c:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001b792:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001b796:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001b79c:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001b7a0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001b7a4:	48                   	dec    eax
c001b7a5:	25 ff ff 3f 00       	and    eax,0x3fffff
c001b7aa:	89 c1                	mov    ecx,eax
c001b7ac:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001b7b2:	25 00 00 c0 ff       	and    eax,0xffc00000
c001b7b7:	09 c8                	or     eax,ecx
c001b7b9:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001b7bf:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001b7c2:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001b7c9:	66 25 00 7f          	and    ax,0x7f00
c001b7cd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b7d1:	66 0d 27 80          	or     ax,0x8027
c001b7d5:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001b7d9:	66 89 03             	mov    WORD PTR [ebx],ax
c001b7dc:	89 d0                	mov    eax,edx
c001b7de:	c1 ea 18             	shr    edx,0x18
c001b7e1:	c1 e8 10             	shr    eax,0x10
c001b7e4:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001b7e7:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001b7ea:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b7ee:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001b7f1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b7f5:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001b7f8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b7fc:	83 c4 10             	add    esp,0x10
c001b7ff:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001b803:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b807:	31 c0                	xor    eax,eax
c001b809:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001b80f:	80 e1 88             	and    cl,0x88
c001b812:	74 0a                	je     c001b81e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x176>
c001b814:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b819:	74 0a                	je     c001b825 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17d>
c001b81b:	40                   	inc    eax
c001b81c:	eb eb                	jmp    c001b809 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x161>
c001b81e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b823:	75 43                	jne    c001b868 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c001b825:	83 ec 0c             	sub    esp,0xc
c001b828:	68 54 fd 01 c0       	push   0xc001fd54
c001b82d:	e8 88 ed fe ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c001b832:	58                   	pop    eax
c001b833:	5a                   	pop    edx
c001b834:	68 69 fd 01 c0       	push   0xc001fd69
c001b839:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c001b83f:	e8 5a cf fe ff       	call   c000879e <VgaText::puts(char const*)>
c001b844:	59                   	pop    ecx
c001b845:	5b                   	pop    ebx
c001b846:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b84a:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b850:	e8 a9 e4 ff ff       	call   c0019cfe <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b855:	5e                   	pop    esi
c001b856:	5f                   	pop    edi
c001b857:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b85b:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b861:	e8 78 e4 ff ff       	call   c0019cde <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b866:	eb 48                	jmp    c001b8b0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x208>
c001b868:	be 01 00 00 00       	mov    esi,0x1
c001b86d:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b871:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b875:	d3 e6                	shl    esi,cl
c001b877:	c1 e7 07             	shl    edi,0x7
c001b87a:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001b880:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001b885:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001b889:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001b88f:	85 c6                	test   esi,eax
c001b891:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001b897:	0f 84 a3 00 00 00    	je     c001b940 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x298>
c001b89d:	0f ba e0 1e          	bt     eax,0x1e
c001b8a1:	73 1a                	jae    c001b8bd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001b8a3:	83 ec 0c             	sub    esp,0xc
c001b8a6:	68 7b fd 01 c0       	push   0xc001fd7b
c001b8ab:	e8 0a ed fe ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c001b8b0:	83 c4 10             	add    esp,0x10
c001b8b3:	b8 01 00 00 00       	mov    eax,0x1
c001b8b8:	e9 b6 00 00 00       	jmp    c001b973 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2cb>
c001b8bd:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001b8c3:	83 f8 0d             	cmp    eax,0xd
c001b8c6:	77 0a                	ja     c001b8d2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x22a>
c001b8c8:	83 ec 0c             	sub    esp,0xc
c001b8cb:	68 c8 00 00 00       	push   0xc8
c001b8d0:	eb 28                	jmp    c001b8fa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x252>
c001b8d2:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001b8d8:	83 f8 0d             	cmp    eax,0xd
c001b8db:	77 0a                	ja     c001b8e7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23f>
c001b8dd:	83 ec 0c             	sub    esp,0xc
c001b8e0:	68 58 02 00 00       	push   0x258
c001b8e5:	eb 13                	jmp    c001b8fa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x252>
c001b8e7:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001b8ed:	83 f8 06             	cmp    eax,0x6
c001b8f0:	77 10                	ja     c001b902 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25a>
c001b8f2:	83 ec 0c             	sub    esp,0xc
c001b8f5:	68 dc 05 00 00       	push   0x5dc
c001b8fa:	e8 e1 81 ff ff       	call   c0013ae0 <milliTenthSleep(unsigned int)>
c001b8ff:	83 c4 10             	add    esp,0x10
c001b902:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001b906:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001b909:	75 06                	jne    c001b911 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x269>
c001b90b:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001b90f:	74 15                	je     c001b926 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c001b911:	83 fb 06             	cmp    ebx,0x6
c001b914:	77 10                	ja     c001b926 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c001b916:	83 ec 0c             	sub    esp,0xc
c001b919:	68 c4 09 00 00       	push   0x9c4
c001b91e:	e8 bd 81 ff ff       	call   c0013ae0 <milliTenthSleep(unsigned int)>
c001b923:	83 c4 10             	add    esp,0x10
c001b926:	43                   	inc    ebx
c001b927:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001b92d:	0f 85 56 ff ff ff    	jne    c001b889 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e1>
c001b933:	83 ec 0c             	sub    esp,0xc
c001b936:	68 8e fd 01 c0       	push   0xc001fd8e
c001b93b:	e9 6b ff ff ff       	jmp    c001b8ab <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x203>
c001b940:	0f ba e0 1e          	bt     eax,0x1e
c001b944:	73 0d                	jae    c001b953 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2ab>
c001b946:	83 ec 0c             	sub    esp,0xc
c001b949:	68 a2 fd 01 c0       	push   0xc001fda2
c001b94e:	e9 58 ff ff ff       	jmp    c001b8ab <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x203>
c001b953:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001b958:	74 17                	je     c001b971 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c9>
c001b95a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001b95f:	74 10                	je     c001b971 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c9>
c001b961:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001b967:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001b96b:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b96f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b971:	31 c0                	xor    eax,eax
c001b973:	83 c4 2c             	add    esp,0x2c
c001b976:	5b                   	pop    ebx
c001b977:	5e                   	pop    esi
c001b978:	5f                   	pop    edi
c001b979:	5d                   	pop    ebp
c001b97a:	c3                   	ret    
c001b97b:	90                   	nop

c001b97c <SATAPI::eject()>:
c001b97c:	57                   	push   edi
c001b97d:	b9 03 00 00 00       	mov    ecx,0x3
c001b982:	83 ec 18             	sub    esp,0x18
c001b985:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b989:	fc                   	cld    
c001b98a:	31 c0                	xor    eax,eax
c001b98c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b98e:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001b993:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001b998:	50                   	push   eax
c001b999:	6a 00                	push   0x0
c001b99b:	6a 00                	push   0x0
c001b99d:	6a 00                	push   0x0
c001b99f:	6a 00                	push   0x0
c001b9a1:	6a 02                	push   0x2
c001b9a3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b9a7:	50                   	push   eax
c001b9a8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b9ac:	e8 f7 fc ff ff       	call   c001b6a8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b9b1:	31 c0                	xor    eax,eax
c001b9b3:	83 c4 38             	add    esp,0x38
c001b9b6:	5f                   	pop    edi
c001b9b7:	c3                   	ret    

c001b9b8 <SATAPI::detectMedia()>:
c001b9b8:	53                   	push   ebx
c001b9b9:	83 ec 14             	sub    esp,0x14
c001b9bc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b9c0:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001b9c6:	e8 d9 1b ff ff       	call   c000d5a4 <VCache::writeWriteBuffer()>
c001b9cb:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001b9d1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b9d5:	83 c4 18             	add    esp,0x18
c001b9d8:	5b                   	pop    ebx
c001b9d9:	e9 b6 1b ff ff       	jmp    c000d594 <VCache::invalidateReadBuffer()>

c001b9de <SATAPI::open(int, int, void*)>:
c001b9de:	56                   	push   esi
c001b9df:	53                   	push   ebx
c001b9e0:	51                   	push   ecx
c001b9e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b9e9:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001b9f3:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001b9f9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ba03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba07:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001ba11:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ba17:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001ba1e:	e8 da c0 fe ff       	call   c0007afd <Phys::allocatePage()>
c001ba23:	89 c6                	mov    esi,eax
c001ba25:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001ba2b:	81 c6 00 10 00 00    	add    esi,0x1000
c001ba31:	e8 c7 c0 fe ff       	call   c0007afd <Phys::allocatePage()>
c001ba36:	39 c6                	cmp    esi,eax
c001ba38:	74 10                	je     c001ba4a <SATAPI::open(int, int, void*)+0x6c>
c001ba3a:	83 ec 0c             	sub    esp,0xc
c001ba3d:	68 b7 fd 01 c0       	push   0xc001fdb7
c001ba42:	e8 7c 48 ff ff       	call   c00102c3 <KePanic(char const*)>
c001ba47:	83 c4 10             	add    esp,0x10
c001ba4a:	83 ec 0c             	sub    esp,0xc
c001ba4d:	6a 02                	push   0x2
c001ba4f:	e8 a9 d8 fe ff       	call   c00092fd <Virt::allocateKernelVirtualPages(int)>
c001ba54:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001ba5a:	6a 03                	push   0x3
c001ba5c:	50                   	push   eax
c001ba5d:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001ba63:	ff 35 b0 2f 02 c0    	push   DWORD PTR ds:0xc0022fb0
c001ba69:	e8 52 df fe ff       	call   c00099c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ba6e:	83 c4 14             	add    esp,0x14
c001ba71:	68 74 01 00 00       	push   0x174
c001ba76:	e8 a6 bd fe ff       	call   c0007821 <malloc>
c001ba7b:	83 c4 0c             	add    esp,0xc
c001ba7e:	89 c6                	mov    esi,eax
c001ba80:	6a 00                	push   0x0
c001ba82:	68 ff ff ff 7f       	push   0x7fffffff
c001ba87:	6a 00                	push   0x0
c001ba89:	6a 00                	push   0x0
c001ba8b:	53                   	push   ebx
c001ba8c:	68 cd fd 01 c0       	push   0xc001fdcd
c001ba91:	50                   	push   eax
c001ba92:	e8 0b 10 ff ff       	call   c000caa2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001ba97:	83 c4 14             	add    esp,0x14
c001ba9a:	56                   	push   esi
c001ba9b:	e8 b8 10 ff ff       	call   c000cb58 <LogicalDisk::assignDriveLetter()>
c001baa0:	5a                   	pop    edx
c001baa1:	0f be c0             	movsx  eax,al
c001baa4:	59                   	pop    ecx
c001baa5:	50                   	push   eax
c001baa6:	68 34 fc 01 c0       	push   0xc001fc34
c001baab:	e8 0a eb fe ff       	call   c000a5ba <Dbg::kprintf(char const*, ...)>
c001bab0:	58                   	pop    eax
c001bab1:	5a                   	pop    edx
c001bab2:	56                   	push   esi
c001bab3:	53                   	push   ebx
c001bab4:	e8 3f ff fe ff       	call   c000b9f8 <Device::addChild(Device*)>
c001bab9:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001babf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bac2:	e8 67 03 ff ff       	call   c000be2e <PhysicalDisk::startCache()>
c001bac7:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001bace:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bad1:	e8 e2 fe ff ff       	call   c001b9b8 <SATAPI::detectMedia()>
c001bad6:	83 c4 14             	add    esp,0x14
c001bad9:	31 c0                	xor    eax,eax
c001badb:	5b                   	pop    ebx
c001badc:	5e                   	pop    esi
c001badd:	c3                   	ret    

c001bade <SATAPI::read(unsigned long long, int, void*)>:
c001bade:	57                   	push   edi
c001badf:	56                   	push   esi
c001bae0:	53                   	push   ebx
c001bae1:	83 ec 30             	sub    esp,0x30
c001bae4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001bae8:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001baec:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001baf0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001baf4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001baf8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bafc:	83 fe 04             	cmp    esi,0x4
c001baff:	7e 10                	jle    c001bb11 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001bb01:	83 ec 0c             	sub    esp,0xc
c001bb04:	68 db fd 01 c0       	push   0xc001fddb
c001bb09:	e8 b5 47 ff ff       	call   c00102c3 <KePanic(char const*)>
c001bb0e:	83 c4 10             	add    esp,0x10
c001bb11:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001bb17:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001bb1d:	51                   	push   ecx
c001bb1e:	50                   	push   eax
c001bb1f:	83 c0 02             	add    eax,0x2
c001bb22:	c1 e0 07             	shl    eax,0x7
c001bb25:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001bb2b:	50                   	push   eax
c001bb2c:	52                   	push   edx
c001bb2d:	e8 f6 e1 ff ff       	call   c0019d28 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001bb32:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001bb36:	b9 03 00 00 00       	mov    ecx,0x3
c001bb3b:	fc                   	cld    
c001bb3c:	31 c0                	xor    eax,eax
c001bb3e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001bb40:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001bb45:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001bb4a:	83 c4 0c             	add    esp,0xc
c001bb4d:	6a 00                	push   0x0
c001bb4f:	6a 00                	push   0x0
c001bb51:	6a 00                	push   0x0
c001bb53:	6a 00                	push   0x0
c001bb55:	6a 02                	push   0x2
c001bb57:	8d 44 24 30          	lea    eax,[esp+0x30]
c001bb5b:	50                   	push   eax
c001bb5c:	53                   	push   ebx
c001bb5d:	e8 46 fb ff ff       	call   c001b6a8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001bb62:	83 c4 20             	add    esp,0x20
c001bb65:	85 c0                	test   eax,eax
c001bb67:	75 44                	jne    c001bbad <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001bb69:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001bb6d:	b9 03 00 00 00       	mov    ecx,0x3
c001bb72:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001bb74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb78:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001bb7d:	0f c8                	bswap  eax
c001bb7f:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001bb83:	89 f0                	mov    eax,esi
c001bb85:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001bb89:	50                   	push   eax
c001bb8a:	56                   	push   esi
c001bb8b:	c1 e6 0b             	shl    esi,0xb
c001bb8e:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001bb92:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bb96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bb9a:	56                   	push   esi
c001bb9b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001bb9f:	50                   	push   eax
c001bba0:	53                   	push   ebx
c001bba1:	e8 02 fb ff ff       	call   c001b6a8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001bba6:	83 c4 20             	add    esp,0x20
c001bba9:	85 c0                	test   eax,eax
c001bbab:	74 14                	je     c001bbc1 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001bbad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bbb1:	83 ec 0c             	sub    esp,0xc
c001bbb4:	53                   	push   ebx
c001bbb5:	e8 fe fd ff ff       	call   c001b9b8 <SATAPI::detectMedia()>
c001bbba:	83 c4 10             	add    esp,0x10
c001bbbd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bbc1:	83 c4 30             	add    esp,0x30
c001bbc4:	5b                   	pop    ebx
c001bbc5:	5e                   	pop    esi
c001bbc6:	5f                   	pop    edi
c001bbc7:	c3                   	ret    

c001bbc8 <IOAPIC::close(int, int, void*)>:
c001bbc8:	b8 00 00 00 00       	mov    eax,0x0
c001bbcd:	c3                   	ret    

c001bbce <apicGetBase()>:
c001bbce:	55                   	push   ebp
c001bbcf:	89 e5                	mov    ebp,esp
c001bbd1:	83 ec 18             	sub    esp,0x18
c001bbd4:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c001bbd9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001bbdf:	83 e0 08             	and    eax,0x8
c001bbe2:	84 c0                	test   al,al
c001bbe4:	75 07                	jne    c001bbed <apicGetBase()+0x1f>
c001bbe6:	b8 00 00 00 00       	mov    eax,0x0
c001bbeb:	eb 21                	jmp    c001bc0e <apicGetBase()+0x40>
c001bbed:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c001bbf2:	83 ec 08             	sub    esp,0x8
c001bbf5:	6a 1b                	push   0x1b
c001bbf7:	50                   	push   eax
c001bbf8:	e8 5b b2 fe ff       	call   c0006e58 <Computer::rdmsr(unsigned int)>
c001bbfd:	83 c4 10             	add    esp,0x10
c001bc00:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001bc03:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001bc06:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bc09:	25 00 00 ff ff       	and    eax,0xffff0000
c001bc0e:	c9                   	leave  
c001bc0f:	c3                   	ret    

c001bc10 <IOAPIC::IOAPIC()>:
c001bc10:	83 ec 0c             	sub    esp,0xc
c001bc13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc17:	83 ec 08             	sub    esp,0x8
c001bc1a:	68 40 fe 01 c0       	push   0xc001fe40
c001bc1f:	50                   	push   eax
c001bc20:	e8 6b ff fe ff       	call   c000bb90 <Device::Device(char const*)>
c001bc25:	83 c4 10             	add    esp,0x10
c001bc28:	ba 50 fe 01 c0       	mov    edx,0xc001fe50
c001bc2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc31:	89 10                	mov    DWORD PTR [eax],edx
c001bc33:	90                   	nop
c001bc34:	83 c4 0c             	add    esp,0xc
c001bc37:	c3                   	ret    

c001bc38 <apicOpen()>:
c001bc38:	55                   	push   ebp
c001bc39:	89 e5                	mov    ebp,esp
c001bc3b:	53                   	push   ebx
c001bc3c:	83 ec 34             	sub    esp,0x34
c001bc3f:	a0 a0 6b 02 c0       	mov    al,ds:0xc0026ba0
c001bc44:	83 f0 01             	xor    eax,0x1
c001bc47:	84 c0                	test   al,al
c001bc49:	0f 84 9d 00 00 00    	je     c001bcec <apicOpen()+0xb4>
c001bc4f:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001bc53:	a0 80 57 02 c0       	mov    al,ds:0xc0025780
c001bc58:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001bc5b:	0f 83 84 00 00 00    	jae    c001bce5 <apicOpen()+0xad>
c001bc61:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001bc68:	83 ec 0c             	sub    esp,0xc
c001bc6b:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001bc6e:	e8 ae bb fe ff       	call   c0007821 <malloc>
c001bc73:	83 c4 10             	add    esp,0x10
c001bc76:	89 c3                	mov    ebx,eax
c001bc78:	83 ec 0c             	sub    esp,0xc
c001bc7b:	53                   	push   ebx
c001bc7c:	e8 8f ff ff ff       	call   c001bc10 <IOAPIC::IOAPIC()>
c001bc81:	83 c4 10             	add    esp,0x10
c001bc84:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001bc87:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001bc8a:	25 ff 00 00 00       	and    eax,0xff
c001bc8f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001bc92:	89 14 85 80 6b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9480],edx
c001bc99:	a1 60 6b 02 c0       	mov    eax,ds:0xc0026b60
c001bc9e:	40                   	inc    eax
c001bc9f:	a3 60 6b 02 c0       	mov    ds:0xc0026b60,eax
c001bca4:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c001bca9:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001bcaf:	83 ec 08             	sub    esp,0x8
c001bcb2:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001bcb5:	50                   	push   eax
c001bcb6:	e8 3d fd fe ff       	call   c000b9f8 <Device::addChild(Device*)>
c001bcbb:	83 c4 10             	add    esp,0x10
c001bcbe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001bcc1:	8b 00                	mov    eax,DWORD PTR [eax]
c001bcc3:	83 c0 08             	add    eax,0x8
c001bcc6:	8b 10                	mov    edx,DWORD PTR [eax]
c001bcc8:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001bccb:	25 ff 00 00 00       	and    eax,0xff
c001bcd0:	6a 00                	push   0x0
c001bcd2:	6a 00                	push   0x0
c001bcd4:	50                   	push   eax
c001bcd5:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001bcd8:	ff d2                	call   edx
c001bcda:	83 c4 10             	add    esp,0x10
c001bcdd:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001bce0:	e9 6e ff ff ff       	jmp    c001bc53 <apicOpen()+0x1b>
c001bce5:	c6 05 a0 6b 02 c0 01 	mov    BYTE PTR ds:0xc0026ba0,0x1
c001bcec:	e8 dd fe ff ff       	call   c001bbce <apicGetBase()>
c001bcf1:	05 f0 00 00 00       	add    eax,0xf0
c001bcf6:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001bcf9:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001bcfc:	8b 00                	mov    eax,DWORD PTR [eax]
c001bcfe:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001bd01:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001bd08:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001bd0f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001bd12:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001bd15:	89 10                	mov    DWORD PTR [eax],edx
c001bd17:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001bd1e:	a1 d0 56 02 c0       	mov    eax,ds:0xc00256d0
c001bd23:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001bd26:	7d 70                	jge    c001bd98 <apicOpen()+0x160>
c001bd28:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bd2b:	8b 04 85 e0 56 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda920]
c001bd32:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001bd35:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bd38:	8b 04 85 e0 56 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda920]
c001bd3f:	c1 e8 08             	shr    eax,0x8
c001bd42:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001bd46:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bd49:	8b 04 85 e0 56 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda920]
c001bd50:	c1 e8 18             	shr    eax,0x18
c001bd53:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001bd56:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001bd5a:	75 37                	jne    c001bd93 <apicOpen()+0x15b>
c001bd5c:	e8 6d fe ff ff       	call   c001bbce <apicGetBase()>
c001bd61:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001bd65:	75 07                	jne    c001bd6e <apicOpen()+0x136>
c001bd67:	ba 60 03 00 00       	mov    edx,0x360
c001bd6c:	eb 05                	jmp    c001bd73 <apicOpen()+0x13b>
c001bd6e:	ba 50 03 00 00       	mov    edx,0x350
c001bd73:	01 d0                	add    eax,edx
c001bd75:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001bd78:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001bd7b:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd7d:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001bd80:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001bd87:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001bd8b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001bd8e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001bd91:	89 10                	mov    DWORD PTR [eax],edx
c001bd93:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001bd96:	eb 86                	jmp    c001bd1e <apicOpen()+0xe6>
c001bd98:	90                   	nop
c001bd99:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001bd9c:	c9                   	leave  
c001bd9d:	c3                   	ret    

c001bd9e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001bd9e:	55                   	push   ebp
c001bd9f:	89 e5                	mov    ebp,esp
c001bda1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bda4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001bdaa:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001bdad:	72 1d                	jb     c001bdcc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001bdaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdb2:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001bdb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdbb:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001bdc1:	01 d0                	add    eax,edx
c001bdc3:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001bdc6:	73 04                	jae    c001bdcc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001bdc8:	b0 01                	mov    al,0x1
c001bdca:	eb 02                	jmp    c001bdce <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001bdcc:	b0 00                	mov    al,0x0
c001bdce:	5d                   	pop    ebp
c001bdcf:	c3                   	ret    

c001bdd0 <IOAPIC::read(int)>:
c001bdd0:	55                   	push   ebp
c001bdd1:	89 e5                	mov    ebp,esp
c001bdd3:	83 ec 10             	sub    esp,0x10
c001bdd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdd9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bddf:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001bde2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bde5:	31 d2                	xor    edx,edx
c001bde7:	88 c2                	mov    dl,al
c001bde9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001bdec:	89 10                	mov    DWORD PTR [eax],edx
c001bdee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001bdf1:	83 c0 10             	add    eax,0x10
c001bdf4:	8b 00                	mov    eax,DWORD PTR [eax]
c001bdf6:	c9                   	leave  
c001bdf7:	c3                   	ret    

c001bdf8 <IOAPIC::open(int, int, void*)>:
c001bdf8:	55                   	push   ebp
c001bdf9:	89 e5                	mov    ebp,esp
c001bdfb:	57                   	push   edi
c001bdfc:	56                   	push   esi
c001bdfd:	53                   	push   ebx
c001bdfe:	83 ec 04             	sub    esp,0x4
c001be01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be04:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001be07:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001be0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be10:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001be16:	8b 14 85 c0 57 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda840]
c001be1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be20:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001be26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be29:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001be2f:	8b 14 85 40 58 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda7c0]
c001be36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be39:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001be3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be42:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001be48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be4b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001be51:	89 c6                	mov    esi,eax
c001be53:	81 e6 ff 00 00 00    	and    esi,0xff
c001be59:	89 d0                	mov    eax,edx
c001be5b:	ba 00 00 00 00       	mov    edx,0x0
c001be60:	89 c7                	mov    edi,eax
c001be62:	83 e7 ff             	and    edi,0xffffffff
c001be65:	89 f9                	mov    ecx,edi
c001be67:	89 d0                	mov    eax,edx
c001be69:	25 ff 00 00 00       	and    eax,0xff
c001be6e:	89 c3                	mov    ebx,eax
c001be70:	89 c8                	mov    eax,ecx
c001be72:	89 da                	mov    edx,ebx
c001be74:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001be77:	8d 5e 08             	lea    ebx,[esi+0x8]
c001be7a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001be7e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001be82:	83 e0 00             	and    eax,0x0
c001be85:	09 d0                	or     eax,edx
c001be87:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001be8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be8e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001be94:	8d 50 01             	lea    edx,[eax+0x1]
c001be97:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001be9a:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001bea0:	31 d2                	xor    edx,edx
c001bea2:	88 c2                	mov    dl,al
c001bea4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bea7:	83 c2 08             	add    edx,0x8
c001beaa:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001beae:	81 e1 ff 00 00 00    	and    ecx,0xff
c001beb4:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001beba:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001bebe:	6a 01                	push   0x1
c001bec0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001bec3:	e8 08 ff ff ff       	call   c001bdd0 <IOAPIC::read(int)>
c001bec8:	83 c4 08             	add    esp,0x8
c001becb:	c1 f8 10             	sar    eax,0x10
c001bece:	25 ff 00 00 00       	and    eax,0xff
c001bed3:	8d 50 01             	lea    edx,[eax+0x1]
c001bed6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bed9:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001bedf:	b8 00 00 00 00       	mov    eax,0x0
c001bee4:	8d 65 f4             	lea    esp,[ebp-0xc]
c001bee7:	5b                   	pop    ebx
c001bee8:	5e                   	pop    esi
c001bee9:	5f                   	pop    edi
c001beea:	5d                   	pop    ebp
c001beeb:	c3                   	ret    

c001beec <IOAPIC::write(int, int)>:
c001beec:	55                   	push   ebp
c001beed:	89 e5                	mov    ebp,esp
c001beef:	83 ec 10             	sub    esp,0x10
c001bef2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bef5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001befb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001befe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bf01:	31 d2                	xor    edx,edx
c001bf03:	88 c2                	mov    dl,al
c001bf05:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001bf08:	89 10                	mov    DWORD PTR [eax],edx
c001bf0a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001bf0d:	8d 50 10             	lea    edx,[eax+0x10]
c001bf10:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bf13:	89 02                	mov    DWORD PTR [edx],eax
c001bf15:	90                   	nop
c001bf16:	c9                   	leave  
c001bf17:	c3                   	ret    

c001bf18 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001bf18:	55                   	push   ebp
c001bf19:	89 e5                	mov    ebp,esp
c001bf1b:	53                   	push   ebx
c001bf1c:	83 ec 2c             	sub    esp,0x2c
c001bf1f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bf22:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001bf25:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001bf28:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001bf2b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001bf2e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bf31:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001bf34:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001bf37:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001bf3a:	88 d8                	mov    al,bl
c001bf3c:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001bf3f:	88 c8                	mov    al,cl
c001bf41:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001bf44:	88 d0                	mov    al,dl
c001bf46:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001bf49:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001bf4c:	25 ff 00 00 00       	and    eax,0xff
c001bf51:	83 c0 08             	add    eax,0x8
c001bf54:	01 c0                	add    eax,eax
c001bf56:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001bf59:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001bf5c:	25 ff 00 00 00       	and    eax,0xff
c001bf61:	83 c0 08             	add    eax,0x8
c001bf64:	01 c0                	add    eax,eax
c001bf66:	40                   	inc    eax
c001bf67:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001bf6a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001bf6d:	50                   	push   eax
c001bf6e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001bf71:	e8 5a fe ff ff       	call   c001bdd0 <IOAPIC::read(int)>
c001bf76:	83 c4 08             	add    esp,0x8
c001bf79:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001bf7c:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001bf83:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001bf86:	c1 e0 18             	shl    eax,0x18
c001bf89:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001bf8c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001bf8f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001bf92:	52                   	push   edx
c001bf93:	50                   	push   eax
c001bf94:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001bf97:	e8 50 ff ff ff       	call   c001beec <IOAPIC::write(int, int)>
c001bf9c:	83 c4 0c             	add    esp,0xc
c001bf9f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bfa2:	50                   	push   eax
c001bfa3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001bfa6:	e8 25 fe ff ff       	call   c001bdd0 <IOAPIC::read(int)>
c001bfab:	83 c4 08             	add    esp,0x8
c001bfae:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bfb1:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001bfb8:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001bfbf:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001bfc6:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001bfca:	74 09                	je     c001bfd5 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001bfcc:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001bfd3:	eb 07                	jmp    c001bfdc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001bfd5:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001bfdc:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001bfe0:	74 09                	je     c001bfeb <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001bfe2:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001bfe9:	eb 07                	jmp    c001bff2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001bfeb:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001bff2:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001bff9:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001bffc:	25 ff 00 00 00       	and    eax,0xff
c001c001:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001c004:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001c007:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001c00a:	52                   	push   edx
c001c00b:	50                   	push   eax
c001c00c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001c00f:	e8 d8 fe ff ff       	call   c001beec <IOAPIC::write(int, int)>
c001c014:	83 c4 0c             	add    esp,0xc
c001c017:	90                   	nop
c001c018:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001c01b:	c9                   	leave  
c001c01c:	c3                   	ret    
c001c01d:	66 90                	xchg   ax,ax
c001c01f:	90                   	nop

c001c020 <APICTimer::close(int, int, void*)>:
c001c020:	b8 00 00 00 00       	mov    eax,0x0
c001c025:	c3                   	ret    
c001c026:	66 90                	xchg   ax,ax

c001c028 <apicTimerHandler(regs*, void*)>:
c001c028:	83 ec 0c             	sub    esp,0xc
c001c02b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c02f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c031:	b8 10 27 00 00       	mov    eax,0x2710
c001c036:	ba 00 00 00 00       	mov    edx,0x0
c001c03b:	f7 f1                	div    ecx
c001c03d:	83 ec 0c             	sub    esp,0xc
c001c040:	50                   	push   eax
c001c041:	e8 76 12 ff ff       	call   c000d2bc <timerHandler(unsigned int)>
c001c046:	83 c4 10             	add    esp,0x10
c001c049:	90                   	nop
c001c04a:	83 c4 0c             	add    esp,0xc
c001c04d:	c3                   	ret    
c001c04e:	66 90                	xchg   ax,ax

c001c050 <APICTimer::open(int, int, void*)>:
c001c050:	83 ec 0c             	sub    esp,0xc
c001c053:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c057:	8b 00                	mov    eax,DWORD PTR [eax]
c001c059:	83 c0 24             	add    eax,0x24
c001c05c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c05e:	83 ec 08             	sub    esp,0x8
c001c061:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c065:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c069:	ff d0                	call   eax
c001c06b:	83 c4 10             	add    esp,0x10
c001c06e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c072:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c076:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c07c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c080:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c084:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001c08a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c08e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c094:	83 ec 0c             	sub    esp,0xc
c001c097:	51                   	push   ecx
c001c098:	6a 01                	push   0x1
c001c09a:	68 28 c0 01 c0       	push   0xc001c028
c001c09f:	52                   	push   edx
c001c0a0:	50                   	push   eax
c001c0a1:	e8 fe f8 fe ff       	call   c000b9a4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c0a6:	83 c4 20             	add    esp,0x20
c001c0a9:	89 c2                	mov    edx,eax
c001c0ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0af:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001c0b5:	b8 00 00 00 00       	mov    eax,0x0
c001c0ba:	83 c4 0c             	add    esp,0xc
c001c0bd:	c3                   	ret    
c001c0be:	66 90                	xchg   ax,ax

c001c0c0 <APICTimer::write(int)>:
c001c0c0:	83 ec 0c             	sub    esp,0xc
c001c0c3:	83 ec 0c             	sub    esp,0xc
c001c0c6:	68 74 fe 01 c0       	push   0xc001fe74
c001c0cb:	e8 f3 41 ff ff       	call   c00102c3 <KePanic(char const*)>
c001c0d0:	83 c4 10             	add    esp,0x10
c001c0d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0d7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c0db:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c0e1:	90                   	nop
c001c0e2:	83 c4 0c             	add    esp,0xc
c001c0e5:	c3                   	ret    
c001c0e6:	66 90                	xchg   ax,ax

c001c0e8 <APICTimer::APICTimer()>:
c001c0e8:	83 ec 0c             	sub    esp,0xc
c001c0eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0ef:	83 ec 08             	sub    esp,0x8
c001c0f2:	68 84 fe 01 c0       	push   0xc001fe84
c001c0f7:	50                   	push   eax
c001c0f8:	e8 f3 10 ff ff       	call   c000d1f0 <Timer::Timer(char const*)>
c001c0fd:	83 c4 10             	add    esp,0x10
c001c100:	ba 98 fe 01 c0       	mov    edx,0xc001fe98
c001c105:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c109:	89 10                	mov    DWORD PTR [eax],edx
c001c10b:	90                   	nop
c001c10c:	83 c4 0c             	add    esp,0xc
c001c10f:	c3                   	ret    

c001c110 <PIT::write(int)>:
c001c110:	83 ec 10             	sub    esp,0x10
c001c113:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c117:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c11b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c121:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c125:	a3 a4 6b 02 c0       	mov    ds:0xc0026ba4,eax
c001c12a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001c12f:	99                   	cdq    
c001c130:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001c134:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c138:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001c13f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001c144:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001c148:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001c14d:	ee                   	out    dx,al
c001c14e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c152:	25 ff 00 00 00       	and    eax,0xff
c001c157:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001c15e:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001c162:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001c166:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001c16b:	ee                   	out    dx,al
c001c16c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c170:	c1 f8 08             	sar    eax,0x8
c001c173:	25 ff 00 00 00       	and    eax,0xff
c001c178:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001c17f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001c183:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001c187:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001c18c:	ee                   	out    dx,al
c001c18d:	90                   	nop
c001c18e:	83 c4 10             	add    esp,0x10
c001c191:	c3                   	ret    
c001c192:	66 90                	xchg   ax,ax

c001c194 <pitHandler(regs*, void*)>:
c001c194:	83 ec 0c             	sub    esp,0xc
c001c197:	8b 0d a4 6b 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ba4
c001c19d:	b8 10 27 00 00       	mov    eax,0x2710
c001c1a2:	99                   	cdq    
c001c1a3:	f7 f9                	idiv   ecx
c001c1a5:	83 ec 0c             	sub    esp,0xc
c001c1a8:	50                   	push   eax
c001c1a9:	e8 0e 11 ff ff       	call   c000d2bc <timerHandler(unsigned int)>
c001c1ae:	83 c4 10             	add    esp,0x10
c001c1b1:	90                   	nop
c001c1b2:	83 c4 0c             	add    esp,0xc
c001c1b5:	c3                   	ret    
c001c1b6:	66 90                	xchg   ax,ax

c001c1b8 <PIT::open(int, int, void*)>:
c001c1b8:	83 ec 0c             	sub    esp,0xc
c001c1bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1bf:	8b 00                	mov    eax,DWORD PTR [eax]
c001c1c1:	83 c0 24             	add    eax,0x24
c001c1c4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c1c6:	83 ec 08             	sub    esp,0x8
c001c1c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c1cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c1d1:	ff d0                	call   eax
c001c1d3:	83 c4 10             	add    esp,0x10
c001c1d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1da:	83 ec 0c             	sub    esp,0xc
c001c1dd:	6a 00                	push   0x0
c001c1df:	6a 01                	push   0x1
c001c1e1:	68 94 c1 01 c0       	push   0xc001c194
c001c1e6:	6a 00                	push   0x0
c001c1e8:	50                   	push   eax
c001c1e9:	e8 b6 f7 fe ff       	call   c000b9a4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c1ee:	83 c4 20             	add    esp,0x20
c001c1f1:	89 c2                	mov    edx,eax
c001c1f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1f7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001c1fd:	b8 00 00 00 00       	mov    eax,0x0
c001c202:	83 c4 0c             	add    esp,0xc
c001c205:	c3                   	ret    
c001c206:	66 90                	xchg   ax,ax

c001c208 <PIT::close(int, int, void*)>:
c001c208:	83 ec 0c             	sub    esp,0xc
c001c20b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c20f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001c219:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c21d:	6a 01                	push   0x1
c001c21f:	68 94 c1 01 c0       	push   0xc001c194
c001c224:	6a 00                	push   0x0
c001c226:	50                   	push   eax
c001c227:	e8 ae f7 fe ff       	call   c000b9da <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001c22c:	83 c4 10             	add    esp,0x10
c001c22f:	b8 00 00 00 00       	mov    eax,0x0
c001c234:	83 c4 0c             	add    esp,0xc
c001c237:	c3                   	ret    

c001c238 <PIT::PIT()>:
c001c238:	83 ec 0c             	sub    esp,0xc
c001c23b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c23f:	83 ec 08             	sub    esp,0x8
c001c242:	68 c0 fe 01 c0       	push   0xc001fec0
c001c247:	50                   	push   eax
c001c248:	e8 a3 0f ff ff       	call   c000d1f0 <Timer::Timer(char const*)>
c001c24d:	83 c4 10             	add    esp,0x10
c001c250:	ba e8 fe 01 c0       	mov    edx,0xc001fee8
c001c255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c259:	89 10                	mov    DWORD PTR [eax],edx
c001c25b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c25f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c265:	31 d2                	xor    edx,edx
c001c267:	88 c2                	mov    dl,al
c001c269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c26d:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001c274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c278:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c27e:	31 d2                	xor    edx,edx
c001c280:	88 c2                	mov    dl,al
c001c282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c286:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001c28b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c28f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c295:	8d 50 01             	lea    edx,[eax+0x1]
c001c298:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c29c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001c2a2:	31 d2                	xor    edx,edx
c001c2a4:	88 c2                	mov    dl,al
c001c2a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2aa:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001c2ae:	83 e1 3f             	and    ecx,0x3f
c001c2b1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001c2b5:	90                   	nop
c001c2b6:	83 c4 0c             	add    esp,0xc
c001c2b9:	c3                   	ret    
c001c2ba:	66 90                	xchg   ax,ax
c001c2bc:	66 90                	xchg   ax,ax
c001c2be:	66 90                	xchg   ax,ax

c001c2c0 <avxDetect>:
c001c2c0:	b8 01 00 00 00       	mov    eax,0x1
c001c2c5:	0f a2                	cpuid  
c001c2c7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001c2cd:	74 15                	je     c001c2e4 <avxDetect.noAVX>
c001c2cf:	b8 01 00 00 00       	mov    eax,0x1
c001c2d4:	0f a2                	cpuid  
c001c2d6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001c2dc:	74 06                	je     c001c2e4 <avxDetect.noAVX>
c001c2de:	b8 01 00 00 00       	mov    eax,0x1
c001c2e3:	c3                   	ret    

c001c2e4 <avxDetect.noAVX>:
c001c2e4:	b8 00 00 00 00       	mov    eax,0x0
c001c2e9:	c3                   	ret    

c001c2ea <avxSave>:
c001c2ea:	53                   	push   ebx
c001c2eb:	52                   	push   edx
c001c2ec:	31 c0                	xor    eax,eax
c001c2ee:	48                   	dec    eax
c001c2ef:	89 c2                	mov    edx,eax
c001c2f1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c2f5:	0f ae 23             	xsave  [ebx]
c001c2f8:	5a                   	pop    edx
c001c2f9:	5b                   	pop    ebx
c001c2fa:	c3                   	ret    

c001c2fb <avxLoad>:
c001c2fb:	53                   	push   ebx
c001c2fc:	52                   	push   edx
c001c2fd:	31 c0                	xor    eax,eax
c001c2ff:	48                   	dec    eax
c001c300:	89 c2                	mov    edx,eax
c001c302:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c306:	0f ae 2b             	xrstor [ebx]
c001c309:	5a                   	pop    edx
c001c30a:	5b                   	pop    ebx
c001c30b:	c3                   	ret    

c001c30c <avxInit>:
c001c30c:	e8 b7 02 00 00       	call   c001c5c8 <sseInit>
c001c311:	50                   	push   eax
c001c312:	51                   	push   ecx
c001c313:	0f 20 e0             	mov    eax,cr4
c001c316:	0d 00 00 04 00       	or     eax,0x40000
c001c31b:	0f 22 e0             	mov    cr4,eax
c001c31e:	31 c9                	xor    ecx,ecx
c001c320:	0f 01 d0             	xgetbv 
c001c323:	0d 07 00 00 00       	or     eax,0x7
c001c328:	0f 01 d1             	xsetbv 
c001c32b:	59                   	pop    ecx
c001c32c:	58                   	pop    eax
c001c32d:	c3                   	ret    

c001c32e <avxClose>:
c001c32e:	c3                   	ret    

c001c32f <wouldSheSayYes>:
c001c32f:	c3                   	ret    
c001c330:	49                   	dec    ecx
c001c331:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001c335:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001c339:	75 20                	jne    c001c35b <isr0+0xb>
c001c33b:	4e                   	dec    esi
c001c33c:	79 61                	jns    c001c39f <isr7+0x3>
c001c33e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001c343:	66 90                	xchg   ax,ax
c001c345:	66 90                	xchg   ax,ax
c001c347:	66 90                	xchg   ax,ax
c001c349:	66 90                	xchg   ax,ax
c001c34b:	66 90                	xchg   ax,ax
c001c34d:	66 90                	xchg   ax,ax
c001c34f:	90                   	nop

c001c350 <isr0>:
c001c350:	fa                   	cli    
c001c351:	68 00 00 00 00       	push   0x0
c001c356:	68 00 00 00 00       	push   0x0
c001c35b:	e9 44 01 00 00       	jmp    c001c4a4 <int_common_stub>

c001c360 <isr1>:
c001c360:	fa                   	cli    
c001c361:	6a 00                	push   0x0
c001c363:	6a 01                	push   0x1
c001c365:	e9 3a 01 00 00       	jmp    c001c4a4 <int_common_stub>

c001c36a <isr2>:
c001c36a:	fa                   	cli    
c001c36b:	6a 00                	push   0x0
c001c36d:	6a 02                	push   0x2
c001c36f:	e9 30 01 00 00       	jmp    c001c4a4 <int_common_stub>

c001c374 <isr3>:
c001c374:	fa                   	cli    
c001c375:	6a 00                	push   0x0
c001c377:	6a 03                	push   0x3
c001c379:	e9 26 01 00 00       	jmp    c001c4a4 <int_common_stub>

c001c37e <isr4>:
c001c37e:	fa                   	cli    
c001c37f:	6a 00                	push   0x0
c001c381:	6a 04                	push   0x4
c001c383:	e9 1c 01 00 00       	jmp    c001c4a4 <int_common_stub>

c001c388 <isr5>:
c001c388:	fa                   	cli    
c001c389:	6a 00                	push   0x0
c001c38b:	6a 05                	push   0x5
c001c38d:	e9 12 01 00 00       	jmp    c001c4a4 <int_common_stub>

c001c392 <isr6>:
c001c392:	fa                   	cli    
c001c393:	6a 00                	push   0x0
c001c395:	6a 06                	push   0x6
c001c397:	e9 08 01 00 00       	jmp    c001c4a4 <int_common_stub>

c001c39c <isr7>:
c001c39c:	fa                   	cli    
c001c39d:	6a 00                	push   0x0
c001c39f:	6a 07                	push   0x7
c001c3a1:	e9 fe 00 00 00       	jmp    c001c4a4 <int_common_stub>

c001c3a6 <isr8>:
c001c3a6:	fa                   	cli    
c001c3a7:	6a 08                	push   0x8
c001c3a9:	e9 f6 00 00 00       	jmp    c001c4a4 <int_common_stub>

c001c3ae <isr9>:
c001c3ae:	fa                   	cli    
c001c3af:	6a 00                	push   0x0
c001c3b1:	6a 09                	push   0x9
c001c3b3:	e9 ec 00 00 00       	jmp    c001c4a4 <int_common_stub>

c001c3b8 <isr10>:
c001c3b8:	fa                   	cli    
c001c3b9:	6a 0a                	push   0xa
c001c3bb:	e9 e4 00 00 00       	jmp    c001c4a4 <int_common_stub>

c001c3c0 <isr11>:
c001c3c0:	fa                   	cli    
c001c3c1:	6a 0b                	push   0xb
c001c3c3:	e9 dc 00 00 00       	jmp    c001c4a4 <int_common_stub>

c001c3c8 <isr12>:
c001c3c8:	fa                   	cli    
c001c3c9:	6a 0c                	push   0xc
c001c3cb:	e9 d4 00 00 00       	jmp    c001c4a4 <int_common_stub>

c001c3d0 <isr13>:
c001c3d0:	fa                   	cli    
c001c3d1:	6a 0d                	push   0xd
c001c3d3:	e9 cc 00 00 00       	jmp    c001c4a4 <int_common_stub>

c001c3d8 <isr14>:
c001c3d8:	fa                   	cli    
c001c3d9:	6a 0e                	push   0xe
c001c3db:	e9 c4 00 00 00       	jmp    c001c4a4 <int_common_stub>

c001c3e0 <isr15>:
c001c3e0:	fa                   	cli    
c001c3e1:	6a 00                	push   0x0
c001c3e3:	6a 0f                	push   0xf
c001c3e5:	e9 ba 00 00 00       	jmp    c001c4a4 <int_common_stub>

c001c3ea <isr16>:
c001c3ea:	fa                   	cli    
c001c3eb:	6a 00                	push   0x0
c001c3ed:	6a 10                	push   0x10
c001c3ef:	e9 b0 00 00 00       	jmp    c001c4a4 <int_common_stub>

c001c3f4 <isr17>:
c001c3f4:	fa                   	cli    
c001c3f5:	6a 00                	push   0x0
c001c3f7:	6a 11                	push   0x11
c001c3f9:	e9 a6 00 00 00       	jmp    c001c4a4 <int_common_stub>

c001c3fe <isr18>:
c001c3fe:	fa                   	cli    
c001c3ff:	6a 00                	push   0x0
c001c401:	6a 12                	push   0x12
c001c403:	e9 9c 00 00 00       	jmp    c001c4a4 <int_common_stub>

c001c408 <irq3>:
c001c408:	fa                   	cli    
c001c409:	6a 00                	push   0x0
c001c40b:	6a 23                	push   0x23
c001c40d:	e9 92 00 00 00       	jmp    c001c4a4 <int_common_stub>

c001c412 <irq4>:
c001c412:	fa                   	cli    
c001c413:	6a 00                	push   0x0
c001c415:	6a 24                	push   0x24
c001c417:	e9 88 00 00 00       	jmp    c001c4a4 <int_common_stub>

c001c41c <irq5>:
c001c41c:	fa                   	cli    
c001c41d:	6a 00                	push   0x0
c001c41f:	6a 25                	push   0x25
c001c421:	e9 7e 00 00 00       	jmp    c001c4a4 <int_common_stub>

c001c426 <irq6>:
c001c426:	fa                   	cli    
c001c427:	6a 00                	push   0x0
c001c429:	6a 26                	push   0x26
c001c42b:	e9 74 00 00 00       	jmp    c001c4a4 <int_common_stub>

c001c430 <irq7>:
c001c430:	fa                   	cli    
c001c431:	6a 00                	push   0x0
c001c433:	6a 27                	push   0x27
c001c435:	e9 6a 00 00 00       	jmp    c001c4a4 <int_common_stub>

c001c43a <irq8>:
c001c43a:	fa                   	cli    
c001c43b:	6a 00                	push   0x0
c001c43d:	6a 28                	push   0x28
c001c43f:	e9 60 00 00 00       	jmp    c001c4a4 <int_common_stub>

c001c444 <irq9>:
c001c444:	fa                   	cli    
c001c445:	6a 00                	push   0x0
c001c447:	6a 29                	push   0x29
c001c449:	e9 56 00 00 00       	jmp    c001c4a4 <int_common_stub>

c001c44e <irq10>:
c001c44e:	fa                   	cli    
c001c44f:	6a 00                	push   0x0
c001c451:	6a 2a                	push   0x2a
c001c453:	e9 4c 00 00 00       	jmp    c001c4a4 <int_common_stub>

c001c458 <irq11>:
c001c458:	fa                   	cli    
c001c459:	6a 00                	push   0x0
c001c45b:	6a 2b                	push   0x2b
c001c45d:	e9 42 00 00 00       	jmp    c001c4a4 <int_common_stub>

c001c462 <irq12>:
c001c462:	fa                   	cli    
c001c463:	6a 00                	push   0x0
c001c465:	6a 2c                	push   0x2c
c001c467:	e9 38 00 00 00       	jmp    c001c4a4 <int_common_stub>

c001c46c <irq13>:
c001c46c:	fa                   	cli    
c001c46d:	6a 00                	push   0x0
c001c46f:	6a 2d                	push   0x2d
c001c471:	e9 2e 00 00 00       	jmp    c001c4a4 <int_common_stub>

c001c476 <irq14>:
c001c476:	fa                   	cli    
c001c477:	6a 00                	push   0x0
c001c479:	6a 2e                	push   0x2e
c001c47b:	e9 24 00 00 00       	jmp    c001c4a4 <int_common_stub>

c001c480 <irq15>:
c001c480:	fa                   	cli    
c001c481:	6a 00                	push   0x0
c001c483:	6a 2f                	push   0x2f
c001c485:	e9 1a 00 00 00       	jmp    c001c4a4 <int_common_stub>

c001c48a <irq1>:
c001c48a:	fa                   	cli    
c001c48b:	6a 00                	push   0x0
c001c48d:	6a 21                	push   0x21
c001c48f:	eb 13                	jmp    c001c4a4 <int_common_stub>

c001c491 <irq2>:
c001c491:	fa                   	cli    
c001c492:	6a 00                	push   0x0
c001c494:	6a 22                	push   0x22
c001c496:	eb 0c                	jmp    c001c4a4 <int_common_stub>

c001c498 <isr96>:
c001c498:	6a 00                	push   0x0
c001c49a:	6a 60                	push   0x60
c001c49c:	fb                   	sti    
c001c49d:	eb 37                	jmp    c001c4d6 <syscall_common_stub>

c001c49f <irq0>:
c001c49f:	fa                   	cli    
c001c4a0:	6a 00                	push   0x0
c001c4a2:	6a 20                	push   0x20

c001c4a4 <int_common_stub>:
c001c4a4:	60                   	pusha  
c001c4a5:	1e                   	push   ds
c001c4a6:	06                   	push   es
c001c4a7:	0f a0                	push   fs
c001c4a9:	0f a8                	push   gs
c001c4ab:	66 b8 10 00          	mov    ax,0x10
c001c4af:	66 8e d8             	mov    ds,ax
c001c4b2:	66 8e c0             	mov    es,ax
c001c4b5:	66 8e e0             	mov    fs,ax
c001c4b8:	66 8e e8             	mov    gs,ax
c001c4bb:	54                   	push   esp
c001c4bc:	fc                   	cld    
c001c4bd:	e8 e2 f9 fe ff       	call   c000bea4 <int_handler>
c001c4c2:	81 c4 04 00 00 00    	add    esp,0x4
c001c4c8:	0f a9                	pop    gs
c001c4ca:	0f a1                	pop    fs
c001c4cc:	07                   	pop    es
c001c4cd:	1f                   	pop    ds
c001c4ce:	61                   	popa   
c001c4cf:	81 c4 08 00 00 00    	add    esp,0x8
c001c4d5:	cf                   	iret   

c001c4d6 <syscall_common_stub>:
c001c4d6:	60                   	pusha  
c001c4d7:	1e                   	push   ds
c001c4d8:	06                   	push   es
c001c4d9:	0f a0                	push   fs
c001c4db:	0f a8                	push   gs
c001c4dd:	66 b8 10 00          	mov    ax,0x10
c001c4e1:	66 8e d8             	mov    ds,ax
c001c4e4:	66 8e c0             	mov    es,ax
c001c4e7:	66 8e e0             	mov    fs,ax
c001c4ea:	66 8e e8             	mov    gs,ax
c001c4ed:	54                   	push   esp
c001c4ee:	fc                   	cld    
c001c4ef:	e8 b0 f9 fe ff       	call   c000bea4 <int_handler>
c001c4f4:	81 c4 04 00 00 00    	add    esp,0x4
c001c4fa:	0f a9                	pop    gs
c001c4fc:	0f a1                	pop    fs
c001c4fe:	07                   	pop    es
c001c4ff:	1f                   	pop    ds
c001c500:	e8 12 43 ff ff       	call   c0010817 <KiCheckSignalZ>
c001c505:	3d 00 00 00 00       	cmp    eax,0x0
c001c50a:	74 1d                	je     c001c529 <syscall_common_stub.skipSignals>
c001c50c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001c510:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c514:	89 e3                	mov    ebx,esp
c001c516:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001c519:	51                   	push   ecx
c001c51a:	68 31 c5 01 c0       	push   0xc001c531
c001c51f:	89 dc                	mov    esp,ebx
c001c521:	61                   	popa   
c001c522:	81 c4 08 00 00 00    	add    esp,0x8
c001c528:	cf                   	iret   

c001c529 <syscall_common_stub.skipSignals>:
c001c529:	61                   	popa   
c001c52a:	81 c4 08 00 00 00    	add    esp,0x8
c001c530:	cf                   	iret   

c001c531 <irq16>:
c001c531:	fa                   	cli    
c001c532:	6a 00                	push   0x0
c001c534:	6a 30                	push   0x30
c001c536:	e9 69 ff ff ff       	jmp    c001c4a4 <int_common_stub>

c001c53b <irq17>:
c001c53b:	fa                   	cli    
c001c53c:	6a 00                	push   0x0
c001c53e:	6a 31                	push   0x31
c001c540:	e9 5f ff ff ff       	jmp    c001c4a4 <int_common_stub>

c001c545 <irq18>:
c001c545:	fa                   	cli    
c001c546:	6a 00                	push   0x0
c001c548:	6a 32                	push   0x32
c001c54a:	e9 55 ff ff ff       	jmp    c001c4a4 <int_common_stub>

c001c54f <irq19>:
c001c54f:	fa                   	cli    
c001c550:	6a 00                	push   0x0
c001c552:	6a 33                	push   0x33
c001c554:	e9 4b ff ff ff       	jmp    c001c4a4 <int_common_stub>

c001c559 <irq20>:
c001c559:	fa                   	cli    
c001c55a:	6a 00                	push   0x0
c001c55c:	6a 34                	push   0x34
c001c55e:	e9 41 ff ff ff       	jmp    c001c4a4 <int_common_stub>

c001c563 <irq21>:
c001c563:	fa                   	cli    
c001c564:	6a 00                	push   0x0
c001c566:	6a 35                	push   0x35
c001c568:	e9 37 ff ff ff       	jmp    c001c4a4 <int_common_stub>

c001c56d <irq22>:
c001c56d:	fa                   	cli    
c001c56e:	6a 00                	push   0x0
c001c570:	6a 36                	push   0x36
c001c572:	e9 2d ff ff ff       	jmp    c001c4a4 <int_common_stub>

c001c577 <irq23>:
c001c577:	fa                   	cli    
c001c578:	6a 00                	push   0x0
c001c57a:	6a 37                	push   0x37
c001c57c:	e9 23 ff ff ff       	jmp    c001c4a4 <int_common_stub>
c001c581:	66 90                	xchg   ax,ax
c001c583:	66 90                	xchg   ax,ax
c001c585:	66 90                	xchg   ax,ax
c001c587:	66 90                	xchg   ax,ax
c001c589:	66 90                	xchg   ax,ax
c001c58b:	66 90                	xchg   ax,ax
c001c58d:	66 90                	xchg   ax,ax
c001c58f:	90                   	nop

c001c590 <i386GetRDRAND>:
c001c590:	b9 64 00 00 00       	mov    ecx,0x64

c001c595 <retry>:
c001c595:	0f c7 f0             	rdrand eax
c001c598:	72 05                	jb     c001c59f <retry.done>
c001c59a:	e2 f9                	loop   c001c595 <retry>

c001c59c <retry.fail>:
c001c59c:	31 c0                	xor    eax,eax
c001c59e:	c3                   	ret    

c001c59f <retry.done>:
c001c59f:	c3                   	ret    

c001c5a0 <absolutelyNoChanceInHell>:
c001c5a0:	b8 01 00 00 00       	mov    eax,0x1
c001c5a5:	0f a2                	cpuid  
c001c5a7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001c5ad:	74 06                	je     c001c5b5 <sseDetect.noSSE>
c001c5af:	b8 01 00 00 00       	mov    eax,0x1
c001c5b4:	c3                   	ret    

c001c5b5 <sseDetect.noSSE>:
c001c5b5:	31 c0                	xor    eax,eax
c001c5b7:	c3                   	ret    

c001c5b8 <sseSave>:
c001c5b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5bc:	0f ae 00             	fxsave [eax]
c001c5bf:	c3                   	ret    

c001c5c0 <sseLoad>:
c001c5c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5c4:	0f ae 08             	fxrstor [eax]
c001c5c7:	c3                   	ret    

c001c5c8 <sseInit>:
c001c5c8:	e8 42 00 00 00       	call   c001c60f <x87Init>
c001c5cd:	0f 20 e0             	mov    eax,cr4
c001c5d0:	66 0d 00 06          	or     ax,0x600
c001c5d4:	0f 22 e0             	mov    cr4,eax
c001c5d7:	c3                   	ret    

c001c5d8 <sseClose>:
c001c5d8:	c3                   	ret    
c001c5d9:	66 90                	xchg   ax,ax
c001c5db:	66 90                	xchg   ax,ax
c001c5dd:	66 90                	xchg   ax,ax
c001c5df:	90                   	nop

c001c5e0 <value_37F>:
c001c5e0:	7f 03                	jg     c001c5e5 <value_37A+0x1>

c001c5e2 <value_37E>:
c001c5e2:	7e 03                	jle    c001c5e7 <x87Detect+0x1>

c001c5e4 <value_37A>:
c001c5e4:	7a 03                	jp     c001c5e9 <x87Detect+0x3>

c001c5e6 <x87Detect>:
c001c5e6:	b8 01 00 00 00       	mov    eax,0x1
c001c5eb:	0f a2                	cpuid  
c001c5ed:	f7 c2 01 00 00 00    	test   edx,0x1
c001c5f3:	74 06                	je     c001c5fb <x87Detect.nox87>
c001c5f5:	b8 01 00 00 00       	mov    eax,0x1
c001c5fa:	c3                   	ret    

c001c5fb <x87Detect.nox87>:
c001c5fb:	b8 00 00 00 00       	mov    eax,0x0
c001c600:	c3                   	ret    

c001c601 <x87Save>:
c001c601:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c605:	dd 30                	fnsave [eax]
c001c607:	c3                   	ret    

c001c608 <x87Load>:
c001c608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c60c:	dd 20                	frstor [eax]
c001c60e:	c3                   	ret    

c001c60f <x87Init>:
c001c60f:	0f 20 c0             	mov    eax,cr0
c001c612:	66 25 fb ff          	and    ax,0xfffb
c001c616:	66 0d 22 00          	or     ax,0x22
c001c61a:	0f 22 c0             	mov    cr0,eax
c001c61d:	db e3                	fninit 
c001c61f:	0f 06                	clts   
c001c621:	d9 2d e4 c5 01 c0    	fldcw  WORD PTR ds:0xc001c5e4
c001c627:	c3                   	ret    

c001c628 <x87Close>:
c001c628:	c3                   	ret    
c001c629:	66 90                	xchg   ax,ax
c001c62b:	90                   	nop

c001c62c <__do_global_ctors_aux>:
c001c62c:	a1 dc d5 01 c0       	mov    eax,ds:0xc001d5dc
c001c631:	83 f8 ff             	cmp    eax,0xffffffff
c001c634:	74 1a                	je     c001c650 <__do_global_ctors_aux+0x24>
c001c636:	55                   	push   ebp
c001c637:	89 e5                	mov    ebp,esp
c001c639:	53                   	push   ebx
c001c63a:	52                   	push   edx
c001c63b:	bb dc d5 01 c0       	mov    ebx,0xc001d5dc
c001c640:	ff d0                	call   eax
c001c642:	83 eb 04             	sub    ebx,0x4
c001c645:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c647:	83 f8 ff             	cmp    eax,0xffffffff
c001c64a:	75 f4                	jne    c001c640 <__do_global_ctors_aux+0x14>
c001c64c:	58                   	pop    eax
c001c64d:	5b                   	pop    ebx
c001c64e:	5d                   	pop    ebp
c001c64f:	c3                   	ret    
c001c650:	c3                   	ret    
c001c651:	66 90                	xchg   ax,ax
c001c653:	90                   	nop

c001c654 <__divdi3>:
c001c654:	55                   	push   ebp
c001c655:	57                   	push   edi
c001c656:	56                   	push   esi
c001c657:	53                   	push   ebx
c001c658:	83 ec 1c             	sub    esp,0x1c
c001c65b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c65f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c663:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001c666:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001c66a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c66e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c672:	85 db                	test   ebx,ebx
c001c674:	0f 88 8e 00 00 00    	js     c001c708 <__divdi3+0xb4>
c001c67a:	89 dd                	mov    ebp,ebx
c001c67c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c684:	89 d3                	mov    ebx,edx
c001c686:	85 d2                	test   edx,edx
c001c688:	79 0d                	jns    c001c697 <__divdi3+0x43>
c001c68a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001c68e:	f7 d8                	neg    eax
c001c690:	83 d2 00             	adc    edx,0x0
c001c693:	f7 da                	neg    edx
c001c695:	89 d3                	mov    ebx,edx
c001c697:	89 c7                	mov    edi,eax
c001c699:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c69c:	85 db                	test   ebx,ebx
c001c69e:	75 48                	jne    c001c6e8 <__divdi3+0x94>
c001c6a0:	39 ef                	cmp    edi,ebp
c001c6a2:	76 24                	jbe    c001c6c8 <__divdi3+0x74>
c001c6a4:	89 ea                	mov    edx,ebp
c001c6a6:	f7 f7                	div    edi
c001c6a8:	89 c1                	mov    ecx,eax
c001c6aa:	31 f6                	xor    esi,esi
c001c6ac:	89 c8                	mov    eax,ecx
c001c6ae:	89 f2                	mov    edx,esi
c001c6b0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c6b4:	85 c9                	test   ecx,ecx
c001c6b6:	74 07                	je     c001c6bf <__divdi3+0x6b>
c001c6b8:	f7 d8                	neg    eax
c001c6ba:	83 d2 00             	adc    edx,0x0
c001c6bd:	f7 da                	neg    edx
c001c6bf:	83 c4 1c             	add    esp,0x1c
c001c6c2:	5b                   	pop    ebx
c001c6c3:	5e                   	pop    esi
c001c6c4:	5f                   	pop    edi
c001c6c5:	5d                   	pop    ebp
c001c6c6:	c3                   	ret    
c001c6c7:	90                   	nop
c001c6c8:	85 ff                	test   edi,edi
c001c6ca:	75 0b                	jne    c001c6d7 <__divdi3+0x83>
c001c6cc:	b8 01 00 00 00       	mov    eax,0x1
c001c6d1:	31 d2                	xor    edx,edx
c001c6d3:	f7 f3                	div    ebx
c001c6d5:	89 c7                	mov    edi,eax
c001c6d7:	31 d2                	xor    edx,edx
c001c6d9:	89 e8                	mov    eax,ebp
c001c6db:	f7 f7                	div    edi
c001c6dd:	89 c6                	mov    esi,eax
c001c6df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c6e2:	f7 f7                	div    edi
c001c6e4:	89 c1                	mov    ecx,eax
c001c6e6:	eb c4                	jmp    c001c6ac <__divdi3+0x58>
c001c6e8:	39 eb                	cmp    ebx,ebp
c001c6ea:	77 3c                	ja     c001c728 <__divdi3+0xd4>
c001c6ec:	0f bd f3             	bsr    esi,ebx
c001c6ef:	83 f6 1f             	xor    esi,0x1f
c001c6f2:	75 40                	jne    c001c734 <__divdi3+0xe0>
c001c6f4:	39 eb                	cmp    ebx,ebp
c001c6f6:	72 09                	jb     c001c701 <__divdi3+0xad>
c001c6f8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001c6fb:	0f 87 97 00 00 00    	ja     c001c798 <__divdi3+0x144>
c001c701:	b9 01 00 00 00       	mov    ecx,0x1
c001c706:	eb a4                	jmp    c001c6ac <__divdi3+0x58>
c001c708:	f7 d9                	neg    ecx
c001c70a:	83 d3 00             	adc    ebx,0x0
c001c70d:	f7 db                	neg    ebx
c001c70f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001c712:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001c716:	89 dd                	mov    ebp,ebx
c001c718:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001c720:	e9 5f ff ff ff       	jmp    c001c684 <__divdi3+0x30>
c001c725:	8d 76 00             	lea    esi,[esi+0x0]
c001c728:	31 f6                	xor    esi,esi
c001c72a:	31 c9                	xor    ecx,ecx
c001c72c:	e9 7b ff ff ff       	jmp    c001c6ac <__divdi3+0x58>
c001c731:	8d 76 00             	lea    esi,[esi+0x0]
c001c734:	b8 20 00 00 00       	mov    eax,0x20
c001c739:	29 f0                	sub    eax,esi
c001c73b:	89 f1                	mov    ecx,esi
c001c73d:	d3 e3                	shl    ebx,cl
c001c73f:	89 fa                	mov    edx,edi
c001c741:	88 c1                	mov    cl,al
c001c743:	d3 ea                	shr    edx,cl
c001c745:	09 da                	or     edx,ebx
c001c747:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c74b:	89 f1                	mov    ecx,esi
c001c74d:	d3 e7                	shl    edi,cl
c001c74f:	89 eb                	mov    ebx,ebp
c001c751:	88 c1                	mov    cl,al
c001c753:	d3 eb                	shr    ebx,cl
c001c755:	89 f1                	mov    ecx,esi
c001c757:	d3 e5                	shl    ebp,cl
c001c759:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001c75c:	88 c1                	mov    cl,al
c001c75e:	d3 ea                	shr    edx,cl
c001c760:	09 d5                	or     ebp,edx
c001c762:	89 e8                	mov    eax,ebp
c001c764:	89 da                	mov    edx,ebx
c001c766:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001c76a:	89 d3                	mov    ebx,edx
c001c76c:	89 c5                	mov    ebp,eax
c001c76e:	f7 e7                	mul    edi
c001c770:	39 d3                	cmp    ebx,edx
c001c772:	72 18                	jb     c001c78c <__divdi3+0x138>
c001c774:	74 0a                	je     c001c780 <__divdi3+0x12c>
c001c776:	89 e9                	mov    ecx,ebp
c001c778:	31 f6                	xor    esi,esi
c001c77a:	e9 2d ff ff ff       	jmp    c001c6ac <__divdi3+0x58>
c001c77f:	90                   	nop
c001c780:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001c783:	89 f1                	mov    ecx,esi
c001c785:	d3 e7                	shl    edi,cl
c001c787:	39 c7                	cmp    edi,eax
c001c789:	73 eb                	jae    c001c776 <__divdi3+0x122>
c001c78b:	90                   	nop
c001c78c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001c78f:	31 f6                	xor    esi,esi
c001c791:	e9 16 ff ff ff       	jmp    c001c6ac <__divdi3+0x58>
c001c796:	66 90                	xchg   ax,ax
c001c798:	31 c9                	xor    ecx,ecx
c001c79a:	e9 0d ff ff ff       	jmp    c001c6ac <__divdi3+0x58>
c001c79f:	90                   	nop

c001c7a0 <__moddi3>:
c001c7a0:	55                   	push   ebp
c001c7a1:	57                   	push   edi
c001c7a2:	56                   	push   esi
c001c7a3:	53                   	push   ebx
c001c7a4:	83 ec 2c             	sub    esp,0x2c
c001c7a7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c7ab:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001c7af:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c7b3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001c7b7:	85 db                	test   ebx,ebx
c001c7b9:	0f 88 85 00 00 00    	js     c001c844 <__moddi3+0xa4>
c001c7bf:	89 de                	mov    esi,ebx
c001c7c1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c7c9:	89 d7                	mov    edi,edx
c001c7cb:	85 d2                	test   edx,edx
c001c7cd:	79 09                	jns    c001c7d8 <__moddi3+0x38>
c001c7cf:	f7 d8                	neg    eax
c001c7d1:	83 d2 00             	adc    edx,0x0
c001c7d4:	f7 da                	neg    edx
c001c7d6:	89 d7                	mov    edi,edx
c001c7d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7dc:	89 cd                	mov    ebp,ecx
c001c7de:	85 ff                	test   edi,edi
c001c7e0:	75 52                	jne    c001c834 <__moddi3+0x94>
c001c7e2:	89 c3                	mov    ebx,eax
c001c7e4:	39 f0                	cmp    eax,esi
c001c7e6:	76 24                	jbe    c001c80c <__moddi3+0x6c>
c001c7e8:	89 c8                	mov    eax,ecx
c001c7ea:	89 f2                	mov    edx,esi
c001c7ec:	f7 f3                	div    ebx
c001c7ee:	89 d6                	mov    esi,edx
c001c7f0:	89 f0                	mov    eax,esi
c001c7f2:	31 d2                	xor    edx,edx
c001c7f4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c7f8:	85 c9                	test   ecx,ecx
c001c7fa:	74 07                	je     c001c803 <__moddi3+0x63>
c001c7fc:	f7 d8                	neg    eax
c001c7fe:	83 d2 00             	adc    edx,0x0
c001c801:	f7 da                	neg    edx
c001c803:	83 c4 2c             	add    esp,0x2c
c001c806:	5b                   	pop    ebx
c001c807:	5e                   	pop    esi
c001c808:	5f                   	pop    edi
c001c809:	5d                   	pop    ebp
c001c80a:	c3                   	ret    
c001c80b:	90                   	nop
c001c80c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c810:	85 db                	test   ebx,ebx
c001c812:	75 0d                	jne    c001c821 <__moddi3+0x81>
c001c814:	b8 01 00 00 00       	mov    eax,0x1
c001c819:	31 d2                	xor    edx,edx
c001c81b:	f7 f7                	div    edi
c001c81d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c821:	89 f0                	mov    eax,esi
c001c823:	31 d2                	xor    edx,edx
c001c825:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c829:	f7 f7                	div    edi
c001c82b:	89 e8                	mov    eax,ebp
c001c82d:	f7 f7                	div    edi
c001c82f:	89 d6                	mov    esi,edx
c001c831:	eb bd                	jmp    c001c7f0 <__moddi3+0x50>
c001c833:	90                   	nop
c001c834:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c838:	39 f7                	cmp    edi,esi
c001c83a:	76 20                	jbe    c001c85c <__moddi3+0xbc>
c001c83c:	89 c8                	mov    eax,ecx
c001c83e:	89 f2                	mov    edx,esi
c001c840:	eb b2                	jmp    c001c7f4 <__moddi3+0x54>
c001c842:	66 90                	xchg   ax,ax
c001c844:	f7 d9                	neg    ecx
c001c846:	83 d3 00             	adc    ebx,0x0
c001c849:	f7 db                	neg    ebx
c001c84b:	89 de                	mov    esi,ebx
c001c84d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001c855:	e9 6f ff ff ff       	jmp    c001c7c9 <__moddi3+0x29>
c001c85a:	66 90                	xchg   ax,ax
c001c85c:	0f bd c7             	bsr    eax,edi
c001c85f:	83 f0 1f             	xor    eax,0x1f
c001c862:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c866:	75 24                	jne    c001c88c <__moddi3+0xec>
c001c868:	39 f7                	cmp    edi,esi
c001c86a:	72 06                	jb     c001c872 <__moddi3+0xd2>
c001c86c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001c870:	77 0c                	ja     c001c87e <__moddi3+0xde>
c001c872:	89 e9                	mov    ecx,ebp
c001c874:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001c878:	19 fe                	sbb    esi,edi
c001c87a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c87e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c882:	89 f2                	mov    edx,esi
c001c884:	e9 6b ff ff ff       	jmp    c001c7f4 <__moddi3+0x54>
c001c889:	8d 76 00             	lea    esi,[esi+0x0]
c001c88c:	b8 20 00 00 00       	mov    eax,0x20
c001c891:	89 c2                	mov    edx,eax
c001c893:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c897:	29 da                	sub    edx,ebx
c001c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c89d:	88 d9                	mov    cl,bl
c001c89f:	d3 e7                	shl    edi,cl
c001c8a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c8a5:	88 d1                	mov    cl,dl
c001c8a7:	d3 e8                	shr    eax,cl
c001c8a9:	09 c7                	or     edi,eax
c001c8ab:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001c8af:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c8b3:	89 d8                	mov    eax,ebx
c001c8b5:	88 d9                	mov    cl,bl
c001c8b7:	d3 e7                	shl    edi,cl
c001c8b9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c8bd:	89 f3                	mov    ebx,esi
c001c8bf:	88 d1                	mov    cl,dl
c001c8c1:	d3 eb                	shr    ebx,cl
c001c8c3:	89 c7                	mov    edi,eax
c001c8c5:	88 c1                	mov    cl,al
c001c8c7:	d3 e6                	shl    esi,cl
c001c8c9:	89 e8                	mov    eax,ebp
c001c8cb:	88 d1                	mov    cl,dl
c001c8cd:	d3 e8                	shr    eax,cl
c001c8cf:	09 f0                	or     eax,esi
c001c8d1:	89 f9                	mov    ecx,edi
c001c8d3:	d3 e5                	shl    ebp,cl
c001c8d5:	89 da                	mov    edx,ebx
c001c8d7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001c8db:	89 d3                	mov    ebx,edx
c001c8dd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c8e1:	89 c6                	mov    esi,eax
c001c8e3:	89 d1                	mov    ecx,edx
c001c8e5:	39 d3                	cmp    ebx,edx
c001c8e7:	72 27                	jb     c001c910 <__moddi3+0x170>
c001c8e9:	74 21                	je     c001c90c <__moddi3+0x16c>
c001c8eb:	29 f5                	sub    ebp,esi
c001c8ed:	19 cb                	sbb    ebx,ecx
c001c8ef:	89 de                	mov    esi,ebx
c001c8f1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001c8f5:	d3 e6                	shl    esi,cl
c001c8f7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c8fb:	89 f9                	mov    ecx,edi
c001c8fd:	d3 ed                	shr    ebp,cl
c001c8ff:	09 ee                	or     esi,ebp
c001c901:	89 f0                	mov    eax,esi
c001c903:	d3 eb                	shr    ebx,cl
c001c905:	89 da                	mov    edx,ebx
c001c907:	e9 e8 fe ff ff       	jmp    c001c7f4 <__moddi3+0x54>
c001c90c:	39 c5                	cmp    ebp,eax
c001c90e:	73 db                	jae    c001c8eb <__moddi3+0x14b>
c001c910:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c914:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001c918:	89 d1                	mov    ecx,edx
c001c91a:	89 c6                	mov    esi,eax
c001c91c:	eb cd                	jmp    c001c8eb <__moddi3+0x14b>
c001c91e:	66 90                	xchg   ax,ax

c001c920 <__udivdi3>:
c001c920:	55                   	push   ebp
c001c921:	57                   	push   edi
c001c922:	56                   	push   esi
c001c923:	53                   	push   ebx
c001c924:	83 ec 1c             	sub    esp,0x1c
c001c927:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c92b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c92f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c933:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c937:	85 d2                	test   edx,edx
c001c939:	75 41                	jne    c001c97c <__udivdi3+0x5c>
c001c93b:	39 f7                	cmp    edi,esi
c001c93d:	76 15                	jbe    c001c954 <__udivdi3+0x34>
c001c93f:	89 e8                	mov    eax,ebp
c001c941:	89 f2                	mov    edx,esi
c001c943:	f7 f7                	div    edi
c001c945:	31 db                	xor    ebx,ebx
c001c947:	89 da                	mov    edx,ebx
c001c949:	83 c4 1c             	add    esp,0x1c
c001c94c:	5b                   	pop    ebx
c001c94d:	5e                   	pop    esi
c001c94e:	5f                   	pop    edi
c001c94f:	5d                   	pop    ebp
c001c950:	c3                   	ret    
c001c951:	8d 76 00             	lea    esi,[esi+0x0]
c001c954:	89 f9                	mov    ecx,edi
c001c956:	85 ff                	test   edi,edi
c001c958:	75 0b                	jne    c001c965 <__udivdi3+0x45>
c001c95a:	b8 01 00 00 00       	mov    eax,0x1
c001c95f:	31 d2                	xor    edx,edx
c001c961:	f7 f7                	div    edi
c001c963:	89 c1                	mov    ecx,eax
c001c965:	31 d2                	xor    edx,edx
c001c967:	89 f0                	mov    eax,esi
c001c969:	f7 f1                	div    ecx
c001c96b:	89 c3                	mov    ebx,eax
c001c96d:	89 e8                	mov    eax,ebp
c001c96f:	f7 f1                	div    ecx
c001c971:	89 da                	mov    edx,ebx
c001c973:	83 c4 1c             	add    esp,0x1c
c001c976:	5b                   	pop    ebx
c001c977:	5e                   	pop    esi
c001c978:	5f                   	pop    edi
c001c979:	5d                   	pop    ebp
c001c97a:	c3                   	ret    
c001c97b:	90                   	nop
c001c97c:	39 f2                	cmp    edx,esi
c001c97e:	77 1c                	ja     c001c99c <__udivdi3+0x7c>
c001c980:	0f bd da             	bsr    ebx,edx
c001c983:	83 f3 1f             	xor    ebx,0x1f
c001c986:	75 24                	jne    c001c9ac <__udivdi3+0x8c>
c001c988:	39 f2                	cmp    edx,esi
c001c98a:	72 08                	jb     c001c994 <__udivdi3+0x74>
c001c98c:	39 ef                	cmp    edi,ebp
c001c98e:	0f 87 84 00 00 00    	ja     c001ca18 <__udivdi3+0xf8>
c001c994:	b8 01 00 00 00       	mov    eax,0x1
c001c999:	eb ac                	jmp    c001c947 <__udivdi3+0x27>
c001c99b:	90                   	nop
c001c99c:	31 db                	xor    ebx,ebx
c001c99e:	31 c0                	xor    eax,eax
c001c9a0:	89 da                	mov    edx,ebx
c001c9a2:	83 c4 1c             	add    esp,0x1c
c001c9a5:	5b                   	pop    ebx
c001c9a6:	5e                   	pop    esi
c001c9a7:	5f                   	pop    edi
c001c9a8:	5d                   	pop    ebp
c001c9a9:	c3                   	ret    
c001c9aa:	66 90                	xchg   ax,ax
c001c9ac:	b8 20 00 00 00       	mov    eax,0x20
c001c9b1:	29 d8                	sub    eax,ebx
c001c9b3:	88 d9                	mov    cl,bl
c001c9b5:	d3 e2                	shl    edx,cl
c001c9b7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c9bb:	89 fa                	mov    edx,edi
c001c9bd:	88 c1                	mov    cl,al
c001c9bf:	d3 ea                	shr    edx,cl
c001c9c1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c9c5:	09 d1                	or     ecx,edx
c001c9c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c9cb:	88 d9                	mov    cl,bl
c001c9cd:	d3 e7                	shl    edi,cl
c001c9cf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c9d3:	89 f7                	mov    edi,esi
c001c9d5:	88 c1                	mov    cl,al
c001c9d7:	d3 ef                	shr    edi,cl
c001c9d9:	88 d9                	mov    cl,bl
c001c9db:	d3 e6                	shl    esi,cl
c001c9dd:	89 ea                	mov    edx,ebp
c001c9df:	88 c1                	mov    cl,al
c001c9e1:	d3 ea                	shr    edx,cl
c001c9e3:	09 d6                	or     esi,edx
c001c9e5:	89 f0                	mov    eax,esi
c001c9e7:	89 fa                	mov    edx,edi
c001c9e9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c9ed:	89 d7                	mov    edi,edx
c001c9ef:	89 c6                	mov    esi,eax
c001c9f1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c9f5:	39 d7                	cmp    edi,edx
c001c9f7:	72 13                	jb     c001ca0c <__udivdi3+0xec>
c001c9f9:	74 09                	je     c001ca04 <__udivdi3+0xe4>
c001c9fb:	89 f0                	mov    eax,esi
c001c9fd:	31 db                	xor    ebx,ebx
c001c9ff:	e9 43 ff ff ff       	jmp    c001c947 <__udivdi3+0x27>
c001ca04:	88 d9                	mov    cl,bl
c001ca06:	d3 e5                	shl    ebp,cl
c001ca08:	39 c5                	cmp    ebp,eax
c001ca0a:	73 ef                	jae    c001c9fb <__udivdi3+0xdb>
c001ca0c:	8d 46 ff             	lea    eax,[esi-0x1]
c001ca0f:	31 db                	xor    ebx,ebx
c001ca11:	e9 31 ff ff ff       	jmp    c001c947 <__udivdi3+0x27>
c001ca16:	66 90                	xchg   ax,ax
c001ca18:	31 c0                	xor    eax,eax
c001ca1a:	e9 28 ff ff ff       	jmp    c001c947 <__udivdi3+0x27>
c001ca1f:	90                   	nop

c001ca20 <__umoddi3>:
c001ca20:	55                   	push   ebp
c001ca21:	57                   	push   edi
c001ca22:	56                   	push   esi
c001ca23:	53                   	push   ebx
c001ca24:	83 ec 1c             	sub    esp,0x1c
c001ca27:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ca2b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ca2f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001ca33:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ca37:	89 da                	mov    edx,ebx
c001ca39:	85 c0                	test   eax,eax
c001ca3b:	75 37                	jne    c001ca74 <__umoddi3+0x54>
c001ca3d:	39 df                	cmp    edi,ebx
c001ca3f:	76 13                	jbe    c001ca54 <__umoddi3+0x34>
c001ca41:	89 f0                	mov    eax,esi
c001ca43:	f7 f7                	div    edi
c001ca45:	89 d0                	mov    eax,edx
c001ca47:	31 d2                	xor    edx,edx
c001ca49:	83 c4 1c             	add    esp,0x1c
c001ca4c:	5b                   	pop    ebx
c001ca4d:	5e                   	pop    esi
c001ca4e:	5f                   	pop    edi
c001ca4f:	5d                   	pop    ebp
c001ca50:	c3                   	ret    
c001ca51:	8d 76 00             	lea    esi,[esi+0x0]
c001ca54:	89 fd                	mov    ebp,edi
c001ca56:	85 ff                	test   edi,edi
c001ca58:	75 0b                	jne    c001ca65 <__umoddi3+0x45>
c001ca5a:	b8 01 00 00 00       	mov    eax,0x1
c001ca5f:	31 d2                	xor    edx,edx
c001ca61:	f7 f7                	div    edi
c001ca63:	89 c5                	mov    ebp,eax
c001ca65:	89 d8                	mov    eax,ebx
c001ca67:	31 d2                	xor    edx,edx
c001ca69:	f7 f5                	div    ebp
c001ca6b:	89 f0                	mov    eax,esi
c001ca6d:	f7 f5                	div    ebp
c001ca6f:	89 d0                	mov    eax,edx
c001ca71:	eb d4                	jmp    c001ca47 <__umoddi3+0x27>
c001ca73:	90                   	nop
c001ca74:	89 f1                	mov    ecx,esi
c001ca76:	39 d8                	cmp    eax,ebx
c001ca78:	76 0a                	jbe    c001ca84 <__umoddi3+0x64>
c001ca7a:	89 f0                	mov    eax,esi
c001ca7c:	83 c4 1c             	add    esp,0x1c
c001ca7f:	5b                   	pop    ebx
c001ca80:	5e                   	pop    esi
c001ca81:	5f                   	pop    edi
c001ca82:	5d                   	pop    ebp
c001ca83:	c3                   	ret    
c001ca84:	0f bd e8             	bsr    ebp,eax
c001ca87:	83 f5 1f             	xor    ebp,0x1f
c001ca8a:	75 1c                	jne    c001caa8 <__umoddi3+0x88>
c001ca8c:	39 d8                	cmp    eax,ebx
c001ca8e:	72 04                	jb     c001ca94 <__umoddi3+0x74>
c001ca90:	39 f7                	cmp    edi,esi
c001ca92:	77 08                	ja     c001ca9c <__umoddi3+0x7c>
c001ca94:	89 da                	mov    edx,ebx
c001ca96:	29 fe                	sub    esi,edi
c001ca98:	19 c2                	sbb    edx,eax
c001ca9a:	89 f1                	mov    ecx,esi
c001ca9c:	89 c8                	mov    eax,ecx
c001ca9e:	83 c4 1c             	add    esp,0x1c
c001caa1:	5b                   	pop    ebx
c001caa2:	5e                   	pop    esi
c001caa3:	5f                   	pop    edi
c001caa4:	5d                   	pop    ebp
c001caa5:	c3                   	ret    
c001caa6:	66 90                	xchg   ax,ax
c001caa8:	ba 20 00 00 00       	mov    edx,0x20
c001caad:	29 ea                	sub    edx,ebp
c001caaf:	89 e9                	mov    ecx,ebp
c001cab1:	d3 e0                	shl    eax,cl
c001cab3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cab7:	89 f8                	mov    eax,edi
c001cab9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001cabd:	88 d1                	mov    cl,dl
c001cabf:	d3 e8                	shr    eax,cl
c001cac1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cac5:	09 c1                	or     ecx,eax
c001cac7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001cacb:	89 e9                	mov    ecx,ebp
c001cacd:	d3 e7                	shl    edi,cl
c001cacf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001cad3:	89 d8                	mov    eax,ebx
c001cad5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cad9:	88 d1                	mov    cl,dl
c001cadb:	d3 e8                	shr    eax,cl
c001cadd:	89 c7                	mov    edi,eax
c001cadf:	89 e9                	mov    ecx,ebp
c001cae1:	d3 e3                	shl    ebx,cl
c001cae3:	89 f0                	mov    eax,esi
c001cae5:	88 d1                	mov    cl,dl
c001cae7:	d3 e8                	shr    eax,cl
c001cae9:	09 d8                	or     eax,ebx
c001caeb:	89 e9                	mov    ecx,ebp
c001caed:	d3 e6                	shl    esi,cl
c001caef:	89 f3                	mov    ebx,esi
c001caf1:	89 fa                	mov    edx,edi
c001caf3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001caf7:	89 d1                	mov    ecx,edx
c001caf9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001cafd:	89 c6                	mov    esi,eax
c001caff:	89 d7                	mov    edi,edx
c001cb01:	39 d1                	cmp    ecx,edx
c001cb03:	72 27                	jb     c001cb2c <__umoddi3+0x10c>
c001cb05:	74 21                	je     c001cb28 <__umoddi3+0x108>
c001cb07:	89 ca                	mov    edx,ecx
c001cb09:	29 f3                	sub    ebx,esi
c001cb0b:	19 fa                	sbb    edx,edi
c001cb0d:	89 d0                	mov    eax,edx
c001cb0f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001cb13:	d3 e0                	shl    eax,cl
c001cb15:	89 e9                	mov    ecx,ebp
c001cb17:	d3 eb                	shr    ebx,cl
c001cb19:	09 d8                	or     eax,ebx
c001cb1b:	d3 ea                	shr    edx,cl
c001cb1d:	83 c4 1c             	add    esp,0x1c
c001cb20:	5b                   	pop    ebx
c001cb21:	5e                   	pop    esi
c001cb22:	5f                   	pop    edi
c001cb23:	5d                   	pop    ebp
c001cb24:	c3                   	ret    
c001cb25:	8d 76 00             	lea    esi,[esi+0x0]
c001cb28:	39 c3                	cmp    ebx,eax
c001cb2a:	73 db                	jae    c001cb07 <__umoddi3+0xe7>
c001cb2c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001cb30:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001cb34:	89 d7                	mov    edi,edx
c001cb36:	89 c6                	mov    esi,eax
c001cb38:	eb cd                	jmp    c001cb07 <__umoddi3+0xe7>

Disassembly of section .init:

c001cb3a <_init>:
c001cb3a:	55                   	push   ebp
c001cb3b:	89 e5                	mov    ebp,esp
c001cb3d:	e8 b2 35 fe ff       	call   c00000f4 <frame_dummy>
c001cb42:	e8 e5 fa ff ff       	call   c001c62c <__do_global_ctors_aux>
c001cb47:	5d                   	pop    ebp
c001cb48:	c3                   	ret    

Disassembly of section .fini:

c001cb49 <_fini>:
c001cb49:	55                   	push   ebp
c001cb4a:	89 e5                	mov    ebp,esp
c001cb4c:	e8 33 35 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001cb51:	5d                   	pop    ebp
c001cb52:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001cb54 <Computer::~Computer()>:
c001cb54:	83 ec 0c             	sub    esp,0xc
c001cb57:	ba 30 de 01 c0       	mov    edx,0xc001de30
c001cb5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb60:	89 10                	mov    DWORD PTR [eax],edx
c001cb62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb66:	83 ec 0c             	sub    esp,0xc
c001cb69:	50                   	push   eax
c001cb6a:	e8 8b ed fe ff       	call   c000b8fa <Device::~Device()>
c001cb6f:	83 c4 10             	add    esp,0x10
c001cb72:	90                   	nop
c001cb73:	83 c4 0c             	add    esp,0xc
c001cb76:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001cb78 <Computer::~Computer()>:
c001cb78:	83 ec 0c             	sub    esp,0xc
c001cb7b:	83 ec 0c             	sub    esp,0xc
c001cb7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb82:	e8 cd ff ff ff       	call   c001cb54 <Computer::~Computer()>
c001cb87:	83 c4 10             	add    esp,0x10
c001cb8a:	83 ec 08             	sub    esp,0x8
c001cb8d:	68 70 01 00 00       	push   0x170
c001cb92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb96:	e8 29 d9 fe ff       	call   c000a4c4 <operator delete(void*, unsigned long)>
c001cb9b:	83 c4 10             	add    esp,0x10
c001cb9e:	83 c4 0c             	add    esp,0xc
c001cba1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001cba2 <idleCommon()>:
c001cba2:	83 ec 0c             	sub    esp,0xc
c001cba5:	fa                   	cli    
c001cba6:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c001cbac:	e8 2f 6c ff ff       	call   c00137e0 <schedule()>
c001cbb1:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001cbb6:	48                   	dec    eax
c001cbb7:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001cbbc:	75 01                	jne    c001cbbf <idleCommon()+0x1d>
c001cbbe:	fb                   	sti    
c001cbbf:	83 c4 0c             	add    esp,0xc
c001cbc2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001cbc4 <LinkedList<UnixFile>::~LinkedList()>:
c001cbc4:	90                   	nop
c001cbc5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001cbc6 <LinkedList<UnixFile>::LinkedList()>:
c001cbc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cbd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbd4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cbdb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbdf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cbe6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cbf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbf4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cbfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cc06:	90                   	nop
c001cc07:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001cc08 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001cc08:	83 ec 0c             	sub    esp,0xc
c001cc0b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001cc10:	75 10                	jne    c001cc22 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001cc12:	83 ec 0c             	sub    esp,0xc
c001cc15:	68 44 e0 01 c0       	push   0xc001e044
c001cc1a:	e8 a4 36 ff ff       	call   c00102c3 <KePanic(char const*)>
c001cc1f:	83 c4 10             	add    esp,0x10
c001cc22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc26:	8b 00                	mov    eax,DWORD PTR [eax]
c001cc28:	85 c0                	test   eax,eax
c001cc2a:	74 34                	je     c001cc60 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001cc2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc30:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cc33:	85 c0                	test   eax,eax
c001cc35:	74 29                	je     c001cc60 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001cc37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc3b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cc3e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cc42:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cc45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cc4d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cc50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cc57:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cc5e:	eb 65                	jmp    c001ccc5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001cc60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc64:	8b 00                	mov    eax,DWORD PTR [eax]
c001cc66:	85 c0                	test   eax,eax
c001cc68:	75 4b                	jne    c001ccb5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001cc6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cc71:	85 c0                	test   eax,eax
c001cc73:	75 40                	jne    c001ccb5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001cc75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc79:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cc7d:	89 10                	mov    DWORD PTR [eax],edx
c001cc7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc83:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cc87:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cc8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cc91:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cc98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc9c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cc9f:	85 c0                	test   eax,eax
c001cca1:	74 22                	je     c001ccc5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001cca3:	83 ec 0c             	sub    esp,0xc
c001cca6:	68 66 e0 01 c0       	push   0xc001e066
c001ccab:	e8 13 36 ff ff       	call   c00102c3 <KePanic(char const*)>
c001ccb0:	83 c4 10             	add    esp,0x10
c001ccb3:	eb 10                	jmp    c001ccc5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001ccb5:	83 ec 0c             	sub    esp,0xc
c001ccb8:	68 70 e0 01 c0       	push   0xc001e070
c001ccbd:	e8 01 36 ff ff       	call   c00102c3 <KePanic(char const*)>
c001ccc2:	83 c4 10             	add    esp,0x10
c001ccc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccc9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cccc:	8d 50 01             	lea    edx,[eax+0x1]
c001cccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccd3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ccd6:	90                   	nop
c001ccd7:	83 c4 0c             	add    esp,0xc
c001ccda:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001ccdc <LinkedList<UnixFile>::getFirstElement()>:
c001ccdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cce0:	8b 00                	mov    eax,DWORD PTR [eax]
c001cce2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001cce4 <LinkedList<UnixFile>::removeFirst()>:
c001cce4:	83 ec 0c             	sub    esp,0xc
c001cce7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cceb:	8b 00                	mov    eax,DWORD PTR [eax]
c001cced:	85 c0                	test   eax,eax
c001ccef:	75 12                	jne    c001cd03 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001ccf1:	83 ec 0c             	sub    esp,0xc
c001ccf4:	68 7c e0 01 c0       	push   0xc001e07c
c001ccf9:	e8 c5 35 ff ff       	call   c00102c3 <KePanic(char const*)>
c001ccfe:	83 c4 10             	add    esp,0x10
c001cd01:	eb 7e                	jmp    c001cd81 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001cd03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd07:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cd0a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cd0d:	85 c0                	test   eax,eax
c001cd0f:	74 10                	je     c001cd21 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001cd11:	83 ec 0c             	sub    esp,0xc
c001cd14:	68 c7 e0 01 c0       	push   0xc001e0c7
c001cd19:	e8 a5 35 ff ff       	call   c00102c3 <KePanic(char const*)>
c001cd1e:	83 c4 10             	add    esp,0x10
c001cd21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd25:	8b 00                	mov    eax,DWORD PTR [eax]
c001cd27:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cd2a:	85 c0                	test   eax,eax
c001cd2c:	75 33                	jne    c001cd61 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001cd2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd32:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cd38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd3c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cd43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd47:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cd4a:	83 f8 01             	cmp    eax,0x1
c001cd4d:	74 21                	je     c001cd70 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001cd4f:	83 ec 0c             	sub    esp,0xc
c001cd52:	68 a0 e0 01 c0       	push   0xc001e0a0
c001cd57:	e8 67 35 ff ff       	call   c00102c3 <KePanic(char const*)>
c001cd5c:	83 c4 10             	add    esp,0x10
c001cd5f:	eb 0f                	jmp    c001cd70 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001cd61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd65:	8b 00                	mov    eax,DWORD PTR [eax]
c001cd67:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001cd6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd6e:	89 10                	mov    DWORD PTR [eax],edx
c001cd70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cd77:	8d 50 ff             	lea    edx,[eax-0x1]
c001cd7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd7e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cd81:	83 c4 0c             	add    esp,0xc
c001cd84:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001cd86 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001cd86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cd8a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cd8d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001cd8e <DriverlessDevice::~DriverlessDevice()>:
c001cd8e:	ba 1c e7 01 c0       	mov    edx,0xc001e71c
c001cd93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd97:	89 10                	mov    DWORD PTR [eax],edx
c001cd99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd9d:	50                   	push   eax
c001cd9e:	e8 57 eb fe ff       	call   c000b8fa <Device::~Device()>
c001cda3:	83 c4 04             	add    esp,0x4
c001cda6:	90                   	nop
c001cda7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001cda8 <DriverlessDevice::~DriverlessDevice()>:
c001cda8:	83 ec 0c             	sub    esp,0xc
c001cdab:	83 ec 0c             	sub    esp,0xc
c001cdae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdb2:	e8 d7 ff ff ff       	call   c001cd8e <DriverlessDevice::~DriverlessDevice()>
c001cdb7:	83 c4 10             	add    esp,0x10
c001cdba:	83 ec 08             	sub    esp,0x8
c001cdbd:	68 58 01 00 00       	push   0x158
c001cdc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdc6:	e8 f9 d6 fe ff       	call   c000a4c4 <operator delete(void*, unsigned long)>
c001cdcb:	83 c4 10             	add    esp,0x10
c001cdce:	83 c4 0c             	add    esp,0xc
c001cdd1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001cdd2 <LinkedList<Device>::addElement(Device*)>:
c001cdd2:	83 ec 0c             	sub    esp,0xc
c001cdd5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001cdda:	75 10                	jne    c001cdec <LinkedList<Device>::addElement(Device*)+0x1a>
c001cddc:	83 ec 0c             	sub    esp,0xc
c001cddf:	68 44 e0 01 c0       	push   0xc001e044
c001cde4:	e8 da 34 ff ff       	call   c00102c3 <KePanic(char const*)>
c001cde9:	83 c4 10             	add    esp,0x10
c001cdec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdf0:	8b 00                	mov    eax,DWORD PTR [eax]
c001cdf2:	85 c0                	test   eax,eax
c001cdf4:	74 3a                	je     c001ce30 <LinkedList<Device>::addElement(Device*)+0x5e>
c001cdf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdfa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cdfd:	85 c0                	test   eax,eax
c001cdff:	74 2f                	je     c001ce30 <LinkedList<Device>::addElement(Device*)+0x5e>
c001ce01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce05:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ce08:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ce0c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001ce12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce16:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ce1a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ce1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce21:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ce24:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ce2e:	eb 68                	jmp    c001ce98 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ce30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce34:	8b 00                	mov    eax,DWORD PTR [eax]
c001ce36:	85 c0                	test   eax,eax
c001ce38:	75 4e                	jne    c001ce88 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ce3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ce41:	85 c0                	test   eax,eax
c001ce43:	75 43                	jne    c001ce88 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ce45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ce4d:	89 10                	mov    DWORD PTR [eax],edx
c001ce4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce53:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ce57:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ce5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ce61:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ce6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce6f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ce72:	85 c0                	test   eax,eax
c001ce74:	74 22                	je     c001ce98 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ce76:	83 ec 0c             	sub    esp,0xc
c001ce79:	68 66 e0 01 c0       	push   0xc001e066
c001ce7e:	e8 40 34 ff ff       	call   c00102c3 <KePanic(char const*)>
c001ce83:	83 c4 10             	add    esp,0x10
c001ce86:	eb 10                	jmp    c001ce98 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ce88:	83 ec 0c             	sub    esp,0xc
c001ce8b:	68 70 e0 01 c0       	push   0xc001e070
c001ce90:	e8 2e 34 ff ff       	call   c00102c3 <KePanic(char const*)>
c001ce95:	83 c4 10             	add    esp,0x10
c001ce98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce9c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ce9f:	8d 50 01             	lea    edx,[eax+0x1]
c001cea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cea6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cea9:	90                   	nop
c001ceaa:	83 c4 0c             	add    esp,0xc
c001cead:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001ceae <LinkedList<Device>::LinkedList()>:
c001ceae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ceb2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ceb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cebc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cec3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cec7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cece:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ced2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ced8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cedc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cee3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cee7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ceee:	90                   	nop
c001ceef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001cef0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001cef0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cef4:	8b 00                	mov    eax,DWORD PTR [eax]
c001cef6:	85 c0                	test   eax,eax
c001cef8:	75 0e                	jne    c001cf08 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001cefa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cefe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cf01:	85 c0                	test   eax,eax
c001cf03:	75 03                	jne    c001cf08 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001cf05:	b0 01                	mov    al,0x1
c001cf07:	c3                   	ret    
c001cf08:	b0 00                	mov    al,0x0
c001cf0a:	90                   	nop
c001cf0b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001cf0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001cf0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf10:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf12:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001cf14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001cf14:	83 ec 0c             	sub    esp,0xc
c001cf17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf1b:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf1d:	85 c0                	test   eax,eax
c001cf1f:	75 17                	jne    c001cf38 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001cf21:	83 ec 0c             	sub    esp,0xc
c001cf24:	68 7c e0 01 c0       	push   0xc001e07c
c001cf29:	e8 95 33 ff ff       	call   c00102c3 <KePanic(char const*)>
c001cf2e:	83 c4 10             	add    esp,0x10
c001cf31:	e9 92 00 00 00       	jmp    c001cfc8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001cf36:	66 90                	xchg   ax,ax
c001cf38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cf3f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001cf42:	85 c0                	test   eax,eax
c001cf44:	0f 95 c0             	setne  al
c001cf47:	84 c0                	test   al,al
c001cf49:	74 11                	je     c001cf5c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001cf4b:	83 ec 0c             	sub    esp,0xc
c001cf4e:	68 c7 e0 01 c0       	push   0xc001e0c7
c001cf53:	e8 6b 33 ff ff       	call   c00102c3 <KePanic(char const*)>
c001cf58:	83 c4 10             	add    esp,0x10
c001cf5b:	90                   	nop
c001cf5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf60:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf62:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001cf65:	85 c0                	test   eax,eax
c001cf67:	0f 94 c0             	sete   al
c001cf6a:	84 c0                	test   al,al
c001cf6c:	74 36                	je     c001cfa4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001cf6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf72:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cf78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf7c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cf83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf87:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cf8a:	83 f8 01             	cmp    eax,0x1
c001cf8d:	74 25                	je     c001cfb4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001cf8f:	83 ec 0c             	sub    esp,0xc
c001cf92:	68 a0 e0 01 c0       	push   0xc001e0a0
c001cf97:	e8 27 33 ff ff       	call   c00102c3 <KePanic(char const*)>
c001cf9c:	83 c4 10             	add    esp,0x10
c001cf9f:	eb 13                	jmp    c001cfb4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001cfa1:	8d 76 00             	lea    esi,[esi+0x0]
c001cfa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfa8:	8b 00                	mov    eax,DWORD PTR [eax]
c001cfaa:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001cfad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfb1:	89 10                	mov    DWORD PTR [eax],edx
c001cfb3:	90                   	nop
c001cfb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfb8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cfbb:	8d 50 ff             	lea    edx,[eax-0x1]
c001cfbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfc2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cfc5:	8d 76 00             	lea    esi,[esi+0x0]
c001cfc8:	83 c4 0c             	add    esp,0xc
c001cfcb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001cfcc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001cfcc:	83 ec 0c             	sub    esp,0xc
c001cfcf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001cfd4:	75 12                	jne    c001cfe8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001cfd6:	83 ec 0c             	sub    esp,0xc
c001cfd9:	68 44 e0 01 c0       	push   0xc001e044
c001cfde:	e8 e0 32 ff ff       	call   c00102c3 <KePanic(char const*)>
c001cfe3:	83 c4 10             	add    esp,0x10
c001cfe6:	66 90                	xchg   ax,ax
c001cfe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfec:	8b 00                	mov    eax,DWORD PTR [eax]
c001cfee:	85 c0                	test   eax,eax
c001cff0:	74 36                	je     c001d028 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001cff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cff6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cff9:	85 c0                	test   eax,eax
c001cffb:	74 2b                	je     c001d028 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001cffd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d001:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001d004:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d008:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001d00b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d00f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d013:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d01a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001d01d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001d024:	eb 6a                	jmp    c001d090 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001d026:	66 90                	xchg   ax,ax
c001d028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d02c:	8b 00                	mov    eax,DWORD PTR [eax]
c001d02e:	85 c0                	test   eax,eax
c001d030:	75 4e                	jne    c001d080 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001d032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d036:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001d039:	85 c0                	test   eax,eax
c001d03b:	75 43                	jne    c001d080 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001d03d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d041:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d045:	89 10                	mov    DWORD PTR [eax],edx
c001d047:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d04b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d04f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d056:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001d059:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001d060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d064:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d067:	85 c0                	test   eax,eax
c001d069:	74 25                	je     c001d090 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001d06b:	83 ec 0c             	sub    esp,0xc
c001d06e:	68 66 e0 01 c0       	push   0xc001e066
c001d073:	e8 4b 32 ff ff       	call   c00102c3 <KePanic(char const*)>
c001d078:	83 c4 10             	add    esp,0x10
c001d07b:	eb 13                	jmp    c001d090 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001d07d:	8d 76 00             	lea    esi,[esi+0x0]
c001d080:	83 ec 0c             	sub    esp,0xc
c001d083:	68 70 e0 01 c0       	push   0xc001e070
c001d088:	e8 36 32 ff ff       	call   c00102c3 <KePanic(char const*)>
c001d08d:	83 c4 10             	add    esp,0x10
c001d090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d094:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d097:	8d 50 01             	lea    edx,[eax+0x1]
c001d09a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d09e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d0a1:	90                   	nop
c001d0a2:	83 c4 0c             	add    esp,0xc
c001d0a5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001d0a8 <ACPI::~ACPI()>:
c001d0a8:	83 ec 0c             	sub    esp,0xc
c001d0ab:	ba 84 ec 01 c0       	mov    edx,0xc001ec84
c001d0b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0b4:	89 10                	mov    DWORD PTR [eax],edx
c001d0b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0ba:	83 ec 0c             	sub    esp,0xc
c001d0bd:	50                   	push   eax
c001d0be:	e8 37 e8 fe ff       	call   c000b8fa <Device::~Device()>
c001d0c3:	83 c4 10             	add    esp,0x10
c001d0c6:	90                   	nop
c001d0c7:	83 c4 0c             	add    esp,0xc
c001d0ca:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001d0cc <ACPI::~ACPI()>:
c001d0cc:	83 ec 0c             	sub    esp,0xc
c001d0cf:	83 ec 0c             	sub    esp,0xc
c001d0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0d6:	e8 cd ff ff ff       	call   c001d0a8 <ACPI::~ACPI()>
c001d0db:	83 c4 10             	add    esp,0x10
c001d0de:	83 ec 08             	sub    esp,0x8
c001d0e1:	68 64 12 00 00       	push   0x1264
c001d0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0ea:	e8 d5 d3 fe ff       	call   c000a4c4 <operator delete(void*, unsigned long)>
c001d0ef:	83 c4 10             	add    esp,0x10
c001d0f2:	83 c4 0c             	add    esp,0xc
c001d0f5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001d0f8 <LinkedList<Device>::~LinkedList()>:
c001d0f8:	90                   	nop
c001d0f9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001d0fc <LinkedList<Device>::isEmpty()>:
c001d0fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d100:	8b 00                	mov    eax,DWORD PTR [eax]
c001d102:	85 c0                	test   eax,eax
c001d104:	75 0e                	jne    c001d114 <LinkedList<Device>::isEmpty()+0x18>
c001d106:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d10a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001d10d:	85 c0                	test   eax,eax
c001d10f:	75 03                	jne    c001d114 <LinkedList<Device>::isEmpty()+0x18>
c001d111:	b0 01                	mov    al,0x1
c001d113:	c3                   	ret    
c001d114:	b0 00                	mov    al,0x0
c001d116:	90                   	nop
c001d117:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001d118 <LinkedList<Device>::getFirstElement()>:
c001d118:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d11c:	8b 00                	mov    eax,DWORD PTR [eax]
c001d11e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001d120 <LinkedList<Device>::removeFirst()>:
c001d120:	83 ec 0c             	sub    esp,0xc
c001d123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d127:	8b 00                	mov    eax,DWORD PTR [eax]
c001d129:	85 c0                	test   eax,eax
c001d12b:	75 17                	jne    c001d144 <LinkedList<Device>::removeFirst()+0x24>
c001d12d:	83 ec 0c             	sub    esp,0xc
c001d130:	68 7c e0 01 c0       	push   0xc001e07c
c001d135:	e8 89 31 ff ff       	call   c00102c3 <KePanic(char const*)>
c001d13a:	83 c4 10             	add    esp,0x10
c001d13d:	e9 92 00 00 00       	jmp    c001d1d4 <LinkedList<Device>::removeFirst()+0xb4>
c001d142:	66 90                	xchg   ax,ax
c001d144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d148:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001d14b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001d151:	85 c0                	test   eax,eax
c001d153:	74 13                	je     c001d168 <LinkedList<Device>::removeFirst()+0x48>
c001d155:	83 ec 0c             	sub    esp,0xc
c001d158:	68 c7 e0 01 c0       	push   0xc001e0c7
c001d15d:	e8 61 31 ff ff       	call   c00102c3 <KePanic(char const*)>
c001d162:	83 c4 10             	add    esp,0x10
c001d165:	8d 76 00             	lea    esi,[esi+0x0]
c001d168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d16c:	8b 00                	mov    eax,DWORD PTR [eax]
c001d16e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001d174:	85 c0                	test   eax,eax
c001d176:	75 34                	jne    c001d1ac <LinkedList<Device>::removeFirst()+0x8c>
c001d178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d17c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001d182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d186:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d18d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d191:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d194:	83 f8 01             	cmp    eax,0x1
c001d197:	74 27                	je     c001d1c0 <LinkedList<Device>::removeFirst()+0xa0>
c001d199:	83 ec 0c             	sub    esp,0xc
c001d19c:	68 a0 e0 01 c0       	push   0xc001e0a0
c001d1a1:	e8 1d 31 ff ff       	call   c00102c3 <KePanic(char const*)>
c001d1a6:	83 c4 10             	add    esp,0x10
c001d1a9:	eb 15                	jmp    c001d1c0 <LinkedList<Device>::removeFirst()+0xa0>
c001d1ab:	90                   	nop
c001d1ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1b0:	8b 00                	mov    eax,DWORD PTR [eax]
c001d1b2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001d1b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1bc:	89 10                	mov    DWORD PTR [eax],edx
c001d1be:	66 90                	xchg   ax,ax
c001d1c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d1c7:	8d 50 ff             	lea    edx,[eax-0x1]
c001d1ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1ce:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d1d1:	8d 76 00             	lea    esi,[esi+0x0]
c001d1d4:	83 c4 0c             	add    esp,0xc
c001d1d7:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001d1d8 <CPU::~CPU()>:
c001d1d8:	83 ec 0c             	sub    esp,0xc
c001d1db:	ba 20 ee 01 c0       	mov    edx,0xc001ee20
c001d1e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1e4:	89 10                	mov    DWORD PTR [eax],edx
c001d1e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1ea:	83 ec 0c             	sub    esp,0xc
c001d1ed:	50                   	push   eax
c001d1ee:	e8 07 e7 fe ff       	call   c000b8fa <Device::~Device()>
c001d1f3:	83 c4 10             	add    esp,0x10
c001d1f6:	90                   	nop
c001d1f7:	83 c4 0c             	add    esp,0xc
c001d1fa:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001d1fc <CPU::~CPU()>:
c001d1fc:	83 ec 0c             	sub    esp,0xc
c001d1ff:	83 ec 0c             	sub    esp,0xc
c001d202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d206:	e8 cd ff ff ff       	call   c001d1d8 <CPU::~CPU()>
c001d20b:	83 c4 10             	add    esp,0x10
c001d20e:	83 ec 08             	sub    esp,0x8
c001d211:	68 94 11 00 00       	push   0x1194
c001d216:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d21a:	e8 a5 d2 fe ff       	call   c000a4c4 <operator delete(void*, unsigned long)>
c001d21f:	83 c4 10             	add    esp,0x10
c001d222:	83 c4 0c             	add    esp,0xc
c001d225:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001d228 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001d228:	90                   	nop
c001d229:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001d22c <ThreadControlBlock::ThreadControlBlock()>:
c001d22c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d230:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001d237:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d23b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001d242:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d246:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001d24d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d251:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001d258:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d25c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001d263:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d267:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001d26b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d26f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001d273:	90                   	nop
c001d274:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001d278 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001d278:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d27c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001d282:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d286:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d28d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d291:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d298:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d29c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001d2a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2a6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d2ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2b1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d2b8:	90                   	nop
c001d2b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001d2bc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001d2bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d2c0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001d2c3:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001d2c4 <PCI::~PCI()>:
c001d2c4:	83 ec 0c             	sub    esp,0xc
c001d2c7:	ba c0 fa 01 c0       	mov    edx,0xc001fac0
c001d2cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2d0:	89 10                	mov    DWORD PTR [eax],edx
c001d2d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2d6:	83 ec 0c             	sub    esp,0xc
c001d2d9:	50                   	push   eax
c001d2da:	e8 a5 e0 fe ff       	call   c000b384 <Bus::~Bus()>
c001d2df:	83 c4 10             	add    esp,0x10
c001d2e2:	90                   	nop
c001d2e3:	83 c4 0c             	add    esp,0xc
c001d2e6:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001d2e8 <PCI::~PCI()>:
c001d2e8:	83 ec 0c             	sub    esp,0xc
c001d2eb:	83 ec 0c             	sub    esp,0xc
c001d2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d2f2:	e8 cd ff ff ff       	call   c001d2c4 <PCI::~PCI()>
c001d2f7:	83 c4 10             	add    esp,0x10
c001d2fa:	83 ec 08             	sub    esp,0x8
c001d2fd:	68 5c 01 00 00       	push   0x15c
c001d302:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d306:	e8 b9 d1 fe ff       	call   c000a4c4 <operator delete(void*, unsigned long)>
c001d30b:	83 c4 10             	add    esp,0x10
c001d30e:	83 c4 0c             	add    esp,0xc
c001d311:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001d312 <IDE::~IDE()>:
c001d312:	83 ec 0c             	sub    esp,0xc
c001d315:	ba 74 fb 01 c0       	mov    edx,0xc001fb74
c001d31a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d31e:	89 10                	mov    DWORD PTR [eax],edx
c001d320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d324:	83 ec 0c             	sub    esp,0xc
c001d327:	50                   	push   eax
c001d328:	e8 47 ea fe ff       	call   c000bd74 <HardDiskController::~HardDiskController()>
c001d32d:	83 c4 10             	add    esp,0x10
c001d330:	90                   	nop
c001d331:	83 c4 0c             	add    esp,0xc
c001d334:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001d336 <IDE::~IDE()>:
c001d336:	83 ec 0c             	sub    esp,0xc
c001d339:	83 ec 0c             	sub    esp,0xc
c001d33c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d340:	e8 cd ff ff ff       	call   c001d312 <IDE::~IDE()>
c001d345:	83 c4 10             	add    esp,0x10
c001d348:	83 ec 08             	sub    esp,0x8
c001d34b:	68 70 02 00 00       	push   0x270
c001d350:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d354:	e8 6b d1 fe ff       	call   c000a4c4 <operator delete(void*, unsigned long)>
c001d359:	83 c4 10             	add    esp,0x10
c001d35c:	83 c4 0c             	add    esp,0xc
c001d35f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001d360 <SATABus::~SATABus()>:
c001d360:	83 ec 0c             	sub    esp,0xc
c001d363:	ba c4 fb 01 c0       	mov    edx,0xc001fbc4
c001d368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d36c:	89 10                	mov    DWORD PTR [eax],edx
c001d36e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d372:	83 ec 0c             	sub    esp,0xc
c001d375:	50                   	push   eax
c001d376:	e8 f9 e9 fe ff       	call   c000bd74 <HardDiskController::~HardDiskController()>
c001d37b:	83 c4 10             	add    esp,0x10
c001d37e:	90                   	nop
c001d37f:	83 c4 0c             	add    esp,0xc
c001d382:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001d384 <SATABus::~SATABus()>:
c001d384:	83 ec 0c             	sub    esp,0xc
c001d387:	83 ec 0c             	sub    esp,0xc
c001d38a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d38e:	e8 cd ff ff ff       	call   c001d360 <SATABus::~SATABus()>
c001d393:	83 c4 10             	add    esp,0x10
c001d396:	83 ec 08             	sub    esp,0x8
c001d399:	68 64 01 00 00       	push   0x164
c001d39e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3a2:	e8 1d d1 fe ff       	call   c000a4c4 <operator delete(void*, unsigned long)>
c001d3a7:	83 c4 10             	add    esp,0x10
c001d3aa:	83 c4 0c             	add    esp,0xc
c001d3ad:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001d3ae <ATA::~ATA()>:
c001d3ae:	83 ec 0c             	sub    esp,0xc
c001d3b1:	ba 04 fc 01 c0       	mov    edx,0xc001fc04
c001d3b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3ba:	89 10                	mov    DWORD PTR [eax],edx
c001d3bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3c0:	83 ec 0c             	sub    esp,0xc
c001d3c3:	50                   	push   eax
c001d3c4:	e8 8d ea fe ff       	call   c000be56 <PhysicalDisk::~PhysicalDisk()>
c001d3c9:	83 c4 10             	add    esp,0x10
c001d3cc:	90                   	nop
c001d3cd:	83 c4 0c             	add    esp,0xc
c001d3d0:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001d3d2 <ATA::~ATA()>:
c001d3d2:	83 ec 0c             	sub    esp,0xc
c001d3d5:	83 ec 0c             	sub    esp,0xc
c001d3d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3dc:	e8 cd ff ff ff       	call   c001d3ae <ATA::~ATA()>
c001d3e1:	83 c4 10             	add    esp,0x10
c001d3e4:	83 ec 08             	sub    esp,0x8
c001d3e7:	68 7c 01 00 00       	push   0x17c
c001d3ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3f0:	e8 cf d0 fe ff       	call   c000a4c4 <operator delete(void*, unsigned long)>
c001d3f5:	83 c4 10             	add    esp,0x10
c001d3f8:	83 c4 0c             	add    esp,0xc
c001d3fb:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001d3fc <ATAPI::~ATAPI()>:
c001d3fc:	83 ec 0c             	sub    esp,0xc
c001d3ff:	ba 4c fc 01 c0       	mov    edx,0xc001fc4c
c001d404:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d408:	89 10                	mov    DWORD PTR [eax],edx
c001d40a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d40e:	83 ec 0c             	sub    esp,0xc
c001d411:	50                   	push   eax
c001d412:	e8 3f ea fe ff       	call   c000be56 <PhysicalDisk::~PhysicalDisk()>
c001d417:	83 c4 10             	add    esp,0x10
c001d41a:	90                   	nop
c001d41b:	83 c4 0c             	add    esp,0xc
c001d41e:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001d420 <ATAPI::~ATAPI()>:
c001d420:	83 ec 0c             	sub    esp,0xc
c001d423:	83 ec 0c             	sub    esp,0xc
c001d426:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d42a:	e8 cd ff ff ff       	call   c001d3fc <ATAPI::~ATAPI()>
c001d42f:	83 c4 10             	add    esp,0x10
c001d432:	83 ec 08             	sub    esp,0x8
c001d435:	68 84 01 00 00       	push   0x184
c001d43a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d43e:	e8 81 d0 fe ff       	call   c000a4c4 <operator delete(void*, unsigned long)>
c001d443:	83 c4 10             	add    esp,0x10
c001d446:	83 c4 0c             	add    esp,0xc
c001d449:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001d44a <SATA::~SATA()>:
c001d44a:	83 ec 0c             	sub    esp,0xc
c001d44d:	ba 00 fd 01 c0       	mov    edx,0xc001fd00
c001d452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d456:	89 10                	mov    DWORD PTR [eax],edx
c001d458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d45c:	83 ec 0c             	sub    esp,0xc
c001d45f:	50                   	push   eax
c001d460:	e8 f1 e9 fe ff       	call   c000be56 <PhysicalDisk::~PhysicalDisk()>
c001d465:	83 c4 10             	add    esp,0x10
c001d468:	90                   	nop
c001d469:	83 c4 0c             	add    esp,0xc
c001d46c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001d46e <SATA::~SATA()>:
c001d46e:	83 ec 0c             	sub    esp,0xc
c001d471:	83 ec 0c             	sub    esp,0xc
c001d474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d478:	e8 cd ff ff ff       	call   c001d44a <SATA::~SATA()>
c001d47d:	83 c4 10             	add    esp,0x10
c001d480:	83 ec 08             	sub    esp,0x8
c001d483:	68 7c 01 00 00       	push   0x17c
c001d488:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d48c:	e8 33 d0 fe ff       	call   c000a4c4 <operator delete(void*, unsigned long)>
c001d491:	83 c4 10             	add    esp,0x10
c001d494:	83 c4 0c             	add    esp,0xc
c001d497:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001d498 <SATAPI::~SATAPI()>:
c001d498:	83 ec 0c             	sub    esp,0xc
c001d49b:	ba 10 fe 01 c0       	mov    edx,0xc001fe10
c001d4a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4a4:	89 10                	mov    DWORD PTR [eax],edx
c001d4a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4aa:	83 ec 0c             	sub    esp,0xc
c001d4ad:	50                   	push   eax
c001d4ae:	e8 a3 e9 fe ff       	call   c000be56 <PhysicalDisk::~PhysicalDisk()>
c001d4b3:	83 c4 10             	add    esp,0x10
c001d4b6:	90                   	nop
c001d4b7:	83 c4 0c             	add    esp,0xc
c001d4ba:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001d4bc <SATAPI::~SATAPI()>:
c001d4bc:	83 ec 0c             	sub    esp,0xc
c001d4bf:	83 ec 0c             	sub    esp,0xc
c001d4c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4c6:	e8 cd ff ff ff       	call   c001d498 <SATAPI::~SATAPI()>
c001d4cb:	83 c4 10             	add    esp,0x10
c001d4ce:	83 ec 08             	sub    esp,0x8
c001d4d1:	68 84 01 00 00       	push   0x184
c001d4d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4da:	e8 e5 cf fe ff       	call   c000a4c4 <operator delete(void*, unsigned long)>
c001d4df:	83 c4 10             	add    esp,0x10
c001d4e2:	83 c4 0c             	add    esp,0xc
c001d4e5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001d4e6 <IOAPIC::~IOAPIC()>:
c001d4e6:	83 ec 0c             	sub    esp,0xc
c001d4e9:	ba 50 fe 01 c0       	mov    edx,0xc001fe50
c001d4ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4f2:	89 10                	mov    DWORD PTR [eax],edx
c001d4f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4f8:	83 ec 0c             	sub    esp,0xc
c001d4fb:	50                   	push   eax
c001d4fc:	e8 f9 e3 fe ff       	call   c000b8fa <Device::~Device()>
c001d501:	83 c4 10             	add    esp,0x10
c001d504:	90                   	nop
c001d505:	83 c4 0c             	add    esp,0xc
c001d508:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001d50a <IOAPIC::~IOAPIC()>:
c001d50a:	83 ec 0c             	sub    esp,0xc
c001d50d:	83 ec 0c             	sub    esp,0xc
c001d510:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d514:	e8 cd ff ff ff       	call   c001d4e6 <IOAPIC::~IOAPIC()>
c001d519:	83 c4 10             	add    esp,0x10
c001d51c:	83 ec 08             	sub    esp,0x8
c001d51f:	68 68 01 00 00       	push   0x168
c001d524:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d528:	e8 97 cf fe ff       	call   c000a4c4 <operator delete(void*, unsigned long)>
c001d52d:	83 c4 10             	add    esp,0x10
c001d530:	83 c4 0c             	add    esp,0xc
c001d533:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001d534 <APICTimer::~APICTimer()>:
c001d534:	83 ec 0c             	sub    esp,0xc
c001d537:	ba 98 fe 01 c0       	mov    edx,0xc001fe98
c001d53c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d540:	89 10                	mov    DWORD PTR [eax],edx
c001d542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d546:	83 ec 0c             	sub    esp,0xc
c001d549:	50                   	push   eax
c001d54a:	e8 d9 fc fe ff       	call   c000d228 <Timer::~Timer()>
c001d54f:	83 c4 10             	add    esp,0x10
c001d552:	90                   	nop
c001d553:	83 c4 0c             	add    esp,0xc
c001d556:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001d558 <APICTimer::~APICTimer()>:
c001d558:	83 ec 0c             	sub    esp,0xc
c001d55b:	83 ec 0c             	sub    esp,0xc
c001d55e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d562:	e8 cd ff ff ff       	call   c001d534 <APICTimer::~APICTimer()>
c001d567:	83 c4 10             	add    esp,0x10
c001d56a:	83 ec 08             	sub    esp,0x8
c001d56d:	68 60 01 00 00       	push   0x160
c001d572:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d576:	e8 49 cf fe ff       	call   c000a4c4 <operator delete(void*, unsigned long)>
c001d57b:	83 c4 10             	add    esp,0x10
c001d57e:	83 c4 0c             	add    esp,0xc
c001d581:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001d584 <PIT::~PIT()>:
c001d584:	83 ec 0c             	sub    esp,0xc
c001d587:	ba e8 fe 01 c0       	mov    edx,0xc001fee8
c001d58c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d590:	89 10                	mov    DWORD PTR [eax],edx
c001d592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d596:	83 ec 0c             	sub    esp,0xc
c001d599:	50                   	push   eax
c001d59a:	e8 89 fc fe ff       	call   c000d228 <Timer::~Timer()>
c001d59f:	83 c4 10             	add    esp,0x10
c001d5a2:	90                   	nop
c001d5a3:	83 c4 0c             	add    esp,0xc
c001d5a6:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001d5a8 <PIT::~PIT()>:
c001d5a8:	83 ec 0c             	sub    esp,0xc
c001d5ab:	83 ec 0c             	sub    esp,0xc
c001d5ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d5b2:	e8 cd ff ff ff       	call   c001d584 <PIT::~PIT()>
c001d5b7:	83 c4 10             	add    esp,0x10
c001d5ba:	83 ec 08             	sub    esp,0x8
c001d5bd:	68 5c 01 00 00       	push   0x15c
c001d5c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d5c6:	e8 f9 ce fe ff       	call   c000a4c4 <operator delete(void*, unsigned long)>
c001d5cb:	83 c4 10             	add    esp,0x10
c001d5ce:	83 c4 0c             	add    esp,0xc
c001d5d1:	c3                   	ret    

Disassembly of section userkernel:

c0021000 <KiDefaultSignalHandlerAbort(int)>:
c0021000:	57                   	push   edi
c0021001:	b9 07 00 00 00       	mov    ecx,0x7
c0021006:	56                   	push   esi
c0021007:	be 11 ef 01 c0       	mov    esi,0xc001ef11
c002100c:	83 ec 24             	sub    esp,0x24
c002100f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0021013:	fc                   	cld    
c0021014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002101a:	50                   	push   eax
c002101b:	6a 00                	push   0x0
c002101d:	6a 38                	push   0x38
c002101f:	6a 01                	push   0x1
c0021021:	e8 2c 00 00 00       	call   c0021052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0021026:	83 c4 34             	add    esp,0x34
c0021029:	5e                   	pop    esi
c002102a:	5f                   	pop    edi
c002102b:	c3                   	ret    

c002102c <KiDefaultSignalHandlerTerminate(int)>:
c002102c:	57                   	push   edi
c002102d:	b9 08 00 00 00       	mov    ecx,0x8
c0021032:	56                   	push   esi
c0021033:	be 2d ef 01 c0       	mov    esi,0xc001ef2d
c0021038:	83 ec 24             	sub    esp,0x24
c002103b:	89 e7                	mov    edi,esp
c002103d:	fc                   	cld    
c002103e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021040:	54                   	push   esp
c0021041:	6a 00                	push   0x0
c0021043:	6a 37                	push   0x37
c0021045:	6a 01                	push   0x1
c0021047:	e8 06 00 00 00       	call   c0021052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002104c:	83 c4 34             	add    esp,0x34
c002104f:	5e                   	pop    esi
c0021050:	5f                   	pop    edi
c0021051:	c3                   	ret    

c0021052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0021052:	53                   	push   ebx
c0021053:	83 ec 10             	sub    esp,0x10
c0021056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002105a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002105e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021066:	cd 60                	int    0x60
c0021068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002106c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021078:	83 c4 10             	add    esp,0x10
c002107b:	5b                   	pop    ebx
c002107c:	c3                   	ret    

Disassembly of section align_previous:

c0022000 <DO_NOT_DELETE()>:
c0022000:	c3                   	ret    
