
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 9f 78 00 00       	call   c00078bf <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 a8 1a 02 c0       	mov    eax,0xc0021aa8
c0000025:	3d a8 1a 02 c0       	cmp    eax,0xc0021aa8
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 a8 1a 02 c0       	push   0xc0021aa8
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 a8 1a 02 c0       	mov    eax,0xc0021aa8
c0000051:	2d a8 1a 02 c0       	sub    eax,0xc0021aa8
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 a8 1a 02 c0       	push   0xc0021aa8
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 30 02 c0 00 	cmp    BYTE PTR ds:0xc00230c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 28 ea 01 c0       	mov    ebx,0xc001ea28
c0000097:	81 eb 24 ea 01 c0    	sub    ebx,0xc001ea24
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 24 ea 01 c0       	mov    esi,0xc001ea24
c00000a6:	a1 c4 30 02 c0       	mov    eax,ds:0xc00230c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 30 02 c0       	mov    ds:0xc00230c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 30 02 c0       	mov    eax,ds:0xc00230c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 a8 1a 02 c0       	push   0xc0021aa8
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 30 02 c0 01 	mov    BYTE PTR ds:0xc00230c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 30 02 c0       	push   0xc00230c8
c0000108:	68 a8 1a 02 c0       	push   0xc0021aa8
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 ef 3f 01 00       	call   c001429c <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 05 a1 00 00       	call   c000a3ca <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 cd 3f 01 00       	call   c001429c <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 d6 44 01 00       	call   c00147c4 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 4d 4b 01 00       	call   c0014e44 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 3e 02 c0 	lgdtd  ds:0xc0023ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 33 00 01 00       	jmp    c00103b2 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 1c                	je     c00003ae <memcmp+0x2e>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000396:	38 cb                	cmp    bl,cl
c0000398:	75 26                	jne    c00003c0 <memcmp+0x40>
c000039a:	01 c6                	add    esi,eax
c000039c:	eb 0a                	jmp    c00003a8 <memcmp+0x28>
c000039e:	66 90                	xchg   ax,ax
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a4:	38 d9                	cmp    cl,bl
c00003a6:	75 18                	jne    c00003c0 <memcmp+0x40>
c00003a8:	40                   	inc    eax
c00003a9:	42                   	inc    edx
c00003aa:	39 f0                	cmp    eax,esi
c00003ac:	75 f2                	jne    c00003a0 <memcmp+0x20>
c00003ae:	31 c0                	xor    eax,eax
c00003b0:	5b                   	pop    ebx
c00003b1:	5e                   	pop    esi
c00003b2:	c3                   	ret    
c00003b3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003c0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003c6:	31 c0                	xor    eax,eax
c00003c8:	88 c8                	mov    al,cl
c00003ca:	29 d8                	sub    eax,ebx
c00003cc:	5b                   	pop    ebx
c00003cd:	5e                   	pop    esi
c00003ce:	c3                   	ret    
c00003cf:	90                   	nop

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 98 00 00 00    	jae    c0000480 <memmove+0xb0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 7c 00 00 00    	je     c000046c <memmove+0x9c>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	09 ce                	or     esi,ecx
c0000404:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000407:	89 f0                	mov    eax,esi
c0000409:	83 f9 0c             	cmp    ecx,0xc
c000040c:	0f 97 c1             	seta   cl
c000040f:	84 c8                	test   al,cl
c0000411:	0f 84 89 00 00 00    	je     c00004a0 <memmove+0xd0>
c0000417:	89 e9                	mov    ecx,ebp
c0000419:	09 d9                	or     ecx,ebx
c000041b:	83 e1 03             	and    ecx,0x3
c000041e:	0f 85 7c 00 00 00    	jne    c00004a0 <memmove+0xd0>
c0000424:	89 d7                	mov    edi,edx
c0000426:	89 d9                	mov    ecx,ebx
c0000428:	83 e7 fc             	and    edi,0xfffffffc
c000042b:	89 ee                	mov    esi,ebp
c000042d:	01 df                	add    edi,ebx
c000042f:	90                   	nop
c0000430:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000432:	83 c6 04             	add    esi,0x4
c0000435:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000438:	83 c1 04             	add    ecx,0x4
c000043b:	39 f9                	cmp    ecx,edi
c000043d:	75 f1                	jne    c0000430 <memmove+0x60>
c000043f:	89 d1                	mov    ecx,edx
c0000441:	89 d7                	mov    edi,edx
c0000443:	83 e1 fc             	and    ecx,0xfffffffc
c0000446:	29 cf                	sub    edi,ecx
c0000448:	01 cb                	add    ebx,ecx
c000044a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000044e:	39 ca                	cmp    edx,ecx
c0000450:	74 1a                	je     c000046c <memmove+0x9c>
c0000452:	8a 03                	mov    al,BYTE PTR [ebx]
c0000454:	83 ff 01             	cmp    edi,0x1
c0000457:	88 06                	mov    BYTE PTR [esi],al
c0000459:	74 11                	je     c000046c <memmove+0x9c>
c000045b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000045e:	83 ff 02             	cmp    edi,0x2
c0000461:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000464:	74 06                	je     c000046c <memmove+0x9c>
c0000466:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000469:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000046c:	5b                   	pop    ebx
c000046d:	89 e8                	mov    eax,ebp
c000046f:	5e                   	pop    esi
c0000470:	5f                   	pop    edi
c0000471:	5d                   	pop    ebp
c0000472:	c3                   	ret    
c0000473:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000479:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000480:	76 ea                	jbe    c000046c <memmove+0x9c>
c0000482:	85 d2                	test   edx,edx
c0000484:	74 e6                	je     c000046c <memmove+0x9c>
c0000486:	4b                   	dec    ebx
c0000487:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000048a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000490:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000493:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000496:	4a                   	dec    edx
c0000497:	75 f7                	jne    c0000490 <memmove+0xc0>
c0000499:	5b                   	pop    ebx
c000049a:	89 e8                	mov    eax,ebp
c000049c:	5e                   	pop    esi
c000049d:	5f                   	pop    edi
c000049e:	5d                   	pop    ebp
c000049f:	c3                   	ret    
c00004a0:	01 ea                	add    edx,ebp
c00004a2:	89 e9                	mov    ecx,ebp
c00004a4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004aa:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004b0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004b2:	41                   	inc    ecx
c00004b3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004b6:	43                   	inc    ebx
c00004b7:	39 d1                	cmp    ecx,edx
c00004b9:	75 f5                	jne    c00004b0 <memmove+0xe0>
c00004bb:	eb af                	jmp    c000046c <memmove+0x9c>
c00004bd:	8d 76 00             	lea    esi,[esi+0x0]

c00004c0 <memset>:
c00004c0:	57                   	push   edi
c00004c1:	53                   	push   ebx
c00004c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004c6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004ca:	85 d2                	test   edx,edx
c00004cc:	74 1f                	je     c00004ed <memset+0x2d>
c00004ce:	31 c0                	xor    eax,eax
c00004d0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004d4:	88 c4                	mov    ah,al
c00004d6:	89 c1                	mov    ecx,eax
c00004d8:	c1 e1 10             	shl    ecx,0x10
c00004db:	09 c8                	or     eax,ecx
c00004dd:	83 fa 04             	cmp    edx,0x4
c00004e0:	73 1e                	jae    c0000500 <memset+0x40>
c00004e2:	85 d2                	test   edx,edx
c00004e4:	74 07                	je     c00004ed <memset+0x2d>
c00004e6:	88 03                	mov    BYTE PTR [ebx],al
c00004e8:	f6 c2 02             	test   dl,0x2
c00004eb:	75 30                	jne    c000051d <memset+0x5d>
c00004ed:	89 d8                	mov    eax,ebx
c00004ef:	5b                   	pop    ebx
c00004f0:	5f                   	pop    edi
c00004f1:	c3                   	ret    
c00004f2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000500:	89 03                	mov    DWORD PTR [ebx],eax
c0000502:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000505:	89 d9                	mov    ecx,ebx
c0000507:	83 e7 fc             	and    edi,0xfffffffc
c000050a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000050e:	29 f9                	sub    ecx,edi
c0000510:	01 d1                	add    ecx,edx
c0000512:	c1 e9 02             	shr    ecx,0x2
c0000515:	fc                   	cld    
c0000516:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000518:	89 d8                	mov    eax,ebx
c000051a:	5b                   	pop    ebx
c000051b:	5f                   	pop    edi
c000051c:	c3                   	ret    
c000051d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000522:	eb c9                	jmp    c00004ed <memset+0x2d>
c0000524:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000052a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000530 <strlen>:
c0000530:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000534:	31 c0                	xor    eax,eax
c0000536:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000539:	74 15                	je     c0000550 <strlen+0x20>
c000053b:	90                   	nop
c000053c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000540:	40                   	inc    eax
c0000541:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000545:	75 f9                	jne    c0000540 <strlen+0x10>
c0000547:	c3                   	ret    
c0000548:	90                   	nop
c0000549:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000550:	c3                   	ret    
c0000551:	eb 0d                	jmp    c0000560 <strpbrk>
c0000553:	90                   	nop
c0000554:	90                   	nop
c0000555:	90                   	nop
c0000556:	90                   	nop
c0000557:	90                   	nop
c0000558:	90                   	nop
c0000559:	90                   	nop
c000055a:	90                   	nop
c000055b:	90                   	nop
c000055c:	90                   	nop
c000055d:	90                   	nop
c000055e:	90                   	nop
c000055f:	90                   	nop

c0000560 <strpbrk>:
c0000560:	57                   	push   edi
c0000561:	56                   	push   esi
c0000562:	53                   	push   ebx
c0000563:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000567:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000056b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000056d:	84 db                	test   bl,bl
c000056f:	74 21                	je     c0000592 <strpbrk+0x32>
c0000571:	8a 07                	mov    al,BYTE PTR [edi]
c0000573:	84 c0                	test   al,al
c0000575:	74 14                	je     c000058b <strpbrk+0x2b>
c0000577:	38 d8                	cmp    al,bl
c0000579:	74 19                	je     c0000594 <strpbrk+0x34>
c000057b:	89 fa                	mov    edx,edi
c000057d:	eb 05                	jmp    c0000584 <strpbrk+0x24>
c000057f:	90                   	nop
c0000580:	38 d9                	cmp    cl,bl
c0000582:	74 10                	je     c0000594 <strpbrk+0x34>
c0000584:	42                   	inc    edx
c0000585:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000587:	84 c9                	test   cl,cl
c0000589:	75 f5                	jne    c0000580 <strpbrk+0x20>
c000058b:	46                   	inc    esi
c000058c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000058e:	84 db                	test   bl,bl
c0000590:	75 e1                	jne    c0000573 <strpbrk+0x13>
c0000592:	31 f6                	xor    esi,esi
c0000594:	89 f0                	mov    eax,esi
c0000596:	5b                   	pop    ebx
c0000597:	5e                   	pop    esi
c0000598:	5f                   	pop    edi
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005a0 <strtok>:
c00005a0:	56                   	push   esi
c00005a1:	53                   	push   ebx
c00005a2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005a6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005aa:	85 db                	test   ebx,ebx
c00005ac:	75 07                	jne    c00005b5 <strtok+0x15>
c00005ae:	eb 30                	jmp    c00005e0 <strtok+0x40>
c00005b0:	43                   	inc    ebx
c00005b1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005b5:	56                   	push   esi
c00005b6:	53                   	push   ebx
c00005b7:	e8 a4 ff ff ff       	call   c0000560 <strpbrk>
c00005bc:	5a                   	pop    edx
c00005bd:	a3 e0 30 02 c0       	mov    ds:0xc00230e0,eax
c00005c2:	59                   	pop    ecx
c00005c3:	39 d8                	cmp    eax,ebx
c00005c5:	74 e9                	je     c00005b0 <strtok+0x10>
c00005c7:	85 c0                	test   eax,eax
c00005c9:	74 1f                	je     c00005ea <strtok+0x4a>
c00005cb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005ce:	8d 50 01             	lea    edx,[eax+0x1]
c00005d1:	89 d8                	mov    eax,ebx
c00005d3:	89 15 e0 30 02 c0    	mov    DWORD PTR ds:0xc00230e0,edx
c00005d9:	5b                   	pop    ebx
c00005da:	5e                   	pop    esi
c00005db:	c3                   	ret    
c00005dc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005e0:	8b 1d e0 30 02 c0    	mov    ebx,DWORD PTR ds:0xc00230e0
c00005e6:	85 db                	test   ebx,ebx
c00005e8:	75 cb                	jne    c00005b5 <strtok+0x15>
c00005ea:	31 c0                	xor    eax,eax
c00005ec:	5b                   	pop    ebx
c00005ed:	5e                   	pop    esi
c00005ee:	c3                   	ret    
c00005ef:	90                   	nop

c00005f0 <strcpy>:
c00005f0:	53                   	push   ebx
c00005f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00005f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00005f9:	89 c3                	mov    ebx,eax
c00005fb:	8a 11                	mov    dl,BYTE PTR [ecx]
c00005fd:	84 d2                	test   dl,dl
c00005ff:	74 19                	je     c000061a <strcpy+0x2a>
c0000601:	eb 0d                	jmp    c0000610 <strcpy+0x20>
c0000603:	90                   	nop
c0000604:	90                   	nop
c0000605:	90                   	nop
c0000606:	90                   	nop
c0000607:	90                   	nop
c0000608:	90                   	nop
c0000609:	90                   	nop
c000060a:	90                   	nop
c000060b:	90                   	nop
c000060c:	90                   	nop
c000060d:	90                   	nop
c000060e:	90                   	nop
c000060f:	90                   	nop
c0000610:	88 13                	mov    BYTE PTR [ebx],dl
c0000612:	41                   	inc    ecx
c0000613:	43                   	inc    ebx
c0000614:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000616:	84 d2                	test   dl,dl
c0000618:	75 f6                	jne    c0000610 <strcpy+0x20>
c000061a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000061d:	5b                   	pop    ebx
c000061e:	c3                   	ret    
c000061f:	90                   	nop

c0000620 <strncpy>:
c0000620:	57                   	push   edi
c0000621:	56                   	push   esi
c0000622:	53                   	push   ebx
c0000623:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000627:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000062b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000062f:	85 ff                	test   edi,edi
c0000631:	74 3e                	je     c0000671 <strncpy+0x51>
c0000633:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000635:	8d 47 ff             	lea    eax,[edi-0x1]
c0000638:	8d 4a 01             	lea    ecx,[edx+0x1]
c000063b:	88 1a                	mov    BYTE PTR [edx],bl
c000063d:	84 db                	test   bl,bl
c000063f:	74 3f                	je     c0000680 <strncpy+0x60>
c0000641:	85 c0                	test   eax,eax
c0000643:	74 2c                	je     c0000671 <strncpy+0x51>
c0000645:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000648:	8d 47 fe             	lea    eax,[edi-0x2]
c000064b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000064e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000651:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000654:	84 db                	test   bl,bl
c0000656:	75 15                	jne    c000066d <strncpy+0x4d>
c0000658:	eb 26                	jmp    c0000680 <strncpy+0x60>
c000065a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000660:	47                   	inc    edi
c0000661:	41                   	inc    ecx
c0000662:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000665:	48                   	dec    eax
c0000666:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000669:	84 db                	test   bl,bl
c000066b:	74 13                	je     c0000680 <strncpy+0x60>
c000066d:	85 c0                	test   eax,eax
c000066f:	75 ef                	jne    c0000660 <strncpy+0x40>
c0000671:	5b                   	pop    ebx
c0000672:	89 d0                	mov    eax,edx
c0000674:	5e                   	pop    esi
c0000675:	5f                   	pop    edi
c0000676:	c3                   	ret    
c0000677:	89 f6                	mov    esi,esi
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000680:	85 c0                	test   eax,eax
c0000682:	74 ed                	je     c0000671 <strncpy+0x51>
c0000684:	83 f8 04             	cmp    eax,0x4
c0000687:	73 17                	jae    c00006a0 <strncpy+0x80>
c0000689:	85 c0                	test   eax,eax
c000068b:	74 e4                	je     c0000671 <strncpy+0x51>
c000068d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0000690:	a8 02                	test   al,0x2
c0000692:	74 dd                	je     c0000671 <strncpy+0x51>
c0000694:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c000069b:	eb d4                	jmp    c0000671 <strncpy+0x51>
c000069d:	8d 76 00             	lea    esi,[esi+0x0]
c00006a0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006a6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006a9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006b1:	83 e7 fc             	and    edi,0xfffffffc
c00006b4:	29 f9                	sub    ecx,edi
c00006b6:	01 c1                	add    ecx,eax
c00006b8:	c1 e9 02             	shr    ecx,0x2
c00006bb:	fc                   	cld    
c00006bc:	31 c0                	xor    eax,eax
c00006be:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006c0:	89 d0                	mov    eax,edx
c00006c2:	5b                   	pop    ebx
c00006c3:	5e                   	pop    esi
c00006c4:	5f                   	pop    edi
c00006c5:	c3                   	ret    
c00006c6:	8d 76 00             	lea    esi,[esi+0x0]
c00006c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006d0 <strcmp>:
c00006d0:	56                   	push   esi
c00006d1:	53                   	push   ebx
c00006d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006d6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006da:	8a 16                	mov    dl,BYTE PTR [esi]
c00006dc:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006de:	38 d1                	cmp    cl,dl
c00006e0:	75 1d                	jne    c00006ff <strcmp+0x2f>
c00006e2:	84 c9                	test   cl,cl
c00006e4:	74 2a                	je     c0000710 <strcmp+0x40>
c00006e6:	b8 01 00 00 00       	mov    eax,0x1
c00006eb:	eb 08                	jmp    c00006f5 <strcmp+0x25>
c00006ed:	8d 76 00             	lea    esi,[esi+0x0]
c00006f0:	40                   	inc    eax
c00006f1:	84 d2                	test   dl,dl
c00006f3:	74 1b                	je     c0000710 <strcmp+0x40>
c00006f5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00006f8:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c00006fb:	38 ca                	cmp    dl,cl
c00006fd:	74 f1                	je     c00006f0 <strcmp+0x20>
c00006ff:	31 c0                	xor    eax,eax
c0000701:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000707:	88 d0                	mov    al,dl
c0000709:	5b                   	pop    ebx
c000070a:	29 c8                	sub    eax,ecx
c000070c:	5e                   	pop    esi
c000070d:	c3                   	ret    
c000070e:	66 90                	xchg   ax,ax
c0000710:	31 c0                	xor    eax,eax
c0000712:	5b                   	pop    ebx
c0000713:	5e                   	pop    esi
c0000714:	c3                   	ret    
c0000715:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000719:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000720 <strchr>:
c0000720:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000724:	8a 10                	mov    dl,BYTE PTR [eax]
c0000726:	84 d2                	test   dl,dl
c0000728:	74 21                	je     c000074b <strchr+0x2b>
c000072a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000072e:	38 ca                	cmp    dl,cl
c0000730:	75 12                	jne    c0000744 <strchr+0x24>
c0000732:	eb 1a                	jmp    c000074e <strchr+0x2e>
c0000734:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000073a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000740:	38 ca                	cmp    dl,cl
c0000742:	74 09                	je     c000074d <strchr+0x2d>
c0000744:	40                   	inc    eax
c0000745:	8a 10                	mov    dl,BYTE PTR [eax]
c0000747:	84 d2                	test   dl,dl
c0000749:	75 f5                	jne    c0000740 <strchr+0x20>
c000074b:	31 c0                	xor    eax,eax
c000074d:	c3                   	ret    
c000074e:	c3                   	ret    
c000074f:	90                   	nop

c0000750 <strncmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000757:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000075b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000075f:	85 ff                	test   edi,edi
c0000761:	74 2f                	je     c0000792 <strncmp+0x42>
c0000763:	8a 16                	mov    dl,BYTE PTR [esi]
c0000765:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000767:	38 d1                	cmp    cl,dl
c0000769:	75 35                	jne    c00007a0 <strncmp+0x50>
c000076b:	8d 46 01             	lea    eax,[esi+0x1]
c000076e:	84 c9                	test   cl,cl
c0000770:	74 20                	je     c0000792 <strncmp+0x42>
c0000772:	01 fe                	add    esi,edi
c0000774:	eb 17                	jmp    c000078d <strncmp+0x3d>
c0000776:	8d 76 00             	lea    esi,[esi+0x0]
c0000779:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000780:	8a 10                	mov    dl,BYTE PTR [eax]
c0000782:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000784:	38 ca                	cmp    dl,cl
c0000786:	75 18                	jne    c00007a0 <strncmp+0x50>
c0000788:	40                   	inc    eax
c0000789:	84 d2                	test   dl,dl
c000078b:	74 05                	je     c0000792 <strncmp+0x42>
c000078d:	43                   	inc    ebx
c000078e:	39 c6                	cmp    esi,eax
c0000790:	75 ee                	jne    c0000780 <strncmp+0x30>
c0000792:	5b                   	pop    ebx
c0000793:	31 c0                	xor    eax,eax
c0000795:	5e                   	pop    esi
c0000796:	5f                   	pop    edi
c0000797:	c3                   	ret    
c0000798:	90                   	nop
c0000799:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007a0:	5b                   	pop    ebx
c00007a1:	31 c0                	xor    eax,eax
c00007a3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007a9:	88 d0                	mov    al,dl
c00007ab:	5e                   	pop    esi
c00007ac:	29 c8                	sub    eax,ecx
c00007ae:	5f                   	pop    edi
c00007af:	c3                   	ret    

c00007b0 <strcat>:
c00007b0:	56                   	push   esi
c00007b1:	53                   	push   ebx
c00007b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ba:	89 c3                	mov    ebx,eax
c00007bc:	eb 04                	jmp    c00007c2 <strcat+0x12>
c00007be:	66 90                	xchg   ax,ax
c00007c0:	89 d3                	mov    ebx,edx
c00007c2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007c5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007c9:	75 f5                	jne    c00007c0 <strcat+0x10>
c00007cb:	31 d2                	xor    edx,edx
c00007cd:	8d 76 00             	lea    esi,[esi+0x0]
c00007d0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007d3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007d6:	42                   	inc    edx
c00007d7:	84 c9                	test   cl,cl
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x20>
c00007db:	5b                   	pop    ebx
c00007dc:	5e                   	pop    esi
c00007dd:	c3                   	ret    
c00007de:	66 90                	xchg   ax,ax

c00007e0 <strncat>:
c00007e0:	56                   	push   esi
c00007e1:	53                   	push   ebx
c00007e2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007ea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007ee:	85 f6                	test   esi,esi
c00007f0:	74 2e                	je     c0000820 <strncat+0x40>
c00007f2:	89 c2                	mov    edx,eax
c00007f4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00007fa:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000800:	42                   	inc    edx
c0000801:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000805:	75 f9                	jne    c0000800 <strncat+0x20>
c0000807:	01 ce                	add    esi,ecx
c0000809:	eb 0a                	jmp    c0000815 <strncat+0x35>
c000080b:	90                   	nop
c000080c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000810:	39 f1                	cmp    ecx,esi
c0000812:	74 1c                	je     c0000830 <strncat+0x50>
c0000814:	42                   	inc    edx
c0000815:	41                   	inc    ecx
c0000816:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000819:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000081c:	84 db                	test   bl,bl
c000081e:	75 f0                	jne    c0000810 <strncat+0x30>
c0000820:	5b                   	pop    ebx
c0000821:	5e                   	pop    esi
c0000822:	c3                   	ret    
c0000823:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000829:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000830:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000833:	5b                   	pop    ebx
c0000834:	5e                   	pop    esi
c0000835:	c3                   	ret    
c0000836:	8d 76 00             	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000840 <strstr>:
c0000840:	57                   	push   edi
c0000841:	56                   	push   esi
c0000842:	53                   	push   ebx
c0000843:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000847:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000084b:	57                   	push   edi
c000084c:	e8 df fc ff ff       	call   c0000530 <strlen>
c0000851:	59                   	pop    ecx
c0000852:	85 c0                	test   eax,eax
c0000854:	74 3a                	je     c0000890 <strstr+0x50>
c0000856:	89 c6                	mov    esi,eax
c0000858:	eb 16                	jmp    c0000870 <strstr+0x30>
c000085a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000860:	56                   	push   esi
c0000861:	57                   	push   edi
c0000862:	53                   	push   ebx
c0000863:	e8 18 fb ff ff       	call   c0000380 <memcmp>
c0000868:	83 c4 0c             	add    esp,0xc
c000086b:	85 c0                	test   eax,eax
c000086d:	74 21                	je     c0000890 <strstr+0x50>
c000086f:	43                   	inc    ebx
c0000870:	53                   	push   ebx
c0000871:	e8 ba fc ff ff       	call   c0000530 <strlen>
c0000876:	5a                   	pop    edx
c0000877:	39 f0                	cmp    eax,esi
c0000879:	73 e5                	jae    c0000860 <strstr+0x20>
c000087b:	5b                   	pop    ebx
c000087c:	31 c0                	xor    eax,eax
c000087e:	5e                   	pop    esi
c000087f:	5f                   	pop    edi
c0000880:	c3                   	ret    
c0000881:	eb 0d                	jmp    c0000890 <strstr+0x50>
c0000883:	90                   	nop
c0000884:	90                   	nop
c0000885:	90                   	nop
c0000886:	90                   	nop
c0000887:	90                   	nop
c0000888:	90                   	nop
c0000889:	90                   	nop
c000088a:	90                   	nop
c000088b:	90                   	nop
c000088c:	90                   	nop
c000088d:	90                   	nop
c000088e:	90                   	nop
c000088f:	90                   	nop
c0000890:	89 d8                	mov    eax,ebx
c0000892:	5b                   	pop    ebx
c0000893:	5e                   	pop    esi
c0000894:	5f                   	pop    edi
c0000895:	c3                   	ret    
c0000896:	8d 76 00             	lea    esi,[esi+0x0]
c0000899:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008a0 <toupper>:
c00008a0:	31 d2                	xor    edx,edx
c00008a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008a6:	88 c2                	mov    dl,al
c00008a8:	f6 82 40 ea 01 c0 02 	test   BYTE PTR [edx-0x3ffe15c0],0x2
c00008af:	74 03                	je     c00008b4 <toupper+0x14>
c00008b1:	83 e8 20             	sub    eax,0x20
c00008b4:	c3                   	ret    
c00008b5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008c0 <tolower>:
c00008c0:	31 d2                	xor    edx,edx
c00008c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008c6:	88 c2                	mov    dl,al
c00008c8:	f6 82 40 ea 01 c0 01 	test   BYTE PTR [edx-0x3ffe15c0],0x1
c00008cf:	74 03                	je     c00008d4 <tolower+0x14>
c00008d1:	83 c0 20             	add    eax,0x20
c00008d4:	c3                   	ret    
c00008d5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008e0 <simple_strtoul>:
c00008e0:	55                   	push   ebp
c00008e1:	57                   	push   edi
c00008e2:	56                   	push   esi
c00008e3:	53                   	push   ebx
c00008e4:	83 ec 08             	sub    esp,0x8
c00008e7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008eb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ef:	90                   	nop
c00008f0:	31 d2                	xor    edx,edx
c00008f2:	8a 01                	mov    al,BYTE PTR [ecx]
c00008f4:	88 c2                	mov    dl,al
c00008f6:	f6 82 40 ea 01 c0 08 	test   BYTE PTR [edx-0x3ffe15c0],0x8
c00008fd:	75 04                	jne    c0000903 <simple_strtoul+0x23>
c00008ff:	3c 09                	cmp    al,0x9
c0000901:	75 0d                	jne    c0000910 <simple_strtoul+0x30>
c0000903:	41                   	inc    ecx
c0000904:	eb ea                	jmp    c00008f0 <simple_strtoul+0x10>
c0000906:	8d 76 00             	lea    esi,[esi+0x0]
c0000909:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000910:	3c 2d                	cmp    al,0x2d
c0000912:	0f 84 48 01 00 00    	je     c0000a60 <simple_strtoul+0x180>
c0000918:	3c 2b                	cmp    al,0x2b
c000091a:	0f 84 e0 00 00 00    	je     c0000a00 <simple_strtoul+0x120>
c0000920:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000928:	85 f6                	test   esi,esi
c000092a:	0f 85 e1 00 00 00    	jne    c0000a11 <simple_strtoul+0x131>
c0000930:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000933:	80 fa 30             	cmp    dl,0x30
c0000936:	0f 84 75 01 00 00    	je     c0000ab1 <simple_strtoul+0x1d1>
c000093c:	be 0a 00 00 00       	mov    esi,0xa
c0000941:	84 d2                	test   dl,dl
c0000943:	0f 84 9f 01 00 00    	je     c0000ae8 <simple_strtoul+0x208>
c0000949:	31 ed                	xor    ebp,ebp
c000094b:	31 ff                	xor    edi,edi
c000094d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000954:	eb 35                	jmp    c000098b <simple_strtoul+0xab>
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000960:	83 eb 30             	sub    ebx,0x30
c0000963:	39 f3                	cmp    ebx,esi
c0000965:	73 59                	jae    c00009c0 <simple_strtoul+0xe0>
c0000967:	31 d2                	xor    edx,edx
c0000969:	89 d8                	mov    eax,ebx
c000096b:	f7 d0                	not    eax
c000096d:	f7 f6                	div    esi
c000096f:	39 f8                	cmp    eax,edi
c0000971:	0f 82 c9 00 00 00    	jb     c0000a40 <simple_strtoul+0x160>
c0000977:	0f af fe             	imul   edi,esi
c000097a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000981:	01 df                	add    edi,ebx
c0000983:	41                   	inc    ecx
c0000984:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000987:	84 d2                	test   dl,dl
c0000989:	74 35                	je     c00009c0 <simple_strtoul+0xe0>
c000098b:	31 db                	xor    ebx,ebx
c000098d:	88 d3                	mov    bl,dl
c000098f:	f6 83 40 ea 01 c0 04 	test   BYTE PTR [ebx-0x3ffe15c0],0x4
c0000996:	75 c8                	jne    c0000960 <simple_strtoul+0x80>
c0000998:	52                   	push   edx
c0000999:	e8 02 ff ff ff       	call   c00008a0 <toupper>
c000099e:	31 d2                	xor    edx,edx
c00009a0:	5b                   	pop    ebx
c00009a1:	88 c2                	mov    dl,al
c00009a3:	f6 82 40 ea 01 c0 01 	test   BYTE PTR [edx-0x3ffe15c0],0x1
c00009aa:	74 14                	je     c00009c0 <simple_strtoul+0xe0>
c00009ac:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009af:	39 f3                	cmp    ebx,esi
c00009b1:	72 b4                	jb     c0000967 <simple_strtoul+0x87>
c00009b3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009c4:	85 c0                	test   eax,eax
c00009c6:	74 18                	je     c00009e0 <simple_strtoul+0x100>
c00009c8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009cb:	09 f8                	or     eax,edi
c00009cd:	0f 85 7d 00 00 00    	jne    c0000a50 <simple_strtoul+0x170>
c00009d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009db:	31 ff                	xor    edi,edi
c00009dd:	89 30                	mov    DWORD PTR [eax],esi
c00009df:	90                   	nop
c00009e0:	4d                   	dec    ebp
c00009e1:	75 05                	jne    c00009e8 <simple_strtoul+0x108>
c00009e3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009e8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009ed:	75 02                	jne    c00009f1 <simple_strtoul+0x111>
c00009ef:	f7 df                	neg    edi
c00009f1:	83 c4 08             	add    esp,0x8
c00009f4:	89 f8                	mov    eax,edi
c00009f6:	5b                   	pop    ebx
c00009f7:	5e                   	pop    esi
c00009f8:	5f                   	pop    edi
c00009f9:	5d                   	pop    ebp
c00009fa:	c3                   	ret    
c00009fb:	90                   	nop
c00009fc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a00:	41                   	inc    ecx
c0000a01:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a09:	85 f6                	test   esi,esi
c0000a0b:	0f 84 1f ff ff ff    	je     c0000930 <simple_strtoul+0x50>
c0000a11:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a14:	83 f8 22             	cmp    eax,0x22
c0000a17:	77 7b                	ja     c0000a94 <simple_strtoul+0x1b4>
c0000a19:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a1c:	83 fe 08             	cmp    esi,0x8
c0000a1f:	0f 84 b3 00 00 00    	je     c0000ad8 <simple_strtoul+0x1f8>
c0000a25:	83 fe 10             	cmp    esi,0x10
c0000a28:	0f 85 13 ff ff ff    	jne    c0000941 <simple_strtoul+0x61>
c0000a2e:	80 fa 30             	cmp    dl,0x30
c0000a31:	74 3b                	je     c0000a6e <simple_strtoul+0x18e>
c0000a33:	be 10 00 00 00       	mov    esi,0x10
c0000a38:	e9 04 ff ff ff       	jmp    c0000941 <simple_strtoul+0x61>
c0000a3d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a40:	bd 01 00 00 00       	mov    ebp,0x1
c0000a45:	31 ff                	xor    edi,edi
c0000a47:	e9 37 ff ff ff       	jmp    c0000983 <simple_strtoul+0xa3>
c0000a4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a54:	89 08                	mov    DWORD PTR [eax],ecx
c0000a56:	eb 88                	jmp    c00009e0 <simple_strtoul+0x100>
c0000a58:	90                   	nop
c0000a59:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a60:	41                   	inc    ecx
c0000a61:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a69:	e9 ba fe ff ff       	jmp    c0000928 <simple_strtoul+0x48>
c0000a6e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a72:	88 04 24             	mov    BYTE PTR [esp],al
c0000a75:	50                   	push   eax
c0000a76:	e8 45 fe ff ff       	call   c00008c0 <tolower>
c0000a7b:	5e                   	pop    esi
c0000a7c:	83 f8 78             	cmp    eax,0x78
c0000a7f:	0f 84 88 00 00 00    	je     c0000b0d <simple_strtoul+0x22d>
c0000a85:	41                   	inc    ecx
c0000a86:	be 10 00 00 00       	mov    esi,0x10
c0000a8b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a8f:	e9 ad fe ff ff       	jmp    c0000941 <simple_strtoul+0x61>
c0000a94:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000a98:	85 ff                	test   edi,edi
c0000a9a:	74 5e                	je     c0000afa <simple_strtoul+0x21a>
c0000a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aa0:	85 c9                	test   ecx,ecx
c0000aa2:	75 50                	jne    c0000af4 <simple_strtoul+0x214>
c0000aa4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aaa:	31 ff                	xor    edi,edi
c0000aac:	e9 37 ff ff ff       	jmp    c00009e8 <simple_strtoul+0x108>
c0000ab1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ab5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab8:	50                   	push   eax
c0000ab9:	e8 02 fe ff ff       	call   c00008c0 <tolower>
c0000abe:	5d                   	pop    ebp
c0000abf:	83 f8 78             	cmp    eax,0x78
c0000ac2:	74 3d                	je     c0000b01 <simple_strtoul+0x221>
c0000ac4:	41                   	inc    ecx
c0000ac5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ac9:	80 fa 30             	cmp    dl,0x30
c0000acc:	74 13                	je     c0000ae1 <simple_strtoul+0x201>
c0000ace:	be 08 00 00 00       	mov    esi,0x8
c0000ad3:	e9 69 fe ff ff       	jmp    c0000941 <simple_strtoul+0x61>
c0000ad8:	80 fa 30             	cmp    dl,0x30
c0000adb:	0f 85 60 fe ff ff    	jne    c0000941 <simple_strtoul+0x61>
c0000ae1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000ae5:	41                   	inc    ecx
c0000ae6:	eb e6                	jmp    c0000ace <simple_strtoul+0x1ee>
c0000ae8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aec:	85 d2                	test   edx,edx
c0000aee:	74 0a                	je     c0000afa <simple_strtoul+0x21a>
c0000af0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000af4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000af8:	89 30                	mov    DWORD PTR [eax],esi
c0000afa:	31 ff                	xor    edi,edi
c0000afc:	e9 e7 fe ff ff       	jmp    c00009e8 <simple_strtoul+0x108>
c0000b01:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b05:	83 c1 02             	add    ecx,0x2
c0000b08:	e9 21 ff ff ff       	jmp    c0000a2e <simple_strtoul+0x14e>
c0000b0d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b11:	be 10 00 00 00       	mov    esi,0x10
c0000b16:	83 c1 02             	add    ecx,0x2
c0000b19:	e9 23 fe ff ff       	jmp    c0000941 <simple_strtoul+0x61>

c0000b1e <largebin_index>:
c0000b1e:	89 c2                	mov    edx,eax
c0000b20:	c1 ea 08             	shr    edx,0x8
c0000b23:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b29:	77 10                	ja     c0000b3b <largebin_index+0x1d>
c0000b2b:	0f bd d2             	bsr    edx,edx
c0000b2e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b31:	d3 e8                	shr    eax,cl
c0000b33:	83 e0 03             	and    eax,0x3
c0000b36:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b3a:	c3                   	ret    
c0000b3b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b40:	c3                   	ret    

c0000b41 <malloc_init_state>:
c0000b41:	53                   	push   ebx
c0000b42:	8d 50 34             	lea    edx,[eax+0x34]
c0000b45:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b4b:	89 d1                	mov    ecx,edx
c0000b4d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b50:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b53:	83 c2 08             	add    edx,0x8
c0000b56:	39 da                	cmp    edx,ebx
c0000b58:	75 f3                	jne    c0000b4d <malloc_init_state+0xc>
c0000b5a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b5c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b66:	83 e2 03             	and    edx,0x3
c0000b69:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b73:	83 ca 48             	or     edx,0x48
c0000b76:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b80:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b8a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000b91:	89 10                	mov    DWORD PTR [eax],edx
c0000b93:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000b96:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000ba0:	5b                   	pop    ebx
c0000ba1:	c3                   	ret    

c0000ba2 <malloc_consolidate>:
c0000ba2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ba4:	85 d2                	test   edx,edx
c0000ba6:	0f 84 d8 00 00 00    	je     c0000c84 <malloc_consolidate+0xe2>
c0000bac:	55                   	push   ebp
c0000bad:	83 e2 fd             	and    edx,0xfffffffd
c0000bb0:	57                   	push   edi
c0000bb1:	89 c5                	mov    ebp,eax
c0000bb3:	56                   	push   esi
c0000bb4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bb7:	53                   	push   ebx
c0000bb8:	83 ec 10             	sub    esp,0x10
c0000bbb:	89 10                	mov    DWORD PTR [eax],edx
c0000bbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bc1:	c1 ea 03             	shr    edx,0x3
c0000bc4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bc8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bcc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bcf:	85 d2                	test   edx,edx
c0000bd1:	0f 84 98 00 00 00    	je     c0000c6f <malloc_consolidate+0xcd>
c0000bd7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bde:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000be1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000be4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000be8:	89 f9                	mov    ecx,edi
c0000bea:	83 e1 fe             	and    ecx,0xfffffffe
c0000bed:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000bf0:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000bf3:	83 e3 fc             	and    ebx,0xfffffffc
c0000bf6:	83 e7 01             	and    edi,0x1
c0000bf9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000bfc:	75 14                	jne    c0000c12 <malloc_consolidate+0x70>
c0000bfe:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c00:	29 fa                	sub    edx,edi
c0000c02:	01 f9                	add    ecx,edi
c0000c04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c07:	89 fb                	mov    ebx,edi
c0000c09:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c0c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c0f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c12:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c15:	74 40                	je     c0000c57 <malloc_consolidate+0xb5>
c0000c17:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c1a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c1d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c21:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c24:	83 e7 01             	and    edi,0x1
c0000c27:	75 0e                	jne    c0000c37 <malloc_consolidate+0x95>
c0000c29:	01 d9                	add    ecx,ebx
c0000c2b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c2e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c31:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c34:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c37:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c3a:	89 ce                	mov    esi,ecx
c0000c3c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c3f:	83 ce 01             	or     esi,0x1
c0000c42:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c45:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c48:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c4b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c4f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c52:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c55:	eb 0c                	jmp    c0000c63 <malloc_consolidate+0xc1>
c0000c57:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c5a:	83 c9 01             	or     ecx,0x1
c0000c5d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c60:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c63:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c67:	85 d2                	test   edx,edx
c0000c69:	0f 85 6f ff ff ff    	jne    c0000bde <malloc_consolidate+0x3c>
c0000c6f:	83 c5 04             	add    ebp,0x4
c0000c72:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c76:	0f 85 50 ff ff ff    	jne    c0000bcc <malloc_consolidate+0x2a>
c0000c7c:	83 c4 10             	add    esp,0x10
c0000c7f:	5b                   	pop    ebx
c0000c80:	5e                   	pop    esi
c0000c81:	5f                   	pop    edi
c0000c82:	5d                   	pop    ebp
c0000c83:	c3                   	ret    
c0000c84:	e9 b8 fe ff ff       	jmp    c0000b41 <malloc_init_state>

c0000c89 <dlfree>:
c0000c89:	57                   	push   edi
c0000c8a:	56                   	push   esi
c0000c8b:	53                   	push   ebx
c0000c8c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000c90:	85 db                	test   ebx,ebx
c0000c92:	0f 84 e2 00 00 00    	je     c0000d7a <dlfree+0xf1>
c0000c98:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000c9b:	8b 0d 00 31 02 c0    	mov    ecx,DWORD PTR ds:0xc0023100
c0000ca1:	89 f0                	mov    eax,esi
c0000ca3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000ca6:	83 e0 fc             	and    eax,0xfffffffc
c0000ca9:	39 c1                	cmp    ecx,eax
c0000cab:	72 24                	jb     c0000cd1 <dlfree+0x48>
c0000cad:	83 c9 03             	or     ecx,0x3
c0000cb0:	c1 e8 03             	shr    eax,0x3
c0000cb3:	89 0d 00 31 02 c0    	mov    DWORD PTR ds:0xc0023100,ecx
c0000cb9:	83 e8 02             	sub    eax,0x2
c0000cbc:	8b 0c 85 04 31 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcefc]
c0000cc3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cc5:	89 14 85 04 31 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcefc],edx
c0000ccc:	e9 a9 00 00 00       	jmp    c0000d7a <dlfree+0xf1>
c0000cd1:	83 e6 02             	and    esi,0x2
c0000cd4:	0f 85 a0 00 00 00    	jne    c0000d7a <dlfree+0xf1>
c0000cda:	83 c9 01             	or     ecx,0x1
c0000cdd:	8d 34 02             	lea    esi,[edx+eax*1]
c0000ce0:	89 0d 00 31 02 c0    	mov    DWORD PTR ds:0xc0023100,ecx
c0000ce6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000ce9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cec:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000cf0:	75 13                	jne    c0000d05 <dlfree+0x7c>
c0000cf2:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000cf5:	29 da                	sub    edx,ebx
c0000cf7:	01 d8                	add    eax,ebx
c0000cf9:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cfc:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000cff:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d02:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d05:	39 35 2c 31 02 c0    	cmp    DWORD PTR ds:0xc002312c,esi
c0000d0b:	74 40                	je     c0000d4d <dlfree+0xc4>
c0000d0d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d11:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d14:	80 e3 01             	and    bl,0x1
c0000d17:	75 0e                	jne    c0000d27 <dlfree+0x9e>
c0000d19:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d1c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d1f:	01 c8                	add    eax,ecx
c0000d21:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d24:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d27:	8b 0d 3c 31 02 c0    	mov    ecx,DWORD PTR ds:0xc002313c
c0000d2d:	c7 42 0c 34 31 02 c0 	mov    DWORD PTR [edx+0xc],0xc0023134
c0000d34:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d37:	89 15 3c 31 02 c0    	mov    DWORD PTR ds:0xc002313c,edx
c0000d3d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d40:	89 c1                	mov    ecx,eax
c0000d42:	83 c9 01             	or     ecx,0x1
c0000d45:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d48:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d4b:	eb 10                	jmp    c0000d5d <dlfree+0xd4>
c0000d4d:	01 c8                	add    eax,ecx
c0000d4f:	89 c1                	mov    ecx,eax
c0000d51:	83 c9 01             	or     ecx,0x1
c0000d54:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d57:	89 15 2c 31 02 c0    	mov    DWORD PTR ds:0xc002312c,edx
c0000d5d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d62:	76 16                	jbe    c0000d7a <dlfree+0xf1>
c0000d64:	f6 05 00 31 02 c0 02 	test   BYTE PTR ds:0xc0023100,0x2
c0000d6b:	74 0d                	je     c0000d7a <dlfree+0xf1>
c0000d6d:	5b                   	pop    ebx
c0000d6e:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0000d73:	5e                   	pop    esi
c0000d74:	5f                   	pop    edi
c0000d75:	e9 28 fe ff ff       	jmp    c0000ba2 <malloc_consolidate>
c0000d7a:	5b                   	pop    ebx
c0000d7b:	5e                   	pop    esi
c0000d7c:	5f                   	pop    edi
c0000d7d:	c3                   	ret    

c0000d7e <sYSMALLOc>:
c0000d7e:	55                   	push   ebp
c0000d7f:	57                   	push   edi
c0000d80:	56                   	push   esi
c0000d81:	53                   	push   ebx
c0000d82:	89 d3                	mov    ebx,edx
c0000d84:	83 ec 2c             	sub    esp,0x2c
c0000d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d8b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000d91:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000d94:	8d 42 ff             	lea    eax,[edx-0x1]
c0000d97:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000d9b:	74 1f                	je     c0000dbc <sYSMALLOc+0x3e>
c0000d9d:	89 d8                	mov    eax,ebx
c0000d9f:	e8 fe fd ff ff       	call   c0000ba2 <malloc_consolidate>
c0000da4:	83 ec 0c             	sub    esp,0xc
c0000da7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dab:	83 e8 07             	sub    eax,0x7
c0000dae:	50                   	push   eax
c0000daf:	e8 30 02 00 00       	call   c0000fe4 <dlmalloc>
c0000db4:	83 c4 10             	add    esp,0x10
c0000db7:	e9 20 02 00 00       	jmp    c0000fdc <sYSMALLOc+0x25e>
c0000dbc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dbf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dc5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dc8:	83 e0 fc             	and    eax,0xfffffffc
c0000dcb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000dcf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000dd3:	83 c0 10             	add    eax,0x10
c0000dd6:	01 c1                	add    ecx,eax
c0000dd8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ddc:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000de3:	74 04                	je     c0000de9 <sYSMALLOc+0x6b>
c0000de5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000de9:	f7 da                	neg    edx
c0000deb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000def:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000df3:	21 d1                	and    ecx,edx
c0000df5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000df9:	7f 07                	jg     c0000e02 <sYSMALLOc+0x84>
c0000dfb:	31 c0                	xor    eax,eax
c0000dfd:	e9 da 01 00 00       	jmp    c0000fdc <sYSMALLOc+0x25e>
c0000e02:	83 ec 0c             	sub    esp,0xc
c0000e05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e09:	e8 2e 69 00 00       	call   c000773c <sbrk>
c0000e0e:	83 c4 10             	add    esp,0x10
c0000e11:	89 c6                	mov    esi,eax
c0000e13:	83 f8 ff             	cmp    eax,0xffffffff
c0000e16:	74 e3                	je     c0000dfb <sYSMALLOc+0x7d>
c0000e18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e1c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e20:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e23:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e29:	39 f1                	cmp    ecx,esi
c0000e2b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e31:	75 13                	jne    c0000e46 <sYSMALLOc+0xc8>
c0000e33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e37:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e3b:	83 c8 01             	or     eax,0x1
c0000e3e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e41:	e9 3e 01 00 00       	jmp    c0000f84 <sYSMALLOc+0x206>
c0000e46:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e4c:	88 d0                	mov    al,dl
c0000e4e:	83 e0 01             	and    eax,0x1
c0000e51:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e56:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e5a:	0f 95 c0             	setne  al
c0000e5d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e61:	39 f1                	cmp    ecx,esi
c0000e63:	76 12                	jbe    c0000e77 <sYSMALLOc+0xf9>
c0000e65:	84 c0                	test   al,al
c0000e67:	74 0e                	je     c0000e77 <sYSMALLOc+0xf9>
c0000e69:	83 e2 fe             	and    edx,0xfffffffe
c0000e6c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e72:	e9 83 00 00 00       	jmp    c0000efa <sYSMALLOc+0x17c>
c0000e77:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e7c:	74 7c                	je     c0000efa <sYSMALLOc+0x17c>
c0000e7e:	84 c0                	test   al,al
c0000e80:	74 0c                	je     c0000e8e <sYSMALLOc+0x110>
c0000e82:	89 f0                	mov    eax,esi
c0000e84:	29 c8                	sub    eax,ecx
c0000e86:	01 e8                	add    eax,ebp
c0000e88:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e8e:	89 f2                	mov    edx,esi
c0000e90:	83 e2 07             	and    edx,0x7
c0000e93:	74 0c                	je     c0000ea1 <sYSMALLOc+0x123>
c0000e95:	b8 08 00 00 00       	mov    eax,0x8
c0000e9a:	29 d0                	sub    eax,edx
c0000e9c:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000e9f:	eb 04                	jmp    c0000ea5 <sYSMALLOc+0x127>
c0000ea1:	89 f5                	mov    ebp,esi
c0000ea3:	31 c0                	xor    eax,eax
c0000ea5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ea9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000eb1:	01 c1                	add    ecx,eax
c0000eb3:	83 ec 0c             	sub    esp,0xc
c0000eb6:	01 f1                	add    ecx,esi
c0000eb8:	01 ca                	add    edx,ecx
c0000eba:	29 c8                	sub    eax,ecx
c0000ebc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ec0:	01 c2                	add    edx,eax
c0000ec2:	52                   	push   edx
c0000ec3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ec7:	e8 70 68 00 00       	call   c000773c <sbrk>
c0000ecc:	83 c4 10             	add    esp,0x10
c0000ecf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ed2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ed6:	75 0f                	jne    c0000ee7 <sYSMALLOc+0x169>
c0000ed8:	83 ec 0c             	sub    esp,0xc
c0000edb:	6a 00                	push   0x0
c0000edd:	e8 5a 68 00 00       	call   c000773c <sbrk>
c0000ee2:	83 c4 10             	add    esp,0x10
c0000ee5:	eb 30                	jmp    c0000f17 <sYSMALLOc+0x199>
c0000ee7:	39 c6                	cmp    esi,eax
c0000ee9:	76 33                	jbe    c0000f1e <sYSMALLOc+0x1a0>
c0000eeb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eef:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000ef6:	01 f0                	add    eax,esi
c0000ef8:	eb 1d                	jmp    c0000f17 <sYSMALLOc+0x199>
c0000efa:	83 ec 0c             	sub    esp,0xc
c0000efd:	89 f5                	mov    ebp,esi
c0000eff:	6a 00                	push   0x0
c0000f01:	e8 36 68 00 00       	call   c000773c <sbrk>
c0000f06:	89 c2                	mov    edx,eax
c0000f08:	29 f2                	sub    edx,esi
c0000f0a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f0e:	83 c4 10             	add    esp,0x10
c0000f11:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f17:	31 d2                	xor    edx,edx
c0000f19:	83 f8 ff             	cmp    eax,0xffffffff
c0000f1c:	74 66                	je     c0000f84 <sYSMALLOc+0x206>
c0000f1e:	29 e8                	sub    eax,ebp
c0000f20:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f23:	01 d0                	add    eax,edx
c0000f25:	83 c8 01             	or     eax,0x1
c0000f28:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f2b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f31:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f36:	74 4c                	je     c0000f84 <sYSMALLOc+0x206>
c0000f38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f3c:	83 e8 0c             	sub    eax,0xc
c0000f3f:	83 e0 f8             	and    eax,0xfffffff8
c0000f42:	89 c2                	mov    edx,eax
c0000f44:	83 ca 01             	or     edx,0x1
c0000f47:	83 f8 0f             	cmp    eax,0xf
c0000f4a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f4d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f55:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f5d:	76 25                	jbe    c0000f84 <sYSMALLOc+0x206>
c0000f5f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f65:	83 ec 0c             	sub    esp,0xc
c0000f68:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f72:	83 c7 08             	add    edi,0x8
c0000f75:	57                   	push   edi
c0000f76:	e8 0e fd ff ff       	call   c0000c89 <dlfree>
c0000f7b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f81:	83 c4 10             	add    esp,0x10
c0000f84:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f8a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000f90:	73 06                	jae    c0000f98 <sYSMALLOc+0x21a>
c0000f92:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000f98:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000f9e:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fa4:	73 06                	jae    c0000fac <sYSMALLOc+0x22e>
c0000fa6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000faf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fb2:	83 e2 fc             	and    edx,0xfffffffc
c0000fb5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fb9:	0f 82 3c fe ff ff    	jb     c0000dfb <sYSMALLOc+0x7d>
c0000fbf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fc3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fc6:	29 fa                	sub    edx,edi
c0000fc8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fcb:	83 ca 01             	or     edx,0x1
c0000fce:	89 fb                	mov    ebx,edi
c0000fd0:	83 c0 08             	add    eax,0x8
c0000fd3:	83 cb 01             	or     ebx,0x1
c0000fd6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fd9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fdc:	83 c4 2c             	add    esp,0x2c
c0000fdf:	5b                   	pop    ebx
c0000fe0:	5e                   	pop    esi
c0000fe1:	5f                   	pop    edi
c0000fe2:	5d                   	pop    ebp
c0000fe3:	c3                   	ret    

c0000fe4 <dlmalloc>:
c0000fe4:	55                   	push   ebp
c0000fe5:	57                   	push   edi
c0000fe6:	56                   	push   esi
c0000fe7:	53                   	push   ebx
c0000fe8:	83 ec 1c             	sub    esp,0x1c
c0000feb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fef:	83 f8 df             	cmp    eax,0xffffffdf
c0000ff2:	0f 87 70 03 00 00    	ja     c0001368 <dlmalloc+0x384>
c0000ff8:	83 c0 0b             	add    eax,0xb
c0000ffb:	be 10 00 00 00       	mov    esi,0x10
c0001000:	83 f8 0f             	cmp    eax,0xf
c0001003:	76 05                	jbe    c000100a <dlmalloc+0x26>
c0001005:	83 e0 f8             	and    eax,0xfffffff8
c0001008:	89 c6                	mov    esi,eax
c000100a:	8b 3d 00 31 02 c0    	mov    edi,DWORD PTR ds:0xc0023100
c0001010:	f7 c7 01 00 00 00    	test   edi,0x1
c0001016:	75 17                	jne    c000102f <dlmalloc+0x4b>
c0001018:	85 ff                	test   edi,edi
c000101a:	0f 85 05 03 00 00    	jne    c0001325 <dlmalloc+0x341>
c0001020:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001025:	e8 78 fb ff ff       	call   c0000ba2 <malloc_consolidate>
c000102a:	e9 f6 02 00 00       	jmp    c0001325 <dlmalloc+0x341>
c000102f:	39 f7                	cmp    edi,esi
c0001031:	72 1f                	jb     c0001052 <dlmalloc+0x6e>
c0001033:	89 f2                	mov    edx,esi
c0001035:	c1 ea 03             	shr    edx,0x3
c0001038:	83 ea 02             	sub    edx,0x2
c000103b:	8b 04 95 04 31 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcefc]
c0001042:	85 c0                	test   eax,eax
c0001044:	74 0c                	je     c0001052 <dlmalloc+0x6e>
c0001046:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001049:	89 0c 95 04 31 02 c0 	mov    DWORD PTR [edx*4-0x3ffdcefc],ecx
c0001050:	eb 30                	jmp    c0001082 <dlmalloc+0x9e>
c0001052:	89 f0                	mov    eax,esi
c0001054:	81 fe ff 00 00 00    	cmp    esi,0xff
c000105a:	77 2e                	ja     c000108a <dlmalloc+0xa6>
c000105c:	c1 e8 03             	shr    eax,0x3
c000105f:	8d 14 c5 34 31 02 c0 	lea    edx,[eax*8-0x3ffdcecc]
c0001066:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000106a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000106d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001070:	39 c3                	cmp    ebx,eax
c0001072:	74 2e                	je     c00010a2 <dlmalloc+0xbe>
c0001074:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001077:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000107c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000107f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001082:	83 c0 08             	add    eax,0x8
c0001085:	e9 e0 02 00 00       	jmp    c000136a <dlmalloc+0x386>
c000108a:	e8 8f fa ff ff       	call   c0000b1e <largebin_index>
c000108f:	83 e7 02             	and    edi,0x2
c0001092:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001096:	74 0a                	je     c00010a2 <dlmalloc+0xbe>
c0001098:	b8 00 31 02 c0       	mov    eax,0xc0023100
c000109d:	e8 00 fb ff ff       	call   c0000ba2 <malloc_consolidate>
c00010a2:	8d 46 10             	lea    eax,[esi+0x10]
c00010a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010a9:	8b 1d 40 31 02 c0    	mov    ebx,DWORD PTR ds:0xc0023140
c00010af:	81 fb 34 31 02 c0    	cmp    ebx,0xc0023134
c00010b5:	0f 84 13 01 00 00    	je     c00011ce <dlmalloc+0x1ea>
c00010bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010c1:	83 e7 fc             	and    edi,0xfffffffc
c00010c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010ca:	77 4c                	ja     c0001118 <dlmalloc+0x134>
c00010cc:	3d 34 31 02 c0       	cmp    eax,0xc0023134
c00010d1:	75 45                	jne    c0001118 <dlmalloc+0x134>
c00010d3:	39 1d 30 31 02 c0    	cmp    DWORD PTR ds:0xc0023130,ebx
c00010d9:	75 3d                	jne    c0001118 <dlmalloc+0x134>
c00010db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010df:	73 37                	jae    c0001118 <dlmalloc+0x134>
c00010e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010e4:	89 fa                	mov    edx,edi
c00010e6:	a3 3c 31 02 c0       	mov    ds:0xc002313c,eax
c00010eb:	a3 40 31 02 c0       	mov    ds:0xc0023140,eax
c00010f0:	a3 30 31 02 c0       	mov    ds:0xc0023130,eax
c00010f5:	29 f2                	sub    edx,esi
c00010f7:	c7 40 08 34 31 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023134
c00010fe:	c7 40 0c 34 31 02 c0 	mov    DWORD PTR [eax+0xc],0xc0023134
c0001105:	83 ce 01             	or     esi,0x1
c0001108:	89 d1                	mov    ecx,edx
c000110a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000110d:	83 c9 01             	or     ecx,0x1
c0001110:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001113:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001116:	eb 15                	jmp    c000112d <dlmalloc+0x149>
c0001118:	a3 40 31 02 c0       	mov    ds:0xc0023140,eax
c000111d:	39 fe                	cmp    esi,edi
c000111f:	c7 40 08 34 31 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023134
c0001126:	75 0d                	jne    c0001135 <dlmalloc+0x151>
c0001128:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000112d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001130:	e9 35 02 00 00       	jmp    c000136a <dlmalloc+0x386>
c0001135:	89 f8                	mov    eax,edi
c0001137:	81 ff ff 00 00 00    	cmp    edi,0xff
c000113d:	77 19                	ja     c0001158 <dlmalloc+0x174>
c000113f:	c1 e8 03             	shr    eax,0x3
c0001142:	8d 14 00             	lea    edx,[eax+eax*1]
c0001145:	83 c2 0d             	add    edx,0xd
c0001148:	8d 2c 95 f8 30 02 c0 	lea    ebp,[edx*4-0x3ffdcf08]
c000114f:	8b 14 95 00 31 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf00]
c0001156:	eb 46                	jmp    c000119e <dlmalloc+0x1ba>
c0001158:	e8 c1 f9 ff ff       	call   c0000b1e <largebin_index>
c000115d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001160:	83 c2 0d             	add    edx,0xd
c0001163:	8d 0c 95 00 31 02 c0 	lea    ecx,[edx*4-0x3ffdcf00]
c000116a:	8b 14 95 00 31 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf00]
c0001171:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001174:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001178:	89 d5                	mov    ebp,edx
c000117a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000117e:	74 1e                	je     c000119e <dlmalloc+0x1ba>
c0001180:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001183:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001186:	77 12                	ja     c000119a <dlmalloc+0x1b6>
c0001188:	83 cf 01             	or     edi,0x1
c000118b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000118e:	76 05                	jbe    c0001195 <dlmalloc+0x1b1>
c0001190:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001193:	eb f6                	jmp    c000118b <dlmalloc+0x1a7>
c0001195:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001198:	eb 04                	jmp    c000119e <dlmalloc+0x1ba>
c000119a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000119e:	89 c7                	mov    edi,eax
c00011a0:	88 c1                	mov    cl,al
c00011a2:	c1 ff 05             	sar    edi,0x5
c00011a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011a9:	bf 01 00 00 00       	mov    edi,0x1
c00011ae:	d3 e7                	shl    edi,cl
c00011b0:	89 f8                	mov    eax,edi
c00011b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011b6:	09 04 bd 34 34 02 c0 	or     DWORD PTR [edi*4-0x3ffdcbcc],eax
c00011bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011c9:	e9 db fe ff ff       	jmp    c00010a9 <dlmalloc+0xc5>
c00011ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d4:	76 78                	jbe    c000124e <dlmalloc+0x26a>
c00011d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011da:	8d 04 c5 34 31 02 c0 	lea    eax,[eax*8-0x3ffdcecc]
c00011e1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011e4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011e7:	39 ca                	cmp    edx,ecx
c00011e9:	74 63                	je     c000124e <dlmalloc+0x26a>
c00011eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00011f1:	83 e3 fc             	and    ebx,0xfffffffc
c00011f4:	39 de                	cmp    esi,ebx
c00011f6:	77 52                	ja     c000124a <dlmalloc+0x266>
c00011f8:	89 df                	mov    edi,ebx
c00011fa:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00011fd:	29 f7                	sub    edi,esi
c00011ff:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001202:	01 d3                	add    ebx,edx
c0001204:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001207:	83 ff 0f             	cmp    edi,0xf
c000120a:	8d 42 08             	lea    eax,[edx+0x8]
c000120d:	77 09                	ja     c0001218 <dlmalloc+0x234>
c000120f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001213:	e9 52 01 00 00       	jmp    c000136a <dlmalloc+0x386>
c0001218:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000121b:	83 ce 01             	or     esi,0x1
c000121e:	89 0d 3c 31 02 c0    	mov    DWORD PTR ds:0xc002313c,ecx
c0001224:	89 0d 40 31 02 c0    	mov    DWORD PTR ds:0xc0023140,ecx
c000122a:	c7 41 08 34 31 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0023134
c0001231:	c7 41 0c 34 31 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0023134
c0001238:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000123b:	89 fa                	mov    edx,edi
c000123d:	83 ca 01             	or     edx,0x1
c0001240:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001243:	89 3b                	mov    DWORD PTR [ebx],edi
c0001245:	e9 20 01 00 00       	jmp    c000136a <dlmalloc+0x386>
c000124a:	89 c2                	mov    edx,eax
c000124c:	eb 99                	jmp    c00011e7 <dlmalloc+0x203>
c000124e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001252:	b8 01 00 00 00       	mov    eax,0x1
c0001257:	41                   	inc    ecx
c0001258:	89 cb                	mov    ebx,ecx
c000125a:	8d 14 cd 2c 31 02 c0 	lea    edx,[ecx*8-0x3ffdced4]
c0001261:	c1 eb 05             	shr    ebx,0x5
c0001264:	d3 e0                	shl    eax,cl
c0001266:	8b 3c 9d 34 34 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdcbcc]
c000126d:	39 f8                	cmp    eax,edi
c000126f:	77 04                	ja     c0001275 <dlmalloc+0x291>
c0001271:	85 c0                	test   eax,eax
c0001273:	75 26                	jne    c000129b <dlmalloc+0x2b7>
c0001275:	43                   	inc    ebx
c0001276:	83 fb 02             	cmp    ebx,0x2
c0001279:	0f 87 a6 00 00 00    	ja     c0001325 <dlmalloc+0x341>
c000127f:	8b 3c 9d 34 34 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdcbcc]
c0001286:	85 ff                	test   edi,edi
c0001288:	74 eb                	je     c0001275 <dlmalloc+0x291>
c000128a:	89 d8                	mov    eax,ebx
c000128c:	c1 e0 06             	shl    eax,0x6
c000128f:	8d 14 85 2c 31 02 c0 	lea    edx,[eax*4-0x3ffdced4]
c0001296:	b8 01 00 00 00       	mov    eax,0x1
c000129b:	85 f8                	test   eax,edi
c000129d:	75 07                	jne    c00012a6 <dlmalloc+0x2c2>
c000129f:	83 c2 08             	add    edx,0x8
c00012a2:	01 c0                	add    eax,eax
c00012a4:	eb f5                	jmp    c000129b <dlmalloc+0x2b7>
c00012a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012a9:	39 ca                	cmp    edx,ecx
c00012ab:	75 14                	jne    c00012c1 <dlmalloc+0x2dd>
c00012ad:	89 c1                	mov    ecx,eax
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	f7 d1                	not    ecx
c00012b4:	01 c0                	add    eax,eax
c00012b6:	21 cf                	and    edi,ecx
c00012b8:	89 3c 9d 34 34 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdcbcc],edi
c00012bf:	eb ac                	jmp    c000126d <dlmalloc+0x289>
c00012c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012c7:	83 e0 fc             	and    eax,0xfffffffc
c00012ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012cd:	89 c3                	mov    ebx,eax
c00012cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012d2:	29 f3                	sub    ebx,esi
c00012d4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012d7:	83 fb 0f             	cmp    ebx,0xf
c00012da:	8d 41 08             	lea    eax,[ecx+0x8]
c00012dd:	77 09                	ja     c00012e8 <dlmalloc+0x304>
c00012df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012e3:	e9 82 00 00 00       	jmp    c000136a <dlmalloc+0x386>
c00012e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012f1:	89 3d 3c 31 02 c0    	mov    DWORD PTR ds:0xc002313c,edi
c00012f7:	89 3d 40 31 02 c0    	mov    DWORD PTR ds:0xc0023140,edi
c00012fd:	c7 47 08 34 31 02 c0 	mov    DWORD PTR [edi+0x8],0xc0023134
c0001304:	c7 47 0c 34 31 02 c0 	mov    DWORD PTR [edi+0xc],0xc0023134
c000130b:	77 06                	ja     c0001313 <dlmalloc+0x32f>
c000130d:	89 3d 30 31 02 c0    	mov    DWORD PTR ds:0xc0023130,edi
c0001313:	83 ce 01             	or     esi,0x1
c0001316:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001319:	89 d9                	mov    ecx,ebx
c000131b:	83 c9 01             	or     ecx,0x1
c000131e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001321:	89 1a                	mov    DWORD PTR [edx],ebx
c0001323:	eb 45                	jmp    c000136a <dlmalloc+0x386>
c0001325:	a1 2c 31 02 c0       	mov    eax,ds:0xc002312c
c000132a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000132d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001330:	83 e2 fc             	and    edx,0xfffffffc
c0001333:	39 d1                	cmp    ecx,edx
c0001335:	77 1e                	ja     c0001355 <dlmalloc+0x371>
c0001337:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000133a:	89 f3                	mov    ebx,esi
c000133c:	89 0d 2c 31 02 c0    	mov    DWORD PTR ds:0xc002312c,ecx
c0001342:	83 cb 01             	or     ebx,0x1
c0001345:	29 f2                	sub    edx,esi
c0001347:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000134a:	83 ca 01             	or     edx,0x1
c000134d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001350:	e9 2d fd ff ff       	jmp    c0001082 <dlmalloc+0x9e>
c0001355:	83 c4 1c             	add    esp,0x1c
c0001358:	89 f0                	mov    eax,esi
c000135a:	5b                   	pop    ebx
c000135b:	ba 00 31 02 c0       	mov    edx,0xc0023100
c0001360:	5e                   	pop    esi
c0001361:	5f                   	pop    edi
c0001362:	5d                   	pop    ebp
c0001363:	e9 16 fa ff ff       	jmp    c0000d7e <sYSMALLOc>
c0001368:	31 c0                	xor    eax,eax
c000136a:	83 c4 1c             	add    esp,0x1c
c000136d:	5b                   	pop    ebx
c000136e:	5e                   	pop    esi
c000136f:	5f                   	pop    edi
c0001370:	5d                   	pop    ebp
c0001371:	c3                   	ret    

c0001372 <iALLOc>:
c0001372:	55                   	push   ebp
c0001373:	89 c5                	mov    ebp,eax
c0001375:	57                   	push   edi
c0001376:	56                   	push   esi
c0001377:	53                   	push   ebx
c0001378:	83 ec 2c             	sub    esp,0x2c
c000137b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000137f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001383:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001387:	83 3d 00 31 02 c0 00 	cmp    DWORD PTR ds:0xc0023100,0x0
c000138e:	75 12                	jne    c00013a2 <iALLOc+0x30>
c0001390:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001394:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001399:	e8 04 f8 ff ff       	call   c0000ba2 <malloc_consolidate>
c000139e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013a7:	74 12                	je     c00013bb <iALLOc+0x49>
c00013a9:	85 ed                	test   ebp,ebp
c00013ab:	0f 84 64 01 00 00    	je     c0001515 <iALLOc+0x1a3>
c00013b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013b9:	eb 33                	jmp    c00013ee <iALLOc+0x7c>
c00013bb:	85 ed                	test   ebp,ebp
c00013bd:	75 14                	jne    c00013d3 <iALLOc+0x61>
c00013bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013c7:	83 c4 2c             	add    esp,0x2c
c00013ca:	5b                   	pop    ebx
c00013cb:	5e                   	pop    esi
c00013cc:	5f                   	pop    edi
c00013cd:	5d                   	pop    ebp
c00013ce:	e9 11 fc ff ff       	jmp    c0000fe4 <dlmalloc>
c00013d3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013da:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013e2:	83 f8 0f             	cmp    eax,0xf
c00013e5:	76 07                	jbe    c00013ee <iALLOc+0x7c>
c00013e7:	83 e0 f8             	and    eax,0xfffffff8
c00013ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00013f3:	75 09                	jne    c00013fe <iALLOc+0x8c>
c00013f5:	89 d0                	mov    eax,edx
c00013f7:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00013fa:	31 f6                	xor    esi,esi
c00013fc:	eb 3b                	jmp    c0001439 <iALLOc+0xc7>
c00013fe:	8b 02                	mov    eax,DWORD PTR [edx]
c0001400:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001408:	83 c0 0b             	add    eax,0xb
c000140b:	83 f8 0f             	cmp    eax,0xf
c000140e:	76 07                	jbe    c0001417 <iALLOc+0xa5>
c0001410:	83 e0 f8             	and    eax,0xfffffff8
c0001413:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001417:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000141b:	0f af f5             	imul   esi,ebp
c000141e:	eb 25                	jmp    c0001445 <iALLOc+0xd3>
c0001420:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001422:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001425:	bb 10 00 00 00       	mov    ebx,0x10
c000142a:	83 f9 0f             	cmp    ecx,0xf
c000142d:	76 05                	jbe    c0001434 <iALLOc+0xc2>
c000142f:	83 e1 f8             	and    ecx,0xfffffff8
c0001432:	89 cb                	mov    ebx,ecx
c0001434:	01 de                	add    esi,ebx
c0001436:	83 c0 04             	add    eax,0x4
c0001439:	39 c7                	cmp    edi,eax
c000143b:	75 e3                	jne    c0001420 <iALLOc+0xae>
c000143d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001445:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001449:	8b 1d 54 34 02 c0    	mov    ebx,DWORD PTR ds:0xc0023454
c000144f:	83 ec 0c             	sub    esp,0xc
c0001452:	c7 05 54 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023454,0x0
c000145c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001460:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001464:	50                   	push   eax
c0001465:	e8 7a fb ff ff       	call   c0000fe4 <dlmalloc>
c000146a:	83 c4 10             	add    esp,0x10
c000146d:	89 1d 54 34 02 c0    	mov    DWORD PTR ds:0xc0023454,ebx
c0001473:	85 c0                	test   eax,eax
c0001475:	0f 84 92 00 00 00    	je     c000150d <iALLOc+0x19b>
c000147b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000147e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001481:	83 e3 fc             	and    ebx,0xfffffffc
c0001484:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001488:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000148d:	74 1e                	je     c00014ad <iALLOc+0x13b>
c000148f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001493:	89 d9                	mov    ecx,ebx
c0001495:	52                   	push   edx
c0001496:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000149a:	83 e9 04             	sub    ecx,0x4
c000149d:	51                   	push   ecx
c000149e:	6a 00                	push   0x0
c00014a0:	50                   	push   eax
c00014a1:	e8 1a f0 ff ff       	call   c00004c0 <memset>
c00014a6:	83 c4 10             	add    esp,0x10
c00014a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	75 14                	jne    c00014c8 <iALLOc+0x156>
c00014b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014b7:	29 f3                	sub    ebx,esi
c00014b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014bc:	83 cb 01             	or     ebx,0x1
c00014bf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014c3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014c6:	89 f3                	mov    ebx,esi
c00014c8:	31 c0                	xor    eax,eax
c00014ca:	4d                   	dec    ebp
c00014cb:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014ce:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014d2:	39 c5                	cmp    ebp,eax
c00014d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014d7:	74 2c                	je     c0001505 <iALLOc+0x193>
c00014d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014dd:	85 c9                	test   ecx,ecx
c00014df:	75 15                	jne    c00014f6 <iALLOc+0x184>
c00014e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014e7:	b9 10 00 00 00       	mov    ecx,0x10
c00014ec:	83 fe 0f             	cmp    esi,0xf
c00014ef:	76 05                	jbe    c00014f6 <iALLOc+0x184>
c00014f1:	83 e6 f8             	and    esi,0xfffffff8
c00014f4:	89 f1                	mov    ecx,esi
c00014f6:	89 ce                	mov    esi,ecx
c00014f8:	29 cb                	sub    ebx,ecx
c00014fa:	83 ce 01             	or     esi,0x1
c00014fd:	40                   	inc    eax
c00014fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001501:	01 cf                	add    edi,ecx
c0001503:	eb c6                	jmp    c00014cb <iALLOc+0x159>
c0001505:	83 cb 01             	or     ebx,0x1
c0001508:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000150b:	eb 08                	jmp    c0001515 <iALLOc+0x1a3>
c000150d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001515:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001519:	83 c4 2c             	add    esp,0x2c
c000151c:	5b                   	pop    ebx
c000151d:	5e                   	pop    esi
c000151e:	5f                   	pop    edi
c000151f:	5d                   	pop    ebp
c0001520:	c3                   	ret    

c0001521 <dlrealloc>:
c0001521:	55                   	push   ebp
c0001522:	57                   	push   edi
c0001523:	56                   	push   esi
c0001524:	53                   	push   ebx
c0001525:	83 ec 1c             	sub    esp,0x1c
c0001528:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000152c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001530:	85 db                	test   ebx,ebx
c0001532:	75 10                	jne    c0001544 <dlrealloc+0x23>
c0001534:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001538:	83 c4 1c             	add    esp,0x1c
c000153b:	5b                   	pop    ebx
c000153c:	5e                   	pop    esi
c000153d:	5f                   	pop    edi
c000153e:	5d                   	pop    ebp
c000153f:	e9 a0 fa ff ff       	jmp    c0000fe4 <dlmalloc>
c0001544:	83 f8 df             	cmp    eax,0xffffffdf
c0001547:	76 07                	jbe    c0001550 <dlrealloc+0x2f>
c0001549:	31 db                	xor    ebx,ebx
c000154b:	e9 6a 01 00 00       	jmp    c00016ba <dlrealloc+0x199>
c0001550:	83 c0 0b             	add    eax,0xb
c0001553:	bd 10 00 00 00       	mov    ebp,0x10
c0001558:	83 f8 0f             	cmp    eax,0xf
c000155b:	76 05                	jbe    c0001562 <dlrealloc+0x41>
c000155d:	83 e0 f8             	and    eax,0xfffffff8
c0001560:	89 c5                	mov    ebp,eax
c0001562:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001565:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001568:	89 c6                	mov    esi,eax
c000156a:	83 e6 fc             	and    esi,0xfffffffc
c000156d:	a8 02                	test   al,0x2
c000156f:	75 d8                	jne    c0001549 <dlrealloc+0x28>
c0001571:	39 f5                	cmp    ebp,esi
c0001573:	0f 86 04 01 00 00    	jbe    c000167d <dlrealloc+0x15c>
c0001579:	8d 14 37             	lea    edx,[edi+esi*1]
c000157c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000157f:	39 15 2c 31 02 c0    	cmp    DWORD PTR ds:0xc002312c,edx
c0001585:	75 33                	jne    c00015ba <dlrealloc+0x99>
c0001587:	83 e1 fc             	and    ecx,0xfffffffc
c000158a:	01 f1                	add    ecx,esi
c000158c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001590:	8d 4d 10             	lea    ecx,[ebp+0x10]
c0001593:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0001597:	77 49                	ja     c00015e2 <dlrealloc+0xc1>
c0001599:	01 ef                	add    edi,ebp
c000159b:	83 e0 01             	and    eax,0x1
c000159e:	09 e8                	or     eax,ebp
c00015a0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015a3:	89 3d 2c 31 02 c0    	mov    DWORD PTR ds:0xc002312c,edi
c00015a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015ad:	29 e8                	sub    eax,ebp
c00015af:	83 c8 01             	or     eax,0x1
c00015b2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015b5:	e9 00 01 00 00       	jmp    c00016ba <dlrealloc+0x199>
c00015ba:	89 c8                	mov    eax,ecx
c00015bc:	83 e0 fe             	and    eax,0xfffffffe
c00015bf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015c4:	75 1c                	jne    c00015e2 <dlrealloc+0xc1>
c00015c6:	83 e1 fc             	and    ecx,0xfffffffc
c00015c9:	01 f1                	add    ecx,esi
c00015cb:	39 cd                	cmp    ebp,ecx
c00015cd:	77 13                	ja     c00015e2 <dlrealloc+0xc1>
c00015cf:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015d2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015d5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015d8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015db:	89 ce                	mov    esi,ecx
c00015dd:	e9 9b 00 00 00       	jmp    c000167d <dlrealloc+0x15c>
c00015e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015e6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015e9:	83 ec 0c             	sub    esp,0xc
c00015ec:	50                   	push   eax
c00015ed:	e8 f2 f9 ff ff       	call   c0000fe4 <dlmalloc>
c00015f2:	83 c4 10             	add    esp,0x10
c00015f5:	85 c0                	test   eax,eax
c00015f7:	0f 84 4c ff ff ff    	je     c0001549 <dlrealloc+0x28>
c00015fd:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001600:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001604:	39 ca                	cmp    edx,ecx
c0001606:	75 0a                	jne    c0001612 <dlrealloc+0xf1>
c0001608:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000160b:	83 e0 fc             	and    eax,0xfffffffc
c000160e:	01 c6                	add    esi,eax
c0001610:	eb 6b                	jmp    c000167d <dlrealloc+0x15c>
c0001612:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001615:	83 f9 27             	cmp    ecx,0x27
c0001618:	76 08                	jbe    c0001622 <dlrealloc+0x101>
c000161a:	89 de                	mov    esi,ebx
c000161c:	89 c7                	mov    edi,eax
c000161e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001620:	eb 43                	jmp    c0001665 <dlrealloc+0x144>
c0001622:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001624:	83 f9 13             	cmp    ecx,0x13
c0001627:	89 10                	mov    DWORD PTR [eax],edx
c0001629:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000162c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000162f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001632:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001635:	76 2e                	jbe    c0001665 <dlrealloc+0x144>
c0001637:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000163a:	83 f9 1b             	cmp    ecx,0x1b
c000163d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001640:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001643:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001646:	76 1d                	jbe    c0001665 <dlrealloc+0x144>
c0001648:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000164b:	83 f9 23             	cmp    ecx,0x23
c000164e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001651:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001654:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001657:	76 0c                	jbe    c0001665 <dlrealloc+0x144>
c0001659:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000165c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000165f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001662:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001665:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001669:	83 ec 0c             	sub    esp,0xc
c000166c:	53                   	push   ebx
c000166d:	e8 17 f6 ff ff       	call   c0000c89 <dlfree>
c0001672:	83 c4 10             	add    esp,0x10
c0001675:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001679:	89 c3                	mov    ebx,eax
c000167b:	eb 3d                	jmp    c00016ba <dlrealloc+0x199>
c000167d:	89 f2                	mov    edx,esi
c000167f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001682:	29 ea                	sub    edx,ebp
c0001684:	83 e1 01             	and    ecx,0x1
c0001687:	8d 04 37             	lea    eax,[edi+esi*1]
c000168a:	83 fa 0f             	cmp    edx,0xf
c000168d:	77 0b                	ja     c000169a <dlrealloc+0x179>
c000168f:	09 ce                	or     esi,ecx
c0001691:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001694:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001698:	eb 20                	jmp    c00016ba <dlrealloc+0x199>
c000169a:	01 ef                	add    edi,ebp
c000169c:	83 ec 0c             	sub    esp,0xc
c000169f:	09 cd                	or     ebp,ecx
c00016a1:	83 ca 01             	or     edx,0x1
c00016a4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016a7:	83 c7 08             	add    edi,0x8
c00016aa:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016ad:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016b1:	57                   	push   edi
c00016b2:	e8 d2 f5 ff ff       	call   c0000c89 <dlfree>
c00016b7:	83 c4 10             	add    esp,0x10
c00016ba:	83 c4 1c             	add    esp,0x1c
c00016bd:	89 d8                	mov    eax,ebx
c00016bf:	5b                   	pop    ebx
c00016c0:	5e                   	pop    esi
c00016c1:	5f                   	pop    edi
c00016c2:	5d                   	pop    ebp
c00016c3:	c3                   	ret    

c00016c4 <dlmemalign>:
c00016c4:	55                   	push   ebp
c00016c5:	57                   	push   edi
c00016c6:	56                   	push   esi
c00016c7:	53                   	push   ebx
c00016c8:	83 ec 0c             	sub    esp,0xc
c00016cb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016cf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016d3:	83 fa 08             	cmp    edx,0x8
c00016d6:	77 10                	ja     c00016e8 <dlmemalign+0x24>
c00016d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016dc:	83 c4 0c             	add    esp,0xc
c00016df:	5b                   	pop    ebx
c00016e0:	5e                   	pop    esi
c00016e1:	5f                   	pop    edi
c00016e2:	5d                   	pop    ebp
c00016e3:	e9 fc f8 ff ff       	jmp    c0000fe4 <dlmalloc>
c00016e8:	bf 10 00 00 00       	mov    edi,0x10
c00016ed:	83 fa 0f             	cmp    edx,0xf
c00016f0:	76 13                	jbe    c0001705 <dlmemalign+0x41>
c00016f2:	8d 4a ff             	lea    ecx,[edx-0x1]
c00016f5:	85 d1                	test   ecx,edx
c00016f7:	75 04                	jne    c00016fd <dlmemalign+0x39>
c00016f9:	89 d7                	mov    edi,edx
c00016fb:	eb 08                	jmp    c0001705 <dlmemalign+0x41>
c00016fd:	39 d7                	cmp    edi,edx
c00016ff:	73 04                	jae    c0001705 <dlmemalign+0x41>
c0001701:	01 ff                	add    edi,edi
c0001703:	eb f8                	jmp    c00016fd <dlmemalign+0x39>
c0001705:	83 f8 df             	cmp    eax,0xffffffdf
c0001708:	76 07                	jbe    c0001711 <dlmemalign+0x4d>
c000170a:	31 c0                	xor    eax,eax
c000170c:	e9 ce 00 00 00       	jmp    c00017df <dlmemalign+0x11b>
c0001711:	83 c0 0b             	add    eax,0xb
c0001714:	bd 10 00 00 00       	mov    ebp,0x10
c0001719:	83 f8 0f             	cmp    eax,0xf
c000171c:	76 05                	jbe    c0001723 <dlmemalign+0x5f>
c000171e:	83 e0 f8             	and    eax,0xfffffff8
c0001721:	89 c5                	mov    ebp,eax
c0001723:	83 ec 0c             	sub    esp,0xc
c0001726:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000172a:	50                   	push   eax
c000172b:	e8 b4 f8 ff ff       	call   c0000fe4 <dlmalloc>
c0001730:	83 c4 10             	add    esp,0x10
c0001733:	89 c1                	mov    ecx,eax
c0001735:	85 c0                	test   eax,eax
c0001737:	74 d1                	je     c000170a <dlmemalign+0x46>
c0001739:	31 d2                	xor    edx,edx
c000173b:	8d 70 f8             	lea    esi,[eax-0x8]
c000173e:	f7 f7                	div    edi
c0001740:	85 d2                	test   edx,edx
c0001742:	74 62                	je     c00017a6 <dlmemalign+0xe2>
c0001744:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001748:	89 f8                	mov    eax,edi
c000174a:	f7 d8                	neg    eax
c000174c:	21 c3                	and    ebx,eax
c000174e:	83 eb 08             	sub    ebx,0x8
c0001751:	89 d8                	mov    eax,ebx
c0001753:	29 f0                	sub    eax,esi
c0001755:	83 f8 0f             	cmp    eax,0xf
c0001758:	77 02                	ja     c000175c <dlmemalign+0x98>
c000175a:	01 fb                	add    ebx,edi
c000175c:	89 d8                	mov    eax,ebx
c000175e:	29 f0                	sub    eax,esi
c0001760:	89 c6                	mov    esi,eax
c0001762:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001765:	89 c2                	mov    edx,eax
c0001767:	83 e2 fc             	and    edx,0xfffffffc
c000176a:	29 f2                	sub    edx,esi
c000176c:	a8 02                	test   al,0x2
c000176e:	74 10                	je     c0001780 <dlmemalign+0xbc>
c0001770:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001773:	83 ca 02             	or     edx,0x2
c0001776:	8d 43 08             	lea    eax,[ebx+0x8]
c0001779:	89 33                	mov    DWORD PTR [ebx],esi
c000177b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000177e:	eb 5f                	jmp    c00017df <dlmemalign+0x11b>
c0001780:	83 ec 0c             	sub    esp,0xc
c0001783:	89 d0                	mov    eax,edx
c0001785:	83 c8 01             	or     eax,0x1
c0001788:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000178b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001790:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001793:	83 e0 01             	and    eax,0x1
c0001796:	09 f0                	or     eax,esi
c0001798:	89 de                	mov    esi,ebx
c000179a:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000179d:	51                   	push   ecx
c000179e:	e8 e6 f4 ff ff       	call   c0000c89 <dlfree>
c00017a3:	83 c4 10             	add    esp,0x10
c00017a6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017a9:	a8 02                	test   al,0x2
c00017ab:	75 2f                	jne    c00017dc <dlmemalign+0x118>
c00017ad:	83 e0 fc             	and    eax,0xfffffffc
c00017b0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017b3:	39 c2                	cmp    edx,eax
c00017b5:	73 25                	jae    c00017dc <dlmemalign+0x118>
c00017b7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ba:	83 ec 0c             	sub    esp,0xc
c00017bd:	29 e8                	sub    eax,ebp
c00017bf:	83 c2 08             	add    edx,0x8
c00017c2:	83 c8 01             	or     eax,0x1
c00017c5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017c8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017cb:	83 e0 01             	and    eax,0x1
c00017ce:	09 c5                	or     ebp,eax
c00017d0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017d3:	52                   	push   edx
c00017d4:	e8 b0 f4 ff ff       	call   c0000c89 <dlfree>
c00017d9:	83 c4 10             	add    esp,0x10
c00017dc:	8d 46 08             	lea    eax,[esi+0x8]
c00017df:	83 c4 0c             	add    esp,0xc
c00017e2:	5b                   	pop    ebx
c00017e3:	5e                   	pop    esi
c00017e4:	5f                   	pop    edi
c00017e5:	5d                   	pop    ebp
c00017e6:	c3                   	ret    

c00017e7 <dlcalloc>:
c00017e7:	53                   	push   ebx
c00017e8:	83 ec 14             	sub    esp,0x14
c00017eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ef:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00017f4:	50                   	push   eax
c00017f5:	e8 ea f7 ff ff       	call   c0000fe4 <dlmalloc>
c00017fa:	83 c4 10             	add    esp,0x10
c00017fd:	89 c3                	mov    ebx,eax
c00017ff:	85 c0                	test   eax,eax
c0001801:	74 77                	je     c000187a <dlcalloc+0x93>
c0001803:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001806:	89 d0                	mov    eax,edx
c0001808:	83 e0 fc             	and    eax,0xfffffffc
c000180b:	80 e2 02             	and    dl,0x2
c000180e:	75 5a                	jne    c000186a <dlcalloc+0x83>
c0001810:	83 e8 04             	sub    eax,0x4
c0001813:	83 f8 27             	cmp    eax,0x27
c0001816:	76 03                	jbe    c000181b <dlcalloc+0x34>
c0001818:	51                   	push   ecx
c0001819:	eb 53                	jmp    c000186e <dlcalloc+0x87>
c000181b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001821:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001828:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000182f:	83 f8 13             	cmp    eax,0x13
c0001832:	76 46                	jbe    c000187a <dlcalloc+0x93>
c0001834:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000183b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001842:	83 f8 1b             	cmp    eax,0x1b
c0001845:	76 33                	jbe    c000187a <dlcalloc+0x93>
c0001847:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000184e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001855:	83 f8 23             	cmp    eax,0x23
c0001858:	76 20                	jbe    c000187a <dlcalloc+0x93>
c000185a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001861:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001868:	eb 10                	jmp    c000187a <dlcalloc+0x93>
c000186a:	83 e8 08             	sub    eax,0x8
c000186d:	52                   	push   edx
c000186e:	50                   	push   eax
c000186f:	6a 00                	push   0x0
c0001871:	53                   	push   ebx
c0001872:	e8 49 ec ff ff       	call   c00004c0 <memset>
c0001877:	83 c4 10             	add    esp,0x10
c000187a:	89 d8                	mov    eax,ebx
c000187c:	83 c4 08             	add    esp,0x8
c000187f:	5b                   	pop    ebx
c0001880:	c3                   	ret    

c0001881 <dlcfree>:
c0001881:	e9 03 f4 ff ff       	jmp    c0000c89 <dlfree>

c0001886 <dlindependent_calloc>:
c0001886:	83 ec 28             	sub    esp,0x28
c0001889:	b9 03 00 00 00       	mov    ecx,0x3
c000188e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001892:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001896:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000189a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	e8 cb fa ff ff       	call   c0001372 <iALLOc>
c00018a7:	83 c4 2c             	add    esp,0x2c
c00018aa:	c3                   	ret    

c00018ab <dlindependent_comalloc>:
c00018ab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018b3:	31 c9                	xor    ecx,ecx
c00018b5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018b9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018bd:	e9 b0 fa ff ff       	jmp    c0001372 <iALLOc>

c00018c2 <dlvalloc>:
c00018c2:	83 ec 0c             	sub    esp,0xc
c00018c5:	83 3d 00 31 02 c0 00 	cmp    DWORD PTR ds:0xc0023100,0x0
c00018cc:	75 0a                	jne    c00018d8 <dlvalloc+0x16>
c00018ce:	b8 00 31 02 c0       	mov    eax,0xc0023100
c00018d3:	e8 ca f2 ff ff       	call   c0000ba2 <malloc_consolidate>
c00018d8:	50                   	push   eax
c00018d9:	50                   	push   eax
c00018da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018de:	ff 35 5c 34 02 c0    	push   DWORD PTR ds:0xc002345c
c00018e4:	e8 db fd ff ff       	call   c00016c4 <dlmemalign>
c00018e9:	83 c4 1c             	add    esp,0x1c
c00018ec:	c3                   	ret    

c00018ed <dlpvalloc>:
c00018ed:	83 ec 0c             	sub    esp,0xc
c00018f0:	83 3d 00 31 02 c0 00 	cmp    DWORD PTR ds:0xc0023100,0x0
c00018f7:	75 0a                	jne    c0001903 <dlpvalloc+0x16>
c00018f9:	b8 00 31 02 c0       	mov    eax,0xc0023100
c00018fe:	e8 9f f2 ff ff       	call   c0000ba2 <malloc_consolidate>
c0001903:	a1 5c 34 02 c0       	mov    eax,ds:0xc002345c
c0001908:	89 c1                	mov    ecx,eax
c000190a:	52                   	push   edx
c000190b:	f7 d9                	neg    ecx
c000190d:	52                   	push   edx
c000190e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001912:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001916:	21 ca                	and    edx,ecx
c0001918:	52                   	push   edx
c0001919:	50                   	push   eax
c000191a:	e8 a5 fd ff ff       	call   c00016c4 <dlmemalign>
c000191f:	83 c4 1c             	add    esp,0x1c
c0001922:	c3                   	ret    

c0001923 <dlmalloc_trim>:
c0001923:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001928:	e8 75 f2 ff ff       	call   c0000ba2 <malloc_consolidate>
c000192d:	31 c0                	xor    eax,eax
c000192f:	c3                   	ret    

c0001930 <dlmalloc_usable_size>:
c0001930:	53                   	push   ebx
c0001931:	31 c0                	xor    eax,eax
c0001933:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001937:	85 c9                	test   ecx,ecx
c0001939:	74 24                	je     c000195f <dlmalloc_usable_size+0x2f>
c000193b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000193e:	f6 c2 02             	test   dl,0x2
c0001941:	74 08                	je     c000194b <dlmalloc_usable_size+0x1b>
c0001943:	83 e2 fc             	and    edx,0xfffffffc
c0001946:	8d 42 f8             	lea    eax,[edx-0x8]
c0001949:	eb 14                	jmp    c000195f <dlmalloc_usable_size+0x2f>
c000194b:	89 d3                	mov    ebx,edx
c000194d:	31 c0                	xor    eax,eax
c000194f:	83 e3 fe             	and    ebx,0xfffffffe
c0001952:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001957:	74 06                	je     c000195f <dlmalloc_usable_size+0x2f>
c0001959:	83 e2 fc             	and    edx,0xfffffffc
c000195c:	8d 42 fc             	lea    eax,[edx-0x4]
c000195f:	5b                   	pop    ebx
c0001960:	c3                   	ret    

c0001961 <dlmallinfo>:
c0001961:	55                   	push   ebp
c0001962:	57                   	push   edi
c0001963:	56                   	push   esi
c0001964:	53                   	push   ebx
c0001965:	83 ec 08             	sub    esp,0x8
c0001968:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000196c:	83 3d 2c 31 02 c0 00 	cmp    DWORD PTR ds:0xc002312c,0x0
c0001973:	75 0a                	jne    c000197f <dlmallinfo+0x1e>
c0001975:	b8 00 31 02 c0       	mov    eax,0xc0023100
c000197a:	e8 23 f2 ff ff       	call   c0000ba2 <malloc_consolidate>
c000197f:	a1 2c 31 02 c0       	mov    eax,ds:0xc002312c
c0001984:	31 ed                	xor    ebp,ebp
c0001986:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001989:	31 c9                	xor    ecx,ecx
c000198b:	83 e0 fc             	and    eax,0xfffffffc
c000198e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001992:	31 c0                	xor    eax,eax
c0001994:	8b 14 85 04 31 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcefc]
c000199b:	85 d2                	test   edx,edx
c000199d:	74 0e                	je     c00019ad <dlmallinfo+0x4c>
c000199f:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019a2:	45                   	inc    ebp
c00019a3:	83 e6 fc             	and    esi,0xfffffffc
c00019a6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019a9:	01 f1                	add    ecx,esi
c00019ab:	eb ee                	jmp    c000199b <dlmallinfo+0x3a>
c00019ad:	40                   	inc    eax
c00019ae:	83 f8 0a             	cmp    eax,0xa
c00019b1:	75 e1                	jne    c0001994 <dlmallinfo+0x33>
c00019b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019be:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019c1:	b8 34 31 02 c0       	mov    eax,0xc0023134
c00019c6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019c9:	39 f0                	cmp    eax,esi
c00019cb:	74 10                	je     c00019dd <dlmallinfo+0x7c>
c00019cd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019d0:	ff 04 24             	inc    DWORD PTR [esp]
c00019d3:	83 e7 fc             	and    edi,0xfffffffc
c00019d6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019d9:	01 fa                	add    edx,edi
c00019db:	eb ec                	jmp    c00019c9 <dlmallinfo+0x68>
c00019dd:	83 c0 08             	add    eax,0x8
c00019e0:	3d 2c 34 02 c0       	cmp    eax,0xc002342c
c00019e5:	75 df                	jne    c00019c6 <dlmallinfo+0x65>
c00019e7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019ea:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019ed:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c00019f0:	a1 68 34 02 c0       	mov    eax,ds:0xc0023468
c00019f5:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00019f8:	89 03                	mov    DWORD PTR [ebx],eax
c00019fa:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00019fd:	8b 35 50 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023450
c0001a03:	29 d0                	sub    eax,edx
c0001a05:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a08:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a0b:	8b 35 64 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023464
c0001a11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a15:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a18:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a1b:	8b 35 74 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023474
c0001a21:	89 d8                	mov    eax,ebx
c0001a23:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a26:	83 c4 08             	add    esp,0x8
c0001a29:	5b                   	pop    ebx
c0001a2a:	5e                   	pop    esi
c0001a2b:	5f                   	pop    edi
c0001a2c:	5d                   	pop    ebp
c0001a2d:	c2 04 00             	ret    0x4

c0001a30 <dlmalloc_stats>:
c0001a30:	83 ec 30             	sub    esp,0x30
c0001a33:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a37:	50                   	push   eax
c0001a38:	e8 24 ff ff ff       	call   c0001961 <dlmallinfo>
c0001a3d:	83 c4 30             	add    esp,0x30
c0001a40:	c3                   	ret    

c0001a41 <dlmallopt>:
c0001a41:	56                   	push   esi
c0001a42:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001a47:	53                   	push   ebx
c0001a48:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a4c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a50:	e8 4d f1 ff ff       	call   c0000ba2 <malloc_consolidate>
c0001a55:	8d 46 04             	lea    eax,[esi+0x4]
c0001a58:	83 f8 05             	cmp    eax,0x5
c0001a5b:	77 67                	ja     c0001ac4 <dlmallopt+0x83>
c0001a5d:	ff 24 85 44 eb 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe14bc]
c0001a64:	83 fb 50             	cmp    ebx,0x50
c0001a67:	77 5b                	ja     c0001ac4 <dlmallopt+0x83>
c0001a69:	ba 08 00 00 00       	mov    edx,0x8
c0001a6e:	85 db                	test   ebx,ebx
c0001a70:	74 12                	je     c0001a84 <dlmallopt+0x43>
c0001a72:	83 c3 0b             	add    ebx,0xb
c0001a75:	ba 10 00 00 00       	mov    edx,0x10
c0001a7a:	83 fb 0f             	cmp    ebx,0xf
c0001a7d:	76 05                	jbe    c0001a84 <dlmallopt+0x43>
c0001a7f:	89 da                	mov    edx,ebx
c0001a81:	83 e2 f8             	and    edx,0xfffffff8
c0001a84:	a1 00 31 02 c0       	mov    eax,ds:0xc0023100
c0001a89:	83 e0 03             	and    eax,0x3
c0001a8c:	09 d0                	or     eax,edx
c0001a8e:	a3 00 31 02 c0       	mov    ds:0xc0023100,eax
c0001a93:	eb 31                	jmp    c0001ac6 <dlmallopt+0x85>
c0001a95:	89 1d 44 34 02 c0    	mov    DWORD PTR ds:0xc0023444,ebx
c0001a9b:	eb 06                	jmp    c0001aa3 <dlmallopt+0x62>
c0001a9d:	89 1d 48 34 02 c0    	mov    DWORD PTR ds:0xc0023448,ebx
c0001aa3:	be 01 00 00 00       	mov    esi,0x1
c0001aa8:	eb 1c                	jmp    c0001ac6 <dlmallopt+0x85>
c0001aaa:	89 1d 4c 34 02 c0    	mov    DWORD PTR ds:0xc002344c,ebx
c0001ab0:	eb f1                	jmp    c0001aa3 <dlmallopt+0x62>
c0001ab2:	31 f6                	xor    esi,esi
c0001ab4:	85 db                	test   ebx,ebx
c0001ab6:	75 0e                	jne    c0001ac6 <dlmallopt+0x85>
c0001ab8:	c7 05 54 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023454,0x0
c0001ac2:	eb df                	jmp    c0001aa3 <dlmallopt+0x62>
c0001ac4:	31 f6                	xor    esi,esi
c0001ac6:	89 f0                	mov    eax,esi
c0001ac8:	5b                   	pop    ebx
c0001ac9:	5e                   	pop    esi
c0001aca:	c3                   	ret    
c0001acb:	90                   	nop

c0001acc <isblank>:
c0001acc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ad1:	74 09                	je     c0001adc <isblank+0x10>
c0001ad3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ad8:	75 0a                	jne    c0001ae4 <isblank+0x18>
c0001ada:	66 90                	xchg   ax,ax
c0001adc:	b8 01 00 00 00       	mov    eax,0x1
c0001ae1:	c3                   	ret    
c0001ae2:	66 90                	xchg   ax,ax
c0001ae4:	b8 00 00 00 00       	mov    eax,0x0
c0001ae9:	c3                   	ret    
c0001aea:	66 90                	xchg   ax,ax

c0001aec <iscntrl>:
c0001aec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001af1:	7e 09                	jle    c0001afc <iscntrl+0x10>
c0001af3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001af8:	75 0a                	jne    c0001b04 <iscntrl+0x18>
c0001afa:	66 90                	xchg   ax,ax
c0001afc:	b8 01 00 00 00       	mov    eax,0x1
c0001b01:	c3                   	ret    
c0001b02:	66 90                	xchg   ax,ax
c0001b04:	b8 00 00 00 00       	mov    eax,0x0
c0001b09:	c3                   	ret    
c0001b0a:	66 90                	xchg   ax,ax

c0001b0c <isdigit>:
c0001b0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b11:	7e 0d                	jle    c0001b20 <isdigit+0x14>
c0001b13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b18:	7f 06                	jg     c0001b20 <isdigit+0x14>
c0001b1a:	b8 01 00 00 00       	mov    eax,0x1
c0001b1f:	c3                   	ret    
c0001b20:	b8 00 00 00 00       	mov    eax,0x0
c0001b25:	c3                   	ret    
c0001b26:	66 90                	xchg   ax,ax

c0001b28 <islower>:
c0001b28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b2d:	7e 0d                	jle    c0001b3c <islower+0x14>
c0001b2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b34:	7f 06                	jg     c0001b3c <islower+0x14>
c0001b36:	b8 01 00 00 00       	mov    eax,0x1
c0001b3b:	c3                   	ret    
c0001b3c:	b8 00 00 00 00       	mov    eax,0x0
c0001b41:	c3                   	ret    
c0001b42:	66 90                	xchg   ax,ax

c0001b44 <isspace>:
c0001b44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b49:	7c 19                	jl     c0001b64 <isspace+0x20>
c0001b4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b50:	7e 0a                	jle    c0001b5c <isspace+0x18>
c0001b52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b57:	75 0b                	jne    c0001b64 <isspace+0x20>
c0001b59:	8d 76 00             	lea    esi,[esi+0x0]
c0001b5c:	b8 01 00 00 00       	mov    eax,0x1
c0001b61:	c3                   	ret    
c0001b62:	66 90                	xchg   ax,ax
c0001b64:	b8 00 00 00 00       	mov    eax,0x0
c0001b69:	c3                   	ret    
c0001b6a:	66 90                	xchg   ax,ax

c0001b6c <isupper>:
c0001b6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b71:	7e 0d                	jle    c0001b80 <isupper+0x14>
c0001b73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b78:	7f 06                	jg     c0001b80 <isupper+0x14>
c0001b7a:	b8 01 00 00 00       	mov    eax,0x1
c0001b7f:	c3                   	ret    
c0001b80:	b8 00 00 00 00       	mov    eax,0x0
c0001b85:	c3                   	ret    
c0001b86:	66 90                	xchg   ax,ax

c0001b88 <isalpha>:
c0001b88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b8c:	e8 db ff ff ff       	call   c0001b6c <isupper>
c0001b91:	83 c4 04             	add    esp,0x4
c0001b94:	85 c0                	test   eax,eax
c0001b96:	75 10                	jne    c0001ba8 <isalpha+0x20>
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 87 ff ff ff       	call   c0001b28 <islower>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	74 08                	je     c0001bb0 <isalpha+0x28>
c0001ba8:	b8 01 00 00 00       	mov    eax,0x1
c0001bad:	c3                   	ret    
c0001bae:	66 90                	xchg   ax,ax
c0001bb0:	b8 00 00 00 00       	mov    eax,0x0
c0001bb5:	c3                   	ret    
c0001bb6:	66 90                	xchg   ax,ax

c0001bb8 <isalnum>:
c0001bb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bbc:	e8 c7 ff ff ff       	call   c0001b88 <isalpha>
c0001bc1:	83 c4 04             	add    esp,0x4
c0001bc4:	85 c0                	test   eax,eax
c0001bc6:	75 10                	jne    c0001bd8 <isalnum+0x20>
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 3b ff ff ff       	call   c0001b0c <isdigit>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	74 08                	je     c0001be0 <isalnum+0x28>
c0001bd8:	b8 01 00 00 00       	mov    eax,0x1
c0001bdd:	c3                   	ret    
c0001bde:	66 90                	xchg   ax,ax
c0001be0:	b8 00 00 00 00       	mov    eax,0x0
c0001be5:	c3                   	ret    
c0001be6:	66 90                	xchg   ax,ax

c0001be8 <ispunct>:
c0001be8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bec:	e8 c7 ff ff ff       	call   c0001bb8 <isalnum>
c0001bf1:	83 c4 04             	add    esp,0x4
c0001bf4:	85 c0                	test   eax,eax
c0001bf6:	75 28                	jne    c0001c20 <ispunct+0x38>
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 43 ff ff ff       	call   c0001b44 <isspace>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 18                	jne    c0001c20 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 db fe ff ff       	call   c0001aec <iscntrl>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 08                	jne    c0001c20 <ispunct+0x38>
c0001c18:	b8 01 00 00 00       	mov    eax,0x1
c0001c1d:	c3                   	ret    
c0001c1e:	66 90                	xchg   ax,ax
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <isgraph>:
c0001c28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c2c:	e8 87 ff ff ff       	call   c0001bb8 <isalnum>
c0001c31:	83 c4 04             	add    esp,0x4
c0001c34:	85 c0                	test   eax,eax
c0001c36:	75 10                	jne    c0001c48 <isgraph+0x20>
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 a7 ff ff ff       	call   c0001be8 <ispunct>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	74 08                	je     c0001c50 <isgraph+0x28>
c0001c48:	b8 01 00 00 00       	mov    eax,0x1
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax
c0001c50:	b8 00 00 00 00       	mov    eax,0x0
c0001c55:	c3                   	ret    
c0001c56:	66 90                	xchg   ax,ax

c0001c58 <isprint>:
c0001c58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c5c:	e8 c7 ff ff ff       	call   c0001c28 <isgraph>
c0001c61:	83 c4 04             	add    esp,0x4
c0001c64:	85 c0                	test   eax,eax
c0001c66:	75 08                	jne    c0001c70 <isprint+0x18>
c0001c68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c6d:	75 09                	jne    c0001c78 <isprint+0x20>
c0001c6f:	90                   	nop
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isxdigit>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 83 fe ff ff       	call   c0001b0c <isdigit>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 20                	jne    c0001cb0 <isxdigit+0x30>
c0001c90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c95:	7e 09                	jle    c0001ca0 <isxdigit+0x20>
c0001c97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001c9c:	7e 12                	jle    c0001cb0 <isxdigit+0x30>
c0001c9e:	66 90                	xchg   ax,ax
c0001ca0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001ca5:	7e 11                	jle    c0001cb8 <isxdigit+0x38>
c0001ca7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cac:	7f 0a                	jg     c0001cb8 <isxdigit+0x38>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 01 00 00 00       	mov    eax,0x1
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax
c0001cb8:	b8 00 00 00 00       	mov    eax,0x0
c0001cbd:	c3                   	ret    

c0001cbe <disk_status>:
c0001cbe:	31 c0                	xor    eax,eax
c0001cc0:	c3                   	ret    

c0001cc1 <disk_initialize>:
c0001cc1:	31 c0                	xor    eax,eax
c0001cc3:	c3                   	ret    

c0001cc4 <disk_read>:
c0001cc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cc9:	0f b6 04 85 c0 72 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8d40]
c0001cd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cd5:	e9 36 65 01 00       	jmp    c0018210 <fatWrapperReadDisk>

c0001cda <disk_write>:
c0001cda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cdf:	0f b6 04 85 c0 72 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8d40]
c0001ce7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ceb:	e9 64 65 01 00       	jmp    c0018254 <fatWrapperWriteDisk>

c0001cf0 <disk_ioctl>:
c0001cf0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001cf5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001cf9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cfe:	0f b6 04 85 c0 72 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8d40]
c0001d06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d0a:	e9 89 65 01 00       	jmp    c0018298 <fatWrapperIoctl>

c0001d0f <ld_word>:
c0001d0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d16:	c1 e2 08             	shl    edx,0x8
c0001d19:	09 d0                	or     eax,edx
c0001d1b:	c3                   	ret    

c0001d1c <ld_dword>:
c0001d1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d20:	89 d1                	mov    ecx,edx
c0001d22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d26:	c1 e1 08             	shl    ecx,0x8
c0001d29:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d2c:	09 ca                	or     edx,ecx
c0001d2e:	c1 e2 08             	shl    edx,0x8
c0001d31:	09 d0                	or     eax,edx
c0001d33:	c3                   	ret    

c0001d34 <st_word>:
c0001d34:	66 89 10             	mov    WORD PTR [eax],dx
c0001d37:	c3                   	ret    

c0001d38 <st_dword>:
c0001d38:	89 10                	mov    DWORD PTR [eax],edx
c0001d3a:	c3                   	ret    

c0001d3b <mem_cpy>:
c0001d3b:	85 c9                	test   ecx,ecx
c0001d3d:	74 10                	je     c0001d4f <mem_cpy+0x14>
c0001d3f:	57                   	push   edi
c0001d40:	01 c1                	add    ecx,eax
c0001d42:	56                   	push   esi
c0001d43:	89 c7                	mov    edi,eax
c0001d45:	89 d6                	mov    esi,edx
c0001d47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d48:	39 f9                	cmp    ecx,edi
c0001d4a:	75 fb                	jne    c0001d47 <mem_cpy+0xc>
c0001d4c:	5e                   	pop    esi
c0001d4d:	5f                   	pop    edi
c0001d4e:	c3                   	ret    
c0001d4f:	c3                   	ret    

c0001d50 <mem_set>:
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	40                   	inc    eax
c0001d53:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d56:	39 c8                	cmp    eax,ecx
c0001d58:	75 f8                	jne    c0001d52 <mem_set+0x2>
c0001d5a:	c3                   	ret    

c0001d5b <mem_cmp>:
c0001d5b:	57                   	push   edi
c0001d5c:	56                   	push   esi
c0001d5d:	89 c6                	mov    esi,eax
c0001d5f:	53                   	push   ebx
c0001d60:	46                   	inc    esi
c0001d61:	42                   	inc    edx
c0001d62:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d66:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d6a:	29 fb                	sub    ebx,edi
c0001d6c:	89 cf                	mov    edi,ecx
c0001d6e:	29 f7                	sub    edi,esi
c0001d70:	01 c7                	add    edi,eax
c0001d72:	74 04                	je     c0001d78 <mem_cmp+0x1d>
c0001d74:	85 db                	test   ebx,ebx
c0001d76:	74 e8                	je     c0001d60 <mem_cmp+0x5>
c0001d78:	89 d8                	mov    eax,ebx
c0001d7a:	5b                   	pop    ebx
c0001d7b:	5e                   	pop    esi
c0001d7c:	5f                   	pop    edi
c0001d7d:	c3                   	ret    

c0001d7e <chk_chr>:
c0001d7e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d81:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d84:	74 07                	je     c0001d8d <chk_chr+0xf>
c0001d86:	39 d1                	cmp    ecx,edx
c0001d88:	74 03                	je     c0001d8d <chk_chr+0xf>
c0001d8a:	40                   	inc    eax
c0001d8b:	eb f1                	jmp    c0001d7e <chk_chr>
c0001d8d:	89 c8                	mov    eax,ecx
c0001d8f:	c3                   	ret    

c0001d90 <dbc_1st>:
c0001d90:	31 c0                	xor    eax,eax
c0001d92:	c3                   	ret    

c0001d93 <dbc_2nd>:
c0001d93:	31 c0                	xor    eax,eax
c0001d95:	c3                   	ret    

c0001d96 <tchar2uni>:
c0001d96:	57                   	push   edi
c0001d97:	89 c7                	mov    edi,eax
c0001d99:	56                   	push   esi
c0001d9a:	53                   	push   ebx
c0001d9b:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d9d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d9f:	8d 73 01             	lea    esi,[ebx+0x1]
c0001da2:	84 c9                	test   cl,cl
c0001da4:	78 0a                	js     c0001db0 <tchar2uni+0x1a>
c0001da6:	0f b6 d1             	movzx  edx,cl
c0001da9:	89 f3                	mov    ebx,esi
c0001dab:	e9 9f 00 00 00       	jmp    c0001e4f <tchar2uni+0xb9>
c0001db0:	88 ca                	mov    dl,cl
c0001db2:	83 e2 e0             	and    edx,0xffffffe0
c0001db5:	80 fa c0             	cmp    dl,0xc0
c0001db8:	75 0c                	jne    c0001dc6 <tchar2uni+0x30>
c0001dba:	89 ca                	mov    edx,ecx
c0001dbc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dc1:	83 e2 1f             	and    edx,0x1f
c0001dc4:	eb 2e                	jmp    c0001df4 <tchar2uni+0x5e>
c0001dc6:	88 ca                	mov    dl,cl
c0001dc8:	83 e2 f0             	and    edx,0xfffffff0
c0001dcb:	80 fa e0             	cmp    dl,0xe0
c0001dce:	75 0c                	jne    c0001ddc <tchar2uni+0x46>
c0001dd0:	89 ca                	mov    edx,ecx
c0001dd2:	b9 02 00 00 00       	mov    ecx,0x2
c0001dd7:	83 e2 0f             	and    edx,0xf
c0001dda:	eb 18                	jmp    c0001df4 <tchar2uni+0x5e>
c0001ddc:	88 ca                	mov    dl,cl
c0001dde:	83 e2 f8             	and    edx,0xfffffff8
c0001de1:	88 d0                	mov    al,dl
c0001de3:	83 ca ff             	or     edx,0xffffffff
c0001de6:	3c f0                	cmp    al,0xf0
c0001de8:	75 6c                	jne    c0001e56 <tchar2uni+0xc0>
c0001dea:	89 ca                	mov    edx,ecx
c0001dec:	b9 03 00 00 00       	mov    ecx,0x3
c0001df1:	83 e2 07             	and    edx,0x7
c0001df4:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001df8:	46                   	inc    esi
c0001df9:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001dfc:	88 c8                	mov    al,cl
c0001dfe:	83 e0 c0             	and    eax,0xffffffc0
c0001e01:	3c 80                	cmp    al,0x80
c0001e03:	75 4e                	jne    c0001e53 <tchar2uni+0xbd>
c0001e05:	c1 e2 06             	shl    edx,0x6
c0001e08:	83 e1 3f             	and    ecx,0x3f
c0001e0b:	09 ca                	or     edx,ecx
c0001e0d:	39 de                	cmp    esi,ebx
c0001e0f:	75 e7                	jne    c0001df8 <tchar2uni+0x62>
c0001e11:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e14:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e1a:	77 37                	ja     c0001e53 <tchar2uni+0xbd>
c0001e1c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e22:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e28:	76 29                	jbe    c0001e53 <tchar2uni+0xbd>
c0001e2a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e30:	76 1d                	jbe    c0001e4f <tchar2uni+0xb9>
c0001e32:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e38:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e3e:	c1 e1 06             	shl    ecx,0x6
c0001e41:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e47:	09 ca                	or     edx,ecx
c0001e49:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e4f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e51:	eb 03                	jmp    c0001e56 <tchar2uni+0xc0>
c0001e53:	83 ca ff             	or     edx,0xffffffff
c0001e56:	5b                   	pop    ebx
c0001e57:	89 d0                	mov    eax,edx
c0001e59:	5e                   	pop    esi
c0001e5a:	5f                   	pop    edi
c0001e5b:	c3                   	ret    

c0001e5c <put_utf>:
c0001e5c:	53                   	push   ebx
c0001e5d:	83 f8 7f             	cmp    eax,0x7f
c0001e60:	89 c3                	mov    ebx,eax
c0001e62:	b0 00                	mov    al,0x0
c0001e64:	77 11                	ja     c0001e77 <put_utf+0x1b>
c0001e66:	85 c9                	test   ecx,ecx
c0001e68:	0f 84 e5 00 00 00    	je     c0001f53 <put_utf+0xf7>
c0001e6e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e70:	b0 01                	mov    al,0x1
c0001e72:	e9 dc 00 00 00       	jmp    c0001f53 <put_utf+0xf7>
c0001e77:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e7d:	77 23                	ja     c0001ea2 <put_utf+0x46>
c0001e7f:	83 f9 01             	cmp    ecx,0x1
c0001e82:	0f 86 cb 00 00 00    	jbe    c0001f53 <put_utf+0xf7>
c0001e88:	89 d8                	mov    eax,ebx
c0001e8a:	83 e3 3f             	and    ebx,0x3f
c0001e8d:	c1 e8 06             	shr    eax,0x6
c0001e90:	83 cb 80             	or     ebx,0xffffff80
c0001e93:	83 c8 c0             	or     eax,0xffffffc0
c0001e96:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e99:	88 02                	mov    BYTE PTR [edx],al
c0001e9b:	b0 02                	mov    al,0x2
c0001e9d:	e9 b1 00 00 00       	jmp    c0001f53 <put_utf+0xf7>
c0001ea2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001ea8:	77 40                	ja     c0001eea <put_utf+0x8e>
c0001eaa:	83 f9 02             	cmp    ecx,0x2
c0001ead:	0f 86 a0 00 00 00    	jbe    c0001f53 <put_utf+0xf7>
c0001eb3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001eb9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ebf:	0f 86 8e 00 00 00    	jbe    c0001f53 <put_utf+0xf7>
c0001ec5:	89 d8                	mov    eax,ebx
c0001ec7:	c1 e8 0c             	shr    eax,0xc
c0001eca:	83 c8 e0             	or     eax,0xffffffe0
c0001ecd:	88 02                	mov    BYTE PTR [edx],al
c0001ecf:	89 d8                	mov    eax,ebx
c0001ed1:	83 e3 3f             	and    ebx,0x3f
c0001ed4:	c1 e8 06             	shr    eax,0x6
c0001ed7:	83 cb 80             	or     ebx,0xffffff80
c0001eda:	83 e0 3f             	and    eax,0x3f
c0001edd:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ee0:	83 c8 80             	or     eax,0xffffff80
c0001ee3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ee6:	b0 03                	mov    al,0x3
c0001ee8:	eb 69                	jmp    c0001f53 <put_utf+0xf7>
c0001eea:	83 f9 03             	cmp    ecx,0x3
c0001eed:	76 64                	jbe    c0001f53 <put_utf+0xf7>
c0001eef:	89 d9                	mov    ecx,ebx
c0001ef1:	0f b7 c3             	movzx  eax,bx
c0001ef4:	66 31 c9             	xor    cx,cx
c0001ef7:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001efd:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f03:	c1 e9 06             	shr    ecx,0x6
c0001f06:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f0c:	77 43                	ja     c0001f51 <put_utf+0xf5>
c0001f0e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f14:	77 3b                	ja     c0001f51 <put_utf+0xf5>
c0001f16:	09 cb                	or     ebx,ecx
c0001f18:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f1e:	89 d8                	mov    eax,ebx
c0001f20:	c1 e8 12             	shr    eax,0x12
c0001f23:	83 c8 f0             	or     eax,0xfffffff0
c0001f26:	88 02                	mov    BYTE PTR [edx],al
c0001f28:	89 d8                	mov    eax,ebx
c0001f2a:	c1 e8 0c             	shr    eax,0xc
c0001f2d:	83 e0 3f             	and    eax,0x3f
c0001f30:	83 c8 80             	or     eax,0xffffff80
c0001f33:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f36:	89 d8                	mov    eax,ebx
c0001f38:	83 e3 3f             	and    ebx,0x3f
c0001f3b:	c1 e8 06             	shr    eax,0x6
c0001f3e:	83 cb 80             	or     ebx,0xffffff80
c0001f41:	83 e0 3f             	and    eax,0x3f
c0001f44:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f47:	83 c8 80             	or     eax,0xffffff80
c0001f4a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f4d:	b0 04                	mov    al,0x4
c0001f4f:	eb 02                	jmp    c0001f53 <put_utf+0xf7>
c0001f51:	31 c0                	xor    eax,eax
c0001f53:	5b                   	pop    ebx
c0001f54:	c3                   	ret    

c0001f55 <clst2sect>:
c0001f55:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f58:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f5b:	83 ea 02             	sub    edx,0x2
c0001f5e:	39 ca                	cmp    edx,ecx
c0001f60:	76 0d                	jbe    c0001f6f <clst2sect+0x1a>
c0001f62:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f66:	0f af d1             	imul   edx,ecx
c0001f69:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f6c:	89 d0                	mov    eax,edx
c0001f6e:	c3                   	ret    
c0001f6f:	31 c0                	xor    eax,eax
c0001f71:	c3                   	ret    

c0001f72 <pick_lfn>:
c0001f72:	55                   	push   ebp
c0001f73:	57                   	push   edi
c0001f74:	56                   	push   esi
c0001f75:	89 d6                	mov    esi,edx
c0001f77:	53                   	push   ebx
c0001f78:	89 c3                	mov    ebx,eax
c0001f7a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f7d:	e8 8d fd ff ff       	call   c0001d0f <ld_word>
c0001f82:	66 85 c0             	test   ax,ax
c0001f85:	74 04                	je     c0001f8b <pick_lfn+0x19>
c0001f87:	31 c0                	xor    eax,eax
c0001f89:	eb 5c                	jmp    c0001fe7 <pick_lfn+0x75>
c0001f8b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f8e:	bd 01 00 00 00       	mov    ebp,0x1
c0001f93:	83 e1 bf             	and    ecx,0xffffffbf
c0001f96:	31 ff                	xor    edi,edi
c0001f98:	49                   	dec    ecx
c0001f99:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f9c:	0f b6 87 a0 ec 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe1360]
c0001fa3:	01 f0                	add    eax,esi
c0001fa5:	e8 65 fd ff ff       	call   c0001d0f <ld_word>
c0001faa:	66 85 ed             	test   bp,bp
c0001fad:	74 11                	je     c0001fc0 <pick_lfn+0x4e>
c0001faf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fb5:	77 d0                	ja     c0001f87 <pick_lfn+0x15>
c0001fb7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fbb:	89 c5                	mov    ebp,eax
c0001fbd:	41                   	inc    ecx
c0001fbe:	eb 04                	jmp    c0001fc4 <pick_lfn+0x52>
c0001fc0:	66 40                	inc    ax
c0001fc2:	75 c3                	jne    c0001f87 <pick_lfn+0x15>
c0001fc4:	47                   	inc    edi
c0001fc5:	83 ff 0d             	cmp    edi,0xd
c0001fc8:	75 d2                	jne    c0001f9c <pick_lfn+0x2a>
c0001fca:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fcd:	74 13                	je     c0001fe2 <pick_lfn+0x70>
c0001fcf:	66 85 ed             	test   bp,bp
c0001fd2:	74 0e                	je     c0001fe2 <pick_lfn+0x70>
c0001fd4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fda:	77 ab                	ja     c0001f87 <pick_lfn+0x15>
c0001fdc:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fe2:	b8 01 00 00 00       	mov    eax,0x1
c0001fe7:	5b                   	pop    ebx
c0001fe8:	5e                   	pop    esi
c0001fe9:	5f                   	pop    edi
c0001fea:	5d                   	pop    ebp
c0001feb:	c3                   	ret    

c0001fec <put_lfn>:
c0001fec:	55                   	push   ebp
c0001fed:	31 ed                	xor    ebp,ebp
c0001fef:	57                   	push   edi
c0001ff0:	89 d7                	mov    edi,edx
c0001ff2:	56                   	push   esi
c0001ff3:	31 f6                	xor    esi,esi
c0001ff5:	53                   	push   ebx
c0001ff6:	83 ec 08             	sub    esp,0x8
c0001ff9:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ffc:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002000:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002004:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000200a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000200d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002010:	31 d2                	xor    edx,edx
c0002012:	e8 1d fd ff ff       	call   c0001d34 <st_word>
c0002017:	0f b6 d9             	movzx  ebx,cl
c000201a:	4b                   	dec    ebx
c000201b:	6b db 0d             	imul   ebx,ebx,0xd
c000201e:	66 83 fe ff          	cmp    si,0xffff
c0002022:	74 08                	je     c000202c <put_lfn+0x40>
c0002024:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002027:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000202b:	43                   	inc    ebx
c000202c:	0f b6 85 a0 ec 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe1360]
c0002033:	0f b7 d6             	movzx  edx,si
c0002036:	01 f8                	add    eax,edi
c0002038:	e8 f7 fc ff ff       	call   c0001d34 <st_word>
c000203d:	66 85 f6             	test   si,si
c0002040:	75 03                	jne    c0002045 <put_lfn+0x59>
c0002042:	83 ce ff             	or     esi,0xffffffff
c0002045:	45                   	inc    ebp
c0002046:	83 fd 0d             	cmp    ebp,0xd
c0002049:	75 d3                	jne    c000201e <put_lfn+0x32>
c000204b:	66 46                	inc    si
c000204d:	74 0a                	je     c0002059 <put_lfn+0x6d>
c000204f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002052:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002057:	75 09                	jne    c0002062 <put_lfn+0x76>
c0002059:	88 c8                	mov    al,cl
c000205b:	83 c8 40             	or     eax,0x40
c000205e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002062:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002066:	88 07                	mov    BYTE PTR [edi],al
c0002068:	83 c4 08             	add    esp,0x8
c000206b:	5b                   	pop    ebx
c000206c:	5e                   	pop    esi
c000206d:	5f                   	pop    edi
c000206e:	5d                   	pop    ebp
c000206f:	c3                   	ret    

c0002070 <gen_numname>:
c0002070:	57                   	push   edi
c0002071:	89 cf                	mov    edi,ecx
c0002073:	56                   	push   esi
c0002074:	b9 0b 00 00 00       	mov    ecx,0xb
c0002079:	53                   	push   ebx
c000207a:	89 c6                	mov    esi,eax
c000207c:	83 ec 10             	sub    esp,0x10
c000207f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002083:	e8 b3 fc ff ff       	call   c0001d3b <mem_cpy>
c0002088:	83 fb 05             	cmp    ebx,0x5
c000208b:	76 2d                	jbe    c00020ba <gen_numname+0x4a>
c000208d:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002090:	66 85 c0             	test   ax,ax
c0002093:	74 25                	je     c00020ba <gen_numname+0x4a>
c0002095:	83 c7 02             	add    edi,0x2
c0002098:	ba 10 00 00 00       	mov    edx,0x10
c000209d:	01 db                	add    ebx,ebx
c000209f:	89 c1                	mov    ecx,eax
c00020a1:	66 d1 e8             	shr    ax,1
c00020a4:	83 e1 01             	and    ecx,0x1
c00020a7:	01 cb                	add    ebx,ecx
c00020a9:	0f ba e3 10          	bt     ebx,0x10
c00020ad:	73 06                	jae    c00020b5 <gen_numname+0x45>
c00020af:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020b5:	4a                   	dec    edx
c00020b6:	75 e5                	jne    c000209d <gen_numname+0x2d>
c00020b8:	eb d3                	jmp    c000208d <gen_numname+0x1d>
c00020ba:	b8 07 00 00 00       	mov    eax,0x7
c00020bf:	88 d9                	mov    cl,bl
c00020c1:	83 e1 0f             	and    ecx,0xf
c00020c4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020c7:	80 fa 39             	cmp    dl,0x39
c00020ca:	76 03                	jbe    c00020cf <gen_numname+0x5f>
c00020cc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020cf:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020d2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020d6:	89 da                	mov    edx,ebx
c00020d8:	c1 ea 04             	shr    edx,0x4
c00020db:	83 fb 0f             	cmp    ebx,0xf
c00020de:	76 06                	jbe    c00020e6 <gen_numname+0x76>
c00020e0:	89 c8                	mov    eax,ecx
c00020e2:	89 d3                	mov    ebx,edx
c00020e4:	eb d9                	jmp    c00020bf <gen_numname+0x4f>
c00020e6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020eb:	31 d2                	xor    edx,edx
c00020ed:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020f0:	8d 04 16             	lea    eax,[esi+edx*1]
c00020f3:	39 ca                	cmp    edx,ecx
c00020f5:	73 18                	jae    c000210f <gen_numname+0x9f>
c00020f7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020fa:	3c 20                	cmp    al,0x20
c00020fc:	74 11                	je     c000210f <gen_numname+0x9f>
c00020fe:	e8 8d fc ff ff       	call   c0001d90 <dbc_1st>
c0002103:	85 c0                	test   eax,eax
c0002105:	74 05                	je     c000210c <gen_numname+0x9c>
c0002107:	39 d3                	cmp    ebx,edx
c0002109:	74 04                	je     c000210f <gen_numname+0x9f>
c000210b:	42                   	inc    edx
c000210c:	42                   	inc    edx
c000210d:	eb e1                	jmp    c00020f0 <gen_numname+0x80>
c000210f:	b0 20                	mov    al,0x20
c0002111:	83 f9 07             	cmp    ecx,0x7
c0002114:	77 05                	ja     c000211b <gen_numname+0xab>
c0002116:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000211a:	41                   	inc    ecx
c000211b:	42                   	inc    edx
c000211c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002120:	83 fa 07             	cmp    edx,0x7
c0002123:	76 ea                	jbe    c000210f <gen_numname+0x9f>
c0002125:	83 c4 10             	add    esp,0x10
c0002128:	5b                   	pop    ebx
c0002129:	5e                   	pop    esi
c000212a:	5f                   	pop    edi
c000212b:	c3                   	ret    

c000212c <sum_sfn>:
c000212c:	31 c9                	xor    ecx,ecx
c000212e:	31 d2                	xor    edx,edx
c0002130:	d0 ca                	ror    dl,1
c0002132:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002135:	41                   	inc    ecx
c0002136:	83 f9 0b             	cmp    ecx,0xb
c0002139:	75 f5                	jne    c0002130 <sum_sfn+0x4>
c000213b:	88 d0                	mov    al,dl
c000213d:	c3                   	ret    

c000213e <get_ldnumber>:
c000213e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002140:	85 d2                	test   edx,edx
c0002142:	74 14                	je     c0002158 <get_ldnumber+0x1a>
c0002144:	56                   	push   esi
c0002145:	53                   	push   ebx
c0002146:	89 d3                	mov    ebx,edx
c0002148:	43                   	inc    ebx
c0002149:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000214c:	80 f9 1f             	cmp    cl,0x1f
c000214f:	76 0d                	jbe    c000215e <get_ldnumber+0x20>
c0002151:	80 f9 3a             	cmp    cl,0x3a
c0002154:	75 f2                	jne    c0002148 <get_ldnumber+0xa>
c0002156:	eb 0a                	jmp    c0002162 <get_ldnumber+0x24>
c0002158:	83 c9 ff             	or     ecx,0xffffffff
c000215b:	89 c8                	mov    eax,ecx
c000215d:	c3                   	ret    
c000215e:	31 c9                	xor    ecx,ecx
c0002160:	eb 24                	jmp    c0002186 <get_ldnumber+0x48>
c0002162:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002165:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002168:	80 f9 09             	cmp    cl,0x9
c000216b:	77 16                	ja     c0002183 <get_ldnumber+0x45>
c000216d:	83 c2 02             	add    edx,0x2
c0002170:	83 c9 ff             	or     ecx,0xffffffff
c0002173:	39 d3                	cmp    ebx,edx
c0002175:	75 0f                	jne    c0002186 <get_ldnumber+0x48>
c0002177:	89 f2                	mov    edx,esi
c0002179:	89 18                	mov    DWORD PTR [eax],ebx
c000217b:	0f be ca             	movsx  ecx,dl
c000217e:	83 e9 30             	sub    ecx,0x30
c0002181:	eb 03                	jmp    c0002186 <get_ldnumber+0x48>
c0002183:	83 c9 ff             	or     ecx,0xffffffff
c0002186:	89 c8                	mov    eax,ecx
c0002188:	5b                   	pop    ebx
c0002189:	5e                   	pop    esi
c000218a:	c3                   	ret    

c000218b <validate>:
c000218b:	56                   	push   esi
c000218c:	53                   	push   ebx
c000218d:	89 d6                	mov    esi,edx
c000218f:	51                   	push   ecx
c0002190:	85 c0                	test   eax,eax
c0002192:	75 09                	jne    c000219d <validate+0x12>
c0002194:	b8 09 00 00 00       	mov    eax,0x9
c0002199:	31 c9                	xor    ecx,ecx
c000219b:	eb 2f                	jmp    c00021cc <validate+0x41>
c000219d:	89 c3                	mov    ebx,eax
c000219f:	8b 00                	mov    eax,DWORD PTR [eax]
c00021a1:	85 c0                	test   eax,eax
c00021a3:	74 ef                	je     c0002194 <validate+0x9>
c00021a5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021a8:	74 ea                	je     c0002194 <validate+0x9>
c00021aa:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021ae:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021b2:	75 e0                	jne    c0002194 <validate+0x9>
c00021b4:	83 ec 0c             	sub    esp,0xc
c00021b7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021bb:	50                   	push   eax
c00021bc:	e8 fd fa ff ff       	call   c0001cbe <disk_status>
c00021c1:	83 c4 10             	add    esp,0x10
c00021c4:	a8 01                	test   al,0x1
c00021c6:	75 cc                	jne    c0002194 <validate+0x9>
c00021c8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021ca:	31 c0                	xor    eax,eax
c00021cc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021ce:	5a                   	pop    edx
c00021cf:	5b                   	pop    ebx
c00021d0:	5e                   	pop    esi
c00021d1:	c3                   	ret    

c00021d2 <sync_window>:
c00021d2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021d6:	74 58                	je     c0002230 <sync_window+0x5e>
c00021d8:	56                   	push   esi
c00021d9:	53                   	push   ebx
c00021da:	8d 70 34             	lea    esi,[eax+0x34]
c00021dd:	51                   	push   ecx
c00021de:	89 c3                	mov    ebx,eax
c00021e0:	6a 01                	push   0x1
c00021e2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021e5:	56                   	push   esi
c00021e6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021ea:	50                   	push   eax
c00021eb:	e8 ea fa ff ff       	call   c0001cda <disk_write>
c00021f0:	83 c4 10             	add    esp,0x10
c00021f3:	ba 01 00 00 00       	mov    edx,0x1
c00021f8:	85 c0                	test   eax,eax
c00021fa:	75 2e                	jne    c000222a <sync_window+0x58>
c00021fc:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00021ff:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002202:	89 c1                	mov    ecx,eax
c0002204:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002208:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000220b:	39 d1                	cmp    ecx,edx
c000220d:	73 19                	jae    c0002228 <sync_window+0x56>
c000220f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002213:	75 13                	jne    c0002228 <sync_window+0x56>
c0002215:	6a 01                	push   0x1
c0002217:	01 d0                	add    eax,edx
c0002219:	50                   	push   eax
c000221a:	56                   	push   esi
c000221b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000221f:	50                   	push   eax
c0002220:	e8 b5 fa ff ff       	call   c0001cda <disk_write>
c0002225:	83 c4 10             	add    esp,0x10
c0002228:	31 d2                	xor    edx,edx
c000222a:	89 d0                	mov    eax,edx
c000222c:	5a                   	pop    edx
c000222d:	5b                   	pop    ebx
c000222e:	5e                   	pop    esi
c000222f:	c3                   	ret    
c0002230:	31 d2                	xor    edx,edx
c0002232:	89 d0                	mov    eax,edx
c0002234:	c3                   	ret    

c0002235 <move_window>:
c0002235:	57                   	push   edi
c0002236:	56                   	push   esi
c0002237:	31 f6                	xor    esi,esi
c0002239:	53                   	push   ebx
c000223a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000223d:	74 32                	je     c0002271 <move_window+0x3c>
c000223f:	89 c3                	mov    ebx,eax
c0002241:	89 d7                	mov    edi,edx
c0002243:	e8 8a ff ff ff       	call   c00021d2 <sync_window>
c0002248:	89 c6                	mov    esi,eax
c000224a:	85 c0                	test   eax,eax
c000224c:	75 23                	jne    c0002271 <move_window+0x3c>
c000224e:	6a 01                	push   0x1
c0002250:	8d 43 34             	lea    eax,[ebx+0x34]
c0002253:	57                   	push   edi
c0002254:	50                   	push   eax
c0002255:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002259:	50                   	push   eax
c000225a:	e8 65 fa ff ff       	call   c0001cc4 <disk_read>
c000225f:	83 c4 10             	add    esp,0x10
c0002262:	85 c0                	test   eax,eax
c0002264:	74 08                	je     c000226e <move_window+0x39>
c0002266:	be 01 00 00 00       	mov    esi,0x1
c000226b:	83 cf ff             	or     edi,0xffffffff
c000226e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002271:	89 f0                	mov    eax,esi
c0002273:	5b                   	pop    ebx
c0002274:	5e                   	pop    esi
c0002275:	5f                   	pop    edi
c0002276:	c3                   	ret    

c0002277 <check_fs>:
c0002277:	53                   	push   ebx
c0002278:	89 c3                	mov    ebx,eax
c000227a:	83 ec 08             	sub    esp,0x8
c000227d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002281:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002288:	e8 a8 ff ff ff       	call   c0002235 <move_window>
c000228d:	ba 04 00 00 00       	mov    edx,0x4
c0002292:	85 c0                	test   eax,eax
c0002294:	75 68                	jne    c00022fe <check_fs+0x87>
c0002296:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000229c:	e8 6e fa ff ff       	call   c0001d0f <ld_word>
c00022a1:	ba 03 00 00 00       	mov    edx,0x3
c00022a6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022aa:	75 52                	jne    c00022fe <check_fs+0x87>
c00022ac:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022af:	8d 50 18             	lea    edx,[eax+0x18]
c00022b2:	80 fa 01             	cmp    dl,0x1
c00022b5:	76 09                	jbe    c00022c0 <check_fs+0x49>
c00022b7:	ba 02 00 00 00       	mov    edx,0x2
c00022bc:	3c eb                	cmp    al,0xeb
c00022be:	75 3e                	jne    c00022fe <check_fs+0x87>
c00022c0:	ba a4 0d 02 c0       	mov    edx,0xc0020da4
c00022c5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022c8:	b9 03 00 00 00       	mov    ecx,0x3
c00022cd:	e8 89 fa ff ff       	call   c0001d5b <mem_cmp>
c00022d2:	31 d2                	xor    edx,edx
c00022d4:	85 c0                	test   eax,eax
c00022d6:	74 26                	je     c00022fe <check_fs+0x87>
c00022d8:	ba 5c eb 01 c0       	mov    edx,0xc001eb5c
c00022dd:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022e3:	b9 05 00 00 00       	mov    ecx,0x5
c00022e8:	e8 6e fa ff ff       	call   c0001d5b <mem_cmp>
c00022ed:	31 d2                	xor    edx,edx
c00022ef:	85 c0                	test   eax,eax
c00022f1:	74 0b                	je     c00022fe <check_fs+0x87>
c00022f3:	31 d2                	xor    edx,edx
c00022f5:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00022f9:	0f 95 c2             	setne  dl
c00022fc:	01 d2                	add    edx,edx
c00022fe:	89 d0                	mov    eax,edx
c0002300:	83 c4 08             	add    esp,0x8
c0002303:	5b                   	pop    ebx
c0002304:	c3                   	ret    

c0002305 <find_volume>:
c0002305:	55                   	push   ebp
c0002306:	57                   	push   edi
c0002307:	56                   	push   esi
c0002308:	89 c6                	mov    esi,eax
c000230a:	53                   	push   ebx
c000230b:	89 d3                	mov    ebx,edx
c000230d:	83 ec 2c             	sub    esp,0x2c
c0002310:	31 d2                	xor    edx,edx
c0002312:	e8 60 ff ff ff       	call   c0002277 <check_fs>
c0002317:	83 f8 02             	cmp    eax,0x2
c000231a:	74 06                	je     c0002322 <find_volume+0x1d>
c000231c:	77 62                	ja     c0002380 <find_volume+0x7b>
c000231e:	85 db                	test   ebx,ebx
c0002320:	74 5e                	je     c0002380 <find_volume+0x7b>
c0002322:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002326:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000232c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002332:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002336:	89 cf                	mov    edi,ecx
c0002338:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000233c:	89 e8                	mov    eax,ebp
c000233e:	83 c5 10             	add    ebp,0x10
c0002341:	e8 d6 f9 ff ff       	call   c0001d1c <ld_dword>
c0002346:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000234a:	89 01                	mov    DWORD PTR [ecx],eax
c000234c:	83 c1 04             	add    ecx,0x4
c000234f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002353:	75 e3                	jne    c0002338 <find_volume+0x33>
c0002355:	31 ed                	xor    ebp,ebp
c0002357:	85 db                	test   ebx,ebx
c0002359:	74 03                	je     c000235e <find_volume+0x59>
c000235b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000235e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002361:	b8 03 00 00 00       	mov    eax,0x3
c0002366:	85 d2                	test   edx,edx
c0002368:	74 0c                	je     c0002376 <find_volume+0x71>
c000236a:	89 f0                	mov    eax,esi
c000236c:	e8 06 ff ff ff       	call   c0002277 <check_fs>
c0002371:	83 f8 01             	cmp    eax,0x1
c0002374:	76 0a                	jbe    c0002380 <find_volume+0x7b>
c0002376:	85 db                	test   ebx,ebx
c0002378:	75 06                	jne    c0002380 <find_volume+0x7b>
c000237a:	45                   	inc    ebp
c000237b:	83 fd 03             	cmp    ebp,0x3
c000237e:	76 de                	jbe    c000235e <find_volume+0x59>
c0002380:	83 c4 2c             	add    esp,0x2c
c0002383:	5b                   	pop    ebx
c0002384:	5e                   	pop    esi
c0002385:	5f                   	pop    edi
c0002386:	5d                   	pop    ebp
c0002387:	c3                   	ret    

c0002388 <mount_volume>:
c0002388:	55                   	push   ebp
c0002389:	89 d5                	mov    ebp,edx
c000238b:	57                   	push   edi
c000238c:	89 cf                	mov    edi,ecx
c000238e:	56                   	push   esi
c000238f:	53                   	push   ebx
c0002390:	bb 0b 00 00 00       	mov    ebx,0xb
c0002395:	83 ec 2c             	sub    esp,0x2c
c0002398:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000239e:	e8 9b fd ff ff       	call   c000213e <get_ldnumber>
c00023a3:	85 c0                	test   eax,eax
c00023a5:	0f 88 d6 02 00 00    	js     c0002681 <mount_volume+0x2f9>
c00023ab:	8b 34 85 a0 34 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdcb60]
c00023b2:	89 c2                	mov    edx,eax
c00023b4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023b9:	85 f6                	test   esi,esi
c00023bb:	0f 84 c0 02 00 00    	je     c0002681 <mount_volume+0x2f9>
c00023c1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023c4:	83 e7 fe             	and    edi,0xfffffffe
c00023c7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023ca:	74 3a                	je     c0002406 <mount_volume+0x7e>
c00023cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023d0:	83 ec 0c             	sub    esp,0xc
c00023d3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023d7:	50                   	push   eax
c00023d8:	e8 e1 f8 ff ff       	call   c0001cbe <disk_status>
c00023dd:	83 c4 10             	add    esp,0x10
c00023e0:	a8 01                	test   al,0x1
c00023e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023e6:	75 1e                	jne    c0002406 <mount_volume+0x7e>
c00023e8:	31 db                	xor    ebx,ebx
c00023ea:	89 f9                	mov    ecx,edi
c00023ec:	84 c9                	test   cl,cl
c00023ee:	0f 84 8d 02 00 00    	je     c0002681 <mount_volume+0x2f9>
c00023f4:	a8 04                	test   al,0x4
c00023f6:	0f 84 85 02 00 00    	je     c0002681 <mount_volume+0x2f9>
c00023fc:	bb 0a 00 00 00       	mov    ebx,0xa
c0002401:	e9 7b 02 00 00       	jmp    c0002681 <mount_volume+0x2f9>
c0002406:	83 ec 0c             	sub    esp,0xc
c0002409:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000240c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000240f:	0f b6 c2             	movzx  eax,dl
c0002412:	bb 03 00 00 00       	mov    ebx,0x3
c0002417:	50                   	push   eax
c0002418:	e8 a4 f8 ff ff       	call   c0001cc1 <disk_initialize>
c000241d:	83 c4 10             	add    esp,0x10
c0002420:	a8 01                	test   al,0x1
c0002422:	0f 85 59 02 00 00    	jne    c0002681 <mount_volume+0x2f9>
c0002428:	89 f9                	mov    ecx,edi
c000242a:	84 c9                	test   cl,cl
c000242c:	74 04                	je     c0002432 <mount_volume+0xaa>
c000242e:	a8 04                	test   al,0x4
c0002430:	75 ca                	jne    c00023fc <mount_volume+0x74>
c0002432:	31 d2                	xor    edx,edx
c0002434:	89 f0                	mov    eax,esi
c0002436:	bb 01 00 00 00       	mov    ebx,0x1
c000243b:	e8 c5 fe ff ff       	call   c0002305 <find_volume>
c0002440:	83 f8 04             	cmp    eax,0x4
c0002443:	0f 84 38 02 00 00    	je     c0002681 <mount_volume+0x2f9>
c0002449:	83 f8 01             	cmp    eax,0x1
c000244c:	76 0a                	jbe    c0002458 <mount_volume+0xd0>
c000244e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002453:	e9 29 02 00 00       	jmp    c0002681 <mount_volume+0x2f9>
c0002458:	8d 46 3f             	lea    eax,[esi+0x3f]
c000245b:	e8 af f8 ff ff       	call   c0001d0f <ld_word>
c0002460:	66 3d 00 02          	cmp    ax,0x200
c0002464:	75 e8                	jne    c000244e <mount_volume+0xc6>
c0002466:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002469:	e8 a1 f8 ff ff       	call   c0001d0f <ld_word>
c000246e:	0f b7 c0             	movzx  eax,ax
c0002471:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002475:	85 c0                	test   eax,eax
c0002477:	75 0c                	jne    c0002485 <mount_volume+0xfd>
c0002479:	8d 46 58             	lea    eax,[esi+0x58]
c000247c:	e8 9b f8 ff ff       	call   c0001d1c <ld_dword>
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002488:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000248b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000248f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002493:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002496:	89 e8                	mov    eax,ebp
c0002498:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000249b:	8d 45 ff             	lea    eax,[ebp-0x1]
c000249e:	3c 01                	cmp    al,0x1
c00024a0:	77 ac                	ja     c000244e <mount_volume+0xc6>
c00024a2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024a6:	89 c3                	mov    ebx,eax
c00024a8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024ac:	66 85 c0             	test   ax,ax
c00024af:	74 9d                	je     c000244e <mount_volume+0xc6>
c00024b1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024b4:	85 d8                	test   eax,ebx
c00024b6:	75 96                	jne    c000244e <mount_volume+0xc6>
c00024b8:	8d 46 45             	lea    eax,[esi+0x45]
c00024bb:	e8 4f f8 ff ff       	call   c0001d0f <ld_word>
c00024c0:	89 c7                	mov    edi,eax
c00024c2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024c6:	a8 0f                	test   al,0xf
c00024c8:	75 84                	jne    c000244e <mount_volume+0xc6>
c00024ca:	8d 46 47             	lea    eax,[esi+0x47]
c00024cd:	e8 3d f8 ff ff       	call   c0001d0f <ld_word>
c00024d2:	0f b7 d0             	movzx  edx,ax
c00024d5:	85 d2                	test   edx,edx
c00024d7:	75 0a                	jne    c00024e3 <mount_volume+0x15b>
c00024d9:	8d 46 54             	lea    eax,[esi+0x54]
c00024dc:	e8 3b f8 ff ff       	call   c0001d1c <ld_dword>
c00024e1:	89 c2                	mov    edx,eax
c00024e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024e7:	8d 46 42             	lea    eax,[esi+0x42]
c00024ea:	e8 20 f8 ff ff       	call   c0001d0f <ld_word>
c00024ef:	66 85 c0             	test   ax,ax
c00024f2:	0f 84 56 ff ff ff    	je     c000244e <mount_volume+0xc6>
c00024f8:	89 e9                	mov    ecx,ebp
c00024fa:	0f b7 c0             	movzx  eax,ax
c00024fd:	0f b6 e9             	movzx  ebp,cl
c0002500:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002504:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002508:	89 f8                	mov    eax,edi
c000250a:	0f af cd             	imul   ecx,ebp
c000250d:	66 c1 e8 04          	shr    ax,0x4
c0002511:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002515:	0f b7 c0             	movzx  eax,ax
c0002518:	01 c8                	add    eax,ecx
c000251a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000251e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002522:	39 c2                	cmp    edx,eax
c0002524:	0f 82 24 ff ff ff    	jb     c000244e <mount_volume+0xc6>
c000252a:	29 c2                	sub    edx,eax
c000252c:	89 d5                	mov    ebp,edx
c000252e:	89 d0                	mov    eax,edx
c0002530:	31 d2                	xor    edx,edx
c0002532:	f7 f3                	div    ebx
c0002534:	39 dd                	cmp    ebp,ebx
c0002536:	0f 82 12 ff ff ff    	jb     c000244e <mount_volume+0xc6>
c000253c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002541:	0f 87 07 ff ff ff    	ja     c000244e <mount_volume+0xc6>
c0002547:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000254c:	0f 86 1f 01 00 00    	jbe    c0002671 <mount_volume+0x2e9>
c0002552:	bb 03 00 00 00       	mov    ebx,0x3
c0002557:	8d 68 02             	lea    ebp,[eax+0x2]
c000255a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000255e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002562:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002566:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002569:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000256c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002570:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002573:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002577:	83 fb 03             	cmp    ebx,0x3
c000257a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000257d:	75 21                	jne    c00025a0 <mount_volume+0x218>
c000257f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002582:	e8 88 f7 ff ff       	call   c0001d0f <ld_word>
c0002587:	66 09 c7             	or     di,ax
c000258a:	0f 85 be fe ff ff    	jne    c000244e <mount_volume+0xc6>
c0002590:	8d 46 60             	lea    eax,[esi+0x60]
c0002593:	c1 e5 02             	shl    ebp,0x2
c0002596:	e8 81 f7 ff ff       	call   c0001d1c <ld_dword>
c000259b:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c000259e:	eb 22                	jmp    c00025c2 <mount_volume+0x23a>
c00025a0:	66 85 ff             	test   di,di
c00025a3:	0f 84 a5 fe ff ff    	je     c000244e <mount_volume+0xc6>
c00025a9:	01 c8                	add    eax,ecx
c00025ab:	83 fb 02             	cmp    ebx,0x2
c00025ae:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025b1:	75 04                	jne    c00025b7 <mount_volume+0x22f>
c00025b3:	01 ed                	add    ebp,ebp
c00025b5:	eb 0b                	jmp    c00025c2 <mount_volume+0x23a>
c00025b7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025bb:	83 e5 01             	and    ebp,0x1
c00025be:	d1 e8                	shr    eax,1
c00025c0:	01 c5                	add    ebp,eax
c00025c2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025c8:	c1 ed 09             	shr    ebp,0x9
c00025cb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025cf:	0f 87 79 fe ff ff    	ja     c000244e <mount_volume+0xc6>
c00025d5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025dc:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025e3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025e7:	83 fb 03             	cmp    ebx,0x3
c00025ea:	75 6e                	jne    c000265a <mount_volume+0x2d2>
c00025ec:	8d 46 64             	lea    eax,[esi+0x64]
c00025ef:	e8 1b f7 ff ff       	call   c0001d0f <ld_word>
c00025f4:	66 48                	dec    ax
c00025f6:	75 62                	jne    c000265a <mount_volume+0x2d2>
c00025f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00025fc:	89 f0                	mov    eax,esi
c00025fe:	42                   	inc    edx
c00025ff:	e8 31 fc ff ff       	call   c0002235 <move_window>
c0002604:	85 c0                	test   eax,eax
c0002606:	75 52                	jne    c000265a <mount_volume+0x2d2>
c0002608:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000260c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002612:	e8 f8 f6 ff ff       	call   c0001d0f <ld_word>
c0002617:	66 3d 55 aa          	cmp    ax,0xaa55
c000261b:	75 3d                	jne    c000265a <mount_volume+0x2d2>
c000261d:	8d 46 34             	lea    eax,[esi+0x34]
c0002620:	e8 f7 f6 ff ff       	call   c0001d1c <ld_dword>
c0002625:	3d 52 52 61 41       	cmp    eax,0x41615252
c000262a:	75 2e                	jne    c000265a <mount_volume+0x2d2>
c000262c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002632:	e8 e5 f6 ff ff       	call   c0001d1c <ld_dword>
c0002637:	3d 72 72 41 61       	cmp    eax,0x61417272
c000263c:	75 1c                	jne    c000265a <mount_volume+0x2d2>
c000263e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002644:	e8 d3 f6 ff ff       	call   c0001d1c <ld_dword>
c0002649:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000264c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002652:	e8 c5 f6 ff ff       	call   c0001d1c <ld_dword>
c0002657:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000265a:	66 a1 80 34 02 c0    	mov    ax,ds:0xc0023480
c0002660:	88 1e                	mov    BYTE PTR [esi],bl
c0002662:	40                   	inc    eax
c0002663:	31 db                	xor    ebx,ebx
c0002665:	66 a3 80 34 02 c0    	mov    ds:0xc0023480,ax
c000266b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000266f:	eb 10                	jmp    c0002681 <mount_volume+0x2f9>
c0002671:	31 db                	xor    ebx,ebx
c0002673:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002678:	0f 97 c3             	seta   bl
c000267b:	43                   	inc    ebx
c000267c:	e9 d6 fe ff ff       	jmp    c0002557 <mount_volume+0x1cf>
c0002681:	83 c4 2c             	add    esp,0x2c
c0002684:	89 d8                	mov    eax,ebx
c0002686:	5b                   	pop    ebx
c0002687:	5e                   	pop    esi
c0002688:	5f                   	pop    edi
c0002689:	5d                   	pop    ebp
c000268a:	c3                   	ret    

c000268b <put_fat>:
c000268b:	55                   	push   ebp
c000268c:	bd 02 00 00 00       	mov    ebp,0x2
c0002691:	57                   	push   edi
c0002692:	56                   	push   esi
c0002693:	53                   	push   ebx
c0002694:	83 ec 1c             	sub    esp,0x1c
c0002697:	83 fa 01             	cmp    edx,0x1
c000269a:	0f 86 31 01 00 00    	jbe    c00027d1 <put_fat+0x146>
c00026a0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026a3:	0f 86 28 01 00 00    	jbe    c00027d1 <put_fat+0x146>
c00026a9:	89 c6                	mov    esi,eax
c00026ab:	89 cf                	mov    edi,ecx
c00026ad:	8a 00                	mov    al,BYTE PTR [eax]
c00026af:	89 d3                	mov    ebx,edx
c00026b1:	3c 02                	cmp    al,0x2
c00026b3:	0f 84 ac 00 00 00    	je     c0002765 <put_fat+0xda>
c00026b9:	3c 03                	cmp    al,0x3
c00026bb:	0f 84 d1 00 00 00    	je     c0002792 <put_fat+0x107>
c00026c1:	fe c8                	dec    al
c00026c3:	0f 85 08 01 00 00    	jne    c00027d1 <put_fat+0x146>
c00026c9:	89 d1                	mov    ecx,edx
c00026cb:	89 f0                	mov    eax,esi
c00026cd:	d1 e9                	shr    ecx,1
c00026cf:	01 d1                	add    ecx,edx
c00026d1:	89 ca                	mov    edx,ecx
c00026d3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026d7:	c1 ea 09             	shr    edx,0x9
c00026da:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026dd:	e8 53 fb ff ff       	call   c0002235 <move_window>
c00026e2:	89 c5                	mov    ebp,eax
c00026e4:	85 c0                	test   eax,eax
c00026e6:	0f 85 e5 00 00 00    	jne    c00027d1 <put_fat+0x146>
c00026ec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00026f0:	8d 46 34             	lea    eax,[esi+0x34]
c00026f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026f7:	8d 41 01             	lea    eax,[ecx+0x1]
c00026fa:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002700:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002704:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002708:	89 f8                	mov    eax,edi
c000270a:	83 e3 01             	and    ebx,0x1
c000270d:	74 0c                	je     c000271b <put_fat+0x90>
c000270f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002711:	89 f8                	mov    eax,edi
c0002713:	83 e2 0f             	and    edx,0xf
c0002716:	c1 e0 04             	shl    eax,0x4
c0002719:	09 d0                	or     eax,edx
c000271b:	88 01                	mov    BYTE PTR [ecx],al
c000271d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002721:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002725:	c1 ea 09             	shr    edx,0x9
c0002728:	89 f0                	mov    eax,esi
c000272a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000272d:	e8 03 fb ff ff       	call   c0002235 <move_window>
c0002732:	89 c5                	mov    ebp,eax
c0002734:	85 c0                	test   eax,eax
c0002736:	0f 85 95 00 00 00    	jne    c00027d1 <put_fat+0x146>
c000273c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002740:	25 ff 01 00 00       	and    eax,0x1ff
c0002745:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002749:	85 db                	test   ebx,ebx
c000274b:	74 07                	je     c0002754 <put_fat+0xc9>
c000274d:	c1 ef 04             	shr    edi,0x4
c0002750:	89 f9                	mov    ecx,edi
c0002752:	eb 0d                	jmp    c0002761 <put_fat+0xd6>
c0002754:	8a 08                	mov    cl,BYTE PTR [eax]
c0002756:	c1 ef 08             	shr    edi,0x8
c0002759:	83 e1 f0             	and    ecx,0xfffffff0
c000275c:	83 e7 0f             	and    edi,0xf
c000275f:	09 f9                	or     ecx,edi
c0002761:	88 08                	mov    BYTE PTR [eax],cl
c0002763:	eb 27                	jmp    c000278c <put_fat+0x101>
c0002765:	c1 ea 08             	shr    edx,0x8
c0002768:	89 f0                	mov    eax,esi
c000276a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000276d:	e8 c3 fa ff ff       	call   c0002235 <move_window>
c0002772:	89 c5                	mov    ebp,eax
c0002774:	85 c0                	test   eax,eax
c0002776:	75 59                	jne    c00027d1 <put_fat+0x146>
c0002778:	01 db                	add    ebx,ebx
c000277a:	0f b7 d7             	movzx  edx,di
c000277d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002783:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002787:	e8 a8 f5 ff ff       	call   c0001d34 <st_word>
c000278c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002790:	eb 3f                	jmp    c00027d1 <put_fat+0x146>
c0002792:	c1 ea 07             	shr    edx,0x7
c0002795:	89 f0                	mov    eax,esi
c0002797:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000279a:	e8 96 fa ff ff       	call   c0002235 <move_window>
c000279f:	89 c5                	mov    ebp,eax
c00027a1:	85 c0                	test   eax,eax
c00027a3:	75 2c                	jne    c00027d1 <put_fat+0x146>
c00027a5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027ab:	c1 e3 02             	shl    ebx,0x2
c00027ae:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027b4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027b8:	89 d8                	mov    eax,ebx
c00027ba:	e8 5d f5 ff ff       	call   c0001d1c <ld_dword>
c00027bf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027c4:	09 f8                	or     eax,edi
c00027c6:	89 c2                	mov    edx,eax
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 69 f5 ff ff       	call   c0001d38 <st_dword>
c00027cf:	eb bb                	jmp    c000278c <put_fat+0x101>
c00027d1:	83 c4 1c             	add    esp,0x1c
c00027d4:	89 e8                	mov    eax,ebp
c00027d6:	5b                   	pop    ebx
c00027d7:	5e                   	pop    esi
c00027d8:	5f                   	pop    edi
c00027d9:	5d                   	pop    ebp
c00027da:	c3                   	ret    

c00027db <dir_clear>:
c00027db:	55                   	push   ebp
c00027dc:	57                   	push   edi
c00027dd:	56                   	push   esi
c00027de:	89 c6                	mov    esi,eax
c00027e0:	53                   	push   ebx
c00027e1:	83 ec 1c             	sub    esp,0x1c
c00027e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027e8:	e8 e5 f9 ff ff       	call   c00021d2 <sync_window>
c00027ed:	85 c0                	test   eax,eax
c00027ef:	0f 85 c0 00 00 00    	jne    c00028b5 <dir_clear+0xda>
c00027f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027f9:	89 f0                	mov    eax,esi
c00027fb:	e8 55 f7 ff ff       	call   c0001f55 <clst2sect>
c0002800:	31 d2                	xor    edx,edx
c0002802:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002805:	89 c5                	mov    ebp,eax
c0002807:	b9 00 02 00 00       	mov    ecx,0x200
c000280c:	8d 46 34             	lea    eax,[esi+0x34]
c000280f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002813:	e8 38 f5 ff ff       	call   c0001d50 <mem_set>
c0002818:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000281c:	c1 e3 09             	shl    ebx,0x9
c000281f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002825:	76 1b                	jbe    c0002842 <dir_clear+0x67>
c0002827:	bb 00 80 00 00       	mov    ebx,0x8000
c000282c:	eb 14                	jmp    c0002842 <dir_clear+0x67>
c000282e:	83 ec 0c             	sub    esp,0xc
c0002831:	53                   	push   ebx
c0002832:	e8 25 32 00 00       	call   c0005a5c <ff_memalloc>
c0002837:	83 c4 10             	add    esp,0x10
c000283a:	89 c7                	mov    edi,eax
c000283c:	85 c0                	test   eax,eax
c000283e:	75 7c                	jne    c00028bc <dir_clear+0xe1>
c0002840:	d1 eb                	shr    ebx,1
c0002842:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002848:	77 e4                	ja     c000282e <dir_clear+0x53>
c000284a:	31 db                	xor    ebx,ebx
c000284c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002850:	39 d8                	cmp    eax,ebx
c0002852:	76 53                	jbe    c00028a7 <dir_clear+0xcc>
c0002854:	6a 01                	push   0x1
c0002856:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002859:	50                   	push   eax
c000285a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000285e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002862:	50                   	push   eax
c0002863:	e8 72 f4 ff ff       	call   c0001cda <disk_write>
c0002868:	83 c4 10             	add    esp,0x10
c000286b:	85 c0                	test   eax,eax
c000286d:	75 38                	jne    c00028a7 <dir_clear+0xcc>
c000286f:	43                   	inc    ebx
c0002870:	eb da                	jmp    c000284c <dir_clear+0x71>
c0002872:	52                   	push   edx
c0002873:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002876:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000287a:	50                   	push   eax
c000287b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000287f:	57                   	push   edi
c0002880:	50                   	push   eax
c0002881:	e8 54 f4 ff ff       	call   c0001cda <disk_write>
c0002886:	83 c4 10             	add    esp,0x10
c0002889:	85 c0                	test   eax,eax
c000288b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000288f:	75 0a                	jne    c000289b <dir_clear+0xc0>
c0002891:	01 d3                	add    ebx,edx
c0002893:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002897:	39 d8                	cmp    eax,ebx
c0002899:	77 d7                	ja     c0002872 <dir_clear+0x97>
c000289b:	83 ec 0c             	sub    esp,0xc
c000289e:	57                   	push   edi
c000289f:	e8 d0 31 00 00       	call   c0005a74 <ff_memfree>
c00028a4:	83 c4 10             	add    esp,0x10
c00028a7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028ab:	39 d8                	cmp    eax,ebx
c00028ad:	0f 95 c0             	setne  al
c00028b0:	0f b6 c0             	movzx  eax,al
c00028b3:	eb 19                	jmp    c00028ce <dir_clear+0xf3>
c00028b5:	b8 01 00 00 00       	mov    eax,0x1
c00028ba:	eb 12                	jmp    c00028ce <dir_clear+0xf3>
c00028bc:	89 d9                	mov    ecx,ebx
c00028be:	31 d2                	xor    edx,edx
c00028c0:	e8 8b f4 ff ff       	call   c0001d50 <mem_set>
c00028c5:	89 da                	mov    edx,ebx
c00028c7:	31 db                	xor    ebx,ebx
c00028c9:	c1 ea 09             	shr    edx,0x9
c00028cc:	eb c5                	jmp    c0002893 <dir_clear+0xb8>
c00028ce:	83 c4 1c             	add    esp,0x1c
c00028d1:	5b                   	pop    ebx
c00028d2:	5e                   	pop    esi
c00028d3:	5f                   	pop    edi
c00028d4:	5d                   	pop    ebp
c00028d5:	c3                   	ret    

c00028d6 <create_name>:
c00028d6:	55                   	push   ebp
c00028d7:	89 d5                	mov    ebp,edx
c00028d9:	57                   	push   edi
c00028da:	89 c7                	mov    edi,eax
c00028dc:	56                   	push   esi
c00028dd:	31 f6                	xor    esi,esi
c00028df:	53                   	push   ebx
c00028e0:	83 ec 3c             	sub    esp,0x3c
c00028e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028e9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028eb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028f2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00028f6:	e8 9b f4 ff ff       	call   c0001d96 <tchar2uni>
c00028fb:	89 c3                	mov    ebx,eax
c00028fd:	83 f8 ff             	cmp    eax,0xffffffff
c0002900:	75 0a                	jne    c000290c <create_name+0x36>
c0002902:	b8 06 00 00 00       	mov    eax,0x6
c0002907:	e9 9e 02 00 00       	jmp    c0002baa <create_name+0x2d4>
c000290c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002911:	76 0c                	jbe    c000291f <create_name+0x49>
c0002913:	c1 e8 10             	shr    eax,0x10
c0002916:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000291a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000291e:	46                   	inc    esi
c000291f:	66 83 fb 1f          	cmp    bx,0x1f
c0002923:	76 4f                	jbe    c0002974 <create_name+0x9e>
c0002925:	66 83 fb 5c          	cmp    bx,0x5c
c0002929:	74 35                	je     c0002960 <create_name+0x8a>
c000292b:	66 83 fb 2f          	cmp    bx,0x2f
c000292f:	74 2f                	je     c0002960 <create_name+0x8a>
c0002931:	66 83 fb 7f          	cmp    bx,0x7f
c0002935:	77 11                	ja     c0002948 <create_name+0x72>
c0002937:	0f b7 d3             	movzx  edx,bx
c000293a:	b8 62 eb 01 c0       	mov    eax,0xc001eb62
c000293f:	e8 3a f4 ff ff       	call   c0001d7e <chk_chr>
c0002944:	85 c0                	test   eax,eax
c0002946:	75 ba                	jne    c0002902 <create_name+0x2c>
c0002948:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000294e:	77 b2                	ja     c0002902 <create_name+0x2c>
c0002950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002954:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002958:	46                   	inc    esi
c0002959:	eb 97                	jmp    c00028f2 <create_name+0x1c>
c000295b:	40                   	inc    eax
c000295c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	8a 10                	mov    dl,BYTE PTR [eax]
c0002966:	80 fa 2f             	cmp    dl,0x2f
c0002969:	74 f0                	je     c000295b <create_name+0x85>
c000296b:	80 fa 5c             	cmp    dl,0x5c
c000296e:	74 eb                	je     c000295b <create_name+0x85>
c0002970:	31 db                	xor    ebx,ebx
c0002972:	eb 02                	jmp    c0002976 <create_name+0xa0>
c0002974:	b3 04                	mov    bl,0x4
c0002976:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000297a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000297d:	85 f6                	test   esi,esi
c000297f:	74 18                	je     c0002999 <create_name+0xc3>
c0002981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002985:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000298a:	66 83 f8 20          	cmp    ax,0x20
c000298e:	74 06                	je     c0002996 <create_name+0xc0>
c0002990:	66 83 f8 2e          	cmp    ax,0x2e
c0002994:	75 03                	jne    c0002999 <create_name+0xc3>
c0002996:	4e                   	dec    esi
c0002997:	eb e4                	jmp    c000297d <create_name+0xa7>
c0002999:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000299d:	31 ed                	xor    ebp,ebp
c000299f:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029a5:	85 f6                	test   esi,esi
c00029a7:	0f 84 55 ff ff ff    	je     c0002902 <create_name+0x2c>
c00029ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029b1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029b4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029b8:	66 83 f8 20          	cmp    ax,0x20
c00029bc:	75 04                	jne    c00029c2 <create_name+0xec>
c00029be:	89 d5                	mov    ebp,edx
c00029c0:	eb eb                	jmp    c00029ad <create_name+0xd7>
c00029c2:	85 ed                	test   ebp,ebp
c00029c4:	75 06                	jne    c00029cc <create_name+0xf6>
c00029c6:	66 83 f8 2e          	cmp    ax,0x2e
c00029ca:	75 08                	jne    c00029d4 <create_name+0xfe>
c00029cc:	83 cb 03             	or     ebx,0x3
c00029cf:	eb 03                	jmp    c00029d4 <create_name+0xfe>
c00029d1:	4e                   	dec    esi
c00029d2:	74 0c                	je     c00029e0 <create_name+0x10a>
c00029d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029d8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029de:	75 f1                	jne    c00029d1 <create_name+0xfb>
c00029e0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029e5:	8d 47 20             	lea    eax,[edi+0x20]
c00029e8:	ba 20 00 00 00       	mov    edx,0x20
c00029ed:	e8 5e f3 ff ff       	call   c0001d50 <mem_set>
c00029f2:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00029fa:	31 c9                	xor    ecx,ecx
c00029fc:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a01:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a04:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a0c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a10:	66 85 ed             	test   bp,bp
c0002a13:	0f 84 30 01 00 00    	je     c0002b49 <create_name+0x273>
c0002a19:	66 83 fd 20          	cmp    bp,0x20
c0002a1d:	74 10                	je     c0002a2f <create_name+0x159>
c0002a1f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a23:	75 13                	jne    c0002a38 <create_name+0x162>
c0002a25:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a29:	0f 84 6b 01 00 00    	je     c0002b9a <create_name+0x2c4>
c0002a2f:	83 cb 03             	or     ebx,0x3
c0002a32:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a36:	eb c9                	jmp    c0002a01 <create_name+0x12b>
c0002a38:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a3c:	73 0b                	jae    c0002a49 <create_name+0x173>
c0002a3e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a42:	75 47                	jne    c0002a8b <create_name+0x1b5>
c0002a44:	e9 51 01 00 00       	jmp    c0002b9a <create_name+0x2c4>
c0002a49:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a4e:	75 10                	jne    c0002a60 <create_name+0x18a>
c0002a50:	83 cb 03             	or     ebx,0x3
c0002a53:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a5b:	e9 e9 00 00 00       	jmp    c0002b49 <create_name+0x273>
c0002a60:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a64:	74 0d                	je     c0002a73 <create_name+0x19d>
c0002a66:	83 cb 03             	or     ebx,0x3
c0002a69:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a6d:	0f 87 d6 00 00 00    	ja     c0002b49 <create_name+0x273>
c0002a73:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a78:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a7c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a84:	b9 08 00 00 00       	mov    ecx,0x8
c0002a89:	eb a7                	jmp    c0002a32 <create_name+0x15c>
c0002a8b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a8f:	76 68                	jbe    c0002af9 <create_name+0x223>
c0002a91:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002a95:	88 da                	mov    dl,bl
c0002a97:	83 ca 02             	or     edx,0x2
c0002a9a:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002a9e:	50                   	push   eax
c0002a9f:	50                   	push   eax
c0002aa0:	68 b5 01 00 00       	push   0x1b5
c0002aa5:	55                   	push   ebp
c0002aa6:	e8 e1 2f 00 00       	call   c0005a8c <ff_uni2oem>
c0002aab:	83 c4 10             	add    esp,0x10
c0002aae:	89 c5                	mov    ebp,eax
c0002ab0:	a8 80                	test   al,0x80
c0002ab2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ab6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aba:	74 0c                	je     c0002ac8 <create_name+0x1f2>
c0002abc:	83 e5 7f             	and    ebp,0x7f
c0002abf:	0f b6 ad 20 ec 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe13e0]
c0002ac6:	eb 2a                	jmp    c0002af2 <create_name+0x21c>
c0002ac8:	66 3d ff 00          	cmp    ax,0xff
c0002acc:	76 24                	jbe    c0002af2 <create_name+0x21c>
c0002ace:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ad2:	48                   	dec    eax
c0002ad3:	39 c8                	cmp    eax,ecx
c0002ad5:	77 0c                	ja     c0002ae3 <create_name+0x20d>
c0002ad7:	83 cb 03             	or     ebx,0x3
c0002ada:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002ade:	e9 4f ff ff ff       	jmp    c0002a32 <create_name+0x15c>
c0002ae3:	89 e8                	mov    eax,ebp
c0002ae5:	88 d3                	mov    bl,dl
c0002ae7:	66 c1 e8 08          	shr    ax,0x8
c0002aeb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aef:	41                   	inc    ecx
c0002af0:	eb 4b                	jmp    c0002b3d <create_name+0x267>
c0002af2:	88 d3                	mov    bl,dl
c0002af4:	66 85 ed             	test   bp,bp
c0002af7:	74 19                	je     c0002b12 <create_name+0x23c>
c0002af9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002afd:	0f b7 d5             	movzx  edx,bp
c0002b00:	b8 6b eb 01 c0       	mov    eax,0xc001eb6b
c0002b05:	e8 74 f2 ff ff       	call   c0001d7e <chk_chr>
c0002b0a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b0e:	85 c0                	test   eax,eax
c0002b10:	74 0a                	je     c0002b1c <create_name+0x246>
c0002b12:	83 cb 03             	or     ebx,0x3
c0002b15:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b1a:	eb 21                	jmp    c0002b3d <create_name+0x267>
c0002b1c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b1f:	66 83 f8 19          	cmp    ax,0x19
c0002b23:	77 07                	ja     c0002b2c <create_name+0x256>
c0002b25:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b2a:	eb 11                	jmp    c0002b3d <create_name+0x267>
c0002b2c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 08                	ja     c0002b3d <create_name+0x267>
c0002b35:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b3a:	83 ed 20             	sub    ebp,0x20
c0002b3d:	89 e8                	mov    eax,ebp
c0002b3f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b43:	41                   	inc    ecx
c0002b44:	e9 e9 fe ff ff       	jmp    c0002a32 <create_name+0x15c>
c0002b49:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b4d:	75 04                	jne    c0002b53 <create_name+0x27d>
c0002b4f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b53:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b58:	75 05                	jne    c0002b5f <create_name+0x289>
c0002b5a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b5f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b63:	83 e0 0c             	and    eax,0xc
c0002b66:	3c 0c                	cmp    al,0xc
c0002b68:	74 0b                	je     c0002b75 <create_name+0x29f>
c0002b6a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b6e:	83 e0 03             	and    eax,0x3
c0002b71:	3c 03                	cmp    al,0x3
c0002b73:	75 05                	jne    c0002b7a <create_name+0x2a4>
c0002b75:	83 cb 02             	or     ebx,0x2
c0002b78:	eb 19                	jmp    c0002b93 <create_name+0x2bd>
c0002b7a:	f6 c3 02             	test   bl,0x2
c0002b7d:	75 14                	jne    c0002b93 <create_name+0x2bd>
c0002b7f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b84:	74 03                	je     c0002b89 <create_name+0x2b3>
c0002b86:	83 cb 10             	or     ebx,0x10
c0002b89:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b8e:	74 03                	je     c0002b93 <create_name+0x2bd>
c0002b90:	83 cb 08             	or     ebx,0x8
c0002b93:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002b96:	31 c0                	xor    eax,eax
c0002b98:	eb 10                	jmp    c0002baa <create_name+0x2d4>
c0002b9a:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002b9f:	0f 85 ce fe ff ff    	jne    c0002a73 <create_name+0x19d>
c0002ba5:	e9 a6 fe ff ff       	jmp    c0002a50 <create_name+0x17a>
c0002baa:	83 c4 3c             	add    esp,0x3c
c0002bad:	5b                   	pop    ebx
c0002bae:	5e                   	pop    esi
c0002baf:	5f                   	pop    edi
c0002bb0:	5d                   	pop    ebp
c0002bb1:	c3                   	ret    

c0002bb2 <cmp_lfn>:
c0002bb2:	55                   	push   ebp
c0002bb3:	57                   	push   edi
c0002bb4:	89 d7                	mov    edi,edx
c0002bb6:	56                   	push   esi
c0002bb7:	53                   	push   ebx
c0002bb8:	83 ec 1c             	sub    esp,0x1c
c0002bbb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bbf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bc2:	e8 48 f1 ff ff       	call   c0001d0f <ld_word>
c0002bc7:	66 85 c0             	test   ax,ax
c0002bca:	74 07                	je     c0002bd3 <cmp_lfn+0x21>
c0002bcc:	31 c0                	xor    eax,eax
c0002bce:	e9 9a 00 00 00       	jmp    c0002c6d <cmp_lfn+0xbb>
c0002bd3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002bd5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bda:	83 e3 3f             	and    ebx,0x3f
c0002bdd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002be5:	4b                   	dec    ebx
c0002be6:	6b db 0d             	imul   ebx,ebx,0xd
c0002be9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bed:	0f b6 80 a0 ec 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe1360]
c0002bf4:	01 f8                	add    eax,edi
c0002bf6:	e8 14 f1 ff ff       	call   c0001d0f <ld_word>
c0002bfb:	66 85 ed             	test   bp,bp
c0002bfe:	89 c6                	mov    esi,eax
c0002c00:	74 3c                	je     c0002c3e <cmp_lfn+0x8c>
c0002c02:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c08:	77 c2                	ja     c0002bcc <cmp_lfn+0x1a>
c0002c0a:	83 ec 0c             	sub    esp,0xc
c0002c0d:	0f b7 c0             	movzx  eax,ax
c0002c10:	50                   	push   eax
c0002c11:	e8 8e 2f 00 00       	call   c0005ba4 <ff_wtoupper>
c0002c16:	89 c5                	mov    ebp,eax
c0002c18:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c1b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c23:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c27:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c2a:	e8 75 2f 00 00       	call   c0005ba4 <ff_wtoupper>
c0002c2f:	83 c4 10             	add    esp,0x10
c0002c32:	39 c5                	cmp    ebp,eax
c0002c34:	75 96                	jne    c0002bcc <cmp_lfn+0x1a>
c0002c36:	89 f5                	mov    ebp,esi
c0002c38:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c3c:	eb 04                	jmp    c0002c42 <cmp_lfn+0x90>
c0002c3e:	66 46                	inc    si
c0002c40:	75 8a                	jne    c0002bcc <cmp_lfn+0x1a>
c0002c42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c4b:	75 9c                	jne    c0002be9 <cmp_lfn+0x37>
c0002c4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c50:	74 16                	je     c0002c68 <cmp_lfn+0xb6>
c0002c52:	66 85 ed             	test   bp,bp
c0002c55:	74 11                	je     c0002c68 <cmp_lfn+0xb6>
c0002c57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c60:	0f 94 c0             	sete   al
c0002c63:	0f b6 c0             	movzx  eax,al
c0002c66:	eb 05                	jmp    c0002c6d <cmp_lfn+0xbb>
c0002c68:	b8 01 00 00 00       	mov    eax,0x1
c0002c6d:	83 c4 1c             	add    esp,0x1c
c0002c70:	5b                   	pop    ebx
c0002c71:	5e                   	pop    esi
c0002c72:	5f                   	pop    edi
c0002c73:	5d                   	pop    ebp
c0002c74:	c3                   	ret    

c0002c75 <sync_fs>:
c0002c75:	56                   	push   esi
c0002c76:	53                   	push   ebx
c0002c77:	53                   	push   ebx
c0002c78:	89 c3                	mov    ebx,eax
c0002c7a:	e8 53 f5 ff ff       	call   c00021d2 <sync_window>
c0002c7f:	85 c0                	test   eax,eax
c0002c81:	0f 85 9a 00 00 00    	jne    c0002d21 <sync_fs+0xac>
c0002c87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c8a:	75 7b                	jne    c0002d07 <sync_fs+0x92>
c0002c8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002c90:	75 75                	jne    c0002d07 <sync_fs+0x92>
c0002c92:	b9 00 02 00 00       	mov    ecx,0x200
c0002c97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002c9a:	31 d2                	xor    edx,edx
c0002c9c:	89 f0                	mov    eax,esi
c0002c9e:	e8 ad f0 ff ff       	call   c0001d50 <mem_set>
c0002ca3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ca9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cae:	e8 81 f0 ff ff       	call   c0001d34 <st_word>
c0002cb3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cb8:	89 f0                	mov    eax,esi
c0002cba:	e8 79 f0 ff ff       	call   c0001d38 <st_dword>
c0002cbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cca:	e8 69 f0 ff ff       	call   c0001d38 <st_dword>
c0002ccf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002cd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002cd8:	e8 5b f0 ff ff       	call   c0001d38 <st_dword>
c0002cdd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ce0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002ce6:	e8 4d f0 ff ff       	call   c0001d38 <st_dword>
c0002ceb:	6a 01                	push   0x1
c0002ced:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002cf0:	40                   	inc    eax
c0002cf1:	50                   	push   eax
c0002cf2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002cf5:	56                   	push   esi
c0002cf6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002cfa:	50                   	push   eax
c0002cfb:	e8 da ef ff ff       	call   c0001cda <disk_write>
c0002d00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d04:	83 c4 10             	add    esp,0x10
c0002d07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0b:	51                   	push   ecx
c0002d0c:	6a 00                	push   0x0
c0002d0e:	6a 00                	push   0x0
c0002d10:	50                   	push   eax
c0002d11:	e8 da ef ff ff       	call   c0001cf0 <disk_ioctl>
c0002d16:	83 c4 10             	add    esp,0x10
c0002d19:	85 c0                	test   eax,eax
c0002d1b:	0f 95 c0             	setne  al
c0002d1e:	0f b6 c0             	movzx  eax,al
c0002d21:	5a                   	pop    edx
c0002d22:	5b                   	pop    ebx
c0002d23:	5e                   	pop    esi
c0002d24:	c3                   	ret    

c0002d25 <create_partition>:
c0002d25:	55                   	push   ebp
c0002d26:	0f b6 c0             	movzx  eax,al
c0002d29:	57                   	push   edi
c0002d2a:	56                   	push   esi
c0002d2b:	53                   	push   ebx
c0002d2c:	83 ec 40             	sub    esp,0x40
c0002d2f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d3f:	50                   	push   eax
c0002d40:	6a 01                	push   0x1
c0002d42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d46:	e8 a5 ef ff ff       	call   c0001cf0 <disk_ioctl>
c0002d4b:	83 c4 10             	add    esp,0x10
c0002d4e:	85 c0                	test   eax,eax
c0002d50:	0f 85 69 01 00 00    	jne    c0002ebf <create_partition+0x19a>
c0002d56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d63:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d68:	31 d2                	xor    edx,edx
c0002d6a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d73:	f7 f3                	div    ebx
c0002d75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d7a:	76 0c                	jbe    c0002d88 <create_partition+0x63>
c0002d7c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d80:	49                   	dec    ecx
c0002d81:	75 e5                	jne    c0002d68 <create_partition+0x43>
c0002d83:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d88:	b9 00 02 00 00       	mov    ecx,0x200
c0002d8d:	31 d2                	xor    edx,edx
c0002d8f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002d93:	e8 b8 ef ff ff       	call   c0001d50 <mem_set>
c0002d98:	b9 64 00 00 00       	mov    ecx,0x64
c0002d9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002da1:	31 d2                	xor    edx,edx
c0002da3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dab:	f7 f1                	div    ecx
c0002dad:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002db2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002db6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dba:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dc0:	85 c9                	test   ecx,ecx
c0002dc2:	75 34                	jne    c0002df8 <create_partition+0xd3>
c0002dc4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dc8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dcd:	05 fe 01 00 00       	add    eax,0x1fe
c0002dd2:	e8 5d ef ff ff       	call   c0001d34 <st_word>
c0002dd7:	6a 01                	push   0x1
c0002dd9:	6a 00                	push   0x0
c0002ddb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ddf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002de3:	e8 f2 ee ff ff       	call   c0001cda <disk_write>
c0002de8:	83 c4 10             	add    esp,0x10
c0002deb:	85 c0                	test   eax,eax
c0002ded:	0f 95 c0             	setne  al
c0002df0:	0f b6 c0             	movzx  eax,al
c0002df3:	e9 cc 00 00 00       	jmp    c0002ec4 <create_partition+0x19f>
c0002df8:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002dfc:	76 c6                	jbe    c0002dc4 <create_partition+0x9f>
c0002dfe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e02:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e06:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e09:	83 fe 64             	cmp    esi,0x64
c0002e0c:	77 0d                	ja     c0002e1b <create_partition+0xf6>
c0002e0e:	74 07                	je     c0002e17 <create_partition+0xf2>
c0002e10:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e15:	eb 04                	jmp    c0002e1b <create_partition+0xf6>
c0002e17:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e1b:	31 c0                	xor    eax,eax
c0002e1d:	89 f2                	mov    edx,esi
c0002e1f:	01 ca                	add    edx,ecx
c0002e21:	0f 92 c0             	setb   al
c0002e24:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e28:	77 04                	ja     c0002e2e <create_partition+0x109>
c0002e2a:	85 c0                	test   eax,eax
c0002e2c:	74 08                	je     c0002e36 <create_partition+0x111>
c0002e2e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e32:	29 ce                	sub    esi,ecx
c0002e34:	eb 04                	jmp    c0002e3a <create_partition+0x115>
c0002e36:	85 f6                	test   esi,esi
c0002e38:	74 8a                	je     c0002dc4 <create_partition+0x9f>
c0002e3a:	89 ca                	mov    edx,ecx
c0002e3c:	89 d8                	mov    eax,ebx
c0002e3e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e43:	e8 f0 ee ff ff       	call   c0001d38 <st_dword>
c0002e48:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e4b:	89 f2                	mov    edx,esi
c0002e4d:	83 c3 10             	add    ebx,0x10
c0002e50:	e8 e3 ee ff ff       	call   c0001d38 <st_dword>
c0002e55:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e5a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e5e:	31 d2                	xor    edx,edx
c0002e60:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e63:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e67:	89 c8                	mov    eax,ecx
c0002e69:	01 f1                	add    ecx,esi
c0002e6b:	f7 f5                	div    ebp
c0002e6d:	89 d5                	mov    ebp,edx
c0002e6f:	31 d2                	xor    edx,edx
c0002e71:	45                   	inc    ebp
c0002e72:	f7 f7                	div    edi
c0002e74:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e77:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e7a:	89 c2                	mov    edx,eax
c0002e7c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e7f:	c1 ea 02             	shr    edx,0x2
c0002e82:	83 e2 c0             	and    edx,0xffffffc0
c0002e85:	09 ea                	or     edx,ebp
c0002e87:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e8c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e8f:	31 d2                	xor    edx,edx
c0002e91:	f7 f5                	div    ebp
c0002e93:	89 d6                	mov    esi,edx
c0002e95:	31 d2                	xor    edx,edx
c0002e97:	46                   	inc    esi
c0002e98:	f7 f7                	div    edi
c0002e9a:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002e9d:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002ea0:	89 c7                	mov    edi,eax
c0002ea2:	c1 ef 02             	shr    edi,0x2
c0002ea5:	83 e7 c0             	and    edi,0xffffffc0
c0002ea8:	09 fe                	or     esi,edi
c0002eaa:	89 f2                	mov    edx,esi
c0002eac:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002eaf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002eb4:	0f 85 06 ff ff ff    	jne    c0002dc0 <create_partition+0x9b>
c0002eba:	e9 05 ff ff ff       	jmp    c0002dc4 <create_partition+0x9f>
c0002ebf:	b8 01 00 00 00       	mov    eax,0x1
c0002ec4:	83 c4 3c             	add    esp,0x3c
c0002ec7:	5b                   	pop    ebx
c0002ec8:	5e                   	pop    esi
c0002ec9:	5f                   	pop    edi
c0002eca:	5d                   	pop    ebp
c0002ecb:	c3                   	ret    

c0002ecc <get_fileinfo>:
c0002ecc:	55                   	push   ebp
c0002ecd:	57                   	push   edi
c0002ece:	56                   	push   esi
c0002ecf:	53                   	push   ebx
c0002ed0:	83 ec 1c             	sub    esp,0x1c
c0002ed3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ed5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ed9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002edd:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ee1:	0f 84 c1 01 00 00    	je     c00030a8 <get_fileinfo+0x1dc>
c0002ee7:	89 d3                	mov    ebx,edx
c0002ee9:	89 c6                	mov    esi,eax
c0002eeb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eef:	74 6a                	je     c0002f5b <get_fileinfo+0x8f>
c0002ef1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ef9:	31 ed                	xor    ebp,ebp
c0002efb:	31 ff                	xor    edi,edi
c0002efd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f01:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f05:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f08:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f0c:	66 85 d2             	test   dx,dx
c0002f0f:	74 3e                	je     c0002f4f <get_fileinfo+0x83>
c0002f11:	66 85 ed             	test   bp,bp
c0002f14:	75 0c                	jne    c0002f22 <get_fileinfo+0x56>
c0002f16:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f1c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f20:	76 22                	jbe    c0002f44 <get_fileinfo+0x78>
c0002f22:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f27:	89 e8                	mov    eax,ebp
c0002f29:	29 f9                	sub    ecx,edi
c0002f2b:	c1 e0 10             	shl    eax,0x10
c0002f2e:	09 d0                	or     eax,edx
c0002f30:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f34:	e8 23 ef ff ff       	call   c0001e5c <put_utf>
c0002f39:	84 c0                	test   al,al
c0002f3b:	74 10                	je     c0002f4d <get_fileinfo+0x81>
c0002f3d:	0f b6 c0             	movzx  eax,al
c0002f40:	31 d2                	xor    edx,edx
c0002f42:	01 c7                	add    edi,eax
c0002f44:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f49:	89 d5                	mov    ebp,edx
c0002f4b:	eb b0                	jmp    c0002efd <get_fileinfo+0x31>
c0002f4d:	31 ff                	xor    edi,edi
c0002f4f:	66 85 ed             	test   bp,bp
c0002f52:	74 02                	je     c0002f56 <get_fileinfo+0x8a>
c0002f54:	31 ff                	xor    edi,edi
c0002f56:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f5b:	31 ff                	xor    edi,edi
c0002f5d:	31 c9                	xor    ecx,ecx
c0002f5f:	83 f9 0a             	cmp    ecx,0xa
c0002f62:	0f 87 ad 00 00 00    	ja     c0003015 <get_fileinfo+0x149>
c0002f68:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f6b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f6e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f72:	66 83 fa 20          	cmp    dx,0x20
c0002f76:	0f 84 92 00 00 00    	je     c000300e <get_fileinfo+0x142>
c0002f7c:	66 83 fa 05          	cmp    dx,0x5
c0002f80:	75 05                	jne    c0002f87 <get_fileinfo+0xbb>
c0002f82:	ba e5 00 00 00       	mov    edx,0xe5
c0002f87:	83 ff 0b             	cmp    edi,0xb
c0002f8a:	77 0b                	ja     c0002f97 <get_fileinfo+0xcb>
c0002f8c:	83 fd 09             	cmp    ebp,0x9
c0002f8f:	75 06                	jne    c0002f97 <get_fileinfo+0xcb>
c0002f91:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002f96:	47                   	inc    edi
c0002f97:	0f b7 c2             	movzx  eax,dx
c0002f9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002f9e:	e8 ed ed ff ff       	call   c0001d90 <dbc_1st>
c0002fa3:	85 c0                	test   eax,eax
c0002fa5:	74 2f                	je     c0002fd6 <get_fileinfo+0x10a>
c0002fa7:	83 fd 08             	cmp    ebp,0x8
c0002faa:	74 2a                	je     c0002fd6 <get_fileinfo+0x10a>
c0002fac:	83 fd 0b             	cmp    ebp,0xb
c0002faf:	74 25                	je     c0002fd6 <get_fileinfo+0x10a>
c0002fb1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fb4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fb8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fbc:	e8 d2 ed ff ff       	call   c0001d93 <dbc_2nd>
c0002fc1:	85 c0                	test   eax,eax
c0002fc3:	74 11                	je     c0002fd6 <get_fileinfo+0x10a>
c0002fc5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fc9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fce:	c1 e2 08             	shl    edx,0x8
c0002fd1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fd4:	09 c2                	or     edx,eax
c0002fd6:	0f b7 d2             	movzx  edx,dx
c0002fd9:	50                   	push   eax
c0002fda:	50                   	push   eax
c0002fdb:	68 b5 01 00 00       	push   0x1b5
c0002fe0:	52                   	push   edx
c0002fe1:	e8 46 2b 00 00       	call   c0005b2c <ff_oem2uni>
c0002fe6:	83 c4 10             	add    esp,0x10
c0002fe9:	66 85 c0             	test   ax,ax
c0002fec:	75 04                	jne    c0002ff2 <get_fileinfo+0x126>
c0002fee:	31 ff                	xor    edi,edi
c0002ff0:	eb 23                	jmp    c0003015 <get_fileinfo+0x149>
c0002ff2:	b9 0c 00 00 00       	mov    ecx,0xc
c0002ff7:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0002ffb:	29 f9                	sub    ecx,edi
c0002ffd:	0f b7 c0             	movzx  eax,ax
c0003000:	e8 57 ee ff ff       	call   c0001e5c <put_utf>
c0003005:	84 c0                	test   al,al
c0003007:	74 e5                	je     c0002fee <get_fileinfo+0x122>
c0003009:	0f b6 c0             	movzx  eax,al
c000300c:	01 c7                	add    edi,eax
c000300e:	89 e9                	mov    ecx,ebp
c0003010:	e9 4a ff ff ff       	jmp    c0002f5f <get_fileinfo+0x93>
c0003015:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000301a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000301e:	75 54                	jne    c0003074 <get_fileinfo+0x1a8>
c0003020:	85 ff                	test   edi,edi
c0003022:	75 0b                	jne    c000302f <get_fileinfo+0x163>
c0003024:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003028:	ba 01 00 00 00       	mov    edx,0x1
c000302d:	eb 33                	jmp    c0003062 <get_fileinfo+0x196>
c000302f:	b1 08                	mov    cl,0x8
c0003031:	31 d2                	xor    edx,edx
c0003033:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003039:	84 c0                	test   al,al
c000303b:	74 25                	je     c0003062 <get_fileinfo+0x196>
c000303d:	66 83 f8 2e          	cmp    ax,0x2e
c0003041:	74 16                	je     c0003059 <get_fileinfo+0x18d>
c0003043:	8d 78 bf             	lea    edi,[eax-0x41]
c0003046:	66 83 ff 19          	cmp    di,0x19
c000304a:	77 0f                	ja     c000305b <get_fileinfo+0x18f>
c000304c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000304f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003052:	74 07                	je     c000305b <get_fileinfo+0x18f>
c0003054:	83 c0 20             	add    eax,0x20
c0003057:	eb 02                	jmp    c000305b <get_fileinfo+0x18f>
c0003059:	b1 10                	mov    cl,0x10
c000305b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000305f:	42                   	inc    edx
c0003060:	eb d1                	jmp    c0003033 <get_fileinfo+0x167>
c0003062:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003067:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000306a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000306e:	75 04                	jne    c0003074 <get_fileinfo+0x1a8>
c0003070:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003074:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003077:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000307a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000307d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003080:	83 c0 1c             	add    eax,0x1c
c0003083:	e8 94 ec ff ff       	call   c0001d1c <ld_dword>
c0003088:	89 03                	mov    DWORD PTR [ebx],eax
c000308a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000308d:	83 c0 16             	add    eax,0x16
c0003090:	e8 7a ec ff ff       	call   c0001d0f <ld_word>
c0003095:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0003099:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309c:	83 c0 18             	add    eax,0x18
c000309f:	e8 6b ec ff ff       	call   c0001d0f <ld_word>
c00030a4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030a8:	83 c4 1c             	add    esp,0x1c
c00030ab:	5b                   	pop    ebx
c00030ac:	5e                   	pop    esi
c00030ad:	5f                   	pop    edi
c00030ae:	5d                   	pop    ebp
c00030af:	c3                   	ret    

c00030b0 <ld_clust.isra.0>:
c00030b0:	56                   	push   esi
c00030b1:	89 c6                	mov    esi,eax
c00030b3:	53                   	push   ebx
c00030b4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030b7:	89 d3                	mov    ebx,edx
c00030b9:	e8 51 ec ff ff       	call   c0001d0f <ld_word>
c00030be:	0f b7 c8             	movzx  ecx,ax
c00030c1:	89 f0                	mov    eax,esi
c00030c3:	3c 03                	cmp    al,0x3
c00030c5:	75 0d                	jne    c00030d4 <ld_clust.isra.0+0x24>
c00030c7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030ca:	e8 40 ec ff ff       	call   c0001d0f <ld_word>
c00030cf:	c1 e0 10             	shl    eax,0x10
c00030d2:	09 c1                	or     ecx,eax
c00030d4:	89 c8                	mov    eax,ecx
c00030d6:	5b                   	pop    ebx
c00030d7:	5e                   	pop    esi
c00030d8:	c3                   	ret    

c00030d9 <st_clust.isra.1>:
c00030d9:	56                   	push   esi
c00030da:	89 c6                	mov    esi,eax
c00030dc:	53                   	push   ebx
c00030dd:	89 d3                	mov    ebx,edx
c00030df:	0f b7 d1             	movzx  edx,cx
c00030e2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030e5:	e8 4a ec ff ff       	call   c0001d34 <st_word>
c00030ea:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030ed:	75 0f                	jne    c00030fe <st_clust.isra.1+0x25>
c00030ef:	c1 e9 10             	shr    ecx,0x10
c00030f2:	8d 43 14             	lea    eax,[ebx+0x14]
c00030f5:	89 ca                	mov    edx,ecx
c00030f7:	5b                   	pop    ebx
c00030f8:	5e                   	pop    esi
c00030f9:	e9 36 ec ff ff       	jmp    c0001d34 <st_word>
c00030fe:	5b                   	pop    ebx
c00030ff:	5e                   	pop    esi
c0003100:	c3                   	ret    

c0003101 <get_fat.isra.2>:
c0003101:	b9 01 00 00 00       	mov    ecx,0x1
c0003106:	83 fa 01             	cmp    edx,0x1
c0003109:	0f 86 f1 00 00 00    	jbe    c0003200 <get_fat.isra.2+0xff>
c000310f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003112:	0f 83 e8 00 00 00    	jae    c0003200 <get_fat.isra.2+0xff>
c0003118:	55                   	push   ebp
c0003119:	57                   	push   edi
c000311a:	89 c7                	mov    edi,eax
c000311c:	56                   	push   esi
c000311d:	89 d6                	mov    esi,edx
c000311f:	53                   	push   ebx
c0003120:	83 ec 0c             	sub    esp,0xc
c0003123:	8a 00                	mov    al,BYTE PTR [eax]
c0003125:	3c 02                	cmp    al,0x2
c0003127:	74 78                	je     c00031a1 <get_fat.isra.2+0xa0>
c0003129:	3c 03                	cmp    al,0x3
c000312b:	0f 84 97 00 00 00    	je     c00031c8 <get_fat.isra.2+0xc7>
c0003131:	fe c8                	dec    al
c0003133:	0f 85 bd 00 00 00    	jne    c00031f6 <get_fat.isra.2+0xf5>
c0003139:	89 d3                	mov    ebx,edx
c000313b:	89 f8                	mov    eax,edi
c000313d:	d1 eb                	shr    ebx,1
c000313f:	01 d3                	add    ebx,edx
c0003141:	89 da                	mov    edx,ebx
c0003143:	c1 ea 09             	shr    edx,0x9
c0003146:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003149:	e8 e7 f0 ff ff       	call   c0002235 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	74 08                	je     c000315a <get_fat.isra.2+0x59>
c0003152:	83 c9 ff             	or     ecx,0xffffffff
c0003155:	e9 9c 00 00 00       	jmp    c00031f6 <get_fat.isra.2+0xf5>
c000315a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000315d:	89 f8                	mov    eax,edi
c000315f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003165:	89 ea                	mov    edx,ebp
c0003167:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000316b:	c1 ea 09             	shr    edx,0x9
c000316e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003171:	e8 bf f0 ff ff       	call   c0002235 <move_window>
c0003176:	85 c0                	test   eax,eax
c0003178:	75 d8                	jne    c0003152 <get_fat.isra.2+0x51>
c000317a:	0f b6 c3             	movzx  eax,bl
c000317d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003183:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003188:	c1 e3 08             	shl    ebx,0x8
c000318b:	09 c3                	or     ebx,eax
c000318d:	89 d9                	mov    ecx,ebx
c000318f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003195:	83 e6 01             	and    esi,0x1
c0003198:	74 5c                	je     c00031f6 <get_fat.isra.2+0xf5>
c000319a:	89 d9                	mov    ecx,ebx
c000319c:	c1 e9 04             	shr    ecx,0x4
c000319f:	eb 55                	jmp    c00031f6 <get_fat.isra.2+0xf5>
c00031a1:	c1 ea 08             	shr    edx,0x8
c00031a4:	89 f8                	mov    eax,edi
c00031a6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031a9:	e8 87 f0 ff ff       	call   c0002235 <move_window>
c00031ae:	85 c0                	test   eax,eax
c00031b0:	75 a0                	jne    c0003152 <get_fat.isra.2+0x51>
c00031b2:	01 f6                	add    esi,esi
c00031b4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ba:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031be:	e8 4c eb ff ff       	call   c0001d0f <ld_word>
c00031c3:	0f b7 c8             	movzx  ecx,ax
c00031c6:	eb 2e                	jmp    c00031f6 <get_fat.isra.2+0xf5>
c00031c8:	c1 ea 07             	shr    edx,0x7
c00031cb:	89 f8                	mov    eax,edi
c00031cd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031d0:	e8 60 f0 ff ff       	call   c0002235 <move_window>
c00031d5:	85 c0                	test   eax,eax
c00031d7:	0f 85 75 ff ff ff    	jne    c0003152 <get_fat.isra.2+0x51>
c00031dd:	c1 e6 02             	shl    esi,0x2
c00031e0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031e6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ea:	e8 2d eb ff ff       	call   c0001d1c <ld_dword>
c00031ef:	25 ff ff ff 0f       	and    eax,0xfffffff
c00031f4:	89 c1                	mov    ecx,eax
c00031f6:	83 c4 0c             	add    esp,0xc
c00031f9:	89 c8                	mov    eax,ecx
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    
c0003200:	89 c8                	mov    eax,ecx
c0003202:	c3                   	ret    

c0003203 <dir_sdi>:
c0003203:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003209:	0f 87 b6 00 00 00    	ja     c00032c5 <dir_sdi+0xc2>
c000320f:	55                   	push   ebp
c0003210:	57                   	push   edi
c0003211:	56                   	push   esi
c0003212:	53                   	push   ebx
c0003213:	89 d3                	mov    ebx,edx
c0003215:	83 ec 1c             	sub    esp,0x1c
c0003218:	f6 c2 1f             	test   dl,0x1f
c000321b:	74 0a                	je     c0003227 <dir_sdi+0x24>
c000321d:	b8 02 00 00 00       	mov    eax,0x2
c0003222:	e9 96 00 00 00       	jmp    c00032bd <dir_sdi+0xba>
c0003227:	89 c6                	mov    esi,eax
c0003229:	8b 38                	mov    edi,DWORD PTR [eax]
c000322b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000322e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003231:	85 c9                	test   ecx,ecx
c0003233:	75 23                	jne    c0003258 <dir_sdi+0x55>
c0003235:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003238:	76 07                	jbe    c0003241 <dir_sdi+0x3e>
c000323a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000323d:	85 c0                	test   eax,eax
c000323f:	75 15                	jne    c0003256 <dir_sdi+0x53>
c0003241:	89 da                	mov    edx,ebx
c0003243:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003247:	c1 ea 05             	shr    edx,0x5
c000324a:	39 c2                	cmp    edx,eax
c000324c:	73 cf                	jae    c000321d <dir_sdi+0x1a>
c000324e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003251:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003254:	eb 3d                	jmp    c0003293 <dir_sdi+0x90>
c0003256:	89 c1                	mov    ecx,eax
c0003258:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000325c:	c1 e5 09             	shl    ebp,0x9
c000325f:	89 ca                	mov    edx,ecx
c0003261:	39 eb                	cmp    ebx,ebp
c0003263:	72 1c                	jb     c0003281 <dir_sdi+0x7e>
c0003265:	8b 06                	mov    eax,DWORD PTR [esi]
c0003267:	e8 95 fe ff ff       	call   c0003101 <get_fat.isra.2>
c000326c:	89 c1                	mov    ecx,eax
c000326e:	83 f8 ff             	cmp    eax,0xffffffff
c0003271:	74 45                	je     c00032b8 <dir_sdi+0xb5>
c0003273:	83 f8 01             	cmp    eax,0x1
c0003276:	76 a5                	jbe    c000321d <dir_sdi+0x1a>
c0003278:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000327b:	76 a0                	jbe    c000321d <dir_sdi+0x1a>
c000327d:	29 eb                	sub    ebx,ebp
c000327f:	eb de                	jmp    c000325f <dir_sdi+0x5c>
c0003281:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003285:	89 f8                	mov    eax,edi
c0003287:	e8 c9 ec ff ff       	call   c0001f55 <clst2sect>
c000328c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003290:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003293:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0003296:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c0003299:	85 d2                	test   edx,edx
c000329b:	74 80                	je     c000321d <dir_sdi+0x1a>
c000329d:	89 d8                	mov    eax,ebx
c000329f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032a5:	c1 e8 09             	shr    eax,0x9
c00032a8:	01 d0                	add    eax,edx
c00032aa:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032ad:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032b1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032b4:	31 c0                	xor    eax,eax
c00032b6:	eb 05                	jmp    c00032bd <dir_sdi+0xba>
c00032b8:	b8 01 00 00 00       	mov    eax,0x1
c00032bd:	83 c4 1c             	add    esp,0x1c
c00032c0:	5b                   	pop    ebx
c00032c1:	5e                   	pop    esi
c00032c2:	5f                   	pop    edi
c00032c3:	5d                   	pop    ebp
c00032c4:	c3                   	ret    
c00032c5:	b8 02 00 00 00       	mov    eax,0x2
c00032ca:	c3                   	ret    

c00032cb <create_chain>:
c00032cb:	55                   	push   ebp
c00032cc:	89 c5                	mov    ebp,eax
c00032ce:	57                   	push   edi
c00032cf:	89 d7                	mov    edi,edx
c00032d1:	56                   	push   esi
c00032d2:	53                   	push   ebx
c00032d3:	83 ec 1c             	sub    esp,0x1c
c00032d6:	85 d2                	test   edx,edx
c00032d8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032da:	75 0e                	jne    c00032ea <create_chain+0x1f>
c00032dc:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032df:	85 c9                	test   ecx,ecx
c00032e1:	74 34                	je     c0003317 <create_chain+0x4c>
c00032e3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032e6:	77 34                	ja     c000331c <create_chain+0x51>
c00032e8:	eb 2d                	jmp    c0003317 <create_chain+0x4c>
c00032ea:	89 f0                	mov    eax,esi
c00032ec:	e8 10 fe ff ff       	call   c0003101 <get_fat.isra.2>
c00032f1:	89 c3                	mov    ebx,eax
c00032f3:	83 f8 01             	cmp    eax,0x1
c00032f6:	77 0a                	ja     c0003302 <create_chain+0x37>
c00032f8:	bb 01 00 00 00       	mov    ebx,0x1
c00032fd:	e9 f9 00 00 00       	jmp    c00033fb <create_chain+0x130>
c0003302:	83 f8 ff             	cmp    eax,0xffffffff
c0003305:	0f 84 ed 00 00 00    	je     c00033f8 <create_chain+0x12d>
c000330b:	89 f9                	mov    ecx,edi
c000330d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003310:	76 0a                	jbe    c000331c <create_chain+0x51>
c0003312:	e9 e4 00 00 00       	jmp    c00033fb <create_chain+0x130>
c0003317:	b9 01 00 00 00       	mov    ecx,0x1
c000331c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003320:	75 07                	jne    c0003329 <create_chain+0x5e>
c0003322:	31 db                	xor    ebx,ebx
c0003324:	e9 d2 00 00 00       	jmp    c00033fb <create_chain+0x130>
c0003329:	39 f9                	cmp    ecx,edi
c000332b:	75 46                	jne    c0003373 <create_chain+0xa8>
c000332d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003330:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003333:	77 05                	ja     c000333a <create_chain+0x6f>
c0003335:	bb 02 00 00 00       	mov    ebx,0x2
c000333a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000333e:	89 da                	mov    edx,ebx
c0003340:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003343:	e8 b9 fd ff ff       	call   c0003101 <get_fat.isra.2>
c0003348:	83 f8 01             	cmp    eax,0x1
c000334b:	74 ab                	je     c00032f8 <create_chain+0x2d>
c000334d:	83 f8 ff             	cmp    eax,0xffffffff
c0003350:	0f 84 a2 00 00 00    	je     c00033f8 <create_chain+0x12d>
c0003356:	85 c0                	test   eax,eax
c0003358:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000335c:	74 11                	je     c000336f <create_chain+0xa4>
c000335e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003361:	83 f8 01             	cmp    eax,0x1
c0003364:	76 0d                	jbe    c0003373 <create_chain+0xa8>
c0003366:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003369:	73 08                	jae    c0003373 <create_chain+0xa8>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	eb 04                	jmp    c0003373 <create_chain+0xa8>
c000336f:	85 db                	test   ebx,ebx
c0003371:	75 3d                	jne    c00033b0 <create_chain+0xe5>
c0003373:	89 cb                	mov    ebx,ecx
c0003375:	43                   	inc    ebx
c0003376:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003379:	77 0a                	ja     c0003385 <create_chain+0xba>
c000337b:	83 f9 01             	cmp    ecx,0x1
c000337e:	76 a2                	jbe    c0003322 <create_chain+0x57>
c0003380:	bb 02 00 00 00       	mov    ebx,0x2
c0003385:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003389:	89 da                	mov    edx,ebx
c000338b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000338e:	e8 6e fd ff ff       	call   c0003101 <get_fat.isra.2>
c0003393:	85 c0                	test   eax,eax
c0003395:	74 19                	je     c00033b0 <create_chain+0xe5>
c0003397:	83 f8 01             	cmp    eax,0x1
c000339a:	0f 84 58 ff ff ff    	je     c00032f8 <create_chain+0x2d>
c00033a0:	40                   	inc    eax
c00033a1:	74 55                	je     c00033f8 <create_chain+0x12d>
c00033a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a7:	39 cb                	cmp    ebx,ecx
c00033a9:	75 ca                	jne    c0003375 <create_chain+0xaa>
c00033ab:	e9 72 ff ff ff       	jmp    c0003322 <create_chain+0x57>
c00033b0:	83 c9 ff             	or     ecx,0xffffffff
c00033b3:	89 da                	mov    edx,ebx
c00033b5:	89 f0                	mov    eax,esi
c00033b7:	e8 cf f2 ff ff       	call   c000268b <put_fat>
c00033bc:	85 c0                	test   eax,eax
c00033be:	75 31                	jne    c00033f1 <create_chain+0x126>
c00033c0:	85 ff                	test   edi,edi
c00033c2:	75 16                	jne    c00033da <create_chain+0x10f>
c00033c4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033ca:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033cd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033d0:	39 d0                	cmp    eax,edx
c00033d2:	77 17                	ja     c00033eb <create_chain+0x120>
c00033d4:	48                   	dec    eax
c00033d5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033d8:	eb 11                	jmp    c00033eb <create_chain+0x120>
c00033da:	89 d9                	mov    ecx,ebx
c00033dc:	89 fa                	mov    edx,edi
c00033de:	89 f0                	mov    eax,esi
c00033e0:	e8 a6 f2 ff ff       	call   c000268b <put_fat>
c00033e5:	85 c0                	test   eax,eax
c00033e7:	74 db                	je     c00033c4 <create_chain+0xf9>
c00033e9:	eb 06                	jmp    c00033f1 <create_chain+0x126>
c00033eb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ef:	eb 0a                	jmp    c00033fb <create_chain+0x130>
c00033f1:	48                   	dec    eax
c00033f2:	0f 85 00 ff ff ff    	jne    c00032f8 <create_chain+0x2d>
c00033f8:	83 cb ff             	or     ebx,0xffffffff
c00033fb:	83 c4 1c             	add    esp,0x1c
c00033fe:	89 d8                	mov    eax,ebx
c0003400:	5b                   	pop    ebx
c0003401:	5e                   	pop    esi
c0003402:	5f                   	pop    edi
c0003403:	5d                   	pop    ebp
c0003404:	c3                   	ret    

c0003405 <remove_chain>:
c0003405:	55                   	push   ebp
c0003406:	57                   	push   edi
c0003407:	56                   	push   esi
c0003408:	89 d6                	mov    esi,edx
c000340a:	53                   	push   ebx
c000340b:	83 ec 0c             	sub    esp,0xc
c000340e:	83 fa 01             	cmp    edx,0x1
c0003411:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003413:	76 65                	jbe    c000347a <remove_chain+0x75>
c0003415:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003418:	76 60                	jbe    c000347a <remove_chain+0x75>
c000341a:	89 c5                	mov    ebp,eax
c000341c:	89 ca                	mov    edx,ecx
c000341e:	85 c9                	test   ecx,ecx
c0003420:	74 0e                	je     c0003430 <remove_chain+0x2b>
c0003422:	83 c9 ff             	or     ecx,0xffffffff
c0003425:	89 d8                	mov    eax,ebx
c0003427:	e8 5f f2 ff ff       	call   c000268b <put_fat>
c000342c:	85 c0                	test   eax,eax
c000342e:	75 56                	jne    c0003486 <remove_chain+0x81>
c0003430:	89 f2                	mov    edx,esi
c0003432:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003435:	e8 c7 fc ff ff       	call   c0003101 <get_fat.isra.2>
c000343a:	89 c7                	mov    edi,eax
c000343c:	85 c0                	test   eax,eax
c000343e:	75 04                	jne    c0003444 <remove_chain+0x3f>
c0003440:	31 c0                	xor    eax,eax
c0003442:	eb 42                	jmp    c0003486 <remove_chain+0x81>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	74 31                	je     c000347a <remove_chain+0x75>
c0003449:	83 f8 ff             	cmp    eax,0xffffffff
c000344c:	74 33                	je     c0003481 <remove_chain+0x7c>
c000344e:	31 c9                	xor    ecx,ecx
c0003450:	89 f2                	mov    edx,esi
c0003452:	89 d8                	mov    eax,ebx
c0003454:	e8 32 f2 ff ff       	call   c000268b <put_fat>
c0003459:	85 c0                	test   eax,eax
c000345b:	75 29                	jne    c0003486 <remove_chain+0x81>
c000345d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003460:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003463:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003466:	39 c8                	cmp    eax,ecx
c0003468:	73 08                	jae    c0003472 <remove_chain+0x6d>
c000346a:	40                   	inc    eax
c000346b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000346f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003472:	89 fe                	mov    esi,edi
c0003474:	39 fa                	cmp    edx,edi
c0003476:	77 b8                	ja     c0003430 <remove_chain+0x2b>
c0003478:	eb c6                	jmp    c0003440 <remove_chain+0x3b>
c000347a:	b8 02 00 00 00       	mov    eax,0x2
c000347f:	eb 05                	jmp    c0003486 <remove_chain+0x81>
c0003481:	b8 01 00 00 00       	mov    eax,0x1
c0003486:	83 c4 0c             	add    esp,0xc
c0003489:	5b                   	pop    ebx
c000348a:	5e                   	pop    esi
c000348b:	5f                   	pop    edi
c000348c:	5d                   	pop    ebp
c000348d:	c3                   	ret    

c000348e <dir_next>:
c000348e:	55                   	push   ebp
c000348f:	57                   	push   edi
c0003490:	56                   	push   esi
c0003491:	53                   	push   ebx
c0003492:	83 ec 1c             	sub    esp,0x1c
c0003495:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003498:	8b 28                	mov    ebp,DWORD PTR [eax]
c000349a:	83 c7 20             	add    edi,0x20
c000349d:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034a3:	76 07                	jbe    c00034ac <dir_next+0x1e>
c00034a5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034ac:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034af:	b9 04 00 00 00       	mov    ecx,0x4
c00034b4:	85 f6                	test   esi,esi
c00034b6:	0f 84 cd 00 00 00    	je     c0003589 <dir_next+0xfb>
c00034bc:	89 c3                	mov    ebx,eax
c00034be:	89 d1                	mov    ecx,edx
c00034c0:	89 f8                	mov    eax,edi
c00034c2:	25 ff 01 00 00       	and    eax,0x1ff
c00034c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034cb:	0f 85 a8 00 00 00    	jne    c0003579 <dir_next+0xeb>
c00034d1:	46                   	inc    esi
c00034d2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034d5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034d8:	85 d2                	test   edx,edx
c00034da:	75 22                	jne    c00034fe <dir_next+0x70>
c00034dc:	89 fa                	mov    edx,edi
c00034de:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034e2:	c1 ea 05             	shr    edx,0x5
c00034e5:	39 c2                	cmp    edx,eax
c00034e7:	0f 82 8c 00 00 00    	jb     c0003579 <dir_next+0xeb>
c00034ed:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00034f4:	b9 04 00 00 00       	mov    ecx,0x4
c00034f9:	e9 8b 00 00 00       	jmp    c0003589 <dir_next+0xfb>
c00034fe:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003502:	89 fe                	mov    esi,edi
c0003504:	48                   	dec    eax
c0003505:	c1 ee 09             	shr    esi,0x9
c0003508:	85 f0                	test   eax,esi
c000350a:	75 6d                	jne    c0003579 <dir_next+0xeb>
c000350c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003510:	89 e8                	mov    eax,ebp
c0003512:	e8 ea fb ff ff       	call   c0003101 <get_fat.isra.2>
c0003517:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000351b:	89 c6                	mov    esi,eax
c000351d:	83 f8 01             	cmp    eax,0x1
c0003520:	77 07                	ja     c0003529 <dir_next+0x9b>
c0003522:	b9 02 00 00 00       	mov    ecx,0x2
c0003527:	eb 60                	jmp    c0003589 <dir_next+0xfb>
c0003529:	83 f8 ff             	cmp    eax,0xffffffff
c000352c:	75 07                	jne    c0003535 <dir_next+0xa7>
c000352e:	b9 01 00 00 00       	mov    ecx,0x1
c0003533:	eb 54                	jmp    c0003589 <dir_next+0xfb>
c0003535:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003538:	77 30                	ja     c000356a <dir_next+0xdc>
c000353a:	85 c9                	test   ecx,ecx
c000353c:	74 af                	je     c00034ed <dir_next+0x5f>
c000353e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003541:	89 d8                	mov    eax,ebx
c0003543:	e8 83 fd ff ff       	call   c00032cb <create_chain>
c0003548:	b9 07 00 00 00       	mov    ecx,0x7
c000354d:	89 c6                	mov    esi,eax
c000354f:	85 c0                	test   eax,eax
c0003551:	74 36                	je     c0003589 <dir_next+0xfb>
c0003553:	83 f8 01             	cmp    eax,0x1
c0003556:	74 ca                	je     c0003522 <dir_next+0x94>
c0003558:	83 f8 ff             	cmp    eax,0xffffffff
c000355b:	74 d1                	je     c000352e <dir_next+0xa0>
c000355d:	89 c2                	mov    edx,eax
c000355f:	89 e8                	mov    eax,ebp
c0003561:	e8 75 f2 ff ff       	call   c00027db <dir_clear>
c0003566:	85 c0                	test   eax,eax
c0003568:	75 c4                	jne    c000352e <dir_next+0xa0>
c000356a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000356d:	89 f2                	mov    edx,esi
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 df e9 ff ff       	call   c0001f55 <clst2sect>
c0003576:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003579:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000357d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003580:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003584:	31 c9                	xor    ecx,ecx
c0003586:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003589:	83 c4 1c             	add    esp,0x1c
c000358c:	89 c8                	mov    eax,ecx
c000358e:	5b                   	pop    ebx
c000358f:	5e                   	pop    esi
c0003590:	5f                   	pop    edi
c0003591:	5d                   	pop    ebp
c0003592:	c3                   	ret    

c0003593 <dir_alloc>:
c0003593:	55                   	push   ebp
c0003594:	89 c5                	mov    ebp,eax
c0003596:	57                   	push   edi
c0003597:	89 d7                	mov    edi,edx
c0003599:	56                   	push   esi
c000359a:	31 d2                	xor    edx,edx
c000359c:	53                   	push   ebx
c000359d:	83 ec 0c             	sub    esp,0xc
c00035a0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035a2:	e8 5c fc ff ff       	call   c0003203 <dir_sdi>
c00035a7:	85 c0                	test   eax,eax
c00035a9:	75 37                	jne    c00035e2 <dir_alloc+0x4f>
c00035ab:	31 db                	xor    ebx,ebx
c00035ad:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035b0:	89 f0                	mov    eax,esi
c00035b2:	e8 7e ec ff ff       	call   c0002235 <move_window>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 27                	jne    c00035e2 <dir_alloc+0x4f>
c00035bb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035be:	8a 12                	mov    dl,BYTE PTR [edx]
c00035c0:	84 d2                	test   dl,dl
c00035c2:	74 05                	je     c00035c9 <dir_alloc+0x36>
c00035c4:	80 fa e5             	cmp    dl,0xe5
c00035c7:	75 07                	jne    c00035d0 <dir_alloc+0x3d>
c00035c9:	43                   	inc    ebx
c00035ca:	39 fb                	cmp    ebx,edi
c00035cc:	75 04                	jne    c00035d2 <dir_alloc+0x3f>
c00035ce:	eb 1c                	jmp    c00035ec <dir_alloc+0x59>
c00035d0:	31 db                	xor    ebx,ebx
c00035d2:	ba 01 00 00 00       	mov    edx,0x1
c00035d7:	89 e8                	mov    eax,ebp
c00035d9:	e8 b0 fe ff ff       	call   c000348e <dir_next>
c00035de:	85 c0                	test   eax,eax
c00035e0:	74 cb                	je     c00035ad <dir_alloc+0x1a>
c00035e2:	83 f8 04             	cmp    eax,0x4
c00035e5:	75 05                	jne    c00035ec <dir_alloc+0x59>
c00035e7:	b8 07 00 00 00       	mov    eax,0x7
c00035ec:	83 c4 0c             	add    esp,0xc
c00035ef:	5b                   	pop    ebx
c00035f0:	5e                   	pop    esi
c00035f1:	5f                   	pop    edi
c00035f2:	5d                   	pop    ebp
c00035f3:	c3                   	ret    

c00035f4 <dir_read>:
c00035f4:	55                   	push   ebp
c00035f5:	57                   	push   edi
c00035f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00035fb:	56                   	push   esi
c00035fc:	be 04 00 00 00       	mov    esi,0x4
c0003601:	53                   	push   ebx
c0003602:	89 c3                	mov    ebx,eax
c0003604:	83 ec 1c             	sub    esp,0x1c
c0003607:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000360b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000360d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003612:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003615:	85 d2                	test   edx,edx
c0003617:	0f 84 d8 00 00 00    	je     c00036f5 <dir_read+0x101>
c000361d:	89 e8                	mov    eax,ebp
c000361f:	e8 11 ec ff ff       	call   c0002235 <move_window>
c0003624:	89 c6                	mov    esi,eax
c0003626:	85 c0                	test   eax,eax
c0003628:	0f 85 d2 00 00 00    	jne    c0003700 <dir_read+0x10c>
c000362e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003631:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003633:	84 c9                	test   cl,cl
c0003635:	0f 84 c0 00 00 00    	je     c00036fb <dir_read+0x107>
c000363b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000363e:	83 e0 3f             	and    eax,0x3f
c0003641:	80 f9 2e             	cmp    cl,0x2e
c0003644:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003648:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000364b:	0f 84 8a 00 00 00    	je     c00036db <dir_read+0xe7>
c0003651:	80 f9 e5             	cmp    cl,0xe5
c0003654:	0f 84 81 00 00 00    	je     c00036db <dir_read+0xe7>
c000365a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000365e:	83 e0 1f             	and    eax,0x1f
c0003661:	83 f8 08             	cmp    eax,0x8
c0003664:	0f 94 c0             	sete   al
c0003667:	0f b6 c0             	movzx  eax,al
c000366a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000366e:	75 6b                	jne    c00036db <dir_read+0xe7>
c0003670:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003675:	75 44                	jne    c00036bb <dir_read+0xc7>
c0003677:	f6 c1 40             	test   cl,0x40
c000367a:	74 12                	je     c000368e <dir_read+0x9a>
c000367c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000367f:	83 e1 bf             	and    ecx,0xffffffbf
c0003682:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003686:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003689:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000368c:	eb 06                	jmp    c0003694 <dir_read+0xa0>
c000368e:	89 f8                	mov    eax,edi
c0003690:	38 c8                	cmp    al,cl
c0003692:	75 47                	jne    c00036db <dir_read+0xe7>
c0003694:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003698:	bf ff ff ff ff       	mov    edi,0xffffffff
c000369d:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036a0:	75 3e                	jne    c00036e0 <dir_read+0xec>
c00036a2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036a6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036a9:	e8 c4 e8 ff ff       	call   c0001f72 <pick_lfn>
c00036ae:	85 c0                	test   eax,eax
c00036b0:	74 2e                	je     c00036e0 <dir_read+0xec>
c00036b2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036b6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036b9:	eb 25                	jmp    c00036e0 <dir_read+0xec>
c00036bb:	89 f8                	mov    eax,edi
c00036bd:	84 c0                	test   al,al
c00036bf:	75 11                	jne    c00036d2 <dir_read+0xde>
c00036c1:	89 d0                	mov    eax,edx
c00036c3:	e8 64 ea ff ff       	call   c000212c <sum_sfn>
c00036c8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036cc:	75 04                	jne    c00036d2 <dir_read+0xde>
c00036ce:	31 f6                	xor    esi,esi
c00036d0:	eb 35                	jmp    c0003707 <dir_read+0x113>
c00036d2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036d9:	eb 2c                	jmp    c0003707 <dir_read+0x113>
c00036db:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036e0:	31 d2                	xor    edx,edx
c00036e2:	89 d8                	mov    eax,ebx
c00036e4:	e8 a5 fd ff ff       	call   c000348e <dir_next>
c00036e9:	89 c6                	mov    esi,eax
c00036eb:	85 c0                	test   eax,eax
c00036ed:	0f 84 1f ff ff ff    	je     c0003612 <dir_read+0x1e>
c00036f3:	eb 0b                	jmp    c0003700 <dir_read+0x10c>
c00036f5:	85 f6                	test   esi,esi
c00036f7:	74 d5                	je     c00036ce <dir_read+0xda>
c00036f9:	eb 05                	jmp    c0003700 <dir_read+0x10c>
c00036fb:	be 04 00 00 00       	mov    esi,0x4
c0003700:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003707:	83 c4 1c             	add    esp,0x1c
c000370a:	89 f0                	mov    eax,esi
c000370c:	5b                   	pop    ebx
c000370d:	5e                   	pop    esi
c000370e:	5f                   	pop    edi
c000370f:	5d                   	pop    ebp
c0003710:	c3                   	ret    

c0003711 <dir_remove>:
c0003711:	57                   	push   edi
c0003712:	56                   	push   esi
c0003713:	53                   	push   ebx
c0003714:	89 c3                	mov    ebx,eax
c0003716:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003719:	8b 30                	mov    esi,DWORD PTR [eax]
c000371b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000371e:	83 fa ff             	cmp    edx,0xffffffff
c0003721:	74 09                	je     c000372c <dir_remove+0x1b>
c0003723:	e8 db fa ff ff       	call   c0003203 <dir_sdi>
c0003728:	85 c0                	test   eax,eax
c000372a:	75 34                	jne    c0003760 <dir_remove+0x4f>
c000372c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000372f:	89 f0                	mov    eax,esi
c0003731:	e8 ff ea ff ff       	call   c0002235 <move_window>
c0003736:	85 c0                	test   eax,eax
c0003738:	75 1c                	jne    c0003756 <dir_remove+0x45>
c000373a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000373d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003740:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003744:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003747:	73 17                	jae    c0003760 <dir_remove+0x4f>
c0003749:	31 d2                	xor    edx,edx
c000374b:	89 d8                	mov    eax,ebx
c000374d:	e8 3c fd ff ff       	call   c000348e <dir_next>
c0003752:	85 c0                	test   eax,eax
c0003754:	74 d6                	je     c000372c <dir_remove+0x1b>
c0003756:	83 f8 04             	cmp    eax,0x4
c0003759:	75 05                	jne    c0003760 <dir_remove+0x4f>
c000375b:	b8 02 00 00 00       	mov    eax,0x2
c0003760:	5b                   	pop    ebx
c0003761:	5e                   	pop    esi
c0003762:	5f                   	pop    edi
c0003763:	c3                   	ret    

c0003764 <dir_find>:
c0003764:	55                   	push   ebp
c0003765:	31 d2                	xor    edx,edx
c0003767:	57                   	push   edi
c0003768:	56                   	push   esi
c0003769:	53                   	push   ebx
c000376a:	89 c3                	mov    ebx,eax
c000376c:	83 ec 1c             	sub    esp,0x1c
c000376f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003771:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003775:	89 d8                	mov    eax,ebx
c0003777:	e8 87 fa ff ff       	call   c0003203 <dir_sdi>
c000377c:	89 c6                	mov    esi,eax
c000377e:	85 c0                	test   eax,eax
c0003780:	0f 85 02 01 00 00    	jne    c0003888 <dir_find+0x124>
c0003786:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000378d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c0003792:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003797:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000379a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000379e:	e8 92 ea ff ff       	call   c0002235 <move_window>
c00037a3:	89 c6                	mov    esi,eax
c00037a5:	85 c0                	test   eax,eax
c00037a7:	0f 85 db 00 00 00    	jne    c0003888 <dir_find+0x124>
c00037ad:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037b0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037b3:	84 c9                	test   cl,cl
c00037b5:	0f 84 c8 00 00 00    	je     c0003883 <dir_find+0x11f>
c00037bb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037be:	88 d0                	mov    al,dl
c00037c0:	83 e0 3f             	and    eax,0x3f
c00037c3:	80 f9 e5             	cmp    cl,0xe5
c00037c6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037c9:	0f 84 93 00 00 00    	je     c0003862 <dir_find+0xfe>
c00037cf:	80 e2 08             	and    dl,0x8
c00037d2:	74 0a                	je     c00037de <dir_find+0x7a>
c00037d4:	3c 0f                	cmp    al,0xf
c00037d6:	0f 85 86 00 00 00    	jne    c0003862 <dir_find+0xfe>
c00037dc:	eb 04                	jmp    c00037e2 <dir_find+0x7e>
c00037de:	3c 0f                	cmp    al,0xf
c00037e0:	75 54                	jne    c0003836 <dir_find+0xd2>
c00037e2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037e6:	0f 85 82 00 00 00    	jne    c000386e <dir_find+0x10a>
c00037ec:	f6 c1 40             	test   cl,0x40
c00037ef:	74 12                	je     c0003803 <dir_find+0x9f>
c00037f1:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c00037f4:	83 e1 bf             	and    ecx,0xffffffbf
c00037f7:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00037fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037fe:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003801:	eb 06                	jmp    c0003809 <dir_find+0xa5>
c0003803:	89 f8                	mov    eax,edi
c0003805:	38 c8                	cmp    al,cl
c0003807:	75 60                	jne    c0003869 <dir_find+0x105>
c0003809:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000380d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003812:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003815:	75 57                	jne    c000386e <dir_find+0x10a>
c0003817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000381b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000381f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003822:	89 ea                	mov    edx,ebp
c0003824:	e8 89 f3 ff ff       	call   c0002bb2 <cmp_lfn>
c0003829:	85 c0                	test   eax,eax
c000382b:	74 41                	je     c000386e <dir_find+0x10a>
c000382d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003831:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003834:	eb 38                	jmp    c000386e <dir_find+0x10a>
c0003836:	89 f8                	mov    eax,edi
c0003838:	84 c0                	test   al,al
c000383a:	75 0d                	jne    c0003849 <dir_find+0xe5>
c000383c:	89 e8                	mov    eax,ebp
c000383e:	e8 e9 e8 ff ff       	call   c000212c <sum_sfn>
c0003843:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003847:	74 3f                	je     c0003888 <dir_find+0x124>
c0003849:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000384d:	75 13                	jne    c0003862 <dir_find+0xfe>
c000384f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003852:	b9 0b 00 00 00       	mov    ecx,0xb
c0003857:	89 e8                	mov    eax,ebp
c0003859:	e8 fd e4 ff ff       	call   c0001d5b <mem_cmp>
c000385e:	85 c0                	test   eax,eax
c0003860:	74 26                	je     c0003888 <dir_find+0x124>
c0003862:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003869:	bf ff ff ff ff       	mov    edi,0xffffffff
c000386e:	31 d2                	xor    edx,edx
c0003870:	89 d8                	mov    eax,ebx
c0003872:	e8 17 fc ff ff       	call   c000348e <dir_next>
c0003877:	89 c6                	mov    esi,eax
c0003879:	85 c0                	test   eax,eax
c000387b:	0f 84 16 ff ff ff    	je     c0003797 <dir_find+0x33>
c0003881:	eb 05                	jmp    c0003888 <dir_find+0x124>
c0003883:	be 04 00 00 00       	mov    esi,0x4
c0003888:	83 c4 1c             	add    esp,0x1c
c000388b:	89 f0                	mov    eax,esi
c000388d:	5b                   	pop    ebx
c000388e:	5e                   	pop    esi
c000388f:	5f                   	pop    edi
c0003890:	5d                   	pop    ebp
c0003891:	c3                   	ret    

c0003892 <follow_path>:
c0003892:	56                   	push   esi
c0003893:	53                   	push   ebx
c0003894:	89 c3                	mov    ebx,eax
c0003896:	83 ec 14             	sub    esp,0x14
c0003899:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000389d:	8b 30                	mov    esi,DWORD PTR [eax]
c000389f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038a3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038a5:	80 fa 5c             	cmp    dl,0x5c
c00038a8:	75 07                	jne    c00038b1 <follow_path+0x1f>
c00038aa:	40                   	inc    eax
c00038ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038af:	eb ee                	jmp    c000389f <follow_path+0xd>
c00038b1:	80 fa 2f             	cmp    dl,0x2f
c00038b4:	74 f4                	je     c00038aa <follow_path+0x18>
c00038b6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038bd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038c0:	77 3e                	ja     c0003900 <follow_path+0x6e>
c00038c2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038c6:	31 d2                	xor    edx,edx
c00038c8:	89 d8                	mov    eax,ebx
c00038ca:	e8 34 f9 ff ff       	call   c0003203 <dir_sdi>
c00038cf:	eb 4f                	jmp    c0003920 <follow_path+0x8e>
c00038d1:	89 d8                	mov    eax,ebx
c00038d3:	e8 8c fe ff ff       	call   c0003764 <dir_find>
c00038d8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038db:	85 c0                	test   eax,eax
c00038dd:	75 32                	jne    c0003911 <follow_path+0x7f>
c00038df:	80 e2 04             	and    dl,0x4
c00038e2:	75 3c                	jne    c0003920 <follow_path+0x8e>
c00038e4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038e8:	74 31                	je     c000391b <follow_path+0x89>
c00038ea:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038ed:	25 ff 01 00 00       	and    eax,0x1ff
c00038f2:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c00038f6:	8a 06                	mov    al,BYTE PTR [esi]
c00038f8:	e8 b3 f7 ff ff       	call   c00030b0 <ld_clust.isra.0>
c00038fd:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003900:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003904:	89 d8                	mov    eax,ebx
c0003906:	e8 cb ef ff ff       	call   c00028d6 <create_name>
c000390b:	85 c0                	test   eax,eax
c000390d:	74 c2                	je     c00038d1 <follow_path+0x3f>
c000390f:	eb 0f                	jmp    c0003920 <follow_path+0x8e>
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	75 0a                	jne    c0003920 <follow_path+0x8e>
c0003916:	80 e2 04             	and    dl,0x4
c0003919:	75 05                	jne    c0003920 <follow_path+0x8e>
c000391b:	b8 05 00 00 00       	mov    eax,0x5
c0003920:	83 c4 14             	add    esp,0x14
c0003923:	5b                   	pop    ebx
c0003924:	5e                   	pop    esi
c0003925:	c3                   	ret    

c0003926 <dir_register>:
c0003926:	55                   	push   ebp
c0003927:	57                   	push   edi
c0003928:	56                   	push   esi
c0003929:	be 06 00 00 00       	mov    esi,0x6
c000392e:	53                   	push   ebx
c000392f:	83 ec 2c             	sub    esp,0x2c
c0003932:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003936:	0f 85 65 01 00 00    	jne    c0003aa1 <dir_register+0x17b>
c000393c:	8b 38                	mov    edi,DWORD PTR [eax]
c000393e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003946:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003949:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000394d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003952:	74 06                	je     c000395a <dir_register+0x34>
c0003954:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003958:	eb ef                	jmp    c0003949 <dir_register+0x23>
c000395a:	89 c3                	mov    ebx,eax
c000395c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003961:	8d 40 20             	lea    eax,[eax+0x20]
c0003964:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003968:	89 c2                	mov    edx,eax
c000396a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000396e:	e8 c8 e3 ff ff       	call   c0001d3b <mem_cpy>
c0003973:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003978:	74 48                	je     c00039c2 <dir_register+0x9c>
c000397a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000397e:	bd 01 00 00 00       	mov    ebp,0x1
c0003983:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003986:	55                   	push   ebp
c0003987:	8d 54 24 18          	lea    edx,[esp+0x18]
c000398b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000398f:	e8 dc e6 ff ff       	call   c0002070 <gen_numname>
c0003994:	58                   	pop    eax
c0003995:	89 d8                	mov    eax,ebx
c0003997:	e8 c8 fd ff ff       	call   c0003764 <dir_find>
c000399c:	89 c6                	mov    esi,eax
c000399e:	85 c0                	test   eax,eax
c00039a0:	75 10                	jne    c00039b2 <dir_register+0x8c>
c00039a2:	45                   	inc    ebp
c00039a3:	83 fd 64             	cmp    ebp,0x64
c00039a6:	75 db                	jne    c0003983 <dir_register+0x5d>
c00039a8:	be 07 00 00 00       	mov    esi,0x7
c00039ad:	e9 ef 00 00 00       	jmp    c0003aa1 <dir_register+0x17b>
c00039b2:	83 f8 04             	cmp    eax,0x4
c00039b5:	0f 85 e6 00 00 00    	jne    c0003aa1 <dir_register+0x17b>
c00039bb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039bf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039c2:	bd 01 00 00 00       	mov    ebp,0x1
c00039c7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039cc:	74 13                	je     c00039e1 <dir_register+0xbb>
c00039ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039d2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039d7:	83 c0 0c             	add    eax,0xc
c00039da:	31 d2                	xor    edx,edx
c00039dc:	f7 f1                	div    ecx
c00039de:	8d 68 01             	lea    ebp,[eax+0x1]
c00039e1:	89 ea                	mov    edx,ebp
c00039e3:	89 d8                	mov    eax,ebx
c00039e5:	e8 a9 fb ff ff       	call   c0003593 <dir_alloc>
c00039ea:	89 c6                	mov    esi,eax
c00039ec:	85 c0                	test   eax,eax
c00039ee:	0f 85 ad 00 00 00    	jne    c0003aa1 <dir_register+0x17b>
c00039f4:	4d                   	dec    ebp
c00039f5:	74 6a                	je     c0003a61 <dir_register+0x13b>
c00039f7:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00039fa:	89 e8                	mov    eax,ebp
c00039fc:	c1 e0 05             	shl    eax,0x5
c00039ff:	29 c2                	sub    edx,eax
c0003a01:	89 d8                	mov    eax,ebx
c0003a03:	e8 fb f7 ff ff       	call   c0003203 <dir_sdi>
c0003a08:	89 c6                	mov    esi,eax
c0003a0a:	85 c0                	test   eax,eax
c0003a0c:	0f 85 8f 00 00 00    	jne    c0003aa1 <dir_register+0x17b>
c0003a12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a16:	e8 11 e7 ff ff       	call   c000212c <sum_sfn>
c0003a1b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a1f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a22:	89 f8                	mov    eax,edi
c0003a24:	e8 0c e8 ff ff       	call   c0002235 <move_window>
c0003a29:	89 c6                	mov    esi,eax
c0003a2b:	85 c0                	test   eax,eax
c0003a2d:	75 72                	jne    c0003aa1 <dir_register+0x17b>
c0003a2f:	83 ec 0c             	sub    esp,0xc
c0003a32:	89 e8                	mov    eax,ebp
c0003a34:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a39:	0f b6 c8             	movzx  ecx,al
c0003a3c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a3f:	52                   	push   edx
c0003a40:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a43:	e8 a4 e5 ff ff       	call   c0001fec <put_lfn>
c0003a48:	31 d2                	xor    edx,edx
c0003a4a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 39 fa ff ff       	call   c000348e <dir_next>
c0003a55:	83 c4 10             	add    esp,0x10
c0003a58:	89 c6                	mov    esi,eax
c0003a5a:	85 c0                	test   eax,eax
c0003a5c:	75 43                	jne    c0003aa1 <dir_register+0x17b>
c0003a5e:	4d                   	dec    ebp
c0003a5f:	75 be                	jne    c0003a1f <dir_register+0xf9>
c0003a61:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a64:	89 f8                	mov    eax,edi
c0003a66:	e8 ca e7 ff ff       	call   c0002235 <move_window>
c0003a6b:	89 c6                	mov    esi,eax
c0003a6d:	85 c0                	test   eax,eax
c0003a6f:	75 30                	jne    c0003aa1 <dir_register+0x17b>
c0003a71:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a74:	b9 20 00 00 00       	mov    ecx,0x20
c0003a79:	31 d2                	xor    edx,edx
c0003a7b:	e8 d0 e2 ff ff       	call   c0001d50 <mem_set>
c0003a80:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a83:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a87:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a8c:	e8 aa e2 ff ff       	call   c0001d3b <mem_cpy>
c0003a91:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003a94:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a97:	83 e0 18             	and    eax,0x18
c0003a9a:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003a9d:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003aa1:	83 c4 2c             	add    esp,0x2c
c0003aa4:	89 f0                	mov    eax,esi
c0003aa6:	5b                   	pop    ebx
c0003aa7:	5e                   	pop    esi
c0003aa8:	5f                   	pop    edi
c0003aa9:	5d                   	pop    ebp
c0003aaa:	c3                   	ret    

c0003aab <f_mount>:
c0003aab:	53                   	push   ebx
c0003aac:	83 ec 18             	sub    esp,0x18
c0003aaf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ab3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ab7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003abb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003abf:	e8 7a e6 ff ff       	call   c000213e <get_ldnumber>
c0003ac4:	89 c2                	mov    edx,eax
c0003ac6:	b8 0b 00 00 00       	mov    eax,0xb
c0003acb:	85 d2                	test   edx,edx
c0003acd:	78 39                	js     c0003b08 <f_mount+0x5d>
c0003acf:	8b 04 95 a0 34 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcb60]
c0003ad6:	85 c0                	test   eax,eax
c0003ad8:	74 03                	je     c0003add <f_mount+0x32>
c0003ada:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003add:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003ae1:	85 c0                	test   eax,eax
c0003ae3:	74 03                	je     c0003ae8 <f_mount+0x3d>
c0003ae5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003aec:	89 04 95 a0 34 02 c0 	mov    DWORD PTR [edx*4-0x3ffdcb60],eax
c0003af3:	31 c0                	xor    eax,eax
c0003af5:	84 db                	test   bl,bl
c0003af7:	74 0f                	je     c0003b08 <f_mount+0x5d>
c0003af9:	31 c9                	xor    ecx,ecx
c0003afb:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003aff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b03:	e8 80 e8 ff ff       	call   c0002388 <mount_volume>
c0003b08:	83 c4 18             	add    esp,0x18
c0003b0b:	5b                   	pop    ebx
c0003b0c:	c3                   	ret    

c0003b0d <f_open>:
c0003b0d:	55                   	push   ebp
c0003b0e:	b8 09 00 00 00       	mov    eax,0x9
c0003b13:	57                   	push   edi
c0003b14:	56                   	push   esi
c0003b15:	53                   	push   ebx
c0003b16:	83 ec 5c             	sub    esp,0x5c
c0003b19:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b1d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b21:	85 db                	test   ebx,ebx
c0003b23:	0f 84 a7 02 00 00    	je     c0003dd0 <f_open+0x2c3>
c0003b29:	89 fe                	mov    esi,edi
c0003b2b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b2f:	83 e6 3f             	and    esi,0x3f
c0003b32:	89 f0                	mov    eax,esi
c0003b34:	0f b6 c8             	movzx  ecx,al
c0003b37:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b3b:	e8 48 e8 ff ff       	call   c0002388 <mount_volume>
c0003b40:	85 c0                	test   eax,eax
c0003b42:	0f 85 82 02 00 00    	jne    c0003dca <f_open+0x2bd>
c0003b48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b4c:	83 ec 0c             	sub    esp,0xc
c0003b4f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b53:	68 00 02 00 00       	push   0x200
c0003b58:	e8 ff 1e 00 00       	call   c0005a5c <ff_memalloc>
c0003b5d:	83 c4 10             	add    esp,0x10
c0003b60:	89 c5                	mov    ebp,eax
c0003b62:	b8 11 00 00 00       	mov    eax,0x11
c0003b67:	85 ed                	test   ebp,ebp
c0003b69:	0f 84 61 02 00 00    	je     c0003dd0 <f_open+0x2c3>
c0003b6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b73:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b77:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b7a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b7e:	e8 0f fd ff ff       	call   c0003892 <follow_path>
c0003b83:	85 c0                	test   eax,eax
c0003b85:	75 0c                	jne    c0003b93 <f_open+0x86>
c0003b87:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b8c:	79 05                	jns    c0003b93 <f_open+0x86>
c0003b8e:	b8 06 00 00 00       	mov    eax,0x6
c0003b93:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003b99:	0f 84 de 00 00 00    	je     c0003c7d <f_open+0x170>
c0003b9f:	85 c0                	test   eax,eax
c0003ba1:	74 1e                	je     c0003bc1 <f_open+0xb4>
c0003ba3:	83 f8 04             	cmp    eax,0x4
c0003ba6:	0f 85 06 02 00 00    	jne    c0003db2 <f_open+0x2a5>
c0003bac:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bb0:	83 ce 08             	or     esi,0x8
c0003bb3:	e8 6e fd ff ff       	call   c0003926 <dir_register>
c0003bb8:	85 c0                	test   eax,eax
c0003bba:	74 2f                	je     c0003beb <f_open+0xde>
c0003bbc:	e9 f1 01 00 00       	jmp    c0003db2 <f_open+0x2a5>
c0003bc1:	b8 07 00 00 00       	mov    eax,0x7
c0003bc6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bcb:	0f 85 e1 01 00 00    	jne    c0003db2 <f_open+0x2a5>
c0003bd1:	b8 08 00 00 00       	mov    eax,0x8
c0003bd6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bdc:	0f 85 d0 01 00 00    	jne    c0003db2 <f_open+0x2a5>
c0003be2:	83 e7 08             	and    edi,0x8
c0003be5:	0f 84 bf 00 00 00    	je     c0003caa <f_open+0x19d>
c0003beb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003bf3:	89 ca                	mov    edx,ecx
c0003bf5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003bf9:	8a 00                	mov    al,BYTE PTR [eax]
c0003bfb:	e8 b0 f4 ff ff       	call   c00030b0 <ld_clust.isra.0>
c0003c00:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c04:	89 c7                	mov    edi,eax
c0003c06:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c0b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c0e:	e8 25 e1 ff ff       	call   c0001d38 <st_dword>
c0003c13:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c17:	31 c9                	xor    ecx,ecx
c0003c19:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c21:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c25:	e8 af f4 ff ff       	call   c00030d9 <st_clust.isra.1>
c0003c2a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c2e:	31 d2                	xor    edx,edx
c0003c30:	83 c0 1c             	add    eax,0x1c
c0003c33:	e8 00 e1 ff ff       	call   c0001d38 <st_dword>
c0003c38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c3c:	85 ff                	test   edi,edi
c0003c3e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c42:	74 66                	je     c0003caa <f_open+0x19d>
c0003c44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c48:	31 c9                	xor    ecx,ecx
c0003c4a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c4d:	89 fa                	mov    edx,edi
c0003c4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c53:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c57:	e8 a9 f7 ff ff       	call   c0003405 <remove_chain>
c0003c5c:	85 c0                	test   eax,eax
c0003c5e:	0f 85 4e 01 00 00    	jne    c0003db2 <f_open+0x2a5>
c0003c64:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c68:	4f                   	dec    edi
c0003c69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c6d:	e8 c3 e5 ff ff       	call   c0002235 <move_window>
c0003c72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c76:	85 c0                	test   eax,eax
c0003c78:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c7b:	eb 27                	jmp    c0003ca4 <f_open+0x197>
c0003c7d:	85 c0                	test   eax,eax
c0003c7f:	0f 85 2d 01 00 00    	jne    c0003db2 <f_open+0x2a5>
c0003c85:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c89:	b8 04 00 00 00       	mov    eax,0x4
c0003c8e:	f6 c2 10             	test   dl,0x10
c0003c91:	0f 85 1b 01 00 00    	jne    c0003db2 <f_open+0x2a5>
c0003c97:	83 e7 02             	and    edi,0x2
c0003c9a:	74 0e                	je     c0003caa <f_open+0x19d>
c0003c9c:	b8 07 00 00 00       	mov    eax,0x7
c0003ca1:	80 e2 01             	and    dl,0x1
c0003ca4:	0f 85 08 01 00 00    	jne    c0003db2 <f_open+0x2a5>
c0003caa:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cb0:	74 03                	je     c0003cb5 <f_open+0x1a8>
c0003cb2:	83 ce 40             	or     esi,0x40
c0003cb5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cb9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003cbd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cc0:	89 fa                	mov    edx,edi
c0003cc2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cc6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cc9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003ccc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cce:	e8 dd f3 ff ff       	call   c00030b0 <ld_clust.isra.0>
c0003cd3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003cd6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003cd9:	e8 3e e0 ff ff       	call   c0001d1c <ld_dword>
c0003cde:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003ce2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003ce5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003ce7:	31 d2                	xor    edx,edx
c0003ce9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003ced:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003cf1:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003cf5:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003cfc:	89 f0                	mov    eax,esi
c0003cfe:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d05:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d08:	b9 00 02 00 00       	mov    ecx,0x200
c0003d0d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d14:	e8 37 e0 ff ff       	call   c0001d50 <mem_set>
c0003d19:	83 e6 20             	and    esi,0x20
c0003d1c:	75 07                	jne    c0003d25 <f_open+0x218>
c0003d1e:	31 c0                	xor    eax,eax
c0003d20:	e9 8d 00 00 00       	jmp    c0003db2 <f_open+0x2a5>
c0003d25:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d28:	85 ff                	test   edi,edi
c0003d2a:	74 f2                	je     c0003d1e <f_open+0x211>
c0003d2c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d33:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d36:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d3a:	c1 e6 09             	shl    esi,0x9
c0003d3d:	39 fe                	cmp    esi,edi
c0003d3f:	73 1c                	jae    c0003d5d <f_open+0x250>
c0003d41:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d43:	29 f7                	sub    edi,esi
c0003d45:	e8 b7 f3 ff ff       	call   c0003101 <get_fat.isra.2>
c0003d4a:	89 c2                	mov    edx,eax
c0003d4c:	83 f8 01             	cmp    eax,0x1
c0003d4f:	76 10                	jbe    c0003d61 <f_open+0x254>
c0003d51:	83 f8 ff             	cmp    eax,0xffffffff
c0003d54:	75 e7                	jne    c0003d3d <f_open+0x230>
c0003d56:	b8 01 00 00 00       	mov    eax,0x1
c0003d5b:	eb 09                	jmp    c0003d66 <f_open+0x259>
c0003d5d:	31 c0                	xor    eax,eax
c0003d5f:	eb 05                	jmp    c0003d66 <f_open+0x259>
c0003d61:	b8 02 00 00 00       	mov    eax,0x2
c0003d66:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d69:	85 c0                	test   eax,eax
c0003d6b:	75 45                	jne    c0003db2 <f_open+0x2a5>
c0003d6d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d73:	74 a9                	je     c0003d1e <f_open+0x211>
c0003d75:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d79:	89 f0                	mov    eax,esi
c0003d7b:	e8 d5 e1 ff ff       	call   c0001f55 <clst2sect>
c0003d80:	89 c2                	mov    edx,eax
c0003d82:	b8 02 00 00 00       	mov    eax,0x2
c0003d87:	85 d2                	test   edx,edx
c0003d89:	74 27                	je     c0003db2 <f_open+0x2a5>
c0003d8b:	89 f9                	mov    ecx,edi
c0003d8d:	c1 e9 09             	shr    ecx,0x9
c0003d90:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003d93:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003d96:	6a 01                	push   0x1
c0003d98:	50                   	push   eax
c0003d99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003d9d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003da1:	50                   	push   eax
c0003da2:	e8 1d df ff ff       	call   c0001cc4 <disk_read>
c0003da7:	83 c4 10             	add    esp,0x10
c0003daa:	85 c0                	test   eax,eax
c0003dac:	0f 95 c0             	setne  al
c0003daf:	0f b6 c0             	movzx  eax,al
c0003db2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003db6:	83 ec 0c             	sub    esp,0xc
c0003db9:	55                   	push   ebp
c0003dba:	e8 b5 1c 00 00       	call   c0005a74 <ff_memfree>
c0003dbf:	83 c4 10             	add    esp,0x10
c0003dc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dc6:	85 c0                	test   eax,eax
c0003dc8:	74 06                	je     c0003dd0 <f_open+0x2c3>
c0003dca:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003dd0:	83 c4 5c             	add    esp,0x5c
c0003dd3:	5b                   	pop    ebx
c0003dd4:	5e                   	pop    esi
c0003dd5:	5f                   	pop    edi
c0003dd6:	5d                   	pop    ebp
c0003dd7:	c3                   	ret    

c0003dd8 <f_read>:
c0003dd8:	55                   	push   ebp
c0003dd9:	57                   	push   edi
c0003dda:	56                   	push   esi
c0003ddb:	53                   	push   ebx
c0003ddc:	83 ec 2c             	sub    esp,0x2c
c0003ddf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003de3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003de7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ded:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003df1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003df5:	89 d8                	mov    eax,ebx
c0003df7:	e8 8f e3 ff ff       	call   c000218b <validate>
c0003dfc:	89 c5                	mov    ebp,eax
c0003dfe:	85 c0                	test   eax,eax
c0003e00:	0f 85 c7 01 00 00    	jne    c0003fcd <f_read+0x1f5>
c0003e06:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e0a:	85 ed                	test   ebp,ebp
c0003e0c:	0f 85 bb 01 00 00    	jne    c0003fcd <f_read+0x1f5>
c0003e12:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e16:	0f 84 ac 01 00 00    	je     c0003fc8 <f_read+0x1f0>
c0003e1c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e1f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e22:	89 c7                	mov    edi,eax
c0003e24:	39 f0                	cmp    eax,esi
c0003e26:	0f 86 ad 00 00 00    	jbe    c0003ed9 <f_read+0x101>
c0003e2c:	89 f7                	mov    edi,esi
c0003e2e:	e9 a6 00 00 00       	jmp    c0003ed9 <f_read+0x101>
c0003e33:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e36:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e3c:	0f 85 5b 01 00 00    	jne    c0003f9d <f_read+0x1c5>
c0003e42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e46:	89 d1                	mov    ecx,edx
c0003e48:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e4c:	c1 e9 09             	shr    ecx,0x9
c0003e4f:	48                   	dec    eax
c0003e50:	21 c8                	and    eax,ecx
c0003e52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e56:	0f 84 8a 00 00 00    	je     c0003ee6 <f_read+0x10e>
c0003e5c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e60:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e63:	89 c8                	mov    eax,ecx
c0003e65:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e69:	e8 e7 e0 ff ff       	call   c0001f55 <clst2sect>
c0003e6e:	85 c0                	test   eax,eax
c0003e70:	0f 84 88 00 00 00    	je     c0003efe <f_read+0x126>
c0003e76:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e7a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e7e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e82:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e88:	0f 86 bd 00 00 00    	jbe    c0003f4b <f_read+0x173>
c0003e8e:	89 fe                	mov    esi,edi
c0003e90:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003e94:	c1 ee 09             	shr    esi,0x9
c0003e97:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e9b:	01 f2                	add    edx,esi
c0003e9d:	39 c2                	cmp    edx,eax
c0003e9f:	76 06                	jbe    c0003ea7 <f_read+0xcf>
c0003ea1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ea5:	89 c6                	mov    esi,eax
c0003ea7:	56                   	push   esi
c0003ea8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003eac:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003eb0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003eb4:	50                   	push   eax
c0003eb5:	e8 0a de ff ff       	call   c0001cc4 <disk_read>
c0003eba:	83 c4 10             	add    esp,0x10
c0003ebd:	85 c0                	test   eax,eax
c0003ebf:	75 50                	jne    c0003f11 <f_read+0x139>
c0003ec1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ec5:	78 60                	js     c0003f27 <f_read+0x14f>
c0003ec7:	c1 e6 09             	shl    esi,0x9
c0003eca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ece:	29 f7                	sub    edi,esi
c0003ed0:	01 30                	add    DWORD PTR [eax],esi
c0003ed2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ed6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ed9:	85 ff                	test   edi,edi
c0003edb:	0f 85 52 ff ff ff    	jne    c0003e33 <f_read+0x5b>
c0003ee1:	e9 e7 00 00 00       	jmp    c0003fcd <f_read+0x1f5>
c0003ee6:	85 d2                	test   edx,edx
c0003ee8:	75 05                	jne    c0003eef <f_read+0x117>
c0003eea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003eed:	eb 0a                	jmp    c0003ef9 <f_read+0x121>
c0003eef:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ef2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ef4:	e8 08 f2 ff ff       	call   c0003101 <get_fat.isra.2>
c0003ef9:	83 f8 01             	cmp    eax,0x1
c0003efc:	77 0e                	ja     c0003f0c <f_read+0x134>
c0003efe:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f02:	bd 02 00 00 00       	mov    ebp,0x2
c0003f07:	e9 c1 00 00 00       	jmp    c0003fcd <f_read+0x1f5>
c0003f0c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f0f:	75 0e                	jne    c0003f1f <f_read+0x147>
c0003f11:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f15:	bd 01 00 00 00       	mov    ebp,0x1
c0003f1a:	e9 ae 00 00 00       	jmp    c0003fcd <f_read+0x1f5>
c0003f1f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f22:	e9 35 ff ff ff       	jmp    c0003e5c <f_read+0x84>
c0003f27:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f2a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f2e:	39 f0                	cmp    eax,esi
c0003f30:	73 95                	jae    c0003ec7 <f_read+0xef>
c0003f32:	c1 e0 09             	shl    eax,0x9
c0003f35:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f38:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f3c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f41:	e8 f5 dd ff ff       	call   c0001d3b <mem_cpy>
c0003f46:	e9 7c ff ff ff       	jmp    c0003ec7 <f_read+0xef>
c0003f4b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f4e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f52:	74 42                	je     c0003f96 <f_read+0x1be>
c0003f54:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f57:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f5b:	79 19                	jns    c0003f76 <f_read+0x19e>
c0003f5d:	6a 01                	push   0x1
c0003f5f:	50                   	push   eax
c0003f60:	56                   	push   esi
c0003f61:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f65:	50                   	push   eax
c0003f66:	e8 6f dd ff ff       	call   c0001cda <disk_write>
c0003f6b:	83 c4 10             	add    esp,0x10
c0003f6e:	85 c0                	test   eax,eax
c0003f70:	75 9f                	jne    c0003f11 <f_read+0x139>
c0003f72:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f76:	6a 01                	push   0x1
c0003f78:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f7c:	56                   	push   esi
c0003f7d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f81:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f85:	50                   	push   eax
c0003f86:	e8 39 dd ff ff       	call   c0001cc4 <disk_read>
c0003f8b:	83 c4 10             	add    esp,0x10
c0003f8e:	85 c0                	test   eax,eax
c0003f90:	0f 85 7b ff ff ff    	jne    c0003f11 <f_read+0x139>
c0003f96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f9a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f9d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fa0:	ba 00 02 00 00       	mov    edx,0x200
c0003fa5:	25 ff 01 00 00       	and    eax,0x1ff
c0003faa:	89 fe                	mov    esi,edi
c0003fac:	29 c2                	sub    edx,eax
c0003fae:	39 d7                	cmp    edi,edx
c0003fb0:	76 02                	jbe    c0003fb4 <f_read+0x1dc>
c0003fb2:	89 d6                	mov    esi,edx
c0003fb4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fb8:	89 f1                	mov    ecx,esi
c0003fba:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fbe:	e8 78 dd ff ff       	call   c0001d3b <mem_cpy>
c0003fc3:	e9 02 ff ff ff       	jmp    c0003eca <f_read+0xf2>
c0003fc8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fcd:	83 c4 2c             	add    esp,0x2c
c0003fd0:	89 e8                	mov    eax,ebp
c0003fd2:	5b                   	pop    ebx
c0003fd3:	5e                   	pop    esi
c0003fd4:	5f                   	pop    edi
c0003fd5:	5d                   	pop    ebp
c0003fd6:	c3                   	ret    

c0003fd7 <f_write>:
c0003fd7:	55                   	push   ebp
c0003fd8:	57                   	push   edi
c0003fd9:	56                   	push   esi
c0003fda:	53                   	push   ebx
c0003fdb:	83 ec 2c             	sub    esp,0x2c
c0003fde:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003fe2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003fe6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003fec:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003ff0:	89 d8                	mov    eax,ebx
c0003ff2:	e8 94 e1 ff ff       	call   c000218b <validate>
c0003ff7:	89 c5                	mov    ebp,eax
c0003ff9:	85 c0                	test   eax,eax
c0003ffb:	0f 85 00 02 00 00    	jne    c0004201 <f_write+0x22a>
c0004001:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004005:	85 ed                	test   ebp,ebp
c0004007:	0f 85 f4 01 00 00    	jne    c0004201 <f_write+0x22a>
c000400d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004011:	0f 84 e5 01 00 00    	je     c00041fc <f_write+0x225>
c0004017:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000401a:	89 c7                	mov    edi,eax
c000401c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004020:	0f 83 ea 00 00 00    	jae    c0004110 <f_write+0x139>
c0004026:	f7 d0                	not    eax
c0004028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000402c:	e9 df 00 00 00       	jmp    c0004110 <f_write+0x139>
c0004031:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004034:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000403a:	0f 85 8b 01 00 00    	jne    c00041cb <f_write+0x1f4>
c0004040:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004044:	89 d1                	mov    ecx,edx
c0004046:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000404a:	c1 e9 09             	shr    ecx,0x9
c000404d:	48                   	dec    eax
c000404e:	21 c8                	and    eax,ecx
c0004050:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004054:	0f 84 c3 00 00 00    	je     c000411d <f_write+0x146>
c000405a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000405e:	0f 88 18 01 00 00    	js     c000417c <f_write+0x1a5>
c0004064:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004068:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000406b:	89 c8                	mov    eax,ecx
c000406d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004071:	e8 df de ff ff       	call   c0001f55 <clst2sect>
c0004076:	85 c0                	test   eax,eax
c0004078:	0f 84 c8 00 00 00    	je     c0004146 <f_write+0x16f>
c000407e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004082:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004086:	01 c7                	add    edi,eax
c0004088:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0004090:	0f 86 0d 01 00 00    	jbe    c00041a3 <f_write+0x1cc>
c0004096:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000409a:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000409e:	c1 ee 09             	shr    esi,0x9
c00040a1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040a5:	01 f2                	add    edx,esi
c00040a7:	39 c2                	cmp    edx,eax
c00040a9:	76 06                	jbe    c00040b1 <f_write+0xda>
c00040ab:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040af:	89 c6                	mov    esi,eax
c00040b1:	56                   	push   esi
c00040b2:	57                   	push   edi
c00040b3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040b7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bb:	50                   	push   eax
c00040bc:	e8 19 dc ff ff       	call   c0001cda <disk_write>
c00040c1:	83 c4 10             	add    esp,0x10
c00040c4:	85 c0                	test   eax,eax
c00040c6:	0f 85 8d 00 00 00    	jne    c0004159 <f_write+0x182>
c00040cc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040cf:	29 fa                	sub    edx,edi
c00040d1:	39 f2                	cmp    edx,esi
c00040d3:	73 18                	jae    c00040ed <f_write+0x116>
c00040d5:	c1 e2 09             	shl    edx,0x9
c00040d8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040db:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040df:	b9 00 02 00 00       	mov    ecx,0x200
c00040e4:	e8 52 dc ff ff       	call   c0001d3b <mem_cpy>
c00040e9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040ed:	c1 e6 09             	shl    esi,0x9
c00040f0:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00040f4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00040f8:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00040fc:	01 30                	add    DWORD PTR [eax],esi
c00040fe:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004101:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004104:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004107:	39 f0                	cmp    eax,esi
c0004109:	73 02                	jae    c000410d <f_write+0x136>
c000410b:	89 f0                	mov    eax,esi
c000410d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004110:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004115:	0f 85 16 ff ff ff    	jne    c0004031 <f_write+0x5a>
c000411b:	eb 1b                	jmp    c0004138 <f_write+0x161>
c000411d:	85 d2                	test   edx,edx
c000411f:	75 09                	jne    c000412a <f_write+0x153>
c0004121:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004124:	85 c0                	test   eax,eax
c0004126:	75 19                	jne    c0004141 <f_write+0x16a>
c0004128:	eb 03                	jmp    c000412d <f_write+0x156>
c000412a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000412d:	89 d8                	mov    eax,ebx
c000412f:	e8 97 f1 ff ff       	call   c00032cb <create_chain>
c0004134:	85 c0                	test   eax,eax
c0004136:	75 09                	jne    c0004141 <f_write+0x16a>
c0004138:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000413c:	e9 c0 00 00 00       	jmp    c0004201 <f_write+0x22a>
c0004141:	83 f8 01             	cmp    eax,0x1
c0004144:	75 0e                	jne    c0004154 <f_write+0x17d>
c0004146:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000414a:	bd 02 00 00 00       	mov    ebp,0x2
c000414f:	e9 ad 00 00 00       	jmp    c0004201 <f_write+0x22a>
c0004154:	83 f8 ff             	cmp    eax,0xffffffff
c0004157:	75 0e                	jne    c0004167 <f_write+0x190>
c0004159:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000415d:	bd 01 00 00 00       	mov    ebp,0x1
c0004162:	e9 9a 00 00 00       	jmp    c0004201 <f_write+0x22a>
c0004167:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000416a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000416e:	0f 85 e6 fe ff ff    	jne    c000405a <f_write+0x83>
c0004174:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004177:	e9 de fe ff ff       	jmp    c000405a <f_write+0x83>
c000417c:	6a 01                	push   0x1
c000417e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004181:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004184:	50                   	push   eax
c0004185:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004189:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000418d:	50                   	push   eax
c000418e:	e8 47 db ff ff       	call   c0001cda <disk_write>
c0004193:	83 c4 10             	add    esp,0x10
c0004196:	85 c0                	test   eax,eax
c0004198:	75 bf                	jne    c0004159 <f_write+0x182>
c000419a:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000419e:	e9 c1 fe ff ff       	jmp    c0004064 <f_write+0x8d>
c00041a3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041a6:	74 20                	je     c00041c8 <f_write+0x1f1>
c00041a8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041ab:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041ae:	76 18                	jbe    c00041c8 <f_write+0x1f1>
c00041b0:	6a 01                	push   0x1
c00041b2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041b5:	57                   	push   edi
c00041b6:	50                   	push   eax
c00041b7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041bb:	50                   	push   eax
c00041bc:	e8 03 db ff ff       	call   c0001cc4 <disk_read>
c00041c1:	83 c4 10             	add    esp,0x10
c00041c4:	85 c0                	test   eax,eax
c00041c6:	75 91                	jne    c0004159 <f_write+0x182>
c00041c8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041cb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041ce:	ba 00 02 00 00       	mov    edx,0x200
c00041d3:	25 ff 01 00 00       	and    eax,0x1ff
c00041d8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041dc:	29 c2                	sub    edx,eax
c00041de:	39 d6                	cmp    esi,edx
c00041e0:	76 02                	jbe    c00041e4 <f_write+0x20d>
c00041e2:	89 d6                	mov    esi,edx
c00041e4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041e8:	89 f1                	mov    ecx,esi
c00041ea:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041ee:	e8 48 db ff ff       	call   c0001d3b <mem_cpy>
c00041f3:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c00041f7:	e9 f4 fe ff ff       	jmp    c00040f0 <f_write+0x119>
c00041fc:	bd 07 00 00 00       	mov    ebp,0x7
c0004201:	83 c4 2c             	add    esp,0x2c
c0004204:	89 e8                	mov    eax,ebp
c0004206:	5b                   	pop    ebx
c0004207:	5e                   	pop    esi
c0004208:	5f                   	pop    edi
c0004209:	5d                   	pop    ebp
c000420a:	c3                   	ret    

c000420b <f_sync>:
c000420b:	56                   	push   esi
c000420c:	53                   	push   ebx
c000420d:	83 ec 14             	sub    esp,0x14
c0004210:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004214:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004218:	89 d8                	mov    eax,ebx
c000421a:	e8 6c df ff ff       	call   c000218b <validate>
c000421f:	85 c0                	test   eax,eax
c0004221:	0f 85 93 00 00 00    	jne    c00042ba <f_sync+0xaf>
c0004227:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000422a:	f6 c2 40             	test   dl,0x40
c000422d:	0f 84 87 00 00 00    	je     c00042ba <f_sync+0xaf>
c0004233:	84 d2                	test   dl,dl
c0004235:	79 29                	jns    c0004260 <f_sync+0x55>
c0004237:	6a 01                	push   0x1
c0004239:	8d 43 28             	lea    eax,[ebx+0x28]
c000423c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000423f:	50                   	push   eax
c0004240:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004244:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004248:	50                   	push   eax
c0004249:	e8 8c da ff ff       	call   c0001cda <disk_write>
c000424e:	83 c4 10             	add    esp,0x10
c0004251:	89 c2                	mov    edx,eax
c0004253:	b8 01 00 00 00       	mov    eax,0x1
c0004258:	85 d2                	test   edx,edx
c000425a:	75 5e                	jne    c00042ba <f_sync+0xaf>
c000425c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004260:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004263:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004267:	e8 c9 df ff ff       	call   c0002235 <move_window>
c000426c:	85 c0                	test   eax,eax
c000426e:	75 4a                	jne    c00042ba <f_sync+0xaf>
c0004270:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004273:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004277:	89 f2                	mov    edx,esi
c0004279:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000427c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000427e:	e8 56 ee ff ff       	call   c00030d9 <st_clust.isra.1>
c0004283:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004286:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004289:	e8 aa da ff ff       	call   c0001d38 <st_dword>
c000428e:	8d 46 16             	lea    eax,[esi+0x16]
c0004291:	ba 00 00 21 50       	mov    edx,0x50210000
c0004296:	e8 9d da ff ff       	call   c0001d38 <st_dword>
c000429b:	8d 46 12             	lea    eax,[esi+0x12]
c000429e:	31 d2                	xor    edx,edx
c00042a0:	e8 8f da ff ff       	call   c0001d34 <st_word>
c00042a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042a9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b1:	e8 bf e9 ff ff       	call   c0002c75 <sync_fs>
c00042b6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ba:	83 c4 14             	add    esp,0x14
c00042bd:	5b                   	pop    ebx
c00042be:	5e                   	pop    esi
c00042bf:	c3                   	ret    

c00042c0 <f_close>:
c00042c0:	53                   	push   ebx
c00042c1:	83 ec 24             	sub    esp,0x24
c00042c4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042c8:	53                   	push   ebx
c00042c9:	e8 3d ff ff ff       	call   c000420b <f_sync>
c00042ce:	83 c4 10             	add    esp,0x10
c00042d1:	85 c0                	test   eax,eax
c00042d3:	75 15                	jne    c00042ea <f_close+0x2a>
c00042d5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042d9:	89 d8                	mov    eax,ebx
c00042db:	e8 ab de ff ff       	call   c000218b <validate>
c00042e0:	85 c0                	test   eax,eax
c00042e2:	75 06                	jne    c00042ea <f_close+0x2a>
c00042e4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042ea:	83 c4 18             	add    esp,0x18
c00042ed:	5b                   	pop    ebx
c00042ee:	c3                   	ret    

c00042ef <f_lseek>:
c00042ef:	55                   	push   ebp
c00042f0:	57                   	push   edi
c00042f1:	56                   	push   esi
c00042f2:	53                   	push   ebx
c00042f3:	83 ec 2c             	sub    esp,0x2c
c00042f6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00042fa:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00042fe:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004302:	89 d8                	mov    eax,ebx
c0004304:	e8 82 de ff ff       	call   c000218b <validate>
c0004309:	89 c5                	mov    ebp,eax
c000430b:	85 c0                	test   eax,eax
c000430d:	0f 85 79 01 00 00    	jne    c000448c <f_lseek+0x19d>
c0004313:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004317:	85 ed                	test   ebp,ebp
c0004319:	0f 85 6d 01 00 00    	jne    c000448c <f_lseek+0x19d>
c000431f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004322:	39 f0                	cmp    eax,esi
c0004324:	73 08                	jae    c000432e <f_lseek+0x3f>
c0004326:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000432a:	75 02                	jne    c000432e <f_lseek+0x3f>
c000432c:	89 c6                	mov    esi,eax
c000432e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004331:	85 f6                	test   esi,esi
c0004333:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000433a:	75 07                	jne    c0004343 <f_lseek+0x54>
c000433c:	31 f6                	xor    esi,esi
c000433e:	e9 e2 00 00 00       	jmp    c0004425 <f_lseek+0x136>
c0004343:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004347:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000434b:	c1 e7 09             	shl    edi,0x9
c000434e:	85 c9                	test   ecx,ecx
c0004350:	74 28                	je     c000437a <f_lseek+0x8b>
c0004352:	49                   	dec    ecx
c0004353:	31 d2                	xor    edx,edx
c0004355:	8d 46 ff             	lea    eax,[esi-0x1]
c0004358:	f7 f7                	div    edi
c000435a:	31 d2                	xor    edx,edx
c000435c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004360:	89 c8                	mov    eax,ecx
c0004362:	f7 f7                	div    edi
c0004364:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004368:	72 10                	jb     c000437a <f_lseek+0x8b>
c000436a:	89 f8                	mov    eax,edi
c000436c:	f7 d8                	neg    eax
c000436e:	21 c1                	and    ecx,eax
c0004370:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004373:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004376:	29 ce                	sub    esi,ecx
c0004378:	eb 3c                	jmp    c00043b6 <f_lseek+0xc7>
c000437a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000437d:	85 c0                	test   eax,eax
c000437f:	75 32                	jne    c00043b3 <f_lseek+0xc4>
c0004381:	31 d2                	xor    edx,edx
c0004383:	89 d8                	mov    eax,ebx
c0004385:	e8 41 ef ff ff       	call   c00032cb <create_chain>
c000438a:	83 f8 01             	cmp    eax,0x1
c000438d:	75 0e                	jne    c000439d <f_lseek+0xae>
c000438f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004393:	bd 02 00 00 00       	mov    ebp,0x2
c0004398:	e9 ef 00 00 00       	jmp    c000448c <f_lseek+0x19d>
c000439d:	83 f8 ff             	cmp    eax,0xffffffff
c00043a0:	75 0e                	jne    c00043b0 <f_lseek+0xc1>
c00043a2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043a6:	bd 01 00 00 00       	mov    ebp,0x1
c00043ab:	e9 dc 00 00 00       	jmp    c000448c <f_lseek+0x19d>
c00043b0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043b3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043b6:	85 c0                	test   eax,eax
c00043b8:	74 82                	je     c000433c <f_lseek+0x4d>
c00043ba:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043bd:	39 fe                	cmp    esi,edi
c00043bf:	76 3d                	jbe    c00043fe <f_lseek+0x10f>
c00043c1:	01 fa                	add    edx,edi
c00043c3:	29 fe                	sub    esi,edi
c00043c5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043c8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043cc:	89 c2                	mov    edx,eax
c00043ce:	74 0d                	je     c00043dd <f_lseek+0xee>
c00043d0:	89 d8                	mov    eax,ebx
c00043d2:	e8 f4 ee ff ff       	call   c00032cb <create_chain>
c00043d7:	85 c0                	test   eax,eax
c00043d9:	75 09                	jne    c00043e4 <f_lseek+0xf5>
c00043db:	eb 1f                	jmp    c00043fc <f_lseek+0x10d>
c00043dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043df:	e8 1d ed ff ff       	call   c0003101 <get_fat.isra.2>
c00043e4:	83 f8 ff             	cmp    eax,0xffffffff
c00043e7:	74 b9                	je     c00043a2 <f_lseek+0xb3>
c00043e9:	83 f8 01             	cmp    eax,0x1
c00043ec:	76 a1                	jbe    c000438f <f_lseek+0xa0>
c00043ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00043f2:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c00043f5:	76 98                	jbe    c000438f <f_lseek+0xa0>
c00043f7:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043fa:	eb be                	jmp    c00043ba <f_lseek+0xcb>
c00043fc:	31 f6                	xor    esi,esi
c00043fe:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004401:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004407:	0f 84 2f ff ff ff    	je     c000433c <f_lseek+0x4d>
c000440d:	89 c2                	mov    edx,eax
c000440f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004413:	e8 3d db ff ff       	call   c0001f55 <clst2sect>
c0004418:	85 c0                	test   eax,eax
c000441a:	0f 84 6f ff ff ff    	je     c000438f <f_lseek+0xa0>
c0004420:	c1 ee 09             	shr    esi,0x9
c0004423:	01 c6                	add    esi,eax
c0004425:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004428:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000442b:	76 07                	jbe    c0004434 <f_lseek+0x145>
c000442d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004430:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004434:	a9 ff 01 00 00       	test   eax,0x1ff
c0004439:	74 51                	je     c000448c <f_lseek+0x19d>
c000443b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000443e:	39 f0                	cmp    eax,esi
c0004440:	74 4a                	je     c000448c <f_lseek+0x19d>
c0004442:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004445:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004449:	79 21                	jns    c000446c <f_lseek+0x17d>
c000444b:	6a 01                	push   0x1
c000444d:	50                   	push   eax
c000444e:	57                   	push   edi
c000444f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004453:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004457:	50                   	push   eax
c0004458:	e8 7d d8 ff ff       	call   c0001cda <disk_write>
c000445d:	83 c4 10             	add    esp,0x10
c0004460:	85 c0                	test   eax,eax
c0004462:	0f 85 3a ff ff ff    	jne    c00043a2 <f_lseek+0xb3>
c0004468:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000446c:	6a 01                	push   0x1
c000446e:	56                   	push   esi
c000446f:	57                   	push   edi
c0004470:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004474:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004478:	50                   	push   eax
c0004479:	e8 46 d8 ff ff       	call   c0001cc4 <disk_read>
c000447e:	83 c4 10             	add    esp,0x10
c0004481:	85 c0                	test   eax,eax
c0004483:	0f 85 19 ff ff ff    	jne    c00043a2 <f_lseek+0xb3>
c0004489:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000448c:	83 c4 2c             	add    esp,0x2c
c000448f:	89 e8                	mov    eax,ebp
c0004491:	5b                   	pop    ebx
c0004492:	5e                   	pop    esi
c0004493:	5f                   	pop    edi
c0004494:	5d                   	pop    ebp
c0004495:	c3                   	ret    

c0004496 <f_opendir>:
c0004496:	56                   	push   esi
c0004497:	b8 09 00 00 00       	mov    eax,0x9
c000449c:	53                   	push   ebx
c000449d:	83 ec 24             	sub    esp,0x24
c00044a0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044a4:	85 db                	test   ebx,ebx
c00044a6:	0f 84 af 00 00 00    	je     c000455b <f_opendir+0xc5>
c00044ac:	31 c9                	xor    ecx,ecx
c00044ae:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044b2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044b6:	e8 cd de ff ff       	call   c0002388 <mount_volume>
c00044bb:	85 c0                	test   eax,eax
c00044bd:	0f 85 92 00 00 00    	jne    c0004555 <f_opendir+0xbf>
c00044c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044c7:	83 ec 0c             	sub    esp,0xc
c00044ca:	89 03                	mov    DWORD PTR [ebx],eax
c00044cc:	68 00 02 00 00       	push   0x200
c00044d1:	e8 86 15 00 00       	call   c0005a5c <ff_memalloc>
c00044d6:	83 c4 10             	add    esp,0x10
c00044d9:	89 c6                	mov    esi,eax
c00044db:	b8 11 00 00 00       	mov    eax,0x11
c00044e0:	85 f6                	test   esi,esi
c00044e2:	74 77                	je     c000455b <f_opendir+0xc5>
c00044e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044e8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044ec:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ef:	89 d8                	mov    eax,ebx
c00044f1:	e8 9c f3 ff ff       	call   c0003892 <follow_path>
c00044f6:	85 c0                	test   eax,eax
c00044f8:	75 37                	jne    c0004531 <f_opendir+0x9b>
c00044fa:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c00044fe:	78 1c                	js     c000451c <f_opendir+0x86>
c0004500:	b8 05 00 00 00       	mov    eax,0x5
c0004505:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004509:	74 26                	je     c0004531 <f_opendir+0x9b>
c000450b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000450e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004512:	8a 00                	mov    al,BYTE PTR [eax]
c0004514:	e8 97 eb ff ff       	call   c00030b0 <ld_clust.isra.0>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004520:	31 d2                	xor    edx,edx
c0004522:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004526:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000452a:	89 d8                	mov    eax,ebx
c000452c:	e8 d2 ec ff ff       	call   c0003203 <dir_sdi>
c0004531:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004535:	83 ec 0c             	sub    esp,0xc
c0004538:	56                   	push   esi
c0004539:	e8 36 15 00 00       	call   c0005a74 <ff_memfree>
c000453e:	83 c4 10             	add    esp,0x10
c0004541:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004545:	83 f8 04             	cmp    eax,0x4
c0004548:	74 06                	je     c0004550 <f_opendir+0xba>
c000454a:	85 c0                	test   eax,eax
c000454c:	74 0d                	je     c000455b <f_opendir+0xc5>
c000454e:	eb 05                	jmp    c0004555 <f_opendir+0xbf>
c0004550:	b8 05 00 00 00       	mov    eax,0x5
c0004555:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000455b:	83 c4 24             	add    esp,0x24
c000455e:	5b                   	pop    ebx
c000455f:	5e                   	pop    esi
c0004560:	c3                   	ret    

c0004561 <f_closedir>:
c0004561:	53                   	push   ebx
c0004562:	83 ec 18             	sub    esp,0x18
c0004565:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004569:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000456d:	89 d8                	mov    eax,ebx
c000456f:	e8 17 dc ff ff       	call   c000218b <validate>
c0004574:	85 c0                	test   eax,eax
c0004576:	75 06                	jne    c000457e <f_closedir+0x1d>
c0004578:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000457e:	83 c4 18             	add    esp,0x18
c0004581:	5b                   	pop    ebx
c0004582:	c3                   	ret    

c0004583 <f_readdir>:
c0004583:	57                   	push   edi
c0004584:	56                   	push   esi
c0004585:	53                   	push   ebx
c0004586:	83 ec 20             	sub    esp,0x20
c0004589:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000458d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004591:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004595:	89 d8                	mov    eax,ebx
c0004597:	e8 ef db ff ff       	call   c000218b <validate>
c000459c:	85 c0                	test   eax,eax
c000459e:	75 6e                	jne    c000460e <f_readdir+0x8b>
c00045a0:	85 ff                	test   edi,edi
c00045a2:	75 0b                	jne    c00045af <f_readdir+0x2c>
c00045a4:	31 d2                	xor    edx,edx
c00045a6:	89 d8                	mov    eax,ebx
c00045a8:	e8 56 ec ff ff       	call   c0003203 <dir_sdi>
c00045ad:	eb 5f                	jmp    c000460e <f_readdir+0x8b>
c00045af:	83 ec 0c             	sub    esp,0xc
c00045b2:	68 00 02 00 00       	push   0x200
c00045b7:	e8 a0 14 00 00       	call   c0005a5c <ff_memalloc>
c00045bc:	83 c4 10             	add    esp,0x10
c00045bf:	89 c6                	mov    esi,eax
c00045c1:	b8 11 00 00 00       	mov    eax,0x11
c00045c6:	85 f6                	test   esi,esi
c00045c8:	74 44                	je     c000460e <f_readdir+0x8b>
c00045ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045ce:	31 d2                	xor    edx,edx
c00045d0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045d3:	89 d8                	mov    eax,ebx
c00045d5:	e8 1a f0 ff ff       	call   c00035f4 <dir_read>
c00045da:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045df:	75 19                	jne    c00045fa <f_readdir+0x77>
c00045e1:	89 fa                	mov    edx,edi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 e2 e8 ff ff       	call   c0002ecc <get_fileinfo>
c00045ea:	31 d2                	xor    edx,edx
c00045ec:	89 d8                	mov    eax,ebx
c00045ee:	e8 9b ee ff ff       	call   c000348e <dir_next>
c00045f3:	83 f8 04             	cmp    eax,0x4
c00045f6:	75 02                	jne    c00045fa <f_readdir+0x77>
c00045f8:	31 c0                	xor    eax,eax
c00045fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00045fe:	83 ec 0c             	sub    esp,0xc
c0004601:	56                   	push   esi
c0004602:	e8 6d 14 00 00       	call   c0005a74 <ff_memfree>
c0004607:	83 c4 10             	add    esp,0x10
c000460a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000460e:	83 c4 20             	add    esp,0x20
c0004611:	5b                   	pop    ebx
c0004612:	5e                   	pop    esi
c0004613:	5f                   	pop    edi
c0004614:	c3                   	ret    

c0004615 <f_stat>:
c0004615:	57                   	push   edi
c0004616:	31 c9                	xor    ecx,ecx
c0004618:	56                   	push   esi
c0004619:	53                   	push   ebx
c000461a:	83 ec 30             	sub    esp,0x30
c000461d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004621:	89 e2                	mov    edx,esp
c0004623:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004627:	e8 5c dd ff ff       	call   c0002388 <mount_volume>
c000462c:	89 c3                	mov    ebx,eax
c000462e:	85 c0                	test   eax,eax
c0004630:	75 59                	jne    c000468b <f_stat+0x76>
c0004632:	83 ec 0c             	sub    esp,0xc
c0004635:	bb 11 00 00 00       	mov    ebx,0x11
c000463a:	68 00 02 00 00       	push   0x200
c000463f:	e8 18 14 00 00       	call   c0005a5c <ff_memalloc>
c0004644:	83 c4 10             	add    esp,0x10
c0004647:	89 c6                	mov    esi,eax
c0004649:	85 c0                	test   eax,eax
c000464b:	74 3e                	je     c000468b <f_stat+0x76>
c000464d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004650:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004654:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004657:	89 e0                	mov    eax,esp
c0004659:	e8 34 f2 ff ff       	call   c0003892 <follow_path>
c000465e:	89 c3                	mov    ebx,eax
c0004660:	85 c0                	test   eax,eax
c0004662:	75 1b                	jne    c000467f <f_stat+0x6a>
c0004664:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004669:	78 0f                	js     c000467a <f_stat+0x65>
c000466b:	85 ff                	test   edi,edi
c000466d:	74 10                	je     c000467f <f_stat+0x6a>
c000466f:	89 fa                	mov    edx,edi
c0004671:	89 e0                	mov    eax,esp
c0004673:	e8 54 e8 ff ff       	call   c0002ecc <get_fileinfo>
c0004678:	eb 05                	jmp    c000467f <f_stat+0x6a>
c000467a:	bb 06 00 00 00       	mov    ebx,0x6
c000467f:	83 ec 0c             	sub    esp,0xc
c0004682:	56                   	push   esi
c0004683:	e8 ec 13 00 00       	call   c0005a74 <ff_memfree>
c0004688:	83 c4 10             	add    esp,0x10
c000468b:	83 c4 30             	add    esp,0x30
c000468e:	89 d8                	mov    eax,ebx
c0004690:	5b                   	pop    ebx
c0004691:	5e                   	pop    esi
c0004692:	5f                   	pop    edi
c0004693:	c3                   	ret    

c0004694 <f_getfree>:
c0004694:	55                   	push   ebp
c0004695:	31 c9                	xor    ecx,ecx
c0004697:	57                   	push   edi
c0004698:	56                   	push   esi
c0004699:	53                   	push   ebx
c000469a:	83 ec 2c             	sub    esp,0x2c
c000469d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046a1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046a5:	e8 de dc ff ff       	call   c0002388 <mount_volume>
c00046aa:	89 c7                	mov    edi,eax
c00046ac:	85 c0                	test   eax,eax
c00046ae:	0f 85 d8 00 00 00    	jne    c000478c <f_getfree+0xf8>
c00046b4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046b8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046bc:	89 30                	mov    DWORD PTR [eax],esi
c00046be:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046c1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046c4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046c7:	39 d0                	cmp    eax,edx
c00046c9:	77 0b                	ja     c00046d6 <f_getfree+0x42>
c00046cb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046cf:	89 01                	mov    DWORD PTR [ecx],eax
c00046d1:	e9 b6 00 00 00       	jmp    c000478c <f_getfree+0xf8>
c00046d6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046d9:	75 29                	jne    c0004704 <f_getfree+0x70>
c00046db:	bd 02 00 00 00       	mov    ebp,0x2
c00046e0:	31 db                	xor    ebx,ebx
c00046e2:	89 ea                	mov    edx,ebp
c00046e4:	89 f0                	mov    eax,esi
c00046e6:	e8 16 ea ff ff       	call   c0003101 <get_fat.isra.2>
c00046eb:	83 f8 ff             	cmp    eax,0xffffffff
c00046ee:	74 7b                	je     c000476b <f_getfree+0xd7>
c00046f0:	83 f8 01             	cmp    eax,0x1
c00046f3:	74 7d                	je     c0004772 <f_getfree+0xde>
c00046f5:	83 d3 00             	adc    ebx,0x0
c00046f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046fc:	45                   	inc    ebp
c00046fd:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004700:	77 e0                	ja     c00046e2 <f_getfree+0x4e>
c0004702:	eb 77                	jmp    c000477b <f_getfree+0xe7>
c0004704:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004707:	31 db                	xor    ebx,ebx
c0004709:	31 f6                	xor    esi,esi
c000470b:	85 f6                	test   esi,esi
c000470d:	75 18                	jne    c0004727 <f_getfree+0x93>
c000470f:	8d 42 01             	lea    eax,[edx+0x1]
c0004712:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004716:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000471a:	e8 16 db ff ff       	call   c0002235 <move_window>
c000471f:	85 c0                	test   eax,eax
c0004721:	75 56                	jne    c0004779 <f_getfree+0xe5>
c0004723:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004727:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000472b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000472f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004733:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004736:	75 11                	jne    c0004749 <f_getfree+0xb5>
c0004738:	e8 d2 d5 ff ff       	call   c0001d0f <ld_word>
c000473d:	66 83 f8 01          	cmp    ax,0x1
c0004741:	83 d3 00             	adc    ebx,0x0
c0004744:	83 c6 02             	add    esi,0x2
c0004747:	eb 13                	jmp    c000475c <f_getfree+0xc8>
c0004749:	e8 ce d5 ff ff       	call   c0001d1c <ld_dword>
c000474e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004753:	83 f8 01             	cmp    eax,0x1
c0004756:	83 d3 00             	adc    ebx,0x0
c0004759:	83 c6 04             	add    esi,0x4
c000475c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004762:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004766:	4d                   	dec    ebp
c0004767:	75 a2                	jne    c000470b <f_getfree+0x77>
c0004769:	eb 10                	jmp    c000477b <f_getfree+0xe7>
c000476b:	bf 01 00 00 00       	mov    edi,0x1
c0004770:	eb 09                	jmp    c000477b <f_getfree+0xe7>
c0004772:	bf 02 00 00 00       	mov    edi,0x2
c0004777:	eb 02                	jmp    c000477b <f_getfree+0xe7>
c0004779:	89 c7                	mov    edi,eax
c000477b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000477f:	89 18                	mov    DWORD PTR [eax],ebx
c0004781:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004785:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004788:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000478c:	83 c4 2c             	add    esp,0x2c
c000478f:	89 f8                	mov    eax,edi
c0004791:	5b                   	pop    ebx
c0004792:	5e                   	pop    esi
c0004793:	5f                   	pop    edi
c0004794:	5d                   	pop    ebp
c0004795:	c3                   	ret    

c0004796 <f_truncate>:
c0004796:	56                   	push   esi
c0004797:	53                   	push   ebx
c0004798:	83 ec 14             	sub    esp,0x14
c000479b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000479f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047a3:	89 d8                	mov    eax,ebx
c00047a5:	e8 e1 d9 ff ff       	call   c000218b <validate>
c00047aa:	89 c6                	mov    esi,eax
c00047ac:	85 c0                	test   eax,eax
c00047ae:	0f 85 be 00 00 00    	jne    c0004872 <f_truncate+0xdc>
c00047b4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047b8:	85 f6                	test   esi,esi
c00047ba:	0f 85 b2 00 00 00    	jne    c0004872 <f_truncate+0xdc>
c00047c0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047c4:	0f 84 a3 00 00 00    	je     c000486d <f_truncate+0xd7>
c00047ca:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047cd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047d0:	0f 83 9c 00 00 00    	jae    c0004872 <f_truncate+0xdc>
c00047d6:	85 c0                	test   eax,eax
c00047d8:	75 15                	jne    c00047ef <f_truncate+0x59>
c00047da:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047dd:	31 c9                	xor    ecx,ecx
c00047df:	89 d8                	mov    eax,ebx
c00047e1:	e8 1f ec ff ff       	call   c0003405 <remove_chain>
c00047e6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047ed:	eb 35                	jmp    c0004824 <f_truncate+0x8e>
c00047ef:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00047f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00047f4:	e8 08 e9 ff ff       	call   c0003101 <get_fat.isra.2>
c00047f9:	89 c2                	mov    edx,eax
c00047fb:	b8 01 00 00 00       	mov    eax,0x1
c0004800:	83 fa ff             	cmp    edx,0xffffffff
c0004803:	74 1f                	je     c0004824 <f_truncate+0x8e>
c0004805:	b8 02 00 00 00       	mov    eax,0x2
c000480a:	83 fa 01             	cmp    edx,0x1
c000480d:	74 15                	je     c0004824 <f_truncate+0x8e>
c000480f:	31 c0                	xor    eax,eax
c0004811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004815:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004818:	76 0a                	jbe    c0004824 <f_truncate+0x8e>
c000481a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000481d:	89 d8                	mov    eax,ebx
c000481f:	e8 e1 eb ff ff       	call   c0003405 <remove_chain>
c0004824:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004827:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000482a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000482d:	83 ca 40             	or     edx,0x40
c0004830:	85 c0                	test   eax,eax
c0004832:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004835:	75 2f                	jne    c0004866 <f_truncate+0xd0>
c0004837:	84 d2                	test   dl,dl
c0004839:	79 37                	jns    c0004872 <f_truncate+0xdc>
c000483b:	6a 01                	push   0x1
c000483d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004840:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004843:	50                   	push   eax
c0004844:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004848:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000484c:	50                   	push   eax
c000484d:	e8 88 d4 ff ff       	call   c0001cda <disk_write>
c0004852:	83 c4 10             	add    esp,0x10
c0004855:	85 c0                	test   eax,eax
c0004857:	75 08                	jne    c0004861 <f_truncate+0xcb>
c0004859:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000485d:	31 f6                	xor    esi,esi
c000485f:	eb 11                	jmp    c0004872 <f_truncate+0xdc>
c0004861:	b8 01 00 00 00       	mov    eax,0x1
c0004866:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004869:	89 c6                	mov    esi,eax
c000486b:	eb 05                	jmp    c0004872 <f_truncate+0xdc>
c000486d:	be 07 00 00 00       	mov    esi,0x7
c0004872:	89 f0                	mov    eax,esi
c0004874:	83 c4 14             	add    esp,0x14
c0004877:	5b                   	pop    ebx
c0004878:	5e                   	pop    esi
c0004879:	c3                   	ret    

c000487a <f_unlink>:
c000487a:	55                   	push   ebp
c000487b:	b9 02 00 00 00       	mov    ecx,0x2
c0004880:	57                   	push   edi
c0004881:	56                   	push   esi
c0004882:	53                   	push   ebx
c0004883:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004889:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000488d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004894:	e8 ef da ff ff       	call   c0002388 <mount_volume>
c0004899:	85 c0                	test   eax,eax
c000489b:	0f 85 f0 00 00 00    	jne    c0004991 <f_unlink+0x117>
c00048a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048a5:	83 ec 0c             	sub    esp,0xc
c00048a8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048ac:	68 00 02 00 00       	push   0x200
c00048b1:	e8 a6 11 00 00       	call   c0005a5c <ff_memalloc>
c00048b6:	83 c4 10             	add    esp,0x10
c00048b9:	89 c3                	mov    ebx,eax
c00048bb:	b8 11 00 00 00       	mov    eax,0x11
c00048c0:	85 db                	test   ebx,ebx
c00048c2:	0f 84 c9 00 00 00    	je     c0004991 <f_unlink+0x117>
c00048c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048cc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048d3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048d6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048da:	e8 b3 ef ff ff       	call   c0003892 <follow_path>
c00048df:	85 c0                	test   eax,eax
c00048e1:	0f 85 96 00 00 00    	jne    c000497d <f_unlink+0x103>
c00048e7:	b8 06 00 00 00       	mov    eax,0x6
c00048ec:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00048f1:	0f 88 86 00 00 00    	js     c000497d <f_unlink+0x103>
c00048f7:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c00048fc:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004902:	74 07                	je     c000490b <f_unlink+0x91>
c0004904:	b8 07 00 00 00       	mov    eax,0x7
c0004909:	eb 72                	jmp    c000497d <f_unlink+0x103>
c000490b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000490f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004913:	8a 07                	mov    al,BYTE PTR [edi]
c0004915:	e8 96 e7 ff ff       	call   c00030b0 <ld_clust.isra.0>
c000491a:	83 e5 10             	and    ebp,0x10
c000491d:	89 c6                	mov    esi,eax
c000491f:	75 0f                	jne    c0004930 <f_unlink+0xb6>
c0004921:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004925:	e8 e7 ed ff ff       	call   c0003711 <dir_remove>
c000492a:	85 c0                	test   eax,eax
c000492c:	74 2f                	je     c000495d <f_unlink+0xe3>
c000492e:	eb 4d                	jmp    c000497d <f_unlink+0x103>
c0004930:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004934:	31 d2                	xor    edx,edx
c0004936:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000493a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000493e:	e8 c0 e8 ff ff       	call   c0003203 <dir_sdi>
c0004943:	85 c0                	test   eax,eax
c0004945:	75 36                	jne    c000497d <f_unlink+0x103>
c0004947:	31 d2                	xor    edx,edx
c0004949:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494d:	e8 a2 ec ff ff       	call   c00035f4 <dir_read>
c0004952:	85 c0                	test   eax,eax
c0004954:	74 ae                	je     c0004904 <f_unlink+0x8a>
c0004956:	83 f8 04             	cmp    eax,0x4
c0004959:	75 22                	jne    c000497d <f_unlink+0x103>
c000495b:	eb c4                	jmp    c0004921 <f_unlink+0xa7>
c000495d:	85 f6                	test   esi,esi
c000495f:	75 0b                	jne    c000496c <f_unlink+0xf2>
c0004961:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004965:	e8 0b e3 ff ff       	call   c0002c75 <sync_fs>
c000496a:	eb 11                	jmp    c000497d <f_unlink+0x103>
c000496c:	31 c9                	xor    ecx,ecx
c000496e:	89 f2                	mov    edx,esi
c0004970:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004974:	e8 8c ea ff ff       	call   c0003405 <remove_chain>
c0004979:	85 c0                	test   eax,eax
c000497b:	74 e4                	je     c0004961 <f_unlink+0xe7>
c000497d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004981:	83 ec 0c             	sub    esp,0xc
c0004984:	53                   	push   ebx
c0004985:	e8 ea 10 00 00       	call   c0005a74 <ff_memfree>
c000498a:	83 c4 10             	add    esp,0x10
c000498d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004991:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004997:	5b                   	pop    ebx
c0004998:	5e                   	pop    esi
c0004999:	5f                   	pop    edi
c000499a:	5d                   	pop    ebp
c000499b:	c3                   	ret    

c000499c <f_mkdir>:
c000499c:	57                   	push   edi
c000499d:	b9 02 00 00 00       	mov    ecx,0x2
c00049a2:	56                   	push   esi
c00049a3:	53                   	push   ebx
c00049a4:	83 ec 50             	sub    esp,0x50
c00049a7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049ab:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049af:	e8 d4 d9 ff ff       	call   c0002388 <mount_volume>
c00049b4:	89 c3                	mov    ebx,eax
c00049b6:	85 c0                	test   eax,eax
c00049b8:	0f 85 70 01 00 00    	jne    c0004b2e <f_mkdir+0x192>
c00049be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049c2:	bb 11 00 00 00       	mov    ebx,0x11
c00049c7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049cb:	83 ec 0c             	sub    esp,0xc
c00049ce:	68 00 02 00 00       	push   0x200
c00049d3:	e8 84 10 00 00       	call   c0005a5c <ff_memalloc>
c00049d8:	83 c4 10             	add    esp,0x10
c00049db:	89 c7                	mov    edi,eax
c00049dd:	85 c0                	test   eax,eax
c00049df:	0f 84 49 01 00 00    	je     c0004b2e <f_mkdir+0x192>
c00049e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049e9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049ed:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00049f0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00049f4:	e8 99 ee ff ff       	call   c0003892 <follow_path>
c00049f9:	89 c3                	mov    ebx,eax
c00049fb:	85 c0                	test   eax,eax
c00049fd:	74 3e                	je     c0004a3d <f_mkdir+0xa1>
c00049ff:	83 f8 04             	cmp    eax,0x4
c0004a02:	75 3e                	jne    c0004a42 <f_mkdir+0xa6>
c0004a04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a08:	31 d2                	xor    edx,edx
c0004a0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a0e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a12:	e8 b4 e8 ff ff       	call   c00032cb <create_chain>
c0004a17:	89 c6                	mov    esi,eax
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	74 0c                	je     c0004a29 <f_mkdir+0x8d>
c0004a1d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a22:	83 f8 01             	cmp    eax,0x1
c0004a25:	74 07                	je     c0004a2e <f_mkdir+0x92>
c0004a27:	eb 2a                	jmp    c0004a53 <f_mkdir+0xb7>
c0004a29:	bb 07 00 00 00       	mov    ebx,0x7
c0004a2e:	31 c9                	xor    ecx,ecx
c0004a30:	89 f2                	mov    edx,esi
c0004a32:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a36:	e8 ca e9 ff ff       	call   c0003405 <remove_chain>
c0004a3b:	eb 05                	jmp    c0004a42 <f_mkdir+0xa6>
c0004a3d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a42:	83 ec 0c             	sub    esp,0xc
c0004a45:	57                   	push   edi
c0004a46:	e8 29 10 00 00       	call   c0005a74 <ff_memfree>
c0004a4b:	83 c4 10             	add    esp,0x10
c0004a4e:	e9 db 00 00 00       	jmp    c0004b2e <f_mkdir+0x192>
c0004a53:	bb 01 00 00 00       	mov    ebx,0x1
c0004a58:	83 f8 ff             	cmp    eax,0xffffffff
c0004a5b:	74 d1                	je     c0004a2e <f_mkdir+0x92>
c0004a5d:	89 f2                	mov    edx,esi
c0004a5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a63:	e8 73 dd ff ff       	call   c00027db <dir_clear>
c0004a68:	89 c3                	mov    ebx,eax
c0004a6a:	85 c0                	test   eax,eax
c0004a6c:	75 c0                	jne    c0004a2e <f_mkdir+0x92>
c0004a6e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a77:	ba 20 00 00 00       	mov    edx,0x20
c0004a7c:	83 c0 34             	add    eax,0x34
c0004a7f:	e8 cc d2 ff ff       	call   c0001d50 <mem_set>
c0004a84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a88:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a8d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004a91:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004a95:	83 c0 4a             	add    eax,0x4a
c0004a98:	e8 9b d2 ff ff       	call   c0001d38 <st_dword>
c0004a9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004aa1:	89 f1                	mov    ecx,esi
c0004aa3:	8d 50 34             	lea    edx,[eax+0x34]
c0004aa6:	e8 2e e6 ff ff       	call   c00030d9 <st_clust.isra.1>
c0004aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004aaf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ab4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab7:	83 c0 54             	add    eax,0x54
c0004aba:	e8 7c d2 ff ff       	call   c0001d3b <mem_cpy>
c0004abf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ac3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ac7:	8d 50 54             	lea    edx,[eax+0x54]
c0004aca:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ace:	e8 06 e6 ff ff       	call   c00030d9 <st_clust.isra.1>
c0004ad3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004adb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004adf:	e8 42 ee ff ff       	call   c0003926 <dir_register>
c0004ae4:	89 c3                	mov    ebx,eax
c0004ae6:	85 c0                	test   eax,eax
c0004ae8:	0f 85 40 ff ff ff    	jne    c0004a2e <f_mkdir+0x92>
c0004aee:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004af2:	ba 00 00 21 50       	mov    edx,0x50210000
c0004af7:	83 c0 16             	add    eax,0x16
c0004afa:	e8 39 d2 ff ff       	call   c0001d38 <st_dword>
c0004aff:	89 f1                	mov    ecx,esi
c0004b01:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b09:	e8 cb e5 ff ff       	call   c00030d9 <st_clust.isra.1>
c0004b0e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b12:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b1a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b22:	e8 4e e1 ff ff       	call   c0002c75 <sync_fs>
c0004b27:	89 c3                	mov    ebx,eax
c0004b29:	e9 14 ff ff ff       	jmp    c0004a42 <f_mkdir+0xa6>
c0004b2e:	83 c4 50             	add    esp,0x50
c0004b31:	89 d8                	mov    eax,ebx
c0004b33:	5b                   	pop    ebx
c0004b34:	5e                   	pop    esi
c0004b35:	5f                   	pop    edi
c0004b36:	c3                   	ret    

c0004b37 <f_rename>:
c0004b37:	57                   	push   edi
c0004b38:	56                   	push   esi
c0004b39:	53                   	push   ebx
c0004b3a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b40:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b47:	e8 f2 d5 ff ff       	call   c000213e <get_ldnumber>
c0004b4c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b51:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b55:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b5c:	e8 27 d8 ff ff       	call   c0002388 <mount_volume>
c0004b61:	85 c0                	test   eax,eax
c0004b63:	0f 85 7a 01 00 00    	jne    c0004ce3 <f_rename+0x1ac>
c0004b69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b6d:	83 ec 0c             	sub    esp,0xc
c0004b70:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b74:	68 00 02 00 00       	push   0x200
c0004b79:	e8 de 0e 00 00       	call   c0005a5c <ff_memalloc>
c0004b7e:	83 c4 10             	add    esp,0x10
c0004b81:	89 c6                	mov    esi,eax
c0004b83:	b8 11 00 00 00       	mov    eax,0x11
c0004b88:	85 f6                	test   esi,esi
c0004b8a:	0f 84 53 01 00 00    	je     c0004ce3 <f_rename+0x1ac>
c0004b90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b94:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004b9e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ba2:	e8 eb ec ff ff       	call   c0003892 <follow_path>
c0004ba7:	85 c0                	test   eax,eax
c0004ba9:	0f 85 20 01 00 00    	jne    c0004ccf <f_rename+0x198>
c0004baf:	b8 06 00 00 00       	mov    eax,0x6
c0004bb4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bb9:	0f 85 10 01 00 00    	jne    c0004ccf <f_rename+0x198>
c0004bbf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bc4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bc8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bcc:	e8 6a d1 ff ff       	call   c0001d3b <mem_cpy>
c0004bd1:	b9 30 00 00 00       	mov    ecx,0x30
c0004bd6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bda:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bde:	e8 58 d1 ff ff       	call   c0001d3b <mem_cpy>
c0004be3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 9f ec ff ff       	call   c0003892 <follow_path>
c0004bf3:	85 c0                	test   eax,eax
c0004bf5:	75 20                	jne    c0004c17 <f_rename+0xe0>
c0004bf7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004bfb:	b8 08 00 00 00       	mov    eax,0x8
c0004c00:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c04:	0f 85 c5 00 00 00    	jne    c0004ccf <f_rename+0x198>
c0004c0a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c0e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c15:	eb 03                	jmp    c0004c1a <f_rename+0xe3>
c0004c17:	83 f8 04             	cmp    eax,0x4
c0004c1a:	0f 85 af 00 00 00    	jne    c0004ccf <f_rename+0x198>
c0004c20:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c24:	e8 fd ec ff ff       	call   c0003926 <dir_register>
c0004c29:	85 c0                	test   eax,eax
c0004c2b:	0f 85 9e 00 00 00    	jne    c0004ccf <f_rename+0x198>
c0004c31:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c38:	b9 13 00 00 00       	mov    ecx,0x13
c0004c3d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c40:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c44:	e8 f2 d0 ff ff       	call   c0001d3b <mem_cpy>
c0004c49:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c4d:	a8 10                	test   al,0x10
c0004c4f:	75 03                	jne    c0004c54 <f_rename+0x11d>
c0004c51:	83 c8 20             	or     eax,0x20
c0004c54:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c63:	74 54                	je     c0004cb9 <f_rename+0x182>
c0004c65:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c69:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c6d:	74 4a                	je     c0004cb9 <f_rename+0x182>
c0004c6f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c73:	89 da                	mov    edx,ebx
c0004c75:	8a 07                	mov    al,BYTE PTR [edi]
c0004c77:	e8 34 e4 ff ff       	call   c00030b0 <ld_clust.isra.0>
c0004c7c:	89 c2                	mov    edx,eax
c0004c7e:	89 f8                	mov    eax,edi
c0004c80:	e8 d0 d2 ff ff       	call   c0001f55 <clst2sect>
c0004c85:	89 c2                	mov    edx,eax
c0004c87:	b8 02 00 00 00       	mov    eax,0x2
c0004c8c:	85 d2                	test   edx,edx
c0004c8e:	74 3f                	je     c0004ccf <f_rename+0x198>
c0004c90:	89 f8                	mov    eax,edi
c0004c92:	e8 9e d5 ff ff       	call   c0002235 <move_window>
c0004c97:	85 c0                	test   eax,eax
c0004c99:	75 34                	jne    c0004ccf <f_rename+0x198>
c0004c9b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c9f:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004ca3:	75 14                	jne    c0004cb9 <f_rename+0x182>
c0004ca5:	8d 50 54             	lea    edx,[eax+0x54]
c0004ca8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cac:	e8 28 e4 ff ff       	call   c00030d9 <st_clust.isra.1>
c0004cb1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cb5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cb9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004cbd:	e8 4f ea ff ff       	call   c0003711 <dir_remove>
c0004cc2:	85 c0                	test   eax,eax
c0004cc4:	75 09                	jne    c0004ccf <f_rename+0x198>
c0004cc6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cca:	e8 a6 df ff ff       	call   c0002c75 <sync_fs>
c0004ccf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cd3:	83 ec 0c             	sub    esp,0xc
c0004cd6:	56                   	push   esi
c0004cd7:	e8 98 0d 00 00       	call   c0005a74 <ff_memfree>
c0004cdc:	83 c4 10             	add    esp,0x10
c0004cdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ce3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004ce9:	5b                   	pop    ebx
c0004cea:	5e                   	pop    esi
c0004ceb:	5f                   	pop    edi
c0004cec:	c3                   	ret    

c0004ced <f_chmod>:
c0004ced:	57                   	push   edi
c0004cee:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf3:	56                   	push   esi
c0004cf4:	53                   	push   ebx
c0004cf5:	83 ec 50             	sub    esp,0x50
c0004cf8:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004cfc:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d00:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d04:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d08:	e8 7b d6 ff ff       	call   c0002388 <mount_volume>
c0004d0d:	85 c0                	test   eax,eax
c0004d0f:	75 7e                	jne    c0004d8f <f_chmod+0xa2>
c0004d11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d15:	83 ec 0c             	sub    esp,0xc
c0004d18:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d1c:	68 00 02 00 00       	push   0x200
c0004d21:	e8 36 0d 00 00       	call   c0005a5c <ff_memalloc>
c0004d26:	83 c4 10             	add    esp,0x10
c0004d29:	89 c6                	mov    esi,eax
c0004d2b:	b8 11 00 00 00       	mov    eax,0x11
c0004d30:	85 f6                	test   esi,esi
c0004d32:	74 5b                	je     c0004d8f <f_chmod+0xa2>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d3c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d3f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d43:	e8 4a eb ff ff       	call   c0003892 <follow_path>
c0004d48:	85 c0                	test   eax,eax
c0004d4a:	75 2f                	jne    c0004d7b <f_chmod+0x8e>
c0004d4c:	b8 06 00 00 00       	mov    eax,0x6
c0004d51:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d56:	75 23                	jne    c0004d7b <f_chmod+0x8e>
c0004d58:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d5c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d5f:	21 fb                	and    ebx,edi
c0004d61:	83 e3 27             	and    ebx,0x27
c0004d64:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d67:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d6e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d76:	e8 fa de ff ff       	call   c0002c75 <sync_fs>
c0004d7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d7f:	83 ec 0c             	sub    esp,0xc
c0004d82:	56                   	push   esi
c0004d83:	e8 ec 0c 00 00       	call   c0005a74 <ff_memfree>
c0004d88:	83 c4 10             	add    esp,0x10
c0004d8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d8f:	83 c4 50             	add    esp,0x50
c0004d92:	5b                   	pop    ebx
c0004d93:	5e                   	pop    esi
c0004d94:	5f                   	pop    edi
c0004d95:	c3                   	ret    

c0004d96 <f_utime>:
c0004d96:	56                   	push   esi
c0004d97:	b9 02 00 00 00       	mov    ecx,0x2
c0004d9c:	53                   	push   ebx
c0004d9d:	83 ec 54             	sub    esp,0x54
c0004da0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004da4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004da8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dac:	e8 d7 d5 ff ff       	call   c0002388 <mount_volume>
c0004db1:	85 c0                	test   eax,eax
c0004db3:	0f 85 85 00 00 00    	jne    c0004e3e <f_utime+0xa8>
c0004db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dbd:	83 ec 0c             	sub    esp,0xc
c0004dc0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dc4:	68 00 02 00 00       	push   0x200
c0004dc9:	e8 8e 0c 00 00       	call   c0005a5c <ff_memalloc>
c0004dce:	83 c4 10             	add    esp,0x10
c0004dd1:	89 c3                	mov    ebx,eax
c0004dd3:	b8 11 00 00 00       	mov    eax,0x11
c0004dd8:	85 db                	test   ebx,ebx
c0004dda:	74 62                	je     c0004e3e <f_utime+0xa8>
c0004ddc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004de0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004de4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004de7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004deb:	e8 a2 ea ff ff       	call   c0003892 <follow_path>
c0004df0:	85 c0                	test   eax,eax
c0004df2:	75 36                	jne    c0004e2a <f_utime+0x94>
c0004df4:	b8 06 00 00 00       	mov    eax,0x6
c0004df9:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004dfe:	75 2a                	jne    c0004e2a <f_utime+0x94>
c0004e00:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e04:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e08:	c1 e2 10             	shl    edx,0x10
c0004e0b:	09 c2                	or     edx,eax
c0004e0d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e11:	83 c0 16             	add    eax,0x16
c0004e14:	e8 1f cf ff ff       	call   c0001d38 <st_dword>
c0004e19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e1d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e25:	e8 4b de ff ff       	call   c0002c75 <sync_fs>
c0004e2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e2e:	83 ec 0c             	sub    esp,0xc
c0004e31:	53                   	push   ebx
c0004e32:	e8 3d 0c 00 00       	call   c0005a74 <ff_memfree>
c0004e37:	83 c4 10             	add    esp,0x10
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	83 c4 54             	add    esp,0x54
c0004e41:	5b                   	pop    ebx
c0004e42:	5e                   	pop    esi
c0004e43:	c3                   	ret    

c0004e44 <f_getlabel>:
c0004e44:	55                   	push   ebp
c0004e45:	31 c9                	xor    ecx,ecx
c0004e47:	57                   	push   edi
c0004e48:	56                   	push   esi
c0004e49:	53                   	push   ebx
c0004e4a:	83 ec 5c             	sub    esp,0x5c
c0004e4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e51:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e55:	e8 2e d5 ff ff       	call   c0002388 <mount_volume>
c0004e5a:	89 c6                	mov    esi,eax
c0004e5c:	85 c0                	test   eax,eax
c0004e5e:	0f 85 27 01 00 00    	jne    c0004f8b <f_getlabel+0x147>
c0004e64:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e69:	0f 84 d1 00 00 00    	je     c0004f40 <f_getlabel+0xfc>
c0004e6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e73:	31 d2                	xor    edx,edx
c0004e75:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e79:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e81:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e85:	e8 79 e3 ff ff       	call   c0003203 <dir_sdi>
c0004e8a:	85 c0                	test   eax,eax
c0004e8c:	0f 85 a2 00 00 00    	jne    c0004f34 <f_getlabel+0xf0>
c0004e92:	ba 01 00 00 00       	mov    edx,0x1
c0004e97:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e9b:	e8 54 e7 ff ff       	call   c00035f4 <dir_read>
c0004ea0:	85 c0                	test   eax,eax
c0004ea2:	0f 85 8c 00 00 00    	jne    c0004f34 <f_getlabel+0xf0>
c0004ea8:	31 db                	xor    ebx,ebx
c0004eaa:	31 c9                	xor    ecx,ecx
c0004eac:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004eb0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004eb3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004eb8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ebd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ec1:	e8 ca ce ff ff       	call   c0001d90 <dbc_1st>
c0004ec6:	85 c0                	test   eax,eax
c0004ec8:	74 16                	je     c0004ee0 <f_getlabel+0x9c>
c0004eca:	83 ff 0b             	cmp    edi,0xb
c0004ecd:	74 11                	je     c0004ee0 <f_getlabel+0x9c>
c0004ecf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ed4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ed8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004edb:	c1 e0 08             	shl    eax,0x8
c0004ede:	09 c2                	or     edx,eax
c0004ee0:	0f b7 d2             	movzx  edx,dx
c0004ee3:	50                   	push   eax
c0004ee4:	50                   	push   eax
c0004ee5:	68 b5 01 00 00       	push   0x1b5
c0004eea:	52                   	push   edx
c0004eeb:	e8 3c 0c 00 00       	call   c0005b2c <ff_oem2uni>
c0004ef0:	83 c4 10             	add    esp,0x10
c0004ef3:	66 85 c0             	test   ax,ax
c0004ef6:	74 25                	je     c0004f1d <f_getlabel+0xd9>
c0004ef8:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004efc:	0f b7 c0             	movzx  eax,ax
c0004eff:	01 da                	add    edx,ebx
c0004f01:	b9 04 00 00 00       	mov    ecx,0x4
c0004f06:	e8 51 cf ff ff       	call   c0001e5c <put_utf>
c0004f0b:	84 c0                	test   al,al
c0004f0d:	74 0e                	je     c0004f1d <f_getlabel+0xd9>
c0004f0f:	0f b6 c0             	movzx  eax,al
c0004f12:	01 c3                	add    ebx,eax
c0004f14:	83 ff 0b             	cmp    edi,0xb
c0004f17:	74 06                	je     c0004f1f <f_getlabel+0xdb>
c0004f19:	89 f9                	mov    ecx,edi
c0004f1b:	eb 8f                	jmp    c0004eac <f_getlabel+0x68>
c0004f1d:	31 db                	xor    ebx,ebx
c0004f1f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f23:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f26:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f2a:	74 14                	je     c0004f40 <f_getlabel+0xfc>
c0004f2c:	4b                   	dec    ebx
c0004f2d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f30:	74 f1                	je     c0004f23 <f_getlabel+0xdf>
c0004f32:	eb 0c                	jmp    c0004f40 <f_getlabel+0xfc>
c0004f34:	83 f8 04             	cmp    eax,0x4
c0004f37:	75 50                	jne    c0004f89 <f_getlabel+0x145>
c0004f39:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f3d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f40:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f45:	74 44                	je     c0004f8b <f_getlabel+0x147>
c0004f47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f4b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f4e:	e8 e2 d2 ff ff       	call   c0002235 <move_window>
c0004f53:	89 c6                	mov    esi,eax
c0004f55:	85 c0                	test   eax,eax
c0004f57:	75 32                	jne    c0004f8b <f_getlabel+0x147>
c0004f59:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f5d:	b8 43 00 00 00       	mov    eax,0x43
c0004f62:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f64:	80 f9 03             	cmp    cl,0x3
c0004f67:	74 0f                	je     c0004f78 <f_getlabel+0x134>
c0004f69:	31 c0                	xor    eax,eax
c0004f6b:	80 f9 04             	cmp    cl,0x4
c0004f6e:	0f 94 c0             	sete   al
c0004f71:	48                   	dec    eax
c0004f72:	83 e0 c3             	and    eax,0xffffffc3
c0004f75:	83 c0 64             	add    eax,0x64
c0004f78:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f7c:	e8 9b cd ff ff       	call   c0001d1c <ld_dword>
c0004f81:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f85:	89 07                	mov    DWORD PTR [edi],eax
c0004f87:	eb 02                	jmp    c0004f8b <f_getlabel+0x147>
c0004f89:	89 c6                	mov    esi,eax
c0004f8b:	83 c4 5c             	add    esp,0x5c
c0004f8e:	89 f0                	mov    eax,esi
c0004f90:	5b                   	pop    ebx
c0004f91:	5e                   	pop    esi
c0004f92:	5f                   	pop    edi
c0004f93:	5d                   	pop    ebp
c0004f94:	c3                   	ret    

c0004f95 <f_setlabel>:
c0004f95:	56                   	push   esi
c0004f96:	b9 02 00 00 00       	mov    ecx,0x2
c0004f9b:	53                   	push   ebx
c0004f9c:	83 ec 54             	sub    esp,0x54
c0004f9f:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fa3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fa7:	e8 dc d3 ff ff       	call   c0002388 <mount_volume>
c0004fac:	89 c6                	mov    esi,eax
c0004fae:	85 c0                	test   eax,eax
c0004fb0:	0f 85 67 01 00 00    	jne    c000511d <f_setlabel+0x188>
c0004fb6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fbb:	ba 20 00 00 00       	mov    edx,0x20
c0004fc0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fc4:	31 db                	xor    ebx,ebx
c0004fc6:	e8 85 cd ff ff       	call   c0001d50 <mem_set>
c0004fcb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fcf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fd2:	76 5b                	jbe    c000502f <f_setlabel+0x9a>
c0004fd4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fd8:	e8 b9 cd ff ff       	call   c0001d96 <tchar2uni>
c0004fdd:	3d ff ff 00 00       	cmp    eax,0xffff
c0004fe2:	76 0a                	jbe    c0004fee <f_setlabel+0x59>
c0004fe4:	be 06 00 00 00       	mov    esi,0x6
c0004fe9:	e9 2f 01 00 00       	jmp    c000511d <f_setlabel+0x188>
c0004fee:	83 ec 0c             	sub    esp,0xc
c0004ff1:	50                   	push   eax
c0004ff2:	e8 ad 0b 00 00       	call   c0005ba4 <ff_wtoupper>
c0004ff7:	5a                   	pop    edx
c0004ff8:	59                   	pop    ecx
c0004ff9:	68 b5 01 00 00       	push   0x1b5
c0004ffe:	50                   	push   eax
c0004fff:	e8 88 0a 00 00       	call   c0005a8c <ff_uni2oem>
c0005004:	83 c4 10             	add    esp,0x10
c0005007:	89 c6                	mov    esi,eax
c0005009:	66 85 c0             	test   ax,ax
c000500c:	74 d6                	je     c0004fe4 <f_setlabel+0x4f>
c000500e:	0f b7 d0             	movzx  edx,ax
c0005011:	b8 f0 eb 01 c0       	mov    eax,0xc001ebf0
c0005016:	e8 63 cd ff ff       	call   c0001d7e <chk_chr>
c000501b:	85 c0                	test   eax,eax
c000501d:	75 c5                	jne    c0004fe4 <f_setlabel+0x4f>
c000501f:	66 81 fe ff 00       	cmp    si,0xff
c0005024:	0f 87 c9 00 00 00    	ja     c00050f3 <f_setlabel+0x15e>
c000502a:	e9 e4 00 00 00       	jmp    c0005113 <f_setlabel+0x17e>
c000502f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005034:	74 ae                	je     c0004fe4 <f_setlabel+0x4f>
c0005036:	85 db                	test   ebx,ebx
c0005038:	74 0e                	je     c0005048 <f_setlabel+0xb3>
c000503a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000503d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005042:	75 04                	jne    c0005048 <f_setlabel+0xb3>
c0005044:	89 c3                	mov    ebx,eax
c0005046:	eb ee                	jmp    c0005036 <f_setlabel+0xa1>
c0005048:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000504c:	31 d2                	xor    edx,edx
c000504e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005052:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000505a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000505e:	e8 a0 e1 ff ff       	call   c0003203 <dir_sdi>
c0005063:	89 c6                	mov    esi,eax
c0005065:	85 c0                	test   eax,eax
c0005067:	0f 85 b0 00 00 00    	jne    c000511d <f_setlabel+0x188>
c000506d:	ba 01 00 00 00       	mov    edx,0x1
c0005072:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005076:	e8 79 e5 ff ff       	call   c00035f4 <dir_read>
c000507b:	85 c0                	test   eax,eax
c000507d:	75 18                	jne    c0005097 <f_setlabel+0x102>
c000507f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005083:	85 db                	test   ebx,ebx
c0005085:	74 0b                	je     c0005092 <f_setlabel+0xfd>
c0005087:	b9 0b 00 00 00       	mov    ecx,0xb
c000508c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005090:	eb 47                	jmp    c00050d9 <f_setlabel+0x144>
c0005092:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005095:	eb 47                	jmp    c00050de <f_setlabel+0x149>
c0005097:	83 f8 04             	cmp    eax,0x4
c000509a:	75 53                	jne    c00050ef <f_setlabel+0x15a>
c000509c:	85 db                	test   ebx,ebx
c000509e:	74 7d                	je     c000511d <f_setlabel+0x188>
c00050a0:	ba 01 00 00 00       	mov    edx,0x1
c00050a5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050a9:	e8 e5 e4 ff ff       	call   c0003593 <dir_alloc>
c00050ae:	89 c6                	mov    esi,eax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	75 69                	jne    c000511d <f_setlabel+0x188>
c00050b4:	b9 20 00 00 00       	mov    ecx,0x20
c00050b9:	31 d2                	xor    edx,edx
c00050bb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050bf:	e8 8c cc ff ff       	call   c0001d50 <mem_set>
c00050c4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050c8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050cd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050d1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050d5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d9:	e8 5d cc ff ff       	call   c0001d3b <mem_cpy>
c00050de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050e2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050ea:	e8 86 db ff ff       	call   c0002c75 <sync_fs>
c00050ef:	89 c6                	mov    esi,eax
c00050f1:	eb 2a                	jmp    c000511d <f_setlabel+0x188>
c00050f3:	83 fb 09             	cmp    ebx,0x9
c00050f6:	0f 87 e8 fe ff ff    	ja     c0004fe4 <f_setlabel+0x4f>
c00050fc:	89 f0                	mov    eax,esi
c00050fe:	66 c1 e8 08          	shr    ax,0x8
c0005102:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005106:	43                   	inc    ebx
c0005107:	89 f0                	mov    eax,esi
c0005109:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000510d:	43                   	inc    ebx
c000510e:	e9 b8 fe ff ff       	jmp    c0004fcb <f_setlabel+0x36>
c0005113:	83 fb 0a             	cmp    ebx,0xa
c0005116:	76 ef                	jbe    c0005107 <f_setlabel+0x172>
c0005118:	e9 c7 fe ff ff       	jmp    c0004fe4 <f_setlabel+0x4f>
c000511d:	89 f0                	mov    eax,esi
c000511f:	83 c4 54             	add    esp,0x54
c0005122:	5b                   	pop    ebx
c0005123:	5e                   	pop    esi
c0005124:	c3                   	ret    

c0005125 <f_expand>:
c0005125:	55                   	push   ebp
c0005126:	57                   	push   edi
c0005127:	56                   	push   esi
c0005128:	53                   	push   ebx
c0005129:	83 ec 2c             	sub    esp,0x2c
c000512c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005130:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005134:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005138:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000513c:	89 d8                	mov    eax,ebx
c000513e:	e8 48 d0 ff ff       	call   c000218b <validate>
c0005143:	89 c6                	mov    esi,eax
c0005145:	85 c0                	test   eax,eax
c0005147:	0f 85 2e 01 00 00    	jne    c000527b <f_expand+0x156>
c000514d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005151:	85 f6                	test   esi,esi
c0005153:	0f 85 22 01 00 00    	jne    c000527b <f_expand+0x156>
c0005159:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000515e:	75 0a                	jne    c000516a <f_expand+0x45>
c0005160:	be 07 00 00 00       	mov    esi,0x7
c0005165:	e9 11 01 00 00       	jmp    c000527b <f_expand+0x156>
c000516a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000516e:	75 f0                	jne    c0005160 <f_expand+0x3b>
c0005170:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005174:	74 ea                	je     c0005160 <f_expand+0x3b>
c0005176:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000517a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000517e:	c1 e1 09             	shl    ecx,0x9
c0005181:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005184:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005188:	0f 95 c0             	setne  al
c000518b:	31 d2                	xor    edx,edx
c000518d:	0f b6 c0             	movzx  eax,al
c0005190:	89 c7                	mov    edi,eax
c0005192:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005196:	f7 f1                	div    ecx
c0005198:	01 f8                	add    eax,edi
c000519a:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c000519d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051a1:	83 ff 01             	cmp    edi,0x1
c00051a4:	76 05                	jbe    c00051ab <f_expand+0x86>
c00051a6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051a9:	77 05                	ja     c00051b0 <f_expand+0x8b>
c00051ab:	bf 02 00 00 00       	mov    edi,0x2
c00051b0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051b3:	89 fd                	mov    ebp,edi
c00051b5:	31 c9                	xor    ecx,ecx
c00051b7:	89 ea                	mov    edx,ebp
c00051b9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051bf:	45                   	inc    ebp
c00051c0:	e8 3c df ff ff       	call   c0003101 <get_fat.isra.2>
c00051c5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051c9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051cd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051d0:	77 05                	ja     c00051d7 <f_expand+0xb2>
c00051d2:	bd 02 00 00 00       	mov    ebp,0x2
c00051d7:	83 f8 01             	cmp    eax,0x1
c00051da:	74 20                	je     c00051fc <f_expand+0xd7>
c00051dc:	83 f8 ff             	cmp    eax,0xffffffff
c00051df:	74 22                	je     c0005203 <f_expand+0xde>
c00051e1:	85 c0                	test   eax,eax
c00051e3:	75 09                	jne    c00051ee <f_expand+0xc9>
c00051e5:	41                   	inc    ecx
c00051e6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051ea:	75 07                	jne    c00051f3 <f_expand+0xce>
c00051ec:	eb 1c                	jmp    c000520a <f_expand+0xe5>
c00051ee:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00051f1:	31 c9                	xor    ecx,ecx
c00051f3:	39 fd                	cmp    ebp,edi
c00051f5:	75 c0                	jne    c00051b7 <f_expand+0x92>
c00051f7:	e9 64 ff ff ff       	jmp    c0005160 <f_expand+0x3b>
c00051fc:	be 02 00 00 00       	mov    esi,0x2
c0005201:	eb 78                	jmp    c000527b <f_expand+0x156>
c0005203:	be 01 00 00 00       	mov    esi,0x1
c0005208:	eb 71                	jmp    c000527b <f_expand+0x156>
c000520a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000520f:	74 2b                	je     c000523c <f_expand+0x117>
c0005211:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005214:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005218:	85 ed                	test   ebp,ebp
c000521a:	74 24                	je     c0005240 <f_expand+0x11b>
c000521c:	83 c9 ff             	or     ecx,0xffffffff
c000521f:	83 fd 01             	cmp    ebp,0x1
c0005222:	74 03                	je     c0005227 <f_expand+0x102>
c0005224:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005227:	89 fa                	mov    edx,edi
c0005229:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000522d:	e8 59 d4 ff ff       	call   c000268b <put_fat>
c0005232:	85 c0                	test   eax,eax
c0005234:	75 43                	jne    c0005279 <f_expand+0x154>
c0005236:	89 f8                	mov    eax,edi
c0005238:	4d                   	dec    ebp
c0005239:	47                   	inc    edi
c000523a:	eb dc                	jmp    c0005218 <f_expand+0xf3>
c000523c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000523f:	48                   	dec    eax
c0005240:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005244:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005249:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000524c:	74 2d                	je     c000527b <f_expand+0x156>
c000524e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005252:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005255:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005258:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000525c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000525f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005262:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005265:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005268:	39 c8                	cmp    eax,ecx
c000526a:	77 0f                	ja     c000527b <f_expand+0x156>
c000526c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005270:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005274:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005277:	eb 02                	jmp    c000527b <f_expand+0x156>
c0005279:	89 c6                	mov    esi,eax
c000527b:	83 c4 2c             	add    esp,0x2c
c000527e:	89 f0                	mov    eax,esi
c0005280:	5b                   	pop    ebx
c0005281:	5e                   	pop    esi
c0005282:	5f                   	pop    edi
c0005283:	5d                   	pop    ebp
c0005284:	c3                   	ret    

c0005285 <f_mkfs>:
c0005285:	55                   	push   ebp
c0005286:	57                   	push   edi
c0005287:	bf 0b 00 00 00       	mov    edi,0xb
c000528c:	56                   	push   esi
c000528d:	53                   	push   ebx
c000528e:	83 ec 4c             	sub    esp,0x4c
c0005291:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0005295:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c0005299:	8d 44 24 60          	lea    eax,[esp+0x60]
c000529d:	e8 9c ce ff ff       	call   c000213e <get_ldnumber>
c00052a2:	85 c0                	test   eax,eax
c00052a4:	0f 88 a6 07 00 00    	js     c0005a50 <f_mkfs+0x7cb>
c00052aa:	8b 14 85 a0 34 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcb60]
c00052b1:	85 d2                	test   edx,edx
c00052b3:	74 03                	je     c00052b8 <f_mkfs+0x33>
c00052b5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052b8:	85 db                	test   ebx,ebx
c00052ba:	75 05                	jne    c00052c1 <f_mkfs+0x3c>
c00052bc:	bb e0 eb 01 c0       	mov    ebx,0xc001ebe0
c00052c1:	83 ec 0c             	sub    esp,0xc
c00052c4:	0f b6 c0             	movzx  eax,al
c00052c7:	bf 03 00 00 00       	mov    edi,0x3
c00052cc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052d4:	e8 e8 c9 ff ff       	call   c0001cc1 <disk_initialize>
c00052d9:	83 c4 10             	add    esp,0x10
c00052dc:	a8 01                	test   al,0x1
c00052de:	0f 85 6c 07 00 00    	jne    c0005a50 <f_mkfs+0x7cb>
c00052e4:	bf 0a 00 00 00       	mov    edi,0xa
c00052e9:	a8 04                	test   al,0x4
c00052eb:	0f 85 5f 07 00 00    	jne    c0005a50 <f_mkfs+0x7cb>
c00052f1:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00052f4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00052f8:	85 c0                	test   eax,eax
c00052fa:	75 20                	jne    c000531c <f_mkfs+0x97>
c00052fc:	51                   	push   ecx
c00052fd:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005301:	50                   	push   eax
c0005302:	6a 03                	push   0x3
c0005304:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005308:	e8 e3 c9 ff ff       	call   c0001cf0 <disk_ioctl>
c000530d:	83 c4 10             	add    esp,0x10
c0005310:	85 c0                	test   eax,eax
c0005312:	74 08                	je     c000531c <f_mkfs+0x97>
c0005314:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000531c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005320:	8d 42 ff             	lea    eax,[edx-0x1]
c0005323:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005328:	77 04                	ja     c000532e <f_mkfs+0xa9>
c000532a:	85 c2                	test   edx,eax
c000532c:	74 08                	je     c0005336 <f_mkfs+0xb1>
c000532e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005336:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005339:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000533d:	48                   	dec    eax
c000533e:	3c 01                	cmp    al,0x1
c0005340:	76 05                	jbe    c0005347 <f_mkfs+0xc2>
c0005342:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005347:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000534a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000534e:	48                   	dec    eax
c000534f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005354:	77 07                	ja     c000535d <f_mkfs+0xd8>
c0005356:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000535b:	74 08                	je     c0005365 <f_mkfs+0xe0>
c000535d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005365:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005368:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000536e:	77 07                	ja     c0005377 <f_mkfs+0xf2>
c0005370:	8d 47 ff             	lea    eax,[edi-0x1]
c0005373:	85 f8                	test   eax,edi
c0005375:	74 02                	je     c0005379 <f_mkfs+0xf4>
c0005377:	31 ff                	xor    edi,edi
c0005379:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005381:	77 0a                	ja     c000538d <f_mkfs+0x108>
c0005383:	bf 11 00 00 00       	mov    edi,0x11
c0005388:	e9 c3 06 00 00       	jmp    c0005a50 <f_mkfs+0x7cb>
c000538d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000538f:	89 ee                	mov    esi,ebp
c0005391:	85 ed                	test   ebp,ebp
c0005393:	75 1b                	jne    c00053b0 <f_mkfs+0x12b>
c0005395:	83 ec 0c             	sub    esp,0xc
c0005398:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000539c:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053a1:	50                   	push   eax
c00053a2:	e8 b5 06 00 00       	call   c0005a5c <ff_memalloc>
c00053a7:	83 c4 10             	add    esp,0x10
c00053aa:	89 c6                	mov    esi,eax
c00053ac:	85 c0                	test   eax,eax
c00053ae:	74 d3                	je     c0005383 <f_mkfs+0xfe>
c00053b0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053b8:	52                   	push   edx
c00053b9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053bd:	50                   	push   eax
c00053be:	6a 01                	push   0x1
c00053c0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053c4:	e8 27 c9 ff ff       	call   c0001cf0 <disk_ioctl>
c00053c9:	83 c4 10             	add    esp,0x10
c00053cc:	85 c0                	test   eax,eax
c00053ce:	0f 85 25 06 00 00    	jne    c00059f9 <f_mkfs+0x774>
c00053d4:	88 d8                	mov    al,bl
c00053d6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053de:	24 08                	and    al,0x8
c00053e0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053e4:	75 18                	jne    c00053fe <f_mkfs+0x179>
c00053e6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053ea:	83 f8 3f             	cmp    eax,0x3f
c00053ed:	76 0f                	jbe    c00053fe <f_mkfs+0x179>
c00053ef:	83 e8 3f             	sub    eax,0x3f
c00053f2:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c00053fa:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00053fe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005402:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005406:	83 f8 7f             	cmp    eax,0x7f
c0005409:	0f 86 52 02 00 00    	jbe    c0005661 <f_mkfs+0x3dc>
c000540f:	b9 80 00 00 00       	mov    ecx,0x80
c0005414:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000541a:	77 05                	ja     c0005421 <f_mkfs+0x19c>
c000541c:	89 f9                	mov    ecx,edi
c000541e:	c1 e9 09             	shr    ecx,0x9
c0005421:	88 d8                	mov    al,bl
c0005423:	83 e0 01             	and    eax,0x1
c0005426:	80 e3 02             	and    bl,0x2
c0005429:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000542d:	74 0a                	je     c0005439 <f_mkfs+0x1b4>
c000542f:	84 c0                	test   al,al
c0005431:	0f 84 4c 01 00 00    	je     c0005583 <f_mkfs+0x2fe>
c0005437:	eb 38                	jmp    c0005471 <f_mkfs+0x1ec>
c0005439:	bf 13 00 00 00       	mov    edi,0x13
c000543e:	84 c0                	test   al,al
c0005440:	75 2f                	jne    c0005471 <f_mkfs+0x1ec>
c0005442:	e9 c9 05 00 00       	jmp    c0005a10 <f_mkfs+0x78b>
c0005447:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000544c:	0f 85 08 02 00 00    	jne    c000565a <f_mkfs+0x3d5>
c0005452:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005457:	0f 86 e1 01 00 00    	jbe    c000563e <f_mkfs+0x3b9>
c000545d:	85 c9                	test   ecx,ecx
c000545f:	0f 85 bd 05 00 00    	jne    c0005a22 <f_mkfs+0x79d>
c0005465:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005468:	83 f9 40             	cmp    ecx,0x40
c000546b:	0f 87 c1 05 00 00    	ja     c0005a32 <f_mkfs+0x7ad>
c0005471:	89 cf                	mov    edi,ecx
c0005473:	85 c9                	test   ecx,ecx
c0005475:	75 1d                	jne    c0005494 <f_mkfs+0x20f>
c0005477:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000547b:	ba c0 eb 01 c0       	mov    edx,0xc001ebc0
c0005480:	c1 eb 0c             	shr    ebx,0xc
c0005483:	bf 01 00 00 00       	mov    edi,0x1
c0005488:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000548b:	66 85 c0             	test   ax,ax
c000548e:	0f 85 5f 01 00 00    	jne    c00055f3 <f_mkfs+0x36e>
c0005494:	31 d2                	xor    edx,edx
c0005496:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000549a:	f7 f7                	div    edi
c000549c:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054a1:	0f 86 5e 01 00 00    	jbe    c0005605 <f_mkfs+0x380>
c00054a7:	83 c0 02             	add    eax,0x2
c00054aa:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054af:	01 c0                	add    eax,eax
c00054b1:	05 ff 01 00 00       	add    eax,0x1ff
c00054b6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054be:	c1 e8 09             	shr    eax,0x9
c00054c1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054c9:	c1 e0 05             	shl    eax,0x5
c00054cc:	c1 e8 09             	shr    eax,0x9
c00054cf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054d3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054e0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054e4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054ec:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c00054f1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00054f5:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00054f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00054fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005501:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005505:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005509:	f7 d8                	neg    eax
c000550b:	21 c3                	and    ebx,eax
c000550d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005511:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005516:	0f 85 fc 00 00 00    	jne    c0005618 <f_mkfs+0x393>
c000551c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005520:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005524:	89 f8                	mov    eax,edi
c0005526:	c1 e0 04             	shl    eax,0x4
c0005529:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000552d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005531:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005535:	0f 82 26 01 00 00    	jb     c0005661 <f_mkfs+0x3dc>
c000553b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000553f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005543:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005547:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000554c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005550:	29 d0                	sub    eax,edx
c0005552:	31 d2                	xor    edx,edx
c0005554:	f7 f7                	div    edi
c0005556:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000555b:	89 c3                	mov    ebx,eax
c000555d:	0f 85 e4 fe ff ff    	jne    c0005447 <f_mkfs+0x1c2>
c0005563:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005568:	0f 87 02 01 00 00    	ja     c0005670 <f_mkfs+0x3eb>
c000556e:	85 c9                	test   ecx,ecx
c0005570:	0f 85 eb 00 00 00    	jne    c0005661 <f_mkfs+0x3dc>
c0005576:	83 ff 01             	cmp    edi,0x1
c0005579:	0f 86 e2 00 00 00    	jbe    c0005661 <f_mkfs+0x3dc>
c000557f:	89 f9                	mov    ecx,edi
c0005581:	d1 e9                	shr    ecx,1
c0005583:	89 cb                	mov    ebx,ecx
c0005585:	85 c9                	test   ecx,ecx
c0005587:	75 26                	jne    c00055af <f_mkfs+0x32a>
c0005589:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000558d:	ba d0 eb 01 c0       	mov    edx,0xc001ebd0
c0005592:	c1 eb 11             	shr    ebx,0x11
c0005595:	b9 01 00 00 00       	mov    ecx,0x1
c000559a:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000559d:	66 85 c0             	test   ax,ax
c00055a0:	74 0b                	je     c00055ad <f_mkfs+0x328>
c00055a2:	83 c2 02             	add    edx,0x2
c00055a5:	39 d8                	cmp    eax,ebx
c00055a7:	77 04                	ja     c00055ad <f_mkfs+0x328>
c00055a9:	01 c9                	add    ecx,ecx
c00055ab:	eb ed                	jmp    c000559a <f_mkfs+0x315>
c00055ad:	31 db                	xor    ebx,ebx
c00055af:	31 d2                	xor    edx,edx
c00055b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055b5:	f7 f1                	div    ecx
c00055b7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055be:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055c3:	c1 ea 09             	shr    edx,0x9
c00055c6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055cb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055cf:	0f 87 8c 00 00 00    	ja     c0005661 <f_mkfs+0x3dc>
c00055d5:	89 cf                	mov    edi,ecx
c00055d7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055df:	89 d9                	mov    ecx,ebx
c00055e1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055e9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055ee:	e9 e0 fe ff ff       	jmp    c00054d3 <f_mkfs+0x24e>
c00055f3:	83 c2 02             	add    edx,0x2
c00055f6:	39 d8                	cmp    eax,ebx
c00055f8:	0f 87 96 fe ff ff    	ja     c0005494 <f_mkfs+0x20f>
c00055fe:	01 ff                	add    edi,edi
c0005600:	e9 83 fe ff ff       	jmp    c0005488 <f_mkfs+0x203>
c0005605:	8d 04 40             	lea    eax,[eax+eax*2]
c0005608:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000560d:	40                   	inc    eax
c000560e:	d1 e8                	shr    eax,1
c0005610:	83 c0 03             	add    eax,0x3
c0005613:	e9 99 fe ff ff       	jmp    c00054b1 <f_mkfs+0x22c>
c0005618:	31 d2                	xor    edx,edx
c000561a:	89 d8                	mov    eax,ebx
c000561c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005620:	85 d2                	test   edx,edx
c0005622:	74 09                	je     c000562d <f_mkfs+0x3a8>
c0005624:	4b                   	dec    ebx
c0005625:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005629:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000562d:	89 d8                	mov    eax,ebx
c000562f:	31 d2                	xor    edx,edx
c0005631:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005635:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005639:	e9 e6 fe ff ff       	jmp    c0005524 <f_mkfs+0x29f>
c000563e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005643:	77 2b                	ja     c0005670 <f_mkfs+0x3eb>
c0005645:	85 c9                	test   ecx,ecx
c0005647:	75 18                	jne    c0005661 <f_mkfs+0x3dc>
c0005649:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000564c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005652:	0f 86 19 fe ff ff    	jbe    c0005471 <f_mkfs+0x1ec>
c0005658:	eb 07                	jmp    c0005661 <f_mkfs+0x3dc>
c000565a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000565f:	76 0a                	jbe    c000566b <f_mkfs+0x3e6>
c0005661:	bf 0e 00 00 00       	mov    edi,0xe
c0005666:	e9 a5 03 00 00       	jmp    c0005a10 <f_mkfs+0x78b>
c000566b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005670:	31 d2                	xor    edx,edx
c0005672:	b9 00 02 00 00       	mov    ecx,0x200
c0005677:	89 f0                	mov    eax,esi
c0005679:	e8 d2 c6 ff ff       	call   c0001d50 <mem_set>
c000567e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005683:	ba 72 eb 01 c0       	mov    edx,0xc001eb72
c0005688:	89 f0                	mov    eax,esi
c000568a:	e8 ac c6 ff ff       	call   c0001d3b <mem_cpy>
c000568f:	8d 46 0b             	lea    eax,[esi+0xb]
c0005692:	ba 00 02 00 00       	mov    edx,0x200
c0005697:	e8 98 c6 ff ff       	call   c0001d34 <st_word>
c000569c:	89 f8                	mov    eax,edi
c000569e:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056a3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056a6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056a9:	e8 86 c6 ff ff       	call   c0001d34 <st_word>
c00056ae:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056b2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056b7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ba:	75 08                	jne    c00056c4 <f_mkfs+0x43f>
c00056bc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056c8:	8d 46 11             	lea    eax,[esi+0x11]
c00056cb:	e8 64 c6 ff ff       	call   c0001d34 <st_word>
c00056d0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056d4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056da:	77 0a                	ja     c00056e6 <f_mkfs+0x461>
c00056dc:	8d 46 13             	lea    eax,[esi+0x13]
c00056df:	e8 50 c6 ff ff       	call   c0001d34 <st_word>
c00056e4:	eb 08                	jmp    c00056ee <f_mkfs+0x469>
c00056e6:	8d 46 20             	lea    eax,[esi+0x20]
c00056e9:	e8 4a c6 ff ff       	call   c0001d38 <st_dword>
c00056ee:	8d 46 18             	lea    eax,[esi+0x18]
c00056f1:	ba 3f 00 00 00       	mov    edx,0x3f
c00056f6:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c00056fa:	e8 35 c6 ff ff       	call   c0001d34 <st_word>
c00056ff:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005702:	ba ff 00 00 00       	mov    edx,0xff
c0005707:	e8 28 c6 ff ff       	call   c0001d34 <st_word>
c000570c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000570f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005713:	e8 20 c6 ff ff       	call   c0001d38 <st_dword>
c0005718:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000571d:	75 57                	jne    c0005776 <f_mkfs+0x4f1>
c000571f:	8d 46 43             	lea    eax,[esi+0x43]
c0005722:	ba 00 00 21 50       	mov    edx,0x50210000
c0005727:	e8 0c c6 ff ff       	call   c0001d38 <st_dword>
c000572c:	8d 46 24             	lea    eax,[esi+0x24]
c000572f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005733:	e8 00 c6 ff ff       	call   c0001d38 <st_dword>
c0005738:	8d 46 2c             	lea    eax,[esi+0x2c]
c000573b:	ba 02 00 00 00       	mov    edx,0x2
c0005740:	e8 f3 c5 ff ff       	call   c0001d38 <st_dword>
c0005745:	8d 46 30             	lea    eax,[esi+0x30]
c0005748:	ba 01 00 00 00       	mov    edx,0x1
c000574d:	e8 e2 c5 ff ff       	call   c0001d34 <st_word>
c0005752:	8d 46 32             	lea    eax,[esi+0x32]
c0005755:	ba 06 00 00 00       	mov    edx,0x6
c000575a:	e8 d5 c5 ff ff       	call   c0001d34 <st_word>
c000575f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005763:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005767:	8d 46 47             	lea    eax,[esi+0x47]
c000576a:	b9 13 00 00 00       	mov    ecx,0x13
c000576f:	ba 7e eb 01 c0       	mov    edx,0xc001eb7e
c0005774:	eb 2f                	jmp    c00057a5 <f_mkfs+0x520>
c0005776:	8d 46 27             	lea    eax,[esi+0x27]
c0005779:	ba 00 00 21 50       	mov    edx,0x50210000
c000577e:	e8 b5 c5 ff ff       	call   c0001d38 <st_dword>
c0005783:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005788:	8d 46 16             	lea    eax,[esi+0x16]
c000578b:	e8 a4 c5 ff ff       	call   c0001d34 <st_word>
c0005790:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c0005794:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c0005798:	8d 46 2b             	lea    eax,[esi+0x2b]
c000579b:	b9 13 00 00 00       	mov    ecx,0x13
c00057a0:	ba 92 eb 01 c0       	mov    edx,0xc001eb92
c00057a5:	e8 91 c5 ff ff       	call   c0001d3b <mem_cpy>
c00057aa:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057b0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057b9:	e8 76 c5 ff ff       	call   c0001d34 <st_word>
c00057be:	6a 01                	push   0x1
c00057c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057c4:	56                   	push   esi
c00057c5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057c9:	e8 0c c5 ff ff       	call   c0001cda <disk_write>
c00057ce:	83 c4 10             	add    esp,0x10
c00057d1:	85 c0                	test   eax,eax
c00057d3:	0f 85 20 02 00 00    	jne    c00059f9 <f_mkfs+0x774>
c00057d9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057de:	0f 85 98 00 00 00    	jne    c000587c <f_mkfs+0x5f7>
c00057e4:	6a 01                	push   0x1
c00057e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057ea:	83 c0 06             	add    eax,0x6
c00057ed:	50                   	push   eax
c00057ee:	56                   	push   esi
c00057ef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057f3:	e8 e2 c4 ff ff       	call   c0001cda <disk_write>
c00057f8:	b9 00 02 00 00       	mov    ecx,0x200
c00057fd:	31 d2                	xor    edx,edx
c00057ff:	89 f0                	mov    eax,esi
c0005801:	e8 4a c5 ff ff       	call   c0001d50 <mem_set>
c0005806:	ba 52 52 61 41       	mov    edx,0x41615252
c000580b:	89 f0                	mov    eax,esi
c000580d:	e8 26 c5 ff ff       	call   c0001d38 <st_dword>
c0005812:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005818:	ba 72 72 41 61       	mov    edx,0x61417272
c000581d:	e8 16 c5 ff ff       	call   c0001d38 <st_dword>
c0005822:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005825:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000582b:	e8 08 c5 ff ff       	call   c0001d38 <st_dword>
c0005830:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005836:	ba 02 00 00 00       	mov    edx,0x2
c000583b:	e8 f8 c4 ff ff       	call   c0001d38 <st_dword>
c0005840:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005845:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000584b:	e8 e4 c4 ff ff       	call   c0001d34 <st_word>
c0005850:	6a 01                	push   0x1
c0005852:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005856:	83 c0 07             	add    eax,0x7
c0005859:	50                   	push   eax
c000585a:	56                   	push   esi
c000585b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000585f:	e8 76 c4 ff ff       	call   c0001cda <disk_write>
c0005864:	83 c4 20             	add    esp,0x20
c0005867:	6a 01                	push   0x1
c0005869:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000586d:	40                   	inc    eax
c000586e:	50                   	push   eax
c000586f:	56                   	push   esi
c0005870:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005874:	e8 61 c4 ff ff       	call   c0001cda <disk_write>
c0005879:	83 c4 10             	add    esp,0x10
c000587c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005880:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005884:	c1 e8 09             	shr    eax,0x9
c0005887:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000588d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005891:	31 d2                	xor    edx,edx
c0005893:	31 db                	xor    ebx,ebx
c0005895:	89 f0                	mov    eax,esi
c0005897:	e8 b4 c4 ff ff       	call   c0001d50 <mem_set>
c000589c:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058a1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058a9:	0f 94 c3             	sete   bl
c00058ac:	4b                   	dec    ebx
c00058ad:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058b3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058b9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058be:	75 21                	jne    c00058e1 <f_mkfs+0x65c>
c00058c0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058c5:	89 f0                	mov    eax,esi
c00058c7:	e8 6c c4 ff ff       	call   c0001d38 <st_dword>
c00058cc:	8d 46 04             	lea    eax,[esi+0x4]
c00058cf:	83 ca ff             	or     edx,0xffffffff
c00058d2:	e8 61 c4 ff ff       	call   c0001d38 <st_dword>
c00058d7:	8d 46 08             	lea    eax,[esi+0x8]
c00058da:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058df:	eb 04                	jmp    c00058e5 <f_mkfs+0x660>
c00058e1:	89 da                	mov    edx,ebx
c00058e3:	89 f0                	mov    eax,esi
c00058e5:	e8 4e c4 ff ff       	call   c0001d38 <st_dword>
c00058ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058ee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00058f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00058f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00058fa:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00058fe:	76 08                	jbe    c0005908 <f_mkfs+0x683>
c0005900:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005904:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005908:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000590c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005910:	56                   	push   esi
c0005911:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005915:	e8 c0 c3 ff ff       	call   c0001cda <disk_write>
c000591a:	83 c4 10             	add    esp,0x10
c000591d:	85 c0                	test   eax,eax
c000591f:	0f 85 d4 00 00 00    	jne    c00059f9 <f_mkfs+0x774>
c0005925:	b9 00 02 00 00       	mov    ecx,0x200
c000592a:	31 d2                	xor    edx,edx
c000592c:	89 f0                	mov    eax,esi
c000592e:	e8 1d c4 ff ff       	call   c0001d50 <mem_set>
c0005933:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005937:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000593b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000593f:	75 b1                	jne    c00058f2 <f_mkfs+0x66d>
c0005941:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005945:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000594d:	40                   	inc    eax
c000594e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005952:	0f 87 61 ff ff ff    	ja     c00058b9 <f_mkfs+0x634>
c0005958:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000595d:	74 04                	je     c0005963 <f_mkfs+0x6de>
c000595f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005963:	89 fb                	mov    ebx,edi
c0005965:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005969:	76 04                	jbe    c000596f <f_mkfs+0x6ea>
c000596b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000596f:	53                   	push   ebx
c0005970:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005974:	56                   	push   esi
c0005975:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005979:	e8 5c c3 ff ff       	call   c0001cda <disk_write>
c000597e:	83 c4 10             	add    esp,0x10
c0005981:	85 c0                	test   eax,eax
c0005983:	75 74                	jne    c00059f9 <f_mkfs+0x774>
c0005985:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005989:	29 df                	sub    edi,ebx
c000598b:	75 d6                	jne    c0005963 <f_mkfs+0x6de>
c000598d:	b1 0c                	mov    cl,0xc
c000598f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005994:	74 18                	je     c00059ae <f_mkfs+0x729>
c0005996:	b1 06                	mov    cl,0x6
c0005998:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059a0:	77 0c                	ja     c00059ae <f_mkfs+0x729>
c00059a2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059a7:	0f 94 c1             	sete   cl
c00059aa:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059ae:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059b3:	75 2d                	jne    c00059e2 <f_mkfs+0x75d>
c00059b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059b9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059c1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059c5:	0f b6 c9             	movzx  ecx,cl
c00059c8:	83 ec 0c             	sub    esp,0xc
c00059cb:	56                   	push   esi
c00059cc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059d4:	e8 4c d3 ff ff       	call   c0002d25 <create_partition>
c00059d9:	83 c4 10             	add    esp,0x10
c00059dc:	89 c7                	mov    edi,eax
c00059de:	85 c0                	test   eax,eax
c00059e0:	75 2e                	jne    c0005a10 <f_mkfs+0x78b>
c00059e2:	31 ff                	xor    edi,edi
c00059e4:	50                   	push   eax
c00059e5:	6a 00                	push   0x0
c00059e7:	6a 00                	push   0x0
c00059e9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059ed:	e8 fe c2 ff ff       	call   c0001cf0 <disk_ioctl>
c00059f2:	83 c4 10             	add    esp,0x10
c00059f5:	85 c0                	test   eax,eax
c00059f7:	74 17                	je     c0005a10 <f_mkfs+0x78b>
c00059f9:	85 ed                	test   ebp,ebp
c00059fb:	75 0c                	jne    c0005a09 <f_mkfs+0x784>
c00059fd:	83 ec 0c             	sub    esp,0xc
c0005a00:	56                   	push   esi
c0005a01:	e8 6e 00 00 00       	call   c0005a74 <ff_memfree>
c0005a06:	83 c4 10             	add    esp,0x10
c0005a09:	bf 01 00 00 00       	mov    edi,0x1
c0005a0e:	eb 40                	jmp    c0005a50 <f_mkfs+0x7cb>
c0005a10:	85 ed                	test   ebp,ebp
c0005a12:	75 3c                	jne    c0005a50 <f_mkfs+0x7cb>
c0005a14:	83 ec 0c             	sub    esp,0xc
c0005a17:	56                   	push   esi
c0005a18:	e8 57 00 00 00       	call   c0005a74 <ff_memfree>
c0005a1d:	83 c4 10             	add    esp,0x10
c0005a20:	eb 2e                	jmp    c0005a50 <f_mkfs+0x7cb>
c0005a22:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a27:	0f 85 56 fb ff ff    	jne    c0005583 <f_mkfs+0x2fe>
c0005a2d:	e9 2f fc ff ff       	jmp    c0005661 <f_mkfs+0x3dc>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 4c fb ff ff    	jne    c0005589 <f_mkfs+0x304>
c0005a3d:	89 cf                	mov    edi,ecx
c0005a3f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a45:	0f 86 49 fa ff ff    	jbe    c0005494 <f_mkfs+0x20f>
c0005a4b:	e9 11 fc ff ff       	jmp    c0005661 <f_mkfs+0x3dc>
c0005a50:	83 c4 4c             	add    esp,0x4c
c0005a53:	89 f8                	mov    eax,edi
c0005a55:	5b                   	pop    ebx
c0005a56:	5e                   	pop    esi
c0005a57:	5f                   	pop    edi
c0005a58:	5d                   	pop    ebp
c0005a59:	c3                   	ret    
c0005a5a:	66 90                	xchg   ax,ax

c0005a5c <ff_memalloc>:
c0005a5c:	83 ec 0c             	sub    esp,0xc
c0005a5f:	83 ec 0c             	sub    esp,0xc
c0005a62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a66:	e8 fa 1d 00 00       	call   c0007865 <malloc>
c0005a6b:	83 c4 10             	add    esp,0x10
c0005a6e:	83 c4 0c             	add    esp,0xc
c0005a71:	c3                   	ret    
c0005a72:	66 90                	xchg   ax,ax

c0005a74 <ff_memfree>:
c0005a74:	83 ec 0c             	sub    esp,0xc
c0005a77:	83 ec 0c             	sub    esp,0xc
c0005a7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a7e:	e8 f2 1d 00 00       	call   c0007875 <free>
c0005a83:	83 c4 10             	add    esp,0x10
c0005a86:	90                   	nop
c0005a87:	83 c4 0c             	add    esp,0xc
c0005a8a:	c3                   	ret    
c0005a8b:	90                   	nop

c0005a8c <ff_uni2oem>:
c0005a8c:	83 ec 14             	sub    esp,0x14
c0005a8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005a93:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005a97:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005a9e:	c7 44 24 0c c0 ef 01 c0 	mov    DWORD PTR [esp+0xc],0xc001efc0
c0005aa6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005aab:	77 0b                	ja     c0005ab8 <ff_uni2oem+0x2c>
c0005aad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ab6:	eb 68                	jmp    c0005b20 <ff_uni2oem+0x94>
c0005ab8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ac0:	77 5e                	ja     c0005b20 <ff_uni2oem+0x94>
c0005ac2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ac8:	75 56                	jne    c0005b20 <ff_uni2oem+0x94>
c0005aca:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ad1:	eb 0d                	jmp    c0005ae0 <ff_uni2oem+0x54>
c0005ad3:	90                   	nop
c0005ad4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ad9:	40                   	inc    eax
c0005ada:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005adf:	90                   	nop
c0005ae0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005ae6:	77 24                	ja     c0005b0c <ff_uni2oem+0x80>
c0005ae8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005aed:	25 ff ff 00 00       	and    eax,0xffff
c0005af2:	01 c0                	add    eax,eax
c0005af4:	89 c2                	mov    edx,eax
c0005af6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005afa:	01 d0                	add    eax,edx
c0005afc:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005aff:	25 ff ff 00 00       	and    eax,0xffff
c0005b04:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b08:	75 ca                	jne    c0005ad4 <ff_uni2oem+0x48>
c0005b0a:	66 90                	xchg   ax,ax
c0005b0c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b11:	83 e8 80             	sub    eax,0xffffff80
c0005b14:	25 ff 00 00 00       	and    eax,0xff
c0005b19:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b1e:	66 90                	xchg   ax,ax
c0005b20:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b25:	83 c4 14             	add    esp,0x14
c0005b28:	c3                   	ret    
c0005b29:	8d 76 00             	lea    esi,[esi+0x0]

c0005b2c <ff_oem2uni>:
c0005b2c:	83 ec 18             	sub    esp,0x18
c0005b2f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b37:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b3c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b40:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b47:	c7 44 24 10 c0 ef 01 c0 	mov    DWORD PTR [esp+0x10],0xc001efc0
c0005b4f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b55:	77 0d                	ja     c0005b64 <ff_oem2uni+0x38>
c0005b57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b5b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b60:	eb 36                	jmp    c0005b98 <ff_oem2uni+0x6c>
c0005b62:	66 90                	xchg   ax,ax
c0005b64:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b6a:	75 2c                	jne    c0005b98 <ff_oem2uni+0x6c>
c0005b6c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b73:	77 23                	ja     c0005b98 <ff_oem2uni+0x6c>
c0005b75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b79:	25 ff ff 00 00       	and    eax,0xffff
c0005b7e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b83:	01 c0                	add    eax,eax
c0005b85:	89 c2                	mov    edx,eax
c0005b87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b8b:	01 d0                	add    eax,edx
c0005b8d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b90:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b95:	8d 76 00             	lea    esi,[esi+0x0]
c0005b98:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005b9d:	83 c4 18             	add    esp,0x18
c0005ba0:	c3                   	ret    
c0005ba1:	8d 76 00             	lea    esi,[esi+0x0]

c0005ba4 <ff_wtoupper>:
c0005ba4:	83 ec 10             	sub    esp,0x10
c0005ba7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005baf:	0f 87 77 01 00 00    	ja     c0005d2c <ff_wtoupper+0x188>
c0005bb5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bb9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bbe:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bc5:	77 09                	ja     c0005bd0 <ff_wtoupper+0x2c>
c0005bc7:	b8 c0 ed 01 c0       	mov    eax,0xc001edc0
c0005bcc:	eb 0a                	jmp    c0005bd8 <ff_wtoupper+0x34>
c0005bce:	66 90                	xchg   ax,ax
c0005bd0:	b8 00 ed 01 c0       	mov    eax,0xc001ed00
c0005bd5:	8d 76 00             	lea    esi,[esi+0x0]
c0005bd8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005be0:	8d 50 02             	lea    edx,[eax+0x2]
c0005be3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005be7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bea:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bef:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005bf5:	0f 84 21 01 00 00    	je     c0005d1c <ff_wtoupper+0x178>
c0005bfb:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c00:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c05:	0f 82 11 01 00 00    	jb     c0005d1c <ff_wtoupper+0x178>
c0005c0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c0f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c16:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c19:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c1e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c23:	66 c1 e8 08          	shr    ax,0x8
c0005c27:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c2c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c33:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c38:	31 d2                	xor    edx,edx
c0005c3a:	66 89 c2             	mov    dx,ax
c0005c3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c41:	31 c9                	xor    ecx,ecx
c0005c43:	66 89 c1             	mov    cx,ax
c0005c46:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c4b:	25 ff ff 00 00       	and    eax,0xffff
c0005c50:	01 c8                	add    eax,ecx
c0005c52:	39 c2                	cmp    edx,eax
c0005c54:	0f 8d 9a 00 00 00    	jge    c0005cf4 <ff_wtoupper+0x150>
c0005c5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c5e:	25 ff ff 00 00       	and    eax,0xffff
c0005c63:	83 f8 08             	cmp    eax,0x8
c0005c66:	0f 87 ac 00 00 00    	ja     c0005d18 <ff_wtoupper+0x174>
c0005c6c:	8b 04 85 c0 ec 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe1340]
c0005c73:	ff e0                	jmp    eax
c0005c75:	8d 76 00             	lea    esi,[esi+0x0]
c0005c78:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c7d:	31 d2                	xor    edx,edx
c0005c7f:	66 89 c2             	mov    dx,ax
c0005c82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c86:	25 ff ff 00 00       	and    eax,0xffff
c0005c8b:	29 c2                	sub    edx,eax
c0005c8d:	89 d0                	mov    eax,edx
c0005c8f:	01 c0                	add    eax,eax
c0005c91:	89 c2                	mov    edx,eax
c0005c93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c97:	01 d0                	add    eax,edx
c0005c99:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c9c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ca1:	eb 4d                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005ca3:	90                   	nop
c0005ca4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ca9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cad:	83 e0 01             	and    eax,0x1
c0005cb0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cb5:	eb 39                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005cb7:	90                   	nop
c0005cb8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cbe:	eb 30                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005cc0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cc6:	eb 28                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005cc8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cce:	eb 20                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005cd6:	eb 18                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005cd8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cde:	eb 10                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005ce6:	eb 08                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005ce8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cef:	90                   	nop
c0005cf0:	eb 26                	jmp    c0005d18 <ff_wtoupper+0x174>
c0005cf2:	66 90                	xchg   ax,ax
c0005cf4:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005cfa:	0f 85 dc fe ff ff    	jne    c0005bdc <ff_wtoupper+0x38>
c0005d00:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d05:	25 ff ff 00 00       	and    eax,0xffff
c0005d0a:	01 c0                	add    eax,eax
c0005d0c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d10:	e9 c7 fe ff ff       	jmp    c0005bdc <ff_wtoupper+0x38>
c0005d15:	8d 76 00             	lea    esi,[esi+0x0]
c0005d18:	90                   	nop
c0005d19:	8d 76 00             	lea    esi,[esi+0x0]
c0005d1c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d21:	25 ff ff 00 00       	and    eax,0xffff
c0005d26:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d2a:	66 90                	xchg   ax,ax
c0005d2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d30:	83 c4 10             	add    esp,0x10
c0005d33:	c3                   	ret    

c0005d34 <utf2ucs>:
c0005d34:	57                   	push   edi
c0005d35:	31 c9                	xor    ecx,ecx
c0005d37:	56                   	push   esi
c0005d38:	89 d7                	mov    edi,edx
c0005d3a:	53                   	push   ebx
c0005d3b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d3f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d43:	89 de                	mov    esi,ebx
c0005d45:	c1 fe 08             	sar    esi,0x8
c0005d48:	89 f2                	mov    edx,esi
c0005d4a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d4d:	41                   	inc    ecx
c0005d4e:	85 db                	test   ebx,ebx
c0005d50:	75 e9                	jne    c0005d3b <utf2ucs+0x7>
c0005d52:	5b                   	pop    ebx
c0005d53:	5e                   	pop    esi
c0005d54:	5f                   	pop    edi
c0005d55:	c3                   	ret    

c0005d56 <ucs2utfn>:
c0005d56:	83 e1 fe             	and    ecx,0xfffffffe
c0005d59:	01 d1                	add    ecx,edx
c0005d5b:	39 d1                	cmp    ecx,edx
c0005d5d:	75 04                	jne    c0005d63 <ucs2utfn+0xd>
c0005d5f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d62:	c3                   	ret    
c0005d63:	57                   	push   edi
c0005d64:	56                   	push   esi
c0005d65:	53                   	push   ebx
c0005d66:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d69:	83 c2 02             	add    edx,0x2
c0005d6c:	89 de                	mov    esi,ebx
c0005d6e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d72:	c1 e6 08             	shl    esi,0x8
c0005d75:	09 f3                	or     ebx,esi
c0005d77:	83 fb 3b             	cmp    ebx,0x3b
c0005d7a:	74 51                	je     c0005dcd <ucs2utfn+0x77>
c0005d7c:	83 fb 7f             	cmp    ebx,0x7f
c0005d7f:	7f 05                	jg     c0005d86 <ucs2utfn+0x30>
c0005d81:	88 18                	mov    BYTE PTR [eax],bl
c0005d83:	40                   	inc    eax
c0005d84:	eb 43                	jmp    c0005dc9 <ucs2utfn+0x73>
c0005d86:	89 de                	mov    esi,ebx
c0005d88:	89 df                	mov    edi,ebx
c0005d8a:	c1 fe 06             	sar    esi,0x6
c0005d8d:	83 e7 3f             	and    edi,0x3f
c0005d90:	83 cf 80             	or     edi,0xffffff80
c0005d93:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005d99:	7f 12                	jg     c0005dad <ucs2utfn+0x57>
c0005d9b:	89 f3                	mov    ebx,esi
c0005d9d:	83 c0 02             	add    eax,0x2
c0005da0:	83 cb c0             	or     ebx,0xffffffc0
c0005da3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005da6:	89 fb                	mov    ebx,edi
c0005da8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dab:	eb 1c                	jmp    c0005dc9 <ucs2utfn+0x73>
c0005dad:	c1 fb 0c             	sar    ebx,0xc
c0005db0:	83 e6 3f             	and    esi,0x3f
c0005db3:	83 cb e0             	or     ebx,0xffffffe0
c0005db6:	83 c0 03             	add    eax,0x3
c0005db9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dbc:	89 f3                	mov    ebx,esi
c0005dbe:	83 cb 80             	or     ebx,0xffffff80
c0005dc1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dc4:	89 fb                	mov    ebx,edi
c0005dc6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dc9:	39 d1                	cmp    ecx,edx
c0005dcb:	75 99                	jne    c0005d66 <ucs2utfn+0x10>
c0005dcd:	5b                   	pop    ebx
c0005dce:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005dd1:	5e                   	pop    esi
c0005dd2:	5f                   	pop    edi
c0005dd3:	c3                   	ret    

c0005dd4 <isjoliet>:
c0005dd4:	31 d2                	xor    edx,edx
c0005dd6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005dd9:	75 22                	jne    c0005dfd <isjoliet+0x29>
c0005ddb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005ddf:	75 1c                	jne    c0005dfd <isjoliet+0x29>
c0005de1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005de4:	ba 02 00 00 00       	mov    edx,0x2
c0005de9:	3c 43                	cmp    al,0x43
c0005deb:	74 10                	je     c0005dfd <isjoliet+0x29>
c0005ded:	ba 03 00 00 00       	mov    edx,0x3
c0005df2:	3c 45                	cmp    al,0x45
c0005df4:	74 07                	je     c0005dfd <isjoliet+0x29>
c0005df6:	31 d2                	xor    edx,edx
c0005df8:	3c 40                	cmp    al,0x40
c0005dfa:	0f 94 c2             	sete   dl
c0005dfd:	89 d0                	mov    eax,edx
c0005dff:	c3                   	ret    

c0005e00 <htohl_32>:
c0005e00:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e02:	c3                   	ret    

c0005e03 <iso_733>:
c0005e03:	eb fb                	jmp    c0005e00 <htohl_32>

c0005e05 <bgrad_cache>:
c0005e05:	83 fa 0e             	cmp    edx,0xe
c0005e08:	77 16                	ja     c0005e20 <bgrad_cache+0x1b>
c0005e0a:	53                   	push   ebx
c0005e0b:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e0e:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e12:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e15:	42                   	inc    edx
c0005e16:	83 fa 0f             	cmp    edx,0xf
c0005e19:	75 f3                	jne    c0005e0e <bgrad_cache+0x9>
c0005e1b:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e1e:	5b                   	pop    ebx
c0005e1f:	c3                   	ret    
c0005e20:	c3                   	ret    

c0005e21 <ucscompare>:
c0005e21:	55                   	push   ebp
c0005e22:	57                   	push   edi
c0005e23:	89 c7                	mov    edi,eax
c0005e25:	56                   	push   esi
c0005e26:	89 d6                	mov    esi,edx
c0005e28:	53                   	push   ebx
c0005e29:	31 d2                	xor    edx,edx
c0005e2b:	83 ec 1c             	sub    esp,0x1c
c0005e2e:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e32:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e37:	c1 e3 08             	shl    ebx,0x8
c0005e3a:	09 c3                	or     ebx,eax
c0005e3c:	39 ca                	cmp    edx,ecx
c0005e3e:	7d 42                	jge    c0005e82 <ucscompare+0x61>
c0005e40:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e44:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e49:	c1 e0 08             	shl    eax,0x8
c0005e4c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e50:	09 e8                	or     eax,ebp
c0005e52:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e56:	83 f8 3b             	cmp    eax,0x3b
c0005e59:	74 27                	je     c0005e82 <ucscompare+0x61>
c0005e5b:	83 ec 0c             	sub    esp,0xc
c0005e5e:	50                   	push   eax
c0005e5f:	e8 5c aa ff ff       	call   c00008c0 <tolower>
c0005e64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005e67:	89 c5                	mov    ebp,eax
c0005e69:	e8 52 aa ff ff       	call   c00008c0 <tolower>
c0005e6e:	83 c4 10             	add    esp,0x10
c0005e71:	39 c5                	cmp    ebp,eax
c0005e73:	75 20                	jne    c0005e95 <ucscompare+0x74>
c0005e75:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005e79:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005e7d:	83 c2 02             	add    edx,0x2
c0005e80:	eb ac                	jmp    c0005e2e <ucscompare+0xd>
c0005e82:	85 db                	test   ebx,ebx
c0005e84:	0f 95 c2             	setne  dl
c0005e87:	31 c0                	xor    eax,eax
c0005e89:	83 fb 2f             	cmp    ebx,0x2f
c0005e8c:	0f 95 c0             	setne  al
c0005e8f:	21 d0                	and    eax,edx
c0005e91:	f7 d8                	neg    eax
c0005e93:	eb 03                	jmp    c0005e98 <ucscompare+0x77>
c0005e95:	83 c8 ff             	or     eax,0xffffffff
c0005e98:	83 c4 1c             	add    esp,0x1c
c0005e9b:	5b                   	pop    ebx
c0005e9c:	5e                   	pop    esi
c0005e9d:	5f                   	pop    edi
c0005e9e:	5d                   	pop    ebp
c0005e9f:	c3                   	ret    

c0005ea0 <fncompare>:
c0005ea0:	55                   	push   ebp
c0005ea1:	57                   	push   edi
c0005ea2:	89 c7                	mov    edi,eax
c0005ea4:	56                   	push   esi
c0005ea5:	89 ce                	mov    esi,ecx
c0005ea7:	53                   	push   ebx
c0005ea8:	31 db                	xor    ebx,ebx
c0005eaa:	83 ec 1c             	sub    esp,0x1c
c0005ead:	39 d3                	cmp    ebx,edx
c0005eaf:	7d 43                	jge    c0005ef4 <fncompare+0x54>
c0005eb1:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005eb5:	3c 3b                	cmp    al,0x3b
c0005eb7:	74 3b                	je     c0005ef4 <fncompare+0x54>
c0005eb9:	3c 2e                	cmp    al,0x2e
c0005ebb:	75 0e                	jne    c0005ecb <fncompare+0x2b>
c0005ebd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005ec0:	39 d9                	cmp    ecx,ebx
c0005ec2:	74 30                	je     c0005ef4 <fncompare+0x54>
c0005ec4:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005ec9:	74 29                	je     c0005ef4 <fncompare+0x54>
c0005ecb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ecf:	83 ec 0c             	sub    esp,0xc
c0005ed2:	50                   	push   eax
c0005ed3:	e8 e8 a9 ff ff       	call   c00008c0 <tolower>
c0005ed8:	89 c5                	mov    ebp,eax
c0005eda:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005ede:	89 04 24             	mov    DWORD PTR [esp],eax
c0005ee1:	e8 da a9 ff ff       	call   c00008c0 <tolower>
c0005ee6:	83 c4 10             	add    esp,0x10
c0005ee9:	39 c5                	cmp    ebp,eax
c0005eeb:	75 1d                	jne    c0005f0a <fncompare+0x6a>
c0005eed:	43                   	inc    ebx
c0005eee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005ef2:	eb b9                	jmp    c0005ead <fncompare+0xd>
c0005ef4:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005ef7:	84 d2                	test   dl,dl
c0005ef9:	0f 95 c1             	setne  cl
c0005efc:	31 c0                	xor    eax,eax
c0005efe:	80 fa 2f             	cmp    dl,0x2f
c0005f01:	0f 95 c0             	setne  al
c0005f04:	21 c8                	and    eax,ecx
c0005f06:	f7 d8                	neg    eax
c0005f08:	eb 03                	jmp    c0005f0d <fncompare+0x6d>
c0005f0a:	83 c8 ff             	or     eax,0xffffffff
c0005f0d:	83 c4 1c             	add    esp,0x1c
c0005f10:	5b                   	pop    ebx
c0005f11:	5e                   	pop    esi
c0005f12:	5f                   	pop    edi
c0005f13:	5d                   	pop    ebp
c0005f14:	c3                   	ret    

c0005f15 <bclear_cache>:
c0005f15:	83 ec 18             	sub    esp,0x18
c0005f18:	68 c0 f0 01 c0       	push   0xc001f0c0
c0005f1d:	e8 26 2c 01 00       	call   c0018b48 <iso_kprintf>
c0005f22:	83 c4 10             	add    esp,0x10
c0005f25:	31 c0                	xor    eax,eax
c0005f27:	8b 14 85 20 30 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcfe0]
c0005f2e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005f34:	8b 14 85 80 30 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcf80]
c0005f3b:	40                   	inc    eax
c0005f3c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005f42:	83 f8 10             	cmp    eax,0x10
c0005f45:	75 e0                	jne    c0005f27 <bclear_cache+0x12>
c0005f47:	83 c4 0c             	add    esp,0xc
c0005f4a:	c3                   	ret    

c0005f4b <bclear>:
c0005f4b:	eb c8                	jmp    c0005f15 <bclear_cache>

c0005f4d <iso_break_all>:
c0005f4d:	83 ec 18             	sub    esp,0x18
c0005f50:	68 ce f0 01 c0       	push   0xc001f0ce
c0005f55:	e8 ee 2b 01 00       	call   c0018b48 <iso_kprintf>
c0005f5a:	83 c4 10             	add    esp,0x10
c0005f5d:	31 c0                	xor    eax,eax
c0005f5f:	c7 80 d0 35 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdca30],0x1
c0005f69:	05 94 00 00 00       	add    eax,0x94
c0005f6e:	3d 40 09 00 00       	cmp    eax,0x940
c0005f73:	75 ea                	jne    c0005f5f <iso_break_all+0x12>
c0005f75:	83 c4 0c             	add    esp,0xc
c0005f78:	c3                   	ret    

c0005f79 <isoReadDiscSector>:
c0005f79:	83 ec 0c             	sub    esp,0xc
c0005f7c:	0f be 05 60 30 02 c0 	movsx  eax,BYTE PTR ds:0xc0023060
c0005f83:	50                   	push   eax
c0005f84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f90:	e8 57 2b 01 00       	call   c0018aec <isoReadDiscSectorHelper>
c0005f95:	83 c4 1c             	add    esp,0x1c
c0005f98:	c3                   	ret    

c0005f99 <bread_cache>:
c0005f99:	55                   	push   ebp
c0005f9a:	57                   	push   edi
c0005f9b:	89 d7                	mov    edi,edx
c0005f9d:	56                   	push   esi
c0005f9e:	ba 0f 00 00 00       	mov    edx,0xf
c0005fa3:	53                   	push   ebx
c0005fa4:	89 c6                	mov    esi,eax
c0005fa6:	83 ec 0c             	sub    esp,0xc
c0005fa9:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005fac:	39 38                	cmp    DWORD PTR [eax],edi
c0005fae:	74 3c                	je     c0005fec <bread_cache+0x53>
c0005fb0:	4a                   	dec    edx
c0005fb1:	83 fa ff             	cmp    edx,0xffffffff
c0005fb4:	75 f3                	jne    c0005fa9 <bread_cache+0x10>
c0005fb6:	31 db                	xor    ebx,ebx
c0005fb8:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fbb:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fbe:	74 08                	je     c0005fc8 <bread_cache+0x2f>
c0005fc0:	43                   	inc    ebx
c0005fc1:	83 fb 10             	cmp    ebx,0x10
c0005fc4:	75 f2                	jne    c0005fb8 <bread_cache+0x1f>
c0005fc6:	31 db                	xor    ebx,ebx
c0005fc8:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fcb:	50                   	push   eax
c0005fcc:	6a 01                	push   0x1
c0005fce:	57                   	push   edi
c0005fcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fd2:	83 c0 04             	add    eax,0x4
c0005fd5:	50                   	push   eax
c0005fd6:	e8 9e ff ff ff       	call   c0005f79 <isoReadDiscSector>
c0005fdb:	83 c4 10             	add    esp,0x10
c0005fde:	83 c9 ff             	or     ecx,0xffffffff
c0005fe1:	85 c0                	test   eax,eax
c0005fe3:	78 13                	js     c0005ff8 <bread_cache+0x5f>
c0005fe5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fe8:	89 da                	mov    edx,ebx
c0005fea:	89 38                	mov    DWORD PTR [eax],edi
c0005fec:	89 f0                	mov    eax,esi
c0005fee:	e8 12 fe ff ff       	call   c0005e05 <bgrad_cache>
c0005ff3:	b9 0f 00 00 00       	mov    ecx,0xf
c0005ff8:	83 c4 0c             	add    esp,0xc
c0005ffb:	89 c8                	mov    eax,ecx
c0005ffd:	5b                   	pop    ebx
c0005ffe:	5e                   	pop    esi
c0005fff:	5f                   	pop    edi
c0006000:	5d                   	pop    ebp
c0006001:	c3                   	ret    

c0006002 <biread>:
c0006002:	89 c2                	mov    edx,eax
c0006004:	b8 80 30 02 c0       	mov    eax,0xc0023080
c0006009:	eb 8e                	jmp    c0005f99 <bread_cache>

c000600b <bdread>:
c000600b:	89 c2                	mov    edx,eax
c000600d:	b8 20 30 02 c0       	mov    eax,0xc0023020
c0006012:	eb 85                	jmp    c0005f99 <bread_cache>

c0006014 <strnicmp>:
c0006014:	55                   	push   ebp
c0006015:	57                   	push   edi
c0006016:	56                   	push   esi
c0006017:	31 f6                	xor    esi,esi
c0006019:	53                   	push   ebx
c000601a:	83 ec 0c             	sub    esp,0xc
c000601d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0006021:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c0006025:	74 42                	je     c0006069 <strnicmp+0x55>
c0006027:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000602b:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c000602f:	84 c0                	test   al,al
c0006031:	74 36                	je     c0006069 <strnicmp+0x55>
c0006033:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006036:	84 d2                	test   dl,dl
c0006038:	74 2f                	je     c0006069 <strnicmp+0x55>
c000603a:	38 d0                	cmp    al,dl
c000603c:	8d 6e 01             	lea    ebp,[esi+0x1]
c000603f:	75 04                	jne    c0006045 <strnicmp+0x31>
c0006041:	89 ee                	mov    esi,ebp
c0006043:	eb dc                	jmp    c0006021 <strnicmp+0xd>
c0006045:	83 ec 0c             	sub    esp,0xc
c0006048:	50                   	push   eax
c0006049:	e8 72 a8 ff ff       	call   c00008c0 <tolower>
c000604e:	89 c7                	mov    edi,eax
c0006050:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c0006054:	89 ee                	mov    esi,ebp
c0006056:	89 04 24             	mov    DWORD PTR [esp],eax
c0006059:	e8 62 a8 ff ff       	call   c00008c0 <tolower>
c000605e:	83 c4 10             	add    esp,0x10
c0006061:	29 c7                	sub    edi,eax
c0006063:	89 f8                	mov    eax,edi
c0006065:	74 ba                	je     c0006021 <strnicmp+0xd>
c0006067:	eb 02                	jmp    c000606b <strnicmp+0x57>
c0006069:	31 c0                	xor    eax,eax
c000606b:	83 c4 0c             	add    esp,0xc
c000606e:	5b                   	pop    ebx
c000606f:	5e                   	pop    esi
c0006070:	5f                   	pop    edi
c0006071:	5d                   	pop    ebp
c0006072:	c3                   	ret    

c0006073 <find_object>:
c0006073:	55                   	push   ebp
c0006074:	89 c5                	mov    ebp,eax
c0006076:	57                   	push   edi
c0006077:	56                   	push   esi
c0006078:	53                   	push   ebx
c0006079:	89 d3                	mov    ebx,edx
c000607b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006081:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006088:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000608c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006090:	83 3d b4 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023eb4,0x0
c0006097:	74 0b                	je     c00060a4 <find_object+0x31>
c0006099:	89 ea                	mov    edx,ebp
c000609b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000609f:	e8 90 fc ff ff       	call   c0005d34 <utf2ucs>
c00060a4:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00060a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00060ab:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00060b0:	7e 11                	jle    c00060c3 <find_object+0x50>
c00060b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060b6:	e8 47 ff ff ff       	call   c0006002 <biread>
c00060bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060bf:	85 c0                	test   eax,eax
c00060c1:	79 07                	jns    c00060ca <find_object+0x57>
c00060c3:	31 db                	xor    ebx,ebx
c00060c5:	e9 5b 01 00 00       	jmp    c0006225 <find_object+0x1b2>
c00060ca:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060d6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060da:	8b 04 85 80 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf80]
c00060e1:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060e5:	8a 03                	mov    al,BYTE PTR [ebx]
c00060e7:	84 c0                	test   al,al
c00060e9:	75 0e                	jne    c00060f9 <find_object+0x86>
c00060eb:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060ef:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c00060f7:	eb b2                	jmp    c00060ab <find_object+0x38>
c00060f9:	8b 35 b4 3e 02 c0    	mov    esi,DWORD PTR ds:0xc0023eb4
c00060ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006103:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0006107:	89 ca                	mov    edx,ecx
c0006109:	85 f6                	test   esi,esi
c000610b:	74 2b                	je     c0006138 <find_object+0xc5>
c000610d:	8d 43 21             	lea    eax,[ebx+0x21]
c0006110:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006114:	e8 08 fd ff ff       	call   c0005e21 <ucscompare>
c0006119:	85 c0                	test   eax,eax
c000611b:	0f 84 c1 00 00 00    	je     c00061e2 <find_object+0x16f>
c0006121:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006124:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006128:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c0006130:	0f 8e dc 00 00 00    	jle    c0006212 <find_object+0x19f>
c0006136:	eb b3                	jmp    c00060eb <find_object+0x78>
c0006138:	0f b6 f0             	movzx  esi,al
c000613b:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c000613f:	29 ce                	sub    esi,ecx
c0006141:	80 e2 01             	and    dl,0x1
c0006144:	74 05                	je     c000614b <find_object+0xd8>
c0006146:	83 ee 21             	sub    esi,0x21
c0006149:	eb 55                	jmp    c00061a0 <find_object+0x12d>
c000614b:	47                   	inc    edi
c000614c:	83 ee 22             	sub    esi,0x22
c000614f:	eb 4f                	jmp    c00061a0 <find_object+0x12d>
c0006151:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006154:	48                   	dec    eax
c0006155:	3c 01                	cmp    al,0x1
c0006157:	77 4c                	ja     c00061a5 <find_object+0x132>
c0006159:	50                   	push   eax
c000615a:	6a 02                	push   0x2
c000615c:	68 dd f0 01 c0       	push   0xc001f0dd
c0006161:	57                   	push   edi
c0006162:	e8 e9 a5 ff ff       	call   c0000750 <strncmp>
c0006167:	83 c4 10             	add    esp,0x10
c000616a:	85 c0                	test   eax,eax
c000616c:	75 2a                	jne    c0006198 <find_object+0x125>
c000616e:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c0006172:	8d 42 fb             	lea    eax,[edx-0x5]
c0006175:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006179:	50                   	push   eax
c000617a:	8d 47 05             	lea    eax,[edi+0x5]
c000617d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0006181:	50                   	push   eax
c0006182:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006186:	50                   	push   eax
c0006187:	e8 94 a4 ff ff       	call   c0000620 <strncpy>
c000618c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006190:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c0006195:	83 c4 10             	add    esp,0x10
c0006198:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c000619c:	29 c6                	sub    esi,eax
c000619e:	01 c7                	add    edi,eax
c00061a0:	83 fe 03             	cmp    esi,0x3
c00061a3:	7f ac                	jg     c0006151 <find_object+0xde>
c00061a5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00061aa:	7e 40                	jle    c00061ec <find_object+0x179>
c00061ac:	51                   	push   ecx
c00061ad:	51                   	push   ecx
c00061ae:	6a 2f                	push   0x2f
c00061b0:	55                   	push   ebp
c00061b1:	e8 6a a5 ff ff       	call   c0000720 <strchr>
c00061b6:	83 c4 10             	add    esp,0x10
c00061b9:	85 c0                	test   eax,eax
c00061bb:	74 04                	je     c00061c1 <find_object+0x14e>
c00061bd:	29 e8                	sub    eax,ebp
c00061bf:	eb 0c                	jmp    c00061cd <find_object+0x15a>
c00061c1:	83 ec 0c             	sub    esp,0xc
c00061c4:	55                   	push   ebp
c00061c5:	e8 66 a3 ff ff       	call   c0000530 <strlen>
c00061ca:	83 c4 10             	add    esp,0x10
c00061cd:	52                   	push   edx
c00061ce:	50                   	push   eax
c00061cf:	55                   	push   ebp
c00061d0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061d4:	50                   	push   eax
c00061d5:	e8 3a fe ff ff       	call   c0006014 <strnicmp>
c00061da:	83 c4 10             	add    esp,0x10
c00061dd:	e9 37 ff ff ff       	jmp    c0006119 <find_object+0xa6>
c00061e2:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061e6:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061ea:	eb 1e                	jmp    c000620a <find_object+0x197>
c00061ec:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00061f0:	8d 43 21             	lea    eax,[ebx+0x21]
c00061f3:	89 e9                	mov    ecx,ebp
c00061f5:	e8 a6 fc ff ff       	call   c0005ea0 <fncompare>
c00061fa:	85 c0                	test   eax,eax
c00061fc:	0f 85 1f ff ff ff    	jne    c0006121 <find_object+0xae>
c0006202:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006206:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000620a:	0f 85 11 ff ff ff    	jne    c0006121 <find_object+0xae>
c0006210:	eb 13                	jmp    c0006225 <find_object+0x1b2>
c0006212:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006216:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c000621a:	0f 8f b2 fe ff ff    	jg     c00060d2 <find_object+0x5f>
c0006220:	e9 c6 fe ff ff       	jmp    c00060eb <find_object+0x78>
c0006225:	81 c4 2c 01 00 00    	add    esp,0x12c
c000622b:	89 d8                	mov    eax,ebx
c000622d:	5b                   	pop    ebx
c000622e:	5e                   	pop    esi
c000622f:	5f                   	pop    edi
c0006230:	5d                   	pop    ebp
c0006231:	c3                   	ret    

c0006232 <find_object_path>:
c0006232:	55                   	push   ebp
c0006233:	57                   	push   edi
c0006234:	89 d7                	mov    edi,edx
c0006236:	56                   	push   esi
c0006237:	89 c6                	mov    esi,eax
c0006239:	53                   	push   ebx
c000623a:	89 cb                	mov    ebx,ecx
c000623c:	83 ec 0c             	sub    esp,0xc
c000623f:	50                   	push   eax
c0006240:	50                   	push   eax
c0006241:	6a 2f                	push   0x2f
c0006243:	56                   	push   esi
c0006244:	e8 d7 a4 ff ff       	call   c0000720 <strchr>
c0006249:	83 c4 10             	add    esp,0x10
c000624c:	89 c5                	mov    ebp,eax
c000624e:	85 c0                	test   eax,eax
c0006250:	74 3a                	je     c000628c <find_object_path+0x5a>
c0006252:	39 ee                	cmp    esi,ebp
c0006254:	74 31                	je     c0006287 <find_object_path+0x55>
c0006256:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006259:	e8 a5 fb ff ff       	call   c0005e03 <iso_733>
c000625e:	89 c2                	mov    edx,eax
c0006260:	8d 43 02             	lea    eax,[ebx+0x2]
c0006263:	e8 9b fb ff ff       	call   c0005e03 <iso_733>
c0006268:	83 ec 0c             	sub    esp,0xc
c000626b:	89 c1                	mov    ecx,eax
c000626d:	52                   	push   edx
c000626e:	89 f0                	mov    eax,esi
c0006270:	ba 01 00 00 00       	mov    edx,0x1
c0006275:	e8 f9 fd ff ff       	call   c0006073 <find_object>
c000627a:	83 c4 10             	add    esp,0x10
c000627d:	89 c3                	mov    ebx,eax
c000627f:	85 c0                	test   eax,eax
c0006281:	75 04                	jne    c0006287 <find_object_path+0x55>
c0006283:	31 db                	xor    ebx,ebx
c0006285:	eb 36                	jmp    c00062bd <find_object_path+0x8b>
c0006287:	8d 75 01             	lea    esi,[ebp+0x1]
c000628a:	eb b3                	jmp    c000623f <find_object_path+0xd>
c000628c:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000628f:	74 28                	je     c00062b9 <find_object_path+0x87>
c0006291:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006294:	e8 6a fb ff ff       	call   c0005e03 <iso_733>
c0006299:	89 c2                	mov    edx,eax
c000629b:	8d 43 02             	lea    eax,[ebx+0x2]
c000629e:	e8 60 fb ff ff       	call   c0005e03 <iso_733>
c00062a3:	83 ec 0c             	sub    esp,0xc
c00062a6:	89 c1                	mov    ecx,eax
c00062a8:	52                   	push   edx
c00062a9:	89 f0                	mov    eax,esi
c00062ab:	89 fa                	mov    edx,edi
c00062ad:	e8 c1 fd ff ff       	call   c0006073 <find_object>
c00062b2:	83 c4 10             	add    esp,0x10
c00062b5:	89 c3                	mov    ebx,eax
c00062b7:	eb 04                	jmp    c00062bd <find_object_path+0x8b>
c00062b9:	85 ff                	test   edi,edi
c00062bb:	74 c6                	je     c0006283 <find_object_path+0x51>
c00062bd:	83 c4 0c             	add    esp,0xc
c00062c0:	89 d8                	mov    eax,ebx
c00062c2:	5b                   	pop    ebx
c00062c3:	5e                   	pop    esi
c00062c4:	5f                   	pop    edi
c00062c5:	5d                   	pop    ebp
c00062c6:	c3                   	ret    

c00062c7 <stricmp>:
c00062c7:	57                   	push   edi
c00062c8:	56                   	push   esi
c00062c9:	31 f6                	xor    esi,esi
c00062cb:	53                   	push   ebx
c00062cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d0:	83 ec 0c             	sub    esp,0xc
c00062d3:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062db:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062df:	50                   	push   eax
c00062e0:	e8 bb a5 ff ff       	call   c00008a0 <toupper>
c00062e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00062e8:	e8 d3 a5 ff ff       	call   c00008c0 <tolower>
c00062ed:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062f0:	89 c3                	mov    ebx,eax
c00062f2:	e8 a9 a5 ff ff       	call   c00008a0 <toupper>
c00062f7:	89 04 24             	mov    DWORD PTR [esp],eax
c00062fa:	e8 c1 a5 ff ff       	call   c00008c0 <tolower>
c00062ff:	83 c4 10             	add    esp,0x10
c0006302:	39 c3                	cmp    ebx,eax
c0006304:	75 05                	jne    c000630b <stricmp+0x44>
c0006306:	46                   	inc    esi
c0006307:	85 db                	test   ebx,ebx
c0006309:	75 c1                	jne    c00062cc <stricmp+0x5>
c000630b:	29 c3                	sub    ebx,eax
c000630d:	89 d8                	mov    eax,ebx
c000630f:	5b                   	pop    ebx
c0006310:	5e                   	pop    esi
c0006311:	5f                   	pop    edi
c0006312:	c3                   	ret    

c0006313 <iso_open>:
c0006313:	57                   	push   edi
c0006314:	31 c0                	xor    eax,eax
c0006316:	56                   	push   esi
c0006317:	b9 80 3e 02 c0       	mov    ecx,0xc0023e80
c000631c:	53                   	push   ebx
c000631d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006322:	0f 95 c0             	setne  al
c0006325:	89 c2                	mov    edx,eax
c0006327:	89 c6                	mov    esi,eax
c0006329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000632d:	e8 00 ff ff ff       	call   c0006232 <find_object_path>
c0006332:	83 ca ff             	or     edx,0xffffffff
c0006335:	85 c0                	test   eax,eax
c0006337:	74 5e                	je     c0006397 <iso_open+0x84>
c0006339:	89 c1                	mov    ecx,eax
c000633b:	31 d2                	xor    edx,edx
c000633d:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006343:	83 bf 40 35 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdcac0],0x0
c000634a:	75 42                	jne    c000638e <iso_open+0x7b>
c000634c:	8d 41 02             	lea    eax,[ecx+0x2]
c000634f:	c7 87 40 35 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdcac0],0xffffffff
c0006359:	e8 a5 fa ff ff       	call   c0005e03 <iso_733>
c000635e:	89 b7 44 35 02 c0    	mov    DWORD PTR [edi-0x3ffdcabc],esi
c0006364:	89 87 40 35 02 c0    	mov    DWORD PTR [edi-0x3ffdcac0],eax
c000636a:	c7 87 48 35 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdcab8],0x0
c0006374:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006377:	e8 87 fa ff ff       	call   c0005e03 <iso_733>
c000637c:	c7 87 d0 35 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdca30],0x0
c0006386:	89 87 4c 35 02 c0    	mov    DWORD PTR [edi-0x3ffdcab4],eax
c000638c:	eb 09                	jmp    c0006397 <iso_open+0x84>
c000638e:	42                   	inc    edx
c000638f:	83 fa 10             	cmp    edx,0x10
c0006392:	75 a9                	jne    c000633d <iso_open+0x2a>
c0006394:	83 ca ff             	or     edx,0xffffffff
c0006397:	5b                   	pop    ebx
c0006398:	89 d0                	mov    eax,edx
c000639a:	5e                   	pop    esi
c000639b:	5f                   	pop    edi
c000639c:	c3                   	ret    

c000639d <iso_close>:
c000639d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00063a1:	83 f8 0f             	cmp    eax,0xf
c00063a4:	7f 10                	jg     c00063b6 <iso_close+0x19>
c00063a6:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00063ac:	c7 80 40 35 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdcac0],0x0
c00063b6:	e9 5a fb ff ff       	jmp    c0005f15 <bclear_cache>

c00063bb <iso_read>:
c00063bb:	55                   	push   ebp
c00063bc:	57                   	push   edi
c00063bd:	56                   	push   esi
c00063be:	53                   	push   ebx
c00063bf:	83 ec 1c             	sub    esp,0x1c
c00063c2:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063c6:	83 fd 0f             	cmp    ebp,0xf
c00063c9:	7e 0a                	jle    c00063d5 <iso_read+0x1a>
c00063cb:	83 c8 ff             	or     eax,0xffffffff
c00063ce:	89 c2                	mov    edx,eax
c00063d0:	e9 f4 00 00 00       	jmp    c00064c9 <iso_read+0x10e>
c00063d5:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063db:	83 bd 40 35 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdcac0],0x0
c00063e2:	74 e7                	je     c00063cb <iso_read+0x10>
c00063e4:	8b 95 d0 35 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdca30]
c00063ea:	85 d2                	test   edx,edx
c00063ec:	75 dd                	jne    c00063cb <iso_read+0x10>
c00063ee:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063f3:	0f 84 cd 00 00 00    	je     c00064c6 <iso_read+0x10b>
c00063f9:	8b 85 48 35 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdcab8]
c00063ff:	8b 8d 4c 35 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdcab4]
c0006405:	29 c1                	sub    ecx,eax
c0006407:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c000640b:	76 04                	jbe    c0006411 <iso_read+0x56>
c000640d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006411:	85 c9                	test   ecx,ecx
c0006413:	0f 84 ad 00 00 00    	je     c00064c6 <iso_read+0x10b>
c0006419:	89 c6                	mov    esi,eax
c000641b:	bb 00 08 00 00       	mov    ebx,0x800
c0006420:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006426:	c1 e8 0b             	shr    eax,0xb
c0006429:	29 f3                	sub    ebx,esi
c000642b:	03 85 40 35 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdcac0]
c0006431:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006437:	7e 3f                	jle    c0006478 <iso_read+0xbd>
c0006439:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000643f:	75 37                	jne    c0006478 <iso_read+0xbd>
c0006441:	be 20 00 00 00       	mov    esi,0x20
c0006446:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000644c:	7f 05                	jg     c0006453 <iso_read+0x98>
c000644e:	89 ce                	mov    esi,ecx
c0006450:	c1 fe 0b             	sar    esi,0xb
c0006453:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006457:	89 f3                	mov    ebx,esi
c0006459:	c1 e3 0b             	shl    ebx,0xb
c000645c:	52                   	push   edx
c000645d:	56                   	push   esi
c000645e:	50                   	push   eax
c000645f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006463:	e8 11 fb ff ff       	call   c0005f79 <isoReadDiscSector>
c0006468:	83 c4 10             	add    esp,0x10
c000646b:	85 c0                	test   eax,eax
c000646d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006471:	7f 3e                	jg     c00064b1 <iso_read+0xf6>
c0006473:	e9 53 ff ff ff       	jmp    c00063cb <iso_read+0x10>
c0006478:	39 cb                	cmp    ebx,ecx
c000647a:	7e 02                	jle    c000647e <iso_read+0xc3>
c000647c:	89 cb                	mov    ebx,ecx
c000647e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006482:	e8 84 fb ff ff       	call   c000600b <bdread>
c0006487:	85 c0                	test   eax,eax
c0006489:	0f 88 3c ff ff ff    	js     c00063cb <iso_read+0x10>
c000648f:	8b 0c 85 20 30 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcfe0]
c0006496:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000649a:	8b 85 48 35 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdcab8]
c00064a0:	25 ff 07 00 00       	and    eax,0x7ff
c00064a5:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00064a9:	89 d9                	mov    ecx,ebx
c00064ab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00064ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00064b1:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00064b5:	01 9d 48 35 02 c0    	add    DWORD PTR [ebp-0x3ffdcab8],ebx
c00064bb:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064bf:	01 da                	add    edx,ebx
c00064c1:	e9 28 ff ff ff       	jmp    c00063ee <iso_read+0x33>
c00064c6:	89 d0                	mov    eax,edx
c00064c8:	99                   	cdq    
c00064c9:	83 c4 1c             	add    esp,0x1c
c00064cc:	5b                   	pop    ebx
c00064cd:	5e                   	pop    esi
c00064ce:	5f                   	pop    edi
c00064cf:	5d                   	pop    ebp
c00064d0:	c3                   	ret    

c00064d1 <iso_seek>:
c00064d1:	55                   	push   ebp
c00064d2:	83 c8 ff             	or     eax,0xffffffff
c00064d5:	57                   	push   edi
c00064d6:	89 c2                	mov    edx,eax
c00064d8:	56                   	push   esi
c00064d9:	53                   	push   ebx
c00064da:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064de:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064e2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064e6:	83 fe 0f             	cmp    esi,0xf
c00064e9:	7f 65                	jg     c0006550 <iso_seek+0x7f>
c00064eb:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064f1:	8d 8d 40 35 02 c0    	lea    ecx,[ebp-0x3ffdcac0]
c00064f7:	83 bd 40 35 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdcac0],0x0
c00064fe:	74 50                	je     c0006550 <iso_seek+0x7f>
c0006500:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006507:	75 47                	jne    c0006550 <iso_seek+0x7f>
c0006509:	83 fb 01             	cmp    ebx,0x1
c000650c:	74 0e                	je     c000651c <iso_seek+0x4b>
c000650e:	83 fb 02             	cmp    ebx,0x2
c0006511:	74 0e                	je     c0006521 <iso_seek+0x50>
c0006513:	85 db                	test   ebx,ebx
c0006515:	75 39                	jne    c0006550 <iso_seek+0x7f>
c0006517:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c000651a:	eb 0d                	jmp    c0006529 <iso_seek+0x58>
c000651c:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c000651f:	eb 08                	jmp    c0006529 <iso_seek+0x58>
c0006521:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006524:	01 f8                	add    eax,edi
c0006526:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006529:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c000652f:	8b 88 4c 35 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdcab4]
c0006535:	05 40 35 02 c0       	add    eax,0xc0023540
c000653a:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000653d:	76 03                	jbe    c0006542 <iso_seek+0x71>
c000653f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006542:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006548:	8b 82 48 35 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdcab8]
c000654e:	31 d2                	xor    edx,edx
c0006550:	5b                   	pop    ebx
c0006551:	5e                   	pop    esi
c0006552:	5f                   	pop    edi
c0006553:	5d                   	pop    ebp
c0006554:	c3                   	ret    

c0006555 <iso_tell>:
c0006555:	83 c8 ff             	or     eax,0xffffffff
c0006558:	53                   	push   ebx
c0006559:	89 c2                	mov    edx,eax
c000655b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000655f:	83 f9 0f             	cmp    ecx,0xf
c0006562:	7f 20                	jg     c0006584 <iso_tell+0x2f>
c0006564:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000656a:	83 bb 40 35 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdcac0],0x0
c0006571:	74 11                	je     c0006584 <iso_tell+0x2f>
c0006573:	83 bb d0 35 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdca30],0x0
c000657a:	75 08                	jne    c0006584 <iso_tell+0x2f>
c000657c:	8b 83 48 35 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdcab8]
c0006582:	31 d2                	xor    edx,edx
c0006584:	5b                   	pop    ebx
c0006585:	c3                   	ret    

c0006586 <iso_total>:
c0006586:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000658a:	83 c8 ff             	or     eax,0xffffffff
c000658d:	83 fa 0f             	cmp    edx,0xf
c0006590:	7f 1e                	jg     c00065b0 <iso_total+0x2a>
c0006592:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006598:	83 ba 40 35 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdcac0],0x0
c000659f:	74 0f                	je     c00065b0 <iso_total+0x2a>
c00065a1:	83 ba d0 35 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdca30],0x0
c00065a8:	75 06                	jne    c00065b0 <iso_total+0x2a>
c00065aa:	8b 82 4c 35 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdcab4]
c00065b0:	c3                   	ret    

c00065b1 <fn_postprocess>:
c00065b1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00065b5:	89 d0                	mov    eax,edx
c00065b7:	8a 08                	mov    cl,BYTE PTR [eax]
c00065b9:	80 f9 3b             	cmp    cl,0x3b
c00065bc:	74 07                	je     c00065c5 <fn_postprocess+0x14>
c00065be:	84 c9                	test   cl,cl
c00065c0:	74 03                	je     c00065c5 <fn_postprocess+0x14>
c00065c2:	40                   	inc    eax
c00065c3:	eb f2                	jmp    c00065b7 <fn_postprocess+0x6>
c00065c5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065c8:	39 d0                	cmp    eax,edx
c00065ca:	76 0a                	jbe    c00065d6 <fn_postprocess+0x25>
c00065cc:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065d0:	75 04                	jne    c00065d6 <fn_postprocess+0x25>
c00065d2:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065d6:	c3                   	ret    

c00065d7 <iso_readdir>:
c00065d7:	55                   	push   ebp
c00065d8:	57                   	push   edi
c00065d9:	56                   	push   esi
c00065da:	53                   	push   ebx
c00065db:	83 ec 1c             	sub    esp,0x1c
c00065de:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00065e2:	83 fb 0f             	cmp    ebx,0xf
c00065e5:	7f 28                	jg     c000660f <iso_readdir+0x38>
c00065e7:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00065ed:	8d b8 40 35 02 c0    	lea    edi,[eax-0x3ffdcac0]
c00065f3:	83 b8 40 35 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdcac0],0x0
c00065fa:	74 13                	je     c000660f <iso_readdir+0x38>
c00065fc:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006600:	74 0d                	je     c000660f <iso_readdir+0x38>
c0006602:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006609:	0f 84 b1 00 00 00    	je     c00066c0 <iso_readdir+0xe9>
c000660f:	83 ec 0c             	sub    esp,0xc
c0006612:	68 e0 f0 01 c0       	push   0xc001f0e0
c0006617:	e8 2c 25 01 00       	call   c0018b48 <iso_kprintf>
c000661c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000661f:	e8 40 25 01 00       	call   c0018b64 <iso_kprintfd>
c0006624:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000662a:	c7 04 24 e5 f0 01 c0 	mov    DWORD PTR [esp],0xc001f0e5
c0006631:	e8 12 25 01 00       	call   c0018b48 <iso_kprintf>
c0006636:	5d                   	pop    ebp
c0006637:	ff b3 40 35 02 c0    	push   DWORD PTR [ebx-0x3ffdcac0]
c000663d:	e8 22 25 01 00       	call   c0018b64 <iso_kprintfd>
c0006642:	c7 04 24 eb f0 01 c0 	mov    DWORD PTR [esp],0xc001f0eb
c0006649:	e8 fa 24 01 00       	call   c0018b48 <iso_kprintf>
c000664e:	58                   	pop    eax
c000664f:	ff b3 44 35 02 c0    	push   DWORD PTR [ebx-0x3ffdcabc]
c0006655:	e8 0a 25 01 00       	call   c0018b64 <iso_kprintfd>
c000665a:	c7 04 24 f1 f0 01 c0 	mov    DWORD PTR [esp],0xc001f0f1
c0006661:	e8 e2 24 01 00       	call   c0018b48 <iso_kprintf>
c0006666:	58                   	pop    eax
c0006667:	ff b3 d0 35 02 c0    	push   DWORD PTR [ebx-0x3ffdca30]
c000666d:	e8 f2 24 01 00       	call   c0018b64 <iso_kprintfd>
c0006672:	83 c4 10             	add    esp,0x10
c0006675:	eb 42                	jmp    c00066b9 <iso_readdir+0xe2>
c0006677:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000667a:	8b 34 85 80 30 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdcf80]
c0006681:	89 d1                	mov    ecx,edx
c0006683:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006689:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c000668d:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006690:	75 35                	jne    c00066c7 <iso_readdir+0xf0>
c0006692:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006698:	81 c2 00 08 00 00    	add    edx,0x800
c000669e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00066a1:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00066a4:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00066a7:	73 1e                	jae    c00066c7 <iso_readdir+0xf0>
c00066a9:	c1 ea 0b             	shr    edx,0xb
c00066ac:	8b 07                	mov    eax,DWORD PTR [edi]
c00066ae:	01 d0                	add    eax,edx
c00066b0:	e8 4d f9 ff ff       	call   c0006002 <biread>
c00066b5:	85 c0                	test   eax,eax
c00066b7:	79 be                	jns    c0006677 <iso_readdir+0xa0>
c00066b9:	31 c0                	xor    eax,eax
c00066bb:	e9 66 01 00 00       	jmp    c0006826 <iso_readdir+0x24f>
c00066c0:	31 f6                	xor    esi,esi
c00066c2:	83 c8 ff             	or     eax,0xffffffff
c00066c5:	eb da                	jmp    c00066a1 <iso_readdir+0xca>
c00066c7:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00066cd:	8b ba 48 35 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdcab8]
c00066d3:	81 c2 40 35 02 c0    	add    edx,0xc0023540
c00066d9:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00066dc:	73 db                	jae    c00066b9 <iso_readdir+0xe2>
c00066de:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00066e2:	75 34                	jne    c0006718 <iso_readdir+0x141>
c00066e4:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00066e8:	75 2e                	jne    c0006718 <iso_readdir+0x141>
c00066ea:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00066ed:	8b 34 85 80 30 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdcf80]
c00066f4:	01 f9                	add    ecx,edi
c00066f6:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00066f9:	89 c8                	mov    eax,ecx
c00066fb:	25 ff 07 00 00       	and    eax,0x7ff
c0006700:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006705:	01 c8                	add    eax,ecx
c0006707:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000670a:	25 ff 07 00 00       	and    eax,0x7ff
c000670f:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006713:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006716:	74 a1                	je     c00066b9 <iso_readdir+0xe2>
c0006718:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000671e:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006722:	8d 56 21             	lea    edx,[esi+0x21]
c0006725:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006729:	8d a8 58 35 02 c0    	lea    ebp,[eax-0x3ffdcaa8]
c000672f:	83 3d b4 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023eb4,0x0
c0006736:	74 0c                	je     c0006744 <iso_readdir+0x16d>
c0006738:	89 e8                	mov    eax,ebp
c000673a:	e8 17 f6 ff ff       	call   c0005d56 <ucs2utfn>
c000673f:	e9 a6 00 00 00       	jmp    c00067ea <iso_readdir+0x213>
c0006744:	57                   	push   edi
c0006745:	51                   	push   ecx
c0006746:	52                   	push   edx
c0006747:	55                   	push   ebp
c0006748:	e8 d3 9e ff ff       	call   c0000620 <strncpy>
c000674d:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006751:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006757:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000675a:	c6 84 01 58 35 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffdcaa8],0x0
c0006762:	e8 4a fe ff ff       	call   c00065b1 <fn_postprocess>
c0006767:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c000676b:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000676e:	83 c4 10             	add    esp,0x10
c0006771:	29 d0                	sub    eax,edx
c0006773:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006777:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c000677b:	74 05                	je     c0006782 <iso_readdir+0x1ab>
c000677d:	83 e8 21             	sub    eax,0x21
c0006780:	eb 04                	jmp    c0006786 <iso_readdir+0x1af>
c0006782:	47                   	inc    edi
c0006783:	83 e8 22             	sub    eax,0x22
c0006786:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000678a:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006790:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006794:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006799:	7e 4f                	jle    c00067ea <iso_readdir+0x213>
c000679b:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000679e:	48                   	dec    eax
c000679f:	3c 01                	cmp    al,0x1
c00067a1:	77 47                	ja     c00067ea <iso_readdir+0x213>
c00067a3:	52                   	push   edx
c00067a4:	6a 02                	push   0x2
c00067a6:	68 dd f0 01 c0       	push   0xc001f0dd
c00067ab:	57                   	push   edi
c00067ac:	e8 9f 9f ff ff       	call   c0000750 <strncmp>
c00067b1:	83 c4 10             	add    esp,0x10
c00067b4:	85 c0                	test   eax,eax
c00067b6:	75 26                	jne    c00067de <iso_readdir+0x207>
c00067b8:	50                   	push   eax
c00067b9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067bd:	83 e8 05             	sub    eax,0x5
c00067c0:	50                   	push   eax
c00067c1:	8d 47 05             	lea    eax,[edi+0x5]
c00067c4:	50                   	push   eax
c00067c5:	55                   	push   ebp
c00067c6:	e8 55 9e ff ff       	call   c0000620 <strncpy>
c00067cb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00067cf:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067d3:	83 c4 10             	add    esp,0x10
c00067d6:	c6 84 08 53 35 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdcaad],0x0
c00067de:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067e2:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00067e6:	01 c7                	add    edi,eax
c00067e8:	eb aa                	jmp    c0006794 <iso_readdir+0x1bd>
c00067ea:	83 c8 ff             	or     eax,0xffffffff
c00067ed:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00067f1:	89 c2                	mov    edx,eax
c00067f3:	75 0a                	jne    c00067ff <iso_readdir+0x228>
c00067f5:	8d 46 0a             	lea    eax,[esi+0xa]
c00067f8:	e8 06 f6 ff ff       	call   c0005e03 <iso_733>
c00067fd:	31 d2                	xor    edx,edx
c00067ff:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006805:	89 83 50 35 02 c0    	mov    DWORD PTR [ebx-0x3ffdcab0],eax
c000680b:	89 93 54 35 02 c0    	mov    DWORD PTR [ebx-0x3ffdcaac],edx
c0006811:	81 c3 40 35 02 c0    	add    ebx,0xc0023540
c0006817:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000681a:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c000681d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006821:	05 50 35 02 c0       	add    eax,0xc0023550
c0006826:	83 c4 1c             	add    esp,0x1c
c0006829:	5b                   	pop    ebx
c000682a:	5e                   	pop    esi
c000682b:	5f                   	pop    edi
c000682c:	5d                   	pop    ebp
c000682d:	c3                   	ret    

c000682e <iso_reset>:
c000682e:	83 ec 18             	sub    esp,0x18
c0006831:	68 fa f0 01 c0       	push   0xc001f0fa
c0006836:	e8 0d 23 01 00       	call   c0018b48 <iso_kprintf>
c000683b:	e8 0d f7 ff ff       	call   c0005f4d <iso_break_all>
c0006840:	e8 06 f7 ff ff       	call   c0005f4b <bclear>
c0006845:	31 c0                	xor    eax,eax
c0006847:	83 c4 1c             	add    esp,0x1c
c000684a:	c3                   	ret    

c000684b <init_percd>:
c000684b:	57                   	push   edi
c000684c:	56                   	push   esi
c000684d:	53                   	push   ebx
c000684e:	bb 01 00 00 00       	mov    ebx,0x1
c0006853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006857:	a2 60 30 02 c0       	mov    ds:0xc0023060,al
c000685c:	e8 cd ff ff ff       	call   c000682e <iso_reset>
c0006861:	c7 05 b4 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023eb4,0x0
c000686b:	a1 ac 3e 02 c0       	mov    eax,ds:0xc0023eac
c0006870:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006874:	e8 89 f7 ff ff       	call   c0006002 <biread>
c0006879:	89 c6                	mov    esi,eax
c000687b:	85 c0                	test   eax,eax
c000687d:	0f 88 ba 00 00 00    	js     c000693d <init_percd+0xf2>
c0006883:	8b 04 85 80 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf80]
c000688a:	83 c0 04             	add    eax,0x4
c000688d:	52                   	push   edx
c000688e:	6a 06                	push   0x6
c0006890:	68 05 f1 01 c0       	push   0xc001f105
c0006895:	50                   	push   eax
c0006896:	e8 e5 9a ff ff       	call   c0000380 <memcmp>
c000689b:	83 c4 10             	add    esp,0x10
c000689e:	85 c0                	test   eax,eax
c00068a0:	74 08                	je     c00068aa <init_percd+0x5f>
c00068a2:	43                   	inc    ebx
c00068a3:	83 fb 04             	cmp    ebx,0x4
c00068a6:	75 c3                	jne    c000686b <init_percd+0x20>
c00068a8:	eb 1a                	jmp    c00068c4 <init_percd+0x79>
c00068aa:	8b 04 b5 80 30 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdcf80]
c00068b1:	83 c0 5c             	add    eax,0x5c
c00068b4:	e8 1b f5 ff ff       	call   c0005dd4 <isjoliet>
c00068b9:	a3 b4 3e 02 c0       	mov    ds:0xc0023eb4,eax
c00068be:	85 c0                	test   eax,eax
c00068c0:	74 e0                	je     c00068a2 <init_percd+0x57>
c00068c2:	eb 3e                	jmp    c0006902 <init_percd+0xb7>
c00068c4:	83 3d b4 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023eb4,0x0
c00068cb:	75 35                	jne    c0006902 <init_percd+0xb7>
c00068cd:	a1 ac 3e 02 c0       	mov    eax,ds:0xc0023eac
c00068d2:	83 c0 10             	add    eax,0x10
c00068d5:	e8 28 f7 ff ff       	call   c0006002 <biread>
c00068da:	89 c6                	mov    esi,eax
c00068dc:	85 c0                	test   eax,eax
c00068de:	78 5f                	js     c000693f <init_percd+0xf4>
c00068e0:	83 cb ff             	or     ebx,0xffffffff
c00068e3:	50                   	push   eax
c00068e4:	8b 04 b5 80 30 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdcf80]
c00068eb:	6a 06                	push   0x6
c00068ed:	83 c0 04             	add    eax,0x4
c00068f0:	68 0c f1 01 c0       	push   0xc001f10c
c00068f5:	50                   	push   eax
c00068f6:	e8 85 9a ff ff       	call   c0000380 <memcmp>
c00068fb:	83 c4 10             	add    esp,0x10
c00068fe:	85 c0                	test   eax,eax
c0006900:	75 3d                	jne    c000693f <init_percd+0xf4>
c0006902:	8b 34 b5 80 30 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdcf80]
c0006909:	bf 80 3e 02 c0       	mov    edi,0xc0023e80
c000690e:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006914:	b9 22 00 00 00       	mov    ecx,0x22
c0006919:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000691b:	b8 82 3e 02 c0       	mov    eax,0xc0023e82
c0006920:	31 db                	xor    ebx,ebx
c0006922:	e8 dc f4 ff ff       	call   c0005e03 <iso_733>
c0006927:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c000692c:	b8 8a 3e 02 c0       	mov    eax,0xc0023e8a
c0006931:	e8 cd f4 ff ff       	call   c0005e03 <iso_733>
c0006936:	a3 a4 3e 02 c0       	mov    ds:0xc0023ea4,eax
c000693b:	eb 02                	jmp    c000693f <init_percd+0xf4>
c000693d:	89 c3                	mov    ebx,eax
c000693f:	89 d8                	mov    eax,ebx
c0006941:	5b                   	pop    ebx
c0006942:	5e                   	pop    esi
c0006943:	5f                   	pop    edi
c0006944:	c3                   	ret    

c0006945 <iso_ioctl>:
c0006945:	83 ec 18             	sub    esp,0x18
c0006948:	68 13 f1 01 c0       	push   0xc001f113
c000694d:	e8 f6 21 01 00       	call   c0018b48 <iso_kprintf>
c0006952:	e8 d7 fe ff ff       	call   c000682e <iso_reset>
c0006957:	31 c0                	xor    eax,eax
c0006959:	83 c4 1c             	add    esp,0x1c
c000695c:	c3                   	ret    

c000695d <fs_iso9660_init>:
c000695d:	53                   	push   ebx
c000695e:	31 db                	xor    ebx,ebx
c0006960:	83 ec 14             	sub    esp,0x14
c0006963:	68 1e f1 01 c0       	push   0xc001f11e
c0006968:	e8 db 21 01 00       	call   c0018b48 <iso_kprintf>
c000696d:	83 c4 0c             	add    esp,0xc
c0006970:	68 40 09 00 00       	push   0x940
c0006975:	6a 00                	push   0x0
c0006977:	68 40 35 02 c0       	push   0xc0023540
c000697c:	e8 3f 9b ff ff       	call   c00004c0 <memset>
c0006981:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006988:	c7 05 40 35 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0023540,0xffffffff
c0006992:	e8 ce 0e 00 00       	call   c0007865 <malloc>
c0006997:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000699e:	a3 b0 3e 02 c0       	mov    ds:0xc0023eb0,eax
c00069a3:	e8 bd 0e 00 00       	call   c0007865 <malloc>
c00069a8:	83 c4 10             	add    esp,0x10
c00069ab:	a3 20 35 02 c0       	mov    ds:0xc0023520,eax
c00069b0:	83 ec 0c             	sub    esp,0xc
c00069b3:	68 04 08 00 00       	push   0x804
c00069b8:	e8 a8 0e 00 00       	call   c0007865 <malloc>
c00069bd:	89 04 9d 80 30 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdcf80],eax
c00069c4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00069ca:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c00069d1:	e8 8f 0e 00 00       	call   c0007865 <malloc>
c00069d6:	83 c4 10             	add    esp,0x10
c00069d9:	89 04 9d 20 30 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdcfe0],eax
c00069e0:	43                   	inc    ebx
c00069e1:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00069e7:	83 fb 10             	cmp    ebx,0x10
c00069ea:	75 c4                	jne    c00069b0 <fs_iso9660_init+0x53>
c00069ec:	31 c0                	xor    eax,eax
c00069ee:	83 c4 08             	add    esp,0x8
c00069f1:	5b                   	pop    ebx
c00069f2:	c3                   	ret    

c00069f3 <fs_iso9660_shutdown>:
c00069f3:	53                   	push   ebx
c00069f4:	31 db                	xor    ebx,ebx
c00069f6:	83 ec 08             	sub    esp,0x8
c00069f9:	83 ec 0c             	sub    esp,0xc
c00069fc:	ff 34 9d 80 30 02 c0 	push   DWORD PTR [ebx*4-0x3ffdcf80]
c0006a03:	e8 6d 0e 00 00       	call   c0007875 <free>
c0006a08:	58                   	pop    eax
c0006a09:	ff 34 9d 20 30 02 c0 	push   DWORD PTR [ebx*4-0x3ffdcfe0]
c0006a10:	43                   	inc    ebx
c0006a11:	e8 5f 0e 00 00       	call   c0007875 <free>
c0006a16:	83 c4 10             	add    esp,0x10
c0006a19:	83 fb 10             	cmp    ebx,0x10
c0006a1c:	75 db                	jne    c00069f9 <fs_iso9660_shutdown+0x6>
c0006a1e:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c0006a23:	85 c0                	test   eax,eax
c0006a25:	74 0c                	je     c0006a33 <fs_iso9660_shutdown+0x40>
c0006a27:	83 ec 0c             	sub    esp,0xc
c0006a2a:	50                   	push   eax
c0006a2b:	e8 45 0e 00 00       	call   c0007875 <free>
c0006a30:	83 c4 10             	add    esp,0x10
c0006a33:	a1 20 35 02 c0       	mov    eax,ds:0xc0023520
c0006a38:	85 c0                	test   eax,eax
c0006a3a:	74 0c                	je     c0006a48 <fs_iso9660_shutdown+0x55>
c0006a3c:	83 ec 0c             	sub    esp,0xc
c0006a3f:	50                   	push   eax
c0006a40:	e8 30 0e 00 00       	call   c0007875 <free>
c0006a45:	83 c4 10             	add    esp,0x10
c0006a48:	c7 05 20 35 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023520,0x0
c0006a52:	c7 05 b0 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023eb0,0x0
c0006a5c:	31 c0                	xor    eax,eax
c0006a5e:	83 c4 08             	add    esp,0x8
c0006a61:	5b                   	pop    ebx
c0006a62:	c3                   	ret    
c0006a63:	90                   	nop

c0006a64 <Computer::close(int, int, void*)>:
c0006a64:	57                   	push   edi
c0006a65:	56                   	push   esi
c0006a66:	53                   	push   ebx
c0006a67:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006a6b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006a6f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006a73:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006a79:	83 ec 0c             	sub    esp,0xc
c0006a7c:	50                   	push   eax
c0006a7d:	e8 e0 50 00 00       	call   c000bb62 <Device::closeAll()>
c0006a82:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006a88:	83 c4 10             	add    esp,0x10
c0006a8b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a8d:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006a91:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006a99:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006a9d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006aa1:	5b                   	pop    ebx
c0006aa2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006aa5:	5e                   	pop    esi
c0006aa6:	5f                   	pop    edi
c0006aa7:	ff e0                	jmp    eax

c0006aa9 <Krnl::firstTask()>:
c0006aa9:	53                   	push   ebx
c0006aaa:	83 ec 14             	sub    esp,0x14
c0006aad:	fb                   	sti    
c0006aae:	68 2f f1 01 c0       	push   0xc001f12f
c0006ab3:	e8 97 92 00 00       	call   c000fd4f <KeSetBootMessage(char const*)>
c0006ab8:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006abf:	e8 a1 0d 00 00       	call   c0007865 <malloc>
c0006ac4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006acb:	89 c3                	mov    ebx,eax
c0006acd:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0006ad2:	50                   	push   eax
c0006ad3:	68 48 f1 01 c0       	push   0xc001f148
c0006ad8:	6a 01                	push   0x1
c0006ada:	53                   	push   ebx
c0006adb:	e8 0c db 00 00       	call   c00145ec <Process::Process(bool, char const*, Process*, char**)>
c0006ae0:	83 c4 20             	add    esp,0x20
c0006ae3:	68 ff 00 00 00       	push   0xff
c0006ae8:	6a 00                	push   0x0
c0006aea:	68 b9 72 00 c0       	push   0xc00072b9
c0006aef:	53                   	push   ebx
c0006af0:	e8 1f dd 00 00       	call   c0014814 <Process::createThread(void (*)(void*), void*, int)>
c0006af5:	8b 15 90 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027190
c0006afb:	6a 7a                	push   0x7a
c0006afd:	6a 00                	push   0x0
c0006aff:	68 90 52 01 c0       	push   0xc0015290
c0006b04:	52                   	push   edx
c0006b05:	e8 0a dd 00 00       	call   c0014814 <Process::createThread(void (*)(void*), void*, int)>
c0006b0a:	83 c4 14             	add    esp,0x14
c0006b0d:	a3 48 71 02 c0       	mov    ds:0xc0027148,eax
c0006b12:	68 44 f2 01 c0       	push   0xc001f244
c0006b17:	c6 05 bd 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023ebd,0x1
c0006b1e:	e8 2c 92 00 00       	call   c000fd4f <KeSetBootMessage(char const*)>
c0006b23:	e8 47 eb 00 00       	call   c001566f <Vm::initialise8086()>
c0006b28:	e8 7b 3e 00 00       	call   c000a9a8 <Fs::initVFS()>
c0006b2d:	c7 04 24 55 f1 01 c0 	mov    DWORD PTR [esp],0xc001f155
c0006b34:	e8 16 92 00 00       	call   c000fd4f <KeSetBootMessage(char const*)>
c0006b39:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0006b3e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006b44:	8b 10                	mov    edx,DWORD PTR [eax]
c0006b46:	6a 00                	push   0x0
c0006b48:	6a 00                	push   0x0
c0006b4a:	6a 00                	push   0x0
c0006b4c:	50                   	push   eax
c0006b4d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006b50:	83 c4 14             	add    esp,0x14
c0006b53:	68 44 f2 01 c0       	push   0xc001f244
c0006b58:	e8 f2 91 00 00       	call   c000fd4f <KeSetBootMessage(char const*)>
c0006b5d:	e8 c8 96 00 00       	call   c001022a <Krnl::loadSystemEnv()>
c0006b62:	e8 25 99 00 00       	call   c001048c <Krnl::setupPowerManager()>
c0006b67:	83 c4 0c             	add    esp,0xc
c0006b6a:	6a 3a                	push   0x3a
c0006b6c:	68 6f f1 01 c0       	push   0xc001f16f
c0006b71:	68 78 f1 01 c0       	push   0xc001f178
c0006b76:	e8 c0 bd 00 00       	call   c001293b <Reg::readIntWithDefault(char*, char*, int)>
c0006b7b:	89 04 24             	mov    DWORD PTR [esp],eax
c0006b7e:	e8 31 49 00 00       	call   c000b4b4 <User::loadClockSettings(int)>
c0006b83:	c7 04 24 68 f2 01 c0 	mov    DWORD PTR [esp],0xc001f268
c0006b8a:	e8 c0 91 00 00       	call   c000fd4f <KeSetBootMessage(char const*)>
c0006b8f:	59                   	pop    ecx
c0006b90:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0006b95:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006b9b:	53                   	push   ebx
c0006b9c:	e8 bf 4f 00 00       	call   c000bb60 <Device::loadDriversForAll()>
c0006ba1:	c7 04 24 80 f1 01 c0 	mov    DWORD PTR [esp],0xc001f180
c0006ba8:	e8 a2 91 00 00       	call   c000fd4f <KeSetBootMessage(char const*)>
c0006bad:	58                   	pop    eax
c0006bae:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c0006bb4:	5a                   	pop    edx
c0006bb5:	6a 01                	push   0x1
c0006bb7:	68 91 f1 01 c0       	push   0xc001f191
c0006bbc:	e8 47 d4 00 00       	call   c0014008 <Thr::loadDLL(char const*, bool)>
c0006bc1:	59                   	pop    ecx
c0006bc2:	5a                   	pop    edx
c0006bc3:	53                   	push   ebx
c0006bc4:	50                   	push   eax
c0006bc5:	e8 6f d6 00 00       	call   c0014239 <Thr::executeDLL(unsigned long, void*)>
c0006bca:	83 c4 10             	add    esp,0x10
c0006bcd:	83 ec 0c             	sub    esp,0xc
c0006bd0:	6a 02                	push   0x2
c0006bd2:	e8 81 e0 00 00       	call   c0014c58 <blockTask(TaskState)>
c0006bd7:	83 c4 10             	add    esp,0x10
c0006bda:	eb f1                	jmp    c0006bcd <Krnl::firstTask()+0x124>

c0006bdc <Computer::Computer()>:
c0006bdc:	83 ec 0c             	sub    esp,0xc
c0006bdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006be3:	83 ec 08             	sub    esp,0x8
c0006be6:	68 ad f1 01 c0       	push   0xc001f1ad
c0006beb:	50                   	push   eax
c0006bec:	e8 eb 4f 00 00       	call   c000bbdc <Device::Device(char const*)>
c0006bf1:	83 c4 10             	add    esp,0x10
c0006bf4:	ba b4 f2 01 c0       	mov    edx,0xc001f2b4
c0006bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfd:	89 10                	mov    DWORD PTR [eax],edx
c0006bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c03:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006c0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c11:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006c1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c1f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006c25:	83 ca 04             	or     edx,0x4
c0006c28:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006c2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c32:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c38:	31 d2                	xor    edx,edx
c0006c3a:	88 c2                	mov    dl,al
c0006c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c40:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006c47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c4b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c51:	31 d2                	xor    edx,edx
c0006c53:	88 c2                	mov    dl,al
c0006c55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c59:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006c5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c62:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c68:	8d 50 01             	lea    edx,[eax+0x1]
c0006c6b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006c6f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006c75:	31 d2                	xor    edx,edx
c0006c77:	88 c2                	mov    dl,al
c0006c79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c7d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006c81:	83 e1 3f             	and    ecx,0x3f
c0006c84:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006c88:	90                   	nop
c0006c89:	83 c4 0c             	add    esp,0xc
c0006c8c:	c3                   	ret    
c0006c8d:	90                   	nop

c0006c8e <Computer::setBootMessage(char const*)>:
c0006c8e:	c3                   	ret    
c0006c8f:	90                   	nop

c0006c90 <Computer::detectFeatures()>:
c0006c90:	55                   	push   ebp
c0006c91:	57                   	push   edi
c0006c92:	56                   	push   esi
c0006c93:	53                   	push   ebx
c0006c94:	83 ec 1c             	sub    esp,0x1c
c0006c97:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006c9b:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006ca5:	e8 4f 95 ff ff       	call   c00001f9 <detectCPUID>
c0006caa:	85 c0                	test   eax,eax
c0006cac:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006cb2:	0f 95 c2             	setne  dl
c0006cb5:	83 e0 fd             	and    eax,0xfffffffd
c0006cb8:	01 d2                	add    edx,edx
c0006cba:	09 d0                	or     eax,edx
c0006cbc:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cc2:	a8 02                	test   al,0x2
c0006cc4:	75 46                	jne    c0006d0c <Computer::detectFeatures()+0x7c>
c0006cc6:	f6 05 d1 3e 02 c0 04 	test   BYTE PTR ds:0xc0023ed1,0x4
c0006ccd:	74 07                	je     c0006cd6 <Computer::detectFeatures()+0x46>
c0006ccf:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006cd6:	e8 4b 6d 01 00       	call   c001da26 <x87Detect>
c0006cdb:	83 e0 01             	and    eax,0x1
c0006cde:	c1 e0 04             	shl    eax,0x4
c0006ce1:	88 c2                	mov    dl,al
c0006ce3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ce9:	83 e0 ef             	and    eax,0xffffffef
c0006cec:	09 d0                	or     eax,edx
c0006cee:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cf4:	a8 10                	test   al,0x10
c0006cf6:	0f 85 2a 01 00 00    	jne    c0006e26 <Computer::detectFeatures()+0x196>
c0006cfc:	84 c0                	test   al,al
c0006cfe:	0f 88 45 01 00 00    	js     c0006e49 <Computer::detectFeatures()+0x1b9>
c0006d04:	83 c4 1c             	add    esp,0x1c
c0006d07:	5b                   	pop    ebx
c0006d08:	5e                   	pop    esi
c0006d09:	5f                   	pop    edi
c0006d0a:	5d                   	pop    ebp
c0006d0b:	c3                   	ret    
c0006d0c:	83 ec 0c             	sub    esp,0xc
c0006d0f:	6a 20                	push   0x20
c0006d11:	e8 66 85 00 00       	call   c000f27c <CPU::cpuidCheckEDX(unsigned int)>
c0006d16:	83 e0 01             	and    eax,0x1
c0006d19:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006d20:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d26:	83 e0 f7             	and    eax,0xfffffff7
c0006d29:	09 d0                	or     eax,edx
c0006d2b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d31:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006d38:	e8 3f 85 00 00       	call   c000f27c <CPU::cpuidCheckEDX(unsigned int)>
c0006d3d:	83 e0 01             	and    eax,0x1
c0006d40:	88 c2                	mov    dl,al
c0006d42:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006d48:	83 e0 fe             	and    eax,0xfffffffe
c0006d4b:	09 d0                	or     eax,edx
c0006d4d:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006d53:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006d5a:	e8 1d 85 00 00       	call   c000f27c <CPU::cpuidCheckEDX(unsigned int)>
c0006d5f:	c1 e0 07             	shl    eax,0x7
c0006d62:	88 c2                	mov    dl,al
c0006d64:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006d6a:	83 e0 7f             	and    eax,0x7f
c0006d6d:	09 d0                	or     eax,edx
c0006d6f:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006d75:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006d7c:	e8 fb 84 00 00       	call   c000f27c <CPU::cpuidCheckEDX(unsigned int)>
c0006d81:	83 c4 10             	add    esp,0x10
c0006d84:	83 e0 01             	and    eax,0x1
c0006d87:	c1 e0 05             	shl    eax,0x5
c0006d8a:	88 c2                	mov    dl,al
c0006d8c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d92:	83 e0 df             	and    eax,0xffffffdf
c0006d95:	09 d0                	or     eax,edx
c0006d97:	f7 05 d0 3e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0023ed0,0x401
c0006da1:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006da7:	0f 84 c2 00 00 00    	je     c0006e6f <Computer::detectFeatures()+0x1df>
c0006dad:	83 e0 fe             	and    eax,0xfffffffe
c0006db0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006db6:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006dbc:	88 c2                	mov    dl,al
c0006dbe:	83 e2 09             	and    edx,0x9
c0006dc1:	fe ca                	dec    dl
c0006dc3:	75 09                	jne    c0006dce <Computer::detectFeatures()+0x13e>
c0006dc5:	83 e0 fe             	and    eax,0xfffffffe
c0006dc8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006dce:	83 ec 0c             	sub    esp,0xc
c0006dd1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006dd5:	50                   	push   eax
c0006dd6:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006dda:	55                   	push   ebp
c0006ddb:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006ddf:	57                   	push   edi
c0006de0:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006de4:	56                   	push   esi
c0006de5:	68 00 00 00 80       	push   0x80000000
c0006dea:	e8 09 84 00 00       	call   c000f1f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006def:	83 c4 20             	add    esp,0x20
c0006df2:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006df9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006dfd:	0f 86 c3 fe ff ff    	jbe    c0006cc6 <Computer::detectFeatures()+0x36>
c0006e03:	83 ec 0c             	sub    esp,0xc
c0006e06:	50                   	push   eax
c0006e07:	55                   	push   ebp
c0006e08:	57                   	push   edi
c0006e09:	56                   	push   esi
c0006e0a:	68 01 00 00 80       	push   0x80000001
c0006e0f:	e8 e4 83 00 00       	call   c000f1f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006e14:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006e1e:	83 c4 20             	add    esp,0x20
c0006e21:	e9 a0 fe ff ff       	jmp    c0006cc6 <Computer::detectFeatures()+0x36>
c0006e26:	e8 b5 6b 01 00       	call   c001d9e0 <absolutelyNoChanceInHell>
c0006e2b:	88 c2                	mov    dl,al
c0006e2d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006e33:	c1 e2 07             	shl    edx,0x7
c0006e36:	83 e0 7f             	and    eax,0x7f
c0006e39:	09 d0                	or     eax,edx
c0006e3b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006e41:	84 c0                	test   al,al
c0006e43:	0f 89 bb fe ff ff    	jns    c0006d04 <Computer::detectFeatures()+0x74>
c0006e49:	e8 02 68 01 00       	call   c001d650 <avxDetect>
c0006e4e:	83 e0 01             	and    eax,0x1
c0006e51:	c1 e0 05             	shl    eax,0x5
c0006e54:	88 c2                	mov    dl,al
c0006e56:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006e5c:	83 e0 df             	and    eax,0xffffffdf
c0006e5f:	09 d0                	or     eax,edx
c0006e61:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006e67:	83 c4 1c             	add    esp,0x1c
c0006e6a:	5b                   	pop    ebx
c0006e6b:	5e                   	pop    esi
c0006e6c:	5f                   	pop    edi
c0006e6d:	5d                   	pop    ebp
c0006e6e:	c3                   	ret    
c0006e6f:	83 ec 0c             	sub    esp,0xc
c0006e72:	68 00 02 00 00       	push   0x200
c0006e77:	e8 00 84 00 00       	call   c000f27c <CPU::cpuidCheckEDX(unsigned int)>
c0006e7c:	83 c4 10             	add    esp,0x10
c0006e7f:	83 e0 01             	and    eax,0x1
c0006e82:	88 c2                	mov    dl,al
c0006e84:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006e8a:	83 e0 fe             	and    eax,0xfffffffe
c0006e8d:	09 d0                	or     eax,edx
c0006e8f:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006e95:	e9 1c ff ff ff       	jmp    c0006db6 <Computer::detectFeatures()+0x126>

c0006e9a <Computer::displayFeatures()>:
c0006e9a:	c3                   	ret    
c0006e9b:	90                   	nop

c0006e9c <Computer::rdmsr(unsigned int)>:
c0006e9c:	83 ec 0c             	sub    esp,0xc
c0006e9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea3:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006eaa:	74 0a                	je     c0006eb6 <Computer::rdmsr(unsigned int)+0x1a>
c0006eac:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006eb0:	0f 32                	rdmsr  
c0006eb2:	83 c4 0c             	add    esp,0xc
c0006eb5:	c3                   	ret    
c0006eb6:	83 ec 0c             	sub    esp,0xc
c0006eb9:	68 b6 f1 01 c0       	push   0xc001f1b6
c0006ebe:	e8 04 95 00 00       	call   c00103c7 <KePanic(char const*)>
c0006ec3:	83 c4 10             	add    esp,0x10
c0006ec6:	eb e4                	jmp    c0006eac <Computer::rdmsr(unsigned int)+0x10>

c0006ec8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006ec8:	57                   	push   edi
c0006ec9:	56                   	push   esi
c0006eca:	52                   	push   edx
c0006ecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ecf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006ed3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006ed7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006ede:	74 0e                	je     c0006eee <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006ee0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006ee4:	89 f0                	mov    eax,esi
c0006ee6:	89 fa                	mov    edx,edi
c0006ee8:	0f 30                	wrmsr  
c0006eea:	58                   	pop    eax
c0006eeb:	5e                   	pop    esi
c0006eec:	5f                   	pop    edi
c0006eed:	c3                   	ret    
c0006eee:	83 ec 0c             	sub    esp,0xc
c0006ef1:	68 bc f1 01 c0       	push   0xc001f1bc
c0006ef6:	e8 cc 94 00 00       	call   c00103c7 <KePanic(char const*)>
c0006efb:	83 c4 10             	add    esp,0x10
c0006efe:	eb e0                	jmp    c0006ee0 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006f00 <Computer::shutdown()>:
c0006f00:	83 ec 0c             	sub    esp,0xc
c0006f03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006f07:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f09:	6a 00                	push   0x0
c0006f0b:	6a 00                	push   0x0
c0006f0d:	6a 00                	push   0x0
c0006f0f:	50                   	push   eax
c0006f10:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006f13:	83 c4 1c             	add    esp,0x1c
c0006f16:	c3                   	ret    
c0006f17:	90                   	nop

c0006f18 <Computer::restart()>:
c0006f18:	83 ec 0c             	sub    esp,0xc
c0006f1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006f1f:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f21:	6a 00                	push   0x0
c0006f23:	6a 00                	push   0x0
c0006f25:	6a 01                	push   0x1
c0006f27:	50                   	push   eax
c0006f28:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006f2b:	83 c4 1c             	add    esp,0x1c
c0006f2e:	c3                   	ret    
c0006f2f:	90                   	nop

c0006f30 <Computer::sleep()>:
c0006f30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f34:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006f3a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006f3e:	e9 b1 7d 00 00       	jmp    c000ecf4 <ACPI::sleep()>
c0006f43:	90                   	nop

c0006f44 <Computer::nmiEnabled()>:
c0006f44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f48:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006f4e:	c3                   	ret    
c0006f4f:	90                   	nop

c0006f50 <Computer::readCMOS(unsigned char)>:
c0006f50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f54:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006f5b:	19 c0                	sbb    eax,eax
c0006f5d:	83 e0 80             	and    eax,0xffffff80
c0006f60:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006f64:	e6 70                	out    0x70,al
c0006f66:	e4 71                	in     al,0x71
c0006f68:	c3                   	ret    
c0006f69:	90                   	nop

c0006f6a <Computer::enableNMI(bool)>:
c0006f6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006f6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f72:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006f78:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006f80:	eb ce                	jmp    c0006f50 <Computer::readCMOS(unsigned char)>

c0006f82 <Computer::open(int, int, void*)>:
c0006f82:	56                   	push   esi
c0006f83:	53                   	push   ebx
c0006f84:	83 ec 10             	sub    esp,0x10
c0006f87:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006f8b:	f6 05 d0 3e 02 c0 04 	test   BYTE PTR ds:0xc0023ed0,0x4
c0006f92:	68 c2 f1 01 c0       	push   0xc001f1c2
c0006f97:	0f 94 05 e0 15 02 c0 	sete   BYTE PTR ds:0xc00215e0
c0006f9e:	e8 ac 8d 00 00       	call   c000fd4f <KeSetBootMessage(char const*)>
c0006fa3:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006faa:	e8 b6 08 00 00       	call   c0007865 <malloc>
c0006faf:	89 04 24             	mov    DWORD PTR [esp],eax
c0006fb2:	89 c6                	mov    esi,eax
c0006fb4:	e8 d3 78 00 00       	call   c000e88c <ACPI::ACPI()>
c0006fb9:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006fbf:	58                   	pop    eax
c0006fc0:	5a                   	pop    edx
c0006fc1:	56                   	push   esi
c0006fc2:	53                   	push   ebx
c0006fc3:	e8 7c 4a 00 00       	call   c000ba44 <Device::addChild(Device*)>
c0006fc8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006fcb:	e8 c0 fc ff ff       	call   c0006c90 <Computer::detectFeatures()>
c0006fd0:	59                   	pop    ecx
c0006fd1:	5e                   	pop    esi
c0006fd2:	6a 01                	push   0x1
c0006fd4:	53                   	push   ebx
c0006fd5:	e8 90 ff ff ff       	call   c0006f6a <Computer::enableNMI(bool)>
c0006fda:	c7 04 24 da f1 01 c0 	mov    DWORD PTR [esp],0xc001f1da
c0006fe1:	e8 69 8d 00 00       	call   c000fd4f <KeSetBootMessage(char const*)>
c0006fe6:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006fed:	e8 73 08 00 00       	call   c0007865 <malloc>
c0006ff2:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ff5:	89 c6                	mov    esi,eax
c0006ff7:	e8 38 83 00 00       	call   c000f334 <CPU::CPU()>
c0006ffc:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007002:	58                   	pop    eax
c0007003:	5a                   	pop    edx
c0007004:	56                   	push   esi
c0007005:	53                   	push   ebx
c0007006:	e8 39 4a 00 00       	call   c000ba44 <Device::addChild(Device*)>
c000700b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007011:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007015:	8b 10                	mov    edx,DWORD PTR [eax]
c0007017:	51                   	push   ecx
c0007018:	6a 00                	push   0x0
c000701a:	6a 00                	push   0x0
c000701c:	50                   	push   eax
c000701d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007020:	83 c4 14             	add    esp,0x14
c0007023:	68 88 f2 01 c0       	push   0xc001f288
c0007028:	e8 22 8d 00 00       	call   c000fd4f <KeSetBootMessage(char const*)>
c000702d:	e8 af f7 00 00       	call   c00167e1 <HalInitialiseCoprocessor()>
c0007032:	c7 04 24 f4 f1 01 c0 	mov    DWORD PTR [esp],0xc001f1f4
c0007039:	e8 11 8d 00 00       	call   c000fd4f <KeSetBootMessage(char const*)>
c000703e:	c7 04 24 a9 6a 00 c0 	mov    DWORD PTR [esp],0xc0006aa9
c0007045:	e8 f6 d8 00 00       	call   c0014940 <setupMultitasking(void (*)())>
c000704a:	83 c4 14             	add    esp,0x14
c000704d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007052:	5b                   	pop    ebx
c0007053:	5e                   	pop    esi
c0007054:	c3                   	ret    
c0007055:	90                   	nop

c0007056 <Computer::disableNMI()>:
c0007056:	6a 00                	push   0x0
c0007058:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000705c:	50                   	push   eax
c000705d:	e8 08 ff ff ff       	call   c0006f6a <Computer::enableNMI(bool)>
c0007062:	5a                   	pop    edx
c0007063:	59                   	pop    ecx
c0007064:	c3                   	ret    
c0007065:	90                   	nop

c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007066:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000706a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0007071:	19 c0                	sbb    eax,eax
c0007073:	83 e0 80             	and    eax,0xffffff80
c0007076:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000707a:	e6 70                	out    0x70,al
c000707c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007080:	e6 71                	out    0x71,al
c0007082:	c3                   	ret    
c0007083:	90                   	nop

c0007084 <Computer::handleNMI()>:
c0007084:	56                   	push   esi
c0007085:	53                   	push   ebx
c0007086:	83 ec 10             	sub    esp,0x10
c0007089:	e4 92                	in     al,0x92
c000708b:	89 c6                	mov    esi,eax
c000708d:	e4 61                	in     al,0x61
c000708f:	68 0f f2 01 c0       	push   0xc001f20f
c0007094:	88 c3                	mov    bl,al
c0007096:	e8 6b 35 00 00       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c000709b:	83 c4 10             	add    esp,0x10
c000709e:	83 e6 10             	and    esi,0x10
c00070a1:	75 0d                	jne    c00070b0 <Computer::handleNMI()+0x2c>
c00070a3:	f6 c3 40             	test   bl,0x40
c00070a6:	75 1d                	jne    c00070c5 <Computer::handleNMI()+0x41>
c00070a8:	84 db                	test   bl,bl
c00070aa:	78 2d                	js     c00070d9 <Computer::handleNMI()+0x55>
c00070ac:	58                   	pop    eax
c00070ad:	5b                   	pop    ebx
c00070ae:	5e                   	pop    esi
c00070af:	c3                   	ret    
c00070b0:	83 ec 0c             	sub    esp,0xc
c00070b3:	68 20 f2 01 c0       	push   0xc001f220
c00070b8:	e8 0a 93 00 00       	call   c00103c7 <KePanic(char const*)>
c00070bd:	83 c4 10             	add    esp,0x10
c00070c0:	f6 c3 40             	test   bl,0x40
c00070c3:	74 e3                	je     c00070a8 <Computer::handleNMI()+0x24>
c00070c5:	83 ec 0c             	sub    esp,0xc
c00070c8:	68 2d f2 01 c0       	push   0xc001f22d
c00070cd:	e8 f5 92 00 00       	call   c00103c7 <KePanic(char const*)>
c00070d2:	83 c4 10             	add    esp,0x10
c00070d5:	84 db                	test   bl,bl
c00070d7:	79 d3                	jns    c00070ac <Computer::handleNMI()+0x28>
c00070d9:	c7 44 24 10 37 f2 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f237
c00070e1:	5a                   	pop    edx
c00070e2:	5b                   	pop    ebx
c00070e3:	5e                   	pop    esi
c00070e4:	e9 de 92 00 00       	jmp    c00103c7 <KePanic(char const*)>
c00070e9:	90                   	nop

c00070ea <GDTEntry::setBase(unsigned int)>:
c00070ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070ee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00070f2:	89 c1                	mov    ecx,eax
c00070f4:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00070f8:	c1 e9 10             	shr    ecx,0x10
c00070fb:	c1 e8 18             	shr    eax,0x18
c00070fe:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007101:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007104:	c3                   	ret    
c0007105:	90                   	nop

c0007106 <GDTEntry::setLimit(unsigned int)>:
c0007106:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000710a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000710e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007111:	66 89 01             	mov    WORD PTR [ecx],ax
c0007114:	83 e2 f0             	and    edx,0xfffffff0
c0007117:	c1 e8 10             	shr    eax,0x10
c000711a:	83 e0 0f             	and    eax,0xf
c000711d:	09 d0                	or     eax,edx
c000711f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007122:	c3                   	ret    
c0007123:	90                   	nop

c0007124 <GDT::GDT()>:
c0007124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007128:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000712e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007132:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007138:	90                   	nop
c0007139:	c3                   	ret    

c000713a <GDT::addEntry(GDTEntry)>:
c000713a:	53                   	push   ebx
c000713b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000713f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007143:	8b 02                	mov    eax,DWORD PTR [edx]
c0007145:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007149:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000714d:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007151:	8d 48 01             	lea    ecx,[eax+0x1]
c0007154:	c1 e0 03             	shl    eax,0x3
c0007157:	89 0a                	mov    DWORD PTR [edx],ecx
c0007159:	5b                   	pop    ebx
c000715a:	c3                   	ret    
c000715b:	90                   	nop

c000715c <GDT::getNumberOfEntries()>:
c000715c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007160:	8b 00                	mov    eax,DWORD PTR [eax]
c0007162:	c3                   	ret    
c0007163:	90                   	nop

c0007164 <GDT::flush()>:
c0007164:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007168:	8b 10                	mov    edx,DWORD PTR [eax]
c000716a:	83 c0 04             	add    eax,0x4
c000716d:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0007174:	a3 c2 3e 02 c0       	mov    ds:0xc0023ec2,eax
c0007179:	66 89 15 c0 3e 02 c0 	mov    WORD PTR ds:0xc0023ec0,dx
c0007180:	e9 d5 91 ff ff       	jmp    c000035a <loadGDT>
c0007185:	90                   	nop

c0007186 <GDT::setup()>:
c0007186:	57                   	push   edi
c0007187:	56                   	push   esi
c0007188:	53                   	push   ebx
c0007189:	83 ec 30             	sub    esp,0x30
c000718c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007190:	6a 00                	push   0x0
c0007192:	8d 74 24 14          	lea    esi,[esp+0x14]
c0007196:	56                   	push   esi
c0007197:	e8 4e ff ff ff       	call   c00070ea <GDTEntry::setBase(unsigned int)>
c000719c:	6a 00                	push   0x0
c000719e:	56                   	push   esi
c000719f:	e8 62 ff ff ff       	call   c0007106 <GDTEntry::setLimit(unsigned int)>
c00071a4:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00071ac:	6a 00                	push   0x0
c00071ae:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00071b2:	56                   	push   esi
c00071b3:	e8 32 ff ff ff       	call   c00070ea <GDTEntry::setBase(unsigned int)>
c00071b8:	68 ff ff ff 00       	push   0xffffff
c00071bd:	56                   	push   esi
c00071be:	e8 43 ff ff ff       	call   c0007106 <GDTEntry::setLimit(unsigned int)>
c00071c3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00071c7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00071cb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00071cf:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00071d3:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00071d8:	0d 00 9a c0 00       	or     eax,0xc09a00
c00071dd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00071e1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00071e5:	89 f8                	mov    eax,edi
c00071e7:	89 fa                	mov    edx,edi
c00071e9:	80 e4 f7             	and    ah,0xf7
c00071ec:	80 ce 60             	or     dh,0x60
c00071ef:	89 c7                	mov    edi,eax
c00071f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00071f5:	80 cc 60             	or     ah,0x60
c00071f8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00071fc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007200:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007204:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007208:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000720c:	83 c4 20             	add    esp,0x20
c000720f:	6a 00                	push   0x0
c0007211:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007215:	50                   	push   eax
c0007216:	e8 cf fe ff ff       	call   c00070ea <GDTEntry::setBase(unsigned int)>
c000721b:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000721f:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007223:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c0007228:	6a 00                	push   0x0
c000722a:	8d 44 24 34          	lea    eax,[esp+0x34]
c000722e:	50                   	push   eax
c000722f:	e8 b6 fe ff ff       	call   c00070ea <GDTEntry::setBase(unsigned int)>
c0007234:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c0007239:	83 c4 0c             	add    esp,0xc
c000723c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007240:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007244:	53                   	push   ebx
c0007245:	e8 f0 fe ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c000724a:	83 c4 0c             	add    esp,0xc
c000724d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007251:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007255:	53                   	push   ebx
c0007256:	e8 df fe ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c000725b:	83 c4 0c             	add    esp,0xc
c000725e:	57                   	push   edi
c000725f:	56                   	push   esi
c0007260:	53                   	push   ebx
c0007261:	e8 d4 fe ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c0007266:	83 c4 0c             	add    esp,0xc
c0007269:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000726d:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0007271:	53                   	push   ebx
c0007272:	e8 c3 fe ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c0007277:	83 c4 0c             	add    esp,0xc
c000727a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000727e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007282:	53                   	push   ebx
c0007283:	e8 b2 fe ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c0007288:	83 c4 0c             	add    esp,0xc
c000728b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000728f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007293:	53                   	push   ebx
c0007294:	e8 a1 fe ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c0007299:	83 c4 0c             	add    esp,0xc
c000729c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00072a0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00072a4:	53                   	push   ebx
c00072a5:	e8 90 fe ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c00072aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00072ad:	e8 b2 fe ff ff       	call   c0007164 <GDT::flush()>
c00072b2:	83 c4 40             	add    esp,0x40
c00072b5:	5b                   	pop    ebx
c00072b6:	5e                   	pop    esi
c00072b7:	5f                   	pop    edi
c00072b8:	c3                   	ret    

c00072b9 <idleFunction(void*)>:
c00072b9:	83 ec 0c             	sub    esp,0xc
c00072bc:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00072c1:	48                   	dec    eax
c00072c2:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00072c7:	75 01                	jne    c00072ca <idleFunction(void*)+0x11>
c00072c9:	fb                   	sti    
c00072ca:	e8 ec f1 00 00       	call   c00164bb <HalSystemIdle()>
c00072cf:	e8 0e 6d 01 00       	call   c001dfe2 <idleCommon()>
c00072d4:	eb f4                	jmp    c00072ca <idleFunction(void*)+0x11>
c00072d6:	66 90                	xchg   ax,ax

c00072d8 <IDTEntry::IDTEntry(bool)>:
c00072d8:	83 ec 04             	sub    esp,0x4
c00072db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072df:	88 04 24             	mov    BYTE PTR [esp],al
c00072e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072e6:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00072ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072f0:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00072f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072f8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00072fb:	83 e2 f0             	and    edx,0xfffffff0
c00072fe:	83 ca 0e             	or     edx,0xe
c0007301:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007304:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007308:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000730b:	83 e2 ef             	and    edx,0xffffffef
c000730e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007311:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007315:	74 05                	je     c000731c <IDTEntry::IDTEntry(bool)+0x44>
c0007317:	b2 03                	mov    dl,0x3
c0007319:	eb 05                	jmp    c0007320 <IDTEntry::IDTEntry(bool)+0x48>
c000731b:	90                   	nop
c000731c:	b2 00                	mov    dl,0x0
c000731e:	66 90                	xchg   ax,ax
c0007320:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007324:	83 e2 03             	and    edx,0x3
c0007327:	88 d1                	mov    cl,dl
c0007329:	c1 e1 05             	shl    ecx,0x5
c000732c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000732f:	83 e2 9f             	and    edx,0xffffff9f
c0007332:	09 ca                	or     edx,ecx
c0007334:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007337:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000733b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000733e:	83 ca 80             	or     edx,0xffffff80
c0007341:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007344:	90                   	nop
c0007345:	83 c4 04             	add    esp,0x4
c0007348:	c3                   	ret    
c0007349:	90                   	nop

c000734a <IDTEntry::setOffset(unsigned int)>:
c000734a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000734e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007352:	66 89 02             	mov    WORD PTR [edx],ax
c0007355:	c1 e8 10             	shr    eax,0x10
c0007358:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000735c:	c3                   	ret    
c000735d:	90                   	nop
c000735e:	66 90                	xchg   ax,ax

c0007360 <IDT::IDT()>:
c0007360:	90                   	nop
c0007361:	c3                   	ret    

c0007362 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0007362:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007366:	83 c0 30             	add    eax,0x30
c0007369:	c3                   	ret    

c000736a <IDT::addEntry(IDTEntry, int)>:
c000736a:	53                   	push   ebx
c000736b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000736f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007373:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007377:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000737b:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000737e:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0007382:	5b                   	pop    ebx
c0007383:	c3                   	ret    

c0007384 <IDT::addEntry(int, void (*)(), bool)>:
c0007384:	53                   	push   ebx
c0007385:	83 ec 10             	sub    esp,0x10
c0007388:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000738d:	50                   	push   eax
c000738e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0007392:	53                   	push   ebx
c0007393:	e8 40 ff ff ff       	call   c00072d8 <IDTEntry::IDTEntry(bool)>
c0007398:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000739c:	53                   	push   ebx
c000739d:	e8 a8 ff ff ff       	call   c000734a <IDTEntry::setOffset(unsigned int)>
c00073a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00073a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00073aa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00073ae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00073b2:	e8 b3 ff ff ff       	call   c000736a <IDT::addEntry(IDTEntry, int)>
c00073b7:	83 c4 30             	add    esp,0x30
c00073ba:	5b                   	pop    ebx
c00073bb:	c3                   	ret    

c00073bc <IDT::flush()>:
c00073bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073c0:	66 c7 05 c8 3e 02 c0 ff 07 	mov    WORD PTR ds:0xc0023ec8,0x7ff
c00073c9:	a3 ca 3e 02 c0       	mov    ds:0xc0023eca,eax
c00073ce:	0f 01 1d c8 3e 02 c0 	lidtd  ds:0xc0023ec8
c00073d5:	c3                   	ret    

c00073d6 <IDT::setup()>:
c00073d6:	57                   	push   edi
c00073d7:	56                   	push   esi
c00073d8:	53                   	push   ebx
c00073d9:	83 ec 10             	sub    esp,0x10
c00073dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00073e0:	6a 00                	push   0x0
c00073e2:	68 e0 d6 01 c0       	push   0xc001d6e0
c00073e7:	6a 00                	push   0x0
c00073e9:	53                   	push   ebx
c00073ea:	e8 95 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00073ef:	6a 00                	push   0x0
c00073f1:	68 f0 d6 01 c0       	push   0xc001d6f0
c00073f6:	6a 01                	push   0x1
c00073f8:	53                   	push   ebx
c00073f9:	e8 86 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00073fe:	83 c4 20             	add    esp,0x20
c0007401:	6a 00                	push   0x0
c0007403:	68 fa d6 01 c0       	push   0xc001d6fa
c0007408:	6a 02                	push   0x2
c000740a:	53                   	push   ebx
c000740b:	e8 74 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007410:	6a 00                	push   0x0
c0007412:	68 04 d7 01 c0       	push   0xc001d704
c0007417:	6a 03                	push   0x3
c0007419:	53                   	push   ebx
c000741a:	e8 65 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c000741f:	83 c4 20             	add    esp,0x20
c0007422:	6a 00                	push   0x0
c0007424:	68 0e d7 01 c0       	push   0xc001d70e
c0007429:	6a 04                	push   0x4
c000742b:	53                   	push   ebx
c000742c:	e8 53 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007431:	6a 00                	push   0x0
c0007433:	68 18 d7 01 c0       	push   0xc001d718
c0007438:	6a 05                	push   0x5
c000743a:	53                   	push   ebx
c000743b:	e8 44 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007440:	83 c4 20             	add    esp,0x20
c0007443:	6a 00                	push   0x0
c0007445:	68 22 d7 01 c0       	push   0xc001d722
c000744a:	6a 06                	push   0x6
c000744c:	53                   	push   ebx
c000744d:	e8 32 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007452:	6a 00                	push   0x0
c0007454:	68 2c d7 01 c0       	push   0xc001d72c
c0007459:	6a 07                	push   0x7
c000745b:	53                   	push   ebx
c000745c:	e8 23 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007461:	83 c4 20             	add    esp,0x20
c0007464:	6a 00                	push   0x0
c0007466:	68 36 d7 01 c0       	push   0xc001d736
c000746b:	6a 08                	push   0x8
c000746d:	53                   	push   ebx
c000746e:	e8 11 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007473:	6a 00                	push   0x0
c0007475:	68 3e d7 01 c0       	push   0xc001d73e
c000747a:	6a 09                	push   0x9
c000747c:	53                   	push   ebx
c000747d:	e8 02 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007482:	83 c4 20             	add    esp,0x20
c0007485:	6a 00                	push   0x0
c0007487:	68 48 d7 01 c0       	push   0xc001d748
c000748c:	6a 0a                	push   0xa
c000748e:	53                   	push   ebx
c000748f:	e8 f0 fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007494:	6a 00                	push   0x0
c0007496:	68 50 d7 01 c0       	push   0xc001d750
c000749b:	6a 0b                	push   0xb
c000749d:	53                   	push   ebx
c000749e:	e8 e1 fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00074a3:	83 c4 20             	add    esp,0x20
c00074a6:	6a 00                	push   0x0
c00074a8:	68 58 d7 01 c0       	push   0xc001d758
c00074ad:	6a 0c                	push   0xc
c00074af:	53                   	push   ebx
c00074b0:	e8 cf fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00074b5:	6a 00                	push   0x0
c00074b7:	68 60 d7 01 c0       	push   0xc001d760
c00074bc:	6a 0d                	push   0xd
c00074be:	53                   	push   ebx
c00074bf:	e8 c0 fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00074c4:	83 c4 20             	add    esp,0x20
c00074c7:	6a 00                	push   0x0
c00074c9:	68 7a d7 01 c0       	push   0xc001d77a
c00074ce:	6a 0e                	push   0xe
c00074d0:	53                   	push   ebx
c00074d1:	e8 ae fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00074d6:	6a 00                	push   0x0
c00074d8:	68 82 d7 01 c0       	push   0xc001d782
c00074dd:	6a 0f                	push   0xf
c00074df:	53                   	push   ebx
c00074e0:	e8 9f fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00074e5:	83 c4 20             	add    esp,0x20
c00074e8:	6a 00                	push   0x0
c00074ea:	68 8c d7 01 c0       	push   0xc001d78c
c00074ef:	6a 10                	push   0x10
c00074f1:	53                   	push   ebx
c00074f2:	e8 8d fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00074f7:	6a 00                	push   0x0
c00074f9:	68 96 d7 01 c0       	push   0xc001d796
c00074fe:	6a 11                	push   0x11
c0007500:	53                   	push   ebx
c0007501:	e8 7e fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007506:	83 c4 20             	add    esp,0x20
c0007509:	6a 00                	push   0x0
c000750b:	68 a0 d7 01 c0       	push   0xc001d7a0
c0007510:	6a 12                	push   0x12
c0007512:	53                   	push   ebx
c0007513:	e8 6c fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007518:	6a 01                	push   0x1
c000751a:	68 3a d8 01 c0       	push   0xc001d83a
c000751f:	6a 60                	push   0x60
c0007521:	53                   	push   ebx
c0007522:	e8 5d fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007527:	83 c4 20             	add    esp,0x20
c000752a:	6a 00                	push   0x0
c000752c:	68 41 d8 01 c0       	push   0xc001d841
c0007531:	6a 20                	push   0x20
c0007533:	53                   	push   ebx
c0007534:	e8 4b fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007539:	6a 00                	push   0x0
c000753b:	68 2c d8 01 c0       	push   0xc001d82c
c0007540:	6a 21                	push   0x21
c0007542:	53                   	push   ebx
c0007543:	e8 3c fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007548:	83 c4 20             	add    esp,0x20
c000754b:	6a 00                	push   0x0
c000754d:	68 33 d8 01 c0       	push   0xc001d833
c0007552:	6a 22                	push   0x22
c0007554:	53                   	push   ebx
c0007555:	e8 2a fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c000755a:	6a 00                	push   0x0
c000755c:	68 aa d7 01 c0       	push   0xc001d7aa
c0007561:	6a 23                	push   0x23
c0007563:	53                   	push   ebx
c0007564:	e8 1b fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007569:	83 c4 20             	add    esp,0x20
c000756c:	6a 00                	push   0x0
c000756e:	68 b4 d7 01 c0       	push   0xc001d7b4
c0007573:	6a 24                	push   0x24
c0007575:	53                   	push   ebx
c0007576:	e8 09 fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c000757b:	6a 00                	push   0x0
c000757d:	68 be d7 01 c0       	push   0xc001d7be
c0007582:	6a 25                	push   0x25
c0007584:	53                   	push   ebx
c0007585:	e8 fa fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c000758a:	83 c4 20             	add    esp,0x20
c000758d:	6a 00                	push   0x0
c000758f:	68 c8 d7 01 c0       	push   0xc001d7c8
c0007594:	6a 26                	push   0x26
c0007596:	53                   	push   ebx
c0007597:	e8 e8 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c000759c:	6a 00                	push   0x0
c000759e:	68 d2 d7 01 c0       	push   0xc001d7d2
c00075a3:	6a 27                	push   0x27
c00075a5:	53                   	push   ebx
c00075a6:	e8 d9 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00075ab:	83 c4 20             	add    esp,0x20
c00075ae:	6a 00                	push   0x0
c00075b0:	68 dc d7 01 c0       	push   0xc001d7dc
c00075b5:	6a 28                	push   0x28
c00075b7:	53                   	push   ebx
c00075b8:	e8 c7 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00075bd:	6a 00                	push   0x0
c00075bf:	68 e6 d7 01 c0       	push   0xc001d7e6
c00075c4:	6a 29                	push   0x29
c00075c6:	53                   	push   ebx
c00075c7:	e8 b8 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00075cc:	83 c4 20             	add    esp,0x20
c00075cf:	6a 00                	push   0x0
c00075d1:	68 f0 d7 01 c0       	push   0xc001d7f0
c00075d6:	6a 2a                	push   0x2a
c00075d8:	53                   	push   ebx
c00075d9:	e8 a6 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00075de:	6a 00                	push   0x0
c00075e0:	68 fa d7 01 c0       	push   0xc001d7fa
c00075e5:	6a 2b                	push   0x2b
c00075e7:	53                   	push   ebx
c00075e8:	e8 97 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00075ed:	83 c4 20             	add    esp,0x20
c00075f0:	6a 00                	push   0x0
c00075f2:	68 04 d8 01 c0       	push   0xc001d804
c00075f7:	6a 2c                	push   0x2c
c00075f9:	53                   	push   ebx
c00075fa:	e8 85 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00075ff:	6a 00                	push   0x0
c0007601:	68 0e d8 01 c0       	push   0xc001d80e
c0007606:	6a 2d                	push   0x2d
c0007608:	53                   	push   ebx
c0007609:	e8 76 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c000760e:	83 c4 20             	add    esp,0x20
c0007611:	6a 00                	push   0x0
c0007613:	68 18 d8 01 c0       	push   0xc001d818
c0007618:	6a 2e                	push   0x2e
c000761a:	53                   	push   ebx
c000761b:	e8 64 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007620:	6a 00                	push   0x0
c0007622:	68 22 d8 01 c0       	push   0xc001d822
c0007627:	6a 2f                	push   0x2f
c0007629:	53                   	push   ebx
c000762a:	e8 55 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c000762f:	83 c4 20             	add    esp,0x20
c0007632:	6a 00                	push   0x0
c0007634:	68 7c d9 01 c0       	push   0xc001d97c
c0007639:	6a 30                	push   0x30
c000763b:	53                   	push   ebx
c000763c:	e8 43 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007641:	6a 00                	push   0x0
c0007643:	68 86 d9 01 c0       	push   0xc001d986
c0007648:	6a 31                	push   0x31
c000764a:	53                   	push   ebx
c000764b:	e8 34 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007650:	83 c4 20             	add    esp,0x20
c0007653:	6a 00                	push   0x0
c0007655:	68 90 d9 01 c0       	push   0xc001d990
c000765a:	6a 32                	push   0x32
c000765c:	53                   	push   ebx
c000765d:	e8 22 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007662:	6a 00                	push   0x0
c0007664:	68 9a d9 01 c0       	push   0xc001d99a
c0007669:	6a 33                	push   0x33
c000766b:	53                   	push   ebx
c000766c:	e8 13 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007671:	83 c4 20             	add    esp,0x20
c0007674:	6a 00                	push   0x0
c0007676:	68 a4 d9 01 c0       	push   0xc001d9a4
c000767b:	6a 34                	push   0x34
c000767d:	53                   	push   ebx
c000767e:	e8 01 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007683:	6a 00                	push   0x0
c0007685:	68 ae d9 01 c0       	push   0xc001d9ae
c000768a:	6a 35                	push   0x35
c000768c:	53                   	push   ebx
c000768d:	e8 f2 fc ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007692:	83 c4 20             	add    esp,0x20
c0007695:	6a 00                	push   0x0
c0007697:	68 b8 d9 01 c0       	push   0xc001d9b8
c000769c:	6a 36                	push   0x36
c000769e:	53                   	push   ebx
c000769f:	e8 e0 fc ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00076a4:	6a 00                	push   0x0
c00076a6:	68 c2 d9 01 c0       	push   0xc001d9c2
c00076ab:	6a 37                	push   0x37
c00076ad:	53                   	push   ebx
c00076ae:	e8 d1 fc ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00076b3:	83 c4 1c             	add    esp,0x1c
c00076b6:	6a 03                	push   0x3
c00076b8:	6a 02                	push   0x2
c00076ba:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c00076c0:	e8 4b 24 00 00       	call   c0009b10 <VAS::allocatePages(int, int)>
c00076c5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00076cc:	89 c6                	mov    esi,eax
c00076ce:	e8 92 01 00 00       	call   c0007865 <malloc>
c00076d3:	81 c6 00 20 00 00    	add    esi,0x2000
c00076d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00076dc:	89 c7                	mov    edi,eax
c00076de:	e8 a9 15 00 00       	call   c0008c8c <TSS::TSS()>
c00076e3:	83 c4 0c             	add    esp,0xc
c00076e6:	68 36 d7 01 c0       	push   0xc001d736
c00076eb:	56                   	push   esi
c00076ec:	57                   	push   edi
c00076ed:	e8 de 15 00 00       	call   c0008cd0 <TSS::setup(unsigned long, unsigned long)>
c00076f2:	89 c6                	mov    esi,eax
c00076f4:	58                   	pop    eax
c00076f5:	5a                   	pop    edx
c00076f6:	6a 00                	push   0x0
c00076f8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00076fc:	50                   	push   eax
c00076fd:	e8 d6 fb ff ff       	call   c00072d8 <IDTEntry::IDTEntry(bool)>
c0007702:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007706:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000770b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007712:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007718:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000771c:	80 ce 05             	or     dh,0x5
c000771f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007722:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007726:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000772a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000772d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007730:	e8 87 fc ff ff       	call   c00073bc <IDT::flush()>
c0007735:	83 c4 20             	add    esp,0x20
c0007738:	5b                   	pop    ebx
c0007739:	5e                   	pop    esi
c000773a:	5f                   	pop    edi
c000773b:	c3                   	ret    

c000773c <sbrk>:
c000773c:	55                   	push   ebp
c000773d:	57                   	push   edi
c000773e:	56                   	push   esi
c000773f:	53                   	push   ebx
c0007740:	83 ec 1c             	sub    esp,0x1c
c0007743:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007747:	85 c0                	test   eax,eax
c0007749:	74 5f                	je     c00077aa <sbrk+0x6e>
c000774b:	78 64                	js     c00077b1 <sbrk+0x75>
c000774d:	8b 15 cc 15 02 c0    	mov    edx,DWORD PTR ds:0xc00215cc
c0007753:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007757:	05 ff 0f 00 00       	add    eax,0xfff
c000775c:	89 c5                	mov    ebp,eax
c000775e:	78 69                	js     c00077c9 <sbrk+0x8d>
c0007760:	c1 fd 0c             	sar    ebp,0xc
c0007763:	bb 00 00 00 00       	mov    ebx,0x0
c0007768:	8b 35 b0 3f 02 c0    	mov    esi,DWORD PTR ds:0xc0023fb0
c000776e:	8b 3d cc 15 02 c0    	mov    edi,DWORD PTR ds:0xc00215cc
c0007774:	e8 c8 03 00 00       	call   c0007b41 <Phys::allocatePage()>
c0007779:	68 01 04 00 00       	push   0x401
c000777e:	57                   	push   edi
c000777f:	50                   	push   eax
c0007780:	56                   	push   esi
c0007781:	e8 86 22 00 00       	call   c0009a0c <VAS::mapPage(unsigned long, unsigned long, int)>
c0007786:	81 05 cc 15 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00215cc,0x1000
c0007790:	43                   	inc    ebx
c0007791:	83 c4 10             	add    esp,0x10
c0007794:	39 dd                	cmp    ebp,ebx
c0007796:	75 d0                	jne    c0007768 <sbrk+0x2c>
c0007798:	0f 20 d8             	mov    eax,cr3
c000779b:	0f 22 d8             	mov    cr3,eax
c000779e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00077a2:	83 c4 1c             	add    esp,0x1c
c00077a5:	5b                   	pop    ebx
c00077a6:	5e                   	pop    esi
c00077a7:	5f                   	pop    edi
c00077a8:	5d                   	pop    ebp
c00077a9:	c3                   	ret    
c00077aa:	a1 cc 15 02 c0       	mov    eax,ds:0xc00215cc
c00077af:	eb f1                	jmp    c00077a2 <sbrk+0x66>
c00077b1:	83 ec 08             	sub    esp,0x8
c00077b4:	50                   	push   eax
c00077b5:	68 d8 f2 01 c0       	push   0xc001f2d8
c00077ba:	e8 47 2e 00 00       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c00077bf:	83 c4 10             	add    esp,0x10
c00077c2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00077c7:	eb d9                	jmp    c00077a2 <sbrk+0x66>
c00077c9:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c00077cf:	eb 8f                	jmp    c0007760 <sbrk+0x24>

c00077d1 <mmap>:
c00077d1:	83 ec 18             	sub    esp,0x18
c00077d4:	68 08 f3 01 c0       	push   0xc001f308
c00077d9:	e8 e9 8b 00 00       	call   c00103c7 <KePanic(char const*)>
c00077de:	b8 00 00 00 00       	mov    eax,0x0
c00077e3:	83 c4 1c             	add    esp,0x1c
c00077e6:	c3                   	ret    

c00077e7 <munmap>:
c00077e7:	83 ec 18             	sub    esp,0x18
c00077ea:	68 0d f3 01 c0       	push   0xc001f30d
c00077ef:	e8 d3 8b 00 00       	call   c00103c7 <KePanic(char const*)>
c00077f4:	b8 00 00 00 00       	mov    eax,0x0
c00077f9:	83 c4 1c             	add    esp,0x1c
c00077fc:	c3                   	ret    

c00077fd <liballoc_lock()>:
c00077fd:	fa                   	cli    
c00077fe:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0007804:	b8 00 00 00 00       	mov    eax,0x0
c0007809:	c3                   	ret    

c000780a <liballoc_unlock()>:
c000780a:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000780f:	48                   	dec    eax
c0007810:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0007815:	75 01                	jne    c0007818 <liballoc_unlock()+0xe>
c0007817:	fb                   	sti    
c0007818:	b8 00 00 00 00       	mov    eax,0x0
c000781d:	c3                   	ret    

c000781e <liballoc_alloc(int)>:
c000781e:	83 ec 10             	sub    esp,0x10
c0007821:	6a 01                	push   0x1
c0007823:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007827:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c000782d:	e8 de 22 00 00       	call   c0009b10 <VAS::allocatePages(int, int)>
c0007832:	83 c4 1c             	add    esp,0x1c
c0007835:	c3                   	ret    

c0007836 <liballoc_free(void*, int)>:
c0007836:	83 ec 14             	sub    esp,0x14
c0007839:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000783d:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c0007843:	e8 1a 1f 00 00       	call   c0009762 <VAS::freeAllocatedPages(unsigned long)>
c0007848:	b8 00 00 00 00       	mov    eax,0x0
c000784d:	83 c4 1c             	add    esp,0x1c
c0007850:	c3                   	ret    

c0007851 <realloc>:
c0007851:	83 ec 14             	sub    esp,0x14
c0007854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007858:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000785c:	e8 c0 9c ff ff       	call   c0001521 <dlrealloc>
c0007861:	83 c4 1c             	add    esp,0x1c
c0007864:	c3                   	ret    

c0007865 <malloc>:
c0007865:	83 ec 18             	sub    esp,0x18
c0007868:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000786c:	e8 73 97 ff ff       	call   c0000fe4 <dlmalloc>
c0007871:	83 c4 1c             	add    esp,0x1c
c0007874:	c3                   	ret    

c0007875 <free>:
c0007875:	83 ec 18             	sub    esp,0x18
c0007878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000787c:	e8 08 94 ff ff       	call   c0000c89 <dlfree>
c0007881:	83 c4 1c             	add    esp,0x1c
c0007884:	c3                   	ret    

c0007885 <rfree>:
c0007885:	83 ec 18             	sub    esp,0x18
c0007888:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000788c:	e8 f8 93 ff ff       	call   c0000c89 <dlfree>
c0007891:	83 c4 1c             	add    esp,0x1c
c0007894:	c3                   	ret    

c0007895 <calloc>:
c0007895:	56                   	push   esi
c0007896:	53                   	push   ebx
c0007897:	83 ec 10             	sub    esp,0x10
c000789a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000789e:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00078a3:	53                   	push   ebx
c00078a4:	e8 bc ff ff ff       	call   c0007865 <malloc>
c00078a9:	89 c6                	mov    esi,eax
c00078ab:	83 c4 0c             	add    esp,0xc
c00078ae:	53                   	push   ebx
c00078af:	6a 00                	push   0x0
c00078b1:	50                   	push   eax
c00078b2:	e8 09 8c ff ff       	call   c00004c0 <memset>
c00078b7:	89 f0                	mov    eax,esi
c00078b9:	83 c4 14             	add    esp,0x14
c00078bc:	5b                   	pop    ebx
c00078bd:	5e                   	pop    esi
c00078be:	c3                   	ret    

c00078bf <KeEntryPoint>:
c00078bf:	57                   	push   edi
c00078c0:	bf f9 03 00 00       	mov    edi,0x3f9
c00078c5:	56                   	push   esi
c00078c6:	89 fa                	mov    edx,edi
c00078c8:	53                   	push   ebx
c00078c9:	31 f6                	xor    esi,esi
c00078cb:	83 ec 2c             	sub    esp,0x2c
c00078ce:	a1 00 05 00 00       	mov    eax,ds:0x500
c00078d3:	a3 d0 3e 02 c0       	mov    ds:0xc0023ed0,eax
c00078d8:	89 f0                	mov    eax,esi
c00078da:	ee                   	out    dx,al
c00078db:	bb fb 03 00 00       	mov    ebx,0x3fb
c00078e0:	b0 80                	mov    al,0x80
c00078e2:	89 da                	mov    edx,ebx
c00078e4:	ee                   	out    dx,al
c00078e5:	b1 03                	mov    cl,0x3
c00078e7:	ba f8 03 00 00       	mov    edx,0x3f8
c00078ec:	88 c8                	mov    al,cl
c00078ee:	ee                   	out    dx,al
c00078ef:	89 f0                	mov    eax,esi
c00078f1:	89 fa                	mov    edx,edi
c00078f3:	ee                   	out    dx,al
c00078f4:	88 c8                	mov    al,cl
c00078f6:	89 da                	mov    edx,ebx
c00078f8:	ee                   	out    dx,al
c00078f9:	b0 c7                	mov    al,0xc7
c00078fb:	ba fa 03 00 00       	mov    edx,0x3fa
c0007900:	ee                   	out    dx,al
c0007901:	b0 0b                	mov    al,0xb
c0007903:	ba fc 03 00 00       	mov    edx,0x3fc
c0007908:	ee                   	out    dx,al
c0007909:	68 14 f3 01 c0       	push   0xc001f314
c000790e:	e8 f3 2c 00 00       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0007913:	e8 c9 83 00 00       	call   c000fce1 <KeDisplaySplashScreen()>
c0007918:	a1 24 05 00 00       	mov    eax,ds:0x524
c000791d:	05 ff 0f 00 00       	add    eax,0xfff
c0007922:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007927:	89 04 24             	mov    DWORD PTR [esp],eax
c000792a:	e8 64 03 00 00       	call   c0007c93 <Phys::physicalMemorySetup(unsigned int)>
c000792f:	e8 d4 1b 00 00       	call   c0009508 <Virt::virtualMemorySetup()>
c0007934:	58                   	pop    eax
c0007935:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007939:	53                   	push   ebx
c000793a:	e8 a1 1e 00 00       	call   c00097e0 <VAS::VAS()>
c000793f:	89 1d b0 3f 02 c0    	mov    DWORD PTR ds:0xc0023fb0,ebx
c0007945:	e8 30 66 01 00       	call   c001df7a <_init>
c000794a:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007951:	e8 0f ff ff ff       	call   c0007865 <malloc>
c0007956:	89 04 24             	mov    DWORD PTR [esp],eax
c0007959:	89 c6                	mov    esi,eax
c000795b:	e8 7c f2 ff ff       	call   c0006bdc <Computer::Computer()>
c0007960:	6a 00                	push   0x0
c0007962:	89 35 b8 3e 02 c0    	mov    DWORD PTR ds:0xc0023eb8,esi
c0007968:	6a 00                	push   0x0
c000796a:	6a 00                	push   0x0
c000796c:	56                   	push   esi
c000796d:	e8 10 f6 ff ff       	call   c0006f82 <Computer::open(int, int, void*)>
c0007972:	83 c4 14             	add    esp,0x14
c0007975:	53                   	push   ebx
c0007976:	e8 2d 1f 00 00       	call   c00098a8 <VAS::~VAS()>
c000797b:	83 c4 30             	add    esp,0x30
c000797e:	5b                   	pop    ebx
c000797f:	5e                   	pop    esi
c0007980:	5f                   	pop    edi
c0007981:	c3                   	ret    

c0007982 <Phys::allocateDMA(unsigned long)>:
c0007982:	55                   	push   ebp
c0007983:	31 ed                	xor    ebp,ebp
c0007985:	57                   	push   edi
c0007986:	56                   	push   esi
c0007987:	53                   	push   ebx
c0007988:	31 db                	xor    ebx,ebx
c000798a:	83 ec 1c             	sub    esp,0x1c
c000798d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007991:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007999:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000799f:	31 c0                	xor    eax,eax
c00079a1:	c1 ef 0c             	shr    edi,0xc
c00079a4:	eb 19                	jmp    c00079bf <Phys::allocateDMA(unsigned long)+0x3d>
c00079a6:	85 c0                	test   eax,eax
c00079a8:	75 06                	jne    c00079b0 <Phys::allocateDMA(unsigned long)+0x2e>
c00079aa:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00079ae:	89 dd                	mov    ebp,ebx
c00079b0:	8d 70 01             	lea    esi,[eax+0x1]
c00079b3:	39 f7                	cmp    edi,esi
c00079b5:	74 33                	je     c00079ea <Phys::allocateDMA(unsigned long)+0x68>
c00079b7:	89 f0                	mov    eax,esi
c00079b9:	43                   	inc    ebx
c00079ba:	83 fb 0f             	cmp    ebx,0xf
c00079bd:	7f 11                	jg     c00079d0 <Phys::allocateDMA(unsigned long)+0x4e>
c00079bf:	80 bb ec 3e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdc114],0x0
c00079c6:	74 de                	je     c00079a6 <Phys::allocateDMA(unsigned long)+0x24>
c00079c8:	31 c0                	xor    eax,eax
c00079ca:	43                   	inc    ebx
c00079cb:	83 fb 0f             	cmp    ebx,0xf
c00079ce:	7e ef                	jle    c00079bf <Phys::allocateDMA(unsigned long)+0x3d>
c00079d0:	83 ec 0c             	sub    esp,0xc
c00079d3:	68 2c f3 01 c0       	push   0xc001f32c
c00079d8:	e8 ea 89 00 00       	call   c00103c7 <KePanic(char const*)>
c00079dd:	83 c4 10             	add    esp,0x10
c00079e0:	31 c0                	xor    eax,eax
c00079e2:	83 c4 1c             	add    esp,0x1c
c00079e5:	5b                   	pop    ebx
c00079e6:	5e                   	pop    esi
c00079e7:	5f                   	pop    edi
c00079e8:	5d                   	pop    ebp
c00079e9:	c3                   	ret    
c00079ea:	89 e9                	mov    ecx,ebp
c00079ec:	c1 f9 04             	sar    ecx,0x4
c00079ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00079f3:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c00079f7:	89 ca                	mov    edx,ecx
c00079f9:	4a                   	dec    edx
c00079fa:	79 03                	jns    c00079ff <Phys::allocateDMA(unsigned long)+0x7d>
c00079fc:	8d 51 0e             	lea    edx,[ecx+0xe]
c00079ff:	c1 fa 04             	sar    edx,0x4
c0007a02:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007a06:	74 08                	je     c0007a10 <Phys::allocateDMA(unsigned long)+0x8e>
c0007a08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007a0c:	31 c0                	xor    eax,eax
c0007a0e:	eb ba                	jmp    c00079ca <Phys::allocateDMA(unsigned long)+0x48>
c0007a10:	85 f6                	test   esi,esi
c0007a12:	74 15                	je     c0007a29 <Phys::allocateDMA(unsigned long)+0xa7>
c0007a14:	8d 95 ec 3e 02 c0    	lea    edx,[ebp-0x3ffdc114]
c0007a1a:	8d 84 05 ed 3e 02 c0 	lea    eax,[ebp+eax*1-0x3ffdc113]
c0007a21:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007a24:	42                   	inc    edx
c0007a25:	39 d0                	cmp    eax,edx
c0007a27:	75 f8                	jne    c0007a21 <Phys::allocateDMA(unsigned long)+0x9f>
c0007a29:	01 3d e4 3e 02 c0    	add    DWORD PTR ds:0xc0023ee4,edi
c0007a2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a33:	85 c0                	test   eax,eax
c0007a35:	74 17                	je     c0007a4e <Phys::allocateDMA(unsigned long)+0xcc>
c0007a37:	83 ec 0c             	sub    esp,0xc
c0007a3a:	68 2c f3 01 c0       	push   0xc001f32c
c0007a3f:	e8 83 89 00 00       	call   c00103c7 <KePanic(char const*)>
c0007a44:	83 c4 10             	add    esp,0x10
c0007a47:	89 f0                	mov    eax,esi
c0007a49:	e9 6b ff ff ff       	jmp    c00079b9 <Phys::allocateDMA(unsigned long)+0x37>
c0007a4e:	c1 e5 0c             	shl    ebp,0xc
c0007a51:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007a57:	eb 89                	jmp    c00079e2 <Phys::allocateDMA(unsigned long)+0x60>

c0007a59 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007a59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a5d:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007a63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a67:	c1 ea 0c             	shr    edx,0xc
c0007a6a:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007a6f:	29 15 e4 3e 02 c0    	sub    DWORD PTR ds:0xc0023ee4,edx
c0007a75:	c1 e8 0c             	shr    eax,0xc
c0007a78:	85 d2                	test   edx,edx
c0007a7a:	74 0f                	je     c0007a8b <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0007a7c:	05 ec 3e 02 c0       	add    eax,0xc0023eec
c0007a81:	01 c2                	add    edx,eax
c0007a83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007a86:	40                   	inc    eax
c0007a87:	39 d0                	cmp    eax,edx
c0007a89:	75 f8                	jne    c0007a83 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0007a8b:	c3                   	ret    

c0007a8c <Phys::setPageState(unsigned long, bool)>:
c0007a8c:	56                   	push   esi
c0007a8d:	ba 01 00 00 00       	mov    edx,0x1
c0007a92:	53                   	push   ebx
c0007a93:	8b 35 d0 15 02 c0    	mov    esi,DWORD PTR ds:0xc00215d0
c0007a99:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007a9d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007aa1:	89 c8                	mov    eax,ecx
c0007aa3:	83 e1 07             	and    ecx,0x7
c0007aa6:	c1 e8 03             	shr    eax,0x3
c0007aa9:	d3 e3                	shl    ebx,cl
c0007aab:	01 c6                	add    esi,eax
c0007aad:	d3 e2                	shl    edx,cl
c0007aaf:	f7 d2                	not    edx
c0007ab1:	20 16                	and    BYTE PTR [esi],dl
c0007ab3:	03 05 d0 15 02 c0    	add    eax,DWORD PTR ds:0xc00215d0
c0007ab9:	08 18                	or     BYTE PTR [eax],bl
c0007abb:	5b                   	pop    ebx
c0007abc:	5e                   	pop    esi
c0007abd:	c3                   	ret    

c0007abe <Phys::getPageState(unsigned long)>:
c0007abe:	53                   	push   ebx
c0007abf:	8b 15 d0 15 02 c0    	mov    edx,DWORD PTR ds:0xc00215d0
c0007ac5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007ac9:	31 db                	xor    ebx,ebx
c0007acb:	89 c8                	mov    eax,ecx
c0007acd:	83 e1 07             	and    ecx,0x7
c0007ad0:	c1 e8 03             	shr    eax,0x3
c0007ad3:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007ad6:	89 d8                	mov    eax,ebx
c0007ad8:	5b                   	pop    ebx
c0007ad9:	d3 f8                	sar    eax,cl
c0007adb:	83 e0 01             	and    eax,0x1
c0007ade:	c3                   	ret    

c0007adf <Phys::freePage(unsigned long)>:
c0007adf:	53                   	push   ebx
c0007ae0:	83 ec 08             	sub    esp,0x8
c0007ae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ae7:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007aed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007af3:	76 3a                	jbe    c0007b2f <Phys::freePage(unsigned long)+0x50>
c0007af5:	c1 e8 0c             	shr    eax,0xc
c0007af8:	50                   	push   eax
c0007af9:	89 c3                	mov    ebx,eax
c0007afb:	e8 be ff ff ff       	call   c0007abe <Phys::getPageState(unsigned long)>
c0007b00:	5a                   	pop    edx
c0007b01:	84 c0                	test   al,al
c0007b03:	74 19                	je     c0007b1e <Phys::freePage(unsigned long)+0x3f>
c0007b05:	83 ec 08             	sub    esp,0x8
c0007b08:	ff 0d e4 3e 02 c0    	dec    DWORD PTR ds:0xc0023ee4
c0007b0e:	6a 00                	push   0x0
c0007b10:	53                   	push   ebx
c0007b11:	e8 76 ff ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007b16:	83 c4 10             	add    esp,0x10
c0007b19:	83 c4 08             	add    esp,0x8
c0007b1c:	5b                   	pop    ebx
c0007b1d:	c3                   	ret    
c0007b1e:	c7 44 24 10 d1 f3 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f3d1
c0007b26:	83 c4 08             	add    esp,0x8
c0007b29:	5b                   	pop    ebx
c0007b2a:	e9 98 88 00 00       	jmp    c00103c7 <KePanic(char const*)>
c0007b2f:	68 00 10 00 00       	push   0x1000
c0007b34:	50                   	push   eax
c0007b35:	e8 1f ff ff ff       	call   c0007a59 <Phys::freeDMA(unsigned long, unsigned long)>
c0007b3a:	59                   	pop    ecx
c0007b3b:	5b                   	pop    ebx
c0007b3c:	83 c4 08             	add    esp,0x8
c0007b3f:	5b                   	pop    ebx
c0007b40:	c3                   	ret    

c0007b41 <Phys::allocatePage()>:
c0007b41:	56                   	push   esi
c0007b42:	53                   	push   ebx
c0007b43:	83 ec 14             	sub    esp,0x14
c0007b46:	8b 35 d8 3e 02 c0    	mov    esi,DWORD PTR ds:0xc0023ed8
c0007b4c:	89 f3                	mov    ebx,esi
c0007b4e:	eb 0a                	jmp    c0007b5a <Phys::allocatePage()+0x19>
c0007b50:	89 1d d8 3e 02 c0    	mov    DWORD PTR ds:0xc0023ed8,ebx
c0007b56:	39 de                	cmp    esi,ebx
c0007b58:	74 24                	je     c0007b7e <Phys::allocatePage()+0x3d>
c0007b5a:	53                   	push   ebx
c0007b5b:	e8 5e ff ff ff       	call   c0007abe <Phys::getPageState(unsigned long)>
c0007b60:	5a                   	pop    edx
c0007b61:	84 c0                	test   al,al
c0007b63:	74 5f                	je     c0007bc4 <Phys::allocatePage()+0x83>
c0007b65:	43                   	inc    ebx
c0007b66:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007b6c:	75 e2                	jne    c0007b50 <Phys::allocatePage()+0xf>
c0007b6e:	31 db                	xor    ebx,ebx
c0007b70:	c7 05 d8 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ed8,0x0
c0007b7a:	39 de                	cmp    esi,ebx
c0007b7c:	75 dc                	jne    c0007b5a <Phys::allocatePage()+0x19>
c0007b7e:	83 ec 0c             	sub    esp,0xc
c0007b81:	80 35 fc 3e 02 c0 01 	xor    BYTE PTR ds:0xc0023efc,0x1
c0007b88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007b8d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007b90:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007b96:	50                   	push   eax
c0007b97:	e8 4e 27 00 00       	call   c000a2ea <VAS::scanForEviction()>
c0007b9c:	83 c4 10             	add    esp,0x10
c0007b9f:	85 c0                	test   eax,eax
c0007ba1:	75 3f                	jne    c0007be2 <Phys::allocatePage()+0xa1>
c0007ba3:	83 ec 0c             	sub    esp,0xc
c0007ba6:	68 54 f3 01 c0       	push   0xc001f354
c0007bab:	e8 17 88 00 00       	call   c00103c7 <KePanic(char const*)>
c0007bb0:	83 c4 10             	add    esp,0x10
c0007bb3:	8b 1d d8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023ed8
c0007bb9:	53                   	push   ebx
c0007bba:	e8 ff fe ff ff       	call   c0007abe <Phys::getPageState(unsigned long)>
c0007bbf:	5a                   	pop    edx
c0007bc0:	84 c0                	test   al,al
c0007bc2:	75 a1                	jne    c0007b65 <Phys::allocatePage()+0x24>
c0007bc4:	6a 01                	push   0x1
c0007bc6:	53                   	push   ebx
c0007bc7:	e8 c0 fe ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007bcc:	a1 d8 3e 02 c0       	mov    eax,ds:0xc0023ed8
c0007bd1:	5a                   	pop    edx
c0007bd2:	ff 05 e4 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee4
c0007bd8:	c1 e0 0c             	shl    eax,0xc
c0007bdb:	59                   	pop    ecx
c0007bdc:	83 c4 14             	add    esp,0x14
c0007bdf:	5b                   	pop    ebx
c0007be0:	5e                   	pop    esi
c0007be1:	c3                   	ret    
c0007be2:	83 ec 08             	sub    esp,0x8
c0007be5:	89 c2                	mov    edx,eax
c0007be7:	6a 01                	push   0x1
c0007be9:	c1 ea 0c             	shr    edx,0xc
c0007bec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bf0:	52                   	push   edx
c0007bf1:	e8 96 fe ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007bf6:	83 c4 10             	add    esp,0x10
c0007bf9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bfd:	eb dd                	jmp    c0007bdc <Phys::allocatePage()+0x9b>

c0007bff <Phys::allocateContiguousPages(int)>:
c0007bff:	57                   	push   edi
c0007c00:	56                   	push   esi
c0007c01:	53                   	push   ebx
c0007c02:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c06:	fa                   	cli    
c0007c07:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0007c0d:	31 db                	xor    ebx,ebx
c0007c0f:	85 db                	test   ebx,ebx
c0007c11:	75 11                	jne    c0007c24 <Phys::allocateContiguousPages(int)+0x25>
c0007c13:	e8 29 ff ff ff       	call   c0007b41 <Phys::allocatePage()>
c0007c18:	83 fe 01             	cmp    esi,0x1
c0007c1b:	89 c7                	mov    edi,eax
c0007c1d:	74 21                	je     c0007c40 <Phys::allocateContiguousPages(int)+0x41>
c0007c1f:	bb 01 00 00 00       	mov    ebx,0x1
c0007c24:	e8 18 ff ff ff       	call   c0007b41 <Phys::allocatePage()>
c0007c29:	89 da                	mov    edx,ebx
c0007c2b:	c1 e2 0c             	shl    edx,0xc
c0007c2e:	01 fa                	add    edx,edi
c0007c30:	39 c2                	cmp    edx,eax
c0007c32:	74 20                	je     c0007c54 <Phys::allocateContiguousPages(int)+0x55>
c0007c34:	bb 01 00 00 00       	mov    ebx,0x1
c0007c39:	89 c7                	mov    edi,eax
c0007c3b:	83 fe 01             	cmp    esi,0x1
c0007c3e:	75 e4                	jne    c0007c24 <Phys::allocateContiguousPages(int)+0x25>
c0007c40:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0007c45:	48                   	dec    eax
c0007c46:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0007c4b:	75 01                	jne    c0007c4e <Phys::allocateContiguousPages(int)+0x4f>
c0007c4d:	fb                   	sti    
c0007c4e:	89 f8                	mov    eax,edi
c0007c50:	5b                   	pop    ebx
c0007c51:	5e                   	pop    esi
c0007c52:	5f                   	pop    edi
c0007c53:	c3                   	ret    
c0007c54:	43                   	inc    ebx
c0007c55:	39 f3                	cmp    ebx,esi
c0007c57:	75 b6                	jne    c0007c0f <Phys::allocateContiguousPages(int)+0x10>
c0007c59:	eb e5                	jmp    c0007c40 <Phys::allocateContiguousPages(int)+0x41>

c0007c5b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007c5b:	56                   	push   esi
c0007c5c:	53                   	push   ebx
c0007c5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007c61:	39 1d dc 3e 02 c0    	cmp    DWORD PTR ds:0xc0023edc,ebx
c0007c67:	73 06                	jae    c0007c6f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007c69:	89 1d dc 3e 02 c0    	mov    DWORD PTR ds:0xc0023edc,ebx
c0007c6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c73:	c1 eb 0c             	shr    ebx,0xc
c0007c76:	c1 e8 0c             	shr    eax,0xc
c0007c79:	39 d8                	cmp    eax,ebx
c0007c7b:	73 13                	jae    c0007c90 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007c7d:	6a 00                	push   0x0
c0007c7f:	8d 70 01             	lea    esi,[eax+0x1]
c0007c82:	50                   	push   eax
c0007c83:	e8 04 fe ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007c88:	5a                   	pop    edx
c0007c89:	89 f0                	mov    eax,esi
c0007c8b:	59                   	pop    ecx
c0007c8c:	39 f3                	cmp    ebx,esi
c0007c8e:	75 ed                	jne    c0007c7d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007c90:	5b                   	pop    ebx
c0007c91:	5e                   	pop    esi
c0007c92:	c3                   	ret    

c0007c93 <Phys::physicalMemorySetup(unsigned int)>:
c0007c93:	55                   	push   ebp
c0007c94:	57                   	push   edi
c0007c95:	56                   	push   esi
c0007c96:	53                   	push   ebx
c0007c97:	31 db                	xor    ebx,ebx
c0007c99:	83 ec 40             	sub    esp,0x40
c0007c9c:	6a 10                	push   0x10
c0007c9e:	6a 00                	push   0x0
c0007ca0:	68 ec 3e 02 c0       	push   0xc0023eec
c0007ca5:	e8 16 88 ff ff       	call   c00004c0 <memset>
c0007caa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007cae:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007cb3:	05 00 10 00 00       	add    eax,0x1000
c0007cb8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007cbc:	5a                   	pop    edx
c0007cbd:	59                   	pop    ecx
c0007cbe:	50                   	push   eax
c0007cbf:	68 e7 f3 01 c0       	push   0xc001f3e7
c0007cc4:	e8 3d 29 00 00       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0007cc9:	83 c4 10             	add    esp,0x10
c0007ccc:	83 ec 08             	sub    esp,0x8
c0007ccf:	6a 01                	push   0x1
c0007cd1:	53                   	push   ebx
c0007cd2:	43                   	inc    ebx
c0007cd3:	e8 b4 fd ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007cd8:	83 c4 10             	add    esp,0x10
c0007cdb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007ce1:	75 e9                	jne    c0007ccc <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007ce3:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007ce9:	66 85 c0             	test   ax,ax
c0007cec:	0f 84 97 01 00 00    	je     c0007e89 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007cf2:	89 c7                	mov    edi,eax
c0007cf4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007cfc:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007d02:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007d07:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007d0b:	eb 15                	jmp    c0007d22 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007d0d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007d11:	83 c3 18             	add    ebx,0x18
c0007d14:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d18:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007d1c:	0f 84 77 01 00 00    	je     c0007e99 <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007d22:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007d25:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007d28:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007d2b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007d2f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007d33:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007d35:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007d38:	01 f0                	add    eax,esi
c0007d3a:	55                   	push   ebp
c0007d3b:	11 fa                	adc    edx,edi
c0007d3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007d41:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007d45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d49:	50                   	push   eax
c0007d4a:	56                   	push   esi
c0007d4b:	68 84 f3 01 c0       	push   0xc001f384
c0007d50:	e8 b1 28 00 00       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0007d55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007d59:	83 c4 10             	add    esp,0x10
c0007d5c:	09 f8                	or     eax,edi
c0007d5e:	0f 85 35 01 00 00    	jne    c0007e99 <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007d64:	4d                   	dec    ebp
c0007d65:	75 a6                	jne    c0007d0d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d67:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007d6b:	ba 00 00 08 00       	mov    edx,0x80000
c0007d70:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007d74:	39 f2                	cmp    edx,esi
c0007d76:	89 c1                	mov    ecx,eax
c0007d78:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007d80:	19 f9                	sbb    ecx,edi
c0007d82:	0f 82 a7 00 00 00    	jb     c0007e2f <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007d88:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007d8c:	89 c1                	mov    ecx,eax
c0007d8e:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007d92:	0f 83 97 00 00 00    	jae    c0007e2f <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007d98:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007d9d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007da1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007da5:	39 fa                	cmp    edx,edi
c0007da7:	19 e8                	sbb    eax,ebp
c0007da9:	0f 82 9a 01 00 00    	jb     c0007f49 <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007daf:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007db3:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007db7:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007dbd:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007dc2:	83 d5 ff             	adc    ebp,0xffffffff
c0007dc5:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007dc9:	31 c0                	xor    eax,eax
c0007dcb:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007dcf:	39 fa                	cmp    edx,edi
c0007dd1:	89 c1                	mov    ecx,eax
c0007dd3:	19 e9                	sbb    ecx,ebp
c0007dd5:	0f 83 32 ff ff ff    	jae    c0007d0d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007ddb:	be 00 00 08 00       	mov    esi,0x80000
c0007de0:	51                   	push   ecx
c0007de1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007de5:	57                   	push   edi
c0007de6:	56                   	push   esi
c0007de7:	68 a8 f3 01 c0       	push   0xc001f3a8
c0007dec:	e8 15 28 00 00       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0007df1:	5d                   	pop    ebp
c0007df2:	58                   	pop    eax
c0007df3:	57                   	push   edi
c0007df4:	56                   	push   esi
c0007df5:	e8 61 fe ff ff       	call   c0007c5b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007dfa:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dfe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e02:	83 c4 0c             	add    esp,0xc
c0007e05:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007e09:	03 05 e8 3e 02 c0    	add    eax,DWORD PTR ds:0xc0023ee8
c0007e0f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007e16:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007e1b:	52                   	push   edx
c0007e1c:	50                   	push   eax
c0007e1d:	68 0d f4 01 c0       	push   0xc001f40d
c0007e22:	e8 df 27 00 00       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0007e27:	83 c4 10             	add    esp,0x10
c0007e2a:	e9 de fe ff ff       	jmp    c0007d0d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007e2f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007e33:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007e37:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007e3b:	39 ea                	cmp    edx,ebp
c0007e3d:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007e41:	0f 82 c6 fe ff ff    	jb     c0007d0d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007e47:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007e4c:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007e50:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007e54:	0f 83 b3 fe ff ff    	jae    c0007d0d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007e5a:	39 ee                	cmp    esi,ebp
c0007e5c:	89 f8                	mov    eax,edi
c0007e5e:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007e62:	0f 83 78 ff ff ff    	jae    c0007de0 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007e68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e6c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007e70:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007e74:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007e78:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007e7c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e80:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007e84:	e9 57 ff ff ff       	jmp    c0007de0 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007e89:	83 ec 0c             	sub    esp,0xc
c0007e8c:	68 ff f3 01 c0       	push   0xc001f3ff
c0007e91:	e8 31 85 00 00       	call   c00103c7 <KePanic(char const*)>
c0007e96:	83 c4 10             	add    esp,0x10
c0007e99:	83 ec 08             	sub    esp,0x8
c0007e9c:	bb 60 00 00 00       	mov    ebx,0x60
c0007ea1:	6a 00                	push   0x0
c0007ea3:	6a 06                	push   0x6
c0007ea5:	e8 e2 fb ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007eaa:	58                   	pop    eax
c0007eab:	5a                   	pop    edx
c0007eac:	6a 00                	push   0x0
c0007eae:	6a 07                	push   0x7
c0007eb0:	e8 d7 fb ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007eb5:	83 05 e8 3e 02 c0 02 	add    DWORD PTR ds:0xc0023ee8,0x2
c0007ebc:	83 c4 10             	add    esp,0x10
c0007ebf:	83 ec 08             	sub    esp,0x8
c0007ec2:	6a 00                	push   0x0
c0007ec4:	53                   	push   ebx
c0007ec5:	43                   	inc    ebx
c0007ec6:	e8 c1 fb ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007ecb:	83 c4 10             	add    esp,0x10
c0007ece:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007ed4:	75 e9                	jne    c0007ebf <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007ed6:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0007edb:	bb 40 01 00 00       	mov    ebx,0x140
c0007ee0:	83 c0 20             	add    eax,0x20
c0007ee3:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007ee8:	eb 22                	jmp    c0007f0c <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007eea:	83 ec 08             	sub    esp,0x8
c0007eed:	6a 00                	push   0x0
c0007eef:	53                   	push   ebx
c0007ef0:	43                   	inc    ebx
c0007ef1:	e8 96 fb ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007ef6:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0007efb:	83 c4 10             	add    esp,0x10
c0007efe:	40                   	inc    eax
c0007eff:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007f05:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007f0a:	74 07                	je     c0007f13 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007f0c:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007f11:	7e d7                	jle    c0007eea <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007f13:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007f18:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007f1d:	7f 22                	jg     c0007f41 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007f1f:	83 ec 08             	sub    esp,0x8
c0007f22:	6a 00                	push   0x0
c0007f24:	53                   	push   ebx
c0007f25:	43                   	inc    ebx
c0007f26:	e8 61 fb ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007f2b:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0007f30:	83 c4 10             	add    esp,0x10
c0007f33:	40                   	inc    eax
c0007f34:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007f3a:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007f3f:	75 d7                	jne    c0007f18 <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007f41:	83 c4 3c             	add    esp,0x3c
c0007f44:	5b                   	pop    ebx
c0007f45:	5e                   	pop    esi
c0007f46:	5f                   	pop    edi
c0007f47:	5d                   	pop    ebp
c0007f48:	c3                   	ret    
c0007f49:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007f51:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007f59:	e9 51 fe ff ff       	jmp    c0007daf <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007f5e <Pipe::isAtty()>:
c0007f5e:	31 c0                	xor    eax,eax
c0007f60:	c3                   	ret    
c0007f61:	90                   	nop

c0007f62 <Pipe::~Pipe()>:
c0007f62:	83 ec 0c             	sub    esp,0xc
c0007f65:	ba 6c f4 01 c0       	mov    edx,0xc001f46c
c0007f6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f6e:	89 10                	mov    DWORD PTR [eax],edx
c0007f70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f74:	83 ec 0c             	sub    esp,0xc
c0007f77:	50                   	push   eax
c0007f78:	e8 6b 11 00 00       	call   c00090e8 <UnixFile::~UnixFile()>
c0007f7d:	83 c4 10             	add    esp,0x10
c0007f80:	90                   	nop
c0007f81:	83 c4 0c             	add    esp,0xc
c0007f84:	c3                   	ret    
c0007f85:	90                   	nop

c0007f86 <Pipe::~Pipe()>:
c0007f86:	83 ec 0c             	sub    esp,0xc
c0007f89:	83 ec 0c             	sub    esp,0xc
c0007f8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f90:	e8 cd ff ff ff       	call   c0007f62 <Pipe::~Pipe()>
c0007f95:	83 c4 10             	add    esp,0x10
c0007f98:	83 ec 08             	sub    esp,0x8
c0007f9b:	6a 20                	push   0x20
c0007f9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007fa1:	e8 6a 25 00 00       	call   c000a510 <operator delete(void*, unsigned long)>
c0007fa6:	83 c4 10             	add    esp,0x10
c0007fa9:	83 c4 0c             	add    esp,0xc
c0007fac:	c3                   	ret    
c0007fad:	90                   	nop

c0007fae <Pipe::write(unsigned long long, void*, int*)>:
c0007fae:	55                   	push   ebp
c0007faf:	57                   	push   edi
c0007fb0:	56                   	push   esi
c0007fb1:	53                   	push   ebx
c0007fb2:	83 ec 1c             	sub    esp,0x1c
c0007fb5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007fb9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007fbd:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007fc0:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007fc4:	89 04 24             	mov    DWORD PTR [esp],eax
c0007fc7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007fcb:	89 d8                	mov    eax,ebx
c0007fcd:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007fd0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fd4:	89 d6                	mov    esi,edx
c0007fd6:	89 d7                	mov    edi,edx
c0007fd8:	c1 ff 1f             	sar    edi,0x1f
c0007fdb:	03 34 24             	add    esi,DWORD PTR [esp]
c0007fde:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007fe2:	c1 f8 1f             	sar    eax,0x1f
c0007fe5:	39 f3                	cmp    ebx,esi
c0007fe7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007feb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007fef:	19 f8                	sbb    eax,edi
c0007ff1:	b8 01 00 00 00       	mov    eax,0x1
c0007ff6:	72 6e                	jb     c0008066 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0007ff8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0007ffb:	01 d0                	add    eax,edx
c0007ffd:	99                   	cdq    
c0007ffe:	f7 fb                	idiv   ebx
c0008000:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008004:	29 d3                	sub    ebx,edx
c0008006:	89 d7                	mov    edi,edx
c0008008:	89 de                	mov    esi,ebx
c000800a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000800d:	c1 fb 1f             	sar    ebx,0x1f
c0008010:	39 f2                	cmp    edx,esi
c0008012:	19 d8                	sbb    eax,ebx
c0008014:	b8 00 00 00 00       	mov    eax,0x0
c0008019:	72 04                	jb     c000801f <Pipe::write(unsigned long long, void*, int*)+0x71>
c000801b:	89 d0                	mov    eax,edx
c000801d:	29 f0                	sub    eax,esi
c000801f:	89 d3                	mov    ebx,edx
c0008021:	29 c3                	sub    ebx,eax
c0008023:	74 0b                	je     c0008030 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0008025:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0008028:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000802c:	89 d9                	mov    ecx,ebx
c000802e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008030:	85 c0                	test   eax,eax
c0008032:	74 0d                	je     c0008041 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0008034:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0008038:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000803b:	89 de                	mov    esi,ebx
c000803d:	89 c1                	mov    ecx,eax
c000803f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008041:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008044:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008049:	75 10                	jne    c000805b <Pipe::write(unsigned long long, void*, int*)+0xad>
c000804b:	83 ec 0c             	sub    esp,0xc
c000804e:	68 29 f4 01 c0       	push   0xc001f429
c0008053:	e8 6f 83 00 00       	call   c00103c7 <KePanic(char const*)>
c0008058:	83 c4 10             	add    esp,0x10
c000805b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000805f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008062:	89 08                	mov    DWORD PTR [eax],ecx
c0008064:	31 c0                	xor    eax,eax
c0008066:	83 c4 1c             	add    esp,0x1c
c0008069:	5b                   	pop    ebx
c000806a:	5e                   	pop    esi
c000806b:	5f                   	pop    edi
c000806c:	5d                   	pop    ebp
c000806d:	c3                   	ret    

c000806e <Pipe::read(unsigned long long, void*, int*)>:
c000806e:	55                   	push   ebp
c000806f:	57                   	push   edi
c0008070:	56                   	push   esi
c0008071:	53                   	push   ebx
c0008072:	83 ec 1c             	sub    esp,0x1c
c0008075:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008079:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000807d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008081:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008084:	89 c8                	mov    eax,ecx
c0008086:	99                   	cdq    
c0008087:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000808b:	74 24                	je     c00080b1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000808d:	39 f9                	cmp    ecx,edi
c000808f:	89 d1                	mov    ecx,edx
c0008091:	19 f1                	sbb    ecx,esi
c0008093:	73 1c                	jae    c00080b1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008095:	fa                   	cli    
c0008096:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c000809c:	e8 bb c9 00 00       	call   c0014a5c <schedule()>
c00080a1:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00080a6:	48                   	dec    eax
c00080a7:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00080ac:	75 d3                	jne    c0008081 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00080ae:	fb                   	sti    
c00080af:	eb d0                	jmp    c0008081 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00080b1:	39 f8                	cmp    eax,edi
c00080b3:	89 d1                	mov    ecx,edx
c00080b5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00080b8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00080bc:	19 f1                	sbb    ecx,esi
c00080be:	73 07                	jae    c00080c7 <Pipe::read(unsigned long long, void*, int*)+0x59>
c00080c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00080c3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00080c7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00080ca:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00080cd:	29 f7                	sub    edi,esi
c00080cf:	89 f8                	mov    eax,edi
c00080d1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00080d5:	99                   	cdq    
c00080d6:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00080d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00080dd:	19 d0                	sbb    eax,edx
c00080df:	73 07                	jae    c00080e8 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00080e1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00080e8:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00080eb:	89 ea                	mov    edx,ebp
c00080ed:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00080f1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00080f6:	74 0d                	je     c0008105 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00080f8:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00080fb:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00080ff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008103:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008105:	85 d2                	test   edx,edx
c0008107:	74 11                	je     c000811a <Pipe::read(unsigned long long, void*, int*)+0xac>
c0008109:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000810d:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008110:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008114:	89 d1                	mov    ecx,edx
c0008116:	89 c7                	mov    edi,eax
c0008118:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000811a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000811d:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008120:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008123:	99                   	cdq    
c0008124:	89 f7                	mov    edi,esi
c0008126:	03 04 24             	add    eax,DWORD PTR [esp]
c0008129:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000812d:	c1 ff 1f             	sar    edi,0x1f
c0008130:	57                   	push   edi
c0008131:	56                   	push   esi
c0008132:	52                   	push   edx
c0008133:	50                   	push   eax
c0008134:	e8 27 5d 01 00       	call   c001de60 <__umoddi3>
c0008139:	83 c4 10             	add    esp,0x10
c000813c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000813f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008144:	75 10                	jne    c0008156 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008146:	83 ec 0c             	sub    esp,0xc
c0008149:	68 46 f4 01 c0       	push   0xc001f446
c000814e:	e8 74 82 00 00       	call   c00103c7 <KePanic(char const*)>
c0008153:	83 c4 10             	add    esp,0x10
c0008156:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000815a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000815d:	89 10                	mov    DWORD PTR [eax],edx
c000815f:	83 c4 1c             	add    esp,0x1c
c0008162:	31 c0                	xor    eax,eax
c0008164:	5b                   	pop    ebx
c0008165:	5e                   	pop    esi
c0008166:	5f                   	pop    edi
c0008167:	5d                   	pop    ebp
c0008168:	c3                   	ret    
c0008169:	90                   	nop

c000816a <Pipe::Pipe(int)>:
c000816a:	83 ec 0c             	sub    esp,0xc
c000816d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008171:	83 ec 08             	sub    esp,0x8
c0008174:	6a 00                	push   0x0
c0008176:	50                   	push   eax
c0008177:	e8 8a 0d 00 00       	call   c0008f06 <UnixFile::UnixFile(int)>
c000817c:	83 c4 10             	add    esp,0x10
c000817f:	ba 6c f4 01 c0       	mov    edx,0xc001f46c
c0008184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008188:	89 10                	mov    DWORD PTR [eax],edx
c000818a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000818e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008192:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008195:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008199:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00081a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081a4:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00081ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00081af:	83 ec 0c             	sub    esp,0xc
c00081b2:	50                   	push   eax
c00081b3:	e8 ad f6 ff ff       	call   c0007865 <malloc>
c00081b8:	83 c4 10             	add    esp,0x10
c00081bb:	89 c2                	mov    edx,eax
c00081bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00081c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081c8:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00081cc:	90                   	nop
c00081cd:	83 c4 0c             	add    esp,0xc
c00081d0:	c3                   	ret    
c00081d1:	90                   	nop

c00081d2 <VgaText::isAtty()>:
c00081d2:	b0 01                	mov    al,0x1
c00081d4:	c3                   	ret    
c00081d5:	90                   	nop

c00081d6 <VgaText::~VgaText()>:
c00081d6:	83 ec 0c             	sub    esp,0xc
c00081d9:	ba b4 f4 01 c0       	mov    edx,0xc001f4b4
c00081de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081e2:	89 10                	mov    DWORD PTR [eax],edx
c00081e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081e8:	83 ec 0c             	sub    esp,0xc
c00081eb:	50                   	push   eax
c00081ec:	e8 f7 0e 00 00       	call   c00090e8 <UnixFile::~UnixFile()>
c00081f1:	83 c4 10             	add    esp,0x10
c00081f4:	90                   	nop
c00081f5:	83 c4 0c             	add    esp,0xc
c00081f8:	c3                   	ret    
c00081f9:	90                   	nop

c00081fa <VgaText::~VgaText()>:
c00081fa:	83 ec 0c             	sub    esp,0xc
c00081fd:	83 ec 0c             	sub    esp,0xc
c0008200:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008204:	e8 cd ff ff ff       	call   c00081d6 <VgaText::~VgaText()>
c0008209:	83 c4 10             	add    esp,0x10
c000820c:	83 ec 08             	sub    esp,0x8
c000820f:	68 84 01 00 00       	push   0x184
c0008214:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008218:	e8 f3 22 00 00       	call   c000a510 <operator delete(void*, unsigned long)>
c000821d:	83 c4 10             	add    esp,0x10
c0008220:	83 c4 0c             	add    esp,0xc
c0008223:	c3                   	ret    

c0008224 <VgaText::read(unsigned long long, void*, int*)>:
c0008224:	83 ec 10             	sub    esp,0x10
c0008227:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000822b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000822f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008233:	e8 32 46 00 00       	call   c000c86a <readKeyboard(VgaText*, char*, unsigned long)>
c0008238:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000823c:	89 02                	mov    DWORD PTR [edx],eax
c000823e:	31 c0                	xor    eax,eax
c0008240:	83 c4 1c             	add    esp,0x1c
c0008243:	c3                   	ret    

c0008244 <setTerminalScrollLock(bool)>:
c0008244:	c3                   	ret    

c0008245 <doTerminalCycle()>:
c0008245:	c3                   	ret    

c0008246 <addToTerminalCycle(VgaText*)>:
c0008246:	c3                   	ret    

c0008247 <scrollTerminalScrollLock(int)>:
c0008247:	c3                   	ret    

c0008248 <VgaText::updateTitle()>:
c0008248:	c3                   	ret    
c0008249:	90                   	nop

c000824a <VgaText::load()>:
c000824a:	c3                   	ret    
c000824b:	90                   	nop

c000824c <VgaText::updateCursor()>:
c000824c:	83 ec 14             	sub    esp,0x14
c000824f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008253:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008256:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008259:	e8 16 f4 00 00       	call   c0017674 <HalConsoleCursorUpdate(int, int)>
c000825e:	83 c4 1c             	add    esp,0x1c
c0008261:	c3                   	ret    

c0008262 <VgaText::doANSI_SGR(int)>:
c0008262:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008266:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000826a:	85 d2                	test   edx,edx
c000826c:	75 0b                	jne    c0008279 <VgaText::doANSI_SGR(int)+0x17>
c000826e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008271:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008274:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008277:	eb 59                	jmp    c00082d2 <VgaText::doANSI_SGR(int)+0x70>
c0008279:	83 fa 07             	cmp    edx,0x7
c000827c:	75 0b                	jne    c0008289 <VgaText::doANSI_SGR(int)+0x27>
c000827e:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008281:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008284:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008287:	eb 49                	jmp    c00082d2 <VgaText::doANSI_SGR(int)+0x70>
c0008289:	83 fa 1b             	cmp    edx,0x1b
c000828c:	74 e0                	je     c000826e <VgaText::doANSI_SGR(int)+0xc>
c000828e:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008291:	83 f9 07             	cmp    ecx,0x7
c0008294:	77 09                	ja     c000829f <VgaText::doANSI_SGR(int)+0x3d>
c0008296:	8b 14 8d 00 16 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdea00]
c000829d:	eb 20                	jmp    c00082bf <VgaText::doANSI_SGR(int)+0x5d>
c000829f:	8d 4a d8             	lea    ecx,[edx-0x28]
c00082a2:	83 f9 07             	cmp    ecx,0x7
c00082a5:	77 09                	ja     c00082b0 <VgaText::doANSI_SGR(int)+0x4e>
c00082a7:	8b 14 8d 00 16 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdea00]
c00082ae:	eb 22                	jmp    c00082d2 <VgaText::doANSI_SGR(int)+0x70>
c00082b0:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00082b3:	83 f9 07             	cmp    ecx,0x7
c00082b6:	77 0b                	ja     c00082c3 <VgaText::doANSI_SGR(int)+0x61>
c00082b8:	8b 14 95 b8 14 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdeb48]
c00082bf:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00082c2:	c3                   	ret    
c00082c3:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00082c6:	83 f9 07             	cmp    ecx,0x7
c00082c9:	77 0a                	ja     c00082d5 <VgaText::doANSI_SGR(int)+0x73>
c00082cb:	8b 14 95 90 14 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdeb70]
c00082d2:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00082d5:	c3                   	ret    

c00082d6 <VgaText::setDefaultBgColour(VgaColour)>:
c00082d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00082de:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00082e1:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00082e4:	c3                   	ret    
c00082e5:	90                   	nop

c00082e6 <VgaText::setDefaultFgColour(VgaColour)>:
c00082e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00082ee:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00082f1:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00082f4:	c3                   	ret    
c00082f5:	90                   	nop

c00082f6 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00082f6:	53                   	push   ebx
c00082f7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00082fb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00082ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008303:	51                   	push   ecx
c0008304:	e8 cd ff ff ff       	call   c00082d6 <VgaText::setDefaultBgColour(VgaColour)>
c0008309:	58                   	pop    eax
c000830a:	5a                   	pop    edx
c000830b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000830f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008313:	5b                   	pop    ebx
c0008314:	eb d0                	jmp    c00082e6 <VgaText::setDefaultFgColour(VgaColour)>

c0008316 <VgaText::setTitleTextColour(VgaColour)>:
c0008316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000831a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000831e:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008321:	c3                   	ret    

c0008322 <VgaText::setTitleColour(VgaColour)>:
c0008322:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008326:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000832a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000832d:	c3                   	ret    

c000832e <VgaText::setTitle(char*)>:
c000832e:	c3                   	ret    
c000832f:	90                   	nop

c0008330 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008330:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008334:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0008339:	83 e0 0f             	and    eax,0xf
c000833c:	c1 e2 04             	shl    edx,0x4
c000833f:	09 d0                	or     eax,edx
c0008341:	c3                   	ret    

c0008342 <VgaText::scrollScreen()>:
c0008342:	55                   	push   ebp
c0008343:	57                   	push   edi
c0008344:	56                   	push   esi
c0008345:	be 01 00 00 00       	mov    esi,0x1
c000834a:	53                   	push   ebx
c000834b:	83 ec 0c             	sub    esp,0xc
c000834e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008352:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008355:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000835b:	31 ff                	xor    edi,edi
c000835d:	01 e9                	add    ecx,ebp
c000835f:	8a 01                	mov    al,BYTE PTR [ecx]
c0008361:	83 fe 18             	cmp    esi,0x18
c0008364:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000836a:	75 20                	jne    c000838c <VgaText::scrollScreen()+0x4a>
c000836c:	f7 c7 01 00 00 00    	test   edi,0x1
c0008372:	74 15                	je     c0008389 <VgaText::scrollScreen()+0x47>
c0008374:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008378:	50                   	push   eax
c0008379:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000837d:	50                   	push   eax
c000837e:	e8 ad ff ff ff       	call   c0008330 <VgaText::combineColours(unsigned char, unsigned char)>
c0008383:	5a                   	pop    edx
c0008384:	5a                   	pop    edx
c0008385:	88 01                	mov    BYTE PTR [ecx],al
c0008387:	eb 03                	jmp    c000838c <VgaText::scrollScreen()+0x4a>
c0008389:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000838c:	47                   	inc    edi
c000838d:	41                   	inc    ecx
c000838e:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008394:	75 c9                	jne    c000835f <VgaText::scrollScreen()+0x1d>
c0008396:	46                   	inc    esi
c0008397:	83 fe 19             	cmp    esi,0x19
c000839a:	75 b9                	jne    c0008355 <VgaText::scrollScreen()+0x13>
c000839c:	39 1d 04 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f04,ebx
c00083a2:	75 1f                	jne    c00083c3 <VgaText::scrollScreen()+0x81>
c00083a4:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00083a8:	74 05                	je     c00083af <VgaText::scrollScreen()+0x6d>
c00083aa:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00083ad:	eb 14                	jmp    c00083c3 <VgaText::scrollScreen()+0x81>
c00083af:	50                   	push   eax
c00083b0:	50                   	push   eax
c00083b1:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00083b5:	50                   	push   eax
c00083b6:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00083ba:	50                   	push   eax
c00083bb:	e8 40 f1 00 00       	call   c0017500 <HalConsoleScroll(int, int)>
c00083c0:	83 c4 10             	add    esp,0x10
c00083c3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00083c7:	83 c4 0c             	add    esp,0xc
c00083ca:	5b                   	pop    ebx
c00083cb:	5e                   	pop    esi
c00083cc:	5f                   	pop    edi
c00083cd:	5d                   	pop    ebp
c00083ce:	e9 79 fe ff ff       	jmp    c000824c <VgaText::updateCursor()>
c00083d3:	90                   	nop

c00083d4 <VgaText::combineCharAndColour(char, unsigned char)>:
c00083d4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00083d9:	c1 e0 08             	shl    eax,0x8
c00083dc:	89 c2                	mov    edx,eax
c00083de:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00083e3:	09 d0                	or     eax,edx
c00083e5:	c3                   	ret    

c00083e6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00083e6:	55                   	push   ebp
c00083e7:	57                   	push   edi
c00083e8:	56                   	push   esi
c00083e9:	53                   	push   ebx
c00083ea:	83 ec 1c             	sub    esp,0x1c
c00083ed:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00083f1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00083f5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00083f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083fd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0008401:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008405:	0f b6 c3             	movzx  eax,bl
c0008408:	50                   	push   eax
c0008409:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c000840e:	50                   	push   eax
c000840f:	e8 1c ff ff ff       	call   c0008330 <VgaText::combineColours(unsigned char, unsigned char)>
c0008414:	5a                   	pop    edx
c0008415:	0f b6 c0             	movzx  eax,al
c0008418:	59                   	pop    ecx
c0008419:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c000841e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008422:	50                   	push   eax
c0008423:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008427:	e8 a8 ff ff ff       	call   c00083d4 <VgaText::combineCharAndColour(char, unsigned char)>
c000842c:	5a                   	pop    edx
c000842d:	66 6b d7 50          	imul   dx,di,0x50
c0008431:	59                   	pop    ecx
c0008432:	01 f2                	add    edx,esi
c0008434:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008437:	0f b7 d2             	movzx  edx,dx
c000843a:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000843e:	39 2d 04 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f04,ebp
c0008444:	75 28                	jne    c000846e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c0008446:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000844a:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000844e:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008452:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008456:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000845a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000845e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008462:	83 c4 1c             	add    esp,0x1c
c0008465:	5b                   	pop    ebx
c0008466:	5e                   	pop    esi
c0008467:	5f                   	pop    edi
c0008468:	5d                   	pop    ebp
c0008469:	e9 9a f1 00 00       	jmp    c0017608 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000846e:	83 c4 1c             	add    esp,0x1c
c0008471:	5b                   	pop    ebx
c0008472:	5e                   	pop    esi
c0008473:	5f                   	pop    edi
c0008474:	5d                   	pop    ebp
c0008475:	c3                   	ret    

c0008476 <VgaText::getCursorX()>:
c0008476:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000847a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000847d:	c3                   	ret    

c000847e <VgaText::getCursorY()>:
c000847e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008482:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008485:	c3                   	ret    

c0008486 <VgaText::setCursor(int, int)>:
c0008486:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000848a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000848e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008491:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008495:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008498:	e9 af fd ff ff       	jmp    c000824c <VgaText::updateCursor()>

c000849d <setActiveTerminal(VgaText*)>:
c000849d:	53                   	push   ebx
c000849e:	83 ec 08             	sub    esp,0x8
c00084a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084a5:	85 db                	test   ebx,ebx
c00084a7:	75 11                	jne    c00084ba <setActiveTerminal(VgaText*)+0x1d>
c00084a9:	c7 44 24 10 80 f4 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f480
c00084b1:	83 c4 08             	add    esp,0x8
c00084b4:	5b                   	pop    ebx
c00084b5:	e9 0d 7f 00 00       	jmp    c00103c7 <KePanic(char const*)>
c00084ba:	a1 04 3f 02 c0       	mov    eax,ds:0xc0023f04
c00084bf:	85 c0                	test   eax,eax
c00084c1:	74 0c                	je     c00084cf <setActiveTerminal(VgaText*)+0x32>
c00084c3:	83 ec 0c             	sub    esp,0xc
c00084c6:	50                   	push   eax
c00084c7:	e8 80 fd ff ff       	call   c000824c <VgaText::updateCursor()>
c00084cc:	83 c4 10             	add    esp,0x10
c00084cf:	89 1d 04 3f 02 c0    	mov    DWORD PTR ds:0xc0023f04,ebx
c00084d5:	50                   	push   eax
c00084d6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00084d9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00084dc:	53                   	push   ebx
c00084dd:	e8 a4 ff ff ff       	call   c0008486 <VgaText::setCursor(int, int)>
c00084e2:	83 c4 18             	add    esp,0x18
c00084e5:	5b                   	pop    ebx
c00084e6:	c3                   	ret    
c00084e7:	90                   	nop

c00084e8 <VgaText::clearScreen()>:
c00084e8:	57                   	push   edi
c00084e9:	56                   	push   esi
c00084ea:	31 f6                	xor    esi,esi
c00084ec:	53                   	push   ebx
c00084ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084f1:	52                   	push   edx
c00084f2:	6a 00                	push   0x0
c00084f4:	6a 00                	push   0x0
c00084f6:	53                   	push   ebx
c00084f7:	e8 8a ff ff ff       	call   c0008486 <VgaText::setCursor(int, int)>
c00084fc:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008503:	83 c4 10             	add    esp,0x10
c0008506:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008509:	7e 20                	jle    c000852b <VgaText::clearScreen()+0x43>
c000850b:	31 ff                	xor    edi,edi
c000850d:	50                   	push   eax
c000850e:	50                   	push   eax
c000850f:	56                   	push   esi
c0008510:	57                   	push   edi
c0008511:	47                   	inc    edi
c0008512:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008515:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008518:	6a 20                	push   0x20
c000851a:	53                   	push   ebx
c000851b:	e8 c6 fe ff ff       	call   c00083e6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008520:	83 c4 20             	add    esp,0x20
c0008523:	83 ff 50             	cmp    edi,0x50
c0008526:	75 e5                	jne    c000850d <VgaText::clearScreen()+0x25>
c0008528:	46                   	inc    esi
c0008529:	eb db                	jmp    c0008506 <VgaText::clearScreen()+0x1e>
c000852b:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008532:	5b                   	pop    ebx
c0008533:	5e                   	pop    esi
c0008534:	5f                   	pop    edi
c0008535:	c3                   	ret    

c0008536 <VgaText::setCursorX(int)>:
c0008536:	83 ec 10             	sub    esp,0x10
c0008539:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000853d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008540:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008544:	50                   	push   eax
c0008545:	e8 3c ff ff ff       	call   c0008486 <VgaText::setCursor(int, int)>
c000854a:	83 c4 1c             	add    esp,0x1c
c000854d:	c3                   	ret    

c000854e <VgaText::setCursorY(int)>:
c000854e:	83 ec 10             	sub    esp,0x10
c0008551:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008555:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008559:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000855c:	50                   	push   eax
c000855d:	e8 24 ff ff ff       	call   c0008486 <VgaText::setCursor(int, int)>
c0008562:	83 c4 1c             	add    esp,0x1c
c0008565:	c3                   	ret    

c0008566 <VgaText::incrementCursor(bool)>:
c0008566:	56                   	push   esi
c0008567:	53                   	push   ebx
c0008568:	51                   	push   ecx
c0008569:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000856d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008571:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008574:	40                   	inc    eax
c0008575:	83 f8 50             	cmp    eax,0x50
c0008578:	74 05                	je     c000857f <VgaText::incrementCursor(bool)+0x19>
c000857a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000857d:	eb 24                	jmp    c00085a3 <VgaText::incrementCursor(bool)+0x3d>
c000857f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008582:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008589:	8d 50 01             	lea    edx,[eax+0x1]
c000858c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000858f:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008592:	75 0f                	jne    c00085a3 <VgaText::incrementCursor(bool)+0x3d>
c0008594:	83 ec 0c             	sub    esp,0xc
c0008597:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000859a:	53                   	push   ebx
c000859b:	e8 a2 fd ff ff       	call   c0008342 <VgaText::scrollScreen()>
c00085a0:	83 c4 10             	add    esp,0x10
c00085a3:	89 f0                	mov    eax,esi
c00085a5:	84 c0                	test   al,al
c00085a7:	74 0c                	je     c00085b5 <VgaText::incrementCursor(bool)+0x4f>
c00085a9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085ad:	5a                   	pop    edx
c00085ae:	5b                   	pop    ebx
c00085af:	5e                   	pop    esi
c00085b0:	e9 97 fc ff ff       	jmp    c000824c <VgaText::updateCursor()>
c00085b5:	58                   	pop    eax
c00085b6:	5b                   	pop    ebx
c00085b7:	5e                   	pop    esi
c00085b8:	c3                   	ret    
c00085b9:	90                   	nop

c00085ba <VgaText::decrementCursor(bool)>:
c00085ba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00085be:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085c2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00085c5:	85 c0                	test   eax,eax
c00085c7:	74 04                	je     c00085cd <VgaText::decrementCursor(bool)+0x13>
c00085c9:	48                   	dec    eax
c00085ca:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00085cd:	84 c9                	test   cl,cl
c00085cf:	74 09                	je     c00085da <VgaText::decrementCursor(bool)+0x20>
c00085d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00085d5:	e9 72 fc ff ff       	jmp    c000824c <VgaText::updateCursor()>
c00085da:	c3                   	ret    
c00085db:	90                   	nop

c00085dc <VgaText::putchar(char, VgaColour, VgaColour)>:
c00085dc:	53                   	push   ebx
c00085dd:	83 ec 08             	sub    esp,0x8
c00085e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085e4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00085e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00085ec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00085f0:	3c 07                	cmp    al,0x7
c00085f2:	75 21                	jne    c0008615 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c00085f4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00085fc:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0008604:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c000860c:	83 c4 08             	add    esp,0x8
c000860f:	5b                   	pop    ebx
c0008610:	e9 46 2e 00 00       	jmp    c000b45b <Krnl::beep(int, int, bool)>
c0008615:	3c 0d                	cmp    al,0xd
c0008617:	75 09                	jne    c0008622 <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008619:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008620:	eb 2c                	jmp    c000864e <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008622:	3c 0a                	cmp    al,0xa
c0008624:	75 31                	jne    c0008657 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008626:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008629:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008630:	8d 50 01             	lea    edx,[eax+0x1]
c0008633:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008636:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008639:	75 0f                	jne    c000864a <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c000863b:	83 ec 0c             	sub    esp,0xc
c000863e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008641:	53                   	push   ebx
c0008642:	e8 fb fc ff ff       	call   c0008342 <VgaText::scrollScreen()>
c0008647:	83 c4 10             	add    esp,0x10
c000864a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000864e:	83 c4 08             	add    esp,0x8
c0008651:	5b                   	pop    ebx
c0008652:	e9 f5 fb ff ff       	jmp    c000824c <VgaText::updateCursor()>
c0008657:	3c 08                	cmp    al,0x8
c0008659:	75 25                	jne    c0008680 <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c000865b:	50                   	push   eax
c000865c:	50                   	push   eax
c000865d:	6a 01                	push   0x1
c000865f:	53                   	push   ebx
c0008660:	e8 55 ff ff ff       	call   c00085ba <VgaText::decrementCursor(bool)>
c0008665:	5a                   	pop    edx
c0008666:	59                   	pop    ecx
c0008667:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000866a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000866d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008670:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008673:	6a 20                	push   0x20
c0008675:	53                   	push   ebx
c0008676:	e8 6b fd ff ff       	call   c00083e6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000867b:	83 c4 28             	add    esp,0x28
c000867e:	5b                   	pop    ebx
c000867f:	c3                   	ret    
c0008680:	83 ec 08             	sub    esp,0x8
c0008683:	0f be c0             	movsx  eax,al
c0008686:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008689:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000868c:	51                   	push   ecx
c000868d:	52                   	push   edx
c000868e:	50                   	push   eax
c000868f:	53                   	push   ebx
c0008690:	e8 51 fd ff ff       	call   c00083e6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008695:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008699:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00086a1:	83 c4 28             	add    esp,0x28
c00086a4:	5b                   	pop    ebx
c00086a5:	e9 bc fe ff ff       	jmp    c0008566 <VgaText::incrementCursor(bool)>

c00086aa <VgaText::putchar(char)>:
c00086aa:	56                   	push   esi
c00086ab:	53                   	push   ebx
c00086ac:	83 ec 14             	sub    esp,0x14
c00086af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00086b3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00086b7:	3c 5b                	cmp    al,0x5b
c00086b9:	75 18                	jne    c00086d3 <VgaText::putchar(char)+0x29>
c00086bb:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00086bf:	74 1f                	je     c00086e0 <VgaText::putchar(char)+0x36>
c00086c1:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00086c7:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00086ce:	e9 bd 00 00 00       	jmp    c0008790 <VgaText::putchar(char)+0xe6>
c00086d3:	3c 1b                	cmp    al,0x1b
c00086d5:	75 09                	jne    c00086e0 <VgaText::putchar(char)+0x36>
c00086d7:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00086db:	e9 b0 00 00 00       	jmp    c0008790 <VgaText::putchar(char)+0xe6>
c00086e0:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00086e3:	84 c9                	test   cl,cl
c00086e5:	0f 84 92 00 00 00    	je     c000877d <VgaText::putchar(char)+0xd3>
c00086eb:	8d 50 c0             	lea    edx,[eax-0x40]
c00086ee:	80 fa 3e             	cmp    dl,0x3e
c00086f1:	77 76                	ja     c0008769 <VgaText::putchar(char)+0xbf>
c00086f3:	3c 6d                	cmp    al,0x6d
c00086f5:	75 47                	jne    c000873e <VgaText::putchar(char)+0x94>
c00086f7:	31 f6                	xor    esi,esi
c00086f9:	31 d2                	xor    edx,edx
c00086fb:	31 c0                	xor    eax,eax
c00086fd:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0008700:	7e 2d                	jle    c000872f <VgaText::putchar(char)+0x85>
c0008702:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008707:	80 fa 3b             	cmp    dl,0x3b
c000870a:	75 17                	jne    c0008723 <VgaText::putchar(char)+0x79>
c000870c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0008710:	50                   	push   eax
c0008711:	53                   	push   ebx
c0008712:	e8 4b fb ff ff       	call   c0008262 <VgaText::doANSI_SGR(int)>
c0008717:	59                   	pop    ecx
c0008718:	31 d2                	xor    edx,edx
c000871a:	58                   	pop    eax
c000871b:	31 c0                	xor    eax,eax
c000871d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0008721:	eb 09                	jmp    c000872c <VgaText::putchar(char)+0x82>
c0008723:	6b c0 0a             	imul   eax,eax,0xa
c0008726:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000872a:	88 ca                	mov    dl,cl
c000872c:	46                   	inc    esi
c000872d:	eb ce                	jmp    c00086fd <VgaText::putchar(char)+0x53>
c000872f:	84 d2                	test   dl,dl
c0008731:	74 2e                	je     c0008761 <VgaText::putchar(char)+0xb7>
c0008733:	50                   	push   eax
c0008734:	53                   	push   ebx
c0008735:	e8 28 fb ff ff       	call   c0008262 <VgaText::doANSI_SGR(int)>
c000873a:	58                   	pop    eax
c000873b:	5a                   	pop    edx
c000873c:	eb 23                	jmp    c0008761 <VgaText::putchar(char)+0xb7>
c000873e:	3c 4a                	cmp    al,0x4a
c0008740:	75 1f                	jne    c0008761 <VgaText::putchar(char)+0xb7>
c0008742:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008746:	75 19                	jne    c0008761 <VgaText::putchar(char)+0xb7>
c0008748:	83 ec 0c             	sub    esp,0xc
c000874b:	53                   	push   ebx
c000874c:	e8 97 fd ff ff       	call   c00084e8 <VgaText::clearScreen()>
c0008751:	83 c4 0c             	add    esp,0xc
c0008754:	6a 00                	push   0x0
c0008756:	6a 00                	push   0x0
c0008758:	53                   	push   ebx
c0008759:	e8 28 fd ff ff       	call   c0008486 <VgaText::setCursor(int, int)>
c000875e:	83 c4 10             	add    esp,0x10
c0008761:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008767:	eb 27                	jmp    c0008790 <VgaText::putchar(char)+0xe6>
c0008769:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000876c:	83 fa 0e             	cmp    edx,0xe
c000876f:	7f 1f                	jg     c0008790 <VgaText::putchar(char)+0xe6>
c0008771:	8d 4a 01             	lea    ecx,[edx+0x1]
c0008774:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008777:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000877b:	eb 13                	jmp    c0008790 <VgaText::putchar(char)+0xe6>
c000877d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008780:	0f be c0             	movsx  eax,al
c0008783:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008786:	50                   	push   eax
c0008787:	53                   	push   ebx
c0008788:	e8 4f fe ff ff       	call   c00085dc <VgaText::putchar(char, VgaColour, VgaColour)>
c000878d:	83 c4 10             	add    esp,0x10
c0008790:	83 c4 14             	add    esp,0x14
c0008793:	5b                   	pop    ebx
c0008794:	5e                   	pop    esi
c0008795:	c3                   	ret    

c0008796 <VgaText::putx(unsigned int)>:
c0008796:	57                   	push   edi
c0008797:	b9 11 00 00 00       	mov    ecx,0x11
c000879c:	56                   	push   esi
c000879d:	be 8e f4 01 c0       	mov    esi,0xc001f48e
c00087a2:	53                   	push   ebx
c00087a3:	83 ec 20             	sub    esp,0x20
c00087a6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087aa:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00087ae:	fc                   	cld    
c00087af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00087b1:	be 08 00 00 00       	mov    esi,0x8
c00087b6:	50                   	push   eax
c00087b7:	50                   	push   eax
c00087b8:	89 d8                	mov    eax,ebx
c00087ba:	c1 e3 04             	shl    ebx,0x4
c00087bd:	c1 e8 1c             	shr    eax,0x1c
c00087c0:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00087c5:	50                   	push   eax
c00087c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00087ca:	e8 db fe ff ff       	call   c00086aa <VgaText::putchar(char)>
c00087cf:	83 c4 10             	add    esp,0x10
c00087d2:	4e                   	dec    esi
c00087d3:	75 e1                	jne    c00087b6 <VgaText::putx(unsigned int)+0x20>
c00087d5:	83 c4 20             	add    esp,0x20
c00087d8:	5b                   	pop    ebx
c00087d9:	5e                   	pop    esi
c00087da:	5f                   	pop    edi
c00087db:	c3                   	ret    

c00087dc <VgaText::puts(char const*)>:
c00087dc:	53                   	push   ebx
c00087dd:	83 ec 08             	sub    esp,0x8
c00087e0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00087e4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00087e7:	84 c0                	test   al,al
c00087e9:	74 12                	je     c00087fd <VgaText::puts(char const*)+0x21>
c00087eb:	43                   	inc    ebx
c00087ec:	51                   	push   ecx
c00087ed:	51                   	push   ecx
c00087ee:	50                   	push   eax
c00087ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00087f3:	e8 b2 fe ff ff       	call   c00086aa <VgaText::putchar(char)>
c00087f8:	83 c4 10             	add    esp,0x10
c00087fb:	eb e7                	jmp    c00087e4 <VgaText::puts(char const*)+0x8>
c00087fd:	83 c4 08             	add    esp,0x8
c0008800:	5b                   	pop    ebx
c0008801:	c3                   	ret    

c0008802 <VgaText::write(unsigned long long, void*, int*)>:
c0008802:	55                   	push   ebp
c0008803:	57                   	push   edi
c0008804:	56                   	push   esi
c0008805:	53                   	push   ebx
c0008806:	83 ec 0c             	sub    esp,0xc
c0008809:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000880d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008811:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008815:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000881c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000881f:	39 eb                	cmp    ebx,ebp
c0008821:	74 13                	je     c0008836 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008823:	43                   	inc    ebx
c0008824:	50                   	push   eax
c0008825:	50                   	push   eax
c0008826:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000882a:	50                   	push   eax
c000882b:	56                   	push   esi
c000882c:	e8 79 fe ff ff       	call   c00086aa <VgaText::putchar(char)>
c0008831:	83 c4 10             	add    esp,0x10
c0008834:	eb e9                	jmp    c000881f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008836:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000883d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008841:	89 38                	mov    DWORD PTR [eax],edi
c0008843:	83 c4 0c             	add    esp,0xc
c0008846:	31 c0                	xor    eax,eax
c0008848:	5b                   	pop    ebx
c0008849:	5e                   	pop    esi
c000884a:	5f                   	pop    edi
c000884b:	5d                   	pop    ebp
c000884c:	c3                   	ret    
c000884d:	90                   	nop

c000884e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000884e:	55                   	push   ebp
c000884f:	57                   	push   edi
c0008850:	56                   	push   esi
c0008851:	53                   	push   ebx
c0008852:	83 ec 0c             	sub    esp,0xc
c0008855:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008859:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000885e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008865:	50                   	push   eax
c0008866:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000886b:	50                   	push   eax
c000886c:	e8 bf fa ff ff       	call   c0008330 <VgaText::combineColours(unsigned char, unsigned char)>
c0008871:	5a                   	pop    edx
c0008872:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008877:	59                   	pop    ecx
c0008878:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000887b:	89 c5                	mov    ebp,eax
c000887d:	0f b7 f6             	movzx  esi,si
c0008880:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008884:	01 f6                	add    esi,esi
c0008886:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008889:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000888c:	84 c0                	test   al,al
c000888e:	0f 84 f4 00 00 00    	je     c0008988 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0008894:	3c 0d                	cmp    al,0xd
c0008896:	75 0c                	jne    c00088a4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c0008898:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000889f:	e9 de 00 00 00       	jmp    c0008982 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088a4:	3c 0a                	cmp    al,0xa
c00088a6:	75 45                	jne    c00088ed <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c00088a8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088ab:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088b2:	8d 48 01             	lea    ecx,[eax+0x1]
c00088b5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00088b8:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c00088bb:	75 0f                	jne    c00088cc <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c00088bd:	83 ec 0c             	sub    esp,0xc
c00088c0:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00088c3:	53                   	push   ebx
c00088c4:	e8 79 fa ff ff       	call   c0008342 <VgaText::scrollScreen()>
c00088c9:	83 c4 10             	add    esp,0x10
c00088cc:	83 ec 0c             	sub    esp,0xc
c00088cf:	53                   	push   ebx
c00088d0:	e8 77 f9 ff ff       	call   c000824c <VgaText::updateCursor()>
c00088d5:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088da:	83 c4 10             	add    esp,0x10
c00088dd:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00088e0:	0f b7 f6             	movzx  esi,si
c00088e3:	01 f6                	add    esi,esi
c00088e5:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088e8:	e9 95 00 00 00       	jmp    c0008982 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088ed:	3c 08                	cmp    al,0x8
c00088ef:	75 35                	jne    c0008926 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c00088f1:	51                   	push   ecx
c00088f2:	51                   	push   ecx
c00088f3:	6a 01                	push   0x1
c00088f5:	53                   	push   ebx
c00088f6:	e8 bf fc ff ff       	call   c00085ba <VgaText::decrementCursor(bool)>
c00088fb:	5e                   	pop    esi
c00088fc:	58                   	pop    eax
c00088fd:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008900:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008903:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008906:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008909:	6a 20                	push   0x20
c000890b:	53                   	push   ebx
c000890c:	e8 d5 fa ff ff       	call   c00083e6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008911:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008916:	83 c4 20             	add    esp,0x20
c0008919:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000891c:	0f b7 f6             	movzx  esi,si
c000891f:	01 f6                	add    esi,esi
c0008921:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008924:	eb 5c                	jmp    c0008982 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008926:	52                   	push   edx
c0008927:	52                   	push   edx
c0008928:	89 ea                	mov    edx,ebp
c000892a:	0f b6 ca             	movzx  ecx,dl
c000892d:	51                   	push   ecx
c000892e:	50                   	push   eax
c000892f:	e8 a0 fa ff ff       	call   c00083d4 <VgaText::combineCharAndColour(char, unsigned char)>
c0008934:	83 c4 10             	add    esp,0x10
c0008937:	66 89 06             	mov    WORD PTR [esi],ax
c000893a:	39 1d 04 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f04,ebx
c0008940:	75 1d                	jne    c000895f <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c0008942:	83 ec 0c             	sub    esp,0xc
c0008945:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008948:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000894b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000894f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008953:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008956:	50                   	push   eax
c0008957:	e8 ac ec 00 00       	call   c0017608 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000895c:	83 c4 20             	add    esp,0x20
c000895f:	83 c6 02             	add    esi,0x2
c0008962:	50                   	push   eax
c0008963:	50                   	push   eax
c0008964:	6a 00                	push   0x0
c0008966:	53                   	push   ebx
c0008967:	e8 fa fb ff ff       	call   c0008566 <VgaText::incrementCursor(bool)>
c000896c:	83 c4 10             	add    esp,0x10
c000896f:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008973:	75 0d                	jne    c0008982 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008975:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000897a:	0f b7 f6             	movzx  esi,si
c000897d:	01 f6                	add    esi,esi
c000897f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008982:	47                   	inc    edi
c0008983:	e9 01 ff ff ff       	jmp    c0008889 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008988:	83 ec 0c             	sub    esp,0xc
c000898b:	53                   	push   ebx
c000898c:	e8 bb f8 ff ff       	call   c000824c <VgaText::updateCursor()>
c0008991:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008998:	83 c4 1c             	add    esp,0x1c
c000899b:	5b                   	pop    ebx
c000899c:	5e                   	pop    esi
c000899d:	5f                   	pop    edi
c000899e:	5d                   	pop    ebp
c000899f:	c3                   	ret    

c00089a0 <VgaText::VgaText(char const*)>:
c00089a0:	56                   	push   esi
c00089a1:	53                   	push   ebx
c00089a2:	83 ec 04             	sub    esp,0x4
c00089a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089a9:	83 ec 08             	sub    esp,0x8
c00089ac:	6a 00                	push   0x0
c00089ae:	50                   	push   eax
c00089af:	e8 52 05 00 00       	call   c0008f06 <UnixFile::UnixFile(int)>
c00089b4:	83 c4 10             	add    esp,0x10
c00089b7:	ba b4 f4 01 c0       	mov    edx,0xc001f4b4
c00089bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089c0:	89 10                	mov    DWORD PTR [eax],edx
c00089c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089c6:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00089cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089d1:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00089d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089dc:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00089e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089e4:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00089e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089ec:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00089f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089f7:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00089fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a02:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008a09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0d:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a18:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008a1f:	83 ec 0c             	sub    esp,0xc
c0008a22:	6a 01                	push   0x1
c0008a24:	e8 20 09 00 00       	call   c0009349 <Virt::allocateKernelVirtualPages(int)>
c0008a29:	83 c4 10             	add    esp,0x10
c0008a2c:	89 c2                	mov    edx,eax
c0008a2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a32:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008a35:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c0008a3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a3f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008a42:	89 c6                	mov    esi,eax
c0008a44:	e8 f8 f0 ff ff       	call   c0007b41 <Phys::allocatePage()>
c0008a49:	68 05 0c 00 00       	push   0xc05
c0008a4e:	56                   	push   esi
c0008a4f:	50                   	push   eax
c0008a50:	53                   	push   ebx
c0008a51:	e8 b6 0f 00 00       	call   c0009a0c <VAS::mapPage(unsigned long, unsigned long, int)>
c0008a56:	83 c4 10             	add    esp,0x10
c0008a59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a5d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008a60:	83 ec 04             	sub    esp,0x4
c0008a63:	68 a0 0f 00 00       	push   0xfa0
c0008a68:	6a 00                	push   0x0
c0008a6a:	50                   	push   eax
c0008a6b:	e8 50 7a ff ff       	call   c00004c0 <memset>
c0008a70:	83 c4 10             	add    esp,0x10
c0008a73:	83 ec 04             	sub    esp,0x4
c0008a76:	6a 00                	push   0x0
c0008a78:	6a 07                	push   0x7
c0008a7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a7e:	e8 73 f8 ff ff       	call   c00082f6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008a83:	83 c4 10             	add    esp,0x10
c0008a86:	83 ec 04             	sub    esp,0x4
c0008a89:	6a 00                	push   0x0
c0008a8b:	6a 00                	push   0x0
c0008a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a91:	e8 f0 f9 ff ff       	call   c0008486 <VgaText::setCursor(int, int)>
c0008a96:	83 c4 10             	add    esp,0x10
c0008a99:	83 ec 0c             	sub    esp,0xc
c0008a9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008aa0:	e8 43 fa ff ff       	call   c00084e8 <VgaText::clearScreen()>
c0008aa5:	83 c4 10             	add    esp,0x10
c0008aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008aac:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008ab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ab4:	05 82 00 00 00       	add    eax,0x82
c0008ab9:	83 ec 04             	sub    esp,0x4
c0008abc:	68 80 00 00 00       	push   0x80
c0008ac1:	6a 00                	push   0x0
c0008ac3:	50                   	push   eax
c0008ac4:	e8 f7 79 ff ff       	call   c00004c0 <memset>
c0008ac9:	83 c4 10             	add    esp,0x10
c0008acc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ad0:	05 02 01 00 00       	add    eax,0x102
c0008ad5:	83 ec 04             	sub    esp,0x4
c0008ad8:	68 80 00 00 00       	push   0x80
c0008add:	6a 00                	push   0x0
c0008adf:	50                   	push   eax
c0008ae0:	e8 db 79 ff ff       	call   c00004c0 <memset>
c0008ae5:	83 c4 10             	add    esp,0x10
c0008ae8:	90                   	nop
c0008ae9:	83 c4 04             	add    esp,0x4
c0008aec:	5b                   	pop    ebx
c0008aed:	5e                   	pop    esi
c0008aee:	c3                   	ret    
c0008aef:	90                   	nop

c0008af0 <VgaText::receiveKey(unsigned char)>:
c0008af0:	55                   	push   ebp
c0008af1:	57                   	push   edi
c0008af2:	56                   	push   esi
c0008af3:	53                   	push   ebx
c0008af4:	83 ec 1c             	sub    esp,0x1c
c0008af7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0008afb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008aff:	89 f0                	mov    eax,esi
c0008b01:	84 c0                	test   al,al
c0008b03:	0f 84 54 01 00 00    	je     c0008c5d <VgaText::receiveKey(unsigned char)+0x16d>
c0008b09:	8d bb 82 00 00 00    	lea    edi,[ebx+0x82]
c0008b0f:	3c 08                	cmp    al,0x8
c0008b11:	75 6b                	jne    c0008b7e <VgaText::receiveKey(unsigned char)+0x8e>
c0008b13:	83 ec 0c             	sub    esp,0xc
c0008b16:	57                   	push   edi
c0008b17:	e8 14 7a ff ff       	call   c0000530 <strlen>
c0008b1c:	83 c4 10             	add    esp,0x10
c0008b1f:	85 c0                	test   eax,eax
c0008b21:	0f 84 f1 00 00 00    	je     c0008c18 <VgaText::receiveKey(unsigned char)+0x128>
c0008b27:	50                   	push   eax
c0008b28:	50                   	push   eax
c0008b29:	6a 08                	push   0x8
c0008b2b:	53                   	push   ebx
c0008b2c:	e8 79 fb ff ff       	call   c00086aa <VgaText::putchar(char)>
c0008b31:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b34:	e8 f7 79 ff ff       	call   c0000530 <strlen>
c0008b39:	83 c4 10             	add    esp,0x10
c0008b3c:	8a 84 03 81 00 00 00 	mov    al,BYTE PTR [ebx+eax*1+0x81]
c0008b43:	3c 0d                	cmp    al,0xd
c0008b45:	0f 95 c1             	setne  cl
c0008b48:	3c 1f                	cmp    al,0x1f
c0008b4a:	0f 9e c2             	setle  dl
c0008b4d:	84 d1                	test   cl,dl
c0008b4f:	74 17                	je     c0008b68 <VgaText::receiveKey(unsigned char)+0x78>
c0008b51:	83 e8 08             	sub    eax,0x8
c0008b54:	3c 02                	cmp    al,0x2
c0008b56:	76 10                	jbe    c0008b68 <VgaText::receiveKey(unsigned char)+0x78>
c0008b58:	55                   	push   ebp
c0008b59:	55                   	push   ebp
c0008b5a:	68 9f f4 01 c0       	push   0xc001f49f
c0008b5f:	53                   	push   ebx
c0008b60:	e8 77 fc ff ff       	call   c00087dc <VgaText::puts(char const*)>
c0008b65:	83 c4 10             	add    esp,0x10
c0008b68:	83 ec 0c             	sub    esp,0xc
c0008b6b:	57                   	push   edi
c0008b6c:	e8 bf 79 ff ff       	call   c0000530 <strlen>
c0008b71:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008b79:	e9 97 00 00 00       	jmp    c0008c15 <VgaText::receiveKey(unsigned char)+0x125>
c0008b7e:	83 ec 0c             	sub    esp,0xc
c0008b81:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008b87:	50                   	push   eax
c0008b88:	e8 a3 79 ff ff       	call   c0000530 <strlen>
c0008b8d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b90:	89 c5                	mov    ebp,eax
c0008b92:	e8 99 79 ff ff       	call   c0000530 <strlen>
c0008b97:	83 c4 10             	add    esp,0x10
c0008b9a:	8d 44 05 03          	lea    eax,[ebp+eax*1+0x3]
c0008b9e:	3d 80 00 00 00       	cmp    eax,0x80
c0008ba3:	0f 87 b4 00 00 00    	ja     c0008c5d <VgaText::receiveKey(unsigned char)+0x16d>
c0008ba9:	8d 46 ff             	lea    eax,[esi-0x1]
c0008bac:	3c 1e                	cmp    al,0x1e
c0008bae:	8d 46 f7             	lea    eax,[esi-0x9]
c0008bb1:	0f 96 c2             	setbe  dl
c0008bb4:	3c 01                	cmp    al,0x1
c0008bb6:	0f 97 c0             	seta   al
c0008bb9:	84 c2                	test   dl,al
c0008bbb:	74 2f                	je     c0008bec <VgaText::receiveKey(unsigned char)+0xfc>
c0008bbd:	89 f0                	mov    eax,esi
c0008bbf:	3c 0d                	cmp    al,0xd
c0008bc1:	74 29                	je     c0008bec <VgaText::receiveKey(unsigned char)+0xfc>
c0008bc3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bc6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bc9:	68 a5 f4 01 c0       	push   0xc001f4a5
c0008bce:	53                   	push   ebx
c0008bcf:	e8 7a fc ff ff       	call   c000884e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008bd4:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bd7:	8d 46 40             	lea    eax,[esi+0x40]
c0008bda:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bdd:	0f b6 c0             	movzx  eax,al
c0008be0:	50                   	push   eax
c0008be1:	53                   	push   ebx
c0008be2:	e8 f5 f9 ff ff       	call   c00085dc <VgaText::putchar(char, VgaColour, VgaColour)>
c0008be7:	83 c4 20             	add    esp,0x20
c0008bea:	eb 11                	jmp    c0008bfd <VgaText::receiveKey(unsigned char)+0x10d>
c0008bec:	89 f0                	mov    eax,esi
c0008bee:	51                   	push   ecx
c0008bef:	0f be c0             	movsx  eax,al
c0008bf2:	51                   	push   ecx
c0008bf3:	50                   	push   eax
c0008bf4:	53                   	push   ebx
c0008bf5:	e8 b0 fa ff ff       	call   c00086aa <VgaText::putchar(char)>
c0008bfa:	83 c4 10             	add    esp,0x10
c0008bfd:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008c02:	89 f0                	mov    eax,esi
c0008c04:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0008c08:	52                   	push   edx
c0008c09:	52                   	push   edx
c0008c0a:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008c0e:	50                   	push   eax
c0008c0f:	57                   	push   edi
c0008c10:	e8 9b 7b ff ff       	call   c00007b0 <strcat>
c0008c15:	83 c4 10             	add    esp,0x10
c0008c18:	89 f1                	mov    ecx,esi
c0008c1a:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008c20:	b0 01                	mov    al,0x1
c0008c22:	80 f9 1c             	cmp    cl,0x1c
c0008c25:	77 0c                	ja     c0008c33 <VgaText::receiveKey(unsigned char)+0x143>
c0008c27:	b8 08 04 00 10       	mov    eax,0x10000408
c0008c2c:	d3 e8                	shr    eax,cl
c0008c2e:	f7 d0                	not    eax
c0008c30:	83 e0 01             	and    eax,0x1
c0008c33:	84 c0                	test   al,al
c0008c35:	74 04                	je     c0008c3b <VgaText::receiveKey(unsigned char)+0x14b>
c0008c37:	84 d2                	test   dl,dl
c0008c39:	74 22                	je     c0008c5d <VgaText::receiveKey(unsigned char)+0x16d>
c0008c3b:	81 c3 02 01 00 00    	add    ebx,0x102
c0008c41:	50                   	push   eax
c0008c42:	50                   	push   eax
c0008c43:	57                   	push   edi
c0008c44:	53                   	push   ebx
c0008c45:	e8 66 7b ff ff       	call   c00007b0 <strcat>
c0008c4a:	83 c4 0c             	add    esp,0xc
c0008c4d:	68 80 00 00 00       	push   0x80
c0008c52:	6a 00                	push   0x0
c0008c54:	57                   	push   edi
c0008c55:	e8 66 78 ff ff       	call   c00004c0 <memset>
c0008c5a:	83 c4 10             	add    esp,0x10
c0008c5d:	83 c4 1c             	add    esp,0x1c
c0008c60:	5b                   	pop    ebx
c0008c61:	5e                   	pop    esi
c0008c62:	5f                   	pop    edi
c0008c63:	5d                   	pop    ebp
c0008c64:	c3                   	ret    
c0008c65:	90                   	nop

c0008c66 <VgaText::doUpdate()>:
c0008c66:	c3                   	ret    

c0008c67 <newTerminal(char*)>:
c0008c67:	83 ec 28             	sub    esp,0x28
c0008c6a:	68 84 01 00 00       	push   0x184
c0008c6f:	e8 f1 eb ff ff       	call   c0007865 <malloc>
c0008c74:	5a                   	pop    edx
c0008c75:	59                   	pop    ecx
c0008c76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008c7a:	50                   	push   eax
c0008c7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008c7f:	e8 1c fd ff ff       	call   c00089a0 <VgaText::VgaText(char const*)>
c0008c84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c88:	83 c4 2c             	add    esp,0x2c
c0008c8b:	c3                   	ret    

c0008c8c <TSS::TSS()>:
c0008c8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008c90:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008c97:	90                   	nop
c0008c98:	c3                   	ret    
c0008c99:	90                   	nop
c0008c9a:	66 90                	xchg   ax,ax

c0008c9c <TSS::setESP(unsigned long)>:
c0008c9c:	55                   	push   ebp
c0008c9d:	89 e5                	mov    ebp,esp
c0008c9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ca2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ca5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008ca8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008cab:	90                   	nop
c0008cac:	5d                   	pop    ebp
c0008cad:	c3                   	ret    
c0008cae:	66 90                	xchg   ax,ax

c0008cb0 <TSS::flush()>:
c0008cb0:	55                   	push   ebp
c0008cb1:	89 e5                	mov    ebp,esp
c0008cb3:	83 ec 10             	sub    esp,0x10
c0008cb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cb9:	8b 00                	mov    eax,DWORD PTR [eax]
c0008cbb:	83 c8 03             	or     eax,0x3
c0008cbe:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008cc2:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008cc6:	66 89 d0             	mov    ax,dx
c0008cc9:	0f 00 d8             	ltr    ax
c0008ccc:	90                   	nop
c0008ccd:	c9                   	leave  
c0008cce:	c3                   	ret    
c0008ccf:	90                   	nop

c0008cd0 <TSS::setup(unsigned long, unsigned long)>:
c0008cd0:	55                   	push   ebp
c0008cd1:	89 e5                	mov    ebp,esp
c0008cd3:	83 ec 18             	sub    esp,0x18
c0008cd6:	83 ec 0c             	sub    esp,0xc
c0008cd9:	6a 68                	push   0x68
c0008cdb:	e8 85 eb ff ff       	call   c0007865 <malloc>
c0008ce0:	83 c4 10             	add    esp,0x10
c0008ce3:	89 c2                	mov    edx,eax
c0008ce5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ce8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008ceb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cf1:	83 ec 04             	sub    esp,0x4
c0008cf4:	6a 68                	push   0x68
c0008cf6:	6a 00                	push   0x0
c0008cf8:	50                   	push   eax
c0008cf9:	e8 c2 77 ff ff       	call   c00004c0 <memset>
c0008cfe:	83 c4 10             	add    esp,0x10
c0008d01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d07:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008d0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d13:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008d19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d1f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008d22:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008d25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d2b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008d31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d37:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008d3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d43:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008d49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d4f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008d55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d5b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008d61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d67:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008d6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d73:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008d76:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008d79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d7f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008d82:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008d85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d8b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008d92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d98:	0f 20 da             	mov    edx,cr3
c0008d9b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008d9e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008da1:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008da4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008da7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008daa:	83 ec 08             	sub    esp,0x8
c0008dad:	50                   	push   eax
c0008dae:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008db1:	50                   	push   eax
c0008db2:	e8 33 e3 ff ff       	call   c00070ea <GDTEntry::setBase(unsigned int)>
c0008db7:	83 c4 10             	add    esp,0x10
c0008dba:	83 ec 08             	sub    esp,0x8
c0008dbd:	6a 68                	push   0x68
c0008dbf:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008dc2:	50                   	push   eax
c0008dc3:	e8 3e e3 ff ff       	call   c0007106 <GDTEntry::setLimit(unsigned int)>
c0008dc8:	83 c4 10             	add    esp,0x10
c0008dcb:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008dcf:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008dd2:	83 e0 0f             	and    eax,0xf
c0008dd5:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008dd8:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008ddb:	83 c8 40             	or     eax,0x40
c0008dde:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008de1:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0008de6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008dec:	05 78 01 00 00       	add    eax,0x178
c0008df1:	83 ec 04             	sub    esp,0x4
c0008df4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008df7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008dfa:	50                   	push   eax
c0008dfb:	e8 3a e3 ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c0008e00:	83 c4 10             	add    esp,0x10
c0008e03:	89 c2                	mov    edx,eax
c0008e05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e08:	89 10                	mov    DWORD PTR [eax],edx
c0008e0a:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0008e0f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008e15:	05 78 01 00 00       	add    eax,0x178
c0008e1a:	83 ec 0c             	sub    esp,0xc
c0008e1d:	50                   	push   eax
c0008e1e:	e8 41 e3 ff ff       	call   c0007164 <GDT::flush()>
c0008e23:	83 c4 10             	add    esp,0x10
c0008e26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e29:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e2b:	c9                   	leave  
c0008e2c:	c3                   	ret    
c0008e2d:	90                   	nop

c0008e2e <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008e2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e32:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008e36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e39:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008e3e:	75 08                	jne    c0008e48 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008e40:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008e46:	eb 38                	jmp    c0008e80 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008e48:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008e4d:	75 17                	jne    c0008e66 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008e4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008e54:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008e57:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008e5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0008e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e63:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008e66:	89 c1                	mov    ecx,eax
c0008e68:	83 e1 fd             	and    ecx,0xfffffffd
c0008e6b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008e71:	74 cd                	je     c0008e40 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008e73:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008e78:	83 e0 ef             	and    eax,0xffffffef
c0008e7b:	83 f8 08             	cmp    eax,0x8
c0008e7e:	76 c0                	jbe    c0008e40 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008e80:	31 c0                	xor    eax,eax
c0008e82:	c3                   	ret    
c0008e83:	90                   	nop

c0008e84 <ReservedFilename::isAtty()>:
c0008e84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e88:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e8b:	31 c0                	xor    eax,eax
c0008e8d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008e93:	74 09                	je     c0008e9e <ReservedFilename::isAtty()+0x1a>
c0008e95:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008e9b:	0f 94 c0             	sete   al
c0008e9e:	c3                   	ret    
c0008e9f:	90                   	nop

c0008ea0 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008ea0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008ea4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008ea8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008eab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008eaf:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008eb4:	75 08                	jne    c0008ebe <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008eb6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008ebc:	eb 3d                	jmp    c0008efb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008ebe:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008ec3:	75 17                	jne    c0008edc <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008ec5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008eca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008ecd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008ed3:	8b 10                	mov    edx,DWORD PTR [eax]
c0008ed5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008ed9:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008edc:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008ee1:	75 04                	jne    c0008ee7 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008ee3:	89 0a                	mov    DWORD PTR [edx],ecx
c0008ee5:	eb 14                	jmp    c0008efb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008ee7:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008eec:	74 c8                	je     c0008eb6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008eee:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008ef3:	83 e0 ef             	and    eax,0xffffffef
c0008ef6:	83 f8 08             	cmp    eax,0x8
c0008ef9:	76 bb                	jbe    c0008eb6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008efb:	31 c0                	xor    eax,eax
c0008efd:	c3                   	ret    

c0008efe <UnixFile::getFileDescriptor()>:
c0008efe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f05:	c3                   	ret    

c0008f06 <UnixFile::UnixFile(int)>:
c0008f06:	53                   	push   ebx
c0008f07:	83 ec 28             	sub    esp,0x28
c0008f0a:	ba 7c f5 01 c0       	mov    edx,0xc001f57c
c0008f0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008f13:	89 10                	mov    DWORD PTR [eax],edx
c0008f15:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008f1d:	0f 8f 8c 01 00 00    	jg     c00090af <UnixFile::UnixFile(int)+0x1a9>
c0008f23:	a1 40 16 02 c0       	mov    eax,ds:0xc0021640
c0008f28:	8d 50 01             	lea    edx,[eax+0x1]
c0008f2b:	89 15 40 16 02 c0    	mov    DWORD PTR ds:0xc0021640,edx
c0008f31:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008f35:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008f38:	83 ec 08             	sub    esp,0x8
c0008f3b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008f3f:	68 98 3f 02 c0       	push   0xc0023f98
c0008f44:	e8 ff 50 01 00       	call   c001e048 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008f49:	83 c4 10             	add    esp,0x10
c0008f4c:	a0 94 3f 02 c0       	mov    al,ds:0xc0023f94
c0008f51:	83 f0 01             	xor    eax,0x1
c0008f54:	84 c0                	test   al,al
c0008f56:	0f 84 54 01 00 00    	je     c00090b0 <UnixFile::UnixFile(int)+0x1aa>
c0008f5c:	c6 05 94 3f 02 c0 01 	mov    BYTE PTR ds:0xc0023f94,0x1
c0008f63:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008f6b:	83 ec 0c             	sub    esp,0xc
c0008f6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008f72:	e8 ee e8 ff ff       	call   c0007865 <malloc>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 c3                	mov    ebx,eax
c0008f7c:	83 ec 08             	sub    esp,0x8
c0008f7f:	68 03 ff ff 0f       	push   0xfffff03
c0008f84:	53                   	push   ebx
c0008f85:	e8 2c 01 00 00       	call   c00090b6 <ReservedFilename::ReservedFilename(int)>
c0008f8a:	83 c4 10             	add    esp,0x10
c0008f8d:	89 1d 8c 3f 02 c0    	mov    DWORD PTR ds:0xc0023f8c,ebx
c0008f93:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008f9b:	83 ec 0c             	sub    esp,0xc
c0008f9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008fa2:	e8 be e8 ff ff       	call   c0007865 <malloc>
c0008fa7:	83 c4 10             	add    esp,0x10
c0008faa:	89 c3                	mov    ebx,eax
c0008fac:	83 ec 08             	sub    esp,0x8
c0008faf:	68 01 ff ff 0f       	push   0xfffff01
c0008fb4:	53                   	push   ebx
c0008fb5:	e8 fc 00 00 00       	call   c00090b6 <ReservedFilename::ReservedFilename(int)>
c0008fba:	83 c4 10             	add    esp,0x10
c0008fbd:	89 1d 90 3f 02 c0    	mov    DWORD PTR ds:0xc0023f90,ebx
c0008fc3:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008fcb:	83 ec 0c             	sub    esp,0xc
c0008fce:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008fd2:	e8 8e e8 ff ff       	call   c0007865 <malloc>
c0008fd7:	83 c4 10             	add    esp,0x10
c0008fda:	89 c3                	mov    ebx,eax
c0008fdc:	83 ec 08             	sub    esp,0x8
c0008fdf:	68 00 ff ff 0f       	push   0xfffff00
c0008fe4:	53                   	push   ebx
c0008fe5:	e8 cc 00 00 00       	call   c00090b6 <ReservedFilename::ReservedFilename(int)>
c0008fea:	83 c4 10             	add    esp,0x10
c0008fed:	89 1d 84 3f 02 c0    	mov    DWORD PTR ds:0xc0023f84,ebx
c0008ff3:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008ffb:	83 ec 0c             	sub    esp,0xc
c0008ffe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009002:	e8 5e e8 ff ff       	call   c0007865 <malloc>
c0009007:	83 c4 10             	add    esp,0x10
c000900a:	89 c3                	mov    ebx,eax
c000900c:	83 ec 08             	sub    esp,0x8
c000900f:	68 02 ff ff 0f       	push   0xfffff02
c0009014:	53                   	push   ebx
c0009015:	e8 9c 00 00 00       	call   c00090b6 <ReservedFilename::ReservedFilename(int)>
c000901a:	83 c4 10             	add    esp,0x10
c000901d:	89 1d 88 3f 02 c0    	mov    DWORD PTR ds:0xc0023f88,ebx
c0009023:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000902b:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0009030:	7f 7e                	jg     c00090b0 <UnixFile::UnixFile(int)+0x1aa>
c0009032:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000903a:	83 ec 0c             	sub    esp,0xc
c000903d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009041:	e8 1f e8 ff ff       	call   c0007865 <malloc>
c0009046:	83 c4 10             	add    esp,0x10
c0009049:	89 c3                	mov    ebx,eax
c000904b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000904f:	05 10 ff ff 0f       	add    eax,0xfffff10
c0009054:	83 ec 08             	sub    esp,0x8
c0009057:	50                   	push   eax
c0009058:	53                   	push   ebx
c0009059:	e8 58 00 00 00       	call   c00090b6 <ReservedFilename::ReservedFilename(int)>
c000905e:	83 c4 10             	add    esp,0x10
c0009061:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009065:	89 1c 85 60 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0a0],ebx
c000906c:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009074:	83 ec 0c             	sub    esp,0xc
c0009077:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000907b:	e8 e5 e7 ff ff       	call   c0007865 <malloc>
c0009080:	83 c4 10             	add    esp,0x10
c0009083:	89 c3                	mov    ebx,eax
c0009085:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009089:	05 20 ff ff 0f       	add    eax,0xfffff20
c000908e:	83 ec 08             	sub    esp,0x8
c0009091:	50                   	push   eax
c0009092:	53                   	push   ebx
c0009093:	e8 1e 00 00 00       	call   c00090b6 <ReservedFilename::ReservedFilename(int)>
c0009098:	83 c4 10             	add    esp,0x10
c000909b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000909f:	89 1c 85 20 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0e0],ebx
c00090a6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00090aa:	e9 7c ff ff ff       	jmp    c000902b <UnixFile::UnixFile(int)+0x125>
c00090af:	90                   	nop
c00090b0:	83 c4 28             	add    esp,0x28
c00090b3:	5b                   	pop    ebx
c00090b4:	c3                   	ret    
c00090b5:	90                   	nop

c00090b6 <ReservedFilename::ReservedFilename(int)>:
c00090b6:	83 ec 0c             	sub    esp,0xc
c00090b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090bd:	83 ec 08             	sub    esp,0x8
c00090c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c4:	50                   	push   eax
c00090c5:	e8 3c fe ff ff       	call   c0008f06 <UnixFile::UnixFile(int)>
c00090ca:	83 c4 10             	add    esp,0x10
c00090cd:	ba 98 f5 01 c0       	mov    edx,0xc001f598
c00090d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d6:	89 10                	mov    DWORD PTR [eax],edx
c00090d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090e0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00090e3:	90                   	nop
c00090e4:	83 c4 0c             	add    esp,0xc
c00090e7:	c3                   	ret    

c00090e8 <UnixFile::~UnixFile()>:
c00090e8:	83 ec 1c             	sub    esp,0x1c
c00090eb:	ba 7c f5 01 c0       	mov    edx,0xc001f57c
c00090f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00090f4:	89 10                	mov    DWORD PTR [eax],edx
c00090f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00090fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090fd:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0009102:	7f 73                	jg     c0009177 <UnixFile::~UnixFile()+0x8f>
c0009104:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000910c:	83 ec 0c             	sub    esp,0xc
c000910f:	68 98 3f 02 c0       	push   0xc0023f98
c0009114:	e8 03 50 01 00       	call   c001e11c <LinkedList<UnixFile>::getFirstElement()>
c0009119:	83 c4 10             	add    esp,0x10
c000911c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009120:	83 ec 0c             	sub    esp,0xc
c0009123:	68 98 3f 02 c0       	push   0xc0023f98
c0009128:	e8 f7 4f 01 00       	call   c001e124 <LinkedList<UnixFile>::removeFirst()>
c000912d:	83 c4 10             	add    esp,0x10
c0009130:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009134:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009138:	74 40                	je     c000917a <UnixFile::~UnixFile()+0x92>
c000913a:	83 ec 08             	sub    esp,0x8
c000913d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009141:	68 98 3f 02 c0       	push   0xc0023f98
c0009146:	e8 fd 4e 01 00       	call   c001e048 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000914b:	83 c4 10             	add    esp,0x10
c000914e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009152:	8d 50 01             	lea    edx,[eax+0x1]
c0009155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009159:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000915e:	0f 94 c0             	sete   al
c0009161:	84 c0                	test   al,al
c0009163:	74 a7                	je     c000910c <UnixFile::~UnixFile()+0x24>
c0009165:	83 ec 0c             	sub    esp,0xc
c0009168:	68 54 f5 01 c0       	push   0xc001f554
c000916d:	e8 55 72 00 00       	call   c00103c7 <KePanic(char const*)>
c0009172:	83 c4 10             	add    esp,0x10
c0009175:	eb 95                	jmp    c000910c <UnixFile::~UnixFile()+0x24>
c0009177:	90                   	nop
c0009178:	eb 01                	jmp    c000917b <UnixFile::~UnixFile()+0x93>
c000917a:	90                   	nop
c000917b:	90                   	nop
c000917c:	83 c4 1c             	add    esp,0x1c
c000917f:	c3                   	ret    

c0009180 <UnixFile::~UnixFile()>:
c0009180:	83 ec 0c             	sub    esp,0xc
c0009183:	83 ec 0c             	sub    esp,0xc
c0009186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000918a:	e8 59 ff ff ff       	call   c00090e8 <UnixFile::~UnixFile()>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	83 ec 08             	sub    esp,0x8
c0009195:	6a 0c                	push   0xc
c0009197:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000919b:	e8 70 13 00 00       	call   c000a510 <operator delete(void*, unsigned long)>
c00091a0:	83 c4 10             	add    esp,0x10
c00091a3:	83 c4 0c             	add    esp,0xc
c00091a6:	c3                   	ret    
c00091a7:	90                   	nop

c00091a8 <ReservedFilename::~ReservedFilename()>:
c00091a8:	83 ec 0c             	sub    esp,0xc
c00091ab:	ba 98 f5 01 c0       	mov    edx,0xc001f598
c00091b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091b4:	89 10                	mov    DWORD PTR [eax],edx
c00091b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091ba:	83 ec 0c             	sub    esp,0xc
c00091bd:	50                   	push   eax
c00091be:	e8 25 ff ff ff       	call   c00090e8 <UnixFile::~UnixFile()>
c00091c3:	83 c4 10             	add    esp,0x10
c00091c6:	90                   	nop
c00091c7:	83 c4 0c             	add    esp,0xc
c00091ca:	c3                   	ret    
c00091cb:	90                   	nop

c00091cc <ReservedFilename::~ReservedFilename()>:
c00091cc:	83 ec 0c             	sub    esp,0xc
c00091cf:	83 ec 0c             	sub    esp,0xc
c00091d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00091d6:	e8 cd ff ff ff       	call   c00091a8 <ReservedFilename::~ReservedFilename()>
c00091db:	83 c4 10             	add    esp,0x10
c00091de:	83 ec 08             	sub    esp,0x8
c00091e1:	6a 0c                	push   0xc
c00091e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00091e7:	e8 24 13 00 00       	call   c000a510 <operator delete(void*, unsigned long)>
c00091ec:	83 c4 10             	add    esp,0x10
c00091ef:	83 c4 0c             	add    esp,0xc
c00091f2:	c3                   	ret    

c00091f3 <getFromFileDescriptor(int)>:
c00091f3:	53                   	push   ebx
c00091f4:	83 ec 08             	sub    esp,0x8
c00091f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00091fb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0009201:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0009207:	7f 2c                	jg     c0009235 <getFromFileDescriptor(int)+0x42>
c0009209:	83 ec 0c             	sub    esp,0xc
c000920c:	68 98 3f 02 c0       	push   0xc0023f98
c0009211:	e8 06 4f 01 00       	call   c001e11c <LinkedList<UnixFile>::getFirstElement()>
c0009216:	83 c4 10             	add    esp,0x10
c0009219:	85 c0                	test   eax,eax
c000921b:	75 04                	jne    c0009221 <getFromFileDescriptor(int)+0x2e>
c000921d:	31 c0                	xor    eax,eax
c000921f:	eb 6e                	jmp    c000928f <getFromFileDescriptor(int)+0x9c>
c0009221:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009224:	74 69                	je     c000928f <getFromFileDescriptor(int)+0x9c>
c0009226:	52                   	push   edx
c0009227:	52                   	push   edx
c0009228:	50                   	push   eax
c0009229:	68 98 3f 02 c0       	push   0xc0023f98
c000922e:	e8 93 4f 01 00       	call   c001e1c6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0009233:	eb e1                	jmp    c0009216 <getFromFileDescriptor(int)+0x23>
c0009235:	a1 8c 3f 02 c0       	mov    eax,ds:0xc0023f8c
c000923a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009240:	74 4d                	je     c000928f <getFromFileDescriptor(int)+0x9c>
c0009242:	a1 90 3f 02 c0       	mov    eax,ds:0xc0023f90
c0009247:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000924d:	74 40                	je     c000928f <getFromFileDescriptor(int)+0x9c>
c000924f:	a1 88 3f 02 c0       	mov    eax,ds:0xc0023f88
c0009254:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000925a:	74 33                	je     c000928f <getFromFileDescriptor(int)+0x9c>
c000925c:	a1 84 3f 02 c0       	mov    eax,ds:0xc0023f84
c0009261:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009267:	74 26                	je     c000928f <getFromFileDescriptor(int)+0x9c>
c0009269:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000926f:	83 f8 08             	cmp    eax,0x8
c0009272:	77 09                	ja     c000927d <getFromFileDescriptor(int)+0x8a>
c0009274:	8b 04 85 60 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0a0]
c000927b:	eb 12                	jmp    c000928f <getFromFileDescriptor(int)+0x9c>
c000927d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009283:	83 fb 08             	cmp    ebx,0x8
c0009286:	77 95                	ja     c000921d <getFromFileDescriptor(int)+0x2a>
c0009288:	8b 04 9d 20 3f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdc0e0]
c000928f:	83 c4 08             	add    esp,0x8
c0009292:	5b                   	pop    ebx
c0009293:	c3                   	ret    

c0009294 <__static_initialization_and_destruction_0(int, int)>:
c0009294:	83 ec 0c             	sub    esp,0xc
c0009297:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000929c:	75 34                	jne    c00092d2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000929e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00092a6:	75 2a                	jne    c00092d2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00092a8:	83 ec 0c             	sub    esp,0xc
c00092ab:	68 98 3f 02 c0       	push   0xc0023f98
c00092b0:	e8 51 4d 01 00       	call   c001e006 <LinkedList<UnixFile>::LinkedList()>
c00092b5:	83 c4 10             	add    esp,0x10
c00092b8:	83 ec 04             	sub    esp,0x4
c00092bb:	68 c8 15 02 c0       	push   0xc00215c8
c00092c0:	68 98 3f 02 c0       	push   0xc0023f98
c00092c5:	68 04 e0 01 c0       	push   0xc001e004
c00092ca:	e8 f1 11 00 00       	call   c000a4c0 <__cxa_atexit>
c00092cf:	83 c4 10             	add    esp,0x10
c00092d2:	90                   	nop
c00092d3:	83 c4 0c             	add    esp,0xc
c00092d6:	c3                   	ret    

c00092d7 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00092d7:	83 ec 0c             	sub    esp,0xc
c00092da:	83 ec 08             	sub    esp,0x8
c00092dd:	68 ff ff 00 00       	push   0xffff
c00092e2:	6a 01                	push   0x1
c00092e4:	e8 ab ff ff ff       	call   c0009294 <__static_initialization_and_destruction_0(int, int)>
c00092e9:	83 c4 10             	add    esp,0x10
c00092ec:	83 c4 0c             	add    esp,0xc
c00092ef:	c3                   	ret    

c00092f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00092f0:	53                   	push   ebx
c00092f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00092f5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00092f9:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00092ff:	89 c8                	mov    eax,ecx
c0009301:	d1 e8                	shr    eax,1
c0009303:	03 05 48 16 02 c0    	add    eax,DWORD PTR ds:0xc0021648
c0009309:	83 e1 01             	and    ecx,0x1
c000930c:	8a 10                	mov    dl,BYTE PTR [eax]
c000930e:	75 09                	jne    c0009319 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0009310:	83 e2 f0             	and    edx,0xfffffff0
c0009313:	09 da                	or     edx,ebx
c0009315:	88 10                	mov    BYTE PTR [eax],dl
c0009317:	5b                   	pop    ebx
c0009318:	c3                   	ret    
c0009319:	c1 e3 04             	shl    ebx,0x4
c000931c:	83 e2 0f             	and    edx,0xf
c000931f:	09 da                	or     edx,ebx
c0009321:	88 10                	mov    BYTE PTR [eax],dl
c0009323:	5b                   	pop    ebx
c0009324:	c3                   	ret    

c0009325 <Virt::getPageState(unsigned long)>:
c0009325:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009329:	8b 0d 48 16 02 c0    	mov    ecx,DWORD PTR ds:0xc0021648
c000932f:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009335:	89 d0                	mov    eax,edx
c0009337:	d1 e8                	shr    eax,1
c0009339:	83 e2 01             	and    edx,0x1
c000933c:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000933f:	75 04                	jne    c0009345 <Virt::getPageState(unsigned long)+0x20>
c0009341:	83 e0 0f             	and    eax,0xf
c0009344:	c3                   	ret    
c0009345:	c0 e8 04             	shr    al,0x4
c0009348:	c3                   	ret    

c0009349 <Virt::allocateKernelVirtualPages(int)>:
c0009349:	55                   	push   ebp
c000934a:	31 ed                	xor    ebp,ebp
c000934c:	57                   	push   edi
c000934d:	56                   	push   esi
c000934e:	53                   	push   ebx
c000934f:	31 db                	xor    ebx,ebx
c0009351:	83 ec 1c             	sub    esp,0x1c
c0009354:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009358:	8b 3d 44 16 02 c0    	mov    edi,DWORD PTR ds:0xc0021644
c000935e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009363:	57                   	push   edi
c0009364:	e8 bc ff ff ff       	call   c0009325 <Virt::getPageState(unsigned long)>
c0009369:	5a                   	pop    edx
c000936a:	84 c0                	test   al,al
c000936c:	75 3a                	jne    c00093a8 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000936e:	85 db                	test   ebx,ebx
c0009370:	75 02                	jne    c0009374 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0009372:	89 fd                	mov    ebp,edi
c0009374:	43                   	inc    ebx
c0009375:	39 f3                	cmp    ebx,esi
c0009377:	74 5a                	je     c00093d3 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0009379:	47                   	inc    edi
c000937a:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0009380:	76 31                	jbe    c00093b3 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0009382:	c7 05 44 16 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0021644,0xc8000
c000938c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0009391:	75 28                	jne    c00093bb <Virt::allocateKernelVirtualPages(int)+0x72>
c0009393:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009398:	bf 00 80 0c 00       	mov    edi,0xc8000
c000939d:	57                   	push   edi
c000939e:	e8 82 ff ff ff       	call   c0009325 <Virt::getPageState(unsigned long)>
c00093a3:	5a                   	pop    edx
c00093a4:	84 c0                	test   al,al
c00093a6:	74 c6                	je     c000936e <Virt::allocateKernelVirtualPages(int)+0x25>
c00093a8:	31 db                	xor    ebx,ebx
c00093aa:	47                   	inc    edi
c00093ab:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00093b1:	77 cf                	ja     c0009382 <Virt::allocateKernelVirtualPages(int)+0x39>
c00093b3:	89 3d 44 16 02 c0    	mov    DWORD PTR ds:0xc0021644,edi
c00093b9:	eb a8                	jmp    c0009363 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00093bb:	83 ec 0c             	sub    esp,0xc
c00093be:	68 ac f5 01 c0       	push   0xc001f5ac
c00093c3:	e8 ff 6f 00 00       	call   c00103c7 <KePanic(char const*)>
c00093c8:	8b 3d 44 16 02 c0    	mov    edi,DWORD PTR ds:0xc0021644
c00093ce:	83 c4 10             	add    esp,0x10
c00093d1:	eb 90                	jmp    c0009363 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00093d3:	89 2d 44 16 02 c0    	mov    DWORD PTR ds:0xc0021644,ebp
c00093d9:	4b                   	dec    ebx
c00093da:	74 5f                	je     c000943b <Virt::allocateKernelVirtualPages(int)+0xf2>
c00093dc:	85 f6                	test   esi,esi
c00093de:	74 3d                	je     c000941d <Virt::allocateKernelVirtualPages(int)+0xd4>
c00093e0:	89 e8                	mov    eax,ebp
c00093e2:	31 db                	xor    ebx,ebx
c00093e4:	8d 7e ff             	lea    edi,[esi-0x1]
c00093e7:	eb 14                	jmp    c00093fd <Virt::allocateKernelVirtualPages(int)+0xb4>
c00093e9:	6a 01                	push   0x1
c00093eb:	43                   	inc    ebx
c00093ec:	50                   	push   eax
c00093ed:	e8 fe fe ff ff       	call   c00092f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00093f2:	58                   	pop    eax
c00093f3:	39 f3                	cmp    ebx,esi
c00093f5:	5a                   	pop    edx
c00093f6:	74 25                	je     c000941d <Virt::allocateKernelVirtualPages(int)+0xd4>
c00093f8:	a1 44 16 02 c0       	mov    eax,ds:0xc0021644
c00093fd:	8d 50 01             	lea    edx,[eax+0x1]
c0009400:	85 db                	test   ebx,ebx
c0009402:	89 15 44 16 02 c0    	mov    DWORD PTR ds:0xc0021644,edx
c0009408:	74 20                	je     c000942a <Virt::allocateKernelVirtualPages(int)+0xe1>
c000940a:	39 df                	cmp    edi,ebx
c000940c:	75 db                	jne    c00093e9 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000940e:	6a 03                	push   0x3
c0009410:	43                   	inc    ebx
c0009411:	50                   	push   eax
c0009412:	e8 d9 fe ff ff       	call   c00092f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009417:	59                   	pop    ecx
c0009418:	39 f3                	cmp    ebx,esi
c000941a:	58                   	pop    eax
c000941b:	75 db                	jne    c00093f8 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000941d:	83 c4 1c             	add    esp,0x1c
c0009420:	89 e8                	mov    eax,ebp
c0009422:	5b                   	pop    ebx
c0009423:	c1 e0 0c             	shl    eax,0xc
c0009426:	5e                   	pop    esi
c0009427:	5f                   	pop    edi
c0009428:	5d                   	pop    ebp
c0009429:	c3                   	ret    
c000942a:	6a 02                	push   0x2
c000942c:	bb 01 00 00 00       	mov    ebx,0x1
c0009431:	50                   	push   eax
c0009432:	e8 b9 fe ff ff       	call   c00092f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009437:	58                   	pop    eax
c0009438:	5a                   	pop    edx
c0009439:	eb bd                	jmp    c00093f8 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000943b:	6a 04                	push   0x4
c000943d:	8d 45 01             	lea    eax,[ebp+0x1]
c0009440:	55                   	push   ebp
c0009441:	a3 44 16 02 c0       	mov    ds:0xc0021644,eax
c0009446:	e8 a5 fe ff ff       	call   c00092f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000944b:	59                   	pop    ecx
c000944c:	89 e8                	mov    eax,ebp
c000944e:	5b                   	pop    ebx
c000944f:	c1 e0 0c             	shl    eax,0xc
c0009452:	83 c4 1c             	add    esp,0x1c
c0009455:	5b                   	pop    ebx
c0009456:	5e                   	pop    esi
c0009457:	5f                   	pop    edi
c0009458:	5d                   	pop    ebp
c0009459:	c3                   	ret    

c000945a <Virt::freeSwapfilePage(unsigned long)>:
c000945a:	53                   	push   ebx
c000945b:	8b 15 ac 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023fac
c0009461:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009465:	b8 01 00 00 00       	mov    eax,0x1
c000946a:	89 cb                	mov    ebx,ecx
c000946c:	d3 e0                	shl    eax,cl
c000946e:	c1 eb 05             	shr    ebx,0x5
c0009471:	f7 d0                	not    eax
c0009473:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0009476:	5b                   	pop    ebx
c0009477:	c3                   	ret    

c0009478 <Virt::swapIDToSector(unsigned long)>:
c0009478:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000947c:	0f af 05 4c 16 02 c0 	imul   eax,DWORD PTR ds:0xc002164c
c0009483:	03 05 54 16 02 c0    	add    eax,DWORD PTR ds:0xc0021654
c0009489:	c3                   	ret    

c000948a <Virt::allocateSwapfilePage()>:
c000948a:	55                   	push   ebp
c000948b:	31 d2                	xor    edx,edx
c000948d:	57                   	push   edi
c000948e:	56                   	push   esi
c000948f:	53                   	push   ebx
c0009490:	83 ec 0c             	sub    esp,0xc
c0009493:	8b 0d 4c 16 02 c0    	mov    ecx,DWORD PTR ds:0xc002164c
c0009499:	a1 50 16 02 c0       	mov    eax,ds:0xc0021650
c000949e:	f7 f1                	div    ecx
c00094a0:	39 0d 50 16 02 c0    	cmp    DWORD PTR ds:0xc0021650,ecx
c00094a6:	72 2d                	jb     c00094d5 <Virt::allocateSwapfilePage()+0x4b>
c00094a8:	8b 35 ac 3f 02 c0    	mov    esi,DWORD PTR ds:0xc0023fac
c00094ae:	8b 16                	mov    edx,DWORD PTR [esi]
c00094b0:	f6 c2 01             	test   dl,0x1
c00094b3:	74 3c                	je     c00094f1 <Virt::allocateSwapfilePage()+0x67>
c00094b5:	31 c9                	xor    ecx,ecx
c00094b7:	bf 01 00 00 00       	mov    edi,0x1
c00094bc:	eb 12                	jmp    c00094d0 <Virt::allocateSwapfilePage()+0x46>
c00094be:	89 fd                	mov    ebp,edi
c00094c0:	89 ca                	mov    edx,ecx
c00094c2:	d3 e5                	shl    ebp,cl
c00094c4:	c1 ea 05             	shr    edx,0x5
c00094c7:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00094ca:	8b 13                	mov    edx,DWORD PTR [ebx]
c00094cc:	85 ea                	test   edx,ebp
c00094ce:	74 2a                	je     c00094fa <Virt::allocateSwapfilePage()+0x70>
c00094d0:	41                   	inc    ecx
c00094d1:	39 c8                	cmp    eax,ecx
c00094d3:	77 e9                	ja     c00094be <Virt::allocateSwapfilePage()+0x34>
c00094d5:	83 ec 0c             	sub    esp,0xc
c00094d8:	68 13 f7 01 c0       	push   0xc001f713
c00094dd:	e8 e5 6e 00 00       	call   c00103c7 <KePanic(char const*)>
c00094e2:	83 c4 10             	add    esp,0x10
c00094e5:	31 c9                	xor    ecx,ecx
c00094e7:	83 c4 0c             	add    esp,0xc
c00094ea:	89 c8                	mov    eax,ecx
c00094ec:	5b                   	pop    ebx
c00094ed:	5e                   	pop    esi
c00094ee:	5f                   	pop    edi
c00094ef:	5d                   	pop    ebp
c00094f0:	c3                   	ret    
c00094f1:	89 f3                	mov    ebx,esi
c00094f3:	bd 01 00 00 00       	mov    ebp,0x1
c00094f8:	31 c9                	xor    ecx,ecx
c00094fa:	09 ea                	or     edx,ebp
c00094fc:	89 c8                	mov    eax,ecx
c00094fe:	89 13                	mov    DWORD PTR [ebx],edx
c0009500:	83 c4 0c             	add    esp,0xc
c0009503:	5b                   	pop    ebx
c0009504:	5e                   	pop    esi
c0009505:	5f                   	pop    edi
c0009506:	5d                   	pop    ebp
c0009507:	c3                   	ret    

c0009508 <Virt::virtualMemorySetup()>:
c0009508:	53                   	push   ebx
c0009509:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000950e:	6a 0f                	push   0xf
c0009510:	53                   	push   ebx
c0009511:	43                   	inc    ebx
c0009512:	e8 d9 fd ff ff       	call   c00092f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009517:	58                   	pop    eax
c0009518:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000951e:	5a                   	pop    edx
c000951f:	75 ed                	jne    c000950e <Virt::virtualMemorySetup()+0x6>
c0009521:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009526:	6a 00                	push   0x0
c0009528:	53                   	push   ebx
c0009529:	43                   	inc    ebx
c000952a:	e8 c1 fd ff ff       	call   c00092f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000952f:	59                   	pop    ecx
c0009530:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009536:	58                   	pop    eax
c0009537:	75 ed                	jne    c0009526 <Virt::virtualMemorySetup()+0x1e>
c0009539:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000953e:	6a 0f                	push   0xf
c0009540:	53                   	push   ebx
c0009541:	43                   	inc    ebx
c0009542:	e8 a9 fd ff ff       	call   c00092f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009547:	58                   	pop    eax
c0009548:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000954e:	5a                   	pop    edx
c000954f:	75 ed                	jne    c000953e <Virt::virtualMemorySetup()+0x36>
c0009551:	5b                   	pop    ebx
c0009552:	c3                   	ret    

c0009553 <Virt::setupPageSwapping(int)>:
c0009553:	53                   	push   ebx
c0009554:	83 ec 0c             	sub    esp,0xc
c0009557:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000955b:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c0009560:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0009566:	8b 10                	mov    edx,DWORD PTR [eax]
c0009568:	53                   	push   ebx
c0009569:	c1 e3 0b             	shl    ebx,0xb
c000956c:	68 2a f7 01 c0       	push   0xc001f72a
c0009571:	50                   	push   eax
c0009572:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0009575:	89 1d 50 16 02 c0    	mov    DWORD PTR ds:0xc0021650,ebx
c000957b:	c6 05 58 16 02 c0 43 	mov    BYTE PTR ds:0xc0021658,0x43
c0009582:	c1 eb 08             	shr    ebx,0x8
c0009585:	a3 54 16 02 c0       	mov    ds:0xc0021654,eax
c000958a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000958d:	c7 05 4c 16 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002164c,0x8
c0009597:	e8 c9 e2 ff ff       	call   c0007865 <malloc>
c000959c:	83 c4 0c             	add    esp,0xc
c000959f:	89 c1                	mov    ecx,eax
c00095a1:	a3 ac 3f 02 c0       	mov    ds:0xc0023fac,eax
c00095a6:	31 d2                	xor    edx,edx
c00095a8:	a1 50 16 02 c0       	mov    eax,ds:0xc0021650
c00095ad:	f7 35 4c 16 02 c0    	div    DWORD PTR ds:0xc002164c
c00095b3:	c1 e8 05             	shr    eax,0x5
c00095b6:	50                   	push   eax
c00095b7:	6a 00                	push   0x0
c00095b9:	51                   	push   ecx
c00095ba:	e8 01 6f ff ff       	call   c00004c0 <memset>
c00095bf:	83 c4 18             	add    esp,0x18
c00095c2:	5b                   	pop    ebx
c00095c3:	c3                   	ret    

c00095c4 <VAS::VAS(VAS*)>:
c00095c4:	83 ec 0c             	sub    esp,0xc
c00095c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095cb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00095d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095d6:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00095dd:	83 ec 0c             	sub    esp,0xc
c00095e0:	68 cc f5 01 c0       	push   0xc001f5cc
c00095e5:	e8 dd 6d 00 00       	call   c00103c7 <KePanic(char const*)>
c00095ea:	83 c4 10             	add    esp,0x10
c00095ed:	90                   	nop
c00095ee:	83 c4 0c             	add    esp,0xc
c00095f1:	c3                   	ret    

c00095f2 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00095f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00095f6:	89 c2                	mov    edx,eax
c00095f8:	c1 e8 0a             	shr    eax,0xa
c00095fb:	c1 ea 16             	shr    edx,0x16
c00095fe:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009603:	19 c9                	sbb    ecx,ecx
c0009605:	c1 e2 0c             	shl    edx,0xc
c0009608:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000960e:	25 fc 0f 00 00       	and    eax,0xffc
c0009613:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000961a:	01 d0                	add    eax,edx
c000961c:	c3                   	ret    
c000961d:	90                   	nop

c000961e <VAS::getPageTableEntry(unsigned long)>:
c000961e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009622:	89 ca                	mov    edx,ecx
c0009624:	c1 e9 0a             	shr    ecx,0xa
c0009627:	c1 ea 16             	shr    edx,0x16
c000962a:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009630:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009636:	c1 e0 0c             	shl    eax,0xc
c0009639:	8d 04 08             	lea    eax,[eax+ecx*1]
c000963c:	c3                   	ret    

c000963d <Virt::freeKernelVirtualPages(unsigned long)>:
c000963d:	57                   	push   edi
c000963e:	56                   	push   esi
c000963f:	be 01 00 00 00       	mov    esi,0x1
c0009644:	53                   	push   ebx
c0009645:	83 ec 10             	sub    esp,0x10
c0009648:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000964c:	c1 eb 0c             	shr    ebx,0xc
c000964f:	eb 3f                	jmp    c0009690 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0009651:	83 ec 08             	sub    esp,0x8
c0009654:	a1 b0 3f 02 c0       	mov    eax,ds:0xc0023fb0
c0009659:	57                   	push   edi
c000965a:	50                   	push   eax
c000965b:	e8 be ff ff ff       	call   c000961e <VAS::getPageTableEntry(unsigned long)>
c0009660:	83 c4 10             	add    esp,0x10
c0009663:	8b 00                	mov    eax,DWORD PTR [eax]
c0009665:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009669:	f6 c4 04             	test   ah,0x4
c000966c:	75 60                	jne    c00096ce <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c000966e:	80 fa 04             	cmp    dl,0x4
c0009671:	74 79                	je     c00096ec <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c0009673:	80 fa 02             	cmp    dl,0x2
c0009676:	0f 84 89 00 00 00    	je     c0009705 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c000967c:	80 fa 03             	cmp    dl,0x3
c000967f:	0f 84 ae 00 00 00    	je     c0009733 <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c0009685:	fe ca                	dec    dl
c0009687:	0f 84 93 00 00 00    	je     c0009720 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c000968d:	43                   	inc    ebx
c000968e:	31 f6                	xor    esi,esi
c0009690:	53                   	push   ebx
c0009691:	89 df                	mov    edi,ebx
c0009693:	e8 8d fc ff ff       	call   c0009325 <Virt::getPageState(unsigned long)>
c0009698:	c1 e7 0c             	shl    edi,0xc
c000969b:	5a                   	pop    edx
c000969c:	84 c0                	test   al,al
c000969e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00096a2:	75 ad                	jne    c0009651 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00096a4:	83 ec 0c             	sub    esp,0xc
c00096a7:	68 41 f7 01 c0       	push   0xc001f741
c00096ac:	e8 16 6d 00 00       	call   c00103c7 <KePanic(char const*)>
c00096b1:	5a                   	pop    edx
c00096b2:	59                   	pop    ecx
c00096b3:	57                   	push   edi
c00096b4:	8b 3d b0 3f 02 c0    	mov    edi,DWORD PTR ds:0xc0023fb0
c00096ba:	57                   	push   edi
c00096bb:	e8 5e ff ff ff       	call   c000961e <VAS::getPageTableEntry(unsigned long)>
c00096c0:	83 c4 10             	add    esp,0x10
c00096c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00096c5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00096c9:	f6 c4 04             	test   ah,0x4
c00096cc:	74 bf                	je     c000968d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00096ce:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00096d2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00096d7:	83 ec 0c             	sub    esp,0xc
c00096da:	50                   	push   eax
c00096db:	e8 ff e3 ff ff       	call   c0007adf <Phys::freePage(unsigned long)>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00096e7:	80 fa 04             	cmp    dl,0x4
c00096ea:	75 87                	jne    c0009673 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00096ec:	89 f0                	mov    eax,esi
c00096ee:	84 c0                	test   al,al
c00096f0:	75 47                	jne    c0009739 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c00096f2:	c7 44 24 20 f0 f5 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f5f0
c00096fa:	83 c4 10             	add    esp,0x10
c00096fd:	5b                   	pop    ebx
c00096fe:	5e                   	pop    esi
c00096ff:	5f                   	pop    edi
c0009700:	e9 c2 6c 00 00       	jmp    c00103c7 <KePanic(char const*)>
c0009705:	89 f0                	mov    eax,esi
c0009707:	84 c0                	test   al,al
c0009709:	75 15                	jne    c0009720 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c000970b:	83 ec 0c             	sub    esp,0xc
c000970e:	68 5d f7 01 c0       	push   0xc001f75d
c0009713:	e8 af 6c 00 00       	call   c00103c7 <KePanic(char const*)>
c0009718:	83 c4 10             	add    esp,0x10
c000971b:	e9 6d ff ff ff       	jmp    c000968d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009720:	83 ec 08             	sub    esp,0x8
c0009723:	6a 00                	push   0x0
c0009725:	53                   	push   ebx
c0009726:	e8 c5 fb ff ff       	call   c00092f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000972b:	83 c4 10             	add    esp,0x10
c000972e:	e9 5a ff ff ff       	jmp    c000968d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009733:	89 f0                	mov    eax,esi
c0009735:	84 c0                	test   al,al
c0009737:	75 15                	jne    c000974e <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c0009739:	83 ec 08             	sub    esp,0x8
c000973c:	6a 00                	push   0x0
c000973e:	53                   	push   ebx
c000973f:	e8 ac fb ff ff       	call   c00092f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009744:	83 c4 10             	add    esp,0x10
c0009747:	83 c4 10             	add    esp,0x10
c000974a:	5b                   	pop    ebx
c000974b:	5e                   	pop    esi
c000974c:	5f                   	pop    edi
c000974d:	c3                   	ret    
c000974e:	c7 44 24 20 79 f7 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f779
c0009756:	83 c4 10             	add    esp,0x10
c0009759:	5b                   	pop    ebx
c000975a:	5e                   	pop    esi
c000975b:	5f                   	pop    edi
c000975c:	e9 66 6c 00 00       	jmp    c00103c7 <KePanic(char const*)>
c0009761:	90                   	nop

c0009762 <VAS::freeAllocatedPages(unsigned long)>:
c0009762:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009766:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000976a:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000976e:	74 09                	je     c0009779 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009770:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009774:	e9 c4 fe ff ff       	jmp    c000963d <Virt::freeKernelVirtualPages(unsigned long)>
c0009779:	c7 44 24 04 14 f6 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f614
c0009781:	e9 80 0e 00 00       	jmp    c000a606 <Dbg::kprintf(char const*, ...)>

c0009786 <VAS::virtualToPhysical(unsigned long)>:
c0009786:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000978a:	50                   	push   eax
c000978b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000978f:	52                   	push   edx
c0009790:	e8 89 fe ff ff       	call   c000961e <VAS::getPageTableEntry(unsigned long)>
c0009795:	59                   	pop    ecx
c0009796:	8b 00                	mov    eax,DWORD PTR [eax]
c0009798:	5a                   	pop    edx
c0009799:	25 00 f0 ff ff       	and    eax,0xfffff000
c000979e:	c3                   	ret    
c000979f:	90                   	nop

c00097a0 <VAS::reflagRange(unsigned long, int, int, int)>:
c00097a0:	55                   	push   ebp
c00097a1:	57                   	push   edi
c00097a2:	56                   	push   esi
c00097a3:	53                   	push   ebx
c00097a4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00097a8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00097ac:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00097b0:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00097b4:	85 db                	test   ebx,ebx
c00097b6:	7e 22                	jle    c00097da <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00097b8:	c1 e3 0c             	shl    ebx,0xc
c00097bb:	01 f3                	add    ebx,esi
c00097bd:	56                   	push   esi
c00097be:	81 c6 00 10 00 00    	add    esi,0x1000
c00097c4:	55                   	push   ebp
c00097c5:	e8 54 fe ff ff       	call   c000961e <VAS::getPageTableEntry(unsigned long)>
c00097ca:	5a                   	pop    edx
c00097cb:	59                   	pop    ecx
c00097cc:	8b 08                	mov    ecx,DWORD PTR [eax]
c00097ce:	21 f9                	and    ecx,edi
c00097d0:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00097d4:	39 f3                	cmp    ebx,esi
c00097d6:	89 08                	mov    DWORD PTR [eax],ecx
c00097d8:	75 e3                	jne    c00097bd <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00097da:	5b                   	pop    ebx
c00097db:	5e                   	pop    esi
c00097dc:	5f                   	pop    edi
c00097dd:	5d                   	pop    ebp
c00097de:	c3                   	ret    
c00097df:	90                   	nop

c00097e0 <VAS::VAS()>:
c00097e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097e4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00097eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097ef:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00097f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097fa:	a3 b0 3f 02 c0       	mov    ds:0xc0023fb0,eax
c00097ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009803:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009807:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000980b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000980e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009812:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009819:	ba 7d 20 02 c0       	mov    edx,0xc002207d
c000981e:	b8 00 20 02 c0       	mov    eax,0xc0022000
c0009823:	29 c2                	sub    edx,eax
c0009825:	89 d0                	mov    eax,edx
c0009827:	05 ff 0f 00 00       	add    eax,0xfff
c000982c:	c1 e8 0c             	shr    eax,0xc
c000982f:	89 c2                	mov    edx,eax
c0009831:	b8 00 20 02 c0       	mov    eax,0xc0022000
c0009836:	6a 04                	push   0x4
c0009838:	6a ff                	push   0xffffffff
c000983a:	52                   	push   edx
c000983b:	50                   	push   eax
c000983c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009840:	e8 5b ff ff ff       	call   c00097a0 <VAS::reflagRange(unsigned long, int, int, int)>
c0009845:	83 c4 14             	add    esp,0x14
c0009848:	90                   	nop
c0009849:	c3                   	ret    

c000984a <VAS::setToWriteCombining(unsigned long, int)>:
c000984a:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000984f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009855:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c000985c:	75 01                	jne    c000985f <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000985e:	c3                   	ret    
c000985f:	68 80 00 00 00       	push   0x80
c0009864:	6a ff                	push   0xffffffff
c0009866:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000986a:	50                   	push   eax
c000986b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000986f:	52                   	push   edx
c0009870:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009874:	51                   	push   ecx
c0009875:	e8 26 ff ff ff       	call   c00097a0 <VAS::reflagRange(unsigned long, int, int, int)>
c000987a:	83 c4 14             	add    esp,0x14
c000987d:	c3                   	ret    

c000987e <VAS::mapOtherVASIn(bool, VAS*)>:
c000987e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009883:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009887:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000988a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000988e:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009891:	19 c0                	sbb    eax,eax
c0009893:	83 ca 03             	or     edx,0x3
c0009896:	83 e0 fc             	and    eax,0xfffffffc
c0009899:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00098a0:	0f 20 d8             	mov    eax,cr3
c00098a3:	0f 22 d8             	mov    cr3,eax
c00098a6:	c3                   	ret    
c00098a7:	90                   	nop

c00098a8 <VAS::~VAS()>:
c00098a8:	83 ec 2c             	sub    esp,0x2c
c00098ab:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00098b3:	fa                   	cli    
c00098b4:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00098b9:	40                   	inc    eax
c00098ba:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00098bf:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00098c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00098c6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00098c9:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00098cf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00098d3:	6a 01                	push   0x1
c00098d5:	50                   	push   eax
c00098d6:	e8 a3 ff ff ff       	call   c000987e <VAS::mapOtherVASIn(bool, VAS*)>
c00098db:	83 c4 0c             	add    esp,0xc
c00098de:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00098e6:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00098ee:	0f 8f d4 00 00 00    	jg     c00099c8 <VAS::~VAS()+0x120>
c00098f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098f8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00098fb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00098ff:	c1 e2 02             	shl    edx,0x2
c0009902:	01 d0                	add    eax,edx
c0009904:	8b 00                	mov    eax,DWORD PTR [eax]
c0009906:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000990a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000990e:	83 e0 01             	and    eax,0x1
c0009911:	0f 84 a8 00 00 00    	je     c00099bf <VAS::~VAS()+0x117>
c0009917:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000991f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009927:	7f 72                	jg     c000999b <VAS::~VAS()+0xf3>
c0009929:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000992d:	c1 e0 0a             	shl    eax,0xa
c0009930:	89 c2                	mov    edx,eax
c0009932:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009936:	01 d0                	add    eax,edx
c0009938:	c1 e0 0c             	shl    eax,0xc
c000993b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000993f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009944:	8b 00                	mov    eax,DWORD PTR [eax]
c0009946:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009949:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000994f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009953:	6a 01                	push   0x1
c0009955:	50                   	push   eax
c0009956:	e8 97 fc ff ff       	call   c00095f2 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000995b:	83 c4 0c             	add    esp,0xc
c000995e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009962:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009966:	8b 00                	mov    eax,DWORD PTR [eax]
c0009968:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000996c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009970:	25 01 04 00 00       	and    eax,0x401
c0009975:	3d 01 04 00 00       	cmp    eax,0x401
c000997a:	75 19                	jne    c0009995 <VAS::~VAS()+0xed>
c000997c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009980:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009985:	83 ec 0c             	sub    esp,0xc
c0009988:	50                   	push   eax
c0009989:	e8 51 e1 ff ff       	call   c0007adf <Phys::freePage(unsigned long)>
c000998e:	83 c4 10             	add    esp,0x10
c0009991:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009995:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009999:	eb 84                	jmp    c000991f <VAS::~VAS()+0x77>
c000999b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000999f:	25 00 04 00 00       	and    eax,0x400
c00099a4:	74 19                	je     c00099bf <VAS::~VAS()+0x117>
c00099a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00099aa:	25 00 f0 ff ff       	and    eax,0xfffff000
c00099af:	83 ec 0c             	sub    esp,0xc
c00099b2:	50                   	push   eax
c00099b3:	e8 27 e1 ff ff       	call   c0007adf <Phys::freePage(unsigned long)>
c00099b8:	83 c4 10             	add    esp,0x10
c00099bb:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00099bf:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00099c3:	e9 1e ff ff ff       	jmp    c00098e6 <VAS::~VAS()+0x3e>
c00099c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00099cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00099cf:	83 ec 0c             	sub    esp,0xc
c00099d2:	50                   	push   eax
c00099d3:	e8 65 fc ff ff       	call   c000963d <Virt::freeKernelVirtualPages(unsigned long)>
c00099d8:	83 c4 10             	add    esp,0x10
c00099db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00099df:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00099e2:	83 ec 0c             	sub    esp,0xc
c00099e5:	50                   	push   eax
c00099e6:	e8 f4 e0 ff ff       	call   c0007adf <Phys::freePage(unsigned long)>
c00099eb:	83 c4 10             	add    esp,0x10
c00099ee:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00099f2:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00099f7:	48                   	dec    eax
c00099f8:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00099fd:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0009a02:	85 c0                	test   eax,eax
c0009a04:	75 01                	jne    c0009a07 <VAS::~VAS()+0x15f>
c0009a06:	fb                   	sti    
c0009a07:	90                   	nop
c0009a08:	83 c4 2c             	add    esp,0x2c
c0009a0b:	c3                   	ret    

c0009a0c <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009a0c:	55                   	push   ebp
c0009a0d:	57                   	push   edi
c0009a0e:	56                   	push   esi
c0009a0f:	53                   	push   ebx
c0009a10:	83 ec 1c             	sub    esp,0x1c
c0009a13:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009a17:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009a1b:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009a21:	77 0b                	ja     c0009a2e <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0009a23:	0f 20 d8             	mov    eax,cr3
c0009a26:	0f 20 d8             	mov    eax,cr3
c0009a29:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009a2c:	75 47                	jne    c0009a75 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c0009a2e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a32:	09 d8                	or     eax,ebx
c0009a34:	a9 ff 0f 00 00       	test   eax,0xfff
c0009a39:	75 57                	jne    c0009a92 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0009a3b:	89 de                	mov    esi,ebx
c0009a3d:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009a40:	c1 ee 16             	shr    esi,0x16
c0009a43:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009a4a:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009a4e:	74 54                	je     c0009aa4 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c0009a50:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009a54:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009a5a:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0009a5e:	c1 e6 0c             	shl    esi,0xc
c0009a61:	c1 eb 0a             	shr    ebx,0xa
c0009a64:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009a6a:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009a6d:	83 c4 1c             	add    esp,0x1c
c0009a70:	5b                   	pop    ebx
c0009a71:	5e                   	pop    esi
c0009a72:	5f                   	pop    edi
c0009a73:	5d                   	pop    ebp
c0009a74:	c3                   	ret    
c0009a75:	83 ec 0c             	sub    esp,0xc
c0009a78:	68 38 f6 01 c0       	push   0xc001f638
c0009a7d:	e8 84 0b 00 00       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0009a82:	83 c4 10             	add    esp,0x10
c0009a85:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a89:	09 d8                	or     eax,ebx
c0009a8b:	a9 ff 0f 00 00       	test   eax,0xfff
c0009a90:	74 a9                	je     c0009a3b <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009a92:	83 ec 0c             	sub    esp,0xc
c0009a95:	68 a0 f6 01 c0       	push   0xc001f6a0
c0009a9a:	e8 28 69 00 00       	call   c00103c7 <KePanic(char const*)>
c0009a9f:	83 c4 10             	add    esp,0x10
c0009aa2:	eb 97                	jmp    c0009a3b <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009aa4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009aa8:	e8 94 e0 ff ff       	call   c0007b41 <Phys::allocatePage()>
c0009aad:	83 ec 0c             	sub    esp,0xc
c0009ab0:	89 c5                	mov    ebp,eax
c0009ab2:	8b 0d b0 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fb0
c0009ab8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009abc:	6a 01                	push   0x1
c0009abe:	e8 86 f8 ff ff       	call   c0009349 <Virt::allocateKernelVirtualPages(int)>
c0009ac3:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009aca:	6a 01                	push   0x1
c0009acc:	50                   	push   eax
c0009acd:	55                   	push   ebp
c0009ace:	81 cd 07 04 00 00    	or     ebp,0x407
c0009ad4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009ad8:	51                   	push   ecx
c0009ad9:	e8 28 02 00 00       	call   c0009d06 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009ade:	83 c4 1c             	add    esp,0x1c
c0009ae1:	68 00 10 00 00       	push   0x1000
c0009ae6:	6a 00                	push   0x0
c0009ae8:	50                   	push   eax
c0009ae9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009aed:	e8 ce 69 ff ff       	call   c00004c0 <memset>
c0009af2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009af6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009af9:	e8 3f fb ff ff       	call   c000963d <Virt::freeKernelVirtualPages(unsigned long)>
c0009afe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009b02:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009b05:	83 c4 10             	add    esp,0x10
c0009b08:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009b0b:	e9 40 ff ff ff       	jmp    c0009a50 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009b10 <VAS::allocatePages(int, int)>:
c0009b10:	55                   	push   ebp
c0009b11:	57                   	push   edi
c0009b12:	56                   	push   esi
c0009b13:	53                   	push   ebx
c0009b14:	83 ec 1c             	sub    esp,0x1c
c0009b17:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009b1b:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009b20:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b26:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009b2c:	83 e0 01             	and    eax,0x1
c0009b2f:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009b33:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009b37:	0f 85 cc 00 00 00    	jne    c0009c09 <VAS::allocatePages(int, int)+0xf9>
c0009b3d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009b40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009b44:	85 c0                	test   eax,eax
c0009b46:	0f 84 a1 00 00 00    	je     c0009bed <VAS::allocatePages(int, int)+0xdd>
c0009b4c:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009b50:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b54:	c1 e6 0c             	shl    esi,0xc
c0009b57:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009b5b:	85 c0                	test   eax,eax
c0009b5d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009b60:	7e 33                	jle    c0009b95 <VAS::allocatePages(int, int)+0x85>
c0009b62:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009b66:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b6a:	81 cd 00 04 00 00    	or     ebp,0x400
c0009b70:	e8 cc df ff ff       	call   c0007b41 <Phys::allocatePage()>
c0009b75:	55                   	push   ebp
c0009b76:	53                   	push   ebx
c0009b77:	50                   	push   eax
c0009b78:	57                   	push   edi
c0009b79:	e8 8e fe ff ff       	call   c0009a0c <VAS::mapPage(unsigned long, unsigned long, int)>
c0009b7e:	83 c4 10             	add    esp,0x10
c0009b81:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b86:	74 03                	je     c0009b8b <VAS::allocatePages(int, int)+0x7b>
c0009b88:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b8b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b91:	39 de                	cmp    esi,ebx
c0009b93:	75 db                	jne    c0009b70 <VAS::allocatePages(int, int)+0x60>
c0009b95:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b9a:	75 12                	jne    c0009bae <VAS::allocatePages(int, int)+0x9e>
c0009b9c:	0f 20 d8             	mov    eax,cr3
c0009b9f:	0f 22 d8             	mov    cr3,eax
c0009ba2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ba6:	83 c4 1c             	add    esp,0x1c
c0009ba9:	5b                   	pop    ebx
c0009baa:	5e                   	pop    esi
c0009bab:	5f                   	pop    edi
c0009bac:	5d                   	pop    ebp
c0009bad:	c3                   	ret    
c0009bae:	c1 ee 0a             	shr    esi,0xa
c0009bb1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009bb5:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009bbb:	c1 eb 0a             	shr    ebx,0xa
c0009bbe:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009bc4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009bca:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009bd0:	39 c3                	cmp    ebx,eax
c0009bd2:	77 ce                	ja     c0009ba2 <VAS::allocatePages(int, int)+0x92>
c0009bd4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009bd7:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009bdd:	39 d8                	cmp    eax,ebx
c0009bdf:	73 f3                	jae    c0009bd4 <VAS::allocatePages(int, int)+0xc4>
c0009be1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009be5:	83 c4 1c             	add    esp,0x1c
c0009be8:	5b                   	pop    ebx
c0009be9:	5e                   	pop    esi
c0009bea:	5f                   	pop    edi
c0009beb:	5d                   	pop    ebp
c0009bec:	c3                   	ret    
c0009bed:	83 ec 0c             	sub    esp,0xc
c0009bf0:	68 c4 f6 01 c0       	push   0xc001f6c4
c0009bf5:	e8 cd 67 00 00       	call   c00103c7 <KePanic(char const*)>
c0009bfa:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009bfd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c01:	83 c4 10             	add    esp,0x10
c0009c04:	e9 43 ff ff ff       	jmp    c0009b4c <VAS::allocatePages(int, int)+0x3c>
c0009c09:	83 ec 0c             	sub    esp,0xc
c0009c0c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009c10:	51                   	push   ecx
c0009c11:	e8 33 f7 ff ff       	call   c0009349 <Virt::allocateKernelVirtualPages(int)>
c0009c16:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c1a:	83 c4 10             	add    esp,0x10
c0009c1d:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009c22:	0f 87 9b 00 00 00    	ja     c0009cc3 <VAS::allocatePages(int, int)+0x1b3>
c0009c28:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009c2c:	85 d2                	test   edx,edx
c0009c2e:	7e 3c                	jle    c0009c6c <VAS::allocatePages(int, int)+0x15c>
c0009c30:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009c34:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009c38:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009c3c:	c1 e5 0c             	shl    ebp,0xc
c0009c3f:	81 ce 00 04 00 00    	or     esi,0x400
c0009c45:	01 dd                	add    ebp,ebx
c0009c47:	e8 f5 de ff ff       	call   c0007b41 <Phys::allocatePage()>
c0009c4c:	56                   	push   esi
c0009c4d:	53                   	push   ebx
c0009c4e:	50                   	push   eax
c0009c4f:	57                   	push   edi
c0009c50:	e8 b7 fd ff ff       	call   c0009a0c <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c55:	83 c4 10             	add    esp,0x10
c0009c58:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c5d:	74 03                	je     c0009c62 <VAS::allocatePages(int, int)+0x152>
c0009c5f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c62:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c68:	39 dd                	cmp    ebp,ebx
c0009c6a:	75 db                	jne    c0009c47 <VAS::allocatePages(int, int)+0x137>
c0009c6c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c71:	0f 84 25 ff ff ff    	je     c0009b9c <VAS::allocatePages(int, int)+0x8c>
c0009c77:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c7b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009c7f:	89 d3                	mov    ebx,edx
c0009c81:	c1 e0 0c             	shl    eax,0xc
c0009c84:	c1 eb 0a             	shr    ebx,0xa
c0009c87:	01 d0                	add    eax,edx
c0009c89:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009c8f:	c1 e8 0a             	shr    eax,0xa
c0009c92:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009c98:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c9d:	2d 00 00 40 00       	sub    eax,0x400000
c0009ca2:	39 c3                	cmp    ebx,eax
c0009ca4:	0f 87 f8 fe ff ff    	ja     c0009ba2 <VAS::allocatePages(int, int)+0x92>
c0009caa:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009cad:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009cb3:	39 d8                	cmp    eax,ebx
c0009cb5:	73 f3                	jae    c0009caa <VAS::allocatePages(int, int)+0x19a>
c0009cb7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009cbb:	83 c4 1c             	add    esp,0x1c
c0009cbe:	5b                   	pop    ebx
c0009cbf:	5e                   	pop    esi
c0009cc0:	5f                   	pop    edi
c0009cc1:	5d                   	pop    ebp
c0009cc2:	c3                   	ret    
c0009cc3:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009cc8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009cce:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009cd5:	0f 84 4d ff ff ff    	je     c0009c28 <VAS::allocatePages(int, int)+0x118>
c0009cdb:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009ce3:	e9 40 ff ff ff       	jmp    c0009c28 <VAS::allocatePages(int, int)+0x118>

c0009ce8 <VAS::setCPUSpecific(unsigned long)>:
c0009ce8:	83 ec 0c             	sub    esp,0xc
c0009ceb:	6a 05                	push   0x5
c0009ced:	68 00 00 40 c2       	push   0xc2400000
c0009cf2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009cf6:	50                   	push   eax
c0009cf7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009cfb:	52                   	push   edx
c0009cfc:	e8 0b fd ff ff       	call   c0009a0c <VAS::mapPage(unsigned long, unsigned long, int)>
c0009d01:	83 c4 1c             	add    esp,0x1c
c0009d04:	c3                   	ret    
c0009d05:	90                   	nop

c0009d06 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009d06:	55                   	push   ebp
c0009d07:	57                   	push   edi
c0009d08:	56                   	push   esi
c0009d09:	53                   	push   ebx
c0009d0a:	83 ec 1c             	sub    esp,0x1c
c0009d0d:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009d12:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d16:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009d1c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009d20:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009d26:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009d2a:	83 e0 01             	and    eax,0x1
c0009d2d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009d31:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d35:	85 c0                	test   eax,eax
c0009d37:	7e 39                	jle    c0009d72 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009d39:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d3d:	89 f3                	mov    ebx,esi
c0009d3f:	c1 e0 0c             	shl    eax,0xc
c0009d42:	01 f0                	add    eax,esi
c0009d44:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009d48:	55                   	push   ebp
c0009d49:	53                   	push   ebx
c0009d4a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d4e:	29 f0                	sub    eax,esi
c0009d50:	01 d8                	add    eax,ebx
c0009d52:	50                   	push   eax
c0009d53:	57                   	push   edi
c0009d54:	e8 b3 fc ff ff       	call   c0009a0c <VAS::mapPage(unsigned long, unsigned long, int)>
c0009d59:	83 c4 10             	add    esp,0x10
c0009d5c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009d61:	74 03                	je     c0009d66 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009d63:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009d66:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009d6c:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009d70:	75 d6                	jne    c0009d48 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009d72:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009d77:	75 10                	jne    c0009d89 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009d79:	0f 20 d8             	mov    eax,cr3
c0009d7c:	0f 22 d8             	mov    cr3,eax
c0009d7f:	83 c4 1c             	add    esp,0x1c
c0009d82:	89 f0                	mov    eax,esi
c0009d84:	5b                   	pop    ebx
c0009d85:	5e                   	pop    esi
c0009d86:	5f                   	pop    edi
c0009d87:	5d                   	pop    ebp
c0009d88:	c3                   	ret    
c0009d89:	89 f3                	mov    ebx,esi
c0009d8b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d8f:	c1 eb 0a             	shr    ebx,0xa
c0009d92:	c1 e0 0c             	shl    eax,0xc
c0009d95:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009d9b:	01 f0                	add    eax,esi
c0009d9d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009da3:	c1 e8 0a             	shr    eax,0xa
c0009da6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009dab:	2d 00 00 40 00       	sub    eax,0x400000
c0009db0:	39 c3                	cmp    ebx,eax
c0009db2:	77 cb                	ja     c0009d7f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009db4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009db7:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009dbd:	39 d8                	cmp    eax,ebx
c0009dbf:	73 f3                	jae    c0009db4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009dc1:	83 c4 1c             	add    esp,0x1c
c0009dc4:	89 f0                	mov    eax,esi
c0009dc6:	5b                   	pop    ebx
c0009dc7:	5e                   	pop    esi
c0009dc8:	5f                   	pop    edi
c0009dc9:	5d                   	pop    ebp
c0009dca:	c3                   	ret    
c0009dcb:	90                   	nop

c0009dcc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009dcc:	55                   	push   ebp
c0009dcd:	57                   	push   edi
c0009dce:	56                   	push   esi
c0009dcf:	53                   	push   ebx
c0009dd0:	83 ec 1c             	sub    esp,0x1c
c0009dd3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009dd7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ddb:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009ddf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009de3:	a9 ff 0f 00 00       	test   eax,0xfff
c0009de8:	75 4a                	jne    c0009e34 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009dea:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009dee:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009df1:	c1 eb 16             	shr    ebx,0x16
c0009df4:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009dfb:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009dff:	74 4d                	je     c0009e4e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009e01:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009e05:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009e09:	c1 e8 0a             	shr    eax,0xa
c0009e0c:	80 fa 01             	cmp    dl,0x1
c0009e0f:	19 d2                	sbb    edx,edx
c0009e11:	c1 e3 0c             	shl    ebx,0xc
c0009e14:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009e18:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009e1e:	25 fc 0f 00 00       	and    eax,0xffc
c0009e23:	01 d8                	add    eax,ebx
c0009e25:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009e2c:	83 c4 1c             	add    esp,0x1c
c0009e2f:	5b                   	pop    ebx
c0009e30:	5e                   	pop    esi
c0009e31:	5f                   	pop    edi
c0009e32:	5d                   	pop    ebp
c0009e33:	c3                   	ret    
c0009e34:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009e38:	83 ec 0c             	sub    esp,0xc
c0009e3b:	68 f0 f6 01 c0       	push   0xc001f6f0
c0009e40:	e8 82 65 00 00       	call   c00103c7 <KePanic(char const*)>
c0009e45:	83 c4 10             	add    esp,0x10
c0009e48:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009e4c:	eb 9c                	jmp    c0009dea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009e4e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e52:	e8 ea dc ff ff       	call   c0007b41 <Phys::allocatePage()>
c0009e57:	83 ec 0c             	sub    esp,0xc
c0009e5a:	89 c5                	mov    ebp,eax
c0009e5c:	8b 0d b0 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fb0
c0009e62:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009e66:	6a 01                	push   0x1
c0009e68:	e8 dc f4 ff ff       	call   c0009349 <Virt::allocateKernelVirtualPages(int)>
c0009e6d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009e74:	6a 01                	push   0x1
c0009e76:	50                   	push   eax
c0009e77:	55                   	push   ebp
c0009e78:	81 cd 07 04 00 00    	or     ebp,0x407
c0009e7e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009e82:	51                   	push   ecx
c0009e83:	e8 7e fe ff ff       	call   c0009d06 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e88:	83 c4 1c             	add    esp,0x1c
c0009e8b:	68 00 10 00 00       	push   0x1000
c0009e90:	6a 00                	push   0x0
c0009e92:	50                   	push   eax
c0009e93:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e97:	e8 24 66 ff ff       	call   c00004c0 <memset>
c0009e9c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009ea0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ea3:	e8 95 f7 ff ff       	call   c000963d <Virt::freeKernelVirtualPages(unsigned long)>
c0009ea8:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009eab:	83 c4 10             	add    esp,0x10
c0009eae:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009eb1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009eb5:	e9 47 ff ff ff       	jmp    c0009e01 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009eba <VAS::VAS(bool)>:
c0009eba:	53                   	push   ebx
c0009ebb:	83 ec 28             	sub    esp,0x28
c0009ebe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009ec2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009ec6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009eca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ed1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ed5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009edc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ee0:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009ee4:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009ee7:	e8 55 dc ff ff       	call   c0007b41 <Phys::allocatePage()>
c0009eec:	89 c2                	mov    edx,eax
c0009eee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ef2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009ef5:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c0009efb:	83 ec 0c             	sub    esp,0xc
c0009efe:	6a 01                	push   0x1
c0009f00:	e8 44 f4 ff ff       	call   c0009349 <Virt::allocateKernelVirtualPages(int)>
c0009f05:	83 c4 10             	add    esp,0x10
c0009f08:	89 c2                	mov    edx,eax
c0009f0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f0e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009f11:	83 ec 0c             	sub    esp,0xc
c0009f14:	6a 03                	push   0x3
c0009f16:	6a 01                	push   0x1
c0009f18:	52                   	push   edx
c0009f19:	50                   	push   eax
c0009f1a:	53                   	push   ebx
c0009f1b:	e8 e6 fd ff ff       	call   c0009d06 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009f20:	83 c4 20             	add    esp,0x20
c0009f23:	89 c2                	mov    edx,eax
c0009f25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f29:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009f2c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009f34:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009f3c:	7f 1c                	jg     c0009f5a <VAS::VAS(bool)+0xa0>
c0009f3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f42:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f45:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009f49:	c1 e2 02             	shl    edx,0x2
c0009f4c:	01 d0                	add    eax,edx
c0009f4e:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009f54:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009f58:	eb da                	jmp    c0009f34 <VAS::VAS(bool)+0x7a>
c0009f5a:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009f62:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009f6a:	7f 7a                	jg     c0009fe6 <VAS::VAS(bool)+0x12c>
c0009f6c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f70:	2d 00 02 00 00       	sub    eax,0x200
c0009f75:	c1 e0 0c             	shl    eax,0xc
c0009f78:	83 c8 05             	or     eax,0x5
c0009f7b:	89 c2                	mov    edx,eax
c0009f7d:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009f82:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f88:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f8e:	83 e0 10             	and    eax,0x10
c0009f91:	84 c0                	test   al,al
c0009f93:	74 07                	je     c0009f9c <VAS::VAS(bool)+0xe2>
c0009f95:	b8 00 01 00 00       	mov    eax,0x100
c0009f9a:	eb 05                	jmp    c0009fa1 <VAS::VAS(bool)+0xe7>
c0009f9c:	b8 00 00 00 00       	mov    eax,0x0
c0009fa1:	09 d0                	or     eax,edx
c0009fa3:	89 c1                	mov    ecx,eax
c0009fa5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fa9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009fac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009fb0:	c1 e2 02             	shl    edx,0x2
c0009fb3:	01 d0                	add    eax,edx
c0009fb5:	89 ca                	mov    edx,ecx
c0009fb7:	89 10                	mov    DWORD PTR [eax],edx
c0009fb9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009fbd:	2d 40 03 00 00       	sub    eax,0x340
c0009fc2:	83 f8 7f             	cmp    eax,0x7f
c0009fc5:	77 16                	ja     c0009fdd <VAS::VAS(bool)+0x123>
c0009fc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fcb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009fce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009fd2:	c1 e2 02             	shl    edx,0x2
c0009fd5:	01 d0                	add    eax,edx
c0009fd7:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009fdd:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009fe1:	e9 7c ff ff ff       	jmp    c0009f62 <VAS::VAS(bool)+0xa8>
c0009fe6:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009feb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ff1:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009ff7:	83 e0 10             	and    eax,0x10
c0009ffa:	84 c0                	test   al,al
c0009ffc:	74 07                	je     c000a005 <VAS::VAS(bool)+0x14b>
c0009ffe:	b8 03 41 00 00       	mov    eax,0x4103
c000a003:	eb 05                	jmp    c000a00a <VAS::VAS(bool)+0x150>
c000a005:	b8 03 40 00 00       	mov    eax,0x4003
c000a00a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a00e:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a011:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a017:	89 02                	mov    DWORD PTR [edx],eax
c000a019:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a01e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a024:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a02a:	83 ec 08             	sub    esp,0x8
c000a02d:	50                   	push   eax
c000a02e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a032:	e8 b1 fc ff ff       	call   c0009ce8 <VAS::setCPUSpecific(unsigned long)>
c000a037:	83 c4 10             	add    esp,0x10
c000a03a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a03e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a041:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a046:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a04c:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a052:	83 e0 10             	and    eax,0x10
c000a055:	84 c0                	test   al,al
c000a057:	74 07                	je     c000a060 <VAS::VAS(bool)+0x1a6>
c000a059:	b8 00 01 00 00       	mov    eax,0x100
c000a05e:	eb 05                	jmp    c000a065 <VAS::VAS(bool)+0x1ab>
c000a060:	b8 00 00 00 00       	mov    eax,0x0
c000a065:	09 c2                	or     edx,eax
c000a067:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a06b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a06e:	05 fc 0f 00 00       	add    eax,0xffc
c000a073:	83 ca 03             	or     edx,0x3
c000a076:	89 10                	mov    DWORD PTR [eax],edx
c000a078:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a07d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a083:	83 ec 0c             	sub    esp,0xc
c000a086:	50                   	push   eax
c000a087:	e8 4c 1c 00 00       	call   c000bcd8 <Device::getName()>
c000a08c:	83 c4 10             	add    esp,0x10
c000a08f:	83 ec 08             	sub    esp,0x8
c000a092:	68 93 f7 01 c0       	push   0xc001f793
c000a097:	50                   	push   eax
c000a098:	e8 33 66 ff ff       	call   c00006d0 <strcmp>
c000a09d:	83 c4 10             	add    esp,0x10
c000a0a0:	85 c0                	test   eax,eax
c000a0a2:	0f 94 c0             	sete   al
c000a0a5:	84 c0                	test   al,al
c000a0a7:	0f 84 87 00 00 00    	je     c000a134 <VAS::VAS(bool)+0x27a>
c000a0ad:	fa                   	cli    
c000a0ae:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a0b3:	40                   	inc    eax
c000a0b4:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000a0b9:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a0be:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a0c4:	05 7c 09 00 00       	add    eax,0x97c
c000a0c9:	83 ec 0c             	sub    esp,0xc
c000a0cc:	50                   	push   eax
c000a0cd:	e8 90 d2 ff ff       	call   c0007362 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a0d2:	83 c4 10             	add    esp,0x10
c000a0d5:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a0da:	89 c3                	mov    ebx,eax
c000a0dc:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a0e1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a0e7:	05 7c 09 00 00       	add    eax,0x97c
c000a0ec:	83 ec 0c             	sub    esp,0xc
c000a0ef:	50                   	push   eax
c000a0f0:	e8 6d d2 ff ff       	call   c0007362 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a0f5:	83 c4 10             	add    esp,0x10
c000a0f8:	83 ec 08             	sub    esp,0x8
c000a0fb:	50                   	push   eax
c000a0fc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a100:	e8 19 f5 ff ff       	call   c000961e <VAS::getPageTableEntry(unsigned long)>
c000a105:	83 c4 10             	add    esp,0x10
c000a108:	8b 00                	mov    eax,DWORD PTR [eax]
c000a10a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a10f:	6a 11                	push   0x11
c000a111:	53                   	push   ebx
c000a112:	50                   	push   eax
c000a113:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a117:	e8 f0 f8 ff ff       	call   c0009a0c <VAS::mapPage(unsigned long, unsigned long, int)>
c000a11c:	83 c4 10             	add    esp,0x10
c000a11f:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a124:	48                   	dec    eax
c000a125:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000a12a:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a12f:	85 c0                	test   eax,eax
c000a131:	75 01                	jne    c000a134 <VAS::VAS(bool)+0x27a>
c000a133:	fb                   	sti    
c000a134:	90                   	nop
c000a135:	83 c4 28             	add    esp,0x28
c000a138:	5b                   	pop    ebx
c000a139:	c3                   	ret    

c000a13a <VAS::evict(unsigned long)>:
c000a13a:	55                   	push   ebp
c000a13b:	57                   	push   edi
c000a13c:	56                   	push   esi
c000a13d:	53                   	push   ebx
c000a13e:	83 ec 1c             	sub    esp,0x1c
c000a141:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a145:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a149:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a14d:	e8 38 f3 ff ff       	call   c000948a <Virt::allocateSwapfilePage()>
c000a152:	8b 0d 4c 16 02 c0    	mov    ecx,DWORD PTR ds:0xc002164c
c000a158:	89 c7                	mov    edi,eax
c000a15a:	85 c9                	test   ecx,ecx
c000a15c:	7e 3e                	jle    c000a19c <VAS::evict(unsigned long)+0x62>
c000a15e:	89 ee                	mov    esi,ebp
c000a160:	31 db                	xor    ebx,ebx
c000a162:	83 ec 0c             	sub    esp,0xc
c000a165:	57                   	push   edi
c000a166:	e8 0d f3 ff ff       	call   c0009478 <Virt::swapIDToSector(unsigned long)>
c000a16b:	89 34 24             	mov    DWORD PTR [esp],esi
c000a16e:	01 d8                	add    eax,ebx
c000a170:	6a 01                	push   0x1
c000a172:	31 d2                	xor    edx,edx
c000a174:	43                   	inc    ebx
c000a175:	52                   	push   edx
c000a176:	81 c6 00 02 00 00    	add    esi,0x200
c000a17c:	50                   	push   eax
c000a17d:	0f be 05 58 16 02 c0 	movsx  eax,BYTE PTR ds:0xc0021658
c000a184:	8b 14 85 1c 63 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9ce4]
c000a18b:	52                   	push   edx
c000a18c:	e8 31 2c 00 00       	call   c000cdc2 <LogicalDisk::write(unsigned long long, int, void*)>
c000a191:	83 c4 20             	add    esp,0x20
c000a194:	39 1d 4c 16 02 c0    	cmp    DWORD PTR ds:0xc002164c,ebx
c000a19a:	7f c6                	jg     c000a162 <VAS::evict(unsigned long)+0x28>
c000a19c:	83 ec 08             	sub    esp,0x8
c000a19f:	c1 e7 0b             	shl    edi,0xb
c000a1a2:	55                   	push   ebp
c000a1a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a1a7:	50                   	push   eax
c000a1a8:	e8 71 f4 ff ff       	call   c000961e <VAS::getPageTableEntry(unsigned long)>
c000a1ad:	8b 10                	mov    edx,DWORD PTR [eax]
c000a1af:	89 d1                	mov    ecx,edx
c000a1b1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a1b7:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a1bd:	09 cf                	or     edi,ecx
c000a1bf:	89 38                	mov    DWORD PTR [eax],edi
c000a1c1:	89 14 24             	mov    DWORD PTR [esp],edx
c000a1c4:	ff 05 a8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fa8
c000a1ca:	e8 10 d9 ff ff       	call   c0007adf <Phys::freePage(unsigned long)>
c000a1cf:	0f 20 d8             	mov    eax,cr3
c000a1d2:	0f 22 d8             	mov    cr3,eax
c000a1d5:	a1 a4 3f 02 c0       	mov    eax,ds:0xc0023fa4
c000a1da:	c7 44 24 40 a1 f7 01 c0 	mov    DWORD PTR [esp+0x40],0xc001f7a1
c000a1e2:	8d 50 01             	lea    edx,[eax+0x1]
c000a1e5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a1e9:	89 15 a4 3f 02 c0    	mov    DWORD PTR ds:0xc0023fa4,edx
c000a1ef:	83 c4 2c             	add    esp,0x2c
c000a1f2:	5b                   	pop    ebx
c000a1f3:	5e                   	pop    esi
c000a1f4:	5f                   	pop    edi
c000a1f5:	5d                   	pop    ebp
c000a1f6:	e9 0b 04 00 00       	jmp    c000a606 <Dbg::kprintf(char const*, ...)>
c000a1fb:	90                   	nop

c000a1fc <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a1fc:	55                   	push   ebp
c000a1fd:	57                   	push   edi
c000a1fe:	56                   	push   esi
c000a1ff:	53                   	push   ebx
c000a200:	83 ec 14             	sub    esp,0x14
c000a203:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a207:	53                   	push   ebx
c000a208:	68 b2 f7 01 c0       	push   0xc001f7b2
c000a20d:	e8 f4 03 00 00       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c000a212:	83 c4 10             	add    esp,0x10
c000a215:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a21b:	74 21                	je     c000a23e <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a21d:	83 ec 08             	sub    esp,0x8
c000a220:	53                   	push   ebx
c000a221:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a225:	57                   	push   edi
c000a226:	e8 f3 f3 ff ff       	call   c000961e <VAS::getPageTableEntry(unsigned long)>
c000a22b:	83 c4 10             	add    esp,0x10
c000a22e:	89 c6                	mov    esi,eax
c000a230:	85 c0                	test   eax,eax
c000a232:	74 0a                	je     c000a23e <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a234:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a236:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a23c:	74 0a                	je     c000a248 <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a23e:	31 c0                	xor    eax,eax
c000a240:	83 c4 0c             	add    esp,0xc
c000a243:	5b                   	pop    ebx
c000a244:	5e                   	pop    esi
c000a245:	5f                   	pop    edi
c000a246:	5d                   	pop    ebp
c000a247:	c3                   	ret    
c000a248:	e8 f4 d8 ff ff       	call   c0007b41 <Phys::allocatePage()>
c000a24d:	c1 ed 0b             	shr    ebp,0xb
c000a250:	8b 16                	mov    edx,DWORD PTR [esi]
c000a252:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a258:	09 c2                	or     edx,eax
c000a25a:	81 ca 01 08 00 00    	or     edx,0x801
c000a260:	89 16                	mov    DWORD PTR [esi],edx
c000a262:	8b 35 4c 16 02 c0    	mov    esi,DWORD PTR ds:0xc002164c
c000a268:	85 f6                	test   esi,esi
c000a26a:	7e 3e                	jle    c000a2aa <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a26c:	89 df                	mov    edi,ebx
c000a26e:	31 f6                	xor    esi,esi
c000a270:	83 ec 0c             	sub    esp,0xc
c000a273:	55                   	push   ebp
c000a274:	e8 ff f1 ff ff       	call   c0009478 <Virt::swapIDToSector(unsigned long)>
c000a279:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a27c:	01 f0                	add    eax,esi
c000a27e:	6a 01                	push   0x1
c000a280:	31 d2                	xor    edx,edx
c000a282:	46                   	inc    esi
c000a283:	52                   	push   edx
c000a284:	81 c7 00 02 00 00    	add    edi,0x200
c000a28a:	50                   	push   eax
c000a28b:	0f be 05 58 16 02 c0 	movsx  eax,BYTE PTR ds:0xc0021658
c000a292:	8b 0c 85 1c 63 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9ce4]
c000a299:	51                   	push   ecx
c000a29a:	e8 b7 2a 00 00       	call   c000cd56 <LogicalDisk::read(unsigned long long, int, void*)>
c000a29f:	83 c4 20             	add    esp,0x20
c000a2a2:	39 35 4c 16 02 c0    	cmp    DWORD PTR ds:0xc002164c,esi
c000a2a8:	7f c6                	jg     c000a270 <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a2aa:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c000a2af:	48                   	dec    eax
c000a2b0:	52                   	push   edx
c000a2b1:	a3 a8 3f 02 c0       	mov    ds:0xc0023fa8,eax
c000a2b6:	50                   	push   eax
c000a2b7:	53                   	push   ebx
c000a2b8:	68 c5 f7 01 c0       	push   0xc001f7c5
c000a2bd:	e8 44 03 00 00       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c000a2c2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a2c5:	e8 90 f1 ff ff       	call   c000945a <Virt::freeSwapfilePage(unsigned long)>
c000a2ca:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a2cf:	83 c4 10             	add    esp,0x10
c000a2d2:	48                   	dec    eax
c000a2d3:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000a2d8:	85 c0                	test   eax,eax
c000a2da:	75 01                	jne    c000a2dd <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a2dc:	fb                   	sti    
c000a2dd:	0f 20 d8             	mov    eax,cr3
c000a2e0:	0f 22 d8             	mov    cr3,eax
c000a2e3:	b0 01                	mov    al,0x1
c000a2e5:	e9 56 ff ff ff       	jmp    c000a240 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a2ea <VAS::scanForEviction()>:
c000a2ea:	57                   	push   edi
c000a2eb:	31 ff                	xor    edi,edi
c000a2ed:	56                   	push   esi
c000a2ee:	53                   	push   ebx
c000a2ef:	83 ec 10             	sub    esp,0x10
c000a2f2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a2f6:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a2f9:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a2ff:	75 0e                	jne    c000a30f <VAS::scanForEviction()+0x25>
c000a301:	89 da                	mov    edx,ebx
c000a303:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a306:	c1 ea 16             	shr    edx,0x16
c000a309:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a30d:	74 4e                	je     c000a35d <VAS::scanForEviction()+0x73>
c000a30f:	53                   	push   ebx
c000a310:	56                   	push   esi
c000a311:	e8 08 f3 ff ff       	call   c000961e <VAS::getPageTableEntry(unsigned long)>
c000a316:	5a                   	pop    edx
c000a317:	8b 10                	mov    edx,DWORD PTR [eax]
c000a319:	59                   	pop    ecx
c000a31a:	89 d1                	mov    ecx,edx
c000a31c:	81 e1 01 08 00 00    	and    ecx,0x801
c000a322:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a328:	74 3e                	je     c000a368 <VAS::scanForEviction()+0x7e>
c000a32a:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a330:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a336:	76 2b                	jbe    c000a363 <VAS::scanForEviction()+0x79>
c000a338:	47                   	inc    edi
c000a339:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a340:	83 ff 03             	cmp    edi,0x3
c000a343:	74 32                	je     c000a377 <VAS::scanForEviction()+0x8d>
c000a345:	31 db                	xor    ebx,ebx
c000a347:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a34d:	75 c0                	jne    c000a30f <VAS::scanForEviction()+0x25>
c000a34f:	89 da                	mov    edx,ebx
c000a351:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a354:	c1 ea 16             	shr    edx,0x16
c000a357:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a35b:	75 b2                	jne    c000a30f <VAS::scanForEviction()+0x25>
c000a35d:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a363:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a366:	eb 91                	jmp    c000a2f9 <VAS::scanForEviction()+0xf>
c000a368:	f6 c2 20             	test   dl,0x20
c000a36b:	74 13                	je     c000a380 <VAS::scanForEviction()+0x96>
c000a36d:	83 e2 df             	and    edx,0xffffffdf
c000a370:	89 10                	mov    DWORD PTR [eax],edx
c000a372:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a375:	eb b3                	jmp    c000a32a <VAS::scanForEviction()+0x40>
c000a377:	83 c4 10             	add    esp,0x10
c000a37a:	31 c0                	xor    eax,eax
c000a37c:	5b                   	pop    ebx
c000a37d:	5e                   	pop    esi
c000a37e:	5f                   	pop    edi
c000a37f:	c3                   	ret    
c000a380:	83 ec 08             	sub    esp,0x8
c000a383:	89 d0                	mov    eax,edx
c000a385:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a38a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a38e:	53                   	push   ebx
c000a38f:	68 da f7 01 c0       	push   0xc001f7da
c000a394:	e8 6d 02 00 00       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c000a399:	58                   	pop    eax
c000a39a:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a39d:	5a                   	pop    edx
c000a39e:	51                   	push   ecx
c000a39f:	56                   	push   esi
c000a3a0:	e8 95 fd ff ff       	call   c000a13a <VAS::evict(unsigned long)>
c000a3a5:	5b                   	pop    ebx
c000a3a6:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a3a9:	5f                   	pop    edi
c000a3aa:	50                   	push   eax
c000a3ab:	68 ee f7 01 c0       	push   0xc001f7ee
c000a3b0:	e8 51 02 00 00       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c000a3b5:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a3bc:	83 c4 10             	add    esp,0x10
c000a3bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a3c3:	83 c4 10             	add    esp,0x10
c000a3c6:	5b                   	pop    ebx
c000a3c7:	5e                   	pop    esi
c000a3c8:	5f                   	pop    edi
c000a3c9:	c3                   	ret    

c000a3ca <mapVASFirstTime>:
c000a3ca:	55                   	push   ebp
c000a3cb:	57                   	push   edi
c000a3cc:	56                   	push   esi
c000a3cd:	53                   	push   ebx
c000a3ce:	83 ec 0c             	sub    esp,0xc
c000a3d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a3d6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a3d9:	4a                   	dec    edx
c000a3da:	0f 84 c8 00 00 00    	je     c000a4a8 <mapVASFirstTime+0xde>
c000a3e0:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a3e3:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a3e6:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a3eb:	c1 e5 15             	shl    ebp,0x15
c000a3ee:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a3f3:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a3f9:	29 eb                	sub    ebx,ebp
c000a3fb:	29 ef                	sub    edi,ebp
c000a3fd:	e8 3f d7 ff ff       	call   c0007b41 <Phys::allocatePage()>
c000a402:	83 ec 0c             	sub    esp,0xc
c000a405:	68 03 04 00 00       	push   0x403
c000a40a:	6a 01                	push   0x1
c000a40c:	53                   	push   ebx
c000a40d:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a413:	50                   	push   eax
c000a414:	56                   	push   esi
c000a415:	e8 ec f8 ff ff       	call   c0009d06 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a41a:	83 c4 20             	add    esp,0x20
c000a41d:	39 fb                	cmp    ebx,edi
c000a41f:	75 dc                	jne    c000a3fd <mapVASFirstTime+0x33>
c000a421:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a426:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a42b:	29 eb                	sub    ebx,ebp
c000a42d:	29 ef                	sub    edi,ebp
c000a42f:	e8 0d d7 ff ff       	call   c0007b41 <Phys::allocatePage()>
c000a434:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a438:	19 d2                	sbb    edx,edx
c000a43a:	83 ec 0c             	sub    esp,0xc
c000a43d:	83 e2 04             	and    edx,0x4
c000a440:	81 c2 03 04 00 00    	add    edx,0x403
c000a446:	52                   	push   edx
c000a447:	6a 01                	push   0x1
c000a449:	53                   	push   ebx
c000a44a:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a450:	50                   	push   eax
c000a451:	56                   	push   esi
c000a452:	e8 af f8 ff ff       	call   c0009d06 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a457:	83 c4 20             	add    esp,0x20
c000a45a:	39 df                	cmp    edi,ebx
c000a45c:	75 d1                	jne    c000a42f <mapVASFirstTime+0x65>
c000a45e:	83 ec 0c             	sub    esp,0xc
c000a461:	bb 7c 30 02 c0       	mov    ebx,0xc002307c
c000a466:	6a 04                	push   0x4
c000a468:	81 eb 00 20 02 c0    	sub    ebx,0xc0022000
c000a46e:	6a ff                	push   0xffffffff
c000a470:	c1 eb 0c             	shr    ebx,0xc
c000a473:	53                   	push   ebx
c000a474:	68 00 20 02 c0       	push   0xc0022000
c000a479:	56                   	push   esi
c000a47a:	e8 21 f3 ff ff       	call   c00097a0 <VAS::reflagRange(unsigned long, int, int, int)>
c000a47f:	83 c4 14             	add    esp,0x14
c000a482:	a1 b0 3f 02 c0       	mov    eax,ds:0xc0023fb0
c000a487:	6a 04                	push   0x4
c000a489:	6a ff                	push   0xffffffff
c000a48b:	53                   	push   ebx
c000a48c:	68 00 20 02 c0       	push   0xc0022000
c000a491:	50                   	push   eax
c000a492:	e8 09 f3 ff ff       	call   c00097a0 <VAS::reflagRange(unsigned long, int, int, int)>
c000a497:	0f 20 d8             	mov    eax,cr3
c000a49a:	0f 22 d8             	mov    cr3,eax
c000a49d:	83 c4 20             	add    esp,0x20
c000a4a0:	83 c4 0c             	add    esp,0xc
c000a4a3:	5b                   	pop    ebx
c000a4a4:	5e                   	pop    esi
c000a4a5:	5f                   	pop    edi
c000a4a6:	5d                   	pop    ebp
c000a4a7:	c3                   	ret    
c000a4a8:	83 ec 0c             	sub    esp,0xc
c000a4ab:	68 01 f8 01 c0       	push   0xc001f801
c000a4b0:	e8 51 01 00 00       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c000a4b5:	83 c4 10             	add    esp,0x10
c000a4b8:	83 c4 0c             	add    esp,0xc
c000a4bb:	5b                   	pop    ebx
c000a4bc:	5e                   	pop    esi
c000a4bd:	5f                   	pop    edi
c000a4be:	5d                   	pop    ebp
c000a4bf:	c3                   	ret    

c000a4c0 <__cxa_atexit>:
c000a4c0:	31 c0                	xor    eax,eax
c000a4c2:	c3                   	ret    

c000a4c3 <__cxa_finalize>:
c000a4c3:	c3                   	ret    

c000a4c4 <__stack_chk_fail>:
c000a4c4:	55                   	push   ebp
c000a4c5:	89 e5                	mov    ebp,esp
c000a4c7:	83 ec 10             	sub    esp,0x10
c000a4ca:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a4cd:	68 1a f8 01 c0       	push   0xc001f81a
c000a4d2:	e8 2f 01 00 00       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c000a4d7:	58                   	pop    eax
c000a4d8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a4db:	5a                   	pop    edx
c000a4dc:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a4df:	68 1a f8 01 c0       	push   0xc001f81a
c000a4e4:	e8 1d 01 00 00       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c000a4e9:	c7 04 24 22 f8 01 c0 	mov    DWORD PTR [esp],0xc001f822
c000a4f0:	e8 d2 5e 00 00       	call   c00103c7 <KePanic(char const*)>
c000a4f5:	83 c4 10             	add    esp,0x10
c000a4f8:	c9                   	leave  
c000a4f9:	c3                   	ret    

c000a4fa <__cxa_pure_virtual>:
c000a4fa:	83 ec 18             	sub    esp,0x18
c000a4fd:	68 3a f8 01 c0       	push   0xc001f83a
c000a502:	e8 c0 5e 00 00       	call   c00103c7 <KePanic(char const*)>
c000a507:	83 c4 1c             	add    esp,0x1c
c000a50a:	c3                   	ret    

c000a50b <operator new[](unsigned long)>:
c000a50b:	e9 55 d3 ff ff       	jmp    c0007865 <malloc>

c000a510 <operator delete(void*, unsigned long)>:
c000a510:	e9 70 d3 ff ff       	jmp    c0007885 <rfree>

c000a515 <operator delete[](void*)>:
c000a515:	e9 6b d3 ff ff       	jmp    c0007885 <rfree>

c000a51a <operator delete[](void*, unsigned long)>:
c000a51a:	e9 66 d3 ff ff       	jmp    c0007885 <rfree>

c000a51f <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a51f:	55                   	push   ebp
c000a520:	b9 04 00 00 00       	mov    ecx,0x4
c000a525:	57                   	push   edi
c000a526:	56                   	push   esi
c000a527:	be 8f f4 01 c0       	mov    esi,0xc001f48f
c000a52c:	53                   	push   ebx
c000a52d:	83 ec 20             	sub    esp,0x20
c000a530:	a1 8e f4 01 c0       	mov    eax,ds:0xc001f48e
c000a535:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a539:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a53d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a541:	a1 9b f4 01 c0       	mov    eax,ds:0xc001f49b
c000a546:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a54a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a54e:	fc                   	cld    
c000a54f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a551:	89 ee                	mov    esi,ebp
c000a553:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a557:	eb 02                	jmp    c000a55b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a559:	89 c6                	mov    esi,eax
c000a55b:	31 d2                	xor    edx,edx
c000a55d:	41                   	inc    ecx
c000a55e:	89 f0                	mov    eax,esi
c000a560:	f7 f3                	div    ebx
c000a562:	39 de                	cmp    esi,ebx
c000a564:	73 f3                	jae    c000a559 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a566:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a569:	eb 02                	jmp    c000a56d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a56b:	89 c5                	mov    ebp,eax
c000a56d:	31 d2                	xor    edx,edx
c000a56f:	49                   	dec    ecx
c000a570:	89 e8                	mov    eax,ebp
c000a572:	f7 f3                	div    ebx
c000a574:	39 dd                	cmp    ebp,ebx
c000a576:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a57a:	88 11                	mov    BYTE PTR [ecx],dl
c000a57c:	73 ed                	jae    c000a56b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a57e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a582:	83 c4 20             	add    esp,0x20
c000a585:	5b                   	pop    ebx
c000a586:	5e                   	pop    esi
c000a587:	5f                   	pop    edi
c000a588:	5d                   	pop    ebp
c000a589:	c3                   	ret    

c000a58a <Dbg::logc(char)>:
c000a58a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a58e:	f6 05 d0 3e 02 c0 10 	test   BYTE PTR ds:0xc0023ed0,0x10
c000a595:	75 12                	jne    c000a5a9 <Dbg::logc(char)+0x1f>
c000a597:	ba fd 03 00 00       	mov    edx,0x3fd
c000a59c:	ec                   	in     al,dx
c000a59d:	a8 20                	test   al,0x20
c000a59f:	74 fb                	je     c000a59c <Dbg::logc(char)+0x12>
c000a5a1:	ba f8 03 00 00       	mov    edx,0x3f8
c000a5a6:	88 c8                	mov    al,cl
c000a5a8:	ee                   	out    dx,al
c000a5a9:	c3                   	ret    

c000a5aa <Dbg::logs(char*)>:
c000a5aa:	53                   	push   ebx
c000a5ab:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a5af:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a5b2:	84 c0                	test   al,al
c000a5b4:	74 0f                	je     c000a5c5 <Dbg::logs(char*)+0x1b>
c000a5b6:	50                   	push   eax
c000a5b7:	43                   	inc    ebx
c000a5b8:	e8 cd ff ff ff       	call   c000a58a <Dbg::logc(char)>
c000a5bd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a5c0:	5a                   	pop    edx
c000a5c1:	84 c0                	test   al,al
c000a5c3:	75 f1                	jne    c000a5b6 <Dbg::logs(char*)+0xc>
c000a5c5:	5b                   	pop    ebx
c000a5c6:	c3                   	ret    

c000a5c7 <Dbg::logWriteInt(unsigned int)>:
c000a5c7:	83 ec 10             	sub    esp,0x10
c000a5ca:	6a 0a                	push   0xa
c000a5cc:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a5d0:	50                   	push   eax
c000a5d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5d5:	50                   	push   eax
c000a5d6:	e8 44 ff ff ff       	call   c000a51f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a5db:	50                   	push   eax
c000a5dc:	e8 c9 ff ff ff       	call   c000a5aa <Dbg::logs(char*)>
c000a5e1:	83 c4 20             	add    esp,0x20
c000a5e4:	c3                   	ret    

c000a5e5 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a5e5:	83 ec 10             	sub    esp,0x10
c000a5e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a5ec:	50                   	push   eax
c000a5ed:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a5f1:	50                   	push   eax
c000a5f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a5f6:	52                   	push   edx
c000a5f7:	e8 23 ff ff ff       	call   c000a51f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a5fc:	50                   	push   eax
c000a5fd:	e8 a8 ff ff ff       	call   c000a5aa <Dbg::logs(char*)>
c000a602:	83 c4 20             	add    esp,0x20
c000a605:	c3                   	ret    

c000a606 <Dbg::kprintf(char const*, ...)>:
c000a606:	55                   	push   ebp
c000a607:	57                   	push   edi
c000a608:	56                   	push   esi
c000a609:	53                   	push   ebx
c000a60a:	83 ec 0c             	sub    esp,0xc
c000a60d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a611:	f6 05 d0 3e 02 c0 10 	test   BYTE PTR ds:0xc0023ed0,0x10
c000a618:	74 08                	je     c000a622 <Dbg::kprintf(char const*, ...)+0x1c>
c000a61a:	83 c4 0c             	add    esp,0xc
c000a61d:	5b                   	pop    ebx
c000a61e:	5e                   	pop    esi
c000a61f:	5f                   	pop    edi
c000a620:	5d                   	pop    ebp
c000a621:	c3                   	ret    
c000a622:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a626:	31 ff                	xor    edi,edi
c000a628:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a62c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a62f:	84 c0                	test   al,al
c000a631:	74 e7                	je     c000a61a <Dbg::kprintf(char const*, ...)+0x14>
c000a633:	8d 77 01             	lea    esi,[edi+0x1]
c000a636:	3c 25                	cmp    al,0x25
c000a638:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a63b:	75 47                	jne    c000a684 <Dbg::kprintf(char const*, ...)+0x7e>
c000a63d:	83 c7 02             	add    edi,0x2
c000a640:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a643:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a646:	83 e8 25             	sub    eax,0x25
c000a649:	3c 53                	cmp    al,0x53
c000a64b:	0f 87 d2 00 00 00    	ja     c000a723 <Dbg::kprintf(char const*, ...)+0x11d>
c000a651:	25 ff 00 00 00       	and    eax,0xff
c000a656:	ff 24 85 50 f8 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe07b0]
c000a65d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a661:	89 c8                	mov    eax,ecx
c000a663:	83 c1 04             	add    ecx,0x4
c000a666:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a66a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a66c:	55                   	push   ebp
c000a66d:	e8 55 ff ff ff       	call   c000a5c7 <Dbg::logWriteInt(unsigned int)>
c000a672:	58                   	pop    eax
c000a673:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a676:	84 c0                	test   al,al
c000a678:	74 a0                	je     c000a61a <Dbg::kprintf(char const*, ...)+0x14>
c000a67a:	8d 77 01             	lea    esi,[edi+0x1]
c000a67d:	3c 25                	cmp    al,0x25
c000a67f:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a682:	74 b9                	je     c000a63d <Dbg::kprintf(char const*, ...)+0x37>
c000a684:	50                   	push   eax
c000a685:	89 f7                	mov    edi,esi
c000a687:	e8 fe fe ff ff       	call   c000a58a <Dbg::logc(char)>
c000a68c:	89 ee                	mov    esi,ebp
c000a68e:	58                   	pop    eax
c000a68f:	eb e2                	jmp    c000a673 <Dbg::kprintf(char const*, ...)+0x6d>
c000a691:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a695:	89 c8                	mov    eax,ecx
c000a697:	83 c1 04             	add    ecx,0x4
c000a69a:	8b 00                	mov    eax,DWORD PTR [eax]
c000a69c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a6a0:	50                   	push   eax
c000a6a1:	e8 04 ff ff ff       	call   c000a5aa <Dbg::logs(char*)>
c000a6a6:	58                   	pop    eax
c000a6a7:	eb ca                	jmp    c000a673 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6a9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a6ad:	89 d0                	mov    eax,edx
c000a6af:	83 c2 04             	add    edx,0x4
c000a6b2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a6b6:	8b 00                	mov    eax,DWORD PTR [eax]
c000a6b8:	50                   	push   eax
c000a6b9:	e8 09 ff ff ff       	call   c000a5c7 <Dbg::logWriteInt(unsigned int)>
c000a6be:	58                   	pop    eax
c000a6bf:	eb b2                	jmp    c000a673 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a6c5:	89 d0                	mov    eax,edx
c000a6c7:	83 c2 04             	add    edx,0x4
c000a6ca:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a6cd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a6d1:	50                   	push   eax
c000a6d2:	e8 b3 fe ff ff       	call   c000a58a <Dbg::logc(char)>
c000a6d7:	58                   	pop    eax
c000a6d8:	eb 99                	jmp    c000a673 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6da:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a6de:	89 c8                	mov    eax,ecx
c000a6e0:	83 c1 04             	add    ecx,0x4
c000a6e3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a6e7:	6a 10                	push   0x10
c000a6e9:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a6eb:	51                   	push   ecx
c000a6ec:	e8 f4 fe ff ff       	call   c000a5e5 <Dbg::logWriteIntBase(unsigned int, int)>
c000a6f1:	5d                   	pop    ebp
c000a6f2:	58                   	pop    eax
c000a6f3:	e9 7b ff ff ff       	jmp    c000a673 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a6fc:	89 d0                	mov    eax,edx
c000a6fe:	83 c2 08             	add    edx,0x8
c000a701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a705:	6a 10                	push   0x10
c000a707:	8b 00                	mov    eax,DWORD PTR [eax]
c000a709:	50                   	push   eax
c000a70a:	e8 d6 fe ff ff       	call   c000a5e5 <Dbg::logWriteIntBase(unsigned int, int)>
c000a70f:	58                   	pop    eax
c000a710:	5a                   	pop    edx
c000a711:	e9 5d ff ff ff       	jmp    c000a673 <Dbg::kprintf(char const*, ...)+0x6d>
c000a716:	6a 25                	push   0x25
c000a718:	e8 6d fe ff ff       	call   c000a58a <Dbg::logc(char)>
c000a71d:	5a                   	pop    edx
c000a71e:	e9 50 ff ff ff       	jmp    c000a673 <Dbg::kprintf(char const*, ...)+0x6d>
c000a723:	6a 25                	push   0x25
c000a725:	e8 60 fe ff ff       	call   c000a58a <Dbg::logc(char)>
c000a72a:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a72e:	50                   	push   eax
c000a72f:	e8 56 fe ff ff       	call   c000a58a <Dbg::logc(char)>
c000a734:	5a                   	pop    edx
c000a735:	59                   	pop    ecx
c000a736:	e9 38 ff ff ff       	jmp    c000a673 <Dbg::kprintf(char const*, ...)+0x6d>
c000a73b:	90                   	nop

c000a73c <File::read(unsigned long long, void*, int*)>:
c000a73c:	53                   	push   ebx
c000a73d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a741:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a745:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a74c:	3c 19                	cmp    al,0x19
c000a74e:	77 35                	ja     c000a785 <File::read(unsigned long long, void*, int*)+0x49>
c000a750:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000a757:	85 c0                	test   eax,eax
c000a759:	74 2a                	je     c000a785 <File::read(unsigned long long, void*, int*)+0x49>
c000a75b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000a761:	85 c0                	test   eax,eax
c000a763:	74 20                	je     c000a785 <File::read(unsigned long long, void*, int*)+0x49>
c000a765:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a769:	74 21                	je     c000a78c <File::read(unsigned long long, void*, int*)+0x50>
c000a76b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a76d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a771:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a77b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a77f:	5b                   	pop    ebx
c000a780:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a783:	ff e0                	jmp    eax
c000a785:	b8 0b 00 00 00       	mov    eax,0xb
c000a78a:	eb 05                	jmp    c000a791 <File::read(unsigned long long, void*, int*)+0x55>
c000a78c:	b8 05 00 00 00       	mov    eax,0x5
c000a791:	5b                   	pop    ebx
c000a792:	c3                   	ret    
c000a793:	90                   	nop

c000a794 <File::write(unsigned long long, void*, int*)>:
c000a794:	53                   	push   ebx
c000a795:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a799:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a79d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a7a4:	3c 19                	cmp    al,0x19
c000a7a6:	77 35                	ja     c000a7dd <File::write(unsigned long long, void*, int*)+0x49>
c000a7a8:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000a7af:	85 c0                	test   eax,eax
c000a7b1:	74 2a                	je     c000a7dd <File::write(unsigned long long, void*, int*)+0x49>
c000a7b3:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000a7b9:	85 c0                	test   eax,eax
c000a7bb:	74 20                	je     c000a7dd <File::write(unsigned long long, void*, int*)+0x49>
c000a7bd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a7c1:	74 21                	je     c000a7e4 <File::write(unsigned long long, void*, int*)+0x50>
c000a7c3:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a7c5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a7c9:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a7cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a7d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a7d7:	5b                   	pop    ebx
c000a7d8:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a7db:	ff e0                	jmp    eax
c000a7dd:	b8 0b 00 00 00       	mov    eax,0xb
c000a7e2:	eb 05                	jmp    c000a7e9 <File::write(unsigned long long, void*, int*)+0x55>
c000a7e4:	b8 05 00 00 00       	mov    eax,0x5
c000a7e9:	5b                   	pop    ebx
c000a7ea:	c3                   	ret    
c000a7eb:	90                   	nop

c000a7ec <Directory::read(unsigned long long, void*, int*)>:
c000a7ec:	53                   	push   ebx
c000a7ed:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a7f1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a7f5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a7fc:	3c 19                	cmp    al,0x19
c000a7fe:	77 35                	ja     c000a835 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a800:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000a807:	85 c0                	test   eax,eax
c000a809:	74 2a                	je     c000a835 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a80b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000a811:	85 c0                	test   eax,eax
c000a813:	74 20                	je     c000a835 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a815:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a819:	74 21                	je     c000a83c <Directory::read(unsigned long long, void*, int*)+0x50>
c000a81b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a81d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a821:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a827:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a82b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a82f:	5b                   	pop    ebx
c000a830:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a833:	ff e0                	jmp    eax
c000a835:	b8 0b 00 00 00       	mov    eax,0xb
c000a83a:	eb 05                	jmp    c000a841 <Directory::read(unsigned long long, void*, int*)+0x55>
c000a83c:	b8 05 00 00 00       	mov    eax,0x5
c000a841:	5b                   	pop    ebx
c000a842:	c3                   	ret    
c000a843:	90                   	nop

c000a844 <Directory::write(unsigned long long, void*, int*)>:
c000a844:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a848:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a84f:	b8 0b 00 00 00       	mov    eax,0xb
c000a854:	80 fa 19             	cmp    dl,0x19
c000a857:	77 18                	ja     c000a871 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a859:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000a860:	85 d2                	test   edx,edx
c000a862:	74 0d                	je     c000a871 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a864:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000a86b:	19 c0                	sbb    eax,eax
c000a86d:	83 e0 0a             	and    eax,0xa
c000a870:	40                   	inc    eax
c000a871:	c3                   	ret    

c000a872 <File::isAtty()>:
c000a872:	31 c0                	xor    eax,eax
c000a874:	c3                   	ret    
c000a875:	90                   	nop

c000a876 <Directory::isAtty()>:
c000a876:	31 c0                	xor    eax,eax
c000a878:	c3                   	ret    
c000a879:	90                   	nop

c000a87a <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a87a:	b8 0a 00 00 00       	mov    eax,0xa
c000a87f:	c3                   	ret    

c000a880 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a880:	b8 0a 00 00 00       	mov    eax,0xa
c000a885:	c3                   	ret    

c000a886 <Filesystem::allocateSwapfile(char const*, int)>:
c000a886:	31 c0                	xor    eax,eax
c000a888:	31 d2                	xor    edx,edx
c000a88a:	c3                   	ret    
c000a88b:	90                   	nop

c000a88c <File::~File()>:
c000a88c:	83 ec 0c             	sub    esp,0xc
c000a88f:	ba 10 fa 01 c0       	mov    edx,0xc001fa10
c000a894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a898:	89 10                	mov    DWORD PTR [eax],edx
c000a89a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a89e:	83 ec 0c             	sub    esp,0xc
c000a8a1:	50                   	push   eax
c000a8a2:	e8 41 e8 ff ff       	call   c00090e8 <UnixFile::~UnixFile()>
c000a8a7:	83 c4 10             	add    esp,0x10
c000a8aa:	90                   	nop
c000a8ab:	83 c4 0c             	add    esp,0xc
c000a8ae:	c3                   	ret    
c000a8af:	90                   	nop

c000a8b0 <File::~File()>:
c000a8b0:	83 ec 0c             	sub    esp,0xc
c000a8b3:	83 ec 0c             	sub    esp,0xc
c000a8b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ba:	e8 cd ff ff ff       	call   c000a88c <File::~File()>
c000a8bf:	83 c4 10             	add    esp,0x10
c000a8c2:	83 ec 08             	sub    esp,0x8
c000a8c5:	68 14 01 00 00       	push   0x114
c000a8ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ce:	e8 3d fc ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c000a8d3:	83 c4 10             	add    esp,0x10
c000a8d6:	83 c4 0c             	add    esp,0xc
c000a8d9:	c3                   	ret    

c000a8da <Directory::~Directory()>:
c000a8da:	83 ec 0c             	sub    esp,0xc
c000a8dd:	ba 2c fa 01 c0       	mov    edx,0xc001fa2c
c000a8e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8e6:	89 10                	mov    DWORD PTR [eax],edx
c000a8e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8ec:	83 ec 0c             	sub    esp,0xc
c000a8ef:	50                   	push   eax
c000a8f0:	e8 f3 e7 ff ff       	call   c00090e8 <UnixFile::~UnixFile()>
c000a8f5:	83 c4 10             	add    esp,0x10
c000a8f8:	90                   	nop
c000a8f9:	83 c4 0c             	add    esp,0xc
c000a8fc:	c3                   	ret    
c000a8fd:	90                   	nop

c000a8fe <Directory::~Directory()>:
c000a8fe:	83 ec 0c             	sub    esp,0xc
c000a901:	83 ec 0c             	sub    esp,0xc
c000a904:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a908:	e8 cd ff ff ff       	call   c000a8da <Directory::~Directory()>
c000a90d:	83 c4 10             	add    esp,0x10
c000a910:	83 ec 08             	sub    esp,0x8
c000a913:	68 14 01 00 00       	push   0x114
c000a918:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a91c:	e8 ef fb ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c000a921:	83 c4 10             	add    esp,0x10
c000a924:	83 c4 0c             	add    esp,0xc
c000a927:	c3                   	ret    

c000a928 <Filesystem::Filesystem()>:
c000a928:	ba a8 f9 01 c0       	mov    edx,0xc001f9a8
c000a92d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a931:	89 10                	mov    DWORD PTR [eax],edx
c000a933:	8b 15 b4 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023fb4
c000a939:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a93d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a944:	a3 b4 3f 02 c0       	mov    ds:0xc0023fb4,eax
c000a949:	90                   	nop
c000a94a:	c3                   	ret    
c000a94b:	90                   	nop

c000a94c <Filesystem::~Filesystem()>:
c000a94c:	ba a8 f9 01 c0       	mov    edx,0xc001f9a8
c000a951:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a955:	89 10                	mov    DWORD PTR [eax],edx
c000a957:	90                   	nop
c000a958:	c3                   	ret    
c000a959:	90                   	nop

c000a95a <Filesystem::~Filesystem()>:
c000a95a:	83 ec 0c             	sub    esp,0xc
c000a95d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a961:	e8 e6 ff ff ff       	call   c000a94c <Filesystem::~Filesystem()>
c000a966:	83 c4 04             	add    esp,0x4
c000a969:	83 ec 08             	sub    esp,0x8
c000a96c:	6a 08                	push   0x8
c000a96e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a972:	e8 99 fb ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	83 c4 0c             	add    esp,0xc
c000a97d:	c3                   	ret    

c000a97e <Fs::getcwd(Process*, char*, int)>:
c000a97e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a982:	31 c0                	xor    eax,eax
c000a984:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a987:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a98b:	7d 15                	jge    c000a9a2 <Fs::getcwd(Process*, char*, int)+0x24>
c000a98d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a991:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a998:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a99b:	84 c9                	test   cl,cl
c000a99d:	74 06                	je     c000a9a5 <Fs::getcwd(Process*, char*, int)+0x27>
c000a99f:	40                   	inc    eax
c000a9a0:	eb e2                	jmp    c000a984 <Fs::getcwd(Process*, char*, int)+0x6>
c000a9a2:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a9a5:	31 c0                	xor    eax,eax
c000a9a7:	c3                   	ret    

c000a9a8 <Fs::initVFS()>:
c000a9a8:	83 ec 18             	sub    esp,0x18
c000a9ab:	6a 08                	push   0x8
c000a9ad:	e8 b3 ce ff ff       	call   c0007865 <malloc>
c000a9b2:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9b5:	e8 fa d9 00 00       	call   c00183b4 <FAT::FAT()>
c000a9ba:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000a9c1:	e8 9f ce ff ff       	call   c0007865 <malloc>
c000a9c6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9c9:	e8 82 e8 00 00       	call   c0019250 <ISO9660::ISO9660()>
c000a9ce:	83 c4 1c             	add    esp,0x1c
c000a9d1:	c3                   	ret    

c000a9d2 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000a9d2:	55                   	push   ebp
c000a9d3:	57                   	push   edi
c000a9d4:	56                   	push   esi
c000a9d5:	53                   	push   ebx
c000a9d6:	81 ec 10 04 00 00    	sub    esp,0x410
c000a9dc:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000a9e3:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000a9ea:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000a9f1:	68 00 04 00 00       	push   0x400
c000a9f6:	6a 00                	push   0x0
c000a9f8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000a9fc:	56                   	push   esi
c000a9fd:	e8 be 5a ff ff       	call   c00004c0 <memset>
c000aa02:	83 c4 10             	add    esp,0x10
c000aa05:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000aa09:	75 0b                	jne    c000aa16 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000aa0b:	50                   	push   eax
c000aa0c:	50                   	push   eax
c000aa0d:	57                   	push   edi
c000aa0e:	56                   	push   esi
c000aa0f:	e8 dc 5b ff ff       	call   c00005f0 <strcpy>
c000aa14:	eb 41                	jmp    c000aa57 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000aa16:	8a 07                	mov    al,BYTE PTR [edi]
c000aa18:	3c 5c                	cmp    al,0x5c
c000aa1a:	74 04                	je     c000aa20 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000aa1c:	3c 2f                	cmp    al,0x2f
c000aa1e:	75 18                	jne    c000aa38 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000aa20:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000aa23:	3c 60                	cmp    al,0x60
c000aa25:	7e 03                	jle    c000aa2a <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000aa27:	83 e8 20             	sub    eax,0x20
c000aa2a:	88 04 24             	mov    BYTE PTR [esp],al
c000aa2d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aa34:	50                   	push   eax
c000aa35:	50                   	push   eax
c000aa36:	eb 18                	jmp    c000aa50 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000aa38:	50                   	push   eax
c000aa39:	50                   	push   eax
c000aa3a:	55                   	push   ebp
c000aa3b:	56                   	push   esi
c000aa3c:	e8 af 5b ff ff       	call   c00005f0 <strcpy>
c000aa41:	5a                   	pop    edx
c000aa42:	59                   	pop    ecx
c000aa43:	68 fb 08 02 c0       	push   0xc00208fb
c000aa48:	56                   	push   esi
c000aa49:	e8 62 5d ff ff       	call   c00007b0 <strcat>
c000aa4e:	5d                   	pop    ebp
c000aa4f:	58                   	pop    eax
c000aa50:	57                   	push   edi
c000aa51:	56                   	push   esi
c000aa52:	e8 59 5d ff ff       	call   c00007b0 <strcat>
c000aa57:	83 c4 10             	add    esp,0x10
c000aa5a:	8a 04 24             	mov    al,BYTE PTR [esp]
c000aa5d:	3c 60                	cmp    al,0x60
c000aa5f:	7e 03                	jle    c000aa64 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000aa61:	83 e8 20             	sub    eax,0x20
c000aa64:	88 04 24             	mov    BYTE PTR [esp],al
c000aa67:	88 03                	mov    BYTE PTR [ebx],al
c000aa69:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aa70:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000aa76:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000aa7a:	bf 03 00 00 00       	mov    edi,0x3
c000aa7f:	b8 03 00 00 00       	mov    eax,0x3
c000aa84:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000aa87:	84 d2                	test   dl,dl
c000aa89:	0f 84 91 00 00 00    	je     c000ab20 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000aa8f:	8d 4f 01             	lea    ecx,[edi+0x1]
c000aa92:	80 fa 5c             	cmp    dl,0x5c
c000aa95:	74 05                	je     c000aa9c <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000aa97:	80 fa 2f             	cmp    dl,0x2f
c000aa9a:	75 12                	jne    c000aaae <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000aa9c:	89 c5                	mov    ebp,eax
c000aa9e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aaa3:	74 09                	je     c000aaae <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000aaa5:	40                   	inc    eax
c000aaa6:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000aaaa:	89 cf                	mov    edi,ecx
c000aaac:	eb d6                	jmp    c000aa84 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000aaae:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000aab3:	75 5b                	jne    c000ab10 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000aab5:	80 fa 2e             	cmp    dl,0x2e
c000aab8:	75 56                	jne    c000ab10 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000aaba:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000aabe:	74 19                	je     c000aad9 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000aac0:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aac5:	74 53                	je     c000ab1a <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aac7:	89 f9                	mov    ecx,edi
c000aac9:	41                   	inc    ecx
c000aaca:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aacd:	80 fa 2f             	cmp    dl,0x2f
c000aad0:	74 f7                	je     c000aac9 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aad2:	80 fa 5c             	cmp    dl,0x5c
c000aad5:	74 f2                	je     c000aac9 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aad7:	eb d1                	jmp    c000aaaa <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aad9:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aade:	74 3a                	je     c000ab1a <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aae0:	83 f8 03             	cmp    eax,0x3
c000aae3:	74 c5                	je     c000aaaa <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aae5:	41                   	inc    ecx
c000aae6:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aae9:	80 fa 2f             	cmp    dl,0x2f
c000aaec:	74 f7                	je     c000aae5 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aaee:	80 fa 5c             	cmp    dl,0x5c
c000aaf1:	74 f2                	je     c000aae5 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aaf3:	48                   	dec    eax
c000aaf4:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aaf8:	75 06                	jne    c000ab00 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000aafa:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aafe:	eb f3                	jmp    c000aaf3 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000ab00:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ab04:	74 07                	je     c000ab0d <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000ab06:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab0a:	48                   	dec    eax
c000ab0b:	eb f3                	jmp    c000ab00 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000ab0d:	40                   	inc    eax
c000ab0e:	eb 9a                	jmp    c000aaaa <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab10:	80 fa 2f             	cmp    dl,0x2f
c000ab13:	74 95                	je     c000aaaa <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab15:	80 fa 5c             	cmp    dl,0x5c
c000ab18:	74 90                	je     c000aaaa <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab1a:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000ab1d:	40                   	inc    eax
c000ab1e:	eb 8a                	jmp    c000aaaa <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab20:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab24:	83 ec 0c             	sub    esp,0xc
c000ab27:	53                   	push   ebx
c000ab28:	e8 03 5a ff ff       	call   c0000530 <strlen>
c000ab2d:	83 c4 10             	add    esp,0x10
c000ab30:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000ab35:	75 26                	jne    c000ab5d <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000ab37:	83 ec 0c             	sub    esp,0xc
c000ab3a:	53                   	push   ebx
c000ab3b:	e8 f0 59 ff ff       	call   c0000530 <strlen>
c000ab40:	83 c4 10             	add    esp,0x10
c000ab43:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000ab48:	74 26                	je     c000ab70 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000ab4a:	83 ec 0c             	sub    esp,0xc
c000ab4d:	53                   	push   ebx
c000ab4e:	e8 dd 59 ff ff       	call   c0000530 <strlen>
c000ab53:	83 c4 10             	add    esp,0x10
c000ab56:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000ab5b:	eb c7                	jmp    c000ab24 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000ab5d:	83 ec 0c             	sub    esp,0xc
c000ab60:	53                   	push   ebx
c000ab61:	e8 ca 59 ff ff       	call   c0000530 <strlen>
c000ab66:	83 c4 10             	add    esp,0x10
c000ab69:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ab6e:	74 c7                	je     c000ab37 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000ab70:	81 c4 0c 04 00 00    	add    esp,0x40c
c000ab76:	5b                   	pop    ebx
c000ab77:	5e                   	pop    esi
c000ab78:	5f                   	pop    edi
c000ab79:	5d                   	pop    ebp
c000ab7a:	c3                   	ret    
c000ab7b:	90                   	nop

c000ab7c <File::File(char const*, Process*)>:
c000ab7c:	83 ec 0c             	sub    esp,0xc
c000ab7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab83:	83 ec 08             	sub    esp,0x8
c000ab86:	6a 00                	push   0x0
c000ab88:	50                   	push   eax
c000ab89:	e8 78 e3 ff ff       	call   c0008f06 <UnixFile::UnixFile(int)>
c000ab8e:	83 c4 10             	add    esp,0x10
c000ab91:	ba 10 fa 01 c0       	mov    edx,0xc001fa10
c000ab96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab9a:	89 10                	mov    DWORD PTR [eax],edx
c000ab9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aba0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000aba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abaa:	83 c0 0d             	add    eax,0xd
c000abad:	83 ec 04             	sub    esp,0x4
c000abb0:	52                   	push   edx
c000abb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abb5:	50                   	push   eax
c000abb6:	e8 17 fe ff ff       	call   c000a9d2 <Fs::standardiseFiles(char*, char const*, char const*)>
c000abbb:	83 c4 10             	add    esp,0x10
c000abbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abc2:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000abc5:	8d 50 bf             	lea    edx,[eax-0x41]
c000abc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abcc:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000abd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abd6:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000abda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abde:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000abe4:	25 ff 00 00 00       	and    eax,0xff
c000abe9:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000abf0:	85 c0                	test   eax,eax
c000abf2:	74 42                	je     c000ac36 <File::File(char const*, Process*)+0xba>
c000abf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abf8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000abfe:	25 ff 00 00 00       	and    eax,0xff
c000ac03:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000ac0a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ac10:	85 c0                	test   eax,eax
c000ac12:	75 22                	jne    c000ac36 <File::File(char const*, Process*)+0xba>
c000ac14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac18:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ac1e:	25 ff 00 00 00       	and    eax,0xff
c000ac23:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000ac2a:	83 ec 0c             	sub    esp,0xc
c000ac2d:	50                   	push   eax
c000ac2e:	e8 61 20 00 00       	call   c000cc94 <LogicalDisk::mount()>
c000ac33:	83 c4 10             	add    esp,0x10
c000ac36:	90                   	nop
c000ac37:	83 c4 0c             	add    esp,0xc
c000ac3a:	c3                   	ret    
c000ac3b:	90                   	nop

c000ac3c <File::open(FileOpenMode)>:
c000ac3c:	53                   	push   ebx
c000ac3d:	b8 0b 00 00 00       	mov    eax,0xb
c000ac42:	83 ec 08             	sub    esp,0x8
c000ac45:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ac49:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000ac50:	80 fa 19             	cmp    dl,0x19
c000ac53:	77 40                	ja     c000ac95 <File::open(FileOpenMode)+0x59>
c000ac55:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000ac5c:	85 d2                	test   edx,edx
c000ac5e:	74 35                	je     c000ac95 <File::open(FileOpenMode)+0x59>
c000ac60:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ac66:	85 d2                	test   edx,edx
c000ac68:	74 2b                	je     c000ac95 <File::open(FileOpenMode)+0x59>
c000ac6a:	b8 06 00 00 00       	mov    eax,0x6
c000ac6f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000ac73:	75 20                	jne    c000ac95 <File::open(FileOpenMode)+0x59>
c000ac75:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac77:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000ac7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac81:	51                   	push   ecx
c000ac82:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000ac85:	51                   	push   ecx
c000ac86:	52                   	push   edx
c000ac87:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ac8a:	83 c4 10             	add    esp,0x10
c000ac8d:	85 c0                	test   eax,eax
c000ac8f:	75 04                	jne    c000ac95 <File::open(FileOpenMode)+0x59>
c000ac91:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000ac95:	83 c4 08             	add    esp,0x8
c000ac98:	5b                   	pop    ebx
c000ac99:	c3                   	ret    

c000ac9a <File::close()>:
c000ac9a:	53                   	push   ebx
c000ac9b:	b8 0b 00 00 00       	mov    eax,0xb
c000aca0:	83 ec 08             	sub    esp,0x8
c000aca3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aca7:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000acae:	80 fa 19             	cmp    dl,0x19
c000acb1:	77 41                	ja     c000acf4 <File::close()+0x5a>
c000acb3:	8b 1c 95 20 64 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd9be0]
c000acba:	85 db                	test   ebx,ebx
c000acbc:	74 36                	je     c000acf4 <File::close()+0x5a>
c000acbe:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000acc5:	74 2d                	je     c000acf4 <File::close()+0x5a>
c000acc7:	b8 05 00 00 00       	mov    eax,0x5
c000accc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000acd0:	74 22                	je     c000acf4 <File::close()+0x5a>
c000acd2:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000acd6:	8b 04 95 20 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9be0]
c000acdd:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ace3:	53                   	push   ebx
c000ace4:	53                   	push   ebx
c000ace5:	8b 10                	mov    edx,DWORD PTR [eax]
c000ace7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000aced:	50                   	push   eax
c000acee:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000acf1:	83 c4 10             	add    esp,0x10
c000acf4:	83 c4 08             	add    esp,0x8
c000acf7:	5b                   	pop    ebx
c000acf8:	c3                   	ret    
c000acf9:	90                   	nop

c000acfa <File::seek(unsigned long long)>:
c000acfa:	56                   	push   esi
c000acfb:	53                   	push   ebx
c000acfc:	b8 0b 00 00 00       	mov    eax,0xb
c000ad01:	51                   	push   ecx
c000ad02:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ad06:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ad0a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ad11:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ad15:	80 fa 19             	cmp    dl,0x19
c000ad18:	77 31                	ja     c000ad4b <File::seek(unsigned long long)+0x51>
c000ad1a:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000ad21:	85 d2                	test   edx,edx
c000ad23:	74 26                	je     c000ad4b <File::seek(unsigned long long)+0x51>
c000ad25:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ad2b:	85 d2                	test   edx,edx
c000ad2d:	74 1c                	je     c000ad4b <File::seek(unsigned long long)+0x51>
c000ad2f:	b8 05 00 00 00       	mov    eax,0x5
c000ad34:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ad38:	74 11                	je     c000ad4b <File::seek(unsigned long long)+0x51>
c000ad3a:	8b 02                	mov    eax,DWORD PTR [edx]
c000ad3c:	53                   	push   ebx
c000ad3d:	51                   	push   ecx
c000ad3e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ad44:	52                   	push   edx
c000ad45:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ad48:	83 c4 10             	add    esp,0x10
c000ad4b:	5a                   	pop    edx
c000ad4c:	5b                   	pop    ebx
c000ad4d:	5e                   	pop    esi
c000ad4e:	c3                   	ret    
c000ad4f:	90                   	nop

c000ad50 <File::tell(unsigned long long*)>:
c000ad50:	83 ec 0c             	sub    esp,0xc
c000ad53:	b8 0b 00 00 00       	mov    eax,0xb
c000ad58:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ad5c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ad63:	80 fa 19             	cmp    dl,0x19
c000ad66:	77 34                	ja     c000ad9c <File::tell(unsigned long long*)+0x4c>
c000ad68:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000ad6f:	85 d2                	test   edx,edx
c000ad71:	74 29                	je     c000ad9c <File::tell(unsigned long long*)+0x4c>
c000ad73:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ad79:	85 d2                	test   edx,edx
c000ad7b:	74 1f                	je     c000ad9c <File::tell(unsigned long long*)+0x4c>
c000ad7d:	b8 05 00 00 00       	mov    eax,0x5
c000ad82:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ad86:	74 14                	je     c000ad9c <File::tell(unsigned long long*)+0x4c>
c000ad88:	50                   	push   eax
c000ad89:	8b 02                	mov    eax,DWORD PTR [edx]
c000ad8b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad8f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ad95:	52                   	push   edx
c000ad96:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ad99:	83 c4 10             	add    esp,0x10
c000ad9c:	83 c4 0c             	add    esp,0xc
c000ad9f:	c3                   	ret    

c000ada0 <File::rewind()>:
c000ada0:	83 ec 10             	sub    esp,0x10
c000ada3:	6a 00                	push   0x0
c000ada5:	6a 00                	push   0x0
c000ada7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000adab:	e8 4a ff ff ff       	call   c000acfa <File::seek(unsigned long long)>
c000adb0:	83 c4 1c             	add    esp,0x1c
c000adb3:	c3                   	ret    

c000adb4 <File::unlink()>:
c000adb4:	83 ec 0c             	sub    esp,0xc
c000adb7:	b8 0b 00 00 00       	mov    eax,0xb
c000adbc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000adc0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000adc7:	80 f9 19             	cmp    cl,0x19
c000adca:	77 2f                	ja     c000adfb <File::unlink()+0x47>
c000adcc:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000add3:	85 c9                	test   ecx,ecx
c000add5:	74 24                	je     c000adfb <File::unlink()+0x47>
c000add7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000addd:	85 c9                	test   ecx,ecx
c000addf:	74 1a                	je     c000adfb <File::unlink()+0x47>
c000ade1:	b8 06 00 00 00       	mov    eax,0x6
c000ade6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000adea:	75 0f                	jne    c000adfb <File::unlink()+0x47>
c000adec:	83 c2 0d             	add    edx,0xd
c000adef:	50                   	push   eax
c000adf0:	50                   	push   eax
c000adf1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000adf3:	52                   	push   edx
c000adf4:	51                   	push   ecx
c000adf5:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000adf8:	83 c4 10             	add    esp,0x10
c000adfb:	83 c4 0c             	add    esp,0xc
c000adfe:	c3                   	ret    
c000adff:	90                   	nop

c000ae00 <File::rename(char const*)>:
c000ae00:	83 ec 0c             	sub    esp,0xc
c000ae03:	b8 0b 00 00 00       	mov    eax,0xb
c000ae08:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae0c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae13:	80 f9 19             	cmp    cl,0x19
c000ae16:	77 32                	ja     c000ae4a <File::rename(char const*)+0x4a>
c000ae18:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000ae1f:	85 c9                	test   ecx,ecx
c000ae21:	74 27                	je     c000ae4a <File::rename(char const*)+0x4a>
c000ae23:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ae29:	85 c9                	test   ecx,ecx
c000ae2b:	74 1d                	je     c000ae4a <File::rename(char const*)+0x4a>
c000ae2d:	b8 06 00 00 00       	mov    eax,0x6
c000ae32:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae36:	75 12                	jne    c000ae4a <File::rename(char const*)+0x4a>
c000ae38:	83 c2 0d             	add    edx,0xd
c000ae3b:	50                   	push   eax
c000ae3c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ae42:	52                   	push   edx
c000ae43:	51                   	push   ecx
c000ae44:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	83 c4 0c             	add    esp,0xc
c000ae4d:	c3                   	ret    

c000ae4e <File::chfatattr(unsigned char, unsigned char)>:
c000ae4e:	57                   	push   edi
c000ae4f:	b8 0b 00 00 00       	mov    eax,0xb
c000ae54:	56                   	push   esi
c000ae55:	53                   	push   ebx
c000ae56:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae5a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ae5e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae65:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ae69:	80 f9 19             	cmp    cl,0x19
c000ae6c:	77 37                	ja     c000aea5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae6e:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000ae75:	85 c9                	test   ecx,ecx
c000ae77:	74 2c                	je     c000aea5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae79:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ae7f:	85 c9                	test   ecx,ecx
c000ae81:	74 22                	je     c000aea5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae83:	b8 06 00 00 00       	mov    eax,0x6
c000ae88:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae8c:	75 17                	jne    c000aea5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae8e:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ae90:	89 f0                	mov    eax,esi
c000ae92:	83 c2 0d             	add    edx,0xd
c000ae95:	0f b6 f0             	movzx  esi,al
c000ae98:	0f b6 db             	movzx  ebx,bl
c000ae9b:	56                   	push   esi
c000ae9c:	53                   	push   ebx
c000ae9d:	52                   	push   edx
c000ae9e:	51                   	push   ecx
c000ae9f:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000aea2:	83 c4 10             	add    esp,0x10
c000aea5:	5b                   	pop    ebx
c000aea6:	5e                   	pop    esi
c000aea7:	5f                   	pop    edi
c000aea8:	c3                   	ret    
c000aea9:	90                   	nop

c000aeaa <File::exists()>:
c000aeaa:	83 ec 0c             	sub    esp,0xc
c000aead:	31 c0                	xor    eax,eax
c000aeaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aeb3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000aeba:	80 f9 19             	cmp    cl,0x19
c000aebd:	77 24                	ja     c000aee3 <File::exists()+0x39>
c000aebf:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000aec6:	85 c9                	test   ecx,ecx
c000aec8:	74 19                	je     c000aee3 <File::exists()+0x39>
c000aeca:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000aed0:	85 c9                	test   ecx,ecx
c000aed2:	74 0f                	je     c000aee3 <File::exists()+0x39>
c000aed4:	83 c2 0d             	add    edx,0xd
c000aed7:	50                   	push   eax
c000aed8:	50                   	push   eax
c000aed9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000aedb:	52                   	push   edx
c000aedc:	51                   	push   ecx
c000aedd:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000aee0:	83 c4 10             	add    esp,0x10
c000aee3:	83 c4 0c             	add    esp,0xc
c000aee6:	c3                   	ret    
c000aee7:	90                   	nop

c000aee8 <File::stat(unsigned long long*, bool*)>:
c000aee8:	56                   	push   esi
c000aee9:	53                   	push   ebx
c000aeea:	50                   	push   eax
c000aeeb:	b8 0b 00 00 00       	mov    eax,0xb
c000aef0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aef4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000aef8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000aeff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000af03:	80 f9 19             	cmp    cl,0x19
c000af06:	77 3d                	ja     c000af45 <File::stat(unsigned long long*, bool*)+0x5d>
c000af08:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000af0f:	85 c9                	test   ecx,ecx
c000af11:	74 32                	je     c000af45 <File::stat(unsigned long long*, bool*)+0x5d>
c000af13:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000af19:	85 c9                	test   ecx,ecx
c000af1b:	74 28                	je     c000af45 <File::stat(unsigned long long*, bool*)+0x5d>
c000af1d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000af1f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000af23:	74 13                	je     c000af38 <File::stat(unsigned long long*, bool*)+0x50>
c000af25:	83 ec 04             	sub    esp,0x4
c000af28:	56                   	push   esi
c000af29:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000af2f:	51                   	push   ecx
c000af30:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000af33:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000af36:	eb 0a                	jmp    c000af42 <File::stat(unsigned long long*, bool*)+0x5a>
c000af38:	53                   	push   ebx
c000af39:	83 c2 0d             	add    edx,0xd
c000af3c:	56                   	push   esi
c000af3d:	52                   	push   edx
c000af3e:	51                   	push   ecx
c000af3f:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000af42:	83 c4 10             	add    esp,0x10
c000af45:	5a                   	pop    edx
c000af46:	5b                   	pop    ebx
c000af47:	5e                   	pop    esi
c000af48:	c3                   	ret    

c000af49 <Fs::setcwd(Process*, char*)>:
c000af49:	55                   	push   ebp
c000af4a:	57                   	push   edi
c000af4b:	56                   	push   esi
c000af4c:	53                   	push   ebx
c000af4d:	81 ec 20 02 00 00    	sub    esp,0x220
c000af53:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000af5a:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000af60:	57                   	push   edi
c000af61:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000af68:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000af6c:	56                   	push   esi
c000af6d:	e8 60 fa ff ff       	call   c000a9d2 <Fs::standardiseFiles(char*, char const*, char const*)>
c000af72:	89 34 24             	mov    DWORD PTR [esp],esi
c000af75:	e8 b6 55 ff ff       	call   c0000530 <strlen>
c000af7a:	83 c4 10             	add    esp,0x10
c000af7d:	83 f8 02             	cmp    eax,0x2
c000af80:	77 15                	ja     c000af97 <Fs::setcwd(Process*, char*)+0x4e>
c000af82:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000af87:	83 eb 41             	sub    ebx,0x41
c000af8a:	8b 04 9d 20 64 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9be0]
c000af91:	85 c0                	test   eax,eax
c000af93:	75 1c                	jne    c000afb1 <Fs::setcwd(Process*, char*)+0x68>
c000af95:	eb 2f                	jmp    c000afc6 <Fs::setcwd(Process*, char*)+0x7d>
c000af97:	83 ec 0c             	sub    esp,0xc
c000af9a:	56                   	push   esi
c000af9b:	e8 90 55 ff ff       	call   c0000530 <strlen>
c000afa0:	83 c4 10             	add    esp,0x10
c000afa3:	83 f8 03             	cmp    eax,0x3
c000afa6:	75 57                	jne    c000afff <Fs::setcwd(Process*, char*)+0xb6>
c000afa8:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000afad:	75 50                	jne    c000afff <Fs::setcwd(Process*, char*)+0xb6>
c000afaf:	eb d1                	jmp    c000af82 <Fs::setcwd(Process*, char*)+0x39>
c000afb1:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000afb8:	75 0c                	jne    c000afc6 <Fs::setcwd(Process*, char*)+0x7d>
c000afba:	83 ec 0c             	sub    esp,0xc
c000afbd:	50                   	push   eax
c000afbe:	e8 d1 1c 00 00       	call   c000cc94 <LogicalDisk::mount()>
c000afc3:	83 c4 10             	add    esp,0x10
c000afc6:	b8 03 00 00 00       	mov    eax,0x3
c000afcb:	83 fb 19             	cmp    ebx,0x19
c000afce:	0f 87 c6 00 00 00    	ja     c000b09a <Fs::setcwd(Process*, char*)+0x151>
c000afd4:	8b 14 9d 20 64 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd9be0]
c000afdb:	b8 05 00 00 00       	mov    eax,0x5
c000afe0:	85 d2                	test   edx,edx
c000afe2:	0f 84 b2 00 00 00    	je     c000b09a <Fs::setcwd(Process*, char*)+0x151>
c000afe8:	b8 06 00 00 00       	mov    eax,0x6
c000afed:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000aff4:	0f 85 92 00 00 00    	jne    c000b08c <Fs::setcwd(Process*, char*)+0x143>
c000affa:	e9 9b 00 00 00       	jmp    c000b09a <Fs::setcwd(Process*, char*)+0x151>
c000afff:	83 ec 0c             	sub    esp,0xc
c000b002:	68 14 01 00 00       	push   0x114
c000b007:	e8 59 c8 ff ff       	call   c0007865 <malloc>
c000b00c:	83 c4 0c             	add    esp,0xc
c000b00f:	89 c3                	mov    ebx,eax
c000b011:	55                   	push   ebp
c000b012:	56                   	push   esi
c000b013:	50                   	push   eax
c000b014:	e8 63 fb ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c000b019:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b01e:	83 c4 0c             	add    esp,0xc
c000b021:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b025:	50                   	push   eax
c000b026:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b02a:	50                   	push   eax
c000b02b:	53                   	push   ebx
c000b02c:	e8 b7 fe ff ff       	call   c000aee8 <File::stat(unsigned long long*, bool*)>
c000b031:	83 c4 10             	add    esp,0x10
c000b034:	83 f8 02             	cmp    eax,0x2
c000b037:	74 27                	je     c000b060 <Fs::setcwd(Process*, char*)+0x117>
c000b039:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b03e:	75 1c                	jne    c000b05c <Fs::setcwd(Process*, char*)+0x113>
c000b040:	b8 02 00 00 00       	mov    eax,0x2
c000b045:	85 db                	test   ebx,ebx
c000b047:	74 51                	je     c000b09a <Fs::setcwd(Process*, char*)+0x151>
c000b049:	83 ec 0c             	sub    esp,0xc
c000b04c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b04e:	53                   	push   ebx
c000b04f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b052:	83 c4 10             	add    esp,0x10
c000b055:	b8 02 00 00 00       	mov    eax,0x2
c000b05a:	eb 3e                	jmp    c000b09a <Fs::setcwd(Process*, char*)+0x151>
c000b05c:	85 c0                	test   eax,eax
c000b05e:	74 1c                	je     c000b07c <Fs::setcwd(Process*, char*)+0x133>
c000b060:	b8 01 00 00 00       	mov    eax,0x1
c000b065:	85 db                	test   ebx,ebx
c000b067:	74 31                	je     c000b09a <Fs::setcwd(Process*, char*)+0x151>
c000b069:	83 ec 0c             	sub    esp,0xc
c000b06c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b06e:	53                   	push   ebx
c000b06f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	b8 01 00 00 00       	mov    eax,0x1
c000b07a:	eb 1e                	jmp    c000b09a <Fs::setcwd(Process*, char*)+0x151>
c000b07c:	85 db                	test   ebx,ebx
c000b07e:	74 0c                	je     c000b08c <Fs::setcwd(Process*, char*)+0x143>
c000b080:	83 ec 0c             	sub    esp,0xc
c000b083:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b085:	53                   	push   ebx
c000b086:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b089:	83 c4 10             	add    esp,0x10
c000b08c:	50                   	push   eax
c000b08d:	50                   	push   eax
c000b08e:	56                   	push   esi
c000b08f:	57                   	push   edi
c000b090:	e8 5b 55 ff ff       	call   c00005f0 <strcpy>
c000b095:	83 c4 10             	add    esp,0x10
c000b098:	31 c0                	xor    eax,eax
c000b09a:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b0a0:	5b                   	pop    ebx
c000b0a1:	5e                   	pop    esi
c000b0a2:	5f                   	pop    edi
c000b0a3:	5d                   	pop    ebp
c000b0a4:	c3                   	ret    
c000b0a5:	90                   	nop

c000b0a6 <Directory::Directory(char const*, Process*)>:
c000b0a6:	83 ec 0c             	sub    esp,0xc
c000b0a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0ad:	83 ec 08             	sub    esp,0x8
c000b0b0:	6a 00                	push   0x0
c000b0b2:	50                   	push   eax
c000b0b3:	e8 4e de ff ff       	call   c0008f06 <UnixFile::UnixFile(int)>
c000b0b8:	83 c4 10             	add    esp,0x10
c000b0bb:	ba 2c fa 01 c0       	mov    edx,0xc001fa2c
c000b0c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0c4:	89 10                	mov    DWORD PTR [eax],edx
c000b0c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b0ca:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b0d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0d4:	83 c0 0d             	add    eax,0xd
c000b0d7:	83 ec 04             	sub    esp,0x4
c000b0da:	52                   	push   edx
c000b0db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0df:	50                   	push   eax
c000b0e0:	e8 ed f8 ff ff       	call   c000a9d2 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b0e5:	83 c4 10             	add    esp,0x10
c000b0e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0ec:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b0ef:	8d 50 bf             	lea    edx,[eax-0x41]
c000b0f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0f6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b0fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b100:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b108:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b10e:	25 ff 00 00 00       	and    eax,0xff
c000b113:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000b11a:	85 c0                	test   eax,eax
c000b11c:	74 42                	je     c000b160 <Directory::Directory(char const*, Process*)+0xba>
c000b11e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b122:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b128:	25 ff 00 00 00       	and    eax,0xff
c000b12d:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000b134:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b13a:	85 c0                	test   eax,eax
c000b13c:	75 22                	jne    c000b160 <Directory::Directory(char const*, Process*)+0xba>
c000b13e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b142:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b148:	25 ff 00 00 00       	and    eax,0xff
c000b14d:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000b154:	83 ec 0c             	sub    esp,0xc
c000b157:	50                   	push   eax
c000b158:	e8 37 1b 00 00       	call   c000cc94 <LogicalDisk::mount()>
c000b15d:	83 c4 10             	add    esp,0x10
c000b160:	90                   	nop
c000b161:	83 c4 0c             	add    esp,0xc
c000b164:	c3                   	ret    
c000b165:	90                   	nop

c000b166 <Directory::open()>:
c000b166:	53                   	push   ebx
c000b167:	b8 0b 00 00 00       	mov    eax,0xb
c000b16c:	83 ec 08             	sub    esp,0x8
c000b16f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b173:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b17a:	80 fa 19             	cmp    dl,0x19
c000b17d:	77 3d                	ja     c000b1bc <Directory::open()+0x56>
c000b17f:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000b186:	85 d2                	test   edx,edx
c000b188:	74 32                	je     c000b1bc <Directory::open()+0x56>
c000b18a:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b190:	85 d2                	test   edx,edx
c000b192:	74 28                	je     c000b1bc <Directory::open()+0x56>
c000b194:	b8 06 00 00 00       	mov    eax,0x6
c000b199:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b19d:	75 1d                	jne    c000b1bc <Directory::open()+0x56>
c000b19f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b1a5:	50                   	push   eax
c000b1a6:	8b 02                	mov    eax,DWORD PTR [edx]
c000b1a8:	51                   	push   ecx
c000b1a9:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b1ac:	51                   	push   ecx
c000b1ad:	52                   	push   edx
c000b1ae:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b1b1:	83 c4 10             	add    esp,0x10
c000b1b4:	85 c0                	test   eax,eax
c000b1b6:	75 04                	jne    c000b1bc <Directory::open()+0x56>
c000b1b8:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b1bc:	83 c4 08             	add    esp,0x8
c000b1bf:	5b                   	pop    ebx
c000b1c0:	c3                   	ret    
c000b1c1:	90                   	nop

c000b1c2 <Directory::close()>:
c000b1c2:	53                   	push   ebx
c000b1c3:	b8 0b 00 00 00       	mov    eax,0xb
c000b1c8:	83 ec 08             	sub    esp,0x8
c000b1cb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b1cf:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b1d6:	80 fa 19             	cmp    dl,0x19
c000b1d9:	77 41                	ja     c000b21c <Directory::close()+0x5a>
c000b1db:	8b 1c 95 20 64 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd9be0]
c000b1e2:	85 db                	test   ebx,ebx
c000b1e4:	74 36                	je     c000b21c <Directory::close()+0x5a>
c000b1e6:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b1ed:	74 2d                	je     c000b21c <Directory::close()+0x5a>
c000b1ef:	b8 05 00 00 00       	mov    eax,0x5
c000b1f4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b1f8:	74 22                	je     c000b21c <Directory::close()+0x5a>
c000b1fa:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b1fe:	8b 04 95 20 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9be0]
c000b205:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b20b:	53                   	push   ebx
c000b20c:	53                   	push   ebx
c000b20d:	8b 10                	mov    edx,DWORD PTR [eax]
c000b20f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b215:	50                   	push   eax
c000b216:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b219:	83 c4 10             	add    esp,0x10
c000b21c:	83 c4 08             	add    esp,0x8
c000b21f:	5b                   	pop    ebx
c000b220:	c3                   	ret    
c000b221:	90                   	nop

c000b222 <Directory::unlink()>:
c000b222:	83 ec 0c             	sub    esp,0xc
c000b225:	b8 0b 00 00 00       	mov    eax,0xb
c000b22a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b22e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b235:	80 f9 19             	cmp    cl,0x19
c000b238:	77 2f                	ja     c000b269 <Directory::unlink()+0x47>
c000b23a:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b241:	85 c9                	test   ecx,ecx
c000b243:	74 24                	je     c000b269 <Directory::unlink()+0x47>
c000b245:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b24b:	85 c9                	test   ecx,ecx
c000b24d:	74 1a                	je     c000b269 <Directory::unlink()+0x47>
c000b24f:	b8 06 00 00 00       	mov    eax,0x6
c000b254:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b258:	75 0f                	jne    c000b269 <Directory::unlink()+0x47>
c000b25a:	83 c2 0d             	add    edx,0xd
c000b25d:	50                   	push   eax
c000b25e:	50                   	push   eax
c000b25f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b261:	52                   	push   edx
c000b262:	51                   	push   ecx
c000b263:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b266:	83 c4 10             	add    esp,0x10
c000b269:	83 c4 0c             	add    esp,0xc
c000b26c:	c3                   	ret    
c000b26d:	90                   	nop

c000b26e <Directory::rename(char const*)>:
c000b26e:	83 ec 0c             	sub    esp,0xc
c000b271:	b8 0b 00 00 00       	mov    eax,0xb
c000b276:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b27a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b281:	80 f9 19             	cmp    cl,0x19
c000b284:	77 32                	ja     c000b2b8 <Directory::rename(char const*)+0x4a>
c000b286:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b28d:	85 c9                	test   ecx,ecx
c000b28f:	74 27                	je     c000b2b8 <Directory::rename(char const*)+0x4a>
c000b291:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b297:	85 c9                	test   ecx,ecx
c000b299:	74 1d                	je     c000b2b8 <Directory::rename(char const*)+0x4a>
c000b29b:	b8 06 00 00 00       	mov    eax,0x6
c000b2a0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2a4:	75 12                	jne    c000b2b8 <Directory::rename(char const*)+0x4a>
c000b2a6:	83 c2 0d             	add    edx,0xd
c000b2a9:	50                   	push   eax
c000b2aa:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b2b0:	52                   	push   edx
c000b2b1:	51                   	push   ecx
c000b2b2:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b2b5:	83 c4 10             	add    esp,0x10
c000b2b8:	83 c4 0c             	add    esp,0xc
c000b2bb:	c3                   	ret    

c000b2bc <Directory::exists()>:
c000b2bc:	83 ec 0c             	sub    esp,0xc
c000b2bf:	31 c0                	xor    eax,eax
c000b2c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2c5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2cc:	80 f9 19             	cmp    cl,0x19
c000b2cf:	77 24                	ja     c000b2f5 <Directory::exists()+0x39>
c000b2d1:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b2d8:	85 c9                	test   ecx,ecx
c000b2da:	74 19                	je     c000b2f5 <Directory::exists()+0x39>
c000b2dc:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b2e2:	85 c9                	test   ecx,ecx
c000b2e4:	74 0f                	je     c000b2f5 <Directory::exists()+0x39>
c000b2e6:	83 c2 0d             	add    edx,0xd
c000b2e9:	50                   	push   eax
c000b2ea:	50                   	push   eax
c000b2eb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2ed:	52                   	push   edx
c000b2ee:	51                   	push   ecx
c000b2ef:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b2f2:	83 c4 10             	add    esp,0x10
c000b2f5:	83 c4 0c             	add    esp,0xc
c000b2f8:	c3                   	ret    
c000b2f9:	90                   	nop

c000b2fa <Directory::read(dirent*)>:
c000b2fa:	83 ec 1c             	sub    esp,0x1c
c000b2fd:	b8 0b 00 00 00       	mov    eax,0xb
c000b302:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b306:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b30d:	80 fa 19             	cmp    dl,0x19
c000b310:	77 30                	ja     c000b342 <Directory::read(dirent*)+0x48>
c000b312:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000b319:	85 d2                	test   edx,edx
c000b31b:	74 25                	je     c000b342 <Directory::read(dirent*)+0x48>
c000b31d:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b324:	74 1c                	je     c000b342 <Directory::read(dirent*)+0x48>
c000b326:	83 ec 0c             	sub    esp,0xc
c000b329:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b32b:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b32f:	52                   	push   edx
c000b330:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b334:	6a 00                	push   0x0
c000b336:	68 10 01 00 00       	push   0x110
c000b33b:	51                   	push   ecx
c000b33c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b33f:	83 c4 20             	add    esp,0x20
c000b342:	83 c4 1c             	add    esp,0x1c
c000b345:	c3                   	ret    

c000b346 <Directory::create()>:
c000b346:	83 ec 0c             	sub    esp,0xc
c000b349:	b8 0b 00 00 00       	mov    eax,0xb
c000b34e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b352:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b359:	80 f9 19             	cmp    cl,0x19
c000b35c:	77 2f                	ja     c000b38d <Directory::create()+0x47>
c000b35e:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b365:	85 c9                	test   ecx,ecx
c000b367:	74 24                	je     c000b38d <Directory::create()+0x47>
c000b369:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b36f:	85 c9                	test   ecx,ecx
c000b371:	74 1a                	je     c000b38d <Directory::create()+0x47>
c000b373:	b8 06 00 00 00       	mov    eax,0x6
c000b378:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b37c:	75 0f                	jne    c000b38d <Directory::create()+0x47>
c000b37e:	83 c2 0d             	add    edx,0xd
c000b381:	50                   	push   eax
c000b382:	50                   	push   eax
c000b383:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b385:	52                   	push   edx
c000b386:	51                   	push   ecx
c000b387:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b38a:	83 c4 10             	add    esp,0x10
c000b38d:	83 c4 0c             	add    esp,0xc
c000b390:	c3                   	ret    
c000b391:	90                   	nop

c000b392 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b392:	b8 0a 00 00 00       	mov    eax,0xa
c000b397:	c3                   	ret    

c000b398 <Bus::Bus(char const*)>:
c000b398:	83 ec 0c             	sub    esp,0xc
c000b39b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b39f:	83 ec 08             	sub    esp,0x8
c000b3a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3a6:	50                   	push   eax
c000b3a7:	e8 30 08 00 00       	call   c000bbdc <Device::Device(char const*)>
c000b3ac:	83 c4 10             	add    esp,0x10
c000b3af:	ba 48 fa 01 c0       	mov    edx,0xc001fa48
c000b3b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3b8:	89 10                	mov    DWORD PTR [eax],edx
c000b3ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3be:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b3c8:	90                   	nop
c000b3c9:	83 c4 0c             	add    esp,0xc
c000b3cc:	c3                   	ret    
c000b3cd:	90                   	nop
c000b3ce:	66 90                	xchg   ax,ax

c000b3d0 <Bus::~Bus()>:
c000b3d0:	83 ec 0c             	sub    esp,0xc
c000b3d3:	ba 48 fa 01 c0       	mov    edx,0xc001fa48
c000b3d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3dc:	89 10                	mov    DWORD PTR [eax],edx
c000b3de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3e2:	83 ec 0c             	sub    esp,0xc
c000b3e5:	50                   	push   eax
c000b3e6:	e8 5b 05 00 00       	call   c000b946 <Device::~Device()>
c000b3eb:	83 c4 10             	add    esp,0x10
c000b3ee:	90                   	nop
c000b3ef:	83 c4 0c             	add    esp,0xc
c000b3f2:	c3                   	ret    
c000b3f3:	90                   	nop

c000b3f4 <Bus::~Bus()>:
c000b3f4:	83 ec 0c             	sub    esp,0xc
c000b3f7:	83 ec 0c             	sub    esp,0xc
c000b3fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3fe:	e8 cd ff ff ff       	call   c000b3d0 <Bus::~Bus()>
c000b403:	83 c4 10             	add    esp,0x10
c000b406:	83 ec 08             	sub    esp,0x8
c000b409:	68 58 01 00 00       	push   0x158
c000b40e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b412:	e8 f9 f0 ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c000b417:	83 c4 10             	add    esp,0x10
c000b41a:	83 c4 0c             	add    esp,0xc
c000b41d:	c3                   	ret    

c000b41e <beepThread(void*)>:
c000b41e:	83 ec 0c             	sub    esp,0xc
c000b421:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000b426:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b42a:	48                   	dec    eax
c000b42b:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000b430:	75 01                	jne    c000b433 <beepThread(void*)+0x15>
c000b432:	fb                   	sti    
c000b433:	83 ec 0c             	sub    esp,0xc
c000b436:	6b c2 0a             	imul   eax,edx,0xa
c000b439:	50                   	push   eax
c000b43a:	e8 1d 99 00 00       	call   c0014d5c <milliTenthSleep(unsigned int)>
c000b43f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b446:	e8 fe b6 00 00       	call   c0016b49 <HalMakeBeep(int)>
c000b44b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b453:	83 c4 1c             	add    esp,0x1c
c000b456:	e9 fd 97 00 00       	jmp    c0014c58 <blockTask(TaskState)>

c000b45b <Krnl::beep(int, int, bool)>:
c000b45b:	56                   	push   esi
c000b45c:	53                   	push   ebx
c000b45d:	83 ec 10             	sub    esp,0x10
c000b460:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b464:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b468:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b46c:	e8 d8 b6 00 00       	call   c0016b49 <HalMakeBeep(int)>
c000b471:	83 c4 10             	add    esp,0x10
c000b474:	89 f0                	mov    eax,esi
c000b476:	84 c0                	test   al,al
c000b478:	74 1e                	je     c000b498 <Krnl::beep(int, int, bool)+0x3d>
c000b47a:	83 ec 0c             	sub    esp,0xc
c000b47d:	6b db 0a             	imul   ebx,ebx,0xa
c000b480:	53                   	push   ebx
c000b481:	e8 d6 98 00 00       	call   c0014d5c <milliTenthSleep(unsigned int)>
c000b486:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b48e:	83 c4 14             	add    esp,0x14
c000b491:	5b                   	pop    ebx
c000b492:	5e                   	pop    esi
c000b493:	e9 b1 b6 00 00       	jmp    c0016b49 <HalMakeBeep(int)>
c000b498:	68 e6 00 00 00       	push   0xe6
c000b49d:	53                   	push   ebx
c000b49e:	68 1e b4 00 c0       	push   0xc000b41e
c000b4a3:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c000b4a9:	e8 66 93 00 00       	call   c0014814 <Process::createThread(void (*)(void*), void*, int)>
c000b4ae:	83 c4 14             	add    esp,0x14
c000b4b1:	5b                   	pop    ebx
c000b4b2:	5e                   	pop    esi
c000b4b3:	c3                   	ret    

c000b4b4 <User::loadClockSettings(int)>:
c000b4b4:	53                   	push   ebx
c000b4b5:	83 ec 14             	sub    esp,0x14
c000b4b8:	68 14 01 00 00       	push   0x114
c000b4bd:	e8 a3 c3 ff ff       	call   c0007865 <malloc>
c000b4c2:	83 c4 0c             	add    esp,0xc
c000b4c5:	89 c3                	mov    ebx,eax
c000b4c7:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c000b4cd:	68 6c fa 01 c0       	push   0xc001fa6c
c000b4d2:	50                   	push   eax
c000b4d3:	e8 a4 f6 ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c000b4d8:	58                   	pop    eax
c000b4d9:	5a                   	pop    edx
c000b4da:	6a 01                	push   0x1
c000b4dc:	53                   	push   ebx
c000b4dd:	e8 5a f7 ff ff       	call   c000ac3c <File::open(FileOpenMode)>
c000b4e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b4e5:	e8 b0 f7 ff ff       	call   c000ac9a <File::close()>
c000b4ea:	83 c4 10             	add    esp,0x10
c000b4ed:	85 db                	test   ebx,ebx
c000b4ef:	74 0f                	je     c000b500 <User::loadClockSettings(int)+0x4c>
c000b4f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4f3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b4f7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b4fa:	83 c4 08             	add    esp,0x8
c000b4fd:	5b                   	pop    ebx
c000b4fe:	ff e0                	jmp    eax
c000b500:	83 c4 08             	add    esp,0x8
c000b503:	5b                   	pop    ebx
c000b504:	c3                   	ret    
c000b505:	90                   	nop

c000b506 <Clock::Clock(char const*)>:
c000b506:	83 ec 0c             	sub    esp,0xc
c000b509:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b50d:	83 ec 08             	sub    esp,0x8
c000b510:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b514:	50                   	push   eax
c000b515:	e8 c2 06 00 00       	call   c000bbdc <Device::Device(char const*)>
c000b51a:	83 c4 10             	add    esp,0x10
c000b51d:	ba 94 fa 01 c0       	mov    edx,0xc001fa94
c000b522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b526:	89 10                	mov    DWORD PTR [eax],edx
c000b528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b52c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b536:	90                   	nop
c000b537:	83 c4 0c             	add    esp,0xc
c000b53a:	c3                   	ret    
c000b53b:	90                   	nop

c000b53c <Clock::~Clock()>:
c000b53c:	83 ec 0c             	sub    esp,0xc
c000b53f:	ba 94 fa 01 c0       	mov    edx,0xc001fa94
c000b544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b548:	89 10                	mov    DWORD PTR [eax],edx
c000b54a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b54e:	83 ec 0c             	sub    esp,0xc
c000b551:	50                   	push   eax
c000b552:	e8 ef 03 00 00       	call   c000b946 <Device::~Device()>
c000b557:	83 c4 10             	add    esp,0x10
c000b55a:	90                   	nop
c000b55b:	83 c4 0c             	add    esp,0xc
c000b55e:	c3                   	ret    
c000b55f:	90                   	nop

c000b560 <Clock::~Clock()>:
c000b560:	83 ec 0c             	sub    esp,0xc
c000b563:	83 ec 0c             	sub    esp,0xc
c000b566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b56a:	e8 cd ff ff ff       	call   c000b53c <Clock::~Clock()>
c000b56f:	83 c4 10             	add    esp,0x10
c000b572:	83 ec 08             	sub    esp,0x8
c000b575:	68 58 01 00 00       	push   0x158
c000b57a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b57e:	e8 8d ef ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c000b583:	83 c4 10             	add    esp,0x10
c000b586:	83 c4 0c             	add    esp,0xc
c000b589:	c3                   	ret    

c000b58a <Clock::timeInSecondsLocal()>:
c000b58a:	53                   	push   ebx
c000b58b:	83 ec 14             	sub    esp,0x14
c000b58e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b592:	8b 10                	mov    edx,DWORD PTR [eax]
c000b594:	50                   	push   eax
c000b595:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b598:	0f b6 0d b8 3f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0023fb8
c000b59f:	03 0d bc 3f 02 c0    	add    ecx,DWORD PTR ds:0xc0023fbc
c000b5a5:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b5ab:	89 cb                	mov    ebx,ecx
c000b5ad:	c1 fb 1f             	sar    ebx,0x1f
c000b5b0:	01 c8                	add    eax,ecx
c000b5b2:	11 da                	adc    edx,ebx
c000b5b4:	83 c4 10             	add    esp,0x10
c000b5b7:	31 c9                	xor    ecx,ecx
c000b5b9:	80 3d b9 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fb9,0x0
c000b5c0:	74 05                	je     c000b5c7 <Clock::timeInSecondsLocal()+0x3d>
c000b5c2:	b9 08 07 00 00       	mov    ecx,0x708
c000b5c7:	31 db                	xor    ebx,ebx
c000b5c9:	01 c8                	add    eax,ecx
c000b5cb:	11 da                	adc    edx,ebx
c000b5cd:	83 c4 08             	add    esp,0x8
c000b5d0:	5b                   	pop    ebx
c000b5d1:	c3                   	ret    

c000b5d2 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b5d2:	57                   	push   edi
c000b5d3:	56                   	push   esi
c000b5d4:	53                   	push   ebx
c000b5d5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b5d9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b5dd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b5df:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b5e3:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b5e6:	0f b6 05 b8 3f 02 c0 	movzx  eax,BYTE PTR ds:0xc0023fb8
c000b5ed:	03 05 bc 3f 02 c0    	add    eax,DWORD PTR ds:0xc0023fbc
c000b5f3:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b5f9:	99                   	cdq    
c000b5fa:	29 c6                	sub    esi,eax
c000b5fc:	19 d7                	sbb    edi,edx
c000b5fe:	89 f0                	mov    eax,esi
c000b600:	89 fa                	mov    edx,edi
c000b602:	31 f6                	xor    esi,esi
c000b604:	80 3d b9 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fb9,0x0
c000b60b:	74 05                	je     c000b612 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b60d:	be 08 07 00 00       	mov    esi,0x708
c000b612:	31 ff                	xor    edi,edi
c000b614:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b618:	29 f0                	sub    eax,esi
c000b61a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b61e:	19 fa                	sbb    edx,edi
c000b620:	89 d8                	mov    eax,ebx
c000b622:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b626:	5b                   	pop    ebx
c000b627:	5e                   	pop    esi
c000b628:	5f                   	pop    edi
c000b629:	ff e0                	jmp    eax

c000b62b <datetimeToSeconds(datetime_t)>:
c000b62b:	55                   	push   ebp
c000b62c:	57                   	push   edi
c000b62d:	56                   	push   esi
c000b62e:	53                   	push   ebx
c000b62f:	83 ec 14             	sub    esp,0x14
c000b632:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b636:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b63a:	89 d3                	mov    ebx,edx
c000b63c:	0f b6 c6             	movzx  eax,dh
c000b63f:	c1 eb 10             	shr    ebx,0x10
c000b642:	48                   	dec    eax
c000b643:	66 81 eb 6c 07       	sub    bx,0x76c
c000b648:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b64c:	0f b6 f5             	movzx  esi,ch
c000b64f:	89 cf                	mov    edi,ecx
c000b651:	6b f6 3c             	imul   esi,esi,0x3c
c000b654:	c1 ef 10             	shr    edi,0x10
c000b657:	0f b6 c9             	movzx  ecx,cl
c000b65a:	89 f8                	mov    eax,edi
c000b65c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b662:	0f b6 f8             	movzx  edi,al
c000b665:	0f b6 d2             	movzx  edx,dl
c000b668:	01 fe                	add    esi,edi
c000b66a:	01 f1                	add    ecx,esi
c000b66c:	0f b7 f3             	movzx  esi,bx
c000b66f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b673:	c1 f9 1f             	sar    ecx,0x1f
c000b676:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b67b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b67f:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b684:	8b 0c 8d e0 fa 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe0520]
c000b68b:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b68f:	76 29                	jbe    c000b6ba <datetimeToSeconds(datetime_t)+0x8f>
c000b691:	f6 c3 03             	test   bl,0x3
c000b694:	75 24                	jne    c000b6ba <datetimeToSeconds(datetime_t)+0x8f>
c000b696:	31 d2                	xor    edx,edx
c000b698:	bf 64 00 00 00       	mov    edi,0x64
c000b69d:	89 d8                	mov    eax,ebx
c000b69f:	66 f7 f7             	div    di
c000b6a2:	66 85 d2             	test   dx,dx
c000b6a5:	75 12                	jne    c000b6b9 <datetimeToSeconds(datetime_t)+0x8e>
c000b6a7:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b6ad:	bf 90 01 00 00       	mov    edi,0x190
c000b6b2:	99                   	cdq    
c000b6b3:	f7 ff                	idiv   edi
c000b6b5:	85 d2                	test   edx,edx
c000b6b7:	75 01                	jne    c000b6ba <datetimeToSeconds(datetime_t)+0x8f>
c000b6b9:	41                   	inc    ecx
c000b6ba:	66 83 fb 46          	cmp    bx,0x46
c000b6be:	76 45                	jbe    c000b705 <datetimeToSeconds(datetime_t)+0xda>
c000b6c0:	bb 46 00 00 00       	mov    ebx,0x46
c000b6c5:	bf 64 00 00 00       	mov    edi,0x64
c000b6ca:	bd 90 01 00 00       	mov    ebp,0x190
c000b6cf:	b8 6d 01 00 00       	mov    eax,0x16d
c000b6d4:	f6 c3 03             	test   bl,0x3
c000b6d7:	75 23                	jne    c000b6fc <datetimeToSeconds(datetime_t)+0xd1>
c000b6d9:	89 d8                	mov    eax,ebx
c000b6db:	99                   	cdq    
c000b6dc:	f7 ff                	idiv   edi
c000b6de:	b8 6e 01 00 00       	mov    eax,0x16e
c000b6e3:	85 d2                	test   edx,edx
c000b6e5:	75 15                	jne    c000b6fc <datetimeToSeconds(datetime_t)+0xd1>
c000b6e7:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b6ed:	99                   	cdq    
c000b6ee:	f7 fd                	idiv   ebp
c000b6f0:	31 c0                	xor    eax,eax
c000b6f2:	85 d2                	test   edx,edx
c000b6f4:	0f 94 c0             	sete   al
c000b6f7:	05 6d 01 00 00       	add    eax,0x16d
c000b6fc:	01 c1                	add    ecx,eax
c000b6fe:	43                   	inc    ebx
c000b6ff:	39 f3                	cmp    ebx,esi
c000b701:	7c cc                	jl     c000b6cf <datetimeToSeconds(datetime_t)+0xa4>
c000b703:	eb 3b                	jmp    c000b740 <datetimeToSeconds(datetime_t)+0x115>
c000b705:	74 39                	je     c000b740 <datetimeToSeconds(datetime_t)+0x115>
c000b707:	b8 45 00 00 00       	mov    eax,0x45
c000b70c:	89 c2                	mov    edx,eax
c000b70e:	83 e2 03             	and    edx,0x3
c000b711:	39 f0                	cmp    eax,esi
c000b713:	7e 13                	jle    c000b728 <datetimeToSeconds(datetime_t)+0xfd>
c000b715:	85 d2                	test   edx,edx
c000b717:	0f 94 c2             	sete   dl
c000b71a:	48                   	dec    eax
c000b71b:	0f b6 d2             	movzx  edx,dl
c000b71e:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b724:	29 d1                	sub    ecx,edx
c000b726:	eb e4                	jmp    c000b70c <datetimeToSeconds(datetime_t)+0xe1>
c000b728:	b8 6d 01 00 00       	mov    eax,0x16d
c000b72d:	85 d2                	test   edx,edx
c000b72f:	75 0d                	jne    c000b73e <datetimeToSeconds(datetime_t)+0x113>
c000b731:	31 c0                	xor    eax,eax
c000b733:	66 85 db             	test   bx,bx
c000b736:	0f 95 c0             	setne  al
c000b739:	05 6d 01 00 00       	add    eax,0x16d
c000b73e:	29 c1                	sub    ecx,eax
c000b740:	b8 80 51 01 00       	mov    eax,0x15180
c000b745:	f7 e9                	imul   ecx
c000b747:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b74b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b74f:	83 c4 14             	add    esp,0x14
c000b752:	5b                   	pop    ebx
c000b753:	5e                   	pop    esi
c000b754:	5f                   	pop    edi
c000b755:	5d                   	pop    ebp
c000b756:	c3                   	ret    
c000b757:	90                   	nop

c000b758 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b758:	57                   	push   edi
c000b759:	56                   	push   esi
c000b75a:	53                   	push   ebx
c000b75b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b75f:	8b 06                	mov    eax,DWORD PTR [esi]
c000b761:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b764:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b768:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b76c:	e8 ba fe ff ff       	call   c000b62b <datetimeToSeconds(datetime_t)>
c000b771:	59                   	pop    ecx
c000b772:	0f b6 0d b8 3f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0023fb8
c000b779:	5b                   	pop    ebx
c000b77a:	03 0d bc 3f 02 c0    	add    ecx,DWORD PTR ds:0xc0023fbc
c000b780:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b786:	89 cb                	mov    ebx,ecx
c000b788:	c1 fb 1f             	sar    ebx,0x1f
c000b78b:	29 c8                	sub    eax,ecx
c000b78d:	19 da                	sbb    edx,ebx
c000b78f:	31 c9                	xor    ecx,ecx
c000b791:	80 3d b9 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fb9,0x0
c000b798:	74 05                	je     c000b79f <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b79a:	b9 08 07 00 00       	mov    ecx,0x708
c000b79f:	31 db                	xor    ebx,ebx
c000b7a1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b7a5:	29 c8                	sub    eax,ecx
c000b7a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b7ab:	19 da                	sbb    edx,ebx
c000b7ad:	89 f8                	mov    eax,edi
c000b7af:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b7b3:	5b                   	pop    ebx
c000b7b4:	5e                   	pop    esi
c000b7b5:	5f                   	pop    edi
c000b7b6:	ff e0                	jmp    eax

c000b7b8 <secondsToDatetime(unsigned long long)>:
c000b7b8:	55                   	push   ebp
c000b7b9:	57                   	push   edi
c000b7ba:	56                   	push   esi
c000b7bb:	53                   	push   ebx
c000b7bc:	83 ec 1c             	sub    esp,0x1c
c000b7bf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b7c3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b7c7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b7cb:	6a 00                	push   0x0
c000b7cd:	68 80 51 01 00       	push   0x15180
c000b7d2:	55                   	push   ebp
c000b7d3:	57                   	push   edi
c000b7d4:	e8 87 25 01 00       	call   c001dd60 <__udivdi3>
c000b7d9:	83 c4 10             	add    esp,0x10
c000b7dc:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b7e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7e6:	6a 00                	push   0x0
c000b7e8:	68 80 51 01 00       	push   0x15180
c000b7ed:	55                   	push   ebp
c000b7ee:	57                   	push   edi
c000b7ef:	bf 10 0e 00 00       	mov    edi,0xe10
c000b7f4:	e8 67 26 01 00       	call   c001de60 <__umoddi3>
c000b7f9:	83 c4 10             	add    esp,0x10
c000b7fc:	99                   	cdq    
c000b7fd:	f7 ff                	idiv   edi
c000b7ff:	bf 3c 00 00 00       	mov    edi,0x3c
c000b804:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b807:	89 d0                	mov    eax,edx
c000b809:	99                   	cdq    
c000b80a:	f7 ff                	idiv   edi
c000b80c:	85 db                	test   ebx,ebx
c000b80e:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b811:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b814:	79 11                	jns    c000b827 <secondsToDatetime(unsigned long long)+0x6f>
c000b816:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b81a:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b820:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b825:	eb 07                	jmp    c000b82e <secondsToDatetime(unsigned long long)+0x76>
c000b827:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b82c:	89 d8                	mov    eax,ebx
c000b82e:	bf b4 05 00 00       	mov    edi,0x5b4
c000b833:	99                   	cdq    
c000b834:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b839:	f7 f9                	idiv   ecx
c000b83b:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b840:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b844:	31 d2                	xor    edx,edx
c000b846:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b84e:	01 c3                	add    ebx,eax
c000b850:	89 d8                	mov    eax,ebx
c000b852:	f7 f1                	div    ecx
c000b854:	31 d2                	xor    edx,edx
c000b856:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b859:	89 d8                	mov    eax,ebx
c000b85b:	f7 f7                	div    edi
c000b85d:	31 d2                	xor    edx,edx
c000b85f:	29 c1                	sub    ecx,eax
c000b861:	89 d8                	mov    eax,ebx
c000b863:	f7 f5                	div    ebp
c000b865:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b86a:	29 c1                	sub    ecx,eax
c000b86c:	31 d2                	xor    edx,edx
c000b86e:	89 c8                	mov    eax,ecx
c000b870:	f7 f5                	div    ebp
c000b872:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b877:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b87b:	31 d2                	xor    edx,edx
c000b87d:	89 c8                	mov    eax,ecx
c000b87f:	f7 f5                	div    ebp
c000b881:	31 d2                	xor    edx,edx
c000b883:	01 c3                	add    ebx,eax
c000b885:	89 c8                	mov    eax,ecx
c000b887:	f7 f7                	div    edi
c000b889:	bf 99 00 00 00       	mov    edi,0x99
c000b88e:	29 c3                	sub    ebx,eax
c000b890:	31 d2                	xor    edx,edx
c000b892:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b89a:	29 c3                	sub    ebx,eax
c000b89c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b89f:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b8a2:	bb 05 00 00 00       	mov    ebx,0x5
c000b8a7:	83 c1 02             	add    ecx,0x2
c000b8aa:	89 c8                	mov    eax,ecx
c000b8ac:	f7 f7                	div    edi
c000b8ae:	31 d2                	xor    edx,edx
c000b8b0:	89 c7                	mov    edi,eax
c000b8b2:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b8b8:	83 c0 02             	add    eax,0x2
c000b8bb:	f7 f3                	div    ebx
c000b8bd:	89 eb                	mov    ebx,ebp
c000b8bf:	29 c3                	sub    ebx,eax
c000b8c1:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b8c7:	88 1e                	mov    BYTE PTR [esi],bl
c000b8c9:	19 c0                	sbb    eax,eax
c000b8cb:	31 d2                	xor    edx,edx
c000b8cd:	83 e0 0c             	and    eax,0xc
c000b8d0:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b8d4:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b8dc:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b8e0:	83 f9 01             	cmp    ecx,0x1
c000b8e3:	0f 96 c2             	setbe  dl
c000b8e6:	41                   	inc    ecx
c000b8e7:	01 d0                	add    eax,edx
c000b8e9:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b8ec:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b8f0:	83 c4 1c             	add    esp,0x1c
c000b8f3:	89 f0                	mov    eax,esi
c000b8f5:	5b                   	pop    ebx
c000b8f6:	5e                   	pop    esi
c000b8f7:	5f                   	pop    edi
c000b8f8:	5d                   	pop    ebp
c000b8f9:	c2 04 00             	ret    0x4

c000b8fc <Clock::timeInDatetimeLocal()>:
c000b8fc:	53                   	push   ebx
c000b8fd:	83 ec 14             	sub    esp,0x14
c000b900:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b904:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b908:	e8 7d fc ff ff       	call   c000b58a <Clock::timeInSecondsLocal()>
c000b90d:	83 c4 0c             	add    esp,0xc
c000b910:	52                   	push   edx
c000b911:	50                   	push   eax
c000b912:	53                   	push   ebx
c000b913:	e8 a0 fe ff ff       	call   c000b7b8 <secondsToDatetime(unsigned long long)>
c000b918:	89 d8                	mov    eax,ebx
c000b91a:	83 c4 14             	add    esp,0x14
c000b91d:	5b                   	pop    ebx
c000b91e:	c2 04 00             	ret    0x4
c000b921:	90                   	nop

c000b922 <Device::hibernate()>:
c000b922:	c3                   	ret    
c000b923:	90                   	nop

c000b924 <Device::wake()>:
c000b924:	c3                   	ret    
c000b925:	90                   	nop

c000b926 <Device::detect()>:
c000b926:	c3                   	ret    
c000b927:	90                   	nop

c000b928 <Device::disableLegacy()>:
c000b928:	c3                   	ret    
c000b929:	90                   	nop

c000b92a <Device::powerSaving(PowerSavingLevel)>:
c000b92a:	c3                   	ret    
c000b92b:	90                   	nop

c000b92c <DriverlessDevice::close(int, int, void*)>:
c000b92c:	31 c0                	xor    eax,eax
c000b92e:	c3                   	ret    
c000b92f:	90                   	nop

c000b930 <DriverlessDevice::detect()>:
c000b930:	c3                   	ret    
c000b931:	90                   	nop

c000b932 <DriverlessDevice::open(int, int, void*)>:
c000b932:	83 ec 18             	sub    esp,0x18
c000b935:	68 10 fb 01 c0       	push   0xc001fb10
c000b93a:	e8 88 4a 00 00       	call   c00103c7 <KePanic(char const*)>
c000b93f:	83 c8 ff             	or     eax,0xffffffff
c000b942:	83 c4 1c             	add    esp,0x1c
c000b945:	c3                   	ret    

c000b946 <Device::~Device()>:
c000b946:	ba 70 fb 01 c0       	mov    edx,0xc001fb70
c000b94b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b94f:	89 10                	mov    DWORD PTR [eax],edx
c000b951:	90                   	nop
c000b952:	c3                   	ret    
c000b953:	90                   	nop

c000b954 <Device::~Device()>:
c000b954:	83 ec 0c             	sub    esp,0xc
c000b957:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b95b:	e8 e6 ff ff ff       	call   c000b946 <Device::~Device()>
c000b960:	83 c4 04             	add    esp,0x4
c000b963:	83 ec 08             	sub    esp,0x8
c000b966:	68 58 01 00 00       	push   0x158
c000b96b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b96f:	e8 9c eb ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c000b974:	83 c4 10             	add    esp,0x10
c000b977:	83 c4 0c             	add    esp,0xc
c000b97a:	c3                   	ret    
c000b97b:	90                   	nop

c000b97c <Device::findAndLoadDriver()>:
c000b97c:	c7 44 24 04 2e fb 01 c0 	mov    DWORD PTR [esp+0x4],0xc001fb2e
c000b984:	e9 7d ec ff ff       	jmp    c000a606 <Dbg::kprintf(char const*, ...)>
c000b989:	90                   	nop

c000b98a <Device::preOpenPCI(PCIDeviceInfo)>:
c000b98a:	57                   	push   edi
c000b98b:	b9 09 00 00 00       	mov    ecx,0x9
c000b990:	56                   	push   esi
c000b991:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b995:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b999:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000b9a3:	81 c7 18 01 00 00    	add    edi,0x118
c000b9a9:	fc                   	cld    
c000b9aa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b9ac:	5e                   	pop    esi
c000b9ad:	5f                   	pop    edi
c000b9ae:	c3                   	ret    
c000b9af:	90                   	nop

c000b9b0 <Device::preOpenACPI(void*, char*, char*)>:
c000b9b0:	57                   	push   edi
c000b9b1:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b9b6:	56                   	push   esi
c000b9b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b9bf:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000b9c9:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000b9cf:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000b9d5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b9d9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b9db:	b9 0e 00 00 00       	mov    ecx,0xe
c000b9e0:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000b9e6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b9ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b9ec:	5e                   	pop    esi
c000b9ed:	5f                   	pop    edi
c000b9ee:	c3                   	ret    
c000b9ef:	90                   	nop

c000b9f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b9f0:	53                   	push   ebx
c000b9f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b9f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b9fd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ba01:	0f b6 c0             	movzx  eax,al
c000ba04:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ba08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba0c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ba10:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ba14:	5b                   	pop    ebx
c000ba15:	e9 a6 05 00 00       	jmp    c000bfc0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000ba1a <Device::getParent()>:
c000ba1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba1e:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000ba24:	c3                   	ret    
c000ba25:	90                   	nop

c000ba26 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ba26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba2a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba2e:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000ba33:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ba37:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ba3b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ba3f:	e9 e8 06 00 00       	jmp    c000c12c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000ba44 <Device::addChild(Device*)>:
c000ba44:	53                   	push   ebx
c000ba45:	83 ec 08             	sub    esp,0x8
c000ba48:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ba50:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000ba56:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000ba5c:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ba5e:	85 d2                	test   edx,edx
c000ba60:	74 04                	je     c000ba66 <Device::addChild(Device*)+0x22>
c000ba62:	89 d3                	mov    ebx,edx
c000ba64:	eb f6                	jmp    c000ba5c <Device::addChild(Device*)+0x18>
c000ba66:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ba69:	83 ec 0c             	sub    esp,0xc
c000ba6c:	6a 08                	push   0x8
c000ba6e:	e8 f2 bd ff ff       	call   c0007865 <malloc>
c000ba73:	89 03                	mov    DWORD PTR [ebx],eax
c000ba75:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ba7b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ba82:	83 c4 18             	add    esp,0x18
c000ba85:	5b                   	pop    ebx
c000ba86:	c3                   	ret    
c000ba87:	90                   	nop

c000ba88 <Device::removeAllChildren()>:
c000ba88:	56                   	push   esi
c000ba89:	53                   	push   ebx
c000ba8a:	52                   	push   edx
c000ba8b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ba8f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ba95:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba98:	74 17                	je     c000bab1 <Device::removeAllChildren()+0x29>
c000ba9a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ba9d:	85 c0                	test   eax,eax
c000ba9f:	74 0c                	je     c000baad <Device::removeAllChildren()+0x25>
c000baa1:	83 ec 0c             	sub    esp,0xc
c000baa4:	8b 10                	mov    edx,DWORD PTR [eax]
c000baa6:	50                   	push   eax
c000baa7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000baaa:	83 c4 10             	add    esp,0x10
c000baad:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000baaf:	eb e4                	jmp    c000ba95 <Device::removeAllChildren()+0xd>
c000bab1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bab7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000babd:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bac3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000baca:	58                   	pop    eax
c000bacb:	5b                   	pop    ebx
c000bacc:	5e                   	pop    esi
c000bacd:	c3                   	ret    

c000bace <Device::hibernateAll()>:
c000bace:	53                   	push   ebx
c000bacf:	83 ec 14             	sub    esp,0x14
c000bad2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bad6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bad8:	53                   	push   ebx
c000bad9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000badc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bae2:	83 c4 10             	add    esp,0x10
c000bae5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bae8:	74 0f                	je     c000baf9 <Device::hibernateAll()+0x2b>
c000baea:	83 ec 0c             	sub    esp,0xc
c000baed:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000baf0:	e8 d9 ff ff ff       	call   c000bace <Device::hibernateAll()>
c000baf5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000baf7:	eb e9                	jmp    c000bae2 <Device::hibernateAll()+0x14>
c000baf9:	83 c4 08             	add    esp,0x8
c000bafc:	5b                   	pop    ebx
c000bafd:	c3                   	ret    

c000bafe <Device::wakeAll()>:
c000bafe:	53                   	push   ebx
c000baff:	83 ec 14             	sub    esp,0x14
c000bb02:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb06:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb08:	53                   	push   ebx
c000bb09:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000bb0c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb18:	74 0f                	je     c000bb29 <Device::wakeAll()+0x2b>
c000bb1a:	83 ec 0c             	sub    esp,0xc
c000bb1d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb20:	e8 d9 ff ff ff       	call   c000bafe <Device::wakeAll()>
c000bb25:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb27:	eb e9                	jmp    c000bb12 <Device::wakeAll()+0x14>
c000bb29:	83 c4 08             	add    esp,0x8
c000bb2c:	5b                   	pop    ebx
c000bb2d:	c3                   	ret    

c000bb2e <Device::detectAll()>:
c000bb2e:	53                   	push   ebx
c000bb2f:	83 ec 14             	sub    esp,0x14
c000bb32:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb36:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb38:	53                   	push   ebx
c000bb39:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000bb3c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb48:	74 0f                	je     c000bb59 <Device::detectAll()+0x2b>
c000bb4a:	83 ec 0c             	sub    esp,0xc
c000bb4d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb50:	e8 d9 ff ff ff       	call   c000bb2e <Device::detectAll()>
c000bb55:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb57:	eb e9                	jmp    c000bb42 <Device::detectAll()+0x14>
c000bb59:	83 c4 08             	add    esp,0x8
c000bb5c:	5b                   	pop    ebx
c000bb5d:	c3                   	ret    

c000bb5e <Device::disableLegacyAll()>:
c000bb5e:	c3                   	ret    
c000bb5f:	90                   	nop

c000bb60 <Device::loadDriversForAll()>:
c000bb60:	c3                   	ret    
c000bb61:	90                   	nop

c000bb62 <Device::closeAll()>:
c000bb62:	53                   	push   ebx
c000bb63:	83 ec 08             	sub    esp,0x8
c000bb66:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb6a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb6c:	6a 00                	push   0x0
c000bb6e:	6a 00                	push   0x0
c000bb70:	6a 00                	push   0x0
c000bb72:	53                   	push   ebx
c000bb73:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bb76:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb7c:	83 c4 10             	add    esp,0x10
c000bb7f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb82:	74 0f                	je     c000bb93 <Device::closeAll()+0x31>
c000bb84:	83 ec 0c             	sub    esp,0xc
c000bb87:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb8a:	e8 d3 ff ff ff       	call   c000bb62 <Device::closeAll()>
c000bb8f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb91:	eb e9                	jmp    c000bb7c <Device::closeAll()+0x1a>
c000bb93:	83 c4 08             	add    esp,0x8
c000bb96:	5b                   	pop    ebx
c000bb97:	c3                   	ret    

c000bb98 <Device::powerSavingAll(PowerSavingLevel)>:
c000bb98:	56                   	push   esi
c000bb99:	53                   	push   ebx
c000bb9a:	83 ec 0c             	sub    esp,0xc
c000bb9d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bba1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bba5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bba7:	56                   	push   esi
c000bba8:	53                   	push   ebx
c000bba9:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bbac:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bbb2:	83 c4 10             	add    esp,0x10
c000bbb5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bbb8:	74 0f                	je     c000bbc9 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bbba:	52                   	push   edx
c000bbbb:	52                   	push   edx
c000bbbc:	56                   	push   esi
c000bbbd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bbc0:	e8 d3 ff ff ff       	call   c000bb98 <Device::powerSavingAll(PowerSavingLevel)>
c000bbc5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bbc7:	eb e9                	jmp    c000bbb2 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bbc9:	58                   	pop    eax
c000bbca:	5b                   	pop    ebx
c000bbcb:	5e                   	pop    esi
c000bbcc:	c3                   	ret    
c000bbcd:	90                   	nop

c000bbce <Device::setName(char const*)>:
c000bbce:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bbd6:	e9 15 4a ff ff       	jmp    c00005f0 <strcpy>
c000bbdb:	90                   	nop

c000bbdc <Device::Device(char const*)>:
c000bbdc:	83 ec 1c             	sub    esp,0x1c
c000bbdf:	ba 70 fb 01 c0       	mov    edx,0xc001fb70
c000bbe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbe8:	89 10                	mov    DWORD PTR [eax],edx
c000bbea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbee:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bbf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbfc:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bc06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc0a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bc14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc18:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bc22:	83 ec 08             	sub    esp,0x8
c000bc25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc2d:	e8 9c ff ff ff       	call   c000bbce <Device::setName(char const*)>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bc3d:	83 ec 0c             	sub    esp,0xc
c000bc40:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc44:	e8 1c bc ff ff       	call   c0007865 <malloc>
c000bc49:	83 c4 10             	add    esp,0x10
c000bc4c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bc52:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc59:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bc5d:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bc63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc67:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bc6d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bc73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc77:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bc7d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc88:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bc8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc93:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bc9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc9e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bca8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcac:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bcb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcba:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bcc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcc8:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000bcd2:	90                   	nop
c000bcd3:	83 c4 1c             	add    esp,0x1c
c000bcd6:	c3                   	ret    
c000bcd7:	90                   	nop

c000bcd8 <Device::getName()>:
c000bcd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bcdc:	05 d0 00 00 00       	add    eax,0xd0
c000bce1:	c3                   	ret    

c000bce2 <DriverlessDevice::DriverlessDevice(char const*)>:
c000bce2:	83 ec 0c             	sub    esp,0xc
c000bce5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bce9:	83 ec 08             	sub    esp,0x8
c000bcec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf0:	50                   	push   eax
c000bcf1:	e8 e6 fe ff ff       	call   c000bbdc <Device::Device(char const*)>
c000bcf6:	83 c4 10             	add    esp,0x10
c000bcf9:	ba 9c fb 01 c0       	mov    edx,0xc001fb9c
c000bcfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd02:	89 10                	mov    DWORD PTR [eax],edx
c000bd04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd08:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bd12:	90                   	nop
c000bd13:	83 c4 0c             	add    esp,0xc
c000bd16:	c3                   	ret    
c000bd17:	90                   	nop

c000bd18 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bd18:	57                   	push   edi
c000bd19:	56                   	push   esi
c000bd1a:	53                   	push   ebx
c000bd1b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bd1f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bd23:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bd27:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bd2d:	75 0c                	jne    c000bd3b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bd2f:	52                   	push   edx
c000bd30:	52                   	push   edx
c000bd31:	53                   	push   ebx
c000bd32:	56                   	push   esi
c000bd33:	e8 da 24 01 00       	call   c001e212 <LinkedList<Device>::addElement(Device*)>
c000bd38:	83 c4 10             	add    esp,0x10
c000bd3b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bd41:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bd44:	74 12                	je     c000bd58 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bd46:	50                   	push   eax
c000bd47:	57                   	push   edi
c000bd48:	56                   	push   esi
c000bd49:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bd4c:	e8 c7 ff ff ff       	call   c000bd18 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bd51:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bd53:	83 c4 10             	add    esp,0x10
c000bd56:	eb e9                	jmp    c000bd41 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bd58:	5b                   	pop    ebx
c000bd59:	5e                   	pop    esi
c000bd5a:	5f                   	pop    edi
c000bd5b:	c3                   	ret    

c000bd5c <getDevicesOfType(DeviceType)>:
c000bd5c:	53                   	push   ebx
c000bd5d:	83 ec 14             	sub    esp,0x14
c000bd60:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bd64:	53                   	push   ebx
c000bd65:	e8 84 25 01 00       	call   c001e2ee <LinkedList<Device>::LinkedList()>
c000bd6a:	83 c4 0c             	add    esp,0xc
c000bd6d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd71:	53                   	push   ebx
c000bd72:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c000bd78:	e8 9b ff ff ff       	call   c000bd18 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bd7d:	89 d8                	mov    eax,ebx
c000bd7f:	83 c4 18             	add    esp,0x18
c000bd82:	5b                   	pop    ebx
c000bd83:	c2 04 00             	ret    0x4
c000bd86:	66 90                	xchg   ax,ax

c000bd88 <HardDiskController::HardDiskController(char const*)>:
c000bd88:	83 ec 0c             	sub    esp,0xc
c000bd8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd8f:	83 ec 08             	sub    esp,0x8
c000bd92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd96:	50                   	push   eax
c000bd97:	e8 40 fe ff ff       	call   c000bbdc <Device::Device(char const*)>
c000bd9c:	83 c4 10             	add    esp,0x10
c000bd9f:	ba c8 fb 01 c0       	mov    edx,0xc001fbc8
c000bda4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bda8:	89 10                	mov    DWORD PTR [eax],edx
c000bdaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdae:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bdb8:	90                   	nop
c000bdb9:	83 c4 0c             	add    esp,0xc
c000bdbc:	c3                   	ret    
c000bdbd:	90                   	nop
c000bdbe:	66 90                	xchg   ax,ax

c000bdc0 <HardDiskController::~HardDiskController()>:
c000bdc0:	83 ec 0c             	sub    esp,0xc
c000bdc3:	ba c8 fb 01 c0       	mov    edx,0xc001fbc8
c000bdc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdcc:	89 10                	mov    DWORD PTR [eax],edx
c000bdce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdd2:	83 ec 0c             	sub    esp,0xc
c000bdd5:	50                   	push   eax
c000bdd6:	e8 6b fb ff ff       	call   c000b946 <Device::~Device()>
c000bddb:	83 c4 10             	add    esp,0x10
c000bdde:	90                   	nop
c000bddf:	83 c4 0c             	add    esp,0xc
c000bde2:	c3                   	ret    
c000bde3:	90                   	nop

c000bde4 <HardDiskController::~HardDiskController()>:
c000bde4:	83 ec 0c             	sub    esp,0xc
c000bde7:	83 ec 0c             	sub    esp,0xc
c000bdea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdee:	e8 cd ff ff ff       	call   c000bdc0 <HardDiskController::~HardDiskController()>
c000bdf3:	83 c4 10             	add    esp,0x10
c000bdf6:	83 ec 08             	sub    esp,0x8
c000bdf9:	68 58 01 00 00       	push   0x158
c000bdfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be02:	e8 09 e7 ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c000be07:	83 c4 10             	add    esp,0x10
c000be0a:	83 c4 0c             	add    esp,0xc
c000be0d:	c3                   	ret    

c000be0e <PhysicalDisk::eject()>:
c000be0e:	83 c8 ff             	or     eax,0xffffffff
c000be11:	c3                   	ret    

c000be12 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000be12:	83 ec 0c             	sub    esp,0xc
c000be15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be19:	83 ec 08             	sub    esp,0x8
c000be1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be20:	50                   	push   eax
c000be21:	e8 b6 fd ff ff       	call   c000bbdc <Device::Device(char const*)>
c000be26:	83 c4 10             	add    esp,0x10
c000be29:	ba f4 fb 01 c0       	mov    edx,0xc001fbf4
c000be2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be32:	89 10                	mov    DWORD PTR [eax],edx
c000be34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be38:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000be3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be43:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000be4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be4e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000be58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be5c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000be60:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000be66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be6a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000be74:	90                   	nop
c000be75:	83 c4 0c             	add    esp,0xc
c000be78:	c3                   	ret    
c000be79:	90                   	nop

c000be7a <PhysicalDisk::startCache()>:
c000be7a:	56                   	push   esi
c000be7b:	53                   	push   ebx
c000be7c:	83 ec 10             	sub    esp,0x10
c000be7f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be83:	6a 44                	push   0x44
c000be85:	e8 db b9 ff ff       	call   c0007865 <malloc>
c000be8a:	89 c6                	mov    esi,eax
c000be8c:	58                   	pop    eax
c000be8d:	5a                   	pop    edx
c000be8e:	53                   	push   ebx
c000be8f:	56                   	push   esi
c000be90:	e8 a7 16 00 00       	call   c000d53c <VCache::VCache(PhysicalDisk*)>
c000be95:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000be9b:	83 c4 14             	add    esp,0x14
c000be9e:	5b                   	pop    ebx
c000be9f:	5e                   	pop    esi
c000bea0:	c3                   	ret    
c000bea1:	90                   	nop

c000bea2 <PhysicalDisk::~PhysicalDisk()>:
c000bea2:	83 ec 0c             	sub    esp,0xc
c000bea5:	ba f4 fb 01 c0       	mov    edx,0xc001fbf4
c000beaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000beae:	89 10                	mov    DWORD PTR [eax],edx
c000beb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000beb4:	83 ec 0c             	sub    esp,0xc
c000beb7:	50                   	push   eax
c000beb8:	e8 89 fa ff ff       	call   c000b946 <Device::~Device()>
c000bebd:	83 c4 10             	add    esp,0x10
c000bec0:	90                   	nop
c000bec1:	83 c4 0c             	add    esp,0xc
c000bec4:	c3                   	ret    
c000bec5:	90                   	nop

c000bec6 <PhysicalDisk::~PhysicalDisk()>:
c000bec6:	83 ec 0c             	sub    esp,0xc
c000bec9:	83 ec 0c             	sub    esp,0xc
c000becc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bed0:	e8 cd ff ff ff       	call   c000bea2 <PhysicalDisk::~PhysicalDisk()>
c000bed5:	83 c4 10             	add    esp,0x10
c000bed8:	83 ec 08             	sub    esp,0x8
c000bedb:	68 6c 01 00 00       	push   0x16c
c000bee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bee4:	e8 27 e6 ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c000bee9:	83 c4 10             	add    esp,0x10
c000beec:	83 c4 0c             	add    esp,0xc
c000beef:	c3                   	ret    

c000bef0 <int_handler>:
c000bef0:	55                   	push   ebp
c000bef1:	57                   	push   edi
c000bef2:	56                   	push   esi
c000bef3:	53                   	push   ebx
c000bef4:	83 ec 0c             	sub    esp,0xc
c000bef7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000befb:	80 3d 38 69 02 c0 00 	cmp    BYTE PTR ds:0xc0026938,0x0
c000bf02:	74 0b                	je     c000bf0f <int_handler+0x1f>
c000bf04:	fa                   	cli    
c000bf05:	f4                   	hlt    
c000bf06:	80 3d 38 69 02 c0 00 	cmp    BYTE PTR ds:0xc0026938,0x0
c000bf0d:	75 f5                	jne    c000bf04 <int_handler+0x14>
c000bf0f:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000bf12:	8d 46 e0             	lea    eax,[esi-0x20]
c000bf15:	83 f8 17             	cmp    eax,0x17
c000bf18:	76 3e                	jbe    c000bf58 <int_handler+0x68>
c000bf1a:	c1 e6 04             	shl    esi,0x4
c000bf1d:	31 db                	xor    ebx,ebx
c000bf1f:	8d ae c0 4f 02 c0    	lea    ebp,[esi-0x3ffdb040]
c000bf25:	81 c6 c0 3f 02 c0    	add    esi,0xc0023fc0
c000bf2b:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000bf2f:	85 c0                	test   eax,eax
c000bf31:	74 13                	je     c000bf46 <int_handler+0x56>
c000bf33:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000bf36:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000bf3a:	74 2a                	je     c000bf66 <int_handler+0x76>
c000bf3c:	83 ec 08             	sub    esp,0x8
c000bf3f:	52                   	push   edx
c000bf40:	57                   	push   edi
c000bf41:	ff d0                	call   eax
c000bf43:	83 c4 10             	add    esp,0x10
c000bf46:	43                   	inc    ebx
c000bf47:	83 fb 04             	cmp    ebx,0x4
c000bf4a:	75 df                	jne    c000bf2b <int_handler+0x3b>
c000bf4c:	83 c4 0c             	add    esp,0xc
c000bf4f:	31 c0                	xor    eax,eax
c000bf51:	5b                   	pop    ebx
c000bf52:	31 d2                	xor    edx,edx
c000bf54:	5e                   	pop    esi
c000bf55:	5f                   	pop    edi
c000bf56:	5d                   	pop    ebp
c000bf57:	c3                   	ret    
c000bf58:	83 ec 0c             	sub    esp,0xc
c000bf5b:	50                   	push   eax
c000bf5c:	e8 25 ac 00 00       	call   c0016b86 <HalEndOfInterrupt(int)>
c000bf61:	83 c4 10             	add    esp,0x10
c000bf64:	eb b4                	jmp    c000bf1a <int_handler+0x2a>
c000bf66:	83 ec 08             	sub    esp,0x8
c000bf69:	52                   	push   edx
c000bf6a:	57                   	push   edi
c000bf6b:	ff d0                	call   eax
c000bf6d:	83 c4 10             	add    esp,0x10
c000bf70:	83 c4 0c             	add    esp,0xc
c000bf73:	5b                   	pop    ebx
c000bf74:	5e                   	pop    esi
c000bf75:	5f                   	pop    edi
c000bf76:	5d                   	pop    ebp
c000bf77:	c3                   	ret    

c000bf78 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000bf78:	56                   	push   esi
c000bf79:	31 c0                	xor    eax,eax
c000bf7b:	53                   	push   ebx
c000bf7c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bf80:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bf84:	89 ca                	mov    edx,ecx
c000bf86:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bf8a:	c1 e2 04             	shl    edx,0x4
c000bf8d:	83 bc 82 c0 4f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdb040],0x0
c000bf95:	74 15                	je     c000bfac <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000bf97:	40                   	inc    eax
c000bf98:	83 f8 04             	cmp    eax,0x4
c000bf9b:	75 f0                	jne    c000bf8d <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000bf9d:	c7 44 24 0c 24 fc 01 c0 	mov    DWORD PTR [esp+0xc],0xc001fc24
c000bfa5:	5b                   	pop    ebx
c000bfa6:	5e                   	pop    esi
c000bfa7:	e9 1b 44 00 00       	jmp    c00103c7 <KePanic(char const*)>
c000bfac:	8d 04 88             	lea    eax,[eax+ecx*4]
c000bfaf:	89 1c 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],ebx
c000bfb6:	89 34 85 c0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc040],esi
c000bfbd:	5b                   	pop    ebx
c000bfbe:	5e                   	pop    esi
c000bfbf:	c3                   	ret    

c000bfc0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bfc0:	57                   	push   edi
c000bfc1:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000bfc7:	56                   	push   esi
c000bfc8:	53                   	push   ebx
c000bfc9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bfcd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bfd1:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000bfd8:	74 5b                	je     c000c035 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bfda:	89 c7                	mov    edi,eax
c000bfdc:	84 c0                	test   al,al
c000bfde:	74 24                	je     c000c004 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bfe0:	83 fe 0f             	cmp    esi,0xf
c000bfe3:	0f 8f d9 00 00 00    	jg     c000c0c2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000bfe9:	8a 86 60 16 02 c0    	mov    al,BYTE PTR [esi-0x3ffde9a0]
c000bfef:	25 ff 00 00 00       	and    eax,0xff
c000bff4:	66 8b bc 00 60 67 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffd98a0]
c000bffc:	89 c6                	mov    esi,eax
c000bffe:	66 d1 ef             	shr    di,1
c000c001:	83 e7 01             	and    edi,0x1
c000c004:	83 ec 08             	sub    esp,0x8
c000c007:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c000c00c:	31 db                	xor    ebx,ebx
c000c00e:	50                   	push   eax
c000c00f:	68 31 fc 01 c0       	push   0xc001fc31
c000c014:	e8 ed e5 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c000c019:	83 c4 10             	add    esp,0x10
c000c01c:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c000c021:	85 c0                	test   eax,eax
c000c023:	7f 51                	jg     c000c076 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000c025:	83 ec 0c             	sub    esp,0xc
c000c028:	68 48 fc 01 c0       	push   0xc001fc48
c000c02d:	e8 95 43 00 00       	call   c00103c7 <KePanic(char const*)>
c000c032:	83 c4 10             	add    esp,0x10
c000c035:	8d 4e 20             	lea    ecx,[esi+0x20]
c000c038:	31 d2                	xor    edx,edx
c000c03a:	89 c8                	mov    eax,ecx
c000c03c:	c1 e0 04             	shl    eax,0x4
c000c03f:	8b 9c 90 c0 4f 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdb040]
c000c046:	85 db                	test   ebx,ebx
c000c048:	0f 84 8b 00 00 00    	je     c000c0d9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000c04e:	42                   	inc    edx
c000c04f:	83 fa 04             	cmp    edx,0x4
c000c052:	75 eb                	jne    c000c03f <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c054:	83 ec 0c             	sub    esp,0xc
c000c057:	68 9c fc 01 c0       	push   0xc001fc9c
c000c05c:	e8 66 43 00 00       	call   c00103c7 <KePanic(char const*)>
c000c061:	83 c4 10             	add    esp,0x10
c000c064:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c069:	5b                   	pop    ebx
c000c06a:	5e                   	pop    esi
c000c06b:	5f                   	pop    edi
c000c06c:	c3                   	ret    
c000c06d:	43                   	inc    ebx
c000c06e:	39 1d 60 7b 02 c0    	cmp    DWORD PTR ds:0xc0027b60,ebx
c000c074:	7e af                	jle    c000c025 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c076:	83 ec 08             	sub    esp,0x8
c000c079:	8b 04 9d 80 7b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8480]
c000c080:	56                   	push   esi
c000c081:	50                   	push   eax
c000c082:	e8 a9 10 01 00       	call   c001d130 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c087:	83 c4 10             	add    esp,0x10
c000c08a:	84 c0                	test   al,al
c000c08c:	74 df                	je     c000c06d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000c08e:	81 e7 ff 00 00 00    	and    edi,0xff
c000c094:	50                   	push   eax
c000c095:	8d 46 20             	lea    eax,[esi+0x20]
c000c098:	57                   	push   edi
c000c099:	25 ff 00 00 00       	and    eax,0xff
c000c09e:	6a 00                	push   0x0
c000c0a0:	50                   	push   eax
c000c0a1:	89 f0                	mov    eax,esi
c000c0a3:	6a 00                	push   0x0
c000c0a5:	25 ff 00 00 00       	and    eax,0xff
c000c0aa:	6a 00                	push   0x0
c000c0ac:	50                   	push   eax
c000c0ad:	8b 04 9d 80 7b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8480]
c000c0b4:	50                   	push   eax
c000c0b5:	e8 f0 11 01 00       	call   c001d2aa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c0ba:	83 c4 20             	add    esp,0x20
c000c0bd:	e9 73 ff ff ff       	jmp    c000c035 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c0c2:	83 ec 0c             	sub    esp,0xc
c000c0c5:	31 ff                	xor    edi,edi
c000c0c7:	68 64 fc 01 c0       	push   0xc001fc64
c000c0cc:	e8 f6 42 00 00       	call   c00103c7 <KePanic(char const*)>
c000c0d1:	83 c4 10             	add    esp,0x10
c000c0d4:	e9 2b ff ff ff       	jmp    c000c004 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c0d9:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c0dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c0e0:	89 14 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],edx
c000c0e7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c0eb:	5b                   	pop    ebx
c000c0ec:	89 14 85 c0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc040],edx
c000c0f3:	89 f0                	mov    eax,esi
c000c0f5:	5e                   	pop    esi
c000c0f6:	5f                   	pop    edi
c000c0f7:	c3                   	ret    

c000c0f8 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c0f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c0fc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c100:	c1 e0 04             	shl    eax,0x4
c000c103:	8d 50 10             	lea    edx,[eax+0x10]
c000c106:	39 88 c0 4f 02 c0    	cmp    DWORD PTR [eax-0x3ffdb040],ecx
c000c10c:	74 08                	je     c000c116 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c10e:	83 c0 04             	add    eax,0x4
c000c111:	39 d0                	cmp    eax,edx
c000c113:	75 f1                	jne    c000c106 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c115:	c3                   	ret    
c000c116:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c120:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c12a:	eb e2                	jmp    c000c10e <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c12c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c12c:	53                   	push   ebx
c000c12d:	83 ec 08             	sub    esp,0x8
c000c130:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c134:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c139:	74 0e                	je     c000c149 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c13b:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000c140:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c147:	75 37                	jne    c000c180 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c14d:	83 c0 20             	add    eax,0x20
c000c150:	c1 e0 04             	shl    eax,0x4
c000c153:	8d 50 10             	lea    edx,[eax+0x10]
c000c156:	39 98 c0 4f 02 c0    	cmp    DWORD PTR [eax-0x3ffdb040],ebx
c000c15c:	74 0c                	je     c000c16a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c15e:	83 c0 04             	add    eax,0x4
c000c161:	39 d0                	cmp    eax,edx
c000c163:	75 f1                	jne    c000c156 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c165:	83 c4 08             	add    esp,0x8
c000c168:	5b                   	pop    ebx
c000c169:	c3                   	ret    
c000c16a:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c174:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c17e:	eb de                	jmp    c000c15e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c180:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c185:	7f 12                	jg     c000c199 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c187:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c18b:	31 c0                	xor    eax,eax
c000c18d:	8a 81 60 16 02 c0    	mov    al,BYTE PTR [ecx-0x3ffde9a0]
c000c193:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c197:	eb b0                	jmp    c000c149 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c199:	83 ec 0c             	sub    esp,0xc
c000c19c:	68 55 fc 01 c0       	push   0xc001fc55
c000c1a1:	e8 21 42 00 00       	call   c00103c7 <KePanic(char const*)>
c000c1a6:	83 c4 10             	add    esp,0x10
c000c1a9:	eb 9e                	jmp    c000c149 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c1ab <setupINTS()>:
c000c1ab:	31 c0                	xor    eax,eax
c000c1ad:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c1b7:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c1c1:	c7 80 c4 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb03c],0x0
c000c1cb:	c7 80 c4 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc03c],0x0
c000c1d5:	c7 80 c8 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb038],0x0
c000c1df:	c7 80 c8 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc038],0x0
c000c1e9:	c7 80 cc 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb034],0x0
c000c1f3:	c7 80 cc 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc034],0x0
c000c1fd:	83 c0 10             	add    eax,0x10
c000c200:	3d 00 10 00 00       	cmp    eax,0x1000
c000c205:	75 a6                	jne    c000c1ad <setupINTS()+0x2>
c000c207:	c3                   	ret    

c000c208 <convertLegacyIRQNumber(int)>:
c000c208:	83 ec 0c             	sub    esp,0xc
c000c20b:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000c211:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c215:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c21c:	74 0f                	je     c000c22d <convertLegacyIRQNumber(int)+0x25>
c000c21e:	83 f8 0f             	cmp    eax,0xf
c000c221:	7f 0e                	jg     c000c231 <convertLegacyIRQNumber(int)+0x29>
c000c223:	31 c9                	xor    ecx,ecx
c000c225:	8a 88 60 16 02 c0    	mov    cl,BYTE PTR [eax-0x3ffde9a0]
c000c22b:	89 c8                	mov    eax,ecx
c000c22d:	83 c4 0c             	add    esp,0xc
c000c230:	c3                   	ret    
c000c231:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c235:	83 ec 0c             	sub    esp,0xc
c000c238:	68 64 fc 01 c0       	push   0xc001fc64
c000c23d:	e8 85 41 00 00       	call   c00103c7 <KePanic(char const*)>
c000c242:	83 c4 10             	add    esp,0x10
c000c245:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c249:	83 c4 0c             	add    esp,0xc
c000c24c:	c3                   	ret    
c000c24d:	90                   	nop

c000c24e <startGUI(void*)>:
c000c24e:	55                   	push   ebp
c000c24f:	89 e5                	mov    ebp,esp
c000c251:	53                   	push   ebx
c000c252:	83 ec 04             	sub    esp,0x4
c000c255:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c25a:	48                   	dec    eax
c000c25b:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c260:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c265:	85 c0                	test   eax,eax
c000c267:	75 01                	jne    c000c26a <startGUI(void*)+0x1c>
c000c269:	fb                   	sti    
c000c26a:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c270:	83 ec 08             	sub    esp,0x8
c000c273:	6a 01                	push   0x1
c000c275:	68 c1 fc 01 c0       	push   0xc001fcc1
c000c27a:	e8 89 7d 00 00       	call   c0014008 <Thr::loadDLL(char const*, bool)>
c000c27f:	83 c4 10             	add    esp,0x10
c000c282:	83 ec 08             	sub    esp,0x8
c000c285:	53                   	push   ebx
c000c286:	50                   	push   eax
c000c287:	e8 ad 7f 00 00       	call   c0014239 <Thr::executeDLL(unsigned long, void*)>
c000c28c:	83 c4 10             	add    esp,0x10
c000c28f:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c295:	83 ec 08             	sub    esp,0x8
c000c298:	6a 01                	push   0x1
c000c29a:	68 db fc 01 c0       	push   0xc001fcdb
c000c29f:	e8 64 7d 00 00       	call   c0014008 <Thr::loadDLL(char const*, bool)>
c000c2a4:	83 c4 10             	add    esp,0x10
c000c2a7:	83 ec 08             	sub    esp,0x8
c000c2aa:	53                   	push   ebx
c000c2ab:	50                   	push   eax
c000c2ac:	e8 88 7f 00 00       	call   c0014239 <Thr::executeDLL(unsigned long, void*)>
c000c2b1:	83 c4 10             	add    esp,0x10
c000c2b4:	90                   	nop
c000c2b5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c2b8:	c9                   	leave  
c000c2b9:	c3                   	ret    

c000c2ba <startGUIVESA(void*)>:
c000c2ba:	55                   	push   ebp
c000c2bb:	89 e5                	mov    ebp,esp
c000c2bd:	53                   	push   ebx
c000c2be:	83 ec 04             	sub    esp,0x4
c000c2c1:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c2c6:	48                   	dec    eax
c000c2c7:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c2cc:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c2d1:	85 c0                	test   eax,eax
c000c2d3:	75 01                	jne    c000c2d6 <startGUIVESA(void*)+0x1c>
c000c2d5:	fb                   	sti    
c000c2d6:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c2dc:	83 ec 08             	sub    esp,0x8
c000c2df:	6a 01                	push   0x1
c000c2e1:	68 f9 fc 01 c0       	push   0xc001fcf9
c000c2e6:	e8 1d 7d 00 00       	call   c0014008 <Thr::loadDLL(char const*, bool)>
c000c2eb:	83 c4 10             	add    esp,0x10
c000c2ee:	83 ec 08             	sub    esp,0x8
c000c2f1:	53                   	push   ebx
c000c2f2:	50                   	push   eax
c000c2f3:	e8 41 7f 00 00       	call   c0014239 <Thr::executeDLL(unsigned long, void*)>
c000c2f8:	83 c4 10             	add    esp,0x10
c000c2fb:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c301:	83 ec 08             	sub    esp,0x8
c000c304:	6a 01                	push   0x1
c000c306:	68 db fc 01 c0       	push   0xc001fcdb
c000c30b:	e8 f8 7c 00 00       	call   c0014008 <Thr::loadDLL(char const*, bool)>
c000c310:	83 c4 10             	add    esp,0x10
c000c313:	83 ec 08             	sub    esp,0x8
c000c316:	53                   	push   ebx
c000c317:	50                   	push   eax
c000c318:	e8 1c 7f 00 00       	call   c0014239 <Thr::executeDLL(unsigned long, void*)>
c000c31d:	83 c4 10             	add    esp,0x10
c000c320:	90                   	nop
c000c321:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c324:	c9                   	leave  
c000c325:	c3                   	ret    

c000c326 <sendKeyToTerminal(unsigned char)>:
c000c326:	55                   	push   ebp
c000c327:	89 e5                	mov    ebp,esp
c000c329:	83 ec 28             	sub    esp,0x28
c000c32c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c32f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c332:	8b 15 04 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023f04
c000c338:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c33b:	25 ff 00 00 00       	and    eax,0xff
c000c340:	83 ec 08             	sub    esp,0x8
c000c343:	50                   	push   eax
c000c344:	52                   	push   edx
c000c345:	e8 a6 c7 ff ff       	call   c0008af0 <VgaText::receiveKey(unsigned char)>
c000c34a:	83 c4 10             	add    esp,0x10
c000c34d:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c351:	74 10                	je     c000c363 <sendKeyToTerminal(unsigned char)+0x3d>
c000c353:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000c357:	74 0a                	je     c000c363 <sendKeyToTerminal(unsigned char)+0x3d>
c000c359:	80 7d e4 1c          	cmp    BYTE PTR [ebp-0x1c],0x1c
c000c35d:	0f 85 8f 00 00 00    	jne    c000c3f2 <sendKeyToTerminal(unsigned char)+0xcc>
c000c363:	fa                   	cli    
c000c364:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c369:	40                   	inc    eax
c000c36a:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c36f:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000c374:	40                   	inc    eax
c000c375:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c000c37a:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000c37f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c382:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000c38c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c390:	74 1f                	je     c000c3b1 <sendKeyToTerminal(unsigned char)+0x8b>
c000c392:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c395:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c398:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c39b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c39e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c3a1:	83 ec 0c             	sub    esp,0xc
c000c3a4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c3a7:	e8 74 8b 00 00       	call   c0014f20 <unblockTask(ThreadControlBlock*)>
c000c3ac:	83 c4 10             	add    esp,0x10
c000c3af:	eb db                	jmp    c000c38c <sendKeyToTerminal(unsigned char)+0x66>
c000c3b1:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000c3b6:	48                   	dec    eax
c000c3b7:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c000c3bc:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000c3c1:	85 c0                	test   eax,eax
c000c3c3:	75 18                	jne    c000c3dd <sendKeyToTerminal(unsigned char)+0xb7>
c000c3c5:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c000c3ca:	85 c0                	test   eax,eax
c000c3cc:	74 0f                	je     c000c3dd <sendKeyToTerminal(unsigned char)+0xb7>
c000c3ce:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c000c3d8:	e8 7f 86 00 00       	call   c0014a5c <schedule()>
c000c3dd:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c3e2:	48                   	dec    eax
c000c3e3:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c3e8:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c3ed:	85 c0                	test   eax,eax
c000c3ef:	75 01                	jne    c000c3f2 <sendKeyToTerminal(unsigned char)+0xcc>
c000c3f1:	fb                   	sti    
c000c3f2:	90                   	nop
c000c3f3:	c9                   	leave  
c000c3f4:	c3                   	ret    

c000c3f5 <sendKeyboardToken(KeyboardToken)>:
c000c3f5:	55                   	push   ebp
c000c3f6:	89 e5                	mov    ebp,esp
c000c3f8:	83 ec 18             	sub    esp,0x18
c000c3fb:	e8 17 40 00 00       	call   c0010417 <Krnl::userIOReceived()>
c000c400:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c403:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c406:	25 ff ff 00 00       	and    eax,0xffff
c000c40b:	83 f2 01             	xor    edx,0x1
c000c40e:	88 90 e0 5f 02 c0    	mov    BYTE PTR [eax-0x3ffda020],dl
c000c414:	a1 c8 5f 02 c0       	mov    eax,ds:0xc0025fc8
c000c419:	85 c0                	test   eax,eax
c000c41b:	74 24                	je     c000c441 <sendKeyboardToken(KeyboardToken)+0x4c>
c000c41d:	8b 0d c8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fc8
c000c423:	83 ec 04             	sub    esp,0x4
c000c426:	68 e0 5f 02 c0       	push   0xc0025fe0
c000c42b:	83 ec 08             	sub    esp,0x8
c000c42e:	89 e2                	mov    edx,esp
c000c430:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c433:	89 02                	mov    DWORD PTR [edx],eax
c000c435:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c438:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c43c:	ff d1                	call   ecx
c000c43e:	83 c4 10             	add    esp,0x10
c000c441:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c445:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c448:	a0 e8 63 02 c0       	mov    al,ds:0xc00263e8
c000c44d:	38 c2                	cmp    dl,al
c000c44f:	74 1e                	je     c000c46f <sendKeyboardToken(KeyboardToken)+0x7a>
c000c451:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c454:	a2 e8 63 02 c0       	mov    ds:0xc00263e8,al
c000c459:	a0 e8 63 02 c0       	mov    al,ds:0xc00263e8
c000c45e:	25 ff 00 00 00       	and    eax,0xff
c000c463:	83 ec 0c             	sub    esp,0xc
c000c466:	50                   	push   eax
c000c467:	e8 d8 bd ff ff       	call   c0008244 <setTerminalScrollLock(bool)>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c472:	84 c0                	test   al,al
c000c474:	0f 84 ae 00 00 00    	je     c000c528 <sendKeyboardToken(KeyboardToken)+0x133>
c000c47a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c47d:	66 3d 18 03          	cmp    ax,0x318
c000c481:	75 06                	jne    c000c489 <sendKeyboardToken(KeyboardToken)+0x94>
c000c483:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c489:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c48c:	66 3d 19 03          	cmp    ax,0x319
c000c490:	75 06                	jne    c000c498 <sendKeyboardToken(KeyboardToken)+0xa3>
c000c492:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c498:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c49b:	66 3d 1a 03          	cmp    ax,0x31a
c000c49f:	75 06                	jne    c000c4a7 <sendKeyboardToken(KeyboardToken)+0xb2>
c000c4a1:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c4a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4aa:	66 3d 1b 03          	cmp    ax,0x31b
c000c4ae:	75 06                	jne    c000c4b6 <sendKeyboardToken(KeyboardToken)+0xc1>
c000c4b0:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c4b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4b9:	66 3d 1c 03          	cmp    ax,0x31c
c000c4bd:	75 06                	jne    c000c4c5 <sendKeyboardToken(KeyboardToken)+0xd0>
c000c4bf:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c4c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4c8:	66 3d 1d 03          	cmp    ax,0x31d
c000c4cc:	75 06                	jne    c000c4d4 <sendKeyboardToken(KeyboardToken)+0xdf>
c000c4ce:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c4d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4d7:	66 3d 1e 03          	cmp    ax,0x31e
c000c4db:	75 06                	jne    c000c4e3 <sendKeyboardToken(KeyboardToken)+0xee>
c000c4dd:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c4e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4e6:	66 3d 1f 03          	cmp    ax,0x31f
c000c4ea:	75 06                	jne    c000c4f2 <sendKeyboardToken(KeyboardToken)+0xfd>
c000c4ec:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c4f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4f5:	66 3d 20 03          	cmp    ax,0x320
c000c4f9:	75 06                	jne    c000c501 <sendKeyboardToken(KeyboardToken)+0x10c>
c000c4fb:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c501:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c504:	66 3d 21 03          	cmp    ax,0x321
c000c508:	75 06                	jne    c000c510 <sendKeyboardToken(KeyboardToken)+0x11b>
c000c50a:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c510:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c513:	66 3d 22 03          	cmp    ax,0x322
c000c517:	0f 85 c9 00 00 00    	jne    c000c5e6 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c51d:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c523:	e9 be 00 00 00       	jmp    c000c5e6 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c528:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c52b:	66 3d 18 03          	cmp    ax,0x318
c000c52f:	75 0a                	jne    c000c53b <sendKeyboardToken(KeyboardToken)+0x146>
c000c531:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c537:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c53b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c53e:	66 3d 19 03          	cmp    ax,0x319
c000c542:	75 0a                	jne    c000c54e <sendKeyboardToken(KeyboardToken)+0x159>
c000c544:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c54a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c54e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c551:	66 3d 1a 03          	cmp    ax,0x31a
c000c555:	75 0a                	jne    c000c561 <sendKeyboardToken(KeyboardToken)+0x16c>
c000c557:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c55d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c561:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c564:	66 3d 1b 03          	cmp    ax,0x31b
c000c568:	75 0a                	jne    c000c574 <sendKeyboardToken(KeyboardToken)+0x17f>
c000c56a:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c570:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c574:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c577:	66 3d 1c 03          	cmp    ax,0x31c
c000c57b:	75 0a                	jne    c000c587 <sendKeyboardToken(KeyboardToken)+0x192>
c000c57d:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c583:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c587:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c58a:	66 3d 1d 03          	cmp    ax,0x31d
c000c58e:	75 0a                	jne    c000c59a <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c590:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c596:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c59a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c59d:	66 3d 1e 03          	cmp    ax,0x31e
c000c5a1:	75 0a                	jne    c000c5ad <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c5a3:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c5a9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5b0:	66 3d 1f 03          	cmp    ax,0x31f
c000c5b4:	75 0a                	jne    c000c5c0 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c5b6:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c5bc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5c3:	66 3d 20 03          	cmp    ax,0x320
c000c5c7:	75 0a                	jne    c000c5d3 <sendKeyboardToken(KeyboardToken)+0x1de>
c000c5c9:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c5cf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5d6:	66 3d 21 03          	cmp    ax,0x321
c000c5da:	75 0a                	jne    c000c5e6 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c5dc:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c5e2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5e9:	66 3d 00 02          	cmp    ax,0x200
c000c5ed:	75 2c                	jne    c000c61b <sendKeyboardToken(KeyboardToken)+0x226>
c000c5ef:	a0 e0 63 02 c0       	mov    al,ds:0xc00263e0
c000c5f4:	83 f0 01             	xor    eax,0x1
c000c5f7:	84 c0                	test   al,al
c000c5f9:	74 20                	je     c000c61b <sendKeyboardToken(KeyboardToken)+0x226>
c000c5fb:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000c600:	6a 01                	push   0x1
c000c602:	6a 00                	push   0x0
c000c604:	68 4e c2 00 c0       	push   0xc000c24e
c000c609:	50                   	push   eax
c000c60a:	e8 05 82 00 00       	call   c0014814 <Process::createThread(void (*)(void*), void*, int)>
c000c60f:	83 c4 10             	add    esp,0x10
c000c612:	c6 05 e0 63 02 c0 01 	mov    BYTE PTR ds:0xc00263e0,0x1
c000c619:	eb 33                	jmp    c000c64e <sendKeyboardToken(KeyboardToken)+0x259>
c000c61b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c61e:	66 3d 01 02          	cmp    ax,0x201
c000c622:	75 2a                	jne    c000c64e <sendKeyboardToken(KeyboardToken)+0x259>
c000c624:	a0 e0 63 02 c0       	mov    al,ds:0xc00263e0
c000c629:	83 f0 01             	xor    eax,0x1
c000c62c:	84 c0                	test   al,al
c000c62e:	74 1e                	je     c000c64e <sendKeyboardToken(KeyboardToken)+0x259>
c000c630:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000c635:	6a 01                	push   0x1
c000c637:	6a 00                	push   0x0
c000c639:	68 ba c2 00 c0       	push   0xc000c2ba
c000c63e:	50                   	push   eax
c000c63f:	e8 d0 81 00 00       	call   c0014814 <Process::createThread(void (*)(void*), void*, int)>
c000c644:	83 c4 10             	add    esp,0x10
c000c647:	c6 05 e0 63 02 c0 01 	mov    BYTE PTR ds:0xc00263e0,0x1
c000c64e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c651:	66 3d 25 03          	cmp    ax,0x325
c000c655:	75 06                	jne    c000c65d <sendKeyboardToken(KeyboardToken)+0x268>
c000c657:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c65d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c660:	66 3d 24 03          	cmp    ax,0x324
c000c664:	75 06                	jne    c000c66c <sendKeyboardToken(KeyboardToken)+0x277>
c000c666:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c66c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c66f:	66 3d 23 03          	cmp    ax,0x323
c000c673:	75 06                	jne    c000c67b <sendKeyboardToken(KeyboardToken)+0x286>
c000c675:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c67b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c67e:	66 3d 26 03          	cmp    ax,0x326
c000c682:	75 06                	jne    c000c68a <sendKeyboardToken(KeyboardToken)+0x295>
c000c684:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c68a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c68d:	66 3d 27 03          	cmp    ax,0x327
c000c691:	75 06                	jne    c000c699 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c693:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c699:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c69c:	66 3d 22 03          	cmp    ax,0x322
c000c6a0:	75 06                	jne    c000c6a8 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c6a2:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c6a8:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c6ac:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c6af:	83 f0 01             	xor    eax,0x1
c000c6b2:	84 c0                	test   al,al
c000c6b4:	74 7b                	je     c000c731 <sendKeyboardToken(KeyboardToken)+0x33c>
c000c6b6:	a0 e1 60 02 c0       	mov    al,ds:0xc00260e1
c000c6bb:	84 c0                	test   al,al
c000c6bd:	74 43                	je     c000c702 <sendKeyboardToken(KeyboardToken)+0x30d>
c000c6bf:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c6c3:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c6c7:	74 2d                	je     c000c6f6 <sendKeyboardToken(KeyboardToken)+0x301>
c000c6c9:	8b 15 e4 63 02 c0    	mov    edx,DWORD PTR ds:0xc00263e4
c000c6cf:	89 d0                	mov    eax,edx
c000c6d1:	c1 e0 02             	shl    eax,0x2
c000c6d4:	01 d0                	add    eax,edx
c000c6d6:	01 c0                	add    eax,eax
c000c6d8:	a3 e4 63 02 c0       	mov    ds:0xc00263e4,eax
c000c6dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6e0:	25 ff ff 00 00       	and    eax,0xffff
c000c6e5:	8d 50 d0             	lea    edx,[eax-0x30]
c000c6e8:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c6ed:	01 d0                	add    eax,edx
c000c6ef:	a3 e4 63 02 c0       	mov    ds:0xc00263e4,eax
c000c6f4:	eb 71                	jmp    c000c767 <sendKeyboardToken(KeyboardToken)+0x372>
c000c6f6:	c7 05 e4 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00263e4,0x0
c000c700:	eb 65                	jmp    c000c767 <sendKeyboardToken(KeyboardToken)+0x372>
c000c702:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c707:	85 c0                	test   eax,eax
c000c709:	74 1a                	je     c000c725 <sendKeyboardToken(KeyboardToken)+0x330>
c000c70b:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c710:	25 ff 00 00 00       	and    eax,0xff
c000c715:	83 ec 0c             	sub    esp,0xc
c000c718:	50                   	push   eax
c000c719:	e8 08 fc ff ff       	call   c000c326 <sendKeyToTerminal(unsigned char)>
c000c71e:	83 c4 10             	add    esp,0x10
c000c721:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c725:	c7 05 e4 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00263e4,0x0
c000c72f:	eb 36                	jmp    c000c767 <sendKeyboardToken(KeyboardToken)+0x372>
c000c731:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c734:	66 3d 01 01          	cmp    ax,0x101
c000c738:	75 2d                	jne    c000c767 <sendKeyboardToken(KeyboardToken)+0x372>
c000c73a:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c73f:	85 c0                	test   eax,eax
c000c741:	74 1a                	je     c000c75d <sendKeyboardToken(KeyboardToken)+0x368>
c000c743:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c748:	25 ff 00 00 00       	and    eax,0xff
c000c74d:	83 ec 0c             	sub    esp,0xc
c000c750:	50                   	push   eax
c000c751:	e8 d0 fb ff ff       	call   c000c326 <sendKeyToTerminal(unsigned char)>
c000c756:	83 c4 10             	add    esp,0x10
c000c759:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c75d:	c7 05 e4 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00263e4,0x0
c000c767:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c76a:	83 f0 01             	xor    eax,0x1
c000c76d:	84 c0                	test   al,al
c000c76f:	74 4e                	je     c000c7bf <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c771:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c774:	83 f0 01             	xor    eax,0x1
c000c777:	84 c0                	test   al,al
c000c779:	74 44                	je     c000c7bf <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c77b:	a0 e0 60 02 c0       	mov    al,ds:0xc00260e0
c000c780:	83 f0 01             	xor    eax,0x1
c000c783:	84 c0                	test   al,al
c000c785:	74 38                	je     c000c7bf <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c787:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c78a:	66 83 f8 1f          	cmp    ax,0x1f
c000c78e:	76 09                	jbe    c000c799 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c790:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c793:	66 83 f8 7e          	cmp    ax,0x7e
c000c797:	76 12                	jbe    c000c7ab <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c799:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c79c:	66 83 f8 0a          	cmp    ax,0xa
c000c7a0:	74 09                	je     c000c7ab <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c7a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7a5:	66 83 f8 08          	cmp    ax,0x8
c000c7a9:	75 14                	jne    c000c7bf <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c7ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7ae:	25 ff 00 00 00       	and    eax,0xff
c000c7b3:	83 ec 0c             	sub    esp,0xc
c000c7b6:	50                   	push   eax
c000c7b7:	e8 6a fb ff ff       	call   c000c326 <sendKeyToTerminal(unsigned char)>
c000c7bc:	83 c4 10             	add    esp,0x10
c000c7bf:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c7c2:	83 f0 01             	xor    eax,0x1
c000c7c5:	84 c0                	test   al,al
c000c7c7:	74 51                	je     c000c81a <sendKeyboardToken(KeyboardToken)+0x425>
c000c7c9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c7cc:	83 f0 01             	xor    eax,0x1
c000c7cf:	84 c0                	test   al,al
c000c7d1:	74 47                	je     c000c81a <sendKeyboardToken(KeyboardToken)+0x425>
c000c7d3:	a0 e0 60 02 c0       	mov    al,ds:0xc00260e0
c000c7d8:	84 c0                	test   al,al
c000c7da:	74 3e                	je     c000c81a <sendKeyboardToken(KeyboardToken)+0x425>
c000c7dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7df:	66 83 f8 3f          	cmp    ax,0x3f
c000c7e3:	76 35                	jbe    c000c81a <sendKeyboardToken(KeyboardToken)+0x425>
c000c7e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7e8:	66 83 f8 7f          	cmp    ax,0x7f
c000c7ec:	77 2c                	ja     c000c81a <sendKeyboardToken(KeyboardToken)+0x425>
c000c7ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7f1:	88 c2                	mov    dl,al
c000c7f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7f6:	66 83 f8 5f          	cmp    ax,0x5f
c000c7fa:	76 04                	jbe    c000c800 <sendKeyboardToken(KeyboardToken)+0x40b>
c000c7fc:	b0 20                	mov    al,0x20
c000c7fe:	eb 02                	jmp    c000c802 <sendKeyboardToken(KeyboardToken)+0x40d>
c000c800:	b0 00                	mov    al,0x0
c000c802:	29 c2                	sub    edx,eax
c000c804:	88 d0                	mov    al,dl
c000c806:	83 e8 40             	sub    eax,0x40
c000c809:	25 ff 00 00 00       	and    eax,0xff
c000c80e:	83 ec 0c             	sub    esp,0xc
c000c811:	50                   	push   eax
c000c812:	e8 0f fb ff ff       	call   c000c326 <sendKeyToTerminal(unsigned char)>
c000c817:	83 c4 10             	add    esp,0x10
c000c81a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c81d:	66 3d 00 03          	cmp    ax,0x300
c000c821:	75 0f                	jne    c000c832 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c823:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c826:	83 f0 01             	xor    eax,0x1
c000c829:	84 c0                	test   al,al
c000c82b:	74 05                	je     c000c832 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c82d:	e8 13 ba ff ff       	call   c0008245 <doTerminalCycle()>
c000c832:	90                   	nop
c000c833:	c9                   	leave  
c000c834:	c3                   	ret    

c000c835 <clearInternalKeybuffer(VgaText*)>:
c000c835:	55                   	push   ebp
c000c836:	89 e5                	mov    ebp,esp
c000c838:	83 ec 08             	sub    esp,0x8
c000c83b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c83e:	05 02 01 00 00       	add    eax,0x102
c000c843:	83 ec 0c             	sub    esp,0xc
c000c846:	50                   	push   eax
c000c847:	e8 e4 3c ff ff       	call   c0000530 <strlen>
c000c84c:	83 c4 10             	add    esp,0x10
c000c84f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c852:	81 c2 02 01 00 00    	add    edx,0x102
c000c858:	83 ec 04             	sub    esp,0x4
c000c85b:	50                   	push   eax
c000c85c:	6a 00                	push   0x0
c000c85e:	52                   	push   edx
c000c85f:	e8 5c 3c ff ff       	call   c00004c0 <memset>
c000c864:	83 c4 10             	add    esp,0x10
c000c867:	90                   	nop
c000c868:	c9                   	leave  
c000c869:	c3                   	ret    

c000c86a <readKeyboard(VgaText*, char*, unsigned long)>:
c000c86a:	55                   	push   ebp
c000c86b:	89 e5                	mov    ebp,esp
c000c86d:	83 ec 18             	sub    esp,0x18
c000c870:	a1 c8 5f 02 c0       	mov    eax,ds:0xc0025fc8
c000c875:	85 c0                	test   eax,eax
c000c877:	74 2a                	je     c000c8a3 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c879:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c87f:	8b 0d c8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fc8
c000c885:	83 ec 04             	sub    esp,0x4
c000c888:	68 e0 5f 02 c0       	push   0xc0025fe0
c000c88d:	83 ec 08             	sub    esp,0x8
c000c890:	89 e2                	mov    edx,esp
c000c892:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c895:	89 02                	mov    DWORD PTR [edx],eax
c000c897:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c89a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c89e:	ff d1                	call   ecx
c000c8a0:	83 c4 10             	add    esp,0x10
c000c8a3:	fb                   	sti    
c000c8a4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c8ab:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c8af:	0f 84 f5 00 00 00    	je     c000c9aa <readKeyboard(VgaText*, char*, unsigned long)+0x140>
c000c8b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8b8:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000c8be:	84 c0                	test   al,al
c000c8c0:	75 28                	jne    c000c8ea <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c8c2:	fa                   	cli    
c000c8c3:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c8c8:	40                   	inc    eax
c000c8c9:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c8ce:	e8 89 81 00 00       	call   c0014a5c <schedule()>
c000c8d3:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c8d8:	48                   	dec    eax
c000c8d9:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c8de:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c8e3:	85 c0                	test   eax,eax
c000c8e5:	75 ce                	jne    c000c8b5 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c8e7:	fb                   	sti    
c000c8e8:	eb cb                	jmp    c000c8b5 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c8ea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c8ed:	8d 50 01             	lea    edx,[eax+0x1]
c000c8f0:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c8f3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c8f6:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000c8fc:	88 10                	mov    BYTE PTR [eax],dl
c000c8fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c901:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000c907:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c90a:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c90e:	75 1e                	jne    c000c92e <readKeyboard(VgaText*, char*, unsigned long)+0xc4>
c000c910:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c915:	8b 00                	mov    eax,DWORD PTR [eax]
c000c917:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c91a:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000c920:	83 ec 08             	sub    esp,0x8
c000c923:	6a 02                	push   0x2
c000c925:	50                   	push   eax
c000c926:	e8 70 3e 00 00       	call   c001079b <KeRaiseSignal(SigHandlerBlock*, int)>
c000c92b:	83 c4 10             	add    esp,0x10
c000c92e:	80 7d f3 1c          	cmp    BYTE PTR [ebp-0xd],0x1c
c000c932:	75 1e                	jne    c000c952 <readKeyboard(VgaText*, char*, unsigned long)+0xe8>
c000c934:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c939:	8b 00                	mov    eax,DWORD PTR [eax]
c000c93b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c93e:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000c944:	83 ec 08             	sub    esp,0x8
c000c947:	6a 09                	push   0x9
c000c949:	50                   	push   eax
c000c94a:	e8 4c 3e 00 00       	call   c001079b <KeRaiseSignal(SigHandlerBlock*, int)>
c000c94f:	83 c4 10             	add    esp,0x10
c000c952:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c955:	05 02 01 00 00       	add    eax,0x102
c000c95a:	83 ec 0c             	sub    esp,0xc
c000c95d:	50                   	push   eax
c000c95e:	e8 cd 3b ff ff       	call   c0000530 <strlen>
c000c963:	83 c4 10             	add    esp,0x10
c000c966:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c969:	81 c2 02 01 00 00    	add    edx,0x102
c000c96f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c972:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c975:	81 c2 02 01 00 00    	add    edx,0x102
c000c97b:	83 ec 04             	sub    esp,0x4
c000c97e:	50                   	push   eax
c000c97f:	51                   	push   ecx
c000c980:	52                   	push   edx
c000c981:	e8 4a 3a ff ff       	call   c00003d0 <memmove>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c98c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c98f:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c993:	74 10                	je     c000c9a5 <readKeyboard(VgaText*, char*, unsigned long)+0x13b>
c000c995:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c999:	74 0a                	je     c000c9a5 <readKeyboard(VgaText*, char*, unsigned long)+0x13b>
c000c99b:	80 7d f3 1c          	cmp    BYTE PTR [ebp-0xd],0x1c
c000c99f:	0f 85 06 ff ff ff    	jne    c000c8ab <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c9a5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c9a8:	eb 03                	jmp    c000c9ad <readKeyboard(VgaText*, char*, unsigned long)+0x143>
c000c9aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c9ad:	c9                   	leave  
c000c9ae:	c3                   	ret    
c000c9af:	90                   	nop

c000c9b0 <Keyboard::Keyboard(char const*)>:
c000c9b0:	83 ec 0c             	sub    esp,0xc
c000c9b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9b7:	83 ec 08             	sub    esp,0x8
c000c9ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9be:	50                   	push   eax
c000c9bf:	e8 18 f2 ff ff       	call   c000bbdc <Device::Device(char const*)>
c000c9c4:	83 c4 10             	add    esp,0x10
c000c9c7:	ba 1c fd 01 c0       	mov    edx,0xc001fd1c
c000c9cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9d0:	89 10                	mov    DWORD PTR [eax],edx
c000c9d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9d6:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000c9e0:	c6 05 c4 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025fc4,0x1
c000c9e7:	90                   	nop
c000c9e8:	83 c4 0c             	add    esp,0xc
c000c9eb:	c3                   	ret    

c000c9ec <Keyboard::~Keyboard()>:
c000c9ec:	83 ec 0c             	sub    esp,0xc
c000c9ef:	ba 1c fd 01 c0       	mov    edx,0xc001fd1c
c000c9f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9f8:	89 10                	mov    DWORD PTR [eax],edx
c000c9fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9fe:	83 ec 0c             	sub    esp,0xc
c000ca01:	50                   	push   eax
c000ca02:	e8 3f ef ff ff       	call   c000b946 <Device::~Device()>
c000ca07:	83 c4 10             	add    esp,0x10
c000ca0a:	90                   	nop
c000ca0b:	83 c4 0c             	add    esp,0xc
c000ca0e:	c3                   	ret    
c000ca0f:	90                   	nop

c000ca10 <Keyboard::~Keyboard()>:
c000ca10:	83 ec 0c             	sub    esp,0xc
c000ca13:	83 ec 0c             	sub    esp,0xc
c000ca16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca1a:	e8 cd ff ff ff       	call   c000c9ec <Keyboard::~Keyboard()>
c000ca1f:	83 c4 10             	add    esp,0x10
c000ca22:	83 ec 08             	sub    esp,0x8
c000ca25:	68 5c 01 00 00       	push   0x15c
c000ca2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2e:	e8 dd da ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c000ca33:	83 c4 10             	add    esp,0x10
c000ca36:	83 c4 0c             	add    esp,0xc
c000ca39:	c3                   	ret    

c000ca3a <LogicalDisk::close(int, int, void*)>:
c000ca3a:	83 c8 ff             	or     eax,0xffffffff
c000ca3d:	c3                   	ret    

c000ca3e <LogicalDisk::~LogicalDisk()>:
c000ca3e:	83 ec 0c             	sub    esp,0xc
c000ca41:	ba 94 fd 01 c0       	mov    edx,0xc001fd94
c000ca46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca4a:	89 10                	mov    DWORD PTR [eax],edx
c000ca4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca50:	83 ec 0c             	sub    esp,0xc
c000ca53:	50                   	push   eax
c000ca54:	e8 ed ee ff ff       	call   c000b946 <Device::~Device()>
c000ca59:	83 c4 10             	add    esp,0x10
c000ca5c:	90                   	nop
c000ca5d:	83 c4 0c             	add    esp,0xc
c000ca60:	c3                   	ret    
c000ca61:	90                   	nop

c000ca62 <LogicalDisk::~LogicalDisk()>:
c000ca62:	83 ec 0c             	sub    esp,0xc
c000ca65:	83 ec 0c             	sub    esp,0xc
c000ca68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca6c:	e8 cd ff ff ff       	call   c000ca3e <LogicalDisk::~LogicalDisk()>
c000ca71:	83 c4 10             	add    esp,0x10
c000ca74:	83 ec 08             	sub    esp,0x8
c000ca77:	68 78 01 00 00       	push   0x178
c000ca7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca80:	e8 8b da ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c000ca85:	83 c4 10             	add    esp,0x10
c000ca88:	83 c4 0c             	add    esp,0xc
c000ca8b:	c3                   	ret    

c000ca8c <LogicalDisk::open(int, int, void*)>:
c000ca8c:	83 ec 18             	sub    esp,0x18
c000ca8f:	68 48 fd 01 c0       	push   0xc001fd48
c000ca94:	e8 2e 39 00 00       	call   c00103c7 <KePanic(char const*)>
c000ca99:	83 c8 ff             	or     eax,0xffffffff
c000ca9c:	83 c4 1c             	add    esp,0x1c
c000ca9f:	c3                   	ret    

c000caa0 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000caa0:	53                   	push   ebx
c000caa1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000caa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000caa9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000caad:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000cab3:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000cab9:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000cabf:	77 10                	ja     c000cad1 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000cac1:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000cac7:	89 d3                	mov    ebx,edx
c000cac9:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000cacf:	72 05                	jb     c000cad6 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000cad1:	83 c8 ff             	or     eax,0xffffffff
c000cad4:	89 c2                	mov    edx,eax
c000cad6:	5b                   	pop    ebx
c000cad7:	c3                   	ret    

c000cad8 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000cad8:	56                   	push   esi
c000cad9:	83 c8 ff             	or     eax,0xffffffff
c000cadc:	53                   	push   ebx
c000cadd:	89 c2                	mov    edx,eax
c000cadf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cae3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cae7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000caeb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000caf1:	77 27                	ja     c000cb1a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000caf3:	89 d8                	mov    eax,ebx
c000caf5:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000cafb:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000cb01:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cb06:	89 c2                	mov    edx,eax
c000cb08:	73 10                	jae    c000cb1a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cb0a:	89 c8                	mov    eax,ecx
c000cb0c:	89 da                	mov    edx,ebx
c000cb0e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000cb14:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000cb1a:	5b                   	pop    ebx
c000cb1b:	5e                   	pop    esi
c000cb1c:	c3                   	ret    
c000cb1d:	90                   	nop

c000cb1e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cb1e:	83 ec 1c             	sub    esp,0x1c
c000cb21:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cb25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb31:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cb35:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb38:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cb3c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cb40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb44:	83 ec 08             	sub    esp,0x8
c000cb47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4b:	50                   	push   eax
c000cb4c:	e8 8b f0 ff ff       	call   c000bbdc <Device::Device(char const*)>
c000cb51:	83 c4 10             	add    esp,0x10
c000cb54:	ba 94 fd 01 c0       	mov    edx,0xc001fd94
c000cb59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb5d:	89 10                	mov    DWORD PTR [eax],edx
c000cb5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb63:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cb6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb6e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000cb75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb79:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cb80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb84:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000cb8e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cb92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb9a:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000cba0:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000cba6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cbaa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cbad:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cbb1:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000cbb7:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000cbbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbc1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cbc5:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000cbcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbcf:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000cbd9:	90                   	nop
c000cbda:	83 c4 1c             	add    esp,0x1c
c000cbdd:	c3                   	ret    

c000cbde <LogicalDisk::assignDriveLetter()>:
c000cbde:	55                   	push   ebp
c000cbdf:	57                   	push   edi
c000cbe0:	56                   	push   esi
c000cbe1:	53                   	push   ebx
c000cbe2:	83 ec 14             	sub    esp,0x14
c000cbe5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cbe9:	8b 3d 00 64 02 c0    	mov    edi,DWORD PTR ds:0xc0026400
c000cbef:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000cbf5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000cbf9:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000cbff:	8b 3d 04 64 02 c0    	mov    edi,DWORD PTR ds:0xc0026404
c000cc05:	3c 01                	cmp    al,0x1
c000cc07:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000cc0b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000cc0f:	19 c0                	sbb    eax,eax
c000cc11:	83 e0 02             	and    eax,0x2
c000cc14:	83 c0 41             	add    eax,0x41
c000cc17:	0f be e8             	movsx  ebp,al
c000cc1a:	3c 43                	cmp    al,0x43
c000cc1c:	75 10                	jne    c000cc2e <LogicalDisk::assignDriveLetter()+0x50>
c000cc1e:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000cc25:	75 5d                	jne    c000cc84 <LogicalDisk::assignDriveLetter()+0xa6>
c000cc27:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000cc2c:	75 56                	jne    c000cc84 <LogicalDisk::assignDriveLetter()+0xa6>
c000cc2e:	8d 75 bf             	lea    esi,[ebp-0x41]
c000cc31:	ba 01 00 00 00       	mov    edx,0x1
c000cc36:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000cc3a:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000cc3e:	d3 e2                	shl    edx,cl
c000cc40:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cc44:	89 d7                	mov    edi,edx
c000cc46:	89 d6                	mov    esi,edx
c000cc48:	c1 ff 1f             	sar    edi,0x1f
c000cc4b:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000cc4f:	21 f9                	and    ecx,edi
c000cc51:	09 d1                	or     ecx,edx
c000cc53:	75 2f                	jne    c000cc84 <LogicalDisk::assignDriveLetter()+0xa6>
c000cc55:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000cc59:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc5d:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000cc63:	09 f2                	or     edx,esi
c000cc65:	89 15 00 64 02 c0    	mov    DWORD PTR ds:0xc0026400,edx
c000cc6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cc6f:	09 fa                	or     edx,edi
c000cc71:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000cc75:	89 15 04 64 02 c0    	mov    DWORD PTR ds:0xc0026404,edx
c000cc7b:	89 1c bd 20 64 02 c0 	mov    DWORD PTR [edi*4-0x3ffd9be0],ebx
c000cc82:	eb 08                	jmp    c000cc8c <LogicalDisk::assignDriveLetter()+0xae>
c000cc84:	45                   	inc    ebp
c000cc85:	40                   	inc    eax
c000cc86:	3c 5b                	cmp    al,0x5b
c000cc88:	75 90                	jne    c000cc1a <LogicalDisk::assignDriveLetter()+0x3c>
c000cc8a:	31 c0                	xor    eax,eax
c000cc8c:	83 c4 14             	add    esp,0x14
c000cc8f:	5b                   	pop    ebx
c000cc90:	5e                   	pop    esi
c000cc91:	5f                   	pop    edi
c000cc92:	5d                   	pop    ebp
c000cc93:	c3                   	ret    

c000cc94 <LogicalDisk::mount()>:
c000cc94:	56                   	push   esi
c000cc95:	53                   	push   ebx
c000cc96:	53                   	push   ebx
c000cc97:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cc9b:	8b 1d b4 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb4
c000cca1:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000ccab:	85 db                	test   ebx,ebx
c000ccad:	74 27                	je     c000ccd6 <LogicalDisk::mount()+0x42>
c000ccaf:	51                   	push   ecx
c000ccb0:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000ccb7:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ccb9:	83 e8 41             	sub    eax,0x41
c000ccbc:	50                   	push   eax
c000ccbd:	56                   	push   esi
c000ccbe:	53                   	push   ebx
c000ccbf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000ccc2:	83 c4 10             	add    esp,0x10
c000ccc5:	84 c0                	test   al,al
c000ccc7:	74 08                	je     c000ccd1 <LogicalDisk::mount()+0x3d>
c000ccc9:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000cccf:	eb 07                	jmp    c000ccd8 <LogicalDisk::mount()+0x44>
c000ccd1:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000ccd4:	eb d5                	jmp    c000ccab <LogicalDisk::mount()+0x17>
c000ccd6:	31 c0                	xor    eax,eax
c000ccd8:	5a                   	pop    edx
c000ccd9:	5b                   	pop    ebx
c000ccda:	5e                   	pop    esi
c000ccdb:	c3                   	ret    

c000ccdc <LogicalDisk::unmount()>:
c000ccdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cce0:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000ccea:	c3                   	ret    
c000cceb:	90                   	nop

c000ccec <LogicalDisk::eject()>:
c000ccec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccf0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ccf6:	8b 10                	mov    edx,DWORD PTR [eax]
c000ccf8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ccfc:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000ccff:	90                   	nop

c000cd00 <LogicalDisk::unassignDriveLetter()>:
c000cd00:	57                   	push   edi
c000cd01:	56                   	push   esi
c000cd02:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cd06:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000cd0d:	84 c9                	test   cl,cl
c000cd0f:	75 0f                	jne    c000cd20 <LogicalDisk::unassignDriveLetter()+0x20>
c000cd11:	c7 44 24 0c 6c fd 01 c0 	mov    DWORD PTR [esp+0xc],0xc001fd6c
c000cd19:	5e                   	pop    esi
c000cd1a:	5f                   	pop    edi
c000cd1b:	e9 a7 36 00 00       	jmp    c00103c7 <KePanic(char const*)>
c000cd20:	83 e9 41             	sub    ecx,0x41
c000cd23:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cd2a:	b8 01 00 00 00       	mov    eax,0x1
c000cd2f:	c7 04 8d 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd9be0],0x0
c000cd3a:	d3 e0                	shl    eax,cl
c000cd3c:	89 c7                	mov    edi,eax
c000cd3e:	f7 d0                	not    eax
c000cd40:	c1 ff 1f             	sar    edi,0x1f
c000cd43:	21 05 00 64 02 c0    	and    DWORD PTR ds:0xc0026400,eax
c000cd49:	89 fe                	mov    esi,edi
c000cd4b:	f7 d6                	not    esi
c000cd4d:	21 35 04 64 02 c0    	and    DWORD PTR ds:0xc0026404,esi
c000cd53:	5e                   	pop    esi
c000cd54:	5f                   	pop    edi
c000cd55:	c3                   	ret    

c000cd56 <LogicalDisk::read(unsigned long long, int, void*)>:
c000cd56:	57                   	push   edi
c000cd57:	56                   	push   esi
c000cd58:	53                   	push   ebx
c000cd59:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd5d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cd61:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cd65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cd69:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cd6f:	77 41                	ja     c000cdb2 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000cd71:	99                   	cdq    
c000cd72:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cd78:	01 c8                	add    eax,ecx
c000cd7a:	11 da                	adc    edx,ebx
c000cd7c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cd82:	19 d7                	sbb    edi,edx
c000cd84:	72 33                	jb     c000cdb9 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000cd86:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cd8c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cd92:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cd96:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cd9a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cda0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cda6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cdaa:	5b                   	pop    ebx
c000cdab:	5e                   	pop    esi
c000cdac:	5f                   	pop    edi
c000cdad:	e9 c0 0a 00 00       	jmp    c000d872 <VCache::read(unsigned long long, int, void*)>
c000cdb2:	b8 05 00 00 00       	mov    eax,0x5
c000cdb7:	eb 05                	jmp    c000cdbe <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000cdb9:	b8 07 00 00 00       	mov    eax,0x7
c000cdbe:	5b                   	pop    ebx
c000cdbf:	5e                   	pop    esi
c000cdc0:	5f                   	pop    edi
c000cdc1:	c3                   	ret    

c000cdc2 <LogicalDisk::write(unsigned long long, int, void*)>:
c000cdc2:	57                   	push   edi
c000cdc3:	56                   	push   esi
c000cdc4:	53                   	push   ebx
c000cdc5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cdc9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cdcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cdd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cdd5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cddb:	77 41                	ja     c000ce1e <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000cddd:	99                   	cdq    
c000cdde:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cde4:	01 c8                	add    eax,ecx
c000cde6:	11 da                	adc    edx,ebx
c000cde8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cdee:	19 d7                	sbb    edi,edx
c000cdf0:	72 33                	jb     c000ce25 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000cdf2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cdf8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cdfe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ce02:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ce06:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ce0c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ce12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ce16:	5b                   	pop    ebx
c000ce17:	5e                   	pop    esi
c000ce18:	5f                   	pop    edi
c000ce19:	e9 66 09 00 00       	jmp    c000d784 <VCache::write(unsigned long long, int, void*)>
c000ce1e:	b8 05 00 00 00       	mov    eax,0x5
c000ce23:	eb 05                	jmp    c000ce2a <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ce25:	b8 07 00 00 00       	mov    eax,0x7
c000ce2a:	5b                   	pop    ebx
c000ce2b:	5e                   	pop    esi
c000ce2c:	5f                   	pop    edi
c000ce2d:	c3                   	ret    
c000ce2e:	66 90                	xchg   ax,ax

c000ce30 <Mouse::Mouse(char const*)>:
c000ce30:	83 ec 0c             	sub    esp,0xc
c000ce33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce37:	83 ec 08             	sub    esp,0x8
c000ce3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3e:	50                   	push   eax
c000ce3f:	e8 98 ed ff ff       	call   c000bbdc <Device::Device(char const*)>
c000ce44:	83 c4 10             	add    esp,0x10
c000ce47:	ba c0 fd 01 c0       	mov    edx,0xc001fdc0
c000ce4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce50:	89 10                	mov    DWORD PTR [eax],edx
c000ce52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce56:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000ce60:	90                   	nop
c000ce61:	83 c4 0c             	add    esp,0xc
c000ce64:	c3                   	ret    
c000ce65:	90                   	nop
c000ce66:	66 90                	xchg   ax,ax

c000ce68 <Mouse::~Mouse()>:
c000ce68:	83 ec 0c             	sub    esp,0xc
c000ce6b:	ba c0 fd 01 c0       	mov    edx,0xc001fdc0
c000ce70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce74:	89 10                	mov    DWORD PTR [eax],edx
c000ce76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce7a:	83 ec 0c             	sub    esp,0xc
c000ce7d:	50                   	push   eax
c000ce7e:	e8 c3 ea ff ff       	call   c000b946 <Device::~Device()>
c000ce83:	83 c4 10             	add    esp,0x10
c000ce86:	90                   	nop
c000ce87:	83 c4 0c             	add    esp,0xc
c000ce8a:	c3                   	ret    
c000ce8b:	90                   	nop

c000ce8c <Mouse::~Mouse()>:
c000ce8c:	83 ec 0c             	sub    esp,0xc
c000ce8f:	83 ec 0c             	sub    esp,0xc
c000ce92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce96:	e8 cd ff ff ff       	call   c000ce68 <Mouse::~Mouse()>
c000ce9b:	83 c4 10             	add    esp,0x10
c000ce9e:	83 ec 08             	sub    esp,0x8
c000cea1:	68 58 01 00 00       	push   0x158
c000cea6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ceaa:	e8 61 d6 ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c000ceaf:	83 c4 10             	add    esp,0x10
c000ceb2:	83 c4 0c             	add    esp,0xc
c000ceb5:	c3                   	ret    

c000ceb6 <NIC::getMAC()>:
c000ceb6:	31 c0                	xor    eax,eax
c000ceb8:	31 d2                	xor    edx,edx
c000ceba:	c3                   	ret    
c000cebb:	90                   	nop

c000cebc <NIC::write(int, unsigned char*, int*)>:
c000cebc:	b8 01 00 00 00       	mov    eax,0x1
c000cec1:	c3                   	ret    

c000cec2 <NIC::NIC(char const*)>:
c000cec2:	83 ec 0c             	sub    esp,0xc
c000cec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cec9:	83 ec 08             	sub    esp,0x8
c000cecc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced0:	50                   	push   eax
c000ced1:	e8 06 ed ff ff       	call   c000bbdc <Device::Device(char const*)>
c000ced6:	83 c4 10             	add    esp,0x10
c000ced9:	ba ec fd 01 c0       	mov    edx,0xc001fdec
c000cede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cee2:	89 10                	mov    DWORD PTR [eax],edx
c000cee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cee8:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000cef2:	90                   	nop
c000cef3:	83 c4 0c             	add    esp,0xc
c000cef6:	c3                   	ret    
c000cef7:	90                   	nop

c000cef8 <NIC::~NIC()>:
c000cef8:	83 ec 0c             	sub    esp,0xc
c000cefb:	ba ec fd 01 c0       	mov    edx,0xc001fdec
c000cf00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf04:	89 10                	mov    DWORD PTR [eax],edx
c000cf06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf0a:	83 ec 0c             	sub    esp,0xc
c000cf0d:	50                   	push   eax
c000cf0e:	e8 33 ea ff ff       	call   c000b946 <Device::~Device()>
c000cf13:	83 c4 10             	add    esp,0x10
c000cf16:	90                   	nop
c000cf17:	83 c4 0c             	add    esp,0xc
c000cf1a:	c3                   	ret    
c000cf1b:	90                   	nop

c000cf1c <NIC::~NIC()>:
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	83 ec 0c             	sub    esp,0xc
c000cf22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf26:	e8 cd ff ff ff       	call   c000cef8 <NIC::~NIC()>
c000cf2b:	83 c4 10             	add    esp,0x10
c000cf2e:	83 ec 08             	sub    esp,0x8
c000cf31:	68 58 01 00 00       	push   0x158
c000cf36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3a:	e8 d1 d5 ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c000cf3f:	83 c4 10             	add    esp,0x10
c000cf42:	83 c4 0c             	add    esp,0xc
c000cf45:	c3                   	ret    

c000cf46 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cf46:	55                   	push   ebp
c000cf47:	57                   	push   edi
c000cf48:	56                   	push   esi
c000cf49:	53                   	push   ebx
c000cf4a:	81 ec 28 01 00 00    	sub    esp,0x128
c000cf50:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000cf57:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000cf5e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000cf65:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000cf6c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf70:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf74:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cf7b:	e8 58 ed ff ff       	call   c000bcd8 <Device::getName()>
c000cf80:	5a                   	pop    edx
c000cf81:	59                   	pop    ecx
c000cf82:	50                   	push   eax
c000cf83:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cf87:	55                   	push   ebp
c000cf88:	e8 63 36 ff ff       	call   c00005f0 <strcpy>
c000cf8d:	5b                   	pop    ebx
c000cf8e:	58                   	pop    eax
c000cf8f:	68 18 fe 01 c0       	push   0xc001fe18
c000cf94:	55                   	push   ebp
c000cf95:	e8 16 38 ff ff       	call   c00007b0 <strcat>
c000cf9a:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000cfa1:	e8 bf a8 ff ff       	call   c0007865 <malloc>
c000cfa6:	83 c4 0c             	add    esp,0xc
c000cfa9:	89 c3                	mov    ebx,eax
c000cfab:	57                   	push   edi
c000cfac:	56                   	push   esi
c000cfad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cfb1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cfb5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000cfbc:	55                   	push   ebp
c000cfbd:	50                   	push   eax
c000cfbe:	e8 5b fb ff ff       	call   c000cb1e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000cfc3:	83 c4 14             	add    esp,0x14
c000cfc6:	53                   	push   ebx
c000cfc7:	e8 12 fc ff ff       	call   c000cbde <LogicalDisk::assignDriveLetter()>
c000cfcc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cfcf:	e8 c0 fc ff ff       	call   c000cc94 <LogicalDisk::mount()>
c000cfd4:	58                   	pop    eax
c000cfd5:	5a                   	pop    edx
c000cfd6:	53                   	push   ebx
c000cfd7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cfde:	e8 61 ea ff ff       	call   c000ba44 <Device::addChild(Device*)>
c000cfe3:	81 c4 2c 01 00 00    	add    esp,0x12c
c000cfe9:	5b                   	pop    ebx
c000cfea:	5e                   	pop    esi
c000cfeb:	5f                   	pop    edi
c000cfec:	5d                   	pop    ebp
c000cfed:	c3                   	ret    

c000cfee <createPartitionsForDisk(PhysicalDisk*)>:
c000cfee:	55                   	push   ebp
c000cfef:	57                   	push   edi
c000cff0:	56                   	push   esi
c000cff1:	53                   	push   ebx
c000cff2:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000cff8:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000cfff:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d005:	3d 00 02 00 00       	cmp    eax,0x200
c000d00a:	74 27                	je     c000d033 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d00c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d012:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d018:	83 ec 10             	sub    esp,0x10
c000d01b:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d01f:	99                   	cdq    
c000d020:	c1 e6 0a             	shl    esi,0xa
c000d023:	52                   	push   edx
c000d024:	89 fd                	mov    ebp,edi
c000d026:	50                   	push   eax
c000d027:	55                   	push   ebp
c000d028:	56                   	push   esi
c000d029:	e8 32 0d 01 00       	call   c001dd60 <__udivdi3>
c000d02e:	e9 b1 00 00 00       	jmp    c000d0e4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d033:	83 ec 0c             	sub    esp,0xc
c000d036:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d038:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d03c:	56                   	push   esi
c000d03d:	6a 01                	push   0x1
c000d03f:	6a 00                	push   0x0
c000d041:	6a 00                	push   0x0
c000d043:	53                   	push   ebx
c000d044:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d047:	83 c4 20             	add    esp,0x20
c000d04a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d052:	75 0a                	jne    c000d05e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d054:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d05c:	74 2c                	je     c000d08a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d05e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d064:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d06a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d070:	83 ec 10             	sub    esp,0x10
c000d073:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d077:	89 f7                	mov    edi,esi
c000d079:	c1 e0 0a             	shl    eax,0xa
c000d07c:	c1 ff 1f             	sar    edi,0x1f
c000d07f:	57                   	push   edi
c000d080:	56                   	push   esi
c000d081:	52                   	push   edx
c000d082:	50                   	push   eax
c000d083:	e8 d8 0c 01 00       	call   c001dd60 <__udivdi3>
c000d088:	eb 5a                	jmp    c000d0e4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d08a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d091:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000d098:	83 e1 7f             	and    ecx,0x7f
c000d09b:	83 e0 7f             	and    eax,0x7f
c000d09e:	01 c1                	add    ecx,eax
c000d0a0:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d0a7:	83 e0 7f             	and    eax,0x7f
c000d0aa:	01 c1                	add    ecx,eax
c000d0ac:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d0b3:	83 e0 7f             	and    eax,0x7f
c000d0b6:	00 c1                	add    cl,al
c000d0b8:	74 41                	je     c000d0fb <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000d0ba:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d0c0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d0c6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d0cc:	83 ec 10             	sub    esp,0x10
c000d0cf:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d0d3:	89 f7                	mov    edi,esi
c000d0d5:	c1 e0 0a             	shl    eax,0xa
c000d0d8:	c1 ff 1f             	sar    edi,0x1f
c000d0db:	57                   	push   edi
c000d0dc:	56                   	push   esi
c000d0dd:	52                   	push   edx
c000d0de:	50                   	push   eax
c000d0df:	e8 7c 0c 01 00       	call   c001dd60 <__udivdi3>
c000d0e4:	83 c4 14             	add    esp,0x14
c000d0e7:	52                   	push   edx
c000d0e8:	50                   	push   eax
c000d0e9:	6a 00                	push   0x0
c000d0eb:	6a 00                	push   0x0
c000d0ed:	53                   	push   ebx
c000d0ee:	e8 53 fe ff ff       	call   c000cf46 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d0f3:	83 c4 20             	add    esp,0x20
c000d0f6:	e9 79 01 00 00       	jmp    c000d274 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000d0fb:	89 f0                	mov    eax,esi
c000d0fd:	31 f6                	xor    esi,esi
c000d0ff:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d106:	75 02                	jne    c000d10a <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000d108:	89 f1                	mov    ecx,esi
c000d10a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d111:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000d118:	c1 e2 08             	shl    edx,0x8
c000d11b:	c1 e7 10             	shl    edi,0x10
c000d11e:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000d126:	09 fa                	or     edx,edi
c000d128:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000d130:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000d137:	83 c0 10             	add    eax,0x10
c000d13a:	09 fa                	or     edx,edi
c000d13c:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000d143:	c1 e7 18             	shl    edi,0x18
c000d146:	09 fa                	or     edx,edi
c000d148:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000d14f:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000d153:	c1 e7 10             	shl    edi,0x10
c000d156:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d15d:	c1 e2 08             	shl    edx,0x8
c000d160:	09 fa                	or     edx,edi
c000d162:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000d169:	09 fa                	or     edx,edi
c000d16b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000d172:	c1 e7 18             	shl    edi,0x18
c000d175:	09 fa                	or     edx,edi
c000d177:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000d17b:	46                   	inc    esi
c000d17c:	83 fe 04             	cmp    esi,0x4
c000d17f:	0f 85 7a ff ff ff    	jne    c000d0ff <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000d185:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d189:	83 f0 01             	xor    eax,0x1
c000d18c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d190:	75 57                	jne    c000d1e9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d192:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d196:	83 f0 01             	xor    eax,0x1
c000d199:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d19d:	75 4a                	jne    c000d1e9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d19f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d1a3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d1ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d1b3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d1b9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d1bf:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d1c5:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d1c9:	89 f7                	mov    edi,esi
c000d1cb:	c1 e0 0a             	shl    eax,0xa
c000d1ce:	c1 ff 1f             	sar    edi,0x1f
c000d1d1:	57                   	push   edi
c000d1d2:	56                   	push   esi
c000d1d3:	52                   	push   edx
c000d1d4:	50                   	push   eax
c000d1d5:	e8 86 0b 01 00       	call   c001dd60 <__udivdi3>
c000d1da:	83 c4 10             	add    esp,0x10
c000d1dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d1e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d1e5:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d1e9:	84 c9                	test   cl,cl
c000d1eb:	74 53                	je     c000d240 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d1ed:	0f b6 c9             	movzx  ecx,cl
c000d1f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1f8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d1fc:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d200:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d204:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d208:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d20c:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d210:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d214:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d218:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d21c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d220:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d224:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d228:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d22c:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d230:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d234:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d238:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d23c:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d240:	31 ed                	xor    ebp,ebp
c000d242:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d246:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d24a:	89 f8                	mov    eax,edi
c000d24c:	09 f0                	or     eax,esi
c000d24e:	74 1e                	je     c000d26e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d250:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d254:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d258:	89 d1                	mov    ecx,edx
c000d25a:	09 c1                	or     ecx,eax
c000d25c:	74 10                	je     c000d26e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d25e:	83 ec 0c             	sub    esp,0xc
c000d261:	57                   	push   edi
c000d262:	56                   	push   esi
c000d263:	52                   	push   edx
c000d264:	50                   	push   eax
c000d265:	53                   	push   ebx
c000d266:	e8 db fc ff ff       	call   c000cf46 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d26b:	83 c4 20             	add    esp,0x20
c000d26e:	45                   	inc    ebp
c000d26f:	83 fd 04             	cmp    ebp,0x4
c000d272:	75 ce                	jne    c000d242 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d274:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d27a:	5b                   	pop    ebx
c000d27b:	5e                   	pop    esi
c000d27c:	5f                   	pop    edi
c000d27d:	5d                   	pop    ebp
c000d27e:	c3                   	ret    
c000d27f:	90                   	nop

c000d280 <Serial::Serial(char const*)>:
c000d280:	83 ec 0c             	sub    esp,0xc
c000d283:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d287:	83 ec 08             	sub    esp,0x8
c000d28a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d28e:	50                   	push   eax
c000d28f:	e8 48 e9 ff ff       	call   c000bbdc <Device::Device(char const*)>
c000d294:	83 c4 10             	add    esp,0x10
c000d297:	ba 2c fe 01 c0       	mov    edx,0xc001fe2c
c000d29c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2a0:	89 10                	mov    DWORD PTR [eax],edx
c000d2a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2a6:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d2b0:	90                   	nop
c000d2b1:	83 c4 0c             	add    esp,0xc
c000d2b4:	c3                   	ret    
c000d2b5:	90                   	nop
c000d2b6:	66 90                	xchg   ax,ax

c000d2b8 <Serial::~Serial()>:
c000d2b8:	83 ec 0c             	sub    esp,0xc
c000d2bb:	ba 2c fe 01 c0       	mov    edx,0xc001fe2c
c000d2c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2c4:	89 10                	mov    DWORD PTR [eax],edx
c000d2c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2ca:	83 ec 0c             	sub    esp,0xc
c000d2cd:	50                   	push   eax
c000d2ce:	e8 73 e6 ff ff       	call   c000b946 <Device::~Device()>
c000d2d3:	83 c4 10             	add    esp,0x10
c000d2d6:	90                   	nop
c000d2d7:	83 c4 0c             	add    esp,0xc
c000d2da:	c3                   	ret    
c000d2db:	90                   	nop

c000d2dc <Serial::~Serial()>:
c000d2dc:	83 ec 0c             	sub    esp,0xc
c000d2df:	83 ec 0c             	sub    esp,0xc
c000d2e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2e6:	e8 cd ff ff ff       	call   c000d2b8 <Serial::~Serial()>
c000d2eb:	83 c4 10             	add    esp,0x10
c000d2ee:	83 ec 08             	sub    esp,0x8
c000d2f1:	68 58 01 00 00       	push   0x158
c000d2f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2fa:	e8 11 d2 ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	83 c4 0c             	add    esp,0xc
c000d305:	c3                   	ret    
c000d306:	66 90                	xchg   ax,ax

c000d308 <Timer::Timer(char const*)>:
c000d308:	83 ec 0c             	sub    esp,0xc
c000d30b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d30f:	83 ec 08             	sub    esp,0x8
c000d312:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d316:	50                   	push   eax
c000d317:	e8 c0 e8 ff ff       	call   c000bbdc <Device::Device(char const*)>
c000d31c:	83 c4 10             	add    esp,0x10
c000d31f:	ba 70 fe 01 c0       	mov    edx,0xc001fe70
c000d324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d328:	89 10                	mov    DWORD PTR [eax],edx
c000d32a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d32e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000d338:	90                   	nop
c000d339:	83 c4 0c             	add    esp,0xc
c000d33c:	c3                   	ret    
c000d33d:	90                   	nop
c000d33e:	66 90                	xchg   ax,ax

c000d340 <Timer::~Timer()>:
c000d340:	83 ec 0c             	sub    esp,0xc
c000d343:	ba 70 fe 01 c0       	mov    edx,0xc001fe70
c000d348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d34c:	89 10                	mov    DWORD PTR [eax],edx
c000d34e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d352:	83 ec 0c             	sub    esp,0xc
c000d355:	50                   	push   eax
c000d356:	e8 eb e5 ff ff       	call   c000b946 <Device::~Device()>
c000d35b:	83 c4 10             	add    esp,0x10
c000d35e:	90                   	nop
c000d35f:	83 c4 0c             	add    esp,0xc
c000d362:	c3                   	ret    
c000d363:	90                   	nop

c000d364 <Timer::~Timer()>:
c000d364:	83 ec 0c             	sub    esp,0xc
c000d367:	83 ec 0c             	sub    esp,0xc
c000d36a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36e:	e8 cd ff ff ff       	call   c000d340 <Timer::~Timer()>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	83 ec 08             	sub    esp,0x8
c000d379:	68 5c 01 00 00       	push   0x15c
c000d37e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d382:	e8 89 d1 ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c000d387:	83 c4 10             	add    esp,0x10
c000d38a:	83 c4 0c             	add    esp,0xc
c000d38d:	c3                   	ret    

c000d38e <Timer::read()>:
c000d38e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d392:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d398:	c3                   	ret    

c000d399 <setupTimer(int)>:
c000d399:	53                   	push   ebx
c000d39a:	83 ec 14             	sub    esp,0x14
c000d39d:	68 5c 01 00 00       	push   0x15c
c000d3a2:	e8 be a4 ff ff       	call   c0007865 <malloc>
c000d3a7:	89 04 24             	mov    DWORD PTR [esp],eax
c000d3aa:	89 c3                	mov    ebx,eax
c000d3ac:	e8 17 02 01 00       	call   c001d5c8 <PIT::PIT()>
c000d3b1:	58                   	pop    eax
c000d3b2:	5a                   	pop    edx
c000d3b3:	53                   	push   ebx
c000d3b4:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c000d3ba:	e8 85 e6 ff ff       	call   c000ba44 <Device::addChild(Device*)>
c000d3bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d3c1:	6a 00                	push   0x0
c000d3c3:	6a 00                	push   0x0
c000d3c5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d3c9:	53                   	push   ebx
c000d3ca:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d3cd:	89 d8                	mov    eax,ebx
c000d3cf:	83 c4 28             	add    esp,0x28
c000d3d2:	5b                   	pop    ebx
c000d3d3:	c3                   	ret    

c000d3d4 <timerHandler(unsigned int)>:
c000d3d4:	56                   	push   esi
c000d3d5:	53                   	push   ebx
c000d3d6:	51                   	push   ecx
c000d3d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3db:	01 05 8c 64 02 c0    	add    DWORD PTR ds:0xc002648c,eax
c000d3e1:	80 3d bd 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ebd,0x0
c000d3e8:	0f 84 4a 01 00 00    	je     c000d538 <timerHandler(unsigned int)+0x164>
c000d3ee:	fa                   	cli    
c000d3ef:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c000d3f5:	83 ec 0c             	sub    esp,0xc
c000d3f8:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c000d3fe:	68 78 71 02 c0       	push   0xc0027178
c000d403:	e8 28 0f 01 00       	call   c001e330 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d408:	83 c4 10             	add    esp,0x10
c000d40b:	84 c0                	test   al,al
c000d40d:	0f 85 a1 00 00 00    	jne    c000d4b4 <timerHandler(unsigned int)+0xe0>
c000d413:	83 ec 0c             	sub    esp,0xc
c000d416:	68 78 71 02 c0       	push   0xc0027178
c000d41b:	e8 2c 0f 01 00       	call   c001e34c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d420:	83 c4 10             	add    esp,0x10
c000d423:	89 c6                	mov    esi,eax
c000d425:	8d 76 00             	lea    esi,[esi+0x0]
c000d428:	83 ec 0c             	sub    esp,0xc
c000d42b:	68 78 71 02 c0       	push   0xc0027178
c000d430:	e8 17 0f 01 00       	call   c001e34c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d435:	c7 04 24 78 71 02 c0 	mov    DWORD PTR [esp],0xc0027178
c000d43c:	89 c3                	mov    ebx,eax
c000d43e:	e8 11 0f 01 00       	call   c001e354 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d443:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d446:	83 c4 10             	add    esp,0x10
c000d449:	3b 05 8c 64 02 c0    	cmp    eax,DWORD PTR ds:0xc002648c
c000d44f:	77 23                	ja     c000d474 <timerHandler(unsigned int)+0xa0>
c000d451:	83 ec 0c             	sub    esp,0xc
c000d454:	53                   	push   ebx
c000d455:	e8 c6 7a 00 00       	call   c0014f20 <unblockTask(ThreadControlBlock*)>
c000d45a:	83 c4 10             	add    esp,0x10
c000d45d:	39 de                	cmp    esi,ebx
c000d45f:	75 27                	jne    c000d488 <timerHandler(unsigned int)+0xb4>
c000d461:	83 ec 0c             	sub    esp,0xc
c000d464:	68 78 71 02 c0       	push   0xc0027178
c000d469:	e8 de 0e 01 00       	call   c001e34c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d46e:	89 c6                	mov    esi,eax
c000d470:	eb 12                	jmp    c000d484 <timerHandler(unsigned int)+0xb0>
c000d472:	66 90                	xchg   ax,ax
c000d474:	52                   	push   edx
c000d475:	52                   	push   edx
c000d476:	53                   	push   ebx
c000d477:	68 78 71 02 c0       	push   0xc0027178
c000d47c:	e8 8b 0f 01 00       	call   c001e40c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d481:	8d 76 00             	lea    esi,[esi+0x0]
c000d484:	83 c4 10             	add    esp,0x10
c000d487:	90                   	nop
c000d488:	83 ec 0c             	sub    esp,0xc
c000d48b:	68 78 71 02 c0       	push   0xc0027178
c000d490:	e8 9b 0e 01 00       	call   c001e330 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d495:	83 c4 10             	add    esp,0x10
c000d498:	84 c0                	test   al,al
c000d49a:	75 18                	jne    c000d4b4 <timerHandler(unsigned int)+0xe0>
c000d49c:	83 ec 0c             	sub    esp,0xc
c000d49f:	68 78 71 02 c0       	push   0xc0027178
c000d4a4:	e8 a3 0e 01 00       	call   c001e34c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d4a9:	83 c4 10             	add    esp,0x10
c000d4ac:	39 f0                	cmp    eax,esi
c000d4ae:	0f 85 74 ff ff ff    	jne    c000d428 <timerHandler(unsigned int)+0x54>
c000d4b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d4b9:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d4bd:	74 41                	je     c000d500 <timerHandler(unsigned int)+0x12c>
c000d4bf:	80 3d bc 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ebc,0x0
c000d4c6:	74 38                	je     c000d500 <timerHandler(unsigned int)+0x12c>
c000d4c8:	fa                   	cli    
c000d4c9:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c000d4cf:	a1 8c 64 02 c0       	mov    eax,ds:0xc002648c
c000d4d4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d4da:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d4dd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d4e3:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d4e6:	72 08                	jb     c000d4f0 <timerHandler(unsigned int)+0x11c>
c000d4e8:	e8 6f 75 00 00       	call   c0014a5c <schedule()>
c000d4ed:	8d 76 00             	lea    esi,[esi+0x0]
c000d4f0:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000d4f5:	48                   	dec    eax
c000d4f6:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000d4fb:	75 03                	jne    c000d500 <timerHandler(unsigned int)+0x12c>
c000d4fd:	fb                   	sti    
c000d4fe:	66 90                	xchg   ax,ax
c000d500:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000d505:	48                   	dec    eax
c000d506:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c000d50b:	75 1b                	jne    c000d528 <timerHandler(unsigned int)+0x154>
c000d50d:	83 3d 60 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027160,0x0
c000d514:	74 12                	je     c000d528 <timerHandler(unsigned int)+0x154>
c000d516:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c000d520:	e8 37 75 00 00       	call   c0014a5c <schedule()>
c000d525:	8d 76 00             	lea    esi,[esi+0x0]
c000d528:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000d52d:	48                   	dec    eax
c000d52e:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000d533:	75 03                	jne    c000d538 <timerHandler(unsigned int)+0x164>
c000d535:	fb                   	sti    
c000d536:	66 90                	xchg   ax,ax
c000d538:	58                   	pop    eax
c000d539:	5b                   	pop    ebx
c000d53a:	5e                   	pop    esi
c000d53b:	c3                   	ret    

c000d53c <VCache::VCache(PhysicalDisk*)>:
c000d53c:	53                   	push   ebx
c000d53d:	83 ec 18             	sub    esp,0x18
c000d540:	ba a0 fe 01 c0       	mov    edx,0xc001fea0
c000d545:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d549:	89 10                	mov    DWORD PTR [eax],edx
c000d54b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d54f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d556:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d55a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d561:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d565:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d56c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d573:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d577:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d57e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d585:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d589:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d590:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d594:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d598:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d59c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d5a3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d5aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5ae:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d5b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5b6:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d5ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5be:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d5c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5c6:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d5cd:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d5d5:	83 ec 0c             	sub    esp,0xc
c000d5d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d5dc:	e8 84 a2 ff ff       	call   c0007865 <malloc>
c000d5e1:	83 c4 10             	add    esp,0x10
c000d5e4:	89 c3                	mov    ebx,eax
c000d5e6:	83 ec 0c             	sub    esp,0xc
c000d5e9:	53                   	push   ebx
c000d5ea:	e8 11 72 00 00       	call   c0014800 <Mutex::Mutex()>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d5f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5fd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d601:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d604:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d608:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d60f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d613:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d619:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d61d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d620:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d624:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d62a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d630:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d634:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d637:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d63a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d63e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d642:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d646:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d64c:	05 00 02 00 00       	add    eax,0x200
c000d651:	c1 e0 03             	shl    eax,0x3
c000d654:	83 ec 0c             	sub    esp,0xc
c000d657:	50                   	push   eax
c000d658:	e8 08 a2 ff ff       	call   c0007865 <malloc>
c000d65d:	83 c4 10             	add    esp,0x10
c000d660:	89 c2                	mov    edx,eax
c000d662:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d666:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d669:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d66d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d674:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d678:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d67c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d680:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d686:	89 d0                	mov    eax,edx
c000d688:	c1 e0 02             	shl    eax,0x2
c000d68b:	01 d0                	add    eax,edx
c000d68d:	c1 e0 04             	shl    eax,0x4
c000d690:	83 ec 0c             	sub    esp,0xc
c000d693:	50                   	push   eax
c000d694:	e8 cc a1 ff ff       	call   c0007865 <malloc>
c000d699:	83 c4 10             	add    esp,0x10
c000d69c:	89 c2                	mov    edx,eax
c000d69e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6a2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d6a5:	90                   	nop
c000d6a6:	83 c4 18             	add    esp,0x18
c000d6a9:	5b                   	pop    ebx
c000d6aa:	c3                   	ret    
c000d6ab:	90                   	nop

c000d6ac <VCache::invalidateReadBuffer()>:
c000d6ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d6b0:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d6b6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d6ba:	c3                   	ret    
c000d6bb:	90                   	nop

c000d6bc <VCache::writeWriteBuffer()>:
c000d6bc:	53                   	push   ebx
c000d6bd:	83 ec 08             	sub    esp,0x8
c000d6c0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d6c4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d6c8:	74 1e                	je     c000d6e8 <VCache::writeWriteBuffer()+0x2c>
c000d6ca:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d6cd:	83 ec 0c             	sub    esp,0xc
c000d6d0:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6d2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d6d5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d6d8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d6db:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d6de:	50                   	push   eax
c000d6df:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d6e2:	83 c4 20             	add    esp,0x20
c000d6e5:	8d 76 00             	lea    esi,[esi+0x0]
c000d6e8:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d6ef:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d6f6:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d6fa:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d701:	83 c4 08             	add    esp,0x8
c000d704:	5b                   	pop    ebx
c000d705:	c3                   	ret    
c000d706:	66 90                	xchg   ax,ax

c000d708 <VCache::~VCache()>:
c000d708:	83 ec 0c             	sub    esp,0xc
c000d70b:	ba a0 fe 01 c0       	mov    edx,0xc001fea0
c000d710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d714:	89 10                	mov    DWORD PTR [eax],edx
c000d716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d71a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d71d:	84 c0                	test   al,al
c000d71f:	74 0f                	je     c000d730 <VCache::~VCache()+0x28>
c000d721:	83 ec 0c             	sub    esp,0xc
c000d724:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d728:	e8 8f ff ff ff       	call   c000d6bc <VCache::writeWriteBuffer()>
c000d72d:	83 c4 10             	add    esp,0x10
c000d730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d734:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d737:	83 ec 0c             	sub    esp,0xc
c000d73a:	50                   	push   eax
c000d73b:	e8 35 a1 ff ff       	call   c0007875 <free>
c000d740:	83 c4 10             	add    esp,0x10
c000d743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d747:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d74a:	83 ec 0c             	sub    esp,0xc
c000d74d:	50                   	push   eax
c000d74e:	e8 22 a1 ff ff       	call   c0007875 <free>
c000d753:	83 c4 10             	add    esp,0x10
c000d756:	90                   	nop
c000d757:	83 c4 0c             	add    esp,0xc
c000d75a:	c3                   	ret    
c000d75b:	90                   	nop

c000d75c <VCache::~VCache()>:
c000d75c:	83 ec 0c             	sub    esp,0xc
c000d75f:	83 ec 0c             	sub    esp,0xc
c000d762:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d766:	e8 9d ff ff ff       	call   c000d708 <VCache::~VCache()>
c000d76b:	83 c4 10             	add    esp,0x10
c000d76e:	83 ec 08             	sub    esp,0x8
c000d771:	6a 44                	push   0x44
c000d773:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d777:	e8 94 cd ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c000d77c:	83 c4 10             	add    esp,0x10
c000d77f:	83 c4 0c             	add    esp,0xc
c000d782:	c3                   	ret    
c000d783:	90                   	nop

c000d784 <VCache::write(unsigned long long, int, void*)>:
c000d784:	55                   	push   ebp
c000d785:	57                   	push   edi
c000d786:	56                   	push   esi
c000d787:	53                   	push   ebx
c000d788:	83 ec 1c             	sub    esp,0x1c
c000d78b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d78f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d793:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000d797:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d79b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000d79f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d7a3:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d7a7:	74 07                	je     c000d7b0 <VCache::write(unsigned long long, int, void*)+0x2c>
c000d7a9:	53                   	push   ebx
c000d7aa:	e8 fd fe ff ff       	call   c000d6ac <VCache::invalidateReadBuffer()>
c000d7af:	58                   	pop    eax
c000d7b0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d7b4:	74 62                	je     c000d818 <VCache::write(unsigned long long, int, void*)+0x94>
c000d7b6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d7b9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d7bd:	99                   	cdq    
c000d7be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7c2:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d7c5:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d7c8:	31 c1                	xor    ecx,eax
c000d7ca:	89 d0                	mov    eax,edx
c000d7cc:	89 ca                	mov    edx,ecx
c000d7ce:	31 e8                	xor    eax,ebp
c000d7d0:	09 c2                	or     edx,eax
c000d7d2:	75 38                	jne    c000d80c <VCache::write(unsigned long long, int, void*)+0x88>
c000d7d4:	83 ff 01             	cmp    edi,0x1
c000d7d7:	75 33                	jne    c000d80c <VCache::write(unsigned long long, int, void*)+0x88>
c000d7d9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d7dc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d7e0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d7e6:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d7e9:	0f af c8             	imul   ecx,eax
c000d7ec:	01 cf                	add    edi,ecx
c000d7ee:	89 c1                	mov    ecx,eax
c000d7f0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7f2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d7f5:	40                   	inc    eax
c000d7f6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d7f9:	83 f8 50             	cmp    eax,0x50
c000d7fc:	75 6a                	jne    c000d868 <VCache::write(unsigned long long, int, void*)+0xe4>
c000d7fe:	83 ec 0c             	sub    esp,0xc
c000d801:	53                   	push   ebx
c000d802:	e8 b5 fe ff ff       	call   c000d6bc <VCache::writeWriteBuffer()>
c000d807:	83 c4 10             	add    esp,0x10
c000d80a:	eb 5c                	jmp    c000d868 <VCache::write(unsigned long long, int, void*)+0xe4>
c000d80c:	83 ec 0c             	sub    esp,0xc
c000d80f:	53                   	push   ebx
c000d810:	e8 a7 fe ff ff       	call   c000d6bc <VCache::writeWriteBuffer()>
c000d815:	83 c4 10             	add    esp,0x10
c000d818:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d81b:	83 ff 4f             	cmp    edi,0x4f
c000d81e:	7f 20                	jg     c000d840 <VCache::write(unsigned long long, int, void*)+0xbc>
c000d820:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000d823:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d827:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000d82a:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d82d:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d831:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d834:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d83a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d83c:	eb 2a                	jmp    c000d868 <VCache::write(unsigned long long, int, void*)+0xe4>
c000d83e:	66 90                	xchg   ax,ax
c000d840:	8b 10                	mov    edx,DWORD PTR [eax]
c000d842:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d846:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000d84a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d84e:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000d852:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d856:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d85a:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d85d:	83 c4 1c             	add    esp,0x1c
c000d860:	5b                   	pop    ebx
c000d861:	5e                   	pop    esi
c000d862:	5f                   	pop    edi
c000d863:	5d                   	pop    ebp
c000d864:	ff e0                	jmp    eax
c000d866:	66 90                	xchg   ax,ax
c000d868:	83 c4 1c             	add    esp,0x1c
c000d86b:	31 c0                	xor    eax,eax
c000d86d:	5b                   	pop    ebx
c000d86e:	5e                   	pop    esi
c000d86f:	5f                   	pop    edi
c000d870:	5d                   	pop    ebp
c000d871:	c3                   	ret    

c000d872 <VCache::read(unsigned long long, int, void*)>:
c000d872:	55                   	push   ebp
c000d873:	57                   	push   edi
c000d874:	56                   	push   esi
c000d875:	53                   	push   ebx
c000d876:	83 ec 1c             	sub    esp,0x1c
c000d879:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000d87d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d881:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d885:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000d889:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d88d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d891:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000d895:	74 0d                	je     c000d8a4 <VCache::read(unsigned long long, int, void*)+0x32>
c000d897:	83 ec 0c             	sub    esp,0xc
c000d89a:	57                   	push   edi
c000d89b:	e8 1c fe ff ff       	call   c000d6bc <VCache::writeWriteBuffer()>
c000d8a0:	83 c4 10             	add    esp,0x10
c000d8a3:	90                   	nop
c000d8a4:	83 fd 01             	cmp    ebp,0x1
c000d8a7:	0f 85 93 00 00 00    	jne    c000d940 <VCache::read(unsigned long long, int, void*)+0xce>
c000d8ad:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d8b0:	89 04 24             	mov    DWORD PTR [esp],eax
c000d8b3:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000d8ba:	0f 85 80 00 00 00    	jne    c000d940 <VCache::read(unsigned long long, int, void*)+0xce>
c000d8c0:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000d8c3:	89 e9                	mov    ecx,ebp
c000d8c5:	f7 d9                	neg    ecx
c000d8c7:	89 c8                	mov    eax,ecx
c000d8c9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000d8cd:	c1 f8 1f             	sar    eax,0x1f
c000d8d0:	21 d9                	and    ecx,ebx
c000d8d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d8d6:	89 c8                	mov    eax,ecx
c000d8d8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d8dc:	21 f1                	and    ecx,esi
c000d8de:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000d8e2:	89 ca                	mov    edx,ecx
c000d8e4:	74 2e                	je     c000d914 <VCache::read(unsigned long long, int, void*)+0xa2>
c000d8e6:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000d8e9:	75 29                	jne    c000d914 <VCache::read(unsigned long long, int, void*)+0xa2>
c000d8eb:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000d8ee:	75 24                	jne    c000d914 <VCache::read(unsigned long long, int, void*)+0xa2>
c000d8f0:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d8f3:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d8f9:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000d8fc:	8d 70 ff             	lea    esi,[eax-0x1]
c000d8ff:	21 f3                	and    ebx,esi
c000d901:	0f af d9             	imul   ebx,ecx
c000d904:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000d907:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000d90b:	89 de                	mov    esi,ebx
c000d90d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d90f:	31 c0                	xor    eax,eax
c000d911:	eb 61                	jmp    c000d974 <VCache::read(unsigned long long, int, void*)+0x102>
c000d913:	90                   	nop
c000d914:	83 ec 0c             	sub    esp,0xc
c000d917:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000d91b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d91f:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000d922:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000d925:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d927:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000d92a:	55                   	push   ebp
c000d92b:	52                   	push   edx
c000d92c:	50                   	push   eax
c000d92d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d931:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000d934:	83 c4 20             	add    esp,0x20
c000d937:	85 c0                	test   eax,eax
c000d939:	75 39                	jne    c000d974 <VCache::read(unsigned long long, int, void*)+0x102>
c000d93b:	eb b3                	jmp    c000d8f0 <VCache::read(unsigned long long, int, void*)+0x7e>
c000d93d:	8d 76 00             	lea    esi,[esi+0x0]
c000d940:	83 ec 0c             	sub    esp,0xc
c000d943:	57                   	push   edi
c000d944:	e8 63 fd ff ff       	call   c000d6ac <VCache::invalidateReadBuffer()>
c000d949:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d94c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d950:	8b 10                	mov    edx,DWORD PTR [eax]
c000d952:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000d956:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000d95a:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000d95e:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000d962:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d966:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d969:	83 c4 2c             	add    esp,0x2c
c000d96c:	5b                   	pop    ebx
c000d96d:	5e                   	pop    esi
c000d96e:	5f                   	pop    edi
c000d96f:	5d                   	pop    ebp
c000d970:	ff e0                	jmp    eax
c000d972:	66 90                	xchg   ax,ax
c000d974:	83 c4 1c             	add    esp,0x1c
c000d977:	5b                   	pop    ebx
c000d978:	5e                   	pop    esi
c000d979:	5f                   	pop    edi
c000d97a:	5d                   	pop    ebp
c000d97b:	c3                   	ret    

c000d97c <Video::putrect(int, int, int, int, unsigned int)>:
c000d97c:	55                   	push   ebp
c000d97d:	57                   	push   edi
c000d97e:	56                   	push   esi
c000d97f:	53                   	push   ebx
c000d980:	83 ec 1c             	sub    esp,0x1c
c000d983:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d987:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d98b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d98f:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d993:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d997:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d99b:	01 df                	add    edi,ebx
c000d99d:	39 fb                	cmp    ebx,edi
c000d99f:	7d 1f                	jge    c000d9c0 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d9a1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d9a5:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d9a9:	7d 12                	jge    c000d9bd <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d9ab:	8b 16                	mov    edx,DWORD PTR [esi]
c000d9ad:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9b1:	53                   	push   ebx
c000d9b2:	55                   	push   ebp
c000d9b3:	45                   	inc    ebp
c000d9b4:	56                   	push   esi
c000d9b5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d9b8:	83 c4 10             	add    esp,0x10
c000d9bb:	eb e8                	jmp    c000d9a5 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d9bd:	43                   	inc    ebx
c000d9be:	eb dd                	jmp    c000d99d <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d9c0:	83 c4 1c             	add    esp,0x1c
c000d9c3:	5b                   	pop    ebx
c000d9c4:	5e                   	pop    esi
c000d9c5:	5f                   	pop    edi
c000d9c6:	5d                   	pop    ebp
c000d9c7:	c3                   	ret    

c000d9c8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d9c8:	55                   	push   ebp
c000d9c9:	57                   	push   edi
c000d9ca:	31 ff                	xor    edi,edi
c000d9cc:	56                   	push   esi
c000d9cd:	53                   	push   ebx
c000d9ce:	83 ec 1c             	sub    esp,0x1c
c000d9d1:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d9d5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d9d9:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d9e0:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d9e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9e9:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d9ed:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d9f1:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d9f4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d9f8:	01 f9                	add    ecx,edi
c000d9fa:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000d9fe:	7d 2f                	jge    c000da2f <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000da00:	31 f6                	xor    esi,esi
c000da02:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000da06:	01 f2                	add    edx,esi
c000da08:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000da0c:	7d 1a                	jge    c000da28 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000da0e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000da11:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000da14:	46                   	inc    esi
c000da15:	51                   	push   ecx
c000da16:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000da1a:	52                   	push   edx
c000da1b:	55                   	push   ebp
c000da1c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000da26:	eb da                	jmp    c000da02 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000da28:	47                   	inc    edi
c000da29:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000da2d:	eb c5                	jmp    c000d9f4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000da2f:	83 c4 1c             	add    esp,0x1c
c000da32:	5b                   	pop    ebx
c000da33:	5e                   	pop    esi
c000da34:	5f                   	pop    edi
c000da35:	5d                   	pop    ebp
c000da36:	c3                   	ret    
c000da37:	90                   	nop

c000da38 <Video::blit(unsigned int*, int, int, int, int)>:
c000da38:	55                   	push   ebp
c000da39:	57                   	push   edi
c000da3a:	56                   	push   esi
c000da3b:	53                   	push   ebx
c000da3c:	83 ec 1c             	sub    esp,0x1c
c000da3f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000da43:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000da47:	85 c0                	test   eax,eax
c000da49:	79 02                	jns    c000da4d <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000da4b:	31 c0                	xor    eax,eax
c000da4d:	c1 e0 02             	shl    eax,0x2
c000da50:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000da54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000da58:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000da5c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000da60:	39 d8                	cmp    eax,ebx
c000da62:	7e 49                	jle    c000daad <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000da64:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000da6a:	7c 41                	jl     c000daad <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000da6c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000da70:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000da74:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000da78:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000da7c:	39 f9                	cmp    ecx,edi
c000da7e:	7e 22                	jle    c000daa2 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000da80:	83 c5 04             	add    ebp,0x4
c000da83:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000da89:	7c 14                	jl     c000da9f <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000da8b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000da8d:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000da90:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000da94:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000da98:	56                   	push   esi
c000da99:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000da9c:	83 c4 10             	add    esp,0x10
c000da9f:	47                   	inc    edi
c000daa0:	eb d2                	jmp    c000da74 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000daa2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000daa6:	43                   	inc    ebx
c000daa7:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000daab:	eb ab                	jmp    c000da58 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000daad:	83 c4 1c             	add    esp,0x1c
c000dab0:	5b                   	pop    ebx
c000dab1:	5e                   	pop    esi
c000dab2:	5f                   	pop    edi
c000dab3:	5d                   	pop    ebp
c000dab4:	c3                   	ret    
c000dab5:	90                   	nop

c000dab6 <Video::clearScreen(unsigned int)>:
c000dab6:	57                   	push   edi
c000dab7:	56                   	push   esi
c000dab8:	53                   	push   ebx
c000dab9:	31 db                	xor    ebx,ebx
c000dabb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dabf:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000dac5:	7e 1f                	jle    c000dae6 <Video::clearScreen(unsigned int)+0x30>
c000dac7:	31 ff                	xor    edi,edi
c000dac9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000dacf:	7e 12                	jle    c000dae3 <Video::clearScreen(unsigned int)+0x2d>
c000dad1:	8b 06                	mov    eax,DWORD PTR [esi]
c000dad3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dad7:	53                   	push   ebx
c000dad8:	57                   	push   edi
c000dad9:	47                   	inc    edi
c000dada:	56                   	push   esi
c000dadb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	eb e6                	jmp    c000dac9 <Video::clearScreen(unsigned int)+0x13>
c000dae3:	43                   	inc    ebx
c000dae4:	eb d9                	jmp    c000dabf <Video::clearScreen(unsigned int)+0x9>
c000dae6:	5b                   	pop    ebx
c000dae7:	5e                   	pop    esi
c000dae8:	5f                   	pop    edi
c000dae9:	c3                   	ret    

c000daea <Video::putpixel(int, int, unsigned int)>:
c000daea:	c7 44 24 04 a8 fe 01 c0 	mov    DWORD PTR [esp+0x4],0xc001fea8
c000daf2:	e9 d0 28 00 00       	jmp    c00103c7 <KePanic(char const*)>
c000daf7:	90                   	nop

c000daf8 <Video::readPixelApprox(int, int)>:
c000daf8:	83 ec 18             	sub    esp,0x18
c000dafb:	68 c9 fe 01 c0       	push   0xc001fec9
c000db00:	e8 c2 28 00 00       	call   c00103c7 <KePanic(char const*)>
c000db05:	31 c0                	xor    eax,eax
c000db07:	83 c4 1c             	add    esp,0x1c
c000db0a:	c3                   	ret    
c000db0b:	90                   	nop

c000db0c <Video::Video(char const*)>:
c000db0c:	83 ec 0c             	sub    esp,0xc
c000db0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db13:	83 ec 08             	sub    esp,0x8
c000db16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db1a:	50                   	push   eax
c000db1b:	e8 bc e0 ff ff       	call   c000bbdc <Device::Device(char const*)>
c000db20:	83 c4 10             	add    esp,0x10
c000db23:	ba 44 ff 01 c0       	mov    edx,0xc001ff44
c000db28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db2c:	89 10                	mov    DWORD PTR [eax],edx
c000db2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db32:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000db3c:	90                   	nop
c000db3d:	83 c4 0c             	add    esp,0xc
c000db40:	c3                   	ret    
c000db41:	90                   	nop

c000db42 <Video::~Video()>:
c000db42:	83 ec 0c             	sub    esp,0xc
c000db45:	ba 44 ff 01 c0       	mov    edx,0xc001ff44
c000db4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db4e:	89 10                	mov    DWORD PTR [eax],edx
c000db50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db54:	83 ec 0c             	sub    esp,0xc
c000db57:	50                   	push   eax
c000db58:	e8 e9 dd ff ff       	call   c000b946 <Device::~Device()>
c000db5d:	83 c4 10             	add    esp,0x10
c000db60:	90                   	nop
c000db61:	83 c4 0c             	add    esp,0xc
c000db64:	c3                   	ret    
c000db65:	90                   	nop

c000db66 <Video::~Video()>:
c000db66:	83 ec 0c             	sub    esp,0xc
c000db69:	83 ec 0c             	sub    esp,0xc
c000db6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db70:	e8 cd ff ff ff       	call   c000db42 <Video::~Video()>
c000db75:	83 c4 10             	add    esp,0x10
c000db78:	83 ec 08             	sub    esp,0x8
c000db7b:	68 64 01 00 00       	push   0x164
c000db80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db84:	e8 87 c9 ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c000db89:	83 c4 10             	add    esp,0x10
c000db8c:	83 c4 0c             	add    esp,0xc
c000db8f:	c3                   	ret    

c000db90 <Video::isMonochrome()>:
c000db90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db94:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000db9a:	c3                   	ret    
c000db9b:	90                   	nop

c000db9c <Video::getWidth()>:
c000db9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dba0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dba6:	c3                   	ret    
c000dba7:	90                   	nop

c000dba8 <Video::getHeight()>:
c000dba8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dbac:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000dbb2:	c3                   	ret    
c000dbb3:	90                   	nop

c000dbb4 <Video::drawCursor(int, int, unsigned int*, int)>:
c000dbb4:	55                   	push   ebp
c000dbb5:	57                   	push   edi
c000dbb6:	56                   	push   esi
c000dbb7:	53                   	push   ebx
c000dbb8:	83 ec 2c             	sub    esp,0x2c
c000dbbb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dbbf:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000dbc3:	83 f8 01             	cmp    eax,0x1
c000dbc6:	19 c9                	sbb    ecx,ecx
c000dbc8:	31 db                	xor    ebx,ebx
c000dbca:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000dbce:	89 cd                	mov    ebp,ecx
c000dbd0:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000dbd8:	f7 d5                	not    ebp
c000dbda:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000dbe0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dbe4:	01 d8                	add    eax,ebx
c000dbe6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dbea:	56                   	push   esi
c000dbeb:	e8 b8 ff ff ff       	call   c000dba8 <Video::getHeight()>
c000dbf0:	59                   	pop    ecx
c000dbf1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000dbf5:	7e 70                	jle    c000dc67 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000dbf7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000dbfb:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000dbff:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000dc02:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dc06:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000dc0a:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000dc11:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dc15:	89 f8                	mov    eax,edi
c000dc17:	83 c0 20             	add    eax,0x20
c000dc1a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dc1e:	56                   	push   esi
c000dc1f:	e8 78 ff ff ff       	call   c000db9c <Video::getWidth()>
c000dc24:	5a                   	pop    edx
c000dc25:	39 c7                	cmp    edi,eax
c000dc27:	7d 34                	jge    c000dc5d <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000dc29:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000dc2e:	74 05                	je     c000dc35 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000dc30:	8b 06                	mov    eax,DWORD PTR [esi]
c000dc32:	55                   	push   ebp
c000dc33:	eb 0d                	jmp    c000dc42 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000dc35:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000dc3a:	74 12                	je     c000dc4e <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000dc3c:	8b 06                	mov    eax,DWORD PTR [esi]
c000dc3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc42:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dc46:	57                   	push   edi
c000dc47:	56                   	push   esi
c000dc48:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dc4b:	83 c4 10             	add    esp,0x10
c000dc4e:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000dc52:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000dc56:	47                   	inc    edi
c000dc57:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000dc5b:	75 c1                	jne    c000dc1e <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000dc5d:	43                   	inc    ebx
c000dc5e:	83 fb 20             	cmp    ebx,0x20
c000dc61:	0f 85 79 ff ff ff    	jne    c000dbe0 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000dc67:	83 c4 2c             	add    esp,0x2c
c000dc6a:	5b                   	pop    ebx
c000dc6b:	5e                   	pop    esi
c000dc6c:	5f                   	pop    edi
c000dc6d:	5d                   	pop    ebp
c000dc6e:	c3                   	ret    
c000dc6f:	90                   	nop

c000dc70 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000dc70:	55                   	push   ebp
c000dc71:	57                   	push   edi
c000dc72:	56                   	push   esi
c000dc73:	53                   	push   ebx
c000dc74:	83 ec 28             	sub    esp,0x28
c000dc77:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000dc7b:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000dc7f:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000dc83:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000dc87:	c1 e6 08             	shl    esi,0x8
c000dc8a:	01 c6                	add    esi,eax
c000dc8c:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000dc90:	c1 e0 08             	shl    eax,0x8
c000dc93:	01 d0                	add    eax,edx
c000dc95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dc9d:	0f af c6             	imul   eax,esi
c000dca0:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000dca7:	50                   	push   eax
c000dca8:	e8 b8 9b ff ff       	call   c0007865 <malloc>
c000dcad:	83 c4 10             	add    esp,0x10
c000dcb0:	89 c7                	mov    edi,eax
c000dcb2:	85 c0                	test   eax,eax
c000dcb4:	75 10                	jne    c000dcc6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000dcb6:	83 ec 0c             	sub    esp,0xc
c000dcb9:	68 f4 fe 01 c0       	push   0xc001fef4
c000dcbe:	e8 04 27 00 00       	call   c00103c7 <KePanic(char const*)>
c000dcc3:	83 c4 10             	add    esp,0x10
c000dcc6:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000dcc9:	ba 12 00 00 00       	mov    edx,0x12
c000dcce:	84 c0                	test   al,al
c000dcd0:	74 11                	je     c000dce3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000dcd2:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000dcd6:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000dcda:	c1 fa 03             	sar    edx,0x3
c000dcdd:	0f af d1             	imul   edx,ecx
c000dce0:	83 c2 12             	add    edx,0x12
c000dce3:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000dce7:	74 04                	je     c000dced <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000dce9:	85 f6                	test   esi,esi
c000dceb:	75 12                	jne    c000dcff <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000dced:	83 ec 0c             	sub    esp,0xc
c000dcf0:	68 04 ff 01 c0       	push   0xc001ff04
c000dcf5:	e8 0c c9 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c000dcfa:	e9 b8 00 00 00       	jmp    c000ddb7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000dcff:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000dd03:	80 f9 02             	cmp    cl,0x2
c000dd06:	0f 85 96 00 00 00    	jne    c000dda2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000dd0c:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000dd11:	75 0e                	jne    c000dd21 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dd13:	84 c0                	test   al,al
c000dd15:	75 0a                	jne    c000dd21 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dd17:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000dd1a:	83 e8 18             	sub    eax,0x18
c000dd1d:	a8 f7                	test   al,0xf7
c000dd1f:	74 0a                	je     c000dd2b <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000dd21:	83 ec 0c             	sub    esp,0xc
c000dd24:	68 19 ff 01 c0       	push   0xc001ff19
c000dd29:	eb 7f                	jmp    c000ddaa <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000dd2b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dd33:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000dd3b:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000dd3f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dd47:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000dd4b:	75 0c                	jne    c000dd59 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000dd4d:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000dd52:	c1 e0 18             	shl    eax,0x18
c000dd55:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd59:	45                   	inc    ebp
c000dd5a:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000dd5f:	c1 e1 10             	shl    ecx,0x10
c000dd62:	89 c8                	mov    eax,ecx
c000dd64:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000dd69:	c1 e1 08             	shl    ecx,0x8
c000dd6c:	09 c1                	or     ecx,eax
c000dd6e:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000dd72:	09 c1                	or     ecx,eax
c000dd74:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000dd78:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000dd7c:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000dd80:	c1 f8 03             	sar    eax,0x3
c000dd83:	01 c2                	add    edx,eax
c000dd85:	89 e8                	mov    eax,ebp
c000dd87:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000dd8b:	39 c6                	cmp    esi,eax
c000dd8d:	7f b0                	jg     c000dd3f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000dd8f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000dd93:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dd97:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000dd9a:	7e 22                	jle    c000ddbe <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000dd9c:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000dda0:	eb 99                	jmp    c000dd3b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000dda2:	50                   	push   eax
c000dda3:	50                   	push   eax
c000dda4:	51                   	push   ecx
c000dda5:	68 27 ff 01 c0       	push   0xc001ff27
c000ddaa:	e8 57 c8 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c000ddaf:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ddb2:	e8 be 9a ff ff       	call   c0007875 <free>
c000ddb7:	83 c4 10             	add    esp,0x10
c000ddba:	31 ff                	xor    edi,edi
c000ddbc:	eb 0f                	jmp    c000ddcd <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000ddbe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ddc2:	89 30                	mov    DWORD PTR [eax],esi
c000ddc4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ddc8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ddcb:	89 30                	mov    DWORD PTR [eax],esi
c000ddcd:	83 c4 1c             	add    esp,0x1c
c000ddd0:	89 f8                	mov    eax,edi
c000ddd2:	5b                   	pop    ebx
c000ddd3:	5e                   	pop    esi
c000ddd4:	5f                   	pop    edi
c000ddd5:	5d                   	pop    ebp
c000ddd6:	c3                   	ret    
c000ddd7:	90                   	nop

c000ddd8 <Video::putTGA(int, int, unsigned char*, int)>:
c000ddd8:	55                   	push   ebp
c000ddd9:	57                   	push   edi
c000ddda:	56                   	push   esi
c000dddb:	53                   	push   ebx
c000dddc:	83 ec 28             	sub    esp,0x28
c000dddf:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000dde3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dde7:	50                   	push   eax
c000dde8:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ddec:	50                   	push   eax
c000dded:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ddf1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ddf5:	56                   	push   esi
c000ddf6:	e8 75 fe ff ff       	call   c000dc70 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ddfb:	83 c4 20             	add    esp,0x20
c000ddfe:	85 c0                	test   eax,eax
c000de00:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000de04:	74 35                	je     c000de3b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000de06:	89 c7                	mov    edi,eax
c000de08:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000de0c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000de10:	39 d8                	cmp    eax,ebx
c000de12:	7e 27                	jle    c000de3b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000de14:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000de18:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de1c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000de20:	39 e8                	cmp    eax,ebp
c000de22:	7e 14                	jle    c000de38 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000de24:	8b 06                	mov    eax,DWORD PTR [esi]
c000de26:	83 c7 04             	add    edi,0x4
c000de29:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000de2c:	53                   	push   ebx
c000de2d:	55                   	push   ebp
c000de2e:	45                   	inc    ebp
c000de2f:	56                   	push   esi
c000de30:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000de33:	83 c4 10             	add    esp,0x10
c000de36:	eb e0                	jmp    c000de18 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000de38:	43                   	inc    ebx
c000de39:	eb cd                	jmp    c000de08 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000de3b:	83 c4 1c             	add    esp,0x1c
c000de3e:	5b                   	pop    ebx
c000de3f:	5e                   	pop    esi
c000de40:	5f                   	pop    edi
c000de41:	5d                   	pop    ebp
c000de42:	c3                   	ret    
c000de43:	90                   	nop

c000de44 <ACPI::close(int, int, void*)>:
c000de44:	83 ec 1c             	sub    esp,0x1c
c000de47:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000de4f:	74 0b                	je     c000de5c <ACPI::close(int, int, void*)+0x18>
c000de51:	b8 00 00 00 00       	mov    eax,0x0
c000de56:	e9 9d 00 00 00       	jmp    c000def8 <ACPI::close(int, int, void*)+0xb4>
c000de5b:	90                   	nop
c000de5c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000de61:	75 29                	jne    c000de8c <ACPI::close(int, int, void*)+0x48>
c000de63:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000de68:	85 c0                	test   eax,eax
c000de6a:	74 08                	je     c000de74 <ACPI::close(int, int, void*)+0x30>
c000de6c:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000de71:	ff d0                	call   eax
c000de73:	90                   	nop
c000de74:	83 ec 0c             	sub    esp,0xc
c000de77:	68 88 ff 01 c0       	push   0xc001ff88
c000de7c:	e8 46 25 00 00       	call   c00103c7 <KePanic(char const*)>
c000de81:	83 c4 10             	add    esp,0x10
c000de84:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000de89:	eb 6d                	jmp    c000def8 <ACPI::close(int, int, void*)+0xb4>
c000de8b:	90                   	nop
c000de8c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000de91:	75 5d                	jne    c000def0 <ACPI::close(int, int, void*)+0xac>
c000de93:	a1 a4 64 02 c0       	mov    eax,ds:0xc00264a4
c000de98:	85 c0                	test   eax,eax
c000de9a:	74 08                	je     c000dea4 <ACPI::close(int, int, void*)+0x60>
c000de9c:	a1 a4 64 02 c0       	mov    eax,ds:0xc00264a4
c000dea1:	ff d0                	call   eax
c000dea3:	90                   	nop
c000dea4:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000dea9:	8d 76 00             	lea    esi,[esi+0x0]
c000deac:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000deb0:	25 ff 00 00 00       	and    eax,0xff
c000deb5:	83 e0 02             	and    eax,0x2
c000deb8:	74 1e                	je     c000ded8 <ACPI::close(int, int, void*)+0x94>
c000deba:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000dec1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dec5:	89 c2                	mov    edx,eax
c000dec7:	ec                   	in     al,dx
c000dec8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000decc:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000ded0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ded4:	eb d6                	jmp    c000deac <ACPI::close(int, int, void*)+0x68>
c000ded6:	66 90                	xchg   ax,ax
c000ded8:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000dedf:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000dee4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000dee8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000deec:	ee                   	out    dx,al
c000deed:	8d 76 00             	lea    esi,[esi+0x0]
c000def0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000def5:	8d 76 00             	lea    esi,[esi+0x0]
c000def8:	83 c4 1c             	add    esp,0x1c
c000defb:	c3                   	ret    

c000defc <findRSDP()>:
c000defc:	83 ec 1c             	sub    esp,0x1c
c000deff:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000df04:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000df0a:	83 e0 04             	and    eax,0x4
c000df0d:	84 c0                	test   al,al
c000df0f:	75 07                	jne    c000df18 <findRSDP()+0x1c>
c000df11:	b8 00 00 00 00       	mov    eax,0x0
c000df16:	eb 70                	jmp    c000df88 <findRSDP()+0x8c>
c000df18:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c000df1d:	3d ff 07 00 00       	cmp    eax,0x7ff
c000df22:	7f 1c                	jg     c000df40 <findRSDP()+0x44>
c000df24:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000df29:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000df2f:	83 e2 fb             	and    edx,0xfffffffb
c000df32:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000df38:	b8 00 00 00 00       	mov    eax,0x0
c000df3d:	eb 49                	jmp    c000df88 <findRSDP()+0x8c>
c000df3f:	90                   	nop
c000df40:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000df48:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000df50:	77 2e                	ja     c000df80 <findRSDP()+0x84>
c000df52:	83 ec 04             	sub    esp,0x4
c000df55:	6a 08                	push   0x8
c000df57:	68 23 00 02 c0       	push   0xc0020023
c000df5c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000df60:	e8 1b 24 ff ff       	call   c0000380 <memcmp>
c000df65:	83 c4 10             	add    esp,0x10
c000df68:	85 c0                	test   eax,eax
c000df6a:	0f 94 c0             	sete   al
c000df6d:	84 c0                	test   al,al
c000df6f:	74 07                	je     c000df78 <findRSDP()+0x7c>
c000df71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df75:	eb 11                	jmp    c000df88 <findRSDP()+0x8c>
c000df77:	90                   	nop
c000df78:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000df7d:	eb c9                	jmp    c000df48 <findRSDP()+0x4c>
c000df7f:	90                   	nop
c000df80:	b8 00 00 00 00       	mov    eax,0x0
c000df85:	8d 76 00             	lea    esi,[esi+0x0]
c000df88:	83 c4 1c             	add    esp,0x1c
c000df8b:	c3                   	ret    

c000df8c <loadACPITables(unsigned char*)>:
c000df8c:	57                   	push   edi
c000df8d:	56                   	push   esi
c000df8e:	53                   	push   ebx
c000df8f:	83 ec 60             	sub    esp,0x60
c000df92:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000df97:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000df9d:	83 e0 04             	and    eax,0x4
c000dfa0:	84 c0                	test   al,al
c000dfa2:	0f 84 3c 02 00 00    	je     c000e1e4 <loadACPITables(unsigned char*)+0x258>
c000dfa8:	a0 c0 66 02 c0       	mov    al,ds:0xc00266c0
c000dfad:	84 c0                	test   al,al
c000dfaf:	74 77                	je     c000e028 <loadACPITables(unsigned char*)+0x9c>
c000dfb1:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dfb5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000dfb9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dfbd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dfc0:	83 e8 24             	sub    eax,0x24
c000dfc3:	c1 e8 03             	shr    eax,0x3
c000dfc6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000dfca:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000dfd2:	66 90                	xchg   ax,ax
c000dfd4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dfd8:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000dfdc:	0f 8d b6 00 00 00    	jge    c000e098 <loadACPITables(unsigned char*)+0x10c>
c000dfe2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dfe6:	83 c0 24             	add    eax,0x24
c000dfe9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dfed:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dff1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000dff5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dff9:	c1 e0 03             	shl    eax,0x3
c000dffc:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e000:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e004:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e007:	8b 00                	mov    eax,DWORD PTR [eax]
c000e009:	89 c1                	mov    ecx,eax
c000e00b:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000e010:	8d 50 01             	lea    edx,[eax+0x1]
c000e013:	89 15 ac 64 02 c0    	mov    DWORD PTR ds:0xc00264ac,edx
c000e019:	89 ca                	mov    edx,ecx
c000e01b:	89 14 c5 c4 64 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9b3c],edx
c000e022:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000e026:	eb ac                	jmp    c000dfd4 <loadACPITables(unsigned char*)+0x48>
c000e028:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e02c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e030:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e037:	83 e8 24             	sub    eax,0x24
c000e03a:	c1 e8 02             	shr    eax,0x2
c000e03d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e041:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e049:	8d 76 00             	lea    esi,[esi+0x0]
c000e04c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e050:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e054:	7d 42                	jge    c000e098 <loadACPITables(unsigned char*)+0x10c>
c000e056:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e05a:	83 c0 24             	add    eax,0x24
c000e05d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e061:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e065:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e069:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e06d:	c1 e0 02             	shl    eax,0x2
c000e070:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e074:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e078:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e07a:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000e07f:	8d 50 01             	lea    edx,[eax+0x1]
c000e082:	89 15 ac 64 02 c0    	mov    DWORD PTR ds:0xc00264ac,edx
c000e088:	89 ca                	mov    edx,ecx
c000e08a:	89 14 c5 c4 64 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9b3c],edx
c000e091:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000e095:	eb b5                	jmp    c000e04c <loadACPITables(unsigned char*)+0xc0>
c000e097:	90                   	nop
c000e098:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e0a0:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000e0a5:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e0a9:	0f 8d 39 01 00 00    	jge    c000e1e8 <loadACPITables(unsigned char*)+0x25c>
c000e0af:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e0b3:	8b 04 c5 c4 64 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd9b3c]
c000e0ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e0be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e0c2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e0c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e0ca:	25 ff 0f 00 00       	and    eax,0xfff
c000e0cf:	89 c6                	mov    esi,eax
c000e0d1:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e0d7:	83 ec 0c             	sub    esp,0xc
c000e0da:	6a 01                	push   0x1
c000e0dc:	e8 68 b2 ff ff       	call   c0009349 <Virt::allocateKernelVirtualPages(int)>
c000e0e1:	83 c4 10             	add    esp,0x10
c000e0e4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e0e8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e0ee:	83 ec 0c             	sub    esp,0xc
c000e0f1:	6a 01                	push   0x1
c000e0f3:	6a 01                	push   0x1
c000e0f5:	50                   	push   eax
c000e0f6:	52                   	push   edx
c000e0f7:	53                   	push   ebx
c000e0f8:	e8 09 bc ff ff       	call   c0009d06 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e0fd:	83 c4 20             	add    esp,0x20
c000e100:	09 f0                	or     eax,esi
c000e102:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e106:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e10a:	c1 e0 03             	shl    eax,0x3
c000e10d:	05 c0 64 02 c0       	add    eax,0xc00264c0
c000e112:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e116:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e11a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e11e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e126:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e12a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e12e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e132:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e136:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e13a:	89 c6                	mov    esi,eax
c000e13c:	89 d7                	mov    edi,edx
c000e13e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e140:	89 c8                	mov    eax,ecx
c000e142:	89 fa                	mov    edx,edi
c000e144:	89 f3                	mov    ebx,esi
c000e146:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e14a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e14e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e152:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e156:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e159:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e15d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e161:	05 00 10 00 00       	add    eax,0x1000
c000e166:	c1 e8 0c             	shr    eax,0xc
c000e169:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e16d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e171:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e175:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e179:	25 ff 0f 00 00       	and    eax,0xfff
c000e17e:	89 c6                	mov    esi,eax
c000e180:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e186:	83 ec 0c             	sub    esp,0xc
c000e189:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e18d:	e8 b7 b1 ff ff       	call   c0009349 <Virt::allocateKernelVirtualPages(int)>
c000e192:	83 c4 10             	add    esp,0x10
c000e195:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e199:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e19f:	83 ec 0c             	sub    esp,0xc
c000e1a2:	6a 01                	push   0x1
c000e1a4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e1a8:	50                   	push   eax
c000e1a9:	52                   	push   edx
c000e1aa:	53                   	push   ebx
c000e1ab:	e8 56 bb ff ff       	call   c0009d06 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e1b0:	83 c4 20             	add    esp,0x20
c000e1b3:	09 f0                	or     eax,esi
c000e1b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e1b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1bd:	83 ec 0c             	sub    esp,0xc
c000e1c0:	50                   	push   eax
c000e1c1:	e8 77 b4 ff ff       	call   c000963d <Virt::freeKernelVirtualPages(unsigned long)>
c000e1c6:	83 c4 10             	add    esp,0x10
c000e1c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e1cd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e1d1:	89 14 c5 c4 64 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9b3c],edx
c000e1d8:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000e1dc:	e9 bf fe ff ff       	jmp    c000e0a0 <loadACPITables(unsigned char*)+0x114>
c000e1e1:	8d 76 00             	lea    esi,[esi+0x0]
c000e1e4:	90                   	nop
c000e1e5:	8d 76 00             	lea    esi,[esi+0x0]
c000e1e8:	83 c4 60             	add    esp,0x60
c000e1eb:	5b                   	pop    ebx
c000e1ec:	5e                   	pop    esi
c000e1ed:	5f                   	pop    edi
c000e1ee:	c3                   	ret    
c000e1ef:	90                   	nop

c000e1f0 <findRSDT(unsigned char*)>:
c000e1f0:	57                   	push   edi
c000e1f1:	56                   	push   esi
c000e1f2:	53                   	push   ebx
c000e1f3:	83 ec 50             	sub    esp,0x50
c000e1f6:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e1fb:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e201:	83 e0 04             	and    eax,0x4
c000e204:	84 c0                	test   al,al
c000e206:	75 0c                	jne    c000e214 <findRSDT(unsigned char*)+0x24>
c000e208:	b8 00 00 00 00       	mov    eax,0x0
c000e20d:	e9 26 01 00 00       	jmp    c000e338 <findRSDT(unsigned char*)+0x148>
c000e212:	66 90                	xchg   ax,ax
c000e214:	89 e0                	mov    eax,esp
c000e216:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e21a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e21e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e222:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e22a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e22e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e232:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e236:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e23a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e23e:	89 c6                	mov    esi,eax
c000e240:	89 d7                	mov    edi,edx
c000e242:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e244:	89 c8                	mov    eax,ecx
c000e246:	89 fa                	mov    edx,edi
c000e248:	89 f3                	mov    ebx,esi
c000e24a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e24e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e252:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e256:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e25a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e25e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e266:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e26a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e26e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e276:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e27a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e27e:	25 ff 0f 00 00       	and    eax,0xfff
c000e283:	89 c6                	mov    esi,eax
c000e285:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e28b:	83 ec 0c             	sub    esp,0xc
c000e28e:	6a 02                	push   0x2
c000e290:	e8 b4 b0 ff ff       	call   c0009349 <Virt::allocateKernelVirtualPages(int)>
c000e295:	83 c4 10             	add    esp,0x10
c000e298:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e29c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e2a2:	83 ec 0c             	sub    esp,0xc
c000e2a5:	6a 01                	push   0x1
c000e2a7:	6a 02                	push   0x2
c000e2a9:	50                   	push   eax
c000e2aa:	52                   	push   edx
c000e2ab:	53                   	push   ebx
c000e2ac:	e8 55 ba ff ff       	call   c0009d06 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e2b1:	83 c4 20             	add    esp,0x20
c000e2b4:	09 f0                	or     eax,esi
c000e2b6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e2ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e2be:	25 ff 0f 00 00       	and    eax,0xfff
c000e2c3:	89 c6                	mov    esi,eax
c000e2c5:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e2cb:	83 ec 0c             	sub    esp,0xc
c000e2ce:	6a 02                	push   0x2
c000e2d0:	e8 74 b0 ff ff       	call   c0009349 <Virt::allocateKernelVirtualPages(int)>
c000e2d5:	83 c4 10             	add    esp,0x10
c000e2d8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e2dc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e2e2:	83 ec 0c             	sub    esp,0xc
c000e2e5:	6a 01                	push   0x1
c000e2e7:	6a 02                	push   0x2
c000e2e9:	50                   	push   eax
c000e2ea:	52                   	push   edx
c000e2eb:	53                   	push   ebx
c000e2ec:	e8 15 ba ff ff       	call   c0009d06 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e2f1:	83 c4 20             	add    esp,0x20
c000e2f4:	09 f0                	or     eax,esi
c000e2f6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e2fa:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e2ff:	75 13                	jne    c000e314 <findRSDT(unsigned char*)+0x124>
c000e301:	c6 05 c0 66 02 c0 00 	mov    BYTE PTR ds:0xc00266c0,0x0
c000e308:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e30c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e310:	eb 22                	jmp    c000e334 <findRSDT(unsigned char*)+0x144>
c000e312:	66 90                	xchg   ax,ax
c000e314:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e319:	75 11                	jne    c000e32c <findRSDT(unsigned char*)+0x13c>
c000e31b:	c6 05 c0 66 02 c0 01 	mov    BYTE PTR ds:0xc00266c0,0x1
c000e322:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e326:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e32a:	eb 08                	jmp    c000e334 <findRSDT(unsigned char*)+0x144>
c000e32c:	b8 00 00 00 00       	mov    eax,0x0
c000e331:	eb 05                	jmp    c000e338 <findRSDT(unsigned char*)+0x148>
c000e333:	90                   	nop
c000e334:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e338:	83 c4 50             	add    esp,0x50
c000e33b:	5b                   	pop    ebx
c000e33c:	5e                   	pop    esi
c000e33d:	5f                   	pop    edi
c000e33e:	c3                   	ret    
c000e33f:	90                   	nop

c000e340 <findDataTable(unsigned char*, char*)>:
c000e340:	83 ec 1c             	sub    esp,0x1c
c000e343:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e348:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e34e:	83 e0 04             	and    eax,0x4
c000e351:	84 c0                	test   al,al
c000e353:	75 07                	jne    c000e35c <findDataTable(unsigned char*, char*)+0x1c>
c000e355:	b8 00 00 00 00       	mov    eax,0x0
c000e35a:	eb 58                	jmp    c000e3b4 <findDataTable(unsigned char*, char*)+0x74>
c000e35c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e364:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000e369:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e36d:	7d 3d                	jge    c000e3ac <findDataTable(unsigned char*, char*)+0x6c>
c000e36f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e373:	c1 e0 03             	shl    eax,0x3
c000e376:	05 c0 64 02 c0       	add    eax,0xc00264c0
c000e37b:	83 ec 04             	sub    esp,0x4
c000e37e:	6a 04                	push   0x4
c000e380:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e384:	50                   	push   eax
c000e385:	e8 f6 1f ff ff       	call   c0000380 <memcmp>
c000e38a:	83 c4 10             	add    esp,0x10
c000e38d:	85 c0                	test   eax,eax
c000e38f:	0f 94 c0             	sete   al
c000e392:	84 c0                	test   al,al
c000e394:	74 0e                	je     c000e3a4 <findDataTable(unsigned char*, char*)+0x64>
c000e396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e39a:	8b 04 c5 c4 64 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd9b3c]
c000e3a1:	eb 11                	jmp    c000e3b4 <findDataTable(unsigned char*, char*)+0x74>
c000e3a3:	90                   	nop
c000e3a4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e3a8:	eb ba                	jmp    c000e364 <findDataTable(unsigned char*, char*)+0x24>
c000e3aa:	66 90                	xchg   ax,ax
c000e3ac:	b8 00 00 00 00       	mov    eax,0x0
c000e3b1:	8d 76 00             	lea    esi,[esi+0x0]
c000e3b4:	83 c4 1c             	add    esp,0x1c
c000e3b7:	c3                   	ret    

c000e3b8 <scanMADT()>:
c000e3b8:	53                   	push   ebx
c000e3b9:	83 ec 38             	sub    esp,0x38
c000e3bc:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c000e3c1:	25 00 04 00 00       	and    eax,0x400
c000e3c6:	74 14                	je     c000e3dc <scanMADT()+0x24>
c000e3c8:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e3cd:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e3d3:	83 e2 fb             	and    edx,0xfffffffb
c000e3d6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e3dc:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e3e1:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e3e7:	83 e0 04             	and    eax,0x4
c000e3ea:	84 c0                	test   al,al
c000e3ec:	0f 84 8a 04 00 00    	je     c000e87c <scanMADT()+0x4c4>
c000e3f2:	e8 05 fb ff ff       	call   c000defc <findRSDP()>
c000e3f7:	a3 cc 66 02 c0       	mov    ds:0xc00266cc,eax
c000e3fc:	a1 cc 66 02 c0       	mov    eax,ds:0xc00266cc
c000e401:	85 c0                	test   eax,eax
c000e403:	75 1b                	jne    c000e420 <scanMADT()+0x68>
c000e405:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e40a:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e410:	83 e2 fb             	and    edx,0xfffffffb
c000e413:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e419:	e9 66 04 00 00       	jmp    c000e884 <scanMADT()+0x4cc>
c000e41e:	66 90                	xchg   ax,ax
c000e420:	a1 cc 66 02 c0       	mov    eax,ds:0xc00266cc
c000e425:	83 ec 0c             	sub    esp,0xc
c000e428:	50                   	push   eax
c000e429:	e8 c2 fd ff ff       	call   c000e1f0 <findRSDT(unsigned char*)>
c000e42e:	83 c4 10             	add    esp,0x10
c000e431:	a3 c8 66 02 c0       	mov    ds:0xc00266c8,eax
c000e436:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000e43b:	85 c0                	test   eax,eax
c000e43d:	75 19                	jne    c000e458 <scanMADT()+0xa0>
c000e43f:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e444:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e44a:	83 e2 fb             	and    edx,0xfffffffb
c000e44d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e453:	e9 2c 04 00 00       	jmp    c000e884 <scanMADT()+0x4cc>
c000e458:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000e45d:	83 ec 0c             	sub    esp,0xc
c000e460:	50                   	push   eax
c000e461:	e8 26 fb ff ff       	call   c000df8c <loadACPITables(unsigned char*)>
c000e466:	83 c4 10             	add    esp,0x10
c000e469:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000e46e:	83 ec 08             	sub    esp,0x8
c000e471:	68 2c 00 02 c0       	push   0xc002002c
c000e476:	50                   	push   eax
c000e477:	e8 c4 fe ff ff       	call   c000e340 <findDataTable(unsigned char*, char*)>
c000e47c:	83 c4 10             	add    esp,0x10
c000e47f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e483:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e488:	75 1a                	jne    c000e4a4 <scanMADT()+0xec>
c000e48a:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e48f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e495:	83 e2 fe             	and    edx,0xfffffffe
c000e498:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e49e:	e9 e1 03 00 00       	jmp    c000e884 <scanMADT()+0x4cc>
c000e4a3:	90                   	nop
c000e4a4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e4ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e4b3:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e4b7:	0f 87 c7 03 00 00    	ja     c000e884 <scanMADT()+0x4cc>
c000e4bd:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e4c5:	0f 87 b9 03 00 00    	ja     c000e884 <scanMADT()+0x4cc>
c000e4cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4cf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e4d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4d7:	8d 50 01             	lea    edx,[eax+0x1]
c000e4da:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e4de:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4e2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e4e6:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e4ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4ee:	8d 50 01             	lea    edx,[eax+0x1]
c000e4f1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e4f5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4f9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e4fd:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e501:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e506:	0f 86 74 03 00 00    	jbe    c000e880 <scanMADT()+0x4c8>
c000e50c:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e511:	75 5d                	jne    c000e570 <scanMADT()+0x1b8>
c000e513:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e517:	8d 50 01             	lea    edx,[eax+0x1]
c000e51a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e51e:	8a 15 c0 68 02 c0    	mov    dl,BYTE PTR ds:0xc00268c0
c000e524:	81 e2 ff 00 00 00    	and    edx,0xff
c000e52a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e52e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e532:	88 82 00 69 02 c0    	mov    BYTE PTR [edx-0x3ffd9700],al
c000e538:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e53c:	8d 42 01             	lea    eax,[edx+0x1]
c000e53f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e543:	a0 c0 68 02 c0       	mov    al,ds:0xc00268c0
c000e548:	8d 48 01             	lea    ecx,[eax+0x1]
c000e54b:	88 0d c0 68 02 c0    	mov    BYTE PTR ds:0xc00268c0,cl
c000e551:	25 ff 00 00 00       	and    eax,0xff
c000e556:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e55a:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e55e:	88 90 e0 68 02 c0    	mov    BYTE PTR [eax-0x3ffd9720],dl
c000e564:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e569:	e9 f6 02 00 00       	jmp    c000e864 <scanMADT()+0x4ac>
c000e56e:	66 90                	xchg   ax,ax
c000e570:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e575:	0f 85 29 01 00 00    	jne    c000e6a4 <scanMADT()+0x2ec>
c000e57b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e57f:	8d 50 01             	lea    edx,[eax+0x1]
c000e582:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e586:	8a 15 80 67 02 c0    	mov    dl,BYTE PTR ds:0xc0026780
c000e58c:	81 e2 ff 00 00 00    	and    edx,0xff
c000e592:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e596:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e59a:	88 82 a0 67 02 c0    	mov    BYTE PTR [edx-0x3ffd9860],al
c000e5a0:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e5a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5a8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5ac:	01 d0                	add    eax,edx
c000e5ae:	83 c0 2c             	add    eax,0x2c
c000e5b1:	8a 00                	mov    al,BYTE PTR [eax]
c000e5b3:	31 d2                	xor    edx,edx
c000e5b5:	88 c2                	mov    dl,al
c000e5b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5bb:	8d 48 01             	lea    ecx,[eax+0x1]
c000e5be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5c2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e5c6:	25 ff 00 00 00       	and    eax,0xff
c000e5cb:	c1 e0 08             	shl    eax,0x8
c000e5ce:	89 d1                	mov    ecx,edx
c000e5d0:	09 c1                	or     ecx,eax
c000e5d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5d6:	8d 50 02             	lea    edx,[eax+0x2]
c000e5d9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5dd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e5e1:	25 ff 00 00 00       	and    eax,0xff
c000e5e6:	c1 e0 10             	shl    eax,0x10
c000e5e9:	09 c1                	or     ecx,eax
c000e5eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5ef:	8d 50 03             	lea    edx,[eax+0x3]
c000e5f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5f6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e5fa:	25 ff 00 00 00       	and    eax,0xff
c000e5ff:	c1 e0 18             	shl    eax,0x18
c000e602:	09 c1                	or     ecx,eax
c000e604:	89 ca                	mov    edx,ecx
c000e606:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c000e60b:	25 ff 00 00 00       	and    eax,0xff
c000e610:	89 14 85 c0 67 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9840],edx
c000e617:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e61c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e620:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e624:	01 d0                	add    eax,edx
c000e626:	83 c0 2c             	add    eax,0x2c
c000e629:	8a 00                	mov    al,BYTE PTR [eax]
c000e62b:	31 d2                	xor    edx,edx
c000e62d:	88 c2                	mov    dl,al
c000e62f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e633:	8d 48 01             	lea    ecx,[eax+0x1]
c000e636:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e63a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e63e:	25 ff 00 00 00       	and    eax,0xff
c000e643:	c1 e0 08             	shl    eax,0x8
c000e646:	89 d1                	mov    ecx,edx
c000e648:	09 c1                	or     ecx,eax
c000e64a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e64e:	8d 50 02             	lea    edx,[eax+0x2]
c000e651:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e655:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e659:	25 ff 00 00 00       	and    eax,0xff
c000e65e:	c1 e0 10             	shl    eax,0x10
c000e661:	09 c1                	or     ecx,eax
c000e663:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e667:	8d 50 03             	lea    edx,[eax+0x3]
c000e66a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e66e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e672:	25 ff 00 00 00       	and    eax,0xff
c000e677:	c1 e0 18             	shl    eax,0x18
c000e67a:	09 c1                	or     ecx,eax
c000e67c:	89 ca                	mov    edx,ecx
c000e67e:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c000e683:	25 ff 00 00 00       	and    eax,0xff
c000e688:	89 14 85 40 68 02 c0 	mov    DWORD PTR [eax*4-0x3ffd97c0],edx
c000e68f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e694:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c000e699:	40                   	inc    eax
c000e69a:	a2 80 67 02 c0       	mov    ds:0xc0026780,al
c000e69f:	e9 c0 01 00 00       	jmp    c000e864 <scanMADT()+0x4ac>
c000e6a4:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e6a9:	0f 85 fd 00 00 00    	jne    c000e7ac <scanMADT()+0x3f4>
c000e6af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6b3:	8d 50 01             	lea    edx,[eax+0x1]
c000e6b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e6ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6be:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e6c2:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e6c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6ca:	8d 50 01             	lea    edx,[eax+0x1]
c000e6cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e6d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6d5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e6d9:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e6dd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6e1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6e5:	01 d0                	add    eax,edx
c000e6e7:	83 c0 2c             	add    eax,0x2c
c000e6ea:	8a 00                	mov    al,BYTE PTR [eax]
c000e6ec:	31 d2                	xor    edx,edx
c000e6ee:	88 c2                	mov    dl,al
c000e6f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6f4:	8d 48 01             	lea    ecx,[eax+0x1]
c000e6f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e6fb:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e6ff:	25 ff 00 00 00       	and    eax,0xff
c000e704:	c1 e0 08             	shl    eax,0x8
c000e707:	89 d1                	mov    ecx,edx
c000e709:	09 c1                	or     ecx,eax
c000e70b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e70f:	8d 50 02             	lea    edx,[eax+0x2]
c000e712:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e716:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e71a:	25 ff 00 00 00       	and    eax,0xff
c000e71f:	c1 e0 10             	shl    eax,0x10
c000e722:	09 c1                	or     ecx,eax
c000e724:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e728:	8d 50 03             	lea    edx,[eax+0x3]
c000e72b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e72f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e733:	25 ff 00 00 00       	and    eax,0xff
c000e738:	c1 e0 18             	shl    eax,0x18
c000e73b:	09 c8                	or     eax,ecx
c000e73d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e741:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e746:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e74a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e74e:	01 d0                	add    eax,edx
c000e750:	83 c0 2c             	add    eax,0x2c
c000e753:	8a 00                	mov    al,BYTE PTR [eax]
c000e755:	25 ff 00 00 00       	and    eax,0xff
c000e75a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e75e:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e761:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e765:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e769:	81 e2 ff 00 00 00    	and    edx,0xff
c000e76f:	c1 e2 08             	shl    edx,0x8
c000e772:	09 d0                	or     eax,edx
c000e774:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e779:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e77e:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e782:	25 ff 00 00 00       	and    eax,0xff
c000e787:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e78b:	88 90 60 16 02 c0    	mov    BYTE PTR [eax-0x3ffde9a0],dl
c000e791:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e795:	31 d2                	xor    edx,edx
c000e797:	88 c2                	mov    dl,al
c000e799:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e79e:	66 89 84 12 60 67 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd98a0],ax
c000e7a6:	e9 b9 00 00 00       	jmp    c000e864 <scanMADT()+0x4ac>
c000e7ab:	90                   	nop
c000e7ac:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e7b1:	0f 85 a1 00 00 00    	jne    c000e858 <scanMADT()+0x4a0>
c000e7b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e7bb:	8d 50 01             	lea    edx,[eax+0x1]
c000e7be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e7c2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e7c6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e7ca:	25 ff 00 00 00       	and    eax,0xff
c000e7cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e7d3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e7d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e7db:	01 d0                	add    eax,edx
c000e7dd:	83 c0 2c             	add    eax,0x2c
c000e7e0:	8a 00                	mov    al,BYTE PTR [eax]
c000e7e2:	31 d2                	xor    edx,edx
c000e7e4:	88 c2                	mov    dl,al
c000e7e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e7ea:	8d 48 01             	lea    ecx,[eax+0x1]
c000e7ed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e7f1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e7f5:	25 ff 00 00 00       	and    eax,0xff
c000e7fa:	c1 e0 08             	shl    eax,0x8
c000e7fd:	09 d0                	or     eax,edx
c000e7ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e803:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e808:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e80c:	8d 50 01             	lea    edx,[eax+0x1]
c000e80f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e813:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e817:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e81b:	25 ff 00 00 00       	and    eax,0xff
c000e820:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e828:	c1 e0 08             	shl    eax,0x8
c000e82b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e82f:	89 c1                	mov    ecx,eax
c000e831:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e835:	c1 e0 18             	shl    eax,0x18
c000e838:	89 c3                	mov    ebx,eax
c000e83a:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c000e83f:	8d 50 01             	lea    edx,[eax+0x1]
c000e842:	89 15 d0 66 02 c0    	mov    DWORD PTR ds:0xc00266d0,edx
c000e848:	09 d9                	or     ecx,ebx
c000e84a:	89 ca                	mov    edx,ecx
c000e84c:	89 14 85 e0 66 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9920],edx
c000e853:	eb 0f                	jmp    c000e864 <scanMADT()+0x4ac>
c000e855:	8d 76 00             	lea    esi,[esi+0x0]
c000e858:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e85d:	75 05                	jne    c000e864 <scanMADT()+0x4ac>
c000e85f:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e864:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e868:	31 d2                	xor    edx,edx
c000e86a:	88 c2                	mov    dl,al
c000e86c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e870:	01 d0                	add    eax,edx
c000e872:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e876:	e9 31 fc ff ff       	jmp    c000e4ac <scanMADT()+0xf4>
c000e87b:	90                   	nop
c000e87c:	90                   	nop
c000e87d:	eb 05                	jmp    c000e884 <scanMADT()+0x4cc>
c000e87f:	90                   	nop
c000e880:	90                   	nop
c000e881:	8d 76 00             	lea    esi,[esi+0x0]
c000e884:	83 c4 38             	add    esp,0x38
c000e887:	5b                   	pop    ebx
c000e888:	c3                   	ret    
c000e889:	90                   	nop
c000e88a:	66 90                	xchg   ax,ax

c000e88c <ACPI::ACPI()>:
c000e88c:	83 ec 0c             	sub    esp,0xc
c000e88f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e893:	83 ec 08             	sub    esp,0x8
c000e896:	68 31 00 02 c0       	push   0xc0020031
c000e89b:	50                   	push   eax
c000e89c:	e8 3b d3 ff ff       	call   c000bbdc <Device::Device(char const*)>
c000e8a1:	83 c4 10             	add    esp,0x10
c000e8a4:	ba 68 01 02 c0       	mov    edx,0xc0020168
c000e8a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ad:	89 10                	mov    DWORD PTR [eax],edx
c000e8af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e8ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8be:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e8c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cc:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e8d6:	e8 dd fa ff ff       	call   c000e3b8 <scanMADT()>
c000e8db:	90                   	nop
c000e8dc:	83 c4 0c             	add    esp,0xc
c000e8df:	c3                   	ret    

c000e8e0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e8e0:	83 ec 2c             	sub    esp,0x2c
c000e8e3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e8e7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e8eb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e8ef:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e8f3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e8f8:	88 d0                	mov    al,dl
c000e8fa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e8fe:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e903:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e90b:	90                   	nop
c000e90c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e910:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e916:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e91a:	0f 8d 9c 00 00 00    	jge    c000e9bc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e920:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e924:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e928:	83 c2 2a             	add    edx,0x2a
c000e92b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e92f:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e934:	75 7a                	jne    c000e9b0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e936:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e93a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e93e:	83 c2 2a             	add    edx,0x2a
c000e941:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e945:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e949:	75 65                	jne    c000e9b0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e94b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e950:	74 3a                	je     c000e98c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e952:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e956:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e95a:	83 c2 2a             	add    edx,0x2a
c000e95d:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e961:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e965:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e968:	39 c2                	cmp    edx,eax
c000e96a:	74 10                	je     c000e97c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e96c:	83 ec 0c             	sub    esp,0xc
c000e96f:	68 ac ff 01 c0       	push   0xc001ffac
c000e974:	e8 4e 1a 00 00       	call   c00103c7 <KePanic(char const*)>
c000e979:	83 c4 10             	add    esp,0x10
c000e97c:	83 ec 0c             	sub    esp,0xc
c000e97f:	68 36 00 02 c0       	push   0xc0020036
c000e984:	e8 3e 1a 00 00       	call   c00103c7 <KePanic(char const*)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e990:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e994:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e998:	83 c2 2a             	add    edx,0x2a
c000e99b:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e99f:	8b 02                	mov    eax,DWORD PTR [edx]
c000e9a1:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e9a4:	89 01                	mov    DWORD PTR [ecx],eax
c000e9a6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e9a9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e9ae:	66 90                	xchg   ax,ax
c000e9b0:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e9b4:	e9 53 ff ff ff       	jmp    c000e90c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e9b9:	8d 76 00             	lea    esi,[esi+0x0]
c000e9bc:	90                   	nop
c000e9bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9c1:	83 c4 2c             	add    esp,0x2c
c000e9c4:	c2 04 00             	ret    0x4
c000e9c7:	90                   	nop

c000e9c8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e9c8:	83 ec 1c             	sub    esp,0x1c
c000e9cb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e9cf:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e9d3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e9d7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e9dc:	88 c8                	mov    al,cl
c000e9de:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e9e2:	88 d0                	mov    al,dl
c000e9e4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e9e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e9ec:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e9f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e9f6:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e9f9:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000e9fd:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000ea01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea05:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ea0b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ea0f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000ea12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea16:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000ea1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea1f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ea25:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000ea29:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea30:	83 c2 2a             	add    edx,0x2a
c000ea33:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000ea37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea3b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ea41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea45:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ea48:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ea4c:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ea50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea54:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ea5a:	8d 50 01             	lea    edx,[eax+0x1]
c000ea5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea61:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ea67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea6b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ea71:	3d 00 02 00 00       	cmp    eax,0x200
c000ea76:	75 10                	jne    c000ea88 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000ea78:	83 ec 0c             	sub    esp,0xc
c000ea7b:	68 45 00 02 c0       	push   0xc0020045
c000ea80:	e8 42 19 00 00       	call   c00103c7 <KePanic(char const*)>
c000ea85:	83 c4 10             	add    esp,0x10
c000ea88:	90                   	nop
c000ea89:	83 c4 1c             	add    esp,0x1c
c000ea8c:	c3                   	ret    
c000ea8d:	90                   	nop
c000ea8e:	66 90                	xchg   ax,ax

c000ea90 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ea90:	b8 00 00 00 00       	mov    eax,0x0
c000ea95:	c3                   	ret    
c000ea96:	66 90                	xchg   ax,ax

c000ea98 <ACPI::detectPCI()>:
c000ea98:	53                   	push   ebx
c000ea99:	83 ec 28             	sub    esp,0x28
c000ea9c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000eaa1:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000eaa6:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000eaab:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eab1:	83 e0 04             	and    eax,0x4
c000eab4:	84 c0                	test   al,al
c000eab6:	74 2c                	je     c000eae4 <ACPI::detectPCI()+0x4c>
c000eab8:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000eabd:	83 ec 08             	sub    esp,0x8
c000eac0:	68 62 00 02 c0       	push   0xc0020062
c000eac5:	50                   	push   eax
c000eac6:	e8 75 f8 ff ff       	call   c000e340 <findDataTable(unsigned char*, char*)>
c000eacb:	83 c4 10             	add    esp,0x10
c000eace:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ead2:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ead7:	74 0b                	je     c000eae4 <ACPI::detectPCI()+0x4c>
c000ead9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eade:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000eae3:	90                   	nop
c000eae4:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000eaec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eaf0:	8a 00                	mov    al,BYTE PTR [eax]
c000eaf2:	3c 01                	cmp    al,0x1
c000eaf4:	75 0e                	jne    c000eb04 <ACPI::detectPCI()+0x6c>
c000eaf6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eafb:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000eb00:	eb 2a                	jmp    c000eb2c <ACPI::detectPCI()+0x94>
c000eb02:	66 90                	xchg   ax,ax
c000eb04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eb08:	8a 00                	mov    al,BYTE PTR [eax]
c000eb0a:	3c 02                	cmp    al,0x2
c000eb0c:	75 1e                	jne    c000eb2c <ACPI::detectPCI()+0x94>
c000eb0e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eb13:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000eb18:	74 12                	je     c000eb2c <ACPI::detectPCI()+0x94>
c000eb1a:	83 ec 0c             	sub    esp,0xc
c000eb1d:	68 dc ff 01 c0       	push   0xc001ffdc
c000eb22:	e8 a0 18 00 00       	call   c00103c7 <KePanic(char const*)>
c000eb27:	83 c4 10             	add    esp,0x10
c000eb2a:	66 90                	xchg   ax,ax
c000eb2c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000eb30:	83 f0 01             	xor    eax,0x1
c000eb33:	84 c0                	test   al,al
c000eb35:	74 41                	je     c000eb78 <ACPI::detectPCI()+0xe0>
c000eb37:	e8 f4 15 ff ff       	call   c0000130 <manualPCIProbe>
c000eb3c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eb40:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000eb45:	75 0d                	jne    c000eb54 <ACPI::detectPCI()+0xbc>
c000eb47:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eb4c:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000eb51:	eb 25                	jmp    c000eb78 <ACPI::detectPCI()+0xe0>
c000eb53:	90                   	nop
c000eb54:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000eb59:	75 1d                	jne    c000eb78 <ACPI::detectPCI()+0xe0>
c000eb5b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eb60:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000eb65:	74 11                	je     c000eb78 <ACPI::detectPCI()+0xe0>
c000eb67:	83 ec 0c             	sub    esp,0xc
c000eb6a:	68 dc ff 01 c0       	push   0xc001ffdc
c000eb6f:	e8 53 18 00 00       	call   c00103c7 <KePanic(char const*)>
c000eb74:	83 c4 10             	add    esp,0x10
c000eb77:	90                   	nop
c000eb78:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000eb7d:	0f 84 85 00 00 00    	je     c000ec08 <ACPI::detectPCI()+0x170>
c000eb83:	83 ec 0c             	sub    esp,0xc
c000eb86:	68 67 00 02 c0       	push   0xc0020067
c000eb8b:	e8 bf 11 00 00       	call   c000fd4f <KeSetBootMessage(char const*)>
c000eb90:	83 c4 10             	add    esp,0x10
c000eb93:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000eb9b:	83 ec 0c             	sub    esp,0xc
c000eb9e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000eba2:	e8 be 8c ff ff       	call   c0007865 <malloc>
c000eba7:	83 c4 10             	add    esp,0x10
c000ebaa:	89 c3                	mov    ebx,eax
c000ebac:	83 ec 0c             	sub    esp,0xc
c000ebaf:	53                   	push   ebx
c000ebb0:	e8 c9 ac 00 00       	call   c001987e <PCI::PCI()>
c000ebb5:	83 c4 10             	add    esp,0x10
c000ebb8:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ebbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ebc0:	83 ec 08             	sub    esp,0x8
c000ebc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ebc7:	50                   	push   eax
c000ebc8:	e8 77 ce ff ff       	call   c000ba44 <Device::addChild(Device*)>
c000ebcd:	83 c4 10             	add    esp,0x10
c000ebd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ebd4:	8b 00                	mov    eax,DWORD PTR [eax]
c000ebd6:	83 c0 08             	add    eax,0x8
c000ebd9:	8b 00                	mov    eax,DWORD PTR [eax]
c000ebdb:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ebe0:	74 0a                	je     c000ebec <ACPI::detectPCI()+0x154>
c000ebe2:	ba 01 00 00 00       	mov    edx,0x1
c000ebe7:	eb 0b                	jmp    c000ebf4 <ACPI::detectPCI()+0x15c>
c000ebe9:	8d 76 00             	lea    esi,[esi+0x0]
c000ebec:	ba 02 00 00 00       	mov    edx,0x2
c000ebf1:	8d 76 00             	lea    esi,[esi+0x0]
c000ebf4:	6a 00                	push   0x0
c000ebf6:	6a 00                	push   0x0
c000ebf8:	52                   	push   edx
c000ebf9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ebfd:	ff d0                	call   eax
c000ebff:	83 c4 10             	add    esp,0x10
c000ec02:	e9 91 00 00 00       	jmp    c000ec98 <ACPI::detectPCI()+0x200>
c000ec07:	90                   	nop
c000ec08:	83 ec 0c             	sub    esp,0xc
c000ec0b:	68 7f 00 02 c0       	push   0xc002007f
c000ec10:	e8 3a 11 00 00       	call   c000fd4f <KeSetBootMessage(char const*)>
c000ec15:	83 c4 10             	add    esp,0x10
c000ec18:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000ec1f:	83 ec 0c             	sub    esp,0xc
c000ec22:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ec26:	e8 3a 8c ff ff       	call   c0007865 <malloc>
c000ec2b:	83 c4 10             	add    esp,0x10
c000ec2e:	89 c3                	mov    ebx,eax
c000ec30:	83 ec 0c             	sub    esp,0xc
c000ec33:	53                   	push   ebx
c000ec34:	e8 ab b7 00 00       	call   c001a3e4 <IDE::IDE()>
c000ec39:	83 c4 10             	add    esp,0x10
c000ec3c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ec40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec44:	83 ec 08             	sub    esp,0x8
c000ec47:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ec4b:	50                   	push   eax
c000ec4c:	e8 f3 cd ff ff       	call   c000ba44 <Device::addChild(Device*)>
c000ec51:	83 c4 10             	add    esp,0x10
c000ec54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec58:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000ec62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec66:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000ec6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec73:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000ec7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec80:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec82:	83 c0 08             	add    eax,0x8
c000ec85:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec87:	6a 00                	push   0x0
c000ec89:	6a 00                	push   0x0
c000ec8b:	6a 00                	push   0x0
c000ec8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ec91:	ff d0                	call   eax
c000ec93:	83 c4 10             	add    esp,0x10
c000ec96:	66 90                	xchg   ax,ax
c000ec98:	90                   	nop
c000ec99:	83 c4 28             	add    esp,0x28
c000ec9c:	5b                   	pop    ebx
c000ec9d:	c3                   	ret    
c000ec9e:	66 90                	xchg   ax,ax

c000eca0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000eca0:	83 ec 1c             	sub    esp,0x1c
c000eca3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000eca7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ecaa:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ecae:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000ecb4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ecb8:	25 ff 00 00 00       	and    eax,0xff
c000ecbd:	83 ec 08             	sub    esp,0x8
c000ecc0:	50                   	push   eax
c000ecc1:	52                   	push   edx
c000ecc2:	e8 89 82 ff ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c000ecc7:	83 c4 10             	add    esp,0x10
c000ecca:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000ecce:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000ecd4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ecd8:	25 ff 00 00 00       	and    eax,0xff
c000ecdd:	83 ec 04             	sub    esp,0x4
c000ece0:	6a 01                	push   0x1
c000ece2:	50                   	push   eax
c000ece3:	52                   	push   edx
c000ece4:	e8 7d 83 ff ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c000ece9:	83 c4 10             	add    esp,0x10
c000ecec:	90                   	nop
c000eced:	83 c4 1c             	add    esp,0x1c
c000ecf0:	c3                   	ret    
c000ecf1:	90                   	nop
c000ecf2:	66 90                	xchg   ax,ax

c000ecf4 <ACPI::sleep()>:
c000ecf4:	83 ec 0c             	sub    esp,0xc
c000ecf7:	a1 a0 64 02 c0       	mov    eax,ds:0xc00264a0
c000ecfc:	85 c0                	test   eax,eax
c000ecfe:	74 08                	je     c000ed08 <ACPI::sleep()+0x14>
c000ed00:	a1 a0 64 02 c0       	mov    eax,ds:0xc00264a0
c000ed05:	ff d0                	call   eax
c000ed07:	90                   	nop
c000ed08:	90                   	nop
c000ed09:	83 c4 0c             	add    esp,0xc
c000ed0c:	c3                   	ret    
c000ed0d:	90                   	nop
c000ed0e:	66 90                	xchg   ax,ax

c000ed10 <ACPI::open(int, int, void*)>:
c000ed10:	57                   	push   edi
c000ed11:	56                   	push   esi
c000ed12:	53                   	push   ebx
c000ed13:	81 ec 70 01 00 00    	sub    esp,0x170
c000ed19:	83 ec 0c             	sub    esp,0xc
c000ed1c:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ed23:	e8 70 fd ff ff       	call   c000ea98 <ACPI::detectPCI()>
c000ed28:	83 c4 10             	add    esp,0x10
c000ed2b:	83 ec 0c             	sub    esp,0xc
c000ed2e:	68 04 00 02 c0       	push   0xc0020004
c000ed33:	e8 17 10 00 00       	call   c000fd4f <KeSetBootMessage(char const*)>
c000ed38:	83 c4 10             	add    esp,0x10
c000ed3b:	83 ec 0c             	sub    esp,0xc
c000ed3e:	68 94 00 02 c0       	push   0xc0020094
c000ed43:	e8 49 48 00 00       	call   c0013591 <Thr::loadKernelSymbolTable(char const*)>
c000ed48:	83 c4 10             	add    esp,0x10
c000ed4b:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000ed53:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000ed5e:	83 ec 0c             	sub    esp,0xc
c000ed61:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ed68:	e8 f8 8a ff ff       	call   c0007865 <malloc>
c000ed6d:	83 c4 10             	add    esp,0x10
c000ed70:	89 c3                	mov    ebx,eax
c000ed72:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000ed77:	83 ec 04             	sub    esp,0x4
c000ed7a:	50                   	push   eax
c000ed7b:	68 b2 00 02 c0       	push   0xc00200b2
c000ed80:	53                   	push   ebx
c000ed81:	e8 f6 bd ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c000ed86:	83 c4 10             	add    esp,0x10
c000ed89:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000ed90:	83 ec 08             	sub    esp,0x8
c000ed93:	6a 01                	push   0x1
c000ed95:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ed9c:	e8 9b be ff ff       	call   c000ac3c <File::open(FileOpenMode)>
c000eda1:	83 c4 10             	add    esp,0x10
c000eda4:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000edab:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000edb3:	75 17                	jne    c000edcc <ACPI::open(int, int, void*)+0xbc>
c000edb5:	83 ec 0c             	sub    esp,0xc
c000edb8:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000edbf:	e8 d6 be ff ff       	call   c000ac9a <File::close()>
c000edc4:	83 c4 10             	add    esp,0x10
c000edc7:	eb 0b                	jmp    c000edd4 <ACPI::open(int, int, void*)+0xc4>
c000edc9:	8d 76 00             	lea    esi,[esi+0x0]
c000edcc:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000edd4:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000eddc:	74 1e                	je     c000edfc <ACPI::open(int, int, void*)+0xec>
c000edde:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000ede5:	8b 00                	mov    eax,DWORD PTR [eax]
c000ede7:	83 c0 08             	add    eax,0x8
c000edea:	8b 00                	mov    eax,DWORD PTR [eax]
c000edec:	83 ec 0c             	sub    esp,0xc
c000edef:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000edf6:	ff d0                	call   eax
c000edf8:	83 c4 10             	add    esp,0x10
c000edfb:	90                   	nop
c000edfc:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000ee03:	83 f0 01             	xor    eax,0x1
c000ee06:	84 c0                	test   al,al
c000ee08:	74 42                	je     c000ee4c <ACPI::open(int, int, void*)+0x13c>
c000ee0a:	83 ec 0c             	sub    esp,0xc
c000ee0d:	68 d0 00 02 c0       	push   0xc00200d0
c000ee12:	e8 38 0f 00 00       	call   c000fd4f <KeSetBootMessage(char const*)>
c000ee17:	83 c4 10             	add    esp,0x10
c000ee1a:	83 ec 04             	sub    esp,0x4
c000ee1d:	6a 0c                	push   0xc
c000ee1f:	68 eb 00 02 c0       	push   0xc00200eb
c000ee24:	68 fc 00 02 c0       	push   0xc00200fc
c000ee29:	e8 0d 3b 00 00       	call   c001293b <Reg::readIntWithDefault(char*, char*, int)>
c000ee2e:	83 c4 10             	add    esp,0x10
c000ee31:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ee38:	83 ec 0c             	sub    esp,0xc
c000ee3b:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ee42:	e8 0c a7 ff ff       	call   c0009553 <Virt::setupPageSwapping(int)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	66 90                	xchg   ax,ax
c000ee4c:	83 ec 0c             	sub    esp,0xc
c000ee4f:	68 55 f1 01 c0       	push   0xc001f155
c000ee54:	e8 f6 0e 00 00       	call   c000fd4f <KeSetBootMessage(char const*)>
c000ee59:	83 c4 10             	add    esp,0x10
c000ee5c:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ee63:	83 ec 08             	sub    esp,0x8
c000ee66:	6a 13                	push   0x13
c000ee68:	50                   	push   eax
c000ee69:	e8 ee ce ff ff       	call   c000bd5c <getDevicesOfType(DeviceType)>
c000ee6e:	83 c4 0c             	add    esp,0xc
c000ee71:	8d 76 00             	lea    esi,[esi+0x0]
c000ee74:	83 ec 0c             	sub    esp,0xc
c000ee77:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ee7e:	50                   	push   eax
c000ee7f:	e8 b8 f6 00 00       	call   c001e53c <LinkedList<Device>::isEmpty()>
c000ee84:	83 c4 10             	add    esp,0x10
c000ee87:	83 f0 01             	xor    eax,0x1
c000ee8a:	84 c0                	test   al,al
c000ee8c:	0f 84 46 01 00 00    	je     c000efd8 <ACPI::open(int, int, void*)+0x2c8>
c000ee92:	83 ec 0c             	sub    esp,0xc
c000ee95:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ee9c:	50                   	push   eax
c000ee9d:	e8 b6 f6 00 00       	call   c001e558 <LinkedList<Device>::getFirstElement()>
c000eea2:	83 c4 10             	add    esp,0x10
c000eea5:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000eeac:	83 ec 0c             	sub    esp,0xc
c000eeaf:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000eeb6:	50                   	push   eax
c000eeb7:	e8 a4 f6 00 00       	call   c001e560 <LinkedList<Device>::removeFirst()>
c000eebc:	83 c4 10             	add    esp,0x10
c000eebf:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000eec6:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000eecd:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000eed4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eed8:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000eede:	ba 09 00 00 00       	mov    edx,0x9
c000eee3:	fc                   	cld    
c000eee4:	89 c7                	mov    edi,eax
c000eee6:	89 de                	mov    esi,ebx
c000eee8:	89 d1                	mov    ecx,edx
c000eeea:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000eeec:	83 ec 08             	sub    esp,0x8
c000eeef:	8d 44 24 38          	lea    eax,[esp+0x38]
c000eef3:	50                   	push   eax
c000eef4:	83 ec 24             	sub    esp,0x24
c000eef7:	89 e0                	mov    eax,esp
c000eef9:	89 c3                	mov    ebx,eax
c000eefb:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000eeff:	ba 09 00 00 00       	mov    edx,0x9
c000ef04:	89 df                	mov    edi,ebx
c000ef06:	89 c6                	mov    esi,eax
c000ef08:	89 d1                	mov    ecx,edx
c000ef0a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ef0c:	e8 4f ae 00 00       	call   c0019d60 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ef11:	83 c4 30             	add    esp,0x30
c000ef14:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ef1b:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ef23:	0f 84 4b ff ff ff    	je     c000ee74 <ACPI::open(int, int, void*)+0x164>
c000ef29:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ef34:	83 ec 0c             	sub    esp,0xc
c000ef37:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ef3e:	e8 22 89 ff ff       	call   c0007865 <malloc>
c000ef43:	83 c4 10             	add    esp,0x10
c000ef46:	89 c3                	mov    ebx,eax
c000ef48:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000ef4d:	83 ec 04             	sub    esp,0x4
c000ef50:	50                   	push   eax
c000ef51:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ef58:	53                   	push   ebx
c000ef59:	e8 1e bc ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c000ef5e:	83 c4 10             	add    esp,0x10
c000ef61:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000ef68:	83 ec 0c             	sub    esp,0xc
c000ef6b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ef72:	e8 33 bf ff ff       	call   c000aeaa <File::exists()>
c000ef77:	83 c4 10             	add    esp,0x10
c000ef7a:	84 c0                	test   al,al
c000ef7c:	74 2a                	je     c000efa8 <ACPI::open(int, int, void*)+0x298>
c000ef7e:	83 ec 08             	sub    esp,0x8
c000ef81:	6a 01                	push   0x1
c000ef83:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ef8a:	e8 79 50 00 00       	call   c0014008 <Thr::loadDLL(char const*, bool)>
c000ef8f:	83 c4 10             	add    esp,0x10
c000ef92:	83 ec 08             	sub    esp,0x8
c000ef95:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ef9c:	50                   	push   eax
c000ef9d:	e8 97 52 00 00       	call   c0014239 <Thr::executeDLL(unsigned long, void*)>
c000efa2:	83 c4 10             	add    esp,0x10
c000efa5:	8d 76 00             	lea    esi,[esi+0x0]
c000efa8:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000efb0:	0f 84 be fe ff ff    	je     c000ee74 <ACPI::open(int, int, void*)+0x164>
c000efb6:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000efbd:	8b 00                	mov    eax,DWORD PTR [eax]
c000efbf:	83 c0 08             	add    eax,0x8
c000efc2:	8b 00                	mov    eax,DWORD PTR [eax]
c000efc4:	83 ec 0c             	sub    esp,0xc
c000efc7:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000efce:	ff d0                	call   eax
c000efd0:	83 c4 10             	add    esp,0x10
c000efd3:	e9 9c fe ff ff       	jmp    c000ee74 <ACPI::open(int, int, void*)+0x164>
c000efd8:	83 ec 0c             	sub    esp,0xc
c000efdb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000efe2:	50                   	push   eax
c000efe3:	e8 50 f5 00 00       	call   c001e538 <LinkedList<Device>::~LinkedList()>
c000efe8:	83 c4 10             	add    esp,0x10
c000efeb:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000eff1:	83 ec 08             	sub    esp,0x8
c000eff4:	6a 01                	push   0x1
c000eff6:	68 03 01 02 c0       	push   0xc0020103
c000effb:	e8 08 50 00 00       	call   c0014008 <Thr::loadDLL(char const*, bool)>
c000f000:	83 c4 10             	add    esp,0x10
c000f003:	83 ec 08             	sub    esp,0x8
c000f006:	53                   	push   ebx
c000f007:	50                   	push   eax
c000f008:	e8 2c 52 00 00       	call   c0014239 <Thr::executeDLL(unsigned long, void*)>
c000f00d:	83 c4 10             	add    esp,0x10
c000f010:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000f015:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f01b:	83 e0 04             	and    eax,0x4
c000f01e:	84 c0                	test   al,al
c000f020:	0f 84 16 01 00 00    	je     c000f13c <ACPI::open(int, int, void*)+0x42c>
c000f026:	83 ec 0c             	sub    esp,0xc
c000f029:	68 20 01 02 c0       	push   0xc0020120
c000f02e:	e8 1c 0d 00 00       	call   c000fd4f <KeSetBootMessage(char const*)>
c000f033:	83 c4 10             	add    esp,0x10
c000f036:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000f041:	83 ec 0c             	sub    esp,0xc
c000f044:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000f04b:	e8 15 88 ff ff       	call   c0007865 <malloc>
c000f050:	83 c4 10             	add    esp,0x10
c000f053:	89 c3                	mov    ebx,eax
c000f055:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000f05a:	83 ec 04             	sub    esp,0x4
c000f05d:	50                   	push   eax
c000f05e:	68 3d 01 02 c0       	push   0xc002013d
c000f063:	53                   	push   ebx
c000f064:	e8 13 bb ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c000f069:	83 c4 10             	add    esp,0x10
c000f06c:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000f073:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f07b:	74 1b                	je     c000f098 <ACPI::open(int, int, void*)+0x388>
c000f07d:	83 ec 0c             	sub    esp,0xc
c000f080:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f087:	e8 1e be ff ff       	call   c000aeaa <File::exists()>
c000f08c:	83 c4 10             	add    esp,0x10
c000f08f:	84 c0                	test   al,al
c000f091:	74 05                	je     c000f098 <ACPI::open(int, int, void*)+0x388>
c000f093:	b0 01                	mov    al,0x1
c000f095:	eb 05                	jmp    c000f09c <ACPI::open(int, int, void*)+0x38c>
c000f097:	90                   	nop
c000f098:	b0 00                	mov    al,0x0
c000f09a:	66 90                	xchg   ax,ax
c000f09c:	84 c0                	test   al,al
c000f09e:	74 28                	je     c000f0c8 <ACPI::open(int, int, void*)+0x3b8>
c000f0a0:	83 ec 08             	sub    esp,0x8
c000f0a3:	6a 01                	push   0x1
c000f0a5:	68 3d 01 02 c0       	push   0xc002013d
c000f0aa:	e8 59 4f 00 00       	call   c0014008 <Thr::loadDLL(char const*, bool)>
c000f0af:	83 c4 10             	add    esp,0x10
c000f0b2:	83 ec 08             	sub    esp,0x8
c000f0b5:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f0bc:	50                   	push   eax
c000f0bd:	e8 77 51 00 00       	call   c0014239 <Thr::executeDLL(unsigned long, void*)>
c000f0c2:	83 c4 10             	add    esp,0x10
c000f0c5:	8d 76 00             	lea    esi,[esi+0x0]
c000f0c8:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f0d0:	74 2a                	je     c000f0fc <ACPI::open(int, int, void*)+0x3ec>
c000f0d2:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f0da:	74 20                	je     c000f0fc <ACPI::open(int, int, void*)+0x3ec>
c000f0dc:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f0e3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0e5:	83 c0 08             	add    eax,0x8
c000f0e8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0ea:	83 ec 0c             	sub    esp,0xc
c000f0ed:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f0f4:	ff d0                	call   eax
c000f0f6:	83 c4 10             	add    esp,0x10
c000f0f9:	8d 76 00             	lea    esi,[esi+0x0]
c000f0fc:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000f101:	83 ec 08             	sub    esp,0x8
c000f104:	68 5a 01 02 c0       	push   0xc002015a
c000f109:	50                   	push   eax
c000f10a:	e8 31 f2 ff ff       	call   c000e340 <findDataTable(unsigned char*, char*)>
c000f10f:	83 c4 10             	add    esp,0x10
c000f112:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f119:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f121:	74 19                	je     c000f13c <ACPI::open(int, int, void*)+0x42c>
c000f123:	83 ec 08             	sub    esp,0x8
c000f126:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f12d:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f134:	e8 67 fb ff ff       	call   c000eca0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f139:	83 c4 10             	add    esp,0x10
c000f13c:	b8 00 00 00 00       	mov    eax,0x0
c000f141:	81 c4 70 01 00 00    	add    esp,0x170
c000f147:	5b                   	pop    ebx
c000f148:	5e                   	pop    esi
c000f149:	5f                   	pop    edi
c000f14a:	c3                   	ret    
c000f14b:	90                   	nop

c000f14c <CPU::close(int, int, void*)>:
c000f14c:	31 c0                	xor    eax,eax
c000f14e:	c3                   	ret    
c000f14f:	90                   	nop

c000f150 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f150:	60                   	pusha  
c000f151:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f155:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f159:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f15d:	9c                   	pushf  
c000f15e:	fa                   	cli    
c000f15f:	0f 09                	wbinvd 
c000f161:	0f 30                	wrmsr  
c000f163:	9d                   	popf   
c000f164:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f168:	89 02                	mov    DWORD PTR [edx],eax
c000f16a:	61                   	popa   
c000f16b:	c3                   	ret    

c000f16c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f16c:	60                   	pusha  
c000f16d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f171:	9c                   	pushf  
c000f172:	fa                   	cli    
c000f173:	0f 09                	wbinvd 
c000f175:	31 c0                	xor    eax,eax
c000f177:	31 d2                	xor    edx,edx
c000f179:	0f 32                	rdmsr  
c000f17b:	9d                   	popf   
c000f17c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f180:	89 02                	mov    DWORD PTR [edx],eax
c000f182:	61                   	popa   
c000f183:	c3                   	ret    

c000f184 <CPU::AMD_K6_writeback(int, int, int)>:
c000f184:	56                   	push   esi
c000f185:	53                   	push   ebx
c000f186:	83 ec 10             	sub    esp,0x10
c000f189:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f18d:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f192:	75 5d                	jne    c000f1f1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f194:	83 f8 08             	cmp    eax,0x8
c000f197:	75 09                	jne    c000f1a2 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f199:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f19e:	7e 13                	jle    c000f1b3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f1a0:	eb 30                	jmp    c000f1d2 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f1a2:	83 f8 06             	cmp    eax,0x6
c000f1a5:	7c 4a                	jl     c000f1f1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f1a7:	83 f8 07             	cmp    eax,0x7
c000f1aa:	7e 07                	jle    c000f1b3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f1ac:	83 f8 09             	cmp    eax,0x9
c000f1af:	74 21                	je     c000f1d2 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f1b1:	eb 3e                	jmp    c000f1f1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f1b3:	89 e6                	mov    esi,esp
c000f1b5:	8b 1d dc 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023edc
c000f1bb:	56                   	push   esi
c000f1bc:	c1 eb 15             	shr    ebx,0x15
c000f1bf:	68 82 00 00 c0       	push   0xc0000082
c000f1c4:	83 e3 7e             	and    ebx,0x7e
c000f1c7:	e8 a0 ff ff ff       	call   c000f16c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f1cc:	56                   	push   esi
c000f1cd:	6a 00                	push   0x0
c000f1cf:	53                   	push   ebx
c000f1d0:	eb 12                	jmp    c000f1e4 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f1d2:	89 e3                	mov    ebx,esp
c000f1d4:	53                   	push   ebx
c000f1d5:	68 82 00 00 c0       	push   0xc0000082
c000f1da:	e8 8d ff ff ff       	call   c000f16c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f1df:	53                   	push   ebx
c000f1e0:	6a 00                	push   0x0
c000f1e2:	6a 00                	push   0x0
c000f1e4:	68 82 00 00 c0       	push   0xc0000082
c000f1e9:	e8 62 ff ff ff       	call   c000f150 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f1ee:	83 c4 18             	add    esp,0x18
c000f1f1:	83 c4 10             	add    esp,0x10
c000f1f4:	5b                   	pop    ebx
c000f1f5:	5e                   	pop    esi
c000f1f6:	c3                   	ret    
c000f1f7:	90                   	nop

c000f1f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f1f8:	55                   	push   ebp
c000f1f9:	57                   	push   edi
c000f1fa:	56                   	push   esi
c000f1fb:	53                   	push   ebx
c000f1fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f200:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f204:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f208:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f20c:	39 05 70 16 02 c0    	cmp    DWORD PTR ds:0xc0021670,eax
c000f212:	75 23                	jne    c000f237 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f214:	a1 2c 69 02 c0       	mov    eax,ds:0xc002692c
c000f219:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f21d:	89 06                	mov    DWORD PTR [esi],eax
c000f21f:	a1 28 69 02 c0       	mov    eax,ds:0xc0026928
c000f224:	89 07                	mov    DWORD PTR [edi],eax
c000f226:	a1 24 69 02 c0       	mov    eax,ds:0xc0026924
c000f22b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f22e:	a1 20 69 02 c0       	mov    eax,ds:0xc0026920
c000f233:	89 02                	mov    DWORD PTR [edx],eax
c000f235:	eb 3f                	jmp    c000f276 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f237:	31 c9                	xor    ecx,ecx
c000f239:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f23d:	0f a2                	cpuid  
c000f23f:	89 06                	mov    DWORD PTR [esi],eax
c000f241:	89 1f                	mov    DWORD PTR [edi],ebx
c000f243:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f247:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f24a:	89 10                	mov    DWORD PTR [eax],edx
c000f24c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f250:	a3 70 16 02 c0       	mov    ds:0xc0021670,eax
c000f255:	8b 06                	mov    eax,DWORD PTR [esi]
c000f257:	a3 2c 69 02 c0       	mov    ds:0xc002692c,eax
c000f25c:	8b 07                	mov    eax,DWORD PTR [edi]
c000f25e:	a3 28 69 02 c0       	mov    ds:0xc0026928,eax
c000f263:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f266:	a3 24 69 02 c0       	mov    ds:0xc0026924,eax
c000f26b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f26f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f271:	a3 20 69 02 c0       	mov    ds:0xc0026920,eax
c000f276:	5b                   	pop    ebx
c000f277:	5e                   	pop    esi
c000f278:	5f                   	pop    edi
c000f279:	5d                   	pop    ebp
c000f27a:	c3                   	ret    
c000f27b:	90                   	nop

c000f27c <CPU::cpuidCheckEDX(unsigned int)>:
c000f27c:	83 ec 10             	sub    esp,0x10
c000f27f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f283:	50                   	push   eax
c000f284:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f288:	50                   	push   eax
c000f289:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f28d:	50                   	push   eax
c000f28e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f292:	50                   	push   eax
c000f293:	6a 01                	push   0x1
c000f295:	e8 5e ff ff ff       	call   c000f1f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f29a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f29e:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f2a2:	0f 95 c0             	setne  al
c000f2a5:	83 c4 24             	add    esp,0x24
c000f2a8:	c3                   	ret    
c000f2a9:	90                   	nop

c000f2aa <CPU::cpuidCheckECX(unsigned int)>:
c000f2aa:	83 ec 10             	sub    esp,0x10
c000f2ad:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2b1:	50                   	push   eax
c000f2b2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2b6:	50                   	push   eax
c000f2b7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2bb:	50                   	push   eax
c000f2bc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2c0:	50                   	push   eax
c000f2c1:	6a 01                	push   0x1
c000f2c3:	e8 30 ff ff ff       	call   c000f1f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f2c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2cc:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f2d0:	0f 95 c0             	setne  al
c000f2d3:	83 c4 24             	add    esp,0x24
c000f2d6:	c3                   	ret    
c000f2d7:	90                   	nop

c000f2d8 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f2d8:	83 ec 10             	sub    esp,0x10
c000f2db:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2df:	50                   	push   eax
c000f2e0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2e4:	50                   	push   eax
c000f2e5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2e9:	50                   	push   eax
c000f2ea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2ee:	50                   	push   eax
c000f2ef:	6a 07                	push   0x7
c000f2f1:	e8 02 ff ff ff       	call   c000f1f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f2f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2fa:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f2fe:	0f 95 c0             	setne  al
c000f301:	83 c4 24             	add    esp,0x24
c000f304:	c3                   	ret    
c000f305:	90                   	nop

c000f306 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f306:	83 ec 10             	sub    esp,0x10
c000f309:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f30d:	50                   	push   eax
c000f30e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f312:	50                   	push   eax
c000f313:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f317:	50                   	push   eax
c000f318:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f31c:	50                   	push   eax
c000f31d:	6a 07                	push   0x7
c000f31f:	e8 d4 fe ff ff       	call   c000f1f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f324:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f328:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f32c:	0f 95 c0             	setne  al
c000f32f:	83 c4 24             	add    esp,0x24
c000f332:	c3                   	ret    
c000f333:	90                   	nop

c000f334 <CPU::CPU()>:
c000f334:	83 ec 0c             	sub    esp,0xc
c000f337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f33b:	83 ec 08             	sub    esp,0x8
c000f33e:	68 7d 02 02 c0       	push   0xc002027d
c000f343:	50                   	push   eax
c000f344:	e8 93 c8 ff ff       	call   c000bbdc <Device::Device(char const*)>
c000f349:	83 c4 10             	add    esp,0x10
c000f34c:	ba 04 03 02 c0       	mov    edx,0xc0020304
c000f351:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f355:	89 10                	mov    DWORD PTR [eax],edx
c000f357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f35b:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f369:	05 78 01 00 00       	add    eax,0x178
c000f36e:	83 ec 0c             	sub    esp,0xc
c000f371:	50                   	push   eax
c000f372:	e8 ad 7d ff ff       	call   c0007124 <GDT::GDT()>
c000f377:	83 c4 10             	add    esp,0x10
c000f37a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f37e:	05 7c 09 00 00       	add    eax,0x97c
c000f383:	83 ec 0c             	sub    esp,0xc
c000f386:	50                   	push   eax
c000f387:	e8 d4 7f ff ff       	call   c0007360 <IDT::IDT()>
c000f38c:	83 c4 10             	add    esp,0x10
c000f38f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f393:	05 7c 11 00 00       	add    eax,0x117c
c000f398:	83 ec 0c             	sub    esp,0xc
c000f39b:	50                   	push   eax
c000f39c:	e8 eb 98 ff ff       	call   c0008c8c <TSS::TSS()>
c000f3a1:	83 c4 10             	add    esp,0x10
c000f3a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3a8:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f3af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3b3:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c000f3bd:	90                   	nop
c000f3be:	83 c4 0c             	add    esp,0xc
c000f3c1:	c3                   	ret    

c000f3c2 <CPU::displayFeatures()>:
c000f3c2:	c3                   	ret    
c000f3c3:	90                   	nop

c000f3c4 <CPU::detectFeatures()>:
c000f3c4:	55                   	push   ebp
c000f3c5:	57                   	push   edi
c000f3c6:	56                   	push   esi
c000f3c7:	53                   	push   ebx
c000f3c8:	83 ec 30             	sub    esp,0x30
c000f3cb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f3cf:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f3d9:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f3e0:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f3e6:	6a 0d                	push   0xd
c000f3e8:	6a 00                	push   0x0
c000f3ea:	55                   	push   ebp
c000f3eb:	e8 d0 10 ff ff       	call   c00004c0 <memset>
c000f3f0:	83 c4 10             	add    esp,0x10
c000f3f3:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000f3f8:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f3ff:	0f 84 d5 05 00 00    	je     c000f9da <CPU::detectFeatures()+0x616>
c000f405:	83 ec 0c             	sub    esp,0xc
c000f408:	89 ef                	mov    edi,ebp
c000f40a:	6a 10                	push   0x10
c000f40c:	e8 6b fe ff ff       	call   c000f27c <CPU::cpuidCheckEDX(unsigned int)>
c000f411:	83 e0 01             	and    eax,0x1
c000f414:	8d 14 00             	lea    edx,[eax+eax*1]
c000f417:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f41d:	83 e0 fd             	and    eax,0xfffffffd
c000f420:	09 d0                	or     eax,edx
c000f422:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f428:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f42f:	e8 48 fe ff ff       	call   c000f27c <CPU::cpuidCheckEDX(unsigned int)>
c000f434:	83 e0 01             	and    eax,0x1
c000f437:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f43e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f444:	83 e0 fb             	and    eax,0xfffffffb
c000f447:	09 d0                	or     eax,edx
c000f449:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f44f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f456:	e8 21 fe ff ff       	call   c000f27c <CPU::cpuidCheckEDX(unsigned int)>
c000f45b:	83 e0 01             	and    eax,0x1
c000f45e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f465:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f46b:	83 e0 f7             	and    eax,0xfffffff7
c000f46e:	09 d0                	or     eax,edx
c000f470:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f476:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f47d:	e8 fa fd ff ff       	call   c000f27c <CPU::cpuidCheckEDX(unsigned int)>
c000f482:	83 e0 01             	and    eax,0x1
c000f485:	c1 e0 04             	shl    eax,0x4
c000f488:	88 c2                	mov    dl,al
c000f48a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f490:	83 e0 ef             	and    eax,0xffffffef
c000f493:	09 d0                	or     eax,edx
c000f495:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f49b:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f4a2:	e8 d5 fd ff ff       	call   c000f27c <CPU::cpuidCheckEDX(unsigned int)>
c000f4a7:	83 e0 01             	and    eax,0x1
c000f4aa:	c1 e0 05             	shl    eax,0x5
c000f4ad:	88 c2                	mov    dl,al
c000f4af:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f4b5:	83 e0 df             	and    eax,0xffffffdf
c000f4b8:	09 d0                	or     eax,edx
c000f4ba:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f4c0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f4c7:	e8 b0 fd ff ff       	call   c000f27c <CPU::cpuidCheckEDX(unsigned int)>
c000f4cc:	83 e0 01             	and    eax,0x1
c000f4cf:	8d 14 00             	lea    edx,[eax+eax*1]
c000f4d2:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f4d8:	83 e0 fd             	and    eax,0xfffffffd
c000f4db:	09 d0                	or     eax,edx
c000f4dd:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f4e3:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f4ea:	e8 8d fd ff ff       	call   c000f27c <CPU::cpuidCheckEDX(unsigned int)>
c000f4ef:	83 e0 01             	and    eax,0x1
c000f4f2:	c1 e0 06             	shl    eax,0x6
c000f4f5:	88 c2                	mov    dl,al
c000f4f7:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f4fd:	83 e0 bf             	and    eax,0xffffffbf
c000f500:	09 d0                	or     eax,edx
c000f502:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f508:	58                   	pop    eax
c000f509:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f50d:	50                   	push   eax
c000f50e:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f512:	50                   	push   eax
c000f513:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f517:	56                   	push   esi
c000f518:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f51c:	50                   	push   eax
c000f51d:	6a 00                	push   0x0
c000f51f:	e8 d4 fc ff ff       	call   c000f1f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f524:	b8 04 00 00 00       	mov    eax,0x4
c000f529:	89 c1                	mov    ecx,eax
c000f52b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f52d:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f533:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f537:	89 c1                	mov    ecx,eax
c000f539:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f53b:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f541:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f545:	89 c1                	mov    ecx,eax
c000f547:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f549:	83 c4 18             	add    esp,0x18
c000f54c:	68 8c 01 02 c0       	push   0xc002018c
c000f551:	55                   	push   ebp
c000f552:	e8 79 11 ff ff       	call   c00006d0 <strcmp>
c000f557:	83 c4 10             	add    esp,0x10
c000f55a:	85 c0                	test   eax,eax
c000f55c:	75 0f                	jne    c000f56d <CPU::detectFeatures()+0x1a9>
c000f55e:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f568:	e9 22 02 00 00       	jmp    c000f78f <CPU::detectFeatures()+0x3cb>
c000f56d:	50                   	push   eax
c000f56e:	50                   	push   eax
c000f56f:	68 99 01 02 c0       	push   0xc0020199
c000f574:	55                   	push   ebp
c000f575:	e8 56 11 ff ff       	call   c00006d0 <strcmp>
c000f57a:	83 c4 10             	add    esp,0x10
c000f57d:	85 c0                	test   eax,eax
c000f57f:	74 dd                	je     c000f55e <CPU::detectFeatures()+0x19a>
c000f581:	50                   	push   eax
c000f582:	50                   	push   eax
c000f583:	68 a6 01 02 c0       	push   0xc00201a6
c000f588:	55                   	push   ebp
c000f589:	e8 42 11 ff ff       	call   c00006d0 <strcmp>
c000f58e:	83 c4 10             	add    esp,0x10
c000f591:	85 c0                	test   eax,eax
c000f593:	74 2a                	je     c000f5bf <CPU::detectFeatures()+0x1fb>
c000f595:	50                   	push   eax
c000f596:	50                   	push   eax
c000f597:	68 b3 01 02 c0       	push   0xc00201b3
c000f59c:	55                   	push   ebp
c000f59d:	e8 2e 11 ff ff       	call   c00006d0 <strcmp>
c000f5a2:	83 c4 10             	add    esp,0x10
c000f5a5:	85 c0                	test   eax,eax
c000f5a7:	74 16                	je     c000f5bf <CPU::detectFeatures()+0x1fb>
c000f5a9:	50                   	push   eax
c000f5aa:	50                   	push   eax
c000f5ab:	68 c0 01 02 c0       	push   0xc00201c0
c000f5b0:	55                   	push   ebp
c000f5b1:	e8 1a 11 ff ff       	call   c00006d0 <strcmp>
c000f5b6:	83 c4 10             	add    esp,0x10
c000f5b9:	85 c0                	test   eax,eax
c000f5bb:	74 48                	je     c000f605 <CPU::detectFeatures()+0x241>
c000f5bd:	eb 0f                	jmp    c000f5ce <CPU::detectFeatures()+0x20a>
c000f5bf:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f5c9:	e9 c1 01 00 00       	jmp    c000f78f <CPU::detectFeatures()+0x3cb>
c000f5ce:	50                   	push   eax
c000f5cf:	50                   	push   eax
c000f5d0:	68 cd 01 02 c0       	push   0xc00201cd
c000f5d5:	55                   	push   ebp
c000f5d6:	e8 f5 10 ff ff       	call   c00006d0 <strcmp>
c000f5db:	83 c4 10             	add    esp,0x10
c000f5de:	85 c0                	test   eax,eax
c000f5e0:	74 23                	je     c000f605 <CPU::detectFeatures()+0x241>
c000f5e2:	57                   	push   edi
c000f5e3:	57                   	push   edi
c000f5e4:	68 da 01 02 c0       	push   0xc00201da
c000f5e9:	55                   	push   ebp
c000f5ea:	e8 e1 10 ff ff       	call   c00006d0 <strcmp>
c000f5ef:	83 c4 10             	add    esp,0x10
c000f5f2:	85 c0                	test   eax,eax
c000f5f4:	75 1e                	jne    c000f614 <CPU::detectFeatures()+0x250>
c000f5f6:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f600:	e9 8a 01 00 00       	jmp    c000f78f <CPU::detectFeatures()+0x3cb>
c000f605:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f60f:	e9 7b 01 00 00       	jmp    c000f78f <CPU::detectFeatures()+0x3cb>
c000f614:	56                   	push   esi
c000f615:	56                   	push   esi
c000f616:	68 e7 01 02 c0       	push   0xc00201e7
c000f61b:	55                   	push   ebp
c000f61c:	e8 af 10 ff ff       	call   c00006d0 <strcmp>
c000f621:	83 c4 10             	add    esp,0x10
c000f624:	85 c0                	test   eax,eax
c000f626:	75 0f                	jne    c000f637 <CPU::detectFeatures()+0x273>
c000f628:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f632:	e9 58 01 00 00       	jmp    c000f78f <CPU::detectFeatures()+0x3cb>
c000f637:	51                   	push   ecx
c000f638:	51                   	push   ecx
c000f639:	68 a6 01 02 c0       	push   0xc00201a6
c000f63e:	55                   	push   ebp
c000f63f:	e8 8c 10 ff ff       	call   c00006d0 <strcmp>
c000f644:	83 c4 10             	add    esp,0x10
c000f647:	85 c0                	test   eax,eax
c000f649:	75 0f                	jne    c000f65a <CPU::detectFeatures()+0x296>
c000f64b:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f655:	e9 35 01 00 00       	jmp    c000f78f <CPU::detectFeatures()+0x3cb>
c000f65a:	52                   	push   edx
c000f65b:	52                   	push   edx
c000f65c:	68 f4 01 02 c0       	push   0xc00201f4
c000f661:	55                   	push   ebp
c000f662:	e8 69 10 ff ff       	call   c00006d0 <strcmp>
c000f667:	83 c4 10             	add    esp,0x10
c000f66a:	85 c0                	test   eax,eax
c000f66c:	75 0f                	jne    c000f67d <CPU::detectFeatures()+0x2b9>
c000f66e:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f678:	e9 12 01 00 00       	jmp    c000f78f <CPU::detectFeatures()+0x3cb>
c000f67d:	50                   	push   eax
c000f67e:	50                   	push   eax
c000f67f:	68 01 02 02 c0       	push   0xc0020201
c000f684:	55                   	push   ebp
c000f685:	e8 46 10 ff ff       	call   c00006d0 <strcmp>
c000f68a:	83 c4 10             	add    esp,0x10
c000f68d:	85 c0                	test   eax,eax
c000f68f:	75 0f                	jne    c000f6a0 <CPU::detectFeatures()+0x2dc>
c000f691:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f69b:	e9 ef 00 00 00       	jmp    c000f78f <CPU::detectFeatures()+0x3cb>
c000f6a0:	50                   	push   eax
c000f6a1:	50                   	push   eax
c000f6a2:	68 0e 02 02 c0       	push   0xc002020e
c000f6a7:	55                   	push   ebp
c000f6a8:	e8 23 10 ff ff       	call   c00006d0 <strcmp>
c000f6ad:	83 c4 10             	add    esp,0x10
c000f6b0:	85 c0                	test   eax,eax
c000f6b2:	75 0f                	jne    c000f6c3 <CPU::detectFeatures()+0x2ff>
c000f6b4:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f6be:	e9 cc 00 00 00       	jmp    c000f78f <CPU::detectFeatures()+0x3cb>
c000f6c3:	50                   	push   eax
c000f6c4:	50                   	push   eax
c000f6c5:	68 1b 02 02 c0       	push   0xc002021b
c000f6ca:	55                   	push   ebp
c000f6cb:	e8 00 10 ff ff       	call   c00006d0 <strcmp>
c000f6d0:	83 c4 10             	add    esp,0x10
c000f6d3:	85 c0                	test   eax,eax
c000f6d5:	75 0f                	jne    c000f6e6 <CPU::detectFeatures()+0x322>
c000f6d7:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f6e1:	e9 a9 00 00 00       	jmp    c000f78f <CPU::detectFeatures()+0x3cb>
c000f6e6:	50                   	push   eax
c000f6e7:	50                   	push   eax
c000f6e8:	68 28 02 02 c0       	push   0xc0020228
c000f6ed:	55                   	push   ebp
c000f6ee:	e8 dd 0f ff ff       	call   c00006d0 <strcmp>
c000f6f3:	83 c4 10             	add    esp,0x10
c000f6f6:	85 c0                	test   eax,eax
c000f6f8:	75 0f                	jne    c000f709 <CPU::detectFeatures()+0x345>
c000f6fa:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f704:	e9 86 00 00 00       	jmp    c000f78f <CPU::detectFeatures()+0x3cb>
c000f709:	50                   	push   eax
c000f70a:	50                   	push   eax
c000f70b:	68 35 02 02 c0       	push   0xc0020235
c000f710:	55                   	push   ebp
c000f711:	e8 ba 0f ff ff       	call   c00006d0 <strcmp>
c000f716:	83 c4 10             	add    esp,0x10
c000f719:	85 c0                	test   eax,eax
c000f71b:	75 0c                	jne    c000f729 <CPU::detectFeatures()+0x365>
c000f71d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f727:	eb 66                	jmp    c000f78f <CPU::detectFeatures()+0x3cb>
c000f729:	50                   	push   eax
c000f72a:	50                   	push   eax
c000f72b:	68 42 02 02 c0       	push   0xc0020242
c000f730:	55                   	push   ebp
c000f731:	e8 9a 0f ff ff       	call   c00006d0 <strcmp>
c000f736:	83 c4 10             	add    esp,0x10
c000f739:	85 c0                	test   eax,eax
c000f73b:	75 0c                	jne    c000f749 <CPU::detectFeatures()+0x385>
c000f73d:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f747:	eb 46                	jmp    c000f78f <CPU::detectFeatures()+0x3cb>
c000f749:	57                   	push   edi
c000f74a:	57                   	push   edi
c000f74b:	68 4f 02 02 c0       	push   0xc002024f
c000f750:	55                   	push   ebp
c000f751:	e8 7a 0f ff ff       	call   c00006d0 <strcmp>
c000f756:	83 c4 10             	add    esp,0x10
c000f759:	85 c0                	test   eax,eax
c000f75b:	74 e0                	je     c000f73d <CPU::detectFeatures()+0x379>
c000f75d:	56                   	push   esi
c000f75e:	56                   	push   esi
c000f75f:	68 5c 02 02 c0       	push   0xc002025c
c000f764:	55                   	push   ebp
c000f765:	e8 66 0f ff ff       	call   c00006d0 <strcmp>
c000f76a:	83 c4 10             	add    esp,0x10
c000f76d:	85 c0                	test   eax,eax
c000f76f:	74 cc                	je     c000f73d <CPU::detectFeatures()+0x379>
c000f771:	51                   	push   ecx
c000f772:	51                   	push   ecx
c000f773:	68 69 02 02 c0       	push   0xc0020269
c000f778:	55                   	push   ebp
c000f779:	e8 52 0f ff ff       	call   c00006d0 <strcmp>
c000f77e:	83 c4 10             	add    esp,0x10
c000f781:	85 c0                	test   eax,eax
c000f783:	74 b8                	je     c000f73d <CPU::detectFeatures()+0x379>
c000f785:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f78f:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f794:	0f 86 be 00 00 00    	jbe    c000f858 <CPU::detectFeatures()+0x494>
c000f79a:	83 ec 0c             	sub    esp,0xc
c000f79d:	68 80 00 00 00       	push   0x80
c000f7a2:	e8 31 fb ff ff       	call   c000f2d8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f7a7:	83 e0 01             	and    eax,0x1
c000f7aa:	c1 e0 06             	shl    eax,0x6
c000f7ad:	88 c2                	mov    dl,al
c000f7af:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f7b5:	83 e0 bf             	and    eax,0xffffffbf
c000f7b8:	09 d0                	or     eax,edx
c000f7ba:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f7c0:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f7c7:	e8 0c fb ff ff       	call   c000f2d8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f7cc:	83 e0 01             	and    eax,0x1
c000f7cf:	c1 e0 04             	shl    eax,0x4
c000f7d2:	88 c2                	mov    dl,al
c000f7d4:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f7da:	83 e0 ef             	and    eax,0xffffffef
c000f7dd:	09 d0                	or     eax,edx
c000f7df:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f7e5:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f7ec:	e8 e7 fa ff ff       	call   c000f2d8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f7f1:	c1 e0 07             	shl    eax,0x7
c000f7f4:	88 c2                	mov    dl,al
c000f7f6:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f7fc:	83 e0 7f             	and    eax,0x7f
c000f7ff:	09 d0                	or     eax,edx
c000f801:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f807:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f80e:	e8 f3 fa ff ff       	call   c000f306 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f813:	83 e0 01             	and    eax,0x1
c000f816:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f81d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f823:	83 e0 f7             	and    eax,0xfffffff7
c000f826:	09 d0                	or     eax,edx
c000f828:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f82e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f835:	e8 cc fa ff ff       	call   c000f306 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f83a:	83 c4 10             	add    esp,0x10
c000f83d:	83 e0 01             	and    eax,0x1
c000f840:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f847:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f84d:	83 e0 fb             	and    eax,0xfffffffb
c000f850:	09 d0                	or     eax,edx
c000f852:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f858:	83 ec 0c             	sub    esp,0xc
c000f85b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f85f:	50                   	push   eax
c000f860:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f864:	50                   	push   eax
c000f865:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f869:	56                   	push   esi
c000f86a:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f86e:	50                   	push   eax
c000f86f:	6a 01                	push   0x1
c000f871:	e8 82 f9 ff ff       	call   c000f1f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f876:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f87a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f880:	88 ca                	mov    dl,cl
c000f882:	83 e0 f0             	and    eax,0xfffffff0
c000f885:	83 e2 0f             	and    edx,0xf
c000f888:	09 d0                	or     eax,edx
c000f88a:	88 ca                	mov    dl,cl
c000f88c:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f892:	c0 ea 04             	shr    dl,0x4
c000f895:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f899:	0f b6 c2             	movzx  eax,dl
c000f89c:	83 c4 20             	add    esp,0x20
c000f89f:	c1 e0 06             	shl    eax,0x6
c000f8a2:	89 c7                	mov    edi,eax
c000f8a4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f8aa:	66 25 3f c0          	and    ax,0xc03f
c000f8ae:	09 f8                	or     eax,edi
c000f8b0:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f8b7:	89 c8                	mov    eax,ecx
c000f8b9:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f8c0:	c1 e8 08             	shr    eax,0x8
c000f8c3:	83 e5 3f             	and    ebp,0x3f
c000f8c6:	83 e0 0f             	and    eax,0xf
c000f8c9:	89 c7                	mov    edi,eax
c000f8cb:	c1 e7 06             	shl    edi,0x6
c000f8ce:	09 ef                	or     edi,ebp
c000f8d0:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f8d7:	89 fa                	mov    edx,edi
c000f8d9:	83 e5 c0             	and    ebp,0xffffffc0
c000f8dc:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f8e2:	88 c2                	mov    dl,al
c000f8e4:	c0 ea 02             	shr    dl,0x2
c000f8e7:	89 d7                	mov    edi,edx
c000f8e9:	09 ef                	or     edi,ebp
c000f8eb:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f8f1:	89 fa                	mov    edx,edi
c000f8f3:	83 e5 cf             	and    ebp,0xffffffcf
c000f8f6:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f8fc:	89 cf                	mov    edi,ecx
c000f8fe:	c1 ef 0c             	shr    edi,0xc
c000f901:	83 e7 03             	and    edi,0x3
c000f904:	c1 e7 04             	shl    edi,0x4
c000f907:	09 ef                	or     edi,ebp
c000f909:	3c 06                	cmp    al,0x6
c000f90b:	89 fa                	mov    edx,edi
c000f90d:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f913:	74 04                	je     c000f919 <CPU::detectFeatures()+0x555>
c000f915:	3c 0f                	cmp    al,0xf
c000f917:	75 5c                	jne    c000f975 <CPU::detectFeatures()+0x5b1>
c000f919:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f91d:	89 cf                	mov    edi,ecx
c000f91f:	c1 ef 10             	shr    edi,0x10
c000f922:	c1 e7 04             	shl    edi,0x4
c000f925:	09 fa                	or     edx,edi
c000f927:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f92d:	0f b6 d2             	movzx  edx,dl
c000f930:	66 81 e7 3f c0       	and    di,0xc03f
c000f935:	c1 e2 06             	shl    edx,0x6
c000f938:	09 fa                	or     edx,edi
c000f93a:	3c 0f                	cmp    al,0xf
c000f93c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f943:	75 30                	jne    c000f975 <CPU::detectFeatures()+0x5b1>
c000f945:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f94b:	c1 e9 14             	shr    ecx,0x14
c000f94e:	83 e0 3f             	and    eax,0x3f
c000f951:	83 c1 0f             	add    ecx,0xf
c000f954:	88 ca                	mov    dl,cl
c000f956:	c0 e9 02             	shr    cl,0x2
c000f959:	c1 e2 06             	shl    edx,0x6
c000f95c:	09 d0                	or     eax,edx
c000f95e:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f964:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f96a:	83 e0 c0             	and    eax,0xffffffc0
c000f96d:	09 c1                	or     ecx,eax
c000f96f:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f975:	83 ec 0c             	sub    esp,0xc
c000f978:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f97f:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f983:	50                   	push   eax
c000f984:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f988:	55                   	push   ebp
c000f989:	56                   	push   esi
c000f98a:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f98e:	57                   	push   edi
c000f98f:	68 00 00 00 80       	push   0x80000000
c000f994:	e8 5f f8 ff ff       	call   c000f1f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f999:	83 c4 20             	add    esp,0x20
c000f99c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f9a4:	76 22                	jbe    c000f9c8 <CPU::detectFeatures()+0x604>
c000f9a6:	83 ec 0c             	sub    esp,0xc
c000f9a9:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f9ad:	50                   	push   eax
c000f9ae:	55                   	push   ebp
c000f9af:	56                   	push   esi
c000f9b0:	57                   	push   edi
c000f9b1:	68 01 00 00 80       	push   0x80000001
c000f9b6:	e8 3d f8 ff ff       	call   c000f1f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f9bb:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f9c5:	83 c4 20             	add    esp,0x20
c000f9c8:	52                   	push   edx
c000f9c9:	52                   	push   edx
c000f9ca:	68 75 02 02 c0       	push   0xc0020275
c000f9cf:	53                   	push   ebx
c000f9d0:	e8 f9 c1 ff ff       	call   c000bbce <Device::setName(char const*)>
c000f9d5:	83 c4 10             	add    esp,0x10
c000f9d8:	eb 67                	jmp    c000fa41 <CPU::detectFeatures()+0x67d>
c000f9da:	50                   	push   eax
c000f9db:	50                   	push   eax
c000f9dc:	68 da 01 02 c0       	push   0xc00201da
c000f9e1:	55                   	push   ebp
c000f9e2:	e8 09 0c ff ff       	call   c00005f0 <strcpy>
c000f9e7:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f9f1:	e8 cd 07 ff ff       	call   c00001c3 <is486>
c000f9f6:	83 c4 10             	add    esp,0x10
c000f9f9:	85 c0                	test   eax,eax
c000f9fb:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fa01:	74 1d                	je     c000fa20 <CPU::detectFeatures()+0x65c>
c000fa03:	83 c8 07             	or     eax,0x7
c000fa06:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fa0c:	0f 20 c0             	mov    eax,cr0
c000fa0f:	83 e0 14             	and    eax,0x14
c000fa12:	83 f8 04             	cmp    eax,0x4
c000fa15:	75 0e                	jne    c000fa25 <CPU::detectFeatures()+0x661>
c000fa17:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000fa1e:	eb 21                	jmp    c000fa41 <CPU::detectFeatures()+0x67d>
c000fa20:	83 e0 f8             	and    eax,0xfffffff8
c000fa23:	eb e1                	jmp    c000fa06 <CPU::detectFeatures()+0x642>
c000fa25:	e8 74 07 ff ff       	call   c000019e <hasLegacyFPU>
c000fa2a:	83 e0 01             	and    eax,0x1
c000fa2d:	8d 14 00             	lea    edx,[eax+eax*1]
c000fa30:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fa36:	83 e0 fd             	and    eax,0xfffffffd
c000fa39:	09 d0                	or     eax,edx
c000fa3b:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fa41:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000fa48:	74 0e                	je     c000fa58 <CPU::detectFeatures()+0x694>
c000fa4a:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000fa4f:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000fa56:	eb 20                	jmp    c000fa78 <CPU::detectFeatures()+0x6b4>
c000fa58:	e8 41 07 ff ff       	call   c000019e <hasLegacyFPU>
c000fa5d:	83 e0 01             	and    eax,0x1
c000fa60:	8d 14 00             	lea    edx,[eax+eax*1]
c000fa63:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fa69:	83 e0 fd             	and    eax,0xfffffffd
c000fa6c:	09 d0                	or     eax,edx
c000fa6e:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fa74:	a8 02                	test   al,0x2
c000fa76:	75 d2                	jne    c000fa4a <CPU::detectFeatures()+0x686>
c000fa78:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000fa7f:	83 c4 2c             	add    esp,0x2c
c000fa82:	5b                   	pop    ebx
c000fa83:	5e                   	pop    esi
c000fa84:	5f                   	pop    edi
c000fa85:	5d                   	pop    ebp
c000fa86:	c3                   	ret    
c000fa87:	90                   	nop

c000fa88 <CPU::setupSMEP()>:
c000fa88:	0f 20 e0             	mov    eax,cr4
c000fa8b:	0d 00 00 10 00       	or     eax,0x100000
c000fa90:	0f 22 e0             	mov    cr4,eax
c000fa93:	c3                   	ret    

c000fa94 <CPU::setupUMIP()>:
c000fa94:	0f 20 e0             	mov    eax,cr4
c000fa97:	80 cc 08             	or     ah,0x8
c000fa9a:	0f 22 e0             	mov    cr4,eax
c000fa9d:	c3                   	ret    

c000fa9e <CPU::setupTSC()>:
c000fa9e:	0f 20 e0             	mov    eax,cr4
c000faa1:	83 c8 04             	or     eax,0x4
c000faa4:	0f 22 e0             	mov    cr4,eax
c000faa7:	c3                   	ret    

c000faa8 <CPU::setupLargePages()>:
c000faa8:	0f 20 e0             	mov    eax,cr4
c000faab:	83 c8 10             	or     eax,0x10
c000faae:	0f 22 e0             	mov    cr4,eax
c000fab1:	c3                   	ret    

c000fab2 <CPU::setupPAT()>:
c000fab2:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000fab7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000fabe:	74 2c                	je     c000faec <CPU::setupPAT()+0x3a>
c000fac0:	53                   	push   ebx
c000fac1:	83 ec 10             	sub    esp,0x10
c000fac4:	68 77 02 00 00       	push   0x277
c000fac9:	50                   	push   eax
c000faca:	e8 cd 73 ff ff       	call   c0006e9c <Computer::rdmsr(unsigned int)>
c000facf:	83 e2 f8             	and    edx,0xfffffff8
c000fad2:	83 ca 01             	or     edx,0x1
c000fad5:	52                   	push   edx
c000fad6:	50                   	push   eax
c000fad7:	68 77 02 00 00       	push   0x277
c000fadc:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c000fae2:	e8 e1 73 ff ff       	call   c0006ec8 <Computer::wrmsr(unsigned int, unsigned long long)>
c000fae7:	83 c4 28             	add    esp,0x28
c000faea:	5b                   	pop    ebx
c000faeb:	c3                   	ret    
c000faec:	c3                   	ret    
c000faed:	90                   	nop

c000faee <CPU::setupMTRR()>:
c000faee:	c3                   	ret    
c000faef:	90                   	nop

c000faf0 <CPU::setupGlobalPages()>:
c000faf0:	0f 20 e0             	mov    eax,cr4
c000faf3:	0c 80                	or     al,0x80
c000faf5:	0f 22 e0             	mov    cr4,eax
c000faf8:	c3                   	ret    
c000faf9:	90                   	nop

c000fafa <CPU::allowUsermodeDataAccess()>:
c000fafa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fafe:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fb05:	74 03                	je     c000fb0a <CPU::allowUsermodeDataAccess()+0x10>
c000fb07:	0f 01 cb             	stac   
c000fb0a:	c3                   	ret    
c000fb0b:	90                   	nop

c000fb0c <CPU::prohibitUsermodeDataAccess()>:
c000fb0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fb10:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fb17:	74 03                	je     c000fb1c <CPU::prohibitUsermodeDataAccess()+0x10>
c000fb19:	0f 01 ca             	clac   
c000fb1c:	c3                   	ret    
c000fb1d:	90                   	nop

c000fb1e <CPU::setupSMAP()>:
c000fb1e:	0f 20 e0             	mov    eax,cr4
c000fb21:	0d 00 00 20 00       	or     eax,0x200000
c000fb26:	0f 22 e0             	mov    cr4,eax
c000fb29:	eb e1                	jmp    c000fb0c <CPU::prohibitUsermodeDataAccess()>
c000fb2b:	90                   	nop

c000fb2c <CPU::setupFeatures()>:
c000fb2c:	53                   	push   ebx
c000fb2d:	83 ec 08             	sub    esp,0x8
c000fb30:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb34:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000fb3b:	74 18                	je     c000fb55 <CPU::setupFeatures()+0x29>
c000fb3d:	83 ec 0c             	sub    esp,0xc
c000fb40:	68 81 02 02 c0       	push   0xc0020281
c000fb45:	e8 bc aa ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c000fb4a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb4d:	e8 42 ff ff ff       	call   c000fa94 <CPU::setupUMIP()>
c000fb52:	83 c4 10             	add    esp,0x10
c000fb55:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000fb5c:	74 18                	je     c000fb76 <CPU::setupFeatures()+0x4a>
c000fb5e:	83 ec 0c             	sub    esp,0xc
c000fb61:	68 8b 02 02 c0       	push   0xc002028b
c000fb66:	e8 9b aa ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c000fb6b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb6e:	e8 2b ff ff ff       	call   c000fa9e <CPU::setupTSC()>
c000fb73:	83 c4 10             	add    esp,0x10
c000fb76:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000fb7d:	74 18                	je     c000fb97 <CPU::setupFeatures()+0x6b>
c000fb7f:	83 ec 0c             	sub    esp,0xc
c000fb82:	68 94 02 02 c0       	push   0xc0020294
c000fb87:	e8 7a aa ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c000fb8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb8f:	e8 14 ff ff ff       	call   c000faa8 <CPU::setupLargePages()>
c000fb94:	83 c4 10             	add    esp,0x10
c000fb97:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000fb9e:	74 18                	je     c000fbb8 <CPU::setupFeatures()+0x8c>
c000fba0:	83 ec 0c             	sub    esp,0xc
c000fba3:	68 9d 02 02 c0       	push   0xc002029d
c000fba8:	e8 59 aa ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c000fbad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbb0:	e8 3b ff ff ff       	call   c000faf0 <CPU::setupGlobalPages()>
c000fbb5:	83 c4 10             	add    esp,0x10
c000fbb8:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000fbbf:	74 18                	je     c000fbd9 <CPU::setupFeatures()+0xad>
c000fbc1:	83 ec 0c             	sub    esp,0xc
c000fbc4:	68 af 02 02 c0       	push   0xc00202af
c000fbc9:	e8 38 aa ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c000fbce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbd1:	e8 dc fe ff ff       	call   c000fab2 <CPU::setupPAT()>
c000fbd6:	83 c4 10             	add    esp,0x10
c000fbd9:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000fbe0:	74 11                	je     c000fbf3 <CPU::setupFeatures()+0xc7>
c000fbe2:	c7 44 24 10 b8 02 02 c0 	mov    DWORD PTR [esp+0x10],0xc00202b8
c000fbea:	83 c4 08             	add    esp,0x8
c000fbed:	5b                   	pop    ebx
c000fbee:	e9 13 aa ff ff       	jmp    c000a606 <Dbg::kprintf(char const*, ...)>
c000fbf3:	83 c4 08             	add    esp,0x8
c000fbf6:	5b                   	pop    ebx
c000fbf7:	c3                   	ret    

c000fbf8 <CPU::open(int, int, void*)>:
c000fbf8:	57                   	push   edi
c000fbf9:	56                   	push   esi
c000fbfa:	53                   	push   ebx
c000fbfb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fbff:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fc03:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000fc09:	83 ec 0c             	sub    esp,0xc
c000fc0c:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000fc12:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000fc18:	50                   	push   eax
c000fc19:	e8 68 75 ff ff       	call   c0007186 <GDT::setup()>
c000fc1e:	83 c4 0c             	add    esp,0xc
c000fc21:	6a 00                	push   0x0
c000fc23:	68 ef be ad de       	push   0xdeadbeef
c000fc28:	57                   	push   edi
c000fc29:	e8 a2 90 ff ff       	call   c0008cd0 <TSS::setup(unsigned long, unsigned long)>
c000fc2e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fc31:	e8 7a 90 ff ff       	call   c0008cb0 <TSS::flush()>
c000fc36:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000fc3c:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc3f:	e8 92 77 ff ff       	call   c00073d6 <IDT::setup()>
c000fc44:	b8 00 04 00 00       	mov    eax,0x400
c000fc49:	0f 23 f8             	mov    db7,eax
c000fc4c:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000fc56:	e8 e6 7e ff ff       	call   c0007b41 <Phys::allocatePage()>
c000fc5b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000fc61:	89 30                	mov    DWORD PTR [eax],esi
c000fc63:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000fc69:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000fc6c:	58                   	pop    eax
c000fc6d:	5a                   	pop    edx
c000fc6e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000fc74:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fc78:	e8 6b a0 ff ff       	call   c0009ce8 <VAS::setCPUSpecific(unsigned long)>
c000fc7d:	c7 04 24 c2 02 02 c0 	mov    DWORD PTR [esp],0xc00202c2
c000fc84:	e8 c6 00 00 00       	call   c000fd4f <KeSetBootMessage(char const*)>
c000fc89:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc8c:	e8 33 f7 ff ff       	call   c000f3c4 <CPU::detectFeatures()>
c000fc91:	c7 04 24 e5 02 02 c0 	mov    DWORD PTR [esp],0xc00202e5
c000fc98:	e8 b2 00 00 00       	call   c000fd4f <KeSetBootMessage(char const*)>
c000fc9d:	e8 01 6d 00 00       	call   c00169a3 <HalInitialise()>
c000fca2:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c000fca7:	83 e0 10             	and    eax,0x10
c000fcaa:	83 f8 01             	cmp    eax,0x1
c000fcad:	19 c0                	sbb    eax,eax
c000fcaf:	83 e0 46             	and    eax,0x46
c000fcb2:	83 c0 1e             	add    eax,0x1e
c000fcb5:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcb8:	e8 dc d6 ff ff       	call   c000d399 <setupTimer(int)>
c000fcbd:	83 c4 10             	add    esp,0x10
c000fcc0:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fcc6:	f6 05 d0 3e 02 c0 20 	test   BYTE PTR ds:0xc0023ed0,0x20
c000fccd:	74 0c                	je     c000fcdb <CPU::open(int, int, void*)+0xe3>
c000fccf:	83 ec 0c             	sub    esp,0xc
c000fcd2:	53                   	push   ebx
c000fcd3:	e8 54 fe ff ff       	call   c000fb2c <CPU::setupFeatures()>
c000fcd8:	83 c4 10             	add    esp,0x10
c000fcdb:	5b                   	pop    ebx
c000fcdc:	31 c0                	xor    eax,eax
c000fcde:	5e                   	pop    esi
c000fcdf:	5f                   	pop    edi
c000fce0:	c3                   	ret    

c000fce1 <KeDisplaySplashScreen()>:
c000fce1:	55                   	push   ebp
c000fce2:	bd 05 00 00 00       	mov    ebp,0x5
c000fce7:	57                   	push   edi
c000fce8:	bf 80 16 02 c0       	mov    edi,0xc0021680
c000fced:	56                   	push   esi
c000fcee:	be 0a 00 00 00       	mov    esi,0xa
c000fcf3:	53                   	push   ebx
c000fcf4:	31 db                	xor    ebx,ebx
c000fcf6:	83 ec 0c             	sub    esp,0xc
c000fcf9:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fcfc:	84 c0                	test   al,al
c000fcfe:	74 47                	je     c000fd47 <KeDisplaySplashScreen()+0x66>
c000fd00:	80 bb b6 16 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffde94a],0xdb
c000fd07:	75 13                	jne    c000fd1c <KeDisplaySplashScreen()+0x3b>
c000fd09:	0f b6 93 b5 16 02 c0 	movzx  edx,BYTE PTR [ebx-0x3ffde94b]
c000fd10:	83 e2 fe             	and    edx,0xfffffffe
c000fd13:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fd19:	75 01                	jne    c000fd1c <KeDisplaySplashScreen()+0x3b>
c000fd1b:	46                   	inc    esi
c000fd1c:	3c 0d                	cmp    al,0xd
c000fd1e:	74 24                	je     c000fd44 <KeDisplaySplashScreen()+0x63>
c000fd20:	3c 0a                	cmp    al,0xa
c000fd22:	75 0a                	jne    c000fd2e <KeDisplaySplashScreen()+0x4d>
c000fd24:	45                   	inc    ebp
c000fd25:	be 0a 00 00 00       	mov    esi,0xa
c000fd2a:	31 db                	xor    ebx,ebx
c000fd2c:	eb 16                	jmp    c000fd44 <KeDisplaySplashScreen()+0x63>
c000fd2e:	83 ec 0c             	sub    esp,0xc
c000fd31:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fd34:	55                   	push   ebp
c000fd35:	43                   	inc    ebx
c000fd36:	52                   	push   edx
c000fd37:	6a 00                	push   0x0
c000fd39:	6a 0e                	push   0xe
c000fd3b:	50                   	push   eax
c000fd3c:	e8 c7 78 00 00       	call   c0017608 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fd41:	83 c4 20             	add    esp,0x20
c000fd44:	47                   	inc    edi
c000fd45:	eb b2                	jmp    c000fcf9 <KeDisplaySplashScreen()+0x18>
c000fd47:	83 c4 0c             	add    esp,0xc
c000fd4a:	5b                   	pop    ebx
c000fd4b:	5e                   	pop    esi
c000fd4c:	5f                   	pop    edi
c000fd4d:	5d                   	pop    ebp
c000fd4e:	c3                   	ret    

c000fd4f <KeSetBootMessage(char const*)>:
c000fd4f:	57                   	push   edi
c000fd50:	56                   	push   esi
c000fd51:	53                   	push   ebx
c000fd52:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fd58:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fd5f:	68 9e 00 00 00       	push   0x9e
c000fd64:	6a 00                	push   0x0
c000fd66:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fd6a:	56                   	push   esi
c000fd6b:	e8 50 07 ff ff       	call   c00004c0 <memset>
c000fd70:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd73:	e8 b8 07 ff ff       	call   c0000530 <strlen>
c000fd78:	ba 50 00 00 00       	mov    edx,0x50
c000fd7d:	83 c4 10             	add    esp,0x10
c000fd80:	29 c2                	sub    edx,eax
c000fd82:	31 c9                	xor    ecx,ecx
c000fd84:	83 e2 fe             	and    edx,0xfffffffe
c000fd87:	01 f2                	add    edx,esi
c000fd89:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fd8e:	84 c0                	test   al,al
c000fd90:	74 0a                	je     c000fd9c <KeSetBootMessage(char const*)+0x4d>
c000fd92:	80 cc 0f             	or     ah,0xf
c000fd95:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fd99:	41                   	inc    ecx
c000fd9a:	eb ed                	jmp    c000fd89 <KeSetBootMessage(char const*)+0x3a>
c000fd9c:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fda1:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fda6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fda8:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fdae:	5b                   	pop    ebx
c000fdaf:	5e                   	pop    esi
c000fdb0:	5f                   	pop    edi
c000fdb1:	c3                   	ret    

c000fdb2 <EnvVarContainer::getEnv(char const*)>:
c000fdb2:	57                   	push   edi
c000fdb3:	56                   	push   esi
c000fdb4:	53                   	push   ebx
c000fdb5:	31 db                	xor    ebx,ebx
c000fdb7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fdbb:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fdbd:	7e 2b                	jle    c000fdea <EnvVarContainer::getEnv(char const*)+0x38>
c000fdbf:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fdc6:	50                   	push   eax
c000fdc7:	50                   	push   eax
c000fdc8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fdcb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fdce:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fdd2:	e8 f9 08 ff ff       	call   c00006d0 <strcmp>
c000fdd7:	83 c4 10             	add    esp,0x10
c000fdda:	85 c0                	test   eax,eax
c000fddc:	75 09                	jne    c000fde7 <EnvVarContainer::getEnv(char const*)+0x35>
c000fdde:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fde1:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fde5:	eb 05                	jmp    c000fdec <EnvVarContainer::getEnv(char const*)+0x3a>
c000fde7:	43                   	inc    ebx
c000fde8:	eb d1                	jmp    c000fdbb <EnvVarContainer::getEnv(char const*)+0x9>
c000fdea:	31 c0                	xor    eax,eax
c000fdec:	5b                   	pop    ebx
c000fded:	5e                   	pop    esi
c000fdee:	5f                   	pop    edi
c000fdef:	c3                   	ret    

c000fdf0 <EnvVarContainer::setEnv(char const*, char const*)>:
c000fdf0:	55                   	push   ebp
c000fdf1:	57                   	push   edi
c000fdf2:	56                   	push   esi
c000fdf3:	53                   	push   ebx
c000fdf4:	83 ec 28             	sub    esp,0x28
c000fdf7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fdfb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fdff:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fe03:	56                   	push   esi
c000fe04:	e8 27 07 ff ff       	call   c0000530 <strlen>
c000fe09:	40                   	inc    eax
c000fe0a:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe0d:	e8 53 7a ff ff       	call   c0007865 <malloc>
c000fe12:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fe15:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fe19:	e8 12 07 ff ff       	call   c0000530 <strlen>
c000fe1e:	40                   	inc    eax
c000fe1f:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe22:	e8 3e 7a ff ff       	call   c0007865 <malloc>
c000fe27:	89 34 24             	mov    DWORD PTR [esp],esi
c000fe2a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fe2e:	e8 fd 06 ff ff       	call   c0000530 <strlen>
c000fe33:	83 c4 0c             	add    esp,0xc
c000fe36:	40                   	inc    eax
c000fe37:	50                   	push   eax
c000fe38:	6a 00                	push   0x0
c000fe3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fe3e:	e8 7d 06 ff ff       	call   c00004c0 <memset>
c000fe43:	89 34 24             	mov    DWORD PTR [esp],esi
c000fe46:	e8 e5 06 ff ff       	call   c0000530 <strlen>
c000fe4b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fe4f:	8d 48 01             	lea    ecx,[eax+0x1]
c000fe52:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fe57:	89 de                	mov    esi,ebx
c000fe59:	e8 d2 06 ff ff       	call   c0000530 <strlen>
c000fe5e:	83 c4 0c             	add    esp,0xc
c000fe61:	40                   	inc    eax
c000fe62:	50                   	push   eax
c000fe63:	6a 00                	push   0x0
c000fe65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fe69:	e8 52 06 ff ff       	call   c00004c0 <memset>
c000fe6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fe71:	e8 ba 06 ff ff       	call   c0000530 <strlen>
c000fe76:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fe7a:	8d 48 01             	lea    ecx,[eax+0x1]
c000fe7d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe7f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fe82:	40                   	inc    eax
c000fe83:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fe86:	c1 e0 03             	shl    eax,0x3
c000fe89:	5a                   	pop    edx
c000fe8a:	59                   	pop    ecx
c000fe8b:	50                   	push   eax
c000fe8c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fe8f:	e8 bd 79 ff ff       	call   c0007851 <realloc>
c000fe94:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fe98:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fe9b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fe9e:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fea2:	b9 08 00 00 00       	mov    ecx,0x8
c000fea7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fea9:	83 c4 2c             	add    esp,0x2c
c000feac:	5b                   	pop    ebx
c000fead:	5e                   	pop    esi
c000feae:	5f                   	pop    edi
c000feaf:	5d                   	pop    ebp
c000feb0:	c3                   	ret    
c000feb1:	90                   	nop

c000feb2 <EnvVarContainer::deleteEnv(char const*)>:
c000feb2:	c3                   	ret    
c000feb3:	90                   	nop

c000feb4 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000feb4:	55                   	push   ebp
c000feb5:	57                   	push   edi
c000feb6:	56                   	push   esi
c000feb7:	53                   	push   ebx
c000feb8:	81 ec 38 01 00 00    	sub    esp,0x138
c000febe:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fec5:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fecc:	68 14 01 00 00       	push   0x114
c000fed1:	e8 8f 79 ff ff       	call   c0007865 <malloc>
c000fed6:	83 c4 0c             	add    esp,0xc
c000fed9:	89 c3                	mov    ebx,eax
c000fedb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fede:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fee5:	50                   	push   eax
c000fee6:	e8 91 ac ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c000feeb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000feee:	e8 b7 af ff ff       	call   c000aeaa <File::exists()>
c000fef3:	83 c4 10             	add    esp,0x10
c000fef6:	84 c0                	test   al,al
c000fef8:	75 31                	jne    c000ff2b <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fefa:	50                   	push   eax
c000fefb:	50                   	push   eax
c000fefc:	6a 12                	push   0x12
c000fefe:	53                   	push   ebx
c000feff:	e8 38 ad ff ff       	call   c000ac3c <File::open(FileOpenMode)>
c000ff04:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ff06:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000ff09:	89 34 24             	mov    DWORD PTR [esp],esi
c000ff0c:	e8 1f 06 ff ff       	call   c0000530 <strlen>
c000ff11:	5a                   	pop    edx
c000ff12:	31 d2                	xor    edx,edx
c000ff14:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000ff18:	51                   	push   ecx
c000ff19:	56                   	push   esi
c000ff1a:	52                   	push   edx
c000ff1b:	50                   	push   eax
c000ff1c:	53                   	push   ebx
c000ff1d:	ff d7                	call   edi
c000ff1f:	83 c4 14             	add    esp,0x14
c000ff22:	53                   	push   ebx
c000ff23:	e8 72 ad ff ff       	call   c000ac9a <File::close()>
c000ff28:	83 c4 10             	add    esp,0x10
c000ff2b:	56                   	push   esi
c000ff2c:	31 f6                	xor    esi,esi
c000ff2e:	68 00 01 00 00       	push   0x100
c000ff33:	6a 00                	push   0x0
c000ff35:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000ff39:	50                   	push   eax
c000ff3a:	e8 81 05 ff ff       	call   c00004c0 <memset>
c000ff3f:	5f                   	pop    edi
c000ff40:	58                   	pop    eax
c000ff41:	6a 01                	push   0x1
c000ff43:	53                   	push   ebx
c000ff44:	e8 f3 ac ff ff       	call   c000ac3c <File::open(FileOpenMode)>
c000ff49:	83 c4 10             	add    esp,0x10
c000ff4c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ff54:	83 ec 0c             	sub    esp,0xc
c000ff57:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ff59:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000ff5d:	51                   	push   ecx
c000ff5e:	8d 54 24 23          	lea    edx,[esp+0x23]
c000ff62:	52                   	push   edx
c000ff63:	6a 00                	push   0x0
c000ff65:	6a 01                	push   0x1
c000ff67:	53                   	push   ebx
c000ff68:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ff6b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000ff6f:	83 c4 20             	add    esp,0x20
c000ff72:	3c 0d                	cmp    al,0xd
c000ff74:	0f 84 09 01 00 00    	je     c0010083 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000ff7a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000ff7f:	0f 84 ef 00 00 00    	je     c0010074 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000ff85:	3c 0a                	cmp    al,0xa
c000ff87:	74 13                	je     c000ff9c <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000ff89:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ff8e:	74 0c                	je     c000ff9c <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000ff90:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000ff96:	0f 8e d8 00 00 00    	jle    c0010074 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000ff9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ffa0:	83 ec 0c             	sub    esp,0xc
c000ffa3:	8d 78 01             	lea    edi,[eax+0x1]
c000ffa6:	57                   	push   edi
c000ffa7:	e8 b9 78 ff ff       	call   c0007865 <malloc>
c000ffac:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000ffb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ffb4:	8d 56 04             	lea    edx,[esi+0x4]
c000ffb7:	89 14 24             	mov    DWORD PTR [esp],edx
c000ffba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ffbe:	e8 a2 78 ff ff       	call   c0007865 <malloc>
c000ffc3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ffc7:	83 c4 0c             	add    esp,0xc
c000ffca:	57                   	push   edi
c000ffcb:	6a 00                	push   0x0
c000ffcd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ffd1:	e8 ea 04 ff ff       	call   c00004c0 <memset>
c000ffd6:	8d 74 24 30          	lea    esi,[esp+0x30]
c000ffda:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000ffde:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ffe2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ffe4:	83 c4 0c             	add    esp,0xc
c000ffe7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ffeb:	52                   	push   edx
c000ffec:	6a 00                	push   0x0
c000ffee:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fff2:	e8 c9 04 ff ff       	call   c00004c0 <memset>
c000fff7:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fffb:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000ffff:	89 34 24             	mov    DWORD PTR [esp],esi
c0010002:	e8 29 05 ff ff       	call   c0000530 <strlen>
c0010007:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001000b:	89 c1                	mov    ecx,eax
c001000d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001000f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010012:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010015:	40                   	inc    eax
c0010016:	83 c4 10             	add    esp,0x10
c0010019:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001001c:	85 d2                	test   edx,edx
c001001e:	75 0c                	jne    c001002c <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0010020:	83 ec 0c             	sub    esp,0xc
c0010023:	6a 08                	push   0x8
c0010025:	e8 3b 78 ff ff       	call   c0007865 <malloc>
c001002a:	eb 0c                	jmp    c0010038 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c001002c:	c1 e0 03             	shl    eax,0x3
c001002f:	51                   	push   ecx
c0010030:	51                   	push   ecx
c0010031:	50                   	push   eax
c0010032:	52                   	push   edx
c0010033:	e8 19 78 ff ff       	call   c0007851 <realloc>
c0010038:	83 c4 10             	add    esp,0x10
c001003b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001003e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010041:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010044:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010048:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001004c:	b9 08 00 00 00       	mov    ecx,0x8
c0010051:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010053:	31 f6                	xor    esi,esi
c0010055:	50                   	push   eax
c0010056:	68 00 01 00 00       	push   0x100
c001005b:	6a 00                	push   0x0
c001005d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010061:	50                   	push   eax
c0010062:	e8 59 04 ff ff       	call   c00004c0 <memset>
c0010067:	83 c4 10             	add    esp,0x10
c001006a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010072:	eb 0f                	jmp    c0010083 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0010074:	3c 3d                	cmp    al,0x3d
c0010076:	74 07                	je     c001007f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0010078:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001007c:	46                   	inc    esi
c001007d:	eb 04                	jmp    c0010083 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001007f:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010083:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010088:	0f 85 c6 fe ff ff    	jne    c000ff54 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001008e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010094:	5b                   	pop    ebx
c0010095:	5e                   	pop    esi
c0010096:	5f                   	pop    edi
c0010097:	5d                   	pop    ebp
c0010098:	c3                   	ret    
c0010099:	90                   	nop

c001009a <EnvVarContainer::__loadSystem()>:
c001009a:	83 ec 10             	sub    esp,0x10
c001009d:	68 e0 17 02 c0       	push   0xc00217e0
c00100a2:	68 28 03 02 c0       	push   0xc0020328
c00100a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100ab:	e8 04 fe ff ff       	call   c000feb4 <EnvVarContainer::loadFrom(char const*, char const*)>
c00100b0:	83 c4 1c             	add    esp,0x1c
c00100b3:	c3                   	ret    

c00100b4 <EnvVarContainer::__loadUser()>:
c00100b4:	c3                   	ret    
c00100b5:	90                   	nop

c00100b6 <EnvVarContainer::EnvVarContainer(Process*)>:
c00100b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100ba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00100c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00100c8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00100cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100cf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00100d6:	90                   	nop
c00100d7:	c3                   	ret    

c00100d8 <EnvVarContainer::~EnvVarContainer()>:
c00100d8:	83 ec 0c             	sub    esp,0xc
c00100db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00100e2:	85 c0                	test   eax,eax
c00100e4:	74 1d                	je     c0010103 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00100e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00100ec:	85 c0                	test   eax,eax
c00100ee:	74 13                	je     c0010103 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00100f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00100f7:	83 ec 0c             	sub    esp,0xc
c00100fa:	50                   	push   eax
c00100fb:	e8 75 77 ff ff       	call   c0007875 <free>
c0010100:	83 c4 10             	add    esp,0x10
c0010103:	90                   	nop
c0010104:	83 c4 0c             	add    esp,0xc
c0010107:	c3                   	ret    

c0010108 <Krnl::getEnv(Process*, char const*)>:
c0010108:	53                   	push   ebx
c0010109:	83 ec 08             	sub    esp,0x8
c001010c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010110:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010114:	39 05 90 71 02 c0    	cmp    DWORD PTR ds:0xc0027190,eax
c001011a:	74 04                	je     c0010120 <Krnl::getEnv(Process*, char const*)+0x18>
c001011c:	85 c0                	test   eax,eax
c001011e:	75 0b                	jne    c001012b <Krnl::getEnv(Process*, char const*)+0x23>
c0010120:	a1 30 69 02 c0       	mov    eax,ds:0xc0026930
c0010125:	85 c0                	test   eax,eax
c0010127:	75 19                	jne    c0010142 <Krnl::getEnv(Process*, char const*)+0x3a>
c0010129:	eb 27                	jmp    c0010152 <Krnl::getEnv(Process*, char const*)+0x4a>
c001012b:	52                   	push   edx
c001012c:	52                   	push   edx
c001012d:	53                   	push   ebx
c001012e:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010134:	e8 79 fc ff ff       	call   c000fdb2 <EnvVarContainer::getEnv(char const*)>
c0010139:	83 c4 10             	add    esp,0x10
c001013c:	85 c0                	test   eax,eax
c001013e:	75 28                	jne    c0010168 <Krnl::getEnv(Process*, char const*)+0x60>
c0010140:	eb de                	jmp    c0010120 <Krnl::getEnv(Process*, char const*)+0x18>
c0010142:	52                   	push   edx
c0010143:	52                   	push   edx
c0010144:	53                   	push   ebx
c0010145:	50                   	push   eax
c0010146:	e8 67 fc ff ff       	call   c000fdb2 <EnvVarContainer::getEnv(char const*)>
c001014b:	83 c4 10             	add    esp,0x10
c001014e:	85 c0                	test   eax,eax
c0010150:	75 16                	jne    c0010168 <Krnl::getEnv(Process*, char const*)+0x60>
c0010152:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010156:	a1 34 69 02 c0       	mov    eax,ds:0xc0026934
c001015b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001015f:	83 c4 08             	add    esp,0x8
c0010162:	5b                   	pop    ebx
c0010163:	e9 4a fc ff ff       	jmp    c000fdb2 <EnvVarContainer::getEnv(char const*)>
c0010168:	83 c4 08             	add    esp,0x8
c001016b:	5b                   	pop    ebx
c001016c:	c3                   	ret    

c001016d <Krnl::setEnvSystem(char const*, char const*)>:
c001016d:	83 ec 10             	sub    esp,0x10
c0010170:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010174:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010178:	ff 35 34 69 02 c0    	push   DWORD PTR ds:0xc0026934
c001017e:	e8 6d fc ff ff       	call   c000fdf0 <EnvVarContainer::setEnv(char const*, char const*)>
c0010183:	83 c4 1c             	add    esp,0x1c
c0010186:	c3                   	ret    

c0010187 <Krnl::setEnvUser(char const*, char const*)>:
c0010187:	a1 30 69 02 c0       	mov    eax,ds:0xc0026930
c001018c:	85 c0                	test   eax,eax
c001018e:	74 15                	je     c00101a5 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0010190:	83 ec 10             	sub    esp,0x10
c0010193:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010197:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001019b:	50                   	push   eax
c001019c:	e8 4f fc ff ff       	call   c000fdf0 <EnvVarContainer::setEnv(char const*, char const*)>
c00101a1:	83 c4 1c             	add    esp,0x1c
c00101a4:	c3                   	ret    
c00101a5:	c3                   	ret    

c00101a6 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00101a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101aa:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00101b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00101b4:	e9 37 fc ff ff       	jmp    c000fdf0 <EnvVarContainer::setEnv(char const*, char const*)>

c00101b9 <Krnl::deleteEnvSystem(char const*)>:
c00101b9:	c3                   	ret    

c00101ba <Krnl::deleteEnvUser(char const*)>:
c00101ba:	c3                   	ret    

c00101bb <Krnl::deleteEnvProcess(Process*, char const*)>:
c00101bb:	c3                   	ret    

c00101bc <Krnl::newProcessEnv(Process*)>:
c00101bc:	83 ec 28             	sub    esp,0x28
c00101bf:	6a 0c                	push   0xc
c00101c1:	e8 9f 76 ff ff       	call   c0007865 <malloc>
c00101c6:	5a                   	pop    edx
c00101c7:	59                   	pop    ecx
c00101c8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00101cc:	50                   	push   eax
c00101cd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00101d1:	e8 e0 fe ff ff       	call   c00100b6 <EnvVarContainer::EnvVarContainer(Process*)>
c00101d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101da:	83 c4 2c             	add    esp,0x2c
c00101dd:	c3                   	ret    

c00101de <Krnl::copyProcessEnv(Process*, Process*)>:
c00101de:	57                   	push   edi
c00101df:	56                   	push   esi
c00101e0:	53                   	push   ebx
c00101e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101e5:	83 ec 0c             	sub    esp,0xc
c00101e8:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00101ee:	6a 0c                	push   0xc
c00101f0:	e8 70 76 ff ff       	call   c0007865 <malloc>
c00101f5:	89 c3                	mov    ebx,eax
c00101f7:	58                   	pop    eax
c00101f8:	5a                   	pop    edx
c00101f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101fd:	53                   	push   ebx
c00101fe:	e8 b3 fe ff ff       	call   c00100b6 <EnvVarContainer::EnvVarContainer(Process*)>
c0010203:	8b 07                	mov    eax,DWORD PTR [edi]
c0010205:	89 03                	mov    DWORD PTR [ebx],eax
c0010207:	c1 e0 03             	shl    eax,0x3
c001020a:	89 04 24             	mov    DWORD PTR [esp],eax
c001020d:	e8 53 76 ff ff       	call   c0007865 <malloc>
c0010212:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010215:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0010217:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001021a:	c1 e1 03             	shl    ecx,0x3
c001021d:	89 c7                	mov    edi,eax
c001021f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010221:	83 c4 10             	add    esp,0x10
c0010224:	89 d8                	mov    eax,ebx
c0010226:	5b                   	pop    ebx
c0010227:	5e                   	pop    esi
c0010228:	5f                   	pop    edi
c0010229:	c3                   	ret    

c001022a <Krnl::loadSystemEnv()>:
c001022a:	53                   	push   ebx
c001022b:	83 ec 14             	sub    esp,0x14
c001022e:	6a 0c                	push   0xc
c0010230:	e8 30 76 ff ff       	call   c0007865 <malloc>
c0010235:	89 c3                	mov    ebx,eax
c0010237:	58                   	pop    eax
c0010238:	5a                   	pop    edx
c0010239:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c001023f:	53                   	push   ebx
c0010240:	e8 71 fe ff ff       	call   c00100b6 <EnvVarContainer::EnvVarContainer(Process*)>
c0010245:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010248:	89 1d 34 69 02 c0    	mov    DWORD PTR ds:0xc0026934,ebx
c001024e:	e8 47 fe ff ff       	call   c001009a <EnvVarContainer::__loadSystem()>
c0010253:	83 c4 18             	add    esp,0x18
c0010256:	5b                   	pop    ebx
c0010257:	c3                   	ret    

c0010258 <Krnl::loadUserEnv()>:
c0010258:	53                   	push   ebx
c0010259:	83 ec 14             	sub    esp,0x14
c001025c:	6a 0c                	push   0xc
c001025e:	e8 02 76 ff ff       	call   c0007865 <malloc>
c0010263:	89 c3                	mov    ebx,eax
c0010265:	58                   	pop    eax
c0010266:	5a                   	pop    edx
c0010267:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c001026d:	53                   	push   ebx
c001026e:	e8 43 fe ff ff       	call   c00100b6 <EnvVarContainer::EnvVarContainer(Process*)>
c0010273:	89 1d 30 69 02 c0    	mov    DWORD PTR ds:0xc0026930,ebx
c0010279:	83 c4 18             	add    esp,0x18
c001027c:	5b                   	pop    ebx
c001027d:	c3                   	ret    

c001027e <Krnl::flushEnv()>:
c001027e:	c3                   	ret    

c001027f <Krnl::getProcessTotalEnvCount(Process*)>:
c001027f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010283:	8b 15 30 69 02 c0    	mov    edx,DWORD PTR ds:0xc0026930
c0010289:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001028f:	a1 34 69 02 c0       	mov    eax,ds:0xc0026934
c0010294:	8b 00                	mov    eax,DWORD PTR [eax]
c0010296:	03 01                	add    eax,DWORD PTR [ecx]
c0010298:	85 d2                	test   edx,edx
c001029a:	74 02                	je     c001029e <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001029c:	03 02                	add    eax,DWORD PTR [edx]
c001029e:	c3                   	ret    

c001029f <Krnl::getProcessEnvPair(Process*, int)>:
c001029f:	57                   	push   edi
c00102a0:	56                   	push   esi
c00102a1:	8b 35 30 69 02 c0    	mov    esi,DWORD PTR ds:0xc0026930
c00102a7:	53                   	push   ebx
c00102a8:	85 f6                	test   esi,esi
c00102aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00102ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00102b2:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00102b8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00102bc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00102be:	75 16                	jne    c00102d6 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c00102c0:	39 c2                	cmp    edx,eax
c00102c2:	7c 16                	jl     c00102da <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00102c4:	8b 0d 34 69 02 c0    	mov    ecx,DWORD PTR ds:0xc0026934
c00102ca:	8b 31                	mov    esi,DWORD PTR [ecx]
c00102cc:	01 c6                	add    esi,eax
c00102ce:	39 d6                	cmp    esi,edx
c00102d0:	7e 3c                	jle    c001030e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00102d2:	29 c2                	sub    edx,eax
c00102d4:	eb 04                	jmp    c00102da <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00102d6:	39 c2                	cmp    edx,eax
c00102d8:	7d 05                	jge    c00102df <Krnl::getProcessEnvPair(Process*, int)+0x40>
c00102da:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00102dd:	eb 20                	jmp    c00102ff <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00102df:	8b 3e                	mov    edi,DWORD PTR [esi]
c00102e1:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00102e4:	39 d1                	cmp    ecx,edx
c00102e6:	7e 04                	jle    c00102ec <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00102e8:	29 c2                	sub    edx,eax
c00102ea:	eb 10                	jmp    c00102fc <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00102ec:	8b 35 34 69 02 c0    	mov    esi,DWORD PTR ds:0xc0026934
c00102f2:	03 0e                	add    ecx,DWORD PTR [esi]
c00102f4:	39 d1                	cmp    ecx,edx
c00102f6:	7e 16                	jle    c001030e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00102f8:	29 c2                	sub    edx,eax
c00102fa:	29 fa                	sub    edx,edi
c00102fc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00102ff:	8d 14 d0             	lea    edx,[eax+edx*8]
c0010302:	8b 02                	mov    eax,DWORD PTR [edx]
c0010304:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010307:	89 03                	mov    DWORD PTR [ebx],eax
c0010309:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001030c:	eb 1d                	jmp    c001032b <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001030e:	83 ec 0c             	sub    esp,0xc
c0010311:	68 4a 03 02 c0       	push   0xc002034a
c0010316:	e8 ac 00 00 00       	call   c00103c7 <KePanic(char const*)>
c001031b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010321:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010328:	83 c4 10             	add    esp,0x10
c001032b:	89 d8                	mov    eax,ebx
c001032d:	5b                   	pop    ebx
c001032e:	5e                   	pop    esi
c001032f:	5f                   	pop    edi
c0010330:	c2 04 00             	ret    0x4

c0010333 <CPU::current()>:
c0010333:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0010338:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001033e:	c3                   	ret    

c001033f <operator new(unsigned long)>:
c001033f:	e9 21 75 ff ff       	jmp    c0007865 <malloc>

c0010344 <operator delete(void*)>:
c0010344:	e9 3c 75 ff ff       	jmp    c0007885 <rfree>

c0010349 <disableIRQs()>:
c0010349:	fa                   	cli    
c001034a:	c3                   	ret    

c001034b <enableIRQs()>:
c001034b:	fb                   	sti    
c001034c:	c3                   	ret    

c001034d <lockScheduler()>:
c001034d:	fa                   	cli    
c001034e:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0010354:	c3                   	ret    

c0010355 <unlockScheduler()>:
c0010355:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001035a:	48                   	dec    eax
c001035b:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0010360:	75 01                	jne    c0010363 <unlockScheduler()+0xe>
c0010362:	fb                   	sti    
c0010363:	c3                   	ret    

c0010364 <lockStuff()>:
c0010364:	fa                   	cli    
c0010365:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001036b:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c0010371:	c3                   	ret    

c0010372 <unlockStuff()>:
c0010372:	83 ec 0c             	sub    esp,0xc
c0010375:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c001037a:	48                   	dec    eax
c001037b:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0010380:	75 18                	jne    c001039a <unlockStuff()+0x28>
c0010382:	83 3d 60 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027160,0x0
c0010389:	74 0f                	je     c001039a <unlockStuff()+0x28>
c001038b:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0010395:	e8 c2 46 00 00       	call   c0014a5c <schedule()>
c001039a:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001039f:	48                   	dec    eax
c00103a0:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00103a5:	75 01                	jne    c00103a8 <unlockStuff()+0x36>
c00103a7:	fb                   	sti    
c00103a8:	83 c4 0c             	add    esp,0xc
c00103ab:	c3                   	ret    

c00103ac <Virt::getAKernelVAS()>:
c00103ac:	a1 b0 3f 02 c0       	mov    eax,ds:0xc0023fb0
c00103b1:	c3                   	ret    

c00103b2 <__not_memcpy>:
c00103b2:	57                   	push   edi
c00103b3:	56                   	push   esi
c00103b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00103b8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00103bc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00103c0:	89 c7                	mov    edi,eax
c00103c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103c4:	5e                   	pop    esi
c00103c5:	5f                   	pop    edi
c00103c6:	c3                   	ret    

c00103c7 <KePanic(char const*)>:
c00103c7:	c6 05 38 69 02 c0 01 	mov    BYTE PTR ds:0xc0026938,0x1
c00103ce:	e9 bc 64 00 00       	jmp    c001688f <HalPanic(char const*)>

c00103d3 <Krnl::powerThread(void*)>:
c00103d3:	83 ec 0c             	sub    esp,0xc
c00103d6:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00103db:	48                   	dec    eax
c00103dc:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00103e1:	75 01                	jne    c00103e4 <Krnl::powerThread(void*)+0x11>
c00103e3:	fb                   	sti    
c00103e4:	83 ec 0c             	sub    esp,0xc
c00103e7:	c6 05 40 69 02 c0 00 	mov    BYTE PTR ds:0xc0026940,0x0
c00103ee:	6a 0a                	push   0xa
c00103f0:	e8 77 49 00 00       	call   c0014d6c <sleep(unsigned int)>
c00103f5:	83 05 84 69 02 c0 0a 	add    DWORD PTR ds:0xc0026984,0xa
c00103fc:	83 c4 10             	add    esp,0x10
c00103ff:	eb e3                	jmp    c00103e4 <Krnl::powerThread(void*)+0x11>

c0010401 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0010401:	57                   	push   edi
c0010402:	b9 09 00 00 00       	mov    ecx,0x9
c0010407:	56                   	push   esi
c0010408:	bf 60 69 02 c0       	mov    edi,0xc0026960
c001040d:	fc                   	cld    
c001040e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010412:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010414:	5e                   	pop    esi
c0010415:	5f                   	pop    edi
c0010416:	c3                   	ret    

c0010417 <Krnl::userIOReceived()>:
c0010417:	c7 05 84 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026984,0x0
c0010421:	c3                   	ret    

c0010422 <Krnl::handlePowerButton()>:
c0010422:	83 ec 0c             	sub    esp,0xc
c0010425:	a1 60 69 02 c0       	mov    eax,ds:0xc0026960
c001042a:	83 f8 02             	cmp    eax,0x2
c001042d:	75 10                	jne    c001043f <Krnl::handlePowerButton()+0x1d>
c001042f:	83 ec 0c             	sub    esp,0xc
c0010432:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0010438:	e8 c3 6a ff ff       	call   c0006f00 <Computer::shutdown()>
c001043d:	eb 11                	jmp    c0010450 <Krnl::handlePowerButton()+0x2e>
c001043f:	48                   	dec    eax
c0010440:	75 11                	jne    c0010453 <Krnl::handlePowerButton()+0x31>
c0010442:	83 ec 0c             	sub    esp,0xc
c0010445:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001044b:	e8 e0 6a ff ff       	call   c0006f30 <Computer::sleep()>
c0010450:	83 c4 10             	add    esp,0x10
c0010453:	83 c4 0c             	add    esp,0xc
c0010456:	c3                   	ret    

c0010457 <Krnl::handleSleepButton()>:
c0010457:	83 ec 0c             	sub    esp,0xc
c001045a:	a1 64 69 02 c0       	mov    eax,ds:0xc0026964
c001045f:	83 f8 02             	cmp    eax,0x2
c0010462:	75 10                	jne    c0010474 <Krnl::handleSleepButton()+0x1d>
c0010464:	83 ec 0c             	sub    esp,0xc
c0010467:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001046d:	e8 8e 6a ff ff       	call   c0006f00 <Computer::shutdown()>
c0010472:	eb 11                	jmp    c0010485 <Krnl::handleSleepButton()+0x2e>
c0010474:	48                   	dec    eax
c0010475:	75 11                	jne    c0010488 <Krnl::handleSleepButton()+0x31>
c0010477:	83 ec 0c             	sub    esp,0xc
c001047a:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0010480:	e8 ab 6a ff ff       	call   c0006f30 <Computer::sleep()>
c0010485:	83 c4 10             	add    esp,0x10
c0010488:	83 c4 0c             	add    esp,0xc
c001048b:	c3                   	ret    

c001048c <Krnl::setupPowerManager()>:
c001048c:	83 ec 0c             	sub    esp,0xc
c001048f:	c7 05 84 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026984,0x0
c0010499:	68 f0 00 00 00       	push   0xf0
c001049e:	c6 05 40 69 02 c0 00 	mov    BYTE PTR ds:0xc0026940,0x0
c00104a5:	6a 00                	push   0x0
c00104a7:	68 d3 03 01 c0       	push   0xc00103d3
c00104ac:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c00104b2:	e8 5d 43 00 00       	call   c0014814 <Process::createThread(void (*)(void*), void*, int)>
c00104b7:	c7 05 60 69 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0026960,0x2
c00104c1:	c7 05 64 69 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0026964,0x1
c00104cb:	c7 05 68 69 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0026968,0x3
c00104d5:	c7 05 6c 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002696c,0x0
c00104df:	c7 05 78 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026978,0x0
c00104e9:	c7 05 70 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026970,0x0
c00104f3:	c7 05 7c 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002697c,0x0
c00104fd:	c7 05 74 69 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0026974,0x3c
c0010507:	c7 05 80 69 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0026980,0x3c
c0010511:	83 c4 1c             	add    esp,0x1c
c0010514:	c3                   	ret    
c0010515:	66 90                	xchg   ax,ax
c0010517:	90                   	nop

c0010518 <KeResolveCompatibilitySymbol(char*)>:
c0010518:	83 ec 0c             	sub    esp,0xc
c001051b:	83 ec 08             	sub    esp,0x8
c001051e:	68 64 03 02 c0       	push   0xc0020364
c0010523:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010527:	e8 a4 01 ff ff       	call   c00006d0 <strcmp>
c001052c:	83 c4 10             	add    esp,0x10
c001052f:	85 c0                	test   eax,eax
c0010531:	0f 94 c0             	sete   al
c0010534:	84 c0                	test   al,al
c0010536:	74 0c                	je     c0010544 <KeResolveCompatibilitySymbol(char*)+0x2c>
c0010538:	b8 b8 3e 02 c0       	mov    eax,0xc0023eb8
c001053d:	e9 62 01 00 00       	jmp    c00106a4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010542:	66 90                	xchg   ax,ax
c0010544:	83 ec 08             	sub    esp,0x8
c0010547:	68 6d 03 02 c0       	push   0xc002036d
c001054c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010550:	e8 7b 01 ff ff       	call   c00006d0 <strcmp>
c0010555:	83 c4 10             	add    esp,0x10
c0010558:	85 c0                	test   eax,eax
c001055a:	0f 94 c0             	sete   al
c001055d:	84 c0                	test   al,al
c001055f:	74 0b                	je     c001056c <KeResolveCompatibilitySymbol(char*)+0x54>
c0010561:	b8 60 dd 01 c0       	mov    eax,0xc001dd60
c0010566:	e9 39 01 00 00       	jmp    c00106a4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001056b:	90                   	nop
c001056c:	83 ec 08             	sub    esp,0x8
c001056f:	68 77 03 02 c0       	push   0xc0020377
c0010574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010578:	e8 53 01 ff ff       	call   c00006d0 <strcmp>
c001057d:	83 c4 10             	add    esp,0x10
c0010580:	85 c0                	test   eax,eax
c0010582:	0f 94 c0             	sete   al
c0010585:	84 c0                	test   al,al
c0010587:	74 0b                	je     c0010594 <KeResolveCompatibilitySymbol(char*)+0x7c>
c0010589:	b8 94 da 01 c0       	mov    eax,0xc001da94
c001058e:	e9 11 01 00 00       	jmp    c00106a4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010593:	90                   	nop
c0010594:	83 ec 08             	sub    esp,0x8
c0010597:	68 80 03 02 c0       	push   0xc0020380
c001059c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105a0:	e8 2b 01 ff ff       	call   c00006d0 <strcmp>
c00105a5:	83 c4 10             	add    esp,0x10
c00105a8:	85 c0                	test   eax,eax
c00105aa:	0f 94 c0             	sete   al
c00105ad:	84 c0                	test   al,al
c00105af:	74 0b                	je     c00105bc <KeResolveCompatibilitySymbol(char*)+0xa4>
c00105b1:	b8 c7 03 01 c0       	mov    eax,0xc00103c7
c00105b6:	e9 e9 00 00 00       	jmp    c00106a4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00105bb:	90                   	nop
c00105bc:	83 ec 08             	sub    esp,0x8
c00105bf:	68 93 03 02 c0       	push   0xc0020393
c00105c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105c8:	e8 03 01 ff ff       	call   c00006d0 <strcmp>
c00105cd:	83 c4 10             	add    esp,0x10
c00105d0:	85 c0                	test   eax,eax
c00105d2:	0f 94 c0             	sete   al
c00105d5:	84 c0                	test   al,al
c00105d7:	74 0b                	je     c00105e4 <KeResolveCompatibilitySymbol(char*)+0xcc>
c00105d9:	b8 4f fd 00 c0       	mov    eax,0xc000fd4f
c00105de:	e9 c1 00 00 00       	jmp    c00106a4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00105e3:	90                   	nop
c00105e4:	83 ec 08             	sub    esp,0x8
c00105e7:	68 b0 03 02 c0       	push   0xc00203b0
c00105ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105f0:	e8 db 00 ff ff       	call   c00006d0 <strcmp>
c00105f5:	83 c4 10             	add    esp,0x10
c00105f8:	85 c0                	test   eax,eax
c00105fa:	0f 94 c0             	sete   al
c00105fd:	84 c0                	test   al,al
c00105ff:	74 0b                	je     c001060c <KeResolveCompatibilitySymbol(char*)+0xf4>
c0010601:	b8 60 de 01 c0       	mov    eax,0xc001de60
c0010606:	e9 99 00 00 00       	jmp    c00106a4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001060b:	90                   	nop
c001060c:	83 ec 08             	sub    esp,0x8
c001060f:	68 ba 03 02 c0       	push   0xc00203ba
c0010614:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010618:	e8 b3 00 ff ff       	call   c00006d0 <strcmp>
c001061d:	83 c4 10             	add    esp,0x10
c0010620:	85 c0                	test   eax,eax
c0010622:	0f 94 c0             	sete   al
c0010625:	84 c0                	test   al,al
c0010627:	74 07                	je     c0010630 <KeResolveCompatibilitySymbol(char*)+0x118>
c0010629:	b8 e0 db 01 c0       	mov    eax,0xc001dbe0
c001062e:	eb 74                	jmp    c00106a4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010630:	83 ec 08             	sub    esp,0x8
c0010633:	68 c3 03 02 c0       	push   0xc00203c3
c0010638:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001063c:	e8 8f 00 ff ff       	call   c00006d0 <strcmp>
c0010641:	83 c4 10             	add    esp,0x10
c0010644:	85 c0                	test   eax,eax
c0010646:	0f 94 c0             	sete   al
c0010649:	84 c0                	test   al,al
c001064b:	74 07                	je     c0010654 <KeResolveCompatibilitySymbol(char*)+0x13c>
c001064d:	b8 bc 3e 02 c0       	mov    eax,0xc0023ebc
c0010652:	eb 50                	jmp    c00106a4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010654:	83 ec 08             	sub    esp,0x8
c0010657:	68 db 03 02 c0       	push   0xc00203db
c001065c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010660:	e8 6b 00 ff ff       	call   c00006d0 <strcmp>
c0010665:	83 c4 10             	add    esp,0x10
c0010668:	85 c0                	test   eax,eax
c001066a:	0f 94 c0             	sete   al
c001066d:	84 c0                	test   al,al
c001066f:	74 07                	je     c0010678 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010671:	b8 bc 3e 02 c0       	mov    eax,0xc0023ebc
c0010676:	eb 2c                	jmp    c00106a4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010678:	83 ec 08             	sub    esp,0x8
c001067b:	68 e8 03 02 c0       	push   0xc00203e8
c0010680:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010684:	e8 47 00 ff ff       	call   c00006d0 <strcmp>
c0010689:	83 c4 10             	add    esp,0x10
c001068c:	85 c0                	test   eax,eax
c001068e:	0f 94 c0             	sete   al
c0010691:	84 c0                	test   al,al
c0010693:	74 07                	je     c001069c <KeResolveCompatibilitySymbol(char*)+0x184>
c0010695:	b8 bd 3e 02 c0       	mov    eax,0xc0023ebd
c001069a:	eb 08                	jmp    c00106a4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001069c:	b8 00 00 00 00       	mov    eax,0x0
c00106a1:	8d 76 00             	lea    esi,[esi+0x0]
c00106a4:	83 c4 0c             	add    esp,0xc
c00106a7:	c3                   	ret    

c00106a8 <KiSigKill(int)>:
c00106a8:	83 ec 0c             	sub    esp,0xc
c00106ab:	6a 00                	push   0x0
c00106ad:	6a 00                	push   0x0
c00106af:	6a ff                	push   0xffffffff
c00106b1:	6a 01                	push   0x1
c00106b3:	e8 9a 19 01 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00106b8:	83 c4 1c             	add    esp,0x1c
c00106bb:	c3                   	ret    

c00106bc <KiDefaultSignalHandlerIgnore(int)>:
c00106bc:	c3                   	ret    

c00106bd <KiDefaultSignalHandlerPause(int)>:
c00106bd:	57                   	push   edi
c00106be:	b9 07 00 00 00       	mov    ecx,0x7
c00106c3:	56                   	push   esi
c00106c4:	be 31 04 02 c0       	mov    esi,0xc0020431
c00106c9:	83 ec 24             	sub    esp,0x24
c00106cc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00106d0:	fc                   	cld    
c00106d1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00106d3:	8d 44 24 04          	lea    eax,[esp+0x4]
c00106d7:	50                   	push   eax
c00106d8:	6a 00                	push   0x0
c00106da:	6a 00                	push   0x0
c00106dc:	6a 27                	push   0x27
c00106de:	e8 6f 19 01 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00106e3:	83 c4 34             	add    esp,0x34
c00106e6:	5e                   	pop    esi
c00106e7:	5f                   	pop    edi
c00106e8:	c3                   	ret    

c00106e9 <KiDefaultSignalHandlerResume(int)>:
c00106e9:	57                   	push   edi
c00106ea:	b9 1d 00 00 00       	mov    ecx,0x1d
c00106ef:	56                   	push   esi
c00106f0:	be 4d 04 02 c0       	mov    esi,0xc002044d
c00106f5:	83 ec 24             	sub    esp,0x24
c00106f8:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00106fc:	fc                   	cld    
c00106fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00106ff:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010703:	50                   	push   eax
c0010704:	6a 00                	push   0x0
c0010706:	6a 00                	push   0x0
c0010708:	6a 27                	push   0x27
c001070a:	e8 43 19 01 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001070f:	83 c4 34             	add    esp,0x34
c0010712:	5e                   	pop    esi
c0010713:	5f                   	pop    edi
c0010714:	c3                   	ret    

c0010715 <KeDeinitSignals(SigHandlerBlock*)>:
c0010715:	e9 5b 71 ff ff       	jmp    c0007875 <free>

c001071a <KeInitSignals()>:
c001071a:	53                   	push   ebx
c001071b:	83 ec 14             	sub    esp,0x14
c001071e:	68 c8 00 00 00       	push   0xc8
c0010723:	e8 3d 71 ff ff       	call   c0007865 <malloc>
c0010728:	83 c4 0c             	add    esp,0xc
c001072b:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010735:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c001073f:	89 c3                	mov    ebx,eax
c0010741:	6a 20                	push   0x20
c0010743:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010749:	6a 00                	push   0x0
c001074b:	50                   	push   eax
c001074c:	e8 6f fd fe ff       	call   c00004c0 <memset>
c0010751:	83 c4 0c             	add    esp,0xc
c0010754:	6a 44                	push   0x44
c0010756:	6a 00                	push   0x0
c0010758:	53                   	push   ebx
c0010759:	e8 62 fd fe ff       	call   c00004c0 <memset>
c001075e:	89 d8                	mov    eax,ebx
c0010760:	83 c4 18             	add    esp,0x18
c0010763:	5b                   	pop    ebx
c0010764:	c3                   	ret    

c0010765 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010765:	53                   	push   ebx
c0010766:	b8 01 00 00 00       	mov    eax,0x1
c001076b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001076f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010773:	83 f9 10             	cmp    ecx,0x10
c0010776:	7f 21                	jg     c0010799 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010778:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c001077b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001077f:	89 03                	mov    DWORD PTR [ebx],eax
c0010781:	b8 01 00 00 00       	mov    eax,0x1
c0010786:	d3 e0                	shl    eax,cl
c0010788:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001078c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001078f:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010797:	31 c0                	xor    eax,eax
c0010799:	5b                   	pop    ebx
c001079a:	c3                   	ret    

c001079b <KeRaiseSignal(SigHandlerBlock*, int)>:
c001079b:	55                   	push   ebp
c001079c:	57                   	push   edi
c001079d:	bf 08 00 00 00       	mov    edi,0x8
c00107a2:	56                   	push   esi
c00107a3:	53                   	push   ebx
c00107a4:	83 ec 18             	sub    esp,0x18
c00107a7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00107ab:	68 6a 04 02 c0       	push   0xc002046a
c00107b0:	e8 51 9e ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c00107b5:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00107bc:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c00107c2:	83 c4 10             	add    esp,0x10
c00107c5:	31 c9                	xor    ecx,ecx
c00107c7:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00107cb:	99                   	cdq    
c00107cc:	f7 ff                	idiv   edi
c00107ce:	8d 42 24             	lea    eax,[edx+0x24]
c00107d1:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00107d5:	85 f6                	test   esi,esi
c00107d7:	75 1a                	jne    c00107f3 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c00107d9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00107dd:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c00107e1:	50                   	push   eax
c00107e2:	50                   	push   eax
c00107e3:	52                   	push   edx
c00107e4:	68 7b 04 02 c0       	push   0xc002047b
c00107e9:	e8 18 9e ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c00107ee:	83 c4 10             	add    esp,0x10
c00107f1:	eb 1b                	jmp    c001080e <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c00107f3:	41                   	inc    ecx
c00107f4:	83 f9 08             	cmp    ecx,0x8
c00107f7:	75 ce                	jne    c00107c7 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c00107f9:	83 ec 0c             	sub    esp,0xc
c00107fc:	be 01 00 00 00       	mov    esi,0x1
c0010801:	68 9c 04 02 c0       	push   0xc002049c
c0010806:	e8 fb 9d ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c001080b:	83 c4 10             	add    esp,0x10
c001080e:	83 c4 0c             	add    esp,0xc
c0010811:	89 f0                	mov    eax,esi
c0010813:	5b                   	pop    ebx
c0010814:	5e                   	pop    esi
c0010815:	5f                   	pop    edi
c0010816:	5d                   	pop    ebp
c0010817:	c3                   	ret    

c0010818 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0010818:	55                   	push   ebp
c0010819:	57                   	push   edi
c001081a:	56                   	push   esi
c001081b:	53                   	push   ebx
c001081c:	51                   	push   ecx
c001081d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010821:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010828:	0f 84 af 00 00 00    	je     c00108dd <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c001082e:	31 c9                	xor    ecx,ecx
c0010830:	bf 08 00 00 00       	mov    edi,0x8
c0010835:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c001083b:	8d 04 0e             	lea    eax,[esi+ecx*1]
c001083e:	99                   	cdq    
c001083f:	f7 ff                	idiv   edi
c0010841:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0010848:	85 ed                	test   ebp,ebp
c001084a:	0f 84 9e 00 00 00    	je     c00108ee <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c0010850:	89 e9                	mov    ecx,ebp
c0010852:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010858:	bf 01 00 00 00       	mov    edi,0x1
c001085d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010860:	d3 e7                	shl    edi,cl
c0010862:	31 c9                	xor    ecx,ecx
c0010864:	b8 01 00 00 00       	mov    eax,0x1
c0010869:	d3 e0                	shl    eax,cl
c001086b:	85 04 24             	test   DWORD PTR [esp],eax
c001086e:	74 06                	je     c0010876 <KeCheckSignal(SigHandlerBlock*, int*)+0x5e>
c0010870:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010874:	75 67                	jne    c00108dd <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010876:	41                   	inc    ecx
c0010877:	83 f9 11             	cmp    ecx,0x11
c001087a:	75 e8                	jne    c0010864 <KeCheckSignal(SigHandlerBlock*, int*)+0x4c>
c001087c:	46                   	inc    esi
c001087d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010880:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010886:	09 f8                	or     eax,edi
c0010888:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0010893:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010899:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00108a0:	31 c0                	xor    eax,eax
c00108a2:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c00108aa:	74 09                	je     c00108b5 <KeCheckSignal(SigHandlerBlock*, int*)+0x9d>
c00108ac:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00108b3:	eb 06                	jmp    c00108bb <KeCheckSignal(SigHandlerBlock*, int*)+0xa3>
c00108b5:	40                   	inc    eax
c00108b6:	83 f8 08             	cmp    eax,0x8
c00108b9:	75 e7                	jne    c00108a2 <KeCheckSignal(SigHandlerBlock*, int*)+0x8a>
c00108bb:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c00108be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00108c2:	83 fd 09             	cmp    ebp,0x9
c00108c5:	89 2a                	mov    DWORD PTR [edx],ebp
c00108c7:	75 07                	jne    c00108d0 <KeCheckSignal(SigHandlerBlock*, int*)+0xb8>
c00108c9:	b8 a8 06 01 c0       	mov    eax,0xc00106a8
c00108ce:	eb 31                	jmp    c0010901 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c00108d0:	83 f8 01             	cmp    eax,0x1
c00108d3:	75 0c                	jne    c00108e1 <KeCheckSignal(SigHandlerBlock*, int*)+0xc9>
c00108d5:	f7 d7                	not    edi
c00108d7:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c00108dd:	31 c0                	xor    eax,eax
c00108df:	eb 20                	jmp    c0010901 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c00108e1:	85 c0                	test   eax,eax
c00108e3:	75 1c                	jne    c0010901 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c00108e5:	8b 04 ad 40 18 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffde7c0]
c00108ec:	eb 13                	jmp    c0010901 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c00108ee:	46                   	inc    esi
c00108ef:	41                   	inc    ecx
c00108f0:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00108f6:	83 f9 08             	cmp    ecx,0x8
c00108f9:	0f 85 36 ff ff ff    	jne    c0010835 <KeCheckSignal(SigHandlerBlock*, int*)+0x1d>
c00108ff:	eb dc                	jmp    c00108dd <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010901:	5a                   	pop    edx
c0010902:	5b                   	pop    ebx
c0010903:	5e                   	pop    esi
c0010904:	5f                   	pop    edi
c0010905:	5d                   	pop    ebp
c0010906:	c3                   	ret    

c0010907 <KiCheckSignalZ>:
c0010907:	83 ec 10             	sub    esp,0x10
c001090a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001090e:	50                   	push   eax
c001090f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010914:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010917:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001091d:	e8 f6 fe ff ff       	call   c0010818 <KeCheckSignal(SigHandlerBlock*, int*)>
c0010922:	5a                   	pop    edx
c0010923:	31 d2                	xor    edx,edx
c0010925:	59                   	pop    ecx
c0010926:	85 c0                	test   eax,eax
c0010928:	74 19                	je     c0010943 <KiCheckSignalZ+0x3c>
c001092a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010930:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0010933:	89 02                	mov    DWORD PTR [edx],eax
c0010935:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c001093c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010940:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0010943:	89 d0                	mov    eax,edx
c0010945:	83 c4 10             	add    esp,0x10
c0010948:	c3                   	ret    

c0010949 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010949:	56                   	push   esi
c001094a:	53                   	push   ebx
c001094b:	bb 01 00 00 00       	mov    ebx,0x1
c0010950:	52                   	push   edx
c0010951:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010955:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010959:	d3 e3                	shl    ebx,cl
c001095b:	83 f9 10             	cmp    ecx,0x10
c001095e:	7f 08                	jg     c0010968 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010960:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010966:	75 10                	jne    c0010978 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010968:	83 ec 0c             	sub    esp,0xc
c001096b:	68 ad 04 02 c0       	push   0xc00204ad
c0010970:	e8 52 fa ff ff       	call   c00103c7 <KePanic(char const*)>
c0010975:	83 c4 10             	add    esp,0x10
c0010978:	f7 d3                	not    ebx
c001097a:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010980:	58                   	pop    eax
c0010981:	5b                   	pop    ebx
c0010982:	5e                   	pop    esi
c0010983:	c3                   	ret    

c0010984 <KiFinishSignalZ>:
c0010984:	53                   	push   ebx
c0010985:	83 ec 10             	sub    esp,0x10
c0010988:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001098c:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001098f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010994:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010997:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001099d:	e8 a7 ff ff ff       	call   c0010949 <KeCompleteSignal(SigHandlerBlock*, int)>
c00109a2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00109a8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00109af:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00109b6:	83 c4 18             	add    esp,0x18
c00109b9:	5b                   	pop    ebx
c00109ba:	c3                   	ret    

c00109bb <SysSeekDir(regs*)>:
c00109bb:	31 c0                	xor    eax,eax
c00109bd:	31 d2                	xor    edx,edx
c00109bf:	c3                   	ret    

c00109c0 <SysTellDir(regs*)>:
c00109c0:	31 c0                	xor    eax,eax
c00109c2:	31 d2                	xor    edx,edx
c00109c4:	c3                   	ret    

c00109c5 <SysVerify(regs*)>:
c00109c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109c9:	31 d2                	xor    edx,edx
c00109cb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00109ce:	c3                   	ret    

c00109cf <SysGetArgc(regs*)>:
c00109cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00109d4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00109d7:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00109dd:	99                   	cdq    
c00109de:	c3                   	ret    

c00109df <SysTTYName(regs*)>:
c00109df:	b8 01 00 00 00       	mov    eax,0x1
c00109e4:	31 d2                	xor    edx,edx
c00109e6:	c3                   	ret    

c00109e7 <SysFormatDisk(regs*)>:
c00109e7:	56                   	push   esi
c00109e8:	53                   	push   ebx
c00109e9:	50                   	push   eax
c00109ea:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00109ee:	8b 1d b4 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb4
c00109f4:	eb 28                	jmp    c0010a1e <SysFormatDisk(regs*)+0x37>
c00109f6:	83 ec 0c             	sub    esp,0xc
c00109f9:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00109fc:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00109ff:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010a01:	51                   	push   ecx
c0010a02:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010a05:	51                   	push   ecx
c0010a06:	50                   	push   eax
c0010a07:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c0010a0e:	50                   	push   eax
c0010a0f:	53                   	push   ebx
c0010a10:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010a13:	83 c4 20             	add    esp,0x20
c0010a16:	83 f8 08             	cmp    eax,0x8
c0010a19:	75 12                	jne    c0010a2d <SysFormatDisk(regs*)+0x46>
c0010a1b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010a1e:	85 db                	test   ebx,ebx
c0010a20:	75 d4                	jne    c00109f6 <SysFormatDisk(regs*)+0xf>
c0010a22:	59                   	pop    ecx
c0010a23:	b8 03 00 00 00       	mov    eax,0x3
c0010a28:	31 d2                	xor    edx,edx
c0010a2a:	5b                   	pop    ebx
c0010a2b:	5e                   	pop    esi
c0010a2c:	c3                   	ret    
c0010a2d:	85 c0                	test   eax,eax
c0010a2f:	74 1b                	je     c0010a4c <SysFormatDisk(regs*)+0x65>
c0010a31:	83 f8 09             	cmp    eax,0x9
c0010a34:	74 0b                	je     c0010a41 <SysFormatDisk(regs*)+0x5a>
c0010a36:	59                   	pop    ecx
c0010a37:	b8 02 00 00 00       	mov    eax,0x2
c0010a3c:	31 d2                	xor    edx,edx
c0010a3e:	5b                   	pop    ebx
c0010a3f:	5e                   	pop    esi
c0010a40:	c3                   	ret    
c0010a41:	59                   	pop    ecx
c0010a42:	b8 01 00 00 00       	mov    eax,0x1
c0010a47:	31 d2                	xor    edx,edx
c0010a49:	5b                   	pop    ebx
c0010a4a:	5e                   	pop    esi
c0010a4b:	c3                   	ret    
c0010a4c:	59                   	pop    ecx
c0010a4d:	31 c0                	xor    eax,eax
c0010a4f:	31 d2                	xor    edx,edx
c0010a51:	5b                   	pop    ebx
c0010a52:	5e                   	pop    esi
c0010a53:	c3                   	ret    

c0010a54 <SysSetDiskVolumeLabel(regs*)>:
c0010a54:	56                   	push   esi
c0010a55:	53                   	push   ebx
c0010a56:	53                   	push   ebx
c0010a57:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010a5b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010a5e:	83 f8 19             	cmp    eax,0x19
c0010a61:	77 2d                	ja     c0010a90 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010a63:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c0010a6a:	85 c9                	test   ecx,ecx
c0010a6c:	74 22                	je     c0010a90 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010a6e:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010a71:	85 db                	test   ebx,ebx
c0010a73:	74 1b                	je     c0010a90 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010a75:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0010a7b:	85 d2                	test   edx,edx
c0010a7d:	74 11                	je     c0010a90 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010a7f:	8b 32                	mov    esi,DWORD PTR [edx]
c0010a81:	53                   	push   ebx
c0010a82:	50                   	push   eax
c0010a83:	51                   	push   ecx
c0010a84:	52                   	push   edx
c0010a85:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010a88:	83 c4 10             	add    esp,0x10
c0010a8b:	99                   	cdq    
c0010a8c:	59                   	pop    ecx
c0010a8d:	5b                   	pop    ebx
c0010a8e:	5e                   	pop    esi
c0010a8f:	c3                   	ret    
c0010a90:	59                   	pop    ecx
c0010a91:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010a96:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a9b:	5b                   	pop    ebx
c0010a9c:	5e                   	pop    esi
c0010a9d:	c3                   	ret    

c0010a9e <SysGetDiskVolumeLabel(regs*)>:
c0010a9e:	57                   	push   edi
c0010a9f:	56                   	push   esi
c0010aa0:	53                   	push   ebx
c0010aa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010aa5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010aa8:	83 fa 19             	cmp    edx,0x19
c0010aab:	77 38                	ja     c0010ae5 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010aad:	8b 0c 95 20 64 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd9be0]
c0010ab4:	85 c9                	test   ecx,ecx
c0010ab6:	74 2d                	je     c0010ae5 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010ab8:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010abb:	85 db                	test   ebx,ebx
c0010abd:	74 26                	je     c0010ae5 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010abf:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010ac2:	85 f6                	test   esi,esi
c0010ac4:	74 1f                	je     c0010ae5 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010ac6:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0010acc:	85 c0                	test   eax,eax
c0010ace:	74 15                	je     c0010ae5 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010ad0:	83 ec 0c             	sub    esp,0xc
c0010ad3:	8b 38                	mov    edi,DWORD PTR [eax]
c0010ad5:	56                   	push   esi
c0010ad6:	53                   	push   ebx
c0010ad7:	52                   	push   edx
c0010ad8:	51                   	push   ecx
c0010ad9:	50                   	push   eax
c0010ada:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0010add:	83 c4 20             	add    esp,0x20
c0010ae0:	99                   	cdq    
c0010ae1:	5b                   	pop    ebx
c0010ae2:	5e                   	pop    esi
c0010ae3:	5f                   	pop    edi
c0010ae4:	c3                   	ret    
c0010ae5:	5b                   	pop    ebx
c0010ae6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010aeb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010af0:	5e                   	pop    esi
c0010af1:	5f                   	pop    edi
c0010af2:	c3                   	ret    

c0010af3 <SysShutdown(regs*)>:
c0010af3:	83 ec 0c             	sub    esp,0xc
c0010af6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010afa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010afd:	85 c0                	test   eax,eax
c0010aff:	74 18                	je     c0010b19 <SysShutdown(regs*)+0x26>
c0010b01:	83 f8 01             	cmp    eax,0x1
c0010b04:	74 38                	je     c0010b3e <SysShutdown(regs*)+0x4b>
c0010b06:	83 f8 02             	cmp    eax,0x2
c0010b09:	74 24                	je     c0010b2f <SysShutdown(regs*)+0x3c>
c0010b0b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b10:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b15:	83 c4 0c             	add    esp,0xc
c0010b18:	c3                   	ret    
c0010b19:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0010b1e:	8b 10                	mov    edx,DWORD PTR [eax]
c0010b20:	6a 00                	push   0x0
c0010b22:	6a 00                	push   0x0
c0010b24:	6a 00                	push   0x0
c0010b26:	50                   	push   eax
c0010b27:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010b2a:	83 c4 10             	add    esp,0x10
c0010b2d:	eb dc                	jmp    c0010b0b <SysShutdown(regs*)+0x18>
c0010b2f:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0010b34:	8b 10                	mov    edx,DWORD PTR [eax]
c0010b36:	6a 00                	push   0x0
c0010b38:	6a 00                	push   0x0
c0010b3a:	6a 01                	push   0x1
c0010b3c:	eb e8                	jmp    c0010b26 <SysShutdown(regs*)+0x33>
c0010b3e:	a1 a0 64 02 c0       	mov    eax,ds:0xc00264a0
c0010b43:	85 c0                	test   eax,eax
c0010b45:	74 02                	je     c0010b49 <SysShutdown(regs*)+0x56>
c0010b47:	ff d0                	call   eax
c0010b49:	31 c0                	xor    eax,eax
c0010b4b:	31 d2                	xor    edx,edx
c0010b4d:	83 c4 0c             	add    esp,0xc
c0010b50:	c3                   	ret    

c0010b51 <SysRealpath(regs*)>:
c0010b51:	83 ec 0c             	sub    esp,0xc
c0010b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b58:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010b5b:	85 d2                	test   edx,edx
c0010b5d:	74 07                	je     c0010b66 <SysRealpath(regs*)+0x15>
c0010b5f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010b62:	85 c0                	test   eax,eax
c0010b64:	75 0b                	jne    c0010b71 <SysRealpath(regs*)+0x20>
c0010b66:	b8 01 00 00 00       	mov    eax,0x1
c0010b6b:	31 d2                	xor    edx,edx
c0010b6d:	83 c4 0c             	add    esp,0xc
c0010b70:	c3                   	ret    
c0010b71:	51                   	push   ecx
c0010b72:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010b78:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010b7b:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0010b81:	51                   	push   ecx
c0010b82:	52                   	push   edx
c0010b83:	50                   	push   eax
c0010b84:	e8 49 9e ff ff       	call   c000a9d2 <Fs::standardiseFiles(char*, char const*, char const*)>
c0010b89:	83 c4 10             	add    esp,0x10
c0010b8c:	31 c0                	xor    eax,eax
c0010b8e:	31 d2                	xor    edx,edx
c0010b90:	83 c4 0c             	add    esp,0xc
c0010b93:	c3                   	ret    

c0010b94 <SysReadDir(regs*)>:
c0010b94:	53                   	push   ebx
c0010b95:	83 ec 18             	sub    esp,0x18
c0010b98:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010b9c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010b9f:	83 f8 02             	cmp    eax,0x2
c0010ba2:	76 61                	jbe    c0010c05 <SysReadDir(regs*)+0x71>
c0010ba4:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010bab:	77 49                	ja     c0010bf6 <SysReadDir(regs*)+0x62>
c0010bad:	83 ec 0c             	sub    esp,0xc
c0010bb0:	50                   	push   eax
c0010bb1:	e8 3d 86 ff ff       	call   c00091f3 <getFromFileDescriptor(int)>
c0010bb6:	83 c4 10             	add    esp,0x10
c0010bb9:	85 c0                	test   eax,eax
c0010bbb:	74 39                	je     c0010bf6 <SysReadDir(regs*)+0x62>
c0010bbd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010bc5:	83 ec 0c             	sub    esp,0xc
c0010bc8:	8b 10                	mov    edx,DWORD PTR [eax]
c0010bca:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010bce:	51                   	push   ecx
c0010bcf:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010bd2:	51                   	push   ecx
c0010bd3:	6a 00                	push   0x0
c0010bd5:	68 10 01 00 00       	push   0x110
c0010bda:	50                   	push   eax
c0010bdb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010bde:	83 c4 20             	add    esp,0x20
c0010be1:	85 c0                	test   eax,eax
c0010be3:	74 29                	je     c0010c0e <SysReadDir(regs*)+0x7a>
c0010be5:	83 f8 07             	cmp    eax,0x7
c0010be8:	74 1b                	je     c0010c05 <SysReadDir(regs*)+0x71>
c0010bea:	b8 02 00 00 00       	mov    eax,0x2
c0010bef:	31 d2                	xor    edx,edx
c0010bf1:	83 c4 18             	add    esp,0x18
c0010bf4:	5b                   	pop    ebx
c0010bf5:	c3                   	ret    
c0010bf6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010bfb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c00:	83 c4 18             	add    esp,0x18
c0010c03:	5b                   	pop    ebx
c0010c04:	c3                   	ret    
c0010c05:	b8 01 00 00 00       	mov    eax,0x1
c0010c0a:	31 d2                	xor    edx,edx
c0010c0c:	eb e3                	jmp    c0010bf1 <SysReadDir(regs*)+0x5d>
c0010c0e:	31 c0                	xor    eax,eax
c0010c10:	31 d2                	xor    edx,edx
c0010c12:	eb dd                	jmp    c0010bf1 <SysReadDir(regs*)+0x5d>

c0010c14 <SysIsATTY(regs*)>:
c0010c14:	83 ec 0c             	sub    esp,0xc
c0010c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c1b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010c1e:	83 f8 02             	cmp    eax,0x2
c0010c21:	76 07                	jbe    c0010c2a <SysIsATTY(regs*)+0x16>
c0010c23:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010c28:	75 28                	jne    c0010c52 <SysIsATTY(regs*)+0x3e>
c0010c2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c2f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010c32:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010c38:	85 c0                	test   eax,eax
c0010c3a:	74 26                	je     c0010c62 <SysIsATTY(regs*)+0x4e>
c0010c3c:	83 ec 0c             	sub    esp,0xc
c0010c3f:	8b 10                	mov    edx,DWORD PTR [eax]
c0010c41:	50                   	push   eax
c0010c42:	ff 12                	call   DWORD PTR [edx]
c0010c44:	31 d2                	xor    edx,edx
c0010c46:	25 ff 00 00 00       	and    eax,0xff
c0010c4b:	83 c4 10             	add    esp,0x10
c0010c4e:	83 c4 0c             	add    esp,0xc
c0010c51:	c3                   	ret    
c0010c52:	83 ec 0c             	sub    esp,0xc
c0010c55:	50                   	push   eax
c0010c56:	e8 98 85 ff ff       	call   c00091f3 <getFromFileDescriptor(int)>
c0010c5b:	83 c4 10             	add    esp,0x10
c0010c5e:	85 c0                	test   eax,eax
c0010c60:	75 da                	jne    c0010c3c <SysIsATTY(regs*)+0x28>
c0010c62:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c67:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c6c:	83 c4 0c             	add    esp,0xc
c0010c6f:	c3                   	ret    

c0010c70 <SysSeek(regs*)>:
c0010c70:	53                   	push   ebx
c0010c71:	83 ec 08             	sub    esp,0x8
c0010c74:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c78:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c7b:	8d 50 fd             	lea    edx,[eax-0x3]
c0010c7e:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010c84:	77 34                	ja     c0010cba <SysSeek(regs*)+0x4a>
c0010c86:	83 ec 0c             	sub    esp,0xc
c0010c89:	50                   	push   eax
c0010c8a:	e8 64 85 ff ff       	call   c00091f3 <getFromFileDescriptor(int)>
c0010c8f:	83 c4 0c             	add    esp,0xc
c0010c92:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010c95:	31 db                	xor    ebx,ebx
c0010c97:	53                   	push   ebx
c0010c98:	51                   	push   ecx
c0010c99:	50                   	push   eax
c0010c9a:	e8 5b a0 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c0010c9f:	83 c4 10             	add    esp,0x10
c0010ca2:	85 c0                	test   eax,eax
c0010ca4:	0f 95 c0             	setne  al
c0010ca7:	31 d2                	xor    edx,edx
c0010ca9:	25 ff 00 00 00       	and    eax,0xff
c0010cae:	f7 d8                	neg    eax
c0010cb0:	83 d2 00             	adc    edx,0x0
c0010cb3:	83 c4 08             	add    esp,0x8
c0010cb6:	f7 da                	neg    edx
c0010cb8:	5b                   	pop    ebx
c0010cb9:	c3                   	ret    
c0010cba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010cbf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010cc4:	83 c4 08             	add    esp,0x8
c0010cc7:	5b                   	pop    ebx
c0010cc8:	c3                   	ret    

c0010cc9 <SysTell(regs*)>:
c0010cc9:	53                   	push   ebx
c0010cca:	83 ec 08             	sub    esp,0x8
c0010ccd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cd1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010cd4:	83 f8 02             	cmp    eax,0x2
c0010cd7:	76 50                	jbe    c0010d29 <SysTell(regs*)+0x60>
c0010cd9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010cde:	76 19                	jbe    c0010cf9 <SysTell(regs*)+0x30>
c0010ce0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010ce3:	31 d2                	xor    edx,edx
c0010ce5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010ceb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010cf2:	31 c0                	xor    eax,eax
c0010cf4:	83 c4 08             	add    esp,0x8
c0010cf7:	5b                   	pop    ebx
c0010cf8:	c3                   	ret    
c0010cf9:	83 ec 0c             	sub    esp,0xc
c0010cfc:	50                   	push   eax
c0010cfd:	e8 f1 84 ff ff       	call   c00091f3 <getFromFileDescriptor(int)>
c0010d02:	5a                   	pop    edx
c0010d03:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010d06:	59                   	pop    ecx
c0010d07:	53                   	push   ebx
c0010d08:	50                   	push   eax
c0010d09:	e8 42 a0 ff ff       	call   c000ad50 <File::tell(unsigned long long*)>
c0010d0e:	83 c4 10             	add    esp,0x10
c0010d11:	85 c0                	test   eax,eax
c0010d13:	0f 95 c0             	setne  al
c0010d16:	31 d2                	xor    edx,edx
c0010d18:	25 ff 00 00 00       	and    eax,0xff
c0010d1d:	f7 d8                	neg    eax
c0010d1f:	83 d2 00             	adc    edx,0x0
c0010d22:	83 c4 08             	add    esp,0x8
c0010d25:	f7 da                	neg    edx
c0010d27:	5b                   	pop    ebx
c0010d28:	c3                   	ret    
c0010d29:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d2e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d33:	83 c4 08             	add    esp,0x8
c0010d36:	5b                   	pop    ebx
c0010d37:	c3                   	ret    

c0010d38 <SysSize(regs*)>:
c0010d38:	53                   	push   ebx
c0010d39:	83 ec 18             	sub    esp,0x18
c0010d3c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010d40:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010d43:	83 f8 02             	cmp    eax,0x2
c0010d46:	76 56                	jbe    c0010d9e <SysSize(regs*)+0x66>
c0010d48:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010d4d:	76 19                	jbe    c0010d68 <SysSize(regs*)+0x30>
c0010d4f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010d52:	31 d2                	xor    edx,edx
c0010d54:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010d5a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010d61:	31 c0                	xor    eax,eax
c0010d63:	83 c4 18             	add    esp,0x18
c0010d66:	5b                   	pop    ebx
c0010d67:	c3                   	ret    
c0010d68:	83 ec 0c             	sub    esp,0xc
c0010d6b:	50                   	push   eax
c0010d6c:	e8 82 84 ff ff       	call   c00091f3 <getFromFileDescriptor(int)>
c0010d71:	83 c4 0c             	add    esp,0xc
c0010d74:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010d78:	52                   	push   edx
c0010d79:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010d7c:	52                   	push   edx
c0010d7d:	50                   	push   eax
c0010d7e:	e8 65 a1 ff ff       	call   c000aee8 <File::stat(unsigned long long*, bool*)>
c0010d83:	83 c4 10             	add    esp,0x10
c0010d86:	85 c0                	test   eax,eax
c0010d88:	0f 95 c0             	setne  al
c0010d8b:	31 d2                	xor    edx,edx
c0010d8d:	25 ff 00 00 00       	and    eax,0xff
c0010d92:	f7 d8                	neg    eax
c0010d94:	83 d2 00             	adc    edx,0x0
c0010d97:	83 c4 18             	add    esp,0x18
c0010d9a:	f7 da                	neg    edx
c0010d9c:	5b                   	pop    ebx
c0010d9d:	c3                   	ret    
c0010d9e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010da3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010da8:	83 c4 18             	add    esp,0x18
c0010dab:	5b                   	pop    ebx
c0010dac:	c3                   	ret    

c0010dad <SysSizeFromFilename(regs*)>:
c0010dad:	57                   	push   edi
c0010dae:	56                   	push   esi
c0010daf:	53                   	push   ebx
c0010db0:	83 ec 20             	sub    esp,0x20
c0010db3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010db7:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010dba:	83 fb 02             	cmp    ebx,0x2
c0010dbd:	0f 86 8c 00 00 00    	jbe    c0010e4f <SysSizeFromFilename(regs*)+0xa2>
c0010dc3:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010dc9:	76 1b                	jbe    c0010de6 <SysSizeFromFilename(regs*)+0x39>
c0010dcb:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010dce:	31 d2                	xor    edx,edx
c0010dd0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010dd6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010ddd:	83 c4 20             	add    esp,0x20
c0010de0:	31 c0                	xor    eax,eax
c0010de2:	5b                   	pop    ebx
c0010de3:	5e                   	pop    esi
c0010de4:	5f                   	pop    edi
c0010de5:	c3                   	ret    
c0010de6:	83 ec 0c             	sub    esp,0xc
c0010de9:	68 14 01 00 00       	push   0x114
c0010dee:	e8 72 6a ff ff       	call   c0007865 <malloc>
c0010df3:	83 c4 0c             	add    esp,0xc
c0010df6:	89 c7                	mov    edi,eax
c0010df8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010dfd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e00:	50                   	push   eax
c0010e01:	53                   	push   ebx
c0010e02:	57                   	push   edi
c0010e03:	e8 74 9d ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c0010e08:	83 c4 0c             	add    esp,0xc
c0010e0b:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010e0f:	50                   	push   eax
c0010e10:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010e13:	52                   	push   edx
c0010e14:	57                   	push   edi
c0010e15:	e8 ce a0 ff ff       	call   c000aee8 <File::stat(unsigned long long*, bool*)>
c0010e1a:	83 c4 10             	add    esp,0x10
c0010e1d:	85 ff                	test   edi,edi
c0010e1f:	74 14                	je     c0010e35 <SysSizeFromFilename(regs*)+0x88>
c0010e21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010e25:	8b 17                	mov    edx,DWORD PTR [edi]
c0010e27:	83 ec 0c             	sub    esp,0xc
c0010e2a:	57                   	push   edi
c0010e2b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010e2e:	83 c4 10             	add    esp,0x10
c0010e31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010e35:	85 c0                	test   eax,eax
c0010e37:	0f 95 c0             	setne  al
c0010e3a:	31 d2                	xor    edx,edx
c0010e3c:	25 ff 00 00 00       	and    eax,0xff
c0010e41:	f7 d8                	neg    eax
c0010e43:	83 d2 00             	adc    edx,0x0
c0010e46:	83 c4 20             	add    esp,0x20
c0010e49:	f7 da                	neg    edx
c0010e4b:	5b                   	pop    ebx
c0010e4c:	5e                   	pop    esi
c0010e4d:	5f                   	pop    edi
c0010e4e:	c3                   	ret    
c0010e4f:	83 c4 20             	add    esp,0x20
c0010e52:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e57:	5b                   	pop    ebx
c0010e58:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e5d:	5e                   	pop    esi
c0010e5e:	5f                   	pop    edi
c0010e5f:	c3                   	ret    

c0010e60 <SysClose(regs*)>:
c0010e60:	53                   	push   ebx
c0010e61:	83 ec 08             	sub    esp,0x8
c0010e64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e68:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010e6b:	83 f8 02             	cmp    eax,0x2
c0010e6e:	76 41                	jbe    c0010eb1 <SysClose(regs*)+0x51>
c0010e70:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010e76:	83 fa 01             	cmp    edx,0x1
c0010e79:	76 2d                	jbe    c0010ea8 <SysClose(regs*)+0x48>
c0010e7b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010e80:	77 2f                	ja     c0010eb1 <SysClose(regs*)+0x51>
c0010e82:	83 ec 0c             	sub    esp,0xc
c0010e85:	50                   	push   eax
c0010e86:	e8 68 83 ff ff       	call   c00091f3 <getFromFileDescriptor(int)>
c0010e8b:	89 c3                	mov    ebx,eax
c0010e8d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010e90:	e8 05 9e ff ff       	call   c000ac9a <File::close()>
c0010e95:	83 c4 10             	add    esp,0x10
c0010e98:	85 db                	test   ebx,ebx
c0010e9a:	74 0c                	je     c0010ea8 <SysClose(regs*)+0x48>
c0010e9c:	83 ec 0c             	sub    esp,0xc
c0010e9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010ea1:	53                   	push   ebx
c0010ea2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010ea5:	83 c4 10             	add    esp,0x10
c0010ea8:	31 c0                	xor    eax,eax
c0010eaa:	31 d2                	xor    edx,edx
c0010eac:	83 c4 08             	add    esp,0x8
c0010eaf:	5b                   	pop    ebx
c0010eb0:	c3                   	ret    
c0010eb1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010eb6:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ebb:	83 c4 08             	add    esp,0x8
c0010ebe:	5b                   	pop    ebx
c0010ebf:	c3                   	ret    

c0010ec0 <SysOpenDir(regs*)>:
c0010ec0:	56                   	push   esi
c0010ec1:	53                   	push   ebx
c0010ec2:	50                   	push   eax
c0010ec3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ec7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010eca:	85 c0                	test   eax,eax
c0010ecc:	74 5b                	je     c0010f29 <SysOpenDir(regs*)+0x69>
c0010ece:	83 ec 0c             	sub    esp,0xc
c0010ed1:	68 14 01 00 00       	push   0x114
c0010ed6:	e8 8a 69 ff ff       	call   c0007865 <malloc>
c0010edb:	83 c4 0c             	add    esp,0xc
c0010ede:	89 c6                	mov    esi,eax
c0010ee0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ee5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ee8:	50                   	push   eax
c0010ee9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010eec:	50                   	push   eax
c0010eed:	56                   	push   esi
c0010eee:	e8 b3 a1 ff ff       	call   c000b0a6 <Directory::Directory(char const*, Process*)>
c0010ef3:	83 c4 10             	add    esp,0x10
c0010ef6:	85 f6                	test   esi,esi
c0010ef8:	74 2f                	je     c0010f29 <SysOpenDir(regs*)+0x69>
c0010efa:	83 ec 0c             	sub    esp,0xc
c0010efd:	56                   	push   esi
c0010efe:	e8 63 a2 ff ff       	call   c000b166 <Directory::open()>
c0010f03:	83 c4 10             	add    esp,0x10
c0010f06:	85 c0                	test   eax,eax
c0010f08:	75 1f                	jne    c0010f29 <SysOpenDir(regs*)+0x69>
c0010f0a:	83 ec 0c             	sub    esp,0xc
c0010f0d:	56                   	push   esi
c0010f0e:	e8 eb 7f ff ff       	call   c0008efe <UnixFile::getFileDescriptor()>
c0010f13:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010f16:	83 c4 10             	add    esp,0x10
c0010f19:	89 02                	mov    DWORD PTR [edx],eax
c0010f1b:	c1 f8 1f             	sar    eax,0x1f
c0010f1e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010f21:	31 c0                	xor    eax,eax
c0010f23:	59                   	pop    ecx
c0010f24:	31 d2                	xor    edx,edx
c0010f26:	5b                   	pop    ebx
c0010f27:	5e                   	pop    esi
c0010f28:	c3                   	ret    
c0010f29:	59                   	pop    ecx
c0010f2a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010f2f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f34:	5b                   	pop    ebx
c0010f35:	5e                   	pop    esi
c0010f36:	c3                   	ret    

c0010f37 <SysMakeDir(regs*)>:
c0010f37:	56                   	push   esi
c0010f38:	53                   	push   ebx
c0010f39:	83 ec 10             	sub    esp,0x10
c0010f3c:	68 14 01 00 00       	push   0x114
c0010f41:	e8 1f 69 ff ff       	call   c0007865 <malloc>
c0010f46:	83 c4 0c             	add    esp,0xc
c0010f49:	89 c3                	mov    ebx,eax
c0010f4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f50:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010f53:	56                   	push   esi
c0010f54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010f58:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010f5b:	50                   	push   eax
c0010f5c:	53                   	push   ebx
c0010f5d:	e8 44 a1 ff ff       	call   c000b0a6 <Directory::Directory(char const*, Process*)>
c0010f62:	83 c4 10             	add    esp,0x10
c0010f65:	85 db                	test   ebx,ebx
c0010f67:	74 2a                	je     c0010f93 <SysMakeDir(regs*)+0x5c>
c0010f69:	83 ec 0c             	sub    esp,0xc
c0010f6c:	53                   	push   ebx
c0010f6d:	e8 d4 a3 ff ff       	call   c000b346 <Directory::create()>
c0010f72:	89 c6                	mov    esi,eax
c0010f74:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010f76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f79:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010f7c:	83 c4 10             	add    esp,0x10
c0010f7f:	31 c0                	xor    eax,eax
c0010f81:	59                   	pop    ecx
c0010f82:	85 f6                	test   esi,esi
c0010f84:	5b                   	pop    ebx
c0010f85:	0f 95 c0             	setne  al
c0010f88:	5e                   	pop    esi
c0010f89:	31 d2                	xor    edx,edx
c0010f8b:	f7 d8                	neg    eax
c0010f8d:	83 d2 00             	adc    edx,0x0
c0010f90:	f7 da                	neg    edx
c0010f92:	c3                   	ret    
c0010f93:	59                   	pop    ecx
c0010f94:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010f99:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f9e:	5b                   	pop    ebx
c0010f9f:	5e                   	pop    esi
c0010fa0:	c3                   	ret    

c0010fa1 <SysCloseDir(regs*)>:
c0010fa1:	53                   	push   ebx
c0010fa2:	83 ec 08             	sub    esp,0x8
c0010fa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fa9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010fac:	8d 50 fd             	lea    edx,[eax-0x3]
c0010faf:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010fb5:	77 2f                	ja     c0010fe6 <SysCloseDir(regs*)+0x45>
c0010fb7:	83 ec 0c             	sub    esp,0xc
c0010fba:	50                   	push   eax
c0010fbb:	e8 33 82 ff ff       	call   c00091f3 <getFromFileDescriptor(int)>
c0010fc0:	89 c3                	mov    ebx,eax
c0010fc2:	89 04 24             	mov    DWORD PTR [esp],eax
c0010fc5:	e8 f8 a1 ff ff       	call   c000b1c2 <Directory::close()>
c0010fca:	83 c4 10             	add    esp,0x10
c0010fcd:	85 db                	test   ebx,ebx
c0010fcf:	74 0c                	je     c0010fdd <SysCloseDir(regs*)+0x3c>
c0010fd1:	83 ec 0c             	sub    esp,0xc
c0010fd4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010fd6:	53                   	push   ebx
c0010fd7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010fda:	83 c4 10             	add    esp,0x10
c0010fdd:	31 c0                	xor    eax,eax
c0010fdf:	31 d2                	xor    edx,edx
c0010fe1:	83 c4 08             	add    esp,0x8
c0010fe4:	5b                   	pop    ebx
c0010fe5:	c3                   	ret    
c0010fe6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010feb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ff0:	83 c4 08             	add    esp,0x8
c0010ff3:	5b                   	pop    ebx
c0010ff4:	c3                   	ret    

c0010ff5 <SysWait(regs*)>:
c0010ff5:	83 ec 10             	sub    esp,0x10
c0010ff8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010ffc:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010fff:	52                   	push   edx
c0011000:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011003:	51                   	push   ecx
c0011004:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011007:	50                   	push   eax
c0011008:	e8 7b 3c 00 00       	call   c0014c88 <waitTask(int, int*, int)>
c001100d:	83 c4 1c             	add    esp,0x1c
c0011010:	99                   	cdq    
c0011011:	c3                   	ret    

c0011012 <SysNotImpl(regs*)>:
c0011012:	83 ec 18             	sub    esp,0x18
c0011015:	68 be 04 02 c0       	push   0xc00204be
c001101a:	e8 a8 f3 ff ff       	call   c00103c7 <KePanic(char const*)>
c001101f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011024:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011029:	83 c4 1c             	add    esp,0x1c
c001102c:	c3                   	ret    

c001102d <SysPanic(regs*)>:
c001102d:	83 ec 18             	sub    esp,0x18
c0011030:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011034:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011037:	50                   	push   eax
c0011038:	e8 8a f3 ff ff       	call   c00103c7 <KePanic(char const*)>
c001103d:	b8 01 00 00 00       	mov    eax,0x1
c0011042:	31 d2                	xor    edx,edx
c0011044:	83 c4 1c             	add    esp,0x1c
c0011047:	c3                   	ret    

c0011048 <SysRmdir(regs*)>:
c0011048:	56                   	push   esi
c0011049:	53                   	push   ebx
c001104a:	83 ec 20             	sub    esp,0x20
c001104d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011051:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011054:	68 14 01 00 00       	push   0x114
c0011059:	e8 07 68 ff ff       	call   c0007865 <malloc>
c001105e:	83 c4 0c             	add    esp,0xc
c0011061:	89 c3                	mov    ebx,eax
c0011063:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011068:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001106b:	50                   	push   eax
c001106c:	56                   	push   esi
c001106d:	53                   	push   ebx
c001106e:	e8 09 9b ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c0011073:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011076:	e8 39 9d ff ff       	call   c000adb4 <File::unlink()>
c001107b:	83 c4 10             	add    esp,0x10
c001107e:	85 db                	test   ebx,ebx
c0011080:	74 14                	je     c0011096 <SysRmdir(regs*)+0x4e>
c0011082:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011086:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011088:	83 ec 0c             	sub    esp,0xc
c001108b:	53                   	push   ebx
c001108c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001108f:	83 c4 10             	add    esp,0x10
c0011092:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011096:	85 c0                	test   eax,eax
c0011098:	0f 95 c0             	setne  al
c001109b:	31 d2                	xor    edx,edx
c001109d:	25 ff 00 00 00       	and    eax,0xff
c00110a2:	f7 d8                	neg    eax
c00110a4:	83 d2 00             	adc    edx,0x0
c00110a7:	83 c4 14             	add    esp,0x14
c00110aa:	f7 da                	neg    edx
c00110ac:	5b                   	pop    ebx
c00110ad:	5e                   	pop    esi
c00110ae:	c3                   	ret    

c00110af <SysUnlink(regs*)>:
c00110af:	56                   	push   esi
c00110b0:	53                   	push   ebx
c00110b1:	83 ec 20             	sub    esp,0x20
c00110b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00110b8:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00110bb:	68 14 01 00 00       	push   0x114
c00110c0:	e8 a0 67 ff ff       	call   c0007865 <malloc>
c00110c5:	83 c4 0c             	add    esp,0xc
c00110c8:	89 c3                	mov    ebx,eax
c00110ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110cf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00110d2:	50                   	push   eax
c00110d3:	56                   	push   esi
c00110d4:	53                   	push   ebx
c00110d5:	e8 a2 9a ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c00110da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00110dd:	e8 d2 9c ff ff       	call   c000adb4 <File::unlink()>
c00110e2:	83 c4 10             	add    esp,0x10
c00110e5:	85 db                	test   ebx,ebx
c00110e7:	74 14                	je     c00110fd <SysUnlink(regs*)+0x4e>
c00110e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00110ed:	8b 13                	mov    edx,DWORD PTR [ebx]
c00110ef:	83 ec 0c             	sub    esp,0xc
c00110f2:	53                   	push   ebx
c00110f3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00110f6:	83 c4 10             	add    esp,0x10
c00110f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00110fd:	85 c0                	test   eax,eax
c00110ff:	0f 95 c0             	setne  al
c0011102:	31 d2                	xor    edx,edx
c0011104:	25 ff 00 00 00       	and    eax,0xff
c0011109:	f7 d8                	neg    eax
c001110b:	83 d2 00             	adc    edx,0x0
c001110e:	83 c4 14             	add    esp,0x14
c0011111:	f7 da                	neg    edx
c0011113:	5b                   	pop    ebx
c0011114:	5e                   	pop    esi
c0011115:	c3                   	ret    

c0011116 <SysGetArgv(regs*)>:
c0011116:	83 ec 0c             	sub    esp,0xc
c0011119:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001111d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011120:	85 c0                	test   eax,eax
c0011122:	78 2c                	js     c0011150 <SysGetArgv(regs*)+0x3a>
c0011124:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001112a:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001112d:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0011133:	7d 1b                	jge    c0011150 <SysGetArgv(regs*)+0x3a>
c0011135:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c001113c:	85 c0                	test   eax,eax
c001113e:	74 18                	je     c0011158 <SysGetArgv(regs*)+0x42>
c0011140:	83 ec 08             	sub    esp,0x8
c0011143:	50                   	push   eax
c0011144:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011147:	50                   	push   eax
c0011148:	e8 a3 f4 fe ff       	call   c00005f0 <strcpy>
c001114d:	83 c4 10             	add    esp,0x10
c0011150:	31 c0                	xor    eax,eax
c0011152:	31 d2                	xor    edx,edx
c0011154:	83 c4 0c             	add    esp,0xc
c0011157:	c3                   	ret    
c0011158:	b8 01 00 00 00       	mov    eax,0x1
c001115d:	31 d2                	xor    edx,edx
c001115f:	83 c4 0c             	add    esp,0xc
c0011162:	c3                   	ret    

c0011163 <SysUSleep(regs*)>:
c0011163:	83 ec 1c             	sub    esp,0x1c
c0011166:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001116a:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001116d:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011170:	6a 00                	push   0x0
c0011172:	6a 64                	push   0x64
c0011174:	52                   	push   edx
c0011175:	50                   	push   eax
c0011176:	e8 e5 cb 00 00       	call   c001dd60 <__udivdi3>
c001117b:	83 c4 14             	add    esp,0x14
c001117e:	50                   	push   eax
c001117f:	e8 d8 3b 00 00       	call   c0014d5c <milliTenthSleep(unsigned int)>
c0011184:	31 c0                	xor    eax,eax
c0011186:	31 d2                	xor    edx,edx
c0011188:	83 c4 1c             	add    esp,0x1c
c001118b:	c3                   	ret    

c001118c <SysSpawn(regs*)>:
c001118c:	56                   	push   esi
c001118d:	53                   	push   ebx
c001118e:	50                   	push   eax
c001118f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011193:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011196:	85 c0                	test   eax,eax
c0011198:	75 08                	jne    c00111a2 <SysSpawn(regs*)+0x16>
c001119a:	59                   	pop    ecx
c001119b:	31 c0                	xor    eax,eax
c001119d:	31 d2                	xor    edx,edx
c001119f:	5b                   	pop    ebx
c00111a0:	5e                   	pop    esi
c00111a1:	c3                   	ret    
c00111a2:	83 ec 0c             	sub    esp,0xc
c00111a5:	68 24 07 00 00       	push   0x724
c00111aa:	e8 b6 66 ff ff       	call   c0007865 <malloc>
c00111af:	83 c4 10             	add    esp,0x10
c00111b2:	89 c6                	mov    esi,eax
c00111b4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00111b7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00111ba:	85 c0                	test   eax,eax
c00111bc:	75 33                	jne    c00111f1 <SysSpawn(regs*)+0x65>
c00111be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111c3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00111c6:	52                   	push   edx
c00111c7:	50                   	push   eax
c00111c8:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c00111cb:	53                   	push   ebx
c00111cc:	56                   	push   esi
c00111cd:	e8 0e 32 00 00       	call   c00143e0 <Process::Process(char const*, Process*, char**)>
c00111d2:	83 c4 10             	add    esp,0x10
c00111d5:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00111dc:	75 bc                	jne    c001119a <SysSpawn(regs*)+0xe>
c00111de:	83 ec 0c             	sub    esp,0xc
c00111e1:	56                   	push   esi
c00111e2:	e8 39 37 00 00       	call   c0014920 <Process::createUserThread()>
c00111e7:	8b 06                	mov    eax,DWORD PTR [esi]
c00111e9:	83 c4 10             	add    esp,0x10
c00111ec:	99                   	cdq    
c00111ed:	59                   	pop    ecx
c00111ee:	5b                   	pop    ebx
c00111ef:	5e                   	pop    esi
c00111f0:	c3                   	ret    
c00111f1:	31 c0                	xor    eax,eax
c00111f3:	eb d1                	jmp    c00111c6 <SysSpawn(regs*)+0x3a>

c00111f5 <SysGetEnv(regs*)>:
c00111f5:	57                   	push   edi
c00111f6:	56                   	push   esi
c00111f7:	53                   	push   ebx
c00111f8:	83 ec 1c             	sub    esp,0x1c
c00111fb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00111ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011204:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011207:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001120a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001120d:	50                   	push   eax
c001120e:	e8 6c f0 ff ff       	call   c001027f <Krnl::getProcessTotalEnvCount(Process*)>
c0011213:	83 c4 10             	add    esp,0x10
c0011216:	39 c7                	cmp    edi,eax
c0011218:	7c 14                	jl     c001122e <SysGetEnv(regs*)+0x39>
c001121a:	85 f6                	test   esi,esi
c001121c:	75 0b                	jne    c0011229 <SysGetEnv(regs*)+0x34>
c001121e:	83 c4 10             	add    esp,0x10
c0011221:	31 c0                	xor    eax,eax
c0011223:	5b                   	pop    ebx
c0011224:	31 d2                	xor    edx,edx
c0011226:	5e                   	pop    esi
c0011227:	5f                   	pop    edi
c0011228:	c3                   	ret    
c0011229:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001122c:	eb f0                	jmp    c001121e <SysGetEnv(regs*)+0x29>
c001122e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011232:	52                   	push   edx
c0011233:	57                   	push   edi
c0011234:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001123a:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c001123d:	51                   	push   ecx
c001123e:	50                   	push   eax
c001123f:	e8 5b f0 ff ff       	call   c001029f <Krnl::getProcessEnvPair(Process*, int)>
c0011244:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011247:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001124b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001124f:	83 c4 0c             	add    esp,0xc
c0011252:	85 db                	test   ebx,ebx
c0011254:	75 23                	jne    c0011279 <SysGetEnv(regs*)+0x84>
c0011256:	83 ec 0c             	sub    esp,0xc
c0011259:	50                   	push   eax
c001125a:	e8 d1 f2 fe ff       	call   c0000530 <strlen>
c001125f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011262:	89 c3                	mov    ebx,eax
c0011264:	e8 c7 f2 fe ff       	call   c0000530 <strlen>
c0011269:	31 d2                	xor    edx,edx
c001126b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001126f:	83 c4 10             	add    esp,0x10
c0011272:	83 c4 10             	add    esp,0x10
c0011275:	5b                   	pop    ebx
c0011276:	5e                   	pop    esi
c0011277:	5f                   	pop    edi
c0011278:	c3                   	ret    
c0011279:	83 ec 08             	sub    esp,0x8
c001127c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001127f:	50                   	push   eax
c0011280:	56                   	push   esi
c0011281:	e8 6a f3 fe ff       	call   c00005f0 <strcpy>
c0011286:	58                   	pop    eax
c0011287:	5a                   	pop    edx
c0011288:	68 d8 04 02 c0       	push   0xc00204d8
c001128d:	56                   	push   esi
c001128e:	e8 1d f5 fe ff       	call   c00007b0 <strcat>
c0011293:	59                   	pop    ecx
c0011294:	5b                   	pop    ebx
c0011295:	57                   	push   edi
c0011296:	56                   	push   esi
c0011297:	e8 14 f5 fe ff       	call   c00007b0 <strcat>
c001129c:	83 c4 10             	add    esp,0x10
c001129f:	e9 7a ff ff ff       	jmp    c001121e <SysGetEnv(regs*)+0x29>

c00112a4 <SysSetFatAttrib(regs*)>:
c00112a4:	57                   	push   edi
c00112a5:	56                   	push   esi
c00112a6:	53                   	push   ebx
c00112a7:	83 ec 1c             	sub    esp,0x1c
c00112aa:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00112ae:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00112b1:	68 14 01 00 00       	push   0x114
c00112b6:	e8 aa 65 ff ff       	call   c0007865 <malloc>
c00112bb:	83 c4 0c             	add    esp,0xc
c00112be:	89 c3                	mov    ebx,eax
c00112c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00112c5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00112c8:	50                   	push   eax
c00112c9:	57                   	push   edi
c00112ca:	53                   	push   ebx
c00112cb:	e8 ac 98 ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c00112d0:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00112d3:	83 c4 0c             	add    esp,0xc
c00112d6:	0f b6 d4             	movzx  edx,ah
c00112d9:	25 ff 00 00 00       	and    eax,0xff
c00112de:	52                   	push   edx
c00112df:	50                   	push   eax
c00112e0:	53                   	push   ebx
c00112e1:	e8 68 9b ff ff       	call   c000ae4e <File::chfatattr(unsigned char, unsigned char)>
c00112e6:	83 c4 10             	add    esp,0x10
c00112e9:	85 db                	test   ebx,ebx
c00112eb:	74 14                	je     c0011301 <SysSetFatAttrib(regs*)+0x5d>
c00112ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00112f1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00112f3:	83 ec 0c             	sub    esp,0xc
c00112f6:	53                   	push   ebx
c00112f7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00112fa:	83 c4 10             	add    esp,0x10
c00112fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011301:	85 c0                	test   eax,eax
c0011303:	0f 95 c0             	setne  al
c0011306:	31 d2                	xor    edx,edx
c0011308:	25 ff 00 00 00       	and    eax,0xff
c001130d:	f7 d8                	neg    eax
c001130f:	83 d2 00             	adc    edx,0x0
c0011312:	83 c4 10             	add    esp,0x10
c0011315:	f7 da                	neg    edx
c0011317:	5b                   	pop    ebx
c0011318:	5e                   	pop    esi
c0011319:	5f                   	pop    edi
c001131a:	c3                   	ret    

c001131b <SysPipe(regs*)>:
c001131b:	57                   	push   edi
c001131c:	56                   	push   esi
c001131d:	53                   	push   ebx
c001131e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011322:	83 ec 0c             	sub    esp,0xc
c0011325:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011328:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001132b:	6a 20                	push   0x20
c001132d:	e8 33 65 ff ff       	call   c0007865 <malloc>
c0011332:	89 c3                	mov    ebx,eax
c0011334:	58                   	pop    eax
c0011335:	5a                   	pop    edx
c0011336:	68 00 50 00 00       	push   0x5000
c001133b:	53                   	push   ebx
c001133c:	e8 29 6e ff ff       	call   c000816a <Pipe::Pipe(int)>
c0011341:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011344:	e8 b5 7b ff ff       	call   c0008efe <UnixFile::getFileDescriptor()>
c0011349:	89 07                	mov    DWORD PTR [edi],eax
c001134b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001134e:	e8 ab 7b ff ff       	call   c0008efe <UnixFile::getFileDescriptor()>
c0011353:	83 c4 10             	add    esp,0x10
c0011356:	89 06                	mov    DWORD PTR [esi],eax
c0011358:	31 d2                	xor    edx,edx
c001135a:	5b                   	pop    ebx
c001135b:	31 c0                	xor    eax,eax
c001135d:	5e                   	pop    esi
c001135e:	5f                   	pop    edi
c001135f:	c3                   	ret    

c0011360 <SysGetUnixTime(regs*)>:
c0011360:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0011365:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001136b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001136f:	e9 16 a2 ff ff       	jmp    c000b58a <Clock::timeInSecondsLocal()>

c0011374 <string_ends_with(char const*, char const*)>:
c0011374:	57                   	push   edi
c0011375:	56                   	push   esi
c0011376:	53                   	push   ebx
c0011377:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001137b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001137f:	83 ec 0c             	sub    esp,0xc
c0011382:	53                   	push   ebx
c0011383:	e8 a8 f1 fe ff       	call   c0000530 <strlen>
c0011388:	89 3c 24             	mov    DWORD PTR [esp],edi
c001138b:	89 c6                	mov    esi,eax
c001138d:	e8 9e f1 fe ff       	call   c0000530 <strlen>
c0011392:	83 c4 10             	add    esp,0x10
c0011395:	39 c6                	cmp    esi,eax
c0011397:	7d 06                	jge    c001139f <string_ends_with(char const*, char const*)+0x2b>
c0011399:	5b                   	pop    ebx
c001139a:	31 c0                	xor    eax,eax
c001139c:	5e                   	pop    esi
c001139d:	5f                   	pop    edi
c001139e:	c3                   	ret    
c001139f:	83 ec 08             	sub    esp,0x8
c00113a2:	29 c6                	sub    esi,eax
c00113a4:	57                   	push   edi
c00113a5:	01 f3                	add    ebx,esi
c00113a7:	53                   	push   ebx
c00113a8:	e8 23 f3 fe ff       	call   c00006d0 <strcmp>
c00113ad:	83 c4 10             	add    esp,0x10
c00113b0:	85 c0                	test   eax,eax
c00113b2:	5b                   	pop    ebx
c00113b3:	0f 94 c0             	sete   al
c00113b6:	5e                   	pop    esi
c00113b7:	25 ff 00 00 00       	and    eax,0xff
c00113bc:	5f                   	pop    edi
c00113bd:	c3                   	ret    

c00113be <SysOpen(regs*)>:
c00113be:	56                   	push   esi
c00113bf:	53                   	push   ebx
c00113c0:	81 ec 04 01 00 00    	sub    esp,0x104
c00113c6:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00113cd:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00113d0:	85 c9                	test   ecx,ecx
c00113d2:	0f 84 b9 01 00 00    	je     c0011591 <SysOpen(regs*)+0x1d3>
c00113d8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00113db:	85 c0                	test   eax,eax
c00113dd:	0f 84 ae 01 00 00    	je     c0011591 <SysOpen(regs*)+0x1d3>
c00113e3:	52                   	push   edx
c00113e4:	68 da 04 02 c0       	push   0xc00204da
c00113e9:	50                   	push   eax
c00113ea:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00113ee:	56                   	push   esi
c00113ef:	e8 de 95 ff ff       	call   c000a9d2 <Fs::standardiseFiles(char*, char const*, char const*)>
c00113f4:	89 34 24             	mov    DWORD PTR [esp],esi
c00113f7:	e8 34 f1 fe ff       	call   c0000530 <strlen>
c00113fc:	83 c4 10             	add    esp,0x10
c00113ff:	48                   	dec    eax
c0011400:	74 1d                	je     c001141f <SysOpen(regs*)+0x61>
c0011402:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0011405:	eb 0f                	jmp    c0011416 <SysOpen(regs*)+0x58>
c0011407:	80 fa 3a             	cmp    dl,0x3a
c001140a:	74 0f                	je     c001141b <SysOpen(regs*)+0x5d>
c001140c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011410:	48                   	dec    eax
c0011411:	74 0c                	je     c001141f <SysOpen(regs*)+0x61>
c0011413:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0011416:	80 fa 2e             	cmp    dl,0x2e
c0011419:	75 ec                	jne    c0011407 <SysOpen(regs*)+0x49>
c001141b:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001141f:	83 ec 08             	sub    esp,0x8
c0011422:	68 de 04 02 c0       	push   0xc00204de
c0011427:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001142a:	50                   	push   eax
c001142b:	e8 44 ff ff ff       	call   c0011374 <string_ends_with(char const*, char const*)>
c0011430:	83 c4 10             	add    esp,0x10
c0011433:	85 c0                	test   eax,eax
c0011435:	74 1d                	je     c0011454 <SysOpen(regs*)+0x96>
c0011437:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001143a:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011440:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011447:	81 c4 04 01 00 00    	add    esp,0x104
c001144d:	31 c0                	xor    eax,eax
c001144f:	31 d2                	xor    edx,edx
c0011451:	5b                   	pop    ebx
c0011452:	5e                   	pop    esi
c0011453:	c3                   	ret    
c0011454:	83 ec 08             	sub    esp,0x8
c0011457:	68 e3 04 02 c0       	push   0xc00204e3
c001145c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001145f:	50                   	push   eax
c0011460:	e8 0f ff ff ff       	call   c0011374 <string_ends_with(char const*, char const*)>
c0011465:	83 c4 10             	add    esp,0x10
c0011468:	85 c0                	test   eax,eax
c001146a:	75 cb                	jne    c0011437 <SysOpen(regs*)+0x79>
c001146c:	83 ec 08             	sub    esp,0x8
c001146f:	68 df 04 02 c0       	push   0xc00204df
c0011474:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011477:	50                   	push   eax
c0011478:	e8 53 f2 fe ff       	call   c00006d0 <strcmp>
c001147d:	83 c4 10             	add    esp,0x10
c0011480:	85 c0                	test   eax,eax
c0011482:	74 b3                	je     c0011437 <SysOpen(regs*)+0x79>
c0011484:	83 ec 08             	sub    esp,0x8
c0011487:	68 de 04 02 c0       	push   0xc00204de
c001148c:	56                   	push   esi
c001148d:	e8 e2 fe ff ff       	call   c0011374 <string_ends_with(char const*, char const*)>
c0011492:	83 c4 10             	add    esp,0x10
c0011495:	85 c0                	test   eax,eax
c0011497:	75 9e                	jne    c0011437 <SysOpen(regs*)+0x79>
c0011499:	83 ec 08             	sub    esp,0x8
c001149c:	68 e8 04 02 c0       	push   0xc00204e8
c00114a1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00114a4:	50                   	push   eax
c00114a5:	e8 ca fe ff ff       	call   c0011374 <string_ends_with(char const*, char const*)>
c00114aa:	83 c4 10             	add    esp,0x10
c00114ad:	85 c0                	test   eax,eax
c00114af:	0f 85 ef 00 00 00    	jne    c00115a4 <SysOpen(regs*)+0x1e6>
c00114b5:	83 ec 08             	sub    esp,0x8
c00114b8:	68 ed 04 02 c0       	push   0xc00204ed
c00114bd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00114c0:	50                   	push   eax
c00114c1:	e8 ae fe ff ff       	call   c0011374 <string_ends_with(char const*, char const*)>
c00114c6:	83 c4 10             	add    esp,0x10
c00114c9:	85 c0                	test   eax,eax
c00114cb:	0f 85 d3 00 00 00    	jne    c00115a4 <SysOpen(regs*)+0x1e6>
c00114d1:	83 ec 08             	sub    esp,0x8
c00114d4:	68 e9 04 02 c0       	push   0xc00204e9
c00114d9:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00114dc:	51                   	push   ecx
c00114dd:	e8 ee f1 fe ff       	call   c00006d0 <strcmp>
c00114e2:	83 c4 10             	add    esp,0x10
c00114e5:	85 c0                	test   eax,eax
c00114e7:	0f 84 b7 00 00 00    	je     c00115a4 <SysOpen(regs*)+0x1e6>
c00114ed:	83 ec 08             	sub    esp,0x8
c00114f0:	68 e8 04 02 c0       	push   0xc00204e8
c00114f5:	56                   	push   esi
c00114f6:	e8 79 fe ff ff       	call   c0011374 <string_ends_with(char const*, char const*)>
c00114fb:	83 c4 10             	add    esp,0x10
c00114fe:	85 c0                	test   eax,eax
c0011500:	0f 85 9e 00 00 00    	jne    c00115a4 <SysOpen(regs*)+0x1e6>
c0011506:	83 ec 0c             	sub    esp,0xc
c0011509:	68 14 01 00 00       	push   0x114
c001150e:	e8 52 63 ff ff       	call   c0007865 <malloc>
c0011513:	83 c4 0c             	add    esp,0xc
c0011516:	89 c6                	mov    esi,eax
c0011518:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001151d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011520:	50                   	push   eax
c0011521:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011524:	52                   	push   edx
c0011525:	56                   	push   esi
c0011526:	e8 51 96 ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c001152b:	83 c4 10             	add    esp,0x10
c001152e:	85 f6                	test   esi,esi
c0011530:	74 5f                	je     c0011591 <SysOpen(regs*)+0x1d3>
c0011532:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011535:	89 d0                	mov    eax,edx
c0011537:	25 ff 00 00 00       	and    eax,0xff
c001153c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001153f:	89 d0                	mov    eax,edx
c0011541:	83 e0 01             	and    eax,0x1
c0011544:	f6 c2 02             	test   dl,0x2
c0011547:	74 03                	je     c001154c <SysOpen(regs*)+0x18e>
c0011549:	83 c8 02             	or     eax,0x2
c001154c:	f6 c2 04             	test   dl,0x4
c001154f:	74 03                	je     c0011554 <SysOpen(regs*)+0x196>
c0011551:	83 c8 04             	or     eax,0x4
c0011554:	f6 c2 08             	test   dl,0x8
c0011557:	74 03                	je     c001155c <SysOpen(regs*)+0x19e>
c0011559:	83 c8 0a             	or     eax,0xa
c001155c:	83 e2 10             	and    edx,0x10
c001155f:	74 03                	je     c0011564 <SysOpen(regs*)+0x1a6>
c0011561:	83 c8 12             	or     eax,0x12
c0011564:	83 ec 08             	sub    esp,0x8
c0011567:	50                   	push   eax
c0011568:	56                   	push   esi
c0011569:	e8 ce 96 ff ff       	call   c000ac3c <File::open(FileOpenMode)>
c001156e:	83 c4 10             	add    esp,0x10
c0011571:	85 c0                	test   eax,eax
c0011573:	75 1c                	jne    c0011591 <SysOpen(regs*)+0x1d3>
c0011575:	83 ec 0c             	sub    esp,0xc
c0011578:	56                   	push   esi
c0011579:	e8 80 79 ff ff       	call   c0008efe <UnixFile::getFileDescriptor()>
c001157e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011581:	83 c4 10             	add    esp,0x10
c0011584:	89 02                	mov    DWORD PTR [edx],eax
c0011586:	c1 f8 1f             	sar    eax,0x1f
c0011589:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001158c:	e9 b6 fe ff ff       	jmp    c0011447 <SysOpen(regs*)+0x89>
c0011591:	81 c4 04 01 00 00    	add    esp,0x104
c0011597:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001159c:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115a1:	5b                   	pop    ebx
c00115a2:	5e                   	pop    esi
c00115a3:	c3                   	ret    
c00115a4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00115a7:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00115ad:	e9 8e fe ff ff       	jmp    c0011440 <SysOpen(regs*)+0x82>

c00115b2 <KeSystemCall(regs*, void*)>:
c00115b2:	53                   	push   ebx
c00115b3:	83 ec 08             	sub    esp,0x8
c00115b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00115ba:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00115bd:	83 f8 3b             	cmp    eax,0x3b
c00115c0:	77 16                	ja     c00115d8 <KeSystemCall(regs*, void*)+0x26>
c00115c2:	8b 14 85 a0 18 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffde760]
c00115c9:	85 d2                	test   edx,edx
c00115cb:	74 0b                	je     c00115d8 <KeSystemCall(regs*, void*)+0x26>
c00115cd:	83 ec 0c             	sub    esp,0xc
c00115d0:	53                   	push   ebx
c00115d1:	ff d2                	call   edx
c00115d3:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00115d6:	eb 0d                	jmp    c00115e5 <KeSystemCall(regs*, void*)+0x33>
c00115d8:	52                   	push   edx
c00115d9:	52                   	push   edx
c00115da:	50                   	push   eax
c00115db:	68 f2 04 02 c0       	push   0xc00204f2
c00115e0:	e8 21 90 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c00115e5:	83 c4 10             	add    esp,0x10
c00115e8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00115ed:	31 d2                	xor    edx,edx
c00115ef:	83 c4 08             	add    esp,0x8
c00115f2:	5b                   	pop    ebx
c00115f3:	c3                   	ret    

c00115f4 <KeSwitchEndian16(unsigned short)>:
c00115f4:	83 ec 04             	sub    esp,0x4
c00115f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00115fb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00115ff:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011602:	25 ff ff 00 00       	and    eax,0xffff
c0011607:	c1 f8 08             	sar    eax,0x8
c001160a:	89 c2                	mov    edx,eax
c001160c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001160f:	25 ff ff 00 00       	and    eax,0xffff
c0011614:	c1 e0 08             	shl    eax,0x8
c0011617:	09 d0                	or     eax,edx
c0011619:	83 c4 04             	add    esp,0x4
c001161c:	c3                   	ret    
c001161d:	8d 76 00             	lea    esi,[esi+0x0]

c0011620 <KeSwitchEndian32(unsigned int)>:
c0011620:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011624:	c1 e8 18             	shr    eax,0x18
c0011627:	89 c2                	mov    edx,eax
c0011629:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001162d:	c1 e0 08             	shl    eax,0x8
c0011630:	25 00 00 ff 00       	and    eax,0xff0000
c0011635:	09 c2                	or     edx,eax
c0011637:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001163b:	c1 e8 08             	shr    eax,0x8
c001163e:	25 00 ff 00 00       	and    eax,0xff00
c0011643:	09 c2                	or     edx,eax
c0011645:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011649:	c1 e0 18             	shl    eax,0x18
c001164c:	09 d0                	or     eax,edx
c001164e:	c3                   	ret    
c001164f:	90                   	nop

c0011650 <EthernetCRC32(unsigned char*, int)>:
c0011650:	83 ec 10             	sub    esp,0x10
c0011653:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011658:	75 0a                	jne    c0011664 <EthernetCRC32(unsigned char*, int)+0x14>
c001165a:	b8 00 00 00 00       	mov    eax,0x0
c001165f:	e9 8c 00 00 00       	jmp    c00116f0 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011664:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011669:	7f 09                	jg     c0011674 <EthernetCRC32(unsigned char*, int)+0x24>
c001166b:	b8 00 00 00 00       	mov    eax,0x0
c0011670:	eb 7e                	jmp    c00116f0 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011672:	66 90                	xchg   ax,ax
c0011674:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001167c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011684:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011688:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001168c:	7d 5a                	jge    c00116e8 <EthernetCRC32(unsigned char*, int)+0x98>
c001168e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011692:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011696:	01 d0                	add    eax,edx
c0011698:	8a 00                	mov    al,BYTE PTR [eax]
c001169a:	25 ff 00 00 00       	and    eax,0xff
c001169f:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c00116a3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00116ab:	90                   	nop
c00116ac:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c00116b1:	7f 2d                	jg     c00116e0 <EthernetCRC32(unsigned char*, int)+0x90>
c00116b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116b7:	83 e0 01             	and    eax,0x1
c00116ba:	74 10                	je     c00116cc <EthernetCRC32(unsigned char*, int)+0x7c>
c00116bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116c0:	d1 e8                	shr    eax,1
c00116c2:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00116c7:	eb 0b                	jmp    c00116d4 <EthernetCRC32(unsigned char*, int)+0x84>
c00116c9:	8d 76 00             	lea    esi,[esi+0x0]
c00116cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116d0:	d1 e8                	shr    eax,1
c00116d2:	66 90                	xchg   ax,ax
c00116d4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116d8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00116dc:	eb ce                	jmp    c00116ac <EthernetCRC32(unsigned char*, int)+0x5c>
c00116de:	66 90                	xchg   ax,ax
c00116e0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00116e4:	eb 9e                	jmp    c0011684 <EthernetCRC32(unsigned char*, int)+0x34>
c00116e6:	66 90                	xchg   ax,ax
c00116e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116ec:	f7 d0                	not    eax
c00116ee:	66 90                	xchg   ax,ax
c00116f0:	83 c4 10             	add    esp,0x10
c00116f3:	c3                   	ret    

c00116f4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c00116f4:	83 ec 2c             	sub    esp,0x2c
c00116f7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00116fb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011700:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011704:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001170c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001170f:	66 3d 06 08          	cmp    ax,0x806
c0011713:	75 13                	jne    c0011728 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x34>
c0011715:	83 ec 0c             	sub    esp,0xc
c0011718:	68 06 05 02 c0       	push   0xc0020506
c001171d:	e8 e4 8e ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0011722:	83 c4 10             	add    esp,0x10
c0011725:	eb 21                	jmp    c0011748 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x54>
c0011727:	90                   	nop
c0011728:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001172c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001172f:	66 3d 00 08          	cmp    ax,0x800
c0011733:	75 13                	jne    c0011748 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x54>
c0011735:	83 ec 0c             	sub    esp,0xc
c0011738:	68 1c 05 02 c0       	push   0xc002051c
c001173d:	e8 c4 8e ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0011742:	83 c4 10             	add    esp,0x10
c0011745:	8d 76 00             	lea    esi,[esi+0x0]
c0011748:	90                   	nop
c0011749:	83 c4 2c             	add    esp,0x2c
c001174c:	c3                   	ret    

c001174d <CmOpen(char const*)>:
c001174d:	57                   	push   edi
c001174e:	56                   	push   esi
c001174f:	53                   	push   ebx
c0011750:	83 ec 1c             	sub    esp,0x1c
c0011753:	6a 30                	push   0x30
c0011755:	e8 0b 61 ff ff       	call   c0007865 <malloc>
c001175a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011761:	89 c3                	mov    ebx,eax
c0011763:	e8 fd 60 ff ff       	call   c0007865 <malloc>
c0011768:	83 c4 0c             	add    esp,0xc
c001176b:	89 c6                	mov    esi,eax
c001176d:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0011773:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011777:	50                   	push   eax
c0011778:	e8 ff 93 ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c001177d:	83 c4 0c             	add    esp,0xc
c0011780:	89 33                	mov    DWORD PTR [ebx],esi
c0011782:	8d 44 24 07          	lea    eax,[esp+0x7]
c0011786:	50                   	push   eax
c0011787:	8d 44 24 10          	lea    eax,[esp+0x10]
c001178b:	50                   	push   eax
c001178c:	56                   	push   esi
c001178d:	e8 56 97 ff ff       	call   c000aee8 <File::stat(unsigned long long*, bool*)>
c0011792:	5a                   	pop    edx
c0011793:	59                   	pop    ecx
c0011794:	6a 01                	push   0x1
c0011796:	ff 33                	push   DWORD PTR [ebx]
c0011798:	e8 9f 94 ff ff       	call   c000ac3c <File::open(FileOpenMode)>
c001179d:	5e                   	pop    esi
c001179e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117a2:	e8 be 60 ff ff       	call   c0007865 <malloc>
c00117a7:	5a                   	pop    edx
c00117a8:	89 c7                	mov    edi,eax
c00117aa:	8d 74 24 10          	lea    esi,[esp+0x10]
c00117ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c00117b0:	8b 10                	mov    edx,DWORD PTR [eax]
c00117b2:	56                   	push   esi
c00117b3:	57                   	push   edi
c00117b4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00117b8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00117bc:	50                   	push   eax
c00117bd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00117c0:	83 c4 14             	add    esp,0x14
c00117c3:	ff 33                	push   DWORD PTR [ebx]
c00117c5:	e8 d0 94 ff ff       	call   c000ac9a <File::close()>
c00117ca:	59                   	pop    ecx
c00117cb:	58                   	pop    eax
c00117cc:	6a 13                	push   0x13
c00117ce:	ff 33                	push   DWORD PTR [ebx]
c00117d0:	e8 67 94 ff ff       	call   c000ac3c <File::open(FileOpenMode)>
c00117d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00117d7:	8b 10                	mov    edx,DWORD PTR [eax]
c00117d9:	89 34 24             	mov    DWORD PTR [esp],esi
c00117dc:	57                   	push   edi
c00117dd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00117e1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00117e5:	50                   	push   eax
c00117e6:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00117e9:	83 c4 14             	add    esp,0x14
c00117ec:	57                   	push   edi
c00117ed:	e8 83 60 ff ff       	call   c0007875 <free>
c00117f2:	83 c4 10             	add    esp,0x10
c00117f5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00117f8:	75 10                	jne    c001180a <CmOpen(char const*)+0xbd>
c00117fa:	83 ec 0c             	sub    esp,0xc
c00117fd:	68 31 05 02 c0       	push   0xc0020531
c0011802:	e8 c0 eb ff ff       	call   c00103c7 <KePanic(char const*)>
c0011807:	83 c4 10             	add    esp,0x10
c001180a:	8d 7b 05             	lea    edi,[ebx+0x5]
c001180d:	50                   	push   eax
c001180e:	6a 00                	push   0x0
c0011810:	6a 00                	push   0x0
c0011812:	ff 33                	push   DWORD PTR [ebx]
c0011814:	e8 e1 94 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c0011819:	8b 03                	mov    eax,DWORD PTR [ebx]
c001181b:	8b 10                	mov    edx,DWORD PTR [eax]
c001181d:	89 34 24             	mov    DWORD PTR [esp],esi
c0011820:	57                   	push   edi
c0011821:	6a 00                	push   0x0
c0011823:	6a 2b                	push   0x2b
c0011825:	50                   	push   eax
c0011826:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011829:	83 c4 1c             	add    esp,0x1c
c001182c:	6a 00                	push   0x0
c001182e:	6a 00                	push   0x0
c0011830:	ff 33                	push   DWORD PTR [ebx]
c0011832:	e8 c3 94 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c0011837:	83 c4 0c             	add    esp,0xc
c001183a:	6a 08                	push   0x8
c001183c:	68 42 05 02 c0       	push   0xc0020542
c0011841:	57                   	push   edi
c0011842:	e8 39 eb fe ff       	call   c0000380 <memcmp>
c0011847:	83 c4 10             	add    esp,0x10
c001184a:	85 c0                	test   eax,eax
c001184c:	74 10                	je     c001185e <CmOpen(char const*)+0x111>
c001184e:	83 ec 0c             	sub    esp,0xc
c0011851:	68 4b 05 02 c0       	push   0xc002054b
c0011856:	e8 6c eb ff ff       	call   c00103c7 <KePanic(char const*)>
c001185b:	83 c4 10             	add    esp,0x10
c001185e:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0011862:	89 d8                	mov    eax,ebx
c0011864:	83 c4 10             	add    esp,0x10
c0011867:	5b                   	pop    ebx
c0011868:	5e                   	pop    esi
c0011869:	5f                   	pop    edi
c001186a:	c3                   	ret    

c001186b <CmClose(Reghive_Tag*)>:
c001186b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001186f:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011873:	74 0b                	je     c0011880 <CmClose(Reghive_Tag*)+0x15>
c0011875:	8b 00                	mov    eax,DWORD PTR [eax]
c0011877:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001187b:	e9 1a 94 ff ff       	jmp    c000ac9a <File::close()>
c0011880:	c3                   	ret    

c0011881 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0011881:	53                   	push   ebx
c0011882:	83 ec 18             	sub    esp,0x18
c0011885:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011889:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c001188d:	74 29                	je     c00118b8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c001188f:	50                   	push   eax
c0011890:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011895:	99                   	cdq    
c0011896:	52                   	push   edx
c0011897:	50                   	push   eax
c0011898:	ff 33                	push   DWORD PTR [ebx]
c001189a:	e8 5b 94 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c001189f:	5a                   	pop    edx
c00118a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118a2:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00118a6:	8b 10                	mov    edx,DWORD PTR [eax]
c00118a8:	51                   	push   ecx
c00118a9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00118ad:	6a 00                	push   0x0
c00118af:	6a 2b                	push   0x2b
c00118b1:	50                   	push   eax
c00118b2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00118b5:	83 c4 20             	add    esp,0x20
c00118b8:	83 c4 18             	add    esp,0x18
c00118bb:	5b                   	pop    ebx
c00118bc:	c3                   	ret    

c00118bd <CmGetString(Reghive_Tag*, int, char*)>:
c00118bd:	55                   	push   ebp
c00118be:	57                   	push   edi
c00118bf:	56                   	push   esi
c00118c0:	53                   	push   ebx
c00118c1:	31 db                	xor    ebx,ebx
c00118c3:	83 ec 70             	sub    esp,0x70
c00118c6:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c00118cd:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00118d1:	50                   	push   eax
c00118d2:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00118d9:	55                   	push   ebp
c00118da:	e8 a2 ff ff ff       	call   c0011881 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00118df:	83 c4 10             	add    esp,0x10
c00118e2:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c00118e7:	c1 e0 08             	shl    eax,0x8
c00118ea:	89 c2                	mov    edx,eax
c00118ec:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c00118f1:	09 d0                	or     eax,edx
c00118f3:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c00118f8:	c1 e0 08             	shl    eax,0x8
c00118fb:	09 d0                	or     eax,edx
c00118fd:	74 25                	je     c0011924 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c00118ff:	6b fb 0d             	imul   edi,ebx,0xd
c0011902:	52                   	push   edx
c0011903:	8d 54 24 39          	lea    edx,[esp+0x39]
c0011907:	52                   	push   edx
c0011908:	50                   	push   eax
c0011909:	55                   	push   ebp
c001190a:	e8 72 ff ff ff       	call   c0011881 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001190f:	8d 74 24 49          	lea    esi,[esp+0x49]
c0011913:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c001191a:	b9 27 00 00 00       	mov    ecx,0x27
c001191f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011921:	83 c4 10             	add    esp,0x10
c0011924:	83 c3 03             	add    ebx,0x3
c0011927:	83 fb 15             	cmp    ebx,0x15
c001192a:	75 b6                	jne    c00118e2 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c001192c:	83 c4 6c             	add    esp,0x6c
c001192f:	5b                   	pop    ebx
c0011930:	5e                   	pop    esi
c0011931:	5f                   	pop    edi
c0011932:	5d                   	pop    ebp
c0011933:	c3                   	ret    

c0011934 <CmEnterDirectory(Reghive_Tag*, int)>:
c0011934:	83 ec 40             	sub    esp,0x40
c0011937:	8d 44 24 09          	lea    eax,[esp+0x9]
c001193b:	50                   	push   eax
c001193c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011940:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011944:	e8 38 ff ff ff       	call   c0011881 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011949:	83 c4 10             	add    esp,0x10
c001194c:	83 c8 ff             	or     eax,0xffffffff
c001194f:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0011954:	75 19                	jne    c001196f <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0011956:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c001195b:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011960:	c1 e0 08             	shl    eax,0x8
c0011963:	09 c2                	or     edx,eax
c0011965:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c001196a:	c1 e0 10             	shl    eax,0x10
c001196d:	09 d0                	or     eax,edx
c001196f:	83 c4 3c             	add    esp,0x3c
c0011972:	c3                   	ret    

c0011973 <CmGetNext(Reghive_Tag*, int)>:
c0011973:	83 ec 40             	sub    esp,0x40
c0011976:	8d 44 24 09          	lea    eax,[esp+0x9]
c001197a:	50                   	push   eax
c001197b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001197f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011983:	e8 f9 fe ff ff       	call   c0011881 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011988:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c001198d:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011992:	c1 e0 08             	shl    eax,0x8
c0011995:	09 c2                	or     edx,eax
c0011997:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001199c:	83 c4 4c             	add    esp,0x4c
c001199f:	c1 e0 10             	shl    eax,0x10
c00119a2:	09 d0                	or     eax,edx
c00119a4:	c3                   	ret    

c00119a5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c00119a5:	53                   	push   ebx
c00119a6:	83 ec 18             	sub    esp,0x18
c00119a9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00119ad:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00119b1:	74 29                	je     c00119dc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c00119b3:	50                   	push   eax
c00119b4:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c00119b9:	99                   	cdq    
c00119ba:	52                   	push   edx
c00119bb:	50                   	push   eax
c00119bc:	ff 33                	push   DWORD PTR [ebx]
c00119be:	e8 37 93 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c00119c3:	5a                   	pop    edx
c00119c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00119c6:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00119ca:	8b 10                	mov    edx,DWORD PTR [eax]
c00119cc:	51                   	push   ecx
c00119cd:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00119d1:	6a 00                	push   0x0
c00119d3:	6a 2b                	push   0x2b
c00119d5:	50                   	push   eax
c00119d6:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00119d9:	83 c4 20             	add    esp,0x20
c00119dc:	83 c4 18             	add    esp,0x18
c00119df:	5b                   	pop    ebx
c00119e0:	c3                   	ret    

c00119e1 <CmFreeExtent(Reghive_Tag*, int)>:
c00119e1:	53                   	push   ebx
c00119e2:	83 ec 3c             	sub    esp,0x3c
c00119e5:	6a 2b                	push   0x2b
c00119e7:	6a 00                	push   0x0
c00119e9:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00119ed:	53                   	push   ebx
c00119ee:	e8 cd ea fe ff       	call   c00004c0 <memset>
c00119f3:	83 c4 0c             	add    esp,0xc
c00119f6:	53                   	push   ebx
c00119f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00119fb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00119ff:	e8 a1 ff ff ff       	call   c00119a5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011a04:	83 c4 48             	add    esp,0x48
c0011a07:	5b                   	pop    ebx
c0011a08:	c3                   	ret    

c0011a09 <CmUpdateHeader(Reghive_Tag*)>:
c0011a09:	83 ec 0c             	sub    esp,0xc
c0011a0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a10:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011a14:	74 10                	je     c0011a26 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0011a16:	52                   	push   edx
c0011a17:	8d 50 05             	lea    edx,[eax+0x5]
c0011a1a:	52                   	push   edx
c0011a1b:	6a 00                	push   0x0
c0011a1d:	50                   	push   eax
c0011a1e:	e8 82 ff ff ff       	call   c00119a5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011a23:	83 c4 10             	add    esp,0x10
c0011a26:	83 c4 0c             	add    esp,0xc
c0011a29:	c3                   	ret    

c0011a2a <CmExpand(Reghive_Tag*, int)>:
c0011a2a:	57                   	push   edi
c0011a2b:	56                   	push   esi
c0011a2c:	83 ce ff             	or     esi,0xffffffff
c0011a2f:	53                   	push   ebx
c0011a30:	83 ec 30             	sub    esp,0x30
c0011a33:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011a37:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011a3b:	74 5f                	je     c0011a9c <CmExpand(Reghive_Tag*, int)+0x72>
c0011a3d:	31 d2                	xor    edx,edx
c0011a3f:	31 f6                	xor    esi,esi
c0011a41:	50                   	push   eax
c0011a42:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0011a46:	52                   	push   edx
c0011a47:	50                   	push   eax
c0011a48:	ff 33                	push   DWORD PTR [ebx]
c0011a4a:	e8 ab 92 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c0011a4f:	83 c4 0c             	add    esp,0xc
c0011a52:	6a 2b                	push   0x2b
c0011a54:	6a 00                	push   0x0
c0011a56:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0011a5a:	57                   	push   edi
c0011a5b:	e8 60 ea fe ff       	call   c00004c0 <memset>
c0011a60:	83 c4 10             	add    esp,0x10
c0011a63:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0011a67:	7d 1b                	jge    c0011a84 <CmExpand(Reghive_Tag*, int)+0x5a>
c0011a69:	83 ec 0c             	sub    esp,0xc
c0011a6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011a6e:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0011a72:	8b 10                	mov    edx,DWORD PTR [eax]
c0011a74:	46                   	inc    esi
c0011a75:	51                   	push   ecx
c0011a76:	57                   	push   edi
c0011a77:	6a 00                	push   0x0
c0011a79:	6a 2b                	push   0x2b
c0011a7b:	50                   	push   eax
c0011a7c:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011a7f:	83 c4 20             	add    esp,0x20
c0011a82:	eb df                	jmp    c0011a63 <CmExpand(Reghive_Tag*, int)+0x39>
c0011a84:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0011a88:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c0011a8b:	83 ec 0c             	sub    esp,0xc
c0011a8e:	01 f2                	add    edx,esi
c0011a90:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0011a93:	53                   	push   ebx
c0011a94:	e8 70 ff ff ff       	call   c0011a09 <CmUpdateHeader(Reghive_Tag*)>
c0011a99:	83 c4 10             	add    esp,0x10
c0011a9c:	83 c4 30             	add    esp,0x30
c0011a9f:	89 f0                	mov    eax,esi
c0011aa1:	5b                   	pop    ebx
c0011aa2:	5e                   	pop    esi
c0011aa3:	5f                   	pop    edi
c0011aa4:	c3                   	ret    

c0011aa5 <CmFindUnusedExtent(Reghive_Tag*)>:
c0011aa5:	55                   	push   ebp
c0011aa6:	57                   	push   edi
c0011aa7:	56                   	push   esi
c0011aa8:	53                   	push   ebx
c0011aa9:	83 cb ff             	or     ebx,0xffffffff
c0011aac:	83 ec 1c             	sub    esp,0x1c
c0011aaf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0011ab3:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0011ab7:	74 68                	je     c0011b21 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0011ab9:	be 2b 00 00 00       	mov    esi,0x2b
c0011abe:	51                   	push   ecx
c0011abf:	31 ff                	xor    edi,edi
c0011ac1:	6a 00                	push   0x0
c0011ac3:	31 db                	xor    ebx,ebx
c0011ac5:	6a 00                	push   0x0
c0011ac7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0011aca:	e8 2b 92 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c0011acf:	83 c4 10             	add    esp,0x10
c0011ad2:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0011ad5:	76 3b                	jbe    c0011b12 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0011ad7:	83 ec 0c             	sub    esp,0xc
c0011ada:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011add:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011ae1:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ae3:	51                   	push   ecx
c0011ae4:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0011ae8:	51                   	push   ecx
c0011ae9:	6a 00                	push   0x0
c0011aeb:	6a 01                	push   0x1
c0011aed:	50                   	push   eax
c0011aee:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011af1:	83 c4 20             	add    esp,0x20
c0011af4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011af9:	74 26                	je     c0011b21 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0011afb:	43                   	inc    ebx
c0011afc:	52                   	push   edx
c0011afd:	57                   	push   edi
c0011afe:	56                   	push   esi
c0011aff:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0011b02:	e8 f3 91 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c0011b07:	83 c6 2b             	add    esi,0x2b
c0011b0a:	83 d7 00             	adc    edi,0x0
c0011b0d:	83 c4 10             	add    esp,0x10
c0011b10:	eb c0                	jmp    c0011ad2 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0011b12:	50                   	push   eax
c0011b13:	50                   	push   eax
c0011b14:	6a 40                	push   0x40
c0011b16:	55                   	push   ebp
c0011b17:	e8 0e ff ff ff       	call   c0011a2a <CmExpand(Reghive_Tag*, int)>
c0011b1c:	83 c4 10             	add    esp,0x10
c0011b1f:	89 c3                	mov    ebx,eax
c0011b21:	83 c4 1c             	add    esp,0x1c
c0011b24:	89 d8                	mov    eax,ebx
c0011b26:	5b                   	pop    ebx
c0011b27:	5e                   	pop    esi
c0011b28:	5f                   	pop    edi
c0011b29:	5d                   	pop    ebp
c0011b2a:	c3                   	ret    

c0011b2b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0011b2b:	55                   	push   ebp
c0011b2c:	57                   	push   edi
c0011b2d:	56                   	push   esi
c0011b2e:	53                   	push   ebx
c0011b2f:	81 ec 88 00 00 00    	sub    esp,0x88
c0011b35:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0011b3c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011b43:	e8 5d ff ff ff       	call   c0011aa5 <CmFindUnusedExtent(Reghive_Tag*)>
c0011b48:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b4c:	83 c4 0c             	add    esp,0xc
c0011b4f:	6a 2b                	push   0x2b
c0011b51:	6a 00                	push   0x0
c0011b53:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0011b57:	55                   	push   ebp
c0011b58:	e8 63 e9 fe ff       	call   c00004c0 <memset>
c0011b5d:	83 c4 10             	add    esp,0x10
c0011b60:	85 db                	test   ebx,ebx
c0011b62:	74 12                	je     c0011b76 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0011b64:	51                   	push   ecx
c0011b65:	55                   	push   ebp
c0011b66:	53                   	push   ebx
c0011b67:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011b6e:	e8 0e fd ff ff       	call   c0011881 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011b73:	83 c4 10             	add    esp,0x10
c0011b76:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0011b7a:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0011b81:	b9 2b 00 00 00       	mov    ecx,0x2b
c0011b86:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011b88:	85 db                	test   ebx,ebx
c0011b8a:	74 49                	je     c0011bd5 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0011b8c:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0011b91:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0011b96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011b9a:	c1 e0 08             	shl    eax,0x8
c0011b9d:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0011ba3:	09 c8                	or     eax,ecx
c0011ba5:	74 11                	je     c0011bb8 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0011ba7:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0011bab:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0011baf:	c1 e8 10             	shr    eax,0x10
c0011bb2:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0011bb6:	eb 0f                	jmp    c0011bc7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0011bb8:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0011bbd:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0011bc2:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0011bc7:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0011bcb:	c1 ea 08             	shr    edx,0x8
c0011bce:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0011bd3:	eb 0f                	jmp    c0011be4 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0011bd5:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0011bda:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0011bdf:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0011be4:	52                   	push   edx
c0011be5:	8d 44 24 49          	lea    eax,[esp+0x49]
c0011be9:	50                   	push   eax
c0011bea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011bee:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011bf5:	e8 ab fd ff ff       	call   c00119a5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011bfa:	83 c4 10             	add    esp,0x10
c0011bfd:	85 db                	test   ebx,ebx
c0011bff:	74 12                	je     c0011c13 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0011c01:	50                   	push   eax
c0011c02:	55                   	push   ebp
c0011c03:	53                   	push   ebx
c0011c04:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011c0b:	e8 95 fd ff ff       	call   c00119a5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011c10:	83 c4 10             	add    esp,0x10
c0011c13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c17:	83 c4 7c             	add    esp,0x7c
c0011c1a:	5b                   	pop    ebx
c0011c1b:	5e                   	pop    esi
c0011c1c:	5f                   	pop    edi
c0011c1d:	5d                   	pop    ebp
c0011c1e:	c3                   	ret    

c0011c1f <CmSetString(Reghive_Tag*, int, char const*)>:
c0011c1f:	55                   	push   ebp
c0011c20:	57                   	push   edi
c0011c21:	56                   	push   esi
c0011c22:	53                   	push   ebx
c0011c23:	bb 27 00 00 00       	mov    ebx,0x27
c0011c28:	81 ec 88 00 00 00    	sub    esp,0x88
c0011c2e:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0011c35:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0011c3c:	e8 ef e8 fe ff       	call   c0000530 <strlen>
c0011c41:	8d 48 26             	lea    ecx,[eax+0x26]
c0011c44:	89 c8                	mov    eax,ecx
c0011c46:	99                   	cdq    
c0011c47:	f7 fb                	idiv   ebx
c0011c49:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011c4d:	83 c4 10             	add    esp,0x10
c0011c50:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0011c56:	7e 10                	jle    c0011c68 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0011c58:	83 ec 0c             	sub    esp,0xc
c0011c5b:	68 5c 05 02 c0       	push   0xc002055c
c0011c60:	e8 62 e7 ff ff       	call   c00103c7 <KePanic(char const*)>
c0011c65:	83 c4 10             	add    esp,0x10
c0011c68:	31 ff                	xor    edi,edi
c0011c6a:	50                   	push   eax
c0011c6b:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0011c6f:	53                   	push   ebx
c0011c70:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011c77:	56                   	push   esi
c0011c78:	e8 04 fc ff ff       	call   c0011881 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011c7d:	83 c4 10             	add    esp,0x10
c0011c80:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0011c84:	89 d0                	mov    eax,edx
c0011c86:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0011c8a:	c1 e0 08             	shl    eax,0x8
c0011c8d:	09 c2                	or     edx,eax
c0011c8f:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0011c93:	c1 e2 08             	shl    edx,0x8
c0011c96:	09 c2                	or     edx,eax
c0011c98:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0011c9c:	7e 76                	jle    c0011d14 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0011c9e:	85 d2                	test   edx,edx
c0011ca0:	75 25                	jne    c0011cc7 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0011ca2:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0011ca7:	8d 44 24 45          	lea    eax,[esp+0x45]
c0011cab:	50                   	push   eax
c0011cac:	6a 00                	push   0x0
c0011cae:	6a 00                	push   0x0
c0011cb0:	56                   	push   esi
c0011cb1:	e8 75 fe ff ff       	call   c0011b2b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0011cb6:	83 c4 10             	add    esp,0x10
c0011cb9:	89 c2                	mov    edx,eax
c0011cbb:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0011cbe:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0011cc1:	c1 f8 10             	sar    eax,0x10
c0011cc4:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0011cc7:	55                   	push   ebp
c0011cc8:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0011ccc:	55                   	push   ebp
c0011ccd:	52                   	push   edx
c0011cce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0011cd2:	56                   	push   esi
c0011cd3:	e8 a9 fb ff ff       	call   c0011881 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011cd8:	83 c4 0c             	add    esp,0xc
c0011cdb:	6a 27                	push   0x27
c0011cdd:	6a 00                	push   0x0
c0011cdf:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0011ce3:	51                   	push   ecx
c0011ce4:	e8 d7 e7 fe ff       	call   c00004c0 <memset>
c0011ce9:	83 c4 0c             	add    esp,0xc
c0011cec:	6b c7 27             	imul   eax,edi,0x27
c0011cef:	6a 27                	push   0x27
c0011cf1:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0011cf8:	50                   	push   eax
c0011cf9:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0011cfd:	51                   	push   ecx
c0011cfe:	e8 1d e9 fe ff       	call   c0000620 <strncpy>
c0011d03:	83 c4 0c             	add    esp,0xc
c0011d06:	55                   	push   ebp
c0011d07:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011d0b:	52                   	push   edx
c0011d0c:	56                   	push   esi
c0011d0d:	e8 93 fc ff ff       	call   c00119a5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011d12:	eb 19                	jmp    c0011d2d <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c0011d14:	85 d2                	test   edx,edx
c0011d16:	74 18                	je     c0011d30 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0011d18:	51                   	push   ecx
c0011d19:	51                   	push   ecx
c0011d1a:	52                   	push   edx
c0011d1b:	56                   	push   esi
c0011d1c:	e8 c0 fc ff ff       	call   c00119e1 <CmFreeExtent(Reghive_Tag*, int)>
c0011d21:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0011d25:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0011d29:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0011d2d:	83 c4 10             	add    esp,0x10
c0011d30:	47                   	inc    edi
c0011d31:	83 c3 03             	add    ebx,0x3
c0011d34:	83 ff 07             	cmp    edi,0x7
c0011d37:	0f 85 43 ff ff ff    	jne    c0011c80 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0011d3d:	50                   	push   eax
c0011d3e:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0011d42:	50                   	push   eax
c0011d43:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011d4a:	56                   	push   esi
c0011d4b:	e8 55 fc ff ff       	call   c00119a5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011d50:	81 c4 8c 00 00 00    	add    esp,0x8c
c0011d56:	5b                   	pop    ebx
c0011d57:	5e                   	pop    esi
c0011d58:	5f                   	pop    edi
c0011d59:	5d                   	pop    ebp
c0011d5a:	c3                   	ret    

c0011d5b <CmGetMatch(char*, char*, bool, bool*)>:
c0011d5b:	56                   	push   esi
c0011d5c:	53                   	push   ebx
c0011d5d:	50                   	push   eax
c0011d5e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011d62:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0011d67:	74 25                	je     c0011d8e <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0011d69:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0011d6c:	31 db                	xor    ebx,ebx
c0011d6e:	50                   	push   eax
c0011d6f:	50                   	push   eax
c0011d70:	8d 04 9d a0 19 02 c0 	lea    eax,[ebx*4-0x3ffde660]
c0011d77:	50                   	push   eax
c0011d78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d7c:	e8 4f e9 fe ff       	call   c00006d0 <strcmp>
c0011d81:	83 c4 10             	add    esp,0x10
c0011d84:	85 c0                	test   eax,eax
c0011d86:	74 2e                	je     c0011db6 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0011d88:	43                   	inc    ebx
c0011d89:	83 fb 3f             	cmp    ebx,0x3f
c0011d8c:	75 e0                	jne    c0011d6e <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0011d8e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011d91:	31 db                	xor    ebx,ebx
c0011d93:	8d 04 9d a0 19 02 c0 	lea    eax,[ebx*4-0x3ffde660]
c0011d9a:	51                   	push   ecx
c0011d9b:	51                   	push   ecx
c0011d9c:	50                   	push   eax
c0011d9d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011da1:	e8 2a e9 fe ff       	call   c00006d0 <strcmp>
c0011da6:	83 c4 10             	add    esp,0x10
c0011da9:	85 c0                	test   eax,eax
c0011dab:	74 09                	je     c0011db6 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0011dad:	43                   	inc    ebx
c0011dae:	83 fb 3f             	cmp    ebx,0x3f
c0011db1:	75 e0                	jne    c0011d93 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0011db3:	83 cb ff             	or     ebx,0xffffffff
c0011db6:	89 d8                	mov    eax,ebx
c0011db8:	5a                   	pop    edx
c0011db9:	5b                   	pop    ebx
c0011dba:	5e                   	pop    esi
c0011dbb:	c3                   	ret    

c0011dbc <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0011dbc:	55                   	push   ebp
c0011dbd:	31 c0                	xor    eax,eax
c0011dbf:	57                   	push   edi
c0011dc0:	56                   	push   esi
c0011dc1:	53                   	push   ebx
c0011dc2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011dc6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011dca:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0011dcc:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011dd0:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0011dd3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011dd7:	83 fd 1f             	cmp    ebp,0x1f
c0011dda:	7f 0b                	jg     c0011de7 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0011ddc:	0f b6 c2             	movzx  eax,dl
c0011ddf:	d3 e0                	shl    eax,cl
c0011de1:	09 07                	or     DWORD PTR [edi],eax
c0011de3:	b0 01                	mov    al,0x1
c0011de5:	01 33                	add    DWORD PTR [ebx],esi
c0011de7:	5b                   	pop    ebx
c0011de8:	5e                   	pop    esi
c0011de9:	5f                   	pop    edi
c0011dea:	5d                   	pop    ebp
c0011deb:	c3                   	ret    

c0011dec <CmGetShift(unsigned int*, int*, int, bool*)>:
c0011dec:	57                   	push   edi
c0011ded:	56                   	push   esi
c0011dee:	53                   	push   ebx
c0011def:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011df3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011df7:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0011dfb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011dff:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0011e01:	7c 17                	jl     c0011e1a <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0011e03:	8b 17                	mov    edx,DWORD PTR [edi]
c0011e05:	b8 01 00 00 00       	mov    eax,0x1
c0011e0a:	d3 e0                	shl    eax,cl
c0011e0c:	48                   	dec    eax
c0011e0d:	21 d0                	and    eax,edx
c0011e0f:	d3 ea                	shr    edx,cl
c0011e11:	89 17                	mov    DWORD PTR [edi],edx
c0011e13:	29 0b                	sub    DWORD PTR [ebx],ecx
c0011e15:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0011e18:	eb 05                	jmp    c0011e1f <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0011e1a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011e1d:	31 c0                	xor    eax,eax
c0011e1f:	5b                   	pop    ebx
c0011e20:	5e                   	pop    esi
c0011e21:	5f                   	pop    edi
c0011e22:	c3                   	ret    

c0011e23 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0011e23:	83 ec 40             	sub    esp,0x40
c0011e26:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011e2a:	50                   	push   eax
c0011e2b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011e2f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011e33:	e8 49 fa ff ff       	call   c0011881 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011e38:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011e3c:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0011e40:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0011e44:	89 10                	mov    DWORD PTR [eax],edx
c0011e46:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0011e49:	83 c4 4c             	add    esp,0x4c
c0011e4c:	c3                   	ret    

c0011e4d <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0011e4d:	55                   	push   ebp
c0011e4e:	57                   	push   edi
c0011e4f:	56                   	push   esi
c0011e50:	53                   	push   ebx
c0011e51:	83 ec 40             	sub    esp,0x40
c0011e54:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0011e58:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0011e5c:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0011e60:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0011e64:	53                   	push   ebx
c0011e65:	56                   	push   esi
c0011e66:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0011e6a:	e8 12 fa ff ff       	call   c0011881 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011e6f:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0011e73:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0011e77:	83 c4 0c             	add    esp,0xc
c0011e7a:	53                   	push   ebx
c0011e7b:	56                   	push   esi
c0011e7c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0011e80:	e8 20 fb ff ff       	call   c00119a5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011e85:	83 c4 4c             	add    esp,0x4c
c0011e88:	5b                   	pop    ebx
c0011e89:	5e                   	pop    esi
c0011e8a:	5f                   	pop    edi
c0011e8b:	5d                   	pop    ebp
c0011e8c:	c3                   	ret    

c0011e8d <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0011e8d:	55                   	push   ebp
c0011e8e:	57                   	push   edi
c0011e8f:	56                   	push   esi
c0011e90:	31 f6                	xor    esi,esi
c0011e92:	53                   	push   ebx
c0011e93:	31 db                	xor    ebx,ebx
c0011e95:	83 ec 40             	sub    esp,0x40
c0011e98:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011ea0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011ea8:	6a 12                	push   0x12
c0011eaa:	68 ee 00 00 00       	push   0xee
c0011eaf:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0011eb3:	e8 08 e6 fe ff       	call   c00004c0 <memset>
c0011eb8:	83 c4 10             	add    esp,0x10
c0011ebb:	6a 08                	push   0x8
c0011ebd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011ec1:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0011ec5:	50                   	push   eax
c0011ec6:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0011eca:	57                   	push   edi
c0011ecb:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0011ecf:	55                   	push   ebp
c0011ed0:	e8 e7 fe ff ff       	call   c0011dbc <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0011ed5:	83 c4 10             	add    esp,0x10
c0011ed8:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0011edc:	50                   	push   eax
c0011edd:	6a 06                	push   0x6
c0011edf:	57                   	push   edi
c0011ee0:	55                   	push   ebp
c0011ee1:	e8 06 ff ff ff       	call   c0011dec <CmGetShift(unsigned int*, int*, int, bool*)>
c0011ee6:	83 c4 10             	add    esp,0x10
c0011ee9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011eee:	74 07                	je     c0011ef7 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0011ef0:	46                   	inc    esi
c0011ef1:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0011ef5:	eb e1                	jmp    c0011ed8 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0011ef7:	43                   	inc    ebx
c0011ef8:	83 fb 12             	cmp    ebx,0x12
c0011efb:	75 be                	jne    c0011ebb <CmConvertFromInternalFilename(unsigned char const*, char*)+0x2e>
c0011efd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011f01:	31 db                	xor    ebx,ebx
c0011f03:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011f06:	50                   	push   eax
c0011f07:	50                   	push   eax
c0011f08:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0011f0d:	43                   	inc    ebx
c0011f0e:	8d 04 85 a0 19 02 c0 	lea    eax,[eax*4-0x3ffde660]
c0011f15:	50                   	push   eax
c0011f16:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0011f1a:	e8 91 e8 fe ff       	call   c00007b0 <strcat>
c0011f1f:	83 c4 10             	add    esp,0x10
c0011f22:	83 fb 18             	cmp    ebx,0x18
c0011f25:	75 df                	jne    c0011f06 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0011f27:	83 c4 3c             	add    esp,0x3c
c0011f2a:	31 c0                	xor    eax,eax
c0011f2c:	5b                   	pop    ebx
c0011f2d:	5e                   	pop    esi
c0011f2e:	5f                   	pop    edi
c0011f2f:	5d                   	pop    ebp
c0011f30:	c3                   	ret    

c0011f31 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0011f31:	83 ec 40             	sub    esp,0x40
c0011f34:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011f38:	50                   	push   eax
c0011f39:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f3d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f41:	e8 3b f9 ff ff       	call   c0011881 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011f46:	58                   	pop    eax
c0011f47:	5a                   	pop    edx
c0011f48:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0011f4c:	8d 44 24 15          	lea    eax,[esp+0x15]
c0011f50:	50                   	push   eax
c0011f51:	e8 37 ff ff ff       	call   c0011e8d <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0011f56:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0011f5b:	83 c4 4c             	add    esp,0x4c
c0011f5e:	c3                   	ret    

c0011f5f <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0011f5f:	55                   	push   ebp
c0011f60:	57                   	push   edi
c0011f61:	56                   	push   esi
c0011f62:	53                   	push   ebx
c0011f63:	31 db                	xor    ebx,ebx
c0011f65:	83 ec 70             	sub    esp,0x70
c0011f68:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0011f6f:	6a 30                	push   0x30
c0011f71:	6a 00                	push   0x0
c0011f73:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0011f77:	56                   	push   esi
c0011f78:	e8 43 e5 fe ff       	call   c00004c0 <memset>
c0011f7d:	83 c4 10             	add    esp,0x10
c0011f80:	83 ec 0c             	sub    esp,0xc
c0011f83:	57                   	push   edi
c0011f84:	e8 a7 e5 fe ff       	call   c0000530 <strlen>
c0011f89:	83 c4 10             	add    esp,0x10
c0011f8c:	39 d8                	cmp    eax,ebx
c0011f8e:	76 16                	jbe    c0011fa6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0011f90:	83 ec 0c             	sub    esp,0xc
c0011f93:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0011f97:	50                   	push   eax
c0011f98:	e8 03 e9 fe ff       	call   c00008a0 <toupper>
c0011f9d:	83 c4 10             	add    esp,0x10
c0011fa0:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0011fa3:	43                   	inc    ebx
c0011fa4:	eb da                	jmp    c0011f80 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0011fa6:	31 f6                	xor    esi,esi
c0011fa8:	52                   	push   edx
c0011fa9:	31 ff                	xor    edi,edi
c0011fab:	6a 18                	push   0x18
c0011fad:	6a 3f                	push   0x3f
c0011faf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0011fb3:	50                   	push   eax
c0011fb4:	e8 07 e5 fe ff       	call   c00004c0 <memset>
c0011fb9:	83 c4 10             	add    esp,0x10
c0011fbc:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0011fc0:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0011fc4:	84 c0                	test   al,al
c0011fc6:	0f 84 b0 00 00 00    	je     c001207c <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0011fcc:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0011fd0:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0011fd5:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0011fd9:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c0011fde:	8d 6e 01             	lea    ebp,[esi+0x1]
c0011fe1:	83 ec 0c             	sub    esp,0xc
c0011fe4:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0011fe8:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0011fec:	53                   	push   ebx
c0011fed:	e8 3e e5 fe ff       	call   c0000530 <strlen>
c0011ff2:	83 c4 10             	add    esp,0x10
c0011ff5:	85 c0                	test   eax,eax
c0011ff7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0011ffb:	74 0b                	je     c0012008 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0011ffd:	50                   	push   eax
c0011ffe:	6a 01                	push   0x1
c0012000:	53                   	push   ebx
c0012001:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012005:	50                   	push   eax
c0012006:	eb 0a                	jmp    c0012012 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0012008:	50                   	push   eax
c0012009:	6a 00                	push   0x0
c001200b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001200f:	50                   	push   eax
c0012010:	6a 00                	push   0x0
c0012012:	e8 44 fd ff ff       	call   c0011d5b <CmGetMatch(char*, char*, bool, bool*)>
c0012017:	83 c4 10             	add    esp,0x10
c001201a:	83 f8 ff             	cmp    eax,0xffffffff
c001201d:	75 1a                	jne    c0012039 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c001201f:	83 ec 0c             	sub    esp,0xc
c0012022:	68 71 05 02 c0       	push   0xc0020571
c0012027:	e8 9b e3 ff ff       	call   c00103c7 <KePanic(char const*)>
c001202c:	83 c4 10             	add    esp,0x10
c001202f:	b8 02 00 00 00       	mov    eax,0x2
c0012034:	e9 bc 00 00 00       	jmp    c00120f5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0012039:	83 ff 18             	cmp    edi,0x18
c001203c:	75 1a                	jne    c0012058 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c001203e:	83 ec 0c             	sub    esp,0xc
c0012041:	68 86 05 02 c0       	push   0xc0020586
c0012046:	e8 7c e3 ff ff       	call   c00103c7 <KePanic(char const*)>
c001204b:	83 c4 10             	add    esp,0x10
c001204e:	b8 01 00 00 00       	mov    eax,0x1
c0012053:	e9 9d 00 00 00       	jmp    c00120f5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0012058:	47                   	inc    edi
c0012059:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001205e:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0012062:	74 02                	je     c0012066 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c0012064:	89 ee                	mov    esi,ebp
c0012066:	83 ec 0c             	sub    esp,0xc
c0012069:	53                   	push   ebx
c001206a:	e8 c1 e4 fe ff       	call   c0000530 <strlen>
c001206f:	83 c4 10             	add    esp,0x10
c0012072:	85 c0                	test   eax,eax
c0012074:	74 06                	je     c001207c <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0012076:	46                   	inc    esi
c0012077:	e9 40 ff ff ff       	jmp    c0011fbc <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c001207c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012084:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001208c:	31 f6                	xor    esi,esi
c001208e:	50                   	push   eax
c001208f:	31 ff                	xor    edi,edi
c0012091:	6a 12                	push   0x12
c0012093:	68 ee 00 00 00       	push   0xee
c0012098:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001209f:	e8 1c e4 fe ff       	call   c00004c0 <memset>
c00120a4:	83 c4 10             	add    esp,0x10
c00120a7:	83 fe 17             	cmp    esi,0x17
c00120aa:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00120ae:	7e 26                	jle    c00120d6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c00120b0:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00120b4:	50                   	push   eax
c00120b5:	6a 08                	push   0x8
c00120b7:	55                   	push   ebp
c00120b8:	53                   	push   ebx
c00120b9:	e8 2e fd ff ff       	call   c0011dec <CmGetShift(unsigned int*, int*, int, bool*)>
c00120be:	83 c4 10             	add    esp,0x10
c00120c1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00120c6:	74 26                	je     c00120ee <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c00120c8:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c00120cf:	4e                   	dec    esi
c00120d0:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00120d3:	47                   	inc    edi
c00120d4:	eb 1c                	jmp    c00120f2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00120d6:	6a 06                	push   0x6
c00120d8:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c00120dd:	50                   	push   eax
c00120de:	55                   	push   ebp
c00120df:	53                   	push   ebx
c00120e0:	e8 d7 fc ff ff       	call   c0011dbc <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00120e5:	83 c4 10             	add    esp,0x10
c00120e8:	84 c0                	test   al,al
c00120ea:	75 06                	jne    c00120f2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00120ec:	eb c2                	jmp    c00120b0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c00120ee:	31 c0                	xor    eax,eax
c00120f0:	eb 03                	jmp    c00120f5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00120f2:	46                   	inc    esi
c00120f3:	eb b2                	jmp    c00120a7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c00120f5:	83 c4 6c             	add    esp,0x6c
c00120f8:	5b                   	pop    ebx
c00120f9:	5e                   	pop    esi
c00120fa:	5f                   	pop    edi
c00120fb:	5d                   	pop    ebp
c00120fc:	c3                   	ret    

c00120fd <CmCreateString(Reghive_Tag*, int, char const*)>:
c00120fd:	53                   	push   ebx
c00120fe:	83 ec 3c             	sub    esp,0x3c
c0012101:	6a 2b                	push   0x2b
c0012103:	6a 00                	push   0x0
c0012105:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012109:	53                   	push   ebx
c001210a:	e8 b1 e3 fe ff       	call   c00004c0 <memset>
c001210f:	58                   	pop    eax
c0012110:	5a                   	pop    edx
c0012111:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012115:	50                   	push   eax
c0012116:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001211a:	e8 40 fe ff ff       	call   c0011f5f <CmConvertToInternalFilename(char const*, unsigned char*)>
c001211f:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0012124:	83 c4 0c             	add    esp,0xc
c0012127:	6a 15                	push   0x15
c0012129:	6a 00                	push   0x0
c001212b:	8d 44 24 27          	lea    eax,[esp+0x27]
c001212f:	50                   	push   eax
c0012130:	e8 8b e3 fe ff       	call   c00004c0 <memset>
c0012135:	53                   	push   ebx
c0012136:	6a 00                	push   0x0
c0012138:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001213c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012140:	e8 e6 f9 ff ff       	call   c0011b2b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012145:	83 c4 58             	add    esp,0x58
c0012148:	5b                   	pop    ebx
c0012149:	c3                   	ret    

c001214a <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c001214a:	56                   	push   esi
c001214b:	53                   	push   ebx
c001214c:	83 ec 48             	sub    esp,0x48
c001214f:	6a 12                	push   0x12
c0012151:	68 ff 00 00 00       	push   0xff
c0012156:	8d 74 24 0f          	lea    esi,[esp+0xf]
c001215a:	56                   	push   esi
c001215b:	e8 60 e3 fe ff       	call   c00004c0 <memset>
c0012160:	5a                   	pop    edx
c0012161:	59                   	pop    ecx
c0012162:	56                   	push   esi
c0012163:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0012167:	e8 f3 fd ff ff       	call   c0011f5f <CmConvertToInternalFilename(char const*, unsigned char*)>
c001216c:	83 c4 10             	add    esp,0x10
c001216f:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0012173:	85 db                	test   ebx,ebx
c0012175:	74 42                	je     c00121b9 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0012177:	50                   	push   eax
c0012178:	8d 44 24 19          	lea    eax,[esp+0x19]
c001217c:	50                   	push   eax
c001217d:	53                   	push   ebx
c001217e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012182:	e8 fa f6 ff ff       	call   c0011881 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012187:	83 c4 0c             	add    esp,0xc
c001218a:	6a 12                	push   0x12
c001218c:	8d 44 24 21          	lea    eax,[esp+0x21]
c0012190:	50                   	push   eax
c0012191:	56                   	push   esi
c0012192:	e8 e9 e1 fe ff       	call   c0000380 <memcmp>
c0012197:	83 c4 10             	add    esp,0x10
c001219a:	85 c0                	test   eax,eax
c001219c:	74 1e                	je     c00121bc <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c001219e:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00121a3:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00121a8:	c1 e3 08             	shl    ebx,0x8
c00121ab:	09 d8                	or     eax,ebx
c00121ad:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00121b2:	c1 e3 10             	shl    ebx,0x10
c00121b5:	09 c3                	or     ebx,eax
c00121b7:	eb ba                	jmp    c0012173 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00121b9:	83 cb ff             	or     ebx,0xffffffff
c00121bc:	89 d8                	mov    eax,ebx
c00121be:	83 c4 44             	add    esp,0x44
c00121c1:	5b                   	pop    ebx
c00121c2:	5e                   	pop    esi
c00121c3:	c3                   	ret    

c00121c4 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c00121c4:	57                   	push   edi
c00121c5:	56                   	push   esi
c00121c6:	53                   	push   ebx
c00121c7:	83 ec 34             	sub    esp,0x34
c00121ca:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00121ce:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00121d2:	6a 2b                	push   0x2b
c00121d4:	6a 00                	push   0x0
c00121d6:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00121da:	53                   	push   ebx
c00121db:	e8 e0 e2 fe ff       	call   c00004c0 <memset>
c00121e0:	58                   	pop    eax
c00121e1:	5a                   	pop    edx
c00121e2:	8d 44 24 11          	lea    eax,[esp+0x11]
c00121e6:	50                   	push   eax
c00121e7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00121eb:	e8 6f fd ff ff       	call   c0011f5f <CmConvertToInternalFilename(char const*, unsigned char*)>
c00121f0:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00121f4:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c00121f8:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c00121fc:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012200:	53                   	push   ebx
c0012201:	6a 00                	push   0x0
c0012203:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012207:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001220b:	e8 1b f9 ff ff       	call   c0011b2b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012210:	83 c4 50             	add    esp,0x50
c0012213:	5b                   	pop    ebx
c0012214:	5e                   	pop    esi
c0012215:	5f                   	pop    edi
c0012216:	c3                   	ret    

c0012217 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0012217:	55                   	push   ebp
c0012218:	57                   	push   edi
c0012219:	56                   	push   esi
c001221a:	53                   	push   ebx
c001221b:	83 ec 40             	sub    esp,0x40
c001221e:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0012222:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0012226:	6a 2b                	push   0x2b
c0012228:	6a 00                	push   0x0
c001222a:	8d 74 24 11          	lea    esi,[esp+0x11]
c001222e:	56                   	push   esi
c001222f:	e8 8c e2 fe ff       	call   c00004c0 <memset>
c0012234:	5f                   	pop    edi
c0012235:	89 ef                	mov    edi,ebp
c0012237:	58                   	pop    eax
c0012238:	8d 44 24 11          	lea    eax,[esp+0x11]
c001223c:	50                   	push   eax
c001223d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0012241:	e8 19 fd ff ff       	call   c0011f5f <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012246:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c001224b:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0012250:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0012255:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c001225a:	83 c4 10             	add    esp,0x10
c001225d:	85 ed                	test   ebp,ebp
c001225f:	74 14                	je     c0012275 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012261:	51                   	push   ecx
c0012262:	51                   	push   ecx
c0012263:	57                   	push   edi
c0012264:	53                   	push   ebx
c0012265:	e8 09 f7 ff ff       	call   c0011973 <CmGetNext(Reghive_Tag*, int)>
c001226a:	83 c4 10             	add    esp,0x10
c001226d:	85 c0                	test   eax,eax
c001226f:	74 04                	je     c0012275 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012271:	89 c7                	mov    edi,eax
c0012273:	eb e8                	jmp    c001225d <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0012275:	56                   	push   esi
c0012276:	6a 00                	push   0x0
c0012278:	57                   	push   edi
c0012279:	53                   	push   ebx
c001227a:	e8 ac f8 ff ff       	call   c0011b2b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001227f:	83 c4 0c             	add    esp,0xc
c0012282:	89 c7                	mov    edi,eax
c0012284:	56                   	push   esi
c0012285:	50                   	push   eax
c0012286:	53                   	push   ebx
c0012287:	e8 f5 f5 ff ff       	call   c0011881 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001228c:	58                   	pop    eax
c001228d:	5a                   	pop    edx
c001228e:	6a 6c                	push   0x6c
c0012290:	6a 00                	push   0x0
c0012292:	6a 00                	push   0x0
c0012294:	68 97 05 02 c0       	push   0xc0020597
c0012299:	57                   	push   edi
c001229a:	53                   	push   ebx
c001229b:	e8 24 ff ff ff       	call   c00121c4 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00122a0:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00122a4:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00122a8:	c1 e8 10             	shr    eax,0x10
c00122ab:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00122af:	83 c4 1c             	add    esp,0x1c
c00122b2:	56                   	push   esi
c00122b3:	57                   	push   edi
c00122b4:	53                   	push   ebx
c00122b5:	e8 eb f6 ff ff       	call   c00119a5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00122ba:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00122bf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00122c4:	c1 e0 08             	shl    eax,0x8
c00122c7:	09 c2                	or     edx,eax
c00122c9:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00122ce:	83 c4 4c             	add    esp,0x4c
c00122d1:	c1 e0 10             	shl    eax,0x10
c00122d4:	5b                   	pop    ebx
c00122d5:	09 d0                	or     eax,edx
c00122d7:	5e                   	pop    esi
c00122d8:	5f                   	pop    edi
c00122d9:	5d                   	pop    ebp
c00122da:	c3                   	ret    

c00122db <zStrtok(char*, char const*)>:
c00122db:	57                   	push   edi
c00122dc:	56                   	push   esi
c00122dd:	53                   	push   ebx
c00122de:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00122e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122e6:	85 ff                	test   edi,edi
c00122e8:	74 2b                	je     c0012315 <zStrtok(char*, char const*)+0x3a>
c00122ea:	85 c0                	test   eax,eax
c00122ec:	75 09                	jne    c00122f7 <zStrtok(char*, char const*)+0x1c>
c00122ee:	a1 88 69 02 c0       	mov    eax,ds:0xc0026988
c00122f3:	85 c0                	test   eax,eax
c00122f5:	74 49                	je     c0012340 <zStrtok(char*, char const*)+0x65>
c00122f7:	31 c9                	xor    ecx,ecx
c00122f9:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c00122fd:	74 03                	je     c0012302 <zStrtok(char*, char const*)+0x27>
c00122ff:	41                   	inc    ecx
c0012300:	eb f7                	jmp    c00122f9 <zStrtok(char*, char const*)+0x1e>
c0012302:	31 d2                	xor    edx,edx
c0012304:	39 ca                	cmp    edx,ecx
c0012306:	74 11                	je     c0012319 <zStrtok(char*, char const*)+0x3e>
c0012308:	8a 1f                	mov    bl,BYTE PTR [edi]
c001230a:	8d 34 10             	lea    esi,[eax+edx*1]
c001230d:	38 1c 10             	cmp    BYTE PTR [eax+edx*1],bl
c0012310:	74 13                	je     c0012325 <zStrtok(char*, char const*)+0x4a>
c0012312:	42                   	inc    edx
c0012313:	eb ef                	jmp    c0012304 <zStrtok(char*, char const*)+0x29>
c0012315:	31 c0                	xor    eax,eax
c0012317:	eb 27                	jmp    c0012340 <zStrtok(char*, char const*)+0x65>
c0012319:	c7 05 88 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026988,0x0
c0012323:	eb 1b                	jmp    c0012340 <zStrtok(char*, char const*)+0x65>
c0012325:	3a 18                	cmp    bl,BYTE PTR [eax]
c0012327:	75 0a                	jne    c0012333 <zStrtok(char*, char const*)+0x58>
c0012329:	40                   	inc    eax
c001232a:	a3 88 69 02 c0       	mov    ds:0xc0026988,eax
c001232f:	89 f8                	mov    eax,edi
c0012331:	eb 0d                	jmp    c0012340 <zStrtok(char*, char const*)+0x65>
c0012333:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0012337:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001233a:	89 15 88 69 02 c0    	mov    DWORD PTR ds:0xc0026988,edx
c0012340:	5b                   	pop    ebx
c0012341:	5e                   	pop    esi
c0012342:	5f                   	pop    edi
c0012343:	c3                   	ret    

c0012344 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0012344:	57                   	push   edi
c0012345:	56                   	push   esi
c0012346:	53                   	push   ebx
c0012347:	81 ec 08 01 00 00    	sub    esp,0x108
c001234d:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0012354:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c001235b:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c001235f:	53                   	push   ebx
c0012360:	e8 8b e2 fe ff       	call   c00005f0 <strcpy>
c0012365:	59                   	pop    ecx
c0012366:	5e                   	pop    esi
c0012367:	68 fb 08 02 c0       	push   0xc00208fb
c001236c:	53                   	push   ebx
c001236d:	bb 01 00 00 00       	mov    ebx,0x1
c0012372:	e8 64 ff ff ff       	call   c00122db <zStrtok(char*, char const*)>
c0012377:	83 c4 10             	add    esp,0x10
c001237a:	85 c0                	test   eax,eax
c001237c:	74 3b                	je     c00123b9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001237e:	52                   	push   edx
c001237f:	50                   	push   eax
c0012380:	6a 01                	push   0x1
c0012382:	57                   	push   edi
c0012383:	e8 c2 fd ff ff       	call   c001214a <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0012388:	59                   	pop    ecx
c0012389:	89 c3                	mov    ebx,eax
c001238b:	5e                   	pop    esi
c001238c:	68 fb 08 02 c0       	push   0xc00208fb
c0012391:	6a 00                	push   0x0
c0012393:	e8 43 ff ff ff       	call   c00122db <zStrtok(char*, char const*)>
c0012398:	83 c4 10             	add    esp,0x10
c001239b:	89 c6                	mov    esi,eax
c001239d:	85 c0                	test   eax,eax
c001239f:	74 18                	je     c00123b9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00123a1:	52                   	push   edx
c00123a2:	52                   	push   edx
c00123a3:	53                   	push   ebx
c00123a4:	57                   	push   edi
c00123a5:	e8 8a f5 ff ff       	call   c0011934 <CmEnterDirectory(Reghive_Tag*, int)>
c00123aa:	83 c4 10             	add    esp,0x10
c00123ad:	89 c3                	mov    ebx,eax
c00123af:	83 f8 ff             	cmp    eax,0xffffffff
c00123b2:	74 05                	je     c00123b9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00123b4:	50                   	push   eax
c00123b5:	56                   	push   esi
c00123b6:	53                   	push   ebx
c00123b7:	eb c9                	jmp    c0012382 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c00123b9:	81 c4 00 01 00 00    	add    esp,0x100
c00123bf:	89 d8                	mov    eax,ebx
c00123c1:	5b                   	pop    ebx
c00123c2:	5e                   	pop    esi
c00123c3:	5f                   	pop    edi
c00123c4:	c3                   	ret    

c00123c5 <CmDisplayTree(Reghive_Tag*, int, int)>:
c00123c5:	55                   	push   ebp
c00123c6:	57                   	push   edi
c00123c7:	56                   	push   esi
c00123c8:	53                   	push   ebx
c00123c9:	83 ec 5c             	sub    esp,0x5c
c00123cc:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c00123d0:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00123d4:	85 db                	test   ebx,ebx
c00123d6:	0f 8e 84 00 00 00    	jle    c0012460 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c00123dc:	31 ed                	xor    ebp,ebp
c00123de:	57                   	push   edi
c00123df:	6a 32                	push   0x32
c00123e1:	6a 00                	push   0x0
c00123e3:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c00123e7:	57                   	push   edi
c00123e8:	e8 d3 e0 fe ff       	call   c00004c0 <memset>
c00123ed:	83 c4 0c             	add    esp,0xc
c00123f0:	57                   	push   edi
c00123f1:	53                   	push   ebx
c00123f2:	56                   	push   esi
c00123f3:	e8 39 fb ff ff       	call   c0011f31 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00123f8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00123fc:	83 c4 10             	add    esp,0x10
c00123ff:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0012403:	7d 13                	jge    c0012418 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0012405:	83 ec 0c             	sub    esp,0xc
c0012408:	45                   	inc    ebp
c0012409:	68 68 0c 02 c0       	push   0xc0020c68
c001240e:	e8 f3 81 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0012413:	83 c4 10             	add    esp,0x10
c0012416:	eb e7                	jmp    c00123ff <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0012418:	51                   	push   ecx
c0012419:	57                   	push   edi
c001241a:	53                   	push   ebx
c001241b:	68 9d 05 02 c0       	push   0xc002059d
c0012420:	e8 e1 81 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0012425:	83 c4 10             	add    esp,0x10
c0012428:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c001242d:	75 1e                	jne    c001244d <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c001242f:	52                   	push   edx
c0012430:	52                   	push   edx
c0012431:	53                   	push   ebx
c0012432:	56                   	push   esi
c0012433:	e8 fc f4 ff ff       	call   c0011934 <CmEnterDirectory(Reghive_Tag*, int)>
c0012438:	83 c4 0c             	add    esp,0xc
c001243b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c001243f:	8d 51 04             	lea    edx,[ecx+0x4]
c0012442:	52                   	push   edx
c0012443:	50                   	push   eax
c0012444:	56                   	push   esi
c0012445:	e8 7b ff ff ff       	call   c00123c5 <CmDisplayTree(Reghive_Tag*, int, int)>
c001244a:	83 c4 10             	add    esp,0x10
c001244d:	50                   	push   eax
c001244e:	50                   	push   eax
c001244f:	53                   	push   ebx
c0012450:	56                   	push   esi
c0012451:	e8 1d f5 ff ff       	call   c0011973 <CmGetNext(Reghive_Tag*, int)>
c0012456:	83 c4 10             	add    esp,0x10
c0012459:	89 c3                	mov    ebx,eax
c001245b:	e9 74 ff ff ff       	jmp    c00123d4 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0012460:	83 c4 5c             	add    esp,0x5c
c0012463:	5b                   	pop    ebx
c0012464:	5e                   	pop    esi
c0012465:	5f                   	pop    edi
c0012466:	5d                   	pop    ebp
c0012467:	c3                   	ret    

c0012468 <CmSplitFinalSlashInPlace(char*)>:
c0012468:	53                   	push   ebx
c0012469:	83 ec 14             	sub    esp,0x14
c001246c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012470:	53                   	push   ebx
c0012471:	e8 ba e0 fe ff       	call   c0000530 <strlen>
c0012476:	83 c4 10             	add    esp,0x10
c0012479:	48                   	dec    eax
c001247a:	85 c0                	test   eax,eax
c001247c:	74 15                	je     c0012493 <CmSplitFinalSlashInPlace(char*)+0x2b>
c001247e:	8d 14 03             	lea    edx,[ebx+eax*1]
c0012481:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012485:	75 09                	jne    c0012490 <CmSplitFinalSlashInPlace(char*)+0x28>
c0012487:	c6 02 00             	mov    BYTE PTR [edx],0x0
c001248a:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001248e:	eb 05                	jmp    c0012495 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0012490:	48                   	dec    eax
c0012491:	eb e7                	jmp    c001247a <CmSplitFinalSlashInPlace(char*)+0x12>
c0012493:	31 c0                	xor    eax,eax
c0012495:	83 c4 08             	add    esp,0x8
c0012498:	5b                   	pop    ebx
c0012499:	c3                   	ret    

c001249a <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001249a:	55                   	push   ebp
c001249b:	57                   	push   edi
c001249c:	56                   	push   esi
c001249d:	53                   	push   ebx
c001249e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00124a4:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00124ab:	8a 1e                	mov    bl,BYTE PTR [esi]
c00124ad:	8d 6e 01             	lea    ebp,[esi+0x1]
c00124b0:	80 fb 40             	cmp    bl,0x40
c00124b3:	75 1b                	jne    c00124d0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c00124b5:	8a 16                	mov    dl,BYTE PTR [esi]
c00124b7:	84 d2                	test   dl,dl
c00124b9:	0f 84 f1 00 00 00    	je     c00125b0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00124bf:	8d 46 01             	lea    eax,[esi+0x1]
c00124c2:	80 fa 3a             	cmp    dl,0x3a
c00124c5:	74 04                	je     c00124cb <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c00124c7:	89 c6                	mov    esi,eax
c00124c9:	eb ea                	jmp    c00124b5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00124cb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00124ce:	89 c6                	mov    esi,eax
c00124d0:	50                   	push   eax
c00124d1:	6a 40                	push   0x40
c00124d3:	6a 00                	push   0x0
c00124d5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00124d9:	50                   	push   eax
c00124da:	e8 e1 df fe ff       	call   c00004c0 <memset>
c00124df:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00124e6:	31 c0                	xor    eax,eax
c00124e8:	83 c4 10             	add    esp,0x10
c00124eb:	8a 0f                	mov    cl,BYTE PTR [edi]
c00124ed:	84 c9                	test   cl,cl
c00124ef:	0f 84 bb 00 00 00    	je     c00125b0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00124f5:	3d c7 00 00 00       	cmp    eax,0xc7
c00124fa:	0f 8f b0 00 00 00    	jg     c00125b0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0012500:	80 f9 0a             	cmp    cl,0xa
c0012503:	0f 85 98 00 00 00    	jne    c00125a1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0012509:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001250e:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0012512:	a8 df                	test   al,0xdf
c0012514:	0f 94 c1             	sete   cl
c0012517:	3c 23                	cmp    al,0x23
c0012519:	0f 94 c2             	sete   dl
c001251c:	08 d1                	or     cl,dl
c001251e:	75 4a                	jne    c001256a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0012520:	8d 50 f7             	lea    edx,[eax-0x9]
c0012523:	80 fa 01             	cmp    dl,0x1
c0012526:	76 42                	jbe    c001256a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0012528:	3c 5b                	cmp    al,0x5b
c001252a:	75 42                	jne    c001256e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001252c:	80 fb 40             	cmp    bl,0x40
c001252f:	75 39                	jne    c001256a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0012531:	83 ec 0c             	sub    esp,0xc
c0012534:	8d 54 24 65          	lea    edx,[esp+0x65]
c0012538:	52                   	push   edx
c0012539:	e8 f2 df fe ff       	call   c0000530 <strlen>
c001253e:	83 c4 10             	add    esp,0x10
c0012541:	83 f8 3f             	cmp    eax,0x3f
c0012544:	77 6a                	ja     c00125b0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0012546:	50                   	push   eax
c0012547:	50                   	push   eax
c0012548:	8d 54 24 61          	lea    edx,[esp+0x61]
c001254c:	52                   	push   edx
c001254d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012551:	52                   	push   edx
c0012552:	e8 99 e0 fe ff       	call   c00005f0 <strcpy>
c0012557:	58                   	pop    eax
c0012558:	8d 54 24 24          	lea    edx,[esp+0x24]
c001255c:	52                   	push   edx
c001255d:	e8 ce df fe ff       	call   c0000530 <strlen>
c0012562:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012567:	83 c4 10             	add    esp,0x10
c001256a:	31 d2                	xor    edx,edx
c001256c:	eb 3a                	jmp    c00125a8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001256e:	80 fb 40             	cmp    bl,0x40
c0012571:	74 06                	je     c0012579 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0012573:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012577:	eb 20                	jmp    c0012599 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0012579:	50                   	push   eax
c001257a:	50                   	push   eax
c001257b:	55                   	push   ebp
c001257c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012580:	50                   	push   eax
c0012581:	e8 4a e1 fe ff       	call   c00006d0 <strcmp>
c0012586:	83 c4 10             	add    esp,0x10
c0012589:	85 c0                	test   eax,eax
c001258b:	75 dd                	jne    c001256a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001258d:	eb e4                	jmp    c0012573 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001258f:	8d 50 01             	lea    edx,[eax+0x1]
c0012592:	80 f9 3d             	cmp    cl,0x3d
c0012595:	74 1d                	je     c00125b4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0012597:	89 d0                	mov    eax,edx
c0012599:	8a 08                	mov    cl,BYTE PTR [eax]
c001259b:	84 c9                	test   cl,cl
c001259d:	75 f0                	jne    c001258f <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001259f:	eb 0f                	jmp    c00125b0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00125a1:	8d 50 01             	lea    edx,[eax+0x1]
c00125a4:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00125a8:	47                   	inc    edi
c00125a9:	89 d0                	mov    eax,edx
c00125ab:	e9 3b ff ff ff       	jmp    c00124eb <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c00125b0:	31 c0                	xor    eax,eax
c00125b2:	eb 33                	jmp    c00125e7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c00125b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00125b8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00125bb:	50                   	push   eax
c00125bc:	50                   	push   eax
c00125bd:	8d 44 24 60          	lea    eax,[esp+0x60]
c00125c1:	50                   	push   eax
c00125c2:	56                   	push   esi
c00125c3:	e8 08 e1 fe ff       	call   c00006d0 <strcmp>
c00125c8:	83 c4 10             	add    esp,0x10
c00125cb:	85 c0                	test   eax,eax
c00125cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00125d1:	75 97                	jne    c001256a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00125d3:	51                   	push   ecx
c00125d4:	51                   	push   ecx
c00125d5:	52                   	push   edx
c00125d6:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00125dd:	e8 0e e0 fe ff       	call   c00005f0 <strcpy>
c00125e2:	83 c4 10             	add    esp,0x10
c00125e5:	b0 01                	mov    al,0x1
c00125e7:	81 c4 2c 01 00 00    	add    esp,0x12c
c00125ed:	5b                   	pop    ebx
c00125ee:	5e                   	pop    esi
c00125ef:	5f                   	pop    edi
c00125f0:	5d                   	pop    ebp
c00125f1:	c3                   	ret    

c00125f2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00125f2:	57                   	push   edi
c00125f3:	56                   	push   esi
c00125f4:	53                   	push   ebx
c00125f5:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00125fb:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0012602:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0012609:	53                   	push   ebx
c001260a:	e8 21 df fe ff       	call   c0000530 <strlen>
c001260f:	89 34 24             	mov    DWORD PTR [esp],esi
c0012612:	89 c7                	mov    edi,eax
c0012614:	e8 17 df fe ff       	call   c0000530 <strlen>
c0012619:	83 c4 10             	add    esp,0x10
c001261c:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0012620:	3d ff 00 00 00       	cmp    eax,0xff
c0012625:	0f 87 d3 00 00 00    	ja     c00126fe <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001262b:	57                   	push   edi
c001262c:	57                   	push   edi
c001262d:	56                   	push   esi
c001262e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0012632:	56                   	push   esi
c0012633:	e8 b8 df fe ff       	call   c00005f0 <strcpy>
c0012638:	58                   	pop    eax
c0012639:	5a                   	pop    edx
c001263a:	68 fb 08 02 c0       	push   0xc00208fb
c001263f:	56                   	push   esi
c0012640:	e8 6b e1 fe ff       	call   c00007b0 <strcat>
c0012645:	59                   	pop    ecx
c0012646:	5f                   	pop    edi
c0012647:	53                   	push   ebx
c0012648:	56                   	push   esi
c0012649:	e8 62 e1 fe ff       	call   c00007b0 <strcat>
c001264e:	58                   	pop    eax
c001264f:	5a                   	pop    edx
c0012650:	68 a7 05 02 c0       	push   0xc00205a7
c0012655:	56                   	push   esi
c0012656:	e8 55 e1 fe ff       	call   c00007b0 <strcat>
c001265b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012662:	e8 fe 51 ff ff       	call   c0007865 <malloc>
c0012667:	83 c4 0c             	add    esp,0xc
c001266a:	89 c3                	mov    ebx,eax
c001266c:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0012672:	56                   	push   esi
c0012673:	50                   	push   eax
c0012674:	e8 03 85 ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c0012679:	83 c4 10             	add    esp,0x10
c001267c:	85 db                	test   ebx,ebx
c001267e:	74 7e                	je     c00126fe <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012680:	51                   	push   ecx
c0012681:	51                   	push   ecx
c0012682:	6a 01                	push   0x1
c0012684:	53                   	push   ebx
c0012685:	e8 b2 85 ff ff       	call   c000ac3c <File::open(FileOpenMode)>
c001268a:	83 c4 10             	add    esp,0x10
c001268d:	85 c0                	test   eax,eax
c001268f:	74 08                	je     c0012699 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0012691:	83 ec 0c             	sub    esp,0xc
c0012694:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012696:	53                   	push   ebx
c0012697:	eb 5f                	jmp    c00126f8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0012699:	52                   	push   edx
c001269a:	8d 44 24 17          	lea    eax,[esp+0x17]
c001269e:	50                   	push   eax
c001269f:	8d 44 24 20          	lea    eax,[esp+0x20]
c00126a3:	50                   	push   eax
c00126a4:	53                   	push   ebx
c00126a5:	e8 3e 88 ff ff       	call   c000aee8 <File::stat(unsigned long long*, bool*)>
c00126aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00126ae:	83 c4 10             	add    esp,0x10
c00126b1:	89 c1                	mov    ecx,eax
c00126b3:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00126b7:	74 31                	je     c00126ea <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00126b9:	83 ec 0c             	sub    esp,0xc
c00126bc:	50                   	push   eax
c00126bd:	e8 a3 51 ff ff       	call   c0007865 <malloc>
c00126c2:	89 c6                	mov    esi,eax
c00126c4:	58                   	pop    eax
c00126c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00126c7:	8d 54 24 20          	lea    edx,[esp+0x20]
c00126cb:	52                   	push   edx
c00126cc:	56                   	push   esi
c00126cd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00126d1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00126d5:	53                   	push   ebx
c00126d6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00126d9:	83 c4 20             	add    esp,0x20
c00126dc:	85 c0                	test   eax,eax
c00126de:	75 0a                	jne    c00126ea <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00126e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00126e4:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00126e8:	74 18                	je     c0012702 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00126ea:	83 ec 0c             	sub    esp,0xc
c00126ed:	53                   	push   ebx
c00126ee:	e8 a7 85 ff ff       	call   c000ac9a <File::close()>
c00126f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00126f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00126f8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00126fb:	83 c4 10             	add    esp,0x10
c00126fe:	31 c0                	xor    eax,eax
c0012700:	eb 3b                	jmp    c001273d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0012702:	83 ec 0c             	sub    esp,0xc
c0012705:	53                   	push   ebx
c0012706:	e8 8f 85 ff ff       	call   c000ac9a <File::close()>
c001270b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001270d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012710:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012713:	83 c4 0c             	add    esp,0xc
c0012716:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001271d:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012724:	56                   	push   esi
c0012725:	e8 70 fd ff ff       	call   c001249a <Reg::findLineFromLoadedData(char*, char*, char*)>
c001272a:	89 34 24             	mov    DWORD PTR [esp],esi
c001272d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012731:	e8 3f 51 ff ff       	call   c0007875 <free>
c0012736:	83 c4 10             	add    esp,0x10
c0012739:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001273d:	81 c4 20 01 00 00    	add    esp,0x120
c0012743:	5b                   	pop    ebx
c0012744:	5e                   	pop    esi
c0012745:	5f                   	pop    edi
c0012746:	c3                   	ret    

c0012747 <Reg::getLine(char*, char*, char*)>:
c0012747:	57                   	push   edi
c0012748:	56                   	push   esi
c0012749:	53                   	push   ebx
c001274a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001274e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012752:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012756:	57                   	push   edi
c0012757:	56                   	push   esi
c0012758:	53                   	push   ebx
c0012759:	68 ac 05 02 c0       	push   0xc00205ac
c001275e:	e8 8f fe ff ff       	call   c00125f2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012763:	83 c4 10             	add    esp,0x10
c0012766:	84 c0                	test   al,al
c0012768:	75 10                	jne    c001277a <Reg::getLine(char*, char*, char*)+0x33>
c001276a:	57                   	push   edi
c001276b:	56                   	push   esi
c001276c:	53                   	push   ebx
c001276d:	68 d1 05 02 c0       	push   0xc00205d1
c0012772:	e8 7b fe ff ff       	call   c00125f2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012777:	83 c4 10             	add    esp,0x10
c001277a:	5b                   	pop    ebx
c001277b:	5e                   	pop    esi
c001277c:	5f                   	pop    edi
c001277d:	c3                   	ret    

c001277e <Reg::readInt(char*, char*, int*)>:
c001277e:	55                   	push   ebp
c001277f:	57                   	push   edi
c0012780:	56                   	push   esi
c0012781:	53                   	push   ebx
c0012782:	81 ec f0 00 00 00    	sub    esp,0xf0
c0012788:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001278c:	57                   	push   edi
c001278d:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012794:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001279b:	e8 a7 ff ff ff       	call   c0012747 <Reg::getLine(char*, char*, char*)>
c00127a0:	83 c4 10             	add    esp,0x10
c00127a3:	84 c0                	test   al,al
c00127a5:	0f 84 b3 00 00 00    	je     c001285e <Reg::readInt(char*, char*, int*)+0xe0>
c00127ab:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00127af:	80 fa 2b             	cmp    dl,0x2b
c00127b2:	74 0c                	je     c00127c0 <Reg::readInt(char*, char*, int*)+0x42>
c00127b4:	80 fa 2d             	cmp    dl,0x2d
c00127b7:	75 0e                	jne    c00127c7 <Reg::readInt(char*, char*, int*)+0x49>
c00127b9:	ba 01 00 00 00       	mov    edx,0x1
c00127be:	eb 0b                	jmp    c00127cb <Reg::readInt(char*, char*, int*)+0x4d>
c00127c0:	ba 01 00 00 00       	mov    edx,0x1
c00127c5:	eb 02                	jmp    c00127c9 <Reg::readInt(char*, char*, int*)+0x4b>
c00127c7:	31 d2                	xor    edx,edx
c00127c9:	31 c0                	xor    eax,eax
c00127cb:	be 0a 00 00 00       	mov    esi,0xa
c00127d0:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00127d5:	75 20                	jne    c00127f7 <Reg::readInt(char*, char*, int*)+0x79>
c00127d7:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00127db:	80 f9 78             	cmp    cl,0x78
c00127de:	75 0a                	jne    c00127ea <Reg::readInt(char*, char*, int*)+0x6c>
c00127e0:	83 c2 02             	add    edx,0x2
c00127e3:	be 10 00 00 00       	mov    esi,0x10
c00127e8:	eb 0d                	jmp    c00127f7 <Reg::readInt(char*, char*, int*)+0x79>
c00127ea:	80 f9 62             	cmp    cl,0x62
c00127ed:	75 08                	jne    c00127f7 <Reg::readInt(char*, char*, int*)+0x79>
c00127ef:	83 c2 02             	add    edx,0x2
c00127f2:	be 02 00 00 00       	mov    esi,0x2
c00127f7:	01 d7                	add    edi,edx
c00127f9:	31 d2                	xor    edx,edx
c00127fb:	8a 1f                	mov    bl,BYTE PTR [edi]
c00127fd:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0012801:	80 fb 0d             	cmp    bl,0xd
c0012804:	0f 94 c3             	sete   bl
c0012807:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001280c:	0f 94 c1             	sete   cl
c001280f:	08 cb                	or     bl,cl
c0012811:	75 3a                	jne    c001284d <Reg::readInt(char*, char*, int*)+0xcf>
c0012813:	0f af d6             	imul   edx,esi
c0012816:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001281b:	83 fe 10             	cmp    esi,0x10
c001281e:	75 26                	jne    c0012846 <Reg::readInt(char*, char*, int*)+0xc8>
c0012820:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0012824:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0012827:	89 e9                	mov    ecx,ebp
c0012829:	80 f9 05             	cmp    cl,0x5
c001282c:	77 06                	ja     c0012834 <Reg::readInt(char*, char*, int*)+0xb6>
c001282e:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0012832:	eb 16                	jmp    c001284a <Reg::readInt(char*, char*, int*)+0xcc>
c0012834:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0012838:	83 e9 61             	sub    ecx,0x61
c001283b:	80 f9 05             	cmp    cl,0x5
c001283e:	77 06                	ja     c0012846 <Reg::readInt(char*, char*, int*)+0xc8>
c0012840:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0012844:	eb 04                	jmp    c001284a <Reg::readInt(char*, char*, int*)+0xcc>
c0012846:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001284a:	47                   	inc    edi
c001284b:	eb ae                	jmp    c00127fb <Reg::readInt(char*, char*, int*)+0x7d>
c001284d:	84 c0                	test   al,al
c001284f:	74 02                	je     c0012853 <Reg::readInt(char*, char*, int*)+0xd5>
c0012851:	f7 da                	neg    edx
c0012853:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001285a:	89 10                	mov    DWORD PTR [eax],edx
c001285c:	88 d8                	mov    al,bl
c001285e:	81 c4 ec 00 00 00    	add    esp,0xec
c0012864:	5b                   	pop    ebx
c0012865:	5e                   	pop    esi
c0012866:	5f                   	pop    edi
c0012867:	5d                   	pop    ebp
c0012868:	c3                   	ret    

c0012869 <Reg::readString(char*, char*, char*, int)>:
c0012869:	57                   	push   edi
c001286a:	56                   	push   esi
c001286b:	53                   	push   ebx
c001286c:	81 ec d4 00 00 00    	sub    esp,0xd4
c0012872:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0012879:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001287d:	57                   	push   edi
c001287e:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012885:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001288c:	e8 b6 fe ff ff       	call   c0012747 <Reg::getLine(char*, char*, char*)>
c0012891:	83 c4 10             	add    esp,0x10
c0012894:	89 c6                	mov    esi,eax
c0012896:	84 c0                	test   al,al
c0012898:	74 44                	je     c00128de <Reg::readString(char*, char*, char*, int)+0x75>
c001289a:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00128a1:	31 c0                	xor    eax,eax
c00128a3:	4a                   	dec    edx
c00128a4:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00128a7:	84 c9                	test   cl,cl
c00128a9:	74 0f                	je     c00128ba <Reg::readString(char*, char*, char*, int)+0x51>
c00128ab:	39 c2                	cmp    edx,eax
c00128ad:	7e 0b                	jle    c00128ba <Reg::readString(char*, char*, char*, int)+0x51>
c00128af:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00128b2:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00128b7:	40                   	inc    eax
c00128b8:	eb ea                	jmp    c00128a4 <Reg::readString(char*, char*, char*, int)+0x3b>
c00128ba:	83 ec 0c             	sub    esp,0xc
c00128bd:	53                   	push   ebx
c00128be:	e8 6d dc fe ff       	call   c0000530 <strlen>
c00128c3:	83 c4 10             	add    esp,0x10
c00128c6:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00128cb:	75 11                	jne    c00128de <Reg::readString(char*, char*, char*, int)+0x75>
c00128cd:	83 ec 0c             	sub    esp,0xc
c00128d0:	53                   	push   ebx
c00128d1:	e8 5a dc fe ff       	call   c0000530 <strlen>
c00128d6:	83 c4 10             	add    esp,0x10
c00128d9:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00128de:	81 c4 d0 00 00 00    	add    esp,0xd0
c00128e4:	89 f0                	mov    eax,esi
c00128e6:	5b                   	pop    ebx
c00128e7:	5e                   	pop    esi
c00128e8:	5f                   	pop    edi
c00128e9:	c3                   	ret    

c00128ea <Reg::readBool(char*, char*, bool*)>:
c00128ea:	83 ec 20             	sub    esp,0x20
c00128ed:	8d 44 24 10          	lea    eax,[esp+0x10]
c00128f1:	50                   	push   eax
c00128f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00128f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00128fa:	e8 7f fe ff ff       	call   c001277e <Reg::readInt(char*, char*, int*)>
c00128ff:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0012904:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0012908:	0f 95 02             	setne  BYTE PTR [edx]
c001290b:	83 c4 2c             	add    esp,0x2c
c001290e:	c3                   	ret    

c001290f <Reg::readBoolWithDefault(char*, char*, bool)>:
c001290f:	53                   	push   ebx
c0012910:	83 ec 1c             	sub    esp,0x1c
c0012913:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0012917:	8d 44 24 13          	lea    eax,[esp+0x13]
c001291b:	50                   	push   eax
c001291c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012920:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012924:	e8 c1 ff ff ff       	call   c00128ea <Reg::readBool(char*, char*, bool*)>
c0012929:	83 c4 10             	add    esp,0x10
c001292c:	84 c0                	test   al,al
c001292e:	74 04                	je     c0012934 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0012930:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0012934:	88 d8                	mov    al,bl
c0012936:	83 c4 18             	add    esp,0x18
c0012939:	5b                   	pop    ebx
c001293a:	c3                   	ret    

c001293b <Reg::readIntWithDefault(char*, char*, int)>:
c001293b:	53                   	push   ebx
c001293c:	83 ec 1c             	sub    esp,0x1c
c001293f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012943:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012947:	50                   	push   eax
c0012948:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001294c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012950:	e8 29 fe ff ff       	call   c001277e <Reg::readInt(char*, char*, int*)>
c0012955:	83 c4 10             	add    esp,0x10
c0012958:	84 c0                	test   al,al
c001295a:	74 04                	je     c0012960 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001295c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012960:	89 d8                	mov    eax,ebx
c0012962:	83 c4 18             	add    esp,0x18
c0012965:	5b                   	pop    ebx
c0012966:	c3                   	ret    

c0012967 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0012967:	57                   	push   edi
c0012968:	56                   	push   esi
c0012969:	56                   	push   esi
c001296a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001296e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012972:	56                   	push   esi
c0012973:	57                   	push   edi
c0012974:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012978:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001297c:	e8 e8 fe ff ff       	call   c0012869 <Reg::readString(char*, char*, char*, int)>
c0012981:	83 c4 10             	add    esp,0x10
c0012984:	84 c0                	test   al,al
c0012986:	75 1a                	jne    c00129a2 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0012988:	51                   	push   ecx
c0012989:	56                   	push   esi
c001298a:	6a 00                	push   0x0
c001298c:	57                   	push   edi
c001298d:	e8 2e db fe ff       	call   c00004c0 <memset>
c0012992:	8d 4e ff             	lea    ecx,[esi-0x1]
c0012995:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012999:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001299b:	83 c4 10             	add    esp,0x10
c001299e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00129a2:	89 f8                	mov    eax,edi
c00129a4:	5a                   	pop    edx
c00129a5:	5e                   	pop    esi
c00129a6:	5f                   	pop    edi
c00129a7:	c3                   	ret    

c00129a8 <SysEject(regs*)>:
c00129a8:	83 ec 0c             	sub    esp,0xc
c00129ab:	83 ca ff             	or     edx,0xffffffff
c00129ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129b2:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00129b5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00129ba:	83 e9 41             	sub    ecx,0x41
c00129bd:	83 f9 19             	cmp    ecx,0x19
c00129c0:	77 18                	ja     c00129da <SysEject(regs*)+0x32>
c00129c2:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c00129c9:	85 c9                	test   ecx,ecx
c00129cb:	74 0d                	je     c00129da <SysEject(regs*)+0x32>
c00129cd:	83 ec 0c             	sub    esp,0xc
c00129d0:	51                   	push   ecx
c00129d1:	e8 16 a3 ff ff       	call   c000ccec <LogicalDisk::eject()>
c00129d6:	83 c4 10             	add    esp,0x10
c00129d9:	99                   	cdq    
c00129da:	83 c4 0c             	add    esp,0xc
c00129dd:	c3                   	ret    

c00129de <SysExit(regs*)>:
c00129de:	83 ec 18             	sub    esp,0x18
c00129e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00129e5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00129e8:	e8 93 29 00 00       	call   c0015380 <terminateTask(int)>
c00129ed:	83 c8 ff             	or     eax,0xffffffff
c00129f0:	83 c4 1c             	add    esp,0x1c
c00129f3:	89 c2                	mov    edx,eax
c00129f5:	c3                   	ret    

c00129f6 <SysGetCwd(regs*)>:
c00129f6:	83 ec 10             	sub    esp,0x10
c00129f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00129fd:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0012a00:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012a03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012a08:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012a0b:	e8 6e 7f ff ff       	call   c000a97e <Fs::getcwd(Process*, char*, int)>
c0012a10:	83 c4 1c             	add    esp,0x1c
c0012a13:	99                   	cdq    
c0012a14:	c3                   	ret    

c0012a15 <SysGetPID(regs*)>:
c0012a15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012a1a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012a1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a1f:	99                   	cdq    
c0012a20:	c3                   	ret    

c0012a21 <SysGetRAMData(regs*)>:
c0012a21:	8b 0d e8 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023ee8
c0012a27:	69 05 e4 3e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0023ee4,0xc8
c0012a31:	99                   	cdq    
c0012a32:	f7 f9                	idiv   ecx
c0012a34:	c1 e0 18             	shl    eax,0x18
c0012a37:	09 c8                	or     eax,ecx
c0012a39:	99                   	cdq    
c0012a3a:	c3                   	ret    

c0012a3b <SysGetVGAPtr(regs*)>:
c0012a3b:	55                   	push   ebp
c0012a3c:	57                   	push   edi
c0012a3d:	56                   	push   esi
c0012a3e:	53                   	push   ebx
c0012a3f:	83 ec 18             	sub    esp,0x18
c0012a42:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012a46:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012a49:	e8 32 24 00 00       	call   c0014e80 <Thr::processFromPID(int)>
c0012a4e:	83 c4 10             	add    esp,0x10
c0012a51:	89 c1                	mov    ecx,eax
c0012a53:	b8 01 00 00 00       	mov    eax,0x1
c0012a58:	85 c9                	test   ecx,ecx
c0012a5a:	74 57                	je     c0012ab3 <SysGetVGAPtr(regs*)+0x78>
c0012a5c:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0012a62:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0012a66:	74 0c                	je     c0012a74 <SysGetVGAPtr(regs*)+0x39>
c0012a68:	83 ec 0c             	sub    esp,0xc
c0012a6b:	55                   	push   ebp
c0012a6c:	e8 2c 5a ff ff       	call   c000849d <setActiveTerminal(VgaText*)>
c0012a71:	83 c4 10             	add    esp,0x10
c0012a74:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0012a77:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012a7a:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0012a7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012a81:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0012a84:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012a87:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0012a8d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012a90:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0012a93:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0012a99:	50                   	push   eax
c0012a9a:	50                   	push   eax
c0012a9b:	68 ec 05 02 c0       	push   0xc00205ec
c0012aa0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012aa3:	05 a8 0f 00 00       	add    eax,0xfa8
c0012aa8:	50                   	push   eax
c0012aa9:	e8 42 db fe ff       	call   c00005f0 <strcpy>
c0012aae:	83 c4 10             	add    esp,0x10
c0012ab1:	31 c0                	xor    eax,eax
c0012ab3:	83 c4 0c             	add    esp,0xc
c0012ab6:	31 d2                	xor    edx,edx
c0012ab8:	5b                   	pop    ebx
c0012ab9:	5e                   	pop    esi
c0012aba:	5f                   	pop    edi
c0012abb:	5d                   	pop    ebp
c0012abc:	c3                   	ret    
c0012abd:	66 90                	xchg   ax,ax
c0012abf:	90                   	nop

c0012ac0 <SysKill(regs*)>:
c0012ac0:	53                   	push   ebx
c0012ac1:	83 ec 08             	sub    esp,0x8
c0012ac4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012ac8:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0012acc:	75 16                	jne    c0012ae4 <SysKill(regs*)+0x24>
c0012ace:	83 ec 0c             	sub    esp,0xc
c0012ad1:	68 f6 05 02 c0       	push   0xc00205f6
c0012ad6:	e8 ec d8 ff ff       	call   c00103c7 <KePanic(char const*)>
c0012adb:	83 c4 10             	add    esp,0x10
c0012ade:	e9 89 00 00 00       	jmp    c0012b6c <SysKill(regs*)+0xac>
c0012ae3:	90                   	nop
c0012ae4:	83 ec 0c             	sub    esp,0xc
c0012ae7:	68 84 71 02 c0       	push   0xc0027184
c0012aec:	e8 5b b8 00 00       	call   c001e34c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012af1:	8d 76 00             	lea    esi,[esi+0x0]
c0012af4:	83 c4 10             	add    esp,0x10
c0012af7:	85 c0                	test   eax,eax
c0012af9:	74 19                	je     c0012b14 <SysKill(regs*)+0x54>
c0012afb:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0012afe:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0012b01:	39 0a                	cmp    DWORD PTR [edx],ecx
c0012b03:	74 33                	je     c0012b38 <SysKill(regs*)+0x78>
c0012b05:	52                   	push   edx
c0012b06:	52                   	push   edx
c0012b07:	50                   	push   eax
c0012b08:	68 84 71 02 c0       	push   0xc0027184
c0012b0d:	e8 56 bb 00 00       	call   c001e668 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0012b12:	eb e0                	jmp    c0012af4 <SysKill(regs*)+0x34>
c0012b14:	83 ec 0c             	sub    esp,0xc
c0012b17:	68 78 71 02 c0       	push   0xc0027178
c0012b1c:	e8 2b b8 00 00       	call   c001e34c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012b21:	8d 76 00             	lea    esi,[esi+0x0]
c0012b24:	83 c4 10             	add    esp,0x10
c0012b27:	85 c0                	test   eax,eax
c0012b29:	74 41                	je     c0012b6c <SysKill(regs*)+0xac>
c0012b2b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0012b2e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0012b31:	39 0a                	cmp    DWORD PTR [edx],ecx
c0012b33:	75 27                	jne    c0012b5c <SysKill(regs*)+0x9c>
c0012b35:	8d 76 00             	lea    esi,[esi+0x0]
c0012b38:	51                   	push   ecx
c0012b39:	51                   	push   ecx
c0012b3a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012b3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b42:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012b45:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0012b4b:	e8 4b dc ff ff       	call   c001079b <KeRaiseSignal(SigHandlerBlock*, int)>
c0012b50:	83 c4 10             	add    esp,0x10
c0012b53:	31 c0                	xor    eax,eax
c0012b55:	31 d2                	xor    edx,edx
c0012b57:	eb 1b                	jmp    c0012b74 <SysKill(regs*)+0xb4>
c0012b59:	8d 76 00             	lea    esi,[esi+0x0]
c0012b5c:	52                   	push   edx
c0012b5d:	52                   	push   edx
c0012b5e:	50                   	push   eax
c0012b5f:	68 78 71 02 c0       	push   0xc0027178
c0012b64:	e8 ff ba 00 00       	call   c001e668 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0012b69:	eb b9                	jmp    c0012b24 <SysKill(regs*)+0x64>
c0012b6b:	90                   	nop
c0012b6c:	83 c8 ff             	or     eax,0xffffffff
c0012b6f:	89 c2                	mov    edx,eax
c0012b71:	8d 76 00             	lea    esi,[esi+0x0]
c0012b74:	83 c4 08             	add    esp,0x8
c0012b77:	5b                   	pop    ebx
c0012b78:	c3                   	ret    

c0012b79 <SysLoadDLL(regs*)>:
c0012b79:	56                   	push   esi
c0012b7a:	53                   	push   ebx
c0012b7b:	31 d2                	xor    edx,edx
c0012b7d:	51                   	push   ecx
c0012b7e:	b8 01 00 00 00       	mov    eax,0x1
c0012b83:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012b87:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0012b8b:	0f 84 8c 00 00 00    	je     c0012c1d <SysLoadDLL(regs*)+0xa4>
c0012b91:	83 ec 0c             	sub    esp,0xc
c0012b94:	68 14 01 00 00       	push   0x114
c0012b99:	e8 c7 4c ff ff       	call   c0007865 <malloc>
c0012b9e:	83 c4 0c             	add    esp,0xc
c0012ba1:	89 c3                	mov    ebx,eax
c0012ba3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ba8:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012bab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0012bae:	53                   	push   ebx
c0012baf:	e8 c8 7f ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c0012bb4:	83 c4 10             	add    esp,0x10
c0012bb7:	31 d2                	xor    edx,edx
c0012bb9:	b8 02 00 00 00       	mov    eax,0x2
c0012bbe:	85 db                	test   ebx,ebx
c0012bc0:	74 5b                	je     c0012c1d <SysLoadDLL(regs*)+0xa4>
c0012bc2:	83 ec 0c             	sub    esp,0xc
c0012bc5:	53                   	push   ebx
c0012bc6:	e8 df 82 ff ff       	call   c000aeaa <File::exists()>
c0012bcb:	83 c4 10             	add    esp,0x10
c0012bce:	84 c0                	test   al,al
c0012bd0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012bd2:	75 11                	jne    c0012be5 <SysLoadDLL(regs*)+0x6c>
c0012bd4:	83 ec 0c             	sub    esp,0xc
c0012bd7:	53                   	push   ebx
c0012bd8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012bdb:	83 c4 10             	add    esp,0x10
c0012bde:	b8 03 00 00 00       	mov    eax,0x3
c0012be3:	eb 36                	jmp    c0012c1b <SysLoadDLL(regs*)+0xa2>
c0012be5:	83 ec 0c             	sub    esp,0xc
c0012be8:	53                   	push   ebx
c0012be9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012bec:	58                   	pop    eax
c0012bed:	5a                   	pop    edx
c0012bee:	6a 00                	push   0x0
c0012bf0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0012bf3:	e8 10 14 00 00       	call   c0014008 <Thr::loadDLL(char const*, bool)>
c0012bf8:	83 c4 10             	add    esp,0x10
c0012bfb:	89 c1                	mov    ecx,eax
c0012bfd:	31 d2                	xor    edx,edx
c0012bff:	b8 04 00 00 00       	mov    eax,0x4
c0012c04:	85 c9                	test   ecx,ecx
c0012c06:	74 15                	je     c0012c1d <SysLoadDLL(regs*)+0xa4>
c0012c08:	53                   	push   ebx
c0012c09:	53                   	push   ebx
c0012c0a:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0012c10:	51                   	push   ecx
c0012c11:	e8 23 16 00 00       	call   c0014239 <Thr::executeDLL(unsigned long, void*)>
c0012c16:	83 c4 10             	add    esp,0x10
c0012c19:	31 c0                	xor    eax,eax
c0012c1b:	31 d2                	xor    edx,edx
c0012c1d:	59                   	pop    ecx
c0012c1e:	5b                   	pop    ebx
c0012c1f:	5e                   	pop    esi
c0012c20:	c3                   	ret    

c0012c21 <SysRead(regs*)>:
c0012c21:	57                   	push   edi
c0012c22:	56                   	push   esi
c0012c23:	53                   	push   ebx
c0012c24:	83 ec 10             	sub    esp,0x10
c0012c27:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012c2b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012c2e:	83 f8 02             	cmp    eax,0x2
c0012c31:	77 10                	ja     c0012c43 <SysRead(regs*)+0x22>
c0012c33:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c38:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012c3b:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0012c41:	eb 0e                	jmp    c0012c51 <SysRead(regs*)+0x30>
c0012c43:	83 ec 0c             	sub    esp,0xc
c0012c46:	50                   	push   eax
c0012c47:	e8 a7 65 ff ff       	call   c00091f3 <getFromFileDescriptor(int)>
c0012c4c:	83 c4 10             	add    esp,0x10
c0012c4f:	89 c1                	mov    ecx,eax
c0012c51:	83 c8 ff             	or     eax,0xffffffff
c0012c54:	85 c9                	test   ecx,ecx
c0012c56:	89 c2                	mov    edx,eax
c0012c58:	74 28                	je     c0012c82 <SysRead(regs*)+0x61>
c0012c5a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012c62:	31 ff                	xor    edi,edi
c0012c64:	83 ec 0c             	sub    esp,0xc
c0012c67:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012c69:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012c6d:	52                   	push   edx
c0012c6e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012c71:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0012c74:	57                   	push   edi
c0012c75:	56                   	push   esi
c0012c76:	51                   	push   ecx
c0012c77:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012c7a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012c7e:	83 c4 20             	add    esp,0x20
c0012c81:	99                   	cdq    
c0012c82:	83 c4 10             	add    esp,0x10
c0012c85:	5b                   	pop    ebx
c0012c86:	5e                   	pop    esi
c0012c87:	5f                   	pop    edi
c0012c88:	c3                   	ret    

c0012c89 <SysRegisterSignal(regs*)>:
c0012c89:	83 ec 18             	sub    esp,0x18
c0012c8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c90:	6a 00                	push   0x0
c0012c92:	6a 00                	push   0x0
c0012c94:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0012c97:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012c9a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c9f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012ca2:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0012ca8:	e8 b8 da ff ff       	call   c0010765 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0012cad:	83 c4 2c             	add    esp,0x2c
c0012cb0:	99                   	cdq    
c0012cb1:	c3                   	ret    

c0012cb2 <SysRegistryGetTypeFromPath(regs*)>:
c0012cb2:	57                   	push   edi
c0012cb3:	56                   	push   esi
c0012cb4:	53                   	push   ebx
c0012cb5:	81 ec 38 01 00 00    	sub    esp,0x138
c0012cbb:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0012cc2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012cc5:	68 17 06 02 c0       	push   0xc0020617
c0012cca:	e8 37 79 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0012ccf:	5a                   	pop    edx
c0012cd0:	59                   	pop    ecx
c0012cd1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012cd4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012cd7:	e8 68 f6 ff ff       	call   c0012344 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0012cdc:	5f                   	pop    edi
c0012cdd:	89 c6                	mov    esi,eax
c0012cdf:	5a                   	pop    edx
c0012ce0:	50                   	push   eax
c0012ce1:	68 37 06 02 c0       	push   0xc0020637
c0012ce6:	e8 1b 79 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0012ceb:	83 c4 10             	add    esp,0x10
c0012cee:	85 f6                	test   esi,esi
c0012cf0:	74 28                	je     c0012d1a <SysRegistryGetTypeFromPath(regs*)+0x68>
c0012cf2:	50                   	push   eax
c0012cf3:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0012cf7:	57                   	push   edi
c0012cf8:	56                   	push   esi
c0012cf9:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012cfc:	e8 30 f2 ff ff       	call   c0011f31 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0012d01:	83 c4 0c             	add    esp,0xc
c0012d04:	89 c3                	mov    ebx,eax
c0012d06:	57                   	push   edi
c0012d07:	50                   	push   eax
c0012d08:	68 3f 06 02 c0       	push   0xc002063f
c0012d0d:	e8 f4 78 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0012d12:	89 d8                	mov    eax,ebx
c0012d14:	83 c4 10             	add    esp,0x10
c0012d17:	99                   	cdq    
c0012d18:	eb 05                	jmp    c0012d1f <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0012d1a:	83 c8 ff             	or     eax,0xffffffff
c0012d1d:	89 c2                	mov    edx,eax
c0012d1f:	81 c4 30 01 00 00    	add    esp,0x130
c0012d25:	5b                   	pop    ebx
c0012d26:	5e                   	pop    esi
c0012d27:	5f                   	pop    edi
c0012d28:	c3                   	ret    

c0012d29 <SysRegistryReadExtent(regs*)>:
c0012d29:	83 ec 1c             	sub    esp,0x1c
c0012d2c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012d30:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0012d33:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0012d36:	85 c0                	test   eax,eax
c0012d38:	79 1f                	jns    c0012d59 <SysRegistryReadExtent(regs*)+0x30>
c0012d3a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0012d3f:	52                   	push   edx
c0012d40:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0012d44:	52                   	push   edx
c0012d45:	50                   	push   eax
c0012d46:	51                   	push   ecx
c0012d47:	e8 d7 f0 ff ff       	call   c0011e23 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0012d4c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012d50:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012d54:	83 c4 10             	add    esp,0x10
c0012d57:	eb 14                	jmp    c0012d6d <SysRegistryReadExtent(regs*)+0x44>
c0012d59:	83 ec 04             	sub    esp,0x4
c0012d5c:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0012d5f:	50                   	push   eax
c0012d60:	51                   	push   ecx
c0012d61:	e8 57 eb ff ff       	call   c00118bd <CmGetString(Reghive_Tag*, int, char*)>
c0012d66:	83 c4 10             	add    esp,0x10
c0012d69:	31 c0                	xor    eax,eax
c0012d6b:	31 d2                	xor    edx,edx
c0012d6d:	83 c4 1c             	add    esp,0x1c
c0012d70:	c3                   	ret    

c0012d71 <SysRegistryPathToExtentLookup(regs*)>:
c0012d71:	53                   	push   ebx
c0012d72:	83 ec 10             	sub    esp,0x10
c0012d75:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012d79:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012d7c:	68 55 06 02 c0       	push   0xc0020655
c0012d81:	e8 80 78 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0012d86:	58                   	pop    eax
c0012d87:	5a                   	pop    edx
c0012d88:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012d8b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012d8e:	e8 b1 f5 ff ff       	call   c0012344 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0012d93:	83 c4 18             	add    esp,0x18
c0012d96:	99                   	cdq    
c0012d97:	5b                   	pop    ebx
c0012d98:	c3                   	ret    

c0012d99 <SysRegistryEnterDirectory(regs*)>:
c0012d99:	53                   	push   ebx
c0012d9a:	83 ec 10             	sub    esp,0x10
c0012d9d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012da1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012da4:	68 78 06 02 c0       	push   0xc0020678
c0012da9:	e8 58 78 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0012dae:	58                   	pop    eax
c0012daf:	5a                   	pop    edx
c0012db0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012db3:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012db6:	e8 79 eb ff ff       	call   c0011934 <CmEnterDirectory(Reghive_Tag*, int)>
c0012dbb:	83 c4 18             	add    esp,0x18
c0012dbe:	99                   	cdq    
c0012dbf:	5b                   	pop    ebx
c0012dc0:	c3                   	ret    

c0012dc1 <SysRegistryGetNext(regs*)>:
c0012dc1:	53                   	push   ebx
c0012dc2:	83 ec 10             	sub    esp,0x10
c0012dc5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012dc9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012dcc:	68 96 06 02 c0       	push   0xc0020696
c0012dd1:	e8 30 78 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0012dd6:	58                   	pop    eax
c0012dd7:	5a                   	pop    edx
c0012dd8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012ddb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012dde:	e8 90 eb ff ff       	call   c0011973 <CmGetNext(Reghive_Tag*, int)>
c0012de3:	83 c4 18             	add    esp,0x18
c0012de6:	99                   	cdq    
c0012de7:	5b                   	pop    ebx
c0012de8:	c3                   	ret    

c0012de9 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0012de9:	57                   	push   edi
c0012dea:	56                   	push   esi
c0012deb:	53                   	push   ebx
c0012dec:	81 ec 34 01 00 00    	sub    esp,0x134
c0012df2:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0012df9:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0012dfd:	57                   	push   edi
c0012dfe:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0012e01:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0012e04:	e8 28 f1 ff ff       	call   c0011f31 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0012e09:	89 c3                	mov    ebx,eax
c0012e0b:	58                   	pop    eax
c0012e0c:	5a                   	pop    edx
c0012e0d:	57                   	push   edi
c0012e0e:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0012e11:	e8 da d7 fe ff       	call   c00005f0 <strcpy>
c0012e16:	89 d8                	mov    eax,ebx
c0012e18:	81 c4 40 01 00 00    	add    esp,0x140
c0012e1e:	99                   	cdq    
c0012e1f:	5b                   	pop    ebx
c0012e20:	5e                   	pop    esi
c0012e21:	5f                   	pop    edi
c0012e22:	c3                   	ret    

c0012e23 <SysRegistryOpen(regs*)>:
c0012e23:	83 ec 18             	sub    esp,0x18
c0012e26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012e2a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0012e2d:	e8 1b e9 ff ff       	call   c001174d <CmOpen(char const*)>
c0012e32:	83 c4 1c             	add    esp,0x1c
c0012e35:	99                   	cdq    
c0012e36:	c3                   	ret    

c0012e37 <SysRegistryClose(regs*)>:
c0012e37:	83 ec 18             	sub    esp,0x18
c0012e3a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012e3e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012e41:	e8 25 ea ff ff       	call   c001186b <CmClose(Reghive_Tag*)>
c0012e46:	31 c0                	xor    eax,eax
c0012e48:	31 d2                	xor    edx,edx
c0012e4a:	83 c4 1c             	add    esp,0x1c
c0012e4d:	c3                   	ret    

c0012e4e <SysSbrk(regs*)>:
c0012e4e:	56                   	push   esi
c0012e4f:	53                   	push   ebx
c0012e50:	50                   	push   eax
c0012e51:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012e56:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e5a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012e5d:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0012e60:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0012e66:	85 db                	test   ebx,ebx
c0012e68:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0012e6b:	74 02                	je     c0012e6f <SysSbrk(regs*)+0x21>
c0012e6d:	79 06                	jns    c0012e75 <SysSbrk(regs*)+0x27>
c0012e6f:	89 f0                	mov    eax,esi
c0012e71:	31 d2                	xor    edx,edx
c0012e73:	eb 2a                	jmp    c0012e9f <SysSbrk(regs*)+0x51>
c0012e75:	83 c8 ff             	or     eax,0xffffffff
c0012e78:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0012e7e:	89 c2                	mov    edx,eax
c0012e80:	77 1d                	ja     c0012e9f <SysSbrk(regs*)+0x51>
c0012e82:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0012e88:	50                   	push   eax
c0012e89:	c1 ea 0c             	shr    edx,0xc
c0012e8c:	68 07 0c 00 00       	push   0xc07
c0012e91:	52                   	push   edx
c0012e92:	51                   	push   ecx
c0012e93:	e8 78 6c ff ff       	call   c0009b10 <VAS::allocatePages(int, int)>
c0012e98:	89 f0                	mov    eax,esi
c0012e9a:	31 d2                	xor    edx,edx
c0012e9c:	83 c4 10             	add    esp,0x10
c0012e9f:	59                   	pop    ecx
c0012ea0:	5b                   	pop    ebx
c0012ea1:	5e                   	pop    esi
c0012ea2:	c3                   	ret    

c0012ea3 <SysSetCwd(regs*)>:
c0012ea3:	83 ec 14             	sub    esp,0x14
c0012ea6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012eaa:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012ead:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012eb2:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012eb5:	e8 8f 80 ff ff       	call   c000af49 <Fs::setcwd(Process*, char*)>
c0012eba:	83 c4 1c             	add    esp,0x1c
c0012ebd:	99                   	cdq    
c0012ebe:	c3                   	ret    

c0012ebf <SysSetTime(regs*)>:
c0012ebf:	55                   	push   ebp
c0012ec0:	31 c9                	xor    ecx,ecx
c0012ec2:	57                   	push   edi
c0012ec3:	bd 0c 00 00 00       	mov    ebp,0xc
c0012ec8:	56                   	push   esi
c0012ec9:	53                   	push   ebx
c0012eca:	31 db                	xor    ebx,ebx
c0012ecc:	83 ec 10             	sub    esp,0x10
c0012ecf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012ed3:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0012ed6:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0012ed9:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0012edc:	89 c2                	mov    edx,eax
c0012ede:	66 81 ef 6c 07       	sub    di,0x76c
c0012ee3:	83 e2 1f             	and    edx,0x1f
c0012ee6:	c1 e7 10             	shl    edi,0x10
c0012ee9:	42                   	inc    edx
c0012eea:	c1 e8 05             	shr    eax,0x5
c0012eed:	88 d1                	mov    cl,dl
c0012eef:	31 d2                	xor    edx,edx
c0012ef1:	f7 f5                	div    ebp
c0012ef3:	89 dd                	mov    ebp,ebx
c0012ef5:	88 d5                	mov    ch,dl
c0012ef7:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0012efd:	0f b7 c1             	movzx  eax,cx
c0012f00:	31 d2                	xor    edx,edx
c0012f02:	09 f8                	or     eax,edi
c0012f04:	bf 3c 00 00 00       	mov    edi,0x3c
c0012f09:	89 c1                	mov    ecx,eax
c0012f0b:	89 f0                	mov    eax,esi
c0012f0d:	f7 f7                	div    edi
c0012f0f:	c1 e2 10             	shl    edx,0x10
c0012f12:	09 d5                	or     ebp,edx
c0012f14:	31 d2                	xor    edx,edx
c0012f16:	89 eb                	mov    ebx,ebp
c0012f18:	f7 f7                	div    edi
c0012f1a:	bf 10 0e 00 00       	mov    edi,0xe10
c0012f1f:	88 d7                	mov    bh,dl
c0012f21:	89 f0                	mov    eax,esi
c0012f23:	31 d2                	xor    edx,edx
c0012f25:	f7 f7                	div    edi
c0012f27:	bf 18 00 00 00       	mov    edi,0x18
c0012f2c:	31 d2                	xor    edx,edx
c0012f2e:	f7 f7                	div    edi
c0012f30:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0012f35:	88 d3                	mov    bl,dl
c0012f37:	53                   	push   ebx
c0012f38:	51                   	push   ecx
c0012f39:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0012f3f:	e8 14 88 ff ff       	call   c000b758 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0012f44:	83 c4 1c             	add    esp,0x1c
c0012f47:	83 f0 01             	xor    eax,0x1
c0012f4a:	5b                   	pop    ebx
c0012f4b:	0f b6 c0             	movzx  eax,al
c0012f4e:	5e                   	pop    esi
c0012f4f:	31 d2                	xor    edx,edx
c0012f51:	5f                   	pop    edi
c0012f52:	5d                   	pop    ebp
c0012f53:	c3                   	ret    

c0012f54 <SysTimezone(regs*)>:
c0012f54:	53                   	push   ebx
c0012f55:	83 ec 08             	sub    esp,0x8
c0012f58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012f5c:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0012f60:	75 17                	jne    c0012f79 <SysTimezone(regs*)+0x25>
c0012f62:	83 ec 0c             	sub    esp,0xc
c0012f65:	68 ad 06 02 c0       	push   0xc00206ad
c0012f6a:	e8 97 76 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0012f6f:	83 c8 ff             	or     eax,0xffffffff
c0012f72:	83 c4 10             	add    esp,0x10
c0012f75:	89 c2                	mov    edx,eax
c0012f77:	eb 20                	jmp    c0012f99 <SysTimezone(regs*)+0x45>
c0012f79:	83 ec 0c             	sub    esp,0xc
c0012f7c:	68 c2 06 02 c0       	push   0xc00206c2
c0012f81:	e8 80 76 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0012f86:	58                   	pop    eax
c0012f87:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012f8a:	e8 25 85 ff ff       	call   c000b4b4 <User::loadClockSettings(int)>
c0012f8f:	83 c4 10             	add    esp,0x10
c0012f92:	b8 01 00 00 00       	mov    eax,0x1
c0012f97:	31 d2                	xor    edx,edx
c0012f99:	83 c4 08             	add    esp,0x8
c0012f9c:	5b                   	pop    ebx
c0012f9d:	c3                   	ret    

c0012f9e <SysWrite(regs*)>:
c0012f9e:	57                   	push   edi
c0012f9f:	56                   	push   esi
c0012fa0:	53                   	push   ebx
c0012fa1:	83 ec 10             	sub    esp,0x10
c0012fa4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012fa8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012fab:	83 f8 02             	cmp    eax,0x2
c0012fae:	77 10                	ja     c0012fc0 <SysWrite(regs*)+0x22>
c0012fb0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012fb5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012fb8:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0012fbe:	eb 0e                	jmp    c0012fce <SysWrite(regs*)+0x30>
c0012fc0:	83 ec 0c             	sub    esp,0xc
c0012fc3:	50                   	push   eax
c0012fc4:	e8 2a 62 ff ff       	call   c00091f3 <getFromFileDescriptor(int)>
c0012fc9:	83 c4 10             	add    esp,0x10
c0012fcc:	89 c1                	mov    ecx,eax
c0012fce:	83 c8 ff             	or     eax,0xffffffff
c0012fd1:	85 c9                	test   ecx,ecx
c0012fd3:	89 c2                	mov    edx,eax
c0012fd5:	74 28                	je     c0012fff <SysWrite(regs*)+0x61>
c0012fd7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012fdf:	31 ff                	xor    edi,edi
c0012fe1:	83 ec 0c             	sub    esp,0xc
c0012fe4:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012fe6:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012fea:	52                   	push   edx
c0012feb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012fee:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0012ff1:	57                   	push   edi
c0012ff2:	56                   	push   esi
c0012ff3:	51                   	push   ecx
c0012ff4:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012ff7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012ffb:	83 c4 20             	add    esp,0x20
c0012ffe:	99                   	cdq    
c0012fff:	83 c4 10             	add    esp,0x10
c0013002:	5b                   	pop    ebx
c0013003:	5e                   	pop    esi
c0013004:	5f                   	pop    edi
c0013005:	c3                   	ret    

c0013006 <SysWsbe(regs*)>:
c0013006:	57                   	push   edi
c0013007:	b9 0b 00 00 00       	mov    ecx,0xb
c001300c:	56                   	push   esi
c001300d:	be 01 07 02 c0       	mov    esi,0xc0020701
c0013012:	53                   	push   ebx
c0013013:	83 ec 30             	sub    esp,0x30
c0013016:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001301a:	fc                   	cld    
c001301b:	83 ec 0c             	sub    esp,0xc
c001301e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013020:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013024:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013029:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001302c:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0013032:	8b 06                	mov    eax,DWORD PTR [esi]
c0013034:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0013037:	57                   	push   edi
c0013038:	e8 f3 d4 fe ff       	call   c0000530 <strlen>
c001303d:	5a                   	pop    edx
c001303e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013042:	52                   	push   edx
c0013043:	31 d2                	xor    edx,edx
c0013045:	57                   	push   edi
c0013046:	52                   	push   edx
c0013047:	50                   	push   eax
c0013048:	56                   	push   esi
c0013049:	ff d3                	call   ebx
c001304b:	83 c4 14             	add    esp,0x14
c001304e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0013052:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013055:	e8 26 23 00 00       	call   c0015380 <terminateTask(int)>
c001305a:	83 c4 40             	add    esp,0x40
c001305d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0013062:	5b                   	pop    ebx
c0013063:	31 d2                	xor    edx,edx
c0013065:	5e                   	pop    esi
c0013066:	5f                   	pop    edi
c0013067:	c3                   	ret    

c0013068 <SysYield(regs*)>:
c0013068:	83 ec 0c             	sub    esp,0xc
c001306b:	fa                   	cli    
c001306c:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0013072:	e8 e5 19 00 00       	call   c0014a5c <schedule()>
c0013077:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001307c:	48                   	dec    eax
c001307d:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0013082:	75 01                	jne    c0013085 <SysYield(regs*)+0x1d>
c0013084:	fb                   	sti    
c0013085:	31 c0                	xor    eax,eax
c0013087:	31 d2                	xor    edx,edx
c0013089:	83 c4 0c             	add    esp,0xc
c001308c:	c3                   	ret    

c001308d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001308d:	55                   	push   ebp
c001308e:	57                   	push   edi
c001308f:	56                   	push   esi
c0013090:	53                   	push   ebx
c0013091:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0013097:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c001309f:	0f 95 c2             	setne  dl
c00130a2:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00130aa:	0f 94 c0             	sete   al
c00130ad:	84 c2                	test   dl,al
c00130af:	74 34                	je     c00130e5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c00130b1:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00130bc:	74 27                	je     c00130e5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c00130be:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00130c5:	05 00 10 00 00       	add    eax,0x1000
c00130ca:	89 c1                	mov    ecx,eax
c00130cc:	25 00 f0 ff ff       	and    eax,0xfffff000
c00130d1:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00130d7:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00130de:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c00130e5:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00130ec:	83 ec 0c             	sub    esp,0xc
c00130ef:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00130f5:	6a 01                	push   0x1
c00130f7:	e8 4d 62 ff ff       	call   c0009349 <Virt::allocateKernelVirtualPages(int)>
c00130fc:	83 c4 10             	add    esp,0x10
c00130ff:	89 c3                	mov    ebx,eax
c0013101:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013107:	0f 86 25 01 00 00    	jbe    c0013232 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c001310d:	c1 ee 0c             	shr    esi,0xc
c0013110:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013117:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001311b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013123:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001312a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001312e:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0013135:	29 ef                	sub    edi,ebp
c0013137:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c001313b:	0f 83 f8 00 00 00    	jae    c0013239 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0013141:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0013147:	76 05                	jbe    c001314e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0013149:	bf 00 10 00 00       	mov    edi,0x1000
c001314e:	83 ec 0c             	sub    esp,0xc
c0013151:	31 d2                	xor    edx,edx
c0013153:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001315a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001315c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013160:	50                   	push   eax
c0013161:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013165:	56                   	push   esi
c0013166:	52                   	push   edx
c0013167:	57                   	push   edi
c0013168:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001316f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013172:	83 c4 20             	add    esp,0x20
c0013175:	85 c0                	test   eax,eax
c0013177:	75 06                	jne    c001317f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0013179:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001317d:	74 13                	je     c0013192 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c001317f:	83 ec 0c             	sub    esp,0xc
c0013182:	53                   	push   ebx
c0013183:	e8 b5 64 ff ff       	call   c000963d <Virt::freeKernelVirtualPages(unsigned long)>
c0013188:	83 c4 10             	add    esp,0x10
c001318b:	31 c0                	xor    eax,eax
c001318d:	e9 7c 01 00 00       	jmp    c001330e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0013192:	fa                   	cli    
c0013193:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0013199:	e8 a3 49 ff ff       	call   c0007b41 <Phys::allocatePage()>
c001319e:	6a 07                	push   0x7
c00131a0:	89 c7                	mov    edi,eax
c00131a2:	53                   	push   ebx
c00131a3:	50                   	push   eax
c00131a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00131a9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00131ac:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00131b2:	e8 55 68 ff ff       	call   c0009a0c <VAS::mapPage(unsigned long, unsigned long, int)>
c00131b7:	83 c4 0c             	add    esp,0xc
c00131ba:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00131c1:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00131c7:	6a 00                	push   0x0
c00131c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00131ce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00131d1:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00131d7:	e8 a2 66 ff ff       	call   c000987e <VAS::mapOtherVASIn(bool, VAS*)>
c00131dc:	58                   	pop    eax
c00131dd:	5a                   	pop    edx
c00131de:	68 07 0c 00 00       	push   0xc07
c00131e3:	55                   	push   ebp
c00131e4:	57                   	push   edi
c00131e5:	89 df                	mov    edi,ebx
c00131e7:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00131ee:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00131f4:	6a 00                	push   0x0
c00131f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00131fb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00131fe:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013204:	e8 c3 6b ff ff       	call   c0009dcc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013209:	b9 00 10 00 00       	mov    ecx,0x1000
c001320e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013210:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0013215:	83 c4 20             	add    esp,0x20
c0013218:	48                   	dec    eax
c0013219:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001321e:	85 c0                	test   eax,eax
c0013220:	75 01                	jne    c0013223 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0013222:	fb                   	sti    
c0013223:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013229:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001322d:	e9 f1 fe ff ff       	jmp    c0013123 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0013232:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013239:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013240:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013246:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001324c:	0f 86 ae 00 00 00    	jbe    c0013300 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0013252:	fa                   	cli    
c0013253:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0013259:	c1 ee 0c             	shr    esi,0xc
c001325c:	51                   	push   ecx
c001325d:	31 ff                	xor    edi,edi
c001325f:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013266:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001326c:	6a 00                	push   0x0
c001326e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013273:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013276:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001327c:	e8 fd 65 ff ff       	call   c000987e <VAS::mapOtherVASIn(bool, VAS*)>
c0013281:	83 c4 10             	add    esp,0x10
c0013284:	e8 b8 48 ff ff       	call   c0007b41 <Phys::allocatePage()>
c0013289:	47                   	inc    edi
c001328a:	6a 07                	push   0x7
c001328c:	53                   	push   ebx
c001328d:	50                   	push   eax
c001328e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013292:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013298:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001329b:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00132a1:	e8 66 67 ff ff       	call   c0009a0c <VAS::mapPage(unsigned long, unsigned long, int)>
c00132a6:	58                   	pop    eax
c00132a7:	5a                   	pop    edx
c00132a8:	68 07 0c 00 00       	push   0xc07
c00132ad:	55                   	push   ebp
c00132ae:	81 c5 00 10 00 00    	add    ebp,0x1000
c00132b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00132b8:	50                   	push   eax
c00132b9:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00132c0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00132c6:	6a 00                	push   0x0
c00132c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00132cd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00132d0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00132d6:	e8 f1 6a ff ff       	call   c0009dcc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00132db:	83 c4 1c             	add    esp,0x1c
c00132de:	68 00 10 00 00       	push   0x1000
c00132e3:	6a 00                	push   0x0
c00132e5:	53                   	push   ebx
c00132e6:	e8 d5 d1 fe ff       	call   c00004c0 <memset>
c00132eb:	83 c4 10             	add    esp,0x10
c00132ee:	39 fe                	cmp    esi,edi
c00132f0:	77 92                	ja     c0013284 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c00132f2:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00132f7:	48                   	dec    eax
c00132f8:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00132fd:	75 01                	jne    c0013300 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c00132ff:	fb                   	sti    
c0013300:	83 ec 0c             	sub    esp,0xc
c0013303:	53                   	push   ebx
c0013304:	e8 34 63 ff ff       	call   c000963d <Virt::freeKernelVirtualPages(unsigned long)>
c0013309:	83 c4 10             	add    esp,0x10
c001330c:	b0 01                	mov    al,0x1
c001330e:	81 c4 2c 10 00 00    	add    esp,0x102c
c0013314:	5b                   	pop    ebx
c0013315:	5e                   	pop    esi
c0013316:	5f                   	pop    edi
c0013317:	5d                   	pop    ebp
c0013318:	c3                   	ret    

c0013319 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0013319:	55                   	push   ebp
c001331a:	57                   	push   edi
c001331b:	56                   	push   esi
c001331c:	53                   	push   ebx
c001331d:	83 ec 48             	sub    esp,0x48
c0013320:	68 14 01 00 00       	push   0x114
c0013325:	e8 3b 45 ff ff       	call   c0007865 <malloc>
c001332a:	83 c4 0c             	add    esp,0xc
c001332d:	89 c6                	mov    esi,eax
c001332f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013333:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013337:	50                   	push   eax
c0013338:	e8 3f 78 ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c001333d:	58                   	pop    eax
c001333e:	5a                   	pop    edx
c001333f:	6a 01                	push   0x1
c0013341:	56                   	push   esi
c0013342:	e8 f5 78 ff ff       	call   c000ac3c <File::open(FileOpenMode)>
c0013347:	83 c4 10             	add    esp,0x10
c001334a:	85 c0                	test   eax,eax
c001334c:	0f 85 47 01 00 00    	jne    c0013499 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0013352:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001335a:	83 ec 0c             	sub    esp,0xc
c001335d:	6a 34                	push   0x34
c001335f:	e8 01 45 ff ff       	call   c0007865 <malloc>
c0013364:	89 c3                	mov    ebx,eax
c0013366:	58                   	pop    eax
c0013367:	8b 06                	mov    eax,DWORD PTR [esi]
c0013369:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001336d:	57                   	push   edi
c001336e:	53                   	push   ebx
c001336f:	6a 00                	push   0x0
c0013371:	6a 34                	push   0x34
c0013373:	56                   	push   esi
c0013374:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013377:	83 c4 20             	add    esp,0x20
c001337a:	85 c0                	test   eax,eax
c001337c:	0f 85 17 01 00 00    	jne    c0013499 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0013382:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0013388:	0f 85 0b 01 00 00    	jne    c0013499 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001338e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013391:	85 c0                	test   eax,eax
c0013393:	0f 84 00 01 00 00    	je     c0013499 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0013399:	31 d2                	xor    edx,edx
c001339b:	55                   	push   ebp
c001339c:	52                   	push   edx
c001339d:	50                   	push   eax
c001339e:	56                   	push   esi
c001339f:	e8 56 79 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c00133a4:	83 c4 10             	add    esp,0x10
c00133a7:	85 c0                	test   eax,eax
c00133a9:	0f 85 ea 00 00 00    	jne    c0013499 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00133af:	83 ec 0c             	sub    esp,0xc
c00133b2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00133b5:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00133b9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00133bd:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00133c1:	0f af c2             	imul   eax,edx
c00133c4:	50                   	push   eax
c00133c5:	e8 9b 44 ff ff       	call   c0007865 <malloc>
c00133ca:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00133cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00133d0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00133d3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00133d7:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00133db:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00133df:	0f af c2             	imul   eax,edx
c00133e2:	99                   	cdq    
c00133e3:	52                   	push   edx
c00133e4:	50                   	push   eax
c00133e5:	56                   	push   esi
c00133e6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00133e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00133ec:	83 c4 20             	add    esp,0x20
c00133ef:	85 c0                	test   eax,eax
c00133f1:	0f 84 a2 00 00 00    	je     c0013499 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00133f7:	31 d2                	xor    edx,edx
c00133f9:	51                   	push   ecx
c00133fa:	52                   	push   edx
c00133fb:	50                   	push   eax
c00133fc:	56                   	push   esi
c00133fd:	e8 f8 78 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c0013402:	83 c4 10             	add    esp,0x10
c0013405:	85 c0                	test   eax,eax
c0013407:	0f 85 8c 00 00 00    	jne    c0013499 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001340d:	83 ec 0c             	sub    esp,0xc
c0013410:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013414:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013418:	31 ed                	xor    ebp,ebp
c001341a:	0f af c2             	imul   eax,edx
c001341d:	50                   	push   eax
c001341e:	e8 42 44 ff ff       	call   c0007865 <malloc>
c0013423:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013425:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013429:	89 3c 24             	mov    DWORD PTR [esp],edi
c001342c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013430:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013434:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013438:	0f af c2             	imul   eax,edx
c001343b:	99                   	cdq    
c001343c:	52                   	push   edx
c001343d:	50                   	push   eax
c001343e:	56                   	push   esi
c001343f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013442:	83 c4 20             	add    esp,0x20
c0013445:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001344d:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0013451:	0f 86 80 00 00 00    	jbe    c00134d7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0013457:	0f b7 fd             	movzx  edi,bp
c001345a:	c1 e7 05             	shl    edi,0x5
c001345d:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0013461:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0013464:	75 6b                	jne    c00134d1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0013466:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0013469:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001346d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0013470:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013474:	52                   	push   edx
c0013475:	31 d2                	xor    edx,edx
c0013477:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001347a:	52                   	push   edx
c001347b:	50                   	push   eax
c001347c:	56                   	push   esi
c001347d:	e8 78 78 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c0013482:	83 c4 10             	add    esp,0x10
c0013485:	85 c0                	test   eax,eax
c0013487:	74 17                	je     c00134a0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0013489:	83 ec 0c             	sub    esp,0xc
c001348c:	68 2d 07 02 c0       	push   0xc002072d
c0013491:	e8 70 71 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0013496:	83 c4 10             	add    esp,0x10
c0013499:	31 c0                	xor    eax,eax
c001349b:	e9 87 00 00 00       	jmp    c0013527 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00134a0:	83 ec 0c             	sub    esp,0xc
c00134a3:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00134a6:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00134a9:	50                   	push   eax
c00134aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00134ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00134b2:	56                   	push   esi
c00134b3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00134b7:	e8 d1 fb ff ff       	call   c001308d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00134bc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00134c0:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00134c4:	83 c4 20             	add    esp,0x20
c00134c7:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00134cb:	73 04                	jae    c00134d1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00134cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00134d1:	45                   	inc    ebp
c00134d2:	e9 76 ff ff ff       	jmp    c001344d <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00134d7:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00134db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00134df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00134e3:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00134e9:	83 ec 0c             	sub    esp,0xc
c00134ec:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c00134f2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00134f7:	05 00 10 00 00       	add    eax,0x1000
c00134fc:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00134ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013503:	e8 6d 43 ff ff       	call   c0007875 <free>
c0013508:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001350b:	e8 65 43 ff ff       	call   c0007875 <free>
c0013510:	58                   	pop    eax
c0013511:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013515:	e8 5b 43 ff ff       	call   c0007875 <free>
c001351a:	89 34 24             	mov    DWORD PTR [esp],esi
c001351d:	e8 78 77 ff ff       	call   c000ac9a <File::close()>
c0013522:	83 c4 10             	add    esp,0x10
c0013525:	b0 01                	mov    al,0x1
c0013527:	83 c4 3c             	add    esp,0x3c
c001352a:	5b                   	pop    ebx
c001352b:	5e                   	pop    esi
c001352c:	5f                   	pop    edi
c001352d:	5d                   	pop    ebp
c001352e:	c3                   	ret    

c001352f <Thr::runtimeReferenceHelper()>:
c001352f:	83 ec 18             	sub    esp,0x18
c0013532:	68 35 07 02 c0       	push   0xc0020735
c0013537:	e8 ca 70 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c001353c:	fa                   	cli    
c001353d:	83 c4 10             	add    esp,0x10
c0013540:	eb fe                	jmp    c0013540 <Thr::runtimeReferenceHelper()+0x11>

c0013542 <Thr::getAddressOfKernelSymbol(char const*)>:
c0013542:	57                   	push   edi
c0013543:	56                   	push   esi
c0013544:	53                   	push   ebx
c0013545:	31 db                	xor    ebx,ebx
c0013547:	39 1d 40 71 02 c0    	cmp    DWORD PTR ds:0xc0027140,ebx
c001354d:	7e 3c                	jle    c001358b <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001354f:	8b 34 9d c0 70 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd8f40]
c0013556:	31 ff                	xor    edi,edi
c0013558:	39 3c 9d c0 6f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd9040],edi
c001355f:	7e 27                	jle    c0013588 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013561:	50                   	push   eax
c0013562:	50                   	push   eax
c0013563:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013567:	8b 06                	mov    eax,DWORD PTR [esi]
c0013569:	03 04 9d 40 70 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd8fc0]
c0013570:	50                   	push   eax
c0013571:	e8 5a d1 fe ff       	call   c00006d0 <strcmp>
c0013576:	83 c4 10             	add    esp,0x10
c0013579:	85 c0                	test   eax,eax
c001357b:	75 05                	jne    c0013582 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001357d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013580:	eb 0b                	jmp    c001358d <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013582:	83 c6 10             	add    esi,0x10
c0013585:	47                   	inc    edi
c0013586:	eb d0                	jmp    c0013558 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013588:	43                   	inc    ebx
c0013589:	eb bc                	jmp    c0013547 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001358b:	31 c0                	xor    eax,eax
c001358d:	5b                   	pop    ebx
c001358e:	5e                   	pop    esi
c001358f:	5f                   	pop    edi
c0013590:	c3                   	ret    

c0013591 <Thr::loadKernelSymbolTable(char const*)>:
c0013591:	55                   	push   ebp
c0013592:	57                   	push   edi
c0013593:	56                   	push   esi
c0013594:	53                   	push   ebx
c0013595:	83 ec 68             	sub    esp,0x68
c0013598:	8b 35 90 71 02 c0    	mov    esi,DWORD PTR ds:0xc0027190
c001359e:	68 14 01 00 00       	push   0x114
c00135a3:	e8 bd 42 ff ff       	call   c0007865 <malloc>
c00135a8:	83 c4 0c             	add    esp,0xc
c00135ab:	89 c3                	mov    ebx,eax
c00135ad:	56                   	push   esi
c00135ae:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00135b2:	50                   	push   eax
c00135b3:	e8 c4 75 ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c00135b8:	5e                   	pop    esi
c00135b9:	5f                   	pop    edi
c00135ba:	6a 01                	push   0x1
c00135bc:	53                   	push   ebx
c00135bd:	e8 7a 76 ff ff       	call   c000ac3c <File::open(FileOpenMode)>
c00135c2:	83 c4 10             	add    esp,0x10
c00135c5:	85 c0                	test   eax,eax
c00135c7:	74 0a                	je     c00135d3 <Thr::loadKernelSymbolTable(char const*)+0x42>
c00135c9:	83 ec 0c             	sub    esp,0xc
c00135cc:	68 57 07 02 c0       	push   0xc0020757
c00135d1:	eb 34                	jmp    c0013607 <Thr::loadKernelSymbolTable(char const*)+0x76>
c00135d3:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00135db:	83 ec 0c             	sub    esp,0xc
c00135de:	6a 34                	push   0x34
c00135e0:	e8 80 42 ff ff       	call   c0007865 <malloc>
c00135e5:	59                   	pop    ecx
c00135e6:	89 c7                	mov    edi,eax
c00135e8:	8d 74 24 34          	lea    esi,[esp+0x34]
c00135ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00135ee:	56                   	push   esi
c00135ef:	57                   	push   edi
c00135f0:	6a 00                	push   0x0
c00135f2:	6a 34                	push   0x34
c00135f4:	53                   	push   ebx
c00135f5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00135f8:	83 c4 20             	add    esp,0x20
c00135fb:	85 c0                	test   eax,eax
c00135fd:	74 17                	je     c0013616 <Thr::loadKernelSymbolTable(char const*)+0x85>
c00135ff:	83 ec 0c             	sub    esp,0xc
c0013602:	68 6e 07 02 c0       	push   0xc002076e
c0013607:	e8 bb cd ff ff       	call   c00103c7 <KePanic(char const*)>
c001360c:	83 c4 10             	add    esp,0x10
c001360f:	31 c0                	xor    eax,eax
c0013611:	e9 31 02 00 00       	jmp    c0013847 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0013616:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001361c:	75 e1                	jne    c00135ff <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001361e:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013621:	85 c0                	test   eax,eax
c0013623:	74 da                	je     c00135ff <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013625:	52                   	push   edx
c0013626:	31 d2                	xor    edx,edx
c0013628:	52                   	push   edx
c0013629:	50                   	push   eax
c001362a:	53                   	push   ebx
c001362b:	e8 ca 76 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c0013630:	83 c4 10             	add    esp,0x10
c0013633:	85 c0                	test   eax,eax
c0013635:	75 c8                	jne    c00135ff <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013637:	83 ec 0c             	sub    esp,0xc
c001363a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001363e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013642:	31 ed                	xor    ebp,ebp
c0013644:	0f af c2             	imul   eax,edx
c0013647:	50                   	push   eax
c0013648:	e8 18 42 ff ff       	call   c0007865 <malloc>
c001364d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001364f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013653:	89 34 24             	mov    DWORD PTR [esp],esi
c0013656:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001365a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001365e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013662:	0f af c2             	imul   eax,edx
c0013665:	99                   	cdq    
c0013666:	52                   	push   edx
c0013667:	50                   	push   eax
c0013668:	53                   	push   ebx
c0013669:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001366c:	83 c4 20             	add    esp,0x20
c001366f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013677:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001367f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013687:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001368f:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0013693:	0f 86 aa 00 00 00    	jbe    c0013743 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0013699:	0f b7 f5             	movzx  esi,bp
c001369c:	6b f6 28             	imul   esi,esi,0x28
c001369f:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00136a3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00136a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00136aa:	50                   	push   eax
c00136ab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00136af:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00136b3:	8b 16                	mov    edx,DWORD PTR [esi]
c00136b5:	6b c0 28             	imul   eax,eax,0x28
c00136b8:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00136bc:	89 d0                	mov    eax,edx
c00136be:	31 d2                	xor    edx,edx
c00136c0:	52                   	push   edx
c00136c1:	50                   	push   eax
c00136c2:	53                   	push   ebx
c00136c3:	e8 32 76 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c00136c8:	83 c4 0c             	add    esp,0xc
c00136cb:	6a 20                	push   0x20
c00136cd:	6a 00                	push   0x0
c00136cf:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00136d3:	52                   	push   edx
c00136d4:	e8 e7 cd fe ff       	call   c00004c0 <memset>
c00136d9:	58                   	pop    eax
c00136da:	8b 03                	mov    eax,DWORD PTR [ebx]
c00136dc:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00136e0:	51                   	push   ecx
c00136e1:	8d 54 24 40          	lea    edx,[esp+0x40]
c00136e5:	52                   	push   edx
c00136e6:	6a 00                	push   0x0
c00136e8:	6a 1f                	push   0x1f
c00136ea:	53                   	push   ebx
c00136eb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00136ee:	83 c4 18             	add    esp,0x18
c00136f1:	68 85 07 02 c0       	push   0xc0020785
c00136f6:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00136fa:	52                   	push   edx
c00136fb:	e8 d0 cf fe ff       	call   c00006d0 <strcmp>
c0013700:	83 c4 10             	add    esp,0x10
c0013703:	85 c0                	test   eax,eax
c0013705:	75 0f                	jne    c0013716 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0013707:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001370a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001370e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013712:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013716:	50                   	push   eax
c0013717:	50                   	push   eax
c0013718:	68 8d 07 02 c0       	push   0xc002078d
c001371d:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0013721:	50                   	push   eax
c0013722:	e8 a9 cf fe ff       	call   c00006d0 <strcmp>
c0013727:	83 c4 10             	add    esp,0x10
c001372a:	85 c0                	test   eax,eax
c001372c:	75 0f                	jne    c001373d <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001372e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013731:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013735:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013739:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001373d:	45                   	inc    ebp
c001373e:	e9 4c ff ff ff       	jmp    c001368f <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0013743:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013748:	75 10                	jne    c001375a <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001374a:	83 ec 0c             	sub    esp,0xc
c001374d:	68 95 07 02 c0       	push   0xc0020795
c0013752:	e8 70 cc ff ff       	call   c00103c7 <KePanic(char const*)>
c0013757:	83 c4 10             	add    esp,0x10
c001375a:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001375f:	75 10                	jne    c0013771 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0013761:	83 ec 0c             	sub    esp,0xc
c0013764:	68 95 07 02 c0       	push   0xc0020795
c0013769:	e8 59 cc ff ff       	call   c00103c7 <KePanic(char const*)>
c001376e:	83 c4 10             	add    esp,0x10
c0013771:	31 d2                	xor    edx,edx
c0013773:	50                   	push   eax
c0013774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013778:	52                   	push   edx
c0013779:	50                   	push   eax
c001377a:	53                   	push   ebx
c001377b:	e8 7a 75 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c0013780:	5a                   	pop    edx
c0013781:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013785:	e8 db 40 ff ff       	call   c0007865 <malloc>
c001378a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001378e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013792:	31 c9                	xor    ecx,ecx
c0013794:	5e                   	pop    esi
c0013795:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013797:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001379b:	55                   	push   ebp
c001379c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137a0:	51                   	push   ecx
c00137a1:	52                   	push   edx
c00137a2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00137a6:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00137aa:	53                   	push   ebx
c00137ab:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00137ae:	83 c4 14             	add    esp,0x14
c00137b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00137b5:	e8 ab 40 ff ff       	call   c0007865 <malloc>
c00137ba:	89 c6                	mov    esi,eax
c00137bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137be:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00137c1:	56                   	push   esi
c00137c2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00137c6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00137ca:	51                   	push   ecx
c00137cb:	52                   	push   edx
c00137cc:	53                   	push   ebx
c00137cd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00137d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00137d4:	8b 15 40 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027140
c00137da:	83 c4 1c             	add    esp,0x1c
c00137dd:	c1 e8 04             	shr    eax,0x4
c00137e0:	89 04 95 c0 6f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9040],eax
c00137e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137eb:	31 d2                	xor    edx,edx
c00137ed:	52                   	push   edx
c00137ee:	50                   	push   eax
c00137ef:	53                   	push   ebx
c00137f0:	e8 05 75 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c00137f5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00137f7:	31 d2                	xor    edx,edx
c00137f9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00137fc:	56                   	push   esi
c00137fd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013801:	52                   	push   edx
c0013802:	50                   	push   eax
c0013803:	53                   	push   ebx
c0013804:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013807:	83 c4 14             	add    esp,0x14
c001380a:	53                   	push   ebx
c001380b:	e8 8a 74 ff ff       	call   c000ac9a <File::close()>
c0013810:	5d                   	pop    ebp
c0013811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013815:	e8 5b 40 ff ff       	call   c0007875 <free>
c001381a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001381d:	e8 53 40 ff ff       	call   c0007875 <free>
c0013822:	a1 40 71 02 c0       	mov    eax,ds:0xc0027140
c0013827:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001382b:	8d 50 01             	lea    edx,[eax+0x1]
c001382e:	89 0c 85 c0 70 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8f40],ecx
c0013835:	89 34 85 40 70 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8fc0],esi
c001383c:	89 15 40 71 02 c0    	mov    DWORD PTR ds:0xc0027140,edx
c0013842:	83 c4 10             	add    esp,0x10
c0013845:	b0 01                	mov    al,0x1
c0013847:	83 c4 5c             	add    esp,0x5c
c001384a:	5b                   	pop    ebx
c001384b:	5e                   	pop    esi
c001384c:	5f                   	pop    edi
c001384d:	5d                   	pop    ebp
c001384e:	c3                   	ret    

c001384f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001384f:	55                   	push   ebp
c0013850:	57                   	push   edi
c0013851:	56                   	push   esi
c0013852:	53                   	push   ebx
c0013853:	81 ec 68 03 00 00    	sub    esp,0x368
c0013859:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0013860:	8b 1d 90 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027190
c0013866:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001386a:	68 14 01 00 00       	push   0x114
c001386f:	e8 f1 3f ff ff       	call   c0007865 <malloc>
c0013874:	83 c4 0c             	add    esp,0xc
c0013877:	89 c5                	mov    ebp,eax
c0013879:	53                   	push   ebx
c001387a:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0013881:	50                   	push   eax
c0013882:	e8 f5 72 ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c0013887:	5e                   	pop    esi
c0013888:	5f                   	pop    edi
c0013889:	6a 01                	push   0x1
c001388b:	55                   	push   ebp
c001388c:	e8 ab 73 ff ff       	call   c000ac3c <File::open(FileOpenMode)>
c0013891:	83 c4 10             	add    esp,0x10
c0013894:	85 c0                	test   eax,eax
c0013896:	0f 85 a7 06 00 00    	jne    c0013f43 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001389c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00138a4:	83 ec 0c             	sub    esp,0xc
c00138a7:	6a 34                	push   0x34
c00138a9:	e8 b7 3f ff ff       	call   c0007865 <malloc>
c00138ae:	5b                   	pop    ebx
c00138af:	89 c7                	mov    edi,eax
c00138b1:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00138b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00138b8:	53                   	push   ebx
c00138b9:	57                   	push   edi
c00138ba:	6a 00                	push   0x0
c00138bc:	6a 34                	push   0x34
c00138be:	55                   	push   ebp
c00138bf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00138c2:	83 c4 20             	add    esp,0x20
c00138c5:	85 c0                	test   eax,eax
c00138c7:	0f 85 76 06 00 00    	jne    c0013f43 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00138cd:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00138d3:	0f 85 6a 06 00 00    	jne    c0013f43 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00138d9:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00138dc:	85 c0                	test   eax,eax
c00138de:	0f 84 5f 06 00 00    	je     c0013f43 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00138e4:	31 d2                	xor    edx,edx
c00138e6:	51                   	push   ecx
c00138e7:	52                   	push   edx
c00138e8:	50                   	push   eax
c00138e9:	55                   	push   ebp
c00138ea:	e8 0b 74 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c00138ef:	83 c4 10             	add    esp,0x10
c00138f2:	85 c0                	test   eax,eax
c00138f4:	0f 85 49 06 00 00    	jne    c0013f43 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00138fa:	83 ec 0c             	sub    esp,0xc
c00138fd:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0013900:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013904:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0013908:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001390c:	0f af c2             	imul   eax,edx
c001390f:	50                   	push   eax
c0013910:	e8 50 3f ff ff       	call   c0007865 <malloc>
c0013915:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013918:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001391c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001391f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013923:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013927:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001392b:	0f af c2             	imul   eax,edx
c001392e:	99                   	cdq    
c001392f:	52                   	push   edx
c0013930:	50                   	push   eax
c0013931:	55                   	push   ebp
c0013932:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013935:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0013938:	83 c4 20             	add    esp,0x20
c001393b:	85 c0                	test   eax,eax
c001393d:	0f 84 00 06 00 00    	je     c0013f43 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0013943:	52                   	push   edx
c0013944:	31 d2                	xor    edx,edx
c0013946:	52                   	push   edx
c0013947:	50                   	push   eax
c0013948:	55                   	push   ebp
c0013949:	e8 ac 73 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c001394e:	83 c4 10             	add    esp,0x10
c0013951:	85 c0                	test   eax,eax
c0013953:	0f 85 ea 05 00 00    	jne    c0013f43 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0013959:	83 ec 0c             	sub    esp,0xc
c001395c:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0013960:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0013964:	31 f6                	xor    esi,esi
c0013966:	0f af c2             	imul   eax,edx
c0013969:	50                   	push   eax
c001396a:	e8 f6 3e ff ff       	call   c0007865 <malloc>
c001396f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013972:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013976:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013979:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001397d:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0013981:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0013985:	0f af c2             	imul   eax,edx
c0013988:	99                   	cdq    
c0013989:	52                   	push   edx
c001398a:	50                   	push   eax
c001398b:	55                   	push   ebp
c001398c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001398f:	83 c4 20             	add    esp,0x20
c0013992:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0013996:	0f 86 8a 00 00 00    	jbe    c0013a26 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001399c:	0f b7 de             	movzx  ebx,si
c001399f:	c1 e3 05             	shl    ebx,0x5
c00139a2:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00139a6:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00139a9:	75 75                	jne    c0013a20 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00139ab:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00139ae:	31 d2                	xor    edx,edx
c00139b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00139b4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00139b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00139bb:	50                   	push   eax
c00139bc:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00139bf:	52                   	push   edx
c00139c0:	50                   	push   eax
c00139c1:	55                   	push   ebp
c00139c2:	e8 33 73 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c00139c7:	83 c4 10             	add    esp,0x10
c00139ca:	85 c0                	test   eax,eax
c00139cc:	0f 85 71 05 00 00    	jne    c0013f43 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00139d2:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00139d9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00139dc:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00139e0:	31 d2                	xor    edx,edx
c00139e2:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00139e6:	83 ec 0c             	sub    esp,0xc
c00139e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00139ed:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00139f4:	50                   	push   eax
c00139f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00139f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00139fd:	52                   	push   edx
c00139fe:	50                   	push   eax
c00139ff:	55                   	push   ebp
c0013a00:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013a03:	83 c4 1c             	add    esp,0x1c
c0013a06:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0013a09:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0013a0c:	50                   	push   eax
c0013a0d:	6a 00                	push   0x0
c0013a0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a13:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0013a17:	50                   	push   eax
c0013a18:	e8 a3 ca fe ff       	call   c00004c0 <memset>
c0013a1d:	83 c4 10             	add    esp,0x10
c0013a20:	46                   	inc    esi
c0013a21:	e9 6c ff ff ff       	jmp    c0013992 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0013a26:	53                   	push   ebx
c0013a27:	31 db                	xor    ebx,ebx
c0013a29:	68 00 01 00 00       	push   0x100
c0013a2e:	6a 00                	push   0x0
c0013a30:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0013a34:	50                   	push   eax
c0013a35:	e8 86 ca fe ff       	call   c00004c0 <memset>
c0013a3a:	83 c4 0c             	add    esp,0xc
c0013a3d:	68 00 01 00 00       	push   0x100
c0013a42:	6a 00                	push   0x0
c0013a44:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0013a4b:	50                   	push   eax
c0013a4c:	e8 6f ca fe ff       	call   c00004c0 <memset>
c0013a51:	83 c4 10             	add    esp,0x10
c0013a54:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013a5c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0013a64:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0013a6c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013a74:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013a7c:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0013a80:	0f 86 30 01 00 00    	jbe    c0013bb6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0013a86:	0f b7 f3             	movzx  esi,bx
c0013a89:	6b f6 28             	imul   esi,esi,0x28
c0013a8c:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0013a90:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013a93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013a97:	52                   	push   edx
c0013a98:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013a9c:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0013aa0:	8b 06                	mov    eax,DWORD PTR [esi]
c0013aa2:	6b d2 28             	imul   edx,edx,0x28
c0013aa5:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0013aa9:	31 d2                	xor    edx,edx
c0013aab:	52                   	push   edx
c0013aac:	50                   	push   eax
c0013aad:	55                   	push   ebp
c0013aae:	e8 47 72 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c0013ab3:	83 c4 0c             	add    esp,0xc
c0013ab6:	6a 20                	push   0x20
c0013ab8:	6a 00                	push   0x0
c0013aba:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0013ac1:	51                   	push   ecx
c0013ac2:	e8 f9 c9 fe ff       	call   c00004c0 <memset>
c0013ac7:	59                   	pop    ecx
c0013ac8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013acb:	8d 54 24 58          	lea    edx,[esp+0x58]
c0013acf:	52                   	push   edx
c0013ad0:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0013ad7:	51                   	push   ecx
c0013ad8:	6a 00                	push   0x0
c0013ada:	6a 1f                	push   0x1f
c0013adc:	55                   	push   ebp
c0013add:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013ae0:	83 c4 1c             	add    esp,0x1c
c0013ae3:	6a 09                	push   0x9
c0013ae5:	68 af 07 02 c0       	push   0xc00207af
c0013aea:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0013af1:	51                   	push   ecx
c0013af2:	e8 89 c8 fe ff       	call   c0000380 <memcmp>
c0013af7:	83 c4 10             	add    esp,0x10
c0013afa:	85 c0                	test   eax,eax
c0013afc:	75 21                	jne    c0013b1f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0013afe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b02:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013b06:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0013b0a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013b0e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013b11:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0013b18:	89 d0                	mov    eax,edx
c0013b1a:	40                   	inc    eax
c0013b1b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b1f:	50                   	push   eax
c0013b20:	6a 09                	push   0x9
c0013b22:	68 b9 07 02 c0       	push   0xc00207b9
c0013b27:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013b2e:	50                   	push   eax
c0013b2f:	e8 4c c8 fe ff       	call   c0000380 <memcmp>
c0013b34:	83 c4 10             	add    esp,0x10
c0013b37:	85 c0                	test   eax,eax
c0013b39:	75 21                	jne    c0013b5c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0013b3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b3f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013b43:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0013b47:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013b4b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013b4e:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0013b55:	89 d0                	mov    eax,edx
c0013b57:	40                   	inc    eax
c0013b58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b5c:	50                   	push   eax
c0013b5d:	50                   	push   eax
c0013b5e:	68 85 07 02 c0       	push   0xc0020785
c0013b63:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013b6a:	50                   	push   eax
c0013b6b:	e8 60 cb fe ff       	call   c00006d0 <strcmp>
c0013b70:	83 c4 10             	add    esp,0x10
c0013b73:	85 c0                	test   eax,eax
c0013b75:	75 0f                	jne    c0013b86 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0013b77:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013b7a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013b7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013b82:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013b86:	50                   	push   eax
c0013b87:	50                   	push   eax
c0013b88:	68 8d 07 02 c0       	push   0xc002078d
c0013b8d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013b94:	50                   	push   eax
c0013b95:	e8 36 cb fe ff       	call   c00006d0 <strcmp>
c0013b9a:	83 c4 10             	add    esp,0x10
c0013b9d:	85 c0                	test   eax,eax
c0013b9f:	75 0f                	jne    c0013bb0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0013ba1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013ba4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013bac:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0013bb0:	43                   	inc    ebx
c0013bb1:	e9 c6 fe ff ff       	jmp    c0013a7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0013bb6:	31 d2                	xor    edx,edx
c0013bb8:	50                   	push   eax
c0013bb9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013bbd:	52                   	push   edx
c0013bbe:	50                   	push   eax
c0013bbf:	55                   	push   ebp
c0013bc0:	e8 35 71 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c0013bc5:	58                   	pop    eax
c0013bc6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013bca:	e8 96 3c ff ff       	call   c0007865 <malloc>
c0013bcf:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013bd2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0013bd6:	31 d2                	xor    edx,edx
c0013bd8:	58                   	pop    eax
c0013bd9:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0013bdd:	53                   	push   ebx
c0013bde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0013be2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013be6:	52                   	push   edx
c0013be7:	50                   	push   eax
c0013be8:	55                   	push   ebp
c0013be9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013bec:	83 c4 14             	add    esp,0x14
c0013bef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013bf3:	e8 6d 3c ff ff       	call   c0007865 <malloc>
c0013bf8:	31 d2                	xor    edx,edx
c0013bfa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013bfe:	83 c4 0c             	add    esp,0xc
c0013c01:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013c05:	52                   	push   edx
c0013c06:	50                   	push   eax
c0013c07:	55                   	push   ebp
c0013c08:	e8 ed 70 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c0013c0d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013c10:	31 d2                	xor    edx,edx
c0013c12:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c15:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013c19:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013c1d:	52                   	push   edx
c0013c1e:	50                   	push   eax
c0013c1f:	55                   	push   ebp
c0013c20:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013c23:	83 c4 20             	add    esp,0x20
c0013c26:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013c2e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013c32:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0013c36:	0f 84 0b 03 00 00    	je     c0013f47 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0013c3c:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0013c43:	31 d2                	xor    edx,edx
c0013c45:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013c49:	c1 e8 03             	shr    eax,0x3
c0013c4c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0013c50:	51                   	push   ecx
c0013c51:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c55:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0013c59:	52                   	push   edx
c0013c5a:	50                   	push   eax
c0013c5b:	55                   	push   ebp
c0013c5c:	e8 99 70 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c0013c61:	5b                   	pop    ebx
c0013c62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c66:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0013c6d:	e8 f3 3b ff ff       	call   c0007865 <malloc>
c0013c72:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013c75:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013c79:	31 d2                	xor    edx,edx
c0013c7b:	5e                   	pop    esi
c0013c7c:	8d 44 24 58          	lea    eax,[esp+0x58]
c0013c80:	50                   	push   eax
c0013c81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c85:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013c89:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0013c90:	52                   	push   edx
c0013c91:	50                   	push   eax
c0013c92:	55                   	push   ebp
c0013c93:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013c96:	83 c4 20             	add    esp,0x20
c0013c99:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0013ca1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0013ca5:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0013ca9:	0f 8d 7c 02 00 00    	jge    c0013f2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0013caf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013cb3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013cb7:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0013cbc:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0013cbf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0013cc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013cc7:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0013ccb:	89 d8                	mov    eax,ebx
c0013ccd:	c1 e8 08             	shr    eax,0x8
c0013cd0:	89 c6                	mov    esi,eax
c0013cd2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013cd6:	c1 e6 04             	shl    esi,0x4
c0013cd9:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0013cdd:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0013ce0:	85 d2                	test   edx,edx
c0013ce2:	0f 85 bf 00 00 00    	jne    c0013da7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0013ce8:	83 ec 0c             	sub    esp,0xc
c0013ceb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013cef:	03 06                	add    eax,DWORD PTR [esi]
c0013cf1:	50                   	push   eax
c0013cf2:	e8 4b f8 ff ff       	call   c0013542 <Thr::getAddressOfKernelSymbol(char const*)>
c0013cf7:	83 c4 10             	add    esp,0x10
c0013cfa:	89 c2                	mov    edx,eax
c0013cfc:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0013d01:	85 c0                	test   eax,eax
c0013d03:	0f 85 9e 00 00 00    	jne    c0013da7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0013d09:	83 ec 0c             	sub    esp,0xc
c0013d0c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013d10:	03 06                	add    eax,DWORD PTR [esi]
c0013d12:	50                   	push   eax
c0013d13:	e8 00 c8 ff ff       	call   c0010518 <KeResolveCompatibilitySymbol(char*)>
c0013d18:	83 c4 10             	add    esp,0x10
c0013d1b:	89 c2                	mov    edx,eax
c0013d1d:	85 c0                	test   eax,eax
c0013d1f:	0f 85 82 00 00 00    	jne    c0013da7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0013d25:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0013d29:	50                   	push   eax
c0013d2a:	50                   	push   eax
c0013d2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d2f:	03 06                	add    eax,DWORD PTR [esi]
c0013d31:	50                   	push   eax
c0013d32:	68 c3 07 02 c0       	push   0xc00207c3
c0013d37:	e8 ca 68 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0013d3c:	58                   	pop    eax
c0013d3d:	5a                   	pop    edx
c0013d3e:	68 dd 07 02 c0       	push   0xc00207dd
c0013d43:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013d4a:	50                   	push   eax
c0013d4b:	e8 a0 c8 fe ff       	call   c00005f0 <strcpy>
c0013d50:	59                   	pop    ecx
c0013d51:	58                   	pop    eax
c0013d52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d56:	03 06                	add    eax,DWORD PTR [esi]
c0013d58:	50                   	push   eax
c0013d59:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013d60:	50                   	push   eax
c0013d61:	e8 4a ca fe ff       	call   c00007b0 <strcat>
c0013d66:	58                   	pop    eax
c0013d67:	5a                   	pop    edx
c0013d68:	68 73 08 02 c0       	push   0xc0020873
c0013d6d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013d74:	50                   	push   eax
c0013d75:	e8 36 ca fe ff       	call   c00007b0 <strcat>
c0013d7a:	83 c4 10             	add    esp,0x10
c0013d7d:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013d82:	0f 84 5d 01 00 00    	je     c0013ee5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0013d88:	83 ec 0c             	sub    esp,0xc
c0013d8b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013d92:	50                   	push   eax
c0013d93:	e8 2f c6 ff ff       	call   c00103c7 <KePanic(char const*)>
c0013d98:	83 c4 10             	add    esp,0x10
c0013d9b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0013d9f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013da3:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0013da7:	80 fb 01             	cmp    bl,0x1
c0013daa:	0f 85 88 00 00 00    	jne    c0013e38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0013db0:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0013db7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0013dbb:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0013dbf:	01 ce                	add    esi,ecx
c0013dc1:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0013dc7:	0f 94 c0             	sete   al
c0013dca:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0013dd0:	0f 94 c3             	sete   bl
c0013dd3:	09 c3                	or     ebx,eax
c0013dd5:	8b 06                	mov    eax,DWORD PTR [esi]
c0013dd7:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0013ddc:	74 41                	je     c0013e1f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0013dde:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0013de1:	84 db                	test   bl,bl
c0013de3:	75 15                	jne    c0013dfa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0013de5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013de9:	66 83 f8 0c          	cmp    ax,0xc
c0013ded:	76 05                	jbe    c0013df4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0013def:	b8 0c 00 00 00       	mov    eax,0xc
c0013df4:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0013df8:	76 37                	jbe    c0013e31 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0013dfa:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0013dfe:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013e03:	0f 84 dc 00 00 00    	je     c0013ee5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0013e09:	83 ec 0c             	sub    esp,0xc
c0013e0c:	68 f4 07 02 c0       	push   0xc00207f4
c0013e11:	e8 b1 c5 ff ff       	call   c00103c7 <KePanic(char const*)>
c0013e16:	83 c4 10             	add    esp,0x10
c0013e19:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013e1d:	eb 12                	jmp    c0013e31 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0013e1f:	01 c1                	add    ecx,eax
c0013e21:	84 db                	test   bl,bl
c0013e23:	75 0c                	jne    c0013e31 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0013e25:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013e29:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0013e2d:	77 02                	ja     c0013e31 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0013e2f:	01 d1                	add    ecx,edx
c0013e31:	89 0e                	mov    DWORD PTR [esi],ecx
c0013e33:	e9 ea 00 00 00       	jmp    c0013f22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0013e38:	80 fb 02             	cmp    bl,0x2
c0013e3b:	75 7c                	jne    c0013eb9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0013e3d:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0013e44:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0013e48:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0013e4c:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0013e52:	74 20                	je     c0013e74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0013e54:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0013e5a:	74 18                	je     c0013e74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0013e5c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013e60:	b9 0a 00 00 00       	mov    ecx,0xa
c0013e65:	66 83 f8 0e          	cmp    ax,0xe
c0013e69:	77 03                	ja     c0013e6e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0013e6b:	8d 48 fc             	lea    ecx,[eax-0x4]
c0013e6e:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0013e72:	76 1f                	jbe    c0013e93 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0013e74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0013e78:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013e7d:	74 66                	je     c0013ee5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0013e7f:	83 ec 0c             	sub    esp,0xc
c0013e82:	68 10 08 02 c0       	push   0xc0020810
c0013e87:	e8 3b c5 ff ff       	call   c00103c7 <KePanic(char const*)>
c0013e8c:	83 c4 10             	add    esp,0x10
c0013e8f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013e93:	8b 06                	mov    eax,DWORD PTR [esi]
c0013e95:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0013e9a:	74 13                	je     c0013eaf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0013e9c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0013ea0:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0013ea7:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0013eab:	01 c8                	add    eax,ecx
c0013ead:	eb 04                	jmp    c0013eb3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0013eaf:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0013eb3:	01 c2                	add    edx,eax
c0013eb5:	89 16                	mov    DWORD PTR [esi],edx
c0013eb7:	eb 69                	jmp    c0013f22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0013eb9:	0f b6 db             	movzx  ebx,bl
c0013ebc:	50                   	push   eax
c0013ebd:	50                   	push   eax
c0013ebe:	53                   	push   ebx
c0013ebf:	68 2c 08 02 c0       	push   0xc002082c
c0013ec4:	e8 3d 67 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0013ec9:	83 c4 10             	add    esp,0x10
c0013ecc:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013ed1:	74 12                	je     c0013ee5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0013ed3:	83 ec 0c             	sub    esp,0xc
c0013ed6:	68 37 08 02 c0       	push   0xc0020837
c0013edb:	e8 e7 c4 ff ff       	call   c00103c7 <KePanic(char const*)>
c0013ee0:	83 c4 10             	add    esp,0x10
c0013ee3:	eb 3d                	jmp    c0013f22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0013ee5:	83 ec 0c             	sub    esp,0xc
c0013ee8:	55                   	push   ebp
c0013ee9:	e8 ac 6d ff ff       	call   c000ac9a <File::close()>
c0013eee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013ef1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013ef4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013ef7:	59                   	pop    ecx
c0013ef8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013efc:	e8 74 39 ff ff       	call   c0007875 <free>
c0013f01:	5b                   	pop    ebx
c0013f02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013f06:	e8 6a 39 ff ff       	call   c0007875 <free>
c0013f0b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013f0e:	e8 62 39 ff ff       	call   c0007875 <free>
c0013f13:	5e                   	pop    esi
c0013f14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f18:	e8 58 39 ff ff       	call   c0007875 <free>
c0013f1d:	83 c4 10             	add    esp,0x10
c0013f20:	eb 21                	jmp    c0013f43 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0013f22:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0013f26:	e9 76 fd ff ff       	jmp    c0013ca1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0013f2b:	83 ec 0c             	sub    esp,0xc
c0013f2e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f32:	e8 3e 39 ff ff       	call   c0007875 <free>
c0013f37:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0013f3b:	83 c4 10             	add    esp,0x10
c0013f3e:	e9 eb fc ff ff       	jmp    c0013c2e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0013f43:	31 c0                	xor    eax,eax
c0013f45:	eb 33                	jmp    c0013f7a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0013f47:	83 ec 0c             	sub    esp,0xc
c0013f4a:	55                   	push   ebp
c0013f4b:	e8 4a 6d ff ff       	call   c000ac9a <File::close()>
c0013f50:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013f53:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013f56:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013f59:	58                   	pop    eax
c0013f5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013f5e:	e8 12 39 ff ff       	call   c0007875 <free>
c0013f63:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013f66:	e8 0a 39 ff ff       	call   c0007875 <free>
c0013f6b:	5a                   	pop    edx
c0013f6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f70:	e8 00 39 ff ff       	call   c0007875 <free>
c0013f75:	83 c4 10             	add    esp,0x10
c0013f78:	b0 01                	mov    al,0x1
c0013f7a:	81 c4 5c 03 00 00    	add    esp,0x35c
c0013f80:	5b                   	pop    ebx
c0013f81:	5e                   	pop    esi
c0013f82:	5f                   	pop    edi
c0013f83:	5d                   	pop    ebp
c0013f84:	c3                   	ret    

c0013f85 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0013f85:	56                   	push   esi
c0013f86:	31 d2                	xor    edx,edx
c0013f88:	53                   	push   ebx
c0013f89:	8b 1d a0 69 02 c0    	mov    ebx,DWORD PTR ds:0xc00269a0
c0013f8f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013f93:	39 d3                	cmp    ebx,edx
c0013f95:	7e 1b                	jle    c0013fb2 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0013f97:	8b 04 95 c0 6b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9440]
c0013f9e:	39 c8                	cmp    eax,ecx
c0013fa0:	77 0d                	ja     c0013faf <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0013fa2:	8b 34 95 c0 69 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd9640]
c0013fa9:	01 c6                	add    esi,eax
c0013fab:	39 ce                	cmp    esi,ecx
c0013fad:	77 05                	ja     c0013fb4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0013faf:	42                   	inc    edx
c0013fb0:	eb e1                	jmp    c0013f93 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0013fb2:	31 c0                	xor    eax,eax
c0013fb4:	5b                   	pop    ebx
c0013fb5:	5e                   	pop    esi
c0013fb6:	c3                   	ret    

c0013fb7 <Thr::getDriverNameFromAddress(unsigned long)>:
c0013fb7:	53                   	push   ebx
c0013fb8:	31 c0                	xor    eax,eax
c0013fba:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013fbe:	8b 1d a0 69 02 c0    	mov    ebx,DWORD PTR ds:0xc00269a0
c0013fc4:	39 c3                	cmp    ebx,eax
c0013fc6:	7e 22                	jle    c0013fea <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0013fc8:	8b 14 85 c0 6b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9440]
c0013fcf:	39 ca                	cmp    edx,ecx
c0013fd1:	77 14                	ja     c0013fe7 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0013fd3:	03 14 85 c0 69 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd9640]
c0013fda:	39 ca                	cmp    edx,ecx
c0013fdc:	76 09                	jbe    c0013fe7 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0013fde:	8b 04 85 c0 6d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9240]
c0013fe5:	eb 05                	jmp    c0013fec <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0013fe7:	40                   	inc    eax
c0013fe8:	eb da                	jmp    c0013fc4 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0013fea:	31 c0                	xor    eax,eax
c0013fec:	5b                   	pop    ebx
c0013fed:	c3                   	ret    

c0013fee <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0013fee:	53                   	push   ebx
c0013fef:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0013ff3:	53                   	push   ebx
c0013ff4:	e8 8c ff ff ff       	call   c0013f85 <Thr::getDriverBaseFromAddress(unsigned long)>
c0013ff9:	5a                   	pop    edx
c0013ffa:	31 d2                	xor    edx,edx
c0013ffc:	85 c0                	test   eax,eax
c0013ffe:	74 04                	je     c0014004 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0014000:	89 da                	mov    edx,ebx
c0014002:	29 c2                	sub    edx,eax
c0014004:	89 d0                	mov    eax,edx
c0014006:	5b                   	pop    ebx
c0014007:	c3                   	ret    

c0014008 <Thr::loadDLL(char const*, bool)>:
c0014008:	55                   	push   ebp
c0014009:	57                   	push   edi
c001400a:	56                   	push   esi
c001400b:	53                   	push   ebx
c001400c:	81 ec 34 01 00 00    	sub    esp,0x134
c0014012:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0014019:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0014020:	56                   	push   esi
c0014021:	68 4f 08 02 c0       	push   0xc002084f
c0014026:	e8 db 65 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c001402b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014032:	e8 2e 38 ff ff       	call   c0007865 <malloc>
c0014037:	83 c4 0c             	add    esp,0xc
c001403a:	89 c3                	mov    ebx,eax
c001403c:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0014042:	56                   	push   esi
c0014043:	50                   	push   eax
c0014044:	e8 33 6b ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c0014049:	83 c4 10             	add    esp,0x10
c001404c:	85 db                	test   ebx,ebx
c001404e:	75 3c                	jne    c001408c <Thr::loadDLL(char const*, bool)+0x84>
c0014050:	89 f8                	mov    eax,edi
c0014052:	84 c0                	test   al,al
c0014054:	0f 84 d2 01 00 00    	je     c001422c <Thr::loadDLL(char const*, bool)+0x224>
c001405a:	55                   	push   ebp
c001405b:	55                   	push   ebp
c001405c:	68 60 08 02 c0       	push   0xc0020860
c0014061:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0014065:	55                   	push   ebp
c0014066:	e8 85 c5 fe ff       	call   c00005f0 <strcpy>
c001406b:	58                   	pop    eax
c001406c:	5a                   	pop    edx
c001406d:	56                   	push   esi
c001406e:	55                   	push   ebp
c001406f:	e8 3c c7 fe ff       	call   c00007b0 <strcat>
c0014074:	59                   	pop    ecx
c0014075:	58                   	pop    eax
c0014076:	68 73 08 02 c0       	push   0xc0020873
c001407b:	55                   	push   ebp
c001407c:	e8 2f c7 fe ff       	call   c00007b0 <strcat>
c0014081:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014084:	e8 3e c3 ff ff       	call   c00103c7 <KePanic(char const*)>
c0014089:	83 c4 10             	add    esp,0x10
c001408c:	51                   	push   ecx
c001408d:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0014091:	50                   	push   eax
c0014092:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014096:	50                   	push   eax
c0014097:	53                   	push   ebx
c0014098:	e8 4b 6e ff ff       	call   c000aee8 <File::stat(unsigned long long*, bool*)>
c001409d:	83 c4 10             	add    esp,0x10
c00140a0:	85 db                	test   ebx,ebx
c00140a2:	74 0c                	je     c00140b0 <Thr::loadDLL(char const*, bool)+0xa8>
c00140a4:	83 ec 0c             	sub    esp,0xc
c00140a7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140a9:	53                   	push   ebx
c00140aa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00140ad:	83 c4 10             	add    esp,0x10
c00140b0:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00140b5:	75 0a                	jne    c00140c1 <Thr::loadDLL(char const*, bool)+0xb9>
c00140b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00140bb:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00140bf:	75 3c                	jne    c00140fd <Thr::loadDLL(char const*, bool)+0xf5>
c00140c1:	89 f8                	mov    eax,edi
c00140c3:	84 c0                	test   al,al
c00140c5:	0f 84 49 01 00 00    	je     c0014214 <Thr::loadDLL(char const*, bool)+0x20c>
c00140cb:	51                   	push   ecx
c00140cc:	51                   	push   ecx
c00140cd:	68 60 08 02 c0       	push   0xc0020860
c00140d2:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00140d6:	53                   	push   ebx
c00140d7:	e8 14 c5 fe ff       	call   c00005f0 <strcpy>
c00140dc:	5d                   	pop    ebp
c00140dd:	58                   	pop    eax
c00140de:	56                   	push   esi
c00140df:	53                   	push   ebx
c00140e0:	e8 cb c6 fe ff       	call   c00007b0 <strcat>
c00140e5:	58                   	pop    eax
c00140e6:	5a                   	pop    edx
c00140e7:	68 73 08 02 c0       	push   0xc0020873
c00140ec:	53                   	push   ebx
c00140ed:	e8 be c6 fe ff       	call   c00007b0 <strcat>
c00140f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00140f5:	e8 cd c2 ff ff       	call   c00103c7 <KePanic(char const*)>
c00140fa:	83 c4 10             	add    esp,0x10
c00140fd:	52                   	push   edx
c00140fe:	6a 03                	push   0x3
c0014100:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014104:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014108:	05 ff 0f 00 00       	add    eax,0xfff
c001410d:	83 d2 00             	adc    edx,0x0
c0014110:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014114:	50                   	push   eax
c0014115:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c001411b:	e8 f0 59 ff ff       	call   c0009b10 <VAS::allocatePages(int, int)>
c0014120:	59                   	pop    ecx
c0014121:	89 c3                	mov    ebx,eax
c0014123:	5d                   	pop    ebp
c0014124:	50                   	push   eax
c0014125:	68 f2 f3 01 c0       	push   0xc001f3f2
c001412a:	e8 d7 64 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c001412f:	89 34 24             	mov    DWORD PTR [esp],esi
c0014132:	e8 f9 c3 fe ff       	call   c0000530 <strlen>
c0014137:	8b 2d a0 69 02 c0    	mov    ebp,DWORD PTR ds:0xc00269a0
c001413d:	40                   	inc    eax
c001413e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014141:	e8 1f 37 ff ff       	call   c0007865 <malloc>
c0014146:	89 04 ad c0 6d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd9240],eax
c001414d:	58                   	pop    eax
c001414e:	a1 a0 69 02 c0       	mov    eax,ds:0xc00269a0
c0014153:	5a                   	pop    edx
c0014154:	56                   	push   esi
c0014155:	ff 34 85 c0 6d 02 c0 	push   DWORD PTR [eax*4-0x3ffd9240]
c001415c:	e8 8f c4 fe ff       	call   c00005f0 <strcpy>
c0014161:	a1 a0 69 02 c0       	mov    eax,ds:0xc00269a0
c0014166:	8d 50 01             	lea    edx,[eax+0x1]
c0014169:	89 1c 85 c0 6b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9440],ebx
c0014170:	89 15 a0 69 02 c0    	mov    DWORD PTR ds:0xc00269a0,edx
c0014176:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001417a:	83 c4 0c             	add    esp,0xc
c001417d:	89 14 85 c0 69 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9640],edx
c0014184:	6a 01                	push   0x1
c0014186:	53                   	push   ebx
c0014187:	56                   	push   esi
c0014188:	e8 c2 f6 ff ff       	call   c001384f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001418d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0014191:	83 c4 10             	add    esp,0x10
c0014194:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0014199:	0f 85 89 00 00 00    	jne    c0014228 <Thr::loadDLL(char const*, bool)+0x220>
c001419f:	89 f8                	mov    eax,edi
c00141a1:	84 c0                	test   al,al
c00141a3:	74 73                	je     c0014218 <Thr::loadDLL(char const*, bool)+0x210>
c00141a5:	83 ec 0c             	sub    esp,0xc
c00141a8:	68 75 08 02 c0       	push   0xc0020875
c00141ad:	e8 15 c2 ff ff       	call   c00103c7 <KePanic(char const*)>
c00141b2:	83 c4 10             	add    esp,0x10
c00141b5:	eb 61                	jmp    c0014218 <Thr::loadDLL(char const*, bool)+0x210>
c00141b7:	50                   	push   eax
c00141b8:	50                   	push   eax
c00141b9:	89 e8                	mov    eax,ebp
c00141bb:	c1 e0 0c             	shl    eax,0xc
c00141be:	01 d8                	add    eax,ebx
c00141c0:	50                   	push   eax
c00141c1:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c00141c7:	e8 52 54 ff ff       	call   c000961e <VAS::getPageTableEntry(unsigned long)>
c00141cc:	83 c4 10             	add    esp,0x10
c00141cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00141d1:	a8 60                	test   al,0x60
c00141d3:	75 11                	jne    c00141e6 <Thr::loadDLL(char const*, bool)+0x1de>
c00141d5:	83 ec 0c             	sub    esp,0xc
c00141d8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00141dd:	50                   	push   eax
c00141de:	e8 fc 38 ff ff       	call   c0007adf <Phys::freePage(unsigned long)>
c00141e3:	83 c4 10             	add    esp,0x10
c00141e6:	45                   	inc    ebp
c00141e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00141eb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00141ef:	05 ff 0f 00 00       	add    eax,0xfff
c00141f4:	bf 00 00 00 00       	mov    edi,0x0
c00141f9:	83 d2 00             	adc    edx,0x0
c00141fc:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014200:	c1 ea 0c             	shr    edx,0xc
c0014203:	39 c5                	cmp    ebp,eax
c0014205:	89 d1                	mov    ecx,edx
c0014207:	89 f8                	mov    eax,edi
c0014209:	19 c8                	sbb    eax,ecx
c001420b:	72 aa                	jb     c00141b7 <Thr::loadDLL(char const*, bool)+0x1af>
c001420d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0014212:	75 18                	jne    c001422c <Thr::loadDLL(char const*, bool)+0x224>
c0014214:	31 db                	xor    ebx,ebx
c0014216:	eb 14                	jmp    c001422c <Thr::loadDLL(char const*, bool)+0x224>
c0014218:	83 ec 0c             	sub    esp,0xc
c001421b:	68 94 08 02 c0       	push   0xc0020894
c0014220:	e8 a2 c1 ff ff       	call   c00103c7 <KePanic(char const*)>
c0014225:	83 c4 10             	add    esp,0x10
c0014228:	31 ed                	xor    ebp,ebp
c001422a:	eb bb                	jmp    c00141e7 <Thr::loadDLL(char const*, bool)+0x1df>
c001422c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014232:	89 d8                	mov    eax,ebx
c0014234:	5b                   	pop    ebx
c0014235:	5e                   	pop    esi
c0014236:	5f                   	pop    edi
c0014237:	5d                   	pop    ebp
c0014238:	c3                   	ret    

c0014239 <Thr::executeDLL(unsigned long, void*)>:
c0014239:	56                   	push   esi
c001423a:	53                   	push   ebx
c001423b:	52                   	push   edx
c001423c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014240:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014244:	85 db                	test   ebx,ebx
c0014246:	75 10                	jne    c0014258 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0014248:	83 ec 0c             	sub    esp,0xc
c001424b:	68 b0 08 02 c0       	push   0xc00208b0
c0014250:	e8 72 c1 ff ff       	call   c00103c7 <KePanic(char const*)>
c0014255:	83 c4 10             	add    esp,0x10
c0014258:	50                   	push   eax
c0014259:	50                   	push   eax
c001425a:	53                   	push   ebx
c001425b:	68 da 08 02 c0       	push   0xc00208da
c0014260:	e8 a1 63 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0014265:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0014269:	89 d8                	mov    eax,ebx
c001426b:	83 c4 14             	add    esp,0x14
c001426e:	5b                   	pop    ebx
c001426f:	5e                   	pop    esi
c0014270:	ff e0                	jmp    eax
c0014272:	66 90                	xchg   ax,ax

c0014274 <userModeEntryPoint(void*)>:
c0014274:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014279:	48                   	dec    eax
c001427a:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001427f:	75 03                	jne    c0014284 <userModeEntryPoint(void*)+0x10>
c0014281:	fb                   	sti    
c0014282:	66 90                	xchg   ax,ax
c0014284:	fb                   	sti    
c0014285:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001428a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001428d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0014293:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014297:	e9 a3 bf fe ff       	jmp    c000023f <goToUsermode>

c001429c <changeTSS>:
c001429c:	83 ec 14             	sub    esp,0x14
c001429f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00142a4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00142a7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00142ac:	c1 e2 15             	shl    edx,0x15
c00142af:	29 d0                	sub    eax,edx
c00142b1:	50                   	push   eax
c00142b2:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c00142b7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00142bd:	05 7c 11 00 00       	add    eax,0x117c
c00142c2:	50                   	push   eax
c00142c3:	e8 d4 49 ff ff       	call   c0008c9c <TSS::setESP(unsigned long)>
c00142c8:	83 c4 1c             	add    esp,0x1c
c00142cb:	c3                   	ret    

c00142cc <switchToThread(ThreadControlBlock*)>:
c00142cc:	57                   	push   edi
c00142cd:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c00142d2:	56                   	push   esi
c00142d3:	85 c0                	test   eax,eax
c00142d5:	53                   	push   ebx
c00142d6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00142da:	0f 85 90 00 00 00    	jne    c0014370 <switchToThread(ThreadControlBlock*)+0xa4>
c00142e0:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c00142e3:	80 fa ff             	cmp    dl,0xff
c00142e6:	0f 84 80 00 00 00    	je     c001436c <switchToThread(ThreadControlBlock*)+0xa0>
c00142ec:	81 e2 ff 00 00 00    	and    edx,0xff
c00142f2:	b8 00 04 00 00       	mov    eax,0x400
c00142f7:	29 d0                	sub    eax,edx
c00142f9:	d1 f8                	sar    eax,1
c00142fb:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c00142fe:	66 90                	xchg   ax,ax
c0014300:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0014303:	e8 80 26 00 00       	call   c0016988 <HalQueryPerformanceCounter()>
c0014308:	a3 a8 71 02 c0       	mov    ds:0xc00271a8,eax
c001430d:	89 15 ac 71 02 c0    	mov    DWORD PTR ds:0xc00271ac,edx
c0014313:	89 c6                	mov    esi,eax
c0014315:	89 d7                	mov    edi,edx
c0014317:	2b 35 98 71 02 c0    	sub    esi,DWORD PTR ds:0xc0027198
c001431d:	a3 98 71 02 c0       	mov    ds:0xc0027198,eax
c0014322:	1b 3d 9c 71 02 c0    	sbb    edi,DWORD PTR ds:0xc002719c
c0014328:	89 35 a0 71 02 c0    	mov    DWORD PTR ds:0xc00271a0,esi
c001432e:	89 3d a4 71 02 c0    	mov    DWORD PTR ds:0xc00271a4,edi
c0014334:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001433a:	89 15 9c 71 02 c0    	mov    DWORD PTR ds:0xc002719c,edx
c0014340:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0014343:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0014346:	01 c6                	add    esi,eax
c0014348:	11 d7                	adc    edi,edx
c001434a:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c001434d:	83 ec 0c             	sub    esp,0xc
c0014350:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0014353:	53                   	push   ebx
c0014354:	e8 1e bf fe ff       	call   c0000277 <switchToThreadASM>
c0014359:	0f 20 c0             	mov    eax,cr0
c001435c:	83 c8 08             	or     eax,0x8
c001435f:	0f 22 c0             	mov    cr0,eax
c0014362:	83 c4 10             	add    esp,0x10
c0014365:	5b                   	pop    ebx
c0014366:	5e                   	pop    esi
c0014367:	5f                   	pop    edi
c0014368:	c3                   	ret    
c0014369:	8d 76 00             	lea    esi,[esi+0x0]
c001436c:	31 c0                	xor    eax,eax
c001436e:	eb 90                	jmp    c0014300 <switchToThread(ThreadControlBlock*)+0x34>
c0014370:	5b                   	pop    ebx
c0014371:	c7 05 60 71 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x1
c001437b:	5e                   	pop    esi
c001437c:	5f                   	pop    edi
c001437d:	c3                   	ret    
c001437e:	66 90                	xchg   ax,ax

c0014380 <Process::addArgs(char**)>:
c0014380:	57                   	push   edi
c0014381:	56                   	push   esi
c0014382:	53                   	push   ebx
c0014383:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014387:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001438b:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0014395:	85 ff                	test   edi,edi
c0014397:	74 43                	je     c00143dc <Process::addArgs(char**)+0x5c>
c0014399:	8b 07                	mov    eax,DWORD PTR [edi]
c001439b:	85 c0                	test   eax,eax
c001439d:	74 3d                	je     c00143dc <Process::addArgs(char**)+0x5c>
c001439f:	31 db                	xor    ebx,ebx
c00143a1:	8d 76 00             	lea    esi,[esi+0x0]
c00143a4:	83 ec 0c             	sub    esp,0xc
c00143a7:	50                   	push   eax
c00143a8:	e8 83 c1 fe ff       	call   c0000530 <strlen>
c00143ad:	40                   	inc    eax
c00143ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00143b1:	e8 af 34 ff ff       	call   c0007865 <malloc>
c00143b6:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00143bd:	5a                   	pop    edx
c00143be:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00143c1:	59                   	pop    ecx
c00143c2:	43                   	inc    ebx
c00143c3:	52                   	push   edx
c00143c4:	50                   	push   eax
c00143c5:	e8 26 c2 fe ff       	call   c00005f0 <strcpy>
c00143ca:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c00143d0:	83 c4 10             	add    esp,0x10
c00143d3:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00143d6:	85 c0                	test   eax,eax
c00143d8:	75 ca                	jne    c00143a4 <Process::addArgs(char**)+0x24>
c00143da:	66 90                	xchg   ax,ax
c00143dc:	5b                   	pop    ebx
c00143dd:	5e                   	pop    esi
c00143de:	5f                   	pop    edi
c00143df:	c3                   	ret    

c00143e0 <Process::Process(char const*, Process*, char**)>:
c00143e0:	56                   	push   esi
c00143e1:	53                   	push   ebx
c00143e2:	83 ec 14             	sub    esp,0x14
c00143e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143e9:	05 0c 02 00 00       	add    eax,0x20c
c00143ee:	bb 07 00 00 00       	mov    ebx,0x7
c00143f3:	89 c6                	mov    esi,eax
c00143f5:	8d 76 00             	lea    esi,[esi+0x0]
c00143f8:	85 db                	test   ebx,ebx
c00143fa:	78 14                	js     c0014410 <Process::Process(char const*, Process*, char**)+0x30>
c00143fc:	83 ec 0c             	sub    esp,0xc
c00143ff:	56                   	push   esi
c0014400:	e8 6f a2 00 00       	call   c001e674 <ThreadControlBlock::ThreadControlBlock()>
c0014405:	83 c4 10             	add    esp,0x10
c0014408:	83 c6 5f             	add    esi,0x5f
c001440b:	4b                   	dec    ebx
c001440c:	eb ea                	jmp    c00143f8 <Process::Process(char const*, Process*, char**)+0x18>
c001440e:	66 90                	xchg   ax,ax
c0014410:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014414:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001441b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001441f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014426:	83 ec 0c             	sub    esp,0xc
c0014429:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001442d:	e8 8a bd ff ff       	call   c00101bc <Krnl::newProcessEnv(Process*)>
c0014432:	83 c4 10             	add    esp,0x10
c0014435:	89 c2                	mov    edx,eax
c0014437:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001443b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014441:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014445:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001444e:	a1 a0 1a 02 c0       	mov    eax,ds:0xc0021aa0
c0014453:	8d 50 01             	lea    edx,[eax+0x1]
c0014456:	89 15 a0 1a 02 c0    	mov    DWORD PTR ds:0xc0021aa0,edx
c001445c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014460:	89 02                	mov    DWORD PTR [edx],eax
c0014462:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001446a:	83 ec 0c             	sub    esp,0xc
c001446d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014471:	e8 ef 33 ff ff       	call   c0007865 <malloc>
c0014476:	83 c4 10             	add    esp,0x10
c0014479:	89 c3                	mov    ebx,eax
c001447b:	83 ec 08             	sub    esp,0x8
c001447e:	6a 00                	push   0x0
c0014480:	53                   	push   ebx
c0014481:	e8 34 5a ff ff       	call   c0009eba <VAS::VAS(bool)>
c0014486:	83 c4 10             	add    esp,0x10
c0014489:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001448d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014493:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014497:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00144a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00144a9:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00144af:	e8 66 c2 ff ff       	call   c001071a <KeInitSignals()>
c00144b4:	89 c2                	mov    edx,eax
c00144b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144ba:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00144c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144c4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00144ca:	85 c0                	test   eax,eax
c00144cc:	74 42                	je     c0014510 <Process::Process(char const*, Process*, char**)+0x130>
c00144ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144d2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00144d8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00144de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144e2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00144e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144ec:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00144f2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00144f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144fc:	05 0c 01 00 00       	add    eax,0x10c
c0014501:	83 ec 08             	sub    esp,0x8
c0014504:	52                   	push   edx
c0014505:	50                   	push   eax
c0014506:	e8 e5 c0 fe ff       	call   c00005f0 <strcpy>
c001450b:	83 c4 10             	add    esp,0x10
c001450e:	eb 64                	jmp    c0014574 <Process::Process(char const*, Process*, char**)+0x194>
c0014510:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0014518:	83 ec 0c             	sub    esp,0xc
c001451b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001451f:	e8 41 33 ff ff       	call   c0007865 <malloc>
c0014524:	83 c4 10             	add    esp,0x10
c0014527:	89 c3                	mov    ebx,eax
c0014529:	83 ec 08             	sub    esp,0x8
c001452c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014530:	53                   	push   ebx
c0014531:	e8 6a 44 ff ff       	call   c00089a0 <VgaText::VgaText(char const*)>
c0014536:	83 c4 10             	add    esp,0x10
c0014539:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001453d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014543:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014547:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001454d:	83 ec 0c             	sub    esp,0xc
c0014550:	50                   	push   eax
c0014551:	e8 f0 3c ff ff       	call   c0008246 <addToTerminalCycle(VgaText*)>
c0014556:	83 c4 10             	add    esp,0x10
c0014559:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001455d:	05 0c 01 00 00       	add    eax,0x10c
c0014562:	83 ec 08             	sub    esp,0x8
c0014565:	68 f9 08 02 c0       	push   0xc00208f9
c001456a:	50                   	push   eax
c001456b:	e8 80 c0 fe ff       	call   c00005f0 <strcpy>
c0014570:	83 c4 10             	add    esp,0x10
c0014573:	90                   	nop
c0014574:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014578:	83 c0 0c             	add    eax,0xc
c001457b:	83 ec 08             	sub    esp,0x8
c001457e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014582:	50                   	push   eax
c0014583:	e8 68 c0 fe ff       	call   c00005f0 <strcpy>
c0014588:	83 c4 10             	add    esp,0x10
c001458b:	83 ec 08             	sub    esp,0x8
c001458e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0014592:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014596:	e8 e5 fd ff ff       	call   c0014380 <Process::addArgs(char**)>
c001459b:	83 c4 10             	add    esp,0x10
c001459e:	83 ec 08             	sub    esp,0x8
c00145a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00145a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00145a9:	e8 6b ed ff ff       	call   c0013319 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00145ae:	83 c4 10             	add    esp,0x10
c00145b1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00145b5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00145b9:	83 f0 01             	xor    eax,0x1
c00145bc:	88 c2                	mov    dl,al
c00145be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145c2:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00145c8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00145cc:	25 ff 00 00 00       	and    eax,0xff
c00145d1:	83 ec 08             	sub    esp,0x8
c00145d4:	50                   	push   eax
c00145d5:	68 50 09 02 c0       	push   0xc0020950
c00145da:	e8 27 60 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c00145df:	83 c4 10             	add    esp,0x10
c00145e2:	90                   	nop
c00145e3:	83 c4 14             	add    esp,0x14
c00145e6:	5b                   	pop    ebx
c00145e7:	5e                   	pop    esi
c00145e8:	c3                   	ret    
c00145e9:	90                   	nop
c00145ea:	66 90                	xchg   ax,ax

c00145ec <Process::Process(bool, char const*, Process*, char**)>:
c00145ec:	56                   	push   esi
c00145ed:	53                   	push   ebx
c00145ee:	83 ec 24             	sub    esp,0x24
c00145f1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00145f5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00145f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00145fd:	05 0c 02 00 00       	add    eax,0x20c
c0014602:	bb 07 00 00 00       	mov    ebx,0x7
c0014607:	89 c6                	mov    esi,eax
c0014609:	8d 76 00             	lea    esi,[esi+0x0]
c001460c:	85 db                	test   ebx,ebx
c001460e:	78 14                	js     c0014624 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0014610:	83 ec 0c             	sub    esp,0xc
c0014613:	56                   	push   esi
c0014614:	e8 5b a0 00 00       	call   c001e674 <ThreadControlBlock::ThreadControlBlock()>
c0014619:	83 c4 10             	add    esp,0x10
c001461c:	83 c6 5f             	add    esi,0x5f
c001461f:	4b                   	dec    ebx
c0014620:	eb ea                	jmp    c001460c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0014622:	66 90                	xchg   ax,ax
c0014624:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014628:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001462f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014633:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001463a:	83 ec 0c             	sub    esp,0xc
c001463d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014641:	e8 76 bb ff ff       	call   c00101bc <Krnl::newProcessEnv(Process*)>
c0014646:	83 c4 10             	add    esp,0x10
c0014649:	89 c2                	mov    edx,eax
c001464b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001464f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014655:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014659:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014662:	a1 a0 1a 02 c0       	mov    eax,ds:0xc0021aa0
c0014667:	8d 50 01             	lea    edx,[eax+0x1]
c001466a:	89 15 a0 1a 02 c0    	mov    DWORD PTR ds:0xc0021aa0,edx
c0014670:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014674:	89 02                	mov    DWORD PTR [edx],eax
c0014676:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001467e:	83 ec 0c             	sub    esp,0xc
c0014681:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014685:	e8 db 31 ff ff       	call   c0007865 <malloc>
c001468a:	83 c4 10             	add    esp,0x10
c001468d:	89 c3                	mov    ebx,eax
c001468f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0014693:	25 ff 00 00 00       	and    eax,0xff
c0014698:	83 ec 08             	sub    esp,0x8
c001469b:	50                   	push   eax
c001469c:	53                   	push   ebx
c001469d:	e8 18 58 ff ff       	call   c0009eba <VAS::VAS(bool)>
c00146a2:	83 c4 10             	add    esp,0x10
c00146a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00146a9:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00146af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00146b3:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00146bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00146c1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00146c5:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00146cb:	e8 4a c0 ff ff       	call   c001071a <KeInitSignals()>
c00146d0:	89 c2                	mov    edx,eax
c00146d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00146d6:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00146dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00146e0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00146e6:	85 c0                	test   eax,eax
c00146e8:	74 42                	je     c001472c <Process::Process(bool, char const*, Process*, char**)+0x140>
c00146ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00146ee:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00146f4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00146fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00146fe:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014704:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014708:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001470e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014714:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014718:	05 0c 01 00 00       	add    eax,0x10c
c001471d:	83 ec 08             	sub    esp,0x8
c0014720:	52                   	push   edx
c0014721:	50                   	push   eax
c0014722:	e8 c9 be fe ff       	call   c00005f0 <strcpy>
c0014727:	83 c4 10             	add    esp,0x10
c001472a:	eb 64                	jmp    c0014790 <Process::Process(bool, char const*, Process*, char**)+0x1a4>
c001472c:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0014734:	83 ec 0c             	sub    esp,0xc
c0014737:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001473b:	e8 25 31 ff ff       	call   c0007865 <malloc>
c0014740:	83 c4 10             	add    esp,0x10
c0014743:	89 c3                	mov    ebx,eax
c0014745:	83 ec 08             	sub    esp,0x8
c0014748:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001474c:	53                   	push   ebx
c001474d:	e8 4e 42 ff ff       	call   c00089a0 <VgaText::VgaText(char const*)>
c0014752:	83 c4 10             	add    esp,0x10
c0014755:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014759:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001475f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014763:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014769:	83 ec 0c             	sub    esp,0xc
c001476c:	50                   	push   eax
c001476d:	e8 d4 3a ff ff       	call   c0008246 <addToTerminalCycle(VgaText*)>
c0014772:	83 c4 10             	add    esp,0x10
c0014775:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014779:	05 0c 01 00 00       	add    eax,0x10c
c001477e:	83 ec 08             	sub    esp,0x8
c0014781:	68 f9 08 02 c0       	push   0xc00208f9
c0014786:	50                   	push   eax
c0014787:	e8 64 be fe ff       	call   c00005f0 <strcpy>
c001478c:	83 c4 10             	add    esp,0x10
c001478f:	90                   	nop
c0014790:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014794:	83 c0 0c             	add    eax,0xc
c0014797:	83 ec 08             	sub    esp,0x8
c001479a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001479e:	50                   	push   eax
c001479f:	e8 4c be fe ff       	call   c00005f0 <strcpy>
c00147a4:	83 c4 10             	add    esp,0x10
c00147a7:	83 ec 08             	sub    esp,0x8
c00147aa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00147ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00147b2:	e8 c9 fb ff ff       	call   c0014380 <Process::addArgs(char**)>
c00147b7:	83 c4 10             	add    esp,0x10
c00147ba:	90                   	nop
c00147bb:	83 c4 24             	add    esp,0x24
c00147be:	5b                   	pop    ebx
c00147bf:	5e                   	pop    esi
c00147c0:	c3                   	ret    
c00147c1:	8d 76 00             	lea    esi,[esi+0x0]

c00147c4 <taskStartupFunction>:
c00147c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147c9:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00147cc:	c3                   	ret    
c00147cd:	90                   	nop
c00147ce:	66 90                	xchg   ax,ax

c00147d0 <Semaphore::Semaphore(int)>:
c00147d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00147d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00147d8:	89 10                	mov    DWORD PTR [eax],edx
c00147da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00147de:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00147e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00147e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00147f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00147f4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00147fb:	90                   	nop
c00147fc:	c3                   	ret    
c00147fd:	90                   	nop
c00147fe:	66 90                	xchg   ax,ax

c0014800 <Mutex::Mutex()>:
c0014800:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014804:	6a 01                	push   0x1
c0014806:	50                   	push   eax
c0014807:	e8 c4 ff ff ff       	call   c00147d0 <Semaphore::Semaphore(int)>
c001480c:	83 c4 08             	add    esp,0x8
c001480f:	90                   	nop
c0014810:	c3                   	ret    
c0014811:	90                   	nop
c0014812:	66 90                	xchg   ax,ax

c0014814 <Process::createThread(void (*)(void*), void*, int)>:
c0014814:	57                   	push   edi
c0014815:	31 c9                	xor    ecx,ecx
c0014817:	56                   	push   esi
c0014818:	53                   	push   ebx
c0014819:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001481d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0014824:	89 f2                	mov    edx,esi
c0014826:	66 90                	xchg   ax,ax
c0014828:	31 c0                	xor    eax,eax
c001482a:	66 89 d0             	mov    ax,dx
c001482d:	83 e2 01             	and    edx,0x1
c0014830:	74 12                	je     c0014844 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0014832:	d1 f8                	sar    eax,1
c0014834:	41                   	inc    ecx
c0014835:	89 c2                	mov    edx,eax
c0014837:	83 f9 10             	cmp    ecx,0x10
c001483a:	75 ec                	jne    c0014828 <Process::createThread(void (*)(void*), void*, int)+0x14>
c001483c:	31 db                	xor    ebx,ebx
c001483e:	89 d8                	mov    eax,ebx
c0014840:	5b                   	pop    ebx
c0014841:	5e                   	pop    esi
c0014842:	5f                   	pop    edi
c0014843:	c3                   	ret    
c0014844:	b8 01 00 00 00       	mov    eax,0x1
c0014849:	d3 e0                	shl    eax,cl
c001484b:	09 c6                	or     esi,eax
c001484d:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0014850:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0014857:	01 c0                	add    eax,eax
c0014859:	01 c8                	add    eax,ecx
c001485b:	8d 04 80             	lea    eax,[eax+eax*4]
c001485e:	01 d8                	add    eax,ebx
c0014860:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0014867:	75 0b                	jne    c0014874 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0014869:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0014873:	90                   	nop
c0014874:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001487a:	83 ec 0c             	sub    esp,0xc
c001487d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0014880:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0014883:	01 c0                	add    eax,eax
c0014885:	01 c8                	add    eax,ecx
c0014887:	8d 3c 80             	lea    edi,[eax+eax*4]
c001488a:	8d 04 3b             	lea    eax,[ebx+edi*1]
c001488d:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0014893:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0014899:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001489d:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00148a3:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00148a9:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00148af:	89 ca                	mov    edx,ecx
c00148b1:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00148b8:	f7 da                	neg    edx
c00148ba:	c1 e2 15             	shl    edx,0x15
c00148bd:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00148c3:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00148c9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00148cd:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00148d7:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00148dd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00148e1:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00148e7:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00148f1:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00148fb:	68 00 01 00 00       	push   0x100
c0014900:	e8 60 2f ff ff       	call   c0007865 <malloc>
c0014905:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0014908:	58                   	pop    eax
c0014909:	5a                   	pop    edx
c001490a:	53                   	push   ebx
c001490b:	68 84 71 02 c0       	push   0xc0027184
c0014910:	e8 f7 9a 00 00       	call   c001e40c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014915:	83 c4 10             	add    esp,0x10
c0014918:	89 d8                	mov    eax,ebx
c001491a:	5b                   	pop    ebx
c001491b:	5e                   	pop    esi
c001491c:	5f                   	pop    edi
c001491d:	c3                   	ret    
c001491e:	66 90                	xchg   ax,ax

c0014920 <Process::createUserThread()>:
c0014920:	83 ec 0c             	sub    esp,0xc
c0014923:	68 80 00 00 00       	push   0x80
c0014928:	6a 00                	push   0x0
c001492a:	68 74 42 01 c0       	push   0xc0014274
c001492f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014933:	50                   	push   eax
c0014934:	e8 db fe ff ff       	call   c0014814 <Process::createThread(void (*)(void*), void*, int)>
c0014939:	83 c4 1c             	add    esp,0x1c
c001493c:	c3                   	ret    
c001493d:	8d 76 00             	lea    esi,[esi+0x0]

c0014940 <setupMultitasking(void (*)())>:
c0014940:	56                   	push   esi
c0014941:	53                   	push   ebx
c0014942:	53                   	push   ebx
c0014943:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014947:	eb 13                	jmp    c001495c <setupMultitasking(void (*)())+0x1c>
c0014949:	8d 76 00             	lea    esi,[esi+0x0]
c001494c:	83 ec 0c             	sub    esp,0xc
c001494f:	68 84 71 02 c0       	push   0xc0027184
c0014954:	e8 fb 99 00 00       	call   c001e354 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014959:	83 c4 10             	add    esp,0x10
c001495c:	83 ec 0c             	sub    esp,0xc
c001495f:	68 84 71 02 c0       	push   0xc0027184
c0014964:	e8 c7 99 00 00       	call   c001e330 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014969:	83 c4 10             	add    esp,0x10
c001496c:	84 c0                	test   al,al
c001496e:	74 dc                	je     c001494c <setupMultitasking(void (*)())+0xc>
c0014970:	83 ec 0c             	sub    esp,0xc
c0014973:	68 24 07 00 00       	push   0x724
c0014978:	e8 e8 2e ff ff       	call   c0007865 <malloc>
c001497d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014984:	89 c3                	mov    ebx,eax
c0014986:	6a 00                	push   0x0
c0014988:	68 fd 08 02 c0       	push   0xc00208fd
c001498d:	6a 01                	push   0x1
c001498f:	50                   	push   eax
c0014990:	e8 57 fc ff ff       	call   c00145ec <Process::Process(bool, char const*, Process*, char**)>
c0014995:	83 c4 14             	add    esp,0x14
c0014998:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c001499e:	89 1d 90 71 02 c0    	mov    DWORD PTR ds:0xc0027190,ebx
c00149a4:	50                   	push   eax
c00149a5:	e8 f3 3a ff ff       	call   c000849d <setActiveTerminal(VgaText*)>
c00149aa:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c00149b2:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00149bc:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00149c2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00149c5:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00149cf:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00149d5:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00149db:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00149e5:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00149ef:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00149f9:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00149ff:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0014a09:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0014a0f:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0014a19:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0014a20:	e8 40 2e ff ff       	call   c0007865 <malloc>
c0014a25:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0014a2b:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0014a31:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0014a37:	5a                   	pop    edx
c0014a38:	59                   	pop    ecx
c0014a39:	68 f9 08 02 c0       	push   0xc00208f9
c0014a3e:	50                   	push   eax
c0014a3f:	e8 ac bb fe ff       	call   c00005f0 <strcpy>
c0014a44:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0014a4b:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0014a4f:	83 c4 14             	add    esp,0x14
c0014a52:	5b                   	pop    ebx
c0014a53:	5e                   	pop    esi
c0014a54:	e9 10 b8 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0014a59:	8d 76 00             	lea    esi,[esi+0x0]

c0014a5c <schedule()>:
c0014a5c:	8b 15 64 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027164
c0014a62:	85 d2                	test   edx,edx
c0014a64:	74 0e                	je     c0014a74 <schedule()+0x18>
c0014a66:	c7 05 60 71 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x1
c0014a70:	c3                   	ret    
c0014a71:	8d 76 00             	lea    esi,[esi+0x0]
c0014a74:	53                   	push   ebx
c0014a75:	83 ec 14             	sub    esp,0x14
c0014a78:	68 84 71 02 c0       	push   0xc0027184
c0014a7d:	e8 ae 98 00 00       	call   c001e330 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014a82:	83 c4 10             	add    esp,0x10
c0014a85:	84 c0                	test   al,al
c0014a87:	75 3b                	jne    c0014ac4 <schedule()+0x68>
c0014a89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a8e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0014a91:	4a                   	dec    edx
c0014a92:	74 38                	je     c0014acc <schedule()+0x70>
c0014a94:	83 ec 0c             	sub    esp,0xc
c0014a97:	68 84 71 02 c0       	push   0xc0027184
c0014a9c:	e8 ab 98 00 00       	call   c001e34c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014aa1:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c0014aa8:	89 c3                	mov    ebx,eax
c0014aaa:	e8 a5 98 00 00       	call   c001e354 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014aaf:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0014ab6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ab9:	e8 0e f8 ff ff       	call   c00142cc <switchToThread(ThreadControlBlock*)>
c0014abe:	83 c4 10             	add    esp,0x10
c0014ac1:	8d 76 00             	lea    esi,[esi+0x0]
c0014ac4:	83 c4 08             	add    esp,0x8
c0014ac7:	5b                   	pop    ebx
c0014ac8:	c3                   	ret    
c0014ac9:	8d 76 00             	lea    esi,[esi+0x0]
c0014acc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0014ad3:	83 ec 08             	sub    esp,0x8
c0014ad6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014adb:	50                   	push   eax
c0014adc:	68 84 71 02 c0       	push   0xc0027184
c0014ae1:	e8 26 99 00 00       	call   c001e40c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014ae6:	83 c4 10             	add    esp,0x10
c0014ae9:	eb a9                	jmp    c0014a94 <schedule()+0x38>
c0014aeb:	90                   	nop

c0014aec <Semaphore::tryAcquire()>:
c0014aec:	53                   	push   ebx
c0014aed:	83 ec 08             	sub    esp,0x8
c0014af0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014af4:	fa                   	cli    
c0014af5:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014afa:	8d 50 01             	lea    edx,[eax+0x1]
c0014afd:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c0014b03:	8b 15 64 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027164
c0014b09:	8d 5a 01             	lea    ebx,[edx+0x1]
c0014b0c:	89 1d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ebx
c0014b12:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0014b15:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0014b17:	7c 33                	jl     c0014b4c <Semaphore::tryAcquire()+0x60>
c0014b19:	89 15 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,edx
c0014b1f:	85 d2                	test   edx,edx
c0014b21:	75 0d                	jne    c0014b30 <Semaphore::tryAcquire()+0x44>
c0014b23:	8b 15 60 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027160
c0014b29:	85 d2                	test   edx,edx
c0014b2b:	75 6b                	jne    c0014b98 <Semaphore::tryAcquire()+0xac>
c0014b2d:	8d 76 00             	lea    esi,[esi+0x0]
c0014b30:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014b35:	85 c0                	test   eax,eax
c0014b37:	74 0b                	je     c0014b44 <Semaphore::tryAcquire()+0x58>
c0014b39:	8d 76 00             	lea    esi,[esi+0x0]
c0014b3c:	31 c0                	xor    eax,eax
c0014b3e:	83 c4 08             	add    esp,0x8
c0014b41:	5b                   	pop    ebx
c0014b42:	c3                   	ret    
c0014b43:	90                   	nop
c0014b44:	fb                   	sti    
c0014b45:	83 c4 08             	add    esp,0x8
c0014b48:	5b                   	pop    ebx
c0014b49:	c3                   	ret    
c0014b4a:	66 90                	xchg   ax,ax
c0014b4c:	43                   	inc    ebx
c0014b4d:	89 15 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,edx
c0014b53:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0014b56:	85 d2                	test   edx,edx
c0014b58:	75 22                	jne    c0014b7c <Semaphore::tryAcquire()+0x90>
c0014b5a:	8b 0d 60 71 02 c0    	mov    ecx,DWORD PTR ds:0xc0027160
c0014b60:	85 c9                	test   ecx,ecx
c0014b62:	74 18                	je     c0014b7c <Semaphore::tryAcquire()+0x90>
c0014b64:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014b6e:	e8 e9 fe ff ff       	call   c0014a5c <schedule()>
c0014b73:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014b78:	48                   	dec    eax
c0014b79:	8d 76 00             	lea    esi,[esi+0x0]
c0014b7c:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014b81:	85 c0                	test   eax,eax
c0014b83:	75 0b                	jne    c0014b90 <Semaphore::tryAcquire()+0xa4>
c0014b85:	fb                   	sti    
c0014b86:	b0 01                	mov    al,0x1
c0014b88:	83 c4 08             	add    esp,0x8
c0014b8b:	5b                   	pop    ebx
c0014b8c:	c3                   	ret    
c0014b8d:	8d 76 00             	lea    esi,[esi+0x0]
c0014b90:	b0 01                	mov    al,0x1
c0014b92:	83 c4 08             	add    esp,0x8
c0014b95:	5b                   	pop    ebx
c0014b96:	c3                   	ret    
c0014b97:	90                   	nop
c0014b98:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014ba2:	e8 b5 fe ff ff       	call   c0014a5c <schedule()>
c0014ba7:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014bac:	48                   	dec    eax
c0014bad:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014bb2:	85 c0                	test   eax,eax
c0014bb4:	75 86                	jne    c0014b3c <Semaphore::tryAcquire()+0x50>
c0014bb6:	eb 8c                	jmp    c0014b44 <Semaphore::tryAcquire()+0x58>

c0014bb8 <Semaphore::assertLocked(char const*)>:
c0014bb8:	83 ec 0c             	sub    esp,0xc
c0014bbb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014bbf:	fa                   	cli    
c0014bc0:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014bc6:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014bcb:	8d 48 01             	lea    ecx,[eax+0x1]
c0014bce:	89 0d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ecx
c0014bd4:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014bd6:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0014bd9:	7c 29                	jl     c0014c04 <Semaphore::assertLocked(char const*)+0x4c>
c0014bdb:	90                   	nop
c0014bdc:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0014be1:	85 c0                	test   eax,eax
c0014be3:	75 0b                	jne    c0014bf0 <Semaphore::assertLocked(char const*)+0x38>
c0014be5:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c0014bea:	85 c0                	test   eax,eax
c0014bec:	75 2e                	jne    c0014c1c <Semaphore::assertLocked(char const*)+0x64>
c0014bee:	66 90                	xchg   ax,ax
c0014bf0:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014bf5:	48                   	dec    eax
c0014bf6:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014bfb:	75 03                	jne    c0014c00 <Semaphore::assertLocked(char const*)+0x48>
c0014bfd:	fb                   	sti    
c0014bfe:	66 90                	xchg   ax,ax
c0014c00:	83 c4 0c             	add    esp,0xc
c0014c03:	c3                   	ret    
c0014c04:	83 ec 0c             	sub    esp,0xc
c0014c07:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014c0b:	52                   	push   edx
c0014c0c:	e8 b6 b7 ff ff       	call   c00103c7 <KePanic(char const*)>
c0014c11:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014c16:	83 c4 10             	add    esp,0x10
c0014c19:	48                   	dec    eax
c0014c1a:	eb c0                	jmp    c0014bdc <Semaphore::assertLocked(char const*)+0x24>
c0014c1c:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014c26:	e8 31 fe ff ff       	call   c0014a5c <schedule()>
c0014c2b:	eb c3                	jmp    c0014bf0 <Semaphore::assertLocked(char const*)+0x38>
c0014c2d:	8d 76 00             	lea    esi,[esi+0x0]

c0014c30 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0014c30:	83 ec 0c             	sub    esp,0xc
c0014c33:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c38:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014c3c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014c3f:	e8 18 fe ff ff       	call   c0014a5c <schedule()>
c0014c44:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014c49:	48                   	dec    eax
c0014c4a:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014c4f:	75 03                	jne    c0014c54 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0014c51:	fb                   	sti    
c0014c52:	66 90                	xchg   ax,ax
c0014c54:	83 c4 0c             	add    esp,0xc
c0014c57:	c3                   	ret    

c0014c58 <blockTask(TaskState)>:
c0014c58:	83 ec 0c             	sub    esp,0xc
c0014c5b:	fa                   	cli    
c0014c5c:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014c62:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014c66:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c6b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014c6e:	e8 e9 fd ff ff       	call   c0014a5c <schedule()>
c0014c73:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014c78:	48                   	dec    eax
c0014c79:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014c7e:	75 04                	jne    c0014c84 <blockTask(TaskState)+0x2c>
c0014c80:	fb                   	sti    
c0014c81:	8d 76 00             	lea    esi,[esi+0x0]
c0014c84:	83 c4 0c             	add    esp,0xc
c0014c87:	c3                   	ret    

c0014c88 <waitTask(int, int*, int)>:
c0014c88:	83 ec 18             	sub    esp,0x18
c0014c8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014c94:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0014c97:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014c9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ca0:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0014ca3:	6a 07                	push   0x7
c0014ca5:	e8 ae ff ff ff       	call   c0014c58 <blockTask(TaskState)>
c0014caa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014caf:	83 c4 10             	add    esp,0x10
c0014cb2:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0014cb5:	85 d2                	test   edx,edx
c0014cb7:	74 0b                	je     c0014cc4 <waitTask(int, int*, int)+0x3c>
c0014cb9:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0014cbc:	89 02                	mov    DWORD PTR [edx],eax
c0014cbe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014cc3:	90                   	nop
c0014cc4:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0014cc7:	83 c4 0c             	add    esp,0xc
c0014cca:	c3                   	ret    
c0014ccb:	90                   	nop

c0014ccc <milliTenthSleepUntil(unsigned int)>:
c0014ccc:	83 ec 0c             	sub    esp,0xc
c0014ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014cd3:	39 05 8c 64 02 c0    	cmp    DWORD PTR ds:0xc002648c,eax
c0014cd9:	76 05                	jbe    c0014ce0 <milliTenthSleepUntil(unsigned int)+0x14>
c0014cdb:	90                   	nop
c0014cdc:	83 c4 0c             	add    esp,0xc
c0014cdf:	c3                   	ret    
c0014ce0:	fa                   	cli    
c0014ce1:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014ce7:	83 ec 08             	sub    esp,0x8
c0014cea:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c0014cf0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014cf6:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0014cf9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014cff:	52                   	push   edx
c0014d00:	68 78 71 02 c0       	push   0xc0027178
c0014d05:	e8 02 97 00 00       	call   c001e40c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014d0a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0014d11:	e8 42 ff ff ff       	call   c0014c58 <blockTask(TaskState)>
c0014d16:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014d1b:	83 c4 10             	add    esp,0x10
c0014d1e:	48                   	dec    eax
c0014d1f:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0014d24:	85 c0                	test   eax,eax
c0014d26:	75 0c                	jne    c0014d34 <milliTenthSleepUntil(unsigned int)+0x68>
c0014d28:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c0014d2d:	85 c0                	test   eax,eax
c0014d2f:	75 17                	jne    c0014d48 <milliTenthSleepUntil(unsigned int)+0x7c>
c0014d31:	8d 76 00             	lea    esi,[esi+0x0]
c0014d34:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014d39:	48                   	dec    eax
c0014d3a:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014d3f:	75 9b                	jne    c0014cdc <milliTenthSleepUntil(unsigned int)+0x10>
c0014d41:	fb                   	sti    
c0014d42:	83 c4 0c             	add    esp,0xc
c0014d45:	c3                   	ret    
c0014d46:	66 90                	xchg   ax,ax
c0014d48:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014d52:	e8 05 fd ff ff       	call   c0014a5c <schedule()>
c0014d57:	eb db                	jmp    c0014d34 <milliTenthSleepUntil(unsigned int)+0x68>
c0014d59:	8d 76 00             	lea    esi,[esi+0x0]

c0014d5c <milliTenthSleep(unsigned int)>:
c0014d5c:	a1 8c 64 02 c0       	mov    eax,ds:0xc002648c
c0014d61:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0014d65:	e9 62 ff ff ff       	jmp    c0014ccc <milliTenthSleepUntil(unsigned int)>
c0014d6a:	66 90                	xchg   ax,ax

c0014d6c <sleep(unsigned int)>:
c0014d6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d70:	8d 04 80             	lea    eax,[eax+eax*4]
c0014d73:	8d 04 80             	lea    eax,[eax+eax*4]
c0014d76:	8d 04 80             	lea    eax,[eax+eax*4]
c0014d79:	8d 04 80             	lea    eax,[eax+eax*4]
c0014d7c:	c1 e0 04             	shl    eax,0x4
c0014d7f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014d83:	eb d7                	jmp    c0014d5c <milliTenthSleep(unsigned int)>
c0014d85:	90                   	nop
c0014d86:	66 90                	xchg   ax,ax

c0014d88 <Semaphore::acquire()>:
c0014d88:	83 ec 0c             	sub    esp,0xc
c0014d8b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014d8f:	fa                   	cli    
c0014d90:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014d95:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014d9b:	8d 48 01             	lea    ecx,[eax+0x1]
c0014d9e:	89 0d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ecx
c0014da4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0014da7:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0014da9:	7d 2d                	jge    c0014dd8 <Semaphore::acquire()+0x50>
c0014dab:	41                   	inc    ecx
c0014dac:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0014daf:	90                   	nop
c0014db0:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0014db5:	85 c0                	test   eax,eax
c0014db7:	75 0b                	jne    c0014dc4 <Semaphore::acquire()+0x3c>
c0014db9:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c0014dbe:	85 c0                	test   eax,eax
c0014dc0:	75 62                	jne    c0014e24 <Semaphore::acquire()+0x9c>
c0014dc2:	66 90                	xchg   ax,ax
c0014dc4:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014dc9:	48                   	dec    eax
c0014dca:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014dcf:	75 03                	jne    c0014dd4 <Semaphore::acquire()+0x4c>
c0014dd1:	fb                   	sti    
c0014dd2:	66 90                	xchg   ax,ax
c0014dd4:	83 c4 0c             	add    esp,0xc
c0014dd7:	c3                   	ret    
c0014dd8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ddd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0014de4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0014de7:	85 c9                	test   ecx,ecx
c0014de9:	74 4d                	je     c0014e38 <Semaphore::acquire()+0xb0>
c0014deb:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0014dee:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014df4:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0014df7:	90                   	nop
c0014df8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014dfd:	83 ec 0c             	sub    esp,0xc
c0014e00:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0014e03:	68 78 09 02 c0       	push   0xc0020978
c0014e08:	e8 f9 57 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0014e0d:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0014e14:	e8 3f fe ff ff       	call   c0014c58 <blockTask(TaskState)>
c0014e19:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014e1e:	83 c4 10             	add    esp,0x10
c0014e21:	48                   	dec    eax
c0014e22:	eb 8c                	jmp    c0014db0 <Semaphore::acquire()+0x28>
c0014e24:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014e2e:	e8 29 fc ff ff       	call   c0014a5c <schedule()>
c0014e33:	eb 8f                	jmp    c0014dc4 <Semaphore::acquire()+0x3c>
c0014e35:	8d 76 00             	lea    esi,[esi+0x0]
c0014e38:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e3d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014e40:	eb b6                	jmp    c0014df8 <Semaphore::acquire()+0x70>
c0014e42:	66 90                	xchg   ax,ax

c0014e44 <taskReturned>:
c0014e44:	83 ec 18             	sub    esp,0x18
c0014e47:	68 98 09 02 c0       	push   0xc0020998
c0014e4c:	e8 76 b5 ff ff       	call   c00103c7 <KePanic(char const*)>
c0014e51:	83 c4 10             	add    esp,0x10
c0014e54:	83 ec 0c             	sub    esp,0xc
c0014e57:	6a 02                	push   0x2
c0014e59:	e8 fa fd ff ff       	call   c0014c58 <blockTask(TaskState)>
c0014e5e:	fa                   	cli    
c0014e5f:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014e65:	e8 f2 fb ff ff       	call   c0014a5c <schedule()>
c0014e6a:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014e6f:	83 c4 10             	add    esp,0x10
c0014e72:	48                   	dec    eax
c0014e73:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014e78:	85 c0                	test   eax,eax
c0014e7a:	75 d8                	jne    c0014e54 <taskReturned+0x10>
c0014e7c:	fb                   	sti    
c0014e7d:	eb d5                	jmp    c0014e54 <taskReturned+0x10>
c0014e7f:	90                   	nop

c0014e80 <Thr::processFromPID(int)>:
c0014e80:	57                   	push   edi
c0014e81:	56                   	push   esi
c0014e82:	53                   	push   ebx
c0014e83:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014e87:	fa                   	cli    
c0014e88:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014e8e:	83 ec 0c             	sub    esp,0xc
c0014e91:	68 84 71 02 c0       	push   0xc0027184
c0014e96:	e8 b1 94 00 00       	call   c001e34c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014e9b:	83 c4 10             	add    esp,0x10
c0014e9e:	89 c7                	mov    edi,eax
c0014ea0:	eb 16                	jmp    c0014eb8 <Thr::processFromPID(int)+0x38>
c0014ea2:	66 90                	xchg   ax,ax
c0014ea4:	83 ec 0c             	sub    esp,0xc
c0014ea7:	68 84 71 02 c0       	push   0xc0027184
c0014eac:	e8 9b 94 00 00       	call   c001e34c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014eb1:	83 c4 10             	add    esp,0x10
c0014eb4:	39 f8                	cmp    eax,edi
c0014eb6:	74 4c                	je     c0014f04 <Thr::processFromPID(int)+0x84>
c0014eb8:	83 ec 0c             	sub    esp,0xc
c0014ebb:	68 84 71 02 c0       	push   0xc0027184
c0014ec0:	e8 87 94 00 00       	call   c001e34c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014ec5:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c0014ecc:	89 c3                	mov    ebx,eax
c0014ece:	e8 81 94 00 00       	call   c001e354 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014ed3:	58                   	pop    eax
c0014ed4:	5a                   	pop    edx
c0014ed5:	53                   	push   ebx
c0014ed6:	68 84 71 02 c0       	push   0xc0027184
c0014edb:	e8 2c 95 00 00       	call   c001e40c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014ee0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014ee3:	83 c4 10             	add    esp,0x10
c0014ee6:	39 30                	cmp    DWORD PTR [eax],esi
c0014ee8:	75 ba                	jne    c0014ea4 <Thr::processFromPID(int)+0x24>
c0014eea:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014eef:	48                   	dec    eax
c0014ef0:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014ef5:	74 09                	je     c0014f00 <Thr::processFromPID(int)+0x80>
c0014ef7:	90                   	nop
c0014ef8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014efb:	5b                   	pop    ebx
c0014efc:	5e                   	pop    esi
c0014efd:	5f                   	pop    edi
c0014efe:	c3                   	ret    
c0014eff:	90                   	nop
c0014f00:	fb                   	sti    
c0014f01:	eb f5                	jmp    c0014ef8 <Thr::processFromPID(int)+0x78>
c0014f03:	90                   	nop
c0014f04:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014f09:	48                   	dec    eax
c0014f0a:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014f0f:	75 07                	jne    c0014f18 <Thr::processFromPID(int)+0x98>
c0014f11:	fb                   	sti    
c0014f12:	5b                   	pop    ebx
c0014f13:	5e                   	pop    esi
c0014f14:	5f                   	pop    edi
c0014f15:	c3                   	ret    
c0014f16:	66 90                	xchg   ax,ax
c0014f18:	5b                   	pop    ebx
c0014f19:	31 c0                	xor    eax,eax
c0014f1b:	5e                   	pop    esi
c0014f1c:	5f                   	pop    edi
c0014f1d:	c3                   	ret    
c0014f1e:	66 90                	xchg   ax,ax

c0014f20 <unblockTask(ThreadControlBlock*)>:
c0014f20:	53                   	push   ebx
c0014f21:	83 ec 08             	sub    esp,0x8
c0014f24:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014f28:	fa                   	cli    
c0014f29:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014f2f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014f32:	85 c0                	test   eax,eax
c0014f34:	74 66                	je     c0014f9c <unblockTask(ThreadControlBlock*)+0x7c>
c0014f36:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014f39:	48                   	dec    eax
c0014f3a:	74 38                	je     c0014f74 <unblockTask(ThreadControlBlock*)+0x54>
c0014f3c:	83 ec 0c             	sub    esp,0xc
c0014f3f:	68 84 71 02 c0       	push   0xc0027184
c0014f44:	e8 03 94 00 00       	call   c001e34c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014f49:	83 c4 10             	add    esp,0x10
c0014f4c:	85 c0                	test   eax,eax
c0014f4e:	75 1c                	jne    c0014f6c <unblockTask(ThreadControlBlock*)+0x4c>
c0014f50:	eb 5e                	jmp    c0014fb0 <unblockTask(ThreadControlBlock*)+0x90>
c0014f52:	66 90                	xchg   ax,ax
c0014f54:	83 ec 08             	sub    esp,0x8
c0014f57:	50                   	push   eax
c0014f58:	68 84 71 02 c0       	push   0xc0027184
c0014f5d:	e8 06 97 00 00       	call   c001e668 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014f62:	83 c4 10             	add    esp,0x10
c0014f65:	85 c0                	test   eax,eax
c0014f67:	74 47                	je     c0014fb0 <unblockTask(ThreadControlBlock*)+0x90>
c0014f69:	8d 76 00             	lea    esi,[esi+0x0]
c0014f6c:	39 c3                	cmp    ebx,eax
c0014f6e:	75 e4                	jne    c0014f54 <unblockTask(ThreadControlBlock*)+0x34>
c0014f70:	eb 12                	jmp    c0014f84 <unblockTask(ThreadControlBlock*)+0x64>
c0014f72:	66 90                	xchg   ax,ax
c0014f74:	83 ec 0c             	sub    esp,0xc
c0014f77:	68 1b 09 02 c0       	push   0xc002091b
c0014f7c:	e8 85 56 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0014f81:	83 c4 10             	add    esp,0x10
c0014f84:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014f89:	48                   	dec    eax
c0014f8a:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014f8f:	75 03                	jne    c0014f94 <unblockTask(ThreadControlBlock*)+0x74>
c0014f91:	fb                   	sti    
c0014f92:	66 90                	xchg   ax,ax
c0014f94:	83 c4 08             	add    esp,0x8
c0014f97:	5b                   	pop    ebx
c0014f98:	c3                   	ret    
c0014f99:	8d 76 00             	lea    esi,[esi+0x0]
c0014f9c:	83 ec 0c             	sub    esp,0xc
c0014f9f:	68 04 09 02 c0       	push   0xc0020904
c0014fa4:	e8 5d 56 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0014fa9:	83 c4 10             	add    esp,0x10
c0014fac:	eb d6                	jmp    c0014f84 <unblockTask(ThreadControlBlock*)+0x64>
c0014fae:	66 90                	xchg   ax,ax
c0014fb0:	83 ec 08             	sub    esp,0x8
c0014fb3:	53                   	push   ebx
c0014fb4:	68 84 71 02 c0       	push   0xc0027184
c0014fb9:	e8 4e 94 00 00       	call   c001e40c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014fbe:	83 c4 10             	add    esp,0x10
c0014fc1:	eb c1                	jmp    c0014f84 <unblockTask(ThreadControlBlock*)+0x64>
c0014fc3:	90                   	nop

c0014fc4 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0014fc4:	55                   	push   ebp
c0014fc5:	57                   	push   edi
c0014fc6:	56                   	push   esi
c0014fc7:	53                   	push   ebx
c0014fc8:	83 ec 1c             	sub    esp,0x1c
c0014fcb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014fcf:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014fd2:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0014fd8:	85 ed                	test   ebp,ebp
c0014fda:	7e 24                	jle    c0015000 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0014fdc:	31 f6                	xor    esi,esi
c0014fde:	66 90                	xchg   ax,ax
c0014fe0:	83 ec 0c             	sub    esp,0xc
c0014fe3:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0014fea:	46                   	inc    esi
c0014feb:	57                   	push   edi
c0014fec:	e8 84 28 ff ff       	call   c0007875 <free>
c0014ff1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014ff4:	83 c4 10             	add    esp,0x10
c0014ff7:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0014ffd:	7f e1                	jg     c0014fe0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0014fff:	90                   	nop
c0015000:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001500a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001500f:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0015012:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0015015:	d3 c0                	rol    eax,cl
c0015017:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c001501e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015021:	89 f7                	mov    edi,esi
c0015023:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c001502b:	0f 85 77 01 00 00    	jne    c00151a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0015031:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0015037:	85 ed                	test   ebp,ebp
c0015039:	74 1d                	je     c0015058 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c001503b:	83 ec 0c             	sub    esp,0xc
c001503e:	55                   	push   ebp
c001503f:	e8 94 b0 ff ff       	call   c00100d8 <EnvVarContainer::~EnvVarContainer()>
c0015044:	59                   	pop    ecx
c0015045:	5e                   	pop    esi
c0015046:	6a 0c                	push   0xc
c0015048:	55                   	push   ebp
c0015049:	e8 c2 54 ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c001504e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015051:	83 c4 10             	add    esp,0x10
c0015054:	89 f7                	mov    edi,esi
c0015056:	66 90                	xchg   ax,ax
c0015058:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001505e:	85 c0                	test   eax,eax
c0015060:	0f 84 b6 00 00 00    	je     c001511c <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0015066:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0015069:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001506d:	31 c9                	xor    ecx,ecx
c001506f:	eb 17                	jmp    c0015088 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0015071:	8d 76 00             	lea    esi,[esi+0x0]
c0015074:	41                   	inc    ecx
c0015075:	83 f9 10             	cmp    ecx,0x10
c0015078:	0f 84 9e 00 00 00    	je     c001511c <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c001507e:	66 90                	xchg   ax,ax
c0015080:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015086:	66 90                	xchg   ax,ax
c0015088:	31 d2                	xor    edx,edx
c001508a:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0015091:	d3 fa                	sar    edx,cl
c0015093:	83 e2 01             	and    edx,0x1
c0015096:	74 dc                	je     c0015074 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0015098:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c001509b:	01 d2                	add    edx,edx
c001509d:	01 ca                	add    edx,ecx
c001509f:	8d 14 92             	lea    edx,[edx+edx*4]
c00150a2:	01 d0                	add    eax,edx
c00150a4:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00150aa:	83 fd 07             	cmp    ebp,0x7
c00150ad:	75 c5                	jne    c0015074 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00150af:	05 40 02 00 00       	add    eax,0x240
c00150b4:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00150b7:	83 fd ff             	cmp    ebp,0xffffffff
c00150ba:	0f 8c f0 00 00 00    	jl     c00151b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00150c0:	0f 84 ae 01 00 00    	je     c0015274 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c00150c6:	85 ed                	test   ebp,ebp
c00150c8:	0f 84 92 01 00 00    	je     c0015260 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c00150ce:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00150d0:	75 a2                	jne    c0015074 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00150d2:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00150d8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00150dc:	01 d0                	add    eax,edx
c00150de:	66 90                	xchg   ax,ax
c00150e0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00150e4:	83 ec 0c             	sub    esp,0xc
c00150e7:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00150ed:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00150f0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00150f6:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00150fd:	50                   	push   eax
c00150fe:	e8 1d fe ff ff       	call   c0014f20 <unblockTask(ThreadControlBlock*)>
c0015103:	83 c4 10             	add    esp,0x10
c0015106:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015109:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001510d:	89 f7                	mov    edi,esi
c001510f:	41                   	inc    ecx
c0015110:	83 f9 10             	cmp    ecx,0x10
c0015113:	0f 85 67 ff ff ff    	jne    c0015080 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015119:	8d 76 00             	lea    esi,[esi+0x0]
c001511c:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0015122:	85 c0                	test   eax,eax
c0015124:	74 62                	je     c0015188 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0015126:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c001512c:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0015132:	74 54                	je     c0015188 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0015134:	83 ec 0c             	sub    esp,0xc
c0015137:	68 84 71 02 c0       	push   0xc0027184
c001513c:	e8 0b 92 00 00       	call   c001e34c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015141:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c0015148:	89 c7                	mov    edi,eax
c001514a:	e8 e1 91 00 00       	call   c001e330 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001514f:	83 c4 10             	add    esp,0x10
c0015152:	84 c0                	test   al,al
c0015154:	0f 84 ce 00 00 00    	je     c0015228 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c001515a:	66 90                	xchg   ax,ax
c001515c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001515f:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015165:	85 d2                	test   edx,edx
c0015167:	74 0f                	je     c0015178 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0015169:	83 ec 0c             	sub    esp,0xc
c001516c:	8b 02                	mov    eax,DWORD PTR [edx]
c001516e:	52                   	push   edx
c001516f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015172:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015175:	83 c4 10             	add    esp,0x10
c0015178:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0015182:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0015185:	8d 76 00             	lea    esi,[esi+0x0]
c0015188:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001518e:	85 db                	test   ebx,ebx
c0015190:	74 16                	je     c00151a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0015192:	83 ec 0c             	sub    esp,0xc
c0015195:	53                   	push   ebx
c0015196:	e8 0d 47 ff ff       	call   c00098a8 <VAS::~VAS()>
c001519b:	58                   	pop    eax
c001519c:	5a                   	pop    edx
c001519d:	6a 14                	push   0x14
c001519f:	53                   	push   ebx
c00151a0:	e8 6b 53 ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c00151a5:	83 c4 10             	add    esp,0x10
c00151a8:	83 c4 1c             	add    esp,0x1c
c00151ab:	5b                   	pop    ebx
c00151ac:	5e                   	pop    esi
c00151ad:	5f                   	pop    edi
c00151ae:	5d                   	pop    ebp
c00151af:	c3                   	ret    
c00151b0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00151b4:	83 ec 0c             	sub    esp,0xc
c00151b7:	68 cc 09 02 c0       	push   0xc00209cc
c00151bc:	e8 06 b2 ff ff       	call   c00103c7 <KePanic(char const*)>
c00151c1:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00151c4:	83 c4 10             	add    esp,0x10
c00151c7:	89 f7                	mov    edi,esi
c00151c9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00151cd:	e9 a2 fe ff ff       	jmp    c0015074 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00151d2:	66 90                	xchg   ax,ax
c00151d4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151da:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00151e0:	75 1e                	jne    c0015200 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c00151e2:	83 ec 0c             	sub    esp,0xc
c00151e5:	68 34 0a 02 c0       	push   0xc0020a34
c00151ea:	e8 17 54 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c00151ef:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00151f6:	e8 5d fa ff ff       	call   c0014c58 <blockTask(TaskState)>
c00151fb:	83 c4 10             	add    esp,0x10
c00151fe:	66 90                	xchg   ax,ax
c0015200:	83 ec 08             	sub    esp,0x8
c0015203:	56                   	push   esi
c0015204:	68 84 71 02 c0       	push   0xc0027184
c0015209:	e8 fe 91 00 00       	call   c001e40c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001520e:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c0015215:	e8 32 91 00 00       	call   c001e34c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001521a:	83 c4 10             	add    esp,0x10
c001521d:	39 f8                	cmp    eax,edi
c001521f:	0f 84 37 ff ff ff    	je     c001515c <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0015225:	8d 76 00             	lea    esi,[esi+0x0]
c0015228:	83 ec 0c             	sub    esp,0xc
c001522b:	68 84 71 02 c0       	push   0xc0027184
c0015230:	e8 17 91 00 00       	call   c001e34c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015235:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c001523c:	89 c6                	mov    esi,eax
c001523e:	e8 11 91 00 00       	call   c001e354 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015243:	83 c4 10             	add    esp,0x10
c0015246:	39 f3                	cmp    ebx,esi
c0015248:	74 b6                	je     c0015200 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c001524a:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c001524d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015250:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0015256:	75 a8                	jne    c0015200 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0015258:	e9 77 ff ff ff       	jmp    c00151d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c001525d:	8d 76 00             	lea    esi,[esi+0x0]
c0015260:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015264:	83 ec 0c             	sub    esp,0xc
c0015267:	68 00 0a 02 c0       	push   0xc0020a00
c001526c:	e9 4b ff ff ff       	jmp    c00151bc <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0015271:	8d 76 00             	lea    esi,[esi+0x0]
c0015274:	8b 36                	mov    esi,DWORD PTR [esi]
c0015276:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001527a:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c001527d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015280:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0015286:	01 d7                	add    edi,edx
c0015288:	89 f8                	mov    eax,edi
c001528a:	e9 51 fe ff ff       	jmp    c00150e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c001528f:	90                   	nop

c0015290 <cleanerTaskFunction(void*)>:
c0015290:	53                   	push   ebx
c0015291:	83 ec 08             	sub    esp,0x8
c0015294:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015299:	48                   	dec    eax
c001529a:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001529f:	75 03                	jne    c00152a4 <cleanerTaskFunction(void*)+0x14>
c00152a1:	fb                   	sti    
c00152a2:	66 90                	xchg   ax,ax
c00152a4:	fa                   	cli    
c00152a5:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00152aa:	80 3d 4c 71 02 c0 00 	cmp    BYTE PTR ds:0xc002714c,0x0
c00152b1:	8d 50 01             	lea    edx,[eax+0x1]
c00152b4:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c00152ba:	0f 84 ac 00 00 00    	je     c001536c <cleanerTaskFunction(void*)+0xdc>
c00152c0:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00152c5:	85 c0                	test   eax,eax
c00152c7:	75 03                	jne    c00152cc <cleanerTaskFunction(void*)+0x3c>
c00152c9:	fb                   	sti    
c00152ca:	66 90                	xchg   ax,ax
c00152cc:	c6 05 4c 71 02 c0 00 	mov    BYTE PTR ds:0xc002714c,0x0
c00152d3:	fa                   	cli    
c00152d4:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00152da:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c00152e0:	fa                   	cli    
c00152e1:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00152e7:	eb 2b                	jmp    c0015314 <cleanerTaskFunction(void*)+0x84>
c00152e9:	8d 76 00             	lea    esi,[esi+0x0]
c00152ec:	83 ec 0c             	sub    esp,0xc
c00152ef:	68 6c 71 02 c0       	push   0xc002716c
c00152f4:	e8 53 90 00 00       	call   c001e34c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00152f9:	c7 04 24 6c 71 02 c0 	mov    DWORD PTR [esp],0xc002716c
c0015300:	89 c3                	mov    ebx,eax
c0015302:	e8 4d 90 00 00       	call   c001e354 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015307:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001530a:	e8 b5 fc ff ff       	call   c0014fc4 <cleanupTerminatedTask(ThreadControlBlock*)>
c001530f:	83 c4 10             	add    esp,0x10
c0015312:	66 90                	xchg   ax,ax
c0015314:	83 ec 0c             	sub    esp,0xc
c0015317:	68 6c 71 02 c0       	push   0xc002716c
c001531c:	e8 0f 90 00 00       	call   c001e330 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015321:	83 c4 10             	add    esp,0x10
c0015324:	84 c0                	test   al,al
c0015326:	74 c4                	je     c00152ec <cleanerTaskFunction(void*)+0x5c>
c0015328:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001532d:	48                   	dec    eax
c001532e:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015333:	75 03                	jne    c0015338 <cleanerTaskFunction(void*)+0xa8>
c0015335:	fb                   	sti    
c0015336:	66 90                	xchg   ax,ax
c0015338:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c001533d:	48                   	dec    eax
c001533e:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0015343:	0f 85 4b ff ff ff    	jne    c0015294 <cleanerTaskFunction(void*)+0x4>
c0015349:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c001534e:	85 c0                	test   eax,eax
c0015350:	0f 84 3e ff ff ff    	je     c0015294 <cleanerTaskFunction(void*)+0x4>
c0015356:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0015360:	e8 f7 f6 ff ff       	call   c0014a5c <schedule()>
c0015365:	e9 2a ff ff ff       	jmp    c0015294 <cleanerTaskFunction(void*)+0x4>
c001536a:	66 90                	xchg   ax,ax
c001536c:	83 ec 0c             	sub    esp,0xc
c001536f:	6a 02                	push   0x2
c0015371:	e8 ba f8 ff ff       	call   c0014c30 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015376:	83 c4 10             	add    esp,0x10
c0015379:	e9 4e ff ff ff       	jmp    c00152cc <cleanerTaskFunction(void*)+0x3c>
c001537e:	66 90                	xchg   ax,ax

c0015380 <terminateTask(int)>:
c0015380:	83 ec 14             	sub    esp,0x14
c0015383:	fa                   	cli    
c0015384:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001538a:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c0015390:	fa                   	cli    
c0015391:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0015397:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001539b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153a0:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00153a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153a8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00153ab:	50                   	push   eax
c00153ac:	68 6c 71 02 c0       	push   0xc002716c
c00153b1:	e8 56 90 00 00       	call   c001e40c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00153b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153bb:	83 c4 10             	add    esp,0x10
c00153be:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00153c5:	a1 48 71 02 c0       	mov    eax,ds:0xc0027148
c00153ca:	85 c0                	test   eax,eax
c00153cc:	74 5e                	je     c001542c <terminateTask(int)+0xac>
c00153ce:	83 ec 0c             	sub    esp,0xc
c00153d1:	c6 05 4c 71 02 c0 01 	mov    BYTE PTR ds:0xc002714c,0x1
c00153d8:	50                   	push   eax
c00153d9:	e8 42 fb ff ff       	call   c0014f20 <unblockTask(ThreadControlBlock*)>
c00153de:	83 c4 10             	add    esp,0x10
c00153e1:	8d 76 00             	lea    esi,[esi+0x0]
c00153e4:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00153e9:	48                   	dec    eax
c00153ea:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00153ef:	75 03                	jne    c00153f4 <terminateTask(int)+0x74>
c00153f1:	fb                   	sti    
c00153f2:	66 90                	xchg   ax,ax
c00153f4:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c00153f9:	48                   	dec    eax
c00153fa:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c00153ff:	75 0b                	jne    c001540c <terminateTask(int)+0x8c>
c0015401:	83 3d 60 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027160,0x0
c0015408:	75 36                	jne    c0015440 <terminateTask(int)+0xc0>
c001540a:	66 90                	xchg   ax,ax
c001540c:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015411:	48                   	dec    eax
c0015412:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015417:	75 03                	jne    c001541c <terminateTask(int)+0x9c>
c0015419:	fb                   	sti    
c001541a:	66 90                	xchg   ax,ax
c001541c:	fa                   	cli    
c001541d:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0015423:	90                   	nop
c0015424:	e8 33 f6 ff ff       	call   c0014a5c <schedule()>
c0015429:	eb e1                	jmp    c001540c <terminateTask(int)+0x8c>
c001542b:	90                   	nop
c001542c:	83 ec 0c             	sub    esp,0xc
c001542f:	68 32 09 02 c0       	push   0xc0020932
c0015434:	e8 cd 51 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0015439:	83 c4 10             	add    esp,0x10
c001543c:	eb a6                	jmp    c00153e4 <terminateTask(int)+0x64>
c001543e:	66 90                	xchg   ax,ax
c0015440:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c001544a:	eb d8                	jmp    c0015424 <terminateTask(int)+0xa4>

c001544c <Thr::terminateFromIRQ(int)>:
c001544c:	83 ec 18             	sub    esp,0x18
c001544f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015453:	50                   	push   eax
c0015454:	e8 27 ff ff ff       	call   c0015380 <terminateTask(int)>
c0015459:	90                   	nop
c001545a:	66 90                	xchg   ax,ax

c001545c <Semaphore::release()>:
c001545c:	83 ec 0c             	sub    esp,0xc
c001545f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015463:	fa                   	cli    
c0015464:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0015469:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001546f:	8d 48 01             	lea    ecx,[eax+0x1]
c0015472:	89 0d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ecx
c0015478:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001547b:	85 c9                	test   ecx,ecx
c001547d:	74 41                	je     c00154c0 <Semaphore::release()+0x64>
c001547f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015482:	83 ec 0c             	sub    esp,0xc
c0015485:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015488:	51                   	push   ecx
c0015489:	e8 92 fa ff ff       	call   c0014f20 <unblockTask(ThreadControlBlock*)>
c001548e:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0015493:	83 c4 10             	add    esp,0x10
c0015496:	48                   	dec    eax
c0015497:	90                   	nop
c0015498:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c001549d:	85 c0                	test   eax,eax
c001549f:	75 0b                	jne    c00154ac <Semaphore::release()+0x50>
c00154a1:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c00154a6:	85 c0                	test   eax,eax
c00154a8:	75 1e                	jne    c00154c8 <Semaphore::release()+0x6c>
c00154aa:	66 90                	xchg   ax,ax
c00154ac:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00154b1:	48                   	dec    eax
c00154b2:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00154b7:	75 03                	jne    c00154bc <Semaphore::release()+0x60>
c00154b9:	fb                   	sti    
c00154ba:	66 90                	xchg   ax,ax
c00154bc:	83 c4 0c             	add    esp,0xc
c00154bf:	c3                   	ret    
c00154c0:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c00154c3:	eb d3                	jmp    c0015498 <Semaphore::release()+0x3c>
c00154c5:	8d 76 00             	lea    esi,[esi+0x0]
c00154c8:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c00154d2:	e8 85 f5 ff ff       	call   c0014a5c <schedule()>
c00154d7:	eb d3                	jmp    c00154ac <Semaphore::release()+0x50>
c00154d9:	8d 76 00             	lea    esi,[esi+0x0]

c00154dc <__static_initialization_and_destruction_0(int, int)>:
c00154dc:	83 ec 0c             	sub    esp,0xc
c00154df:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00154e4:	0f 85 8e 00 00 00    	jne    c0015578 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00154ea:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00154f2:	0f 85 80 00 00 00    	jne    c0015578 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00154f8:	83 ec 0c             	sub    esp,0xc
c00154fb:	68 84 71 02 c0       	push   0xc0027184
c0015500:	e8 bb 91 00 00       	call   c001e6c0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015505:	83 c4 10             	add    esp,0x10
c0015508:	83 ec 04             	sub    esp,0x4
c001550b:	68 c8 15 02 c0       	push   0xc00215c8
c0015510:	68 84 71 02 c0       	push   0xc0027184
c0015515:	68 70 e6 01 c0       	push   0xc001e670
c001551a:	e8 a1 4f ff ff       	call   c000a4c0 <__cxa_atexit>
c001551f:	83 c4 10             	add    esp,0x10
c0015522:	83 ec 0c             	sub    esp,0xc
c0015525:	68 78 71 02 c0       	push   0xc0027178
c001552a:	e8 91 91 00 00       	call   c001e6c0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001552f:	83 c4 10             	add    esp,0x10
c0015532:	83 ec 04             	sub    esp,0x4
c0015535:	68 c8 15 02 c0       	push   0xc00215c8
c001553a:	68 78 71 02 c0       	push   0xc0027178
c001553f:	68 70 e6 01 c0       	push   0xc001e670
c0015544:	e8 77 4f ff ff       	call   c000a4c0 <__cxa_atexit>
c0015549:	83 c4 10             	add    esp,0x10
c001554c:	83 ec 0c             	sub    esp,0xc
c001554f:	68 6c 71 02 c0       	push   0xc002716c
c0015554:	e8 67 91 00 00       	call   c001e6c0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015559:	83 c4 10             	add    esp,0x10
c001555c:	83 ec 04             	sub    esp,0x4
c001555f:	68 c8 15 02 c0       	push   0xc00215c8
c0015564:	68 6c 71 02 c0       	push   0xc002716c
c0015569:	68 70 e6 01 c0       	push   0xc001e670
c001556e:	e8 4d 4f ff ff       	call   c000a4c0 <__cxa_atexit>
c0015573:	83 c4 10             	add    esp,0x10
c0015576:	66 90                	xchg   ax,ax
c0015578:	90                   	nop
c0015579:	83 c4 0c             	add    esp,0xc
c001557c:	c3                   	ret    
c001557d:	8d 76 00             	lea    esi,[esi+0x0]

c0015580 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015580:	83 ec 0c             	sub    esp,0xc
c0015583:	83 ec 08             	sub    esp,0x8
c0015586:	68 ff ff 00 00       	push   0xffff
c001558b:	6a 01                	push   0x1
c001558d:	e8 4a ff ff ff       	call   c00154dc <__static_initialization_and_destruction_0(int, int)>
c0015592:	83 c4 10             	add    esp,0x10
c0015595:	83 c4 0c             	add    esp,0xc
c0015598:	c3                   	ret    

c0015599 <Vm::inbv(unsigned short)>:
c0015599:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001559d:	66 81 fa fe fe       	cmp    dx,0xfefe
c00155a2:	75 06                	jne    c00155aa <Vm::inbv(unsigned short)+0x11>
c00155a4:	a0 cc 71 02 c0       	mov    al,ds:0xc00271cc
c00155a9:	c3                   	ret    
c00155aa:	ec                   	in     al,dx
c00155ab:	c3                   	ret    

c00155ac <Vm::outbv(unsigned short, unsigned char)>:
c00155ac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00155b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00155b4:	66 81 fa fe fe       	cmp    dx,0xfefe
c00155b9:	75 25                	jne    c00155e0 <Vm::outbv(unsigned short, unsigned char)+0x34>
c00155bb:	8b 0d cc 71 02 c0    	mov    ecx,DWORD PTR ds:0xc00271cc
c00155c1:	8d 51 01             	lea    edx,[ecx+0x1]
c00155c4:	88 81 e0 71 02 c0    	mov    BYTE PTR [ecx-0x3ffd8e20],al
c00155ca:	89 15 cc 71 02 c0    	mov    DWORD PTR ds:0xc00271cc,edx
c00155d0:	83 fa 20             	cmp    edx,0x20
c00155d3:	75 0c                	jne    c00155e1 <Vm::outbv(unsigned short, unsigned char)+0x35>
c00155d5:	c7 05 cc 71 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x1f
c00155df:	c3                   	ret    
c00155e0:	ee                   	out    dx,al
c00155e1:	c3                   	ret    

c00155e2 <Vm::realToLinear(unsigned short, unsigned short)>:
c00155e2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00155e7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00155ec:	c1 e0 04             	shl    eax,0x4
c00155ef:	01 d0                	add    eax,edx
c00155f1:	c3                   	ret    

c00155f2 <Vm::getSegment(unsigned int)>:
c00155f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00155f6:	c1 e8 10             	shr    eax,0x10
c00155f9:	c3                   	ret    

c00155fa <Vm::getOffset(unsigned int)>:
c00155fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00155fe:	c3                   	ret    

c00155ff <Vm::mainloop2()>:
c00155ff:	83 ec 18             	sub    esp,0x18
c0015602:	fa                   	cli    
c0015603:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0015609:	6a 02                	push   0x2
c001560b:	c6 05 c5 71 02 c0 01 	mov    BYTE PTR ds:0xc00271c5,0x1
c0015612:	e8 19 f6 ff ff       	call   c0014c30 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015617:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001561c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0015620:	52                   	push   edx
c0015621:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015625:	52                   	push   edx
c0015626:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c001562a:	52                   	push   edx
c001562b:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c001562f:	50                   	push   eax
c0015630:	e8 da ab fe ff       	call   c000020f <goToVM86>
c0015635:	83 c4 2c             	add    esp,0x2c
c0015638:	c3                   	ret    

c0015639 <Vm::mainVm8086Loop(void*)>:
c0015639:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001563e:	48                   	dec    eax
c001563f:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015644:	75 01                	jne    c0015647 <Vm::mainVm8086Loop(void*)+0xe>
c0015646:	fb                   	sti    
c0015647:	eb b6                	jmp    c00155ff <Vm::mainloop2()>

c0015649 <Vm::mainloop3(unsigned long)>:
c0015649:	83 ec 18             	sub    esp,0x18
c001564c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015650:	fa                   	cli    
c0015651:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0015657:	6a 02                	push   0x2
c0015659:	c6 05 c4 71 02 c0 01 	mov    BYTE PTR ds:0xc00271c4,0x1
c0015660:	a3 c0 71 02 c0       	mov    ds:0xc00271c0,eax
c0015665:	e8 c6 f5 ff ff       	call   c0014c30 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001566a:	83 c4 1c             	add    esp,0x1c
c001566d:	eb 90                	jmp    c00155ff <Vm::mainloop2()>

c001566f <Vm::initialise8086()>:
c001566f:	83 ec 0c             	sub    esp,0xc
c0015672:	68 80 00 00 00       	push   0x80
c0015677:	6a 00                	push   0x0
c0015679:	68 39 56 01 c0       	push   0xc0015639
c001567e:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0015684:	e8 8b f1 ff ff       	call   c0014814 <Process::createThread(void (*)(void*), void*, int)>
c0015689:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0015690:	a3 c8 71 02 c0       	mov    ds:0xc00271c8,eax
c0015695:	68 00 01 00 00       	push   0x100
c001569a:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001569f:	6a 00                	push   0x0
c00156a1:	6a 00                	push   0x0
c00156a3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00156a9:	e8 58 46 ff ff       	call   c0009d06 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00156ae:	83 c4 2c             	add    esp,0x2c
c00156b1:	c3                   	ret    

c00156b2 <Vm::finish8086()>:
c00156b2:	53                   	push   ebx
c00156b3:	83 ec 08             	sub    esp,0x8
c00156b6:	fa                   	cli    
c00156b7:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00156bd:	80 3d c4 71 02 c0 00 	cmp    BYTE PTR ds:0xc00271c4,0x0
c00156c4:	75 15                	jne    c00156db <Vm::finish8086()+0x29>
c00156c6:	e8 91 f3 ff ff       	call   c0014a5c <schedule()>
c00156cb:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00156d0:	48                   	dec    eax
c00156d1:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00156d6:	75 de                	jne    c00156b6 <Vm::finish8086()+0x4>
c00156d8:	fb                   	sti    
c00156d9:	eb db                	jmp    c00156b6 <Vm::finish8086()+0x4>
c00156db:	83 ec 0c             	sub    esp,0xc
c00156de:	8b 1d c0 71 02 c0    	mov    ebx,DWORD PTR ds:0xc00271c0
c00156e4:	ff 35 c8 71 02 c0    	push   DWORD PTR ds:0xc00271c8
c00156ea:	c6 05 c4 71 02 c0 00 	mov    BYTE PTR ds:0xc00271c4,0x0
c00156f1:	e8 2a f8 ff ff       	call   c0014f20 <unblockTask(ThreadControlBlock*)>
c00156f6:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00156fb:	83 c4 10             	add    esp,0x10
c00156fe:	8d 50 ff             	lea    edx,[eax-0x1]
c0015701:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c0015707:	85 d2                	test   edx,edx
c0015709:	75 01                	jne    c001570c <Vm::finish8086()+0x5a>
c001570b:	fb                   	sti    
c001570c:	89 d8                	mov    eax,ebx
c001570e:	83 c4 08             	add    esp,0x8
c0015711:	5b                   	pop    ebx
c0015712:	c3                   	ret    

c0015713 <Vm::getOutput8086(unsigned char*)>:
c0015713:	57                   	push   edi
c0015714:	8b 0d cc 71 02 c0    	mov    ecx,DWORD PTR ds:0xc00271cc
c001571a:	56                   	push   esi
c001571b:	be e0 71 02 c0       	mov    esi,0xc00271e0
c0015720:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015724:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015726:	a1 cc 71 02 c0       	mov    eax,ds:0xc00271cc
c001572b:	5e                   	pop    esi
c001572c:	c7 05 cc 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x0
c0015736:	5f                   	pop    edi
c0015737:	c3                   	ret    

c0015738 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015738:	55                   	push   ebp
c0015739:	57                   	push   edi
c001573a:	56                   	push   esi
c001573b:	53                   	push   ebx
c001573c:	83 ec 0c             	sub    esp,0xc
c001573f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0015743:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0015747:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001574b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001574f:	fa                   	cli    
c0015750:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0015756:	80 3d c5 71 02 c0 00 	cmp    BYTE PTR ds:0xc00271c5,0x0
c001575d:	75 15                	jne    c0015774 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c001575f:	e8 f8 f2 ff ff       	call   c0014a5c <schedule()>
c0015764:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015769:	48                   	dec    eax
c001576a:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001576f:	75 de                	jne    c001574f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015771:	fb                   	sti    
c0015772:	eb db                	jmp    c001574f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015774:	a1 c8 71 02 c0       	mov    eax,ds:0xc00271c8
c0015779:	c7 05 cc 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x0
c0015783:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0015787:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001578b:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001578f:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015793:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015797:	0f b7 ff             	movzx  edi,di
c001579a:	0f b7 f6             	movzx  esi,si
c001579d:	50                   	push   eax
c001579e:	6a 20                	push   0x20
c00157a0:	6a 00                	push   0x0
c00157a2:	68 e0 71 02 c0       	push   0xc00271e0
c00157a7:	e8 14 ad fe ff       	call   c00004c0 <memset>
c00157ac:	5a                   	pop    edx
c00157ad:	59                   	pop    ecx
c00157ae:	57                   	push   edi
c00157af:	56                   	push   esi
c00157b0:	e8 2d fe ff ff       	call   c00155e2 <Vm::realToLinear(unsigned short, unsigned short)>
c00157b5:	83 c4 10             	add    esp,0x10
c00157b8:	89 c7                	mov    edi,eax
c00157ba:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00157be:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00157c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00157c4:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00157c9:	c6 05 c5 71 02 c0 00 	mov    BYTE PTR ds:0xc00271c5,0x0
c00157d0:	48                   	dec    eax
c00157d1:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00157d6:	75 01                	jne    c00157d9 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00157d8:	fb                   	sti    
c00157d9:	83 ec 0c             	sub    esp,0xc
c00157dc:	ff 35 c8 71 02 c0    	push   DWORD PTR ds:0xc00271c8
c00157e2:	e8 39 f7 ff ff       	call   c0014f20 <unblockTask(ThreadControlBlock*)>
c00157e7:	83 c4 1c             	add    esp,0x1c
c00157ea:	b0 01                	mov    al,0x1
c00157ec:	5b                   	pop    ebx
c00157ed:	5e                   	pop    esi
c00157ee:	5f                   	pop    edi
c00157ef:	5d                   	pop    ebp
c00157f0:	c3                   	ret    

c00157f1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00157f1:	55                   	push   ebp
c00157f2:	57                   	push   edi
c00157f3:	56                   	push   esi
c00157f4:	53                   	push   ebx
c00157f5:	83 ec 2c             	sub    esp,0x2c
c00157f8:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00157fc:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0015800:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0015804:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0015808:	fa                   	cli    
c0015809:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001580f:	0f b6 35 c5 71 02 c0 	movzx  esi,BYTE PTR ds:0xc00271c5
c0015816:	89 f0                	mov    eax,esi
c0015818:	84 c0                	test   al,al
c001581a:	75 1d                	jne    c0015839 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001581c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015820:	e8 37 f2 ff ff       	call   c0014a5c <schedule()>
c0015825:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001582a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001582e:	48                   	dec    eax
c001582f:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015834:	75 d2                	jne    c0015808 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015836:	fb                   	sti    
c0015837:	eb cf                	jmp    c0015808 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015839:	a1 c8 71 02 c0       	mov    eax,ds:0xc00271c8
c001583e:	c7 05 cc 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x0
c0015848:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c001584c:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015850:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0015854:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0015858:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001585c:	50                   	push   eax
c001585d:	6a 20                	push   0x20
c001585f:	6a 00                	push   0x0
c0015861:	68 e0 71 02 c0       	push   0xc00271e0
c0015866:	e8 55 ac fe ff       	call   c00004c0 <memset>
c001586b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015872:	e8 ee 1f ff ff       	call   c0007865 <malloc>
c0015877:	83 c4 0c             	add    esp,0xc
c001587a:	89 c3                	mov    ebx,eax
c001587c:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0015882:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015886:	50                   	push   eax
c0015887:	e8 f0 52 ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c001588c:	83 c4 10             	add    esp,0x10
c001588f:	85 db                	test   ebx,ebx
c0015891:	75 0a                	jne    c001589d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0015893:	83 ec 0c             	sub    esp,0xc
c0015896:	68 5c 0a 02 c0       	push   0xc0020a5c
c001589b:	eb 3e                	jmp    c00158db <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001589d:	50                   	push   eax
c001589e:	8d 44 24 17          	lea    eax,[esp+0x17]
c00158a2:	50                   	push   eax
c00158a3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00158a7:	50                   	push   eax
c00158a8:	53                   	push   ebx
c00158a9:	e8 3a 56 ff ff       	call   c000aee8 <File::stat(unsigned long long*, bool*)>
c00158ae:	83 c4 10             	add    esp,0x10
c00158b1:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00158b6:	74 0a                	je     c00158c2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c00158b8:	83 ec 0c             	sub    esp,0xc
c00158bb:	68 70 0a 02 c0       	push   0xc0020a70
c00158c0:	eb 19                	jmp    c00158db <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00158c2:	51                   	push   ecx
c00158c3:	51                   	push   ecx
c00158c4:	6a 01                	push   0x1
c00158c6:	53                   	push   ebx
c00158c7:	e8 70 53 ff ff       	call   c000ac3c <File::open(FileOpenMode)>
c00158cc:	83 c4 10             	add    esp,0x10
c00158cf:	85 c0                	test   eax,eax
c00158d1:	74 24                	je     c00158f7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c00158d3:	83 ec 0c             	sub    esp,0xc
c00158d6:	68 89 0a 02 c0       	push   0xc0020a89
c00158db:	e8 e7 aa ff ff       	call   c00103c7 <KePanic(char const*)>
c00158e0:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00158e5:	83 c4 10             	add    esp,0x10
c00158e8:	48                   	dec    eax
c00158e9:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00158ee:	85 c0                	test   eax,eax
c00158f0:	75 01                	jne    c00158f3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c00158f2:	fb                   	sti    
c00158f3:	31 f6                	xor    esi,esi
c00158f5:	eb 58                	jmp    c001594f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c00158f7:	0f b7 ed             	movzx  ebp,bp
c00158fa:	50                   	push   eax
c00158fb:	0f b7 ff             	movzx  edi,di
c00158fe:	50                   	push   eax
c00158ff:	55                   	push   ebp
c0015900:	57                   	push   edi
c0015901:	e8 dc fc ff ff       	call   c00155e2 <Vm::realToLinear(unsigned short, unsigned short)>
c0015906:	5a                   	pop    edx
c0015907:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015909:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001590d:	51                   	push   ecx
c001590e:	50                   	push   eax
c001590f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015913:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015917:	53                   	push   ebx
c0015918:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001591b:	83 c4 14             	add    esp,0x14
c001591e:	53                   	push   ebx
c001591f:	e8 76 53 ff ff       	call   c000ac9a <File::close()>
c0015924:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015929:	83 c4 10             	add    esp,0x10
c001592c:	48                   	dec    eax
c001592d:	c6 05 c5 71 02 c0 00 	mov    BYTE PTR ds:0xc00271c5,0x0
c0015934:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015939:	85 c0                	test   eax,eax
c001593b:	75 01                	jne    c001593e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001593d:	fb                   	sti    
c001593e:	83 ec 0c             	sub    esp,0xc
c0015941:	ff 35 c8 71 02 c0    	push   DWORD PTR ds:0xc00271c8
c0015947:	e8 d4 f5 ff ff       	call   c0014f20 <unblockTask(ThreadControlBlock*)>
c001594c:	83 c4 10             	add    esp,0x10
c001594f:	83 c4 2c             	add    esp,0x2c
c0015952:	89 f0                	mov    eax,esi
c0015954:	5b                   	pop    ebx
c0015955:	5e                   	pop    esi
c0015956:	5f                   	pop    edi
c0015957:	5d                   	pop    ebp
c0015958:	c3                   	ret    

c0015959 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0015959:	57                   	push   edi
c001595a:	56                   	push   esi
c001595b:	53                   	push   ebx
c001595c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015960:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015964:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015968:	83 e8 06             	sub    eax,0x6
c001596b:	0f b7 c0             	movzx  eax,ax
c001596e:	50                   	push   eax
c001596f:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0015974:	50                   	push   eax
c0015975:	e8 68 fc ff ff       	call   c00155e2 <Vm::realToLinear(unsigned short, unsigned short)>
c001597a:	5a                   	pop    edx
c001597b:	5e                   	pop    esi
c001597c:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001597f:	8d 56 fa             	lea    edx,[esi-0x6]
c0015982:	81 e2 ff ff 00 00    	and    edx,0xffff
c0015988:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001598b:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001598e:	83 c2 02             	add    edx,0x2
c0015991:	66 89 10             	mov    WORD PTR [eax],dx
c0015994:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0015997:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001599b:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001599e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00159a2:	89 d6                	mov    esi,edx
c00159a4:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00159aa:	66 81 e6 ff fd       	and    si,0xfdff
c00159af:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c00159b3:	74 07                	je     c00159bc <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00159b5:	89 d6                	mov    esi,edx
c00159b7:	66 81 ce 00 02       	or     si,0x200
c00159bc:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00159c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159c5:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00159c9:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c00159d1:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00159d4:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c00159dc:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00159df:	5b                   	pop    ebx
c00159e0:	5e                   	pop    esi
c00159e1:	5f                   	pop    edi
c00159e2:	c3                   	ret    

c00159e3 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00159e3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00159e8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00159ed:	c1 e0 04             	shl    eax,0x4
c00159f0:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00159f3:	c3                   	ret    

c00159f4 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00159f4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00159f9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00159fe:	c1 e0 04             	shl    eax,0x4
c0015a01:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0015a05:	c3                   	ret    

c0015a06 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0015a06:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015a0b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015a10:	c1 e0 04             	shl    eax,0x4
c0015a13:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0015a16:	c3                   	ret    

c0015a17 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0015a17:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015a1c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015a21:	c1 e0 04             	shl    eax,0x4
c0015a24:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015a28:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0015a2b:	c3                   	ret    

c0015a2c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0015a2c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015a31:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015a36:	c1 e0 04             	shl    eax,0x4
c0015a39:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015a3d:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0015a41:	c3                   	ret    

c0015a42 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0015a42:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015a47:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015a4c:	c1 e0 04             	shl    eax,0x4
c0015a4f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015a53:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0015a56:	c3                   	ret    

c0015a57 <Vm::faultHandler(regs*)>:
c0015a57:	55                   	push   ebp
c0015a58:	57                   	push   edi
c0015a59:	56                   	push   esi
c0015a5a:	53                   	push   ebx
c0015a5b:	83 ec 1c             	sub    esp,0x1c
c0015a5e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0015a62:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015a65:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0015a69:	0f b7 f8             	movzx  edi,ax
c0015a6c:	52                   	push   edx
c0015a6d:	0f b7 c0             	movzx  eax,ax
c0015a70:	50                   	push   eax
c0015a71:	e8 6c fb ff ff       	call   c00155e2 <Vm::realToLinear(unsigned short, unsigned short)>
c0015a76:	5a                   	pop    edx
c0015a77:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0015a7a:	59                   	pop    ecx
c0015a7b:	89 c1                	mov    ecx,eax
c0015a7d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0015a80:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015a84:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015a89:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015a8d:	0f b7 c5             	movzx  eax,bp
c0015a90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015a94:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015a98:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015a9c:	e8 41 fb ff ff       	call   c00155e2 <Vm::realToLinear(unsigned short, unsigned short)>
c0015aa1:	5e                   	pop    esi
c0015aa2:	be 06 00 00 00       	mov    esi,0x6
c0015aa7:	5a                   	pop    edx
c0015aa8:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0015aad:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0015ab2:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0015ab5:	80 fa 9d             	cmp    dl,0x9d
c0015ab8:	0f 84 2c 02 00 00    	je     c0015cea <Vm::faultHandler(regs*)+0x293>
c0015abe:	0f 87 91 00 00 00    	ja     c0015b55 <Vm::faultHandler(regs*)+0xfe>
c0015ac4:	80 fa 66             	cmp    dl,0x66
c0015ac7:	0f 84 98 01 00 00    	je     c0015c65 <Vm::faultHandler(regs*)+0x20e>
c0015acd:	77 47                	ja     c0015b16 <Vm::faultHandler(regs*)+0xbf>
c0015acf:	80 fa 36             	cmp    dl,0x36
c0015ad2:	0f 84 80 01 00 00    	je     c0015c58 <Vm::faultHandler(regs*)+0x201>
c0015ad8:	77 1a                	ja     c0015af4 <Vm::faultHandler(regs*)+0x9d>
c0015ada:	80 fa 26             	cmp    dl,0x26
c0015add:	0f 84 4e 01 00 00    	je     c0015c31 <Vm::faultHandler(regs*)+0x1da>
c0015ae3:	80 fa 2e             	cmp    dl,0x2e
c0015ae6:	0f 85 e2 05 00 00    	jne    c00160ce <Vm::faultHandler(regs*)+0x677>
c0015aec:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015aef:	31 f6                	xor    esi,esi
c0015af1:	41                   	inc    ecx
c0015af2:	eb be                	jmp    c0015ab2 <Vm::faultHandler(regs*)+0x5b>
c0015af4:	80 fa 64             	cmp    dl,0x64
c0015af7:	0f 84 41 01 00 00    	je     c0015c3e <Vm::faultHandler(regs*)+0x1e7>
c0015afd:	0f 87 48 01 00 00    	ja     c0015c4b <Vm::faultHandler(regs*)+0x1f4>
c0015b03:	80 fa 3e             	cmp    dl,0x3e
c0015b06:	0f 85 c2 05 00 00    	jne    c00160ce <Vm::faultHandler(regs*)+0x677>
c0015b0c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015b0f:	be 01 00 00 00       	mov    esi,0x1
c0015b14:	eb db                	jmp    c0015af1 <Vm::faultHandler(regs*)+0x9a>
c0015b16:	80 fa 6d             	cmp    dl,0x6d
c0015b19:	0f 84 ec 02 00 00    	je     c0015e0b <Vm::faultHandler(regs*)+0x3b4>
c0015b1f:	77 17                	ja     c0015b38 <Vm::faultHandler(regs*)+0xe1>
c0015b21:	80 fa 67             	cmp    dl,0x67
c0015b24:	0f 84 48 01 00 00    	je     c0015c72 <Vm::faultHandler(regs*)+0x21b>
c0015b2a:	80 fa 6c             	cmp    dl,0x6c
c0015b2d:	0f 84 69 02 00 00    	je     c0015d9c <Vm::faultHandler(regs*)+0x345>
c0015b33:	e9 96 05 00 00       	jmp    c00160ce <Vm::faultHandler(regs*)+0x677>
c0015b38:	80 fa 6f             	cmp    dl,0x6f
c0015b3b:	0f 84 f4 03 00 00    	je     c0015f35 <Vm::faultHandler(regs*)+0x4de>
c0015b41:	0f 82 59 03 00 00    	jb     c0015ea0 <Vm::faultHandler(regs*)+0x449>
c0015b47:	80 fa 9c             	cmp    dl,0x9c
c0015b4a:	0f 84 2f 01 00 00    	je     c0015c7f <Vm::faultHandler(regs*)+0x228>
c0015b50:	e9 79 05 00 00       	jmp    c00160ce <Vm::faultHandler(regs*)+0x677>
c0015b55:	80 fa ec             	cmp    dl,0xec
c0015b58:	0f 84 14 05 00 00    	je     c0016072 <Vm::faultHandler(regs*)+0x61b>
c0015b5e:	77 7b                	ja     c0015bdb <Vm::faultHandler(regs*)+0x184>
c0015b60:	80 fa e4             	cmp    dl,0xe4
c0015b63:	0f 84 93 04 00 00    	je     c0015ffc <Vm::faultHandler(regs*)+0x5a5>
c0015b69:	77 53                	ja     c0015bbe <Vm::faultHandler(regs*)+0x167>
c0015b6b:	80 fa cd             	cmp    dl,0xcd
c0015b6e:	0f 84 d9 01 00 00    	je     c0015d4d <Vm::faultHandler(regs*)+0x2f6>
c0015b74:	80 fa cf             	cmp    dl,0xcf
c0015b77:	0f 85 51 05 00 00    	jne    c00160ce <Vm::faultHandler(regs*)+0x677>
c0015b7d:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0015b80:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0015b83:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0015b87:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0015b8a:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0015b8e:	81 ca 00 02 02 00    	or     edx,0x20200
c0015b94:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0015b97:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0015b9b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015ba1:	66 c1 e8 09          	shr    ax,0x9
c0015ba5:	83 e0 01             	and    eax,0x1
c0015ba8:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0015bab:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0015bae:	83 c0 06             	add    eax,0x6
c0015bb1:	25 ff ff 00 00       	and    eax,0xffff
c0015bb6:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0015bb9:	e9 0c 05 00 00       	jmp    c00160ca <Vm::faultHandler(regs*)+0x673>
c0015bbe:	80 fa e6             	cmp    dl,0xe6
c0015bc1:	0f 84 7f 04 00 00    	je     c0016046 <Vm::faultHandler(regs*)+0x5ef>
c0015bc7:	0f 82 4b 04 00 00    	jb     c0016018 <Vm::faultHandler(regs*)+0x5c1>
c0015bcd:	80 fa e7             	cmp    dl,0xe7
c0015bd0:	0f 84 87 04 00 00    	je     c001605d <Vm::faultHandler(regs*)+0x606>
c0015bd6:	e9 f3 04 00 00       	jmp    c00160ce <Vm::faultHandler(regs*)+0x677>
c0015bdb:	80 fa ef             	cmp    dl,0xef
c0015bde:	0f 84 d1 04 00 00    	je     c00160b5 <Vm::faultHandler(regs*)+0x65e>
c0015be4:	77 28                	ja     c0015c0e <Vm::faultHandler(regs*)+0x1b7>
c0015be6:	80 fa ed             	cmp    dl,0xed
c0015be9:	0f 84 9f 04 00 00    	je     c001608e <Vm::faultHandler(regs*)+0x637>
c0015bef:	80 fa ee             	cmp    dl,0xee
c0015bf2:	0f 85 d6 04 00 00    	jne    c00160ce <Vm::faultHandler(regs*)+0x677>
c0015bf8:	50                   	push   eax
c0015bf9:	50                   	push   eax
c0015bfa:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0015bfe:	50                   	push   eax
c0015bff:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0015c03:	50                   	push   eax
c0015c04:	e8 a3 f9 ff ff       	call   c00155ac <Vm::outbv(unsigned short, unsigned char)>
c0015c09:	e9 9f 04 00 00       	jmp    c00160ad <Vm::faultHandler(regs*)+0x656>
c0015c0e:	80 fa fa             	cmp    dl,0xfa
c0015c11:	0f 84 69 01 00 00    	je     c0015d80 <Vm::faultHandler(regs*)+0x329>
c0015c17:	80 fa fb             	cmp    dl,0xfb
c0015c1a:	0f 84 6e 01 00 00    	je     c0015d8e <Vm::faultHandler(regs*)+0x337>
c0015c20:	80 fa f3             	cmp    dl,0xf3
c0015c23:	0f 85 a5 04 00 00    	jne    c00160ce <Vm::faultHandler(regs*)+0x677>
c0015c29:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015c2c:	e9 c0 fe ff ff       	jmp    c0015af1 <Vm::faultHandler(regs*)+0x9a>
c0015c31:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015c34:	be 02 00 00 00       	mov    esi,0x2
c0015c39:	e9 b3 fe ff ff       	jmp    c0015af1 <Vm::faultHandler(regs*)+0x9a>
c0015c3e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015c41:	be 03 00 00 00       	mov    esi,0x3
c0015c46:	e9 a6 fe ff ff       	jmp    c0015af1 <Vm::faultHandler(regs*)+0x9a>
c0015c4b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015c4e:	be 04 00 00 00       	mov    esi,0x4
c0015c53:	e9 99 fe ff ff       	jmp    c0015af1 <Vm::faultHandler(regs*)+0x9a>
c0015c58:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015c5b:	be 05 00 00 00       	mov    esi,0x5
c0015c60:	e9 8c fe ff ff       	jmp    c0015af1 <Vm::faultHandler(regs*)+0x9a>
c0015c65:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015c68:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0015c6d:	e9 7f fe ff ff       	jmp    c0015af1 <Vm::faultHandler(regs*)+0x9a>
c0015c72:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015c75:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0015c7a:	e9 72 fe ff ff       	jmp    c0015af1 <Vm::faultHandler(regs*)+0x9a>
c0015c7f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0015c82:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015c86:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015c8b:	74 30                	je     c0015cbd <Vm::faultHandler(regs*)+0x266>
c0015c8d:	83 e9 04             	sub    ecx,0x4
c0015c90:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0015c96:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0015c9c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0015c9f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0015ca2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015ca8:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0015cac:	0f 84 15 04 00 00    	je     c00160c7 <Vm::faultHandler(regs*)+0x670>
c0015cb2:	80 ce 02             	or     dh,0x2
c0015cb5:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0015cb8:	e9 0a 04 00 00       	jmp    c00160c7 <Vm::faultHandler(regs*)+0x670>
c0015cbd:	83 e9 02             	sub    ecx,0x2
c0015cc0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0015cc6:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0015cc9:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0015ccd:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015cd3:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0015cd7:	74 05                	je     c0015cde <Vm::faultHandler(regs*)+0x287>
c0015cd9:	80 ce 02             	or     dh,0x2
c0015cdc:	eb 03                	jmp    c0015ce1 <Vm::faultHandler(regs*)+0x28a>
c0015cde:	80 e6 fd             	and    dh,0xfd
c0015ce1:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0015ce5:	e9 dd 03 00 00       	jmp    c00160c7 <Vm::faultHandler(regs*)+0x670>
c0015cea:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015cef:	74 2a                	je     c0015d1b <Vm::faultHandler(regs*)+0x2c4>
c0015cf1:	8b 10                	mov    edx,DWORD PTR [eax]
c0015cf3:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0015cf9:	81 ca 00 02 02 00    	or     edx,0x20200
c0015cff:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0015d02:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d04:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015d0a:	c1 e8 09             	shr    eax,0x9
c0015d0d:	83 e0 01             	and    eax,0x1
c0015d10:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0015d13:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0015d16:	83 c0 04             	add    eax,0x4
c0015d19:	eb 25                	jmp    c0015d40 <Vm::faultHandler(regs*)+0x2e9>
c0015d1b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0015d1e:	81 ca 00 02 02 00    	or     edx,0x20200
c0015d24:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0015d27:	66 8b 00             	mov    ax,WORD PTR [eax]
c0015d2a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015d30:	66 c1 e8 09          	shr    ax,0x9
c0015d34:	83 e0 01             	and    eax,0x1
c0015d37:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0015d3a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0015d3d:	83 c0 02             	add    eax,0x2
c0015d40:	25 ff ff 00 00       	and    eax,0xffff
c0015d45:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0015d48:	e9 7a 03 00 00       	jmp    c00160c7 <Vm::faultHandler(regs*)+0x670>
c0015d4d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015d51:	3c ee                	cmp    al,0xee
c0015d53:	75 10                	jne    c0015d65 <Vm::faultHandler(regs*)+0x30e>
c0015d55:	83 ec 0c             	sub    esp,0xc
c0015d58:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0015d5b:	e8 e9 f8 ff ff       	call   c0015649 <Vm::mainloop3(unsigned long)>
c0015d60:	e9 4b 03 00 00       	jmp    c00160b0 <Vm::faultHandler(regs*)+0x659>
c0015d65:	83 ec 0c             	sub    esp,0xc
c0015d68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015d6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d70:	51                   	push   ecx
c0015d71:	50                   	push   eax
c0015d72:	53                   	push   ebx
c0015d73:	e8 e1 fb ff ff       	call   c0015959 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0015d78:	83 c4 20             	add    esp,0x20
c0015d7b:	e9 4a 03 00 00       	jmp    c00160ca <Vm::faultHandler(regs*)+0x673>
c0015d80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d85:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0015d89:	e9 39 03 00 00       	jmp    c00160c7 <Vm::faultHandler(regs*)+0x670>
c0015d8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d93:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0015d97:	e9 2b 03 00 00       	jmp    c00160c7 <Vm::faultHandler(regs*)+0x670>
c0015d9c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0015d9f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015da4:	74 2b                	je     c0015dd1 <Vm::faultHandler(regs*)+0x37a>
c0015da6:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0015dad:	76 22                	jbe    c0015dd1 <Vm::faultHandler(regs*)+0x37a>
c0015daf:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015db3:	50                   	push   eax
c0015db4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015db8:	50                   	push   eax
c0015db9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015dbd:	50                   	push   eax
c0015dbe:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015dc2:	50                   	push   eax
c0015dc3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015dc7:	50                   	push   eax
c0015dc8:	6a 6c                	push   0x6c
c0015dca:	6a 6c                	push   0x6c
c0015dcc:	e9 b9 01 00 00       	jmp    c0015f8a <Vm::faultHandler(regs*)+0x533>
c0015dd1:	83 ec 0c             	sub    esp,0xc
c0015dd4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0015dd8:	0f b7 f6             	movzx  esi,si
c0015ddb:	50                   	push   eax
c0015ddc:	e8 b8 f7 ff ff       	call   c0015599 <Vm::inbv(unsigned short)>
c0015de1:	83 c4 0c             	add    esp,0xc
c0015de4:	0f b6 c0             	movzx  eax,al
c0015de7:	50                   	push   eax
c0015de8:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0015dec:	50                   	push   eax
c0015ded:	56                   	push   esi
c0015dee:	e8 24 fc ff ff       	call   c0015a17 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0015df3:	83 c4 10             	add    esp,0x10
c0015df6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015df9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0015dfd:	74 03                	je     c0015e02 <Vm::faultHandler(regs*)+0x3ab>
c0015dff:	48                   	dec    eax
c0015e00:	eb 01                	jmp    c0015e03 <Vm::faultHandler(regs*)+0x3ac>
c0015e02:	40                   	inc    eax
c0015e03:	0f b7 c0             	movzx  eax,ax
c0015e06:	e9 8d 00 00 00       	jmp    c0015e98 <Vm::faultHandler(regs*)+0x441>
c0015e0b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0015e0e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015e11:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015e16:	74 29                	je     c0015e41 <Vm::faultHandler(regs*)+0x3ea>
c0015e18:	3d ff ff 00 00       	cmp    eax,0xffff
c0015e1d:	76 22                	jbe    c0015e41 <Vm::faultHandler(regs*)+0x3ea>
c0015e1f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015e23:	50                   	push   eax
c0015e24:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015e28:	50                   	push   eax
c0015e29:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015e2d:	50                   	push   eax
c0015e2e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015e32:	50                   	push   eax
c0015e33:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015e37:	50                   	push   eax
c0015e38:	6a 6d                	push   0x6d
c0015e3a:	6a 6d                	push   0x6d
c0015e3c:	e9 49 01 00 00       	jmp    c0015f8a <Vm::faultHandler(regs*)+0x533>
c0015e41:	0f b7 c8             	movzx  ecx,ax
c0015e44:	0f b7 f6             	movzx  esi,si
c0015e47:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0015e4a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015e4f:	74 20                	je     c0015e71 <Vm::faultHandler(regs*)+0x41a>
c0015e51:	ed                   	in     eax,dx
c0015e52:	55                   	push   ebp
c0015e53:	50                   	push   eax
c0015e54:	51                   	push   ecx
c0015e55:	56                   	push   esi
c0015e56:	e8 e7 fb ff ff       	call   c0015a42 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0015e5b:	83 c4 10             	add    esp,0x10
c0015e5e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015e61:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0015e65:	74 05                	je     c0015e6c <Vm::faultHandler(regs*)+0x415>
c0015e67:	83 e8 04             	sub    eax,0x4
c0015e6a:	eb 27                	jmp    c0015e93 <Vm::faultHandler(regs*)+0x43c>
c0015e6c:	83 c0 04             	add    eax,0x4
c0015e6f:	eb 22                	jmp    c0015e93 <Vm::faultHandler(regs*)+0x43c>
c0015e71:	66 ed                	in     ax,dx
c0015e73:	0f b7 c0             	movzx  eax,ax
c0015e76:	57                   	push   edi
c0015e77:	50                   	push   eax
c0015e78:	51                   	push   ecx
c0015e79:	56                   	push   esi
c0015e7a:	e8 ad fb ff ff       	call   c0015a2c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0015e7f:	83 c4 10             	add    esp,0x10
c0015e82:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015e85:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0015e89:	74 05                	je     c0015e90 <Vm::faultHandler(regs*)+0x439>
c0015e8b:	83 e8 02             	sub    eax,0x2
c0015e8e:	eb 03                	jmp    c0015e93 <Vm::faultHandler(regs*)+0x43c>
c0015e90:	83 c0 02             	add    eax,0x2
c0015e93:	25 ff ff 00 00       	and    eax,0xffff
c0015e98:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0015e9b:	e9 27 02 00 00       	jmp    c00160c7 <Vm::faultHandler(regs*)+0x670>
c0015ea0:	8d 46 ff             	lea    eax,[esi-0x1]
c0015ea3:	3c 05                	cmp    al,0x5
c0015ea5:	77 24                	ja     c0015ecb <Vm::faultHandler(regs*)+0x474>
c0015ea7:	0f b6 c0             	movzx  eax,al
c0015eaa:	ff 24 85 fc 0a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf504]
c0015eb1:	0f b7 fd             	movzx  edi,bp
c0015eb4:	eb 15                	jmp    c0015ecb <Vm::faultHandler(regs*)+0x474>
c0015eb6:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0015eba:	eb 0f                	jmp    c0015ecb <Vm::faultHandler(regs*)+0x474>
c0015ebc:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0015ec0:	eb 09                	jmp    c0015ecb <Vm::faultHandler(regs*)+0x474>
c0015ec2:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0015ec6:	eb 03                	jmp    c0015ecb <Vm::faultHandler(regs*)+0x474>
c0015ec8:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0015ecb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0015ece:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015ed3:	74 29                	je     c0015efe <Vm::faultHandler(regs*)+0x4a7>
c0015ed5:	3d ff ff 00 00       	cmp    eax,0xffff
c0015eda:	76 22                	jbe    c0015efe <Vm::faultHandler(regs*)+0x4a7>
c0015edc:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015ee0:	50                   	push   eax
c0015ee1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015ee5:	50                   	push   eax
c0015ee6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015eea:	50                   	push   eax
c0015eeb:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015eef:	50                   	push   eax
c0015ef0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015ef4:	50                   	push   eax
c0015ef5:	6a 6e                	push   0x6e
c0015ef7:	6a 6e                	push   0x6e
c0015ef9:	e9 8c 00 00 00       	jmp    c0015f8a <Vm::faultHandler(regs*)+0x533>
c0015efe:	0f b7 c0             	movzx  eax,ax
c0015f01:	52                   	push   edx
c0015f02:	52                   	push   edx
c0015f03:	50                   	push   eax
c0015f04:	57                   	push   edi
c0015f05:	e8 d9 fa ff ff       	call   c00159e3 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0015f0a:	59                   	pop    ecx
c0015f0b:	0f b6 c0             	movzx  eax,al
c0015f0e:	5e                   	pop    esi
c0015f0f:	50                   	push   eax
c0015f10:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0015f14:	50                   	push   eax
c0015f15:	e8 92 f6 ff ff       	call   c00155ac <Vm::outbv(unsigned short, unsigned char)>
c0015f1a:	83 c4 10             	add    esp,0x10
c0015f1d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0015f20:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0015f24:	74 03                	je     c0015f29 <Vm::faultHandler(regs*)+0x4d2>
c0015f26:	48                   	dec    eax
c0015f27:	eb 01                	jmp    c0015f2a <Vm::faultHandler(regs*)+0x4d3>
c0015f29:	40                   	inc    eax
c0015f2a:	0f b7 c0             	movzx  eax,ax
c0015f2d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0015f30:	e9 92 01 00 00       	jmp    c00160c7 <Vm::faultHandler(regs*)+0x670>
c0015f35:	8d 46 ff             	lea    eax,[esi-0x1]
c0015f38:	3c 05                	cmp    al,0x5
c0015f3a:	77 1f                	ja     c0015f5b <Vm::faultHandler(regs*)+0x504>
c0015f3c:	0f b6 c0             	movzx  eax,al
c0015f3f:	ff 24 85 14 0b 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf4ec]
c0015f46:	89 ef                	mov    edi,ebp
c0015f48:	eb 11                	jmp    c0015f5b <Vm::faultHandler(regs*)+0x504>
c0015f4a:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0015f4d:	eb 0c                	jmp    c0015f5b <Vm::faultHandler(regs*)+0x504>
c0015f4f:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0015f52:	eb 07                	jmp    c0015f5b <Vm::faultHandler(regs*)+0x504>
c0015f54:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0015f57:	eb 02                	jmp    c0015f5b <Vm::faultHandler(regs*)+0x504>
c0015f59:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0015f5b:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0015f5e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015f63:	74 37                	je     c0015f9c <Vm::faultHandler(regs*)+0x545>
c0015f65:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0015f6b:	76 2f                	jbe    c0015f9c <Vm::faultHandler(regs*)+0x545>
c0015f6d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015f71:	50                   	push   eax
c0015f72:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015f76:	50                   	push   eax
c0015f77:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015f7b:	50                   	push   eax
c0015f7c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015f80:	50                   	push   eax
c0015f81:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015f85:	50                   	push   eax
c0015f86:	6a 6f                	push   0x6f
c0015f88:	6a 6f                	push   0x6f
c0015f8a:	68 a2 0a 02 c0       	push   0xc0020aa2
c0015f8f:	e8 72 46 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0015f94:	83 c4 20             	add    esp,0x20
c0015f97:	e9 86 01 00 00       	jmp    c0016122 <Vm::faultHandler(regs*)+0x6cb>
c0015f9c:	0f b7 d7             	movzx  edx,di
c0015f9f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0015fa2:	0f b7 c6             	movzx  eax,si
c0015fa5:	81 e1 00 04 00 00    	and    ecx,0x400
c0015fab:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0015fae:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015fb3:	74 1d                	je     c0015fd2 <Vm::faultHandler(regs*)+0x57b>
c0015fb5:	55                   	push   ebp
c0015fb6:	55                   	push   ebp
c0015fb7:	50                   	push   eax
c0015fb8:	52                   	push   edx
c0015fb9:	e8 48 fa ff ff       	call   c0015a06 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0015fbe:	83 c4 10             	add    esp,0x10
c0015fc1:	89 fa                	mov    edx,edi
c0015fc3:	ef                   	out    dx,eax
c0015fc4:	85 c9                	test   ecx,ecx
c0015fc6:	74 05                	je     c0015fcd <Vm::faultHandler(regs*)+0x576>
c0015fc8:	83 ee 04             	sub    esi,0x4
c0015fcb:	eb 21                	jmp    c0015fee <Vm::faultHandler(regs*)+0x597>
c0015fcd:	83 c6 04             	add    esi,0x4
c0015fd0:	eb 1c                	jmp    c0015fee <Vm::faultHandler(regs*)+0x597>
c0015fd2:	55                   	push   ebp
c0015fd3:	55                   	push   ebp
c0015fd4:	50                   	push   eax
c0015fd5:	52                   	push   edx
c0015fd6:	e8 19 fa ff ff       	call   c00159f4 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0015fdb:	83 c4 10             	add    esp,0x10
c0015fde:	89 fa                	mov    edx,edi
c0015fe0:	66 ef                	out    dx,ax
c0015fe2:	85 c9                	test   ecx,ecx
c0015fe4:	74 05                	je     c0015feb <Vm::faultHandler(regs*)+0x594>
c0015fe6:	83 ee 02             	sub    esi,0x2
c0015fe9:	eb 03                	jmp    c0015fee <Vm::faultHandler(regs*)+0x597>
c0015feb:	83 c6 02             	add    esi,0x2
c0015fee:	81 e6 ff ff 00 00    	and    esi,0xffff
c0015ff4:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0015ff7:	e9 cb 00 00 00       	jmp    c00160c7 <Vm::faultHandler(regs*)+0x670>
c0015ffc:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016003:	83 ec 0c             	sub    esp,0xc
c0016006:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001600a:	50                   	push   eax
c001600b:	e8 89 f5 ff ff       	call   c0015599 <Vm::inbv(unsigned short)>
c0016010:	0f b6 c0             	movzx  eax,al
c0016013:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016016:	eb 3f                	jmp    c0016057 <Vm::faultHandler(regs*)+0x600>
c0016018:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001601d:	74 07                	je     c0016026 <Vm::faultHandler(regs*)+0x5cf>
c001601f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016023:	ed                   	in     eax,dx
c0016024:	eb 14                	jmp    c001603a <Vm::faultHandler(regs*)+0x5e3>
c0016026:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0016029:	66 31 f6             	xor    si,si
c001602c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001602f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016033:	66 ed                	in     ax,dx
c0016035:	0f b7 c0             	movzx  eax,ax
c0016038:	09 f0                	or     eax,esi
c001603a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001603d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016041:	e9 84 00 00 00       	jmp    c00160ca <Vm::faultHandler(regs*)+0x673>
c0016046:	52                   	push   edx
c0016047:	52                   	push   edx
c0016048:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001604c:	50                   	push   eax
c001604d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016051:	50                   	push   eax
c0016052:	e8 55 f5 ff ff       	call   c00155ac <Vm::outbv(unsigned short, unsigned char)>
c0016057:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001605b:	eb 53                	jmp    c00160b0 <Vm::faultHandler(regs*)+0x659>
c001605d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016060:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016064:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0016069:	74 03                	je     c001606e <Vm::faultHandler(regs*)+0x617>
c001606b:	ef                   	out    dx,eax
c001606c:	eb cf                	jmp    c001603d <Vm::faultHandler(regs*)+0x5e6>
c001606e:	66 ef                	out    dx,ax
c0016070:	eb cb                	jmp    c001603d <Vm::faultHandler(regs*)+0x5e6>
c0016072:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016079:	83 ec 0c             	sub    esp,0xc
c001607c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016080:	50                   	push   eax
c0016081:	e8 13 f5 ff ff       	call   c0015599 <Vm::inbv(unsigned short)>
c0016086:	0f b6 c0             	movzx  eax,al
c0016089:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001608c:	eb 1f                	jmp    c00160ad <Vm::faultHandler(regs*)+0x656>
c001608e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016091:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0016096:	74 03                	je     c001609b <Vm::faultHandler(regs*)+0x644>
c0016098:	ed                   	in     eax,dx
c0016099:	eb 0d                	jmp    c00160a8 <Vm::faultHandler(regs*)+0x651>
c001609b:	66 ed                	in     ax,dx
c001609d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00160a0:	0f b7 c0             	movzx  eax,ax
c00160a3:	66 31 d2             	xor    dx,dx
c00160a6:	09 d0                	or     eax,edx
c00160a8:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00160ab:	eb 1a                	jmp    c00160c7 <Vm::faultHandler(regs*)+0x670>
c00160ad:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00160b0:	83 c4 10             	add    esp,0x10
c00160b3:	eb 15                	jmp    c00160ca <Vm::faultHandler(regs*)+0x673>
c00160b5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00160b8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00160bb:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00160c0:	74 03                	je     c00160c5 <Vm::faultHandler(regs*)+0x66e>
c00160c2:	ef                   	out    dx,eax
c00160c3:	eb 02                	jmp    c00160c7 <Vm::faultHandler(regs*)+0x670>
c00160c5:	66 ef                	out    dx,ax
c00160c7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00160ca:	b0 01                	mov    al,0x1
c00160cc:	eb 56                	jmp    c0016124 <Vm::faultHandler(regs*)+0x6cd>
c00160ce:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00160d2:	50                   	push   eax
c00160d3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00160d7:	50                   	push   eax
c00160d8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00160dc:	50                   	push   eax
c00160dd:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00160e1:	50                   	push   eax
c00160e2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00160e6:	50                   	push   eax
c00160e7:	52                   	push   edx
c00160e8:	52                   	push   edx
c00160e9:	68 cf 0a 02 c0       	push   0xc0020acf
c00160ee:	e8 13 45 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c00160f3:	83 c4 20             	add    esp,0x20
c00160f6:	83 ec 0c             	sub    esp,0xc
c00160f9:	6a 60                	push   0x60
c00160fb:	e8 99 f4 ff ff       	call   c0015599 <Vm::inbv(unsigned short)>
c0016100:	83 c4 10             	add    esp,0x10
c0016103:	3c 1c                	cmp    al,0x1c
c0016105:	74 04                	je     c001610b <Vm::faultHandler(regs*)+0x6b4>
c0016107:	3c 5a                	cmp    al,0x5a
c0016109:	75 eb                	jne    c00160f6 <Vm::faultHandler(regs*)+0x69f>
c001610b:	3c 1c                	cmp    al,0x1c
c001610d:	74 04                	je     c0016113 <Vm::faultHandler(regs*)+0x6bc>
c001610f:	3c 5a                	cmp    al,0x5a
c0016111:	75 0f                	jne    c0016122 <Vm::faultHandler(regs*)+0x6cb>
c0016113:	83 ec 0c             	sub    esp,0xc
c0016116:	6a 60                	push   0x60
c0016118:	e8 7c f4 ff ff       	call   c0015599 <Vm::inbv(unsigned short)>
c001611d:	83 c4 10             	add    esp,0x10
c0016120:	eb e9                	jmp    c001610b <Vm::faultHandler(regs*)+0x6b4>
c0016122:	31 c0                	xor    eax,eax
c0016124:	83 c4 1c             	add    esp,0x1c
c0016127:	5b                   	pop    ebx
c0016128:	5e                   	pop    esi
c0016129:	5f                   	pop    edi
c001612a:	5d                   	pop    ebp
c001612b:	c3                   	ret    

c001612c <noCopro(unsigned long)>:
c001612c:	c3                   	ret    

c001612d <nmiHandler(regs*, void*)>:
c001612d:	83 ec 0c             	sub    esp,0xc
c0016130:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016135:	83 ec 0c             	sub    esp,0xc
c0016138:	50                   	push   eax
c0016139:	e8 46 0f ff ff       	call   c0007084 <Computer::handleNMI()>
c001613e:	83 c4 10             	add    esp,0x10
c0016141:	90                   	nop
c0016142:	83 c4 0c             	add    esp,0xc
c0016145:	c3                   	ret    

c0016146 <doubleFault(regs*, void*)>:
c0016146:	55                   	push   ebp
c0016147:	89 e5                	mov    ebp,esp
c0016149:	83 ec 08             	sub    esp,0x8
c001614c:	83 ec 0c             	sub    esp,0xc
c001614f:	68 2c 0b 02 c0       	push   0xc0020b2c
c0016154:	e8 6e a2 ff ff       	call   c00103c7 <KePanic(char const*)>
c0016159:	83 c4 10             	add    esp,0x10
c001615c:	90                   	nop
c001615d:	c9                   	leave  
c001615e:	c3                   	ret    

c001615f <displayDebugInfo(regs*)>:
c001615f:	83 ec 1c             	sub    esp,0x1c
c0016162:	0f 20 c0             	mov    eax,cr0
c0016165:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016169:	0f 20 d0             	mov    eax,cr2
c001616c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016170:	0f 20 d8             	mov    eax,cr3
c0016173:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016177:	0f 20 e0             	mov    eax,cr4
c001617a:	89 04 24             	mov    DWORD PTR [esp],eax
c001617d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016181:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016184:	83 ec 08             	sub    esp,0x8
c0016187:	50                   	push   eax
c0016188:	68 48 0b 02 c0       	push   0xc0020b48
c001618d:	e8 74 44 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0016192:	83 c4 10             	add    esp,0x10
c0016195:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016199:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001619c:	83 ec 08             	sub    esp,0x8
c001619f:	50                   	push   eax
c00161a0:	68 39 0b 02 c0       	push   0xc0020b39
c00161a5:	e8 5c 44 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c00161aa:	83 c4 10             	add    esp,0x10
c00161ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161b1:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00161b4:	83 ec 08             	sub    esp,0x8
c00161b7:	50                   	push   eax
c00161b8:	68 44 0b 02 c0       	push   0xc0020b44
c00161bd:	e8 44 44 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c00161c2:	83 c4 10             	add    esp,0x10
c00161c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161c9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00161cc:	83 ec 08             	sub    esp,0x8
c00161cf:	50                   	push   eax
c00161d0:	68 53 0b 02 c0       	push   0xc0020b53
c00161d5:	e8 2c 44 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c00161da:	83 c4 10             	add    esp,0x10
c00161dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161e1:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00161e4:	83 ec 08             	sub    esp,0x8
c00161e7:	50                   	push   eax
c00161e8:	68 5e 0b 02 c0       	push   0xc0020b5e
c00161ed:	e8 14 44 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c00161f2:	83 c4 10             	add    esp,0x10
c00161f5:	83 ec 08             	sub    esp,0x8
c00161f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00161fc:	68 69 0b 02 c0       	push   0xc0020b69
c0016201:	e8 00 44 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0016206:	83 c4 10             	add    esp,0x10
c0016209:	83 ec 08             	sub    esp,0x8
c001620c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016210:	68 74 0b 02 c0       	push   0xc0020b74
c0016215:	e8 ec 43 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c001621a:	83 c4 10             	add    esp,0x10
c001621d:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016222:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016228:	83 ec 0c             	sub    esp,0xc
c001622b:	50                   	push   eax
c001622c:	e8 6c 22 ff ff       	call   c000849d <setActiveTerminal(VgaText*)>
c0016231:	83 c4 10             	add    esp,0x10
c0016234:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016239:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001623f:	83 ec 08             	sub    esp,0x8
c0016242:	68 7f 0b 02 c0       	push   0xc0020b7f
c0016247:	50                   	push   eax
c0016248:	e8 8f 25 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c001624d:	83 c4 10             	add    esp,0x10
c0016250:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016255:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001625b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001625f:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0016262:	83 ec 08             	sub    esp,0x8
c0016265:	52                   	push   edx
c0016266:	50                   	push   eax
c0016267:	e8 2a 25 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c001626c:	83 c4 10             	add    esp,0x10
c001626f:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016274:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001627a:	83 ec 08             	sub    esp,0x8
c001627d:	68 8d 0b 02 c0       	push   0xc0020b8d
c0016282:	50                   	push   eax
c0016283:	e8 54 25 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c0016288:	83 c4 10             	add    esp,0x10
c001628b:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016290:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016296:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001629b:	8b 12                	mov    edx,DWORD PTR [edx]
c001629d:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00162a0:	83 c2 0c             	add    edx,0xc
c00162a3:	83 ec 08             	sub    esp,0x8
c00162a6:	52                   	push   edx
c00162a7:	50                   	push   eax
c00162a8:	e8 2f 25 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c00162ad:	83 c4 10             	add    esp,0x10
c00162b0:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00162b5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00162bb:	83 ec 08             	sub    esp,0x8
c00162be:	68 96 0b 02 c0       	push   0xc0020b96
c00162c3:	50                   	push   eax
c00162c4:	e8 13 25 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c00162c9:	83 c4 10             	add    esp,0x10
c00162cc:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00162d1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00162d7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00162db:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00162de:	83 ec 08             	sub    esp,0x8
c00162e1:	52                   	push   edx
c00162e2:	50                   	push   eax
c00162e3:	e8 ae 24 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c00162e8:	83 c4 10             	add    esp,0x10
c00162eb:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00162f0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00162f6:	83 ec 08             	sub    esp,0x8
c00162f9:	68 9e 0b 02 c0       	push   0xc0020b9e
c00162fe:	50                   	push   eax
c00162ff:	e8 d8 24 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c0016304:	83 c4 10             	add    esp,0x10
c0016307:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001630c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016312:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016316:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0016319:	83 ec 08             	sub    esp,0x8
c001631c:	52                   	push   edx
c001631d:	50                   	push   eax
c001631e:	e8 73 24 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c0016323:	83 c4 10             	add    esp,0x10
c0016326:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001632b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016331:	83 ec 08             	sub    esp,0x8
c0016334:	68 a6 0b 02 c0       	push   0xc0020ba6
c0016339:	50                   	push   eax
c001633a:	e8 9d 24 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c001633f:	83 c4 10             	add    esp,0x10
c0016342:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016347:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001634d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016351:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0016354:	83 ec 08             	sub    esp,0x8
c0016357:	52                   	push   edx
c0016358:	50                   	push   eax
c0016359:	e8 38 24 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c001635e:	83 c4 10             	add    esp,0x10
c0016361:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016366:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001636c:	83 ec 08             	sub    esp,0x8
c001636f:	68 ae 0b 02 c0       	push   0xc0020bae
c0016374:	50                   	push   eax
c0016375:	e8 62 24 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c001637a:	83 c4 10             	add    esp,0x10
c001637d:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016382:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016388:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001638c:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001638f:	83 ec 08             	sub    esp,0x8
c0016392:	52                   	push   edx
c0016393:	50                   	push   eax
c0016394:	e8 fd 23 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c0016399:	83 c4 10             	add    esp,0x10
c001639c:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00163a1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00163a7:	83 ec 08             	sub    esp,0x8
c00163aa:	68 b6 0b 02 c0       	push   0xc0020bb6
c00163af:	50                   	push   eax
c00163b0:	e8 27 24 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c00163b5:	83 c4 10             	add    esp,0x10
c00163b8:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00163bd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00163c3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00163c7:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00163ca:	83 ec 08             	sub    esp,0x8
c00163cd:	52                   	push   edx
c00163ce:	50                   	push   eax
c00163cf:	e8 c2 23 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c00163d4:	83 c4 10             	add    esp,0x10
c00163d7:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00163dc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00163e2:	83 ec 08             	sub    esp,0x8
c00163e5:	68 be 0b 02 c0       	push   0xc0020bbe
c00163ea:	50                   	push   eax
c00163eb:	e8 ec 23 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c00163f0:	83 c4 10             	add    esp,0x10
c00163f3:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00163f8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00163fe:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016402:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016405:	83 ec 08             	sub    esp,0x8
c0016408:	52                   	push   edx
c0016409:	50                   	push   eax
c001640a:	e8 87 23 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c001640f:	83 c4 10             	add    esp,0x10
c0016412:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016417:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001641d:	83 ec 08             	sub    esp,0x8
c0016420:	68 c6 0b 02 c0       	push   0xc0020bc6
c0016425:	50                   	push   eax
c0016426:	e8 b1 23 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c001642b:	83 c4 10             	add    esp,0x10
c001642e:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016433:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016439:	83 ec 08             	sub    esp,0x8
c001643c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016440:	50                   	push   eax
c0016441:	e8 50 23 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c0016446:	83 c4 10             	add    esp,0x10
c0016449:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001644e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016454:	83 ec 08             	sub    esp,0x8
c0016457:	68 cf 0b 02 c0       	push   0xc0020bcf
c001645c:	50                   	push   eax
c001645d:	e8 7a 23 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c0016462:	83 c4 10             	add    esp,0x10
c0016465:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001646a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016470:	83 ec 08             	sub    esp,0x8
c0016473:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016477:	50                   	push   eax
c0016478:	e8 19 23 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c001647d:	83 c4 10             	add    esp,0x10
c0016480:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016485:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001648b:	83 ec 08             	sub    esp,0x8
c001648e:	68 d7 0b 02 c0       	push   0xc0020bd7
c0016493:	50                   	push   eax
c0016494:	e8 43 23 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c0016499:	83 c4 10             	add    esp,0x10
c001649c:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00164a1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00164a7:	83 ec 08             	sub    esp,0x8
c00164aa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00164ae:	50                   	push   eax
c00164af:	e8 e2 22 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c00164b4:	83 c4 10             	add    esp,0x10
c00164b7:	fa                   	cli    
c00164b8:	f4                   	hlt    
c00164b9:	eb fe                	jmp    c00164b9 <displayDebugInfo(regs*)+0x35a>

c00164bb <HalSystemIdle()>:
c00164bb:	56                   	push   esi
c00164bc:	53                   	push   ebx
c00164bd:	83 ec 14             	sub    esp,0x14
c00164c0:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c00164c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00164cb:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c00164d1:	83 e0 04             	and    eax,0x4
c00164d4:	84 c0                	test   al,al
c00164d6:	0f 95 c0             	setne  al
c00164d9:	84 c0                	test   al,al
c00164db:	74 4c                	je     c0016529 <HalSystemIdle()+0x6e>
c00164dd:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c00164e2:	83 ec 08             	sub    esp,0x8
c00164e5:	68 e1 00 00 00       	push   0xe1
c00164ea:	50                   	push   eax
c00164eb:	e8 ac 09 ff ff       	call   c0006e9c <Computer::rdmsr(unsigned int)>
c00164f0:	83 c4 10             	add    esp,0x10
c00164f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00164f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00164fb:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016500:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016504:	83 e2 02             	and    edx,0x2
c0016507:	89 d3                	mov    ebx,edx
c0016509:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001650d:	83 e2 00             	and    edx,0x0
c0016510:	89 d6                	mov    esi,edx
c0016512:	56                   	push   esi
c0016513:	53                   	push   ebx
c0016514:	68 e1 00 00 00       	push   0xe1
c0016519:	50                   	push   eax
c001651a:	e8 a9 09 ff ff       	call   c0006ec8 <Computer::wrmsr(unsigned int, unsigned long long)>
c001651f:	83 c4 10             	add    esp,0x10
c0016522:	e8 6d 9c fe ff       	call   c0000194 <doTPAUSE>
c0016527:	eb 01                	jmp    c001652a <HalSystemIdle()+0x6f>
c0016529:	f4                   	hlt    
c001652a:	90                   	nop
c001652b:	83 c4 14             	add    esp,0x14
c001652e:	5b                   	pop    ebx
c001652f:	5e                   	pop    esi
c0016530:	c3                   	ret    

c0016531 <displayProgramFault(char const*)>:
c0016531:	83 ec 0c             	sub    esp,0xc
c0016534:	83 ec 0c             	sub    esp,0xc
c0016537:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001653b:	e8 c6 40 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0016540:	83 c4 10             	add    esp,0x10
c0016543:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016548:	8b 00                	mov    eax,DWORD PTR [eax]
c001654a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001654d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016553:	85 c0                	test   eax,eax
c0016555:	74 21                	je     c0016578 <displayProgramFault(char const*)+0x47>
c0016557:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001655c:	8b 00                	mov    eax,DWORD PTR [eax]
c001655e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016561:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016567:	6a 04                	push   0x4
c0016569:	6a 0f                	push   0xf
c001656b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001656f:	50                   	push   eax
c0016570:	e8 d9 22 ff ff       	call   c000884e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0016575:	83 c4 10             	add    esp,0x10
c0016578:	90                   	nop
c0016579:	83 c4 0c             	add    esp,0xc
c001657c:	c3                   	ret    

c001657d <gpFault(regs*, void*)>:
c001657d:	83 ec 1c             	sub    esp,0x1c
c0016580:	c7 05 10 72 02 c0 57 5a 01 c0 	mov    DWORD PTR ds:0xc0027210,0xc0015a57
c001658a:	a1 10 72 02 c0       	mov    eax,ds:0xc0027210
c001658f:	85 c0                	test   eax,eax
c0016591:	74 1c                	je     c00165af <gpFault(regs*, void*)+0x32>
c0016593:	a1 10 72 02 c0       	mov    eax,ds:0xc0027210
c0016598:	83 ec 0c             	sub    esp,0xc
c001659b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001659f:	ff d0                	call   eax
c00165a1:	83 c4 10             	add    esp,0x10
c00165a4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00165a8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00165ad:	75 2e                	jne    c00165dd <gpFault(regs*, void*)+0x60>
c00165af:	83 ec 0c             	sub    esp,0xc
c00165b2:	68 df 0b 02 c0       	push   0xc0020bdf
c00165b7:	e8 75 ff ff ff       	call   c0016531 <displayProgramFault(char const*)>
c00165bc:	83 c4 10             	add    esp,0x10
c00165bf:	83 ec 0c             	sub    esp,0xc
c00165c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00165c6:	e8 94 fb ff ff       	call   c001615f <displayDebugInfo(regs*)>
c00165cb:	83 c4 10             	add    esp,0x10
c00165ce:	83 ec 0c             	sub    esp,0xc
c00165d1:	6a 00                	push   0x0
c00165d3:	e8 74 ee ff ff       	call   c001544c <Thr::terminateFromIRQ(int)>
c00165d8:	83 c4 10             	add    esp,0x10
c00165db:	eb 01                	jmp    c00165de <gpFault(regs*, void*)+0x61>
c00165dd:	90                   	nop
c00165de:	83 c4 1c             	add    esp,0x1c
c00165e1:	c3                   	ret    

c00165e2 <pgFault(regs*, void*)>:
c00165e2:	83 ec 1c             	sub    esp,0x1c
c00165e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165e9:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00165ec:	0f 20 d0             	mov    eax,cr2
c00165ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00165f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165f7:	83 ec 04             	sub    esp,0x4
c00165fa:	52                   	push   edx
c00165fb:	50                   	push   eax
c00165fc:	68 bc 0c 02 c0       	push   0xc0020cbc
c0016601:	e8 00 40 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0016606:	83 c4 10             	add    esp,0x10
c0016609:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001660e:	8b 00                	mov    eax,DWORD PTR [eax]
c0016610:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016613:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0016619:	0f 20 d2             	mov    edx,cr2
c001661c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016620:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016624:	83 ec 08             	sub    esp,0x8
c0016627:	52                   	push   edx
c0016628:	50                   	push   eax
c0016629:	e8 ce 3b ff ff       	call   c000a1fc <VAS::tryLoadBackOffDisk(unsigned long)>
c001662e:	83 c4 10             	add    esp,0x10
c0016631:	84 c0                	test   al,al
c0016633:	75 2e                	jne    c0016663 <pgFault(regs*, void*)+0x81>
c0016635:	83 ec 0c             	sub    esp,0xc
c0016638:	68 f8 0b 02 c0       	push   0xc0020bf8
c001663d:	e8 ef fe ff ff       	call   c0016531 <displayProgramFault(char const*)>
c0016642:	83 c4 10             	add    esp,0x10
c0016645:	83 ec 0c             	sub    esp,0xc
c0016648:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001664c:	e8 0e fb ff ff       	call   c001615f <displayDebugInfo(regs*)>
c0016651:	83 c4 10             	add    esp,0x10
c0016654:	83 ec 0c             	sub    esp,0xc
c0016657:	6a 00                	push   0x0
c0016659:	e8 ee ed ff ff       	call   c001544c <Thr::terminateFromIRQ(int)>
c001665e:	83 c4 10             	add    esp,0x10
c0016661:	eb 01                	jmp    c0016664 <pgFault(regs*, void*)+0x82>
c0016663:	90                   	nop
c0016664:	83 c4 1c             	add    esp,0x1c
c0016667:	c3                   	ret    

c0016668 <otherISRHandler(regs*, void*)>:
c0016668:	83 ec 0c             	sub    esp,0xc
c001666b:	83 ec 0c             	sub    esp,0xc
c001666e:	68 e4 0c 02 c0       	push   0xc0020ce4
c0016673:	e8 b9 fe ff ff       	call   c0016531 <displayProgramFault(char const*)>
c0016678:	83 c4 10             	add    esp,0x10
c001667b:	83 ec 0c             	sub    esp,0xc
c001667e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016682:	e8 d8 fa ff ff       	call   c001615f <displayDebugInfo(regs*)>
c0016687:	83 c4 10             	add    esp,0x10
c001668a:	83 ec 0c             	sub    esp,0xc
c001668d:	6a 00                	push   0x0
c001668f:	e8 b8 ed ff ff       	call   c001544c <Thr::terminateFromIRQ(int)>
c0016694:	83 c4 10             	add    esp,0x10
c0016697:	90                   	nop
c0016698:	83 c4 0c             	add    esp,0xc
c001669b:	c3                   	ret    

c001669c <opcodeFault(regs*, void*)>:
c001669c:	55                   	push   ebp
c001669d:	89 e5                	mov    ebp,esp
c001669f:	83 ec 08             	sub    esp,0x8
c00166a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00166a5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00166a8:	83 ec 08             	sub    esp,0x8
c00166ab:	50                   	push   eax
c00166ac:	68 03 0c 02 c0       	push   0xc0020c03
c00166b1:	e8 50 3f ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c00166b6:	83 c4 10             	add    esp,0x10
c00166b9:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c00166be:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00166c4:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00166ca:	84 c0                	test   al,al
c00166cc:	74 21                	je     c00166ef <opcodeFault(regs*, void*)+0x53>
c00166ce:	83 ec 0c             	sub    esp,0xc
c00166d1:	68 0c 0d 02 c0       	push   0xc0020d0c
c00166d6:	e8 2b 3f ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c00166db:	83 c4 10             	add    esp,0x10
c00166de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00166e1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00166e4:	8d 50 19             	lea    edx,[eax+0x19]
c00166e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00166ea:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00166ed:	eb 2b                	jmp    c001671a <opcodeFault(regs*, void*)+0x7e>
c00166ef:	83 ec 0c             	sub    esp,0xc
c00166f2:	68 11 0c 02 c0       	push   0xc0020c11
c00166f7:	e8 35 fe ff ff       	call   c0016531 <displayProgramFault(char const*)>
c00166fc:	83 c4 10             	add    esp,0x10
c00166ff:	83 ec 0c             	sub    esp,0xc
c0016702:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0016705:	e8 55 fa ff ff       	call   c001615f <displayDebugInfo(regs*)>
c001670a:	83 c4 10             	add    esp,0x10
c001670d:	83 ec 0c             	sub    esp,0xc
c0016710:	6a 00                	push   0x0
c0016712:	e8 35 ed ff ff       	call   c001544c <Thr::terminateFromIRQ(int)>
c0016717:	83 c4 10             	add    esp,0x10
c001671a:	c9                   	leave  
c001671b:	c3                   	ret    

c001671c <i386SaveCoprocessor(void*)>:
c001671c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016720:	83 c0 3f             	add    eax,0x3f
c0016723:	83 e0 c0             	and    eax,0xffffffc0
c0016726:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001672a:	ff 25 0c 72 02 c0    	jmp    DWORD PTR ds:0xc002720c

c0016730 <i386LoadCoprocessor(void*)>:
c0016730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016734:	83 c0 3f             	add    eax,0x3f
c0016737:	83 e0 c0             	and    eax,0xffffffc0
c001673a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001673e:	ff 25 08 72 02 c0    	jmp    DWORD PTR ds:0xc0027208

c0016744 <x87EmulHandler(regs*, void*)>:
c0016744:	53                   	push   ebx
c0016745:	83 ec 08             	sub    esp,0x8
c0016748:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001674d:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0016751:	74 10                	je     c0016763 <x87EmulHandler(regs*, void*)+0x1f>
c0016753:	83 ec 0c             	sub    esp,0xc
c0016756:	68 1e 0c 02 c0       	push   0xc0020c1e
c001675b:	e8 67 9c ff ff       	call   c00103c7 <KePanic(char const*)>
c0016760:	83 c4 10             	add    esp,0x10
c0016763:	0f 20 c0             	mov    eax,cr0
c0016766:	a8 08                	test   al,0x8
c0016768:	74 59                	je     c00167c3 <x87EmulHandler(regs*, void*)+0x7f>
c001676a:	0f 06                	clts   
c001676c:	a1 04 72 02 c0       	mov    eax,ds:0xc0027204
c0016771:	85 c0                	test   eax,eax
c0016773:	74 0e                	je     c0016783 <x87EmulHandler(regs*, void*)+0x3f>
c0016775:	83 ec 0c             	sub    esp,0xc
c0016778:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001677b:	e8 9c ff ff ff       	call   c001671c <i386SaveCoprocessor(void*)>
c0016780:	83 c4 10             	add    esp,0x10
c0016783:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0016789:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c001678d:	75 12                	jne    c00167a1 <x87EmulHandler(regs*, void*)+0x5d>
c001678f:	83 ec 0c             	sub    esp,0xc
c0016792:	68 40 02 00 00       	push   0x240
c0016797:	e8 c9 10 ff ff       	call   c0007865 <malloc>
c001679c:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c001679f:	eb 10                	jmp    c00167b1 <x87EmulHandler(regs*, void*)+0x6d>
c00167a1:	83 ec 0c             	sub    esp,0xc
c00167a4:	a1 04 72 02 c0       	mov    eax,ds:0xc0027204
c00167a9:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00167ac:	e8 7f ff ff ff       	call   c0016730 <i386LoadCoprocessor(void*)>
c00167b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167b6:	83 c4 10             	add    esp,0x10
c00167b9:	a3 04 72 02 c0       	mov    ds:0xc0027204,eax
c00167be:	83 c4 08             	add    esp,0x8
c00167c1:	5b                   	pop    ebx
c00167c2:	c3                   	ret    
c00167c3:	83 ec 0c             	sub    esp,0xc
c00167c6:	68 32 0c 02 c0       	push   0xc0020c32
c00167cb:	e8 36 3e ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c00167d0:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00167d8:	83 c4 18             	add    esp,0x18
c00167db:	5b                   	pop    ebx
c00167dc:	e9 6b ec ff ff       	jmp    c001544c <Thr::terminateFromIRQ(int)>

c00167e1 <HalInitialiseCoprocessor()>:
c00167e1:	83 ec 10             	sub    esp,0x10
c00167e4:	c7 05 04 72 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027204,0x0
c00167ee:	6a 00                	push   0x0
c00167f0:	68 44 67 01 c0       	push   0xc0016744
c00167f5:	6a 07                	push   0x7
c00167f7:	e8 7c 57 ff ff       	call   c000bf78 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00167fc:	e8 4f 6e 00 00       	call   c001d650 <avxDetect>
c0016801:	83 c4 10             	add    esp,0x10
c0016804:	85 c0                	test   eax,eax
c0016806:	74 1c                	je     c0016824 <HalInitialiseCoprocessor()+0x43>
c0016808:	c7 05 0c 72 02 c0 7a d6 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc001d67a
c0016812:	c7 05 08 72 02 c0 8b d6 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc001d68b
c001681c:	83 c4 0c             	add    esp,0xc
c001681f:	e9 78 6e 00 00       	jmp    c001d69c <avxInit>
c0016824:	e8 b7 71 00 00       	call   c001d9e0 <absolutelyNoChanceInHell>
c0016829:	85 c0                	test   eax,eax
c001682b:	74 1c                	je     c0016849 <HalInitialiseCoprocessor()+0x68>
c001682d:	c7 05 0c 72 02 c0 f8 d9 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc001d9f8
c0016837:	c7 05 08 72 02 c0 00 da 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc001da00
c0016841:	83 c4 0c             	add    esp,0xc
c0016844:	e9 bf 71 00 00       	jmp    c001da08 <sseInit>
c0016849:	e8 d8 71 00 00       	call   c001da26 <x87Detect>
c001684e:	85 c0                	test   eax,eax
c0016850:	74 1c                	je     c001686e <HalInitialiseCoprocessor()+0x8d>
c0016852:	c7 05 0c 72 02 c0 41 da 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc001da41
c001685c:	c7 05 08 72 02 c0 48 da 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc001da48
c0016866:	83 c4 0c             	add    esp,0xc
c0016869:	e9 e1 71 00 00       	jmp    c001da4f <x87Init>
c001686e:	c7 05 0c 72 02 c0 2c 61 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc001612c
c0016878:	c7 05 08 72 02 c0 2c 61 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc001612c
c0016882:	0f 20 c0             	mov    eax,cr0
c0016885:	83 c8 04             	or     eax,0x4
c0016888:	0f 22 c0             	mov    cr0,eax
c001688b:	83 c4 0c             	add    esp,0xc
c001688e:	c3                   	ret    

c001688f <HalPanic(char const*)>:
c001688f:	53                   	push   ebx
c0016890:	83 ec 10             	sub    esp,0x10
c0016893:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016897:	fa                   	cli    
c0016898:	53                   	push   ebx
c0016899:	68 48 0c 02 c0       	push   0xc0020c48
c001689e:	e8 63 3d ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c00168a3:	83 c4 0c             	add    esp,0xc
c00168a6:	6a 01                	push   0x1
c00168a8:	6a 0f                	push   0xf
c00168aa:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c00168b0:	e8 41 1a ff ff       	call   c00082f6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00168b5:	58                   	pop    eax
c00168b6:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c00168bc:	e8 27 1c ff ff       	call   c00084e8 <VgaText::clearScreen()>
c00168c1:	5a                   	pop    edx
c00168c2:	59                   	pop    ecx
c00168c3:	68 a4 f4 01 c0       	push   0xc001f4a4
c00168c8:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c00168ce:	e8 5b 1a ff ff       	call   c000832e <VgaText::setTitle(char*)>
c00168d3:	83 c4 0c             	add    esp,0xc
c00168d6:	6a 01                	push   0x1
c00168d8:	6a 0f                	push   0xf
c00168da:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c00168e0:	e8 11 1a ff ff       	call   c00082f6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00168e5:	58                   	pop    eax
c00168e6:	5a                   	pop    edx
c00168e7:	68 61 0c 02 c0       	push   0xc0020c61
c00168ec:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c00168f2:	e8 e5 1e ff ff       	call   c00087dc <VgaText::puts(char const*)>
c00168f7:	83 c4 0c             	add    esp,0xc
c00168fa:	6a 0f                	push   0xf
c00168fc:	6a 01                	push   0x1
c00168fe:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016904:	e8 ed 19 ff ff       	call   c00082f6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016909:	59                   	pop    ecx
c001690a:	58                   	pop    eax
c001690b:	68 6a 0c 02 c0       	push   0xc0020c6a
c0016910:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016916:	e8 c1 1e ff ff       	call   c00087dc <VgaText::puts(char const*)>
c001691b:	83 c4 0c             	add    esp,0xc
c001691e:	6a 01                	push   0x1
c0016920:	6a 0f                	push   0xf
c0016922:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016928:	e8 c9 19 ff ff       	call   c00082f6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001692d:	58                   	pop    eax
c001692e:	5a                   	pop    edx
c001692f:	68 ae 0c 02 c0       	push   0xc0020cae
c0016934:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c001693a:	e8 9d 1e ff ff       	call   c00087dc <VgaText::puts(char const*)>
c001693f:	59                   	pop    ecx
c0016940:	58                   	pop    eax
c0016941:	68 77 0c 02 c0       	push   0xc0020c77
c0016946:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c001694c:	e8 8b 1e ff ff       	call   c00087dc <VgaText::puts(char const*)>
c0016951:	58                   	pop    eax
c0016952:	5a                   	pop    edx
c0016953:	68 b1 0c 02 c0       	push   0xc0020cb1
c0016958:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c001695e:	e8 79 1e ff ff       	call   c00087dc <VgaText::puts(char const*)>
c0016963:	59                   	pop    ecx
c0016964:	58                   	pop    eax
c0016965:	53                   	push   ebx
c0016966:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c001696c:	e8 6b 1e ff ff       	call   c00087dc <VgaText::puts(char const*)>
c0016971:	58                   	pop    eax
c0016972:	5a                   	pop    edx
c0016973:	68 ae 0c 02 c0       	push   0xc0020cae
c0016978:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c001697e:	e8 59 1e ff ff       	call   c00087dc <VgaText::puts(char const*)>
c0016983:	83 c4 10             	add    esp,0x10
c0016986:	eb fe                	jmp    c0016986 <HalPanic(char const*)+0xf7>

c0016988 <HalQueryPerformanceCounter()>:
c0016988:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001698d:	31 d2                	xor    edx,edx
c001698f:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0016995:	31 c0                	xor    eax,eax
c0016997:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c001699e:	74 02                	je     c00169a2 <HalQueryPerformanceCounter()+0x1a>
c00169a0:	0f 31                	rdtsc  
c00169a2:	c3                   	ret    

c00169a3 <HalInitialise()>:
c00169a3:	53                   	push   ebx
c00169a4:	83 ec 08             	sub    esp,0x8
c00169a7:	e8 ff 57 ff ff       	call   c000c1ab <setupINTS()>
c00169ac:	80 3d 80 67 02 c0 00 	cmp    BYTE PTR ds:0xc0026780,0x0
c00169b3:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c00169b8:	75 07                	jne    c00169c1 <HalInitialise()+0x1e>
c00169ba:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c00169c1:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c00169c8:	c6 05 00 72 02 c0 00 	mov    BYTE PTR ds:0xc0027200,0x0
c00169cf:	e8 a8 02 00 00       	call   c0016c7c <picOpen()>
c00169d4:	80 3d 00 72 02 c0 00 	cmp    BYTE PTR ds:0xc0027200,0x0
c00169db:	74 0a                	je     c00169e7 <HalInitialise()+0x44>
c00169dd:	e8 e2 01 00 00       	call   c0016bc4 <picDisable()>
c00169e2:	e8 e3 65 00 00       	call   c001cfca <apicOpen()>
c00169e7:	bb 0f 00 00 00       	mov    ebx,0xf
c00169ec:	50                   	push   eax
c00169ed:	6a 00                	push   0x0
c00169ef:	68 68 66 01 c0       	push   0xc0016668
c00169f4:	6a 00                	push   0x0
c00169f6:	e8 7d 55 ff ff       	call   c000bf78 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00169fb:	83 c4 0c             	add    esp,0xc
c00169fe:	6a 00                	push   0x0
c0016a00:	68 68 66 01 c0       	push   0xc0016668
c0016a05:	6a 01                	push   0x1
c0016a07:	e8 6c 55 ff ff       	call   c000bf78 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016a0c:	83 c4 0c             	add    esp,0xc
c0016a0f:	6a 00                	push   0x0
c0016a11:	68 2d 61 01 c0       	push   0xc001612d
c0016a16:	6a 02                	push   0x2
c0016a18:	e8 5b 55 ff ff       	call   c000bf78 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016a1d:	83 c4 0c             	add    esp,0xc
c0016a20:	6a 00                	push   0x0
c0016a22:	68 68 66 01 c0       	push   0xc0016668
c0016a27:	6a 03                	push   0x3
c0016a29:	e8 4a 55 ff ff       	call   c000bf78 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016a2e:	83 c4 0c             	add    esp,0xc
c0016a31:	6a 00                	push   0x0
c0016a33:	68 68 66 01 c0       	push   0xc0016668
c0016a38:	6a 04                	push   0x4
c0016a3a:	e8 39 55 ff ff       	call   c000bf78 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016a3f:	83 c4 0c             	add    esp,0xc
c0016a42:	6a 00                	push   0x0
c0016a44:	68 68 66 01 c0       	push   0xc0016668
c0016a49:	6a 05                	push   0x5
c0016a4b:	e8 28 55 ff ff       	call   c000bf78 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016a50:	83 c4 0c             	add    esp,0xc
c0016a53:	6a 00                	push   0x0
c0016a55:	68 9c 66 01 c0       	push   0xc001669c
c0016a5a:	6a 06                	push   0x6
c0016a5c:	e8 17 55 ff ff       	call   c000bf78 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016a61:	83 c4 0c             	add    esp,0xc
c0016a64:	6a 00                	push   0x0
c0016a66:	68 46 61 01 c0       	push   0xc0016146
c0016a6b:	6a 08                	push   0x8
c0016a6d:	e8 06 55 ff ff       	call   c000bf78 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016a72:	83 c4 0c             	add    esp,0xc
c0016a75:	6a 00                	push   0x0
c0016a77:	68 68 66 01 c0       	push   0xc0016668
c0016a7c:	6a 09                	push   0x9
c0016a7e:	e8 f5 54 ff ff       	call   c000bf78 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016a83:	83 c4 0c             	add    esp,0xc
c0016a86:	6a 00                	push   0x0
c0016a88:	68 68 66 01 c0       	push   0xc0016668
c0016a8d:	6a 0a                	push   0xa
c0016a8f:	e8 e4 54 ff ff       	call   c000bf78 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016a94:	83 c4 0c             	add    esp,0xc
c0016a97:	6a 00                	push   0x0
c0016a99:	68 68 66 01 c0       	push   0xc0016668
c0016a9e:	6a 0b                	push   0xb
c0016aa0:	e8 d3 54 ff ff       	call   c000bf78 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016aa5:	83 c4 0c             	add    esp,0xc
c0016aa8:	6a 00                	push   0x0
c0016aaa:	68 7d 65 01 c0       	push   0xc001657d
c0016aaf:	6a 0d                	push   0xd
c0016ab1:	e8 c2 54 ff ff       	call   c000bf78 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016ab6:	83 c4 0c             	add    esp,0xc
c0016ab9:	6a 00                	push   0x0
c0016abb:	68 e2 65 01 c0       	push   0xc00165e2
c0016ac0:	6a 0e                	push   0xe
c0016ac2:	e8 b1 54 ff ff       	call   c000bf78 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016ac7:	83 c4 10             	add    esp,0x10
c0016aca:	50                   	push   eax
c0016acb:	6a 00                	push   0x0
c0016acd:	68 68 66 01 c0       	push   0xc0016668
c0016ad2:	53                   	push   ebx
c0016ad3:	43                   	inc    ebx
c0016ad4:	e8 9f 54 ff ff       	call   c000bf78 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016ad9:	83 c4 10             	add    esp,0x10
c0016adc:	83 fb 1e             	cmp    ebx,0x1e
c0016adf:	75 e9                	jne    c0016aca <HalInitialise()+0x127>
c0016ae1:	50                   	push   eax
c0016ae2:	6a 00                	push   0x0
c0016ae4:	68 b2 15 01 c0       	push   0xc00115b2
c0016ae9:	6a 60                	push   0x60
c0016aeb:	e8 88 54 ff ff       	call   c000bf78 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016af0:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016af5:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0016aff:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0016b06:	e8 5a 0d ff ff       	call   c0007865 <malloc>
c0016b0b:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b0e:	89 c3                	mov    ebx,eax
c0016b10:	e8 2f 09 00 00       	call   c0017444 <RTC::RTC()>
c0016b15:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0016b1f:	5a                   	pop    edx
c0016b20:	59                   	pop    ecx
c0016b21:	53                   	push   ebx
c0016b22:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016b28:	e8 17 4f ff ff       	call   c000ba44 <Device::addChild(Device*)>
c0016b2d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b2f:	6a 00                	push   0x0
c0016b31:	6a 00                	push   0x0
c0016b33:	6a 00                	push   0x0
c0016b35:	53                   	push   ebx
c0016b36:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b39:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016b3e:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0016b44:	83 c4 28             	add    esp,0x28
c0016b47:	5b                   	pop    ebx
c0016b48:	c3                   	ret    

c0016b49 <HalMakeBeep(int)>:
c0016b49:	53                   	push   ebx
c0016b4a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0016b4e:	85 db                	test   ebx,ebx
c0016b50:	75 07                	jne    c0016b59 <HalMakeBeep(int)+0x10>
c0016b52:	e4 61                	in     al,0x61
c0016b54:	83 e0 fc             	and    eax,0xfffffffc
c0016b57:	eb 26                	jmp    c0016b7f <HalMakeBeep(int)+0x36>
c0016b59:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0016b5e:	99                   	cdq    
c0016b5f:	f7 fb                	idiv   ebx
c0016b61:	89 c1                	mov    ecx,eax
c0016b63:	b0 b6                	mov    al,0xb6
c0016b65:	e6 43                	out    0x43,al
c0016b67:	88 c8                	mov    al,cl
c0016b69:	e6 42                	out    0x42,al
c0016b6b:	89 c8                	mov    eax,ecx
c0016b6d:	c1 e8 08             	shr    eax,0x8
c0016b70:	e6 42                	out    0x42,al
c0016b72:	e4 61                	in     al,0x61
c0016b74:	88 c2                	mov    dl,al
c0016b76:	83 ca 03             	or     edx,0x3
c0016b79:	38 c2                	cmp    dl,al
c0016b7b:	74 04                	je     c0016b81 <HalMakeBeep(int)+0x38>
c0016b7d:	88 d0                	mov    al,dl
c0016b7f:	e6 61                	out    0x61,al
c0016b81:	5b                   	pop    ebx
c0016b82:	c3                   	ret    

c0016b83 <HalGetRand()>:
c0016b83:	31 c0                	xor    eax,eax
c0016b85:	c3                   	ret    

c0016b86 <HalEndOfInterrupt(int)>:
c0016b86:	80 3d 00 72 02 c0 00 	cmp    BYTE PTR ds:0xc0027200,0x0
c0016b8d:	74 23                	je     c0016bb2 <HalEndOfInterrupt(int)+0x2c>
c0016b8f:	83 ec 14             	sub    esp,0x14
c0016b92:	6a 1b                	push   0x1b
c0016b94:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016b9a:	e8 fd 02 ff ff       	call   c0006e9c <Computer::rdmsr(unsigned int)>
c0016b9f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016ba4:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0016bae:	83 c4 1c             	add    esp,0x1c
c0016bb1:	c3                   	ret    
c0016bb2:	e9 55 02 00 00       	jmp    c0016e0c <picEOI(int)>

c0016bb7 <HalRestart()>:
c0016bb7:	c3                   	ret    

c0016bb8 <HalShutdown()>:
c0016bb8:	c3                   	ret    

c0016bb9 <HalSleep()>:
c0016bb9:	c3                   	ret    
c0016bba:	66 90                	xchg   ax,ax

c0016bbc <picIoWait()>:
c0016bbc:	eb 00                	jmp    c0016bbe <picIoWait()+0x2>
c0016bbe:	eb 00                	jmp    c0016bc0 <picIoWait()+0x4>
c0016bc0:	90                   	nop
c0016bc1:	c3                   	ret    
c0016bc2:	66 90                	xchg   ax,ax

c0016bc4 <picDisable()>:
c0016bc4:	83 ec 10             	sub    esp,0x10
c0016bc7:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0016bce:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0016bd3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016bd7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0016bdc:	ee                   	out    dx,al
c0016bdd:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0016be4:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0016be9:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0016bed:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0016bf2:	ee                   	out    dx,al
c0016bf3:	90                   	nop
c0016bf4:	83 c4 10             	add    esp,0x10
c0016bf7:	c3                   	ret    

c0016bf8 <picGetIRQReg(int)>:
c0016bf8:	83 ec 10             	sub    esp,0x10
c0016bfb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016bff:	25 ff 00 00 00       	and    eax,0xff
c0016c04:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0016c0b:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0016c0f:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0016c13:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0016c18:	ee                   	out    dx,al
c0016c19:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016c1d:	25 ff 00 00 00       	and    eax,0xff
c0016c22:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0016c29:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0016c2d:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0016c31:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0016c36:	ee                   	out    dx,al
c0016c37:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0016c3e:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0016c43:	89 c2                	mov    edx,eax
c0016c45:	ec                   	in     al,dx
c0016c46:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016c4a:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016c4e:	25 ff 00 00 00       	and    eax,0xff
c0016c53:	c1 e0 08             	shl    eax,0x8
c0016c56:	89 c1                	mov    ecx,eax
c0016c58:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0016c5f:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0016c64:	89 c2                	mov    edx,eax
c0016c66:	ec                   	in     al,dx
c0016c67:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0016c6b:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0016c6f:	25 ff 00 00 00       	and    eax,0xff
c0016c74:	09 c8                	or     eax,ecx
c0016c76:	83 c4 10             	add    esp,0x10
c0016c79:	c3                   	ret    
c0016c7a:	66 90                	xchg   ax,ax

c0016c7c <picOpen()>:
c0016c7c:	83 ec 50             	sub    esp,0x50
c0016c7f:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0016c86:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016c8b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016c8f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016c93:	ee                   	out    dx,al
c0016c94:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0016c9b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0016ca0:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0016ca4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016ca8:	ee                   	out    dx,al
c0016ca9:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0016cb1:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0016cb9:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0016cc0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016cc4:	89 c2                	mov    edx,eax
c0016cc6:	ec                   	in     al,dx
c0016cc7:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0016ccb:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0016ccf:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0016cd3:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0016cda:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016cde:	89 c2                	mov    edx,eax
c0016ce0:	ec                   	in     al,dx
c0016ce1:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0016ce5:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0016ce9:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0016ced:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0016cf4:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0016cf9:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0016cfd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016d01:	ee                   	out    dx,al
c0016d02:	e8 b5 fe ff ff       	call   c0016bbc <picIoWait()>
c0016d07:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0016d0e:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0016d13:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016d17:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016d1b:	ee                   	out    dx,al
c0016d1c:	e8 9b fe ff ff       	call   c0016bbc <picIoWait()>
c0016d21:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016d25:	25 ff 00 00 00       	and    eax,0xff
c0016d2a:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0016d31:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0016d35:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0016d39:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016d3d:	ee                   	out    dx,al
c0016d3e:	e8 79 fe ff ff       	call   c0016bbc <picIoWait()>
c0016d43:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016d47:	25 ff 00 00 00       	and    eax,0xff
c0016d4c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0016d53:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0016d57:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0016d5b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016d5f:	ee                   	out    dx,al
c0016d60:	e8 57 fe ff ff       	call   c0016bbc <picIoWait()>
c0016d65:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0016d6c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0016d71:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0016d75:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016d79:	ee                   	out    dx,al
c0016d7a:	e8 3d fe ff ff       	call   c0016bbc <picIoWait()>
c0016d7f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0016d86:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0016d8b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0016d8f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016d93:	ee                   	out    dx,al
c0016d94:	e8 23 fe ff ff       	call   c0016bbc <picIoWait()>
c0016d99:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0016da0:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0016da5:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0016da9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016dad:	ee                   	out    dx,al
c0016dae:	e8 09 fe ff ff       	call   c0016bbc <picIoWait()>
c0016db3:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0016dba:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0016dbf:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0016dc3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0016dc7:	ee                   	out    dx,al
c0016dc8:	e8 ef fd ff ff       	call   c0016bbc <picIoWait()>
c0016dcd:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0016dd1:	25 ff 00 00 00       	and    eax,0xff
c0016dd6:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0016ddd:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0016de1:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0016de5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0016de9:	ee                   	out    dx,al
c0016dea:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0016dee:	25 ff 00 00 00       	and    eax,0xff
c0016df3:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0016dfa:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0016dfe:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0016e02:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0016e06:	ee                   	out    dx,al
c0016e07:	90                   	nop
c0016e08:	83 c4 50             	add    esp,0x50
c0016e0b:	c3                   	ret    

c0016e0c <picEOI(int)>:
c0016e0c:	83 ec 10             	sub    esp,0x10
c0016e0f:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0016e14:	75 22                	jne    c0016e38 <picEOI(int)+0x2c>
c0016e16:	6a 0b                	push   0xb
c0016e18:	e8 db fd ff ff       	call   c0016bf8 <picGetIRQReg(int)>
c0016e1d:	83 c4 04             	add    esp,0x4
c0016e20:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0016e25:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0016e2a:	25 ff ff 00 00       	and    eax,0xffff
c0016e2f:	25 80 00 00 00       	and    eax,0x80
c0016e34:	74 72                	je     c0016ea8 <picEOI(int)+0x9c>
c0016e36:	66 90                	xchg   ax,ax
c0016e38:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0016e3d:	75 31                	jne    c0016e70 <picEOI(int)+0x64>
c0016e3f:	6a 0b                	push   0xb
c0016e41:	e8 b2 fd ff ff       	call   c0016bf8 <picGetIRQReg(int)>
c0016e46:	83 c4 04             	add    esp,0x4
c0016e49:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0016e4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e52:	66 85 c0             	test   ax,ax
c0016e55:	78 19                	js     c0016e70 <picEOI(int)+0x64>
c0016e57:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0016e5e:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0016e63:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016e67:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0016e6c:	ee                   	out    dx,al
c0016e6d:	eb 3d                	jmp    c0016eac <picEOI(int)+0xa0>
c0016e6f:	90                   	nop
c0016e70:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0016e75:	7e 19                	jle    c0016e90 <picEOI(int)+0x84>
c0016e77:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0016e7e:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0016e83:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0016e87:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0016e8c:	ee                   	out    dx,al
c0016e8d:	8d 76 00             	lea    esi,[esi+0x0]
c0016e90:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0016e97:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0016e9c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0016ea0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0016ea5:	ee                   	out    dx,al
c0016ea6:	eb 04                	jmp    c0016eac <picEOI(int)+0xa0>
c0016ea8:	90                   	nop
c0016ea9:	8d 76 00             	lea    esi,[esi+0x0]
c0016eac:	83 c4 10             	add    esp,0x10
c0016eaf:	c3                   	ret    

c0016eb0 <RTC::open(int, int, void*)>:
c0016eb0:	31 c0                	xor    eax,eax
c0016eb2:	c3                   	ret    
c0016eb3:	90                   	nop

c0016eb4 <RTC::close(int, int, void*)>:
c0016eb4:	31 c0                	xor    eax,eax
c0016eb6:	c3                   	ret    
c0016eb7:	90                   	nop

c0016eb8 <RTC::timeInSecondsUTC()>:
c0016eb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ebc:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016ec2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016ec8:	c3                   	ret    
c0016ec9:	90                   	nop

c0016eca <RTC::timeInDatetimeUTC()>:
c0016eca:	53                   	push   ebx
c0016ecb:	83 ec 14             	sub    esp,0x14
c0016ece:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016ed2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ed6:	8b 10                	mov    edx,DWORD PTR [eax]
c0016ed8:	50                   	push   eax
c0016ed9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016edc:	83 c4 0c             	add    esp,0xc
c0016edf:	52                   	push   edx
c0016ee0:	50                   	push   eax
c0016ee1:	53                   	push   ebx
c0016ee2:	e8 d1 48 ff ff       	call   c000b7b8 <secondsToDatetime(unsigned long long)>
c0016ee7:	89 d8                	mov    eax,ebx
c0016ee9:	83 c4 14             	add    esp,0x14
c0016eec:	5b                   	pop    ebx
c0016eed:	c2 04 00             	ret    0x4

c0016ef0 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0016ef0:	56                   	push   esi
c0016ef1:	53                   	push   ebx
c0016ef2:	83 ec 14             	sub    esp,0x14
c0016ef5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016ef9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016efb:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0016efe:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016f02:	52                   	push   edx
c0016f03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016f07:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016f0b:	50                   	push   eax
c0016f0c:	e8 a7 48 ff ff       	call   c000b7b8 <secondsToDatetime(unsigned long long)>
c0016f11:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016f15:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016f19:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016f1d:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0016f21:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016f25:	89 f0                	mov    eax,esi
c0016f27:	83 c4 20             	add    esp,0x20
c0016f2a:	5b                   	pop    ebx
c0016f2b:	5e                   	pop    esi
c0016f2c:	ff e0                	jmp    eax

c0016f2e <RTC::~RTC()>:
c0016f2e:	83 ec 0c             	sub    esp,0xc
c0016f31:	ba 4c 0d 02 c0       	mov    edx,0xc0020d4c
c0016f36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f3a:	89 10                	mov    DWORD PTR [eax],edx
c0016f3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f40:	83 ec 0c             	sub    esp,0xc
c0016f43:	50                   	push   eax
c0016f44:	e8 f3 45 ff ff       	call   c000b53c <Clock::~Clock()>
c0016f49:	83 c4 10             	add    esp,0x10
c0016f4c:	90                   	nop
c0016f4d:	83 c4 0c             	add    esp,0xc
c0016f50:	c3                   	ret    
c0016f51:	90                   	nop

c0016f52 <RTC::~RTC()>:
c0016f52:	83 ec 0c             	sub    esp,0xc
c0016f55:	83 ec 0c             	sub    esp,0xc
c0016f58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f5c:	e8 cd ff ff ff       	call   c0016f2e <RTC::~RTC()>
c0016f61:	83 c4 10             	add    esp,0x10
c0016f64:	83 ec 08             	sub    esp,0x8
c0016f67:	68 60 01 00 00       	push   0x160
c0016f6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f70:	e8 9b 35 ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c0016f75:	83 c4 10             	add    esp,0x10
c0016f78:	83 c4 0c             	add    esp,0xc
c0016f7b:	c3                   	ret    

c0016f7c <RTC::get_update_in_progress_flag()>:
c0016f7c:	83 ec 14             	sub    esp,0x14
c0016f7f:	6a 0a                	push   0xa
c0016f81:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016f87:	e8 c4 ff fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016f8c:	83 c4 1c             	add    esp,0x1c
c0016f8f:	c0 e8 07             	shr    al,0x7
c0016f92:	c3                   	ret    
c0016f93:	90                   	nop

c0016f94 <RTC::completeRTCRefresh()>:
c0016f94:	55                   	push   ebp
c0016f95:	57                   	push   edi
c0016f96:	56                   	push   esi
c0016f97:	53                   	push   ebx
c0016f98:	83 ec 2c             	sub    esp,0x2c
c0016f9b:	8b 1d 8c 64 02 c0    	mov    ebx,DWORD PTR ds:0xc002648c
c0016fa1:	83 ec 0c             	sub    esp,0xc
c0016fa4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016fa8:	e8 cf ff ff ff       	call   c0016f7c <RTC::get_update_in_progress_flag()>
c0016fad:	83 c4 10             	add    esp,0x10
c0016fb0:	84 c0                	test   al,al
c0016fb2:	74 0e                	je     c0016fc2 <RTC::completeRTCRefresh()+0x2e>
c0016fb4:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0016fba:	3b 05 8c 64 02 c0    	cmp    eax,DWORD PTR ds:0xc002648c
c0016fc0:	73 df                	jae    c0016fa1 <RTC::completeRTCRefresh()+0xd>
c0016fc2:	55                   	push   ebp
c0016fc3:	55                   	push   ebp
c0016fc4:	6a 00                	push   0x0
c0016fc6:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016fcc:	e8 7f ff fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016fd1:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0016fd5:	58                   	pop    eax
c0016fd6:	5a                   	pop    edx
c0016fd7:	6a 02                	push   0x2
c0016fd9:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016fdf:	e8 6c ff fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016fe4:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0016fe8:	59                   	pop    ecx
c0016fe9:	5b                   	pop    ebx
c0016fea:	6a 04                	push   0x4
c0016fec:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016ff2:	e8 59 ff fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016ff7:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0016ffb:	5e                   	pop    esi
c0016ffc:	5f                   	pop    edi
c0016ffd:	6a 07                	push   0x7
c0016fff:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017005:	e8 46 ff fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c001700a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c001700e:	5d                   	pop    ebp
c001700f:	58                   	pop    eax
c0017010:	6a 08                	push   0x8
c0017012:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017018:	e8 33 ff fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c001701d:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0017021:	58                   	pop    eax
c0017022:	5a                   	pop    edx
c0017023:	6a 09                	push   0x9
c0017025:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001702b:	e8 20 ff fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0017030:	83 c4 10             	add    esp,0x10
c0017033:	0f b6 e8             	movzx  ebp,al
c0017036:	8b 1d 8c 64 02 c0    	mov    ebx,DWORD PTR ds:0xc002648c
c001703c:	83 ec 0c             	sub    esp,0xc
c001703f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017043:	e8 34 ff ff ff       	call   c0016f7c <RTC::get_update_in_progress_flag()>
c0017048:	83 c4 10             	add    esp,0x10
c001704b:	84 c0                	test   al,al
c001704d:	74 0e                	je     c001705d <RTC::completeRTCRefresh()+0xc9>
c001704f:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0017055:	3b 05 8c 64 02 c0    	cmp    eax,DWORD PTR ds:0xc002648c
c001705b:	73 df                	jae    c001703c <RTC::completeRTCRefresh()+0xa8>
c001705d:	50                   	push   eax
c001705e:	50                   	push   eax
c001705f:	6a 00                	push   0x0
c0017061:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017067:	e8 e4 fe fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c001706c:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0017070:	58                   	pop    eax
c0017071:	5a                   	pop    edx
c0017072:	6a 02                	push   0x2
c0017074:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001707a:	e8 d1 fe fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c001707f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017083:	59                   	pop    ecx
c0017084:	5b                   	pop    ebx
c0017085:	6a 04                	push   0x4
c0017087:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001708d:	e8 be fe fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0017092:	5e                   	pop    esi
c0017093:	88 c3                	mov    bl,al
c0017095:	5f                   	pop    edi
c0017096:	6a 07                	push   0x7
c0017098:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001709e:	e8 ad fe fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c00170a3:	89 c6                	mov    esi,eax
c00170a5:	58                   	pop    eax
c00170a6:	5a                   	pop    edx
c00170a7:	6a 08                	push   0x8
c00170a9:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00170af:	e8 9c fe fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c00170b4:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00170b8:	59                   	pop    ecx
c00170b9:	5f                   	pop    edi
c00170ba:	6a 09                	push   0x9
c00170bc:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00170c2:	e8 89 fe fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c00170c7:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00170cb:	0f b6 f8             	movzx  edi,al
c00170ce:	83 c4 10             	add    esp,0x10
c00170d1:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c00170d5:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00170d9:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c00170dd:	89 f1                	mov    ecx,esi
c00170df:	0f 94 c0             	sete   al
c00170e2:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c00170e6:	0f 94 c2             	sete   dl
c00170e9:	21 d0                	and    eax,edx
c00170eb:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c00170ef:	0f 94 c2             	sete   dl
c00170f2:	21 c2                	and    edx,eax
c00170f4:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c00170f8:	0f 94 c0             	sete   al
c00170fb:	21 d0                	and    eax,edx
c00170fd:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0017101:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0017105:	0f 94 c1             	sete   cl
c0017108:	84 c8                	test   al,cl
c001710a:	75 29                	jne    c0017135 <RTC::completeRTCRefresh()+0x1a1>
c001710c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0017110:	89 fd                	mov    ebp,edi
c0017112:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0017116:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c001711a:	89 f0                	mov    eax,esi
c001711c:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0017120:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017124:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017128:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001712c:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017130:	e9 01 ff ff ff       	jmp    c0017036 <RTC::completeRTCRefresh()+0xa2>
c0017135:	39 fd                	cmp    ebp,edi
c0017137:	75 d3                	jne    c001710c <RTC::completeRTCRefresh()+0x178>
c0017139:	55                   	push   ebp
c001713a:	55                   	push   ebp
c001713b:	6a 0b                	push   0xb
c001713d:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017143:	e8 08 fe fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0017148:	83 c4 10             	add    esp,0x10
c001714b:	89 c5                	mov    ebp,eax
c001714d:	a8 04                	test   al,0x4
c001714f:	75 78                	jne    c00171c9 <RTC::completeRTCRefresh()+0x235>
c0017151:	b1 0a                	mov    cl,0xa
c0017153:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0017157:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001715b:	83 e2 0f             	and    edx,0xf
c001715e:	c0 e8 04             	shr    al,0x4
c0017161:	c1 ef 04             	shr    edi,0x4
c0017164:	f6 e1                	mul    cl
c0017166:	6b ff 0a             	imul   edi,edi,0xa
c0017169:	01 d0                	add    eax,edx
c001716b:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001716f:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0017173:	83 e2 0f             	and    edx,0xf
c0017176:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001717a:	c0 e8 04             	shr    al,0x4
c001717d:	f6 e1                	mul    cl
c001717f:	01 d0                	add    eax,edx
c0017181:	88 da                	mov    dl,bl
c0017183:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017187:	83 e2 0f             	and    edx,0xf
c001718a:	88 d8                	mov    al,bl
c001718c:	83 e3 80             	and    ebx,0xffffff80
c001718f:	c0 e8 04             	shr    al,0x4
c0017192:	83 e0 07             	and    eax,0x7
c0017195:	f6 e1                	mul    cl
c0017197:	01 d0                	add    eax,edx
c0017199:	89 f2                	mov    edx,esi
c001719b:	09 c3                	or     ebx,eax
c001719d:	83 e2 0f             	and    edx,0xf
c00171a0:	89 f0                	mov    eax,esi
c00171a2:	c0 e8 04             	shr    al,0x4
c00171a5:	f6 e1                	mul    cl
c00171a7:	8d 34 02             	lea    esi,[edx+eax*1]
c00171aa:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c00171ae:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00171b2:	83 e2 0f             	and    edx,0xf
c00171b5:	c0 e8 04             	shr    al,0x4
c00171b8:	f6 e1                	mul    cl
c00171ba:	01 d0                	add    eax,edx
c00171bc:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c00171c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00171c4:	83 e0 0f             	and    eax,0xf
c00171c7:	01 c7                	add    edi,eax
c00171c9:	83 e5 02             	and    ebp,0x2
c00171cc:	75 14                	jne    c00171e2 <RTC::completeRTCRefresh()+0x24e>
c00171ce:	84 db                	test   bl,bl
c00171d0:	79 10                	jns    c00171e2 <RTC::completeRTCRefresh()+0x24e>
c00171d2:	83 e3 7f             	and    ebx,0x7f
c00171d5:	b9 18 00 00 00       	mov    ecx,0x18
c00171da:	8d 43 0c             	lea    eax,[ebx+0xc]
c00171dd:	99                   	cdq    
c00171de:	f7 f9                	idiv   ecx
c00171e0:	88 d3                	mov    bl,dl
c00171e2:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c00171e8:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c00171ee:	77 06                	ja     c00171f6 <RTC::completeRTCRefresh()+0x262>
c00171f0:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c00171f6:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c00171fb:	31 d2                	xor    edx,edx
c00171fd:	c1 e1 10             	shl    ecx,0x10
c0017200:	89 d7                	mov    edi,edx
c0017202:	c1 e5 10             	shl    ebp,0x10
c0017205:	31 c0                	xor    eax,eax
c0017207:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c001720d:	09 cf                	or     edi,ecx
c001720f:	89 fa                	mov    edx,edi
c0017211:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0017215:	88 da                	mov    dl,bl
c0017217:	89 f3                	mov    ebx,esi
c0017219:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c001721d:	88 d8                	mov    al,bl
c001721f:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0017223:	0f b7 c8             	movzx  ecx,ax
c0017226:	09 e9                	or     ecx,ebp
c0017228:	89 c8                	mov    eax,ecx
c001722a:	51                   	push   ecx
c001722b:	51                   	push   ecx
c001722c:	52                   	push   edx
c001722d:	50                   	push   eax
c001722e:	e8 f8 43 ff ff       	call   c000b62b <datetimeToSeconds(datetime_t)>
c0017233:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0017237:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001723d:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0017243:	83 c4 3c             	add    esp,0x3c
c0017246:	5b                   	pop    ebx
c0017247:	5e                   	pop    esi
c0017248:	5f                   	pop    edi
c0017249:	5d                   	pop    ebp
c001724a:	c3                   	ret    
c001724b:	90                   	nop

c001724c <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001724c:	55                   	push   ebp
c001724d:	57                   	push   edi
c001724e:	56                   	push   esi
c001724f:	53                   	push   ebx
c0017250:	83 ec 30             	sub    esp,0x30
c0017253:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017257:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c001725b:	6a 00                	push   0x0
c001725d:	6a 00                	push   0x0
c001725f:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017265:	e8 fc fd fe ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c001726a:	83 c4 0c             	add    esp,0xc
c001726d:	6a 00                	push   0x0
c001726f:	6a 02                	push   0x2
c0017271:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017277:	e8 ea fd fe ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c001727c:	31 d2                	xor    edx,edx
c001727e:	89 f9                	mov    ecx,edi
c0017280:	89 f8                	mov    eax,edi
c0017282:	c1 e9 10             	shr    ecx,0x10
c0017285:	0f b6 c4             	movzx  eax,ah
c0017288:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c001728c:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0017290:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017294:	b9 64 00 00 00       	mov    ecx,0x64
c0017299:	89 f0                	mov    eax,esi
c001729b:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001729f:	89 f0                	mov    eax,esi
c00172a1:	0f b6 c4             	movzx  eax,ah
c00172a4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00172a8:	89 f0                	mov    eax,esi
c00172aa:	c1 e8 10             	shr    eax,0x10
c00172ad:	66 f7 f1             	div    cx
c00172b0:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c00172b5:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c00172ba:	59                   	pop    ecx
c00172bb:	5b                   	pop    ebx
c00172bc:	89 fb                	mov    ebx,edi
c00172be:	6a 0b                	push   0xb
c00172c0:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00172c6:	e8 85 fc fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c00172cb:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c00172cf:	83 c4 10             	add    esp,0x10
c00172d2:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c00172d7:	75 74                	jne    c001734d <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c00172d9:	b2 0a                	mov    dl,0xa
c00172db:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00172df:	0f b6 c1             	movzx  eax,cl
c00172e2:	f6 f2                	div    dl
c00172e4:	88 c3                	mov    bl,al
c00172e6:	88 e0                	mov    al,ah
c00172e8:	c1 e3 04             	shl    ebx,0x4
c00172eb:	09 c3                	or     ebx,eax
c00172ed:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00172f2:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c00172f6:	f6 f2                	div    dl
c00172f8:	88 c1                	mov    cl,al
c00172fa:	88 e0                	mov    al,ah
c00172fc:	c1 e1 04             	shl    ecx,0x4
c00172ff:	09 c1                	or     ecx,eax
c0017301:	89 f8                	mov    eax,edi
c0017303:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017307:	0f b6 c0             	movzx  eax,al
c001730a:	f6 f2                	div    dl
c001730c:	88 c3                	mov    bl,al
c001730e:	88 e0                	mov    al,ah
c0017310:	c1 e3 04             	shl    ebx,0x4
c0017313:	09 c3                	or     ebx,eax
c0017315:	89 f0                	mov    eax,esi
c0017317:	0f b6 c0             	movzx  eax,al
c001731a:	f6 f2                	div    dl
c001731c:	88 c1                	mov    cl,al
c001731e:	88 e0                	mov    al,ah
c0017320:	c1 e1 04             	shl    ecx,0x4
c0017323:	09 c1                	or     ecx,eax
c0017325:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001732a:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c001732e:	f6 f2                	div    dl
c0017330:	88 c1                	mov    cl,al
c0017332:	88 e0                	mov    al,ah
c0017334:	c1 e1 04             	shl    ecx,0x4
c0017337:	09 c1                	or     ecx,eax
c0017339:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c001733e:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0017342:	f6 f2                	div    dl
c0017344:	89 c5                	mov    ebp,eax
c0017346:	88 e0                	mov    al,ah
c0017348:	c1 e5 04             	shl    ebp,0x4
c001734b:	09 c5                	or     ebp,eax
c001734d:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c0017352:	75 17                	jne    c001736b <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0017354:	80 fb 0b             	cmp    bl,0xb
c0017357:	76 0c                	jbe    c0017365 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c0017359:	80 eb 0c             	sub    bl,0xc
c001735c:	75 02                	jne    c0017360 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c001735e:	b3 0c                	mov    bl,0xc
c0017360:	83 cb 80             	or     ebx,0xffffff80
c0017363:	eb 06                	jmp    c001736b <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0017365:	84 db                	test   bl,bl
c0017367:	75 02                	jne    c001736b <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0017369:	b3 0c                	mov    bl,0xc
c001736b:	0f b6 db             	movzx  ebx,bl
c001736e:	50                   	push   eax
c001736f:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0017374:	50                   	push   eax
c0017375:	6a 00                	push   0x0
c0017377:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001737d:	e8 e4 fc fe ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017382:	83 c4 0c             	add    esp,0xc
c0017385:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001738a:	50                   	push   eax
c001738b:	6a 02                	push   0x2
c001738d:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017393:	e8 ce fc fe ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017398:	83 c4 0c             	add    esp,0xc
c001739b:	53                   	push   ebx
c001739c:	6a 04                	push   0x4
c001739e:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00173a4:	e8 bd fc fe ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c00173a9:	83 c4 0c             	add    esp,0xc
c00173ac:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00173b1:	50                   	push   eax
c00173b2:	6a 07                	push   0x7
c00173b4:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00173ba:	e8 a7 fc fe ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c00173bf:	83 c4 0c             	add    esp,0xc
c00173c2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00173c7:	50                   	push   eax
c00173c8:	6a 08                	push   0x8
c00173ca:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00173d0:	e8 91 fc fe ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c00173d5:	83 c4 0c             	add    esp,0xc
c00173d8:	89 e8                	mov    eax,ebp
c00173da:	0f b6 e8             	movzx  ebp,al
c00173dd:	55                   	push   ebp
c00173de:	6a 09                	push   0x9
c00173e0:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00173e6:	e8 7b fc fe ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c00173eb:	5a                   	pop    edx
c00173ec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00173f0:	e8 9f fb ff ff       	call   c0016f94 <RTC::completeRTCRefresh()>
c00173f5:	83 c4 3c             	add    esp,0x3c
c00173f8:	b0 01                	mov    al,0x1
c00173fa:	5b                   	pop    ebx
c00173fb:	5e                   	pop    esi
c00173fc:	5f                   	pop    edi
c00173fd:	5d                   	pop    ebp
c00173fe:	c3                   	ret    

c00173ff <rtcIRQHandler(regs*, void*)>:
c00173ff:	53                   	push   ebx
c0017400:	83 ec 10             	sub    esp,0x10
c0017403:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017407:	6a 0c                	push   0xc
c0017409:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001740f:	e8 3c fb fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0017414:	83 c4 10             	add    esp,0x10
c0017417:	84 c0                	test   al,al
c0017419:	79 24                	jns    c001743f <rtcIRQHandler(regs*, void*)+0x40>
c001741b:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0017422:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0017429:	66 ff 05 14 72 02 c0 	inc    WORD PTR ds:0xc0027214
c0017430:	75 0d                	jne    c001743f <rtcIRQHandler(regs*, void*)+0x40>
c0017432:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017436:	83 c4 08             	add    esp,0x8
c0017439:	5b                   	pop    ebx
c001743a:	e9 55 fb ff ff       	jmp    c0016f94 <RTC::completeRTCRefresh()>
c001743f:	83 c4 08             	add    esp,0x8
c0017442:	5b                   	pop    ebx
c0017443:	c3                   	ret    

c0017444 <RTC::RTC()>:
c0017444:	83 ec 1c             	sub    esp,0x1c
c0017447:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001744b:	83 ec 08             	sub    esp,0x8
c001744e:	68 2f 0d 02 c0       	push   0xc0020d2f
c0017453:	50                   	push   eax
c0017454:	e8 ad 40 ff ff       	call   c000b506 <Clock::Clock(char const*)>
c0017459:	83 c4 10             	add    esp,0x10
c001745c:	ba 4c 0d 02 c0       	mov    edx,0xc0020d4c
c0017461:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017465:	89 10                	mov    DWORD PTR [eax],edx
c0017467:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001746b:	83 ec 0c             	sub    esp,0xc
c001746e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017472:	6a 01                	push   0x1
c0017474:	68 ff 73 01 c0       	push   0xc00173ff
c0017479:	6a 08                	push   0x8
c001747b:	50                   	push   eax
c001747c:	e8 6f 45 ff ff       	call   c000b9f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0017481:	83 c4 20             	add    esp,0x20
c0017484:	89 c2                	mov    edx,eax
c0017486:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001748a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0017490:	fa                   	cli    
c0017491:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0017496:	40                   	inc    eax
c0017497:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001749c:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c00174a1:	83 ec 08             	sub    esp,0x8
c00174a4:	6a 0b                	push   0xb
c00174a6:	50                   	push   eax
c00174a7:	e8 a4 fa fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c00174ac:	83 c4 10             	add    esp,0x10
c00174af:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00174b3:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c00174b8:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00174bc:	83 ca 10             	or     edx,0x10
c00174bf:	81 e2 ff 00 00 00    	and    edx,0xff
c00174c5:	83 ec 04             	sub    esp,0x4
c00174c8:	52                   	push   edx
c00174c9:	6a 0b                	push   0xb
c00174cb:	50                   	push   eax
c00174cc:	e8 95 fb fe ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c00174d1:	83 c4 10             	add    esp,0x10
c00174d4:	83 ec 0c             	sub    esp,0xc
c00174d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00174db:	e8 b4 fa ff ff       	call   c0016f94 <RTC::completeRTCRefresh()>
c00174e0:	83 c4 10             	add    esp,0x10
c00174e3:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00174e8:	48                   	dec    eax
c00174e9:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00174ee:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00174f3:	85 c0                	test   eax,eax
c00174f5:	75 01                	jne    c00174f8 <RTC::RTC()+0xb4>
c00174f7:	fb                   	sti    
c00174f8:	90                   	nop
c00174f9:	83 c4 1c             	add    esp,0x1c
c00174fc:	c3                   	ret    
c00174fd:	66 90                	xchg   ax,ax
c00174ff:	90                   	nop

c0017500 <HalConsoleScroll(int, int)>:
c0017500:	83 ec 10             	sub    esp,0x10
c0017503:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001750b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0017513:	90                   	nop
c0017514:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017519:	0f 8f e1 00 00 00    	jg     c0017600 <HalConsoleScroll(int, int)+0x100>
c001751f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017527:	90                   	nop
c0017528:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0017530:	0f 8f be 00 00 00    	jg     c00175f4 <HalConsoleScroll(int, int)+0xf4>
c0017536:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001753a:	89 d0                	mov    eax,edx
c001753c:	c1 e0 02             	shl    eax,0x2
c001753f:	01 d0                	add    eax,edx
c0017541:	c1 e0 05             	shl    eax,0x5
c0017544:	89 c2                	mov    edx,eax
c0017546:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001754a:	01 d0                	add    eax,edx
c001754c:	89 c2                	mov    edx,eax
c001754e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017552:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017555:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017559:	89 d0                	mov    eax,edx
c001755b:	c1 e0 02             	shl    eax,0x2
c001755e:	01 d0                	add    eax,edx
c0017560:	c1 e0 05             	shl    eax,0x5
c0017563:	89 c2                	mov    edx,eax
c0017565:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017569:	01 d0                	add    eax,edx
c001756b:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0017571:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017575:	01 c2                	add    edx,eax
c0017577:	8a 01                	mov    al,BYTE PTR [ecx]
c0017579:	88 02                	mov    BYTE PTR [edx],al
c001757b:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017580:	75 66                	jne    c00175e8 <HalConsoleScroll(int, int)+0xe8>
c0017582:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017586:	83 e0 01             	and    eax,0x1
c0017589:	74 39                	je     c00175c4 <HalConsoleScroll(int, int)+0xc4>
c001758b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001758f:	83 e0 0f             	and    eax,0xf
c0017592:	88 c2                	mov    dl,al
c0017594:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017598:	c1 e0 04             	shl    eax,0x4
c001759b:	88 d1                	mov    cl,dl
c001759d:	09 c1                	or     ecx,eax
c001759f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00175a3:	89 d0                	mov    eax,edx
c00175a5:	c1 e0 02             	shl    eax,0x2
c00175a8:	01 d0                	add    eax,edx
c00175aa:	c1 e0 05             	shl    eax,0x5
c00175ad:	89 c2                	mov    edx,eax
c00175af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00175b3:	01 d0                	add    eax,edx
c00175b5:	89 c2                	mov    edx,eax
c00175b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175bb:	01 d0                	add    eax,edx
c00175bd:	88 ca                	mov    dl,cl
c00175bf:	88 10                	mov    BYTE PTR [eax],dl
c00175c1:	eb 25                	jmp    c00175e8 <HalConsoleScroll(int, int)+0xe8>
c00175c3:	90                   	nop
c00175c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00175c8:	89 d0                	mov    eax,edx
c00175ca:	c1 e0 02             	shl    eax,0x2
c00175cd:	01 d0                	add    eax,edx
c00175cf:	c1 e0 05             	shl    eax,0x5
c00175d2:	89 c2                	mov    edx,eax
c00175d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00175d8:	01 d0                	add    eax,edx
c00175da:	89 c2                	mov    edx,eax
c00175dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175e0:	01 d0                	add    eax,edx
c00175e2:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00175e5:	8d 76 00             	lea    esi,[esi+0x0]
c00175e8:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00175ec:	e9 37 ff ff ff       	jmp    c0017528 <HalConsoleScroll(int, int)+0x28>
c00175f1:	8d 76 00             	lea    esi,[esi+0x0]
c00175f4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00175f8:	e9 17 ff ff ff       	jmp    c0017514 <HalConsoleScroll(int, int)+0x14>
c00175fd:	8d 76 00             	lea    esi,[esi+0x0]
c0017600:	90                   	nop
c0017601:	83 c4 10             	add    esp,0x10
c0017604:	c3                   	ret    
c0017605:	8d 76 00             	lea    esi,[esi+0x0]

c0017608 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0017608:	83 ec 14             	sub    esp,0x14
c001760b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001760f:	88 04 24             	mov    BYTE PTR [esp],al
c0017612:	8a 04 24             	mov    al,BYTE PTR [esp]
c0017615:	25 ff 00 00 00       	and    eax,0xff
c001761a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001761e:	89 d1                	mov    ecx,edx
c0017620:	83 e1 0f             	and    ecx,0xf
c0017623:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017627:	c1 e2 04             	shl    edx,0x4
c001762a:	81 e2 ff 00 00 00    	and    edx,0xff
c0017630:	09 ca                	or     edx,ecx
c0017632:	c1 e2 08             	shl    edx,0x8
c0017635:	09 d0                	or     eax,edx
c0017637:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001763c:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0017644:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017648:	89 d0                	mov    eax,edx
c001764a:	c1 e0 02             	shl    eax,0x2
c001764d:	01 d0                	add    eax,edx
c001764f:	c1 e0 04             	shl    eax,0x4
c0017652:	89 c2                	mov    edx,eax
c0017654:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017658:	01 d0                	add    eax,edx
c001765a:	01 c0                	add    eax,eax
c001765c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0017660:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017664:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0017669:	66 89 02             	mov    WORD PTR [edx],ax
c001766c:	90                   	nop
c001766d:	83 c4 14             	add    esp,0x14
c0017670:	c3                   	ret    
c0017671:	8d 76 00             	lea    esi,[esi+0x0]

c0017674 <HalConsoleCursorUpdate(int, int)>:
c0017674:	83 ec 20             	sub    esp,0x20
c0017677:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001767b:	89 c2                	mov    edx,eax
c001767d:	89 d0                	mov    eax,edx
c001767f:	c1 e0 02             	shl    eax,0x2
c0017682:	01 d0                	add    eax,edx
c0017684:	c1 e0 04             	shl    eax,0x4
c0017687:	89 c2                	mov    edx,eax
c0017689:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001768d:	01 d0                	add    eax,edx
c001768f:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0017694:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001769b:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00176a0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00176a4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00176a8:	ee                   	out    dx,al
c00176a9:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00176ae:	25 ff 00 00 00       	and    eax,0xff
c00176b3:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00176ba:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00176be:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00176c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00176c6:	ee                   	out    dx,al
c00176c7:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00176ce:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00176d3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00176d7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00176db:	ee                   	out    dx,al
c00176dc:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00176e1:	66 c1 e8 08          	shr    ax,0x8
c00176e5:	25 ff 00 00 00       	and    eax,0xff
c00176ea:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00176f1:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00176f5:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00176f9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00176fd:	ee                   	out    dx,al
c00176fe:	90                   	nop
c00176ff:	83 c4 20             	add    esp,0x20
c0017702:	c3                   	ret    
c0017703:	90                   	nop

c0017704 <FAT::getName()>:
c0017704:	b8 80 0d 02 c0       	mov    eax,0xc0020d80
c0017709:	c3                   	ret    
c001770a:	66 90                	xchg   ax,ax

c001770c <FAT::tell(void*, unsigned long long*)>:
c001770c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017711:	75 09                	jne    c001771c <FAT::tell(void*, unsigned long long*)+0x10>
c0017713:	b8 04 00 00 00       	mov    eax,0x4
c0017718:	c3                   	ret    
c0017719:	8d 76 00             	lea    esi,[esi+0x0]
c001771c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017721:	75 09                	jne    c001772c <FAT::tell(void*, unsigned long long*)+0x20>
c0017723:	b8 04 00 00 00       	mov    eax,0x4
c0017728:	c3                   	ret    
c0017729:	8d 76 00             	lea    esi,[esi+0x0]
c001772c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017730:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017733:	ba 00 00 00 00       	mov    edx,0x0
c0017738:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001773c:	89 01                	mov    DWORD PTR [ecx],eax
c001773e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017741:	b8 00 00 00 00       	mov    eax,0x0
c0017746:	c3                   	ret    
c0017747:	90                   	nop

c0017748 <FAT::stat(void*, unsigned long long*)>:
c0017748:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001774d:	75 09                	jne    c0017758 <FAT::stat(void*, unsigned long long*)+0x10>
c001774f:	b8 04 00 00 00       	mov    eax,0x4
c0017754:	c3                   	ret    
c0017755:	8d 76 00             	lea    esi,[esi+0x0]
c0017758:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001775d:	75 09                	jne    c0017768 <FAT::stat(void*, unsigned long long*)+0x20>
c001775f:	b8 04 00 00 00       	mov    eax,0x4
c0017764:	c3                   	ret    
c0017765:	8d 76 00             	lea    esi,[esi+0x0]
c0017768:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001776c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001776f:	ba 00 00 00 00       	mov    edx,0x0
c0017774:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017778:	89 01                	mov    DWORD PTR [ecx],eax
c001777a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001777d:	b8 00 00 00 00       	mov    eax,0x0
c0017782:	c3                   	ret    
c0017783:	90                   	nop

c0017784 <FAT::~FAT()>:
c0017784:	83 ec 0c             	sub    esp,0xc
c0017787:	ba cc 0d 02 c0       	mov    edx,0xc0020dcc
c001778c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017790:	89 10                	mov    DWORD PTR [eax],edx
c0017792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017796:	83 ec 0c             	sub    esp,0xc
c0017799:	50                   	push   eax
c001779a:	e8 ad 31 ff ff       	call   c000a94c <Filesystem::~Filesystem()>
c001779f:	83 c4 10             	add    esp,0x10
c00177a2:	90                   	nop
c00177a3:	83 c4 0c             	add    esp,0xc
c00177a6:	c3                   	ret    
c00177a7:	90                   	nop

c00177a8 <FAT::~FAT()>:
c00177a8:	83 ec 0c             	sub    esp,0xc
c00177ab:	83 ec 0c             	sub    esp,0xc
c00177ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00177b2:	e8 cd ff ff ff       	call   c0017784 <FAT::~FAT()>
c00177b7:	83 c4 10             	add    esp,0x10
c00177ba:	83 ec 08             	sub    esp,0x8
c00177bd:	6a 08                	push   0x8
c00177bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00177c3:	e8 48 2d ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c00177c8:	83 c4 10             	add    esp,0x10
c00177cb:	83 c4 0c             	add    esp,0xc
c00177ce:	c3                   	ret    
c00177cf:	90                   	nop

c00177d0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00177d0:	83 ec 1c             	sub    esp,0x1c
c00177d3:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00177da:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00177df:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177e3:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c00177ea:	83 f8 ff             	cmp    eax,0xffffffff
c00177ed:	75 35                	jne    c0017824 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00177ef:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00177f3:	88 c2                	mov    dl,al
c00177f5:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c00177fa:	01 d0                	add    eax,edx
c00177fc:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017800:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c0017806:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001780a:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c0017811:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017816:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001781a:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c0017821:	eb 19                	jmp    c001783c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0017823:	90                   	nop
c0017824:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017828:	88 c2                	mov    dl,al
c001782a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001782e:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017835:	01 d0                	add    eax,edx
c0017837:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001783b:	90                   	nop
c001783c:	83 ec 04             	sub    esp,0x4
c001783f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017843:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017847:	8d 44 24 15          	lea    eax,[esp+0x15]
c001784b:	50                   	push   eax
c001784c:	e8 f3 d5 fe ff       	call   c0004e44 <f_getlabel>
c0017851:	83 c4 10             	add    esp,0x10
c0017854:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017858:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001785d:	75 09                	jne    c0017868 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001785f:	b8 00 00 00 00       	mov    eax,0x0
c0017864:	eb 0a                	jmp    c0017870 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0017866:	66 90                	xchg   ax,ax
c0017868:	b8 01 00 00 00       	mov    eax,0x1
c001786d:	8d 76 00             	lea    esi,[esi+0x0]
c0017870:	83 c4 1c             	add    esp,0x1c
c0017873:	c3                   	ret    

c0017874 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0017874:	57                   	push   edi
c0017875:	83 ec 58             	sub    esp,0x58
c0017878:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0017880:	8d 54 24 10          	lea    edx,[esp+0x10]
c0017884:	b8 00 00 00 00       	mov    eax,0x0
c0017889:	b9 0f 00 00 00       	mov    ecx,0xf
c001788e:	fc                   	cld    
c001788f:	89 d7                	mov    edi,edx
c0017891:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0017893:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017897:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c001789e:	83 f8 ff             	cmp    eax,0xffffffff
c00178a1:	75 35                	jne    c00178d8 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c00178a3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00178a7:	88 c2                	mov    dl,al
c00178a9:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c00178ae:	01 d0                	add    eax,edx
c00178b0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00178b4:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c00178ba:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00178be:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c00178c5:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c00178ca:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00178ce:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c00178d5:	eb 19                	jmp    c00178f0 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c00178d7:	90                   	nop
c00178d8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00178dc:	88 c2                	mov    dl,al
c00178de:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00178e2:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c00178e9:	01 d0                	add    eax,edx
c00178eb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00178ef:	90                   	nop
c00178f0:	83 ec 08             	sub    esp,0x8
c00178f3:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00178f7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178fb:	50                   	push   eax
c00178fc:	e8 af 8e fe ff       	call   c00007b0 <strcat>
c0017901:	83 c4 10             	add    esp,0x10
c0017904:	83 ec 0c             	sub    esp,0xc
c0017907:	8d 44 24 18          	lea    eax,[esp+0x18]
c001790b:	50                   	push   eax
c001790c:	e8 84 d6 fe ff       	call   c0004f95 <f_setlabel>
c0017911:	83 c4 10             	add    esp,0x10
c0017914:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017918:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001791d:	75 09                	jne    c0017928 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001791f:	b8 00 00 00 00       	mov    eax,0x0
c0017924:	eb 0a                	jmp    c0017930 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0017926:	66 90                	xchg   ax,ax
c0017928:	b8 01 00 00 00       	mov    eax,0x1
c001792d:	8d 76 00             	lea    esi,[esi+0x0]
c0017930:	83 c4 58             	add    esp,0x58
c0017933:	5f                   	pop    edi
c0017934:	c3                   	ret    
c0017935:	90                   	nop
c0017936:	66 90                	xchg   ax,ax

c0017938 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0017938:	83 ec 2c             	sub    esp,0x2c
c001793b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017943:	83 ec 08             	sub    esp,0x8
c0017946:	68 a4 0d 02 c0       	push   0xc0020da4
c001794b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001794f:	e8 7c 8d fe ff       	call   c00006d0 <strcmp>
c0017954:	83 c4 10             	add    esp,0x10
c0017957:	85 c0                	test   eax,eax
c0017959:	0f 94 c0             	sete   al
c001795c:	84 c0                	test   al,al
c001795e:	74 10                	je     c0017970 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0017960:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0017968:	e9 b3 00 00 00       	jmp    c0017a20 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001796d:	8d 76 00             	lea    esi,[esi+0x0]
c0017970:	83 ec 08             	sub    esp,0x8
c0017973:	68 96 0d 02 c0       	push   0xc0020d96
c0017978:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001797c:	e8 4f 8d fe ff       	call   c00006d0 <strcmp>
c0017981:	83 c4 10             	add    esp,0x10
c0017984:	85 c0                	test   eax,eax
c0017986:	0f 94 c0             	sete   al
c0017989:	84 c0                	test   al,al
c001798b:	74 0f                	je     c001799c <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001798d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0017995:	e9 86 00 00 00       	jmp    c0017a20 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001799a:	66 90                	xchg   ax,ax
c001799c:	83 ec 08             	sub    esp,0x8
c001799f:	68 9c 0d 02 c0       	push   0xc0020d9c
c00179a4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00179a8:	e8 23 8d fe ff       	call   c00006d0 <strcmp>
c00179ad:	83 c4 10             	add    esp,0x10
c00179b0:	85 c0                	test   eax,eax
c00179b2:	0f 94 c0             	sete   al
c00179b5:	84 c0                	test   al,al
c00179b7:	74 0b                	je     c00179c4 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c00179b9:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00179c1:	eb 5d                	jmp    c0017a20 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00179c3:	90                   	nop
c00179c4:	83 ec 08             	sub    esp,0x8
c00179c7:	68 5c eb 01 c0       	push   0xc001eb5c
c00179cc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00179d0:	e8 fb 8c fe ff       	call   c00006d0 <strcmp>
c00179d5:	83 c4 10             	add    esp,0x10
c00179d8:	85 c0                	test   eax,eax
c00179da:	0f 94 c0             	sete   al
c00179dd:	84 c0                	test   al,al
c00179df:	74 0b                	je     c00179ec <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c00179e1:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00179e9:	eb 35                	jmp    c0017a20 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00179eb:	90                   	nop
c00179ec:	83 ec 08             	sub    esp,0x8
c00179ef:	68 a2 0d 02 c0       	push   0xc0020da2
c00179f4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00179f8:	e8 d3 8c fe ff       	call   c00006d0 <strcmp>
c00179fd:	83 c4 10             	add    esp,0x10
c0017a00:	85 c0                	test   eax,eax
c0017a02:	0f 94 c0             	sete   al
c0017a05:	84 c0                	test   al,al
c0017a07:	74 0b                	je     c0017a14 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c0017a09:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0017a11:	eb 0d                	jmp    c0017a20 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017a13:	90                   	nop
c0017a14:	b8 08 00 00 00       	mov    eax,0x8
c0017a19:	e9 ea 00 00 00       	jmp    c0017b08 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0017a1e:	66 90                	xchg   ax,ax
c0017a20:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0017a27:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0017a2c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a30:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017a37:	83 f8 ff             	cmp    eax,0xffffffff
c0017a3a:	75 34                	jne    c0017a70 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c0017a3c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0017a40:	88 c2                	mov    dl,al
c0017a42:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017a47:	01 d0                	add    eax,edx
c0017a49:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0017a4d:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c0017a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a57:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c0017a5e:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017a63:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0017a67:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c0017a6e:	eb 18                	jmp    c0017a88 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c0017a70:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0017a74:	88 c2                	mov    dl,al
c0017a76:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a7a:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017a81:	01 d0                	add    eax,edx
c0017a83:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0017a87:	90                   	nop
c0017a88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017a8c:	88 04 24             	mov    BYTE PTR [esp],al
c0017a8f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017a93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017a97:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017a9f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0017aa4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017aac:	83 ec 0c             	sub    esp,0xc
c0017aaf:	68 00 20 00 00       	push   0x2000
c0017ab4:	e8 ac fd fe ff       	call   c0007865 <malloc>
c0017ab9:	83 c4 10             	add    esp,0x10
c0017abc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017ac0:	68 00 20 00 00       	push   0x2000
c0017ac5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ac9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017acd:	50                   	push   eax
c0017ace:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0017ad2:	50                   	push   eax
c0017ad3:	e8 ad d7 fe ff       	call   c0005285 <f_mkfs>
c0017ad8:	83 c4 10             	add    esp,0x10
c0017adb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017adf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017ae4:	75 0a                	jne    c0017af0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c0017ae6:	b8 00 00 00 00       	mov    eax,0x0
c0017aeb:	eb 1b                	jmp    c0017b08 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0017aed:	8d 76 00             	lea    esi,[esi+0x0]
c0017af0:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0017af5:	75 09                	jne    c0017b00 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0017af7:	b8 09 00 00 00       	mov    eax,0x9
c0017afc:	eb 0a                	jmp    c0017b08 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0017afe:	66 90                	xchg   ax,ax
c0017b00:	b8 01 00 00 00       	mov    eax,0x1
c0017b05:	8d 76 00             	lea    esi,[esi+0x0]
c0017b08:	83 c4 2c             	add    esp,0x2c
c0017b0b:	c3                   	ret    

c0017b0c <FAT::tryMount(LogicalDisk*, int)>:
c0017b0c:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0017b12:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017b17:	83 f8 14             	cmp    eax,0x14
c0017b1a:	75 18                	jne    c0017b34 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0017b1c:	83 ec 0c             	sub    esp,0xc
c0017b1f:	68 a8 0d 02 c0       	push   0xc0020da8
c0017b24:	e8 9e 88 ff ff       	call   c00103c7 <KePanic(char const*)>
c0017b29:	83 c4 10             	add    esp,0x10
c0017b2c:	b0 00                	mov    al,0x0
c0017b2e:	e9 e9 01 00 00       	jmp    c0017d1c <FAT::tryMount(LogicalDisk*, int)+0x210>
c0017b33:	90                   	nop
c0017b34:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0017b3b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017b41:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017b47:	3d 00 02 00 00       	cmp    eax,0x200
c0017b4c:	74 0a                	je     c0017b58 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0017b4e:	b0 00                	mov    al,0x0
c0017b50:	e9 c7 01 00 00       	jmp    c0017d1c <FAT::tryMount(LogicalDisk*, int)+0x210>
c0017b55:	8d 76 00             	lea    esi,[esi+0x0]
c0017b58:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0017b60:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0017b67:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017b6e:	83 f8 ff             	cmp    eax,0xffffffff
c0017b71:	74 09                	je     c0017b7c <FAT::tryMount(LogicalDisk*, int)+0x70>
c0017b73:	b0 01                	mov    al,0x1
c0017b75:	e9 a2 01 00 00       	jmp    c0017d1c <FAT::tryMount(LogicalDisk*, int)+0x210>
c0017b7a:	66 90                	xchg   ax,ax
c0017b7c:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0017b86:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0017b8e:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0017b95:	88 c2                	mov    dl,al
c0017b97:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017b9c:	01 d0                	add    eax,edx
c0017b9e:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0017ba5:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c0017bab:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0017bb2:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c0017bb9:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017bbe:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0017bc5:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c0017bcc:	83 ec 0c             	sub    esp,0xc
c0017bcf:	68 34 02 00 00       	push   0x234
c0017bd4:	e8 8c fc fe ff       	call   c0007865 <malloc>
c0017bd9:	83 c4 10             	add    esp,0x10
c0017bdc:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0017be3:	83 ec 04             	sub    esp,0x4
c0017be6:	6a 00                	push   0x0
c0017be8:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0017bef:	50                   	push   eax
c0017bf0:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0017bf7:	e8 af be fe ff       	call   c0003aab <f_mount>
c0017bfc:	83 c4 10             	add    esp,0x10
c0017bff:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0017c06:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0017c0e:	74 1c                	je     c0017c2c <FAT::tryMount(LogicalDisk*, int)+0x120>
c0017c10:	83 ec 0c             	sub    esp,0xc
c0017c13:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0017c1a:	e8 66 fc fe ff       	call   c0007885 <rfree>
c0017c1f:	83 c4 10             	add    esp,0x10
c0017c22:	b0 00                	mov    al,0x0
c0017c24:	e9 f3 00 00 00       	jmp    c0017d1c <FAT::tryMount(LogicalDisk*, int)+0x210>
c0017c29:	8d 76 00             	lea    esi,[esi+0x0]
c0017c2c:	83 ec 04             	sub    esp,0x4
c0017c2f:	68 00 01 00 00       	push   0x100
c0017c34:	6a 00                	push   0x0
c0017c36:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0017c3d:	50                   	push   eax
c0017c3e:	e8 7d 88 fe ff       	call   c00004c0 <memset>
c0017c43:	83 c4 10             	add    esp,0x10
c0017c46:	83 ec 08             	sub    esp,0x8
c0017c49:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0017c50:	50                   	push   eax
c0017c51:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0017c58:	50                   	push   eax
c0017c59:	e8 52 8b fe ff       	call   c00007b0 <strcat>
c0017c5e:	83 c4 10             	add    esp,0x10
c0017c61:	83 ec 08             	sub    esp,0x8
c0017c64:	68 b6 0d 02 c0       	push   0xc0020db6
c0017c69:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0017c70:	50                   	push   eax
c0017c71:	e8 3a 8b fe ff       	call   c00007b0 <strcat>
c0017c76:	83 c4 10             	add    esp,0x10
c0017c79:	83 ec 04             	sub    esp,0x4
c0017c7c:	6a 01                	push   0x1
c0017c7e:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0017c85:	50                   	push   eax
c0017c86:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017c8a:	50                   	push   eax
c0017c8b:	e8 7d be fe ff       	call   c0003b0d <f_open>
c0017c90:	83 c4 10             	add    esp,0x10
c0017c93:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0017c9a:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0017ca1:	85 c0                	test   eax,eax
c0017ca3:	74 0b                	je     c0017cb0 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0017ca5:	78 31                	js     c0017cd8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0017ca7:	83 e8 04             	sub    eax,0x4
c0017caa:	83 f8 01             	cmp    eax,0x1
c0017cad:	77 29                	ja     c0017cd8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0017caf:	90                   	nop
c0017cb0:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0017cb8:	83 ec 0c             	sub    esp,0xc
c0017cbb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017cbf:	50                   	push   eax
c0017cc0:	e8 fb c5 fe ff       	call   c00042c0 <f_close>
c0017cc5:	83 c4 10             	add    esp,0x10
c0017cc8:	90                   	nop
c0017cc9:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0017cd1:	74 41                	je     c0017d14 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0017cd3:	eb 33                	jmp    c0017d08 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0017cd5:	8d 76 00             	lea    esi,[esi+0x0]
c0017cd8:	83 ec 0c             	sub    esp,0xc
c0017cdb:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0017ce2:	e8 9e fb fe ff       	call   c0007885 <rfree>
c0017ce7:	83 c4 10             	add    esp,0x10
c0017cea:	83 ec 04             	sub    esp,0x4
c0017ced:	6a 00                	push   0x0
c0017cef:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0017cf6:	50                   	push   eax
c0017cf7:	6a 00                	push   0x0
c0017cf9:	e8 ad bd fe ff       	call   c0003aab <f_mount>
c0017cfe:	83 c4 10             	add    esp,0x10
c0017d01:	b0 00                	mov    al,0x0
c0017d03:	eb 17                	jmp    c0017d1c <FAT::tryMount(LogicalDisk*, int)+0x210>
c0017d05:	8d 76 00             	lea    esi,[esi+0x0]
c0017d08:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017d0d:	40                   	inc    eax
c0017d0e:	a3 20 72 02 c0       	mov    ds:0xc0027220,eax
c0017d13:	90                   	nop
c0017d14:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0017d1b:	90                   	nop
c0017d1c:	81 c4 4c 03 00 00    	add    esp,0x34c
c0017d22:	c3                   	ret    
c0017d23:	90                   	nop

c0017d24 <FAT::allocateSwapfile(char const*, int)>:
c0017d24:	55                   	push   ebp
c0017d25:	57                   	push   edi
c0017d26:	56                   	push   esi
c0017d27:	53                   	push   ebx
c0017d28:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0017d2e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0017d39:	83 ec 0c             	sub    esp,0xc
c0017d3c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0017d43:	e8 1d fb fe ff       	call   c0007865 <malloc>
c0017d48:	83 c4 10             	add    esp,0x10
c0017d4b:	89 c7                	mov    edi,eax
c0017d4d:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0017d52:	83 ec 04             	sub    esp,0x4
c0017d55:	50                   	push   eax
c0017d56:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0017d5d:	57                   	push   edi
c0017d5e:	e8 19 2e ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c0017d63:	83 c4 10             	add    esp,0x10
c0017d66:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0017d6d:	83 ec 04             	sub    esp,0x4
c0017d70:	8d 44 24 13          	lea    eax,[esp+0x13]
c0017d74:	50                   	push   eax
c0017d75:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017d79:	50                   	push   eax
c0017d7a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017d81:	e8 62 31 ff ff       	call   c000aee8 <File::stat(unsigned long long*, bool*)>
c0017d86:	83 c4 10             	add    esp,0x10
c0017d89:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0017d90:	c1 e0 14             	shl    eax,0x14
c0017d93:	89 c7                	mov    edi,eax
c0017d95:	89 c5                	mov    ebp,eax
c0017d97:	c1 fd 1f             	sar    ebp,0x1f
c0017d9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d9e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017da2:	89 f9                	mov    ecx,edi
c0017da4:	31 c1                	xor    ecx,eax
c0017da6:	89 cb                	mov    ebx,ecx
c0017da8:	89 e9                	mov    ecx,ebp
c0017daa:	31 d1                	xor    ecx,edx
c0017dac:	89 ce                	mov    esi,ecx
c0017dae:	89 f0                	mov    eax,esi
c0017db0:	09 d8                	or     eax,ebx
c0017db2:	0f 84 9c 00 00 00    	je     c0017e54 <FAT::allocateSwapfile(char const*, int)+0x130>
c0017db8:	83 ec 0c             	sub    esp,0xc
c0017dbb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017dc2:	e8 ed 2f ff ff       	call   c000adb4 <File::unlink()>
c0017dc7:	83 c4 10             	add    esp,0x10
c0017dca:	83 ec 08             	sub    esp,0x8
c0017dcd:	6a 12                	push   0x12
c0017dcf:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017dd6:	e8 61 2e ff ff       	call   c000ac3c <File::open(FileOpenMode)>
c0017ddb:	83 c4 10             	add    esp,0x10
c0017dde:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0017de5:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0017deb:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0017df2:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0017df9:	c1 e0 14             	shl    eax,0x14
c0017dfc:	83 ec 04             	sub    esp,0x4
c0017dff:	6a 01                	push   0x1
c0017e01:	50                   	push   eax
c0017e02:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0017e09:	e8 17 d3 fe ff       	call   c0005125 <f_expand>
c0017e0e:	83 c4 10             	add    esp,0x10
c0017e11:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0017e18:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e1a:	83 c0 10             	add    eax,0x10
c0017e1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e1f:	83 ec 0c             	sub    esp,0xc
c0017e22:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017e26:	52                   	push   edx
c0017e27:	8d 54 24 30          	lea    edx,[esp+0x30]
c0017e2b:	52                   	push   edx
c0017e2c:	6a 00                	push   0x0
c0017e2e:	68 00 04 00 00       	push   0x400
c0017e33:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0017e3a:	ff d0                	call   eax
c0017e3c:	83 c4 20             	add    esp,0x20
c0017e3f:	83 ec 0c             	sub    esp,0xc
c0017e42:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017e49:	e8 4c 2e ff ff       	call   c000ac9a <File::close()>
c0017e4e:	83 c4 10             	add    esp,0x10
c0017e51:	8d 76 00             	lea    esi,[esi+0x0]
c0017e54:	83 ec 08             	sub    esp,0x8
c0017e57:	6a 01                	push   0x1
c0017e59:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017e60:	e8 d7 2d ff ff       	call   c000ac3c <File::open(FileOpenMode)>
c0017e65:	83 c4 10             	add    esp,0x10
c0017e68:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0017e6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e71:	83 c0 0c             	add    eax,0xc
c0017e74:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e76:	83 ec 0c             	sub    esp,0xc
c0017e79:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017e7d:	52                   	push   edx
c0017e7e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0017e82:	52                   	push   edx
c0017e83:	6a 00                	push   0x0
c0017e85:	6a 04                	push   0x4
c0017e87:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0017e8e:	ff d0                	call   eax
c0017e90:	83 c4 20             	add    esp,0x20
c0017e93:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0017e9a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0017ea0:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0017ea7:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0017eae:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017eb1:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0017eb8:	83 ec 0c             	sub    esp,0xc
c0017ebb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017ec2:	e8 d3 2d ff ff       	call   c000ac9a <File::close()>
c0017ec7:	83 c4 10             	add    esp,0x10
c0017eca:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0017ed1:	ba 00 00 00 00       	mov    edx,0x0
c0017ed6:	81 c4 3c 04 00 00    	add    esp,0x43c
c0017edc:	5b                   	pop    ebx
c0017edd:	5e                   	pop    esi
c0017ede:	5f                   	pop    edi
c0017edf:	5d                   	pop    ebp
c0017ee0:	c3                   	ret    
c0017ee1:	90                   	nop
c0017ee2:	66 90                	xchg   ax,ax

c0017ee4 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0017ee4:	57                   	push   edi
c0017ee5:	56                   	push   esi
c0017ee6:	53                   	push   ebx
c0017ee7:	81 ec 50 02 00 00    	sub    esp,0x250
c0017eed:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0017ef5:	74 0d                	je     c0017f04 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0017ef7:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0017eff:	75 0f                	jne    c0017f10 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0017f01:	8d 76 00             	lea    esi,[esi+0x0]
c0017f04:	b8 04 00 00 00       	mov    eax,0x4
c0017f09:	e9 36 01 00 00       	jmp    c0018044 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0017f0e:	66 90                	xchg   ax,ax
c0017f10:	83 ec 08             	sub    esp,0x8
c0017f13:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0017f1a:	50                   	push   eax
c0017f1b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0017f22:	e8 5c c6 fe ff       	call   c0004583 <f_readdir>
c0017f27:	83 c4 10             	add    esp,0x10
c0017f2a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0017f31:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0017f38:	83 ec 0c             	sub    esp,0xc
c0017f3b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0017f42:	83 c0 16             	add    eax,0x16
c0017f45:	50                   	push   eax
c0017f46:	e8 e5 85 fe ff       	call   c0000530 <strlen>
c0017f4b:	83 c4 10             	add    esp,0x10
c0017f4e:	ba 00 00 00 00       	mov    edx,0x0
c0017f53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017f57:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0017f5b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0017f62:	25 ff 00 00 00       	and    eax,0xff
c0017f67:	83 e0 10             	and    eax,0x10
c0017f6a:	74 08                	je     c0017f74 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0017f6c:	b8 02 00 00 00       	mov    eax,0x2
c0017f71:	eb 09                	jmp    c0017f7c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0017f73:	90                   	nop
c0017f74:	b8 01 00 00 00       	mov    eax,0x1
c0017f79:	8d 76 00             	lea    esi,[esi+0x0]
c0017f7c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017f80:	83 ec 08             	sub    esp,0x8
c0017f83:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0017f8a:	83 c0 16             	add    eax,0x16
c0017f8d:	50                   	push   eax
c0017f8e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017f92:	83 c0 10             	add    eax,0x10
c0017f95:	50                   	push   eax
c0017f96:	e8 55 86 fe ff       	call   c00005f0 <strcpy>
c0017f9b:	83 c4 10             	add    esp,0x10
c0017f9e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0017fa5:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0017fac:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017fb0:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0017fb7:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0017fbe:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0017fc5:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0017fcc:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0017fd3:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0017fda:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0017fe1:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0017fe8:	89 c6                	mov    esi,eax
c0017fea:	89 d7                	mov    edi,edx
c0017fec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017fee:	89 c8                	mov    eax,ecx
c0017ff0:	89 fa                	mov    edx,edi
c0017ff2:	89 f3                	mov    ebx,esi
c0017ff4:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0017ffb:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0018002:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0018009:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0018010:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0018016:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001801d:	84 c0                	test   al,al
c001801f:	75 07                	jne    c0018028 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0018021:	b8 07 00 00 00       	mov    eax,0x7
c0018026:	eb 1c                	jmp    c0018044 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0018028:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001802f:	85 c0                	test   eax,eax
c0018031:	75 09                	jne    c001803c <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0018033:	b8 00 00 00 00       	mov    eax,0x0
c0018038:	eb 0a                	jmp    c0018044 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001803a:	66 90                	xchg   ax,ax
c001803c:	b8 01 00 00 00       	mov    eax,0x1
c0018041:	8d 76 00             	lea    esi,[esi+0x0]
c0018044:	81 c4 50 02 00 00    	add    esp,0x250
c001804a:	5b                   	pop    ebx
c001804b:	5e                   	pop    esi
c001804c:	5f                   	pop    edi
c001804d:	c3                   	ret    
c001804e:	66 90                	xchg   ax,ax

c0018050 <FAT::read(void*, unsigned long, void*, int*)>:
c0018050:	83 ec 1c             	sub    esp,0x1c
c0018053:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018058:	74 0a                	je     c0018064 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001805a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001805f:	75 0b                	jne    c001806c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0018061:	8d 76 00             	lea    esi,[esi+0x0]
c0018064:	b8 04 00 00 00       	mov    eax,0x4
c0018069:	eb 41                	jmp    c00180ac <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001806b:	90                   	nop
c001806c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018070:	50                   	push   eax
c0018071:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018075:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018079:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001807d:	e8 56 bd fe ff       	call   c0003dd8 <f_read>
c0018082:	83 c4 10             	add    esp,0x10
c0018085:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018089:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001808d:	89 c2                	mov    edx,eax
c001808f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018093:	89 10                	mov    DWORD PTR [eax],edx
c0018095:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018099:	85 c0                	test   eax,eax
c001809b:	75 07                	jne    c00180a4 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001809d:	b8 00 00 00 00       	mov    eax,0x0
c00180a2:	eb 08                	jmp    c00180ac <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00180a4:	b8 01 00 00 00       	mov    eax,0x1
c00180a9:	8d 76 00             	lea    esi,[esi+0x0]
c00180ac:	83 c4 1c             	add    esp,0x1c
c00180af:	c3                   	ret    

c00180b0 <FAT::write(void*, unsigned long, void*, int*)>:
c00180b0:	83 ec 1c             	sub    esp,0x1c
c00180b3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00180b8:	74 0a                	je     c00180c4 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00180ba:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00180bf:	75 0b                	jne    c00180cc <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00180c1:	8d 76 00             	lea    esi,[esi+0x0]
c00180c4:	b8 04 00 00 00       	mov    eax,0x4
c00180c9:	eb 41                	jmp    c001810c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00180cb:	90                   	nop
c00180cc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00180d0:	50                   	push   eax
c00180d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00180d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00180d9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00180dd:	e8 f5 be fe ff       	call   c0003fd7 <f_write>
c00180e2:	83 c4 10             	add    esp,0x10
c00180e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00180e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00180ed:	89 c2                	mov    edx,eax
c00180ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180f3:	89 10                	mov    DWORD PTR [eax],edx
c00180f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180f9:	85 c0                	test   eax,eax
c00180fb:	75 07                	jne    c0018104 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00180fd:	b8 00 00 00 00       	mov    eax,0x0
c0018102:	eb 08                	jmp    c001810c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0018104:	b8 01 00 00 00       	mov    eax,0x1
c0018109:	8d 76 00             	lea    esi,[esi+0x0]
c001810c:	83 c4 1c             	add    esp,0x1c
c001810f:	c3                   	ret    

c0018110 <FAT::close(void*)>:
c0018110:	83 ec 1c             	sub    esp,0x1c
c0018113:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018118:	75 0a                	jne    c0018124 <FAT::close(void*)+0x14>
c001811a:	b8 04 00 00 00       	mov    eax,0x4
c001811f:	eb 3f                	jmp    c0018160 <FAT::close(void*)+0x50>
c0018121:	8d 76 00             	lea    esi,[esi+0x0]
c0018124:	83 ec 0c             	sub    esp,0xc
c0018127:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001812b:	e8 90 c1 fe ff       	call   c00042c0 <f_close>
c0018130:	83 c4 10             	add    esp,0x10
c0018133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018137:	83 ec 0c             	sub    esp,0xc
c001813a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001813e:	e8 32 f7 fe ff       	call   c0007875 <free>
c0018143:	83 c4 10             	add    esp,0x10
c0018146:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001814a:	85 c0                	test   eax,eax
c001814c:	75 0a                	jne    c0018158 <FAT::close(void*)+0x48>
c001814e:	b8 00 00 00 00       	mov    eax,0x0
c0018153:	eb 0b                	jmp    c0018160 <FAT::close(void*)+0x50>
c0018155:	8d 76 00             	lea    esi,[esi+0x0]
c0018158:	b8 01 00 00 00       	mov    eax,0x1
c001815d:	8d 76 00             	lea    esi,[esi+0x0]
c0018160:	83 c4 1c             	add    esp,0x1c
c0018163:	c3                   	ret    

c0018164 <FAT::closeDir(void*)>:
c0018164:	83 ec 1c             	sub    esp,0x1c
c0018167:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001816c:	75 0a                	jne    c0018178 <FAT::closeDir(void*)+0x14>
c001816e:	b8 04 00 00 00       	mov    eax,0x4
c0018173:	eb 3f                	jmp    c00181b4 <FAT::closeDir(void*)+0x50>
c0018175:	8d 76 00             	lea    esi,[esi+0x0]
c0018178:	83 ec 0c             	sub    esp,0xc
c001817b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001817f:	e8 dd c3 fe ff       	call   c0004561 <f_closedir>
c0018184:	83 c4 10             	add    esp,0x10
c0018187:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001818b:	83 ec 0c             	sub    esp,0xc
c001818e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018192:	e8 de f6 fe ff       	call   c0007875 <free>
c0018197:	83 c4 10             	add    esp,0x10
c001819a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001819e:	85 c0                	test   eax,eax
c00181a0:	75 0a                	jne    c00181ac <FAT::closeDir(void*)+0x48>
c00181a2:	b8 00 00 00 00       	mov    eax,0x0
c00181a7:	eb 0b                	jmp    c00181b4 <FAT::closeDir(void*)+0x50>
c00181a9:	8d 76 00             	lea    esi,[esi+0x0]
c00181ac:	b8 01 00 00 00       	mov    eax,0x1
c00181b1:	8d 76 00             	lea    esi,[esi+0x0]
c00181b4:	83 c4 1c             	add    esp,0x1c
c00181b7:	c3                   	ret    

c00181b8 <FAT::seek(void*, unsigned long long)>:
c00181b8:	83 ec 2c             	sub    esp,0x2c
c00181bb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00181bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00181c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00181c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00181cb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00181d0:	75 0a                	jne    c00181dc <FAT::seek(void*, unsigned long long)+0x24>
c00181d2:	b8 04 00 00 00       	mov    eax,0x4
c00181d7:	eb 33                	jmp    c001820c <FAT::seek(void*, unsigned long long)+0x54>
c00181d9:	8d 76 00             	lea    esi,[esi+0x0]
c00181dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00181e0:	83 ec 08             	sub    esp,0x8
c00181e3:	50                   	push   eax
c00181e4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00181e8:	e8 02 c1 fe ff       	call   c00042ef <f_lseek>
c00181ed:	83 c4 10             	add    esp,0x10
c00181f0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00181f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00181f8:	85 c0                	test   eax,eax
c00181fa:	75 08                	jne    c0018204 <FAT::seek(void*, unsigned long long)+0x4c>
c00181fc:	b8 00 00 00 00       	mov    eax,0x0
c0018201:	eb 09                	jmp    c001820c <FAT::seek(void*, unsigned long long)+0x54>
c0018203:	90                   	nop
c0018204:	b8 01 00 00 00       	mov    eax,0x1
c0018209:	8d 76 00             	lea    esi,[esi+0x0]
c001820c:	83 c4 2c             	add    esp,0x2c
c001820f:	c3                   	ret    

c0018210 <fatWrapperReadDisk>:
c0018210:	53                   	push   ebx
c0018211:	83 ec 18             	sub    esp,0x18
c0018214:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018218:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001821c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018220:	25 ff 00 00 00       	and    eax,0xff
c0018225:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c001822c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018230:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018234:	ba 00 00 00 00       	mov    edx,0x0
c0018239:	83 ec 0c             	sub    esp,0xc
c001823c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018240:	53                   	push   ebx
c0018241:	52                   	push   edx
c0018242:	50                   	push   eax
c0018243:	51                   	push   ecx
c0018244:	e8 0d 4b ff ff       	call   c000cd56 <LogicalDisk::read(unsigned long long, int, void*)>
c0018249:	83 c4 20             	add    esp,0x20
c001824c:	83 c4 18             	add    esp,0x18
c001824f:	5b                   	pop    ebx
c0018250:	c3                   	ret    
c0018251:	8d 76 00             	lea    esi,[esi+0x0]

c0018254 <fatWrapperWriteDisk>:
c0018254:	53                   	push   ebx
c0018255:	83 ec 18             	sub    esp,0x18
c0018258:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001825c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018260:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018264:	25 ff 00 00 00       	and    eax,0xff
c0018269:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c0018270:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018274:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018278:	ba 00 00 00 00       	mov    edx,0x0
c001827d:	83 ec 0c             	sub    esp,0xc
c0018280:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018284:	53                   	push   ebx
c0018285:	52                   	push   edx
c0018286:	50                   	push   eax
c0018287:	51                   	push   ecx
c0018288:	e8 35 4b ff ff       	call   c000cdc2 <LogicalDisk::write(unsigned long long, int, void*)>
c001828d:	83 c4 20             	add    esp,0x20
c0018290:	83 c4 18             	add    esp,0x18
c0018293:	5b                   	pop    ebx
c0018294:	c3                   	ret    
c0018295:	8d 76 00             	lea    esi,[esi+0x0]

c0018298 <fatWrapperIoctl>:
c0018298:	53                   	push   ebx
c0018299:	83 ec 28             	sub    esp,0x28
c001829c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00182a0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182a4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00182a8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00182ac:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00182b1:	75 35                	jne    c00182e8 <fatWrapperIoctl+0x50>
c00182b3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00182b7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00182bb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00182bf:	25 ff 00 00 00       	and    eax,0xff
c00182c4:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c00182cb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00182d1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00182d7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00182db:	66 89 02             	mov    WORD PTR [edx],ax
c00182de:	b8 00 00 00 00       	mov    eax,0x0
c00182e3:	e9 c4 00 00 00       	jmp    c00183ac <fatWrapperIoctl+0x114>
c00182e8:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00182ed:	75 75                	jne    c0018364 <fatWrapperIoctl+0xcc>
c00182ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00182f3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00182f7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00182fb:	25 ff 00 00 00       	and    eax,0xff
c0018300:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c0018307:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001830d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0018313:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0018319:	89 c8                	mov    eax,ecx
c001831b:	89 da                	mov    edx,ebx
c001831d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0018321:	c1 e0 0a             	shl    eax,0xa
c0018324:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018328:	81 e1 ff 00 00 00    	and    ecx,0xff
c001832e:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c0018335:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001833b:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0018341:	89 cb                	mov    ebx,ecx
c0018343:	c1 fb 1f             	sar    ebx,0x1f
c0018346:	53                   	push   ebx
c0018347:	51                   	push   ecx
c0018348:	52                   	push   edx
c0018349:	50                   	push   eax
c001834a:	e8 11 5a 00 00       	call   c001dd60 <__udivdi3>
c001834f:	83 c4 10             	add    esp,0x10
c0018352:	89 c2                	mov    edx,eax
c0018354:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018358:	89 10                	mov    DWORD PTR [eax],edx
c001835a:	b8 00 00 00 00       	mov    eax,0x0
c001835f:	eb 4b                	jmp    c00183ac <fatWrapperIoctl+0x114>
c0018361:	8d 76 00             	lea    esi,[esi+0x0]
c0018364:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0018369:	75 09                	jne    c0018374 <fatWrapperIoctl+0xdc>
c001836b:	b8 00 00 00 00       	mov    eax,0x0
c0018370:	eb 3a                	jmp    c00183ac <fatWrapperIoctl+0x114>
c0018372:	66 90                	xchg   ax,ax
c0018374:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0018379:	75 19                	jne    c0018394 <fatWrapperIoctl+0xfc>
c001837b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001837f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018383:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018387:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001838d:	b8 00 00 00 00       	mov    eax,0x0
c0018392:	eb 18                	jmp    c00183ac <fatWrapperIoctl+0x114>
c0018394:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0018399:	75 09                	jne    c00183a4 <fatWrapperIoctl+0x10c>
c001839b:	b8 00 00 00 00       	mov    eax,0x0
c00183a0:	eb 0a                	jmp    c00183ac <fatWrapperIoctl+0x114>
c00183a2:	66 90                	xchg   ax,ax
c00183a4:	b8 04 00 00 00       	mov    eax,0x4
c00183a9:	8d 76 00             	lea    esi,[esi+0x0]
c00183ac:	83 c4 28             	add    esp,0x28
c00183af:	5b                   	pop    ebx
c00183b0:	c3                   	ret    
c00183b1:	90                   	nop
c00183b2:	66 90                	xchg   ax,ax

c00183b4 <FAT::FAT()>:
c00183b4:	83 ec 1c             	sub    esp,0x1c
c00183b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183bb:	83 ec 0c             	sub    esp,0xc
c00183be:	50                   	push   eax
c00183bf:	e8 64 25 ff ff       	call   c000a928 <Filesystem::Filesystem()>
c00183c4:	83 c4 10             	add    esp,0x10
c00183c7:	ba cc 0d 02 c0       	mov    edx,0xc0020dcc
c00183cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183d0:	89 10                	mov    DWORD PTR [eax],edx
c00183d2:	c7 05 20 72 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027220,0x0
c00183dc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00183e4:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00183e9:	7f 15                	jg     c0018400 <FAT::FAT()+0x4c>
c00183eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00183ef:	c7 04 85 40 72 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd8dc0],0xffffffff
c00183fa:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00183fe:	eb e4                	jmp    c00183e4 <FAT::FAT()+0x30>
c0018400:	90                   	nop
c0018401:	83 c4 1c             	add    esp,0x1c
c0018404:	c3                   	ret    
c0018405:	90                   	nop
c0018406:	66 90                	xchg   ax,ax

c0018408 <FAT::fixFilepath(char*)>:
c0018408:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001840c:	8a 00                	mov    al,BYTE PTR [eax]
c001840e:	3c 40                	cmp    al,0x40
c0018410:	7e 2e                	jle    c0018440 <FAT::fixFilepath(char*)+0x38>
c0018412:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018416:	8a 00                	mov    al,BYTE PTR [eax]
c0018418:	83 e8 41             	sub    eax,0x41
c001841b:	88 c2                	mov    dl,al
c001841d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018421:	88 10                	mov    BYTE PTR [eax],dl
c0018423:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018427:	8a 00                	mov    al,BYTE PTR [eax]
c0018429:	0f be c0             	movsx  eax,al
c001842c:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0018433:	83 c0 30             	add    eax,0x30
c0018436:	88 c2                	mov    dl,al
c0018438:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001843c:	88 10                	mov    BYTE PTR [eax],dl
c001843e:	66 90                	xchg   ax,ax
c0018440:	90                   	nop
c0018441:	c3                   	ret    
c0018442:	66 90                	xchg   ax,ax

c0018444 <FAT::open(char const*, void**, FileOpenMode)>:
c0018444:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001844a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018452:	74 0c                	je     c0018460 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0018454:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001845c:	75 0e                	jne    c001846c <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001845e:	66 90                	xchg   ax,ax
c0018460:	b8 04 00 00 00       	mov    eax,0x4
c0018465:	e9 0a 01 00 00       	jmp    c0018574 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c001846a:	66 90                	xchg   ax,ax
c001846c:	83 ec 08             	sub    esp,0x8
c001846f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018476:	8d 44 24 14          	lea    eax,[esp+0x14]
c001847a:	50                   	push   eax
c001847b:	e8 70 81 fe ff       	call   c00005f0 <strcpy>
c0018480:	83 c4 10             	add    esp,0x10
c0018483:	83 ec 08             	sub    esp,0x8
c0018486:	8d 44 24 10          	lea    eax,[esp+0x10]
c001848a:	50                   	push   eax
c001848b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018492:	e8 71 ff ff ff       	call   c0018408 <FAT::fixFilepath(char*)>
c0018497:	83 c4 10             	add    esp,0x10
c001849a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00184a2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00184a9:	83 e0 01             	and    eax,0x1
c00184ac:	74 0a                	je     c00184b8 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c00184ae:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00184b6:	66 90                	xchg   ax,ax
c00184b8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00184bf:	83 e0 04             	and    eax,0x4
c00184c2:	74 10                	je     c00184d4 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c00184c4:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00184cc:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00184d4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00184db:	83 e0 02             	and    eax,0x2
c00184de:	74 08                	je     c00184e8 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c00184e0:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00184e8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00184ef:	83 e0 08             	and    eax,0x8
c00184f2:	74 08                	je     c00184fc <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c00184f4:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00184fc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018503:	83 e0 10             	and    eax,0x10
c0018506:	74 08                	je     c0018510 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0018508:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0018510:	83 ec 0c             	sub    esp,0xc
c0018513:	68 28 02 00 00       	push   0x228
c0018518:	e8 48 f3 fe ff       	call   c0007865 <malloc>
c001851d:	83 c4 10             	add    esp,0x10
c0018520:	89 c2                	mov    edx,eax
c0018522:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018529:	89 10                	mov    DWORD PTR [eax],edx
c001852b:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018532:	31 d2                	xor    edx,edx
c0018534:	88 c2                	mov    dl,al
c0018536:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001853d:	8b 00                	mov    eax,DWORD PTR [eax]
c001853f:	83 ec 04             	sub    esp,0x4
c0018542:	52                   	push   edx
c0018543:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018547:	52                   	push   edx
c0018548:	50                   	push   eax
c0018549:	e8 bf b5 fe ff       	call   c0003b0d <f_open>
c001854e:	83 c4 10             	add    esp,0x10
c0018551:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0018558:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0018560:	74 0a                	je     c001856c <FAT::open(char const*, void**, FileOpenMode)+0x128>
c0018562:	b8 01 00 00 00       	mov    eax,0x1
c0018567:	eb 0b                	jmp    c0018574 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0018569:	8d 76 00             	lea    esi,[esi+0x0]
c001856c:	b8 00 00 00 00       	mov    eax,0x0
c0018571:	8d 76 00             	lea    esi,[esi+0x0]
c0018574:	81 c4 1c 01 00 00    	add    esp,0x11c
c001857a:	c3                   	ret    
c001857b:	90                   	nop

c001857c <FAT::openDir(char const*, void**)>:
c001857c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018582:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001858a:	74 0c                	je     c0018598 <FAT::openDir(char const*, void**)+0x1c>
c001858c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018594:	75 0e                	jne    c00185a4 <FAT::openDir(char const*, void**)+0x28>
c0018596:	66 90                	xchg   ax,ax
c0018598:	b8 04 00 00 00       	mov    eax,0x4
c001859d:	e9 82 00 00 00       	jmp    c0018624 <FAT::openDir(char const*, void**)+0xa8>
c00185a2:	66 90                	xchg   ax,ax
c00185a4:	83 ec 08             	sub    esp,0x8
c00185a7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00185ae:	8d 44 24 18          	lea    eax,[esp+0x18]
c00185b2:	50                   	push   eax
c00185b3:	e8 38 80 fe ff       	call   c00005f0 <strcpy>
c00185b8:	83 c4 10             	add    esp,0x10
c00185bb:	83 ec 08             	sub    esp,0x8
c00185be:	8d 44 24 14          	lea    eax,[esp+0x14]
c00185c2:	50                   	push   eax
c00185c3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00185ca:	e8 39 fe ff ff       	call   c0018408 <FAT::fixFilepath(char*)>
c00185cf:	83 c4 10             	add    esp,0x10
c00185d2:	83 ec 0c             	sub    esp,0xc
c00185d5:	6a 30                	push   0x30
c00185d7:	e8 89 f2 fe ff       	call   c0007865 <malloc>
c00185dc:	83 c4 10             	add    esp,0x10
c00185df:	89 c2                	mov    edx,eax
c00185e1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00185e8:	89 10                	mov    DWORD PTR [eax],edx
c00185ea:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00185f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00185f3:	83 ec 08             	sub    esp,0x8
c00185f6:	8d 54 24 14          	lea    edx,[esp+0x14]
c00185fa:	52                   	push   edx
c00185fb:	50                   	push   eax
c00185fc:	e8 95 be fe ff       	call   c0004496 <f_opendir>
c0018601:	83 c4 10             	add    esp,0x10
c0018604:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001860b:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0018613:	74 07                	je     c001861c <FAT::openDir(char const*, void**)+0xa0>
c0018615:	b8 01 00 00 00       	mov    eax,0x1
c001861a:	eb 08                	jmp    c0018624 <FAT::openDir(char const*, void**)+0xa8>
c001861c:	b8 00 00 00 00       	mov    eax,0x0
c0018621:	8d 76 00             	lea    esi,[esi+0x0]
c0018624:	81 c4 1c 01 00 00    	add    esp,0x11c
c001862a:	c3                   	ret    
c001862b:	90                   	nop

c001862c <FAT::stat(char const*, unsigned long long*, bool*)>:
c001862c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0018632:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001863a:	75 0c                	jne    c0018648 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001863c:	b8 04 00 00 00       	mov    eax,0x4
c0018641:	e9 d6 00 00 00       	jmp    c001871c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018646:	66 90                	xchg   ax,ax
c0018648:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0018650:	75 0a                	jne    c001865c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0018652:	b8 04 00 00 00       	mov    eax,0x4
c0018657:	e9 c0 00 00 00       	jmp    c001871c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001865c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0018664:	75 0a                	jne    c0018670 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0018666:	b8 04 00 00 00       	mov    eax,0x4
c001866b:	e9 ac 00 00 00       	jmp    c001871c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018670:	83 ec 08             	sub    esp,0x8
c0018673:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001867a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018681:	50                   	push   eax
c0018682:	e8 69 7f fe ff       	call   c00005f0 <strcpy>
c0018687:	83 c4 10             	add    esp,0x10
c001868a:	83 ec 08             	sub    esp,0x8
c001868d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0018694:	50                   	push   eax
c0018695:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001869c:	e8 67 fd ff ff       	call   c0018408 <FAT::fixFilepath(char*)>
c00186a1:	83 c4 10             	add    esp,0x10
c00186a4:	83 ec 08             	sub    esp,0x8
c00186a7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186ab:	50                   	push   eax
c00186ac:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00186b3:	50                   	push   eax
c00186b4:	e8 5c bf fe ff       	call   c0004615 <f_stat>
c00186b9:	83 c4 10             	add    esp,0x10
c00186bc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00186c3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00186ca:	85 c0                	test   eax,eax
c00186cc:	74 0a                	je     c00186d8 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c00186ce:	83 f8 04             	cmp    eax,0x4
c00186d1:	74 39                	je     c001870c <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c00186d3:	eb 3f                	jmp    c0018714 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c00186d5:	8d 76 00             	lea    esi,[esi+0x0]
c00186d8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00186dc:	25 ff 00 00 00       	and    eax,0xff
c00186e1:	83 e0 10             	and    eax,0x10
c00186e4:	0f 95 c2             	setne  dl
c00186e7:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00186ee:	88 10                	mov    BYTE PTR [eax],dl
c00186f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00186f4:	ba 00 00 00 00       	mov    edx,0x0
c00186f9:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0018700:	89 01                	mov    DWORD PTR [ecx],eax
c0018702:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018705:	b8 00 00 00 00       	mov    eax,0x0
c001870a:	eb 10                	jmp    c001871c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001870c:	b8 02 00 00 00       	mov    eax,0x2
c0018711:	eb 09                	jmp    c001871c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018713:	90                   	nop
c0018714:	b8 01 00 00 00       	mov    eax,0x1
c0018719:	8d 76 00             	lea    esi,[esi+0x0]
c001871c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0018722:	c3                   	ret    
c0018723:	90                   	nop

c0018724 <FAT::unlink(char const*)>:
c0018724:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001872a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018732:	75 08                	jne    c001873c <FAT::unlink(char const*)+0x18>
c0018734:	b8 04 00 00 00       	mov    eax,0x4
c0018739:	eb 61                	jmp    c001879c <FAT::unlink(char const*)+0x78>
c001873b:	90                   	nop
c001873c:	83 ec 08             	sub    esp,0x8
c001873f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018746:	8d 44 24 18          	lea    eax,[esp+0x18]
c001874a:	50                   	push   eax
c001874b:	e8 a0 7e fe ff       	call   c00005f0 <strcpy>
c0018750:	83 c4 10             	add    esp,0x10
c0018753:	83 ec 08             	sub    esp,0x8
c0018756:	8d 44 24 14          	lea    eax,[esp+0x14]
c001875a:	50                   	push   eax
c001875b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018762:	e8 a1 fc ff ff       	call   c0018408 <FAT::fixFilepath(char*)>
c0018767:	83 c4 10             	add    esp,0x10
c001876a:	83 ec 0c             	sub    esp,0xc
c001876d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018771:	50                   	push   eax
c0018772:	e8 03 c1 fe ff       	call   c000487a <f_unlink>
c0018777:	83 c4 10             	add    esp,0x10
c001877a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018781:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0018788:	85 c0                	test   eax,eax
c001878a:	75 08                	jne    c0018794 <FAT::unlink(char const*)+0x70>
c001878c:	b8 00 00 00 00       	mov    eax,0x0
c0018791:	eb 09                	jmp    c001879c <FAT::unlink(char const*)+0x78>
c0018793:	90                   	nop
c0018794:	b8 01 00 00 00       	mov    eax,0x1
c0018799:	8d 76 00             	lea    esi,[esi+0x0]
c001879c:	81 c4 1c 01 00 00    	add    esp,0x11c
c00187a2:	c3                   	ret    
c00187a3:	90                   	nop

c00187a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00187a4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00187aa:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00187b1:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00187b8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00187bc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00187c0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00187c8:	75 0a                	jne    c00187d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00187ca:	b8 04 00 00 00       	mov    eax,0x4
c00187cf:	e9 54 01 00 00       	jmp    c0018928 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00187d4:	83 ec 08             	sub    esp,0x8
c00187d7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00187de:	8d 44 24 24          	lea    eax,[esp+0x24]
c00187e2:	50                   	push   eax
c00187e3:	e8 08 7e fe ff       	call   c00005f0 <strcpy>
c00187e8:	83 c4 10             	add    esp,0x10
c00187eb:	83 ec 08             	sub    esp,0x8
c00187ee:	8d 44 24 20          	lea    eax,[esp+0x20]
c00187f2:	50                   	push   eax
c00187f3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00187fa:	e8 09 fc ff ff       	call   c0018408 <FAT::fixFilepath(char*)>
c00187ff:	83 c4 10             	add    esp,0x10
c0018802:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001880a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0018812:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018816:	25 ff 00 00 00       	and    eax,0xff
c001881b:	83 e0 01             	and    eax,0x1
c001881e:	74 08                	je     c0018828 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c0018820:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0018828:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001882c:	25 ff 00 00 00       	and    eax,0xff
c0018831:	83 e0 02             	and    eax,0x2
c0018834:	74 0a                	je     c0018840 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c0018836:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001883e:	66 90                	xchg   ax,ax
c0018840:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018844:	25 ff 00 00 00       	and    eax,0xff
c0018849:	83 e0 04             	and    eax,0x4
c001884c:	74 0a                	je     c0018858 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c001884e:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0018856:	66 90                	xchg   ax,ax
c0018858:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001885c:	25 ff 00 00 00       	and    eax,0xff
c0018861:	83 e0 08             	and    eax,0x8
c0018864:	74 0a                	je     c0018870 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c0018866:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001886e:	66 90                	xchg   ax,ax
c0018870:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018874:	25 ff 00 00 00       	and    eax,0xff
c0018879:	83 e0 01             	and    eax,0x1
c001887c:	74 0a                	je     c0018888 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001887e:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0018886:	66 90                	xchg   ax,ax
c0018888:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001888c:	25 ff 00 00 00       	and    eax,0xff
c0018891:	83 e0 02             	and    eax,0x2
c0018894:	74 0a                	je     c00188a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0018896:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001889e:	66 90                	xchg   ax,ax
c00188a0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00188a4:	25 ff 00 00 00       	and    eax,0xff
c00188a9:	83 e0 04             	and    eax,0x4
c00188ac:	74 0a                	je     c00188b8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c00188ae:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00188b6:	66 90                	xchg   ax,ax
c00188b8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00188bc:	25 ff 00 00 00       	and    eax,0xff
c00188c1:	83 e0 08             	and    eax,0x8
c00188c4:	74 0a                	je     c00188d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c00188c6:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00188ce:	66 90                	xchg   ax,ax
c00188d0:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00188d7:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00188de:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00188e5:	31 d2                	xor    edx,edx
c00188e7:	88 c2                	mov    dl,al
c00188e9:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00188f0:	25 ff 00 00 00       	and    eax,0xff
c00188f5:	83 ec 04             	sub    esp,0x4
c00188f8:	52                   	push   edx
c00188f9:	50                   	push   eax
c00188fa:	8d 44 24 24          	lea    eax,[esp+0x24]
c00188fe:	50                   	push   eax
c00188ff:	e8 e9 c3 fe ff       	call   c0004ced <f_chmod>
c0018904:	83 c4 10             	add    esp,0x10
c0018907:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001890e:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0018915:	85 c0                	test   eax,eax
c0018917:	75 07                	jne    c0018920 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c0018919:	b8 00 00 00 00       	mov    eax,0x0
c001891e:	eb 08                	jmp    c0018928 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0018920:	b8 01 00 00 00       	mov    eax,0x1
c0018925:	8d 76 00             	lea    esi,[esi+0x0]
c0018928:	81 c4 2c 01 00 00    	add    esp,0x12c
c001892e:	c3                   	ret    
c001892f:	90                   	nop

c0018930 <FAT::rename(char const*, char const*)>:
c0018930:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0018936:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001893e:	74 0c                	je     c001894c <FAT::rename(char const*, char const*)+0x1c>
c0018940:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0018948:	75 0e                	jne    c0018958 <FAT::rename(char const*, char const*)+0x28>
c001894a:	66 90                	xchg   ax,ax
c001894c:	b8 04 00 00 00       	mov    eax,0x4
c0018951:	e9 9e 00 00 00       	jmp    c00189f4 <FAT::rename(char const*, char const*)+0xc4>
c0018956:	66 90                	xchg   ax,ax
c0018958:	83 ec 08             	sub    esp,0x8
c001895b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0018962:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0018969:	50                   	push   eax
c001896a:	e8 81 7c fe ff       	call   c00005f0 <strcpy>
c001896f:	83 c4 10             	add    esp,0x10
c0018972:	83 ec 08             	sub    esp,0x8
c0018975:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001897c:	50                   	push   eax
c001897d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0018984:	e8 7f fa ff ff       	call   c0018408 <FAT::fixFilepath(char*)>
c0018989:	83 c4 10             	add    esp,0x10
c001898c:	83 ec 08             	sub    esp,0x8
c001898f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0018996:	8d 44 24 18          	lea    eax,[esp+0x18]
c001899a:	50                   	push   eax
c001899b:	e8 50 7c fe ff       	call   c00005f0 <strcpy>
c00189a0:	83 c4 10             	add    esp,0x10
c00189a3:	83 ec 08             	sub    esp,0x8
c00189a6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00189aa:	50                   	push   eax
c00189ab:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00189b2:	e8 51 fa ff ff       	call   c0018408 <FAT::fixFilepath(char*)>
c00189b7:	83 c4 10             	add    esp,0x10
c00189ba:	83 ec 08             	sub    esp,0x8
c00189bd:	8d 44 24 14          	lea    eax,[esp+0x14]
c00189c1:	50                   	push   eax
c00189c2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00189c9:	50                   	push   eax
c00189ca:	e8 68 c1 fe ff       	call   c0004b37 <f_rename>
c00189cf:	83 c4 10             	add    esp,0x10
c00189d2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00189d9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00189e0:	85 c0                	test   eax,eax
c00189e2:	75 08                	jne    c00189ec <FAT::rename(char const*, char const*)+0xbc>
c00189e4:	b8 00 00 00 00       	mov    eax,0x0
c00189e9:	eb 09                	jmp    c00189f4 <FAT::rename(char const*, char const*)+0xc4>
c00189eb:	90                   	nop
c00189ec:	b8 01 00 00 00       	mov    eax,0x1
c00189f1:	8d 76 00             	lea    esi,[esi+0x0]
c00189f4:	81 c4 1c 02 00 00    	add    esp,0x21c
c00189fa:	c3                   	ret    
c00189fb:	90                   	nop

c00189fc <FAT::mkdir(char const*)>:
c00189fc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018a02:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018a0a:	75 08                	jne    c0018a14 <FAT::mkdir(char const*)+0x18>
c0018a0c:	b8 04 00 00 00       	mov    eax,0x4
c0018a11:	eb 61                	jmp    c0018a74 <FAT::mkdir(char const*)+0x78>
c0018a13:	90                   	nop
c0018a14:	83 ec 08             	sub    esp,0x8
c0018a17:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018a1e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018a22:	50                   	push   eax
c0018a23:	e8 c8 7b fe ff       	call   c00005f0 <strcpy>
c0018a28:	83 c4 10             	add    esp,0x10
c0018a2b:	83 ec 08             	sub    esp,0x8
c0018a2e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018a32:	50                   	push   eax
c0018a33:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018a3a:	e8 c9 f9 ff ff       	call   c0018408 <FAT::fixFilepath(char*)>
c0018a3f:	83 c4 10             	add    esp,0x10
c0018a42:	83 ec 0c             	sub    esp,0xc
c0018a45:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018a49:	50                   	push   eax
c0018a4a:	e8 4d bf fe ff       	call   c000499c <f_mkdir>
c0018a4f:	83 c4 10             	add    esp,0x10
c0018a52:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018a59:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0018a60:	85 c0                	test   eax,eax
c0018a62:	75 08                	jne    c0018a6c <FAT::mkdir(char const*)+0x70>
c0018a64:	b8 00 00 00 00       	mov    eax,0x0
c0018a69:	eb 09                	jmp    c0018a74 <FAT::mkdir(char const*)+0x78>
c0018a6b:	90                   	nop
c0018a6c:	b8 01 00 00 00       	mov    eax,0x1
c0018a71:	8d 76 00             	lea    esi,[esi+0x0]
c0018a74:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018a7a:	c3                   	ret    
c0018a7b:	90                   	nop

c0018a7c <FAT::exists(char const*)>:
c0018a7c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0018a82:	83 ec 08             	sub    esp,0x8
c0018a85:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018a8c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018a90:	50                   	push   eax
c0018a91:	e8 5a 7b fe ff       	call   c00005f0 <strcpy>
c0018a96:	83 c4 10             	add    esp,0x10
c0018a99:	83 ec 08             	sub    esp,0x8
c0018a9c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018aa0:	50                   	push   eax
c0018aa1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018aa8:	e8 5b f9 ff ff       	call   c0018408 <FAT::fixFilepath(char*)>
c0018aad:	83 c4 10             	add    esp,0x10
c0018ab0:	83 ec 08             	sub    esp,0x8
c0018ab3:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0018aba:	50                   	push   eax
c0018abb:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018abf:	50                   	push   eax
c0018ac0:	e8 50 bb fe ff       	call   c0004615 <f_stat>
c0018ac5:	83 c4 10             	add    esp,0x10
c0018ac8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0018acf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0018ad6:	85 c0                	test   eax,eax
c0018ad8:	75 06                	jne    c0018ae0 <FAT::exists(char const*)+0x64>
c0018ada:	b0 01                	mov    al,0x1
c0018adc:	eb 06                	jmp    c0018ae4 <FAT::exists(char const*)+0x68>
c0018ade:	66 90                	xchg   ax,ax
c0018ae0:	b0 00                	mov    al,0x0
c0018ae2:	66 90                	xchg   ax,ax
c0018ae4:	81 c4 2c 02 00 00    	add    esp,0x22c
c0018aea:	c3                   	ret    
c0018aeb:	90                   	nop

c0018aec <isoReadDiscSectorHelper>:
c0018aec:	83 ec 2c             	sub    esp,0x2c
c0018aef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018af3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018af7:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0018afc:	83 e8 41             	sub    eax,0x41
c0018aff:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c0018b06:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018b0a:	ba 00 00 00 00       	mov    edx,0x0
c0018b0f:	83 ec 0c             	sub    esp,0xc
c0018b12:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018b16:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018b1a:	52                   	push   edx
c0018b1b:	50                   	push   eax
c0018b1c:	51                   	push   ecx
c0018b1d:	e8 34 42 ff ff       	call   c000cd56 <LogicalDisk::read(unsigned long long, int, void*)>
c0018b22:	83 c4 20             	add    esp,0x20
c0018b25:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018b29:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018b2e:	74 0c                	je     c0018b3c <isoReadDiscSectorHelper+0x50>
c0018b30:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018b34:	c1 e0 0b             	shl    eax,0xb
c0018b37:	eb 0b                	jmp    c0018b44 <isoReadDiscSectorHelper+0x58>
c0018b39:	8d 76 00             	lea    esi,[esi+0x0]
c0018b3c:	b8 00 00 00 00       	mov    eax,0x0
c0018b41:	8d 76 00             	lea    esi,[esi+0x0]
c0018b44:	83 c4 2c             	add    esp,0x2c
c0018b47:	c3                   	ret    

c0018b48 <iso_kprintf>:
c0018b48:	83 ec 0c             	sub    esp,0xc
c0018b4b:	83 ec 08             	sub    esp,0x8
c0018b4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018b52:	68 d9 07 02 c0       	push   0xc00207d9
c0018b57:	e8 aa 1a ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0018b5c:	83 c4 10             	add    esp,0x10
c0018b5f:	90                   	nop
c0018b60:	83 c4 0c             	add    esp,0xc
c0018b63:	c3                   	ret    

c0018b64 <iso_kprintfd>:
c0018b64:	83 ec 0c             	sub    esp,0xc
c0018b67:	83 ec 08             	sub    esp,0x8
c0018b6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018b6e:	68 fb f7 01 c0       	push   0xc001f7fb
c0018b73:	e8 8e 1a ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0018b78:	83 c4 10             	add    esp,0x10
c0018b7b:	90                   	nop
c0018b7c:	83 c4 0c             	add    esp,0xc
c0018b7f:	c3                   	ret    

c0018b80 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0018b80:	b8 08 00 00 00       	mov    eax,0x8
c0018b85:	c3                   	ret    

c0018b86 <ISO9660::getName()>:
c0018b86:	b8 2c 0e 02 c0       	mov    eax,0xc0020e2c
c0018b8b:	c3                   	ret    

c0018b8c <ISO9660::closeDir(void*)>:
c0018b8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b90:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b92:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0018b95:	90                   	nop

c0018b96 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0018b96:	b8 01 00 00 00       	mov    eax,0x1
c0018b9b:	c3                   	ret    

c0018b9c <ISO9660::unlink(char const*)>:
c0018b9c:	b8 01 00 00 00       	mov    eax,0x1
c0018ba1:	c3                   	ret    

c0018ba2 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0018ba2:	b8 03 00 00 00       	mov    eax,0x3
c0018ba7:	c3                   	ret    

c0018ba8 <ISO9660::rename(char const*, char const*)>:
c0018ba8:	b8 01 00 00 00       	mov    eax,0x1
c0018bad:	c3                   	ret    

c0018bae <ISO9660::mkdir(char const*)>:
c0018bae:	b8 01 00 00 00       	mov    eax,0x1
c0018bb3:	c3                   	ret    

c0018bb4 <ISO9660::~ISO9660()>:
c0018bb4:	83 ec 0c             	sub    esp,0xc
c0018bb7:	ba 6c 0f 02 c0       	mov    edx,0xc0020f6c
c0018bbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018bc0:	89 10                	mov    DWORD PTR [eax],edx
c0018bc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018bc6:	83 ec 0c             	sub    esp,0xc
c0018bc9:	50                   	push   eax
c0018bca:	e8 7d 1d ff ff       	call   c000a94c <Filesystem::~Filesystem()>
c0018bcf:	83 c4 10             	add    esp,0x10
c0018bd2:	90                   	nop
c0018bd3:	83 c4 0c             	add    esp,0xc
c0018bd6:	c3                   	ret    
c0018bd7:	90                   	nop

c0018bd8 <ISO9660::~ISO9660()>:
c0018bd8:	83 ec 0c             	sub    esp,0xc
c0018bdb:	83 ec 0c             	sub    esp,0xc
c0018bde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018be2:	e8 cd ff ff ff       	call   c0018bb4 <ISO9660::~ISO9660()>
c0018be7:	83 c4 10             	add    esp,0x10
c0018bea:	83 ec 08             	sub    esp,0x8
c0018bed:	6a 08                	push   0x8
c0018bef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018bf3:	e8 18 19 ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c0018bf8:	83 c4 10             	add    esp,0x10
c0018bfb:	83 c4 0c             	add    esp,0xc
c0018bfe:	c3                   	ret    
c0018bff:	90                   	nop

c0018c00 <ISO9660::exists(char const*)>:
c0018c00:	83 ec 18             	sub    esp,0x18
c0018c03:	68 47 0e 02 c0       	push   0xc0020e47
c0018c08:	e8 ba 77 ff ff       	call   c00103c7 <KePanic(char const*)>
c0018c0d:	31 c0                	xor    eax,eax
c0018c0f:	83 c4 1c             	add    esp,0x1c
c0018c12:	c3                   	ret    
c0018c13:	90                   	nop

c0018c14 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0018c14:	56                   	push   esi
c0018c15:	53                   	push   ebx
c0018c16:	53                   	push   ebx
c0018c17:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018c1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018c1f:	85 db                	test   ebx,ebx
c0018c21:	0f 84 c2 00 00 00    	je     c0018ce9 <ISO9660::open(char const*, void**, FileOpenMode)+0xd5>
c0018c27:	85 f6                	test   esi,esi
c0018c29:	0f 84 ba 00 00 00    	je     c0018ce9 <ISO9660::open(char const*, void**, FileOpenMode)+0xd5>
c0018c2f:	b8 03 00 00 00       	mov    eax,0x3
c0018c34:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0018c39:	0f 85 af 00 00 00    	jne    c0018cee <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c0018c3f:	a0 20 73 02 c0       	mov    al,ds:0xc0027320
c0018c44:	38 03                	cmp    BYTE PTR [ebx],al
c0018c46:	74 1b                	je     c0018c63 <ISO9660::open(char const*, void**, FileOpenMode)+0x4f>
c0018c48:	84 c0                	test   al,al
c0018c4a:	74 10                	je     c0018c5c <ISO9660::open(char const*, void**, FileOpenMode)+0x48>
c0018c4c:	83 ec 0c             	sub    esp,0xc
c0018c4f:	68 65 0e 02 c0       	push   0xc0020e65
c0018c54:	e8 6e 77 ff ff       	call   c00103c7 <KePanic(char const*)>
c0018c59:	83 c4 10             	add    esp,0x10
c0018c5c:	8a 03                	mov    al,BYTE PTR [ebx]
c0018c5e:	a2 20 73 02 c0       	mov    ds:0xc0027320,al
c0018c63:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018c66:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0018c6d:	85 c0                	test   eax,eax
c0018c6f:	74 09                	je     c0018c7a <ISO9660::open(char const*, void**, FileOpenMode)+0x66>
c0018c71:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0018c78:	74 48                	je     c0018cc2 <ISO9660::open(char const*, void**, FileOpenMode)+0xae>
c0018c7a:	83 ec 0c             	sub    esp,0xc
c0018c7d:	68 75 0e 02 c0       	push   0xc0020e75
c0018c82:	e8 7f 19 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0018c87:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018c8a:	83 c4 10             	add    esp,0x10
c0018c8d:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0018c94:	85 c0                	test   eax,eax
c0018c96:	74 17                	je     c0018caf <ISO9660::open(char const*, void**, FileOpenMode)+0x9b>
c0018c98:	83 ec 0c             	sub    esp,0xc
c0018c9b:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0018ca2:	68 95 0e 02 c0       	push   0xc0020e95
c0018ca7:	e8 5a 19 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0018cac:	83 c4 10             	add    esp,0x10
c0018caf:	83 ec 0c             	sub    esp,0xc
c0018cb2:	0f be 05 20 73 02 c0 	movsx  eax,BYTE PTR ds:0xc0027320
c0018cb9:	50                   	push   eax
c0018cba:	e8 8c db fe ff       	call   c000684b <init_percd>
c0018cbf:	83 c4 10             	add    esp,0x10
c0018cc2:	83 c3 03             	add    ebx,0x3
c0018cc5:	51                   	push   ecx
c0018cc6:	51                   	push   ecx
c0018cc7:	6a 00                	push   0x0
c0018cc9:	53                   	push   ebx
c0018cca:	e8 44 d6 fe ff       	call   c0006313 <iso_open>
c0018ccf:	83 c4 10             	add    esp,0x10
c0018cd2:	89 c2                	mov    edx,eax
c0018cd4:	b8 01 00 00 00       	mov    eax,0x1
c0018cd9:	83 fa ff             	cmp    edx,0xffffffff
c0018cdc:	74 10                	je     c0018cee <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c0018cde:	83 c2 32             	add    edx,0x32
c0018ce1:	31 c0                	xor    eax,eax
c0018ce3:	01 d2                	add    edx,edx
c0018ce5:	89 16                	mov    DWORD PTR [esi],edx
c0018ce7:	eb 05                	jmp    c0018cee <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c0018ce9:	b8 04 00 00 00       	mov    eax,0x4
c0018cee:	5a                   	pop    edx
c0018cef:	5b                   	pop    ebx
c0018cf0:	5e                   	pop    esi
c0018cf1:	c3                   	ret    

c0018cf2 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0018cf2:	53                   	push   ebx
c0018cf3:	83 ec 08             	sub    esp,0x8
c0018cf6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cfa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018cfe:	85 c0                	test   eax,eax
c0018d00:	74 2d                	je     c0018d2f <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0018d02:	85 db                	test   ebx,ebx
c0018d04:	74 29                	je     c0018d2f <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0018d06:	b9 02 00 00 00       	mov    ecx,0x2
c0018d0b:	52                   	push   edx
c0018d0c:	99                   	cdq    
c0018d0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018d11:	f7 f9                	idiv   ecx
c0018d13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0018d17:	83 e8 32             	sub    eax,0x32
c0018d1a:	50                   	push   eax
c0018d1b:	e8 9b d6 fe ff       	call   c00063bb <iso_read>
c0018d20:	83 c4 10             	add    esp,0x10
c0018d23:	89 03                	mov    DWORD PTR [ebx],eax
c0018d25:	09 d0                	or     eax,edx
c0018d27:	0f 94 c0             	sete   al
c0018d2a:	0f b6 c0             	movzx  eax,al
c0018d2d:	eb 05                	jmp    c0018d34 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c0018d2f:	b8 04 00 00 00       	mov    eax,0x4
c0018d34:	83 c4 08             	add    esp,0x8
c0018d37:	5b                   	pop    ebx
c0018d38:	c3                   	ret    
c0018d39:	90                   	nop

c0018d3a <ISO9660::seek(void*, unsigned long long)>:
c0018d3a:	57                   	push   edi
c0018d3b:	56                   	push   esi
c0018d3c:	b8 04 00 00 00       	mov    eax,0x4
c0018d41:	51                   	push   ecx
c0018d42:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018d46:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018d4a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018d4e:	85 d2                	test   edx,edx
c0018d50:	74 26                	je     c0018d78 <ISO9660::seek(void*, unsigned long long)+0x3e>
c0018d52:	6a 00                	push   0x0
c0018d54:	b9 02 00 00 00       	mov    ecx,0x2
c0018d59:	57                   	push   edi
c0018d5a:	89 d0                	mov    eax,edx
c0018d5c:	56                   	push   esi
c0018d5d:	99                   	cdq    
c0018d5e:	f7 f9                	idiv   ecx
c0018d60:	83 e8 32             	sub    eax,0x32
c0018d63:	50                   	push   eax
c0018d64:	e8 68 d7 fe ff       	call   c00064d1 <iso_seek>
c0018d69:	83 c4 10             	add    esp,0x10
c0018d6c:	31 f0                	xor    eax,esi
c0018d6e:	31 fa                	xor    edx,edi
c0018d70:	09 d0                	or     eax,edx
c0018d72:	0f 95 c0             	setne  al
c0018d75:	0f b6 c0             	movzx  eax,al
c0018d78:	5a                   	pop    edx
c0018d79:	5e                   	pop    esi
c0018d7a:	5f                   	pop    edi
c0018d7b:	c3                   	ret    

c0018d7c <ISO9660::tell(void*, unsigned long long*)>:
c0018d7c:	53                   	push   ebx
c0018d7d:	83 ec 08             	sub    esp,0x8
c0018d80:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d84:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018d88:	85 c0                	test   eax,eax
c0018d8a:	74 24                	je     c0018db0 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0018d8c:	85 db                	test   ebx,ebx
c0018d8e:	74 20                	je     c0018db0 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0018d90:	83 ec 0c             	sub    esp,0xc
c0018d93:	b9 02 00 00 00       	mov    ecx,0x2
c0018d98:	99                   	cdq    
c0018d99:	f7 f9                	idiv   ecx
c0018d9b:	83 e8 32             	sub    eax,0x32
c0018d9e:	50                   	push   eax
c0018d9f:	e8 b1 d7 fe ff       	call   c0006555 <iso_tell>
c0018da4:	83 c4 10             	add    esp,0x10
c0018da7:	89 03                	mov    DWORD PTR [ebx],eax
c0018da9:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0018dac:	31 c0                	xor    eax,eax
c0018dae:	eb 05                	jmp    c0018db5 <ISO9660::tell(void*, unsigned long long*)+0x39>
c0018db0:	b8 04 00 00 00       	mov    eax,0x4
c0018db5:	83 c4 08             	add    esp,0x8
c0018db8:	5b                   	pop    ebx
c0018db9:	c3                   	ret    

c0018dba <ISO9660::stat(void*, unsigned long long*)>:
c0018dba:	53                   	push   ebx
c0018dbb:	83 ec 14             	sub    esp,0x14
c0018dbe:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0018dc2:	68 b9 0e 02 c0       	push   0xc0020eb9
c0018dc7:	e8 3a 18 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0018dcc:	83 c4 10             	add    esp,0x10
c0018dcf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018dd4:	74 2c                	je     c0018e02 <ISO9660::stat(void*, unsigned long long*)+0x48>
c0018dd6:	85 db                	test   ebx,ebx
c0018dd8:	74 28                	je     c0018e02 <ISO9660::stat(void*, unsigned long long*)+0x48>
c0018dda:	83 ec 0c             	sub    esp,0xc
c0018ddd:	b9 02 00 00 00       	mov    ecx,0x2
c0018de2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018de6:	99                   	cdq    
c0018de7:	f7 f9                	idiv   ecx
c0018de9:	83 e8 32             	sub    eax,0x32
c0018dec:	50                   	push   eax
c0018ded:	e8 94 d7 fe ff       	call   c0006586 <iso_total>
c0018df2:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0018df9:	89 03                	mov    DWORD PTR [ebx],eax
c0018dfb:	83 c4 10             	add    esp,0x10
c0018dfe:	31 c0                	xor    eax,eax
c0018e00:	eb 05                	jmp    c0018e07 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c0018e02:	b8 04 00 00 00       	mov    eax,0x4
c0018e07:	83 c4 08             	add    esp,0x8
c0018e0a:	5b                   	pop    ebx
c0018e0b:	c3                   	ret    

c0018e0c <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0018e0c:	55                   	push   ebp
c0018e0d:	57                   	push   edi
c0018e0e:	56                   	push   esi
c0018e0f:	53                   	push   ebx
c0018e10:	83 ec 18             	sub    esp,0x18
c0018e13:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0018e17:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0018e1b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018e1f:	68 c1 0e 02 c0       	push   0xc0020ec1
c0018e24:	e8 dd 17 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0018e29:	83 c4 10             	add    esp,0x10
c0018e2c:	85 ff                	test   edi,edi
c0018e2e:	0f 94 c2             	sete   dl
c0018e31:	85 f6                	test   esi,esi
c0018e33:	0f 94 c0             	sete   al
c0018e36:	08 c2                	or     dl,al
c0018e38:	0f 85 d5 00 00 00    	jne    c0018f13 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x107>
c0018e3e:	85 db                	test   ebx,ebx
c0018e40:	0f 84 cd 00 00 00    	je     c0018f13 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x107>
c0018e46:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0018e49:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0018e4f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0018e56:	a0 20 73 02 c0       	mov    al,ds:0xc0027320
c0018e5b:	38 03                	cmp    BYTE PTR [ebx],al
c0018e5d:	74 1b                	je     c0018e7a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x6e>
c0018e5f:	84 c0                	test   al,al
c0018e61:	74 10                	je     c0018e73 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x67>
c0018e63:	83 ec 0c             	sub    esp,0xc
c0018e66:	68 65 0e 02 c0       	push   0xc0020e65
c0018e6b:	e8 57 75 ff ff       	call   c00103c7 <KePanic(char const*)>
c0018e70:	83 c4 10             	add    esp,0x10
c0018e73:	8a 03                	mov    al,BYTE PTR [ebx]
c0018e75:	a2 20 73 02 c0       	mov    ds:0xc0027320,al
c0018e7a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018e7d:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0018e84:	85 c0                	test   eax,eax
c0018e86:	74 09                	je     c0018e91 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x85>
c0018e88:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0018e8f:	74 51                	je     c0018ee2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xd6>
c0018e91:	83 ec 0c             	sub    esp,0xc
c0018e94:	68 c9 0e 02 c0       	push   0xc0020ec9
c0018e99:	e8 68 17 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0018e9e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018ea1:	83 c4 10             	add    esp,0x10
c0018ea4:	83 3c 85 1c 63 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd9ce4],0x0
c0018eac:	74 21                	je     c0018ecf <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0018eae:	83 ec 0c             	sub    esp,0xc
c0018eb1:	68 e9 0e 02 c0       	push   0xc0020ee9
c0018eb6:	e8 4b 17 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0018ebb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018ebe:	83 c4 10             	add    esp,0x10
c0018ec1:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0018ec8:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0018ecf:	83 ec 0c             	sub    esp,0xc
c0018ed2:	0f be 05 20 73 02 c0 	movsx  eax,BYTE PTR ds:0xc0027320
c0018ed9:	50                   	push   eax
c0018eda:	e8 6c d9 fe ff       	call   c000684b <init_percd>
c0018edf:	83 c4 10             	add    esp,0x10
c0018ee2:	83 c3 03             	add    ebx,0x3
c0018ee5:	52                   	push   edx
c0018ee6:	52                   	push   edx
c0018ee7:	6a 00                	push   0x0
c0018ee9:	53                   	push   ebx
c0018eea:	e8 24 d4 fe ff       	call   c0006313 <iso_open>
c0018eef:	83 c4 10             	add    esp,0x10
c0018ef2:	89 c5                	mov    ebp,eax
c0018ef4:	83 f8 ff             	cmp    eax,0xffffffff
c0018ef7:	75 21                	jne    c0018f1a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x10e>
c0018ef9:	50                   	push   eax
c0018efa:	50                   	push   eax
c0018efb:	6a 01                	push   0x1
c0018efd:	53                   	push   ebx
c0018efe:	e8 10 d4 fe ff       	call   c0006313 <iso_open>
c0018f03:	83 c4 10             	add    esp,0x10
c0018f06:	ba 02 00 00 00       	mov    edx,0x2
c0018f0b:	40                   	inc    eax
c0018f0c:	74 2b                	je     c0018f39 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12d>
c0018f0e:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0018f11:	eb 24                	jmp    c0018f37 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12b>
c0018f13:	ba 04 00 00 00       	mov    edx,0x4
c0018f18:	eb 1f                	jmp    c0018f39 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12d>
c0018f1a:	83 ec 0c             	sub    esp,0xc
c0018f1d:	50                   	push   eax
c0018f1e:	e8 63 d6 fe ff       	call   c0006586 <iso_total>
c0018f23:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0018f2a:	89 07                	mov    DWORD PTR [edi],eax
c0018f2c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018f2f:	e8 69 d4 fe ff       	call   c000639d <iso_close>
c0018f34:	83 c4 10             	add    esp,0x10
c0018f37:	31 d2                	xor    edx,edx
c0018f39:	83 c4 0c             	add    esp,0xc
c0018f3c:	89 d0                	mov    eax,edx
c0018f3e:	5b                   	pop    ebx
c0018f3f:	5e                   	pop    esi
c0018f40:	5f                   	pop    edi
c0018f41:	5d                   	pop    ebp
c0018f42:	c3                   	ret    
c0018f43:	90                   	nop

c0018f44 <ISO9660::close(void*)>:
c0018f44:	83 ec 0c             	sub    esp,0xc
c0018f47:	b8 04 00 00 00       	mov    eax,0x4
c0018f4c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018f50:	85 d2                	test   edx,edx
c0018f52:	74 1b                	je     c0018f6f <ISO9660::close(void*)+0x2b>
c0018f54:	83 ec 0c             	sub    esp,0xc
c0018f57:	b9 02 00 00 00       	mov    ecx,0x2
c0018f5c:	89 d0                	mov    eax,edx
c0018f5e:	99                   	cdq    
c0018f5f:	f7 f9                	idiv   ecx
c0018f61:	83 e8 32             	sub    eax,0x32
c0018f64:	50                   	push   eax
c0018f65:	e8 33 d4 fe ff       	call   c000639d <iso_close>
c0018f6a:	83 c4 10             	add    esp,0x10
c0018f6d:	31 c0                	xor    eax,eax
c0018f6f:	83 c4 0c             	add    esp,0xc
c0018f72:	c3                   	ret    
c0018f73:	90                   	nop

c0018f74 <ISO9660::openDir(char const*, void**)>:
c0018f74:	56                   	push   esi
c0018f75:	53                   	push   ebx
c0018f76:	50                   	push   eax
c0018f77:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018f7b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018f7f:	85 db                	test   ebx,ebx
c0018f81:	0f 84 b5 00 00 00    	je     c001903c <ISO9660::openDir(char const*, void**)+0xc8>
c0018f87:	85 f6                	test   esi,esi
c0018f89:	0f 84 ad 00 00 00    	je     c001903c <ISO9660::openDir(char const*, void**)+0xc8>
c0018f8f:	a0 20 73 02 c0       	mov    al,ds:0xc0027320
c0018f94:	38 03                	cmp    BYTE PTR [ebx],al
c0018f96:	74 1b                	je     c0018fb3 <ISO9660::openDir(char const*, void**)+0x3f>
c0018f98:	84 c0                	test   al,al
c0018f9a:	74 10                	je     c0018fac <ISO9660::openDir(char const*, void**)+0x38>
c0018f9c:	83 ec 0c             	sub    esp,0xc
c0018f9f:	68 65 0e 02 c0       	push   0xc0020e65
c0018fa4:	e8 1e 74 ff ff       	call   c00103c7 <KePanic(char const*)>
c0018fa9:	83 c4 10             	add    esp,0x10
c0018fac:	8a 03                	mov    al,BYTE PTR [ebx]
c0018fae:	a2 20 73 02 c0       	mov    ds:0xc0027320,al
c0018fb3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018fb6:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0018fbd:	85 c0                	test   eax,eax
c0018fbf:	74 10                	je     c0018fd1 <ISO9660::openDir(char const*, void**)+0x5d>
c0018fc1:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0018fc8:	74 1a                	je     c0018fe4 <ISO9660::openDir(char const*, void**)+0x70>
c0018fca:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0018fd1:	83 ec 0c             	sub    esp,0xc
c0018fd4:	0f be 05 20 73 02 c0 	movsx  eax,BYTE PTR ds:0xc0027320
c0018fdb:	50                   	push   eax
c0018fdc:	e8 6a d8 fe ff       	call   c000684b <init_percd>
c0018fe1:	83 c4 10             	add    esp,0x10
c0018fe4:	83 c3 03             	add    ebx,0x3
c0018fe7:	50                   	push   eax
c0018fe8:	50                   	push   eax
c0018fe9:	6a 01                	push   0x1
c0018feb:	53                   	push   ebx
c0018fec:	e8 22 d3 fe ff       	call   c0006313 <iso_open>
c0018ff1:	83 c4 10             	add    esp,0x10
c0018ff4:	89 c3                	mov    ebx,eax
c0018ff6:	83 f8 ff             	cmp    eax,0xffffffff
c0018ff9:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0018ffe:	75 1c                	jne    c001901c <ISO9660::openDir(char const*, void**)+0xa8>
c0019000:	53                   	push   ebx
c0019001:	53                   	push   ebx
c0019002:	68 0d 0f 02 c0       	push   0xc0020f0d
c0019007:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001900d:	e8 ca f7 fe ff       	call   c00087dc <VgaText::puts(char const*)>
c0019012:	83 c4 10             	add    esp,0x10
c0019015:	b8 01 00 00 00       	mov    eax,0x1
c001901a:	eb 25                	jmp    c0019041 <ISO9660::openDir(char const*, void**)+0xcd>
c001901c:	01 db                	add    ebx,ebx
c001901e:	51                   	push   ecx
c001901f:	83 c3 65             	add    ebx,0x65
c0019022:	51                   	push   ecx
c0019023:	68 20 0f 02 c0       	push   0xc0020f20
c0019028:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001902e:	e8 a9 f7 fe ff       	call   c00087dc <VgaText::puts(char const*)>
c0019033:	89 1e                	mov    DWORD PTR [esi],ebx
c0019035:	83 c4 10             	add    esp,0x10
c0019038:	31 c0                	xor    eax,eax
c001903a:	eb 05                	jmp    c0019041 <ISO9660::openDir(char const*, void**)+0xcd>
c001903c:	b8 04 00 00 00       	mov    eax,0x4
c0019041:	5a                   	pop    edx
c0019042:	5b                   	pop    ebx
c0019043:	5e                   	pop    esi
c0019044:	c3                   	ret    
c0019045:	90                   	nop

c0019046 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0019046:	55                   	push   ebp
c0019047:	57                   	push   edi
c0019048:	56                   	push   esi
c0019049:	53                   	push   ebx
c001904a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019050:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0019057:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001905e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019066:	0f 84 e7 00 00 00    	je     c0019153 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001906c:	85 db                	test   ebx,ebx
c001906e:	0f 84 df 00 00 00    	je     c0019153 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0019074:	83 ec 0c             	sub    esp,0xc
c0019077:	68 33 0f 02 c0       	push   0xc0020f33
c001907c:	e8 85 15 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0019081:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0019088:	b9 02 00 00 00       	mov    ecx,0x2
c001908d:	99                   	cdq    
c001908e:	f7 f9                	idiv   ecx
c0019090:	83 e8 32             	sub    eax,0x32
c0019093:	89 04 24             	mov    DWORD PTR [esp],eax
c0019096:	e8 3c d5 fe ff       	call   c00065d7 <iso_readdir>
c001909b:	83 c4 10             	add    esp,0x10
c001909e:	89 c6                	mov    esi,eax
c00190a0:	85 c0                	test   eax,eax
c00190a2:	75 37                	jne    c00190db <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c00190a4:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00190a9:	56                   	push   esi
c00190aa:	56                   	push   esi
c00190ab:	68 3e 0f 02 c0       	push   0xc0020f3e
c00190b0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00190b6:	e8 21 f7 fe ff       	call   c00087dc <VgaText::puts(char const*)>
c00190bb:	83 c4 0c             	add    esp,0xc
c00190be:	68 10 01 00 00       	push   0x110
c00190c3:	6a 00                	push   0x0
c00190c5:	57                   	push   edi
c00190c6:	e8 f5 73 fe ff       	call   c00004c0 <memset>
c00190cb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00190d1:	83 c4 10             	add    esp,0x10
c00190d4:	b8 01 00 00 00       	mov    eax,0x1
c00190d9:	eb 7d                	jmp    c0019158 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c00190db:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c00190e1:	8d 68 08             	lea    ebp,[eax+0x8]
c00190e4:	83 ec 0c             	sub    esp,0xc
c00190e7:	55                   	push   ebp
c00190e8:	e8 43 74 fe ff       	call   c0000530 <strlen>
c00190ed:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00190f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00190f9:	83 c4 10             	add    esp,0x10
c00190fc:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0019100:	75 0a                	jne    c001910c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0019102:	b8 02 00 00 00       	mov    eax,0x2
c0019107:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001910a:	74 05                	je     c0019111 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001910c:	b8 01 00 00 00       	mov    eax,0x1
c0019111:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019115:	50                   	push   eax
c0019116:	50                   	push   eax
c0019117:	55                   	push   ebp
c0019118:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001911c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0019120:	50                   	push   eax
c0019121:	e8 ca 74 fe ff       	call   c00005f0 <strcpy>
c0019126:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001912d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001912f:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0019135:	5a                   	pop    edx
c0019136:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001913b:	59                   	pop    ecx
c001913c:	68 51 0f 02 c0       	push   0xc0020f51
c0019141:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019147:	e8 90 f6 fe ff       	call   c00087dc <VgaText::puts(char const*)>
c001914c:	83 c4 10             	add    esp,0x10
c001914f:	31 c0                	xor    eax,eax
c0019151:	eb 05                	jmp    c0019158 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0019153:	b8 04 00 00 00       	mov    eax,0x4
c0019158:	81 c4 1c 01 00 00    	add    esp,0x11c
c001915e:	5b                   	pop    ebx
c001915f:	5e                   	pop    esi
c0019160:	5f                   	pop    edi
c0019161:	5d                   	pop    ebp
c0019162:	c3                   	ret    

c0019163 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0019163:	57                   	push   edi
c0019164:	56                   	push   esi
c0019165:	53                   	push   ebx
c0019166:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001916a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001916e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019172:	39 35 24 73 02 c0    	cmp    DWORD PTR ds:0xc0027324,esi
c0019178:	75 08                	jne    c0019182 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001917a:	38 1d a4 1a 02 c0    	cmp    BYTE PTR ds:0xc0021aa4,bl
c0019180:	74 4a                	je     c00191cc <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0019182:	83 ec 0c             	sub    esp,0xc
c0019185:	31 d2                	xor    edx,edx
c0019187:	68 40 73 02 c0       	push   0xc0027340
c001918c:	0f be c3             	movsx  eax,bl
c001918f:	6a 01                	push   0x1
c0019191:	52                   	push   edx
c0019192:	56                   	push   esi
c0019193:	ff 34 85 1c 63 02 c0 	push   DWORD PTR [eax*4-0x3ffd9ce4]
c001919a:	e8 b7 3b ff ff       	call   c000cd56 <LogicalDisk::read(unsigned long long, int, void*)>
c001919f:	83 c4 20             	add    esp,0x20
c00191a2:	85 c0                	test   eax,eax
c00191a4:	75 0e                	jne    c00191b4 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c00191a6:	89 35 24 73 02 c0    	mov    DWORD PTR ds:0xc0027324,esi
c00191ac:	88 1d a4 1a 02 c0    	mov    BYTE PTR ds:0xc0021aa4,bl
c00191b2:	eb 18                	jmp    c00191cc <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c00191b4:	50                   	push   eax
c00191b5:	68 00 08 00 00       	push   0x800
c00191ba:	6a 00                	push   0x0
c00191bc:	57                   	push   edi
c00191bd:	e8 fe 72 fe ff       	call   c00004c0 <memset>
c00191c2:	83 c4 10             	add    esp,0x10
c00191c5:	b8 01 00 00 00       	mov    eax,0x1
c00191ca:	eb 0e                	jmp    c00191da <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c00191cc:	be 40 73 02 c0       	mov    esi,0xc0027340
c00191d1:	b9 00 08 00 00       	mov    ecx,0x800
c00191d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00191d8:	31 c0                	xor    eax,eax
c00191da:	5b                   	pop    ebx
c00191db:	5e                   	pop    esi
c00191dc:	5f                   	pop    edi
c00191dd:	c3                   	ret    

c00191de <ISO9660::tryMount(LogicalDisk*, int)>:
c00191de:	53                   	push   ebx
c00191df:	81 ec 0c 08 00 00    	sub    esp,0x80c
c00191e5:	c7 05 24 73 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0027324,0xdeadbeef
c00191ef:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00191f6:	8d 58 41             	lea    ebx,[eax+0x41]
c00191f9:	0f be db             	movsx  ebx,bl
c00191fc:	53                   	push   ebx
c00191fd:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019201:	50                   	push   eax
c0019202:	6a 10                	push   0x10
c0019204:	e8 5a ff ff ff       	call   c0019163 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019209:	83 c4 10             	add    esp,0x10
c001920c:	31 d2                	xor    edx,edx
c001920e:	85 c0                	test   eax,eax
c0019210:	75 33                	jne    c0019245 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019212:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0019217:	75 2c                	jne    c0019245 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019219:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001921e:	75 25                	jne    c0019245 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019220:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0019225:	75 1e                	jne    c0019245 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019227:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001922c:	75 17                	jne    c0019245 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001922e:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0019233:	75 10                	jne    c0019245 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019235:	83 ec 0c             	sub    esp,0xc
c0019238:	53                   	push   ebx
c0019239:	e8 0d d6 fe ff       	call   c000684b <init_percd>
c001923e:	83 c4 10             	add    esp,0x10
c0019241:	40                   	inc    eax
c0019242:	0f 95 c2             	setne  dl
c0019245:	88 d0                	mov    al,dl
c0019247:	81 c4 08 08 00 00    	add    esp,0x808
c001924d:	5b                   	pop    ebx
c001924e:	c3                   	ret    
c001924f:	90                   	nop

c0019250 <ISO9660::ISO9660()>:
c0019250:	83 ec 0c             	sub    esp,0xc
c0019253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019257:	83 ec 0c             	sub    esp,0xc
c001925a:	50                   	push   eax
c001925b:	e8 c8 16 ff ff       	call   c000a928 <Filesystem::Filesystem()>
c0019260:	83 c4 10             	add    esp,0x10
c0019263:	ba 6c 0f 02 c0       	mov    edx,0xc0020f6c
c0019268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001926c:	89 10                	mov    DWORD PTR [eax],edx
c001926e:	e8 ea d6 fe ff       	call   c000695d <fs_iso9660_init>
c0019273:	90                   	nop
c0019274:	83 c4 0c             	add    esp,0xc
c0019277:	c3                   	ret    

c0019278 <SoundCard::beginPlayback()>:
c0019278:	c7 44 24 04 cc 0f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020fcc
c0019280:	e9 42 71 ff ff       	jmp    c00103c7 <KePanic(char const*)>
c0019285:	90                   	nop

c0019286 <SoundCard::stopPlayback()>:
c0019286:	c7 44 24 04 cc 0f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020fcc
c001928e:	e9 34 71 ff ff       	jmp    c00103c7 <KePanic(char const*)>
c0019293:	90                   	nop

c0019294 <SoundCard::SoundCard(char const*)>:
c0019294:	83 ec 1c             	sub    esp,0x1c
c0019297:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001929b:	83 ec 08             	sub    esp,0x8
c001929e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00192a2:	50                   	push   eax
c00192a3:	e8 34 29 ff ff       	call   c000bbdc <Device::Device(char const*)>
c00192a8:	83 c4 10             	add    esp,0x10
c00192ab:	ba 18 10 02 c0       	mov    edx,0xc0021018
c00192b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00192b4:	89 10                	mov    DWORD PTR [eax],edx
c00192b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00192ba:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c00192c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00192c5:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c00192cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00192d3:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c00192dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00192e1:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c00192eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00192ef:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00192f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019301:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0019306:	7f 19                	jg     c0019321 <SoundCard::SoundCard(char const*)+0x8d>
c0019308:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001930c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019310:	83 c2 54             	add    edx,0x54
c0019313:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001931b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001931f:	eb e0                	jmp    c0019301 <SoundCard::SoundCard(char const*)+0x6d>
c0019321:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019325:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001932c:	90                   	nop
c001932d:	83 c4 1c             	add    esp,0x1c
c0019330:	c3                   	ret    
c0019331:	90                   	nop

c0019332 <SoundCard::~SoundCard()>:
c0019332:	83 ec 0c             	sub    esp,0xc
c0019335:	ba 18 10 02 c0       	mov    edx,0xc0021018
c001933a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001933e:	89 10                	mov    DWORD PTR [eax],edx
c0019340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019344:	83 ec 0c             	sub    esp,0xc
c0019347:	50                   	push   eax
c0019348:	e8 f9 25 ff ff       	call   c000b946 <Device::~Device()>
c001934d:	83 c4 10             	add    esp,0x10
c0019350:	90                   	nop
c0019351:	83 c4 0c             	add    esp,0xc
c0019354:	c3                   	ret    
c0019355:	90                   	nop

c0019356 <SoundCard::~SoundCard()>:
c0019356:	83 ec 0c             	sub    esp,0xc
c0019359:	83 ec 0c             	sub    esp,0xc
c001935c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019360:	e8 cd ff ff ff       	call   c0019332 <SoundCard::~SoundCard()>
c0019365:	83 c4 10             	add    esp,0x10
c0019368:	83 ec 08             	sub    esp,0x8
c001936b:	68 e8 01 00 00       	push   0x1e8
c0019370:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019374:	e8 97 11 ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c0019379:	83 c4 10             	add    esp,0x10
c001937c:	83 c4 0c             	add    esp,0xc
c001937f:	c3                   	ret    

c0019380 <SoundCard::configureRates(int, int, int)>:
c0019380:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019384:	31 c0                	xor    eax,eax
c0019386:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001938d:	75 20                	jne    c00193af <SoundCard::configureRates(int, int, int)+0x2f>
c001938f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019393:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0019399:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001939d:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c00193a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193a7:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c00193ad:	b0 01                	mov    al,0x1
c00193af:	c3                   	ret    

c00193b0 <SoundCard::getSamples16(int, short*)>:
c00193b0:	55                   	push   ebp
c00193b1:	57                   	push   edi
c00193b2:	31 ff                	xor    edi,edi
c00193b4:	56                   	push   esi
c00193b5:	53                   	push   ebx
c00193b6:	31 db                	xor    ebx,ebx
c00193b8:	83 ec 10             	sub    esp,0x10
c00193bb:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00193bf:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00193c3:	8d 04 36             	lea    eax,[esi+esi*1]
c00193c6:	50                   	push   eax
c00193c7:	6a 00                	push   0x0
c00193c9:	55                   	push   ebp
c00193ca:	e8 f1 70 fe ff       	call   c00004c0 <memset>
c00193cf:	83 c4 10             	add    esp,0x10
c00193d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00193d6:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c00193dd:	85 c0                	test   eax,eax
c00193df:	74 1b                	je     c00193fc <SoundCard::getSamples16(int, short*)+0x4c>
c00193e1:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c00193e5:	75 15                	jne    c00193fc <SoundCard::getSamples16(int, short*)+0x4c>
c00193e7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00193eb:	55                   	push   ebp
c00193ec:	56                   	push   esi
c00193ed:	50                   	push   eax
c00193ee:	e8 ed 02 00 00       	call   c00196e0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c00193f3:	83 c4 10             	add    esp,0x10
c00193f6:	39 c7                	cmp    edi,eax
c00193f8:	7d 02                	jge    c00193fc <SoundCard::getSamples16(int, short*)+0x4c>
c00193fa:	89 c7                	mov    edi,eax
c00193fc:	43                   	inc    ebx
c00193fd:	83 fb 20             	cmp    ebx,0x20
c0019400:	75 d0                	jne    c00193d2 <SoundCard::getSamples16(int, short*)+0x22>
c0019402:	83 c4 0c             	add    esp,0xc
c0019405:	89 f8                	mov    eax,edi
c0019407:	5b                   	pop    ebx
c0019408:	5e                   	pop    esi
c0019409:	5f                   	pop    edi
c001940a:	5d                   	pop    ebp
c001940b:	c3                   	ret    

c001940c <SoundCard::getSamples32(int, int*)>:
c001940c:	55                   	push   ebp
c001940d:	57                   	push   edi
c001940e:	31 ff                	xor    edi,edi
c0019410:	56                   	push   esi
c0019411:	31 f6                	xor    esi,esi
c0019413:	53                   	push   ebx
c0019414:	83 ec 10             	sub    esp,0x10
c0019417:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001941b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001941f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019423:	c1 e0 02             	shl    eax,0x2
c0019426:	50                   	push   eax
c0019427:	6a 00                	push   0x0
c0019429:	55                   	push   ebp
c001942a:	e8 91 70 fe ff       	call   c00004c0 <memset>
c001942f:	83 c4 10             	add    esp,0x10
c0019432:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0019439:	85 c0                	test   eax,eax
c001943b:	74 1b                	je     c0019458 <SoundCard::getSamples32(int, int*)+0x4c>
c001943d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019441:	75 15                	jne    c0019458 <SoundCard::getSamples32(int, int*)+0x4c>
c0019443:	53                   	push   ebx
c0019444:	55                   	push   ebp
c0019445:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019449:	50                   	push   eax
c001944a:	e8 55 03 00 00       	call   c00197a4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001944f:	83 c4 10             	add    esp,0x10
c0019452:	39 c6                	cmp    esi,eax
c0019454:	7d 02                	jge    c0019458 <SoundCard::getSamples32(int, int*)+0x4c>
c0019456:	89 c6                	mov    esi,eax
c0019458:	47                   	inc    edi
c0019459:	83 ff 20             	cmp    edi,0x20
c001945c:	75 d4                	jne    c0019432 <SoundCard::getSamples32(int, int*)+0x26>
c001945e:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0019464:	85 f6                	test   esi,esi
c0019466:	75 0f                	jne    c0019477 <SoundCard::getSamples32(int, int*)+0x6b>
c0019468:	84 c0                	test   al,al
c001946a:	74 1b                	je     c0019487 <SoundCard::getSamples32(int, int*)+0x7b>
c001946c:	83 ec 0c             	sub    esp,0xc
c001946f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019471:	53                   	push   ebx
c0019472:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0019475:	eb 0d                	jmp    c0019484 <SoundCard::getSamples32(int, int*)+0x78>
c0019477:	84 c0                	test   al,al
c0019479:	75 0c                	jne    c0019487 <SoundCard::getSamples32(int, int*)+0x7b>
c001947b:	83 ec 0c             	sub    esp,0xc
c001947e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019480:	53                   	push   ebx
c0019481:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0019484:	83 c4 10             	add    esp,0x10
c0019487:	83 c4 0c             	add    esp,0xc
c001948a:	89 f0                	mov    eax,esi
c001948c:	5b                   	pop    ebx
c001948d:	5e                   	pop    esi
c001948e:	5f                   	pop    edi
c001948f:	5d                   	pop    ebp
c0019490:	c3                   	ret    
c0019491:	90                   	nop

c0019492 <SoundCard::addChannel(SoundPort*)>:
c0019492:	83 ec 0c             	sub    esp,0xc
c0019495:	31 c0                	xor    eax,eax
c0019497:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001949b:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00194a3:	74 1b                	je     c00194c0 <SoundCard::addChannel(SoundPort*)+0x2e>
c00194a5:	40                   	inc    eax
c00194a6:	83 f8 20             	cmp    eax,0x20
c00194a9:	75 f0                	jne    c001949b <SoundCard::addChannel(SoundPort*)+0x9>
c00194ab:	83 ec 0c             	sub    esp,0xc
c00194ae:	68 f1 0f 02 c0       	push   0xc0020ff1
c00194b3:	e8 0f 6f ff ff       	call   c00103c7 <KePanic(char const*)>
c00194b8:	83 c4 10             	add    esp,0x10
c00194bb:	83 c8 ff             	or     eax,0xffffffff
c00194be:	eb 0b                	jmp    c00194cb <SoundCard::addChannel(SoundPort*)+0x39>
c00194c0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00194c4:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c00194cb:	83 c4 0c             	add    esp,0xc
c00194ce:	c3                   	ret    
c00194cf:	90                   	nop

c00194d0 <SoundCard::removeChannel(int)>:
c00194d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00194d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00194d8:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c00194e3:	c3                   	ret    

c00194e4 <SoundPort::SoundPort(int, int, int, int)>:
c00194e4:	83 ec 0c             	sub    esp,0xc
c00194e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00194eb:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00194f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00194f6:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00194fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00194fe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019502:	89 10                	mov    DWORD PTR [eax],edx
c0019504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019508:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001950c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001950f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019513:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019517:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001951a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001951f:	75 13                	jne    c0019534 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0019521:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019525:	8b 00                	mov    eax,DWORD PTR [eax]
c0019527:	05 a0 0f 00 00       	add    eax,0xfa0
c001952c:	01 c0                	add    eax,eax
c001952e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0019532:	66 90                	xchg   ax,ax
c0019534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019538:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001953c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001953f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019543:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001954a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001954e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019551:	c1 e0 02             	shl    eax,0x2
c0019554:	83 ec 0c             	sub    esp,0xc
c0019557:	50                   	push   eax
c0019558:	e8 08 e3 fe ff       	call   c0007865 <malloc>
c001955d:	83 c4 10             	add    esp,0x10
c0019560:	89 c2                	mov    edx,eax
c0019562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019566:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0019569:	90                   	nop
c001956a:	83 c4 0c             	add    esp,0xc
c001956d:	c3                   	ret    
c001956e:	66 90                	xchg   ax,ax

c0019570 <SoundPort::~SoundPort()>:
c0019570:	83 ec 0c             	sub    esp,0xc
c0019573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019577:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001957a:	85 c0                	test   eax,eax
c001957c:	74 1e                	je     c001959c <SoundPort::~SoundPort()+0x2c>
c001957e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019582:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019585:	83 ec 0c             	sub    esp,0xc
c0019588:	50                   	push   eax
c0019589:	e8 e7 e2 fe ff       	call   c0007875 <free>
c001958e:	83 c4 10             	add    esp,0x10
c0019591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019595:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001959c:	90                   	nop
c001959d:	83 c4 0c             	add    esp,0xc
c00195a0:	c3                   	ret    
c00195a1:	90                   	nop
c00195a2:	66 90                	xchg   ax,ax

c00195a4 <SoundPort::unpause()>:
c00195a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195a8:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c00195ac:	c3                   	ret    
c00195ad:	90                   	nop
c00195ae:	66 90                	xchg   ax,ax

c00195b0 <SoundPort::pause()>:
c00195b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195b4:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00195b8:	c3                   	ret    
c00195b9:	90                   	nop
c00195ba:	66 90                	xchg   ax,ax

c00195bc <SoundPort::getBufferUsed()>:
c00195bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195c0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00195c3:	c3                   	ret    

c00195c4 <SoundPort::getBufferSize()>:
c00195c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195c8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00195cb:	c3                   	ret    

c00195cc <SoundPort::buffer16(short*, int)>:
c00195cc:	55                   	push   ebp
c00195cd:	57                   	push   edi
c00195ce:	56                   	push   esi
c00195cf:	53                   	push   ebx
c00195d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00195d4:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00195d8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00195db:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c00195de:	74 68                	je     c0019648 <SoundPort::buffer16(short*, int)+0x7c>
c00195e0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00195e4:	85 c9                	test   ecx,ecx
c00195e6:	7e 60                	jle    c0019648 <SoundPort::buffer16(short*, int)+0x7c>
c00195e8:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c00195ec:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00195ef:	c1 e1 0f             	shl    ecx,0xf
c00195f2:	8d 70 01             	lea    esi,[eax+0x1]
c00195f5:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00195f8:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c00195fb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00195fe:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019601:	74 4d                	je     c0019650 <SoundPort::buffer16(short*, int)+0x84>
c0019603:	31 f6                	xor    esi,esi
c0019605:	eb 21                	jmp    c0019628 <SoundPort::buffer16(short*, int)+0x5c>
c0019607:	90                   	nop
c0019608:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001960d:	8d 79 01             	lea    edi,[ecx+0x1]
c0019610:	c1 e3 0f             	shl    ebx,0xf
c0019613:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0019616:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0019619:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001961c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001961f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019622:	74 1c                	je     c0019640 <SoundPort::buffer16(short*, int)+0x74>
c0019624:	89 c6                	mov    esi,eax
c0019626:	66 90                	xchg   ax,ax
c0019628:	8d 46 01             	lea    eax,[esi+0x1]
c001962b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001962f:	75 d7                	jne    c0019608 <SoundPort::buffer16(short*, int)+0x3c>
c0019631:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019635:	8d 76 00             	lea    esi,[esi+0x0]
c0019638:	5b                   	pop    ebx
c0019639:	5e                   	pop    esi
c001963a:	5f                   	pop    edi
c001963b:	5d                   	pop    ebp
c001963c:	c3                   	ret    
c001963d:	8d 76 00             	lea    esi,[esi+0x0]
c0019640:	5b                   	pop    ebx
c0019641:	8d 46 02             	lea    eax,[esi+0x2]
c0019644:	5e                   	pop    esi
c0019645:	5f                   	pop    edi
c0019646:	5d                   	pop    ebp
c0019647:	c3                   	ret    
c0019648:	5b                   	pop    ebx
c0019649:	31 c0                	xor    eax,eax
c001964b:	5e                   	pop    esi
c001964c:	5f                   	pop    edi
c001964d:	5d                   	pop    ebp
c001964e:	c3                   	ret    
c001964f:	90                   	nop
c0019650:	b8 01 00 00 00       	mov    eax,0x1
c0019655:	eb e1                	jmp    c0019638 <SoundPort::buffer16(short*, int)+0x6c>
c0019657:	90                   	nop

c0019658 <SoundPort::buffer32(int*, int)>:
c0019658:	55                   	push   ebp
c0019659:	57                   	push   edi
c001965a:	56                   	push   esi
c001965b:	53                   	push   ebx
c001965c:	51                   	push   ecx
c001965d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019661:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019665:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019668:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001966c:	89 04 24             	mov    DWORD PTR [esp],eax
c001966f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019672:	74 5c                	je     c00196d0 <SoundPort::buffer32(int*, int)+0x78>
c0019674:	85 c0                	test   eax,eax
c0019676:	7e 58                	jle    c00196d0 <SoundPort::buffer32(int*, int)+0x78>
c0019678:	8d 71 01             	lea    esi,[ecx+0x1]
c001967b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001967e:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019681:	8b 37                	mov    esi,DWORD PTR [edi]
c0019683:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0019686:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019689:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001968c:	74 4a                	je     c00196d8 <SoundPort::buffer32(int*, int)+0x80>
c001968e:	31 f6                	xor    esi,esi
c0019690:	eb 1e                	jmp    c00196b0 <SoundPort::buffer32(int*, int)+0x58>
c0019692:	66 90                	xchg   ax,ax
c0019694:	8d 69 01             	lea    ebp,[ecx+0x1]
c0019697:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001969a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001969d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00196a0:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c00196a4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00196a7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00196aa:	74 18                	je     c00196c4 <SoundPort::buffer32(int*, int)+0x6c>
c00196ac:	89 de                	mov    esi,ebx
c00196ae:	66 90                	xchg   ax,ax
c00196b0:	8d 5e 01             	lea    ebx,[esi+0x1]
c00196b3:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c00196b6:	75 dc                	jne    c0019694 <SoundPort::buffer32(int*, int)+0x3c>
c00196b8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00196bb:	90                   	nop
c00196bc:	5a                   	pop    edx
c00196bd:	5b                   	pop    ebx
c00196be:	5e                   	pop    esi
c00196bf:	5f                   	pop    edi
c00196c0:	5d                   	pop    ebp
c00196c1:	c3                   	ret    
c00196c2:	66 90                	xchg   ax,ax
c00196c4:	5a                   	pop    edx
c00196c5:	8d 46 02             	lea    eax,[esi+0x2]
c00196c8:	5b                   	pop    ebx
c00196c9:	5e                   	pop    esi
c00196ca:	5f                   	pop    edi
c00196cb:	5d                   	pop    ebp
c00196cc:	c3                   	ret    
c00196cd:	8d 76 00             	lea    esi,[esi+0x0]
c00196d0:	5a                   	pop    edx
c00196d1:	31 c0                	xor    eax,eax
c00196d3:	5b                   	pop    ebx
c00196d4:	5e                   	pop    esi
c00196d5:	5f                   	pop    edi
c00196d6:	5d                   	pop    ebp
c00196d7:	c3                   	ret    
c00196d8:	b8 01 00 00 00       	mov    eax,0x1
c00196dd:	eb dd                	jmp    c00196bc <SoundPort::buffer32(int*, int)+0x64>
c00196df:	90                   	nop

c00196e0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c00196e0:	57                   	push   edi
c00196e1:	56                   	push   esi
c00196e2:	53                   	push   ebx
c00196e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00196e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00196eb:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c00196f1:	39 03                	cmp    DWORD PTR [ebx],eax
c00196f3:	74 13                	je     c0019708 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c00196f5:	83 ec 0c             	sub    esp,0xc
c00196f8:	68 44 10 02 c0       	push   0xc0021044
c00196fd:	e8 c5 6c ff ff       	call   c00103c7 <KePanic(char const*)>
c0019702:	83 c4 10             	add    esp,0x10
c0019705:	8d 76 00             	lea    esi,[esi+0x0]
c0019708:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001970e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019711:	74 11                	je     c0019724 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0019713:	83 ec 0c             	sub    esp,0xc
c0019716:	68 83 10 02 c0       	push   0xc0021083
c001971b:	e8 a7 6c ff ff       	call   c00103c7 <KePanic(char const*)>
c0019720:	83 c4 10             	add    esp,0x10
c0019723:	90                   	nop
c0019724:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001972a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001972d:	74 11                	je     c0019740 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001972f:	83 ec 0c             	sub    esp,0xc
c0019732:	68 83 10 02 c0       	push   0xc0021083
c0019737:	e8 8b 6c ff ff       	call   c00103c7 <KePanic(char const*)>
c001973c:	83 c4 10             	add    esp,0x10
c001973f:	90                   	nop
c0019740:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0019743:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0019747:	7e 07                	jle    c0019750 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0019749:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001974d:	8d 76 00             	lea    esi,[esi+0x0]
c0019750:	85 f6                	test   esi,esi
c0019752:	7e 2c                	jle    c0019780 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0019754:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019758:	8d 3c 36             	lea    edi,[esi+esi*1]
c001975b:	31 c9                	xor    ecx,ecx
c001975d:	01 d7                	add    edi,edx
c001975f:	90                   	nop
c0019760:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0019763:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0019766:	85 c0                	test   eax,eax
c0019768:	79 06                	jns    c0019770 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001976a:	05 ff 7f 00 00       	add    eax,0x7fff
c001976f:	90                   	nop
c0019770:	c1 f8 0f             	sar    eax,0xf
c0019773:	83 c1 04             	add    ecx,0x4
c0019776:	66 01 02             	add    WORD PTR [edx],ax
c0019779:	83 c2 02             	add    edx,0x2
c001977c:	39 d7                	cmp    edi,edx
c001977e:	75 e0                	jne    c0019760 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0019780:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019783:	50                   	push   eax
c0019784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019787:	29 f0                	sub    eax,esi
c0019789:	c1 e0 02             	shl    eax,0x2
c001978c:	50                   	push   eax
c001978d:	8d 04 b2             	lea    eax,[edx+esi*4]
c0019790:	50                   	push   eax
c0019791:	52                   	push   edx
c0019792:	e8 39 6c fe ff       	call   c00003d0 <memmove>
c0019797:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001979a:	83 c4 10             	add    esp,0x10
c001979d:	89 f0                	mov    eax,esi
c001979f:	5b                   	pop    ebx
c00197a0:	5e                   	pop    esi
c00197a1:	5f                   	pop    edi
c00197a2:	c3                   	ret    
c00197a3:	90                   	nop

c00197a4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c00197a4:	57                   	push   edi
c00197a5:	56                   	push   esi
c00197a6:	53                   	push   ebx
c00197a7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00197ab:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00197af:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00197b3:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c00197b9:	39 06                	cmp    DWORD PTR [esi],eax
c00197bb:	74 13                	je     c00197d0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c00197bd:	83 ec 0c             	sub    esp,0xc
c00197c0:	68 64 10 02 c0       	push   0xc0021064
c00197c5:	e8 fd 6b ff ff       	call   c00103c7 <KePanic(char const*)>
c00197ca:	83 c4 10             	add    esp,0x10
c00197cd:	8d 76 00             	lea    esi,[esi+0x0]
c00197d0:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c00197d6:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c00197d9:	74 11                	je     c00197ec <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c00197db:	83 ec 0c             	sub    esp,0xc
c00197de:	68 9f 10 02 c0       	push   0xc002109f
c00197e3:	e8 df 6b ff ff       	call   c00103c7 <KePanic(char const*)>
c00197e8:	83 c4 10             	add    esp,0x10
c00197eb:	90                   	nop
c00197ec:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c00197f2:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c00197f5:	74 11                	je     c0019808 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c00197f7:	83 ec 0c             	sub    esp,0xc
c00197fa:	68 9f 10 02 c0       	push   0xc002109f
c00197ff:	e8 c3 6b ff ff       	call   c00103c7 <KePanic(char const*)>
c0019804:	83 c4 10             	add    esp,0x10
c0019807:	90                   	nop
c0019808:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001980b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001980f:	7e 07                	jle    c0019818 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0019811:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019815:	8d 76 00             	lea    esi,[esi+0x0]
c0019818:	85 ff                	test   edi,edi
c001981a:	7e 1c                	jle    c0019838 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001981c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0019823:	31 c0                	xor    eax,eax
c0019825:	8d 76 00             	lea    esi,[esi+0x0]
c0019828:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001982b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001982e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0019831:	83 c0 04             	add    eax,0x4
c0019834:	39 c1                	cmp    ecx,eax
c0019836:	75 f0                	jne    c0019828 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0019838:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001983b:	50                   	push   eax
c001983c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001983f:	29 f8                	sub    eax,edi
c0019841:	c1 e0 02             	shl    eax,0x2
c0019844:	50                   	push   eax
c0019845:	8d 04 ba             	lea    eax,[edx+edi*4]
c0019848:	50                   	push   eax
c0019849:	52                   	push   edx
c001984a:	e8 81 6b fe ff       	call   c00003d0 <memmove>
c001984f:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c0019852:	83 c4 10             	add    esp,0x10
c0019855:	89 f8                	mov    eax,edi
c0019857:	5b                   	pop    ebx
c0019858:	5e                   	pop    esi
c0019859:	5f                   	pop    edi
c001985a:	c3                   	ret    
c001985b:	90                   	nop

c001985c <PCI::open(int, int, void*)>:
c001985c:	83 ec 18             	sub    esp,0x18
c001985f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019863:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019867:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001986d:	8b 10                	mov    edx,DWORD PTR [eax]
c001986f:	50                   	push   eax
c0019870:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0019873:	31 c0                	xor    eax,eax
c0019875:	83 c4 1c             	add    esp,0x1c
c0019878:	c3                   	ret    
c0019879:	90                   	nop

c001987a <PCI::close(int, int, void*)>:
c001987a:	31 c0                	xor    eax,eax
c001987c:	c3                   	ret    
c001987d:	90                   	nop

c001987e <PCI::PCI()>:
c001987e:	83 ec 0c             	sub    esp,0xc
c0019881:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019885:	83 ec 08             	sub    esp,0x8
c0019888:	68 bb 10 02 c0       	push   0xc00210bb
c001988d:	50                   	push   eax
c001988e:	e8 05 1b ff ff       	call   c000b398 <Bus::Bus(char const*)>
c0019893:	83 c4 10             	add    esp,0x10
c0019896:	ba 64 11 02 c0       	mov    edx,0xc0021164
c001989b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001989f:	89 10                	mov    DWORD PTR [eax],edx
c00198a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00198a5:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c00198af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00198b3:	a3 40 7b 02 c0       	mov    ds:0xc0027b40,eax
c00198b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00198bc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00198c2:	31 d2                	xor    edx,edx
c00198c4:	88 c2                	mov    dl,al
c00198c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00198ca:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00198d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00198d5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00198db:	31 d2                	xor    edx,edx
c00198dd:	88 c2                	mov    dl,al
c00198df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00198e3:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00198e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00198ec:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00198f2:	8d 50 01             	lea    edx,[eax+0x1]
c00198f5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00198f9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00198ff:	31 d2                	xor    edx,edx
c0019901:	88 c2                	mov    dl,al
c0019903:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019907:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001990b:	83 c9 c0             	or     ecx,0xffffffc0
c001990e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0019912:	90                   	nop
c0019913:	83 c4 0c             	add    esp,0xc
c0019916:	c3                   	ret    
c0019917:	90                   	nop

c0019918 <PCI::readBAR8(unsigned int, int)>:
c0019918:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001991c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019920:	f6 c2 01             	test   dl,0x1
c0019923:	74 07                	je     c001992c <PCI::readBAR8(unsigned int, int)+0x14>
c0019925:	83 e2 fc             	and    edx,0xfffffffc
c0019928:	01 c2                	add    edx,eax
c001992a:	ec                   	in     al,dx
c001992b:	c3                   	ret    
c001992c:	83 e2 f0             	and    edx,0xfffffff0
c001992f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0019932:	c3                   	ret    
c0019933:	90                   	nop

c0019934 <PCI::readBAR16(unsigned int, int)>:
c0019934:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019938:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001993c:	f6 c2 01             	test   dl,0x1
c001993f:	74 08                	je     c0019949 <PCI::readBAR16(unsigned int, int)+0x15>
c0019941:	83 e2 fc             	and    edx,0xfffffffc
c0019944:	01 c2                	add    edx,eax
c0019946:	66 ed                	in     ax,dx
c0019948:	c3                   	ret    
c0019949:	83 e2 f0             	and    edx,0xfffffff0
c001994c:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0019950:	c3                   	ret    
c0019951:	90                   	nop

c0019952 <PCI::readBAR32(unsigned int, int)>:
c0019952:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019956:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001995a:	f6 c2 01             	test   dl,0x1
c001995d:	74 07                	je     c0019966 <PCI::readBAR32(unsigned int, int)+0x14>
c001995f:	83 e2 fc             	and    edx,0xfffffffc
c0019962:	01 c2                	add    edx,eax
c0019964:	ed                   	in     eax,dx
c0019965:	c3                   	ret    
c0019966:	83 e2 f0             	and    edx,0xfffffff0
c0019969:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001996c:	c3                   	ret    
c001996d:	90                   	nop

c001996e <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001996e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019972:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019976:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001997a:	f6 c2 01             	test   dl,0x1
c001997d:	74 07                	je     c0019986 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001997f:	83 e2 fc             	and    edx,0xfffffffc
c0019982:	01 ca                	add    edx,ecx
c0019984:	ee                   	out    dx,al
c0019985:	c3                   	ret    
c0019986:	83 e2 f0             	and    edx,0xfffffff0
c0019989:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001998c:	c3                   	ret    
c001998d:	90                   	nop

c001998e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001998e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019992:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019996:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001999a:	f6 c2 01             	test   dl,0x1
c001999d:	74 08                	je     c00199a7 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001999f:	83 e2 fc             	and    edx,0xfffffffc
c00199a2:	01 ca                	add    edx,ecx
c00199a4:	66 ef                	out    dx,ax
c00199a6:	c3                   	ret    
c00199a7:	83 e2 f0             	and    edx,0xfffffff0
c00199aa:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c00199ae:	c3                   	ret    
c00199af:	90                   	nop

c00199b0 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c00199b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00199b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199b8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00199bc:	f6 c2 01             	test   dl,0x1
c00199bf:	74 07                	je     c00199c8 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00199c1:	83 e2 fc             	and    edx,0xfffffffc
c00199c4:	01 ca                	add    edx,ecx
c00199c6:	ef                   	out    dx,eax
c00199c7:	c3                   	ret    
c00199c8:	83 e2 f0             	and    edx,0xfffffff0
c00199cb:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00199ce:	c3                   	ret    
c00199cf:	90                   	nop

c00199d0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00199d0:	55                   	push   ebp
c00199d1:	57                   	push   edi
c00199d2:	56                   	push   esi
c00199d3:	53                   	push   ebx
c00199d4:	83 ec 0c             	sub    esp,0xc
c00199d7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00199db:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00199df:	89 f0                	mov    eax,esi
c00199e1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00199e5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00199e9:	3c 07                	cmp    al,0x7
c00199eb:	76 10                	jbe    c00199fd <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00199ed:	83 ec 0c             	sub    esp,0xc
c00199f0:	68 c3 10 02 c0       	push   0xc00210c3
c00199f5:	e8 cd 69 ff ff       	call   c00103c7 <KePanic(char const*)>
c00199fa:	83 c4 10             	add    esp,0x10
c00199fd:	80 fb 0f             	cmp    bl,0xf
c0019a00:	76 10                	jbe    c0019a12 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0019a02:	83 ec 0c             	sub    esp,0xc
c0019a05:	68 f3 10 02 c0       	push   0xc00210f3
c0019a0a:	e8 b8 69 ff ff       	call   c00103c7 <KePanic(char const*)>
c0019a0f:	83 c4 10             	add    esp,0x10
c0019a12:	8d 04 36             	lea    eax,[esi+esi*1]
c0019a15:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019a1a:	83 c8 f0             	or     eax,0xfffffff0
c0019a1d:	ee                   	out    dx,al
c0019a1e:	ba fa 0c 00 00       	mov    edx,0xcfa
c0019a23:	89 e8                	mov    eax,ebp
c0019a25:	ee                   	out    dx,al
c0019a26:	83 c4 0c             	add    esp,0xc
c0019a29:	89 d8                	mov    eax,ebx
c0019a2b:	66 81 e7 fc 00       	and    di,0xfc
c0019a30:	5b                   	pop    ebx
c0019a31:	c1 e0 08             	shl    eax,0x8
c0019a34:	5e                   	pop    esi
c0019a35:	09 f8                	or     eax,edi
c0019a37:	5f                   	pop    edi
c0019a38:	66 0d 00 c0          	or     ax,0xc000
c0019a3c:	5d                   	pop    ebp
c0019a3d:	c3                   	ret    

c0019a3e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0019a3e:	57                   	push   edi
c0019a3f:	56                   	push   esi
c0019a40:	53                   	push   ebx
c0019a41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019a45:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019a49:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0019a4f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019a53:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019a57:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019a5b:	83 ff 01             	cmp    edi,0x1
c0019a5e:	75 3e                	jne    c0019a9e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0019a60:	89 de                	mov    esi,ebx
c0019a62:	0f b6 c0             	movzx  eax,al
c0019a65:	81 e6 fc 00 00 00    	and    esi,0xfc
c0019a6b:	c1 e0 10             	shl    eax,0x10
c0019a6e:	0f b6 c9             	movzx  ecx,cl
c0019a71:	09 f0                	or     eax,esi
c0019a73:	c1 e1 08             	shl    ecx,0x8
c0019a76:	0f b6 d2             	movzx  edx,dl
c0019a79:	09 c8                	or     eax,ecx
c0019a7b:	c1 e2 0b             	shl    edx,0xb
c0019a7e:	09 d0                	or     eax,edx
c0019a80:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019a85:	0d 00 00 00 80       	or     eax,0x80000000
c0019a8a:	ef                   	out    dx,eax
c0019a8b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0019a90:	ed                   	in     eax,dx
c0019a91:	83 e3 02             	and    ebx,0x2
c0019a94:	0f b6 cb             	movzx  ecx,bl
c0019a97:	c1 e1 03             	shl    ecx,0x3
c0019a9a:	d3 e8                	shr    eax,cl
c0019a9c:	eb 43                	jmp    c0019ae1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0019a9e:	83 ff 02             	cmp    edi,0x2
c0019aa1:	75 2c                	jne    c0019acf <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0019aa3:	83 ec 0c             	sub    esp,0xc
c0019aa6:	0f b6 c9             	movzx  ecx,cl
c0019aa9:	0f b6 d2             	movzx  edx,dl
c0019aac:	0f b6 fb             	movzx  edi,bl
c0019aaf:	0f b6 c0             	movzx  eax,al
c0019ab2:	57                   	push   edi
c0019ab3:	51                   	push   ecx
c0019ab4:	52                   	push   edx
c0019ab5:	50                   	push   eax
c0019ab6:	56                   	push   esi
c0019ab7:	e8 14 ff ff ff       	call   c00199d0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019abc:	89 c2                	mov    edx,eax
c0019abe:	ed                   	in     eax,dx
c0019abf:	83 e3 02             	and    ebx,0x2
c0019ac2:	83 c4 20             	add    esp,0x20
c0019ac5:	0f b6 cb             	movzx  ecx,bl
c0019ac8:	c1 e1 03             	shl    ecx,0x3
c0019acb:	d3 e8                	shr    eax,cl
c0019acd:	eb 12                	jmp    c0019ae1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0019acf:	83 ec 0c             	sub    esp,0xc
c0019ad2:	68 23 11 02 c0       	push   0xc0021123
c0019ad7:	e8 eb 68 ff ff       	call   c00103c7 <KePanic(char const*)>
c0019adc:	83 c4 10             	add    esp,0x10
c0019adf:	31 c0                	xor    eax,eax
c0019ae1:	5b                   	pop    ebx
c0019ae2:	5e                   	pop    esi
c0019ae3:	5f                   	pop    edi
c0019ae4:	c3                   	ret    
c0019ae5:	90                   	nop

c0019ae6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0019ae6:	83 ec 18             	sub    esp,0x18
c0019ae9:	6a 00                	push   0x0
c0019aeb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019af0:	50                   	push   eax
c0019af1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019af6:	50                   	push   eax
c0019af7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019afc:	50                   	push   eax
c0019afd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019b01:	e8 38 ff ff ff       	call   c0019a3e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019b06:	83 c4 2c             	add    esp,0x2c
c0019b09:	c3                   	ret    

c0019b0a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0019b0a:	83 ec 18             	sub    esp,0x18
c0019b0d:	6a 0e                	push   0xe
c0019b0f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019b14:	50                   	push   eax
c0019b15:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019b1a:	50                   	push   eax
c0019b1b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019b20:	50                   	push   eax
c0019b21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019b25:	e8 14 ff ff ff       	call   c0019a3e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019b2a:	83 c4 2c             	add    esp,0x2c
c0019b2d:	0f b6 c0             	movzx  eax,al
c0019b30:	c3                   	ret    
c0019b31:	90                   	nop

c0019b32 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0019b32:	55                   	push   ebp
c0019b33:	57                   	push   edi
c0019b34:	56                   	push   esi
c0019b35:	53                   	push   ebx
c0019b36:	83 ec 18             	sub    esp,0x18
c0019b39:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0019b3e:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0019b43:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0019b48:	6a 0a                	push   0xa
c0019b4a:	56                   	push   esi
c0019b4b:	55                   	push   ebp
c0019b4c:	57                   	push   edi
c0019b4d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019b51:	e8 e8 fe ff ff       	call   c0019a3e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019b56:	83 c4 14             	add    esp,0x14
c0019b59:	89 c3                	mov    ebx,eax
c0019b5b:	6a 0a                	push   0xa
c0019b5d:	0f b6 db             	movzx  ebx,bl
c0019b60:	56                   	push   esi
c0019b61:	55                   	push   ebp
c0019b62:	57                   	push   edi
c0019b63:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019b67:	e8 d2 fe ff ff       	call   c0019a3e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019b6c:	83 c4 2c             	add    esp,0x2c
c0019b6f:	25 00 ff 00 00       	and    eax,0xff00
c0019b74:	09 d8                	or     eax,ebx
c0019b76:	5b                   	pop    ebx
c0019b77:	5e                   	pop    esi
c0019b78:	5f                   	pop    edi
c0019b79:	5d                   	pop    ebp
c0019b7a:	c3                   	ret    
c0019b7b:	90                   	nop

c0019b7c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0019b7c:	83 ec 18             	sub    esp,0x18
c0019b7f:	6a 08                	push   0x8
c0019b81:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019b86:	50                   	push   eax
c0019b87:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019b8c:	50                   	push   eax
c0019b8d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019b92:	50                   	push   eax
c0019b93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019b97:	e8 a2 fe ff ff       	call   c0019a3e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019b9c:	83 c4 2c             	add    esp,0x2c
c0019b9f:	0f b6 c4             	movzx  eax,ah
c0019ba2:	c3                   	ret    
c0019ba3:	90                   	nop

c0019ba4 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0019ba4:	83 ec 18             	sub    esp,0x18
c0019ba7:	6a 08                	push   0x8
c0019ba9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019bae:	50                   	push   eax
c0019baf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019bb4:	50                   	push   eax
c0019bb5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019bba:	50                   	push   eax
c0019bbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019bbf:	e8 7a fe ff ff       	call   c0019a3e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019bc4:	83 c4 2c             	add    esp,0x2c
c0019bc7:	c3                   	ret    

c0019bc8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0019bc8:	83 ec 18             	sub    esp,0x18
c0019bcb:	6a 3c                	push   0x3c
c0019bcd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019bd2:	50                   	push   eax
c0019bd3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019bd8:	50                   	push   eax
c0019bd9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019bde:	50                   	push   eax
c0019bdf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019be3:	e8 56 fe ff ff       	call   c0019a3e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019be8:	83 c4 2c             	add    esp,0x2c
c0019beb:	c3                   	ret    

c0019bec <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0019bec:	83 ec 18             	sub    esp,0x18
c0019bef:	6a 18                	push   0x18
c0019bf1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019bf6:	50                   	push   eax
c0019bf7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019bfc:	50                   	push   eax
c0019bfd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c02:	50                   	push   eax
c0019c03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019c07:	e8 32 fe ff ff       	call   c0019a3e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019c0c:	83 c4 2c             	add    esp,0x2c
c0019c0f:	0f b6 c4             	movzx  eax,ah
c0019c12:	c3                   	ret    
c0019c13:	90                   	nop

c0019c14 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0019c14:	55                   	push   ebp
c0019c15:	57                   	push   edi
c0019c16:	56                   	push   esi
c0019c17:	53                   	push   ebx
c0019c18:	83 ec 28             	sub    esp,0x28
c0019c1b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0019c1f:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0019c24:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0019c29:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0019c2e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0019c35:	8d 43 12             	lea    eax,[ebx+0x12]
c0019c38:	83 c3 10             	add    ebx,0x10
c0019c3b:	0f b6 c0             	movzx  eax,al
c0019c3e:	0f b6 db             	movzx  ebx,bl
c0019c41:	50                   	push   eax
c0019c42:	51                   	push   ecx
c0019c43:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0019c47:	57                   	push   edi
c0019c48:	55                   	push   ebp
c0019c49:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019c4d:	e8 ec fd ff ff       	call   c0019a3e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019c52:	83 c4 14             	add    esp,0x14
c0019c55:	89 c6                	mov    esi,eax
c0019c57:	53                   	push   ebx
c0019c58:	c1 e6 10             	shl    esi,0x10
c0019c5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019c5f:	51                   	push   ecx
c0019c60:	57                   	push   edi
c0019c61:	55                   	push   ebp
c0019c62:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019c66:	e8 d3 fd ff ff       	call   c0019a3e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019c6b:	83 c4 3c             	add    esp,0x3c
c0019c6e:	0f b7 c0             	movzx  eax,ax
c0019c71:	5b                   	pop    ebx
c0019c72:	09 f0                	or     eax,esi
c0019c74:	5e                   	pop    esi
c0019c75:	5f                   	pop    edi
c0019c76:	5d                   	pop    ebp
c0019c77:	c3                   	ret    

c0019c78 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0019c78:	55                   	push   ebp
c0019c79:	57                   	push   edi
c0019c7a:	56                   	push   esi
c0019c7b:	53                   	push   ebx
c0019c7c:	83 ec 0c             	sub    esp,0xc
c0019c7f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0019c83:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019c87:	89 f5                	mov    ebp,esi
c0019c89:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0019c8f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019c93:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019c97:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019c9b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019c9f:	83 f9 01             	cmp    ecx,0x1
c0019ca2:	75 5d                	jne    c0019d01 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0019ca4:	0f b6 c8             	movzx  ecx,al
c0019ca7:	0f b6 d2             	movzx  edx,dl
c0019caa:	c1 e1 10             	shl    ecx,0x10
c0019cad:	c1 e2 0b             	shl    edx,0xb
c0019cb0:	89 f0                	mov    eax,esi
c0019cb2:	25 fc 00 00 00       	and    eax,0xfc
c0019cb7:	09 c1                	or     ecx,eax
c0019cb9:	89 e8                	mov    eax,ebp
c0019cbb:	0f b6 c0             	movzx  eax,al
c0019cbe:	c1 e0 08             	shl    eax,0x8
c0019cc1:	09 c1                	or     ecx,eax
c0019cc3:	09 d1                	or     ecx,edx
c0019cc5:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019cca:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0019cd0:	89 c8                	mov    eax,ecx
c0019cd2:	ef                   	out    dx,eax
c0019cd3:	ba fc 0c 00 00       	mov    edx,0xcfc
c0019cd8:	ed                   	in     eax,dx
c0019cd9:	0f b7 db             	movzx  ebx,bx
c0019cdc:	83 e6 02             	and    esi,0x2
c0019cdf:	74 0a                	je     c0019ceb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0019ce1:	0f b7 d0             	movzx  edx,ax
c0019ce4:	c1 e3 10             	shl    ebx,0x10
c0019ce7:	09 d3                	or     ebx,edx
c0019ce9:	eb 05                	jmp    c0019cf0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0019ceb:	66 31 c0             	xor    ax,ax
c0019cee:	09 c3                	or     ebx,eax
c0019cf0:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019cf5:	89 c8                	mov    eax,ecx
c0019cf7:	ef                   	out    dx,eax
c0019cf8:	ba fc 0c 00 00       	mov    edx,0xcfc
c0019cfd:	89 d8                	mov    eax,ebx
c0019cff:	eb 41                	jmp    c0019d42 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0019d01:	83 f9 02             	cmp    ecx,0x2
c0019d04:	75 45                	jne    c0019d4b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0019d06:	83 ec 0c             	sub    esp,0xc
c0019d09:	0f b6 d2             	movzx  edx,dl
c0019d0c:	89 f1                	mov    ecx,esi
c0019d0e:	0f b6 c0             	movzx  eax,al
c0019d11:	0f b6 f1             	movzx  esi,cl
c0019d14:	89 e9                	mov    ecx,ebp
c0019d16:	56                   	push   esi
c0019d17:	0f b6 c9             	movzx  ecx,cl
c0019d1a:	51                   	push   ecx
c0019d1b:	52                   	push   edx
c0019d1c:	50                   	push   eax
c0019d1d:	57                   	push   edi
c0019d1e:	e8 ad fc ff ff       	call   c00199d0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019d23:	89 c2                	mov    edx,eax
c0019d25:	ed                   	in     eax,dx
c0019d26:	83 c4 20             	add    esp,0x20
c0019d29:	0f b7 db             	movzx  ebx,bx
c0019d2c:	f6 c2 02             	test   dl,0x2
c0019d2f:	74 0c                	je     c0019d3d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0019d31:	0f b7 c8             	movzx  ecx,ax
c0019d34:	89 d8                	mov    eax,ebx
c0019d36:	c1 e0 10             	shl    eax,0x10
c0019d39:	09 c8                	or     eax,ecx
c0019d3b:	eb 05                	jmp    c0019d42 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0019d3d:	66 31 c0             	xor    ax,ax
c0019d40:	09 d8                	or     eax,ebx
c0019d42:	ef                   	out    dx,eax
c0019d43:	83 c4 0c             	add    esp,0xc
c0019d46:	5b                   	pop    ebx
c0019d47:	5e                   	pop    esi
c0019d48:	5f                   	pop    edi
c0019d49:	5d                   	pop    ebp
c0019d4a:	c3                   	ret    
c0019d4b:	c7 44 24 20 23 11 02 c0 	mov    DWORD PTR [esp+0x20],0xc0021123
c0019d53:	83 c4 0c             	add    esp,0xc
c0019d56:	5b                   	pop    ebx
c0019d57:	5e                   	pop    esi
c0019d58:	5f                   	pop    edi
c0019d59:	5d                   	pop    ebp
c0019d5a:	e9 68 66 ff ff       	jmp    c00103c7 <KePanic(char const*)>
c0019d5f:	90                   	nop

c0019d60 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0019d60:	55                   	push   ebp
c0019d61:	57                   	push   edi
c0019d62:	56                   	push   esi
c0019d63:	53                   	push   ebx
c0019d64:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019d6a:	80 3d 4c 7b 02 c0 00 	cmp    BYTE PTR ds:0xc0027b4c,0x0
c0019d71:	0f 85 bd 00 00 00    	jne    c0019e34 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xd4>
c0019d77:	83 ec 0c             	sub    esp,0xc
c0019d7a:	68 14 01 00 00       	push   0x114
c0019d7f:	e8 e1 da fe ff       	call   c0007865 <malloc>
c0019d84:	83 c4 0c             	add    esp,0xc
c0019d87:	89 c3                	mov    ebx,eax
c0019d89:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0019d8f:	68 29 11 02 c0       	push   0xc0021129
c0019d94:	50                   	push   eax
c0019d95:	e8 e2 0d ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c0019d9a:	83 c4 10             	add    esp,0x10
c0019d9d:	85 db                	test   ebx,ebx
c0019d9f:	0f 84 47 02 00 00    	je     c0019fec <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c0019da5:	56                   	push   esi
c0019da6:	56                   	push   esi
c0019da7:	6a 01                	push   0x1
c0019da9:	53                   	push   ebx
c0019daa:	e8 8d 0e ff ff       	call   c000ac3c <File::open(FileOpenMode)>
c0019daf:	83 c4 10             	add    esp,0x10
c0019db2:	85 c0                	test   eax,eax
c0019db4:	0f 85 32 02 00 00    	jne    c0019fec <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c0019dba:	52                   	push   edx
c0019dbb:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0019dbf:	50                   	push   eax
c0019dc0:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019dc4:	50                   	push   eax
c0019dc5:	53                   	push   ebx
c0019dc6:	e8 1d 11 ff ff       	call   c000aee8 <File::stat(unsigned long long*, bool*)>
c0019dcb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019dcf:	40                   	inc    eax
c0019dd0:	89 04 24             	mov    DWORD PTR [esp],eax
c0019dd3:	e8 8d da fe ff       	call   c0007865 <malloc>
c0019dd8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019ddc:	a3 48 7b 02 c0       	mov    ds:0xc0027b48,eax
c0019de1:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0019de5:	59                   	pop    ecx
c0019de6:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019de8:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0019dec:	51                   	push   ecx
c0019ded:	50                   	push   eax
c0019dee:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0019df2:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0019df6:	53                   	push   ebx
c0019df7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019dfa:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0019dfe:	83 c4 20             	add    esp,0x20
c0019e01:	89 c8                	mov    eax,ecx
c0019e03:	99                   	cdq    
c0019e04:	3b 54 24 24          	cmp    edx,DWORD PTR [esp+0x24]
c0019e08:	0f 85 de 01 00 00    	jne    c0019fec <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c0019e0e:	3b 4c 24 20          	cmp    ecx,DWORD PTR [esp+0x20]
c0019e12:	0f 85 d4 01 00 00    	jne    c0019fec <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c0019e18:	83 ec 0c             	sub    esp,0xc
c0019e1b:	53                   	push   ebx
c0019e1c:	e8 79 0e ff ff       	call   c000ac9a <File::close()>
c0019e21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019e25:	c6 05 4c 7b 02 c0 01 	mov    BYTE PTR ds:0xc0027b4c,0x1
c0019e2c:	a3 44 7b 02 c0       	mov    ds:0xc0027b44,eax
c0019e31:	83 c4 10             	add    esp,0x10
c0019e34:	a1 44 7b 02 c0       	mov    eax,ds:0xc0027b44
c0019e39:	8b 15 48 7b 02 c0    	mov    edx,DWORD PTR ds:0xc0027b48
c0019e3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e42:	31 ff                	xor    edi,edi
c0019e44:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0019e4c:	31 f6                	xor    esi,esi
c0019e4e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0019e53:	31 db                	xor    ebx,ebx
c0019e55:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0019e5d:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0019e62:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0019e69:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0019e6d:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0019e74:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0019e78:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0019e7b:	0f 8e 6b 01 00 00    	jle    c0019fec <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c0019e81:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0019e84:	d4 40                	aam    0x40
c0019e86:	d5 39                	aad    0x39
c0019e88:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019e8c:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0019e90:	d4 40                	aam    0x40
c0019e92:	d5 39                	aad    0x39
c0019e94:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0019e98:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0019e9c:	d4 40                	aam    0x40
c0019e9e:	d5 39                	aad    0x39
c0019ea0:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0019ea4:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0019ea8:	d4 40                	aam    0x40
c0019eaa:	d5 39                	aad    0x39
c0019eac:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019eb0:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0019eb4:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0019eb8:	3c 56                	cmp    al,0x56
c0019eba:	74 45                	je     c0019f01 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a1>
c0019ebc:	d4 40                	aam    0x40
c0019ebe:	d5 39                	aad    0x39
c0019ec0:	8d 48 d0             	lea    ecx,[eax-0x30]
c0019ec3:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0019ec7:	0f b6 c9             	movzx  ecx,cl
c0019eca:	c1 e1 04             	shl    ecx,0x4
c0019ecd:	d4 40                	aam    0x40
c0019ecf:	d5 39                	aad    0x39
c0019ed1:	8d 58 d0             	lea    ebx,[eax-0x30]
c0019ed4:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0019ed8:	0f b6 db             	movzx  ebx,bl
c0019edb:	09 cb                	or     ebx,ecx
c0019edd:	c1 e3 04             	shl    ebx,0x4
c0019ee0:	d4 40                	aam    0x40
c0019ee2:	d5 39                	aad    0x39
c0019ee4:	8d 48 d0             	lea    ecx,[eax-0x30]
c0019ee7:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0019eeb:	0f b6 c9             	movzx  ecx,cl
c0019eee:	09 cb                	or     ebx,ecx
c0019ef0:	c1 e3 04             	shl    ebx,0x4
c0019ef3:	89 d9                	mov    ecx,ebx
c0019ef5:	d4 40                	aam    0x40
c0019ef7:	d5 39                	aad    0x39
c0019ef9:	8d 58 d0             	lea    ebx,[eax-0x30]
c0019efc:	0f b6 db             	movzx  ebx,bl
c0019eff:	09 cb                	or     ebx,ecx
c0019f01:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0019f05:	80 f9 58             	cmp    cl,0x58
c0019f08:	74 47                	je     c0019f51 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f1>
c0019f0a:	88 c8                	mov    al,cl
c0019f0c:	d4 40                	aam    0x40
c0019f0e:	d5 39                	aad    0x39
c0019f10:	83 e8 30             	sub    eax,0x30
c0019f13:	0f b6 e8             	movzx  ebp,al
c0019f16:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0019f1a:	c1 e5 04             	shl    ebp,0x4
c0019f1d:	d4 40                	aam    0x40
c0019f1f:	d5 39                	aad    0x39
c0019f21:	83 e8 30             	sub    eax,0x30
c0019f24:	0f b6 f0             	movzx  esi,al
c0019f27:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0019f2b:	09 ee                	or     esi,ebp
c0019f2d:	c1 e6 04             	shl    esi,0x4
c0019f30:	d4 40                	aam    0x40
c0019f32:	d5 39                	aad    0x39
c0019f34:	83 e8 30             	sub    eax,0x30
c0019f37:	0f b6 e8             	movzx  ebp,al
c0019f3a:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0019f3e:	09 ee                	or     esi,ebp
c0019f40:	c1 e6 04             	shl    esi,0x4
c0019f43:	89 f5                	mov    ebp,esi
c0019f45:	d4 40                	aam    0x40
c0019f47:	d5 39                	aad    0x39
c0019f49:	83 e8 30             	sub    eax,0x30
c0019f4c:	0f b6 f0             	movzx  esi,al
c0019f4f:	09 ee                	or     esi,ebp
c0019f51:	83 c7 10             	add    edi,0x10
c0019f54:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0019f58:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0019f5b:	3c 0a                	cmp    al,0xa
c0019f5d:	74 09                	je     c0019f68 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x208>
c0019f5f:	45                   	inc    ebp
c0019f60:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0019f63:	75 16                	jne    c0019f7b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x21b>
c0019f65:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0019f68:	3c 0a                	cmp    al,0xa
c0019f6a:	0f 94 c0             	sete   al
c0019f6d:	0f b6 c0             	movzx  eax,al
c0019f70:	01 c7                	add    edi,eax
c0019f72:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0019f77:	75 0c                	jne    c0019f85 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x225>
c0019f79:	eb 15                	jmp    c0019f90 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x230>
c0019f7b:	47                   	inc    edi
c0019f7c:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0019f7f:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0019f83:	eb d3                	jmp    c0019f58 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f8>
c0019f85:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0019f8a:	0f 85 e8 fe ff ff    	jne    c0019e78 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x118>
c0019f90:	80 f9 58             	cmp    cl,0x58
c0019f93:	74 0b                	je     c0019fa0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x240>
c0019f95:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0019f9a:	0f 85 d8 fe ff ff    	jne    c0019e78 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x118>
c0019fa0:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0019fa4:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0019fa8:	c1 e1 04             	shl    ecx,0x4
c0019fab:	83 e8 30             	sub    eax,0x30
c0019fae:	09 c8                	or     eax,ecx
c0019fb0:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0019fb4:	0f 85 be fe ff ff    	jne    c0019e78 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x118>
c0019fba:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0019fbe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019fc2:	c1 e1 04             	shl    ecx,0x4
c0019fc5:	83 e8 30             	sub    eax,0x30
c0019fc8:	09 c8                	or     eax,ecx
c0019fca:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0019fce:	0f 85 a4 fe ff ff    	jne    c0019e78 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x118>
c0019fd4:	50                   	push   eax
c0019fd5:	50                   	push   eax
c0019fd6:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019fda:	50                   	push   eax
c0019fdb:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0019fe2:	e8 09 66 fe ff       	call   c00005f0 <strcpy>
c0019fe7:	83 c4 10             	add    esp,0x10
c0019fea:	eb 15                	jmp    c001a001 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a1>
c0019fec:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0019ff3:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0019ffe:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a001:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001a008:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a00e:	5b                   	pop    ebx
c001a00f:	5e                   	pop    esi
c001a010:	5f                   	pop    edi
c001a011:	5d                   	pop    ebp
c001a012:	c3                   	ret    
c001a013:	90                   	nop

c001a014 <PCI::checkBus(unsigned char)>:
c001a014:	56                   	push   esi
c001a015:	53                   	push   ebx
c001a016:	31 f6                	xor    esi,esi
c001a018:	51                   	push   ecx
c001a019:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c001a01d:	0f b6 c3             	movzx  eax,bl
c001a020:	52                   	push   edx
c001a021:	56                   	push   esi
c001a022:	46                   	inc    esi
c001a023:	50                   	push   eax
c001a024:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a028:	e8 f3 02 00 00       	call   c001a320 <PCI::checkDevice(unsigned char, unsigned char)>
c001a02d:	83 c4 10             	add    esp,0x10
c001a030:	83 fe 20             	cmp    esi,0x20
c001a033:	75 e8                	jne    c001a01d <PCI::checkBus(unsigned char)+0x9>
c001a035:	58                   	pop    eax
c001a036:	5b                   	pop    ebx
c001a037:	5e                   	pop    esi
c001a038:	c3                   	ret    
c001a039:	90                   	nop

c001a03a <PCI::foundDevice(PCIDeviceInfo)>:
c001a03a:	55                   	push   ebp
c001a03b:	57                   	push   edi
c001a03c:	56                   	push   esi
c001a03d:	53                   	push   ebx
c001a03e:	83 ec 1c             	sub    esp,0x1c
c001a041:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a045:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001a04b:	0f 84 52 01 00 00    	je     c001a1a3 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001a051:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001a055:	66 81 f9 06 04       	cmp    cx,0x406
c001a05a:	75 2c                	jne    c001a088 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001a05c:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001a061:	50                   	push   eax
c001a062:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001a067:	50                   	push   eax
c001a068:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001a06d:	50                   	push   eax
c001a06e:	56                   	push   esi
c001a06f:	e8 78 fb ff ff       	call   c0019bec <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001a074:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001a078:	0f b6 c0             	movzx  eax,al
c001a07b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a07f:	83 c4 2c             	add    esp,0x2c
c001a082:	5b                   	pop    ebx
c001a083:	5e                   	pop    esi
c001a084:	5f                   	pop    edi
c001a085:	5d                   	pop    ebp
c001a086:	eb 8c                	jmp    c001a014 <PCI::checkBus(unsigned char)>
c001a088:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001a08c:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001a092:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a096:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001a09a:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001a09e:	88 d3                	mov    bl,dl
c001a0a0:	85 c0                	test   eax,eax
c001a0a2:	74 33                	je     c001a0d7 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a0a4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001a0a7:	85 d2                	test   edx,edx
c001a0a9:	74 28                	je     c001a0d3 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001a0ab:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001a0b1:	31 ef                	xor    edi,ebp
c001a0b3:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001a0b9:	75 18                	jne    c001a0d3 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001a0bb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001a0bf:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001a0c5:	75 0c                	jne    c001a0d3 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001a0c7:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001a0cd:	0f 84 d0 00 00 00    	je     c001a1a3 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001a0d3:	8b 00                	mov    eax,DWORD PTR [eax]
c001a0d5:	eb c9                	jmp    c001a0a0 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001a0d7:	66 81 f9 01 06       	cmp    cx,0x601
c001a0dc:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001a0e0:	75 19                	jne    c001a0fb <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001a0e2:	83 ec 0c             	sub    esp,0xc
c001a0e5:	68 64 01 00 00       	push   0x164
c001a0ea:	e8 76 d7 fe ff       	call   c0007865 <malloc>
c001a0ef:	89 c5                	mov    ebp,eax
c001a0f1:	89 04 24             	mov    DWORD PTR [esp],eax
c001a0f4:	e8 47 0e 00 00       	call   c001af40 <SATABus::SATABus()>
c001a0f9:	eb 1e                	jmp    c001a119 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001a0fb:	66 81 f9 01 01       	cmp    cx,0x101
c001a100:	75 60                	jne    c001a162 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c001a102:	83 ec 0c             	sub    esp,0xc
c001a105:	68 70 02 00 00       	push   0x270
c001a10a:	e8 56 d7 fe ff       	call   c0007865 <malloc>
c001a10f:	89 c5                	mov    ebp,eax
c001a111:	89 04 24             	mov    DWORD PTR [esp],eax
c001a114:	e8 cb 02 00 00       	call   c001a3e4 <IDE::IDE()>
c001a119:	58                   	pop    eax
c001a11a:	5a                   	pop    edx
c001a11b:	55                   	push   ebp
c001a11c:	56                   	push   esi
c001a11d:	e8 22 19 ff ff       	call   c000ba44 <Device::addChild(Device*)>
c001a122:	83 ec 1c             	sub    esp,0x1c
c001a125:	b9 09 00 00 00       	mov    ecx,0x9
c001a12a:	fc                   	cld    
c001a12b:	89 e7                	mov    edi,esp
c001a12d:	89 de                	mov    esi,ebx
c001a12f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a131:	55                   	push   ebp
c001a132:	e8 53 18 ff ff       	call   c000b98a <Device::preOpenPCI(PCIDeviceInfo)>
c001a137:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a13a:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001a13e:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001a146:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001a14e:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001a156:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001a159:	83 c4 4c             	add    esp,0x4c
c001a15c:	5b                   	pop    ebx
c001a15d:	5e                   	pop    esi
c001a15e:	5f                   	pop    edi
c001a15f:	5d                   	pop    ebp
c001a160:	ff e0                	jmp    eax
c001a162:	83 ec 0c             	sub    esp,0xc
c001a165:	68 58 01 00 00       	push   0x158
c001a16a:	e8 f6 d6 fe ff       	call   c0007865 <malloc>
c001a16f:	89 c5                	mov    ebp,eax
c001a171:	58                   	pop    eax
c001a172:	5a                   	pop    edx
c001a173:	68 42 11 02 c0       	push   0xc0021142
c001a178:	55                   	push   ebp
c001a179:	e8 64 1b ff ff       	call   c000bce2 <DriverlessDevice::DriverlessDevice(char const*)>
c001a17e:	59                   	pop    ecx
c001a17f:	5f                   	pop    edi
c001a180:	55                   	push   ebp
c001a181:	56                   	push   esi
c001a182:	e8 bd 18 ff ff       	call   c000ba44 <Device::addChild(Device*)>
c001a187:	b9 09 00 00 00       	mov    ecx,0x9
c001a18c:	fc                   	cld    
c001a18d:	89 df                	mov    edi,ebx
c001a18f:	89 de                	mov    esi,ebx
c001a191:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a193:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001a197:	83 c4 2c             	add    esp,0x2c
c001a19a:	5b                   	pop    ebx
c001a19b:	5e                   	pop    esi
c001a19c:	5f                   	pop    edi
c001a19d:	5d                   	pop    ebp
c001a19e:	e9 e7 17 ff ff       	jmp    c000b98a <Device::preOpenPCI(PCIDeviceInfo)>
c001a1a3:	83 c4 1c             	add    esp,0x1c
c001a1a6:	5b                   	pop    ebx
c001a1a7:	5e                   	pop    esi
c001a1a8:	5f                   	pop    edi
c001a1a9:	5d                   	pop    ebp
c001a1aa:	c3                   	ret    
c001a1ab:	90                   	nop

c001a1ac <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001a1ac:	55                   	push   ebp
c001a1ad:	57                   	push   edi
c001a1ae:	56                   	push   esi
c001a1af:	53                   	push   ebx
c001a1b0:	83 ec 68             	sub    esp,0x68
c001a1b3:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001a1b7:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a1be:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a1c2:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a1c9:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001a1ce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a1d2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a1d9:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c001a1de:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a1e2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001a1e7:	6a 0c                	push   0xc
c001a1e9:	57                   	push   edi
c001a1ea:	53                   	push   ebx
c001a1eb:	56                   	push   esi
c001a1ec:	55                   	push   ebp
c001a1ed:	e8 4c f8 ff ff       	call   c0019a3e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a1f2:	83 c4 20             	add    esp,0x20
c001a1f5:	57                   	push   edi
c001a1f6:	53                   	push   ebx
c001a1f7:	56                   	push   esi
c001a1f8:	55                   	push   ebp
c001a1f9:	e8 34 f9 ff ff       	call   c0019b32 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001a1fe:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c001a203:	57                   	push   edi
c001a204:	53                   	push   ebx
c001a205:	56                   	push   esi
c001a206:	55                   	push   ebp
c001a207:	e8 bc f9 ff ff       	call   c0019bc8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001a20c:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001a210:	83 c4 14             	add    esp,0x14
c001a213:	6a 3c                	push   0x3c
c001a215:	57                   	push   edi
c001a216:	53                   	push   ebx
c001a217:	56                   	push   esi
c001a218:	55                   	push   ebp
c001a219:	e8 20 f8 ff ff       	call   c0019a3e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a21e:	0f b6 c4             	movzx  eax,ah
c001a221:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a225:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001a229:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001a22d:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001a232:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001a238:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001a23e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a242:	83 c4 20             	add    esp,0x20
c001a245:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a24a:	74 30                	je     c001a27c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001a24c:	31 c0                	xor    eax,eax
c001a24e:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001a252:	7e 28                	jle    c001a27c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001a254:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001a25c:	39 cb                	cmp    ebx,ecx
c001a25e:	75 19                	jne    c001a279 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001a260:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001a268:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001a26c:	75 0b                	jne    c001a279 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001a26e:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001a275:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c001a279:	40                   	inc    eax
c001a27a:	eb d2                	jmp    c001a24e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001a27c:	31 d2                	xor    edx,edx
c001a27e:	83 ec 0c             	sub    esp,0xc
c001a281:	57                   	push   edi
c001a282:	53                   	push   ebx
c001a283:	56                   	push   esi
c001a284:	52                   	push   edx
c001a285:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001a289:	55                   	push   ebp
c001a28a:	e8 85 f9 ff ff       	call   c0019c14 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a28f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a293:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001a297:	42                   	inc    edx
c001a298:	83 c4 20             	add    esp,0x20
c001a29b:	83 fa 06             	cmp    edx,0x6
c001a29e:	75 de                	jne    c001a27e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001a2a0:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001a2a5:	83 ec 0c             	sub    esp,0xc
c001a2a8:	86 e0                	xchg   al,ah
c001a2aa:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001a2af:	6a 02                	push   0x2
c001a2b1:	57                   	push   edi
c001a2b2:	53                   	push   ebx
c001a2b3:	56                   	push   esi
c001a2b4:	55                   	push   ebp
c001a2b5:	e8 84 f7 ff ff       	call   c0019a3e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a2ba:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001a2bf:	83 c4 20             	add    esp,0x20
c001a2c2:	57                   	push   edi
c001a2c3:	53                   	push   ebx
c001a2c4:	56                   	push   esi
c001a2c5:	55                   	push   ebp
c001a2c6:	e8 b1 f8 ff ff       	call   c0019b7c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001a2cb:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001a2cf:	57                   	push   edi
c001a2d0:	53                   	push   ebx
c001a2d1:	56                   	push   esi
c001a2d2:	55                   	push   ebp
c001a2d3:	e8 0e f8 ff ff       	call   c0019ae6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a2d8:	b9 09 00 00 00       	mov    ecx,0x9
c001a2dd:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001a2e2:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c001a2e6:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001a2ea:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001a2ee:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001a2f2:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001a2f6:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001a2fa:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001a2fe:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001a302:	83 ec 0c             	sub    esp,0xc
c001a305:	fc                   	cld    
c001a306:	89 e7                	mov    edi,esp
c001a308:	8d 74 24 58          	lea    esi,[esp+0x58]
c001a30c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a30e:	55                   	push   ebp
c001a30f:	e8 26 fd ff ff       	call   c001a03a <PCI::foundDevice(PCIDeviceInfo)>
c001a314:	81 c4 8c 00 00 00    	add    esp,0x8c
c001a31a:	5b                   	pop    ebx
c001a31b:	5e                   	pop    esi
c001a31c:	5f                   	pop    edi
c001a31d:	5d                   	pop    ebp
c001a31e:	c3                   	ret    
c001a31f:	90                   	nop

c001a320 <PCI::checkDevice(unsigned char, unsigned char)>:
c001a320:	55                   	push   ebp
c001a321:	57                   	push   edi
c001a322:	56                   	push   esi
c001a323:	53                   	push   ebx
c001a324:	83 ec 0c             	sub    esp,0xc
c001a327:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001a32b:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001a330:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001a335:	6a 00                	push   0x0
c001a337:	56                   	push   esi
c001a338:	57                   	push   edi
c001a339:	55                   	push   ebp
c001a33a:	e8 a7 f7 ff ff       	call   c0019ae6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a33f:	6a 00                	push   0x0
c001a341:	56                   	push   esi
c001a342:	57                   	push   edi
c001a343:	55                   	push   ebp
c001a344:	e8 63 fe ff ff       	call   c001a1ac <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001a349:	83 c4 20             	add    esp,0x20
c001a34c:	6a 00                	push   0x0
c001a34e:	56                   	push   esi
c001a34f:	57                   	push   edi
c001a350:	55                   	push   ebp
c001a351:	e8 b4 f7 ff ff       	call   c0019b0a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001a356:	83 c4 10             	add    esp,0x10
c001a359:	84 c0                	test   al,al
c001a35b:	79 27                	jns    c001a384 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001a35d:	bb 01 00 00 00       	mov    ebx,0x1
c001a362:	53                   	push   ebx
c001a363:	56                   	push   esi
c001a364:	57                   	push   edi
c001a365:	55                   	push   ebp
c001a366:	e8 7b f7 ff ff       	call   c0019ae6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a36b:	83 c4 10             	add    esp,0x10
c001a36e:	66 40                	inc    ax
c001a370:	74 0c                	je     c001a37e <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001a372:	53                   	push   ebx
c001a373:	56                   	push   esi
c001a374:	57                   	push   edi
c001a375:	55                   	push   ebp
c001a376:	e8 31 fe ff ff       	call   c001a1ac <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001a37b:	83 c4 10             	add    esp,0x10
c001a37e:	43                   	inc    ebx
c001a37f:	83 fb 08             	cmp    ebx,0x8
c001a382:	75 de                	jne    c001a362 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001a384:	83 c4 0c             	add    esp,0xc
c001a387:	5b                   	pop    ebx
c001a388:	5e                   	pop    esi
c001a389:	5f                   	pop    edi
c001a38a:	5d                   	pop    ebp
c001a38b:	c3                   	ret    

c001a38c <PCI::detect()>:
c001a38c:	56                   	push   esi
c001a38d:	53                   	push   ebx
c001a38e:	53                   	push   ebx
c001a38f:	31 db                	xor    ebx,ebx
c001a391:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a395:	6a 00                	push   0x0
c001a397:	6a 00                	push   0x0
c001a399:	6a 00                	push   0x0
c001a39b:	56                   	push   esi
c001a39c:	e8 69 f7 ff ff       	call   c0019b0a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001a3a1:	83 c4 10             	add    esp,0x10
c001a3a4:	a8 80                	test   al,0x80
c001a3a6:	75 21                	jne    c001a3c9 <PCI::detect()+0x3d>
c001a3a8:	51                   	push   ecx
c001a3a9:	51                   	push   ecx
c001a3aa:	6a 00                	push   0x0
c001a3ac:	56                   	push   esi
c001a3ad:	e8 62 fc ff ff       	call   c001a014 <PCI::checkBus(unsigned char)>
c001a3b2:	83 c4 10             	add    esp,0x10
c001a3b5:	eb 24                	jmp    c001a3db <PCI::detect()+0x4f>
c001a3b7:	52                   	push   edx
c001a3b8:	52                   	push   edx
c001a3b9:	53                   	push   ebx
c001a3ba:	43                   	inc    ebx
c001a3bb:	56                   	push   esi
c001a3bc:	e8 53 fc ff ff       	call   c001a014 <PCI::checkBus(unsigned char)>
c001a3c1:	83 c4 10             	add    esp,0x10
c001a3c4:	83 fb 08             	cmp    ebx,0x8
c001a3c7:	74 12                	je     c001a3db <PCI::detect()+0x4f>
c001a3c9:	53                   	push   ebx
c001a3ca:	6a 00                	push   0x0
c001a3cc:	6a 00                	push   0x0
c001a3ce:	56                   	push   esi
c001a3cf:	e8 12 f7 ff ff       	call   c0019ae6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a3d4:	83 c4 10             	add    esp,0x10
c001a3d7:	66 40                	inc    ax
c001a3d9:	74 dc                	je     c001a3b7 <PCI::detect()+0x2b>
c001a3db:	58                   	pop    eax
c001a3dc:	5b                   	pop    ebx
c001a3dd:	5e                   	pop    esi
c001a3de:	c3                   	ret    
c001a3df:	90                   	nop

c001a3e0 <IDE::close(int, int, void*)>:
c001a3e0:	83 c8 ff             	or     eax,0xffffffff
c001a3e3:	c3                   	ret    

c001a3e4 <IDE::IDE()>:
c001a3e4:	83 ec 0c             	sub    esp,0xc
c001a3e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3eb:	83 ec 08             	sub    esp,0x8
c001a3ee:	68 88 11 02 c0       	push   0xc0021188
c001a3f3:	50                   	push   eax
c001a3f4:	e8 8f 19 ff ff       	call   c000bd88 <HardDiskController::HardDiskController(char const*)>
c001a3f9:	83 c4 10             	add    esp,0x10
c001a3fc:	ba 18 12 02 c0       	mov    edx,0xc0021218
c001a401:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a405:	89 10                	mov    DWORD PTR [eax],edx
c001a407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a40b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001a412:	90                   	nop
c001a413:	83 c4 0c             	add    esp,0xc
c001a416:	c3                   	ret    
c001a417:	90                   	nop

c001a418 <IDE::prepareInterrupt(unsigned char)>:
c001a418:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a41d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a421:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001a429:	c3                   	ret    

c001a42a <selectDrive(unsigned char, unsigned char)>:
c001a42a:	c3                   	ret    
c001a42b:	90                   	nop

c001a42c <IDE::getBase(unsigned char)>:
c001a42c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001a431:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a435:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001a43d:	c3                   	ret    

c001a43e <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001a43e:	55                   	push   ebp
c001a43f:	57                   	push   edi
c001a440:	56                   	push   esi
c001a441:	53                   	push   ebx
c001a442:	83 ec 1c             	sub    esp,0x1c
c001a445:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001a449:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a44d:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001a450:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a454:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a458:	80 f9 03             	cmp    cl,0x3
c001a45b:	77 51                	ja     c001a4ae <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001a45d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a461:	0f b6 f2             	movzx  esi,dl
c001a464:	0f b6 db             	movzx  ebx,bl
c001a467:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001a46a:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001a46e:	83 ca 80             	or     edx,0xffffff80
c001a471:	0f b6 d2             	movzx  edx,dl
c001a474:	52                   	push   edx
c001a475:	6a 0c                	push   0xc
c001a477:	56                   	push   esi
c001a478:	57                   	push   edi
c001a479:	e8 c0 ff ff ff       	call   c001a43e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a47e:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001a483:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a487:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001a48b:	ee                   	out    dx,al
c001a48c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001a491:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001a495:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001a499:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a49d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001a4a5:	83 c4 2c             	add    esp,0x2c
c001a4a8:	5b                   	pop    ebx
c001a4a9:	5e                   	pop    esi
c001a4aa:	5f                   	pop    edi
c001a4ab:	5d                   	pop    ebp
c001a4ac:	eb 90                	jmp    c001a43e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a4ae:	80 fb 07             	cmp    bl,0x7
c001a4b1:	77 12                	ja     c001a4c5 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001a4b3:	0f b6 d2             	movzx  edx,dl
c001a4b6:	0f b6 db             	movzx  ebx,bl
c001a4b9:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001a4c1:	89 da                	mov    edx,ebx
c001a4c3:	eb 2f                	jmp    c001a4f4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001a4c5:	80 fb 0d             	cmp    bl,0xd
c001a4c8:	77 13                	ja     c001a4dd <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001a4ca:	0f b6 d2             	movzx  edx,dl
c001a4cd:	0f b6 db             	movzx  ebx,bl
c001a4d0:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001a4d7:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001a4db:	eb 17                	jmp    c001a4f4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001a4dd:	80 fb 15             	cmp    bl,0x15
c001a4e0:	77 13                	ja     c001a4f5 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001a4e2:	0f b6 d2             	movzx  edx,dl
c001a4e5:	0f b6 db             	movzx  ebx,bl
c001a4e8:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001a4f0:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001a4f4:	ee                   	out    dx,al
c001a4f5:	83 c4 1c             	add    esp,0x1c
c001a4f8:	5b                   	pop    ebx
c001a4f9:	5e                   	pop    esi
c001a4fa:	5f                   	pop    edi
c001a4fb:	5d                   	pop    ebp
c001a4fc:	c3                   	ret    
c001a4fd:	90                   	nop

c001a4fe <IDE::read(unsigned char, unsigned char)>:
c001a4fe:	55                   	push   ebp
c001a4ff:	57                   	push   edi
c001a500:	56                   	push   esi
c001a501:	53                   	push   ebx
c001a502:	83 ec 1c             	sub    esp,0x1c
c001a505:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001a509:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a50d:	8d 43 f8             	lea    eax,[ebx-0x8]
c001a510:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a514:	3c 03                	cmp    al,0x3
c001a516:	77 43                	ja     c001a55b <IDE::read(unsigned char, unsigned char)+0x5d>
c001a518:	0f b6 f2             	movzx  esi,dl
c001a51b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001a51e:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001a522:	83 c8 80             	or     eax,0xffffff80
c001a525:	0f b6 c0             	movzx  eax,al
c001a528:	50                   	push   eax
c001a529:	6a 0c                	push   0xc
c001a52b:	56                   	push   esi
c001a52c:	57                   	push   edi
c001a52d:	e8 0c ff ff ff       	call   c001a43e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a532:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001a537:	0f b6 c3             	movzx  eax,bl
c001a53a:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001a53e:	ec                   	in     al,dx
c001a53f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a543:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001a548:	52                   	push   edx
c001a549:	6a 0c                	push   0xc
c001a54b:	56                   	push   esi
c001a54c:	57                   	push   edi
c001a54d:	e8 ec fe ff ff       	call   c001a43e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a552:	83 c4 20             	add    esp,0x20
c001a555:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a559:	eb 49                	jmp    c001a5a4 <IDE::read(unsigned char, unsigned char)+0xa6>
c001a55b:	80 fb 07             	cmp    bl,0x7
c001a55e:	77 12                	ja     c001a572 <IDE::read(unsigned char, unsigned char)+0x74>
c001a560:	0f b6 d2             	movzx  edx,dl
c001a563:	0f b6 c3             	movzx  eax,bl
c001a566:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001a56e:	89 c2                	mov    edx,eax
c001a570:	eb 31                	jmp    c001a5a3 <IDE::read(unsigned char, unsigned char)+0xa5>
c001a572:	80 fb 0d             	cmp    bl,0xd
c001a575:	77 13                	ja     c001a58a <IDE::read(unsigned char, unsigned char)+0x8c>
c001a577:	0f b6 d2             	movzx  edx,dl
c001a57a:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001a581:	0f b6 d3             	movzx  edx,bl
c001a584:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001a588:	eb 19                	jmp    c001a5a3 <IDE::read(unsigned char, unsigned char)+0xa5>
c001a58a:	31 c0                	xor    eax,eax
c001a58c:	80 fb 15             	cmp    bl,0x15
c001a58f:	77 13                	ja     c001a5a4 <IDE::read(unsigned char, unsigned char)+0xa6>
c001a591:	0f b6 d2             	movzx  edx,dl
c001a594:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001a59c:	0f b6 d3             	movzx  edx,bl
c001a59f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001a5a3:	ec                   	in     al,dx
c001a5a4:	83 c4 1c             	add    esp,0x1c
c001a5a7:	5b                   	pop    ebx
c001a5a8:	5e                   	pop    esi
c001a5a9:	5f                   	pop    edi
c001a5aa:	5d                   	pop    ebp
c001a5ab:	c3                   	ret    

c001a5ac <IDE::waitInterrupt(unsigned char)>:
c001a5ac:	57                   	push   edi
c001a5ad:	56                   	push   esi
c001a5ae:	31 f6                	xor    esi,esi
c001a5b0:	53                   	push   ebx
c001a5b1:	83 ec 10             	sub    esp,0x10
c001a5b4:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001a5b8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a5bc:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a5c0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001a5c5:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001a5cc:	84 db                	test   bl,bl
c001a5ce:	75 33                	jne    c001a603 <IDE::waitInterrupt(unsigned char)+0x57>
c001a5d0:	52                   	push   edx
c001a5d1:	6a 0c                	push   0xc
c001a5d3:	50                   	push   eax
c001a5d4:	57                   	push   edi
c001a5d5:	e8 24 ff ff ff       	call   c001a4fe <IDE::read(unsigned char, unsigned char)>
c001a5da:	83 c4 10             	add    esp,0x10
c001a5dd:	a8 01                	test   al,0x1
c001a5df:	75 2a                	jne    c001a60b <IDE::waitInterrupt(unsigned char)+0x5f>
c001a5e1:	f7 c6 04 00 00 00    	test   esi,0x4
c001a5e7:	75 12                	jne    c001a5fb <IDE::waitInterrupt(unsigned char)+0x4f>
c001a5e9:	83 fe 32             	cmp    esi,0x32
c001a5ec:	7e 0d                	jle    c001a5fb <IDE::waitInterrupt(unsigned char)+0x4f>
c001a5ee:	83 ec 0c             	sub    esp,0xc
c001a5f1:	6a 64                	push   0x64
c001a5f3:	e8 64 a7 ff ff       	call   c0014d5c <milliTenthSleep(unsigned int)>
c001a5f8:	83 c4 10             	add    esp,0x10
c001a5fb:	83 fe 3c             	cmp    esi,0x3c
c001a5fe:	74 0b                	je     c001a60b <IDE::waitInterrupt(unsigned char)+0x5f>
c001a600:	46                   	inc    esi
c001a601:	eb bd                	jmp    c001a5c0 <IDE::waitInterrupt(unsigned char)+0x14>
c001a603:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c001a60b:	83 c4 10             	add    esp,0x10
c001a60e:	88 d8                	mov    al,bl
c001a610:	5b                   	pop    ebx
c001a611:	5e                   	pop    esi
c001a612:	5f                   	pop    edi
c001a613:	c3                   	ret    

c001a614 <ideChannel0IRQHandler(regs*, void*)>:
c001a614:	83 ec 10             	sub    esp,0x10
c001a617:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a61b:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001a622:	6a 07                	push   0x7
c001a624:	6a 00                	push   0x0
c001a626:	50                   	push   eax
c001a627:	e8 d2 fe ff ff       	call   c001a4fe <IDE::read(unsigned char, unsigned char)>
c001a62c:	83 c4 1c             	add    esp,0x1c
c001a62f:	c3                   	ret    

c001a630 <ideChannel1IRQHandler(regs*, void*)>:
c001a630:	83 ec 10             	sub    esp,0x10
c001a633:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a637:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001a63e:	6a 07                	push   0x7
c001a640:	6a 01                	push   0x1
c001a642:	50                   	push   eax
c001a643:	e8 b6 fe ff ff       	call   c001a4fe <IDE::read(unsigned char, unsigned char)>
c001a648:	83 c4 1c             	add    esp,0x1c
c001a64b:	c3                   	ret    

c001a64c <IDE::enableIRQs(unsigned char, bool)>:
c001a64c:	57                   	push   edi
c001a64d:	56                   	push   esi
c001a64e:	be 04 00 00 00       	mov    esi,0x4
c001a653:	53                   	push   ebx
c001a654:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001a659:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a65d:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001a662:	0f 94 c0             	sete   al
c001a665:	01 c0                	add    eax,eax
c001a667:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001a66e:	0f b6 c0             	movzx  eax,al
c001a671:	50                   	push   eax
c001a672:	6a 0c                	push   0xc
c001a674:	57                   	push   edi
c001a675:	53                   	push   ebx
c001a676:	e8 c3 fd ff ff       	call   c001a43e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a67b:	83 c4 10             	add    esp,0x10
c001a67e:	50                   	push   eax
c001a67f:	6a 0c                	push   0xc
c001a681:	57                   	push   edi
c001a682:	53                   	push   ebx
c001a683:	e8 76 fe ff ff       	call   c001a4fe <IDE::read(unsigned char, unsigned char)>
c001a688:	83 c4 10             	add    esp,0x10
c001a68b:	4e                   	dec    esi
c001a68c:	75 f0                	jne    c001a67e <IDE::enableIRQs(unsigned char, bool)+0x32>
c001a68e:	5b                   	pop    ebx
c001a68f:	5e                   	pop    esi
c001a690:	5f                   	pop    edi
c001a691:	c3                   	ret    

c001a692 <IDE::open(int, int, void*)>:
c001a692:	55                   	push   ebp
c001a693:	57                   	push   edi
c001a694:	56                   	push   esi
c001a695:	53                   	push   ebx
c001a696:	83 ec 1c             	sub    esp,0x1c
c001a699:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a69d:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001a6a6:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001a6af:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001a6b6:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001a6bd:	0f 85 b0 02 00 00    	jne    c001a973 <IDE::open(int, int, void*)+0x2e1>
c001a6c3:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001a6c9:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001a6cd:	83 e0 7f             	and    eax,0x7f
c001a6d0:	3c 05                	cmp    al,0x5
c001a6d2:	74 04                	je     c001a6d8 <IDE::open(int, int, void*)+0x46>
c001a6d4:	3c 0f                	cmp    al,0xf
c001a6d6:	75 32                	jne    c001a70a <IDE::open(int, int, void*)+0x78>
c001a6d8:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001a6de:	83 e0 fc             	and    eax,0xfffffffc
c001a6e1:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001a6e8:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001a6ee:	83 e0 fc             	and    eax,0xfffffffc
c001a6f1:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001a6f8:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001a6fe:	83 e0 fc             	and    eax,0xfffffffc
c001a701:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001a708:	eb 14                	jmp    c001a71e <IDE::open(int, int, void*)+0x8c>
c001a70a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001a714:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001a71e:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001a725:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001a72c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a730:	89 c6                	mov    esi,eax
c001a732:	bf f8 0c 00 00       	mov    edi,0xcf8
c001a737:	c1 e6 10             	shl    esi,0x10
c001a73a:	89 e8                	mov    eax,ebp
c001a73c:	89 fa                	mov    edx,edi
c001a73e:	c1 e0 0b             	shl    eax,0xb
c001a741:	09 f0                	or     eax,esi
c001a743:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001a74a:	c1 e6 08             	shl    esi,0x8
c001a74d:	09 c6                	or     esi,eax
c001a74f:	89 f0                	mov    eax,esi
c001a751:	0d 08 00 00 80       	or     eax,0x80000008
c001a756:	ef                   	out    dx,eax
c001a757:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001a75c:	89 ca                	mov    edx,ecx
c001a75e:	ed                   	in     eax,dx
c001a75f:	c1 e8 10             	shr    eax,0x10
c001a762:	3d ff ff 00 00       	cmp    eax,0xffff
c001a767:	0f 84 f5 00 00 00    	je     c001a862 <IDE::open(int, int, void*)+0x1d0>
c001a76d:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001a773:	89 fa                	mov    edx,edi
c001a775:	89 f0                	mov    eax,esi
c001a777:	ef                   	out    dx,eax
c001a778:	b0 fe                	mov    al,0xfe
c001a77a:	89 ca                	mov    edx,ecx
c001a77c:	ee                   	out    dx,al
c001a77d:	89 f0                	mov    eax,esi
c001a77f:	89 fa                	mov    edx,edi
c001a781:	ef                   	out    dx,eax
c001a782:	89 ca                	mov    edx,ecx
c001a784:	ed                   	in     eax,dx
c001a785:	3c fe                	cmp    al,0xfe
c001a787:	0f 85 a9 00 00 00    	jne    c001a836 <IDE::open(int, int, void*)+0x1a4>
c001a78d:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c001a793:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001a79a:	74 33                	je     c001a7cf <IDE::open(int, int, void*)+0x13d>
c001a79c:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001a7a2:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001a7a6:	40                   	inc    eax
c001a7a7:	83 ec 0c             	sub    esp,0xc
c001a7aa:	0f b6 c0             	movzx  eax,al
c001a7ad:	50                   	push   eax
c001a7ae:	55                   	push   ebp
c001a7af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a7b3:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001a7b9:	51                   	push   ecx
c001a7ba:	e8 21 41 ff ff       	call   c000e8e0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001a7bf:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001a7c4:	83 c4 1c             	add    esp,0x1c
c001a7c7:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001a7cd:	eb 0a                	jmp    c001a7d9 <IDE::open(int, int, void*)+0x147>
c001a7cf:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001a7d9:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001a7e0:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001a7e7:	c1 e1 10             	shl    ecx,0x10
c001a7ea:	c1 e0 08             	shl    eax,0x8
c001a7ed:	bf f8 0c 00 00       	mov    edi,0xcf8
c001a7f2:	09 c1                	or     ecx,eax
c001a7f4:	89 fa                	mov    edx,edi
c001a7f6:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001a7fd:	c1 e0 0b             	shl    eax,0xb
c001a800:	09 c1                	or     ecx,eax
c001a802:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001a808:	89 c8                	mov    eax,ecx
c001a80a:	ef                   	out    dx,eax
c001a80b:	be fc 0c 00 00       	mov    esi,0xcfc
c001a810:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001a816:	89 f2                	mov    edx,esi
c001a818:	ee                   	out    dx,al
c001a819:	89 c8                	mov    eax,ecx
c001a81b:	89 fa                	mov    edx,edi
c001a81d:	ef                   	out    dx,eax
c001a81e:	89 f2                	mov    edx,esi
c001a820:	ed                   	in     eax,dx
c001a821:	0f b6 c0             	movzx  eax,al
c001a824:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001a82a:	74 46                	je     c001a872 <IDE::open(int, int, void*)+0x1e0>
c001a82c:	83 ec 0c             	sub    esp,0xc
c001a82f:	68 a0 11 02 c0       	push   0xc00211a0
c001a834:	eb 34                	jmp    c001a86a <IDE::open(int, int, void*)+0x1d8>
c001a836:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001a83f:	75 17                	jne    c001a858 <IDE::open(int, int, void*)+0x1c6>
c001a841:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001a846:	74 07                	je     c001a84f <IDE::open(int, int, void*)+0x1bd>
c001a848:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001a84d:	75 09                	jne    c001a858 <IDE::open(int, int, void*)+0x1c6>
c001a84f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001a856:	eb 1a                	jmp    c001a872 <IDE::open(int, int, void*)+0x1e0>
c001a858:	83 ec 0c             	sub    esp,0xc
c001a85b:	68 a8 11 02 c0       	push   0xc00211a8
c001a860:	eb 08                	jmp    c001a86a <IDE::open(int, int, void*)+0x1d8>
c001a862:	83 ec 0c             	sub    esp,0xc
c001a865:	68 d9 11 02 c0       	push   0xc00211d9
c001a86a:	e8 58 5b ff ff       	call   c00103c7 <KePanic(char const*)>
c001a86f:	83 c4 10             	add    esp,0x10
c001a872:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001a879:	79 1a                	jns    c001a895 <IDE::open(int, int, void*)+0x203>
c001a87b:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001a881:	83 e0 fc             	and    eax,0xfffffffc
c001a884:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001a88b:	83 c0 08             	add    eax,0x8
c001a88e:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001a895:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001a89b:	89 c2                	mov    edx,eax
c001a89d:	83 e2 0f             	and    edx,0xf
c001a8a0:	66 83 fa 08          	cmp    dx,0x8
c001a8a4:	75 0a                	jne    c001a8b0 <IDE::open(int, int, void*)+0x21e>
c001a8a6:	83 e8 02             	sub    eax,0x2
c001a8a9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001a8b0:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001a8b6:	89 c2                	mov    edx,eax
c001a8b8:	83 e2 0f             	and    edx,0xf
c001a8bb:	66 83 fa 08          	cmp    dx,0x8
c001a8bf:	75 0a                	jne    c001a8cb <IDE::open(int, int, void*)+0x239>
c001a8c1:	83 e8 02             	sub    eax,0x2
c001a8c4:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001a8cb:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001a8d2:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001a8d9:	89 d0                	mov    eax,edx
c001a8db:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001a8de:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001a8e2:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001a8e6:	8d 4a 01             	lea    ecx,[edx+0x1]
c001a8e9:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001a8ee:	0f b6 c9             	movzx  ecx,cl
c001a8f1:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001a8f8:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001a8fb:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001a8ff:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001a903:	8d 50 02             	lea    edx,[eax+0x2]
c001a906:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001a90b:	0f b6 d2             	movzx  edx,dl
c001a90e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001a914:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001a917:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001a91b:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001a91f:	8d 48 03             	lea    ecx,[eax+0x3]
c001a922:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001a927:	0f b6 c9             	movzx  ecx,cl
c001a92a:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001a930:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001a933:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001a937:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001a93b:	8d 50 04             	lea    edx,[eax+0x4]
c001a93e:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001a944:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001a949:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001a950:	66 85 f6             	test   si,si
c001a953:	74 5b                	je     c001a9b0 <IDE::open(int, int, void*)+0x31e>
c001a955:	0f b6 d2             	movzx  edx,dl
c001a958:	83 c0 05             	add    eax,0x5
c001a95b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001a95e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001a962:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001a966:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001a96c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001a971:	eb 3d                	jmp    c001a9b0 <IDE::open(int, int, void*)+0x31e>
c001a973:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001a979:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001a980:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001a987:	66 05 06 02          	add    ax,0x206
c001a98b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001a992:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001a999:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001a9a0:	66 05 06 02          	add    ax,0x206
c001a9a4:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001a9ab:	e9 e5 fe ff ff       	jmp    c001a895 <IDE::open(int, int, void*)+0x203>
c001a9b0:	50                   	push   eax
c001a9b1:	50                   	push   eax
c001a9b2:	6a 00                	push   0x0
c001a9b4:	53                   	push   ebx
c001a9b5:	e8 5e fa ff ff       	call   c001a418 <IDE::prepareInterrupt(unsigned char)>
c001a9ba:	5a                   	pop    edx
c001a9bb:	59                   	pop    ecx
c001a9bc:	6a 01                	push   0x1
c001a9be:	53                   	push   ebx
c001a9bf:	e8 54 fa ff ff       	call   c001a418 <IDE::prepareInterrupt(unsigned char)>
c001a9c4:	83 c4 0c             	add    esp,0xc
c001a9c7:	6a 00                	push   0x0
c001a9c9:	6a 00                	push   0x0
c001a9cb:	53                   	push   ebx
c001a9cc:	e8 7b fc ff ff       	call   c001a64c <IDE::enableIRQs(unsigned char, bool)>
c001a9d1:	83 c4 0c             	add    esp,0xc
c001a9d4:	6a 00                	push   0x0
c001a9d6:	6a 01                	push   0x1
c001a9d8:	53                   	push   ebx
c001a9d9:	e8 6e fc ff ff       	call   c001a64c <IDE::enableIRQs(unsigned char, bool)>
c001a9de:	83 c4 10             	add    esp,0x10
c001a9e1:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001a9e8:	74 34                	je     c001aa1e <IDE::open(int, int, void*)+0x38c>
c001a9ea:	83 ec 0c             	sub    esp,0xc
c001a9ed:	53                   	push   ebx
c001a9ee:	6a 01                	push   0x1
c001a9f0:	68 14 a6 01 c0       	push   0xc001a614
c001a9f5:	6a 0e                	push   0xe
c001a9f7:	53                   	push   ebx
c001a9f8:	e8 f3 0f ff ff       	call   c000b9f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001a9fd:	83 c4 14             	add    esp,0x14
c001aa00:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001aa06:	53                   	push   ebx
c001aa07:	6a 01                	push   0x1
c001aa09:	68 30 a6 01 c0       	push   0xc001a630
c001aa0e:	6a 0f                	push   0xf
c001aa10:	53                   	push   ebx
c001aa11:	e8 da 0f ff ff       	call   c000b9f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001aa16:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001aa1c:	eb 38                	jmp    c001aa56 <IDE::open(int, int, void*)+0x3c4>
c001aa1e:	83 ec 0c             	sub    esp,0xc
c001aa21:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001aa2b:	53                   	push   ebx
c001aa2c:	6a 00                	push   0x0
c001aa2e:	68 14 a6 01 c0       	push   0xc001a614
c001aa33:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001aa39:	53                   	push   ebx
c001aa3a:	e8 b1 0f ff ff       	call   c000b9f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001aa3f:	83 c4 14             	add    esp,0x14
c001aa42:	53                   	push   ebx
c001aa43:	6a 00                	push   0x0
c001aa45:	68 30 a6 01 c0       	push   0xc001a630
c001aa4a:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001aa50:	53                   	push   ebx
c001aa51:	e8 9a 0f ff ff       	call   c000b9f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001aa56:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aa58:	83 c4 20             	add    esp,0x20
c001aa5b:	83 ec 0c             	sub    esp,0xc
c001aa5e:	53                   	push   ebx
c001aa5f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001aa62:	83 c4 0c             	add    esp,0xc
c001aa65:	6a 07                	push   0x7
c001aa67:	6a 00                	push   0x0
c001aa69:	53                   	push   ebx
c001aa6a:	e8 8f fa ff ff       	call   c001a4fe <IDE::read(unsigned char, unsigned char)>
c001aa6f:	83 c4 0c             	add    esp,0xc
c001aa72:	6a 07                	push   0x7
c001aa74:	6a 01                	push   0x1
c001aa76:	53                   	push   ebx
c001aa77:	e8 82 fa ff ff       	call   c001a4fe <IDE::read(unsigned char, unsigned char)>
c001aa7c:	83 c4 0c             	add    esp,0xc
c001aa7f:	6a 01                	push   0x1
c001aa81:	6a 00                	push   0x0
c001aa83:	53                   	push   ebx
c001aa84:	e8 c3 fb ff ff       	call   c001a64c <IDE::enableIRQs(unsigned char, bool)>
c001aa89:	83 c4 0c             	add    esp,0xc
c001aa8c:	6a 01                	push   0x1
c001aa8e:	6a 01                	push   0x1
c001aa90:	53                   	push   ebx
c001aa91:	e8 b6 fb ff ff       	call   c001a64c <IDE::enableIRQs(unsigned char, bool)>
c001aa96:	83 c4 2c             	add    esp,0x2c
c001aa99:	31 c0                	xor    eax,eax
c001aa9b:	5b                   	pop    ebx
c001aa9c:	5e                   	pop    esi
c001aa9d:	5f                   	pop    edi
c001aa9e:	5d                   	pop    ebp
c001aa9f:	c3                   	ret    

c001aaa0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001aaa0:	55                   	push   ebp
c001aaa1:	57                   	push   edi
c001aaa2:	56                   	push   esi
c001aaa3:	53                   	push   ebx
c001aaa4:	83 ec 1c             	sub    esp,0x1c
c001aaa7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aaab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001aaaf:	8d 50 f8             	lea    edx,[eax-0x8]
c001aab2:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001aab6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001aaba:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001aabe:	80 fa 03             	cmp    dl,0x3
c001aac1:	77 5d                	ja     c001ab20 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001aac3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001aac7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aacb:	0f b6 db             	movzx  ebx,bl
c001aace:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001aad1:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001aad5:	83 ca 80             	or     edx,0xffffff80
c001aad8:	0f b6 d2             	movzx  edx,dl
c001aadb:	52                   	push   edx
c001aadc:	6a 0c                	push   0xc
c001aade:	53                   	push   ebx
c001aadf:	56                   	push   esi
c001aae0:	e8 59 f9 ff ff       	call   c001a43e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aae5:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001aaea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aaee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001aaf2:	0f b6 c0             	movzx  eax,al
c001aaf5:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001aaf9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001aafb:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ab00:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001ab04:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ab08:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ab0c:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ab14:	83 c4 2c             	add    esp,0x2c
c001ab17:	5b                   	pop    ebx
c001ab18:	5e                   	pop    esi
c001ab19:	5f                   	pop    edi
c001ab1a:	5d                   	pop    ebp
c001ab1b:	e9 1e f9 ff ff       	jmp    c001a43e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ab20:	3c 07                	cmp    al,0x7
c001ab22:	77 10                	ja     c001ab34 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001ab24:	0f b6 db             	movzx  ebx,bl
c001ab27:	0f b6 d0             	movzx  edx,al
c001ab2a:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001ab32:	eb 2d                	jmp    c001ab61 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ab34:	3c 0d                	cmp    al,0xd
c001ab36:	77 13                	ja     c001ab4b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001ab38:	0f b6 db             	movzx  ebx,bl
c001ab3b:	0f b6 c0             	movzx  eax,al
c001ab3e:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001ab45:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001ab49:	eb 16                	jmp    c001ab61 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ab4b:	3c 15                	cmp    al,0x15
c001ab4d:	77 14                	ja     c001ab63 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001ab4f:	0f b6 db             	movzx  ebx,bl
c001ab52:	0f b6 c0             	movzx  eax,al
c001ab55:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001ab5d:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001ab61:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ab63:	83 c4 1c             	add    esp,0x1c
c001ab66:	5b                   	pop    ebx
c001ab67:	5e                   	pop    esi
c001ab68:	5f                   	pop    edi
c001ab69:	5d                   	pop    ebp
c001ab6a:	c3                   	ret    
c001ab6b:	90                   	nop

c001ab6c <IDE::detect()>:
c001ab6c:	55                   	push   ebp
c001ab6d:	57                   	push   edi
c001ab6e:	56                   	push   esi
c001ab6f:	53                   	push   ebx
c001ab70:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ab76:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001ab7d:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001ab84:	0f 85 97 02 00 00    	jne    c001ae21 <IDE::detect()+0x2b5>
c001ab8a:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001ab91:	31 f6                	xor    esi,esi
c001ab93:	31 ed                	xor    ebp,ebp
c001ab95:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ab9d:	89 e8                	mov    eax,ebp
c001ab9f:	c1 e0 06             	shl    eax,0x6
c001aba2:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001abaa:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001abae:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001abb2:	c1 e0 04             	shl    eax,0x4
c001abb5:	83 c8 a0             	or     eax,0xffffffa0
c001abb8:	0f b6 c0             	movzx  eax,al
c001abbb:	50                   	push   eax
c001abbc:	6a 06                	push   0x6
c001abbe:	56                   	push   esi
c001abbf:	53                   	push   ebx
c001abc0:	e8 79 f8 ff ff       	call   c001a43e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001abc5:	83 c4 0c             	add    esp,0xc
c001abc8:	6a 0c                	push   0xc
c001abca:	56                   	push   esi
c001abcb:	53                   	push   ebx
c001abcc:	e8 2d f9 ff ff       	call   c001a4fe <IDE::read(unsigned char, unsigned char)>
c001abd1:	83 c4 0c             	add    esp,0xc
c001abd4:	6a 0c                	push   0xc
c001abd6:	56                   	push   esi
c001abd7:	53                   	push   ebx
c001abd8:	e8 21 f9 ff ff       	call   c001a4fe <IDE::read(unsigned char, unsigned char)>
c001abdd:	83 c4 0c             	add    esp,0xc
c001abe0:	6a 0c                	push   0xc
c001abe2:	56                   	push   esi
c001abe3:	53                   	push   ebx
c001abe4:	e8 15 f9 ff ff       	call   c001a4fe <IDE::read(unsigned char, unsigned char)>
c001abe9:	83 c4 0c             	add    esp,0xc
c001abec:	6a 0c                	push   0xc
c001abee:	56                   	push   esi
c001abef:	53                   	push   ebx
c001abf0:	e8 09 f9 ff ff       	call   c001a4fe <IDE::read(unsigned char, unsigned char)>
c001abf5:	68 ec 00 00 00       	push   0xec
c001abfa:	6a 07                	push   0x7
c001abfc:	56                   	push   esi
c001abfd:	53                   	push   ebx
c001abfe:	e8 3b f8 ff ff       	call   c001a43e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ac03:	83 c4 1c             	add    esp,0x1c
c001ac06:	6a 0c                	push   0xc
c001ac08:	56                   	push   esi
c001ac09:	53                   	push   ebx
c001ac0a:	e8 ef f8 ff ff       	call   c001a4fe <IDE::read(unsigned char, unsigned char)>
c001ac0f:	83 c4 0c             	add    esp,0xc
c001ac12:	6a 0c                	push   0xc
c001ac14:	56                   	push   esi
c001ac15:	53                   	push   ebx
c001ac16:	e8 e3 f8 ff ff       	call   c001a4fe <IDE::read(unsigned char, unsigned char)>
c001ac1b:	83 c4 0c             	add    esp,0xc
c001ac1e:	6a 0c                	push   0xc
c001ac20:	56                   	push   esi
c001ac21:	53                   	push   ebx
c001ac22:	e8 d7 f8 ff ff       	call   c001a4fe <IDE::read(unsigned char, unsigned char)>
c001ac27:	83 c4 0c             	add    esp,0xc
c001ac2a:	6a 0c                	push   0xc
c001ac2c:	56                   	push   esi
c001ac2d:	53                   	push   ebx
c001ac2e:	e8 cb f8 ff ff       	call   c001a4fe <IDE::read(unsigned char, unsigned char)>
c001ac33:	83 c4 0c             	add    esp,0xc
c001ac36:	6a 0c                	push   0xc
c001ac38:	56                   	push   esi
c001ac39:	53                   	push   ebx
c001ac3a:	e8 bf f8 ff ff       	call   c001a4fe <IDE::read(unsigned char, unsigned char)>
c001ac3f:	83 c4 10             	add    esp,0x10
c001ac42:	84 c0                	test   al,al
c001ac44:	0f 84 5f 01 00 00    	je     c001ada9 <IDE::detect()+0x23d>
c001ac4a:	31 ff                	xor    edi,edi
c001ac4c:	50                   	push   eax
c001ac4d:	6a 0c                	push   0xc
c001ac4f:	56                   	push   esi
c001ac50:	53                   	push   ebx
c001ac51:	e8 a8 f8 ff ff       	call   c001a4fe <IDE::read(unsigned char, unsigned char)>
c001ac56:	83 c4 10             	add    esp,0x10
c001ac59:	a8 01                	test   al,0x1
c001ac5b:	0f 85 69 01 00 00    	jne    c001adca <IDE::detect()+0x25e>
c001ac61:	84 c0                	test   al,al
c001ac63:	78 04                	js     c001ac69 <IDE::detect()+0xfd>
c001ac65:	a8 08                	test   al,0x8
c001ac67:	75 23                	jne    c001ac8c <IDE::detect()+0x120>
c001ac69:	47                   	inc    edi
c001ac6a:	81 ff 17 01 00 00    	cmp    edi,0x117
c001ac70:	7e da                	jle    c001ac4c <IDE::detect()+0xe0>
c001ac72:	83 ec 0c             	sub    esp,0xc
c001ac75:	6a 32                	push   0x32
c001ac77:	e8 e0 a0 ff ff       	call   c0014d5c <milliTenthSleep(unsigned int)>
c001ac7c:	83 c4 10             	add    esp,0x10
c001ac7f:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001ac85:	75 c5                	jne    c001ac4c <IDE::detect()+0xe0>
c001ac87:	e9 3e 01 00 00       	jmp    c001adca <IDE::detect()+0x25e>
c001ac8c:	31 c9                	xor    ecx,ecx
c001ac8e:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001ac92:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001ac96:	83 ec 0c             	sub    esp,0xc
c001ac99:	68 80 00 00 00       	push   0x80
c001ac9e:	57                   	push   edi
c001ac9f:	6a 00                	push   0x0
c001aca1:	56                   	push   esi
c001aca2:	53                   	push   ebx
c001aca3:	e8 f8 fd ff ff       	call   c001aaa0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001aca8:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001acad:	89 e8                	mov    eax,ebp
c001acaf:	89 d1                	mov    ecx,edx
c001acb1:	c1 e0 06             	shl    eax,0x6
c001acb4:	01 d8                	add    eax,ebx
c001acb6:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001acbd:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001acc4:	89 f2                	mov    edx,esi
c001acc6:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001accc:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001acd0:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001acd6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001acda:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001ace1:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001ace9:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001acf0:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001acf8:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001acfe:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001ad05:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001ad0b:	8d 54 24 58          	lea    edx,[esp+0x58]
c001ad0f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001ad13:	83 c4 20             	add    esp,0x20
c001ad16:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001ad19:	83 c0 02             	add    eax,0x2
c001ad1c:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001ad22:	83 c7 02             	add    edi,0x2
c001ad25:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001ad28:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001ad2e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001ad32:	75 e2                	jne    c001ad16 <IDE::detect()+0x1aa>
c001ad34:	89 e8                	mov    eax,ebp
c001ad36:	c1 e0 06             	shl    eax,0x6
c001ad39:	01 d8                	add    eax,ebx
c001ad3b:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001ad41:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001ad48:	66 c1 ea 09          	shr    dx,0x9
c001ad4c:	83 e2 01             	and    edx,0x1
c001ad4f:	84 c9                	test   cl,cl
c001ad51:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001ad57:	75 22                	jne    c001ad7b <IDE::detect()+0x20f>
c001ad59:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001ad60:	74 46                	je     c001ada8 <IDE::detect()+0x23c>
c001ad62:	83 ec 0c             	sub    esp,0xc
c001ad65:	68 7c 01 00 00       	push   0x17c
c001ad6a:	e8 f6 ca fe ff       	call   c0007865 <malloc>
c001ad6f:	89 c7                	mov    edi,eax
c001ad71:	89 04 24             	mov    DWORD PTR [esp],eax
c001ad74:	e8 11 05 00 00       	call   c001b28a <ATA::ATA()>
c001ad79:	eb 17                	jmp    c001ad92 <IDE::detect()+0x226>
c001ad7b:	83 ec 0c             	sub    esp,0xc
c001ad7e:	68 84 01 00 00       	push   0x184
c001ad83:	e8 dd ca fe ff       	call   c0007865 <malloc>
c001ad88:	89 c7                	mov    edi,eax
c001ad8a:	89 04 24             	mov    DWORD PTR [esp],eax
c001ad8d:	e8 1e 0e 00 00       	call   c001bbb0 <ATAPI::ATAPI()>
c001ad92:	5a                   	pop    edx
c001ad93:	59                   	pop    ecx
c001ad94:	57                   	push   edi
c001ad95:	53                   	push   ebx
c001ad96:	e8 a9 0c ff ff       	call   c000ba44 <Device::addChild(Device*)>
c001ad9b:	8b 07                	mov    eax,DWORD PTR [edi]
c001ad9d:	53                   	push   ebx
c001ad9e:	55                   	push   ebp
c001ad9f:	6a 00                	push   0x0
c001ada1:	57                   	push   edi
c001ada2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ada5:	83 c4 20             	add    esp,0x20
c001ada8:	45                   	inc    ebp
c001ada9:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001adae:	74 0d                	je     c001adbd <IDE::detect()+0x251>
c001adb0:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001adb8:	e9 e0 fd ff ff       	jmp    c001ab9d <IDE::detect()+0x31>
c001adbd:	4e                   	dec    esi
c001adbe:	74 61                	je     c001ae21 <IDE::detect()+0x2b5>
c001adc0:	be 01 00 00 00       	mov    esi,0x1
c001adc5:	e9 cb fd ff ff       	jmp    c001ab95 <IDE::detect()+0x29>
c001adca:	50                   	push   eax
c001adcb:	6a 04                	push   0x4
c001adcd:	56                   	push   esi
c001adce:	53                   	push   ebx
c001adcf:	e8 2a f7 ff ff       	call   c001a4fe <IDE::read(unsigned char, unsigned char)>
c001add4:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001add8:	83 c4 0c             	add    esp,0xc
c001addb:	6a 05                	push   0x5
c001addd:	56                   	push   esi
c001adde:	53                   	push   ebx
c001addf:	e8 1a f7 ff ff       	call   c001a4fe <IDE::read(unsigned char, unsigned char)>
c001ade4:	83 c4 10             	add    esp,0x10
c001ade7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001adeb:	80 fa 14             	cmp    dl,0x14
c001adee:	75 04                	jne    c001adf4 <IDE::detect()+0x288>
c001adf0:	3c eb                	cmp    al,0xeb
c001adf2:	eb 07                	jmp    c001adfb <IDE::detect()+0x28f>
c001adf4:	3c 96                	cmp    al,0x96
c001adf6:	75 b1                	jne    c001ada9 <IDE::detect()+0x23d>
c001adf8:	80 fa 69             	cmp    dl,0x69
c001adfb:	75 ac                	jne    c001ada9 <IDE::detect()+0x23d>
c001adfd:	68 a1 00 00 00       	push   0xa1
c001ae02:	6a 07                	push   0x7
c001ae04:	56                   	push   esi
c001ae05:	53                   	push   ebx
c001ae06:	e8 33 f6 ff ff       	call   c001a43e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ae0b:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001ae12:	e8 45 9f ff ff       	call   c0014d5c <milliTenthSleep(unsigned int)>
c001ae17:	83 c4 10             	add    esp,0x10
c001ae1a:	b1 01                	mov    cl,0x1
c001ae1c:	e9 6d fe ff ff       	jmp    c001ac8e <IDE::detect()+0x122>
c001ae21:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ae27:	5b                   	pop    ebx
c001ae28:	5e                   	pop    esi
c001ae29:	5f                   	pop    edi
c001ae2a:	5d                   	pop    ebp
c001ae2b:	c3                   	ret    

c001ae2c <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001ae2c:	55                   	push   ebp
c001ae2d:	57                   	push   edi
c001ae2e:	56                   	push   esi
c001ae2f:	53                   	push   ebx
c001ae30:	83 ec 1c             	sub    esp,0x1c
c001ae33:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ae37:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ae3b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ae3f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001ae43:	88 c3                	mov    bl,al
c001ae45:	84 c0                	test   al,al
c001ae47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae4b:	0f 84 81 00 00 00    	je     c001aed2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ae51:	83 ec 0c             	sub    esp,0xc
c001ae54:	68 03 12 02 c0       	push   0xc0021203
c001ae59:	e8 a8 f7 fe ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c001ae5e:	83 c4 10             	add    esp,0x10
c001ae61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae65:	3c 01                	cmp    al,0x1
c001ae67:	74 63                	je     c001aecc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001ae69:	3c 02                	cmp    al,0x2
c001ae6b:	75 53                	jne    c001aec0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001ae6d:	01 f6                	add    esi,esi
c001ae6f:	09 ee                	or     esi,ebp
c001ae71:	50                   	push   eax
c001ae72:	89 f0                	mov    eax,esi
c001ae74:	6a 01                	push   0x1
c001ae76:	0f b6 f0             	movzx  esi,al
c001ae79:	c1 e6 06             	shl    esi,0x6
c001ae7c:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001ae84:	50                   	push   eax
c001ae85:	57                   	push   edi
c001ae86:	e8 73 f6 ff ff       	call   c001a4fe <IDE::read(unsigned char, unsigned char)>
c001ae8b:	83 c4 10             	add    esp,0x10
c001ae8e:	a8 01                	test   al,0x1
c001ae90:	74 02                	je     c001ae94 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001ae92:	b3 07                	mov    bl,0x7
c001ae94:	a8 02                	test   al,0x2
c001ae96:	74 02                	je     c001ae9a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001ae98:	b3 03                	mov    bl,0x3
c001ae9a:	a8 04                	test   al,0x4
c001ae9c:	74 02                	je     c001aea0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001ae9e:	b3 14                	mov    bl,0x14
c001aea0:	a8 08                	test   al,0x8
c001aea2:	74 02                	je     c001aea6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001aea4:	b3 03                	mov    bl,0x3
c001aea6:	a8 10                	test   al,0x10
c001aea8:	74 02                	je     c001aeac <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001aeaa:	b3 15                	mov    bl,0x15
c001aeac:	a8 20                	test   al,0x20
c001aeae:	74 02                	je     c001aeb2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001aeb0:	b3 03                	mov    bl,0x3
c001aeb2:	a8 40                	test   al,0x40
c001aeb4:	74 02                	je     c001aeb8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001aeb6:	b3 16                	mov    bl,0x16
c001aeb8:	84 c0                	test   al,al
c001aeba:	79 16                	jns    c001aed2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001aebc:	b3 0d                	mov    bl,0xd
c001aebe:	eb 12                	jmp    c001aed2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001aec0:	3c 03                	cmp    al,0x3
c001aec2:	74 0c                	je     c001aed0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001aec4:	3c 04                	cmp    al,0x4
c001aec6:	75 0a                	jne    c001aed2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001aec8:	b3 08                	mov    bl,0x8
c001aeca:	eb 06                	jmp    c001aed2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001aecc:	b3 13                	mov    bl,0x13
c001aece:	eb 02                	jmp    c001aed2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001aed0:	b3 17                	mov    bl,0x17
c001aed2:	83 c4 1c             	add    esp,0x1c
c001aed5:	88 d8                	mov    al,bl
c001aed7:	5b                   	pop    ebx
c001aed8:	5e                   	pop    esi
c001aed9:	5f                   	pop    edi
c001aeda:	5d                   	pop    ebp
c001aedb:	c3                   	ret    

c001aedc <IDE::polling(unsigned char, unsigned int)>:
c001aedc:	55                   	push   ebp
c001aedd:	bd 04 00 00 00       	mov    ebp,0x4
c001aee2:	57                   	push   edi
c001aee3:	56                   	push   esi
c001aee4:	53                   	push   ebx
c001aee5:	83 ec 0c             	sub    esp,0xc
c001aee8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001aeec:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c001aef0:	0f b6 f3             	movzx  esi,bl
c001aef3:	52                   	push   edx
c001aef4:	6a 0c                	push   0xc
c001aef6:	56                   	push   esi
c001aef7:	57                   	push   edi
c001aef8:	e8 01 f6 ff ff       	call   c001a4fe <IDE::read(unsigned char, unsigned char)>
c001aefd:	83 c4 10             	add    esp,0x10
c001af00:	4d                   	dec    ebp
c001af01:	75 ed                	jne    c001aef0 <IDE::polling(unsigned char, unsigned int)+0x14>
c001af03:	bb a0 86 01 00       	mov    ebx,0x186a0
c001af08:	50                   	push   eax
c001af09:	6a 0c                	push   0xc
c001af0b:	56                   	push   esi
c001af0c:	57                   	push   edi
c001af0d:	e8 ec f5 ff ff       	call   c001a4fe <IDE::read(unsigned char, unsigned char)>
c001af12:	83 c4 10             	add    esp,0x10
c001af15:	a8 01                	test   al,0x1
c001af17:	75 17                	jne    c001af30 <IDE::polling(unsigned char, unsigned int)+0x54>
c001af19:	a8 20                	test   al,0x20
c001af1b:	75 0f                	jne    c001af2c <IDE::polling(unsigned char, unsigned int)+0x50>
c001af1d:	4b                   	dec    ebx
c001af1e:	74 10                	je     c001af30 <IDE::polling(unsigned char, unsigned int)+0x54>
c001af20:	84 c0                	test   al,al
c001af22:	78 e4                	js     c001af08 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001af24:	a8 08                	test   al,0x8
c001af26:	74 e0                	je     c001af08 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001af28:	31 c0                	xor    eax,eax
c001af2a:	eb 06                	jmp    c001af32 <IDE::polling(unsigned char, unsigned int)+0x56>
c001af2c:	b0 01                	mov    al,0x1
c001af2e:	eb 02                	jmp    c001af32 <IDE::polling(unsigned char, unsigned int)+0x56>
c001af30:	b0 02                	mov    al,0x2
c001af32:	83 c4 0c             	add    esp,0xc
c001af35:	5b                   	pop    ebx
c001af36:	5e                   	pop    esi
c001af37:	5f                   	pop    edi
c001af38:	5d                   	pop    ebp
c001af39:	c3                   	ret    

c001af3a <SATABus::close(int, int, void*)>:
c001af3a:	31 c0                	xor    eax,eax
c001af3c:	c3                   	ret    
c001af3d:	90                   	nop

c001af3e <SATABus::detect()>:
c001af3e:	c3                   	ret    
c001af3f:	90                   	nop

c001af40 <SATABus::SATABus()>:
c001af40:	83 ec 0c             	sub    esp,0xc
c001af43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af47:	83 ec 08             	sub    esp,0x8
c001af4a:	68 3c 12 02 c0       	push   0xc002123c
c001af4f:	50                   	push   eax
c001af50:	e8 33 0e ff ff       	call   c000bd88 <HardDiskController::HardDiskController(char const*)>
c001af55:	83 c4 10             	add    esp,0x10
c001af58:	ba 68 12 02 c0       	mov    edx,0xc0021268
c001af5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af61:	89 10                	mov    DWORD PTR [eax],edx
c001af63:	83 ec 0c             	sub    esp,0xc
c001af66:	6a 50                	push   0x50
c001af68:	e8 92 cc fe ff       	call   c0007bff <Phys::allocateContiguousPages(int)>
c001af6d:	83 c4 10             	add    esp,0x10
c001af70:	89 c2                	mov    edx,eax
c001af72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af76:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001af7c:	83 ec 0c             	sub    esp,0xc
c001af7f:	6a 50                	push   0x50
c001af81:	e8 c3 e3 fe ff       	call   c0009349 <Virt::allocateKernelVirtualPages(int)>
c001af86:	83 c4 10             	add    esp,0x10
c001af89:	89 c2                	mov    edx,eax
c001af8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af8f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001af95:	a1 b0 3f 02 c0       	mov    eax,ds:0xc0023fb0
c001af9a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001af9e:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001afa4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001afa8:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001afae:	83 ec 0c             	sub    esp,0xc
c001afb1:	6a 03                	push   0x3
c001afb3:	6a 50                	push   0x50
c001afb5:	51                   	push   ecx
c001afb6:	52                   	push   edx
c001afb7:	50                   	push   eax
c001afb8:	e8 49 ed fe ff       	call   c0009d06 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001afbd:	83 c4 20             	add    esp,0x20
c001afc0:	90                   	nop
c001afc1:	83 c4 0c             	add    esp,0xc
c001afc4:	c3                   	ret    
c001afc5:	90                   	nop

c001afc6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001afc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001afca:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001afcd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001afd0:	09 c2                	or     edx,eax
c001afd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001afd6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001afdc:	8b 08                	mov    ecx,DWORD PTR [eax]
c001afde:	31 c0                	xor    eax,eax
c001afe0:	c1 e9 08             	shr    ecx,0x8
c001afe3:	83 e1 0f             	and    ecx,0xf
c001afe6:	39 c8                	cmp    eax,ecx
c001afe8:	74 0a                	je     c001aff4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001afea:	f6 c2 01             	test   dl,0x1
c001afed:	74 08                	je     c001aff7 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001afef:	d1 ea                	shr    edx,1
c001aff1:	40                   	inc    eax
c001aff2:	eb f2                	jmp    c001afe6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001aff4:	83 c8 ff             	or     eax,0xffffffff
c001aff7:	c3                   	ret    

c001aff8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001aff8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001affc:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001afff:	89 c2                	mov    edx,eax
c001b001:	c1 ea 08             	shr    edx,0x8
c001b004:	83 e2 0f             	and    edx,0xf
c001b007:	fe ca                	dec    dl
c001b009:	75 31                	jne    c001b03c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b00b:	83 e0 0f             	and    eax,0xf
c001b00e:	3c 03                	cmp    al,0x3
c001b010:	75 2a                	jne    c001b03c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b012:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001b015:	b8 02 00 00 00       	mov    eax,0x2
c001b01a:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001b020:	74 1c                	je     c001b03e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b022:	b8 04 00 00 00       	mov    eax,0x4
c001b027:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001b02d:	74 0f                	je     c001b03e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b02f:	31 c0                	xor    eax,eax
c001b031:	83 fa 03             	cmp    edx,0x3
c001b034:	0f 94 c0             	sete   al
c001b037:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001b03b:	c3                   	ret    
c001b03c:	31 c0                	xor    eax,eax
c001b03e:	c3                   	ret    
c001b03f:	90                   	nop

c001b040 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001b040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b044:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b047:	0f ba e2 0f          	bt     edx,0xf
c001b04b:	72 f7                	jb     c001b044 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001b04d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b050:	83 ca 10             	or     edx,0x10
c001b053:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b056:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b059:	83 ca 01             	or     edx,0x1
c001b05c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b05f:	c3                   	ret    

c001b060 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001b060:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b064:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b067:	83 e2 fe             	and    edx,0xfffffffe
c001b06a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b06d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b070:	83 e2 ef             	and    edx,0xffffffef
c001b073:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b076:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b079:	0f ba e2 0e          	bt     edx,0xe
c001b07d:	72 f7                	jb     c001b076 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b07f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b082:	0f ba e2 0f          	bt     edx,0xf
c001b086:	72 ee                	jb     c001b076 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b088:	c3                   	ret    
c001b089:	90                   	nop

c001b08a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001b08a:	55                   	push   ebp
c001b08b:	57                   	push   edi
c001b08c:	56                   	push   esi
c001b08d:	53                   	push   ebx
c001b08e:	83 ec 1c             	sub    esp,0x1c
c001b091:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b095:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b099:	53                   	push   ebx
c001b09a:	56                   	push   esi
c001b09b:	e8 c0 ff ff ff       	call   c001b060 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b0a0:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001b0a4:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001b0aa:	83 ec 0c             	sub    esp,0xc
c001b0ad:	c1 e5 0a             	shl    ebp,0xa
c001b0b0:	01 e8                	add    eax,ebp
c001b0b2:	89 03                	mov    DWORD PTR [ebx],eax
c001b0b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b0b6:	68 00 04 00 00       	push   0x400
c001b0bb:	6a 00                	push   0x0
c001b0bd:	50                   	push   eax
c001b0be:	e8 fd 53 fe ff       	call   c00004c0 <memset>
c001b0c3:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001b0c9:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001b0cd:	01 e8                	add    eax,ebp
c001b0cf:	83 c4 1c             	add    esp,0x1c
c001b0d2:	89 03                	mov    DWORD PTR [ebx],eax
c001b0d4:	c1 e2 08             	shl    edx,0x8
c001b0d7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b0de:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001b0e4:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001b0ea:	01 f8                	add    eax,edi
c001b0ec:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b0ef:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001b0f2:	68 00 01 00 00       	push   0x100
c001b0f7:	6a 00                	push   0x0
c001b0f9:	50                   	push   eax
c001b0fa:	e8 c1 53 fe ff       	call   c00004c0 <memset>
c001b0ff:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001b105:	01 fa                	add    edx,edi
c001b107:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001b10b:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001b10e:	c1 e7 0d             	shl    edi,0xd
c001b111:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b118:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001b11e:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001b124:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b128:	31 ff                	xor    edi,edi
c001b12a:	83 c4 10             	add    esp,0x10
c001b12d:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001b133:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b137:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001b13d:	83 c5 20             	add    ebp,0x20
c001b140:	01 f8                	add    eax,edi
c001b142:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b145:	52                   	push   edx
c001b146:	68 00 01 00 00       	push   0x100
c001b14b:	6a 00                	push   0x0
c001b14d:	50                   	push   eax
c001b14e:	e8 6d 53 fe ff       	call   c00004c0 <memset>
c001b153:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b157:	83 c4 10             	add    esp,0x10
c001b15a:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001b160:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001b167:	01 f8                	add    eax,edi
c001b169:	81 c7 00 01 00 00    	add    edi,0x100
c001b16f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b172:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001b178:	75 b3                	jne    c001b12d <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001b17a:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b181:	50                   	push   eax
c001b182:	50                   	push   eax
c001b183:	53                   	push   ebx
c001b184:	56                   	push   esi
c001b185:	e8 b6 fe ff ff       	call   c001b040 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b18a:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b191:	83 c4 2c             	add    esp,0x2c
c001b194:	5b                   	pop    ebx
c001b195:	5e                   	pop    esi
c001b196:	5f                   	pop    edi
c001b197:	5d                   	pop    ebp
c001b198:	c3                   	ret    
c001b199:	90                   	nop

c001b19a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001b19a:	55                   	push   ebp
c001b19b:	57                   	push   edi
c001b19c:	56                   	push   esi
c001b19d:	53                   	push   ebx
c001b19e:	31 db                	xor    ebx,ebx
c001b1a0:	83 ec 0c             	sub    esp,0xc
c001b1a3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b1a7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b1ab:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001b1ae:	f7 c7 01 00 00 00    	test   edi,0x1
c001b1b4:	74 7a                	je     c001b230 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b1b6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b1ba:	89 d8                	mov    eax,ebx
c001b1bc:	c1 e0 07             	shl    eax,0x7
c001b1bf:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001b1c6:	55                   	push   ebp
c001b1c7:	56                   	push   esi
c001b1c8:	e8 2b fe ff ff       	call   c001aff8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001b1cd:	5a                   	pop    edx
c001b1ce:	83 f8 01             	cmp    eax,0x1
c001b1d1:	59                   	pop    ecx
c001b1d2:	75 21                	jne    c001b1f5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001b1d4:	50                   	push   eax
c001b1d5:	53                   	push   ebx
c001b1d6:	55                   	push   ebp
c001b1d7:	56                   	push   esi
c001b1d8:	e8 ad fe ff ff       	call   c001b08a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b1dd:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001b1e4:	e8 7c c6 fe ff       	call   c0007865 <malloc>
c001b1e9:	89 c5                	mov    ebp,eax
c001b1eb:	89 04 24             	mov    DWORD PTR [esp],eax
c001b1ee:	e8 71 10 00 00       	call   c001c264 <SATA::SATA()>
c001b1f3:	eb 24                	jmp    c001b219 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001b1f5:	83 f8 04             	cmp    eax,0x4
c001b1f8:	75 36                	jne    c001b230 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b1fa:	51                   	push   ecx
c001b1fb:	53                   	push   ebx
c001b1fc:	55                   	push   ebp
c001b1fd:	56                   	push   esi
c001b1fe:	e8 87 fe ff ff       	call   c001b08a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b203:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001b20a:	e8 56 c6 fe ff       	call   c0007865 <malloc>
c001b20f:	89 c5                	mov    ebp,eax
c001b211:	89 04 24             	mov    DWORD PTR [esp],eax
c001b214:	e8 a5 17 00 00       	call   c001c9be <SATAPI::SATAPI()>
c001b219:	58                   	pop    eax
c001b21a:	5a                   	pop    edx
c001b21b:	55                   	push   ebp
c001b21c:	56                   	push   esi
c001b21d:	e8 22 08 ff ff       	call   c000ba44 <Device::addChild(Device*)>
c001b222:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b225:	56                   	push   esi
c001b226:	6a 00                	push   0x0
c001b228:	53                   	push   ebx
c001b229:	55                   	push   ebp
c001b22a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b22d:	83 c4 20             	add    esp,0x20
c001b230:	d1 ef                	shr    edi,1
c001b232:	43                   	inc    ebx
c001b233:	83 fb 20             	cmp    ebx,0x20
c001b236:	0f 85 72 ff ff ff    	jne    c001b1ae <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001b23c:	83 c4 0c             	add    esp,0xc
c001b23f:	5b                   	pop    ebx
c001b240:	5e                   	pop    esi
c001b241:	5f                   	pop    edi
c001b242:	5d                   	pop    ebp
c001b243:	c3                   	ret    

c001b244 <SATABus::open(int, int, void*)>:
c001b244:	83 ec 14             	sub    esp,0x14
c001b247:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b24b:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001b251:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b257:	52                   	push   edx
c001b258:	50                   	push   eax
c001b259:	e8 3c ff ff ff       	call   c001b19a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001b25e:	31 c0                	xor    eax,eax
c001b260:	83 c4 1c             	add    esp,0x1c
c001b263:	c3                   	ret    

c001b264 <ATA::close(int, int, void*)>:
c001b264:	83 ec 0c             	sub    esp,0xc
c001b267:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b26b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b271:	85 c0                	test   eax,eax
c001b273:	74 0c                	je     c001b281 <ATA::close(int, int, void*)+0x1d>
c001b275:	83 ec 0c             	sub    esp,0xc
c001b278:	8b 10                	mov    edx,DWORD PTR [eax]
c001b27a:	50                   	push   eax
c001b27b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b27e:	83 c4 10             	add    esp,0x10
c001b281:	31 c0                	xor    eax,eax
c001b283:	83 c4 0c             	add    esp,0xc
c001b286:	c3                   	ret    
c001b287:	90                   	nop

c001b288 <ATA::powerSaving(PowerSavingLevel)>:
c001b288:	c3                   	ret    
c001b289:	90                   	nop

c001b28a <ATA::ATA()>:
c001b28a:	83 ec 0c             	sub    esp,0xc
c001b28d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b291:	83 ec 04             	sub    esp,0x4
c001b294:	68 00 02 00 00       	push   0x200
c001b299:	68 35 13 02 c0       	push   0xc0021335
c001b29e:	50                   	push   eax
c001b29f:	e8 6e 0b ff ff       	call   c000be12 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001b2a4:	83 c4 10             	add    esp,0x10
c001b2a7:	ba a8 12 02 c0       	mov    edx,0xc00212a8
c001b2ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2b0:	89 10                	mov    DWORD PTR [eax],edx
c001b2b2:	90                   	nop
c001b2b3:	83 c4 0c             	add    esp,0xc
c001b2b6:	c3                   	ret    
c001b2b7:	90                   	nop

c001b2b8 <ATA::flush(bool)>:
c001b2b8:	53                   	push   ebx
c001b2b9:	83 ec 08             	sub    esp,0x8
c001b2bc:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001b2c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b2c5:	19 c0                	sbb    eax,eax
c001b2c7:	83 e0 fd             	and    eax,0xfffffffd
c001b2ca:	05 ea 00 00 00       	add    eax,0xea
c001b2cf:	50                   	push   eax
c001b2d0:	6a 07                	push   0x7
c001b2d2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b2d9:	50                   	push   eax
c001b2da:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b2e0:	e8 59 f1 ff ff       	call   c001a43e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b2e5:	83 c4 0c             	add    esp,0xc
c001b2e8:	6a 00                	push   0x0
c001b2ea:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b2f1:	50                   	push   eax
c001b2f2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b2f8:	e8 df fb ff ff       	call   c001aedc <IDE::polling(unsigned char, unsigned int)>
c001b2fd:	83 c4 18             	add    esp,0x18
c001b300:	5b                   	pop    ebx
c001b301:	c3                   	ret    

c001b302 <ATA::readyForCommand()>:
c001b302:	56                   	push   esi
c001b303:	53                   	push   ebx
c001b304:	53                   	push   ebx
c001b305:	31 db                	xor    ebx,ebx
c001b307:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b30b:	51                   	push   ecx
c001b30c:	6a 0c                	push   0xc
c001b30e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b315:	50                   	push   eax
c001b316:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b31c:	e8 dd f1 ff ff       	call   c001a4fe <IDE::read(unsigned char, unsigned char)>
c001b321:	83 c4 10             	add    esp,0x10
c001b324:	a8 88                	test   al,0x88
c001b326:	74 1f                	je     c001b347 <ATA::readyForCommand()+0x45>
c001b328:	43                   	inc    ebx
c001b329:	83 fb 63             	cmp    ebx,0x63
c001b32c:	7e dd                	jle    c001b30b <ATA::readyForCommand()+0x9>
c001b32e:	83 ec 0c             	sub    esp,0xc
c001b331:	6a 0a                	push   0xa
c001b333:	e8 24 9a ff ff       	call   c0014d5c <milliTenthSleep(unsigned int)>
c001b338:	83 c4 10             	add    esp,0x10
c001b33b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001b341:	75 c8                	jne    c001b30b <ATA::readyForCommand()+0x9>
c001b343:	31 c0                	xor    eax,eax
c001b345:	eb 02                	jmp    c001b349 <ATA::readyForCommand()+0x47>
c001b347:	b0 01                	mov    al,0x1
c001b349:	5a                   	pop    edx
c001b34a:	5b                   	pop    ebx
c001b34b:	5e                   	pop    esi
c001b34c:	c3                   	ret    
c001b34d:	90                   	nop

c001b34e <ATA::access(unsigned long long, int, void*, bool)>:
c001b34e:	55                   	push   ebp
c001b34f:	57                   	push   edi
c001b350:	56                   	push   esi
c001b351:	53                   	push   ebx
c001b352:	83 ec 2c             	sub    esp,0x2c
c001b355:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001b359:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001b35d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001b361:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b365:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001b369:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b36d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b371:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001b377:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b37b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001b381:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b385:	c1 e0 06             	shl    eax,0x6
c001b388:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001b390:	74 5d                	je     c001b3ef <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001b392:	89 fa                	mov    edx,edi
c001b394:	89 f0                	mov    eax,esi
c001b396:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001b39a:	c1 ea 1c             	shr    edx,0x1c
c001b39d:	89 d1                	mov    ecx,edx
c001b39f:	09 c1                	or     ecx,eax
c001b3a1:	74 25                	je     c001b3c8 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001b3a3:	31 ed                	xor    ebp,ebp
c001b3a5:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001b3ac:	89 fa                	mov    edx,edi
c001b3ae:	89 f0                	mov    eax,esi
c001b3b0:	0f ad d0             	shrd   eax,edx,cl
c001b3b3:	d3 ea                	shr    edx,cl
c001b3b5:	f6 c1 20             	test   cl,0x20
c001b3b8:	74 02                	je     c001b3bc <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001b3ba:	89 d0                	mov    eax,edx
c001b3bc:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001b3c0:	45                   	inc    ebp
c001b3c1:	83 fd 06             	cmp    ebp,0x6
c001b3c4:	75 df                	jne    c001b3a5 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001b3c6:	eb 76                	jmp    c001b43e <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001b3c8:	89 f0                	mov    eax,esi
c001b3ca:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001b3cf:	89 fa                	mov    edx,edi
c001b3d1:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001b3d8:	0f ac d0 10          	shrd   eax,edx,0x10
c001b3dc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001b3e1:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b3e5:	c1 ee 18             	shr    esi,0x18
c001b3e8:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001b3ed:	eb 56                	jmp    c001b445 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001b3ef:	6a 00                	push   0x0
c001b3f1:	6a 3f                	push   0x3f
c001b3f3:	57                   	push   edi
c001b3f4:	56                   	push   esi
c001b3f5:	e8 66 2a 00 00       	call   c001de60 <__umoddi3>
c001b3fa:	83 c4 10             	add    esp,0x10
c001b3fd:	40                   	inc    eax
c001b3fe:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001b402:	6a 00                	push   0x0
c001b404:	68 f0 03 00 00       	push   0x3f0
c001b409:	57                   	push   edi
c001b40a:	56                   	push   esi
c001b40b:	e8 50 29 00 00       	call   c001dd60 <__udivdi3>
c001b410:	83 c4 10             	add    esp,0x10
c001b413:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001b418:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001b41f:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001b424:	6a 00                	push   0x0
c001b426:	6a 3f                	push   0x3f
c001b428:	57                   	push   edi
c001b429:	56                   	push   esi
c001b42a:	e8 31 29 00 00       	call   c001dd60 <__udivdi3>
c001b42f:	83 c4 10             	add    esp,0x10
c001b432:	89 c6                	mov    esi,eax
c001b434:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001b439:	83 e6 0f             	and    esi,0xf
c001b43c:	eb 07                	jmp    c001b445 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001b43e:	31 f6                	xor    esi,esi
c001b440:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001b445:	bf 01 00 00 00       	mov    edi,0x1
c001b44a:	50                   	push   eax
c001b44b:	6a 00                	push   0x0
c001b44d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b454:	50                   	push   eax
c001b455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b459:	e8 ee f1 ff ff       	call   c001a64c <IDE::enableIRQs(unsigned char, bool)>
c001b45e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b461:	e8 9c fe ff ff       	call   c001b302 <ATA::readyForCommand()>
c001b466:	83 c4 10             	add    esp,0x10
c001b469:	84 c0                	test   al,al
c001b46b:	0f 84 4e 02 00 00    	je     c001b6bf <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001b471:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001b477:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001b47d:	c1 e0 04             	shl    eax,0x4
c001b480:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001b487:	09 c6                	or     esi,eax
c001b489:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001b48e:	75 05                	jne    c001b495 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001b490:	83 ce a0             	or     esi,0xffffffa0
c001b493:	eb 03                	jmp    c001b498 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001b495:	83 ce e0             	or     esi,0xffffffe0
c001b498:	89 f0                	mov    eax,esi
c001b49a:	0f b6 f0             	movzx  esi,al
c001b49d:	56                   	push   esi
c001b49e:	6a 06                	push   0x6
c001b4a0:	51                   	push   ecx
c001b4a1:	52                   	push   edx
c001b4a2:	e8 97 ef ff ff       	call   c001a43e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b4a7:	83 c4 10             	add    esp,0x10
c001b4aa:	6a 00                	push   0x0
c001b4ac:	6a 01                	push   0x1
c001b4ae:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b4b5:	50                   	push   eax
c001b4b6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b4bc:	e8 7d ef ff ff       	call   c001a43e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b4c1:	83 c4 10             	add    esp,0x10
c001b4c4:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001b4c9:	75 6e                	jne    c001b539 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001b4cb:	6a 00                	push   0x0
c001b4cd:	6a 08                	push   0x8
c001b4cf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b4d6:	50                   	push   eax
c001b4d7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b4dd:	e8 5c ef ff ff       	call   c001a43e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b4e2:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001b4e7:	50                   	push   eax
c001b4e8:	6a 09                	push   0x9
c001b4ea:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b4f1:	50                   	push   eax
c001b4f2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b4f8:	e8 41 ef ff ff       	call   c001a43e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b4fd:	83 c4 20             	add    esp,0x20
c001b500:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001b505:	50                   	push   eax
c001b506:	6a 0a                	push   0xa
c001b508:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b50f:	50                   	push   eax
c001b510:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b516:	e8 23 ef ff ff       	call   c001a43e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b51b:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001b520:	50                   	push   eax
c001b521:	6a 0b                	push   0xb
c001b523:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b52a:	50                   	push   eax
c001b52b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b531:	e8 08 ef ff ff       	call   c001a43e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b536:	83 c4 20             	add    esp,0x20
c001b539:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001b53e:	50                   	push   eax
c001b53f:	6a 02                	push   0x2
c001b541:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b548:	50                   	push   eax
c001b549:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b54f:	e8 ea ee ff ff       	call   c001a43e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b554:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001b559:	50                   	push   eax
c001b55a:	6a 03                	push   0x3
c001b55c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b563:	50                   	push   eax
c001b564:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b56a:	e8 cf ee ff ff       	call   c001a43e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b56f:	83 c4 20             	add    esp,0x20
c001b572:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001b577:	50                   	push   eax
c001b578:	6a 04                	push   0x4
c001b57a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b581:	50                   	push   eax
c001b582:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b588:	e8 b1 ee ff ff       	call   c001a43e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b58d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b592:	50                   	push   eax
c001b593:	6a 05                	push   0x5
c001b595:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b59c:	50                   	push   eax
c001b59d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b5a3:	e8 96 ee ff ff       	call   c001a43e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b5a8:	83 c4 20             	add    esp,0x20
c001b5ab:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001b5b0:	0f 94 c0             	sete   al
c001b5b3:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001b5b8:	74 09                	je     c001b5c3 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001b5ba:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001b5c1:	eb 07                	jmp    c001b5ca <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001b5c3:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001b5ca:	0f b6 c0             	movzx  eax,al
c001b5cd:	50                   	push   eax
c001b5ce:	6a 07                	push   0x7
c001b5d0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b5d7:	50                   	push   eax
c001b5d8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b5de:	e8 5b ee ff ff       	call   c001a43e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b5e3:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001b5e7:	83 c4 10             	add    esp,0x10
c001b5ea:	85 f6                	test   esi,esi
c001b5ec:	0f 84 ae 00 00 00    	je     c001b6a0 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001b5f2:	50                   	push   eax
c001b5f3:	6a 01                	push   0x1
c001b5f5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b5fc:	50                   	push   eax
c001b5fd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b603:	e8 d4 f8 ff ff       	call   c001aedc <IDE::polling(unsigned char, unsigned int)>
c001b608:	83 c4 10             	add    esp,0x10
c001b60b:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b611:	84 c0                	test   al,al
c001b613:	74 20                	je     c001b635 <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001b615:	0f b6 f8             	movzx  edi,al
c001b618:	0f b6 d2             	movzx  edx,dl
c001b61b:	57                   	push   edi
c001b61c:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001b623:	50                   	push   eax
c001b624:	52                   	push   edx
c001b625:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b62b:	e8 fc f7 ff ff       	call   c001ae2c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001b630:	e9 87 00 00 00       	jmp    c001b6bc <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001b635:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b63a:	74 33                	je     c001b66f <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001b63c:	31 ed                	xor    ebp,ebp
c001b63e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b642:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001b646:	50                   	push   eax
c001b647:	50                   	push   eax
c001b648:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b64f:	50                   	push   eax
c001b650:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b656:	e8 d1 ed ff ff       	call   c001a42c <IDE::getBase(unsigned char)>
c001b65b:	89 c2                	mov    edx,eax
c001b65d:	89 f8                	mov    eax,edi
c001b65f:	66 ef                	out    dx,ax
c001b661:	45                   	inc    ebp
c001b662:	83 c4 10             	add    esp,0x10
c001b665:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001b66b:	75 d1                	jne    c001b63e <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001b66d:	eb 23                	jmp    c001b692 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001b66f:	0f b6 d2             	movzx  edx,dl
c001b672:	51                   	push   ecx
c001b673:	51                   	push   ecx
c001b674:	52                   	push   edx
c001b675:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b67b:	e8 ac ed ff ff       	call   c001a42c <IDE::getBase(unsigned char)>
c001b680:	b9 00 01 00 00       	mov    ecx,0x100
c001b685:	89 c2                	mov    edx,eax
c001b687:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001b68b:	fc                   	cld    
c001b68c:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001b68f:	83 c4 10             	add    esp,0x10
c001b692:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001b69a:	4e                   	dec    esi
c001b69b:	e9 4a ff ff ff       	jmp    c001b5ea <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001b6a0:	31 ff                	xor    edi,edi
c001b6a2:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001b6a7:	74 16                	je     c001b6bf <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001b6a9:	50                   	push   eax
c001b6aa:	50                   	push   eax
c001b6ab:	31 c0                	xor    eax,eax
c001b6ad:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001b6b2:	0f 94 c0             	sete   al
c001b6b5:	50                   	push   eax
c001b6b6:	53                   	push   ebx
c001b6b7:	e8 fc fb ff ff       	call   c001b2b8 <ATA::flush(bool)>
c001b6bc:	83 c4 10             	add    esp,0x10
c001b6bf:	83 c4 2c             	add    esp,0x2c
c001b6c2:	89 f8                	mov    eax,edi
c001b6c4:	5b                   	pop    ebx
c001b6c5:	5e                   	pop    esi
c001b6c6:	5f                   	pop    edi
c001b6c7:	5d                   	pop    ebp
c001b6c8:	c3                   	ret    
c001b6c9:	90                   	nop

c001b6ca <ATA::detectCHS()>:
c001b6ca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b6ce:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001b6d4:	c1 e0 06             	shl    eax,0x6
c001b6d7:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001b6dd:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001b6e7:	c7 44 24 04 8c 12 02 c0 	mov    DWORD PTR [esp+0x4],0xc002128c
c001b6ef:	e9 d3 4c ff ff       	jmp    c00103c7 <KePanic(char const*)>

c001b6f4 <ATA::open(int, int, void*)>:
c001b6f4:	53                   	push   ebx
c001b6f5:	83 ec 08             	sub    esp,0x8
c001b6f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b6fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b700:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b704:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001b70a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001b710:	c1 e0 06             	shl    eax,0x6
c001b713:	01 d0                	add    eax,edx
c001b715:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001b71c:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001b722:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001b729:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001b733:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001b739:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001b740:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001b747:	75 0c                	jne    c001b755 <ATA::open(int, int, void*)+0x61>
c001b749:	83 ec 0c             	sub    esp,0xc
c001b74c:	53                   	push   ebx
c001b74d:	e8 78 ff ff ff       	call   c001b6ca <ATA::detectCHS()>
c001b752:	83 c4 10             	add    esp,0x10
c001b755:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001b75b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001b761:	c1 e0 06             	shl    eax,0x6
c001b764:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001b76b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b775:	d1 e8                	shr    eax,1
c001b777:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001b77d:	6a 04                	push   0x4
c001b77f:	6a 0c                	push   0xc
c001b781:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b788:	50                   	push   eax
c001b789:	52                   	push   edx
c001b78a:	e8 af ec ff ff       	call   c001a43e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b78f:	90                   	nop
c001b790:	90                   	nop
c001b791:	6a 00                	push   0x0
c001b793:	6a 0c                	push   0xc
c001b795:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b79c:	50                   	push   eax
c001b79d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b7a3:	e8 96 ec ff ff       	call   c001a43e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b7a8:	83 c4 14             	add    esp,0x14
c001b7ab:	53                   	push   ebx
c001b7ac:	e8 c9 06 ff ff       	call   c000be7a <PhysicalDisk::startCache()>
c001b7b1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b7b4:	e8 35 18 ff ff       	call   c000cfee <createPartitionsForDisk(PhysicalDisk*)>
c001b7b9:	31 c0                	xor    eax,eax
c001b7bb:	83 c4 18             	add    esp,0x18
c001b7be:	5b                   	pop    ebx
c001b7bf:	c3                   	ret    

c001b7c0 <combineCharAndColour(char, unsigned char)>:
c001b7c0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b7c5:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001b7cb:	c1 e0 08             	shl    eax,0x8
c001b7ce:	09 d0                	or     eax,edx
c001b7d0:	c3                   	ret    

c001b7d1 <combineColours(unsigned char, unsigned char)>:
c001b7d1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b7d6:	c1 e0 04             	shl    eax,0x4
c001b7d9:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001b7dd:	c3                   	ret    

c001b7de <ATA::read(unsigned long long, int, void*)>:
c001b7de:	55                   	push   ebp
c001b7df:	57                   	push   edi
c001b7e0:	56                   	push   esi
c001b7e1:	be 04 00 00 00       	mov    esi,0x4
c001b7e6:	53                   	push   ebx
c001b7e7:	83 ec 0c             	sub    esp,0xc
c001b7ea:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b7ee:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b7f2:	8d 7b ff             	lea    edi,[ebx-0x1]
c001b7f5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b7f9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b7fd:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001b803:	0f 87 a1 01 00 00    	ja     c001b9aa <ATA::read(unsigned long long, int, void*)+0x1cc>
c001b809:	be 06 00 00 00       	mov    esi,0x6
c001b80e:	85 c9                	test   ecx,ecx
c001b810:	0f 84 94 01 00 00    	je     c001b9aa <ATA::read(unsigned long long, int, void*)+0x1cc>
c001b816:	55                   	push   ebp
c001b817:	55                   	push   ebp
c001b818:	6a 00                	push   0x0
c001b81a:	51                   	push   ecx
c001b81b:	53                   	push   ebx
c001b81c:	52                   	push   edx
c001b81d:	50                   	push   eax
c001b81e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b822:	e8 27 fb ff ff       	call   c001b34e <ATA::access(unsigned long long, int, void*, bool)>
c001b827:	83 c4 20             	add    esp,0x20
c001b82a:	89 c6                	mov    esi,eax
c001b82c:	85 c0                	test   eax,eax
c001b82e:	0f 85 71 01 00 00    	jne    c001b9a5 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001b834:	03 1d 54 7b 02 c0    	add    ebx,DWORD PTR ds:0xc0027b54
c001b83a:	89 da                	mov    edx,ebx
c001b83c:	50                   	push   eax
c001b83d:	bd 10 27 00 00       	mov    ebp,0x2710
c001b842:	50                   	push   eax
c001b843:	89 1d 54 7b 02 c0    	mov    DWORD PTR ds:0xc0027b54,ebx
c001b849:	6a 0f                	push   0xf
c001b84b:	6a 00                	push   0x0
c001b84d:	e8 7f ff ff ff       	call   c001b7d1 <combineColours(unsigned char, unsigned char)>
c001b852:	59                   	pop    ecx
c001b853:	b9 0a 00 00 00       	mov    ecx,0xa
c001b858:	5b                   	pop    ebx
c001b859:	0f b6 d8             	movzx  ebx,al
c001b85c:	89 d0                	mov    eax,edx
c001b85e:	53                   	push   ebx
c001b85f:	99                   	cdq    
c001b860:	f7 fd                	idiv   ebp
c001b862:	99                   	cdq    
c001b863:	f7 f9                	idiv   ecx
c001b865:	83 c2 30             	add    edx,0x30
c001b868:	0f b6 d2             	movzx  edx,dl
c001b86b:	52                   	push   edx
c001b86c:	e8 4f ff ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001b871:	5f                   	pop    edi
c001b872:	bf e8 03 00 00       	mov    edi,0x3e8
c001b877:	5a                   	pop    edx
c001b878:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001b87e:	53                   	push   ebx
c001b87f:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b884:	99                   	cdq    
c001b885:	f7 ff                	idiv   edi
c001b887:	99                   	cdq    
c001b888:	f7 f9                	idiv   ecx
c001b88a:	8d 42 30             	lea    eax,[edx+0x30]
c001b88d:	0f b6 c0             	movzx  eax,al
c001b890:	50                   	push   eax
c001b891:	e8 2a ff ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001b896:	5f                   	pop    edi
c001b897:	bf 64 00 00 00       	mov    edi,0x64
c001b89c:	5a                   	pop    edx
c001b89d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001b8a3:	53                   	push   ebx
c001b8a4:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b8a9:	99                   	cdq    
c001b8aa:	f7 ff                	idiv   edi
c001b8ac:	99                   	cdq    
c001b8ad:	f7 f9                	idiv   ecx
c001b8af:	8d 42 30             	lea    eax,[edx+0x30]
c001b8b2:	0f b6 c0             	movzx  eax,al
c001b8b5:	50                   	push   eax
c001b8b6:	e8 05 ff ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001b8bb:	5a                   	pop    edx
c001b8bc:	5a                   	pop    edx
c001b8bd:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001b8c3:	53                   	push   ebx
c001b8c4:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b8c9:	99                   	cdq    
c001b8ca:	f7 f9                	idiv   ecx
c001b8cc:	99                   	cdq    
c001b8cd:	f7 f9                	idiv   ecx
c001b8cf:	8d 42 30             	lea    eax,[edx+0x30]
c001b8d2:	0f b6 c0             	movzx  eax,al
c001b8d5:	50                   	push   eax
c001b8d6:	e8 e5 fe ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001b8db:	5a                   	pop    edx
c001b8dc:	5a                   	pop    edx
c001b8dd:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001b8e3:	53                   	push   ebx
c001b8e4:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b8e9:	99                   	cdq    
c001b8ea:	f7 f9                	idiv   ecx
c001b8ec:	83 c2 30             	add    edx,0x30
c001b8ef:	0f b6 d2             	movzx  edx,dl
c001b8f2:	52                   	push   edx
c001b8f3:	e8 c8 fe ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001b8f8:	5a                   	pop    edx
c001b8f9:	5a                   	pop    edx
c001b8fa:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001b900:	53                   	push   ebx
c001b901:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b906:	99                   	cdq    
c001b907:	f7 fd                	idiv   ebp
c001b909:	99                   	cdq    
c001b90a:	f7 f9                	idiv   ecx
c001b90c:	8d 42 30             	lea    eax,[edx+0x30]
c001b90f:	0f b6 c0             	movzx  eax,al
c001b912:	50                   	push   eax
c001b913:	e8 a8 fe ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001b918:	5d                   	pop    ebp
c001b919:	bd e8 03 00 00       	mov    ebp,0x3e8
c001b91e:	5a                   	pop    edx
c001b91f:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001b925:	53                   	push   ebx
c001b926:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b92b:	99                   	cdq    
c001b92c:	f7 fd                	idiv   ebp
c001b92e:	99                   	cdq    
c001b92f:	f7 f9                	idiv   ecx
c001b931:	8d 42 30             	lea    eax,[edx+0x30]
c001b934:	0f b6 c0             	movzx  eax,al
c001b937:	50                   	push   eax
c001b938:	e8 83 fe ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001b93d:	5d                   	pop    ebp
c001b93e:	5a                   	pop    edx
c001b93f:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001b945:	53                   	push   ebx
c001b946:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b94b:	99                   	cdq    
c001b94c:	f7 ff                	idiv   edi
c001b94e:	99                   	cdq    
c001b94f:	f7 f9                	idiv   ecx
c001b951:	8d 42 30             	lea    eax,[edx+0x30]
c001b954:	0f b6 c0             	movzx  eax,al
c001b957:	50                   	push   eax
c001b958:	e8 63 fe ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001b95d:	5f                   	pop    edi
c001b95e:	5d                   	pop    ebp
c001b95f:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001b965:	53                   	push   ebx
c001b966:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b96b:	99                   	cdq    
c001b96c:	f7 f9                	idiv   ecx
c001b96e:	99                   	cdq    
c001b96f:	f7 f9                	idiv   ecx
c001b971:	8d 42 30             	lea    eax,[edx+0x30]
c001b974:	0f b6 c0             	movzx  eax,al
c001b977:	50                   	push   eax
c001b978:	e8 43 fe ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001b97d:	5a                   	pop    edx
c001b97e:	5f                   	pop    edi
c001b97f:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001b985:	53                   	push   ebx
c001b986:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b98b:	99                   	cdq    
c001b98c:	f7 f9                	idiv   ecx
c001b98e:	83 c2 30             	add    edx,0x30
c001b991:	0f b6 d2             	movzx  edx,dl
c001b994:	52                   	push   edx
c001b995:	e8 26 fe ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001b99a:	83 c4 10             	add    esp,0x10
c001b99d:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001b9a3:	eb 05                	jmp    c001b9aa <ATA::read(unsigned long long, int, void*)+0x1cc>
c001b9a5:	be 01 00 00 00       	mov    esi,0x1
c001b9aa:	83 c4 0c             	add    esp,0xc
c001b9ad:	89 f0                	mov    eax,esi
c001b9af:	5b                   	pop    ebx
c001b9b0:	5e                   	pop    esi
c001b9b1:	5f                   	pop    edi
c001b9b2:	5d                   	pop    ebp
c001b9b3:	c3                   	ret    

c001b9b4 <ATA::write(unsigned long long, int, void*)>:
c001b9b4:	55                   	push   ebp
c001b9b5:	57                   	push   edi
c001b9b6:	56                   	push   esi
c001b9b7:	be 04 00 00 00       	mov    esi,0x4
c001b9bc:	53                   	push   ebx
c001b9bd:	83 ec 0c             	sub    esp,0xc
c001b9c0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b9c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b9c8:	8d 7b ff             	lea    edi,[ebx-0x1]
c001b9cb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b9cf:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b9d3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001b9d9:	0f 87 9c 01 00 00    	ja     c001bb7b <ATA::write(unsigned long long, int, void*)+0x1c7>
c001b9df:	be 06 00 00 00       	mov    esi,0x6
c001b9e4:	85 c9                	test   ecx,ecx
c001b9e6:	0f 84 8f 01 00 00    	je     c001bb7b <ATA::write(unsigned long long, int, void*)+0x1c7>
c001b9ec:	55                   	push   ebp
c001b9ed:	55                   	push   ebp
c001b9ee:	6a 01                	push   0x1
c001b9f0:	51                   	push   ecx
c001b9f1:	53                   	push   ebx
c001b9f2:	52                   	push   edx
c001b9f3:	50                   	push   eax
c001b9f4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b9f8:	e8 51 f9 ff ff       	call   c001b34e <ATA::access(unsigned long long, int, void*, bool)>
c001b9fd:	83 c4 20             	add    esp,0x20
c001ba00:	89 c6                	mov    esi,eax
c001ba02:	85 c0                	test   eax,eax
c001ba04:	0f 85 6c 01 00 00    	jne    c001bb76 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001ba0a:	01 1d 50 7b 02 c0    	add    DWORD PTR ds:0xc0027b50,ebx
c001ba10:	bd 10 27 00 00       	mov    ebp,0x2710
c001ba15:	50                   	push   eax
c001ba16:	50                   	push   eax
c001ba17:	6a 0f                	push   0xf
c001ba19:	6a 00                	push   0x0
c001ba1b:	e8 b1 fd ff ff       	call   c001b7d1 <combineColours(unsigned char, unsigned char)>
c001ba20:	5a                   	pop    edx
c001ba21:	0f b6 d8             	movzx  ebx,al
c001ba24:	59                   	pop    ecx
c001ba25:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001ba2a:	53                   	push   ebx
c001ba2b:	b9 0a 00 00 00       	mov    ecx,0xa
c001ba30:	99                   	cdq    
c001ba31:	f7 fd                	idiv   ebp
c001ba33:	99                   	cdq    
c001ba34:	f7 f9                	idiv   ecx
c001ba36:	8d 42 30             	lea    eax,[edx+0x30]
c001ba39:	0f b6 c0             	movzx  eax,al
c001ba3c:	50                   	push   eax
c001ba3d:	e8 7e fd ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001ba42:	5f                   	pop    edi
c001ba43:	bf e8 03 00 00       	mov    edi,0x3e8
c001ba48:	5a                   	pop    edx
c001ba49:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001ba4f:	53                   	push   ebx
c001ba50:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001ba55:	99                   	cdq    
c001ba56:	f7 ff                	idiv   edi
c001ba58:	99                   	cdq    
c001ba59:	f7 f9                	idiv   ecx
c001ba5b:	8d 42 30             	lea    eax,[edx+0x30]
c001ba5e:	0f b6 c0             	movzx  eax,al
c001ba61:	50                   	push   eax
c001ba62:	e8 59 fd ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001ba67:	5f                   	pop    edi
c001ba68:	bf 64 00 00 00       	mov    edi,0x64
c001ba6d:	5a                   	pop    edx
c001ba6e:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001ba74:	53                   	push   ebx
c001ba75:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001ba7a:	99                   	cdq    
c001ba7b:	f7 ff                	idiv   edi
c001ba7d:	99                   	cdq    
c001ba7e:	f7 f9                	idiv   ecx
c001ba80:	8d 42 30             	lea    eax,[edx+0x30]
c001ba83:	0f b6 c0             	movzx  eax,al
c001ba86:	50                   	push   eax
c001ba87:	e8 34 fd ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001ba8c:	5a                   	pop    edx
c001ba8d:	5a                   	pop    edx
c001ba8e:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ba94:	53                   	push   ebx
c001ba95:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001ba9a:	99                   	cdq    
c001ba9b:	f7 f9                	idiv   ecx
c001ba9d:	99                   	cdq    
c001ba9e:	f7 f9                	idiv   ecx
c001baa0:	8d 42 30             	lea    eax,[edx+0x30]
c001baa3:	0f b6 c0             	movzx  eax,al
c001baa6:	50                   	push   eax
c001baa7:	e8 14 fd ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001baac:	5a                   	pop    edx
c001baad:	5a                   	pop    edx
c001baae:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001bab4:	53                   	push   ebx
c001bab5:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001baba:	99                   	cdq    
c001babb:	f7 f9                	idiv   ecx
c001babd:	8d 42 30             	lea    eax,[edx+0x30]
c001bac0:	0f b6 c0             	movzx  eax,al
c001bac3:	50                   	push   eax
c001bac4:	e8 f7 fc ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001bac9:	5a                   	pop    edx
c001baca:	5a                   	pop    edx
c001bacb:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001bad1:	53                   	push   ebx
c001bad2:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001bad7:	99                   	cdq    
c001bad8:	f7 fd                	idiv   ebp
c001bada:	99                   	cdq    
c001badb:	f7 f9                	idiv   ecx
c001badd:	8d 42 30             	lea    eax,[edx+0x30]
c001bae0:	0f b6 c0             	movzx  eax,al
c001bae3:	50                   	push   eax
c001bae4:	e8 d7 fc ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001bae9:	5d                   	pop    ebp
c001baea:	bd e8 03 00 00       	mov    ebp,0x3e8
c001baef:	5a                   	pop    edx
c001baf0:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001baf6:	53                   	push   ebx
c001baf7:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001bafc:	99                   	cdq    
c001bafd:	f7 fd                	idiv   ebp
c001baff:	99                   	cdq    
c001bb00:	f7 f9                	idiv   ecx
c001bb02:	8d 42 30             	lea    eax,[edx+0x30]
c001bb05:	0f b6 c0             	movzx  eax,al
c001bb08:	50                   	push   eax
c001bb09:	e8 b2 fc ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001bb0e:	5d                   	pop    ebp
c001bb0f:	5a                   	pop    edx
c001bb10:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001bb16:	53                   	push   ebx
c001bb17:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001bb1c:	99                   	cdq    
c001bb1d:	f7 ff                	idiv   edi
c001bb1f:	99                   	cdq    
c001bb20:	f7 f9                	idiv   ecx
c001bb22:	8d 42 30             	lea    eax,[edx+0x30]
c001bb25:	0f b6 c0             	movzx  eax,al
c001bb28:	50                   	push   eax
c001bb29:	e8 92 fc ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001bb2e:	5f                   	pop    edi
c001bb2f:	5d                   	pop    ebp
c001bb30:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001bb36:	53                   	push   ebx
c001bb37:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001bb3c:	99                   	cdq    
c001bb3d:	f7 f9                	idiv   ecx
c001bb3f:	99                   	cdq    
c001bb40:	f7 f9                	idiv   ecx
c001bb42:	8d 42 30             	lea    eax,[edx+0x30]
c001bb45:	0f b6 c0             	movzx  eax,al
c001bb48:	50                   	push   eax
c001bb49:	e8 72 fc ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001bb4e:	5a                   	pop    edx
c001bb4f:	5f                   	pop    edi
c001bb50:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001bb56:	53                   	push   ebx
c001bb57:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001bb5c:	99                   	cdq    
c001bb5d:	f7 f9                	idiv   ecx
c001bb5f:	83 c2 30             	add    edx,0x30
c001bb62:	0f b6 d2             	movzx  edx,dl
c001bb65:	52                   	push   edx
c001bb66:	e8 55 fc ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001bb6b:	83 c4 10             	add    esp,0x10
c001bb6e:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001bb74:	eb 05                	jmp    c001bb7b <ATA::write(unsigned long long, int, void*)+0x1c7>
c001bb76:	be 01 00 00 00       	mov    esi,0x1
c001bb7b:	83 c4 0c             	add    esp,0xc
c001bb7e:	89 f0                	mov    eax,esi
c001bb80:	5b                   	pop    ebx
c001bb81:	5e                   	pop    esi
c001bb82:	5f                   	pop    edi
c001bb83:	5d                   	pop    ebp
c001bb84:	c3                   	ret    
c001bb85:	90                   	nop

c001bb86 <ATAPI::write(unsigned long long, int, void*)>:
c001bb86:	b8 03 00 00 00       	mov    eax,0x3
c001bb8b:	c3                   	ret    

c001bb8c <ATAPI::close(int, int, void*)>:
c001bb8c:	83 ec 0c             	sub    esp,0xc
c001bb8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb93:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001bb99:	85 c0                	test   eax,eax
c001bb9b:	74 0c                	je     c001bba9 <ATAPI::close(int, int, void*)+0x1d>
c001bb9d:	83 ec 0c             	sub    esp,0xc
c001bba0:	8b 10                	mov    edx,DWORD PTR [eax]
c001bba2:	50                   	push   eax
c001bba3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001bba6:	83 c4 10             	add    esp,0x10
c001bba9:	31 c0                	xor    eax,eax
c001bbab:	83 c4 0c             	add    esp,0xc
c001bbae:	c3                   	ret    
c001bbaf:	90                   	nop

c001bbb0 <ATAPI::ATAPI()>:
c001bbb0:	83 ec 0c             	sub    esp,0xc
c001bbb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbb7:	83 ec 04             	sub    esp,0x4
c001bbba:	68 00 08 00 00       	push   0x800
c001bbbf:	68 d5 13 02 c0       	push   0xc00213d5
c001bbc4:	50                   	push   eax
c001bbc5:	e8 48 02 ff ff       	call   c000be12 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001bbca:	83 c4 10             	add    esp,0x10
c001bbcd:	ba f0 12 02 c0       	mov    edx,0xc00212f0
c001bbd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbd6:	89 10                	mov    DWORD PTR [eax],edx
c001bbd8:	90                   	nop
c001bbd9:	83 c4 0c             	add    esp,0xc
c001bbdc:	c3                   	ret    
c001bbdd:	90                   	nop

c001bbde <ATAPI::readyForCommand()>:
c001bbde:	56                   	push   esi
c001bbdf:	53                   	push   ebx
c001bbe0:	53                   	push   ebx
c001bbe1:	31 db                	xor    ebx,ebx
c001bbe3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bbe7:	51                   	push   ecx
c001bbe8:	6a 0c                	push   0xc
c001bbea:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bbf1:	50                   	push   eax
c001bbf2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bbf8:	e8 01 e9 ff ff       	call   c001a4fe <IDE::read(unsigned char, unsigned char)>
c001bbfd:	83 c4 10             	add    esp,0x10
c001bc00:	a8 88                	test   al,0x88
c001bc02:	74 25                	je     c001bc29 <ATAPI::readyForCommand()+0x4b>
c001bc04:	43                   	inc    ebx
c001bc05:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001bc0b:	7e da                	jle    c001bbe7 <ATAPI::readyForCommand()+0x9>
c001bc0d:	83 ec 0c             	sub    esp,0xc
c001bc10:	68 5e 01 00 00       	push   0x15e
c001bc15:	e8 42 91 ff ff       	call   c0014d5c <milliTenthSleep(unsigned int)>
c001bc1a:	83 c4 10             	add    esp,0x10
c001bc1d:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001bc23:	75 c2                	jne    c001bbe7 <ATAPI::readyForCommand()+0x9>
c001bc25:	31 c0                	xor    eax,eax
c001bc27:	eb 02                	jmp    c001bc2b <ATAPI::readyForCommand()+0x4d>
c001bc29:	b0 01                	mov    al,0x1
c001bc2b:	5a                   	pop    edx
c001bc2c:	5b                   	pop    ebx
c001bc2d:	5e                   	pop    esi
c001bc2e:	c3                   	ret    
c001bc2f:	90                   	nop

c001bc30 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001bc30:	55                   	push   ebp
c001bc31:	57                   	push   edi
c001bc32:	56                   	push   esi
c001bc33:	53                   	push   ebx
c001bc34:	83 ec 20             	sub    esp,0x20
c001bc37:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001bc3b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001bc3f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001bc43:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001bc47:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001bc4b:	6a 01                	push   0x1
c001bc4d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bc54:	50                   	push   eax
c001bc55:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bc5b:	e8 ec e9 ff ff       	call   c001a64c <IDE::enableIRQs(unsigned char, bool)>
c001bc60:	5e                   	pop    esi
c001bc61:	58                   	pop    eax
c001bc62:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bc69:	50                   	push   eax
c001bc6a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bc70:	e8 a3 e7 ff ff       	call   c001a418 <IDE::prepareInterrupt(unsigned char)>
c001bc75:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bc78:	e8 61 ff ff ff       	call   c001bbde <ATAPI::readyForCommand()>
c001bc7d:	83 c4 10             	add    esp,0x10
c001bc80:	84 c0                	test   al,al
c001bc82:	75 0a                	jne    c001bc8e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001bc84:	bb 01 00 00 00       	mov    ebx,0x1
c001bc89:	e9 57 02 00 00       	jmp    c001bee5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001bc8e:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001bc94:	c1 e0 04             	shl    eax,0x4
c001bc97:	0f b6 c0             	movzx  eax,al
c001bc9a:	50                   	push   eax
c001bc9b:	6a 06                	push   0x6
c001bc9d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bca4:	50                   	push   eax
c001bca5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bcab:	e8 8e e7 ff ff       	call   c001a43e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bcb0:	6a 00                	push   0x0
c001bcb2:	6a 01                	push   0x1
c001bcb4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bcbb:	50                   	push   eax
c001bcbc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bcc2:	e8 77 e7 ff ff       	call   c001a43e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bcc7:	83 c4 20             	add    esp,0x20
c001bcca:	0f b6 c3             	movzx  eax,bl
c001bccd:	0f b6 df             	movzx  ebx,bh
c001bcd0:	50                   	push   eax
c001bcd1:	6a 04                	push   0x4
c001bcd3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bcda:	50                   	push   eax
c001bcdb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bce1:	e8 58 e7 ff ff       	call   c001a43e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bce6:	53                   	push   ebx
c001bce7:	6a 05                	push   0x5
c001bce9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bcf0:	50                   	push   eax
c001bcf1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bcf7:	e8 42 e7 ff ff       	call   c001a43e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bcfc:	83 c4 20             	add    esp,0x20
c001bcff:	68 a0 00 00 00       	push   0xa0
c001bd04:	6a 07                	push   0x7
c001bd06:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bd0d:	50                   	push   eax
c001bd0e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bd14:	e8 25 e7 ff ff       	call   c001a43e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd19:	83 c4 0c             	add    esp,0xc
c001bd1c:	6a 01                	push   0x1
c001bd1e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bd25:	50                   	push   eax
c001bd26:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bd2c:	e8 ab f1 ff ff       	call   c001aedc <IDE::polling(unsigned char, unsigned int)>
c001bd31:	83 c4 10             	add    esp,0x10
c001bd34:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001bd3a:	84 c0                	test   al,al
c001bd3c:	74 23                	je     c001bd61 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001bd3e:	0f b6 d8             	movzx  ebx,al
c001bd41:	0f b6 d2             	movzx  edx,dl
c001bd44:	53                   	push   ebx
c001bd45:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001bd4c:	50                   	push   eax
c001bd4d:	52                   	push   edx
c001bd4e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bd54:	e8 d3 f0 ff ff       	call   c001ae2c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001bd59:	83 c4 10             	add    esp,0x10
c001bd5c:	e9 84 01 00 00       	jmp    c001bee5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001bd61:	0f b6 d2             	movzx  edx,dl
c001bd64:	53                   	push   ebx
c001bd65:	53                   	push   ebx
c001bd66:	52                   	push   edx
c001bd67:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bd6d:	e8 ba e6 ff ff       	call   c001a42c <IDE::getBase(unsigned char)>
c001bd72:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001bd76:	b9 06 00 00 00       	mov    ecx,0x6
c001bd7b:	89 c2                	mov    edx,eax
c001bd7d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001bd80:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001bd84:	83 c4 10             	add    esp,0x10
c001bd87:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001bd8d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001bd94:	85 db                	test   ebx,ebx
c001bd96:	0f 84 ec 00 00 00    	je     c001be88 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001bd9c:	51                   	push   ecx
c001bd9d:	51                   	push   ecx
c001bd9e:	52                   	push   edx
c001bd9f:	50                   	push   eax
c001bda0:	e8 07 e8 ff ff       	call   c001a5ac <IDE::waitInterrupt(unsigned char)>
c001bda5:	83 c4 10             	add    esp,0x10
c001bda8:	84 c0                	test   al,al
c001bdaa:	0f 84 d4 fe ff ff    	je     c001bc84 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001bdb0:	56                   	push   esi
c001bdb1:	56                   	push   esi
c001bdb2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bdb9:	50                   	push   eax
c001bdba:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bdc0:	e8 53 e6 ff ff       	call   c001a418 <IDE::prepareInterrupt(unsigned char)>
c001bdc5:	83 c4 0c             	add    esp,0xc
c001bdc8:	6a 04                	push   0x4
c001bdca:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bdd1:	50                   	push   eax
c001bdd2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bdd8:	e8 21 e7 ff ff       	call   c001a4fe <IDE::read(unsigned char, unsigned char)>
c001bddd:	83 c4 0c             	add    esp,0xc
c001bde0:	89 c6                	mov    esi,eax
c001bde2:	6a 05                	push   0x5
c001bde4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bdeb:	50                   	push   eax
c001bdec:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bdf2:	e8 07 e7 ff ff       	call   c001a4fe <IDE::read(unsigned char, unsigned char)>
c001bdf7:	89 f1                	mov    ecx,esi
c001bdf9:	0f b6 c0             	movzx  eax,al
c001bdfc:	0f b6 f1             	movzx  esi,cl
c001bdff:	c1 e0 08             	shl    eax,0x8
c001be02:	09 c6                	or     esi,eax
c001be04:	d1 fe                	sar    esi,1
c001be06:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001be0a:	83 c4 10             	add    esp,0x10
c001be0d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001be12:	74 41                	je     c001be55 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001be14:	31 c9                	xor    ecx,ecx
c001be16:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001be1c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001be23:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001be27:	75 0a                	jne    c001be33 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001be29:	01 c9                	add    ecx,ecx
c001be2b:	01 cd                	add    ebp,ecx
c001be2d:	4b                   	dec    ebx
c001be2e:	e9 54 ff ff ff       	jmp    c001bd87 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001be33:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001be38:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001be3c:	51                   	push   ecx
c001be3d:	51                   	push   ecx
c001be3e:	52                   	push   edx
c001be3f:	50                   	push   eax
c001be40:	e8 e7 e5 ff ff       	call   c001a42c <IDE::getBase(unsigned char)>
c001be45:	89 c2                	mov    edx,eax
c001be47:	89 f0                	mov    eax,esi
c001be49:	66 ef                	out    dx,ax
c001be4b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001be4f:	83 c4 10             	add    esp,0x10
c001be52:	41                   	inc    ecx
c001be53:	eb c1                	jmp    c001be16 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001be55:	31 f6                	xor    esi,esi
c001be57:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001be5d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001be64:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001be68:	75 06                	jne    c001be70 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001be6a:	01 f6                	add    esi,esi
c001be6c:	01 f5                	add    ebp,esi
c001be6e:	eb bd                	jmp    c001be2d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001be70:	51                   	push   ecx
c001be71:	51                   	push   ecx
c001be72:	52                   	push   edx
c001be73:	50                   	push   eax
c001be74:	e8 b3 e5 ff ff       	call   c001a42c <IDE::getBase(unsigned char)>
c001be79:	89 c2                	mov    edx,eax
c001be7b:	66 ed                	in     ax,dx
c001be7d:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001be82:	83 c4 10             	add    esp,0x10
c001be85:	46                   	inc    esi
c001be86:	eb cf                	jmp    c001be57 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001be88:	51                   	push   ecx
c001be89:	51                   	push   ecx
c001be8a:	52                   	push   edx
c001be8b:	50                   	push   eax
c001be8c:	e8 1b e7 ff ff       	call   c001a5ac <IDE::waitInterrupt(unsigned char)>
c001be91:	83 c4 10             	add    esp,0x10
c001be94:	84 c0                	test   al,al
c001be96:	0f 84 e8 fd ff ff    	je     c001bc84 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001be9c:	bb a0 86 01 00       	mov    ebx,0x186a0
c001bea1:	52                   	push   edx
c001bea2:	52                   	push   edx
c001bea3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001beaa:	50                   	push   eax
c001beab:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001beb1:	e8 62 e5 ff ff       	call   c001a418 <IDE::prepareInterrupt(unsigned char)>
c001beb6:	83 c4 10             	add    esp,0x10
c001beb9:	50                   	push   eax
c001beba:	50                   	push   eax
c001bebb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bec2:	50                   	push   eax
c001bec3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bec9:	e8 5e e5 ff ff       	call   c001a42c <IDE::getBase(unsigned char)>
c001bece:	8d 50 07             	lea    edx,[eax+0x7]
c001bed1:	ec                   	in     al,dx
c001bed2:	83 c4 10             	add    esp,0x10
c001bed5:	a8 88                	test   al,0x88
c001bed7:	74 0a                	je     c001bee3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001bed9:	4b                   	dec    ebx
c001beda:	75 dd                	jne    c001beb9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001bedc:	bb 02 00 00 00       	mov    ebx,0x2
c001bee1:	eb 02                	jmp    c001bee5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001bee3:	31 db                	xor    ebx,ebx
c001bee5:	83 c4 1c             	add    esp,0x1c
c001bee8:	89 d8                	mov    eax,ebx
c001beea:	5b                   	pop    ebx
c001beeb:	5e                   	pop    esi
c001beec:	5f                   	pop    edi
c001beed:	5d                   	pop    ebp
c001beee:	c3                   	ret    
c001beef:	90                   	nop

c001bef0 <ATAPI::diskRemoved()>:
c001bef0:	53                   	push   ebx
c001bef1:	83 ec 14             	sub    esp,0x14
c001bef4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001bef8:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001beff:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001bf05:	e8 d2 0d ff ff       	call   c000ccdc <LogicalDisk::unmount()>
c001bf0a:	58                   	pop    eax
c001bf0b:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001bf11:	e8 a6 17 ff ff       	call   c000d6bc <VCache::writeWriteBuffer()>
c001bf16:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001bf1c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bf20:	83 c4 18             	add    esp,0x18
c001bf23:	5b                   	pop    ebx
c001bf24:	e9 83 17 ff ff       	jmp    c000d6ac <VCache::invalidateReadBuffer()>
c001bf29:	90                   	nop

c001bf2a <ATAPI::eject()>:
c001bf2a:	57                   	push   edi
c001bf2b:	b9 03 00 00 00       	mov    ecx,0x3
c001bf30:	53                   	push   ebx
c001bf31:	83 ec 14             	sub    esp,0x14
c001bf34:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bf38:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001bf3c:	fc                   	cld    
c001bf3d:	31 c0                	xor    eax,eax
c001bf3f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001bf41:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001bf46:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001bf4b:	50                   	push   eax
c001bf4c:	50                   	push   eax
c001bf4d:	6a 00                	push   0x0
c001bf4f:	6a 00                	push   0x0
c001bf51:	6a 00                	push   0x0
c001bf53:	6a 02                	push   0x2
c001bf55:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bf59:	50                   	push   eax
c001bf5a:	53                   	push   ebx
c001bf5b:	e8 d0 fc ff ff       	call   c001bc30 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001bf60:	83 c4 14             	add    esp,0x14
c001bf63:	53                   	push   ebx
c001bf64:	e8 87 ff ff ff       	call   c001bef0 <ATAPI::diskRemoved()>
c001bf69:	83 c4 24             	add    esp,0x24
c001bf6c:	31 c0                	xor    eax,eax
c001bf6e:	5b                   	pop    ebx
c001bf6f:	5f                   	pop    edi
c001bf70:	c3                   	ret    
c001bf71:	90                   	nop

c001bf72 <ATAPI::diskInserted()>:
c001bf72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf76:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001bf7d:	c3                   	ret    

c001bf7e <ATAPI::detectMedia()>:
c001bf7e:	56                   	push   esi
c001bf7f:	53                   	push   ebx
c001bf80:	83 ec 28             	sub    esp,0x28
c001bf83:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bf87:	6a 0c                	push   0xc
c001bf89:	6a 00                	push   0x0
c001bf8b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001bf8f:	56                   	push   esi
c001bf90:	e8 2b 45 fe ff       	call   c00004c0 <memset>
c001bf95:	58                   	pop    eax
c001bf96:	5a                   	pop    edx
c001bf97:	6a 00                	push   0x0
c001bf99:	6a 00                	push   0x0
c001bf9b:	6a 00                	push   0x0
c001bf9d:	6a 00                	push   0x0
c001bf9f:	56                   	push   esi
c001bfa0:	53                   	push   ebx
c001bfa1:	e8 8a fc ff ff       	call   c001bc30 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001bfa6:	83 c4 1c             	add    esp,0x1c
c001bfa9:	6a 0c                	push   0xc
c001bfab:	6a 00                	push   0x0
c001bfad:	56                   	push   esi
c001bfae:	e8 0d 45 fe ff       	call   c00004c0 <memset>
c001bfb3:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001bfb8:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001bfbd:	59                   	pop    ecx
c001bfbe:	58                   	pop    eax
c001bfbf:	6a 01                	push   0x1
c001bfc1:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001bfc5:	50                   	push   eax
c001bfc6:	6a 00                	push   0x0
c001bfc8:	6a 12                	push   0x12
c001bfca:	56                   	push   esi
c001bfcb:	53                   	push   ebx
c001bfcc:	e8 5f fc ff ff       	call   c001bc30 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001bfd1:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001bfd5:	83 c4 20             	add    esp,0x20
c001bfd8:	83 e0 7f             	and    eax,0x7f
c001bfdb:	3c 70                	cmp    al,0x70
c001bfdd:	74 15                	je     c001bff4 <ATAPI::detectMedia()+0x76>
c001bfdf:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001bfe6:	75 0c                	jne    c001bff4 <ATAPI::detectMedia()+0x76>
c001bfe8:	83 ec 0c             	sub    esp,0xc
c001bfeb:	53                   	push   ebx
c001bfec:	e8 81 ff ff ff       	call   c001bf72 <ATAPI::diskInserted()>
c001bff1:	83 c4 10             	add    esp,0x10
c001bff4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001bff8:	83 e0 0f             	and    eax,0xf
c001bffb:	3c 02                	cmp    al,0x2
c001bffd:	75 1b                	jne    c001c01a <ATAPI::detectMedia()+0x9c>
c001bfff:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001c004:	75 2d                	jne    c001c033 <ATAPI::detectMedia()+0xb5>
c001c006:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c00d:	74 24                	je     c001c033 <ATAPI::detectMedia()+0xb5>
c001c00f:	83 ec 0c             	sub    esp,0xc
c001c012:	53                   	push   ebx
c001c013:	e8 d8 fe ff ff       	call   c001bef0 <ATAPI::diskRemoved()>
c001c018:	eb 16                	jmp    c001c030 <ATAPI::detectMedia()+0xb2>
c001c01a:	84 c0                	test   al,al
c001c01c:	75 15                	jne    c001c033 <ATAPI::detectMedia()+0xb5>
c001c01e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c025:	75 0c                	jne    c001c033 <ATAPI::detectMedia()+0xb5>
c001c027:	83 ec 0c             	sub    esp,0xc
c001c02a:	53                   	push   ebx
c001c02b:	e8 42 ff ff ff       	call   c001bf72 <ATAPI::diskInserted()>
c001c030:	83 c4 10             	add    esp,0x10
c001c033:	83 c4 24             	add    esp,0x24
c001c036:	5b                   	pop    ebx
c001c037:	5e                   	pop    esi
c001c038:	c3                   	ret    
c001c039:	90                   	nop

c001c03a <ATAPI::open(int, int, void*)>:
c001c03a:	56                   	push   esi
c001c03b:	53                   	push   ebx
c001c03c:	50                   	push   eax
c001c03d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c041:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c045:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c049:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c04f:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c055:	c1 e0 06             	shl    eax,0x6
c001c058:	01 d0                	add    eax,edx
c001c05a:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001c061:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001c067:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001c06e:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001c078:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001c07e:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001c085:	6a 04                	push   0x4
c001c087:	6a 0c                	push   0xc
c001c089:	51                   	push   ecx
c001c08a:	52                   	push   edx
c001c08b:	e8 ae e3 ff ff       	call   c001a43e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c090:	90                   	nop
c001c091:	90                   	nop
c001c092:	6a 00                	push   0x0
c001c094:	6a 0c                	push   0xc
c001c096:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c09d:	50                   	push   eax
c001c09e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c0a4:	e8 95 e3 ff ff       	call   c001a43e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c0a9:	83 c4 14             	add    esp,0x14
c001c0ac:	68 78 01 00 00       	push   0x178
c001c0b1:	e8 af b7 fe ff       	call   c0007865 <malloc>
c001c0b6:	83 c4 0c             	add    esp,0xc
c001c0b9:	89 c6                	mov    esi,eax
c001c0bb:	6a 00                	push   0x0
c001c0bd:	68 ff ff ff 7f       	push   0x7fffffff
c001c0c2:	6a 00                	push   0x0
c001c0c4:	6a 00                	push   0x0
c001c0c6:	53                   	push   ebx
c001c0c7:	68 87 14 02 c0       	push   0xc0021487
c001c0cc:	50                   	push   eax
c001c0cd:	e8 4c 0a ff ff       	call   c000cb1e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c0d2:	83 c4 14             	add    esp,0x14
c001c0d5:	56                   	push   esi
c001c0d6:	e8 03 0b ff ff       	call   c000cbde <LogicalDisk::assignDriveLetter()>
c001c0db:	5a                   	pop    edx
c001c0dc:	0f be c0             	movsx  eax,al
c001c0df:	59                   	pop    ecx
c001c0e0:	50                   	push   eax
c001c0e1:	68 d8 12 02 c0       	push   0xc00212d8
c001c0e6:	e8 1b e5 fe ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c001c0eb:	58                   	pop    eax
c001c0ec:	5a                   	pop    edx
c001c0ed:	56                   	push   esi
c001c0ee:	53                   	push   ebx
c001c0ef:	e8 50 f9 fe ff       	call   c000ba44 <Device::addChild(Device*)>
c001c0f4:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001c0fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c0fd:	e8 78 fd fe ff       	call   c000be7a <PhysicalDisk::startCache()>
c001c102:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c109:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c10c:	e8 6d fe ff ff       	call   c001bf7e <ATAPI::detectMedia()>
c001c111:	83 c4 14             	add    esp,0x14
c001c114:	31 c0                	xor    eax,eax
c001c116:	5b                   	pop    ebx
c001c117:	5e                   	pop    esi
c001c118:	c3                   	ret    
c001c119:	90                   	nop

c001c11a <ATAPI::read(unsigned long long, int, void*)>:
c001c11a:	55                   	push   ebp
c001c11b:	57                   	push   edi
c001c11c:	56                   	push   esi
c001c11d:	53                   	push   ebx
c001c11e:	83 ec 1c             	sub    esp,0x1c
c001c121:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c125:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c129:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001c12d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c134:	74 3c                	je     c001c172 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001c136:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c13a:	b9 03 00 00 00       	mov    ecx,0x3
c001c13f:	fc                   	cld    
c001c140:	31 c0                	xor    eax,eax
c001c142:	0f ce                	bswap  esi
c001c144:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c146:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001c14b:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001c14f:	89 e8                	mov    eax,ebp
c001c151:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001c155:	50                   	push   eax
c001c156:	50                   	push   eax
c001c157:	55                   	push   ebp
c001c158:	c1 e5 0b             	shl    ebp,0xb
c001c15b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c15f:	6a 00                	push   0x0
c001c161:	55                   	push   ebp
c001c162:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c166:	50                   	push   eax
c001c167:	53                   	push   ebx
c001c168:	e8 c3 fa ff ff       	call   c001bc30 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c16d:	83 c4 20             	add    esp,0x20
c001c170:	eb 1a                	jmp    c001c18c <ATAPI::read(unsigned long long, int, void*)+0x72>
c001c172:	83 ec 0c             	sub    esp,0xc
c001c175:	53                   	push   ebx
c001c176:	e8 03 fe ff ff       	call   c001bf7e <ATAPI::detectMedia()>
c001c17b:	83 c4 10             	add    esp,0x10
c001c17e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c185:	75 af                	jne    c001c136 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001c187:	b8 02 00 00 00       	mov    eax,0x2
c001c18c:	83 c4 1c             	add    esp,0x1c
c001c18f:	5b                   	pop    ebx
c001c190:	5e                   	pop    esi
c001c191:	5f                   	pop    edi
c001c192:	5d                   	pop    ebp
c001c193:	c3                   	ret    

c001c194 <SATA::close(int, int, void*)>:
c001c194:	83 ec 0c             	sub    esp,0xc
c001c197:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c19b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c1a1:	85 c0                	test   eax,eax
c001c1a3:	74 0c                	je     c001c1b1 <SATA::close(int, int, void*)+0x1d>
c001c1a5:	83 ec 0c             	sub    esp,0xc
c001c1a8:	8b 10                	mov    edx,DWORD PTR [eax]
c001c1aa:	50                   	push   eax
c001c1ab:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c1ae:	83 c4 10             	add    esp,0x10
c001c1b1:	31 c0                	xor    eax,eax
c001c1b3:	83 c4 0c             	add    esp,0xc
c001c1b6:	c3                   	ret    
c001c1b7:	90                   	nop

c001c1b8 <SATA::powerSaving(PowerSavingLevel)>:
c001c1b8:	c3                   	ret    
c001c1b9:	90                   	nop

c001c1ba <SATA::open(int, int, void*)>:
c001c1ba:	56                   	push   esi
c001c1bb:	53                   	push   ebx
c001c1bc:	50                   	push   eax
c001c1bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c1c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c1c5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001c1cf:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001c1d5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001c1df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c1e3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c1ed:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001c1f3:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001c1fa:	e8 42 b9 fe ff       	call   c0007b41 <Phys::allocatePage()>
c001c1ff:	89 c6                	mov    esi,eax
c001c201:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001c207:	81 c6 00 10 00 00    	add    esi,0x1000
c001c20d:	e8 2f b9 fe ff       	call   c0007b41 <Phys::allocatePage()>
c001c212:	39 c6                	cmp    esi,eax
c001c214:	74 10                	je     c001c226 <SATA::open(int, int, void*)+0x6c>
c001c216:	83 ec 0c             	sub    esp,0xc
c001c219:	68 20 13 02 c0       	push   0xc0021320
c001c21e:	e8 a4 41 ff ff       	call   c00103c7 <KePanic(char const*)>
c001c223:	83 c4 10             	add    esp,0x10
c001c226:	83 ec 0c             	sub    esp,0xc
c001c229:	6a 02                	push   0x2
c001c22b:	e8 19 d1 fe ff       	call   c0009349 <Virt::allocateKernelVirtualPages(int)>
c001c230:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c236:	6a 03                	push   0x3
c001c238:	50                   	push   eax
c001c239:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001c23f:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c001c245:	e8 c2 d7 fe ff       	call   c0009a0c <VAS::mapPage(unsigned long, unsigned long, int)>
c001c24a:	83 c4 14             	add    esp,0x14
c001c24d:	53                   	push   ebx
c001c24e:	e8 27 fc fe ff       	call   c000be7a <PhysicalDisk::startCache()>
c001c253:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c256:	e8 93 0d ff ff       	call   c000cfee <createPartitionsForDisk(PhysicalDisk*)>
c001c25b:	83 c4 14             	add    esp,0x14
c001c25e:	31 c0                	xor    eax,eax
c001c260:	5b                   	pop    ebx
c001c261:	5e                   	pop    esi
c001c262:	c3                   	ret    
c001c263:	90                   	nop

c001c264 <SATA::SATA()>:
c001c264:	83 ec 0c             	sub    esp,0xc
c001c267:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c26b:	83 ec 04             	sub    esp,0x4
c001c26e:	68 00 02 00 00       	push   0x200
c001c273:	68 34 13 02 c0       	push   0xc0021334
c001c278:	50                   	push   eax
c001c279:	e8 94 fb fe ff       	call   c000be12 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c27e:	83 c4 10             	add    esp,0x10
c001c281:	ba a4 13 02 c0       	mov    edx,0xc00213a4
c001c286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c28a:	89 10                	mov    DWORD PTR [eax],edx
c001c28c:	90                   	nop
c001c28d:	83 c4 0c             	add    esp,0xc
c001c290:	c3                   	ret    
c001c291:	90                   	nop

c001c292 <SATA::access(unsigned long long, int, void*, bool)>:
c001c292:	55                   	push   ebp
c001c293:	57                   	push   edi
c001c294:	56                   	push   esi
c001c295:	53                   	push   ebx
c001c296:	83 ec 2c             	sub    esp,0x2c
c001c299:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c29d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c2a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c2a5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c2a9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c2ad:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001c2b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c2b6:	7e 10                	jle    c001c2c8 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001c2b8:	83 ec 0c             	sub    esp,0xc
c001c2bb:	68 44 13 02 c0       	push   0xc0021344
c001c2c0:	e8 02 41 ff ff       	call   c00103c7 <KePanic(char const*)>
c001c2c5:	83 c4 10             	add    esp,0x10
c001c2c8:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c2ce:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001c2d4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c2da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c2de:	89 d0                	mov    eax,edx
c001c2e0:	c1 e0 07             	shl    eax,0x7
c001c2e3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001c2e7:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001c2f1:	51                   	push   ecx
c001c2f2:	8d 42 02             	lea    eax,[edx+0x2]
c001c2f5:	51                   	push   ecx
c001c2f6:	c1 e0 07             	shl    eax,0x7
c001c2f9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c2fd:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001c301:	50                   	push   eax
c001c302:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001c308:	e8 b9 ec ff ff       	call   c001afc6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001c30d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c311:	83 c4 10             	add    esp,0x10
c001c314:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001c319:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c31d:	0f 84 4f 01 00 00    	je     c001c472 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001c323:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001c327:	c1 e0 09             	shl    eax,0x9
c001c32a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001c32f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c333:	74 0e                	je     c001c343 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001c335:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001c33b:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001c33f:	89 c1                	mov    ecx,eax
c001c341:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c343:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c347:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001c34d:	8d 42 02             	lea    eax,[edx+0x2]
c001c350:	c1 e0 07             	shl    eax,0x7
c001c353:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001c357:	8b 00                	mov    eax,DWORD PTR [eax]
c001c359:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001c35f:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001c365:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c369:	c1 e1 05             	shl    ecx,0x5
c001c36c:	01 c8                	add    eax,ecx
c001c36e:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001c372:	83 e1 01             	and    ecx,0x1
c001c375:	89 ce                	mov    esi,ecx
c001c377:	8a 08                	mov    cl,BYTE PTR [eax]
c001c379:	c1 e6 06             	shl    esi,0x6
c001c37c:	83 e1 bf             	and    ecx,0xffffffbf
c001c37f:	09 f1                	or     ecx,esi
c001c381:	88 08                	mov    BYTE PTR [eax],cl
c001c383:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c385:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001c38b:	81 c9 05 00 01 00    	or     ecx,0x10005
c001c391:	89 08                	mov    DWORD PTR [eax],ecx
c001c393:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001c399:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001c39f:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001c3a5:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001c3a8:	50                   	push   eax
c001c3a9:	68 90 00 00 00       	push   0x90
c001c3ae:	6a 00                	push   0x0
c001c3b0:	56                   	push   esi
c001c3b1:	e8 0a 41 fe ff       	call   c00004c0 <memset>
c001c3b6:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c3bc:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001c3c0:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001c3c6:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001c3ca:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c3ce:	83 c4 10             	add    esp,0x10
c001c3d1:	48                   	dec    eax
c001c3d2:	25 ff ff 3f 00       	and    eax,0x3fffff
c001c3d7:	89 c1                	mov    ecx,eax
c001c3d9:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001c3df:	25 00 00 c0 ff       	and    eax,0xffc00000
c001c3e4:	09 c8                	or     eax,ecx
c001c3e6:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001c3ec:	66 8b 06             	mov    ax,WORD PTR [esi]
c001c3ef:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001c3f6:	66 25 00 7f          	and    ax,0x7f00
c001c3fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c3fe:	66 0d 27 80          	or     ax,0x8027
c001c402:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001c407:	66 89 06             	mov    WORD PTR [esi],ax
c001c40a:	19 c0                	sbb    eax,eax
c001c40c:	83 e0 f0             	and    eax,0xfffffff0
c001c40f:	83 c0 35             	add    eax,0x35
c001c412:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001c415:	89 e8                	mov    eax,ebp
c001c417:	c1 e8 10             	shr    eax,0x10
c001c41a:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001c41d:	89 e8                	mov    eax,ebp
c001c41f:	c1 e8 18             	shr    eax,0x18
c001c422:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001c425:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001c429:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001c42c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c430:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001c433:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001c437:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001c43b:	89 d6                	mov    esi,edx
c001c43d:	31 c0                	xor    eax,eax
c001c43f:	c1 e6 07             	shl    esi,0x7
c001c442:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c446:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001c44c:	80 e1 88             	and    cl,0x88
c001c44f:	74 0a                	je     c001c45b <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001c451:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001c456:	74 0a                	je     c001c462 <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001c458:	40                   	inc    eax
c001c459:	eb eb                	jmp    c001c446 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001c45b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001c460:	75 17                	jne    c001c479 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001c462:	83 ec 0c             	sub    esp,0xc
c001c465:	68 7d 13 02 c0       	push   0xc002137d
c001c46a:	e8 97 e1 fe ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c001c46f:	83 c4 10             	add    esp,0x10
c001c472:	b8 01 00 00 00       	mov    eax,0x1
c001c477:	eb 5d                	jmp    c001c4d6 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001c479:	b8 01 00 00 00       	mov    eax,0x1
c001c47e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001c482:	c1 e2 07             	shl    edx,0x7
c001c485:	d3 e0                	shl    eax,cl
c001c487:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001c48b:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001c491:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001c497:	85 c8                	test   eax,ecx
c001c499:	74 16                	je     c001c4b1 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001c49b:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001c4a1:	0f ba e1 1e          	bt     ecx,0x1e
c001c4a5:	73 ea                	jae    c001c491 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001c4a7:	83 ec 0c             	sub    esp,0xc
c001c4aa:	68 8b 13 02 c0       	push   0xc002138b
c001c4af:	eb b9                	jmp    c001c46a <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001c4b1:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001c4b7:	0f ba e0 1e          	bt     eax,0x1e
c001c4bb:	72 b5                	jb     c001c472 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001c4bd:	31 c0                	xor    eax,eax
c001c4bf:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001c4c4:	75 10                	jne    c001c4d6 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001c4c6:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001c4cc:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001c4d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c4d4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c4d6:	83 c4 2c             	add    esp,0x2c
c001c4d9:	5b                   	pop    ebx
c001c4da:	5e                   	pop    esi
c001c4db:	5f                   	pop    edi
c001c4dc:	5d                   	pop    ebp
c001c4dd:	c3                   	ret    

c001c4de <SATA::read(unsigned long long, int, void*)>:
c001c4de:	55                   	push   ebp
c001c4df:	57                   	push   edi
c001c4e0:	56                   	push   esi
c001c4e1:	be 04 00 00 00       	mov    esi,0x4
c001c4e6:	53                   	push   ebx
c001c4e7:	83 ec 0c             	sub    esp,0xc
c001c4ea:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c4ee:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c4f2:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c4f5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c4f9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c4fd:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c503:	0f 87 1a 02 00 00    	ja     c001c723 <SATA::read(unsigned long long, int, void*)+0x245>
c001c509:	be 06 00 00 00       	mov    esi,0x6
c001c50e:	85 c9                	test   ecx,ecx
c001c510:	0f 84 0d 02 00 00    	je     c001c723 <SATA::read(unsigned long long, int, void*)+0x245>
c001c516:	56                   	push   esi
c001c517:	56                   	push   esi
c001c518:	6a 00                	push   0x0
c001c51a:	51                   	push   ecx
c001c51b:	53                   	push   ebx
c001c51c:	52                   	push   edx
c001c51d:	50                   	push   eax
c001c51e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c522:	e8 6b fd ff ff       	call   c001c292 <SATA::access(unsigned long long, int, void*, bool)>
c001c527:	83 c4 20             	add    esp,0x20
c001c52a:	89 c6                	mov    esi,eax
c001c52c:	85 c0                	test   eax,eax
c001c52e:	0f 85 ea 01 00 00    	jne    c001c71e <SATA::read(unsigned long long, int, void*)+0x240>
c001c534:	01 1d 54 7b 02 c0    	add    DWORD PTR ds:0xc0027b54,ebx
c001c53a:	bb 0a 00 00 00       	mov    ebx,0xa
c001c53f:	50                   	push   eax
c001c540:	50                   	push   eax
c001c541:	6a 0f                	push   0xf
c001c543:	6a 00                	push   0x0
c001c545:	e8 87 f2 ff ff       	call   c001b7d1 <combineColours(unsigned char, unsigned char)>
c001c54a:	5a                   	pop    edx
c001c54b:	0f b6 c0             	movzx  eax,al
c001c54e:	59                   	pop    ecx
c001c54f:	b9 10 27 00 00       	mov    ecx,0x2710
c001c554:	50                   	push   eax
c001c555:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c55a:	99                   	cdq    
c001c55b:	f7 f9                	idiv   ecx
c001c55d:	99                   	cdq    
c001c55e:	f7 fb                	idiv   ebx
c001c560:	8d 42 30             	lea    eax,[edx+0x30]
c001c563:	0f b6 c0             	movzx  eax,al
c001c566:	50                   	push   eax
c001c567:	e8 54 f2 ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001c56c:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c572:	5f                   	pop    edi
c001c573:	5d                   	pop    ebp
c001c574:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c579:	6a 0f                	push   0xf
c001c57b:	6a 00                	push   0x0
c001c57d:	e8 4f f2 ff ff       	call   c001b7d1 <combineColours(unsigned char, unsigned char)>
c001c582:	5a                   	pop    edx
c001c583:	0f b6 c0             	movzx  eax,al
c001c586:	59                   	pop    ecx
c001c587:	50                   	push   eax
c001c588:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c58d:	99                   	cdq    
c001c58e:	f7 fd                	idiv   ebp
c001c590:	99                   	cdq    
c001c591:	f7 fb                	idiv   ebx
c001c593:	8d 42 30             	lea    eax,[edx+0x30]
c001c596:	0f b6 c0             	movzx  eax,al
c001c599:	50                   	push   eax
c001c59a:	e8 21 f2 ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001c59f:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c5a5:	5f                   	pop    edi
c001c5a6:	bf 64 00 00 00       	mov    edi,0x64
c001c5ab:	58                   	pop    eax
c001c5ac:	6a 0f                	push   0xf
c001c5ae:	6a 00                	push   0x0
c001c5b0:	e8 1c f2 ff ff       	call   c001b7d1 <combineColours(unsigned char, unsigned char)>
c001c5b5:	5a                   	pop    edx
c001c5b6:	0f b6 c0             	movzx  eax,al
c001c5b9:	59                   	pop    ecx
c001c5ba:	50                   	push   eax
c001c5bb:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c5c0:	99                   	cdq    
c001c5c1:	f7 ff                	idiv   edi
c001c5c3:	99                   	cdq    
c001c5c4:	f7 fb                	idiv   ebx
c001c5c6:	8d 42 30             	lea    eax,[edx+0x30]
c001c5c9:	0f b6 c0             	movzx  eax,al
c001c5cc:	50                   	push   eax
c001c5cd:	e8 ee f1 ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001c5d2:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c5d8:	58                   	pop    eax
c001c5d9:	5a                   	pop    edx
c001c5da:	6a 0f                	push   0xf
c001c5dc:	6a 00                	push   0x0
c001c5de:	e8 ee f1 ff ff       	call   c001b7d1 <combineColours(unsigned char, unsigned char)>
c001c5e3:	59                   	pop    ecx
c001c5e4:	0f b6 c0             	movzx  eax,al
c001c5e7:	5a                   	pop    edx
c001c5e8:	50                   	push   eax
c001c5e9:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c5ee:	99                   	cdq    
c001c5ef:	f7 fb                	idiv   ebx
c001c5f1:	99                   	cdq    
c001c5f2:	f7 fb                	idiv   ebx
c001c5f4:	8d 42 30             	lea    eax,[edx+0x30]
c001c5f7:	0f b6 c0             	movzx  eax,al
c001c5fa:	50                   	push   eax
c001c5fb:	e8 c0 f1 ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001c600:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c606:	59                   	pop    ecx
c001c607:	58                   	pop    eax
c001c608:	6a 0f                	push   0xf
c001c60a:	6a 00                	push   0x0
c001c60c:	e8 c0 f1 ff ff       	call   c001b7d1 <combineColours(unsigned char, unsigned char)>
c001c611:	5a                   	pop    edx
c001c612:	0f b6 c0             	movzx  eax,al
c001c615:	59                   	pop    ecx
c001c616:	50                   	push   eax
c001c617:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c61c:	99                   	cdq    
c001c61d:	f7 fb                	idiv   ebx
c001c61f:	8d 42 30             	lea    eax,[edx+0x30]
c001c622:	0f b6 c0             	movzx  eax,al
c001c625:	50                   	push   eax
c001c626:	e8 95 f1 ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001c62b:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c631:	58                   	pop    eax
c001c632:	5a                   	pop    edx
c001c633:	6a 0f                	push   0xf
c001c635:	6a 00                	push   0x0
c001c637:	e8 95 f1 ff ff       	call   c001b7d1 <combineColours(unsigned char, unsigned char)>
c001c63c:	59                   	pop    ecx
c001c63d:	0f b6 c0             	movzx  eax,al
c001c640:	5a                   	pop    edx
c001c641:	b9 10 27 00 00       	mov    ecx,0x2710
c001c646:	50                   	push   eax
c001c647:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c64c:	99                   	cdq    
c001c64d:	f7 f9                	idiv   ecx
c001c64f:	99                   	cdq    
c001c650:	f7 fb                	idiv   ebx
c001c652:	8d 42 30             	lea    eax,[edx+0x30]
c001c655:	0f b6 c0             	movzx  eax,al
c001c658:	50                   	push   eax
c001c659:	e8 62 f1 ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001c65e:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c664:	59                   	pop    ecx
c001c665:	58                   	pop    eax
c001c666:	6a 0f                	push   0xf
c001c668:	6a 00                	push   0x0
c001c66a:	e8 62 f1 ff ff       	call   c001b7d1 <combineColours(unsigned char, unsigned char)>
c001c66f:	5a                   	pop    edx
c001c670:	0f b6 c0             	movzx  eax,al
c001c673:	59                   	pop    ecx
c001c674:	50                   	push   eax
c001c675:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c67a:	99                   	cdq    
c001c67b:	f7 fd                	idiv   ebp
c001c67d:	99                   	cdq    
c001c67e:	f7 fb                	idiv   ebx
c001c680:	8d 42 30             	lea    eax,[edx+0x30]
c001c683:	0f b6 c0             	movzx  eax,al
c001c686:	50                   	push   eax
c001c687:	e8 34 f1 ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001c68c:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c692:	5d                   	pop    ebp
c001c693:	58                   	pop    eax
c001c694:	6a 0f                	push   0xf
c001c696:	6a 00                	push   0x0
c001c698:	e8 34 f1 ff ff       	call   c001b7d1 <combineColours(unsigned char, unsigned char)>
c001c69d:	5a                   	pop    edx
c001c69e:	0f b6 c0             	movzx  eax,al
c001c6a1:	59                   	pop    ecx
c001c6a2:	50                   	push   eax
c001c6a3:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c6a8:	99                   	cdq    
c001c6a9:	f7 ff                	idiv   edi
c001c6ab:	99                   	cdq    
c001c6ac:	f7 fb                	idiv   ebx
c001c6ae:	8d 42 30             	lea    eax,[edx+0x30]
c001c6b1:	0f b6 c0             	movzx  eax,al
c001c6b4:	50                   	push   eax
c001c6b5:	e8 06 f1 ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001c6ba:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c6c0:	5f                   	pop    edi
c001c6c1:	5d                   	pop    ebp
c001c6c2:	6a 0f                	push   0xf
c001c6c4:	6a 00                	push   0x0
c001c6c6:	e8 06 f1 ff ff       	call   c001b7d1 <combineColours(unsigned char, unsigned char)>
c001c6cb:	5a                   	pop    edx
c001c6cc:	0f b6 c0             	movzx  eax,al
c001c6cf:	59                   	pop    ecx
c001c6d0:	50                   	push   eax
c001c6d1:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c6d6:	99                   	cdq    
c001c6d7:	f7 fb                	idiv   ebx
c001c6d9:	99                   	cdq    
c001c6da:	f7 fb                	idiv   ebx
c001c6dc:	8d 42 30             	lea    eax,[edx+0x30]
c001c6df:	0f b6 c0             	movzx  eax,al
c001c6e2:	50                   	push   eax
c001c6e3:	e8 d8 f0 ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001c6e8:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c6ee:	5f                   	pop    edi
c001c6ef:	5d                   	pop    ebp
c001c6f0:	6a 0f                	push   0xf
c001c6f2:	6a 00                	push   0x0
c001c6f4:	e8 d8 f0 ff ff       	call   c001b7d1 <combineColours(unsigned char, unsigned char)>
c001c6f9:	5a                   	pop    edx
c001c6fa:	0f b6 c0             	movzx  eax,al
c001c6fd:	59                   	pop    ecx
c001c6fe:	50                   	push   eax
c001c6ff:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c704:	99                   	cdq    
c001c705:	f7 fb                	idiv   ebx
c001c707:	83 c2 30             	add    edx,0x30
c001c70a:	0f b6 d2             	movzx  edx,dl
c001c70d:	52                   	push   edx
c001c70e:	e8 ad f0 ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001c713:	83 c4 10             	add    esp,0x10
c001c716:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c71c:	eb 05                	jmp    c001c723 <SATA::read(unsigned long long, int, void*)+0x245>
c001c71e:	be 01 00 00 00       	mov    esi,0x1
c001c723:	83 c4 0c             	add    esp,0xc
c001c726:	89 f0                	mov    eax,esi
c001c728:	5b                   	pop    ebx
c001c729:	5e                   	pop    esi
c001c72a:	5f                   	pop    edi
c001c72b:	5d                   	pop    ebp
c001c72c:	c3                   	ret    
c001c72d:	90                   	nop

c001c72e <SATA::write(unsigned long long, int, void*)>:
c001c72e:	55                   	push   ebp
c001c72f:	b8 04 00 00 00       	mov    eax,0x4
c001c734:	57                   	push   edi
c001c735:	56                   	push   esi
c001c736:	53                   	push   ebx
c001c737:	83 ec 1c             	sub    esp,0x1c
c001c73a:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001c73e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001c742:	8d 75 ff             	lea    esi,[ebp-0x1]
c001c745:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c749:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001c74d:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001c753:	0f 87 32 02 00 00    	ja     c001c98b <SATA::write(unsigned long long, int, void*)+0x25d>
c001c759:	b8 06 00 00 00       	mov    eax,0x6
c001c75e:	85 ff                	test   edi,edi
c001c760:	0f 84 25 02 00 00    	je     c001c98b <SATA::write(unsigned long long, int, void*)+0x25d>
c001c766:	89 ee                	mov    esi,ebp
c001c768:	c1 e6 09             	shl    esi,0x9
c001c76b:	01 fe                	add    esi,edi
c001c76d:	89 c8                	mov    eax,ecx
c001c76f:	89 da                	mov    edx,ebx
c001c771:	83 c0 01             	add    eax,0x1
c001c774:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c778:	83 d2 00             	adc    edx,0x0
c001c77b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c77f:	50                   	push   eax
c001c780:	50                   	push   eax
c001c781:	6a 01                	push   0x1
c001c783:	57                   	push   edi
c001c784:	81 c7 00 02 00 00    	add    edi,0x200
c001c78a:	6a 01                	push   0x1
c001c78c:	53                   	push   ebx
c001c78d:	51                   	push   ecx
c001c78e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c792:	e8 fb fa ff ff       	call   c001c292 <SATA::access(unsigned long long, int, void*, bool)>
c001c797:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001c79b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c79f:	83 c4 20             	add    esp,0x20
c001c7a2:	39 f7                	cmp    edi,esi
c001c7a4:	75 c7                	jne    c001c76d <SATA::write(unsigned long long, int, void*)+0x3f>
c001c7a6:	bb 0a 00 00 00       	mov    ebx,0xa
c001c7ab:	01 2d 50 7b 02 c0    	add    DWORD PTR ds:0xc0027b50,ebp
c001c7b1:	bd 10 27 00 00       	mov    ebp,0x2710
c001c7b6:	50                   	push   eax
c001c7b7:	50                   	push   eax
c001c7b8:	6a 0f                	push   0xf
c001c7ba:	6a 00                	push   0x0
c001c7bc:	e8 10 f0 ff ff       	call   c001b7d1 <combineColours(unsigned char, unsigned char)>
c001c7c1:	5a                   	pop    edx
c001c7c2:	0f b6 c0             	movzx  eax,al
c001c7c5:	59                   	pop    ecx
c001c7c6:	50                   	push   eax
c001c7c7:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c7cc:	99                   	cdq    
c001c7cd:	f7 fd                	idiv   ebp
c001c7cf:	99                   	cdq    
c001c7d0:	f7 fb                	idiv   ebx
c001c7d2:	8d 42 30             	lea    eax,[edx+0x30]
c001c7d5:	0f b6 c0             	movzx  eax,al
c001c7d8:	50                   	push   eax
c001c7d9:	e8 e2 ef ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001c7de:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c7e4:	5e                   	pop    esi
c001c7e5:	5f                   	pop    edi
c001c7e6:	bf e8 03 00 00       	mov    edi,0x3e8
c001c7eb:	6a 0f                	push   0xf
c001c7ed:	6a 00                	push   0x0
c001c7ef:	e8 dd ef ff ff       	call   c001b7d1 <combineColours(unsigned char, unsigned char)>
c001c7f4:	5a                   	pop    edx
c001c7f5:	0f b6 c0             	movzx  eax,al
c001c7f8:	59                   	pop    ecx
c001c7f9:	50                   	push   eax
c001c7fa:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c7ff:	99                   	cdq    
c001c800:	f7 ff                	idiv   edi
c001c802:	99                   	cdq    
c001c803:	f7 fb                	idiv   ebx
c001c805:	8d 42 30             	lea    eax,[edx+0x30]
c001c808:	0f b6 c0             	movzx  eax,al
c001c80b:	50                   	push   eax
c001c80c:	e8 af ef ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001c811:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c817:	5e                   	pop    esi
c001c818:	be 64 00 00 00       	mov    esi,0x64
c001c81d:	58                   	pop    eax
c001c81e:	6a 0f                	push   0xf
c001c820:	6a 00                	push   0x0
c001c822:	e8 aa ef ff ff       	call   c001b7d1 <combineColours(unsigned char, unsigned char)>
c001c827:	5a                   	pop    edx
c001c828:	0f b6 c0             	movzx  eax,al
c001c82b:	59                   	pop    ecx
c001c82c:	50                   	push   eax
c001c82d:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c832:	99                   	cdq    
c001c833:	f7 fe                	idiv   esi
c001c835:	99                   	cdq    
c001c836:	f7 fb                	idiv   ebx
c001c838:	8d 42 30             	lea    eax,[edx+0x30]
c001c83b:	0f b6 c0             	movzx  eax,al
c001c83e:	50                   	push   eax
c001c83f:	e8 7c ef ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001c844:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c84a:	58                   	pop    eax
c001c84b:	5a                   	pop    edx
c001c84c:	6a 0f                	push   0xf
c001c84e:	6a 00                	push   0x0
c001c850:	e8 7c ef ff ff       	call   c001b7d1 <combineColours(unsigned char, unsigned char)>
c001c855:	59                   	pop    ecx
c001c856:	0f b6 c0             	movzx  eax,al
c001c859:	5a                   	pop    edx
c001c85a:	50                   	push   eax
c001c85b:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c860:	99                   	cdq    
c001c861:	f7 fb                	idiv   ebx
c001c863:	99                   	cdq    
c001c864:	f7 fb                	idiv   ebx
c001c866:	8d 42 30             	lea    eax,[edx+0x30]
c001c869:	0f b6 c0             	movzx  eax,al
c001c86c:	50                   	push   eax
c001c86d:	e8 4e ef ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001c872:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c878:	59                   	pop    ecx
c001c879:	58                   	pop    eax
c001c87a:	6a 0f                	push   0xf
c001c87c:	6a 00                	push   0x0
c001c87e:	e8 4e ef ff ff       	call   c001b7d1 <combineColours(unsigned char, unsigned char)>
c001c883:	5a                   	pop    edx
c001c884:	0f b6 c0             	movzx  eax,al
c001c887:	59                   	pop    ecx
c001c888:	50                   	push   eax
c001c889:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c88e:	99                   	cdq    
c001c88f:	f7 fb                	idiv   ebx
c001c891:	83 c2 30             	add    edx,0x30
c001c894:	0f b6 d2             	movzx  edx,dl
c001c897:	52                   	push   edx
c001c898:	e8 23 ef ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001c89d:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c8a3:	58                   	pop    eax
c001c8a4:	5a                   	pop    edx
c001c8a5:	6a 0f                	push   0xf
c001c8a7:	6a 00                	push   0x0
c001c8a9:	e8 23 ef ff ff       	call   c001b7d1 <combineColours(unsigned char, unsigned char)>
c001c8ae:	59                   	pop    ecx
c001c8af:	0f b6 c0             	movzx  eax,al
c001c8b2:	5a                   	pop    edx
c001c8b3:	50                   	push   eax
c001c8b4:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c8b9:	99                   	cdq    
c001c8ba:	f7 fd                	idiv   ebp
c001c8bc:	99                   	cdq    
c001c8bd:	f7 fb                	idiv   ebx
c001c8bf:	8d 42 30             	lea    eax,[edx+0x30]
c001c8c2:	0f b6 c0             	movzx  eax,al
c001c8c5:	50                   	push   eax
c001c8c6:	e8 f5 ee ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001c8cb:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c8d1:	59                   	pop    ecx
c001c8d2:	5d                   	pop    ebp
c001c8d3:	6a 0f                	push   0xf
c001c8d5:	6a 00                	push   0x0
c001c8d7:	e8 f5 ee ff ff       	call   c001b7d1 <combineColours(unsigned char, unsigned char)>
c001c8dc:	5a                   	pop    edx
c001c8dd:	0f b6 c0             	movzx  eax,al
c001c8e0:	59                   	pop    ecx
c001c8e1:	50                   	push   eax
c001c8e2:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c8e7:	99                   	cdq    
c001c8e8:	f7 ff                	idiv   edi
c001c8ea:	99                   	cdq    
c001c8eb:	f7 fb                	idiv   ebx
c001c8ed:	8d 42 30             	lea    eax,[edx+0x30]
c001c8f0:	0f b6 c0             	movzx  eax,al
c001c8f3:	50                   	push   eax
c001c8f4:	e8 c7 ee ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001c8f9:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c8ff:	5f                   	pop    edi
c001c900:	5d                   	pop    ebp
c001c901:	6a 0f                	push   0xf
c001c903:	6a 00                	push   0x0
c001c905:	e8 c7 ee ff ff       	call   c001b7d1 <combineColours(unsigned char, unsigned char)>
c001c90a:	5a                   	pop    edx
c001c90b:	0f b6 c0             	movzx  eax,al
c001c90e:	59                   	pop    ecx
c001c90f:	50                   	push   eax
c001c910:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c915:	99                   	cdq    
c001c916:	f7 fe                	idiv   esi
c001c918:	99                   	cdq    
c001c919:	f7 fb                	idiv   ebx
c001c91b:	8d 42 30             	lea    eax,[edx+0x30]
c001c91e:	0f b6 c0             	movzx  eax,al
c001c921:	50                   	push   eax
c001c922:	e8 99 ee ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001c927:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c92d:	5e                   	pop    esi
c001c92e:	5f                   	pop    edi
c001c92f:	6a 0f                	push   0xf
c001c931:	6a 00                	push   0x0
c001c933:	e8 99 ee ff ff       	call   c001b7d1 <combineColours(unsigned char, unsigned char)>
c001c938:	5d                   	pop    ebp
c001c939:	0f b6 c0             	movzx  eax,al
c001c93c:	5a                   	pop    edx
c001c93d:	50                   	push   eax
c001c93e:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c943:	99                   	cdq    
c001c944:	f7 fb                	idiv   ebx
c001c946:	99                   	cdq    
c001c947:	f7 fb                	idiv   ebx
c001c949:	8d 42 30             	lea    eax,[edx+0x30]
c001c94c:	0f b6 c0             	movzx  eax,al
c001c94f:	50                   	push   eax
c001c950:	e8 6b ee ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001c955:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c95b:	59                   	pop    ecx
c001c95c:	5e                   	pop    esi
c001c95d:	6a 0f                	push   0xf
c001c95f:	6a 00                	push   0x0
c001c961:	e8 6b ee ff ff       	call   c001b7d1 <combineColours(unsigned char, unsigned char)>
c001c966:	5f                   	pop    edi
c001c967:	0f b6 c0             	movzx  eax,al
c001c96a:	5d                   	pop    ebp
c001c96b:	50                   	push   eax
c001c96c:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c971:	99                   	cdq    
c001c972:	f7 fb                	idiv   ebx
c001c974:	83 c2 30             	add    edx,0x30
c001c977:	0f b6 d2             	movzx  edx,dl
c001c97a:	52                   	push   edx
c001c97b:	e8 40 ee ff ff       	call   c001b7c0 <combineCharAndColour(char, unsigned char)>
c001c980:	83 c4 10             	add    esp,0x10
c001c983:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c989:	31 c0                	xor    eax,eax
c001c98b:	83 c4 1c             	add    esp,0x1c
c001c98e:	5b                   	pop    ebx
c001c98f:	5e                   	pop    esi
c001c990:	5f                   	pop    edi
c001c991:	5d                   	pop    ebp
c001c992:	c3                   	ret    
c001c993:	90                   	nop

c001c994 <SATAPI::write(unsigned long long, int, void*)>:
c001c994:	b8 03 00 00 00       	mov    eax,0x3
c001c999:	c3                   	ret    

c001c99a <SATAPI::close(int, int, void*)>:
c001c99a:	83 ec 0c             	sub    esp,0xc
c001c99d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9a1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c9a7:	85 c0                	test   eax,eax
c001c9a9:	74 0c                	je     c001c9b7 <SATAPI::close(int, int, void*)+0x1d>
c001c9ab:	83 ec 0c             	sub    esp,0xc
c001c9ae:	8b 10                	mov    edx,DWORD PTR [eax]
c001c9b0:	50                   	push   eax
c001c9b1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c9b4:	83 c4 10             	add    esp,0x10
c001c9b7:	31 c0                	xor    eax,eax
c001c9b9:	83 c4 0c             	add    esp,0xc
c001c9bc:	c3                   	ret    
c001c9bd:	90                   	nop

c001c9be <SATAPI::SATAPI()>:
c001c9be:	83 ec 0c             	sub    esp,0xc
c001c9c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9c5:	83 ec 04             	sub    esp,0x4
c001c9c8:	68 00 08 00 00       	push   0x800
c001c9cd:	68 d4 13 02 c0       	push   0xc00213d4
c001c9d2:	50                   	push   eax
c001c9d3:	e8 3a f4 fe ff       	call   c000be12 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c9d8:	83 c4 10             	add    esp,0x10
c001c9db:	ba c8 14 02 c0       	mov    edx,0xc00214c8
c001c9e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9e4:	89 10                	mov    DWORD PTR [eax],edx
c001c9e6:	90                   	nop
c001c9e7:	83 c4 0c             	add    esp,0xc
c001c9ea:	c3                   	ret    
c001c9eb:	90                   	nop

c001c9ec <SATAPI::diskRemoved()>:
c001c9ec:	c3                   	ret    
c001c9ed:	90                   	nop

c001c9ee <SATAPI::diskInserted()>:
c001c9ee:	83 ec 18             	sub    esp,0x18
c001c9f1:	68 e0 13 02 c0       	push   0xc00213e0
c001c9f6:	e8 0b dc fe ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c001c9fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9ff:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001ca06:	83 c4 1c             	add    esp,0x1c
c001ca09:	c3                   	ret    

c001ca0a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001ca0a:	55                   	push   ebp
c001ca0b:	57                   	push   edi
c001ca0c:	56                   	push   esi
c001ca0d:	53                   	push   ebx
c001ca0e:	83 ec 34             	sub    esp,0x34
c001ca11:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001ca15:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001ca19:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001ca1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ca21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001ca25:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001ca2b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ca31:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ca35:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001ca3b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ca3f:	83 c0 02             	add    eax,0x2
c001ca42:	c1 e0 07             	shl    eax,0x7
c001ca45:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ca49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ca4d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ca51:	c1 e0 07             	shl    eax,0x7
c001ca54:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ca58:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ca5c:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001ca66:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ca6a:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001ca70:	e8 51 e5 ff ff       	call   c001afc6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ca75:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ca79:	83 c4 10             	add    esp,0x10
c001ca7c:	b8 01 00 00 00       	mov    eax,0x1
c001ca81:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001ca86:	0f 84 49 02 00 00    	je     c001ccd5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2cb>
c001ca8c:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001ca92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca96:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca98:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001ca9e:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001caa4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001caa8:	c1 e1 05             	shl    ecx,0x5
c001caab:	01 c8                	add    eax,ecx
c001caad:	8b 08                	mov    ecx,DWORD PTR [eax]
c001caaf:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001cab5:	81 c9 25 00 01 00    	or     ecx,0x10025
c001cabb:	89 08                	mov    DWORD PTR [eax],ecx
c001cabd:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001cac3:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001cac9:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001cacf:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001cad2:	8d 7b 40             	lea    edi,[ebx+0x40]
c001cad5:	50                   	push   eax
c001cad6:	68 90 00 00 00       	push   0x90
c001cadb:	6a 00                	push   0x0
c001cadd:	53                   	push   ebx
c001cade:	e8 dd 39 fe ff       	call   c00004c0 <memset>
c001cae3:	b9 0c 00 00 00       	mov    ecx,0xc
c001cae8:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001caec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001caee:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001caf4:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001caf8:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001cafe:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001cb02:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001cb06:	48                   	dec    eax
c001cb07:	25 ff ff 3f 00       	and    eax,0x3fffff
c001cb0c:	89 c1                	mov    ecx,eax
c001cb0e:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001cb14:	25 00 00 c0 ff       	and    eax,0xffc00000
c001cb19:	09 c8                	or     eax,ecx
c001cb1b:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001cb21:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001cb24:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001cb2b:	66 25 00 7f          	and    ax,0x7f00
c001cb2f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cb33:	66 0d 27 80          	or     ax,0x8027
c001cb37:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001cb3b:	66 89 03             	mov    WORD PTR [ebx],ax
c001cb3e:	89 d0                	mov    eax,edx
c001cb40:	c1 ea 18             	shr    edx,0x18
c001cb43:	c1 e8 10             	shr    eax,0x10
c001cb46:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001cb49:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001cb4c:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001cb50:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001cb53:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cb57:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001cb5a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001cb5e:	83 c4 10             	add    esp,0x10
c001cb61:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001cb65:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cb69:	31 c0                	xor    eax,eax
c001cb6b:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001cb71:	80 e1 88             	and    cl,0x88
c001cb74:	74 0a                	je     c001cb80 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x176>
c001cb76:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001cb7b:	74 0a                	je     c001cb87 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17d>
c001cb7d:	40                   	inc    eax
c001cb7e:	eb eb                	jmp    c001cb6b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x161>
c001cb80:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001cb85:	75 43                	jne    c001cbca <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c001cb87:	83 ec 0c             	sub    esp,0xc
c001cb8a:	68 f8 13 02 c0       	push   0xc00213f8
c001cb8f:	e8 72 da fe ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c001cb94:	58                   	pop    eax
c001cb95:	5a                   	pop    edx
c001cb96:	68 0d 14 02 c0       	push   0xc002140d
c001cb9b:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c001cba1:	e8 36 bc fe ff       	call   c00087dc <VgaText::puts(char const*)>
c001cba6:	59                   	pop    ecx
c001cba7:	5b                   	pop    ebx
c001cba8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001cbac:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001cbb2:	e8 a9 e4 ff ff       	call   c001b060 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001cbb7:	5e                   	pop    esi
c001cbb8:	5f                   	pop    edi
c001cbb9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001cbbd:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001cbc3:	e8 78 e4 ff ff       	call   c001b040 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001cbc8:	eb 48                	jmp    c001cc12 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x208>
c001cbca:	be 01 00 00 00       	mov    esi,0x1
c001cbcf:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001cbd3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001cbd7:	d3 e6                	shl    esi,cl
c001cbd9:	c1 e7 07             	shl    edi,0x7
c001cbdc:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001cbe2:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001cbe7:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001cbeb:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001cbf1:	85 c6                	test   esi,eax
c001cbf3:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001cbf9:	0f 84 a3 00 00 00    	je     c001cca2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x298>
c001cbff:	0f ba e0 1e          	bt     eax,0x1e
c001cc03:	73 1a                	jae    c001cc1f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001cc05:	83 ec 0c             	sub    esp,0xc
c001cc08:	68 1f 14 02 c0       	push   0xc002141f
c001cc0d:	e8 f4 d9 fe ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c001cc12:	83 c4 10             	add    esp,0x10
c001cc15:	b8 01 00 00 00       	mov    eax,0x1
c001cc1a:	e9 b6 00 00 00       	jmp    c001ccd5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2cb>
c001cc1f:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001cc25:	83 f8 0d             	cmp    eax,0xd
c001cc28:	77 0a                	ja     c001cc34 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x22a>
c001cc2a:	83 ec 0c             	sub    esp,0xc
c001cc2d:	68 c8 00 00 00       	push   0xc8
c001cc32:	eb 28                	jmp    c001cc5c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x252>
c001cc34:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001cc3a:	83 f8 0d             	cmp    eax,0xd
c001cc3d:	77 0a                	ja     c001cc49 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23f>
c001cc3f:	83 ec 0c             	sub    esp,0xc
c001cc42:	68 58 02 00 00       	push   0x258
c001cc47:	eb 13                	jmp    c001cc5c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x252>
c001cc49:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001cc4f:	83 f8 06             	cmp    eax,0x6
c001cc52:	77 10                	ja     c001cc64 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25a>
c001cc54:	83 ec 0c             	sub    esp,0xc
c001cc57:	68 dc 05 00 00       	push   0x5dc
c001cc5c:	e8 fb 80 ff ff       	call   c0014d5c <milliTenthSleep(unsigned int)>
c001cc61:	83 c4 10             	add    esp,0x10
c001cc64:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001cc68:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001cc6b:	75 06                	jne    c001cc73 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x269>
c001cc6d:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001cc71:	74 15                	je     c001cc88 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c001cc73:	83 fb 06             	cmp    ebx,0x6
c001cc76:	77 10                	ja     c001cc88 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c001cc78:	83 ec 0c             	sub    esp,0xc
c001cc7b:	68 c4 09 00 00       	push   0x9c4
c001cc80:	e8 d7 80 ff ff       	call   c0014d5c <milliTenthSleep(unsigned int)>
c001cc85:	83 c4 10             	add    esp,0x10
c001cc88:	43                   	inc    ebx
c001cc89:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001cc8f:	0f 85 56 ff ff ff    	jne    c001cbeb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e1>
c001cc95:	83 ec 0c             	sub    esp,0xc
c001cc98:	68 32 14 02 c0       	push   0xc0021432
c001cc9d:	e9 6b ff ff ff       	jmp    c001cc0d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x203>
c001cca2:	0f ba e0 1e          	bt     eax,0x1e
c001cca6:	73 0d                	jae    c001ccb5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2ab>
c001cca8:	83 ec 0c             	sub    esp,0xc
c001ccab:	68 46 14 02 c0       	push   0xc0021446
c001ccb0:	e9 58 ff ff ff       	jmp    c001cc0d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x203>
c001ccb5:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001ccba:	74 17                	je     c001ccd3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c9>
c001ccbc:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001ccc1:	74 10                	je     c001ccd3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c9>
c001ccc3:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001ccc9:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001cccd:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001ccd1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ccd3:	31 c0                	xor    eax,eax
c001ccd5:	83 c4 2c             	add    esp,0x2c
c001ccd8:	5b                   	pop    ebx
c001ccd9:	5e                   	pop    esi
c001ccda:	5f                   	pop    edi
c001ccdb:	5d                   	pop    ebp
c001ccdc:	c3                   	ret    
c001ccdd:	90                   	nop

c001ccde <SATAPI::eject()>:
c001ccde:	57                   	push   edi
c001ccdf:	b9 03 00 00 00       	mov    ecx,0x3
c001cce4:	83 ec 18             	sub    esp,0x18
c001cce7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001cceb:	fc                   	cld    
c001ccec:	31 c0                	xor    eax,eax
c001ccee:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ccf0:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ccf5:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ccfa:	50                   	push   eax
c001ccfb:	6a 00                	push   0x0
c001ccfd:	6a 00                	push   0x0
c001ccff:	6a 00                	push   0x0
c001cd01:	6a 00                	push   0x0
c001cd03:	6a 02                	push   0x2
c001cd05:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cd09:	50                   	push   eax
c001cd0a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cd0e:	e8 f7 fc ff ff       	call   c001ca0a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001cd13:	31 c0                	xor    eax,eax
c001cd15:	83 c4 38             	add    esp,0x38
c001cd18:	5f                   	pop    edi
c001cd19:	c3                   	ret    

c001cd1a <SATAPI::detectMedia()>:
c001cd1a:	53                   	push   ebx
c001cd1b:	83 ec 14             	sub    esp,0x14
c001cd1e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001cd22:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001cd28:	e8 8f 09 ff ff       	call   c000d6bc <VCache::writeWriteBuffer()>
c001cd2d:	59                   	pop    ecx
c001cd2e:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001cd34:	e8 73 09 ff ff       	call   c000d6ac <VCache::invalidateReadBuffer()>
c001cd39:	c7 04 24 5b 14 02 c0 	mov    DWORD PTR [esp],0xc002145b
c001cd40:	e8 c1 d8 fe ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c001cd45:	83 c4 10             	add    esp,0x10
c001cd48:	31 c0                	xor    eax,eax
c001cd4a:	8b 14 85 20 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9be0]
c001cd51:	85 d2                	test   edx,edx
c001cd53:	74 0f                	je     c001cd64 <SATAPI::detectMedia()+0x4a>
c001cd55:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001cd5b:	75 07                	jne    c001cd64 <SATAPI::detectMedia()+0x4a>
c001cd5d:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001cd64:	40                   	inc    eax
c001cd65:	83 f8 1a             	cmp    eax,0x1a
c001cd68:	75 e0                	jne    c001cd4a <SATAPI::detectMedia()+0x30>
c001cd6a:	83 c4 08             	add    esp,0x8
c001cd6d:	5b                   	pop    ebx
c001cd6e:	c3                   	ret    
c001cd6f:	90                   	nop

c001cd70 <SATAPI::open(int, int, void*)>:
c001cd70:	56                   	push   esi
c001cd71:	53                   	push   ebx
c001cd72:	51                   	push   ecx
c001cd73:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cd77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cd7b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001cd85:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001cd8b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cd95:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cd99:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001cda3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001cda9:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001cdb0:	e8 8c ad fe ff       	call   c0007b41 <Phys::allocatePage()>
c001cdb5:	89 c6                	mov    esi,eax
c001cdb7:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001cdbd:	81 c6 00 10 00 00    	add    esi,0x1000
c001cdc3:	e8 79 ad fe ff       	call   c0007b41 <Phys::allocatePage()>
c001cdc8:	39 c6                	cmp    esi,eax
c001cdca:	74 10                	je     c001cddc <SATAPI::open(int, int, void*)+0x6c>
c001cdcc:	83 ec 0c             	sub    esp,0xc
c001cdcf:	68 70 14 02 c0       	push   0xc0021470
c001cdd4:	e8 ee 35 ff ff       	call   c00103c7 <KePanic(char const*)>
c001cdd9:	83 c4 10             	add    esp,0x10
c001cddc:	83 ec 0c             	sub    esp,0xc
c001cddf:	6a 02                	push   0x2
c001cde1:	e8 63 c5 fe ff       	call   c0009349 <Virt::allocateKernelVirtualPages(int)>
c001cde6:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001cdec:	6a 03                	push   0x3
c001cdee:	50                   	push   eax
c001cdef:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001cdf5:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c001cdfb:	e8 0c cc fe ff       	call   c0009a0c <VAS::mapPage(unsigned long, unsigned long, int)>
c001ce00:	83 c4 14             	add    esp,0x14
c001ce03:	68 78 01 00 00       	push   0x178
c001ce08:	e8 58 aa fe ff       	call   c0007865 <malloc>
c001ce0d:	83 c4 0c             	add    esp,0xc
c001ce10:	89 c6                	mov    esi,eax
c001ce12:	6a 00                	push   0x0
c001ce14:	68 ff ff ff 7f       	push   0x7fffffff
c001ce19:	6a 00                	push   0x0
c001ce1b:	6a 00                	push   0x0
c001ce1d:	53                   	push   ebx
c001ce1e:	68 86 14 02 c0       	push   0xc0021486
c001ce23:	50                   	push   eax
c001ce24:	e8 f5 fc fe ff       	call   c000cb1e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001ce29:	83 c4 14             	add    esp,0x14
c001ce2c:	56                   	push   esi
c001ce2d:	e8 ac fd fe ff       	call   c000cbde <LogicalDisk::assignDriveLetter()>
c001ce32:	5a                   	pop    edx
c001ce33:	0f be c0             	movsx  eax,al
c001ce36:	59                   	pop    ecx
c001ce37:	50                   	push   eax
c001ce38:	68 d8 12 02 c0       	push   0xc00212d8
c001ce3d:	e8 c4 d7 fe ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c001ce42:	58                   	pop    eax
c001ce43:	5a                   	pop    edx
c001ce44:	56                   	push   esi
c001ce45:	53                   	push   ebx
c001ce46:	e8 f9 eb fe ff       	call   c000ba44 <Device::addChild(Device*)>
c001ce4b:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001ce51:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce54:	e8 21 f0 fe ff       	call   c000be7a <PhysicalDisk::startCache()>
c001ce59:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001ce60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce63:	e8 b2 fe ff ff       	call   c001cd1a <SATAPI::detectMedia()>
c001ce68:	83 c4 14             	add    esp,0x14
c001ce6b:	31 c0                	xor    eax,eax
c001ce6d:	5b                   	pop    ebx
c001ce6e:	5e                   	pop    esi
c001ce6f:	c3                   	ret    

c001ce70 <SATAPI::read(unsigned long long, int, void*)>:
c001ce70:	57                   	push   edi
c001ce71:	56                   	push   esi
c001ce72:	53                   	push   ebx
c001ce73:	83 ec 30             	sub    esp,0x30
c001ce76:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001ce7a:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001ce7e:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001ce82:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ce86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ce8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ce8e:	83 fe 04             	cmp    esi,0x4
c001ce91:	7e 10                	jle    c001cea3 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001ce93:	83 ec 0c             	sub    esp,0xc
c001ce96:	68 94 14 02 c0       	push   0xc0021494
c001ce9b:	e8 27 35 ff ff       	call   c00103c7 <KePanic(char const*)>
c001cea0:	83 c4 10             	add    esp,0x10
c001cea3:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cea9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001ceaf:	51                   	push   ecx
c001ceb0:	50                   	push   eax
c001ceb1:	83 c0 02             	add    eax,0x2
c001ceb4:	c1 e0 07             	shl    eax,0x7
c001ceb7:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001cebd:	50                   	push   eax
c001cebe:	52                   	push   edx
c001cebf:	e8 c6 e1 ff ff       	call   c001b08a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cec4:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001cec8:	b9 03 00 00 00       	mov    ecx,0x3
c001cecd:	fc                   	cld    
c001cece:	31 c0                	xor    eax,eax
c001ced0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ced2:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001ced7:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001cedc:	83 c4 0c             	add    esp,0xc
c001cedf:	6a 00                	push   0x0
c001cee1:	6a 00                	push   0x0
c001cee3:	6a 00                	push   0x0
c001cee5:	6a 00                	push   0x0
c001cee7:	6a 02                	push   0x2
c001cee9:	8d 44 24 30          	lea    eax,[esp+0x30]
c001ceed:	50                   	push   eax
c001ceee:	53                   	push   ebx
c001ceef:	e8 16 fb ff ff       	call   c001ca0a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001cef4:	83 c4 20             	add    esp,0x20
c001cef7:	85 c0                	test   eax,eax
c001cef9:	75 44                	jne    c001cf3f <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001cefb:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001ceff:	b9 03 00 00 00       	mov    ecx,0x3
c001cf04:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cf06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cf0a:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001cf0f:	0f c8                	bswap  eax
c001cf11:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001cf15:	89 f0                	mov    eax,esi
c001cf17:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001cf1b:	50                   	push   eax
c001cf1c:	56                   	push   esi
c001cf1d:	c1 e6 0b             	shl    esi,0xb
c001cf20:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001cf24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf28:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf2c:	56                   	push   esi
c001cf2d:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cf31:	50                   	push   eax
c001cf32:	53                   	push   ebx
c001cf33:	e8 d2 fa ff ff       	call   c001ca0a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001cf38:	83 c4 20             	add    esp,0x20
c001cf3b:	85 c0                	test   eax,eax
c001cf3d:	74 14                	je     c001cf53 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001cf3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cf43:	83 ec 0c             	sub    esp,0xc
c001cf46:	53                   	push   ebx
c001cf47:	e8 ce fd ff ff       	call   c001cd1a <SATAPI::detectMedia()>
c001cf4c:	83 c4 10             	add    esp,0x10
c001cf4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cf53:	83 c4 30             	add    esp,0x30
c001cf56:	5b                   	pop    ebx
c001cf57:	5e                   	pop    esi
c001cf58:	5f                   	pop    edi
c001cf59:	c3                   	ret    

c001cf5a <IOAPIC::close(int, int, void*)>:
c001cf5a:	b8 00 00 00 00       	mov    eax,0x0
c001cf5f:	c3                   	ret    

c001cf60 <apicGetBase()>:
c001cf60:	55                   	push   ebp
c001cf61:	89 e5                	mov    ebp,esp
c001cf63:	83 ec 18             	sub    esp,0x18
c001cf66:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001cf6b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001cf71:	83 e0 08             	and    eax,0x8
c001cf74:	84 c0                	test   al,al
c001cf76:	75 07                	jne    c001cf7f <apicGetBase()+0x1f>
c001cf78:	b8 00 00 00 00       	mov    eax,0x0
c001cf7d:	eb 21                	jmp    c001cfa0 <apicGetBase()+0x40>
c001cf7f:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001cf84:	83 ec 08             	sub    esp,0x8
c001cf87:	6a 1b                	push   0x1b
c001cf89:	50                   	push   eax
c001cf8a:	e8 0d 9f fe ff       	call   c0006e9c <Computer::rdmsr(unsigned int)>
c001cf8f:	83 c4 10             	add    esp,0x10
c001cf92:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001cf95:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001cf98:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001cf9b:	25 00 00 ff ff       	and    eax,0xffff0000
c001cfa0:	c9                   	leave  
c001cfa1:	c3                   	ret    

c001cfa2 <IOAPIC::IOAPIC()>:
c001cfa2:	83 ec 0c             	sub    esp,0xc
c001cfa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfa9:	83 ec 08             	sub    esp,0x8
c001cfac:	68 f8 14 02 c0       	push   0xc00214f8
c001cfb1:	50                   	push   eax
c001cfb2:	e8 25 ec fe ff       	call   c000bbdc <Device::Device(char const*)>
c001cfb7:	83 c4 10             	add    esp,0x10
c001cfba:	ba 08 15 02 c0       	mov    edx,0xc0021508
c001cfbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfc3:	89 10                	mov    DWORD PTR [eax],edx
c001cfc5:	90                   	nop
c001cfc6:	83 c4 0c             	add    esp,0xc
c001cfc9:	c3                   	ret    

c001cfca <apicOpen()>:
c001cfca:	55                   	push   ebp
c001cfcb:	89 e5                	mov    ebp,esp
c001cfcd:	53                   	push   ebx
c001cfce:	83 ec 34             	sub    esp,0x34
c001cfd1:	a0 a0 7b 02 c0       	mov    al,ds:0xc0027ba0
c001cfd6:	83 f0 01             	xor    eax,0x1
c001cfd9:	84 c0                	test   al,al
c001cfdb:	0f 84 9d 00 00 00    	je     c001d07e <apicOpen()+0xb4>
c001cfe1:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001cfe5:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c001cfea:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001cfed:	0f 83 84 00 00 00    	jae    c001d077 <apicOpen()+0xad>
c001cff3:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001cffa:	83 ec 0c             	sub    esp,0xc
c001cffd:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001d000:	e8 60 a8 fe ff       	call   c0007865 <malloc>
c001d005:	83 c4 10             	add    esp,0x10
c001d008:	89 c3                	mov    ebx,eax
c001d00a:	83 ec 0c             	sub    esp,0xc
c001d00d:	53                   	push   ebx
c001d00e:	e8 8f ff ff ff       	call   c001cfa2 <IOAPIC::IOAPIC()>
c001d013:	83 c4 10             	add    esp,0x10
c001d016:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001d019:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001d01c:	25 ff 00 00 00       	and    eax,0xff
c001d021:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d024:	89 14 85 80 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8480],edx
c001d02b:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c001d030:	40                   	inc    eax
c001d031:	a3 60 7b 02 c0       	mov    ds:0xc0027b60,eax
c001d036:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001d03b:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001d041:	83 ec 08             	sub    esp,0x8
c001d044:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d047:	50                   	push   eax
c001d048:	e8 f7 e9 fe ff       	call   c000ba44 <Device::addChild(Device*)>
c001d04d:	83 c4 10             	add    esp,0x10
c001d050:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d053:	8b 00                	mov    eax,DWORD PTR [eax]
c001d055:	83 c0 08             	add    eax,0x8
c001d058:	8b 10                	mov    edx,DWORD PTR [eax]
c001d05a:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001d05d:	25 ff 00 00 00       	and    eax,0xff
c001d062:	6a 00                	push   0x0
c001d064:	6a 00                	push   0x0
c001d066:	50                   	push   eax
c001d067:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d06a:	ff d2                	call   edx
c001d06c:	83 c4 10             	add    esp,0x10
c001d06f:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001d072:	e9 6e ff ff ff       	jmp    c001cfe5 <apicOpen()+0x1b>
c001d077:	c6 05 a0 7b 02 c0 01 	mov    BYTE PTR ds:0xc0027ba0,0x1
c001d07e:	e8 dd fe ff ff       	call   c001cf60 <apicGetBase()>
c001d083:	05 f0 00 00 00       	add    eax,0xf0
c001d088:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d08b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d08e:	8b 00                	mov    eax,DWORD PTR [eax]
c001d090:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d093:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001d09a:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001d0a1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d0a4:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001d0a7:	89 10                	mov    DWORD PTR [eax],edx
c001d0a9:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d0b0:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c001d0b5:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d0b8:	7d 70                	jge    c001d12a <apicOpen()+0x160>
c001d0ba:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d0bd:	8b 04 85 e0 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9920]
c001d0c4:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001d0c7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d0ca:	8b 04 85 e0 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9920]
c001d0d1:	c1 e8 08             	shr    eax,0x8
c001d0d4:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001d0d8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d0db:	8b 04 85 e0 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9920]
c001d0e2:	c1 e8 18             	shr    eax,0x18
c001d0e5:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001d0e8:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001d0ec:	75 37                	jne    c001d125 <apicOpen()+0x15b>
c001d0ee:	e8 6d fe ff ff       	call   c001cf60 <apicGetBase()>
c001d0f3:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001d0f7:	75 07                	jne    c001d100 <apicOpen()+0x136>
c001d0f9:	ba 60 03 00 00       	mov    edx,0x360
c001d0fe:	eb 05                	jmp    c001d105 <apicOpen()+0x13b>
c001d100:	ba 50 03 00 00       	mov    edx,0x350
c001d105:	01 d0                	add    eax,edx
c001d107:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001d10a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d10d:	8b 00                	mov    eax,DWORD PTR [eax]
c001d10f:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001d112:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001d119:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001d11d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d120:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001d123:	89 10                	mov    DWORD PTR [eax],edx
c001d125:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001d128:	eb 86                	jmp    c001d0b0 <apicOpen()+0xe6>
c001d12a:	90                   	nop
c001d12b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001d12e:	c9                   	leave  
c001d12f:	c3                   	ret    

c001d130 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d130:	55                   	push   ebp
c001d131:	89 e5                	mov    ebp,esp
c001d133:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d136:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d13c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d13f:	72 1d                	jb     c001d15e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d144:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d14a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d14d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d153:	01 d0                	add    eax,edx
c001d155:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d158:	73 04                	jae    c001d15e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d15a:	b0 01                	mov    al,0x1
c001d15c:	eb 02                	jmp    c001d160 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d15e:	b0 00                	mov    al,0x0
c001d160:	5d                   	pop    ebp
c001d161:	c3                   	ret    

c001d162 <IOAPIC::read(int)>:
c001d162:	55                   	push   ebp
c001d163:	89 e5                	mov    ebp,esp
c001d165:	83 ec 10             	sub    esp,0x10
c001d168:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d16b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d171:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d174:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d177:	31 d2                	xor    edx,edx
c001d179:	88 c2                	mov    dl,al
c001d17b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d17e:	89 10                	mov    DWORD PTR [eax],edx
c001d180:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d183:	83 c0 10             	add    eax,0x10
c001d186:	8b 00                	mov    eax,DWORD PTR [eax]
c001d188:	c9                   	leave  
c001d189:	c3                   	ret    

c001d18a <IOAPIC::open(int, int, void*)>:
c001d18a:	55                   	push   ebp
c001d18b:	89 e5                	mov    ebp,esp
c001d18d:	57                   	push   edi
c001d18e:	56                   	push   esi
c001d18f:	53                   	push   ebx
c001d190:	83 ec 04             	sub    esp,0x4
c001d193:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d196:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d199:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d19f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d1a2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d1a8:	8b 14 85 c0 67 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9840]
c001d1af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d1b2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d1b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d1bb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d1c1:	8b 14 85 40 68 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd97c0]
c001d1c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d1cb:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001d1d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d1d4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d1da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d1dd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d1e3:	89 c6                	mov    esi,eax
c001d1e5:	81 e6 ff 00 00 00    	and    esi,0xff
c001d1eb:	89 d0                	mov    eax,edx
c001d1ed:	ba 00 00 00 00       	mov    edx,0x0
c001d1f2:	89 c7                	mov    edi,eax
c001d1f4:	83 e7 ff             	and    edi,0xffffffff
c001d1f7:	89 f9                	mov    ecx,edi
c001d1f9:	89 d0                	mov    eax,edx
c001d1fb:	25 ff 00 00 00       	and    eax,0xff
c001d200:	89 c3                	mov    ebx,eax
c001d202:	89 c8                	mov    eax,ecx
c001d204:	89 da                	mov    edx,ebx
c001d206:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d209:	8d 5e 08             	lea    ebx,[esi+0x8]
c001d20c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d210:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d214:	83 e0 00             	and    eax,0x0
c001d217:	09 d0                	or     eax,edx
c001d219:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d21d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d220:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d226:	8d 50 01             	lea    edx,[eax+0x1]
c001d229:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d22c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d232:	31 d2                	xor    edx,edx
c001d234:	88 c2                	mov    dl,al
c001d236:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d239:	83 c2 08             	add    edx,0x8
c001d23c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d240:	81 e1 ff 00 00 00    	and    ecx,0xff
c001d246:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001d24c:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d250:	6a 01                	push   0x1
c001d252:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d255:	e8 08 ff ff ff       	call   c001d162 <IOAPIC::read(int)>
c001d25a:	83 c4 08             	add    esp,0x8
c001d25d:	c1 f8 10             	sar    eax,0x10
c001d260:	25 ff 00 00 00       	and    eax,0xff
c001d265:	8d 50 01             	lea    edx,[eax+0x1]
c001d268:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d26b:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001d271:	b8 00 00 00 00       	mov    eax,0x0
c001d276:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d279:	5b                   	pop    ebx
c001d27a:	5e                   	pop    esi
c001d27b:	5f                   	pop    edi
c001d27c:	5d                   	pop    ebp
c001d27d:	c3                   	ret    

c001d27e <IOAPIC::write(int, int)>:
c001d27e:	55                   	push   ebp
c001d27f:	89 e5                	mov    ebp,esp
c001d281:	83 ec 10             	sub    esp,0x10
c001d284:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d287:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d28d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d290:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d293:	31 d2                	xor    edx,edx
c001d295:	88 c2                	mov    dl,al
c001d297:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d29a:	89 10                	mov    DWORD PTR [eax],edx
c001d29c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d29f:	8d 50 10             	lea    edx,[eax+0x10]
c001d2a2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d2a5:	89 02                	mov    DWORD PTR [edx],eax
c001d2a7:	90                   	nop
c001d2a8:	c9                   	leave  
c001d2a9:	c3                   	ret    

c001d2aa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001d2aa:	55                   	push   ebp
c001d2ab:	89 e5                	mov    ebp,esp
c001d2ad:	53                   	push   ebx
c001d2ae:	83 ec 2c             	sub    esp,0x2c
c001d2b1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d2b4:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001d2b7:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001d2ba:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001d2bd:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d2c0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d2c3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001d2c6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d2c9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001d2cc:	88 d8                	mov    al,bl
c001d2ce:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001d2d1:	88 c8                	mov    al,cl
c001d2d3:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001d2d6:	88 d0                	mov    al,dl
c001d2d8:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001d2db:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001d2de:	25 ff 00 00 00       	and    eax,0xff
c001d2e3:	83 c0 08             	add    eax,0x8
c001d2e6:	01 c0                	add    eax,eax
c001d2e8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d2eb:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001d2ee:	25 ff 00 00 00       	and    eax,0xff
c001d2f3:	83 c0 08             	add    eax,0x8
c001d2f6:	01 c0                	add    eax,eax
c001d2f8:	40                   	inc    eax
c001d2f9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001d2fc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d2ff:	50                   	push   eax
c001d300:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d303:	e8 5a fe ff ff       	call   c001d162 <IOAPIC::read(int)>
c001d308:	83 c4 08             	add    esp,0x8
c001d30b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d30e:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001d315:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d318:	c1 e0 18             	shl    eax,0x18
c001d31b:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001d31e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001d321:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d324:	52                   	push   edx
c001d325:	50                   	push   eax
c001d326:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d329:	e8 50 ff ff ff       	call   c001d27e <IOAPIC::write(int, int)>
c001d32e:	83 c4 0c             	add    esp,0xc
c001d331:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d334:	50                   	push   eax
c001d335:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d338:	e8 25 fe ff ff       	call   c001d162 <IOAPIC::read(int)>
c001d33d:	83 c4 08             	add    esp,0x8
c001d340:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d343:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001d34a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001d351:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001d358:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001d35c:	74 09                	je     c001d367 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001d35e:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001d365:	eb 07                	jmp    c001d36e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001d367:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001d36e:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001d372:	74 09                	je     c001d37d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001d374:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001d37b:	eb 07                	jmp    c001d384 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001d37d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001d384:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001d38b:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001d38e:	25 ff 00 00 00       	and    eax,0xff
c001d393:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001d396:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001d399:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d39c:	52                   	push   edx
c001d39d:	50                   	push   eax
c001d39e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d3a1:	e8 d8 fe ff ff       	call   c001d27e <IOAPIC::write(int, int)>
c001d3a6:	83 c4 0c             	add    esp,0xc
c001d3a9:	90                   	nop
c001d3aa:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001d3ad:	c9                   	leave  
c001d3ae:	c3                   	ret    
c001d3af:	90                   	nop

c001d3b0 <APICTimer::close(int, int, void*)>:
c001d3b0:	b8 00 00 00 00       	mov    eax,0x0
c001d3b5:	c3                   	ret    
c001d3b6:	66 90                	xchg   ax,ax

c001d3b8 <apicTimerHandler(regs*, void*)>:
c001d3b8:	83 ec 0c             	sub    esp,0xc
c001d3bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d3bf:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d3c1:	b8 10 27 00 00       	mov    eax,0x2710
c001d3c6:	ba 00 00 00 00       	mov    edx,0x0
c001d3cb:	f7 f1                	div    ecx
c001d3cd:	83 ec 0c             	sub    esp,0xc
c001d3d0:	50                   	push   eax
c001d3d1:	e8 fe ff fe ff       	call   c000d3d4 <timerHandler(unsigned int)>
c001d3d6:	83 c4 10             	add    esp,0x10
c001d3d9:	90                   	nop
c001d3da:	83 c4 0c             	add    esp,0xc
c001d3dd:	c3                   	ret    
c001d3de:	66 90                	xchg   ax,ax

c001d3e0 <APICTimer::open(int, int, void*)>:
c001d3e0:	83 ec 0c             	sub    esp,0xc
c001d3e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3e7:	8b 00                	mov    eax,DWORD PTR [eax]
c001d3e9:	83 c0 24             	add    eax,0x24
c001d3ec:	8b 00                	mov    eax,DWORD PTR [eax]
c001d3ee:	83 ec 08             	sub    esp,0x8
c001d3f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3f9:	ff d0                	call   eax
c001d3fb:	83 c4 10             	add    esp,0x10
c001d3fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d402:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d406:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d40c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d410:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d414:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001d41a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d41e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001d424:	83 ec 0c             	sub    esp,0xc
c001d427:	51                   	push   ecx
c001d428:	6a 01                	push   0x1
c001d42a:	68 b8 d3 01 c0       	push   0xc001d3b8
c001d42f:	52                   	push   edx
c001d430:	50                   	push   eax
c001d431:	e8 ba e5 fe ff       	call   c000b9f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d436:	83 c4 20             	add    esp,0x20
c001d439:	89 c2                	mov    edx,eax
c001d43b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d43f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001d445:	b8 00 00 00 00       	mov    eax,0x0
c001d44a:	83 c4 0c             	add    esp,0xc
c001d44d:	c3                   	ret    
c001d44e:	66 90                	xchg   ax,ax

c001d450 <APICTimer::write(int)>:
c001d450:	83 ec 0c             	sub    esp,0xc
c001d453:	83 ec 0c             	sub    esp,0xc
c001d456:	68 2c 15 02 c0       	push   0xc002152c
c001d45b:	e8 67 2f ff ff       	call   c00103c7 <KePanic(char const*)>
c001d460:	83 c4 10             	add    esp,0x10
c001d463:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d467:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d46b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d471:	90                   	nop
c001d472:	83 c4 0c             	add    esp,0xc
c001d475:	c3                   	ret    
c001d476:	66 90                	xchg   ax,ax

c001d478 <APICTimer::APICTimer()>:
c001d478:	83 ec 0c             	sub    esp,0xc
c001d47b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d47f:	83 ec 08             	sub    esp,0x8
c001d482:	68 3c 15 02 c0       	push   0xc002153c
c001d487:	50                   	push   eax
c001d488:	e8 7b fe fe ff       	call   c000d308 <Timer::Timer(char const*)>
c001d48d:	83 c4 10             	add    esp,0x10
c001d490:	ba 50 15 02 c0       	mov    edx,0xc0021550
c001d495:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d499:	89 10                	mov    DWORD PTR [eax],edx
c001d49b:	90                   	nop
c001d49c:	83 c4 0c             	add    esp,0xc
c001d49f:	c3                   	ret    

c001d4a0 <PIT::write(int)>:
c001d4a0:	83 ec 10             	sub    esp,0x10
c001d4a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d4a7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d4ab:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d4b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d4b5:	a3 a4 7b 02 c0       	mov    ds:0xc0027ba4,eax
c001d4ba:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001d4bf:	99                   	cdq    
c001d4c0:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001d4c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d4c8:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001d4cf:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001d4d4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001d4d8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001d4dd:	ee                   	out    dx,al
c001d4de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4e2:	25 ff 00 00 00       	and    eax,0xff
c001d4e7:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001d4ee:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001d4f2:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001d4f6:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001d4fb:	ee                   	out    dx,al
c001d4fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d500:	c1 f8 08             	sar    eax,0x8
c001d503:	25 ff 00 00 00       	and    eax,0xff
c001d508:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001d50f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001d513:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001d517:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001d51c:	ee                   	out    dx,al
c001d51d:	90                   	nop
c001d51e:	83 c4 10             	add    esp,0x10
c001d521:	c3                   	ret    
c001d522:	66 90                	xchg   ax,ax

c001d524 <pitHandler(regs*, void*)>:
c001d524:	83 ec 0c             	sub    esp,0xc
c001d527:	8b 0d a4 7b 02 c0    	mov    ecx,DWORD PTR ds:0xc0027ba4
c001d52d:	b8 10 27 00 00       	mov    eax,0x2710
c001d532:	99                   	cdq    
c001d533:	f7 f9                	idiv   ecx
c001d535:	83 ec 0c             	sub    esp,0xc
c001d538:	50                   	push   eax
c001d539:	e8 96 fe fe ff       	call   c000d3d4 <timerHandler(unsigned int)>
c001d53e:	83 c4 10             	add    esp,0x10
c001d541:	90                   	nop
c001d542:	83 c4 0c             	add    esp,0xc
c001d545:	c3                   	ret    
c001d546:	66 90                	xchg   ax,ax

c001d548 <PIT::open(int, int, void*)>:
c001d548:	83 ec 0c             	sub    esp,0xc
c001d54b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d54f:	8b 00                	mov    eax,DWORD PTR [eax]
c001d551:	83 c0 24             	add    eax,0x24
c001d554:	8b 00                	mov    eax,DWORD PTR [eax]
c001d556:	83 ec 08             	sub    esp,0x8
c001d559:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d55d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d561:	ff d0                	call   eax
c001d563:	83 c4 10             	add    esp,0x10
c001d566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d56a:	83 ec 0c             	sub    esp,0xc
c001d56d:	6a 00                	push   0x0
c001d56f:	6a 01                	push   0x1
c001d571:	68 24 d5 01 c0       	push   0xc001d524
c001d576:	6a 00                	push   0x0
c001d578:	50                   	push   eax
c001d579:	e8 72 e4 fe ff       	call   c000b9f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d57e:	83 c4 20             	add    esp,0x20
c001d581:	89 c2                	mov    edx,eax
c001d583:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d587:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001d58d:	b8 00 00 00 00       	mov    eax,0x0
c001d592:	83 c4 0c             	add    esp,0xc
c001d595:	c3                   	ret    
c001d596:	66 90                	xchg   ax,ax

c001d598 <PIT::close(int, int, void*)>:
c001d598:	83 ec 0c             	sub    esp,0xc
c001d59b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d59f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001d5a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5ad:	6a 01                	push   0x1
c001d5af:	68 24 d5 01 c0       	push   0xc001d524
c001d5b4:	6a 00                	push   0x0
c001d5b6:	50                   	push   eax
c001d5b7:	e8 6a e4 fe ff       	call   c000ba26 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001d5bc:	83 c4 10             	add    esp,0x10
c001d5bf:	b8 00 00 00 00       	mov    eax,0x0
c001d5c4:	83 c4 0c             	add    esp,0xc
c001d5c7:	c3                   	ret    

c001d5c8 <PIT::PIT()>:
c001d5c8:	83 ec 0c             	sub    esp,0xc
c001d5cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5cf:	83 ec 08             	sub    esp,0x8
c001d5d2:	68 78 15 02 c0       	push   0xc0021578
c001d5d7:	50                   	push   eax
c001d5d8:	e8 2b fd fe ff       	call   c000d308 <Timer::Timer(char const*)>
c001d5dd:	83 c4 10             	add    esp,0x10
c001d5e0:	ba a0 15 02 c0       	mov    edx,0xc00215a0
c001d5e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5e9:	89 10                	mov    DWORD PTR [eax],edx
c001d5eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5ef:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d5f5:	31 d2                	xor    edx,edx
c001d5f7:	88 c2                	mov    dl,al
c001d5f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5fd:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001d604:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d608:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d60e:	31 d2                	xor    edx,edx
c001d610:	88 c2                	mov    dl,al
c001d612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d616:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001d61b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d61f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d625:	8d 50 01             	lea    edx,[eax+0x1]
c001d628:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d62c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d632:	31 d2                	xor    edx,edx
c001d634:	88 c2                	mov    dl,al
c001d636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d63a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d63e:	83 e1 3f             	and    ecx,0x3f
c001d641:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d645:	90                   	nop
c001d646:	83 c4 0c             	add    esp,0xc
c001d649:	c3                   	ret    
c001d64a:	66 90                	xchg   ax,ax
c001d64c:	66 90                	xchg   ax,ax
c001d64e:	66 90                	xchg   ax,ax

c001d650 <avxDetect>:
c001d650:	b8 01 00 00 00       	mov    eax,0x1
c001d655:	0f a2                	cpuid  
c001d657:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001d65d:	74 15                	je     c001d674 <avxDetect.noAVX>
c001d65f:	b8 01 00 00 00       	mov    eax,0x1
c001d664:	0f a2                	cpuid  
c001d666:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001d66c:	74 06                	je     c001d674 <avxDetect.noAVX>
c001d66e:	b8 01 00 00 00       	mov    eax,0x1
c001d673:	c3                   	ret    

c001d674 <avxDetect.noAVX>:
c001d674:	b8 00 00 00 00       	mov    eax,0x0
c001d679:	c3                   	ret    

c001d67a <avxSave>:
c001d67a:	53                   	push   ebx
c001d67b:	52                   	push   edx
c001d67c:	31 c0                	xor    eax,eax
c001d67e:	48                   	dec    eax
c001d67f:	89 c2                	mov    edx,eax
c001d681:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d685:	0f ae 23             	xsave  [ebx]
c001d688:	5a                   	pop    edx
c001d689:	5b                   	pop    ebx
c001d68a:	c3                   	ret    

c001d68b <avxLoad>:
c001d68b:	53                   	push   ebx
c001d68c:	52                   	push   edx
c001d68d:	31 c0                	xor    eax,eax
c001d68f:	48                   	dec    eax
c001d690:	89 c2                	mov    edx,eax
c001d692:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d696:	0f ae 2b             	xrstor [ebx]
c001d699:	5a                   	pop    edx
c001d69a:	5b                   	pop    ebx
c001d69b:	c3                   	ret    

c001d69c <avxInit>:
c001d69c:	e8 67 03 00 00       	call   c001da08 <sseInit>
c001d6a1:	50                   	push   eax
c001d6a2:	51                   	push   ecx
c001d6a3:	0f 20 e0             	mov    eax,cr4
c001d6a6:	0d 00 00 04 00       	or     eax,0x40000
c001d6ab:	0f 22 e0             	mov    cr4,eax
c001d6ae:	31 c9                	xor    ecx,ecx
c001d6b0:	0f 01 d0             	xgetbv 
c001d6b3:	0d 07 00 00 00       	or     eax,0x7
c001d6b8:	0f 01 d1             	xsetbv 
c001d6bb:	59                   	pop    ecx
c001d6bc:	58                   	pop    eax
c001d6bd:	c3                   	ret    

c001d6be <avxClose>:
c001d6be:	c3                   	ret    

c001d6bf <wouldSheSayYes>:
c001d6bf:	c3                   	ret    
c001d6c0:	49                   	dec    ecx
c001d6c1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001d6c5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001d6c9:	75 20                	jne    c001d6eb <isr0+0xb>
c001d6cb:	4e                   	dec    esi
c001d6cc:	79 61                	jns    c001d72f <isr7+0x3>
c001d6ce:	68 2e 2e 2e 00       	push   0x2e2e2e
c001d6d3:	66 90                	xchg   ax,ax
c001d6d5:	66 90                	xchg   ax,ax
c001d6d7:	66 90                	xchg   ax,ax
c001d6d9:	66 90                	xchg   ax,ax
c001d6db:	66 90                	xchg   ax,ax
c001d6dd:	66 90                	xchg   ax,ax
c001d6df:	90                   	nop

c001d6e0 <isr0>:
c001d6e0:	fa                   	cli    
c001d6e1:	68 00 00 00 00       	push   0x0
c001d6e6:	68 00 00 00 00       	push   0x0
c001d6eb:	e9 56 01 00 00       	jmp    c001d846 <int_common_stub>

c001d6f0 <isr1>:
c001d6f0:	fa                   	cli    
c001d6f1:	6a 00                	push   0x0
c001d6f3:	6a 01                	push   0x1
c001d6f5:	e9 4c 01 00 00       	jmp    c001d846 <int_common_stub>

c001d6fa <isr2>:
c001d6fa:	fa                   	cli    
c001d6fb:	6a 00                	push   0x0
c001d6fd:	6a 02                	push   0x2
c001d6ff:	e9 42 01 00 00       	jmp    c001d846 <int_common_stub>

c001d704 <isr3>:
c001d704:	fa                   	cli    
c001d705:	6a 00                	push   0x0
c001d707:	6a 03                	push   0x3
c001d709:	e9 38 01 00 00       	jmp    c001d846 <int_common_stub>

c001d70e <isr4>:
c001d70e:	fa                   	cli    
c001d70f:	6a 00                	push   0x0
c001d711:	6a 04                	push   0x4
c001d713:	e9 2e 01 00 00       	jmp    c001d846 <int_common_stub>

c001d718 <isr5>:
c001d718:	fa                   	cli    
c001d719:	6a 00                	push   0x0
c001d71b:	6a 05                	push   0x5
c001d71d:	e9 24 01 00 00       	jmp    c001d846 <int_common_stub>

c001d722 <isr6>:
c001d722:	fa                   	cli    
c001d723:	6a 00                	push   0x0
c001d725:	6a 06                	push   0x6
c001d727:	e9 1a 01 00 00       	jmp    c001d846 <int_common_stub>

c001d72c <isr7>:
c001d72c:	fa                   	cli    
c001d72d:	6a 00                	push   0x0
c001d72f:	6a 07                	push   0x7
c001d731:	e9 10 01 00 00       	jmp    c001d846 <int_common_stub>

c001d736 <isr8>:
c001d736:	fa                   	cli    
c001d737:	6a 08                	push   0x8
c001d739:	e9 08 01 00 00       	jmp    c001d846 <int_common_stub>

c001d73e <isr9>:
c001d73e:	fa                   	cli    
c001d73f:	6a 00                	push   0x0
c001d741:	6a 09                	push   0x9
c001d743:	e9 fe 00 00 00       	jmp    c001d846 <int_common_stub>

c001d748 <isr10>:
c001d748:	fa                   	cli    
c001d749:	6a 0a                	push   0xa
c001d74b:	e9 f6 00 00 00       	jmp    c001d846 <int_common_stub>

c001d750 <isr11>:
c001d750:	fa                   	cli    
c001d751:	6a 0b                	push   0xb
c001d753:	e9 ee 00 00 00       	jmp    c001d846 <int_common_stub>

c001d758 <isr12>:
c001d758:	fa                   	cli    
c001d759:	6a 0c                	push   0xc
c001d75b:	e9 e6 00 00 00       	jmp    c001d846 <int_common_stub>

c001d760 <isr13>:
c001d760:	fa                   	cli    
c001d761:	6a 0d                	push   0xd
c001d763:	53                   	push   ebx
c001d764:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d768:	81 fb 36 d9 01 c0    	cmp    ebx,0xc001d936
c001d76e:	5b                   	pop    ebx
c001d76f:	0f 84 c3 01 00 00    	je     c001d938 <finishSignal2>
c001d775:	e9 cc 00 00 00       	jmp    c001d846 <int_common_stub>

c001d77a <isr14>:
c001d77a:	fa                   	cli    
c001d77b:	6a 0e                	push   0xe
c001d77d:	e9 c4 00 00 00       	jmp    c001d846 <int_common_stub>

c001d782 <isr15>:
c001d782:	fa                   	cli    
c001d783:	6a 00                	push   0x0
c001d785:	6a 0f                	push   0xf
c001d787:	e9 ba 00 00 00       	jmp    c001d846 <int_common_stub>

c001d78c <isr16>:
c001d78c:	fa                   	cli    
c001d78d:	6a 00                	push   0x0
c001d78f:	6a 10                	push   0x10
c001d791:	e9 b0 00 00 00       	jmp    c001d846 <int_common_stub>

c001d796 <isr17>:
c001d796:	fa                   	cli    
c001d797:	6a 00                	push   0x0
c001d799:	6a 11                	push   0x11
c001d79b:	e9 a6 00 00 00       	jmp    c001d846 <int_common_stub>

c001d7a0 <isr18>:
c001d7a0:	fa                   	cli    
c001d7a1:	6a 00                	push   0x0
c001d7a3:	6a 12                	push   0x12
c001d7a5:	e9 9c 00 00 00       	jmp    c001d846 <int_common_stub>

c001d7aa <irq3>:
c001d7aa:	fa                   	cli    
c001d7ab:	6a 00                	push   0x0
c001d7ad:	6a 23                	push   0x23
c001d7af:	e9 92 00 00 00       	jmp    c001d846 <int_common_stub>

c001d7b4 <irq4>:
c001d7b4:	fa                   	cli    
c001d7b5:	6a 00                	push   0x0
c001d7b7:	6a 24                	push   0x24
c001d7b9:	e9 88 00 00 00       	jmp    c001d846 <int_common_stub>

c001d7be <irq5>:
c001d7be:	fa                   	cli    
c001d7bf:	6a 00                	push   0x0
c001d7c1:	6a 25                	push   0x25
c001d7c3:	e9 7e 00 00 00       	jmp    c001d846 <int_common_stub>

c001d7c8 <irq6>:
c001d7c8:	fa                   	cli    
c001d7c9:	6a 00                	push   0x0
c001d7cb:	6a 26                	push   0x26
c001d7cd:	e9 74 00 00 00       	jmp    c001d846 <int_common_stub>

c001d7d2 <irq7>:
c001d7d2:	fa                   	cli    
c001d7d3:	6a 00                	push   0x0
c001d7d5:	6a 27                	push   0x27
c001d7d7:	e9 6a 00 00 00       	jmp    c001d846 <int_common_stub>

c001d7dc <irq8>:
c001d7dc:	fa                   	cli    
c001d7dd:	6a 00                	push   0x0
c001d7df:	6a 28                	push   0x28
c001d7e1:	e9 60 00 00 00       	jmp    c001d846 <int_common_stub>

c001d7e6 <irq9>:
c001d7e6:	fa                   	cli    
c001d7e7:	6a 00                	push   0x0
c001d7e9:	6a 29                	push   0x29
c001d7eb:	e9 56 00 00 00       	jmp    c001d846 <int_common_stub>

c001d7f0 <irq10>:
c001d7f0:	fa                   	cli    
c001d7f1:	6a 00                	push   0x0
c001d7f3:	6a 2a                	push   0x2a
c001d7f5:	e9 4c 00 00 00       	jmp    c001d846 <int_common_stub>

c001d7fa <irq11>:
c001d7fa:	fa                   	cli    
c001d7fb:	6a 00                	push   0x0
c001d7fd:	6a 2b                	push   0x2b
c001d7ff:	e9 42 00 00 00       	jmp    c001d846 <int_common_stub>

c001d804 <irq12>:
c001d804:	fa                   	cli    
c001d805:	6a 00                	push   0x0
c001d807:	6a 2c                	push   0x2c
c001d809:	e9 38 00 00 00       	jmp    c001d846 <int_common_stub>

c001d80e <irq13>:
c001d80e:	fa                   	cli    
c001d80f:	6a 00                	push   0x0
c001d811:	6a 2d                	push   0x2d
c001d813:	e9 2e 00 00 00       	jmp    c001d846 <int_common_stub>

c001d818 <irq14>:
c001d818:	fa                   	cli    
c001d819:	6a 00                	push   0x0
c001d81b:	6a 2e                	push   0x2e
c001d81d:	e9 24 00 00 00       	jmp    c001d846 <int_common_stub>

c001d822 <irq15>:
c001d822:	fa                   	cli    
c001d823:	6a 00                	push   0x0
c001d825:	6a 2f                	push   0x2f
c001d827:	e9 1a 00 00 00       	jmp    c001d846 <int_common_stub>

c001d82c <irq1>:
c001d82c:	fa                   	cli    
c001d82d:	6a 00                	push   0x0
c001d82f:	6a 21                	push   0x21
c001d831:	eb 13                	jmp    c001d846 <int_common_stub>

c001d833 <irq2>:
c001d833:	fa                   	cli    
c001d834:	6a 00                	push   0x0
c001d836:	6a 22                	push   0x22
c001d838:	eb 0c                	jmp    c001d846 <int_common_stub>

c001d83a <isr96>:
c001d83a:	6a 00                	push   0x0
c001d83c:	6a 60                	push   0x60
c001d83e:	fb                   	sti    
c001d83f:	eb 37                	jmp    c001d878 <syscall_common_stub>

c001d841 <irq0>:
c001d841:	fa                   	cli    
c001d842:	6a 00                	push   0x0
c001d844:	6a 20                	push   0x20

c001d846 <int_common_stub>:
c001d846:	60                   	pusha  
c001d847:	1e                   	push   ds
c001d848:	06                   	push   es
c001d849:	0f a0                	push   fs
c001d84b:	0f a8                	push   gs
c001d84d:	66 b8 10 00          	mov    ax,0x10
c001d851:	66 8e d8             	mov    ds,ax
c001d854:	66 8e c0             	mov    es,ax
c001d857:	66 8e e0             	mov    fs,ax
c001d85a:	66 8e e8             	mov    gs,ax
c001d85d:	54                   	push   esp
c001d85e:	fc                   	cld    
c001d85f:	e8 8c e6 fe ff       	call   c000bef0 <int_handler>
c001d864:	81 c4 04 00 00 00    	add    esp,0x4
c001d86a:	0f a9                	pop    gs
c001d86c:	0f a1                	pop    fs
c001d86e:	07                   	pop    es
c001d86f:	1f                   	pop    ds
c001d870:	61                   	popa   
c001d871:	81 c4 08 00 00 00    	add    esp,0x8
c001d877:	cf                   	iret   

c001d878 <syscall_common_stub>:
c001d878:	60                   	pusha  
c001d879:	1e                   	push   ds
c001d87a:	06                   	push   es
c001d87b:	0f a0                	push   fs
c001d87d:	0f a8                	push   gs
c001d87f:	66 b8 10 00          	mov    ax,0x10
c001d883:	66 8e d8             	mov    ds,ax
c001d886:	66 8e c0             	mov    es,ax
c001d889:	66 8e e0             	mov    fs,ax
c001d88c:	66 8e e8             	mov    gs,ax
c001d88f:	54                   	push   esp
c001d890:	fc                   	cld    
c001d891:	e8 5a e6 fe ff       	call   c000bef0 <int_handler>
c001d896:	81 c4 04 00 00 00    	add    esp,0x4
c001d89c:	0f a9                	pop    gs
c001d89e:	0f a1                	pop    fs
c001d8a0:	07                   	pop    es
c001d8a1:	1f                   	pop    ds
c001d8a2:	e8 60 30 ff ff       	call   c0010907 <KiCheckSignalZ>
c001d8a7:	3d 00 00 00 00       	cmp    eax,0x0
c001d8ac:	0f 84 c0 00 00 00    	je     c001d972 <skipSignals>
c001d8b2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001d8b7:	61                   	popa   
c001d8b8:	53                   	push   ebx
c001d8b9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001d8bf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001d8c2:	5b                   	pop    ebx
c001d8c3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001d8c8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001d8cb:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001d8ce:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d8d1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001d8d4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001d8d7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001d8da:	81 c4 08 00 00 00    	add    esp,0x8
c001d8e0:	5e                   	pop    esi
c001d8e1:	5b                   	pop    ebx
c001d8e2:	59                   	pop    ecx
c001d8e3:	5a                   	pop    edx
c001d8e4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001d8e7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001d8ea:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001d8ed:	52                   	push   edx
c001d8ee:	51                   	push   ecx
c001d8ef:	53                   	push   ebx
c001d8f0:	56                   	push   esi
c001d8f1:	81 ec 08 00 00 00    	sub    esp,0x8
c001d8f7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001d8fa:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001d8fd:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001d900:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d903:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d906:	60                   	pusha  
c001d907:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001d90d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001d910:	89 e3                	mov    ebx,esp
c001d912:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001d915:	52                   	push   edx
c001d916:	68 36 d9 01 c0       	push   0xc001d936
c001d91b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001d91e:	89 dc                	mov    esp,ebx
c001d920:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001d923:	68 23 00 00 00       	push   0x23
c001d928:	51                   	push   ecx
c001d929:	68 02 02 00 00       	push   0x202
c001d92e:	68 1b 00 00 00       	push   0x1b
c001d933:	ff 36                	push   DWORD PTR [esi]
c001d935:	cf                   	iret   

c001d936 <finishSignal>:
c001d936:	cd 0f                	int    0xf

c001d938 <finishSignal2>:
c001d938:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001d93e:	e8 41 30 ff ff       	call   c0010984 <KiFinishSignalZ>
c001d943:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001d949:	68 23 00 00 00       	push   0x23
c001d94e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001d951:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001d954:	68 1b 00 00 00       	push   0x1b
c001d959:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001d95c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d95f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001d962:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001d965:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001d968:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001d96b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001d96e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001d971:	cf                   	iret   

c001d972 <skipSignals>:
c001d972:	61                   	popa   
c001d973:	81 c4 08 00 00 00    	add    esp,0x8
c001d979:	cf                   	iret   
c001d97a:	90                   	nop
c001d97b:	90                   	nop

c001d97c <irq16>:
c001d97c:	fa                   	cli    
c001d97d:	6a 00                	push   0x0
c001d97f:	6a 30                	push   0x30
c001d981:	e9 c0 fe ff ff       	jmp    c001d846 <int_common_stub>

c001d986 <irq17>:
c001d986:	fa                   	cli    
c001d987:	6a 00                	push   0x0
c001d989:	6a 31                	push   0x31
c001d98b:	e9 b6 fe ff ff       	jmp    c001d846 <int_common_stub>

c001d990 <irq18>:
c001d990:	fa                   	cli    
c001d991:	6a 00                	push   0x0
c001d993:	6a 32                	push   0x32
c001d995:	e9 ac fe ff ff       	jmp    c001d846 <int_common_stub>

c001d99a <irq19>:
c001d99a:	fa                   	cli    
c001d99b:	6a 00                	push   0x0
c001d99d:	6a 33                	push   0x33
c001d99f:	e9 a2 fe ff ff       	jmp    c001d846 <int_common_stub>

c001d9a4 <irq20>:
c001d9a4:	fa                   	cli    
c001d9a5:	6a 00                	push   0x0
c001d9a7:	6a 34                	push   0x34
c001d9a9:	e9 98 fe ff ff       	jmp    c001d846 <int_common_stub>

c001d9ae <irq21>:
c001d9ae:	fa                   	cli    
c001d9af:	6a 00                	push   0x0
c001d9b1:	6a 35                	push   0x35
c001d9b3:	e9 8e fe ff ff       	jmp    c001d846 <int_common_stub>

c001d9b8 <irq22>:
c001d9b8:	fa                   	cli    
c001d9b9:	6a 00                	push   0x0
c001d9bb:	6a 36                	push   0x36
c001d9bd:	e9 84 fe ff ff       	jmp    c001d846 <int_common_stub>

c001d9c2 <irq23>:
c001d9c2:	fa                   	cli    
c001d9c3:	6a 00                	push   0x0
c001d9c5:	6a 37                	push   0x37
c001d9c7:	e9 7a fe ff ff       	jmp    c001d846 <int_common_stub>
c001d9cc:	66 90                	xchg   ax,ax
c001d9ce:	66 90                	xchg   ax,ax

c001d9d0 <i386GetRDRAND>:
c001d9d0:	b9 64 00 00 00       	mov    ecx,0x64

c001d9d5 <retry>:
c001d9d5:	0f c7 f0             	rdrand eax
c001d9d8:	72 05                	jb     c001d9df <retry.done>
c001d9da:	e2 f9                	loop   c001d9d5 <retry>

c001d9dc <retry.fail>:
c001d9dc:	31 c0                	xor    eax,eax
c001d9de:	c3                   	ret    

c001d9df <retry.done>:
c001d9df:	c3                   	ret    

c001d9e0 <absolutelyNoChanceInHell>:
c001d9e0:	b8 01 00 00 00       	mov    eax,0x1
c001d9e5:	0f a2                	cpuid  
c001d9e7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001d9ed:	74 06                	je     c001d9f5 <sseDetect.noSSE>
c001d9ef:	b8 01 00 00 00       	mov    eax,0x1
c001d9f4:	c3                   	ret    

c001d9f5 <sseDetect.noSSE>:
c001d9f5:	31 c0                	xor    eax,eax
c001d9f7:	c3                   	ret    

c001d9f8 <sseSave>:
c001d9f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d9fc:	0f ae 00             	fxsave [eax]
c001d9ff:	c3                   	ret    

c001da00 <sseLoad>:
c001da00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001da04:	0f ae 08             	fxrstor [eax]
c001da07:	c3                   	ret    

c001da08 <sseInit>:
c001da08:	e8 42 00 00 00       	call   c001da4f <x87Init>
c001da0d:	0f 20 e0             	mov    eax,cr4
c001da10:	66 0d 00 06          	or     ax,0x600
c001da14:	0f 22 e0             	mov    cr4,eax
c001da17:	c3                   	ret    

c001da18 <sseClose>:
c001da18:	c3                   	ret    
c001da19:	66 90                	xchg   ax,ax
c001da1b:	66 90                	xchg   ax,ax
c001da1d:	66 90                	xchg   ax,ax
c001da1f:	90                   	nop

c001da20 <value_37F>:
c001da20:	7f 03                	jg     c001da25 <value_37A+0x1>

c001da22 <value_37E>:
c001da22:	7e 03                	jle    c001da27 <x87Detect+0x1>

c001da24 <value_37A>:
c001da24:	7a 03                	jp     c001da29 <x87Detect+0x3>

c001da26 <x87Detect>:
c001da26:	b8 01 00 00 00       	mov    eax,0x1
c001da2b:	0f a2                	cpuid  
c001da2d:	f7 c2 01 00 00 00    	test   edx,0x1
c001da33:	74 06                	je     c001da3b <x87Detect.nox87>
c001da35:	b8 01 00 00 00       	mov    eax,0x1
c001da3a:	c3                   	ret    

c001da3b <x87Detect.nox87>:
c001da3b:	b8 00 00 00 00       	mov    eax,0x0
c001da40:	c3                   	ret    

c001da41 <x87Save>:
c001da41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001da45:	dd 30                	fnsave [eax]
c001da47:	c3                   	ret    

c001da48 <x87Load>:
c001da48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001da4c:	dd 20                	frstor [eax]
c001da4e:	c3                   	ret    

c001da4f <x87Init>:
c001da4f:	0f 20 c0             	mov    eax,cr0
c001da52:	66 25 fb ff          	and    ax,0xfffb
c001da56:	66 0d 22 00          	or     ax,0x22
c001da5a:	0f 22 c0             	mov    cr0,eax
c001da5d:	db e3                	fninit 
c001da5f:	0f 06                	clts   
c001da61:	d9 2d 24 da 01 c0    	fldcw  WORD PTR ds:0xc001da24
c001da67:	c3                   	ret    

c001da68 <x87Close>:
c001da68:	c3                   	ret    
c001da69:	66 90                	xchg   ax,ax
c001da6b:	90                   	nop

c001da6c <__do_global_ctors_aux>:
c001da6c:	a1 1c ea 01 c0       	mov    eax,ds:0xc001ea1c
c001da71:	83 f8 ff             	cmp    eax,0xffffffff
c001da74:	74 1a                	je     c001da90 <__do_global_ctors_aux+0x24>
c001da76:	55                   	push   ebp
c001da77:	89 e5                	mov    ebp,esp
c001da79:	53                   	push   ebx
c001da7a:	52                   	push   edx
c001da7b:	bb 1c ea 01 c0       	mov    ebx,0xc001ea1c
c001da80:	ff d0                	call   eax
c001da82:	83 eb 04             	sub    ebx,0x4
c001da85:	8b 03                	mov    eax,DWORD PTR [ebx]
c001da87:	83 f8 ff             	cmp    eax,0xffffffff
c001da8a:	75 f4                	jne    c001da80 <__do_global_ctors_aux+0x14>
c001da8c:	58                   	pop    eax
c001da8d:	5b                   	pop    ebx
c001da8e:	5d                   	pop    ebp
c001da8f:	c3                   	ret    
c001da90:	c3                   	ret    
c001da91:	66 90                	xchg   ax,ax
c001da93:	90                   	nop

c001da94 <__divdi3>:
c001da94:	55                   	push   ebp
c001da95:	57                   	push   edi
c001da96:	56                   	push   esi
c001da97:	53                   	push   ebx
c001da98:	83 ec 1c             	sub    esp,0x1c
c001da9b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001da9f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001daa3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001daa6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001daaa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001daae:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dab2:	85 db                	test   ebx,ebx
c001dab4:	0f 88 8e 00 00 00    	js     c001db48 <__divdi3+0xb4>
c001daba:	89 dd                	mov    ebp,ebx
c001dabc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001dac4:	89 d3                	mov    ebx,edx
c001dac6:	85 d2                	test   edx,edx
c001dac8:	79 0d                	jns    c001dad7 <__divdi3+0x43>
c001daca:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001dace:	f7 d8                	neg    eax
c001dad0:	83 d2 00             	adc    edx,0x0
c001dad3:	f7 da                	neg    edx
c001dad5:	89 d3                	mov    ebx,edx
c001dad7:	89 c7                	mov    edi,eax
c001dad9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001dadc:	85 db                	test   ebx,ebx
c001dade:	75 48                	jne    c001db28 <__divdi3+0x94>
c001dae0:	39 ef                	cmp    edi,ebp
c001dae2:	76 24                	jbe    c001db08 <__divdi3+0x74>
c001dae4:	89 ea                	mov    edx,ebp
c001dae6:	f7 f7                	div    edi
c001dae8:	89 c1                	mov    ecx,eax
c001daea:	31 f6                	xor    esi,esi
c001daec:	89 c8                	mov    eax,ecx
c001daee:	89 f2                	mov    edx,esi
c001daf0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001daf4:	85 c9                	test   ecx,ecx
c001daf6:	74 07                	je     c001daff <__divdi3+0x6b>
c001daf8:	f7 d8                	neg    eax
c001dafa:	83 d2 00             	adc    edx,0x0
c001dafd:	f7 da                	neg    edx
c001daff:	83 c4 1c             	add    esp,0x1c
c001db02:	5b                   	pop    ebx
c001db03:	5e                   	pop    esi
c001db04:	5f                   	pop    edi
c001db05:	5d                   	pop    ebp
c001db06:	c3                   	ret    
c001db07:	90                   	nop
c001db08:	85 ff                	test   edi,edi
c001db0a:	75 0b                	jne    c001db17 <__divdi3+0x83>
c001db0c:	b8 01 00 00 00       	mov    eax,0x1
c001db11:	31 d2                	xor    edx,edx
c001db13:	f7 f3                	div    ebx
c001db15:	89 c7                	mov    edi,eax
c001db17:	31 d2                	xor    edx,edx
c001db19:	89 e8                	mov    eax,ebp
c001db1b:	f7 f7                	div    edi
c001db1d:	89 c6                	mov    esi,eax
c001db1f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001db22:	f7 f7                	div    edi
c001db24:	89 c1                	mov    ecx,eax
c001db26:	eb c4                	jmp    c001daec <__divdi3+0x58>
c001db28:	39 eb                	cmp    ebx,ebp
c001db2a:	77 3c                	ja     c001db68 <__divdi3+0xd4>
c001db2c:	0f bd f3             	bsr    esi,ebx
c001db2f:	83 f6 1f             	xor    esi,0x1f
c001db32:	75 40                	jne    c001db74 <__divdi3+0xe0>
c001db34:	39 eb                	cmp    ebx,ebp
c001db36:	72 09                	jb     c001db41 <__divdi3+0xad>
c001db38:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001db3b:	0f 87 97 00 00 00    	ja     c001dbd8 <__divdi3+0x144>
c001db41:	b9 01 00 00 00       	mov    ecx,0x1
c001db46:	eb a4                	jmp    c001daec <__divdi3+0x58>
c001db48:	f7 d9                	neg    ecx
c001db4a:	83 d3 00             	adc    ebx,0x0
c001db4d:	f7 db                	neg    ebx
c001db4f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001db52:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001db56:	89 dd                	mov    ebp,ebx
c001db58:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001db60:	e9 5f ff ff ff       	jmp    c001dac4 <__divdi3+0x30>
c001db65:	8d 76 00             	lea    esi,[esi+0x0]
c001db68:	31 f6                	xor    esi,esi
c001db6a:	31 c9                	xor    ecx,ecx
c001db6c:	e9 7b ff ff ff       	jmp    c001daec <__divdi3+0x58>
c001db71:	8d 76 00             	lea    esi,[esi+0x0]
c001db74:	b8 20 00 00 00       	mov    eax,0x20
c001db79:	29 f0                	sub    eax,esi
c001db7b:	89 f1                	mov    ecx,esi
c001db7d:	d3 e3                	shl    ebx,cl
c001db7f:	89 fa                	mov    edx,edi
c001db81:	88 c1                	mov    cl,al
c001db83:	d3 ea                	shr    edx,cl
c001db85:	09 da                	or     edx,ebx
c001db87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001db8b:	89 f1                	mov    ecx,esi
c001db8d:	d3 e7                	shl    edi,cl
c001db8f:	89 eb                	mov    ebx,ebp
c001db91:	88 c1                	mov    cl,al
c001db93:	d3 eb                	shr    ebx,cl
c001db95:	89 f1                	mov    ecx,esi
c001db97:	d3 e5                	shl    ebp,cl
c001db99:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001db9c:	88 c1                	mov    cl,al
c001db9e:	d3 ea                	shr    edx,cl
c001dba0:	09 d5                	or     ebp,edx
c001dba2:	89 e8                	mov    eax,ebp
c001dba4:	89 da                	mov    edx,ebx
c001dba6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001dbaa:	89 d3                	mov    ebx,edx
c001dbac:	89 c5                	mov    ebp,eax
c001dbae:	f7 e7                	mul    edi
c001dbb0:	39 d3                	cmp    ebx,edx
c001dbb2:	72 18                	jb     c001dbcc <__divdi3+0x138>
c001dbb4:	74 0a                	je     c001dbc0 <__divdi3+0x12c>
c001dbb6:	89 e9                	mov    ecx,ebp
c001dbb8:	31 f6                	xor    esi,esi
c001dbba:	e9 2d ff ff ff       	jmp    c001daec <__divdi3+0x58>
c001dbbf:	90                   	nop
c001dbc0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001dbc3:	89 f1                	mov    ecx,esi
c001dbc5:	d3 e7                	shl    edi,cl
c001dbc7:	39 c7                	cmp    edi,eax
c001dbc9:	73 eb                	jae    c001dbb6 <__divdi3+0x122>
c001dbcb:	90                   	nop
c001dbcc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001dbcf:	31 f6                	xor    esi,esi
c001dbd1:	e9 16 ff ff ff       	jmp    c001daec <__divdi3+0x58>
c001dbd6:	66 90                	xchg   ax,ax
c001dbd8:	31 c9                	xor    ecx,ecx
c001dbda:	e9 0d ff ff ff       	jmp    c001daec <__divdi3+0x58>
c001dbdf:	90                   	nop

c001dbe0 <__moddi3>:
c001dbe0:	55                   	push   ebp
c001dbe1:	57                   	push   edi
c001dbe2:	56                   	push   esi
c001dbe3:	53                   	push   ebx
c001dbe4:	83 ec 2c             	sub    esp,0x2c
c001dbe7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001dbeb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001dbef:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dbf3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001dbf7:	85 db                	test   ebx,ebx
c001dbf9:	0f 88 85 00 00 00    	js     c001dc84 <__moddi3+0xa4>
c001dbff:	89 de                	mov    esi,ebx
c001dc01:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001dc09:	89 d7                	mov    edi,edx
c001dc0b:	85 d2                	test   edx,edx
c001dc0d:	79 09                	jns    c001dc18 <__moddi3+0x38>
c001dc0f:	f7 d8                	neg    eax
c001dc11:	83 d2 00             	adc    edx,0x0
c001dc14:	f7 da                	neg    edx
c001dc16:	89 d7                	mov    edi,edx
c001dc18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dc1c:	89 cd                	mov    ebp,ecx
c001dc1e:	85 ff                	test   edi,edi
c001dc20:	75 52                	jne    c001dc74 <__moddi3+0x94>
c001dc22:	89 c3                	mov    ebx,eax
c001dc24:	39 f0                	cmp    eax,esi
c001dc26:	76 24                	jbe    c001dc4c <__moddi3+0x6c>
c001dc28:	89 c8                	mov    eax,ecx
c001dc2a:	89 f2                	mov    edx,esi
c001dc2c:	f7 f3                	div    ebx
c001dc2e:	89 d6                	mov    esi,edx
c001dc30:	89 f0                	mov    eax,esi
c001dc32:	31 d2                	xor    edx,edx
c001dc34:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dc38:	85 c9                	test   ecx,ecx
c001dc3a:	74 07                	je     c001dc43 <__moddi3+0x63>
c001dc3c:	f7 d8                	neg    eax
c001dc3e:	83 d2 00             	adc    edx,0x0
c001dc41:	f7 da                	neg    edx
c001dc43:	83 c4 2c             	add    esp,0x2c
c001dc46:	5b                   	pop    ebx
c001dc47:	5e                   	pop    esi
c001dc48:	5f                   	pop    edi
c001dc49:	5d                   	pop    ebp
c001dc4a:	c3                   	ret    
c001dc4b:	90                   	nop
c001dc4c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001dc50:	85 db                	test   ebx,ebx
c001dc52:	75 0d                	jne    c001dc61 <__moddi3+0x81>
c001dc54:	b8 01 00 00 00       	mov    eax,0x1
c001dc59:	31 d2                	xor    edx,edx
c001dc5b:	f7 f7                	div    edi
c001dc5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dc61:	89 f0                	mov    eax,esi
c001dc63:	31 d2                	xor    edx,edx
c001dc65:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001dc69:	f7 f7                	div    edi
c001dc6b:	89 e8                	mov    eax,ebp
c001dc6d:	f7 f7                	div    edi
c001dc6f:	89 d6                	mov    esi,edx
c001dc71:	eb bd                	jmp    c001dc30 <__moddi3+0x50>
c001dc73:	90                   	nop
c001dc74:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001dc78:	39 f7                	cmp    edi,esi
c001dc7a:	76 20                	jbe    c001dc9c <__moddi3+0xbc>
c001dc7c:	89 c8                	mov    eax,ecx
c001dc7e:	89 f2                	mov    edx,esi
c001dc80:	eb b2                	jmp    c001dc34 <__moddi3+0x54>
c001dc82:	66 90                	xchg   ax,ax
c001dc84:	f7 d9                	neg    ecx
c001dc86:	83 d3 00             	adc    ebx,0x0
c001dc89:	f7 db                	neg    ebx
c001dc8b:	89 de                	mov    esi,ebx
c001dc8d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001dc95:	e9 6f ff ff ff       	jmp    c001dc09 <__moddi3+0x29>
c001dc9a:	66 90                	xchg   ax,ax
c001dc9c:	0f bd c7             	bsr    eax,edi
c001dc9f:	83 f0 1f             	xor    eax,0x1f
c001dca2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dca6:	75 24                	jne    c001dccc <__moddi3+0xec>
c001dca8:	39 f7                	cmp    edi,esi
c001dcaa:	72 06                	jb     c001dcb2 <__moddi3+0xd2>
c001dcac:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001dcb0:	77 0c                	ja     c001dcbe <__moddi3+0xde>
c001dcb2:	89 e9                	mov    ecx,ebp
c001dcb4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001dcb8:	19 fe                	sbb    esi,edi
c001dcba:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001dcbe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dcc2:	89 f2                	mov    edx,esi
c001dcc4:	e9 6b ff ff ff       	jmp    c001dc34 <__moddi3+0x54>
c001dcc9:	8d 76 00             	lea    esi,[esi+0x0]
c001dccc:	b8 20 00 00 00       	mov    eax,0x20
c001dcd1:	89 c2                	mov    edx,eax
c001dcd3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001dcd7:	29 da                	sub    edx,ebx
c001dcd9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dcdd:	88 d9                	mov    cl,bl
c001dcdf:	d3 e7                	shl    edi,cl
c001dce1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dce5:	88 d1                	mov    cl,dl
c001dce7:	d3 e8                	shr    eax,cl
c001dce9:	09 c7                	or     edi,eax
c001dceb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001dcef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001dcf3:	89 d8                	mov    eax,ebx
c001dcf5:	88 d9                	mov    cl,bl
c001dcf7:	d3 e7                	shl    edi,cl
c001dcf9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001dcfd:	89 f3                	mov    ebx,esi
c001dcff:	88 d1                	mov    cl,dl
c001dd01:	d3 eb                	shr    ebx,cl
c001dd03:	89 c7                	mov    edi,eax
c001dd05:	88 c1                	mov    cl,al
c001dd07:	d3 e6                	shl    esi,cl
c001dd09:	89 e8                	mov    eax,ebp
c001dd0b:	88 d1                	mov    cl,dl
c001dd0d:	d3 e8                	shr    eax,cl
c001dd0f:	09 f0                	or     eax,esi
c001dd11:	89 f9                	mov    ecx,edi
c001dd13:	d3 e5                	shl    ebp,cl
c001dd15:	89 da                	mov    edx,ebx
c001dd17:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001dd1b:	89 d3                	mov    ebx,edx
c001dd1d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001dd21:	89 c6                	mov    esi,eax
c001dd23:	89 d1                	mov    ecx,edx
c001dd25:	39 d3                	cmp    ebx,edx
c001dd27:	72 27                	jb     c001dd50 <__moddi3+0x170>
c001dd29:	74 21                	je     c001dd4c <__moddi3+0x16c>
c001dd2b:	29 f5                	sub    ebp,esi
c001dd2d:	19 cb                	sbb    ebx,ecx
c001dd2f:	89 de                	mov    esi,ebx
c001dd31:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001dd35:	d3 e6                	shl    esi,cl
c001dd37:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001dd3b:	89 f9                	mov    ecx,edi
c001dd3d:	d3 ed                	shr    ebp,cl
c001dd3f:	09 ee                	or     esi,ebp
c001dd41:	89 f0                	mov    eax,esi
c001dd43:	d3 eb                	shr    ebx,cl
c001dd45:	89 da                	mov    edx,ebx
c001dd47:	e9 e8 fe ff ff       	jmp    c001dc34 <__moddi3+0x54>
c001dd4c:	39 c5                	cmp    ebp,eax
c001dd4e:	73 db                	jae    c001dd2b <__moddi3+0x14b>
c001dd50:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001dd54:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001dd58:	89 d1                	mov    ecx,edx
c001dd5a:	89 c6                	mov    esi,eax
c001dd5c:	eb cd                	jmp    c001dd2b <__moddi3+0x14b>
c001dd5e:	66 90                	xchg   ax,ax

c001dd60 <__udivdi3>:
c001dd60:	55                   	push   ebp
c001dd61:	57                   	push   edi
c001dd62:	56                   	push   esi
c001dd63:	53                   	push   ebx
c001dd64:	83 ec 1c             	sub    esp,0x1c
c001dd67:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001dd6b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001dd6f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001dd73:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dd77:	85 d2                	test   edx,edx
c001dd79:	75 41                	jne    c001ddbc <__udivdi3+0x5c>
c001dd7b:	39 f7                	cmp    edi,esi
c001dd7d:	76 15                	jbe    c001dd94 <__udivdi3+0x34>
c001dd7f:	89 e8                	mov    eax,ebp
c001dd81:	89 f2                	mov    edx,esi
c001dd83:	f7 f7                	div    edi
c001dd85:	31 db                	xor    ebx,ebx
c001dd87:	89 da                	mov    edx,ebx
c001dd89:	83 c4 1c             	add    esp,0x1c
c001dd8c:	5b                   	pop    ebx
c001dd8d:	5e                   	pop    esi
c001dd8e:	5f                   	pop    edi
c001dd8f:	5d                   	pop    ebp
c001dd90:	c3                   	ret    
c001dd91:	8d 76 00             	lea    esi,[esi+0x0]
c001dd94:	89 f9                	mov    ecx,edi
c001dd96:	85 ff                	test   edi,edi
c001dd98:	75 0b                	jne    c001dda5 <__udivdi3+0x45>
c001dd9a:	b8 01 00 00 00       	mov    eax,0x1
c001dd9f:	31 d2                	xor    edx,edx
c001dda1:	f7 f7                	div    edi
c001dda3:	89 c1                	mov    ecx,eax
c001dda5:	31 d2                	xor    edx,edx
c001dda7:	89 f0                	mov    eax,esi
c001dda9:	f7 f1                	div    ecx
c001ddab:	89 c3                	mov    ebx,eax
c001ddad:	89 e8                	mov    eax,ebp
c001ddaf:	f7 f1                	div    ecx
c001ddb1:	89 da                	mov    edx,ebx
c001ddb3:	83 c4 1c             	add    esp,0x1c
c001ddb6:	5b                   	pop    ebx
c001ddb7:	5e                   	pop    esi
c001ddb8:	5f                   	pop    edi
c001ddb9:	5d                   	pop    ebp
c001ddba:	c3                   	ret    
c001ddbb:	90                   	nop
c001ddbc:	39 f2                	cmp    edx,esi
c001ddbe:	77 1c                	ja     c001dddc <__udivdi3+0x7c>
c001ddc0:	0f bd da             	bsr    ebx,edx
c001ddc3:	83 f3 1f             	xor    ebx,0x1f
c001ddc6:	75 24                	jne    c001ddec <__udivdi3+0x8c>
c001ddc8:	39 f2                	cmp    edx,esi
c001ddca:	72 08                	jb     c001ddd4 <__udivdi3+0x74>
c001ddcc:	39 ef                	cmp    edi,ebp
c001ddce:	0f 87 84 00 00 00    	ja     c001de58 <__udivdi3+0xf8>
c001ddd4:	b8 01 00 00 00       	mov    eax,0x1
c001ddd9:	eb ac                	jmp    c001dd87 <__udivdi3+0x27>
c001dddb:	90                   	nop
c001dddc:	31 db                	xor    ebx,ebx
c001ddde:	31 c0                	xor    eax,eax
c001dde0:	89 da                	mov    edx,ebx
c001dde2:	83 c4 1c             	add    esp,0x1c
c001dde5:	5b                   	pop    ebx
c001dde6:	5e                   	pop    esi
c001dde7:	5f                   	pop    edi
c001dde8:	5d                   	pop    ebp
c001dde9:	c3                   	ret    
c001ddea:	66 90                	xchg   ax,ax
c001ddec:	b8 20 00 00 00       	mov    eax,0x20
c001ddf1:	29 d8                	sub    eax,ebx
c001ddf3:	88 d9                	mov    cl,bl
c001ddf5:	d3 e2                	shl    edx,cl
c001ddf7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ddfb:	89 fa                	mov    edx,edi
c001ddfd:	88 c1                	mov    cl,al
c001ddff:	d3 ea                	shr    edx,cl
c001de01:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001de05:	09 d1                	or     ecx,edx
c001de07:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001de0b:	88 d9                	mov    cl,bl
c001de0d:	d3 e7                	shl    edi,cl
c001de0f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001de13:	89 f7                	mov    edi,esi
c001de15:	88 c1                	mov    cl,al
c001de17:	d3 ef                	shr    edi,cl
c001de19:	88 d9                	mov    cl,bl
c001de1b:	d3 e6                	shl    esi,cl
c001de1d:	89 ea                	mov    edx,ebp
c001de1f:	88 c1                	mov    cl,al
c001de21:	d3 ea                	shr    edx,cl
c001de23:	09 d6                	or     esi,edx
c001de25:	89 f0                	mov    eax,esi
c001de27:	89 fa                	mov    edx,edi
c001de29:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001de2d:	89 d7                	mov    edi,edx
c001de2f:	89 c6                	mov    esi,eax
c001de31:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001de35:	39 d7                	cmp    edi,edx
c001de37:	72 13                	jb     c001de4c <__udivdi3+0xec>
c001de39:	74 09                	je     c001de44 <__udivdi3+0xe4>
c001de3b:	89 f0                	mov    eax,esi
c001de3d:	31 db                	xor    ebx,ebx
c001de3f:	e9 43 ff ff ff       	jmp    c001dd87 <__udivdi3+0x27>
c001de44:	88 d9                	mov    cl,bl
c001de46:	d3 e5                	shl    ebp,cl
c001de48:	39 c5                	cmp    ebp,eax
c001de4a:	73 ef                	jae    c001de3b <__udivdi3+0xdb>
c001de4c:	8d 46 ff             	lea    eax,[esi-0x1]
c001de4f:	31 db                	xor    ebx,ebx
c001de51:	e9 31 ff ff ff       	jmp    c001dd87 <__udivdi3+0x27>
c001de56:	66 90                	xchg   ax,ax
c001de58:	31 c0                	xor    eax,eax
c001de5a:	e9 28 ff ff ff       	jmp    c001dd87 <__udivdi3+0x27>
c001de5f:	90                   	nop

c001de60 <__umoddi3>:
c001de60:	55                   	push   ebp
c001de61:	57                   	push   edi
c001de62:	56                   	push   esi
c001de63:	53                   	push   ebx
c001de64:	83 ec 1c             	sub    esp,0x1c
c001de67:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001de6b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001de6f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001de73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001de77:	89 da                	mov    edx,ebx
c001de79:	85 c0                	test   eax,eax
c001de7b:	75 37                	jne    c001deb4 <__umoddi3+0x54>
c001de7d:	39 df                	cmp    edi,ebx
c001de7f:	76 13                	jbe    c001de94 <__umoddi3+0x34>
c001de81:	89 f0                	mov    eax,esi
c001de83:	f7 f7                	div    edi
c001de85:	89 d0                	mov    eax,edx
c001de87:	31 d2                	xor    edx,edx
c001de89:	83 c4 1c             	add    esp,0x1c
c001de8c:	5b                   	pop    ebx
c001de8d:	5e                   	pop    esi
c001de8e:	5f                   	pop    edi
c001de8f:	5d                   	pop    ebp
c001de90:	c3                   	ret    
c001de91:	8d 76 00             	lea    esi,[esi+0x0]
c001de94:	89 fd                	mov    ebp,edi
c001de96:	85 ff                	test   edi,edi
c001de98:	75 0b                	jne    c001dea5 <__umoddi3+0x45>
c001de9a:	b8 01 00 00 00       	mov    eax,0x1
c001de9f:	31 d2                	xor    edx,edx
c001dea1:	f7 f7                	div    edi
c001dea3:	89 c5                	mov    ebp,eax
c001dea5:	89 d8                	mov    eax,ebx
c001dea7:	31 d2                	xor    edx,edx
c001dea9:	f7 f5                	div    ebp
c001deab:	89 f0                	mov    eax,esi
c001dead:	f7 f5                	div    ebp
c001deaf:	89 d0                	mov    eax,edx
c001deb1:	eb d4                	jmp    c001de87 <__umoddi3+0x27>
c001deb3:	90                   	nop
c001deb4:	89 f1                	mov    ecx,esi
c001deb6:	39 d8                	cmp    eax,ebx
c001deb8:	76 0a                	jbe    c001dec4 <__umoddi3+0x64>
c001deba:	89 f0                	mov    eax,esi
c001debc:	83 c4 1c             	add    esp,0x1c
c001debf:	5b                   	pop    ebx
c001dec0:	5e                   	pop    esi
c001dec1:	5f                   	pop    edi
c001dec2:	5d                   	pop    ebp
c001dec3:	c3                   	ret    
c001dec4:	0f bd e8             	bsr    ebp,eax
c001dec7:	83 f5 1f             	xor    ebp,0x1f
c001deca:	75 1c                	jne    c001dee8 <__umoddi3+0x88>
c001decc:	39 d8                	cmp    eax,ebx
c001dece:	72 04                	jb     c001ded4 <__umoddi3+0x74>
c001ded0:	39 f7                	cmp    edi,esi
c001ded2:	77 08                	ja     c001dedc <__umoddi3+0x7c>
c001ded4:	89 da                	mov    edx,ebx
c001ded6:	29 fe                	sub    esi,edi
c001ded8:	19 c2                	sbb    edx,eax
c001deda:	89 f1                	mov    ecx,esi
c001dedc:	89 c8                	mov    eax,ecx
c001dede:	83 c4 1c             	add    esp,0x1c
c001dee1:	5b                   	pop    ebx
c001dee2:	5e                   	pop    esi
c001dee3:	5f                   	pop    edi
c001dee4:	5d                   	pop    ebp
c001dee5:	c3                   	ret    
c001dee6:	66 90                	xchg   ax,ax
c001dee8:	ba 20 00 00 00       	mov    edx,0x20
c001deed:	29 ea                	sub    edx,ebp
c001deef:	89 e9                	mov    ecx,ebp
c001def1:	d3 e0                	shl    eax,cl
c001def3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001def7:	89 f8                	mov    eax,edi
c001def9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001defd:	88 d1                	mov    cl,dl
c001deff:	d3 e8                	shr    eax,cl
c001df01:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001df05:	09 c1                	or     ecx,eax
c001df07:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001df0b:	89 e9                	mov    ecx,ebp
c001df0d:	d3 e7                	shl    edi,cl
c001df0f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001df13:	89 d8                	mov    eax,ebx
c001df15:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001df19:	88 d1                	mov    cl,dl
c001df1b:	d3 e8                	shr    eax,cl
c001df1d:	89 c7                	mov    edi,eax
c001df1f:	89 e9                	mov    ecx,ebp
c001df21:	d3 e3                	shl    ebx,cl
c001df23:	89 f0                	mov    eax,esi
c001df25:	88 d1                	mov    cl,dl
c001df27:	d3 e8                	shr    eax,cl
c001df29:	09 d8                	or     eax,ebx
c001df2b:	89 e9                	mov    ecx,ebp
c001df2d:	d3 e6                	shl    esi,cl
c001df2f:	89 f3                	mov    ebx,esi
c001df31:	89 fa                	mov    edx,edi
c001df33:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001df37:	89 d1                	mov    ecx,edx
c001df39:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001df3d:	89 c6                	mov    esi,eax
c001df3f:	89 d7                	mov    edi,edx
c001df41:	39 d1                	cmp    ecx,edx
c001df43:	72 27                	jb     c001df6c <__umoddi3+0x10c>
c001df45:	74 21                	je     c001df68 <__umoddi3+0x108>
c001df47:	89 ca                	mov    edx,ecx
c001df49:	29 f3                	sub    ebx,esi
c001df4b:	19 fa                	sbb    edx,edi
c001df4d:	89 d0                	mov    eax,edx
c001df4f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001df53:	d3 e0                	shl    eax,cl
c001df55:	89 e9                	mov    ecx,ebp
c001df57:	d3 eb                	shr    ebx,cl
c001df59:	09 d8                	or     eax,ebx
c001df5b:	d3 ea                	shr    edx,cl
c001df5d:	83 c4 1c             	add    esp,0x1c
c001df60:	5b                   	pop    ebx
c001df61:	5e                   	pop    esi
c001df62:	5f                   	pop    edi
c001df63:	5d                   	pop    ebp
c001df64:	c3                   	ret    
c001df65:	8d 76 00             	lea    esi,[esi+0x0]
c001df68:	39 c3                	cmp    ebx,eax
c001df6a:	73 db                	jae    c001df47 <__umoddi3+0xe7>
c001df6c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001df70:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001df74:	89 d7                	mov    edi,edx
c001df76:	89 c6                	mov    esi,eax
c001df78:	eb cd                	jmp    c001df47 <__umoddi3+0xe7>

Disassembly of section .init:

c001df7a <_init>:
c001df7a:	55                   	push   ebp
c001df7b:	89 e5                	mov    ebp,esp
c001df7d:	e8 72 21 fe ff       	call   c00000f4 <frame_dummy>
c001df82:	e8 e5 fa ff ff       	call   c001da6c <__do_global_ctors_aux>
c001df87:	5d                   	pop    ebp
c001df88:	c3                   	ret    

Disassembly of section .fini:

c001df89 <_fini>:
c001df89:	55                   	push   ebp
c001df8a:	89 e5                	mov    ebp,esp
c001df8c:	e8 f3 20 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001df91:	5d                   	pop    ebp
c001df92:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001df94 <Computer::~Computer()>:
c001df94:	83 ec 0c             	sub    esp,0xc
c001df97:	ba b4 f2 01 c0       	mov    edx,0xc001f2b4
c001df9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfa0:	89 10                	mov    DWORD PTR [eax],edx
c001dfa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfa6:	83 ec 0c             	sub    esp,0xc
c001dfa9:	50                   	push   eax
c001dfaa:	e8 97 d9 fe ff       	call   c000b946 <Device::~Device()>
c001dfaf:	83 c4 10             	add    esp,0x10
c001dfb2:	90                   	nop
c001dfb3:	83 c4 0c             	add    esp,0xc
c001dfb6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001dfb8 <Computer::~Computer()>:
c001dfb8:	83 ec 0c             	sub    esp,0xc
c001dfbb:	83 ec 0c             	sub    esp,0xc
c001dfbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dfc2:	e8 cd ff ff ff       	call   c001df94 <Computer::~Computer()>
c001dfc7:	83 c4 10             	add    esp,0x10
c001dfca:	83 ec 08             	sub    esp,0x8
c001dfcd:	68 70 01 00 00       	push   0x170
c001dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dfd6:	e8 35 c5 fe ff       	call   c000a510 <operator delete(void*, unsigned long)>
c001dfdb:	83 c4 10             	add    esp,0x10
c001dfde:	83 c4 0c             	add    esp,0xc
c001dfe1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001dfe2 <idleCommon()>:
c001dfe2:	83 ec 0c             	sub    esp,0xc
c001dfe5:	fa                   	cli    
c001dfe6:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001dfec:	e8 6b 6a ff ff       	call   c0014a5c <schedule()>
c001dff1:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001dff6:	48                   	dec    eax
c001dff7:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001dffc:	75 01                	jne    c001dfff <idleCommon()+0x1d>
c001dffe:	fb                   	sti    
c001dfff:	83 c4 0c             	add    esp,0xc
c001e002:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001e004 <LinkedList<UnixFile>::~LinkedList()>:
c001e004:	90                   	nop
c001e005:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001e006 <LinkedList<UnixFile>::LinkedList()>:
c001e006:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e00a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e010:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e014:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e01b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e01f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e026:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e02a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e030:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e034:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e03b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e03f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e046:	90                   	nop
c001e047:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001e048 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001e048:	83 ec 0c             	sub    esp,0xc
c001e04b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e050:	75 10                	jne    c001e062 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001e052:	83 ec 0c             	sub    esp,0xc
c001e055:	68 c8 f4 01 c0       	push   0xc001f4c8
c001e05a:	e8 68 23 ff ff       	call   c00103c7 <KePanic(char const*)>
c001e05f:	83 c4 10             	add    esp,0x10
c001e062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e066:	8b 00                	mov    eax,DWORD PTR [eax]
c001e068:	85 c0                	test   eax,eax
c001e06a:	74 34                	je     c001e0a0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e06c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e070:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e073:	85 c0                	test   eax,eax
c001e075:	74 29                	je     c001e0a0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e07b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e07e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e082:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e085:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e089:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e08d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e094:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e097:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e09e:	eb 65                	jmp    c001e105 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e0a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0a4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e0a6:	85 c0                	test   eax,eax
c001e0a8:	75 4b                	jne    c001e0f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e0aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e0b1:	85 c0                	test   eax,eax
c001e0b3:	75 40                	jne    c001e0f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e0b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0b9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e0bd:	89 10                	mov    DWORD PTR [eax],edx
c001e0bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e0c7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e0ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e0d1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e0d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e0df:	85 c0                	test   eax,eax
c001e0e1:	74 22                	je     c001e105 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e0e3:	83 ec 0c             	sub    esp,0xc
c001e0e6:	68 ea f4 01 c0       	push   0xc001f4ea
c001e0eb:	e8 d7 22 ff ff       	call   c00103c7 <KePanic(char const*)>
c001e0f0:	83 c4 10             	add    esp,0x10
c001e0f3:	eb 10                	jmp    c001e105 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e0f5:	83 ec 0c             	sub    esp,0xc
c001e0f8:	68 f4 f4 01 c0       	push   0xc001f4f4
c001e0fd:	e8 c5 22 ff ff       	call   c00103c7 <KePanic(char const*)>
c001e102:	83 c4 10             	add    esp,0x10
c001e105:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e109:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e10c:	8d 50 01             	lea    edx,[eax+0x1]
c001e10f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e113:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e116:	90                   	nop
c001e117:	83 c4 0c             	add    esp,0xc
c001e11a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001e11c <LinkedList<UnixFile>::getFirstElement()>:
c001e11c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e120:	8b 00                	mov    eax,DWORD PTR [eax]
c001e122:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001e124 <LinkedList<UnixFile>::removeFirst()>:
c001e124:	83 ec 0c             	sub    esp,0xc
c001e127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e12b:	8b 00                	mov    eax,DWORD PTR [eax]
c001e12d:	85 c0                	test   eax,eax
c001e12f:	75 12                	jne    c001e143 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001e131:	83 ec 0c             	sub    esp,0xc
c001e134:	68 00 f5 01 c0       	push   0xc001f500
c001e139:	e8 89 22 ff ff       	call   c00103c7 <KePanic(char const*)>
c001e13e:	83 c4 10             	add    esp,0x10
c001e141:	eb 7e                	jmp    c001e1c1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001e143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e147:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e14a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e14d:	85 c0                	test   eax,eax
c001e14f:	74 10                	je     c001e161 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001e151:	83 ec 0c             	sub    esp,0xc
c001e154:	68 4b f5 01 c0       	push   0xc001f54b
c001e159:	e8 69 22 ff ff       	call   c00103c7 <KePanic(char const*)>
c001e15e:	83 c4 10             	add    esp,0x10
c001e161:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e165:	8b 00                	mov    eax,DWORD PTR [eax]
c001e167:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e16a:	85 c0                	test   eax,eax
c001e16c:	75 33                	jne    c001e1a1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001e16e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e172:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e17c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e187:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e18a:	83 f8 01             	cmp    eax,0x1
c001e18d:	74 21                	je     c001e1b0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e18f:	83 ec 0c             	sub    esp,0xc
c001e192:	68 24 f5 01 c0       	push   0xc001f524
c001e197:	e8 2b 22 ff ff       	call   c00103c7 <KePanic(char const*)>
c001e19c:	83 c4 10             	add    esp,0x10
c001e19f:	eb 0f                	jmp    c001e1b0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e1a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1a5:	8b 00                	mov    eax,DWORD PTR [eax]
c001e1a7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e1aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1ae:	89 10                	mov    DWORD PTR [eax],edx
c001e1b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e1b7:	8d 50 ff             	lea    edx,[eax-0x1]
c001e1ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1be:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e1c1:	83 c4 0c             	add    esp,0xc
c001e1c4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001e1c6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001e1c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e1ca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e1cd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001e1ce <DriverlessDevice::~DriverlessDevice()>:
c001e1ce:	ba 9c fb 01 c0       	mov    edx,0xc001fb9c
c001e1d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e1d7:	89 10                	mov    DWORD PTR [eax],edx
c001e1d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e1dd:	50                   	push   eax
c001e1de:	e8 63 d7 fe ff       	call   c000b946 <Device::~Device()>
c001e1e3:	83 c4 04             	add    esp,0x4
c001e1e6:	90                   	nop
c001e1e7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001e1e8 <DriverlessDevice::~DriverlessDevice()>:
c001e1e8:	83 ec 0c             	sub    esp,0xc
c001e1eb:	83 ec 0c             	sub    esp,0xc
c001e1ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e1f2:	e8 d7 ff ff ff       	call   c001e1ce <DriverlessDevice::~DriverlessDevice()>
c001e1f7:	83 c4 10             	add    esp,0x10
c001e1fa:	83 ec 08             	sub    esp,0x8
c001e1fd:	68 58 01 00 00       	push   0x158
c001e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e206:	e8 05 c3 fe ff       	call   c000a510 <operator delete(void*, unsigned long)>
c001e20b:	83 c4 10             	add    esp,0x10
c001e20e:	83 c4 0c             	add    esp,0xc
c001e211:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001e212 <LinkedList<Device>::addElement(Device*)>:
c001e212:	83 ec 0c             	sub    esp,0xc
c001e215:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e21a:	75 10                	jne    c001e22c <LinkedList<Device>::addElement(Device*)+0x1a>
c001e21c:	83 ec 0c             	sub    esp,0xc
c001e21f:	68 c8 f4 01 c0       	push   0xc001f4c8
c001e224:	e8 9e 21 ff ff       	call   c00103c7 <KePanic(char const*)>
c001e229:	83 c4 10             	add    esp,0x10
c001e22c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e230:	8b 00                	mov    eax,DWORD PTR [eax]
c001e232:	85 c0                	test   eax,eax
c001e234:	74 3a                	je     c001e270 <LinkedList<Device>::addElement(Device*)+0x5e>
c001e236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e23a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e23d:	85 c0                	test   eax,eax
c001e23f:	74 2f                	je     c001e270 <LinkedList<Device>::addElement(Device*)+0x5e>
c001e241:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e245:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e248:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e24c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001e252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e256:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e25a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e25d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e261:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e264:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001e26e:	eb 68                	jmp    c001e2d8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001e270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e274:	8b 00                	mov    eax,DWORD PTR [eax]
c001e276:	85 c0                	test   eax,eax
c001e278:	75 4e                	jne    c001e2c8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001e27a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e27e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e281:	85 c0                	test   eax,eax
c001e283:	75 43                	jne    c001e2c8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001e285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e28d:	89 10                	mov    DWORD PTR [eax],edx
c001e28f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e293:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e297:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e29a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e29e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e2a1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001e2ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2af:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e2b2:	85 c0                	test   eax,eax
c001e2b4:	74 22                	je     c001e2d8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001e2b6:	83 ec 0c             	sub    esp,0xc
c001e2b9:	68 ea f4 01 c0       	push   0xc001f4ea
c001e2be:	e8 04 21 ff ff       	call   c00103c7 <KePanic(char const*)>
c001e2c3:	83 c4 10             	add    esp,0x10
c001e2c6:	eb 10                	jmp    c001e2d8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001e2c8:	83 ec 0c             	sub    esp,0xc
c001e2cb:	68 f4 f4 01 c0       	push   0xc001f4f4
c001e2d0:	e8 f2 20 ff ff       	call   c00103c7 <KePanic(char const*)>
c001e2d5:	83 c4 10             	add    esp,0x10
c001e2d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e2df:	8d 50 01             	lea    edx,[eax+0x1]
c001e2e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2e6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e2e9:	90                   	nop
c001e2ea:	83 c4 0c             	add    esp,0xc
c001e2ed:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001e2ee <LinkedList<Device>::LinkedList()>:
c001e2ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2f2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e2f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2fc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e303:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e307:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e30e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e312:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e318:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e31c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e323:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e327:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e32e:	90                   	nop
c001e32f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001e330 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001e330:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e334:	8b 00                	mov    eax,DWORD PTR [eax]
c001e336:	85 c0                	test   eax,eax
c001e338:	75 0e                	jne    c001e348 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e33a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e33e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e341:	85 c0                	test   eax,eax
c001e343:	75 03                	jne    c001e348 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e345:	b0 01                	mov    al,0x1
c001e347:	c3                   	ret    
c001e348:	b0 00                	mov    al,0x0
c001e34a:	90                   	nop
c001e34b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001e34c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001e34c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e350:	8b 00                	mov    eax,DWORD PTR [eax]
c001e352:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001e354 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001e354:	83 ec 0c             	sub    esp,0xc
c001e357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e35b:	8b 00                	mov    eax,DWORD PTR [eax]
c001e35d:	85 c0                	test   eax,eax
c001e35f:	75 17                	jne    c001e378 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001e361:	83 ec 0c             	sub    esp,0xc
c001e364:	68 00 f5 01 c0       	push   0xc001f500
c001e369:	e8 59 20 ff ff       	call   c00103c7 <KePanic(char const*)>
c001e36e:	83 c4 10             	add    esp,0x10
c001e371:	e9 92 00 00 00       	jmp    c001e408 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001e376:	66 90                	xchg   ax,ax
c001e378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e37c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e37f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e382:	85 c0                	test   eax,eax
c001e384:	0f 95 c0             	setne  al
c001e387:	84 c0                	test   al,al
c001e389:	74 11                	je     c001e39c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001e38b:	83 ec 0c             	sub    esp,0xc
c001e38e:	68 4b f5 01 c0       	push   0xc001f54b
c001e393:	e8 2f 20 ff ff       	call   c00103c7 <KePanic(char const*)>
c001e398:	83 c4 10             	add    esp,0x10
c001e39b:	90                   	nop
c001e39c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e3a2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e3a5:	85 c0                	test   eax,eax
c001e3a7:	0f 94 c0             	sete   al
c001e3aa:	84 c0                	test   al,al
c001e3ac:	74 36                	je     c001e3e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001e3ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3bc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e3c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3c7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e3ca:	83 f8 01             	cmp    eax,0x1
c001e3cd:	74 25                	je     c001e3f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001e3cf:	83 ec 0c             	sub    esp,0xc
c001e3d2:	68 24 f5 01 c0       	push   0xc001f524
c001e3d7:	e8 eb 1f ff ff       	call   c00103c7 <KePanic(char const*)>
c001e3dc:	83 c4 10             	add    esp,0x10
c001e3df:	eb 13                	jmp    c001e3f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001e3e1:	8d 76 00             	lea    esi,[esi+0x0]
c001e3e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3e8:	8b 00                	mov    eax,DWORD PTR [eax]
c001e3ea:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e3ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3f1:	89 10                	mov    DWORD PTR [eax],edx
c001e3f3:	90                   	nop
c001e3f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3f8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e3fb:	8d 50 ff             	lea    edx,[eax-0x1]
c001e3fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e402:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e405:	8d 76 00             	lea    esi,[esi+0x0]
c001e408:	83 c4 0c             	add    esp,0xc
c001e40b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001e40c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001e40c:	83 ec 0c             	sub    esp,0xc
c001e40f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e414:	75 12                	jne    c001e428 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001e416:	83 ec 0c             	sub    esp,0xc
c001e419:	68 c8 f4 01 c0       	push   0xc001f4c8
c001e41e:	e8 a4 1f ff ff       	call   c00103c7 <KePanic(char const*)>
c001e423:	83 c4 10             	add    esp,0x10
c001e426:	66 90                	xchg   ax,ax
c001e428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e42c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e42e:	85 c0                	test   eax,eax
c001e430:	74 36                	je     c001e468 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001e432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e436:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e439:	85 c0                	test   eax,eax
c001e43b:	74 2b                	je     c001e468 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001e43d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e441:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e444:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e448:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001e44b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e44f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e453:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e456:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e45a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e45d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e464:	eb 6a                	jmp    c001e4d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001e466:	66 90                	xchg   ax,ax
c001e468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e46c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e46e:	85 c0                	test   eax,eax
c001e470:	75 4e                	jne    c001e4c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001e472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e476:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e479:	85 c0                	test   eax,eax
c001e47b:	75 43                	jne    c001e4c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001e47d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e481:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e485:	89 10                	mov    DWORD PTR [eax],edx
c001e487:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e48b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e48f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e496:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e499:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e4a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e4a7:	85 c0                	test   eax,eax
c001e4a9:	74 25                	je     c001e4d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001e4ab:	83 ec 0c             	sub    esp,0xc
c001e4ae:	68 ea f4 01 c0       	push   0xc001f4ea
c001e4b3:	e8 0f 1f ff ff       	call   c00103c7 <KePanic(char const*)>
c001e4b8:	83 c4 10             	add    esp,0x10
c001e4bb:	eb 13                	jmp    c001e4d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001e4bd:	8d 76 00             	lea    esi,[esi+0x0]
c001e4c0:	83 ec 0c             	sub    esp,0xc
c001e4c3:	68 f4 f4 01 c0       	push   0xc001f4f4
c001e4c8:	e8 fa 1e ff ff       	call   c00103c7 <KePanic(char const*)>
c001e4cd:	83 c4 10             	add    esp,0x10
c001e4d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e4d7:	8d 50 01             	lea    edx,[eax+0x1]
c001e4da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4de:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e4e1:	90                   	nop
c001e4e2:	83 c4 0c             	add    esp,0xc
c001e4e5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001e4e8 <ACPI::~ACPI()>:
c001e4e8:	83 ec 0c             	sub    esp,0xc
c001e4eb:	ba 68 01 02 c0       	mov    edx,0xc0020168
c001e4f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4f4:	89 10                	mov    DWORD PTR [eax],edx
c001e4f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4fa:	83 ec 0c             	sub    esp,0xc
c001e4fd:	50                   	push   eax
c001e4fe:	e8 43 d4 fe ff       	call   c000b946 <Device::~Device()>
c001e503:	83 c4 10             	add    esp,0x10
c001e506:	90                   	nop
c001e507:	83 c4 0c             	add    esp,0xc
c001e50a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001e50c <ACPI::~ACPI()>:
c001e50c:	83 ec 0c             	sub    esp,0xc
c001e50f:	83 ec 0c             	sub    esp,0xc
c001e512:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e516:	e8 cd ff ff ff       	call   c001e4e8 <ACPI::~ACPI()>
c001e51b:	83 c4 10             	add    esp,0x10
c001e51e:	83 ec 08             	sub    esp,0x8
c001e521:	68 64 12 00 00       	push   0x1264
c001e526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e52a:	e8 e1 bf fe ff       	call   c000a510 <operator delete(void*, unsigned long)>
c001e52f:	83 c4 10             	add    esp,0x10
c001e532:	83 c4 0c             	add    esp,0xc
c001e535:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001e538 <LinkedList<Device>::~LinkedList()>:
c001e538:	90                   	nop
c001e539:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001e53c <LinkedList<Device>::isEmpty()>:
c001e53c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e540:	8b 00                	mov    eax,DWORD PTR [eax]
c001e542:	85 c0                	test   eax,eax
c001e544:	75 0e                	jne    c001e554 <LinkedList<Device>::isEmpty()+0x18>
c001e546:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e54a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e54d:	85 c0                	test   eax,eax
c001e54f:	75 03                	jne    c001e554 <LinkedList<Device>::isEmpty()+0x18>
c001e551:	b0 01                	mov    al,0x1
c001e553:	c3                   	ret    
c001e554:	b0 00                	mov    al,0x0
c001e556:	90                   	nop
c001e557:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001e558 <LinkedList<Device>::getFirstElement()>:
c001e558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e55c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e55e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001e560 <LinkedList<Device>::removeFirst()>:
c001e560:	83 ec 0c             	sub    esp,0xc
c001e563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e567:	8b 00                	mov    eax,DWORD PTR [eax]
c001e569:	85 c0                	test   eax,eax
c001e56b:	75 17                	jne    c001e584 <LinkedList<Device>::removeFirst()+0x24>
c001e56d:	83 ec 0c             	sub    esp,0xc
c001e570:	68 00 f5 01 c0       	push   0xc001f500
c001e575:	e8 4d 1e ff ff       	call   c00103c7 <KePanic(char const*)>
c001e57a:	83 c4 10             	add    esp,0x10
c001e57d:	e9 92 00 00 00       	jmp    c001e614 <LinkedList<Device>::removeFirst()+0xb4>
c001e582:	66 90                	xchg   ax,ax
c001e584:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e588:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e58b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001e591:	85 c0                	test   eax,eax
c001e593:	74 13                	je     c001e5a8 <LinkedList<Device>::removeFirst()+0x48>
c001e595:	83 ec 0c             	sub    esp,0xc
c001e598:	68 4b f5 01 c0       	push   0xc001f54b
c001e59d:	e8 25 1e ff ff       	call   c00103c7 <KePanic(char const*)>
c001e5a2:	83 c4 10             	add    esp,0x10
c001e5a5:	8d 76 00             	lea    esi,[esi+0x0]
c001e5a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5ac:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5ae:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001e5b4:	85 c0                	test   eax,eax
c001e5b6:	75 34                	jne    c001e5ec <LinkedList<Device>::removeFirst()+0x8c>
c001e5b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5bc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e5c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5c6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e5cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5d1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e5d4:	83 f8 01             	cmp    eax,0x1
c001e5d7:	74 27                	je     c001e600 <LinkedList<Device>::removeFirst()+0xa0>
c001e5d9:	83 ec 0c             	sub    esp,0xc
c001e5dc:	68 24 f5 01 c0       	push   0xc001f524
c001e5e1:	e8 e1 1d ff ff       	call   c00103c7 <KePanic(char const*)>
c001e5e6:	83 c4 10             	add    esp,0x10
c001e5e9:	eb 15                	jmp    c001e600 <LinkedList<Device>::removeFirst()+0xa0>
c001e5eb:	90                   	nop
c001e5ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5f2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001e5f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5fc:	89 10                	mov    DWORD PTR [eax],edx
c001e5fe:	66 90                	xchg   ax,ax
c001e600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e604:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e607:	8d 50 ff             	lea    edx,[eax-0x1]
c001e60a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e60e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e611:	8d 76 00             	lea    esi,[esi+0x0]
c001e614:	83 c4 0c             	add    esp,0xc
c001e617:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001e618 <CPU::~CPU()>:
c001e618:	83 ec 0c             	sub    esp,0xc
c001e61b:	ba 04 03 02 c0       	mov    edx,0xc0020304
c001e620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e624:	89 10                	mov    DWORD PTR [eax],edx
c001e626:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e62a:	83 ec 0c             	sub    esp,0xc
c001e62d:	50                   	push   eax
c001e62e:	e8 13 d3 fe ff       	call   c000b946 <Device::~Device()>
c001e633:	83 c4 10             	add    esp,0x10
c001e636:	90                   	nop
c001e637:	83 c4 0c             	add    esp,0xc
c001e63a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001e63c <CPU::~CPU()>:
c001e63c:	83 ec 0c             	sub    esp,0xc
c001e63f:	83 ec 0c             	sub    esp,0xc
c001e642:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e646:	e8 cd ff ff ff       	call   c001e618 <CPU::~CPU()>
c001e64b:	83 c4 10             	add    esp,0x10
c001e64e:	83 ec 08             	sub    esp,0x8
c001e651:	68 94 11 00 00       	push   0x1194
c001e656:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e65a:	e8 b1 be fe ff       	call   c000a510 <operator delete(void*, unsigned long)>
c001e65f:	83 c4 10             	add    esp,0x10
c001e662:	83 c4 0c             	add    esp,0xc
c001e665:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001e668 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001e668:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e66c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e66f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001e670 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001e670:	90                   	nop
c001e671:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001e674 <ThreadControlBlock::ThreadControlBlock()>:
c001e674:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e678:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e67f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e683:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001e68a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e68e:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001e695:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e699:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001e6a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6a4:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001e6ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6af:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001e6b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6b7:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001e6bb:	90                   	nop
c001e6bc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001e6c0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001e6c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e6ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6ce:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e6d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6d9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e6e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6e4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e6ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6ee:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e6f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6f9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e700:	90                   	nop
c001e701:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001e702 <PCI::~PCI()>:
c001e702:	83 ec 0c             	sub    esp,0xc
c001e705:	ba 64 11 02 c0       	mov    edx,0xc0021164
c001e70a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e70e:	89 10                	mov    DWORD PTR [eax],edx
c001e710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e714:	83 ec 0c             	sub    esp,0xc
c001e717:	50                   	push   eax
c001e718:	e8 b3 cc fe ff       	call   c000b3d0 <Bus::~Bus()>
c001e71d:	83 c4 10             	add    esp,0x10
c001e720:	90                   	nop
c001e721:	83 c4 0c             	add    esp,0xc
c001e724:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001e726 <PCI::~PCI()>:
c001e726:	83 ec 0c             	sub    esp,0xc
c001e729:	83 ec 0c             	sub    esp,0xc
c001e72c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e730:	e8 cd ff ff ff       	call   c001e702 <PCI::~PCI()>
c001e735:	83 c4 10             	add    esp,0x10
c001e738:	83 ec 08             	sub    esp,0x8
c001e73b:	68 5c 01 00 00       	push   0x15c
c001e740:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e744:	e8 c7 bd fe ff       	call   c000a510 <operator delete(void*, unsigned long)>
c001e749:	83 c4 10             	add    esp,0x10
c001e74c:	83 c4 0c             	add    esp,0xc
c001e74f:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001e750 <IDE::~IDE()>:
c001e750:	83 ec 0c             	sub    esp,0xc
c001e753:	ba 18 12 02 c0       	mov    edx,0xc0021218
c001e758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e75c:	89 10                	mov    DWORD PTR [eax],edx
c001e75e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e762:	83 ec 0c             	sub    esp,0xc
c001e765:	50                   	push   eax
c001e766:	e8 55 d6 fe ff       	call   c000bdc0 <HardDiskController::~HardDiskController()>
c001e76b:	83 c4 10             	add    esp,0x10
c001e76e:	90                   	nop
c001e76f:	83 c4 0c             	add    esp,0xc
c001e772:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001e774 <IDE::~IDE()>:
c001e774:	83 ec 0c             	sub    esp,0xc
c001e777:	83 ec 0c             	sub    esp,0xc
c001e77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e77e:	e8 cd ff ff ff       	call   c001e750 <IDE::~IDE()>
c001e783:	83 c4 10             	add    esp,0x10
c001e786:	83 ec 08             	sub    esp,0x8
c001e789:	68 70 02 00 00       	push   0x270
c001e78e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e792:	e8 79 bd fe ff       	call   c000a510 <operator delete(void*, unsigned long)>
c001e797:	83 c4 10             	add    esp,0x10
c001e79a:	83 c4 0c             	add    esp,0xc
c001e79d:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001e79e <SATABus::~SATABus()>:
c001e79e:	83 ec 0c             	sub    esp,0xc
c001e7a1:	ba 68 12 02 c0       	mov    edx,0xc0021268
c001e7a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7aa:	89 10                	mov    DWORD PTR [eax],edx
c001e7ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7b0:	83 ec 0c             	sub    esp,0xc
c001e7b3:	50                   	push   eax
c001e7b4:	e8 07 d6 fe ff       	call   c000bdc0 <HardDiskController::~HardDiskController()>
c001e7b9:	83 c4 10             	add    esp,0x10
c001e7bc:	90                   	nop
c001e7bd:	83 c4 0c             	add    esp,0xc
c001e7c0:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001e7c2 <SATABus::~SATABus()>:
c001e7c2:	83 ec 0c             	sub    esp,0xc
c001e7c5:	83 ec 0c             	sub    esp,0xc
c001e7c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7cc:	e8 cd ff ff ff       	call   c001e79e <SATABus::~SATABus()>
c001e7d1:	83 c4 10             	add    esp,0x10
c001e7d4:	83 ec 08             	sub    esp,0x8
c001e7d7:	68 64 01 00 00       	push   0x164
c001e7dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7e0:	e8 2b bd fe ff       	call   c000a510 <operator delete(void*, unsigned long)>
c001e7e5:	83 c4 10             	add    esp,0x10
c001e7e8:	83 c4 0c             	add    esp,0xc
c001e7eb:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001e7ec <ATA::~ATA()>:
c001e7ec:	83 ec 0c             	sub    esp,0xc
c001e7ef:	ba a8 12 02 c0       	mov    edx,0xc00212a8
c001e7f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7f8:	89 10                	mov    DWORD PTR [eax],edx
c001e7fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7fe:	83 ec 0c             	sub    esp,0xc
c001e801:	50                   	push   eax
c001e802:	e8 9b d6 fe ff       	call   c000bea2 <PhysicalDisk::~PhysicalDisk()>
c001e807:	83 c4 10             	add    esp,0x10
c001e80a:	90                   	nop
c001e80b:	83 c4 0c             	add    esp,0xc
c001e80e:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001e810 <ATA::~ATA()>:
c001e810:	83 ec 0c             	sub    esp,0xc
c001e813:	83 ec 0c             	sub    esp,0xc
c001e816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e81a:	e8 cd ff ff ff       	call   c001e7ec <ATA::~ATA()>
c001e81f:	83 c4 10             	add    esp,0x10
c001e822:	83 ec 08             	sub    esp,0x8
c001e825:	68 7c 01 00 00       	push   0x17c
c001e82a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e82e:	e8 dd bc fe ff       	call   c000a510 <operator delete(void*, unsigned long)>
c001e833:	83 c4 10             	add    esp,0x10
c001e836:	83 c4 0c             	add    esp,0xc
c001e839:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001e83a <ATAPI::~ATAPI()>:
c001e83a:	83 ec 0c             	sub    esp,0xc
c001e83d:	ba f0 12 02 c0       	mov    edx,0xc00212f0
c001e842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e846:	89 10                	mov    DWORD PTR [eax],edx
c001e848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e84c:	83 ec 0c             	sub    esp,0xc
c001e84f:	50                   	push   eax
c001e850:	e8 4d d6 fe ff       	call   c000bea2 <PhysicalDisk::~PhysicalDisk()>
c001e855:	83 c4 10             	add    esp,0x10
c001e858:	90                   	nop
c001e859:	83 c4 0c             	add    esp,0xc
c001e85c:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001e85e <ATAPI::~ATAPI()>:
c001e85e:	83 ec 0c             	sub    esp,0xc
c001e861:	83 ec 0c             	sub    esp,0xc
c001e864:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e868:	e8 cd ff ff ff       	call   c001e83a <ATAPI::~ATAPI()>
c001e86d:	83 c4 10             	add    esp,0x10
c001e870:	83 ec 08             	sub    esp,0x8
c001e873:	68 84 01 00 00       	push   0x184
c001e878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e87c:	e8 8f bc fe ff       	call   c000a510 <operator delete(void*, unsigned long)>
c001e881:	83 c4 10             	add    esp,0x10
c001e884:	83 c4 0c             	add    esp,0xc
c001e887:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001e888 <SATA::~SATA()>:
c001e888:	83 ec 0c             	sub    esp,0xc
c001e88b:	ba a4 13 02 c0       	mov    edx,0xc00213a4
c001e890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e894:	89 10                	mov    DWORD PTR [eax],edx
c001e896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e89a:	83 ec 0c             	sub    esp,0xc
c001e89d:	50                   	push   eax
c001e89e:	e8 ff d5 fe ff       	call   c000bea2 <PhysicalDisk::~PhysicalDisk()>
c001e8a3:	83 c4 10             	add    esp,0x10
c001e8a6:	90                   	nop
c001e8a7:	83 c4 0c             	add    esp,0xc
c001e8aa:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001e8ac <SATA::~SATA()>:
c001e8ac:	83 ec 0c             	sub    esp,0xc
c001e8af:	83 ec 0c             	sub    esp,0xc
c001e8b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8b6:	e8 cd ff ff ff       	call   c001e888 <SATA::~SATA()>
c001e8bb:	83 c4 10             	add    esp,0x10
c001e8be:	83 ec 08             	sub    esp,0x8
c001e8c1:	68 7c 01 00 00       	push   0x17c
c001e8c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8ca:	e8 41 bc fe ff       	call   c000a510 <operator delete(void*, unsigned long)>
c001e8cf:	83 c4 10             	add    esp,0x10
c001e8d2:	83 c4 0c             	add    esp,0xc
c001e8d5:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001e8d6 <SATAPI::~SATAPI()>:
c001e8d6:	83 ec 0c             	sub    esp,0xc
c001e8d9:	ba c8 14 02 c0       	mov    edx,0xc00214c8
c001e8de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8e2:	89 10                	mov    DWORD PTR [eax],edx
c001e8e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8e8:	83 ec 0c             	sub    esp,0xc
c001e8eb:	50                   	push   eax
c001e8ec:	e8 b1 d5 fe ff       	call   c000bea2 <PhysicalDisk::~PhysicalDisk()>
c001e8f1:	83 c4 10             	add    esp,0x10
c001e8f4:	90                   	nop
c001e8f5:	83 c4 0c             	add    esp,0xc
c001e8f8:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001e8fa <SATAPI::~SATAPI()>:
c001e8fa:	83 ec 0c             	sub    esp,0xc
c001e8fd:	83 ec 0c             	sub    esp,0xc
c001e900:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e904:	e8 cd ff ff ff       	call   c001e8d6 <SATAPI::~SATAPI()>
c001e909:	83 c4 10             	add    esp,0x10
c001e90c:	83 ec 08             	sub    esp,0x8
c001e90f:	68 84 01 00 00       	push   0x184
c001e914:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e918:	e8 f3 bb fe ff       	call   c000a510 <operator delete(void*, unsigned long)>
c001e91d:	83 c4 10             	add    esp,0x10
c001e920:	83 c4 0c             	add    esp,0xc
c001e923:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001e924 <IOAPIC::~IOAPIC()>:
c001e924:	83 ec 0c             	sub    esp,0xc
c001e927:	ba 08 15 02 c0       	mov    edx,0xc0021508
c001e92c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e930:	89 10                	mov    DWORD PTR [eax],edx
c001e932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e936:	83 ec 0c             	sub    esp,0xc
c001e939:	50                   	push   eax
c001e93a:	e8 07 d0 fe ff       	call   c000b946 <Device::~Device()>
c001e93f:	83 c4 10             	add    esp,0x10
c001e942:	90                   	nop
c001e943:	83 c4 0c             	add    esp,0xc
c001e946:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001e948 <IOAPIC::~IOAPIC()>:
c001e948:	83 ec 0c             	sub    esp,0xc
c001e94b:	83 ec 0c             	sub    esp,0xc
c001e94e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e952:	e8 cd ff ff ff       	call   c001e924 <IOAPIC::~IOAPIC()>
c001e957:	83 c4 10             	add    esp,0x10
c001e95a:	83 ec 08             	sub    esp,0x8
c001e95d:	68 68 01 00 00       	push   0x168
c001e962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e966:	e8 a5 bb fe ff       	call   c000a510 <operator delete(void*, unsigned long)>
c001e96b:	83 c4 10             	add    esp,0x10
c001e96e:	83 c4 0c             	add    esp,0xc
c001e971:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001e974 <APICTimer::~APICTimer()>:
c001e974:	83 ec 0c             	sub    esp,0xc
c001e977:	ba 50 15 02 c0       	mov    edx,0xc0021550
c001e97c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e980:	89 10                	mov    DWORD PTR [eax],edx
c001e982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e986:	83 ec 0c             	sub    esp,0xc
c001e989:	50                   	push   eax
c001e98a:	e8 b1 e9 fe ff       	call   c000d340 <Timer::~Timer()>
c001e98f:	83 c4 10             	add    esp,0x10
c001e992:	90                   	nop
c001e993:	83 c4 0c             	add    esp,0xc
c001e996:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001e998 <APICTimer::~APICTimer()>:
c001e998:	83 ec 0c             	sub    esp,0xc
c001e99b:	83 ec 0c             	sub    esp,0xc
c001e99e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9a2:	e8 cd ff ff ff       	call   c001e974 <APICTimer::~APICTimer()>
c001e9a7:	83 c4 10             	add    esp,0x10
c001e9aa:	83 ec 08             	sub    esp,0x8
c001e9ad:	68 60 01 00 00       	push   0x160
c001e9b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9b6:	e8 55 bb fe ff       	call   c000a510 <operator delete(void*, unsigned long)>
c001e9bb:	83 c4 10             	add    esp,0x10
c001e9be:	83 c4 0c             	add    esp,0xc
c001e9c1:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001e9c4 <PIT::~PIT()>:
c001e9c4:	83 ec 0c             	sub    esp,0xc
c001e9c7:	ba a0 15 02 c0       	mov    edx,0xc00215a0
c001e9cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d0:	89 10                	mov    DWORD PTR [eax],edx
c001e9d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d6:	83 ec 0c             	sub    esp,0xc
c001e9d9:	50                   	push   eax
c001e9da:	e8 61 e9 fe ff       	call   c000d340 <Timer::~Timer()>
c001e9df:	83 c4 10             	add    esp,0x10
c001e9e2:	90                   	nop
c001e9e3:	83 c4 0c             	add    esp,0xc
c001e9e6:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001e9e8 <PIT::~PIT()>:
c001e9e8:	83 ec 0c             	sub    esp,0xc
c001e9eb:	83 ec 0c             	sub    esp,0xc
c001e9ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9f2:	e8 cd ff ff ff       	call   c001e9c4 <PIT::~PIT()>
c001e9f7:	83 c4 10             	add    esp,0x10
c001e9fa:	83 ec 08             	sub    esp,0x8
c001e9fd:	68 5c 01 00 00       	push   0x15c
c001ea02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea06:	e8 05 bb fe ff       	call   c000a510 <operator delete(void*, unsigned long)>
c001ea0b:	83 c4 10             	add    esp,0x10
c001ea0e:	83 c4 0c             	add    esp,0xc
c001ea11:	c3                   	ret    

Disassembly of section userkernel:

c0022000 <KiDefaultSignalHandlerAbort(int)>:
c0022000:	57                   	push   edi
c0022001:	b9 07 00 00 00       	mov    ecx,0x7
c0022006:	56                   	push   esi
c0022007:	be f5 03 02 c0       	mov    esi,0xc00203f5
c002200c:	83 ec 24             	sub    esp,0x24
c002200f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0022013:	fc                   	cld    
c0022014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002201a:	50                   	push   eax
c002201b:	6a 00                	push   0x0
c002201d:	6a 38                	push   0x38
c002201f:	6a 01                	push   0x1
c0022021:	e8 2c 00 00 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0022026:	83 c4 34             	add    esp,0x34
c0022029:	5e                   	pop    esi
c002202a:	5f                   	pop    edi
c002202b:	c3                   	ret    

c002202c <KiDefaultSignalHandlerTerminate(int)>:
c002202c:	57                   	push   edi
c002202d:	b9 08 00 00 00       	mov    ecx,0x8
c0022032:	56                   	push   esi
c0022033:	be 11 04 02 c0       	mov    esi,0xc0020411
c0022038:	83 ec 24             	sub    esp,0x24
c002203b:	89 e7                	mov    edi,esp
c002203d:	fc                   	cld    
c002203e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022040:	54                   	push   esp
c0022041:	6a 00                	push   0x0
c0022043:	6a 37                	push   0x37
c0022045:	6a 01                	push   0x1
c0022047:	e8 06 00 00 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002204c:	83 c4 34             	add    esp,0x34
c002204f:	5e                   	pop    esi
c0022050:	5f                   	pop    edi
c0022051:	c3                   	ret    

c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0022052:	53                   	push   ebx
c0022053:	83 ec 10             	sub    esp,0x10
c0022056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002205a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002205e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022066:	cd 60                	int    0x60
c0022068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002206c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022078:	83 c4 10             	add    esp,0x10
c002207b:	5b                   	pop    ebx
c002207c:	c3                   	ret    

Disassembly of section align_previous:

c0023000 <DO_NOT_DELETE()>:
c0023000:	c3                   	ret    
