
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f4 02 01 00       	call   c0010314 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 53 87 02 00       	call   c0028778 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 22 93 02 c0       	mov    ebx,0xc0029322
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 30 93 02 c0    	cmp    ebx,0xc0029330
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 38 09 03 c0       	mov    eax,0xc0030938
c0000049:	3d 38 09 03 c0       	cmp    eax,0xc0030938
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 38 09 03 c0       	push   0xc0030938
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 38 09 03 c0       	mov    eax,0xc0030938
c0000075:	2d 38 09 03 c0       	sub    eax,0xc0030938
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 38 09 03 c0       	push   0xc0030938
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 68 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030f68,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 38 93 02 c0       	mov    ebx,0xc0029338
c00000bb:	81 eb 34 93 02 c0    	sub    ebx,0xc0029334
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 34 93 02 c0       	mov    esi,0xc0029334
c00000ca:	a1 6c 0f 03 c0       	mov    eax,ds:0xc0030f6c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 6c 0f 03 c0       	mov    ds:0xc0030f6c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 6c 0f 03 c0       	mov    eax,ds:0xc0030f6c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 38 09 03 c0       	push   0xc0030938
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 68 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030f68,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 70 0f 03 c0       	push   0xc0030f70
c000012c:	68 38 09 03 c0       	push   0xc0030938
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 77 d6 01 00       	call   c001da12 <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 71 2c 01 00       	call   c0013024 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 55 d6 01 00       	call   c001da12 <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 2c dd 01 00       	call   c001e108 <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 4f e4 01 00       	call   c001e834 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 94 13 03 c0 	lgdtd  ds:0xc0031394
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 d3 46 01 00       	call   c0014cac <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>

c000063d <memcmp>:
c000063d:	56                   	push   esi
c000063e:	53                   	push   ebx
c000063f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000643:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000647:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000064b:	01 d6                	add    esi,edx
c000064d:	39 f2                	cmp    edx,esi
c000064f:	74 0e                	je     c000065f <memcmp+0x22>
c0000651:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000654:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000657:	38 c8                	cmp    al,cl
c0000659:	75 08                	jne    c0000663 <memcmp+0x26>
c000065b:	42                   	inc    edx
c000065c:	43                   	inc    ebx
c000065d:	eb ee                	jmp    c000064d <memcmp+0x10>
c000065f:	31 c0                	xor    eax,eax
c0000661:	eb 02                	jmp    c0000665 <memcmp+0x28>
c0000663:	29 c8                	sub    eax,ecx
c0000665:	5b                   	pop    ebx
c0000666:	5e                   	pop    esi
c0000667:	c3                   	ret    

c0000668 <memmove>:
c0000668:	56                   	push   esi
c0000669:	53                   	push   ebx
c000066a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000066e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000672:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000676:	39 c8                	cmp    eax,ecx
c0000678:	73 12                	jae    c000068c <memmove+0x24>
c000067a:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000067d:	89 c3                	mov    ebx,eax
c000067f:	39 f1                	cmp    ecx,esi
c0000681:	74 1a                	je     c000069d <memmove+0x35>
c0000683:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000685:	43                   	inc    ebx
c0000686:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000689:	41                   	inc    ecx
c000068a:	eb f3                	jmp    c000067f <memmove+0x17>
c000068c:	76 0f                	jbe    c000069d <memmove+0x35>
c000068e:	85 d2                	test   edx,edx
c0000690:	74 0b                	je     c000069d <memmove+0x35>
c0000692:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c0000696:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c000069a:	4a                   	dec    edx
c000069b:	eb f1                	jmp    c000068e <memmove+0x26>
c000069d:	5b                   	pop    ebx
c000069e:	5e                   	pop    esi
c000069f:	c3                   	ret    

c00006a0 <memcpy>:
c00006a0:	56                   	push   esi
c00006a1:	53                   	push   ebx
c00006a2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00006aa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00006ae:	89 f1                	mov    ecx,esi
c00006b0:	01 d3                	add    ebx,edx
c00006b2:	39 da                	cmp    edx,ebx
c00006b4:	74 09                	je     c00006bf <memcpy+0x1f>
c00006b6:	8a 02                	mov    al,BYTE PTR [edx]
c00006b8:	41                   	inc    ecx
c00006b9:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00006bc:	42                   	inc    edx
c00006bd:	eb f3                	jmp    c00006b2 <memcpy+0x12>
c00006bf:	89 f0                	mov    eax,esi
c00006c1:	5b                   	pop    ebx
c00006c2:	5e                   	pop    esi
c00006c3:	c3                   	ret    

c00006c4 <memset>:
c00006c4:	53                   	push   ebx
c00006c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006cd:	89 c2                	mov    edx,eax
c00006cf:	01 c1                	add    ecx,eax
c00006d1:	39 ca                	cmp    edx,ecx
c00006d3:	74 0a                	je     c00006df <memset+0x1b>
c00006d5:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006d9:	42                   	inc    edx
c00006da:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006dd:	eb f2                	jmp    c00006d1 <memset+0xd>
c00006df:	5b                   	pop    ebx
c00006e0:	c3                   	ret    

c00006e1 <strlen>:
c00006e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006e5:	31 c0                	xor    eax,eax
c00006e7:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006eb:	74 03                	je     c00006f0 <strlen+0xf>
c00006ed:	40                   	inc    eax
c00006ee:	eb f7                	jmp    c00006e7 <strlen+0x6>
c00006f0:	c3                   	ret    

c00006f1 <strpbrk>:
c00006f1:	53                   	push   ebx
c00006f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006f6:	8a 08                	mov    cl,BYTE PTR [eax]
c00006f8:	84 c9                	test   cl,cl
c00006fa:	74 14                	je     c0000710 <strpbrk+0x1f>
c00006fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000700:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000702:	84 db                	test   bl,bl
c0000704:	74 07                	je     c000070d <strpbrk+0x1c>
c0000706:	38 cb                	cmp    bl,cl
c0000708:	74 08                	je     c0000712 <strpbrk+0x21>
c000070a:	42                   	inc    edx
c000070b:	eb f3                	jmp    c0000700 <strpbrk+0xf>
c000070d:	40                   	inc    eax
c000070e:	eb e6                	jmp    c00006f6 <strpbrk+0x5>
c0000710:	31 c0                	xor    eax,eax
c0000712:	5b                   	pop    ebx
c0000713:	c3                   	ret    

c0000714 <strtok>:
c0000714:	56                   	push   esi
c0000715:	53                   	push   ebx
c0000716:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000071a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000071e:	85 db                	test   ebx,ebx
c0000720:	75 0e                	jne    c0000730 <strtok+0x1c>
c0000722:	8b 1d 88 0f 03 c0    	mov    ebx,DWORD PTR ds:0xc0030f88
c0000728:	85 db                	test   ebx,ebx
c000072a:	75 04                	jne    c0000730 <strtok+0x1c>
c000072c:	31 db                	xor    ebx,ebx
c000072e:	eb 2e                	jmp    c000075e <strtok+0x4a>
c0000730:	56                   	push   esi
c0000731:	53                   	push   ebx
c0000732:	e8 ba ff ff ff       	call   c00006f1 <strpbrk>
c0000737:	5a                   	pop    edx
c0000738:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c000073d:	59                   	pop    ecx
c000073e:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c0000743:	39 d8                	cmp    eax,ebx
c0000745:	75 07                	jne    c000074e <strtok+0x3a>
c0000747:	43                   	inc    ebx
c0000748:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c000074c:	eb e2                	jmp    c0000730 <strtok+0x1c>
c000074e:	85 c0                	test   eax,eax
c0000750:	74 da                	je     c000072c <strtok+0x18>
c0000752:	8d 50 01             	lea    edx,[eax+0x1]
c0000755:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000758:	89 15 88 0f 03 c0    	mov    DWORD PTR ds:0xc0030f88,edx
c000075e:	89 d8                	mov    eax,ebx
c0000760:	5b                   	pop    ebx
c0000761:	5e                   	pop    esi
c0000762:	c3                   	ret    

c0000763 <strcpy>:
c0000763:	53                   	push   ebx
c0000764:	31 d2                	xor    edx,edx
c0000766:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000076a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000076e:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000771:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0000774:	84 c9                	test   cl,cl
c0000776:	74 06                	je     c000077e <strcpy+0x1b>
c0000778:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c000077b:	42                   	inc    edx
c000077c:	eb ec                	jmp    c000076a <strcpy+0x7>
c000077e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000781:	5b                   	pop    ebx
c0000782:	c3                   	ret    

c0000783 <strncpy>:
c0000783:	56                   	push   esi
c0000784:	53                   	push   ebx
c0000785:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000789:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000791:	89 c3                	mov    ebx,eax
c0000793:	85 c9                	test   ecx,ecx
c0000795:	74 1a                	je     c00007b1 <strncpy+0x2e>
c0000797:	46                   	inc    esi
c0000798:	43                   	inc    ebx
c0000799:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c000079c:	49                   	dec    ecx
c000079d:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00007a0:	84 d2                	test   dl,dl
c00007a2:	75 ef                	jne    c0000793 <strncpy+0x10>
c00007a4:	31 d2                	xor    edx,edx
c00007a6:	39 d1                	cmp    ecx,edx
c00007a8:	74 07                	je     c00007b1 <strncpy+0x2e>
c00007aa:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00007ae:	42                   	inc    edx
c00007af:	eb f5                	jmp    c00007a6 <strncpy+0x23>
c00007b1:	5b                   	pop    ebx
c00007b2:	5e                   	pop    esi
c00007b3:	c3                   	ret    

c00007b4 <strcmp>:
c00007b4:	31 c9                	xor    ecx,ecx
c00007b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00007be:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00007c2:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c00007c6:	38 d0                	cmp    al,dl
c00007c8:	75 08                	jne    c00007d2 <strcmp+0x1e>
c00007ca:	41                   	inc    ecx
c00007cb:	84 c0                	test   al,al
c00007cd:	75 e7                	jne    c00007b6 <strcmp+0x2>
c00007cf:	31 c0                	xor    eax,eax
c00007d1:	c3                   	ret    
c00007d2:	29 d0                	sub    eax,edx
c00007d4:	c3                   	ret    

c00007d5 <strchr>:
c00007d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007d9:	8a 10                	mov    dl,BYTE PTR [eax]
c00007db:	84 d2                	test   dl,dl
c00007dd:	74 09                	je     c00007e8 <strchr+0x13>
c00007df:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007e3:	74 05                	je     c00007ea <strchr+0x15>
c00007e5:	40                   	inc    eax
c00007e6:	eb f1                	jmp    c00007d9 <strchr+0x4>
c00007e8:	31 c0                	xor    eax,eax
c00007ea:	c3                   	ret    

c00007eb <strncmp>:
c00007eb:	56                   	push   esi
c00007ec:	53                   	push   ebx
c00007ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007f9:	01 d6                	add    esi,edx
c00007fb:	39 f2                	cmp    edx,esi
c00007fd:	74 12                	je     c0000811 <strncmp+0x26>
c00007ff:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000802:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000805:	38 c8                	cmp    al,cl
c0000807:	75 0c                	jne    c0000815 <strncmp+0x2a>
c0000809:	42                   	inc    edx
c000080a:	84 c0                	test   al,al
c000080c:	74 03                	je     c0000811 <strncmp+0x26>
c000080e:	43                   	inc    ebx
c000080f:	eb ea                	jmp    c00007fb <strncmp+0x10>
c0000811:	31 c0                	xor    eax,eax
c0000813:	eb 02                	jmp    c0000817 <strncmp+0x2c>
c0000815:	29 c8                	sub    eax,ecx
c0000817:	5b                   	pop    ebx
c0000818:	5e                   	pop    esi
c0000819:	c3                   	ret    

c000081a <strcat>:
c000081a:	53                   	push   ebx
c000081b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000081f:	89 c1                	mov    ecx,eax
c0000821:	8d 51 01             	lea    edx,[ecx+0x1]
c0000824:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000828:	74 04                	je     c000082e <strcat+0x14>
c000082a:	89 d1                	mov    ecx,edx
c000082c:	eb f3                	jmp    c0000821 <strcat+0x7>
c000082e:	31 d2                	xor    edx,edx
c0000830:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000834:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c0000837:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000083a:	42                   	inc    edx
c000083b:	84 db                	test   bl,bl
c000083d:	75 f1                	jne    c0000830 <strcat+0x16>
c000083f:	5b                   	pop    ebx
c0000840:	c3                   	ret    

c0000841 <strncat>:
c0000841:	56                   	push   esi
c0000842:	53                   	push   ebx
c0000843:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000847:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000084b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000084f:	89 c2                	mov    edx,eax
c0000851:	85 db                	test   ebx,ebx
c0000853:	74 23                	je     c0000878 <strncat+0x37>
c0000855:	8d 72 01             	lea    esi,[edx+0x1]
c0000858:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c000085c:	74 04                	je     c0000862 <strncat+0x21>
c000085e:	89 f2                	mov    edx,esi
c0000860:	eb f3                	jmp    c0000855 <strncat+0x14>
c0000862:	8d 34 19             	lea    esi,[ecx+ebx*1]
c0000865:	41                   	inc    ecx
c0000866:	42                   	inc    edx
c0000867:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c000086a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000086d:	84 db                	test   bl,bl
c000086f:	74 07                	je     c0000878 <strncat+0x37>
c0000871:	39 f1                	cmp    ecx,esi
c0000873:	75 f0                	jne    c0000865 <strncat+0x24>
c0000875:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000878:	5b                   	pop    ebx
c0000879:	5e                   	pop    esi
c000087a:	c3                   	ret    

c000087b <strstr>:
c000087b:	57                   	push   edi
c000087c:	56                   	push   esi
c000087d:	53                   	push   ebx
c000087e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000882:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000886:	57                   	push   edi
c0000887:	e8 55 fe ff ff       	call   c00006e1 <strlen>
c000088c:	59                   	pop    ecx
c000088d:	89 c6                	mov    esi,eax
c000088f:	85 c0                	test   eax,eax
c0000891:	74 1f                	je     c00008b2 <strstr+0x37>
c0000893:	53                   	push   ebx
c0000894:	e8 48 fe ff ff       	call   c00006e1 <strlen>
c0000899:	5a                   	pop    edx
c000089a:	39 f0                	cmp    eax,esi
c000089c:	72 12                	jb     c00008b0 <strstr+0x35>
c000089e:	56                   	push   esi
c000089f:	57                   	push   edi
c00008a0:	53                   	push   ebx
c00008a1:	e8 97 fd ff ff       	call   c000063d <memcmp>
c00008a6:	83 c4 0c             	add    esp,0xc
c00008a9:	85 c0                	test   eax,eax
c00008ab:	74 05                	je     c00008b2 <strstr+0x37>
c00008ad:	43                   	inc    ebx
c00008ae:	eb e3                	jmp    c0000893 <strstr+0x18>
c00008b0:	31 db                	xor    ebx,ebx
c00008b2:	89 d8                	mov    eax,ebx
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	5f                   	pop    edi
c00008b7:	c3                   	ret    

c00008b8 <simple_strtoul>:
c00008b8:	55                   	push   ebp
c00008b9:	57                   	push   edi
c00008ba:	56                   	push   esi
c00008bb:	53                   	push   ebx
c00008bc:	83 ec 1c             	sub    esp,0x1c
c00008bf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00008c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00008c7:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00008ca:	f6 82 60 93 02 c0 08 	test   BYTE PTR [edx-0x3ffd6ca0],0x8
c00008d1:	74 03                	je     c00008d6 <simple_strtoul+0x1e>
c00008d3:	43                   	inc    ebx
c00008d4:	eb f1                	jmp    c00008c7 <simple_strtoul+0xf>
c00008d6:	80 fa 09             	cmp    dl,0x9
c00008d9:	74 f8                	je     c00008d3 <simple_strtoul+0x1b>
c00008db:	80 fa 2d             	cmp    dl,0x2d
c00008de:	75 0b                	jne    c00008eb <simple_strtoul+0x33>
c00008e0:	43                   	inc    ebx
c00008e1:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00008e9:	eb 0e                	jmp    c00008f9 <simple_strtoul+0x41>
c00008eb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00008f3:	80 fa 2b             	cmp    dl,0x2b
c00008f6:	75 01                	jne    c00008f9 <simple_strtoul+0x41>
c00008f8:	43                   	inc    ebx
c00008f9:	85 ff                	test   edi,edi
c00008fb:	75 27                	jne    c0000924 <simple_strtoul+0x6c>
c00008fd:	bf 0a 00 00 00       	mov    edi,0xa
c0000902:	80 3b 30             	cmp    BYTE PTR [ebx],0x30
c0000905:	75 64                	jne    c000096b <simple_strtoul+0xb3>
c0000907:	83 ec 0c             	sub    esp,0xc
c000090a:	0f be 43 01          	movsx  eax,BYTE PTR [ebx+0x1]
c000090e:	50                   	push   eax
c000090f:	e8 24 01 00 00       	call   c0000a38 <tolower>
c0000914:	83 c4 10             	add    esp,0x10
c0000917:	83 f8 78             	cmp    eax,0x78
c000091a:	74 03                	je     c000091f <simple_strtoul+0x67>
c000091c:	43                   	inc    ebx
c000091d:	eb 16                	jmp    c0000935 <simple_strtoul+0x7d>
c000091f:	83 c3 02             	add    ebx,0x2
c0000922:	eb 22                	jmp    c0000946 <simple_strtoul+0x8e>
c0000924:	8d 47 fe             	lea    eax,[edi-0x2]
c0000927:	83 f8 22             	cmp    eax,0x22
c000092a:	0f 87 c4 00 00 00    	ja     c00009f4 <simple_strtoul+0x13c>
c0000930:	83 ff 08             	cmp    edi,0x8
c0000933:	75 0c                	jne    c0000941 <simple_strtoul+0x89>
c0000935:	bf 08 00 00 00       	mov    edi,0x8
c000093a:	80 3b 30             	cmp    BYTE PTR [ebx],0x30
c000093d:	75 2c                	jne    c000096b <simple_strtoul+0xb3>
c000093f:	eb 24                	jmp    c0000965 <simple_strtoul+0xad>
c0000941:	83 ff 10             	cmp    edi,0x10
c0000944:	75 25                	jne    c000096b <simple_strtoul+0xb3>
c0000946:	bf 10 00 00 00       	mov    edi,0x10
c000094b:	80 3b 30             	cmp    BYTE PTR [ebx],0x30
c000094e:	75 1b                	jne    c000096b <simple_strtoul+0xb3>
c0000950:	83 ec 0c             	sub    esp,0xc
c0000953:	0f be 43 01          	movsx  eax,BYTE PTR [ebx+0x1]
c0000957:	50                   	push   eax
c0000958:	e8 db 00 00 00       	call   c0000a38 <tolower>
c000095d:	83 c4 10             	add    esp,0x10
c0000960:	83 f8 78             	cmp    eax,0x78
c0000963:	74 03                	je     c0000968 <simple_strtoul+0xb0>
c0000965:	43                   	inc    ebx
c0000966:	eb 03                	jmp    c000096b <simple_strtoul+0xb3>
c0000968:	83 c3 02             	add    ebx,0x2
c000096b:	31 ed                	xor    ebp,ebp
c000096d:	31 f6                	xor    esi,esi
c000096f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0000977:	8a 13                	mov    dl,BYTE PTR [ebx]
c0000979:	84 d2                	test   dl,dl
c000097b:	74 2c                	je     c00009a9 <simple_strtoul+0xf1>
c000097d:	0f b6 ca             	movzx  ecx,dl
c0000980:	f6 81 60 93 02 c0 04 	test   BYTE PTR [ecx-0x3ffd6ca0],0x4
c0000987:	74 05                	je     c000098e <simple_strtoul+0xd6>
c0000989:	83 e9 30             	sub    ecx,0x30
c000098c:	eb 27                	jmp    c00009b5 <simple_strtoul+0xfd>
c000098e:	83 ec 0c             	sub    esp,0xc
c0000991:	0f be d2             	movsx  edx,dl
c0000994:	52                   	push   edx
c0000995:	e8 8a 00 00 00       	call   c0000a24 <toupper>
c000099a:	83 c4 10             	add    esp,0x10
c000099d:	0f b6 d0             	movzx  edx,al
c00009a0:	f6 82 60 93 02 c0 01 	test   BYTE PTR [edx-0x3ffd6ca0],0x1
c00009a7:	75 09                	jne    c00009b2 <simple_strtoul+0xfa>
c00009a9:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00009ae:	75 2e                	jne    c00009de <simple_strtoul+0x126>
c00009b0:	eb 59                	jmp    c0000a0b <simple_strtoul+0x153>
c00009b2:	8d 48 c9             	lea    ecx,[eax-0x37]
c00009b5:	39 f9                	cmp    ecx,edi
c00009b7:	73 f0                	jae    c00009a9 <simple_strtoul+0xf1>
c00009b9:	31 d2                	xor    edx,edx
c00009bb:	89 c8                	mov    eax,ecx
c00009bd:	f7 d0                	not    eax
c00009bf:	f7 f7                	div    edi
c00009c1:	39 f0                	cmp    eax,esi
c00009c3:	72 0f                	jb     c00009d4 <simple_strtoul+0x11c>
c00009c5:	0f af f7             	imul   esi,edi
c00009c8:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c00009d0:	01 ce                	add    esi,ecx
c00009d2:	eb 07                	jmp    c00009db <simple_strtoul+0x123>
c00009d4:	bd 01 00 00 00       	mov    ebp,0x1
c00009d9:	31 f6                	xor    esi,esi
c00009db:	43                   	inc    ebx
c00009dc:	eb 99                	jmp    c0000977 <simple_strtoul+0xbf>
c00009de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00009e2:	09 f0                	or     eax,esi
c00009e4:	75 1f                	jne    c0000a05 <simple_strtoul+0x14d>
c00009e6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00009ea:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00009ee:	31 f6                	xor    esi,esi
c00009f0:	89 08                	mov    DWORD PTR [eax],ecx
c00009f2:	eb 17                	jmp    c0000a0b <simple_strtoul+0x153>
c00009f4:	31 f6                	xor    esi,esi
c00009f6:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00009fb:	74 14                	je     c0000a11 <simple_strtoul+0x159>
c00009fd:	31 ed                	xor    ebp,ebp
c00009ff:	85 db                	test   ebx,ebx
c0000a01:	75 e3                	jne    c00009e6 <simple_strtoul+0x12e>
c0000a03:	31 f6                	xor    esi,esi
c0000a05:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0000a09:	89 18                	mov    DWORD PTR [eax],ebx
c0000a0b:	4d                   	dec    ebp
c0000a0c:	75 03                	jne    c0000a11 <simple_strtoul+0x159>
c0000a0e:	83 ce ff             	or     esi,0xffffffff
c0000a11:	83 7c 24 0c 01       	cmp    DWORD PTR [esp+0xc],0x1
c0000a16:	75 02                	jne    c0000a1a <simple_strtoul+0x162>
c0000a18:	f7 de                	neg    esi
c0000a1a:	83 c4 1c             	add    esp,0x1c
c0000a1d:	89 f0                	mov    eax,esi
c0000a1f:	5b                   	pop    ebx
c0000a20:	5e                   	pop    esi
c0000a21:	5f                   	pop    edi
c0000a22:	5d                   	pop    ebp
c0000a23:	c3                   	ret    

c0000a24 <toupper>:
c0000a24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a28:	0f b6 d0             	movzx  edx,al
c0000a2b:	f6 82 60 93 02 c0 02 	test   BYTE PTR [edx-0x3ffd6ca0],0x2
c0000a32:	74 03                	je     c0000a37 <toupper+0x13>
c0000a34:	83 e8 20             	sub    eax,0x20
c0000a37:	c3                   	ret    

c0000a38 <tolower>:
c0000a38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a3c:	0f b6 d0             	movzx  edx,al
c0000a3f:	f6 82 60 93 02 c0 01 	test   BYTE PTR [edx-0x3ffd6ca0],0x1
c0000a46:	74 03                	je     c0000a4b <tolower+0x13>
c0000a48:	83 c0 20             	add    eax,0x20
c0000a4b:	c3                   	ret    

c0000a4c <largebin_index>:
c0000a4c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000a50:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a55:	89 d1                	mov    ecx,edx
c0000a57:	c1 e9 08             	shr    ecx,0x8
c0000a5a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0000a60:	77 0f                	ja     c0000a71 <largebin_index+0x25>
c0000a62:	0f bd c1             	bsr    eax,ecx
c0000a65:	8d 48 06             	lea    ecx,[eax+0x6]
c0000a68:	d3 ea                	shr    edx,cl
c0000a6a:	83 e2 03             	and    edx,0x3
c0000a6d:	8d 44 82 20          	lea    eax,[edx+eax*4+0x20]
c0000a71:	c3                   	ret    

c0000a72 <malloc_init_state>:
c0000a72:	53                   	push   ebx
c0000a73:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000a77:	8d 50 34             	lea    edx,[eax+0x34]
c0000a7a:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a80:	89 d1                	mov    ecx,edx
c0000a82:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a85:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a88:	83 c2 08             	add    edx,0x8
c0000a8b:	39 da                	cmp    edx,ebx
c0000a8d:	75 f3                	jne    c0000a82 <malloc_init_state+0x10>
c0000a8f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a91:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a9b:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000aa5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000aaf:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000ab9:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ac0:	83 e2 03             	and    edx,0x3
c0000ac3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ac6:	83 ca 48             	or     edx,0x48
c0000ac9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000ad3:	89 10                	mov    DWORD PTR [eax],edx
c0000ad5:	5b                   	pop    ebx
c0000ad6:	c3                   	ret    

c0000ad7 <sYSMALLOc>:
c0000ad7:	55                   	push   ebp
c0000ad8:	57                   	push   edi
c0000ad9:	56                   	push   esi
c0000ada:	53                   	push   ebx
c0000adb:	83 ec 2c             	sub    esp,0x2c
c0000ade:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0000ae2:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0000ae6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000aea:	8b 93 5c 03 00 00    	mov    edx,DWORD PTR [ebx+0x35c]
c0000af0:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000af3:	8d 42 ff             	lea    eax,[edx-0x1]
c0000af6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000afa:	74 20                	je     c0000b1c <sYSMALLOc+0x45>
c0000afc:	83 ec 0c             	sub    esp,0xc
c0000aff:	53                   	push   ebx
c0000b00:	e8 65 07 00 00       	call   c000126a <malloc_consolidate>
c0000b05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000b09:	83 e8 07             	sub    eax,0x7
c0000b0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0000b10:	83 c4 3c             	add    esp,0x3c
c0000b13:	5b                   	pop    ebx
c0000b14:	5e                   	pop    esi
c0000b15:	5f                   	pop    edi
c0000b16:	5d                   	pop    ebp
c0000b17:	e9 b7 02 00 00       	jmp    c0000dd3 <dlmalloc>
c0000b1c:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000b1f:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000b25:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000b28:	83 e0 fc             	and    eax,0xfffffffc
c0000b2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000b2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000b33:	83 c0 10             	add    eax,0x10
c0000b36:	01 c1                	add    ecx,eax
c0000b38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000b3c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000b43:	74 04                	je     c0000b49 <sYSMALLOc+0x72>
c0000b45:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000b49:	f7 da                	neg    edx
c0000b4b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000b4f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000b53:	21 d1                	and    ecx,edx
c0000b55:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000b59:	7f 07                	jg     c0000b62 <sYSMALLOc+0x8b>
c0000b5b:	31 c0                	xor    eax,eax
c0000b5d:	e9 da 01 00 00       	jmp    c0000d3c <sYSMALLOc+0x265>
c0000b62:	83 ec 0c             	sub    esp,0xc
c0000b65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000b69:	e8 45 f2 00 00       	call   c000fdb3 <sbrk>
c0000b6e:	83 c4 10             	add    esp,0x10
c0000b71:	89 c6                	mov    esi,eax
c0000b73:	83 f8 ff             	cmp    eax,0xffffffff
c0000b76:	74 e3                	je     c0000b5b <sYSMALLOc+0x84>
c0000b78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000b7c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000b80:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000b83:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000b89:	39 f1                	cmp    ecx,esi
c0000b8b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000b91:	75 13                	jne    c0000ba6 <sYSMALLOc+0xcf>
c0000b93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000b97:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000b9b:	83 c8 01             	or     eax,0x1
c0000b9e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000ba1:	e9 3e 01 00 00       	jmp    c0000ce4 <sYSMALLOc+0x20d>
c0000ba6:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000bac:	88 d0                	mov    al,dl
c0000bae:	83 e0 01             	and    eax,0x1
c0000bb1:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000bb6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000bba:	0f 95 c0             	setne  al
c0000bbd:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000bc1:	39 f1                	cmp    ecx,esi
c0000bc3:	76 12                	jbe    c0000bd7 <sYSMALLOc+0x100>
c0000bc5:	84 c0                	test   al,al
c0000bc7:	74 0e                	je     c0000bd7 <sYSMALLOc+0x100>
c0000bc9:	83 e2 fe             	and    edx,0xfffffffe
c0000bcc:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000bd2:	e9 83 00 00 00       	jmp    c0000c5a <sYSMALLOc+0x183>
c0000bd7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000bdc:	74 7c                	je     c0000c5a <sYSMALLOc+0x183>
c0000bde:	84 c0                	test   al,al
c0000be0:	74 0c                	je     c0000bee <sYSMALLOc+0x117>
c0000be2:	89 f0                	mov    eax,esi
c0000be4:	29 c8                	sub    eax,ecx
c0000be6:	01 e8                	add    eax,ebp
c0000be8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000bee:	89 f2                	mov    edx,esi
c0000bf0:	83 e2 07             	and    edx,0x7
c0000bf3:	74 0c                	je     c0000c01 <sYSMALLOc+0x12a>
c0000bf5:	b8 08 00 00 00       	mov    eax,0x8
c0000bfa:	29 d0                	sub    eax,edx
c0000bfc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000bff:	eb 04                	jmp    c0000c05 <sYSMALLOc+0x12e>
c0000c01:	89 f5                	mov    ebp,esi
c0000c03:	31 c0                	xor    eax,eax
c0000c05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000c09:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000c0d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000c11:	01 c1                	add    ecx,eax
c0000c13:	83 ec 0c             	sub    esp,0xc
c0000c16:	01 f1                	add    ecx,esi
c0000c18:	01 ca                	add    edx,ecx
c0000c1a:	29 c8                	sub    eax,ecx
c0000c1c:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000c20:	01 c2                	add    edx,eax
c0000c22:	52                   	push   edx
c0000c23:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000c27:	e8 87 f1 00 00       	call   c000fdb3 <sbrk>
c0000c2c:	83 c4 10             	add    esp,0x10
c0000c2f:	83 f8 ff             	cmp    eax,0xffffffff
c0000c32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000c36:	75 0f                	jne    c0000c47 <sYSMALLOc+0x170>
c0000c38:	83 ec 0c             	sub    esp,0xc
c0000c3b:	6a 00                	push   0x0
c0000c3d:	e8 71 f1 00 00       	call   c000fdb3 <sbrk>
c0000c42:	83 c4 10             	add    esp,0x10
c0000c45:	eb 30                	jmp    c0000c77 <sYSMALLOc+0x1a0>
c0000c47:	39 c6                	cmp    esi,eax
c0000c49:	76 33                	jbe    c0000c7e <sYSMALLOc+0x1a7>
c0000c4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000c4f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000c56:	01 f0                	add    eax,esi
c0000c58:	eb 1d                	jmp    c0000c77 <sYSMALLOc+0x1a0>
c0000c5a:	83 ec 0c             	sub    esp,0xc
c0000c5d:	89 f5                	mov    ebp,esi
c0000c5f:	6a 00                	push   0x0
c0000c61:	e8 4d f1 00 00       	call   c000fdb3 <sbrk>
c0000c66:	89 c2                	mov    edx,eax
c0000c68:	29 f2                	sub    edx,esi
c0000c6a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000c6e:	83 c4 10             	add    esp,0x10
c0000c71:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000c77:	31 d2                	xor    edx,edx
c0000c79:	83 f8 ff             	cmp    eax,0xffffffff
c0000c7c:	74 66                	je     c0000ce4 <sYSMALLOc+0x20d>
c0000c7e:	29 e8                	sub    eax,ebp
c0000c80:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000c83:	01 d0                	add    eax,edx
c0000c85:	83 c8 01             	or     eax,0x1
c0000c88:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000c8b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000c91:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000c96:	74 4c                	je     c0000ce4 <sYSMALLOc+0x20d>
c0000c98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c9c:	83 e8 0c             	sub    eax,0xc
c0000c9f:	83 e0 f8             	and    eax,0xfffffff8
c0000ca2:	89 c2                	mov    edx,eax
c0000ca4:	83 ca 01             	or     edx,0x1
c0000ca7:	83 f8 0f             	cmp    eax,0xf
c0000caa:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000cad:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000cb5:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000cbd:	76 25                	jbe    c0000ce4 <sYSMALLOc+0x20d>
c0000cbf:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000cc5:	83 ec 0c             	sub    esp,0xc
c0000cc8:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000cd2:	83 c7 08             	add    edi,0x8
c0000cd5:	57                   	push   edi
c0000cd6:	e8 9a 04 00 00       	call   c0001175 <dlfree>
c0000cdb:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000ce1:	83 c4 10             	add    esp,0x10
c0000ce4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000cea:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000cf0:	73 06                	jae    c0000cf8 <sYSMALLOc+0x221>
c0000cf2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000cf8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000cfe:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000d04:	73 06                	jae    c0000d0c <sYSMALLOc+0x235>
c0000d06:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000d0c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000d0f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000d12:	83 e2 fc             	and    edx,0xfffffffc
c0000d15:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000d19:	0f 82 3c fe ff ff    	jb     c0000b5b <sYSMALLOc+0x84>
c0000d1f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000d23:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000d26:	29 fa                	sub    edx,edi
c0000d28:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000d2b:	83 ca 01             	or     edx,0x1
c0000d2e:	89 fb                	mov    ebx,edi
c0000d30:	83 c0 08             	add    eax,0x8
c0000d33:	83 cb 01             	or     ebx,0x1
c0000d36:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000d39:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000d3c:	83 c4 2c             	add    esp,0x2c
c0000d3f:	5b                   	pop    ebx
c0000d40:	5e                   	pop    esi
c0000d41:	5f                   	pop    edi
c0000d42:	5d                   	pop    ebp
c0000d43:	c3                   	ret    

c0000d44 <sYSTRIm>:
c0000d44:	55                   	push   ebp
c0000d45:	31 d2                	xor    edx,edx
c0000d47:	57                   	push   edi
c0000d48:	56                   	push   esi
c0000d49:	53                   	push   ebx
c0000d4a:	83 ec 0c             	sub    esp,0xc
c0000d4d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0000d51:	8b 8f 5c 03 00 00    	mov    ecx,DWORD PTR [edi+0x35c]
c0000d57:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c0000d5a:	8b 70 04             	mov    esi,DWORD PTR [eax+0x4]
c0000d5d:	89 c8                	mov    eax,ecx
c0000d5f:	83 e6 fc             	and    esi,0xfffffffc
c0000d62:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0000d66:	8d 44 06 ef          	lea    eax,[esi+eax*1-0x11]
c0000d6a:	f7 f1                	div    ecx
c0000d6c:	8d 58 ff             	lea    ebx,[eax-0x1]
c0000d6f:	0f af d9             	imul   ebx,ecx
c0000d72:	85 db                	test   ebx,ebx
c0000d74:	7f 04                	jg     c0000d7a <sYSTRIm+0x36>
c0000d76:	31 c0                	xor    eax,eax
c0000d78:	eb 51                	jmp    c0000dcb <sYSTRIm+0x87>
c0000d7a:	83 ec 0c             	sub    esp,0xc
c0000d7d:	6a 00                	push   0x0
c0000d7f:	e8 2f f0 00 00       	call   c000fdb3 <sbrk>
c0000d84:	83 c4 10             	add    esp,0x10
c0000d87:	89 c5                	mov    ebp,eax
c0000d89:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c0000d8c:	01 f0                	add    eax,esi
c0000d8e:	39 c5                	cmp    ebp,eax
c0000d90:	75 e4                	jne    c0000d76 <sYSTRIm+0x32>
c0000d92:	83 ec 0c             	sub    esp,0xc
c0000d95:	f7 db                	neg    ebx
c0000d97:	53                   	push   ebx
c0000d98:	e8 16 f0 00 00       	call   c000fdb3 <sbrk>
c0000d9d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000da4:	e8 0a f0 00 00       	call   c000fdb3 <sbrk>
c0000da9:	83 c4 10             	add    esp,0x10
c0000dac:	83 f8 ff             	cmp    eax,0xffffffff
c0000daf:	74 c5                	je     c0000d76 <sYSTRIm+0x32>
c0000db1:	29 c5                	sub    ebp,eax
c0000db3:	74 c1                	je     c0000d76 <sYSTRIm+0x32>
c0000db5:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c0000db8:	29 af 68 03 00 00    	sub    DWORD PTR [edi+0x368],ebp
c0000dbe:	29 ee                	sub    esi,ebp
c0000dc0:	83 ce 01             	or     esi,0x1
c0000dc3:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c0000dc6:	b8 01 00 00 00       	mov    eax,0x1
c0000dcb:	83 c4 0c             	add    esp,0xc
c0000dce:	5b                   	pop    ebx
c0000dcf:	5e                   	pop    esi
c0000dd0:	5f                   	pop    edi
c0000dd1:	5d                   	pop    ebp
c0000dd2:	c3                   	ret    

c0000dd3 <dlmalloc>:
c0000dd3:	55                   	push   ebp
c0000dd4:	31 c0                	xor    eax,eax
c0000dd6:	57                   	push   edi
c0000dd7:	56                   	push   esi
c0000dd8:	53                   	push   ebx
c0000dd9:	83 ec 1c             	sub    esp,0x1c
c0000ddc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0000de0:	83 fa df             	cmp    edx,0xffffffdf
c0000de3:	0f 87 84 03 00 00    	ja     c000116d <dlmalloc+0x39a>
c0000de9:	83 c2 0b             	add    edx,0xb
c0000dec:	be 10 00 00 00       	mov    esi,0x10
c0000df1:	83 fa 0f             	cmp    edx,0xf
c0000df4:	76 05                	jbe    c0000dfb <dlmalloc+0x28>
c0000df6:	89 d6                	mov    esi,edx
c0000df8:	83 e6 f8             	and    esi,0xfffffff8
c0000dfb:	8b 3d a0 0f 03 c0    	mov    edi,DWORD PTR ds:0xc0030fa0
c0000e01:	f7 c7 01 00 00 00    	test   edi,0x1
c0000e07:	75 1d                	jne    c0000e26 <dlmalloc+0x53>
c0000e09:	85 ff                	test   edi,edi
c0000e0b:	0f 85 1c 03 00 00    	jne    c000112d <dlmalloc+0x35a>
c0000e11:	83 ec 0c             	sub    esp,0xc
c0000e14:	68 a0 0f 03 c0       	push   0xc0030fa0
c0000e19:	e8 4c 04 00 00       	call   c000126a <malloc_consolidate>
c0000e1e:	83 c4 10             	add    esp,0x10
c0000e21:	e9 07 03 00 00       	jmp    c000112d <dlmalloc+0x35a>
c0000e26:	39 f7                	cmp    edi,esi
c0000e28:	72 1f                	jb     c0000e49 <dlmalloc+0x76>
c0000e2a:	89 f2                	mov    edx,esi
c0000e2c:	c1 ea 03             	shr    edx,0x3
c0000e2f:	83 ea 02             	sub    edx,0x2
c0000e32:	8b 04 95 a4 0f 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcf05c]
c0000e39:	85 c0                	test   eax,eax
c0000e3b:	74 0c                	je     c0000e49 <dlmalloc+0x76>
c0000e3d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000e40:	89 0c 95 a4 0f 03 c0 	mov    DWORD PTR [edx*4-0x3ffcf05c],ecx
c0000e47:	eb 30                	jmp    c0000e79 <dlmalloc+0xa6>
c0000e49:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000e4f:	77 30                	ja     c0000e81 <dlmalloc+0xae>
c0000e51:	89 f0                	mov    eax,esi
c0000e53:	c1 e8 03             	shr    eax,0x3
c0000e56:	8d 14 c5 d4 0f 03 c0 	lea    edx,[eax*8-0x3ffcf02c]
c0000e5d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e61:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000e64:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000e67:	39 c3                	cmp    ebx,eax
c0000e69:	74 3b                	je     c0000ea6 <dlmalloc+0xd3>
c0000e6b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000e6e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000e73:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e76:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000e79:	83 c0 08             	add    eax,0x8
c0000e7c:	e9 ec 02 00 00       	jmp    c000116d <dlmalloc+0x39a>
c0000e81:	83 ec 0c             	sub    esp,0xc
c0000e84:	56                   	push   esi
c0000e85:	e8 c2 fb ff ff       	call   c0000a4c <largebin_index>
c0000e8a:	83 c4 10             	add    esp,0x10
c0000e8d:	83 e7 02             	and    edi,0x2
c0000e90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e94:	74 10                	je     c0000ea6 <dlmalloc+0xd3>
c0000e96:	83 ec 0c             	sub    esp,0xc
c0000e99:	68 a0 0f 03 c0       	push   0xc0030fa0
c0000e9e:	e8 c7 03 00 00       	call   c000126a <malloc_consolidate>
c0000ea3:	83 c4 10             	add    esp,0x10
c0000ea6:	8d 46 10             	lea    eax,[esi+0x10]
c0000ea9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ead:	8b 1d e0 0f 03 c0    	mov    ebx,DWORD PTR ds:0xc0030fe0
c0000eb3:	81 fb d4 0f 03 c0    	cmp    ebx,0xc0030fd4
c0000eb9:	0f 84 1a 01 00 00    	je     c0000fd9 <dlmalloc+0x206>
c0000ebf:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000ec2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000ec5:	83 e7 fc             	and    edi,0xfffffffc
c0000ec8:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000ece:	77 4c                	ja     c0000f1c <dlmalloc+0x149>
c0000ed0:	3d d4 0f 03 c0       	cmp    eax,0xc0030fd4
c0000ed5:	75 45                	jne    c0000f1c <dlmalloc+0x149>
c0000ed7:	39 1d d0 0f 03 c0    	cmp    DWORD PTR ds:0xc0030fd0,ebx
c0000edd:	75 3d                	jne    c0000f1c <dlmalloc+0x149>
c0000edf:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000ee3:	73 37                	jae    c0000f1c <dlmalloc+0x149>
c0000ee5:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000ee8:	89 fa                	mov    edx,edi
c0000eea:	a3 dc 0f 03 c0       	mov    ds:0xc0030fdc,eax
c0000eef:	a3 e0 0f 03 c0       	mov    ds:0xc0030fe0,eax
c0000ef4:	a3 d0 0f 03 c0       	mov    ds:0xc0030fd0,eax
c0000ef9:	29 f2                	sub    edx,esi
c0000efb:	c7 40 08 d4 0f 03 c0 	mov    DWORD PTR [eax+0x8],0xc0030fd4
c0000f02:	c7 40 0c d4 0f 03 c0 	mov    DWORD PTR [eax+0xc],0xc0030fd4
c0000f09:	83 ce 01             	or     esi,0x1
c0000f0c:	89 d1                	mov    ecx,edx
c0000f0e:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000f11:	83 c9 01             	or     ecx,0x1
c0000f14:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000f17:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000f1a:	eb 15                	jmp    c0000f31 <dlmalloc+0x15e>
c0000f1c:	a3 e0 0f 03 c0       	mov    ds:0xc0030fe0,eax
c0000f21:	39 fe                	cmp    esi,edi
c0000f23:	c7 40 08 d4 0f 03 c0 	mov    DWORD PTR [eax+0x8],0xc0030fd4
c0000f2a:	75 0d                	jne    c0000f39 <dlmalloc+0x166>
c0000f2c:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0000f31:	8d 43 08             	lea    eax,[ebx+0x8]
c0000f34:	e9 34 02 00 00       	jmp    c000116d <dlmalloc+0x39a>
c0000f39:	81 ff ff 00 00 00    	cmp    edi,0xff
c0000f3f:	77 1b                	ja     c0000f5c <dlmalloc+0x189>
c0000f41:	89 f8                	mov    eax,edi
c0000f43:	c1 e8 03             	shr    eax,0x3
c0000f46:	8d 14 00             	lea    edx,[eax+eax*1]
c0000f49:	83 c2 0d             	add    edx,0xd
c0000f4c:	8d 2c 95 98 0f 03 c0 	lea    ebp,[edx*4-0x3ffcf068]
c0000f53:	8b 14 95 a0 0f 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcf060]
c0000f5a:	eb 4d                	jmp    c0000fa9 <dlmalloc+0x1d6>
c0000f5c:	83 ec 0c             	sub    esp,0xc
c0000f5f:	57                   	push   edi
c0000f60:	e8 e7 fa ff ff       	call   c0000a4c <largebin_index>
c0000f65:	83 c4 10             	add    esp,0x10
c0000f68:	8d 14 00             	lea    edx,[eax+eax*1]
c0000f6b:	83 c2 0d             	add    edx,0xd
c0000f6e:	8d 0c 95 a0 0f 03 c0 	lea    ecx,[edx*4-0x3ffcf060]
c0000f75:	8b 14 95 a0 0f 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcf060]
c0000f7c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0000f7f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0000f83:	89 d5                	mov    ebp,edx
c0000f85:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0000f89:	74 1e                	je     c0000fa9 <dlmalloc+0x1d6>
c0000f8b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0000f8e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0000f91:	77 12                	ja     c0000fa5 <dlmalloc+0x1d2>
c0000f93:	83 cf 01             	or     edi,0x1
c0000f96:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0000f99:	76 05                	jbe    c0000fa0 <dlmalloc+0x1cd>
c0000f9b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0000f9e:	eb f6                	jmp    c0000f96 <dlmalloc+0x1c3>
c0000fa0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0000fa3:	eb 04                	jmp    c0000fa9 <dlmalloc+0x1d6>
c0000fa5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000fa9:	89 c7                	mov    edi,eax
c0000fab:	88 c1                	mov    cl,al
c0000fad:	c1 ff 05             	sar    edi,0x5
c0000fb0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000fb4:	bf 01 00 00 00       	mov    edi,0x1
c0000fb9:	d3 e7                	shl    edi,cl
c0000fbb:	89 f8                	mov    eax,edi
c0000fbd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000fc1:	09 04 bd d4 12 03 c0 	or     DWORD PTR [edi*4-0x3ffced2c],eax
c0000fc8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0000fcb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0000fce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0000fd1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0000fd4:	e9 d4 fe ff ff       	jmp    c0000ead <dlmalloc+0xda>
c0000fd9:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fdf:	76 78                	jbe    c0001059 <dlmalloc+0x286>
c0000fe1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000fe5:	8d 04 c5 d4 0f 03 c0 	lea    eax,[eax*8-0x3ffcf02c]
c0000fec:	8d 48 f8             	lea    ecx,[eax-0x8]
c0000fef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff2:	39 ca                	cmp    edx,ecx
c0000ff4:	74 63                	je     c0001059 <dlmalloc+0x286>
c0000ff6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0000ff9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0000ffc:	83 e3 fc             	and    ebx,0xfffffffc
c0000fff:	39 de                	cmp    esi,ebx
c0001001:	77 52                	ja     c0001055 <dlmalloc+0x282>
c0001003:	89 df                	mov    edi,ebx
c0001005:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001008:	29 f7                	sub    edi,esi
c000100a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000100d:	01 d3                	add    ebx,edx
c000100f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001012:	83 ff 0f             	cmp    edi,0xf
c0001015:	8d 42 08             	lea    eax,[edx+0x8]
c0001018:	77 09                	ja     c0001023 <dlmalloc+0x250>
c000101a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000101e:	e9 4a 01 00 00       	jmp    c000116d <dlmalloc+0x39a>
c0001023:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001026:	83 ce 01             	or     esi,0x1
c0001029:	89 0d dc 0f 03 c0    	mov    DWORD PTR ds:0xc0030fdc,ecx
c000102f:	89 0d e0 0f 03 c0    	mov    DWORD PTR ds:0xc0030fe0,ecx
c0001035:	c7 41 08 d4 0f 03 c0 	mov    DWORD PTR [ecx+0x8],0xc0030fd4
c000103c:	c7 41 0c d4 0f 03 c0 	mov    DWORD PTR [ecx+0xc],0xc0030fd4
c0001043:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001046:	89 fa                	mov    edx,edi
c0001048:	83 ca 01             	or     edx,0x1
c000104b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000104e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001050:	e9 18 01 00 00       	jmp    c000116d <dlmalloc+0x39a>
c0001055:	89 c2                	mov    edx,eax
c0001057:	eb 99                	jmp    c0000ff2 <dlmalloc+0x21f>
c0001059:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000105d:	b8 01 00 00 00       	mov    eax,0x1
c0001062:	41                   	inc    ecx
c0001063:	89 cb                	mov    ebx,ecx
c0001065:	8d 14 cd cc 0f 03 c0 	lea    edx,[ecx*8-0x3ffcf034]
c000106c:	c1 eb 05             	shr    ebx,0x5
c000106f:	d3 e0                	shl    eax,cl
c0001071:	8b 3c 9d d4 12 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffced2c]
c0001078:	39 f8                	cmp    eax,edi
c000107a:	77 04                	ja     c0001080 <dlmalloc+0x2ad>
c000107c:	85 c0                	test   eax,eax
c000107e:	75 26                	jne    c00010a6 <dlmalloc+0x2d3>
c0001080:	43                   	inc    ebx
c0001081:	83 fb 02             	cmp    ebx,0x2
c0001084:	0f 87 a3 00 00 00    	ja     c000112d <dlmalloc+0x35a>
c000108a:	8b 3c 9d d4 12 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffced2c]
c0001091:	85 ff                	test   edi,edi
c0001093:	74 eb                	je     c0001080 <dlmalloc+0x2ad>
c0001095:	89 d8                	mov    eax,ebx
c0001097:	c1 e0 06             	shl    eax,0x6
c000109a:	8d 14 85 cc 0f 03 c0 	lea    edx,[eax*4-0x3ffcf034]
c00010a1:	b8 01 00 00 00       	mov    eax,0x1
c00010a6:	85 f8                	test   eax,edi
c00010a8:	75 07                	jne    c00010b1 <dlmalloc+0x2de>
c00010aa:	83 c2 08             	add    edx,0x8
c00010ad:	01 c0                	add    eax,eax
c00010af:	eb f5                	jmp    c00010a6 <dlmalloc+0x2d3>
c00010b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00010b4:	39 ca                	cmp    edx,ecx
c00010b6:	75 14                	jne    c00010cc <dlmalloc+0x2f9>
c00010b8:	89 c1                	mov    ecx,eax
c00010ba:	83 c2 08             	add    edx,0x8
c00010bd:	f7 d1                	not    ecx
c00010bf:	01 c0                	add    eax,eax
c00010c1:	21 cf                	and    edi,ecx
c00010c3:	89 3c 9d d4 12 03 c0 	mov    DWORD PTR [ebx*4-0x3ffced2c],edi
c00010ca:	eb ac                	jmp    c0001078 <dlmalloc+0x2a5>
c00010cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00010cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00010d2:	83 e0 fc             	and    eax,0xfffffffc
c00010d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00010d8:	89 c3                	mov    ebx,eax
c00010da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00010dd:	29 f3                	sub    ebx,esi
c00010df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00010e2:	83 fb 0f             	cmp    ebx,0xf
c00010e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00010e8:	77 06                	ja     c00010f0 <dlmalloc+0x31d>
c00010ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00010ee:	eb 7d                	jmp    c000116d <dlmalloc+0x39a>
c00010f0:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00010f3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010f9:	89 3d dc 0f 03 c0    	mov    DWORD PTR ds:0xc0030fdc,edi
c00010ff:	89 3d e0 0f 03 c0    	mov    DWORD PTR ds:0xc0030fe0,edi
c0001105:	c7 47 08 d4 0f 03 c0 	mov    DWORD PTR [edi+0x8],0xc0030fd4
c000110c:	c7 47 0c d4 0f 03 c0 	mov    DWORD PTR [edi+0xc],0xc0030fd4
c0001113:	77 06                	ja     c000111b <dlmalloc+0x348>
c0001115:	89 3d d0 0f 03 c0    	mov    DWORD PTR ds:0xc0030fd0,edi
c000111b:	83 ce 01             	or     esi,0x1
c000111e:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001121:	89 d9                	mov    ecx,ebx
c0001123:	83 c9 01             	or     ecx,0x1
c0001126:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001129:	89 1a                	mov    DWORD PTR [edx],ebx
c000112b:	eb 40                	jmp    c000116d <dlmalloc+0x39a>
c000112d:	a1 cc 0f 03 c0       	mov    eax,ds:0xc0030fcc
c0001132:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001135:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001138:	83 e2 fc             	and    edx,0xfffffffc
c000113b:	39 d1                	cmp    ecx,edx
c000113d:	77 1e                	ja     c000115d <dlmalloc+0x38a>
c000113f:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001142:	89 f3                	mov    ebx,esi
c0001144:	89 0d cc 0f 03 c0    	mov    DWORD PTR ds:0xc0030fcc,ecx
c000114a:	83 cb 01             	or     ebx,0x1
c000114d:	29 f2                	sub    edx,esi
c000114f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001152:	83 ca 01             	or     edx,0x1
c0001155:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001158:	e9 1c fd ff ff       	jmp    c0000e79 <dlmalloc+0xa6>
c000115d:	50                   	push   eax
c000115e:	50                   	push   eax
c000115f:	68 a0 0f 03 c0       	push   0xc0030fa0
c0001164:	56                   	push   esi
c0001165:	e8 6d f9 ff ff       	call   c0000ad7 <sYSMALLOc>
c000116a:	83 c4 10             	add    esp,0x10
c000116d:	83 c4 1c             	add    esp,0x1c
c0001170:	5b                   	pop    ebx
c0001171:	5e                   	pop    esi
c0001172:	5f                   	pop    edi
c0001173:	5d                   	pop    ebp
c0001174:	c3                   	ret    

c0001175 <dlfree>:
c0001175:	57                   	push   edi
c0001176:	56                   	push   esi
c0001177:	53                   	push   ebx
c0001178:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000117c:	85 db                	test   ebx,ebx
c000117e:	0f 84 e2 00 00 00    	je     c0001266 <dlfree+0xf1>
c0001184:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0001187:	8b 0d a0 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030fa0
c000118d:	89 f0                	mov    eax,esi
c000118f:	8d 53 f8             	lea    edx,[ebx-0x8]
c0001192:	83 e0 fc             	and    eax,0xfffffffc
c0001195:	39 c1                	cmp    ecx,eax
c0001197:	72 24                	jb     c00011bd <dlfree+0x48>
c0001199:	83 c9 03             	or     ecx,0x3
c000119c:	c1 e8 03             	shr    eax,0x3
c000119f:	89 0d a0 0f 03 c0    	mov    DWORD PTR ds:0xc0030fa0,ecx
c00011a5:	83 e8 02             	sub    eax,0x2
c00011a8:	8b 0c 85 a4 0f 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffcf05c]
c00011af:	89 0b                	mov    DWORD PTR [ebx],ecx
c00011b1:	89 14 85 a4 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf05c],edx
c00011b8:	e9 a9 00 00 00       	jmp    c0001266 <dlfree+0xf1>
c00011bd:	83 e6 02             	and    esi,0x2
c00011c0:	0f 85 a0 00 00 00    	jne    c0001266 <dlfree+0xf1>
c00011c6:	83 c9 01             	or     ecx,0x1
c00011c9:	8d 34 02             	lea    esi,[edx+eax*1]
c00011cc:	89 0d a0 0f 03 c0    	mov    DWORD PTR ds:0xc0030fa0,ecx
c00011d2:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00011d5:	83 e1 fc             	and    ecx,0xfffffffc
c00011d8:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c00011dc:	75 13                	jne    c00011f1 <dlfree+0x7c>
c00011de:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c00011e1:	29 da                	sub    edx,ebx
c00011e3:	01 d8                	add    eax,ebx
c00011e5:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c00011e8:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00011eb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c00011ee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c00011f1:	39 35 cc 0f 03 c0    	cmp    DWORD PTR ds:0xc0030fcc,esi
c00011f7:	74 40                	je     c0001239 <dlfree+0xc4>
c00011f9:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c00011fd:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0001200:	80 e3 01             	and    bl,0x1
c0001203:	75 0e                	jne    c0001213 <dlfree+0x9e>
c0001205:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0001208:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000120b:	01 c8                	add    eax,ecx
c000120d:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0001210:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0001213:	8b 0d dc 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030fdc
c0001219:	c7 42 0c d4 0f 03 c0 	mov    DWORD PTR [edx+0xc],0xc0030fd4
c0001220:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0001223:	89 15 dc 0f 03 c0    	mov    DWORD PTR ds:0xc0030fdc,edx
c0001229:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000122c:	89 c1                	mov    ecx,eax
c000122e:	83 c9 01             	or     ecx,0x1
c0001231:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001234:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0001237:	eb 10                	jmp    c0001249 <dlfree+0xd4>
c0001239:	01 c8                	add    eax,ecx
c000123b:	89 c1                	mov    ecx,eax
c000123d:	83 c9 01             	or     ecx,0x1
c0001240:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001243:	89 15 cc 0f 03 c0    	mov    DWORD PTR ds:0xc0030fcc,edx
c0001249:	3d ff ff 01 00       	cmp    eax,0x1ffff
c000124e:	76 16                	jbe    c0001266 <dlfree+0xf1>
c0001250:	f6 05 a0 0f 03 c0 02 	test   BYTE PTR ds:0xc0030fa0,0x2
c0001257:	74 0d                	je     c0001266 <dlfree+0xf1>
c0001259:	c7 44 24 10 a0 0f 03 c0 	mov    DWORD PTR [esp+0x10],0xc0030fa0
c0001261:	5b                   	pop    ebx
c0001262:	5e                   	pop    esi
c0001263:	5f                   	pop    edi
c0001264:	eb 04                	jmp    c000126a <malloc_consolidate>
c0001266:	5b                   	pop    ebx
c0001267:	5e                   	pop    esi
c0001268:	5f                   	pop    edi
c0001269:	c3                   	ret    

c000126a <malloc_consolidate>:
c000126a:	55                   	push   ebp
c000126b:	57                   	push   edi
c000126c:	56                   	push   esi
c000126d:	53                   	push   ebx
c000126e:	83 ec 10             	sub    esp,0x10
c0001271:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0001275:	8b 01                	mov    eax,DWORD PTR [ecx]
c0001277:	85 c0                	test   eax,eax
c0001279:	0f 84 d1 00 00 00    	je     c0001350 <malloc_consolidate+0xe6>
c000127f:	83 e0 fd             	and    eax,0xfffffffd
c0001282:	8d 79 34             	lea    edi,[ecx+0x34]
c0001285:	89 01                	mov    DWORD PTR [ecx],eax
c0001287:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000128b:	c1 e8 03             	shr    eax,0x3
c000128e:	89 cd                	mov    ebp,ecx
c0001290:	8d 44 81 fc          	lea    eax,[ecx+eax*4-0x4]
c0001294:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001298:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000129b:	85 c0                	test   eax,eax
c000129d:	0f 84 98 00 00 00    	je     c000133b <malloc_consolidate+0xd1>
c00012a3:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c00012aa:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c00012ad:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00012b1:	8b 78 04             	mov    edi,DWORD PTR [eax+0x4]
c00012b4:	89 fa                	mov    edx,edi
c00012b6:	83 e2 fe             	and    edx,0xfffffffe
c00012b9:	8d 34 10             	lea    esi,[eax+edx*1]
c00012bc:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c00012bf:	83 e3 fc             	and    ebx,0xfffffffc
c00012c2:	83 e7 01             	and    edi,0x1
c00012c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00012c8:	75 14                	jne    c00012de <malloc_consolidate+0x74>
c00012ca:	8b 38                	mov    edi,DWORD PTR [eax]
c00012cc:	29 f8                	sub    eax,edi
c00012ce:	01 fa                	add    edx,edi
c00012d0:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c00012d3:	89 fb                	mov    ebx,edi
c00012d5:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c00012d8:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c00012db:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c00012de:	39 71 2c             	cmp    DWORD PTR [ecx+0x2c],esi
c00012e1:	74 40                	je     c0001323 <malloc_consolidate+0xb9>
c00012e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00012e6:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00012e9:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c00012ed:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c00012f0:	83 e7 01             	and    edi,0x1
c00012f3:	75 0e                	jne    c0001303 <malloc_consolidate+0x99>
c00012f5:	01 da                	add    edx,ebx
c00012f7:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00012fa:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00012fd:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001300:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0001303:	8b 59 3c             	mov    ebx,DWORD PTR [ecx+0x3c]
c0001306:	89 d6                	mov    esi,edx
c0001308:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c000130b:	83 ce 01             	or     esi,0x1
c000130e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0001311:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c0001314:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
c0001317:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000131b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000131e:	89 14 10             	mov    DWORD PTR [eax+edx*1],edx
c0001321:	eb 0c                	jmp    c000132f <malloc_consolidate+0xc5>
c0001323:	03 14 24             	add    edx,DWORD PTR [esp]
c0001326:	83 ca 01             	or     edx,0x1
c0001329:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000132c:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c000132f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001333:	85 c0                	test   eax,eax
c0001335:	0f 85 6f ff ff ff    	jne    c00012aa <malloc_consolidate+0x40>
c000133b:	83 c5 04             	add    ebp,0x4
c000133e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0001342:	0f 85 50 ff ff ff    	jne    c0001298 <malloc_consolidate+0x2e>
c0001348:	83 c4 10             	add    esp,0x10
c000134b:	5b                   	pop    ebx
c000134c:	5e                   	pop    esi
c000134d:	5f                   	pop    edi
c000134e:	5d                   	pop    ebp
c000134f:	c3                   	ret    
c0001350:	83 c4 10             	add    esp,0x10
c0001353:	5b                   	pop    ebx
c0001354:	5e                   	pop    esi
c0001355:	5f                   	pop    edi
c0001356:	5d                   	pop    ebp
c0001357:	e9 16 f7 ff ff       	jmp    c0000a72 <malloc_init_state>

c000135c <dlrealloc>:
c000135c:	55                   	push   ebp
c000135d:	57                   	push   edi
c000135e:	56                   	push   esi
c000135f:	53                   	push   ebx
c0001360:	83 ec 1c             	sub    esp,0x1c
c0001363:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001367:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000136b:	85 db                	test   ebx,ebx
c000136d:	75 10                	jne    c000137f <dlrealloc+0x23>
c000136f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001373:	83 c4 1c             	add    esp,0x1c
c0001376:	5b                   	pop    ebx
c0001377:	5e                   	pop    esi
c0001378:	5f                   	pop    edi
c0001379:	5d                   	pop    ebp
c000137a:	e9 54 fa ff ff       	jmp    c0000dd3 <dlmalloc>
c000137f:	83 f8 df             	cmp    eax,0xffffffdf
c0001382:	76 07                	jbe    c000138b <dlrealloc+0x2f>
c0001384:	31 db                	xor    ebx,ebx
c0001386:	e9 7c 01 00 00       	jmp    c0001507 <dlrealloc+0x1ab>
c000138b:	83 c0 0b             	add    eax,0xb
c000138e:	bf 10 00 00 00       	mov    edi,0x10
c0001393:	83 f8 0f             	cmp    eax,0xf
c0001396:	76 05                	jbe    c000139d <dlrealloc+0x41>
c0001398:	83 e0 f8             	and    eax,0xfffffff8
c000139b:	89 c7                	mov    edi,eax
c000139d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00013a0:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00013a3:	89 c6                	mov    esi,eax
c00013a5:	83 e6 fc             	and    esi,0xfffffffc
c00013a8:	a8 02                	test   al,0x2
c00013aa:	75 d8                	jne    c0001384 <dlrealloc+0x28>
c00013ac:	39 f7                	cmp    edi,esi
c00013ae:	0f 86 15 01 00 00    	jbe    c00014c9 <dlrealloc+0x16d>
c00013b4:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00013b8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00013bb:	39 15 cc 0f 03 c0    	cmp    DWORD PTR ds:0xc0030fcc,edx
c00013c1:	75 33                	jne    c00013f6 <dlrealloc+0x9a>
c00013c3:	83 e1 fc             	and    ecx,0xfffffffc
c00013c6:	01 f1                	add    ecx,esi
c00013c8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013cc:	8d 4f 10             	lea    ecx,[edi+0x10]
c00013cf:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00013d3:	77 49                	ja     c000141e <dlrealloc+0xc2>
c00013d5:	01 fd                	add    ebp,edi
c00013d7:	83 e0 01             	and    eax,0x1
c00013da:	09 f8                	or     eax,edi
c00013dc:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00013df:	89 2d cc 0f 03 c0    	mov    DWORD PTR ds:0xc0030fcc,ebp
c00013e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00013e9:	29 f8                	sub    eax,edi
c00013eb:	83 c8 01             	or     eax,0x1
c00013ee:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00013f1:	e9 11 01 00 00       	jmp    c0001507 <dlrealloc+0x1ab>
c00013f6:	89 c8                	mov    eax,ecx
c00013f8:	83 e0 fe             	and    eax,0xfffffffe
c00013fb:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001400:	75 1c                	jne    c000141e <dlrealloc+0xc2>
c0001402:	83 e1 fc             	and    ecx,0xfffffffc
c0001405:	01 f1                	add    ecx,esi
c0001407:	39 cf                	cmp    edi,ecx
c0001409:	77 13                	ja     c000141e <dlrealloc+0xc2>
c000140b:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c000140e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001411:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001414:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001417:	89 ce                	mov    esi,ecx
c0001419:	e9 ab 00 00 00       	jmp    c00014c9 <dlrealloc+0x16d>
c000141e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001422:	8d 47 f9             	lea    eax,[edi-0x7]
c0001425:	83 ec 0c             	sub    esp,0xc
c0001428:	50                   	push   eax
c0001429:	e8 a5 f9 ff ff       	call   c0000dd3 <dlmalloc>
c000142e:	83 c4 10             	add    esp,0x10
c0001431:	89 c1                	mov    ecx,eax
c0001433:	85 c0                	test   eax,eax
c0001435:	0f 84 49 ff ff ff    	je     c0001384 <dlrealloc+0x28>
c000143b:	8d 40 f8             	lea    eax,[eax-0x8]
c000143e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001442:	39 c2                	cmp    edx,eax
c0001444:	75 0a                	jne    c0001450 <dlrealloc+0xf4>
c0001446:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001449:	83 e0 fc             	and    eax,0xfffffffc
c000144c:	01 c6                	add    esi,eax
c000144e:	eb 79                	jmp    c00014c9 <dlrealloc+0x16d>
c0001450:	83 ee 04             	sub    esi,0x4
c0001453:	83 fe 27             	cmp    esi,0x27
c0001456:	76 16                	jbe    c000146e <dlrealloc+0x112>
c0001458:	50                   	push   eax
c0001459:	56                   	push   esi
c000145a:	53                   	push   ebx
c000145b:	51                   	push   ecx
c000145c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001460:	e8 3b f2 ff ff       	call   c00006a0 <memcpy>
c0001465:	83 c4 10             	add    esp,0x10
c0001468:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000146c:	eb 43                	jmp    c00014b1 <dlrealloc+0x155>
c000146e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001470:	83 fe 13             	cmp    esi,0x13
c0001473:	89 01                	mov    DWORD PTR [ecx],eax
c0001475:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001478:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c000147b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000147e:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001481:	76 2e                	jbe    c00014b1 <dlrealloc+0x155>
c0001483:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001486:	83 fe 1b             	cmp    esi,0x1b
c0001489:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000148c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000148f:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c0001492:	76 1d                	jbe    c00014b1 <dlrealloc+0x155>
c0001494:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001497:	83 fe 23             	cmp    esi,0x23
c000149a:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000149d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00014a0:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00014a3:	76 0c                	jbe    c00014b1 <dlrealloc+0x155>
c00014a5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00014a8:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00014ab:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00014ae:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00014b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014b5:	83 ec 0c             	sub    esp,0xc
c00014b8:	53                   	push   ebx
c00014b9:	e8 b7 fc ff ff       	call   c0001175 <dlfree>
c00014be:	83 c4 10             	add    esp,0x10
c00014c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00014c5:	89 cb                	mov    ebx,ecx
c00014c7:	eb 3e                	jmp    c0001507 <dlrealloc+0x1ab>
c00014c9:	89 f2                	mov    edx,esi
c00014cb:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00014ce:	29 fa                	sub    edx,edi
c00014d0:	83 e1 01             	and    ecx,0x1
c00014d3:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00014d7:	83 fa 0f             	cmp    edx,0xf
c00014da:	77 0b                	ja     c00014e7 <dlrealloc+0x18b>
c00014dc:	09 ce                	or     esi,ecx
c00014de:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00014e1:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00014e5:	eb 20                	jmp    c0001507 <dlrealloc+0x1ab>
c00014e7:	01 fd                	add    ebp,edi
c00014e9:	83 ec 0c             	sub    esp,0xc
c00014ec:	09 cf                	or     edi,ecx
c00014ee:	83 ca 01             	or     edx,0x1
c00014f1:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00014f4:	83 c5 08             	add    ebp,0x8
c00014f7:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00014fa:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00014fe:	55                   	push   ebp
c00014ff:	e8 71 fc ff ff       	call   c0001175 <dlfree>
c0001504:	83 c4 10             	add    esp,0x10
c0001507:	83 c4 1c             	add    esp,0x1c
c000150a:	89 d8                	mov    eax,ebx
c000150c:	5b                   	pop    ebx
c000150d:	5e                   	pop    esi
c000150e:	5f                   	pop    edi
c000150f:	5d                   	pop    ebp
c0001510:	c3                   	ret    

c0001511 <dlmemalign>:
c0001511:	55                   	push   ebp
c0001512:	57                   	push   edi
c0001513:	56                   	push   esi
c0001514:	53                   	push   ebx
c0001515:	83 ec 0c             	sub    esp,0xc
c0001518:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000151c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001520:	83 fa 08             	cmp    edx,0x8
c0001523:	77 10                	ja     c0001535 <dlmemalign+0x24>
c0001525:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001529:	83 c4 0c             	add    esp,0xc
c000152c:	5b                   	pop    ebx
c000152d:	5e                   	pop    esi
c000152e:	5f                   	pop    edi
c000152f:	5d                   	pop    ebp
c0001530:	e9 9e f8 ff ff       	jmp    c0000dd3 <dlmalloc>
c0001535:	bf 10 00 00 00       	mov    edi,0x10
c000153a:	83 fa 0f             	cmp    edx,0xf
c000153d:	76 13                	jbe    c0001552 <dlmemalign+0x41>
c000153f:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001542:	85 d1                	test   ecx,edx
c0001544:	75 04                	jne    c000154a <dlmemalign+0x39>
c0001546:	89 d7                	mov    edi,edx
c0001548:	eb 08                	jmp    c0001552 <dlmemalign+0x41>
c000154a:	39 d7                	cmp    edi,edx
c000154c:	73 04                	jae    c0001552 <dlmemalign+0x41>
c000154e:	01 ff                	add    edi,edi
c0001550:	eb f8                	jmp    c000154a <dlmemalign+0x39>
c0001552:	83 f8 df             	cmp    eax,0xffffffdf
c0001555:	76 07                	jbe    c000155e <dlmemalign+0x4d>
c0001557:	31 c0                	xor    eax,eax
c0001559:	e9 ce 00 00 00       	jmp    c000162c <dlmemalign+0x11b>
c000155e:	83 c0 0b             	add    eax,0xb
c0001561:	bd 10 00 00 00       	mov    ebp,0x10
c0001566:	83 f8 0f             	cmp    eax,0xf
c0001569:	76 05                	jbe    c0001570 <dlmemalign+0x5f>
c000156b:	83 e0 f8             	and    eax,0xfffffff8
c000156e:	89 c5                	mov    ebp,eax
c0001570:	83 ec 0c             	sub    esp,0xc
c0001573:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001577:	50                   	push   eax
c0001578:	e8 56 f8 ff ff       	call   c0000dd3 <dlmalloc>
c000157d:	83 c4 10             	add    esp,0x10
c0001580:	89 c1                	mov    ecx,eax
c0001582:	85 c0                	test   eax,eax
c0001584:	74 d1                	je     c0001557 <dlmemalign+0x46>
c0001586:	31 d2                	xor    edx,edx
c0001588:	8d 70 f8             	lea    esi,[eax-0x8]
c000158b:	f7 f7                	div    edi
c000158d:	85 d2                	test   edx,edx
c000158f:	74 62                	je     c00015f3 <dlmemalign+0xe2>
c0001591:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001595:	89 f8                	mov    eax,edi
c0001597:	f7 d8                	neg    eax
c0001599:	21 c3                	and    ebx,eax
c000159b:	83 eb 08             	sub    ebx,0x8
c000159e:	89 d8                	mov    eax,ebx
c00015a0:	29 f0                	sub    eax,esi
c00015a2:	83 f8 0f             	cmp    eax,0xf
c00015a5:	77 02                	ja     c00015a9 <dlmemalign+0x98>
c00015a7:	01 fb                	add    ebx,edi
c00015a9:	89 d8                	mov    eax,ebx
c00015ab:	29 f0                	sub    eax,esi
c00015ad:	89 c6                	mov    esi,eax
c00015af:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015b2:	89 c2                	mov    edx,eax
c00015b4:	83 e2 fc             	and    edx,0xfffffffc
c00015b7:	29 f2                	sub    edx,esi
c00015b9:	a8 02                	test   al,0x2
c00015bb:	74 10                	je     c00015cd <dlmemalign+0xbc>
c00015bd:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00015c0:	83 ca 02             	or     edx,0x2
c00015c3:	8d 43 08             	lea    eax,[ebx+0x8]
c00015c6:	89 33                	mov    DWORD PTR [ebx],esi
c00015c8:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00015cb:	eb 5f                	jmp    c000162c <dlmemalign+0x11b>
c00015cd:	83 ec 0c             	sub    esp,0xc
c00015d0:	89 d0                	mov    eax,edx
c00015d2:	83 c8 01             	or     eax,0x1
c00015d5:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00015d8:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00015dd:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015e0:	83 e0 01             	and    eax,0x1
c00015e3:	09 f0                	or     eax,esi
c00015e5:	89 de                	mov    esi,ebx
c00015e7:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00015ea:	51                   	push   ecx
c00015eb:	e8 85 fb ff ff       	call   c0001175 <dlfree>
c00015f0:	83 c4 10             	add    esp,0x10
c00015f3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00015f6:	a8 02                	test   al,0x2
c00015f8:	75 2f                	jne    c0001629 <dlmemalign+0x118>
c00015fa:	83 e0 fc             	and    eax,0xfffffffc
c00015fd:	8d 55 10             	lea    edx,[ebp+0x10]
c0001600:	39 c2                	cmp    edx,eax
c0001602:	73 25                	jae    c0001629 <dlmemalign+0x118>
c0001604:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001607:	83 ec 0c             	sub    esp,0xc
c000160a:	29 e8                	sub    eax,ebp
c000160c:	83 c2 08             	add    edx,0x8
c000160f:	83 c8 01             	or     eax,0x1
c0001612:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001615:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001618:	83 e0 01             	and    eax,0x1
c000161b:	09 c5                	or     ebp,eax
c000161d:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001620:	52                   	push   edx
c0001621:	e8 4f fb ff ff       	call   c0001175 <dlfree>
c0001626:	83 c4 10             	add    esp,0x10
c0001629:	8d 46 08             	lea    eax,[esi+0x8]
c000162c:	83 c4 0c             	add    esp,0xc
c000162f:	5b                   	pop    ebx
c0001630:	5e                   	pop    esi
c0001631:	5f                   	pop    edi
c0001632:	5d                   	pop    ebp
c0001633:	c3                   	ret    

c0001634 <dlcalloc>:
c0001634:	53                   	push   ebx
c0001635:	83 ec 14             	sub    esp,0x14
c0001638:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000163c:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001641:	50                   	push   eax
c0001642:	e8 8c f7 ff ff       	call   c0000dd3 <dlmalloc>
c0001647:	83 c4 10             	add    esp,0x10
c000164a:	89 c3                	mov    ebx,eax
c000164c:	85 c0                	test   eax,eax
c000164e:	74 77                	je     c00016c7 <dlcalloc+0x93>
c0001650:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001653:	89 d0                	mov    eax,edx
c0001655:	83 e0 fc             	and    eax,0xfffffffc
c0001658:	80 e2 02             	and    dl,0x2
c000165b:	75 5a                	jne    c00016b7 <dlcalloc+0x83>
c000165d:	83 e8 04             	sub    eax,0x4
c0001660:	83 f8 27             	cmp    eax,0x27
c0001663:	76 03                	jbe    c0001668 <dlcalloc+0x34>
c0001665:	51                   	push   ecx
c0001666:	eb 53                	jmp    c00016bb <dlcalloc+0x87>
c0001668:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000166e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001675:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000167c:	83 f8 13             	cmp    eax,0x13
c000167f:	76 46                	jbe    c00016c7 <dlcalloc+0x93>
c0001681:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001688:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000168f:	83 f8 1b             	cmp    eax,0x1b
c0001692:	76 33                	jbe    c00016c7 <dlcalloc+0x93>
c0001694:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000169b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00016a2:	83 f8 23             	cmp    eax,0x23
c00016a5:	76 20                	jbe    c00016c7 <dlcalloc+0x93>
c00016a7:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00016ae:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00016b5:	eb 10                	jmp    c00016c7 <dlcalloc+0x93>
c00016b7:	83 e8 08             	sub    eax,0x8
c00016ba:	52                   	push   edx
c00016bb:	50                   	push   eax
c00016bc:	6a 00                	push   0x0
c00016be:	53                   	push   ebx
c00016bf:	e8 00 f0 ff ff       	call   c00006c4 <memset>
c00016c4:	83 c4 10             	add    esp,0x10
c00016c7:	89 d8                	mov    eax,ebx
c00016c9:	83 c4 08             	add    esp,0x8
c00016cc:	5b                   	pop    ebx
c00016cd:	c3                   	ret    

c00016ce <dlcfree>:
c00016ce:	e9 a2 fa ff ff       	jmp    c0001175 <dlfree>

c00016d3 <dlindependent_calloc>:
c00016d3:	83 ec 1c             	sub    esp,0x1c
c00016d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016de:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00016e2:	6a 03                	push   0x3
c00016e4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00016e8:	50                   	push   eax
c00016e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00016ed:	e8 1e 00 00 00       	call   c0001710 <iALLOc>
c00016f2:	83 c4 2c             	add    esp,0x2c
c00016f5:	c3                   	ret    

c00016f6 <dlindependent_comalloc>:
c00016f6:	83 ec 0c             	sub    esp,0xc
c00016f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00016fd:	6a 00                	push   0x0
c00016ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0001703:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0001707:	e8 04 00 00 00       	call   c0001710 <iALLOc>
c000170c:	83 c4 1c             	add    esp,0x1c
c000170f:	c3                   	ret    

c0001710 <iALLOc>:
c0001710:	55                   	push   ebp
c0001711:	57                   	push   edi
c0001712:	56                   	push   esi
c0001713:	53                   	push   ebx
c0001714:	83 ec 2c             	sub    esp,0x2c
c0001717:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000171b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000171f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001723:	83 3d a0 0f 03 c0 00 	cmp    DWORD PTR ds:0xc0030fa0,0x0
c000172a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000172e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001732:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0001736:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000173a:	75 0b                	jne    c0001747 <iALLOc+0x37>
c000173c:	68 a0 0f 03 c0       	push   0xc0030fa0
c0001741:	e8 24 fb ff ff       	call   c000126a <malloc_consolidate>
c0001746:	5b                   	pop    ebx
c0001747:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000174c:	74 0b                	je     c0001759 <iALLOc+0x49>
c000174e:	31 d2                	xor    edx,edx
c0001750:	85 ed                	test   ebp,ebp
c0001752:	75 33                	jne    c0001787 <iALLOc+0x77>
c0001754:	e9 51 01 00 00       	jmp    c00018aa <iALLOc+0x19a>
c0001759:	85 ed                	test   ebp,ebp
c000175b:	75 14                	jne    c0001771 <iALLOc+0x61>
c000175d:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001765:	83 c4 2c             	add    esp,0x2c
c0001768:	5b                   	pop    ebx
c0001769:	5e                   	pop    esi
c000176a:	5f                   	pop    edi
c000176b:	5d                   	pop    ebp
c000176c:	e9 62 f6 ff ff       	jmp    c0000dd3 <dlmalloc>
c0001771:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001778:	ba 10 00 00 00       	mov    edx,0x10
c000177d:	83 f8 0f             	cmp    eax,0xf
c0001780:	76 05                	jbe    c0001787 <iALLOc+0x77>
c0001782:	83 e0 f8             	and    eax,0xfffffff8
c0001785:	89 c2                	mov    edx,eax
c0001787:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000178b:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001790:	75 07                	jne    c0001799 <iALLOc+0x89>
c0001792:	8d 3c a8             	lea    edi,[eax+ebp*4]
c0001795:	31 f6                	xor    esi,esi
c0001797:	eb 3b                	jmp    c00017d4 <iALLOc+0xc4>
c0001799:	8b 00                	mov    eax,DWORD PTR [eax]
c000179b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00017a3:	83 c0 0b             	add    eax,0xb
c00017a6:	83 f8 0f             	cmp    eax,0xf
c00017a9:	76 07                	jbe    c00017b2 <iALLOc+0xa2>
c00017ab:	83 e0 f8             	and    eax,0xfffffff8
c00017ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00017b2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00017b6:	0f af f5             	imul   esi,ebp
c00017b9:	eb 25                	jmp    c00017e0 <iALLOc+0xd0>
c00017bb:	8b 18                	mov    ebx,DWORD PTR [eax]
c00017bd:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00017c0:	bb 10 00 00 00       	mov    ebx,0x10
c00017c5:	83 f9 0f             	cmp    ecx,0xf
c00017c8:	76 05                	jbe    c00017cf <iALLOc+0xbf>
c00017ca:	83 e1 f8             	and    ecx,0xfffffff8
c00017cd:	89 cb                	mov    ebx,ecx
c00017cf:	01 de                	add    esi,ebx
c00017d1:	83 c0 04             	add    eax,0x4
c00017d4:	39 c7                	cmp    edi,eax
c00017d6:	75 e3                	jne    c00017bb <iALLOc+0xab>
c00017d8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00017e0:	83 ec 0c             	sub    esp,0xc
c00017e3:	8b 1d f4 12 03 c0    	mov    ebx,DWORD PTR ds:0xc00312f4
c00017e9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00017ed:	8d 44 16 f9          	lea    eax,[esi+edx*1-0x7]
c00017f1:	c7 05 f4 12 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00312f4,0x0
c00017fb:	50                   	push   eax
c00017fc:	e8 d2 f5 ff ff       	call   c0000dd3 <dlmalloc>
c0001801:	83 c4 10             	add    esp,0x10
c0001804:	89 1d f4 12 03 c0    	mov    DWORD PTR ds:0xc00312f4,ebx
c000180a:	85 c0                	test   eax,eax
c000180c:	0f 84 90 00 00 00    	je     c00018a2 <iALLOc+0x192>
c0001812:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001815:	8d 78 f8             	lea    edi,[eax-0x8]
c0001818:	83 e3 fc             	and    ebx,0xfffffffc
c000181b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000181f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001824:	74 14                	je     c000183a <iALLOc+0x12a>
c0001826:	51                   	push   ecx
c0001827:	89 d9                	mov    ecx,ebx
c0001829:	29 d1                	sub    ecx,edx
c000182b:	83 e9 04             	sub    ecx,0x4
c000182e:	51                   	push   ecx
c000182f:	6a 00                	push   0x0
c0001831:	50                   	push   eax
c0001832:	e8 8d ee ff ff       	call   c00006c4 <memset>
c0001837:	83 c4 10             	add    esp,0x10
c000183a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000183f:	75 14                	jne    c0001855 <iALLOc+0x145>
c0001841:	8d 04 37             	lea    eax,[edi+esi*1]
c0001844:	29 f3                	sub    ebx,esi
c0001846:	8d 50 08             	lea    edx,[eax+0x8]
c0001849:	83 cb 01             	or     ebx,0x1
c000184c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001850:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001853:	89 f3                	mov    ebx,esi
c0001855:	31 c0                	xor    eax,eax
c0001857:	4d                   	dec    ebp
c0001858:	8d 4f 08             	lea    ecx,[edi+0x8]
c000185b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000185f:	39 c5                	cmp    ebp,eax
c0001861:	89 0c 82             	mov    DWORD PTR [edx+eax*4],ecx
c0001864:	74 34                	je     c000189a <iALLOc+0x18a>
c0001866:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000186a:	85 c9                	test   ecx,ecx
c000186c:	75 1d                	jne    c000188b <iALLOc+0x17b>
c000186e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0001872:	b9 10 00 00 00       	mov    ecx,0x10
c0001877:	8b 14 82             	mov    edx,DWORD PTR [edx+eax*4]
c000187a:	8d 72 0b             	lea    esi,[edx+0xb]
c000187d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001881:	83 fe 0f             	cmp    esi,0xf
c0001884:	76 05                	jbe    c000188b <iALLOc+0x17b>
c0001886:	83 e6 f8             	and    esi,0xfffffff8
c0001889:	89 f1                	mov    ecx,esi
c000188b:	89 ce                	mov    esi,ecx
c000188d:	29 cb                	sub    ebx,ecx
c000188f:	83 ce 01             	or     esi,0x1
c0001892:	40                   	inc    eax
c0001893:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001896:	01 cf                	add    edi,ecx
c0001898:	eb be                	jmp    c0001858 <iALLOc+0x148>
c000189a:	83 cb 01             	or     ebx,0x1
c000189d:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00018a0:	eb 08                	jmp    c00018aa <iALLOc+0x19a>
c00018a2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00018aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018ae:	83 c4 2c             	add    esp,0x2c
c00018b1:	5b                   	pop    ebx
c00018b2:	5e                   	pop    esi
c00018b3:	5f                   	pop    edi
c00018b4:	5d                   	pop    ebp
c00018b5:	c3                   	ret    

c00018b6 <dlvalloc>:
c00018b6:	83 ec 0c             	sub    esp,0xc
c00018b9:	83 3d a0 0f 03 c0 00 	cmp    DWORD PTR ds:0xc0030fa0,0x0
c00018c0:	75 0b                	jne    c00018cd <dlvalloc+0x17>
c00018c2:	68 a0 0f 03 c0       	push   0xc0030fa0
c00018c7:	e8 9e f9 ff ff       	call   c000126a <malloc_consolidate>
c00018cc:	5a                   	pop    edx
c00018cd:	50                   	push   eax
c00018ce:	50                   	push   eax
c00018cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018d3:	ff 35 fc 12 03 c0    	push   DWORD PTR ds:0xc00312fc
c00018d9:	e8 33 fc ff ff       	call   c0001511 <dlmemalign>
c00018de:	83 c4 1c             	add    esp,0x1c
c00018e1:	c3                   	ret    

c00018e2 <dlpvalloc>:
c00018e2:	83 ec 0c             	sub    esp,0xc
c00018e5:	83 3d a0 0f 03 c0 00 	cmp    DWORD PTR ds:0xc0030fa0,0x0
c00018ec:	75 0b                	jne    c00018f9 <dlpvalloc+0x17>
c00018ee:	68 a0 0f 03 c0       	push   0xc0030fa0
c00018f3:	e8 72 f9 ff ff       	call   c000126a <malloc_consolidate>
c00018f8:	59                   	pop    ecx
c00018f9:	a1 fc 12 03 c0       	mov    eax,ds:0xc00312fc
c00018fe:	89 c1                	mov    ecx,eax
c0001900:	52                   	push   edx
c0001901:	f7 d9                	neg    ecx
c0001903:	52                   	push   edx
c0001904:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001908:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000190c:	21 ca                	and    edx,ecx
c000190e:	52                   	push   edx
c000190f:	50                   	push   eax
c0001910:	e8 fc fb ff ff       	call   c0001511 <dlmemalign>
c0001915:	83 c4 1c             	add    esp,0x1c
c0001918:	c3                   	ret    

c0001919 <dlmalloc_trim>:
c0001919:	68 a0 0f 03 c0       	push   0xc0030fa0
c000191e:	e8 47 f9 ff ff       	call   c000126a <malloc_consolidate>
c0001923:	58                   	pop    eax
c0001924:	31 c0                	xor    eax,eax
c0001926:	c3                   	ret    

c0001927 <dlmalloc_usable_size>:
c0001927:	53                   	push   ebx
c0001928:	31 c0                	xor    eax,eax
c000192a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000192e:	85 c9                	test   ecx,ecx
c0001930:	74 24                	je     c0001956 <dlmalloc_usable_size+0x2f>
c0001932:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001935:	f6 c2 02             	test   dl,0x2
c0001938:	74 08                	je     c0001942 <dlmalloc_usable_size+0x1b>
c000193a:	83 e2 fc             	and    edx,0xfffffffc
c000193d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001940:	eb 14                	jmp    c0001956 <dlmalloc_usable_size+0x2f>
c0001942:	89 d3                	mov    ebx,edx
c0001944:	31 c0                	xor    eax,eax
c0001946:	83 e3 fe             	and    ebx,0xfffffffe
c0001949:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000194e:	74 06                	je     c0001956 <dlmalloc_usable_size+0x2f>
c0001950:	83 e2 fc             	and    edx,0xfffffffc
c0001953:	8d 42 fc             	lea    eax,[edx-0x4]
c0001956:	5b                   	pop    ebx
c0001957:	c3                   	ret    

c0001958 <dlmallinfo>:
c0001958:	55                   	push   ebp
c0001959:	57                   	push   edi
c000195a:	56                   	push   esi
c000195b:	53                   	push   ebx
c000195c:	83 ec 08             	sub    esp,0x8
c000195f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001963:	83 3d cc 0f 03 c0 00 	cmp    DWORD PTR ds:0xc0030fcc,0x0
c000196a:	75 0b                	jne    c0001977 <dlmallinfo+0x1f>
c000196c:	68 a0 0f 03 c0       	push   0xc0030fa0
c0001971:	e8 f4 f8 ff ff       	call   c000126a <malloc_consolidate>
c0001976:	5e                   	pop    esi
c0001977:	a1 cc 0f 03 c0       	mov    eax,ds:0xc0030fcc
c000197c:	31 ed                	xor    ebp,ebp
c000197e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001981:	31 c9                	xor    ecx,ecx
c0001983:	83 e0 fc             	and    eax,0xfffffffc
c0001986:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000198a:	31 c0                	xor    eax,eax
c000198c:	8b 14 85 a4 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf05c]
c0001993:	85 d2                	test   edx,edx
c0001995:	74 0e                	je     c00019a5 <dlmallinfo+0x4d>
c0001997:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c000199a:	45                   	inc    ebp
c000199b:	83 e6 fc             	and    esi,0xfffffffc
c000199e:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019a1:	01 f1                	add    ecx,esi
c00019a3:	eb ee                	jmp    c0001993 <dlmallinfo+0x3b>
c00019a5:	40                   	inc    eax
c00019a6:	83 f8 0a             	cmp    eax,0xa
c00019a9:	75 e1                	jne    c000198c <dlmallinfo+0x34>
c00019ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019af:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019b6:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019b9:	b8 d4 0f 03 c0       	mov    eax,0xc0030fd4
c00019be:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019c1:	39 f0                	cmp    eax,esi
c00019c3:	74 10                	je     c00019d5 <dlmallinfo+0x7d>
c00019c5:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019c8:	ff 04 24             	inc    DWORD PTR [esp]
c00019cb:	83 e7 fc             	and    edi,0xfffffffc
c00019ce:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019d1:	01 fa                	add    edx,edi
c00019d3:	eb ec                	jmp    c00019c1 <dlmallinfo+0x69>
c00019d5:	83 c0 08             	add    eax,0x8
c00019d8:	3d cc 12 03 c0       	cmp    eax,0xc00312cc
c00019dd:	75 df                	jne    c00019be <dlmallinfo+0x66>
c00019df:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019e2:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019e5:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c00019e8:	a1 08 13 03 c0       	mov    eax,ds:0xc0031308
c00019ed:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00019f0:	89 03                	mov    DWORD PTR [ebx],eax
c00019f2:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00019f5:	8b 35 f0 12 03 c0    	mov    esi,DWORD PTR ds:0xc00312f0
c00019fb:	29 d0                	sub    eax,edx
c00019fd:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a00:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a03:	8b 35 04 13 03 c0    	mov    esi,DWORD PTR ds:0xc0031304
c0001a09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a0d:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a10:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a13:	8b 35 14 13 03 c0    	mov    esi,DWORD PTR ds:0xc0031314
c0001a19:	89 d8                	mov    eax,ebx
c0001a1b:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a1e:	83 c4 08             	add    esp,0x8
c0001a21:	5b                   	pop    ebx
c0001a22:	5e                   	pop    esi
c0001a23:	5f                   	pop    edi
c0001a24:	5d                   	pop    ebp
c0001a25:	c2 04 00             	ret    0x4

c0001a28 <dlmalloc_stats>:
c0001a28:	83 ec 30             	sub    esp,0x30
c0001a2b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a2f:	50                   	push   eax
c0001a30:	e8 23 ff ff ff       	call   c0001958 <dlmallinfo>
c0001a35:	83 c4 30             	add    esp,0x30
c0001a38:	c3                   	ret    

c0001a39 <dlmallopt>:
c0001a39:	56                   	push   esi
c0001a3a:	53                   	push   ebx
c0001a3b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a3f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a43:	68 a0 0f 03 c0       	push   0xc0030fa0
c0001a48:	e8 1d f8 ff ff       	call   c000126a <malloc_consolidate>
c0001a4d:	58                   	pop    eax
c0001a4e:	8d 46 04             	lea    eax,[esi+0x4]
c0001a51:	83 f8 05             	cmp    eax,0x5
c0001a54:	77 67                	ja     c0001abd <dlmallopt+0x84>
c0001a56:	ff 24 85 64 94 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6b9c]
c0001a5d:	83 fb 50             	cmp    ebx,0x50
c0001a60:	77 5b                	ja     c0001abd <dlmallopt+0x84>
c0001a62:	ba 08 00 00 00       	mov    edx,0x8
c0001a67:	85 db                	test   ebx,ebx
c0001a69:	74 12                	je     c0001a7d <dlmallopt+0x44>
c0001a6b:	83 c3 0b             	add    ebx,0xb
c0001a6e:	ba 10 00 00 00       	mov    edx,0x10
c0001a73:	83 fb 0f             	cmp    ebx,0xf
c0001a76:	76 05                	jbe    c0001a7d <dlmallopt+0x44>
c0001a78:	89 da                	mov    edx,ebx
c0001a7a:	83 e2 f8             	and    edx,0xfffffff8
c0001a7d:	a1 a0 0f 03 c0       	mov    eax,ds:0xc0030fa0
c0001a82:	83 e0 03             	and    eax,0x3
c0001a85:	09 d0                	or     eax,edx
c0001a87:	a3 a0 0f 03 c0       	mov    ds:0xc0030fa0,eax
c0001a8c:	eb 31                	jmp    c0001abf <dlmallopt+0x86>
c0001a8e:	89 1d e4 12 03 c0    	mov    DWORD PTR ds:0xc00312e4,ebx
c0001a94:	eb 06                	jmp    c0001a9c <dlmallopt+0x63>
c0001a96:	89 1d e8 12 03 c0    	mov    DWORD PTR ds:0xc00312e8,ebx
c0001a9c:	be 01 00 00 00       	mov    esi,0x1
c0001aa1:	eb 1c                	jmp    c0001abf <dlmallopt+0x86>
c0001aa3:	89 1d ec 12 03 c0    	mov    DWORD PTR ds:0xc00312ec,ebx
c0001aa9:	eb f1                	jmp    c0001a9c <dlmallopt+0x63>
c0001aab:	31 f6                	xor    esi,esi
c0001aad:	85 db                	test   ebx,ebx
c0001aaf:	75 0e                	jne    c0001abf <dlmallopt+0x86>
c0001ab1:	c7 05 f4 12 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00312f4,0x0
c0001abb:	eb df                	jmp    c0001a9c <dlmallopt+0x63>
c0001abd:	31 f6                	xor    esi,esi
c0001abf:	89 f0                	mov    eax,esi
c0001ac1:	5b                   	pop    ebx
c0001ac2:	5e                   	pop    esi
c0001ac3:	c3                   	ret    

c0001ac4 <disk_status>:
c0001ac4:	31 c0                	xor    eax,eax
c0001ac6:	c3                   	ret    

c0001ac7 <disk_initialize>:
c0001ac7:	31 c0                	xor    eax,eax
c0001ac9:	c3                   	ret    

c0001aca <disk_read>:
c0001aca:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001acf:	0f b6 04 85 60 49 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcb6a0]
c0001ad7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001adb:	e9 a6 ea 01 00       	jmp    c0020586 <fatWrapperReadDisk>

c0001ae0 <disk_write>:
c0001ae0:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ae5:	0f b6 04 85 60 49 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcb6a0]
c0001aed:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001af1:	e9 d7 ea 01 00       	jmp    c00205cd <fatWrapperWriteDisk>

c0001af6 <disk_ioctl>:
c0001af6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001afb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001aff:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b04:	0f b6 04 85 60 49 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcb6a0]
c0001b0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b10:	e9 ff ea 01 00       	jmp    c0020614 <fatWrapperIoctl>

c0001b15 <ld_word>:
c0001b15:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001b19:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0001b1d:	c1 e0 08             	shl    eax,0x8
c0001b20:	89 c2                	mov    edx,eax
c0001b22:	0f b6 01             	movzx  eax,BYTE PTR [ecx]
c0001b25:	09 d0                	or     eax,edx
c0001b27:	c3                   	ret    

c0001b28 <ld_dword>:
c0001b28:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0001b2c:	0f b7 42 02          	movzx  eax,WORD PTR [edx+0x2]
c0001b30:	c1 e0 08             	shl    eax,0x8
c0001b33:	89 c1                	mov    ecx,eax
c0001b35:	0f b6 42 01          	movzx  eax,BYTE PTR [edx+0x1]
c0001b39:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0001b3c:	09 c8                	or     eax,ecx
c0001b3e:	c1 e0 08             	shl    eax,0x8
c0001b41:	09 d0                	or     eax,edx
c0001b43:	c3                   	ret    

c0001b44 <ld_qword>:
c0001b44:	57                   	push   edi
c0001b45:	31 d2                	xor    edx,edx
c0001b47:	56                   	push   esi
c0001b48:	53                   	push   ebx
c0001b49:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001b4d:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001b50:	0f b6 59 03          	movzx  ebx,BYTE PTR [ecx+0x3]
c0001b54:	0f a4 c2 08          	shld   edx,eax,0x8
c0001b58:	c1 e0 08             	shl    eax,0x8
c0001b5b:	09 c3                	or     ebx,eax
c0001b5d:	89 d8                	mov    eax,ebx
c0001b5f:	0f b6 59 02          	movzx  ebx,BYTE PTR [ecx+0x2]
c0001b63:	0f a4 c2 08          	shld   edx,eax,0x8
c0001b67:	c1 e0 08             	shl    eax,0x8
c0001b6a:	09 c3                	or     ebx,eax
c0001b6c:	89 d8                	mov    eax,ebx
c0001b6e:	0f b6 59 01          	movzx  ebx,BYTE PTR [ecx+0x1]
c0001b72:	0f a4 c2 08          	shld   edx,eax,0x8
c0001b76:	0f b6 09             	movzx  ecx,BYTE PTR [ecx]
c0001b79:	c1 e0 08             	shl    eax,0x8
c0001b7c:	09 c3                	or     ebx,eax
c0001b7e:	89 d8                	mov    eax,ebx
c0001b80:	5b                   	pop    ebx
c0001b81:	0f a4 c2 08          	shld   edx,eax,0x8
c0001b85:	c1 e0 08             	shl    eax,0x8
c0001b88:	89 c6                	mov    esi,eax
c0001b8a:	89 c8                	mov    eax,ecx
c0001b8c:	09 f0                	or     eax,esi
c0001b8e:	5e                   	pop    esi
c0001b8f:	5f                   	pop    edi
c0001b90:	c3                   	ret    

c0001b91 <st_word>:
c0001b91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b95:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b99:	66 89 10             	mov    WORD PTR [eax],dx
c0001b9c:	c3                   	ret    

c0001b9d <st_dword>:
c0001b9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ba1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001ba5:	89 10                	mov    DWORD PTR [eax],edx
c0001ba7:	c3                   	ret    

c0001ba8 <st_qword>:
c0001ba8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001bac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001bb0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001bb4:	89 10                	mov    DWORD PTR [eax],edx
c0001bb6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001bb9:	c3                   	ret    

c0001bba <mem_cpy>:
c0001bba:	57                   	push   edi
c0001bbb:	56                   	push   esi
c0001bbc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0001bc0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001bc4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001bc8:	85 c0                	test   eax,eax
c0001bca:	74 07                	je     c0001bd3 <mem_cpy+0x19>
c0001bcc:	01 f8                	add    eax,edi
c0001bce:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001bcf:	39 f8                	cmp    eax,edi
c0001bd1:	75 fb                	jne    c0001bce <mem_cpy+0x14>
c0001bd3:	5e                   	pop    esi
c0001bd4:	5f                   	pop    edi
c0001bd5:	c3                   	ret    

c0001bd6 <mem_set>:
c0001bd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001bda:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001bde:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001be2:	01 c2                	add    edx,eax
c0001be4:	40                   	inc    eax
c0001be5:	88 48 ff             	mov    BYTE PTR [eax-0x1],cl
c0001be8:	39 d0                	cmp    eax,edx
c0001bea:	75 f8                	jne    c0001be4 <mem_set+0xe>
c0001bec:	c3                   	ret    

c0001bed <mem_cmp>:
c0001bed:	53                   	push   ebx
c0001bee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001bf2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001bf6:	42                   	inc    edx
c0001bf7:	41                   	inc    ecx
c0001bf8:	0f b6 42 ff          	movzx  eax,BYTE PTR [edx-0x1]
c0001bfc:	0f b6 59 ff          	movzx  ebx,BYTE PTR [ecx-0x1]
c0001c00:	29 d8                	sub    eax,ebx
c0001c02:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001c06:	29 d3                	sub    ebx,edx
c0001c08:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0001c0c:	74 04                	je     c0001c12 <mem_cmp+0x25>
c0001c0e:	85 c0                	test   eax,eax
c0001c10:	74 e4                	je     c0001bf6 <mem_cmp+0x9>
c0001c12:	5b                   	pop    ebx
c0001c13:	c3                   	ret    

c0001c14 <chk_chr>:
c0001c14:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0001c18:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0001c1b:	0f be 02             	movsx  eax,BYTE PTR [edx]
c0001c1e:	74 09                	je     c0001c29 <chk_chr+0x15>
c0001c20:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0001c24:	74 03                	je     c0001c29 <chk_chr+0x15>
c0001c26:	42                   	inc    edx
c0001c27:	eb ef                	jmp    c0001c18 <chk_chr+0x4>
c0001c29:	c3                   	ret    

c0001c2a <dbc_1st>:
c0001c2a:	31 c0                	xor    eax,eax
c0001c2c:	c3                   	ret    

c0001c2d <dbc_2nd>:
c0001c2d:	31 c0                	xor    eax,eax
c0001c2f:	c3                   	ret    

c0001c30 <tchar2uni>:
c0001c30:	57                   	push   edi
c0001c31:	56                   	push   esi
c0001c32:	53                   	push   ebx
c0001c33:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001c37:	8b 1f                	mov    ebx,DWORD PTR [edi]
c0001c39:	8a 13                	mov    dl,BYTE PTR [ebx]
c0001c3b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c3e:	84 d2                	test   dl,dl
c0001c40:	78 0a                	js     c0001c4c <tchar2uni+0x1c>
c0001c42:	0f b6 c2             	movzx  eax,dl
c0001c45:	89 f3                	mov    ebx,esi
c0001c47:	e9 9c 00 00 00       	jmp    c0001ce8 <tchar2uni+0xb8>
c0001c4c:	88 d0                	mov    al,dl
c0001c4e:	83 e0 e0             	and    eax,0xffffffe0
c0001c51:	3c c0                	cmp    al,0xc0
c0001c53:	75 0c                	jne    c0001c61 <tchar2uni+0x31>
c0001c55:	89 d0                	mov    eax,edx
c0001c57:	ba 01 00 00 00       	mov    edx,0x1
c0001c5c:	83 e0 1f             	and    eax,0x1f
c0001c5f:	eb 2e                	jmp    c0001c8f <tchar2uni+0x5f>
c0001c61:	88 d0                	mov    al,dl
c0001c63:	83 e0 f0             	and    eax,0xfffffff0
c0001c66:	3c e0                	cmp    al,0xe0
c0001c68:	75 0c                	jne    c0001c76 <tchar2uni+0x46>
c0001c6a:	89 d0                	mov    eax,edx
c0001c6c:	ba 02 00 00 00       	mov    edx,0x2
c0001c71:	83 e0 0f             	and    eax,0xf
c0001c74:	eb 19                	jmp    c0001c8f <tchar2uni+0x5f>
c0001c76:	88 d0                	mov    al,dl
c0001c78:	83 e0 f8             	and    eax,0xfffffff8
c0001c7b:	88 c1                	mov    cl,al
c0001c7d:	83 c8 ff             	or     eax,0xffffffff
c0001c80:	80 f9 f0             	cmp    cl,0xf0
c0001c83:	75 6a                	jne    c0001cef <tchar2uni+0xbf>
c0001c85:	89 d0                	mov    eax,edx
c0001c87:	ba 03 00 00 00       	mov    edx,0x3
c0001c8c:	83 e0 07             	and    eax,0x7
c0001c8f:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0001c93:	46                   	inc    esi
c0001c94:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c0001c97:	88 d1                	mov    cl,dl
c0001c99:	83 e1 c0             	and    ecx,0xffffffc0
c0001c9c:	80 f9 80             	cmp    cl,0x80
c0001c9f:	75 4b                	jne    c0001cec <tchar2uni+0xbc>
c0001ca1:	c1 e0 06             	shl    eax,0x6
c0001ca4:	83 e2 3f             	and    edx,0x3f
c0001ca7:	09 d0                	or     eax,edx
c0001ca9:	39 de                	cmp    esi,ebx
c0001cab:	75 e6                	jne    c0001c93 <tchar2uni+0x63>
c0001cad:	8d 50 80             	lea    edx,[eax-0x80]
c0001cb0:	81 fa 7f ff 10 00    	cmp    edx,0x10ff7f
c0001cb6:	77 34                	ja     c0001cec <tchar2uni+0xbc>
c0001cb8:	8d 90 00 28 ff ff    	lea    edx,[eax-0xd800]
c0001cbe:	81 fa ff 07 00 00    	cmp    edx,0x7ff
c0001cc4:	76 26                	jbe    c0001cec <tchar2uni+0xbc>
c0001cc6:	3d ff ff 00 00       	cmp    eax,0xffff
c0001ccb:	76 1b                	jbe    c0001ce8 <tchar2uni+0xb8>
c0001ccd:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0001cd3:	25 ff 03 00 00       	and    eax,0x3ff
c0001cd8:	c1 e2 06             	shl    edx,0x6
c0001cdb:	81 e2 00 00 ff 03    	and    edx,0x3ff0000
c0001ce1:	09 d0                	or     eax,edx
c0001ce3:	0d 00 dc 00 d8       	or     eax,0xd800dc00
c0001ce8:	89 1f                	mov    DWORD PTR [edi],ebx
c0001cea:	eb 03                	jmp    c0001cef <tchar2uni+0xbf>
c0001cec:	83 c8 ff             	or     eax,0xffffffff
c0001cef:	5b                   	pop    ebx
c0001cf0:	5e                   	pop    esi
c0001cf1:	5f                   	pop    edi
c0001cf2:	c3                   	ret    

c0001cf3 <put_utf>:
c0001cf3:	53                   	push   ebx
c0001cf4:	31 c0                	xor    eax,eax
c0001cf6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001cfa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001cfe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001d02:	83 fa 7f             	cmp    edx,0x7f
c0001d05:	77 11                	ja     c0001d18 <put_utf+0x25>
c0001d07:	85 db                	test   ebx,ebx
c0001d09:	0f 84 e5 00 00 00    	je     c0001df4 <put_utf+0x101>
c0001d0f:	88 11                	mov    BYTE PTR [ecx],dl
c0001d11:	b0 01                	mov    al,0x1
c0001d13:	e9 dc 00 00 00       	jmp    c0001df4 <put_utf+0x101>
c0001d18:	81 fa ff 07 00 00    	cmp    edx,0x7ff
c0001d1e:	77 23                	ja     c0001d43 <put_utf+0x50>
c0001d20:	83 fb 01             	cmp    ebx,0x1
c0001d23:	0f 86 cb 00 00 00    	jbe    c0001df4 <put_utf+0x101>
c0001d29:	89 d0                	mov    eax,edx
c0001d2b:	83 e2 3f             	and    edx,0x3f
c0001d2e:	c1 e8 06             	shr    eax,0x6
c0001d31:	83 ca 80             	or     edx,0xffffff80
c0001d34:	83 c8 c0             	or     eax,0xffffffc0
c0001d37:	88 51 01             	mov    BYTE PTR [ecx+0x1],dl
c0001d3a:	88 01                	mov    BYTE PTR [ecx],al
c0001d3c:	b0 02                	mov    al,0x2
c0001d3e:	e9 b1 00 00 00       	jmp    c0001df4 <put_utf+0x101>
c0001d43:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d49:	77 40                	ja     c0001d8b <put_utf+0x98>
c0001d4b:	83 fb 02             	cmp    ebx,0x2
c0001d4e:	0f 86 a0 00 00 00    	jbe    c0001df4 <put_utf+0x101>
c0001d54:	8d 9a 00 28 ff ff    	lea    ebx,[edx-0xd800]
c0001d5a:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d60:	0f 86 8e 00 00 00    	jbe    c0001df4 <put_utf+0x101>
c0001d66:	89 d0                	mov    eax,edx
c0001d68:	c1 e8 0c             	shr    eax,0xc
c0001d6b:	83 c8 e0             	or     eax,0xffffffe0
c0001d6e:	88 01                	mov    BYTE PTR [ecx],al
c0001d70:	89 d0                	mov    eax,edx
c0001d72:	83 e2 3f             	and    edx,0x3f
c0001d75:	c1 e8 06             	shr    eax,0x6
c0001d78:	83 ca 80             	or     edx,0xffffff80
c0001d7b:	83 e0 3f             	and    eax,0x3f
c0001d7e:	88 51 02             	mov    BYTE PTR [ecx+0x2],dl
c0001d81:	83 c8 80             	or     eax,0xffffff80
c0001d84:	88 41 01             	mov    BYTE PTR [ecx+0x1],al
c0001d87:	b0 03                	mov    al,0x3
c0001d89:	eb 69                	jmp    c0001df4 <put_utf+0x101>
c0001d8b:	83 fb 03             	cmp    ebx,0x3
c0001d8e:	76 64                	jbe    c0001df4 <put_utf+0x101>
c0001d90:	89 d3                	mov    ebx,edx
c0001d92:	0f b7 c2             	movzx  eax,dx
c0001d95:	66 31 db             	xor    bx,bx
c0001d98:	8d 90 00 24 ff ff    	lea    edx,[eax-0xdc00]
c0001d9e:	81 c3 00 00 00 28    	add    ebx,0x28000000
c0001da4:	c1 eb 06             	shr    ebx,0x6
c0001da7:	81 fa ff 03 00 00    	cmp    edx,0x3ff
c0001dad:	77 43                	ja     c0001df2 <put_utf+0xff>
c0001daf:	81 fb ff ff 0f 00    	cmp    ebx,0xfffff
c0001db5:	77 3b                	ja     c0001df2 <put_utf+0xff>
c0001db7:	09 da                	or     edx,ebx
c0001db9:	81 c2 00 00 01 00    	add    edx,0x10000
c0001dbf:	89 d0                	mov    eax,edx
c0001dc1:	c1 e8 12             	shr    eax,0x12
c0001dc4:	83 c8 f0             	or     eax,0xfffffff0
c0001dc7:	88 01                	mov    BYTE PTR [ecx],al
c0001dc9:	89 d0                	mov    eax,edx
c0001dcb:	c1 e8 0c             	shr    eax,0xc
c0001dce:	83 e0 3f             	and    eax,0x3f
c0001dd1:	83 c8 80             	or     eax,0xffffff80
c0001dd4:	88 41 01             	mov    BYTE PTR [ecx+0x1],al
c0001dd7:	89 d0                	mov    eax,edx
c0001dd9:	83 e2 3f             	and    edx,0x3f
c0001ddc:	c1 e8 06             	shr    eax,0x6
c0001ddf:	83 ca 80             	or     edx,0xffffff80
c0001de2:	83 e0 3f             	and    eax,0x3f
c0001de5:	88 51 03             	mov    BYTE PTR [ecx+0x3],dl
c0001de8:	83 c8 80             	or     eax,0xffffff80
c0001deb:	88 41 02             	mov    BYTE PTR [ecx+0x2],al
c0001dee:	b0 04                	mov    al,0x4
c0001df0:	eb 02                	jmp    c0001df4 <put_utf+0x101>
c0001df2:	31 c0                	xor    eax,eax
c0001df4:	5b                   	pop    ebx
c0001df5:	c3                   	ret    

c0001df6 <sync_window>:
c0001df6:	55                   	push   ebp
c0001df7:	57                   	push   edi
c0001df8:	56                   	push   esi
c0001df9:	53                   	push   ebx
c0001dfa:	83 ec 1c             	sub    esp,0x1c
c0001dfd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001e01:	80 7b 03 00          	cmp    BYTE PTR [ebx+0x3],0x0
c0001e05:	74 73                	je     c0001e7a <sync_window+0x84>
c0001e07:	83 ec 0c             	sub    esp,0xc
c0001e0a:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0001e0d:	6a 01                	push   0x1
c0001e0f:	ff 73 50             	push   DWORD PTR [ebx+0x50]
c0001e12:	ff 73 4c             	push   DWORD PTR [ebx+0x4c]
c0001e15:	55                   	push   ebp
c0001e16:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0001e1a:	50                   	push   eax
c0001e1b:	e8 c0 fc ff ff       	call   c0001ae0 <disk_write>
c0001e20:	83 c4 20             	add    esp,0x20
c0001e23:	ba 01 00 00 00       	mov    edx,0x1
c0001e28:	85 c0                	test   eax,eax
c0001e2a:	75 50                	jne    c0001e7c <sync_window+0x86>
c0001e2c:	31 ff                	xor    edi,edi
c0001e2e:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0001e31:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0001e35:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0001e39:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0001e3c:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c0001e3f:	89 c6                	mov    esi,eax
c0001e41:	89 d7                	mov    edi,edx
c0001e43:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0001e46:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0001e4a:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0001e4d:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0001e51:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0001e55:	73 23                	jae    c0001e7a <sync_window+0x84>
c0001e57:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0001e5b:	75 1d                	jne    c0001e7a <sync_window+0x84>
c0001e5d:	83 ec 0c             	sub    esp,0xc
c0001e60:	6a 01                	push   0x1
c0001e62:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0001e66:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0001e6a:	52                   	push   edx
c0001e6b:	50                   	push   eax
c0001e6c:	55                   	push   ebp
c0001e6d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0001e71:	50                   	push   eax
c0001e72:	e8 69 fc ff ff       	call   c0001ae0 <disk_write>
c0001e77:	83 c4 20             	add    esp,0x20
c0001e7a:	31 d2                	xor    edx,edx
c0001e7c:	83 c4 1c             	add    esp,0x1c
c0001e7f:	89 d0                	mov    eax,edx
c0001e81:	5b                   	pop    ebx
c0001e82:	5e                   	pop    esi
c0001e83:	5f                   	pop    edi
c0001e84:	5d                   	pop    ebp
c0001e85:	c3                   	ret    

c0001e86 <move_window>:
c0001e86:	55                   	push   ebp
c0001e87:	57                   	push   edi
c0001e88:	56                   	push   esi
c0001e89:	53                   	push   ebx
c0001e8a:	83 ec 0c             	sub    esp,0xc
c0001e8d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e91:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0001e95:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0001e99:	39 7b 50             	cmp    DWORD PTR [ebx+0x50],edi
c0001e9c:	75 07                	jne    c0001ea5 <move_window+0x1f>
c0001e9e:	31 ed                	xor    ebp,ebp
c0001ea0:	39 73 4c             	cmp    DWORD PTR [ebx+0x4c],esi
c0001ea3:	74 3e                	je     c0001ee3 <move_window+0x5d>
c0001ea5:	83 ec 0c             	sub    esp,0xc
c0001ea8:	53                   	push   ebx
c0001ea9:	e8 48 ff ff ff       	call   c0001df6 <sync_window>
c0001eae:	83 c4 10             	add    esp,0x10
c0001eb1:	89 c5                	mov    ebp,eax
c0001eb3:	85 c0                	test   eax,eax
c0001eb5:	75 2c                	jne    c0001ee3 <move_window+0x5d>
c0001eb7:	83 ec 0c             	sub    esp,0xc
c0001eba:	8d 43 54             	lea    eax,[ebx+0x54]
c0001ebd:	6a 01                	push   0x1
c0001ebf:	57                   	push   edi
c0001ec0:	56                   	push   esi
c0001ec1:	50                   	push   eax
c0001ec2:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0001ec6:	50                   	push   eax
c0001ec7:	e8 fe fb ff ff       	call   c0001aca <disk_read>
c0001ecc:	83 c4 20             	add    esp,0x20
c0001ecf:	85 c0                	test   eax,eax
c0001ed1:	74 0a                	je     c0001edd <move_window+0x57>
c0001ed3:	83 ce ff             	or     esi,0xffffffff
c0001ed6:	bd 01 00 00 00       	mov    ebp,0x1
c0001edb:	89 f7                	mov    edi,esi
c0001edd:	89 73 4c             	mov    DWORD PTR [ebx+0x4c],esi
c0001ee0:	89 7b 50             	mov    DWORD PTR [ebx+0x50],edi
c0001ee3:	83 c4 0c             	add    esp,0xc
c0001ee6:	89 e8                	mov    eax,ebp
c0001ee8:	5b                   	pop    ebx
c0001ee9:	5e                   	pop    esi
c0001eea:	5f                   	pop    edi
c0001eeb:	5d                   	pop    ebp
c0001eec:	c3                   	ret    

c0001eed <sync_fs>:
c0001eed:	56                   	push   esi
c0001eee:	53                   	push   ebx
c0001eef:	83 ec 10             	sub    esp,0x10
c0001ef2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ef6:	53                   	push   ebx
c0001ef7:	e8 fa fe ff ff       	call   c0001df6 <sync_window>
c0001efc:	83 c4 10             	add    esp,0x10
c0001eff:	85 c0                	test   eax,eax
c0001f01:	0f 85 c0 00 00 00    	jne    c0001fc7 <sync_fs+0xda>
c0001f07:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0001f0a:	0f 85 9d 00 00 00    	jne    c0001fad <sync_fs+0xc0>
c0001f10:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0001f14:	0f 85 93 00 00 00    	jne    c0001fad <sync_fs+0xc0>
c0001f1a:	8d 73 54             	lea    esi,[ebx+0x54]
c0001f1d:	50                   	push   eax
c0001f1e:	68 00 02 00 00       	push   0x200
c0001f23:	6a 00                	push   0x0
c0001f25:	56                   	push   esi
c0001f26:	e8 ab fc ff ff       	call   c0001bd6 <mem_set>
c0001f2b:	58                   	pop    eax
c0001f2c:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0001f32:	5a                   	pop    edx
c0001f33:	68 55 aa 00 00       	push   0xaa55
c0001f38:	50                   	push   eax
c0001f39:	e8 53 fc ff ff       	call   c0001b91 <st_word>
c0001f3e:	59                   	pop    ecx
c0001f3f:	58                   	pop    eax
c0001f40:	68 52 52 61 41       	push   0x41615252
c0001f45:	56                   	push   esi
c0001f46:	e8 52 fc ff ff       	call   c0001b9d <st_dword>
c0001f4b:	58                   	pop    eax
c0001f4c:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0001f52:	5a                   	pop    edx
c0001f53:	68 72 72 41 61       	push   0x61417272
c0001f58:	50                   	push   eax
c0001f59:	e8 3f fc ff ff       	call   c0001b9d <st_dword>
c0001f5e:	59                   	pop    ecx
c0001f5f:	58                   	pop    eax
c0001f60:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0001f66:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0001f69:	50                   	push   eax
c0001f6a:	e8 2e fc ff ff       	call   c0001b9d <st_dword>
c0001f6f:	58                   	pop    eax
c0001f70:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0001f76:	5a                   	pop    edx
c0001f77:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0001f7a:	50                   	push   eax
c0001f7b:	e8 1d fc ff ff       	call   c0001b9d <st_dword>
c0001f80:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0001f83:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0001f86:	83 c0 01             	add    eax,0x1
c0001f89:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0001f8c:	83 d2 00             	adc    edx,0x0
c0001f8f:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c0001f92:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001f99:	52                   	push   edx
c0001f9a:	50                   	push   eax
c0001f9b:	56                   	push   esi
c0001f9c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0001fa0:	50                   	push   eax
c0001fa1:	e8 3a fb ff ff       	call   c0001ae0 <disk_write>
c0001fa6:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0001faa:	83 c4 20             	add    esp,0x20
c0001fad:	51                   	push   ecx
c0001fae:	6a 00                	push   0x0
c0001fb0:	6a 00                	push   0x0
c0001fb2:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0001fb6:	50                   	push   eax
c0001fb7:	e8 3a fb ff ff       	call   c0001af6 <disk_ioctl>
c0001fbc:	83 c4 10             	add    esp,0x10
c0001fbf:	85 c0                	test   eax,eax
c0001fc1:	0f 95 c0             	setne  al
c0001fc4:	0f b6 c0             	movzx  eax,al
c0001fc7:	5a                   	pop    edx
c0001fc8:	5b                   	pop    ebx
c0001fc9:	5e                   	pop    esi
c0001fca:	c3                   	ret    

c0001fcb <clst2sect>:
c0001fcb:	56                   	push   esi
c0001fcc:	53                   	push   ebx
c0001fcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0001fd1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0001fd5:	8d 48 fe             	lea    ecx,[eax-0x2]
c0001fd8:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001fdb:	8d 70 fe             	lea    esi,[eax-0x2]
c0001fde:	39 ce                	cmp    esi,ecx
c0001fe0:	76 0e                	jbe    c0001ff0 <clst2sect+0x25>
c0001fe2:	0f b7 43 0a          	movzx  eax,WORD PTR [ebx+0xa]
c0001fe6:	f7 e1                	mul    ecx
c0001fe8:	03 43 3c             	add    eax,DWORD PTR [ebx+0x3c]
c0001feb:	13 53 40             	adc    edx,DWORD PTR [ebx+0x40]
c0001fee:	eb 04                	jmp    c0001ff4 <clst2sect+0x29>
c0001ff0:	31 c0                	xor    eax,eax
c0001ff2:	31 d2                	xor    edx,edx
c0001ff4:	5b                   	pop    ebx
c0001ff5:	5e                   	pop    esi
c0001ff6:	c3                   	ret    

c0001ff7 <get_fat>:
c0001ff7:	55                   	push   ebp
c0001ff8:	b8 01 00 00 00       	mov    eax,0x1
c0001ffd:	57                   	push   edi
c0001ffe:	56                   	push   esi
c0001fff:	53                   	push   ebx
c0002000:	83 ec 1c             	sub    esp,0x1c
c0002003:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0002007:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000200b:	83 fd 01             	cmp    ebp,0x1
c000200e:	0f 86 ff 01 00 00    	jbe    c0002213 <get_fat+0x21c>
c0002014:	8b 32                	mov    esi,DWORD PTR [edx]
c0002016:	39 6e 1c             	cmp    DWORD PTR [esi+0x1c],ebp
c0002019:	0f 86 f4 01 00 00    	jbe    c0002213 <get_fat+0x21c>
c000201f:	8a 0e                	mov    cl,BYTE PTR [esi]
c0002021:	80 f9 02             	cmp    cl,0x2
c0002024:	0f 84 a4 00 00 00    	je     c00020ce <get_fat+0xd7>
c000202a:	77 09                	ja     c0002035 <get_fat+0x3e>
c000202c:	fe c9                	dec    cl
c000202e:	74 1c                	je     c000204c <get_fat+0x55>
c0002030:	e9 de 01 00 00       	jmp    c0002213 <get_fat+0x21c>
c0002035:	80 f9 03             	cmp    cl,0x3
c0002038:	0f 84 cd 00 00 00    	je     c000210b <get_fat+0x114>
c000203e:	80 f9 04             	cmp    cl,0x4
c0002041:	0f 84 08 01 00 00    	je     c000214f <get_fat+0x158>
c0002047:	e9 c7 01 00 00       	jmp    c0002213 <get_fat+0x21c>
c000204c:	31 d2                	xor    edx,edx
c000204e:	50                   	push   eax
c000204f:	89 eb                	mov    ebx,ebp
c0002051:	d1 eb                	shr    ebx,1
c0002053:	01 eb                	add    ebx,ebp
c0002055:	89 d8                	mov    eax,ebx
c0002057:	c1 e8 09             	shr    eax,0x9
c000205a:	03 46 2c             	add    eax,DWORD PTR [esi+0x2c]
c000205d:	13 56 30             	adc    edx,DWORD PTR [esi+0x30]
c0002060:	52                   	push   edx
c0002061:	50                   	push   eax
c0002062:	56                   	push   esi
c0002063:	e8 1e fe ff ff       	call   c0001e86 <move_window>
c0002068:	83 c4 10             	add    esp,0x10
c000206b:	85 c0                	test   eax,eax
c000206d:	74 08                	je     c0002077 <get_fat+0x80>
c000206f:	83 c8 ff             	or     eax,0xffffffff
c0002072:	e9 9c 01 00 00       	jmp    c0002213 <get_fat+0x21c>
c0002077:	8d 7b 01             	lea    edi,[ebx+0x1]
c000207a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002080:	31 d2                	xor    edx,edx
c0002082:	8a 5c 1e 54          	mov    bl,BYTE PTR [esi+ebx*1+0x54]
c0002086:	50                   	push   eax
c0002087:	89 f8                	mov    eax,edi
c0002089:	c1 e8 09             	shr    eax,0x9
c000208c:	03 46 2c             	add    eax,DWORD PTR [esi+0x2c]
c000208f:	13 56 30             	adc    edx,DWORD PTR [esi+0x30]
c0002092:	52                   	push   edx
c0002093:	50                   	push   eax
c0002094:	56                   	push   esi
c0002095:	e8 ec fd ff ff       	call   c0001e86 <move_window>
c000209a:	83 c4 10             	add    esp,0x10
c000209d:	85 c0                	test   eax,eax
c000209f:	75 ce                	jne    c000206f <get_fat+0x78>
c00020a1:	0f b6 c3             	movzx  eax,bl
c00020a4:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00020aa:	0f b6 5c 3e 54       	movzx  ebx,BYTE PTR [esi+edi*1+0x54]
c00020af:	c1 e3 08             	shl    ebx,0x8
c00020b2:	09 c3                	or     ebx,eax
c00020b4:	89 d8                	mov    eax,ebx
c00020b6:	25 ff 0f 00 00       	and    eax,0xfff
c00020bb:	83 e5 01             	and    ebp,0x1
c00020be:	0f 84 4f 01 00 00    	je     c0002213 <get_fat+0x21c>
c00020c4:	89 d8                	mov    eax,ebx
c00020c6:	c1 e8 04             	shr    eax,0x4
c00020c9:	e9 45 01 00 00       	jmp    c0002213 <get_fat+0x21c>
c00020ce:	31 d2                	xor    edx,edx
c00020d0:	89 e8                	mov    eax,ebp
c00020d2:	51                   	push   ecx
c00020d3:	c1 e8 08             	shr    eax,0x8
c00020d6:	03 46 2c             	add    eax,DWORD PTR [esi+0x2c]
c00020d9:	13 56 30             	adc    edx,DWORD PTR [esi+0x30]
c00020dc:	52                   	push   edx
c00020dd:	50                   	push   eax
c00020de:	56                   	push   esi
c00020df:	e8 a2 fd ff ff       	call   c0001e86 <move_window>
c00020e4:	83 c4 10             	add    esp,0x10
c00020e7:	85 c0                	test   eax,eax
c00020e9:	75 84                	jne    c000206f <get_fat+0x78>
c00020eb:	83 ec 0c             	sub    esp,0xc
c00020ee:	01 ed                	add    ebp,ebp
c00020f0:	81 e5 fe 01 00 00    	and    ebp,0x1fe
c00020f6:	8d 44 2e 54          	lea    eax,[esi+ebp*1+0x54]
c00020fa:	50                   	push   eax
c00020fb:	e8 15 fa ff ff       	call   c0001b15 <ld_word>
c0002100:	83 c4 10             	add    esp,0x10
c0002103:	0f b7 c0             	movzx  eax,ax
c0002106:	e9 08 01 00 00       	jmp    c0002213 <get_fat+0x21c>
c000210b:	89 e8                	mov    eax,ebp
c000210d:	52                   	push   edx
c000210e:	c1 e8 07             	shr    eax,0x7
c0002111:	31 d2                	xor    edx,edx
c0002113:	03 46 2c             	add    eax,DWORD PTR [esi+0x2c]
c0002116:	13 56 30             	adc    edx,DWORD PTR [esi+0x30]
c0002119:	52                   	push   edx
c000211a:	50                   	push   eax
c000211b:	56                   	push   esi
c000211c:	e8 65 fd ff ff       	call   c0001e86 <move_window>
c0002121:	83 c4 10             	add    esp,0x10
c0002124:	85 c0                	test   eax,eax
c0002126:	0f 85 43 ff ff ff    	jne    c000206f <get_fat+0x78>
c000212c:	83 ec 0c             	sub    esp,0xc
c000212f:	c1 e5 02             	shl    ebp,0x2
c0002132:	81 e5 fc 01 00 00    	and    ebp,0x1fc
c0002138:	8d 44 2e 54          	lea    eax,[esi+ebp*1+0x54]
c000213c:	50                   	push   eax
c000213d:	e8 e6 f9 ff ff       	call   c0001b28 <ld_dword>
c0002142:	83 c4 10             	add    esp,0x10
c0002145:	25 ff ff ff 0f       	and    eax,0xfffffff
c000214a:	e9 c4 00 00 00       	jmp    c0002213 <get_fat+0x21c>
c000214f:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0002152:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c0002155:	89 d8                	mov    eax,ebx
c0002157:	09 c8                	or     eax,ecx
c0002159:	74 06                	je     c0002161 <get_fat+0x16a>
c000215b:	83 7a 08 00          	cmp    DWORD PTR [edx+0x8],0x0
c000215f:	75 0f                	jne    c0002170 <get_fat+0x179>
c0002161:	b8 01 00 00 00       	mov    eax,0x1
c0002166:	80 7a 07 00          	cmp    BYTE PTR [edx+0x7],0x0
c000216a:	0f 85 a3 00 00 00    	jne    c0002213 <get_fat+0x21c>
c0002170:	66 8b 46 0a          	mov    ax,WORD PTR [esi+0xa]
c0002174:	89 ef                	mov    edi,ebp
c0002176:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000217b:	2b 7a 08             	sub    edi,DWORD PTR [edx+0x8]
c000217e:	8a 42 07             	mov    al,BYTE PTR [edx+0x7]
c0002181:	3c 02                	cmp    al,0x2
c0002183:	75 3b                	jne    c00021c0 <get_fat+0x1c9>
c0002185:	89 c8                	mov    eax,ecx
c0002187:	89 da                	mov    edx,ebx
c0002189:	83 c0 ff             	add    eax,0xffffffff
c000218c:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002191:	83 d2 ff             	adc    edx,0xffffffff
c0002194:	31 db                	xor    ebx,ebx
c0002196:	0f ac d0 09          	shrd   eax,edx,0x9
c000219a:	53                   	push   ebx
c000219b:	c1 ea 09             	shr    edx,0x9
c000219e:	51                   	push   ecx
c000219f:	52                   	push   edx
c00021a0:	50                   	push   eax
c00021a1:	e8 36 49 02 00       	call   c0026adc <__udivdi3>
c00021a6:	83 c4 10             	add    esp,0x10
c00021a9:	89 c2                	mov    edx,eax
c00021ab:	b8 01 00 00 00       	mov    eax,0x1
c00021b0:	39 d7                	cmp    edi,edx
c00021b2:	77 5f                	ja     c0002213 <get_fat+0x21c>
c00021b4:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00021b9:	74 58                	je     c0002213 <get_fat+0x21c>
c00021bb:	8d 45 01             	lea    eax,[ebp+0x1]
c00021be:	eb 53                	jmp    c0002213 <get_fat+0x21c>
c00021c0:	3c 03                	cmp    al,0x3
c00021c2:	75 05                	jne    c00021c9 <get_fat+0x1d2>
c00021c4:	39 7a 14             	cmp    DWORD PTR [edx+0x14],edi
c00021c7:	77 f2                	ja     c00021bb <get_fat+0x1c4>
c00021c9:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00021ce:	83 7a 18 00          	cmp    DWORD PTR [edx+0x18],0x0
c00021d2:	75 3f                	jne    c0002213 <get_fat+0x21c>
c00021d4:	31 d2                	xor    edx,edx
c00021d6:	50                   	push   eax
c00021d7:	89 e8                	mov    eax,ebp
c00021d9:	c1 e8 07             	shr    eax,0x7
c00021dc:	03 46 2c             	add    eax,DWORD PTR [esi+0x2c]
c00021df:	13 56 30             	adc    edx,DWORD PTR [esi+0x30]
c00021e2:	52                   	push   edx
c00021e3:	50                   	push   eax
c00021e4:	56                   	push   esi
c00021e5:	e8 9c fc ff ff       	call   c0001e86 <move_window>
c00021ea:	83 c4 10             	add    esp,0x10
c00021ed:	85 c0                	test   eax,eax
c00021ef:	0f 85 7a fe ff ff    	jne    c000206f <get_fat+0x78>
c00021f5:	83 ec 0c             	sub    esp,0xc
c00021f8:	c1 e5 02             	shl    ebp,0x2
c00021fb:	81 e5 fc 01 00 00    	and    ebp,0x1fc
c0002201:	8d 44 2e 54          	lea    eax,[esi+ebp*1+0x54]
c0002205:	50                   	push   eax
c0002206:	e8 1d f9 ff ff       	call   c0001b28 <ld_dword>
c000220b:	83 c4 10             	add    esp,0x10
c000220e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002213:	83 c4 1c             	add    esp,0x1c
c0002216:	5b                   	pop    ebx
c0002217:	5e                   	pop    esi
c0002218:	5f                   	pop    edi
c0002219:	5d                   	pop    ebp
c000221a:	c3                   	ret    

c000221b <put_fat>:
c000221b:	55                   	push   ebp
c000221c:	57                   	push   edi
c000221d:	bf 02 00 00 00       	mov    edi,0x2
c0002222:	56                   	push   esi
c0002223:	53                   	push   ebx
c0002224:	83 ec 1c             	sub    esp,0x1c
c0002227:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000222b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000222f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0002233:	83 fb 01             	cmp    ebx,0x1
c0002236:	0f 86 7e 01 00 00    	jbe    c00023ba <put_fat+0x19f>
c000223c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000223f:	0f 86 75 01 00 00    	jbe    c00023ba <put_fat+0x19f>
c0002245:	8a 06                	mov    al,BYTE PTR [esi]
c0002247:	3c 02                	cmp    al,0x2
c0002249:	0f 84 d8 00 00 00    	je     c0002327 <put_fat+0x10c>
c000224f:	77 09                	ja     c000225a <put_fat+0x3f>
c0002251:	fe c8                	dec    al
c0002253:	74 17                	je     c000226c <put_fat+0x51>
c0002255:	e9 60 01 00 00       	jmp    c00023ba <put_fat+0x19f>
c000225a:	bf 02 00 00 00       	mov    edi,0x2
c000225f:	3c 04                	cmp    al,0x4
c0002261:	0f 86 f9 00 00 00    	jbe    c0002360 <put_fat+0x145>
c0002267:	e9 4e 01 00 00       	jmp    c00023ba <put_fat+0x19f>
c000226c:	31 d2                	xor    edx,edx
c000226e:	89 df                	mov    edi,ebx
c0002270:	d1 ef                	shr    edi,1
c0002272:	8d 04 1f             	lea    eax,[edi+ebx*1]
c0002275:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002279:	50                   	push   eax
c000227a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000227e:	c1 e8 09             	shr    eax,0x9
c0002281:	03 46 2c             	add    eax,DWORD PTR [esi+0x2c]
c0002284:	13 56 30             	adc    edx,DWORD PTR [esi+0x30]
c0002287:	52                   	push   edx
c0002288:	50                   	push   eax
c0002289:	56                   	push   esi
c000228a:	e8 f7 fb ff ff       	call   c0001e86 <move_window>
c000228f:	83 c4 10             	add    esp,0x10
c0002292:	89 c7                	mov    edi,eax
c0002294:	85 c0                	test   eax,eax
c0002296:	0f 85 1e 01 00 00    	jne    c00023ba <put_fat+0x19f>
c000229c:	8d 46 54             	lea    eax,[esi+0x54]
c000229f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00022a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00022a7:	89 c7                	mov    edi,eax
c00022a9:	8d 48 01             	lea    ecx,[eax+0x1]
c00022ac:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00022b2:	89 e8                	mov    eax,ebp
c00022b4:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00022b8:	83 e3 01             	and    ebx,0x1
c00022bb:	74 0c                	je     c00022c9 <put_fat+0xae>
c00022bd:	8a 17                	mov    dl,BYTE PTR [edi]
c00022bf:	89 e8                	mov    eax,ebp
c00022c1:	83 e2 0f             	and    edx,0xf
c00022c4:	c1 e0 04             	shl    eax,0x4
c00022c7:	09 d0                	or     eax,edx
c00022c9:	88 07                	mov    BYTE PTR [edi],al
c00022cb:	31 d2                	xor    edx,edx
c00022cd:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00022d1:	50                   	push   eax
c00022d2:	89 c8                	mov    eax,ecx
c00022d4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00022d8:	c1 e8 09             	shr    eax,0x9
c00022db:	03 46 2c             	add    eax,DWORD PTR [esi+0x2c]
c00022de:	13 56 30             	adc    edx,DWORD PTR [esi+0x30]
c00022e1:	52                   	push   edx
c00022e2:	50                   	push   eax
c00022e3:	56                   	push   esi
c00022e4:	e8 9d fb ff ff       	call   c0001e86 <move_window>
c00022e9:	83 c4 10             	add    esp,0x10
c00022ec:	89 c7                	mov    edi,eax
c00022ee:	85 c0                	test   eax,eax
c00022f0:	0f 85 c4 00 00 00    	jne    c00023ba <put_fat+0x19f>
c00022f6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00022fa:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002300:	03 4c 24 0c          	add    ecx,DWORD PTR [esp+0xc]
c0002304:	85 db                	test   ebx,ebx
c0002306:	74 07                	je     c000230f <put_fat+0xf4>
c0002308:	c1 ed 04             	shr    ebp,0x4
c000230b:	89 e8                	mov    eax,ebp
c000230d:	eb 0d                	jmp    c000231c <put_fat+0x101>
c000230f:	8a 01                	mov    al,BYTE PTR [ecx]
c0002311:	c1 ed 08             	shr    ebp,0x8
c0002314:	83 e0 f0             	and    eax,0xfffffff0
c0002317:	83 e5 0f             	and    ebp,0xf
c000231a:	09 e8                	or     eax,ebp
c000231c:	88 01                	mov    BYTE PTR [ecx],al
c000231e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002322:	e9 93 00 00 00       	jmp    c00023ba <put_fat+0x19f>
c0002327:	31 d2                	xor    edx,edx
c0002329:	57                   	push   edi
c000232a:	89 d8                	mov    eax,ebx
c000232c:	c1 e8 08             	shr    eax,0x8
c000232f:	03 46 2c             	add    eax,DWORD PTR [esi+0x2c]
c0002332:	13 56 30             	adc    edx,DWORD PTR [esi+0x30]
c0002335:	52                   	push   edx
c0002336:	50                   	push   eax
c0002337:	56                   	push   esi
c0002338:	e8 49 fb ff ff       	call   c0001e86 <move_window>
c000233d:	83 c4 10             	add    esp,0x10
c0002340:	89 c7                	mov    edi,eax
c0002342:	85 c0                	test   eax,eax
c0002344:	75 74                	jne    c00023ba <put_fat+0x19f>
c0002346:	0f b7 ed             	movzx  ebp,bp
c0002349:	51                   	push   ecx
c000234a:	01 db                	add    ebx,ebx
c000234c:	51                   	push   ecx
c000234d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002353:	55                   	push   ebp
c0002354:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002358:	50                   	push   eax
c0002359:	e8 33 f8 ff ff       	call   c0001b91 <st_word>
c000235e:	eb 53                	jmp    c00023b3 <put_fat+0x198>
c0002360:	89 d8                	mov    eax,ebx
c0002362:	52                   	push   edx
c0002363:	c1 e8 07             	shr    eax,0x7
c0002366:	31 d2                	xor    edx,edx
c0002368:	03 46 2c             	add    eax,DWORD PTR [esi+0x2c]
c000236b:	13 56 30             	adc    edx,DWORD PTR [esi+0x30]
c000236e:	52                   	push   edx
c000236f:	50                   	push   eax
c0002370:	56                   	push   esi
c0002371:	e8 10 fb ff ff       	call   c0001e86 <move_window>
c0002376:	83 c4 10             	add    esp,0x10
c0002379:	89 c7                	mov    edi,eax
c000237b:	85 c0                	test   eax,eax
c000237d:	75 3b                	jne    c00023ba <put_fat+0x19f>
c000237f:	c1 e3 02             	shl    ebx,0x2
c0002382:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002388:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000238b:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c000238f:	74 19                	je     c00023aa <put_fat+0x18f>
c0002391:	83 ec 0c             	sub    esp,0xc
c0002394:	81 e5 ff ff ff 0f    	and    ebp,0xfffffff
c000239a:	53                   	push   ebx
c000239b:	e8 88 f7 ff ff       	call   c0001b28 <ld_dword>
c00023a0:	83 c4 10             	add    esp,0x10
c00023a3:	25 00 00 00 f0       	and    eax,0xf0000000
c00023a8:	09 c5                	or     ebp,eax
c00023aa:	50                   	push   eax
c00023ab:	50                   	push   eax
c00023ac:	55                   	push   ebp
c00023ad:	53                   	push   ebx
c00023ae:	e8 ea f7 ff ff       	call   c0001b9d <st_dword>
c00023b3:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00023b7:	83 c4 10             	add    esp,0x10
c00023ba:	83 c4 1c             	add    esp,0x1c
c00023bd:	89 f8                	mov    eax,edi
c00023bf:	5b                   	pop    ebx
c00023c0:	5e                   	pop    esi
c00023c1:	5f                   	pop    edi
c00023c2:	5d                   	pop    ebp
c00023c3:	c3                   	ret    

c00023c4 <find_bitmap>:
c00023c4:	55                   	push   ebp
c00023c5:	57                   	push   edi
c00023c6:	56                   	push   esi
c00023c7:	53                   	push   ebx
c00023c8:	83 ec 1c             	sub    esp,0x1c
c00023cb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00023cf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00023d3:	8d 70 fe             	lea    esi,[eax-0x2]
c00023d6:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00023d9:	83 e8 02             	sub    eax,0x2
c00023dc:	39 f0                	cmp    eax,esi
c00023de:	77 02                	ja     c00023e2 <find_bitmap+0x1e>
c00023e0:	31 f6                	xor    esi,esi
c00023e2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023e6:	89 f3                	mov    ebx,esi
c00023e8:	31 ed                	xor    ebp,ebp
c00023ea:	31 d2                	xor    edx,edx
c00023ec:	50                   	push   eax
c00023ed:	89 d8                	mov    eax,ebx
c00023ef:	c1 e8 0c             	shr    eax,0xc
c00023f2:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c00023f5:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c00023f8:	52                   	push   edx
c00023f9:	50                   	push   eax
c00023fa:	57                   	push   edi
c00023fb:	e8 86 fa ff ff       	call   c0001e86 <move_window>
c0002400:	83 c4 10             	add    esp,0x10
c0002403:	85 c0                	test   eax,eax
c0002405:	75 6c                	jne    c0002473 <find_bitmap+0xaf>
c0002407:	89 da                	mov    edx,ebx
c0002409:	89 d9                	mov    ecx,ebx
c000240b:	c1 ea 03             	shr    edx,0x3
c000240e:	83 e1 07             	and    ecx,0x7
c0002411:	b8 01 00 00 00       	mov    eax,0x1
c0002416:	81 e2 ff 01 00 00    	and    edx,0x1ff
c000241c:	d3 e0                	shl    eax,cl
c000241e:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002421:	83 e9 02             	sub    ecx,0x2
c0002424:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002428:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c000242c:	43                   	inc    ebx
c000242d:	21 c1                	and    ecx,eax
c000242f:	d1 e0                	shl    eax,1
c0002431:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0002435:	77 09                	ja     c0002440 <find_bitmap+0x7c>
c0002437:	31 db                	xor    ebx,ebx
c0002439:	ba 00 02 00 00       	mov    edx,0x200
c000243e:	31 c0                	xor    eax,eax
c0002440:	84 c9                	test   cl,cl
c0002442:	75 10                	jne    c0002454 <find_bitmap+0x90>
c0002444:	45                   	inc    ebp
c0002445:	3b 6c 24 38          	cmp    ebp,DWORD PTR [esp+0x38]
c0002449:	75 0f                	jne    c000245a <find_bitmap+0x96>
c000244b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000244f:	83 c0 02             	add    eax,0x2
c0002452:	eb 26                	jmp    c000247a <find_bitmap+0xb6>
c0002454:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0002458:	31 ed                	xor    ebp,ebp
c000245a:	39 de                	cmp    esi,ebx
c000245c:	74 1a                	je     c0002478 <find_bitmap+0xb4>
c000245e:	84 c0                	test   al,al
c0002460:	75 c6                	jne    c0002428 <find_bitmap+0x64>
c0002462:	42                   	inc    edx
c0002463:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002469:	0f 87 7b ff ff ff    	ja     c00023ea <find_bitmap+0x26>
c000246f:	b0 01                	mov    al,0x1
c0002471:	eb b5                	jmp    c0002428 <find_bitmap+0x64>
c0002473:	83 c8 ff             	or     eax,0xffffffff
c0002476:	eb 02                	jmp    c000247a <find_bitmap+0xb6>
c0002478:	31 c0                	xor    eax,eax
c000247a:	83 c4 1c             	add    esp,0x1c
c000247d:	5b                   	pop    ebx
c000247e:	5e                   	pop    esi
c000247f:	5f                   	pop    edi
c0002480:	5d                   	pop    ebp
c0002481:	c3                   	ret    

c0002482 <change_bitmap>:
c0002482:	55                   	push   ebp
c0002483:	31 ed                	xor    ebp,ebp
c0002485:	57                   	push   edi
c0002486:	56                   	push   esi
c0002487:	53                   	push   ebx
c0002488:	bb 01 00 00 00       	mov    ebx,0x1
c000248d:	83 ec 1c             	sub    esp,0x1c
c0002490:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0002494:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0002498:	8d 48 fe             	lea    ecx,[eax-0x2]
c000249b:	88 d8                	mov    al,bl
c000249d:	89 cf                	mov    edi,ecx
c000249f:	89 ce                	mov    esi,ecx
c00024a1:	c1 ef 0c             	shr    edi,0xc
c00024a4:	03 7a 44             	add    edi,DWORD PTR [edx+0x44]
c00024a7:	13 6a 48             	adc    ebp,DWORD PTR [edx+0x48]
c00024aa:	c1 ee 03             	shr    esi,0x3
c00024ad:	83 e1 07             	and    ecx,0x7
c00024b0:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00024b6:	d3 e0                	shl    eax,cl
c00024b8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00024bc:	89 f9                	mov    ecx,edi
c00024be:	89 eb                	mov    ebx,ebp
c00024c0:	83 c1 01             	add    ecx,0x1
c00024c3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00024c7:	83 d3 00             	adc    ebx,0x0
c00024ca:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00024ce:	50                   	push   eax
c00024cf:	55                   	push   ebp
c00024d0:	57                   	push   edi
c00024d1:	52                   	push   edx
c00024d2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c00024d6:	e8 ab f9 ff ff       	call   c0001e86 <move_window>
c00024db:	83 c4 10             	add    esp,0x10
c00024de:	85 c0                	test   eax,eax
c00024e0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00024e4:	75 4b                	jne    c0002531 <change_bitmap+0xaf>
c00024e6:	31 db                	xor    ebx,ebx
c00024e8:	8a 4c 32 54          	mov    cl,BYTE PTR [edx+esi*1+0x54]
c00024ec:	84 4c 24 07          	test   BYTE PTR [esp+0x7],cl
c00024f0:	0f 95 c3             	setne  bl
c00024f3:	89 df                	mov    edi,ebx
c00024f5:	3b 7c 24 3c          	cmp    edi,DWORD PTR [esp+0x3c]
c00024f9:	74 3d                	je     c0002538 <change_bitmap+0xb6>
c00024fb:	32 4c 24 07          	xor    cl,BYTE PTR [esp+0x7]
c00024ff:	ff 4c 24 38          	dec    DWORD PTR [esp+0x38]
c0002503:	88 4c 32 54          	mov    BYTE PTR [edx+esi*1+0x54],cl
c0002507:	c6 42 03 01          	mov    BYTE PTR [edx+0x3],0x1
c000250b:	74 30                	je     c000253d <change_bitmap+0xbb>
c000250d:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002511:	75 d3                	jne    c00024e6 <change_bitmap+0x64>
c0002513:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002516:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c000251b:	31 f6                	xor    esi,esi
c000251d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002521:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002525:	81 f9 00 02 00 00    	cmp    ecx,0x200
c000252b:	74 8f                	je     c00024bc <change_bitmap+0x3a>
c000252d:	89 ce                	mov    esi,ecx
c000252f:	eb b5                	jmp    c00024e6 <change_bitmap+0x64>
c0002531:	b8 01 00 00 00       	mov    eax,0x1
c0002536:	eb 05                	jmp    c000253d <change_bitmap+0xbb>
c0002538:	b8 02 00 00 00       	mov    eax,0x2
c000253d:	83 c4 1c             	add    esp,0x1c
c0002540:	5b                   	pop    ebx
c0002541:	5e                   	pop    esi
c0002542:	5f                   	pop    edi
c0002543:	5d                   	pop    ebp
c0002544:	c3                   	ret    

c0002545 <fill_first_frag>:
c0002545:	57                   	push   edi
c0002546:	31 c0                	xor    eax,eax
c0002548:	56                   	push   esi
c0002549:	53                   	push   ebx
c000254a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000254e:	80 7b 07 03          	cmp    BYTE PTR [ebx+0x7],0x3
c0002552:	75 2a                	jne    c000257e <fill_first_frag+0x39>
c0002554:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0002557:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c000255a:	01 d6                	add    esi,edx
c000255c:	39 f2                	cmp    edx,esi
c000255e:	74 18                	je     c0002578 <fill_first_frag+0x33>
c0002560:	8d 7a 01             	lea    edi,[edx+0x1]
c0002563:	50                   	push   eax
c0002564:	57                   	push   edi
c0002565:	52                   	push   edx
c0002566:	ff 33                	push   DWORD PTR [ebx]
c0002568:	e8 ae fc ff ff       	call   c000221b <put_fat>
c000256d:	83 c4 10             	add    esp,0x10
c0002570:	89 fa                	mov    edx,edi
c0002572:	85 c0                	test   eax,eax
c0002574:	74 e6                	je     c000255c <fill_first_frag+0x17>
c0002576:	eb 06                	jmp    c000257e <fill_first_frag+0x39>
c0002578:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000257c:	31 c0                	xor    eax,eax
c000257e:	5b                   	pop    ebx
c000257f:	5e                   	pop    esi
c0002580:	5f                   	pop    edi
c0002581:	c3                   	ret    

c0002582 <fill_last_frag>:
c0002582:	56                   	push   esi
c0002583:	53                   	push   ebx
c0002584:	53                   	push   ebx
c0002585:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002589:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000258d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002590:	85 c0                	test   eax,eax
c0002592:	74 29                	je     c00025bd <fill_last_frag+0x3b>
c0002594:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0002598:	83 f8 01             	cmp    eax,0x1
c000259b:	76 05                	jbe    c00025a2 <fill_last_frag+0x20>
c000259d:	8d 56 02             	lea    edx,[esi+0x2]
c00025a0:	29 c2                	sub    edx,eax
c00025a2:	51                   	push   ecx
c00025a3:	52                   	push   edx
c00025a4:	8d 56 01             	lea    edx,[esi+0x1]
c00025a7:	29 c2                	sub    edx,eax
c00025a9:	52                   	push   edx
c00025aa:	ff 33                	push   DWORD PTR [ebx]
c00025ac:	e8 6a fc ff ff       	call   c000221b <put_fat>
c00025b1:	83 c4 10             	add    esp,0x10
c00025b4:	85 c0                	test   eax,eax
c00025b6:	75 05                	jne    c00025bd <fill_last_frag+0x3b>
c00025b8:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c00025bb:	eb d0                	jmp    c000258d <fill_last_frag+0xb>
c00025bd:	5a                   	pop    edx
c00025be:	5b                   	pop    ebx
c00025bf:	5e                   	pop    esi
c00025c0:	c3                   	ret    

c00025c1 <remove_chain>:
c00025c1:	55                   	push   ebp
c00025c2:	57                   	push   edi
c00025c3:	56                   	push   esi
c00025c4:	53                   	push   ebx
c00025c5:	83 ec 1c             	sub    esp,0x1c
c00025c8:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00025cc:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00025d0:	8b 1f                	mov    ebx,DWORD PTR [edi]
c00025d2:	83 fe 01             	cmp    esi,0x1
c00025d5:	77 0a                	ja     c00025e1 <remove_chain+0x20>
c00025d7:	b8 02 00 00 00       	mov    eax,0x2
c00025dc:	e9 40 01 00 00       	jmp    c0002721 <remove_chain+0x160>
c00025e1:	39 73 1c             	cmp    DWORD PTR [ebx+0x1c],esi
c00025e4:	76 f1                	jbe    c00025d7 <remove_chain+0x16>
c00025e6:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00025eb:	75 04                	jne    c00025f1 <remove_chain+0x30>
c00025ed:	89 f1                	mov    ecx,esi
c00025ef:	eb 60                	jmp    c0002651 <remove_chain+0x90>
c00025f1:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00025f4:	75 06                	jne    c00025fc <remove_chain+0x3b>
c00025f6:	80 7f 07 02          	cmp    BYTE PTR [edi+0x7],0x2
c00025fa:	74 f1                	je     c00025ed <remove_chain+0x2c>
c00025fc:	55                   	push   ebp
c00025fd:	6a ff                	push   0xffffffff
c00025ff:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0002603:	53                   	push   ebx
c0002604:	e8 12 fc ff ff       	call   c000221b <put_fat>
c0002609:	83 c4 10             	add    esp,0x10
c000260c:	85 c0                	test   eax,eax
c000260e:	74 dd                	je     c00025ed <remove_chain+0x2c>
c0002610:	e9 0c 01 00 00       	jmp    c0002721 <remove_chain+0x160>
c0002615:	83 f8 01             	cmp    eax,0x1
c0002618:	74 bd                	je     c00025d7 <remove_chain+0x16>
c000261a:	83 f8 ff             	cmp    eax,0xffffffff
c000261d:	0f 84 85 00 00 00    	je     c00026a8 <remove_chain+0xe7>
c0002623:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0002626:	0f 85 83 00 00 00    	jne    c00026af <remove_chain+0xee>
c000262c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000262f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002632:	83 ea 02             	sub    edx,0x2
c0002635:	39 d0                	cmp    eax,edx
c0002637:	73 08                	jae    c0002641 <remove_chain+0x80>
c0002639:	40                   	inc    eax
c000263a:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000263e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0002641:	46                   	inc    esi
c0002642:	39 ee                	cmp    esi,ebp
c0002644:	0f 85 84 00 00 00    	jne    c00026ce <remove_chain+0x10d>
c000264a:	89 ee                	mov    esi,ebp
c000264c:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c000264f:	76 1a                	jbe    c000266b <remove_chain+0xaa>
c0002651:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002655:	51                   	push   ecx
c0002656:	51                   	push   ecx
c0002657:	56                   	push   esi
c0002658:	57                   	push   edi
c0002659:	e8 99 f9 ff ff       	call   c0001ff7 <get_fat>
c000265e:	83 c4 10             	add    esp,0x10
c0002661:	89 c5                	mov    ebp,eax
c0002663:	85 c0                	test   eax,eax
c0002665:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002669:	75 aa                	jne    c0002615 <remove_chain+0x54>
c000266b:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000266e:	0f 85 ab 00 00 00    	jne    c000271f <remove_chain+0x15e>
c0002674:	eb 77                	jmp    c00026ed <remove_chain+0x12c>
c0002676:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0002679:	84 c0                	test   al,al
c000267b:	0f 85 84 00 00 00    	jne    c0002705 <remove_chain+0x144>
c0002681:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0002684:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0002688:	0f 84 8d 00 00 00    	je     c000271b <remove_chain+0x15a>
c000268e:	50                   	push   eax
c000268f:	50                   	push   eax
c0002690:	53                   	push   ebx
c0002691:	57                   	push   edi
c0002692:	e8 60 f9 ff ff       	call   c0001ff7 <get_fat>
c0002697:	83 c4 10             	add    esp,0x10
c000269a:	83 f8 01             	cmp    eax,0x1
c000269d:	0f 86 34 ff ff ff    	jbe    c00025d7 <remove_chain+0x16>
c00026a3:	83 f8 ff             	cmp    eax,0xffffffff
c00026a6:	75 52                	jne    c00026fa <remove_chain+0x139>
c00026a8:	b8 01 00 00 00       	mov    eax,0x1
c00026ad:	eb 72                	jmp    c0002721 <remove_chain+0x160>
c00026af:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026b3:	52                   	push   edx
c00026b4:	6a 00                	push   0x0
c00026b6:	56                   	push   esi
c00026b7:	53                   	push   ebx
c00026b8:	e8 5e fb ff ff       	call   c000221b <put_fat>
c00026bd:	83 c4 10             	add    esp,0x10
c00026c0:	85 c0                	test   eax,eax
c00026c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00026c6:	0f 84 60 ff ff ff    	je     c000262c <remove_chain+0x6b>
c00026cc:	eb 53                	jmp    c0002721 <remove_chain+0x160>
c00026ce:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00026d1:	75 13                	jne    c00026e6 <remove_chain+0x125>
c00026d3:	6a 00                	push   0x0
c00026d5:	29 ce                	sub    esi,ecx
c00026d7:	56                   	push   esi
c00026d8:	51                   	push   ecx
c00026d9:	53                   	push   ebx
c00026da:	e8 a3 fd ff ff       	call   c0002482 <change_bitmap>
c00026df:	83 c4 10             	add    esp,0x10
c00026e2:	85 c0                	test   eax,eax
c00026e4:	75 3b                	jne    c0002721 <remove_chain+0x160>
c00026e6:	89 e9                	mov    ecx,ebp
c00026e8:	e9 5d ff ff ff       	jmp    c000264a <remove_chain+0x89>
c00026ed:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00026f2:	75 82                	jne    c0002676 <remove_chain+0xb5>
c00026f4:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00026f8:	eb 25                	jmp    c000271f <remove_chain+0x15e>
c00026fa:	8d 53 01             	lea    edx,[ebx+0x1]
c00026fd:	89 c3                	mov    ebx,eax
c00026ff:	39 c2                	cmp    edx,eax
c0002701:	74 81                	je     c0002684 <remove_chain+0xc3>
c0002703:	eb 1a                	jmp    c000271f <remove_chain+0x15e>
c0002705:	3c 03                	cmp    al,0x3
c0002707:	75 16                	jne    c000271f <remove_chain+0x15e>
c0002709:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000270c:	3b 44 24 38          	cmp    eax,DWORD PTR [esp+0x38]
c0002710:	77 0d                	ja     c000271f <remove_chain+0x15e>
c0002712:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0002715:	3b 44 24 38          	cmp    eax,DWORD PTR [esp+0x38]
c0002719:	72 04                	jb     c000271f <remove_chain+0x15e>
c000271b:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c000271f:	31 c0                	xor    eax,eax
c0002721:	83 c4 1c             	add    esp,0x1c
c0002724:	5b                   	pop    ebx
c0002725:	5e                   	pop    esi
c0002726:	5f                   	pop    edi
c0002727:	5d                   	pop    ebp
c0002728:	c3                   	ret    

c0002729 <create_chain>:
c0002729:	55                   	push   ebp
c000272a:	57                   	push   edi
c000272b:	56                   	push   esi
c000272c:	53                   	push   ebx
c000272d:	83 ec 0c             	sub    esp,0xc
c0002730:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0002734:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0002739:	8b 75 00             	mov    esi,DWORD PTR [ebp+0x0]
c000273c:	75 0e                	jne    c000274c <create_chain+0x23>
c000273e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0002741:	85 ff                	test   edi,edi
c0002743:	74 3f                	je     c0002784 <create_chain+0x5b>
c0002745:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0002748:	77 3f                	ja     c0002789 <create_chain+0x60>
c000274a:	eb 38                	jmp    c0002784 <create_chain+0x5b>
c000274c:	50                   	push   eax
c000274d:	50                   	push   eax
c000274e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0002752:	55                   	push   ebp
c0002753:	e8 9f f8 ff ff       	call   c0001ff7 <get_fat>
c0002758:	83 c4 10             	add    esp,0x10
c000275b:	89 c3                	mov    ebx,eax
c000275d:	83 f8 01             	cmp    eax,0x1
c0002760:	77 0a                	ja     c000276c <create_chain+0x43>
c0002762:	bb 01 00 00 00       	mov    ebx,0x1
c0002767:	e9 be 01 00 00       	jmp    c000292a <create_chain+0x201>
c000276c:	83 f8 ff             	cmp    eax,0xffffffff
c000276f:	0f 84 62 01 00 00    	je     c00028d7 <create_chain+0x1ae>
c0002775:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0002778:	0f 87 ac 01 00 00    	ja     c000292a <create_chain+0x201>
c000277e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0002782:	eb 05                	jmp    c0002789 <create_chain+0x60>
c0002784:	bf 01 00 00 00       	mov    edi,0x1
c0002789:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000278d:	75 07                	jne    c0002796 <create_chain+0x6d>
c000278f:	31 db                	xor    ebx,ebx
c0002791:	e9 94 01 00 00       	jmp    c000292a <create_chain+0x201>
c0002796:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002799:	75 6b                	jne    c0002806 <create_chain+0xdd>
c000279b:	50                   	push   eax
c000279c:	6a 01                	push   0x1
c000279e:	57                   	push   edi
c000279f:	56                   	push   esi
c00027a0:	e8 1f fc ff ff       	call   c00023c4 <find_bitmap>
c00027a5:	83 c4 10             	add    esp,0x10
c00027a8:	89 c3                	mov    ebx,eax
c00027aa:	8d 40 ff             	lea    eax,[eax-0x1]
c00027ad:	83 f8 fd             	cmp    eax,0xfffffffd
c00027b0:	0f 87 74 01 00 00    	ja     c000292a <create_chain+0x201>
c00027b6:	6a 01                	push   0x1
c00027b8:	6a 01                	push   0x1
c00027ba:	53                   	push   ebx
c00027bb:	56                   	push   esi
c00027bc:	e8 c1 fc ff ff       	call   c0002482 <change_bitmap>
c00027c1:	83 c4 10             	add    esp,0x10
c00027c4:	83 f8 02             	cmp    eax,0x2
c00027c7:	74 99                	je     c0002762 <create_chain+0x39>
c00027c9:	83 f8 01             	cmp    eax,0x1
c00027cc:	0f 84 05 01 00 00    	je     c00028d7 <create_chain+0x1ae>
c00027d2:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00027d7:	75 09                	jne    c00027e2 <create_chain+0xb9>
c00027d9:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c00027dd:	e9 17 01 00 00       	jmp    c00028f9 <create_chain+0x1d0>
c00027e2:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c00027e6:	0f 85 f0 00 00 00    	jne    c00028dc <create_chain+0x1b3>
c00027ec:	8d 4f 01             	lea    ecx,[edi+0x1]
c00027ef:	39 d9                	cmp    ecx,ebx
c00027f1:	0f 84 02 01 00 00    	je     c00028f9 <create_chain+0x1d0>
c00027f7:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c00027fa:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c00027fe:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0002801:	e9 d6 00 00 00       	jmp    c00028dc <create_chain+0x1b3>
c0002806:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c000280a:	75 44                	jne    c0002850 <create_chain+0x127>
c000280c:	8d 5f 01             	lea    ebx,[edi+0x1]
c000280f:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0002812:	77 05                	ja     c0002819 <create_chain+0xf0>
c0002814:	bb 02 00 00 00       	mov    ebx,0x2
c0002819:	50                   	push   eax
c000281a:	50                   	push   eax
c000281b:	53                   	push   ebx
c000281c:	55                   	push   ebp
c000281d:	e8 d5 f7 ff ff       	call   c0001ff7 <get_fat>
c0002822:	83 c4 10             	add    esp,0x10
c0002825:	83 f8 01             	cmp    eax,0x1
c0002828:	0f 84 34 ff ff ff    	je     c0002762 <create_chain+0x39>
c000282e:	83 f8 ff             	cmp    eax,0xffffffff
c0002831:	0f 84 a0 00 00 00    	je     c00028d7 <create_chain+0x1ae>
c0002837:	85 c0                	test   eax,eax
c0002839:	74 11                	je     c000284c <create_chain+0x123>
c000283b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000283e:	83 f8 01             	cmp    eax,0x1
c0002841:	76 0d                	jbe    c0002850 <create_chain+0x127>
c0002843:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0002846:	76 08                	jbe    c0002850 <create_chain+0x127>
c0002848:	89 c7                	mov    edi,eax
c000284a:	eb 04                	jmp    c0002850 <create_chain+0x127>
c000284c:	85 db                	test   ebx,ebx
c000284e:	75 3b                	jne    c000288b <create_chain+0x162>
c0002850:	89 fb                	mov    ebx,edi
c0002852:	43                   	inc    ebx
c0002853:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0002856:	77 0e                	ja     c0002866 <create_chain+0x13d>
c0002858:	83 ff 01             	cmp    edi,0x1
c000285b:	0f 86 2e ff ff ff    	jbe    c000278f <create_chain+0x66>
c0002861:	bb 02 00 00 00       	mov    ebx,0x2
c0002866:	51                   	push   ecx
c0002867:	51                   	push   ecx
c0002868:	53                   	push   ebx
c0002869:	55                   	push   ebp
c000286a:	e8 88 f7 ff ff       	call   c0001ff7 <get_fat>
c000286f:	83 c4 10             	add    esp,0x10
c0002872:	85 c0                	test   eax,eax
c0002874:	74 15                	je     c000288b <create_chain+0x162>
c0002876:	83 f8 01             	cmp    eax,0x1
c0002879:	0f 84 e3 fe ff ff    	je     c0002762 <create_chain+0x39>
c000287f:	40                   	inc    eax
c0002880:	74 55                	je     c00028d7 <create_chain+0x1ae>
c0002882:	39 fb                	cmp    ebx,edi
c0002884:	75 cc                	jne    c0002852 <create_chain+0x129>
c0002886:	e9 04 ff ff ff       	jmp    c000278f <create_chain+0x66>
c000288b:	52                   	push   edx
c000288c:	6a ff                	push   0xffffffff
c000288e:	53                   	push   ebx
c000288f:	56                   	push   esi
c0002890:	e8 86 f9 ff ff       	call   c000221b <put_fat>
c0002895:	83 c4 10             	add    esp,0x10
c0002898:	85 c0                	test   eax,eax
c000289a:	75 34                	jne    c00028d0 <create_chain+0x1a7>
c000289c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00028a1:	74 13                	je     c00028b6 <create_chain+0x18d>
c00028a3:	50                   	push   eax
c00028a4:	53                   	push   ebx
c00028a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00028a9:	56                   	push   esi
c00028aa:	e8 6c f9 ff ff       	call   c000221b <put_fat>
c00028af:	83 c4 10             	add    esp,0x10
c00028b2:	85 c0                	test   eax,eax
c00028b4:	75 1a                	jne    c00028d0 <create_chain+0x1a7>
c00028b6:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00028b9:	8b 56 1c             	mov    edx,DWORD PTR [esi+0x1c]
c00028bc:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c00028bf:	83 ea 02             	sub    edx,0x2
c00028c2:	39 d0                	cmp    eax,edx
c00028c4:	77 04                	ja     c00028ca <create_chain+0x1a1>
c00028c6:	48                   	dec    eax
c00028c7:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00028ca:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00028ce:	eb 5a                	jmp    c000292a <create_chain+0x201>
c00028d0:	48                   	dec    eax
c00028d1:	0f 85 8b fe ff ff    	jne    c0002762 <create_chain+0x39>
c00028d7:	83 cb ff             	or     ebx,0xffffffff
c00028da:	eb 4e                	jmp    c000292a <create_chain+0x201>
c00028dc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00028e0:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00028e3:	8d 7a 01             	lea    edi,[edx+0x1]
c00028e6:	39 df                	cmp    edi,ebx
c00028e8:	75 19                	jne    c0002903 <create_chain+0x1da>
c00028ea:	bf 02 00 00 00       	mov    edi,0x2
c00028ef:	85 c9                	test   ecx,ecx
c00028f1:	74 03                	je     c00028f6 <create_chain+0x1cd>
c00028f3:	8d 79 01             	lea    edi,[ecx+0x1]
c00028f6:	89 7d 18             	mov    DWORD PTR [ebp+0x18],edi
c00028f9:	85 c0                	test   eax,eax
c00028fb:	0f 85 61 fe ff ff    	jne    c0002762 <create_chain+0x39>
c0002901:	eb b3                	jmp    c00028b6 <create_chain+0x18d>
c0002903:	85 c9                	test   ecx,ecx
c0002905:	75 07                	jne    c000290e <create_chain+0x1e5>
c0002907:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000290e:	50                   	push   eax
c000290f:	53                   	push   ebx
c0002910:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0002914:	55                   	push   ebp
c0002915:	e8 68 fc ff ff       	call   c0002582 <fill_last_frag>
c000291a:	83 c4 10             	add    esp,0x10
c000291d:	85 c0                	test   eax,eax
c000291f:	75 af                	jne    c00028d0 <create_chain+0x1a7>
c0002921:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0002928:	eb 8c                	jmp    c00028b6 <create_chain+0x18d>
c000292a:	83 c4 0c             	add    esp,0xc
c000292d:	89 d8                	mov    eax,ebx
c000292f:	5b                   	pop    ebx
c0002930:	5e                   	pop    esi
c0002931:	5f                   	pop    edi
c0002932:	5d                   	pop    ebp
c0002933:	c3                   	ret    

c0002934 <clmt_clust>:
c0002934:	57                   	push   edi
c0002935:	56                   	push   esi
c0002936:	53                   	push   ebx
c0002937:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000293b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000293f:	8b 41 4c             	mov    eax,DWORD PTR [ecx+0x4c]
c0002942:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0002946:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0002948:	89 fa                	mov    edx,edi
c000294a:	8d 58 04             	lea    ebx,[eax+0x4]
c000294d:	31 ff                	xor    edi,edi
c000294f:	89 f0                	mov    eax,esi
c0002951:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0002955:	0f ac d0 09          	shrd   eax,edx,0x9
c0002959:	57                   	push   edi
c000295a:	c1 ea 09             	shr    edx,0x9
c000295d:	56                   	push   esi
c000295e:	52                   	push   edx
c000295f:	50                   	push   eax
c0002960:	e8 77 41 02 00       	call   c0026adc <__udivdi3>
c0002965:	83 c4 10             	add    esp,0x10
c0002968:	8b 13                	mov    edx,DWORD PTR [ebx]
c000296a:	85 d2                	test   edx,edx
c000296c:	74 10                	je     c000297e <clmt_clust+0x4a>
c000296e:	39 d0                	cmp    eax,edx
c0002970:	72 07                	jb     c0002979 <clmt_clust+0x45>
c0002972:	29 d0                	sub    eax,edx
c0002974:	83 c3 08             	add    ebx,0x8
c0002977:	eb ef                	jmp    c0002968 <clmt_clust+0x34>
c0002979:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c000297c:	89 c2                	mov    edx,eax
c000297e:	5b                   	pop    ebx
c000297f:	89 d0                	mov    eax,edx
c0002981:	5e                   	pop    esi
c0002982:	5f                   	pop    edi
c0002983:	c3                   	ret    

c0002984 <dir_clear>:
c0002984:	55                   	push   ebp
c0002985:	57                   	push   edi
c0002986:	56                   	push   esi
c0002987:	53                   	push   ebx
c0002988:	83 ec 28             	sub    esp,0x28
c000298b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000298f:	53                   	push   ebx
c0002990:	e8 61 f4 ff ff       	call   c0001df6 <sync_window>
c0002995:	83 c4 10             	add    esp,0x10
c0002998:	ba 01 00 00 00       	mov    edx,0x1
c000299d:	85 c0                	test   eax,eax
c000299f:	0f 85 f9 00 00 00    	jne    c0002a9e <dir_clear+0x11a>
c00029a5:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00029a8:	52                   	push   edx
c00029a9:	52                   	push   edx
c00029aa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00029ae:	53                   	push   ebx
c00029af:	e8 17 f6 ff ff       	call   c0001fcb <clst2sect>
c00029b4:	83 c4 0c             	add    esp,0xc
c00029b7:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00029ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029be:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c2:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00029c5:	68 00 02 00 00       	push   0x200
c00029ca:	6a 00                	push   0x0
c00029cc:	55                   	push   ebp
c00029cd:	e8 04 f2 ff ff       	call   c0001bd6 <mem_set>
c00029d2:	0f b7 73 0a          	movzx  esi,WORD PTR [ebx+0xa]
c00029d6:	83 c4 10             	add    esp,0x10
c00029d9:	c1 e6 09             	shl    esi,0x9
c00029dc:	81 fe 00 80 00 00    	cmp    esi,0x8000
c00029e2:	76 1f                	jbe    c0002a03 <dir_clear+0x7f>
c00029e4:	be 00 80 00 00       	mov    esi,0x8000
c00029e9:	eb 18                	jmp    c0002a03 <dir_clear+0x7f>
c00029eb:	83 ec 0c             	sub    esp,0xc
c00029ee:	56                   	push   esi
c00029ef:	e8 af 61 00 00       	call   c0008ba3 <ff_memalloc>
c00029f4:	83 c4 10             	add    esp,0x10
c00029f7:	89 c7                	mov    edi,eax
c00029f9:	85 c0                	test   eax,eax
c00029fb:	0f 85 87 00 00 00    	jne    c0002a88 <dir_clear+0x104>
c0002a01:	d1 ee                	shr    esi,1
c0002a03:	81 fe 00 02 00 00    	cmp    esi,0x200
c0002a09:	77 e0                	ja     c00029eb <dir_clear+0x67>
c0002a0b:	31 f6                	xor    esi,esi
c0002a0d:	0f b7 43 0a          	movzx  eax,WORD PTR [ebx+0xa]
c0002a11:	39 f0                	cmp    eax,esi
c0002a13:	76 66                	jbe    c0002a7b <dir_clear+0xf7>
c0002a15:	83 ec 0c             	sub    esp,0xc
c0002a18:	6a 01                	push   0x1
c0002a1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002a1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002a22:	55                   	push   ebp
c0002a23:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002a27:	50                   	push   eax
c0002a28:	e8 b3 f0 ff ff       	call   c0001ae0 <disk_write>
c0002a2d:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0002a32:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0002a37:	83 c4 20             	add    esp,0x20
c0002a3a:	85 c0                	test   eax,eax
c0002a3c:	75 3d                	jne    c0002a7b <dir_clear+0xf7>
c0002a3e:	46                   	inc    esi
c0002a3f:	eb cc                	jmp    c0002a0d <dir_clear+0x89>
c0002a41:	83 ec 0c             	sub    esp,0xc
c0002a44:	31 d2                	xor    edx,edx
c0002a46:	55                   	push   ebp
c0002a47:	89 f0                	mov    eax,esi
c0002a49:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002a4d:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002a51:	52                   	push   edx
c0002a52:	50                   	push   eax
c0002a53:	57                   	push   edi
c0002a54:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002a58:	50                   	push   eax
c0002a59:	e8 82 f0 ff ff       	call   c0001ae0 <disk_write>
c0002a5e:	83 c4 20             	add    esp,0x20
c0002a61:	85 c0                	test   eax,eax
c0002a63:	75 0a                	jne    c0002a6f <dir_clear+0xeb>
c0002a65:	01 ee                	add    esi,ebp
c0002a67:	0f b7 43 0a          	movzx  eax,WORD PTR [ebx+0xa]
c0002a6b:	39 f0                	cmp    eax,esi
c0002a6d:	77 d2                	ja     c0002a41 <dir_clear+0xbd>
c0002a6f:	83 ec 0c             	sub    esp,0xc
c0002a72:	57                   	push   edi
c0002a73:	e8 41 61 00 00       	call   c0008bb9 <ff_memfree>
c0002a78:	83 c4 10             	add    esp,0x10
c0002a7b:	31 d2                	xor    edx,edx
c0002a7d:	0f b7 43 0a          	movzx  eax,WORD PTR [ebx+0xa]
c0002a81:	39 f0                	cmp    eax,esi
c0002a83:	0f 95 c2             	setne  dl
c0002a86:	eb 16                	jmp    c0002a9e <dir_clear+0x11a>
c0002a88:	50                   	push   eax
c0002a89:	56                   	push   esi
c0002a8a:	c1 ee 09             	shr    esi,0x9
c0002a8d:	6a 00                	push   0x0
c0002a8f:	89 f5                	mov    ebp,esi
c0002a91:	57                   	push   edi
c0002a92:	31 f6                	xor    esi,esi
c0002a94:	e8 3d f1 ff ff       	call   c0001bd6 <mem_set>
c0002a99:	83 c4 10             	add    esp,0x10
c0002a9c:	eb c9                	jmp    c0002a67 <dir_clear+0xe3>
c0002a9e:	83 c4 1c             	add    esp,0x1c
c0002aa1:	89 d0                	mov    eax,edx
c0002aa3:	5b                   	pop    ebx
c0002aa4:	5e                   	pop    esi
c0002aa5:	5f                   	pop    edi
c0002aa6:	5d                   	pop    ebp
c0002aa7:	c3                   	ret    

c0002aa8 <dir_sdi>:
c0002aa8:	55                   	push   ebp
c0002aa9:	31 c0                	xor    eax,eax
c0002aab:	57                   	push   edi
c0002aac:	56                   	push   esi
c0002aad:	53                   	push   ebx
c0002aae:	83 ec 1c             	sub    esp,0x1c
c0002ab1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0002ab5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0002ab9:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0002abb:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002abe:	0f 94 c0             	sete   al
c0002ac1:	48                   	dec    eax
c0002ac2:	25 00 00 20 f0       	and    eax,0xf0200000
c0002ac7:	05 00 00 00 10       	add    eax,0x10000000
c0002acc:	39 f0                	cmp    eax,esi
c0002ace:	77 0a                	ja     c0002ada <dir_sdi+0x32>
c0002ad0:	b8 02 00 00 00       	mov    eax,0x2
c0002ad5:	e9 cd 00 00 00       	jmp    c0002ba7 <dir_sdi+0xff>
c0002ada:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0002ae0:	75 ee                	jne    c0002ad0 <dir_sdi+0x28>
c0002ae2:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002ae5:	89 73 28             	mov    DWORD PTR [ebx+0x28],esi
c0002ae8:	85 c9                	test   ecx,ecx
c0002aea:	75 2d                	jne    c0002b19 <dir_sdi+0x71>
c0002aec:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002aef:	77 1b                	ja     c0002b0c <dir_sdi+0x64>
c0002af1:	89 f2                	mov    edx,esi
c0002af3:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002af7:	c1 ea 05             	shr    edx,0x5
c0002afa:	39 c2                	cmp    edx,eax
c0002afc:	73 d2                	jae    c0002ad0 <dir_sdi+0x28>
c0002afe:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002b01:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002b04:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002b07:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002b0a:	eb 53                	jmp    c0002b5f <dir_sdi+0xb7>
c0002b0c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002b0f:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002b13:	85 c0                	test   eax,eax
c0002b15:	74 da                	je     c0002af1 <dir_sdi+0x49>
c0002b17:	89 c1                	mov    ecx,eax
c0002b19:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002b1d:	c1 e5 09             	shl    ebp,0x9
c0002b20:	39 ee                	cmp    esi,ebp
c0002b22:	72 21                	jb     c0002b45 <dir_sdi+0x9d>
c0002b24:	52                   	push   edx
c0002b25:	52                   	push   edx
c0002b26:	51                   	push   ecx
c0002b27:	53                   	push   ebx
c0002b28:	e8 ca f4 ff ff       	call   c0001ff7 <get_fat>
c0002b2d:	83 c4 10             	add    esp,0x10
c0002b30:	89 c1                	mov    ecx,eax
c0002b32:	83 f8 ff             	cmp    eax,0xffffffff
c0002b35:	74 6b                	je     c0002ba2 <dir_sdi+0xfa>
c0002b37:	83 f8 01             	cmp    eax,0x1
c0002b3a:	76 94                	jbe    c0002ad0 <dir_sdi+0x28>
c0002b3c:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002b3f:	76 8f                	jbe    c0002ad0 <dir_sdi+0x28>
c0002b41:	29 ee                	sub    esi,ebp
c0002b43:	eb db                	jmp    c0002b20 <dir_sdi+0x78>
c0002b45:	50                   	push   eax
c0002b46:	50                   	push   eax
c0002b47:	51                   	push   ecx
c0002b48:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0002b4c:	57                   	push   edi
c0002b4d:	e8 79 f4 ff ff       	call   c0001fcb <clst2sect>
c0002b52:	83 c4 10             	add    esp,0x10
c0002b55:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002b58:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002b5b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002b5f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0002b62:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002b65:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0002b68:	89 d1                	mov    ecx,edx
c0002b6a:	09 c1                	or     ecx,eax
c0002b6c:	0f 84 5e ff ff ff    	je     c0002ad0 <dir_sdi+0x28>
c0002b72:	89 f1                	mov    ecx,esi
c0002b74:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002b7c:	c1 e9 09             	shr    ecx,0x9
c0002b7f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002b83:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b87:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b8b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002b8e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002b94:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002b97:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002b9b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0002b9e:	31 c0                	xor    eax,eax
c0002ba0:	eb 05                	jmp    c0002ba7 <dir_sdi+0xff>
c0002ba2:	b8 01 00 00 00       	mov    eax,0x1
c0002ba7:	83 c4 1c             	add    esp,0x1c
c0002baa:	5b                   	pop    ebx
c0002bab:	5e                   	pop    esi
c0002bac:	5f                   	pop    edi
c0002bad:	5d                   	pop    ebp
c0002bae:	c3                   	ret    

c0002baf <dir_next>:
c0002baf:	55                   	push   ebp
c0002bb0:	57                   	push   edi
c0002bb1:	56                   	push   esi
c0002bb2:	53                   	push   ebx
c0002bb3:	83 ec 1c             	sub    esp,0x1c
c0002bb6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0002bba:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0002bbd:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0002bbf:	8d 70 20             	lea    esi,[eax+0x20]
c0002bc2:	31 c0                	xor    eax,eax
c0002bc4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002bc7:	0f 94 c0             	sete   al
c0002bca:	48                   	dec    eax
c0002bcb:	25 00 00 20 f0       	and    eax,0xf0200000
c0002bd0:	05 00 00 00 10       	add    eax,0x10000000
c0002bd5:	39 f0                	cmp    eax,esi
c0002bd7:	77 0e                	ja     c0002be7 <dir_next+0x38>
c0002bd9:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0002be0:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0002be7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0002bea:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0002bed:	b8 04 00 00 00       	mov    eax,0x4
c0002bf2:	89 cd                	mov    ebp,ecx
c0002bf4:	09 d5                	or     ebp,edx
c0002bf6:	0f 84 e9 00 00 00    	je     c0002ce5 <dir_next+0x136>
c0002bfc:	89 f0                	mov    eax,esi
c0002bfe:	25 ff 01 00 00       	and    eax,0x1ff
c0002c03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c07:	0f 85 c8 00 00 00    	jne    c0002cd5 <dir_next+0x126>
c0002c0d:	83 c2 01             	add    edx,0x1
c0002c10:	83 d1 00             	adc    ecx,0x0
c0002c13:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0002c16:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0002c19:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0002c1c:	85 d2                	test   edx,edx
c0002c1e:	75 29                	jne    c0002c49 <dir_next+0x9a>
c0002c20:	89 f2                	mov    edx,esi
c0002c22:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002c26:	c1 ea 05             	shr    edx,0x5
c0002c29:	39 c2                	cmp    edx,eax
c0002c2b:	0f 82 a4 00 00 00    	jb     c0002cd5 <dir_next+0x126>
c0002c31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0002c38:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0002c3f:	b8 04 00 00 00       	mov    eax,0x4
c0002c44:	e9 9c 00 00 00       	jmp    c0002ce5 <dir_next+0x136>
c0002c49:	0f b7 47 0a          	movzx  eax,WORD PTR [edi+0xa]
c0002c4d:	89 f1                	mov    ecx,esi
c0002c4f:	48                   	dec    eax
c0002c50:	c1 e9 09             	shr    ecx,0x9
c0002c53:	85 c8                	test   eax,ecx
c0002c55:	75 7e                	jne    c0002cd5 <dir_next+0x126>
c0002c57:	55                   	push   ebp
c0002c58:	55                   	push   ebp
c0002c59:	52                   	push   edx
c0002c5a:	53                   	push   ebx
c0002c5b:	e8 97 f3 ff ff       	call   c0001ff7 <get_fat>
c0002c60:	83 c4 10             	add    esp,0x10
c0002c63:	89 c5                	mov    ebp,eax
c0002c65:	83 f8 01             	cmp    eax,0x1
c0002c68:	77 07                	ja     c0002c71 <dir_next+0xc2>
c0002c6a:	b8 02 00 00 00       	mov    eax,0x2
c0002c6f:	eb 74                	jmp    c0002ce5 <dir_next+0x136>
c0002c71:	83 f8 ff             	cmp    eax,0xffffffff
c0002c74:	75 07                	jne    c0002c7d <dir_next+0xce>
c0002c76:	b8 01 00 00 00       	mov    eax,0x1
c0002c7b:	eb 68                	jmp    c0002ce5 <dir_next+0x136>
c0002c7d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002c80:	77 3e                	ja     c0002cc0 <dir_next+0x111>
c0002c82:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0002c87:	74 a8                	je     c0002c31 <dir_next+0x82>
c0002c89:	51                   	push   ecx
c0002c8a:	51                   	push   ecx
c0002c8b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0002c8e:	53                   	push   ebx
c0002c8f:	e8 95 fa ff ff       	call   c0002729 <create_chain>
c0002c94:	83 c4 10             	add    esp,0x10
c0002c97:	89 c5                	mov    ebp,eax
c0002c99:	b8 07 00 00 00       	mov    eax,0x7
c0002c9e:	85 ed                	test   ebp,ebp
c0002ca0:	74 43                	je     c0002ce5 <dir_next+0x136>
c0002ca2:	83 fd 01             	cmp    ebp,0x1
c0002ca5:	74 c3                	je     c0002c6a <dir_next+0xbb>
c0002ca7:	83 fd ff             	cmp    ebp,0xffffffff
c0002caa:	74 ca                	je     c0002c76 <dir_next+0xc7>
c0002cac:	52                   	push   edx
c0002cad:	52                   	push   edx
c0002cae:	55                   	push   ebp
c0002caf:	57                   	push   edi
c0002cb0:	e8 cf fc ff ff       	call   c0002984 <dir_clear>
c0002cb5:	83 c4 10             	add    esp,0x10
c0002cb8:	85 c0                	test   eax,eax
c0002cba:	75 ba                	jne    c0002c76 <dir_next+0xc7>
c0002cbc:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0002cc0:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0002cc3:	50                   	push   eax
c0002cc4:	50                   	push   eax
c0002cc5:	55                   	push   ebp
c0002cc6:	57                   	push   edi
c0002cc7:	e8 ff f2 ff ff       	call   c0001fcb <clst2sect>
c0002ccc:	83 c4 10             	add    esp,0x10
c0002ccf:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002cd2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002cd5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cd9:	89 73 28             	mov    DWORD PTR [ebx+0x28],esi
c0002cdc:	8d 44 07 54          	lea    eax,[edi+eax*1+0x54]
c0002ce0:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0002ce3:	31 c0                	xor    eax,eax
c0002ce5:	83 c4 1c             	add    esp,0x1c
c0002ce8:	5b                   	pop    ebx
c0002ce9:	5e                   	pop    esi
c0002cea:	5f                   	pop    edi
c0002ceb:	5d                   	pop    ebp
c0002cec:	c3                   	ret    

c0002ced <dir_alloc>:
c0002ced:	57                   	push   edi
c0002cee:	56                   	push   esi
c0002cef:	53                   	push   ebx
c0002cf0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002cf4:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0002cf6:	51                   	push   ecx
c0002cf7:	51                   	push   ecx
c0002cf8:	6a 00                	push   0x0
c0002cfa:	53                   	push   ebx
c0002cfb:	e8 a8 fd ff ff       	call   c0002aa8 <dir_sdi>
c0002d00:	83 c4 10             	add    esp,0x10
c0002d03:	85 c0                	test   eax,eax
c0002d05:	75 54                	jne    c0002d5b <dir_alloc+0x6e>
c0002d07:	31 f6                	xor    esi,esi
c0002d09:	52                   	push   edx
c0002d0a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0002d0d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0002d10:	57                   	push   edi
c0002d11:	e8 70 f1 ff ff       	call   c0001e86 <move_window>
c0002d16:	83 c4 10             	add    esp,0x10
c0002d19:	85 c0                	test   eax,eax
c0002d1b:	75 3e                	jne    c0002d5b <dir_alloc+0x6e>
c0002d1d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0002d20:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002d23:	8a 12                	mov    dl,BYTE PTR [edx]
c0002d25:	75 07                	jne    c0002d2e <dir_alloc+0x41>
c0002d27:	f7 d2                	not    edx
c0002d29:	c0 ea 07             	shr    dl,0x7
c0002d2c:	eb 0d                	jmp    c0002d3b <dir_alloc+0x4e>
c0002d2e:	84 d2                	test   dl,dl
c0002d30:	0f 94 c1             	sete   cl
c0002d33:	80 fa e5             	cmp    dl,0xe5
c0002d36:	0f 94 c2             	sete   dl
c0002d39:	09 ca                	or     edx,ecx
c0002d3b:	84 d2                	test   dl,dl
c0002d3d:	74 09                	je     c0002d48 <dir_alloc+0x5b>
c0002d3f:	46                   	inc    esi
c0002d40:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0002d44:	75 04                	jne    c0002d4a <dir_alloc+0x5d>
c0002d46:	eb 1d                	jmp    c0002d65 <dir_alloc+0x78>
c0002d48:	31 f6                	xor    esi,esi
c0002d4a:	50                   	push   eax
c0002d4b:	50                   	push   eax
c0002d4c:	6a 01                	push   0x1
c0002d4e:	53                   	push   ebx
c0002d4f:	e8 5b fe ff ff       	call   c0002baf <dir_next>
c0002d54:	83 c4 10             	add    esp,0x10
c0002d57:	85 c0                	test   eax,eax
c0002d59:	74 ae                	je     c0002d09 <dir_alloc+0x1c>
c0002d5b:	83 f8 04             	cmp    eax,0x4
c0002d5e:	75 05                	jne    c0002d65 <dir_alloc+0x78>
c0002d60:	b8 07 00 00 00       	mov    eax,0x7
c0002d65:	5b                   	pop    ebx
c0002d66:	5e                   	pop    esi
c0002d67:	5f                   	pop    edi
c0002d68:	c3                   	ret    

c0002d69 <ld_clust>:
c0002d69:	56                   	push   esi
c0002d6a:	53                   	push   ebx
c0002d6b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0002d6f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0002d72:	50                   	push   eax
c0002d73:	e8 9d ed ff ff       	call   c0001b15 <ld_word>
c0002d78:	59                   	pop    ecx
c0002d79:	0f b7 d8             	movzx  ebx,ax
c0002d7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d80:	80 38 03             	cmp    BYTE PTR [eax],0x3
c0002d83:	75 0f                	jne    c0002d94 <ld_clust+0x2b>
c0002d85:	83 c6 14             	add    esi,0x14
c0002d88:	56                   	push   esi
c0002d89:	e8 87 ed ff ff       	call   c0001b15 <ld_word>
c0002d8e:	5a                   	pop    edx
c0002d8f:	c1 e0 10             	shl    eax,0x10
c0002d92:	09 c3                	or     ebx,eax
c0002d94:	89 d8                	mov    eax,ebx
c0002d96:	5b                   	pop    ebx
c0002d97:	5e                   	pop    esi
c0002d98:	c3                   	ret    

c0002d99 <st_clust>:
c0002d99:	56                   	push   esi
c0002d9a:	53                   	push   ebx
c0002d9b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0002d9f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002da3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0002da7:	0f b7 c3             	movzx  eax,bx
c0002daa:	50                   	push   eax
c0002dab:	8d 41 1a             	lea    eax,[ecx+0x1a]
c0002dae:	50                   	push   eax
c0002daf:	e8 dd ed ff ff       	call   c0001b91 <st_word>
c0002db4:	58                   	pop    eax
c0002db5:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0002db8:	5a                   	pop    edx
c0002db9:	75 15                	jne    c0002dd0 <st_clust+0x37>
c0002dbb:	c1 eb 10             	shr    ebx,0x10
c0002dbe:	83 c1 14             	add    ecx,0x14
c0002dc1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0002dc5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002dc9:	5b                   	pop    ebx
c0002dca:	5e                   	pop    esi
c0002dcb:	e9 c1 ed ff ff       	jmp    c0001b91 <st_word>
c0002dd0:	5b                   	pop    ebx
c0002dd1:	5e                   	pop    esi
c0002dd2:	c3                   	ret    

c0002dd3 <cmp_lfn>:
c0002dd3:	55                   	push   ebp
c0002dd4:	57                   	push   edi
c0002dd5:	56                   	push   esi
c0002dd6:	53                   	push   ebx
c0002dd7:	83 ec 1c             	sub    esp,0x1c
c0002dda:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0002dde:	83 c0 1a             	add    eax,0x1a
c0002de1:	50                   	push   eax
c0002de2:	e8 2e ed ff ff       	call   c0001b15 <ld_word>
c0002de7:	59                   	pop    ecx
c0002de8:	66 85 c0             	test   ax,ax
c0002deb:	74 07                	je     c0002df4 <cmp_lfn+0x21>
c0002ded:	31 c0                	xor    eax,eax
c0002def:	e9 97 00 00 00       	jmp    c0002e8b <cmp_lfn+0xb8>
c0002df4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0002df8:	bd 01 00 00 00       	mov    ebp,0x1
c0002dfd:	8a 10                	mov    dl,BYTE PTR [eax]
c0002dff:	31 f6                	xor    esi,esi
c0002e01:	83 e2 3f             	and    edx,0x3f
c0002e04:	4a                   	dec    edx
c0002e05:	6b fa 0d             	imul   edi,edx,0xd
c0002e08:	0f b6 86 90 94 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffd6b70]
c0002e0f:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0002e13:	50                   	push   eax
c0002e14:	e8 fc ec ff ff       	call   c0001b15 <ld_word>
c0002e19:	5a                   	pop    edx
c0002e1a:	89 c3                	mov    ebx,eax
c0002e1c:	66 85 ed             	test   bp,bp
c0002e1f:	74 3c                	je     c0002e5d <cmp_lfn+0x8a>
c0002e21:	81 ff ff 00 00 00    	cmp    edi,0xff
c0002e27:	77 c4                	ja     c0002ded <cmp_lfn+0x1a>
c0002e29:	83 ec 0c             	sub    esp,0xc
c0002e2c:	0f b7 c0             	movzx  eax,ax
c0002e2f:	50                   	push   eax
c0002e30:	e8 97 5e 00 00       	call   c0008ccc <ff_wtoupper>
c0002e35:	89 c5                	mov    ebp,eax
c0002e37:	8d 47 01             	lea    eax,[edi+0x1]
c0002e3a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002e3e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0002e42:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002e46:	89 04 24             	mov    DWORD PTR [esp],eax
c0002e49:	e8 7e 5e 00 00       	call   c0008ccc <ff_wtoupper>
c0002e4e:	83 c4 10             	add    esp,0x10
c0002e51:	39 c5                	cmp    ebp,eax
c0002e53:	75 98                	jne    c0002ded <cmp_lfn+0x1a>
c0002e55:	89 dd                	mov    ebp,ebx
c0002e57:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e5b:	eb 04                	jmp    c0002e61 <cmp_lfn+0x8e>
c0002e5d:	66 43                	inc    bx
c0002e5f:	75 8c                	jne    c0002ded <cmp_lfn+0x1a>
c0002e61:	46                   	inc    esi
c0002e62:	83 fe 0d             	cmp    esi,0xd
c0002e65:	75 a1                	jne    c0002e08 <cmp_lfn+0x35>
c0002e67:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0002e6b:	f6 00 40             	test   BYTE PTR [eax],0x40
c0002e6e:	74 16                	je     c0002e86 <cmp_lfn+0xb3>
c0002e70:	66 85 ed             	test   bp,bp
c0002e73:	74 11                	je     c0002e86 <cmp_lfn+0xb3>
c0002e75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0002e79:	66 83 3c 78 00       	cmp    WORD PTR [eax+edi*2],0x0
c0002e7e:	0f 94 c0             	sete   al
c0002e81:	0f b6 c0             	movzx  eax,al
c0002e84:	eb 05                	jmp    c0002e8b <cmp_lfn+0xb8>
c0002e86:	b8 01 00 00 00       	mov    eax,0x1
c0002e8b:	83 c4 1c             	add    esp,0x1c
c0002e8e:	5b                   	pop    ebx
c0002e8f:	5e                   	pop    esi
c0002e90:	5f                   	pop    edi
c0002e91:	5d                   	pop    ebp
c0002e92:	c3                   	ret    

c0002e93 <pick_lfn>:
c0002e93:	55                   	push   ebp
c0002e94:	57                   	push   edi
c0002e95:	56                   	push   esi
c0002e96:	53                   	push   ebx
c0002e97:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0002e9b:	8d 46 1a             	lea    eax,[esi+0x1a]
c0002e9e:	50                   	push   eax
c0002e9f:	e8 71 ec ff ff       	call   c0001b15 <ld_word>
c0002ea4:	59                   	pop    ecx
c0002ea5:	66 85 c0             	test   ax,ax
c0002ea8:	74 04                	je     c0002eae <pick_lfn+0x1b>
c0002eaa:	31 c0                	xor    eax,eax
c0002eac:	eb 66                	jmp    c0002f14 <pick_lfn+0x81>
c0002eae:	0f b6 1e             	movzx  ebx,BYTE PTR [esi]
c0002eb1:	bf 01 00 00 00       	mov    edi,0x1
c0002eb6:	83 e3 bf             	and    ebx,0xffffffbf
c0002eb9:	31 ed                	xor    ebp,ebp
c0002ebb:	4b                   	dec    ebx
c0002ebc:	6b db 0d             	imul   ebx,ebx,0xd
c0002ebf:	0f b6 85 90 94 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6b70]
c0002ec6:	01 f0                	add    eax,esi
c0002ec8:	50                   	push   eax
c0002ec9:	e8 47 ec ff ff       	call   c0001b15 <ld_word>
c0002ece:	5a                   	pop    edx
c0002ecf:	66 85 ff             	test   di,di
c0002ed2:	74 15                	je     c0002ee9 <pick_lfn+0x56>
c0002ed4:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002eda:	77 ce                	ja     c0002eaa <pick_lfn+0x17>
c0002edc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002ee0:	89 c7                	mov    edi,eax
c0002ee2:	66 89 04 5a          	mov    WORD PTR [edx+ebx*2],ax
c0002ee6:	43                   	inc    ebx
c0002ee7:	eb 04                	jmp    c0002eed <pick_lfn+0x5a>
c0002ee9:	66 40                	inc    ax
c0002eeb:	75 bd                	jne    c0002eaa <pick_lfn+0x17>
c0002eed:	45                   	inc    ebp
c0002eee:	83 fd 0d             	cmp    ebp,0xd
c0002ef1:	75 cc                	jne    c0002ebf <pick_lfn+0x2c>
c0002ef3:	f6 06 40             	test   BYTE PTR [esi],0x40
c0002ef6:	74 17                	je     c0002f0f <pick_lfn+0x7c>
c0002ef8:	66 85 ff             	test   di,di
c0002efb:	74 12                	je     c0002f0f <pick_lfn+0x7c>
c0002efd:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002f03:	77 a5                	ja     c0002eaa <pick_lfn+0x17>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	66 c7 04 58 00 00    	mov    WORD PTR [eax+ebx*2],0x0
c0002f0f:	b8 01 00 00 00       	mov    eax,0x1
c0002f14:	5b                   	pop    ebx
c0002f15:	5e                   	pop    esi
c0002f16:	5f                   	pop    edi
c0002f17:	5d                   	pop    ebp
c0002f18:	c3                   	ret    

c0002f19 <put_lfn>:
c0002f19:	55                   	push   ebp
c0002f1a:	57                   	push   edi
c0002f1b:	56                   	push   esi
c0002f1c:	53                   	push   ebx
c0002f1d:	31 db                	xor    ebx,ebx
c0002f1f:	50                   	push   eax
c0002f20:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0002f24:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0002f28:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0002f2c:	89 fd                	mov    ebp,edi
c0002f2e:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c0002f31:	66 c7 46 0b 0f 00    	mov    WORD PTR [esi+0xb],0xf
c0002f37:	8d 46 1a             	lea    eax,[esi+0x1a]
c0002f3a:	6a 00                	push   0x0
c0002f3c:	50                   	push   eax
c0002f3d:	e8 4f ec ff ff       	call   c0001b91 <st_word>
c0002f42:	89 f8                	mov    eax,edi
c0002f44:	0f b6 c8             	movzx  ecx,al
c0002f47:	58                   	pop    eax
c0002f48:	49                   	dec    ecx
c0002f49:	5a                   	pop    edx
c0002f4a:	6b c9 0d             	imul   ecx,ecx,0xd
c0002f4d:	31 c0                	xor    eax,eax
c0002f4f:	66 83 fb ff          	cmp    bx,0xffff
c0002f53:	74 09                	je     c0002f5e <put_lfn+0x45>
c0002f55:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0002f59:	66 8b 1c 4a          	mov    bx,WORD PTR [edx+ecx*2]
c0002f5d:	41                   	inc    ecx
c0002f5e:	0f b7 d3             	movzx  edx,bx
c0002f61:	52                   	push   edx
c0002f62:	0f b6 90 90 94 02 c0 	movzx  edx,BYTE PTR [eax-0x3ffd6b70]
c0002f69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002f6d:	01 f2                	add    edx,esi
c0002f6f:	52                   	push   edx
c0002f70:	e8 1c ec ff ff       	call   c0001b91 <st_word>
c0002f75:	5a                   	pop    edx
c0002f76:	66 85 db             	test   bx,bx
c0002f79:	58                   	pop    eax
c0002f7a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002f7d:	75 03                	jne    c0002f82 <put_lfn+0x69>
c0002f7f:	83 cb ff             	or     ebx,0xffffffff
c0002f82:	40                   	inc    eax
c0002f83:	83 f8 0d             	cmp    eax,0xd
c0002f86:	75 c7                	jne    c0002f4f <put_lfn+0x36>
c0002f88:	66 43                	inc    bx
c0002f8a:	74 0b                	je     c0002f97 <put_lfn+0x7e>
c0002f8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002f90:	66 83 3c 48 00       	cmp    WORD PTR [eax+ecx*2],0x0
c0002f95:	75 05                	jne    c0002f9c <put_lfn+0x83>
c0002f97:	89 fd                	mov    ebp,edi
c0002f99:	83 cd 40             	or     ebp,0x40
c0002f9c:	89 e8                	mov    eax,ebp
c0002f9e:	88 06                	mov    BYTE PTR [esi],al
c0002fa0:	58                   	pop    eax
c0002fa1:	5b                   	pop    ebx
c0002fa2:	5e                   	pop    esi
c0002fa3:	5f                   	pop    edi
c0002fa4:	5d                   	pop    ebp
c0002fa5:	c3                   	ret    

c0002fa6 <gen_numname>:
c0002fa6:	55                   	push   ebp
c0002fa7:	57                   	push   edi
c0002fa8:	56                   	push   esi
c0002fa9:	53                   	push   ebx
c0002faa:	83 ec 10             	sub    esp,0x10
c0002fad:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0002fb1:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0002fb5:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0002fb9:	6a 0b                	push   0xb
c0002fbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0002fbf:	55                   	push   ebp
c0002fc0:	e8 f5 eb ff ff       	call   c0001bba <mem_cpy>
c0002fc5:	83 c4 0c             	add    esp,0xc
c0002fc8:	83 fa 05             	cmp    edx,0x5
c0002fcb:	76 2d                	jbe    c0002ffa <gen_numname+0x54>
c0002fcd:	66 8b 01             	mov    ax,WORD PTR [ecx]
c0002fd0:	66 85 c0             	test   ax,ax
c0002fd3:	74 25                	je     c0002ffa <gen_numname+0x54>
c0002fd5:	83 c1 02             	add    ecx,0x2
c0002fd8:	be 10 00 00 00       	mov    esi,0x10
c0002fdd:	01 d2                	add    edx,edx
c0002fdf:	89 c7                	mov    edi,eax
c0002fe1:	66 d1 e8             	shr    ax,1
c0002fe4:	83 e7 01             	and    edi,0x1
c0002fe7:	01 fa                	add    edx,edi
c0002fe9:	0f ba e2 10          	bt     edx,0x10
c0002fed:	73 06                	jae    c0002ff5 <gen_numname+0x4f>
c0002fef:	81 f2 21 10 01 00    	xor    edx,0x11021
c0002ff5:	4e                   	dec    esi
c0002ff6:	75 e5                	jne    c0002fdd <gen_numname+0x37>
c0002ff8:	eb d3                	jmp    c0002fcd <gen_numname+0x27>
c0002ffa:	b8 07 00 00 00       	mov    eax,0x7
c0002fff:	88 d1                	mov    cl,dl
c0003001:	83 e1 0f             	and    ecx,0xf
c0003004:	8d 71 30             	lea    esi,[ecx+0x30]
c0003007:	89 f3                	mov    ebx,esi
c0003009:	80 fb 39             	cmp    bl,0x39
c000300c:	76 03                	jbe    c0003011 <gen_numname+0x6b>
c000300e:	8d 71 37             	lea    esi,[ecx+0x37]
c0003011:	89 f3                	mov    ebx,esi
c0003013:	8d 48 ff             	lea    ecx,[eax-0x1]
c0003016:	89 d6                	mov    esi,edx
c0003018:	88 5c 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],bl
c000301c:	c1 ee 04             	shr    esi,0x4
c000301f:	83 fa 0f             	cmp    edx,0xf
c0003022:	76 06                	jbe    c000302a <gen_numname+0x84>
c0003024:	89 c8                	mov    eax,ecx
c0003026:	89 f2                	mov    edx,esi
c0003028:	eb d5                	jmp    c0002fff <gen_numname+0x59>
c000302a:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000302f:	31 d2                	xor    edx,edx
c0003031:	8d 70 fe             	lea    esi,[eax-0x2]
c0003034:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003038:	39 ca                	cmp    edx,ecx
c000303a:	73 1a                	jae    c0003056 <gen_numname+0xb0>
c000303c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000303f:	3c 20                	cmp    al,0x20
c0003041:	74 13                	je     c0003056 <gen_numname+0xb0>
c0003043:	50                   	push   eax
c0003044:	e8 e1 eb ff ff       	call   c0001c2a <dbc_1st>
c0003049:	5b                   	pop    ebx
c000304a:	85 c0                	test   eax,eax
c000304c:	74 05                	je     c0003053 <gen_numname+0xad>
c000304e:	39 d6                	cmp    esi,edx
c0003050:	74 04                	je     c0003056 <gen_numname+0xb0>
c0003052:	42                   	inc    edx
c0003053:	42                   	inc    edx
c0003054:	eb de                	jmp    c0003034 <gen_numname+0x8e>
c0003056:	b0 20                	mov    al,0x20
c0003058:	83 f9 07             	cmp    ecx,0x7
c000305b:	77 05                	ja     c0003062 <gen_numname+0xbc>
c000305d:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0003061:	41                   	inc    ecx
c0003062:	42                   	inc    edx
c0003063:	88 44 15 ff          	mov    BYTE PTR [ebp+edx*1-0x1],al
c0003067:	83 fa 07             	cmp    edx,0x7
c000306a:	76 ea                	jbe    c0003056 <gen_numname+0xb0>
c000306c:	83 c4 10             	add    esp,0x10
c000306f:	5b                   	pop    ebx
c0003070:	5e                   	pop    esi
c0003071:	5f                   	pop    edi
c0003072:	5d                   	pop    ebp
c0003073:	c3                   	ret    

c0003074 <sum_sfn>:
c0003074:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003078:	31 d2                	xor    edx,edx
c000307a:	31 c0                	xor    eax,eax
c000307c:	d0 c8                	ror    al,1
c000307e:	02 04 11             	add    al,BYTE PTR [ecx+edx*1]
c0003081:	42                   	inc    edx
c0003082:	83 fa 0b             	cmp    edx,0xb
c0003085:	75 f5                	jne    c000307c <sum_sfn+0x8>
c0003087:	c3                   	ret    

c0003088 <xdir_sum>:
c0003088:	56                   	push   esi
c0003089:	31 c0                	xor    eax,eax
c000308b:	53                   	push   ebx
c000308c:	31 d2                	xor    edx,edx
c000308e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003092:	0f b6 4b 01          	movzx  ecx,BYTE PTR [ebx+0x1]
c0003096:	41                   	inc    ecx
c0003097:	c1 e1 05             	shl    ecx,0x5
c000309a:	83 fa 02             	cmp    edx,0x2
c000309d:	74 0b                	je     c00030aa <xdir_sum+0x22>
c000309f:	0f b6 34 13          	movzx  esi,BYTE PTR [ebx+edx*1]
c00030a3:	66 d1 c8             	ror    ax,1
c00030a6:	01 f0                	add    eax,esi
c00030a8:	eb 05                	jmp    c00030af <xdir_sum+0x27>
c00030aa:	ba 03 00 00 00       	mov    edx,0x3
c00030af:	42                   	inc    edx
c00030b0:	39 d1                	cmp    ecx,edx
c00030b2:	77 e6                	ja     c000309a <xdir_sum+0x12>
c00030b4:	5b                   	pop    ebx
c00030b5:	5e                   	pop    esi
c00030b6:	c3                   	ret    

c00030b7 <xname_sum>:
c00030b7:	56                   	push   esi
c00030b8:	53                   	push   ebx
c00030b9:	31 db                	xor    ebx,ebx
c00030bb:	51                   	push   ecx
c00030bc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00030c0:	83 c6 02             	add    esi,0x2
c00030c3:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c00030c7:	66 85 c0             	test   ax,ax
c00030ca:	74 1f                	je     c00030eb <xname_sum+0x34>
c00030cc:	83 ec 0c             	sub    esp,0xc
c00030cf:	66 d1 cb             	ror    bx,1
c00030d2:	50                   	push   eax
c00030d3:	e8 f4 5b 00 00       	call   c0008ccc <ff_wtoupper>
c00030d8:	83 c4 10             	add    esp,0x10
c00030db:	0f b6 d0             	movzx  edx,al
c00030de:	66 c1 e8 08          	shr    ax,0x8
c00030e2:	01 d3                	add    ebx,edx
c00030e4:	66 d1 cb             	ror    bx,1
c00030e7:	01 c3                	add    ebx,eax
c00030e9:	eb d5                	jmp    c00030c0 <xname_sum+0x9>
c00030eb:	89 d8                	mov    eax,ebx
c00030ed:	5a                   	pop    edx
c00030ee:	5b                   	pop    ebx
c00030ef:	5e                   	pop    esi
c00030f0:	c3                   	ret    

c00030f1 <xsum32>:
c00030f1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00030f5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00030fa:	d1 ca                	ror    edx,1
c00030fc:	01 d0                	add    eax,edx
c00030fe:	c3                   	ret    

c00030ff <get_xfileinfo>:
c00030ff:	55                   	push   ebp
c0003100:	ba 40 00 00 00       	mov    edx,0x40
c0003105:	57                   	push   edi
c0003106:	31 ed                	xor    ebp,ebp
c0003108:	56                   	push   esi
c0003109:	31 ff                	xor    edi,edi
c000310b:	53                   	push   ebx
c000310c:	83 ec 0c             	sub    esp,0xc
c000310f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0003113:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0003117:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000311e:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0003122:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0003125:	76 7d                	jbe    c00031a4 <get_xfileinfo+0xa5>
c0003127:	81 fa 5f 02 00 00    	cmp    edx,0x25f
c000312d:	76 0b                	jbe    c000313a <get_xfileinfo+0x3b>
c000312f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0003133:	bd 01 00 00 00       	mov    ebp,0x1
c0003138:	eb 73                	jmp    c00031ad <get_xfileinfo+0xae>
c000313a:	f6 c2 1f             	test   dl,0x1f
c000313d:	75 03                	jne    c0003142 <get_xfileinfo+0x43>
c000313f:	83 c2 02             	add    edx,0x2
c0003142:	8d 04 16             	lea    eax,[esi+edx*1]
c0003145:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0003149:	50                   	push   eax
c000314a:	e8 c6 e9 ff ff       	call   c0001b15 <ld_word>
c000314f:	5a                   	pop    edx
c0003150:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0003154:	ff 04 24             	inc    DWORD PTR [esp]
c0003157:	83 c2 02             	add    edx,0x2
c000315a:	66 85 ff             	test   di,di
c000315d:	75 0d                	jne    c000316c <get_xfileinfo+0x6d>
c000315f:	8d 88 00 28 00 00    	lea    ecx,[eax+0x2800]
c0003165:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000316a:	76 31                	jbe    c000319d <get_xfileinfo+0x9e>
c000316c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0003170:	c1 e7 10             	shl    edi,0x10
c0003173:	0f b7 c0             	movzx  eax,ax
c0003176:	b9 ff 00 00 00       	mov    ecx,0xff
c000317b:	09 c7                	or     edi,eax
c000317d:	29 e9                	sub    ecx,ebp
c000317f:	51                   	push   ecx
c0003180:	8d 4c 2b 1a          	lea    ecx,[ebx+ebp*1+0x1a]
c0003184:	51                   	push   ecx
c0003185:	57                   	push   edi
c0003186:	e8 68 eb ff ff       	call   c0001cf3 <put_utf>
c000318b:	83 c4 0c             	add    esp,0xc
c000318e:	84 c0                	test   al,al
c0003190:	74 9d                	je     c000312f <get_xfileinfo+0x30>
c0003192:	0f b6 c0             	movzx  eax,al
c0003195:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0003199:	01 c5                	add    ebp,eax
c000319b:	31 c0                	xor    eax,eax
c000319d:	89 c7                	mov    edi,eax
c000319f:	e9 7a ff ff ff       	jmp    c000311e <get_xfileinfo+0x1f>
c00031a4:	85 ed                	test   ebp,ebp
c00031a6:	74 87                	je     c000312f <get_xfileinfo+0x30>
c00031a8:	66 85 ff             	test   di,di
c00031ab:	75 82                	jne    c000312f <get_xfileinfo+0x30>
c00031ad:	c6 44 2b 1a 00       	mov    BYTE PTR [ebx+ebp*1+0x1a],0x0
c00031b2:	31 c0                	xor    eax,eax
c00031b4:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00031b8:	31 d2                	xor    edx,edx
c00031ba:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00031bd:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00031c0:	80 e1 10             	and    cl,0x10
c00031c3:	75 0c                	jne    c00031d1 <get_xfileinfo+0xd2>
c00031c5:	8d 46 38             	lea    eax,[esi+0x38]
c00031c8:	52                   	push   edx
c00031c9:	50                   	push   eax
c00031ca:	e8 75 e9 ff ff       	call   c0001b44 <ld_qword>
c00031cf:	59                   	pop    ecx
c00031d0:	5f                   	pop    edi
c00031d1:	89 03                	mov    DWORD PTR [ebx],eax
c00031d3:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00031d6:	50                   	push   eax
c00031d7:	8d 46 0c             	lea    eax,[esi+0xc]
c00031da:	83 c6 0e             	add    esi,0xe
c00031dd:	50                   	push   eax
c00031de:	e8 32 e9 ff ff       	call   c0001b15 <ld_word>
c00031e3:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00031e7:	89 34 24             	mov    DWORD PTR [esp],esi
c00031ea:	e8 26 e9 ff ff       	call   c0001b15 <ld_word>
c00031ef:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c00031f3:	83 c4 14             	add    esp,0x14
c00031f6:	5b                   	pop    ebx
c00031f7:	5e                   	pop    esi
c00031f8:	5f                   	pop    edi
c00031f9:	5d                   	pop    ebp
c00031fa:	c3                   	ret    

c00031fb <load_xdir>:
c00031fb:	55                   	push   ebp
c00031fc:	57                   	push   edi
c00031fd:	56                   	push   esi
c00031fe:	53                   	push   ebx
c00031ff:	83 ec 20             	sub    esp,0x20
c0003202:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0003206:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003208:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000320b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000320e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0003211:	50                   	push   eax
c0003212:	e8 6f ec ff ff       	call   c0001e86 <move_window>
c0003217:	83 c4 10             	add    esp,0x10
c000321a:	89 c7                	mov    edi,eax
c000321c:	85 c0                	test   eax,eax
c000321e:	0f 85 31 01 00 00    	jne    c0003355 <load_xdir+0x15a>
c0003224:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0003227:	80 38 85             	cmp    BYTE PTR [eax],0x85
c000322a:	0f 85 20 01 00 00    	jne    c0003350 <load_xdir+0x155>
c0003230:	52                   	push   edx
c0003231:	6a 20                	push   0x20
c0003233:	50                   	push   eax
c0003234:	56                   	push   esi
c0003235:	e8 80 e9 ff ff       	call   c0001bba <mem_cpy>
c000323a:	0f b6 7e 01          	movzx  edi,BYTE PTR [esi+0x1]
c000323e:	47                   	inc    edi
c000323f:	c1 e7 05             	shl    edi,0x5
c0003242:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0003246:	89 f8                	mov    eax,edi
c0003248:	83 c4 10             	add    esp,0x10
c000324b:	83 e8 60             	sub    eax,0x60
c000324e:	3d 00 02 00 00       	cmp    eax,0x200
c0003253:	0f 87 f7 00 00 00    	ja     c0003350 <load_xdir+0x155>
c0003259:	50                   	push   eax
c000325a:	50                   	push   eax
c000325b:	6a 00                	push   0x0
c000325d:	53                   	push   ebx
c000325e:	e8 4c f9 ff ff       	call   c0002baf <dir_next>
c0003263:	83 c4 10             	add    esp,0x10
c0003266:	89 c7                	mov    edi,eax
c0003268:	83 f8 04             	cmp    eax,0x4
c000326b:	0f 84 df 00 00 00    	je     c0003350 <load_xdir+0x155>
c0003271:	85 c0                	test   eax,eax
c0003273:	0f 85 dc 00 00 00    	jne    c0003355 <load_xdir+0x15a>
c0003279:	50                   	push   eax
c000327a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000327d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0003280:	ff 33                	push   DWORD PTR [ebx]
c0003282:	e8 ff eb ff ff       	call   c0001e86 <move_window>
c0003287:	83 c4 10             	add    esp,0x10
c000328a:	89 c7                	mov    edi,eax
c000328c:	85 c0                	test   eax,eax
c000328e:	0f 85 c1 00 00 00    	jne    c0003355 <load_xdir+0x15a>
c0003294:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0003297:	80 38 c0             	cmp    BYTE PTR [eax],0xc0
c000329a:	0f 85 b0 00 00 00    	jne    c0003350 <load_xdir+0x155>
c00032a0:	55                   	push   ebp
c00032a1:	6a 20                	push   0x20
c00032a3:	50                   	push   eax
c00032a4:	8d 46 20             	lea    eax,[esi+0x20]
c00032a7:	50                   	push   eax
c00032a8:	e8 0d e9 ff ff       	call   c0001bba <mem_cpy>
c00032ad:	31 d2                	xor    edx,edx
c00032af:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c00032b3:	83 c4 10             	add    esp,0x10
c00032b6:	83 c0 2c             	add    eax,0x2c
c00032b9:	b9 0f 00 00 00       	mov    ecx,0xf
c00032be:	f7 f1                	div    ecx
c00032c0:	c1 e0 05             	shl    eax,0x5
c00032c3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00032c7:	0f 87 83 00 00 00    	ja     c0003350 <load_xdir+0x155>
c00032cd:	bd 40 00 00 00       	mov    ebp,0x40
c00032d2:	57                   	push   edi
c00032d3:	57                   	push   edi
c00032d4:	6a 00                	push   0x0
c00032d6:	53                   	push   ebx
c00032d7:	e8 d3 f8 ff ff       	call   c0002baf <dir_next>
c00032dc:	83 c4 10             	add    esp,0x10
c00032df:	89 c7                	mov    edi,eax
c00032e1:	83 f8 04             	cmp    eax,0x4
c00032e4:	74 6a                	je     c0003350 <load_xdir+0x155>
c00032e6:	85 c0                	test   eax,eax
c00032e8:	75 6b                	jne    c0003355 <load_xdir+0x15a>
c00032ea:	51                   	push   ecx
c00032eb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00032ee:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00032f1:	ff 33                	push   DWORD PTR [ebx]
c00032f3:	e8 8e eb ff ff       	call   c0001e86 <move_window>
c00032f8:	83 c4 10             	add    esp,0x10
c00032fb:	89 c7                	mov    edi,eax
c00032fd:	85 c0                	test   eax,eax
c00032ff:	75 54                	jne    c0003355 <load_xdir+0x15a>
c0003301:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0003304:	80 38 c1             	cmp    BYTE PTR [eax],0xc1
c0003307:	75 47                	jne    c0003350 <load_xdir+0x155>
c0003309:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000330f:	77 10                	ja     c0003321 <load_xdir+0x126>
c0003311:	52                   	push   edx
c0003312:	6a 20                	push   0x20
c0003314:	50                   	push   eax
c0003315:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0003318:	50                   	push   eax
c0003319:	e8 9c e8 ff ff       	call   c0001bba <mem_cpy>
c000331e:	83 c4 10             	add    esp,0x10
c0003321:	83 c5 20             	add    ebp,0x20
c0003324:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003328:	77 a8                	ja     c00032d2 <load_xdir+0xd7>
c000332a:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003330:	77 23                	ja     c0003355 <load_xdir+0x15a>
c0003332:	83 ec 0c             	sub    esp,0xc
c0003335:	56                   	push   esi
c0003336:	83 c6 02             	add    esi,0x2
c0003339:	e8 4a fd ff ff       	call   c0003088 <xdir_sum>
c000333e:	89 34 24             	mov    DWORD PTR [esp],esi
c0003341:	89 c3                	mov    ebx,eax
c0003343:	e8 cd e7 ff ff       	call   c0001b15 <ld_word>
c0003348:	83 c4 10             	add    esp,0x10
c000334b:	66 39 c3             	cmp    bx,ax
c000334e:	74 05                	je     c0003355 <load_xdir+0x15a>
c0003350:	bf 02 00 00 00       	mov    edi,0x2
c0003355:	83 c4 1c             	add    esp,0x1c
c0003358:	89 f8                	mov    eax,edi
c000335a:	5b                   	pop    ebx
c000335b:	5e                   	pop    esi
c000335c:	5f                   	pop    edi
c000335d:	5d                   	pop    ebp
c000335e:	c3                   	ret    

c000335f <init_alloc_info>:
c000335f:	56                   	push   esi
c0003360:	53                   	push   ebx
c0003361:	50                   	push   eax
c0003362:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0003366:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000336a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000336d:	83 c0 34             	add    eax,0x34
c0003370:	50                   	push   eax
c0003371:	e8 b2 e7 ff ff       	call   c0001b28 <ld_dword>
c0003376:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003379:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000337c:	83 c0 38             	add    eax,0x38
c000337f:	50                   	push   eax
c0003380:	e8 bf e7 ff ff       	call   c0001b44 <ld_qword>
c0003385:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003388:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c000338b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000338e:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0003391:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003398:	83 e0 02             	and    eax,0x2
c000339b:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000339e:	83 c4 0c             	add    esp,0xc
c00033a1:	5b                   	pop    ebx
c00033a2:	5e                   	pop    esi
c00033a3:	c3                   	ret    

c00033a4 <load_obj_xdir>:
c00033a4:	53                   	push   ebx
c00033a5:	83 ec 10             	sub    esp,0x10
c00033a8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00033ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00033b0:	8b 10                	mov    edx,DWORD PTR [eax]
c00033b2:	89 13                	mov    DWORD PTR [ebx],edx
c00033b4:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
c00033b7:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00033ba:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00033bd:	88 53 07             	mov    BYTE PTR [ebx+0x7],dl
c00033c0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00033c3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00033ca:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00033d1:	30 d2                	xor    dl,dl
c00033d3:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00033d6:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00033d9:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00033dc:	50                   	push   eax
c00033dd:	53                   	push   ebx
c00033de:	e8 c5 f6 ff ff       	call   c0002aa8 <dir_sdi>
c00033e3:	83 c4 10             	add    esp,0x10
c00033e6:	85 c0                	test   eax,eax
c00033e8:	75 0d                	jne    c00033f7 <load_obj_xdir+0x53>
c00033ea:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00033ee:	83 c4 08             	add    esp,0x8
c00033f1:	5b                   	pop    ebx
c00033f2:	e9 04 fe ff ff       	jmp    c00031fb <load_xdir>
c00033f7:	83 c4 08             	add    esp,0x8
c00033fa:	5b                   	pop    ebx
c00033fb:	c3                   	ret    

c00033fc <store_xdir>:
c00033fc:	57                   	push   edi
c00033fd:	56                   	push   esi
c00033fe:	53                   	push   ebx
c00033ff:	83 ec 10             	sub    esp,0x10
c0003402:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0003406:	8b 06                	mov    eax,DWORD PTR [esi]
c0003408:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000340b:	57                   	push   edi
c000340c:	e8 77 fc ff ff       	call   c0003088 <xdir_sum>
c0003411:	0f b7 c0             	movzx  eax,ax
c0003414:	89 04 24             	mov    DWORD PTR [esp],eax
c0003417:	8d 47 02             	lea    eax,[edi+0x2]
c000341a:	50                   	push   eax
c000341b:	e8 71 e7 ff ff       	call   c0001b91 <st_word>
c0003420:	0f b6 5f 01          	movzx  ebx,BYTE PTR [edi+0x1]
c0003424:	ff 76 48             	push   DWORD PTR [esi+0x48]
c0003427:	56                   	push   esi
c0003428:	e8 7b f6 ff ff       	call   c0002aa8 <dir_sdi>
c000342d:	83 c4 10             	add    esp,0x10
c0003430:	85 c0                	test   eax,eax
c0003432:	75 46                	jne    c000347a <store_xdir+0x7e>
c0003434:	51                   	push   ecx
c0003435:	ff 76 34             	push   DWORD PTR [esi+0x34]
c0003438:	ff 76 30             	push   DWORD PTR [esi+0x30]
c000343b:	ff 36                	push   DWORD PTR [esi]
c000343d:	e8 44 ea ff ff       	call   c0001e86 <move_window>
c0003442:	83 c4 10             	add    esp,0x10
c0003445:	85 c0                	test   eax,eax
c0003447:	75 31                	jne    c000347a <store_xdir+0x7e>
c0003449:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000344d:	52                   	push   edx
c000344e:	6a 20                	push   0x20
c0003450:	57                   	push   edi
c0003451:	ff 76 38             	push   DWORD PTR [esi+0x38]
c0003454:	e8 61 e7 ff ff       	call   c0001bba <mem_cpy>
c0003459:	83 c4 10             	add    esp,0x10
c000345c:	8b 16                	mov    edx,DWORD PTR [esi]
c000345e:	85 db                	test   ebx,ebx
c0003460:	c6 42 03 01          	mov    BYTE PTR [edx+0x3],0x1
c0003464:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003468:	74 10                	je     c000347a <store_xdir+0x7e>
c000346a:	83 c7 20             	add    edi,0x20
c000346d:	50                   	push   eax
c000346e:	4b                   	dec    ebx
c000346f:	50                   	push   eax
c0003470:	6a 00                	push   0x0
c0003472:	56                   	push   esi
c0003473:	e8 37 f7 ff ff       	call   c0002baf <dir_next>
c0003478:	eb b3                	jmp    c000342d <store_xdir+0x31>
c000347a:	83 f8 02             	cmp    eax,0x2
c000347d:	76 05                	jbe    c0003484 <store_xdir+0x88>
c000347f:	b8 02 00 00 00       	mov    eax,0x2
c0003484:	83 c4 10             	add    esp,0x10
c0003487:	5b                   	pop    ebx
c0003488:	5e                   	pop    esi
c0003489:	5f                   	pop    edi
c000348a:	c3                   	ret    

c000348b <create_xdir>:
c000348b:	55                   	push   ebp
c000348c:	57                   	push   edi
c000348d:	bf 01 00 00 00       	mov    edi,0x1
c0003492:	56                   	push   esi
c0003493:	31 f6                	xor    esi,esi
c0003495:	53                   	push   ebx
c0003496:	83 ec 1c             	sub    esp,0x1c
c0003499:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000349d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00034a1:	6a 40                	push   0x40
c00034a3:	6a 00                	push   0x0
c00034a5:	53                   	push   ebx
c00034a6:	e8 2b e7 ff ff       	call   c0001bd6 <mem_set>
c00034ab:	83 c4 0c             	add    esp,0xc
c00034ae:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c00034b1:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c00034b5:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00034ba:	b9 40 00 00 00       	mov    ecx,0x40
c00034bf:	8d 51 01             	lea    edx,[ecx+0x1]
c00034c2:	c6 04 0b c1          	mov    BYTE PTR [ebx+ecx*1],0xc1
c00034c6:	83 c1 02             	add    ecx,0x2
c00034c9:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00034cd:	66 85 ff             	test   di,di
c00034d0:	74 13                	je     c00034e5 <create_xdir+0x5a>
c00034d2:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00034d7:	66 8b 7c 55 00       	mov    di,WORD PTR [ebp+edx*2+0x0]
c00034dc:	66 83 ff 01          	cmp    di,0x1
c00034e0:	80 5c 24 0f ff       	sbb    BYTE PTR [esp+0xf],0xff
c00034e5:	0f b7 d7             	movzx  edx,di
c00034e8:	52                   	push   edx
c00034e9:	8d 14 0b             	lea    edx,[ebx+ecx*1]
c00034ec:	52                   	push   edx
c00034ed:	e8 9f e6 ff ff       	call   c0001b91 <st_word>
c00034f2:	58                   	pop    eax
c00034f3:	83 c1 02             	add    ecx,0x2
c00034f6:	5a                   	pop    edx
c00034f7:	f6 c1 1f             	test   cl,0x1f
c00034fa:	75 d1                	jne    c00034cd <create_xdir+0x42>
c00034fc:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0003501:	8d 46 01             	lea    eax,[esi+0x1]
c0003504:	66 83 7c 55 00 00    	cmp    WORD PTR [ebp+edx*2+0x0],0x0
c000350a:	74 04                	je     c0003510 <create_xdir+0x85>
c000350c:	89 c6                	mov    esi,eax
c000350e:	eb af                	jmp    c00034bf <create_xdir+0x34>
c0003510:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003514:	83 c3 24             	add    ebx,0x24
c0003517:	88 43 ff             	mov    BYTE PTR [ebx-0x1],al
c000351a:	83 ec 0c             	sub    esp,0xc
c000351d:	8d 46 02             	lea    eax,[esi+0x2]
c0003520:	88 43 dd             	mov    BYTE PTR [ebx-0x23],al
c0003523:	55                   	push   ebp
c0003524:	e8 8e fb ff ff       	call   c00030b7 <xname_sum>
c0003529:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000352d:	0f b7 c0             	movzx  eax,ax
c0003530:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0003534:	83 c4 2c             	add    esp,0x2c
c0003537:	5b                   	pop    ebx
c0003538:	5e                   	pop    esi
c0003539:	5f                   	pop    edi
c000353a:	5d                   	pop    ebp
c000353b:	e9 51 e6 ff ff       	jmp    c0001b91 <st_word>

c0003540 <dir_read>:
c0003540:	55                   	push   ebp
c0003541:	57                   	push   edi
c0003542:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003547:	56                   	push   esi
c0003548:	be 04 00 00 00       	mov    esi,0x4
c000354d:	53                   	push   ebx
c000354e:	83 ec 1c             	sub    esp,0x1c
c0003551:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0003555:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c000355a:	8b 2b                	mov    ebp,DWORD PTR [ebx]
c000355c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000355f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003562:	89 d1                	mov    ecx,edx
c0003564:	09 c1                	or     ecx,eax
c0003566:	0f 84 3f 01 00 00    	je     c00036ab <dir_read+0x16b>
c000356c:	51                   	push   ecx
c000356d:	52                   	push   edx
c000356e:	50                   	push   eax
c000356f:	55                   	push   ebp
c0003570:	e8 11 e9 ff ff       	call   c0001e86 <move_window>
c0003575:	83 c4 10             	add    esp,0x10
c0003578:	89 c6                	mov    esi,eax
c000357a:	85 c0                	test   eax,eax
c000357c:	0f 85 38 01 00 00    	jne    c00036ba <dir_read+0x17a>
c0003582:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0003585:	8a 10                	mov    dl,BYTE PTR [eax]
c0003587:	84 d2                	test   dl,dl
c0003589:	0f 84 26 01 00 00    	je     c00036b5 <dir_read+0x175>
c000358f:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003593:	75 4d                	jne    c00035e2 <dir_read+0xa2>
c0003595:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000359a:	74 10                	je     c00035ac <dir_read+0x6c>
c000359c:	80 fa 83             	cmp    dl,0x83
c000359f:	0f 85 ed 00 00 00    	jne    c0003692 <dir_read+0x152>
c00035a5:	31 f6                	xor    esi,esi
c00035a7:	e9 1c 01 00 00       	jmp    c00036c8 <dir_read+0x188>
c00035ac:	80 fa 85             	cmp    dl,0x85
c00035af:	0f 85 dd 00 00 00    	jne    c0003692 <dir_read+0x152>
c00035b5:	83 ec 0c             	sub    esp,0xc
c00035b8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00035bb:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00035be:	53                   	push   ebx
c00035bf:	e8 37 fc ff ff       	call   c00031fb <load_xdir>
c00035c4:	83 c4 10             	add    esp,0x10
c00035c7:	89 c6                	mov    esi,eax
c00035c9:	85 c0                	test   eax,eax
c00035cb:	0f 85 e9 00 00 00    	jne    c00036ba <dir_read+0x17a>
c00035d1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00035d4:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00035d7:	83 e0 3f             	and    eax,0x3f
c00035da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00035dd:	e9 e6 00 00 00       	jmp    c00036c8 <dir_read+0x188>
c00035e2:	8a 48 0b             	mov    cl,BYTE PTR [eax+0xb]
c00035e5:	83 e1 3f             	and    ecx,0x3f
c00035e8:	80 fa 2e             	cmp    dl,0x2e
c00035eb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00035ef:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00035f2:	0f 84 95 00 00 00    	je     c000368d <dir_read+0x14d>
c00035f8:	80 fa e5             	cmp    dl,0xe5
c00035fb:	0f 84 8c 00 00 00    	je     c000368d <dir_read+0x14d>
c0003601:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003605:	83 e1 1f             	and    ecx,0x1f
c0003608:	83 f9 08             	cmp    ecx,0x8
c000360b:	0f 94 c1             	sete   cl
c000360e:	0f b6 c9             	movzx  ecx,cl
c0003611:	3b 4c 24 34          	cmp    ecx,DWORD PTR [esp+0x34]
c0003615:	75 76                	jne    c000368d <dir_read+0x14d>
c0003617:	80 7c 24 0c 0f       	cmp    BYTE PTR [esp+0xc],0xf
c000361c:	75 4a                	jne    c0003668 <dir_read+0x128>
c000361e:	f6 c2 40             	test   dl,0x40
c0003621:	74 12                	je     c0003635 <dir_read+0xf5>
c0003623:	8a 48 0d             	mov    cl,BYTE PTR [eax+0xd]
c0003626:	83 e2 bf             	and    edx,0xffffffbf
c0003629:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000362d:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0003630:	89 4b 48             	mov    DWORD PTR [ebx+0x48],ecx
c0003633:	eb 06                	jmp    c000363b <dir_read+0xfb>
c0003635:	89 f9                	mov    ecx,edi
c0003637:	38 d1                	cmp    cl,dl
c0003639:	75 52                	jne    c000368d <dir_read+0x14d>
c000363b:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000363f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003644:	38 48 0d             	cmp    BYTE PTR [eax+0xd],cl
c0003647:	75 49                	jne    c0003692 <dir_read+0x152>
c0003649:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000364d:	52                   	push   edx
c000364e:	52                   	push   edx
c000364f:	50                   	push   eax
c0003650:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0003653:	e8 3b f8 ff ff       	call   c0002e93 <pick_lfn>
c0003658:	83 c4 10             	add    esp,0x10
c000365b:	85 c0                	test   eax,eax
c000365d:	74 33                	je     c0003692 <dir_read+0x152>
c000365f:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0003663:	8d 7a ff             	lea    edi,[edx-0x1]
c0003666:	eb 2a                	jmp    c0003692 <dir_read+0x152>
c0003668:	89 fa                	mov    edx,edi
c000366a:	84 d2                	test   dl,dl
c000366c:	75 16                	jne    c0003684 <dir_read+0x144>
c000366e:	83 ec 0c             	sub    esp,0xc
c0003671:	50                   	push   eax
c0003672:	e8 fd f9 ff ff       	call   c0003074 <sum_sfn>
c0003677:	83 c4 10             	add    esp,0x10
c000367a:	3a 44 24 0b          	cmp    al,BYTE PTR [esp+0xb]
c000367e:	0f 84 21 ff ff ff    	je     c00035a5 <dir_read+0x65>
c0003684:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000368b:	eb 3b                	jmp    c00036c8 <dir_read+0x188>
c000368d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003692:	50                   	push   eax
c0003693:	50                   	push   eax
c0003694:	6a 00                	push   0x0
c0003696:	53                   	push   ebx
c0003697:	e8 13 f5 ff ff       	call   c0002baf <dir_next>
c000369c:	83 c4 10             	add    esp,0x10
c000369f:	89 c6                	mov    esi,eax
c00036a1:	85 c0                	test   eax,eax
c00036a3:	0f 84 b3 fe ff ff    	je     c000355c <dir_read+0x1c>
c00036a9:	eb 0f                	jmp    c00036ba <dir_read+0x17a>
c00036ab:	85 f6                	test   esi,esi
c00036ad:	0f 84 f2 fe ff ff    	je     c00035a5 <dir_read+0x65>
c00036b3:	eb 05                	jmp    c00036ba <dir_read+0x17a>
c00036b5:	be 04 00 00 00       	mov    esi,0x4
c00036ba:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00036c1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00036c8:	83 c4 1c             	add    esp,0x1c
c00036cb:	89 f0                	mov    eax,esi
c00036cd:	5b                   	pop    ebx
c00036ce:	5e                   	pop    esi
c00036cf:	5f                   	pop    edi
c00036d0:	5d                   	pop    ebp
c00036d1:	c3                   	ret    

c00036d2 <dir_find>:
c00036d2:	55                   	push   ebp
c00036d3:	57                   	push   edi
c00036d4:	56                   	push   esi
c00036d5:	53                   	push   ebx
c00036d6:	83 ec 24             	sub    esp,0x24
c00036d9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00036dd:	8b 33                	mov    esi,DWORD PTR [ebx]
c00036df:	6a 00                	push   0x0
c00036e1:	53                   	push   ebx
c00036e2:	e8 c1 f3 ff ff       	call   c0002aa8 <dir_sdi>
c00036e7:	83 c4 10             	add    esp,0x10
c00036ea:	89 c5                	mov    ebp,eax
c00036ec:	85 c0                	test   eax,eax
c00036ee:	0f 85 e3 01 00 00    	jne    c00038d7 <dir_find+0x205>
c00036f4:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00036f7:	0f 85 b5 00 00 00    	jne    c00037b2 <dir_find+0xe0>
c00036fd:	83 ec 0c             	sub    esp,0xc
c0003700:	ff 76 0c             	push   DWORD PTR [esi+0xc]
c0003703:	e8 af f9 ff ff       	call   c00030b7 <xname_sum>
c0003708:	83 c4 10             	add    esp,0x10
c000370b:	89 c7                	mov    edi,eax
c000370d:	50                   	push   eax
c000370e:	50                   	push   eax
c000370f:	6a 00                	push   0x0
c0003711:	53                   	push   ebx
c0003712:	e8 29 fe ff ff       	call   c0003540 <dir_read>
c0003717:	83 c4 10             	add    esp,0x10
c000371a:	85 c0                	test   eax,eax
c000371c:	0f 85 9c 01 00 00    	jne    c00038be <dir_find+0x1ec>
c0003722:	83 ec 0c             	sub    esp,0xc
c0003725:	8b 56 10             	mov    edx,DWORD PTR [esi+0x10]
c0003728:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372c:	8d 42 24             	lea    eax,[edx+0x24]
c000372f:	50                   	push   eax
c0003730:	e8 e0 e3 ff ff       	call   c0001b15 <ld_word>
c0003735:	83 c4 10             	add    esp,0x10
c0003738:	66 39 f8             	cmp    ax,di
c000373b:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000373e:	75 cd                	jne    c000370d <dir_find+0x3b>
c0003740:	8a 42 23             	mov    al,BYTE PTR [edx+0x23]
c0003743:	31 c9                	xor    ecx,ecx
c0003745:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003749:	ba 40 00 00 00       	mov    edx,0x40
c000374e:	38 4c 24 04          	cmp    BYTE PTR [esp+0x4],cl
c0003752:	0f 84 71 01 00 00    	je     c00038c9 <dir_find+0x1f7>
c0003758:	f6 c2 1f             	test   dl,0x1f
c000375b:	75 03                	jne    c0003760 <dir_find+0x8e>
c000375d:	83 c2 02             	add    edx,0x2
c0003760:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003764:	89 d0                	mov    eax,edx
c0003766:	83 ec 0c             	sub    esp,0xc
c0003769:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000376c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003770:	50                   	push   eax
c0003771:	e8 9f e3 ff ff       	call   c0001b15 <ld_word>
c0003776:	0f b7 c0             	movzx  eax,ax
c0003779:	89 04 24             	mov    DWORD PTR [esp],eax
c000377c:	e8 4b 55 00 00       	call   c0008ccc <ff_wtoupper>
c0003781:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003785:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003789:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000378c:	0f b7 04 48          	movzx  eax,WORD PTR [eax+ecx*2]
c0003790:	89 04 24             	mov    DWORD PTR [esp],eax
c0003793:	e8 34 55 00 00       	call   c0008ccc <ff_wtoupper>
c0003798:	83 c4 10             	add    esp,0x10
c000379b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000379e:	0f 85 69 ff ff ff    	jne    c000370d <dir_find+0x3b>
c00037a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00037a8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00037ac:	83 c2 02             	add    edx,0x2
c00037af:	41                   	inc    ecx
c00037b0:	eb 9c                	jmp    c000374e <dir_find+0x7c>
c00037b2:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00037b9:	c6 04 24 ff          	mov    BYTE PTR [esp],0xff
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	50                   	push   eax
c00037c3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00037c6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00037c9:	56                   	push   esi
c00037ca:	e8 b7 e6 ff ff       	call   c0001e86 <move_window>
c00037cf:	83 c4 10             	add    esp,0x10
c00037d2:	85 c0                	test   eax,eax
c00037d4:	0f 85 e4 00 00 00    	jne    c00038be <dir_find+0x1ec>
c00037da:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037dd:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037df:	84 c9                	test   cl,cl
c00037e1:	0f 84 db 00 00 00    	je     c00038c2 <dir_find+0x1f0>
c00037e7:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c00037ea:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00037ee:	83 e0 3f             	and    eax,0x3f
c00037f1:	80 f9 e5             	cmp    cl,0xe5
c00037f4:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037f7:	0f 84 a0 00 00 00    	je     c000389d <dir_find+0x1cb>
c00037fd:	f6 44 24 04 08       	test   BYTE PTR [esp+0x4],0x8
c0003802:	74 0a                	je     c000380e <dir_find+0x13c>
c0003804:	3c 0f                	cmp    al,0xf
c0003806:	0f 85 91 00 00 00    	jne    c000389d <dir_find+0x1cb>
c000380c:	eb 04                	jmp    c0003812 <dir_find+0x140>
c000380e:	3c 0f                	cmp    al,0xf
c0003810:	75 52                	jne    c0003864 <dir_find+0x192>
c0003812:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003816:	0f 85 8d 00 00 00    	jne    c00038a9 <dir_find+0x1d7>
c000381c:	f6 c1 40             	test   cl,0x40
c000381f:	74 11                	je     c0003832 <dir_find+0x160>
c0003821:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003824:	83 e1 bf             	and    ecx,0xffffffbf
c0003827:	88 04 24             	mov    BYTE PTR [esp],al
c000382a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000382d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003830:	eb 06                	jmp    c0003838 <dir_find+0x166>
c0003832:	89 f8                	mov    eax,edi
c0003834:	38 c8                	cmp    al,cl
c0003836:	75 6c                	jne    c00038a4 <dir_find+0x1d2>
c0003838:	8a 04 24             	mov    al,BYTE PTR [esp]
c000383b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003840:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003843:	75 64                	jne    c00038a9 <dir_find+0x1d7>
c0003845:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0003849:	50                   	push   eax
c000384a:	50                   	push   eax
c000384b:	52                   	push   edx
c000384c:	ff 76 0c             	push   DWORD PTR [esi+0xc]
c000384f:	e8 7f f5 ff ff       	call   c0002dd3 <cmp_lfn>
c0003854:	83 c4 10             	add    esp,0x10
c0003857:	85 c0                	test   eax,eax
c0003859:	74 4e                	je     c00038a9 <dir_find+0x1d7>
c000385b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000385f:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003862:	eb 45                	jmp    c00038a9 <dir_find+0x1d7>
c0003864:	89 f8                	mov    eax,edi
c0003866:	84 c0                	test   al,al
c0003868:	75 19                	jne    c0003883 <dir_find+0x1b1>
c000386a:	83 ec 0c             	sub    esp,0xc
c000386d:	52                   	push   edx
c000386e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0003872:	e8 fd f7 ff ff       	call   c0003074 <sum_sfn>
c0003877:	83 c4 10             	add    esp,0x10
c000387a:	3a 04 24             	cmp    al,BYTE PTR [esp]
c000387d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0003881:	74 54                	je     c00038d7 <dir_find+0x205>
c0003883:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0003887:	75 14                	jne    c000389d <dir_find+0x1cb>
c0003889:	8d 43 3c             	lea    eax,[ebx+0x3c]
c000388c:	51                   	push   ecx
c000388d:	6a 0b                	push   0xb
c000388f:	50                   	push   eax
c0003890:	52                   	push   edx
c0003891:	e8 57 e3 ff ff       	call   c0001bed <mem_cmp>
c0003896:	83 c4 10             	add    esp,0x10
c0003899:	85 c0                	test   eax,eax
c000389b:	74 3a                	je     c00038d7 <dir_find+0x205>
c000389d:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038a4:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038a9:	50                   	push   eax
c00038aa:	50                   	push   eax
c00038ab:	6a 00                	push   0x0
c00038ad:	53                   	push   ebx
c00038ae:	e8 fc f2 ff ff       	call   c0002baf <dir_next>
c00038b3:	83 c4 10             	add    esp,0x10
c00038b6:	85 c0                	test   eax,eax
c00038b8:	0f 84 04 ff ff ff    	je     c00037c2 <dir_find+0xf0>
c00038be:	89 c5                	mov    ebp,eax
c00038c0:	eb 15                	jmp    c00038d7 <dir_find+0x205>
c00038c2:	bd 04 00 00 00       	mov    ebp,0x4
c00038c7:	eb 0e                	jmp    c00038d7 <dir_find+0x205>
c00038c9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00038cc:	66 83 3c 48 00       	cmp    WORD PTR [eax+ecx*2],0x0
c00038d1:	0f 85 36 fe ff ff    	jne    c000370d <dir_find+0x3b>
c00038d7:	83 c4 1c             	add    esp,0x1c
c00038da:	89 e8                	mov    eax,ebp
c00038dc:	5b                   	pop    ebx
c00038dd:	5e                   	pop    esi
c00038de:	5f                   	pop    edi
c00038df:	5d                   	pop    ebp
c00038e0:	c3                   	ret    

c00038e1 <dir_register>:
c00038e1:	55                   	push   ebp
c00038e2:	57                   	push   edi
c00038e3:	bf 06 00 00 00       	mov    edi,0x6
c00038e8:	56                   	push   esi
c00038e9:	53                   	push   ebx
c00038ea:	83 ec 6c             	sub    esp,0x6c
c00038ed:	8b 9c 24 80 00 00 00 	mov    ebx,DWORD PTR [esp+0x80]
c00038f4:	f6 43 47 a0          	test   BYTE PTR [ebx+0x47],0xa0
c00038f8:	0f 85 94 02 00 00    	jne    c0003b92 <dir_register+0x2b1>
c00038fe:	8b 33                	mov    esi,DWORD PTR [ebx]
c0003900:	31 c9                	xor    ecx,ecx
c0003902:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003905:	66 83 3c 48 00       	cmp    WORD PTR [eax+ecx*2],0x0
c000390a:	74 03                	je     c000390f <dir_register+0x2e>
c000390c:	41                   	inc    ecx
c000390d:	eb f6                	jmp    c0003905 <dir_register+0x24>
c000390f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003912:	0f 85 fc 00 00 00    	jne    c0003a14 <dir_register+0x133>
c0003918:	8d 41 0e             	lea    eax,[ecx+0xe]
c000391b:	31 d2                	xor    edx,edx
c000391d:	b9 0f 00 00 00       	mov    ecx,0xf
c0003922:	f7 f1                	div    ecx
c0003924:	89 c5                	mov    ebp,eax
c0003926:	50                   	push   eax
c0003927:	50                   	push   eax
c0003928:	8d 45 02             	lea    eax,[ebp+0x2]
c000392b:	50                   	push   eax
c000392c:	53                   	push   ebx
c000392d:	e8 bb f3 ff ff       	call   c0002ced <dir_alloc>
c0003932:	83 c4 10             	add    esp,0x10
c0003935:	89 c7                	mov    edi,eax
c0003937:	85 c0                	test   eax,eax
c0003939:	0f 85 53 02 00 00    	jne    c0003b92 <dir_register+0x2b1>
c000393f:	81 c5 01 00 00 08    	add    ebp,0x8000001
c0003945:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003948:	c1 e5 05             	shl    ebp,0x5
c000394b:	29 e8                	sub    eax,ebp
c000394d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003950:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0003953:	a8 04                	test   al,0x4
c0003955:	0f 84 a7 00 00 00    	je     c0003a02 <dir_register+0x121>
c000395b:	83 ec 0c             	sub    esp,0xc
c000395e:	83 e0 fb             	and    eax,0xfffffffb
c0003961:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003964:	53                   	push   ebx
c0003965:	e8 db eb ff ff       	call   c0002545 <fill_first_frag>
c000396a:	83 c4 10             	add    esp,0x10
c000396d:	85 c0                	test   eax,eax
c000396f:	0f 85 1b 02 00 00    	jne    c0003b90 <dir_register+0x2af>
c0003975:	50                   	push   eax
c0003976:	6a ff                	push   0xffffffff
c0003978:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000397b:	53                   	push   ebx
c000397c:	e8 01 ec ff ff       	call   c0002582 <fill_last_frag>
c0003981:	83 c4 10             	add    esp,0x10
c0003984:	85 c0                	test   eax,eax
c0003986:	0f 85 04 02 00 00    	jne    c0003b90 <dir_register+0x2af>
c000398c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003990:	74 70                	je     c0003a02 <dir_register+0x121>
c0003992:	55                   	push   ebp
c0003993:	55                   	push   ebp
c0003994:	53                   	push   ebx
c0003995:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0003999:	55                   	push   ebp
c000399a:	e8 05 fa ff ff       	call   c00033a4 <load_obj_xdir>
c000399f:	83 c4 10             	add    esp,0x10
c00039a2:	85 c0                	test   eax,eax
c00039a4:	0f 85 e6 01 00 00    	jne    c0003b90 <dir_register+0x2af>
c00039aa:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00039ae:	31 d2                	xor    edx,edx
c00039b0:	c1 e0 09             	shl    eax,0x9
c00039b3:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c00039b6:	13 53 10             	adc    edx,DWORD PTR [ebx+0x10]
c00039b9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039bc:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c00039bf:	51                   	push   ecx
c00039c0:	52                   	push   edx
c00039c1:	50                   	push   eax
c00039c2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00039c5:	83 c0 38             	add    eax,0x38
c00039c8:	50                   	push   eax
c00039c9:	e8 da e1 ff ff       	call   c0001ba8 <st_qword>
c00039ce:	83 c4 0c             	add    esp,0xc
c00039d1:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00039d4:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00039d7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00039da:	83 c0 28             	add    eax,0x28
c00039dd:	50                   	push   eax
c00039de:	e8 c5 e1 ff ff       	call   c0001ba8 <st_qword>
c00039e3:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00039e6:	8b 56 10             	mov    edx,DWORD PTR [esi+0x10]
c00039e9:	83 c8 01             	or     eax,0x1
c00039ec:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00039ef:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00039f2:	e8 05 fa ff ff       	call   c00033fc <store_xdir>
c00039f7:	83 c4 10             	add    esp,0x10
c00039fa:	85 c0                	test   eax,eax
c00039fc:	0f 85 8e 01 00 00    	jne    c0003b90 <dir_register+0x2af>
c0003a02:	50                   	push   eax
c0003a03:	50                   	push   eax
c0003a04:	ff 76 0c             	push   DWORD PTR [esi+0xc]
c0003a07:	ff 76 10             	push   DWORD PTR [esi+0x10]
c0003a0a:	e8 7c fa ff ff       	call   c000348b <create_xdir>
c0003a0f:	e9 77 01 00 00       	jmp    c0003b8b <dir_register+0x2aa>
c0003a14:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003a18:	8d 43 3c             	lea    eax,[ebx+0x3c]
c0003a1b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003a1f:	50                   	push   eax
c0003a20:	6a 0c                	push   0xc
c0003a22:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0003a26:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0003a2a:	55                   	push   ebp
c0003a2b:	e8 8a e1 ff ff       	call   c0001bba <mem_cpy>
c0003a30:	83 c4 10             	add    esp,0x10
c0003a33:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003a38:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003a3c:	74 58                	je     c0003a96 <dir_register+0x1b5>
c0003a3e:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0003a42:	ba 01 00 00 00       	mov    edx,0x1
c0003a47:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003a4b:	52                   	push   edx
c0003a4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a50:	ff 76 0c             	push   DWORD PTR [esi+0xc]
c0003a53:	55                   	push   ebp
c0003a54:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0003a58:	e8 49 f5 ff ff       	call   c0002fa6 <gen_numname>
c0003a5d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0003a60:	e8 6d fc ff ff       	call   c00036d2 <dir_find>
c0003a65:	83 c4 10             	add    esp,0x10
c0003a68:	89 c7                	mov    edi,eax
c0003a6a:	85 c0                	test   eax,eax
c0003a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a70:	75 14                	jne    c0003a86 <dir_register+0x1a5>
c0003a72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a76:	42                   	inc    edx
c0003a77:	83 fa 64             	cmp    edx,0x64
c0003a7a:	75 cb                	jne    c0003a47 <dir_register+0x166>
c0003a7c:	bf 07 00 00 00       	mov    edi,0x7
c0003a81:	e9 0c 01 00 00       	jmp    c0003b92 <dir_register+0x2b1>
c0003a86:	83 f8 04             	cmp    eax,0x4
c0003a89:	0f 85 03 01 00 00    	jne    c0003b92 <dir_register+0x2b1>
c0003a8f:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003a93:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0003a96:	bd 01 00 00 00       	mov    ebp,0x1
c0003a9b:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003aa0:	74 0f                	je     c0003ab1 <dir_register+0x1d0>
c0003aa2:	8d 41 0c             	lea    eax,[ecx+0xc]
c0003aa5:	bf 0d 00 00 00       	mov    edi,0xd
c0003aaa:	31 d2                	xor    edx,edx
c0003aac:	f7 f7                	div    edi
c0003aae:	8d 68 01             	lea    ebp,[eax+0x1]
c0003ab1:	50                   	push   eax
c0003ab2:	50                   	push   eax
c0003ab3:	55                   	push   ebp
c0003ab4:	53                   	push   ebx
c0003ab5:	e8 33 f2 ff ff       	call   c0002ced <dir_alloc>
c0003aba:	83 c4 10             	add    esp,0x10
c0003abd:	89 c7                	mov    edi,eax
c0003abf:	85 c0                	test   eax,eax
c0003ac1:	0f 85 cb 00 00 00    	jne    c0003b92 <dir_register+0x2b1>
c0003ac7:	4d                   	dec    ebp
c0003ac8:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003acc:	74 79                	je     c0003b47 <dir_register+0x266>
c0003ace:	50                   	push   eax
c0003acf:	50                   	push   eax
c0003ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ad4:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0003ad7:	c1 e0 05             	shl    eax,0x5
c0003ada:	29 c1                	sub    ecx,eax
c0003adc:	51                   	push   ecx
c0003add:	53                   	push   ebx
c0003ade:	e8 c5 ef ff ff       	call   c0002aa8 <dir_sdi>
c0003ae3:	83 c4 10             	add    esp,0x10
c0003ae6:	89 c7                	mov    edi,eax
c0003ae8:	85 c0                	test   eax,eax
c0003aea:	0f 85 a2 00 00 00    	jne    c0003b92 <dir_register+0x2b1>
c0003af0:	83 ec 0c             	sub    esp,0xc
c0003af3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0003af7:	e8 78 f5 ff ff       	call   c0003074 <sum_sfn>
c0003afc:	83 c4 10             	add    esp,0x10
c0003aff:	0f b6 e8             	movzx  ebp,al
c0003b02:	50                   	push   eax
c0003b03:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0003b06:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0003b09:	56                   	push   esi
c0003b0a:	e8 77 e3 ff ff       	call   c0001e86 <move_window>
c0003b0f:	83 c4 10             	add    esp,0x10
c0003b12:	89 c7                	mov    edi,eax
c0003b14:	85 c0                	test   eax,eax
c0003b16:	75 7a                	jne    c0003b92 <dir_register+0x2b1>
c0003b18:	55                   	push   ebp
c0003b19:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0003b1e:	50                   	push   eax
c0003b1f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0003b22:	ff 76 0c             	push   DWORD PTR [esi+0xc]
c0003b25:	e8 ef f3 ff ff       	call   c0002f19 <put_lfn>
c0003b2a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b2e:	59                   	pop    ecx
c0003b2f:	5f                   	pop    edi
c0003b30:	6a 00                	push   0x0
c0003b32:	53                   	push   ebx
c0003b33:	e8 77 f0 ff ff       	call   c0002baf <dir_next>
c0003b38:	83 c4 10             	add    esp,0x10
c0003b3b:	89 c7                	mov    edi,eax
c0003b3d:	85 c0                	test   eax,eax
c0003b3f:	75 51                	jne    c0003b92 <dir_register+0x2b1>
c0003b41:	ff 4c 24 08          	dec    DWORD PTR [esp+0x8]
c0003b45:	75 bb                	jne    c0003b02 <dir_register+0x221>
c0003b47:	52                   	push   edx
c0003b48:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0003b4b:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0003b4e:	56                   	push   esi
c0003b4f:	e8 32 e3 ff ff       	call   c0001e86 <move_window>
c0003b54:	83 c4 10             	add    esp,0x10
c0003b57:	89 c7                	mov    edi,eax
c0003b59:	85 c0                	test   eax,eax
c0003b5b:	75 35                	jne    c0003b92 <dir_register+0x2b1>
c0003b5d:	50                   	push   eax
c0003b5e:	6a 20                	push   0x20
c0003b60:	6a 00                	push   0x0
c0003b62:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0003b65:	e8 6c e0 ff ff       	call   c0001bd6 <mem_set>
c0003b6a:	83 c4 0c             	add    esp,0xc
c0003b6d:	6a 0b                	push   0xb
c0003b6f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0003b73:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0003b76:	e8 3f e0 ff ff       	call   c0001bba <mem_cpy>
c0003b7b:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0003b7e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b81:	83 e0 18             	and    eax,0x18
c0003b84:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003b87:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b8b:	83 c4 10             	add    esp,0x10
c0003b8e:	eb 02                	jmp    c0003b92 <dir_register+0x2b1>
c0003b90:	89 c7                	mov    edi,eax
c0003b92:	83 c4 6c             	add    esp,0x6c
c0003b95:	89 f8                	mov    eax,edi
c0003b97:	5b                   	pop    ebx
c0003b98:	5e                   	pop    esi
c0003b99:	5f                   	pop    edi
c0003b9a:	5d                   	pop    ebp
c0003b9b:	c3                   	ret    

c0003b9c <dir_remove>:
c0003b9c:	57                   	push   edi
c0003b9d:	56                   	push   esi
c0003b9e:	53                   	push   ebx
c0003b9f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0003ba3:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0003ba6:	8b 33                	mov    esi,DWORD PTR [ebx]
c0003ba8:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0003bab:	83 f8 ff             	cmp    eax,0xffffffff
c0003bae:	74 10                	je     c0003bc0 <dir_remove+0x24>
c0003bb0:	51                   	push   ecx
c0003bb1:	51                   	push   ecx
c0003bb2:	50                   	push   eax
c0003bb3:	53                   	push   ebx
c0003bb4:	e8 ef ee ff ff       	call   c0002aa8 <dir_sdi>
c0003bb9:	83 c4 10             	add    esp,0x10
c0003bbc:	85 c0                	test   eax,eax
c0003bbe:	75 48                	jne    c0003c08 <dir_remove+0x6c>
c0003bc0:	52                   	push   edx
c0003bc1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0003bc4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0003bc7:	56                   	push   esi
c0003bc8:	e8 b9 e2 ff ff       	call   c0001e86 <move_window>
c0003bcd:	83 c4 10             	add    esp,0x10
c0003bd0:	85 c0                	test   eax,eax
c0003bd2:	75 2a                	jne    c0003bfe <dir_remove+0x62>
c0003bd4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003bd7:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003bda:	75 05                	jne    c0003be1 <dir_remove+0x45>
c0003bdc:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003bdf:	eb 03                	jmp    c0003be4 <dir_remove+0x48>
c0003be1:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003be4:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003be8:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003beb:	73 1b                	jae    c0003c08 <dir_remove+0x6c>
c0003bed:	50                   	push   eax
c0003bee:	50                   	push   eax
c0003bef:	6a 00                	push   0x0
c0003bf1:	53                   	push   ebx
c0003bf2:	e8 b8 ef ff ff       	call   c0002baf <dir_next>
c0003bf7:	83 c4 10             	add    esp,0x10
c0003bfa:	85 c0                	test   eax,eax
c0003bfc:	74 c2                	je     c0003bc0 <dir_remove+0x24>
c0003bfe:	83 f8 04             	cmp    eax,0x4
c0003c01:	75 05                	jne    c0003c08 <dir_remove+0x6c>
c0003c03:	b8 02 00 00 00       	mov    eax,0x2
c0003c08:	5b                   	pop    ebx
c0003c09:	5e                   	pop    esi
c0003c0a:	5f                   	pop    edi
c0003c0b:	c3                   	ret    

c0003c0c <get_fileinfo>:
c0003c0c:	55                   	push   ebp
c0003c0d:	57                   	push   edi
c0003c0e:	56                   	push   esi
c0003c0f:	53                   	push   ebx
c0003c10:	83 ec 1c             	sub    esp,0x1c
c0003c13:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0003c17:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0003c1b:	8b 16                	mov    edx,DWORD PTR [esi]
c0003c1d:	c6 43 1a 00          	mov    BYTE PTR [ebx+0x1a],0x0
c0003c21:	8b 46 34             	mov    eax,DWORD PTR [esi+0x34]
c0003c24:	0b 46 30             	or     eax,DWORD PTR [esi+0x30]
c0003c27:	0f 84 0d 02 00 00    	je     c0003e3a <get_fileinfo+0x22e>
c0003c2d:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0003c30:	75 13                	jne    c0003c45 <get_fileinfo+0x39>
c0003c32:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0003c35:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0003c39:	83 c4 1c             	add    esp,0x1c
c0003c3c:	5b                   	pop    ebx
c0003c3d:	5e                   	pop    esi
c0003c3e:	5f                   	pop    edi
c0003c3f:	5d                   	pop    ebp
c0003c40:	e9 ba f4 ff ff       	jmp    c00030ff <get_xfileinfo>
c0003c45:	83 7e 48 ff          	cmp    DWORD PTR [esi+0x48],0xffffffff
c0003c49:	74 76                	je     c0003cc1 <get_fileinfo+0xb5>
c0003c4b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0003c53:	31 ed                	xor    ebp,ebp
c0003c55:	31 ff                	xor    edi,edi
c0003c57:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0003c5a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c5e:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003c62:	66 85 c0             	test   ax,ax
c0003c65:	74 4e                	je     c0003cb5 <get_fileinfo+0xa9>
c0003c67:	66 85 ed             	test   bp,bp
c0003c6a:	75 0d                	jne    c0003c79 <get_fileinfo+0x6d>
c0003c6c:	8d 88 00 28 00 00    	lea    ecx,[eax+0x2800]
c0003c72:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003c77:	76 31                	jbe    c0003caa <get_fileinfo+0x9e>
c0003c79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003c7d:	b9 ff 00 00 00       	mov    ecx,0xff
c0003c82:	29 f9                	sub    ecx,edi
c0003c84:	52                   	push   edx
c0003c85:	51                   	push   ecx
c0003c86:	8d 4c 3b 1a          	lea    ecx,[ebx+edi*1+0x1a]
c0003c8a:	51                   	push   ecx
c0003c8b:	89 e9                	mov    ecx,ebp
c0003c8d:	c1 e1 10             	shl    ecx,0x10
c0003c90:	09 c8                	or     eax,ecx
c0003c92:	50                   	push   eax
c0003c93:	e8 5b e0 ff ff       	call   c0001cf3 <put_utf>
c0003c98:	83 c4 10             	add    esp,0x10
c0003c9b:	84 c0                	test   al,al
c0003c9d:	74 14                	je     c0003cb3 <get_fileinfo+0xa7>
c0003c9f:	0f b6 c0             	movzx  eax,al
c0003ca2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003ca6:	01 c7                	add    edi,eax
c0003ca8:	31 c0                	xor    eax,eax
c0003caa:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003caf:	89 c5                	mov    ebp,eax
c0003cb1:	eb a4                	jmp    c0003c57 <get_fileinfo+0x4b>
c0003cb3:	31 ff                	xor    edi,edi
c0003cb5:	66 85 ed             	test   bp,bp
c0003cb8:	74 02                	je     c0003cbc <get_fileinfo+0xb0>
c0003cba:	31 ff                	xor    edi,edi
c0003cbc:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0003cc1:	31 ff                	xor    edi,edi
c0003cc3:	31 c9                	xor    ecx,ecx
c0003cc5:	83 f9 0a             	cmp    ecx,0xa
c0003cc8:	0f 87 c5 00 00 00    	ja     c0003d93 <get_fileinfo+0x187>
c0003cce:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0003cd1:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003cd4:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0003cd8:	66 83 fa 20          	cmp    dx,0x20
c0003cdc:	0f 84 aa 00 00 00    	je     c0003d8c <get_fileinfo+0x180>
c0003ce2:	66 83 fa 05          	cmp    dx,0x5
c0003ce6:	75 05                	jne    c0003ced <get_fileinfo+0xe1>
c0003ce8:	ba e5 00 00 00       	mov    edx,0xe5
c0003ced:	83 ff 0b             	cmp    edi,0xb
c0003cf0:	77 0b                	ja     c0003cfd <get_fileinfo+0xf1>
c0003cf2:	83 fd 09             	cmp    ebp,0x9
c0003cf5:	75 06                	jne    c0003cfd <get_fileinfo+0xf1>
c0003cf7:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0003cfc:	47                   	inc    edi
c0003cfd:	0f b7 c2             	movzx  eax,dx
c0003d00:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003d04:	50                   	push   eax
c0003d05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0003d09:	e8 1c df ff ff       	call   c0001c2a <dbc_1st>
c0003d0e:	83 c4 08             	add    esp,0x8
c0003d11:	85 c0                	test   eax,eax
c0003d13:	74 38                	je     c0003d4d <get_fileinfo+0x141>
c0003d15:	83 fd 08             	cmp    ebp,0x8
c0003d18:	74 33                	je     c0003d4d <get_fileinfo+0x141>
c0003d1a:	83 fd 0b             	cmp    ebp,0xb
c0003d1d:	74 2e                	je     c0003d4d <get_fileinfo+0x141>
c0003d1f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0003d22:	8a 04 28             	mov    al,BYTE PTR [eax+ebp*1]
c0003d25:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003d29:	50                   	push   eax
c0003d2a:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0003d2f:	50                   	push   eax
c0003d30:	e8 f8 de ff ff       	call   c0001c2d <dbc_2nd>
c0003d35:	83 c4 08             	add    esp,0x8
c0003d38:	85 c0                	test   eax,eax
c0003d3a:	74 11                	je     c0003d4d <get_fileinfo+0x141>
c0003d3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d40:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0003d45:	c1 e2 08             	shl    edx,0x8
c0003d48:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003d4b:	09 c2                	or     edx,eax
c0003d4d:	0f b7 d2             	movzx  edx,dx
c0003d50:	51                   	push   ecx
c0003d51:	51                   	push   ecx
c0003d52:	68 b5 01 00 00       	push   0x1b5
c0003d57:	52                   	push   edx
c0003d58:	e8 03 4f 00 00       	call   c0008c60 <ff_oem2uni>
c0003d5d:	83 c4 10             	add    esp,0x10
c0003d60:	66 85 c0             	test   ax,ax
c0003d63:	75 04                	jne    c0003d69 <get_fileinfo+0x15d>
c0003d65:	31 ff                	xor    edi,edi
c0003d67:	eb 2a                	jmp    c0003d93 <get_fileinfo+0x187>
c0003d69:	0f b7 c0             	movzx  eax,ax
c0003d6c:	52                   	push   edx
c0003d6d:	ba 0c 00 00 00       	mov    edx,0xc
c0003d72:	29 fa                	sub    edx,edi
c0003d74:	52                   	push   edx
c0003d75:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0003d79:	52                   	push   edx
c0003d7a:	50                   	push   eax
c0003d7b:	e8 73 df ff ff       	call   c0001cf3 <put_utf>
c0003d80:	83 c4 10             	add    esp,0x10
c0003d83:	84 c0                	test   al,al
c0003d85:	74 de                	je     c0003d65 <get_fileinfo+0x159>
c0003d87:	0f b6 c0             	movzx  eax,al
c0003d8a:	01 c7                	add    edi,eax
c0003d8c:	89 e9                	mov    ecx,ebp
c0003d8e:	e9 32 ff ff ff       	jmp    c0003cc5 <get_fileinfo+0xb9>
c0003d93:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0003d98:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0003d9c:	75 54                	jne    c0003df2 <get_fileinfo+0x1e6>
c0003d9e:	85 ff                	test   edi,edi
c0003da0:	75 0b                	jne    c0003dad <get_fileinfo+0x1a1>
c0003da2:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0003da6:	b8 01 00 00 00       	mov    eax,0x1
c0003dab:	eb 33                	jmp    c0003de0 <get_fileinfo+0x1d4>
c0003dad:	b1 08                	mov    cl,0x8
c0003daf:	31 c0                	xor    eax,eax
c0003db1:	66 0f be 54 03 0d    	movsx  dx,BYTE PTR [ebx+eax*1+0xd]
c0003db7:	84 d2                	test   dl,dl
c0003db9:	74 25                	je     c0003de0 <get_fileinfo+0x1d4>
c0003dbb:	66 83 fa 2e          	cmp    dx,0x2e
c0003dbf:	74 16                	je     c0003dd7 <get_fileinfo+0x1cb>
c0003dc1:	8d 7a bf             	lea    edi,[edx-0x41]
c0003dc4:	66 83 ff 19          	cmp    di,0x19
c0003dc8:	77 0f                	ja     c0003dd9 <get_fileinfo+0x1cd>
c0003dca:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0003dcd:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003dd0:	74 07                	je     c0003dd9 <get_fileinfo+0x1cd>
c0003dd2:	83 c2 20             	add    edx,0x20
c0003dd5:	eb 02                	jmp    c0003dd9 <get_fileinfo+0x1cd>
c0003dd7:	b1 10                	mov    cl,0x10
c0003dd9:	88 54 03 1a          	mov    BYTE PTR [ebx+eax*1+0x1a],dl
c0003ddd:	40                   	inc    eax
c0003dde:	eb d1                	jmp    c0003db1 <get_fileinfo+0x1a5>
c0003de0:	c6 44 03 1a 00       	mov    BYTE PTR [ebx+eax*1+0x1a],0x0
c0003de5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0003de8:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003dec:	75 04                	jne    c0003df2 <get_fileinfo+0x1e6>
c0003dee:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0003df2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0003df5:	83 ec 0c             	sub    esp,0xc
c0003df8:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0003dfb:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0003dfe:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0003e01:	83 c0 1c             	add    eax,0x1c
c0003e04:	50                   	push   eax
c0003e05:	e8 1e dd ff ff       	call   c0001b28 <ld_dword>
c0003e0a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0003e11:	89 03                	mov    DWORD PTR [ebx],eax
c0003e13:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0003e16:	83 c0 16             	add    eax,0x16
c0003e19:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e1c:	e8 f4 dc ff ff       	call   c0001b15 <ld_word>
c0003e21:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0003e25:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0003e28:	83 c0 18             	add    eax,0x18
c0003e2b:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e2e:	e8 e2 dc ff ff       	call   c0001b15 <ld_word>
c0003e33:	83 c4 10             	add    esp,0x10
c0003e36:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0003e3a:	83 c4 1c             	add    esp,0x1c
c0003e3d:	5b                   	pop    ebx
c0003e3e:	5e                   	pop    esi
c0003e3f:	5f                   	pop    edi
c0003e40:	5d                   	pop    ebp
c0003e41:	c3                   	ret    

c0003e42 <create_name>:
c0003e42:	55                   	push   ebp
c0003e43:	57                   	push   edi
c0003e44:	56                   	push   esi
c0003e45:	31 f6                	xor    esi,esi
c0003e47:	53                   	push   ebx
c0003e48:	83 ec 2c             	sub    esp,0x2c
c0003e4b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0003e4f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003e51:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e55:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0003e59:	8b 00                	mov    eax,DWORD PTR [eax]
c0003e5b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003e5e:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e61:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0003e65:	50                   	push   eax
c0003e66:	e8 c5 dd ff ff       	call   c0001c30 <tchar2uni>
c0003e6b:	89 c1                	mov    ecx,eax
c0003e6d:	58                   	pop    eax
c0003e6e:	83 f9 ff             	cmp    ecx,0xffffffff
c0003e71:	75 0a                	jne    c0003e7d <create_name+0x3b>
c0003e73:	b8 06 00 00 00       	mov    eax,0x6
c0003e78:	e9 91 02 00 00       	jmp    c000410e <create_name+0x2cc>
c0003e7d:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0003e83:	76 0d                	jbe    c0003e92 <create_name+0x50>
c0003e85:	89 c8                	mov    eax,ecx
c0003e87:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0003e8a:	c1 e8 10             	shr    eax,0x10
c0003e8d:	66 89 04 73          	mov    WORD PTR [ebx+esi*2],ax
c0003e91:	46                   	inc    esi
c0003e92:	66 83 f9 1f          	cmp    cx,0x1f
c0003e96:	76 51                	jbe    c0003ee9 <create_name+0xa7>
c0003e98:	66 83 f9 5c          	cmp    cx,0x5c
c0003e9c:	74 37                	je     c0003ed5 <create_name+0x93>
c0003e9e:	66 83 f9 2f          	cmp    cx,0x2f
c0003ea2:	74 31                	je     c0003ed5 <create_name+0x93>
c0003ea4:	66 83 f9 7f          	cmp    cx,0x7f
c0003ea8:	77 14                	ja     c0003ebe <create_name+0x7c>
c0003eaa:	0f b7 c1             	movzx  eax,cx
c0003ead:	50                   	push   eax
c0003eae:	68 82 95 02 c0       	push   0xc0029582
c0003eb3:	e8 5c dd ff ff       	call   c0001c14 <chk_chr>
c0003eb8:	5b                   	pop    ebx
c0003eb9:	85 c0                	test   eax,eax
c0003ebb:	5d                   	pop    ebp
c0003ebc:	75 b5                	jne    c0003e73 <create_name+0x31>
c0003ebe:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ec4:	77 ad                	ja     c0003e73 <create_name+0x31>
c0003ec6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0003ec9:	66 89 0c 70          	mov    WORD PTR [eax+esi*2],cx
c0003ecd:	46                   	inc    esi
c0003ece:	eb 91                	jmp    c0003e61 <create_name+0x1f>
c0003ed0:	40                   	inc    eax
c0003ed1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003ed5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ed9:	8a 10                	mov    dl,BYTE PTR [eax]
c0003edb:	80 fa 2f             	cmp    dl,0x2f
c0003ede:	74 f0                	je     c0003ed0 <create_name+0x8e>
c0003ee0:	80 fa 5c             	cmp    dl,0x5c
c0003ee3:	74 eb                	je     c0003ed0 <create_name+0x8e>
c0003ee5:	31 db                	xor    ebx,ebx
c0003ee7:	eb 02                	jmp    c0003eeb <create_name+0xa9>
c0003ee9:	b3 04                	mov    bl,0x4
c0003eeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eef:	89 07                	mov    DWORD PTR [edi],eax
c0003ef1:	85 f6                	test   esi,esi
c0003ef3:	74 17                	je     c0003f0c <create_name+0xca>
c0003ef5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0003ef8:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003efd:	66 83 f8 20          	cmp    ax,0x20
c0003f01:	74 06                	je     c0003f09 <create_name+0xc7>
c0003f03:	66 83 f8 2e          	cmp    ax,0x2e
c0003f07:	75 03                	jne    c0003f0c <create_name+0xca>
c0003f09:	4e                   	dec    esi
c0003f0a:	eb e5                	jmp    c0003ef1 <create_name+0xaf>
c0003f0c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0003f0f:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003f15:	31 c0                	xor    eax,eax
c0003f17:	85 f6                	test   esi,esi
c0003f19:	0f 84 54 ff ff ff    	je     c0003e73 <create_name+0x31>
c0003f1f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0003f22:	8d 48 01             	lea    ecx,[eax+0x1]
c0003f25:	66 8b 14 47          	mov    dx,WORD PTR [edi+eax*2]
c0003f29:	66 83 fa 20          	cmp    dx,0x20
c0003f2d:	75 04                	jne    c0003f33 <create_name+0xf1>
c0003f2f:	89 c8                	mov    eax,ecx
c0003f31:	eb ec                	jmp    c0003f1f <create_name+0xdd>
c0003f33:	85 c0                	test   eax,eax
c0003f35:	75 06                	jne    c0003f3d <create_name+0xfb>
c0003f37:	66 83 fa 2e          	cmp    dx,0x2e
c0003f3b:	75 08                	jne    c0003f45 <create_name+0x103>
c0003f3d:	83 cb 03             	or     ebx,0x3
c0003f40:	eb 03                	jmp    c0003f45 <create_name+0x103>
c0003f42:	4e                   	dec    esi
c0003f43:	74 0b                	je     c0003f50 <create_name+0x10e>
c0003f45:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0003f48:	66 83 7c 77 fe 2e    	cmp    WORD PTR [edi+esi*2-0x2],0x2e
c0003f4e:	75 f2                	jne    c0003f42 <create_name+0x100>
c0003f50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f54:	31 ed                	xor    ebp,ebp
c0003f56:	6a 0b                	push   0xb
c0003f58:	31 ff                	xor    edi,edi
c0003f5a:	6a 20                	push   0x20
c0003f5c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0003f60:	8d 50 3c             	lea    edx,[eax+0x3c]
c0003f63:	52                   	push   edx
c0003f64:	e8 6d dc ff ff       	call   c0001bd6 <mem_set>
c0003f69:	83 c4 0c             	add    esp,0xc
c0003f6c:	ba 08 00 00 00       	mov    edx,0x8
c0003f71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f75:	8d 48 01             	lea    ecx,[eax+0x1]
c0003f78:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0003f7c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0003f7f:	0f b7 0c 41          	movzx  ecx,WORD PTR [ecx+eax*2]
c0003f83:	66 85 c9             	test   cx,cx
c0003f86:	0f 84 24 01 00 00    	je     c00040b0 <create_name+0x26e>
c0003f8c:	66 83 f9 20          	cmp    cx,0x20
c0003f90:	74 10                	je     c0003fa2 <create_name+0x160>
c0003f92:	66 83 f9 2e          	cmp    cx,0x2e
c0003f96:	75 0f                	jne    c0003fa7 <create_name+0x165>
c0003f98:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c0003f9c:	0f 84 5e 01 00 00    	je     c0004100 <create_name+0x2be>
c0003fa2:	83 cb 03             	or     ebx,0x3
c0003fa5:	eb ca                	jmp    c0003f71 <create_name+0x12f>
c0003fa7:	39 d5                	cmp    ebp,edx
c0003fa9:	73 0b                	jae    c0003fb6 <create_name+0x174>
c0003fab:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c0003faf:	75 3d                	jne    c0003fee <create_name+0x1ac>
c0003fb1:	e9 4a 01 00 00       	jmp    c0004100 <create_name+0x2be>
c0003fb6:	83 fa 0b             	cmp    edx,0xb
c0003fb9:	75 0d                	jne    c0003fc8 <create_name+0x186>
c0003fbb:	83 cb 03             	or     ebx,0x3
c0003fbe:	ba 0b 00 00 00       	mov    edx,0xb
c0003fc3:	e9 e8 00 00 00       	jmp    c00040b0 <create_name+0x26e>
c0003fc8:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c0003fcc:	74 0d                	je     c0003fdb <create_name+0x199>
c0003fce:	83 cb 03             	or     ebx,0x3
c0003fd1:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c0003fd5:	0f 87 d5 00 00 00    	ja     c00040b0 <create_name+0x26e>
c0003fdb:	c1 e7 02             	shl    edi,0x2
c0003fde:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003fe2:	ba 0b 00 00 00       	mov    edx,0xb
c0003fe7:	bd 08 00 00 00       	mov    ebp,0x8
c0003fec:	eb 83                	jmp    c0003f71 <create_name+0x12f>
c0003fee:	66 83 f9 7f          	cmp    cx,0x7f
c0003ff2:	76 68                	jbe    c000405c <create_name+0x21a>
c0003ff4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003ff8:	88 d8                	mov    al,bl
c0003ffa:	83 c8 02             	or     eax,0x2
c0003ffd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004001:	52                   	push   edx
c0004002:	52                   	push   edx
c0004003:	68 b5 01 00 00       	push   0x1b5
c0004008:	51                   	push   ecx
c0004009:	e8 c2 4b 00 00       	call   c0008bd0 <ff_uni2oem>
c000400e:	83 c4 10             	add    esp,0x10
c0004011:	89 c1                	mov    ecx,eax
c0004013:	a8 80                	test   al,0x80
c0004015:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004019:	74 0c                	je     c0004027 <create_name+0x1e5>
c000401b:	83 e1 7f             	and    ecx,0x7f
c000401e:	0f b6 89 a0 94 02 c0 	movzx  ecx,BYTE PTR [ecx-0x3ffd6b60]
c0004025:	eb 2c                	jmp    c0004053 <create_name+0x211>
c0004027:	66 3d ff 00          	cmp    ax,0xff
c000402b:	76 26                	jbe    c0004053 <create_name+0x211>
c000402d:	8d 42 ff             	lea    eax,[edx-0x1]
c0004030:	39 e8                	cmp    eax,ebp
c0004032:	77 0a                	ja     c000403e <create_name+0x1fc>
c0004034:	83 cb 03             	or     ebx,0x3
c0004037:	89 d5                	mov    ebp,edx
c0004039:	e9 33 ff ff ff       	jmp    c0003f71 <create_name+0x12f>
c000403e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004042:	89 c8                	mov    eax,ecx
c0004044:	66 c1 e8 08          	shr    ax,0x8
c0004048:	88 44 2b 3c          	mov    BYTE PTR [ebx+ebp*1+0x3c],al
c000404c:	45                   	inc    ebp
c000404d:	8a 5c 24 08          	mov    bl,BYTE PTR [esp+0x8]
c0004051:	eb 4f                	jmp    c00040a2 <create_name+0x260>
c0004053:	8a 5c 24 08          	mov    bl,BYTE PTR [esp+0x8]
c0004057:	66 85 c9             	test   cx,cx
c000405a:	74 1f                	je     c000407b <create_name+0x239>
c000405c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0004060:	50                   	push   eax
c0004061:	50                   	push   eax
c0004062:	0f b7 c1             	movzx  eax,cx
c0004065:	50                   	push   eax
c0004066:	68 8b 95 02 c0       	push   0xc002958b
c000406b:	e8 a4 db ff ff       	call   c0001c14 <chk_chr>
c0004070:	83 c4 10             	add    esp,0x10
c0004073:	85 c0                	test   eax,eax
c0004075:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004079:	74 0a                	je     c0004085 <create_name+0x243>
c000407b:	83 cb 03             	or     ebx,0x3
c000407e:	b9 5f 00 00 00       	mov    ecx,0x5f
c0004083:	eb 1d                	jmp    c00040a2 <create_name+0x260>
c0004085:	8d 41 bf             	lea    eax,[ecx-0x41]
c0004088:	66 83 f8 19          	cmp    ax,0x19
c000408c:	77 05                	ja     c0004093 <create_name+0x251>
c000408e:	83 cf 02             	or     edi,0x2
c0004091:	eb 0f                	jmp    c00040a2 <create_name+0x260>
c0004093:	8d 41 9f             	lea    eax,[ecx-0x61]
c0004096:	66 83 f8 19          	cmp    ax,0x19
c000409a:	77 06                	ja     c00040a2 <create_name+0x260>
c000409c:	83 cf 01             	or     edi,0x1
c000409f:	83 e9 20             	sub    ecx,0x20
c00040a2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00040a6:	88 4c 28 3c          	mov    BYTE PTR [eax+ebp*1+0x3c],cl
c00040aa:	45                   	inc    ebp
c00040ab:	e9 c1 fe ff ff       	jmp    c0003f71 <create_name+0x12f>
c00040b0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00040b4:	80 78 3c e5          	cmp    BYTE PTR [eax+0x3c],0xe5
c00040b8:	75 04                	jne    c00040be <create_name+0x27c>
c00040ba:	c6 40 3c 05          	mov    BYTE PTR [eax+0x3c],0x5
c00040be:	83 fa 08             	cmp    edx,0x8
c00040c1:	75 03                	jne    c00040c6 <create_name+0x284>
c00040c3:	c1 e7 02             	shl    edi,0x2
c00040c6:	89 f8                	mov    eax,edi
c00040c8:	83 e0 0c             	and    eax,0xc
c00040cb:	3c 0c                	cmp    al,0xc
c00040cd:	74 09                	je     c00040d8 <create_name+0x296>
c00040cf:	89 f8                	mov    eax,edi
c00040d1:	83 e0 03             	and    eax,0x3
c00040d4:	3c 03                	cmp    al,0x3
c00040d6:	75 05                	jne    c00040dd <create_name+0x29b>
c00040d8:	83 cb 02             	or     ebx,0x2
c00040db:	eb 18                	jmp    c00040f5 <create_name+0x2b3>
c00040dd:	f6 c3 02             	test   bl,0x2
c00040e0:	75 13                	jne    c00040f5 <create_name+0x2b3>
c00040e2:	f7 c7 01 00 00 00    	test   edi,0x1
c00040e8:	74 03                	je     c00040ed <create_name+0x2ab>
c00040ea:	83 cb 10             	or     ebx,0x10
c00040ed:	83 e7 04             	and    edi,0x4
c00040f0:	74 03                	je     c00040f5 <create_name+0x2b3>
c00040f2:	83 cb 08             	or     ebx,0x8
c00040f5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00040f9:	88 58 47             	mov    BYTE PTR [eax+0x47],bl
c00040fc:	31 c0                	xor    eax,eax
c00040fe:	eb 0e                	jmp    c000410e <create_name+0x2cc>
c0004100:	83 fa 0b             	cmp    edx,0xb
c0004103:	0f 85 d2 fe ff ff    	jne    c0003fdb <create_name+0x199>
c0004109:	e9 ad fe ff ff       	jmp    c0003fbb <create_name+0x179>
c000410e:	83 c4 2c             	add    esp,0x2c
c0004111:	5b                   	pop    ebx
c0004112:	5e                   	pop    esi
c0004113:	5f                   	pop    edi
c0004114:	5d                   	pop    ebp
c0004115:	c3                   	ret    

c0004116 <follow_path>:
c0004116:	56                   	push   esi
c0004117:	53                   	push   ebx
c0004118:	50                   	push   eax
c0004119:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000411d:	8b 33                	mov    esi,DWORD PTR [ebx]
c000411f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0004123:	8a 10                	mov    dl,BYTE PTR [eax]
c0004125:	80 fa 5c             	cmp    dl,0x5c
c0004128:	75 07                	jne    c0004131 <follow_path+0x1b>
c000412a:	40                   	inc    eax
c000412b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000412f:	eb ee                	jmp    c000411f <follow_path+0x9>
c0004131:	80 fa 2f             	cmp    dl,0x2f
c0004134:	74 f4                	je     c000412a <follow_path+0x14>
c0004136:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000413d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004144:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004147:	77 5f                	ja     c00041a8 <follow_path+0x92>
c0004149:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c000414d:	50                   	push   eax
c000414e:	50                   	push   eax
c000414f:	6a 00                	push   0x0
c0004151:	53                   	push   ebx
c0004152:	e8 51 e9 ff ff       	call   c0002aa8 <dir_sdi>
c0004157:	83 c4 10             	add    esp,0x10
c000415a:	e9 8d 00 00 00       	jmp    c00041ec <follow_path+0xd6>
c000415f:	83 ec 0c             	sub    esp,0xc
c0004162:	53                   	push   ebx
c0004163:	e8 6a f5 ff ff       	call   c00036d2 <dir_find>
c0004168:	83 c4 10             	add    esp,0x10
c000416b:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c000416e:	85 c0                	test   eax,eax
c0004170:	75 4c                	jne    c00041be <follow_path+0xa8>
c0004172:	80 e2 04             	and    dl,0x4
c0004175:	75 75                	jne    c00041ec <follow_path+0xd6>
c0004177:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000417b:	74 6a                	je     c00041e7 <follow_path+0xd1>
c000417d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004180:	75 48                	jne    c00041ca <follow_path+0xb4>
c0004182:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004185:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004189:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000418c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000418f:	30 c0                	xor    al,al
c0004191:	09 d0                	or     eax,edx
c0004193:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004196:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004199:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000419c:	50                   	push   eax
c000419d:	50                   	push   eax
c000419e:	53                   	push   ebx
c000419f:	56                   	push   esi
c00041a0:	e8 ba f1 ff ff       	call   c000335f <init_alloc_info>
c00041a5:	83 c4 10             	add    esp,0x10
c00041a8:	50                   	push   eax
c00041a9:	50                   	push   eax
c00041aa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00041ae:	50                   	push   eax
c00041af:	53                   	push   ebx
c00041b0:	e8 8d fc ff ff       	call   c0003e42 <create_name>
c00041b5:	83 c4 10             	add    esp,0x10
c00041b8:	85 c0                	test   eax,eax
c00041ba:	74 a3                	je     c000415f <follow_path+0x49>
c00041bc:	eb 2e                	jmp    c00041ec <follow_path+0xd6>
c00041be:	83 f8 04             	cmp    eax,0x4
c00041c1:	75 29                	jne    c00041ec <follow_path+0xd6>
c00041c3:	80 e2 04             	and    dl,0x4
c00041c6:	74 1f                	je     c00041e7 <follow_path+0xd1>
c00041c8:	eb 22                	jmp    c00041ec <follow_path+0xd6>
c00041ca:	51                   	push   ecx
c00041cb:	51                   	push   ecx
c00041cc:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00041cf:	25 ff 01 00 00       	and    eax,0x1ff
c00041d4:	8d 44 06 54          	lea    eax,[esi+eax*1+0x54]
c00041d8:	50                   	push   eax
c00041d9:	56                   	push   esi
c00041da:	e8 8a eb ff ff       	call   c0002d69 <ld_clust>
c00041df:	83 c4 10             	add    esp,0x10
c00041e2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00041e5:	eb c1                	jmp    c00041a8 <follow_path+0x92>
c00041e7:	b8 05 00 00 00       	mov    eax,0x5
c00041ec:	5a                   	pop    edx
c00041ed:	5b                   	pop    ebx
c00041ee:	5e                   	pop    esi
c00041ef:	c3                   	ret    

c00041f0 <get_ldnumber>:
c00041f0:	56                   	push   esi
c00041f1:	83 c8 ff             	or     eax,0xffffffff
c00041f4:	53                   	push   ebx
c00041f5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00041f9:	8b 16                	mov    edx,DWORD PTR [esi]
c00041fb:	85 d2                	test   edx,edx
c00041fd:	74 34                	je     c0004233 <get_ldnumber+0x43>
c00041ff:	89 d1                	mov    ecx,edx
c0004201:	41                   	inc    ecx
c0004202:	8a 41 ff             	mov    al,BYTE PTR [ecx-0x1]
c0004205:	3c 1f                	cmp    al,0x1f
c0004207:	76 06                	jbe    c000420f <get_ldnumber+0x1f>
c0004209:	3c 3a                	cmp    al,0x3a
c000420b:	75 f4                	jne    c0004201 <get_ldnumber+0x11>
c000420d:	eb 04                	jmp    c0004213 <get_ldnumber+0x23>
c000420f:	31 c0                	xor    eax,eax
c0004211:	eb 20                	jmp    c0004233 <get_ldnumber+0x43>
c0004213:	8a 1a                	mov    bl,BYTE PTR [edx]
c0004215:	8d 43 d0             	lea    eax,[ebx-0x30]
c0004218:	3c 09                	cmp    al,0x9
c000421a:	77 14                	ja     c0004230 <get_ldnumber+0x40>
c000421c:	83 c2 02             	add    edx,0x2
c000421f:	83 c8 ff             	or     eax,0xffffffff
c0004222:	39 d1                	cmp    ecx,edx
c0004224:	75 0d                	jne    c0004233 <get_ldnumber+0x43>
c0004226:	0f be c3             	movsx  eax,bl
c0004229:	89 0e                	mov    DWORD PTR [esi],ecx
c000422b:	83 e8 30             	sub    eax,0x30
c000422e:	eb 03                	jmp    c0004233 <get_ldnumber+0x43>
c0004230:	83 c8 ff             	or     eax,0xffffffff
c0004233:	5b                   	pop    ebx
c0004234:	5e                   	pop    esi
c0004235:	c3                   	ret    

c0004236 <crc32>:
c0004236:	56                   	push   esi
c0004237:	be 01 00 00 00       	mov    esi,0x1
c000423c:	53                   	push   ebx
c000423d:	bb 08 00 00 00       	mov    ebx,0x8
c0004242:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0004246:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000424a:	89 f2                	mov    edx,esi
c000424c:	84 d1                	test   cl,dl
c000424e:	0f 95 c2             	setne  dl
c0004251:	0f b6 d2             	movzx  edx,dl
c0004254:	31 c2                	xor    edx,eax
c0004256:	89 d0                	mov    eax,edx
c0004258:	d1 e8                	shr    eax,1
c000425a:	80 e2 01             	and    dl,0x1
c000425d:	74 05                	je     c0004264 <crc32+0x2e>
c000425f:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0004264:	d1 e6                	shl    esi,1
c0004266:	4b                   	dec    ebx
c0004267:	75 e1                	jne    c000424a <crc32+0x14>
c0004269:	5b                   	pop    ebx
c000426a:	5e                   	pop    esi
c000426b:	c3                   	ret    

c000426c <test_gpt_header>:
c000426c:	55                   	push   ebp
c000426d:	57                   	push   edi
c000426e:	31 ff                	xor    edi,edi
c0004270:	56                   	push   esi
c0004271:	53                   	push   ebx
c0004272:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0004276:	6a 10                	push   0x10
c0004278:	68 20 95 02 c0       	push   0xc0029520
c000427d:	53                   	push   ebx
c000427e:	e8 6a d9 ff ff       	call   c0001bed <mem_cmp>
c0004283:	83 c4 0c             	add    esp,0xc
c0004286:	85 c0                	test   eax,eax
c0004288:	75 5d                	jne    c00042e7 <test_gpt_header+0x7b>
c000428a:	89 c7                	mov    edi,eax
c000428c:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c0004291:	83 ce ff             	or     esi,0xffffffff
c0004294:	31 c0                	xor    eax,eax
c0004296:	83 fd 03             	cmp    ebp,0x3
c0004299:	76 05                	jbe    c00042a0 <test_gpt_header+0x34>
c000429b:	0f b6 44 2b 10       	movzx  eax,BYTE PTR [ebx+ebp*1+0x10]
c00042a0:	50                   	push   eax
c00042a1:	45                   	inc    ebp
c00042a2:	56                   	push   esi
c00042a3:	e8 8e ff ff ff       	call   c0004236 <crc32>
c00042a8:	5a                   	pop    edx
c00042a9:	89 c6                	mov    esi,eax
c00042ab:	59                   	pop    ecx
c00042ac:	83 fd 4c             	cmp    ebp,0x4c
c00042af:	75 e3                	jne    c0004294 <test_gpt_header+0x28>
c00042b1:	8d 43 10             	lea    eax,[ebx+0x10]
c00042b4:	f7 d6                	not    esi
c00042b6:	50                   	push   eax
c00042b7:	e8 6c d8 ff ff       	call   c0001b28 <ld_dword>
c00042bc:	5d                   	pop    ebp
c00042bd:	39 c6                	cmp    esi,eax
c00042bf:	75 26                	jne    c00042e7 <test_gpt_header+0x7b>
c00042c1:	8d 43 54             	lea    eax,[ebx+0x54]
c00042c4:	50                   	push   eax
c00042c5:	e8 5e d8 ff ff       	call   c0001b28 <ld_dword>
c00042ca:	59                   	pop    ecx
c00042cb:	83 c0 80             	add    eax,0xffffff80
c00042ce:	75 17                	jne    c00042e7 <test_gpt_header+0x7b>
c00042d0:	83 c3 50             	add    ebx,0x50
c00042d3:	53                   	push   ebx
c00042d4:	e8 4f d8 ff ff       	call   c0001b28 <ld_dword>
c00042d9:	5a                   	pop    edx
c00042da:	3d 80 00 00 00       	cmp    eax,0x80
c00042df:	0f 96 c0             	setbe  al
c00042e2:	0f b6 c0             	movzx  eax,al
c00042e5:	89 c7                	mov    edi,eax
c00042e7:	5b                   	pop    ebx
c00042e8:	89 f8                	mov    eax,edi
c00042ea:	5e                   	pop    esi
c00042eb:	5f                   	pop    edi
c00042ec:	5d                   	pop    ebp
c00042ed:	c3                   	ret    

c00042ee <make_rand>:
c00042ee:	56                   	push   esi
c00042ef:	53                   	push   ebx
c00042f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00042f8:	85 c0                	test   eax,eax
c00042fa:	75 05                	jne    c0004301 <make_rand+0x13>
c00042fc:	b8 01 00 00 00       	mov    eax,0x1
c0004301:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0004305:	01 d3                	add    ebx,edx
c0004307:	b9 08 00 00 00       	mov    ecx,0x8
c000430c:	89 c6                	mov    esi,eax
c000430e:	d1 e8                	shr    eax,1
c0004310:	83 e6 01             	and    esi,0x1
c0004313:	85 f6                	test   esi,esi
c0004315:	74 05                	je     c000431c <make_rand+0x2e>
c0004317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000431c:	49                   	dec    ecx
c000431d:	75 ed                	jne    c000430c <make_rand+0x1e>
c000431f:	42                   	inc    edx
c0004320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0004323:	39 da                	cmp    edx,ebx
c0004325:	75 e0                	jne    c0004307 <make_rand+0x19>
c0004327:	5b                   	pop    ebx
c0004328:	5e                   	pop    esi
c0004329:	c3                   	ret    

c000432a <check_fs>:
c000432a:	53                   	push   ebx
c000432b:	83 ec 0c             	sub    esp,0xc
c000432e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0004332:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0004336:	c7 43 4c ff ff ff ff 	mov    DWORD PTR [ebx+0x4c],0xffffffff
c000433d:	c7 43 50 ff ff ff ff 	mov    DWORD PTR [ebx+0x50],0xffffffff
c0004344:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0004348:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000434c:	53                   	push   ebx
c000434d:	e8 34 db ff ff       	call   c0001e86 <move_window>
c0004352:	83 c4 10             	add    esp,0x10
c0004355:	ba 04 00 00 00       	mov    edx,0x4
c000435a:	85 c0                	test   eax,eax
c000435c:	0f 85 96 00 00 00    	jne    c00043f8 <check_fs+0xce>
c0004362:	83 ec 0c             	sub    esp,0xc
c0004365:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000436b:	50                   	push   eax
c000436c:	e8 a4 d7 ff ff       	call   c0001b15 <ld_word>
c0004371:	83 c4 10             	add    esp,0x10
c0004374:	ba 03 00 00 00       	mov    edx,0x3
c0004379:	66 3d 55 aa          	cmp    ax,0xaa55
c000437d:	75 79                	jne    c00043f8 <check_fs+0xce>
c000437f:	50                   	push   eax
c0004380:	8d 43 54             	lea    eax,[ebx+0x54]
c0004383:	6a 0b                	push   0xb
c0004385:	68 92 95 02 c0       	push   0xc0029592
c000438a:	50                   	push   eax
c000438b:	e8 5d d8 ff ff       	call   c0001bed <mem_cmp>
c0004390:	83 c4 10             	add    esp,0x10
c0004393:	ba 01 00 00 00       	mov    edx,0x1
c0004398:	85 c0                	test   eax,eax
c000439a:	74 5c                	je     c00043f8 <check_fs+0xce>
c000439c:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000439f:	8d 50 18             	lea    edx,[eax+0x18]
c00043a2:	80 fa 01             	cmp    dl,0x1
c00043a5:	76 09                	jbe    c00043b0 <check_fs+0x86>
c00043a7:	ba 02 00 00 00       	mov    edx,0x2
c00043ac:	3c eb                	cmp    al,0xeb
c00043ae:	75 48                	jne    c00043f8 <check_fs+0xce>
c00043b0:	50                   	push   eax
c00043b1:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00043b7:	6a 03                	push   0x3
c00043b9:	68 3c ec 02 c0       	push   0xc002ec3c
c00043be:	50                   	push   eax
c00043bf:	e8 29 d8 ff ff       	call   c0001bed <mem_cmp>
c00043c4:	83 c4 10             	add    esp,0x10
c00043c7:	31 d2                	xor    edx,edx
c00043c9:	85 c0                	test   eax,eax
c00043cb:	74 2b                	je     c00043f8 <check_fs+0xce>
c00043cd:	50                   	push   eax
c00043ce:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c00043d4:	6a 05                	push   0x5
c00043d6:	68 9e 95 02 c0       	push   0xc002959e
c00043db:	50                   	push   eax
c00043dc:	e8 0c d8 ff ff       	call   c0001bed <mem_cmp>
c00043e1:	83 c4 10             	add    esp,0x10
c00043e4:	31 d2                	xor    edx,edx
c00043e6:	85 c0                	test   eax,eax
c00043e8:	74 0e                	je     c00043f8 <check_fs+0xce>
c00043ea:	31 d2                	xor    edx,edx
c00043ec:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c00043f3:	0f 95 c2             	setne  dl
c00043f6:	01 d2                	add    edx,edx
c00043f8:	89 d0                	mov    eax,edx
c00043fa:	83 c4 08             	add    esp,0x8
c00043fd:	5b                   	pop    ebx
c00043fe:	c3                   	ret    

c00043ff <find_volume>:
c00043ff:	55                   	push   ebp
c0004400:	57                   	push   edi
c0004401:	56                   	push   esi
c0004402:	53                   	push   ebx
c0004403:	83 ec 40             	sub    esp,0x40
c0004406:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000440a:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000440e:	6a 00                	push   0x0
c0004410:	6a 00                	push   0x0
c0004412:	53                   	push   ebx
c0004413:	e8 12 ff ff ff       	call   c000432a <check_fs>
c0004418:	83 c4 10             	add    esp,0x10
c000441b:	83 f8 02             	cmp    eax,0x2
c000441e:	74 0e                	je     c000442e <find_volume+0x2f>
c0004420:	0f 87 8d 01 00 00    	ja     c00045b3 <find_volume+0x1b4>
c0004426:	85 f6                	test   esi,esi
c0004428:	0f 84 85 01 00 00    	je     c00045b3 <find_volume+0x1b4>
c000442e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0004435:	0f 85 04 01 00 00    	jne    c000453f <find_volume+0x140>
c000443b:	50                   	push   eax
c000443c:	6a 00                	push   0x0
c000443e:	6a 01                	push   0x1
c0004440:	53                   	push   ebx
c0004441:	e8 40 da ff ff       	call   c0001e86 <move_window>
c0004446:	83 c4 10             	add    esp,0x10
c0004449:	85 c0                	test   eax,eax
c000444b:	74 0a                	je     c0004457 <find_volume+0x58>
c000444d:	b8 04 00 00 00       	mov    eax,0x4
c0004452:	e9 5c 01 00 00       	jmp    c00045b3 <find_volume+0x1b4>
c0004457:	83 ec 0c             	sub    esp,0xc
c000445a:	8d 6b 54             	lea    ebp,[ebx+0x54]
c000445d:	55                   	push   ebp
c000445e:	e8 09 fe ff ff       	call   c000426c <test_gpt_header>
c0004463:	83 c4 10             	add    esp,0x10
c0004466:	85 c0                	test   eax,eax
c0004468:	75 0a                	jne    c0004474 <find_volume+0x75>
c000446a:	b8 03 00 00 00       	mov    eax,0x3
c000446f:	e9 3f 01 00 00       	jmp    c00045b3 <find_volume+0x1b4>
c0004474:	83 ec 0c             	sub    esp,0xc
c0004477:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c000447d:	50                   	push   eax
c000447e:	e8 a5 d6 ff ff       	call   c0001b28 <ld_dword>
c0004483:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004487:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c000448d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004490:	e8 af d6 ff ff       	call   c0001b44 <ld_qword>
c0004495:	83 c4 10             	add    esp,0x10
c0004498:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000449c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00044a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00044a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00044b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00044b4:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c00044b8:	74 b0                	je     c000446a <find_volume+0x6b>
c00044ba:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00044be:	c1 e7 07             	shl    edi,0x7
c00044c1:	50                   	push   eax
c00044c2:	31 d2                	xor    edx,edx
c00044c4:	89 f8                	mov    eax,edi
c00044c6:	c1 e8 09             	shr    eax,0x9
c00044c9:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00044cd:	13 54 24 20          	adc    edx,DWORD PTR [esp+0x20]
c00044d1:	52                   	push   edx
c00044d2:	50                   	push   eax
c00044d3:	53                   	push   ebx
c00044d4:	e8 ad d9 ff ff       	call   c0001e86 <move_window>
c00044d9:	83 c4 10             	add    esp,0x10
c00044dc:	85 c0                	test   eax,eax
c00044de:	0f 85 69 ff ff ff    	jne    c000444d <find_volume+0x4e>
c00044e4:	81 e7 80 01 00 00    	and    edi,0x180
c00044ea:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c00044ee:	51                   	push   ecx
c00044ef:	6a 10                	push   0x10
c00044f1:	68 80 94 02 c0       	push   0xc0029480
c00044f6:	50                   	push   eax
c00044f7:	e8 f1 d6 ff ff       	call   c0001bed <mem_cmp>
c00044fc:	83 c4 10             	add    esp,0x10
c00044ff:	85 c0                	test   eax,eax
c0004501:	75 33                	jne    c0004536 <find_volume+0x137>
c0004503:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004507:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000450b:	83 ec 0c             	sub    esp,0xc
c000450e:	50                   	push   eax
c000450f:	e8 30 d6 ff ff       	call   c0001b44 <ld_qword>
c0004514:	83 c4 0c             	add    esp,0xc
c0004517:	52                   	push   edx
c0004518:	50                   	push   eax
c0004519:	53                   	push   ebx
c000451a:	e8 0b fe ff ff       	call   c000432a <check_fs>
c000451f:	83 c4 10             	add    esp,0x10
c0004522:	85 f6                	test   esi,esi
c0004524:	75 0a                	jne    c0004530 <find_volume+0x131>
c0004526:	83 f8 01             	cmp    eax,0x1
c0004529:	77 0b                	ja     c0004536 <find_volume+0x137>
c000452b:	e9 83 00 00 00       	jmp    c00045b3 <find_volume+0x1b4>
c0004530:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004534:	74 7d                	je     c00045b3 <find_volume+0x1b4>
c0004536:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000453a:	e9 71 ff ff ff       	jmp    c00044b0 <find_volume+0xb1>
c000453f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0004543:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0004549:	8d ab 1a 02 00 00    	lea    ebp,[ebx+0x21a]
c000454f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004553:	89 cf                	mov    edi,ecx
c0004555:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0004559:	83 ec 0c             	sub    esp,0xc
c000455c:	55                   	push   ebp
c000455d:	83 c5 10             	add    ebp,0x10
c0004560:	e8 c3 d5 ff ff       	call   c0001b28 <ld_dword>
c0004565:	83 c4 10             	add    esp,0x10
c0004568:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000456c:	89 01                	mov    DWORD PTR [ecx],eax
c000456e:	83 c1 04             	add    ecx,0x4
c0004571:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0004575:	75 de                	jne    c0004555 <find_volume+0x156>
c0004577:	31 ed                	xor    ebp,ebp
c0004579:	85 f6                	test   esi,esi
c000457b:	74 03                	je     c0004580 <find_volume+0x181>
c000457d:	8d 6e ff             	lea    ebp,[esi-0x1]
c0004580:	8b 04 af             	mov    eax,DWORD PTR [edi+ebp*4]
c0004583:	85 c0                	test   eax,eax
c0004585:	74 19                	je     c00045a0 <find_volume+0x1a1>
c0004587:	52                   	push   edx
c0004588:	31 d2                	xor    edx,edx
c000458a:	52                   	push   edx
c000458b:	50                   	push   eax
c000458c:	53                   	push   ebx
c000458d:	e8 98 fd ff ff       	call   c000432a <check_fs>
c0004592:	83 c4 10             	add    esp,0x10
c0004595:	83 f8 01             	cmp    eax,0x1
c0004598:	76 19                	jbe    c00045b3 <find_volume+0x1b4>
c000459a:	85 f6                	test   esi,esi
c000459c:	74 0f                	je     c00045ad <find_volume+0x1ae>
c000459e:	eb 13                	jmp    c00045b3 <find_volume+0x1b4>
c00045a0:	85 f6                	test   esi,esi
c00045a2:	0f 85 c2 fe ff ff    	jne    c000446a <find_volume+0x6b>
c00045a8:	b8 03 00 00 00       	mov    eax,0x3
c00045ad:	45                   	inc    ebp
c00045ae:	83 fd 03             	cmp    ebp,0x3
c00045b1:	76 cd                	jbe    c0004580 <find_volume+0x181>
c00045b3:	83 c4 3c             	add    esp,0x3c
c00045b6:	5b                   	pop    ebx
c00045b7:	5e                   	pop    esi
c00045b8:	5f                   	pop    edi
c00045b9:	5d                   	pop    ebp
c00045ba:	c3                   	ret    

c00045bb <mount_volume>:
c00045bb:	55                   	push   ebp
c00045bc:	57                   	push   edi
c00045bd:	56                   	push   esi
c00045be:	53                   	push   ebx
c00045bf:	83 ec 3c             	sub    esp,0x3c
c00045c2:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00045c6:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c00045ca:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00045d0:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00045d4:	e8 17 fc ff ff       	call   c00041f0 <get_ldnumber>
c00045d9:	5f                   	pop    edi
c00045da:	ba 0b 00 00 00       	mov    edx,0xb
c00045df:	85 c0                	test   eax,eax
c00045e1:	0f 88 f2 05 00 00    	js     c0004bd9 <mount_volume+0x61e>
c00045e7:	8b 2c 85 20 13 03 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffcece0]
c00045ee:	89 c1                	mov    ecx,eax
c00045f0:	ba 0c 00 00 00       	mov    edx,0xc
c00045f5:	85 ed                	test   ebp,ebp
c00045f7:	0f 84 dc 05 00 00    	je     c0004bd9 <mount_volume+0x61e>
c00045fd:	89 2e                	mov    DWORD PTR [esi],ebp
c00045ff:	83 e3 fe             	and    ebx,0xfffffffe
c0004602:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0004606:	74 38                	je     c0004640 <mount_volume+0x85>
c0004608:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000460c:	83 ec 0c             	sub    esp,0xc
c000460f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0004613:	50                   	push   eax
c0004614:	e8 ab d4 ff ff       	call   c0001ac4 <disk_status>
c0004619:	83 c4 10             	add    esp,0x10
c000461c:	a8 01                	test   al,0x1
c000461e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004622:	75 1c                	jne    c0004640 <mount_volume+0x85>
c0004624:	31 d2                	xor    edx,edx
c0004626:	84 db                	test   bl,bl
c0004628:	0f 84 ab 05 00 00    	je     c0004bd9 <mount_volume+0x61e>
c000462e:	a8 04                	test   al,0x4
c0004630:	0f 84 a3 05 00 00    	je     c0004bd9 <mount_volume+0x61e>
c0004636:	ba 0a 00 00 00       	mov    edx,0xa
c000463b:	e9 99 05 00 00       	jmp    c0004bd9 <mount_volume+0x61e>
c0004640:	83 ec 0c             	sub    esp,0xc
c0004643:	88 4d 01             	mov    BYTE PTR [ebp+0x1],cl
c0004646:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000464a:	0f b6 c9             	movzx  ecx,cl
c000464d:	51                   	push   ecx
c000464e:	e8 74 d4 ff ff       	call   c0001ac7 <disk_initialize>
c0004653:	83 c4 10             	add    esp,0x10
c0004656:	ba 03 00 00 00       	mov    edx,0x3
c000465b:	a8 01                	test   al,0x1
c000465d:	0f 85 76 05 00 00    	jne    c0004bd9 <mount_volume+0x61e>
c0004663:	84 db                	test   bl,bl
c0004665:	74 04                	je     c000466b <mount_volume+0xb0>
c0004667:	a8 04                	test   al,0x4
c0004669:	75 cb                	jne    c0004636 <mount_volume+0x7b>
c000466b:	53                   	push   ebx
c000466c:	53                   	push   ebx
c000466d:	6a 00                	push   0x0
c000466f:	55                   	push   ebp
c0004670:	e8 8a fd ff ff       	call   c00043ff <find_volume>
c0004675:	83 c4 10             	add    esp,0x10
c0004678:	83 f8 04             	cmp    eax,0x4
c000467b:	75 0a                	jne    c0004687 <mount_volume+0xcc>
c000467d:	ba 01 00 00 00       	mov    edx,0x1
c0004682:	e9 52 05 00 00       	jmp    c0004bd9 <mount_volume+0x61e>
c0004687:	83 f8 01             	cmp    eax,0x1
c000468a:	76 0a                	jbe    c0004696 <mount_volume+0xdb>
c000468c:	ba 0d 00 00 00       	mov    edx,0xd
c0004691:	e9 43 05 00 00       	jmp    c0004bd9 <mount_volume+0x61e>
c0004696:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c0004699:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000469c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00046a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00046a4:	75 17                	jne    c00046bd <mount_volume+0x102>
c00046a6:	b8 0b 00 00 00       	mov    eax,0xb
c00046ab:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00046b0:	75 da                	jne    c000468c <mount_volume+0xd1>
c00046b2:	40                   	inc    eax
c00046b3:	83 f8 40             	cmp    eax,0x40
c00046b6:	75 f3                	jne    c00046ab <mount_volume+0xf0>
c00046b8:	e9 d0 02 00 00       	jmp    c000498d <mount_volume+0x3d2>
c00046bd:	83 ec 0c             	sub    esp,0xc
c00046c0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00046c3:	50                   	push   eax
c00046c4:	e8 4c d4 ff ff       	call   c0001b15 <ld_word>
c00046c9:	83 c4 10             	add    esp,0x10
c00046cc:	66 3d 00 02          	cmp    ax,0x200
c00046d0:	75 ba                	jne    c000468c <mount_volume+0xd1>
c00046d2:	83 ec 0c             	sub    esp,0xc
c00046d5:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00046d8:	50                   	push   eax
c00046d9:	e8 37 d4 ff ff       	call   c0001b15 <ld_word>
c00046de:	83 c4 10             	add    esp,0x10
c00046e1:	0f b7 c0             	movzx  eax,ax
c00046e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00046e8:	85 c0                	test   eax,eax
c00046ea:	75 13                	jne    c00046ff <mount_volume+0x144>
c00046ec:	83 ec 0c             	sub    esp,0xc
c00046ef:	8d 45 78             	lea    eax,[ebp+0x78]
c00046f2:	50                   	push   eax
c00046f3:	e8 30 d4 ff ff       	call   c0001b28 <ld_dword>
c00046f8:	83 c4 10             	add    esp,0x10
c00046fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00046ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004703:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0004706:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0004709:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000470d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0004710:	48                   	dec    eax
c0004711:	3c 01                	cmp    al,0x1
c0004713:	0f 87 73 ff ff ff    	ja     c000468c <mount_volume+0xd1>
c0004719:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000471d:	89 c3                	mov    ebx,eax
c000471f:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0004723:	66 85 c0             	test   ax,ax
c0004726:	0f 84 60 ff ff ff    	je     c000468c <mount_volume+0xd1>
c000472c:	8d 40 ff             	lea    eax,[eax-0x1]
c000472f:	85 d8                	test   eax,ebx
c0004731:	0f 85 55 ff ff ff    	jne    c000468c <mount_volume+0xd1>
c0004737:	83 ec 0c             	sub    esp,0xc
c000473a:	8d 45 65             	lea    eax,[ebp+0x65]
c000473d:	50                   	push   eax
c000473e:	e8 d2 d3 ff ff       	call   c0001b15 <ld_word>
c0004743:	83 c4 10             	add    esp,0x10
c0004746:	89 c7                	mov    edi,eax
c0004748:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000474c:	a8 0f                	test   al,0xf
c000474e:	0f 85 38 ff ff ff    	jne    c000468c <mount_volume+0xd1>
c0004754:	83 ec 0c             	sub    esp,0xc
c0004757:	8d 45 67             	lea    eax,[ebp+0x67]
c000475a:	50                   	push   eax
c000475b:	e8 b5 d3 ff ff       	call   c0001b15 <ld_word>
c0004760:	83 c4 10             	add    esp,0x10
c0004763:	0f b7 f0             	movzx  esi,ax
c0004766:	85 f6                	test   esi,esi
c0004768:	75 11                	jne    c000477b <mount_volume+0x1c0>
c000476a:	83 ec 0c             	sub    esp,0xc
c000476d:	8d 45 74             	lea    eax,[ebp+0x74]
c0004770:	50                   	push   eax
c0004771:	e8 b2 d3 ff ff       	call   c0001b28 <ld_dword>
c0004776:	83 c4 10             	add    esp,0x10
c0004779:	89 c6                	mov    esi,eax
c000477b:	83 ec 0c             	sub    esp,0xc
c000477e:	8d 45 62             	lea    eax,[ebp+0x62]
c0004781:	50                   	push   eax
c0004782:	e8 8e d3 ff ff       	call   c0001b15 <ld_word>
c0004787:	83 c4 10             	add    esp,0x10
c000478a:	66 85 c0             	test   ax,ax
c000478d:	0f 84 f9 fe ff ff    	je     c000468c <mount_volume+0xd1>
c0004793:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0004798:	0f b7 c8             	movzx  ecx,ax
c000479b:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00047a0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00047a4:	89 fa                	mov    edx,edi
c00047a6:	66 c1 ea 04          	shr    dx,0x4
c00047aa:	0f b7 d2             	movzx  edx,dx
c00047ad:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00047b1:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00047b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00047b8:	39 c6                	cmp    esi,eax
c00047ba:	0f 82 cc fe ff ff    	jb     c000468c <mount_volume+0xd1>
c00047c0:	29 c6                	sub    esi,eax
c00047c2:	31 d2                	xor    edx,edx
c00047c4:	89 f0                	mov    eax,esi
c00047c6:	f7 f3                	div    ebx
c00047c8:	39 de                	cmp    esi,ebx
c00047ca:	0f 82 bc fe ff ff    	jb     c000468c <mount_volume+0xd1>
c00047d0:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00047d5:	0f 87 b1 fe ff ff    	ja     c000468c <mount_volume+0xd1>
c00047db:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00047e0:	0f 86 e4 03 00 00    	jbe    c0004bca <mount_volume+0x60f>
c00047e6:	bb 03 00 00 00       	mov    ebx,0x3
c00047eb:	8d 70 02             	lea    esi,[eax+0x2]
c00047ee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00047f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00047f6:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00047f9:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00047fc:	31 d2                	xor    edx,edx
c00047fe:	89 c8                	mov    eax,ecx
c0004800:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0004803:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0004807:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000480b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000480f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0004813:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0004816:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0004819:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000481d:	31 d2                	xor    edx,edx
c000481f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0004823:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0004827:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000482a:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000482d:	83 fb 03             	cmp    ebx,0x3
c0004830:	75 39                	jne    c000486b <mount_volume+0x2b0>
c0004832:	83 ec 0c             	sub    esp,0xc
c0004835:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0004838:	50                   	push   eax
c0004839:	e8 d7 d2 ff ff       	call   c0001b15 <ld_word>
c000483e:	83 c4 10             	add    esp,0x10
c0004841:	66 09 c7             	or     di,ax
c0004844:	0f 85 42 fe ff ff    	jne    c000468c <mount_volume+0xd1>
c000484a:	83 ec 0c             	sub    esp,0xc
c000484d:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0004853:	c1 e6 02             	shl    esi,0x2
c0004856:	50                   	push   eax
c0004857:	e8 cc d2 ff ff       	call   c0001b28 <ld_dword>
c000485c:	83 c4 10             	add    esp,0x10
c000485f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0004862:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0004869:	eb 30                	jmp    c000489b <mount_volume+0x2e0>
c000486b:	66 85 ff             	test   di,di
c000486e:	0f 84 18 fe ff ff    	je     c000468c <mount_volume+0xd1>
c0004874:	31 d2                	xor    edx,edx
c0004876:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000487a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000487e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004882:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0004885:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0004888:	83 fb 02             	cmp    ebx,0x2
c000488b:	75 04                	jne    c0004891 <mount_volume+0x2d6>
c000488d:	01 f6                	add    esi,esi
c000488f:	eb 0a                	jmp    c000489b <mount_volume+0x2e0>
c0004891:	8d 04 76             	lea    eax,[esi+esi*2]
c0004894:	83 e6 01             	and    esi,0x1
c0004897:	d1 e8                	shr    eax,1
c0004899:	01 c6                	add    esi,eax
c000489b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c00048a1:	c1 ee 09             	shr    esi,0x9
c00048a4:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00048a8:	0f 87 de fd ff ff    	ja     c000468c <mount_volume+0xd1>
c00048ae:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00048b5:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00048bc:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00048c0:	83 fb 03             	cmp    ebx,0x3
c00048c3:	0f 85 a9 00 00 00    	jne    c0004972 <mount_volume+0x3b7>
c00048c9:	83 ec 0c             	sub    esp,0xc
c00048cc:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00048d2:	50                   	push   eax
c00048d3:	e8 3d d2 ff ff       	call   c0001b15 <ld_word>
c00048d8:	83 c4 10             	add    esp,0x10
c00048db:	66 48                	dec    ax
c00048dd:	0f 85 8f 00 00 00    	jne    c0004972 <mount_volume+0x3b7>
c00048e3:	50                   	push   eax
c00048e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048ec:	83 c0 01             	add    eax,0x1
c00048ef:	83 d2 00             	adc    edx,0x0
c00048f2:	52                   	push   edx
c00048f3:	50                   	push   eax
c00048f4:	55                   	push   ebp
c00048f5:	e8 8c d5 ff ff       	call   c0001e86 <move_window>
c00048fa:	83 c4 10             	add    esp,0x10
c00048fd:	85 c0                	test   eax,eax
c00048ff:	75 71                	jne    c0004972 <mount_volume+0x3b7>
c0004901:	83 ec 0c             	sub    esp,0xc
c0004904:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c0004908:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c000490e:	50                   	push   eax
c000490f:	e8 01 d2 ff ff       	call   c0001b15 <ld_word>
c0004914:	83 c4 10             	add    esp,0x10
c0004917:	66 3d 55 aa          	cmp    ax,0xaa55
c000491b:	75 55                	jne    c0004972 <mount_volume+0x3b7>
c000491d:	83 ec 0c             	sub    esp,0xc
c0004920:	8d 45 54             	lea    eax,[ebp+0x54]
c0004923:	50                   	push   eax
c0004924:	e8 ff d1 ff ff       	call   c0001b28 <ld_dword>
c0004929:	83 c4 10             	add    esp,0x10
c000492c:	3d 52 52 61 41       	cmp    eax,0x41615252
c0004931:	75 3f                	jne    c0004972 <mount_volume+0x3b7>
c0004933:	83 ec 0c             	sub    esp,0xc
c0004936:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c000493c:	50                   	push   eax
c000493d:	e8 e6 d1 ff ff       	call   c0001b28 <ld_dword>
c0004942:	83 c4 10             	add    esp,0x10
c0004945:	3d 72 72 41 61       	cmp    eax,0x61417272
c000494a:	75 26                	jne    c0004972 <mount_volume+0x3b7>
c000494c:	83 ec 0c             	sub    esp,0xc
c000494f:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0004955:	50                   	push   eax
c0004956:	e8 cd d1 ff ff       	call   c0001b28 <ld_dword>
c000495b:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c000495e:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0004964:	89 04 24             	mov    DWORD PTR [esp],eax
c0004967:	e8 bc d1 ff ff       	call   c0001b28 <ld_dword>
c000496c:	83 c4 10             	add    esp,0x10
c000496f:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0004972:	66 a1 88 13 03 c0    	mov    ax,ds:0xc0031388
c0004978:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000497b:	40                   	inc    eax
c000497c:	31 d2                	xor    edx,edx
c000497e:	66 a3 88 13 03 c0    	mov    ds:0xc0031388,ax
c0004984:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0004988:	e9 4c 02 00 00       	jmp    c0004bd9 <mount_volume+0x61e>
c000498d:	83 ec 0c             	sub    esp,0xc
c0004990:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0004996:	50                   	push   eax
c0004997:	e8 79 d1 ff ff       	call   c0001b15 <ld_word>
c000499c:	83 c4 10             	add    esp,0x10
c000499f:	66 3d 00 01          	cmp    ax,0x100
c00049a3:	0f 85 e3 fc ff ff    	jne    c000468c <mount_volume+0xd1>
c00049a9:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c00049b0:	0f 85 d6 fc ff ff    	jne    c000468c <mount_volume+0xd1>
c00049b6:	83 ec 0c             	sub    esp,0xc
c00049b9:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c00049bf:	50                   	push   eax
c00049c0:	e8 7f d1 ff ff       	call   c0001b44 <ld_qword>
c00049c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00049c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00049cd:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c00049d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00049d6:	e8 4d d1 ff ff       	call   c0001b28 <ld_dword>
c00049db:	83 c4 10             	add    esp,0x10
c00049de:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00049e1:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c00049e7:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00049ea:	fe c8                	dec    al
c00049ec:	0f 85 9a fc ff ff    	jne    c000468c <mount_volume+0xd1>
c00049f2:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00049f9:	bb 01 00 00 00       	mov    ebx,0x1
c00049fe:	d3 e3                	shl    ebx,cl
c0004a00:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0004a04:	66 85 db             	test   bx,bx
c0004a07:	0f 84 7f fc ff ff    	je     c000468c <mount_volume+0xd1>
c0004a0d:	83 ec 0c             	sub    esp,0xc
c0004a10:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0004a16:	50                   	push   eax
c0004a17:	e8 0c d1 ff ff       	call   c0001b28 <ld_dword>
c0004a1c:	83 c4 10             	add    esp,0x10
c0004a1f:	89 c6                	mov    esi,eax
c0004a21:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0004a26:	0f 87 60 fc ff ff    	ja     c000468c <mount_volume+0xd1>
c0004a2c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a30:	8d 40 02             	lea    eax,[eax+0x2]
c0004a33:	83 ec 0c             	sub    esp,0xc
c0004a36:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0004a39:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0004a3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0004a40:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0004a43:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0004a49:	50                   	push   eax
c0004a4a:	e8 d9 d0 ff ff       	call   c0001b28 <ld_dword>
c0004a4f:	31 d2                	xor    edx,edx
c0004a51:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0004a55:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0004a59:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004a5d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0004a61:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0004a64:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0004a67:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0004a6d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a70:	e8 b3 d0 ff ff       	call   c0001b28 <ld_dword>
c0004a75:	83 c4 10             	add    esp,0x10
c0004a78:	31 d2                	xor    edx,edx
c0004a7a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0004a7e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0004a82:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0004a86:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0004a89:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0004a8c:	0f b7 c3             	movzx  eax,bx
c0004a8f:	31 d2                	xor    edx,edx
c0004a91:	0f af f0             	imul   esi,eax
c0004a94:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004a98:	89 f0                	mov    eax,esi
c0004a9a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0004a9e:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0004aa2:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0004aa6:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0004aaa:	39 c1                	cmp    ecx,eax
c0004aac:	89 df                	mov    edi,ebx
c0004aae:	19 d7                	sbb    edi,edx
c0004ab0:	0f 82 d6 fb ff ff    	jb     c000468c <mount_volume+0xd1>
c0004ab6:	83 ec 0c             	sub    esp,0xc
c0004ab9:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0004abf:	31 db                	xor    ebx,ebx
c0004ac1:	50                   	push   eax
c0004ac2:	e8 61 d0 ff ff       	call   c0001b28 <ld_dword>
c0004ac7:	83 c4 10             	add    esp,0x10
c0004aca:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0004acd:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0004ad4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0004adc:	85 db                	test   ebx,ebx
c0004ade:	75 3d                	jne    c0004b1d <mount_volume+0x562>
c0004ae0:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0004ae4:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0004ae8:	0f 86 9e fb ff ff    	jbe    c000468c <mount_volume+0xd1>
c0004aee:	31 ff                	xor    edi,edi
c0004af0:	51                   	push   ecx
c0004af1:	51                   	push   ecx
c0004af2:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0004af5:	55                   	push   ebp
c0004af6:	e8 d0 d4 ff ff       	call   c0001fcb <clst2sect>
c0004afb:	83 c4 0c             	add    esp,0xc
c0004afe:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0004b02:	01 f0                	add    eax,esi
c0004b04:	11 fa                	adc    edx,edi
c0004b06:	52                   	push   edx
c0004b07:	50                   	push   eax
c0004b08:	55                   	push   ebp
c0004b09:	e8 78 d3 ff ff       	call   c0001e86 <move_window>
c0004b0e:	83 c4 10             	add    esp,0x10
c0004b11:	85 c0                	test   eax,eax
c0004b13:	0f 85 64 fb ff ff    	jne    c000467d <mount_volume+0xc2>
c0004b19:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0004b1d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0004b22:	74 0b                	je     c0004b2f <mount_volume+0x574>
c0004b24:	83 c3 20             	add    ebx,0x20
c0004b27:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0004b2d:	eb ad                	jmp    c0004adc <mount_volume+0x521>
c0004b2f:	83 ec 0c             	sub    esp,0xc
c0004b32:	8d 75 54             	lea    esi,[ebp+0x54]
c0004b35:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0004b39:	50                   	push   eax
c0004b3a:	e8 e9 cf ff ff       	call   c0001b28 <ld_dword>
c0004b3f:	83 c4 10             	add    esp,0x10
c0004b42:	89 c3                	mov    ebx,eax
c0004b44:	83 f8 01             	cmp    eax,0x1
c0004b47:	0f 86 3f fb ff ff    	jbe    c000468c <mount_volume+0xd1>
c0004b4d:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0004b50:	0f 86 36 fb ff ff    	jbe    c000468c <mount_volume+0xd1>
c0004b56:	8d 53 fe             	lea    edx,[ebx-0x2]
c0004b59:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0004b5d:	0f af c2             	imul   eax,edx
c0004b60:	31 d2                	xor    edx,edx
c0004b62:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0004b65:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0004b68:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0004b6b:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0004b6e:	89 d8                	mov    eax,ebx
c0004b70:	52                   	push   edx
c0004b71:	c1 e8 07             	shr    eax,0x7
c0004b74:	31 d2                	xor    edx,edx
c0004b76:	03 45 2c             	add    eax,DWORD PTR [ebp+0x2c]
c0004b79:	13 55 30             	adc    edx,DWORD PTR [ebp+0x30]
c0004b7c:	52                   	push   edx
c0004b7d:	50                   	push   eax
c0004b7e:	55                   	push   ebp
c0004b7f:	e8 02 d3 ff ff       	call   c0001e86 <move_window>
c0004b84:	83 c4 10             	add    esp,0x10
c0004b87:	85 c0                	test   eax,eax
c0004b89:	0f 85 ee fa ff ff    	jne    c000467d <mount_volume+0xc2>
c0004b8f:	83 ec 0c             	sub    esp,0xc
c0004b92:	89 d8                	mov    eax,ebx
c0004b94:	83 e0 7f             	and    eax,0x7f
c0004b97:	8d 04 86             	lea    eax,[esi+eax*4]
c0004b9a:	50                   	push   eax
c0004b9b:	e8 88 cf ff ff       	call   c0001b28 <ld_dword>
c0004ba0:	83 c4 10             	add    esp,0x10
c0004ba3:	83 f8 ff             	cmp    eax,0xffffffff
c0004ba6:	74 0a                	je     c0004bb2 <mount_volume+0x5f7>
c0004ba8:	43                   	inc    ebx
c0004ba9:	39 d8                	cmp    eax,ebx
c0004bab:	74 c1                	je     c0004b6e <mount_volume+0x5b3>
c0004bad:	e9 da fa ff ff       	jmp    c000468c <mount_volume+0xd1>
c0004bb2:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0004bb9:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0004bc0:	bb 04 00 00 00       	mov    ebx,0x4
c0004bc5:	e9 a8 fd ff ff       	jmp    c0004972 <mount_volume+0x3b7>
c0004bca:	3d f6 0f 00 00       	cmp    eax,0xff6
c0004bcf:	19 db                	sbb    ebx,ebx
c0004bd1:	83 c3 02             	add    ebx,0x2
c0004bd4:	e9 12 fc ff ff       	jmp    c00047eb <mount_volume+0x230>
c0004bd9:	83 c4 3c             	add    esp,0x3c
c0004bdc:	89 d0                	mov    eax,edx
c0004bde:	5b                   	pop    ebx
c0004bdf:	5e                   	pop    esi
c0004be0:	5f                   	pop    edi
c0004be1:	5d                   	pop    ebp
c0004be2:	c3                   	ret    

c0004be3 <validate>:
c0004be3:	53                   	push   ebx
c0004be4:	83 ec 08             	sub    esp,0x8
c0004be7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0004beb:	85 db                	test   ebx,ebx
c0004bed:	75 09                	jne    c0004bf8 <validate+0x15>
c0004bef:	b8 09 00 00 00       	mov    eax,0x9
c0004bf4:	31 d2                	xor    edx,edx
c0004bf6:	eb 2d                	jmp    c0004c25 <validate+0x42>
c0004bf8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004bfa:	85 c0                	test   eax,eax
c0004bfc:	74 f1                	je     c0004bef <validate+0xc>
c0004bfe:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0004c01:	74 ec                	je     c0004bef <validate+0xc>
c0004c03:	66 8b 48 06          	mov    cx,WORD PTR [eax+0x6]
c0004c07:	66 39 4b 04          	cmp    WORD PTR [ebx+0x4],cx
c0004c0b:	75 e2                	jne    c0004bef <validate+0xc>
c0004c0d:	83 ec 0c             	sub    esp,0xc
c0004c10:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004c14:	50                   	push   eax
c0004c15:	e8 aa ce ff ff       	call   c0001ac4 <disk_status>
c0004c1a:	83 c4 10             	add    esp,0x10
c0004c1d:	a8 01                	test   al,0x1
c0004c1f:	75 ce                	jne    c0004bef <validate+0xc>
c0004c21:	8b 13                	mov    edx,DWORD PTR [ebx]
c0004c23:	31 c0                	xor    eax,eax
c0004c25:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004c29:	89 11                	mov    DWORD PTR [ecx],edx
c0004c2b:	83 c4 08             	add    esp,0x8
c0004c2e:	5b                   	pop    ebx
c0004c2f:	c3                   	ret    

c0004c30 <f_mount>:
c0004c30:	53                   	push   ebx
c0004c31:	83 ec 18             	sub    esp,0x18
c0004c34:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004c38:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004c3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c40:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004c44:	50                   	push   eax
c0004c45:	e8 a6 f5 ff ff       	call   c00041f0 <get_ldnumber>
c0004c4a:	59                   	pop    ecx
c0004c4b:	89 c2                	mov    edx,eax
c0004c4d:	b8 0b 00 00 00       	mov    eax,0xb
c0004c52:	85 d2                	test   edx,edx
c0004c54:	78 3f                	js     c0004c95 <f_mount+0x65>
c0004c56:	8b 04 95 20 13 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcece0]
c0004c5d:	85 c0                	test   eax,eax
c0004c5f:	74 03                	je     c0004c64 <f_mount+0x34>
c0004c61:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c68:	85 c0                	test   eax,eax
c0004c6a:	74 03                	je     c0004c6f <f_mount+0x3f>
c0004c6c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c73:	89 04 95 20 13 03 c0 	mov    DWORD PTR [edx*4-0x3ffcece0],eax
c0004c7a:	31 c0                	xor    eax,eax
c0004c7c:	84 db                	test   bl,bl
c0004c7e:	74 15                	je     c0004c95 <f_mount+0x65>
c0004c80:	50                   	push   eax
c0004c81:	6a 00                	push   0x0
c0004c83:	8d 44 24 28          	lea    eax,[esp+0x28]
c0004c87:	50                   	push   eax
c0004c88:	8d 44 24 30          	lea    eax,[esp+0x30]
c0004c8c:	50                   	push   eax
c0004c8d:	e8 29 f9 ff ff       	call   c00045bb <mount_volume>
c0004c92:	83 c4 10             	add    esp,0x10
c0004c95:	83 c4 18             	add    esp,0x18
c0004c98:	5b                   	pop    ebx
c0004c99:	c3                   	ret    

c0004c9a <f_open>:
c0004c9a:	55                   	push   ebp
c0004c9b:	57                   	push   edi
c0004c9c:	56                   	push   esi
c0004c9d:	53                   	push   ebx
c0004c9e:	83 ec 7c             	sub    esp,0x7c
c0004ca1:	8b ac 24 90 00 00 00 	mov    ebp,DWORD PTR [esp+0x90]
c0004ca8:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c0004caf:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c0004cb6:	85 ed                	test   ebp,ebp
c0004cb8:	0f 84 8f 04 00 00    	je     c000514d <f_open+0x4b3>
c0004cbe:	89 f3                	mov    ebx,esi
c0004cc0:	50                   	push   eax
c0004cc1:	83 e3 3f             	and    ebx,0x3f
c0004cc4:	0f b6 c3             	movzx  eax,bl
c0004cc7:	50                   	push   eax
c0004cc8:	8d 44 24 28          	lea    eax,[esp+0x28]
c0004ccc:	50                   	push   eax
c0004ccd:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004cd4:	50                   	push   eax
c0004cd5:	e8 e1 f8 ff ff       	call   c00045bb <mount_volume>
c0004cda:	83 c4 10             	add    esp,0x10
c0004cdd:	85 c0                	test   eax,eax
c0004cdf:	89 04 24             	mov    DWORD PTR [esp],eax
c0004ce2:	0f 85 5e 04 00 00    	jne    c0005146 <f_open+0x4ac>
c0004ce8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004cec:	83 ec 0c             	sub    esp,0xc
c0004cef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004cf3:	68 60 04 00 00       	push   0x460
c0004cf8:	e8 a6 3e 00 00       	call   c0008ba3 <ff_memalloc>
c0004cfd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d01:	83 c4 10             	add    esp,0x10
c0004d04:	c7 04 24 11 00 00 00 	mov    DWORD PTR [esp],0x11
c0004d0b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004d10:	0f 84 37 04 00 00    	je     c000514d <f_open+0x4b3>
c0004d16:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0004d1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d1e:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0004d24:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d27:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004d2a:	57                   	push   edi
c0004d2b:	57                   	push   edi
c0004d2c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0004d33:	8d 7c 24 30          	lea    edi,[esp+0x30]
c0004d37:	57                   	push   edi
c0004d38:	e8 d9 f3 ff ff       	call   c0004116 <follow_path>
c0004d3d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d41:	83 c4 10             	add    esp,0x10
c0004d44:	85 c0                	test   eax,eax
c0004d46:	75 0e                	jne    c0004d56 <f_open+0xbc>
c0004d48:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004d4d:	79 07                	jns    c0004d56 <f_open+0xbc>
c0004d4f:	c7 04 24 06 00 00 00 	mov    DWORD PTR [esp],0x6
c0004d56:	f7 c6 1c 00 00 00    	test   esi,0x1c
c0004d5c:	0f 84 bb 01 00 00    	je     c0004f1d <f_open+0x283>
c0004d62:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0004d66:	74 26                	je     c0004d8e <f_open+0xf4>
c0004d68:	83 3c 24 04          	cmp    DWORD PTR [esp],0x4
c0004d6c:	0f 85 bf 03 00 00    	jne    c0005131 <f_open+0x497>
c0004d72:	83 ec 0c             	sub    esp,0xc
c0004d75:	83 cb 08             	or     ebx,0x8
c0004d78:	57                   	push   edi
c0004d79:	e8 63 eb ff ff       	call   c00038e1 <dir_register>
c0004d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d82:	83 c4 10             	add    esp,0x10
c0004d85:	85 c0                	test   eax,eax
c0004d87:	74 33                	je     c0004dbc <f_open+0x122>
c0004d89:	e9 a3 03 00 00       	jmp    c0005131 <f_open+0x497>
c0004d8e:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0004d95:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004d9a:	0f 85 91 03 00 00    	jne    c0005131 <f_open+0x497>
c0004da0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0004da7:	f7 c6 04 00 00 00    	test   esi,0x4
c0004dad:	0f 85 7e 03 00 00    	jne    c0005131 <f_open+0x497>
c0004db3:	83 e6 08             	and    esi,0x8
c0004db6:	0f 84 92 01 00 00    	je     c0004f4e <f_open+0x2b4>
c0004dbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dc0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0004dc3:	0f 85 a3 00 00 00    	jne    c0004e6c <f_open+0x1d2>
c0004dc9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0004dcc:	56                   	push   esi
c0004dcd:	56                   	push   esi
c0004dce:	55                   	push   ebp
c0004dcf:	50                   	push   eax
c0004dd0:	e8 8a e5 ff ff       	call   c000335f <init_alloc_info>
c0004dd5:	83 c4 0c             	add    esp,0xc
c0004dd8:	6a 1e                	push   0x1e
c0004dda:	6a 00                	push   0x0
c0004ddc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004de0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004de3:	83 c0 02             	add    eax,0x2
c0004de6:	50                   	push   eax
c0004de7:	e8 ea cd ff ff       	call   c0001bd6 <mem_set>
c0004dec:	83 c4 0c             	add    esp,0xc
c0004def:	6a 1a                	push   0x1a
c0004df1:	6a 00                	push   0x0
c0004df3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004df7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004dfa:	83 c0 26             	add    eax,0x26
c0004dfd:	50                   	push   eax
c0004dfe:	e8 d3 cd ff ff       	call   c0001bd6 <mem_set>
c0004e03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004e07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e0a:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e0e:	5a                   	pop    edx
c0004e0f:	59                   	pop    ecx
c0004e10:	68 00 00 21 50       	push   0x50210000
c0004e15:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e18:	83 c0 08             	add    eax,0x8
c0004e1b:	50                   	push   eax
c0004e1c:	e8 7c cd ff ff       	call   c0001b9d <st_dword>
c0004e21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004e25:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e28:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004e2c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0004e2f:	e8 c8 e5 ff ff       	call   c00033fc <store_xdir>
c0004e34:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004e38:	83 c4 10             	add    esp,0x10
c0004e3b:	85 c0                	test   eax,eax
c0004e3d:	0f 85 ee 02 00 00    	jne    c0005131 <f_open+0x497>
c0004e43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0004e46:	85 c0                	test   eax,eax
c0004e48:	0f 84 00 01 00 00    	je     c0004f4e <f_open+0x2b4>
c0004e4e:	51                   	push   ecx
c0004e4f:	6a 00                	push   0x0
c0004e51:	50                   	push   eax
c0004e52:	55                   	push   ebp
c0004e53:	e8 69 d7 ff ff       	call   c00025c1 <remove_chain>
c0004e58:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0004e5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004e60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0004e63:	48                   	dec    eax
c0004e64:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0004e67:	e9 a8 00 00 00       	jmp    c0004f14 <f_open+0x27a>
c0004e6c:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0004e70:	52                   	push   edx
c0004e71:	52                   	push   edx
c0004e72:	56                   	push   esi
c0004e73:	83 c6 0e             	add    esi,0xe
c0004e76:	50                   	push   eax
c0004e77:	e8 ed de ff ff       	call   c0002d69 <ld_clust>
c0004e7c:	59                   	pop    ecx
c0004e7d:	5f                   	pop    edi
c0004e7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004e82:	68 00 00 21 50       	push   0x50210000
c0004e87:	56                   	push   esi
c0004e88:	e8 10 cd ff ff       	call   c0001b9d <st_dword>
c0004e8d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004e91:	83 c4 0c             	add    esp,0xc
c0004e94:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004e98:	6a 00                	push   0x0
c0004e9a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0004e9e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0004ea2:	e8 f2 de ff ff       	call   c0002d99 <st_clust>
c0004ea7:	58                   	pop    eax
c0004ea8:	5a                   	pop    edx
c0004ea9:	6a 00                	push   0x0
c0004eab:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0004eaf:	83 c0 1c             	add    eax,0x1c
c0004eb2:	50                   	push   eax
c0004eb3:	e8 e5 cc ff ff       	call   c0001b9d <st_dword>
c0004eb8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004ebc:	83 c4 10             	add    esp,0x10
c0004ebf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ec3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0004ec8:	0f 84 80 00 00 00    	je     c0004f4e <f_open+0x2b4>
c0004ece:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed2:	8b 70 4c             	mov    esi,DWORD PTR [eax+0x4c]
c0004ed5:	8b 78 50             	mov    edi,DWORD PTR [eax+0x50]
c0004ed8:	50                   	push   eax
c0004ed9:	6a 00                	push   0x0
c0004edb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0004edf:	8d 44 24 30          	lea    eax,[esp+0x30]
c0004ee3:	50                   	push   eax
c0004ee4:	e8 d8 d6 ff ff       	call   c00025c1 <remove_chain>
c0004ee9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004eed:	83 c4 10             	add    esp,0x10
c0004ef0:	85 c0                	test   eax,eax
c0004ef2:	0f 85 39 02 00 00    	jne    c0005131 <f_open+0x497>
c0004ef8:	50                   	push   eax
c0004ef9:	57                   	push   edi
c0004efa:	56                   	push   esi
c0004efb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0004eff:	e8 82 cf ff ff       	call   c0001e86 <move_window>
c0004f04:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0004f08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004f0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004f10:	48                   	dec    eax
c0004f11:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004f14:	83 c4 10             	add    esp,0x10
c0004f17:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0004f1b:	eb 2b                	jmp    c0004f48 <f_open+0x2ae>
c0004f1d:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0004f21:	0f 85 0a 02 00 00    	jne    c0005131 <f_open+0x497>
c0004f27:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f2b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004f32:	a8 10                	test   al,0x10
c0004f34:	0f 85 f7 01 00 00    	jne    c0005131 <f_open+0x497>
c0004f3a:	83 e6 02             	and    esi,0x2
c0004f3d:	74 0f                	je     c0004f4e <f_open+0x2b4>
c0004f3f:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0004f46:	a8 01                	test   al,0x1
c0004f48:	0f 85 e3 01 00 00    	jne    c0005131 <f_open+0x497>
c0004f4e:	f6 c3 08             	test   bl,0x8
c0004f51:	74 03                	je     c0004f56 <f_open+0x2bc>
c0004f53:	83 cb 40             	or     ebx,0x40
c0004f56:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0004f5a:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0004f5e:	8b 41 4c             	mov    eax,DWORD PTR [ecx+0x4c]
c0004f61:	8b 51 50             	mov    edx,DWORD PTR [ecx+0x50]
c0004f64:	89 45 40             	mov    DWORD PTR [ebp+0x40],eax
c0004f67:	89 55 44             	mov    DWORD PTR [ebp+0x44],edx
c0004f6a:	89 75 48             	mov    DWORD PTR [ebp+0x48],esi
c0004f6d:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0004f70:	75 2c                	jne    c0004f9e <f_open+0x304>
c0004f72:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004f76:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0004f7b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0004f7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004f82:	30 c0                	xor    al,al
c0004f84:	09 d0                	or     eax,edx
c0004f86:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0004f89:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004f8d:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0004f90:	50                   	push   eax
c0004f91:	50                   	push   eax
c0004f92:	55                   	push   ebp
c0004f93:	51                   	push   ecx
c0004f94:	e8 c6 e3 ff ff       	call   c000335f <init_alloc_info>
c0004f99:	83 c4 10             	add    esp,0x10
c0004f9c:	eb 24                	jmp    c0004fc2 <f_open+0x328>
c0004f9e:	57                   	push   edi
c0004f9f:	57                   	push   edi
c0004fa0:	56                   	push   esi
c0004fa1:	83 c6 1c             	add    esi,0x1c
c0004fa4:	51                   	push   ecx
c0004fa5:	e8 bf dd ff ff       	call   c0002d69 <ld_clust>
c0004faa:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0004fad:	89 34 24             	mov    DWORD PTR [esp],esi
c0004fb0:	e8 73 cb ff ff       	call   c0001b28 <ld_dword>
c0004fb5:	83 c4 10             	add    esp,0x10
c0004fb8:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0004fbb:	c7 45 10 00 00 00 00 	mov    DWORD PTR [ebp+0x10],0x0
c0004fc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc6:	c7 45 4c 00 00 00 00 	mov    DWORD PTR [ebp+0x4c],0x0
c0004fcd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0004fd0:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004fd4:	88 5d 28             	mov    BYTE PTR [ebp+0x28],bl
c0004fd7:	66 89 45 04          	mov    WORD PTR [ebp+0x4],ax
c0004fdb:	c6 45 29 00          	mov    BYTE PTR [ebp+0x29],0x0
c0004fdf:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0004fe6:	c7 45 3c 00 00 00 00 	mov    DWORD PTR [ebp+0x3c],0x0
c0004fed:	c7 45 2c 00 00 00 00 	mov    DWORD PTR [ebp+0x2c],0x0
c0004ff4:	c7 45 30 00 00 00 00 	mov    DWORD PTR [ebp+0x30],0x0
c0004ffb:	8d 45 50             	lea    eax,[ebp+0x50]
c0004ffe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005002:	56                   	push   esi
c0005003:	68 00 02 00 00       	push   0x200
c0005008:	6a 00                	push   0x0
c000500a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000500e:	e8 c3 cb ff ff       	call   c0001bd6 <mem_set>
c0005013:	83 c4 10             	add    esp,0x10
c0005016:	80 e3 20             	and    bl,0x20
c0005019:	75 0c                	jne    c0005027 <f_open+0x38d>
c000501b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005022:	e9 0a 01 00 00       	jmp    c0005131 <f_open+0x497>
c0005027:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000502a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000502d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005031:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005039:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000503d:	74 dc                	je     c000501b <f_open+0x381>
c000503f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005043:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005047:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000504a:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000504d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005051:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005059:	0f b7 58 0a          	movzx  ebx,WORD PTR [eax+0xa]
c000505d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0005060:	c1 e3 09             	shl    ebx,0x9
c0005063:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005066:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000506a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000506e:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005072:	73 2f                	jae    c00050a3 <f_open+0x409>
c0005074:	51                   	push   ecx
c0005075:	51                   	push   ecx
c0005076:	50                   	push   eax
c0005077:	55                   	push   ebp
c0005078:	e8 7a cf ff ff       	call   c0001ff7 <get_fat>
c000507d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005081:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005085:	29 54 24 18          	sub    DWORD PTR [esp+0x18],edx
c0005089:	19 4c 24 1c          	sbb    DWORD PTR [esp+0x1c],ecx
c000508d:	83 c4 10             	add    esp,0x10
c0005090:	83 f8 01             	cmp    eax,0x1
c0005093:	76 17                	jbe    c00050ac <f_open+0x412>
c0005095:	83 f8 ff             	cmp    eax,0xffffffff
c0005098:	75 cc                	jne    c0005066 <f_open+0x3cc>
c000509a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00050a1:	eb 10                	jmp    c00050b3 <f_open+0x419>
c00050a3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00050aa:	eb 07                	jmp    c00050b3 <f_open+0x419>
c00050ac:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c00050b3:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c00050b6:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00050ba:	75 75                	jne    c0005131 <f_open+0x497>
c00050bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050c0:	81 e2 ff 01 00 00    	and    edx,0x1ff
c00050c6:	0f 84 4f ff ff ff    	je     c000501b <f_open+0x381>
c00050cc:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00050d0:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c00050d4:	52                   	push   edx
c00050d5:	52                   	push   edx
c00050d6:	50                   	push   eax
c00050d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00050db:	e8 eb ce ff ff       	call   c0001fcb <clst2sect>
c00050e0:	83 c4 10             	add    esp,0x10
c00050e3:	89 d7                	mov    edi,edx
c00050e5:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c00050ec:	09 c7                	or     edi,eax
c00050ee:	74 41                	je     c0005131 <f_open+0x497>
c00050f0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00050f4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00050f8:	31 db                	xor    ebx,ebx
c00050fa:	0f ac fe 09          	shrd   esi,edi,0x9
c00050fe:	89 f1                	mov    ecx,esi
c0005100:	01 c1                	add    ecx,eax
c0005102:	11 d3                	adc    ebx,edx
c0005104:	89 4d 38             	mov    DWORD PTR [ebp+0x38],ecx
c0005107:	83 ec 0c             	sub    esp,0xc
c000510a:	89 5d 3c             	mov    DWORD PTR [ebp+0x3c],ebx
c000510d:	6a 01                	push   0x1
c000510f:	53                   	push   ebx
c0005110:	51                   	push   ecx
c0005111:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005119:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000511d:	50                   	push   eax
c000511e:	e8 a7 c9 ff ff       	call   c0001aca <disk_read>
c0005123:	83 c4 20             	add    esp,0x20
c0005126:	85 c0                	test   eax,eax
c0005128:	0f 95 c0             	setne  al
c000512b:	0f b6 c0             	movzx  eax,al
c000512e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005131:	83 ec 0c             	sub    esp,0xc
c0005134:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005138:	e8 7c 3a 00 00       	call   c0008bb9 <ff_memfree>
c000513d:	83 c4 10             	add    esp,0x10
c0005140:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0005144:	74 07                	je     c000514d <f_open+0x4b3>
c0005146:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c000514d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005150:	83 c4 7c             	add    esp,0x7c
c0005153:	5b                   	pop    ebx
c0005154:	5e                   	pop    esi
c0005155:	5f                   	pop    edi
c0005156:	5d                   	pop    ebp
c0005157:	c3                   	ret    

c0005158 <f_read>:
c0005158:	55                   	push   ebp
c0005159:	57                   	push   edi
c000515a:	56                   	push   esi
c000515b:	53                   	push   ebx
c000515c:	83 ec 34             	sub    esp,0x34
c000515f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005163:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c0005167:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000516d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005171:	50                   	push   eax
c0005172:	53                   	push   ebx
c0005173:	e8 6b fa ff ff       	call   c0004be3 <validate>
c0005178:	83 c4 10             	add    esp,0x10
c000517b:	89 c5                	mov    ebp,eax
c000517d:	85 c0                	test   eax,eax
c000517f:	0f 85 66 02 00 00    	jne    c00053eb <f_read+0x293>
c0005185:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005189:	85 ed                	test   ebp,ebp
c000518b:	0f 85 5a 02 00 00    	jne    c00053eb <f_read+0x293>
c0005191:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005195:	0f 84 4b 02 00 00    	je     c00053e6 <f_read+0x28e>
c000519b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000519e:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051a1:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051a4:	bf 00 00 00 00       	mov    edi,0x0
c00051a9:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051ac:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00051b0:	89 d1                	mov    ecx,edx
c00051b2:	19 f9                	sbb    ecx,edi
c00051b4:	0f 83 d9 00 00 00    	jae    c0005293 <f_read+0x13b>
c00051ba:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00051be:	e9 d0 00 00 00       	jmp    c0005293 <f_read+0x13b>
c00051c3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00051c6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00051c9:	89 c1                	mov    ecx,eax
c00051cb:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00051d1:	0f 85 de 01 00 00    	jne    c00053b5 <f_read+0x25d>
c00051d7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00051db:	89 c6                	mov    esi,eax
c00051dd:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c00051e1:	89 d7                	mov    edi,edx
c00051e3:	49                   	dec    ecx
c00051e4:	0f ac fe 09          	shrd   esi,edi,0x9
c00051e8:	21 f1                	and    ecx,esi
c00051ea:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051ee:	0f 84 af 00 00 00    	je     c00052a3 <f_read+0x14b>
c00051f4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00051f8:	56                   	push   esi
c00051f9:	56                   	push   esi
c00051fa:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00051fd:	51                   	push   ecx
c00051fe:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005202:	e8 c4 cd ff ff       	call   c0001fcb <clst2sect>
c0005207:	83 c4 10             	add    esp,0x10
c000520a:	89 d7                	mov    edi,edx
c000520c:	09 c7                	or     edi,eax
c000520e:	0f 84 be 00 00 00    	je     c00052d2 <f_read+0x17a>
c0005214:	31 ff                	xor    edi,edi
c0005216:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000521a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000521d:	01 c6                	add    esi,eax
c000521f:	11 d7                	adc    edi,edx
c0005221:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005229:	0f 86 0d 01 00 00    	jbe    c000533c <f_read+0x1e4>
c000522f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005233:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005237:	c1 e8 09             	shr    eax,0x9
c000523a:	89 04 24             	mov    DWORD PTR [esp],eax
c000523d:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005241:	03 14 24             	add    edx,DWORD PTR [esp]
c0005244:	39 c2                	cmp    edx,eax
c0005246:	76 07                	jbe    c000524f <f_read+0xf7>
c0005248:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000524c:	89 04 24             	mov    DWORD PTR [esp],eax
c000524f:	83 ec 0c             	sub    esp,0xc
c0005252:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005256:	57                   	push   edi
c0005257:	56                   	push   esi
c0005258:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000525c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005260:	50                   	push   eax
c0005261:	e8 64 c8 ff ff       	call   c0001aca <disk_read>
c0005266:	83 c4 20             	add    esp,0x20
c0005269:	85 c0                	test   eax,eax
c000526b:	75 78                	jne    c00052e5 <f_read+0x18d>
c000526d:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005271:	0f 88 84 00 00 00    	js     c00052fb <f_read+0x1a3>
c0005277:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000527a:	c1 e6 09             	shl    esi,0x9
c000527d:	31 ff                	xor    edi,edi
c000527f:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005283:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005287:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000528b:	01 30                	add    DWORD PTR [eax],esi
c000528d:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005290:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005293:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005298:	0f 85 25 ff ff ff    	jne    c00051c3 <f_read+0x6b>
c000529e:	e9 48 01 00 00       	jmp    c00053eb <f_read+0x293>
c00052a3:	89 d7                	mov    edi,edx
c00052a5:	09 c7                	or     edi,eax
c00052a7:	75 05                	jne    c00052ae <f_read+0x156>
c00052a9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052ac:	eb 1f                	jmp    c00052cd <f_read+0x175>
c00052ae:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052b2:	74 0b                	je     c00052bf <f_read+0x167>
c00052b4:	51                   	push   ecx
c00052b5:	52                   	push   edx
c00052b6:	50                   	push   eax
c00052b7:	53                   	push   ebx
c00052b8:	e8 77 d6 ff ff       	call   c0002934 <clmt_clust>
c00052bd:	eb 0b                	jmp    c00052ca <f_read+0x172>
c00052bf:	57                   	push   edi
c00052c0:	57                   	push   edi
c00052c1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00052c4:	53                   	push   ebx
c00052c5:	e8 2d cd ff ff       	call   c0001ff7 <get_fat>
c00052ca:	83 c4 10             	add    esp,0x10
c00052cd:	83 f8 01             	cmp    eax,0x1
c00052d0:	77 0e                	ja     c00052e0 <f_read+0x188>
c00052d2:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00052d6:	bd 02 00 00 00       	mov    ebp,0x2
c00052db:	e9 0b 01 00 00       	jmp    c00053eb <f_read+0x293>
c00052e0:	83 f8 ff             	cmp    eax,0xffffffff
c00052e3:	75 0e                	jne    c00052f3 <f_read+0x19b>
c00052e5:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00052e9:	bd 01 00 00 00       	mov    ebp,0x1
c00052ee:	e9 f8 00 00 00       	jmp    c00053eb <f_read+0x293>
c00052f3:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00052f6:	e9 f9 fe ff ff       	jmp    c00051f4 <f_read+0x9c>
c00052fb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00052fe:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005301:	29 f0                	sub    eax,esi
c0005303:	19 fa                	sbb    edx,edi
c0005305:	89 c6                	mov    esi,eax
c0005307:	89 d7                	mov    edi,edx
c0005309:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000530c:	ba 00 00 00 00       	mov    edx,0x0
c0005311:	89 f9                	mov    ecx,edi
c0005313:	19 d1                	sbb    ecx,edx
c0005315:	0f 83 5c ff ff ff    	jae    c0005277 <f_read+0x11f>
c000531b:	8d 43 50             	lea    eax,[ebx+0x50]
c000531e:	89 f7                	mov    edi,esi
c0005320:	51                   	push   ecx
c0005321:	c1 e7 09             	shl    edi,0x9
c0005324:	68 00 02 00 00       	push   0x200
c0005329:	50                   	push   eax
c000532a:	03 7c 24 50          	add    edi,DWORD PTR [esp+0x50]
c000532e:	57                   	push   edi
c000532f:	e8 86 c8 ff ff       	call   c0001bba <mem_cpy>
c0005334:	83 c4 10             	add    esp,0x10
c0005337:	e9 3b ff ff ff       	jmp    c0005277 <f_read+0x11f>
c000533c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000533f:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005342:	89 04 24             	mov    DWORD PTR [esp],eax
c0005345:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005349:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000534d:	75 05                	jne    c0005354 <f_read+0x1fc>
c000534f:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005352:	74 5b                	je     c00053af <f_read+0x257>
c0005354:	8d 43 50             	lea    eax,[ebx+0x50]
c0005357:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000535b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535f:	79 2a                	jns    c000538b <f_read+0x233>
c0005361:	83 ec 0c             	sub    esp,0xc
c0005364:	6a 01                	push   0x1
c0005366:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000536a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000536e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005372:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005376:	50                   	push   eax
c0005377:	e8 64 c7 ff ff       	call   c0001ae0 <disk_write>
c000537c:	83 c4 20             	add    esp,0x20
c000537f:	85 c0                	test   eax,eax
c0005381:	0f 85 5e ff ff ff    	jne    c00052e5 <f_read+0x18d>
c0005387:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000538b:	83 ec 0c             	sub    esp,0xc
c000538e:	6a 01                	push   0x1
c0005390:	57                   	push   edi
c0005391:	56                   	push   esi
c0005392:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005396:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000539a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000539e:	50                   	push   eax
c000539f:	e8 26 c7 ff ff       	call   c0001aca <disk_read>
c00053a4:	83 c4 20             	add    esp,0x20
c00053a7:	85 c0                	test   eax,eax
c00053a9:	0f 85 36 ff ff ff    	jne    c00052e5 <f_read+0x18d>
c00053af:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053b2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053b5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053b8:	ba 00 02 00 00       	mov    edx,0x200
c00053bd:	25 ff 01 00 00       	and    eax,0x1ff
c00053c2:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00053c6:	29 c2                	sub    edx,eax
c00053c8:	39 d6                	cmp    esi,edx
c00053ca:	76 02                	jbe    c00053ce <f_read+0x276>
c00053cc:	89 d6                	mov    esi,edx
c00053ce:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00053d2:	52                   	push   edx
c00053d3:	56                   	push   esi
c00053d4:	50                   	push   eax
c00053d5:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00053d9:	e8 dc c7 ff ff       	call   c0001bba <mem_cpy>
c00053de:	83 c4 10             	add    esp,0x10
c00053e1:	e9 97 fe ff ff       	jmp    c000527d <f_read+0x125>
c00053e6:	bd 07 00 00 00       	mov    ebp,0x7
c00053eb:	83 c4 2c             	add    esp,0x2c
c00053ee:	89 e8                	mov    eax,ebp
c00053f0:	5b                   	pop    ebx
c00053f1:	5e                   	pop    esi
c00053f2:	5f                   	pop    edi
c00053f3:	5d                   	pop    ebp
c00053f4:	c3                   	ret    

c00053f5 <f_write>:
c00053f5:	55                   	push   ebp
c00053f6:	57                   	push   edi
c00053f7:	56                   	push   esi
c00053f8:	53                   	push   ebx
c00053f9:	83 ec 34             	sub    esp,0x34
c00053fc:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005400:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c0005404:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000540a:	8d 44 24 24          	lea    eax,[esp+0x24]
c000540e:	50                   	push   eax
c000540f:	53                   	push   ebx
c0005410:	e8 ce f7 ff ff       	call   c0004be3 <validate>
c0005415:	83 c4 10             	add    esp,0x10
c0005418:	89 c5                	mov    ebp,eax
c000541a:	85 c0                	test   eax,eax
c000541c:	0f 85 9b 02 00 00    	jne    c00056bd <f_write+0x2c8>
c0005422:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005426:	85 ed                	test   ebp,ebp
c0005428:	0f 85 8f 02 00 00    	jne    c00056bd <f_write+0x2c8>
c000542e:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005432:	0f 84 80 02 00 00    	je     c00056b8 <f_write+0x2c3>
c0005438:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000543c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000543f:	0f 84 4c 01 00 00    	je     c0005591 <f_write+0x19c>
c0005445:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005448:	89 c7                	mov    edi,eax
c000544a:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c000544e:	0f 83 3d 01 00 00    	jae    c0005591 <f_write+0x19c>
c0005454:	f7 d0                	not    eax
c0005456:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000545a:	e9 32 01 00 00       	jmp    c0005591 <f_write+0x19c>
c000545f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005462:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005465:	89 c1                	mov    ecx,eax
c0005467:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000546d:	0f 85 10 02 00 00    	jne    c0005683 <f_write+0x28e>
c0005473:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005477:	89 c6                	mov    esi,eax
c0005479:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c000547d:	89 d7                	mov    edi,edx
c000547f:	49                   	dec    ecx
c0005480:	0f ac fe 09          	shrd   esi,edi,0x9
c0005484:	21 f1                	and    ecx,esi
c0005486:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000548a:	0f 84 0e 01 00 00    	je     c000559e <f_write+0x1a9>
c0005490:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005494:	0f 88 7e 01 00 00    	js     c0005618 <f_write+0x223>
c000549a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000549e:	56                   	push   esi
c000549f:	56                   	push   esi
c00054a0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00054a3:	51                   	push   ecx
c00054a4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00054a8:	e8 1e cb ff ff       	call   c0001fcb <clst2sect>
c00054ad:	83 c4 10             	add    esp,0x10
c00054b0:	89 d7                	mov    edi,edx
c00054b2:	09 c7                	or     edi,eax
c00054b4:	0f 84 28 01 00 00    	je     c00055e2 <f_write+0x1ed>
c00054ba:	31 ff                	xor    edi,edi
c00054bc:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054c4:	01 c6                	add    esi,eax
c00054c6:	11 d7                	adc    edi,edx
c00054c8:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054d0:	0f 86 6f 01 00 00    	jbe    c0005645 <f_write+0x250>
c00054d6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054de:	c1 e8 09             	shr    eax,0x9
c00054e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054e5:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054e9:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c00054ed:	39 c2                	cmp    edx,eax
c00054ef:	76 08                	jbe    c00054f9 <f_write+0x104>
c00054f1:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054f9:	83 ec 0c             	sub    esp,0xc
c00054fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005500:	57                   	push   edi
c0005501:	56                   	push   esi
c0005502:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005506:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000550a:	50                   	push   eax
c000550b:	e8 d0 c5 ff ff       	call   c0001ae0 <disk_write>
c0005510:	83 c4 20             	add    esp,0x20
c0005513:	85 c0                	test   eax,eax
c0005515:	0f 85 da 00 00 00    	jne    c00055f5 <f_write+0x200>
c000551b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000551e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005521:	29 f0                	sub    eax,esi
c0005523:	19 fa                	sbb    edx,edi
c0005525:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005529:	89 d7                	mov    edi,edx
c000552b:	ba 00 00 00 00       	mov    edx,0x0
c0005530:	89 f9                	mov    ecx,edi
c0005532:	19 d1                	sbb    ecx,edx
c0005534:	73 20                	jae    c0005556 <f_write+0x161>
c0005536:	89 c7                	mov    edi,eax
c0005538:	8d 43 50             	lea    eax,[ebx+0x50]
c000553b:	51                   	push   ecx
c000553c:	c1 e7 09             	shl    edi,0x9
c000553f:	68 00 02 00 00       	push   0x200
c0005544:	03 7c 24 4c          	add    edi,DWORD PTR [esp+0x4c]
c0005548:	57                   	push   edi
c0005549:	50                   	push   eax
c000554a:	e8 6b c6 ff ff       	call   c0001bba <mem_cpy>
c000554f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005553:	83 c4 10             	add    esp,0x10
c0005556:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000555a:	c1 e6 09             	shl    esi,0x9
c000555d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005561:	31 ff                	xor    edi,edi
c0005563:	01 30                	add    DWORD PTR [eax],esi
c0005565:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005569:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000556d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005570:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005573:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005576:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c0005579:	89 c1                	mov    ecx,eax
c000557b:	39 f2                	cmp    edx,esi
c000557d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005580:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005583:	19 f9                	sbb    ecx,edi
c0005585:	73 04                	jae    c000558b <f_write+0x196>
c0005587:	89 f2                	mov    edx,esi
c0005589:	89 f8                	mov    eax,edi
c000558b:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000558e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0005591:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005596:	0f 85 c3 fe ff ff    	jne    c000545f <f_write+0x6a>
c000559c:	eb 36                	jmp    c00055d4 <f_write+0x1df>
c000559e:	89 d7                	mov    edi,edx
c00055a0:	09 c7                	or     edi,eax
c00055a2:	75 0d                	jne    c00055b1 <f_write+0x1bc>
c00055a4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055a7:	85 c0                	test   eax,eax
c00055a9:	75 32                	jne    c00055dd <f_write+0x1e8>
c00055ab:	56                   	push   esi
c00055ac:	56                   	push   esi
c00055ad:	6a 00                	push   0x0
c00055af:	eb 16                	jmp    c00055c7 <f_write+0x1d2>
c00055b1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055b5:	74 0b                	je     c00055c2 <f_write+0x1cd>
c00055b7:	51                   	push   ecx
c00055b8:	52                   	push   edx
c00055b9:	50                   	push   eax
c00055ba:	53                   	push   ebx
c00055bb:	e8 74 d3 ff ff       	call   c0002934 <clmt_clust>
c00055c0:	eb 0b                	jmp    c00055cd <f_write+0x1d8>
c00055c2:	57                   	push   edi
c00055c3:	57                   	push   edi
c00055c4:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00055c7:	53                   	push   ebx
c00055c8:	e8 5c d1 ff ff       	call   c0002729 <create_chain>
c00055cd:	83 c4 10             	add    esp,0x10
c00055d0:	85 c0                	test   eax,eax
c00055d2:	75 09                	jne    c00055dd <f_write+0x1e8>
c00055d4:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055d8:	e9 e0 00 00 00       	jmp    c00056bd <f_write+0x2c8>
c00055dd:	83 f8 01             	cmp    eax,0x1
c00055e0:	75 0e                	jne    c00055f0 <f_write+0x1fb>
c00055e2:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00055e6:	bd 02 00 00 00       	mov    ebp,0x2
c00055eb:	e9 cd 00 00 00       	jmp    c00056bd <f_write+0x2c8>
c00055f0:	83 f8 ff             	cmp    eax,0xffffffff
c00055f3:	75 0e                	jne    c0005603 <f_write+0x20e>
c00055f5:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00055f9:	bd 01 00 00 00       	mov    ebp,0x1
c00055fe:	e9 ba 00 00 00       	jmp    c00056bd <f_write+0x2c8>
c0005603:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005606:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000560a:	0f 85 80 fe ff ff    	jne    c0005490 <f_write+0x9b>
c0005610:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005613:	e9 78 fe ff ff       	jmp    c0005490 <f_write+0x9b>
c0005618:	83 ec 0c             	sub    esp,0xc
c000561b:	8d 43 50             	lea    eax,[ebx+0x50]
c000561e:	6a 01                	push   0x1
c0005620:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005623:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005626:	50                   	push   eax
c0005627:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000562b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000562f:	50                   	push   eax
c0005630:	e8 ab c4 ff ff       	call   c0001ae0 <disk_write>
c0005635:	83 c4 20             	add    esp,0x20
c0005638:	85 c0                	test   eax,eax
c000563a:	75 b9                	jne    c00055f5 <f_write+0x200>
c000563c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005640:	e9 55 fe ff ff       	jmp    c000549a <f_write+0xa5>
c0005645:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005648:	75 05                	jne    c000564f <f_write+0x25a>
c000564a:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000564d:	74 2e                	je     c000567d <f_write+0x288>
c000564f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005652:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005655:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005658:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000565b:	73 20                	jae    c000567d <f_write+0x288>
c000565d:	83 ec 0c             	sub    esp,0xc
c0005660:	8d 43 50             	lea    eax,[ebx+0x50]
c0005663:	6a 01                	push   0x1
c0005665:	57                   	push   edi
c0005666:	56                   	push   esi
c0005667:	50                   	push   eax
c0005668:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000566c:	50                   	push   eax
c000566d:	e8 58 c4 ff ff       	call   c0001aca <disk_read>
c0005672:	83 c4 20             	add    esp,0x20
c0005675:	85 c0                	test   eax,eax
c0005677:	0f 85 78 ff ff ff    	jne    c00055f5 <f_write+0x200>
c000567d:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005680:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005683:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005686:	ba 00 02 00 00       	mov    edx,0x200
c000568b:	25 ff 01 00 00       	and    eax,0x1ff
c0005690:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005694:	29 c2                	sub    edx,eax
c0005696:	39 d6                	cmp    esi,edx
c0005698:	76 02                	jbe    c000569c <f_write+0x2a7>
c000569a:	89 d6                	mov    esi,edx
c000569c:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00056a0:	52                   	push   edx
c00056a1:	56                   	push   esi
c00056a2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00056a6:	50                   	push   eax
c00056a7:	e8 0e c5 ff ff       	call   c0001bba <mem_cpy>
c00056ac:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056b0:	83 c4 10             	add    esp,0x10
c00056b3:	e9 a5 fe ff ff       	jmp    c000555d <f_write+0x168>
c00056b8:	bd 07 00 00 00       	mov    ebp,0x7
c00056bd:	83 c4 2c             	add    esp,0x2c
c00056c0:	89 e8                	mov    eax,ebp
c00056c2:	5b                   	pop    ebx
c00056c3:	5e                   	pop    esi
c00056c4:	5f                   	pop    edi
c00056c5:	5d                   	pop    ebp
c00056c6:	c3                   	ret    

c00056c7 <f_sync>:
c00056c7:	57                   	push   edi
c00056c8:	56                   	push   esi
c00056c9:	53                   	push   ebx
c00056ca:	83 ec 68             	sub    esp,0x68
c00056cd:	8b 5c 24 78          	mov    ebx,DWORD PTR [esp+0x78]
c00056d1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00056d5:	50                   	push   eax
c00056d6:	53                   	push   ebx
c00056d7:	e8 07 f5 ff ff       	call   c0004be3 <validate>
c00056dc:	83 c4 10             	add    esp,0x10
c00056df:	85 c0                	test   eax,eax
c00056e1:	0f 85 f1 01 00 00    	jne    c00058d8 <f_sync+0x211>
c00056e7:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00056ea:	f6 c2 40             	test   dl,0x40
c00056ed:	0f 84 e5 01 00 00    	je     c00058d8 <f_sync+0x211>
c00056f3:	84 d2                	test   dl,dl
c00056f5:	79 33                	jns    c000572a <f_sync+0x63>
c00056f7:	83 ec 0c             	sub    esp,0xc
c00056fa:	8d 43 50             	lea    eax,[ebx+0x50]
c00056fd:	6a 01                	push   0x1
c00056ff:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005702:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005705:	50                   	push   eax
c0005706:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000570a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000570e:	50                   	push   eax
c000570f:	e8 cc c3 ff ff       	call   c0001ae0 <disk_write>
c0005714:	83 c4 20             	add    esp,0x20
c0005717:	89 c2                	mov    edx,eax
c0005719:	b8 01 00 00 00       	mov    eax,0x1
c000571e:	85 d2                	test   edx,edx
c0005720:	0f 85 b2 01 00 00    	jne    c00058d8 <f_sync+0x211>
c0005726:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000572a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000572e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005731:	0f 85 36 01 00 00    	jne    c000586d <f_sync+0x1a6>
c0005737:	83 ec 0c             	sub    esp,0xc
c000573a:	53                   	push   ebx
c000573b:	e8 05 ce ff ff       	call   c0002545 <fill_first_frag>
c0005740:	83 c4 10             	add    esp,0x10
c0005743:	85 c0                	test   eax,eax
c0005745:	0f 85 8d 01 00 00    	jne    c00058d8 <f_sync+0x211>
c000574b:	50                   	push   eax
c000574c:	6a ff                	push   0xffffffff
c000574e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0005751:	53                   	push   ebx
c0005752:	e8 2b ce ff ff       	call   c0002582 <fill_last_frag>
c0005757:	83 c4 10             	add    esp,0x10
c000575a:	85 c0                	test   eax,eax
c000575c:	0f 85 76 01 00 00    	jne    c00058d8 <f_sync+0x211>
c0005762:	83 ec 0c             	sub    esp,0xc
c0005765:	68 60 04 00 00       	push   0x460
c000576a:	e8 34 34 00 00       	call   c0008ba3 <ff_memalloc>
c000576f:	83 c4 10             	add    esp,0x10
c0005772:	89 c6                	mov    esi,eax
c0005774:	b8 11 00 00 00       	mov    eax,0x11
c0005779:	85 f6                	test   esi,esi
c000577b:	0f 84 57 01 00 00    	je     c00058d8 <f_sync+0x211>
c0005781:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005785:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005788:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000578e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005791:	57                   	push   edi
c0005792:	57                   	push   edi
c0005793:	53                   	push   ebx
c0005794:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0005798:	57                   	push   edi
c0005799:	e8 06 dc ff ff       	call   c00033a4 <load_obj_xdir>
c000579e:	83 c4 10             	add    esp,0x10
c00057a1:	85 c0                	test   eax,eax
c00057a3:	0f 85 ae 00 00 00    	jne    c0005857 <f_sync+0x190>
c00057a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ad:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057b0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00057b4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00057b7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00057ba:	83 ca 01             	or     edx,0x1
c00057bd:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057c0:	52                   	push   edx
c00057c1:	52                   	push   edx
c00057c2:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c00057c5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057c8:	83 c0 34             	add    eax,0x34
c00057cb:	50                   	push   eax
c00057cc:	e8 cc c3 ff ff       	call   c0001b9d <st_dword>
c00057d1:	83 c4 0c             	add    esp,0xc
c00057d4:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00057d7:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00057da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00057de:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057e1:	83 c0 38             	add    eax,0x38
c00057e4:	50                   	push   eax
c00057e5:	e8 be c3 ff ff       	call   c0001ba8 <st_qword>
c00057ea:	83 c4 0c             	add    esp,0xc
c00057ed:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00057f0:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00057f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00057f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057fa:	83 c0 28             	add    eax,0x28
c00057fd:	50                   	push   eax
c00057fe:	e8 a5 c3 ff ff       	call   c0001ba8 <st_qword>
c0005803:	59                   	pop    ecx
c0005804:	58                   	pop    eax
c0005805:	68 00 00 21 50       	push   0x50210000
c000580a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000580e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005811:	83 c0 0c             	add    eax,0xc
c0005814:	50                   	push   eax
c0005815:	e8 83 c3 ff ff       	call   c0001b9d <st_dword>
c000581a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000581e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005821:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005825:	5a                   	pop    edx
c0005826:	59                   	pop    ecx
c0005827:	6a 00                	push   0x0
c0005829:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000582c:	83 c0 10             	add    eax,0x10
c000582f:	50                   	push   eax
c0005830:	e8 68 c3 ff ff       	call   c0001b9d <st_dword>
c0005835:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005838:	e8 bf db ff ff       	call   c00033fc <store_xdir>
c000583d:	83 c4 10             	add    esp,0x10
c0005840:	85 c0                	test   eax,eax
c0005842:	75 13                	jne    c0005857 <f_sync+0x190>
c0005844:	83 ec 0c             	sub    esp,0xc
c0005847:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000584b:	e8 9d c6 ff ff       	call   c0001eed <sync_fs>
c0005850:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005854:	83 c4 10             	add    esp,0x10
c0005857:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000585b:	83 ec 0c             	sub    esp,0xc
c000585e:	56                   	push   esi
c000585f:	e8 55 33 00 00       	call   c0008bb9 <ff_memfree>
c0005864:	83 c4 10             	add    esp,0x10
c0005867:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000586b:	eb 6b                	jmp    c00058d8 <f_sync+0x211>
c000586d:	56                   	push   esi
c000586e:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0005871:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0005874:	50                   	push   eax
c0005875:	e8 0c c6 ff ff       	call   c0001e86 <move_window>
c000587a:	83 c4 10             	add    esp,0x10
c000587d:	85 c0                	test   eax,eax
c000587f:	75 57                	jne    c00058d8 <f_sync+0x211>
c0005881:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005884:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005888:	50                   	push   eax
c0005889:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c000588c:	56                   	push   esi
c000588d:	ff 33                	push   DWORD PTR [ebx]
c000588f:	e8 05 d5 ff ff       	call   c0002d99 <st_clust>
c0005894:	5a                   	pop    edx
c0005895:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005898:	59                   	pop    ecx
c0005899:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000589c:	50                   	push   eax
c000589d:	e8 fb c2 ff ff       	call   c0001b9d <st_dword>
c00058a2:	5f                   	pop    edi
c00058a3:	58                   	pop    eax
c00058a4:	8d 46 16             	lea    eax,[esi+0x16]
c00058a7:	68 00 00 21 50       	push   0x50210000
c00058ac:	83 c6 12             	add    esi,0x12
c00058af:	50                   	push   eax
c00058b0:	e8 e8 c2 ff ff       	call   c0001b9d <st_dword>
c00058b5:	58                   	pop    eax
c00058b6:	5a                   	pop    edx
c00058b7:	6a 00                	push   0x0
c00058b9:	56                   	push   esi
c00058ba:	e8 d2 c2 ff ff       	call   c0001b91 <st_word>
c00058bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00058c3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00058c7:	59                   	pop    ecx
c00058c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00058cc:	e8 1c c6 ff ff       	call   c0001eed <sync_fs>
c00058d1:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00058d5:	83 c4 10             	add    esp,0x10
c00058d8:	83 c4 60             	add    esp,0x60
c00058db:	5b                   	pop    ebx
c00058dc:	5e                   	pop    esi
c00058dd:	5f                   	pop    edi
c00058de:	c3                   	ret    

c00058df <f_close>:
c00058df:	53                   	push   ebx
c00058e0:	83 ec 24             	sub    esp,0x24
c00058e3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00058e7:	53                   	push   ebx
c00058e8:	e8 da fd ff ff       	call   c00056c7 <f_sync>
c00058ed:	83 c4 10             	add    esp,0x10
c00058f0:	85 c0                	test   eax,eax
c00058f2:	75 1a                	jne    c000590e <f_close+0x2f>
c00058f4:	50                   	push   eax
c00058f5:	50                   	push   eax
c00058f6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058fa:	50                   	push   eax
c00058fb:	53                   	push   ebx
c00058fc:	e8 e2 f2 ff ff       	call   c0004be3 <validate>
c0005901:	83 c4 10             	add    esp,0x10
c0005904:	85 c0                	test   eax,eax
c0005906:	75 06                	jne    c000590e <f_close+0x2f>
c0005908:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000590e:	83 c4 18             	add    esp,0x18
c0005911:	5b                   	pop    ebx
c0005912:	c3                   	ret    

c0005913 <f_lseek>:
c0005913:	55                   	push   ebp
c0005914:	57                   	push   edi
c0005915:	56                   	push   esi
c0005916:	53                   	push   ebx
c0005917:	83 ec 44             	sub    esp,0x44
c000591a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000591e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005922:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005926:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c000592a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000592e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005932:	50                   	push   eax
c0005933:	53                   	push   ebx
c0005934:	e8 aa f2 ff ff       	call   c0004be3 <validate>
c0005939:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000593d:	83 c4 10             	add    esp,0x10
c0005940:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0005945:	0f 85 94 04 00 00    	jne    c0005ddf <f_lseek+0x4cc>
c000594b:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c000594f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005953:	85 c0                	test   eax,eax
c0005955:	0f 85 84 04 00 00    	jne    c0005ddf <f_lseek+0x4cc>
c000595b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000595f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005962:	74 0c                	je     c0005970 <f_lseek+0x5d>
c0005964:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005967:	85 c0                	test   eax,eax
c0005969:	75 21                	jne    c000598c <f_lseek+0x79>
c000596b:	e9 c1 01 00 00       	jmp    c0005b31 <f_lseek+0x21e>
c0005970:	50                   	push   eax
c0005971:	6a ff                	push   0xffffffff
c0005973:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0005976:	53                   	push   ebx
c0005977:	e8 06 cc ff ff       	call   c0002582 <fill_last_frag>
c000597c:	83 c4 10             	add    esp,0x10
c000597f:	85 c0                	test   eax,eax
c0005981:	74 e1                	je     c0005964 <f_lseek+0x51>
c0005983:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005987:	e9 53 04 00 00       	jmp    c0005ddf <f_lseek+0x4cc>
c000598c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005991:	0f 85 af 00 00 00    	jne    c0005a46 <f_lseek+0x133>
c0005997:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c000599b:	0f 85 a5 00 00 00    	jne    c0005a46 <f_lseek+0x133>
c00059a1:	8d 78 04             	lea    edi,[eax+0x4]
c00059a4:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c00059a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00059a9:	be 02 00 00 00       	mov    esi,0x2
c00059ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00059b2:	85 ed                	test   ebp,ebp
c00059b4:	74 76                	je     c0005a2c <f_lseek+0x119>
c00059b6:	89 ea                	mov    edx,ebp
c00059b8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00059bf:	ff 04 24             	inc    DWORD PTR [esp]
c00059c2:	50                   	push   eax
c00059c3:	50                   	push   eax
c00059c4:	52                   	push   edx
c00059c5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00059c9:	53                   	push   ebx
c00059ca:	e8 28 c6 ff ff       	call   c0001ff7 <get_fat>
c00059cf:	83 c4 10             	add    esp,0x10
c00059d2:	83 f8 01             	cmp    eax,0x1
c00059d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00059d9:	77 11                	ja     c00059ec <f_lseek+0xd9>
c00059db:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00059df:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c00059e7:	e9 f3 03 00 00       	jmp    c0005ddf <f_lseek+0x4cc>
c00059ec:	83 f8 ff             	cmp    eax,0xffffffff
c00059ef:	75 11                	jne    c0005a02 <f_lseek+0xef>
c00059f1:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00059f5:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c00059fd:	e9 dd 03 00 00       	jmp    c0005ddf <f_lseek+0x4cc>
c0005a02:	8d 4a 01             	lea    ecx,[edx+0x1]
c0005a05:	89 c2                	mov    edx,eax
c0005a07:	39 c1                	cmp    ecx,eax
c0005a09:	74 b4                	je     c00059bf <f_lseek+0xac>
c0005a0b:	83 c6 02             	add    esi,0x2
c0005a0e:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005a12:	72 0b                	jb     c0005a1f <f_lseek+0x10c>
c0005a14:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005a17:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005a1a:	89 0f                	mov    DWORD PTR [edi],ecx
c0005a1c:	83 c7 08             	add    edi,0x8
c0005a1f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005a23:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005a26:	76 04                	jbe    c0005a2c <f_lseek+0x119>
c0005a28:	89 c5                	mov    ebp,eax
c0005a2a:	eb 8a                	jmp    c00059b6 <f_lseek+0xa3>
c0005a2c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a2f:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005a33:	89 30                	mov    DWORD PTR [eax],esi
c0005a35:	0f 87 9c 03 00 00    	ja     c0005dd7 <f_lseek+0x4c4>
c0005a3b:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005a41:	e9 99 03 00 00       	jmp    c0005ddf <f_lseek+0x4cc>
c0005a46:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005a49:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005a4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a50:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a58:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005a5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a5f:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a63:	73 0f                	jae    c0005a74 <f_lseek+0x161>
c0005a65:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a68:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a78:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a7c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a7f:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a86:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a8a:	0f 84 4f 03 00 00    	je     c0005ddf <f_lseek+0x4cc>
c0005a90:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a94:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a98:	83 c6 ff             	add    esi,0xffffffff
c0005a9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a9e:	83 d7 ff             	adc    edi,0xffffffff
c0005aa1:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005aa5:	55                   	push   ebp
c0005aa6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0005aaa:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0005aae:	53                   	push   ebx
c0005aaf:	e8 80 ce ff ff       	call   c0002934 <clmt_clust>
c0005ab4:	5a                   	pop    edx
c0005ab5:	59                   	pop    ecx
c0005ab6:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ab9:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0005abd:	50                   	push   eax
c0005abe:	51                   	push   ecx
c0005abf:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0005ac3:	e8 03 c5 ff ff       	call   c0001fcb <clst2sect>
c0005ac8:	83 c4 10             	add    esp,0x10
c0005acb:	89 d7                	mov    edi,edx
c0005acd:	09 c7                	or     edi,eax
c0005acf:	0f 84 06 ff ff ff    	je     c00059db <f_lseek+0xc8>
c0005ad5:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005ad9:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005adf:	0f 84 fa 02 00 00    	je     c0005ddf <f_lseek+0x4cc>
c0005ae5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ae9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005aed:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005af0:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005af4:	0f ac fe 09          	shrd   esi,edi,0x9
c0005af8:	4d                   	dec    ebp
c0005af9:	31 ff                	xor    edi,edi
c0005afb:	21 ee                	and    esi,ebp
c0005afd:	01 c6                	add    esi,eax
c0005aff:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005b02:	11 d7                	adc    edi,edx
c0005b04:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005b07:	39 fa                	cmp    edx,edi
c0005b09:	75 08                	jne    c0005b13 <f_lseek+0x200>
c0005b0b:	39 f0                	cmp    eax,esi
c0005b0d:	0f 84 cc 02 00 00    	je     c0005ddf <f_lseek+0x4cc>
c0005b13:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005b16:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005b1a:	0f 89 8e 02 00 00    	jns    c0005dae <f_lseek+0x49b>
c0005b20:	83 ec 0c             	sub    esp,0xc
c0005b23:	6a 01                	push   0x1
c0005b25:	52                   	push   edx
c0005b26:	50                   	push   eax
c0005b27:	55                   	push   ebp
c0005b28:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005b2c:	e9 68 02 00 00       	jmp    c0005d99 <f_lseek+0x486>
c0005b31:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005b35:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005b38:	74 16                	je     c0005b50 <f_lseek+0x23d>
c0005b3a:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005b3f:	76 0f                	jbe    c0005b50 <f_lseek+0x23d>
c0005b41:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005b48:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005b50:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005b53:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005b56:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005b59:	89 c7                	mov    edi,eax
c0005b5b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b5f:	73 0d                	jae    c0005b6e <f_lseek+0x25b>
c0005b61:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b65:	75 07                	jne    c0005b6e <f_lseek+0x25b>
c0005b67:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b6a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b6e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b71:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b74:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b78:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b7f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b86:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b89:	75 09                	jne    c0005b94 <f_lseek+0x281>
c0005b8b:	31 f6                	xor    esi,esi
c0005b8d:	31 ff                	xor    edi,edi
c0005b8f:	e9 bd 01 00 00       	jmp    c0005d51 <f_lseek+0x43e>
c0005b94:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b98:	89 d7                	mov    edi,edx
c0005b9a:	c1 e1 09             	shl    ecx,0x9
c0005b9d:	09 c7                	or     edi,eax
c0005b9f:	89 cd                	mov    ebp,ecx
c0005ba1:	74 6d                	je     c0005c10 <f_lseek+0x2fd>
c0005ba3:	83 c0 ff             	add    eax,0xffffffff
c0005ba6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005baa:	83 d2 ff             	adc    edx,0xffffffff
c0005bad:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005bb0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bb4:	83 c0 ff             	add    eax,0xffffffff
c0005bb7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005bbb:	83 d2 ff             	adc    edx,0xffffffff
c0005bbe:	31 ff                	xor    edi,edi
c0005bc0:	57                   	push   edi
c0005bc1:	51                   	push   ecx
c0005bc2:	52                   	push   edx
c0005bc3:	50                   	push   eax
c0005bc4:	e8 13 0f 02 00       	call   c0026adc <__udivdi3>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005bd0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005bd4:	57                   	push   edi
c0005bd5:	55                   	push   ebp
c0005bd6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005bda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005bde:	e8 f9 0e 02 00       	call   c0026adc <__udivdi3>
c0005be3:	83 c4 10             	add    esp,0x10
c0005be6:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005bee:	19 d1                	sbb    ecx,edx
c0005bf0:	72 1e                	jb     c0005c10 <f_lseek+0x2fd>
c0005bf2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005bf6:	89 e9                	mov    ecx,ebp
c0005bf8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005bfb:	f7 d9                	neg    ecx
c0005bfd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005c00:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005c04:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005c07:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005c0a:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005c0e:	eb 2c                	jmp    c0005c3c <f_lseek+0x329>
c0005c10:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005c13:	85 c0                	test   eax,eax
c0005c15:	75 22                	jne    c0005c39 <f_lseek+0x326>
c0005c17:	57                   	push   edi
c0005c18:	57                   	push   edi
c0005c19:	6a 00                	push   0x0
c0005c1b:	53                   	push   ebx
c0005c1c:	e8 08 cb ff ff       	call   c0002729 <create_chain>
c0005c21:	83 c4 10             	add    esp,0x10
c0005c24:	83 f8 01             	cmp    eax,0x1
c0005c27:	0f 84 ae fd ff ff    	je     c00059db <f_lseek+0xc8>
c0005c2d:	83 f8 ff             	cmp    eax,0xffffffff
c0005c30:	0f 84 bb fd ff ff    	je     c00059f1 <f_lseek+0xde>
c0005c36:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005c39:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c3c:	85 c0                	test   eax,eax
c0005c3e:	0f 84 47 ff ff ff    	je     c0005b8b <f_lseek+0x278>
c0005c44:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005c48:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005c50:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005c53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c57:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005c5a:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005c5d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c61:	0f 83 a3 00 00 00    	jae    c0005d0a <f_lseek+0x3f7>
c0005c67:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c6b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c6f:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c72:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c76:	01 f2                	add    edx,esi
c0005c78:	11 f9                	adc    ecx,edi
c0005c7a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c7e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c82:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c85:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c88:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c8b:	f6 c1 02             	test   cl,0x2
c0005c8e:	74 38                	je     c0005cc8 <f_lseek+0x3b5>
c0005c90:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c94:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c97:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c9a:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c9e:	73 16                	jae    c0005cb6 <f_lseek+0x3a3>
c0005ca0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005ca4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005ca8:	88 ca                	mov    dl,cl
c0005caa:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005cad:	83 ca 40             	or     edx,0x40
c0005cb0:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005cb3:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005cb6:	56                   	push   esi
c0005cb7:	56                   	push   esi
c0005cb8:	50                   	push   eax
c0005cb9:	53                   	push   ebx
c0005cba:	e8 6a ca ff ff       	call   c0002729 <create_chain>
c0005cbf:	83 c4 10             	add    esp,0x10
c0005cc2:	85 c0                	test   eax,eax
c0005cc4:	75 0e                	jne    c0005cd4 <f_lseek+0x3c1>
c0005cc6:	eb 33                	jmp    c0005cfb <f_lseek+0x3e8>
c0005cc8:	51                   	push   ecx
c0005cc9:	51                   	push   ecx
c0005cca:	50                   	push   eax
c0005ccb:	53                   	push   ebx
c0005ccc:	e8 26 c3 ff ff       	call   c0001ff7 <get_fat>
c0005cd1:	83 c4 10             	add    esp,0x10
c0005cd4:	83 f8 ff             	cmp    eax,0xffffffff
c0005cd7:	0f 84 14 fd ff ff    	je     c00059f1 <f_lseek+0xde>
c0005cdd:	83 f8 01             	cmp    eax,0x1
c0005ce0:	0f 86 f5 fc ff ff    	jbe    c00059db <f_lseek+0xc8>
c0005ce6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005cea:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ced:	0f 86 e8 fc ff ff    	jbe    c00059db <f_lseek+0xc8>
c0005cf3:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005cf6:	e9 55 ff ff ff       	jmp    c0005c50 <f_lseek+0x33d>
c0005cfb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005d02:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d0a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005d0d:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005d11:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005d14:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005d17:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005d1a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005d20:	0f 84 65 fe ff ff    	je     c0005b8b <f_lseek+0x278>
c0005d26:	52                   	push   edx
c0005d27:	52                   	push   edx
c0005d28:	50                   	push   eax
c0005d29:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0005d2d:	e8 99 c2 ff ff       	call   c0001fcb <clst2sect>
c0005d32:	83 c4 10             	add    esp,0x10
c0005d35:	89 d7                	mov    edi,edx
c0005d37:	09 c7                	or     edi,eax
c0005d39:	0f 84 9c fc ff ff    	je     c00059db <f_lseek+0xc8>
c0005d3f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d43:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005d46:	0f ac fe 09          	shrd   esi,edi,0x9
c0005d4a:	c1 ef 09             	shr    edi,0x9
c0005d4d:	01 c6                	add    esi,eax
c0005d4f:	11 d7                	adc    edi,edx
c0005d51:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d54:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d57:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005d5a:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005d5d:	19 d1                	sbb    ecx,edx
c0005d5f:	73 0a                	jae    c0005d6b <f_lseek+0x458>
c0005d61:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005d64:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005d67:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005d6b:	a9 ff 01 00 00       	test   eax,0x1ff
c0005d70:	74 6d                	je     c0005ddf <f_lseek+0x4cc>
c0005d72:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d75:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d78:	39 fa                	cmp    edx,edi
c0005d7a:	75 04                	jne    c0005d80 <f_lseek+0x46d>
c0005d7c:	39 f0                	cmp    eax,esi
c0005d7e:	74 5f                	je     c0005ddf <f_lseek+0x4cc>
c0005d80:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d83:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d87:	79 25                	jns    c0005dae <f_lseek+0x49b>
c0005d89:	83 ec 0c             	sub    esp,0xc
c0005d8c:	6a 01                	push   0x1
c0005d8e:	52                   	push   edx
c0005d8f:	50                   	push   eax
c0005d90:	55                   	push   ebp
c0005d91:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d95:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d99:	50                   	push   eax
c0005d9a:	e8 41 bd ff ff       	call   c0001ae0 <disk_write>
c0005d9f:	83 c4 20             	add    esp,0x20
c0005da2:	85 c0                	test   eax,eax
c0005da4:	0f 85 47 fc ff ff    	jne    c00059f1 <f_lseek+0xde>
c0005daa:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005dae:	83 ec 0c             	sub    esp,0xc
c0005db1:	6a 01                	push   0x1
c0005db3:	57                   	push   edi
c0005db4:	56                   	push   esi
c0005db5:	55                   	push   ebp
c0005db6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005dba:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005dbe:	50                   	push   eax
c0005dbf:	e8 06 bd ff ff       	call   c0001aca <disk_read>
c0005dc4:	83 c4 20             	add    esp,0x20
c0005dc7:	85 c0                	test   eax,eax
c0005dc9:	0f 85 22 fc ff ff    	jne    c00059f1 <f_lseek+0xde>
c0005dcf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005dd2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005dd5:	eb 08                	jmp    c0005ddf <f_lseek+0x4cc>
c0005dd7:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005ddf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005de3:	83 c4 3c             	add    esp,0x3c
c0005de6:	5b                   	pop    ebx
c0005de7:	5e                   	pop    esi
c0005de8:	5f                   	pop    edi
c0005de9:	5d                   	pop    ebp
c0005dea:	c3                   	ret    

c0005deb <f_opendir>:
c0005deb:	56                   	push   esi
c0005dec:	b8 09 00 00 00       	mov    eax,0x9
c0005df1:	53                   	push   ebx
c0005df2:	83 ec 24             	sub    esp,0x24
c0005df5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005df9:	85 db                	test   ebx,ebx
c0005dfb:	0f 84 fb 00 00 00    	je     c0005efc <f_opendir+0x111>
c0005e01:	50                   	push   eax
c0005e02:	6a 00                	push   0x0
c0005e04:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005e08:	50                   	push   eax
c0005e09:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005e0d:	50                   	push   eax
c0005e0e:	e8 a8 e7 ff ff       	call   c00045bb <mount_volume>
c0005e13:	83 c4 10             	add    esp,0x10
c0005e16:	85 c0                	test   eax,eax
c0005e18:	0f 85 d8 00 00 00    	jne    c0005ef6 <f_opendir+0x10b>
c0005e1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e22:	83 ec 0c             	sub    esp,0xc
c0005e25:	89 03                	mov    DWORD PTR [ebx],eax
c0005e27:	68 60 04 00 00       	push   0x460
c0005e2c:	e8 72 2d 00 00       	call   c0008ba3 <ff_memalloc>
c0005e31:	83 c4 10             	add    esp,0x10
c0005e34:	89 c6                	mov    esi,eax
c0005e36:	b8 11 00 00 00       	mov    eax,0x11
c0005e3b:	85 f6                	test   esi,esi
c0005e3d:	0f 84 b9 00 00 00    	je     c0005efc <f_opendir+0x111>
c0005e43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e47:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e4d:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e50:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e53:	50                   	push   eax
c0005e54:	50                   	push   eax
c0005e55:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0005e59:	53                   	push   ebx
c0005e5a:	e8 b7 e2 ff ff       	call   c0004116 <follow_path>
c0005e5f:	83 c4 10             	add    esp,0x10
c0005e62:	85 c0                	test   eax,eax
c0005e64:	75 6c                	jne    c0005ed2 <f_opendir+0xe7>
c0005e66:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005e6a:	78 4d                	js     c0005eb9 <f_opendir+0xce>
c0005e6c:	b8 05 00 00 00       	mov    eax,0x5
c0005e71:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005e75:	74 5b                	je     c0005ed2 <f_opendir+0xe7>
c0005e77:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005e7b:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0005e7e:	75 28                	jne    c0005ea8 <f_opendir+0xbd>
c0005e80:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e83:	0f b6 4b 07          	movzx  ecx,BYTE PTR [ebx+0x7]
c0005e87:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e8a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005e8d:	30 c0                	xor    al,al
c0005e8f:	09 c8                	or     eax,ecx
c0005e91:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005e94:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e97:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e9a:	50                   	push   eax
c0005e9b:	50                   	push   eax
c0005e9c:	53                   	push   ebx
c0005e9d:	52                   	push   edx
c0005e9e:	e8 bc d4 ff ff       	call   c000335f <init_alloc_info>
c0005ea3:	83 c4 10             	add    esp,0x10
c0005ea6:	eb 11                	jmp    c0005eb9 <f_opendir+0xce>
c0005ea8:	51                   	push   ecx
c0005ea9:	51                   	push   ecx
c0005eaa:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005ead:	52                   	push   edx
c0005eae:	e8 b6 ce ff ff       	call   c0002d69 <ld_clust>
c0005eb3:	83 c4 10             	add    esp,0x10
c0005eb6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005eb9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ebd:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005ec1:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005ec5:	50                   	push   eax
c0005ec6:	50                   	push   eax
c0005ec7:	6a 00                	push   0x0
c0005ec9:	53                   	push   ebx
c0005eca:	e8 d9 cb ff ff       	call   c0002aa8 <dir_sdi>
c0005ecf:	83 c4 10             	add    esp,0x10
c0005ed2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005ed6:	83 ec 0c             	sub    esp,0xc
c0005ed9:	56                   	push   esi
c0005eda:	e8 da 2c 00 00       	call   c0008bb9 <ff_memfree>
c0005edf:	83 c4 10             	add    esp,0x10
c0005ee2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ee6:	83 f8 04             	cmp    eax,0x4
c0005ee9:	74 06                	je     c0005ef1 <f_opendir+0x106>
c0005eeb:	85 c0                	test   eax,eax
c0005eed:	74 0d                	je     c0005efc <f_opendir+0x111>
c0005eef:	eb 05                	jmp    c0005ef6 <f_opendir+0x10b>
c0005ef1:	b8 05 00 00 00       	mov    eax,0x5
c0005ef6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005efc:	83 c4 24             	add    esp,0x24
c0005eff:	5b                   	pop    ebx
c0005f00:	5e                   	pop    esi
c0005f01:	c3                   	ret    

c0005f02 <f_closedir>:
c0005f02:	53                   	push   ebx
c0005f03:	83 ec 20             	sub    esp,0x20
c0005f06:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005f0a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005f0e:	50                   	push   eax
c0005f0f:	53                   	push   ebx
c0005f10:	e8 ce ec ff ff       	call   c0004be3 <validate>
c0005f15:	83 c4 10             	add    esp,0x10
c0005f18:	85 c0                	test   eax,eax
c0005f1a:	75 06                	jne    c0005f22 <f_closedir+0x20>
c0005f1c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005f22:	83 c4 18             	add    esp,0x18
c0005f25:	5b                   	pop    ebx
c0005f26:	c3                   	ret    

c0005f27 <f_readdir>:
c0005f27:	57                   	push   edi
c0005f28:	56                   	push   esi
c0005f29:	53                   	push   ebx
c0005f2a:	83 ec 28             	sub    esp,0x28
c0005f2d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0005f31:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0005f35:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005f39:	50                   	push   eax
c0005f3a:	53                   	push   ebx
c0005f3b:	e8 a3 ec ff ff       	call   c0004be3 <validate>
c0005f40:	83 c4 10             	add    esp,0x10
c0005f43:	85 c0                	test   eax,eax
c0005f45:	0f 85 83 00 00 00    	jne    c0005fce <f_readdir+0xa7>
c0005f4b:	85 ff                	test   edi,edi
c0005f4d:	75 0f                	jne    c0005f5e <f_readdir+0x37>
c0005f4f:	50                   	push   eax
c0005f50:	50                   	push   eax
c0005f51:	6a 00                	push   0x0
c0005f53:	53                   	push   ebx
c0005f54:	e8 4f cb ff ff       	call   c0002aa8 <dir_sdi>
c0005f59:	83 c4 10             	add    esp,0x10
c0005f5c:	eb 70                	jmp    c0005fce <f_readdir+0xa7>
c0005f5e:	83 ec 0c             	sub    esp,0xc
c0005f61:	68 60 04 00 00       	push   0x460
c0005f66:	e8 38 2c 00 00       	call   c0008ba3 <ff_memalloc>
c0005f6b:	83 c4 10             	add    esp,0x10
c0005f6e:	89 c6                	mov    esi,eax
c0005f70:	b8 11 00 00 00       	mov    eax,0x11
c0005f75:	85 f6                	test   esi,esi
c0005f77:	74 55                	je     c0005fce <f_readdir+0xa7>
c0005f79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f7d:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f83:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f86:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f89:	50                   	push   eax
c0005f8a:	50                   	push   eax
c0005f8b:	6a 00                	push   0x0
c0005f8d:	53                   	push   ebx
c0005f8e:	e8 ad d5 ff ff       	call   c0003540 <dir_read>
c0005f93:	83 c4 10             	add    esp,0x10
c0005f96:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f9b:	75 1d                	jne    c0005fba <f_readdir+0x93>
c0005f9d:	50                   	push   eax
c0005f9e:	50                   	push   eax
c0005f9f:	57                   	push   edi
c0005fa0:	53                   	push   ebx
c0005fa1:	e8 66 dc ff ff       	call   c0003c0c <get_fileinfo>
c0005fa6:	5a                   	pop    edx
c0005fa7:	59                   	pop    ecx
c0005fa8:	6a 00                	push   0x0
c0005faa:	53                   	push   ebx
c0005fab:	e8 ff cb ff ff       	call   c0002baf <dir_next>
c0005fb0:	83 c4 10             	add    esp,0x10
c0005fb3:	83 f8 04             	cmp    eax,0x4
c0005fb6:	75 02                	jne    c0005fba <f_readdir+0x93>
c0005fb8:	31 c0                	xor    eax,eax
c0005fba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fbe:	83 ec 0c             	sub    esp,0xc
c0005fc1:	56                   	push   esi
c0005fc2:	e8 f2 2b 00 00       	call   c0008bb9 <ff_memfree>
c0005fc7:	83 c4 10             	add    esp,0x10
c0005fca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fce:	83 c4 20             	add    esp,0x20
c0005fd1:	5b                   	pop    ebx
c0005fd2:	5e                   	pop    esi
c0005fd3:	5f                   	pop    edi
c0005fd4:	c3                   	ret    

c0005fd5 <f_stat>:
c0005fd5:	57                   	push   edi
c0005fd6:	56                   	push   esi
c0005fd7:	53                   	push   ebx
c0005fd8:	83 ec 64             	sub    esp,0x64
c0005fdb:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005fdf:	6a 00                	push   0x0
c0005fe1:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0005fe5:	56                   	push   esi
c0005fe6:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0005fea:	50                   	push   eax
c0005feb:	e8 cb e5 ff ff       	call   c00045bb <mount_volume>
c0005ff0:	83 c4 10             	add    esp,0x10
c0005ff3:	85 c0                	test   eax,eax
c0005ff5:	75 78                	jne    c000606f <f_stat+0x9a>
c0005ff7:	83 ec 0c             	sub    esp,0xc
c0005ffa:	68 60 04 00 00       	push   0x460
c0005fff:	e8 9f 2b 00 00       	call   c0008ba3 <ff_memalloc>
c0006004:	83 c4 10             	add    esp,0x10
c0006007:	89 c3                	mov    ebx,eax
c0006009:	b8 11 00 00 00       	mov    eax,0x11
c000600e:	85 db                	test   ebx,ebx
c0006010:	74 5d                	je     c000606f <f_stat+0x9a>
c0006012:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006016:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000601c:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000601f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006022:	52                   	push   edx
c0006023:	52                   	push   edx
c0006024:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0006028:	56                   	push   esi
c0006029:	e8 e8 e0 ff ff       	call   c0004116 <follow_path>
c000602e:	83 c4 10             	add    esp,0x10
c0006031:	85 c0                	test   eax,eax
c0006033:	75 26                	jne    c000605b <f_stat+0x86>
c0006035:	80 7c 24 5b 00       	cmp    BYTE PTR [esp+0x5b],0x0
c000603a:	78 1a                	js     c0006056 <f_stat+0x81>
c000603c:	85 ff                	test   edi,edi
c000603e:	74 1b                	je     c000605b <f_stat+0x86>
c0006040:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006044:	50                   	push   eax
c0006045:	50                   	push   eax
c0006046:	57                   	push   edi
c0006047:	56                   	push   esi
c0006048:	e8 bf db ff ff       	call   c0003c0c <get_fileinfo>
c000604d:	83 c4 10             	add    esp,0x10
c0006050:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006054:	eb 05                	jmp    c000605b <f_stat+0x86>
c0006056:	b8 06 00 00 00       	mov    eax,0x6
c000605b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000605f:	83 ec 0c             	sub    esp,0xc
c0006062:	53                   	push   ebx
c0006063:	e8 51 2b 00 00       	call   c0008bb9 <ff_memfree>
c0006068:	83 c4 10             	add    esp,0x10
c000606b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000606f:	83 c4 60             	add    esp,0x60
c0006072:	5b                   	pop    ebx
c0006073:	5e                   	pop    esi
c0006074:	5f                   	pop    edi
c0006075:	c3                   	ret    

c0006076 <f_getfree>:
c0006076:	55                   	push   ebp
c0006077:	57                   	push   edi
c0006078:	56                   	push   esi
c0006079:	53                   	push   ebx
c000607a:	83 ec 60             	sub    esp,0x60
c000607d:	6a 00                	push   0x0
c000607f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006083:	50                   	push   eax
c0006084:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0006088:	50                   	push   eax
c0006089:	e8 2d e5 ff ff       	call   c00045bb <mount_volume>
c000608e:	83 c4 10             	add    esp,0x10
c0006091:	89 c5                	mov    ebp,eax
c0006093:	85 c0                	test   eax,eax
c0006095:	0f 85 c8 01 00 00    	jne    c0006263 <f_getfree+0x1ed>
c000609b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000609f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00060a3:	89 02                	mov    DWORD PTR [edx],eax
c00060a5:	8b 48 18             	mov    ecx,DWORD PTR [eax+0x18]
c00060a8:	8b 78 1c             	mov    edi,DWORD PTR [eax+0x1c]
c00060ab:	8d 57 fe             	lea    edx,[edi-0x2]
c00060ae:	39 d1                	cmp    ecx,edx
c00060b0:	77 0b                	ja     c00060bd <f_getfree+0x47>
c00060b2:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00060b6:	89 08                	mov    DWORD PTR [eax],ecx
c00060b8:	e9 a6 01 00 00       	jmp    c0006263 <f_getfree+0x1ed>
c00060bd:	8a 08                	mov    cl,BYTE PTR [eax]
c00060bf:	80 f9 01             	cmp    cl,0x1
c00060c2:	75 3f                	jne    c0006103 <f_getfree+0x8d>
c00060c4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00060c8:	be 02 00 00 00       	mov    esi,0x2
c00060cd:	31 db                	xor    ebx,ebx
c00060cf:	51                   	push   ecx
c00060d0:	51                   	push   ecx
c00060d1:	56                   	push   esi
c00060d2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00060d6:	50                   	push   eax
c00060d7:	e8 1b bf ff ff       	call   c0001ff7 <get_fat>
c00060dc:	83 c4 10             	add    esp,0x10
c00060df:	83 f8 ff             	cmp    eax,0xffffffff
c00060e2:	0f 84 5a 01 00 00    	je     c0006242 <f_getfree+0x1cc>
c00060e8:	83 f8 01             	cmp    eax,0x1
c00060eb:	0f 84 58 01 00 00    	je     c0006249 <f_getfree+0x1d3>
c00060f1:	83 d3 00             	adc    ebx,0x0
c00060f4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060f8:	46                   	inc    esi
c00060f9:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c00060fc:	77 d1                	ja     c00060cf <f_getfree+0x59>
c00060fe:	e9 4f 01 00 00       	jmp    c0006252 <f_getfree+0x1dc>
c0006103:	80 f9 04             	cmp    cl,0x4
c0006106:	0f 85 93 00 00 00    	jne    c000619f <f_getfree+0x129>
c000610c:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c000610f:	8b 78 48             	mov    edi,DWORD PTR [eax+0x48]
c0006112:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000611a:	31 db                	xor    ebx,ebx
c000611c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0006121:	75 39                	jne    c000615c <f_getfree+0xe6>
c0006123:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006127:	89 f0                	mov    eax,esi
c0006129:	89 fa                	mov    edx,edi
c000612b:	83 c0 01             	add    eax,0x1
c000612e:	83 d2 00             	adc    edx,0x0
c0006131:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006135:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006139:	52                   	push   edx
c000613a:	57                   	push   edi
c000613b:	56                   	push   esi
c000613c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0006140:	e8 41 bd ff ff       	call   c0001e86 <move_window>
c0006145:	83 c4 10             	add    esp,0x10
c0006148:	85 c0                	test   eax,eax
c000614a:	0f 85 00 01 00 00    	jne    c0006250 <f_getfree+0x1da>
c0006150:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0006154:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006158:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000615c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006160:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006164:	8a 44 08 54          	mov    al,BYTE PTR [eax+ecx*1+0x54]
c0006168:	8d 4a f8             	lea    ecx,[edx-0x8]
c000616b:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000616f:	85 d2                	test   edx,edx
c0006171:	74 14                	je     c0006187 <f_getfree+0x111>
c0006173:	88 c1                	mov    cl,al
c0006175:	83 e1 01             	and    ecx,0x1
c0006178:	80 f9 01             	cmp    cl,0x1
c000617b:	83 d3 00             	adc    ebx,0x0
c000617e:	d0 e8                	shr    al,1
c0006180:	4a                   	dec    edx
c0006181:	3b 54 24 10          	cmp    edx,DWORD PTR [esp+0x10]
c0006185:	75 e8                	jne    c000616f <f_getfree+0xf9>
c0006187:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000618b:	41                   	inc    ecx
c000618c:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006192:	85 d2                	test   edx,edx
c0006194:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0006198:	75 82                	jne    c000611c <f_getfree+0xa6>
c000619a:	e9 b3 00 00 00       	jmp    c0006252 <f_getfree+0x1dc>
c000619f:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c00061a2:	31 f6                	xor    esi,esi
c00061a4:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00061a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00061ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00061af:	31 db                	xor    ebx,ebx
c00061b1:	85 f6                	test   esi,esi
c00061b3:	75 3f                	jne    c00061f4 <f_getfree+0x17e>
c00061b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00061b9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00061bd:	83 c0 01             	add    eax,0x1
c00061c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061c4:	83 d2 00             	adc    edx,0x0
c00061c7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061cb:	50                   	push   eax
c00061cc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00061d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00061d4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00061d8:	e8 a9 bc ff ff       	call   c0001e86 <move_window>
c00061dd:	83 c4 10             	add    esp,0x10
c00061e0:	85 c0                	test   eax,eax
c00061e2:	75 6c                	jne    c0006250 <f_getfree+0x1da>
c00061e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00061f0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00061f4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00061f8:	8d 44 32 54          	lea    eax,[edx+esi*1+0x54]
c00061fc:	80 3a 02             	cmp    BYTE PTR [edx],0x2
c00061ff:	75 18                	jne    c0006219 <f_getfree+0x1a3>
c0006201:	83 ec 0c             	sub    esp,0xc
c0006204:	50                   	push   eax
c0006205:	e8 0b b9 ff ff       	call   c0001b15 <ld_word>
c000620a:	83 c4 10             	add    esp,0x10
c000620d:	66 83 f8 01          	cmp    ax,0x1
c0006211:	83 d3 00             	adc    ebx,0x0
c0006214:	83 c6 02             	add    esi,0x2
c0006217:	eb 1a                	jmp    c0006233 <f_getfree+0x1bd>
c0006219:	83 ec 0c             	sub    esp,0xc
c000621c:	50                   	push   eax
c000621d:	e8 06 b9 ff ff       	call   c0001b28 <ld_dword>
c0006222:	83 c4 10             	add    esp,0x10
c0006225:	25 ff ff ff 0f       	and    eax,0xfffffff
c000622a:	83 f8 01             	cmp    eax,0x1
c000622d:	83 d3 00             	adc    ebx,0x0
c0006230:	83 c6 04             	add    esi,0x4
c0006233:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006239:	4f                   	dec    edi
c000623a:	0f 85 71 ff ff ff    	jne    c00061b1 <f_getfree+0x13b>
c0006240:	eb 10                	jmp    c0006252 <f_getfree+0x1dc>
c0006242:	bd 01 00 00 00       	mov    ebp,0x1
c0006247:	eb 09                	jmp    c0006252 <f_getfree+0x1dc>
c0006249:	bd 02 00 00 00       	mov    ebp,0x2
c000624e:	eb 02                	jmp    c0006252 <f_getfree+0x1dc>
c0006250:	89 c5                	mov    ebp,eax
c0006252:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006256:	89 18                	mov    DWORD PTR [eax],ebx
c0006258:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625c:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c000625f:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006263:	83 c4 5c             	add    esp,0x5c
c0006266:	89 e8                	mov    eax,ebp
c0006268:	5b                   	pop    ebx
c0006269:	5e                   	pop    esi
c000626a:	5f                   	pop    edi
c000626b:	5d                   	pop    ebp
c000626c:	c3                   	ret    

c000626d <f_truncate>:
c000626d:	56                   	push   esi
c000626e:	53                   	push   ebx
c000626f:	83 ec 1c             	sub    esp,0x1c
c0006272:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0006276:	8d 44 24 14          	lea    eax,[esp+0x14]
c000627a:	50                   	push   eax
c000627b:	53                   	push   ebx
c000627c:	e8 62 e9 ff ff       	call   c0004be3 <validate>
c0006281:	83 c4 10             	add    esp,0x10
c0006284:	89 c6                	mov    esi,eax
c0006286:	85 c0                	test   eax,eax
c0006288:	0f 85 da 00 00 00    	jne    c0006368 <f_truncate+0xfb>
c000628e:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006292:	85 f6                	test   esi,esi
c0006294:	0f 85 ce 00 00 00    	jne    c0006368 <f_truncate+0xfb>
c000629a:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000629e:	0f 84 bf 00 00 00    	je     c0006363 <f_truncate+0xf6>
c00062a4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00062a7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00062aa:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00062ad:	89 d1                	mov    ecx,edx
c00062af:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00062b2:	0f 83 b0 00 00 00    	jae    c0006368 <f_truncate+0xfb>
c00062b8:	09 c2                	or     edx,eax
c00062ba:	75 15                	jne    c00062d1 <f_truncate+0x64>
c00062bc:	51                   	push   ecx
c00062bd:	6a 00                	push   0x0
c00062bf:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c00062c2:	53                   	push   ebx
c00062c3:	e8 f9 c2 ff ff       	call   c00025c1 <remove_chain>
c00062c8:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00062cf:	eb 3a                	jmp    c000630b <f_truncate+0x9e>
c00062d1:	52                   	push   edx
c00062d2:	52                   	push   edx
c00062d3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00062d6:	53                   	push   ebx
c00062d7:	e8 1b bd ff ff       	call   c0001ff7 <get_fat>
c00062dc:	83 c4 10             	add    esp,0x10
c00062df:	89 c2                	mov    edx,eax
c00062e1:	b8 01 00 00 00       	mov    eax,0x1
c00062e6:	83 fa ff             	cmp    edx,0xffffffff
c00062e9:	74 23                	je     c000630e <f_truncate+0xa1>
c00062eb:	b8 02 00 00 00       	mov    eax,0x2
c00062f0:	83 fa 01             	cmp    edx,0x1
c00062f3:	74 19                	je     c000630e <f_truncate+0xa1>
c00062f5:	31 c0                	xor    eax,eax
c00062f7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00062fb:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c00062fe:	76 0e                	jbe    c000630e <f_truncate+0xa1>
c0006300:	50                   	push   eax
c0006301:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0006304:	52                   	push   edx
c0006305:	53                   	push   ebx
c0006306:	e8 b6 c2 ff ff       	call   c00025c1 <remove_chain>
c000630b:	83 c4 10             	add    esp,0x10
c000630e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006311:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006314:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006317:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000631a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000631d:	83 ca 40             	or     edx,0x40
c0006320:	85 c0                	test   eax,eax
c0006322:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006325:	75 35                	jne    c000635c <f_truncate+0xef>
c0006327:	84 d2                	test   dl,dl
c0006329:	79 3d                	jns    c0006368 <f_truncate+0xfb>
c000632b:	83 ec 0c             	sub    esp,0xc
c000632e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006331:	6a 01                	push   0x1
c0006333:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006336:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006339:	50                   	push   eax
c000633a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000633e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006342:	50                   	push   eax
c0006343:	e8 98 b7 ff ff       	call   c0001ae0 <disk_write>
c0006348:	83 c4 20             	add    esp,0x20
c000634b:	85 c0                	test   eax,eax
c000634d:	75 08                	jne    c0006357 <f_truncate+0xea>
c000634f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006353:	31 f6                	xor    esi,esi
c0006355:	eb 11                	jmp    c0006368 <f_truncate+0xfb>
c0006357:	b8 01 00 00 00       	mov    eax,0x1
c000635c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000635f:	89 c6                	mov    esi,eax
c0006361:	eb 05                	jmp    c0006368 <f_truncate+0xfb>
c0006363:	be 07 00 00 00       	mov    esi,0x7
c0006368:	89 f0                	mov    eax,esi
c000636a:	83 c4 14             	add    esp,0x14
c000636d:	5b                   	pop    ebx
c000636e:	5e                   	pop    esi
c000636f:	c3                   	ret    

c0006370 <f_unlink>:
c0006370:	55                   	push   ebp
c0006371:	57                   	push   edi
c0006372:	56                   	push   esi
c0006373:	53                   	push   ebx
c0006374:	81 ec f0 00 00 00    	sub    esp,0xf0
c000637a:	6a 02                	push   0x2
c000637c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006380:	50                   	push   eax
c0006381:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0006388:	50                   	push   eax
c0006389:	e8 2d e2 ff ff       	call   c00045bb <mount_volume>
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	85 c0                	test   eax,eax
c0006393:	0f 85 79 01 00 00    	jne    c0006512 <f_unlink+0x1a2>
c0006399:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000639d:	83 ec 0c             	sub    esp,0xc
c00063a0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00063a4:	68 60 04 00 00       	push   0x460
c00063a9:	e8 f5 27 00 00       	call   c0008ba3 <ff_memalloc>
c00063ae:	83 c4 10             	add    esp,0x10
c00063b1:	89 c3                	mov    ebx,eax
c00063b3:	b8 11 00 00 00       	mov    eax,0x11
c00063b8:	85 db                	test   ebx,ebx
c00063ba:	0f 84 52 01 00 00    	je     c0006512 <f_unlink+0x1a2>
c00063c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063c4:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00063ca:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00063cd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00063d0:	50                   	push   eax
c00063d1:	50                   	push   eax
c00063d2:	ff b4 24 08 01 00 00 	push   DWORD PTR [esp+0x108]
c00063d9:	8d 7c 24 54          	lea    edi,[esp+0x54]
c00063dd:	57                   	push   edi
c00063de:	e8 33 dd ff ff       	call   c0004116 <follow_path>
c00063e3:	83 c4 10             	add    esp,0x10
c00063e6:	85 c0                	test   eax,eax
c00063e8:	0f 85 10 01 00 00    	jne    c00064fe <f_unlink+0x18e>
c00063ee:	b8 06 00 00 00       	mov    eax,0x6
c00063f3:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c00063fb:	0f 88 fd 00 00 00    	js     c00064fe <f_unlink+0x18e>
c0006401:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006406:	74 0a                	je     c0006412 <f_unlink+0xa2>
c0006408:	b8 07 00 00 00       	mov    eax,0x7
c000640d:	e9 ec 00 00 00       	jmp    c00064fe <f_unlink+0x18e>
c0006412:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006416:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000641a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000641d:	75 16                	jne    c0006435 <f_unlink+0xc5>
c000641f:	55                   	push   ebp
c0006420:	55                   	push   ebp
c0006421:	8d 54 24 28          	lea    edx,[esp+0x28]
c0006425:	52                   	push   edx
c0006426:	50                   	push   eax
c0006427:	e8 33 cf ff ff       	call   c000335f <init_alloc_info>
c000642c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0006430:	83 c4 10             	add    esp,0x10
c0006433:	eb 14                	jmp    c0006449 <f_unlink+0xd9>
c0006435:	56                   	push   esi
c0006436:	56                   	push   esi
c0006437:	ff b4 24 88 00 00 00 	push   DWORD PTR [esp+0x88]
c000643e:	50                   	push   eax
c000643f:	e8 25 c9 ff ff       	call   c0002d69 <ld_clust>
c0006444:	83 c4 10             	add    esp,0x10
c0006447:	89 c6                	mov    esi,eax
c0006449:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000644e:	75 15                	jne    c0006465 <f_unlink+0xf5>
c0006450:	83 ec 0c             	sub    esp,0xc
c0006453:	57                   	push   edi
c0006454:	e8 43 d7 ff ff       	call   c0003b9c <dir_remove>
c0006459:	83 c4 10             	add    esp,0x10
c000645c:	85 c0                	test   eax,eax
c000645e:	74 74                	je     c00064d4 <f_unlink+0x164>
c0006460:	e9 99 00 00 00       	jmp    c00064fe <f_unlink+0x18e>
c0006465:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006469:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c0006470:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006477:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000647a:	75 21                	jne    c000649d <f_unlink+0x12d>
c000647c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006480:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006484:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000648b:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006492:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006496:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c000649d:	51                   	push   ecx
c000649e:	51                   	push   ecx
c000649f:	6a 00                	push   0x0
c00064a1:	8d ac 24 a0 00 00 00 	lea    ebp,[esp+0xa0]
c00064a8:	55                   	push   ebp
c00064a9:	e8 fa c5 ff ff       	call   c0002aa8 <dir_sdi>
c00064ae:	83 c4 10             	add    esp,0x10
c00064b1:	85 c0                	test   eax,eax
c00064b3:	75 49                	jne    c00064fe <f_unlink+0x18e>
c00064b5:	52                   	push   edx
c00064b6:	52                   	push   edx
c00064b7:	6a 00                	push   0x0
c00064b9:	55                   	push   ebp
c00064ba:	e8 81 d0 ff ff       	call   c0003540 <dir_read>
c00064bf:	83 c4 10             	add    esp,0x10
c00064c2:	85 c0                	test   eax,eax
c00064c4:	0f 84 3e ff ff ff    	je     c0006408 <f_unlink+0x98>
c00064ca:	83 f8 04             	cmp    eax,0x4
c00064cd:	75 2f                	jne    c00064fe <f_unlink+0x18e>
c00064cf:	e9 7c ff ff ff       	jmp    c0006450 <f_unlink+0xe0>
c00064d4:	85 f6                	test   esi,esi
c00064d6:	75 11                	jne    c00064e9 <f_unlink+0x179>
c00064d8:	83 ec 0c             	sub    esp,0xc
c00064db:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00064df:	e8 09 ba ff ff       	call   c0001eed <sync_fs>
c00064e4:	83 c4 10             	add    esp,0x10
c00064e7:	eb 15                	jmp    c00064fe <f_unlink+0x18e>
c00064e9:	50                   	push   eax
c00064ea:	6a 00                	push   0x0
c00064ec:	56                   	push   esi
c00064ed:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00064f1:	50                   	push   eax
c00064f2:	e8 ca c0 ff ff       	call   c00025c1 <remove_chain>
c00064f7:	83 c4 10             	add    esp,0x10
c00064fa:	85 c0                	test   eax,eax
c00064fc:	74 da                	je     c00064d8 <f_unlink+0x168>
c00064fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006502:	83 ec 0c             	sub    esp,0xc
c0006505:	53                   	push   ebx
c0006506:	e8 ae 26 00 00       	call   c0008bb9 <ff_memfree>
c000650b:	83 c4 10             	add    esp,0x10
c000650e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006512:	81 c4 ec 00 00 00    	add    esp,0xec
c0006518:	5b                   	pop    ebx
c0006519:	5e                   	pop    esi
c000651a:	5f                   	pop    edi
c000651b:	5d                   	pop    ebp
c000651c:	c3                   	ret    

c000651d <f_mkdir>:
c000651d:	55                   	push   ebp
c000651e:	57                   	push   edi
c000651f:	56                   	push   esi
c0006520:	53                   	push   ebx
c0006521:	81 ec 90 00 00 00    	sub    esp,0x90
c0006527:	6a 02                	push   0x2
c0006529:	8d 44 24 10          	lea    eax,[esp+0x10]
c000652d:	50                   	push   eax
c000652e:	8d 84 24 ac 00 00 00 	lea    eax,[esp+0xac]
c0006535:	50                   	push   eax
c0006536:	e8 80 e0 ff ff       	call   c00045bb <mount_volume>
c000653b:	83 c4 10             	add    esp,0x10
c000653e:	89 c5                	mov    ebp,eax
c0006540:	85 c0                	test   eax,eax
c0006542:	0f 85 40 02 00 00    	jne    c0006788 <f_mkdir+0x26b>
c0006548:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000654c:	bd 11 00 00 00       	mov    ebp,0x11
c0006551:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006555:	83 ec 0c             	sub    esp,0xc
c0006558:	68 60 04 00 00       	push   0x460
c000655d:	e8 41 26 00 00       	call   c0008ba3 <ff_memalloc>
c0006562:	83 c4 10             	add    esp,0x10
c0006565:	89 c6                	mov    esi,eax
c0006567:	85 c0                	test   eax,eax
c0006569:	0f 84 19 02 00 00    	je     c0006788 <f_mkdir+0x26b>
c000656f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006573:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006579:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000657c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000657f:	50                   	push   eax
c0006580:	50                   	push   eax
c0006581:	ff b4 24 a8 00 00 00 	push   DWORD PTR [esp+0xa8]
c0006588:	8d 7c 24 40          	lea    edi,[esp+0x40]
c000658c:	57                   	push   edi
c000658d:	e8 84 db ff ff       	call   c0004116 <follow_path>
c0006592:	83 c4 10             	add    esp,0x10
c0006595:	89 c5                	mov    ebp,eax
c0006597:	85 c0                	test   eax,eax
c0006599:	74 48                	je     c00065e3 <f_mkdir+0xc6>
c000659b:	83 f8 04             	cmp    eax,0x4
c000659e:	75 48                	jne    c00065e8 <f_mkdir+0xcb>
c00065a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065a8:	50                   	push   eax
c00065a9:	50                   	push   eax
c00065aa:	6a 00                	push   0x0
c00065ac:	8d 44 24 18          	lea    eax,[esp+0x18]
c00065b0:	50                   	push   eax
c00065b1:	e8 73 c1 ff ff       	call   c0002729 <create_chain>
c00065b6:	83 c4 10             	add    esp,0x10
c00065b9:	89 c3                	mov    ebx,eax
c00065bb:	85 c0                	test   eax,eax
c00065bd:	74 0c                	je     c00065cb <f_mkdir+0xae>
c00065bf:	bd 02 00 00 00       	mov    ebp,0x2
c00065c4:	83 f8 01             	cmp    eax,0x1
c00065c7:	74 07                	je     c00065d0 <f_mkdir+0xb3>
c00065c9:	eb 2e                	jmp    c00065f9 <f_mkdir+0xdc>
c00065cb:	bd 07 00 00 00       	mov    ebp,0x7
c00065d0:	50                   	push   eax
c00065d1:	6a 00                	push   0x0
c00065d3:	53                   	push   ebx
c00065d4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00065d8:	50                   	push   eax
c00065d9:	e8 e3 bf ff ff       	call   c00025c1 <remove_chain>
c00065de:	83 c4 10             	add    esp,0x10
c00065e1:	eb 05                	jmp    c00065e8 <f_mkdir+0xcb>
c00065e3:	bd 08 00 00 00       	mov    ebp,0x8
c00065e8:	83 ec 0c             	sub    esp,0xc
c00065eb:	56                   	push   esi
c00065ec:	e8 c8 25 00 00       	call   c0008bb9 <ff_memfree>
c00065f1:	83 c4 10             	add    esp,0x10
c00065f4:	e9 8f 01 00 00       	jmp    c0006788 <f_mkdir+0x26b>
c00065f9:	bd 01 00 00 00       	mov    ebp,0x1
c00065fe:	83 f8 ff             	cmp    eax,0xffffffff
c0006601:	74 cd                	je     c00065d0 <f_mkdir+0xb3>
c0006603:	50                   	push   eax
c0006604:	50                   	push   eax
c0006605:	53                   	push   ebx
c0006606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000660a:	e8 75 c3 ff ff       	call   c0002984 <dir_clear>
c000660f:	83 c4 10             	add    esp,0x10
c0006612:	89 c5                	mov    ebp,eax
c0006614:	85 c0                	test   eax,eax
c0006616:	75 b8                	jne    c00065d0 <f_mkdir+0xb3>
c0006618:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000661c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000661f:	74 76                	je     c0006697 <f_mkdir+0x17a>
c0006621:	83 c0 54             	add    eax,0x54
c0006624:	52                   	push   edx
c0006625:	6a 0b                	push   0xb
c0006627:	6a 20                	push   0x20
c0006629:	50                   	push   eax
c000662a:	e8 a7 b5 ff ff       	call   c0001bd6 <mem_set>
c000662f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006633:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006637:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000663b:	83 c0 6a             	add    eax,0x6a
c000663e:	59                   	pop    ecx
c000663f:	5d                   	pop    ebp
c0006640:	68 00 00 21 50       	push   0x50210000
c0006645:	50                   	push   eax
c0006646:	e8 52 b5 ff ff       	call   c0001b9d <st_dword>
c000664b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000664f:	83 c4 0c             	add    esp,0xc
c0006652:	8d 50 54             	lea    edx,[eax+0x54]
c0006655:	53                   	push   ebx
c0006656:	52                   	push   edx
c0006657:	50                   	push   eax
c0006658:	e8 3c c7 ff ff       	call   c0002d99 <st_clust>
c000665d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006661:	83 c4 0c             	add    esp,0xc
c0006664:	8d 50 54             	lea    edx,[eax+0x54]
c0006667:	6a 20                	push   0x20
c0006669:	83 c0 74             	add    eax,0x74
c000666c:	52                   	push   edx
c000666d:	50                   	push   eax
c000666e:	e8 47 b5 ff ff       	call   c0001bba <mem_cpy>
c0006673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006677:	83 c4 0c             	add    esp,0xc
c000667a:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000667e:	8d 50 74             	lea    edx,[eax+0x74]
c0006681:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006685:	52                   	push   edx
c0006686:	50                   	push   eax
c0006687:	e8 0d c7 ff ff       	call   c0002d99 <st_clust>
c000668c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006690:	83 c4 10             	add    esp,0x10
c0006693:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006697:	83 ec 0c             	sub    esp,0xc
c000669a:	57                   	push   edi
c000669b:	e8 41 d2 ff ff       	call   c00038e1 <dir_register>
c00066a0:	83 c4 10             	add    esp,0x10
c00066a3:	89 c5                	mov    ebp,eax
c00066a5:	85 c0                	test   eax,eax
c00066a7:	0f 85 23 ff ff ff    	jne    c00065d0 <f_mkdir+0xb3>
c00066ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066b1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066b4:	0f 85 83 00 00 00    	jne    c000673d <f_mkdir+0x220>
c00066ba:	51                   	push   ecx
c00066bb:	51                   	push   ecx
c00066bc:	68 00 00 21 50       	push   0x50210000
c00066c1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c4:	83 c0 0c             	add    eax,0xc
c00066c7:	50                   	push   eax
c00066c8:	e8 d0 b4 ff ff       	call   c0001b9d <st_dword>
c00066cd:	5d                   	pop    ebp
c00066ce:	58                   	pop    eax
c00066cf:	53                   	push   ebx
c00066d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066d7:	83 c0 34             	add    eax,0x34
c00066da:	50                   	push   eax
c00066db:	e8 bd b4 ff ff       	call   c0001b9d <st_dword>
c00066e0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00066e4:	58                   	pop    eax
c00066e5:	0f b7 42 0a          	movzx  eax,WORD PTR [edx+0xa]
c00066e9:	59                   	pop    ecx
c00066ea:	c1 e0 09             	shl    eax,0x9
c00066ed:	50                   	push   eax
c00066ee:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00066f1:	83 c0 38             	add    eax,0x38
c00066f4:	50                   	push   eax
c00066f5:	e8 a3 b4 ff ff       	call   c0001b9d <st_dword>
c00066fa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00066fe:	5b                   	pop    ebx
c00066ff:	0f b7 42 0a          	movzx  eax,WORD PTR [edx+0xa]
c0006703:	5d                   	pop    ebp
c0006704:	c1 e0 09             	shl    eax,0x9
c0006707:	50                   	push   eax
c0006708:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c000670b:	83 c0 28             	add    eax,0x28
c000670e:	50                   	push   eax
c000670f:	e8 89 b4 ff ff       	call   c0001b9d <st_dword>
c0006714:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006718:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671b:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000671f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006722:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006726:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006729:	e8 ce cc ff ff       	call   c00033fc <store_xdir>
c000672e:	83 c4 10             	add    esp,0x10
c0006731:	89 c5                	mov    ebp,eax
c0006733:	85 c0                	test   eax,eax
c0006735:	0f 85 ad fe ff ff    	jne    c00065e8 <f_mkdir+0xcb>
c000673b:	eb 38                	jmp    c0006775 <f_mkdir+0x258>
c000673d:	52                   	push   edx
c000673e:	52                   	push   edx
c000673f:	68 00 00 21 50       	push   0x50210000
c0006744:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0006748:	83 c0 16             	add    eax,0x16
c000674b:	50                   	push   eax
c000674c:	e8 4c b4 ff ff       	call   c0001b9d <st_dword>
c0006751:	83 c4 0c             	add    esp,0xc
c0006754:	53                   	push   ebx
c0006755:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0006759:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000675d:	e8 37 c6 ff ff       	call   c0002d99 <st_clust>
c0006762:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0006766:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000676a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000676e:	83 c4 10             	add    esp,0x10
c0006771:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006775:	83 ec 0c             	sub    esp,0xc
c0006778:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000677c:	e8 6c b7 ff ff       	call   c0001eed <sync_fs>
c0006781:	89 c5                	mov    ebp,eax
c0006783:	e9 56 fe ff ff       	jmp    c00065de <f_mkdir+0xc1>
c0006788:	81 c4 8c 00 00 00    	add    esp,0x8c
c000678e:	89 e8                	mov    eax,ebp
c0006790:	5b                   	pop    ebx
c0006791:	5e                   	pop    esi
c0006792:	5f                   	pop    edi
c0006793:	5d                   	pop    ebp
c0006794:	c3                   	ret    

c0006795 <f_rename>:
c0006795:	55                   	push   ebp
c0006796:	57                   	push   edi
c0006797:	56                   	push   esi
c0006798:	53                   	push   ebx
c0006799:	81 ec fc 00 00 00    	sub    esp,0xfc
c000679f:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00067a6:	50                   	push   eax
c00067a7:	e8 44 da ff ff       	call   c00041f0 <get_ldnumber>
c00067ac:	6a 02                	push   0x2
c00067ae:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00067b2:	50                   	push   eax
c00067b3:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00067ba:	50                   	push   eax
c00067bb:	e8 fb dd ff ff       	call   c00045bb <mount_volume>
c00067c0:	83 c4 10             	add    esp,0x10
c00067c3:	89 c5                	mov    ebp,eax
c00067c5:	85 c0                	test   eax,eax
c00067c7:	0f 85 de 02 00 00    	jne    c0006aab <f_rename+0x316>
c00067cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067d1:	bd 11 00 00 00       	mov    ebp,0x11
c00067d6:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00067da:	83 ec 0c             	sub    esp,0xc
c00067dd:	68 60 04 00 00       	push   0x460
c00067e2:	e8 bc 23 00 00       	call   c0008ba3 <ff_memalloc>
c00067e7:	83 c4 10             	add    esp,0x10
c00067ea:	89 c3                	mov    ebx,eax
c00067ec:	85 c0                	test   eax,eax
c00067ee:	0f 84 b7 02 00 00    	je     c0006aab <f_rename+0x316>
c00067f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067f8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067fe:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006801:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006804:	50                   	push   eax
c0006805:	50                   	push   eax
c0006806:	ff b4 24 18 01 00 00 	push   DWORD PTR [esp+0x118]
c000680d:	8d 74 24 64          	lea    esi,[esp+0x64]
c0006811:	56                   	push   esi
c0006812:	e8 ff d8 ff ff       	call   c0004116 <follow_path>
c0006817:	83 c4 10             	add    esp,0x10
c000681a:	89 c5                	mov    ebp,eax
c000681c:	85 c0                	test   eax,eax
c000681e:	0f 85 7b 02 00 00    	jne    c0006a9f <f_rename+0x30a>
c0006824:	bd 06 00 00 00       	mov    ebp,0x6
c0006829:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006831:	0f 85 68 02 00 00    	jne    c0006a9f <f_rename+0x30a>
c0006837:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000683b:	8d 44 24 18          	lea    eax,[esp+0x18]
c000683f:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006842:	8d bc 24 a4 00 00 00 	lea    edi,[esp+0xa4]
c0006849:	0f 85 12 01 00 00    	jne    c0006961 <f_rename+0x1cc>
c000684f:	51                   	push   ecx
c0006850:	6a 40                	push   0x40
c0006852:	ff 72 10             	push   DWORD PTR [edx+0x10]
c0006855:	50                   	push   eax
c0006856:	e8 5f b3 ff ff       	call   c0001bba <mem_cpy>
c000685b:	83 c4 0c             	add    esp,0xc
c000685e:	6a 4c                	push   0x4c
c0006860:	56                   	push   esi
c0006861:	57                   	push   edi
c0006862:	e8 53 b3 ff ff       	call   c0001bba <mem_cpy>
c0006867:	5d                   	pop    ebp
c0006868:	58                   	pop    eax
c0006869:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0006870:	57                   	push   edi
c0006871:	e8 a0 d8 ff ff       	call   c0004116 <follow_path>
c0006876:	83 c4 10             	add    esp,0x10
c0006879:	89 c5                	mov    ebp,eax
c000687b:	85 c0                	test   eax,eax
c000687d:	75 29                	jne    c00068a8 <f_rename+0x113>
c000687f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006883:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000688a:	74 0a                	je     c0006896 <f_rename+0x101>
c000688c:	bd 08 00 00 00       	mov    ebp,0x8
c0006891:	e9 09 02 00 00       	jmp    c0006a9f <f_rename+0x30a>
c0006896:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000689d:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00068a4:	75 e6                	jne    c000688c <f_rename+0xf7>
c00068a6:	eb 09                	jmp    c00068b1 <f_rename+0x11c>
c00068a8:	83 f8 04             	cmp    eax,0x4
c00068ab:	0f 85 ee 01 00 00    	jne    c0006a9f <f_rename+0x30a>
c00068b1:	83 ec 0c             	sub    esp,0xc
c00068b4:	57                   	push   edi
c00068b5:	e8 27 d0 ff ff       	call   c00038e1 <dir_register>
c00068ba:	83 c4 10             	add    esp,0x10
c00068bd:	89 c5                	mov    ebp,eax
c00068bf:	85 c0                	test   eax,eax
c00068c1:	0f 85 d8 01 00 00    	jne    c0006a9f <f_rename+0x30a>
c00068c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068cb:	83 ec 0c             	sub    esp,0xc
c00068ce:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00068d1:	8a 4f 01             	mov    cl,BYTE PTR [edi+0x1]
c00068d4:	0f b6 6f 23          	movzx  ebp,BYTE PTR [edi+0x23]
c00068d8:	88 4c 24 1b          	mov    BYTE PTR [esp+0x1b],cl
c00068dc:	8d 47 24             	lea    eax,[edi+0x24]
c00068df:	50                   	push   eax
c00068e0:	e8 30 b2 ff ff       	call   c0001b15 <ld_word>
c00068e5:	83 c4 0c             	add    esp,0xc
c00068e8:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c00068ed:	6a 40                	push   0x40
c00068ef:	8d 44 24 20          	lea    eax,[esp+0x20]
c00068f3:	50                   	push   eax
c00068f4:	57                   	push   edi
c00068f5:	e8 c0 b2 ff ff       	call   c0001bba <mem_cpy>
c00068fa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00068fe:	8a 4c 24 1f          	mov    cl,BYTE PTR [esp+0x1f]
c0006902:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006905:	89 ea                	mov    edx,ebp
c0006907:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c000690a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000690e:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0006911:	88 50 23             	mov    BYTE PTR [eax+0x23],dl
c0006914:	5f                   	pop    edi
c0006915:	5d                   	pop    ebp
c0006916:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c000691b:	50                   	push   eax
c000691c:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c000691f:	83 c0 24             	add    eax,0x24
c0006922:	50                   	push   eax
c0006923:	e8 69 b2 ff ff       	call   c0001b91 <st_word>
c0006928:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000692c:	83 c4 10             	add    esp,0x10
c000692f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006932:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006935:	a8 10                	test   al,0x10
c0006937:	75 06                	jne    c000693f <f_rename+0x1aa>
c0006939:	83 c8 20             	or     eax,0x20
c000693c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000693f:	83 ec 0c             	sub    esp,0xc
c0006942:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0006949:	50                   	push   eax
c000694a:	e8 ad ca ff ff       	call   c00033fc <store_xdir>
c000694f:	83 c4 10             	add    esp,0x10
c0006952:	89 c5                	mov    ebp,eax
c0006954:	85 c0                	test   eax,eax
c0006956:	0f 84 20 01 00 00    	je     c0006a7c <f_rename+0x2e7>
c000695c:	e9 3e 01 00 00       	jmp    c0006a9f <f_rename+0x30a>
c0006961:	55                   	push   ebp
c0006962:	6a 20                	push   0x20
c0006964:	ff b4 24 98 00 00 00 	push   DWORD PTR [esp+0x98]
c000696b:	50                   	push   eax
c000696c:	e8 49 b2 ff ff       	call   c0001bba <mem_cpy>
c0006971:	83 c4 0c             	add    esp,0xc
c0006974:	6a 4c                	push   0x4c
c0006976:	56                   	push   esi
c0006977:	57                   	push   edi
c0006978:	e8 3d b2 ff ff       	call   c0001bba <mem_cpy>
c000697d:	58                   	pop    eax
c000697e:	5a                   	pop    edx
c000697f:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0006986:	57                   	push   edi
c0006987:	e8 8a d7 ff ff       	call   c0004116 <follow_path>
c000698c:	83 c4 10             	add    esp,0x10
c000698f:	89 c5                	mov    ebp,eax
c0006991:	85 c0                	test   eax,eax
c0006993:	75 27                	jne    c00069bc <f_rename+0x227>
c0006995:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006999:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00069a0:	0f 85 e6 fe ff ff    	jne    c000688c <f_rename+0xf7>
c00069a6:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00069ad:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00069b4:	0f 85 d2 fe ff ff    	jne    c000688c <f_rename+0xf7>
c00069ba:	eb 09                	jmp    c00069c5 <f_rename+0x230>
c00069bc:	83 f8 04             	cmp    eax,0x4
c00069bf:	0f 85 da 00 00 00    	jne    c0006a9f <f_rename+0x30a>
c00069c5:	83 ec 0c             	sub    esp,0xc
c00069c8:	57                   	push   edi
c00069c9:	e8 13 cf ff ff       	call   c00038e1 <dir_register>
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	89 c5                	mov    ebp,eax
c00069d3:	85 c0                	test   eax,eax
c00069d5:	0f 85 c4 00 00 00    	jne    c0006a9f <f_rename+0x30a>
c00069db:	8b 94 24 dc 00 00 00 	mov    edx,DWORD PTR [esp+0xdc]
c00069e2:	57                   	push   edi
c00069e3:	6a 13                	push   0x13
c00069e5:	8d 44 24 2d          	lea    eax,[esp+0x2d]
c00069e9:	50                   	push   eax
c00069ea:	8d 42 0d             	lea    eax,[edx+0xd]
c00069ed:	50                   	push   eax
c00069ee:	e8 c7 b1 ff ff       	call   c0001bba <mem_cpy>
c00069f3:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00069f7:	83 c4 10             	add    esp,0x10
c00069fa:	a8 10                	test   al,0x10
c00069fc:	75 03                	jne    c0006a01 <f_rename+0x26c>
c00069fe:	83 c8 20             	or     eax,0x20
c0006a01:	88 42 0b             	mov    BYTE PTR [edx+0xb],al
c0006a04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a08:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a0c:	f6 42 0b 10          	test   BYTE PTR [edx+0xb],0x10
c0006a10:	74 6a                	je     c0006a7c <f_rename+0x2e7>
c0006a12:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006a19:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006a1d:	74 5d                	je     c0006a7c <f_rename+0x2e7>
c0006a1f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006a23:	55                   	push   ebp
c0006a24:	55                   	push   ebp
c0006a25:	bd 02 00 00 00       	mov    ebp,0x2
c0006a2a:	52                   	push   edx
c0006a2b:	57                   	push   edi
c0006a2c:	e8 38 c3 ff ff       	call   c0002d69 <ld_clust>
c0006a31:	5a                   	pop    edx
c0006a32:	59                   	pop    ecx
c0006a33:	50                   	push   eax
c0006a34:	57                   	push   edi
c0006a35:	e8 91 b5 ff ff       	call   c0001fcb <clst2sect>
c0006a3a:	83 c4 10             	add    esp,0x10
c0006a3d:	89 d1                	mov    ecx,edx
c0006a3f:	09 c1                	or     ecx,eax
c0006a41:	74 5c                	je     c0006a9f <f_rename+0x30a>
c0006a43:	51                   	push   ecx
c0006a44:	52                   	push   edx
c0006a45:	50                   	push   eax
c0006a46:	57                   	push   edi
c0006a47:	e8 3a b4 ff ff       	call   c0001e86 <move_window>
c0006a4c:	83 c4 10             	add    esp,0x10
c0006a4f:	89 c5                	mov    ebp,eax
c0006a51:	85 c0                	test   eax,eax
c0006a53:	75 4a                	jne    c0006a9f <f_rename+0x30a>
c0006a55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a59:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a5d:	75 1d                	jne    c0006a7c <f_rename+0x2e7>
c0006a5f:	52                   	push   edx
c0006a60:	8d 50 74             	lea    edx,[eax+0x74]
c0006a63:	ff b4 24 b0 00 00 00 	push   DWORD PTR [esp+0xb0]
c0006a6a:	52                   	push   edx
c0006a6b:	50                   	push   eax
c0006a6c:	e8 28 c3 ff ff       	call   c0002d99 <st_clust>
c0006a71:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006a75:	83 c4 10             	add    esp,0x10
c0006a78:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a7c:	83 ec 0c             	sub    esp,0xc
c0006a7f:	56                   	push   esi
c0006a80:	e8 17 d1 ff ff       	call   c0003b9c <dir_remove>
c0006a85:	83 c4 10             	add    esp,0x10
c0006a88:	89 c5                	mov    ebp,eax
c0006a8a:	85 c0                	test   eax,eax
c0006a8c:	75 11                	jne    c0006a9f <f_rename+0x30a>
c0006a8e:	83 ec 0c             	sub    esp,0xc
c0006a91:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0006a95:	e8 53 b4 ff ff       	call   c0001eed <sync_fs>
c0006a9a:	83 c4 10             	add    esp,0x10
c0006a9d:	89 c5                	mov    ebp,eax
c0006a9f:	83 ec 0c             	sub    esp,0xc
c0006aa2:	53                   	push   ebx
c0006aa3:	e8 11 21 00 00       	call   c0008bb9 <ff_memfree>
c0006aa8:	83 c4 10             	add    esp,0x10
c0006aab:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006ab1:	89 e8                	mov    eax,ebp
c0006ab3:	5b                   	pop    ebx
c0006ab4:	5e                   	pop    esi
c0006ab5:	5f                   	pop    edi
c0006ab6:	5d                   	pop    ebp
c0006ab7:	c3                   	ret    

c0006ab8 <f_chmod>:
c0006ab8:	55                   	push   ebp
c0006ab9:	57                   	push   edi
c0006aba:	56                   	push   esi
c0006abb:	53                   	push   ebx
c0006abc:	83 ec 70             	sub    esp,0x70
c0006abf:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0006ac6:	8b bc 24 8c 00 00 00 	mov    edi,DWORD PTR [esp+0x8c]
c0006acd:	6a 02                	push   0x2
c0006acf:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006ad3:	50                   	push   eax
c0006ad4:	8d 84 24 8c 00 00 00 	lea    eax,[esp+0x8c]
c0006adb:	50                   	push   eax
c0006adc:	e8 da da ff ff       	call   c00045bb <mount_volume>
c0006ae1:	83 c4 10             	add    esp,0x10
c0006ae4:	85 c0                	test   eax,eax
c0006ae6:	0f 85 bf 00 00 00    	jne    c0006bab <f_chmod+0xf3>
c0006aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af0:	83 ec 0c             	sub    esp,0xc
c0006af3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006af7:	68 60 04 00 00       	push   0x460
c0006afc:	e8 a2 20 00 00       	call   c0008ba3 <ff_memalloc>
c0006b01:	83 c4 10             	add    esp,0x10
c0006b04:	89 c6                	mov    esi,eax
c0006b06:	b8 11 00 00 00       	mov    eax,0x11
c0006b0b:	85 f6                	test   esi,esi
c0006b0d:	0f 84 98 00 00 00    	je     c0006bab <f_chmod+0xf3>
c0006b13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b17:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b1d:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b20:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006b23:	50                   	push   eax
c0006b24:	50                   	push   eax
c0006b25:	ff b4 24 88 00 00 00 	push   DWORD PTR [esp+0x88]
c0006b2c:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0006b30:	55                   	push   ebp
c0006b31:	e8 e0 d5 ff ff       	call   c0004116 <follow_path>
c0006b36:	83 c4 10             	add    esp,0x10
c0006b39:	85 c0                	test   eax,eax
c0006b3b:	75 5a                	jne    c0006b97 <f_chmod+0xdf>
c0006b3d:	b8 06 00 00 00       	mov    eax,0x6
c0006b42:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006b47:	75 4e                	jne    c0006b97 <f_chmod+0xdf>
c0006b49:	83 e7 27             	and    edi,0x27
c0006b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b50:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b53:	75 20                	jne    c0006b75 <f_chmod+0xbd>
c0006b55:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006b58:	83 ec 0c             	sub    esp,0xc
c0006b5b:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b5e:	21 fb                	and    ebx,edi
c0006b60:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b63:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b66:	55                   	push   ebp
c0006b67:	e8 90 c8 ff ff       	call   c00033fc <store_xdir>
c0006b6c:	83 c4 10             	add    esp,0x10
c0006b6f:	85 c0                	test   eax,eax
c0006b71:	75 24                	jne    c0006b97 <f_chmod+0xdf>
c0006b73:	eb 13                	jmp    c0006b88 <f_chmod+0xd0>
c0006b75:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b79:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b7c:	21 fb                	and    ebx,edi
c0006b7e:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b81:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b84:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b88:	83 ec 0c             	sub    esp,0xc
c0006b8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006b8f:	e8 59 b3 ff ff       	call   c0001eed <sync_fs>
c0006b94:	83 c4 10             	add    esp,0x10
c0006b97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b9b:	83 ec 0c             	sub    esp,0xc
c0006b9e:	56                   	push   esi
c0006b9f:	e8 15 20 00 00       	call   c0008bb9 <ff_memfree>
c0006ba4:	83 c4 10             	add    esp,0x10
c0006ba7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006bab:	83 c4 6c             	add    esp,0x6c
c0006bae:	5b                   	pop    ebx
c0006baf:	5e                   	pop    esi
c0006bb0:	5f                   	pop    edi
c0006bb1:	5d                   	pop    ebp
c0006bb2:	c3                   	ret    

c0006bb3 <f_utime>:
c0006bb3:	57                   	push   edi
c0006bb4:	56                   	push   esi
c0006bb5:	53                   	push   ebx
c0006bb6:	83 ec 64             	sub    esp,0x64
c0006bb9:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006bbd:	6a 02                	push   0x2
c0006bbf:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006bc3:	50                   	push   eax
c0006bc4:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0006bc8:	50                   	push   eax
c0006bc9:	e8 ed d9 ff ff       	call   c00045bb <mount_volume>
c0006bce:	83 c4 10             	add    esp,0x10
c0006bd1:	85 c0                	test   eax,eax
c0006bd3:	0f 85 ce 00 00 00    	jne    c0006ca7 <f_utime+0xf4>
c0006bd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bdd:	83 ec 0c             	sub    esp,0xc
c0006be0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006be4:	68 60 04 00 00       	push   0x460
c0006be9:	e8 b5 1f 00 00       	call   c0008ba3 <ff_memalloc>
c0006bee:	83 c4 10             	add    esp,0x10
c0006bf1:	89 c3                	mov    ebx,eax
c0006bf3:	b8 11 00 00 00       	mov    eax,0x11
c0006bf8:	85 db                	test   ebx,ebx
c0006bfa:	0f 84 a7 00 00 00    	je     c0006ca7 <f_utime+0xf4>
c0006c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c04:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c07:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c0d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c10:	56                   	push   esi
c0006c11:	56                   	push   esi
c0006c12:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0006c16:	8d 74 24 20          	lea    esi,[esp+0x20]
c0006c1a:	56                   	push   esi
c0006c1b:	e8 f6 d4 ff ff       	call   c0004116 <follow_path>
c0006c20:	83 c4 10             	add    esp,0x10
c0006c23:	85 c0                	test   eax,eax
c0006c25:	75 6c                	jne    c0006c93 <f_utime+0xe0>
c0006c27:	b8 06 00 00 00       	mov    eax,0x6
c0006c2c:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c31:	75 60                	jne    c0006c93 <f_utime+0xe0>
c0006c33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c37:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0006c3b:	0f b7 4f 0a          	movzx  ecx,WORD PTR [edi+0xa]
c0006c3f:	c1 e0 10             	shl    eax,0x10
c0006c42:	09 c8                	or     eax,ecx
c0006c44:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006c47:	75 20                	jne    c0006c69 <f_utime+0xb6>
c0006c49:	51                   	push   ecx
c0006c4a:	51                   	push   ecx
c0006c4b:	50                   	push   eax
c0006c4c:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0006c4f:	83 c0 0c             	add    eax,0xc
c0006c52:	50                   	push   eax
c0006c53:	e8 45 af ff ff       	call   c0001b9d <st_dword>
c0006c58:	89 34 24             	mov    DWORD PTR [esp],esi
c0006c5b:	e8 9c c7 ff ff       	call   c00033fc <store_xdir>
c0006c60:	83 c4 10             	add    esp,0x10
c0006c63:	85 c0                	test   eax,eax
c0006c65:	75 2c                	jne    c0006c93 <f_utime+0xe0>
c0006c67:	eb 1b                	jmp    c0006c84 <f_utime+0xd1>
c0006c69:	52                   	push   edx
c0006c6a:	52                   	push   edx
c0006c6b:	50                   	push   eax
c0006c6c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0006c70:	83 c0 16             	add    eax,0x16
c0006c73:	50                   	push   eax
c0006c74:	e8 24 af ff ff       	call   c0001b9d <st_dword>
c0006c79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006c7d:	83 c4 10             	add    esp,0x10
c0006c80:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c84:	83 ec 0c             	sub    esp,0xc
c0006c87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006c8b:	e8 5d b2 ff ff       	call   c0001eed <sync_fs>
c0006c90:	83 c4 10             	add    esp,0x10
c0006c93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c97:	83 ec 0c             	sub    esp,0xc
c0006c9a:	53                   	push   ebx
c0006c9b:	e8 19 1f 00 00       	call   c0008bb9 <ff_memfree>
c0006ca0:	83 c4 10             	add    esp,0x10
c0006ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ca7:	83 c4 60             	add    esp,0x60
c0006caa:	5b                   	pop    ebx
c0006cab:	5e                   	pop    esi
c0006cac:	5f                   	pop    edi
c0006cad:	c3                   	ret    

c0006cae <f_getlabel>:
c0006cae:	55                   	push   ebp
c0006caf:	57                   	push   edi
c0006cb0:	56                   	push   esi
c0006cb1:	53                   	push   ebx
c0006cb2:	83 ec 70             	sub    esp,0x70
c0006cb5:	6a 00                	push   0x0
c0006cb7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006cbb:	50                   	push   eax
c0006cbc:	8d 84 24 8c 00 00 00 	lea    eax,[esp+0x8c]
c0006cc3:	50                   	push   eax
c0006cc4:	e8 f2 d8 ff ff       	call   c00045bb <mount_volume>
c0006cc9:	83 c4 10             	add    esp,0x10
c0006ccc:	89 c6                	mov    esi,eax
c0006cce:	85 c0                	test   eax,eax
c0006cd0:	0f 85 ec 01 00 00    	jne    c0006ec2 <f_getlabel+0x214>
c0006cd6:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006cde:	0f 84 7e 01 00 00    	je     c0006e62 <f_getlabel+0x1b4>
c0006ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ce8:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006cf0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006cf4:	53                   	push   ebx
c0006cf5:	53                   	push   ebx
c0006cf6:	6a 00                	push   0x0
c0006cf8:	8d 5c 24 20          	lea    ebx,[esp+0x20]
c0006cfc:	53                   	push   ebx
c0006cfd:	e8 a6 bd ff ff       	call   c0002aa8 <dir_sdi>
c0006d02:	83 c4 10             	add    esp,0x10
c0006d05:	85 c0                	test   eax,eax
c0006d07:	0f 85 46 01 00 00    	jne    c0006e53 <f_getlabel+0x1a5>
c0006d0d:	51                   	push   ecx
c0006d0e:	51                   	push   ecx
c0006d0f:	6a 01                	push   0x1
c0006d11:	53                   	push   ebx
c0006d12:	e8 29 c8 ff ff       	call   c0003540 <dir_read>
c0006d17:	83 c4 10             	add    esp,0x10
c0006d1a:	85 c0                	test   eax,eax
c0006d1c:	0f 85 31 01 00 00    	jne    c0006e53 <f_getlabel+0x1a5>
c0006d22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d26:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d29:	74 09                	je     c0006d34 <f_getlabel+0x86>
c0006d2b:	31 db                	xor    ebx,ebx
c0006d2d:	31 c9                	xor    ecx,ecx
c0006d2f:	e9 d5 00 00 00       	jmp    c0006e09 <f_getlabel+0x15b>
c0006d34:	31 ed                	xor    ebp,ebp
c0006d36:	31 db                	xor    ebx,ebx
c0006d38:	31 ff                	xor    edi,edi
c0006d3a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006d3e:	0f b6 42 01          	movzx  eax,BYTE PTR [edx+0x1]
c0006d42:	39 f8                	cmp    eax,edi
c0006d44:	76 55                	jbe    c0006d9b <f_getlabel+0xed>
c0006d46:	83 ec 0c             	sub    esp,0xc
c0006d49:	47                   	inc    edi
c0006d4a:	8d 04 3f             	lea    eax,[edi+edi*1]
c0006d4d:	01 d0                	add    eax,edx
c0006d4f:	50                   	push   eax
c0006d50:	e8 c0 ad ff ff       	call   c0001b15 <ld_word>
c0006d55:	83 c4 10             	add    esp,0x10
c0006d58:	66 85 ed             	test   bp,bp
c0006d5b:	75 0d                	jne    c0006d6a <f_getlabel+0xbc>
c0006d5d:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006d63:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006d68:	76 2b                	jbe    c0006d95 <f_getlabel+0xe7>
c0006d6a:	0f b7 c0             	movzx  eax,ax
c0006d6d:	52                   	push   edx
c0006d6e:	6a 04                	push   0x4
c0006d70:	8b 94 24 8c 00 00 00 	mov    edx,DWORD PTR [esp+0x8c]
c0006d77:	01 da                	add    edx,ebx
c0006d79:	52                   	push   edx
c0006d7a:	89 ea                	mov    edx,ebp
c0006d7c:	c1 e2 10             	shl    edx,0x10
c0006d7f:	09 d0                	or     eax,edx
c0006d81:	50                   	push   eax
c0006d82:	e8 6c af ff ff       	call   c0001cf3 <put_utf>
c0006d87:	83 c4 10             	add    esp,0x10
c0006d8a:	84 c0                	test   al,al
c0006d8c:	74 0b                	je     c0006d99 <f_getlabel+0xeb>
c0006d8e:	0f b6 c0             	movzx  eax,al
c0006d91:	01 c3                	add    ebx,eax
c0006d93:	31 c0                	xor    eax,eax
c0006d95:	89 c5                	mov    ebp,eax
c0006d97:	eb a1                	jmp    c0006d3a <f_getlabel+0x8c>
c0006d99:	31 db                	xor    ebx,ebx
c0006d9b:	66 85 ed             	test   bp,bp
c0006d9e:	74 02                	je     c0006da2 <f_getlabel+0xf4>
c0006da0:	31 db                	xor    ebx,ebx
c0006da2:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006da9:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006dad:	e9 b0 00 00 00       	jmp    c0006e62 <f_getlabel+0x1b4>
c0006db2:	83 ff 0b             	cmp    edi,0xb
c0006db5:	74 11                	je     c0006dc8 <f_getlabel+0x11a>
c0006db7:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006dbc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dc0:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dc3:	c1 e0 08             	shl    eax,0x8
c0006dc6:	09 c2                	or     edx,eax
c0006dc8:	0f b7 d2             	movzx  edx,dx
c0006dcb:	55                   	push   ebp
c0006dcc:	55                   	push   ebp
c0006dcd:	68 b5 01 00 00       	push   0x1b5
c0006dd2:	52                   	push   edx
c0006dd3:	e8 88 1e 00 00       	call   c0008c60 <ff_oem2uni>
c0006dd8:	83 c4 10             	add    esp,0x10
c0006ddb:	66 85 c0             	test   ax,ax
c0006dde:	74 56                	je     c0006e36 <f_getlabel+0x188>
c0006de0:	0f b7 c0             	movzx  eax,ax
c0006de3:	51                   	push   ecx
c0006de4:	6a 04                	push   0x4
c0006de6:	8b 94 24 8c 00 00 00 	mov    edx,DWORD PTR [esp+0x8c]
c0006ded:	01 da                	add    edx,ebx
c0006def:	52                   	push   edx
c0006df0:	50                   	push   eax
c0006df1:	e8 fd ae ff ff       	call   c0001cf3 <put_utf>
c0006df6:	83 c4 10             	add    esp,0x10
c0006df9:	84 c0                	test   al,al
c0006dfb:	74 39                	je     c0006e36 <f_getlabel+0x188>
c0006dfd:	0f b6 c0             	movzx  eax,al
c0006e00:	01 c3                	add    ebx,eax
c0006e02:	83 ff 0b             	cmp    edi,0xb
c0006e05:	74 31                	je     c0006e38 <f_getlabel+0x18a>
c0006e07:	89 f9                	mov    ecx,edi
c0006e09:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e0d:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e10:	83 ec 0c             	sub    esp,0xc
c0006e13:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e18:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e1d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006e21:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0006e25:	e8 00 ae ff ff       	call   c0001c2a <dbc_1st>
c0006e2a:	83 c4 10             	add    esp,0x10
c0006e2d:	85 c0                	test   eax,eax
c0006e2f:	74 97                	je     c0006dc8 <f_getlabel+0x11a>
c0006e31:	e9 7c ff ff ff       	jmp    c0006db2 <f_getlabel+0x104>
c0006e36:	31 db                	xor    ebx,ebx
c0006e38:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e3f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e42:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e49:	74 17                	je     c0006e62 <f_getlabel+0x1b4>
c0006e4b:	4b                   	dec    ebx
c0006e4c:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e4f:	74 ee                	je     c0006e3f <f_getlabel+0x191>
c0006e51:	eb 0f                	jmp    c0006e62 <f_getlabel+0x1b4>
c0006e53:	83 f8 04             	cmp    eax,0x4
c0006e56:	75 68                	jne    c0006ec0 <f_getlabel+0x212>
c0006e58:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e5f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e62:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e6a:	74 56                	je     c0006ec2 <f_getlabel+0x214>
c0006e6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e70:	52                   	push   edx
c0006e71:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0006e74:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0006e77:	50                   	push   eax
c0006e78:	e8 09 b0 ff ff       	call   c0001e86 <move_window>
c0006e7d:	83 c4 10             	add    esp,0x10
c0006e80:	89 c6                	mov    esi,eax
c0006e82:	85 c0                	test   eax,eax
c0006e84:	75 3c                	jne    c0006ec2 <f_getlabel+0x214>
c0006e86:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e8a:	b8 43 00 00 00       	mov    eax,0x43
c0006e8f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006e91:	80 f9 03             	cmp    cl,0x3
c0006e94:	74 0f                	je     c0006ea5 <f_getlabel+0x1f7>
c0006e96:	31 c0                	xor    eax,eax
c0006e98:	80 f9 04             	cmp    cl,0x4
c0006e9b:	0f 94 c0             	sete   al
c0006e9e:	48                   	dec    eax
c0006e9f:	83 e0 c3             	and    eax,0xffffffc3
c0006ea2:	83 c0 64             	add    eax,0x64
c0006ea5:	83 ec 0c             	sub    esp,0xc
c0006ea8:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006eac:	50                   	push   eax
c0006ead:	e8 76 ac ff ff       	call   c0001b28 <ld_dword>
c0006eb2:	83 c4 10             	add    esp,0x10
c0006eb5:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c0006ebc:	89 01                	mov    DWORD PTR [ecx],eax
c0006ebe:	eb 02                	jmp    c0006ec2 <f_getlabel+0x214>
c0006ec0:	89 c6                	mov    esi,eax
c0006ec2:	83 c4 6c             	add    esp,0x6c
c0006ec5:	89 f0                	mov    eax,esi
c0006ec7:	5b                   	pop    ebx
c0006ec8:	5e                   	pop    esi
c0006ec9:	5f                   	pop    edi
c0006eca:	5d                   	pop    ebp
c0006ecb:	c3                   	ret    

c0006ecc <f_setlabel>:
c0006ecc:	55                   	push   ebp
c0006ecd:	57                   	push   edi
c0006ece:	56                   	push   esi
c0006ecf:	53                   	push   ebx
c0006ed0:	83 c4 80             	add    esp,0xffffff80
c0006ed3:	6a 02                	push   0x2
c0006ed5:	8d 44 24 10          	lea    eax,[esp+0x10]
c0006ed9:	50                   	push   eax
c0006eda:	8d 84 24 9c 00 00 00 	lea    eax,[esp+0x9c]
c0006ee1:	50                   	push   eax
c0006ee2:	e8 d4 d6 ff ff       	call   c00045bb <mount_volume>
c0006ee7:	83 c4 10             	add    esp,0x10
c0006eea:	89 c6                	mov    esi,eax
c0006eec:	85 c0                	test   eax,eax
c0006eee:	0f 85 69 02 00 00    	jne    c000715d <f_setlabel+0x291>
c0006ef4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ef8:	8d 7c 24 0e          	lea    edi,[esp+0xe]
c0006efc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006eff:	0f 85 a0 00 00 00    	jne    c0006fa5 <f_setlabel+0xd9>
c0006f05:	31 db                	xor    ebx,ebx
c0006f07:	50                   	push   eax
c0006f08:	6a 16                	push   0x16
c0006f0a:	6a 00                	push   0x0
c0006f0c:	57                   	push   edi
c0006f0d:	e8 c4 ac ff ff       	call   c0001bd6 <mem_set>
c0006f12:	83 c4 10             	add    esp,0x10
c0006f15:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0006f1c:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f1f:	0f 86 26 01 00 00    	jbe    c000704b <f_setlabel+0x17f>
c0006f25:	83 ec 0c             	sub    esp,0xc
c0006f28:	8d 84 24 9c 00 00 00 	lea    eax,[esp+0x9c]
c0006f2f:	50                   	push   eax
c0006f30:	e8 fb ac ff ff       	call   c0001c30 <tchar2uni>
c0006f35:	83 c4 10             	add    esp,0x10
c0006f38:	89 c1                	mov    ecx,eax
c0006f3a:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f3f:	76 2d                	jbe    c0006f6e <f_setlabel+0xa2>
c0006f41:	83 f8 ff             	cmp    eax,0xffffffff
c0006f44:	74 05                	je     c0006f4b <f_setlabel+0x7f>
c0006f46:	83 fb 09             	cmp    ebx,0x9
c0006f49:	76 0a                	jbe    c0006f55 <f_setlabel+0x89>
c0006f4b:	be 06 00 00 00       	mov    esi,0x6
c0006f50:	e9 08 02 00 00       	jmp    c000715d <f_setlabel+0x291>
c0006f55:	50                   	push   eax
c0006f56:	50                   	push   eax
c0006f57:	89 c8                	mov    eax,ecx
c0006f59:	c1 e8 10             	shr    eax,0x10
c0006f5c:	50                   	push   eax
c0006f5d:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f60:	43                   	inc    ebx
c0006f61:	01 f8                	add    eax,edi
c0006f63:	50                   	push   eax
c0006f64:	e8 28 ac ff ff       	call   c0001b91 <st_word>
c0006f69:	83 c4 10             	add    esp,0x10
c0006f6c:	eb 04                	jmp    c0006f72 <f_setlabel+0xa6>
c0006f6e:	85 c0                	test   eax,eax
c0006f70:	74 d9                	je     c0006f4b <f_setlabel+0x7f>
c0006f72:	55                   	push   ebp
c0006f73:	55                   	push   ebp
c0006f74:	51                   	push   ecx
c0006f75:	68 37 95 02 c0       	push   0xc0029537
c0006f7a:	e8 95 ac ff ff       	call   c0001c14 <chk_chr>
c0006f7f:	83 c4 10             	add    esp,0x10
c0006f82:	85 c0                	test   eax,eax
c0006f84:	75 c5                	jne    c0006f4b <f_setlabel+0x7f>
c0006f86:	83 fb 0a             	cmp    ebx,0xa
c0006f89:	77 c0                	ja     c0006f4b <f_setlabel+0x7f>
c0006f8b:	0f b7 c9             	movzx  ecx,cx
c0006f8e:	56                   	push   esi
c0006f8f:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f92:	56                   	push   esi
c0006f93:	01 f8                	add    eax,edi
c0006f95:	51                   	push   ecx
c0006f96:	43                   	inc    ebx
c0006f97:	50                   	push   eax
c0006f98:	e8 f4 ab ff ff       	call   c0001b91 <st_word>
c0006f9d:	83 c4 10             	add    esp,0x10
c0006fa0:	e9 70 ff ff ff       	jmp    c0006f15 <f_setlabel+0x49>
c0006fa5:	53                   	push   ebx
c0006fa6:	31 db                	xor    ebx,ebx
c0006fa8:	6a 0b                	push   0xb
c0006faa:	6a 20                	push   0x20
c0006fac:	57                   	push   edi
c0006fad:	e8 24 ac ff ff       	call   c0001bd6 <mem_set>
c0006fb2:	83 c4 10             	add    esp,0x10
c0006fb5:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0006fbc:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fbf:	76 6d                	jbe    c000702e <f_setlabel+0x162>
c0006fc1:	83 ec 0c             	sub    esp,0xc
c0006fc4:	8d 84 24 9c 00 00 00 	lea    eax,[esp+0x9c]
c0006fcb:	50                   	push   eax
c0006fcc:	e8 5f ac ff ff       	call   c0001c30 <tchar2uni>
c0006fd1:	83 c4 10             	add    esp,0x10
c0006fd4:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fd9:	0f 87 6c ff ff ff    	ja     c0006f4b <f_setlabel+0x7f>
c0006fdf:	83 ec 0c             	sub    esp,0xc
c0006fe2:	50                   	push   eax
c0006fe3:	e8 e4 1c 00 00       	call   c0008ccc <ff_wtoupper>
c0006fe8:	5a                   	pop    edx
c0006fe9:	59                   	pop    ecx
c0006fea:	68 b5 01 00 00       	push   0x1b5
c0006fef:	50                   	push   eax
c0006ff0:	e8 db 1b 00 00       	call   c0008bd0 <ff_uni2oem>
c0006ff5:	83 c4 10             	add    esp,0x10
c0006ff8:	89 c1                	mov    ecx,eax
c0006ffa:	66 85 c0             	test   ax,ax
c0006ffd:	0f 84 48 ff ff ff    	je     c0006f4b <f_setlabel+0x7f>
c0007003:	50                   	push   eax
c0007004:	50                   	push   eax
c0007005:	0f b7 c1             	movzx  eax,cx
c0007008:	50                   	push   eax
c0007009:	68 30 95 02 c0       	push   0xc0029530
c000700e:	e8 01 ac ff ff       	call   c0001c14 <chk_chr>
c0007013:	83 c4 10             	add    esp,0x10
c0007016:	85 c0                	test   eax,eax
c0007018:	0f 85 2d ff ff ff    	jne    c0006f4b <f_setlabel+0x7f>
c000701e:	66 81 f9 ff 00       	cmp    cx,0xff
c0007023:	0f 87 1e 01 00 00    	ja     c0007147 <f_setlabel+0x27b>
c0007029:	e9 06 01 00 00       	jmp    c0007134 <f_setlabel+0x268>
c000702e:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007033:	0f 84 12 ff ff ff    	je     c0006f4b <f_setlabel+0x7f>
c0007039:	85 db                	test   ebx,ebx
c000703b:	74 0e                	je     c000704b <f_setlabel+0x17f>
c000703d:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007040:	80 7c 1f ff 20       	cmp    BYTE PTR [edi+ebx*1-0x1],0x20
c0007045:	75 04                	jne    c000704b <f_setlabel+0x17f>
c0007047:	89 c3                	mov    ebx,eax
c0007049:	eb ee                	jmp    c0007039 <f_setlabel+0x16d>
c000704b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007057:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000705b:	50                   	push   eax
c000705c:	50                   	push   eax
c000705d:	6a 00                	push   0x0
c000705f:	8d 6c 24 30          	lea    ebp,[esp+0x30]
c0007063:	55                   	push   ebp
c0007064:	e8 3f ba ff ff       	call   c0002aa8 <dir_sdi>
c0007069:	83 c4 10             	add    esp,0x10
c000706c:	89 c6                	mov    esi,eax
c000706e:	85 c0                	test   eax,eax
c0007070:	0f 85 e7 00 00 00    	jne    c000715d <f_setlabel+0x291>
c0007076:	50                   	push   eax
c0007077:	50                   	push   eax
c0007078:	6a 01                	push   0x1
c000707a:	55                   	push   ebp
c000707b:	e8 c0 c4 ff ff       	call   c0003540 <dir_read>
c0007080:	83 c4 10             	add    esp,0x10
c0007083:	85 c0                	test   eax,eax
c0007085:	75 1d                	jne    c00070a4 <f_setlabel+0x1d8>
c0007087:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000708b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000708f:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0007092:	74 5d                	je     c00070f1 <f_setlabel+0x225>
c0007094:	85 db                	test   ebx,ebx
c0007096:	74 07                	je     c000709f <f_setlabel+0x1d3>
c0007098:	55                   	push   ebp
c0007099:	6a 0b                	push   0xb
c000709b:	57                   	push   edi
c000709c:	50                   	push   eax
c000709d:	eb 6e                	jmp    c000710d <f_setlabel+0x241>
c000709f:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070a2:	eb 71                	jmp    c0007115 <f_setlabel+0x249>
c00070a4:	83 f8 04             	cmp    eax,0x4
c00070a7:	0f 85 83 00 00 00    	jne    c0007130 <f_setlabel+0x264>
c00070ad:	85 db                	test   ebx,ebx
c00070af:	0f 84 a8 00 00 00    	je     c000715d <f_setlabel+0x291>
c00070b5:	56                   	push   esi
c00070b6:	56                   	push   esi
c00070b7:	6a 01                	push   0x1
c00070b9:	55                   	push   ebp
c00070ba:	e8 2e bc ff ff       	call   c0002ced <dir_alloc>
c00070bf:	83 c4 10             	add    esp,0x10
c00070c2:	89 c6                	mov    esi,eax
c00070c4:	85 c0                	test   eax,eax
c00070c6:	0f 85 91 00 00 00    	jne    c000715d <f_setlabel+0x291>
c00070cc:	51                   	push   ecx
c00070cd:	6a 20                	push   0x20
c00070cf:	6a 00                	push   0x0
c00070d1:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c00070d5:	e8 fc aa ff ff       	call   c0001bd6 <mem_set>
c00070da:	83 c4 10             	add    esp,0x10
c00070dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070e1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070e4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e8:	75 17                	jne    c0007101 <f_setlabel+0x235>
c00070ea:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070ed:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f1:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070f4:	52                   	push   edx
c00070f5:	6a 16                	push   0x16
c00070f7:	57                   	push   edi
c00070f8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00070fc:	83 c0 02             	add    eax,0x2
c00070ff:	eb 9b                	jmp    c000709c <f_setlabel+0x1d0>
c0007101:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007105:	50                   	push   eax
c0007106:	6a 0b                	push   0xb
c0007108:	57                   	push   edi
c0007109:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c000710d:	e8 a8 aa ff ff       	call   c0001bba <mem_cpy>
c0007112:	83 c4 10             	add    esp,0x10
c0007115:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007119:	83 ec 0c             	sub    esp,0xc
c000711c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007120:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007124:	e8 c4 ad ff ff       	call   c0001eed <sync_fs>
c0007129:	83 c4 10             	add    esp,0x10
c000712c:	89 c6                	mov    esi,eax
c000712e:	eb 2d                	jmp    c000715d <f_setlabel+0x291>
c0007130:	89 c6                	mov    esi,eax
c0007132:	eb 29                	jmp    c000715d <f_setlabel+0x291>
c0007134:	83 fb 0a             	cmp    ebx,0xa
c0007137:	0f 87 0e fe ff ff    	ja     c0006f4b <f_setlabel+0x7f>
c000713d:	88 4c 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],cl
c0007141:	43                   	inc    ebx
c0007142:	e9 6e fe ff ff       	jmp    c0006fb5 <f_setlabel+0xe9>
c0007147:	83 fb 09             	cmp    ebx,0x9
c000714a:	0f 87 fb fd ff ff    	ja     c0006f4b <f_setlabel+0x7f>
c0007150:	89 c8                	mov    eax,ecx
c0007152:	66 c1 e8 08          	shr    ax,0x8
c0007156:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000715a:	43                   	inc    ebx
c000715b:	eb e0                	jmp    c000713d <f_setlabel+0x271>
c000715d:	83 c4 7c             	add    esp,0x7c
c0007160:	89 f0                	mov    eax,esi
c0007162:	5b                   	pop    ebx
c0007163:	5e                   	pop    esi
c0007164:	5f                   	pop    edi
c0007165:	5d                   	pop    ebp
c0007166:	c3                   	ret    

c0007167 <f_forward>:
c0007167:	55                   	push   ebp
c0007168:	57                   	push   edi
c0007169:	56                   	push   esi
c000716a:	53                   	push   ebx
c000716b:	83 ec 34             	sub    esp,0x34
c000716e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007172:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c0007176:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000717c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007180:	50                   	push   eax
c0007181:	53                   	push   ebx
c0007182:	e8 5c da ff ff       	call   c0004be3 <validate>
c0007187:	83 c4 10             	add    esp,0x10
c000718a:	89 c5                	mov    ebp,eax
c000718c:	85 c0                	test   eax,eax
c000718e:	0f 85 b2 01 00 00    	jne    c0007346 <f_forward+0x1df>
c0007194:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007198:	85 ed                	test   ebp,ebp
c000719a:	0f 85 a6 01 00 00    	jne    c0007346 <f_forward+0x1df>
c00071a0:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071a4:	0f 84 97 01 00 00    	je     c0007341 <f_forward+0x1da>
c00071aa:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071ad:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071b0:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071b3:	bf 00 00 00 00       	mov    edi,0x0
c00071b8:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071bb:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071bf:	89 d1                	mov    ecx,edx
c00071c1:	19 f9                	sbb    ecx,edi
c00071c3:	0f 83 d3 00 00 00    	jae    c000729c <f_forward+0x135>
c00071c9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071cd:	e9 ca 00 00 00       	jmp    c000729c <f_forward+0x135>
c00071d2:	50                   	push   eax
c00071d3:	50                   	push   eax
c00071d4:	6a 00                	push   0x0
c00071d6:	6a 00                	push   0x0
c00071d8:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071dc:	83 c4 10             	add    esp,0x10
c00071df:	85 c0                	test   eax,eax
c00071e1:	0f 84 5f 01 00 00    	je     c0007346 <f_forward+0x1df>
c00071e7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071ea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071ee:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071f1:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071f5:	89 d7                	mov    edi,edx
c00071f7:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071fa:	89 c6                	mov    esi,eax
c00071fc:	0f ac fe 09          	shrd   esi,edi,0x9
c0007200:	21 ce                	and    esi,ecx
c0007202:	89 c1                	mov    ecx,eax
c0007204:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000720a:	0f 84 9c 00 00 00    	je     c00072ac <f_forward+0x145>
c0007210:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007214:	57                   	push   edi
c0007215:	57                   	push   edi
c0007216:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0007219:	51                   	push   ecx
c000721a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000721e:	e8 a8 ad ff ff       	call   c0001fcb <clst2sect>
c0007223:	83 c4 10             	add    esp,0x10
c0007226:	89 d7                	mov    edi,edx
c0007228:	09 c7                	or     edi,eax
c000722a:	0f 84 a2 00 00 00    	je     c00072d2 <f_forward+0x16b>
c0007230:	31 ff                	xor    edi,edi
c0007232:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007235:	01 c6                	add    esi,eax
c0007237:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000723b:	11 d7                	adc    edi,edx
c000723d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007240:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007243:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007247:	39 fa                	cmp    edx,edi
c0007249:	0f 85 a6 00 00 00    	jne    c00072f5 <f_forward+0x18e>
c000724f:	39 f0                	cmp    eax,esi
c0007251:	0f 85 9e 00 00 00    	jne    c00072f5 <f_forward+0x18e>
c0007257:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000725a:	ba 00 02 00 00       	mov    edx,0x200
c000725f:	25 ff 01 00 00       	and    eax,0x1ff
c0007264:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007268:	29 c2                	sub    edx,eax
c000726a:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000726d:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007270:	39 d1                	cmp    ecx,edx
c0007272:	76 02                	jbe    c0007276 <f_forward+0x10f>
c0007274:	89 d1                	mov    ecx,edx
c0007276:	8d 73 50             	lea    esi,[ebx+0x50]
c0007279:	52                   	push   edx
c000727a:	01 c6                	add    esi,eax
c000727c:	52                   	push   edx
c000727d:	51                   	push   ecx
c000727e:	56                   	push   esi
c000727f:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007283:	83 c4 10             	add    esp,0x10
c0007286:	85 c0                	test   eax,eax
c0007288:	74 48                	je     c00072d2 <f_forward+0x16b>
c000728a:	31 ff                	xor    edi,edi
c000728c:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0007290:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007293:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007296:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c000729a:	01 02                	add    DWORD PTR [edx],eax
c000729c:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072a1:	0f 85 2b ff ff ff    	jne    c00071d2 <f_forward+0x6b>
c00072a7:	e9 9a 00 00 00       	jmp    c0007346 <f_forward+0x1df>
c00072ac:	85 f6                	test   esi,esi
c00072ae:	0f 85 5c ff ff ff    	jne    c0007210 <f_forward+0xa9>
c00072b4:	89 d7                	mov    edi,edx
c00072b6:	09 c7                	or     edi,eax
c00072b8:	75 05                	jne    c00072bf <f_forward+0x158>
c00072ba:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072bd:	eb 0e                	jmp    c00072cd <f_forward+0x166>
c00072bf:	50                   	push   eax
c00072c0:	50                   	push   eax
c00072c1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00072c4:	53                   	push   ebx
c00072c5:	e8 2d ad ff ff       	call   c0001ff7 <get_fat>
c00072ca:	83 c4 10             	add    esp,0x10
c00072cd:	83 f8 01             	cmp    eax,0x1
c00072d0:	77 0b                	ja     c00072dd <f_forward+0x176>
c00072d2:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072d6:	bd 02 00 00 00       	mov    ebp,0x2
c00072db:	eb 69                	jmp    c0007346 <f_forward+0x1df>
c00072dd:	83 f8 ff             	cmp    eax,0xffffffff
c00072e0:	75 0b                	jne    c00072ed <f_forward+0x186>
c00072e2:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072e6:	bd 01 00 00 00       	mov    ebp,0x1
c00072eb:	eb 59                	jmp    c0007346 <f_forward+0x1df>
c00072ed:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072f0:	e9 1b ff ff ff       	jmp    c0007210 <f_forward+0xa9>
c00072f5:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072f9:	79 20                	jns    c000731b <f_forward+0x1b4>
c00072fb:	83 ec 0c             	sub    esp,0xc
c00072fe:	6a 01                	push   0x1
c0007300:	52                   	push   edx
c0007301:	50                   	push   eax
c0007302:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007306:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000730a:	50                   	push   eax
c000730b:	e8 d0 a7 ff ff       	call   c0001ae0 <disk_write>
c0007310:	83 c4 20             	add    esp,0x20
c0007313:	85 c0                	test   eax,eax
c0007315:	75 cb                	jne    c00072e2 <f_forward+0x17b>
c0007317:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000731b:	83 ec 0c             	sub    esp,0xc
c000731e:	6a 01                	push   0x1
c0007320:	57                   	push   edi
c0007321:	56                   	push   esi
c0007322:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007326:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000732a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000732e:	50                   	push   eax
c000732f:	e8 96 a7 ff ff       	call   c0001aca <disk_read>
c0007334:	83 c4 20             	add    esp,0x20
c0007337:	85 c0                	test   eax,eax
c0007339:	0f 84 18 ff ff ff    	je     c0007257 <f_forward+0xf0>
c000733f:	eb a1                	jmp    c00072e2 <f_forward+0x17b>
c0007341:	bd 07 00 00 00       	mov    ebp,0x7
c0007346:	83 c4 2c             	add    esp,0x2c
c0007349:	89 e8                	mov    eax,ebp
c000734b:	5b                   	pop    ebx
c000734c:	5e                   	pop    esi
c000734d:	5f                   	pop    edi
c000734e:	5d                   	pop    ebp
c000734f:	c3                   	ret    

c0007350 <create_partition>:
c0007350:	55                   	push   ebp
c0007351:	57                   	push   edi
c0007352:	56                   	push   esi
c0007353:	53                   	push   ebx
c0007354:	83 ec 60             	sub    esp,0x60
c0007357:	0f b6 44 24 74       	movzx  eax,BYTE PTR [esp+0x74]
c000735c:	8b 9c 24 80 00 00 00 	mov    ebx,DWORD PTR [esp+0x80]
c0007363:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007367:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000736b:	50                   	push   eax
c000736c:	6a 01                	push   0x1
c000736e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007372:	e8 7f a7 ff ff       	call   c0001af6 <disk_ioctl>
c0007377:	83 c4 10             	add    esp,0x10
c000737a:	85 c0                	test   eax,eax
c000737c:	74 0a                	je     c0007388 <create_partition+0x38>
c000737e:	b8 01 00 00 00       	mov    eax,0x1
c0007383:	e9 f1 05 00 00       	jmp    c0007979 <create_partition+0x629>
c0007388:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000738c:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0007390:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007394:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007398:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000739d:	0f 86 60 04 00 00    	jbe    c0007803 <create_partition+0x4b3>
c00073a3:	83 c0 df             	add    eax,0xffffffdf
c00073a6:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00073ae:	83 d2 ff             	adc    edx,0xffffffff
c00073b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00073b5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00073b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00073bd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00073c1:	83 c0 bd             	add    eax,0xffffffbd
c00073c4:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c00073cc:	83 d2 ff             	adc    edx,0xffffffff
c00073cf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00073d3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00073d7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00073df:	be 22 00 00 00       	mov    esi,0x22
c00073e4:	31 ff                	xor    edi,edi
c00073e6:	c7 44 24 38 00 00 21 50 	mov    DWORD PTR [esp+0x38],0x50210000
c00073ee:	c7 44 24 2c ff ff ff ff 	mov    DWORD PTR [esp+0x2c],0xffffffff
c00073f6:	31 c9                	xor    ecx,ecx
c00073f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00073fc:	25 ff 01 00 00       	and    eax,0x1ff
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	75 19                	jne    c0007420 <create_partition+0xd0>
c0007407:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000740b:	50                   	push   eax
c000740c:	68 00 02 00 00       	push   0x200
c0007411:	6a 00                	push   0x0
c0007413:	53                   	push   ebx
c0007414:	e8 bd a7 ff ff       	call   c0001bd6 <mem_set>
c0007419:	83 c4 10             	add    esp,0x10
c000741c:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0007420:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007424:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c0007428:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000742c:	0f 84 47 01 00 00    	je     c0007579 <create_partition+0x229>
c0007432:	89 f0                	mov    eax,esi
c0007434:	89 fa                	mov    edx,edi
c0007436:	05 ff 07 00 00       	add    eax,0x7ff
c000743b:	83 d2 00             	adc    edx,0x0
c000743e:	89 c5                	mov    ebp,eax
c0007440:	89 d7                	mov    edi,edx
c0007442:	81 e5 00 f8 ff ff    	and    ebp,0xfffff800
c0007448:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000744c:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0007450:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0007454:	89 ee                	mov    esi,ebp
c0007456:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0007459:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000745d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007461:	b8 64 00 00 00       	mov    eax,0x64
c0007466:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000746a:	b8 00 00 00 00       	mov    eax,0x0
c000746f:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0007473:	72 44                	jb     c00074b9 <create_partition+0x169>
c0007475:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0007479:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000747d:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c0007482:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007487:	01 c1                	add    ecx,eax
c0007489:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000748d:	f7 64 24 08          	mul    DWORD PTR [esp+0x8]
c0007491:	6a 00                	push   0x0
c0007493:	01 ca                	add    edx,ecx
c0007495:	6a 64                	push   0x64
c0007497:	52                   	push   edx
c0007498:	50                   	push   eax
c0007499:	e8 3e f6 01 00       	call   c0026adc <__udivdi3>
c000749e:	83 c4 10             	add    esp,0x10
c00074a1:	05 ff 07 00 00       	add    eax,0x7ff
c00074a6:	83 d2 00             	adc    edx,0x0
c00074a9:	89 c1                	mov    ecx,eax
c00074ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00074af:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00074b5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00074b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00074c1:	01 f0                	add    eax,esi
c00074c3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00074c7:	11 fa                	adc    edx,edi
c00074c9:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00074cd:	19 d1                	sbb    ecx,edx
c00074cf:	73 34                	jae    c0007505 <create_partition+0x1b5>
c00074d1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00074d5:	89 f8                	mov    eax,edi
c00074d7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00074df:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00074e3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00074eb:	0f 83 88 00 00 00    	jae    c0007579 <create_partition+0x229>
c00074f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074f5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00074f9:	29 f0                	sub    eax,esi
c00074fb:	19 fa                	sbb    edx,edi
c00074fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007501:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007505:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007509:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000750d:	74 6a                	je     c0007579 <create_partition+0x229>
c000750f:	55                   	push   ebp
c0007510:	6a 10                	push   0x10
c0007512:	68 80 94 02 c0       	push   0xc0029480
c0007517:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000751b:	01 d8                	add    eax,ebx
c000751d:	50                   	push   eax
c000751e:	e8 97 a6 ff ff       	call   c0001bba <mem_cpy>
c0007523:	83 c4 0c             	add    esp,0xc
c0007526:	6a 10                	push   0x10
c0007528:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000752c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0007530:	50                   	push   eax
c0007531:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0007535:	e8 b4 cd ff ff       	call   c00042ee <make_rand>
c000753a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000753e:	83 c4 0c             	add    esp,0xc
c0007541:	57                   	push   edi
c0007542:	56                   	push   esi
c0007543:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007547:	8d 44 03 20          	lea    eax,[ebx+eax*1+0x20]
c000754b:	50                   	push   eax
c000754c:	e8 57 a6 ff ff       	call   c0001ba8 <st_qword>
c0007551:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007555:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007559:	89 f0                	mov    eax,esi
c000755b:	83 c4 0c             	add    esp,0xc
c000755e:	89 fa                	mov    edx,edi
c0007560:	83 c0 ff             	add    eax,0xffffffff
c0007563:	83 d2 ff             	adc    edx,0xffffffff
c0007566:	52                   	push   edx
c0007567:	50                   	push   eax
c0007568:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000756c:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0007570:	50                   	push   eax
c0007571:	e8 32 a6 ff ff       	call   c0001ba8 <st_qword>
c0007576:	83 c4 10             	add    esp,0x10
c0007579:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000757d:	83 e8 80             	sub    eax,0xffffff80
c0007580:	89 c2                	mov    edx,eax
c0007582:	89 c5                	mov    ebp,eax
c0007584:	81 e2 ff 01 00 00    	and    edx,0x1ff
c000758a:	0f 85 80 00 00 00    	jne    c0007610 <create_partition+0x2c0>
c0007590:	51                   	push   ecx
c0007591:	51                   	push   ecx
c0007592:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0007596:	42                   	inc    edx
c0007597:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000759b:	50                   	push   eax
c000759c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00075a0:	e8 91 cc ff ff       	call   c0004236 <crc32>
c00075a5:	83 c4 10             	add    esp,0x10
c00075a8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00075ac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00075b0:	81 fa 00 02 00 00    	cmp    edx,0x200
c00075b6:	75 d8                	jne    c0007590 <create_partition+0x240>
c00075b8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00075bc:	31 d2                	xor    edx,edx
c00075be:	83 ec 0c             	sub    esp,0xc
c00075c1:	c1 e9 09             	shr    ecx,0x9
c00075c4:	6a 01                	push   0x1
c00075c6:	8d 41 02             	lea    eax,[ecx+0x2]
c00075c9:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c00075cd:	52                   	push   edx
c00075ce:	50                   	push   eax
c00075cf:	53                   	push   ebx
c00075d0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00075d4:	e8 07 a5 ff ff       	call   c0001ae0 <disk_write>
c00075d9:	83 c4 20             	add    esp,0x20
c00075dc:	85 c0                	test   eax,eax
c00075de:	0f 85 9a fd ff ff    	jne    c000737e <create_partition+0x2e>
c00075e4:	83 ec 0c             	sub    esp,0xc
c00075e7:	31 d2                	xor    edx,edx
c00075e9:	6a 01                	push   0x1
c00075eb:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00075ef:	89 c8                	mov    eax,ecx
c00075f1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00075f5:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00075f9:	52                   	push   edx
c00075fa:	50                   	push   eax
c00075fb:	53                   	push   ebx
c00075fc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007600:	e8 db a4 ff ff       	call   c0001ae0 <disk_write>
c0007605:	83 c4 20             	add    esp,0x20
c0007608:	85 c0                	test   eax,eax
c000760a:	0f 85 6e fd ff ff    	jne    c000737e <create_partition+0x2e>
c0007610:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0007614:	81 fd 00 40 00 00    	cmp    ebp,0x4000
c000761a:	74 09                	je     c0007625 <create_partition+0x2d5>
c000761c:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0007620:	e9 d3 fd ff ff       	jmp    c00073f8 <create_partition+0xa8>
c0007625:	51                   	push   ecx
c0007626:	68 00 02 00 00       	push   0x200
c000762b:	6a 00                	push   0x0
c000762d:	53                   	push   ebx
c000762e:	e8 a3 a5 ff ff       	call   c0001bd6 <mem_set>
c0007633:	83 c4 0c             	add    esp,0xc
c0007636:	6a 10                	push   0x10
c0007638:	68 20 95 02 c0       	push   0xc0029520
c000763d:	53                   	push   ebx
c000763e:	e8 77 a5 ff ff       	call   c0001bba <mem_cpy>
c0007643:	5e                   	pop    esi
c0007644:	8d 43 58             	lea    eax,[ebx+0x58]
c0007647:	5f                   	pop    edi
c0007648:	8d 7b 48             	lea    edi,[ebx+0x48]
c000764b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000764f:	f7 d5                	not    ebp
c0007651:	55                   	push   ebp
c0007652:	8d 6b 20             	lea    ebp,[ebx+0x20]
c0007655:	50                   	push   eax
c0007656:	e8 42 a5 ff ff       	call   c0001b9d <st_dword>
c000765b:	8d 43 18             	lea    eax,[ebx+0x18]
c000765e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007662:	83 c4 0c             	add    esp,0xc
c0007665:	6a 00                	push   0x0
c0007667:	6a 01                	push   0x1
c0007669:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000766d:	e8 36 a5 ff ff       	call   c0001ba8 <st_qword>
c0007672:	83 c4 0c             	add    esp,0xc
c0007675:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007679:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c000767d:	83 c0 ff             	add    eax,0xffffffff
c0007680:	83 d2 ff             	adc    edx,0xffffffff
c0007683:	52                   	push   edx
c0007684:	50                   	push   eax
c0007685:	55                   	push   ebp
c0007686:	e8 1d a5 ff ff       	call   c0001ba8 <st_qword>
c000768b:	83 c4 0c             	add    esp,0xc
c000768e:	8d 43 28             	lea    eax,[ebx+0x28]
c0007691:	6a 00                	push   0x0
c0007693:	6a 22                	push   0x22
c0007695:	50                   	push   eax
c0007696:	e8 0d a5 ff ff       	call   c0001ba8 <st_qword>
c000769b:	83 c4 0c             	add    esp,0xc
c000769e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00076a2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00076a6:	83 c0 de             	add    eax,0xffffffde
c00076a9:	83 d2 ff             	adc    edx,0xffffffff
c00076ac:	52                   	push   edx
c00076ad:	50                   	push   eax
c00076ae:	8d 43 30             	lea    eax,[ebx+0x30]
c00076b1:	50                   	push   eax
c00076b2:	e8 f1 a4 ff ff       	call   c0001ba8 <st_qword>
c00076b7:	58                   	pop    eax
c00076b8:	8d 43 54             	lea    eax,[ebx+0x54]
c00076bb:	5a                   	pop    edx
c00076bc:	68 80 00 00 00       	push   0x80
c00076c1:	50                   	push   eax
c00076c2:	e8 d6 a4 ff ff       	call   c0001b9d <st_dword>
c00076c7:	59                   	pop    ecx
c00076c8:	8d 43 50             	lea    eax,[ebx+0x50]
c00076cb:	5e                   	pop    esi
c00076cc:	31 f6                	xor    esi,esi
c00076ce:	68 80 00 00 00       	push   0x80
c00076d3:	50                   	push   eax
c00076d4:	e8 c4 a4 ff ff       	call   c0001b9d <st_dword>
c00076d9:	58                   	pop    eax
c00076da:	5a                   	pop    edx
c00076db:	6a 02                	push   0x2
c00076dd:	57                   	push   edi
c00076de:	e8 ba a4 ff ff       	call   c0001b9d <st_dword>
c00076e3:	83 c4 0c             	add    esp,0xc
c00076e6:	8d 43 38             	lea    eax,[ebx+0x38]
c00076e9:	6a 10                	push   0x10
c00076eb:	50                   	push   eax
c00076ec:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00076f0:	e8 f9 cb ff ff       	call   c00042ee <make_rand>
c00076f5:	83 c4 10             	add    esp,0x10
c00076f8:	83 c8 ff             	or     eax,0xffffffff
c00076fb:	46                   	inc    esi
c00076fc:	52                   	push   edx
c00076fd:	52                   	push   edx
c00076fe:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0007703:	52                   	push   edx
c0007704:	50                   	push   eax
c0007705:	e8 2c cb ff ff       	call   c0004236 <crc32>
c000770a:	83 c4 10             	add    esp,0x10
c000770d:	83 fe 5c             	cmp    esi,0x5c
c0007710:	75 e9                	jne    c00076fb <create_partition+0x3ab>
c0007712:	f7 d0                	not    eax
c0007714:	8d 73 10             	lea    esi,[ebx+0x10]
c0007717:	51                   	push   ecx
c0007718:	51                   	push   ecx
c0007719:	50                   	push   eax
c000771a:	56                   	push   esi
c000771b:	e8 7d a4 ff ff       	call   c0001b9d <st_dword>
c0007720:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0007727:	6a 00                	push   0x0
c0007729:	6a 01                	push   0x1
c000772b:	53                   	push   ebx
c000772c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007730:	e8 ab a3 ff ff       	call   c0001ae0 <disk_write>
c0007735:	83 c4 20             	add    esp,0x20
c0007738:	85 c0                	test   eax,eax
c000773a:	0f 85 3e fc ff ff    	jne    c000737e <create_partition+0x2e>
c0007740:	50                   	push   eax
c0007741:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007745:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0007749:	83 c0 ff             	add    eax,0xffffffff
c000774c:	83 d2 ff             	adc    edx,0xffffffff
c000774f:	52                   	push   edx
c0007750:	50                   	push   eax
c0007751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007755:	e8 4e a4 ff ff       	call   c0001ba8 <st_qword>
c000775a:	83 c4 0c             	add    esp,0xc
c000775d:	6a 00                	push   0x0
c000775f:	6a 01                	push   0x1
c0007761:	55                   	push   ebp
c0007762:	e8 41 a4 ff ff       	call   c0001ba8 <st_qword>
c0007767:	83 c4 0c             	add    esp,0xc
c000776a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000776e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007772:	57                   	push   edi
c0007773:	31 ff                	xor    edi,edi
c0007775:	e8 2e a4 ff ff       	call   c0001ba8 <st_qword>
c000777a:	58                   	pop    eax
c000777b:	5a                   	pop    edx
c000777c:	6a 00                	push   0x0
c000777e:	56                   	push   esi
c000777f:	e8 19 a4 ff ff       	call   c0001b9d <st_dword>
c0007784:	83 c4 10             	add    esp,0x10
c0007787:	83 c8 ff             	or     eax,0xffffffff
c000778a:	47                   	inc    edi
c000778b:	55                   	push   ebp
c000778c:	55                   	push   ebp
c000778d:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0007792:	52                   	push   edx
c0007793:	50                   	push   eax
c0007794:	e8 9d ca ff ff       	call   c0004236 <crc32>
c0007799:	83 c4 10             	add    esp,0x10
c000779c:	83 ff 5c             	cmp    edi,0x5c
c000779f:	75 e9                	jne    c000778a <create_partition+0x43a>
c00077a1:	f7 d0                	not    eax
c00077a3:	51                   	push   ecx
c00077a4:	51                   	push   ecx
c00077a5:	50                   	push   eax
c00077a6:	56                   	push   esi
c00077a7:	e8 f1 a3 ff ff       	call   c0001b9d <st_dword>
c00077ac:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00077b0:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00077b4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00077bb:	83 c0 ff             	add    eax,0xffffffff
c00077be:	83 d2 ff             	adc    edx,0xffffffff
c00077c1:	52                   	push   edx
c00077c2:	50                   	push   eax
c00077c3:	53                   	push   ebx
c00077c4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00077c8:	e8 13 a3 ff ff       	call   c0001ae0 <disk_write>
c00077cd:	83 c4 20             	add    esp,0x20
c00077d0:	85 c0                	test   eax,eax
c00077d2:	0f 85 a6 fb ff ff    	jne    c000737e <create_partition+0x2e>
c00077d8:	50                   	push   eax
c00077d9:	68 00 02 00 00       	push   0x200
c00077de:	6a 00                	push   0x0
c00077e0:	53                   	push   ebx
c00077e1:	e8 f0 a3 ff ff       	call   c0001bd6 <mem_set>
c00077e6:	83 c4 0c             	add    esp,0xc
c00077e9:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c00077ef:	6a 10                	push   0x10
c00077f1:	68 44 95 02 c0       	push   0xc0029544
c00077f6:	50                   	push   eax
c00077f7:	e8 be a3 ff ff       	call   c0001bba <mem_cpy>
c00077fc:	58                   	pop    eax
c00077fd:	5a                   	pop    edx
c00077fe:	e9 34 01 00 00       	jmp    c0007937 <create_partition+0x5e7>
c0007803:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007807:	b9 05 00 00 00       	mov    ecx,0x5
c000780c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007810:	bf 08 00 00 00       	mov    edi,0x8
c0007815:	89 f8                	mov    eax,edi
c0007817:	31 d2                	xor    edx,edx
c0007819:	0f b6 f0             	movzx  esi,al
c000781c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007820:	f7 f6                	div    esi
c0007822:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0007827:	76 0a                	jbe    c0007833 <create_partition+0x4e3>
c0007829:	d1 e7                	shl    edi,1
c000782b:	49                   	dec    ecx
c000782c:	75 e7                	jne    c0007815 <create_partition+0x4c5>
c000782e:	bf ff ff ff ff       	mov    edi,0xffffffff
c0007833:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0007839:	50                   	push   eax
c000783a:	68 00 02 00 00       	push   0x200
c000783f:	6a 00                	push   0x0
c0007841:	53                   	push   ebx
c0007842:	e8 8f a3 ff ff       	call   c0001bd6 <mem_set>
c0007847:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000784b:	b9 64 00 00 00       	mov    ecx,0x64
c0007850:	31 d2                	xor    edx,edx
c0007852:	f7 f1                	div    ecx
c0007854:	b9 3f 00 00 00       	mov    ecx,0x3f
c0007859:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000785d:	83 c4 10             	add    esp,0x10
c0007860:	89 f8                	mov    eax,edi
c0007862:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000786a:	0f b6 c0             	movzx  eax,al
c000786d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007871:	e9 89 00 00 00       	jmp    c00078ff <create_partition+0x5af>
c0007876:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000787a:	29 cf                	sub    edi,ecx
c000787c:	50                   	push   eax
c000787d:	50                   	push   eax
c000787e:	51                   	push   ecx
c000787f:	56                   	push   esi
c0007880:	e8 18 a3 ff ff       	call   c0001b9d <st_dword>
c0007885:	5a                   	pop    edx
c0007886:	8d 46 04             	lea    eax,[esi+0x4]
c0007889:	5d                   	pop    ebp
c000788a:	83 c6 10             	add    esi,0x10
c000788d:	57                   	push   edi
c000788e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0007893:	50                   	push   eax
c0007894:	e8 04 a3 ff ff       	call   c0001b9d <st_dword>
c0007899:	8a 84 24 88 00 00 00 	mov    al,BYTE PTR [esp+0x88]
c00078a0:	31 d2                	xor    edx,edx
c00078a2:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00078a5:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00078a9:	89 c8                	mov    eax,ecx
c00078ab:	01 f9                	add    ecx,edi
c00078ad:	f7 f5                	div    ebp
c00078af:	89 d5                	mov    ebp,edx
c00078b1:	31 d2                	xor    edx,edx
c00078b3:	45                   	inc    ebp
c00078b4:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078b8:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c00078bb:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c00078be:	89 c2                	mov    edx,eax
c00078c0:	8d 41 ff             	lea    eax,[ecx-0x1]
c00078c3:	c1 ea 02             	shr    edx,0x2
c00078c6:	83 e2 c0             	and    edx,0xffffffc0
c00078c9:	09 ea                	or     edx,ebp
c00078cb:	bd 3f 00 00 00       	mov    ebp,0x3f
c00078d0:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c00078d3:	31 d2                	xor    edx,edx
c00078d5:	f7 f5                	div    ebp
c00078d7:	89 d7                	mov    edi,edx
c00078d9:	31 d2                	xor    edx,edx
c00078db:	47                   	inc    edi
c00078dc:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078e0:	83 c4 10             	add    esp,0x10
c00078e3:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c00078e6:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c00078e9:	89 c5                	mov    ebp,eax
c00078eb:	c1 ed 02             	shr    ebp,0x2
c00078ee:	83 e5 c0             	and    ebp,0xffffffc0
c00078f1:	09 ef                	or     edi,ebp
c00078f3:	89 fa                	mov    edx,edi
c00078f5:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c00078f8:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c00078fd:	74 36                	je     c0007935 <create_partition+0x5e5>
c00078ff:	85 c9                	test   ecx,ecx
c0007901:	74 32                	je     c0007935 <create_partition+0x5e5>
c0007903:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0007907:	76 2c                	jbe    c0007935 <create_partition+0x5e5>
c0007909:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000790d:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0007911:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0007914:	83 ff 64             	cmp    edi,0x64
c0007917:	76 51                	jbe    c000796a <create_partition+0x61a>
c0007919:	89 f8                	mov    eax,edi
c000791b:	01 c8                	add    eax,ecx
c000791d:	0f 82 53 ff ff ff    	jb     c0007876 <create_partition+0x526>
c0007923:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0007927:	0f 87 49 ff ff ff    	ja     c0007876 <create_partition+0x526>
c000792d:	85 ff                	test   edi,edi
c000792f:	0f 85 47 ff ff ff    	jne    c000787c <create_partition+0x52c>
c0007935:	50                   	push   eax
c0007936:	50                   	push   eax
c0007937:	68 55 aa 00 00       	push   0xaa55
c000793c:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0007942:	50                   	push   eax
c0007943:	e8 49 a2 ff ff       	call   c0001b91 <st_word>
c0007948:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000794f:	6a 00                	push   0x0
c0007951:	6a 00                	push   0x0
c0007953:	53                   	push   ebx
c0007954:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007958:	e8 83 a1 ff ff       	call   c0001ae0 <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 95 c0             	setne  al
c0007965:	0f b6 c0             	movzx  eax,al
c0007968:	eb 0f                	jmp    c0007979 <create_partition+0x629>
c000796a:	74 07                	je     c0007973 <create_partition+0x623>
c000796c:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0007971:	eb a6                	jmp    c0007919 <create_partition+0x5c9>
c0007973:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007977:	eb a0                	jmp    c0007919 <create_partition+0x5c9>
c0007979:	83 c4 5c             	add    esp,0x5c
c000797c:	5b                   	pop    ebx
c000797d:	5e                   	pop    esi
c000797e:	5f                   	pop    edi
c000797f:	5d                   	pop    ebp
c0007980:	c3                   	ret    

c0007981 <f_mkfs>:
c0007981:	55                   	push   ebp
c0007982:	57                   	push   edi
c0007983:	56                   	push   esi
c0007984:	53                   	push   ebx
c0007985:	bb 0b 00 00 00       	mov    ebx,0xb
c000798a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007990:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007997:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000799e:	50                   	push   eax
c000799f:	e8 4c c8 ff ff       	call   c00041f0 <get_ldnumber>
c00079a4:	5f                   	pop    edi
c00079a5:	85 c0                	test   eax,eax
c00079a7:	0f 88 e9 11 00 00    	js     c0008b96 <f_mkfs+0x1215>
c00079ad:	8b 14 85 20 13 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcece0]
c00079b4:	85 d2                	test   edx,edx
c00079b6:	74 03                	je     c00079bb <f_mkfs+0x3a>
c00079b8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00079bb:	85 f6                	test   esi,esi
c00079bd:	75 05                	jne    c00079c4 <f_mkfs+0x43>
c00079bf:	be 54 95 02 c0       	mov    esi,0xc0029554
c00079c4:	83 ec 0c             	sub    esp,0xc
c00079c7:	0f b6 c0             	movzx  eax,al
c00079ca:	bb 03 00 00 00       	mov    ebx,0x3
c00079cf:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00079d3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079d7:	e8 eb a0 ff ff       	call   c0001ac7 <disk_initialize>
c00079dc:	83 c4 10             	add    esp,0x10
c00079df:	a8 01                	test   al,0x1
c00079e1:	0f 85 af 11 00 00    	jne    c0008b96 <f_mkfs+0x1215>
c00079e7:	bb 0a 00 00 00       	mov    ebx,0xa
c00079ec:	a8 04                	test   al,0x4
c00079ee:	0f 85 a2 11 00 00    	jne    c0008b96 <f_mkfs+0x1215>
c00079f4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00079f7:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00079fb:	85 c0                	test   eax,eax
c00079fd:	75 20                	jne    c0007a1f <f_mkfs+0x9e>
c00079ff:	53                   	push   ebx
c0007a00:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007a04:	50                   	push   eax
c0007a05:	6a 03                	push   0x3
c0007a07:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a0b:	e8 e6 a0 ff ff       	call   c0001af6 <disk_ioctl>
c0007a10:	83 c4 10             	add    esp,0x10
c0007a13:	85 c0                	test   eax,eax
c0007a15:	74 08                	je     c0007a1f <f_mkfs+0x9e>
c0007a17:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007a1f:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007a23:	8d 42 ff             	lea    eax,[edx-0x1]
c0007a26:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007a2b:	77 04                	ja     c0007a31 <f_mkfs+0xb0>
c0007a2d:	85 c2                	test   edx,eax
c0007a2f:	74 08                	je     c0007a39 <f_mkfs+0xb8>
c0007a31:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007a39:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007a3c:	88 44 24 54          	mov    BYTE PTR [esp+0x54],al
c0007a40:	48                   	dec    eax
c0007a41:	3c 01                	cmp    al,0x1
c0007a43:	76 05                	jbe    c0007a4a <f_mkfs+0xc9>
c0007a45:	c6 44 24 54 01       	mov    BYTE PTR [esp+0x54],0x1
c0007a4a:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007a4d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a51:	48                   	dec    eax
c0007a52:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007a57:	77 07                	ja     c0007a60 <f_mkfs+0xdf>
c0007a59:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007a5e:	74 08                	je     c0007a68 <f_mkfs+0xe7>
c0007a60:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007a68:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007a6b:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007a71:	77 07                	ja     c0007a7a <f_mkfs+0xf9>
c0007a73:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007a76:	85 d8                	test   eax,ebx
c0007a78:	74 02                	je     c0007a7c <f_mkfs+0xfb>
c0007a7a:	31 db                	xor    ebx,ebx
c0007a7c:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007a87:	77 0a                	ja     c0007a93 <f_mkfs+0x112>
c0007a89:	bb 11 00 00 00       	mov    ebx,0x11
c0007a8e:	e9 03 11 00 00       	jmp    c0008b96 <f_mkfs+0x1215>
c0007a93:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007a9a:	8b 36                	mov    esi,DWORD PTR [esi]
c0007a9c:	85 ed                	test   ebp,ebp
c0007a9e:	75 1e                	jne    c0007abe <f_mkfs+0x13d>
c0007aa0:	83 ec 0c             	sub    esp,0xc
c0007aa3:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007aaa:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007aaf:	50                   	push   eax
c0007ab0:	e8 ee 10 00 00       	call   c0008ba3 <ff_memalloc>
c0007ab5:	83 c4 10             	add    esp,0x10
c0007ab8:	89 c5                	mov    ebp,eax
c0007aba:	85 c0                	test   eax,eax
c0007abc:	74 cb                	je     c0007a89 <f_mkfs+0x108>
c0007abe:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007ac6:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007ace:	51                   	push   ecx
c0007acf:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007ad3:	50                   	push   eax
c0007ad4:	6a 01                	push   0x1
c0007ad6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007ada:	e8 17 a0 ff ff       	call   c0001af6 <disk_ioctl>
c0007adf:	83 c4 10             	add    esp,0x10
c0007ae2:	85 c0                	test   eax,eax
c0007ae4:	0f 85 47 10 00 00    	jne    c0008b31 <f_mkfs+0x11b0>
c0007aea:	89 f2                	mov    edx,esi
c0007aec:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007af4:	83 e2 0f             	and    edx,0xf
c0007af7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007aff:	88 54 24 53          	mov    BYTE PTR [esp+0x53],dl
c0007b03:	83 e6 08             	and    esi,0x8
c0007b06:	75 56                	jne    c0007b5e <f_mkfs+0x1dd>
c0007b08:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007b0c:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007b10:	83 ff 00             	cmp    edi,0x0
c0007b13:	76 20                	jbe    c0007b35 <f_mkfs+0x1b4>
c0007b15:	80 4c 24 53 80       	or     BYTE PTR [esp+0x53],0x80
c0007b1a:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007b22:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007b28:	83 d7 ff             	adc    edi,0xffffffff
c0007b2b:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007b2f:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007b33:	eb 21                	jmp    c0007b56 <f_mkfs+0x1d5>
c0007b35:	ba 3f 00 00 00       	mov    edx,0x3f
c0007b3a:	39 f2                	cmp    edx,esi
c0007b3c:	19 f8                	sbb    eax,edi
c0007b3e:	73 1e                	jae    c0007b5e <f_mkfs+0x1dd>
c0007b40:	83 c6 c1             	add    esi,0xffffffc1
c0007b43:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007b4b:	83 d7 ff             	adc    edi,0xffffffff
c0007b4e:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007b52:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007b56:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007b5e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007b62:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007b66:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b6a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007b6e:	31 c0                	xor    eax,eax
c0007b70:	ba 7f 00 00 00       	mov    edx,0x7f
c0007b75:	89 c7                	mov    edi,eax
c0007b77:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007b7b:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0007b7f:	0f 83 6e 0b 00 00    	jae    c00086f3 <f_mkfs+0xd72>
c0007b85:	89 df                	mov    edi,ebx
c0007b87:	c1 ef 09             	shr    edi,0x9
c0007b8a:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b8e:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007b95:	c1 ef 09             	shr    edi,0x9
c0007b98:	f6 44 24 53 04       	test   BYTE PTR [esp+0x53],0x4
c0007b9d:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007ba1:	74 2a                	je     c0007bcd <f_mkfs+0x24c>
c0007ba3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007ba9:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007bae:	0f 97 c2             	seta   dl
c0007bb1:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0007bb5:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0007bb9:	0f 92 c0             	setb   al
c0007bbc:	08 c2                	or     dl,al
c0007bbe:	75 5b                	jne    c0007c1b <f_mkfs+0x29a>
c0007bc0:	8a 44 24 53          	mov    al,BYTE PTR [esp+0x53]
c0007bc4:	83 e0 07             	and    eax,0x7
c0007bc7:	3c 04                	cmp    al,0x4
c0007bc9:	74 50                	je     c0007c1b <f_mkfs+0x29a>
c0007bcb:	eb 1b                	jmp    c0007be8 <f_mkfs+0x267>
c0007bcd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007bd2:	0f 87 1b 0b 00 00    	ja     c00086f3 <f_mkfs+0xd72>
c0007bd8:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007bde:	76 08                	jbe    c0007be8 <f_mkfs+0x267>
c0007be0:	c7 44 24 04 80 00 00 00 	mov    DWORD PTR [esp+0x4],0x80
c0007be8:	8a 44 24 53          	mov    al,BYTE PTR [esp+0x53]
c0007bec:	8a 54 24 53          	mov    dl,BYTE PTR [esp+0x53]
c0007bf0:	83 e0 01             	and    eax,0x1
c0007bf3:	80 e2 02             	and    dl,0x2
c0007bf6:	88 54 24 5c          	mov    BYTE PTR [esp+0x5c],dl
c0007bfa:	74 0d                	je     c0007c09 <f_mkfs+0x288>
c0007bfc:	84 c0                	test   al,al
c0007bfe:	0f 84 f4 09 00 00    	je     c00085f8 <f_mkfs+0xc77>
c0007c04:	e9 b2 08 00 00       	jmp    c00084bb <f_mkfs+0xb3a>
c0007c09:	bb 13 00 00 00       	mov    ebx,0x13
c0007c0e:	84 c0                	test   al,al
c0007c10:	0f 85 a5 08 00 00    	jne    c00084bb <f_mkfs+0xb3a>
c0007c16:	e9 33 0f 00 00       	jmp    c0008b4e <f_mkfs+0x11cd>
c0007c1b:	31 c0                	xor    eax,eax
c0007c1d:	ba ff 0f 00 00       	mov    edx,0xfff
c0007c22:	89 c7                	mov    edi,eax
c0007c24:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007c28:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0007c2c:	0f 83 c1 0a 00 00    	jae    c00086f3 <f_mkfs+0xd72>
c0007c32:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007c38:	77 3b                	ja     c0007c75 <f_mkfs+0x2f4>
c0007c3a:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007c3f:	c7 44 24 04 08 00 00 00 	mov    DWORD PTR [esp+0x4],0x8
c0007c47:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007c4b:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0007c4f:	73 08                	jae    c0007c59 <f_mkfs+0x2d8>
c0007c51:	c7 44 24 04 40 00 00 00 	mov    DWORD PTR [esp+0x4],0x40
c0007c59:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007c5e:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0007c62:	b8 00 00 00 00       	mov    eax,0x0
c0007c67:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0007c6b:	73 08                	jae    c0007c75 <f_mkfs+0x2f4>
c0007c6d:	c7 44 24 04 00 01 00 00 	mov    DWORD PTR [esp+0x4],0x100
c0007c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007c79:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007c7d:	83 c0 20             	add    eax,0x20
c0007c80:	83 d2 00             	adc    edx,0x0
c0007c83:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007c87:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007c8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c8f:	31 d2                	xor    edx,edx
c0007c91:	31 ff                	xor    edi,edi
c0007c93:	52                   	push   edx
c0007c94:	89 fb                	mov    ebx,edi
c0007c96:	50                   	push   eax
c0007c97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007c9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007c9f:	e8 38 ee 01 00       	call   c0026adc <__udivdi3>
c0007ca4:	83 c4 10             	add    esp,0x10
c0007ca7:	c1 e0 02             	shl    eax,0x2
c0007caa:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007cae:	05 07 02 00 00       	add    eax,0x207
c0007cb3:	89 f1                	mov    ecx,esi
c0007cb5:	c1 e8 09             	shr    eax,0x9
c0007cb8:	83 c1 ff             	add    ecx,0xffffffff
c0007cbb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007cbf:	83 d3 ff             	adc    ebx,0xffffffff
c0007cc2:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007cc6:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007cca:	31 d2                	xor    edx,edx
c0007ccc:	01 c8                	add    eax,ecx
c0007cce:	11 da                	adc    edx,ebx
c0007cd0:	89 c1                	mov    ecx,eax
c0007cd2:	f7 de                	neg    esi
c0007cd4:	89 d0                	mov    eax,edx
c0007cd6:	83 d7 00             	adc    edi,0x0
c0007cd9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007cdd:	f7 df                	neg    edi
c0007cdf:	21 f1                	and    ecx,esi
c0007ce1:	21 f8                	and    eax,edi
c0007ce3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007ce7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007ceb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007cef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007cf3:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007cf7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cfb:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007cff:	0f ac d0 01          	shrd   eax,edx,0x1
c0007d03:	89 df                	mov    edi,ebx
c0007d05:	d1 ea                	shr    edx,1
c0007d07:	39 c1                	cmp    ecx,eax
c0007d09:	19 d7                	sbb    edi,edx
c0007d0b:	0f 83 e2 09 00 00    	jae    c00086f3 <f_mkfs+0xd72>
c0007d11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d15:	31 d2                	xor    edx,edx
c0007d17:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007d1b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d1f:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007d23:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007d27:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007d2b:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007d2f:	f7 74 24 04          	div    DWORD PTR [esp+0x4]
c0007d33:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007d37:	83 f8 0f             	cmp    eax,0xf
c0007d3a:	0f 86 b3 09 00 00    	jbe    c00086f3 <f_mkfs+0xd72>
c0007d40:	81 7c 24 34 fd ff ff 7f 	cmp    DWORD PTR [esp+0x34],0x7ffffffd
c0007d48:	0f 87 a5 09 00 00    	ja     c00086f3 <f_mkfs+0xd72>
c0007d4e:	31 d2                	xor    edx,edx
c0007d50:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007d54:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0007d5c:	83 c0 07             	add    eax,0x7
c0007d5f:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007d67:	c1 e8 03             	shr    eax,0x3
c0007d6a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007d72:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007d76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d7a:	c1 e0 09             	shl    eax,0x9
c0007d7d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d81:	48                   	dec    eax
c0007d82:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0007d86:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007d8a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007d8e:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007d92:	31 d2                	xor    edx,edx
c0007d94:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007d98:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007d9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007da3:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c0007da8:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007dac:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007db0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007db4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007db8:	31 db                	xor    ebx,ebx
c0007dba:	31 ff                	xor    edi,edi
c0007dbc:	31 f6                	xor    esi,esi
c0007dbe:	85 db                	test   ebx,ebx
c0007dc0:	74 05                	je     c0007dc7 <f_mkfs+0x446>
c0007dc2:	4b                   	dec    ebx
c0007dc3:	74 44                	je     c0007e09 <f_mkfs+0x488>
c0007dc5:	eb 4d                	jmp    c0007e14 <f_mkfs+0x493>
c0007dc7:	83 ec 0c             	sub    esp,0xc
c0007dca:	0f b7 c6             	movzx  eax,si
c0007dcd:	50                   	push   eax
c0007dce:	e8 f9 0e 00 00       	call   c0008ccc <ff_wtoupper>
c0007dd3:	83 c4 10             	add    esp,0x10
c0007dd6:	89 c1                	mov    ecx,eax
c0007dd8:	8d 56 01             	lea    edx,[esi+0x1]
c0007ddb:	66 39 c6             	cmp    si,ax
c0007dde:	75 3c                	jne    c0007e1c <f_mkfs+0x49b>
c0007de0:	bf 01 00 00 00       	mov    edi,0x1
c0007de5:	89 f3                	mov    ebx,esi
c0007de7:	66 01 fb             	add    bx,di
c0007dea:	75 07                	jne    c0007df3 <f_mkfs+0x472>
c0007dec:	83 ff 7f             	cmp    edi,0x7f
c0007def:	77 2f                	ja     c0007e20 <f_mkfs+0x49f>
c0007df1:	eb 16                	jmp    c0007e09 <f_mkfs+0x488>
c0007df3:	83 ec 0c             	sub    esp,0xc
c0007df6:	0f b7 db             	movzx  ebx,bx
c0007df9:	53                   	push   ebx
c0007dfa:	e8 cd 0e 00 00       	call   c0008ccc <ff_wtoupper>
c0007dff:	83 c4 10             	add    esp,0x10
c0007e02:	39 c3                	cmp    ebx,eax
c0007e04:	75 e6                	jne    c0007dec <f_mkfs+0x46b>
c0007e06:	47                   	inc    edi
c0007e07:	eb dc                	jmp    c0007de5 <f_mkfs+0x464>
c0007e09:	31 db                	xor    ebx,ebx
c0007e0b:	89 f1                	mov    ecx,esi
c0007e0d:	4f                   	dec    edi
c0007e0e:	0f 95 c3             	setne  bl
c0007e11:	46                   	inc    esi
c0007e12:	eb 14                	jmp    c0007e28 <f_mkfs+0x4a7>
c0007e14:	89 f9                	mov    ecx,edi
c0007e16:	01 fe                	add    esi,edi
c0007e18:	31 db                	xor    ebx,ebx
c0007e1a:	eb 0c                	jmp    c0007e28 <f_mkfs+0x4a7>
c0007e1c:	89 d6                	mov    esi,edx
c0007e1e:	eb 08                	jmp    c0007e28 <f_mkfs+0x4a7>
c0007e20:	bb 02 00 00 00       	mov    ebx,0x2
c0007e25:	83 c9 ff             	or     ecx,0xffffffff
c0007e28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e2c:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007e30:	50                   	push   eax
c0007e31:	50                   	push   eax
c0007e32:	0f b6 c1             	movzx  eax,cl
c0007e35:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0007e39:	50                   	push   eax
c0007e3a:	e8 b2 b2 ff ff       	call   c00030f1 <xsum32>
c0007e3f:	5a                   	pop    edx
c0007e40:	66 c1 e9 08          	shr    cx,0x8
c0007e44:	5a                   	pop    edx
c0007e45:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e49:	88 4c 15 01          	mov    BYTE PTR [ebp+edx*1+0x1],cl
c0007e4d:	50                   	push   eax
c0007e4e:	0f b7 c9             	movzx  ecx,cx
c0007e51:	51                   	push   ecx
c0007e52:	e8 9a b2 ff ff       	call   c00030f1 <xsum32>
c0007e57:	83 c4 10             	add    esp,0x10
c0007e5a:	83 44 24 58 02       	add    DWORD PTR [esp+0x58],0x2
c0007e5f:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0007e63:	66 85 f6             	test   si,si
c0007e66:	74 21                	je     c0007e89 <f_mkfs+0x508>
c0007e68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e6c:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007e73:	83 c0 02             	add    eax,0x2
c0007e76:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007e7c:	39 c2                	cmp    edx,eax
c0007e7e:	74 09                	je     c0007e89 <f_mkfs+0x508>
c0007e80:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e84:	e9 35 ff ff ff       	jmp    c0007dbe <f_mkfs+0x43d>
c0007e89:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e8d:	83 ec 0c             	sub    esp,0xc
c0007e90:	05 01 02 00 00       	add    eax,0x201
c0007e95:	c1 e8 09             	shr    eax,0x9
c0007e98:	50                   	push   eax
c0007e99:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e9d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007ea1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007ea5:	55                   	push   ebp
c0007ea6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0007eaa:	e8 31 9c ff ff       	call   c0001ae0 <disk_write>
c0007eaf:	83 c4 20             	add    esp,0x20
c0007eb2:	85 c0                	test   eax,eax
c0007eb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007eb8:	0f 85 73 0c 00 00    	jne    c0008b31 <f_mkfs+0x11b0>
c0007ebe:	89 d0                	mov    eax,edx
c0007ec0:	31 d2                	xor    edx,edx
c0007ec2:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007ec6:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007eca:	66 85 f6             	test   si,si
c0007ecd:	74 04                	je     c0007ed3 <f_mkfs+0x552>
c0007ecf:	31 c0                	xor    eax,eax
c0007ed1:	eb ad                	jmp    c0007e80 <f_mkfs+0x4ff>
c0007ed3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007ed7:	31 d2                	xor    edx,edx
c0007ed9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007edd:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0007ee1:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007ee5:	8d 9f ff 01 00 00    	lea    ebx,[edi+0x1ff]
c0007eeb:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007ef2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007ef6:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0007efa:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007f05:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0007f09:	8d 70 01             	lea    esi,[eax+0x1]
c0007f0c:	c1 eb 09             	shr    ebx,0x9
c0007f0f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007f13:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007f17:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007f1b:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007f22:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007f27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f2b:	57                   	push   edi
c0007f2c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007f30:	6a 00                	push   0x0
c0007f32:	55                   	push   ebp
c0007f33:	e8 9e 9c ff ff       	call   c0001bd6 <mem_set>
c0007f38:	83 c4 10             	add    esp,0x10
c0007f3b:	31 c0                	xor    eax,eax
c0007f3d:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0007f41:	76 10                	jbe    c0007f53 <f_mkfs+0x5d2>
c0007f43:	83 fe 07             	cmp    esi,0x7
c0007f46:	76 0b                	jbe    c0007f53 <f_mkfs+0x5d2>
c0007f48:	40                   	inc    eax
c0007f49:	83 ee 08             	sub    esi,0x8
c0007f4c:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007f51:	eb ea                	jmp    c0007f3d <f_mkfs+0x5bc>
c0007f53:	b2 01                	mov    dl,0x1
c0007f55:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007f59:	85 f6                	test   esi,esi
c0007f5b:	74 0d                	je     c0007f6a <f_mkfs+0x5e9>
c0007f5d:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0007f61:	76 07                	jbe    c0007f6a <f_mkfs+0x5e9>
c0007f63:	08 11                	or     BYTE PTR [ecx],dl
c0007f65:	4e                   	dec    esi
c0007f66:	d1 e2                	shl    edx,1
c0007f68:	eb ef                	jmp    c0007f59 <f_mkfs+0x5d8>
c0007f6a:	89 df                	mov    edi,ebx
c0007f6c:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007f70:	76 04                	jbe    c0007f76 <f_mkfs+0x5f5>
c0007f72:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007f76:	83 ec 0c             	sub    esp,0xc
c0007f79:	57                   	push   edi
c0007f7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007f7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007f82:	55                   	push   ebp
c0007f83:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0007f87:	e8 54 9b ff ff       	call   c0001ae0 <disk_write>
c0007f8c:	83 c4 20             	add    esp,0x20
c0007f8f:	85 c0                	test   eax,eax
c0007f91:	0f 85 9a 0b 00 00    	jne    c0008b31 <f_mkfs+0x11b0>
c0007f97:	31 d2                	xor    edx,edx
c0007f99:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007f9d:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007fa1:	29 fb                	sub    ebx,edi
c0007fa3:	0f 85 72 ff ff ff    	jne    c0007f1b <f_mkfs+0x59a>
c0007fa9:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007fad:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007fb5:	31 f6                	xor    esi,esi
c0007fb7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007fbb:	51                   	push   ecx
c0007fbc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007fc0:	6a 00                	push   0x0
c0007fc2:	55                   	push   ebp
c0007fc3:	e8 0e 9c ff ff       	call   c0001bd6 <mem_set>
c0007fc8:	83 c4 10             	add    esp,0x10
c0007fcb:	31 c9                	xor    ecx,ecx
c0007fcd:	85 db                	test   ebx,ebx
c0007fcf:	75 4b                	jne    c000801c <f_mkfs+0x69b>
c0007fd1:	bb 02 00 00 00       	mov    ebx,0x2
c0007fd6:	50                   	push   eax
c0007fd7:	50                   	push   eax
c0007fd8:	6a f8                	push   0xfffffff8
c0007fda:	55                   	push   ebp
c0007fdb:	e8 bd 9b ff ff       	call   c0001b9d <st_dword>
c0007fe0:	58                   	pop    eax
c0007fe1:	8d 45 04             	lea    eax,[ebp+0x4]
c0007fe4:	5a                   	pop    edx
c0007fe5:	6a ff                	push   0xffffffff
c0007fe7:	50                   	push   eax
c0007fe8:	e8 b0 9b ff ff       	call   c0001b9d <st_dword>
c0007fed:	83 c4 10             	add    esp,0x10
c0007ff0:	b9 08 00 00 00       	mov    ecx,0x8
c0007ff5:	eb 25                	jmp    c000801c <f_mkfs+0x69b>
c0007ff7:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0007ffb:	76 43                	jbe    c0008040 <f_mkfs+0x6bf>
c0007ffd:	43                   	inc    ebx
c0007ffe:	83 fe 01             	cmp    esi,0x1
c0008001:	89 d8                	mov    eax,ebx
c0008003:	77 03                	ja     c0008008 <f_mkfs+0x687>
c0008005:	83 c8 ff             	or     eax,0xffffffff
c0008008:	4e                   	dec    esi
c0008009:	57                   	push   edi
c000800a:	57                   	push   edi
c000800b:	50                   	push   eax
c000800c:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0008010:	50                   	push   eax
c0008011:	e8 87 9b ff ff       	call   c0001b9d <st_dword>
c0008016:	83 c4 10             	add    esp,0x10
c0008019:	83 c1 04             	add    ecx,0x4
c000801c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008020:	85 f6                	test   esi,esi
c0008022:	75 d3                	jne    c0007ff7 <f_mkfs+0x676>
c0008024:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0008029:	77 15                	ja     c0008040 <f_mkfs+0x6bf>
c000802b:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000802f:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0008036:	85 f6                	test   esi,esi
c0008038:	74 06                	je     c0008040 <f_mkfs+0x6bf>
c000803a:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000803e:	77 dc                	ja     c000801c <f_mkfs+0x69b>
c0008040:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008044:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008048:	39 cf                	cmp    edi,ecx
c000804a:	76 02                	jbe    c000804e <f_mkfs+0x6cd>
c000804c:	89 cf                	mov    edi,ecx
c000804e:	83 ec 0c             	sub    esp,0xc
c0008051:	57                   	push   edi
c0008052:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0008056:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000805a:	55                   	push   ebp
c000805b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000805f:	e8 7c 9a ff ff       	call   c0001ae0 <disk_write>
c0008064:	83 c4 20             	add    esp,0x20
c0008067:	85 c0                	test   eax,eax
c0008069:	0f 85 c2 0a 00 00    	jne    c0008b31 <f_mkfs+0x11b0>
c000806f:	31 d2                	xor    edx,edx
c0008071:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0008075:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0008079:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c000807d:	0f 85 38 ff ff ff    	jne    c0007fbb <f_mkfs+0x63a>
c0008083:	50                   	push   eax
c0008084:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008088:	6a 00                	push   0x0
c000808a:	55                   	push   ebp
c000808b:	e8 46 9b ff ff       	call   c0001bd6 <mem_set>
c0008090:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0008094:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0008098:	58                   	pop    eax
c0008099:	8d 45 34             	lea    eax,[ebp+0x34]
c000809c:	5a                   	pop    edx
c000809d:	6a 02                	push   0x2
c000809f:	50                   	push   eax
c00080a0:	e8 f8 9a ff ff       	call   c0001b9d <st_dword>
c00080a5:	59                   	pop    ecx
c00080a6:	8d 45 38             	lea    eax,[ebp+0x38]
c00080a9:	5b                   	pop    ebx
c00080aa:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00080ae:	50                   	push   eax
c00080af:	e8 e9 9a ff ff       	call   c0001b9d <st_dword>
c00080b4:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c00080b8:	8d 45 44             	lea    eax,[ebp+0x44]
c00080bb:	5e                   	pop    esi
c00080bc:	5f                   	pop    edi
c00080bd:	31 ff                	xor    edi,edi
c00080bf:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00080c3:	50                   	push   eax
c00080c4:	e8 d4 9a ff ff       	call   c0001b9d <st_dword>
c00080c9:	8d 45 54             	lea    eax,[ebp+0x54]
c00080cc:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00080d0:	58                   	pop    eax
c00080d1:	5a                   	pop    edx
c00080d2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00080d6:	83 c0 02             	add    eax,0x2
c00080d9:	50                   	push   eax
c00080da:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00080de:	e8 ba 9a ff ff       	call   c0001b9d <st_dword>
c00080e3:	8d 45 58             	lea    eax,[ebp+0x58]
c00080e6:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00080ea:	59                   	pop    ecx
c00080eb:	5b                   	pop    ebx
c00080ec:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00080f0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080f4:	e8 a4 9a ff ff       	call   c0001b9d <st_dword>
c00080f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00080fd:	0f af 44 24 64       	imul   eax,DWORD PTR [esp+0x64]
c0008102:	89 c6                	mov    esi,eax
c0008104:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c0008108:	13 7c 24 2c          	adc    edi,DWORD PTR [esp+0x2c]
c000810c:	83 c4 10             	add    esp,0x10
c000810f:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008113:	89 d9                	mov    ecx,ebx
c0008115:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0008119:	76 04                	jbe    c000811f <f_mkfs+0x79e>
c000811b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000811f:	83 ec 0c             	sub    esp,0xc
c0008122:	51                   	push   ecx
c0008123:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0008127:	57                   	push   edi
c0008128:	56                   	push   esi
c0008129:	55                   	push   ebp
c000812a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000812e:	e8 ad 99 ff ff       	call   c0001ae0 <disk_write>
c0008133:	83 c4 20             	add    esp,0x20
c0008136:	85 c0                	test   eax,eax
c0008138:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000813c:	0f 85 ef 09 00 00    	jne    c0008b31 <f_mkfs+0x11b0>
c0008142:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008146:	50                   	push   eax
c0008147:	68 00 02 00 00       	push   0x200
c000814c:	6a 00                	push   0x0
c000814e:	55                   	push   ebp
c000814f:	e8 82 9a ff ff       	call   c0001bd6 <mem_set>
c0008154:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0008158:	31 d2                	xor    edx,edx
c000815a:	01 ce                	add    esi,ecx
c000815c:	11 d7                	adc    edi,edx
c000815e:	83 c4 10             	add    esp,0x10
c0008161:	29 cb                	sub    ebx,ecx
c0008163:	75 ae                	jne    c0008113 <f_mkfs+0x792>
c0008165:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008169:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000816d:	c7 44 24 48 02 00 00 00 	mov    DWORD PTR [esp+0x48],0x2
c0008175:	51                   	push   ecx
c0008176:	68 00 02 00 00       	push   0x200
c000817b:	6a 00                	push   0x0
c000817d:	55                   	push   ebp
c000817e:	e8 53 9a ff ff       	call   c0001bd6 <mem_set>
c0008183:	83 c4 0c             	add    esp,0xc
c0008186:	6a 0b                	push   0xb
c0008188:	68 92 95 02 c0       	push   0xc0029592
c000818d:	55                   	push   ebp
c000818e:	e8 27 9a ff ff       	call   c0001bba <mem_cpy>
c0008193:	83 c4 0c             	add    esp,0xc
c0008196:	8d 45 40             	lea    eax,[ebp+0x40]
c0008199:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000819d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081a1:	50                   	push   eax
c00081a2:	e8 01 9a ff ff       	call   c0001ba8 <st_qword>
c00081a7:	83 c4 0c             	add    esp,0xc
c00081aa:	8d 45 48             	lea    eax,[ebp+0x48]
c00081ad:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c00081b4:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c00081bb:	50                   	push   eax
c00081bc:	e8 e7 99 ff ff       	call   c0001ba8 <st_qword>
c00081c1:	5b                   	pop    ebx
c00081c2:	58                   	pop    eax
c00081c3:	8d 45 50             	lea    eax,[ebp+0x50]
c00081c6:	6a 20                	push   0x20
c00081c8:	50                   	push   eax
c00081c9:	e8 cf 99 ff ff       	call   c0001b9d <st_dword>
c00081ce:	58                   	pop    eax
c00081cf:	5a                   	pop    edx
c00081d0:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c00081d4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00081d8:	e8 c0 99 ff ff       	call   c0001b9d <st_dword>
c00081dd:	59                   	pop    ecx
c00081de:	5b                   	pop    ebx
c00081df:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00081e3:	2b 44 24 70          	sub    eax,DWORD PTR [esp+0x70]
c00081e7:	50                   	push   eax
c00081e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00081ec:	e8 ac 99 ff ff       	call   c0001b9d <st_dword>
c00081f1:	58                   	pop    eax
c00081f2:	8d 45 5c             	lea    eax,[ebp+0x5c]
c00081f5:	5a                   	pop    edx
c00081f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00081fa:	50                   	push   eax
c00081fb:	e8 9d 99 ff ff       	call   c0001b9d <st_dword>
c0008200:	59                   	pop    ecx
c0008201:	5b                   	pop    ebx
c0008202:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0008206:	83 c0 02             	add    eax,0x2
c0008209:	50                   	push   eax
c000820a:	8d 45 60             	lea    eax,[ebp+0x60]
c000820d:	50                   	push   eax
c000820e:	e8 8a 99 ff ff       	call   c0001b9d <st_dword>
c0008213:	58                   	pop    eax
c0008214:	8d 45 64             	lea    eax,[ebp+0x64]
c0008217:	5a                   	pop    edx
c0008218:	68 00 00 21 50       	push   0x50210000
c000821d:	50                   	push   eax
c000821e:	e8 7a 99 ff ff       	call   c0001b9d <st_dword>
c0008223:	59                   	pop    ecx
c0008224:	8d 45 68             	lea    eax,[ebp+0x68]
c0008227:	5b                   	pop    ebx
c0008228:	68 00 01 00 00       	push   0x100
c000822d:	50                   	push   eax
c000822e:	e8 5e 99 ff ff       	call   c0001b91 <st_word>
c0008233:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0008237:	83 c4 10             	add    esp,0x10
c000823a:	b8 0a 00 00 00       	mov    eax,0xa
c000823f:	48                   	dec    eax
c0008240:	74 05                	je     c0008247 <f_mkfs+0x8c6>
c0008242:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0008245:	eb f8                	jmp    c000823f <f_mkfs+0x8be>
c0008247:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000824b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c000824f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008253:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0008257:	74 05                	je     c000825e <f_mkfs+0x8dd>
c0008259:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c000825c:	eb f5                	jmp    c0008253 <f_mkfs+0x8d2>
c000825e:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0008264:	31 db                	xor    ebx,ebx
c0008266:	50                   	push   eax
c0008267:	50                   	push   eax
c0008268:	8d 45 78             	lea    eax,[ebp+0x78]
c000826b:	68 eb fe 00 00       	push   0xfeeb
c0008270:	50                   	push   eax
c0008271:	e8 1b 99 ff ff       	call   c0001b91 <st_word>
c0008276:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c000827c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008280:	58                   	pop    eax
c0008281:	5a                   	pop    edx
c0008282:	68 55 aa 00 00       	push   0xaa55
c0008287:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000828b:	e8 01 99 ff ff       	call   c0001b91 <st_word>
c0008290:	83 c4 10             	add    esp,0x10
c0008293:	31 c9                	xor    ecx,ecx
c0008295:	8d 41 96             	lea    eax,[ecx-0x6a]
c0008298:	83 f8 01             	cmp    eax,0x1
c000829b:	76 18                	jbe    c00082b5 <f_mkfs+0x934>
c000829d:	83 f9 70             	cmp    ecx,0x70
c00082a0:	74 13                	je     c00082b5 <f_mkfs+0x934>
c00082a2:	50                   	push   eax
c00082a3:	50                   	push   eax
c00082a4:	53                   	push   ebx
c00082a5:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00082aa:	50                   	push   eax
c00082ab:	e8 41 ae ff ff       	call   c00030f1 <xsum32>
c00082b0:	83 c4 10             	add    esp,0x10
c00082b3:	89 c3                	mov    ebx,eax
c00082b5:	41                   	inc    ecx
c00082b6:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00082bc:	75 d7                	jne    c0008295 <f_mkfs+0x914>
c00082be:	89 f0                	mov    eax,esi
c00082c0:	89 fa                	mov    edx,edi
c00082c2:	83 c0 01             	add    eax,0x1
c00082c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00082c9:	83 d2 00             	adc    edx,0x0
c00082cc:	83 ec 0c             	sub    esp,0xc
c00082cf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00082d3:	6a 01                	push   0x1
c00082d5:	57                   	push   edi
c00082d6:	56                   	push   esi
c00082d7:	55                   	push   ebp
c00082d8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00082dc:	e8 ff 97 ff ff       	call   c0001ae0 <disk_write>
c00082e1:	83 c4 20             	add    esp,0x20
c00082e4:	85 c0                	test   eax,eax
c00082e6:	0f 85 45 08 00 00    	jne    c0008b31 <f_mkfs+0x11b0>
c00082ec:	50                   	push   eax
c00082ed:	68 00 02 00 00       	push   0x200
c00082f2:	6a 00                	push   0x0
c00082f4:	55                   	push   ebp
c00082f5:	e8 dc 98 ff ff       	call   c0001bd6 <mem_set>
c00082fa:	58                   	pop    eax
c00082fb:	5a                   	pop    edx
c00082fc:	68 55 aa 00 00       	push   0xaa55
c0008301:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008305:	e8 87 98 ff ff       	call   c0001b91 <st_word>
c000830a:	89 f0                	mov    eax,esi
c000830c:	89 fa                	mov    edx,edi
c000830e:	83 c0 09             	add    eax,0x9
c0008311:	83 d2 00             	adc    edx,0x0
c0008314:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008318:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000831c:	83 c4 10             	add    esp,0x10
c000831f:	31 c9                	xor    ecx,ecx
c0008321:	41                   	inc    ecx
c0008322:	50                   	push   eax
c0008323:	50                   	push   eax
c0008324:	53                   	push   ebx
c0008325:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c000832a:	50                   	push   eax
c000832b:	e8 c1 ad ff ff       	call   c00030f1 <xsum32>
c0008330:	83 c4 10             	add    esp,0x10
c0008333:	89 c3                	mov    ebx,eax
c0008335:	81 f9 00 02 00 00    	cmp    ecx,0x200
c000833b:	75 e4                	jne    c0008321 <f_mkfs+0x9a0>
c000833d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008341:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008345:	83 c0 01             	add    eax,0x1
c0008348:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000834c:	83 d2 00             	adc    edx,0x0
c000834f:	83 ec 0c             	sub    esp,0xc
c0008352:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0008356:	6a 01                	push   0x1
c0008358:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000835c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008360:	55                   	push   ebp
c0008361:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0008365:	e8 76 97 ff ff       	call   c0001ae0 <disk_write>
c000836a:	83 c4 20             	add    esp,0x20
c000836d:	85 c0                	test   eax,eax
c000836f:	0f 85 bc 07 00 00    	jne    c0008b31 <f_mkfs+0x11b0>
c0008375:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008379:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c000837d:	75 0a                	jne    c0008389 <f_mkfs+0xa08>
c000837f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008383:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0008387:	74 12                	je     c000839b <f_mkfs+0xa1a>
c0008389:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000838d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008391:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0008395:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0008399:	eb 84                	jmp    c000831f <f_mkfs+0x99e>
c000839b:	50                   	push   eax
c000839c:	68 00 02 00 00       	push   0x200
c00083a1:	6a 00                	push   0x0
c00083a3:	55                   	push   ebp
c00083a4:	e8 2d 98 ff ff       	call   c0001bd6 <mem_set>
c00083a9:	83 c6 0b             	add    esi,0xb
c00083ac:	83 d7 00             	adc    edi,0x0
c00083af:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00083b3:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c00083b7:	83 c4 10             	add    esp,0x10
c00083ba:	31 c9                	xor    ecx,ecx
c00083bc:	41                   	inc    ecx
c00083bd:	57                   	push   edi
c00083be:	57                   	push   edi
c00083bf:	53                   	push   ebx
c00083c0:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c00083c5:	50                   	push   eax
c00083c6:	e8 26 ad ff ff       	call   c00030f1 <xsum32>
c00083cb:	83 c4 10             	add    esp,0x10
c00083ce:	89 c3                	mov    ebx,eax
c00083d0:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00083d6:	75 e4                	jne    c00083bc <f_mkfs+0xa3b>
c00083d8:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00083dc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00083e0:	83 c6 01             	add    esi,0x1
c00083e3:	83 d7 00             	adc    edi,0x0
c00083e6:	83 ec 0c             	sub    esp,0xc
c00083e9:	6a 01                	push   0x1
c00083eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00083ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00083f3:	55                   	push   ebp
c00083f4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00083f8:	e8 e3 96 ff ff       	call   c0001ae0 <disk_write>
c00083fd:	83 c4 20             	add    esp,0x20
c0008400:	85 c0                	test   eax,eax
c0008402:	0f 85 29 07 00 00    	jne    c0008b31 <f_mkfs+0x11b0>
c0008408:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c000840c:	75 06                	jne    c0008414 <f_mkfs+0xa93>
c000840e:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0008412:	74 0a                	je     c000841e <f_mkfs+0xa9d>
c0008414:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0008418:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000841c:	eb 9c                	jmp    c00083ba <f_mkfs+0xa39>
c000841e:	56                   	push   esi
c000841f:	56                   	push   esi
c0008420:	53                   	push   ebx
c0008421:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008425:	01 e8                	add    eax,ebp
c0008427:	50                   	push   eax
c0008428:	e8 70 97 ff ff       	call   c0001b9d <st_dword>
c000842d:	83 44 24 28 04       	add    DWORD PTR [esp+0x28],0x4
c0008432:	83 c4 10             	add    esp,0x10
c0008435:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c000843d:	75 df                	jne    c000841e <f_mkfs+0xa9d>
c000843f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008443:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0008447:	83 c6 02             	add    esi,0x2
c000844a:	83 d7 00             	adc    edi,0x0
c000844d:	83 ec 0c             	sub    esp,0xc
c0008450:	6a 01                	push   0x1
c0008452:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0008456:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000845a:	55                   	push   ebp
c000845b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000845f:	e8 7c 96 ff ff       	call   c0001ae0 <disk_write>
c0008464:	83 c4 20             	add    esp,0x20
c0008467:	85 c0                	test   eax,eax
c0008469:	0f 85 c2 06 00 00    	jne    c0008b31 <f_mkfs+0x11b0>
c000846f:	83 7c 24 48 01       	cmp    DWORD PTR [esp+0x48],0x1
c0008474:	74 0d                	je     c0008483 <f_mkfs+0xb02>
c0008476:	c7 44 24 48 01 00 00 00 	mov    DWORD PTR [esp+0x48],0x1
c000847e:	e9 f2 fc ff ff       	jmp    c0008175 <f_mkfs+0x7f4>
c0008483:	b1 07                	mov    cl,0x7
c0008485:	e9 3e 06 00 00       	jmp    c0008ac8 <f_mkfs+0x1147>
c000848a:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c000848f:	0f 85 57 02 00 00    	jne    c00086ec <f_mkfs+0xd6b>
c0008495:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000849a:	0f 86 2a 02 00 00    	jbe    c00086ca <f_mkfs+0xd49>
c00084a0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00084a5:	0f 85 db 06 00 00    	jne    c0008b86 <f_mkfs+0x1205>
c00084ab:	8d 04 36             	lea    eax,[esi+esi*1]
c00084ae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00084b2:	83 f8 40             	cmp    eax,0x40
c00084b5:	0f 87 ab 06 00 00    	ja     c0008b66 <f_mkfs+0x11e5>
c00084bb:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00084bf:	85 f6                	test   esi,esi
c00084c1:	75 1d                	jne    c00084e0 <f_mkfs+0xb5f>
c00084c3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00084c7:	ba 74 95 02 c0       	mov    edx,0xc0029574
c00084cc:	c1 e9 0c             	shr    ecx,0xc
c00084cf:	be 01 00 00 00       	mov    esi,0x1
c00084d4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00084d7:	66 85 c0             	test   ax,ax
c00084da:	0f 85 99 01 00 00    	jne    c0008679 <f_mkfs+0xcf8>
c00084e0:	31 d2                	xor    edx,edx
c00084e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00084e6:	f7 f6                	div    esi
c00084e8:	3d f5 0f 00 00       	cmp    eax,0xff5
c00084ed:	0f 86 98 01 00 00    	jbe    c000868b <f_mkfs+0xd0a>
c00084f3:	83 c0 02             	add    eax,0x2
c00084f6:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c00084fb:	01 c0                	add    eax,eax
c00084fd:	05 ff 01 00 00       	add    eax,0x1ff
c0008502:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c000850a:	c1 e8 09             	shr    eax,0x9
c000850d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008511:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008515:	c1 e0 05             	shl    eax,0x5
c0008518:	c1 e8 09             	shr    eax,0x9
c000851b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000851f:	0f b6 44 24 54       	movzx  eax,BYTE PTR [esp+0x54]
c0008524:	31 d2                	xor    edx,edx
c0008526:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000852a:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000852e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008532:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0008536:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c000853a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000853e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0008542:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008546:	31 d2                	xor    edx,edx
c0008548:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000854d:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0008551:	13 54 24 3c          	adc    edx,DWORD PTR [esp+0x3c]
c0008555:	31 db                	xor    ebx,ebx
c0008557:	01 c1                	add    ecx,eax
c0008559:	11 d3                	adc    ebx,edx
c000855b:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000855f:	8d 7c 11 ff          	lea    edi,[ecx+edx*1-0x1]
c0008563:	f7 da                	neg    edx
c0008565:	21 d7                	and    edi,edx
c0008567:	29 cf                	sub    edi,ecx
c0008569:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000856e:	0f 85 2a 01 00 00    	jne    c000869e <f_mkfs+0xd1d>
c0008574:	31 d2                	xor    edx,edx
c0008576:	01 7c 24 40          	add    DWORD PTR [esp+0x40],edi
c000857a:	01 7c 24 38          	add    DWORD PTR [esp+0x38],edi
c000857e:	11 54 24 3c          	adc    DWORD PTR [esp+0x3c],edx
c0008582:	31 d2                	xor    edx,edx
c0008584:	89 f0                	mov    eax,esi
c0008586:	c1 e0 04             	shl    eax,0x4
c0008589:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c000858d:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0008591:	01 c1                	add    ecx,eax
c0008593:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008597:	11 d3                	adc    ebx,edx
c0008599:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000859d:	19 d8                	sbb    eax,ebx
c000859f:	0f 82 4e 01 00 00    	jb     c00086f3 <f_mkfs+0xd72>
c00085a5:	31 d2                	xor    edx,edx
c00085a7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085ab:	89 c8                	mov    eax,ecx
c00085ad:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c00085b1:	2b 44 24 40          	sub    eax,DWORD PTR [esp+0x40]
c00085b5:	89 c7                	mov    edi,eax
c00085b7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00085bb:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c00085c0:	29 c7                	sub    edi,eax
c00085c2:	89 f8                	mov    eax,edi
c00085c4:	f7 f6                	div    esi
c00085c6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00085cb:	89 c7                	mov    edi,eax
c00085cd:	0f 85 b7 fe ff ff    	jne    c000848a <f_mkfs+0xb09>
c00085d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00085d8:	0f 87 24 01 00 00    	ja     c0008702 <f_mkfs+0xd81>
c00085de:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00085e3:	0f 85 0a 01 00 00    	jne    c00086f3 <f_mkfs+0xd72>
c00085e9:	83 fe 01             	cmp    esi,0x1
c00085ec:	0f 86 01 01 00 00    	jbe    c00086f3 <f_mkfs+0xd72>
c00085f2:	d1 ee                	shr    esi,1
c00085f4:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00085f8:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00085fc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008600:	85 db                	test   ebx,ebx
c0008602:	75 2d                	jne    c0008631 <f_mkfs+0xcb0>
c0008604:	89 cb                	mov    ebx,ecx
c0008606:	ba 64 95 02 c0       	mov    edx,0xc0029564
c000860b:	c1 eb 11             	shr    ebx,0x11
c000860e:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0008616:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0008619:	66 85 c0             	test   ax,ax
c000861c:	74 11                	je     c000862f <f_mkfs+0xcae>
c000861e:	83 c2 02             	add    edx,0x2
c0008621:	39 d8                	cmp    eax,ebx
c0008623:	77 0a                	ja     c000862f <f_mkfs+0xcae>
c0008625:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0008629:	01 74 24 04          	add    DWORD PTR [esp+0x4],esi
c000862d:	eb e7                	jmp    c0008616 <f_mkfs+0xc95>
c000862f:	31 db                	xor    ebx,ebx
c0008631:	31 d2                	xor    edx,edx
c0008633:	89 c8                	mov    eax,ecx
c0008635:	f7 74 24 04          	div    DWORD PTR [esp+0x4]
c0008639:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0008640:	2d f6 ff 00 00       	sub    eax,0xfff6
c0008645:	c1 ea 09             	shr    edx,0x9
c0008648:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c000864d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0008651:	0f 87 9c 00 00 00    	ja     c00086f3 <f_mkfs+0xd72>
c0008657:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000865b:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0008663:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0008667:	c7 44 24 40 20 00 00 00 	mov    DWORD PTR [esp+0x40],0x20
c000866f:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0008674:	e9 a6 fe ff ff       	jmp    c000851f <f_mkfs+0xb9e>
c0008679:	83 c2 02             	add    edx,0x2
c000867c:	39 c8                	cmp    eax,ecx
c000867e:	0f 87 5c fe ff ff    	ja     c00084e0 <f_mkfs+0xb5f>
c0008684:	01 f6                	add    esi,esi
c0008686:	e9 49 fe ff ff       	jmp    c00084d4 <f_mkfs+0xb53>
c000868b:	8d 04 40             	lea    eax,[eax+eax*2]
c000868e:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008693:	40                   	inc    eax
c0008694:	d1 e8                	shr    eax,1
c0008696:	83 c0 03             	add    eax,0x3
c0008699:	e9 5f fe ff ff       	jmp    c00084fd <f_mkfs+0xb7c>
c000869e:	31 d2                	xor    edx,edx
c00086a0:	89 f8                	mov    eax,edi
c00086a2:	f7 74 24 48          	div    DWORD PTR [esp+0x48]
c00086a6:	85 d2                	test   edx,edx
c00086a8:	74 0f                	je     c00086b9 <f_mkfs+0xd38>
c00086aa:	4f                   	dec    edi
c00086ab:	ff 44 24 40          	inc    DWORD PTR [esp+0x40]
c00086af:	83 44 24 38 01       	add    DWORD PTR [esp+0x38],0x1
c00086b4:	83 54 24 3c 00       	adc    DWORD PTR [esp+0x3c],0x0
c00086b9:	89 f8                	mov    eax,edi
c00086bb:	31 d2                	xor    edx,edx
c00086bd:	f7 74 24 48          	div    DWORD PTR [esp+0x48]
c00086c1:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00086c5:	e9 b8 fe ff ff       	jmp    c0008582 <f_mkfs+0xc01>
c00086ca:	3d f5 0f 00 00       	cmp    eax,0xff5
c00086cf:	77 31                	ja     c0008702 <f_mkfs+0xd81>
c00086d1:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00086d6:	75 1b                	jne    c00086f3 <f_mkfs+0xd72>
c00086d8:	8d 04 36             	lea    eax,[esi+esi*1]
c00086db:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00086df:	3d 80 00 00 00       	cmp    eax,0x80
c00086e4:	0f 86 d1 fd ff ff    	jbe    c00084bb <f_mkfs+0xb3a>
c00086ea:	eb 07                	jmp    c00086f3 <f_mkfs+0xd72>
c00086ec:	3d f5 0f 00 00       	cmp    eax,0xff5
c00086f1:	76 0a                	jbe    c00086fd <f_mkfs+0xd7c>
c00086f3:	bb 0e 00 00 00       	mov    ebx,0xe
c00086f8:	e9 51 04 00 00       	jmp    c0008b4e <f_mkfs+0x11cd>
c00086fd:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008702:	50                   	push   eax
c0008703:	68 00 02 00 00       	push   0x200
c0008708:	6a 00                	push   0x0
c000870a:	55                   	push   ebp
c000870b:	e8 c6 94 ff ff       	call   c0001bd6 <mem_set>
c0008710:	83 c4 0c             	add    esp,0xc
c0008713:	6a 0b                	push   0xb
c0008715:	68 a4 95 02 c0       	push   0xc00295a4
c000871a:	55                   	push   ebp
c000871b:	e8 9a 94 ff ff       	call   c0001bba <mem_cpy>
c0008720:	58                   	pop    eax
c0008721:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008724:	5a                   	pop    edx
c0008725:	68 00 02 00 00       	push   0x200
c000872a:	50                   	push   eax
c000872b:	e8 61 94 ff ff       	call   c0001b91 <st_word>
c0008730:	89 f0                	mov    eax,esi
c0008732:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008735:	59                   	pop    ecx
c0008736:	5b                   	pop    ebx
c0008737:	0f b7 44 24 48       	movzx  eax,WORD PTR [esp+0x48]
c000873c:	50                   	push   eax
c000873d:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008740:	50                   	push   eax
c0008741:	e8 4b 94 ff ff       	call   c0001b91 <st_word>
c0008746:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c000874a:	83 c4 10             	add    esp,0x10
c000874d:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008750:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008755:	75 08                	jne    c000875f <f_mkfs+0xdde>
c0008757:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000875f:	50                   	push   eax
c0008760:	50                   	push   eax
c0008761:	8d 45 11             	lea    eax,[ebp+0x11]
c0008764:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008768:	50                   	push   eax
c0008769:	e8 23 94 ff ff       	call   c0001b91 <st_word>
c000876e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0008775:	ba ff ff 00 00       	mov    edx,0xffff
c000877a:	83 c4 10             	add    esp,0x10
c000877d:	39 c2                	cmp    edx,eax
c000877f:	ba 00 00 00 00       	mov    edx,0x0
c0008784:	1b 54 24 7c          	sbb    edx,DWORD PTR [esp+0x7c]
c0008788:	72 0e                	jb     c0008798 <f_mkfs+0xe17>
c000878a:	53                   	push   ebx
c000878b:	53                   	push   ebx
c000878c:	50                   	push   eax
c000878d:	8d 45 13             	lea    eax,[ebp+0x13]
c0008790:	50                   	push   eax
c0008791:	e8 fb 93 ff ff       	call   c0001b91 <st_word>
c0008796:	eb 0c                	jmp    c00087a4 <f_mkfs+0xe23>
c0008798:	51                   	push   ecx
c0008799:	51                   	push   ecx
c000879a:	50                   	push   eax
c000879b:	8d 45 20             	lea    eax,[ebp+0x20]
c000879e:	50                   	push   eax
c000879f:	e8 f9 93 ff ff       	call   c0001b9d <st_dword>
c00087a4:	83 c4 10             	add    esp,0x10
c00087a7:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00087ab:	8d 45 18             	lea    eax,[ebp+0x18]
c00087ae:	51                   	push   ecx
c00087af:	51                   	push   ecx
c00087b0:	6a 3f                	push   0x3f
c00087b2:	50                   	push   eax
c00087b3:	e8 d9 93 ff ff       	call   c0001b91 <st_word>
c00087b8:	5b                   	pop    ebx
c00087b9:	58                   	pop    eax
c00087ba:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00087bd:	68 ff 00 00 00       	push   0xff
c00087c2:	50                   	push   eax
c00087c3:	e8 c9 93 ff ff       	call   c0001b91 <st_word>
c00087c8:	58                   	pop    eax
c00087c9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00087cc:	5a                   	pop    edx
c00087cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00087d1:	50                   	push   eax
c00087d2:	e8 c6 93 ff ff       	call   c0001b9d <st_dword>
c00087d7:	83 c4 10             	add    esp,0x10
c00087da:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00087df:	75 5d                	jne    c000883e <f_mkfs+0xebd>
c00087e1:	8d 45 43             	lea    eax,[ebp+0x43]
c00087e4:	51                   	push   ecx
c00087e5:	51                   	push   ecx
c00087e6:	68 00 00 21 50       	push   0x50210000
c00087eb:	50                   	push   eax
c00087ec:	e8 ac 93 ff ff       	call   c0001b9d <st_dword>
c00087f1:	5b                   	pop    ebx
c00087f2:	58                   	pop    eax
c00087f3:	8d 45 24             	lea    eax,[ebp+0x24]
c00087f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00087fa:	50                   	push   eax
c00087fb:	e8 9d 93 ff ff       	call   c0001b9d <st_dword>
c0008800:	58                   	pop    eax
c0008801:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008804:	5a                   	pop    edx
c0008805:	6a 02                	push   0x2
c0008807:	50                   	push   eax
c0008808:	e8 90 93 ff ff       	call   c0001b9d <st_dword>
c000880d:	59                   	pop    ecx
c000880e:	8d 45 30             	lea    eax,[ebp+0x30]
c0008811:	5b                   	pop    ebx
c0008812:	6a 01                	push   0x1
c0008814:	50                   	push   eax
c0008815:	e8 77 93 ff ff       	call   c0001b91 <st_word>
c000881a:	58                   	pop    eax
c000881b:	8d 45 32             	lea    eax,[ebp+0x32]
c000881e:	5a                   	pop    edx
c000881f:	6a 06                	push   0x6
c0008821:	50                   	push   eax
c0008822:	e8 6a 93 ff ff       	call   c0001b91 <st_word>
c0008827:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c000882b:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000882f:	83 c4 0c             	add    esp,0xc
c0008832:	8d 45 47             	lea    eax,[ebp+0x47]
c0008835:	6a 13                	push   0x13
c0008837:	68 b0 95 02 c0       	push   0xc00295b0
c000883c:	eb 36                	jmp    c0008874 <f_mkfs+0xef3>
c000883e:	8d 45 27             	lea    eax,[ebp+0x27]
c0008841:	53                   	push   ebx
c0008842:	53                   	push   ebx
c0008843:	68 00 00 21 50       	push   0x50210000
c0008848:	50                   	push   eax
c0008849:	e8 4f 93 ff ff       	call   c0001b9d <st_dword>
c000884e:	58                   	pop    eax
c000884f:	5a                   	pop    edx
c0008850:	0f b7 44 24 3c       	movzx  eax,WORD PTR [esp+0x3c]
c0008855:	50                   	push   eax
c0008856:	8d 45 16             	lea    eax,[ebp+0x16]
c0008859:	50                   	push   eax
c000885a:	e8 32 93 ff ff       	call   c0001b91 <st_word>
c000885f:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008863:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008867:	83 c4 0c             	add    esp,0xc
c000886a:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000886d:	6a 13                	push   0x13
c000886f:	68 c4 95 02 c0       	push   0xc00295c4
c0008874:	50                   	push   eax
c0008875:	8d 9d fe 01 00 00    	lea    ebx,[ebp+0x1fe]
c000887b:	e8 3a 93 ff ff       	call   c0001bba <mem_cpy>
c0008880:	83 c4 10             	add    esp,0x10
c0008883:	51                   	push   ecx
c0008884:	51                   	push   ecx
c0008885:	68 55 aa 00 00       	push   0xaa55
c000888a:	53                   	push   ebx
c000888b:	e8 01 93 ff ff       	call   c0001b91 <st_word>
c0008890:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008897:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000889b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000889f:	55                   	push   ebp
c00088a0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00088a4:	e8 37 92 ff ff       	call   c0001ae0 <disk_write>
c00088a9:	83 c4 20             	add    esp,0x20
c00088ac:	85 c0                	test   eax,eax
c00088ae:	0f 85 7d 02 00 00    	jne    c0008b31 <f_mkfs+0x11b0>
c00088b4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00088b9:	0f 85 bf 00 00 00    	jne    c000897e <f_mkfs+0xffd>
c00088bf:	83 ec 0c             	sub    esp,0xc
c00088c2:	6a 01                	push   0x1
c00088c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00088c8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00088cc:	83 c0 06             	add    eax,0x6
c00088cf:	83 d2 00             	adc    edx,0x0
c00088d2:	4f                   	dec    edi
c00088d3:	52                   	push   edx
c00088d4:	50                   	push   eax
c00088d5:	55                   	push   ebp
c00088d6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00088da:	e8 01 92 ff ff       	call   c0001ae0 <disk_write>
c00088df:	83 c4 1c             	add    esp,0x1c
c00088e2:	68 00 02 00 00       	push   0x200
c00088e7:	6a 00                	push   0x0
c00088e9:	55                   	push   ebp
c00088ea:	e8 e7 92 ff ff       	call   c0001bd6 <mem_set>
c00088ef:	58                   	pop    eax
c00088f0:	5a                   	pop    edx
c00088f1:	68 52 52 61 41       	push   0x41615252
c00088f6:	55                   	push   ebp
c00088f7:	e8 a1 92 ff ff       	call   c0001b9d <st_dword>
c00088fc:	59                   	pop    ecx
c00088fd:	58                   	pop    eax
c00088fe:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008904:	68 72 72 41 61       	push   0x61417272
c0008909:	50                   	push   eax
c000890a:	e8 8e 92 ff ff       	call   c0001b9d <st_dword>
c000890f:	58                   	pop    eax
c0008910:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008916:	5a                   	pop    edx
c0008917:	57                   	push   edi
c0008918:	50                   	push   eax
c0008919:	e8 7f 92 ff ff       	call   c0001b9d <st_dword>
c000891e:	59                   	pop    ecx
c000891f:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008925:	5f                   	pop    edi
c0008926:	6a 02                	push   0x2
c0008928:	50                   	push   eax
c0008929:	e8 6f 92 ff ff       	call   c0001b9d <st_dword>
c000892e:	58                   	pop    eax
c000892f:	5a                   	pop    edx
c0008930:	68 55 aa 00 00       	push   0xaa55
c0008935:	53                   	push   ebx
c0008936:	e8 56 92 ff ff       	call   c0001b91 <st_word>
c000893b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000893f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008943:	83 c0 07             	add    eax,0x7
c0008946:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000894d:	83 d2 00             	adc    edx,0x0
c0008950:	52                   	push   edx
c0008951:	50                   	push   eax
c0008952:	55                   	push   ebp
c0008953:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0008957:	e8 84 91 ff ff       	call   c0001ae0 <disk_write>
c000895c:	83 c4 14             	add    esp,0x14
c000895f:	6a 01                	push   0x1
c0008961:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008965:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008969:	83 c0 01             	add    eax,0x1
c000896c:	83 d2 00             	adc    edx,0x0
c000896f:	52                   	push   edx
c0008970:	50                   	push   eax
c0008971:	55                   	push   ebp
c0008972:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0008976:	e8 65 91 ff ff       	call   c0001ae0 <disk_write>
c000897b:	83 c4 20             	add    esp,0x20
c000897e:	31 db                	xor    ebx,ebx
c0008980:	50                   	push   eax
c0008981:	8b 84 24 c0 00 00 00 	mov    eax,DWORD PTR [esp+0xc0]
c0008988:	25 00 fe ff ff       	and    eax,0xfffffe00
c000898d:	50                   	push   eax
c000898e:	6a 00                	push   0x0
c0008990:	55                   	push   ebp
c0008991:	e8 40 92 ff ff       	call   c0001bd6 <mem_set>
c0008996:	83 c4 10             	add    esp,0x10
c0008999:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000899e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00089a6:	0f 94 c3             	sete   bl
c00089a9:	4b                   	dec    ebx
c00089aa:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00089b0:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00089b6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00089bb:	75 24                	jne    c00089e1 <f_mkfs+0x1060>
c00089bd:	57                   	push   edi
c00089be:	57                   	push   edi
c00089bf:	6a f8                	push   0xfffffff8
c00089c1:	55                   	push   ebp
c00089c2:	e8 d6 91 ff ff       	call   c0001b9d <st_dword>
c00089c7:	58                   	pop    eax
c00089c8:	8d 45 04             	lea    eax,[ebp+0x4]
c00089cb:	5a                   	pop    edx
c00089cc:	6a ff                	push   0xffffffff
c00089ce:	50                   	push   eax
c00089cf:	e8 c9 91 ff ff       	call   c0001b9d <st_dword>
c00089d4:	59                   	pop    ecx
c00089d5:	8d 45 08             	lea    eax,[ebp+0x8]
c00089d8:	5f                   	pop    edi
c00089d9:	68 ff ff ff 0f       	push   0xfffffff
c00089de:	50                   	push   eax
c00089df:	eb 04                	jmp    c00089e5 <f_mkfs+0x1064>
c00089e1:	51                   	push   ecx
c00089e2:	51                   	push   ecx
c00089e3:	53                   	push   ebx
c00089e4:	55                   	push   ebp
c00089e5:	e8 b3 91 ff ff       	call   c0001b9d <st_dword>
c00089ea:	83 c4 10             	add    esp,0x10
c00089ed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00089f1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00089f5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00089f9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00089fd:	39 cf                	cmp    edi,ecx
c00089ff:	76 02                	jbe    c0008a03 <f_mkfs+0x1082>
c0008a01:	89 cf                	mov    edi,ecx
c0008a03:	83 ec 0c             	sub    esp,0xc
c0008a06:	57                   	push   edi
c0008a07:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0008a0b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0008a0f:	55                   	push   ebp
c0008a10:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0008a14:	e8 c7 90 ff ff       	call   c0001ae0 <disk_write>
c0008a19:	83 c4 20             	add    esp,0x20
c0008a1c:	85 c0                	test   eax,eax
c0008a1e:	0f 85 0d 01 00 00    	jne    c0008b31 <f_mkfs+0x11b0>
c0008a24:	52                   	push   edx
c0008a25:	68 00 02 00 00       	push   0x200
c0008a2a:	6a 00                	push   0x0
c0008a2c:	55                   	push   ebp
c0008a2d:	e8 a4 91 ff ff       	call   c0001bd6 <mem_set>
c0008a32:	31 d2                	xor    edx,edx
c0008a34:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0008a38:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0008a3c:	83 c4 10             	add    esp,0x10
c0008a3f:	29 7c 24 04          	sub    DWORD PTR [esp+0x4],edi
c0008a43:	75 b0                	jne    c00089f5 <f_mkfs+0x1074>
c0008a45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008a49:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0008a51:	40                   	inc    eax
c0008a52:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0008a56:	0f 87 5a ff ff ff    	ja     c00089b6 <f_mkfs+0x1035>
c0008a5c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008a61:	74 04                	je     c0008a67 <f_mkfs+0x10e6>
c0008a63:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0008a67:	89 f3                	mov    ebx,esi
c0008a69:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0008a6d:	76 04                	jbe    c0008a73 <f_mkfs+0x10f2>
c0008a6f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a73:	83 ec 0c             	sub    esp,0xc
c0008a76:	53                   	push   ebx
c0008a77:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0008a7b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0008a7f:	55                   	push   ebp
c0008a80:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0008a84:	e8 57 90 ff ff       	call   c0001ae0 <disk_write>
c0008a89:	83 c4 20             	add    esp,0x20
c0008a8c:	85 c0                	test   eax,eax
c0008a8e:	0f 85 9d 00 00 00    	jne    c0008b31 <f_mkfs+0x11b0>
c0008a94:	31 d2                	xor    edx,edx
c0008a96:	01 5c 24 38          	add    DWORD PTR [esp+0x38],ebx
c0008a9a:	11 54 24 3c          	adc    DWORD PTR [esp+0x3c],edx
c0008a9e:	29 de                	sub    esi,ebx
c0008aa0:	75 c5                	jne    c0008a67 <f_mkfs+0x10e6>
c0008aa2:	b1 0c                	mov    cl,0xc
c0008aa4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008aa9:	74 1d                	je     c0008ac8 <f_mkfs+0x1147>
c0008aab:	b8 ff ff 00 00       	mov    eax,0xffff
c0008ab0:	b1 06                	mov    cl,0x6
c0008ab2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008ab6:	1b 74 24 7c          	sbb    esi,DWORD PTR [esp+0x7c]
c0008aba:	72 0c                	jb     c0008ac8 <f_mkfs+0x1147>
c0008abc:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008ac1:	0f 94 c1             	sete   cl
c0008ac4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0008ac8:	f6 44 24 53 08       	test   BYTE PTR [esp+0x53],0x8
c0008acd:	75 4b                	jne    c0008b1a <f_mkfs+0x1199>
c0008acf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008ad3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008ad7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008ade:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008ae5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008af0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008afb:	0f b6 c9             	movzx  ecx,cl
c0008afe:	55                   	push   ebp
c0008aff:	51                   	push   ecx
c0008b00:	8d 84 24 88 00 00 00 	lea    eax,[esp+0x88]
c0008b07:	50                   	push   eax
c0008b08:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008b0c:	e8 3f e8 ff ff       	call   c0007350 <create_partition>
c0008b11:	83 c4 10             	add    esp,0x10
c0008b14:	89 c3                	mov    ebx,eax
c0008b16:	85 c0                	test   eax,eax
c0008b18:	75 34                	jne    c0008b4e <f_mkfs+0x11cd>
c0008b1a:	31 db                	xor    ebx,ebx
c0008b1c:	50                   	push   eax
c0008b1d:	6a 00                	push   0x0
c0008b1f:	6a 00                	push   0x0
c0008b21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008b25:	e8 cc 8f ff ff       	call   c0001af6 <disk_ioctl>
c0008b2a:	83 c4 10             	add    esp,0x10
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 1d                	je     c0008b4e <f_mkfs+0x11cd>
c0008b31:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008b39:	75 0c                	jne    c0008b47 <f_mkfs+0x11c6>
c0008b3b:	83 ec 0c             	sub    esp,0xc
c0008b3e:	55                   	push   ebp
c0008b3f:	e8 75 00 00 00       	call   c0008bb9 <ff_memfree>
c0008b44:	83 c4 10             	add    esp,0x10
c0008b47:	bb 01 00 00 00       	mov    ebx,0x1
c0008b4c:	eb 48                	jmp    c0008b96 <f_mkfs+0x1215>
c0008b4e:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008b56:	75 3e                	jne    c0008b96 <f_mkfs+0x1215>
c0008b58:	83 ec 0c             	sub    esp,0xc
c0008b5b:	55                   	push   ebp
c0008b5c:	e8 58 00 00 00       	call   c0008bb9 <ff_memfree>
c0008b61:	83 c4 10             	add    esp,0x10
c0008b64:	eb 30                	jmp    c0008b96 <f_mkfs+0x1215>
c0008b66:	80 7c 24 5c 00       	cmp    BYTE PTR [esp+0x5c],0x0
c0008b6b:	0f 85 93 fa ff ff    	jne    c0008604 <f_mkfs+0xc83>
c0008b71:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0008b75:	81 fe 80 00 00 00    	cmp    esi,0x80
c0008b7b:	0f 86 5f f9 ff ff    	jbe    c00084e0 <f_mkfs+0xb5f>
c0008b81:	e9 6d fb ff ff       	jmp    c00086f3 <f_mkfs+0xd72>
c0008b86:	80 7c 24 5c 00       	cmp    BYTE PTR [esp+0x5c],0x0
c0008b8b:	0f 85 67 fa ff ff    	jne    c00085f8 <f_mkfs+0xc77>
c0008b91:	e9 5d fb ff ff       	jmp    c00086f3 <f_mkfs+0xd72>
c0008b96:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008b9c:	89 d8                	mov    eax,ebx
c0008b9e:	5b                   	pop    ebx
c0008b9f:	5e                   	pop    esi
c0008ba0:	5f                   	pop    edi
c0008ba1:	5d                   	pop    ebp
c0008ba2:	c3                   	ret    

c0008ba3 <ff_memalloc>:
c0008ba3:	83 ec 0c             	sub    esp,0xc
c0008ba6:	83 ec 0c             	sub    esp,0xc
c0008ba9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008bad:	e8 aa 73 00 00       	call   c000ff5c <malloc>
c0008bb2:	83 c4 10             	add    esp,0x10
c0008bb5:	83 c4 0c             	add    esp,0xc
c0008bb8:	c3                   	ret    

c0008bb9 <ff_memfree>:
c0008bb9:	83 ec 0c             	sub    esp,0xc
c0008bbc:	83 ec 0c             	sub    esp,0xc
c0008bbf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008bc3:	e8 a4 73 00 00       	call   c000ff6c <free>
c0008bc8:	83 c4 10             	add    esp,0x10
c0008bcb:	90                   	nop
c0008bcc:	83 c4 0c             	add    esp,0xc
c0008bcf:	c3                   	ret    

c0008bd0 <ff_uni2oem>:
c0008bd0:	83 ec 14             	sub    esp,0x14
c0008bd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bd7:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008bdb:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008be2:	c7 44 24 0c e0 95 02 c0 	mov    DWORD PTR [esp+0xc],0xc00295e0
c0008bea:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008bef:	77 0b                	ja     c0008bfc <ff_uni2oem+0x2c>
c0008bf1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008bf5:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008bfa:	eb 5b                	jmp    c0008c57 <ff_uni2oem+0x87>
c0008bfc:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008c04:	77 51                	ja     c0008c57 <ff_uni2oem+0x87>
c0008c06:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008c0c:	75 49                	jne    c0008c57 <ff_uni2oem+0x87>
c0008c0e:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008c15:	eb 0b                	jmp    c0008c22 <ff_uni2oem+0x52>
c0008c17:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008c1c:	40                   	inc    eax
c0008c1d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008c22:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008c28:	77 1b                	ja     c0008c45 <ff_uni2oem+0x75>
c0008c2a:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008c2f:	01 c0                	add    eax,eax
c0008c31:	89 c2                	mov    edx,eax
c0008c33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c37:	01 d0                	add    eax,edx
c0008c39:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008c3c:	0f b7 c0             	movzx  eax,ax
c0008c3f:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008c43:	75 d2                	jne    c0008c17 <ff_uni2oem+0x47>
c0008c45:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008c4a:	83 e8 80             	sub    eax,0xffffff80
c0008c4d:	25 ff 00 00 00       	and    eax,0xff
c0008c52:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008c57:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008c5c:	83 c4 14             	add    esp,0x14
c0008c5f:	c3                   	ret    

c0008c60 <ff_oem2uni>:
c0008c60:	83 ec 18             	sub    esp,0x18
c0008c63:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008c67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c6b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008c70:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008c74:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008c7b:	c7 44 24 10 e0 95 02 c0 	mov    DWORD PTR [esp+0x10],0xc00295e0
c0008c83:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008c89:	77 0b                	ja     c0008c96 <ff_oem2uni+0x36>
c0008c8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008c8f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008c94:	eb 2d                	jmp    c0008cc3 <ff_oem2uni+0x63>
c0008c96:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008c9c:	75 25                	jne    c0008cc3 <ff_oem2uni+0x63>
c0008c9e:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008ca5:	77 1c                	ja     c0008cc3 <ff_oem2uni+0x63>
c0008ca7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008cac:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008cb1:	01 c0                	add    eax,eax
c0008cb3:	89 c2                	mov    edx,eax
c0008cb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb9:	01 d0                	add    eax,edx
c0008cbb:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008cbe:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008cc3:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008cc8:	83 c4 18             	add    esp,0x18
c0008ccb:	c3                   	ret    

c0008ccc <ff_wtoupper>:
c0008ccc:	83 ec 10             	sub    esp,0x10
c0008ccf:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008cd7:	0f 87 3e 01 00 00    	ja     c0008e1b <ff_wtoupper+0x14f>
c0008cdd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008ce1:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008ce6:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008ced:	77 07                	ja     c0008cf6 <ff_wtoupper+0x2a>
c0008cef:	b8 20 97 02 c0       	mov    eax,0xc0029720
c0008cf4:	eb 05                	jmp    c0008cfb <ff_wtoupper+0x2f>
c0008cf6:	b8 20 99 02 c0       	mov    eax,0xc0029920
c0008cfb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008cff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d03:	8d 50 02             	lea    edx,[eax+0x2]
c0008d06:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d0a:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008d0d:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008d12:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008d18:	0f 84 f4 00 00 00    	je     c0008e12 <ff_wtoupper+0x146>
c0008d1e:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008d23:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008d28:	0f 82 e4 00 00 00    	jb     c0008e12 <ff_wtoupper+0x146>
c0008d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d32:	8d 50 02             	lea    edx,[eax+0x2]
c0008d35:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d39:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008d3c:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008d41:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008d46:	66 c1 e8 08          	shr    ax,0x8
c0008d4a:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008d4f:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008d56:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008d5b:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008d60:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008d65:	01 ca                	add    edx,ecx
c0008d67:	39 d0                	cmp    eax,edx
c0008d69:	0f 8d 86 00 00 00    	jge    c0008df5 <ff_wtoupper+0x129>
c0008d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008d74:	83 f8 08             	cmp    eax,0x8
c0008d77:	0f 87 94 00 00 00    	ja     c0008e11 <ff_wtoupper+0x145>
c0008d7d:	8b 04 85 e0 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6920]
c0008d84:	ff e0                	jmp    eax
c0008d86:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008d8b:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008d90:	29 c2                	sub    edx,eax
c0008d92:	89 d0                	mov    eax,edx
c0008d94:	01 c0                	add    eax,eax
c0008d96:	89 c2                	mov    edx,eax
c0008d98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9c:	01 d0                	add    eax,edx
c0008d9e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008da1:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008da6:	eb 4b                	jmp    c0008df3 <ff_wtoupper+0x127>
c0008da8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008dad:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008db1:	83 e0 01             	and    eax,0x1
c0008db4:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008db9:	eb 38                	jmp    c0008df3 <ff_wtoupper+0x127>
c0008dbb:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008dc1:	eb 30                	jmp    c0008df3 <ff_wtoupper+0x127>
c0008dc3:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008dc9:	eb 28                	jmp    c0008df3 <ff_wtoupper+0x127>
c0008dcb:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008dd1:	eb 20                	jmp    c0008df3 <ff_wtoupper+0x127>
c0008dd3:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008dd9:	eb 18                	jmp    c0008df3 <ff_wtoupper+0x127>
c0008ddb:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008de1:	eb 10                	jmp    c0008df3 <ff_wtoupper+0x127>
c0008de3:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008de9:	eb 08                	jmp    c0008df3 <ff_wtoupper+0x127>
c0008deb:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008df2:	90                   	nop
c0008df3:	eb 1c                	jmp    c0008e11 <ff_wtoupper+0x145>
c0008df5:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008dfb:	0f 85 fe fe ff ff    	jne    c0008cff <ff_wtoupper+0x33>
c0008e01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008e06:	01 c0                	add    eax,eax
c0008e08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0008e0c:	e9 ee fe ff ff       	jmp    c0008cff <ff_wtoupper+0x33>
c0008e11:	90                   	nop
c0008e12:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008e17:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008e1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	c3                   	ret    

c0008e23 <src_new>:
c0008e23:	57                   	push   edi
c0008e24:	56                   	push   esi
c0008e25:	53                   	push   ebx
c0008e26:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008e2a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008e2e:	85 f6                	test   esi,esi
c0008e30:	74 79                	je     c0008eab <src_new+0x88>
c0008e32:	85 ff                	test   edi,edi
c0008e34:	7f 08                	jg     c0008e3e <src_new+0x1b>
c0008e36:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008e3c:	eb 1e                	jmp    c0008e5c <src_new+0x39>
c0008e3e:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008e44:	52                   	push   edx
c0008e45:	52                   	push   edx
c0008e46:	6a 3c                	push   0x3c
c0008e48:	6a 01                	push   0x1
c0008e4a:	e8 3d 71 00 00       	call   c000ff8c <calloc>
c0008e4f:	83 c4 10             	add    esp,0x10
c0008e52:	89 c3                	mov    ebx,eax
c0008e54:	85 c0                	test   eax,eax
c0008e56:	75 10                	jne    c0008e68 <src_new+0x45>
c0008e58:	85 f6                	test   esi,esi
c0008e5a:	75 04                	jne    c0008e60 <src_new+0x3d>
c0008e5c:	31 db                	xor    ebx,ebx
c0008e5e:	eb 51                	jmp    c0008eb1 <src_new+0x8e>
c0008e60:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008e66:	eb 49                	jmp    c0008eb1 <src_new+0x8e>
c0008e68:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008e6b:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008e72:	50                   	push   eax
c0008e73:	50                   	push   eax
c0008e74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008e78:	53                   	push   ebx
c0008e79:	e8 62 08 00 00       	call   c00096e0 <psrc_set_converter>
c0008e7e:	83 c4 10             	add    esp,0x10
c0008e81:	85 c0                	test   eax,eax
c0008e83:	74 18                	je     c0008e9d <src_new+0x7a>
c0008e85:	85 f6                	test   esi,esi
c0008e87:	74 06                	je     c0008e8f <src_new+0x6c>
c0008e89:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008e8f:	83 ec 0c             	sub    esp,0xc
c0008e92:	53                   	push   ebx
c0008e93:	31 db                	xor    ebx,ebx
c0008e95:	e8 d2 70 00 00       	call   c000ff6c <free>
c0008e9a:	83 c4 10             	add    esp,0x10
c0008e9d:	83 ec 0c             	sub    esp,0xc
c0008ea0:	53                   	push   ebx
c0008ea1:	e8 6e 04 00 00       	call   c0009314 <src_reset>
c0008ea6:	83 c4 10             	add    esp,0x10
c0008ea9:	eb 06                	jmp    c0008eb1 <src_new+0x8e>
c0008eab:	85 ff                	test   edi,edi
c0008ead:	7f 95                	jg     c0008e44 <src_new+0x21>
c0008eaf:	eb ab                	jmp    c0008e5c <src_new+0x39>
c0008eb1:	89 d8                	mov    eax,ebx
c0008eb3:	5b                   	pop    ebx
c0008eb4:	5e                   	pop    esi
c0008eb5:	5f                   	pop    edi
c0008eb6:	c3                   	ret    

c0008eb7 <src_callback_new>:
c0008eb7:	56                   	push   esi
c0008eb8:	53                   	push   ebx
c0008eb9:	53                   	push   ebx
c0008eba:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008ebe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008ec2:	85 f6                	test   esi,esi
c0008ec4:	75 0e                	jne    c0008ed4 <src_callback_new+0x1d>
c0008ec6:	31 db                	xor    ebx,ebx
c0008ec8:	85 c0                	test   eax,eax
c0008eca:	74 47                	je     c0008f13 <src_callback_new+0x5c>
c0008ecc:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008ed2:	eb 3f                	jmp    c0008f13 <src_callback_new+0x5c>
c0008ed4:	85 c0                	test   eax,eax
c0008ed6:	74 06                	je     c0008ede <src_callback_new+0x27>
c0008ed8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008ede:	51                   	push   ecx
c0008edf:	50                   	push   eax
c0008ee0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008ee4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008ee8:	e8 36 ff ff ff       	call   c0008e23 <src_new>
c0008eed:	83 c4 10             	add    esp,0x10
c0008ef0:	89 c3                	mov    ebx,eax
c0008ef2:	85 c0                	test   eax,eax
c0008ef4:	74 1d                	je     c0008f13 <src_callback_new+0x5c>
c0008ef6:	83 ec 0c             	sub    esp,0xc
c0008ef9:	50                   	push   eax
c0008efa:	e8 15 04 00 00       	call   c0009314 <src_reset>
c0008eff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008f03:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008f0a:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008f0d:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008f10:	83 c4 10             	add    esp,0x10
c0008f13:	89 d8                	mov    eax,ebx
c0008f15:	5a                   	pop    edx
c0008f16:	5b                   	pop    ebx
c0008f17:	5e                   	pop    esi
c0008f18:	c3                   	ret    

c0008f19 <src_delete>:
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 08             	sub    esp,0x8
c0008f1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008f21:	85 db                	test   ebx,ebx
c0008f23:	74 29                	je     c0008f4e <src_delete+0x35>
c0008f25:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008f28:	85 c0                	test   eax,eax
c0008f2a:	74 0c                	je     c0008f38 <src_delete+0x1f>
c0008f2c:	83 ec 0c             	sub    esp,0xc
c0008f2f:	50                   	push   eax
c0008f30:	e8 37 70 00 00       	call   c000ff6c <free>
c0008f35:	83 c4 10             	add    esp,0x10
c0008f38:	50                   	push   eax
c0008f39:	6a 3c                	push   0x3c
c0008f3b:	6a 00                	push   0x0
c0008f3d:	53                   	push   ebx
c0008f3e:	e8 81 77 ff ff       	call   c00006c4 <memset>
c0008f43:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008f46:	e8 21 70 00 00       	call   c000ff6c <free>
c0008f4b:	83 c4 10             	add    esp,0x10
c0008f4e:	31 c0                	xor    eax,eax
c0008f50:	83 c4 08             	add    esp,0x8
c0008f53:	5b                   	pop    ebx
c0008f54:	c3                   	ret    

c0008f55 <src_process>:
c0008f55:	55                   	push   ebp
c0008f56:	57                   	push   edi
c0008f57:	56                   	push   esi
c0008f58:	53                   	push   ebx
c0008f59:	83 ec 1c             	sub    esp,0x1c
c0008f5c:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008f60:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008f64:	85 ed                	test   ebp,ebp
c0008f66:	0f 84 6f 01 00 00    	je     c00090db <src_process+0x186>
c0008f6c:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008f70:	0f 84 6c 01 00 00    	je     c00090e2 <src_process+0x18d>
c0008f76:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0008f7a:	0f 84 62 01 00 00    	je     c00090e2 <src_process+0x18d>
c0008f80:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c0008f87:	0f 85 5c 01 00 00    	jne    c00090e9 <src_process+0x194>
c0008f8d:	85 db                	test   ebx,ebx
c0008f8f:	0f 84 5b 01 00 00    	je     c00090f0 <src_process+0x19b>
c0008f95:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008f97:	85 f6                	test   esi,esi
c0008f99:	0f 84 58 01 00 00    	je     c00090f7 <src_process+0x1a2>
c0008f9f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008fa2:	85 ff                	test   edi,edi
c0008fa4:	0f 84 4d 01 00 00    	je     c00090f7 <src_process+0x1a2>
c0008faa:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008fad:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0008fb0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fb4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fb8:	68 00 00 70 3f       	push   0x3f700000
c0008fbd:	6a 00                	push   0x0
c0008fbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fc7:	e8 e3 f5 01 00       	call   c00285af <__ltdf2>
c0008fcc:	83 c4 10             	add    esp,0x10
c0008fcf:	85 c0                	test   eax,eax
c0008fd1:	0f 88 27 01 00 00    	js     c00090fe <src_process+0x1a9>
c0008fd7:	68 00 00 70 40       	push   0x40700000
c0008fdc:	6a 00                	push   0x0
c0008fde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fe2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fe6:	e8 a6 f5 01 00       	call   c0028591 <__gtdf2>
c0008feb:	83 c4 10             	add    esp,0x10
c0008fee:	85 c0                	test   eax,eax
c0008ff0:	0f 8f 08 01 00 00    	jg     c00090fe <src_process+0x1a9>
c0008ff6:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008ffa:	79 07                	jns    c0009003 <src_process+0xae>
c0008ffc:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009003:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009006:	85 c0                	test   eax,eax
c0009008:	79 50                	jns    c000905a <src_process+0x105>
c000900a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009011:	39 fe                	cmp    esi,edi
c0009013:	72 37                	jb     c000904c <src_process+0xf7>
c0009015:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000901c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009023:	68 00 00 70 3f       	push   0x3f700000
c0009028:	6a 00                	push   0x0
c000902a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000902d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0009030:	e8 7a f5 01 00       	call   c00285af <__ltdf2>
c0009035:	83 c4 10             	add    esp,0x10
c0009038:	85 c0                	test   eax,eax
c000903a:	79 37                	jns    c0009073 <src_process+0x11e>
c000903c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009040:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009044:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0009047:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000904a:	eb 27                	jmp    c0009073 <src_process+0x11e>
c000904c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000904f:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0009053:	8d 04 86             	lea    eax,[esi+eax*4]
c0009056:	39 c7                	cmp    edi,eax
c0009058:	eb 0d                	jmp    c0009067 <src_process+0x112>
c000905a:	39 fe                	cmp    esi,edi
c000905c:	72 ee                	jb     c000904c <src_process+0xf7>
c000905e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0009062:	8d 04 87             	lea    eax,[edi+eax*4]
c0009065:	39 c6                	cmp    esi,eax
c0009067:	73 ac                	jae    c0009015 <src_process+0xc0>
c0009069:	b8 10 00 00 00       	mov    eax,0x10
c000906e:	e9 90 00 00 00       	jmp    c0009103 <src_process+0x1ae>
c0009073:	83 ec 10             	sub    esp,0x10
c0009076:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0009079:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000907c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000907f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0009082:	e8 2d ec 01 00       	call   c0027cb4 <__subdf3>
c0009087:	83 c4 18             	add    esp,0x18
c000908a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009092:	52                   	push   edx
c0009093:	50                   	push   eax
c0009094:	e8 a7 f6 01 00       	call   c0028740 <fabs>
c0009099:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000909d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00090a1:	83 c4 10             	add    esp,0x10
c00090a4:	68 af 03 d2 3c       	push   0x3cd203af
c00090a9:	68 16 56 e7 9e       	push   0x9ee75616
c00090ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	e8 f4 f4 01 00       	call   c00285af <__ltdf2>
c00090bb:	83 c4 10             	add    esp,0x10
c00090be:	85 c0                	test   eax,eax
c00090c0:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00090c4:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00090c8:	79 05                	jns    c00090cf <src_process+0x17a>
c00090ca:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00090cd:	eb 03                	jmp    c00090d2 <src_process+0x17d>
c00090cf:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00090d2:	83 c4 1c             	add    esp,0x1c
c00090d5:	5b                   	pop    ebx
c00090d6:	5e                   	pop    esi
c00090d7:	5f                   	pop    edi
c00090d8:	5d                   	pop    ebp
c00090d9:	ff e0                	jmp    eax
c00090db:	b8 02 00 00 00       	mov    eax,0x2
c00090e0:	eb 21                	jmp    c0009103 <src_process+0x1ae>
c00090e2:	b8 07 00 00 00       	mov    eax,0x7
c00090e7:	eb 1a                	jmp    c0009103 <src_process+0x1ae>
c00090e9:	b8 12 00 00 00       	mov    eax,0x12
c00090ee:	eb 13                	jmp    c0009103 <src_process+0x1ae>
c00090f0:	b8 03 00 00 00       	mov    eax,0x3
c00090f5:	eb 0c                	jmp    c0009103 <src_process+0x1ae>
c00090f7:	b8 04 00 00 00       	mov    eax,0x4
c00090fc:	eb 05                	jmp    c0009103 <src_process+0x1ae>
c00090fe:	b8 06 00 00 00       	mov    eax,0x6
c0009103:	83 c4 1c             	add    esp,0x1c
c0009106:	5b                   	pop    ebx
c0009107:	5e                   	pop    esi
c0009108:	5f                   	pop    edi
c0009109:	5d                   	pop    ebp
c000910a:	c3                   	ret    

c000910b <src_callback_read>:
c000910b:	55                   	push   ebp
c000910c:	57                   	push   edi
c000910d:	56                   	push   esi
c000910e:	53                   	push   ebx
c000910f:	83 ec 3c             	sub    esp,0x3c
c0009112:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0009116:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000911a:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000911e:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0009122:	85 ed                	test   ebp,ebp
c0009124:	0f 8e 52 01 00 00    	jle    c000927c <src_callback_read+0x171>
c000912a:	85 db                	test   ebx,ebx
c000912c:	0f 84 4a 01 00 00    	je     c000927c <src_callback_read+0x171>
c0009132:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0009139:	74 0c                	je     c0009147 <src_callback_read+0x3c>
c000913b:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0009142:	e9 35 01 00 00       	jmp    c000927c <src_callback_read+0x171>
c0009147:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000914b:	75 0c                	jne    c0009159 <src_callback_read+0x4e>
c000914d:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0009154:	e9 23 01 00 00       	jmp    c000927c <src_callback_read+0x171>
c0009159:	51                   	push   ecx
c000915a:	6a 24                	push   0x24
c000915c:	6a 00                	push   0x0
c000915e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0009162:	50                   	push   eax
c0009163:	e8 5c 75 ff ff       	call   c00006c4 <memset>
c0009168:	83 c4 10             	add    esp,0x10
c000916b:	68 00 00 70 3f       	push   0x3f700000
c0009170:	6a 00                	push   0x0
c0009172:	57                   	push   edi
c0009173:	56                   	push   esi
c0009174:	e8 36 f4 01 00       	call   c00285af <__ltdf2>
c0009179:	83 c4 10             	add    esp,0x10
c000917c:	85 c0                	test   eax,eax
c000917e:	78 3e                	js     c00091be <src_callback_read+0xb3>
c0009180:	68 00 00 70 40       	push   0x40700000
c0009185:	6a 00                	push   0x0
c0009187:	57                   	push   edi
c0009188:	56                   	push   esi
c0009189:	e8 03 f4 01 00       	call   c0028591 <__gtdf2>
c000918e:	83 c4 10             	add    esp,0x10
c0009191:	85 c0                	test   eax,eax
c0009193:	7f 29                	jg     c00091be <src_callback_read+0xb3>
c0009195:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0009199:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000919d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091a1:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00091a5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00091a8:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00091ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00091b0:	31 f6                	xor    esi,esi
c00091b2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00091b5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00091b9:	e9 97 00 00 00       	jmp    c0009255 <src_callback_read+0x14a>
c00091be:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00091c5:	e9 b2 00 00 00       	jmp    c000927c <src_callback_read+0x171>
c00091ca:	8d 44 24 04          	lea    eax,[esp+0x4]
c00091ce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091d2:	52                   	push   edx
c00091d3:	52                   	push   edx
c00091d4:	8d 44 24 10          	lea    eax,[esp+0x10]
c00091d8:	50                   	push   eax
c00091d9:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00091dc:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00091df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00091e3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00091e7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00091eb:	83 c4 10             	add    esp,0x10
c00091ee:	85 c0                	test   eax,eax
c00091f0:	75 08                	jne    c00091fa <src_callback_read+0xef>
c00091f2:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00091fa:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0009201:	50                   	push   eax
c0009202:	50                   	push   eax
c0009203:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009207:	50                   	push   eax
c0009208:	53                   	push   ebx
c0009209:	e8 47 fd ff ff       	call   c0008f55 <src_process>
c000920e:	83 c4 10             	add    esp,0x10
c0009211:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0009218:	85 c0                	test   eax,eax
c000921a:	75 49                	jne    c0009265 <src_callback_read+0x15a>
c000921c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0009220:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0009223:	89 f9                	mov    ecx,edi
c0009225:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0009229:	0f af ca             	imul   ecx,edx
c000922c:	c1 e1 02             	shl    ecx,0x2
c000922f:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0009233:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009237:	0f af d1             	imul   edx,ecx
c000923a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c000923e:	c1 e2 02             	shl    edx,0x2
c0009241:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0009245:	8d 14 31             	lea    edx,[ecx+esi*1]
c0009248:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000924d:	74 12                	je     c0009261 <src_callback_read+0x156>
c000924f:	39 d5                	cmp    ebp,edx
c0009251:	7e 14                	jle    c0009267 <src_callback_read+0x15c>
c0009253:	89 d6                	mov    esi,edx
c0009255:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000925a:	75 9e                	jne    c00091fa <src_callback_read+0xef>
c000925c:	e9 69 ff ff ff       	jmp    c00091ca <src_callback_read+0xbf>
c0009261:	85 c9                	test   ecx,ecx
c0009263:	75 ea                	jne    c000924f <src_callback_read+0x144>
c0009265:	89 f2                	mov    edx,esi
c0009267:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000926b:	85 c0                	test   eax,eax
c000926d:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0009270:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009274:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0009277:	74 05                	je     c000927e <src_callback_read+0x173>
c0009279:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000927c:	31 d2                	xor    edx,edx
c000927e:	83 c4 3c             	add    esp,0x3c
c0009281:	89 d0                	mov    eax,edx
c0009283:	5b                   	pop    ebx
c0009284:	5e                   	pop    esi
c0009285:	5f                   	pop    edi
c0009286:	5d                   	pop    ebp
c0009287:	c3                   	ret    

c0009288 <src_set_ratio>:
c0009288:	57                   	push   edi
c0009289:	ba 02 00 00 00       	mov    edx,0x2
c000928e:	56                   	push   esi
c000928f:	53                   	push   ebx
c0009290:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009294:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009298:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000929c:	85 db                	test   ebx,ebx
c000929e:	74 4c                	je     c00092ec <src_set_ratio+0x64>
c00092a0:	ba 07 00 00 00       	mov    edx,0x7
c00092a5:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00092a9:	74 41                	je     c00092ec <src_set_ratio+0x64>
c00092ab:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00092af:	74 3b                	je     c00092ec <src_set_ratio+0x64>
c00092b1:	68 00 00 70 3f       	push   0x3f700000
c00092b6:	6a 00                	push   0x0
c00092b8:	57                   	push   edi
c00092b9:	56                   	push   esi
c00092ba:	e8 f0 f2 01 00       	call   c00285af <__ltdf2>
c00092bf:	83 c4 10             	add    esp,0x10
c00092c2:	ba 06 00 00 00       	mov    edx,0x6
c00092c7:	85 c0                	test   eax,eax
c00092c9:	78 21                	js     c00092ec <src_set_ratio+0x64>
c00092cb:	68 00 00 70 40       	push   0x40700000
c00092d0:	6a 00                	push   0x0
c00092d2:	57                   	push   edi
c00092d3:	56                   	push   esi
c00092d4:	e8 b8 f2 01 00       	call   c0028591 <__gtdf2>
c00092d9:	83 c4 10             	add    esp,0x10
c00092dc:	ba 06 00 00 00       	mov    edx,0x6
c00092e1:	85 c0                	test   eax,eax
c00092e3:	7f 07                	jg     c00092ec <src_set_ratio+0x64>
c00092e5:	89 33                	mov    DWORD PTR [ebx],esi
c00092e7:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00092ea:	31 d2                	xor    edx,edx
c00092ec:	5b                   	pop    ebx
c00092ed:	89 d0                	mov    eax,edx
c00092ef:	5e                   	pop    esi
c00092f0:	5f                   	pop    edi
c00092f1:	c3                   	ret    

c00092f2 <src_get_channels>:
c00092f2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00092f6:	b8 02 00 00 00       	mov    eax,0x2
c00092fb:	85 d2                	test   edx,edx
c00092fd:	74 14                	je     c0009313 <src_get_channels+0x21>
c00092ff:	b8 07 00 00 00       	mov    eax,0x7
c0009304:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0009308:	74 09                	je     c0009313 <src_get_channels+0x21>
c000930a:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c000930e:	74 03                	je     c0009313 <src_get_channels+0x21>
c0009310:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0009313:	c3                   	ret    

c0009314 <src_reset>:
c0009314:	53                   	push   ebx
c0009315:	b8 02 00 00 00       	mov    eax,0x2
c000931a:	83 ec 08             	sub    esp,0x8
c000931d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009321:	85 db                	test   ebx,ebx
c0009323:	74 36                	je     c000935b <src_reset+0x47>
c0009325:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0009328:	85 c0                	test   eax,eax
c000932a:	74 09                	je     c0009335 <src_reset+0x21>
c000932c:	83 ec 0c             	sub    esp,0xc
c000932f:	53                   	push   ebx
c0009330:	ff d0                	call   eax
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	31 c0                	xor    eax,eax
c0009337:	31 d2                	xor    edx,edx
c0009339:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000933c:	89 03                	mov    DWORD PTR [ebx],eax
c000933e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009341:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0009344:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000934b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0009352:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009359:	31 c0                	xor    eax,eax
c000935b:	83 c4 08             	add    esp,0x8
c000935e:	5b                   	pop    ebx
c000935f:	c3                   	ret    

c0009360 <src_get_name>:
c0009360:	53                   	push   ebx
c0009361:	83 ec 14             	sub    esp,0x14
c0009364:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009368:	53                   	push   ebx
c0009369:	e8 ee 0c 00 00       	call   c000a05c <sinc_get_name>
c000936e:	83 c4 10             	add    esp,0x10
c0009371:	85 c0                	test   eax,eax
c0009373:	75 1d                	jne    c0009392 <src_get_name+0x32>
c0009375:	83 ec 0c             	sub    esp,0xc
c0009378:	53                   	push   ebx
c0009379:	e8 96 57 00 00       	call   c000eb14 <zoh_get_name>
c000937e:	83 c4 10             	add    esp,0x10
c0009381:	85 c0                	test   eax,eax
c0009383:	75 0d                	jne    c0009392 <src_get_name+0x32>
c0009385:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0009389:	83 c4 08             	add    esp,0x8
c000938c:	5b                   	pop    ebx
c000938d:	e9 8a 0b 00 00       	jmp    c0009f1c <linear_get_name>
c0009392:	83 c4 08             	add    esp,0x8
c0009395:	5b                   	pop    ebx
c0009396:	c3                   	ret    

c0009397 <src_get_description>:
c0009397:	53                   	push   ebx
c0009398:	83 ec 14             	sub    esp,0x14
c000939b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000939f:	53                   	push   ebx
c00093a0:	e8 ca 0c 00 00       	call   c000a06f <sinc_get_description>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	85 c0                	test   eax,eax
c00093aa:	75 1d                	jne    c00093c9 <src_get_description+0x32>
c00093ac:	83 ec 0c             	sub    esp,0xc
c00093af:	53                   	push   ebx
c00093b0:	e8 6e 57 00 00       	call   c000eb23 <zoh_get_description>
c00093b5:	83 c4 10             	add    esp,0x10
c00093b8:	85 c0                	test   eax,eax
c00093ba:	75 0d                	jne    c00093c9 <src_get_description+0x32>
c00093bc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00093c0:	83 c4 08             	add    esp,0x8
c00093c3:	5b                   	pop    ebx
c00093c4:	e9 62 0b 00 00       	jmp    c0009f2b <linear_get_description>
c00093c9:	83 c4 08             	add    esp,0x8
c00093cc:	5b                   	pop    ebx
c00093cd:	c3                   	ret    

c00093ce <src_get_version>:
c00093ce:	b8 dc 99 02 c0       	mov    eax,0xc00299dc
c00093d3:	c3                   	ret    

c00093d4 <src_is_valid_ratio>:
c00093d4:	83 ec 1c             	sub    esp,0x1c
c00093d7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00093db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093df:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093e7:	68 00 00 70 3f       	push   0x3f700000
c00093ec:	6a 00                	push   0x0
c00093ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093f6:	e8 b4 f1 01 00       	call   c00285af <__ltdf2>
c00093fb:	83 c4 10             	add    esp,0x10
c00093fe:	31 d2                	xor    edx,edx
c0009400:	85 c0                	test   eax,eax
c0009402:	78 1e                	js     c0009422 <src_is_valid_ratio+0x4e>
c0009404:	68 00 00 70 40       	push   0x40700000
c0009409:	6a 00                	push   0x0
c000940b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009413:	e8 79 f1 01 00       	call   c0028591 <__gtdf2>
c0009418:	31 d2                	xor    edx,edx
c000941a:	83 c4 10             	add    esp,0x10
c000941d:	85 c0                	test   eax,eax
c000941f:	0f 9e c2             	setle  dl
c0009422:	89 d0                	mov    eax,edx
c0009424:	83 c4 1c             	add    esp,0x1c
c0009427:	c3                   	ret    

c0009428 <src_error>:
c0009428:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000942c:	31 c0                	xor    eax,eax
c000942e:	85 d2                	test   edx,edx
c0009430:	74 03                	je     c0009435 <src_error+0xd>
c0009432:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0009435:	c3                   	ret    

c0009436 <src_strerror>:
c0009436:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000943a:	31 c0                	xor    eax,eax
c000943c:	83 fa 17             	cmp    edx,0x17
c000943f:	77 07                	ja     c0009448 <src_strerror+0x12>
c0009441:	8b 04 95 40 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd61c0]
c0009448:	c3                   	ret    

c0009449 <src_simple>:
c0009449:	56                   	push   esi
c000944a:	53                   	push   ebx
c000944b:	83 ec 18             	sub    esp,0x18
c000944e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009452:	8d 44 24 10          	lea    eax,[esp+0x10]
c0009456:	50                   	push   eax
c0009457:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000945b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000945f:	e8 bf f9 ff ff       	call   c0008e23 <src_new>
c0009464:	83 c4 10             	add    esp,0x10
c0009467:	85 c0                	test   eax,eax
c0009469:	75 06                	jne    c0009471 <src_simple+0x28>
c000946b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000946f:	eb 25                	jmp    c0009496 <src_simple+0x4d>
c0009471:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0009478:	89 c3                	mov    ebx,eax
c000947a:	50                   	push   eax
c000947b:	50                   	push   eax
c000947c:	56                   	push   esi
c000947d:	53                   	push   ebx
c000947e:	e8 d2 fa ff ff       	call   c0008f55 <src_process>
c0009483:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009486:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000948a:	e8 8a fa ff ff       	call   c0008f19 <src_delete>
c000948f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009493:	83 c4 10             	add    esp,0x10
c0009496:	83 c4 14             	add    esp,0x14
c0009499:	5b                   	pop    ebx
c000949a:	5e                   	pop    esi
c000949b:	c3                   	ret    

c000949c <src_short_to_float_array>:
c000949c:	53                   	push   ebx
c000949d:	83 ec 18             	sub    esp,0x18
c00094a0:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00094a4:	85 db                	test   ebx,ebx
c00094a6:	74 54                	je     c00094fc <src_short_to_float_array+0x60>
c00094a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094ac:	4b                   	dec    ebx
c00094ad:	83 ec 0c             	sub    esp,0xc
c00094b0:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c00094b4:	50                   	push   eax
c00094b5:	e8 89 ee 01 00       	call   c0028343 <__floatsidf>
c00094ba:	83 c4 10             	add    esp,0x10
c00094bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00094c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00094c5:	68 00 00 00 3f       	push   0x3f000000
c00094ca:	6a 00                	push   0x0
c00094cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094d4:	e8 07 e8 01 00       	call   c0027ce0 <__muldf3>
c00094d9:	59                   	pop    ecx
c00094da:	59                   	pop    ecx
c00094db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094eb:	e8 c3 f0 01 00       	call   c00285b3 <__truncdfsf2>
c00094f0:	83 c4 10             	add    esp,0x10
c00094f3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00094f7:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c00094fa:	eb a8                	jmp    c00094a4 <src_short_to_float_array+0x8>
c00094fc:	83 c4 18             	add    esp,0x18
c00094ff:	5b                   	pop    ebx
c0009500:	c3                   	ret    

c0009501 <src_float_to_short_array>:
c0009501:	56                   	push   esi
c0009502:	53                   	push   ebx
c0009503:	83 ec 14             	sub    esp,0x14
c0009506:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000950a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000950e:	85 db                	test   ebx,ebx
c0009510:	0f 84 a4 00 00 00    	je     c00095ba <src_float_to_short_array+0xb9>
c0009516:	83 ec 0c             	sub    esp,0xc
c0009519:	4b                   	dec    ebx
c000951a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000951e:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0009521:	e8 b1 f1 01 00       	call   c00286d7 <__extendsfdf2>
c0009526:	83 c4 10             	add    esp,0x10
c0009529:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000952d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009531:	68 00 00 e0 41       	push   0x41e00000
c0009536:	6a 00                	push   0x0
c0009538:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000953c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009540:	e8 9b e7 01 00       	call   c0027ce0 <__muldf3>
c0009545:	83 c4 10             	add    esp,0x10
c0009548:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000954c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009550:	68 ff ff df 41       	push   0x41dfffff
c0009555:	68 00 00 c0 ff       	push   0xffc00000
c000955a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000955e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009562:	e8 46 f0 01 00       	call   c00285ad <__gedf2>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	85 c0                	test   eax,eax
c000956c:	78 08                	js     c0009576 <src_float_to_short_array+0x75>
c000956e:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0009574:	eb 98                	jmp    c000950e <src_float_to_short_array+0xd>
c0009576:	68 00 00 e0 c1       	push   0xc1e00000
c000957b:	6a 00                	push   0x0
c000957d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009581:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009585:	e8 27 f0 01 00       	call   c00285b1 <__ledf2>
c000958a:	83 c4 10             	add    esp,0x10
c000958d:	85 c0                	test   eax,eax
c000958f:	7f 0b                	jg     c000959c <src_float_to_short_array+0x9b>
c0009591:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0009597:	e9 72 ff ff ff       	jmp    c000950e <src_float_to_short_array+0xd>
c000959c:	50                   	push   eax
c000959d:	50                   	push   eax
c000959e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00095a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00095a6:	e8 b5 f1 01 00       	call   c0028760 <lrint>
c00095ab:	83 c4 10             	add    esp,0x10
c00095ae:	c1 f8 10             	sar    eax,0x10
c00095b1:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c00095b5:	e9 54 ff ff ff       	jmp    c000950e <src_float_to_short_array+0xd>
c00095ba:	83 c4 14             	add    esp,0x14
c00095bd:	5b                   	pop    ebx
c00095be:	5e                   	pop    esi
c00095bf:	c3                   	ret    

c00095c0 <src_int_to_float_array>:
c00095c0:	53                   	push   ebx
c00095c1:	83 ec 18             	sub    esp,0x18
c00095c4:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00095c8:	85 db                	test   ebx,ebx
c00095ca:	74 52                	je     c000961e <src_int_to_float_array+0x5e>
c00095cc:	83 ec 0c             	sub    esp,0xc
c00095cf:	4b                   	dec    ebx
c00095d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00095d4:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00095d7:	e8 67 ed 01 00       	call   c0028343 <__floatsidf>
c00095dc:	83 c4 10             	add    esp,0x10
c00095df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00095e7:	68 00 00 00 3e       	push   0x3e000000
c00095ec:	6a 00                	push   0x0
c00095ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00095f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00095f6:	e8 e5 e6 01 00       	call   c0027ce0 <__muldf3>
c00095fb:	59                   	pop    ecx
c00095fc:	59                   	pop    ecx
c00095fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009601:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009609:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000960d:	e8 a1 ef 01 00       	call   c00285b3 <__truncdfsf2>
c0009612:	83 c4 10             	add    esp,0x10
c0009615:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009619:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000961c:	eb aa                	jmp    c00095c8 <src_int_to_float_array+0x8>
c000961e:	83 c4 18             	add    esp,0x18
c0009621:	5b                   	pop    ebx
c0009622:	c3                   	ret    

c0009623 <src_float_to_int_array>:
c0009623:	56                   	push   esi
c0009624:	53                   	push   ebx
c0009625:	83 ec 14             	sub    esp,0x14
c0009628:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000962c:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0009630:	85 db                	test   ebx,ebx
c0009632:	0f 84 a2 00 00 00    	je     c00096da <src_float_to_int_array+0xb7>
c0009638:	83 ec 0c             	sub    esp,0xc
c000963b:	4b                   	dec    ebx
c000963c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009640:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0009643:	e8 8f f0 01 00       	call   c00286d7 <__extendsfdf2>
c0009648:	83 c4 10             	add    esp,0x10
c000964b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000964f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009653:	68 00 00 e0 41       	push   0x41e00000
c0009658:	6a 00                	push   0x0
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009662:	e8 79 e6 01 00       	call   c0027ce0 <__muldf3>
c0009667:	83 c4 10             	add    esp,0x10
c000966a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000966e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009672:	68 ff ff df 41       	push   0x41dfffff
c0009677:	68 00 00 c0 ff       	push   0xffc00000
c000967c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009680:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009684:	e8 24 ef 01 00       	call   c00285ad <__gedf2>
c0009689:	83 c4 10             	add    esp,0x10
c000968c:	85 c0                	test   eax,eax
c000968e:	78 09                	js     c0009699 <src_float_to_int_array+0x76>
c0009690:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0009697:	eb 97                	jmp    c0009630 <src_float_to_int_array+0xd>
c0009699:	68 00 00 e0 c1       	push   0xc1e00000
c000969e:	6a 00                	push   0x0
c00096a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096a8:	e8 04 ef 01 00       	call   c00285b1 <__ledf2>
c00096ad:	83 c4 10             	add    esp,0x10
c00096b0:	85 c0                	test   eax,eax
c00096b2:	7f 0c                	jg     c00096c0 <src_float_to_int_array+0x9d>
c00096b4:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c00096bb:	e9 70 ff ff ff       	jmp    c0009630 <src_float_to_int_array+0xd>
c00096c0:	50                   	push   eax
c00096c1:	50                   	push   eax
c00096c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096ca:	e8 91 f0 01 00       	call   c0028760 <lrint>
c00096cf:	83 c4 10             	add    esp,0x10
c00096d2:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c00096d5:	e9 56 ff ff ff       	jmp    c0009630 <src_float_to_int_array+0xd>
c00096da:	83 c4 14             	add    esp,0x14
c00096dd:	5b                   	pop    ebx
c00096de:	5e                   	pop    esi
c00096df:	c3                   	ret    

c00096e0 <psrc_set_converter>:
c00096e0:	56                   	push   esi
c00096e1:	53                   	push   ebx
c00096e2:	83 ec 0c             	sub    esp,0xc
c00096e5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00096e9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00096ed:	56                   	push   esi
c00096ee:	53                   	push   ebx
c00096ef:	e8 8e 09 00 00       	call   c000a082 <sinc_set_converter>
c00096f4:	83 c4 10             	add    esp,0x10
c00096f7:	85 c0                	test   eax,eax
c00096f9:	74 25                	je     c0009720 <psrc_set_converter+0x40>
c00096fb:	50                   	push   eax
c00096fc:	50                   	push   eax
c00096fd:	56                   	push   esi
c00096fe:	53                   	push   ebx
c00096ff:	e8 2e 54 00 00       	call   c000eb32 <zoh_set_converter>
c0009704:	83 c4 10             	add    esp,0x10
c0009707:	85 c0                	test   eax,eax
c0009709:	74 15                	je     c0009720 <psrc_set_converter+0x40>
c000970b:	51                   	push   ecx
c000970c:	51                   	push   ecx
c000970d:	56                   	push   esi
c000970e:	53                   	push   ebx
c000970f:	e8 26 08 00 00       	call   c0009f3a <linear_set_converter>
c0009714:	83 c4 10             	add    esp,0x10
c0009717:	ba 0a 00 00 00       	mov    edx,0xa
c000971c:	85 c0                	test   eax,eax
c000971e:	75 02                	jne    c0009722 <psrc_set_converter+0x42>
c0009720:	31 d2                	xor    edx,edx
c0009722:	89 d0                	mov    eax,edx
c0009724:	5a                   	pop    edx
c0009725:	5b                   	pop    ebx
c0009726:	5e                   	pop    esi
c0009727:	c3                   	ret    

c0009728 <linear_vari_process>:
c0009728:	55                   	push   ebp
c0009729:	31 d2                	xor    edx,edx
c000972b:	57                   	push   edi
c000972c:	56                   	push   esi
c000972d:	53                   	push   ebx
c000972e:	83 ec 3c             	sub    esp,0x3c
c0009731:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0009735:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009739:	0f 8e d3 07 00 00    	jle    c0009f12 <linear_vari_process+0x7ea>
c000973f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009743:	ba 05 00 00 00       	mov    edx,0x5
c0009748:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000974b:	85 db                	test   ebx,ebx
c000974d:	0f 84 bf 07 00 00    	je     c0009f12 <linear_vari_process+0x7ea>
c0009753:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009756:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000975a:	74 19                	je     c0009775 <linear_vari_process+0x4d>
c000975c:	31 d2                	xor    edx,edx
c000975e:	39 c2                	cmp    edx,eax
c0009760:	7d 0c                	jge    c000976e <linear_vari_process+0x46>
c0009762:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009764:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009767:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000976b:	42                   	inc    edx
c000976c:	eb f0                	jmp    c000975e <linear_vari_process+0x36>
c000976e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009775:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009778:	0f af d0             	imul   edx,eax
c000977b:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000977e:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009782:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009789:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000978c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009793:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009797:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000979a:	8b 00                	mov    eax,DWORD PTR [eax]
c000979c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00097a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00097a4:	68 00 00 70 3f       	push   0x3f700000
c00097a9:	6a 00                	push   0x0
c00097ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097b3:	e8 f7 ed 01 00       	call   c00285af <__ltdf2>
c00097b8:	83 c4 10             	add    esp,0x10
c00097bb:	ba 16 00 00 00       	mov    edx,0x16
c00097c0:	85 c0                	test   eax,eax
c00097c2:	0f 88 4a 07 00 00    	js     c0009f12 <linear_vari_process+0x7ea>
c00097c8:	68 00 00 70 40       	push   0x40700000
c00097cd:	6a 00                	push   0x0
c00097cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097d7:	e8 b5 ed 01 00       	call   c0028591 <__gtdf2>
c00097dc:	83 c4 10             	add    esp,0x10
c00097df:	ba 16 00 00 00       	mov    edx,0x16
c00097e4:	85 c0                	test   eax,eax
c00097e6:	0f 8f 26 07 00 00    	jg     c0009f12 <linear_vari_process+0x7ea>
c00097ec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00097f0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00097f3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00097f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00097fe:	68 00 00 f0 3f       	push   0x3ff00000
c0009803:	6a 00                	push   0x0
c0009805:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009809:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000980d:	e8 9d ed 01 00       	call   c00285af <__ltdf2>
c0009812:	83 c4 10             	add    esp,0x10
c0009815:	85 c0                	test   eax,eax
c0009817:	0f 89 89 02 00 00    	jns    c0009aa6 <linear_vari_process+0x37e>
c000981d:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009820:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0009823:	0f 8d 7d 02 00 00    	jge    c0009aa6 <linear_vari_process+0x37e>
c0009829:	83 ec 0c             	sub    esp,0xc
c000982c:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000982f:	e8 0f eb 01 00       	call   c0028343 <__floatsidf>
c0009834:	83 c4 10             	add    esp,0x10
c0009837:	89 04 24             	mov    DWORD PTR [esp],eax
c000983a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000983e:	68 00 00 f0 3f       	push   0x3ff00000
c0009843:	6a 00                	push   0x0
c0009845:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009849:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000984d:	e8 11 de 01 00       	call   c0027663 <__adddf3>
c0009852:	83 c4 10             	add    esp,0x10
c0009855:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009859:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000985d:	52                   	push   edx
c000985e:	50                   	push   eax
c000985f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009863:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009867:	e8 74 e4 01 00       	call   c0027ce0 <__muldf3>
c000986c:	5d                   	pop    ebp
c000986d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009871:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009875:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009878:	e8 c6 ea 01 00       	call   c0028343 <__floatsidf>
c000987d:	83 c4 10             	add    esp,0x10
c0009880:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009884:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009888:	52                   	push   edx
c0009889:	50                   	push   eax
c000988a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000988e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009892:	e8 cc dd 01 00       	call   c0027663 <__adddf3>
c0009897:	59                   	pop    ecx
c0009898:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000989c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00098a0:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00098a3:	e8 9b ea 01 00       	call   c0028343 <__floatsidf>
c00098a8:	83 c4 10             	add    esp,0x10
c00098ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098b3:	52                   	push   edx
c00098b4:	50                   	push   eax
c00098b5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00098b9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00098bd:	e8 eb ec 01 00       	call   c00285ad <__gedf2>
c00098c2:	83 c4 10             	add    esp,0x10
c00098c5:	85 c0                	test   eax,eax
c00098c7:	0f 89 d9 01 00 00    	jns    c0009aa6 <linear_vari_process+0x37e>
c00098cd:	85 ff                	test   edi,edi
c00098cf:	0f 8e f4 00 00 00    	jle    c00099c9 <linear_vari_process+0x2a1>
c00098d5:	83 ec 10             	sub    esp,0x10
c00098d8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00098db:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00098de:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00098e2:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00098e5:	ff 30                	push   DWORD PTR [eax]
c00098e7:	e8 c8 e3 01 00       	call   c0027cb4 <__subdf3>
c00098ec:	83 c4 18             	add    esp,0x18
c00098ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098f7:	52                   	push   edx
c00098f8:	50                   	push   eax
c00098f9:	e8 42 ee 01 00       	call   c0028740 <fabs>
c00098fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009902:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009906:	83 c4 10             	add    esp,0x10
c0009909:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000990e:	68 23 42 92 0c       	push   0xc924223
c0009913:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009917:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000991b:	e8 71 ec 01 00       	call   c0028591 <__gtdf2>
c0009920:	83 c4 10             	add    esp,0x10
c0009923:	85 c0                	test   eax,eax
c0009925:	0f 8e 9e 00 00 00    	jle    c00099c9 <linear_vari_process+0x2a1>
c000992b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000992f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009932:	8b 00                	mov    eax,DWORD PTR [eax]
c0009934:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009938:	89 04 24             	mov    DWORD PTR [esp],eax
c000993b:	52                   	push   edx
c000993c:	50                   	push   eax
c000993d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009940:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009943:	e8 6c e3 01 00       	call   c0027cb4 <__subdf3>
c0009948:	59                   	pop    ecx
c0009949:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000994d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009951:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009954:	e8 ea e9 01 00       	call   c0028343 <__floatsidf>
c0009959:	83 c4 10             	add    esp,0x10
c000995c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009960:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009964:	52                   	push   edx
c0009965:	50                   	push   eax
c0009966:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000996a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000996e:	e8 6d e3 01 00       	call   c0027ce0 <__muldf3>
c0009973:	5f                   	pop    edi
c0009974:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009978:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000997c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000997f:	e8 bf e9 01 00       	call   c0028343 <__floatsidf>
c0009984:	83 c4 10             	add    esp,0x10
c0009987:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000998b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000998f:	52                   	push   edx
c0009990:	50                   	push   eax
c0009991:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009995:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009999:	e8 26 e6 01 00       	call   c0027fc4 <__divdf3>
c000999e:	83 c4 10             	add    esp,0x10
c00099a1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099a5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00099a9:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00099ad:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00099b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099b9:	e8 a5 dc 01 00       	call   c0027663 <__adddf3>
c00099be:	83 c4 10             	add    esp,0x10
c00099c1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099c5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00099c9:	31 ff                	xor    edi,edi
c00099cb:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00099ce:	0f 8e 9d 00 00 00    	jle    c0009a71 <linear_vari_process+0x349>
c00099d4:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00099d7:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00099db:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00099de:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00099e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00099e5:	8b 06                	mov    eax,DWORD PTR [esi]
c00099e7:	52                   	push   edx
c00099e8:	52                   	push   edx
c00099e9:	55                   	push   ebp
c00099ea:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00099ed:	47                   	inc    edi
c00099ee:	e8 05 d6 01 00       	call   c0026ff8 <__subsf3>
c00099f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00099f6:	e8 dc ec 01 00       	call   c00286d7 <__extendsfdf2>
c00099fb:	83 c4 10             	add    esp,0x10
c00099fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a02:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009a0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009a0e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009a12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009a16:	e8 c5 e2 01 00       	call   c0027ce0 <__muldf3>
c0009a1b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009a1e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a26:	e8 ac ec 01 00       	call   c00286d7 <__extendsfdf2>
c0009a2b:	83 c4 10             	add    esp,0x10
c0009a2e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a32:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a36:	52                   	push   edx
c0009a37:	50                   	push   eax
c0009a38:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009a3c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009a40:	e8 1e dc 01 00       	call   c0027663 <__adddf3>
c0009a45:	59                   	pop    ecx
c0009a46:	5d                   	pop    ebp
c0009a47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a4b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a4f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009a53:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009a57:	e8 57 eb 01 00       	call   c00285b3 <__truncdfsf2>
c0009a5c:	83 c4 10             	add    esp,0x10
c0009a5f:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009a62:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009a66:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009a69:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009a6c:	e9 5a ff ff ff       	jmp    c00099cb <linear_vari_process+0x2a3>
c0009a71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a79:	68 00 00 f0 3f       	push   0x3ff00000
c0009a7e:	6a 00                	push   0x0
c0009a80:	e8 3f e5 01 00       	call   c0027fc4 <__divdf3>
c0009a85:	83 c4 10             	add    esp,0x10
c0009a88:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a8b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a8f:	52                   	push   edx
c0009a90:	50                   	push   eax
c0009a91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a99:	e8 c5 db 01 00       	call   c0027663 <__adddf3>
c0009a9e:	83 c4 10             	add    esp,0x10
c0009aa1:	e9 50 fd ff ff       	jmp    c00097f6 <linear_vari_process+0xce>
c0009aa6:	50                   	push   eax
c0009aa7:	50                   	push   eax
c0009aa8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009aac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ab0:	e8 ab ec 01 00       	call   c0028760 <lrint>
c0009ab5:	83 ec 0c             	sub    esp,0xc
c0009ab8:	50                   	push   eax
c0009ab9:	e8 85 e8 01 00       	call   c0028343 <__floatsidf>
c0009abe:	83 c4 10             	add    esp,0x10
c0009ac1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ac5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ac9:	52                   	push   edx
c0009aca:	50                   	push   eax
c0009acb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009acf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ad3:	e8 dc e1 01 00       	call   c0027cb4 <__subdf3>
c0009ad8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009adc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ae0:	83 c4 20             	add    esp,0x20
c0009ae3:	6a 00                	push   0x0
c0009ae5:	6a 00                	push   0x0
c0009ae7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009aeb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009aef:	e8 bb ea 01 00       	call   c00285af <__ltdf2>
c0009af4:	83 c4 10             	add    esp,0x10
c0009af7:	85 c0                	test   eax,eax
c0009af9:	79 1e                	jns    c0009b19 <linear_vari_process+0x3f1>
c0009afb:	68 00 00 f0 3f       	push   0x3ff00000
c0009b00:	6a 00                	push   0x0
c0009b02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009b06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009b0a:	e8 54 db 01 00       	call   c0027663 <__adddf3>
c0009b0f:	83 c4 10             	add    esp,0x10
c0009b12:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b15:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009b19:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009b1c:	83 ec 10             	sub    esp,0x10
c0009b1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 80 e1 01 00       	call   c0027cb4 <__subdf3>
c0009b34:	83 c4 18             	add    esp,0x18
c0009b37:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	e8 1a ec 01 00       	call   c0028760 <lrint>
c0009b46:	83 c4 10             	add    esp,0x10
c0009b49:	0f af f8             	imul   edi,eax
c0009b4c:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009b4f:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009b52:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009b55:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009b58:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009b5b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009b5f:	0f 8d 13 03 00 00    	jge    c0009e78 <linear_vari_process+0x750>
c0009b65:	83 ec 0c             	sub    esp,0xc
c0009b68:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b6b:	e8 d3 e7 01 00       	call   c0028343 <__floatsidf>
c0009b70:	83 c4 10             	add    esp,0x10
c0009b73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009b77:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009b7b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009b7f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009b83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b8b:	e8 50 e1 01 00       	call   c0027ce0 <__muldf3>
c0009b90:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009b93:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b97:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b9b:	e8 a3 e7 01 00       	call   c0028343 <__floatsidf>
c0009ba0:	83 c4 10             	add    esp,0x10
c0009ba3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ba7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009bab:	52                   	push   edx
c0009bac:	50                   	push   eax
c0009bad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009bb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009bb5:	e8 a9 da 01 00       	call   c0027663 <__adddf3>
c0009bba:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009bbd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009bc1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009bc5:	e8 79 e7 01 00       	call   c0028343 <__floatsidf>
c0009bca:	83 c4 10             	add    esp,0x10
c0009bcd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009bd1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009bd5:	52                   	push   edx
c0009bd6:	50                   	push   eax
c0009bd7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009bdb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009bdf:	e8 cb e9 01 00       	call   c00285af <__ltdf2>
c0009be4:	83 c4 10             	add    esp,0x10
c0009be7:	85 c0                	test   eax,eax
c0009be9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009bed:	0f 89 85 02 00 00    	jns    c0009e78 <linear_vari_process+0x750>
c0009bf3:	85 c9                	test   ecx,ecx
c0009bf5:	0f 8e f5 00 00 00    	jle    c0009cf0 <linear_vari_process+0x5c8>
c0009bfb:	83 ec 10             	sub    esp,0x10
c0009bfe:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009c01:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009c04:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0009c08:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009c0b:	ff 30                	push   DWORD PTR [eax]
c0009c0d:	e8 a2 e0 01 00       	call   c0027cb4 <__subdf3>
c0009c12:	83 c4 18             	add    esp,0x18
c0009c15:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c19:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009c1d:	52                   	push   edx
c0009c1e:	50                   	push   eax
c0009c1f:	e8 1c eb 01 00       	call   c0028740 <fabs>
c0009c24:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009c28:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c2c:	83 c4 10             	add    esp,0x10
c0009c2f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009c34:	68 23 42 92 0c       	push   0xc924223
c0009c39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c41:	e8 4b e9 01 00       	call   c0028591 <__gtdf2>
c0009c46:	83 c4 10             	add    esp,0x10
c0009c49:	85 c0                	test   eax,eax
c0009c4b:	0f 8e 9f 00 00 00    	jle    c0009cf0 <linear_vari_process+0x5c8>
c0009c51:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009c55:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009c58:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c5e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c62:	52                   	push   edx
c0009c63:	50                   	push   eax
c0009c64:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009c67:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009c6a:	e8 45 e0 01 00       	call   c0027cb4 <__subdf3>
c0009c6f:	5f                   	pop    edi
c0009c70:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c74:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c78:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009c7b:	e8 c3 e6 01 00       	call   c0028343 <__floatsidf>
c0009c80:	83 c4 10             	add    esp,0x10
c0009c83:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009c87:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c8b:	52                   	push   edx
c0009c8c:	50                   	push   eax
c0009c8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c95:	e8 46 e0 01 00       	call   c0027ce0 <__muldf3>
c0009c9a:	5d                   	pop    ebp
c0009c9b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009ca3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009ca6:	e8 98 e6 01 00       	call   c0028343 <__floatsidf>
c0009cab:	83 c4 10             	add    esp,0x10
c0009cae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009cb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009cb6:	52                   	push   edx
c0009cb7:	50                   	push   eax
c0009cb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc0:	e8 ff e2 01 00       	call   c0027fc4 <__divdf3>
c0009cc5:	83 c4 10             	add    esp,0x10
c0009cc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ccc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009cd0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009cd4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009cd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ce0:	e8 7e d9 01 00       	call   c0027663 <__adddf3>
c0009ce5:	83 c4 10             	add    esp,0x10
c0009ce8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009cec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009cf0:	31 ff                	xor    edi,edi
c0009cf2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009cf5:	39 f8                	cmp    eax,edi
c0009cf7:	0f 8e ac 00 00 00    	jle    c0009da9 <linear_vari_process+0x681>
c0009cfd:	8b 16                	mov    edx,DWORD PTR [esi]
c0009cff:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0009d02:	29 c1                	sub    ecx,eax
c0009d04:	89 c8                	mov    eax,ecx
c0009d06:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009d09:	01 f8                	add    eax,edi
c0009d0b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009d0f:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c0009d12:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009d15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009d19:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009d1c:	51                   	push   ecx
c0009d1d:	01 f8                	add    eax,edi
c0009d1f:	51                   	push   ecx
c0009d20:	47                   	inc    edi
c0009d21:	55                   	push   ebp
c0009d22:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c0009d25:	e8 ce d2 01 00       	call   c0026ff8 <__subsf3>
c0009d2a:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d2d:	e8 a5 e9 01 00       	call   c00286d7 <__extendsfdf2>
c0009d32:	83 c4 10             	add    esp,0x10
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d3d:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009d41:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009d45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009d49:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009d4d:	e8 8e df 01 00       	call   c0027ce0 <__muldf3>
c0009d52:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009d59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009d5d:	e8 75 e9 01 00       	call   c00286d7 <__extendsfdf2>
c0009d62:	83 c4 10             	add    esp,0x10
c0009d65:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d69:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d6d:	52                   	push   edx
c0009d6e:	50                   	push   eax
c0009d6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009d73:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009d77:	e8 e7 d8 01 00       	call   c0027663 <__adddf3>
c0009d7c:	5d                   	pop    ebp
c0009d7d:	59                   	pop    ecx
c0009d7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d82:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d86:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009d8a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009d8e:	e8 20 e8 01 00       	call   c00285b3 <__truncdfsf2>
c0009d93:	83 c4 10             	add    esp,0x10
c0009d96:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009d9a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009d9e:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009da1:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009da4:	e9 49 ff ff ff       	jmp    c0009cf2 <linear_vari_process+0x5ca>
c0009da9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009dad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009db1:	68 00 00 f0 3f       	push   0x3ff00000
c0009db6:	6a 00                	push   0x0
c0009db8:	e8 07 e2 01 00       	call   c0027fc4 <__divdf3>
c0009dbd:	83 c4 10             	add    esp,0x10
c0009dc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009dc4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009dc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009dcc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009dd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009dd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009dd8:	e8 86 d8 01 00       	call   c0027663 <__adddf3>
c0009ddd:	59                   	pop    ecx
c0009dde:	5f                   	pop    edi
c0009ddf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009de3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009de7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009deb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009def:	e8 6c e9 01 00       	call   c0028760 <lrint>
c0009df4:	83 ec 0c             	sub    esp,0xc
c0009df7:	50                   	push   eax
c0009df8:	e8 46 e5 01 00       	call   c0028343 <__floatsidf>
c0009dfd:	83 c4 10             	add    esp,0x10
c0009e00:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009e04:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009e08:	52                   	push   edx
c0009e09:	50                   	push   eax
c0009e0a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e0e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e12:	e8 9d de 01 00       	call   c0027cb4 <__subdf3>
c0009e17:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009e1b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009e1f:	83 c4 20             	add    esp,0x20
c0009e22:	6a 00                	push   0x0
c0009e24:	6a 00                	push   0x0
c0009e26:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009e2a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009e2e:	e8 7c e7 01 00       	call   c00285af <__ltdf2>
c0009e33:	83 c4 10             	add    esp,0x10
c0009e36:	85 c0                	test   eax,eax
c0009e38:	79 1e                	jns    c0009e58 <linear_vari_process+0x730>
c0009e3a:	68 00 00 f0 3f       	push   0x3ff00000
c0009e3f:	6a 00                	push   0x0
c0009e41:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009e45:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009e49:	e8 15 d8 01 00       	call   c0027663 <__adddf3>
c0009e4e:	83 c4 10             	add    esp,0x10
c0009e51:	89 04 24             	mov    DWORD PTR [esp],eax
c0009e54:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009e58:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009e5b:	83 ec 10             	sub    esp,0x10
c0009e5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e66:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e6a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e6e:	e8 41 de 01 00       	call   c0027cb4 <__subdf3>
c0009e73:	e9 bc fc ff ff       	jmp    c0009b34 <linear_vari_process+0x40c>
c0009e78:	39 fd                	cmp    ebp,edi
c0009e7a:	7d 38                	jge    c0009eb4 <linear_vari_process+0x78c>
c0009e7c:	83 ec 0c             	sub    esp,0xc
c0009e7f:	89 f8                	mov    eax,edi
c0009e81:	29 e8                	sub    eax,ebp
c0009e83:	99                   	cdq    
c0009e84:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e87:	50                   	push   eax
c0009e88:	e8 b6 e4 01 00       	call   c0028343 <__floatsidf>
c0009e8d:	83 c4 10             	add    esp,0x10
c0009e90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e94:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e98:	52                   	push   edx
c0009e99:	50                   	push   eax
c0009e9a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009e9e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009ea2:	e8 bc d7 01 00       	call   c0027663 <__adddf3>
c0009ea7:	83 c4 10             	add    esp,0x10
c0009eaa:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009ead:	89 04 24             	mov    DWORD PTR [esp],eax
c0009eb0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009eb4:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009eb8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009ebb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009ebf:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0009ec2:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009ec5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009ec8:	85 c0                	test   eax,eax
c0009eca:	7f 29                	jg     c0009ef5 <linear_vari_process+0x7cd>
c0009ecc:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009ed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ed4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009ed8:	89 01                	mov    DWORD PTR [ecx],eax
c0009eda:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0009edd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009ee0:	99                   	cdq    
c0009ee1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009ee4:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009ee7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009eea:	99                   	cdq    
c0009eeb:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009eee:	31 d2                	xor    edx,edx
c0009ef0:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0009ef3:	eb 1d                	jmp    c0009f12 <linear_vari_process+0x7ea>
c0009ef5:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0009ef8:	31 d2                	xor    edx,edx
c0009efa:	29 c8                	sub    eax,ecx
c0009efc:	c1 e0 02             	shl    eax,0x2
c0009eff:	39 d1                	cmp    ecx,edx
c0009f01:	7e c9                	jle    c0009ecc <linear_vari_process+0x7a4>
c0009f03:	8b 3e                	mov    edi,DWORD PTR [esi]
c0009f05:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c0009f08:	83 c0 04             	add    eax,0x4
c0009f0b:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c0009f0f:	42                   	inc    edx
c0009f10:	eb ed                	jmp    c0009eff <linear_vari_process+0x7d7>
c0009f12:	83 c4 3c             	add    esp,0x3c
c0009f15:	89 d0                	mov    eax,edx
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <linear_get_name>:
c0009f1c:	31 c0                	xor    eax,eax
c0009f1e:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009f23:	75 05                	jne    c0009f2a <linear_get_name+0xe>
c0009f25:	b8 a0 9e 02 c0       	mov    eax,0xc0029ea0
c0009f2a:	c3                   	ret    

c0009f2b <linear_get_description>:
c0009f2b:	31 c0                	xor    eax,eax
c0009f2d:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009f32:	75 05                	jne    c0009f39 <linear_get_description+0xe>
c0009f34:	b8 b4 9e 02 c0       	mov    eax,0xc0029eb4
c0009f39:	c3                   	ret    

c0009f3a <linear_set_converter>:
c0009f3a:	53                   	push   ebx
c0009f3b:	b8 0a 00 00 00       	mov    eax,0xa
c0009f40:	83 ec 08             	sub    esp,0x8
c0009f43:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009f47:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009f4c:	75 6e                	jne    c0009fbc <linear_set_converter+0x82>
c0009f4e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009f51:	85 c0                	test   eax,eax
c0009f53:	74 13                	je     c0009f68 <linear_set_converter+0x2e>
c0009f55:	83 ec 0c             	sub    esp,0xc
c0009f58:	50                   	push   eax
c0009f59:	e8 0e 60 00 00       	call   c000ff6c <free>
c0009f5e:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009f65:	83 c4 10             	add    esp,0x10
c0009f68:	50                   	push   eax
c0009f69:	50                   	push   eax
c0009f6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009f6d:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009f74:	50                   	push   eax
c0009f75:	6a 01                	push   0x1
c0009f77:	e8 10 60 00 00       	call   c000ff8c <calloc>
c0009f7c:	83 c4 10             	add    esp,0x10
c0009f7f:	89 c2                	mov    edx,eax
c0009f81:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009f84:	85 d2                	test   edx,edx
c0009f86:	b8 01 00 00 00       	mov    eax,0x1
c0009f8b:	74 2f                	je     c0009fbc <linear_set_converter+0x82>
c0009f8d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009f90:	83 ec 0c             	sub    esp,0xc
c0009f93:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009f96:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009f9c:	c7 43 24 28 97 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009728
c0009fa3:	c7 43 20 28 97 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009728
c0009faa:	c7 43 28 c1 9f 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009fc1
c0009fb1:	53                   	push   ebx
c0009fb2:	e8 0a 00 00 00       	call   c0009fc1 <linear_reset>
c0009fb7:	83 c4 10             	add    esp,0x10
c0009fba:	31 c0                	xor    eax,eax
c0009fbc:	83 c4 08             	add    esp,0x8
c0009fbf:	5b                   	pop    ebx
c0009fc0:	c3                   	ret    

c0009fc1 <linear_reset>:
c0009fc1:	83 ec 0c             	sub    esp,0xc
c0009fc4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009fc8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0009fcb:	85 c0                	test   eax,eax
c0009fcd:	74 20                	je     c0009fef <linear_reset+0x2e>
c0009fcf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009fd2:	83 c0 1c             	add    eax,0x1c
c0009fd5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0009fd8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009fdf:	c1 e2 02             	shl    edx,0x2
c0009fe2:	51                   	push   ecx
c0009fe3:	52                   	push   edx
c0009fe4:	6a 00                	push   0x0
c0009fe6:	50                   	push   eax
c0009fe7:	e8 d8 66 ff ff       	call   c00006c4 <memset>
c0009fec:	83 c4 10             	add    esp,0x10
c0009fef:	83 c4 0c             	add    esp,0xc
c0009ff2:	c3                   	ret    

c0009ff3 <double_to_fp>:
c0009ff3:	83 ec 0c             	sub    esp,0xc
c0009ff6:	68 00 00 b0 40       	push   0x40b00000
c0009ffb:	6a 00                	push   0x0
c0009ffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a005:	e8 d6 dc 01 00       	call   c0027ce0 <__muldf3>
c000a00a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a00e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a012:	83 c4 1c             	add    esp,0x1c
c000a015:	e9 46 e7 01 00       	jmp    c0028760 <lrint>

c000a01a <int_to_fp>:
c000a01a:	c1 e0 0c             	shl    eax,0xc
c000a01d:	c3                   	ret    

c000a01e <fp_to_int>:
c000a01e:	c1 f8 0c             	sar    eax,0xc
c000a021:	c3                   	ret    

c000a022 <fp_fraction_part>:
c000a022:	25 ff 0f 00 00       	and    eax,0xfff
c000a027:	c3                   	ret    

c000a028 <fp_to_double>:
c000a028:	83 ec 1c             	sub    esp,0x1c
c000a02b:	e8 f2 ff ff ff       	call   c000a022 <fp_fraction_part>
c000a030:	83 ec 0c             	sub    esp,0xc
c000a033:	50                   	push   eax
c000a034:	e8 0a e3 01 00       	call   c0028343 <__floatsidf>
c000a039:	83 c4 10             	add    esp,0x10
c000a03c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a040:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a044:	68 00 00 30 3f       	push   0x3f300000
c000a049:	6a 00                	push   0x0
c000a04b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a04f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a053:	e8 88 dc 01 00       	call   c0027ce0 <__muldf3>
c000a058:	83 c4 2c             	add    esp,0x2c
c000a05b:	c3                   	ret    

c000a05c <sinc_get_name>:
c000a05c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a060:	31 c0                	xor    eax,eax
c000a062:	83 fa 02             	cmp    edx,0x2
c000a065:	77 07                	ja     c000a06e <sinc_get_name+0x12>
c000a067:	8b 04 95 38 9f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd60c8]
c000a06e:	c3                   	ret    

c000a06f <sinc_get_description>:
c000a06f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a073:	31 c0                	xor    eax,eax
c000a075:	83 fa 02             	cmp    edx,0x2
c000a078:	77 07                	ja     c000a081 <sinc_get_description+0x12>
c000a07a:	8b 04 95 44 9f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd60bc]
c000a081:	c3                   	ret    

c000a082 <sinc_set_converter>:
c000a082:	53                   	push   ebx
c000a083:	81 ec 58 08 00 00    	sub    esp,0x858
c000a089:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a090:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a093:	85 c0                	test   eax,eax
c000a095:	74 13                	je     c000a0aa <sinc_set_converter+0x28>
c000a097:	83 ec 0c             	sub    esp,0xc
c000a09a:	50                   	push   eax
c000a09b:	e8 cc 5e 00 00       	call   c000ff6c <free>
c000a0a0:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a0a7:	83 c4 10             	add    esp,0x10
c000a0aa:	50                   	push   eax
c000a0ab:	68 44 08 00 00       	push   0x844
c000a0b0:	6a 00                	push   0x0
c000a0b2:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a0b6:	50                   	push   eax
c000a0b7:	e8 08 66 ff ff       	call   c00006c4 <memset>
c000a0bc:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a0bf:	83 c4 10             	add    esp,0x10
c000a0c2:	b8 0b 00 00 00       	mov    eax,0xb
c000a0c7:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a0cd:	7f 6e                	jg     c000a13d <sinc_set_converter+0xbb>
c000a0cf:	83 fa 01             	cmp    edx,0x1
c000a0d2:	75 10                	jne    c000a0e4 <sinc_set_converter+0x62>
c000a0d4:	c7 43 24 0c a4 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a40c
c000a0db:	c7 43 20 0c a4 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a40c
c000a0e2:	eb 4d                	jmp    c000a131 <sinc_set_converter+0xaf>
c000a0e4:	83 fa 02             	cmp    edx,0x2
c000a0e7:	75 10                	jne    c000a0f9 <sinc_set_converter+0x77>
c000a0e9:	c7 43 24 d4 ae 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000aed4
c000a0f0:	c7 43 20 d4 ae 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000aed4
c000a0f7:	eb 38                	jmp    c000a131 <sinc_set_converter+0xaf>
c000a0f9:	83 fa 04             	cmp    edx,0x4
c000a0fc:	75 10                	jne    c000a10e <sinc_set_converter+0x8c>
c000a0fe:	c7 43 24 7f bb 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bb7f
c000a105:	c7 43 20 7f bb 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bb7f
c000a10c:	eb 23                	jmp    c000a131 <sinc_set_converter+0xaf>
c000a10e:	83 fa 06             	cmp    edx,0x6
c000a111:	75 10                	jne    c000a123 <sinc_set_converter+0xa1>
c000a113:	c7 43 24 2b ca 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ca2b
c000a11a:	c7 43 20 2b ca 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ca2b
c000a121:	eb 0e                	jmp    c000a131 <sinc_set_converter+0xaf>
c000a123:	c7 43 24 31 dc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dc31
c000a12a:	c7 43 20 31 dc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dc31
c000a131:	c7 43 28 45 a1 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000a145
c000a138:	b8 0a 00 00 00       	mov    eax,0xa
c000a13d:	81 c4 58 08 00 00    	add    esp,0x858
c000a143:	5b                   	pop    ebx
c000a144:	c3                   	ret    

c000a145 <sinc_reset>:
c000a145:	56                   	push   esi
c000a146:	53                   	push   ebx
c000a147:	51                   	push   ecx
c000a148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a14c:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000a14f:	85 db                	test   ebx,ebx
c000a151:	74 59                	je     c000a1ac <sinc_reset+0x67>
c000a153:	31 d2                	xor    edx,edx
c000a155:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000a15c:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000a15f:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000a162:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000a169:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000a170:	31 c0                	xor    eax,eax
c000a172:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000a178:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000a17b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000a17e:	52                   	push   edx
c000a17f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000a182:	c1 e0 02             	shl    eax,0x2
c000a185:	50                   	push   eax
c000a186:	6a 00                	push   0x0
c000a188:	56                   	push   esi
c000a189:	e8 36 65 ff ff       	call   c00006c4 <memset>
c000a18e:	83 c4 0c             	add    esp,0xc
c000a191:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a194:	c1 e0 02             	shl    eax,0x2
c000a197:	50                   	push   eax
c000a198:	68 aa 00 00 00       	push   0xaa
c000a19d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000a1a0:	8d 04 86             	lea    eax,[esi+eax*4]
c000a1a3:	50                   	push   eax
c000a1a4:	e8 1b 65 ff ff       	call   c00006c4 <memset>
c000a1a9:	83 c4 10             	add    esp,0x10
c000a1ac:	58                   	pop    eax
c000a1ad:	5b                   	pop    ebx
c000a1ae:	5e                   	pop    esi
c000a1af:	c3                   	ret    

c000a1b0 <calc_output_single>:
c000a1b0:	55                   	push   ebp
c000a1b1:	57                   	push   edi
c000a1b2:	56                   	push   esi
c000a1b3:	89 c6                	mov    esi,eax
c000a1b5:	53                   	push   ebx
c000a1b6:	89 d3                	mov    ebx,edx
c000a1b8:	83 ec 4c             	sub    esp,0x4c
c000a1bb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000a1bf:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000a1c2:	e8 53 fe ff ff       	call   c000a01a <int_to_fp>
c000a1c7:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c000a1ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a1ce:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000a1d2:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000a1d6:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000a1d9:	99                   	cdq    
c000a1da:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000a1e2:	f7 fb                	idiv   ebx
c000a1e4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a1ec:	89 da                	mov    edx,ebx
c000a1ee:	0f af d0             	imul   edx,eax
c000a1f1:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000a1f5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a1f9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000a1fd:	29 c2                	sub    edx,eax
c000a1ff:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000a202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a206:	83 c5 04             	add    ebp,0x4
c000a209:	e8 1a fe ff ff       	call   c000a028 <fp_to_double>
c000a20e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a212:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a21a:	e8 ff fd ff ff       	call   c000a01e <fp_to_int>
c000a21f:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000a222:	52                   	push   edx
c000a223:	52                   	push   edx
c000a224:	51                   	push   ecx
c000a225:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000a229:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000a22d:	e8 c6 cd 01 00       	call   c0026ff8 <__subsf3>
c000a232:	89 04 24             	mov    DWORD PTR [esp],eax
c000a235:	e8 9d e4 01 00       	call   c00286d7 <__extendsfdf2>
c000a23a:	83 c4 10             	add    esp,0x10
c000a23d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a241:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a245:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a249:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a24d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a251:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a255:	e8 86 da 01 00       	call   c0027ce0 <__muldf3>
c000a25a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000a25e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a262:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a265:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a269:	e8 69 e4 01 00       	call   c00286d7 <__extendsfdf2>
c000a26e:	83 c4 10             	add    esp,0x10
c000a271:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a275:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a279:	52                   	push   edx
c000a27a:	50                   	push   eax
c000a27b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a27f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a283:	e8 db d3 01 00       	call   c0027663 <__adddf3>
c000a288:	59                   	pop    ecx
c000a289:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a28d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a291:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c000a297:	e8 3b e4 01 00       	call   c00286d7 <__extendsfdf2>
c000a29c:	83 c4 10             	add    esp,0x10
c000a29f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a2a3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a2a7:	52                   	push   edx
c000a2a8:	50                   	push   eax
c000a2a9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2b1:	e8 2a da 01 00       	call   c0027ce0 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a2bd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2cb:	e8 93 d3 01 00       	call   c0027663 <__adddf3>
c000a2d0:	83 c4 10             	add    esp,0x10
c000a2d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a2db:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c000a2df:	0f 89 1d ff ff ff    	jns    c000a202 <calc_output_single+0x52>
c000a2e5:	89 d9                	mov    ecx,ebx
c000a2e7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a2eb:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000a2ef:	89 dd                	mov    ebp,ebx
c000a2f1:	29 c8                	sub    eax,ecx
c000a2f3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000a2fb:	99                   	cdq    
c000a2fc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a304:	f7 fb                	idiv   ebx
c000a306:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000a30a:	0f af e8             	imul   ebp,eax
c000a30d:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c000a311:	01 cd                	add    ebp,ecx
c000a313:	8d 34 86             	lea    esi,[esi+eax*4]
c000a316:	89 e8                	mov    eax,ebp
c000a318:	83 ee 04             	sub    esi,0x4
c000a31b:	e8 08 fd ff ff       	call   c000a028 <fp_to_double>
c000a320:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a324:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a328:	89 e8                	mov    eax,ebp
c000a32a:	29 dd                	sub    ebp,ebx
c000a32c:	e8 ed fc ff ff       	call   c000a01e <fp_to_int>
c000a331:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000a334:	52                   	push   edx
c000a335:	52                   	push   edx
c000a336:	51                   	push   ecx
c000a337:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c000a33b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000a33f:	e8 b4 cc 01 00       	call   c0026ff8 <__subsf3>
c000a344:	89 04 24             	mov    DWORD PTR [esp],eax
c000a347:	e8 8b e3 01 00       	call   c00286d7 <__extendsfdf2>
c000a34c:	83 c4 10             	add    esp,0x10
c000a34f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a353:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a357:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a35b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a35f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a363:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a367:	e8 74 d9 01 00       	call   c0027ce0 <__muldf3>
c000a36c:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000a370:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a374:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a377:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a37b:	e8 57 e3 01 00       	call   c00286d7 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a387:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a38b:	52                   	push   edx
c000a38c:	50                   	push   eax
c000a38d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a391:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a395:	e8 c9 d2 01 00       	call   c0027663 <__adddf3>
c000a39a:	59                   	pop    ecx
c000a39b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a39f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a3a3:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a3a9:	e8 29 e3 01 00       	call   c00286d7 <__extendsfdf2>
c000a3ae:	83 c4 10             	add    esp,0x10
c000a3b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a3b5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a3b9:	52                   	push   edx
c000a3ba:	50                   	push   eax
c000a3bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a3bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a3c3:	e8 18 d9 01 00       	call   c0027ce0 <__muldf3>
c000a3c8:	83 c4 10             	add    esp,0x10
c000a3cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3d3:	52                   	push   edx
c000a3d4:	50                   	push   eax
c000a3d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a3d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a3dd:	e8 81 d2 01 00       	call   c0027663 <__adddf3>
c000a3e2:	83 c4 10             	add    esp,0x10
c000a3e5:	85 ed                	test   ebp,ebp
c000a3e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3ef:	0f 8f 21 ff ff ff    	jg     c000a316 <calc_output_single+0x166>
c000a3f5:	52                   	push   edx
c000a3f6:	50                   	push   eax
c000a3f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3ff:	e8 5f d2 01 00       	call   c0027663 <__adddf3>
c000a404:	83 c4 5c             	add    esp,0x5c
c000a407:	5b                   	pop    ebx
c000a408:	5e                   	pop    esi
c000a409:	5f                   	pop    edi
c000a40a:	5d                   	pop    ebp
c000a40b:	c3                   	ret    

c000a40c <sinc_mono_vari_process>:
c000a40c:	55                   	push   ebp
c000a40d:	ba 05 00 00 00       	mov    edx,0x5
c000a412:	57                   	push   edi
c000a413:	56                   	push   esi
c000a414:	53                   	push   ebx
c000a415:	83 ec 4c             	sub    esp,0x4c
c000a418:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000a41c:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000a420:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000a423:	85 db                	test   ebx,ebx
c000a425:	0f 84 c1 06 00 00    	je     c000aaec <sinc_mono_vari_process+0x6e0>
c000a42b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a42e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a431:	0f af c7             	imul   eax,edi
c000a434:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000a437:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a43a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a441:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a448:	0f af c7             	imul   eax,edi
c000a44b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a44e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000a452:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000a455:	8b 00                	mov    eax,DWORD PTR [eax]
c000a457:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a45b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a45f:	68 00 00 70 3f       	push   0x3f700000
c000a464:	6a 00                	push   0x0
c000a466:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a46a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a46e:	e8 3c e1 01 00       	call   c00285af <__ltdf2>
c000a473:	83 c4 10             	add    esp,0x10
c000a476:	ba 16 00 00 00       	mov    edx,0x16
c000a47b:	85 c0                	test   eax,eax
c000a47d:	0f 88 69 06 00 00    	js     c000aaec <sinc_mono_vari_process+0x6e0>
c000a483:	68 00 00 70 40       	push   0x40700000
c000a488:	6a 00                	push   0x0
c000a48a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a48e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a492:	e8 fa e0 01 00       	call   c0028591 <__gtdf2>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	ba 16 00 00 00       	mov    edx,0x16
c000a49f:	85 c0                	test   eax,eax
c000a4a1:	0f 8f 45 06 00 00    	jg     c000aaec <sinc_mono_vari_process+0x6e0>
c000a4a7:	83 ec 0c             	sub    esp,0xc
c000a4aa:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a4ad:	e8 91 de 01 00       	call   c0028343 <__floatsidf>
c000a4b2:	83 c4 10             	add    esp,0x10
c000a4b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4bd:	68 00 00 00 40       	push   0x40000000
c000a4c2:	6a 00                	push   0x0
c000a4c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cc:	e8 92 d1 01 00       	call   c0027663 <__adddf3>
c000a4d1:	59                   	pop    ecx
c000a4d2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a4d6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000a4da:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000a4dd:	e8 61 de 01 00       	call   c0028343 <__floatsidf>
c000a4e2:	83 c4 10             	add    esp,0x10
c000a4e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a4e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a4ed:	52                   	push   edx
c000a4ee:	50                   	push   eax
c000a4ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4f7:	e8 c8 da 01 00       	call   c0027fc4 <__divdf3>
c000a4fc:	83 c4 10             	add    esp,0x10
c000a4ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a503:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a507:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000a50a:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000a50d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a511:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a525:	e8 67 e0 01 00       	call   c0028591 <__gtdf2>
c000a52a:	83 c4 10             	add    esp,0x10
c000a52d:	85 c0                	test   eax,eax
c000a52f:	7e 2d                	jle    c000a55e <sinc_mono_vari_process+0x152>
c000a531:	68 00 00 f0 3f       	push   0x3ff00000
c000a536:	6a 00                	push   0x0
c000a538:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a53c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a540:	e8 6a e0 01 00       	call   c00285af <__ltdf2>
c000a545:	83 c4 10             	add    esp,0x10
c000a548:	85 c0                	test   eax,eax
c000a54a:	79 4d                	jns    c000a599 <sinc_mono_vari_process+0x18d>
c000a54c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a550:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a554:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a558:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a55c:	eb 1b                	jmp    c000a579 <sinc_mono_vari_process+0x16d>
c000a55e:	68 00 00 f0 3f       	push   0x3ff00000
c000a563:	6a 00                	push   0x0
c000a565:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a569:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a56d:	e8 3d e0 01 00       	call   c00285af <__ltdf2>
c000a572:	83 c4 10             	add    esp,0x10
c000a575:	85 c0                	test   eax,eax
c000a577:	79 20                	jns    c000a599 <sinc_mono_vari_process+0x18d>
c000a579:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a57d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a581:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a585:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a589:	e8 36 da 01 00       	call   c0027fc4 <__divdf3>
c000a58e:	83 c4 10             	add    esp,0x10
c000a591:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a595:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a599:	50                   	push   eax
c000a59a:	50                   	push   eax
c000a59b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a59f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a5a3:	e8 b8 e1 01 00       	call   c0028760 <lrint>
c000a5a8:	40                   	inc    eax
c000a5a9:	0f af c7             	imul   eax,edi
c000a5ac:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a5b0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000a5b4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a5b7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000a5ba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5be:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5c2:	58                   	pop    eax
c000a5c3:	5a                   	pop    edx
c000a5c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a5c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a5cc:	e8 8f e1 01 00       	call   c0028760 <lrint>
c000a5d1:	83 ec 0c             	sub    esp,0xc
c000a5d4:	50                   	push   eax
c000a5d5:	e8 69 dd 01 00       	call   c0028343 <__floatsidf>
c000a5da:	83 c4 10             	add    esp,0x10
c000a5dd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5e1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5e5:	52                   	push   edx
c000a5e6:	50                   	push   eax
c000a5e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a5eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a5ef:	e8 c0 d6 01 00       	call   c0027cb4 <__subdf3>
c000a5f4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5f8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5fc:	83 c4 20             	add    esp,0x20
c000a5ff:	6a 00                	push   0x0
c000a601:	6a 00                	push   0x0
c000a603:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a607:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a60b:	e8 9f df 01 00       	call   c00285af <__ltdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	85 c0                	test   eax,eax
c000a615:	79 1f                	jns    c000a636 <sinc_mono_vari_process+0x22a>
c000a617:	68 00 00 f0 3f       	push   0x3ff00000
c000a61c:	6a 00                	push   0x0
c000a61e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a622:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a626:	e8 38 d0 01 00       	call   c0027663 <__adddf3>
c000a62b:	83 c4 10             	add    esp,0x10
c000a62e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a632:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a636:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000a639:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a63c:	83 ec 10             	sub    esp,0x10
c000a63f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a643:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a647:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a64b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a64f:	e8 60 d6 01 00       	call   c0027cb4 <__subdf3>
c000a654:	83 c4 18             	add    esp,0x18
c000a657:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a65b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a65f:	52                   	push   edx
c000a660:	50                   	push   eax
c000a661:	e8 fa e0 01 00       	call   c0028760 <lrint>
c000a666:	0f af f8             	imul   edi,eax
c000a669:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000a66c:	31 ff                	xor    edi,edi
c000a66e:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000a673:	99                   	cdq    
c000a674:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a677:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a67a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a67e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a682:	55                   	push   ebp
c000a683:	57                   	push   edi
c000a684:	e8 3b d9 01 00       	call   c0027fc4 <__divdf3>
c000a689:	83 c4 10             	add    esp,0x10
c000a68c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a690:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a694:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000a699:	68 23 42 92 0c       	push   0xc924223
c000a69e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a6a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a6a6:	e8 b8 cf 01 00       	call   c0027663 <__adddf3>
c000a6ab:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a6af:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a6b3:	83 c4 20             	add    esp,0x20
c000a6b6:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a6ba:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a6be:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a6c1:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a6c4:	7d 54                	jge    c000a71a <sinc_mono_vari_process+0x30e>
c000a6c6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a6c9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a6cc:	01 c8                	add    eax,ecx
c000a6ce:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a6d1:	99                   	cdq    
c000a6d2:	f7 f9                	idiv   ecx
c000a6d4:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000a6d8:	7d 0c                	jge    c000a6e6 <sinc_mono_vari_process+0x2da>
c000a6da:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000a6dd:	85 ff                	test   edi,edi
c000a6df:	79 73                	jns    c000a754 <sinc_mono_vari_process+0x348>
c000a6e1:	e9 ee 00 00 00       	jmp    c000a7d4 <sinc_mono_vari_process+0x3c8>
c000a6e6:	50                   	push   eax
c000a6e7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a6eb:	56                   	push   esi
c000a6ec:	53                   	push   ebx
c000a6ed:	e8 03 3c 00 00       	call   c000e2f5 <prepare_data>
c000a6f2:	89 c2                	mov    edx,eax
c000a6f4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000a6f8:	83 c4 10             	add    esp,0x10
c000a6fb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a6fe:	85 d2                	test   edx,edx
c000a700:	0f 85 e6 03 00 00    	jne    c000aaec <sinc_mono_vari_process+0x6e0>
c000a706:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a709:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a70c:	01 c8                	add    eax,ecx
c000a70e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a711:	99                   	cdq    
c000a712:	f7 f9                	idiv   ecx
c000a714:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000a718:	7c c0                	jl     c000a6da <sinc_mono_vari_process+0x2ce>
c000a71a:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000a71e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a722:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a726:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000a729:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000a72c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a730:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a734:	89 01                	mov    DWORD PTR [ecx],eax
c000a736:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000a739:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a73c:	99                   	cdq    
c000a73d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a740:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a743:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a746:	99                   	cdq    
c000a747:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a74a:	31 d2                	xor    edx,edx
c000a74c:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000a74f:	e9 98 03 00 00       	jmp    c000aaec <sinc_mono_vari_process+0x6e0>
c000a754:	83 ec 0c             	sub    esp,0xc
c000a757:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000a75a:	e8 e4 db 01 00       	call   c0028343 <__floatsidf>
c000a75f:	83 c4 10             	add    esp,0x10
c000a762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a766:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a76a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a76e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a772:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a776:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a77a:	e8 e4 ce 01 00       	call   c0027663 <__adddf3>
c000a77f:	83 c4 10             	add    esp,0x10
c000a782:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a786:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a78a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a78e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a792:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a796:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a79a:	e8 c4 ce 01 00       	call   c0027663 <__adddf3>
c000a79f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a7a2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a7a6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a7aa:	e8 94 db 01 00       	call   c0028343 <__floatsidf>
c000a7af:	83 c4 10             	add    esp,0x10
c000a7b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a7b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a7ba:	52                   	push   edx
c000a7bb:	50                   	push   eax
c000a7bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7c4:	e8 c8 dd 01 00       	call   c0028591 <__gtdf2>
c000a7c9:	83 c4 10             	add    esp,0x10
c000a7cc:	85 c0                	test   eax,eax
c000a7ce:	0f 8f 46 ff ff ff    	jg     c000a71a <sinc_mono_vari_process+0x30e>
c000a7d4:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a7d8:	0f 8e f5 00 00 00    	jle    c000a8d3 <sinc_mono_vari_process+0x4c7>
c000a7de:	83 ec 10             	sub    esp,0x10
c000a7e1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000a7e4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000a7e7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000a7eb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7ee:	ff 30                	push   DWORD PTR [eax]
c000a7f0:	e8 bf d4 01 00       	call   c0027cb4 <__subdf3>
c000a7f5:	83 c4 18             	add    esp,0x18
c000a7f8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a7fc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a800:	52                   	push   edx
c000a801:	50                   	push   eax
c000a802:	e8 39 df 01 00       	call   c0028740 <fabs>
c000a807:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a80b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a80f:	83 c4 10             	add    esp,0x10
c000a812:	68 df 7c db 3d       	push   0x3ddb7cdf
c000a817:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000a81c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a820:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a824:	e8 68 dd 01 00       	call   c0028591 <__gtdf2>
c000a829:	83 c4 10             	add    esp,0x10
c000a82c:	85 c0                	test   eax,eax
c000a82e:	0f 8e 9f 00 00 00    	jle    c000a8d3 <sinc_mono_vari_process+0x4c7>
c000a834:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000a838:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000a83b:	8b 00                	mov    eax,DWORD PTR [eax]
c000a83d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a841:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a845:	52                   	push   edx
c000a846:	50                   	push   eax
c000a847:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000a84a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000a84d:	e8 62 d4 01 00       	call   c0027cb4 <__subdf3>
c000a852:	5f                   	pop    edi
c000a853:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a857:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a85b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a85e:	e8 e0 da 01 00       	call   c0028343 <__floatsidf>
c000a863:	83 c4 10             	add    esp,0x10
c000a866:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a86a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a86e:	52                   	push   edx
c000a86f:	50                   	push   eax
c000a870:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a874:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a878:	e8 63 d4 01 00       	call   c0027ce0 <__muldf3>
c000a87d:	5d                   	pop    ebp
c000a87e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a882:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a886:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000a889:	e8 b5 da 01 00       	call   c0028343 <__floatsidf>
c000a88e:	83 c4 10             	add    esp,0x10
c000a891:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a895:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a899:	52                   	push   edx
c000a89a:	50                   	push   eax
c000a89b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a89f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a8a3:	e8 1c d7 01 00       	call   c0027fc4 <__divdf3>
c000a8a8:	83 c4 10             	add    esp,0x10
c000a8ab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a8af:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8bb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a8bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a8c3:	e8 9b cd 01 00       	call   c0027663 <__adddf3>
c000a8c8:	83 c4 10             	add    esp,0x10
c000a8cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8cf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8d3:	83 ec 0c             	sub    esp,0xc
c000a8d6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000a8d9:	e8 65 da 01 00       	call   c0028343 <__floatsidf>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a8e5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a8e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f9:	e8 b1 dc 01 00       	call   c00285af <__ltdf2>
c000a8fe:	83 c4 10             	add    esp,0x10
c000a901:	85 c0                	test   eax,eax
c000a903:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000a907:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000a90b:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000a90f:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000a913:	78 10                	js     c000a925 <sinc_mono_vari_process+0x519>
c000a915:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a919:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a91d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a921:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a925:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a929:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a92d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a931:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a935:	e8 a6 d3 01 00       	call   c0027ce0 <__muldf3>
c000a93a:	59                   	pop    ecx
c000a93b:	5f                   	pop    edi
c000a93c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a940:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a944:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a948:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a94c:	e8 a2 f6 ff ff       	call   c0009ff3 <double_to_fp>
c000a951:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a955:	89 c7                	mov    edi,eax
c000a957:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a95b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a95f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a963:	e8 78 d3 01 00       	call   c0027ce0 <__muldf3>
c000a968:	83 c4 18             	add    esp,0x18
c000a96b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a96f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a973:	52                   	push   edx
c000a974:	50                   	push   eax
c000a975:	e8 79 f6 ff ff       	call   c0009ff3 <double_to_fp>
c000a97a:	83 ec 0c             	sub    esp,0xc
c000a97d:	89 c5                	mov    ebp,eax
c000a97f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000a982:	e8 bc d9 01 00       	call   c0028343 <__floatsidf>
c000a987:	83 c4 10             	add    esp,0x10
c000a98a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a98e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a992:	52                   	push   edx
c000a993:	50                   	push   eax
c000a994:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a998:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a99c:	e8 23 d6 01 00       	call   c0027fc4 <__divdf3>
c000a9a1:	83 c4 10             	add    esp,0x10
c000a9a4:	89 e9                	mov    ecx,ebp
c000a9a6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a9aa:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a9ae:	89 d8                	mov    eax,ebx
c000a9b0:	89 fa                	mov    edx,edi
c000a9b2:	e8 f9 f7 ff ff       	call   c000a1b0 <calc_output_single>
c000a9b7:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000a9ba:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000a9bd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a9c1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a9c5:	52                   	push   edx
c000a9c6:	50                   	push   eax
c000a9c7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a9cb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a9cf:	e8 0c d3 01 00       	call   c0027ce0 <__muldf3>
c000a9d4:	59                   	pop    ecx
c000a9d5:	59                   	pop    ecx
c000a9d6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a9da:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a9de:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a9e2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a9e6:	e8 c8 db 01 00       	call   c00285b3 <__truncdfsf2>
c000a9eb:	83 c4 10             	add    esp,0x10
c000a9ee:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000a9f1:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a9f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a9f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa00:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa04:	e8 bb d5 01 00       	call   c0027fc4 <__divdf3>
c000aa09:	83 c4 10             	add    esp,0x10
c000aa0c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aa10:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aa14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aa20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aa24:	e8 3a cc 01 00       	call   c0027663 <__adddf3>
c000aa29:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000aa2d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000aa31:	83 c4 18             	add    esp,0x18
c000aa34:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa38:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa3c:	e8 1f dd 01 00       	call   c0028760 <lrint>
c000aa41:	83 ec 0c             	sub    esp,0xc
c000aa44:	50                   	push   eax
c000aa45:	e8 f9 d8 01 00       	call   c0028343 <__floatsidf>
c000aa4a:	83 c4 10             	add    esp,0x10
c000aa4d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000aa51:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000aa55:	52                   	push   edx
c000aa56:	50                   	push   eax
c000aa57:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aa5b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aa5f:	e8 50 d2 01 00       	call   c0027cb4 <__subdf3>
c000aa64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000aa68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000aa6c:	83 c4 20             	add    esp,0x20
c000aa6f:	6a 00                	push   0x0
c000aa71:	6a 00                	push   0x0
c000aa73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa7b:	e8 2f db 01 00       	call   c00285af <__ltdf2>
c000aa80:	83 c4 10             	add    esp,0x10
c000aa83:	85 c0                	test   eax,eax
c000aa85:	79 20                	jns    c000aaa7 <sinc_mono_vari_process+0x69b>
c000aa87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa97:	e8 c7 cb 01 00       	call   c0027663 <__adddf3>
c000aa9c:	83 c4 10             	add    esp,0x10
c000aa9f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aaa3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aaa7:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000aaaa:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000aaad:	83 ec 10             	sub    esp,0x10
c000aab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aab8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aabc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aac0:	e8 ef d1 01 00       	call   c0027cb4 <__subdf3>
c000aac5:	83 c4 18             	add    esp,0x18
c000aac8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000aacc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000aad0:	52                   	push   edx
c000aad1:	50                   	push   eax
c000aad2:	e8 89 dc 01 00       	call   c0028760 <lrint>
c000aad7:	83 c4 10             	add    esp,0x10
c000aada:	0f af f8             	imul   edi,eax
c000aadd:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000aae0:	99                   	cdq    
c000aae1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000aae4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000aae7:	e9 d2 fb ff ff       	jmp    c000a6be <sinc_mono_vari_process+0x2b2>
c000aaec:	83 c4 4c             	add    esp,0x4c
c000aaef:	89 d0                	mov    eax,edx
c000aaf1:	5b                   	pop    ebx
c000aaf2:	5e                   	pop    esi
c000aaf3:	5f                   	pop    edi
c000aaf4:	5d                   	pop    ebp
c000aaf5:	c3                   	ret    

c000aaf6 <calc_output_stereo>:
c000aaf6:	55                   	push   ebp
c000aaf7:	89 cd                	mov    ebp,ecx
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	53                   	push   ebx
c000aafc:	89 c3                	mov    ebx,eax
c000aafe:	83 ec 6c             	sub    esp,0x6c
c000ab01:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ab05:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000ab0c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000ab13:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ab17:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000ab1b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ab1e:	e8 f7 f4 ff ff       	call   c000a01a <int_to_fp>
c000ab23:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000ab2b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ab2f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000ab37:	29 c8                	sub    eax,ecx
c000ab39:	99                   	cdq    
c000ab3a:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000ab3e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ab42:	0f af d0             	imul   edx,eax
c000ab45:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000ab48:	31 d2                	xor    edx,edx
c000ab4a:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000ab4e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ab52:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c000ab55:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000ab59:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c000ab5c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ab60:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000ab64:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000ab67:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000ab6c:	29 c1                	sub    ecx,eax
c000ab6e:	31 c0                	xor    eax,eax
c000ab70:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c000ab73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ab77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ab7b:	83 c7 08             	add    edi,0x8
c000ab7e:	e8 a5 f4 ff ff       	call   c000a028 <fp_to_double>
c000ab83:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000ab87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ab8b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ab8f:	e8 8a f4 ff ff       	call   c000a01e <fp_to_int>
c000ab94:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c000ab97:	52                   	push   edx
c000ab98:	52                   	push   edx
c000ab99:	51                   	push   ecx
c000ab9a:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c000ab9e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aba2:	e8 51 c4 01 00       	call   c0026ff8 <__subsf3>
c000aba7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abaa:	e8 28 db 01 00       	call   c00286d7 <__extendsfdf2>
c000abaf:	83 c4 10             	add    esp,0x10
c000abb2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000abb6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000abba:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000abbe:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000abc2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abc6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abca:	e8 11 d1 01 00       	call   c0027ce0 <__muldf3>
c000abcf:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000abd3:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000abd7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000abda:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000abde:	e8 f4 da 01 00       	call   c00286d7 <__extendsfdf2>
c000abe3:	83 c4 10             	add    esp,0x10
c000abe6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000abea:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000abee:	52                   	push   edx
c000abef:	50                   	push   eax
c000abf0:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000abf4:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000abf8:	e8 66 ca 01 00       	call   c0027663 <__adddf3>
c000abfd:	59                   	pop    ecx
c000abfe:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000ac02:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000ac06:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000ac0c:	e8 c6 da 01 00       	call   c00286d7 <__extendsfdf2>
c000ac11:	83 c4 10             	add    esp,0x10
c000ac14:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ac18:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ac1c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac20:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac24:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac28:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac2c:	e8 af d0 01 00       	call   c0027ce0 <__muldf3>
c000ac31:	83 c4 10             	add    esp,0x10
c000ac34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ac38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ac3c:	52                   	push   edx
c000ac3d:	50                   	push   eax
c000ac3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac46:	e8 18 ca 01 00       	call   c0027663 <__adddf3>
c000ac4b:	59                   	pop    ecx
c000ac4c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ac50:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ac54:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000ac5a:	e8 78 da 01 00       	call   c00286d7 <__extendsfdf2>
c000ac5f:	83 c4 10             	add    esp,0x10
c000ac62:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ac66:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ac6a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac6e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac72:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac76:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac7a:	e8 61 d0 01 00       	call   c0027ce0 <__muldf3>
c000ac7f:	83 c4 10             	add    esp,0x10
c000ac82:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ac86:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000ac8a:	52                   	push   edx
c000ac8b:	50                   	push   eax
c000ac8c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ac90:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ac94:	e8 ca c9 01 00       	call   c0027663 <__adddf3>
c000ac99:	83 c4 10             	add    esp,0x10
c000ac9c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000aca0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000aca4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000aca8:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c000acac:	0f 89 c5 fe ff ff    	jns    c000ab77 <calc_output_stereo+0x81>
c000acb2:	29 e9                	sub    ecx,ebp
c000acb4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000acb8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000acbc:	29 c8                	sub    eax,ecx
c000acbe:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000acc6:	99                   	cdq    
c000acc7:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000accb:	31 d2                	xor    edx,edx
c000accd:	0f af f8             	imul   edi,eax
c000acd0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000acd4:	40                   	inc    eax
c000acd5:	01 cf                	add    edi,ecx
c000acd7:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000acdc:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c000ace0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000ace8:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000aceb:	31 c0                	xor    eax,eax
c000aced:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000acf1:	89 f8                	mov    eax,edi
c000acf3:	83 eb 08             	sub    ebx,0x8
c000acf6:	e8 2d f3 ff ff       	call   c000a028 <fp_to_double>
c000acfb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000acff:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ad03:	89 f8                	mov    eax,edi
c000ad05:	e8 14 f3 ff ff       	call   c000a01e <fp_to_int>
c000ad0a:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c000ad0d:	52                   	push   edx
c000ad0e:	52                   	push   edx
c000ad0f:	55                   	push   ebp
c000ad10:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad14:	e8 df c2 01 00       	call   c0026ff8 <__subsf3>
c000ad19:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad1c:	e8 b6 d9 01 00       	call   c00286d7 <__extendsfdf2>
c000ad21:	83 c4 10             	add    esp,0x10
c000ad24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ad30:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ad34:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad38:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad3c:	e8 9f cf 01 00       	call   c0027ce0 <__muldf3>
c000ad41:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ad44:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ad48:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000ad4c:	e8 86 d9 01 00       	call   c00286d7 <__extendsfdf2>
c000ad51:	83 c4 10             	add    esp,0x10
c000ad54:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad58:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad5c:	52                   	push   edx
c000ad5d:	50                   	push   eax
c000ad5e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ad62:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ad66:	e8 f8 c8 01 00       	call   c0027663 <__adddf3>
c000ad6b:	59                   	pop    ecx
c000ad6c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ad70:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000ad74:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000ad7a:	e8 58 d9 01 00       	call   c00286d7 <__extendsfdf2>
c000ad7f:	83 c4 10             	add    esp,0x10
c000ad82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad86:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ad8e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ad92:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad96:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad9a:	e8 41 cf 01 00       	call   c0027ce0 <__muldf3>
c000ad9f:	83 c4 10             	add    esp,0x10
c000ada2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ada6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adaa:	52                   	push   edx
c000adab:	50                   	push   eax
c000adac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000adb0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000adb4:	e8 aa c8 01 00       	call   c0027663 <__adddf3>
c000adb9:	5d                   	pop    ebp
c000adba:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000adbe:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000adc2:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000adc8:	e8 0a d9 01 00       	call   c00286d7 <__extendsfdf2>
c000adcd:	83 c4 10             	add    esp,0x10
c000add0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000add4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000add8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000addc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ade0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ade4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ade8:	e8 f3 ce 01 00       	call   c0027ce0 <__muldf3>
c000aded:	83 c4 10             	add    esp,0x10
c000adf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000adf8:	52                   	push   edx
c000adf9:	50                   	push   eax
c000adfa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adfe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae02:	e8 5c c8 01 00       	call   c0027663 <__adddf3>
c000ae07:	83 c4 10             	add    esp,0x10
c000ae0a:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c000ae0e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ae12:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ae16:	85 ff                	test   edi,edi
c000ae18:	0f 8f d3 fe ff ff    	jg     c000acf1 <calc_output_stereo+0x1fb>
c000ae1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae2e:	e8 30 c8 01 00       	call   c0027663 <__adddf3>
c000ae33:	83 c4 10             	add    esp,0x10
c000ae36:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ae3a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ae3e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae42:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae4e:	e8 8d ce 01 00       	call   c0027ce0 <__muldf3>
c000ae53:	59                   	pop    ecx
c000ae54:	5b                   	pop    ebx
c000ae55:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae59:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae65:	e8 49 d7 01 00       	call   c00285b3 <__truncdfsf2>
c000ae6a:	83 c4 10             	add    esp,0x10
c000ae6d:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c000ae74:	89 03                	mov    DWORD PTR [ebx],eax
c000ae76:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ae7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ae7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ae82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ae86:	e8 d8 c7 01 00       	call   c0027663 <__adddf3>
c000ae8b:	83 c4 10             	add    esp,0x10
c000ae8e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ae92:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ae96:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae9a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	e8 35 ce 01 00       	call   c0027ce0 <__muldf3>
c000aeab:	5e                   	pop    esi
c000aeac:	5f                   	pop    edi
c000aead:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aeb1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aeb5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeb9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aebd:	e8 f1 d6 01 00       	call   c00285b3 <__truncdfsf2>
c000aec2:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c000aec9:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000aecc:	83 c4 7c             	add    esp,0x7c
c000aecf:	5b                   	pop    ebx
c000aed0:	5e                   	pop    esi
c000aed1:	5f                   	pop    edi
c000aed2:	5d                   	pop    ebp
c000aed3:	c3                   	ret    

c000aed4 <sinc_stereo_vari_process>:
c000aed4:	55                   	push   ebp
c000aed5:	ba 05 00 00 00       	mov    edx,0x5
c000aeda:	57                   	push   edi
c000aedb:	56                   	push   esi
c000aedc:	53                   	push   ebx
c000aedd:	83 ec 4c             	sub    esp,0x4c
c000aee0:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000aee4:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000aee8:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000aeeb:	85 db                	test   ebx,ebx
c000aeed:	0f 84 9c 06 00 00    	je     c000b58f <sinc_stereo_vari_process+0x6bb>
c000aef3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000aef6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000aef9:	0f af c7             	imul   eax,edi
c000aefc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000aeff:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000af02:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000af09:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000af10:	0f af c7             	imul   eax,edi
c000af13:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000af16:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000af19:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000af1c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000af20:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000af24:	68 00 00 70 3f       	push   0x3f700000
c000af29:	6a 00                	push   0x0
c000af2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af33:	e8 77 d6 01 00       	call   c00285af <__ltdf2>
c000af38:	83 c4 10             	add    esp,0x10
c000af3b:	ba 16 00 00 00       	mov    edx,0x16
c000af40:	85 c0                	test   eax,eax
c000af42:	0f 88 47 06 00 00    	js     c000b58f <sinc_stereo_vari_process+0x6bb>
c000af48:	68 00 00 70 40       	push   0x40700000
c000af4d:	6a 00                	push   0x0
c000af4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af57:	e8 35 d6 01 00       	call   c0028591 <__gtdf2>
c000af5c:	83 c4 10             	add    esp,0x10
c000af5f:	ba 16 00 00 00       	mov    edx,0x16
c000af64:	85 c0                	test   eax,eax
c000af66:	0f 8f 23 06 00 00    	jg     c000b58f <sinc_stereo_vari_process+0x6bb>
c000af6c:	83 ec 0c             	sub    esp,0xc
c000af6f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000af72:	e8 cc d3 01 00       	call   c0028343 <__floatsidf>
c000af77:	83 c4 10             	add    esp,0x10
c000af7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000af82:	68 00 00 00 40       	push   0x40000000
c000af87:	6a 00                	push   0x0
c000af89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af91:	e8 cd c6 01 00       	call   c0027663 <__adddf3>
c000af96:	59                   	pop    ecx
c000af97:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000af9b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000af9f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000afa2:	e8 9c d3 01 00       	call   c0028343 <__floatsidf>
c000afa7:	83 c4 10             	add    esp,0x10
c000afaa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000afae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000afb2:	52                   	push   edx
c000afb3:	50                   	push   eax
c000afb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afbc:	e8 03 d0 01 00       	call   c0027fc4 <__divdf3>
c000afc1:	83 c4 10             	add    esp,0x10
c000afc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000afc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000afcc:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000afcf:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000afd2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000afd6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000afda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afe2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afe6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afea:	e8 a2 d5 01 00       	call   c0028591 <__gtdf2>
c000afef:	83 c4 10             	add    esp,0x10
c000aff2:	85 c0                	test   eax,eax
c000aff4:	7e 2d                	jle    c000b023 <sinc_stereo_vari_process+0x14f>
c000aff6:	68 00 00 f0 3f       	push   0x3ff00000
c000affb:	6a 00                	push   0x0
c000affd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b005:	e8 a5 d5 01 00       	call   c00285af <__ltdf2>
c000b00a:	83 c4 10             	add    esp,0x10
c000b00d:	85 c0                	test   eax,eax
c000b00f:	79 4d                	jns    c000b05e <sinc_stereo_vari_process+0x18a>
c000b011:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b015:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b019:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b01d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b021:	eb 1b                	jmp    c000b03e <sinc_stereo_vari_process+0x16a>
c000b023:	68 00 00 f0 3f       	push   0x3ff00000
c000b028:	6a 00                	push   0x0
c000b02a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b02e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b032:	e8 78 d5 01 00       	call   c00285af <__ltdf2>
c000b037:	83 c4 10             	add    esp,0x10
c000b03a:	85 c0                	test   eax,eax
c000b03c:	79 20                	jns    c000b05e <sinc_stereo_vari_process+0x18a>
c000b03e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b042:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b046:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b04e:	e8 71 cf 01 00       	call   c0027fc4 <__divdf3>
c000b053:	83 c4 10             	add    esp,0x10
c000b056:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b05a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b05e:	50                   	push   eax
c000b05f:	50                   	push   eax
c000b060:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b064:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b068:	e8 f3 d6 01 00       	call   c0028760 <lrint>
c000b06d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b070:	40                   	inc    eax
c000b071:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b075:	0f af c7             	imul   eax,edi
c000b078:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b07c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b07f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b083:	58                   	pop    eax
c000b084:	5a                   	pop    edx
c000b085:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b089:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b08d:	e8 ce d6 01 00       	call   c0028760 <lrint>
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	50                   	push   eax
c000b096:	e8 a8 d2 01 00       	call   c0028343 <__floatsidf>
c000b09b:	83 c4 10             	add    esp,0x10
c000b09e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b0a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b0a6:	52                   	push   edx
c000b0a7:	50                   	push   eax
c000b0a8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0b0:	e8 ff cb 01 00       	call   c0027cb4 <__subdf3>
c000b0b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0bd:	83 c4 20             	add    esp,0x20
c000b0c0:	6a 00                	push   0x0
c000b0c2:	6a 00                	push   0x0
c000b0c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0cc:	e8 de d4 01 00       	call   c00285af <__ltdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	85 c0                	test   eax,eax
c000b0d6:	79 1f                	jns    c000b0f7 <sinc_stereo_vari_process+0x223>
c000b0d8:	68 00 00 f0 3f       	push   0x3ff00000
c000b0dd:	6a 00                	push   0x0
c000b0df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e7:	e8 77 c5 01 00       	call   c0027663 <__adddf3>
c000b0ec:	83 c4 10             	add    esp,0x10
c000b0ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b0f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b0f7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000b0fa:	83 ec 10             	sub    esp,0x10
c000b0fd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b101:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000b104:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b108:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b10c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b110:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b114:	e8 9b cb 01 00       	call   c0027cb4 <__subdf3>
c000b119:	83 c4 18             	add    esp,0x18
c000b11c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b124:	52                   	push   edx
c000b125:	50                   	push   eax
c000b126:	e8 35 d6 01 00       	call   c0028760 <lrint>
c000b12b:	0f af f8             	imul   edi,eax
c000b12e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b132:	01 f8                	add    eax,edi
c000b134:	99                   	cdq    
c000b135:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000b138:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000b13b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b13f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b143:	68 00 00 f0 3f       	push   0x3ff00000
c000b148:	6a 00                	push   0x0
c000b14a:	e8 75 ce 01 00       	call   c0027fc4 <__divdf3>
c000b14f:	83 c4 10             	add    esp,0x10
c000b152:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b156:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b15a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000b15f:	68 23 42 92 0c       	push   0xc924223
c000b164:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b168:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b16c:	e8 f2 c4 01 00       	call   c0027663 <__adddf3>
c000b171:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000b175:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000b179:	83 c4 20             	add    esp,0x20
c000b17c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b184:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000b18c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000b18f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000b192:	7d 50                	jge    c000b1e4 <sinc_stereo_vari_process+0x310>
c000b194:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b197:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b19a:	01 c8                	add    eax,ecx
c000b19c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000b19f:	99                   	cdq    
c000b1a0:	f7 f9                	idiv   ecx
c000b1a2:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000b1a6:	7d 0c                	jge    c000b1b4 <sinc_stereo_vari_process+0x2e0>
c000b1a8:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	79 6c                	jns    c000b21b <sinc_stereo_vari_process+0x347>
c000b1af:	e9 e7 00 00 00       	jmp    c000b29b <sinc_stereo_vari_process+0x3c7>
c000b1b4:	50                   	push   eax
c000b1b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b1b9:	56                   	push   esi
c000b1ba:	53                   	push   ebx
c000b1bb:	e8 35 31 00 00       	call   c000e2f5 <prepare_data>
c000b1c0:	83 c4 10             	add    esp,0x10
c000b1c3:	89 c2                	mov    edx,eax
c000b1c5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000b1c8:	85 c0                	test   eax,eax
c000b1ca:	0f 85 bf 03 00 00    	jne    c000b58f <sinc_stereo_vari_process+0x6bb>
c000b1d0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b1d3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b1d6:	01 c8                	add    eax,ecx
c000b1d8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000b1db:	99                   	cdq    
c000b1dc:	f7 f9                	idiv   ecx
c000b1de:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000b1e2:	7c c4                	jl     c000b1a8 <sinc_stereo_vari_process+0x2d4>
c000b1e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b1e8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b1ec:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000b1ef:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000b1f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b1fa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1fd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b200:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b203:	99                   	cdq    
c000b204:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b207:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000b20a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000b20d:	99                   	cdq    
c000b20e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b211:	31 d2                	xor    edx,edx
c000b213:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000b216:	e9 74 03 00 00       	jmp    c000b58f <sinc_stereo_vari_process+0x6bb>
c000b21b:	83 ec 0c             	sub    esp,0xc
c000b21e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b221:	e8 1d d1 01 00       	call   c0028343 <__floatsidf>
c000b226:	83 c4 10             	add    esp,0x10
c000b229:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b22d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b231:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b235:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b239:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b23d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b241:	e8 1d c4 01 00       	call   c0027663 <__adddf3>
c000b246:	83 c4 10             	add    esp,0x10
c000b249:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b24d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b251:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b255:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b259:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b25d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b261:	e8 fd c3 01 00       	call   c0027663 <__adddf3>
c000b266:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b269:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b26d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000b271:	e8 cd d0 01 00       	call   c0028343 <__floatsidf>
c000b276:	83 c4 10             	add    esp,0x10
c000b279:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b27d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b281:	52                   	push   edx
c000b282:	50                   	push   eax
c000b283:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b287:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b28b:	e8 1d d3 01 00       	call   c00285ad <__gedf2>
c000b290:	83 c4 10             	add    esp,0x10
c000b293:	85 c0                	test   eax,eax
c000b295:	0f 89 49 ff ff ff    	jns    c000b1e4 <sinc_stereo_vari_process+0x310>
c000b29b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000b29f:	0f 8e ef 00 00 00    	jle    c000b394 <sinc_stereo_vari_process+0x4c0>
c000b2a5:	83 ec 10             	sub    esp,0x10
c000b2a8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000b2ab:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000b2ae:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b4:	e8 fb c9 01 00       	call   c0027cb4 <__subdf3>
c000b2b9:	83 c4 18             	add    esp,0x18
c000b2bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2c4:	52                   	push   edx
c000b2c5:	50                   	push   eax
c000b2c6:	e8 75 d4 01 00       	call   c0028740 <fabs>
c000b2cb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b2cf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000b2d3:	83 c4 10             	add    esp,0x10
c000b2d6:	68 df 7c db 3d       	push   0x3ddb7cdf
c000b2db:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000b2e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b2e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b2e8:	e8 a4 d2 01 00       	call   c0028591 <__gtdf2>
c000b2ed:	83 c4 10             	add    esp,0x10
c000b2f0:	85 c0                	test   eax,eax
c000b2f2:	0f 8e 9c 00 00 00    	jle    c000b394 <sinc_stereo_vari_process+0x4c0>
c000b2f8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b2fb:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000b2fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b302:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b306:	52                   	push   edx
c000b307:	50                   	push   eax
c000b308:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000b30b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000b30e:	e8 a1 c9 01 00       	call   c0027cb4 <__subdf3>
c000b313:	59                   	pop    ecx
c000b314:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b318:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000b31c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b31f:	e8 1f d0 01 00       	call   c0028343 <__floatsidf>
c000b324:	83 c4 10             	add    esp,0x10
c000b327:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b32b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32f:	52                   	push   edx
c000b330:	50                   	push   eax
c000b331:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b335:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b339:	e8 a2 c9 01 00       	call   c0027ce0 <__muldf3>
c000b33e:	5f                   	pop    edi
c000b33f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b343:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000b347:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000b34a:	e8 f4 cf 01 00       	call   c0028343 <__floatsidf>
c000b34f:	83 c4 10             	add    esp,0x10
c000b352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b35a:	52                   	push   edx
c000b35b:	50                   	push   eax
c000b35c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b360:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b364:	e8 5b cc 01 00       	call   c0027fc4 <__divdf3>
c000b369:	83 c4 10             	add    esp,0x10
c000b36c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b370:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b374:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b37c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b380:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b384:	e8 da c2 01 00       	call   c0027663 <__adddf3>
c000b389:	83 c4 10             	add    esp,0x10
c000b38c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b390:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b394:	83 ec 0c             	sub    esp,0xc
c000b397:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b39a:	e8 a4 cf 01 00       	call   c0028343 <__floatsidf>
c000b39f:	83 c4 10             	add    esp,0x10
c000b3a2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3ba:	e8 f0 d1 01 00       	call   c00285af <__ltdf2>
c000b3bf:	83 c4 10             	add    esp,0x10
c000b3c2:	85 c0                	test   eax,eax
c000b3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b3c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b3cc:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000b3d0:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b3d4:	78 10                	js     c000b3e6 <sinc_stereo_vari_process+0x512>
c000b3d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b3da:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b3de:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b3e2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b3e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b3ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b3ee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f6:	e8 e5 c8 01 00       	call   c0027ce0 <__muldf3>
c000b3fb:	59                   	pop    ecx
c000b3fc:	5f                   	pop    edi
c000b3fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b405:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b409:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b40d:	e8 e1 eb ff ff       	call   c0009ff3 <double_to_fp>
c000b412:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b416:	89 c7                	mov    edi,eax
c000b418:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b420:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b424:	e8 b7 c8 01 00       	call   c0027ce0 <__muldf3>
c000b429:	83 c4 18             	add    esp,0x18
c000b42c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000b430:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b434:	52                   	push   edx
c000b435:	50                   	push   eax
c000b436:	e8 b8 eb ff ff       	call   c0009ff3 <double_to_fp>
c000b43b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000b43e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b442:	83 c4 0c             	add    esp,0xc
c000b445:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000b448:	8d 04 90             	lea    eax,[eax+edx*4]
c000b44b:	50                   	push   eax
c000b44c:	50                   	push   eax
c000b44d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b450:	e8 ee ce 01 00       	call   c0028343 <__floatsidf>
c000b455:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b459:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b45d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b461:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b465:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b469:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b46d:	e8 52 cb 01 00       	call   c0027fc4 <__divdf3>
c000b472:	83 c4 18             	add    esp,0x18
c000b475:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b479:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b47d:	52                   	push   edx
c000b47e:	89 fa                	mov    edx,edi
c000b480:	50                   	push   eax
c000b481:	89 d8                	mov    eax,ebx
c000b483:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000b487:	e8 6a f6 ff ff       	call   c000aaf6 <calc_output_stereo>
c000b48c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000b490:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b494:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b498:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b49c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4a0:	e8 1f cb 01 00       	call   c0027fc4 <__divdf3>
c000b4a5:	83 c4 10             	add    esp,0x10
c000b4a8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b4ac:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000b4b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b4bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b4c0:	e8 9e c1 01 00       	call   c0027663 <__adddf3>
c000b4c5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000b4c9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b4cd:	83 c4 18             	add    esp,0x18
c000b4d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b4d4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b4d8:	e8 83 d2 01 00       	call   c0028760 <lrint>
c000b4dd:	83 ec 0c             	sub    esp,0xc
c000b4e0:	50                   	push   eax
c000b4e1:	e8 5d ce 01 00       	call   c0028343 <__floatsidf>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b4ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b4f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b4fb:	e8 b4 c7 01 00       	call   c0027cb4 <__subdf3>
c000b500:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b504:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b508:	83 c4 20             	add    esp,0x20
c000b50b:	6a 00                	push   0x0
c000b50d:	6a 00                	push   0x0
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b517:	e8 93 d0 01 00       	call   c00285af <__ltdf2>
c000b51c:	83 c4 10             	add    esp,0x10
c000b51f:	85 c0                	test   eax,eax
c000b521:	79 20                	jns    c000b543 <sinc_stereo_vari_process+0x66f>
c000b523:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b52b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b52f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b533:	e8 2b c1 01 00       	call   c0027663 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b53f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b543:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000b546:	83 ec 10             	sub    esp,0x10
c000b549:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b54d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000b550:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b554:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b558:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b55c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b560:	e8 4f c7 01 00       	call   c0027cb4 <__subdf3>
c000b565:	83 c4 18             	add    esp,0x18
c000b568:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b570:	52                   	push   edx
c000b571:	50                   	push   eax
c000b572:	e8 e9 d1 01 00       	call   c0028760 <lrint>
c000b577:	0f af f8             	imul   edi,eax
c000b57a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b57e:	83 c4 10             	add    esp,0x10
c000b581:	01 f8                	add    eax,edi
c000b583:	99                   	cdq    
c000b584:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000b587:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000b58a:	e9 fd fb ff ff       	jmp    c000b18c <sinc_stereo_vari_process+0x2b8>
c000b58f:	83 c4 4c             	add    esp,0x4c
c000b592:	89 d0                	mov    eax,edx
c000b594:	5b                   	pop    ebx
c000b595:	5e                   	pop    esi
c000b596:	5f                   	pop    edi
c000b597:	5d                   	pop    ebp
c000b598:	c3                   	ret    

c000b599 <calc_output_quad>:
c000b599:	55                   	push   ebp
c000b59a:	57                   	push   edi
c000b59b:	56                   	push   esi
c000b59c:	89 c6                	mov    esi,eax
c000b59e:	53                   	push   ebx
c000b59f:	83 ec 7c             	sub    esp,0x7c
c000b5a2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b5a6:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000b5aa:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000b5b1:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c000b5b8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5c0:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000b5c3:	e8 52 ea ff ff       	call   c000a01a <int_to_fp>
c000b5c8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000b5cb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000b5ce:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000b5d2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000b5d6:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000b5da:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000b5de:	99                   	cdq    
c000b5df:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000b5e3:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000b5e7:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c000b5ea:	31 d2                	xor    edx,edx
c000b5ec:	0f af d8             	imul   ebx,eax
c000b5ef:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000b5f7:	0f af c7             	imul   eax,edi
c000b5fa:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c000b5fe:	29 c1                	sub    ecx,eax
c000b600:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000b608:	31 c0                	xor    eax,eax
c000b60a:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c000b60d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b611:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000b615:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b619:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b61d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b621:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b625:	89 d8                	mov    eax,ebx
c000b627:	83 c7 10             	add    edi,0x10
c000b62a:	e8 f9 e9 ff ff       	call   c000a028 <fp_to_double>
c000b62f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b633:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b637:	89 d8                	mov    eax,ebx
c000b639:	e8 e0 e9 ff ff       	call   c000a01e <fp_to_int>
c000b63e:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c000b642:	52                   	push   edx
c000b643:	52                   	push   edx
c000b644:	51                   	push   ecx
c000b645:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000b649:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000b64d:	e8 a6 b9 01 00       	call   c0026ff8 <__subsf3>
c000b652:	89 04 24             	mov    DWORD PTR [esp],eax
c000b655:	e8 7d d0 01 00       	call   c00286d7 <__extendsfdf2>
c000b65a:	83 c4 10             	add    esp,0x10
c000b65d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000b661:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000b665:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b669:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b66d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000b671:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000b675:	e8 66 c6 01 00       	call   c0027ce0 <__muldf3>
c000b67a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000b67e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b682:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000b685:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b689:	e8 49 d0 01 00       	call   c00286d7 <__extendsfdf2>
c000b68e:	83 c4 10             	add    esp,0x10
c000b691:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000b695:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000b699:	52                   	push   edx
c000b69a:	50                   	push   eax
c000b69b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b69f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b6a3:	e8 bb bf 01 00       	call   c0027663 <__adddf3>
c000b6a8:	59                   	pop    ecx
c000b6a9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b6ad:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000b6b1:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000b6b7:	e8 1b d0 01 00       	call   c00286d7 <__extendsfdf2>
c000b6bc:	83 c4 10             	add    esp,0x10
c000b6bf:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000b6c3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000b6c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6cf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000b6d3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000b6d7:	e8 04 c6 01 00       	call   c0027ce0 <__muldf3>
c000b6dc:	83 c4 10             	add    esp,0x10
c000b6df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000b6e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000b6e7:	52                   	push   edx
c000b6e8:	50                   	push   eax
c000b6e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b6ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b6f1:	e8 6d bf 01 00       	call   c0027663 <__adddf3>
c000b6f6:	59                   	pop    ecx
c000b6f7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b6fb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000b6ff:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000b705:	e8 cd cf 01 00       	call   c00286d7 <__extendsfdf2>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000b711:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000b721:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000b725:	e8 b6 c5 01 00       	call   c0027ce0 <__muldf3>
c000b72a:	83 c4 10             	add    esp,0x10
c000b72d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000b731:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000b735:	52                   	push   edx
c000b736:	50                   	push   eax
c000b737:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b73b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b73f:	e8 1f bf 01 00       	call   c0027663 <__adddf3>
c000b744:	59                   	pop    ecx
c000b745:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b749:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000b74d:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000b753:	e8 7f cf 01 00       	call   c00286d7 <__extendsfdf2>
c000b758:	83 c4 10             	add    esp,0x10
c000b75b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000b75f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000b763:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b767:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b76b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000b76f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000b773:	e8 68 c5 01 00       	call   c0027ce0 <__muldf3>
c000b778:	83 c4 10             	add    esp,0x10
c000b77b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000b77f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000b783:	52                   	push   edx
c000b784:	50                   	push   eax
c000b785:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b789:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b78d:	e8 d1 be 01 00       	call   c0027663 <__adddf3>
c000b792:	59                   	pop    ecx
c000b793:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b797:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000b79b:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000b7a1:	e8 31 cf 01 00       	call   c00286d7 <__extendsfdf2>
c000b7a6:	83 c4 10             	add    esp,0x10
c000b7a9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000b7ad:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000b7b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7b9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000b7bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000b7c1:	e8 1a c5 01 00       	call   c0027ce0 <__muldf3>
c000b7c6:	83 c4 10             	add    esp,0x10
c000b7c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b7cd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b7d1:	52                   	push   edx
c000b7d2:	50                   	push   eax
c000b7d3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b7d7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b7db:	e8 83 be 01 00       	call   c0027663 <__adddf3>
c000b7e0:	83 c4 10             	add    esp,0x10
c000b7e3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b7e7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000b7eb:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000b7ef:	0f 89 30 fe ff ff    	jns    c000b625 <calc_output_quad+0x8c>
c000b7f5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b7f9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b7fd:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000b801:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b805:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000b80d:	29 c8                	sub    eax,ecx
c000b80f:	99                   	cdq    
c000b810:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000b814:	31 d2                	xor    edx,edx
c000b816:	0f af d8             	imul   ebx,eax
c000b819:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000b81d:	40                   	inc    eax
c000b81e:	01 cb                	add    ebx,ecx
c000b820:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000b825:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000b829:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000b82d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b831:	8d 34 86             	lea    esi,[esi+eax*4]
c000b834:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000b83c:	31 c0                	xor    eax,eax
c000b83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000b842:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000b846:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b84a:	89 d8                	mov    eax,ebx
c000b84c:	83 ee 10             	sub    esi,0x10
c000b84f:	e8 d4 e7 ff ff       	call   c000a028 <fp_to_double>
c000b854:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b858:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b85c:	89 d8                	mov    eax,ebx
c000b85e:	e8 bb e7 ff ff       	call   c000a01e <fp_to_int>
c000b863:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000b867:	52                   	push   edx
c000b868:	52                   	push   edx
c000b869:	57                   	push   edi
c000b86a:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000b86e:	e8 85 b7 01 00       	call   c0026ff8 <__subsf3>
c000b873:	89 04 24             	mov    DWORD PTR [esp],eax
c000b876:	e8 5c ce 01 00       	call   c00286d7 <__extendsfdf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000b882:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000b886:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000b892:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000b896:	e8 45 c4 01 00       	call   c0027ce0 <__muldf3>
c000b89b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b89e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b8a2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b8a6:	e8 2c ce 01 00       	call   c00286d7 <__extendsfdf2>
c000b8ab:	83 c4 10             	add    esp,0x10
c000b8ae:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000b8b2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000b8b6:	52                   	push   edx
c000b8b7:	50                   	push   eax
c000b8b8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b8bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b8c0:	e8 9e bd 01 00       	call   c0027663 <__adddf3>
c000b8c5:	59                   	pop    ecx
c000b8c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b8ca:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000b8ce:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000b8d4:	e8 fe cd 01 00       	call   c00286d7 <__extendsfdf2>
c000b8d9:	83 c4 10             	add    esp,0x10
c000b8dc:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000b8e0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000b8e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8ec:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000b8f0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000b8f4:	e8 e7 c3 01 00       	call   c0027ce0 <__muldf3>
c000b8f9:	83 c4 10             	add    esp,0x10
c000b8fc:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000b900:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000b904:	52                   	push   edx
c000b905:	50                   	push   eax
c000b906:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b90a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b90e:	e8 50 bd 01 00       	call   c0027663 <__adddf3>
c000b913:	5f                   	pop    edi
c000b914:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000b918:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000b91c:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000b922:	e8 b0 cd 01 00       	call   c00286d7 <__extendsfdf2>
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000b92e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000b932:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b936:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b93a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000b93e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000b942:	e8 99 c3 01 00       	call   c0027ce0 <__muldf3>
c000b947:	83 c4 10             	add    esp,0x10
c000b94a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000b94e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000b952:	52                   	push   edx
c000b953:	50                   	push   eax
c000b954:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b958:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b95c:	e8 02 bd 01 00       	call   c0027663 <__adddf3>
c000b961:	59                   	pop    ecx
c000b962:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000b966:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000b96a:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000b970:	e8 62 cd 01 00       	call   c00286d7 <__extendsfdf2>
c000b975:	83 c4 10             	add    esp,0x10
c000b978:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000b97c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000b980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b984:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b988:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000b98c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000b990:	e8 4b c3 01 00       	call   c0027ce0 <__muldf3>
c000b995:	83 c4 10             	add    esp,0x10
c000b998:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000b99c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000b9a0:	52                   	push   edx
c000b9a1:	50                   	push   eax
c000b9a2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b9a6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b9aa:	e8 b4 bc 01 00       	call   c0027663 <__adddf3>
c000b9af:	5f                   	pop    edi
c000b9b0:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000b9b4:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000b9b8:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000b9be:	e8 14 cd 01 00       	call   c00286d7 <__extendsfdf2>
c000b9c3:	83 c4 10             	add    esp,0x10
c000b9c6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000b9ca:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000b9ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000b9da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000b9de:	e8 fd c2 01 00       	call   c0027ce0 <__muldf3>
c000b9e3:	83 c4 10             	add    esp,0x10
c000b9e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9ea:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9ee:	52                   	push   edx
c000b9ef:	50                   	push   eax
c000b9f0:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b9f4:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b9f8:	e8 66 bc 01 00       	call   c0027663 <__adddf3>
c000b9fd:	83 c4 10             	add    esp,0x10
c000ba00:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000ba04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ba08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000ba0c:	85 db                	test   ebx,ebx
c000ba0e:	0f 8f 36 fe ff ff    	jg     c000b84a <calc_output_quad+0x2b1>
c000ba14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ba18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ba1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ba20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ba24:	e8 3a bc 01 00       	call   c0027663 <__adddf3>
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba30:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba44:	e8 97 c2 01 00       	call   c0027ce0 <__muldf3>
c000ba49:	59                   	pop    ecx
c000ba4a:	5b                   	pop    ebx
c000ba4b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba4f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba5b:	e8 53 cb 01 00       	call   c00285b3 <__truncdfsf2>
c000ba60:	83 c4 10             	add    esp,0x10
c000ba63:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000ba6a:	89 06                	mov    DWORD PTR [esi],eax
c000ba6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ba70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ba74:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ba78:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ba7c:	e8 e2 bb 01 00       	call   c0027663 <__adddf3>
c000ba81:	83 c4 10             	add    esp,0x10
c000ba84:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba88:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba90:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba94:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba9c:	e8 3f c2 01 00       	call   c0027ce0 <__muldf3>
c000baa1:	5e                   	pop    esi
c000baa2:	5f                   	pop    edi
c000baa3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000baa7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000baab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baaf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bab3:	e8 fb ca 01 00       	call   c00285b3 <__truncdfsf2>
c000bab8:	83 c4 10             	add    esp,0x10
c000babb:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000bac2:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000bac5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bac9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bacd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bad1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bad5:	e8 89 bb 01 00       	call   c0027663 <__adddf3>
c000bada:	83 c4 10             	add    esp,0x10
c000badd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bae1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bae9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf5:	e8 e6 c1 01 00       	call   c0027ce0 <__muldf3>
c000bafa:	5d                   	pop    ebp
c000bafb:	59                   	pop    ecx
c000bafc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bb00:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bb04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb0c:	e8 a2 ca 01 00       	call   c00285b3 <__truncdfsf2>
c000bb11:	83 c4 10             	add    esp,0x10
c000bb14:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000bb1b:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bb1e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bb22:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bb26:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bb2a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bb2e:	e8 30 bb 01 00       	call   c0027663 <__adddf3>
c000bb33:	83 c4 10             	add    esp,0x10
c000bb36:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb3a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4e:	e8 8d c1 01 00       	call   c0027ce0 <__muldf3>
c000bb53:	5b                   	pop    ebx
c000bb54:	5e                   	pop    esi
c000bb55:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bb59:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bb5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb65:	e8 49 ca 01 00       	call   c00285b3 <__truncdfsf2>
c000bb6a:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000bb71:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000bb74:	81 c4 8c 00 00 00    	add    esp,0x8c
c000bb7a:	5b                   	pop    ebx
c000bb7b:	5e                   	pop    esi
c000bb7c:	5f                   	pop    edi
c000bb7d:	5d                   	pop    ebp
c000bb7e:	c3                   	ret    

c000bb7f <sinc_quad_vari_process>:
c000bb7f:	55                   	push   ebp
c000bb80:	ba 05 00 00 00       	mov    edx,0x5
c000bb85:	57                   	push   edi
c000bb86:	56                   	push   esi
c000bb87:	53                   	push   ebx
c000bb88:	83 ec 4c             	sub    esp,0x4c
c000bb8b:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bb8f:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bb93:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000bb96:	85 db                	test   ebx,ebx
c000bb98:	0f 84 9c 06 00 00    	je     c000c23a <sinc_quad_vari_process+0x6bb>
c000bb9e:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bba1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bba4:	0f af c7             	imul   eax,edi
c000bba7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bbaa:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000bbad:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bbb4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bbbb:	0f af c7             	imul   eax,edi
c000bbbe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bbc1:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bbc4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bbc7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bbcb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bbcf:	68 00 00 70 3f       	push   0x3f700000
c000bbd4:	6a 00                	push   0x0
c000bbd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbde:	e8 cc c9 01 00       	call   c00285af <__ltdf2>
c000bbe3:	83 c4 10             	add    esp,0x10
c000bbe6:	ba 16 00 00 00       	mov    edx,0x16
c000bbeb:	85 c0                	test   eax,eax
c000bbed:	0f 88 47 06 00 00    	js     c000c23a <sinc_quad_vari_process+0x6bb>
c000bbf3:	68 00 00 70 40       	push   0x40700000
c000bbf8:	6a 00                	push   0x0
c000bbfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc02:	e8 8a c9 01 00       	call   c0028591 <__gtdf2>
c000bc07:	83 c4 10             	add    esp,0x10
c000bc0a:	ba 16 00 00 00       	mov    edx,0x16
c000bc0f:	85 c0                	test   eax,eax
c000bc11:	0f 8f 23 06 00 00    	jg     c000c23a <sinc_quad_vari_process+0x6bb>
c000bc17:	83 ec 0c             	sub    esp,0xc
c000bc1a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bc1d:	e8 21 c7 01 00       	call   c0028343 <__floatsidf>
c000bc22:	83 c4 10             	add    esp,0x10
c000bc25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc2d:	68 00 00 00 40       	push   0x40000000
c000bc32:	6a 00                	push   0x0
c000bc34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc3c:	e8 22 ba 01 00       	call   c0027663 <__adddf3>
c000bc41:	59                   	pop    ecx
c000bc42:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bc46:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bc4a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bc4d:	e8 f1 c6 01 00       	call   c0028343 <__floatsidf>
c000bc52:	83 c4 10             	add    esp,0x10
c000bc55:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc59:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc5d:	52                   	push   edx
c000bc5e:	50                   	push   eax
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 58 c3 01 00       	call   c0027fc4 <__divdf3>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc73:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc77:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000bc7a:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000bc7d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc81:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc95:	e8 f7 c8 01 00       	call   c0028591 <__gtdf2>
c000bc9a:	83 c4 10             	add    esp,0x10
c000bc9d:	85 c0                	test   eax,eax
c000bc9f:	7e 2d                	jle    c000bcce <sinc_quad_vari_process+0x14f>
c000bca1:	68 00 00 f0 3f       	push   0x3ff00000
c000bca6:	6a 00                	push   0x0
c000bca8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcb0:	e8 fa c8 01 00       	call   c00285af <__ltdf2>
c000bcb5:	83 c4 10             	add    esp,0x10
c000bcb8:	85 c0                	test   eax,eax
c000bcba:	79 4d                	jns    c000bd09 <sinc_quad_vari_process+0x18a>
c000bcbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcc0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bcc4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bcc8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bccc:	eb 1b                	jmp    c000bce9 <sinc_quad_vari_process+0x16a>
c000bcce:	68 00 00 f0 3f       	push   0x3ff00000
c000bcd3:	6a 00                	push   0x0
c000bcd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcdd:	e8 cd c8 01 00       	call   c00285af <__ltdf2>
c000bce2:	83 c4 10             	add    esp,0x10
c000bce5:	85 c0                	test   eax,eax
c000bce7:	79 20                	jns    c000bd09 <sinc_quad_vari_process+0x18a>
c000bce9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bced:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bcf1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcf5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcf9:	e8 c6 c2 01 00       	call   c0027fc4 <__divdf3>
c000bcfe:	83 c4 10             	add    esp,0x10
c000bd01:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd05:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bd09:	50                   	push   eax
c000bd0a:	50                   	push   eax
c000bd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd13:	e8 48 ca 01 00       	call   c0028760 <lrint>
c000bd18:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000bd1b:	40                   	inc    eax
c000bd1c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd20:	0f af c7             	imul   eax,edi
c000bd23:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bd27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bd2a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd2e:	58                   	pop    eax
c000bd2f:	5a                   	pop    edx
c000bd30:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd34:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd38:	e8 23 ca 01 00       	call   c0028760 <lrint>
c000bd3d:	83 ec 0c             	sub    esp,0xc
c000bd40:	50                   	push   eax
c000bd41:	e8 fd c5 01 00       	call   c0028343 <__floatsidf>
c000bd46:	83 c4 10             	add    esp,0x10
c000bd49:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd4d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bd51:	52                   	push   edx
c000bd52:	50                   	push   eax
c000bd53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd57:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd5b:	e8 54 bf 01 00       	call   c0027cb4 <__subdf3>
c000bd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd68:	83 c4 20             	add    esp,0x20
c000bd6b:	6a 00                	push   0x0
c000bd6d:	6a 00                	push   0x0
c000bd6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd77:	e8 33 c8 01 00       	call   c00285af <__ltdf2>
c000bd7c:	83 c4 10             	add    esp,0x10
c000bd7f:	85 c0                	test   eax,eax
c000bd81:	79 1f                	jns    c000bda2 <sinc_quad_vari_process+0x223>
c000bd83:	68 00 00 f0 3f       	push   0x3ff00000
c000bd88:	6a 00                	push   0x0
c000bd8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd92:	e8 cc b8 01 00       	call   c0027663 <__adddf3>
c000bd97:	83 c4 10             	add    esp,0x10
c000bd9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd9e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bda2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bda5:	83 ec 10             	sub    esp,0x10
c000bda8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdac:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bdaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdb7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdbb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdbf:	e8 f0 be 01 00       	call   c0027cb4 <__subdf3>
c000bdc4:	83 c4 18             	add    esp,0x18
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdcf:	52                   	push   edx
c000bdd0:	50                   	push   eax
c000bdd1:	e8 8a c9 01 00       	call   c0028760 <lrint>
c000bdd6:	0f af f8             	imul   edi,eax
c000bdd9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bddd:	01 f8                	add    eax,edi
c000bddf:	99                   	cdq    
c000bde0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bde3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bde6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdee:	68 00 00 f0 3f       	push   0x3ff00000
c000bdf3:	6a 00                	push   0x0
c000bdf5:	e8 ca c1 01 00       	call   c0027fc4 <__divdf3>
c000bdfa:	83 c4 10             	add    esp,0x10
c000bdfd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be01:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be05:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000be0a:	68 23 42 92 0c       	push   0xc924223
c000be0f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be17:	e8 47 b8 01 00       	call   c0027663 <__adddf3>
c000be1c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000be20:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000be24:	83 c4 20             	add    esp,0x20
c000be27:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000be2f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000be37:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000be3a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000be3d:	7d 50                	jge    c000be8f <sinc_quad_vari_process+0x310>
c000be3f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000be42:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000be45:	01 c8                	add    eax,ecx
c000be47:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000be4a:	99                   	cdq    
c000be4b:	f7 f9                	idiv   ecx
c000be4d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000be51:	7d 0c                	jge    c000be5f <sinc_quad_vari_process+0x2e0>
c000be53:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000be56:	85 ff                	test   edi,edi
c000be58:	79 6c                	jns    c000bec6 <sinc_quad_vari_process+0x347>
c000be5a:	e9 e7 00 00 00       	jmp    c000bf46 <sinc_quad_vari_process+0x3c7>
c000be5f:	50                   	push   eax
c000be60:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be64:	56                   	push   esi
c000be65:	53                   	push   ebx
c000be66:	e8 8a 24 00 00       	call   c000e2f5 <prepare_data>
c000be6b:	83 c4 10             	add    esp,0x10
c000be6e:	89 c2                	mov    edx,eax
c000be70:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000be73:	85 c0                	test   eax,eax
c000be75:	0f 85 bf 03 00 00    	jne    c000c23a <sinc_quad_vari_process+0x6bb>
c000be7b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000be7e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000be81:	01 c8                	add    eax,ecx
c000be83:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000be86:	99                   	cdq    
c000be87:	f7 f9                	idiv   ecx
c000be89:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000be8d:	7c c4                	jl     c000be53 <sinc_quad_vari_process+0x2d4>
c000be8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000be93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000be97:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000be9a:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000be9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bea1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bea5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000bea8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000beab:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000beae:	99                   	cdq    
c000beaf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000beb2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000beb5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000beb8:	99                   	cdq    
c000beb9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bebc:	31 d2                	xor    edx,edx
c000bebe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000bec1:	e9 74 03 00 00       	jmp    c000c23a <sinc_quad_vari_process+0x6bb>
c000bec6:	83 ec 0c             	sub    esp,0xc
c000bec9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000becc:	e8 72 c4 01 00       	call   c0028343 <__floatsidf>
c000bed1:	83 c4 10             	add    esp,0x10
c000bed4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bed8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bedc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bee0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bee4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000beec:	e8 72 b7 01 00       	call   c0027663 <__adddf3>
c000bef1:	83 c4 10             	add    esp,0x10
c000bef4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bef8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000befc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf00:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf0c:	e8 52 b7 01 00       	call   c0027663 <__adddf3>
c000bf11:	89 3c 24             	mov    DWORD PTR [esp],edi
c000bf14:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf18:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf1c:	e8 22 c4 01 00       	call   c0028343 <__floatsidf>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf28:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf2c:	52                   	push   edx
c000bf2d:	50                   	push   eax
c000bf2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf32:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf36:	e8 72 c6 01 00       	call   c00285ad <__gedf2>
c000bf3b:	83 c4 10             	add    esp,0x10
c000bf3e:	85 c0                	test   eax,eax
c000bf40:	0f 89 49 ff ff ff    	jns    c000be8f <sinc_quad_vari_process+0x310>
c000bf46:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bf4a:	0f 8e ef 00 00 00    	jle    c000c03f <sinc_quad_vari_process+0x4c0>
c000bf50:	83 ec 10             	sub    esp,0x10
c000bf53:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000bf56:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000bf59:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000bf5c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000bf5f:	e8 50 bd 01 00       	call   c0027cb4 <__subdf3>
c000bf64:	83 c4 18             	add    esp,0x18
c000bf67:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf6b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf6f:	52                   	push   edx
c000bf70:	50                   	push   eax
c000bf71:	e8 ca c7 01 00       	call   c0028740 <fabs>
c000bf76:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf7a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf7e:	83 c4 10             	add    esp,0x10
c000bf81:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bf86:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bf8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf93:	e8 f9 c5 01 00       	call   c0028591 <__gtdf2>
c000bf98:	83 c4 10             	add    esp,0x10
c000bf9b:	85 c0                	test   eax,eax
c000bf9d:	0f 8e 9c 00 00 00    	jle    c000c03f <sinc_quad_vari_process+0x4c0>
c000bfa3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bfa6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bfa9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bfad:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bfb1:	52                   	push   edx
c000bfb2:	50                   	push   eax
c000bfb3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000bfb6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000bfb9:	e8 f6 bc 01 00       	call   c0027cb4 <__subdf3>
c000bfbe:	59                   	pop    ecx
c000bfbf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bfc3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bfc7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bfca:	e8 74 c3 01 00       	call   c0028343 <__floatsidf>
c000bfcf:	83 c4 10             	add    esp,0x10
c000bfd2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bfd6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bfda:	52                   	push   edx
c000bfdb:	50                   	push   eax
c000bfdc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfe0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfe4:	e8 f7 bc 01 00       	call   c0027ce0 <__muldf3>
c000bfe9:	5f                   	pop    edi
c000bfea:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bfee:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bff2:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bff5:	e8 49 c3 01 00       	call   c0028343 <__floatsidf>
c000bffa:	83 c4 10             	add    esp,0x10
c000bffd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c001:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c005:	52                   	push   edx
c000c006:	50                   	push   eax
c000c007:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c00b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c00f:	e8 b0 bf 01 00       	call   c0027fc4 <__divdf3>
c000c014:	83 c4 10             	add    esp,0x10
c000c017:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c01b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c01f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c023:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c027:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c02b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c02f:	e8 2f b6 01 00       	call   c0027663 <__adddf3>
c000c034:	83 c4 10             	add    esp,0x10
c000c037:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c03b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c03f:	83 ec 0c             	sub    esp,0xc
c000c042:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c045:	e8 f9 c2 01 00       	call   c0028343 <__floatsidf>
c000c04a:	83 c4 10             	add    esp,0x10
c000c04d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c051:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c055:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c059:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c05d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c061:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c065:	e8 45 c5 01 00       	call   c00285af <__ltdf2>
c000c06a:	83 c4 10             	add    esp,0x10
c000c06d:	85 c0                	test   eax,eax
c000c06f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c073:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c077:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c07b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c07f:	78 10                	js     c000c091 <sinc_quad_vari_process+0x512>
c000c081:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c085:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c089:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c08d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c091:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c095:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c099:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c09d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0a1:	e8 3a bc 01 00       	call   c0027ce0 <__muldf3>
c000c0a6:	59                   	pop    ecx
c000c0a7:	5f                   	pop    edi
c000c0a8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0b0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0b4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0b8:	e8 36 df ff ff       	call   c0009ff3 <double_to_fp>
c000c0bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0c1:	89 c7                	mov    edi,eax
c000c0c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0c7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0cb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0cf:	e8 0c bc 01 00       	call   c0027ce0 <__muldf3>
c000c0d4:	83 c4 18             	add    esp,0x18
c000c0d7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c0db:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c0df:	52                   	push   edx
c000c0e0:	50                   	push   eax
c000c0e1:	e8 0d df ff ff       	call   c0009ff3 <double_to_fp>
c000c0e6:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c0e9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c0ed:	83 c4 0c             	add    esp,0xc
c000c0f0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c0f3:	8d 04 90             	lea    eax,[eax+edx*4]
c000c0f6:	50                   	push   eax
c000c0f7:	50                   	push   eax
c000c0f8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c0fb:	e8 43 c2 01 00       	call   c0028343 <__floatsidf>
c000c100:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c104:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c110:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c114:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c118:	e8 a7 be 01 00       	call   c0027fc4 <__divdf3>
c000c11d:	83 c4 18             	add    esp,0x18
c000c120:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c124:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c128:	52                   	push   edx
c000c129:	89 fa                	mov    edx,edi
c000c12b:	50                   	push   eax
c000c12c:	89 d8                	mov    eax,ebx
c000c12e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c132:	e8 62 f4 ff ff       	call   c000b599 <calc_output_quad>
c000c137:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000c13b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c13f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c143:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c147:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c14b:	e8 74 be 01 00       	call   c0027fc4 <__divdf3>
c000c150:	83 c4 10             	add    esp,0x10
c000c153:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c157:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c15b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c15f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c163:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c167:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c16b:	e8 f3 b4 01 00       	call   c0027663 <__adddf3>
c000c170:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c174:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c178:	83 c4 18             	add    esp,0x18
c000c17b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c17f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c183:	e8 d8 c5 01 00       	call   c0028760 <lrint>
c000c188:	83 ec 0c             	sub    esp,0xc
c000c18b:	50                   	push   eax
c000c18c:	e8 b2 c1 01 00       	call   c0028343 <__floatsidf>
c000c191:	83 c4 10             	add    esp,0x10
c000c194:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c198:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c19c:	52                   	push   edx
c000c19d:	50                   	push   eax
c000c19e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c1a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c1a6:	e8 09 bb 01 00       	call   c0027cb4 <__subdf3>
c000c1ab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c1af:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c1b3:	83 c4 20             	add    esp,0x20
c000c1b6:	6a 00                	push   0x0
c000c1b8:	6a 00                	push   0x0
c000c1ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1c2:	e8 e8 c3 01 00       	call   c00285af <__ltdf2>
c000c1c7:	83 c4 10             	add    esp,0x10
c000c1ca:	85 c0                	test   eax,eax
c000c1cc:	79 20                	jns    c000c1ee <sinc_quad_vari_process+0x66f>
c000c1ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	e8 80 b4 01 00       	call   c0027663 <__adddf3>
c000c1e3:	83 c4 10             	add    esp,0x10
c000c1e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1ea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1ee:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c1f1:	83 ec 10             	sub    esp,0x10
c000c1f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c1f8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c1fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c203:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c207:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c20b:	e8 a4 ba 01 00       	call   c0027cb4 <__subdf3>
c000c210:	83 c4 18             	add    esp,0x18
c000c213:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c217:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c21b:	52                   	push   edx
c000c21c:	50                   	push   eax
c000c21d:	e8 3e c5 01 00       	call   c0028760 <lrint>
c000c222:	0f af f8             	imul   edi,eax
c000c225:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c229:	83 c4 10             	add    esp,0x10
c000c22c:	01 f8                	add    eax,edi
c000c22e:	99                   	cdq    
c000c22f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c232:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c235:	e9 fd fb ff ff       	jmp    c000be37 <sinc_quad_vari_process+0x2b8>
c000c23a:	83 c4 4c             	add    esp,0x4c
c000c23d:	89 d0                	mov    eax,edx
c000c23f:	5b                   	pop    ebx
c000c240:	5e                   	pop    esi
c000c241:	5f                   	pop    edi
c000c242:	5d                   	pop    ebp
c000c243:	c3                   	ret    

c000c244 <calc_output_hex>:
c000c244:	55                   	push   ebp
c000c245:	89 cd                	mov    ebp,ecx
c000c247:	57                   	push   edi
c000c248:	56                   	push   esi
c000c249:	53                   	push   ebx
c000c24a:	89 c3                	mov    ebx,eax
c000c24c:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000c252:	89 14 24             	mov    DWORD PTR [esp],edx
c000c255:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000c25c:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000c263:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c267:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c26b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000c26e:	e8 a7 dd ff ff       	call   c000a01a <int_to_fp>
c000c273:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000c276:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000c27a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000c27d:	29 c8                	sub    eax,ecx
c000c27f:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000c283:	99                   	cdq    
c000c284:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000c28c:	f7 3c 24             	idiv   DWORD PTR [esp]
c000c28f:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000c297:	0f af f8             	imul   edi,eax
c000c29a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000c29d:	01 cf                	add    edi,ecx
c000c29f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c2a3:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000c2a6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c2aa:	0f af c2             	imul   eax,edx
c000c2ad:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000c2b1:	29 c1                	sub    ecx,eax
c000c2b3:	31 d2                	xor    edx,edx
c000c2b5:	31 c0                	xor    eax,eax
c000c2b7:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000c2ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2c2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c2c6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c2ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c2ce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c2d2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c2d6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c2da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2e2:	89 f8                	mov    eax,edi
c000c2e4:	e8 3f dd ff ff       	call   c000a028 <fp_to_double>
c000c2e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c2ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c2f1:	89 f8                	mov    eax,edi
c000c2f3:	e8 26 dd ff ff       	call   c000a01e <fp_to_int>
c000c2f8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000c2fc:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000c2ff:	52                   	push   edx
c000c300:	52                   	push   edx
c000c301:	51                   	push   ecx
c000c302:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000c306:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000c30d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000c311:	e8 e2 ac 01 00       	call   c0026ff8 <__subsf3>
c000c316:	89 04 24             	mov    DWORD PTR [esp],eax
c000c319:	e8 b9 c3 01 00       	call   c00286d7 <__extendsfdf2>
c000c31e:	83 c4 10             	add    esp,0x10
c000c321:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000c325:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000c329:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c331:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000c335:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000c339:	e8 a2 b9 01 00       	call   c0027ce0 <__muldf3>
c000c33e:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000c342:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c346:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c349:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c34d:	e8 85 c3 01 00       	call   c00286d7 <__extendsfdf2>
c000c352:	83 c4 10             	add    esp,0x10
c000c355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000c359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000c35d:	52                   	push   edx
c000c35e:	50                   	push   eax
c000c35f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c363:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c367:	e8 f7 b2 01 00       	call   c0027663 <__adddf3>
c000c36c:	59                   	pop    ecx
c000c36d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c371:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c375:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000c37b:	e8 57 c3 01 00       	call   c00286d7 <__extendsfdf2>
c000c380:	83 c4 10             	add    esp,0x10
c000c383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000c387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000c38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000c397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000c39b:	e8 40 b9 01 00       	call   c0027ce0 <__muldf3>
c000c3a0:	83 c4 10             	add    esp,0x10
c000c3a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000c3a7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000c3ab:	52                   	push   edx
c000c3ac:	50                   	push   eax
c000c3ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3b1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3b5:	e8 a9 b2 01 00       	call   c0027663 <__adddf3>
c000c3ba:	59                   	pop    ecx
c000c3bb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c3bf:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c3c3:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000c3c9:	e8 09 c3 01 00       	call   c00286d7 <__extendsfdf2>
c000c3ce:	83 c4 10             	add    esp,0x10
c000c3d1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000c3d5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000c3d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3e1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000c3e5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000c3e9:	e8 f2 b8 01 00       	call   c0027ce0 <__muldf3>
c000c3ee:	83 c4 10             	add    esp,0x10
c000c3f1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000c3f5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000c3f9:	52                   	push   edx
c000c3fa:	50                   	push   eax
c000c3fb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c3ff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c403:	e8 5b b2 01 00       	call   c0027663 <__adddf3>
c000c408:	59                   	pop    ecx
c000c409:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c40d:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000c411:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000c417:	e8 bb c2 01 00       	call   c00286d7 <__extendsfdf2>
c000c41c:	83 c4 10             	add    esp,0x10
c000c41f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000c423:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000c427:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c42b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c42f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000c433:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000c437:	e8 a4 b8 01 00       	call   c0027ce0 <__muldf3>
c000c43c:	83 c4 10             	add    esp,0x10
c000c43f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000c443:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000c447:	52                   	push   edx
c000c448:	50                   	push   eax
c000c449:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c44d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c451:	e8 0d b2 01 00       	call   c0027663 <__adddf3>
c000c456:	59                   	pop    ecx
c000c457:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c45b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000c45f:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000c465:	e8 6d c2 01 00       	call   c00286d7 <__extendsfdf2>
c000c46a:	83 c4 10             	add    esp,0x10
c000c46d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000c471:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000c475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c47d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000c481:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000c485:	e8 56 b8 01 00       	call   c0027ce0 <__muldf3>
c000c48a:	83 c4 10             	add    esp,0x10
c000c48d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000c491:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000c495:	52                   	push   edx
c000c496:	50                   	push   eax
c000c497:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c49b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c49f:	e8 bf b1 01 00       	call   c0027663 <__adddf3>
c000c4a4:	59                   	pop    ecx
c000c4a5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c4a9:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000c4ad:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000c4b3:	e8 1f c2 01 00       	call   c00286d7 <__extendsfdf2>
c000c4b8:	83 c4 10             	add    esp,0x10
c000c4bb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000c4bf:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000c4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c4c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c4cb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000c4cf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000c4d3:	e8 08 b8 01 00       	call   c0027ce0 <__muldf3>
c000c4d8:	83 c4 10             	add    esp,0x10
c000c4db:	83 c6 18             	add    esi,0x18
c000c4de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000c4e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000c4e6:	52                   	push   edx
c000c4e7:	50                   	push   eax
c000c4e8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4ec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4f0:	e8 6e b1 01 00       	call   c0027663 <__adddf3>
c000c4f5:	59                   	pop    ecx
c000c4f6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c4fa:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c4fe:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000c504:	e8 ce c1 01 00       	call   c00286d7 <__extendsfdf2>
c000c509:	83 c4 10             	add    esp,0x10
c000c50c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000c510:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000c514:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c518:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c51c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000c520:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000c524:	e8 b7 b7 01 00       	call   c0027ce0 <__muldf3>
c000c529:	83 c4 10             	add    esp,0x10
c000c52c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c530:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c534:	52                   	push   edx
c000c535:	50                   	push   eax
c000c536:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000c53a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000c53e:	e8 20 b1 01 00       	call   c0027663 <__adddf3>
c000c543:	83 c4 10             	add    esp,0x10
c000c546:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c54a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c54e:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000c551:	0f 89 8b fd ff ff    	jns    c000c2e2 <calc_output_hex+0x9e>
c000c557:	31 f6                	xor    esi,esi
c000c559:	31 ff                	xor    edi,edi
c000c55b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c55f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000c562:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000c566:	29 e9                	sub    ecx,ebp
c000c568:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000c56c:	29 c8                	sub    eax,ecx
c000c56e:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000c571:	99                   	cdq    
c000c572:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000c576:	f7 3c 24             	idiv   DWORD PTR [esp]
c000c579:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000c57d:	0f af e8             	imul   ebp,eax
c000c580:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000c584:	40                   	inc    eax
c000c585:	01 cd                	add    ebp,ecx
c000c587:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000c58c:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000c590:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000c594:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000c598:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000c59b:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000c59f:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000c5a3:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000c5a7:	89 e8                	mov    eax,ebp
c000c5a9:	e8 7a da ff ff       	call   c000a028 <fp_to_double>
c000c5ae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 e8                	mov    eax,ebp
c000c5b8:	e8 61 da ff ff       	call   c000a01e <fp_to_int>
c000c5bd:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000c5c1:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000c5c4:	52                   	push   edx
c000c5c5:	52                   	push   edx
c000c5c6:	51                   	push   ecx
c000c5c7:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000c5ce:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000c5d5:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000c5d9:	e8 1a aa 01 00       	call   c0026ff8 <__subsf3>
c000c5de:	89 04 24             	mov    DWORD PTR [esp],eax
c000c5e1:	e8 f1 c0 01 00       	call   c00286d7 <__extendsfdf2>
c000c5e6:	83 c4 10             	add    esp,0x10
c000c5e9:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000c5ed:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000c5f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5f9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000c5fd:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000c601:	e8 da b6 01 00       	call   c0027ce0 <__muldf3>
c000c606:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000c60d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c611:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c614:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c618:	e8 ba c0 01 00       	call   c00286d7 <__extendsfdf2>
c000c61d:	83 c4 10             	add    esp,0x10
c000c620:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000c624:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000c628:	52                   	push   edx
c000c629:	50                   	push   eax
c000c62a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c62e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c632:	e8 2c b0 01 00       	call   c0027663 <__adddf3>
c000c637:	59                   	pop    ecx
c000c638:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c63c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c640:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000c646:	e8 8c c0 01 00       	call   c00286d7 <__extendsfdf2>
c000c64b:	83 c4 10             	add    esp,0x10
c000c64e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000c652:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000c656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c65e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000c662:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000c666:	e8 75 b6 01 00       	call   c0027ce0 <__muldf3>
c000c66b:	83 c4 10             	add    esp,0x10
c000c66e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000c672:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000c676:	52                   	push   edx
c000c677:	50                   	push   eax
c000c678:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c67c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c680:	e8 de af 01 00       	call   c0027663 <__adddf3>
c000c685:	59                   	pop    ecx
c000c686:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c68a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c68e:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000c694:	e8 3e c0 01 00       	call   c00286d7 <__extendsfdf2>
c000c699:	83 c4 10             	add    esp,0x10
c000c69c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000c6a0:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000c6a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6ac:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000c6b0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000c6b4:	e8 27 b6 01 00       	call   c0027ce0 <__muldf3>
c000c6b9:	83 c4 10             	add    esp,0x10
c000c6bc:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000c6c0:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000c6c4:	52                   	push   edx
c000c6c5:	50                   	push   eax
c000c6c6:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000c6ca:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000c6ce:	e8 90 af 01 00       	call   c0027663 <__adddf3>
c000c6d3:	59                   	pop    ecx
c000c6d4:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000c6d8:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000c6dc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000c6e2:	e8 f0 bf 01 00       	call   c00286d7 <__extendsfdf2>
c000c6e7:	83 c4 10             	add    esp,0x10
c000c6ea:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000c6ee:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000c6f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6fa:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000c6fe:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000c702:	e8 d9 b5 01 00       	call   c0027ce0 <__muldf3>
c000c707:	83 c4 10             	add    esp,0x10
c000c70a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000c70e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000c712:	52                   	push   edx
c000c713:	50                   	push   eax
c000c714:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000c718:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000c71c:	e8 42 af 01 00       	call   c0027663 <__adddf3>
c000c721:	59                   	pop    ecx
c000c722:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000c726:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000c72a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000c730:	e8 a2 bf 01 00       	call   c00286d7 <__extendsfdf2>
c000c735:	83 c4 10             	add    esp,0x10
c000c738:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000c73c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000c740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c748:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000c74c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000c750:	e8 8b b5 01 00       	call   c0027ce0 <__muldf3>
c000c755:	83 c4 10             	add    esp,0x10
c000c758:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000c75c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000c760:	52                   	push   edx
c000c761:	50                   	push   eax
c000c762:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000c766:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000c76a:	e8 f4 ae 01 00       	call   c0027663 <__adddf3>
c000c76f:	59                   	pop    ecx
c000c770:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000c774:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000c778:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000c77e:	e8 54 bf 01 00       	call   c00286d7 <__extendsfdf2>
c000c783:	83 c4 10             	add    esp,0x10
c000c786:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000c78a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000c78e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c792:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c796:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000c79a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000c79e:	e8 3d b5 01 00       	call   c0027ce0 <__muldf3>
c000c7a3:	83 c4 10             	add    esp,0x10
c000c7a6:	83 eb 18             	sub    ebx,0x18
c000c7a9:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000c7ad:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000c7b1:	52                   	push   edx
c000c7b2:	50                   	push   eax
c000c7b3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000c7b7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000c7bb:	e8 a3 ae 01 00       	call   c0027663 <__adddf3>
c000c7c0:	59                   	pop    ecx
c000c7c1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000c7c5:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000c7c9:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000c7cf:	e8 03 bf 01 00       	call   c00286d7 <__extendsfdf2>
c000c7d4:	83 c4 10             	add    esp,0x10
c000c7d7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000c7db:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000c7df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7e7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000c7eb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000c7ef:	e8 ec b4 01 00       	call   c0027ce0 <__muldf3>
c000c7f4:	83 c4 10             	add    esp,0x10
c000c7f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c7fb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c7ff:	52                   	push   edx
c000c800:	50                   	push   eax
c000c801:	57                   	push   edi
c000c802:	56                   	push   esi
c000c803:	e8 5b ae 01 00       	call   c0027663 <__adddf3>
c000c808:	83 c4 10             	add    esp,0x10
c000c80b:	89 c6                	mov    esi,eax
c000c80d:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000c810:	89 d7                	mov    edi,edx
c000c812:	85 ed                	test   ebp,ebp
c000c814:	0f 8f 8d fd ff ff    	jg     c000c5a7 <calc_output_hex+0x363>
c000c81a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c81e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c822:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c826:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c82a:	e8 34 ae 01 00       	call   c0027663 <__adddf3>
c000c82f:	83 c4 10             	add    esp,0x10
c000c832:	89 04 24             	mov    DWORD PTR [esp],eax
c000c835:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c839:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c83d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c841:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c845:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c849:	e8 92 b4 01 00       	call   c0027ce0 <__muldf3>
c000c84e:	59                   	pop    ecx
c000c84f:	5b                   	pop    ebx
c000c850:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c854:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c858:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c85c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c860:	e8 4e bd 01 00       	call   c00285b3 <__truncdfsf2>
c000c865:	83 c4 10             	add    esp,0x10
c000c868:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000c86f:	89 03                	mov    DWORD PTR [ebx],eax
c000c871:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000c875:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000c879:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c87d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c881:	e8 dd ad 01 00       	call   c0027663 <__adddf3>
c000c886:	83 c4 10             	add    esp,0x10
c000c889:	89 04 24             	mov    DWORD PTR [esp],eax
c000c88c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c890:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c894:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c898:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c89c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c8a0:	e8 3b b4 01 00       	call   c0027ce0 <__muldf3>
c000c8a5:	5d                   	pop    ebp
c000c8a6:	59                   	pop    ecx
c000c8a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c8b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c8b7:	e8 f7 bc 01 00       	call   c00285b3 <__truncdfsf2>
c000c8bc:	83 c4 10             	add    esp,0x10
c000c8bf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000c8c6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c8c9:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000c8cd:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000c8d1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c8d5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c8d9:	e8 85 ad 01 00       	call   c0027663 <__adddf3>
c000c8de:	83 c4 10             	add    esp,0x10
c000c8e1:	89 04 24             	mov    DWORD PTR [esp],eax
c000c8e4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c8e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c8ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c8f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c8f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c8f8:	e8 e3 b3 01 00       	call   c0027ce0 <__muldf3>
c000c8fd:	5b                   	pop    ebx
c000c8fe:	5d                   	pop    ebp
c000c8ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c903:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c907:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c90b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c90f:	e8 9f bc 01 00       	call   c00285b3 <__truncdfsf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000c91e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c921:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000c925:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000c929:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c92d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c931:	e8 2d ad 01 00       	call   c0027663 <__adddf3>
c000c936:	83 c4 10             	add    esp,0x10
c000c939:	89 04 24             	mov    DWORD PTR [esp],eax
c000c93c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c940:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c944:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c948:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c94c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c950:	e8 8b b3 01 00       	call   c0027ce0 <__muldf3>
c000c955:	59                   	pop    ecx
c000c956:	5b                   	pop    ebx
c000c957:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c95b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c95f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	e8 47 bc 01 00       	call   c00285b3 <__truncdfsf2>
c000c96c:	83 c4 10             	add    esp,0x10
c000c96f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000c976:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000c979:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c97d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c981:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c985:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c989:	e8 d5 ac 01 00       	call   c0027663 <__adddf3>
c000c98e:	83 c4 10             	add    esp,0x10
c000c991:	89 04 24             	mov    DWORD PTR [esp],eax
c000c994:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c998:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c99c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c9a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c9a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c9a8:	e8 33 b3 01 00       	call   c0027ce0 <__muldf3>
c000c9ad:	5d                   	pop    ebp
c000c9ae:	59                   	pop    ecx
c000c9af:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c9bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c9bf:	e8 ef bb 01 00       	call   c00285b3 <__truncdfsf2>
c000c9c4:	83 c4 10             	add    esp,0x10
c000c9c7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000c9ce:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c9d1:	57                   	push   edi
c000c9d2:	56                   	push   esi
c000c9d3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000c9d7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000c9db:	e8 83 ac 01 00       	call   c0027663 <__adddf3>
c000c9e0:	83 c4 10             	add    esp,0x10
c000c9e3:	89 04 24             	mov    DWORD PTR [esp],eax
c000c9e6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c9ea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c9ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c9f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c9f6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c9fa:	e8 e1 b2 01 00       	call   c0027ce0 <__muldf3>
c000c9ff:	5b                   	pop    ebx
c000ca00:	5e                   	pop    esi
c000ca01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca05:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca09:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ca0d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ca11:	e8 9d bb 01 00       	call   c00285b3 <__truncdfsf2>
c000ca16:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ca1d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ca20:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ca26:	5b                   	pop    ebx
c000ca27:	5e                   	pop    esi
c000ca28:	5f                   	pop    edi
c000ca29:	5d                   	pop    ebp
c000ca2a:	c3                   	ret    

c000ca2b <sinc_hex_vari_process>:
c000ca2b:	55                   	push   ebp
c000ca2c:	ba 05 00 00 00       	mov    edx,0x5
c000ca31:	57                   	push   edi
c000ca32:	56                   	push   esi
c000ca33:	53                   	push   ebx
c000ca34:	83 ec 4c             	sub    esp,0x4c
c000ca37:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ca3b:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ca3f:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ca42:	85 db                	test   ebx,ebx
c000ca44:	0f 84 9c 06 00 00    	je     c000d0e6 <sinc_hex_vari_process+0x6bb>
c000ca4a:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000ca4d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca50:	0f af c7             	imul   eax,edi
c000ca53:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ca56:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ca59:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ca60:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ca67:	0f af c7             	imul   eax,edi
c000ca6a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ca6d:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ca70:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ca73:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca7b:	68 00 00 70 3f       	push   0x3f700000
c000ca80:	6a 00                	push   0x0
c000ca82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca8a:	e8 20 bb 01 00       	call   c00285af <__ltdf2>
c000ca8f:	83 c4 10             	add    esp,0x10
c000ca92:	ba 16 00 00 00       	mov    edx,0x16
c000ca97:	85 c0                	test   eax,eax
c000ca99:	0f 88 47 06 00 00    	js     c000d0e6 <sinc_hex_vari_process+0x6bb>
c000ca9f:	68 00 00 70 40       	push   0x40700000
c000caa4:	6a 00                	push   0x0
c000caa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000caaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000caae:	e8 de ba 01 00       	call   c0028591 <__gtdf2>
c000cab3:	83 c4 10             	add    esp,0x10
c000cab6:	ba 16 00 00 00       	mov    edx,0x16
c000cabb:	85 c0                	test   eax,eax
c000cabd:	0f 8f 23 06 00 00    	jg     c000d0e6 <sinc_hex_vari_process+0x6bb>
c000cac3:	83 ec 0c             	sub    esp,0xc
c000cac6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cac9:	e8 75 b8 01 00       	call   c0028343 <__floatsidf>
c000cace:	83 c4 10             	add    esp,0x10
c000cad1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cad5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cad9:	68 00 00 00 40       	push   0x40000000
c000cade:	6a 00                	push   0x0
c000cae0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cae4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cae8:	e8 76 ab 01 00       	call   c0027663 <__adddf3>
c000caed:	59                   	pop    ecx
c000caee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000caf2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000caf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000caf9:	e8 45 b8 01 00       	call   c0028343 <__floatsidf>
c000cafe:	83 c4 10             	add    esp,0x10
c000cb01:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cb05:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cb09:	52                   	push   edx
c000cb0a:	50                   	push   eax
c000cb0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb13:	e8 ac b4 01 00       	call   c0027fc4 <__divdf3>
c000cb18:	83 c4 10             	add    esp,0x10
c000cb1b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cb1f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cb23:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cb26:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cb29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb2d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cb31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb41:	e8 4b ba 01 00       	call   c0028591 <__gtdf2>
c000cb46:	83 c4 10             	add    esp,0x10
c000cb49:	85 c0                	test   eax,eax
c000cb4b:	7e 2d                	jle    c000cb7a <sinc_hex_vari_process+0x14f>
c000cb4d:	68 00 00 f0 3f       	push   0x3ff00000
c000cb52:	6a 00                	push   0x0
c000cb54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb5c:	e8 4e ba 01 00       	call   c00285af <__ltdf2>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	85 c0                	test   eax,eax
c000cb66:	79 4d                	jns    c000cbb5 <sinc_hex_vari_process+0x18a>
c000cb68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb6c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cb78:	eb 1b                	jmp    c000cb95 <sinc_hex_vari_process+0x16a>
c000cb7a:	68 00 00 f0 3f       	push   0x3ff00000
c000cb7f:	6a 00                	push   0x0
c000cb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb89:	e8 21 ba 01 00       	call   c00285af <__ltdf2>
c000cb8e:	83 c4 10             	add    esp,0x10
c000cb91:	85 c0                	test   eax,eax
c000cb93:	79 20                	jns    c000cbb5 <sinc_hex_vari_process+0x18a>
c000cb95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb99:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb9d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cba1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cba5:	e8 1a b4 01 00       	call   c0027fc4 <__divdf3>
c000cbaa:	83 c4 10             	add    esp,0x10
c000cbad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbb1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbb5:	50                   	push   eax
c000cbb6:	50                   	push   eax
c000cbb7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbbb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbbf:	e8 9c bb 01 00       	call   c0028760 <lrint>
c000cbc4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000cbc7:	40                   	inc    eax
c000cbc8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbcc:	0f af c7             	imul   eax,edi
c000cbcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000cbd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbd6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbda:	58                   	pop    eax
c000cbdb:	5a                   	pop    edx
c000cbdc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbe0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbe4:	e8 77 bb 01 00       	call   c0028760 <lrint>
c000cbe9:	83 ec 0c             	sub    esp,0xc
c000cbec:	50                   	push   eax
c000cbed:	e8 51 b7 01 00       	call   c0028343 <__floatsidf>
c000cbf2:	83 c4 10             	add    esp,0x10
c000cbf5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbf9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbfd:	52                   	push   edx
c000cbfe:	50                   	push   eax
c000cbff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc07:	e8 a8 b0 01 00       	call   c0027cb4 <__subdf3>
c000cc0c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc10:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc14:	83 c4 20             	add    esp,0x20
c000cc17:	6a 00                	push   0x0
c000cc19:	6a 00                	push   0x0
c000cc1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc23:	e8 87 b9 01 00       	call   c00285af <__ltdf2>
c000cc28:	83 c4 10             	add    esp,0x10
c000cc2b:	85 c0                	test   eax,eax
c000cc2d:	79 1f                	jns    c000cc4e <sinc_hex_vari_process+0x223>
c000cc2f:	68 00 00 f0 3f       	push   0x3ff00000
c000cc34:	6a 00                	push   0x0
c000cc36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc3e:	e8 20 aa 01 00       	call   c0027663 <__adddf3>
c000cc43:	83 c4 10             	add    esp,0x10
c000cc46:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc4a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc4e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc51:	83 ec 10             	sub    esp,0x10
c000cc54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cc58:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc6b:	e8 44 b0 01 00       	call   c0027cb4 <__subdf3>
c000cc70:	83 c4 18             	add    esp,0x18
c000cc73:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc77:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc7b:	52                   	push   edx
c000cc7c:	50                   	push   eax
c000cc7d:	e8 de ba 01 00       	call   c0028760 <lrint>
c000cc82:	0f af f8             	imul   edi,eax
c000cc85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cc89:	01 f8                	add    eax,edi
c000cc8b:	99                   	cdq    
c000cc8c:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc8f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc92:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc96:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc9a:	68 00 00 f0 3f       	push   0x3ff00000
c000cc9f:	6a 00                	push   0x0
c000cca1:	e8 1e b3 01 00       	call   c0027fc4 <__divdf3>
c000cca6:	83 c4 10             	add    esp,0x10
c000cca9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccb1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ccb6:	68 23 42 92 0c       	push   0xc924223
c000ccbb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccbf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccc3:	e8 9b a9 01 00       	call   c0027663 <__adddf3>
c000ccc8:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cccc:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ccd0:	83 c4 20             	add    esp,0x20
c000ccd3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ccdb:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cce3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cce6:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cce9:	7d 50                	jge    c000cd3b <sinc_hex_vari_process+0x310>
c000cceb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ccee:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ccf1:	01 c8                	add    eax,ecx
c000ccf3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ccf6:	99                   	cdq    
c000ccf7:	f7 f9                	idiv   ecx
c000ccf9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ccfd:	7d 0c                	jge    c000cd0b <sinc_hex_vari_process+0x2e0>
c000ccff:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cd02:	85 ff                	test   edi,edi
c000cd04:	79 6c                	jns    c000cd72 <sinc_hex_vari_process+0x347>
c000cd06:	e9 e7 00 00 00       	jmp    c000cdf2 <sinc_hex_vari_process+0x3c7>
c000cd0b:	50                   	push   eax
c000cd0c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd10:	56                   	push   esi
c000cd11:	53                   	push   ebx
c000cd12:	e8 de 15 00 00       	call   c000e2f5 <prepare_data>
c000cd17:	83 c4 10             	add    esp,0x10
c000cd1a:	89 c2                	mov    edx,eax
c000cd1c:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cd1f:	85 c0                	test   eax,eax
c000cd21:	0f 85 bf 03 00 00    	jne    c000d0e6 <sinc_hex_vari_process+0x6bb>
c000cd27:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cd2a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cd2d:	01 c8                	add    eax,ecx
c000cd2f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cd32:	99                   	cdq    
c000cd33:	f7 f9                	idiv   ecx
c000cd35:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cd39:	7c c4                	jl     c000ccff <sinc_hex_vari_process+0x2d4>
c000cd3b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd3f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cd43:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cd46:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd4d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cd51:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cd54:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cd57:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cd5a:	99                   	cdq    
c000cd5b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd5e:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cd61:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cd64:	99                   	cdq    
c000cd65:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd68:	31 d2                	xor    edx,edx
c000cd6a:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cd6d:	e9 74 03 00 00       	jmp    c000d0e6 <sinc_hex_vari_process+0x6bb>
c000cd72:	83 ec 0c             	sub    esp,0xc
c000cd75:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cd78:	e8 c6 b5 01 00       	call   c0028343 <__floatsidf>
c000cd7d:	83 c4 10             	add    esp,0x10
c000cd80:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd84:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cd8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cd90:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd94:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd98:	e8 c6 a8 01 00       	call   c0027663 <__adddf3>
c000cd9d:	83 c4 10             	add    esp,0x10
c000cda0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cda4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cda8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdb8:	e8 a6 a8 01 00       	call   c0027663 <__adddf3>
c000cdbd:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cdc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdc8:	e8 76 b5 01 00       	call   c0028343 <__floatsidf>
c000cdcd:	83 c4 10             	add    esp,0x10
c000cdd0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdd4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdd8:	52                   	push   edx
c000cdd9:	50                   	push   eax
c000cdda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdde:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cde2:	e8 c6 b7 01 00       	call   c00285ad <__gedf2>
c000cde7:	83 c4 10             	add    esp,0x10
c000cdea:	85 c0                	test   eax,eax
c000cdec:	0f 89 49 ff ff ff    	jns    c000cd3b <sinc_hex_vari_process+0x310>
c000cdf2:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cdf6:	0f 8e ef 00 00 00    	jle    c000ceeb <sinc_hex_vari_process+0x4c0>
c000cdfc:	83 ec 10             	sub    esp,0x10
c000cdff:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ce02:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ce05:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ce08:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ce0b:	e8 a4 ae 01 00       	call   c0027cb4 <__subdf3>
c000ce10:	83 c4 18             	add    esp,0x18
c000ce13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce1b:	52                   	push   edx
c000ce1c:	50                   	push   eax
c000ce1d:	e8 1e b9 01 00       	call   c0028740 <fabs>
c000ce22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ce26:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000ce2a:	83 c4 10             	add    esp,0x10
c000ce2d:	68 df 7c db 3d       	push   0x3ddb7cdf
c000ce32:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000ce37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce3f:	e8 4d b7 01 00       	call   c0028591 <__gtdf2>
c000ce44:	83 c4 10             	add    esp,0x10
c000ce47:	85 c0                	test   eax,eax
c000ce49:	0f 8e 9c 00 00 00    	jle    c000ceeb <sinc_hex_vari_process+0x4c0>
c000ce4f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ce52:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ce55:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ce59:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ce5d:	52                   	push   edx
c000ce5e:	50                   	push   eax
c000ce5f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ce62:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ce65:	e8 4a ae 01 00       	call   c0027cb4 <__subdf3>
c000ce6a:	59                   	pop    ecx
c000ce6b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ce6f:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ce73:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ce76:	e8 c8 b4 01 00       	call   c0028343 <__floatsidf>
c000ce7b:	83 c4 10             	add    esp,0x10
c000ce7e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce82:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce86:	52                   	push   edx
c000ce87:	50                   	push   eax
c000ce88:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce8c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce90:	e8 4b ae 01 00       	call   c0027ce0 <__muldf3>
c000ce95:	5f                   	pop    edi
c000ce96:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ce9a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ce9e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cea1:	e8 9d b4 01 00       	call   c0028343 <__floatsidf>
c000cea6:	83 c4 10             	add    esp,0x10
c000cea9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cead:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ceb1:	52                   	push   edx
c000ceb2:	50                   	push   eax
c000ceb3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ceb7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cebb:	e8 04 b1 01 00       	call   c0027fc4 <__divdf3>
c000cec0:	83 c4 10             	add    esp,0x10
c000cec3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cec7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cecb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ced3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ced7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cedb:	e8 83 a7 01 00       	call   c0027663 <__adddf3>
c000cee0:	83 c4 10             	add    esp,0x10
c000cee3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cee7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ceeb:	83 ec 0c             	sub    esp,0xc
c000ceee:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cef1:	e8 4d b4 01 00       	call   c0028343 <__floatsidf>
c000cef6:	83 c4 10             	add    esp,0x10
c000cef9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cefd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf11:	e8 99 b6 01 00       	call   c00285af <__ltdf2>
c000cf16:	83 c4 10             	add    esp,0x10
c000cf19:	85 c0                	test   eax,eax
c000cf1b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cf1f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cf23:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000cf27:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000cf2b:	78 10                	js     c000cf3d <sinc_hex_vari_process+0x512>
c000cf2d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cf31:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cf35:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cf39:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cf3d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf45:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf49:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf4d:	e8 8e ad 01 00       	call   c0027ce0 <__muldf3>
c000cf52:	59                   	pop    ecx
c000cf53:	5f                   	pop    edi
c000cf54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf58:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf5c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf60:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf64:	e8 8a d0 ff ff       	call   c0009ff3 <double_to_fp>
c000cf69:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf6d:	89 c7                	mov    edi,eax
c000cf6f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf73:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf77:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf7b:	e8 60 ad 01 00       	call   c0027ce0 <__muldf3>
c000cf80:	83 c4 18             	add    esp,0x18
c000cf83:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cf87:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cf8b:	52                   	push   edx
c000cf8c:	50                   	push   eax
c000cf8d:	e8 61 d0 ff ff       	call   c0009ff3 <double_to_fp>
c000cf92:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cf95:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cf99:	83 c4 0c             	add    esp,0xc
c000cf9c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cf9f:	8d 04 90             	lea    eax,[eax+edx*4]
c000cfa2:	50                   	push   eax
c000cfa3:	50                   	push   eax
c000cfa4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cfa7:	e8 97 b3 01 00       	call   c0028343 <__floatsidf>
c000cfac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cfb0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cfb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfbc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfc0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfc4:	e8 fb af 01 00       	call   c0027fc4 <__divdf3>
c000cfc9:	83 c4 18             	add    esp,0x18
c000cfcc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cfd0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cfd4:	52                   	push   edx
c000cfd5:	89 fa                	mov    edx,edi
c000cfd7:	50                   	push   eax
c000cfd8:	89 d8                	mov    eax,ebx
c000cfda:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cfde:	e8 61 f2 ff ff       	call   c000c244 <calc_output_hex>
c000cfe3:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000cfe7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cfeb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cfef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cff3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cff7:	e8 c8 af 01 00       	call   c0027fc4 <__divdf3>
c000cffc:	83 c4 10             	add    esp,0x10
c000cfff:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d003:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d007:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d00b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d00f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d013:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d017:	e8 47 a6 01 00       	call   c0027663 <__adddf3>
c000d01c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d020:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d024:	83 c4 18             	add    esp,0x18
c000d027:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d02b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d02f:	e8 2c b7 01 00       	call   c0028760 <lrint>
c000d034:	83 ec 0c             	sub    esp,0xc
c000d037:	50                   	push   eax
c000d038:	e8 06 b3 01 00       	call   c0028343 <__floatsidf>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	52                   	push   edx
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d04e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d052:	e8 5d ac 01 00       	call   c0027cb4 <__subdf3>
c000d057:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	83 c4 20             	add    esp,0x20
c000d062:	6a 00                	push   0x0
c000d064:	6a 00                	push   0x0
c000d066:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d06a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d06e:	e8 3c b5 01 00       	call   c00285af <__ltdf2>
c000d073:	83 c4 10             	add    esp,0x10
c000d076:	85 c0                	test   eax,eax
c000d078:	79 20                	jns    c000d09a <sinc_hex_vari_process+0x66f>
c000d07a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d07e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d082:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d086:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d08a:	e8 d4 a5 01 00       	call   c0027663 <__adddf3>
c000d08f:	83 c4 10             	add    esp,0x10
c000d092:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d096:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d09a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d09d:	83 ec 10             	sub    esp,0x10
c000d0a0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d0a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0af:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d0b3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d0b7:	e8 f8 ab 01 00       	call   c0027cb4 <__subdf3>
c000d0bc:	83 c4 18             	add    esp,0x18
c000d0bf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0c7:	52                   	push   edx
c000d0c8:	50                   	push   eax
c000d0c9:	e8 92 b6 01 00       	call   c0028760 <lrint>
c000d0ce:	0f af f8             	imul   edi,eax
c000d0d1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d0d5:	83 c4 10             	add    esp,0x10
c000d0d8:	01 f8                	add    eax,edi
c000d0da:	99                   	cdq    
c000d0db:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0de:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0e1:	e9 fd fb ff ff       	jmp    c000cce3 <sinc_hex_vari_process+0x2b8>
c000d0e6:	83 c4 4c             	add    esp,0x4c
c000d0e9:	89 d0                	mov    eax,edx
c000d0eb:	5b                   	pop    ebx
c000d0ec:	5e                   	pop    esi
c000d0ed:	5f                   	pop    edi
c000d0ee:	5d                   	pop    ebp
c000d0ef:	c3                   	ret    

c000d0f0 <calc_output_multi>:
c000d0f0:	55                   	push   ebp
c000d0f1:	57                   	push   edi
c000d0f2:	56                   	push   esi
c000d0f3:	89 c6                	mov    esi,eax
c000d0f5:	53                   	push   ebx
c000d0f6:	83 ec 4c             	sub    esp,0x4c
c000d0f9:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000d0fd:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000d101:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d105:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000d109:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000d10d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d111:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d115:	8d 46 44             	lea    eax,[esi+0x44]
c000d118:	89 04 24             	mov    DWORD PTR [esp],eax
c000d11b:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000d121:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d125:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000d128:	e8 ed ce ff ff       	call   c000a01a <int_to_fp>
c000d12d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000d130:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d134:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000d138:	99                   	cdq    
c000d139:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000d13d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d141:	0f af d0             	imul   edx,eax
c000d144:	0f af c3             	imul   eax,ebx
c000d147:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000d14b:	29 c1                	sub    ecx,eax
c000d14d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d151:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000d155:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000d15c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d160:	57                   	push   edi
c000d161:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d165:	6a 00                	push   0x0
c000d167:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d16b:	e8 54 35 ff ff       	call   c00006c4 <memset>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d177:	89 df                	mov    edi,ebx
c000d179:	e8 aa ce ff ff       	call   c000a028 <fp_to_double>
c000d17e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d182:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d186:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d18a:	e8 8f ce ff ff       	call   c000a01e <fp_to_int>
c000d18f:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000d192:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000d195:	51                   	push   ecx
c000d196:	51                   	push   ecx
c000d197:	55                   	push   ebp
c000d198:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000d19c:	e8 57 9e 01 00       	call   c0026ff8 <__subsf3>
c000d1a1:	89 04 24             	mov    DWORD PTR [esp],eax
c000d1a4:	e8 2e b5 01 00       	call   c00286d7 <__extendsfdf2>
c000d1a9:	83 c4 10             	add    esp,0x10
c000d1ac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d1b0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d1b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1bc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d1c0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d1c4:	e8 17 ab 01 00       	call   c0027ce0 <__muldf3>
c000d1c9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000d1cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1d4:	e8 fe b4 01 00       	call   c00286d7 <__extendsfdf2>
c000d1d9:	83 c4 10             	add    esp,0x10
c000d1dc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d1e0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d1e4:	52                   	push   edx
c000d1e5:	50                   	push   eax
c000d1e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1ee:	e8 70 a4 01 00       	call   c0027663 <__adddf3>
c000d1f3:	83 c4 10             	add    esp,0x10
c000d1f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d1fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d1fe:	89 f8                	mov    eax,edi
c000d200:	b9 08 00 00 00       	mov    ecx,0x8
c000d205:	99                   	cdq    
c000d206:	f7 f9                	idiv   ecx
c000d208:	4a                   	dec    edx
c000d209:	83 fa 06             	cmp    edx,0x6
c000d20c:	77 07                	ja     c000d215 <calc_output_multi+0x125>
c000d20e:	ff 24 95 e4 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd611c]
c000d215:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d218:	4f                   	dec    edi
c000d219:	83 ec 0c             	sub    esp,0xc
c000d21c:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000d21f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d223:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000d22a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000d22e:	e8 a4 b4 01 00       	call   c00286d7 <__extendsfdf2>
c000d233:	83 c4 10             	add    esp,0x10
c000d236:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d23a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d246:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d24a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d24e:	e8 8d aa 01 00       	call   c0027ce0 <__muldf3>
c000d253:	83 c4 10             	add    esp,0x10
c000d256:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d25a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d25e:	52                   	push   edx
c000d25f:	50                   	push   eax
c000d260:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d263:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d266:	e8 f8 a3 01 00       	call   c0027663 <__adddf3>
c000d26b:	83 c4 10             	add    esp,0x10
c000d26e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d271:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d274:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d277:	4f                   	dec    edi
c000d278:	83 ec 0c             	sub    esp,0xc
c000d27b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000d27e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d282:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000d289:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000d28d:	e8 45 b4 01 00       	call   c00286d7 <__extendsfdf2>
c000d292:	83 c4 10             	add    esp,0x10
c000d295:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d299:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d29d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2a5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d2a9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d2ad:	e8 2e aa 01 00       	call   c0027ce0 <__muldf3>
c000d2b2:	83 c4 10             	add    esp,0x10
c000d2b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d2b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d2bd:	52                   	push   edx
c000d2be:	50                   	push   eax
c000d2bf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d2c2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d2c5:	e8 99 a3 01 00       	call   c0027663 <__adddf3>
c000d2ca:	83 c4 10             	add    esp,0x10
c000d2cd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d2d0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d2d3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d2d6:	4f                   	dec    edi
c000d2d7:	83 ec 0c             	sub    esp,0xc
c000d2da:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000d2dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d2e1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000d2e8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000d2ec:	e8 e6 b3 01 00       	call   c00286d7 <__extendsfdf2>
c000d2f1:	83 c4 10             	add    esp,0x10
c000d2f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d2f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d2fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d300:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d304:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d308:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d30c:	e8 cf a9 01 00       	call   c0027ce0 <__muldf3>
c000d311:	83 c4 10             	add    esp,0x10
c000d314:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d318:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d31c:	52                   	push   edx
c000d31d:	50                   	push   eax
c000d31e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d321:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d324:	e8 3a a3 01 00       	call   c0027663 <__adddf3>
c000d329:	83 c4 10             	add    esp,0x10
c000d32c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d32f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d332:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d335:	4f                   	dec    edi
c000d336:	83 ec 0c             	sub    esp,0xc
c000d339:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000d33c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d340:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000d347:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000d34b:	e8 87 b3 01 00       	call   c00286d7 <__extendsfdf2>
c000d350:	83 c4 10             	add    esp,0x10
c000d353:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d357:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d35b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d35f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d363:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d36b:	e8 70 a9 01 00       	call   c0027ce0 <__muldf3>
c000d370:	83 c4 10             	add    esp,0x10
c000d373:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d377:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d37b:	52                   	push   edx
c000d37c:	50                   	push   eax
c000d37d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d380:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d383:	e8 db a2 01 00       	call   c0027663 <__adddf3>
c000d388:	83 c4 10             	add    esp,0x10
c000d38b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d38e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d391:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d394:	4f                   	dec    edi
c000d395:	83 ec 0c             	sub    esp,0xc
c000d398:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000d39b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d39f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000d3a6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000d3aa:	e8 28 b3 01 00       	call   c00286d7 <__extendsfdf2>
c000d3af:	83 c4 10             	add    esp,0x10
c000d3b2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d3b6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d3ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d3c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d3ca:	e8 11 a9 01 00       	call   c0027ce0 <__muldf3>
c000d3cf:	83 c4 10             	add    esp,0x10
c000d3d2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d3d6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d3da:	52                   	push   edx
c000d3db:	50                   	push   eax
c000d3dc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d3df:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d3e2:	e8 7c a2 01 00       	call   c0027663 <__adddf3>
c000d3e7:	83 c4 10             	add    esp,0x10
c000d3ea:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d3ed:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d3f0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d3f3:	4f                   	dec    edi
c000d3f4:	83 ec 0c             	sub    esp,0xc
c000d3f7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000d3fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d3fe:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000d405:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000d409:	e8 c9 b2 01 00       	call   c00286d7 <__extendsfdf2>
c000d40e:	83 c4 10             	add    esp,0x10
c000d411:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d415:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d419:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d41d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d421:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d425:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d429:	e8 b2 a8 01 00       	call   c0027ce0 <__muldf3>
c000d42e:	83 c4 10             	add    esp,0x10
c000d431:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d435:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d439:	52                   	push   edx
c000d43a:	50                   	push   eax
c000d43b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d43e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d441:	e8 1d a2 01 00       	call   c0027663 <__adddf3>
c000d446:	83 c4 10             	add    esp,0x10
c000d449:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d44c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d44f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d452:	4f                   	dec    edi
c000d453:	83 ec 0c             	sub    esp,0xc
c000d456:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000d459:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d45d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000d464:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000d468:	e8 6a b2 01 00       	call   c00286d7 <__extendsfdf2>
c000d46d:	83 c4 10             	add    esp,0x10
c000d470:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d474:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d478:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d47c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d480:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d484:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d488:	e8 53 a8 01 00       	call   c0027ce0 <__muldf3>
c000d48d:	83 c4 10             	add    esp,0x10
c000d490:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d494:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d498:	52                   	push   edx
c000d499:	50                   	push   eax
c000d49a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d49d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d4a0:	e8 be a1 01 00       	call   c0027663 <__adddf3>
c000d4a5:	83 c4 10             	add    esp,0x10
c000d4a8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d4ab:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d4ae:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d4b1:	4f                   	dec    edi
c000d4b2:	83 ec 0c             	sub    esp,0xc
c000d4b5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000d4b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d4bc:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000d4c3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000d4c7:	e8 0b b2 01 00       	call   c00286d7 <__extendsfdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d4d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d4e3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d4e7:	e8 f4 a7 01 00       	call   c0027ce0 <__muldf3>
c000d4ec:	83 c4 10             	add    esp,0x10
c000d4ef:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4f3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d4f7:	52                   	push   edx
c000d4f8:	50                   	push   eax
c000d4f9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d4fc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d4ff:	e8 5f a1 01 00       	call   c0027663 <__adddf3>
c000d504:	83 c4 10             	add    esp,0x10
c000d507:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d50a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d50d:	85 ff                	test   edi,edi
c000d50f:	0f 8f e9 fc ff ff    	jg     c000d1fe <calc_output_multi+0x10e>
c000d515:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000d519:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d51d:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000d521:	0f 89 4c fc ff ff    	jns    c000d173 <calc_output_multi+0x83>
c000d527:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000d52b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d52f:	29 c8                	sub    eax,ecx
c000d531:	99                   	cdq    
c000d532:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000d536:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d53a:	0f af d0             	imul   edx,eax
c000d53d:	40                   	inc    eax
c000d53e:	01 d1                	add    ecx,edx
c000d540:	0f af c3             	imul   eax,ebx
c000d543:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d547:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000d54a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d54e:	55                   	push   ebp
c000d54f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d553:	6a 00                	push   0x0
c000d555:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d559:	e8 66 31 ff ff       	call   c00006c4 <memset>
c000d55e:	83 c4 10             	add    esp,0x10
c000d561:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d565:	e8 be ca ff ff       	call   c000a028 <fp_to_double>
c000d56a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d56e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d572:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d576:	e8 a3 ca ff ff       	call   c000a01e <fp_to_int>
c000d57b:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000d57e:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000d581:	57                   	push   edi
c000d582:	57                   	push   edi
c000d583:	89 df                	mov    edi,ebx
c000d585:	55                   	push   ebp
c000d586:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000d58a:	e8 69 9a 01 00       	call   c0026ff8 <__subsf3>
c000d58f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d592:	e8 40 b1 01 00       	call   c00286d7 <__extendsfdf2>
c000d597:	83 c4 10             	add    esp,0x10
c000d59a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d59e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d5a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d5aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5ae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5b2:	e8 29 a7 01 00       	call   c0027ce0 <__muldf3>
c000d5b7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000d5ba:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d5be:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d5c2:	e8 10 b1 01 00       	call   c00286d7 <__extendsfdf2>
c000d5c7:	83 c4 10             	add    esp,0x10
c000d5ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5ce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5d2:	52                   	push   edx
c000d5d3:	50                   	push   eax
c000d5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5dc:	e8 82 a0 01 00       	call   c0027663 <__adddf3>
c000d5e1:	83 c4 10             	add    esp,0x10
c000d5e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5ec:	89 f8                	mov    eax,edi
c000d5ee:	b9 08 00 00 00       	mov    ecx,0x8
c000d5f3:	99                   	cdq    
c000d5f4:	f7 f9                	idiv   ecx
c000d5f6:	4a                   	dec    edx
c000d5f7:	83 fa 06             	cmp    edx,0x6
c000d5fa:	77 07                	ja     c000d603 <calc_output_multi+0x513>
c000d5fc:	ff 24 95 00 9f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6100]
c000d603:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d607:	4f                   	dec    edi
c000d608:	83 ec 0c             	sub    esp,0xc
c000d60b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000d60e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d612:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000d619:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000d61d:	e8 b5 b0 01 00       	call   c00286d7 <__extendsfdf2>
c000d622:	83 c4 10             	add    esp,0x10
c000d625:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d629:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d631:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d635:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d639:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d63d:	e8 9e a6 01 00       	call   c0027ce0 <__muldf3>
c000d642:	83 c4 10             	add    esp,0x10
c000d645:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d649:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d64d:	52                   	push   edx
c000d64e:	50                   	push   eax
c000d64f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d652:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d655:	e8 09 a0 01 00       	call   c0027663 <__adddf3>
c000d65a:	83 c4 10             	add    esp,0x10
c000d65d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d660:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d663:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d667:	4f                   	dec    edi
c000d668:	83 ec 0c             	sub    esp,0xc
c000d66b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000d66e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d672:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000d679:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000d67d:	e8 55 b0 01 00       	call   c00286d7 <__extendsfdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d689:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d68d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d691:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d695:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d699:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d69d:	e8 3e a6 01 00       	call   c0027ce0 <__muldf3>
c000d6a2:	83 c4 10             	add    esp,0x10
c000d6a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6ad:	52                   	push   edx
c000d6ae:	50                   	push   eax
c000d6af:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d6b2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d6b5:	e8 a9 9f 01 00       	call   c0027663 <__adddf3>
c000d6ba:	83 c4 10             	add    esp,0x10
c000d6bd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d6c0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d6c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d6c7:	4f                   	dec    edi
c000d6c8:	83 ec 0c             	sub    esp,0xc
c000d6cb:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000d6ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d6d2:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000d6d9:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000d6dd:	e8 f5 af 01 00       	call   c00286d7 <__extendsfdf2>
c000d6e2:	83 c4 10             	add    esp,0x10
c000d6e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6fd:	e8 de a5 01 00       	call   c0027ce0 <__muldf3>
c000d702:	83 c4 10             	add    esp,0x10
c000d705:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d709:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d70d:	52                   	push   edx
c000d70e:	50                   	push   eax
c000d70f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d712:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d715:	e8 49 9f 01 00       	call   c0027663 <__adddf3>
c000d71a:	83 c4 10             	add    esp,0x10
c000d71d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d720:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d723:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d727:	4f                   	dec    edi
c000d728:	83 ec 0c             	sub    esp,0xc
c000d72b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000d72e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d732:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000d739:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000d73d:	e8 95 af 01 00       	call   c00286d7 <__extendsfdf2>
c000d742:	83 c4 10             	add    esp,0x10
c000d745:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d749:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d74d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d755:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d759:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d75d:	e8 7e a5 01 00       	call   c0027ce0 <__muldf3>
c000d762:	83 c4 10             	add    esp,0x10
c000d765:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d769:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d76d:	52                   	push   edx
c000d76e:	50                   	push   eax
c000d76f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d772:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d775:	e8 e9 9e 01 00       	call   c0027663 <__adddf3>
c000d77a:	83 c4 10             	add    esp,0x10
c000d77d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d780:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d783:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d787:	4f                   	dec    edi
c000d788:	83 ec 0c             	sub    esp,0xc
c000d78b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000d78e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d792:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000d799:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000d79d:	e8 35 af 01 00       	call   c00286d7 <__extendsfdf2>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7bd:	e8 1e a5 01 00       	call   c0027ce0 <__muldf3>
c000d7c2:	83 c4 10             	add    esp,0x10
c000d7c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7cd:	52                   	push   edx
c000d7ce:	50                   	push   eax
c000d7cf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d7d2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d7d5:	e8 89 9e 01 00       	call   c0027663 <__adddf3>
c000d7da:	83 c4 10             	add    esp,0x10
c000d7dd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d7e0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d7e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d7e7:	4f                   	dec    edi
c000d7e8:	83 ec 0c             	sub    esp,0xc
c000d7eb:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000d7ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d7f2:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000d7f9:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000d7fd:	e8 d5 ae 01 00       	call   c00286d7 <__extendsfdf2>
c000d802:	83 c4 10             	add    esp,0x10
c000d805:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d809:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 be a4 01 00       	call   c0027ce0 <__muldf3>
c000d822:	83 c4 10             	add    esp,0x10
c000d825:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d829:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d82d:	52                   	push   edx
c000d82e:	50                   	push   eax
c000d82f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d835:	e8 29 9e 01 00       	call   c0027663 <__adddf3>
c000d83a:	83 c4 10             	add    esp,0x10
c000d83d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d840:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d843:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d847:	4f                   	dec    edi
c000d848:	83 ec 0c             	sub    esp,0xc
c000d84b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000d84e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d852:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000d859:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000d85d:	e8 75 ae 01 00       	call   c00286d7 <__extendsfdf2>
c000d862:	83 c4 10             	add    esp,0x10
c000d865:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d869:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d86d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d871:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d875:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d879:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d87d:	e8 5e a4 01 00       	call   c0027ce0 <__muldf3>
c000d882:	83 c4 10             	add    esp,0x10
c000d885:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d889:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d88d:	52                   	push   edx
c000d88e:	50                   	push   eax
c000d88f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d892:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d895:	e8 c9 9d 01 00       	call   c0027663 <__adddf3>
c000d89a:	83 c4 10             	add    esp,0x10
c000d89d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d8a0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d8a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d8a7:	4f                   	dec    edi
c000d8a8:	83 ec 0c             	sub    esp,0xc
c000d8ab:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000d8ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d8b2:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000d8b9:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000d8bd:	e8 15 ae 01 00       	call   c00286d7 <__extendsfdf2>
c000d8c2:	83 c4 10             	add    esp,0x10
c000d8c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8dd:	e8 fe a3 01 00       	call   c0027ce0 <__muldf3>
c000d8e2:	83 c4 10             	add    esp,0x10
c000d8e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8ed:	52                   	push   edx
c000d8ee:	50                   	push   eax
c000d8ef:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d8f2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d8f5:	e8 69 9d 01 00       	call   c0027663 <__adddf3>
c000d8fa:	83 c4 10             	add    esp,0x10
c000d8fd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d900:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d903:	85 ff                	test   edi,edi
c000d905:	0f 8f e1 fc ff ff    	jg     c000d5ec <calc_output_multi+0x4fc>
c000d90b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d90f:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000d913:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000d917:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000d91c:	0f 8f 3f fc ff ff    	jg     c000d561 <calc_output_multi+0x471>
c000d922:	be 08 00 00 00       	mov    esi,0x8
c000d927:	89 d8                	mov    eax,ebx
c000d929:	99                   	cdq    
c000d92a:	f7 fe                	idiv   esi
c000d92c:	4a                   	dec    edx
c000d92d:	83 fa 06             	cmp    edx,0x6
c000d930:	77 07                	ja     c000d939 <calc_output_multi+0x849>
c000d932:	ff 24 95 1c 9f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd60e4]
c000d939:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d93d:	4b                   	dec    ebx
c000d93e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000d942:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000d945:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d949:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000d94d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000d950:	e8 0e 9d 01 00       	call   c0027663 <__adddf3>
c000d955:	83 c4 10             	add    esp,0x10
c000d958:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d95c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d960:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d964:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d968:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d96c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d970:	e8 6b a3 01 00       	call   c0027ce0 <__muldf3>
c000d975:	5d                   	pop    ebp
c000d976:	59                   	pop    ecx
c000d977:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d97b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d983:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d987:	e8 27 ac 01 00       	call   c00285b3 <__truncdfsf2>
c000d98c:	83 c4 10             	add    esp,0x10
c000d98f:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000d993:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000d996:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d99a:	4b                   	dec    ebx
c000d99b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000d99f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000d9a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d9a6:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000d9aa:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000d9ad:	e8 b1 9c 01 00       	call   c0027663 <__adddf3>
c000d9b2:	83 c4 10             	add    esp,0x10
c000d9b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9cd:	e8 0e a3 01 00       	call   c0027ce0 <__muldf3>
c000d9d2:	59                   	pop    ecx
c000d9d3:	5f                   	pop    edi
c000d9d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9d8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9e4:	e8 ca ab 01 00       	call   c00285b3 <__truncdfsf2>
c000d9e9:	83 c4 10             	add    esp,0x10
c000d9ec:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000d9f0:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000d9f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d9f7:	4b                   	dec    ebx
c000d9f8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000d9fc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000d9ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000da03:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000da07:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000da0a:	e8 54 9c 01 00       	call   c0027663 <__adddf3>
c000da0f:	83 c4 10             	add    esp,0x10
c000da12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000da16:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000da1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2a:	e8 b1 a2 01 00       	call   c0027ce0 <__muldf3>
c000da2f:	5f                   	pop    edi
c000da30:	5d                   	pop    ebp
c000da31:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da35:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da41:	e8 6d ab 01 00       	call   c00285b3 <__truncdfsf2>
c000da46:	83 c4 10             	add    esp,0x10
c000da49:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000da4d:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000da50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da54:	4b                   	dec    ebx
c000da55:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000da59:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000da5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000da60:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000da64:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000da67:	e8 f7 9b 01 00       	call   c0027663 <__adddf3>
c000da6c:	83 c4 10             	add    esp,0x10
c000da6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000da73:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000da77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da87:	e8 54 a2 01 00       	call   c0027ce0 <__muldf3>
c000da8c:	5d                   	pop    ebp
c000da8d:	59                   	pop    ecx
c000da8e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da92:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da9e:	e8 10 ab 01 00       	call   c00285b3 <__truncdfsf2>
c000daa3:	83 c4 10             	add    esp,0x10
c000daa6:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000daaa:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000daad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dab1:	4b                   	dec    ebx
c000dab2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000dab6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000dab9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dabd:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000dac1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000dac4:	e8 9a 9b 01 00       	call   c0027663 <__adddf3>
c000dac9:	83 c4 10             	add    esp,0x10
c000dacc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dad0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dad4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dad8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dadc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dae0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dae4:	e8 f7 a1 01 00       	call   c0027ce0 <__muldf3>
c000dae9:	59                   	pop    ecx
c000daea:	5f                   	pop    edi
c000daeb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000daef:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000daf3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000daf7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dafb:	e8 b3 aa 01 00       	call   c00285b3 <__truncdfsf2>
c000db00:	83 c4 10             	add    esp,0x10
c000db03:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000db07:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000db0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db0e:	4b                   	dec    ebx
c000db0f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000db13:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000db16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000db1a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000db1e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000db21:	e8 3d 9b 01 00       	call   c0027663 <__adddf3>
c000db26:	83 c4 10             	add    esp,0x10
c000db29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db2d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000db31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db41:	e8 9a a1 01 00       	call   c0027ce0 <__muldf3>
c000db46:	5f                   	pop    edi
c000db47:	5d                   	pop    ebp
c000db48:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db4c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000db50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db58:	e8 56 aa 01 00       	call   c00285b3 <__truncdfsf2>
c000db5d:	83 c4 10             	add    esp,0x10
c000db60:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000db64:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000db67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db6b:	4b                   	dec    ebx
c000db6c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000db70:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000db73:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000db77:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000db7b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000db7e:	e8 e0 9a 01 00       	call   c0027663 <__adddf3>
c000db83:	83 c4 10             	add    esp,0x10
c000db86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000db8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db9e:	e8 3d a1 01 00       	call   c0027ce0 <__muldf3>
c000dba3:	5d                   	pop    ebp
c000dba4:	59                   	pop    ecx
c000dba5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dba9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dbad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb5:	e8 f9 a9 01 00       	call   c00285b3 <__truncdfsf2>
c000dbba:	83 c4 10             	add    esp,0x10
c000dbbd:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000dbc1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000dbc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dbc8:	4b                   	dec    ebx
c000dbc9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000dbcd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000dbd0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dbd4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000dbd8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000dbdb:	e8 83 9a 01 00       	call   c0027663 <__adddf3>
c000dbe0:	83 c4 10             	add    esp,0x10
c000dbe3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbfb:	e8 e0 a0 01 00       	call   c0027ce0 <__muldf3>
c000dc00:	59                   	pop    ecx
c000dc01:	5f                   	pop    edi
c000dc02:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dc06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc12:	e8 9c a9 01 00       	call   c00285b3 <__truncdfsf2>
c000dc17:	83 c4 10             	add    esp,0x10
c000dc1a:	85 db                	test   ebx,ebx
c000dc1c:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000dc20:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000dc23:	0f 8f fe fc ff ff    	jg     c000d927 <calc_output_multi+0x837>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	5b                   	pop    ebx
c000dc2d:	5e                   	pop    esi
c000dc2e:	5f                   	pop    edi
c000dc2f:	5d                   	pop    ebp
c000dc30:	c3                   	ret    

c000dc31 <sinc_multichan_vari_process>:
c000dc31:	55                   	push   ebp
c000dc32:	ba 05 00 00 00       	mov    edx,0x5
c000dc37:	57                   	push   edi
c000dc38:	56                   	push   esi
c000dc39:	53                   	push   ebx
c000dc3a:	83 ec 4c             	sub    esp,0x4c
c000dc3d:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000dc41:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000dc45:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000dc48:	85 db                	test   ebx,ebx
c000dc4a:	0f 84 9b 06 00 00    	je     c000e2eb <sinc_multichan_vari_process+0x6ba>
c000dc50:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dc53:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000dc56:	0f af c5             	imul   eax,ebp
c000dc59:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000dc5c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000dc5f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000dc66:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000dc6d:	0f af c5             	imul   eax,ebp
c000dc70:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000dc73:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dc76:	8b 06                	mov    eax,DWORD PTR [esi]
c000dc78:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dc7c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dc80:	68 00 00 70 3f       	push   0x3f700000
c000dc85:	6a 00                	push   0x0
c000dc87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc8f:	e8 1b a9 01 00       	call   c00285af <__ltdf2>
c000dc94:	83 c4 10             	add    esp,0x10
c000dc97:	ba 16 00 00 00       	mov    edx,0x16
c000dc9c:	85 c0                	test   eax,eax
c000dc9e:	0f 88 47 06 00 00    	js     c000e2eb <sinc_multichan_vari_process+0x6ba>
c000dca4:	68 00 00 70 40       	push   0x40700000
c000dca9:	6a 00                	push   0x0
c000dcab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcb3:	e8 d9 a8 01 00       	call   c0028591 <__gtdf2>
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	ba 16 00 00 00       	mov    edx,0x16
c000dcc0:	85 c0                	test   eax,eax
c000dcc2:	0f 8f 23 06 00 00    	jg     c000e2eb <sinc_multichan_vari_process+0x6ba>
c000dcc8:	83 ec 0c             	sub    esp,0xc
c000dccb:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dcce:	e8 70 a6 01 00       	call   c0028343 <__floatsidf>
c000dcd3:	83 c4 10             	add    esp,0x10
c000dcd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dcda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dcde:	68 00 00 00 40       	push   0x40000000
c000dce3:	6a 00                	push   0x0
c000dce5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dce9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dced:	e8 71 99 01 00       	call   c0027663 <__adddf3>
c000dcf2:	59                   	pop    ecx
c000dcf3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dcf7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dcfb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dcfe:	e8 40 a6 01 00       	call   c0028343 <__floatsidf>
c000dd03:	83 c4 10             	add    esp,0x10
c000dd06:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd0a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd0e:	52                   	push   edx
c000dd0f:	50                   	push   eax
c000dd10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd18:	e8 a7 a2 01 00       	call   c0027fc4 <__divdf3>
c000dd1d:	83 c4 10             	add    esp,0x10
c000dd20:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd24:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd28:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000dd2b:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000dd2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd32:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd46:	e8 46 a8 01 00       	call   c0028591 <__gtdf2>
c000dd4b:	83 c4 10             	add    esp,0x10
c000dd4e:	85 c0                	test   eax,eax
c000dd50:	7e 2d                	jle    c000dd7f <sinc_multichan_vari_process+0x14e>
c000dd52:	68 00 00 f0 3f       	push   0x3ff00000
c000dd57:	6a 00                	push   0x0
c000dd59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd61:	e8 49 a8 01 00       	call   c00285af <__ltdf2>
c000dd66:	83 c4 10             	add    esp,0x10
c000dd69:	85 c0                	test   eax,eax
c000dd6b:	79 4d                	jns    c000ddba <sinc_multichan_vari_process+0x189>
c000dd6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd71:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000dd75:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd7d:	eb 1b                	jmp    c000dd9a <sinc_multichan_vari_process+0x169>
c000dd7f:	68 00 00 f0 3f       	push   0x3ff00000
c000dd84:	6a 00                	push   0x0
c000dd86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd8e:	e8 1c a8 01 00       	call   c00285af <__ltdf2>
c000dd93:	83 c4 10             	add    esp,0x10
c000dd96:	85 c0                	test   eax,eax
c000dd98:	79 20                	jns    c000ddba <sinc_multichan_vari_process+0x189>
c000dd9a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd9e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dda2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dda6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ddaa:	e8 15 a2 01 00       	call   c0027fc4 <__divdf3>
c000ddaf:	83 c4 10             	add    esp,0x10
c000ddb2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ddb6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ddba:	50                   	push   eax
c000ddbb:	50                   	push   eax
c000ddbc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ddc0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ddc4:	e8 97 a9 01 00       	call   c0028760 <lrint>
c000ddc9:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000ddcc:	40                   	inc    eax
c000ddcd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ddd1:	0f af c5             	imul   eax,ebp
c000ddd4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ddd8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000dddb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dddf:	58                   	pop    eax
c000dde0:	5a                   	pop    edx
c000dde1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dde5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dde9:	e8 72 a9 01 00       	call   c0028760 <lrint>
c000ddee:	83 ec 0c             	sub    esp,0xc
c000ddf1:	50                   	push   eax
c000ddf2:	e8 4c a5 01 00       	call   c0028343 <__floatsidf>
c000ddf7:	83 c4 10             	add    esp,0x10
c000ddfa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ddfe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de02:	52                   	push   edx
c000de03:	50                   	push   eax
c000de04:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000de08:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000de0c:	e8 a3 9e 01 00       	call   c0027cb4 <__subdf3>
c000de11:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000de15:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000de19:	83 c4 20             	add    esp,0x20
c000de1c:	6a 00                	push   0x0
c000de1e:	6a 00                	push   0x0
c000de20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de28:	e8 82 a7 01 00       	call   c00285af <__ltdf2>
c000de2d:	83 c4 10             	add    esp,0x10
c000de30:	85 c0                	test   eax,eax
c000de32:	79 1f                	jns    c000de53 <sinc_multichan_vari_process+0x222>
c000de34:	68 00 00 f0 3f       	push   0x3ff00000
c000de39:	6a 00                	push   0x0
c000de3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de43:	e8 1b 98 01 00       	call   c0027663 <__adddf3>
c000de48:	83 c4 10             	add    esp,0x10
c000de4b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000de53:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000de56:	83 ec 10             	sub    esp,0x10
c000de59:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de5d:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000de60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de68:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000de6c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000de70:	e8 3f 9e 01 00       	call   c0027cb4 <__subdf3>
c000de75:	83 c4 18             	add    esp,0x18
c000de78:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000de7c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000de80:	52                   	push   edx
c000de81:	50                   	push   eax
c000de82:	e8 d9 a8 01 00       	call   c0028760 <lrint>
c000de87:	0f af e8             	imul   ebp,eax
c000de8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de8e:	01 e8                	add    eax,ebp
c000de90:	99                   	cdq    
c000de91:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000de94:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000de97:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000de9b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000de9f:	68 00 00 f0 3f       	push   0x3ff00000
c000dea4:	6a 00                	push   0x0
c000dea6:	e8 19 a1 01 00       	call   c0027fc4 <__divdf3>
c000deab:	83 c4 10             	add    esp,0x10
c000deae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000deb2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000deb6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000debb:	68 23 42 92 0c       	push   0xc924223
c000dec0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dec4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dec8:	e8 96 97 01 00       	call   c0027663 <__adddf3>
c000decd:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ded1:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ded5:	83 c4 20             	add    esp,0x20
c000ded8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000dee0:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000dee8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000deeb:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000deee:	7d 50                	jge    c000df40 <sinc_multichan_vari_process+0x30f>
c000def0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000def3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000def6:	01 c8                	add    eax,ecx
c000def8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000defb:	99                   	cdq    
c000defc:	f7 f9                	idiv   ecx
c000defe:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000df02:	7d 0c                	jge    c000df10 <sinc_multichan_vari_process+0x2df>
c000df04:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000df07:	85 ed                	test   ebp,ebp
c000df09:	79 6b                	jns    c000df76 <sinc_multichan_vari_process+0x345>
c000df0b:	e9 e6 00 00 00       	jmp    c000dff6 <sinc_multichan_vari_process+0x3c5>
c000df10:	50                   	push   eax
c000df11:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000df15:	57                   	push   edi
c000df16:	53                   	push   ebx
c000df17:	e8 d9 03 00 00       	call   c000e2f5 <prepare_data>
c000df1c:	83 c4 10             	add    esp,0x10
c000df1f:	89 c2                	mov    edx,eax
c000df21:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000df24:	85 c0                	test   eax,eax
c000df26:	0f 85 bf 03 00 00    	jne    c000e2eb <sinc_multichan_vari_process+0x6ba>
c000df2c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000df2f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000df32:	01 c8                	add    eax,ecx
c000df34:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000df37:	99                   	cdq    
c000df38:	f7 f9                	idiv   ecx
c000df3a:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000df3e:	7c c4                	jl     c000df04 <sinc_multichan_vari_process+0x2d3>
c000df40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000df44:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000df48:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000df4b:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000df4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df52:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000df56:	89 06                	mov    DWORD PTR [esi],eax
c000df58:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000df5b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000df5e:	99                   	cdq    
c000df5f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000df62:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000df65:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000df68:	99                   	cdq    
c000df69:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000df6c:	31 d2                	xor    edx,edx
c000df6e:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000df71:	e9 75 03 00 00       	jmp    c000e2eb <sinc_multichan_vari_process+0x6ba>
c000df76:	83 ec 0c             	sub    esp,0xc
c000df79:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000df7c:	e8 c2 a3 01 00       	call   c0028343 <__floatsidf>
c000df81:	83 c4 10             	add    esp,0x10
c000df84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df88:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df94:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df9c:	e8 c2 96 01 00       	call   c0027663 <__adddf3>
c000dfa1:	83 c4 10             	add    esp,0x10
c000dfa4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dfa8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000dfac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dfb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dfb8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dfbc:	e8 a2 96 01 00       	call   c0027663 <__adddf3>
c000dfc1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000dfc4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dfc8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dfcc:	e8 72 a3 01 00       	call   c0028343 <__floatsidf>
c000dfd1:	83 c4 10             	add    esp,0x10
c000dfd4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dfd8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dfdc:	52                   	push   edx
c000dfdd:	50                   	push   eax
c000dfde:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dfe2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dfe6:	e8 c2 a5 01 00       	call   c00285ad <__gedf2>
c000dfeb:	83 c4 10             	add    esp,0x10
c000dfee:	85 c0                	test   eax,eax
c000dff0:	0f 89 4a ff ff ff    	jns    c000df40 <sinc_multichan_vari_process+0x30f>
c000dff6:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000dffa:	0f 8e ed 00 00 00    	jle    c000e0ed <sinc_multichan_vari_process+0x4bc>
c000e000:	83 ec 10             	sub    esp,0x10
c000e003:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000e006:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000e009:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000e00c:	ff 36                	push   DWORD PTR [esi]
c000e00e:	e8 a1 9c 01 00       	call   c0027cb4 <__subdf3>
c000e013:	83 c4 18             	add    esp,0x18
c000e016:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e01a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e01e:	52                   	push   edx
c000e01f:	50                   	push   eax
c000e020:	e8 1b a7 01 00       	call   c0028740 <fabs>
c000e025:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e029:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000e02d:	83 c4 10             	add    esp,0x10
c000e030:	68 df 7c db 3d       	push   0x3ddb7cdf
c000e035:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000e03a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e03e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e042:	e8 4a a5 01 00       	call   c0028591 <__gtdf2>
c000e047:	83 c4 10             	add    esp,0x10
c000e04a:	85 c0                	test   eax,eax
c000e04c:	0f 8e 9b 00 00 00    	jle    c000e0ed <sinc_multichan_vari_process+0x4bc>
c000e052:	8b 06                	mov    eax,DWORD PTR [esi]
c000e054:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000e057:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e05b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e05f:	52                   	push   edx
c000e060:	50                   	push   eax
c000e061:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000e064:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000e067:	e8 48 9c 01 00       	call   c0027cb4 <__subdf3>
c000e06c:	59                   	pop    ecx
c000e06d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e071:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000e075:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e078:	e8 c6 a2 01 00       	call   c0028343 <__floatsidf>
c000e07d:	83 c4 10             	add    esp,0x10
c000e080:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e084:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e088:	52                   	push   edx
c000e089:	50                   	push   eax
c000e08a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e08e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e092:	e8 49 9c 01 00       	call   c0027ce0 <__muldf3>
c000e097:	5d                   	pop    ebp
c000e098:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e09c:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000e0a0:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000e0a3:	e8 9b a2 01 00       	call   c0028343 <__floatsidf>
c000e0a8:	83 c4 10             	add    esp,0x10
c000e0ab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e0af:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e0b3:	52                   	push   edx
c000e0b4:	50                   	push   eax
c000e0b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0bd:	e8 02 9f 01 00       	call   c0027fc4 <__divdf3>
c000e0c2:	83 c4 10             	add    esp,0x10
c000e0c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0c9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0dd:	e8 81 95 01 00       	call   c0027663 <__adddf3>
c000e0e2:	83 c4 10             	add    esp,0x10
c000e0e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e0ed:	83 ec 0c             	sub    esp,0xc
c000e0f0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e0f3:	e8 4b a2 01 00       	call   c0028343 <__floatsidf>
c000e0f8:	83 c4 10             	add    esp,0x10
c000e0fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e0ff:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e103:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e107:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e10b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e10f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e113:	e8 97 a4 01 00       	call   c00285af <__ltdf2>
c000e118:	83 c4 10             	add    esp,0x10
c000e11b:	85 c0                	test   eax,eax
c000e11d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e121:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e125:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e129:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000e12d:	78 10                	js     c000e13f <sinc_multichan_vari_process+0x50e>
c000e12f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e133:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e137:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e13b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e13f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e143:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e147:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e14b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e14f:	e8 8c 9b 01 00       	call   c0027ce0 <__muldf3>
c000e154:	59                   	pop    ecx
c000e155:	5d                   	pop    ebp
c000e156:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e15a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e15e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e162:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e166:	e8 88 be ff ff       	call   c0009ff3 <double_to_fp>
c000e16b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e16f:	89 c5                	mov    ebp,eax
c000e171:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e175:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e179:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e17d:	e8 5e 9b 01 00       	call   c0027ce0 <__muldf3>
c000e182:	83 c4 18             	add    esp,0x18
c000e185:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000e189:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e18d:	52                   	push   edx
c000e18e:	50                   	push   eax
c000e18f:	e8 5f be ff ff       	call   c0009ff3 <double_to_fp>
c000e194:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000e197:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e19b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e19e:	8d 04 90             	lea    eax,[eax+edx*4]
c000e1a1:	50                   	push   eax
c000e1a2:	50                   	push   eax
c000e1a3:	50                   	push   eax
c000e1a4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e1a7:	e8 97 a1 01 00       	call   c0028343 <__floatsidf>
c000e1ac:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e1b0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000e1b4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e1b8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e1bc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e1c0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e1c4:	e8 fb 9d 01 00       	call   c0027fc4 <__divdf3>
c000e1c9:	83 c4 1c             	add    esp,0x1c
c000e1cc:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e1d0:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000e1d4:	52                   	push   edx
c000e1d5:	89 ea                	mov    edx,ebp
c000e1d7:	50                   	push   eax
c000e1d8:	89 d8                	mov    eax,ebx
c000e1da:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e1dd:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000e1e1:	e8 0a ef ff ff       	call   c000d0f0 <calc_output_multi>
c000e1e6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000e1e9:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000e1ec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e1f0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e1f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e1f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e1fc:	e8 c3 9d 01 00       	call   c0027fc4 <__divdf3>
c000e201:	83 c4 10             	add    esp,0x10
c000e204:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e208:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000e20c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e210:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e214:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e218:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e21c:	e8 42 94 01 00       	call   c0027663 <__adddf3>
c000e221:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000e225:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e229:	83 c4 28             	add    esp,0x28
c000e22c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e230:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e234:	e8 27 a5 01 00       	call   c0028760 <lrint>
c000e239:	83 ec 0c             	sub    esp,0xc
c000e23c:	50                   	push   eax
c000e23d:	e8 01 a1 01 00       	call   c0028343 <__floatsidf>
c000e242:	83 c4 10             	add    esp,0x10
c000e245:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e249:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e24d:	52                   	push   edx
c000e24e:	50                   	push   eax
c000e24f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000e253:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000e257:	e8 58 9a 01 00       	call   c0027cb4 <__subdf3>
c000e25c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e260:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e264:	83 c4 20             	add    esp,0x20
c000e267:	6a 00                	push   0x0
c000e269:	6a 00                	push   0x0
c000e26b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e26f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e273:	e8 37 a3 01 00       	call   c00285af <__ltdf2>
c000e278:	83 c4 10             	add    esp,0x10
c000e27b:	85 c0                	test   eax,eax
c000e27d:	79 20                	jns    c000e29f <sinc_multichan_vari_process+0x66e>
c000e27f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e283:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e287:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e28b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e28f:	e8 cf 93 01 00       	call   c0027663 <__adddf3>
c000e294:	83 c4 10             	add    esp,0x10
c000e297:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e29b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e29f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000e2a2:	83 ec 10             	sub    esp,0x10
c000e2a5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e2a9:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e2ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000e2b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000e2bc:	e8 f3 99 01 00       	call   c0027cb4 <__subdf3>
c000e2c1:	83 c4 18             	add    esp,0x18
c000e2c4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e2c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e2cc:	52                   	push   edx
c000e2cd:	50                   	push   eax
c000e2ce:	e8 8d a4 01 00       	call   c0028760 <lrint>
c000e2d3:	0f af e8             	imul   ebp,eax
c000e2d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e2da:	83 c4 10             	add    esp,0x10
c000e2dd:	01 e8                	add    eax,ebp
c000e2df:	99                   	cdq    
c000e2e0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000e2e3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000e2e6:	e9 fd fb ff ff       	jmp    c000dee8 <sinc_multichan_vari_process+0x2b7>
c000e2eb:	83 c4 4c             	add    esp,0x4c
c000e2ee:	89 d0                	mov    eax,edx
c000e2f0:	5b                   	pop    ebx
c000e2f1:	5e                   	pop    esi
c000e2f2:	5f                   	pop    edi
c000e2f3:	5d                   	pop    ebp
c000e2f4:	c3                   	ret    

c000e2f5 <prepare_data>:
c000e2f5:	55                   	push   ebp
c000e2f6:	57                   	push   edi
c000e2f7:	56                   	push   esi
c000e2f8:	53                   	push   ebx
c000e2f9:	83 ec 1c             	sub    esp,0x1c
c000e2fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e300:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e304:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000e308:	0f 89 57 01 00 00    	jns    c000e465 <prepare_data+0x170>
c000e30e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000e311:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000e314:	85 d2                	test   edx,edx
c000e316:	75 0d                	jne    c000e325 <prepare_data+0x30>
c000e318:	8d 14 36             	lea    edx,[esi+esi*1]
c000e31b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000e31e:	29 d0                	sub    eax,edx
c000e320:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000e323:	eb 44                	jmp    c000e369 <prepare_data+0x74>
c000e325:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000e328:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000e32b:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000e32e:	39 c1                	cmp    ecx,eax
c000e330:	7d 04                	jge    c000e336 <prepare_data+0x41>
c000e332:	29 d0                	sub    eax,edx
c000e334:	eb 2d                	jmp    c000e363 <prepare_data+0x6e>
c000e336:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000e33c:	29 d7                	sub    edi,edx
c000e33e:	01 f7                	add    edi,esi
c000e340:	51                   	push   ecx
c000e341:	29 f2                	sub    edx,esi
c000e343:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000e34a:	8d 14 90             	lea    edx,[eax+edx*4]
c000e34d:	51                   	push   ecx
c000e34e:	52                   	push   edx
c000e34f:	50                   	push   eax
c000e350:	e8 13 23 ff ff       	call   c0000668 <memmove>
c000e355:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000e358:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000e35b:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000e35e:	29 f0                	sub    eax,esi
c000e360:	83 c4 10             	add    esp,0x10
c000e363:	29 f0                	sub    eax,esi
c000e365:	79 02                	jns    c000e369 <prepare_data+0x74>
c000e367:	31 c0                	xor    eax,eax
c000e369:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e36c:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000e36f:	29 ef                	sub    edi,ebp
c000e371:	39 c7                	cmp    edi,eax
c000e373:	7e 02                	jle    c000e377 <prepare_data+0x82>
c000e375:	89 c7                	mov    edi,eax
c000e377:	89 f8                	mov    eax,edi
c000e379:	99                   	cdq    
c000e37a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e37d:	b8 15 00 00 00       	mov    eax,0x15
c000e382:	29 d7                	sub    edi,edx
c000e384:	0f 88 dd 00 00 00    	js     c000e467 <prepare_data+0x172>
c000e38a:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000e38d:	8d 14 39             	lea    edx,[ecx+edi*1]
c000e390:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000e393:	0f 8f ce 00 00 00    	jg     c000e467 <prepare_data+0x172>
c000e399:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000e39f:	50                   	push   eax
c000e3a0:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000e3a7:	50                   	push   eax
c000e3a8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e3ac:	8b 00                	mov    eax,DWORD PTR [eax]
c000e3ae:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000e3b1:	50                   	push   eax
c000e3b2:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000e3b5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e3b9:	50                   	push   eax
c000e3ba:	e8 e1 22 ff ff       	call   c00006a0 <memcpy>
c000e3bf:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000e3c2:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000e3c5:	01 fd                	add    ebp,edi
c000e3c7:	01 f9                	add    ecx,edi
c000e3c9:	83 c4 10             	add    esp,0x10
c000e3cc:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000e3cf:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000e3d2:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000e3d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3d9:	0f 85 86 00 00 00    	jne    c000e465 <prepare_data+0x170>
c000e3df:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000e3e2:	89 e8                	mov    eax,ebp
c000e3e4:	8d 3c 36             	lea    edi,[esi+esi*1]
c000e3e7:	29 c8                	sub    eax,ecx
c000e3e9:	39 f8                	cmp    eax,edi
c000e3eb:	7d 78                	jge    c000e465 <prepare_data+0x170>
c000e3ed:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000e3f1:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000e3f5:	74 6e                	je     c000e465 <prepare_data+0x170>
c000e3f7:	8d 7e 04             	lea    edi,[esi+0x4]
c000e3fa:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000e3fe:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000e401:	29 ef                	sub    edi,ebp
c000e403:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000e407:	7c 29                	jl     c000e432 <prepare_data+0x13d>
c000e409:	8d 3c 30             	lea    edi,[eax+esi*1]
c000e40c:	29 f1                	sub    ecx,esi
c000e40e:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000e415:	55                   	push   ebp
c000e416:	50                   	push   eax
c000e417:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000e41a:	50                   	push   eax
c000e41b:	52                   	push   edx
c000e41c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e420:	e8 43 22 ff ff       	call   c0000668 <memmove>
c000e425:	83 c4 10             	add    esp,0x10
c000e428:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000e42b:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000e42e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e432:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000e435:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000e438:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000e43b:	83 c6 05             	add    esi,0x5
c000e43e:	78 07                	js     c000e447 <prepare_data+0x152>
c000e440:	8d 3c 30             	lea    edi,[eax+esi*1]
c000e443:	39 cf                	cmp    edi,ecx
c000e445:	7e 04                	jle    c000e44b <prepare_data+0x156>
c000e447:	89 ce                	mov    esi,ecx
c000e449:	29 c6                	sub    esi,eax
c000e44b:	8d 04 82             	lea    eax,[edx+eax*4]
c000e44e:	51                   	push   ecx
c000e44f:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000e456:	51                   	push   ecx
c000e457:	6a 00                	push   0x0
c000e459:	50                   	push   eax
c000e45a:	e8 65 22 ff ff       	call   c00006c4 <memset>
c000e45f:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000e462:	83 c4 10             	add    esp,0x10
c000e465:	31 c0                	xor    eax,eax
c000e467:	83 c4 1c             	add    esp,0x1c
c000e46a:	5b                   	pop    ebx
c000e46b:	5e                   	pop    esi
c000e46c:	5f                   	pop    edi
c000e46d:	5d                   	pop    ebp
c000e46e:	c3                   	ret    

c000e46f <zoh_vari_process>:
c000e46f:	55                   	push   ebp
c000e470:	31 d2                	xor    edx,edx
c000e472:	57                   	push   edi
c000e473:	56                   	push   esi
c000e474:	53                   	push   ebx
c000e475:	83 ec 3c             	sub    esp,0x3c
c000e478:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000e47c:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000e480:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000e484:	0f 8e 80 06 00 00    	jle    c000eb0a <zoh_vari_process+0x69b>
c000e48a:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000e48d:	ba 05 00 00 00       	mov    edx,0x5
c000e492:	85 db                	test   ebx,ebx
c000e494:	0f 84 70 06 00 00    	je     c000eb0a <zoh_vari_process+0x69b>
c000e49a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e49d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000e4a1:	74 19                	je     c000e4bc <zoh_vari_process+0x4d>
c000e4a3:	31 d2                	xor    edx,edx
c000e4a5:	39 c2                	cmp    edx,eax
c000e4a7:	7d 0c                	jge    c000e4b5 <zoh_vari_process+0x46>
c000e4a9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e4ab:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000e4ae:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000e4b2:	42                   	inc    edx
c000e4b3:	eb f0                	jmp    c000e4a5 <zoh_vari_process+0x36>
c000e4b5:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000e4bc:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000e4bf:	0f af d0             	imul   edx,eax
c000e4c2:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000e4c5:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000e4c9:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000e4d0:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000e4d3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000e4da:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e4dd:	8b 07                	mov    eax,DWORD PTR [edi]
c000e4df:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e4e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e4e7:	68 00 00 70 3f       	push   0x3f700000
c000e4ec:	6a 00                	push   0x0
c000e4ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e4f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e4f6:	e8 b4 a0 01 00       	call   c00285af <__ltdf2>
c000e4fb:	83 c4 10             	add    esp,0x10
c000e4fe:	ba 16 00 00 00       	mov    edx,0x16
c000e503:	85 c0                	test   eax,eax
c000e505:	0f 88 ff 05 00 00    	js     c000eb0a <zoh_vari_process+0x69b>
c000e50b:	68 00 00 70 40       	push   0x40700000
c000e510:	6a 00                	push   0x0
c000e512:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e516:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e51a:	e8 72 a0 01 00       	call   c0028591 <__gtdf2>
c000e51f:	83 c4 10             	add    esp,0x10
c000e522:	ba 16 00 00 00       	mov    edx,0x16
c000e527:	85 c0                	test   eax,eax
c000e529:	0f 8f db 05 00 00    	jg     c000eb0a <zoh_vari_process+0x69b>
c000e52f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e532:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000e535:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e539:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e53d:	68 00 00 f0 3f       	push   0x3ff00000
c000e542:	6a 00                	push   0x0
c000e544:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e548:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54c:	e8 5e a0 01 00       	call   c00285af <__ltdf2>
c000e551:	83 c4 10             	add    esp,0x10
c000e554:	85 c0                	test   eax,eax
c000e556:	0f 89 da 01 00 00    	jns    c000e736 <zoh_vari_process+0x2c7>
c000e55c:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000e55f:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000e562:	0f 8d ce 01 00 00    	jge    c000e736 <zoh_vari_process+0x2c7>
c000e568:	83 ec 0c             	sub    esp,0xc
c000e56b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e56e:	e8 d0 9d 01 00       	call   c0028343 <__floatsidf>
c000e573:	83 c4 10             	add    esp,0x10
c000e576:	89 04 24             	mov    DWORD PTR [esp],eax
c000e579:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e57d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e581:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e585:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e589:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e58d:	e8 4e 97 01 00       	call   c0027ce0 <__muldf3>
c000e592:	59                   	pop    ecx
c000e593:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e597:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e59b:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000e59e:	e8 a0 9d 01 00       	call   c0028343 <__floatsidf>
c000e5a3:	83 c4 10             	add    esp,0x10
c000e5a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e5aa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e5ae:	52                   	push   edx
c000e5af:	50                   	push   eax
c000e5b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e5b4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e5b8:	e8 a6 90 01 00       	call   c0027663 <__adddf3>
c000e5bd:	59                   	pop    ecx
c000e5be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e5c2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e5c6:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000e5c9:	e8 75 9d 01 00       	call   c0028343 <__floatsidf>
c000e5ce:	83 c4 10             	add    esp,0x10
c000e5d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e5d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e5d9:	52                   	push   edx
c000e5da:	50                   	push   eax
c000e5db:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e5df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e5e3:	e8 c5 9f 01 00       	call   c00285ad <__gedf2>
c000e5e8:	83 c4 10             	add    esp,0x10
c000e5eb:	85 c0                	test   eax,eax
c000e5ed:	0f 89 43 01 00 00    	jns    c000e736 <zoh_vari_process+0x2c7>
c000e5f3:	85 ed                	test   ebp,ebp
c000e5f5:	0f 8e ec 00 00 00    	jle    c000e6e7 <zoh_vari_process+0x278>
c000e5fb:	83 ec 10             	sub    esp,0x10
c000e5fe:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e601:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e604:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e607:	ff 37                	push   DWORD PTR [edi]
c000e609:	e8 a6 96 01 00       	call   c0027cb4 <__subdf3>
c000e60e:	83 c4 18             	add    esp,0x18
c000e611:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e615:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e619:	52                   	push   edx
c000e61a:	50                   	push   eax
c000e61b:	e8 20 a1 01 00       	call   c0028740 <fabs>
c000e620:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e624:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e628:	83 c4 10             	add    esp,0x10
c000e62b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e630:	68 23 42 92 0c       	push   0xc924223
c000e635:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e639:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e63d:	e8 4f 9f 01 00       	call   c0028591 <__gtdf2>
c000e642:	83 c4 10             	add    esp,0x10
c000e645:	85 c0                	test   eax,eax
c000e647:	0f 8e 9a 00 00 00    	jle    c000e6e7 <zoh_vari_process+0x278>
c000e64d:	8b 07                	mov    eax,DWORD PTR [edi]
c000e64f:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e652:	89 04 24             	mov    DWORD PTR [esp],eax
c000e655:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e659:	52                   	push   edx
c000e65a:	50                   	push   eax
c000e65b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e65e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e661:	e8 4e 96 01 00       	call   c0027cb4 <__subdf3>
c000e666:	59                   	pop    ecx
c000e667:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e66b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e66f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e672:	e8 cc 9c 01 00       	call   c0028343 <__floatsidf>
c000e677:	83 c4 10             	add    esp,0x10
c000e67a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e67e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e682:	52                   	push   edx
c000e683:	50                   	push   eax
c000e684:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e688:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e68c:	e8 4f 96 01 00       	call   c0027ce0 <__muldf3>
c000e691:	5d                   	pop    ebp
c000e692:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e696:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e69a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e69d:	e8 a1 9c 01 00       	call   c0028343 <__floatsidf>
c000e6a2:	83 c4 10             	add    esp,0x10
c000e6a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e6a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e6ad:	52                   	push   edx
c000e6ae:	50                   	push   eax
c000e6af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e6b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e6b7:	e8 08 99 01 00       	call   c0027fc4 <__divdf3>
c000e6bc:	83 c4 10             	add    esp,0x10
c000e6bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e6c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e6c7:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e6cb:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e6cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e6d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e6d7:	e8 87 8f 01 00       	call   c0027663 <__adddf3>
c000e6dc:	83 c4 10             	add    esp,0x10
c000e6df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e6e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e6e7:	31 c0                	xor    eax,eax
c000e6e9:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000e6ec:	7e 13                	jle    c000e701 <zoh_vari_process+0x292>
c000e6ee:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000e6f2:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e6f5:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000e6f8:	40                   	inc    eax
c000e6f9:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000e6fc:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e6ff:	eb e8                	jmp    c000e6e9 <zoh_vari_process+0x27a>
c000e701:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e705:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e709:	68 00 00 f0 3f       	push   0x3ff00000
c000e70e:	6a 00                	push   0x0
c000e710:	e8 af 98 01 00       	call   c0027fc4 <__divdf3>
c000e715:	83 c4 10             	add    esp,0x10
c000e718:	89 04 24             	mov    DWORD PTR [esp],eax
c000e71b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e71f:	52                   	push   edx
c000e720:	50                   	push   eax
c000e721:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e725:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e729:	e8 35 8f 01 00       	call   c0027663 <__adddf3>
c000e72e:	83 c4 10             	add    esp,0x10
c000e731:	e9 ff fd ff ff       	jmp    c000e535 <zoh_vari_process+0xc6>
c000e736:	55                   	push   ebp
c000e737:	55                   	push   ebp
c000e738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e740:	e8 1b a0 01 00       	call   c0028760 <lrint>
c000e745:	83 ec 0c             	sub    esp,0xc
c000e748:	50                   	push   eax
c000e749:	e8 f5 9b 01 00       	call   c0028343 <__floatsidf>
c000e74e:	83 c4 10             	add    esp,0x10
c000e751:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e755:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e759:	52                   	push   edx
c000e75a:	50                   	push   eax
c000e75b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e75f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e763:	e8 4c 95 01 00       	call   c0027cb4 <__subdf3>
c000e768:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e76c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e770:	83 c4 20             	add    esp,0x20
c000e773:	6a 00                	push   0x0
c000e775:	6a 00                	push   0x0
c000e777:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e77b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e77f:	e8 2b 9e 01 00       	call   c00285af <__ltdf2>
c000e784:	83 c4 10             	add    esp,0x10
c000e787:	85 c0                	test   eax,eax
c000e789:	79 1e                	jns    c000e7a9 <zoh_vari_process+0x33a>
c000e78b:	68 00 00 f0 3f       	push   0x3ff00000
c000e790:	6a 00                	push   0x0
c000e792:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e796:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e79a:	e8 c4 8e 01 00       	call   c0027663 <__adddf3>
c000e79f:	83 c4 10             	add    esp,0x10
c000e7a2:	89 04 24             	mov    DWORD PTR [esp],eax
c000e7a5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e7a9:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e7ac:	83 ec 10             	sub    esp,0x10
c000e7af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e7b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e7b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e7bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e7bf:	e8 f0 94 01 00       	call   c0027cb4 <__subdf3>
c000e7c4:	83 c4 18             	add    esp,0x18
c000e7c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e7cb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e7cf:	52                   	push   edx
c000e7d0:	50                   	push   eax
c000e7d1:	e8 8a 9f 01 00       	call   c0028760 <lrint>
c000e7d6:	83 c4 10             	add    esp,0x10
c000e7d9:	0f af e8             	imul   ebp,eax
c000e7dc:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e7df:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e7e2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e7e6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e7e9:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e7ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e7f0:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e7f3:	0f 8d 7a 02 00 00    	jge    c000ea73 <zoh_vari_process+0x604>
c000e7f9:	83 ec 0c             	sub    esp,0xc
c000e7fc:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e7ff:	e8 3f 9b 01 00       	call   c0028343 <__floatsidf>
c000e804:	83 c4 10             	add    esp,0x10
c000e807:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e80b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e80f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e813:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e817:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e81b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e81f:	e8 bc 94 01 00       	call   c0027ce0 <__muldf3>
c000e824:	59                   	pop    ecx
c000e825:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e829:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e82d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e831:	e8 0d 9b 01 00       	call   c0028343 <__floatsidf>
c000e836:	83 c4 10             	add    esp,0x10
c000e839:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e83d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e841:	52                   	push   edx
c000e842:	50                   	push   eax
c000e843:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e847:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e84b:	e8 13 8e 01 00       	call   c0027663 <__adddf3>
c000e850:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e853:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e857:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e85b:	e8 e3 9a 01 00       	call   c0028343 <__floatsidf>
c000e860:	83 c4 10             	add    esp,0x10
c000e863:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e867:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e86b:	52                   	push   edx
c000e86c:	50                   	push   eax
c000e86d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e871:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e875:	e8 37 9d 01 00       	call   c00285b1 <__ledf2>
c000e87a:	83 c4 10             	add    esp,0x10
c000e87d:	85 c0                	test   eax,eax
c000e87f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e883:	0f 8f ea 01 00 00    	jg     c000ea73 <zoh_vari_process+0x604>
c000e889:	85 c9                	test   ecx,ecx
c000e88b:	0f 8e ed 00 00 00    	jle    c000e97e <zoh_vari_process+0x50f>
c000e891:	83 ec 10             	sub    esp,0x10
c000e894:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e897:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e89a:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e89d:	ff 37                	push   DWORD PTR [edi]
c000e89f:	e8 10 94 01 00       	call   c0027cb4 <__subdf3>
c000e8a4:	83 c4 18             	add    esp,0x18
c000e8a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e8ab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e8af:	52                   	push   edx
c000e8b0:	50                   	push   eax
c000e8b1:	e8 8a 9e 01 00       	call   c0028740 <fabs>
c000e8b6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e8ba:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e8be:	83 c4 10             	add    esp,0x10
c000e8c1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e8c6:	68 23 42 92 0c       	push   0xc924223
c000e8cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8d3:	e8 b9 9c 01 00       	call   c0028591 <__gtdf2>
c000e8d8:	83 c4 10             	add    esp,0x10
c000e8db:	85 c0                	test   eax,eax
c000e8dd:	0f 8e 9b 00 00 00    	jle    c000e97e <zoh_vari_process+0x50f>
c000e8e3:	8b 07                	mov    eax,DWORD PTR [edi]
c000e8e5:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e8e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e8ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e8f0:	52                   	push   edx
c000e8f1:	50                   	push   eax
c000e8f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e8f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e8f8:	e8 b7 93 01 00       	call   c0027cb4 <__subdf3>
c000e8fd:	5d                   	pop    ebp
c000e8fe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e902:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e906:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e909:	e8 35 9a 01 00       	call   c0028343 <__floatsidf>
c000e90e:	83 c4 10             	add    esp,0x10
c000e911:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e915:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e919:	52                   	push   edx
c000e91a:	50                   	push   eax
c000e91b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e91f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e923:	e8 b8 93 01 00       	call   c0027ce0 <__muldf3>
c000e928:	59                   	pop    ecx
c000e929:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e92d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e931:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e934:	e8 0a 9a 01 00       	call   c0028343 <__floatsidf>
c000e939:	83 c4 10             	add    esp,0x10
c000e93c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e940:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e944:	52                   	push   edx
c000e945:	50                   	push   eax
c000e946:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e94a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e94e:	e8 71 96 01 00       	call   c0027fc4 <__divdf3>
c000e953:	83 c4 10             	add    esp,0x10
c000e956:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e95a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e95e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e962:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e966:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e96a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e96e:	e8 f0 8c 01 00       	call   c0027663 <__adddf3>
c000e973:	83 c4 10             	add    esp,0x10
c000e976:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e97a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e97e:	31 d2                	xor    edx,edx
c000e980:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e983:	39 d0                	cmp    eax,edx
c000e985:	7e 1d                	jle    c000e9a4 <zoh_vari_process+0x535>
c000e987:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e98a:	29 c1                	sub    ecx,eax
c000e98c:	89 c8                	mov    eax,ecx
c000e98e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e990:	01 d0                	add    eax,edx
c000e992:	42                   	inc    edx
c000e993:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e996:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e999:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e99c:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e99f:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e9a2:	eb dc                	jmp    c000e980 <zoh_vari_process+0x511>
c000e9a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e9a8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e9ac:	68 00 00 f0 3f       	push   0x3ff00000
c000e9b1:	6a 00                	push   0x0
c000e9b3:	e8 0c 96 01 00       	call   c0027fc4 <__divdf3>
c000e9b8:	83 c4 10             	add    esp,0x10
c000e9bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e9bf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e9c3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e9c7:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e9cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9d3:	e8 8b 8c 01 00       	call   c0027663 <__adddf3>
c000e9d8:	5d                   	pop    ebp
c000e9d9:	59                   	pop    ecx
c000e9da:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e9de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e9e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9ea:	e8 71 9d 01 00       	call   c0028760 <lrint>
c000e9ef:	83 ec 0c             	sub    esp,0xc
c000e9f2:	50                   	push   eax
c000e9f3:	e8 4b 99 01 00       	call   c0028343 <__floatsidf>
c000e9f8:	83 c4 10             	add    esp,0x10
c000e9fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e9ff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ea03:	52                   	push   edx
c000ea04:	50                   	push   eax
c000ea05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ea09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ea0d:	e8 a2 92 01 00       	call   c0027cb4 <__subdf3>
c000ea12:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ea16:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ea1a:	83 c4 20             	add    esp,0x20
c000ea1d:	6a 00                	push   0x0
c000ea1f:	6a 00                	push   0x0
c000ea21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ea25:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ea29:	e8 81 9b 01 00       	call   c00285af <__ltdf2>
c000ea2e:	83 c4 10             	add    esp,0x10
c000ea31:	85 c0                	test   eax,eax
c000ea33:	79 1e                	jns    c000ea53 <zoh_vari_process+0x5e4>
c000ea35:	68 00 00 f0 3f       	push   0x3ff00000
c000ea3a:	6a 00                	push   0x0
c000ea3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ea40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ea44:	e8 1a 8c 01 00       	call   c0027663 <__adddf3>
c000ea49:	83 c4 10             	add    esp,0x10
c000ea4c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ea4f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ea53:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ea56:	83 ec 10             	sub    esp,0x10
c000ea59:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ea5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ea61:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ea65:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ea69:	e8 46 92 01 00       	call   c0027cb4 <__subdf3>
c000ea6e:	e9 51 fd ff ff       	jmp    c000e7c4 <zoh_vari_process+0x355>
c000ea73:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000ea77:	7d 3a                	jge    c000eab3 <zoh_vari_process+0x644>
c000ea79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea7d:	83 ec 0c             	sub    esp,0xc
c000ea80:	29 e8                	sub    eax,ebp
c000ea82:	99                   	cdq    
c000ea83:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ea86:	50                   	push   eax
c000ea87:	e8 b7 98 01 00       	call   c0028343 <__floatsidf>
c000ea8c:	83 c4 10             	add    esp,0x10
c000ea8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ea93:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ea97:	52                   	push   edx
c000ea98:	50                   	push   eax
c000ea99:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ea9d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000eaa1:	e8 bd 8b 01 00       	call   c0027663 <__adddf3>
c000eaa6:	83 c4 10             	add    esp,0x10
c000eaa9:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000eaac:	89 04 24             	mov    DWORD PTR [esp],eax
c000eaaf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000eab3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000eab6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000eaba:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000eabd:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000eac0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000eac3:	85 c0                	test   eax,eax
c000eac5:	7f 25                	jg     c000eaec <zoh_vari_process+0x67d>
c000eac7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eacb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eacf:	89 07                	mov    DWORD PTR [edi],eax
c000ead1:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000ead4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ead7:	99                   	cdq    
c000ead8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000eadb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000eade:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000eae1:	99                   	cdq    
c000eae2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000eae5:	31 d2                	xor    edx,edx
c000eae7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000eaea:	eb 1e                	jmp    c000eb0a <zoh_vari_process+0x69b>
c000eaec:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000eaef:	31 d2                	xor    edx,edx
c000eaf1:	29 c8                	sub    eax,ecx
c000eaf3:	c1 e0 02             	shl    eax,0x2
c000eaf6:	39 d1                	cmp    ecx,edx
c000eaf8:	7e cd                	jle    c000eac7 <zoh_vari_process+0x658>
c000eafa:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000eafc:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000eb00:	83 c0 04             	add    eax,0x4
c000eb03:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000eb07:	42                   	inc    edx
c000eb08:	eb ec                	jmp    c000eaf6 <zoh_vari_process+0x687>
c000eb0a:	83 c4 3c             	add    esp,0x3c
c000eb0d:	89 d0                	mov    eax,edx
c000eb0f:	5b                   	pop    ebx
c000eb10:	5e                   	pop    esi
c000eb11:	5f                   	pop    edi
c000eb12:	5d                   	pop    ebp
c000eb13:	c3                   	ret    

c000eb14 <zoh_get_name>:
c000eb14:	31 c0                	xor    eax,eax
c000eb16:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000eb1b:	75 05                	jne    c000eb22 <zoh_get_name+0xe>
c000eb1d:	b8 60 a0 02 c0       	mov    eax,0xc002a060
c000eb22:	c3                   	ret    

c000eb23 <zoh_get_description>:
c000eb23:	31 c0                	xor    eax,eax
c000eb25:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000eb2a:	75 05                	jne    c000eb31 <zoh_get_description+0xe>
c000eb2c:	b8 71 a0 02 c0       	mov    eax,0xc002a071
c000eb31:	c3                   	ret    

c000eb32 <zoh_set_converter>:
c000eb32:	53                   	push   ebx
c000eb33:	b8 0a 00 00 00       	mov    eax,0xa
c000eb38:	83 ec 08             	sub    esp,0x8
c000eb3b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eb3f:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000eb44:	75 6e                	jne    c000ebb4 <zoh_set_converter+0x82>
c000eb46:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000eb49:	85 c0                	test   eax,eax
c000eb4b:	74 13                	je     c000eb60 <zoh_set_converter+0x2e>
c000eb4d:	83 ec 0c             	sub    esp,0xc
c000eb50:	50                   	push   eax
c000eb51:	e8 16 14 00 00       	call   c000ff6c <free>
c000eb56:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000eb5d:	83 c4 10             	add    esp,0x10
c000eb60:	50                   	push   eax
c000eb61:	50                   	push   eax
c000eb62:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000eb65:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000eb6c:	50                   	push   eax
c000eb6d:	6a 01                	push   0x1
c000eb6f:	e8 18 14 00 00       	call   c000ff8c <calloc>
c000eb74:	83 c4 10             	add    esp,0x10
c000eb77:	89 c2                	mov    edx,eax
c000eb79:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000eb7c:	85 d2                	test   edx,edx
c000eb7e:	b8 01 00 00 00       	mov    eax,0x1
c000eb83:	74 2f                	je     c000ebb4 <zoh_set_converter+0x82>
c000eb85:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000eb88:	83 ec 0c             	sub    esp,0xc
c000eb8b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000eb8e:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000eb94:	c7 43 24 6f e4 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000e46f
c000eb9b:	c7 43 20 6f e4 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000e46f
c000eba2:	c7 43 28 b9 eb 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ebb9
c000eba9:	53                   	push   ebx
c000ebaa:	e8 0a 00 00 00       	call   c000ebb9 <zoh_reset>
c000ebaf:	83 c4 10             	add    esp,0x10
c000ebb2:	31 c0                	xor    eax,eax
c000ebb4:	83 c4 08             	add    esp,0x8
c000ebb7:	5b                   	pop    ebx
c000ebb8:	c3                   	ret    

c000ebb9 <zoh_reset>:
c000ebb9:	83 ec 0c             	sub    esp,0xc
c000ebbc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ebc0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ebc3:	85 c0                	test   eax,eax
c000ebc5:	74 20                	je     c000ebe7 <zoh_reset+0x2e>
c000ebc7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000ebca:	83 c0 1c             	add    eax,0x1c
c000ebcd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000ebd0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000ebd7:	c1 e2 02             	shl    edx,0x2
c000ebda:	51                   	push   ecx
c000ebdb:	52                   	push   edx
c000ebdc:	6a 00                	push   0x0
c000ebde:	50                   	push   eax
c000ebdf:	e8 e0 1a ff ff       	call   c00006c4 <memset>
c000ebe4:	83 c4 10             	add    esp,0x10
c000ebe7:	83 c4 0c             	add    esp,0xc
c000ebea:	c3                   	ret    

c000ebeb <CPU::current()>:
c000ebeb:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c000ebf0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ebf6:	90                   	nop
c000ebf7:	c3                   	ret    

c000ebf8 <operator new(unsigned long)>:
c000ebf8:	83 ec 0c             	sub    esp,0xc
c000ebfb:	83 ec 0c             	sub    esp,0xc
c000ebfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec02:	e8 55 13 00 00       	call   c000ff5c <malloc>
c000ec07:	83 c4 10             	add    esp,0x10
c000ec0a:	83 c4 0c             	add    esp,0xc
c000ec0d:	c3                   	ret    

c000ec0e <Krnl::resolveCompatibilitySymbol(char*)>:
c000ec0e:	83 ec 0c             	sub    esp,0xc
c000ec11:	83 ec 08             	sub    esp,0x8
c000ec14:	68 e8 a1 02 c0       	push   0xc002a1e8
c000ec19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec1d:	e8 92 1b ff ff       	call   c00007b4 <strcmp>
c000ec22:	83 c4 10             	add    esp,0x10
c000ec25:	85 c0                	test   eax,eax
c000ec27:	0f 94 c0             	sete   al
c000ec2a:	84 c0                	test   al,al
c000ec2c:	74 0a                	je     c000ec38 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000ec2e:	b8 90 13 03 c0       	mov    eax,0xc0031390
c000ec33:	e9 e3 00 00 00       	jmp    c000ed1b <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000ec38:	83 ec 08             	sub    esp,0x8
c000ec3b:	68 f1 a1 02 c0       	push   0xc002a1f1
c000ec40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec44:	e8 6b 1b ff ff       	call   c00007b4 <strcmp>
c000ec49:	83 c4 10             	add    esp,0x10
c000ec4c:	85 c0                	test   eax,eax
c000ec4e:	0f 94 c0             	sete   al
c000ec51:	84 c0                	test   al,al
c000ec53:	74 0a                	je     c000ec5f <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000ec55:	b8 dc 6a 02 c0       	mov    eax,0xc0026adc
c000ec5a:	e9 bc 00 00 00       	jmp    c000ed1b <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000ec5f:	83 ec 08             	sub    esp,0x8
c000ec62:	68 fb a1 02 c0       	push   0xc002a1fb
c000ec67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec6b:	e8 44 1b ff ff       	call   c00007b4 <strcmp>
c000ec70:	83 c4 10             	add    esp,0x10
c000ec73:	85 c0                	test   eax,eax
c000ec75:	0f 94 c0             	sete   al
c000ec78:	84 c0                	test   al,al
c000ec7a:	74 0a                	je     c000ec86 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000ec7c:	b8 10 68 02 c0       	mov    eax,0xc0026810
c000ec81:	e9 95 00 00 00       	jmp    c000ed1b <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000ec86:	83 ec 08             	sub    esp,0x8
c000ec89:	68 04 a2 02 c0       	push   0xc002a204
c000ec8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec92:	e8 1d 1b ff ff       	call   c00007b4 <strcmp>
c000ec97:	83 c4 10             	add    esp,0x10
c000ec9a:	85 c0                	test   eax,eax
c000ec9c:	0f 94 c0             	sete   al
c000ec9f:	84 c0                	test   al,al
c000eca1:	74 07                	je     c000ecaa <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000eca3:	b8 dc 6b 02 c0       	mov    eax,0xc0026bdc
c000eca8:	eb 71                	jmp    c000ed1b <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000ecaa:	83 ec 08             	sub    esp,0x8
c000ecad:	68 0e a2 02 c0       	push   0xc002a20e
c000ecb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ecb6:	e8 f9 1a ff ff       	call   c00007b4 <strcmp>
c000ecbb:	83 c4 10             	add    esp,0x10
c000ecbe:	85 c0                	test   eax,eax
c000ecc0:	0f 94 c0             	sete   al
c000ecc3:	84 c0                	test   al,al
c000ecc5:	74 07                	je     c000ecce <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000ecc7:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000eccc:	eb 4d                	jmp    c000ed1b <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000ecce:	83 ec 08             	sub    esp,0x8
c000ecd1:	68 17 a2 02 c0       	push   0xc002a217
c000ecd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ecda:	e8 d5 1a ff ff       	call   c00007b4 <strcmp>
c000ecdf:	83 c4 10             	add    esp,0x10
c000ece2:	85 c0                	test   eax,eax
c000ece4:	0f 94 c0             	sete   al
c000ece7:	84 c0                	test   al,al
c000ece9:	74 07                	je     c000ecf2 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000eceb:	b8 8d 13 03 c0       	mov    eax,0xc003138d
c000ecf0:	eb 29                	jmp    c000ed1b <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000ecf2:	83 ec 08             	sub    esp,0x8
c000ecf5:	68 24 a2 02 c0       	push   0xc002a224
c000ecfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ecfe:	e8 b1 1a ff ff       	call   c00007b4 <strcmp>
c000ed03:	83 c4 10             	add    esp,0x10
c000ed06:	85 c0                	test   eax,eax
c000ed08:	0f 94 c0             	sete   al
c000ed0b:	84 c0                	test   al,al
c000ed0d:	74 07                	je     c000ed16 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000ed0f:	b8 8c 13 03 c0       	mov    eax,0xc003138c
c000ed14:	eb 05                	jmp    c000ed1b <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000ed16:	b8 00 00 00 00       	mov    eax,0x0
c000ed1b:	83 c4 0c             	add    esp,0xc
c000ed1e:	c3                   	ret    
c000ed1f:	90                   	nop

c000ed20 <Computer::Computer()>:
c000ed20:	83 ec 0c             	sub    esp,0xc
c000ed23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed27:	83 ec 08             	sub    esp,0x8
c000ed2a:	68 d4 a2 02 c0       	push   0xc002a2d4
c000ed2f:	50                   	push   eax
c000ed30:	e8 e7 57 00 00       	call   c001451c <Device::Device(char const*)>
c000ed35:	83 c4 10             	add    esp,0x10
c000ed38:	ba ac a4 02 c0       	mov    edx,0xc002a4ac
c000ed3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed41:	89 10                	mov    DWORD PTR [eax],edx
c000ed43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed47:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ed51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed55:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ed5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed63:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000ed69:	83 ca 04             	or     edx,0x4
c000ed6c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000ed72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed76:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ed7c:	0f b6 d0             	movzx  edx,al
c000ed7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed83:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ed8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed8e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ed94:	0f b6 d0             	movzx  edx,al
c000ed97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed9b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000eda0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eda4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000edaa:	8d 50 01             	lea    edx,[eax+0x1]
c000edad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000edb1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000edb7:	0f b6 d0             	movzx  edx,al
c000edba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edbe:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000edc2:	83 e1 3f             	and    ecx,0x3f
c000edc5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000edc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edcd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000edd3:	0f b6 d0             	movzx  edx,al
c000edd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edda:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000ede1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ede5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000edeb:	0f b6 d0             	movzx  edx,al
c000edee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edf2:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000edf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edfb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ee01:	8d 50 01             	lea    edx,[eax+0x1]
c000ee04:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ee08:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ee0e:	0f b6 d0             	movzx  edx,al
c000ee11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee15:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ee19:	83 e1 3f             	and    ecx,0x3f
c000ee1c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000ee20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee24:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ee2a:	0f b6 d0             	movzx  edx,al
c000ee2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee31:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000ee38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ee42:	0f b6 d0             	movzx  edx,al
c000ee45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee49:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000ee4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee52:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ee58:	8d 50 01             	lea    edx,[eax+0x1]
c000ee5b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ee5f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ee65:	0f b6 d0             	movzx  edx,al
c000ee68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee6c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ee70:	83 e1 3f             	and    ecx,0x3f
c000ee73:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000ee77:	90                   	nop
c000ee78:	83 c4 0c             	add    esp,0xc
c000ee7b:	c3                   	ret    

c000ee7c <Computer::setBootMessage(char const*)>:
c000ee7c:	c3                   	ret    
c000ee7d:	90                   	nop

c000ee7e <Computer::open(int, int, void*)>:
c000ee7e:	56                   	push   esi
c000ee7f:	53                   	push   ebx
c000ee80:	83 ec 10             	sub    esp,0x10
c000ee83:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee87:	f6 05 a4 13 03 c0 04 	test   BYTE PTR ds:0xc00313a4,0x4
c000ee8e:	68 68 12 00 00       	push   0x1268
c000ee93:	0f 94 05 40 03 03 c0 	sete   BYTE PTR ds:0xc0030340
c000ee9a:	e8 bd 10 00 00       	call   c000ff5c <malloc>
c000ee9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000eea2:	89 c6                	mov    esi,eax
c000eea4:	e8 d1 95 00 00       	call   c001847a <ACPI::ACPI()>
c000eea9:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eeaf:	58                   	pop    eax
c000eeb0:	5a                   	pop    edx
c000eeb1:	56                   	push   esi
c000eeb2:	53                   	push   ebx
c000eeb3:	e8 8e 58 00 00       	call   c0014746 <Device::addChild(Device*)>
c000eeb8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eebb:	e8 94 00 00 00       	call   c000ef54 <Computer::detectFeatures()>
c000eec0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec3:	e8 96 02 00 00       	call   c000f15e <Computer::displayFeatures()>
c000eec8:	59                   	pop    ecx
c000eec9:	5e                   	pop    esi
c000eeca:	6a 01                	push   0x1
c000eecc:	53                   	push   ebx
c000eecd:	e8 86 06 00 00       	call   c000f558 <Computer::enableNMI(bool)>
c000eed2:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eed9:	e8 7e 10 00 00       	call   c000ff5c <malloc>
c000eede:	89 04 24             	mov    DWORD PTR [esp],eax
c000eee1:	89 c6                	mov    esi,eax
c000eee3:	e8 34 a2 00 00       	call   c001911c <CPU::CPU()>
c000eee8:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eeee:	58                   	pop    eax
c000eeef:	5a                   	pop    edx
c000eef0:	56                   	push   esi
c000eef1:	53                   	push   ebx
c000eef2:	e8 4f 58 00 00       	call   c0014746 <Device::addChild(Device*)>
c000eef7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000eefd:	8b 10                	mov    edx,DWORD PTR [eax]
c000eeff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef03:	6a 00                	push   0x0
c000ef05:	6a 00                	push   0x0
c000ef07:	50                   	push   eax
c000ef08:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef0b:	83 c4 20             	add    esp,0x20
c000ef0e:	e8 e1 5c 00 00       	call   c0014bf4 <setupFPU()>
c000ef13:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef19:	85 c0                	test   eax,eax
c000ef1b:	74 1f                	je     c000ef3c <Computer::open(int, int, void*)+0xbe>
c000ef1d:	83 ec 08             	sub    esp,0x8
c000ef20:	50                   	push   eax
c000ef21:	53                   	push   ebx
c000ef22:	e8 1f 58 00 00       	call   c0014746 <Device::addChild(Device*)>
c000ef27:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef2d:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef2f:	6a 00                	push   0x0
c000ef31:	6a 00                	push   0x0
c000ef33:	6a 00                	push   0x0
c000ef35:	50                   	push   eax
c000ef36:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef39:	83 c4 20             	add    esp,0x20
c000ef3c:	83 ec 0c             	sub    esp,0xc
c000ef3f:	68 86 f5 00 c0       	push   0xc000f586
c000ef44:	e8 a3 ec 00 00       	call   c001dbec <setupMultitasking(void (*)())>
c000ef49:	83 c4 14             	add    esp,0x14
c000ef4c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef51:	5b                   	pop    ebx
c000ef52:	5e                   	pop    esi
c000ef53:	c3                   	ret    

c000ef54 <Computer::detectFeatures()>:
c000ef54:	55                   	push   ebp
c000ef55:	57                   	push   edi
c000ef56:	56                   	push   esi
c000ef57:	53                   	push   ebx
c000ef58:	83 ec 1c             	sub    esp,0x1c
c000ef5b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ef5f:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000ef69:	e8 76 13 ff ff       	call   c00002e4 <detectCPUID>
c000ef6e:	85 c0                	test   eax,eax
c000ef70:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ef76:	0f 95 c2             	setne  dl
c000ef79:	83 e0 fd             	and    eax,0xfffffffd
c000ef7c:	d1 e2                	shl    edx,1
c000ef7e:	09 d0                	or     eax,edx
c000ef80:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ef86:	a8 02                	test   al,0x2
c000ef88:	75 46                	jne    c000efd0 <Computer::detectFeatures()+0x7c>
c000ef8a:	f6 05 a5 13 03 c0 04 	test   BYTE PTR ds:0xc00313a5,0x4
c000ef91:	74 07                	je     c000ef9a <Computer::detectFeatures()+0x46>
c000ef93:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000ef9a:	e8 07 78 01 00       	call   c00267a6 <x87Detect>
c000ef9f:	83 e0 01             	and    eax,0x1
c000efa2:	c1 e0 04             	shl    eax,0x4
c000efa5:	88 c2                	mov    dl,al
c000efa7:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000efad:	83 e0 ef             	and    eax,0xffffffef
c000efb0:	09 d0                	or     eax,edx
c000efb2:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000efb8:	a8 10                	test   al,0x10
c000efba:	0f 85 2a 01 00 00    	jne    c000f0ea <Computer::detectFeatures()+0x196>
c000efc0:	84 c0                	test   al,al
c000efc2:	0f 88 45 01 00 00    	js     c000f10d <Computer::detectFeatures()+0x1b9>
c000efc8:	83 c4 1c             	add    esp,0x1c
c000efcb:	5b                   	pop    ebx
c000efcc:	5e                   	pop    esi
c000efcd:	5f                   	pop    edi
c000efce:	5d                   	pop    ebp
c000efcf:	c3                   	ret    
c000efd0:	83 ec 0c             	sub    esp,0xc
c000efd3:	6a 20                	push   0x20
c000efd5:	e8 8a a0 00 00       	call   c0019064 <CPU::cpuidCheckEDX(unsigned int)>
c000efda:	83 e0 01             	and    eax,0x1
c000efdd:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000efe4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000efea:	83 e0 f7             	and    eax,0xfffffff7
c000efed:	09 d0                	or     eax,edx
c000efef:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eff5:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000effc:	e8 63 a0 00 00       	call   c0019064 <CPU::cpuidCheckEDX(unsigned int)>
c000f001:	83 e0 01             	and    eax,0x1
c000f004:	88 c2                	mov    dl,al
c000f006:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000f00c:	83 e0 fe             	and    eax,0xfffffffe
c000f00f:	09 d0                	or     eax,edx
c000f011:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000f017:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000f01e:	e8 41 a0 00 00       	call   c0019064 <CPU::cpuidCheckEDX(unsigned int)>
c000f023:	c1 e0 07             	shl    eax,0x7
c000f026:	88 c2                	mov    dl,al
c000f028:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000f02e:	83 e0 7f             	and    eax,0x7f
c000f031:	09 d0                	or     eax,edx
c000f033:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000f039:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000f040:	e8 1f a0 00 00       	call   c0019064 <CPU::cpuidCheckEDX(unsigned int)>
c000f045:	83 c4 10             	add    esp,0x10
c000f048:	83 e0 01             	and    eax,0x1
c000f04b:	c1 e0 05             	shl    eax,0x5
c000f04e:	88 c2                	mov    dl,al
c000f050:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000f056:	83 e0 df             	and    eax,0xffffffdf
c000f059:	09 d0                	or     eax,edx
c000f05b:	f7 05 a4 13 03 c0 01 04 00 00 	test   DWORD PTR ds:0xc00313a4,0x401
c000f065:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000f06b:	0f 84 c2 00 00 00    	je     c000f133 <Computer::detectFeatures()+0x1df>
c000f071:	83 e0 fe             	and    eax,0xfffffffe
c000f074:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000f07a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000f080:	88 c2                	mov    dl,al
c000f082:	83 e2 09             	and    edx,0x9
c000f085:	fe ca                	dec    dl
c000f087:	75 09                	jne    c000f092 <Computer::detectFeatures()+0x13e>
c000f089:	83 e0 fe             	and    eax,0xfffffffe
c000f08c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000f092:	83 ec 0c             	sub    esp,0xc
c000f095:	8d 44 24 18          	lea    eax,[esp+0x18]
c000f099:	50                   	push   eax
c000f09a:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000f09e:	55                   	push   ebp
c000f09f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000f0a3:	57                   	push   edi
c000f0a4:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f0a8:	56                   	push   esi
c000f0a9:	68 00 00 00 80       	push   0x80000000
c000f0ae:	e8 2d 9f 00 00       	call   c0018fe0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f0b3:	83 c4 20             	add    esp,0x20
c000f0b6:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000f0bd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0c1:	0f 86 c3 fe ff ff    	jbe    c000ef8a <Computer::detectFeatures()+0x36>
c000f0c7:	83 ec 0c             	sub    esp,0xc
c000f0ca:	50                   	push   eax
c000f0cb:	55                   	push   ebp
c000f0cc:	57                   	push   edi
c000f0cd:	56                   	push   esi
c000f0ce:	68 01 00 00 80       	push   0x80000001
c000f0d3:	e8 08 9f 00 00       	call   c0018fe0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f0d8:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000f0e2:	83 c4 20             	add    esp,0x20
c000f0e5:	e9 a0 fe ff ff       	jmp    c000ef8a <Computer::detectFeatures()+0x36>
c000f0ea:	e8 71 76 01 00       	call   c0026760 <absolutelyNoChanceInHell>
c000f0ef:	88 c2                	mov    dl,al
c000f0f1:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000f0f7:	c1 e2 07             	shl    edx,0x7
c000f0fa:	83 e0 7f             	and    eax,0x7f
c000f0fd:	09 d0                	or     eax,edx
c000f0ff:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000f105:	84 c0                	test   al,al
c000f107:	0f 89 bb fe ff ff    	jns    c000efc8 <Computer::detectFeatures()+0x74>
c000f10d:	e8 2e 76 01 00       	call   c0026740 <avxDetect>
c000f112:	83 e0 01             	and    eax,0x1
c000f115:	c1 e0 05             	shl    eax,0x5
c000f118:	88 c2                	mov    dl,al
c000f11a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000f120:	83 e0 df             	and    eax,0xffffffdf
c000f123:	09 d0                	or     eax,edx
c000f125:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000f12b:	83 c4 1c             	add    esp,0x1c
c000f12e:	5b                   	pop    ebx
c000f12f:	5e                   	pop    esi
c000f130:	5f                   	pop    edi
c000f131:	5d                   	pop    ebp
c000f132:	c3                   	ret    
c000f133:	83 ec 0c             	sub    esp,0xc
c000f136:	68 00 02 00 00       	push   0x200
c000f13b:	e8 24 9f 00 00       	call   c0019064 <CPU::cpuidCheckEDX(unsigned int)>
c000f140:	83 c4 10             	add    esp,0x10
c000f143:	83 e0 01             	and    eax,0x1
c000f146:	88 c2                	mov    dl,al
c000f148:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000f14e:	83 e0 fe             	and    eax,0xfffffffe
c000f151:	09 d0                	or     eax,edx
c000f153:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000f159:	e9 1c ff ff ff       	jmp    c000f07a <Computer::detectFeatures()+0x126>

c000f15e <Computer::displayFeatures()>:
c000f15e:	53                   	push   ebx
c000f15f:	83 ec 14             	sub    esp,0x14
c000f162:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000f166:	68 e4 a2 02 c0       	push   0xc002a2e4
c000f16b:	e8 d6 40 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c000f170:	83 c4 10             	add    esp,0x10
c000f173:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000f17a:	0f 85 73 02 00 00    	jne    c000f3f3 <Computer::displayFeatures()+0x295>
c000f180:	b8 e1 a2 02 c0       	mov    eax,0xc002a2e1
c000f185:	83 ec 08             	sub    esp,0x8
c000f188:	50                   	push   eax
c000f189:	68 f7 a2 02 c0       	push   0xc002a2f7
c000f18e:	e8 b3 40 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c000f193:	83 c4 10             	add    esp,0x10
c000f196:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000f19d:	0f 85 8c 02 00 00    	jne    c000f42f <Computer::displayFeatures()+0x2d1>
c000f1a3:	b8 e1 a2 02 c0       	mov    eax,0xc002a2e1
c000f1a8:	83 ec 08             	sub    esp,0x8
c000f1ab:	50                   	push   eax
c000f1ac:	68 08 a3 02 c0       	push   0xc002a308
c000f1b1:	e8 90 40 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c000f1b6:	83 c4 10             	add    esp,0x10
c000f1b9:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000f1c0:	0f 85 5f 02 00 00    	jne    c000f425 <Computer::displayFeatures()+0x2c7>
c000f1c6:	b8 e1 a2 02 c0       	mov    eax,0xc002a2e1
c000f1cb:	83 ec 08             	sub    esp,0x8
c000f1ce:	50                   	push   eax
c000f1cf:	68 19 a3 02 c0       	push   0xc002a319
c000f1d4:	e8 6d 40 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c000f1d9:	83 c4 10             	add    esp,0x10
c000f1dc:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000f1e3:	0f 85 32 02 00 00    	jne    c000f41b <Computer::displayFeatures()+0x2bd>
c000f1e9:	b8 e1 a2 02 c0       	mov    eax,0xc002a2e1
c000f1ee:	83 ec 08             	sub    esp,0x8
c000f1f1:	50                   	push   eax
c000f1f2:	68 2a a3 02 c0       	push   0xc002a32a
c000f1f7:	e8 4a 40 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c000f1fc:	83 c4 10             	add    esp,0x10
c000f1ff:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000f206:	0f 85 05 02 00 00    	jne    c000f411 <Computer::displayFeatures()+0x2b3>
c000f20c:	b8 e1 a2 02 c0       	mov    eax,0xc002a2e1
c000f211:	83 ec 08             	sub    esp,0x8
c000f214:	50                   	push   eax
c000f215:	68 3b a3 02 c0       	push   0xc002a33b
c000f21a:	e8 27 40 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c000f21f:	83 c4 10             	add    esp,0x10
c000f222:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000f229:	0f 85 d8 01 00 00    	jne    c000f407 <Computer::displayFeatures()+0x2a9>
c000f22f:	b8 e1 a2 02 c0       	mov    eax,0xc002a2e1
c000f234:	83 ec 08             	sub    esp,0x8
c000f237:	50                   	push   eax
c000f238:	68 4c a3 02 c0       	push   0xc002a34c
c000f23d:	e8 04 40 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c000f242:	83 c4 10             	add    esp,0x10
c000f245:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000f24c:	0f 85 ab 01 00 00    	jne    c000f3fd <Computer::displayFeatures()+0x29f>
c000f252:	b8 e1 a2 02 c0       	mov    eax,0xc002a2e1
c000f257:	83 ec 08             	sub    esp,0x8
c000f25a:	50                   	push   eax
c000f25b:	68 5d a3 02 c0       	push   0xc002a35d
c000f260:	e8 e1 3f 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c000f265:	83 c4 10             	add    esp,0x10
c000f268:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000f26f:	0f 88 1b 02 00 00    	js     c000f490 <Computer::displayFeatures()+0x332>
c000f275:	b8 e1 a2 02 c0       	mov    eax,0xc002a2e1
c000f27a:	83 ec 08             	sub    esp,0x8
c000f27d:	50                   	push   eax
c000f27e:	68 6e a3 02 c0       	push   0xc002a36e
c000f283:	e8 be 3f 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c000f288:	83 c4 10             	add    esp,0x10
c000f28b:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000f292:	0f 85 a1 01 00 00    	jne    c000f439 <Computer::displayFeatures()+0x2db>
c000f298:	b8 e1 a2 02 c0       	mov    eax,0xc002a2e1
c000f29d:	83 ec 08             	sub    esp,0x8
c000f2a0:	50                   	push   eax
c000f2a1:	68 7f a3 02 c0       	push   0xc002a37f
c000f2a6:	e8 9b 3f 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c000f2ab:	83 c4 10             	add    esp,0x10
c000f2ae:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000f2b5:	0f 85 cb 01 00 00    	jne    c000f486 <Computer::displayFeatures()+0x328>
c000f2bb:	b8 e1 a2 02 c0       	mov    eax,0xc002a2e1
c000f2c0:	83 ec 08             	sub    esp,0x8
c000f2c3:	50                   	push   eax
c000f2c4:	68 90 a3 02 c0       	push   0xc002a390
c000f2c9:	e8 78 3f 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c000f2ce:	83 c4 10             	add    esp,0x10
c000f2d1:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000f2d8:	0f 85 9e 01 00 00    	jne    c000f47c <Computer::displayFeatures()+0x31e>
c000f2de:	b8 e1 a2 02 c0       	mov    eax,0xc002a2e1
c000f2e3:	83 ec 08             	sub    esp,0x8
c000f2e6:	50                   	push   eax
c000f2e7:	68 a1 a3 02 c0       	push   0xc002a3a1
c000f2ec:	e8 55 3f 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c000f2f1:	83 c4 10             	add    esp,0x10
c000f2f4:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000f2fb:	0f 85 71 01 00 00    	jne    c000f472 <Computer::displayFeatures()+0x314>
c000f301:	b8 e1 a2 02 c0       	mov    eax,0xc002a2e1
c000f306:	83 ec 08             	sub    esp,0x8
c000f309:	50                   	push   eax
c000f30a:	68 b2 a3 02 c0       	push   0xc002a3b2
c000f30f:	e8 32 3f 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c000f314:	83 c4 10             	add    esp,0x10
c000f317:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000f31e:	0f 85 44 01 00 00    	jne    c000f468 <Computer::displayFeatures()+0x30a>
c000f324:	b8 e1 a2 02 c0       	mov    eax,0xc002a2e1
c000f329:	83 ec 08             	sub    esp,0x8
c000f32c:	50                   	push   eax
c000f32d:	68 c3 a3 02 c0       	push   0xc002a3c3
c000f332:	e8 0f 3f 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c000f337:	83 c4 10             	add    esp,0x10
c000f33a:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000f341:	0f 85 17 01 00 00    	jne    c000f45e <Computer::displayFeatures()+0x300>
c000f347:	b8 e1 a2 02 c0       	mov    eax,0xc002a2e1
c000f34c:	83 ec 08             	sub    esp,0x8
c000f34f:	50                   	push   eax
c000f350:	68 d4 a3 02 c0       	push   0xc002a3d4
c000f355:	e8 ec 3e 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c000f35a:	83 c4 10             	add    esp,0x10
c000f35d:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000f364:	0f 85 ea 00 00 00    	jne    c000f454 <Computer::displayFeatures()+0x2f6>
c000f36a:	b8 e1 a2 02 c0       	mov    eax,0xc002a2e1
c000f36f:	83 ec 08             	sub    esp,0x8
c000f372:	50                   	push   eax
c000f373:	68 e5 a3 02 c0       	push   0xc002a3e5
c000f378:	e8 c9 3e 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c000f37d:	83 c4 10             	add    esp,0x10
c000f380:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000f387:	0f 88 0d 01 00 00    	js     c000f49a <Computer::displayFeatures()+0x33c>
c000f38d:	b8 e1 a2 02 c0       	mov    eax,0xc002a2e1
c000f392:	83 ec 08             	sub    esp,0x8
c000f395:	50                   	push   eax
c000f396:	68 f6 a3 02 c0       	push   0xc002a3f6
c000f39b:	e8 a6 3e 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c000f3a0:	83 c4 10             	add    esp,0x10
c000f3a3:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000f3aa:	0f 85 9a 00 00 00    	jne    c000f44a <Computer::displayFeatures()+0x2ec>
c000f3b0:	b8 e1 a2 02 c0       	mov    eax,0xc002a2e1
c000f3b5:	83 ec 08             	sub    esp,0x8
c000f3b8:	50                   	push   eax
c000f3b9:	68 07 a4 02 c0       	push   0xc002a407
c000f3be:	e8 83 3e 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c000f3c3:	83 c4 10             	add    esp,0x10
c000f3c6:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000f3cd:	75 74                	jne    c000f443 <Computer::displayFeatures()+0x2e5>
c000f3cf:	b8 e1 a2 02 c0       	mov    eax,0xc002a2e1
c000f3d4:	83 ec 08             	sub    esp,0x8
c000f3d7:	50                   	push   eax
c000f3d8:	68 18 a4 02 c0       	push   0xc002a418
c000f3dd:	e8 64 3e 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c000f3e2:	c7 44 24 20 aa d3 02 c0 	mov    DWORD PTR [esp+0x20],0xc002d3aa
c000f3ea:	83 c4 18             	add    esp,0x18
c000f3ed:	5b                   	pop    ebx
c000f3ee:	e9 53 3e 00 00       	jmp    c0013246 <Dbg::kprintf(char const*, ...)>
c000f3f3:	b8 dd a2 02 c0       	mov    eax,0xc002a2dd
c000f3f8:	e9 88 fd ff ff       	jmp    c000f185 <Computer::displayFeatures()+0x27>
c000f3fd:	b8 dd a2 02 c0       	mov    eax,0xc002a2dd
c000f402:	e9 50 fe ff ff       	jmp    c000f257 <Computer::displayFeatures()+0xf9>
c000f407:	b8 dd a2 02 c0       	mov    eax,0xc002a2dd
c000f40c:	e9 23 fe ff ff       	jmp    c000f234 <Computer::displayFeatures()+0xd6>
c000f411:	b8 dd a2 02 c0       	mov    eax,0xc002a2dd
c000f416:	e9 f6 fd ff ff       	jmp    c000f211 <Computer::displayFeatures()+0xb3>
c000f41b:	b8 dd a2 02 c0       	mov    eax,0xc002a2dd
c000f420:	e9 c9 fd ff ff       	jmp    c000f1ee <Computer::displayFeatures()+0x90>
c000f425:	b8 dd a2 02 c0       	mov    eax,0xc002a2dd
c000f42a:	e9 9c fd ff ff       	jmp    c000f1cb <Computer::displayFeatures()+0x6d>
c000f42f:	b8 dd a2 02 c0       	mov    eax,0xc002a2dd
c000f434:	e9 6f fd ff ff       	jmp    c000f1a8 <Computer::displayFeatures()+0x4a>
c000f439:	b8 dd a2 02 c0       	mov    eax,0xc002a2dd
c000f43e:	e9 5a fe ff ff       	jmp    c000f29d <Computer::displayFeatures()+0x13f>
c000f443:	b8 dd a2 02 c0       	mov    eax,0xc002a2dd
c000f448:	eb 8a                	jmp    c000f3d4 <Computer::displayFeatures()+0x276>
c000f44a:	b8 dd a2 02 c0       	mov    eax,0xc002a2dd
c000f44f:	e9 61 ff ff ff       	jmp    c000f3b5 <Computer::displayFeatures()+0x257>
c000f454:	b8 dd a2 02 c0       	mov    eax,0xc002a2dd
c000f459:	e9 11 ff ff ff       	jmp    c000f36f <Computer::displayFeatures()+0x211>
c000f45e:	b8 dd a2 02 c0       	mov    eax,0xc002a2dd
c000f463:	e9 e4 fe ff ff       	jmp    c000f34c <Computer::displayFeatures()+0x1ee>
c000f468:	b8 dd a2 02 c0       	mov    eax,0xc002a2dd
c000f46d:	e9 b7 fe ff ff       	jmp    c000f329 <Computer::displayFeatures()+0x1cb>
c000f472:	b8 dd a2 02 c0       	mov    eax,0xc002a2dd
c000f477:	e9 8a fe ff ff       	jmp    c000f306 <Computer::displayFeatures()+0x1a8>
c000f47c:	b8 dd a2 02 c0       	mov    eax,0xc002a2dd
c000f481:	e9 5d fe ff ff       	jmp    c000f2e3 <Computer::displayFeatures()+0x185>
c000f486:	b8 dd a2 02 c0       	mov    eax,0xc002a2dd
c000f48b:	e9 30 fe ff ff       	jmp    c000f2c0 <Computer::displayFeatures()+0x162>
c000f490:	b8 dd a2 02 c0       	mov    eax,0xc002a2dd
c000f495:	e9 e0 fd ff ff       	jmp    c000f27a <Computer::displayFeatures()+0x11c>
c000f49a:	b8 dd a2 02 c0       	mov    eax,0xc002a2dd
c000f49f:	e9 ee fe ff ff       	jmp    c000f392 <Computer::displayFeatures()+0x234>

c000f4a4 <Computer::rdmsr(unsigned int)>:
c000f4a4:	83 ec 0c             	sub    esp,0xc
c000f4a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4ab:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f4b2:	74 0a                	je     c000f4be <Computer::rdmsr(unsigned int)+0x1a>
c000f4b4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f4b8:	0f 32                	rdmsr  
c000f4ba:	83 c4 0c             	add    esp,0xc
c000f4bd:	c3                   	ret    
c000f4be:	83 ec 0c             	sub    esp,0xc
c000f4c1:	68 29 a4 02 c0       	push   0xc002a429
c000f4c6:	e8 30 b3 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c000f4cb:	83 c4 10             	add    esp,0x10
c000f4ce:	eb e4                	jmp    c000f4b4 <Computer::rdmsr(unsigned int)+0x10>

c000f4d0 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000f4d0:	57                   	push   edi
c000f4d1:	56                   	push   esi
c000f4d2:	52                   	push   edx
c000f4d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4d7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f4db:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f4df:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f4e6:	74 0e                	je     c000f4f6 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000f4e8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f4ec:	89 f0                	mov    eax,esi
c000f4ee:	89 fa                	mov    edx,edi
c000f4f0:	0f 30                	wrmsr  
c000f4f2:	58                   	pop    eax
c000f4f3:	5e                   	pop    esi
c000f4f4:	5f                   	pop    edi
c000f4f5:	c3                   	ret    
c000f4f6:	83 ec 0c             	sub    esp,0xc
c000f4f9:	68 2f a4 02 c0       	push   0xc002a42f
c000f4fe:	e8 f8 b2 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c000f503:	83 c4 10             	add    esp,0x10
c000f506:	eb e0                	jmp    c000f4e8 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000f508 <Computer::close(int, int, void*)>:
c000f508:	57                   	push   edi
c000f509:	56                   	push   esi
c000f50a:	53                   	push   ebx
c000f50b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f50f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f513:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f517:	83 ec 0c             	sub    esp,0xc
c000f51a:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000f520:	e8 97 53 00 00       	call   c00148bc <Device::closeAll()>
c000f525:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000f52b:	83 c4 10             	add    esp,0x10
c000f52e:	8b 10                	mov    edx,DWORD PTR [eax]
c000f530:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000f534:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000f53c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000f540:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f544:	5b                   	pop    ebx
c000f545:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000f548:	5e                   	pop    esi
c000f549:	5f                   	pop    edi
c000f54a:	ff e0                	jmp    eax

c000f54c <Computer::nmiEnabled()>:
c000f54c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f550:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000f556:	c3                   	ret    
c000f557:	90                   	nop

c000f558 <Computer::enableNMI(bool)>:
c000f558:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f55c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f560:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000f566:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000f56e:	e9 fd 00 00 00       	jmp    c000f670 <Computer::readCMOS(unsigned char)>
c000f573:	90                   	nop

c000f574 <Computer::disableNMI()>:
c000f574:	83 ec 14             	sub    esp,0x14
c000f577:	6a 00                	push   0x0
c000f579:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f57d:	e8 d6 ff ff ff       	call   c000f558 <Computer::enableNMI(bool)>
c000f582:	83 c4 1c             	add    esp,0x1c
c000f585:	c3                   	ret    

c000f586 <Krnl::firstTask()>:
c000f586:	53                   	push   ebx
c000f587:	83 ec 14             	sub    esp,0x14
c000f58a:	fb                   	sti    
c000f58b:	68 3f 07 00 00       	push   0x73f
c000f590:	e8 c7 09 00 00       	call   c000ff5c <malloc>
c000f595:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000f59c:	89 c3                	mov    ebx,eax
c000f59e:	ff 35 48 48 03 c0    	push   DWORD PTR ds:0xc0034848
c000f5a4:	68 35 a4 02 c0       	push   0xc002a435
c000f5a9:	6a 01                	push   0x1
c000f5ab:	50                   	push   eax
c000f5ac:	e8 29 e9 00 00       	call   c001deda <Process::Process(bool, char const*, Process*, char**)>
c000f5b1:	83 c4 20             	add    esp,0x20
c000f5b4:	68 ff 00 00 00       	push   0xff
c000f5b9:	6a 00                	push   0x0
c000f5bb:	68 f1 f8 00 c0       	push   0xc000f8f1
c000f5c0:	53                   	push   ebx
c000f5c1:	e8 e8 e4 00 00       	call   c001daae <Process::createThread(void (*)(void*), void*, int)>
c000f5c6:	6a 7a                	push   0x7a
c000f5c8:	6a 00                	push   0x0
c000f5ca:	68 06 e5 01 c0       	push   0xc001e506
c000f5cf:	ff 35 48 48 03 c0    	push   DWORD PTR ds:0xc0034848
c000f5d5:	e8 d4 e4 00 00       	call   c001daae <Process::createThread(void (*)(void*), void*, int)>
c000f5da:	83 c4 20             	add    esp,0x20
c000f5dd:	a3 94 48 03 c0       	mov    ds:0xc0034894,eax
c000f5e2:	c6 05 8c 13 03 c0 01 	mov    BYTE PTR ds:0xc003138c,0x1
c000f5e9:	e8 6a f5 00 00       	call   c001eb58 <Vm::initialise8086()>
c000f5ee:	e8 2c 3f 00 00       	call   c001351f <Fs::initVFS()>
c000f5f3:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c000f5f8:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000f5fe:	8b 10                	mov    edx,DWORD PTR [eax]
c000f600:	6a 00                	push   0x0
c000f602:	6a 00                	push   0x0
c000f604:	6a 00                	push   0x0
c000f606:	50                   	push   eax
c000f607:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000f60a:	e8 69 d0 00 00       	call   c001c678 <Sys::loadSyscalls()>
c000f60f:	e8 ae b0 00 00       	call   c001a6c2 <Krnl::loadSystemEnv()>
c000f614:	83 c4 0c             	add    esp,0xc
c000f617:	6a 3a                	push   0x3a
c000f619:	68 42 a4 02 c0       	push   0xc002a442
c000f61e:	68 4b a4 02 c0       	push   0xc002a44b
c000f623:	e8 c0 bd 00 00       	call   c001b3e8 <Reg::readIntWithDefault(char*, char*, int)>
c000f628:	89 04 24             	mov    DWORD PTR [esp],eax
c000f62b:	e8 80 4a 00 00       	call   c00140b0 <User::loadClockSettings(int)>
c000f630:	58                   	pop    eax
c000f631:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c000f636:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000f63c:	e8 4f 52 00 00       	call   c0014890 <Device::loadDriversForAll()>
c000f641:	5a                   	pop    edx
c000f642:	8b 1d 90 13 03 c0    	mov    ebx,DWORD PTR ds:0xc0031390
c000f648:	59                   	pop    ecx
c000f649:	6a 01                	push   0x1
c000f64b:	68 53 a4 02 c0       	push   0xc002a453
c000f650:	e8 84 e1 00 00       	call   c001d7d9 <Thr::loadDLL(char const*, bool)>
c000f655:	5a                   	pop    edx
c000f656:	59                   	pop    ecx
c000f657:	53                   	push   ebx
c000f658:	50                   	push   eax
c000f659:	e8 8a e3 00 00       	call   c001d9e8 <Thr::executeDLL(unsigned long, void*)>
c000f65e:	83 c4 10             	add    esp,0x10
c000f661:	83 ec 0c             	sub    esp,0xc
c000f664:	6a 02                	push   0x2
c000f666:	e8 70 f0 00 00       	call   c001e6db <blockTask(TaskState)>
c000f66b:	83 c4 10             	add    esp,0x10
c000f66e:	eb f1                	jmp    c000f661 <Krnl::firstTask()+0xdb>

c000f670 <Computer::readCMOS(unsigned char)>:
c000f670:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f674:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000f67b:	19 c0                	sbb    eax,eax
c000f67d:	83 e0 80             	and    eax,0xffffff80
c000f680:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000f684:	e6 70                	out    0x70,al
c000f686:	e4 71                	in     al,0x71
c000f688:	c3                   	ret    
c000f689:	90                   	nop

c000f68a <Computer::writeCMOS(unsigned char, unsigned char)>:
c000f68a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f68e:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000f695:	19 c0                	sbb    eax,eax
c000f697:	83 e0 80             	and    eax,0xffffff80
c000f69a:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000f69e:	e6 70                	out    0x70,al
c000f6a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f6a4:	e6 71                	out    0x71,al
c000f6a6:	c3                   	ret    
c000f6a7:	90                   	nop

c000f6a8 <Computer::handleNMI()>:
c000f6a8:	56                   	push   esi
c000f6a9:	53                   	push   ebx
c000f6aa:	83 ec 10             	sub    esp,0x10
c000f6ad:	e4 92                	in     al,0x92
c000f6af:	89 c6                	mov    esi,eax
c000f6b1:	e4 61                	in     al,0x61
c000f6b3:	68 6f a4 02 c0       	push   0xc002a46f
c000f6b8:	88 c3                	mov    bl,al
c000f6ba:	e8 87 3b 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c000f6bf:	83 c4 10             	add    esp,0x10
c000f6c2:	83 e6 10             	and    esi,0x10
c000f6c5:	75 0d                	jne    c000f6d4 <Computer::handleNMI()+0x2c>
c000f6c7:	f6 c3 40             	test   bl,0x40
c000f6ca:	75 1d                	jne    c000f6e9 <Computer::handleNMI()+0x41>
c000f6cc:	84 db                	test   bl,bl
c000f6ce:	78 2d                	js     c000f6fd <Computer::handleNMI()+0x55>
c000f6d0:	58                   	pop    eax
c000f6d1:	5b                   	pop    ebx
c000f6d2:	5e                   	pop    esi
c000f6d3:	c3                   	ret    
c000f6d4:	83 ec 0c             	sub    esp,0xc
c000f6d7:	68 80 a4 02 c0       	push   0xc002a480
c000f6dc:	e8 1a b1 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c000f6e1:	83 c4 10             	add    esp,0x10
c000f6e4:	f6 c3 40             	test   bl,0x40
c000f6e7:	74 e3                	je     c000f6cc <Computer::handleNMI()+0x24>
c000f6e9:	83 ec 0c             	sub    esp,0xc
c000f6ec:	68 8d a4 02 c0       	push   0xc002a48d
c000f6f1:	e8 05 b1 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c000f6f6:	83 c4 10             	add    esp,0x10
c000f6f9:	84 db                	test   bl,bl
c000f6fb:	79 d3                	jns    c000f6d0 <Computer::handleNMI()+0x28>
c000f6fd:	c7 44 24 10 97 a4 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a497
c000f705:	5a                   	pop    edx
c000f706:	5b                   	pop    ebx
c000f707:	5e                   	pop    esi
c000f708:	e9 ee b0 00 00       	jmp    c001a7fb <Krnl::panic(char const*)>
c000f70d:	90                   	nop

c000f70e <Computer::setDiskActivityLight(int, bool)>:
c000f70e:	56                   	push   esi
c000f70f:	53                   	push   ebx
c000f710:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f714:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f719:	77 1b                	ja     c000f736 <Computer::setDiskActivityLight(int, bool)+0x28>
c000f71b:	e4 92                	in     al,0x92
c000f71d:	bb 40 00 00 00       	mov    ebx,0x40
c000f722:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f726:	89 da                	mov    edx,ebx
c000f728:	d3 e2                	shl    edx,cl
c000f72a:	89 f1                	mov    ecx,esi
c000f72c:	f7 d2                	not    edx
c000f72e:	d3 e3                	shl    ebx,cl
c000f730:	21 d0                	and    eax,edx
c000f732:	09 d8                	or     eax,ebx
c000f734:	e6 92                	out    0x92,al
c000f736:	5b                   	pop    ebx
c000f737:	5e                   	pop    esi
c000f738:	c3                   	ret    
c000f739:	90                   	nop

c000f73a <GDTEntry::setBase(unsigned int)>:
c000f73a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f73e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f742:	89 c1                	mov    ecx,eax
c000f744:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f748:	c1 e9 10             	shr    ecx,0x10
c000f74b:	c1 e8 18             	shr    eax,0x18
c000f74e:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f751:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f754:	c3                   	ret    
c000f755:	90                   	nop

c000f756 <GDTEntry::setLimit(unsigned int)>:
c000f756:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f75a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f761:	66 89 01             	mov    WORD PTR [ecx],ax
c000f764:	83 e2 f0             	and    edx,0xfffffff0
c000f767:	c1 e8 10             	shr    eax,0x10
c000f76a:	83 e0 0f             	and    eax,0xf
c000f76d:	09 d0                	or     eax,edx
c000f76f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f772:	c3                   	ret    
c000f773:	90                   	nop

c000f774 <GDT::GDT()>:
c000f774:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f778:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f77e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f782:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f788:	90                   	nop
c000f789:	c3                   	ret    

c000f78a <GDT::addEntry(GDTEntry)>:
c000f78a:	53                   	push   ebx
c000f78b:	83 ec 0c             	sub    esp,0xc
c000f78e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f792:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f794:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f79b:	52                   	push   edx
c000f79c:	50                   	push   eax
c000f79d:	68 70 a5 02 c0       	push   0xc002a570
c000f7a2:	e8 9f 3a 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c000f7a7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f7a9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f7ad:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f7b1:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f7b5:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f7b9:	8d 50 01             	lea    edx,[eax+0x1]
c000f7bc:	c1 e0 03             	shl    eax,0x3
c000f7bf:	89 13                	mov    DWORD PTR [ebx],edx
c000f7c1:	83 c4 18             	add    esp,0x18
c000f7c4:	5b                   	pop    ebx
c000f7c5:	c3                   	ret    

c000f7c6 <GDT::getNumberOfEntries()>:
c000f7c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f7ca:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7cc:	c3                   	ret    
c000f7cd:	90                   	nop

c000f7ce <GDT::flush()>:
c000f7ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f7d2:	8b 10                	mov    edx,DWORD PTR [eax]
c000f7d4:	83 c0 04             	add    eax,0x4
c000f7d7:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f7de:	a3 96 13 03 c0       	mov    ds:0xc0031396,eax
c000f7e3:	66 89 15 94 13 03 c0 	mov    WORD PTR ds:0xc0031394,dx
c000f7ea:	e9 59 0c ff ff       	jmp    c0000448 <loadGDT>
c000f7ef:	90                   	nop

c000f7f0 <GDT::setup()>:
c000f7f0:	55                   	push   ebp
c000f7f1:	57                   	push   edi
c000f7f2:	56                   	push   esi
c000f7f3:	53                   	push   ebx
c000f7f4:	83 ec 3c             	sub    esp,0x3c
c000f7f7:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f7fb:	6a 00                	push   0x0
c000f7fd:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f801:	53                   	push   ebx
c000f802:	e8 33 ff ff ff       	call   c000f73a <GDTEntry::setBase(unsigned int)>
c000f807:	6a 00                	push   0x0
c000f809:	53                   	push   ebx
c000f80a:	e8 47 ff ff ff       	call   c000f756 <GDTEntry::setLimit(unsigned int)>
c000f80f:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f817:	6a 00                	push   0x0
c000f819:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f81d:	53                   	push   ebx
c000f81e:	e8 17 ff ff ff       	call   c000f73a <GDTEntry::setBase(unsigned int)>
c000f823:	68 ff ff ff 00       	push   0xffffff
c000f828:	53                   	push   ebx
c000f829:	e8 28 ff ff ff       	call   c000f756 <GDTEntry::setLimit(unsigned int)>
c000f82e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f832:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f837:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f83c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f840:	83 c4 20             	add    esp,0x20
c000f843:	6a 00                	push   0x0
c000f845:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f849:	53                   	push   ebx
c000f84a:	e8 eb fe ff ff       	call   c000f73a <GDTEntry::setBase(unsigned int)>
c000f84f:	68 ff ff ff 00       	push   0xffffff
c000f854:	53                   	push   ebx
c000f855:	e8 fc fe ff ff       	call   c000f756 <GDTEntry::setLimit(unsigned int)>
c000f85a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f85e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f862:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f866:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f86a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f86e:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f873:	0d 00 92 c0 00       	or     eax,0xc09200
c000f878:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f87c:	89 d8                	mov    eax,ebx
c000f87e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f882:	80 cc 60             	or     ah,0x60
c000f885:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f889:	83 c4 0c             	add    esp,0xc
c000f88c:	89 f8                	mov    eax,edi
c000f88e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f892:	80 cc 60             	or     ah,0x60
c000f895:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f899:	89 c7                	mov    edi,eax
c000f89b:	55                   	push   ebp
c000f89c:	e8 e9 fe ff ff       	call   c000f78a <GDT::addEntry(GDTEntry)>
c000f8a1:	83 c4 0c             	add    esp,0xc
c000f8a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f8a8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f8ac:	55                   	push   ebp
c000f8ad:	e8 d8 fe ff ff       	call   c000f78a <GDT::addEntry(GDTEntry)>
c000f8b2:	83 c4 0c             	add    esp,0xc
c000f8b5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f8b9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f8bd:	55                   	push   ebp
c000f8be:	e8 c7 fe ff ff       	call   c000f78a <GDT::addEntry(GDTEntry)>
c000f8c3:	83 c4 0c             	add    esp,0xc
c000f8c6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f8ca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8ce:	53                   	push   ebx
c000f8cf:	51                   	push   ecx
c000f8d0:	55                   	push   ebp
c000f8d1:	e8 b4 fe ff ff       	call   c000f78a <GDT::addEntry(GDTEntry)>
c000f8d6:	83 c4 0c             	add    esp,0xc
c000f8d9:	57                   	push   edi
c000f8da:	56                   	push   esi
c000f8db:	55                   	push   ebp
c000f8dc:	e8 a9 fe ff ff       	call   c000f78a <GDT::addEntry(GDTEntry)>
c000f8e1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f8e4:	e8 e5 fe ff ff       	call   c000f7ce <GDT::flush()>
c000f8e9:	83 c4 4c             	add    esp,0x4c
c000f8ec:	5b                   	pop    ebx
c000f8ed:	5e                   	pop    esi
c000f8ee:	5f                   	pop    edi
c000f8ef:	5d                   	pop    ebp
c000f8f0:	c3                   	ret    

c000f8f1 <idleFunction(void*)>:
c000f8f1:	53                   	push   ebx
c000f8f2:	83 ec 08             	sub    esp,0x8
c000f8f5:	e8 ae e7 00 00       	call   c001e0a8 <unlockScheduler()>
c000f8fa:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c000f8ff:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f905:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f90c:	74 3c                	je     c000f94a <idleFunction(void*)+0x59>
c000f90e:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f915:	74 33                	je     c000f94a <idleFunction(void*)+0x59>
c000f917:	31 db                	xor    ebx,ebx
c000f919:	52                   	push   edx
c000f91a:	52                   	push   edx
c000f91b:	68 e1 00 00 00       	push   0xe1
c000f920:	50                   	push   eax
c000f921:	e8 7e fb ff ff       	call   c000f4a4 <Computer::rdmsr(unsigned int)>
c000f926:	53                   	push   ebx
c000f927:	83 e0 02             	and    eax,0x2
c000f92a:	50                   	push   eax
c000f92b:	68 e1 00 00 00       	push   0xe1
c000f930:	ff 35 90 13 03 c0    	push   DWORD PTR ds:0xc0031390
c000f936:	e8 95 fb ff ff       	call   c000f4d0 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f93b:	83 c4 20             	add    esp,0x20
c000f93e:	e8 3c 09 ff ff       	call   c000027f <doTPAUSE>
c000f943:	e8 98 8e 01 00       	call   c00287e0 <idleCommon()>
c000f948:	eb f4                	jmp    c000f93e <idleFunction(void*)+0x4d>
c000f94a:	fb                   	sti    
c000f94b:	f4                   	hlt    
c000f94c:	e8 8f 8e 01 00       	call   c00287e0 <idleCommon()>
c000f951:	eb f7                	jmp    c000f94a <idleFunction(void*)+0x59>
c000f953:	90                   	nop

c000f954 <IDTEntry::IDTEntry(bool)>:
c000f954:	83 ec 04             	sub    esp,0x4
c000f957:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f95b:	88 04 24             	mov    BYTE PTR [esp],al
c000f95e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f962:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f968:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f96c:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f970:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f974:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f977:	83 e2 f0             	and    edx,0xfffffff0
c000f97a:	83 ca 0e             	or     edx,0xe
c000f97d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f980:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f984:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f987:	83 e2 ef             	and    edx,0xffffffef
c000f98a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f98d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f991:	74 04                	je     c000f997 <IDTEntry::IDTEntry(bool)+0x43>
c000f993:	b2 03                	mov    dl,0x3
c000f995:	eb 02                	jmp    c000f999 <IDTEntry::IDTEntry(bool)+0x45>
c000f997:	b2 00                	mov    dl,0x0
c000f999:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f99d:	83 e2 03             	and    edx,0x3
c000f9a0:	88 d1                	mov    cl,dl
c000f9a2:	c1 e1 05             	shl    ecx,0x5
c000f9a5:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f9a8:	83 e2 9f             	and    edx,0xffffff9f
c000f9ab:	09 ca                	or     edx,ecx
c000f9ad:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f9b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f9b4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f9b7:	83 ca 80             	or     edx,0xffffff80
c000f9ba:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f9bd:	90                   	nop
c000f9be:	83 c4 04             	add    esp,0x4
c000f9c1:	c3                   	ret    

c000f9c2 <IDTEntry::setOffset(unsigned int)>:
c000f9c2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f9c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f9ca:	66 89 02             	mov    WORD PTR [edx],ax
c000f9cd:	c1 e8 10             	shr    eax,0x10
c000f9d0:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f9d4:	c3                   	ret    
c000f9d5:	90                   	nop

c000f9d6 <IDT::IDT()>:
c000f9d6:	90                   	nop
c000f9d7:	c3                   	ret    

c000f9d8 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f9d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f9dc:	83 c0 30             	add    eax,0x30
c000f9df:	c3                   	ret    

c000f9e0 <IDT::addEntry(IDTEntry, int)>:
c000f9e0:	53                   	push   ebx
c000f9e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f9e5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f9e9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f9ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f9f1:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f9f4:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f9f8:	5b                   	pop    ebx
c000f9f9:	c3                   	ret    

c000f9fa <IDT::addEntry(int, void (*)(), bool)>:
c000f9fa:	53                   	push   ebx
c000f9fb:	83 ec 10             	sub    esp,0x10
c000f9fe:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000fa03:	50                   	push   eax
c000fa04:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fa08:	53                   	push   ebx
c000fa09:	e8 46 ff ff ff       	call   c000f954 <IDTEntry::IDTEntry(bool)>
c000fa0e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fa12:	53                   	push   ebx
c000fa13:	e8 aa ff ff ff       	call   c000f9c2 <IDTEntry::setOffset(unsigned int)>
c000fa18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fa1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fa20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fa24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000fa28:	e8 b3 ff ff ff       	call   c000f9e0 <IDT::addEntry(IDTEntry, int)>
c000fa2d:	83 c4 30             	add    esp,0x30
c000fa30:	5b                   	pop    ebx
c000fa31:	c3                   	ret    

c000fa32 <IDT::flush()>:
c000fa32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fa36:	66 c7 05 9c 13 03 c0 ff 07 	mov    WORD PTR ds:0xc003139c,0x7ff
c000fa3f:	a3 9e 13 03 c0       	mov    ds:0xc003139e,eax
c000fa44:	0f 01 1d 9c 13 03 c0 	lidtd  ds:0xc003139c
c000fa4b:	c3                   	ret    

c000fa4c <IDT::setup()>:
c000fa4c:	57                   	push   edi
c000fa4d:	56                   	push   esi
c000fa4e:	53                   	push   ebx
c000fa4f:	83 ec 10             	sub    esp,0x10
c000fa52:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000fa56:	6a 00                	push   0x0
c000fa58:	68 68 04 00 c0       	push   0xc0000468
c000fa5d:	6a 00                	push   0x0
c000fa5f:	53                   	push   ebx
c000fa60:	e8 95 ff ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fa65:	6a 00                	push   0x0
c000fa67:	68 78 04 00 c0       	push   0xc0000478
c000fa6c:	6a 01                	push   0x1
c000fa6e:	53                   	push   ebx
c000fa6f:	e8 86 ff ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fa74:	83 c4 20             	add    esp,0x20
c000fa77:	6a 00                	push   0x0
c000fa79:	68 82 04 00 c0       	push   0xc0000482
c000fa7e:	6a 02                	push   0x2
c000fa80:	53                   	push   ebx
c000fa81:	e8 74 ff ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fa86:	6a 00                	push   0x0
c000fa88:	68 8c 04 00 c0       	push   0xc000048c
c000fa8d:	6a 03                	push   0x3
c000fa8f:	53                   	push   ebx
c000fa90:	e8 65 ff ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fa95:	83 c4 20             	add    esp,0x20
c000fa98:	6a 00                	push   0x0
c000fa9a:	68 96 04 00 c0       	push   0xc0000496
c000fa9f:	6a 04                	push   0x4
c000faa1:	53                   	push   ebx
c000faa2:	e8 53 ff ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000faa7:	6a 00                	push   0x0
c000faa9:	68 a0 04 00 c0       	push   0xc00004a0
c000faae:	6a 05                	push   0x5
c000fab0:	53                   	push   ebx
c000fab1:	e8 44 ff ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fab6:	83 c4 20             	add    esp,0x20
c000fab9:	6a 00                	push   0x0
c000fabb:	68 aa 04 00 c0       	push   0xc00004aa
c000fac0:	6a 06                	push   0x6
c000fac2:	53                   	push   ebx
c000fac3:	e8 32 ff ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fac8:	6a 00                	push   0x0
c000faca:	68 b4 04 00 c0       	push   0xc00004b4
c000facf:	6a 07                	push   0x7
c000fad1:	53                   	push   ebx
c000fad2:	e8 23 ff ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fad7:	83 c4 20             	add    esp,0x20
c000fada:	6a 00                	push   0x0
c000fadc:	68 be 04 00 c0       	push   0xc00004be
c000fae1:	6a 08                	push   0x8
c000fae3:	53                   	push   ebx
c000fae4:	e8 11 ff ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fae9:	6a 00                	push   0x0
c000faeb:	68 c6 04 00 c0       	push   0xc00004c6
c000faf0:	6a 09                	push   0x9
c000faf2:	53                   	push   ebx
c000faf3:	e8 02 ff ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000faf8:	83 c4 20             	add    esp,0x20
c000fafb:	6a 00                	push   0x0
c000fafd:	68 d0 04 00 c0       	push   0xc00004d0
c000fb02:	6a 0a                	push   0xa
c000fb04:	53                   	push   ebx
c000fb05:	e8 f0 fe ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fb0a:	6a 00                	push   0x0
c000fb0c:	68 d8 04 00 c0       	push   0xc00004d8
c000fb11:	6a 0b                	push   0xb
c000fb13:	53                   	push   ebx
c000fb14:	e8 e1 fe ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fb19:	83 c4 20             	add    esp,0x20
c000fb1c:	6a 00                	push   0x0
c000fb1e:	68 e0 04 00 c0       	push   0xc00004e0
c000fb23:	6a 0c                	push   0xc
c000fb25:	53                   	push   ebx
c000fb26:	e8 cf fe ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fb2b:	6a 00                	push   0x0
c000fb2d:	68 e8 04 00 c0       	push   0xc00004e8
c000fb32:	6a 0d                	push   0xd
c000fb34:	53                   	push   ebx
c000fb35:	e8 c0 fe ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fb3a:	83 c4 20             	add    esp,0x20
c000fb3d:	6a 00                	push   0x0
c000fb3f:	68 f0 04 00 c0       	push   0xc00004f0
c000fb44:	6a 0e                	push   0xe
c000fb46:	53                   	push   ebx
c000fb47:	e8 ae fe ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fb4c:	6a 00                	push   0x0
c000fb4e:	68 f8 04 00 c0       	push   0xc00004f8
c000fb53:	6a 0f                	push   0xf
c000fb55:	53                   	push   ebx
c000fb56:	e8 9f fe ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fb5b:	83 c4 20             	add    esp,0x20
c000fb5e:	6a 00                	push   0x0
c000fb60:	68 02 05 00 c0       	push   0xc0000502
c000fb65:	6a 10                	push   0x10
c000fb67:	53                   	push   ebx
c000fb68:	e8 8d fe ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fb6d:	6a 00                	push   0x0
c000fb6f:	68 0c 05 00 c0       	push   0xc000050c
c000fb74:	6a 11                	push   0x11
c000fb76:	53                   	push   ebx
c000fb77:	e8 7e fe ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fb7c:	83 c4 20             	add    esp,0x20
c000fb7f:	6a 00                	push   0x0
c000fb81:	68 16 05 00 c0       	push   0xc0000516
c000fb86:	6a 12                	push   0x12
c000fb88:	53                   	push   ebx
c000fb89:	e8 6c fe ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fb8e:	6a 01                	push   0x1
c000fb90:	68 b0 05 00 c0       	push   0xc00005b0
c000fb95:	6a 60                	push   0x60
c000fb97:	53                   	push   ebx
c000fb98:	e8 5d fe ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fb9d:	83 c4 20             	add    esp,0x20
c000fba0:	6a 00                	push   0x0
c000fba2:	68 b7 05 00 c0       	push   0xc00005b7
c000fba7:	6a 20                	push   0x20
c000fba9:	53                   	push   ebx
c000fbaa:	e8 4b fe ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fbaf:	6a 00                	push   0x0
c000fbb1:	68 a2 05 00 c0       	push   0xc00005a2
c000fbb6:	6a 21                	push   0x21
c000fbb8:	53                   	push   ebx
c000fbb9:	e8 3c fe ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fbbe:	83 c4 20             	add    esp,0x20
c000fbc1:	6a 00                	push   0x0
c000fbc3:	68 a9 05 00 c0       	push   0xc00005a9
c000fbc8:	6a 22                	push   0x22
c000fbca:	53                   	push   ebx
c000fbcb:	e8 2a fe ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fbd0:	6a 00                	push   0x0
c000fbd2:	68 20 05 00 c0       	push   0xc0000520
c000fbd7:	6a 23                	push   0x23
c000fbd9:	53                   	push   ebx
c000fbda:	e8 1b fe ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fbdf:	83 c4 20             	add    esp,0x20
c000fbe2:	6a 00                	push   0x0
c000fbe4:	68 2a 05 00 c0       	push   0xc000052a
c000fbe9:	6a 24                	push   0x24
c000fbeb:	53                   	push   ebx
c000fbec:	e8 09 fe ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fbf1:	6a 00                	push   0x0
c000fbf3:	68 34 05 00 c0       	push   0xc0000534
c000fbf8:	6a 25                	push   0x25
c000fbfa:	53                   	push   ebx
c000fbfb:	e8 fa fd ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fc00:	83 c4 20             	add    esp,0x20
c000fc03:	6a 00                	push   0x0
c000fc05:	68 3e 05 00 c0       	push   0xc000053e
c000fc0a:	6a 26                	push   0x26
c000fc0c:	53                   	push   ebx
c000fc0d:	e8 e8 fd ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fc12:	6a 00                	push   0x0
c000fc14:	68 48 05 00 c0       	push   0xc0000548
c000fc19:	6a 27                	push   0x27
c000fc1b:	53                   	push   ebx
c000fc1c:	e8 d9 fd ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fc21:	83 c4 20             	add    esp,0x20
c000fc24:	6a 00                	push   0x0
c000fc26:	68 52 05 00 c0       	push   0xc0000552
c000fc2b:	6a 28                	push   0x28
c000fc2d:	53                   	push   ebx
c000fc2e:	e8 c7 fd ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fc33:	6a 00                	push   0x0
c000fc35:	68 5c 05 00 c0       	push   0xc000055c
c000fc3a:	6a 29                	push   0x29
c000fc3c:	53                   	push   ebx
c000fc3d:	e8 b8 fd ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fc42:	83 c4 20             	add    esp,0x20
c000fc45:	6a 00                	push   0x0
c000fc47:	68 66 05 00 c0       	push   0xc0000566
c000fc4c:	6a 2a                	push   0x2a
c000fc4e:	53                   	push   ebx
c000fc4f:	e8 a6 fd ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fc54:	6a 00                	push   0x0
c000fc56:	68 70 05 00 c0       	push   0xc0000570
c000fc5b:	6a 2b                	push   0x2b
c000fc5d:	53                   	push   ebx
c000fc5e:	e8 97 fd ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fc63:	83 c4 20             	add    esp,0x20
c000fc66:	6a 00                	push   0x0
c000fc68:	68 7a 05 00 c0       	push   0xc000057a
c000fc6d:	6a 2c                	push   0x2c
c000fc6f:	53                   	push   ebx
c000fc70:	e8 85 fd ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fc75:	6a 00                	push   0x0
c000fc77:	68 84 05 00 c0       	push   0xc0000584
c000fc7c:	6a 2d                	push   0x2d
c000fc7e:	53                   	push   ebx
c000fc7f:	e8 76 fd ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fc84:	83 c4 20             	add    esp,0x20
c000fc87:	6a 00                	push   0x0
c000fc89:	68 8e 05 00 c0       	push   0xc000058e
c000fc8e:	6a 2e                	push   0x2e
c000fc90:	53                   	push   ebx
c000fc91:	e8 64 fd ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fc96:	6a 00                	push   0x0
c000fc98:	68 98 05 00 c0       	push   0xc0000598
c000fc9d:	6a 2f                	push   0x2f
c000fc9f:	53                   	push   ebx
c000fca0:	e8 55 fd ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fca5:	83 c4 20             	add    esp,0x20
c000fca8:	6a 00                	push   0x0
c000fcaa:	68 ed 05 00 c0       	push   0xc00005ed
c000fcaf:	6a 30                	push   0x30
c000fcb1:	53                   	push   ebx
c000fcb2:	e8 43 fd ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fcb7:	6a 00                	push   0x0
c000fcb9:	68 f7 05 00 c0       	push   0xc00005f7
c000fcbe:	6a 31                	push   0x31
c000fcc0:	53                   	push   ebx
c000fcc1:	e8 34 fd ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fcc6:	83 c4 20             	add    esp,0x20
c000fcc9:	6a 00                	push   0x0
c000fccb:	68 01 06 00 c0       	push   0xc0000601
c000fcd0:	6a 32                	push   0x32
c000fcd2:	53                   	push   ebx
c000fcd3:	e8 22 fd ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fcd8:	6a 00                	push   0x0
c000fcda:	68 0b 06 00 c0       	push   0xc000060b
c000fcdf:	6a 33                	push   0x33
c000fce1:	53                   	push   ebx
c000fce2:	e8 13 fd ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fce7:	83 c4 20             	add    esp,0x20
c000fcea:	6a 00                	push   0x0
c000fcec:	68 15 06 00 c0       	push   0xc0000615
c000fcf1:	6a 34                	push   0x34
c000fcf3:	53                   	push   ebx
c000fcf4:	e8 01 fd ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fcf9:	6a 00                	push   0x0
c000fcfb:	68 1f 06 00 c0       	push   0xc000061f
c000fd00:	6a 35                	push   0x35
c000fd02:	53                   	push   ebx
c000fd03:	e8 f2 fc ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fd08:	83 c4 20             	add    esp,0x20
c000fd0b:	6a 00                	push   0x0
c000fd0d:	68 29 06 00 c0       	push   0xc0000629
c000fd12:	6a 36                	push   0x36
c000fd14:	53                   	push   ebx
c000fd15:	e8 e0 fc ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fd1a:	6a 00                	push   0x0
c000fd1c:	68 33 06 00 c0       	push   0xc0000633
c000fd21:	6a 37                	push   0x37
c000fd23:	53                   	push   ebx
c000fd24:	e8 d1 fc ff ff       	call   c000f9fa <IDT::addEntry(int, void (*)(), bool)>
c000fd29:	83 c4 20             	add    esp,0x20
c000fd2c:	e8 d1 27 00 00       	call   c0012502 <Virt::getAKernelVAS()>
c000fd31:	52                   	push   edx
c000fd32:	6a 03                	push   0x3
c000fd34:	6a 02                	push   0x2
c000fd36:	50                   	push   eax
c000fd37:	e8 fc 28 00 00       	call   c0012638 <VAS::allocatePages(int, int)>
c000fd3c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000fd43:	89 c6                	mov    esi,eax
c000fd45:	e8 12 02 00 00       	call   c000ff5c <malloc>
c000fd4a:	81 c6 00 20 00 00    	add    esi,0x2000
c000fd50:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd53:	89 c7                	mov    edi,eax
c000fd55:	e8 24 1e 00 00       	call   c0011b7e <TSS::TSS()>
c000fd5a:	83 c4 0c             	add    esp,0xc
c000fd5d:	68 be 04 00 c0       	push   0xc00004be
c000fd62:	56                   	push   esi
c000fd63:	57                   	push   edi
c000fd64:	e8 55 1e 00 00       	call   c0011bbe <TSS::setup(unsigned long, unsigned long)>
c000fd69:	59                   	pop    ecx
c000fd6a:	89 c6                	mov    esi,eax
c000fd6c:	5f                   	pop    edi
c000fd6d:	6a 00                	push   0x0
c000fd6f:	8d 44 24 14          	lea    eax,[esp+0x14]
c000fd73:	50                   	push   eax
c000fd74:	e8 db fb ff ff       	call   c000f954 <IDTEntry::IDTEntry(bool)>
c000fd79:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fd7d:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000fd82:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000fd89:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000fd8f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fd93:	80 ce 05             	or     dh,0x5
c000fd96:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000fd99:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd9d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fda1:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000fda4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fda7:	e8 86 fc ff ff       	call   c000fa32 <IDT::flush()>
c000fdac:	83 c4 20             	add    esp,0x20
c000fdaf:	5b                   	pop    ebx
c000fdb0:	5e                   	pop    esi
c000fdb1:	5f                   	pop    edi
c000fdb2:	c3                   	ret    

c000fdb3 <sbrk>:
c000fdb3:	55                   	push   ebp
c000fdb4:	57                   	push   edi
c000fdb5:	56                   	push   esi
c000fdb6:	53                   	push   ebx
c000fdb7:	83 ec 1c             	sub    esp,0x1c
c000fdba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fdbe:	85 c0                	test   eax,eax
c000fdc0:	74 3e                	je     c000fe00 <sbrk+0x4d>
c000fdc2:	78 43                	js     c000fe07 <sbrk+0x54>
c000fdc4:	8b 15 90 13 03 c0    	mov    edx,DWORD PTR ds:0xc0031390
c000fdca:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000fdd0:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000fdd6:	83 e2 01             	and    edx,0x1
c000fdd9:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000fddd:	8b 0d e8 02 03 c0    	mov    ecx,DWORD PTR ds:0xc00302e8
c000fde3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000fde7:	05 ff 0f 00 00       	add    eax,0xfff
c000fdec:	89 c2                	mov    edx,eax
c000fdee:	78 2f                	js     c000fe1f <sbrk+0x6c>
c000fdf0:	c1 fa 0c             	sar    edx,0xc
c000fdf3:	89 d7                	mov    edi,edx
c000fdf5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fdf9:	be 00 00 00 00       	mov    esi,0x0
c000fdfe:	eb 36                	jmp    c000fe36 <sbrk+0x83>
c000fe00:	a1 e8 02 03 c0       	mov    eax,ds:0xc00302e8
c000fe05:	eb 74                	jmp    c000fe7b <sbrk+0xc8>
c000fe07:	83 ec 08             	sub    esp,0x8
c000fe0a:	50                   	push   eax
c000fe0b:	68 6c a7 02 c0       	push   0xc002a76c
c000fe10:	e8 31 34 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c000fe15:	83 c4 10             	add    esp,0x10
c000fe18:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000fe1d:	eb 5c                	jmp    c000fe7b <sbrk+0xc8>
c000fe1f:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000fe25:	eb c9                	jmp    c000fdf0 <sbrk+0x3d>
c000fe27:	81 05 e8 02 03 c0 00 10 00 00 	add    DWORD PTR ds:0xc00302e8,0x1000
c000fe31:	46                   	inc    esi
c000fe32:	39 f7                	cmp    edi,esi
c000fe34:	74 34                	je     c000fe6a <sbrk+0xb7>
c000fe36:	e8 c7 26 00 00       	call   c0012502 <Virt::getAKernelVAS()>
c000fe3b:	89 c3                	mov    ebx,eax
c000fe3d:	8b 2d e8 02 03 c0    	mov    ebp,DWORD PTR ds:0xc00302e8
c000fe43:	e8 b1 07 00 00       	call   c00105f9 <Phys::allocatePage()>
c000fe48:	68 01 04 00 00       	push   0x401
c000fe4d:	55                   	push   ebp
c000fe4e:	50                   	push   eax
c000fe4f:	53                   	push   ebx
c000fe50:	e8 cf 30 00 00       	call   c0012f24 <VAS::mapPage(unsigned long, unsigned long, int)>
c000fe55:	83 c4 10             	add    esp,0x10
c000fe58:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000fe5d:	74 c8                	je     c000fe27 <sbrk+0x74>
c000fe5f:	8b 1d e8 02 03 c0    	mov    ebx,DWORD PTR ds:0xc00302e8
c000fe65:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000fe68:	eb bd                	jmp    c000fe27 <sbrk+0x74>
c000fe6a:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000fe6f:	75 12                	jne    c000fe83 <sbrk+0xd0>
c000fe71:	0f 20 d8             	mov    eax,cr3
c000fe74:	0f 22 d8             	mov    cr3,eax
c000fe77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fe7b:	83 c4 1c             	add    esp,0x1c
c000fe7e:	5b                   	pop    ebx
c000fe7f:	5e                   	pop    esi
c000fe80:	5f                   	pop    edi
c000fe81:	5d                   	pop    ebp
c000fe82:	c3                   	ret    
c000fe83:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fe87:	89 cb                	mov    ebx,ecx
c000fe89:	c1 eb 0a             	shr    ebx,0xa
c000fe8c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000fe92:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000fe98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe9c:	c1 e0 0c             	shl    eax,0xc
c000fe9f:	01 c8                	add    eax,ecx
c000fea1:	c1 e8 0a             	shr    eax,0xa
c000fea4:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fea9:	2d 00 00 40 00       	sub    eax,0x400000
c000feae:	39 c3                	cmp    ebx,eax
c000feb0:	77 c5                	ja     c000fe77 <sbrk+0xc4>
c000feb2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000feb5:	81 c3 00 10 00 00    	add    ebx,0x1000
c000febb:	39 d8                	cmp    eax,ebx
c000febd:	73 f3                	jae    c000feb2 <sbrk+0xff>
c000febf:	eb b6                	jmp    c000fe77 <sbrk+0xc4>

c000fec1 <mmap>:
c000fec1:	83 ec 18             	sub    esp,0x18
c000fec4:	68 9c a7 02 c0       	push   0xc002a79c
c000fec9:	e8 2d a9 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c000fece:	b8 00 00 00 00       	mov    eax,0x0
c000fed3:	83 c4 1c             	add    esp,0x1c
c000fed6:	c3                   	ret    

c000fed7 <munmap>:
c000fed7:	83 ec 18             	sub    esp,0x18
c000feda:	68 a1 a7 02 c0       	push   0xc002a7a1
c000fedf:	e8 17 a9 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c000fee4:	b8 00 00 00 00       	mov    eax,0x0
c000fee9:	83 c4 1c             	add    esp,0x1c
c000feec:	c3                   	ret    

c000feed <liballoc_lock()>:
c000feed:	83 ec 0c             	sub    esp,0xc
c000fef0:	e8 b1 e1 00 00       	call   c001e0a6 <lockScheduler()>
c000fef5:	b8 00 00 00 00       	mov    eax,0x0
c000fefa:	83 c4 0c             	add    esp,0xc
c000fefd:	c3                   	ret    

c000fefe <liballoc_unlock()>:
c000fefe:	83 ec 0c             	sub    esp,0xc
c000ff01:	e8 a2 e1 00 00       	call   c001e0a8 <unlockScheduler()>
c000ff06:	b8 00 00 00 00       	mov    eax,0x0
c000ff0b:	83 c4 0c             	add    esp,0xc
c000ff0e:	c3                   	ret    

c000ff0f <liballoc_alloc(int)>:
c000ff0f:	83 ec 0c             	sub    esp,0xc
c000ff12:	e8 eb 25 00 00       	call   c0012502 <Virt::getAKernelVAS()>
c000ff17:	83 ec 04             	sub    esp,0x4
c000ff1a:	6a 01                	push   0x1
c000ff1c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff20:	50                   	push   eax
c000ff21:	e8 12 27 00 00       	call   c0012638 <VAS::allocatePages(int, int)>
c000ff26:	83 c4 1c             	add    esp,0x1c
c000ff29:	c3                   	ret    

c000ff2a <liballoc_free(void*, int)>:
c000ff2a:	83 ec 0c             	sub    esp,0xc
c000ff2d:	e8 d0 25 00 00       	call   c0012502 <Virt::getAKernelVAS()>
c000ff32:	83 ec 08             	sub    esp,0x8
c000ff35:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff39:	50                   	push   eax
c000ff3a:	e8 ed 28 00 00       	call   c001282c <VAS::freeAllocatedPages(unsigned long)>
c000ff3f:	b8 00 00 00 00       	mov    eax,0x0
c000ff44:	83 c4 1c             	add    esp,0x1c
c000ff47:	c3                   	ret    

c000ff48 <realloc>:
c000ff48:	83 ec 14             	sub    esp,0x14
c000ff4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff53:	e8 04 14 ff ff       	call   c000135c <dlrealloc>
c000ff58:	83 c4 1c             	add    esp,0x1c
c000ff5b:	c3                   	ret    

c000ff5c <malloc>:
c000ff5c:	83 ec 18             	sub    esp,0x18
c000ff5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff63:	e8 6b 0e ff ff       	call   c0000dd3 <dlmalloc>
c000ff68:	83 c4 1c             	add    esp,0x1c
c000ff6b:	c3                   	ret    

c000ff6c <free>:
c000ff6c:	83 ec 18             	sub    esp,0x18
c000ff6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff73:	e8 fd 11 ff ff       	call   c0001175 <dlfree>
c000ff78:	83 c4 1c             	add    esp,0x1c
c000ff7b:	c3                   	ret    

c000ff7c <rfree>:
c000ff7c:	83 ec 18             	sub    esp,0x18
c000ff7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff83:	e8 ed 11 ff ff       	call   c0001175 <dlfree>
c000ff88:	83 c4 1c             	add    esp,0x1c
c000ff8b:	c3                   	ret    

c000ff8c <calloc>:
c000ff8c:	56                   	push   esi
c000ff8d:	53                   	push   ebx
c000ff8e:	83 ec 10             	sub    esp,0x10
c000ff91:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ff95:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000ff9a:	53                   	push   ebx
c000ff9b:	e8 bc ff ff ff       	call   c000ff5c <malloc>
c000ffa0:	89 c6                	mov    esi,eax
c000ffa2:	83 c4 0c             	add    esp,0xc
c000ffa5:	53                   	push   ebx
c000ffa6:	6a 00                	push   0x0
c000ffa8:	50                   	push   eax
c000ffa9:	e8 16 07 ff ff       	call   c00006c4 <memset>
c000ffae:	89 f0                	mov    eax,esi
c000ffb0:	83 c4 14             	add    esp,0x14
c000ffb3:	5b                   	pop    ebx
c000ffb4:	5e                   	pop    esi
c000ffb5:	c3                   	ret    

c000ffb6 <hwTextMode_loadInData(VgaText*)>:
c000ffb6:	55                   	push   ebp
c000ffb7:	a1 44 03 03 c0       	mov    eax,ds:0xc0030344
c000ffbc:	57                   	push   edi
c000ffbd:	56                   	push   esi
c000ffbe:	53                   	push   ebx
c000ffbf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000ffc3:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000ffc9:	85 d2                	test   edx,edx
c000ffcb:	7e 2f                	jle    c000fffc <hwTextMode_loadInData(VgaText*)+0x46>
c000ffcd:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000ffd3:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000ffd6:	31 f6                	xor    esi,esi
c000ffd8:	29 fd                	sub    ebp,edi
c000ffda:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000ffdd:	31 c0                	xor    eax,eax
c000ffdf:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000ffe3:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000ffe7:	40                   	inc    eax
c000ffe8:	83 f8 50             	cmp    eax,0x50
c000ffeb:	75 f2                	jne    c000ffdf <hwTextMode_loadInData(VgaText*)+0x29>
c000ffed:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000fff3:	46                   	inc    esi
c000fff4:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000fffa:	7f de                	jg     c000ffda <hwTextMode_loadInData(VgaText*)+0x24>
c000fffc:	5b                   	pop    ebx
c000fffd:	5e                   	pop    esi
c000fffe:	5f                   	pop    edi
c000ffff:	5d                   	pop    ebp
c0010000:	c3                   	ret    

c0010001 <hwTextMode_loadInTitle(VgaText*, char*)>:
c0010001:	55                   	push   ebp
c0010002:	80 3d 60 14 03 c0 00 	cmp    BYTE PTR ds:0xc0031460,0x0
c0010009:	57                   	push   edi
c001000a:	56                   	push   esi
c001000b:	53                   	push   ebx
c001000c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010010:	75 50                	jne    c0010062 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c0010012:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c0010018:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c001001e:	8b 15 44 03 03 c0    	mov    edx,DWORD PTR ds:0xc0030344
c0010024:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010028:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c001002e:	eb 0e                	jmp    c001003e <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c0010030:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c0010036:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c001003c:	89 da                	mov    edx,ebx
c001003e:	83 e5 0f             	and    ebp,0xf
c0010041:	c1 e0 04             	shl    eax,0x4
c0010044:	8d 5a 02             	lea    ebx,[edx+0x2]
c0010047:	0f b6 c0             	movzx  eax,al
c001004a:	41                   	inc    ecx
c001004b:	09 e8                	or     eax,ebp
c001004d:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c0010051:	c1 e0 08             	shl    eax,0x8
c0010054:	09 e8                	or     eax,ebp
c0010056:	39 fb                	cmp    ebx,edi
c0010058:	66 89 02             	mov    WORD PTR [edx],ax
c001005b:	75 d3                	jne    c0010030 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c001005d:	5b                   	pop    ebx
c001005e:	5e                   	pop    esi
c001005f:	5f                   	pop    edi
c0010060:	5d                   	pop    ebp
c0010061:	c3                   	ret    
c0010062:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c001006c:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c0010076:	31 c0                	xor    eax,eax
c0010078:	bd 02 00 00 00       	mov    ebp,0x2
c001007d:	eb 9f                	jmp    c001001e <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c001007f <hwTextMode_scrollScreen(VgaText*)>:
c001007f:	55                   	push   ebp
c0010080:	57                   	push   edi
c0010081:	56                   	push   esi
c0010082:	53                   	push   ebx
c0010083:	83 ec 1c             	sub    esp,0x1c
c0010086:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001008a:	80 3d 60 14 03 c0 00 	cmp    BYTE PTR ds:0xc0031460,0x0
c0010091:	74 14                	je     c00100a7 <hwTextMode_scrollScreen(VgaText*)+0x28>
c0010093:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c001009d:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c00100a7:	a1 44 03 03 c0       	mov    eax,ds:0xc0030344
c00100ac:	bd 02 00 00 00       	mov    ebp,0x2
c00100b1:	05 a0 00 00 00       	add    eax,0xa0
c00100b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00100ba:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00100be:	31 c0                	xor    eax,eax
c00100c0:	eb 0b                	jmp    c00100cd <hwTextMode_scrollScreen(VgaText*)+0x4e>
c00100c2:	81 fe a0 00 00 00    	cmp    esi,0xa0
c00100c8:	74 57                	je     c0010121 <hwTextMode_scrollScreen(VgaText*)+0xa2>
c00100ca:	43                   	inc    ebx
c00100cb:	89 f0                	mov    eax,esi
c00100cd:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c00100d3:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c00100d9:	88 13                	mov    BYTE PTR [ebx],dl
c00100db:	8d 70 01             	lea    esi,[eax+0x1]
c00100de:	83 fd 18             	cmp    ebp,0x18
c00100e1:	75 df                	jne    c00100c2 <hwTextMode_scrollScreen(VgaText*)+0x43>
c00100e3:	a8 01                	test   al,0x1
c00100e5:	75 13                	jne    c00100fa <hwTextMode_scrollScreen(VgaText*)+0x7b>
c00100e7:	c6 07 20             	mov    BYTE PTR [edi],0x20
c00100ea:	81 fe a0 00 00 00    	cmp    esi,0xa0
c00100f0:	75 d8                	jne    c00100ca <hwTextMode_scrollScreen(VgaText*)+0x4b>
c00100f2:	83 c4 1c             	add    esp,0x1c
c00100f5:	5b                   	pop    ebx
c00100f6:	5e                   	pop    esi
c00100f7:	5f                   	pop    edi
c00100f8:	5d                   	pop    ebp
c00100f9:	c3                   	ret    
c00100fa:	83 ec 08             	sub    esp,0x8
c00100fd:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c0010104:	50                   	push   eax
c0010105:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c0010109:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c0010110:	50                   	push   eax
c0010111:	e8 78 13 00 00       	call   c001148e <VgaText::combineColours(unsigned char, unsigned char)>
c0010116:	83 c4 10             	add    esp,0x10
c0010119:	88 07                	mov    BYTE PTR [edi],al
c001011b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001011f:	eb c9                	jmp    c00100ea <hwTextMode_scrollScreen(VgaText*)+0x6b>
c0010121:	45                   	inc    ebp
c0010122:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c001012a:	eb 8e                	jmp    c00100ba <hwTextMode_scrollScreen(VgaText*)+0x3b>

c001012c <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c001012c:	57                   	push   edi
c001012d:	80 3d 60 14 03 c0 00 	cmp    BYTE PTR ds:0xc0031460,0x0
c0010134:	56                   	push   esi
c0010135:	53                   	push   ebx
c0010136:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001013a:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001013e:	75 65                	jne    c00101a5 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c0010140:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c0010145:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001014a:	83 ec 08             	sub    esp,0x8
c001014d:	52                   	push   edx
c001014e:	50                   	push   eax
c001014f:	e8 3a 13 00 00       	call   c001148e <VgaText::combineColours(unsigned char, unsigned char)>
c0010154:	5a                   	pop    edx
c0010155:	0f b6 c0             	movzx  eax,al
c0010158:	59                   	pop    ecx
c0010159:	50                   	push   eax
c001015a:	0f be c3             	movsx  eax,bl
c001015d:	50                   	push   eax
c001015e:	e8 3d 13 00 00       	call   c00114a0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010163:	83 c4 10             	add    esp,0x10
c0010166:	8b 35 44 03 03 c0    	mov    esi,DWORD PTR ds:0xc0030344
c001016c:	80 3d 60 14 03 c0 00 	cmp    BYTE PTR ds:0xc0031460,0x0
c0010173:	74 07                	je     c001017c <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c0010175:	66 0f be c3          	movsx  ax,bl
c0010179:	80 cc 02             	or     ah,0x2
c001017c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010180:	ba 19 00 00 00       	mov    edx,0x19
c0010185:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c001018b:	8d 0c bf             	lea    ecx,[edi+edi*4]
c001018e:	8d 14 92             	lea    edx,[edx+edx*4]
c0010191:	c1 e1 04             	shl    ecx,0x4
c0010194:	c1 e2 04             	shl    edx,0x4
c0010197:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c001019b:	01 ca                	add    edx,ecx
c001019d:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c00101a1:	5b                   	pop    ebx
c00101a2:	5e                   	pop    esi
c00101a3:	5f                   	pop    edi
c00101a4:	c3                   	ret    
c00101a5:	b8 02 00 00 00       	mov    eax,0x2
c00101aa:	31 d2                	xor    edx,edx
c00101ac:	eb 9c                	jmp    c001014a <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c00101ae <hwTextMode_showCursor(VgaText*, bool)>:
c00101ae:	56                   	push   esi
c00101af:	80 3d 60 14 03 c0 00 	cmp    BYTE PTR ds:0xc0031460,0x0
c00101b6:	53                   	push   ebx
c00101b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101bb:	75 39                	jne    c00101f6 <hwTextMode_showCursor(VgaText*, bool)+0x48>
c00101bd:	84 c0                	test   al,al
c00101bf:	74 38                	je     c00101f9 <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c00101c1:	bb d4 03 00 00       	mov    ebx,0x3d4
c00101c6:	b0 0a                	mov    al,0xa
c00101c8:	89 da                	mov    edx,ebx
c00101ca:	ee                   	out    dx,al
c00101cb:	b9 d5 03 00 00       	mov    ecx,0x3d5
c00101d0:	89 ca                	mov    edx,ecx
c00101d2:	ec                   	in     al,dx
c00101d3:	b2 0f                	mov    dl,0xf
c00101d5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00101d9:	83 e0 c0             	and    eax,0xffffffc0
c00101dc:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c00101e2:	09 d0                	or     eax,edx
c00101e4:	89 ca                	mov    edx,ecx
c00101e6:	ee                   	out    dx,al
c00101e7:	b0 0b                	mov    al,0xb
c00101e9:	89 da                	mov    edx,ebx
c00101eb:	ee                   	out    dx,al
c00101ec:	89 ca                	mov    edx,ecx
c00101ee:	ec                   	in     al,dx
c00101ef:	83 e0 e0             	and    eax,0xffffffe0
c00101f2:	83 c8 0f             	or     eax,0xf
c00101f5:	ee                   	out    dx,al
c00101f6:	5b                   	pop    ebx
c00101f7:	5e                   	pop    esi
c00101f8:	c3                   	ret    
c00101f9:	b0 0a                	mov    al,0xa
c00101fb:	ba d4 03 00 00       	mov    edx,0x3d4
c0010200:	ee                   	out    dx,al
c0010201:	b0 20                	mov    al,0x20
c0010203:	ba d5 03 00 00       	mov    edx,0x3d5
c0010208:	ee                   	out    dx,al
c0010209:	5b                   	pop    ebx
c001020a:	5e                   	pop    esi
c001020b:	c3                   	ret    

c001020c <hwTextMode_update(VgaText*)>:
c001020c:	c3                   	ret    

c001020d <hwTextMode_updateCursor(VgaText*)>:
c001020d:	56                   	push   esi
c001020e:	80 3d 60 14 03 c0 00 	cmp    BYTE PTR ds:0xc0031460,0x0
c0010215:	53                   	push   ebx
c0010216:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001021a:	75 3f                	jne    c001025b <hwTextMode_updateCursor(VgaText*)+0x4e>
c001021c:	be d4 03 00 00       	mov    esi,0x3d4
c0010221:	b9 19 00 00 00       	mov    ecx,0x19
c0010226:	89 f2                	mov    edx,esi
c0010228:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c001022e:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c0010234:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c0010237:	c1 e1 04             	shl    ecx,0x4
c001023a:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c0010240:	b0 0f                	mov    al,0xf
c0010242:	ee                   	out    dx,al
c0010243:	bb d5 03 00 00       	mov    ebx,0x3d5
c0010248:	88 c8                	mov    al,cl
c001024a:	89 da                	mov    edx,ebx
c001024c:	ee                   	out    dx,al
c001024d:	b0 0e                	mov    al,0xe
c001024f:	89 f2                	mov    edx,esi
c0010251:	ee                   	out    dx,al
c0010252:	89 c8                	mov    eax,ecx
c0010254:	89 da                	mov    edx,ebx
c0010256:	66 c1 e8 08          	shr    ax,0x8
c001025a:	ee                   	out    dx,al
c001025b:	5b                   	pop    ebx
c001025c:	5e                   	pop    esi
c001025d:	c3                   	ret    

c001025e <hwTextMode_disableBlink(VgaText*, bool)>:
c001025e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010262:	80 3d 60 14 03 c0 00 	cmp    BYTE PTR ds:0xc0031460,0x0
c0010269:	75 38                	jne    c00102a3 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c001026b:	ba da 03 00 00       	mov    edx,0x3da
c0010270:	84 c0                	test   al,al
c0010272:	75 18                	jne    c001028c <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c0010274:	ec                   	in     al,dx
c0010275:	b9 c0 03 00 00       	mov    ecx,0x3c0
c001027a:	b0 30                	mov    al,0x30
c001027c:	89 ca                	mov    edx,ecx
c001027e:	ee                   	out    dx,al
c001027f:	ba c1 03 00 00       	mov    edx,0x3c1
c0010284:	ec                   	in     al,dx
c0010285:	83 c8 08             	or     eax,0x8
c0010288:	89 ca                	mov    edx,ecx
c001028a:	ee                   	out    dx,al
c001028b:	c3                   	ret    
c001028c:	ec                   	in     al,dx
c001028d:	b9 c0 03 00 00       	mov    ecx,0x3c0
c0010292:	b0 30                	mov    al,0x30
c0010294:	89 ca                	mov    edx,ecx
c0010296:	ee                   	out    dx,al
c0010297:	ba c1 03 00 00       	mov    edx,0x3c1
c001029c:	ec                   	in     al,dx
c001029d:	83 e0 f7             	and    eax,0xfffffff7
c00102a0:	89 ca                	mov    edx,ecx
c00102a2:	ee                   	out    dx,al
c00102a3:	c3                   	ret    

c00102a4 <setupTextMode()>:
c00102a4:	a1 10 04 00 00       	mov    eax,ds:0x410
c00102a9:	83 e0 30             	and    eax,0x30
c00102ac:	66 83 f8 30          	cmp    ax,0x30
c00102b0:	75 11                	jne    c00102c3 <setupTextMode()+0x1f>
c00102b2:	81 2d 44 03 03 c0 00 80 00 00 	sub    DWORD PTR ds:0xc0030344,0x8000
c00102bc:	c6 05 60 14 03 c0 01 	mov    BYTE PTR ds:0xc0031460,0x1
c00102c3:	c7 05 58 14 03 c0 5e 02 01 c0 	mov    DWORD PTR ds:0xc0031458,0xc001025e
c00102cd:	c7 05 44 14 03 c0 b6 ff 00 c0 	mov    DWORD PTR ds:0xc0031444,0xc000ffb6
c00102d7:	c7 05 40 14 03 c0 01 00 01 c0 	mov    DWORD PTR ds:0xc0031440,0xc0010001
c00102e1:	c7 05 4c 14 03 c0 7f 00 01 c0 	mov    DWORD PTR ds:0xc003144c,0xc001007f
c00102eb:	c7 05 54 14 03 c0 ae 01 01 c0 	mov    DWORD PTR ds:0xc0031454,0xc00101ae
c00102f5:	c7 05 48 14 03 c0 0c 02 01 c0 	mov    DWORD PTR ds:0xc0031448,0xc001020c
c00102ff:	c7 05 50 14 03 c0 0d 02 01 c0 	mov    DWORD PTR ds:0xc0031450,0xc001020d
c0010309:	c7 05 5c 14 03 c0 2c 01 01 c0 	mov    DWORD PTR ds:0xc003145c,0xc001012c
c0010313:	c3                   	ret    

c0010314 <kernel_main>:
c0010314:	57                   	push   edi
c0010315:	bf f9 03 00 00       	mov    edi,0x3f9
c001031a:	56                   	push   esi
c001031b:	31 f6                	xor    esi,esi
c001031d:	53                   	push   ebx
c001031e:	83 ec 10             	sub    esp,0x10
c0010321:	e8 cc 09 00 00       	call   c0010cf2 <installVgaTextImplementation()>
c0010326:	e8 79 ff ff ff       	call   c00102a4 <setupTextMode()>
c001032b:	89 f0                	mov    eax,esi
c001032d:	89 fa                	mov    edx,edi
c001032f:	ee                   	out    dx,al
c0010330:	bb fb 03 00 00       	mov    ebx,0x3fb
c0010335:	b0 80                	mov    al,0x80
c0010337:	89 da                	mov    edx,ebx
c0010339:	ee                   	out    dx,al
c001033a:	b1 03                	mov    cl,0x3
c001033c:	ba f8 03 00 00       	mov    edx,0x3f8
c0010341:	88 c8                	mov    al,cl
c0010343:	ee                   	out    dx,al
c0010344:	89 f0                	mov    eax,esi
c0010346:	89 fa                	mov    edx,edi
c0010348:	ee                   	out    dx,al
c0010349:	88 c8                	mov    al,cl
c001034b:	89 da                	mov    edx,ebx
c001034d:	ee                   	out    dx,al
c001034e:	b0 c7                	mov    al,0xc7
c0010350:	ba fa 03 00 00       	mov    edx,0x3fa
c0010355:	ee                   	out    dx,al
c0010356:	b0 0b                	mov    al,0xb
c0010358:	ba fc 03 00 00       	mov    edx,0x3fc
c001035d:	ee                   	out    dx,al
c001035e:	83 ec 0c             	sub    esp,0xc
c0010361:	68 48 a8 02 c0       	push   0xc002a848
c0010366:	e8 db 2e 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001036b:	a1 24 05 00 00       	mov    eax,ds:0x524
c0010370:	05 ff 0f 00 00       	add    eax,0xfff
c0010375:	25 00 f0 ff ff       	and    eax,0xfffff000
c001037a:	89 04 24             	mov    DWORD PTR [esp],eax
c001037d:	e8 d1 03 00 00       	call   c0010753 <Phys::physicalMemorySetup(unsigned int)>
c0010382:	e8 fc 20 00 00       	call   c0012483 <Virt::virtualMemorySetup()>
c0010387:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c001038d:	83 c4 10             	add    esp,0x10
c0010390:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c0010396:	75 0e                	jne    c00103a6 <kernel_main+0x92>
c0010398:	89 d8                	mov    eax,ebx
c001039a:	25 48 03 00 00       	and    eax,0x348
c001039f:	3d 00 03 00 00       	cmp    eax,0x300
c00103a4:	74 10                	je     c00103b6 <kernel_main+0xa2>
c00103a6:	83 ec 0c             	sub    esp,0xc
c00103a9:	68 ab d3 02 c0       	push   0xc002d3ab
c00103ae:	e8 48 a4 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c00103b3:	83 c4 10             	add    esp,0x10
c00103b6:	83 ec 0c             	sub    esp,0xc
c00103b9:	89 1d a4 13 03 c0    	mov    DWORD PTR ds:0xc00313a4,ebx
c00103bf:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00103c3:	53                   	push   ebx
c00103c4:	e8 87 24 00 00       	call   c0012850 <VAS::VAS()>
c00103c9:	89 1d 04 15 03 c0    	mov    DWORD PTR ds:0xc0031504,ebx
c00103cf:	e8 4c fc fe ff       	call   c0000020 <callGlobalConstructors>
c00103d4:	c7 04 24 5f a8 02 c0 	mov    DWORD PTR [esp],0xc002a85f
c00103db:	e8 66 2e 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00103e0:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c00103e7:	e8 70 fb ff ff       	call   c000ff5c <malloc>
c00103ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00103ef:	89 c6                	mov    esi,eax
c00103f1:	e8 2a e9 ff ff       	call   c000ed20 <Computer::Computer()>
c00103f6:	58                   	pop    eax
c00103f7:	89 35 90 13 03 c0    	mov    DWORD PTR ds:0xc0031390,esi
c00103fd:	5a                   	pop    edx
c00103fe:	56                   	push   esi
c00103ff:	68 7c a8 02 c0       	push   0xc002a87c
c0010404:	e8 3d 2e 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0010409:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c001040e:	8b 10                	mov    edx,DWORD PTR [eax]
c0010410:	6a 00                	push   0x0
c0010412:	6a 00                	push   0x0
c0010414:	6a 00                	push   0x0
c0010416:	50                   	push   eax
c0010417:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001041a:	83 c4 14             	add    esp,0x14
c001041d:	53                   	push   ebx
c001041e:	e8 5d 24 00 00       	call   c0012880 <VAS::~VAS()>
c0010423:	c7 04 24 8f a8 02 c0 	mov    DWORD PTR [esp],0xc002a88f
c001042a:	e8 cc a3 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c001042f:	83 c4 20             	add    esp,0x20
c0010432:	5b                   	pop    ebx
c0010433:	5e                   	pop    esi
c0010434:	5f                   	pop    edi
c0010435:	c3                   	ret    

c0010436 <Phys::allocateDMA(unsigned long)>:
c0010436:	55                   	push   ebp
c0010437:	31 d2                	xor    edx,edx
c0010439:	57                   	push   edi
c001043a:	31 ed                	xor    ebp,ebp
c001043c:	56                   	push   esi
c001043d:	31 c9                	xor    ecx,ecx
c001043f:	53                   	push   ebx
c0010440:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010444:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001044a:	31 c0                	xor    eax,eax
c001044c:	c1 ee 0c             	shr    esi,0xc
c001044f:	eb 17                	jmp    c0010468 <Phys::allocateDMA(unsigned long)+0x32>
c0010451:	85 c9                	test   ecx,ecx
c0010453:	75 04                	jne    c0010459 <Phys::allocateDMA(unsigned long)+0x23>
c0010455:	89 d5                	mov    ebp,edx
c0010457:	89 d0                	mov    eax,edx
c0010459:	8d 59 01             	lea    ebx,[ecx+0x1]
c001045c:	39 de                	cmp    esi,ebx
c001045e:	74 20                	je     c0010480 <Phys::allocateDMA(unsigned long)+0x4a>
c0010460:	42                   	inc    edx
c0010461:	89 d9                	mov    ecx,ebx
c0010463:	83 fa 2f             	cmp    edx,0x2f
c0010466:	7f 11                	jg     c0010479 <Phys::allocateDMA(unsigned long)+0x43>
c0010468:	80 ba c0 13 03 c0 00 	cmp    BYTE PTR [edx-0x3ffcec40],0x0
c001046f:	74 e0                	je     c0010451 <Phys::allocateDMA(unsigned long)+0x1b>
c0010471:	31 c9                	xor    ecx,ecx
c0010473:	42                   	inc    edx
c0010474:	83 fa 2f             	cmp    edx,0x2f
c0010477:	7e ef                	jle    c0010468 <Phys::allocateDMA(unsigned long)+0x32>
c0010479:	5b                   	pop    ebx
c001047a:	31 c0                	xor    eax,eax
c001047c:	5e                   	pop    esi
c001047d:	5f                   	pop    edi
c001047e:	5d                   	pop    ebp
c001047f:	c3                   	ret    
c0010480:	8d 14 30             	lea    edx,[eax+esi*1]
c0010483:	89 d7                	mov    edi,edx
c0010485:	4f                   	dec    edi
c0010486:	79 03                	jns    c001048b <Phys::allocateDMA(unsigned long)+0x55>
c0010488:	8d 7a 0e             	lea    edi,[edx+0xe]
c001048b:	c1 ff 04             	sar    edi,0x4
c001048e:	89 c2                	mov    edx,eax
c0010490:	c1 fa 04             	sar    edx,0x4
c0010493:	39 fa                	cmp    edx,edi
c0010495:	75 2f                	jne    c00104c6 <Phys::allocateDMA(unsigned long)+0x90>
c0010497:	85 db                	test   ebx,ebx
c0010499:	74 1a                	je     c00104b5 <Phys::allocateDMA(unsigned long)+0x7f>
c001049b:	be c0 13 03 c0       	mov    esi,0xc00313c0
c00104a0:	8d 90 c0 13 03 c0    	lea    edx,[eax-0x3ffcec40]
c00104a6:	f7 d6                	not    esi
c00104a8:	29 c6                	sub    esi,eax
c00104aa:	c6 02 01             	mov    BYTE PTR [edx],0x1
c00104ad:	42                   	inc    edx
c00104ae:	8d 1c 16             	lea    ebx,[esi+edx*1]
c00104b1:	39 d9                	cmp    ecx,ebx
c00104b3:	7f f5                	jg     c00104aa <Phys::allocateDMA(unsigned long)+0x74>
c00104b5:	85 ff                	test   edi,edi
c00104b7:	74 13                	je     c00104cc <Phys::allocateDMA(unsigned long)+0x96>
c00104b9:	5b                   	pop    ebx
c00104ba:	05 50 20 0c 00       	add    eax,0xc2050
c00104bf:	5e                   	pop    esi
c00104c0:	c1 e0 0c             	shl    eax,0xc
c00104c3:	5f                   	pop    edi
c00104c4:	5d                   	pop    ebp
c00104c5:	c3                   	ret    
c00104c6:	89 ea                	mov    edx,ebp
c00104c8:	31 c9                	xor    ecx,ecx
c00104ca:	eb a7                	jmp    c0010473 <Phys::allocateDMA(unsigned long)+0x3d>
c00104cc:	5b                   	pop    ebx
c00104cd:	c1 e0 0c             	shl    eax,0xc
c00104d0:	5e                   	pop    esi
c00104d1:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c00104d6:	5f                   	pop    edi
c00104d7:	5d                   	pop    ebp
c00104d8:	c3                   	ret    

c00104d9 <Phys::freeDMA(unsigned long, unsigned long)>:
c00104d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104dd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00104e1:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c00104e7:	c1 e9 0c             	shr    ecx,0xc
c00104ea:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c00104ef:	76 25                	jbe    c0010516 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c00104f1:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c00104f6:	c1 e8 0c             	shr    eax,0xc
c00104f9:	8d 50 10             	lea    edx,[eax+0x10]
c00104fc:	85 c9                	test   ecx,ecx
c00104fe:	74 15                	je     c0010515 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c0010500:	8d 82 c0 13 03 c0    	lea    eax,[edx-0x3ffcec40]
c0010506:	8d 94 11 c0 13 03 c0 	lea    edx,[ecx+edx*1-0x3ffcec40]
c001050d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0010510:	40                   	inc    eax
c0010511:	39 d0                	cmp    eax,edx
c0010513:	75 f8                	jne    c001050d <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c0010515:	c3                   	ret    
c0010516:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c001051c:	c1 ea 0c             	shr    edx,0xc
c001051f:	eb db                	jmp    c00104fc <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c0010521 <Phys::setPageState(unsigned long, bool)>:
c0010521:	56                   	push   esi
c0010522:	ba 01 00 00 00       	mov    edx,0x1
c0010527:	53                   	push   ebx
c0010528:	8b 35 ec 02 03 c0    	mov    esi,DWORD PTR ds:0xc00302ec
c001052e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010532:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010536:	89 c8                	mov    eax,ecx
c0010538:	83 e1 07             	and    ecx,0x7
c001053b:	c1 e8 03             	shr    eax,0x3
c001053e:	d3 e3                	shl    ebx,cl
c0010540:	01 c6                	add    esi,eax
c0010542:	d3 e2                	shl    edx,cl
c0010544:	f7 d2                	not    edx
c0010546:	20 16                	and    BYTE PTR [esi],dl
c0010548:	03 05 ec 02 03 c0    	add    eax,DWORD PTR ds:0xc00302ec
c001054e:	08 18                	or     BYTE PTR [eax],bl
c0010550:	5b                   	pop    ebx
c0010551:	5e                   	pop    esi
c0010552:	c3                   	ret    

c0010553 <Phys::getPageState(unsigned long)>:
c0010553:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0010557:	8b 15 ec 02 03 c0    	mov    edx,DWORD PTR ds:0xc00302ec
c001055d:	89 c8                	mov    eax,ecx
c001055f:	83 e1 07             	and    ecx,0x7
c0010562:	c1 e8 03             	shr    eax,0x3
c0010565:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0010569:	d3 f8                	sar    eax,cl
c001056b:	83 e0 01             	and    eax,0x1
c001056e:	c3                   	ret    

c001056f <Phys::freePage(unsigned long)>:
c001056f:	53                   	push   ebx
c0010570:	83 ec 08             	sub    esp,0x8
c0010573:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010577:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c001057d:	76 57                	jbe    c00105d6 <Phys::freePage(unsigned long)+0x67>
c001057f:	c1 eb 0c             	shr    ebx,0xc
c0010582:	53                   	push   ebx
c0010583:	e8 cb ff ff ff       	call   c0010553 <Phys::getPageState(unsigned long)>
c0010588:	5a                   	pop    edx
c0010589:	84 c0                	test   al,al
c001058b:	74 5b                	je     c00105e8 <Phys::freePage(unsigned long)+0x79>
c001058d:	a1 f4 13 03 c0       	mov    eax,ds:0xc00313f4
c0010592:	48                   	dec    eax
c0010593:	a3 f4 13 03 c0       	mov    ds:0xc00313f4,eax
c0010598:	8d 04 80             	lea    eax,[eax+eax*4]
c001059b:	8d 04 80             	lea    eax,[eax+eax*4]
c001059e:	c1 e0 02             	shl    eax,0x2
c00105a1:	99                   	cdq    
c00105a2:	f7 3d f0 13 03 c0    	idiv   DWORD PTR ds:0xc00313f0
c00105a8:	39 05 f8 13 03 c0    	cmp    DWORD PTR ds:0xc00313f8,eax
c00105ae:	75 13                	jne    c00105c3 <Phys::freePage(unsigned long)+0x54>
c00105b0:	83 ec 08             	sub    esp,0x8
c00105b3:	6a 00                	push   0x0
c00105b5:	53                   	push   ebx
c00105b6:	e8 66 ff ff ff       	call   c0010521 <Phys::setPageState(unsigned long, bool)>
c00105bb:	83 c4 10             	add    esp,0x10
c00105be:	83 c4 08             	add    esp,0x8
c00105c1:	5b                   	pop    ebx
c00105c2:	c3                   	ret    
c00105c3:	83 ec 0c             	sub    esp,0xc
c00105c6:	a3 f8 13 03 c0       	mov    ds:0xc00313f8,eax
c00105cb:	50                   	push   eax
c00105cc:	e8 b7 0f 00 00       	call   c0011588 <VgaText::updateRAMUsageDisplay(int)>
c00105d1:	83 c4 10             	add    esp,0x10
c00105d4:	eb da                	jmp    c00105b0 <Phys::freePage(unsigned long)+0x41>
c00105d6:	68 00 10 00 00       	push   0x1000
c00105db:	53                   	push   ebx
c00105dc:	e8 f8 fe ff ff       	call   c00104d9 <Phys::freeDMA(unsigned long, unsigned long)>
c00105e1:	59                   	pop    ecx
c00105e2:	5b                   	pop    ebx
c00105e3:	83 c4 08             	add    esp,0x8
c00105e6:	5b                   	pop    ebx
c00105e7:	c3                   	ret    
c00105e8:	c7 44 24 10 4c a9 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a94c
c00105f0:	83 c4 08             	add    esp,0x8
c00105f3:	5b                   	pop    ebx
c00105f4:	e9 02 a2 00 00       	jmp    c001a7fb <Krnl::panic(char const*)>

c00105f9 <Phys::allocatePage()>:
c00105f9:	56                   	push   esi
c00105fa:	53                   	push   ebx
c00105fb:	51                   	push   ecx
c00105fc:	8b 35 00 14 03 c0    	mov    esi,DWORD PTR ds:0xc0031400
c0010602:	89 f3                	mov    ebx,esi
c0010604:	eb 0a                	jmp    c0010610 <Phys::allocatePage()+0x17>
c0010606:	89 1d 00 14 03 c0    	mov    DWORD PTR ds:0xc0031400,ebx
c001060c:	39 de                	cmp    esi,ebx
c001060e:	74 24                	je     c0010634 <Phys::allocatePage()+0x3b>
c0010610:	53                   	push   ebx
c0010611:	e8 3d ff ff ff       	call   c0010553 <Phys::getPageState(unsigned long)>
c0010616:	5a                   	pop    edx
c0010617:	84 c0                	test   al,al
c0010619:	74 5a                	je     c0010675 <Phys::allocatePage()+0x7c>
c001061b:	43                   	inc    ebx
c001061c:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010622:	75 e2                	jne    c0010606 <Phys::allocatePage()+0xd>
c0010624:	31 db                	xor    ebx,ebx
c0010626:	c7 05 00 14 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031400,0x0
c0010630:	39 de                	cmp    esi,ebx
c0010632:	75 dc                	jne    c0010610 <Phys::allocatePage()+0x17>
c0010634:	83 ec 0c             	sub    esp,0xc
c0010637:	68 62 a9 02 c0       	push   0xc002a962
c001063c:	e8 05 2c 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0010641:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c0010648:	e8 e9 fd ff ff       	call   c0010436 <Phys::allocateDMA(unsigned long)>
c001064d:	83 c4 10             	add    esp,0x10
c0010650:	85 c0                	test   eax,eax
c0010652:	75 56                	jne    c00106aa <Phys::allocatePage()+0xb1>
c0010654:	83 ec 0c             	sub    esp,0xc
c0010657:	68 73 a9 02 c0       	push   0xc002a973
c001065c:	e8 9a a1 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c0010661:	83 c4 10             	add    esp,0x10
c0010664:	8b 1d 00 14 03 c0    	mov    ebx,DWORD PTR ds:0xc0031400
c001066a:	53                   	push   ebx
c001066b:	e8 e3 fe ff ff       	call   c0010553 <Phys::getPageState(unsigned long)>
c0010670:	5a                   	pop    edx
c0010671:	84 c0                	test   al,al
c0010673:	75 a6                	jne    c001061b <Phys::allocatePage()+0x22>
c0010675:	6a 01                	push   0x1
c0010677:	53                   	push   ebx
c0010678:	e8 a4 fe ff ff       	call   c0010521 <Phys::setPageState(unsigned long, bool)>
c001067d:	a1 f4 13 03 c0       	mov    eax,ds:0xc00313f4
c0010682:	59                   	pop    ecx
c0010683:	40                   	inc    eax
c0010684:	5b                   	pop    ebx
c0010685:	a3 f4 13 03 c0       	mov    ds:0xc00313f4,eax
c001068a:	8d 04 80             	lea    eax,[eax+eax*4]
c001068d:	8d 04 80             	lea    eax,[eax+eax*4]
c0010690:	c1 e0 02             	shl    eax,0x2
c0010693:	99                   	cdq    
c0010694:	f7 3d f0 13 03 c0    	idiv   DWORD PTR ds:0xc00313f0
c001069a:	39 05 f8 13 03 c0    	cmp    DWORD PTR ds:0xc00313f8,eax
c00106a0:	75 0c                	jne    c00106ae <Phys::allocatePage()+0xb5>
c00106a2:	a1 00 14 03 c0       	mov    eax,ds:0xc0031400
c00106a7:	c1 e0 0c             	shl    eax,0xc
c00106aa:	5a                   	pop    edx
c00106ab:	5b                   	pop    ebx
c00106ac:	5e                   	pop    esi
c00106ad:	c3                   	ret    
c00106ae:	83 ec 0c             	sub    esp,0xc
c00106b1:	a3 f8 13 03 c0       	mov    ds:0xc00313f8,eax
c00106b6:	50                   	push   eax
c00106b7:	e8 cc 0e 00 00       	call   c0011588 <VgaText::updateRAMUsageDisplay(int)>
c00106bc:	83 c4 10             	add    esp,0x10
c00106bf:	eb e1                	jmp    c00106a2 <Phys::allocatePage()+0xa9>

c00106c1 <Phys::allocateContiguousPages(int)>:
c00106c1:	57                   	push   edi
c00106c2:	56                   	push   esi
c00106c3:	53                   	push   ebx
c00106c4:	31 db                	xor    ebx,ebx
c00106c6:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00106ca:	e8 d7 d9 00 00       	call   c001e0a6 <lockScheduler()>
c00106cf:	85 db                	test   ebx,ebx
c00106d1:	75 11                	jne    c00106e4 <Phys::allocateContiguousPages(int)+0x23>
c00106d3:	e8 21 ff ff ff       	call   c00105f9 <Phys::allocatePage()>
c00106d8:	83 ff 01             	cmp    edi,0x1
c00106db:	89 c6                	mov    esi,eax
c00106dd:	74 21                	je     c0010700 <Phys::allocateContiguousPages(int)+0x3f>
c00106df:	bb 01 00 00 00       	mov    ebx,0x1
c00106e4:	e8 10 ff ff ff       	call   c00105f9 <Phys::allocatePage()>
c00106e9:	89 da                	mov    edx,ebx
c00106eb:	c1 e2 0c             	shl    edx,0xc
c00106ee:	01 f2                	add    edx,esi
c00106f0:	39 c2                	cmp    edx,eax
c00106f2:	74 17                	je     c001070b <Phys::allocateContiguousPages(int)+0x4a>
c00106f4:	bb 01 00 00 00       	mov    ebx,0x1
c00106f9:	89 c6                	mov    esi,eax
c00106fb:	83 ff 01             	cmp    edi,0x1
c00106fe:	75 e4                	jne    c00106e4 <Phys::allocateContiguousPages(int)+0x23>
c0010700:	e8 a3 d9 00 00       	call   c001e0a8 <unlockScheduler()>
c0010705:	89 f0                	mov    eax,esi
c0010707:	5b                   	pop    ebx
c0010708:	5e                   	pop    esi
c0010709:	5f                   	pop    edi
c001070a:	c3                   	ret    
c001070b:	43                   	inc    ebx
c001070c:	39 fb                	cmp    ebx,edi
c001070e:	75 bf                	jne    c00106cf <Phys::allocateContiguousPages(int)+0xe>
c0010710:	e8 93 d9 00 00       	call   c001e0a8 <unlockScheduler()>
c0010715:	89 f0                	mov    eax,esi
c0010717:	5b                   	pop    ebx
c0010718:	5e                   	pop    esi
c0010719:	5f                   	pop    edi
c001071a:	c3                   	ret    

c001071b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c001071b:	56                   	push   esi
c001071c:	53                   	push   ebx
c001071d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010721:	39 1d fc 13 03 c0    	cmp    DWORD PTR ds:0xc00313fc,ebx
c0010727:	73 06                	jae    c001072f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010729:	89 1d fc 13 03 c0    	mov    DWORD PTR ds:0xc00313fc,ebx
c001072f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010733:	c1 eb 0c             	shr    ebx,0xc
c0010736:	c1 e8 0c             	shr    eax,0xc
c0010739:	39 d8                	cmp    eax,ebx
c001073b:	73 13                	jae    c0010750 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001073d:	6a 00                	push   0x0
c001073f:	8d 70 01             	lea    esi,[eax+0x1]
c0010742:	50                   	push   eax
c0010743:	e8 d9 fd ff ff       	call   c0010521 <Phys::setPageState(unsigned long, bool)>
c0010748:	5a                   	pop    edx
c0010749:	89 f0                	mov    eax,esi
c001074b:	59                   	pop    ecx
c001074c:	39 f3                	cmp    ebx,esi
c001074e:	75 ed                	jne    c001073d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010750:	5b                   	pop    ebx
c0010751:	5e                   	pop    esi
c0010752:	c3                   	ret    

c0010753 <Phys::physicalMemorySetup(unsigned int)>:
c0010753:	55                   	push   ebp
c0010754:	57                   	push   edi
c0010755:	56                   	push   esi
c0010756:	53                   	push   ebx
c0010757:	31 db                	xor    ebx,ebx
c0010759:	83 ec 40             	sub    esp,0x40
c001075c:	6a 30                	push   0x30
c001075e:	6a 00                	push   0x0
c0010760:	68 c0 13 03 c0       	push   0xc00313c0
c0010765:	e8 5a ff fe ff       	call   c00006c4 <memset>
c001076a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001076e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010773:	05 00 10 00 00       	add    eax,0x1000
c0010778:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001077c:	83 c4 10             	add    esp,0x10
c001077f:	83 ec 08             	sub    esp,0x8
c0010782:	6a 01                	push   0x1
c0010784:	53                   	push   ebx
c0010785:	43                   	inc    ebx
c0010786:	e8 96 fd ff ff       	call   c0010521 <Phys::setPageState(unsigned long, bool)>
c001078b:	83 c4 10             	add    esp,0x10
c001078e:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010794:	75 e9                	jne    c001077f <Phys::physicalMemorySetup(unsigned int)+0x2c>
c0010796:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c001079d:	66 85 c0             	test   ax,ax
c00107a0:	0f 84 8e 01 00 00    	je     c0010934 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00107a6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00107aa:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00107b2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00107b6:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00107bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00107bf:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00107c7:	eb 15                	jmp    c00107de <Phys::physicalMemorySetup(unsigned int)+0x8b>
c00107c9:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00107cd:	83 c3 18             	add    ebx,0x18
c00107d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00107d4:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00107d8:	0f 84 66 01 00 00    	je     c0010944 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00107de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00107e1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00107e4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00107e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00107eb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00107ef:	8b 33                	mov    esi,DWORD PTR [ebx]
c00107f1:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00107f4:	01 f0                	add    eax,esi
c00107f6:	55                   	push   ebp
c00107f7:	11 fa                	adc    edx,edi
c00107f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00107fd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010801:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010805:	56                   	push   esi
c0010806:	68 ac a9 02 c0       	push   0xc002a9ac
c001080b:	e8 36 2a 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0010810:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010814:	83 c4 10             	add    esp,0x10
c0010817:	09 f8                	or     eax,edi
c0010819:	0f 85 25 01 00 00    	jne    c0010944 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c001081f:	4d                   	dec    ebp
c0010820:	75 a7                	jne    c00107c9 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010822:	ba 00 00 08 00       	mov    edx,0x80000
c0010827:	89 c1                	mov    ecx,eax
c0010829:	39 f2                	cmp    edx,esi
c001082b:	19 f9                	sbb    ecx,edi
c001082d:	0f 82 a7 00 00 00    	jb     c00108da <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010833:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010837:	89 c1                	mov    ecx,eax
c0010839:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c001083d:	0f 83 97 00 00 00    	jae    c00108da <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010843:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010848:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001084c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010850:	39 fa                	cmp    edx,edi
c0010852:	19 e8                	sbb    eax,ebp
c0010854:	0f 82 14 01 00 00    	jb     c001096e <Phys::physicalMemorySetup(unsigned int)+0x21b>
c001085a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001085e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010862:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010868:	ba ff 1f 00 00       	mov    edx,0x1fff
c001086d:	83 d5 ff             	adc    ebp,0xffffffff
c0010870:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010874:	31 c0                	xor    eax,eax
c0010876:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c001087a:	39 fa                	cmp    edx,edi
c001087c:	89 c1                	mov    ecx,eax
c001087e:	19 e9                	sbb    ecx,ebp
c0010880:	0f 83 43 ff ff ff    	jae    c00107c9 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010886:	be 00 00 08 00       	mov    esi,0x80000
c001088b:	50                   	push   eax
c001088c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010890:	57                   	push   edi
c0010891:	56                   	push   esi
c0010892:	68 d0 a9 02 c0       	push   0xc002a9d0
c0010897:	e8 aa 29 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001089c:	5a                   	pop    edx
c001089d:	59                   	pop    ecx
c001089e:	57                   	push   edi
c001089f:	56                   	push   esi
c00108a0:	e8 76 fe ff ff       	call   c001071b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00108a5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00108a9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00108ad:	83 c4 0c             	add    esp,0xc
c00108b0:	0f ac d0 0c          	shrd   eax,edx,0xc
c00108b4:	03 05 f0 13 03 c0    	add    eax,DWORD PTR ds:0xc00313f0
c00108ba:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00108c1:	a3 f0 13 03 c0       	mov    ds:0xc00313f0,eax
c00108c6:	52                   	push   edx
c00108c7:	50                   	push   eax
c00108c8:	68 8f a9 02 c0       	push   0xc002a98f
c00108cd:	e8 74 29 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00108d2:	83 c4 10             	add    esp,0x10
c00108d5:	e9 ef fe ff ff       	jmp    c00107c9 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00108da:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00108de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00108e6:	39 ea                	cmp    edx,ebp
c00108e8:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00108ec:	0f 82 d7 fe ff ff    	jb     c00107c9 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00108f2:	ba ff 1f 00 00       	mov    edx,0x1fff
c00108f7:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00108fb:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00108ff:	0f 83 c4 fe ff ff    	jae    c00107c9 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010905:	39 ee                	cmp    esi,ebp
c0010907:	89 f8                	mov    eax,edi
c0010909:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c001090d:	0f 83 78 ff ff ff    	jae    c001088b <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010913:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010917:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001091b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001091f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010923:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010927:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001092b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001092f:	e9 57 ff ff ff       	jmp    c001088b <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010934:	83 ec 0c             	sub    esp,0xc
c0010937:	68 81 a9 02 c0       	push   0xc002a981
c001093c:	e8 ba 9e 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c0010941:	83 c4 10             	add    esp,0x10
c0010944:	bb 40 01 00 00       	mov    ebx,0x140
c0010949:	83 ec 08             	sub    esp,0x8
c001094c:	6a 00                	push   0x0
c001094e:	53                   	push   ebx
c001094f:	43                   	inc    ebx
c0010950:	e8 cc fb ff ff       	call   c0010521 <Phys::setPageState(unsigned long, bool)>
c0010955:	ff 05 f0 13 03 c0    	inc    DWORD PTR ds:0xc00313f0
c001095b:	83 c4 10             	add    esp,0x10
c001095e:	81 fb 80 01 00 00    	cmp    ebx,0x180
c0010964:	75 e3                	jne    c0010949 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0010966:	83 c4 3c             	add    esp,0x3c
c0010969:	5b                   	pop    ebx
c001096a:	5e                   	pop    esi
c001096b:	5f                   	pop    edi
c001096c:	5d                   	pop    ebp
c001096d:	c3                   	ret    
c001096e:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010976:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001097e:	e9 d7 fe ff ff       	jmp    c001085a <Phys::physicalMemorySetup(unsigned int)+0x107>
c0010983:	90                   	nop

c0010984 <Pipe::Pipe(int)>:
c0010984:	83 ec 0c             	sub    esp,0xc
c0010987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001098b:	83 ec 08             	sub    esp,0x8
c001098e:	6a 00                	push   0x0
c0010990:	50                   	push   eax
c0010991:	e8 9c 13 00 00       	call   c0011d32 <UnixFile::UnixFile(int)>
c0010996:	83 c4 10             	add    esp,0x10
c0010999:	ba e0 aa 02 c0       	mov    edx,0xc002aae0
c001099e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a2:	89 10                	mov    DWORD PTR [eax],edx
c00109a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00109ac:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00109af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b3:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00109ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109be:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00109c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00109c9:	83 ec 0c             	sub    esp,0xc
c00109cc:	50                   	push   eax
c00109cd:	e8 8a f5 ff ff       	call   c000ff5c <malloc>
c00109d2:	83 c4 10             	add    esp,0x10
c00109d5:	89 c2                	mov    edx,eax
c00109d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109db:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00109de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109e2:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00109e6:	90                   	nop
c00109e7:	83 c4 0c             	add    esp,0xc
c00109ea:	c3                   	ret    
c00109eb:	90                   	nop

c00109ec <Pipe::~Pipe()>:
c00109ec:	83 ec 0c             	sub    esp,0xc
c00109ef:	ba e0 aa 02 c0       	mov    edx,0xc002aae0
c00109f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109f8:	89 10                	mov    DWORD PTR [eax],edx
c00109fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109fe:	83 ec 0c             	sub    esp,0xc
c0010a01:	50                   	push   eax
c0010a02:	e8 db 14 00 00       	call   c0011ee2 <UnixFile::~UnixFile()>
c0010a07:	83 c4 10             	add    esp,0x10
c0010a0a:	90                   	nop
c0010a0b:	83 c4 0c             	add    esp,0xc
c0010a0e:	c3                   	ret    
c0010a0f:	90                   	nop

c0010a10 <Pipe::~Pipe()>:
c0010a10:	83 ec 0c             	sub    esp,0xc
c0010a13:	83 ec 0c             	sub    esp,0xc
c0010a16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a1a:	e8 cd ff ff ff       	call   c00109ec <Pipe::~Pipe()>
c0010a1f:	83 c4 10             	add    esp,0x10
c0010a22:	83 ec 08             	sub    esp,0x8
c0010a25:	6a 20                	push   0x20
c0010a27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a2b:	e8 36 27 00 00       	call   c0013166 <operator delete(void*, unsigned long)>
c0010a30:	83 c4 10             	add    esp,0x10
c0010a33:	83 c4 0c             	add    esp,0xc
c0010a36:	c3                   	ret    
c0010a37:	90                   	nop

c0010a38 <Pipe::isAtty()>:
c0010a38:	31 c0                	xor    eax,eax
c0010a3a:	c3                   	ret    
c0010a3b:	90                   	nop

c0010a3c <Pipe::read(unsigned long long, void*, int*)>:
c0010a3c:	55                   	push   ebp
c0010a3d:	57                   	push   edi
c0010a3e:	56                   	push   esi
c0010a3f:	53                   	push   ebx
c0010a40:	83 ec 1c             	sub    esp,0x1c
c0010a43:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010a47:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010a4b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010a4f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010a52:	89 c8                	mov    eax,ecx
c0010a54:	99                   	cdq    
c0010a55:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010a59:	74 19                	je     c0010a74 <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010a5b:	39 f9                	cmp    ecx,edi
c0010a5d:	89 d1                	mov    ecx,edx
c0010a5f:	19 f1                	sbb    ecx,esi
c0010a61:	73 11                	jae    c0010a74 <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010a63:	e8 3e d6 00 00       	call   c001e0a6 <lockScheduler()>
c0010a68:	e8 a4 d6 00 00       	call   c001e111 <schedule()>
c0010a6d:	e8 36 d6 00 00       	call   c001e0a8 <unlockScheduler()>
c0010a72:	eb db                	jmp    c0010a4f <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010a74:	39 f8                	cmp    eax,edi
c0010a76:	89 d1                	mov    ecx,edx
c0010a78:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010a7c:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010a80:	19 f1                	sbb    ecx,esi
c0010a82:	73 08                	jae    c0010a8c <Pipe::read(unsigned long long, void*, int*)+0x50>
c0010a84:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010a88:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010a8c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010a8f:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010a92:	29 c6                	sub    esi,eax
c0010a94:	89 f1                	mov    ecx,esi
c0010a96:	c1 f9 1f             	sar    ecx,0x1f
c0010a99:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010a9d:	89 ca                	mov    edx,ecx
c0010a9f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010aa3:	19 d1                	sbb    ecx,edx
c0010aa5:	73 04                	jae    c0010aab <Pipe::read(unsigned long long, void*, int*)+0x6f>
c0010aa7:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0010aab:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010aaf:	89 fd                	mov    ebp,edi
c0010ab1:	29 f5                	sub    ebp,esi
c0010ab3:	85 f6                	test   esi,esi
c0010ab5:	74 12                	je     c0010ac9 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c0010ab7:	52                   	push   edx
c0010ab8:	56                   	push   esi
c0010ab9:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c0010abc:	50                   	push   eax
c0010abd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010ac1:	e8 da fb fe ff       	call   c00006a0 <memcpy>
c0010ac6:	83 c4 10             	add    esp,0x10
c0010ac9:	85 ed                	test   ebp,ebp
c0010acb:	74 12                	je     c0010adf <Pipe::read(unsigned long long, void*, int*)+0xa3>
c0010acd:	50                   	push   eax
c0010ace:	55                   	push   ebp
c0010acf:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0010ad2:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c0010ad6:	56                   	push   esi
c0010ad7:	e8 c4 fb fe ff       	call   c00006a0 <memcpy>
c0010adc:	83 c4 10             	add    esp,0x10
c0010adf:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c0010ae2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010ae5:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010ae8:	99                   	cdq    
c0010ae9:	89 f7                	mov    edi,esi
c0010aeb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010aef:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010af3:	c1 ff 1f             	sar    edi,0x1f
c0010af6:	57                   	push   edi
c0010af7:	56                   	push   esi
c0010af8:	52                   	push   edx
c0010af9:	50                   	push   eax
c0010afa:	e8 dd 60 01 00       	call   c0026bdc <__umoddi3>
c0010aff:	83 c4 10             	add    esp,0x10
c0010b02:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010b05:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010b0a:	75 10                	jne    c0010b1c <Pipe::read(unsigned long long, void*, int*)+0xe0>
c0010b0c:	83 ec 0c             	sub    esp,0xc
c0010b0f:	68 9c aa 02 c0       	push   0xc002aa9c
c0010b14:	e8 e2 9c 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c0010b19:	83 c4 10             	add    esp,0x10
c0010b1c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010b20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b24:	89 10                	mov    DWORD PTR [eax],edx
c0010b26:	83 c4 1c             	add    esp,0x1c
c0010b29:	31 c0                	xor    eax,eax
c0010b2b:	5b                   	pop    ebx
c0010b2c:	5e                   	pop    esi
c0010b2d:	5f                   	pop    edi
c0010b2e:	5d                   	pop    ebp
c0010b2f:	c3                   	ret    

c0010b30 <Pipe::write(unsigned long long, void*, int*)>:
c0010b30:	55                   	push   ebp
c0010b31:	57                   	push   edi
c0010b32:	56                   	push   esi
c0010b33:	53                   	push   ebx
c0010b34:	83 ec 1c             	sub    esp,0x1c
c0010b37:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010b3b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010b3f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010b43:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b46:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0010b49:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0010b4c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010b50:	89 de                	mov    esi,ebx
c0010b52:	89 df                	mov    edi,ebx
c0010b54:	c1 ff 1f             	sar    edi,0x1f
c0010b57:	01 c6                	add    esi,eax
c0010b59:	89 c8                	mov    eax,ecx
c0010b5b:	11 d7                	adc    edi,edx
c0010b5d:	99                   	cdq    
c0010b5e:	39 f1                	cmp    ecx,esi
c0010b60:	89 d0                	mov    eax,edx
c0010b62:	19 f8                	sbb    eax,edi
c0010b64:	b8 01 00 00 00       	mov    eax,0x1
c0010b69:	0f 82 80 00 00 00    	jb     c0010bef <Pipe::write(unsigned long long, void*, int*)+0xbf>
c0010b6f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010b72:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0010b75:	01 d8                	add    eax,ebx
c0010b77:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0010b7b:	99                   	cdq    
c0010b7c:	f7 f9                	idiv   ecx
c0010b7e:	29 d1                	sub    ecx,edx
c0010b80:	89 d7                	mov    edi,edx
c0010b82:	89 c8                	mov    eax,ecx
c0010b84:	99                   	cdq    
c0010b85:	39 ce                	cmp    esi,ecx
c0010b87:	19 d3                	sbb    ebx,edx
c0010b89:	bb 00 00 00 00       	mov    ebx,0x0
c0010b8e:	72 04                	jb     c0010b94 <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010b90:	89 f3                	mov    ebx,esi
c0010b92:	29 cb                	sub    ebx,ecx
c0010b94:	89 f1                	mov    ecx,esi
c0010b96:	29 d9                	sub    ecx,ebx
c0010b98:	74 1a                	je     c0010bb4 <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010b9a:	52                   	push   edx
c0010b9b:	51                   	push   ecx
c0010b9c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010ba0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010ba4:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010ba7:	57                   	push   edi
c0010ba8:	e8 f3 fa fe ff       	call   c00006a0 <memcpy>
c0010bad:	83 c4 10             	add    esp,0x10
c0010bb0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010bb4:	85 db                	test   ebx,ebx
c0010bb6:	74 12                	je     c0010bca <Pipe::write(unsigned long long, void*, int*)+0x9a>
c0010bb8:	50                   	push   eax
c0010bb9:	53                   	push   ebx
c0010bba:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c0010bbe:	51                   	push   ecx
c0010bbf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0010bc2:	e8 d9 fa fe ff       	call   c00006a0 <memcpy>
c0010bc7:	83 c4 10             	add    esp,0x10
c0010bca:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c0010bcd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010bd2:	75 10                	jne    c0010be4 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c0010bd4:	83 ec 0c             	sub    esp,0xc
c0010bd7:	68 b8 aa 02 c0       	push   0xc002aab8
c0010bdc:	e8 1a 9c 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c0010be1:	83 c4 10             	add    esp,0x10
c0010be4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010be8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0010beb:	89 38                	mov    DWORD PTR [eax],edi
c0010bed:	31 c0                	xor    eax,eax
c0010bef:	83 c4 1c             	add    esp,0x1c
c0010bf2:	5b                   	pop    ebx
c0010bf3:	5e                   	pop    esi
c0010bf4:	5f                   	pop    edi
c0010bf5:	5d                   	pop    ebp
c0010bf6:	c3                   	ret    
c0010bf7:	90                   	nop

c0010bf8 <setTerminalScrollLock(bool)>:
c0010bf8:	c3                   	ret    

c0010bf9 <doTerminalCycle()>:
c0010bf9:	83 ec 18             	sub    esp,0x18
c0010bfc:	a1 28 14 03 c0       	mov    eax,ds:0xc0031428
c0010c01:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010c07:	50                   	push   eax
c0010c08:	a3 28 14 03 c0       	mov    ds:0xc0031428,eax
c0010c0d:	e8 31 00 00 00       	call   c0010c43 <setActiveTerminal(VgaText*)>
c0010c12:	83 c4 1c             	add    esp,0x1c
c0010c15:	c3                   	ret    

c0010c16 <addToTerminalCycle(VgaText*)>:
c0010c16:	8b 15 28 14 03 c0    	mov    edx,DWORD PTR ds:0xc0031428
c0010c1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c20:	85 d2                	test   edx,edx
c0010c22:	75 0c                	jne    c0010c30 <addToTerminalCycle(VgaText*)+0x1a>
c0010c24:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c0010c2a:	a3 28 14 03 c0       	mov    ds:0xc0031428,eax
c0010c2f:	c3                   	ret    
c0010c30:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c0010c36:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c0010c3c:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c0010c42:	c3                   	ret    

c0010c43 <setActiveTerminal(VgaText*)>:
c0010c43:	53                   	push   ebx
c0010c44:	83 ec 08             	sub    esp,0x8
c0010c47:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c4b:	85 db                	test   ebx,ebx
c0010c4d:	75 11                	jne    c0010c60 <setActiveTerminal(VgaText*)+0x1d>
c0010c4f:	c7 44 24 10 94 ab 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ab94
c0010c57:	83 c4 08             	add    esp,0x8
c0010c5a:	5b                   	pop    ebx
c0010c5b:	e9 9b 9b 00 00       	jmp    c001a7fb <Krnl::panic(char const*)>
c0010c60:	50                   	push   eax
c0010c61:	50                   	push   eax
c0010c62:	53                   	push   ebx
c0010c63:	68 a2 ab 02 c0       	push   0xc002aba2
c0010c68:	e8 d9 25 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0010c6d:	a1 24 14 03 c0       	mov    eax,ds:0xc0031424
c0010c72:	83 c4 10             	add    esp,0x10
c0010c75:	85 c0                	test   eax,eax
c0010c77:	74 0c                	je     c0010c85 <setActiveTerminal(VgaText*)+0x42>
c0010c79:	83 ec 0c             	sub    esp,0xc
c0010c7c:	50                   	push   eax
c0010c7d:	e8 e2 03 00 00       	call   c0011064 <VgaText::updateCursor()>
c0010c82:	83 c4 10             	add    esp,0x10
c0010c85:	89 1d 24 14 03 c0    	mov    DWORD PTR ds:0xc0031424,ebx
c0010c8b:	51                   	push   ecx
c0010c8c:	51                   	push   ecx
c0010c8d:	53                   	push   ebx
c0010c8e:	68 ba ab 02 c0       	push   0xc002abba
c0010c93:	e8 ae 25 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0010c98:	83 c4 0c             	add    esp,0xc
c0010c9b:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010ca1:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010ca7:	53                   	push   ebx
c0010ca8:	e8 1d 08 00 00       	call   c00114ca <VgaText::setCursor(int, int)>
c0010cad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cb0:	e8 1b 0b 00 00       	call   c00117d0 <VgaText::isBlinkDisabled()>
c0010cb5:	5a                   	pop    edx
c0010cb6:	0f b6 c0             	movzx  eax,al
c0010cb9:	59                   	pop    ecx
c0010cba:	50                   	push   eax
c0010cbb:	53                   	push   ebx
c0010cbc:	e8 cd 03 00 00       	call   c001108e <VgaText::disableBlink(bool)>
c0010cc1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cc4:	e8 33 0b 00 00       	call   c00117fc <VgaText::getCursorHeight()>
c0010cc9:	5a                   	pop    edx
c0010cca:	59                   	pop    ecx
c0010ccb:	50                   	push   eax
c0010ccc:	53                   	push   ebx
c0010ccd:	e8 0c 0b 00 00       	call   c00117de <VgaText::setCursorHeight(int)>
c0010cd2:	83 c4 10             	add    esp,0x10
c0010cd5:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010cdc:	75 0a                	jne    c0010ce8 <setActiveTerminal(VgaText*)+0xa5>
c0010cde:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010ce8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010cec:	83 c4 08             	add    esp,0x8
c0010cef:	5b                   	pop    ebx
c0010cf0:	eb 5c                	jmp    c0010d4e <VgaText::load()>

c0010cf2 <installVgaTextImplementation()>:
c0010cf2:	83 ec 10             	sub    esp,0x10
c0010cf5:	6a 20                	push   0x20
c0010cf7:	6a 00                	push   0x0
c0010cf9:	68 40 14 03 c0       	push   0xc0031440
c0010cfe:	e8 c1 f9 fe ff       	call   c00006c4 <memset>
c0010d03:	83 c4 1c             	add    esp,0x1c
c0010d06:	c3                   	ret    

c0010d07 <scrollTerminalScrollLock(int)>:
c0010d07:	c3                   	ret    

c0010d08 <VgaText::updateTitle()>:
c0010d08:	53                   	push   ebx
c0010d09:	31 c0                	xor    eax,eax
c0010d0b:	83 ec 58             	sub    esp,0x58
c0010d0e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010d12:	89 e1                	mov    ecx,esp
c0010d14:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010d18:	40                   	inc    eax
c0010d19:	83 f8 50             	cmp    eax,0x50
c0010d1c:	75 f6                	jne    c0010d14 <VgaText::updateTitle()+0xc>
c0010d1e:	31 c0                	xor    eax,eax
c0010d20:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010d27:	84 db                	test   bl,bl
c0010d29:	74 06                	je     c0010d31 <VgaText::updateTitle()+0x29>
c0010d2b:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010d2e:	40                   	inc    eax
c0010d2f:	eb ef                	jmp    c0010d20 <VgaText::updateTitle()+0x18>
c0010d31:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010d37:	85 c0                	test   eax,eax
c0010d39:	74 09                	je     c0010d44 <VgaText::updateTitle()+0x3c>
c0010d3b:	53                   	push   ebx
c0010d3c:	53                   	push   ebx
c0010d3d:	51                   	push   ecx
c0010d3e:	52                   	push   edx
c0010d3f:	ff d0                	call   eax
c0010d41:	83 c4 10             	add    esp,0x10
c0010d44:	e8 e9 08 00 00       	call   c0011632 <VgaText::updateDiskUsage()>
c0010d49:	83 c4 58             	add    esp,0x58
c0010d4c:	5b                   	pop    ebx
c0010d4d:	c3                   	ret    

c0010d4e <VgaText::load()>:
c0010d4e:	53                   	push   ebx
c0010d4f:	31 c0                	xor    eax,eax
c0010d51:	83 ec 58             	sub    esp,0x58
c0010d54:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010d58:	89 e2                	mov    edx,esp
c0010d5a:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010d5e:	40                   	inc    eax
c0010d5f:	83 f8 50             	cmp    eax,0x50
c0010d62:	75 f6                	jne    c0010d5a <VgaText::load()+0xc>
c0010d64:	31 c0                	xor    eax,eax
c0010d66:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010d6d:	84 c9                	test   cl,cl
c0010d6f:	74 06                	je     c0010d77 <VgaText::load()+0x29>
c0010d71:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010d74:	40                   	inc    eax
c0010d75:	eb ef                	jmp    c0010d66 <VgaText::load()+0x18>
c0010d77:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c0010d7d:	85 c0                	test   eax,eax
c0010d7f:	74 09                	je     c0010d8a <VgaText::load()+0x3c>
c0010d81:	51                   	push   ecx
c0010d82:	51                   	push   ecx
c0010d83:	52                   	push   edx
c0010d84:	53                   	push   ebx
c0010d85:	ff d0                	call   eax
c0010d87:	83 c4 10             	add    esp,0x10
c0010d8a:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010d90:	85 c0                	test   eax,eax
c0010d92:	74 09                	je     c0010d9d <VgaText::load()+0x4f>
c0010d94:	83 ec 0c             	sub    esp,0xc
c0010d97:	53                   	push   ebx
c0010d98:	ff d0                	call   eax
c0010d9a:	83 c4 10             	add    esp,0x10
c0010d9d:	83 c4 58             	add    esp,0x58
c0010da0:	5b                   	pop    ebx
c0010da1:	c3                   	ret    

c0010da2 <VgaText::scrollScreen()>:
c0010da2:	55                   	push   ebp
c0010da3:	57                   	push   edi
c0010da4:	bf 01 00 00 00       	mov    edi,0x1
c0010da9:	56                   	push   esi
c0010daa:	53                   	push   ebx
c0010dab:	83 ec 0c             	sub    esp,0xc
c0010dae:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010db2:	69 f7 a0 00 00 00    	imul   esi,edi,0xa0
c0010db8:	31 ed                	xor    ebp,ebp
c0010dba:	01 de                	add    esi,ebx
c0010dbc:	8a 46 0c             	mov    al,BYTE PTR [esi+0xc]
c0010dbf:	83 ff 17             	cmp    edi,0x17
c0010dc2:	88 86 6c ff ff ff    	mov    BYTE PTR [esi-0x94],al
c0010dc8:	75 2b                	jne    c0010df5 <VgaText::scrollScreen()+0x53>
c0010dca:	f7 c5 01 00 00 00    	test   ebp,0x1
c0010dd0:	74 1f                	je     c0010df1 <VgaText::scrollScreen()+0x4f>
c0010dd2:	50                   	push   eax
c0010dd3:	50                   	push   eax
c0010dd4:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c0010ddb:	50                   	push   eax
c0010ddc:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c0010de3:	50                   	push   eax
c0010de4:	e8 a5 06 00 00       	call   c001148e <VgaText::combineColours(unsigned char, unsigned char)>
c0010de9:	83 c4 10             	add    esp,0x10
c0010dec:	88 46 0c             	mov    BYTE PTR [esi+0xc],al
c0010def:	eb 04                	jmp    c0010df5 <VgaText::scrollScreen()+0x53>
c0010df1:	c6 46 0c 20          	mov    BYTE PTR [esi+0xc],0x20
c0010df5:	45                   	inc    ebp
c0010df6:	46                   	inc    esi
c0010df7:	81 fd a0 00 00 00    	cmp    ebp,0xa0
c0010dfd:	75 bd                	jne    c0010dbc <VgaText::scrollScreen()+0x1a>
c0010dff:	47                   	inc    edi
c0010e00:	83 ff 18             	cmp    edi,0x18
c0010e03:	75 ad                	jne    c0010db2 <VgaText::scrollScreen()+0x10>
c0010e05:	39 1d 24 14 03 c0    	cmp    DWORD PTR ds:0xc0031424,ebx
c0010e0b:	75 24                	jne    c0010e31 <VgaText::scrollScreen()+0x8f>
c0010e0d:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010e14:	74 08                	je     c0010e1e <VgaText::scrollScreen()+0x7c>
c0010e16:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010e1c:	eb 13                	jmp    c0010e31 <VgaText::scrollScreen()+0x8f>
c0010e1e:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c0010e24:	85 c0                	test   eax,eax
c0010e26:	74 09                	je     c0010e31 <VgaText::scrollScreen()+0x8f>
c0010e28:	83 ec 0c             	sub    esp,0xc
c0010e2b:	53                   	push   ebx
c0010e2c:	ff d0                	call   eax
c0010e2e:	83 c4 10             	add    esp,0x10
c0010e31:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010e35:	83 c4 0c             	add    esp,0xc
c0010e38:	5b                   	pop    ebx
c0010e39:	5e                   	pop    esi
c0010e3a:	5f                   	pop    edi
c0010e3b:	5d                   	pop    ebp
c0010e3c:	e9 23 02 00 00       	jmp    c0011064 <VgaText::updateCursor()>
c0010e41:	90                   	nop

c0010e42 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010e42:	56                   	push   esi
c0010e43:	53                   	push   ebx
c0010e44:	83 ec 0c             	sub    esp,0xc
c0010e47:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010e4b:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0010e50:	50                   	push   eax
c0010e51:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0010e56:	50                   	push   eax
c0010e57:	e8 32 06 00 00       	call   c001148e <VgaText::combineColours(unsigned char, unsigned char)>
c0010e5c:	59                   	pop    ecx
c0010e5d:	0f b6 c0             	movzx  eax,al
c0010e60:	5e                   	pop    esi
c0010e61:	0f be 74 24 1c       	movsx  esi,BYTE PTR [esp+0x1c]
c0010e66:	50                   	push   eax
c0010e67:	56                   	push   esi
c0010e68:	e8 33 06 00 00       	call   c00114a0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010e6d:	83 c4 10             	add    esp,0x10
c0010e70:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010e76:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010e7a:	0f b7 d2             	movzx  edx,dx
c0010e7d:	66 89 44 53 0c       	mov    WORD PTR [ebx+edx*2+0xc],ax
c0010e82:	39 1d 24 14 03 c0    	cmp    DWORD PTR ds:0xc0031424,ebx
c0010e88:	75 13                	jne    c0010e9d <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5b>
c0010e8a:	8b 83 18 10 00 00    	mov    eax,DWORD PTR [ebx+0x1018]
c0010e90:	85 c0                	test   eax,eax
c0010e92:	74 09                	je     c0010e9d <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5b>
c0010e94:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0010e98:	5a                   	pop    edx
c0010e99:	5b                   	pop    ebx
c0010e9a:	5e                   	pop    esi
c0010e9b:	ff e0                	jmp    eax
c0010e9d:	58                   	pop    eax
c0010e9e:	5b                   	pop    ebx
c0010e9f:	5e                   	pop    esi
c0010ea0:	c3                   	ret    
c0010ea1:	90                   	nop

c0010ea2 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010ea2:	55                   	push   ebp
c0010ea3:	57                   	push   edi
c0010ea4:	56                   	push   esi
c0010ea5:	53                   	push   ebx
c0010ea6:	83 ec 24             	sub    esp,0x24
c0010ea9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0010ead:	0f b6 44 24 44       	movzx  eax,BYTE PTR [esp+0x44]
c0010eb2:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010eb9:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010ebc:	50                   	push   eax
c0010ebd:	0f b6 44 24 44       	movzx  eax,BYTE PTR [esp+0x44]
c0010ec2:	50                   	push   eax
c0010ec3:	e8 c6 05 00 00       	call   c001148e <VgaText::combineColours(unsigned char, unsigned char)>
c0010ec8:	83 c4 10             	add    esp,0x10
c0010ecb:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ed3:	0f b6 c0             	movzx  eax,al
c0010ed6:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010edc:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010ee0:	0f b7 db             	movzx  ebx,bx
c0010ee3:	31 c9                	xor    ecx,ecx
c0010ee5:	01 db                	add    ebx,ebx
c0010ee7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010eeb:	01 fb                	add    ebx,edi
c0010eed:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010ef0:	84 c0                	test   al,al
c0010ef2:	0f 84 38 01 00 00    	je     c0011030 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18e>
c0010ef8:	3c 0d                	cmp    al,0xd
c0010efa:	75 0f                	jne    c0010f0b <VgaText::puts(char const*, VgaColour, VgaColour)+0x69>
c0010efc:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010f06:	e9 1f 01 00 00       	jmp    c001102a <VgaText::puts(char const*, VgaColour, VgaColour)+0x188>
c0010f0b:	3c 0a                	cmp    al,0xa
c0010f0d:	75 5b                	jne    c0010f6a <VgaText::puts(char const*, VgaColour, VgaColour)+0xc8>
c0010f0f:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010f15:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010f1f:	8d 48 01             	lea    ecx,[eax+0x1]
c0010f22:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010f28:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010f2e:	75 12                	jne    c0010f42 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0010f30:	83 ec 0c             	sub    esp,0xc
c0010f33:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010f39:	55                   	push   ebp
c0010f3a:	e8 63 fe ff ff       	call   c0010da2 <VgaText::scrollScreen()>
c0010f3f:	83 c4 10             	add    esp,0x10
c0010f42:	83 ec 0c             	sub    esp,0xc
c0010f45:	55                   	push   ebp
c0010f46:	e8 19 01 00 00       	call   c0011064 <VgaText::updateCursor()>
c0010f4b:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f53:	83 c4 10             	add    esp,0x10
c0010f56:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010f5c:	31 c9                	xor    ecx,ecx
c0010f5e:	0f b7 db             	movzx  ebx,bx
c0010f61:	01 db                	add    ebx,ebx
c0010f63:	01 fb                	add    ebx,edi
c0010f65:	e9 c0 00 00 00       	jmp    c001102a <VgaText::puts(char const*, VgaColour, VgaColour)+0x188>
c0010f6a:	3c 08                	cmp    al,0x8
c0010f6c:	75 4e                	jne    c0010fbc <VgaText::puts(char const*, VgaColour, VgaColour)+0x11a>
c0010f6e:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010f72:	53                   	push   ebx
c0010f73:	53                   	push   ebx
c0010f74:	6a 01                	push   0x1
c0010f76:	55                   	push   ebp
c0010f77:	e8 20 08 00 00       	call   c001179c <VgaText::decrementCursor(bool)>
c0010f7c:	58                   	pop    eax
c0010f7d:	5a                   	pop    edx
c0010f7e:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f84:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f8a:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010f90:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010f96:	6a 20                	push   0x20
c0010f98:	55                   	push   ebp
c0010f99:	e8 a4 fe ff ff       	call   c0010e42 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f9e:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010fa6:	83 c4 20             	add    esp,0x20
c0010fa9:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010faf:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010fb3:	0f b7 db             	movzx  ebx,bx
c0010fb6:	01 db                	add    ebx,ebx
c0010fb8:	01 fb                	add    ebx,edi
c0010fba:	eb 6e                	jmp    c001102a <VgaText::puts(char const*, VgaColour, VgaColour)+0x188>
c0010fbc:	51                   	push   ecx
c0010fbd:	51                   	push   ecx
c0010fbe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010fc2:	50                   	push   eax
c0010fc3:	e8 d8 04 00 00       	call   c00114a0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010fc8:	83 c4 10             	add    esp,0x10
c0010fcb:	66 89 03             	mov    WORD PTR [ebx],ax
c0010fce:	39 2d 24 14 03 c0    	cmp    DWORD PTR ds:0xc0031424,ebp
c0010fd4:	75 2a                	jne    c0011000 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15e>
c0010fd6:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010fdc:	85 c0                	test   eax,eax
c0010fde:	74 20                	je     c0011000 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15e>
c0010fe0:	52                   	push   edx
c0010fe1:	52                   	push   edx
c0010fe2:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010fe8:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010fee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010ff2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010ff6:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010ff9:	51                   	push   ecx
c0010ffa:	55                   	push   ebp
c0010ffb:	ff d0                	call   eax
c0010ffd:	83 c4 20             	add    esp,0x20
c0011000:	83 c3 02             	add    ebx,0x2
c0011003:	50                   	push   eax
c0011004:	50                   	push   eax
c0011005:	6a 00                	push   0x0
c0011007:	55                   	push   ebp
c0011008:	e8 13 05 00 00       	call   c0011520 <VgaText::incrementCursor(bool)>
c001100d:	83 c4 10             	add    esp,0x10
c0011010:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0011017:	75 0f                	jne    c0011028 <VgaText::puts(char const*, VgaColour, VgaColour)+0x186>
c0011019:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0011021:	0f b7 db             	movzx  ebx,bx
c0011024:	01 db                	add    ebx,ebx
c0011026:	01 fb                	add    ebx,edi
c0011028:	b1 01                	mov    cl,0x1
c001102a:	46                   	inc    esi
c001102b:	e9 bd fe ff ff       	jmp    c0010eed <VgaText::puts(char const*, VgaColour, VgaColour)+0x4b>
c0011030:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0011034:	83 ec 0c             	sub    esp,0xc
c0011037:	55                   	push   ebp
c0011038:	e8 27 00 00 00       	call   c0011064 <VgaText::updateCursor()>
c001103d:	83 c4 10             	add    esp,0x10
c0011040:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0011044:	84 c9                	test   cl,cl
c0011046:	74 0c                	je     c0011054 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b2>
c0011048:	83 ec 0c             	sub    esp,0xc
c001104b:	55                   	push   ebp
c001104c:	e8 9f 0a 00 00       	call   c0011af0 <VgaText::doUpdate()>
c0011051:	83 c4 10             	add    esp,0x10
c0011054:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c001105b:	83 c4 1c             	add    esp,0x1c
c001105e:	5b                   	pop    ebx
c001105f:	5e                   	pop    esi
c0011060:	5f                   	pop    edi
c0011061:	5d                   	pop    ebp
c0011062:	c3                   	ret    
c0011063:	90                   	nop

c0011064 <VgaText::updateCursor()>:
c0011064:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011068:	39 05 24 14 03 c0    	cmp    DWORD PTR ds:0xc0031424,eax
c001106e:	75 0c                	jne    c001107c <VgaText::updateCursor()+0x18>
c0011070:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0011076:	85 c0                	test   eax,eax
c0011078:	74 02                	je     c001107c <VgaText::updateCursor()+0x18>
c001107a:	ff e0                	jmp    eax
c001107c:	c3                   	ret    
c001107d:	90                   	nop

c001107e <VgaText::showCursor(bool)>:
c001107e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011082:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011086:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c001108c:	c3                   	ret    
c001108d:	90                   	nop

c001108e <VgaText::disableBlink(bool)>:
c001108e:	56                   	push   esi
c001108f:	53                   	push   ebx
c0011090:	51                   	push   ecx
c0011091:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011095:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0011099:	39 1d 24 14 03 c0    	cmp    DWORD PTR ds:0xc0031424,ebx
c001109f:	75 18                	jne    c00110b9 <VgaText::disableBlink(bool)+0x2b>
c00110a1:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c00110a7:	85 c0                	test   eax,eax
c00110a9:	74 0e                	je     c00110b9 <VgaText::disableBlink(bool)+0x2b>
c00110ab:	89 f1                	mov    ecx,esi
c00110ad:	52                   	push   edx
c00110ae:	52                   	push   edx
c00110af:	0f b6 d1             	movzx  edx,cl
c00110b2:	52                   	push   edx
c00110b3:	53                   	push   ebx
c00110b4:	ff d0                	call   eax
c00110b6:	83 c4 10             	add    esp,0x10
c00110b9:	89 f0                	mov    eax,esi
c00110bb:	83 f0 01             	xor    eax,0x1
c00110be:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00110c4:	58                   	pop    eax
c00110c5:	5b                   	pop    ebx
c00110c6:	5e                   	pop    esi
c00110c7:	c3                   	ret    

c00110c8 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00110c8:	53                   	push   ebx
c00110c9:	83 ec 08             	sub    esp,0x8
c00110cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00110d0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00110d4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00110d8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00110dc:	3c 07                	cmp    al,0x7
c00110de:	75 2a                	jne    c001110a <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c00110e0:	a1 0c 15 03 c0       	mov    eax,ds:0xc003150c
c00110e5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00110ed:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c00110f5:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c00110fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011101:	83 c4 08             	add    esp,0x8
c0011104:	5b                   	pop    ebx
c0011105:	e9 26 2f 00 00       	jmp    c0014030 <Buzzer::beep(int, int, bool)>
c001110a:	3c 0d                	cmp    al,0xd
c001110c:	75 0c                	jne    c001111a <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c001110e:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0011118:	eb 3b                	jmp    c0011155 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c001111a:	3c 0a                	cmp    al,0xa
c001111c:	75 40                	jne    c001115e <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c001111e:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0011124:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001112e:	8d 50 01             	lea    edx,[eax+0x1]
c0011131:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0011137:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c001113d:	75 12                	jne    c0011151 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c001113f:	83 ec 0c             	sub    esp,0xc
c0011142:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0011148:	53                   	push   ebx
c0011149:	e8 54 fc ff ff       	call   c0010da2 <VgaText::scrollScreen()>
c001114e:	83 c4 10             	add    esp,0x10
c0011151:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0011155:	83 c4 08             	add    esp,0x8
c0011158:	5b                   	pop    ebx
c0011159:	e9 06 ff ff ff       	jmp    c0011064 <VgaText::updateCursor()>
c001115e:	3c 08                	cmp    al,0x8
c0011160:	75 31                	jne    c0011193 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0011162:	50                   	push   eax
c0011163:	50                   	push   eax
c0011164:	6a 01                	push   0x1
c0011166:	53                   	push   ebx
c0011167:	e8 30 06 00 00       	call   c001179c <VgaText::decrementCursor(bool)>
c001116c:	5a                   	pop    edx
c001116d:	59                   	pop    ecx
c001116e:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0011174:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c001117a:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011180:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011186:	6a 20                	push   0x20
c0011188:	53                   	push   ebx
c0011189:	e8 b4 fc ff ff       	call   c0010e42 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001118e:	83 c4 28             	add    esp,0x28
c0011191:	5b                   	pop    ebx
c0011192:	c3                   	ret    
c0011193:	83 ec 08             	sub    esp,0x8
c0011196:	0f be c0             	movsx  eax,al
c0011199:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c001119f:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00111a5:	51                   	push   ecx
c00111a6:	52                   	push   edx
c00111a7:	50                   	push   eax
c00111a8:	53                   	push   ebx
c00111a9:	e8 94 fc ff ff       	call   c0010e42 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00111ae:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00111b2:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00111ba:	83 c4 28             	add    esp,0x28
c00111bd:	5b                   	pop    ebx
c00111be:	e9 5d 03 00 00       	jmp    c0011520 <VgaText::incrementCursor(bool)>
c00111c3:	90                   	nop

c00111c4 <VgaText::doANSI_SGR(int)>:
c00111c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00111c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111cc:	85 d2                	test   edx,edx
c00111ce:	75 14                	jne    c00111e4 <VgaText::doANSI_SGR(int)+0x20>
c00111d0:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00111d6:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00111dc:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c00111e2:	eb 65                	jmp    c0011249 <VgaText::doANSI_SGR(int)+0x85>
c00111e4:	83 fa 07             	cmp    edx,0x7
c00111e7:	75 14                	jne    c00111fd <VgaText::doANSI_SGR(int)+0x39>
c00111e9:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00111ef:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c00111f5:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c00111fb:	eb 4c                	jmp    c0011249 <VgaText::doANSI_SGR(int)+0x85>
c00111fd:	83 fa 1b             	cmp    edx,0x1b
c0011200:	74 ce                	je     c00111d0 <VgaText::doANSI_SGR(int)+0xc>
c0011202:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0011205:	83 f9 07             	cmp    ecx,0x7
c0011208:	77 09                	ja     c0011213 <VgaText::doANSI_SGR(int)+0x4f>
c001120a:	8b 14 8d 00 03 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcfd00]
c0011211:	eb 20                	jmp    c0011233 <VgaText::doANSI_SGR(int)+0x6f>
c0011213:	8d 4a d8             	lea    ecx,[edx-0x28]
c0011216:	83 f9 07             	cmp    ecx,0x7
c0011219:	77 09                	ja     c0011224 <VgaText::doANSI_SGR(int)+0x60>
c001121b:	8b 14 8d 00 03 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcfd00]
c0011222:	eb 25                	jmp    c0011249 <VgaText::doANSI_SGR(int)+0x85>
c0011224:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0011227:	83 f9 07             	cmp    ecx,0x7
c001122a:	77 0e                	ja     c001123a <VgaText::doANSI_SGR(int)+0x76>
c001122c:	8b 14 95 b8 01 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcfe48]
c0011233:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0011239:	c3                   	ret    
c001123a:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001123d:	83 f9 07             	cmp    ecx,0x7
c0011240:	77 0d                	ja     c001124f <VgaText::doANSI_SGR(int)+0x8b>
c0011242:	8b 14 95 90 01 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcfe70]
c0011249:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001124f:	c3                   	ret    

c0011250 <VgaText::putchar(char)>:
c0011250:	56                   	push   esi
c0011251:	53                   	push   ebx
c0011252:	83 ec 14             	sub    esp,0x14
c0011255:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011259:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001125d:	3c 5b                	cmp    al,0x5b
c001125f:	75 21                	jne    c0011282 <VgaText::putchar(char)+0x32>
c0011261:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0011268:	74 28                	je     c0011292 <VgaText::putchar(char)+0x42>
c001126a:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0011273:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c001127d:	e9 e2 00 00 00       	jmp    c0011364 <VgaText::putchar(char)+0x114>
c0011282:	3c 1b                	cmp    al,0x1b
c0011284:	75 0c                	jne    c0011292 <VgaText::putchar(char)+0x42>
c0011286:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c001128d:	e9 d2 00 00 00       	jmp    c0011364 <VgaText::putchar(char)+0x114>
c0011292:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0011298:	84 c9                	test   cl,cl
c001129a:	0f 84 ab 00 00 00    	je     c001134b <VgaText::putchar(char)+0xfb>
c00112a0:	8d 50 c0             	lea    edx,[eax-0x40]
c00112a3:	80 fa 3e             	cmp    dl,0x3e
c00112a6:	0f 87 82 00 00 00    	ja     c001132e <VgaText::putchar(char)+0xde>
c00112ac:	3c 6d                	cmp    al,0x6d
c00112ae:	75 4d                	jne    c00112fd <VgaText::putchar(char)+0xad>
c00112b0:	31 f6                	xor    esi,esi
c00112b2:	31 d2                	xor    edx,edx
c00112b4:	31 c0                	xor    eax,eax
c00112b6:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c00112bc:	7e 30                	jle    c00112ee <VgaText::putchar(char)+0x9e>
c00112be:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00112c6:	80 fa 3b             	cmp    dl,0x3b
c00112c9:	75 17                	jne    c00112e2 <VgaText::putchar(char)+0x92>
c00112cb:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00112cf:	50                   	push   eax
c00112d0:	53                   	push   ebx
c00112d1:	e8 ee fe ff ff       	call   c00111c4 <VgaText::doANSI_SGR(int)>
c00112d6:	59                   	pop    ecx
c00112d7:	31 d2                	xor    edx,edx
c00112d9:	58                   	pop    eax
c00112da:	31 c0                	xor    eax,eax
c00112dc:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00112e0:	eb 09                	jmp    c00112eb <VgaText::putchar(char)+0x9b>
c00112e2:	6b c0 0a             	imul   eax,eax,0xa
c00112e5:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00112e9:	88 ca                	mov    dl,cl
c00112eb:	46                   	inc    esi
c00112ec:	eb c8                	jmp    c00112b6 <VgaText::putchar(char)+0x66>
c00112ee:	84 d2                	test   dl,dl
c00112f0:	74 31                	je     c0011323 <VgaText::putchar(char)+0xd3>
c00112f2:	50                   	push   eax
c00112f3:	53                   	push   ebx
c00112f4:	e8 cb fe ff ff       	call   c00111c4 <VgaText::doANSI_SGR(int)>
c00112f9:	58                   	pop    eax
c00112fa:	5a                   	pop    edx
c00112fb:	eb 26                	jmp    c0011323 <VgaText::putchar(char)+0xd3>
c00112fd:	3c 4a                	cmp    al,0x4a
c00112ff:	75 22                	jne    c0011323 <VgaText::putchar(char)+0xd3>
c0011301:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0011308:	75 19                	jne    c0011323 <VgaText::putchar(char)+0xd3>
c001130a:	83 ec 0c             	sub    esp,0xc
c001130d:	53                   	push   ebx
c001130e:	e8 7d 00 00 00       	call   c0011390 <VgaText::clearScreen()>
c0011313:	83 c4 0c             	add    esp,0xc
c0011316:	6a 00                	push   0x0
c0011318:	6a 00                	push   0x0
c001131a:	53                   	push   ebx
c001131b:	e8 aa 01 00 00       	call   c00114ca <VgaText::setCursor(int, int)>
c0011320:	83 c4 10             	add    esp,0x10
c0011323:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c001132c:	eb 36                	jmp    c0011364 <VgaText::putchar(char)+0x114>
c001132e:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0011334:	83 fa 0e             	cmp    edx,0xe
c0011337:	7f 2b                	jg     c0011364 <VgaText::putchar(char)+0x114>
c0011339:	8d 4a 01             	lea    ecx,[edx+0x1]
c001133c:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0011342:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0011349:	eb 19                	jmp    c0011364 <VgaText::putchar(char)+0x114>
c001134b:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011351:	0f be c0             	movsx  eax,al
c0011354:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001135a:	50                   	push   eax
c001135b:	53                   	push   ebx
c001135c:	e8 67 fd ff ff       	call   c00110c8 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011361:	83 c4 10             	add    esp,0x10
c0011364:	83 c4 14             	add    esp,0x14
c0011367:	5b                   	pop    ebx
c0011368:	5e                   	pop    esi
c0011369:	c3                   	ret    

c001136a <VgaText::puts(char const*)>:
c001136a:	53                   	push   ebx
c001136b:	83 ec 08             	sub    esp,0x8
c001136e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011372:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011375:	84 c0                	test   al,al
c0011377:	74 12                	je     c001138b <VgaText::puts(char const*)+0x21>
c0011379:	43                   	inc    ebx
c001137a:	51                   	push   ecx
c001137b:	51                   	push   ecx
c001137c:	50                   	push   eax
c001137d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011381:	e8 ca fe ff ff       	call   c0011250 <VgaText::putchar(char)>
c0011386:	83 c4 10             	add    esp,0x10
c0011389:	eb e7                	jmp    c0011372 <VgaText::puts(char const*)+0x8>
c001138b:	83 c4 08             	add    esp,0x8
c001138e:	5b                   	pop    ebx
c001138f:	c3                   	ret    

c0011390 <VgaText::clearScreen()>:
c0011390:	57                   	push   edi
c0011391:	56                   	push   esi
c0011392:	31 f6                	xor    esi,esi
c0011394:	53                   	push   ebx
c0011395:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011399:	52                   	push   edx
c001139a:	6a 00                	push   0x0
c001139c:	6a 00                	push   0x0
c001139e:	53                   	push   ebx
c001139f:	e8 26 01 00 00       	call   c00114ca <VgaText::setCursor(int, int)>
c00113a4:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c00113ab:	83 c4 10             	add    esp,0x10
c00113ae:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c00113b4:	7e 26                	jle    c00113dc <VgaText::clearScreen()+0x4c>
c00113b6:	31 ff                	xor    edi,edi
c00113b8:	50                   	push   eax
c00113b9:	50                   	push   eax
c00113ba:	56                   	push   esi
c00113bb:	57                   	push   edi
c00113bc:	47                   	inc    edi
c00113bd:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00113c3:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00113c9:	6a 20                	push   0x20
c00113cb:	53                   	push   ebx
c00113cc:	e8 71 fa ff ff       	call   c0010e42 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00113d1:	83 c4 20             	add    esp,0x20
c00113d4:	83 ff 50             	cmp    edi,0x50
c00113d7:	75 df                	jne    c00113b8 <VgaText::clearScreen()+0x28>
c00113d9:	46                   	inc    esi
c00113da:	eb d2                	jmp    c00113ae <VgaText::clearScreen()+0x1e>
c00113dc:	83 ec 0c             	sub    esp,0xc
c00113df:	53                   	push   ebx
c00113e0:	e8 0b 07 00 00       	call   c0011af0 <VgaText::doUpdate()>
c00113e5:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c00113ec:	83 c4 10             	add    esp,0x10
c00113ef:	5b                   	pop    ebx
c00113f0:	5e                   	pop    esi
c00113f1:	5f                   	pop    edi
c00113f2:	c3                   	ret    
c00113f3:	90                   	nop

c00113f4 <VgaText::setDefaultBgColour(VgaColour)>:
c00113f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00113fc:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0011402:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0011408:	c3                   	ret    
c0011409:	90                   	nop

c001140a <VgaText::setDefaultFgColour(VgaColour)>:
c001140a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001140e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011412:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c0011418:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001141e:	c3                   	ret    
c001141f:	90                   	nop

c0011420 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0011420:	53                   	push   ebx
c0011421:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011425:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011429:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001142d:	51                   	push   ecx
c001142e:	e8 c1 ff ff ff       	call   c00113f4 <VgaText::setDefaultBgColour(VgaColour)>
c0011433:	58                   	pop    eax
c0011434:	5a                   	pop    edx
c0011435:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0011439:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001143d:	5b                   	pop    ebx
c001143e:	eb ca                	jmp    c001140a <VgaText::setDefaultFgColour(VgaColour)>

c0011440 <VgaText::setTitleTextColour(VgaColour)>:
c0011440:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011444:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011448:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c001144e:	e9 b5 f8 ff ff       	jmp    c0010d08 <VgaText::updateTitle()>
c0011453:	90                   	nop

c0011454 <VgaText::setTitleColour(VgaColour)>:
c0011454:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011458:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001145c:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0011462:	e9 a1 f8 ff ff       	jmp    c0010d08 <VgaText::updateTitle()>
c0011467:	90                   	nop

c0011468 <VgaText::setTitle(char*)>:
c0011468:	53                   	push   ebx
c0011469:	83 ec 10             	sub    esp,0x10
c001146c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011470:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011474:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c001147a:	50                   	push   eax
c001147b:	e8 e3 f2 fe ff       	call   c0000763 <strcpy>
c0011480:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0011484:	83 c4 18             	add    esp,0x18
c0011487:	5b                   	pop    ebx
c0011488:	e9 7b f8 ff ff       	jmp    c0010d08 <VgaText::updateTitle()>
c001148d:	90                   	nop

c001148e <VgaText::combineColours(unsigned char, unsigned char)>:
c001148e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0011492:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0011497:	83 e0 0f             	and    eax,0xf
c001149a:	c1 e2 04             	shl    edx,0x4
c001149d:	09 d0                	or     eax,edx
c001149f:	c3                   	ret    

c00114a0 <VgaText::combineCharAndColour(char, unsigned char)>:
c00114a0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00114a5:	c1 e0 08             	shl    eax,0x8
c00114a8:	89 c2                	mov    edx,eax
c00114aa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00114af:	09 d0                	or     eax,edx
c00114b1:	c3                   	ret    

c00114b2 <VgaText::getCursorX()>:
c00114b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114b6:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00114bc:	c3                   	ret    
c00114bd:	90                   	nop

c00114be <VgaText::getCursorY()>:
c00114be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114c2:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00114c8:	c3                   	ret    
c00114c9:	90                   	nop

c00114ca <VgaText::setCursor(int, int)>:
c00114ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00114d2:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00114d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00114dc:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c00114e2:	e9 7d fb ff ff       	jmp    c0011064 <VgaText::updateCursor()>
c00114e7:	90                   	nop

c00114e8 <VgaText::setCursorX(int)>:
c00114e8:	83 ec 10             	sub    esp,0x10
c00114eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00114ef:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00114f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114f9:	50                   	push   eax
c00114fa:	e8 cb ff ff ff       	call   c00114ca <VgaText::setCursor(int, int)>
c00114ff:	83 c4 1c             	add    esp,0x1c
c0011502:	c3                   	ret    
c0011503:	90                   	nop

c0011504 <VgaText::setCursorY(int)>:
c0011504:	83 ec 10             	sub    esp,0x10
c0011507:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001150b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001150f:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0011515:	50                   	push   eax
c0011516:	e8 af ff ff ff       	call   c00114ca <VgaText::setCursor(int, int)>
c001151b:	83 c4 1c             	add    esp,0x1c
c001151e:	c3                   	ret    
c001151f:	90                   	nop

c0011520 <VgaText::incrementCursor(bool)>:
c0011520:	56                   	push   esi
c0011521:	53                   	push   ebx
c0011522:	51                   	push   ecx
c0011523:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011527:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001152b:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0011531:	40                   	inc    eax
c0011532:	83 f8 50             	cmp    eax,0x50
c0011535:	74 08                	je     c001153f <VgaText::incrementCursor(bool)+0x1f>
c0011537:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c001153d:	eb 33                	jmp    c0011572 <VgaText::incrementCursor(bool)+0x52>
c001153f:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0011545:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001154f:	8d 50 01             	lea    edx,[eax+0x1]
c0011552:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0011558:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c001155e:	75 12                	jne    c0011572 <VgaText::incrementCursor(bool)+0x52>
c0011560:	83 ec 0c             	sub    esp,0xc
c0011563:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0011569:	53                   	push   ebx
c001156a:	e8 33 f8 ff ff       	call   c0010da2 <VgaText::scrollScreen()>
c001156f:	83 c4 10             	add    esp,0x10
c0011572:	89 f0                	mov    eax,esi
c0011574:	84 c0                	test   al,al
c0011576:	74 0c                	je     c0011584 <VgaText::incrementCursor(bool)+0x64>
c0011578:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001157c:	5a                   	pop    edx
c001157d:	5b                   	pop    ebx
c001157e:	5e                   	pop    esi
c001157f:	e9 e0 fa ff ff       	jmp    c0011064 <VgaText::updateCursor()>
c0011584:	58                   	pop    eax
c0011585:	5b                   	pop    ebx
c0011586:	5e                   	pop    esi
c0011587:	c3                   	ret    

c0011588 <VgaText::updateRAMUsageDisplay(int)>:
c0011588:	56                   	push   esi
c0011589:	8b 35 44 03 03 c0    	mov    esi,DWORD PTR ds:0xc0030344
c001158f:	53                   	push   ebx
c0011590:	bb 0a 00 00 00       	mov    ebx,0xa
c0011595:	6a 0f                	push   0xf
c0011597:	6a 00                	push   0x0
c0011599:	e8 f0 fe ff ff       	call   c001148e <VgaText::combineColours(unsigned char, unsigned char)>
c001159e:	5a                   	pop    edx
c001159f:	59                   	pop    ecx
c00115a0:	0f b6 c8             	movzx  ecx,al
c00115a3:	51                   	push   ecx
c00115a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115a8:	99                   	cdq    
c00115a9:	f7 fb                	idiv   ebx
c00115ab:	89 d3                	mov    ebx,edx
c00115ad:	83 c0 30             	add    eax,0x30
c00115b0:	83 c3 30             	add    ebx,0x30
c00115b3:	0f be c0             	movsx  eax,al
c00115b6:	0f b6 db             	movzx  ebx,bl
c00115b9:	50                   	push   eax
c00115ba:	e8 e1 fe ff ff       	call   c00114a0 <VgaText::combineCharAndColour(char, unsigned char)>
c00115bf:	5a                   	pop    edx
c00115c0:	5a                   	pop    edx
c00115c1:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00115c8:	51                   	push   ecx
c00115c9:	53                   	push   ebx
c00115ca:	e8 d1 fe ff ff       	call   c00114a0 <VgaText::combineCharAndColour(char, unsigned char)>
c00115cf:	5b                   	pop    ebx
c00115d0:	5a                   	pop    edx
c00115d1:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00115d8:	51                   	push   ecx
c00115d9:	6a 25                	push   0x25
c00115db:	e8 c0 fe ff ff       	call   c00114a0 <VgaText::combineCharAndColour(char, unsigned char)>
c00115e0:	59                   	pop    ecx
c00115e1:	5b                   	pop    ebx
c00115e2:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00115e9:	5b                   	pop    ebx
c00115ea:	5e                   	pop    esi
c00115eb:	c3                   	ret    

c00115ec <VgaText::putx(unsigned int)>:
c00115ec:	57                   	push   edi
c00115ed:	b9 11 00 00 00       	mov    ecx,0x11
c00115f2:	56                   	push   esi
c00115f3:	be d6 ab 02 c0       	mov    esi,0xc002abd6
c00115f8:	53                   	push   ebx
c00115f9:	83 ec 20             	sub    esp,0x20
c00115fc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011600:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0011604:	fc                   	cld    
c0011605:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011607:	be 08 00 00 00       	mov    esi,0x8
c001160c:	50                   	push   eax
c001160d:	50                   	push   eax
c001160e:	89 d8                	mov    eax,ebx
c0011610:	c1 e3 04             	shl    ebx,0x4
c0011613:	c1 e8 1c             	shr    eax,0x1c
c0011616:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001161b:	50                   	push   eax
c001161c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011620:	e8 2b fc ff ff       	call   c0011250 <VgaText::putchar(char)>
c0011625:	83 c4 10             	add    esp,0x10
c0011628:	4e                   	dec    esi
c0011629:	75 e1                	jne    c001160c <VgaText::putx(unsigned int)+0x20>
c001162b:	83 c4 20             	add    esp,0x20
c001162e:	5b                   	pop    ebx
c001162f:	5e                   	pop    esi
c0011630:	5f                   	pop    edi
c0011631:	c3                   	ret    

c0011632 <VgaText::updateDiskUsage()>:
c0011632:	55                   	push   ebp
c0011633:	bd 10 27 00 00       	mov    ebp,0x2710
c0011638:	57                   	push   edi
c0011639:	8b 3d 44 03 03 c0    	mov    edi,DWORD PTR ds:0xc0030344
c001163f:	56                   	push   esi
c0011640:	53                   	push   ebx
c0011641:	6a 0f                	push   0xf
c0011643:	6a 00                	push   0x0
c0011645:	e8 44 fe ff ff       	call   c001148e <VgaText::combineColours(unsigned char, unsigned char)>
c001164a:	5a                   	pop    edx
c001164b:	0f b6 d8             	movzx  ebx,al
c001164e:	59                   	pop    ecx
c001164f:	8b 35 80 56 03 c0    	mov    esi,DWORD PTR ds:0xc0035680
c0011655:	53                   	push   ebx
c0011656:	b9 0a 00 00 00       	mov    ecx,0xa
c001165b:	89 f0                	mov    eax,esi
c001165d:	99                   	cdq    
c001165e:	f7 fd                	idiv   ebp
c0011660:	99                   	cdq    
c0011661:	f7 f9                	idiv   ecx
c0011663:	8d 42 30             	lea    eax,[edx+0x30]
c0011666:	0f b6 c0             	movzx  eax,al
c0011669:	50                   	push   eax
c001166a:	e8 31 fe ff ff       	call   c00114a0 <VgaText::combineCharAndColour(char, unsigned char)>
c001166f:	5d                   	pop    ebp
c0011670:	bd e8 03 00 00       	mov    ebp,0x3e8
c0011675:	5a                   	pop    edx
c0011676:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c001167a:	53                   	push   ebx
c001167b:	89 f0                	mov    eax,esi
c001167d:	99                   	cdq    
c001167e:	f7 fd                	idiv   ebp
c0011680:	99                   	cdq    
c0011681:	f7 f9                	idiv   ecx
c0011683:	8d 42 30             	lea    eax,[edx+0x30]
c0011686:	0f b6 c0             	movzx  eax,al
c0011689:	50                   	push   eax
c001168a:	e8 11 fe ff ff       	call   c00114a0 <VgaText::combineCharAndColour(char, unsigned char)>
c001168f:	5d                   	pop    ebp
c0011690:	bd 64 00 00 00       	mov    ebp,0x64
c0011695:	5a                   	pop    edx
c0011696:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c001169d:	53                   	push   ebx
c001169e:	89 f0                	mov    eax,esi
c00116a0:	99                   	cdq    
c00116a1:	f7 fd                	idiv   ebp
c00116a3:	99                   	cdq    
c00116a4:	f7 f9                	idiv   ecx
c00116a6:	8d 42 30             	lea    eax,[edx+0x30]
c00116a9:	0f b6 c0             	movzx  eax,al
c00116ac:	50                   	push   eax
c00116ad:	e8 ee fd ff ff       	call   c00114a0 <VgaText::combineCharAndColour(char, unsigned char)>
c00116b2:	5d                   	pop    ebp
c00116b3:	5a                   	pop    edx
c00116b4:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c00116bb:	53                   	push   ebx
c00116bc:	89 f0                	mov    eax,esi
c00116be:	99                   	cdq    
c00116bf:	f7 f9                	idiv   ecx
c00116c1:	89 d6                	mov    esi,edx
c00116c3:	99                   	cdq    
c00116c4:	f7 f9                	idiv   ecx
c00116c6:	8d 42 30             	lea    eax,[edx+0x30]
c00116c9:	0f b6 c0             	movzx  eax,al
c00116cc:	50                   	push   eax
c00116cd:	e8 ce fd ff ff       	call   c00114a0 <VgaText::combineCharAndColour(char, unsigned char)>
c00116d2:	5d                   	pop    ebp
c00116d3:	5a                   	pop    edx
c00116d4:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c00116db:	53                   	push   ebx
c00116dc:	8d 46 30             	lea    eax,[esi+0x30]
c00116df:	0f b6 f0             	movzx  esi,al
c00116e2:	56                   	push   esi
c00116e3:	e8 b8 fd ff ff       	call   c00114a0 <VgaText::combineCharAndColour(char, unsigned char)>
c00116e8:	5e                   	pop    esi
c00116e9:	8b 35 84 56 03 c0    	mov    esi,DWORD PTR ds:0xc0035684
c00116ef:	5d                   	pop    ebp
c00116f0:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c00116f7:	bd 10 27 00 00       	mov    ebp,0x2710
c00116fc:	53                   	push   ebx
c00116fd:	89 f0                	mov    eax,esi
c00116ff:	99                   	cdq    
c0011700:	f7 fd                	idiv   ebp
c0011702:	99                   	cdq    
c0011703:	f7 f9                	idiv   ecx
c0011705:	8d 42 30             	lea    eax,[edx+0x30]
c0011708:	0f b6 c0             	movzx  eax,al
c001170b:	50                   	push   eax
c001170c:	e8 8f fd ff ff       	call   c00114a0 <VgaText::combineCharAndColour(char, unsigned char)>
c0011711:	5a                   	pop    edx
c0011712:	5d                   	pop    ebp
c0011713:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c001171a:	bd e8 03 00 00       	mov    ebp,0x3e8
c001171f:	53                   	push   ebx
c0011720:	89 f0                	mov    eax,esi
c0011722:	99                   	cdq    
c0011723:	f7 fd                	idiv   ebp
c0011725:	99                   	cdq    
c0011726:	f7 f9                	idiv   ecx
c0011728:	8d 42 30             	lea    eax,[edx+0x30]
c001172b:	0f b6 c0             	movzx  eax,al
c001172e:	50                   	push   eax
c001172f:	e8 6c fd ff ff       	call   c00114a0 <VgaText::combineCharAndColour(char, unsigned char)>
c0011734:	5a                   	pop    edx
c0011735:	5d                   	pop    ebp
c0011736:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c001173d:	bd 64 00 00 00       	mov    ebp,0x64
c0011742:	53                   	push   ebx
c0011743:	89 f0                	mov    eax,esi
c0011745:	99                   	cdq    
c0011746:	f7 fd                	idiv   ebp
c0011748:	99                   	cdq    
c0011749:	f7 f9                	idiv   ecx
c001174b:	83 c2 30             	add    edx,0x30
c001174e:	0f b6 d2             	movzx  edx,dl
c0011751:	52                   	push   edx
c0011752:	e8 49 fd ff ff       	call   c00114a0 <VgaText::combineCharAndColour(char, unsigned char)>
c0011757:	5a                   	pop    edx
c0011758:	5d                   	pop    ebp
c0011759:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0011760:	53                   	push   ebx
c0011761:	89 f0                	mov    eax,esi
c0011763:	99                   	cdq    
c0011764:	f7 f9                	idiv   ecx
c0011766:	89 d6                	mov    esi,edx
c0011768:	99                   	cdq    
c0011769:	f7 f9                	idiv   ecx
c001176b:	8d 42 30             	lea    eax,[edx+0x30]
c001176e:	0f b6 c0             	movzx  eax,al
c0011771:	50                   	push   eax
c0011772:	e8 29 fd ff ff       	call   c00114a0 <VgaText::combineCharAndColour(char, unsigned char)>
c0011777:	5a                   	pop    edx
c0011778:	59                   	pop    ecx
c0011779:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0011780:	53                   	push   ebx
c0011781:	8d 46 30             	lea    eax,[esi+0x30]
c0011784:	0f b6 f0             	movzx  esi,al
c0011787:	56                   	push   esi
c0011788:	e8 13 fd ff ff       	call   c00114a0 <VgaText::combineCharAndColour(char, unsigned char)>
c001178d:	5b                   	pop    ebx
c001178e:	5e                   	pop    esi
c001178f:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0011796:	5b                   	pop    ebx
c0011797:	5e                   	pop    esi
c0011798:	5f                   	pop    edi
c0011799:	5d                   	pop    ebp
c001179a:	c3                   	ret    
c001179b:	90                   	nop

c001179c <VgaText::decrementCursor(bool)>:
c001179c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00117a0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00117a4:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c00117aa:	85 c0                	test   eax,eax
c00117ac:	74 07                	je     c00117b5 <VgaText::decrementCursor(bool)+0x19>
c00117ae:	48                   	dec    eax
c00117af:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c00117b5:	84 c9                	test   cl,cl
c00117b7:	74 09                	je     c00117c2 <VgaText::decrementCursor(bool)+0x26>
c00117b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00117bd:	e9 a2 f8 ff ff       	jmp    c0011064 <VgaText::updateCursor()>
c00117c2:	c3                   	ret    
c00117c3:	90                   	nop

c00117c4 <VgaText::isShowingCursor()>:
c00117c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117c8:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c00117ce:	c3                   	ret    
c00117cf:	90                   	nop

c00117d0 <VgaText::isBlinkDisabled()>:
c00117d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117d4:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c00117da:	83 f0 01             	xor    eax,0x1
c00117dd:	c3                   	ret    

c00117de <VgaText::setCursorHeight(int)>:
c00117de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00117e6:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c00117ec:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c00117f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00117f7:	e9 82 f8 ff ff       	jmp    c001107e <VgaText::showCursor(bool)>

c00117fc <VgaText::getCursorHeight()>:
c00117fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011800:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0011806:	c3                   	ret    
c0011807:	90                   	nop

c0011808 <VgaText::~VgaText()>:
c0011808:	83 ec 0c             	sub    esp,0xc
c001180b:	ba 3c ac 02 c0       	mov    edx,0xc002ac3c
c0011810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011814:	89 10                	mov    DWORD PTR [eax],edx
c0011816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001181a:	83 ec 0c             	sub    esp,0xc
c001181d:	50                   	push   eax
c001181e:	e8 bf 06 00 00       	call   c0011ee2 <UnixFile::~UnixFile()>
c0011823:	83 c4 10             	add    esp,0x10
c0011826:	90                   	nop
c0011827:	83 c4 0c             	add    esp,0xc
c001182a:	c3                   	ret    
c001182b:	90                   	nop

c001182c <VgaText::~VgaText()>:
c001182c:	83 ec 0c             	sub    esp,0xc
c001182f:	83 ec 0c             	sub    esp,0xc
c0011832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011836:	e8 cd ff ff ff       	call   c0011808 <VgaText::~VgaText()>
c001183b:	83 c4 10             	add    esp,0x10
c001183e:	83 ec 08             	sub    esp,0x8
c0011841:	68 60 12 00 00       	push   0x1260
c0011846:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001184a:	e8 17 19 00 00       	call   c0013166 <operator delete(void*, unsigned long)>
c001184f:	83 c4 10             	add    esp,0x10
c0011852:	83 c4 0c             	add    esp,0xc
c0011855:	c3                   	ret    

c0011856 <VgaText::VgaText(char const*)>:
c0011856:	57                   	push   edi
c0011857:	56                   	push   esi
c0011858:	53                   	push   ebx
c0011859:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001185d:	83 ec 08             	sub    esp,0x8
c0011860:	6a 00                	push   0x0
c0011862:	50                   	push   eax
c0011863:	e8 ca 04 00 00       	call   c0011d32 <UnixFile::UnixFile(int)>
c0011868:	83 c4 10             	add    esp,0x10
c001186b:	ba 3c ac 02 c0       	mov    edx,0xc002ac3c
c0011870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011874:	89 10                	mov    DWORD PTR [eax],edx
c0011876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001187a:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0011884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011888:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0011892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011896:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c001189d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118a1:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c00118a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ac:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c00118b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ba:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c00118c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118c8:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c00118cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118d3:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c00118da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118de:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c00118e4:	bb 40 14 03 c0       	mov    ebx,0xc0031440
c00118e9:	b8 08 00 00 00       	mov    eax,0x8
c00118ee:	fc                   	cld    
c00118ef:	89 d7                	mov    edi,edx
c00118f1:	89 de                	mov    esi,ebx
c00118f3:	89 c1                	mov    ecx,eax
c00118f5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00118f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118fb:	05 1e 10 00 00       	add    eax,0x101e
c0011900:	83 ec 08             	sub    esp,0x8
c0011903:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011907:	50                   	push   eax
c0011908:	e8 56 ee fe ff       	call   c0000763 <strcpy>
c001190d:	83 c4 10             	add    esp,0x10
c0011910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011914:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c001191e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011922:	83 c0 0c             	add    eax,0xc
c0011925:	83 ec 04             	sub    esp,0x4
c0011928:	68 00 0f 00 00       	push   0xf00
c001192d:	6a 00                	push   0x0
c001192f:	50                   	push   eax
c0011930:	e8 8f ed fe ff       	call   c00006c4 <memset>
c0011935:	83 c4 10             	add    esp,0x10
c0011938:	83 ec 04             	sub    esp,0x4
c001193b:	6a 00                	push   0x0
c001193d:	6a 07                	push   0x7
c001193f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011943:	e8 d8 fa ff ff       	call   c0011420 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011948:	83 c4 10             	add    esp,0x10
c001194b:	83 ec 08             	sub    esp,0x8
c001194e:	6a 02                	push   0x2
c0011950:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011954:	e8 85 fe ff ff       	call   c00117de <VgaText::setCursorHeight(int)>
c0011959:	83 c4 10             	add    esp,0x10
c001195c:	83 ec 04             	sub    esp,0x4
c001195f:	6a 00                	push   0x0
c0011961:	6a 00                	push   0x0
c0011963:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011967:	e8 5e fb ff ff       	call   c00114ca <VgaText::setCursor(int, int)>
c001196c:	83 c4 10             	add    esp,0x10
c001196f:	83 ec 08             	sub    esp,0x8
c0011972:	6a 01                	push   0x1
c0011974:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011978:	e8 01 f7 ff ff       	call   c001107e <VgaText::showCursor(bool)>
c001197d:	83 c4 10             	add    esp,0x10
c0011980:	83 ec 08             	sub    esp,0x8
c0011983:	6a 01                	push   0x1
c0011985:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011989:	e8 00 f7 ff ff       	call   c001108e <VgaText::disableBlink(bool)>
c001198e:	83 c4 10             	add    esp,0x10
c0011991:	83 ec 0c             	sub    esp,0xc
c0011994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011998:	e8 f3 f9 ff ff       	call   c0011390 <VgaText::clearScreen()>
c001199d:	83 c4 10             	add    esp,0x10
c00119a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119a4:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c00119ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119af:	05 9e 10 00 00       	add    eax,0x109e
c00119b4:	83 ec 04             	sub    esp,0x4
c00119b7:	68 96 00 00 00       	push   0x96
c00119bc:	6a 00                	push   0x0
c00119be:	50                   	push   eax
c00119bf:	e8 00 ed fe ff       	call   c00006c4 <memset>
c00119c4:	83 c4 10             	add    esp,0x10
c00119c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119cb:	05 34 11 00 00       	add    eax,0x1134
c00119d0:	83 ec 04             	sub    esp,0x4
c00119d3:	68 2c 01 00 00       	push   0x12c
c00119d8:	6a 00                	push   0x0
c00119da:	50                   	push   eax
c00119db:	e8 e4 ec fe ff       	call   c00006c4 <memset>
c00119e0:	83 c4 10             	add    esp,0x10
c00119e3:	90                   	nop
c00119e4:	5b                   	pop    ebx
c00119e5:	5e                   	pop    esi
c00119e6:	5f                   	pop    edi
c00119e7:	c3                   	ret    

c00119e8 <VgaText::receiveKey(unsigned char)>:
c00119e8:	55                   	push   ebp
c00119e9:	57                   	push   edi
c00119ea:	56                   	push   esi
c00119eb:	53                   	push   ebx
c00119ec:	83 ec 1c             	sub    esp,0x1c
c00119ef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00119f3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00119f7:	84 db                	test   bl,bl
c00119f9:	0f 84 c9 00 00 00    	je     c0011ac8 <VgaText::receiveKey(unsigned char)+0xe0>
c00119ff:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0011a05:	80 fb 08             	cmp    bl,0x8
c0011a08:	75 2c                	jne    c0011a36 <VgaText::receiveKey(unsigned char)+0x4e>
c0011a0a:	83 ec 0c             	sub    esp,0xc
c0011a0d:	57                   	push   edi
c0011a0e:	e8 ce ec fe ff       	call   c00006e1 <strlen>
c0011a13:	83 c4 10             	add    esp,0x10
c0011a16:	85 c0                	test   eax,eax
c0011a18:	74 41                	je     c0011a5b <VgaText::receiveKey(unsigned char)+0x73>
c0011a1a:	50                   	push   eax
c0011a1b:	50                   	push   eax
c0011a1c:	6a 08                	push   0x8
c0011a1e:	56                   	push   esi
c0011a1f:	e8 2c f8 ff ff       	call   c0011250 <VgaText::putchar(char)>
c0011a24:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011a27:	e8 b5 ec fe ff       	call   c00006e1 <strlen>
c0011a2c:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0011a34:	eb 22                	jmp    c0011a58 <VgaText::receiveKey(unsigned char)+0x70>
c0011a36:	0f be c3             	movsx  eax,bl
c0011a39:	52                   	push   edx
c0011a3a:	52                   	push   edx
c0011a3b:	50                   	push   eax
c0011a3c:	56                   	push   esi
c0011a3d:	e8 0e f8 ff ff       	call   c0011250 <VgaText::putchar(char)>
c0011a42:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0011a46:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011a4b:	59                   	pop    ecx
c0011a4c:	5d                   	pop    ebp
c0011a4d:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011a51:	50                   	push   eax
c0011a52:	57                   	push   edi
c0011a53:	e8 c2 ed fe ff       	call   c000081a <strcat>
c0011a58:	83 c4 10             	add    esp,0x10
c0011a5b:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0011a62:	75 05                	jne    c0011a69 <VgaText::receiveKey(unsigned char)+0x81>
c0011a64:	80 fb 0a             	cmp    bl,0xa
c0011a67:	75 53                	jne    c0011abc <VgaText::receiveKey(unsigned char)+0xd4>
c0011a69:	83 ec 0c             	sub    esp,0xc
c0011a6c:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0011a72:	53                   	push   ebx
c0011a73:	e8 69 ec fe ff       	call   c00006e1 <strlen>
c0011a78:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011a7b:	89 c5                	mov    ebp,eax
c0011a7d:	e8 5f ec fe ff       	call   c00006e1 <strlen>
c0011a82:	83 c4 10             	add    esp,0x10
c0011a85:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0011a89:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011a8e:	76 10                	jbe    c0011aa0 <VgaText::receiveKey(unsigned char)+0xb8>
c0011a90:	83 ec 0c             	sub    esp,0xc
c0011a93:	68 e7 ab 02 c0       	push   0xc002abe7
c0011a98:	e8 5e 8d 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c0011a9d:	83 c4 10             	add    esp,0x10
c0011aa0:	50                   	push   eax
c0011aa1:	50                   	push   eax
c0011aa2:	57                   	push   edi
c0011aa3:	53                   	push   ebx
c0011aa4:	e8 71 ed fe ff       	call   c000081a <strcat>
c0011aa9:	83 c4 0c             	add    esp,0xc
c0011aac:	68 96 00 00 00       	push   0x96
c0011ab1:	6a 00                	push   0x0
c0011ab3:	57                   	push   edi
c0011ab4:	e8 0b ec fe ff       	call   c00006c4 <memset>
c0011ab9:	83 c4 10             	add    esp,0x10
c0011abc:	83 ec 0c             	sub    esp,0xc
c0011abf:	56                   	push   esi
c0011ac0:	e8 2b 00 00 00       	call   c0011af0 <VgaText::doUpdate()>
c0011ac5:	83 c4 10             	add    esp,0x10
c0011ac8:	83 c4 1c             	add    esp,0x1c
c0011acb:	5b                   	pop    ebx
c0011acc:	5e                   	pop    esi
c0011acd:	5f                   	pop    edi
c0011ace:	5d                   	pop    ebp
c0011acf:	c3                   	ret    

c0011ad0 <VgaText::read(unsigned long long, void*, int*)>:
c0011ad0:	83 ec 10             	sub    esp,0x10
c0011ad3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011ad7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011adb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011adf:	e8 b3 4a 00 00       	call   c0016597 <readKeyboard(VgaText*, char*, unsigned long)>
c0011ae4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011ae8:	89 02                	mov    DWORD PTR [edx],eax
c0011aea:	31 c0                	xor    eax,eax
c0011aec:	83 c4 1c             	add    esp,0x1c
c0011aef:	c3                   	ret    

c0011af0 <VgaText::doUpdate()>:
c0011af0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011af4:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0011afa:	85 c0                	test   eax,eax
c0011afc:	74 02                	je     c0011b00 <VgaText::doUpdate()+0x10>
c0011afe:	ff e0                	jmp    eax
c0011b00:	c3                   	ret    
c0011b01:	90                   	nop

c0011b02 <VgaText::write(unsigned long long, void*, int*)>:
c0011b02:	55                   	push   ebp
c0011b03:	57                   	push   edi
c0011b04:	56                   	push   esi
c0011b05:	53                   	push   ebx
c0011b06:	83 ec 0c             	sub    esp,0xc
c0011b09:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011b0d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011b11:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011b15:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0011b1c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011b1f:	39 eb                	cmp    ebx,ebp
c0011b21:	74 13                	je     c0011b36 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011b23:	43                   	inc    ebx
c0011b24:	50                   	push   eax
c0011b25:	50                   	push   eax
c0011b26:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011b2a:	50                   	push   eax
c0011b2b:	56                   	push   esi
c0011b2c:	e8 1f f7 ff ff       	call   c0011250 <VgaText::putchar(char)>
c0011b31:	83 c4 10             	add    esp,0x10
c0011b34:	eb e9                	jmp    c0011b1f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011b36:	83 ec 0c             	sub    esp,0xc
c0011b39:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011b40:	56                   	push   esi
c0011b41:	e8 aa ff ff ff       	call   c0011af0 <VgaText::doUpdate()>
c0011b46:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011b4a:	89 38                	mov    DWORD PTR [eax],edi
c0011b4c:	83 c4 1c             	add    esp,0x1c
c0011b4f:	31 c0                	xor    eax,eax
c0011b51:	5b                   	pop    ebx
c0011b52:	5e                   	pop    esi
c0011b53:	5f                   	pop    edi
c0011b54:	5d                   	pop    ebp
c0011b55:	c3                   	ret    

c0011b56 <VgaText::isAtty()>:
c0011b56:	b0 01                	mov    al,0x1
c0011b58:	c3                   	ret    

c0011b59 <newTerminal(char*)>:
c0011b59:	83 ec 28             	sub    esp,0x28
c0011b5c:	68 60 12 00 00       	push   0x1260
c0011b61:	e8 f6 e3 ff ff       	call   c000ff5c <malloc>
c0011b66:	5a                   	pop    edx
c0011b67:	59                   	pop    ecx
c0011b68:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011b6c:	50                   	push   eax
c0011b6d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b71:	e8 e0 fc ff ff       	call   c0011856 <VgaText::VgaText(char const*)>
c0011b76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011b7a:	83 c4 2c             	add    esp,0x2c
c0011b7d:	c3                   	ret    

c0011b7e <TSS::TSS()>:
c0011b7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b82:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011b89:	90                   	nop
c0011b8a:	c3                   	ret    
c0011b8b:	90                   	nop

c0011b8c <TSS::setESP(unsigned long)>:
c0011b8c:	55                   	push   ebp
c0011b8d:	89 e5                	mov    ebp,esp
c0011b8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b92:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b95:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011b98:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011b9b:	90                   	nop
c0011b9c:	5d                   	pop    ebp
c0011b9d:	c3                   	ret    

c0011b9e <TSS::flush()>:
c0011b9e:	55                   	push   ebp
c0011b9f:	89 e5                	mov    ebp,esp
c0011ba1:	83 ec 10             	sub    esp,0x10
c0011ba4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ba7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ba9:	83 c8 03             	or     eax,0x3
c0011bac:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011bb0:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011bb4:	66 89 d0             	mov    ax,dx
c0011bb7:	0f 00 d8             	ltr    ax
c0011bba:	90                   	nop
c0011bbb:	c9                   	leave  
c0011bbc:	c3                   	ret    
c0011bbd:	90                   	nop

c0011bbe <TSS::setup(unsigned long, unsigned long)>:
c0011bbe:	55                   	push   ebp
c0011bbf:	89 e5                	mov    ebp,esp
c0011bc1:	83 ec 18             	sub    esp,0x18
c0011bc4:	83 ec 0c             	sub    esp,0xc
c0011bc7:	6a 68                	push   0x68
c0011bc9:	e8 8e e3 ff ff       	call   c000ff5c <malloc>
c0011bce:	83 c4 10             	add    esp,0x10
c0011bd1:	89 c2                	mov    edx,eax
c0011bd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011bd6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011bd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011bdc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011bdf:	83 ec 04             	sub    esp,0x4
c0011be2:	6a 68                	push   0x68
c0011be4:	6a 00                	push   0x0
c0011be6:	50                   	push   eax
c0011be7:	e8 d8 ea fe ff       	call   c00006c4 <memset>
c0011bec:	83 c4 10             	add    esp,0x10
c0011bef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011bf2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011bf5:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011bfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011bfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011c01:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011c07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011c0d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011c10:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011c13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011c19:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011c1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c22:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011c25:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011c2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011c31:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011c37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011c3d:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011c43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011c49:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011c4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011c55:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011c5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011c61:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011c64:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011c67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011c6d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011c70:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011c73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011c79:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011c80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c83:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011c86:	0f 20 da             	mov    edx,cr3
c0011c89:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011c8c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011c8f:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011c92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011c98:	83 ec 08             	sub    esp,0x8
c0011c9b:	50                   	push   eax
c0011c9c:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011c9f:	50                   	push   eax
c0011ca0:	e8 95 da ff ff       	call   c000f73a <GDTEntry::setBase(unsigned int)>
c0011ca5:	83 c4 10             	add    esp,0x10
c0011ca8:	83 ec 08             	sub    esp,0x8
c0011cab:	6a 68                	push   0x68
c0011cad:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011cb0:	50                   	push   eax
c0011cb1:	e8 a0 da ff ff       	call   c000f756 <GDTEntry::setLimit(unsigned int)>
c0011cb6:	83 c4 10             	add    esp,0x10
c0011cb9:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011cbd:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011cc0:	83 e0 0f             	and    eax,0xf
c0011cc3:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011cc6:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011cc9:	83 c8 40             	or     eax,0x40
c0011ccc:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011ccf:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0011cd4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011cda:	05 78 01 00 00       	add    eax,0x178
c0011cdf:	83 ec 04             	sub    esp,0x4
c0011ce2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011ce5:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011ce8:	50                   	push   eax
c0011ce9:	e8 9c da ff ff       	call   c000f78a <GDT::addEntry(GDTEntry)>
c0011cee:	83 c4 10             	add    esp,0x10
c0011cf1:	89 c2                	mov    edx,eax
c0011cf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011cf6:	89 10                	mov    DWORD PTR [eax],edx
c0011cf8:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0011cfd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011d03:	05 78 01 00 00       	add    eax,0x178
c0011d08:	83 ec 0c             	sub    esp,0xc
c0011d0b:	50                   	push   eax
c0011d0c:	e8 bd da ff ff       	call   c000f7ce <GDT::flush()>
c0011d11:	83 c4 10             	add    esp,0x10
c0011d14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011d17:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d19:	83 ec 08             	sub    esp,0x8
c0011d1c:	50                   	push   eax
c0011d1d:	68 f0 ac 02 c0       	push   0xc002acf0
c0011d22:	e8 1f 15 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0011d27:	83 c4 10             	add    esp,0x10
c0011d2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011d2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d2f:	c9                   	leave  
c0011d30:	c3                   	ret    
c0011d31:	90                   	nop

c0011d32 <UnixFile::UnixFile(int)>:
c0011d32:	53                   	push   ebx
c0011d33:	83 ec 28             	sub    esp,0x28
c0011d36:	ba 9c ae 02 c0       	mov    edx,0xc002ae9c
c0011d3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d3f:	89 10                	mov    DWORD PTR [eax],edx
c0011d41:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011d49:	0f 8f 8c 01 00 00    	jg     c0011edb <UnixFile::UnixFile(int)+0x1a9>
c0011d4f:	a1 48 03 03 c0       	mov    eax,ds:0xc0030348
c0011d54:	8d 50 01             	lea    edx,[eax+0x1]
c0011d57:	89 15 48 03 03 c0    	mov    DWORD PTR ds:0xc0030348,edx
c0011d5d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011d61:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011d64:	83 ec 08             	sub    esp,0x8
c0011d67:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011d6b:	68 80 14 03 c0       	push   0xc0031480
c0011d70:	e8 d9 6a 01 00       	call   c002884e <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011d75:	83 c4 10             	add    esp,0x10
c0011d78:	a0 8c 14 03 c0       	mov    al,ds:0xc003148c
c0011d7d:	83 f0 01             	xor    eax,0x1
c0011d80:	84 c0                	test   al,al
c0011d82:	0f 84 54 01 00 00    	je     c0011edc <UnixFile::UnixFile(int)+0x1aa>
c0011d88:	c6 05 8c 14 03 c0 01 	mov    BYTE PTR ds:0xc003148c,0x1
c0011d8f:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011d97:	83 ec 0c             	sub    esp,0xc
c0011d9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011d9e:	e8 b9 e1 ff ff       	call   c000ff5c <malloc>
c0011da3:	83 c4 10             	add    esp,0x10
c0011da6:	89 c3                	mov    ebx,eax
c0011da8:	83 ec 08             	sub    esp,0x8
c0011dab:	68 03 ff ff 0f       	push   0xfffff03
c0011db0:	53                   	push   ebx
c0011db1:	e8 96 02 00 00       	call   c001204c <ReservedFilename::ReservedFilename(int)>
c0011db6:	83 c4 10             	add    esp,0x10
c0011db9:	89 1d 94 14 03 c0    	mov    DWORD PTR ds:0xc0031494,ebx
c0011dbf:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011dc7:	83 ec 0c             	sub    esp,0xc
c0011dca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011dce:	e8 89 e1 ff ff       	call   c000ff5c <malloc>
c0011dd3:	83 c4 10             	add    esp,0x10
c0011dd6:	89 c3                	mov    ebx,eax
c0011dd8:	83 ec 08             	sub    esp,0x8
c0011ddb:	68 01 ff ff 0f       	push   0xfffff01
c0011de0:	53                   	push   ebx
c0011de1:	e8 66 02 00 00       	call   c001204c <ReservedFilename::ReservedFilename(int)>
c0011de6:	83 c4 10             	add    esp,0x10
c0011de9:	89 1d 90 14 03 c0    	mov    DWORD PTR ds:0xc0031490,ebx
c0011def:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011df7:	83 ec 0c             	sub    esp,0xc
c0011dfa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011dfe:	e8 59 e1 ff ff       	call   c000ff5c <malloc>
c0011e03:	83 c4 10             	add    esp,0x10
c0011e06:	89 c3                	mov    ebx,eax
c0011e08:	83 ec 08             	sub    esp,0x8
c0011e0b:	68 00 ff ff 0f       	push   0xfffff00
c0011e10:	53                   	push   ebx
c0011e11:	e8 36 02 00 00       	call   c001204c <ReservedFilename::ReservedFilename(int)>
c0011e16:	83 c4 10             	add    esp,0x10
c0011e19:	89 1d 9c 14 03 c0    	mov    DWORD PTR ds:0xc003149c,ebx
c0011e1f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011e27:	83 ec 0c             	sub    esp,0xc
c0011e2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011e2e:	e8 29 e1 ff ff       	call   c000ff5c <malloc>
c0011e33:	83 c4 10             	add    esp,0x10
c0011e36:	89 c3                	mov    ebx,eax
c0011e38:	83 ec 08             	sub    esp,0x8
c0011e3b:	68 02 ff ff 0f       	push   0xfffff02
c0011e40:	53                   	push   ebx
c0011e41:	e8 06 02 00 00       	call   c001204c <ReservedFilename::ReservedFilename(int)>
c0011e46:	83 c4 10             	add    esp,0x10
c0011e49:	89 1d 98 14 03 c0    	mov    DWORD PTR ds:0xc0031498,ebx
c0011e4f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011e57:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011e5c:	7f 7e                	jg     c0011edc <UnixFile::UnixFile(int)+0x1aa>
c0011e5e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011e66:	83 ec 0c             	sub    esp,0xc
c0011e69:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011e6d:	e8 ea e0 ff ff       	call   c000ff5c <malloc>
c0011e72:	83 c4 10             	add    esp,0x10
c0011e75:	89 c3                	mov    ebx,eax
c0011e77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011e7b:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011e80:	83 ec 08             	sub    esp,0x8
c0011e83:	50                   	push   eax
c0011e84:	53                   	push   ebx
c0011e85:	e8 c2 01 00 00       	call   c001204c <ReservedFilename::ReservedFilename(int)>
c0011e8a:	83 c4 10             	add    esp,0x10
c0011e8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011e91:	89 1c 85 a0 14 03 c0 	mov    DWORD PTR [eax*4-0x3ffceb60],ebx
c0011e98:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011ea0:	83 ec 0c             	sub    esp,0xc
c0011ea3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011ea7:	e8 b0 e0 ff ff       	call   c000ff5c <malloc>
c0011eac:	83 c4 10             	add    esp,0x10
c0011eaf:	89 c3                	mov    ebx,eax
c0011eb1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011eb5:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011eba:	83 ec 08             	sub    esp,0x8
c0011ebd:	50                   	push   eax
c0011ebe:	53                   	push   ebx
c0011ebf:	e8 88 01 00 00       	call   c001204c <ReservedFilename::ReservedFilename(int)>
c0011ec4:	83 c4 10             	add    esp,0x10
c0011ec7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011ecb:	89 1c 85 e0 14 03 c0 	mov    DWORD PTR [eax*4-0x3ffceb20],ebx
c0011ed2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011ed6:	e9 7c ff ff ff       	jmp    c0011e57 <UnixFile::UnixFile(int)+0x125>
c0011edb:	90                   	nop
c0011edc:	83 c4 28             	add    esp,0x28
c0011edf:	5b                   	pop    ebx
c0011ee0:	c3                   	ret    
c0011ee1:	90                   	nop

c0011ee2 <UnixFile::~UnixFile()>:
c0011ee2:	83 ec 1c             	sub    esp,0x1c
c0011ee5:	ba 9c ae 02 c0       	mov    edx,0xc002ae9c
c0011eea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011eee:	89 10                	mov    DWORD PTR [eax],edx
c0011ef0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ef4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011ef7:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011efc:	7f 73                	jg     c0011f71 <UnixFile::~UnixFile()+0x8f>
c0011efe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011f06:	83 ec 0c             	sub    esp,0xc
c0011f09:	68 80 14 03 c0       	push   0xc0031480
c0011f0e:	e8 0f 6a 01 00       	call   c0028922 <LinkedList<UnixFile>::getFirstElement()>
c0011f13:	83 c4 10             	add    esp,0x10
c0011f16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011f1a:	83 ec 0c             	sub    esp,0xc
c0011f1d:	68 80 14 03 c0       	push   0xc0031480
c0011f22:	e8 03 6a 01 00       	call   c002892a <LinkedList<UnixFile>::removeFirst()>
c0011f27:	83 c4 10             	add    esp,0x10
c0011f2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011f2e:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011f32:	74 40                	je     c0011f74 <UnixFile::~UnixFile()+0x92>
c0011f34:	83 ec 08             	sub    esp,0x8
c0011f37:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011f3b:	68 80 14 03 c0       	push   0xc0031480
c0011f40:	e8 09 69 01 00       	call   c002884e <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011f45:	83 c4 10             	add    esp,0x10
c0011f48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f4c:	8d 50 01             	lea    edx,[eax+0x1]
c0011f4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011f53:	3d 88 13 00 00       	cmp    eax,0x1388
c0011f58:	0f 94 c0             	sete   al
c0011f5b:	84 c0                	test   al,al
c0011f5d:	74 a7                	je     c0011f06 <UnixFile::~UnixFile()+0x24>
c0011f5f:	83 ec 0c             	sub    esp,0xc
c0011f62:	68 b0 ad 02 c0       	push   0xc002adb0
c0011f67:	e8 8f 88 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c0011f6c:	83 c4 10             	add    esp,0x10
c0011f6f:	eb 95                	jmp    c0011f06 <UnixFile::~UnixFile()+0x24>
c0011f71:	90                   	nop
c0011f72:	eb 01                	jmp    c0011f75 <UnixFile::~UnixFile()+0x93>
c0011f74:	90                   	nop
c0011f75:	90                   	nop
c0011f76:	83 c4 1c             	add    esp,0x1c
c0011f79:	c3                   	ret    

c0011f7a <UnixFile::~UnixFile()>:
c0011f7a:	83 ec 0c             	sub    esp,0xc
c0011f7d:	83 ec 0c             	sub    esp,0xc
c0011f80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011f84:	e8 59 ff ff ff       	call   c0011ee2 <UnixFile::~UnixFile()>
c0011f89:	83 c4 10             	add    esp,0x10
c0011f8c:	83 ec 08             	sub    esp,0x8
c0011f8f:	6a 0c                	push   0xc
c0011f91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011f95:	e8 cc 11 00 00       	call   c0013166 <operator delete(void*, unsigned long)>
c0011f9a:	83 c4 10             	add    esp,0x10
c0011f9d:	83 c4 0c             	add    esp,0xc
c0011fa0:	c3                   	ret    
c0011fa1:	90                   	nop

c0011fa2 <UnixFile::getFileDescriptor()>:
c0011fa2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011fa9:	c3                   	ret    

c0011faa <getFromFileDescriptor(int)>:
c0011faa:	53                   	push   ebx
c0011fab:	83 ec 08             	sub    esp,0x8
c0011fae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011fb2:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011fb8:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011fbe:	7f 2c                	jg     c0011fec <getFromFileDescriptor(int)+0x42>
c0011fc0:	83 ec 0c             	sub    esp,0xc
c0011fc3:	68 80 14 03 c0       	push   0xc0031480
c0011fc8:	e8 55 69 01 00       	call   c0028922 <LinkedList<UnixFile>::getFirstElement()>
c0011fcd:	83 c4 10             	add    esp,0x10
c0011fd0:	85 c0                	test   eax,eax
c0011fd2:	75 04                	jne    c0011fd8 <getFromFileDescriptor(int)+0x2e>
c0011fd4:	31 c0                	xor    eax,eax
c0011fd6:	eb 6e                	jmp    c0012046 <getFromFileDescriptor(int)+0x9c>
c0011fd8:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011fdb:	74 69                	je     c0012046 <getFromFileDescriptor(int)+0x9c>
c0011fdd:	52                   	push   edx
c0011fde:	52                   	push   edx
c0011fdf:	50                   	push   eax
c0011fe0:	68 80 14 03 c0       	push   0xc0031480
c0011fe5:	e8 e2 69 01 00       	call   c00289cc <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011fea:	eb e1                	jmp    c0011fcd <getFromFileDescriptor(int)+0x23>
c0011fec:	a1 94 14 03 c0       	mov    eax,ds:0xc0031494
c0011ff1:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011ff7:	74 4d                	je     c0012046 <getFromFileDescriptor(int)+0x9c>
c0011ff9:	a1 90 14 03 c0       	mov    eax,ds:0xc0031490
c0011ffe:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0012004:	74 40                	je     c0012046 <getFromFileDescriptor(int)+0x9c>
c0012006:	a1 98 14 03 c0       	mov    eax,ds:0xc0031498
c001200b:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0012011:	74 33                	je     c0012046 <getFromFileDescriptor(int)+0x9c>
c0012013:	a1 9c 14 03 c0       	mov    eax,ds:0xc003149c
c0012018:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001201e:	74 26                	je     c0012046 <getFromFileDescriptor(int)+0x9c>
c0012020:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0012026:	83 f8 08             	cmp    eax,0x8
c0012029:	77 09                	ja     c0012034 <getFromFileDescriptor(int)+0x8a>
c001202b:	8b 04 85 a0 14 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceb60]
c0012032:	eb 12                	jmp    c0012046 <getFromFileDescriptor(int)+0x9c>
c0012034:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001203a:	83 fb 08             	cmp    ebx,0x8
c001203d:	77 95                	ja     c0011fd4 <getFromFileDescriptor(int)+0x2a>
c001203f:	8b 04 9d e0 14 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffceb20]
c0012046:	83 c4 08             	add    esp,0x8
c0012049:	5b                   	pop    ebx
c001204a:	c3                   	ret    
c001204b:	90                   	nop

c001204c <ReservedFilename::ReservedFilename(int)>:
c001204c:	83 ec 0c             	sub    esp,0xc
c001204f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012053:	83 ec 08             	sub    esp,0x8
c0012056:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001205a:	50                   	push   eax
c001205b:	e8 d2 fc ff ff       	call   c0011d32 <UnixFile::UnixFile(int)>
c0012060:	83 c4 10             	add    esp,0x10
c0012063:	ba 80 ae 02 c0       	mov    edx,0xc002ae80
c0012068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001206c:	89 10                	mov    DWORD PTR [eax],edx
c001206e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012072:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012076:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012079:	90                   	nop
c001207a:	83 c4 0c             	add    esp,0xc
c001207d:	c3                   	ret    

c001207e <ReservedFilename::~ReservedFilename()>:
c001207e:	83 ec 0c             	sub    esp,0xc
c0012081:	ba 80 ae 02 c0       	mov    edx,0xc002ae80
c0012086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001208a:	89 10                	mov    DWORD PTR [eax],edx
c001208c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012090:	83 ec 0c             	sub    esp,0xc
c0012093:	50                   	push   eax
c0012094:	e8 49 fe ff ff       	call   c0011ee2 <UnixFile::~UnixFile()>
c0012099:	83 c4 10             	add    esp,0x10
c001209c:	90                   	nop
c001209d:	83 c4 0c             	add    esp,0xc
c00120a0:	c3                   	ret    
c00120a1:	90                   	nop

c00120a2 <ReservedFilename::~ReservedFilename()>:
c00120a2:	83 ec 0c             	sub    esp,0xc
c00120a5:	83 ec 0c             	sub    esp,0xc
c00120a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00120ac:	e8 cd ff ff ff       	call   c001207e <ReservedFilename::~ReservedFilename()>
c00120b1:	83 c4 10             	add    esp,0x10
c00120b4:	83 ec 08             	sub    esp,0x8
c00120b7:	6a 0c                	push   0xc
c00120b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00120bd:	e8 a4 10 00 00       	call   c0013166 <operator delete(void*, unsigned long)>
c00120c2:	83 c4 10             	add    esp,0x10
c00120c5:	83 c4 0c             	add    esp,0xc
c00120c8:	c3                   	ret    
c00120c9:	90                   	nop

c00120ca <ReservedFilename::read(unsigned long long, void*, int*)>:
c00120ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00120d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00120d5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00120da:	75 08                	jne    c00120e4 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00120dc:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00120e2:	eb 38                	jmp    c001211c <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00120e4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00120e9:	75 17                	jne    c0012102 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00120eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120f0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00120f3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00120f9:	8b 10                	mov    edx,DWORD PTR [eax]
c00120fb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00120ff:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0012102:	89 c1                	mov    ecx,eax
c0012104:	83 e1 fd             	and    ecx,0xfffffffd
c0012107:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c001210d:	74 cd                	je     c00120dc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001210f:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012114:	83 e0 ef             	and    eax,0xffffffef
c0012117:	83 f8 08             	cmp    eax,0x8
c001211a:	76 c0                	jbe    c00120dc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001211c:	31 c0                	xor    eax,eax
c001211e:	c3                   	ret    
c001211f:	90                   	nop

c0012120 <ReservedFilename::isAtty()>:
c0012120:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012124:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0012127:	31 c0                	xor    eax,eax
c0012129:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001212f:	74 09                	je     c001213a <ReservedFilename::isAtty()+0x1a>
c0012131:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0012137:	0f 94 c0             	sete   al
c001213a:	c3                   	ret    
c001213b:	90                   	nop

c001213c <ReservedFilename::write(unsigned long long, void*, int*)>:
c001213c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012140:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012144:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012147:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001214b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012150:	75 08                	jne    c001215a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0012152:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012158:	eb 3d                	jmp    c0012197 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001215a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001215f:	75 17                	jne    c0012178 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0012161:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012166:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012169:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001216f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012175:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0012178:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001217d:	75 04                	jne    c0012183 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c001217f:	89 0a                	mov    DWORD PTR [edx],ecx
c0012181:	eb 14                	jmp    c0012197 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0012183:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0012188:	74 c8                	je     c0012152 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001218a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001218f:	83 e0 ef             	and    eax,0xffffffef
c0012192:	83 f8 08             	cmp    eax,0x8
c0012195:	76 bb                	jbe    c0012152 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0012197:	31 c0                	xor    eax,eax
c0012199:	c3                   	ret    

c001219a <__static_initialization_and_destruction_0(int, int)>:
c001219a:	83 ec 0c             	sub    esp,0xc
c001219d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00121a2:	75 34                	jne    c00121d8 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00121a4:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00121ac:	75 2a                	jne    c00121d8 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00121ae:	83 ec 0c             	sub    esp,0xc
c00121b1:	68 80 14 03 c0       	push   0xc0031480
c00121b6:	e8 3b 66 01 00       	call   c00287f6 <LinkedList<UnixFile>::LinkedList()>
c00121bb:	83 c4 10             	add    esp,0x10
c00121be:	83 ec 04             	sub    esp,0x4
c00121c1:	68 e4 02 03 c0       	push   0xc00302e4
c00121c6:	68 80 14 03 c0       	push   0xc0031480
c00121cb:	68 d4 89 02 c0       	push   0xc00289d4
c00121d0:	e8 0b 0f 00 00       	call   c00130e0 <__cxa_atexit>
c00121d5:	83 c4 10             	add    esp,0x10
c00121d8:	90                   	nop
c00121d9:	83 c4 0c             	add    esp,0xc
c00121dc:	c3                   	ret    

c00121dd <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00121dd:	83 ec 0c             	sub    esp,0xc
c00121e0:	83 ec 08             	sub    esp,0x8
c00121e3:	68 ff ff 00 00       	push   0xffff
c00121e8:	6a 01                	push   0x1
c00121ea:	e8 ab ff ff ff       	call   c001219a <__static_initialization_and_destruction_0(int, int)>
c00121ef:	83 c4 10             	add    esp,0x10
c00121f2:	83 c4 0c             	add    esp,0xc
c00121f5:	c3                   	ret    

c00121f6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00121f6:	53                   	push   ebx
c00121f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00121fb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00121ff:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0012205:	89 c8                	mov    eax,ecx
c0012207:	d1 e8                	shr    eax,1
c0012209:	03 05 4c 03 03 c0    	add    eax,DWORD PTR ds:0xc003034c
c001220f:	83 e1 01             	and    ecx,0x1
c0012212:	8a 10                	mov    dl,BYTE PTR [eax]
c0012214:	75 09                	jne    c001221f <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0012216:	83 e2 f0             	and    edx,0xfffffff0
c0012219:	09 da                	or     edx,ebx
c001221b:	88 10                	mov    BYTE PTR [eax],dl
c001221d:	5b                   	pop    ebx
c001221e:	c3                   	ret    
c001221f:	c1 e3 04             	shl    ebx,0x4
c0012222:	83 e2 0f             	and    edx,0xf
c0012225:	09 da                	or     edx,ebx
c0012227:	88 10                	mov    BYTE PTR [eax],dl
c0012229:	5b                   	pop    ebx
c001222a:	c3                   	ret    

c001222b <Virt::getPageState(unsigned long)>:
c001222b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001222f:	8b 0d 4c 03 03 c0    	mov    ecx,DWORD PTR ds:0xc003034c
c0012235:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001223b:	89 d0                	mov    eax,edx
c001223d:	d1 e8                	shr    eax,1
c001223f:	83 e2 01             	and    edx,0x1
c0012242:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0012245:	75 04                	jne    c001224b <Virt::getPageState(unsigned long)+0x20>
c0012247:	83 e0 0f             	and    eax,0xf
c001224a:	c3                   	ret    
c001224b:	c0 e8 04             	shr    al,0x4
c001224e:	c3                   	ret    

c001224f <Virt::allocateKernelVirtualPages(int)>:
c001224f:	55                   	push   ebp
c0012250:	31 ed                	xor    ebp,ebp
c0012252:	57                   	push   edi
c0012253:	56                   	push   esi
c0012254:	53                   	push   ebx
c0012255:	31 db                	xor    ebx,ebx
c0012257:	83 ec 1c             	sub    esp,0x1c
c001225a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001225e:	8b 3d 50 03 03 c0    	mov    edi,DWORD PTR ds:0xc0030350
c0012264:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0012269:	57                   	push   edi
c001226a:	e8 bc ff ff ff       	call   c001222b <Virt::getPageState(unsigned long)>
c001226f:	5a                   	pop    edx
c0012270:	84 c0                	test   al,al
c0012272:	75 3a                	jne    c00122ae <Virt::allocateKernelVirtualPages(int)+0x5f>
c0012274:	85 db                	test   ebx,ebx
c0012276:	75 02                	jne    c001227a <Virt::allocateKernelVirtualPages(int)+0x2b>
c0012278:	89 fd                	mov    ebp,edi
c001227a:	43                   	inc    ebx
c001227b:	39 f3                	cmp    ebx,esi
c001227d:	74 5a                	je     c00122d9 <Virt::allocateKernelVirtualPages(int)+0x8a>
c001227f:	47                   	inc    edi
c0012280:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0012286:	76 31                	jbe    c00122b9 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0012288:	c7 05 50 03 03 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0030350,0xc8000
c0012292:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012297:	75 28                	jne    c00122c1 <Virt::allocateKernelVirtualPages(int)+0x72>
c0012299:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001229e:	bf 00 80 0c 00       	mov    edi,0xc8000
c00122a3:	57                   	push   edi
c00122a4:	e8 82 ff ff ff       	call   c001222b <Virt::getPageState(unsigned long)>
c00122a9:	5a                   	pop    edx
c00122aa:	84 c0                	test   al,al
c00122ac:	74 c6                	je     c0012274 <Virt::allocateKernelVirtualPages(int)+0x25>
c00122ae:	31 db                	xor    ebx,ebx
c00122b0:	47                   	inc    edi
c00122b1:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00122b7:	77 cf                	ja     c0012288 <Virt::allocateKernelVirtualPages(int)+0x39>
c00122b9:	89 3d 50 03 03 c0    	mov    DWORD PTR ds:0xc0030350,edi
c00122bf:	eb a8                	jmp    c0012269 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00122c1:	83 ec 0c             	sub    esp,0xc
c00122c4:	68 50 af 02 c0       	push   0xc002af50
c00122c9:	e8 2d 85 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c00122ce:	8b 3d 50 03 03 c0    	mov    edi,DWORD PTR ds:0xc0030350
c00122d4:	83 c4 10             	add    esp,0x10
c00122d7:	eb 90                	jmp    c0012269 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00122d9:	89 2d 50 03 03 c0    	mov    DWORD PTR ds:0xc0030350,ebp
c00122df:	4b                   	dec    ebx
c00122e0:	74 5f                	je     c0012341 <Virt::allocateKernelVirtualPages(int)+0xf2>
c00122e2:	85 f6                	test   esi,esi
c00122e4:	74 3d                	je     c0012323 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00122e6:	89 e8                	mov    eax,ebp
c00122e8:	31 db                	xor    ebx,ebx
c00122ea:	8d 7e ff             	lea    edi,[esi-0x1]
c00122ed:	eb 14                	jmp    c0012303 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00122ef:	6a 01                	push   0x1
c00122f1:	43                   	inc    ebx
c00122f2:	50                   	push   eax
c00122f3:	e8 fe fe ff ff       	call   c00121f6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00122f8:	58                   	pop    eax
c00122f9:	39 f3                	cmp    ebx,esi
c00122fb:	5a                   	pop    edx
c00122fc:	74 25                	je     c0012323 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00122fe:	a1 50 03 03 c0       	mov    eax,ds:0xc0030350
c0012303:	8d 50 01             	lea    edx,[eax+0x1]
c0012306:	85 db                	test   ebx,ebx
c0012308:	89 15 50 03 03 c0    	mov    DWORD PTR ds:0xc0030350,edx
c001230e:	74 20                	je     c0012330 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0012310:	39 df                	cmp    edi,ebx
c0012312:	75 db                	jne    c00122ef <Virt::allocateKernelVirtualPages(int)+0xa0>
c0012314:	6a 03                	push   0x3
c0012316:	43                   	inc    ebx
c0012317:	50                   	push   eax
c0012318:	e8 d9 fe ff ff       	call   c00121f6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001231d:	59                   	pop    ecx
c001231e:	39 f3                	cmp    ebx,esi
c0012320:	58                   	pop    eax
c0012321:	75 db                	jne    c00122fe <Virt::allocateKernelVirtualPages(int)+0xaf>
c0012323:	83 c4 1c             	add    esp,0x1c
c0012326:	89 e8                	mov    eax,ebp
c0012328:	5b                   	pop    ebx
c0012329:	c1 e0 0c             	shl    eax,0xc
c001232c:	5e                   	pop    esi
c001232d:	5f                   	pop    edi
c001232e:	5d                   	pop    ebp
c001232f:	c3                   	ret    
c0012330:	6a 02                	push   0x2
c0012332:	bb 01 00 00 00       	mov    ebx,0x1
c0012337:	50                   	push   eax
c0012338:	e8 b9 fe ff ff       	call   c00121f6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001233d:	58                   	pop    eax
c001233e:	5a                   	pop    edx
c001233f:	eb bd                	jmp    c00122fe <Virt::allocateKernelVirtualPages(int)+0xaf>
c0012341:	6a 04                	push   0x4
c0012343:	8d 45 01             	lea    eax,[ebp+0x1]
c0012346:	55                   	push   ebp
c0012347:	a3 50 03 03 c0       	mov    ds:0xc0030350,eax
c001234c:	e8 a5 fe ff ff       	call   c00121f6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012351:	59                   	pop    ecx
c0012352:	89 e8                	mov    eax,ebp
c0012354:	5b                   	pop    ebx
c0012355:	c1 e0 0c             	shl    eax,0xc
c0012358:	83 c4 1c             	add    esp,0x1c
c001235b:	5b                   	pop    ebx
c001235c:	5e                   	pop    esi
c001235d:	5f                   	pop    edi
c001235e:	5d                   	pop    ebp
c001235f:	c3                   	ret    

c0012360 <Virt::freeKernelVirtualPages(unsigned long)>:
c0012360:	57                   	push   edi
c0012361:	56                   	push   esi
c0012362:	be 01 00 00 00       	mov    esi,0x1
c0012367:	53                   	push   ebx
c0012368:	83 ec 10             	sub    esp,0x10
c001236b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001236f:	c1 eb 0c             	shr    ebx,0xc
c0012372:	eb 3f                	jmp    c00123b3 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0012374:	e8 89 01 00 00       	call   c0012502 <Virt::getAKernelVAS()>
c0012379:	83 ec 08             	sub    esp,0x8
c001237c:	57                   	push   edi
c001237d:	50                   	push   eax
c001237e:	e8 f7 09 00 00       	call   c0012d7a <VAS::getPageTableEntry(unsigned long)>
c0012383:	83 c4 10             	add    esp,0x10
c0012386:	8b 00                	mov    eax,DWORD PTR [eax]
c0012388:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001238c:	f6 c4 04             	test   ah,0x4
c001238f:	75 5f                	jne    c00123f0 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0012391:	80 fa 04             	cmp    dl,0x4
c0012394:	74 78                	je     c001240e <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0012396:	80 fa 02             	cmp    dl,0x2
c0012399:	0f 84 88 00 00 00    	je     c0012427 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001239f:	80 fa 03             	cmp    dl,0x3
c00123a2:	0f 84 ad 00 00 00    	je     c0012455 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c00123a8:	fe ca                	dec    dl
c00123aa:	0f 84 92 00 00 00    	je     c0012442 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00123b0:	43                   	inc    ebx
c00123b1:	31 f6                	xor    esi,esi
c00123b3:	53                   	push   ebx
c00123b4:	e8 72 fe ff ff       	call   c001222b <Virt::getPageState(unsigned long)>
c00123b9:	5f                   	pop    edi
c00123ba:	89 df                	mov    edi,ebx
c00123bc:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00123c0:	c1 e7 0c             	shl    edi,0xc
c00123c3:	84 c0                	test   al,al
c00123c5:	75 ad                	jne    c0012374 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00123c7:	83 ec 0c             	sub    esp,0xc
c00123ca:	68 d5 b0 02 c0       	push   0xc002b0d5
c00123cf:	e8 27 84 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c00123d4:	e8 29 01 00 00       	call   c0012502 <Virt::getAKernelVAS()>
c00123d9:	5a                   	pop    edx
c00123da:	59                   	pop    ecx
c00123db:	57                   	push   edi
c00123dc:	50                   	push   eax
c00123dd:	e8 98 09 00 00       	call   c0012d7a <VAS::getPageTableEntry(unsigned long)>
c00123e2:	83 c4 10             	add    esp,0x10
c00123e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00123e7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00123eb:	f6 c4 04             	test   ah,0x4
c00123ee:	74 c0                	je     c00123b0 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00123f0:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00123f4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00123f9:	83 ec 0c             	sub    esp,0xc
c00123fc:	50                   	push   eax
c00123fd:	e8 6d e1 ff ff       	call   c001056f <Phys::freePage(unsigned long)>
c0012402:	83 c4 10             	add    esp,0x10
c0012405:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012409:	80 fa 04             	cmp    dl,0x4
c001240c:	75 88                	jne    c0012396 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c001240e:	89 f0                	mov    eax,esi
c0012410:	84 c0                	test   al,al
c0012412:	75 47                	jne    c001245b <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0012414:	c7 44 24 20 70 af 02 c0 	mov    DWORD PTR [esp+0x20],0xc002af70
c001241c:	83 c4 10             	add    esp,0x10
c001241f:	5b                   	pop    ebx
c0012420:	5e                   	pop    esi
c0012421:	5f                   	pop    edi
c0012422:	e9 d4 83 00 00       	jmp    c001a7fb <Krnl::panic(char const*)>
c0012427:	89 f0                	mov    eax,esi
c0012429:	84 c0                	test   al,al
c001242b:	75 15                	jne    c0012442 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001242d:	83 ec 0c             	sub    esp,0xc
c0012430:	68 f1 b0 02 c0       	push   0xc002b0f1
c0012435:	e8 c1 83 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c001243a:	83 c4 10             	add    esp,0x10
c001243d:	e9 6e ff ff ff       	jmp    c00123b0 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012442:	83 ec 08             	sub    esp,0x8
c0012445:	6a 00                	push   0x0
c0012447:	53                   	push   ebx
c0012448:	e8 a9 fd ff ff       	call   c00121f6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001244d:	83 c4 10             	add    esp,0x10
c0012450:	e9 5b ff ff ff       	jmp    c00123b0 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012455:	89 f0                	mov    eax,esi
c0012457:	84 c0                	test   al,al
c0012459:	75 15                	jne    c0012470 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c001245b:	83 ec 08             	sub    esp,0x8
c001245e:	6a 00                	push   0x0
c0012460:	53                   	push   ebx
c0012461:	e8 90 fd ff ff       	call   c00121f6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012466:	83 c4 10             	add    esp,0x10
c0012469:	83 c4 10             	add    esp,0x10
c001246c:	5b                   	pop    ebx
c001246d:	5e                   	pop    esi
c001246e:	5f                   	pop    edi
c001246f:	c3                   	ret    
c0012470:	c7 44 24 20 0d b1 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b10d
c0012478:	83 c4 10             	add    esp,0x10
c001247b:	5b                   	pop    ebx
c001247c:	5e                   	pop    esi
c001247d:	5f                   	pop    edi
c001247e:	e9 78 83 00 00       	jmp    c001a7fb <Krnl::panic(char const*)>

c0012483 <Virt::virtualMemorySetup()>:
c0012483:	53                   	push   ebx
c0012484:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0012489:	83 ec 08             	sub    esp,0x8
c001248c:	6a 0f                	push   0xf
c001248e:	53                   	push   ebx
c001248f:	43                   	inc    ebx
c0012490:	e8 61 fd ff ff       	call   c00121f6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012495:	59                   	pop    ecx
c0012496:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001249c:	58                   	pop    eax
c001249d:	75 ed                	jne    c001248c <Virt::virtualMemorySetup()+0x9>
c001249f:	83 ec 08             	sub    esp,0x8
c00124a2:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00124a7:	68 00 00 00 c8       	push   0xc8000000
c00124ac:	68 27 b1 02 c0       	push   0xc002b127
c00124b1:	e8 90 0d 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00124b6:	58                   	pop    eax
c00124b7:	5a                   	pop    edx
c00124b8:	68 00 f0 ff ef       	push   0xeffff000
c00124bd:	68 3b b1 02 c0       	push   0xc002b13b
c00124c2:	e8 7f 0d 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00124c7:	83 c4 10             	add    esp,0x10
c00124ca:	83 ec 08             	sub    esp,0x8
c00124cd:	6a 00                	push   0x0
c00124cf:	53                   	push   ebx
c00124d0:	43                   	inc    ebx
c00124d1:	e8 20 fd ff ff       	call   c00121f6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00124d6:	83 c4 10             	add    esp,0x10
c00124d9:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00124df:	75 e9                	jne    c00124ca <Virt::virtualMemorySetup()+0x47>
c00124e1:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00124e6:	83 ec 08             	sub    esp,0x8
c00124e9:	6a 0f                	push   0xf
c00124eb:	53                   	push   ebx
c00124ec:	43                   	inc    ebx
c00124ed:	e8 04 fd ff ff       	call   c00121f6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00124f2:	83 c4 10             	add    esp,0x10
c00124f5:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00124fb:	75 e9                	jne    c00124e6 <Virt::virtualMemorySetup()+0x63>
c00124fd:	83 c4 08             	add    esp,0x8
c0012500:	5b                   	pop    ebx
c0012501:	c3                   	ret    

c0012502 <Virt::getAKernelVAS()>:
c0012502:	a1 04 15 03 c0       	mov    eax,ds:0xc0031504
c0012507:	c3                   	ret    

c0012508 <Virt::setupPageSwapping(int)>:
c0012508:	57                   	push   edi
c0012509:	56                   	push   esi
c001250a:	53                   	push   ebx
c001250b:	83 ec 1c             	sub    esp,0x1c
c001250e:	68 14 01 00 00       	push   0x114
c0012513:	e8 44 da ff ff       	call   c000ff5c <malloc>
c0012518:	83 c4 0c             	add    esp,0xc
c001251b:	89 c6                	mov    esi,eax
c001251d:	ff 35 48 48 03 c0    	push   DWORD PTR ds:0xc0034848
c0012523:	68 4f b1 02 c0       	push   0xc002b14f
c0012528:	50                   	push   eax
c0012529:	e8 c4 11 00 00       	call   c00136f2 <File::File(char const*, Process*)>
c001252e:	89 34 24             	mov    DWORD PTR [esp],esi
c0012531:	e8 96 14 00 00       	call   c00139cc <File::unlink()>
c0012536:	58                   	pop    eax
c0012537:	5a                   	pop    edx
c0012538:	6a 12                	push   0x12
c001253a:	56                   	push   esi
c001253b:	e8 64 12 00 00       	call   c00137a4 <File::open(FileOpenMode)>
c0012540:	83 c4 10             	add    esp,0x10
c0012543:	85 c0                	test   eax,eax
c0012545:	0f 85 ca 00 00 00    	jne    c0012615 <Virt::setupPageSwapping(int)+0x10d>
c001254b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001254f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012557:	c1 e3 08             	shl    ebx,0x8
c001255a:	83 ec 0c             	sub    esp,0xc
c001255d:	68 00 00 01 00       	push   0x10000
c0012562:	e8 f5 d9 ff ff       	call   c000ff5c <malloc>
c0012567:	83 c4 0c             	add    esp,0xc
c001256a:	89 c7                	mov    edi,eax
c001256c:	68 00 00 01 00       	push   0x10000
c0012571:	6a 00                	push   0x0
c0012573:	50                   	push   eax
c0012574:	e8 4b e1 fe ff       	call   c00006c4 <memset>
c0012579:	83 c4 10             	add    esp,0x10
c001257c:	85 db                	test   ebx,ebx
c001257e:	79 03                	jns    c0012583 <Virt::setupPageSwapping(int)+0x7b>
c0012580:	83 c3 0f             	add    ebx,0xf
c0012583:	c1 fb 04             	sar    ebx,0x4
c0012586:	4b                   	dec    ebx
c0012587:	83 fb ff             	cmp    ebx,0xffffffff
c001258a:	74 4b                	je     c00125d7 <Virt::setupPageSwapping(int)+0xcf>
c001258c:	83 ec 0c             	sub    esp,0xc
c001258f:	8b 06                	mov    eax,DWORD PTR [esi]
c0012591:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012595:	52                   	push   edx
c0012596:	57                   	push   edi
c0012597:	6a 00                	push   0x0
c0012599:	68 00 00 01 00       	push   0x10000
c001259e:	56                   	push   esi
c001259f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00125a2:	83 c4 20             	add    esp,0x20
c00125a5:	85 c0                	test   eax,eax
c00125a7:	75 59                	jne    c0012602 <Virt::setupPageSwapping(int)+0xfa>
c00125a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125ad:	3d 00 00 01 00       	cmp    eax,0x10000
c00125b2:	74 d2                	je     c0012586 <Virt::setupPageSwapping(int)+0x7e>
c00125b4:	83 ec 08             	sub    esp,0x8
c00125b7:	4b                   	dec    ebx
c00125b8:	50                   	push   eax
c00125b9:	68 a2 b1 02 c0       	push   0xc002b1a2
c00125be:	e8 83 0c 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00125c3:	c7 04 24 ab b1 02 c0 	mov    DWORD PTR [esp],0xc002b1ab
c00125ca:	e8 2c 82 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c00125cf:	83 c4 10             	add    esp,0x10
c00125d2:	83 fb ff             	cmp    ebx,0xffffffff
c00125d5:	75 b5                	jne    c001258c <Virt::setupPageSwapping(int)+0x84>
c00125d7:	83 ec 0c             	sub    esp,0xc
c00125da:	56                   	push   esi
c00125db:	e8 d2 12 00 00       	call   c00138b2 <File::close()>
c00125e0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00125e3:	e8 94 d9 ff ff       	call   c000ff7c <rfree>
c00125e8:	83 c4 10             	add    esp,0x10
c00125eb:	85 f6                	test   esi,esi
c00125ed:	74 0c                	je     c00125fb <Virt::setupPageSwapping(int)+0xf3>
c00125ef:	83 ec 0c             	sub    esp,0xc
c00125f2:	8b 06                	mov    eax,DWORD PTR [esi]
c00125f4:	56                   	push   esi
c00125f5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00125f8:	83 c4 10             	add    esp,0x10
c00125fb:	83 c4 10             	add    esp,0x10
c00125fe:	5b                   	pop    ebx
c00125ff:	5e                   	pop    esi
c0012600:	5f                   	pop    edi
c0012601:	c3                   	ret    
c0012602:	83 ec 08             	sub    esp,0x8
c0012605:	50                   	push   eax
c0012606:	68 8a b1 02 c0       	push   0xc002b18a
c001260b:	e8 36 0c 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0012610:	83 c4 10             	add    esp,0x10
c0012613:	eb 94                	jmp    c00125a9 <Virt::setupPageSwapping(int)+0xa1>
c0012615:	83 ec 08             	sub    esp,0x8
c0012618:	50                   	push   eax
c0012619:	68 66 b1 02 c0       	push   0xc002b166
c001261e:	e8 23 0c 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0012623:	c7 04 24 6f b1 02 c0 	mov    DWORD PTR [esp],0xc002b16f
c001262a:	e8 cc 81 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c001262f:	83 c4 10             	add    esp,0x10
c0012632:	e9 14 ff ff ff       	jmp    c001254b <Virt::setupPageSwapping(int)+0x43>
c0012637:	90                   	nop

c0012638 <VAS::allocatePages(int, int)>:
c0012638:	55                   	push   ebp
c0012639:	57                   	push   edi
c001263a:	56                   	push   esi
c001263b:	53                   	push   ebx
c001263c:	83 ec 1c             	sub    esp,0x1c
c001263f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012643:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0012648:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001264e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012654:	83 e0 01             	and    eax,0x1
c0012657:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c001265b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001265f:	0f 85 cc 00 00 00    	jne    c0012731 <VAS::allocatePages(int, int)+0xf9>
c0012665:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012668:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001266c:	85 c0                	test   eax,eax
c001266e:	0f 84 a1 00 00 00    	je     c0012715 <VAS::allocatePages(int, int)+0xdd>
c0012674:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012678:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001267c:	c1 e6 0c             	shl    esi,0xc
c001267f:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0012683:	85 c0                	test   eax,eax
c0012685:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0012688:	7e 33                	jle    c00126bd <VAS::allocatePages(int, int)+0x85>
c001268a:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001268e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012692:	81 cd 00 04 00 00    	or     ebp,0x400
c0012698:	e8 5c df ff ff       	call   c00105f9 <Phys::allocatePage()>
c001269d:	55                   	push   ebp
c001269e:	53                   	push   ebx
c001269f:	50                   	push   eax
c00126a0:	57                   	push   edi
c00126a1:	e8 7e 08 00 00       	call   c0012f24 <VAS::mapPage(unsigned long, unsigned long, int)>
c00126a6:	83 c4 10             	add    esp,0x10
c00126a9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126ae:	74 03                	je     c00126b3 <VAS::allocatePages(int, int)+0x7b>
c00126b0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126b3:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126b9:	39 de                	cmp    esi,ebx
c00126bb:	75 db                	jne    c0012698 <VAS::allocatePages(int, int)+0x60>
c00126bd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126c2:	75 12                	jne    c00126d6 <VAS::allocatePages(int, int)+0x9e>
c00126c4:	0f 20 d8             	mov    eax,cr3
c00126c7:	0f 22 d8             	mov    cr3,eax
c00126ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00126ce:	83 c4 1c             	add    esp,0x1c
c00126d1:	5b                   	pop    ebx
c00126d2:	5e                   	pop    esi
c00126d3:	5f                   	pop    edi
c00126d4:	5d                   	pop    ebp
c00126d5:	c3                   	ret    
c00126d6:	c1 ee 0a             	shr    esi,0xa
c00126d9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00126dd:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00126e3:	c1 eb 0a             	shr    ebx,0xa
c00126e6:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c00126ec:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00126f2:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00126f8:	39 c3                	cmp    ebx,eax
c00126fa:	77 ce                	ja     c00126ca <VAS::allocatePages(int, int)+0x92>
c00126fc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126ff:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012705:	39 d8                	cmp    eax,ebx
c0012707:	73 f3                	jae    c00126fc <VAS::allocatePages(int, int)+0xc4>
c0012709:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001270d:	83 c4 1c             	add    esp,0x1c
c0012710:	5b                   	pop    ebx
c0012711:	5e                   	pop    esi
c0012712:	5f                   	pop    edi
c0012713:	5d                   	pop    ebp
c0012714:	c3                   	ret    
c0012715:	83 ec 0c             	sub    esp,0xc
c0012718:	68 94 af 02 c0       	push   0xc002af94
c001271d:	e8 d9 80 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c0012722:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012725:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012729:	83 c4 10             	add    esp,0x10
c001272c:	e9 43 ff ff ff       	jmp    c0012674 <VAS::allocatePages(int, int)+0x3c>
c0012731:	83 ec 0c             	sub    esp,0xc
c0012734:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012738:	e8 12 fb ff ff       	call   c001224f <Virt::allocateKernelVirtualPages(int)>
c001273d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012741:	83 c4 10             	add    esp,0x10
c0012744:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012749:	0f 87 9b 00 00 00    	ja     c00127ea <VAS::allocatePages(int, int)+0x1b2>
c001274f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012753:	85 d2                	test   edx,edx
c0012755:	7e 3c                	jle    c0012793 <VAS::allocatePages(int, int)+0x15b>
c0012757:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001275b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001275f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012763:	c1 e5 0c             	shl    ebp,0xc
c0012766:	81 ce 00 04 00 00    	or     esi,0x400
c001276c:	01 dd                	add    ebp,ebx
c001276e:	e8 86 de ff ff       	call   c00105f9 <Phys::allocatePage()>
c0012773:	56                   	push   esi
c0012774:	53                   	push   ebx
c0012775:	50                   	push   eax
c0012776:	57                   	push   edi
c0012777:	e8 a8 07 00 00       	call   c0012f24 <VAS::mapPage(unsigned long, unsigned long, int)>
c001277c:	83 c4 10             	add    esp,0x10
c001277f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012784:	74 03                	je     c0012789 <VAS::allocatePages(int, int)+0x151>
c0012786:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012789:	81 c3 00 10 00 00    	add    ebx,0x1000
c001278f:	39 dd                	cmp    ebp,ebx
c0012791:	75 db                	jne    c001276e <VAS::allocatePages(int, int)+0x136>
c0012793:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012798:	0f 84 26 ff ff ff    	je     c00126c4 <VAS::allocatePages(int, int)+0x8c>
c001279e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00127a2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00127a6:	89 d3                	mov    ebx,edx
c00127a8:	c1 e0 0c             	shl    eax,0xc
c00127ab:	c1 eb 0a             	shr    ebx,0xa
c00127ae:	01 d0                	add    eax,edx
c00127b0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00127b6:	c1 e8 0a             	shr    eax,0xa
c00127b9:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00127bf:	25 00 f0 ff ff       	and    eax,0xfffff000
c00127c4:	2d 00 00 40 00       	sub    eax,0x400000
c00127c9:	39 c3                	cmp    ebx,eax
c00127cb:	0f 87 f9 fe ff ff    	ja     c00126ca <VAS::allocatePages(int, int)+0x92>
c00127d1:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00127d4:	81 c3 00 10 00 00    	add    ebx,0x1000
c00127da:	39 d8                	cmp    eax,ebx
c00127dc:	73 f3                	jae    c00127d1 <VAS::allocatePages(int, int)+0x199>
c00127de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00127e2:	83 c4 1c             	add    esp,0x1c
c00127e5:	5b                   	pop    ebx
c00127e6:	5e                   	pop    esi
c00127e7:	5f                   	pop    edi
c00127e8:	5d                   	pop    ebp
c00127e9:	c3                   	ret    
c00127ea:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c00127ef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127f5:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00127fc:	0f 84 4d ff ff ff    	je     c001274f <VAS::allocatePages(int, int)+0x117>
c0012802:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c001280a:	e9 40 ff ff ff       	jmp    c001274f <VAS::allocatePages(int, int)+0x117>
c001280f:	90                   	nop

c0012810 <VAS::virtualToPhysical(unsigned long)>:
c0012810:	83 ec 14             	sub    esp,0x14
c0012813:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012817:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001281b:	e8 5a 05 00 00       	call   c0012d7a <VAS::getPageTableEntry(unsigned long)>
c0012820:	8b 00                	mov    eax,DWORD PTR [eax]
c0012822:	83 c4 1c             	add    esp,0x1c
c0012825:	25 00 f0 ff ff       	and    eax,0xfffff000
c001282a:	c3                   	ret    
c001282b:	90                   	nop

c001282c <VAS::freeAllocatedPages(unsigned long)>:
c001282c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012830:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012834:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0012838:	74 09                	je     c0012843 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001283a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001283e:	e9 1d fb ff ff       	jmp    c0012360 <Virt::freeKernelVirtualPages(unsigned long)>
c0012843:	c7 44 24 04 c0 af 02 c0 	mov    DWORD PTR [esp+0x4],0xc002afc0
c001284b:	e9 f6 09 00 00       	jmp    c0013246 <Dbg::kprintf(char const*, ...)>

c0012850 <VAS::VAS()>:
c0012850:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012854:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001285b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001285f:	a3 04 15 03 c0       	mov    ds:0xc0031504,eax
c0012864:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012868:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c001286c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012870:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0012873:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012877:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c001287e:	90                   	nop
c001287f:	c3                   	ret    

c0012880 <VAS::~VAS()>:
c0012880:	83 ec 2c             	sub    esp,0x2c
c0012883:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001288b:	e8 16 b8 00 00       	call   c001e0a6 <lockScheduler()>
c0012890:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012895:	8b 00                	mov    eax,DWORD PTR [eax]
c0012897:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001289a:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00128a0:	83 ec 04             	sub    esp,0x4
c00128a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00128a7:	6a 01                	push   0x1
c00128a9:	50                   	push   eax
c00128aa:	e8 5d 05 00 00       	call   c0012e0c <VAS::mapOtherVASIn(bool, VAS*)>
c00128af:	83 c4 10             	add    esp,0x10
c00128b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00128ba:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00128c2:	0f 8f d7 00 00 00    	jg     c001299f <VAS::~VAS()+0x11f>
c00128c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00128cf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00128d3:	c1 e2 02             	shl    edx,0x2
c00128d6:	01 d0                	add    eax,edx
c00128d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00128da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00128de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128e2:	83 e0 01             	and    eax,0x1
c00128e5:	0f 84 ab 00 00 00    	je     c0012996 <VAS::~VAS()+0x116>
c00128eb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00128f3:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00128fb:	7f 75                	jg     c0012972 <VAS::~VAS()+0xf2>
c00128fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012901:	c1 e0 0a             	shl    eax,0xa
c0012904:	89 c2                	mov    edx,eax
c0012906:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001290a:	01 d0                	add    eax,edx
c001290c:	c1 e0 0c             	shl    eax,0xc
c001290f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012913:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012918:	8b 00                	mov    eax,DWORD PTR [eax]
c001291a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001291d:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012923:	83 ec 04             	sub    esp,0x4
c0012926:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001292a:	6a 01                	push   0x1
c001292c:	50                   	push   eax
c001292d:	e8 1c 04 00 00       	call   c0012d4e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0012932:	83 c4 10             	add    esp,0x10
c0012935:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012939:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001293d:	8b 00                	mov    eax,DWORD PTR [eax]
c001293f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012943:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012947:	25 01 04 00 00       	and    eax,0x401
c001294c:	3d 01 04 00 00       	cmp    eax,0x401
c0012951:	75 19                	jne    c001296c <VAS::~VAS()+0xec>
c0012953:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012957:	25 00 f0 ff ff       	and    eax,0xfffff000
c001295c:	83 ec 0c             	sub    esp,0xc
c001295f:	50                   	push   eax
c0012960:	e8 0a dc ff ff       	call   c001056f <Phys::freePage(unsigned long)>
c0012965:	83 c4 10             	add    esp,0x10
c0012968:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001296c:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0012970:	eb 81                	jmp    c00128f3 <VAS::~VAS()+0x73>
c0012972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012976:	25 00 04 00 00       	and    eax,0x400
c001297b:	74 19                	je     c0012996 <VAS::~VAS()+0x116>
c001297d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012981:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012986:	83 ec 0c             	sub    esp,0xc
c0012989:	50                   	push   eax
c001298a:	e8 e0 db ff ff       	call   c001056f <Phys::freePage(unsigned long)>
c001298f:	83 c4 10             	add    esp,0x10
c0012992:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012996:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001299a:	e9 1b ff ff ff       	jmp    c00128ba <VAS::~VAS()+0x3a>
c001299f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129a3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00129a6:	83 ec 0c             	sub    esp,0xc
c00129a9:	50                   	push   eax
c00129aa:	e8 b1 f9 ff ff       	call   c0012360 <Virt::freeKernelVirtualPages(unsigned long)>
c00129af:	83 c4 10             	add    esp,0x10
c00129b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129b6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00129b9:	83 ec 0c             	sub    esp,0xc
c00129bc:	50                   	push   eax
c00129bd:	e8 ad db ff ff       	call   c001056f <Phys::freePage(unsigned long)>
c00129c2:	83 c4 10             	add    esp,0x10
c00129c5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00129c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00129cd:	c1 e0 02             	shl    eax,0x2
c00129d0:	83 ec 08             	sub    esp,0x8
c00129d3:	50                   	push   eax
c00129d4:	68 e4 af 02 c0       	push   0xc002afe4
c00129d9:	e8 68 08 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00129de:	83 c4 10             	add    esp,0x10
c00129e1:	e8 c2 b6 00 00       	call   c001e0a8 <unlockScheduler()>
c00129e6:	90                   	nop
c00129e7:	83 c4 2c             	add    esp,0x2c
c00129ea:	c3                   	ret    
c00129eb:	90                   	nop

c00129ec <VAS::setCPUSpecific(unsigned long)>:
c00129ec:	83 ec 0c             	sub    esp,0xc
c00129ef:	6a 05                	push   0x5
c00129f1:	68 00 00 40 c2       	push   0xc2400000
c00129f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129fe:	e8 21 05 00 00       	call   c0012f24 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a03:	83 c4 1c             	add    esp,0x1c
c0012a06:	c3                   	ret    
c0012a07:	90                   	nop

c0012a08 <VAS::VAS(VAS*)>:
c0012a08:	83 ec 0c             	sub    esp,0xc
c0012a0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a0f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012a16:	83 ec 0c             	sub    esp,0xc
c0012a19:	68 04 b0 02 c0       	push   0xc002b004
c0012a1e:	e8 d8 7d 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c0012a23:	83 c4 10             	add    esp,0x10
c0012a26:	90                   	nop
c0012a27:	83 c4 0c             	add    esp,0xc
c0012a2a:	c3                   	ret    
c0012a2b:	90                   	nop

c0012a2c <VAS::VAS(bool)>:
c0012a2c:	53                   	push   ebx
c0012a2d:	83 ec 28             	sub    esp,0x28
c0012a30:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012a34:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012a38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a3c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012a43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a47:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012a4b:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012a4e:	e8 a6 db ff ff       	call   c00105f9 <Phys::allocatePage()>
c0012a53:	89 c2                	mov    edx,eax
c0012a55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a59:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012a5c:	e8 a1 fa ff ff       	call   c0012502 <Virt::getAKernelVAS()>
c0012a61:	89 c3                	mov    ebx,eax
c0012a63:	83 ec 0c             	sub    esp,0xc
c0012a66:	6a 01                	push   0x1
c0012a68:	e8 e2 f7 ff ff       	call   c001224f <Virt::allocateKernelVirtualPages(int)>
c0012a6d:	83 c4 10             	add    esp,0x10
c0012a70:	89 c2                	mov    edx,eax
c0012a72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a76:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012a79:	83 ec 0c             	sub    esp,0xc
c0012a7c:	6a 03                	push   0x3
c0012a7e:	6a 01                	push   0x1
c0012a80:	52                   	push   edx
c0012a81:	50                   	push   eax
c0012a82:	53                   	push   ebx
c0012a83:	e8 00 02 00 00       	call   c0012c88 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012a88:	83 c4 20             	add    esp,0x20
c0012a8b:	89 c2                	mov    edx,eax
c0012a8d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a91:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012a94:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012a9c:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012aa4:	7f 1c                	jg     c0012ac2 <VAS::VAS(bool)+0x96>
c0012aa6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012aaa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012aad:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012ab1:	c1 e2 02             	shl    edx,0x2
c0012ab4:	01 d0                	add    eax,edx
c0012ab6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012abc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012ac0:	eb da                	jmp    c0012a9c <VAS::VAS(bool)+0x70>
c0012ac2:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012aca:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012ad2:	7f 7a                	jg     c0012b4e <VAS::VAS(bool)+0x122>
c0012ad4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012ad8:	2d 00 02 00 00       	sub    eax,0x200
c0012add:	c1 e0 0c             	shl    eax,0xc
c0012ae0:	83 c8 03             	or     eax,0x3
c0012ae3:	89 c2                	mov    edx,eax
c0012ae5:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0012aea:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012af0:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012af6:	83 e0 10             	and    eax,0x10
c0012af9:	84 c0                	test   al,al
c0012afb:	74 07                	je     c0012b04 <VAS::VAS(bool)+0xd8>
c0012afd:	b8 00 01 00 00       	mov    eax,0x100
c0012b02:	eb 05                	jmp    c0012b09 <VAS::VAS(bool)+0xdd>
c0012b04:	b8 00 00 00 00       	mov    eax,0x0
c0012b09:	09 d0                	or     eax,edx
c0012b0b:	89 c1                	mov    ecx,eax
c0012b0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b11:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012b14:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012b18:	c1 e2 02             	shl    edx,0x2
c0012b1b:	01 d0                	add    eax,edx
c0012b1d:	89 ca                	mov    edx,ecx
c0012b1f:	89 10                	mov    DWORD PTR [eax],edx
c0012b21:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012b25:	2d 40 03 00 00       	sub    eax,0x340
c0012b2a:	83 f8 7f             	cmp    eax,0x7f
c0012b2d:	77 16                	ja     c0012b45 <VAS::VAS(bool)+0x119>
c0012b2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b33:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012b36:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012b3a:	c1 e2 02             	shl    edx,0x2
c0012b3d:	01 d0                	add    eax,edx
c0012b3f:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012b45:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012b49:	e9 7c ff ff ff       	jmp    c0012aca <VAS::VAS(bool)+0x9e>
c0012b4e:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0012b53:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012b59:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012b5f:	83 e0 10             	and    eax,0x10
c0012b62:	84 c0                	test   al,al
c0012b64:	74 07                	je     c0012b6d <VAS::VAS(bool)+0x141>
c0012b66:	b8 03 41 00 00       	mov    eax,0x4103
c0012b6b:	eb 05                	jmp    c0012b72 <VAS::VAS(bool)+0x146>
c0012b6d:	b8 03 40 00 00       	mov    eax,0x4003
c0012b72:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012b76:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012b79:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012b7f:	89 02                	mov    DWORD PTR [edx],eax
c0012b81:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0012b86:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012b8c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012b92:	83 ec 08             	sub    esp,0x8
c0012b95:	50                   	push   eax
c0012b96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012b9a:	e8 4d fe ff ff       	call   c00129ec <VAS::setCPUSpecific(unsigned long)>
c0012b9f:	83 c4 10             	add    esp,0x10
c0012ba2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ba6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012ba9:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0012bae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012bb4:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012bba:	83 e0 10             	and    eax,0x10
c0012bbd:	84 c0                	test   al,al
c0012bbf:	74 07                	je     c0012bc8 <VAS::VAS(bool)+0x19c>
c0012bc1:	b8 00 01 00 00       	mov    eax,0x100
c0012bc6:	eb 05                	jmp    c0012bcd <VAS::VAS(bool)+0x1a1>
c0012bc8:	b8 00 00 00 00       	mov    eax,0x0
c0012bcd:	09 c2                	or     edx,eax
c0012bcf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012bd3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012bd6:	05 fc 0f 00 00       	add    eax,0xffc
c0012bdb:	83 ca 03             	or     edx,0x3
c0012bde:	89 10                	mov    DWORD PTR [eax],edx
c0012be0:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0012be5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012beb:	83 ec 0c             	sub    esp,0xc
c0012bee:	50                   	push   eax
c0012bef:	e8 42 1d 00 00       	call   c0014936 <Device::getName()>
c0012bf4:	83 c4 10             	add    esp,0x10
c0012bf7:	83 ec 08             	sub    esp,0x8
c0012bfa:	68 b1 b1 02 c0       	push   0xc002b1b1
c0012bff:	50                   	push   eax
c0012c00:	e8 af db fe ff       	call   c00007b4 <strcmp>
c0012c05:	83 c4 10             	add    esp,0x10
c0012c08:	85 c0                	test   eax,eax
c0012c0a:	0f 94 c0             	sete   al
c0012c0d:	84 c0                	test   al,al
c0012c0f:	74 70                	je     c0012c81 <VAS::VAS(bool)+0x255>
c0012c11:	e8 73 b4 00 00       	call   c001e089 <disableIRQs()>
c0012c16:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0012c1b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012c21:	05 7c 09 00 00       	add    eax,0x97c
c0012c26:	83 ec 0c             	sub    esp,0xc
c0012c29:	50                   	push   eax
c0012c2a:	e8 a9 cd ff ff       	call   c000f9d8 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012c2f:	83 c4 10             	add    esp,0x10
c0012c32:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012c37:	89 c3                	mov    ebx,eax
c0012c39:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0012c3e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012c44:	05 7c 09 00 00       	add    eax,0x97c
c0012c49:	83 ec 0c             	sub    esp,0xc
c0012c4c:	50                   	push   eax
c0012c4d:	e8 86 cd ff ff       	call   c000f9d8 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012c52:	83 c4 10             	add    esp,0x10
c0012c55:	83 ec 08             	sub    esp,0x8
c0012c58:	50                   	push   eax
c0012c59:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012c5d:	e8 18 01 00 00       	call   c0012d7a <VAS::getPageTableEntry(unsigned long)>
c0012c62:	83 c4 10             	add    esp,0x10
c0012c65:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c67:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012c6c:	6a 11                	push   0x11
c0012c6e:	53                   	push   ebx
c0012c6f:	50                   	push   eax
c0012c70:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012c74:	e8 ab 02 00 00       	call   c0012f24 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012c79:	83 c4 10             	add    esp,0x10
c0012c7c:	e8 16 b4 00 00       	call   c001e097 <enableIRQs()>
c0012c81:	90                   	nop
c0012c82:	83 c4 28             	add    esp,0x28
c0012c85:	5b                   	pop    ebx
c0012c86:	c3                   	ret    
c0012c87:	90                   	nop

c0012c88 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012c88:	55                   	push   ebp
c0012c89:	57                   	push   edi
c0012c8a:	56                   	push   esi
c0012c8b:	53                   	push   ebx
c0012c8c:	83 ec 1c             	sub    esp,0x1c
c0012c8f:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0012c94:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012c98:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012c9e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012ca2:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012ca8:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012cac:	83 e0 01             	and    eax,0x1
c0012caf:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012cb3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012cb7:	85 c0                	test   eax,eax
c0012cb9:	7e 39                	jle    c0012cf4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012cbb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012cbf:	89 f3                	mov    ebx,esi
c0012cc1:	c1 e0 0c             	shl    eax,0xc
c0012cc4:	01 f0                	add    eax,esi
c0012cc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012cca:	55                   	push   ebp
c0012ccb:	53                   	push   ebx
c0012ccc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012cd0:	29 f0                	sub    eax,esi
c0012cd2:	01 d8                	add    eax,ebx
c0012cd4:	50                   	push   eax
c0012cd5:	57                   	push   edi
c0012cd6:	e8 49 02 00 00       	call   c0012f24 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012cdb:	83 c4 10             	add    esp,0x10
c0012cde:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012ce3:	74 03                	je     c0012ce8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012ce5:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012ce8:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012cee:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0012cf2:	75 d6                	jne    c0012cca <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012cf4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012cf9:	75 10                	jne    c0012d0b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012cfb:	0f 20 d8             	mov    eax,cr3
c0012cfe:	0f 22 d8             	mov    cr3,eax
c0012d01:	83 c4 1c             	add    esp,0x1c
c0012d04:	89 f0                	mov    eax,esi
c0012d06:	5b                   	pop    ebx
c0012d07:	5e                   	pop    esi
c0012d08:	5f                   	pop    edi
c0012d09:	5d                   	pop    ebp
c0012d0a:	c3                   	ret    
c0012d0b:	89 f3                	mov    ebx,esi
c0012d0d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012d11:	c1 eb 0a             	shr    ebx,0xa
c0012d14:	c1 e0 0c             	shl    eax,0xc
c0012d17:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012d1d:	01 f0                	add    eax,esi
c0012d1f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012d25:	c1 e8 0a             	shr    eax,0xa
c0012d28:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012d2d:	2d 00 00 40 00       	sub    eax,0x400000
c0012d32:	39 c3                	cmp    ebx,eax
c0012d34:	77 cb                	ja     c0012d01 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012d36:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012d39:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012d3f:	39 d8                	cmp    eax,ebx
c0012d41:	73 f3                	jae    c0012d36 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012d43:	83 c4 1c             	add    esp,0x1c
c0012d46:	89 f0                	mov    eax,esi
c0012d48:	5b                   	pop    ebx
c0012d49:	5e                   	pop    esi
c0012d4a:	5f                   	pop    edi
c0012d4b:	5d                   	pop    ebp
c0012d4c:	c3                   	ret    
c0012d4d:	90                   	nop

c0012d4e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0012d4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d52:	89 c2                	mov    edx,eax
c0012d54:	c1 e8 0a             	shr    eax,0xa
c0012d57:	c1 ea 16             	shr    edx,0x16
c0012d5a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0012d5f:	19 c9                	sbb    ecx,ecx
c0012d61:	c1 e2 0c             	shl    edx,0xc
c0012d64:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0012d6a:	25 fc 0f 00 00       	and    eax,0xffc
c0012d6f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0012d76:	01 d0                	add    eax,edx
c0012d78:	c3                   	ret    
c0012d79:	90                   	nop

c0012d7a <VAS::getPageTableEntry(unsigned long)>:
c0012d7a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012d7e:	89 ca                	mov    edx,ecx
c0012d80:	c1 e9 0a             	shr    ecx,0xa
c0012d83:	c1 ea 16             	shr    edx,0x16
c0012d86:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0012d8c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0012d92:	c1 e0 0c             	shl    eax,0xc
c0012d95:	8d 04 08             	lea    eax,[eax+ecx*1]
c0012d98:	c3                   	ret    
c0012d99:	90                   	nop

c0012d9a <VAS::reflagRange(unsigned long, int, int, int)>:
c0012d9a:	55                   	push   ebp
c0012d9b:	57                   	push   edi
c0012d9c:	56                   	push   esi
c0012d9d:	53                   	push   ebx
c0012d9e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012da2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012da6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012daa:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012dae:	85 db                	test   ebx,ebx
c0012db0:	7e 22                	jle    c0012dd4 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012db2:	c1 e3 0c             	shl    ebx,0xc
c0012db5:	01 f3                	add    ebx,esi
c0012db7:	56                   	push   esi
c0012db8:	81 c6 00 10 00 00    	add    esi,0x1000
c0012dbe:	55                   	push   ebp
c0012dbf:	e8 b6 ff ff ff       	call   c0012d7a <VAS::getPageTableEntry(unsigned long)>
c0012dc4:	5a                   	pop    edx
c0012dc5:	59                   	pop    ecx
c0012dc6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012dc8:	21 f9                	and    ecx,edi
c0012dca:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0012dce:	39 f3                	cmp    ebx,esi
c0012dd0:	89 08                	mov    DWORD PTR [eax],ecx
c0012dd2:	75 e3                	jne    c0012db7 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0012dd4:	5b                   	pop    ebx
c0012dd5:	5e                   	pop    esi
c0012dd6:	5f                   	pop    edi
c0012dd7:	5d                   	pop    ebp
c0012dd8:	c3                   	ret    
c0012dd9:	90                   	nop

c0012dda <VAS::setToWriteCombining(unsigned long, int)>:
c0012dda:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0012ddf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012de5:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0012dec:	75 01                	jne    c0012def <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0012dee:	c3                   	ret    
c0012def:	68 80 00 00 00       	push   0x80
c0012df4:	6a ff                	push   0xffffffff
c0012df6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012dfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012dfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012e02:	e8 93 ff ff ff       	call   c0012d9a <VAS::reflagRange(unsigned long, int, int, int)>
c0012e07:	83 c4 14             	add    esp,0x14
c0012e0a:	c3                   	ret    
c0012e0b:	90                   	nop

c0012e0c <VAS::mapOtherVASIn(bool, VAS*)>:
c0012e0c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0012e11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012e15:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012e18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e1c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0012e1f:	19 c0                	sbb    eax,eax
c0012e21:	83 ca 03             	or     edx,0x3
c0012e24:	83 e0 fc             	and    eax,0xfffffffc
c0012e27:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0012e2e:	0f 20 d8             	mov    eax,cr3
c0012e31:	0f 22 d8             	mov    cr3,eax
c0012e34:	c3                   	ret    
c0012e35:	90                   	nop

c0012e36 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012e36:	55                   	push   ebp
c0012e37:	57                   	push   edi
c0012e38:	56                   	push   esi
c0012e39:	53                   	push   ebx
c0012e3a:	83 ec 1c             	sub    esp,0x1c
c0012e3d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012e41:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012e45:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012e49:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012e4d:	a9 ff 0f 00 00       	test   eax,0xfff
c0012e52:	75 4a                	jne    c0012e9e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012e54:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012e58:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012e5b:	c1 eb 16             	shr    ebx,0x16
c0012e5e:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012e65:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012e69:	74 4d                	je     c0012eb8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012e6b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012e6f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012e73:	c1 e8 0a             	shr    eax,0xa
c0012e76:	80 fa 01             	cmp    dl,0x1
c0012e79:	19 d2                	sbb    edx,edx
c0012e7b:	c1 e3 0c             	shl    ebx,0xc
c0012e7e:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012e82:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012e88:	25 fc 0f 00 00       	and    eax,0xffc
c0012e8d:	01 d8                	add    eax,ebx
c0012e8f:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012e96:	83 c4 1c             	add    esp,0x1c
c0012e99:	5b                   	pop    ebx
c0012e9a:	5e                   	pop    esi
c0012e9b:	5f                   	pop    edi
c0012e9c:	5d                   	pop    ebp
c0012e9d:	c3                   	ret    
c0012e9e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012ea2:	83 ec 0c             	sub    esp,0xc
c0012ea5:	68 28 b0 02 c0       	push   0xc002b028
c0012eaa:	e8 4c 79 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c0012eaf:	83 c4 10             	add    esp,0x10
c0012eb2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012eb6:	eb 9c                	jmp    c0012e54 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012eb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012ebc:	e8 38 d7 ff ff       	call   c00105f9 <Phys::allocatePage()>
c0012ec1:	89 c5                	mov    ebp,eax
c0012ec3:	e8 3a f6 ff ff       	call   c0012502 <Virt::getAKernelVAS()>
c0012ec8:	83 ec 0c             	sub    esp,0xc
c0012ecb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012ecf:	6a 01                	push   0x1
c0012ed1:	e8 79 f3 ff ff       	call   c001224f <Virt::allocateKernelVirtualPages(int)>
c0012ed6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012edd:	6a 01                	push   0x1
c0012edf:	50                   	push   eax
c0012ee0:	55                   	push   ebp
c0012ee1:	81 cd 07 04 00 00    	or     ebp,0x407
c0012ee7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012eeb:	51                   	push   ecx
c0012eec:	e8 97 fd ff ff       	call   c0012c88 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012ef1:	83 c4 1c             	add    esp,0x1c
c0012ef4:	68 00 10 00 00       	push   0x1000
c0012ef9:	6a 00                	push   0x0
c0012efb:	50                   	push   eax
c0012efc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012f00:	e8 bf d7 fe ff       	call   c00006c4 <memset>
c0012f05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012f09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012f0c:	e8 4f f4 ff ff       	call   c0012360 <Virt::freeKernelVirtualPages(unsigned long)>
c0012f11:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012f14:	83 c4 10             	add    esp,0x10
c0012f17:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012f1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012f1e:	e9 48 ff ff ff       	jmp    c0012e6b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012f23:	90                   	nop

c0012f24 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012f24:	55                   	push   ebp
c0012f25:	57                   	push   edi
c0012f26:	56                   	push   esi
c0012f27:	53                   	push   ebx
c0012f28:	83 ec 1c             	sub    esp,0x1c
c0012f2b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012f2f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012f33:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012f39:	77 08                	ja     c0012f43 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012f3b:	0f 20 d8             	mov    eax,cr3
c0012f3e:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0012f41:	75 47                	jne    c0012f8a <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012f43:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012f47:	09 d8                	or     eax,ebx
c0012f49:	a9 ff 0f 00 00       	test   eax,0xfff
c0012f4e:	75 57                	jne    c0012fa7 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0012f50:	89 de                	mov    esi,ebx
c0012f52:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012f55:	c1 ee 16             	shr    esi,0x16
c0012f58:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0012f5f:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0012f63:	74 54                	je     c0012fb9 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0012f65:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012f69:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0012f6f:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012f73:	c1 e6 0c             	shl    esi,0xc
c0012f76:	c1 eb 0a             	shr    ebx,0xa
c0012f79:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012f7f:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0012f82:	83 c4 1c             	add    esp,0x1c
c0012f85:	5b                   	pop    ebx
c0012f86:	5e                   	pop    esi
c0012f87:	5f                   	pop    edi
c0012f88:	5d                   	pop    ebp
c0012f89:	c3                   	ret    
c0012f8a:	83 ec 0c             	sub    esp,0xc
c0012f8d:	68 4c b0 02 c0       	push   0xc002b04c
c0012f92:	e8 af 02 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0012f97:	83 c4 10             	add    esp,0x10
c0012f9a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012f9e:	09 d8                	or     eax,ebx
c0012fa0:	a9 ff 0f 00 00       	test   eax,0xfff
c0012fa5:	74 a9                	je     c0012f50 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012fa7:	83 ec 0c             	sub    esp,0xc
c0012faa:	68 b4 b0 02 c0       	push   0xc002b0b4
c0012faf:	e8 47 78 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c0012fb4:	83 c4 10             	add    esp,0x10
c0012fb7:	eb 97                	jmp    c0012f50 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012fb9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012fbd:	e8 37 d6 ff ff       	call   c00105f9 <Phys::allocatePage()>
c0012fc2:	89 c5                	mov    ebp,eax
c0012fc4:	e8 39 f5 ff ff       	call   c0012502 <Virt::getAKernelVAS()>
c0012fc9:	83 ec 0c             	sub    esp,0xc
c0012fcc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012fd0:	6a 01                	push   0x1
c0012fd2:	e8 78 f2 ff ff       	call   c001224f <Virt::allocateKernelVirtualPages(int)>
c0012fd7:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012fde:	6a 01                	push   0x1
c0012fe0:	50                   	push   eax
c0012fe1:	55                   	push   ebp
c0012fe2:	81 cd 07 04 00 00    	or     ebp,0x407
c0012fe8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012fec:	51                   	push   ecx
c0012fed:	e8 96 fc ff ff       	call   c0012c88 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012ff2:	83 c4 1c             	add    esp,0x1c
c0012ff5:	68 00 10 00 00       	push   0x1000
c0012ffa:	6a 00                	push   0x0
c0012ffc:	50                   	push   eax
c0012ffd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013001:	e8 be d6 fe ff       	call   c00006c4 <memset>
c0013006:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001300a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001300d:	e8 4e f3 ff ff       	call   c0012360 <Virt::freeKernelVirtualPages(unsigned long)>
c0013012:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013016:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0013019:	83 c4 10             	add    esp,0x10
c001301c:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c001301f:	e9 41 ff ff ff       	jmp    c0012f65 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0013024 <mapVASFirstTime>:
c0013024:	55                   	push   ebp
c0013025:	57                   	push   edi
c0013026:	56                   	push   esi
c0013027:	53                   	push   ebx
c0013028:	83 ec 0c             	sub    esp,0xc
c001302b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013030:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0013033:	4a                   	dec    edx
c0013034:	0f 84 8e 00 00 00    	je     c00130c8 <mapVASFirstTime+0xa4>
c001303a:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001303d:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0013040:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0013045:	c1 e5 15             	shl    ebp,0x15
c0013048:	be 00 90 e7 01       	mov    esi,0x1e79000
c001304d:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0013053:	29 eb                	sub    ebx,ebp
c0013055:	29 ee                	sub    esi,ebp
c0013057:	e8 9d d5 ff ff       	call   c00105f9 <Phys::allocatePage()>
c001305c:	83 ec 0c             	sub    esp,0xc
c001305f:	68 03 04 00 00       	push   0x403
c0013064:	6a 01                	push   0x1
c0013066:	53                   	push   ebx
c0013067:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001306d:	50                   	push   eax
c001306e:	57                   	push   edi
c001306f:	e8 14 fc ff ff       	call   c0012c88 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013074:	83 c4 20             	add    esp,0x20
c0013077:	39 f3                	cmp    ebx,esi
c0013079:	75 dc                	jne    c0013057 <mapVASFirstTime+0x33>
c001307b:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0013080:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0013085:	29 ee                	sub    esi,ebp
c0013087:	29 e8                	sub    eax,ebp
c0013089:	89 c5                	mov    ebp,eax
c001308b:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c001308f:	19 db                	sbb    ebx,ebx
c0013091:	e8 63 d5 ff ff       	call   c00105f9 <Phys::allocatePage()>
c0013096:	83 e3 04             	and    ebx,0x4
c0013099:	83 ec 0c             	sub    esp,0xc
c001309c:	81 c3 03 04 00 00    	add    ebx,0x403
c00130a2:	53                   	push   ebx
c00130a3:	6a 01                	push   0x1
c00130a5:	56                   	push   esi
c00130a6:	81 ee 00 10 00 00    	sub    esi,0x1000
c00130ac:	50                   	push   eax
c00130ad:	57                   	push   edi
c00130ae:	e8 d5 fb ff ff       	call   c0012c88 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00130b3:	83 c4 20             	add    esp,0x20
c00130b6:	39 f5                	cmp    ebp,esi
c00130b8:	75 d1                	jne    c001308b <mapVASFirstTime+0x67>
c00130ba:	0f 20 d8             	mov    eax,cr3
c00130bd:	0f 22 d8             	mov    cr3,eax
c00130c0:	83 c4 0c             	add    esp,0xc
c00130c3:	5b                   	pop    ebx
c00130c4:	5e                   	pop    esi
c00130c5:	5f                   	pop    edi
c00130c6:	5d                   	pop    ebp
c00130c7:	c3                   	ret    
c00130c8:	83 ec 0c             	sub    esp,0xc
c00130cb:	68 bf b1 02 c0       	push   0xc002b1bf
c00130d0:	e8 71 01 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00130d5:	83 c4 10             	add    esp,0x10
c00130d8:	83 c4 0c             	add    esp,0xc
c00130db:	5b                   	pop    ebx
c00130dc:	5e                   	pop    esi
c00130dd:	5f                   	pop    edi
c00130de:	5d                   	pop    ebp
c00130df:	c3                   	ret    

c00130e0 <__cxa_atexit>:
c00130e0:	31 c0                	xor    eax,eax
c00130e2:	c3                   	ret    

c00130e3 <__cxa_finalize>:
c00130e3:	c3                   	ret    

c00130e4 <__stack_chk_fail>:
c00130e4:	55                   	push   ebp
c00130e5:	89 e5                	mov    ebp,esp
c00130e7:	83 ec 14             	sub    esp,0x14
c00130ea:	68 78 b2 02 c0       	push   0xc002b278
c00130ef:	e8 52 01 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00130f4:	58                   	pop    eax
c00130f5:	5a                   	pop    edx
c00130f6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00130f9:	68 c8 b2 02 c0       	push   0xc002b2c8
c00130fe:	e8 43 01 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0013103:	59                   	pop    ecx
c0013104:	58                   	pop    eax
c0013105:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013108:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001310b:	68 c8 b2 02 c0       	push   0xc002b2c8
c0013110:	e8 31 01 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0013115:	5a                   	pop    edx
c0013116:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013119:	59                   	pop    ecx
c001311a:	8b 00                	mov    eax,DWORD PTR [eax]
c001311c:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001311f:	68 c8 b2 02 c0       	push   0xc002b2c8
c0013124:	e8 1d 01 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0013129:	5a                   	pop    edx
c001312a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001312d:	59                   	pop    ecx
c001312e:	8b 00                	mov    eax,DWORD PTR [eax]
c0013130:	8b 00                	mov    eax,DWORD PTR [eax]
c0013132:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0013135:	68 c8 b2 02 c0       	push   0xc002b2c8
c001313a:	e8 07 01 00 00       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001313f:	c7 04 24 d0 b2 02 c0 	mov    DWORD PTR [esp],0xc002b2d0
c0013146:	e8 b0 76 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c001314b:	83 c4 10             	add    esp,0x10
c001314e:	c9                   	leave  
c001314f:	c3                   	ret    

c0013150 <__cxa_pure_virtual>:
c0013150:	83 ec 18             	sub    esp,0x18
c0013153:	68 e8 b2 02 c0       	push   0xc002b2e8
c0013158:	e8 9e 76 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c001315d:	83 c4 1c             	add    esp,0x1c
c0013160:	c3                   	ret    

c0013161 <operator new[](unsigned long)>:
c0013161:	e9 f6 cd ff ff       	jmp    c000ff5c <malloc>

c0013166 <operator delete(void*, unsigned long)>:
c0013166:	e9 11 ce ff ff       	jmp    c000ff7c <rfree>

c001316b <operator delete[](void*)>:
c001316b:	e9 0c ce ff ff       	jmp    c000ff7c <rfree>

c0013170 <operator delete[](void*, unsigned long)>:
c0013170:	e9 07 ce ff ff       	jmp    c000ff7c <rfree>

c0013175 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0013175:	57                   	push   edi
c0013176:	b9 3f 00 00 00       	mov    ecx,0x3f
c001317b:	56                   	push   esi
c001317c:	be ec b4 02 c0       	mov    esi,0xc002b4ec
c0013181:	53                   	push   ebx
c0013182:	83 ec 40             	sub    esp,0x40
c0013185:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0013189:	8d 7c 24 01          	lea    edi,[esp+0x1]
c001318d:	fc                   	cld    
c001318e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013190:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0013194:	83 f9 3e             	cmp    ecx,0x3e
c0013197:	7e 05                	jle    c001319e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0013199:	b9 3e 00 00 00       	mov    ecx,0x3e
c001319e:	89 df                	mov    edi,ebx
c00131a0:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00131a4:	eb 02                	jmp    c00131a8 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c00131a6:	89 c7                	mov    edi,eax
c00131a8:	31 d2                	xor    edx,edx
c00131aa:	46                   	inc    esi
c00131ab:	89 f8                	mov    eax,edi
c00131ad:	f7 f1                	div    ecx
c00131af:	39 cf                	cmp    edi,ecx
c00131b1:	73 f3                	jae    c00131a6 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c00131b3:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00131b6:	eb 02                	jmp    c00131ba <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c00131b8:	89 c3                	mov    ebx,eax
c00131ba:	31 d2                	xor    edx,edx
c00131bc:	4e                   	dec    esi
c00131bd:	89 d8                	mov    eax,ebx
c00131bf:	f7 f1                	div    ecx
c00131c1:	39 cb                	cmp    ebx,ecx
c00131c3:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c00131c7:	88 16                	mov    BYTE PTR [esi],dl
c00131c9:	73 ed                	jae    c00131b8 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c00131cb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00131cf:	83 c4 40             	add    esp,0x40
c00131d2:	5b                   	pop    ebx
c00131d3:	5e                   	pop    esi
c00131d4:	5f                   	pop    edi
c00131d5:	c3                   	ret    

c00131d6 <Dbg::logc(char)>:
c00131d6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00131da:	ba fd 03 00 00       	mov    edx,0x3fd
c00131df:	ec                   	in     al,dx
c00131e0:	a8 20                	test   al,0x20
c00131e2:	74 fb                	je     c00131df <Dbg::logc(char)+0x9>
c00131e4:	ba f8 03 00 00       	mov    edx,0x3f8
c00131e9:	88 c8                	mov    al,cl
c00131eb:	ee                   	out    dx,al
c00131ec:	c3                   	ret    

c00131ed <Dbg::logs(char*)>:
c00131ed:	53                   	push   ebx
c00131ee:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00131f2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00131f5:	84 c0                	test   al,al
c00131f7:	74 0f                	je     c0013208 <Dbg::logs(char*)+0x1b>
c00131f9:	50                   	push   eax
c00131fa:	43                   	inc    ebx
c00131fb:	e8 d6 ff ff ff       	call   c00131d6 <Dbg::logc(char)>
c0013200:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0013203:	5a                   	pop    edx
c0013204:	84 c0                	test   al,al
c0013206:	75 f1                	jne    c00131f9 <Dbg::logs(char*)+0xc>
c0013208:	5b                   	pop    ebx
c0013209:	c3                   	ret    

c001320a <Dbg::logWriteInt(unsigned int)>:
c001320a:	83 ec 10             	sub    esp,0x10
c001320d:	6a 0a                	push   0xa
c001320f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0013213:	50                   	push   eax
c0013214:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013218:	e8 58 ff ff ff       	call   c0013175 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001321d:	50                   	push   eax
c001321e:	e8 ca ff ff ff       	call   c00131ed <Dbg::logs(char*)>
c0013223:	83 c4 20             	add    esp,0x20
c0013226:	c3                   	ret    

c0013227 <Dbg::logWriteIntBase(unsigned int, int)>:
c0013227:	83 ec 10             	sub    esp,0x10
c001322a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001322e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0013232:	50                   	push   eax
c0013233:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013237:	e8 39 ff ff ff       	call   c0013175 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001323c:	50                   	push   eax
c001323d:	e8 ab ff ff ff       	call   c00131ed <Dbg::logs(char*)>
c0013242:	83 c4 20             	add    esp,0x20
c0013245:	c3                   	ret    

c0013246 <Dbg::kprintf(char const*, ...)>:
c0013246:	55                   	push   ebp
c0013247:	57                   	push   edi
c0013248:	56                   	push   esi
c0013249:	53                   	push   ebx
c001324a:	83 ec 0c             	sub    esp,0xc
c001324d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013251:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013255:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013259:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001325c:	84 c0                	test   al,al
c001325e:	74 4a                	je     c00132aa <Dbg::kprintf(char const*, ...)+0x64>
c0013260:	31 db                	xor    ebx,ebx
c0013262:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013265:	3c 25                	cmp    al,0x25
c0013267:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c001326a:	0f 85 e4 00 00 00    	jne    c0013354 <Dbg::kprintf(char const*, ...)+0x10e>
c0013270:	83 c3 02             	add    ebx,0x2
c0013273:	8a 07                	mov    al,BYTE PTR [edi]
c0013275:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0013278:	83 e8 25             	sub    eax,0x25
c001327b:	3c 53                	cmp    al,0x53
c001327d:	0f 87 ba 00 00 00    	ja     c001333d <Dbg::kprintf(char const*, ...)+0xf7>
c0013283:	0f b6 c0             	movzx  eax,al
c0013286:	ff 24 85 9c b3 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4c64]
c001328d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013291:	89 c8                	mov    eax,ecx
c0013293:	83 c1 04             	add    ecx,0x4
c0013296:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001329a:	ff 30                	push   DWORD PTR [eax]
c001329c:	e8 4c ff ff ff       	call   c00131ed <Dbg::logs(char*)>
c00132a1:	58                   	pop    eax
c00132a2:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00132a6:	84 c0                	test   al,al
c00132a8:	75 b8                	jne    c0013262 <Dbg::kprintf(char const*, ...)+0x1c>
c00132aa:	83 c4 0c             	add    esp,0xc
c00132ad:	5b                   	pop    ebx
c00132ae:	5e                   	pop    esi
c00132af:	5f                   	pop    edi
c00132b0:	5d                   	pop    ebp
c00132b1:	c3                   	ret    
c00132b2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00132b6:	89 d0                	mov    eax,edx
c00132b8:	83 c2 04             	add    edx,0x4
c00132bb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00132bf:	ff 30                	push   DWORD PTR [eax]
c00132c1:	e8 44 ff ff ff       	call   c001320a <Dbg::logWriteInt(unsigned int)>
c00132c6:	58                   	pop    eax
c00132c7:	eb d9                	jmp    c00132a2 <Dbg::kprintf(char const*, ...)+0x5c>
c00132c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00132cd:	89 d0                	mov    eax,edx
c00132cf:	83 c2 04             	add    edx,0x4
c00132d2:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00132d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00132d9:	50                   	push   eax
c00132da:	e8 f7 fe ff ff       	call   c00131d6 <Dbg::logc(char)>
c00132df:	58                   	pop    eax
c00132e0:	eb c0                	jmp    c00132a2 <Dbg::kprintf(char const*, ...)+0x5c>
c00132e2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00132e6:	89 c8                	mov    eax,ecx
c00132e8:	83 c1 04             	add    ecx,0x4
c00132eb:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00132ef:	ff 30                	push   DWORD PTR [eax]
c00132f1:	e8 14 ff ff ff       	call   c001320a <Dbg::logWriteInt(unsigned int)>
c00132f6:	5f                   	pop    edi
c00132f7:	eb a9                	jmp    c00132a2 <Dbg::kprintf(char const*, ...)+0x5c>
c00132f9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00132fd:	89 c8                	mov    eax,ecx
c00132ff:	83 c1 04             	add    ecx,0x4
c0013302:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0013306:	6a 10                	push   0x10
c0013308:	ff 30                	push   DWORD PTR [eax]
c001330a:	e8 18 ff ff ff       	call   c0013227 <Dbg::logWriteIntBase(unsigned int, int)>
c001330f:	59                   	pop    ecx
c0013310:	5f                   	pop    edi
c0013311:	eb 8f                	jmp    c00132a2 <Dbg::kprintf(char const*, ...)+0x5c>
c0013313:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013317:	89 d0                	mov    eax,edx
c0013319:	83 c2 08             	add    edx,0x8
c001331c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013320:	6a 10                	push   0x10
c0013322:	ff 30                	push   DWORD PTR [eax]
c0013324:	e8 fe fe ff ff       	call   c0013227 <Dbg::logWriteIntBase(unsigned int, int)>
c0013329:	58                   	pop    eax
c001332a:	5a                   	pop    edx
c001332b:	e9 72 ff ff ff       	jmp    c00132a2 <Dbg::kprintf(char const*, ...)+0x5c>
c0013330:	6a 25                	push   0x25
c0013332:	e8 9f fe ff ff       	call   c00131d6 <Dbg::logc(char)>
c0013337:	58                   	pop    eax
c0013338:	e9 65 ff ff ff       	jmp    c00132a2 <Dbg::kprintf(char const*, ...)+0x5c>
c001333d:	6a 25                	push   0x25
c001333f:	e8 92 fe ff ff       	call   c00131d6 <Dbg::logc(char)>
c0013344:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0013347:	50                   	push   eax
c0013348:	e8 89 fe ff ff       	call   c00131d6 <Dbg::logc(char)>
c001334d:	5a                   	pop    edx
c001334e:	59                   	pop    ecx
c001334f:	e9 4e ff ff ff       	jmp    c00132a2 <Dbg::kprintf(char const*, ...)+0x5c>
c0013354:	50                   	push   eax
c0013355:	89 eb                	mov    ebx,ebp
c0013357:	e8 7a fe ff ff       	call   c00131d6 <Dbg::logc(char)>
c001335c:	89 fd                	mov    ebp,edi
c001335e:	58                   	pop    eax
c001335f:	e9 3e ff ff ff       	jmp    c00132a2 <Dbg::kprintf(char const*, ...)+0x5c>

c0013364 <Filesystem::Filesystem()>:
c0013364:	ba 0c b6 02 c0       	mov    edx,0xc002b60c
c0013369:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001336d:	89 10                	mov    DWORD PTR [eax],edx
c001336f:	8b 15 08 15 03 c0    	mov    edx,DWORD PTR ds:0xc0031508
c0013375:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013379:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001337c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013380:	a3 08 15 03 c0       	mov    ds:0xc0031508,eax
c0013385:	90                   	nop
c0013386:	c3                   	ret    
c0013387:	90                   	nop

c0013388 <Filesystem::~Filesystem()>:
c0013388:	ba 0c b6 02 c0       	mov    edx,0xc002b60c
c001338d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013391:	89 10                	mov    DWORD PTR [eax],edx
c0013393:	90                   	nop
c0013394:	c3                   	ret    
c0013395:	90                   	nop

c0013396 <Filesystem::~Filesystem()>:
c0013396:	83 ec 0c             	sub    esp,0xc
c0013399:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001339d:	e8 e6 ff ff ff       	call   c0013388 <Filesystem::~Filesystem()>
c00133a2:	83 c4 04             	add    esp,0x4
c00133a5:	83 ec 08             	sub    esp,0x8
c00133a8:	6a 08                	push   0x8
c00133aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133ae:	e8 b3 fd ff ff       	call   c0013166 <operator delete(void*, unsigned long)>
c00133b3:	83 c4 10             	add    esp,0x10
c00133b6:	83 c4 0c             	add    esp,0xc
c00133b9:	c3                   	ret    

c00133ba <Fs::getcwd(Process*, char*, int)>:
c00133ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00133be:	31 c0                	xor    eax,eax
c00133c0:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00133c3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00133c7:	7d 15                	jge    c00133de <Fs::getcwd(Process*, char*, int)+0x24>
c00133c9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00133cd:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c00133d4:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00133d7:	84 c9                	test   cl,cl
c00133d9:	74 06                	je     c00133e1 <Fs::getcwd(Process*, char*, int)+0x27>
c00133db:	40                   	inc    eax
c00133dc:	eb e2                	jmp    c00133c0 <Fs::getcwd(Process*, char*, int)+0x6>
c00133de:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00133e1:	31 c0                	xor    eax,eax
c00133e3:	c3                   	ret    

c00133e4 <Fs::setcwd(Process*, char*)>:
c00133e4:	55                   	push   ebp
c00133e5:	57                   	push   edi
c00133e6:	56                   	push   esi
c00133e7:	53                   	push   ebx
c00133e8:	81 ec 20 02 00 00    	sub    esp,0x220
c00133ee:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00133f5:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00133fb:	57                   	push   edi
c00133fc:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013403:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013407:	56                   	push   esi
c0013408:	e8 3c 01 00 00       	call   c0013549 <Fs::standardiseFiles(char*, char const*, char const*)>
c001340d:	89 34 24             	mov    DWORD PTR [esp],esi
c0013410:	e8 cc d2 fe ff       	call   c00006e1 <strlen>
c0013415:	83 c4 10             	add    esp,0x10
c0013418:	83 f8 02             	cmp    eax,0x2
c001341b:	77 17                	ja     c0013434 <Fs::setcwd(Process*, char*)+0x50>
c001341d:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013422:	83 e8 41             	sub    eax,0x41
c0013425:	83 f8 19             	cmp    eax,0x19
c0013428:	76 24                	jbe    c001344e <Fs::setcwd(Process*, char*)+0x6a>
c001342a:	b8 03 00 00 00       	mov    eax,0x3
c001342f:	e9 e0 00 00 00       	jmp    c0013514 <Fs::setcwd(Process*, char*)+0x130>
c0013434:	83 ec 0c             	sub    esp,0xc
c0013437:	56                   	push   esi
c0013438:	e8 a4 d2 fe ff       	call   c00006e1 <strlen>
c001343d:	83 c4 10             	add    esp,0x10
c0013440:	83 f8 03             	cmp    eax,0x3
c0013443:	75 34                	jne    c0013479 <Fs::setcwd(Process*, char*)+0x95>
c0013445:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001344a:	75 2d                	jne    c0013479 <Fs::setcwd(Process*, char*)+0x95>
c001344c:	eb cf                	jmp    c001341d <Fs::setcwd(Process*, char*)+0x39>
c001344e:	8b 14 85 60 19 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce6a0]
c0013455:	b8 05 00 00 00       	mov    eax,0x5
c001345a:	85 d2                	test   edx,edx
c001345c:	0f 84 b2 00 00 00    	je     c0013514 <Fs::setcwd(Process*, char*)+0x130>
c0013462:	b8 06 00 00 00       	mov    eax,0x6
c0013467:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001346e:	0f 85 92 00 00 00    	jne    c0013506 <Fs::setcwd(Process*, char*)+0x122>
c0013474:	e9 9b 00 00 00       	jmp    c0013514 <Fs::setcwd(Process*, char*)+0x130>
c0013479:	83 ec 0c             	sub    esp,0xc
c001347c:	68 14 01 00 00       	push   0x114
c0013481:	e8 d6 ca ff ff       	call   c000ff5c <malloc>
c0013486:	83 c4 0c             	add    esp,0xc
c0013489:	89 c3                	mov    ebx,eax
c001348b:	55                   	push   ebp
c001348c:	56                   	push   esi
c001348d:	50                   	push   eax
c001348e:	e8 5f 02 00 00       	call   c00136f2 <File::File(char const*, Process*)>
c0013493:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013498:	83 c4 0c             	add    esp,0xc
c001349b:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001349f:	50                   	push   eax
c00134a0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00134a4:	50                   	push   eax
c00134a5:	53                   	push   ebx
c00134a6:	e8 55 06 00 00       	call   c0013b00 <File::stat(unsigned long long*, bool*)>
c00134ab:	83 c4 10             	add    esp,0x10
c00134ae:	83 f8 02             	cmp    eax,0x2
c00134b1:	74 04                	je     c00134b7 <Fs::setcwd(Process*, char*)+0xd3>
c00134b3:	85 c0                	test   eax,eax
c00134b5:	74 1c                	je     c00134d3 <Fs::setcwd(Process*, char*)+0xef>
c00134b7:	b8 01 00 00 00       	mov    eax,0x1
c00134bc:	85 db                	test   ebx,ebx
c00134be:	74 54                	je     c0013514 <Fs::setcwd(Process*, char*)+0x130>
c00134c0:	83 ec 0c             	sub    esp,0xc
c00134c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00134c5:	53                   	push   ebx
c00134c6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00134c9:	83 c4 10             	add    esp,0x10
c00134cc:	b8 01 00 00 00       	mov    eax,0x1
c00134d1:	eb 41                	jmp    c0013514 <Fs::setcwd(Process*, char*)+0x130>
c00134d3:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00134d8:	75 1c                	jne    c00134f6 <Fs::setcwd(Process*, char*)+0x112>
c00134da:	b8 02 00 00 00       	mov    eax,0x2
c00134df:	85 db                	test   ebx,ebx
c00134e1:	74 31                	je     c0013514 <Fs::setcwd(Process*, char*)+0x130>
c00134e3:	83 ec 0c             	sub    esp,0xc
c00134e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00134e8:	53                   	push   ebx
c00134e9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00134ec:	83 c4 10             	add    esp,0x10
c00134ef:	b8 02 00 00 00       	mov    eax,0x2
c00134f4:	eb 1e                	jmp    c0013514 <Fs::setcwd(Process*, char*)+0x130>
c00134f6:	85 db                	test   ebx,ebx
c00134f8:	74 0c                	je     c0013506 <Fs::setcwd(Process*, char*)+0x122>
c00134fa:	83 ec 0c             	sub    esp,0xc
c00134fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00134ff:	53                   	push   ebx
c0013500:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013503:	83 c4 10             	add    esp,0x10
c0013506:	50                   	push   eax
c0013507:	50                   	push   eax
c0013508:	56                   	push   esi
c0013509:	57                   	push   edi
c001350a:	e8 54 d2 fe ff       	call   c0000763 <strcpy>
c001350f:	83 c4 10             	add    esp,0x10
c0013512:	31 c0                	xor    eax,eax
c0013514:	81 c4 1c 02 00 00    	add    esp,0x21c
c001351a:	5b                   	pop    ebx
c001351b:	5e                   	pop    esi
c001351c:	5f                   	pop    edi
c001351d:	5d                   	pop    ebp
c001351e:	c3                   	ret    

c001351f <Fs::initVFS()>:
c001351f:	83 ec 18             	sub    esp,0x18
c0013522:	6a 08                	push   0x8
c0013524:	e8 33 ca ff ff       	call   c000ff5c <malloc>
c0013529:	89 04 24             	mov    DWORD PTR [esp],eax
c001352c:	e8 e7 d1 00 00       	call   c0020718 <FAT::FAT()>
c0013531:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013538:	e8 1f ca ff ff       	call   c000ff5c <malloc>
c001353d:	89 04 24             	mov    DWORD PTR [esp],eax
c0013540:	e8 8d e4 00 00       	call   c00219d2 <ISO9660::ISO9660()>
c0013545:	83 c4 1c             	add    esp,0x1c
c0013548:	c3                   	ret    

c0013549 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0013549:	55                   	push   ebp
c001354a:	57                   	push   edi
c001354b:	56                   	push   esi
c001354c:	53                   	push   ebx
c001354d:	81 ec 10 04 00 00    	sub    esp,0x410
c0013553:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c001355a:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0013561:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0013568:	68 00 04 00 00       	push   0x400
c001356d:	6a 00                	push   0x0
c001356f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0013573:	56                   	push   esi
c0013574:	e8 4b d1 fe ff       	call   c00006c4 <memset>
c0013579:	83 c4 10             	add    esp,0x10
c001357c:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0013580:	75 0b                	jne    c001358d <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0013582:	50                   	push   eax
c0013583:	50                   	push   eax
c0013584:	57                   	push   edi
c0013585:	56                   	push   esi
c0013586:	e8 d8 d1 fe ff       	call   c0000763 <strcpy>
c001358b:	eb 41                	jmp    c00135ce <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c001358d:	8a 07                	mov    al,BYTE PTR [edi]
c001358f:	3c 5c                	cmp    al,0x5c
c0013591:	74 04                	je     c0013597 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0013593:	3c 2f                	cmp    al,0x2f
c0013595:	75 18                	jne    c00135af <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0013597:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001359a:	3c 60                	cmp    al,0x60
c001359c:	7e 03                	jle    c00135a1 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c001359e:	83 e8 20             	sub    eax,0x20
c00135a1:	88 04 24             	mov    BYTE PTR [esp],al
c00135a4:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00135ab:	50                   	push   eax
c00135ac:	50                   	push   eax
c00135ad:	eb 18                	jmp    c00135c7 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c00135af:	50                   	push   eax
c00135b0:	50                   	push   eax
c00135b1:	55                   	push   ebp
c00135b2:	56                   	push   esi
c00135b3:	e8 ab d1 fe ff       	call   c0000763 <strcpy>
c00135b8:	5a                   	pop    edx
c00135b9:	59                   	pop    ecx
c00135ba:	68 39 e4 02 c0       	push   0xc002e439
c00135bf:	56                   	push   esi
c00135c0:	e8 55 d2 fe ff       	call   c000081a <strcat>
c00135c5:	5d                   	pop    ebp
c00135c6:	58                   	pop    eax
c00135c7:	57                   	push   edi
c00135c8:	56                   	push   esi
c00135c9:	e8 4c d2 fe ff       	call   c000081a <strcat>
c00135ce:	83 c4 10             	add    esp,0x10
c00135d1:	8a 04 24             	mov    al,BYTE PTR [esp]
c00135d4:	3c 60                	cmp    al,0x60
c00135d6:	7e 03                	jle    c00135db <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c00135d8:	83 e8 20             	sub    eax,0x20
c00135db:	88 04 24             	mov    BYTE PTR [esp],al
c00135de:	88 03                	mov    BYTE PTR [ebx],al
c00135e0:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00135e7:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c00135ed:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00135f1:	bf 03 00 00 00       	mov    edi,0x3
c00135f6:	b8 03 00 00 00       	mov    eax,0x3
c00135fb:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00135fe:	84 d2                	test   dl,dl
c0013600:	0f 84 91 00 00 00    	je     c0013697 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0013606:	8d 4f 01             	lea    ecx,[edi+0x1]
c0013609:	80 fa 5c             	cmp    dl,0x5c
c001360c:	74 05                	je     c0013613 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c001360e:	80 fa 2f             	cmp    dl,0x2f
c0013611:	75 12                	jne    c0013625 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013613:	89 c5                	mov    ebp,eax
c0013615:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001361a:	74 09                	je     c0013625 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c001361c:	40                   	inc    eax
c001361d:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0013621:	89 cf                	mov    edi,ecx
c0013623:	eb d6                	jmp    c00135fb <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0013625:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c001362a:	75 5b                	jne    c0013687 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001362c:	80 fa 2e             	cmp    dl,0x2e
c001362f:	75 56                	jne    c0013687 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013631:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0013635:	74 19                	je     c0013650 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0013637:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c001363c:	74 53                	je     c0013691 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c001363e:	89 f9                	mov    ecx,edi
c0013640:	41                   	inc    ecx
c0013641:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013644:	80 fa 2f             	cmp    dl,0x2f
c0013647:	74 f7                	je     c0013640 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013649:	80 fa 5c             	cmp    dl,0x5c
c001364c:	74 f2                	je     c0013640 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c001364e:	eb d1                	jmp    c0013621 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013650:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013655:	74 3a                	je     c0013691 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013657:	83 f8 03             	cmp    eax,0x3
c001365a:	74 c5                	je     c0013621 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001365c:	41                   	inc    ecx
c001365d:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013660:	80 fa 2f             	cmp    dl,0x2f
c0013663:	74 f7                	je     c001365c <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013665:	80 fa 5c             	cmp    dl,0x5c
c0013668:	74 f2                	je     c001365c <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c001366a:	48                   	dec    eax
c001366b:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001366f:	75 06                	jne    c0013677 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013671:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013675:	eb f3                	jmp    c001366a <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0013677:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001367b:	74 07                	je     c0013684 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c001367d:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013681:	48                   	dec    eax
c0013682:	eb f3                	jmp    c0013677 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013684:	40                   	inc    eax
c0013685:	eb 9a                	jmp    c0013621 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013687:	80 fa 2f             	cmp    dl,0x2f
c001368a:	74 95                	je     c0013621 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001368c:	80 fa 5c             	cmp    dl,0x5c
c001368f:	74 90                	je     c0013621 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013691:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0013694:	40                   	inc    eax
c0013695:	eb 8a                	jmp    c0013621 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013697:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001369b:	83 ec 0c             	sub    esp,0xc
c001369e:	53                   	push   ebx
c001369f:	e8 3d d0 fe ff       	call   c00006e1 <strlen>
c00136a4:	83 c4 10             	add    esp,0x10
c00136a7:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c00136ac:	75 26                	jne    c00136d4 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c00136ae:	83 ec 0c             	sub    esp,0xc
c00136b1:	53                   	push   ebx
c00136b2:	e8 2a d0 fe ff       	call   c00006e1 <strlen>
c00136b7:	83 c4 10             	add    esp,0x10
c00136ba:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c00136bf:	74 26                	je     c00136e7 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c00136c1:	83 ec 0c             	sub    esp,0xc
c00136c4:	53                   	push   ebx
c00136c5:	e8 17 d0 fe ff       	call   c00006e1 <strlen>
c00136ca:	83 c4 10             	add    esp,0x10
c00136cd:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00136d2:	eb c7                	jmp    c001369b <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c00136d4:	83 ec 0c             	sub    esp,0xc
c00136d7:	53                   	push   ebx
c00136d8:	e8 04 d0 fe ff       	call   c00006e1 <strlen>
c00136dd:	83 c4 10             	add    esp,0x10
c00136e0:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00136e5:	74 c7                	je     c00136ae <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c00136e7:	81 c4 0c 04 00 00    	add    esp,0x40c
c00136ed:	5b                   	pop    ebx
c00136ee:	5e                   	pop    esi
c00136ef:	5f                   	pop    edi
c00136f0:	5d                   	pop    ebp
c00136f1:	c3                   	ret    

c00136f2 <File::File(char const*, Process*)>:
c00136f2:	83 ec 0c             	sub    esp,0xc
c00136f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136f9:	83 ec 08             	sub    esp,0x8
c00136fc:	6a 00                	push   0x0
c00136fe:	50                   	push   eax
c00136ff:	e8 2e e6 ff ff       	call   c0011d32 <UnixFile::UnixFile(int)>
c0013704:	83 c4 10             	add    esp,0x10
c0013707:	ba f0 b5 02 c0       	mov    edx,0xc002b5f0
c001370c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013710:	89 10                	mov    DWORD PTR [eax],edx
c0013712:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013716:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001371c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013720:	83 c0 0d             	add    eax,0xd
c0013723:	83 ec 04             	sub    esp,0x4
c0013726:	52                   	push   edx
c0013727:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001372b:	50                   	push   eax
c001372c:	e8 18 fe ff ff       	call   c0013549 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013731:	83 c4 10             	add    esp,0x10
c0013734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013738:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001373b:	8d 50 bf             	lea    edx,[eax-0x41]
c001373e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013742:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001374c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013750:	90                   	nop
c0013751:	83 c4 0c             	add    esp,0xc
c0013754:	c3                   	ret    
c0013755:	90                   	nop

c0013756 <File::~File()>:
c0013756:	83 ec 0c             	sub    esp,0xc
c0013759:	ba f0 b5 02 c0       	mov    edx,0xc002b5f0
c001375e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013762:	89 10                	mov    DWORD PTR [eax],edx
c0013764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013768:	83 ec 0c             	sub    esp,0xc
c001376b:	50                   	push   eax
c001376c:	e8 71 e7 ff ff       	call   c0011ee2 <UnixFile::~UnixFile()>
c0013771:	83 c4 10             	add    esp,0x10
c0013774:	90                   	nop
c0013775:	83 c4 0c             	add    esp,0xc
c0013778:	c3                   	ret    
c0013779:	90                   	nop

c001377a <File::~File()>:
c001377a:	83 ec 0c             	sub    esp,0xc
c001377d:	83 ec 0c             	sub    esp,0xc
c0013780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013784:	e8 cd ff ff ff       	call   c0013756 <File::~File()>
c0013789:	83 c4 10             	add    esp,0x10
c001378c:	83 ec 08             	sub    esp,0x8
c001378f:	68 14 01 00 00       	push   0x114
c0013794:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013798:	e8 c9 f9 ff ff       	call   c0013166 <operator delete(void*, unsigned long)>
c001379d:	83 c4 10             	add    esp,0x10
c00137a0:	83 c4 0c             	add    esp,0xc
c00137a3:	c3                   	ret    

c00137a4 <File::open(FileOpenMode)>:
c00137a4:	53                   	push   ebx
c00137a5:	b8 0b 00 00 00       	mov    eax,0xb
c00137aa:	83 ec 08             	sub    esp,0x8
c00137ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00137b1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00137b8:	80 fa 19             	cmp    dl,0x19
c00137bb:	77 40                	ja     c00137fd <File::open(FileOpenMode)+0x59>
c00137bd:	8b 14 95 60 19 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffce6a0]
c00137c4:	85 d2                	test   edx,edx
c00137c6:	74 35                	je     c00137fd <File::open(FileOpenMode)+0x59>
c00137c8:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00137ce:	85 d2                	test   edx,edx
c00137d0:	74 2b                	je     c00137fd <File::open(FileOpenMode)+0x59>
c00137d2:	b8 06 00 00 00       	mov    eax,0x6
c00137d7:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00137db:	75 20                	jne    c00137fd <File::open(FileOpenMode)+0x59>
c00137dd:	8b 02                	mov    eax,DWORD PTR [edx]
c00137df:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00137e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00137e9:	51                   	push   ecx
c00137ea:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00137ed:	51                   	push   ecx
c00137ee:	52                   	push   edx
c00137ef:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00137f2:	83 c4 10             	add    esp,0x10
c00137f5:	85 c0                	test   eax,eax
c00137f7:	75 04                	jne    c00137fd <File::open(FileOpenMode)+0x59>
c00137f9:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00137fd:	83 c4 08             	add    esp,0x8
c0013800:	5b                   	pop    ebx
c0013801:	c3                   	ret    

c0013802 <File::read(unsigned long long, void*, int*)>:
c0013802:	53                   	push   ebx
c0013803:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013807:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001380b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013812:	3c 19                	cmp    al,0x19
c0013814:	77 35                	ja     c001384b <File::read(unsigned long long, void*, int*)+0x49>
c0013816:	8b 04 85 60 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce6a0]
c001381d:	85 c0                	test   eax,eax
c001381f:	74 2a                	je     c001384b <File::read(unsigned long long, void*, int*)+0x49>
c0013821:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013827:	85 c0                	test   eax,eax
c0013829:	74 20                	je     c001384b <File::read(unsigned long long, void*, int*)+0x49>
c001382b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001382f:	74 21                	je     c0013852 <File::read(unsigned long long, void*, int*)+0x50>
c0013831:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013833:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013837:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001383d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013841:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013845:	5b                   	pop    ebx
c0013846:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0013849:	ff e0                	jmp    eax
c001384b:	b8 0b 00 00 00       	mov    eax,0xb
c0013850:	eb 05                	jmp    c0013857 <File::read(unsigned long long, void*, int*)+0x55>
c0013852:	b8 05 00 00 00       	mov    eax,0x5
c0013857:	5b                   	pop    ebx
c0013858:	c3                   	ret    
c0013859:	90                   	nop

c001385a <File::write(unsigned long long, void*, int*)>:
c001385a:	53                   	push   ebx
c001385b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001385f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013863:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001386a:	3c 19                	cmp    al,0x19
c001386c:	77 35                	ja     c00138a3 <File::write(unsigned long long, void*, int*)+0x49>
c001386e:	8b 04 85 60 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce6a0]
c0013875:	85 c0                	test   eax,eax
c0013877:	74 2a                	je     c00138a3 <File::write(unsigned long long, void*, int*)+0x49>
c0013879:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001387f:	85 c0                	test   eax,eax
c0013881:	74 20                	je     c00138a3 <File::write(unsigned long long, void*, int*)+0x49>
c0013883:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013887:	74 21                	je     c00138aa <File::write(unsigned long long, void*, int*)+0x50>
c0013889:	8b 08                	mov    ecx,DWORD PTR [eax]
c001388b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001388f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013895:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013899:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001389d:	5b                   	pop    ebx
c001389e:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00138a1:	ff e0                	jmp    eax
c00138a3:	b8 0b 00 00 00       	mov    eax,0xb
c00138a8:	eb 05                	jmp    c00138af <File::write(unsigned long long, void*, int*)+0x55>
c00138aa:	b8 05 00 00 00       	mov    eax,0x5
c00138af:	5b                   	pop    ebx
c00138b0:	c3                   	ret    
c00138b1:	90                   	nop

c00138b2 <File::close()>:
c00138b2:	53                   	push   ebx
c00138b3:	b8 0b 00 00 00       	mov    eax,0xb
c00138b8:	83 ec 08             	sub    esp,0x8
c00138bb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00138bf:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00138c6:	80 fa 19             	cmp    dl,0x19
c00138c9:	77 41                	ja     c001390c <File::close()+0x5a>
c00138cb:	8b 1c 95 60 19 03 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffce6a0]
c00138d2:	85 db                	test   ebx,ebx
c00138d4:	74 36                	je     c001390c <File::close()+0x5a>
c00138d6:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00138dd:	74 2d                	je     c001390c <File::close()+0x5a>
c00138df:	b8 05 00 00 00       	mov    eax,0x5
c00138e4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00138e8:	74 22                	je     c001390c <File::close()+0x5a>
c00138ea:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00138ee:	8b 04 95 60 19 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffce6a0]
c00138f5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00138fb:	53                   	push   ebx
c00138fc:	53                   	push   ebx
c00138fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00138ff:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013905:	50                   	push   eax
c0013906:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0013909:	83 c4 10             	add    esp,0x10
c001390c:	83 c4 08             	add    esp,0x8
c001390f:	5b                   	pop    ebx
c0013910:	c3                   	ret    
c0013911:	90                   	nop

c0013912 <File::seek(unsigned long long)>:
c0013912:	56                   	push   esi
c0013913:	53                   	push   ebx
c0013914:	b8 0b 00 00 00       	mov    eax,0xb
c0013919:	51                   	push   ecx
c001391a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001391e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013922:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0013929:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001392d:	80 fa 19             	cmp    dl,0x19
c0013930:	77 31                	ja     c0013963 <File::seek(unsigned long long)+0x51>
c0013932:	8b 14 95 60 19 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffce6a0]
c0013939:	85 d2                	test   edx,edx
c001393b:	74 26                	je     c0013963 <File::seek(unsigned long long)+0x51>
c001393d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013943:	85 d2                	test   edx,edx
c0013945:	74 1c                	je     c0013963 <File::seek(unsigned long long)+0x51>
c0013947:	b8 05 00 00 00       	mov    eax,0x5
c001394c:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0013950:	74 11                	je     c0013963 <File::seek(unsigned long long)+0x51>
c0013952:	8b 02                	mov    eax,DWORD PTR [edx]
c0013954:	53                   	push   ebx
c0013955:	51                   	push   ecx
c0013956:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001395c:	52                   	push   edx
c001395d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013960:	83 c4 10             	add    esp,0x10
c0013963:	5a                   	pop    edx
c0013964:	5b                   	pop    ebx
c0013965:	5e                   	pop    esi
c0013966:	c3                   	ret    
c0013967:	90                   	nop

c0013968 <File::tell(unsigned long long*)>:
c0013968:	83 ec 0c             	sub    esp,0xc
c001396b:	b8 0b 00 00 00       	mov    eax,0xb
c0013970:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013974:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001397b:	80 fa 19             	cmp    dl,0x19
c001397e:	77 34                	ja     c00139b4 <File::tell(unsigned long long*)+0x4c>
c0013980:	8b 14 95 60 19 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffce6a0]
c0013987:	85 d2                	test   edx,edx
c0013989:	74 29                	je     c00139b4 <File::tell(unsigned long long*)+0x4c>
c001398b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013991:	85 d2                	test   edx,edx
c0013993:	74 1f                	je     c00139b4 <File::tell(unsigned long long*)+0x4c>
c0013995:	b8 05 00 00 00       	mov    eax,0x5
c001399a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001399e:	74 14                	je     c00139b4 <File::tell(unsigned long long*)+0x4c>
c00139a0:	50                   	push   eax
c00139a1:	8b 02                	mov    eax,DWORD PTR [edx]
c00139a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139a7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00139ad:	52                   	push   edx
c00139ae:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00139b1:	83 c4 10             	add    esp,0x10
c00139b4:	83 c4 0c             	add    esp,0xc
c00139b7:	c3                   	ret    

c00139b8 <File::rewind()>:
c00139b8:	83 ec 10             	sub    esp,0x10
c00139bb:	6a 00                	push   0x0
c00139bd:	6a 00                	push   0x0
c00139bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139c3:	e8 4a ff ff ff       	call   c0013912 <File::seek(unsigned long long)>
c00139c8:	83 c4 1c             	add    esp,0x1c
c00139cb:	c3                   	ret    

c00139cc <File::unlink()>:
c00139cc:	83 ec 0c             	sub    esp,0xc
c00139cf:	b8 0b 00 00 00       	mov    eax,0xb
c00139d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139d8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00139df:	80 f9 19             	cmp    cl,0x19
c00139e2:	77 2f                	ja     c0013a13 <File::unlink()+0x47>
c00139e4:	8b 0c 8d 60 19 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffce6a0]
c00139eb:	85 c9                	test   ecx,ecx
c00139ed:	74 24                	je     c0013a13 <File::unlink()+0x47>
c00139ef:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00139f5:	85 c9                	test   ecx,ecx
c00139f7:	74 1a                	je     c0013a13 <File::unlink()+0x47>
c00139f9:	b8 06 00 00 00       	mov    eax,0x6
c00139fe:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a02:	75 0f                	jne    c0013a13 <File::unlink()+0x47>
c0013a04:	83 c2 0d             	add    edx,0xd
c0013a07:	50                   	push   eax
c0013a08:	50                   	push   eax
c0013a09:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a0b:	52                   	push   edx
c0013a0c:	51                   	push   ecx
c0013a0d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013a10:	83 c4 10             	add    esp,0x10
c0013a13:	83 c4 0c             	add    esp,0xc
c0013a16:	c3                   	ret    
c0013a17:	90                   	nop

c0013a18 <File::rename(char const*)>:
c0013a18:	83 ec 0c             	sub    esp,0xc
c0013a1b:	b8 0b 00 00 00       	mov    eax,0xb
c0013a20:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a24:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a2b:	80 f9 19             	cmp    cl,0x19
c0013a2e:	77 32                	ja     c0013a62 <File::rename(char const*)+0x4a>
c0013a30:	8b 0c 8d 60 19 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffce6a0]
c0013a37:	85 c9                	test   ecx,ecx
c0013a39:	74 27                	je     c0013a62 <File::rename(char const*)+0x4a>
c0013a3b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a41:	85 c9                	test   ecx,ecx
c0013a43:	74 1d                	je     c0013a62 <File::rename(char const*)+0x4a>
c0013a45:	b8 06 00 00 00       	mov    eax,0x6
c0013a4a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a4e:	75 12                	jne    c0013a62 <File::rename(char const*)+0x4a>
c0013a50:	83 c2 0d             	add    edx,0xd
c0013a53:	50                   	push   eax
c0013a54:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a56:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a5a:	52                   	push   edx
c0013a5b:	51                   	push   ecx
c0013a5c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013a5f:	83 c4 10             	add    esp,0x10
c0013a62:	83 c4 0c             	add    esp,0xc
c0013a65:	c3                   	ret    

c0013a66 <File::chfatattr(unsigned char, unsigned char)>:
c0013a66:	57                   	push   edi
c0013a67:	b8 0b 00 00 00       	mov    eax,0xb
c0013a6c:	56                   	push   esi
c0013a6d:	53                   	push   ebx
c0013a6e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a72:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013a76:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a7d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013a81:	80 f9 19             	cmp    cl,0x19
c0013a84:	77 37                	ja     c0013abd <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013a86:	8b 0c 8d 60 19 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffce6a0]
c0013a8d:	85 c9                	test   ecx,ecx
c0013a8f:	74 2c                	je     c0013abd <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013a91:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a97:	85 c9                	test   ecx,ecx
c0013a99:	74 22                	je     c0013abd <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013a9b:	b8 06 00 00 00       	mov    eax,0x6
c0013aa0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013aa4:	75 17                	jne    c0013abd <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013aa6:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013aa8:	89 f0                	mov    eax,esi
c0013aaa:	83 c2 0d             	add    edx,0xd
c0013aad:	0f b6 f0             	movzx  esi,al
c0013ab0:	0f b6 db             	movzx  ebx,bl
c0013ab3:	56                   	push   esi
c0013ab4:	53                   	push   ebx
c0013ab5:	52                   	push   edx
c0013ab6:	51                   	push   ecx
c0013ab7:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013aba:	83 c4 10             	add    esp,0x10
c0013abd:	5b                   	pop    ebx
c0013abe:	5e                   	pop    esi
c0013abf:	5f                   	pop    edi
c0013ac0:	c3                   	ret    
c0013ac1:	90                   	nop

c0013ac2 <File::exists()>:
c0013ac2:	83 ec 0c             	sub    esp,0xc
c0013ac5:	31 c0                	xor    eax,eax
c0013ac7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013acb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013ad2:	80 f9 19             	cmp    cl,0x19
c0013ad5:	77 24                	ja     c0013afb <File::exists()+0x39>
c0013ad7:	8b 0c 8d 60 19 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffce6a0]
c0013ade:	85 c9                	test   ecx,ecx
c0013ae0:	74 19                	je     c0013afb <File::exists()+0x39>
c0013ae2:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013ae8:	85 c9                	test   ecx,ecx
c0013aea:	74 0f                	je     c0013afb <File::exists()+0x39>
c0013aec:	83 c2 0d             	add    edx,0xd
c0013aef:	50                   	push   eax
c0013af0:	50                   	push   eax
c0013af1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013af3:	52                   	push   edx
c0013af4:	51                   	push   ecx
c0013af5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013af8:	83 c4 10             	add    esp,0x10
c0013afb:	83 c4 0c             	add    esp,0xc
c0013afe:	c3                   	ret    
c0013aff:	90                   	nop

c0013b00 <File::stat(unsigned long long*, bool*)>:
c0013b00:	56                   	push   esi
c0013b01:	53                   	push   ebx
c0013b02:	50                   	push   eax
c0013b03:	b8 0b 00 00 00       	mov    eax,0xb
c0013b08:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b0c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013b10:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b17:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013b1b:	80 f9 19             	cmp    cl,0x19
c0013b1e:	77 3d                	ja     c0013b5d <File::stat(unsigned long long*, bool*)+0x5d>
c0013b20:	8b 0c 8d 60 19 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffce6a0]
c0013b27:	85 c9                	test   ecx,ecx
c0013b29:	74 32                	je     c0013b5d <File::stat(unsigned long long*, bool*)+0x5d>
c0013b2b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b31:	85 c9                	test   ecx,ecx
c0013b33:	74 28                	je     c0013b5d <File::stat(unsigned long long*, bool*)+0x5d>
c0013b35:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b37:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b3b:	74 13                	je     c0013b50 <File::stat(unsigned long long*, bool*)+0x50>
c0013b3d:	83 ec 04             	sub    esp,0x4
c0013b40:	56                   	push   esi
c0013b41:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013b47:	51                   	push   ecx
c0013b48:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013b4b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013b4e:	eb 0a                	jmp    c0013b5a <File::stat(unsigned long long*, bool*)+0x5a>
c0013b50:	53                   	push   ebx
c0013b51:	83 c2 0d             	add    edx,0xd
c0013b54:	56                   	push   esi
c0013b55:	52                   	push   edx
c0013b56:	51                   	push   ecx
c0013b57:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013b5a:	83 c4 10             	add    esp,0x10
c0013b5d:	5a                   	pop    edx
c0013b5e:	5b                   	pop    ebx
c0013b5f:	5e                   	pop    esi
c0013b60:	c3                   	ret    
c0013b61:	90                   	nop

c0013b62 <Directory::Directory(char const*, Process*)>:
c0013b62:	83 ec 0c             	sub    esp,0xc
c0013b65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b69:	83 ec 08             	sub    esp,0x8
c0013b6c:	6a 00                	push   0x0
c0013b6e:	50                   	push   eax
c0013b6f:	e8 be e1 ff ff       	call   c0011d32 <UnixFile::UnixFile(int)>
c0013b74:	83 c4 10             	add    esp,0x10
c0013b77:	ba d4 b5 02 c0       	mov    edx,0xc002b5d4
c0013b7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b80:	89 10                	mov    DWORD PTR [eax],edx
c0013b82:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b86:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013b8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b90:	83 c0 0d             	add    eax,0xd
c0013b93:	83 ec 04             	sub    esp,0x4
c0013b96:	52                   	push   edx
c0013b97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b9b:	50                   	push   eax
c0013b9c:	e8 a8 f9 ff ff       	call   c0013549 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013ba1:	83 c4 10             	add    esp,0x10
c0013ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ba8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013bab:	8d 50 bf             	lea    edx,[eax-0x41]
c0013bae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bb2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013bb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bbc:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013bc0:	90                   	nop
c0013bc1:	83 c4 0c             	add    esp,0xc
c0013bc4:	c3                   	ret    
c0013bc5:	90                   	nop

c0013bc6 <Directory::~Directory()>:
c0013bc6:	83 ec 0c             	sub    esp,0xc
c0013bc9:	ba d4 b5 02 c0       	mov    edx,0xc002b5d4
c0013bce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bd2:	89 10                	mov    DWORD PTR [eax],edx
c0013bd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bd8:	83 ec 0c             	sub    esp,0xc
c0013bdb:	50                   	push   eax
c0013bdc:	e8 01 e3 ff ff       	call   c0011ee2 <UnixFile::~UnixFile()>
c0013be1:	83 c4 10             	add    esp,0x10
c0013be4:	90                   	nop
c0013be5:	83 c4 0c             	add    esp,0xc
c0013be8:	c3                   	ret    
c0013be9:	90                   	nop

c0013bea <Directory::~Directory()>:
c0013bea:	83 ec 0c             	sub    esp,0xc
c0013bed:	83 ec 0c             	sub    esp,0xc
c0013bf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bf4:	e8 cd ff ff ff       	call   c0013bc6 <Directory::~Directory()>
c0013bf9:	83 c4 10             	add    esp,0x10
c0013bfc:	83 ec 08             	sub    esp,0x8
c0013bff:	68 14 01 00 00       	push   0x114
c0013c04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c08:	e8 59 f5 ff ff       	call   c0013166 <operator delete(void*, unsigned long)>
c0013c0d:	83 c4 10             	add    esp,0x10
c0013c10:	83 c4 0c             	add    esp,0xc
c0013c13:	c3                   	ret    

c0013c14 <Directory::open()>:
c0013c14:	53                   	push   ebx
c0013c15:	b8 0b 00 00 00       	mov    eax,0xb
c0013c1a:	83 ec 08             	sub    esp,0x8
c0013c1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c21:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013c28:	80 fa 19             	cmp    dl,0x19
c0013c2b:	77 3d                	ja     c0013c6a <Directory::open()+0x56>
c0013c2d:	8b 14 95 60 19 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffce6a0]
c0013c34:	85 d2                	test   edx,edx
c0013c36:	74 32                	je     c0013c6a <Directory::open()+0x56>
c0013c38:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013c3e:	85 d2                	test   edx,edx
c0013c40:	74 28                	je     c0013c6a <Directory::open()+0x56>
c0013c42:	b8 06 00 00 00       	mov    eax,0x6
c0013c47:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013c4b:	75 1d                	jne    c0013c6a <Directory::open()+0x56>
c0013c4d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013c53:	50                   	push   eax
c0013c54:	8b 02                	mov    eax,DWORD PTR [edx]
c0013c56:	51                   	push   ecx
c0013c57:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013c5a:	51                   	push   ecx
c0013c5b:	52                   	push   edx
c0013c5c:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013c5f:	83 c4 10             	add    esp,0x10
c0013c62:	85 c0                	test   eax,eax
c0013c64:	75 04                	jne    c0013c6a <Directory::open()+0x56>
c0013c66:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013c6a:	83 c4 08             	add    esp,0x8
c0013c6d:	5b                   	pop    ebx
c0013c6e:	c3                   	ret    
c0013c6f:	90                   	nop

c0013c70 <Directory::read(unsigned long long, void*, int*)>:
c0013c70:	53                   	push   ebx
c0013c71:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013c75:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013c79:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013c80:	3c 19                	cmp    al,0x19
c0013c82:	77 35                	ja     c0013cb9 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013c84:	8b 04 85 60 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce6a0]
c0013c8b:	85 c0                	test   eax,eax
c0013c8d:	74 2a                	je     c0013cb9 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013c8f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013c95:	85 c0                	test   eax,eax
c0013c97:	74 20                	je     c0013cb9 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013c99:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013c9d:	74 21                	je     c0013cc0 <Directory::read(unsigned long long, void*, int*)+0x50>
c0013c9f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013ca1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013ca5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013cab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013caf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013cb3:	5b                   	pop    ebx
c0013cb4:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0013cb7:	ff e0                	jmp    eax
c0013cb9:	b8 0b 00 00 00       	mov    eax,0xb
c0013cbe:	eb 05                	jmp    c0013cc5 <Directory::read(unsigned long long, void*, int*)+0x55>
c0013cc0:	b8 05 00 00 00       	mov    eax,0x5
c0013cc5:	5b                   	pop    ebx
c0013cc6:	c3                   	ret    
c0013cc7:	90                   	nop

c0013cc8 <Directory::write(unsigned long long, void*, int*)>:
c0013cc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ccc:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0013cd3:	b8 0b 00 00 00       	mov    eax,0xb
c0013cd8:	80 fa 19             	cmp    dl,0x19
c0013cdb:	77 18                	ja     c0013cf5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013cdd:	8b 14 95 60 19 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffce6a0]
c0013ce4:	85 d2                	test   edx,edx
c0013ce6:	74 0d                	je     c0013cf5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013ce8:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0013cef:	19 c0                	sbb    eax,eax
c0013cf1:	83 e0 0a             	and    eax,0xa
c0013cf4:	40                   	inc    eax
c0013cf5:	c3                   	ret    

c0013cf6 <Directory::close()>:
c0013cf6:	53                   	push   ebx
c0013cf7:	b8 0b 00 00 00       	mov    eax,0xb
c0013cfc:	83 ec 08             	sub    esp,0x8
c0013cff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013d03:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013d0a:	80 fa 19             	cmp    dl,0x19
c0013d0d:	77 41                	ja     c0013d50 <Directory::close()+0x5a>
c0013d0f:	8b 1c 95 60 19 03 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffce6a0]
c0013d16:	85 db                	test   ebx,ebx
c0013d18:	74 36                	je     c0013d50 <Directory::close()+0x5a>
c0013d1a:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013d21:	74 2d                	je     c0013d50 <Directory::close()+0x5a>
c0013d23:	b8 05 00 00 00       	mov    eax,0x5
c0013d28:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013d2c:	74 22                	je     c0013d50 <Directory::close()+0x5a>
c0013d2e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013d32:	8b 04 95 60 19 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffce6a0]
c0013d39:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013d3f:	53                   	push   ebx
c0013d40:	53                   	push   ebx
c0013d41:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d43:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013d49:	50                   	push   eax
c0013d4a:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013d4d:	83 c4 10             	add    esp,0x10
c0013d50:	83 c4 08             	add    esp,0x8
c0013d53:	5b                   	pop    ebx
c0013d54:	c3                   	ret    
c0013d55:	90                   	nop

c0013d56 <Directory::unlink()>:
c0013d56:	83 ec 0c             	sub    esp,0xc
c0013d59:	b8 0b 00 00 00       	mov    eax,0xb
c0013d5e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013d62:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013d69:	80 f9 19             	cmp    cl,0x19
c0013d6c:	77 2f                	ja     c0013d9d <Directory::unlink()+0x47>
c0013d6e:	8b 0c 8d 60 19 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffce6a0]
c0013d75:	85 c9                	test   ecx,ecx
c0013d77:	74 24                	je     c0013d9d <Directory::unlink()+0x47>
c0013d79:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013d7f:	85 c9                	test   ecx,ecx
c0013d81:	74 1a                	je     c0013d9d <Directory::unlink()+0x47>
c0013d83:	b8 06 00 00 00       	mov    eax,0x6
c0013d88:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013d8c:	75 0f                	jne    c0013d9d <Directory::unlink()+0x47>
c0013d8e:	83 c2 0d             	add    edx,0xd
c0013d91:	50                   	push   eax
c0013d92:	50                   	push   eax
c0013d93:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013d95:	52                   	push   edx
c0013d96:	51                   	push   ecx
c0013d97:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013d9a:	83 c4 10             	add    esp,0x10
c0013d9d:	83 c4 0c             	add    esp,0xc
c0013da0:	c3                   	ret    
c0013da1:	90                   	nop

c0013da2 <Directory::rename(char const*)>:
c0013da2:	83 ec 0c             	sub    esp,0xc
c0013da5:	b8 0b 00 00 00       	mov    eax,0xb
c0013daa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013dae:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013db5:	80 f9 19             	cmp    cl,0x19
c0013db8:	77 32                	ja     c0013dec <Directory::rename(char const*)+0x4a>
c0013dba:	8b 0c 8d 60 19 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffce6a0]
c0013dc1:	85 c9                	test   ecx,ecx
c0013dc3:	74 27                	je     c0013dec <Directory::rename(char const*)+0x4a>
c0013dc5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013dcb:	85 c9                	test   ecx,ecx
c0013dcd:	74 1d                	je     c0013dec <Directory::rename(char const*)+0x4a>
c0013dcf:	b8 06 00 00 00       	mov    eax,0x6
c0013dd4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013dd8:	75 12                	jne    c0013dec <Directory::rename(char const*)+0x4a>
c0013dda:	83 c2 0d             	add    edx,0xd
c0013ddd:	50                   	push   eax
c0013dde:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013de0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013de4:	52                   	push   edx
c0013de5:	51                   	push   ecx
c0013de6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013de9:	83 c4 10             	add    esp,0x10
c0013dec:	83 c4 0c             	add    esp,0xc
c0013def:	c3                   	ret    

c0013df0 <Directory::exists()>:
c0013df0:	83 ec 0c             	sub    esp,0xc
c0013df3:	31 c0                	xor    eax,eax
c0013df5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013df9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013e00:	80 f9 19             	cmp    cl,0x19
c0013e03:	77 24                	ja     c0013e29 <Directory::exists()+0x39>
c0013e05:	8b 0c 8d 60 19 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffce6a0]
c0013e0c:	85 c9                	test   ecx,ecx
c0013e0e:	74 19                	je     c0013e29 <Directory::exists()+0x39>
c0013e10:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013e16:	85 c9                	test   ecx,ecx
c0013e18:	74 0f                	je     c0013e29 <Directory::exists()+0x39>
c0013e1a:	83 c2 0d             	add    edx,0xd
c0013e1d:	50                   	push   eax
c0013e1e:	50                   	push   eax
c0013e1f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013e21:	52                   	push   edx
c0013e22:	51                   	push   ecx
c0013e23:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013e26:	83 c4 10             	add    esp,0x10
c0013e29:	83 c4 0c             	add    esp,0xc
c0013e2c:	c3                   	ret    
c0013e2d:	90                   	nop

c0013e2e <Directory::read(dirent*)>:
c0013e2e:	83 ec 1c             	sub    esp,0x1c
c0013e31:	b8 0b 00 00 00       	mov    eax,0xb
c0013e36:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013e3a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013e41:	80 fa 19             	cmp    dl,0x19
c0013e44:	77 30                	ja     c0013e76 <Directory::read(dirent*)+0x48>
c0013e46:	8b 14 95 60 19 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffce6a0]
c0013e4d:	85 d2                	test   edx,edx
c0013e4f:	74 25                	je     c0013e76 <Directory::read(dirent*)+0x48>
c0013e51:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013e58:	74 1c                	je     c0013e76 <Directory::read(dirent*)+0x48>
c0013e5a:	83 ec 0c             	sub    esp,0xc
c0013e5d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013e5f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013e63:	52                   	push   edx
c0013e64:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013e68:	6a 00                	push   0x0
c0013e6a:	68 10 01 00 00       	push   0x110
c0013e6f:	51                   	push   ecx
c0013e70:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e73:	83 c4 20             	add    esp,0x20
c0013e76:	83 c4 1c             	add    esp,0x1c
c0013e79:	c3                   	ret    

c0013e7a <Directory::create()>:
c0013e7a:	83 ec 0c             	sub    esp,0xc
c0013e7d:	b8 0b 00 00 00       	mov    eax,0xb
c0013e82:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013e86:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013e8d:	80 f9 19             	cmp    cl,0x19
c0013e90:	77 2f                	ja     c0013ec1 <Directory::create()+0x47>
c0013e92:	8b 0c 8d 60 19 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffce6a0]
c0013e99:	85 c9                	test   ecx,ecx
c0013e9b:	74 24                	je     c0013ec1 <Directory::create()+0x47>
c0013e9d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013ea3:	85 c9                	test   ecx,ecx
c0013ea5:	74 1a                	je     c0013ec1 <Directory::create()+0x47>
c0013ea7:	b8 06 00 00 00       	mov    eax,0x6
c0013eac:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013eb0:	75 0f                	jne    c0013ec1 <Directory::create()+0x47>
c0013eb2:	83 c2 0d             	add    edx,0xd
c0013eb5:	50                   	push   eax
c0013eb6:	50                   	push   eax
c0013eb7:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013eb9:	52                   	push   edx
c0013eba:	51                   	push   ecx
c0013ebb:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013ebe:	83 c4 10             	add    esp,0x10
c0013ec1:	83 c4 0c             	add    esp,0xc
c0013ec4:	c3                   	ret    
c0013ec5:	90                   	nop

c0013ec6 <File::isAtty()>:
c0013ec6:	31 c0                	xor    eax,eax
c0013ec8:	c3                   	ret    
c0013ec9:	90                   	nop

c0013eca <Directory::isAtty()>:
c0013eca:	31 c0                	xor    eax,eax
c0013ecc:	c3                   	ret    
c0013ecd:	90                   	nop

c0013ece <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0013ece:	b8 0a 00 00 00       	mov    eax,0xa
c0013ed3:	c3                   	ret    

c0013ed4 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0013ed4:	b8 0a 00 00 00       	mov    eax,0xa
c0013ed9:	c3                   	ret    

c0013eda <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013eda:	b8 0a 00 00 00       	mov    eax,0xa
c0013edf:	c3                   	ret    

c0013ee0 <Bus::Bus(char const*)>:
c0013ee0:	83 ec 0c             	sub    esp,0xc
c0013ee3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ee7:	83 ec 08             	sub    esp,0x8
c0013eea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013eee:	50                   	push   eax
c0013eef:	e8 28 06 00 00       	call   c001451c <Device::Device(char const*)>
c0013ef4:	83 c4 10             	add    esp,0x10
c0013ef7:	ba 10 b7 02 c0       	mov    edx,0xc002b710
c0013efc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f00:	89 10                	mov    DWORD PTR [eax],edx
c0013f02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f06:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013f10:	90                   	nop
c0013f11:	83 c4 0c             	add    esp,0xc
c0013f14:	c3                   	ret    
c0013f15:	90                   	nop

c0013f16 <Bus::~Bus()>:
c0013f16:	83 ec 0c             	sub    esp,0xc
c0013f19:	ba 10 b7 02 c0       	mov    edx,0xc002b710
c0013f1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f22:	89 10                	mov    DWORD PTR [eax],edx
c0013f24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f28:	83 ec 0c             	sub    esp,0xc
c0013f2b:	50                   	push   eax
c0013f2c:	e8 e7 06 00 00       	call   c0014618 <Device::~Device()>
c0013f31:	83 c4 10             	add    esp,0x10
c0013f34:	90                   	nop
c0013f35:	83 c4 0c             	add    esp,0xc
c0013f38:	c3                   	ret    
c0013f39:	90                   	nop

c0013f3a <Bus::~Bus()>:
c0013f3a:	83 ec 0c             	sub    esp,0xc
c0013f3d:	83 ec 0c             	sub    esp,0xc
c0013f40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f44:	e8 cd ff ff ff       	call   c0013f16 <Bus::~Bus()>
c0013f49:	83 c4 10             	add    esp,0x10
c0013f4c:	83 ec 08             	sub    esp,0x8
c0013f4f:	68 58 01 00 00       	push   0x158
c0013f54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f58:	e8 09 f2 ff ff       	call   c0013166 <operator delete(void*, unsigned long)>
c0013f5d:	83 c4 10             	add    esp,0x10
c0013f60:	83 c4 0c             	add    esp,0xc
c0013f63:	c3                   	ret    

c0013f64 <Buzzer::Buzzer(char const*)>:
c0013f64:	83 ec 0c             	sub    esp,0xc
c0013f67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f6b:	83 ec 08             	sub    esp,0x8
c0013f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f72:	50                   	push   eax
c0013f73:	e8 a4 05 00 00       	call   c001451c <Device::Device(char const*)>
c0013f78:	83 c4 10             	add    esp,0x10
c0013f7b:	ba dc b7 02 c0       	mov    edx,0xc002b7dc
c0013f80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f84:	89 10                	mov    DWORD PTR [eax],edx
c0013f86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f8a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013f94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f98:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013fa2:	90                   	nop
c0013fa3:	83 c4 0c             	add    esp,0xc
c0013fa6:	c3                   	ret    
c0013fa7:	90                   	nop

c0013fa8 <Buzzer::~Buzzer()>:
c0013fa8:	83 ec 0c             	sub    esp,0xc
c0013fab:	ba dc b7 02 c0       	mov    edx,0xc002b7dc
c0013fb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fb4:	89 10                	mov    DWORD PTR [eax],edx
c0013fb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fba:	83 ec 0c             	sub    esp,0xc
c0013fbd:	50                   	push   eax
c0013fbe:	e8 55 06 00 00       	call   c0014618 <Device::~Device()>
c0013fc3:	83 c4 10             	add    esp,0x10
c0013fc6:	90                   	nop
c0013fc7:	83 c4 0c             	add    esp,0xc
c0013fca:	c3                   	ret    
c0013fcb:	90                   	nop

c0013fcc <Buzzer::~Buzzer()>:
c0013fcc:	83 ec 0c             	sub    esp,0xc
c0013fcf:	83 ec 0c             	sub    esp,0xc
c0013fd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fd6:	e8 cd ff ff ff       	call   c0013fa8 <Buzzer::~Buzzer()>
c0013fdb:	83 c4 10             	add    esp,0x10
c0013fde:	83 ec 08             	sub    esp,0x8
c0013fe1:	68 5c 01 00 00       	push   0x15c
c0013fe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fea:	e8 77 f1 ff ff       	call   c0013166 <operator delete(void*, unsigned long)>
c0013fef:	83 c4 10             	add    esp,0x10
c0013ff2:	83 c4 0c             	add    esp,0xc
c0013ff5:	c3                   	ret    

c0013ff6 <beepThread(void*)>:
c0013ff6:	53                   	push   ebx
c0013ff7:	83 ec 08             	sub    esp,0x8
c0013ffa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ffe:	e8 a5 a0 00 00       	call   c001e0a8 <unlockScheduler()>
c0014003:	b8 40 42 0f 00       	mov    eax,0xf4240
c0014008:	52                   	push   edx
c0014009:	52                   	push   edx
c001400a:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0014010:	52                   	push   edx
c0014011:	50                   	push   eax
c0014012:	e8 eb a7 00 00       	call   c001e802 <nanoSleep(unsigned long long)>
c0014017:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001401a:	e8 7d 00 00 00       	call   c001409c <Buzzer::stop()>
c001401f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0014027:	83 c4 18             	add    esp,0x18
c001402a:	5b                   	pop    ebx
c001402b:	e9 ab a6 00 00       	jmp    c001e6db <blockTask(TaskState)>

c0014030 <Buzzer::beep(int, int, bool)>:
c0014030:	57                   	push   edi
c0014031:	56                   	push   esi
c0014032:	53                   	push   ebx
c0014033:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014037:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001403b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001403f:	52                   	push   edx
c0014040:	52                   	push   edx
c0014041:	8b 06                	mov    eax,DWORD PTR [esi]
c0014043:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014047:	56                   	push   esi
c0014048:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001404b:	83 c4 10             	add    esp,0x10
c001404e:	89 f8                	mov    eax,edi
c0014050:	84 c0                	test   al,al
c0014052:	74 1c                	je     c0014070 <Buzzer::beep(int, int, bool)+0x40>
c0014054:	50                   	push   eax
c0014055:	50                   	push   eax
c0014056:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c001405c:	99                   	cdq    
c001405d:	52                   	push   edx
c001405e:	50                   	push   eax
c001405f:	e8 9e a7 00 00       	call   c001e802 <nanoSleep(unsigned long long)>
c0014064:	83 c4 10             	add    esp,0x10
c0014067:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001406b:	5b                   	pop    ebx
c001406c:	5e                   	pop    esi
c001406d:	5f                   	pop    edi
c001406e:	eb 2c                	jmp    c001409c <Buzzer::stop()>
c0014070:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0014076:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001407b:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0014083:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0014087:	c7 44 24 14 f6 3f 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013ff6
c001408f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014093:	5b                   	pop    ebx
c0014094:	5e                   	pop    esi
c0014095:	5f                   	pop    edi
c0014096:	e9 13 9a 00 00       	jmp    c001daae <Process::createThread(void (*)(void*), void*, int)>
c001409b:	90                   	nop

c001409c <Buzzer::stop()>:
c001409c:	83 ec 14             	sub    esp,0x14
c001409f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00140a3:	8b 10                	mov    edx,DWORD PTR [eax]
c00140a5:	6a 00                	push   0x0
c00140a7:	50                   	push   eax
c00140a8:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00140ab:	83 c4 1c             	add    esp,0x1c
c00140ae:	c3                   	ret    
c00140af:	90                   	nop

c00140b0 <User::loadClockSettings(int)>:
c00140b0:	53                   	push   ebx
c00140b1:	83 ec 14             	sub    esp,0x14
c00140b4:	68 14 01 00 00       	push   0x114
c00140b9:	e8 9e be ff ff       	call   c000ff5c <malloc>
c00140be:	83 c4 0c             	add    esp,0xc
c00140c1:	89 c3                	mov    ebx,eax
c00140c3:	ff 35 48 48 03 c0    	push   DWORD PTR ds:0xc0034848
c00140c9:	68 30 b9 02 c0       	push   0xc002b930
c00140ce:	50                   	push   eax
c00140cf:	e8 1e f6 ff ff       	call   c00136f2 <File::File(char const*, Process*)>
c00140d4:	58                   	pop    eax
c00140d5:	5a                   	pop    edx
c00140d6:	6a 01                	push   0x1
c00140d8:	53                   	push   ebx
c00140d9:	e8 c6 f6 ff ff       	call   c00137a4 <File::open(FileOpenMode)>
c00140de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00140e1:	e8 cc f7 ff ff       	call   c00138b2 <File::close()>
c00140e6:	83 c4 10             	add    esp,0x10
c00140e9:	85 db                	test   ebx,ebx
c00140eb:	74 0f                	je     c00140fc <User::loadClockSettings(int)+0x4c>
c00140ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140ef:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00140f3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00140f6:	83 c4 08             	add    esp,0x8
c00140f9:	5b                   	pop    ebx
c00140fa:	ff e0                	jmp    eax
c00140fc:	83 c4 08             	add    esp,0x8
c00140ff:	5b                   	pop    ebx
c0014100:	c3                   	ret    
c0014101:	90                   	nop

c0014102 <Clock::Clock(char const*)>:
c0014102:	83 ec 0c             	sub    esp,0xc
c0014105:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014109:	83 ec 08             	sub    esp,0x8
c001410c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014110:	50                   	push   eax
c0014111:	e8 06 04 00 00       	call   c001451c <Device::Device(char const*)>
c0014116:	83 c4 10             	add    esp,0x10
c0014119:	ba 58 b9 02 c0       	mov    edx,0xc002b958
c001411e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014122:	89 10                	mov    DWORD PTR [eax],edx
c0014124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014128:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0014132:	90                   	nop
c0014133:	83 c4 0c             	add    esp,0xc
c0014136:	c3                   	ret    
c0014137:	90                   	nop

c0014138 <Clock::~Clock()>:
c0014138:	83 ec 0c             	sub    esp,0xc
c001413b:	ba 58 b9 02 c0       	mov    edx,0xc002b958
c0014140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014144:	89 10                	mov    DWORD PTR [eax],edx
c0014146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001414a:	83 ec 0c             	sub    esp,0xc
c001414d:	50                   	push   eax
c001414e:	e8 c5 04 00 00       	call   c0014618 <Device::~Device()>
c0014153:	83 c4 10             	add    esp,0x10
c0014156:	90                   	nop
c0014157:	83 c4 0c             	add    esp,0xc
c001415a:	c3                   	ret    
c001415b:	90                   	nop

c001415c <Clock::~Clock()>:
c001415c:	83 ec 0c             	sub    esp,0xc
c001415f:	83 ec 0c             	sub    esp,0xc
c0014162:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014166:	e8 cd ff ff ff       	call   c0014138 <Clock::~Clock()>
c001416b:	83 c4 10             	add    esp,0x10
c001416e:	83 ec 08             	sub    esp,0x8
c0014171:	68 58 01 00 00       	push   0x158
c0014176:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001417a:	e8 e7 ef ff ff       	call   c0013166 <operator delete(void*, unsigned long)>
c001417f:	83 c4 10             	add    esp,0x10
c0014182:	83 c4 0c             	add    esp,0xc
c0014185:	c3                   	ret    

c0014186 <Clock::timeInSecondsLocal()>:
c0014186:	53                   	push   ebx
c0014187:	83 ec 14             	sub    esp,0x14
c001418a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001418e:	8b 10                	mov    edx,DWORD PTR [eax]
c0014190:	50                   	push   eax
c0014191:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0014194:	0f b6 0d 15 15 03 c0 	movzx  ecx,BYTE PTR ds:0xc0031515
c001419b:	03 0d 10 15 03 c0    	add    ecx,DWORD PTR ds:0xc0031510
c00141a1:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00141a7:	89 cb                	mov    ebx,ecx
c00141a9:	c1 fb 1f             	sar    ebx,0x1f
c00141ac:	01 c8                	add    eax,ecx
c00141ae:	11 da                	adc    edx,ebx
c00141b0:	83 c4 10             	add    esp,0x10
c00141b3:	31 c9                	xor    ecx,ecx
c00141b5:	80 3d 14 15 03 c0 00 	cmp    BYTE PTR ds:0xc0031514,0x0
c00141bc:	74 05                	je     c00141c3 <Clock::timeInSecondsLocal()+0x3d>
c00141be:	b9 08 07 00 00       	mov    ecx,0x708
c00141c3:	31 db                	xor    ebx,ebx
c00141c5:	01 c8                	add    eax,ecx
c00141c7:	11 da                	adc    edx,ebx
c00141c9:	83 c4 08             	add    esp,0x8
c00141cc:	5b                   	pop    ebx
c00141cd:	c3                   	ret    

c00141ce <Clock::timeInDatetimeLocal()>:
c00141ce:	53                   	push   ebx
c00141cf:	83 ec 14             	sub    esp,0x14
c00141d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00141d6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00141da:	e8 a7 ff ff ff       	call   c0014186 <Clock::timeInSecondsLocal()>
c00141df:	83 c4 0c             	add    esp,0xc
c00141e2:	52                   	push   edx
c00141e3:	50                   	push   eax
c00141e4:	53                   	push   ebx
c00141e5:	e8 ed 01 00 00       	call   c00143d7 <secondsToDatetime(unsigned long long)>
c00141ea:	89 d8                	mov    eax,ebx
c00141ec:	83 c4 14             	add    esp,0x14
c00141ef:	5b                   	pop    ebx
c00141f0:	c2 04 00             	ret    0x4
c00141f3:	90                   	nop

c00141f4 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00141f4:	57                   	push   edi
c00141f5:	56                   	push   esi
c00141f6:	53                   	push   ebx
c00141f7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00141fb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00141ff:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014201:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014205:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0014208:	0f b6 05 15 15 03 c0 	movzx  eax,BYTE PTR ds:0xc0031515
c001420f:	03 05 10 15 03 c0    	add    eax,DWORD PTR ds:0xc0031510
c0014215:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001421b:	99                   	cdq    
c001421c:	29 c6                	sub    esi,eax
c001421e:	19 d7                	sbb    edi,edx
c0014220:	89 f0                	mov    eax,esi
c0014222:	89 fa                	mov    edx,edi
c0014224:	31 f6                	xor    esi,esi
c0014226:	80 3d 14 15 03 c0 00 	cmp    BYTE PTR ds:0xc0031514,0x0
c001422d:	74 05                	je     c0014234 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001422f:	be 08 07 00 00       	mov    esi,0x708
c0014234:	31 ff                	xor    edi,edi
c0014236:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001423a:	29 f0                	sub    eax,esi
c001423c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014240:	19 fa                	sbb    edx,edi
c0014242:	89 d8                	mov    eax,ebx
c0014244:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014248:	5b                   	pop    ebx
c0014249:	5e                   	pop    esi
c001424a:	5f                   	pop    edi
c001424b:	ff e0                	jmp    eax
c001424d:	90                   	nop

c001424e <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001424e:	57                   	push   edi
c001424f:	56                   	push   esi
c0014250:	53                   	push   ebx
c0014251:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014255:	8b 06                	mov    eax,DWORD PTR [esi]
c0014257:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001425a:	50                   	push   eax
c001425b:	50                   	push   eax
c001425c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014260:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014264:	e8 48 00 00 00       	call   c00142b1 <datetimeToSeconds(datetime_t)>
c0014269:	83 c4 10             	add    esp,0x10
c001426c:	0f b6 0d 15 15 03 c0 	movzx  ecx,BYTE PTR ds:0xc0031515
c0014273:	03 0d 10 15 03 c0    	add    ecx,DWORD PTR ds:0xc0031510
c0014279:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001427f:	89 cb                	mov    ebx,ecx
c0014281:	c1 fb 1f             	sar    ebx,0x1f
c0014284:	29 c8                	sub    eax,ecx
c0014286:	19 da                	sbb    edx,ebx
c0014288:	31 c9                	xor    ecx,ecx
c001428a:	80 3d 14 15 03 c0 00 	cmp    BYTE PTR ds:0xc0031514,0x0
c0014291:	74 05                	je     c0014298 <Clock::setTimeInDatetimeLocal(datetime_t)+0x4a>
c0014293:	b9 08 07 00 00       	mov    ecx,0x708
c0014298:	31 db                	xor    ebx,ebx
c001429a:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001429e:	29 c8                	sub    eax,ecx
c00142a0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00142a4:	19 da                	sbb    edx,ebx
c00142a6:	89 f8                	mov    eax,edi
c00142a8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00142ac:	5b                   	pop    ebx
c00142ad:	5e                   	pop    esi
c00142ae:	5f                   	pop    edi
c00142af:	ff e0                	jmp    eax

c00142b1 <datetimeToSeconds(datetime_t)>:
c00142b1:	55                   	push   ebp
c00142b2:	57                   	push   edi
c00142b3:	56                   	push   esi
c00142b4:	53                   	push   ebx
c00142b5:	83 ec 14             	sub    esp,0x14
c00142b8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00142bc:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00142c0:	89 d3                	mov    ebx,edx
c00142c2:	0f b6 c6             	movzx  eax,dh
c00142c5:	c1 eb 10             	shr    ebx,0x10
c00142c8:	48                   	dec    eax
c00142c9:	66 81 eb 6c 07       	sub    bx,0x76c
c00142ce:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00142d2:	0f b6 f5             	movzx  esi,ch
c00142d5:	89 cf                	mov    edi,ecx
c00142d7:	6b f6 3c             	imul   esi,esi,0x3c
c00142da:	c1 ef 10             	shr    edi,0x10
c00142dd:	0f b6 c9             	movzx  ecx,cl
c00142e0:	89 f8                	mov    eax,edi
c00142e2:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00142e8:	0f b6 f8             	movzx  edi,al
c00142eb:	0f b6 d2             	movzx  edx,dl
c00142ee:	01 fe                	add    esi,edi
c00142f0:	01 f1                	add    ecx,esi
c00142f2:	0f b7 f3             	movzx  esi,bx
c00142f5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00142f9:	c1 f9 1f             	sar    ecx,0x1f
c00142fc:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0014301:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014305:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c001430a:	8b 0c 8d 00 b9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4700]
c0014311:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0014315:	76 29                	jbe    c0014340 <datetimeToSeconds(datetime_t)+0x8f>
c0014317:	f6 c3 03             	test   bl,0x3
c001431a:	75 24                	jne    c0014340 <datetimeToSeconds(datetime_t)+0x8f>
c001431c:	31 d2                	xor    edx,edx
c001431e:	bf 64 00 00 00       	mov    edi,0x64
c0014323:	89 d8                	mov    eax,ebx
c0014325:	66 f7 f7             	div    di
c0014328:	66 85 d2             	test   dx,dx
c001432b:	75 12                	jne    c001433f <datetimeToSeconds(datetime_t)+0x8e>
c001432d:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0014333:	bf 90 01 00 00       	mov    edi,0x190
c0014338:	99                   	cdq    
c0014339:	f7 ff                	idiv   edi
c001433b:	85 d2                	test   edx,edx
c001433d:	75 01                	jne    c0014340 <datetimeToSeconds(datetime_t)+0x8f>
c001433f:	41                   	inc    ecx
c0014340:	66 83 fb 46          	cmp    bx,0x46
c0014344:	76 45                	jbe    c001438b <datetimeToSeconds(datetime_t)+0xda>
c0014346:	bb 46 00 00 00       	mov    ebx,0x46
c001434b:	bf 64 00 00 00       	mov    edi,0x64
c0014350:	bd 90 01 00 00       	mov    ebp,0x190
c0014355:	b8 6d 01 00 00       	mov    eax,0x16d
c001435a:	f6 c3 03             	test   bl,0x3
c001435d:	75 23                	jne    c0014382 <datetimeToSeconds(datetime_t)+0xd1>
c001435f:	89 d8                	mov    eax,ebx
c0014361:	99                   	cdq    
c0014362:	f7 ff                	idiv   edi
c0014364:	b8 6e 01 00 00       	mov    eax,0x16e
c0014369:	85 d2                	test   edx,edx
c001436b:	75 15                	jne    c0014382 <datetimeToSeconds(datetime_t)+0xd1>
c001436d:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0014373:	99                   	cdq    
c0014374:	f7 fd                	idiv   ebp
c0014376:	83 fa 01             	cmp    edx,0x1
c0014379:	19 c0                	sbb    eax,eax
c001437b:	f7 d0                	not    eax
c001437d:	05 6e 01 00 00       	add    eax,0x16e
c0014382:	01 c1                	add    ecx,eax
c0014384:	43                   	inc    ebx
c0014385:	39 f3                	cmp    ebx,esi
c0014387:	7c cc                	jl     c0014355 <datetimeToSeconds(datetime_t)+0xa4>
c0014389:	eb 35                	jmp    c00143c0 <datetimeToSeconds(datetime_t)+0x10f>
c001438b:	74 33                	je     c00143c0 <datetimeToSeconds(datetime_t)+0x10f>
c001438d:	b8 45 00 00 00       	mov    eax,0x45
c0014392:	89 c2                	mov    edx,eax
c0014394:	83 e2 03             	and    edx,0x3
c0014397:	39 f0                	cmp    eax,esi
c0014399:	7e 0f                	jle    c00143aa <datetimeToSeconds(datetime_t)+0xf9>
c001439b:	83 fa 01             	cmp    edx,0x1
c001439e:	19 d2                	sbb    edx,edx
c00143a0:	48                   	dec    eax
c00143a1:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00143a8:	eb e8                	jmp    c0014392 <datetimeToSeconds(datetime_t)+0xe1>
c00143aa:	b8 6d 01 00 00       	mov    eax,0x16d
c00143af:	85 d2                	test   edx,edx
c00143b1:	75 0b                	jne    c00143be <datetimeToSeconds(datetime_t)+0x10d>
c00143b3:	66 83 fb 01          	cmp    bx,0x1
c00143b7:	19 c0                	sbb    eax,eax
c00143b9:	05 6e 01 00 00       	add    eax,0x16e
c00143be:	29 c1                	sub    ecx,eax
c00143c0:	b8 80 51 01 00       	mov    eax,0x15180
c00143c5:	f7 e9                	imul   ecx
c00143c7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00143cb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00143cf:	83 c4 14             	add    esp,0x14
c00143d2:	5b                   	pop    ebx
c00143d3:	5e                   	pop    esi
c00143d4:	5f                   	pop    edi
c00143d5:	5d                   	pop    ebp
c00143d6:	c3                   	ret    

c00143d7 <secondsToDatetime(unsigned long long)>:
c00143d7:	55                   	push   ebp
c00143d8:	57                   	push   edi
c00143d9:	56                   	push   esi
c00143da:	53                   	push   ebx
c00143db:	83 ec 1c             	sub    esp,0x1c
c00143de:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00143e2:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00143e6:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00143ea:	6a 00                	push   0x0
c00143ec:	68 80 51 01 00       	push   0x15180
c00143f1:	55                   	push   ebp
c00143f2:	57                   	push   edi
c00143f3:	e8 e4 26 01 00       	call   c0026adc <__udivdi3>
c00143f8:	83 c4 10             	add    esp,0x10
c00143fb:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0014401:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014405:	6a 00                	push   0x0
c0014407:	68 80 51 01 00       	push   0x15180
c001440c:	55                   	push   ebp
c001440d:	57                   	push   edi
c001440e:	bf 10 0e 00 00       	mov    edi,0xe10
c0014413:	e8 c4 27 01 00       	call   c0026bdc <__umoddi3>
c0014418:	83 c4 10             	add    esp,0x10
c001441b:	99                   	cdq    
c001441c:	f7 ff                	idiv   edi
c001441e:	bf 3c 00 00 00       	mov    edi,0x3c
c0014423:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0014426:	89 d0                	mov    eax,edx
c0014428:	99                   	cdq    
c0014429:	f7 ff                	idiv   edi
c001442b:	85 db                	test   ebx,ebx
c001442d:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0014430:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0014433:	79 11                	jns    c0014446 <secondsToDatetime(unsigned long long)+0x6f>
c0014435:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014439:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001443f:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014444:	eb 07                	jmp    c001444d <secondsToDatetime(unsigned long long)+0x76>
c0014446:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001444b:	89 d8                	mov    eax,ebx
c001444d:	bf b4 05 00 00       	mov    edi,0x5b4
c0014452:	99                   	cdq    
c0014453:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0014458:	f7 f9                	idiv   ecx
c001445a:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001445f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014463:	31 d2                	xor    edx,edx
c0014465:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001446d:	01 c3                	add    ebx,eax
c001446f:	89 d8                	mov    eax,ebx
c0014471:	f7 f1                	div    ecx
c0014473:	31 d2                	xor    edx,edx
c0014475:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0014478:	89 d8                	mov    eax,ebx
c001447a:	f7 f7                	div    edi
c001447c:	31 d2                	xor    edx,edx
c001447e:	29 c1                	sub    ecx,eax
c0014480:	89 d8                	mov    eax,ebx
c0014482:	f7 f5                	div    ebp
c0014484:	bd 6d 01 00 00       	mov    ebp,0x16d
c0014489:	29 c1                	sub    ecx,eax
c001448b:	31 d2                	xor    edx,edx
c001448d:	89 c8                	mov    eax,ecx
c001448f:	f7 f5                	div    ebp
c0014491:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0014496:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001449a:	31 d2                	xor    edx,edx
c001449c:	89 c8                	mov    eax,ecx
c001449e:	f7 f5                	div    ebp
c00144a0:	31 d2                	xor    edx,edx
c00144a2:	01 c3                	add    ebx,eax
c00144a4:	89 c8                	mov    eax,ecx
c00144a6:	f7 f7                	div    edi
c00144a8:	bf 99 00 00 00       	mov    edi,0x99
c00144ad:	29 c3                	sub    ebx,eax
c00144af:	31 d2                	xor    edx,edx
c00144b1:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00144b9:	29 c3                	sub    ebx,eax
c00144bb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00144be:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00144c1:	bb 05 00 00 00       	mov    ebx,0x5
c00144c6:	83 c1 02             	add    ecx,0x2
c00144c9:	89 c8                	mov    eax,ecx
c00144cb:	f7 f7                	div    edi
c00144cd:	31 d2                	xor    edx,edx
c00144cf:	89 c7                	mov    edi,eax
c00144d1:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00144d7:	83 c0 02             	add    eax,0x2
c00144da:	f7 f3                	div    ebx
c00144dc:	89 eb                	mov    ebx,ebp
c00144de:	29 c3                	sub    ebx,eax
c00144e0:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00144e6:	88 1e                	mov    BYTE PTR [esi],bl
c00144e8:	19 c0                	sbb    eax,eax
c00144ea:	31 d2                	xor    edx,edx
c00144ec:	83 e0 0c             	and    eax,0xc
c00144ef:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00144f3:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00144fb:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00144ff:	83 f9 01             	cmp    ecx,0x1
c0014502:	0f 96 c2             	setbe  dl
c0014505:	41                   	inc    ecx
c0014506:	01 d0                	add    eax,edx
c0014508:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001450b:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001450f:	83 c4 1c             	add    esp,0x1c
c0014512:	89 f0                	mov    eax,esi
c0014514:	5b                   	pop    ebx
c0014515:	5e                   	pop    esi
c0014516:	5f                   	pop    edi
c0014517:	5d                   	pop    ebp
c0014518:	c2 04 00             	ret    0x4
c001451b:	90                   	nop

c001451c <Device::Device(char const*)>:
c001451c:	83 ec 1c             	sub    esp,0x1c
c001451f:	ba 80 ba 02 c0       	mov    edx,0xc002ba80
c0014524:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014528:	89 10                	mov    DWORD PTR [eax],edx
c001452a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001452e:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0014538:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001453c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014546:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001454a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014554:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014558:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014562:	83 ec 08             	sub    esp,0x8
c0014565:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014569:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001456d:	e8 b6 03 00 00       	call   c0014928 <Device::setName(char const*)>
c0014572:	83 c4 10             	add    esp,0x10
c0014575:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001457d:	83 ec 0c             	sub    esp,0xc
c0014580:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014584:	e8 d3 b9 ff ff       	call   c000ff5c <malloc>
c0014589:	83 c4 10             	add    esp,0x10
c001458c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014592:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014599:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001459d:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00145a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145a7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00145ad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00145b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145b7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00145bd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00145c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145c8:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00145cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145d3:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00145da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145de:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00145e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145ec:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00145f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145fa:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014604:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014608:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0014612:	90                   	nop
c0014613:	83 c4 1c             	add    esp,0x1c
c0014616:	c3                   	ret    
c0014617:	90                   	nop

c0014618 <Device::~Device()>:
c0014618:	ba 80 ba 02 c0       	mov    edx,0xc002ba80
c001461d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014621:	89 10                	mov    DWORD PTR [eax],edx
c0014623:	90                   	nop
c0014624:	c3                   	ret    
c0014625:	90                   	nop

c0014626 <Device::~Device()>:
c0014626:	83 ec 0c             	sub    esp,0xc
c0014629:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001462d:	e8 e6 ff ff ff       	call   c0014618 <Device::~Device()>
c0014632:	83 c4 04             	add    esp,0x4
c0014635:	83 ec 08             	sub    esp,0x8
c0014638:	68 58 01 00 00       	push   0x158
c001463d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014641:	e8 20 eb ff ff       	call   c0013166 <operator delete(void*, unsigned long)>
c0014646:	83 c4 10             	add    esp,0x10
c0014649:	83 c4 0c             	add    esp,0xc
c001464c:	c3                   	ret    
c001464d:	90                   	nop

c001464e <Device::findAndLoadDriver()>:
c001464e:	c3                   	ret    
c001464f:	90                   	nop

c0014650 <Device::preOpenPCI(PCIDeviceInfo)>:
c0014650:	57                   	push   edi
c0014651:	b9 09 00 00 00       	mov    ecx,0x9
c0014656:	56                   	push   esi
c0014657:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001465b:	8d 74 24 10          	lea    esi,[esp+0x10]
c001465f:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0014669:	81 c7 18 01 00 00    	add    edi,0x118
c001466f:	fc                   	cld    
c0014670:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014672:	5e                   	pop    esi
c0014673:	5f                   	pop    edi
c0014674:	c3                   	ret    
c0014675:	90                   	nop

c0014676 <Device::preOpenACPI(void*, char*, char*)>:
c0014676:	56                   	push   esi
c0014677:	53                   	push   ebx
c0014678:	83 ec 08             	sub    esp,0x8
c001467b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001467f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014683:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c001468d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014691:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0014697:	6a 1e                	push   0x1e
c0014699:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c001469f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00146a3:	81 c3 3a 01 00 00    	add    ebx,0x13a
c00146a9:	50                   	push   eax
c00146aa:	e8 f1 bf fe ff       	call   c00006a0 <memcpy>
c00146af:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00146b3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00146b7:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00146bf:	83 c4 14             	add    esp,0x14
c00146c2:	5b                   	pop    ebx
c00146c3:	5e                   	pop    esi
c00146c4:	e9 d7 bf fe ff       	jmp    c00006a0 <memcpy>
c00146c9:	90                   	nop

c00146ca <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00146ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00146ce:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00146d3:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00146da:	75 0b                	jne    c00146e7 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c00146dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00146de:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00146e2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00146e5:	eb 1e                	jmp    c0014705 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c00146e7:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c00146ec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00146f2:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00146f8:	8b 08                	mov    ecx,DWORD PTR [eax]
c00146fa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00146fe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014702:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014705:	ff e0                	jmp    eax
c0014707:	90                   	nop

c0014708 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001470c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014711:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014718:	75 0b                	jne    c0014725 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001471a:	8b 00                	mov    eax,DWORD PTR [eax]
c001471c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014720:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0014723:	eb 1e                	jmp    c0014743 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0014725:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c001472a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014730:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014736:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014738:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001473c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014740:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0014743:	ff e0                	jmp    eax
c0014745:	90                   	nop

c0014746 <Device::addChild(Device*)>:
c0014746:	53                   	push   ebx
c0014747:	83 ec 08             	sub    esp,0x8
c001474a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001474e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014752:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0014758:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001475e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014760:	85 d2                	test   edx,edx
c0014762:	74 04                	je     c0014768 <Device::addChild(Device*)+0x22>
c0014764:	89 d3                	mov    ebx,edx
c0014766:	eb f6                	jmp    c001475e <Device::addChild(Device*)+0x18>
c0014768:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001476b:	83 ec 0c             	sub    esp,0xc
c001476e:	6a 08                	push   0x8
c0014770:	e8 e7 b7 ff ff       	call   c000ff5c <malloc>
c0014775:	89 03                	mov    DWORD PTR [ebx],eax
c0014777:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001477d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014784:	83 c4 18             	add    esp,0x18
c0014787:	5b                   	pop    ebx
c0014788:	c3                   	ret    
c0014789:	90                   	nop

c001478a <Device::removeAllChildren()>:
c001478a:	56                   	push   esi
c001478b:	53                   	push   ebx
c001478c:	52                   	push   edx
c001478d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014791:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0014797:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001479a:	74 17                	je     c00147b3 <Device::removeAllChildren()+0x29>
c001479c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001479f:	85 c0                	test   eax,eax
c00147a1:	74 0c                	je     c00147af <Device::removeAllChildren()+0x25>
c00147a3:	83 ec 0c             	sub    esp,0xc
c00147a6:	8b 10                	mov    edx,DWORD PTR [eax]
c00147a8:	50                   	push   eax
c00147a9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00147ac:	83 c4 10             	add    esp,0x10
c00147af:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00147b1:	eb e4                	jmp    c0014797 <Device::removeAllChildren()+0xd>
c00147b3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00147b9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00147bf:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00147c5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00147cc:	58                   	pop    eax
c00147cd:	5b                   	pop    ebx
c00147ce:	5e                   	pop    esi
c00147cf:	c3                   	ret    

c00147d0 <Device::hibernateAll()>:
c00147d0:	53                   	push   ebx
c00147d1:	83 ec 14             	sub    esp,0x14
c00147d4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00147d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147da:	53                   	push   ebx
c00147db:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00147de:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00147e4:	83 c4 10             	add    esp,0x10
c00147e7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00147ea:	74 0f                	je     c00147fb <Device::hibernateAll()+0x2b>
c00147ec:	83 ec 0c             	sub    esp,0xc
c00147ef:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00147f2:	e8 d9 ff ff ff       	call   c00147d0 <Device::hibernateAll()>
c00147f7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00147f9:	eb e9                	jmp    c00147e4 <Device::hibernateAll()+0x14>
c00147fb:	83 c4 08             	add    esp,0x8
c00147fe:	5b                   	pop    ebx
c00147ff:	c3                   	ret    

c0014800 <Device::wakeAll()>:
c0014800:	53                   	push   ebx
c0014801:	83 ec 14             	sub    esp,0x14
c0014804:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014808:	8b 03                	mov    eax,DWORD PTR [ebx]
c001480a:	53                   	push   ebx
c001480b:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001480e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014814:	83 c4 10             	add    esp,0x10
c0014817:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001481a:	74 0f                	je     c001482b <Device::wakeAll()+0x2b>
c001481c:	83 ec 0c             	sub    esp,0xc
c001481f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014822:	e8 d9 ff ff ff       	call   c0014800 <Device::wakeAll()>
c0014827:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014829:	eb e9                	jmp    c0014814 <Device::wakeAll()+0x14>
c001482b:	83 c4 08             	add    esp,0x8
c001482e:	5b                   	pop    ebx
c001482f:	c3                   	ret    

c0014830 <Device::detectAll()>:
c0014830:	53                   	push   ebx
c0014831:	83 ec 14             	sub    esp,0x14
c0014834:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014838:	8b 03                	mov    eax,DWORD PTR [ebx]
c001483a:	53                   	push   ebx
c001483b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001483e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014844:	83 c4 10             	add    esp,0x10
c0014847:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001484a:	74 0f                	je     c001485b <Device::detectAll()+0x2b>
c001484c:	83 ec 0c             	sub    esp,0xc
c001484f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014852:	e8 d9 ff ff ff       	call   c0014830 <Device::detectAll()>
c0014857:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014859:	eb e9                	jmp    c0014844 <Device::detectAll()+0x14>
c001485b:	83 c4 08             	add    esp,0x8
c001485e:	5b                   	pop    ebx
c001485f:	c3                   	ret    

c0014860 <Device::disableLegacyAll()>:
c0014860:	53                   	push   ebx
c0014861:	83 ec 14             	sub    esp,0x14
c0014864:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014868:	8b 03                	mov    eax,DWORD PTR [ebx]
c001486a:	53                   	push   ebx
c001486b:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c001486e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014874:	83 c4 10             	add    esp,0x10
c0014877:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001487a:	74 0f                	je     c001488b <Device::disableLegacyAll()+0x2b>
c001487c:	83 ec 0c             	sub    esp,0xc
c001487f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014882:	e8 d9 ff ff ff       	call   c0014860 <Device::disableLegacyAll()>
c0014887:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014889:	eb e9                	jmp    c0014874 <Device::disableLegacyAll()+0x14>
c001488b:	83 c4 08             	add    esp,0x8
c001488e:	5b                   	pop    ebx
c001488f:	c3                   	ret    

c0014890 <Device::loadDriversForAll()>:
c0014890:	53                   	push   ebx
c0014891:	83 ec 08             	sub    esp,0x8
c0014894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014898:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001489e:	8b 18                	mov    ebx,DWORD PTR [eax]
c00148a0:	85 db                	test   ebx,ebx
c00148a2:	74 12                	je     c00148b6 <Device::loadDriversForAll()+0x26>
c00148a4:	83 ec 0c             	sub    esp,0xc
c00148a7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00148aa:	e8 e1 ff ff ff       	call   c0014890 <Device::loadDriversForAll()>
c00148af:	83 c4 10             	add    esp,0x10
c00148b2:	89 d8                	mov    eax,ebx
c00148b4:	eb e8                	jmp    c001489e <Device::loadDriversForAll()+0xe>
c00148b6:	83 c4 08             	add    esp,0x8
c00148b9:	5b                   	pop    ebx
c00148ba:	c3                   	ret    
c00148bb:	90                   	nop

c00148bc <Device::closeAll()>:
c00148bc:	53                   	push   ebx
c00148bd:	83 ec 08             	sub    esp,0x8
c00148c0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00148c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00148c6:	6a 00                	push   0x0
c00148c8:	6a 00                	push   0x0
c00148ca:	6a 00                	push   0x0
c00148cc:	53                   	push   ebx
c00148cd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00148d0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00148d6:	83 c4 10             	add    esp,0x10
c00148d9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00148dc:	74 0f                	je     c00148ed <Device::closeAll()+0x31>
c00148de:	83 ec 0c             	sub    esp,0xc
c00148e1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00148e4:	e8 d3 ff ff ff       	call   c00148bc <Device::closeAll()>
c00148e9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00148eb:	eb e9                	jmp    c00148d6 <Device::closeAll()+0x1a>
c00148ed:	83 c4 08             	add    esp,0x8
c00148f0:	5b                   	pop    ebx
c00148f1:	c3                   	ret    

c00148f2 <Device::powerSavingAll(PowerSavingLevel)>:
c00148f2:	56                   	push   esi
c00148f3:	53                   	push   ebx
c00148f4:	83 ec 0c             	sub    esp,0xc
c00148f7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00148fb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00148ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014901:	56                   	push   esi
c0014902:	53                   	push   ebx
c0014903:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0014906:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001490c:	83 c4 10             	add    esp,0x10
c001490f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014912:	74 0f                	je     c0014923 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0014914:	52                   	push   edx
c0014915:	52                   	push   edx
c0014916:	56                   	push   esi
c0014917:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001491a:	e8 d3 ff ff ff       	call   c00148f2 <Device::powerSavingAll(PowerSavingLevel)>
c001491f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014921:	eb e9                	jmp    c001490c <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014923:	58                   	pop    eax
c0014924:	5b                   	pop    ebx
c0014925:	5e                   	pop    esi
c0014926:	c3                   	ret    
c0014927:	90                   	nop

c0014928 <Device::setName(char const*)>:
c0014928:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0014930:	e9 2e be fe ff       	jmp    c0000763 <strcpy>
c0014935:	90                   	nop

c0014936 <Device::getName()>:
c0014936:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001493a:	05 d0 00 00 00       	add    eax,0xd0
c001493f:	c3                   	ret    

c0014940 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014940:	57                   	push   edi
c0014941:	56                   	push   esi
c0014942:	53                   	push   ebx
c0014943:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014947:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001494b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001494f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014955:	75 0c                	jne    c0014963 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014957:	52                   	push   edx
c0014958:	52                   	push   edx
c0014959:	53                   	push   ebx
c001495a:	56                   	push   esi
c001495b:	e8 76 40 01 00       	call   c00289d6 <LinkedList<Device>::addElement(Device*)>
c0014960:	83 c4 10             	add    esp,0x10
c0014963:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014969:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001496c:	74 12                	je     c0014980 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001496e:	50                   	push   eax
c001496f:	57                   	push   edi
c0014970:	56                   	push   esi
c0014971:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014974:	e8 c7 ff ff ff       	call   c0014940 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014979:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001497b:	83 c4 10             	add    esp,0x10
c001497e:	eb e9                	jmp    c0014969 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014980:	5b                   	pop    ebx
c0014981:	5e                   	pop    esi
c0014982:	5f                   	pop    edi
c0014983:	c3                   	ret    

c0014984 <Device::hibernate()>:
c0014984:	c3                   	ret    
c0014985:	90                   	nop

c0014986 <Device::wake()>:
c0014986:	c3                   	ret    
c0014987:	90                   	nop

c0014988 <Device::detect()>:
c0014988:	c3                   	ret    
c0014989:	90                   	nop

c001498a <Device::disableLegacy()>:
c001498a:	c3                   	ret    
c001498b:	90                   	nop

c001498c <Device::powerSaving(PowerSavingLevel)>:
c001498c:	c3                   	ret    

c001498d <getDevicesOfType(DeviceType)>:
c001498d:	53                   	push   ebx
c001498e:	83 ec 14             	sub    esp,0x14
c0014991:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014995:	53                   	push   ebx
c0014996:	e8 17 41 01 00       	call   c0028ab2 <LinkedList<Device>::LinkedList()>
c001499b:	83 c4 0c             	add    esp,0xc
c001499e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00149a2:	53                   	push   ebx
c00149a3:	ff 35 90 13 03 c0    	push   DWORD PTR ds:0xc0031390
c00149a9:	e8 92 ff ff ff       	call   c0014940 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00149ae:	89 d8                	mov    eax,ebx
c00149b0:	83 c4 18             	add    esp,0x18
c00149b3:	5b                   	pop    ebx
c00149b4:	c2 04 00             	ret    0x4
c00149b7:	90                   	nop

c00149b8 <DriverlessDevice::DriverlessDevice(char const*)>:
c00149b8:	83 ec 0c             	sub    esp,0xc
c00149bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00149bf:	83 ec 08             	sub    esp,0x8
c00149c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00149c6:	50                   	push   eax
c00149c7:	e8 50 fb ff ff       	call   c001451c <Device::Device(char const*)>
c00149cc:	83 c4 10             	add    esp,0x10
c00149cf:	ba 54 ba 02 c0       	mov    edx,0xc002ba54
c00149d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00149d8:	89 10                	mov    DWORD PTR [eax],edx
c00149da:	90                   	nop
c00149db:	83 c4 0c             	add    esp,0xc
c00149de:	c3                   	ret    
c00149df:	90                   	nop

c00149e0 <DriverlessDevice::open(int, int, void*)>:
c00149e0:	83 ec 18             	sub    esp,0x18
c00149e3:	68 2c ba 02 c0       	push   0xc002ba2c
c00149e8:	e8 0e 5e 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c00149ed:	83 c8 ff             	or     eax,0xffffffff
c00149f0:	83 c4 1c             	add    esp,0x1c
c00149f3:	c3                   	ret    

c00149f4 <DriverlessDevice::close(int, int, void*)>:
c00149f4:	31 c0                	xor    eax,eax
c00149f6:	c3                   	ret    
c00149f7:	90                   	nop

c00149f8 <DriverlessDevice::detect()>:
c00149f8:	c3                   	ret    
c00149f9:	90                   	nop

c00149fa <HardDiskController::HardDiskController(char const*)>:
c00149fa:	83 ec 0c             	sub    esp,0xc
c00149fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014a01:	83 ec 08             	sub    esp,0x8
c0014a04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a08:	50                   	push   eax
c0014a09:	e8 0e fb ff ff       	call   c001451c <Device::Device(char const*)>
c0014a0e:	83 c4 10             	add    esp,0x10
c0014a11:	ba 4c bb 02 c0       	mov    edx,0xc002bb4c
c0014a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014a1a:	89 10                	mov    DWORD PTR [eax],edx
c0014a1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014a20:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0014a2a:	90                   	nop
c0014a2b:	83 c4 0c             	add    esp,0xc
c0014a2e:	c3                   	ret    
c0014a2f:	90                   	nop

c0014a30 <HardDiskController::~HardDiskController()>:
c0014a30:	83 ec 0c             	sub    esp,0xc
c0014a33:	ba 4c bb 02 c0       	mov    edx,0xc002bb4c
c0014a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014a3c:	89 10                	mov    DWORD PTR [eax],edx
c0014a3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014a42:	83 ec 0c             	sub    esp,0xc
c0014a45:	50                   	push   eax
c0014a46:	e8 cd fb ff ff       	call   c0014618 <Device::~Device()>
c0014a4b:	83 c4 10             	add    esp,0x10
c0014a4e:	90                   	nop
c0014a4f:	83 c4 0c             	add    esp,0xc
c0014a52:	c3                   	ret    
c0014a53:	90                   	nop

c0014a54 <HardDiskController::~HardDiskController()>:
c0014a54:	83 ec 0c             	sub    esp,0xc
c0014a57:	83 ec 0c             	sub    esp,0xc
c0014a5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a5e:	e8 cd ff ff ff       	call   c0014a30 <HardDiskController::~HardDiskController()>
c0014a63:	83 c4 10             	add    esp,0x10
c0014a66:	83 ec 08             	sub    esp,0x8
c0014a69:	68 58 01 00 00       	push   0x158
c0014a6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a72:	e8 ef e6 ff ff       	call   c0013166 <operator delete(void*, unsigned long)>
c0014a77:	83 c4 10             	add    esp,0x10
c0014a7a:	83 c4 0c             	add    esp,0xc
c0014a7d:	c3                   	ret    

c0014a7e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014a7e:	83 ec 0c             	sub    esp,0xc
c0014a81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014a85:	83 ec 08             	sub    esp,0x8
c0014a88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a8c:	50                   	push   eax
c0014a8d:	e8 8a fa ff ff       	call   c001451c <Device::Device(char const*)>
c0014a92:	83 c4 10             	add    esp,0x10
c0014a95:	ba 40 bc 02 c0       	mov    edx,0xc002bc40
c0014a9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014a9e:	89 10                	mov    DWORD PTR [eax],edx
c0014aa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014aa4:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014aab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014aaf:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014ab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014aba:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014ac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ac8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014acc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014ad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ad6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014ae0:	90                   	nop
c0014ae1:	83 c4 0c             	add    esp,0xc
c0014ae4:	c3                   	ret    
c0014ae5:	90                   	nop

c0014ae6 <PhysicalDisk::startCache()>:
c0014ae6:	56                   	push   esi
c0014ae7:	53                   	push   ebx
c0014ae8:	83 ec 10             	sub    esp,0x10
c0014aeb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014aef:	6a 40                	push   0x40
c0014af1:	e8 66 b4 ff ff       	call   c000ff5c <malloc>
c0014af6:	89 c6                	mov    esi,eax
c0014af8:	58                   	pop    eax
c0014af9:	5a                   	pop    edx
c0014afa:	53                   	push   ebx
c0014afb:	56                   	push   esi
c0014afc:	e8 e9 26 00 00       	call   c00171ea <VCache::VCache(PhysicalDisk*)>
c0014b01:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014b07:	83 c4 14             	add    esp,0x14
c0014b0a:	5b                   	pop    ebx
c0014b0b:	5e                   	pop    esi
c0014b0c:	c3                   	ret    
c0014b0d:	90                   	nop

c0014b0e <PhysicalDisk::~PhysicalDisk()>:
c0014b0e:	83 ec 0c             	sub    esp,0xc
c0014b11:	ba 40 bc 02 c0       	mov    edx,0xc002bc40
c0014b16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014b1a:	89 10                	mov    DWORD PTR [eax],edx
c0014b1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014b20:	83 ec 0c             	sub    esp,0xc
c0014b23:	50                   	push   eax
c0014b24:	e8 ef fa ff ff       	call   c0014618 <Device::~Device()>
c0014b29:	83 c4 10             	add    esp,0x10
c0014b2c:	90                   	nop
c0014b2d:	83 c4 0c             	add    esp,0xc
c0014b30:	c3                   	ret    
c0014b31:	90                   	nop

c0014b32 <PhysicalDisk::~PhysicalDisk()>:
c0014b32:	83 ec 0c             	sub    esp,0xc
c0014b35:	83 ec 0c             	sub    esp,0xc
c0014b38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b3c:	e8 cd ff ff ff       	call   c0014b0e <PhysicalDisk::~PhysicalDisk()>
c0014b41:	83 c4 10             	add    esp,0x10
c0014b44:	83 ec 08             	sub    esp,0x8
c0014b47:	68 6c 01 00 00       	push   0x16c
c0014b4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b50:	e8 11 e6 ff ff       	call   c0013166 <operator delete(void*, unsigned long)>
c0014b55:	83 c4 10             	add    esp,0x10
c0014b58:	83 c4 0c             	add    esp,0xc
c0014b5b:	c3                   	ret    

c0014b5c <PhysicalDisk::eject()>:
c0014b5c:	83 ec 18             	sub    esp,0x18
c0014b5f:	68 10 bc 02 c0       	push   0xc002bc10
c0014b64:	e8 dd e6 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0014b69:	83 c8 ff             	or     eax,0xffffffff
c0014b6c:	83 c4 1c             	add    esp,0x1c
c0014b6f:	c3                   	ret    

c0014b70 <FPU::FPU(char const*)>:
c0014b70:	83 ec 0c             	sub    esp,0xc
c0014b73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014b77:	83 ec 08             	sub    esp,0x8
c0014b7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b7e:	50                   	push   eax
c0014b7f:	e8 98 f9 ff ff       	call   c001451c <Device::Device(char const*)>
c0014b84:	83 c4 10             	add    esp,0x10
c0014b87:	ba 24 bd 02 c0       	mov    edx,0xc002bd24
c0014b8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014b90:	89 10                	mov    DWORD PTR [eax],edx
c0014b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014b96:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014ba0:	90                   	nop
c0014ba1:	83 c4 0c             	add    esp,0xc
c0014ba4:	c3                   	ret    
c0014ba5:	90                   	nop

c0014ba6 <FPU::~FPU()>:
c0014ba6:	83 ec 0c             	sub    esp,0xc
c0014ba9:	ba 24 bd 02 c0       	mov    edx,0xc002bd24
c0014bae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014bb2:	89 10                	mov    DWORD PTR [eax],edx
c0014bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014bb8:	83 ec 0c             	sub    esp,0xc
c0014bbb:	50                   	push   eax
c0014bbc:	e8 57 fa ff ff       	call   c0014618 <Device::~Device()>
c0014bc1:	83 c4 10             	add    esp,0x10
c0014bc4:	90                   	nop
c0014bc5:	83 c4 0c             	add    esp,0xc
c0014bc8:	c3                   	ret    
c0014bc9:	90                   	nop

c0014bca <FPU::~FPU()>:
c0014bca:	83 ec 0c             	sub    esp,0xc
c0014bcd:	83 ec 0c             	sub    esp,0xc
c0014bd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014bd4:	e8 cd ff ff ff       	call   c0014ba6 <FPU::~FPU()>
c0014bd9:	83 c4 10             	add    esp,0x10
c0014bdc:	83 ec 08             	sub    esp,0x8
c0014bdf:	68 58 01 00 00       	push   0x158
c0014be4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014be8:	e8 79 e5 ff ff       	call   c0013166 <operator delete(void*, unsigned long)>
c0014bed:	83 c4 10             	add    esp,0x10
c0014bf0:	83 c4 0c             	add    esp,0xc
c0014bf3:	c3                   	ret    

c0014bf4 <setupFPU()>:
c0014bf4:	53                   	push   ebx
c0014bf5:	83 ec 08             	sub    esp,0x8
c0014bf8:	8b 15 90 13 03 c0    	mov    edx,DWORD PTR ds:0xc0031390
c0014bfe:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014c05:	74 19                	je     c0014c20 <setupFPU()+0x2c>
c0014c07:	83 ec 0c             	sub    esp,0xc
c0014c0a:	68 58 01 00 00       	push   0x158
c0014c0f:	e8 48 b3 ff ff       	call   c000ff5c <malloc>
c0014c14:	89 c3                	mov    ebx,eax
c0014c16:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c19:	e8 dc 09 01 00       	call   c00255fa <AVX::AVX()>
c0014c1e:	eb 5b                	jmp    c0014c7b <setupFPU()+0x87>
c0014c20:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014c26:	84 c0                	test   al,al
c0014c28:	79 19                	jns    c0014c43 <setupFPU()+0x4f>
c0014c2a:	83 ec 0c             	sub    esp,0xc
c0014c2d:	68 58 01 00 00       	push   0x158
c0014c32:	e8 25 b3 ff ff       	call   c000ff5c <malloc>
c0014c37:	89 c3                	mov    ebx,eax
c0014c39:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c3c:	e8 d7 0a 01 00       	call   c0025718 <SSE::SSE()>
c0014c41:	eb 38                	jmp    c0014c7b <setupFPU()+0x87>
c0014c43:	a8 20                	test   al,0x20
c0014c45:	74 19                	je     c0014c60 <setupFPU()+0x6c>
c0014c47:	83 ec 0c             	sub    esp,0xc
c0014c4a:	68 58 01 00 00       	push   0x158
c0014c4f:	e8 08 b3 ff ff       	call   c000ff5c <malloc>
c0014c54:	89 c3                	mov    ebx,eax
c0014c56:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c59:	e8 2a 0a 01 00       	call   c0025688 <MMX::MMX()>
c0014c5e:	eb 1b                	jmp    c0014c7b <setupFPU()+0x87>
c0014c60:	a8 10                	test   al,0x10
c0014c62:	74 1c                	je     c0014c80 <setupFPU()+0x8c>
c0014c64:	83 ec 0c             	sub    esp,0xc
c0014c67:	68 58 01 00 00       	push   0x158
c0014c6c:	e8 eb b2 ff ff       	call   c000ff5c <malloc>
c0014c71:	89 c3                	mov    ebx,eax
c0014c73:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c76:	e8 33 0b 01 00       	call   c00257ae <x87::x87()>
c0014c7b:	83 c4 10             	add    esp,0x10
c0014c7e:	eb 24                	jmp    c0014ca4 <setupFPU()+0xb0>
c0014c80:	83 e0 ef             	and    eax,0xffffffef
c0014c83:	83 ec 0c             	sub    esp,0xc
c0014c86:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014c8c:	68 10 bd 02 c0       	push   0xc002bd10
c0014c91:	e8 b0 e5 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0014c96:	0f 20 c0             	mov    eax,cr0
c0014c99:	83 c8 04             	or     eax,0x4
c0014c9c:	0f 22 c0             	mov    cr0,eax
c0014c9f:	31 db                	xor    ebx,ebx
c0014ca1:	83 c4 10             	add    esp,0x10
c0014ca4:	89 d8                	mov    eax,ebx
c0014ca6:	83 c4 08             	add    esp,0x8
c0014ca9:	5b                   	pop    ebx
c0014caa:	c3                   	ret    
c0014cab:	90                   	nop

c0014cac <int_handler>:
c0014cac:	55                   	push   ebp
c0014cad:	57                   	push   edi
c0014cae:	56                   	push   esi
c0014caf:	53                   	push   ebx
c0014cb0:	83 ec 0c             	sub    esp,0xc
c0014cb3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014cb7:	80 3d 88 3e 03 c0 00 	cmp    BYTE PTR ds:0xc0033e88,0x0
c0014cbe:	74 0b                	je     c0014ccb <int_handler+0x1f>
c0014cc0:	fa                   	cli    
c0014cc1:	f4                   	hlt    
c0014cc2:	80 3d 88 3e 03 c0 00 	cmp    BYTE PTR ds:0xc0033e88,0x0
c0014cc9:	75 f5                	jne    c0014cc0 <int_handler+0x14>
c0014ccb:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0014cd0:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014cd3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014cd9:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014cdf:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014ce2:	83 f8 17             	cmp    eax,0x17
c0014ce5:	77 13                	ja     c0014cfa <int_handler+0x4e>
c0014ce7:	83 ec 08             	sub    esp,0x8
c0014cea:	8b 17                	mov    edx,DWORD PTR [edi]
c0014cec:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014cef:	0f b6 c0             	movzx  eax,al
c0014cf2:	50                   	push   eax
c0014cf3:	57                   	push   edi
c0014cf4:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014cf7:	83 c4 10             	add    esp,0x10
c0014cfa:	83 c3 15             	add    ebx,0x15
c0014cfd:	c1 e3 04             	shl    ebx,0x4
c0014d00:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014d04:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014d0b:	31 db                	xor    ebx,ebx
c0014d0d:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014d11:	85 c0                	test   eax,eax
c0014d13:	74 13                	je     c0014d28 <int_handler+0x7c>
c0014d15:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014d18:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014d1c:	74 1c                	je     c0014d3a <int_handler+0x8e>
c0014d1e:	83 ec 08             	sub    esp,0x8
c0014d21:	52                   	push   edx
c0014d22:	56                   	push   esi
c0014d23:	ff d0                	call   eax
c0014d25:	83 c4 10             	add    esp,0x10
c0014d28:	43                   	inc    ebx
c0014d29:	83 fb 04             	cmp    ebx,0x4
c0014d2c:	75 df                	jne    c0014d0d <int_handler+0x61>
c0014d2e:	83 c4 0c             	add    esp,0xc
c0014d31:	31 c0                	xor    eax,eax
c0014d33:	5b                   	pop    ebx
c0014d34:	31 d2                	xor    edx,edx
c0014d36:	5e                   	pop    esi
c0014d37:	5f                   	pop    edi
c0014d38:	5d                   	pop    ebp
c0014d39:	c3                   	ret    
c0014d3a:	83 ec 08             	sub    esp,0x8
c0014d3d:	52                   	push   edx
c0014d3e:	56                   	push   esi
c0014d3f:	ff d0                	call   eax
c0014d41:	83 c4 10             	add    esp,0x10
c0014d44:	83 c4 0c             	add    esp,0xc
c0014d47:	5b                   	pop    ebx
c0014d48:	5e                   	pop    esi
c0014d49:	5f                   	pop    edi
c0014d4a:	5d                   	pop    ebp
c0014d4b:	c3                   	ret    

c0014d4c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014d4c:	57                   	push   edi
c0014d4d:	31 c0                	xor    eax,eax
c0014d4f:	56                   	push   esi
c0014d50:	53                   	push   ebx
c0014d51:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014d55:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014d59:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014d5d:	89 da                	mov    edx,ebx
c0014d5f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014d63:	c1 e2 04             	shl    edx,0x4
c0014d66:	01 ca                	add    edx,ecx
c0014d68:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014d70:	74 16                	je     c0014d88 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014d72:	40                   	inc    eax
c0014d73:	83 f8 04             	cmp    eax,0x4
c0014d76:	75 f0                	jne    c0014d68 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014d78:	c7 44 24 10 f4 bd 02 c0 	mov    DWORD PTR [esp+0x10],0xc002bdf4
c0014d80:	5b                   	pop    ebx
c0014d81:	5e                   	pop    esi
c0014d82:	5f                   	pop    edi
c0014d83:	e9 73 5a 00 00       	jmp    c001a7fb <Krnl::panic(char const*)>
c0014d88:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014d8b:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014d8e:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014d94:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014d9a:	5b                   	pop    ebx
c0014d9b:	5e                   	pop    esi
c0014d9c:	5f                   	pop    edi
c0014d9d:	c3                   	ret    

c0014d9e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014d9e:	56                   	push   esi
c0014d9f:	53                   	push   ebx
c0014da0:	50                   	push   eax
c0014da1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014da5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014da9:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014dae:	75 35                	jne    c0014de5 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014db0:	8d 43 20             	lea    eax,[ebx+0x20]
c0014db3:	31 d2                	xor    edx,edx
c0014db5:	89 c1                	mov    ecx,eax
c0014db7:	c1 e1 04             	shl    ecx,0x4
c0014dba:	01 f1                	add    ecx,esi
c0014dbc:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014dc4:	74 3e                	je     c0014e04 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014dc6:	42                   	inc    edx
c0014dc7:	83 fa 04             	cmp    edx,0x4
c0014dca:	75 f0                	jne    c0014dbc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014dcc:	83 ec 0c             	sub    esp,0xc
c0014dcf:	68 68 be 02 c0       	push   0xc002be68
c0014dd4:	e8 22 5a 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c0014dd9:	83 c4 10             	add    esp,0x10
c0014ddc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014de1:	5a                   	pop    edx
c0014de2:	5b                   	pop    ebx
c0014de3:	5e                   	pop    esi
c0014de4:	c3                   	ret    
c0014de5:	83 ec 0c             	sub    esp,0xc
c0014de8:	56                   	push   esi
c0014de9:	e8 48 fb ff ff       	call   c0014936 <Device::getName()>
c0014dee:	83 c4 10             	add    esp,0x10
c0014df1:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014df4:	75 ba                	jne    c0014db0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014df6:	83 fb 0f             	cmp    ebx,0xf
c0014df9:	7f 29                	jg     c0014e24 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014dfb:	0f b6 9b 00 06 03 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffcfa00]
c0014e02:	eb ac                	jmp    c0014db0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014e04:	8d 04 82             	lea    eax,[edx+eax*4]
c0014e07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014e0b:	8d 04 86             	lea    eax,[esi+eax*4]
c0014e0e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014e14:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014e18:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014e1e:	89 d8                	mov    eax,ebx
c0014e20:	5a                   	pop    edx
c0014e21:	5b                   	pop    ebx
c0014e22:	5e                   	pop    esi
c0014e23:	c3                   	ret    
c0014e24:	83 ec 0c             	sub    esp,0xc
c0014e27:	68 30 be 02 c0       	push   0xc002be30
c0014e2c:	e8 ca 59 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c0014e31:	83 c4 10             	add    esp,0x10
c0014e34:	e9 77 ff ff ff       	jmp    c0014db0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014e39:	90                   	nop

c0014e3a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014e3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014e3e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014e42:	c1 e0 04             	shl    eax,0x4
c0014e45:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014e49:	8d 50 10             	lea    edx,[eax+0x10]
c0014e4c:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014e52:	74 08                	je     c0014e5c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014e54:	83 c0 04             	add    eax,0x4
c0014e57:	39 d0                	cmp    eax,edx
c0014e59:	75 f1                	jne    c0014e4c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014e5b:	c3                   	ret    
c0014e5c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014e66:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014e70:	eb e2                	jmp    c0014e54 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014e72 <InterruptController::clearAllHandlers(int, bool)>:
c0014e72:	56                   	push   esi
c0014e73:	53                   	push   ebx
c0014e74:	52                   	push   edx
c0014e75:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014e79:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014e7d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014e82:	75 61                	jne    c0014ee5 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014e84:	8d 46 20             	lea    eax,[esi+0x20]
c0014e87:	c1 e6 04             	shl    esi,0x4
c0014e8a:	c1 e0 04             	shl    eax,0x4
c0014e8d:	01 de                	add    esi,ebx
c0014e8f:	01 d8                	add    eax,ebx
c0014e91:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014e9b:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014ea5:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014eaf:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014eb9:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014ec3:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014ecd:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014ed7:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014ee1:	58                   	pop    eax
c0014ee2:	5b                   	pop    ebx
c0014ee3:	5e                   	pop    esi
c0014ee4:	c3                   	ret    
c0014ee5:	83 ec 0c             	sub    esp,0xc
c0014ee8:	53                   	push   ebx
c0014ee9:	e8 48 fa ff ff       	call   c0014936 <Device::getName()>
c0014eee:	83 c4 10             	add    esp,0x10
c0014ef1:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014ef4:	75 8e                	jne    c0014e84 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014ef6:	83 fe 0f             	cmp    esi,0xf
c0014ef9:	7f 09                	jg     c0014f04 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014efb:	0f b6 b6 00 06 03 c0 	movzx  esi,BYTE PTR [esi-0x3ffcfa00]
c0014f02:	eb 80                	jmp    c0014e84 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014f04:	83 ec 0c             	sub    esp,0xc
c0014f07:	68 a4 be 02 c0       	push   0xc002bea4
c0014f0c:	e8 ea 58 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c0014f11:	83 c4 10             	add    esp,0x10
c0014f14:	e9 6b ff ff ff       	jmp    c0014e84 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014f19:	90                   	nop

c0014f1a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014f1a:	56                   	push   esi
c0014f1b:	53                   	push   ebx
c0014f1c:	52                   	push   edx
c0014f1d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014f21:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014f25:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014f2a:	75 3a                	jne    c0014f66 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014f2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014f30:	8d 50 20             	lea    edx,[eax+0x20]
c0014f33:	c1 e2 04             	shl    edx,0x4
c0014f36:	8d 04 16             	lea    eax,[esi+edx*1]
c0014f39:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014f3d:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014f43:	74 0b                	je     c0014f50 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014f45:	83 c0 04             	add    eax,0x4
c0014f48:	39 d0                	cmp    eax,edx
c0014f4a:	75 f1                	jne    c0014f3d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014f4c:	58                   	pop    eax
c0014f4d:	5b                   	pop    ebx
c0014f4e:	5e                   	pop    esi
c0014f4f:	c3                   	ret    
c0014f50:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014f5a:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014f64:	eb df                	jmp    c0014f45 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014f66:	83 ec 0c             	sub    esp,0xc
c0014f69:	56                   	push   esi
c0014f6a:	e8 c7 f9 ff ff       	call   c0014936 <Device::getName()>
c0014f6f:	83 c4 10             	add    esp,0x10
c0014f72:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014f75:	75 b5                	jne    c0014f2c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014f77:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014f7c:	7f 11                	jg     c0014f8f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014f7e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014f82:	0f b6 80 00 06 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffcfa00]
c0014f89:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014f8d:	eb 9d                	jmp    c0014f2c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014f8f:	83 ec 0c             	sub    esp,0xc
c0014f92:	68 a4 be 02 c0       	push   0xc002bea4
c0014f97:	e8 5f 58 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c0014f9c:	83 c4 10             	add    esp,0x10
c0014f9f:	eb 8b                	jmp    c0014f2c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014fa1:	90                   	nop

c0014fa2 <InterruptController::InterruptController(char const*)>:
c0014fa2:	83 ec 1c             	sub    esp,0x1c
c0014fa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fa9:	83 ec 08             	sub    esp,0x8
c0014fac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014fb0:	50                   	push   eax
c0014fb1:	e8 66 f5 ff ff       	call   c001451c <Device::Device(char const*)>
c0014fb6:	83 c4 10             	add    esp,0x10
c0014fb9:	ba 4c c1 02 c0       	mov    edx,0xc002c14c
c0014fbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fc2:	89 10                	mov    DWORD PTR [eax],edx
c0014fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fc8:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014fd2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014fda:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014fe2:	7f 5e                	jg     c0015042 <InterruptController::InterruptController(char const*)+0xa0>
c0014fe4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014fec:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014ff1:	7f 49                	jg     c001503c <InterruptController::InterruptController(char const*)+0x9a>
c0014ff3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ff7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014ffb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0015002:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015006:	01 ca                	add    edx,ecx
c0015008:	83 c2 54             	add    edx,0x54
c001500b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0015013:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015017:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001501b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0015022:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015026:	01 ca                	add    edx,ecx
c0015028:	81 c2 54 04 00 00    	add    edx,0x454
c001502e:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0015036:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001503a:	eb b0                	jmp    c0014fec <InterruptController::InterruptController(char const*)+0x4a>
c001503c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0015040:	eb 98                	jmp    c0014fda <InterruptController::InterruptController(char const*)+0x38>
c0015042:	90                   	nop
c0015043:	83 c4 1c             	add    esp,0x1c
c0015046:	c3                   	ret    
c0015047:	90                   	nop

c0015048 <InterruptController::~InterruptController()>:
c0015048:	83 ec 0c             	sub    esp,0xc
c001504b:	ba 4c c1 02 c0       	mov    edx,0xc002c14c
c0015050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015054:	89 10                	mov    DWORD PTR [eax],edx
c0015056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001505a:	83 ec 0c             	sub    esp,0xc
c001505d:	50                   	push   eax
c001505e:	e8 b5 f5 ff ff       	call   c0014618 <Device::~Device()>
c0015063:	83 c4 10             	add    esp,0x10
c0015066:	90                   	nop
c0015067:	83 c4 0c             	add    esp,0xc
c001506a:	c3                   	ret    
c001506b:	90                   	nop

c001506c <InterruptController::~InterruptController()>:
c001506c:	83 ec 0c             	sub    esp,0xc
c001506f:	83 ec 0c             	sub    esp,0xc
c0015072:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015076:	e8 cd ff ff ff       	call   c0015048 <InterruptController::~InterruptController()>
c001507b:	83 c4 10             	add    esp,0x10
c001507e:	83 ec 08             	sub    esp,0x8
c0015081:	68 58 21 00 00       	push   0x2158
c0015086:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001508a:	e8 d7 e0 ff ff       	call   c0013166 <operator delete(void*, unsigned long)>
c001508f:	83 c4 10             	add    esp,0x10
c0015092:	83 c4 0c             	add    esp,0xc
c0015095:	c3                   	ret    

c0015096 <displayDebugInfo(regs*)>:
c0015096:	55                   	push   ebp
c0015097:	57                   	push   edi
c0015098:	56                   	push   esi
c0015099:	53                   	push   ebx
c001509a:	83 ec 24             	sub    esp,0x24
c001509d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00150a1:	0f 20 c2             	mov    edx,cr0
c00150a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00150a8:	0f 20 d7             	mov    edi,cr2
c00150ab:	0f 20 de             	mov    esi,cr3
c00150ae:	0f 20 e5             	mov    ebp,cr4
c00150b1:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00150b4:	68 de be 02 c0       	push   0xc002bede
c00150b9:	e8 88 e1 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00150be:	59                   	pop    ecx
c00150bf:	58                   	pop    eax
c00150c0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00150c3:	68 e9 be 02 c0       	push   0xc002bee9
c00150c8:	e8 79 e1 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00150cd:	58                   	pop    eax
c00150ce:	5a                   	pop    edx
c00150cf:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00150d2:	68 f4 be 02 c0       	push   0xc002bef4
c00150d7:	e8 6a e1 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00150dc:	59                   	pop    ecx
c00150dd:	58                   	pop    eax
c00150de:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00150e1:	68 ff be 02 c0       	push   0xc002beff
c00150e6:	e8 5b e1 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00150eb:	58                   	pop    eax
c00150ec:	5a                   	pop    edx
c00150ed:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00150f0:	68 0a bf 02 c0       	push   0xc002bf0a
c00150f5:	e8 4c e1 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00150fa:	59                   	pop    ecx
c00150fb:	58                   	pop    eax
c00150fc:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00150ff:	68 15 bf 02 c0       	push   0xc002bf15
c0015104:	e8 3d e1 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0015109:	58                   	pop    eax
c001510a:	5a                   	pop    edx
c001510b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001510e:	68 20 bf 02 c0       	push   0xc002bf20
c0015113:	e8 2e e1 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0015118:	59                   	pop    ecx
c0015119:	58                   	pop    eax
c001511a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001511d:	68 2b bf 02 c0       	push   0xc002bf2b
c0015122:	e8 1f e1 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0015127:	58                   	pop    eax
c0015128:	5a                   	pop    edx
c0015129:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001512c:	68 36 bf 02 c0       	push   0xc002bf36
c0015131:	e8 10 e1 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0015136:	59                   	pop    ecx
c0015137:	58                   	pop    eax
c0015138:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001513b:	68 45 bf 02 c0       	push   0xc002bf45
c0015140:	e8 01 e1 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0015145:	58                   	pop    eax
c0015146:	5a                   	pop    edx
c0015147:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001514a:	68 50 bf 02 c0       	push   0xc002bf50
c001514f:	e8 f2 e0 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0015154:	59                   	pop    ecx
c0015155:	58                   	pop    eax
c0015156:	57                   	push   edi
c0015157:	68 5b bf 02 c0       	push   0xc002bf5b
c001515c:	e8 e5 e0 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0015161:	58                   	pop    eax
c0015162:	5a                   	pop    edx
c0015163:	56                   	push   esi
c0015164:	68 66 bf 02 c0       	push   0xc002bf66
c0015169:	e8 d8 e0 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001516e:	59                   	pop    ecx
c001516f:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c0015174:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001517a:	e8 c4 ba ff ff       	call   c0010c43 <setActiveTerminal(VgaText*)>
c001517f:	58                   	pop    eax
c0015180:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0015183:	5a                   	pop    edx
c0015184:	c1 e0 05             	shl    eax,0x5
c0015187:	05 60 03 03 c0       	add    eax,0xc0030360
c001518c:	50                   	push   eax
c001518d:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c0015192:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015198:	e8 cd c1 ff ff       	call   c001136a <VgaText::puts(char const*)>
c001519d:	59                   	pop    ecx
c001519e:	58                   	pop    eax
c001519f:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c00151a4:	68 71 bf 02 c0       	push   0xc002bf71
c00151a9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151af:	e8 b6 c1 ff ff       	call   c001136a <VgaText::puts(char const*)>
c00151b4:	58                   	pop    eax
c00151b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151ba:	5a                   	pop    edx
c00151bb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00151be:	83 c0 0c             	add    eax,0xc
c00151c1:	50                   	push   eax
c00151c2:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c00151c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151cd:	e8 98 c1 ff ff       	call   c001136a <VgaText::puts(char const*)>
c00151d2:	59                   	pop    ecx
c00151d3:	58                   	pop    eax
c00151d4:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c00151d9:	68 7a bf 02 c0       	push   0xc002bf7a
c00151de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151e4:	e8 81 c1 ff ff       	call   c001136a <VgaText::puts(char const*)>
c00151e9:	58                   	pop    eax
c00151ea:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c00151ef:	5a                   	pop    edx
c00151f0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00151f3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151f9:	e8 ee c3 ff ff       	call   c00115ec <VgaText::putx(unsigned int)>
c00151fe:	59                   	pop    ecx
c00151ff:	58                   	pop    eax
c0015200:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c0015205:	68 82 bf 02 c0       	push   0xc002bf82
c001520a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015210:	e8 55 c1 ff ff       	call   c001136a <VgaText::puts(char const*)>
c0015215:	58                   	pop    eax
c0015216:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001521b:	5a                   	pop    edx
c001521c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001521f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015225:	e8 c2 c3 ff ff       	call   c00115ec <VgaText::putx(unsigned int)>
c001522a:	59                   	pop    ecx
c001522b:	58                   	pop    eax
c001522c:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c0015231:	68 8a bf 02 c0       	push   0xc002bf8a
c0015236:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001523c:	e8 29 c1 ff ff       	call   c001136a <VgaText::puts(char const*)>
c0015241:	58                   	pop    eax
c0015242:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c0015247:	5a                   	pop    edx
c0015248:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001524b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015251:	e8 96 c3 ff ff       	call   c00115ec <VgaText::putx(unsigned int)>
c0015256:	59                   	pop    ecx
c0015257:	58                   	pop    eax
c0015258:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001525d:	68 92 bf 02 c0       	push   0xc002bf92
c0015262:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015268:	e8 fd c0 ff ff       	call   c001136a <VgaText::puts(char const*)>
c001526d:	58                   	pop    eax
c001526e:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c0015273:	5a                   	pop    edx
c0015274:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0015277:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001527d:	e8 6a c3 ff ff       	call   c00115ec <VgaText::putx(unsigned int)>
c0015282:	59                   	pop    ecx
c0015283:	58                   	pop    eax
c0015284:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c0015289:	68 9a bf 02 c0       	push   0xc002bf9a
c001528e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015294:	e8 d1 c0 ff ff       	call   c001136a <VgaText::puts(char const*)>
c0015299:	58                   	pop    eax
c001529a:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001529f:	5a                   	pop    edx
c00152a0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00152a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00152a9:	e8 3e c3 ff ff       	call   c00115ec <VgaText::putx(unsigned int)>
c00152ae:	59                   	pop    ecx
c00152af:	58                   	pop    eax
c00152b0:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c00152b5:	68 a2 bf 02 c0       	push   0xc002bfa2
c00152ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00152c0:	e8 a5 c0 ff ff       	call   c001136a <VgaText::puts(char const*)>
c00152c5:	58                   	pop    eax
c00152c6:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c00152cb:	5a                   	pop    edx
c00152cc:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00152cf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00152d5:	e8 12 c3 ff ff       	call   c00115ec <VgaText::putx(unsigned int)>
c00152da:	59                   	pop    ecx
c00152db:	58                   	pop    eax
c00152dc:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c00152e1:	68 aa bf 02 c0       	push   0xc002bfaa
c00152e6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00152ec:	e8 79 c0 ff ff       	call   c001136a <VgaText::puts(char const*)>
c00152f1:	58                   	pop    eax
c00152f2:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c00152f7:	5a                   	pop    edx
c00152f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00152fc:	52                   	push   edx
c00152fd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015303:	e8 e4 c2 ff ff       	call   c00115ec <VgaText::putx(unsigned int)>
c0015308:	59                   	pop    ecx
c0015309:	58                   	pop    eax
c001530a:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001530f:	68 b3 bf 02 c0       	push   0xc002bfb3
c0015314:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001531a:	e8 4b c0 ff ff       	call   c001136a <VgaText::puts(char const*)>
c001531f:	58                   	pop    eax
c0015320:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c0015325:	5a                   	pop    edx
c0015326:	57                   	push   edi
c0015327:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001532d:	e8 ba c2 ff ff       	call   c00115ec <VgaText::putx(unsigned int)>
c0015332:	59                   	pop    ecx
c0015333:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c0015338:	5f                   	pop    edi
c0015339:	68 bb bf 02 c0       	push   0xc002bfbb
c001533e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015344:	e8 21 c0 ff ff       	call   c001136a <VgaText::puts(char const*)>
c0015349:	58                   	pop    eax
c001534a:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001534f:	5a                   	pop    edx
c0015350:	56                   	push   esi
c0015351:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015357:	e8 90 c2 ff ff       	call   c00115ec <VgaText::putx(unsigned int)>
c001535c:	59                   	pop    ecx
c001535d:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c0015362:	5e                   	pop    esi
c0015363:	68 c3 bf 02 c0       	push   0xc002bfc3
c0015368:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001536e:	e8 f7 bf ff ff       	call   c001136a <VgaText::puts(char const*)>
c0015373:	5f                   	pop    edi
c0015374:	58                   	pop    eax
c0015375:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001537a:	55                   	push   ebp
c001537b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015381:	e8 66 c2 ff ff       	call   c00115ec <VgaText::putx(unsigned int)>
c0015386:	58                   	pop    eax
c0015387:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001538c:	5a                   	pop    edx
c001538d:	68 cb bf 02 c0       	push   0xc002bfcb
c0015392:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015398:	e8 cd bf ff ff       	call   c001136a <VgaText::puts(char const*)>
c001539d:	0f 21 c0             	mov    eax,db0
c00153a0:	59                   	pop    ecx
c00153a1:	5e                   	pop    esi
c00153a2:	50                   	push   eax
c00153a3:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c00153a8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00153ae:	e8 39 c2 ff ff       	call   c00115ec <VgaText::putx(unsigned int)>
c00153b3:	5f                   	pop    edi
c00153b4:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c00153b9:	5d                   	pop    ebp
c00153ba:	68 d4 bf 02 c0       	push   0xc002bfd4
c00153bf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00153c5:	e8 a0 bf ff ff       	call   c001136a <VgaText::puts(char const*)>
c00153ca:	0f 21 c8             	mov    eax,db1
c00153cd:	5a                   	pop    edx
c00153ce:	59                   	pop    ecx
c00153cf:	50                   	push   eax
c00153d0:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c00153d5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00153db:	e8 0c c2 ff ff       	call   c00115ec <VgaText::putx(unsigned int)>
c00153e0:	5e                   	pop    esi
c00153e1:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c00153e6:	5f                   	pop    edi
c00153e7:	68 dc bf 02 c0       	push   0xc002bfdc
c00153ec:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00153f2:	e8 73 bf ff ff       	call   c001136a <VgaText::puts(char const*)>
c00153f7:	0f 21 d0             	mov    eax,db2
c00153fa:	5d                   	pop    ebp
c00153fb:	5a                   	pop    edx
c00153fc:	50                   	push   eax
c00153fd:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c0015402:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015408:	e8 df c1 ff ff       	call   c00115ec <VgaText::putx(unsigned int)>
c001540d:	59                   	pop    ecx
c001540e:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c0015413:	5e                   	pop    esi
c0015414:	68 e4 bf 02 c0       	push   0xc002bfe4
c0015419:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001541f:	e8 46 bf ff ff       	call   c001136a <VgaText::puts(char const*)>
c0015424:	0f 21 d8             	mov    eax,db3
c0015427:	5f                   	pop    edi
c0015428:	5d                   	pop    ebp
c0015429:	50                   	push   eax
c001542a:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001542f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015435:	e8 b2 c1 ff ff       	call   c00115ec <VgaText::putx(unsigned int)>
c001543a:	58                   	pop    eax
c001543b:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c0015440:	5a                   	pop    edx
c0015441:	68 ec bf 02 c0       	push   0xc002bfec
c0015446:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001544c:	e8 19 bf ff ff       	call   c001136a <VgaText::puts(char const*)>
c0015451:	0f 21 f0             	mov    eax,db6
c0015454:	59                   	pop    ecx
c0015455:	5e                   	pop    esi
c0015456:	50                   	push   eax
c0015457:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001545c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015462:	e8 85 c1 ff ff       	call   c00115ec <VgaText::putx(unsigned int)>
c0015467:	5f                   	pop    edi
c0015468:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001546d:	5d                   	pop    ebp
c001546e:	68 f4 bf 02 c0       	push   0xc002bff4
c0015473:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015479:	e8 ec be ff ff       	call   c001136a <VgaText::puts(char const*)>
c001547e:	0f 21 f8             	mov    eax,db7
c0015481:	5a                   	pop    edx
c0015482:	59                   	pop    ecx
c0015483:	50                   	push   eax
c0015484:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c0015489:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001548f:	e8 58 c1 ff ff       	call   c00115ec <VgaText::putx(unsigned int)>
c0015494:	5e                   	pop    esi
c0015495:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015498:	e8 eb 82 00 00       	call   c001d788 <Thr::getDriverNameFromAddress(unsigned long)>
c001549d:	83 c4 10             	add    esp,0x10
c00154a0:	85 c0                	test   eax,eax
c00154a2:	74 7d                	je     c0015521 <displayDebugInfo(regs*)+0x48b>
c00154a4:	89 c6                	mov    esi,eax
c00154a6:	50                   	push   eax
c00154a7:	50                   	push   eax
c00154a8:	56                   	push   esi
c00154a9:	68 fc bf 02 c0       	push   0xc002bffc
c00154ae:	e8 93 dd ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00154b3:	5a                   	pop    edx
c00154b4:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c00154b9:	59                   	pop    ecx
c00154ba:	68 0a c0 02 c0       	push   0xc002c00a
c00154bf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00154c5:	e8 a0 be ff ff       	call   c001136a <VgaText::puts(char const*)>
c00154ca:	5f                   	pop    edi
c00154cb:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c00154d0:	5d                   	pop    ebp
c00154d1:	56                   	push   esi
c00154d2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00154d8:	e8 8d be ff ff       	call   c001136a <VgaText::puts(char const*)>
c00154dd:	58                   	pop    eax
c00154de:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c00154e3:	5a                   	pop    edx
c00154e4:	68 16 c0 02 c0       	push   0xc002c016
c00154e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00154ef:	e8 76 be ff ff       	call   c001136a <VgaText::puts(char const*)>
c00154f4:	59                   	pop    ecx
c00154f5:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c00154fa:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0015500:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015503:	e8 b7 82 00 00       	call   c001d7bf <Thr::getDriverOffsetFromAddress(unsigned long)>
c0015508:	5b                   	pop    ebx
c0015509:	5d                   	pop    ebp
c001550a:	50                   	push   eax
c001550b:	57                   	push   edi
c001550c:	e8 db c0 ff ff       	call   c00115ec <VgaText::putx(unsigned int)>
c0015511:	58                   	pop    eax
c0015512:	5a                   	pop    edx
c0015513:	56                   	push   esi
c0015514:	68 22 c0 02 c0       	push   0xc002c022
c0015519:	e8 28 dd ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001551e:	83 c4 10             	add    esp,0x10
c0015521:	fa                   	cli    
c0015522:	f4                   	hlt    
c0015523:	eb fe                	jmp    c0015523 <displayDebugInfo(regs*)+0x48d>

c0015525 <displayProgramFault(char const*)>:
c0015525:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001552a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001552d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015533:	85 c0                	test   eax,eax
c0015535:	74 15                	je     c001554c <displayProgramFault(char const*)+0x27>
c0015537:	83 ec 0c             	sub    esp,0xc
c001553a:	6a 04                	push   0x4
c001553c:	6a 0f                	push   0xf
c001553e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015542:	50                   	push   eax
c0015543:	e8 5a b9 ff ff       	call   c0010ea2 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015548:	83 c4 1c             	add    esp,0x1c
c001554b:	c3                   	ret    
c001554c:	c3                   	ret    

c001554d <x87EmulHandler(regs*, void*)>:
c001554d:	53                   	push   ebx
c001554e:	83 ec 14             	sub    esp,0x14
c0015551:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015555:	53                   	push   ebx
c0015556:	e8 80 a5 00 00       	call   c001fadb <Vm::x87Handler(regs*)>
c001555b:	83 c4 10             	add    esp,0x10
c001555e:	84 c0                	test   al,al
c0015560:	74 05                	je     c0015567 <x87EmulHandler(regs*, void*)+0x1a>
c0015562:	83 c4 08             	add    esp,0x8
c0015565:	5b                   	pop    ebx
c0015566:	c3                   	ret    
c0015567:	83 ec 0c             	sub    esp,0xc
c001556a:	68 32 c0 02 c0       	push   0xc002c032
c001556f:	e8 d2 dc ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0015574:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015577:	e8 1a fb ff ff       	call   c0015096 <displayDebugInfo(regs*)>

c001557c <gpFault(regs*, void*)>:
c001557c:	53                   	push   ebx
c001557d:	83 ec 14             	sub    esp,0x14
c0015580:	c7 05 18 15 03 c0 58 ee 01 c0 	mov    DWORD PTR ds:0xc0031518,0xc001ee58
c001558a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001558e:	53                   	push   ebx
c001558f:	e8 c4 98 00 00       	call   c001ee58 <Vm::faultHandler(regs*)>
c0015594:	83 c4 10             	add    esp,0x10
c0015597:	84 c0                	test   al,al
c0015599:	74 05                	je     c00155a0 <gpFault(regs*, void*)+0x24>
c001559b:	83 c4 08             	add    esp,0x8
c001559e:	5b                   	pop    ebx
c001559f:	c3                   	ret    
c00155a0:	83 ec 0c             	sub    esp,0xc
c00155a3:	68 48 c0 02 c0       	push   0xc002c048
c00155a8:	e8 99 dc ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00155ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00155b0:	e8 e1 fa ff ff       	call   c0015096 <displayDebugInfo(regs*)>

c00155b5 <pgFault(regs*, void*)>:
c00155b5:	83 ec 18             	sub    esp,0x18
c00155b8:	68 63 c0 02 c0       	push   0xc002c063
c00155bd:	e8 84 dc ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00155c2:	58                   	pop    eax
c00155c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00155c7:	e8 ca fa ff ff       	call   c0015096 <displayDebugInfo(regs*)>

c00155cc <nmiHandler(regs*, void*)>:
c00155cc:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c00155d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00155d5:	e9 ce a0 ff ff       	jmp    c000f6a8 <Computer::handleNMI()>

c00155da <otherISRHandler(regs*, void*)>:
c00155da:	53                   	push   ebx
c00155db:	83 ec 0c             	sub    esp,0xc
c00155de:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00155e2:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00155e5:	50                   	push   eax
c00155e6:	50                   	push   eax
c00155e7:	68 70 c0 02 c0       	push   0xc002c070
c00155ec:	e8 55 dc ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00155f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00155f4:	e8 9d fa ff ff       	call   c0015096 <displayDebugInfo(regs*)>

c00155f9 <opcodeFault(regs*, void*)>:
c00155f9:	55                   	push   ebp
c00155fa:	89 e5                	mov    ebp,esp
c00155fc:	56                   	push   esi
c00155fd:	53                   	push   ebx
c00155fe:	83 ec 40             	sub    esp,0x40
c0015601:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0015606:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001560c:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0015612:	84 c0                	test   al,al
c0015614:	74 24                	je     c001563a <opcodeFault(regs*, void*)+0x41>
c0015616:	83 ec 0c             	sub    esp,0xc
c0015619:	68 90 c0 02 c0       	push   0xc002c090
c001561e:	e8 23 dc ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0015623:	83 c4 10             	add    esp,0x10
c0015626:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015629:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001562c:	8d 50 19             	lea    edx,[eax+0x19]
c001562f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015632:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015635:	e9 be 05 00 00       	jmp    c0015bf8 <opcodeFault(regs*, void*)+0x5ff>
c001563a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001563d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015640:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015643:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0015647:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c001564b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001564e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015651:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0015654:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015657:	8a 00                	mov    al,BYTE PTR [eax]
c0015659:	3c f0                	cmp    al,0xf0
c001565b:	75 17                	jne    c0015674 <opcodeFault(regs*, void*)+0x7b>
c001565d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015660:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015663:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015666:	8d 50 01             	lea    edx,[eax+0x1]
c0015669:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001566c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001566f:	e9 da 00 00 00       	jmp    c001574e <opcodeFault(regs*, void*)+0x155>
c0015674:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015677:	8a 00                	mov    al,BYTE PTR [eax]
c0015679:	3c f2                	cmp    al,0xf2
c001567b:	74 09                	je     c0015686 <opcodeFault(regs*, void*)+0x8d>
c001567d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015680:	8a 00                	mov    al,BYTE PTR [eax]
c0015682:	3c f3                	cmp    al,0xf3
c0015684:	75 1b                	jne    c00156a1 <opcodeFault(regs*, void*)+0xa8>
c0015686:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001568a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001568d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015690:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015693:	8d 50 01             	lea    edx,[eax+0x1]
c0015696:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015699:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001569c:	e9 ad 00 00 00       	jmp    c001574e <opcodeFault(regs*, void*)+0x155>
c00156a1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156a4:	8a 00                	mov    al,BYTE PTR [eax]
c00156a6:	3c 66                	cmp    al,0x66
c00156a8:	75 1f                	jne    c00156c9 <opcodeFault(regs*, void*)+0xd0>
c00156aa:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00156ae:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00156b2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00156b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156bb:	8d 50 01             	lea    edx,[eax+0x1]
c00156be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156c4:	e9 85 00 00 00       	jmp    c001574e <opcodeFault(regs*, void*)+0x155>
c00156c9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156cc:	8a 00                	mov    al,BYTE PTR [eax]
c00156ce:	3c 67                	cmp    al,0x67
c00156d0:	75 18                	jne    c00156ea <opcodeFault(regs*, void*)+0xf1>
c00156d2:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00156d6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00156d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156dc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156df:	8d 50 01             	lea    edx,[eax+0x1]
c00156e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156e8:	eb 64                	jmp    c001574e <opcodeFault(regs*, void*)+0x155>
c00156ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156ed:	8a 00                	mov    al,BYTE PTR [eax]
c00156ef:	3c 2e                	cmp    al,0x2e
c00156f1:	74 09                	je     c00156fc <opcodeFault(regs*, void*)+0x103>
c00156f3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156f6:	8a 00                	mov    al,BYTE PTR [eax]
c00156f8:	3c 3e                	cmp    al,0x3e
c00156fa:	75 18                	jne    c0015714 <opcodeFault(regs*, void*)+0x11b>
c00156fc:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015700:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015703:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015706:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015709:	8d 50 01             	lea    edx,[eax+0x1]
c001570c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001570f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015712:	eb 3a                	jmp    c001574e <opcodeFault(regs*, void*)+0x155>
c0015714:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015717:	8a 00                	mov    al,BYTE PTR [eax]
c0015719:	3c 36                	cmp    al,0x36
c001571b:	74 1b                	je     c0015738 <opcodeFault(regs*, void*)+0x13f>
c001571d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015720:	8a 00                	mov    al,BYTE PTR [eax]
c0015722:	3c 26                	cmp    al,0x26
c0015724:	74 12                	je     c0015738 <opcodeFault(regs*, void*)+0x13f>
c0015726:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015729:	8a 00                	mov    al,BYTE PTR [eax]
c001572b:	3c 64                	cmp    al,0x64
c001572d:	74 09                	je     c0015738 <opcodeFault(regs*, void*)+0x13f>
c001572f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015732:	8a 00                	mov    al,BYTE PTR [eax]
c0015734:	3c 65                	cmp    al,0x65
c0015736:	75 16                	jne    c001574e <opcodeFault(regs*, void*)+0x155>
c0015738:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001573c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001573f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015742:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015745:	8d 50 01             	lea    edx,[eax+0x1]
c0015748:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001574b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001574e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015751:	8a 00                	mov    al,BYTE PTR [eax]
c0015753:	3c 0f                	cmp    al,0xf
c0015755:	0f 85 ad 00 00 00    	jne    c0015808 <opcodeFault(regs*, void*)+0x20f>
c001575b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001575e:	40                   	inc    eax
c001575f:	8a 00                	mov    al,BYTE PTR [eax]
c0015761:	3c c2                	cmp    al,0xc2
c0015763:	74 0e                	je     c0015773 <opcodeFault(regs*, void*)+0x17a>
c0015765:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015768:	40                   	inc    eax
c0015769:	8a 00                	mov    al,BYTE PTR [eax]
c001576b:	3c c3                	cmp    al,0xc3
c001576d:	0f 85 95 00 00 00    	jne    c0015808 <opcodeFault(regs*, void*)+0x20f>
c0015773:	83 ec 0c             	sub    esp,0xc
c0015776:	68 b3 c0 02 c0       	push   0xc002c0b3
c001577b:	e8 c6 da ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0015780:	83 c4 10             	add    esp,0x10
c0015783:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015786:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015789:	8d 50 01             	lea    edx,[eax+0x1]
c001578c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001578f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015792:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015795:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015798:	8a 00                	mov    al,BYTE PTR [eax]
c001579a:	8d 50 fe             	lea    edx,[eax-0x2]
c001579d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157a0:	88 10                	mov    BYTE PTR [eax],dl
c00157a2:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00157a5:	50                   	push   eax
c00157a6:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00157a9:	50                   	push   eax
c00157aa:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00157ad:	50                   	push   eax
c00157ae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00157b1:	e8 76 48 00 00       	call   c001a02c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00157b6:	83 c4 10             	add    esp,0x10
c00157b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157bc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00157bf:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00157c2:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00157c5:	01 d0                	add    eax,edx
c00157c7:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00157ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157cd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00157d0:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00157d3:	48                   	dec    eax
c00157d4:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00157d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157da:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00157dd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00157e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e3:	83 ec 04             	sub    esp,0x4
c00157e6:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00157e9:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00157ec:	50                   	push   eax
c00157ed:	e8 c2 a9 fe ff       	call   c00001b4 <voodooXADD>
c00157f2:	83 c4 10             	add    esp,0x10
c00157f5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00157f8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00157fb:	01 c2                	add    edx,eax
c00157fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015800:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015803:	e9 f0 03 00 00       	jmp    c0015bf8 <opcodeFault(regs*, void*)+0x5ff>
c0015808:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001580b:	8a 00                	mov    al,BYTE PTR [eax]
c001580d:	3c 0f                	cmp    al,0xf
c001580f:	0f 85 8b 01 00 00    	jne    c00159a0 <opcodeFault(regs*, void*)+0x3a7>
c0015815:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015818:	40                   	inc    eax
c0015819:	8a 00                	mov    al,BYTE PTR [eax]
c001581b:	3c c7                	cmp    al,0xc7
c001581d:	0f 86 7d 01 00 00    	jbe    c00159a0 <opcodeFault(regs*, void*)+0x3a7>
c0015823:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015826:	40                   	inc    eax
c0015827:	8a 00                	mov    al,BYTE PTR [eax]
c0015829:	3c cf                	cmp    al,0xcf
c001582b:	0f 87 6f 01 00 00    	ja     c00159a0 <opcodeFault(regs*, void*)+0x3a7>
c0015831:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015834:	40                   	inc    eax
c0015835:	8a 00                	mov    al,BYTE PTR [eax]
c0015837:	83 c0 38             	add    eax,0x38
c001583a:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001583d:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015841:	75 0b                	jne    c001584e <opcodeFault(regs*, void*)+0x255>
c0015843:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015846:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015849:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001584c:	eb 75                	jmp    c00158c3 <opcodeFault(regs*, void*)+0x2ca>
c001584e:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015852:	75 0b                	jne    c001585f <opcodeFault(regs*, void*)+0x266>
c0015854:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015857:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001585a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001585d:	eb 64                	jmp    c00158c3 <opcodeFault(regs*, void*)+0x2ca>
c001585f:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015863:	75 0b                	jne    c0015870 <opcodeFault(regs*, void*)+0x277>
c0015865:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015868:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001586b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001586e:	eb 53                	jmp    c00158c3 <opcodeFault(regs*, void*)+0x2ca>
c0015870:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015874:	75 0b                	jne    c0015881 <opcodeFault(regs*, void*)+0x288>
c0015876:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015879:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001587c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001587f:	eb 42                	jmp    c00158c3 <opcodeFault(regs*, void*)+0x2ca>
c0015881:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015885:	75 0b                	jne    c0015892 <opcodeFault(regs*, void*)+0x299>
c0015887:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001588a:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001588d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015890:	eb 31                	jmp    c00158c3 <opcodeFault(regs*, void*)+0x2ca>
c0015892:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015896:	75 0b                	jne    c00158a3 <opcodeFault(regs*, void*)+0x2aa>
c0015898:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001589b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001589e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00158a1:	eb 20                	jmp    c00158c3 <opcodeFault(regs*, void*)+0x2ca>
c00158a3:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00158a7:	75 0b                	jne    c00158b4 <opcodeFault(regs*, void*)+0x2bb>
c00158a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ac:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00158af:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00158b2:	eb 0f                	jmp    c00158c3 <opcodeFault(regs*, void*)+0x2ca>
c00158b4:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00158b8:	75 09                	jne    c00158c3 <opcodeFault(regs*, void*)+0x2ca>
c00158ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158bd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00158c0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00158c3:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00158c7:	74 10                	je     c00158d9 <opcodeFault(regs*, void*)+0x2e0>
c00158c9:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00158d0:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c00158d7:	eb 2d                	jmp    c0015906 <opcodeFault(regs*, void*)+0x30d>
c00158d9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00158dc:	c1 e0 18             	shl    eax,0x18
c00158df:	89 c2                	mov    edx,eax
c00158e1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00158e4:	c1 e0 08             	shl    eax,0x8
c00158e7:	25 00 00 ff 00       	and    eax,0xff0000
c00158ec:	09 c2                	or     edx,eax
c00158ee:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00158f1:	c1 e8 08             	shr    eax,0x8
c00158f4:	25 00 ff 00 00       	and    eax,0xff00
c00158f9:	09 c2                	or     edx,eax
c00158fb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00158fe:	c1 e8 18             	shr    eax,0x18
c0015901:	09 d0                	or     eax,edx
c0015903:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015906:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001590a:	75 0b                	jne    c0015917 <opcodeFault(regs*, void*)+0x31e>
c001590c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001590f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015912:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015915:	eb 75                	jmp    c001598c <opcodeFault(regs*, void*)+0x393>
c0015917:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001591b:	75 0b                	jne    c0015928 <opcodeFault(regs*, void*)+0x32f>
c001591d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015920:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015923:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015926:	eb 64                	jmp    c001598c <opcodeFault(regs*, void*)+0x393>
c0015928:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001592c:	75 0b                	jne    c0015939 <opcodeFault(regs*, void*)+0x340>
c001592e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015931:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015934:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015937:	eb 53                	jmp    c001598c <opcodeFault(regs*, void*)+0x393>
c0015939:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001593d:	75 0b                	jne    c001594a <opcodeFault(regs*, void*)+0x351>
c001593f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015942:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015945:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015948:	eb 42                	jmp    c001598c <opcodeFault(regs*, void*)+0x393>
c001594a:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001594e:	75 0b                	jne    c001595b <opcodeFault(regs*, void*)+0x362>
c0015950:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015953:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015956:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015959:	eb 31                	jmp    c001598c <opcodeFault(regs*, void*)+0x393>
c001595b:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001595f:	75 0b                	jne    c001596c <opcodeFault(regs*, void*)+0x373>
c0015961:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015964:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015967:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001596a:	eb 20                	jmp    c001598c <opcodeFault(regs*, void*)+0x393>
c001596c:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015970:	75 0b                	jne    c001597d <opcodeFault(regs*, void*)+0x384>
c0015972:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015975:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015978:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001597b:	eb 0f                	jmp    c001598c <opcodeFault(regs*, void*)+0x393>
c001597d:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015981:	75 09                	jne    c001598c <opcodeFault(regs*, void*)+0x393>
c0015983:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015986:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001598c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001598f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015992:	8d 50 02             	lea    edx,[eax+0x2]
c0015995:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015998:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001599b:	e9 58 02 00 00       	jmp    c0015bf8 <opcodeFault(regs*, void*)+0x5ff>
c00159a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159a3:	8a 00                	mov    al,BYTE PTR [eax]
c00159a5:	3c 0f                	cmp    al,0xf
c00159a7:	0f 85 76 01 00 00    	jne    c0015b23 <opcodeFault(regs*, void*)+0x52a>
c00159ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159b0:	40                   	inc    eax
c00159b1:	8a 00                	mov    al,BYTE PTR [eax]
c00159b3:	3c c7                	cmp    al,0xc7
c00159b5:	0f 85 68 01 00 00    	jne    c0015b23 <opcodeFault(regs*, void*)+0x52a>
c00159bb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00159be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159c1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00159c4:	8d 50 01             	lea    edx,[eax+0x1]
c00159c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159ca:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00159cd:	8d 45 ba             	lea    eax,[ebp-0x46]
c00159d0:	50                   	push   eax
c00159d1:	8d 45 bb             	lea    eax,[ebp-0x45]
c00159d4:	50                   	push   eax
c00159d5:	8d 45 bc             	lea    eax,[ebp-0x44]
c00159d8:	50                   	push   eax
c00159d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00159dc:	e8 4b 46 00 00       	call   c001a02c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00159e1:	83 c4 10             	add    esp,0x10
c00159e4:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00159e7:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00159ea:	83 f0 01             	xor    eax,0x1
c00159ed:	84 c0                	test   al,al
c00159ef:	0f 84 2e 01 00 00    	je     c0015b23 <opcodeFault(regs*, void*)+0x52a>
c00159f5:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00159f8:	3c 01                	cmp    al,0x1
c00159fa:	0f 85 23 01 00 00    	jne    c0015b23 <opcodeFault(regs*, void*)+0x52a>
c0015a00:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015a03:	83 f0 01             	xor    eax,0x1
c0015a06:	84 c0                	test   al,al
c0015a08:	0f 84 15 01 00 00    	je     c0015b23 <opcodeFault(regs*, void*)+0x52a>
c0015a0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a11:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015a14:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015a17:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015a1e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015a21:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015a24:	89 c2                	mov    edx,eax
c0015a26:	b8 00 00 00 00       	mov    eax,0x0
c0015a2b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015a2e:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015a31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a34:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015a37:	ba 00 00 00 00       	mov    edx,0x0
c0015a3c:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015a3f:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015a42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a45:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015a48:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015a4b:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0015a52:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015a55:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015a58:	89 c2                	mov    edx,eax
c0015a5a:	b8 00 00 00 00       	mov    eax,0x0
c0015a5f:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015a62:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015a65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a68:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015a6b:	ba 00 00 00 00       	mov    edx,0x0
c0015a70:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015a73:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015a76:	e8 2b 86 00 00       	call   c001e0a6 <lockScheduler()>
c0015a7b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015a7e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015a81:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a83:	89 c1                	mov    ecx,eax
c0015a85:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015a88:	89 cb                	mov    ebx,ecx
c0015a8a:	89 d0                	mov    eax,edx
c0015a8c:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015a8f:	89 c6                	mov    esi,eax
c0015a91:	89 f0                	mov    eax,esi
c0015a93:	09 d8                	or     eax,ebx
c0015a95:	85 c0                	test   eax,eax
c0015a97:	75 21                	jne    c0015aba <opcodeFault(regs*, void*)+0x4c1>
c0015a99:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015a9c:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015a9f:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015aa2:	89 01                	mov    DWORD PTR [ecx],eax
c0015aa4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015aa7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aaa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015aad:	83 c8 40             	or     eax,0x40
c0015ab0:	89 c2                	mov    edx,eax
c0015ab2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ab5:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015ab8:	eb 3e                	jmp    c0015af8 <opcodeFault(regs*, void*)+0x4ff>
c0015aba:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015abd:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015ac0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac2:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015ac5:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015ac8:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015acb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ace:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015ad1:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015ad4:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015ad7:	89 d0                	mov    eax,edx
c0015ad9:	31 d2                	xor    edx,edx
c0015adb:	89 c3                	mov    ebx,eax
c0015add:	89 d6                	mov    esi,edx
c0015adf:	89 da                	mov    edx,ebx
c0015ae1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ae4:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015ae7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015aed:	83 e0 bf             	and    eax,0xffffffbf
c0015af0:	89 c2                	mov    edx,eax
c0015af2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015af5:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015af8:	e8 ab 85 00 00       	call   c001e0a8 <unlockScheduler()>
c0015afd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b00:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015b03:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015b06:	01 c2                	add    edx,eax
c0015b08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b0b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015b0e:	83 ec 0c             	sub    esp,0xc
c0015b11:	68 c2 c0 02 c0       	push   0xc002c0c2
c0015b16:	e8 2b d7 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0015b1b:	83 c4 10             	add    esp,0x10
c0015b1e:	e9 d5 00 00 00       	jmp    c0015bf8 <opcodeFault(regs*, void*)+0x5ff>
c0015b23:	83 ec 0c             	sub    esp,0xc
c0015b26:	68 d5 c0 02 c0       	push   0xc002c0d5
c0015b2b:	e8 16 d7 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0015b30:	83 c4 10             	add    esp,0x10
c0015b33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b36:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015b39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b3c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015b3f:	c1 e0 04             	shl    eax,0x4
c0015b42:	01 d0                	add    eax,edx
c0015b44:	83 c0 03             	add    eax,0x3
c0015b47:	8a 00                	mov    al,BYTE PTR [eax]
c0015b49:	0f b6 d8             	movzx  ebx,al
c0015b4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b4f:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015b52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b55:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015b58:	c1 e0 04             	shl    eax,0x4
c0015b5b:	01 d0                	add    eax,edx
c0015b5d:	83 c0 02             	add    eax,0x2
c0015b60:	8a 00                	mov    al,BYTE PTR [eax]
c0015b62:	0f b6 c8             	movzx  ecx,al
c0015b65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b68:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015b6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b6e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015b71:	c1 e0 04             	shl    eax,0x4
c0015b74:	01 d0                	add    eax,edx
c0015b76:	40                   	inc    eax
c0015b77:	8a 00                	mov    al,BYTE PTR [eax]
c0015b79:	0f b6 d0             	movzx  edx,al
c0015b7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b7f:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015b82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b85:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015b88:	c1 e0 04             	shl    eax,0x4
c0015b8b:	01 f0                	add    eax,esi
c0015b8d:	8a 00                	mov    al,BYTE PTR [eax]
c0015b8f:	0f b6 c0             	movzx  eax,al
c0015b92:	83 ec 0c             	sub    esp,0xc
c0015b95:	53                   	push   ebx
c0015b96:	51                   	push   ecx
c0015b97:	52                   	push   edx
c0015b98:	50                   	push   eax
c0015b99:	68 e8 c0 02 c0       	push   0xc002c0e8
c0015b9e:	e8 a3 d6 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0015ba3:	83 c4 20             	add    esp,0x20
c0015ba6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ba9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015bac:	83 c0 03             	add    eax,0x3
c0015baf:	8a 00                	mov    al,BYTE PTR [eax]
c0015bb1:	0f b6 d8             	movzx  ebx,al
c0015bb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bb7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015bba:	83 c0 02             	add    eax,0x2
c0015bbd:	8a 00                	mov    al,BYTE PTR [eax]
c0015bbf:	0f b6 c8             	movzx  ecx,al
c0015bc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bc5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015bc8:	40                   	inc    eax
c0015bc9:	8a 00                	mov    al,BYTE PTR [eax]
c0015bcb:	0f b6 d0             	movzx  edx,al
c0015bce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bd1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015bd4:	8a 00                	mov    al,BYTE PTR [eax]
c0015bd6:	0f b6 c0             	movzx  eax,al
c0015bd9:	83 ec 0c             	sub    esp,0xc
c0015bdc:	53                   	push   ebx
c0015bdd:	51                   	push   ecx
c0015bde:	52                   	push   edx
c0015bdf:	50                   	push   eax
c0015be0:	68 10 c1 02 c0       	push   0xc002c110
c0015be5:	e8 5c d6 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0015bea:	83 c4 20             	add    esp,0x20
c0015bed:	83 ec 0c             	sub    esp,0xc
c0015bf0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015bf3:	e8 9e f4 ff ff       	call   c0015096 <displayDebugInfo(regs*)>
c0015bf8:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015bfb:	5b                   	pop    ebx
c0015bfc:	5e                   	pop    esi
c0015bfd:	5d                   	pop    ebp
c0015bfe:	c3                   	ret    

c0015bff <doubleFault(regs*, void*)>:
c0015bff:	55                   	push   ebp
c0015c00:	89 e5                	mov    ebp,esp
c0015c02:	83 ec 08             	sub    esp,0x8
c0015c05:	83 ec 0c             	sub    esp,0xc
c0015c08:	68 35 c1 02 c0       	push   0xc002c135
c0015c0d:	e8 e9 4b 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c0015c12:	83 c4 10             	add    esp,0x10
c0015c15:	90                   	nop
c0015c16:	c9                   	leave  
c0015c17:	c3                   	ret    

c0015c18 <setupInterruptController()>:
c0015c18:	55                   	push   ebp
c0015c19:	89 e5                	mov    ebp,esp
c0015c1b:	53                   	push   ebx
c0015c1c:	83 ec 24             	sub    esp,0x24
c0015c1f:	b8 00 00 00 00       	mov    eax,0x0
c0015c24:	85 c0                	test   eax,eax
c0015c26:	0f 95 c0             	setne  al
c0015c29:	84 c0                	test   al,al
c0015c2b:	74 5b                	je     c0015c88 <setupInterruptController()+0x70>
c0015c2d:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015c34:	83 ec 0c             	sub    esp,0xc
c0015c37:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015c3a:	e8 1d a3 ff ff       	call   c000ff5c <malloc>
c0015c3f:	83 c4 10             	add    esp,0x10
c0015c42:	89 c3                	mov    ebx,eax
c0015c44:	83 ec 0c             	sub    esp,0xc
c0015c47:	53                   	push   ebx
c0015c48:	e8 ef fb 00 00       	call   c002583c <APIC::APIC()>
c0015c4d:	83 c4 10             	add    esp,0x10
c0015c50:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015c53:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015c56:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015c59:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c5b:	83 c0 08             	add    eax,0x8
c0015c5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c60:	6a 00                	push   0x0
c0015c62:	6a 00                	push   0x0
c0015c64:	6a 00                	push   0x0
c0015c66:	52                   	push   edx
c0015c67:	ff d0                	call   eax
c0015c69:	83 c4 10             	add    esp,0x10
c0015c6c:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0015c71:	83 ec 08             	sub    esp,0x8
c0015c74:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015c77:	50                   	push   eax
c0015c78:	e8 c9 ea ff ff       	call   c0014746 <Device::addChild(Device*)>
c0015c7d:	83 c4 10             	add    esp,0x10
c0015c80:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015c83:	e9 52 03 00 00       	jmp    c0015fda <setupInterruptController()+0x3c2>
c0015c88:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0015c8d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015c93:	83 e0 01             	and    eax,0x1
c0015c96:	84 c0                	test   al,al
c0015c98:	0f 95 c0             	setne  al
c0015c9b:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015c9e:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015ca5:	83 ec 0c             	sub    esp,0xc
c0015ca8:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015cab:	e8 ac a2 ff ff       	call   c000ff5c <malloc>
c0015cb0:	83 c4 10             	add    esp,0x10
c0015cb3:	89 c3                	mov    ebx,eax
c0015cb5:	83 ec 0c             	sub    esp,0xc
c0015cb8:	53                   	push   ebx
c0015cb9:	e8 9c 02 01 00       	call   c0025f5a <PIC::PIC()>
c0015cbe:	83 c4 10             	add    esp,0x10
c0015cc1:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015cc4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015cc7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cca:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ccc:	83 c0 08             	add    eax,0x8
c0015ccf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cd1:	6a 00                	push   0x0
c0015cd3:	6a 00                	push   0x0
c0015cd5:	6a 00                	push   0x0
c0015cd7:	52                   	push   edx
c0015cd8:	ff d0                	call   eax
c0015cda:	83 c4 10             	add    esp,0x10
c0015cdd:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015ce1:	74 73                	je     c0015d56 <setupInterruptController()+0x13e>
c0015ce3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015ce6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ce9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ceb:	83 c0 0c             	add    eax,0xc
c0015cee:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cf0:	6a 00                	push   0x0
c0015cf2:	6a 00                	push   0x0
c0015cf4:	6a 00                	push   0x0
c0015cf6:	52                   	push   edx
c0015cf7:	ff d0                	call   eax
c0015cf9:	83 c4 10             	add    esp,0x10
c0015cfc:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015d00:	74 15                	je     c0015d17 <setupInterruptController()+0xff>
c0015d02:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d05:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d07:	83 c0 04             	add    eax,0x4
c0015d0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d0c:	83 ec 0c             	sub    esp,0xc
c0015d0f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d12:	ff d0                	call   eax
c0015d14:	83 c4 10             	add    esp,0x10
c0015d17:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015d1e:	83 ec 0c             	sub    esp,0xc
c0015d21:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015d24:	e8 33 a2 ff ff       	call   c000ff5c <malloc>
c0015d29:	83 c4 10             	add    esp,0x10
c0015d2c:	89 c3                	mov    ebx,eax
c0015d2e:	83 ec 0c             	sub    esp,0xc
c0015d31:	53                   	push   ebx
c0015d32:	e8 05 fb 00 00       	call   c002583c <APIC::APIC()>
c0015d37:	83 c4 10             	add    esp,0x10
c0015d3a:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015d3d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015d40:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d43:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d45:	83 c0 08             	add    eax,0x8
c0015d48:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d4a:	6a 00                	push   0x0
c0015d4c:	6a 00                	push   0x0
c0015d4e:	6a 00                	push   0x0
c0015d50:	52                   	push   edx
c0015d51:	ff d0                	call   eax
c0015d53:	83 c4 10             	add    esp,0x10
c0015d56:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0015d5b:	83 ec 08             	sub    esp,0x8
c0015d5e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d61:	50                   	push   eax
c0015d62:	e8 df e9 ff ff       	call   c0014746 <Device::addChild(Device*)>
c0015d67:	83 c4 10             	add    esp,0x10
c0015d6a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d6f:	83 c0 24             	add    eax,0x24
c0015d72:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d74:	6a 00                	push   0x0
c0015d76:	68 da 55 01 c0       	push   0xc00155da
c0015d7b:	6a 00                	push   0x0
c0015d7d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d80:	ff d0                	call   eax
c0015d82:	83 c4 10             	add    esp,0x10
c0015d85:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d88:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d8a:	83 c0 24             	add    eax,0x24
c0015d8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d8f:	6a 00                	push   0x0
c0015d91:	68 da 55 01 c0       	push   0xc00155da
c0015d96:	6a 01                	push   0x1
c0015d98:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d9b:	ff d0                	call   eax
c0015d9d:	83 c4 10             	add    esp,0x10
c0015da0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015da3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015da5:	83 c0 24             	add    eax,0x24
c0015da8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015daa:	6a 00                	push   0x0
c0015dac:	68 cc 55 01 c0       	push   0xc00155cc
c0015db1:	6a 02                	push   0x2
c0015db3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015db6:	ff d0                	call   eax
c0015db8:	83 c4 10             	add    esp,0x10
c0015dbb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015dbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015dc0:	83 c0 24             	add    eax,0x24
c0015dc3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015dc5:	6a 00                	push   0x0
c0015dc7:	68 da 55 01 c0       	push   0xc00155da
c0015dcc:	6a 03                	push   0x3
c0015dce:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015dd1:	ff d0                	call   eax
c0015dd3:	83 c4 10             	add    esp,0x10
c0015dd6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015dd9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ddb:	83 c0 24             	add    eax,0x24
c0015dde:	8b 00                	mov    eax,DWORD PTR [eax]
c0015de0:	6a 00                	push   0x0
c0015de2:	68 da 55 01 c0       	push   0xc00155da
c0015de7:	6a 04                	push   0x4
c0015de9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015dec:	ff d0                	call   eax
c0015dee:	83 c4 10             	add    esp,0x10
c0015df1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015df4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015df6:	83 c0 24             	add    eax,0x24
c0015df9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015dfb:	6a 00                	push   0x0
c0015dfd:	68 da 55 01 c0       	push   0xc00155da
c0015e02:	6a 05                	push   0x5
c0015e04:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015e07:	ff d0                	call   eax
c0015e09:	83 c4 10             	add    esp,0x10
c0015e0c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015e11:	83 c0 24             	add    eax,0x24
c0015e14:	8b 00                	mov    eax,DWORD PTR [eax]
c0015e16:	6a 00                	push   0x0
c0015e18:	68 f9 55 01 c0       	push   0xc00155f9
c0015e1d:	6a 06                	push   0x6
c0015e1f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015e22:	ff d0                	call   eax
c0015e24:	83 c4 10             	add    esp,0x10
c0015e27:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015e2c:	83 c0 24             	add    eax,0x24
c0015e2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015e31:	6a 00                	push   0x0
c0015e33:	68 4d 55 01 c0       	push   0xc001554d
c0015e38:	6a 07                	push   0x7
c0015e3a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015e3d:	ff d0                	call   eax
c0015e3f:	83 c4 10             	add    esp,0x10
c0015e42:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e45:	8b 00                	mov    eax,DWORD PTR [eax]
c0015e47:	83 c0 24             	add    eax,0x24
c0015e4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015e4c:	6a 00                	push   0x0
c0015e4e:	68 ff 5b 01 c0       	push   0xc0015bff
c0015e53:	6a 08                	push   0x8
c0015e55:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015e58:	ff d0                	call   eax
c0015e5a:	83 c4 10             	add    esp,0x10
c0015e5d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e60:	8b 00                	mov    eax,DWORD PTR [eax]
c0015e62:	83 c0 24             	add    eax,0x24
c0015e65:	8b 00                	mov    eax,DWORD PTR [eax]
c0015e67:	6a 00                	push   0x0
c0015e69:	68 da 55 01 c0       	push   0xc00155da
c0015e6e:	6a 09                	push   0x9
c0015e70:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015e73:	ff d0                	call   eax
c0015e75:	83 c4 10             	add    esp,0x10
c0015e78:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015e7d:	83 c0 24             	add    eax,0x24
c0015e80:	8b 00                	mov    eax,DWORD PTR [eax]
c0015e82:	6a 00                	push   0x0
c0015e84:	68 da 55 01 c0       	push   0xc00155da
c0015e89:	6a 0a                	push   0xa
c0015e8b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015e8e:	ff d0                	call   eax
c0015e90:	83 c4 10             	add    esp,0x10
c0015e93:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e96:	8b 00                	mov    eax,DWORD PTR [eax]
c0015e98:	83 c0 24             	add    eax,0x24
c0015e9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015e9d:	6a 00                	push   0x0
c0015e9f:	68 da 55 01 c0       	push   0xc00155da
c0015ea4:	6a 0b                	push   0xb
c0015ea6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ea9:	ff d0                	call   eax
c0015eab:	83 c4 10             	add    esp,0x10
c0015eae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015eb1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015eb3:	83 c0 24             	add    eax,0x24
c0015eb6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015eb8:	6a 00                	push   0x0
c0015eba:	68 da 55 01 c0       	push   0xc00155da
c0015ebf:	6a 0c                	push   0xc
c0015ec1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ec4:	ff d0                	call   eax
c0015ec6:	83 c4 10             	add    esp,0x10
c0015ec9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ecc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ece:	83 c0 24             	add    eax,0x24
c0015ed1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ed3:	6a 00                	push   0x0
c0015ed5:	68 7c 55 01 c0       	push   0xc001557c
c0015eda:	6a 0d                	push   0xd
c0015edc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015edf:	ff d0                	call   eax
c0015ee1:	83 c4 10             	add    esp,0x10
c0015ee4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ee7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ee9:	83 c0 24             	add    eax,0x24
c0015eec:	8b 00                	mov    eax,DWORD PTR [eax]
c0015eee:	6a 00                	push   0x0
c0015ef0:	68 b5 55 01 c0       	push   0xc00155b5
c0015ef5:	6a 0e                	push   0xe
c0015ef7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015efa:	ff d0                	call   eax
c0015efc:	83 c4 10             	add    esp,0x10
c0015eff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015f02:	8b 00                	mov    eax,DWORD PTR [eax]
c0015f04:	83 c0 24             	add    eax,0x24
c0015f07:	8b 00                	mov    eax,DWORD PTR [eax]
c0015f09:	6a 00                	push   0x0
c0015f0b:	68 da 55 01 c0       	push   0xc00155da
c0015f10:	6a 0f                	push   0xf
c0015f12:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015f15:	ff d0                	call   eax
c0015f17:	83 c4 10             	add    esp,0x10
c0015f1a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015f1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015f1f:	83 c0 24             	add    eax,0x24
c0015f22:	8b 00                	mov    eax,DWORD PTR [eax]
c0015f24:	6a 00                	push   0x0
c0015f26:	68 da 55 01 c0       	push   0xc00155da
c0015f2b:	6a 10                	push   0x10
c0015f2d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015f30:	ff d0                	call   eax
c0015f32:	83 c4 10             	add    esp,0x10
c0015f35:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015f38:	8b 00                	mov    eax,DWORD PTR [eax]
c0015f3a:	83 c0 24             	add    eax,0x24
c0015f3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015f3f:	6a 00                	push   0x0
c0015f41:	68 da 55 01 c0       	push   0xc00155da
c0015f46:	6a 11                	push   0x11
c0015f48:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015f4b:	ff d0                	call   eax
c0015f4d:	83 c4 10             	add    esp,0x10
c0015f50:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015f53:	8b 00                	mov    eax,DWORD PTR [eax]
c0015f55:	83 c0 24             	add    eax,0x24
c0015f58:	8b 00                	mov    eax,DWORD PTR [eax]
c0015f5a:	6a 00                	push   0x0
c0015f5c:	68 da 55 01 c0       	push   0xc00155da
c0015f61:	6a 12                	push   0x12
c0015f63:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015f66:	ff d0                	call   eax
c0015f68:	83 c4 10             	add    esp,0x10
c0015f6b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015f6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015f70:	83 c0 24             	add    eax,0x24
c0015f73:	8b 00                	mov    eax,DWORD PTR [eax]
c0015f75:	6a 00                	push   0x0
c0015f77:	68 da 55 01 c0       	push   0xc00155da
c0015f7c:	6a 13                	push   0x13
c0015f7e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015f81:	ff d0                	call   eax
c0015f83:	83 c4 10             	add    esp,0x10
c0015f86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015f89:	8b 00                	mov    eax,DWORD PTR [eax]
c0015f8b:	83 c0 24             	add    eax,0x24
c0015f8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015f90:	6a 00                	push   0x0
c0015f92:	68 da 55 01 c0       	push   0xc00155da
c0015f97:	6a 14                	push   0x14
c0015f99:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015f9c:	ff d0                	call   eax
c0015f9e:	83 c4 10             	add    esp,0x10
c0015fa1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015fa4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015fa6:	83 c0 24             	add    eax,0x24
c0015fa9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015fab:	6a 00                	push   0x0
c0015fad:	68 da 55 01 c0       	push   0xc00155da
c0015fb2:	6a 1e                	push   0x1e
c0015fb4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015fb7:	ff d0                	call   eax
c0015fb9:	83 c4 10             	add    esp,0x10
c0015fbc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015fbf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015fc1:	83 c0 24             	add    eax,0x24
c0015fc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015fc6:	6a 00                	push   0x0
c0015fc8:	68 4f c8 01 c0       	push   0xc001c84f
c0015fcd:	6a 60                	push   0x60
c0015fcf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015fd2:	ff d0                	call   eax
c0015fd4:	83 c4 10             	add    esp,0x10
c0015fd7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015fda:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015fdd:	c9                   	leave  
c0015fde:	c3                   	ret    
c0015fdf:	90                   	nop

c0015fe0 <InterruptController::convertLegacyIRQNumber(int)>:
c0015fe0:	55                   	push   ebp
c0015fe1:	89 e5                	mov    ebp,esp
c0015fe3:	83 ec 08             	sub    esp,0x8
c0015fe6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fe9:	83 ec 0c             	sub    esp,0xc
c0015fec:	50                   	push   eax
c0015fed:	e8 44 e9 ff ff       	call   c0014936 <Device::getName()>
c0015ff2:	83 c4 10             	add    esp,0x10
c0015ff5:	8a 00                	mov    al,BYTE PTR [eax]
c0015ff7:	3c 41                	cmp    al,0x41
c0015ff9:	0f 94 c0             	sete   al
c0015ffc:	84 c0                	test   al,al
c0015ffe:	74 28                	je     c0016028 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0016000:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0016004:	7f 12                	jg     c0016018 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0016006:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0016009:	05 00 06 03 c0       	add    eax,0xc0030600
c001600e:	8a 00                	mov    al,BYTE PTR [eax]
c0016010:	0f b6 c0             	movzx  eax,al
c0016013:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0016016:	eb 10                	jmp    c0016028 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0016018:	83 ec 0c             	sub    esp,0xc
c001601b:	68 30 be 02 c0       	push   0xc002be30
c0016020:	e8 d6 47 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c0016025:	83 c4 10             	add    esp,0x10
c0016028:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001602b:	c9                   	leave  
c001602c:	c3                   	ret    
c001602d:	90                   	nop

c001602e <sendKeyToTerminal(unsigned char)>:
c001602e:	55                   	push   ebp
c001602f:	89 e5                	mov    ebp,esp
c0016031:	83 ec 28             	sub    esp,0x28
c0016034:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016037:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001603a:	a1 24 14 03 c0       	mov    eax,ds:0xc0031424
c001603f:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0016043:	83 ec 08             	sub    esp,0x8
c0016046:	52                   	push   edx
c0016047:	50                   	push   eax
c0016048:	e8 9b b9 ff ff       	call   c00119e8 <VgaText::receiveKey(unsigned char)>
c001604d:	83 c4 10             	add    esp,0x10
c0016050:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0016054:	75 41                	jne    c0016097 <sendKeyToTerminal(unsigned char)+0x69>
c0016056:	e8 4f 80 00 00       	call   c001e0aa <lockStuff()>
c001605b:	a1 44 19 03 c0       	mov    eax,ds:0xc0031944
c0016060:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0016063:	c7 05 44 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031944,0x0
c001606d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0016071:	74 1f                	je     c0016092 <sendKeyToTerminal(unsigned char)+0x64>
c0016073:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016076:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0016079:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001607c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001607f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0016082:	83 ec 0c             	sub    esp,0xc
c0016085:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0016088:	e8 6f 86 00 00       	call   c001e6fc <unblockTask(ThreadControlBlock*)>
c001608d:	83 c4 10             	add    esp,0x10
c0016090:	eb db                	jmp    c001606d <sendKeyToTerminal(unsigned char)+0x3f>
c0016092:	e8 1f 80 00 00       	call   c001e0b6 <unlockStuff()>
c0016097:	90                   	nop
c0016098:	c9                   	leave  
c0016099:	c3                   	ret    

c001609a <startGUI(void*)>:
c001609a:	55                   	push   ebp
c001609b:	89 e5                	mov    ebp,esp
c001609d:	53                   	push   ebx
c001609e:	83 ec 04             	sub    esp,0x4
c00160a1:	e8 02 80 00 00       	call   c001e0a8 <unlockScheduler()>
c00160a6:	8b 1d 90 13 03 c0    	mov    ebx,DWORD PTR ds:0xc0031390
c00160ac:	83 ec 08             	sub    esp,0x8
c00160af:	6a 01                	push   0x1
c00160b1:	68 2c c2 02 c0       	push   0xc002c22c
c00160b6:	e8 1e 77 00 00       	call   c001d7d9 <Thr::loadDLL(char const*, bool)>
c00160bb:	83 c4 10             	add    esp,0x10
c00160be:	83 ec 08             	sub    esp,0x8
c00160c1:	53                   	push   ebx
c00160c2:	50                   	push   eax
c00160c3:	e8 20 79 00 00       	call   c001d9e8 <Thr::executeDLL(unsigned long, void*)>
c00160c8:	83 c4 10             	add    esp,0x10
c00160cb:	8b 1d 90 13 03 c0    	mov    ebx,DWORD PTR ds:0xc0031390
c00160d1:	83 ec 08             	sub    esp,0x8
c00160d4:	6a 01                	push   0x1
c00160d6:	68 46 c2 02 c0       	push   0xc002c246
c00160db:	e8 f9 76 00 00       	call   c001d7d9 <Thr::loadDLL(char const*, bool)>
c00160e0:	83 c4 10             	add    esp,0x10
c00160e3:	83 ec 08             	sub    esp,0x8
c00160e6:	53                   	push   ebx
c00160e7:	50                   	push   eax
c00160e8:	e8 fb 78 00 00       	call   c001d9e8 <Thr::executeDLL(unsigned long, void*)>
c00160ed:	83 c4 10             	add    esp,0x10
c00160f0:	90                   	nop
c00160f1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00160f4:	c9                   	leave  
c00160f5:	c3                   	ret    

c00160f6 <startGUIVESA(void*)>:
c00160f6:	55                   	push   ebp
c00160f7:	89 e5                	mov    ebp,esp
c00160f9:	53                   	push   ebx
c00160fa:	83 ec 04             	sub    esp,0x4
c00160fd:	e8 a6 7f 00 00       	call   c001e0a8 <unlockScheduler()>
c0016102:	8b 1d 90 13 03 c0    	mov    ebx,DWORD PTR ds:0xc0031390
c0016108:	83 ec 08             	sub    esp,0x8
c001610b:	6a 01                	push   0x1
c001610d:	68 60 c2 02 c0       	push   0xc002c260
c0016112:	e8 c2 76 00 00       	call   c001d7d9 <Thr::loadDLL(char const*, bool)>
c0016117:	83 c4 10             	add    esp,0x10
c001611a:	83 ec 08             	sub    esp,0x8
c001611d:	53                   	push   ebx
c001611e:	50                   	push   eax
c001611f:	e8 c4 78 00 00       	call   c001d9e8 <Thr::executeDLL(unsigned long, void*)>
c0016124:	83 c4 10             	add    esp,0x10
c0016127:	8b 1d 90 13 03 c0    	mov    ebx,DWORD PTR ds:0xc0031390
c001612d:	83 ec 08             	sub    esp,0x8
c0016130:	6a 01                	push   0x1
c0016132:	68 46 c2 02 c0       	push   0xc002c246
c0016137:	e8 9d 76 00 00       	call   c001d7d9 <Thr::loadDLL(char const*, bool)>
c001613c:	83 c4 10             	add    esp,0x10
c001613f:	83 ec 08             	sub    esp,0x8
c0016142:	53                   	push   ebx
c0016143:	50                   	push   eax
c0016144:	e8 9f 78 00 00       	call   c001d9e8 <Thr::executeDLL(unsigned long, void*)>
c0016149:	83 c4 10             	add    esp,0x10
c001614c:	90                   	nop
c001614d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0016150:	c9                   	leave  
c0016151:	c3                   	ret    

c0016152 <sendKeyboardToken(KeyboardToken)>:
c0016152:	55                   	push   ebp
c0016153:	89 e5                	mov    ebp,esp
c0016155:	83 ec 18             	sub    esp,0x18
c0016158:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001615b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001615e:	0f b7 c0             	movzx  eax,ax
c0016161:	83 f2 01             	xor    edx,0x1
c0016164:	88 90 40 15 03 c0    	mov    BYTE PTR [eax-0x3ffceac0],dl
c001616a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001616d:	66 3d 03 02          	cmp    ax,0x203
c0016171:	75 07                	jne    c001617a <sendKeyboardToken(KeyboardToken)+0x28>
c0016173:	a0 40 16 03 c0       	mov    al,ds:0xc0031640
c0016178:	84 c0                	test   al,al
c001617a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001617e:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0016181:	a0 48 19 03 c0       	mov    al,ds:0xc0031948
c0016186:	38 c2                	cmp    dl,al
c0016188:	74 1c                	je     c00161a6 <sendKeyboardToken(KeyboardToken)+0x54>
c001618a:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001618d:	a2 48 19 03 c0       	mov    ds:0xc0031948,al
c0016192:	a0 48 19 03 c0       	mov    al,ds:0xc0031948
c0016197:	0f b6 c0             	movzx  eax,al
c001619a:	83 ec 0c             	sub    esp,0xc
c001619d:	50                   	push   eax
c001619e:	e8 55 aa ff ff       	call   c0010bf8 <setTerminalScrollLock(bool)>
c00161a3:	83 c4 10             	add    esp,0x10
c00161a6:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00161a9:	84 c0                	test   al,al
c00161ab:	0f 84 ae 00 00 00    	je     c001625f <sendKeyboardToken(KeyboardToken)+0x10d>
c00161b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161b4:	66 3d 10 03          	cmp    ax,0x310
c00161b8:	75 06                	jne    c00161c0 <sendKeyboardToken(KeyboardToken)+0x6e>
c00161ba:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00161c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161c3:	66 3d 11 03          	cmp    ax,0x311
c00161c7:	75 06                	jne    c00161cf <sendKeyboardToken(KeyboardToken)+0x7d>
c00161c9:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00161cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161d2:	66 3d 12 03          	cmp    ax,0x312
c00161d6:	75 06                	jne    c00161de <sendKeyboardToken(KeyboardToken)+0x8c>
c00161d8:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00161de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161e1:	66 3d 13 03          	cmp    ax,0x313
c00161e5:	75 06                	jne    c00161ed <sendKeyboardToken(KeyboardToken)+0x9b>
c00161e7:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00161ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161f0:	66 3d 14 03          	cmp    ax,0x314
c00161f4:	75 06                	jne    c00161fc <sendKeyboardToken(KeyboardToken)+0xaa>
c00161f6:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00161fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161ff:	66 3d 15 03          	cmp    ax,0x315
c0016203:	75 06                	jne    c001620b <sendKeyboardToken(KeyboardToken)+0xb9>
c0016205:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001620b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001620e:	66 3d 16 03          	cmp    ax,0x316
c0016212:	75 06                	jne    c001621a <sendKeyboardToken(KeyboardToken)+0xc8>
c0016214:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001621a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001621d:	66 3d 17 03          	cmp    ax,0x317
c0016221:	75 06                	jne    c0016229 <sendKeyboardToken(KeyboardToken)+0xd7>
c0016223:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0016229:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001622c:	66 3d 18 03          	cmp    ax,0x318
c0016230:	75 06                	jne    c0016238 <sendKeyboardToken(KeyboardToken)+0xe6>
c0016232:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0016238:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001623b:	66 3d 19 03          	cmp    ax,0x319
c001623f:	75 06                	jne    c0016247 <sendKeyboardToken(KeyboardToken)+0xf5>
c0016241:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0016247:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001624a:	66 3d 1a 03          	cmp    ax,0x31a
c001624e:	0f 85 c9 00 00 00    	jne    c001631d <sendKeyboardToken(KeyboardToken)+0x1cb>
c0016254:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001625a:	e9 be 00 00 00       	jmp    c001631d <sendKeyboardToken(KeyboardToken)+0x1cb>
c001625f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016262:	66 3d 10 03          	cmp    ax,0x310
c0016266:	75 0a                	jne    c0016272 <sendKeyboardToken(KeyboardToken)+0x120>
c0016268:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001626e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016272:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016275:	66 3d 11 03          	cmp    ax,0x311
c0016279:	75 0a                	jne    c0016285 <sendKeyboardToken(KeyboardToken)+0x133>
c001627b:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0016281:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016285:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016288:	66 3d 12 03          	cmp    ax,0x312
c001628c:	75 0a                	jne    c0016298 <sendKeyboardToken(KeyboardToken)+0x146>
c001628e:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0016294:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016298:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001629b:	66 3d 13 03          	cmp    ax,0x313
c001629f:	75 0a                	jne    c00162ab <sendKeyboardToken(KeyboardToken)+0x159>
c00162a1:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00162a7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00162ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162ae:	66 3d 14 03          	cmp    ax,0x314
c00162b2:	75 0a                	jne    c00162be <sendKeyboardToken(KeyboardToken)+0x16c>
c00162b4:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00162ba:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00162be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162c1:	66 3d 15 03          	cmp    ax,0x315
c00162c5:	75 0a                	jne    c00162d1 <sendKeyboardToken(KeyboardToken)+0x17f>
c00162c7:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00162cd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00162d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162d4:	66 3d 16 03          	cmp    ax,0x316
c00162d8:	75 0a                	jne    c00162e4 <sendKeyboardToken(KeyboardToken)+0x192>
c00162da:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00162e0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00162e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162e7:	66 3d 17 03          	cmp    ax,0x317
c00162eb:	75 0a                	jne    c00162f7 <sendKeyboardToken(KeyboardToken)+0x1a5>
c00162ed:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00162f3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00162f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162fa:	66 3d 18 03          	cmp    ax,0x318
c00162fe:	75 0a                	jne    c001630a <sendKeyboardToken(KeyboardToken)+0x1b8>
c0016300:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0016306:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001630a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001630d:	66 3d 19 03          	cmp    ax,0x319
c0016311:	75 0a                	jne    c001631d <sendKeyboardToken(KeyboardToken)+0x1cb>
c0016313:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0016319:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001631d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016320:	66 3d 00 02          	cmp    ax,0x200
c0016324:	75 2c                	jne    c0016352 <sendKeyboardToken(KeyboardToken)+0x200>
c0016326:	a0 50 19 03 c0       	mov    al,ds:0xc0031950
c001632b:	83 f0 01             	xor    eax,0x1
c001632e:	84 c0                	test   al,al
c0016330:	74 20                	je     c0016352 <sendKeyboardToken(KeyboardToken)+0x200>
c0016332:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c0016337:	6a 01                	push   0x1
c0016339:	6a 00                	push   0x0
c001633b:	68 9a 60 01 c0       	push   0xc001609a
c0016340:	50                   	push   eax
c0016341:	e8 68 77 00 00       	call   c001daae <Process::createThread(void (*)(void*), void*, int)>
c0016346:	83 c4 10             	add    esp,0x10
c0016349:	c6 05 50 19 03 c0 01 	mov    BYTE PTR ds:0xc0031950,0x1
c0016350:	eb 33                	jmp    c0016385 <sendKeyboardToken(KeyboardToken)+0x233>
c0016352:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016355:	66 3d 01 02          	cmp    ax,0x201
c0016359:	75 2a                	jne    c0016385 <sendKeyboardToken(KeyboardToken)+0x233>
c001635b:	a0 50 19 03 c0       	mov    al,ds:0xc0031950
c0016360:	83 f0 01             	xor    eax,0x1
c0016363:	84 c0                	test   al,al
c0016365:	74 1e                	je     c0016385 <sendKeyboardToken(KeyboardToken)+0x233>
c0016367:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001636c:	6a 01                	push   0x1
c001636e:	6a 00                	push   0x0
c0016370:	68 f6 60 01 c0       	push   0xc00160f6
c0016375:	50                   	push   eax
c0016376:	e8 33 77 00 00       	call   c001daae <Process::createThread(void (*)(void*), void*, int)>
c001637b:	83 c4 10             	add    esp,0x10
c001637e:	c6 05 50 19 03 c0 01 	mov    BYTE PTR ds:0xc0031950,0x1
c0016385:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016388:	66 3d 1d 03          	cmp    ax,0x31d
c001638c:	75 06                	jne    c0016394 <sendKeyboardToken(KeyboardToken)+0x242>
c001638e:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0016394:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016397:	66 3d 1c 03          	cmp    ax,0x31c
c001639b:	75 06                	jne    c00163a3 <sendKeyboardToken(KeyboardToken)+0x251>
c001639d:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00163a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163a6:	66 3d 1b 03          	cmp    ax,0x31b
c00163aa:	75 06                	jne    c00163b2 <sendKeyboardToken(KeyboardToken)+0x260>
c00163ac:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00163b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163b5:	66 3d 1e 03          	cmp    ax,0x31e
c00163b9:	75 06                	jne    c00163c1 <sendKeyboardToken(KeyboardToken)+0x26f>
c00163bb:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00163c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163c4:	66 3d 1f 03          	cmp    ax,0x31f
c00163c8:	75 06                	jne    c00163d0 <sendKeyboardToken(KeyboardToken)+0x27e>
c00163ca:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00163d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163d3:	66 3d 1a 03          	cmp    ax,0x31a
c00163d7:	75 06                	jne    c00163df <sendKeyboardToken(KeyboardToken)+0x28d>
c00163d9:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00163df:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00163e3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00163e6:	83 f0 01             	xor    eax,0x1
c00163e9:	84 c0                	test   al,al
c00163eb:	74 77                	je     c0016464 <sendKeyboardToken(KeyboardToken)+0x312>
c00163ed:	a0 41 16 03 c0       	mov    al,ds:0xc0031641
c00163f2:	84 c0                	test   al,al
c00163f4:	74 41                	je     c0016437 <sendKeyboardToken(KeyboardToken)+0x2e5>
c00163f6:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00163fa:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00163fe:	74 2b                	je     c001642b <sendKeyboardToken(KeyboardToken)+0x2d9>
c0016400:	8b 15 4c 19 03 c0    	mov    edx,DWORD PTR ds:0xc003194c
c0016406:	89 d0                	mov    eax,edx
c0016408:	c1 e0 02             	shl    eax,0x2
c001640b:	01 d0                	add    eax,edx
c001640d:	01 c0                	add    eax,eax
c001640f:	a3 4c 19 03 c0       	mov    ds:0xc003194c,eax
c0016414:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016417:	0f b7 c0             	movzx  eax,ax
c001641a:	8d 50 d0             	lea    edx,[eax-0x30]
c001641d:	a1 4c 19 03 c0       	mov    eax,ds:0xc003194c
c0016422:	01 d0                	add    eax,edx
c0016424:	a3 4c 19 03 c0       	mov    ds:0xc003194c,eax
c0016429:	eb 6d                	jmp    c0016498 <sendKeyboardToken(KeyboardToken)+0x346>
c001642b:	c7 05 4c 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003194c,0x0
c0016435:	eb 61                	jmp    c0016498 <sendKeyboardToken(KeyboardToken)+0x346>
c0016437:	a1 4c 19 03 c0       	mov    eax,ds:0xc003194c
c001643c:	85 c0                	test   eax,eax
c001643e:	74 18                	je     c0016458 <sendKeyboardToken(KeyboardToken)+0x306>
c0016440:	a1 4c 19 03 c0       	mov    eax,ds:0xc003194c
c0016445:	0f b6 c0             	movzx  eax,al
c0016448:	83 ec 0c             	sub    esp,0xc
c001644b:	50                   	push   eax
c001644c:	e8 dd fb ff ff       	call   c001602e <sendKeyToTerminal(unsigned char)>
c0016451:	83 c4 10             	add    esp,0x10
c0016454:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016458:	c7 05 4c 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003194c,0x0
c0016462:	eb 34                	jmp    c0016498 <sendKeyboardToken(KeyboardToken)+0x346>
c0016464:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016467:	66 3d 01 01          	cmp    ax,0x101
c001646b:	75 2b                	jne    c0016498 <sendKeyboardToken(KeyboardToken)+0x346>
c001646d:	a1 4c 19 03 c0       	mov    eax,ds:0xc003194c
c0016472:	85 c0                	test   eax,eax
c0016474:	74 18                	je     c001648e <sendKeyboardToken(KeyboardToken)+0x33c>
c0016476:	a1 4c 19 03 c0       	mov    eax,ds:0xc003194c
c001647b:	0f b6 c0             	movzx  eax,al
c001647e:	83 ec 0c             	sub    esp,0xc
c0016481:	50                   	push   eax
c0016482:	e8 a7 fb ff ff       	call   c001602e <sendKeyToTerminal(unsigned char)>
c0016487:	83 c4 10             	add    esp,0x10
c001648a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001648e:	c7 05 4c 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003194c,0x0
c0016498:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001649b:	83 f0 01             	xor    eax,0x1
c001649e:	84 c0                	test   al,al
c00164a0:	74 4c                	je     c00164ee <sendKeyboardToken(KeyboardToken)+0x39c>
c00164a2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00164a5:	83 f0 01             	xor    eax,0x1
c00164a8:	84 c0                	test   al,al
c00164aa:	74 42                	je     c00164ee <sendKeyboardToken(KeyboardToken)+0x39c>
c00164ac:	a0 40 16 03 c0       	mov    al,ds:0xc0031640
c00164b1:	83 f0 01             	xor    eax,0x1
c00164b4:	84 c0                	test   al,al
c00164b6:	74 36                	je     c00164ee <sendKeyboardToken(KeyboardToken)+0x39c>
c00164b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00164bb:	66 83 f8 1f          	cmp    ax,0x1f
c00164bf:	76 09                	jbe    c00164ca <sendKeyboardToken(KeyboardToken)+0x378>
c00164c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00164c4:	66 83 f8 7e          	cmp    ax,0x7e
c00164c8:	76 12                	jbe    c00164dc <sendKeyboardToken(KeyboardToken)+0x38a>
c00164ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00164cd:	66 83 f8 0a          	cmp    ax,0xa
c00164d1:	74 09                	je     c00164dc <sendKeyboardToken(KeyboardToken)+0x38a>
c00164d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00164d6:	66 83 f8 08          	cmp    ax,0x8
c00164da:	75 12                	jne    c00164ee <sendKeyboardToken(KeyboardToken)+0x39c>
c00164dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00164df:	0f b6 c0             	movzx  eax,al
c00164e2:	83 ec 0c             	sub    esp,0xc
c00164e5:	50                   	push   eax
c00164e6:	e8 43 fb ff ff       	call   c001602e <sendKeyToTerminal(unsigned char)>
c00164eb:	83 c4 10             	add    esp,0x10
c00164ee:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00164f1:	83 f0 01             	xor    eax,0x1
c00164f4:	84 c0                	test   al,al
c00164f6:	74 4f                	je     c0016547 <sendKeyboardToken(KeyboardToken)+0x3f5>
c00164f8:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00164fb:	83 f0 01             	xor    eax,0x1
c00164fe:	84 c0                	test   al,al
c0016500:	74 45                	je     c0016547 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0016502:	a0 40 16 03 c0       	mov    al,ds:0xc0031640
c0016507:	84 c0                	test   al,al
c0016509:	74 3c                	je     c0016547 <sendKeyboardToken(KeyboardToken)+0x3f5>
c001650b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001650e:	66 83 f8 3f          	cmp    ax,0x3f
c0016512:	76 33                	jbe    c0016547 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0016514:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016517:	66 83 f8 7f          	cmp    ax,0x7f
c001651b:	77 2a                	ja     c0016547 <sendKeyboardToken(KeyboardToken)+0x3f5>
c001651d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016520:	88 c2                	mov    dl,al
c0016522:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016525:	66 83 f8 5f          	cmp    ax,0x5f
c0016529:	76 04                	jbe    c001652f <sendKeyboardToken(KeyboardToken)+0x3dd>
c001652b:	b0 20                	mov    al,0x20
c001652d:	eb 02                	jmp    c0016531 <sendKeyboardToken(KeyboardToken)+0x3df>
c001652f:	b0 00                	mov    al,0x0
c0016531:	29 c2                	sub    edx,eax
c0016533:	88 d0                	mov    al,dl
c0016535:	83 e8 40             	sub    eax,0x40
c0016538:	0f b6 c0             	movzx  eax,al
c001653b:	83 ec 0c             	sub    esp,0xc
c001653e:	50                   	push   eax
c001653f:	e8 ea fa ff ff       	call   c001602e <sendKeyToTerminal(unsigned char)>
c0016544:	83 c4 10             	add    esp,0x10
c0016547:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001654a:	66 3d 00 03          	cmp    ax,0x300
c001654e:	75 0f                	jne    c001655f <sendKeyboardToken(KeyboardToken)+0x40d>
c0016550:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016553:	83 f0 01             	xor    eax,0x1
c0016556:	84 c0                	test   al,al
c0016558:	74 05                	je     c001655f <sendKeyboardToken(KeyboardToken)+0x40d>
c001655a:	e8 9a a6 ff ff       	call   c0010bf9 <doTerminalCycle()>
c001655f:	90                   	nop
c0016560:	c9                   	leave  
c0016561:	c3                   	ret    

c0016562 <clearInternalKeybuffer(VgaText*)>:
c0016562:	55                   	push   ebp
c0016563:	89 e5                	mov    ebp,esp
c0016565:	83 ec 08             	sub    esp,0x8
c0016568:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001656b:	05 34 11 00 00       	add    eax,0x1134
c0016570:	83 ec 0c             	sub    esp,0xc
c0016573:	50                   	push   eax
c0016574:	e8 68 a1 fe ff       	call   c00006e1 <strlen>
c0016579:	83 c4 10             	add    esp,0x10
c001657c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001657f:	81 c2 34 11 00 00    	add    edx,0x1134
c0016585:	83 ec 04             	sub    esp,0x4
c0016588:	50                   	push   eax
c0016589:	6a 00                	push   0x0
c001658b:	52                   	push   edx
c001658c:	e8 33 a1 fe ff       	call   c00006c4 <memset>
c0016591:	83 c4 10             	add    esp,0x10
c0016594:	90                   	nop
c0016595:	c9                   	leave  
c0016596:	c3                   	ret    

c0016597 <readKeyboard(VgaText*, char*, unsigned long)>:
c0016597:	55                   	push   ebp
c0016598:	89 e5                	mov    ebp,esp
c001659a:	83 ec 18             	sub    esp,0x18
c001659d:	fb                   	sti    
c001659e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00165a5:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00165a9:	0f 84 8a 00 00 00    	je     c0016639 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c00165af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00165b2:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00165b8:	84 c0                	test   al,al
c00165ba:	75 11                	jne    c00165cd <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c00165bc:	e8 e5 7a 00 00       	call   c001e0a6 <lockScheduler()>
c00165c1:	e8 4b 7b 00 00       	call   c001e111 <schedule()>
c00165c6:	e8 dd 7a 00 00       	call   c001e0a8 <unlockScheduler()>
c00165cb:	eb e2                	jmp    c00165af <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c00165cd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00165d0:	8d 50 01             	lea    edx,[eax+0x1]
c00165d3:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00165d6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00165d9:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c00165df:	88 10                	mov    BYTE PTR [eax],dl
c00165e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00165e4:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00165ea:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00165ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00165f0:	05 34 11 00 00       	add    eax,0x1134
c00165f5:	83 ec 0c             	sub    esp,0xc
c00165f8:	50                   	push   eax
c00165f9:	e8 e3 a0 fe ff       	call   c00006e1 <strlen>
c00165fe:	83 c4 10             	add    esp,0x10
c0016601:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016604:	81 c2 34 11 00 00    	add    edx,0x1134
c001660a:	8d 4a 01             	lea    ecx,[edx+0x1]
c001660d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016610:	81 c2 34 11 00 00    	add    edx,0x1134
c0016616:	83 ec 04             	sub    esp,0x4
c0016619:	50                   	push   eax
c001661a:	51                   	push   ecx
c001661b:	52                   	push   edx
c001661c:	e8 47 a0 fe ff       	call   c0000668 <memmove>
c0016621:	83 c4 10             	add    esp,0x10
c0016624:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0016627:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001662a:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c001662e:	0f 85 71 ff ff ff    	jne    c00165a5 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0016634:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016637:	eb 03                	jmp    c001663c <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0016639:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001663c:	c9                   	leave  
c001663d:	c3                   	ret    

c001663e <Keyboard::Keyboard(char const*)>:
c001663e:	83 ec 0c             	sub    esp,0xc
c0016641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016645:	83 ec 08             	sub    esp,0x8
c0016648:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001664c:	50                   	push   eax
c001664d:	e8 ca de ff ff       	call   c001451c <Device::Device(char const*)>
c0016652:	83 c4 10             	add    esp,0x10
c0016655:	ba 84 c2 02 c0       	mov    edx,0xc002c284
c001665a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001665e:	89 10                	mov    DWORD PTR [eax],edx
c0016660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016664:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001666e:	c6 05 40 19 03 c0 01 	mov    BYTE PTR ds:0xc0031940,0x1
c0016675:	90                   	nop
c0016676:	83 c4 0c             	add    esp,0xc
c0016679:	c3                   	ret    

c001667a <Keyboard::~Keyboard()>:
c001667a:	83 ec 0c             	sub    esp,0xc
c001667d:	ba 84 c2 02 c0       	mov    edx,0xc002c284
c0016682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016686:	89 10                	mov    DWORD PTR [eax],edx
c0016688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001668c:	83 ec 0c             	sub    esp,0xc
c001668f:	50                   	push   eax
c0016690:	e8 83 df ff ff       	call   c0014618 <Device::~Device()>
c0016695:	83 c4 10             	add    esp,0x10
c0016698:	90                   	nop
c0016699:	83 c4 0c             	add    esp,0xc
c001669c:	c3                   	ret    
c001669d:	90                   	nop

c001669e <Keyboard::~Keyboard()>:
c001669e:	83 ec 0c             	sub    esp,0xc
c00166a1:	83 ec 0c             	sub    esp,0xc
c00166a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00166a8:	e8 cd ff ff ff       	call   c001667a <Keyboard::~Keyboard()>
c00166ad:	83 c4 10             	add    esp,0x10
c00166b0:	83 ec 08             	sub    esp,0x8
c00166b3:	68 5c 01 00 00       	push   0x15c
c00166b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00166bc:	e8 a5 ca ff ff       	call   c0013166 <operator delete(void*, unsigned long)>
c00166c1:	83 c4 10             	add    esp,0x10
c00166c4:	83 c4 0c             	add    esp,0xc
c00166c7:	c3                   	ret    

c00166c8 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00166c8:	53                   	push   ebx
c00166c9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00166cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00166d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00166d5:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00166db:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00166e1:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00166e7:	77 10                	ja     c00166f9 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00166e9:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00166ef:	89 d3                	mov    ebx,edx
c00166f1:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00166f7:	72 05                	jb     c00166fe <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00166f9:	83 c8 ff             	or     eax,0xffffffff
c00166fc:	89 c2                	mov    edx,eax
c00166fe:	5b                   	pop    ebx
c00166ff:	c3                   	ret    

c0016700 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0016700:	56                   	push   esi
c0016701:	83 c8 ff             	or     eax,0xffffffff
c0016704:	53                   	push   ebx
c0016705:	89 c2                	mov    edx,eax
c0016707:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001670b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001670f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016713:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016719:	77 27                	ja     c0016742 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001671b:	89 d8                	mov    eax,ebx
c001671d:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0016723:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016729:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001672e:	89 c2                	mov    edx,eax
c0016730:	73 10                	jae    c0016742 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016732:	89 c8                	mov    eax,ecx
c0016734:	89 da                	mov    edx,ebx
c0016736:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001673c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0016742:	5b                   	pop    ebx
c0016743:	5e                   	pop    esi
c0016744:	c3                   	ret    
c0016745:	90                   	nop

c0016746 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016746:	83 ec 1c             	sub    esp,0x1c
c0016749:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001674d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016751:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016755:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016759:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001675d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016760:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016764:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016768:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001676c:	83 ec 08             	sub    esp,0x8
c001676f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016773:	50                   	push   eax
c0016774:	e8 a3 dd ff ff       	call   c001451c <Device::Device(char const*)>
c0016779:	83 c4 10             	add    esp,0x10
c001677c:	ba d4 c3 02 c0       	mov    edx,0xc002c3d4
c0016781:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016785:	89 10                	mov    DWORD PTR [eax],edx
c0016787:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001678b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016792:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016796:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001679d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167a1:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00167ab:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00167af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00167b3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00167b7:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00167bd:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00167c3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00167c7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00167ca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00167ce:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00167d4:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00167da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167de:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00167e2:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00167e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167ec:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00167f6:	90                   	nop
c00167f7:	83 c4 1c             	add    esp,0x1c
c00167fa:	c3                   	ret    
c00167fb:	90                   	nop

c00167fc <LogicalDisk::~LogicalDisk()>:
c00167fc:	83 ec 0c             	sub    esp,0xc
c00167ff:	ba d4 c3 02 c0       	mov    edx,0xc002c3d4
c0016804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016808:	89 10                	mov    DWORD PTR [eax],edx
c001680a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001680e:	83 ec 0c             	sub    esp,0xc
c0016811:	50                   	push   eax
c0016812:	e8 01 de ff ff       	call   c0014618 <Device::~Device()>
c0016817:	83 c4 10             	add    esp,0x10
c001681a:	90                   	nop
c001681b:	83 c4 0c             	add    esp,0xc
c001681e:	c3                   	ret    
c001681f:	90                   	nop

c0016820 <LogicalDisk::~LogicalDisk()>:
c0016820:	83 ec 0c             	sub    esp,0xc
c0016823:	83 ec 0c             	sub    esp,0xc
c0016826:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001682a:	e8 cd ff ff ff       	call   c00167fc <LogicalDisk::~LogicalDisk()>
c001682f:	83 c4 10             	add    esp,0x10
c0016832:	83 ec 08             	sub    esp,0x8
c0016835:	68 74 01 00 00       	push   0x174
c001683a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001683e:	e8 23 c9 ff ff       	call   c0013166 <operator delete(void*, unsigned long)>
c0016843:	83 c4 10             	add    esp,0x10
c0016846:	83 c4 0c             	add    esp,0xc
c0016849:	c3                   	ret    

c001684a <LogicalDisk::assignDriveLetter()>:
c001684a:	55                   	push   ebp
c001684b:	57                   	push   edi
c001684c:	56                   	push   esi
c001684d:	53                   	push   ebx
c001684e:	83 ec 14             	sub    esp,0x14
c0016851:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016855:	8b 3d c8 19 03 c0    	mov    edi,DWORD PTR ds:0xc00319c8
c001685b:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0016861:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016865:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c001686b:	8b 3d cc 19 03 c0    	mov    edi,DWORD PTR ds:0xc00319cc
c0016871:	3c 01                	cmp    al,0x1
c0016873:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016877:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001687b:	19 c0                	sbb    eax,eax
c001687d:	83 e0 02             	and    eax,0x2
c0016880:	83 c0 41             	add    eax,0x41
c0016883:	0f be e8             	movsx  ebp,al
c0016886:	3c 43                	cmp    al,0x43
c0016888:	75 10                	jne    c001689a <LogicalDisk::assignDriveLetter()+0x50>
c001688a:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0016891:	75 5d                	jne    c00168f0 <LogicalDisk::assignDriveLetter()+0xa6>
c0016893:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016898:	75 56                	jne    c00168f0 <LogicalDisk::assignDriveLetter()+0xa6>
c001689a:	8d 75 bf             	lea    esi,[ebp-0x41]
c001689d:	ba 01 00 00 00       	mov    edx,0x1
c00168a2:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00168a6:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00168aa:	d3 e2                	shl    edx,cl
c00168ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00168b0:	89 d7                	mov    edi,edx
c00168b2:	89 d6                	mov    esi,edx
c00168b4:	c1 ff 1f             	sar    edi,0x1f
c00168b7:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00168bb:	21 f9                	and    ecx,edi
c00168bd:	09 d1                	or     ecx,edx
c00168bf:	75 2f                	jne    c00168f0 <LogicalDisk::assignDriveLetter()+0xa6>
c00168c1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00168c5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00168c9:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00168cf:	09 f2                	or     edx,esi
c00168d1:	89 15 c8 19 03 c0    	mov    DWORD PTR ds:0xc00319c8,edx
c00168d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00168db:	09 fa                	or     edx,edi
c00168dd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00168e1:	89 15 cc 19 03 c0    	mov    DWORD PTR ds:0xc00319cc,edx
c00168e7:	89 1c bd 60 19 03 c0 	mov    DWORD PTR [edi*4-0x3ffce6a0],ebx
c00168ee:	eb 08                	jmp    c00168f8 <LogicalDisk::assignDriveLetter()+0xae>
c00168f0:	45                   	inc    ebp
c00168f1:	40                   	inc    eax
c00168f2:	3c 5b                	cmp    al,0x5b
c00168f4:	75 90                	jne    c0016886 <LogicalDisk::assignDriveLetter()+0x3c>
c00168f6:	31 c0                	xor    eax,eax
c00168f8:	83 c4 14             	add    esp,0x14
c00168fb:	5b                   	pop    ebx
c00168fc:	5e                   	pop    esi
c00168fd:	5f                   	pop    edi
c00168fe:	5d                   	pop    ebp
c00168ff:	c3                   	ret    

c0016900 <LogicalDisk::mount()>:
c0016900:	56                   	push   esi
c0016901:	53                   	push   ebx
c0016902:	51                   	push   ecx
c0016903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016907:	8b 1d 08 15 03 c0    	mov    ebx,DWORD PTR ds:0xc0031508
c001690d:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016917:	85 db                	test   ebx,ebx
c0016919:	74 50                	je     c001696b <LogicalDisk::mount()+0x6b>
c001691b:	e8 71 77 00 00       	call   c001e091 <getIRQNestingLevel()>
c0016920:	52                   	push   edx
c0016921:	52                   	push   edx
c0016922:	50                   	push   eax
c0016923:	68 50 c3 02 c0       	push   0xc002c350
c0016928:	e8 19 c9 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001692d:	83 c4 0c             	add    esp,0xc
c0016930:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016937:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016939:	83 e8 41             	sub    eax,0x41
c001693c:	50                   	push   eax
c001693d:	56                   	push   esi
c001693e:	53                   	push   ebx
c001693f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016942:	83 c4 10             	add    esp,0x10
c0016945:	84 c0                	test   al,al
c0016947:	74 08                	je     c0016951 <LogicalDisk::mount()+0x51>
c0016949:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001694f:	eb 1c                	jmp    c001696d <LogicalDisk::mount()+0x6d>
c0016951:	e8 3b 77 00 00       	call   c001e091 <getIRQNestingLevel()>
c0016956:	51                   	push   ecx
c0016957:	51                   	push   ecx
c0016958:	50                   	push   eax
c0016959:	68 6b c3 02 c0       	push   0xc002c36b
c001695e:	e8 e3 c8 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0016963:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016966:	83 c4 10             	add    esp,0x10
c0016969:	eb ac                	jmp    c0016917 <LogicalDisk::mount()+0x17>
c001696b:	31 c0                	xor    eax,eax
c001696d:	5a                   	pop    edx
c001696e:	5b                   	pop    ebx
c001696f:	5e                   	pop    esi
c0016970:	c3                   	ret    
c0016971:	90                   	nop

c0016972 <LogicalDisk::unmount()>:
c0016972:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016976:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016980:	c3                   	ret    
c0016981:	90                   	nop

c0016982 <LogicalDisk::open(int, int, void*)>:
c0016982:	83 ec 18             	sub    esp,0x18
c0016985:	68 86 c3 02 c0       	push   0xc002c386
c001698a:	e8 6c 3e 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c001698f:	83 c8 ff             	or     eax,0xffffffff
c0016992:	83 c4 1c             	add    esp,0x1c
c0016995:	c3                   	ret    

c0016996 <LogicalDisk::eject()>:
c0016996:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001699a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00169a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00169a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00169a6:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00169a9:	90                   	nop

c00169aa <LogicalDisk::close(int, int, void*)>:
c00169aa:	83 c8 ff             	or     eax,0xffffffff
c00169ad:	c3                   	ret    

c00169ae <LogicalDisk::unassignDriveLetter()>:
c00169ae:	57                   	push   edi
c00169af:	56                   	push   esi
c00169b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00169b4:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00169bb:	84 c9                	test   cl,cl
c00169bd:	75 0f                	jne    c00169ce <LogicalDisk::unassignDriveLetter()+0x20>
c00169bf:	c7 44 24 0c aa c3 02 c0 	mov    DWORD PTR [esp+0xc],0xc002c3aa
c00169c7:	5e                   	pop    esi
c00169c8:	5f                   	pop    edi
c00169c9:	e9 2d 3e 00 00       	jmp    c001a7fb <Krnl::panic(char const*)>
c00169ce:	83 e9 41             	sub    ecx,0x41
c00169d1:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00169d8:	b8 01 00 00 00       	mov    eax,0x1
c00169dd:	c7 04 8d 60 19 03 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffce6a0],0x0
c00169e8:	d3 e0                	shl    eax,cl
c00169ea:	89 c7                	mov    edi,eax
c00169ec:	f7 d0                	not    eax
c00169ee:	c1 ff 1f             	sar    edi,0x1f
c00169f1:	21 05 c8 19 03 c0    	and    DWORD PTR ds:0xc00319c8,eax
c00169f7:	89 fe                	mov    esi,edi
c00169f9:	f7 d6                	not    esi
c00169fb:	21 35 cc 19 03 c0    	and    DWORD PTR ds:0xc00319cc,esi
c0016a01:	5e                   	pop    esi
c0016a02:	5f                   	pop    edi
c0016a03:	c3                   	ret    

c0016a04 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016a04:	57                   	push   edi
c0016a05:	56                   	push   esi
c0016a06:	53                   	push   ebx
c0016a07:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016a0b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016a0f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016a13:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016a17:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016a1d:	77 41                	ja     c0016a60 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016a1f:	99                   	cdq    
c0016a20:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016a26:	01 c8                	add    eax,ecx
c0016a28:	11 da                	adc    edx,ebx
c0016a2a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016a30:	19 d7                	sbb    edi,edx
c0016a32:	72 33                	jb     c0016a67 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016a34:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016a3a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016a40:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016a44:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016a48:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016a4e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016a54:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016a58:	5b                   	pop    ebx
c0016a59:	5e                   	pop    esi
c0016a5a:	5f                   	pop    edi
c0016a5b:	e9 b0 0a 00 00       	jmp    c0017510 <VCache::read(unsigned long long, int, void*)>
c0016a60:	b8 05 00 00 00       	mov    eax,0x5
c0016a65:	eb 05                	jmp    c0016a6c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016a67:	b8 07 00 00 00       	mov    eax,0x7
c0016a6c:	5b                   	pop    ebx
c0016a6d:	5e                   	pop    esi
c0016a6e:	5f                   	pop    edi
c0016a6f:	c3                   	ret    

c0016a70 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016a70:	57                   	push   edi
c0016a71:	56                   	push   esi
c0016a72:	53                   	push   ebx
c0016a73:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016a77:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016a7b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016a7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016a83:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016a89:	77 41                	ja     c0016acc <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016a8b:	99                   	cdq    
c0016a8c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016a92:	01 c8                	add    eax,ecx
c0016a94:	11 da                	adc    edx,ebx
c0016a96:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016a9c:	19 d7                	sbb    edi,edx
c0016a9e:	72 33                	jb     c0016ad3 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016aa0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016aa6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016aac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016ab0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016ab4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016aba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016ac0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016ac4:	5b                   	pop    ebx
c0016ac5:	5e                   	pop    esi
c0016ac6:	5f                   	pop    edi
c0016ac7:	e9 4e 09 00 00       	jmp    c001741a <VCache::write(unsigned long long, int, void*)>
c0016acc:	b8 05 00 00 00       	mov    eax,0x5
c0016ad1:	eb 05                	jmp    c0016ad8 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016ad3:	b8 07 00 00 00       	mov    eax,0x7
c0016ad8:	5b                   	pop    ebx
c0016ad9:	5e                   	pop    esi
c0016ada:	5f                   	pop    edi
c0016adb:	c3                   	ret    

c0016adc <Mouse::Mouse(char const*)>:
c0016adc:	83 ec 0c             	sub    esp,0xc
c0016adf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ae3:	83 ec 08             	sub    esp,0x8
c0016ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016aea:	50                   	push   eax
c0016aeb:	e8 2c da ff ff       	call   c001451c <Device::Device(char const*)>
c0016af0:	83 c4 10             	add    esp,0x10
c0016af3:	ba a0 c4 02 c0       	mov    edx,0xc002c4a0
c0016af8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016afc:	89 10                	mov    DWORD PTR [eax],edx
c0016afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b02:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016b0c:	90                   	nop
c0016b0d:	83 c4 0c             	add    esp,0xc
c0016b10:	c3                   	ret    
c0016b11:	90                   	nop

c0016b12 <Mouse::~Mouse()>:
c0016b12:	83 ec 0c             	sub    esp,0xc
c0016b15:	ba a0 c4 02 c0       	mov    edx,0xc002c4a0
c0016b1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b1e:	89 10                	mov    DWORD PTR [eax],edx
c0016b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b24:	83 ec 0c             	sub    esp,0xc
c0016b27:	50                   	push   eax
c0016b28:	e8 eb da ff ff       	call   c0014618 <Device::~Device()>
c0016b2d:	83 c4 10             	add    esp,0x10
c0016b30:	90                   	nop
c0016b31:	83 c4 0c             	add    esp,0xc
c0016b34:	c3                   	ret    
c0016b35:	90                   	nop

c0016b36 <Mouse::~Mouse()>:
c0016b36:	83 ec 0c             	sub    esp,0xc
c0016b39:	83 ec 0c             	sub    esp,0xc
c0016b3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b40:	e8 cd ff ff ff       	call   c0016b12 <Mouse::~Mouse()>
c0016b45:	83 c4 10             	add    esp,0x10
c0016b48:	83 ec 08             	sub    esp,0x8
c0016b4b:	68 58 01 00 00       	push   0x158
c0016b50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b54:	e8 0d c6 ff ff       	call   c0013166 <operator delete(void*, unsigned long)>
c0016b59:	83 c4 10             	add    esp,0x10
c0016b5c:	83 c4 0c             	add    esp,0xc
c0016b5f:	c3                   	ret    

c0016b60 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016b60:	55                   	push   ebp
c0016b61:	57                   	push   edi
c0016b62:	56                   	push   esi
c0016b63:	53                   	push   ebx
c0016b64:	81 ec 28 01 00 00    	sub    esp,0x128
c0016b6a:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016b71:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016b78:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016b7f:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016b86:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016b8a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016b8e:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016b95:	e8 9c dd ff ff       	call   c0014936 <Device::getName()>
c0016b9a:	5a                   	pop    edx
c0016b9b:	59                   	pop    ecx
c0016b9c:	50                   	push   eax
c0016b9d:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016ba1:	55                   	push   ebp
c0016ba2:	e8 bc 9b fe ff       	call   c0000763 <strcpy>
c0016ba7:	5b                   	pop    ebx
c0016ba8:	58                   	pop    eax
c0016ba9:	68 64 c5 02 c0       	push   0xc002c564
c0016bae:	55                   	push   ebp
c0016baf:	e8 66 9c fe ff       	call   c000081a <strcat>
c0016bb4:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016bbb:	e8 9c 93 ff ff       	call   c000ff5c <malloc>
c0016bc0:	83 c4 0c             	add    esp,0xc
c0016bc3:	89 c3                	mov    ebx,eax
c0016bc5:	57                   	push   edi
c0016bc6:	56                   	push   esi
c0016bc7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016bcb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016bcf:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016bd6:	55                   	push   ebp
c0016bd7:	50                   	push   eax
c0016bd8:	e8 69 fb ff ff       	call   c0016746 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016bdd:	83 c4 14             	add    esp,0x14
c0016be0:	53                   	push   ebx
c0016be1:	e8 64 fc ff ff       	call   c001684a <LogicalDisk::assignDriveLetter()>
c0016be6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016be9:	89 c6                	mov    esi,eax
c0016beb:	e8 10 fd ff ff       	call   c0016900 <LogicalDisk::mount()>
c0016bf0:	58                   	pop    eax
c0016bf1:	5a                   	pop    edx
c0016bf2:	53                   	push   ebx
c0016bf3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016bfa:	e8 47 db ff ff       	call   c0014746 <Device::addChild(Device*)>
c0016bff:	59                   	pop    ecx
c0016c00:	89 f0                	mov    eax,esi
c0016c02:	5b                   	pop    ebx
c0016c03:	0f be f0             	movsx  esi,al
c0016c06:	56                   	push   esi
c0016c07:	68 6f c5 02 c0       	push   0xc002c56f
c0016c0c:	e8 35 c6 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0016c11:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016c17:	5b                   	pop    ebx
c0016c18:	5e                   	pop    esi
c0016c19:	5f                   	pop    edi
c0016c1a:	5d                   	pop    ebp
c0016c1b:	c3                   	ret    

c0016c1c <createPartitionsForDisk(PhysicalDisk*)>:
c0016c1c:	55                   	push   ebp
c0016c1d:	57                   	push   edi
c0016c1e:	56                   	push   esi
c0016c1f:	53                   	push   ebx
c0016c20:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016c26:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016c2d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016c33:	3d 00 02 00 00       	cmp    eax,0x200
c0016c38:	74 27                	je     c0016c61 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016c3a:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016c40:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016c46:	83 ec 10             	sub    esp,0x10
c0016c49:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016c4d:	99                   	cdq    
c0016c4e:	c1 e6 0a             	shl    esi,0xa
c0016c51:	52                   	push   edx
c0016c52:	89 fd                	mov    ebp,edi
c0016c54:	50                   	push   eax
c0016c55:	55                   	push   ebp
c0016c56:	56                   	push   esi
c0016c57:	e8 80 fe 00 00       	call   c0026adc <__udivdi3>
c0016c5c:	e9 b1 00 00 00       	jmp    c0016d12 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016c61:	83 ec 0c             	sub    esp,0xc
c0016c64:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c66:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016c6a:	56                   	push   esi
c0016c6b:	6a 01                	push   0x1
c0016c6d:	6a 00                	push   0x0
c0016c6f:	6a 00                	push   0x0
c0016c71:	53                   	push   ebx
c0016c72:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016c75:	83 c4 20             	add    esp,0x20
c0016c78:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016c80:	75 0a                	jne    c0016c8c <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016c82:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016c8a:	74 2c                	je     c0016cb8 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016c8c:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016c92:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016c98:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016c9e:	83 ec 10             	sub    esp,0x10
c0016ca1:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016ca5:	89 f7                	mov    edi,esi
c0016ca7:	c1 e0 0a             	shl    eax,0xa
c0016caa:	c1 ff 1f             	sar    edi,0x1f
c0016cad:	57                   	push   edi
c0016cae:	56                   	push   esi
c0016caf:	52                   	push   edx
c0016cb0:	50                   	push   eax
c0016cb1:	e8 26 fe 00 00       	call   c0026adc <__udivdi3>
c0016cb6:	eb 5a                	jmp    c0016d12 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016cb8:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016cbf:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016cc6:	83 e1 7f             	and    ecx,0x7f
c0016cc9:	83 e0 7f             	and    eax,0x7f
c0016ccc:	01 c1                	add    ecx,eax
c0016cce:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016cd5:	83 e0 7f             	and    eax,0x7f
c0016cd8:	01 c1                	add    ecx,eax
c0016cda:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016ce1:	83 e0 7f             	and    eax,0x7f
c0016ce4:	00 c1                	add    cl,al
c0016ce6:	74 41                	je     c0016d29 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016ce8:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016cee:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016cf4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016cfa:	83 ec 10             	sub    esp,0x10
c0016cfd:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016d01:	89 f7                	mov    edi,esi
c0016d03:	c1 e0 0a             	shl    eax,0xa
c0016d06:	c1 ff 1f             	sar    edi,0x1f
c0016d09:	57                   	push   edi
c0016d0a:	56                   	push   esi
c0016d0b:	52                   	push   edx
c0016d0c:	50                   	push   eax
c0016d0d:	e8 ca fd 00 00       	call   c0026adc <__udivdi3>
c0016d12:	83 c4 14             	add    esp,0x14
c0016d15:	52                   	push   edx
c0016d16:	50                   	push   eax
c0016d17:	6a 00                	push   0x0
c0016d19:	6a 00                	push   0x0
c0016d1b:	53                   	push   ebx
c0016d1c:	e8 3f fe ff ff       	call   c0016b60 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016d21:	83 c4 20             	add    esp,0x20
c0016d24:	e9 79 01 00 00       	jmp    c0016ea2 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016d29:	89 f0                	mov    eax,esi
c0016d2b:	31 f6                	xor    esi,esi
c0016d2d:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016d34:	75 02                	jne    c0016d38 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016d36:	89 f1                	mov    ecx,esi
c0016d38:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016d3f:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016d46:	c1 e2 08             	shl    edx,0x8
c0016d49:	c1 e7 10             	shl    edi,0x10
c0016d4c:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016d54:	09 fa                	or     edx,edi
c0016d56:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016d5e:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016d65:	83 c0 10             	add    eax,0x10
c0016d68:	09 fa                	or     edx,edi
c0016d6a:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016d71:	c1 e7 18             	shl    edi,0x18
c0016d74:	09 fa                	or     edx,edi
c0016d76:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016d7d:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016d81:	c1 e7 10             	shl    edi,0x10
c0016d84:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016d8b:	c1 e2 08             	shl    edx,0x8
c0016d8e:	09 fa                	or     edx,edi
c0016d90:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016d97:	09 fa                	or     edx,edi
c0016d99:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016da0:	c1 e7 18             	shl    edi,0x18
c0016da3:	09 fa                	or     edx,edi
c0016da5:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016da9:	46                   	inc    esi
c0016daa:	83 fe 04             	cmp    esi,0x4
c0016dad:	0f 85 7a ff ff ff    	jne    c0016d2d <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016db3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016db7:	83 f0 01             	xor    eax,0x1
c0016dba:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016dbe:	75 57                	jne    c0016e17 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016dc0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016dc4:	83 f0 01             	xor    eax,0x1
c0016dc7:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016dcb:	75 4a                	jne    c0016e17 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016dcd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016dd1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016dd9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016de1:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016de7:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016ded:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016df3:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016df7:	89 f7                	mov    edi,esi
c0016df9:	c1 e0 0a             	shl    eax,0xa
c0016dfc:	c1 ff 1f             	sar    edi,0x1f
c0016dff:	57                   	push   edi
c0016e00:	56                   	push   esi
c0016e01:	52                   	push   edx
c0016e02:	50                   	push   eax
c0016e03:	e8 d4 fc 00 00       	call   c0026adc <__udivdi3>
c0016e08:	83 c4 10             	add    esp,0x10
c0016e0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016e0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016e13:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016e17:	84 c9                	test   cl,cl
c0016e19:	74 53                	je     c0016e6e <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016e1b:	0f b6 c9             	movzx  ecx,cl
c0016e1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e22:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016e26:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016e2a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016e2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016e32:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016e36:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016e3a:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016e3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016e42:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016e46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e4a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016e4e:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016e52:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016e56:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016e5a:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016e5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016e62:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016e66:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016e6a:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016e6e:	31 ed                	xor    ebp,ebp
c0016e70:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016e74:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016e78:	89 f8                	mov    eax,edi
c0016e7a:	09 f0                	or     eax,esi
c0016e7c:	74 1e                	je     c0016e9c <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016e7e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016e82:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016e86:	89 d1                	mov    ecx,edx
c0016e88:	09 c1                	or     ecx,eax
c0016e8a:	74 10                	je     c0016e9c <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016e8c:	83 ec 0c             	sub    esp,0xc
c0016e8f:	57                   	push   edi
c0016e90:	56                   	push   esi
c0016e91:	52                   	push   edx
c0016e92:	50                   	push   eax
c0016e93:	53                   	push   ebx
c0016e94:	e8 c7 fc ff ff       	call   c0016b60 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016e99:	83 c4 20             	add    esp,0x20
c0016e9c:	45                   	inc    ebp
c0016e9d:	83 fd 04             	cmp    ebp,0x4
c0016ea0:	75 ce                	jne    c0016e70 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016ea2:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016ea8:	5b                   	pop    ebx
c0016ea9:	5e                   	pop    esi
c0016eaa:	5f                   	pop    edi
c0016eab:	5d                   	pop    ebp
c0016eac:	c3                   	ret    
c0016ead:	90                   	nop

c0016eae <Serial::Serial(char const*)>:
c0016eae:	83 ec 0c             	sub    esp,0xc
c0016eb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016eb5:	83 ec 08             	sub    esp,0x8
c0016eb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ebc:	50                   	push   eax
c0016ebd:	e8 5a d6 ff ff       	call   c001451c <Device::Device(char const*)>
c0016ec2:	83 c4 10             	add    esp,0x10
c0016ec5:	ba 3c c6 02 c0       	mov    edx,0xc002c63c
c0016eca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ece:	89 10                	mov    DWORD PTR [eax],edx
c0016ed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ed4:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016ede:	90                   	nop
c0016edf:	83 c4 0c             	add    esp,0xc
c0016ee2:	c3                   	ret    
c0016ee3:	90                   	nop

c0016ee4 <Serial::~Serial()>:
c0016ee4:	83 ec 0c             	sub    esp,0xc
c0016ee7:	ba 3c c6 02 c0       	mov    edx,0xc002c63c
c0016eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ef0:	89 10                	mov    DWORD PTR [eax],edx
c0016ef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ef6:	83 ec 0c             	sub    esp,0xc
c0016ef9:	50                   	push   eax
c0016efa:	e8 19 d7 ff ff       	call   c0014618 <Device::~Device()>
c0016eff:	83 c4 10             	add    esp,0x10
c0016f02:	90                   	nop
c0016f03:	83 c4 0c             	add    esp,0xc
c0016f06:	c3                   	ret    
c0016f07:	90                   	nop

c0016f08 <Serial::~Serial()>:
c0016f08:	83 ec 0c             	sub    esp,0xc
c0016f0b:	83 ec 0c             	sub    esp,0xc
c0016f0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f12:	e8 cd ff ff ff       	call   c0016ee4 <Serial::~Serial()>
c0016f17:	83 c4 10             	add    esp,0x10
c0016f1a:	83 ec 08             	sub    esp,0x8
c0016f1d:	68 58 01 00 00       	push   0x158
c0016f22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f26:	e8 3b c2 ff ff       	call   c0013166 <operator delete(void*, unsigned long)>
c0016f2b:	83 c4 10             	add    esp,0x10
c0016f2e:	83 c4 0c             	add    esp,0xc
c0016f31:	c3                   	ret    

c0016f32 <Timer::Timer(char const*)>:
c0016f32:	83 ec 0c             	sub    esp,0xc
c0016f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f39:	83 ec 08             	sub    esp,0x8
c0016f3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f40:	50                   	push   eax
c0016f41:	e8 d6 d5 ff ff       	call   c001451c <Device::Device(char const*)>
c0016f46:	83 c4 10             	add    esp,0x10
c0016f49:	ba 20 c7 02 c0       	mov    edx,0xc002c720
c0016f4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f52:	89 10                	mov    DWORD PTR [eax],edx
c0016f54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f58:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016f62:	90                   	nop
c0016f63:	83 c4 0c             	add    esp,0xc
c0016f66:	c3                   	ret    
c0016f67:	90                   	nop

c0016f68 <Timer::~Timer()>:
c0016f68:	83 ec 0c             	sub    esp,0xc
c0016f6b:	ba 20 c7 02 c0       	mov    edx,0xc002c720
c0016f70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f74:	89 10                	mov    DWORD PTR [eax],edx
c0016f76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f7a:	83 ec 0c             	sub    esp,0xc
c0016f7d:	50                   	push   eax
c0016f7e:	e8 95 d6 ff ff       	call   c0014618 <Device::~Device()>
c0016f83:	83 c4 10             	add    esp,0x10
c0016f86:	90                   	nop
c0016f87:	83 c4 0c             	add    esp,0xc
c0016f8a:	c3                   	ret    
c0016f8b:	90                   	nop

c0016f8c <Timer::~Timer()>:
c0016f8c:	83 ec 0c             	sub    esp,0xc
c0016f8f:	83 ec 0c             	sub    esp,0xc
c0016f92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f96:	e8 cd ff ff ff       	call   c0016f68 <Timer::~Timer()>
c0016f9b:	83 c4 10             	add    esp,0x10
c0016f9e:	83 ec 08             	sub    esp,0x8
c0016fa1:	68 5c 01 00 00       	push   0x15c
c0016fa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016faa:	e8 b7 c1 ff ff       	call   c0013166 <operator delete(void*, unsigned long)>
c0016faf:	83 c4 10             	add    esp,0x10
c0016fb2:	83 c4 0c             	add    esp,0xc
c0016fb5:	c3                   	ret    

c0016fb6 <Timer::read()>:
c0016fb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016fba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016fc0:	c3                   	ret    

c0016fc1 <setupTimer(int)>:
c0016fc1:	57                   	push   edi
c0016fc2:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0016fc7:	56                   	push   esi
c0016fc8:	53                   	push   ebx
c0016fc9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016fcd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016fd3:	83 ec 0c             	sub    esp,0xc
c0016fd6:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016fdc:	e8 55 d9 ff ff       	call   c0014936 <Device::getName()>
c0016fe1:	83 c4 10             	add    esp,0x10
c0016fe4:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016fe7:	0f 85 8d 00 00 00    	jne    c001707a <setupTimer(int)+0xb9>
c0016fed:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0016ff2:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016ff9:	74 7f                	je     c001707a <setupTimer(int)+0xb9>
c0016ffb:	83 ec 0c             	sub    esp,0xc
c0016ffe:	68 5c 01 00 00       	push   0x15c
c0017003:	e8 54 8f ff ff       	call   c000ff5c <malloc>
c0017008:	89 04 24             	mov    DWORD PTR [esp],eax
c001700b:	89 c3                	mov    ebx,eax
c001700d:	e8 a6 f5 00 00       	call   c00265b8 <PIT::PIT()>
c0017012:	59                   	pop    ecx
c0017013:	5f                   	pop    edi
c0017014:	53                   	push   ebx
c0017015:	ff 35 90 13 03 c0    	push   DWORD PTR ds:0xc0031390
c001701b:	e8 26 d7 ff ff       	call   c0014746 <Device::addChild(Device*)>
c0017020:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017022:	6a 00                	push   0x0
c0017024:	6a 00                	push   0x0
c0017026:	56                   	push   esi
c0017027:	53                   	push   ebx
c0017028:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001702b:	83 c4 14             	add    esp,0x14
c001702e:	68 60 01 00 00       	push   0x160
c0017033:	e8 24 8f ff ff       	call   c000ff5c <malloc>
c0017038:	89 04 24             	mov    DWORD PTR [esp],eax
c001703b:	89 c7                	mov    edi,eax
c001703d:	e8 1a f3 00 00       	call   c002635c <APICTimer::APICTimer()>
c0017042:	6a 00                	push   0x0
c0017044:	6a 00                	push   0x0
c0017046:	56                   	push   esi
c0017047:	57                   	push   edi
c0017048:	e8 37 f3 00 00       	call   c0026384 <APICTimer::open(int, int, void*)>
c001704d:	83 c4 20             	add    esp,0x20
c0017050:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017052:	6a 00                	push   0x0
c0017054:	6a 00                	push   0x0
c0017056:	6a 00                	push   0x0
c0017058:	53                   	push   ebx
c0017059:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001705c:	58                   	pop    eax
c001705d:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0017062:	5a                   	pop    edx
c0017063:	57                   	push   edi
c0017064:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001706a:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0017070:	e8 d1 d6 ff ff       	call   c0014746 <Device::addChild(Device*)>
c0017075:	83 c4 10             	add    esp,0x10
c0017078:	eb 33                	jmp    c00170ad <setupTimer(int)+0xec>
c001707a:	83 ec 0c             	sub    esp,0xc
c001707d:	68 5c 01 00 00       	push   0x15c
c0017082:	e8 d5 8e ff ff       	call   c000ff5c <malloc>
c0017087:	89 04 24             	mov    DWORD PTR [esp],eax
c001708a:	89 c3                	mov    ebx,eax
c001708c:	e8 27 f5 00 00       	call   c00265b8 <PIT::PIT()>
c0017091:	58                   	pop    eax
c0017092:	5a                   	pop    edx
c0017093:	53                   	push   ebx
c0017094:	ff 35 90 13 03 c0    	push   DWORD PTR ds:0xc0031390
c001709a:	e8 a7 d6 ff ff       	call   c0014746 <Device::addChild(Device*)>
c001709f:	8b 03                	mov    eax,DWORD PTR [ebx]
c00170a1:	6a 00                	push   0x0
c00170a3:	6a 00                	push   0x0
c00170a5:	56                   	push   esi
c00170a6:	53                   	push   ebx
c00170a7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00170aa:	83 c4 20             	add    esp,0x20
c00170ad:	89 d8                	mov    eax,ebx
c00170af:	5b                   	pop    ebx
c00170b0:	5e                   	pop    esi
c00170b1:	5f                   	pop    edi
c00170b2:	c3                   	ret    

c00170b3 <timerHandler(unsigned long long)>:
c00170b3:	55                   	push   ebp
c00170b4:	57                   	push   edi
c00170b5:	56                   	push   esi
c00170b6:	53                   	push   ebx
c00170b7:	83 ec 0c             	sub    esp,0xc
c00170ba:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00170be:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00170c2:	01 35 d8 19 03 c0    	add    DWORD PTR ds:0xc00319d8,esi
c00170c8:	11 3d dc 19 03 c0    	adc    DWORD PTR ds:0xc00319dc,edi
c00170ce:	80 3d 8c 13 03 c0 00 	cmp    BYTE PTR ds:0xc003138c,0x0
c00170d5:	0f 84 07 01 00 00    	je     c00171e2 <timerHandler(unsigned long long)+0x12f>
c00170db:	e8 ca 6f 00 00       	call   c001e0aa <lockStuff()>
c00170e0:	83 ec 0c             	sub    esp,0xc
c00170e3:	68 58 48 03 c0       	push   0xc0034858
c00170e8:	e8 61 1a 01 00       	call   c0028b4e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00170ed:	c7 04 24 58 48 03 c0 	mov    DWORD PTR [esp],0xc0034858
c00170f4:	89 c3                	mov    ebx,eax
c00170f6:	e8 5b 1a 01 00       	call   c0028b56 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00170fb:	83 c4 10             	add    esp,0x10
c00170fe:	84 c0                	test   al,al
c0017100:	74 60                	je     c0017162 <timerHandler(unsigned long long)+0xaf>
c0017102:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017108:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c001710b:	85 c0                	test   eax,eax
c001710d:	0f 85 91 00 00 00    	jne    c00171a4 <timerHandler(unsigned long long)+0xf1>
c0017113:	e9 be 00 00 00       	jmp    c00171d6 <timerHandler(unsigned long long)+0x123>
c0017118:	83 ec 0c             	sub    esp,0xc
c001711b:	55                   	push   ebp
c001711c:	e8 db 75 00 00       	call   c001e6fc <unblockTask(ThreadControlBlock*)>
c0017121:	83 c4 10             	add    esp,0x10
c0017124:	39 eb                	cmp    ebx,ebp
c0017126:	75 12                	jne    c001713a <timerHandler(unsigned long long)+0x87>
c0017128:	83 ec 0c             	sub    esp,0xc
c001712b:	68 58 48 03 c0       	push   0xc0034858
c0017130:	e8 19 1a 01 00       	call   c0028b4e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017135:	89 c3                	mov    ebx,eax
c0017137:	83 c4 10             	add    esp,0x10
c001713a:	83 ec 0c             	sub    esp,0xc
c001713d:	68 58 48 03 c0       	push   0xc0034858
c0017142:	e8 0f 1a 01 00       	call   c0028b56 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017147:	83 c4 10             	add    esp,0x10
c001714a:	84 c0                	test   al,al
c001714c:	75 b4                	jne    c0017102 <timerHandler(unsigned long long)+0x4f>
c001714e:	83 ec 0c             	sub    esp,0xc
c0017151:	68 58 48 03 c0       	push   0xc0034858
c0017156:	e8 f3 19 01 00       	call   c0028b4e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001715b:	83 c4 10             	add    esp,0x10
c001715e:	39 d8                	cmp    eax,ebx
c0017160:	74 a0                	je     c0017102 <timerHandler(unsigned long long)+0x4f>
c0017162:	83 ec 0c             	sub    esp,0xc
c0017165:	68 58 48 03 c0       	push   0xc0034858
c001716a:	e8 df 19 01 00       	call   c0028b4e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001716f:	c7 04 24 58 48 03 c0 	mov    DWORD PTR [esp],0xc0034858
c0017176:	89 c5                	mov    ebp,eax
c0017178:	e8 f5 19 01 00       	call   c0028b72 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001717d:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0017180:	83 c4 10             	add    esp,0x10
c0017183:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0017186:	39 15 d8 19 03 c0    	cmp    DWORD PTR ds:0xc00319d8,edx
c001718c:	a1 dc 19 03 c0       	mov    eax,ds:0xc00319dc
c0017191:	19 c8                	sbb    eax,ecx
c0017193:	73 83                	jae    c0017118 <timerHandler(unsigned long long)+0x65>
c0017195:	50                   	push   eax
c0017196:	50                   	push   eax
c0017197:	55                   	push   ebp
c0017198:	68 58 48 03 c0       	push   0xc0034858
c001719d:	e8 7e 1a 01 00       	call   c0028c20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00171a2:	eb 93                	jmp    c0017137 <timerHandler(unsigned long long)+0x84>
c00171a4:	80 3d 8d 13 03 c0 00 	cmp    BYTE PTR ds:0xc003138d,0x0
c00171ab:	74 29                	je     c00171d6 <timerHandler(unsigned long long)+0x123>
c00171ad:	39 c6                	cmp    esi,eax
c00171af:	bb 00 00 00 00       	mov    ebx,0x0
c00171b4:	19 df                	sbb    edi,ebx
c00171b6:	72 19                	jb     c00171d1 <timerHandler(unsigned long long)+0x11e>
c00171b8:	e8 e9 6e 00 00       	call   c001e0a6 <lockScheduler()>
c00171bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00171c2:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00171c5:	e8 47 6f 00 00       	call   c001e111 <schedule()>
c00171ca:	e8 d9 6e 00 00       	call   c001e0a8 <unlockScheduler()>
c00171cf:	eb 05                	jmp    c00171d6 <timerHandler(unsigned long long)+0x123>
c00171d1:	29 f0                	sub    eax,esi
c00171d3:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c00171d6:	83 c4 0c             	add    esp,0xc
c00171d9:	5b                   	pop    ebx
c00171da:	5e                   	pop    esi
c00171db:	5f                   	pop    edi
c00171dc:	5d                   	pop    ebp
c00171dd:	e9 d4 6e 00 00       	jmp    c001e0b6 <unlockStuff()>
c00171e2:	83 c4 0c             	add    esp,0xc
c00171e5:	5b                   	pop    ebx
c00171e6:	5e                   	pop    esi
c00171e7:	5f                   	pop    edi
c00171e8:	5d                   	pop    ebp
c00171e9:	c3                   	ret    

c00171ea <VCache::VCache(PhysicalDisk*)>:
c00171ea:	53                   	push   ebx
c00171eb:	83 ec 18             	sub    esp,0x18
c00171ee:	ba dc c8 02 c0       	mov    edx,0xc002c8dc
c00171f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171f7:	89 10                	mov    DWORD PTR [eax],edx
c00171f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171fd:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0017204:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017208:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001720f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017213:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001721a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017221:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017225:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001722c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0017233:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017237:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001723e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017242:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017246:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001724a:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0017251:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0017258:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001725c:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017260:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0017268:	83 ec 0c             	sub    esp,0xc
c001726b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001726f:	e8 e8 8c ff ff       	call   c000ff5c <malloc>
c0017274:	83 c4 10             	add    esp,0x10
c0017277:	89 c3                	mov    ebx,eax
c0017279:	83 ec 0c             	sub    esp,0xc
c001727c:	53                   	push   ebx
c001727d:	e8 10 77 00 00       	call   c001e992 <Mutex::Mutex()>
c0017282:	83 c4 10             	add    esp,0x10
c0017285:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017289:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001728c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017290:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017294:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0017297:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001729b:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00172a2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00172a6:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00172ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172b0:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00172b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00172b7:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00172bd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00172c3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00172c7:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00172ca:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00172cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172d1:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00172d5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00172d9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00172df:	c1 e0 03             	shl    eax,0x3
c00172e2:	83 ec 0c             	sub    esp,0xc
c00172e5:	50                   	push   eax
c00172e6:	e8 71 8c ff ff       	call   c000ff5c <malloc>
c00172eb:	83 c4 10             	add    esp,0x10
c00172ee:	89 c2                	mov    edx,eax
c00172f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172f4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00172f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172fb:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00172ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017303:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017309:	c1 e0 06             	shl    eax,0x6
c001730c:	83 ec 0c             	sub    esp,0xc
c001730f:	50                   	push   eax
c0017310:	e8 47 8c ff ff       	call   c000ff5c <malloc>
c0017315:	83 c4 10             	add    esp,0x10
c0017318:	89 c2                	mov    edx,eax
c001731a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001731e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0017321:	90                   	nop
c0017322:	83 c4 18             	add    esp,0x18
c0017325:	5b                   	pop    ebx
c0017326:	c3                   	ret    
c0017327:	90                   	nop

c0017328 <VCache::~VCache()>:
c0017328:	83 ec 0c             	sub    esp,0xc
c001732b:	ba dc c8 02 c0       	mov    edx,0xc002c8dc
c0017330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017334:	89 10                	mov    DWORD PTR [eax],edx
c0017336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001733a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001733d:	84 c0                	test   al,al
c001733f:	74 0f                	je     c0017350 <VCache::~VCache()+0x28>
c0017341:	83 ec 0c             	sub    esp,0xc
c0017344:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017348:	e8 91 00 00 00       	call   c00173de <VCache::writeWriteBuffer()>
c001734d:	83 c4 10             	add    esp,0x10
c0017350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017354:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0017357:	83 ec 0c             	sub    esp,0xc
c001735a:	50                   	push   eax
c001735b:	e8 0c 8c ff ff       	call   c000ff6c <free>
c0017360:	83 c4 10             	add    esp,0x10
c0017363:	83 ec 0c             	sub    esp,0xc
c0017366:	68 e8 c7 02 c0       	push   0xc002c7e8
c001736b:	e8 d6 be ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0017370:	83 c4 10             	add    esp,0x10
c0017373:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017377:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001737a:	83 ec 0c             	sub    esp,0xc
c001737d:	50                   	push   eax
c001737e:	e8 e9 8b ff ff       	call   c000ff6c <free>
c0017383:	83 c4 10             	add    esp,0x10
c0017386:	83 ec 0c             	sub    esp,0xc
c0017389:	68 02 c8 02 c0       	push   0xc002c802
c001738e:	e8 b3 be ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0017393:	83 c4 10             	add    esp,0x10
c0017396:	90                   	nop
c0017397:	83 c4 0c             	add    esp,0xc
c001739a:	c3                   	ret    
c001739b:	90                   	nop

c001739c <VCache::~VCache()>:
c001739c:	83 ec 0c             	sub    esp,0xc
c001739f:	83 ec 0c             	sub    esp,0xc
c00173a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00173a6:	e8 7d ff ff ff       	call   c0017328 <VCache::~VCache()>
c00173ab:	83 c4 10             	add    esp,0x10
c00173ae:	83 ec 08             	sub    esp,0x8
c00173b1:	6a 40                	push   0x40
c00173b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00173b7:	e8 aa bd ff ff       	call   c0013166 <operator delete(void*, unsigned long)>
c00173bc:	83 c4 10             	add    esp,0x10
c00173bf:	83 c4 0c             	add    esp,0xc
c00173c2:	c3                   	ret    
c00173c3:	90                   	nop

c00173c4 <VCache::invalidateReadBuffer()>:
c00173c4:	83 ec 18             	sub    esp,0x18
c00173c7:	68 1a c8 02 c0       	push   0xc002c81a
c00173cc:	e8 75 be ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00173d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173d5:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00173d9:	83 c4 1c             	add    esp,0x1c
c00173dc:	c3                   	ret    
c00173dd:	90                   	nop

c00173de <VCache::writeWriteBuffer()>:
c00173de:	53                   	push   ebx
c00173df:	83 ec 14             	sub    esp,0x14
c00173e2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00173e6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173e9:	8b 10                	mov    edx,DWORD PTR [eax]
c00173eb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00173ee:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00173f1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00173f4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00173f7:	50                   	push   eax
c00173f8:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00173fb:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0017402:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0017409:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001740d:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0017414:	83 c4 28             	add    esp,0x28
c0017417:	5b                   	pop    ebx
c0017418:	c3                   	ret    
c0017419:	90                   	nop

c001741a <VCache::write(unsigned long long, int, void*)>:
c001741a:	55                   	push   ebp
c001741b:	57                   	push   edi
c001741c:	56                   	push   esi
c001741d:	53                   	push   ebx
c001741e:	83 ec 28             	sub    esp,0x28
c0017421:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017425:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017429:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001742d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017431:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017434:	e8 b9 74 00 00       	call   c001e8f2 <Semaphore::acquire()>
c0017439:	83 c4 10             	add    esp,0x10
c001743c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017440:	74 0c                	je     c001744e <VCache::write(unsigned long long, int, void*)+0x34>
c0017442:	83 ec 0c             	sub    esp,0xc
c0017445:	53                   	push   ebx
c0017446:	e8 79 ff ff ff       	call   c00173c4 <VCache::invalidateReadBuffer()>
c001744b:	83 c4 10             	add    esp,0x10
c001744e:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017452:	74 66                	je     c00174ba <VCache::write(unsigned long long, int, void*)+0xa0>
c0017454:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017457:	99                   	cdq    
c0017458:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001745c:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001745f:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0017462:	89 c1                	mov    ecx,eax
c0017464:	89 d0                	mov    eax,edx
c0017466:	31 f1                	xor    ecx,esi
c0017468:	31 f8                	xor    eax,edi
c001746a:	89 ca                	mov    edx,ecx
c001746c:	09 c2                	or     edx,eax
c001746e:	75 3e                	jne    c00174ae <VCache::write(unsigned long long, int, void*)+0x94>
c0017470:	83 fd 01             	cmp    ebp,0x1
c0017473:	75 39                	jne    c00174ae <VCache::write(unsigned long long, int, void*)+0x94>
c0017475:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017478:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001747e:	51                   	push   ecx
c001747f:	50                   	push   eax
c0017480:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017484:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0017488:	0f af c8             	imul   ecx,eax
c001748b:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c001748e:	51                   	push   ecx
c001748f:	e8 0c 92 fe ff       	call   c00006a0 <memcpy>
c0017494:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017497:	83 c4 10             	add    esp,0x10
c001749a:	40                   	inc    eax
c001749b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001749e:	83 f8 40             	cmp    eax,0x40
c00174a1:	75 57                	jne    c00174fa <VCache::write(unsigned long long, int, void*)+0xe0>
c00174a3:	83 ec 0c             	sub    esp,0xc
c00174a6:	53                   	push   ebx
c00174a7:	e8 32 ff ff ff       	call   c00173de <VCache::writeWriteBuffer()>
c00174ac:	eb 34                	jmp    c00174e2 <VCache::write(unsigned long long, int, void*)+0xc8>
c00174ae:	83 ec 0c             	sub    esp,0xc
c00174b1:	53                   	push   ebx
c00174b2:	e8 27 ff ff ff       	call   c00173de <VCache::writeWriteBuffer()>
c00174b7:	83 c4 10             	add    esp,0x10
c00174ba:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00174bd:	83 fd 3f             	cmp    ebp,0x3f
c00174c0:	7f 25                	jg     c00174e7 <VCache::write(unsigned long long, int, void*)+0xcd>
c00174c2:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00174c5:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00174c8:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00174cb:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00174cf:	52                   	push   edx
c00174d0:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00174d6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00174da:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00174dd:	e8 be 91 fe ff       	call   c00006a0 <memcpy>
c00174e2:	83 c4 10             	add    esp,0x10
c00174e5:	eb 13                	jmp    c00174fa <VCache::write(unsigned long long, int, void*)+0xe0>
c00174e7:	83 ec 0c             	sub    esp,0xc
c00174ea:	8b 10                	mov    edx,DWORD PTR [eax]
c00174ec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00174f0:	55                   	push   ebp
c00174f1:	57                   	push   edi
c00174f2:	56                   	push   esi
c00174f3:	50                   	push   eax
c00174f4:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00174f7:	83 c4 20             	add    esp,0x20
c00174fa:	83 ec 0c             	sub    esp,0xc
c00174fd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017500:	e8 55 74 00 00       	call   c001e95a <Semaphore::release()>
c0017505:	83 c4 2c             	add    esp,0x2c
c0017508:	31 c0                	xor    eax,eax
c001750a:	5b                   	pop    ebx
c001750b:	5e                   	pop    esi
c001750c:	5f                   	pop    edi
c001750d:	5d                   	pop    ebp
c001750e:	c3                   	ret    
c001750f:	90                   	nop

c0017510 <VCache::read(unsigned long long, int, void*)>:
c0017510:	55                   	push   ebp
c0017511:	57                   	push   edi
c0017512:	56                   	push   esi
c0017513:	53                   	push   ebx
c0017514:	83 ec 28             	sub    esp,0x28
c0017517:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001751b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001751f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017523:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017527:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001752a:	e8 c3 73 00 00       	call   c001e8f2 <Semaphore::acquire()>
c001752f:	83 c4 10             	add    esp,0x10
c0017532:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017536:	74 0c                	je     c0017544 <VCache::read(unsigned long long, int, void*)+0x34>
c0017538:	83 ec 0c             	sub    esp,0xc
c001753b:	53                   	push   ebx
c001753c:	e8 9d fe ff ff       	call   c00173de <VCache::writeWriteBuffer()>
c0017541:	83 c4 10             	add    esp,0x10
c0017544:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0017548:	50                   	push   eax
c0017549:	50                   	push   eax
c001754a:	56                   	push   esi
c001754b:	68 3f c8 02 c0       	push   0xc002c83f
c0017550:	e8 f1 bc ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0017555:	83 c4 10             	add    esp,0x10
c0017558:	83 fd 01             	cmp    ebp,0x1
c001755b:	0f 85 1b 01 00 00    	jne    c001767c <VCache::read(unsigned long long, int, void*)+0x16c>
c0017561:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017564:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001756b:	0f 85 0b 01 00 00    	jne    c001767c <VCache::read(unsigned long long, int, void*)+0x16c>
c0017571:	89 f1                	mov    ecx,esi
c0017573:	89 fa                	mov    edx,edi
c0017575:	83 e1 f8             	and    ecx,0xfffffff8
c0017578:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001757c:	89 c8                	mov    eax,ecx
c001757e:	74 0e                	je     c001758e <VCache::read(unsigned long long, int, void*)+0x7e>
c0017580:	39 7b 34             	cmp    DWORD PTR [ebx+0x34],edi
c0017583:	75 09                	jne    c001758e <VCache::read(unsigned long long, int, void*)+0x7e>
c0017585:	39 4b 30             	cmp    DWORD PTR [ebx+0x30],ecx
c0017588:	0f 84 8a 00 00 00    	je     c0017618 <VCache::read(unsigned long long, int, void*)+0x108>
c001758e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017592:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017596:	83 ec 0c             	sub    esp,0xc
c0017599:	68 58 c8 02 c0       	push   0xc002c858
c001759e:	e8 a3 bc ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00175a3:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c00175a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00175ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00175af:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00175b2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00175b5:	66 c7 05 e0 29 03 c0 fe fe 	mov    WORD PTR ds:0xc00329e0,0xfefe
c00175be:	c6 05 e2 29 03 c0 fe 	mov    BYTE PTR ds:0xc00329e2,0xfe
c00175c5:	c6 05 fe 29 03 c0 fe 	mov    BYTE PTR ds:0xc00329fe,0xfe
c00175cc:	c6 05 a6 2b 03 c0 fe 	mov    BYTE PTR ds:0xc0032ba6,0xfe
c00175d3:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00175d6:	8b 29                	mov    ebp,DWORD PTR [ecx]
c00175d8:	c7 04 24 e0 19 03 c0 	mov    DWORD PTR [esp],0xc00319e0
c00175df:	6a 08                	push   0x8
c00175e1:	52                   	push   edx
c00175e2:	50                   	push   eax
c00175e3:	51                   	push   ecx
c00175e4:	ff 55 28             	call   DWORD PTR [ebp+0x28]
c00175e7:	83 c4 1c             	add    esp,0x1c
c00175ea:	68 00 10 00 00       	push   0x1000
c00175ef:	68 e0 19 03 c0       	push   0xc00319e0
c00175f4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00175f7:	e8 a4 90 fe ff       	call   c00006a0 <memcpy>
c00175fc:	83 c4 10             	add    esp,0x10
c00175ff:	80 3d e0 29 03 c0 fe 	cmp    BYTE PTR ds:0xc00329e0,0xfe
c0017606:	74 10                	je     c0017618 <VCache::read(unsigned long long, int, void*)+0x108>
c0017608:	83 ec 0c             	sub    esp,0xc
c001760b:	68 68 c8 02 c0       	push   0xc002c868
c0017610:	e8 e6 31 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c0017615:	83 c4 10             	add    esp,0x10
c0017618:	51                   	push   ecx
c0017619:	2b 73 30             	sub    esi,DWORD PTR [ebx+0x30]
c001761c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001761f:	1b 7b 34             	sbb    edi,DWORD PTR [ebx+0x34]
c0017622:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017628:	89 fa                	mov    edx,edi
c001762a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001762e:	89 c1                	mov    ecx,eax
c0017630:	0f af d0             	imul   edx,eax
c0017633:	c1 f9 1f             	sar    ecx,0x1f
c0017636:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001763a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001763e:	0f af ce             	imul   ecx,esi
c0017641:	01 d1                	add    ecx,edx
c0017643:	f7 e6                	mul    esi
c0017645:	01 ca                	add    edx,ecx
c0017647:	52                   	push   edx
c0017648:	50                   	push   eax
c0017649:	68 a5 c8 02 c0       	push   0xc002c8a5
c001764e:	e8 f3 bb ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0017653:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017656:	83 c4 0c             	add    esp,0xc
c0017659:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001765f:	52                   	push   edx
c0017660:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017664:	83 e0 07             	and    eax,0x7
c0017667:	0f af c2             	imul   eax,edx
c001766a:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001766d:	50                   	push   eax
c001766e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017672:	e8 29 90 fe ff       	call   c00006a0 <memcpy>
c0017677:	83 c4 10             	add    esp,0x10
c001767a:	eb 29                	jmp    c00176a5 <VCache::read(unsigned long long, int, void*)+0x195>
c001767c:	50                   	push   eax
c001767d:	50                   	push   eax
c001767e:	55                   	push   ebp
c001767f:	68 c1 c8 02 c0       	push   0xc002c8c1
c0017684:	e8 bd bb ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0017689:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001768c:	e8 33 fd ff ff       	call   c00173c4 <VCache::invalidateReadBuffer()>
c0017691:	5a                   	pop    edx
c0017692:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017695:	8b 10                	mov    edx,DWORD PTR [eax]
c0017697:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001769b:	55                   	push   ebp
c001769c:	57                   	push   edi
c001769d:	56                   	push   esi
c001769e:	50                   	push   eax
c001769f:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00176a2:	83 c4 20             	add    esp,0x20
c00176a5:	83 ec 0c             	sub    esp,0xc
c00176a8:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00176ab:	e8 aa 72 00 00       	call   c001e95a <Semaphore::release()>
c00176b0:	83 c4 2c             	add    esp,0x2c
c00176b3:	31 c0                	xor    eax,eax
c00176b5:	5b                   	pop    ebx
c00176b6:	5e                   	pop    esi
c00176b7:	5f                   	pop    edi
c00176b8:	5d                   	pop    ebp
c00176b9:	c3                   	ret    

c00176ba <Video::Video(char const*)>:
c00176ba:	83 ec 0c             	sub    esp,0xc
c00176bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176c1:	83 ec 08             	sub    esp,0x8
c00176c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00176c8:	50                   	push   eax
c00176c9:	e8 4e ce ff ff       	call   c001451c <Device::Device(char const*)>
c00176ce:	83 c4 10             	add    esp,0x10
c00176d1:	ba 08 ca 02 c0       	mov    edx,0xc002ca08
c00176d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176da:	89 10                	mov    DWORD PTR [eax],edx
c00176dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176e0:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00176ea:	90                   	nop
c00176eb:	83 c4 0c             	add    esp,0xc
c00176ee:	c3                   	ret    
c00176ef:	90                   	nop

c00176f0 <Video::~Video()>:
c00176f0:	83 ec 0c             	sub    esp,0xc
c00176f3:	ba 08 ca 02 c0       	mov    edx,0xc002ca08
c00176f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176fc:	89 10                	mov    DWORD PTR [eax],edx
c00176fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017702:	83 ec 0c             	sub    esp,0xc
c0017705:	50                   	push   eax
c0017706:	e8 0d cf ff ff       	call   c0014618 <Device::~Device()>
c001770b:	83 c4 10             	add    esp,0x10
c001770e:	90                   	nop
c001770f:	83 c4 0c             	add    esp,0xc
c0017712:	c3                   	ret    
c0017713:	90                   	nop

c0017714 <Video::~Video()>:
c0017714:	83 ec 0c             	sub    esp,0xc
c0017717:	83 ec 0c             	sub    esp,0xc
c001771a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001771e:	e8 cd ff ff ff       	call   c00176f0 <Video::~Video()>
c0017723:	83 c4 10             	add    esp,0x10
c0017726:	83 ec 08             	sub    esp,0x8
c0017729:	68 64 01 00 00       	push   0x164
c001772e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017732:	e8 2f ba ff ff       	call   c0013166 <operator delete(void*, unsigned long)>
c0017737:	83 c4 10             	add    esp,0x10
c001773a:	83 c4 0c             	add    esp,0xc
c001773d:	c3                   	ret    

c001773e <Video::isMonochrome()>:
c001773e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017742:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0017748:	c3                   	ret    
c0017749:	90                   	nop

c001774a <Video::getWidth()>:
c001774a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001774e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017754:	c3                   	ret    
c0017755:	90                   	nop

c0017756 <Video::getHeight()>:
c0017756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001775a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017760:	c3                   	ret    
c0017761:	90                   	nop

c0017762 <Video::putpixel(int, int, unsigned int)>:
c0017762:	c7 44 24 04 84 c9 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c984
c001776a:	e9 8c 30 00 00       	jmp    c001a7fb <Krnl::panic(char const*)>
c001776f:	90                   	nop

c0017770 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017770:	55                   	push   ebp
c0017771:	57                   	push   edi
c0017772:	56                   	push   esi
c0017773:	53                   	push   ebx
c0017774:	83 ec 2c             	sub    esp,0x2c
c0017777:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001777b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001777f:	83 f8 01             	cmp    eax,0x1
c0017782:	19 c9                	sbb    ecx,ecx
c0017784:	31 db                	xor    ebx,ebx
c0017786:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001778a:	89 cd                	mov    ebp,ecx
c001778c:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0017794:	f7 d5                	not    ebp
c0017796:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001779c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00177a0:	01 d8                	add    eax,ebx
c00177a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00177a6:	56                   	push   esi
c00177a7:	e8 aa ff ff ff       	call   c0017756 <Video::getHeight()>
c00177ac:	59                   	pop    ecx
c00177ad:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00177b1:	7e 70                	jle    c0017823 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00177b3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00177b7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00177bb:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00177be:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00177c2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00177c6:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00177cd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00177d1:	89 f8                	mov    eax,edi
c00177d3:	83 c0 20             	add    eax,0x20
c00177d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00177da:	56                   	push   esi
c00177db:	e8 6a ff ff ff       	call   c001774a <Video::getWidth()>
c00177e0:	5a                   	pop    edx
c00177e1:	39 c7                	cmp    edi,eax
c00177e3:	7d 34                	jge    c0017819 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00177e5:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00177ea:	74 05                	je     c00177f1 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00177ec:	8b 06                	mov    eax,DWORD PTR [esi]
c00177ee:	55                   	push   ebp
c00177ef:	eb 0d                	jmp    c00177fe <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00177f1:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00177f6:	74 12                	je     c001780a <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00177f8:	8b 06                	mov    eax,DWORD PTR [esi]
c00177fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00177fe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017802:	57                   	push   edi
c0017803:	56                   	push   esi
c0017804:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017807:	83 c4 10             	add    esp,0x10
c001780a:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001780e:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017812:	47                   	inc    edi
c0017813:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017817:	75 c1                	jne    c00177da <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0017819:	43                   	inc    ebx
c001781a:	83 fb 20             	cmp    ebx,0x20
c001781d:	0f 85 79 ff ff ff    	jne    c001779c <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017823:	83 c4 2c             	add    esp,0x2c
c0017826:	5b                   	pop    ebx
c0017827:	5e                   	pop    esi
c0017828:	5f                   	pop    edi
c0017829:	5d                   	pop    ebp
c001782a:	c3                   	ret    
c001782b:	90                   	nop

c001782c <Video::putrect(int, int, int, int, unsigned int)>:
c001782c:	55                   	push   ebp
c001782d:	57                   	push   edi
c001782e:	56                   	push   esi
c001782f:	53                   	push   ebx
c0017830:	83 ec 1c             	sub    esp,0x1c
c0017833:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017837:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001783b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001783f:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0017843:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017847:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001784b:	01 df                	add    edi,ebx
c001784d:	39 fb                	cmp    ebx,edi
c001784f:	7d 1f                	jge    c0017870 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0017851:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017855:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0017859:	7d 12                	jge    c001786d <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001785b:	8b 16                	mov    edx,DWORD PTR [esi]
c001785d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017861:	53                   	push   ebx
c0017862:	55                   	push   ebp
c0017863:	45                   	inc    ebp
c0017864:	56                   	push   esi
c0017865:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017868:	83 c4 10             	add    esp,0x10
c001786b:	eb e8                	jmp    c0017855 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001786d:	43                   	inc    ebx
c001786e:	eb dd                	jmp    c001784d <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0017870:	83 c4 1c             	add    esp,0x1c
c0017873:	5b                   	pop    ebx
c0017874:	5e                   	pop    esi
c0017875:	5f                   	pop    edi
c0017876:	5d                   	pop    ebp
c0017877:	c3                   	ret    

c0017878 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0017878:	55                   	push   ebp
c0017879:	57                   	push   edi
c001787a:	31 ff                	xor    edi,edi
c001787c:	56                   	push   esi
c001787d:	53                   	push   ebx
c001787e:	83 ec 1c             	sub    esp,0x1c
c0017881:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017885:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017889:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017890:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0017895:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017899:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001789d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00178a1:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c00178a4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00178a8:	01 f9                	add    ecx,edi
c00178aa:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c00178ae:	7d 2f                	jge    c00178df <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c00178b0:	31 f6                	xor    esi,esi
c00178b2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00178b6:	01 f2                	add    edx,esi
c00178b8:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00178bc:	7d 1a                	jge    c00178d8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00178be:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00178c1:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00178c4:	46                   	inc    esi
c00178c5:	51                   	push   ecx
c00178c6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00178ca:	52                   	push   edx
c00178cb:	55                   	push   ebp
c00178cc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00178cf:	83 c4 10             	add    esp,0x10
c00178d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00178d6:	eb da                	jmp    c00178b2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00178d8:	47                   	inc    edi
c00178d9:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00178dd:	eb c5                	jmp    c00178a4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00178df:	83 c4 1c             	add    esp,0x1c
c00178e2:	5b                   	pop    ebx
c00178e3:	5e                   	pop    esi
c00178e4:	5f                   	pop    edi
c00178e5:	5d                   	pop    ebp
c00178e6:	c3                   	ret    
c00178e7:	90                   	nop

c00178e8 <Video::blit(unsigned int*, int, int, int, int)>:
c00178e8:	55                   	push   ebp
c00178e9:	57                   	push   edi
c00178ea:	56                   	push   esi
c00178eb:	53                   	push   ebx
c00178ec:	83 ec 1c             	sub    esp,0x1c
c00178ef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00178f3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00178f7:	85 c0                	test   eax,eax
c00178f9:	79 02                	jns    c00178fd <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00178fb:	31 c0                	xor    eax,eax
c00178fd:	c1 e0 02             	shl    eax,0x2
c0017900:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017904:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017908:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001790c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0017910:	39 d8                	cmp    eax,ebx
c0017912:	7e 49                	jle    c001795d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017914:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001791a:	7c 41                	jl     c001795d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001791c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0017920:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017924:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017928:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001792c:	39 f9                	cmp    ecx,edi
c001792e:	7e 22                	jle    c0017952 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0017930:	83 c5 04             	add    ebp,0x4
c0017933:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017939:	7c 14                	jl     c001794f <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001793b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001793d:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0017940:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017944:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017948:	56                   	push   esi
c0017949:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001794c:	83 c4 10             	add    esp,0x10
c001794f:	47                   	inc    edi
c0017950:	eb d2                	jmp    c0017924 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0017952:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017956:	43                   	inc    ebx
c0017957:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001795b:	eb ab                	jmp    c0017908 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001795d:	83 c4 1c             	add    esp,0x1c
c0017960:	5b                   	pop    ebx
c0017961:	5e                   	pop    esi
c0017962:	5f                   	pop    edi
c0017963:	5d                   	pop    ebp
c0017964:	c3                   	ret    
c0017965:	90                   	nop

c0017966 <Video::clearScreen(unsigned int)>:
c0017966:	57                   	push   edi
c0017967:	56                   	push   esi
c0017968:	53                   	push   ebx
c0017969:	31 db                	xor    ebx,ebx
c001796b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001796f:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017975:	7e 1f                	jle    c0017996 <Video::clearScreen(unsigned int)+0x30>
c0017977:	31 ff                	xor    edi,edi
c0017979:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001797f:	7e 12                	jle    c0017993 <Video::clearScreen(unsigned int)+0x2d>
c0017981:	8b 06                	mov    eax,DWORD PTR [esi]
c0017983:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017987:	53                   	push   ebx
c0017988:	57                   	push   edi
c0017989:	47                   	inc    edi
c001798a:	56                   	push   esi
c001798b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001798e:	83 c4 10             	add    esp,0x10
c0017991:	eb e6                	jmp    c0017979 <Video::clearScreen(unsigned int)+0x13>
c0017993:	43                   	inc    ebx
c0017994:	eb d9                	jmp    c001796f <Video::clearScreen(unsigned int)+0x9>
c0017996:	5b                   	pop    ebx
c0017997:	5e                   	pop    esi
c0017998:	5f                   	pop    edi
c0017999:	c3                   	ret    

c001799a <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001799a:	55                   	push   ebp
c001799b:	57                   	push   edi
c001799c:	56                   	push   esi
c001799d:	53                   	push   ebx
c001799e:	83 ec 28             	sub    esp,0x28
c00179a1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00179a5:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00179a9:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c00179ad:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00179b1:	c1 e7 08             	shl    edi,0x8
c00179b4:	01 c7                	add    edi,eax
c00179b6:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00179ba:	c1 e0 08             	shl    eax,0x8
c00179bd:	01 d0                	add    eax,edx
c00179bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00179c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179c7:	0f af c7             	imul   eax,edi
c00179ca:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00179d1:	50                   	push   eax
c00179d2:	e8 85 85 ff ff       	call   c000ff5c <malloc>
c00179d7:	83 c4 10             	add    esp,0x10
c00179da:	89 c5                	mov    ebp,eax
c00179dc:	85 c0                	test   eax,eax
c00179de:	75 15                	jne    c00179f5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c00179e0:	83 ec 0c             	sub    esp,0xc
c00179e3:	68 a5 c9 02 c0       	push   0xc002c9a5
c00179e8:	e8 59 b8 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00179ed:	83 c4 10             	add    esp,0x10
c00179f0:	e9 1c 01 00 00       	jmp    c0017b11 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00179f5:	be 12 00 00 00       	mov    esi,0x12
c00179fa:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00179fe:	74 11                	je     c0017a11 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0017a00:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0017a04:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0017a08:	c1 fe 03             	sar    esi,0x3
c0017a0b:	0f af f0             	imul   esi,eax
c0017a0e:	83 c6 12             	add    esi,0x12
c0017a11:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0017a15:	74 04                	je     c0017a1b <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0017a17:	85 ff                	test   edi,edi
c0017a19:	75 12                	jne    c0017a2d <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017a1b:	83 ec 0c             	sub    esp,0xc
c0017a1e:	68 bc c9 02 c0       	push   0xc002c9bc
c0017a23:	e8 1e b8 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0017a28:	e9 ce 00 00 00       	jmp    c0017afb <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017a2d:	52                   	push   edx
c0017a2e:	52                   	push   edx
c0017a2f:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0017a33:	50                   	push   eax
c0017a34:	68 d1 c9 02 c0       	push   0xc002c9d1
c0017a39:	e8 08 b8 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0017a3e:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0017a42:	83 c4 10             	add    esp,0x10
c0017a45:	80 fa 02             	cmp    dl,0x2
c0017a48:	0f 85 98 00 00 00    	jne    c0017ae6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017a4e:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017a53:	75 10                	jne    c0017a65 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017a55:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017a59:	75 0a                	jne    c0017a65 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017a5b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017a5e:	83 e8 18             	sub    eax,0x18
c0017a61:	a8 f7                	test   al,0xf7
c0017a63:	74 0a                	je     c0017a6f <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0017a65:	83 ec 0c             	sub    esp,0xc
c0017a68:	68 de c9 02 c0       	push   0xc002c9de
c0017a6d:	eb 7f                	jmp    c0017aee <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017a6f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017a77:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017a7f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017a83:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017a8b:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017a8f:	75 0c                	jne    c0017a9d <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0017a91:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0017a96:	c1 e0 18             	shl    eax,0x18
c0017a99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017a9d:	41                   	inc    ecx
c0017a9e:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0017aa3:	c1 e2 10             	shl    edx,0x10
c0017aa6:	89 d0                	mov    eax,edx
c0017aa8:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017aad:	c1 e2 08             	shl    edx,0x8
c0017ab0:	09 c2                	or     edx,eax
c0017ab2:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0017ab6:	09 c2                	or     edx,eax
c0017ab8:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017abc:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0017ac0:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017ac4:	c1 f8 03             	sar    eax,0x3
c0017ac7:	01 c6                	add    esi,eax
c0017ac9:	89 c8                	mov    eax,ecx
c0017acb:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017acf:	39 c7                	cmp    edi,eax
c0017ad1:	7f b0                	jg     c0017a83 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0017ad3:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017ad7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017adb:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017ade:	7e 22                	jle    c0017b02 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0017ae0:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0017ae4:	eb 99                	jmp    c0017a7f <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0017ae6:	50                   	push   eax
c0017ae7:	50                   	push   eax
c0017ae8:	52                   	push   edx
c0017ae9:	68 ec c9 02 c0       	push   0xc002c9ec
c0017aee:	e8 53 b7 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0017af3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017af6:	e8 71 84 ff ff       	call   c000ff6c <free>
c0017afb:	83 c4 10             	add    esp,0x10
c0017afe:	31 ed                	xor    ebp,ebp
c0017b00:	eb 0f                	jmp    c0017b11 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017b02:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017b06:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017b09:	89 38                	mov    DWORD PTR [eax],edi
c0017b0b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017b0f:	89 08                	mov    DWORD PTR [eax],ecx
c0017b11:	83 c4 1c             	add    esp,0x1c
c0017b14:	89 e8                	mov    eax,ebp
c0017b16:	5b                   	pop    ebx
c0017b17:	5e                   	pop    esi
c0017b18:	5f                   	pop    edi
c0017b19:	5d                   	pop    ebp
c0017b1a:	c3                   	ret    
c0017b1b:	90                   	nop

c0017b1c <Video::putTGA(int, int, unsigned char*, int)>:
c0017b1c:	55                   	push   ebp
c0017b1d:	57                   	push   edi
c0017b1e:	56                   	push   esi
c0017b1f:	53                   	push   ebx
c0017b20:	83 ec 28             	sub    esp,0x28
c0017b23:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017b27:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017b2b:	50                   	push   eax
c0017b2c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017b30:	50                   	push   eax
c0017b31:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017b35:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017b39:	56                   	push   esi
c0017b3a:	e8 5b fe ff ff       	call   c001799a <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017b3f:	83 c4 20             	add    esp,0x20
c0017b42:	85 c0                	test   eax,eax
c0017b44:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017b48:	74 35                	je     c0017b7f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017b4a:	89 c7                	mov    edi,eax
c0017b4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017b50:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017b54:	39 d8                	cmp    eax,ebx
c0017b56:	7e 27                	jle    c0017b7f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017b58:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017b5c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b60:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017b64:	39 e8                	cmp    eax,ebp
c0017b66:	7e 14                	jle    c0017b7c <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017b68:	8b 06                	mov    eax,DWORD PTR [esi]
c0017b6a:	83 c7 04             	add    edi,0x4
c0017b6d:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017b70:	53                   	push   ebx
c0017b71:	55                   	push   ebp
c0017b72:	45                   	inc    ebp
c0017b73:	56                   	push   esi
c0017b74:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017b77:	83 c4 10             	add    esp,0x10
c0017b7a:	eb e0                	jmp    c0017b5c <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017b7c:	43                   	inc    ebx
c0017b7d:	eb cd                	jmp    c0017b4c <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017b7f:	83 c4 1c             	add    esp,0x1c
c0017b82:	5b                   	pop    ebx
c0017b83:	5e                   	pop    esi
c0017b84:	5f                   	pop    edi
c0017b85:	5d                   	pop    ebp
c0017b86:	c3                   	ret    
c0017b87:	90                   	nop

c0017b88 <findRSDP()>:
c0017b88:	83 ec 1c             	sub    esp,0x1c
c0017b8b:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0017b90:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017b96:	83 e0 04             	and    eax,0x4
c0017b99:	84 c0                	test   al,al
c0017b9b:	75 07                	jne    c0017ba4 <findRSDP()+0x1c>
c0017b9d:	b8 00 00 00 00       	mov    eax,0x0
c0017ba2:	eb 6a                	jmp    c0017c0e <findRSDP()+0x86>
c0017ba4:	a1 f0 13 03 c0       	mov    eax,ds:0xc00313f0
c0017ba9:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017bae:	7f 1b                	jg     c0017bcb <findRSDP()+0x43>
c0017bb0:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0017bb5:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017bbb:	83 e2 fb             	and    edx,0xfffffffb
c0017bbe:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017bc4:	b8 00 00 00 00       	mov    eax,0x0
c0017bc9:	eb 43                	jmp    c0017c0e <findRSDP()+0x86>
c0017bcb:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017bd3:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017bdb:	77 2c                	ja     c0017c09 <findRSDP()+0x81>
c0017bdd:	83 ec 04             	sub    esp,0x4
c0017be0:	6a 08                	push   0x8
c0017be2:	68 e8 ca 02 c0       	push   0xc002cae8
c0017be7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017beb:	e8 4d 8a fe ff       	call   c000063d <memcmp>
c0017bf0:	83 c4 10             	add    esp,0x10
c0017bf3:	85 c0                	test   eax,eax
c0017bf5:	0f 94 c0             	sete   al
c0017bf8:	84 c0                	test   al,al
c0017bfa:	74 06                	je     c0017c02 <findRSDP()+0x7a>
c0017bfc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c00:	eb 0c                	jmp    c0017c0e <findRSDP()+0x86>
c0017c02:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017c07:	eb ca                	jmp    c0017bd3 <findRSDP()+0x4b>
c0017c09:	b8 00 00 00 00       	mov    eax,0x0
c0017c0e:	83 c4 1c             	add    esp,0x1c
c0017c11:	c3                   	ret    

c0017c12 <loadACPITables(unsigned char*)>:
c0017c12:	56                   	push   esi
c0017c13:	53                   	push   ebx
c0017c14:	83 ec 44             	sub    esp,0x44
c0017c17:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0017c1c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c22:	83 e0 04             	and    eax,0x4
c0017c25:	84 c0                	test   al,al
c0017c27:	0f 84 05 02 00 00    	je     c0017e32 <loadACPITables(unsigned char*)+0x220>
c0017c2d:	a0 50 3c 03 c0       	mov    al,ds:0xc0033c50
c0017c32:	84 c0                	test   al,al
c0017c34:	74 75                	je     c0017cab <loadACPITables(unsigned char*)+0x99>
c0017c36:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017c3a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c45:	83 e8 24             	sub    eax,0x24
c0017c48:	c1 e8 03             	shr    eax,0x3
c0017c4b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017c4f:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017c57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017c5b:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017c5f:	0f 8d b2 00 00 00    	jge    c0017d17 <loadACPITables(unsigned char*)+0x105>
c0017c65:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017c69:	83 c0 24             	add    eax,0x24
c0017c6c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017c70:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c74:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017c78:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017c7c:	c1 e0 03             	shl    eax,0x3
c0017c7f:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017c83:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017c87:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017c8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c8c:	89 c1                	mov    ecx,eax
c0017c8e:	a1 60 3e 03 c0       	mov    eax,ds:0xc0033e60
c0017c93:	8d 50 01             	lea    edx,[eax+0x1]
c0017c96:	89 15 60 3e 03 c0    	mov    DWORD PTR ds:0xc0033e60,edx
c0017c9c:	89 ca                	mov    edx,ecx
c0017c9e:	89 14 c5 64 3c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcc39c],edx
c0017ca5:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017ca9:	eb ac                	jmp    c0017c57 <loadACPITables(unsigned char*)+0x45>
c0017cab:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017caf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017cb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017cb7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017cba:	83 e8 24             	sub    eax,0x24
c0017cbd:	c1 e8 02             	shr    eax,0x2
c0017cc0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017cc4:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017ccc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017cd0:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017cd4:	7d 41                	jge    c0017d17 <loadACPITables(unsigned char*)+0x105>
c0017cd6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017cda:	83 c0 24             	add    eax,0x24
c0017cdd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017ce1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017ce5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017ce9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017ced:	c1 e0 02             	shl    eax,0x2
c0017cf0:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017cf4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017cf8:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017cfa:	a1 60 3e 03 c0       	mov    eax,ds:0xc0033e60
c0017cff:	8d 50 01             	lea    edx,[eax+0x1]
c0017d02:	89 15 60 3e 03 c0    	mov    DWORD PTR ds:0xc0033e60,edx
c0017d08:	89 ca                	mov    edx,ecx
c0017d0a:	89 14 c5 64 3c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcc39c],edx
c0017d11:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017d15:	eb b5                	jmp    c0017ccc <loadACPITables(unsigned char*)+0xba>
c0017d17:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017d1f:	a1 60 3e 03 c0       	mov    eax,ds:0xc0033e60
c0017d24:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017d28:	0f 8d 05 01 00 00    	jge    c0017e33 <loadACPITables(unsigned char*)+0x221>
c0017d2e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017d32:	8b 04 c5 64 3c 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcc39c]
c0017d39:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017d3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017d45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d49:	25 ff 0f 00 00       	and    eax,0xfff
c0017d4e:	89 c6                	mov    esi,eax
c0017d50:	e8 ad a7 ff ff       	call   c0012502 <Virt::getAKernelVAS()>
c0017d55:	89 c3                	mov    ebx,eax
c0017d57:	83 ec 0c             	sub    esp,0xc
c0017d5a:	6a 01                	push   0x1
c0017d5c:	e8 ee a4 ff ff       	call   c001224f <Virt::allocateKernelVirtualPages(int)>
c0017d61:	83 c4 10             	add    esp,0x10
c0017d64:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d68:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017d6e:	83 ec 0c             	sub    esp,0xc
c0017d71:	6a 01                	push   0x1
c0017d73:	6a 01                	push   0x1
c0017d75:	50                   	push   eax
c0017d76:	52                   	push   edx
c0017d77:	53                   	push   ebx
c0017d78:	e8 0b af ff ff       	call   c0012c88 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d7d:	83 c4 20             	add    esp,0x20
c0017d80:	09 f0                	or     eax,esi
c0017d82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017d86:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017d8a:	c1 e0 03             	shl    eax,0x3
c0017d8d:	05 60 3c 03 c0       	add    eax,0xc0033c60
c0017d92:	83 ec 04             	sub    esp,0x4
c0017d95:	6a 04                	push   0x4
c0017d97:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017d9b:	50                   	push   eax
c0017d9c:	e8 ff 88 fe ff       	call   c00006a0 <memcpy>
c0017da1:	83 c4 10             	add    esp,0x10
c0017da4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017da8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017dab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017daf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017db3:	05 00 10 00 00       	add    eax,0x1000
c0017db8:	c1 e8 0c             	shr    eax,0xc
c0017dbb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017dbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017dc3:	89 04 24             	mov    DWORD PTR [esp],eax
c0017dc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017dca:	25 ff 0f 00 00       	and    eax,0xfff
c0017dcf:	89 c6                	mov    esi,eax
c0017dd1:	e8 2c a7 ff ff       	call   c0012502 <Virt::getAKernelVAS()>
c0017dd6:	89 c3                	mov    ebx,eax
c0017dd8:	83 ec 0c             	sub    esp,0xc
c0017ddb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017ddf:	e8 6b a4 ff ff       	call   c001224f <Virt::allocateKernelVirtualPages(int)>
c0017de4:	83 c4 10             	add    esp,0x10
c0017de7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017deb:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017df1:	83 ec 0c             	sub    esp,0xc
c0017df4:	6a 01                	push   0x1
c0017df6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017dfa:	50                   	push   eax
c0017dfb:	52                   	push   edx
c0017dfc:	53                   	push   ebx
c0017dfd:	e8 86 ae ff ff       	call   c0012c88 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017e02:	83 c4 20             	add    esp,0x20
c0017e05:	09 f0                	or     eax,esi
c0017e07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017e0b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017e0e:	83 ec 0c             	sub    esp,0xc
c0017e11:	50                   	push   eax
c0017e12:	e8 49 a5 ff ff       	call   c0012360 <Virt::freeKernelVirtualPages(unsigned long)>
c0017e17:	83 c4 10             	add    esp,0x10
c0017e1a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e1e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017e22:	89 14 c5 64 3c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcc39c],edx
c0017e29:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017e2d:	e9 ed fe ff ff       	jmp    c0017d1f <loadACPITables(unsigned char*)+0x10d>
c0017e32:	90                   	nop
c0017e33:	83 c4 44             	add    esp,0x44
c0017e36:	5b                   	pop    ebx
c0017e37:	5e                   	pop    esi
c0017e38:	c3                   	ret    

c0017e39 <findRSDT(unsigned char*)>:
c0017e39:	56                   	push   esi
c0017e3a:	53                   	push   ebx
c0017e3b:	83 ec 44             	sub    esp,0x44
c0017e3e:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0017e43:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017e49:	83 e0 04             	and    eax,0x4
c0017e4c:	84 c0                	test   al,al
c0017e4e:	75 0a                	jne    c0017e5a <findRSDT(unsigned char*)+0x21>
c0017e50:	b8 00 00 00 00       	mov    eax,0x0
c0017e55:	e9 f7 00 00 00       	jmp    c0017f51 <findRSDT(unsigned char*)+0x118>
c0017e5a:	83 ec 04             	sub    esp,0x4
c0017e5d:	6a 24                	push   0x24
c0017e5f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017e63:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017e67:	50                   	push   eax
c0017e68:	e8 33 88 fe ff       	call   c00006a0 <memcpy>
c0017e6d:	83 c4 10             	add    esp,0x10
c0017e70:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017e74:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017e78:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017e80:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017e84:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e88:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017e8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017e94:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e98:	25 ff 0f 00 00       	and    eax,0xfff
c0017e9d:	89 c6                	mov    esi,eax
c0017e9f:	e8 5e a6 ff ff       	call   c0012502 <Virt::getAKernelVAS()>
c0017ea4:	89 c3                	mov    ebx,eax
c0017ea6:	83 ec 0c             	sub    esp,0xc
c0017ea9:	6a 02                	push   0x2
c0017eab:	e8 9f a3 ff ff       	call   c001224f <Virt::allocateKernelVirtualPages(int)>
c0017eb0:	83 c4 10             	add    esp,0x10
c0017eb3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017eb7:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017ebd:	83 ec 0c             	sub    esp,0xc
c0017ec0:	6a 01                	push   0x1
c0017ec2:	6a 02                	push   0x2
c0017ec4:	50                   	push   eax
c0017ec5:	52                   	push   edx
c0017ec6:	53                   	push   ebx
c0017ec7:	e8 bc ad ff ff       	call   c0012c88 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017ecc:	83 c4 20             	add    esp,0x20
c0017ecf:	09 f0                	or     eax,esi
c0017ed1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017ed5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ed9:	25 ff 0f 00 00       	and    eax,0xfff
c0017ede:	89 c6                	mov    esi,eax
c0017ee0:	e8 1d a6 ff ff       	call   c0012502 <Virt::getAKernelVAS()>
c0017ee5:	89 c3                	mov    ebx,eax
c0017ee7:	83 ec 0c             	sub    esp,0xc
c0017eea:	6a 02                	push   0x2
c0017eec:	e8 5e a3 ff ff       	call   c001224f <Virt::allocateKernelVirtualPages(int)>
c0017ef1:	83 c4 10             	add    esp,0x10
c0017ef4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017ef8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017efe:	83 ec 0c             	sub    esp,0xc
c0017f01:	6a 01                	push   0x1
c0017f03:	6a 02                	push   0x2
c0017f05:	50                   	push   eax
c0017f06:	52                   	push   edx
c0017f07:	53                   	push   ebx
c0017f08:	e8 7b ad ff ff       	call   c0012c88 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017f0d:	83 c4 20             	add    esp,0x20
c0017f10:	09 f0                	or     eax,esi
c0017f12:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017f16:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017f1b:	75 11                	jne    c0017f2e <findRSDT(unsigned char*)+0xf5>
c0017f1d:	c6 05 50 3c 03 c0 00 	mov    BYTE PTR ds:0xc0033c50,0x0
c0017f24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f28:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017f2c:	eb 1f                	jmp    c0017f4d <findRSDT(unsigned char*)+0x114>
c0017f2e:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017f33:	75 11                	jne    c0017f46 <findRSDT(unsigned char*)+0x10d>
c0017f35:	c6 05 50 3c 03 c0 01 	mov    BYTE PTR ds:0xc0033c50,0x1
c0017f3c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017f40:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017f44:	eb 07                	jmp    c0017f4d <findRSDT(unsigned char*)+0x114>
c0017f46:	b8 00 00 00 00       	mov    eax,0x0
c0017f4b:	eb 04                	jmp    c0017f51 <findRSDT(unsigned char*)+0x118>
c0017f4d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017f51:	83 c4 44             	add    esp,0x44
c0017f54:	5b                   	pop    ebx
c0017f55:	5e                   	pop    esi
c0017f56:	c3                   	ret    

c0017f57 <findDataTable(unsigned char*, char*)>:
c0017f57:	83 ec 1c             	sub    esp,0x1c
c0017f5a:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0017f5f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017f65:	83 e0 04             	and    eax,0x4
c0017f68:	84 c0                	test   al,al
c0017f6a:	75 07                	jne    c0017f73 <findDataTable(unsigned char*, char*)+0x1c>
c0017f6c:	b8 00 00 00 00       	mov    eax,0x0
c0017f71:	eb 7c                	jmp    c0017fef <findDataTable(unsigned char*, char*)+0x98>
c0017f73:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017f7b:	a1 60 3e 03 c0       	mov    eax,ds:0xc0033e60
c0017f80:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017f84:	7d 3a                	jge    c0017fc0 <findDataTable(unsigned char*, char*)+0x69>
c0017f86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017f8a:	c1 e0 03             	shl    eax,0x3
c0017f8d:	05 60 3c 03 c0       	add    eax,0xc0033c60
c0017f92:	83 ec 04             	sub    esp,0x4
c0017f95:	6a 04                	push   0x4
c0017f97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f9b:	50                   	push   eax
c0017f9c:	e8 9c 86 fe ff       	call   c000063d <memcmp>
c0017fa1:	83 c4 10             	add    esp,0x10
c0017fa4:	85 c0                	test   eax,eax
c0017fa6:	0f 94 c0             	sete   al
c0017fa9:	84 c0                	test   al,al
c0017fab:	74 0d                	je     c0017fba <findDataTable(unsigned char*, char*)+0x63>
c0017fad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017fb1:	8b 04 c5 64 3c 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcc39c]
c0017fb8:	eb 35                	jmp    c0017fef <findDataTable(unsigned char*, char*)+0x98>
c0017fba:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017fbe:	eb bb                	jmp    c0017f7b <findDataTable(unsigned char*, char*)+0x24>
c0017fc0:	a0 50 3c 03 c0       	mov    al,ds:0xc0033c50
c0017fc5:	84 c0                	test   al,al
c0017fc7:	74 07                	je     c0017fd0 <findDataTable(unsigned char*, char*)+0x79>
c0017fc9:	b8 58 00 00 00       	mov    eax,0x58
c0017fce:	eb 05                	jmp    c0017fd5 <findDataTable(unsigned char*, char*)+0x7e>
c0017fd0:	b8 52 00 00 00       	mov    eax,0x52
c0017fd5:	83 ec 04             	sub    esp,0x4
c0017fd8:	50                   	push   eax
c0017fd9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017fdd:	68 0c cc 02 c0       	push   0xc002cc0c
c0017fe2:	e8 5f b2 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0017fe7:	83 c4 10             	add    esp,0x10
c0017fea:	b8 00 00 00 00       	mov    eax,0x0
c0017fef:	83 c4 1c             	add    esp,0x1c
c0017ff2:	c3                   	ret    

c0017ff3 <scanMADT()>:
c0017ff3:	53                   	push   ebx
c0017ff4:	83 ec 38             	sub    esp,0x38
c0017ff7:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0017ffc:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018002:	83 e0 04             	and    eax,0x4
c0018005:	84 c0                	test   al,al
c0018007:	0f 84 63 04 00 00    	je     c0018470 <scanMADT()+0x47d>
c001800d:	e8 76 fb ff ff       	call   c0017b88 <findRSDP()>
c0018012:	a3 44 3c 03 c0       	mov    ds:0xc0033c44,eax
c0018017:	a1 44 3c 03 c0       	mov    eax,ds:0xc0033c44
c001801c:	85 c0                	test   eax,eax
c001801e:	75 19                	jne    c0018039 <scanMADT()+0x46>
c0018020:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0018025:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001802b:	83 e2 fb             	and    edx,0xfffffffb
c001802e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0018034:	e9 3b 04 00 00       	jmp    c0018474 <scanMADT()+0x481>
c0018039:	a1 44 3c 03 c0       	mov    eax,ds:0xc0033c44
c001803e:	83 ec 0c             	sub    esp,0xc
c0018041:	50                   	push   eax
c0018042:	e8 f2 fd ff ff       	call   c0017e39 <findRSDT(unsigned char*)>
c0018047:	83 c4 10             	add    esp,0x10
c001804a:	a3 48 3c 03 c0       	mov    ds:0xc0033c48,eax
c001804f:	a1 48 3c 03 c0       	mov    eax,ds:0xc0033c48
c0018054:	85 c0                	test   eax,eax
c0018056:	75 19                	jne    c0018071 <scanMADT()+0x7e>
c0018058:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c001805d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0018063:	83 e2 fb             	and    edx,0xfffffffb
c0018066:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001806c:	e9 03 04 00 00       	jmp    c0018474 <scanMADT()+0x481>
c0018071:	a1 48 3c 03 c0       	mov    eax,ds:0xc0033c48
c0018076:	83 ec 0c             	sub    esp,0xc
c0018079:	50                   	push   eax
c001807a:	e8 93 fb ff ff       	call   c0017c12 <loadACPITables(unsigned char*)>
c001807f:	83 c4 10             	add    esp,0x10
c0018082:	a1 48 3c 03 c0       	mov    eax,ds:0xc0033c48
c0018087:	83 ec 08             	sub    esp,0x8
c001808a:	68 f1 ca 02 c0       	push   0xc002caf1
c001808f:	50                   	push   eax
c0018090:	e8 c2 fe ff ff       	call   c0017f57 <findDataTable(unsigned char*, char*)>
c0018095:	83 c4 10             	add    esp,0x10
c0018098:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001809c:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00180a1:	75 19                	jne    c00180bc <scanMADT()+0xc9>
c00180a3:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c00180a8:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00180ae:	83 e2 fe             	and    edx,0xfffffffe
c00180b1:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00180b7:	e9 b8 03 00 00       	jmp    c0018474 <scanMADT()+0x481>
c00180bc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00180c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00180cb:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00180cf:	0f 87 9f 03 00 00    	ja     c0018474 <scanMADT()+0x481>
c00180d5:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c00180dd:	0f 87 91 03 00 00    	ja     c0018474 <scanMADT()+0x481>
c00180e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180e7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00180eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180ef:	8d 50 01             	lea    edx,[eax+0x1]
c00180f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00180f6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180fa:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00180fe:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0018102:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018106:	8d 50 01             	lea    edx,[eax+0x1]
c0018109:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001810d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018111:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018115:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0018119:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c001811e:	0f 86 4f 03 00 00    	jbe    c0018473 <scanMADT()+0x480>
c0018124:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0018129:	75 57                	jne    c0018182 <scanMADT()+0x18f>
c001812b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001812f:	8d 50 01             	lea    edx,[eax+0x1]
c0018132:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018136:	8a 15 40 3a 03 c0    	mov    dl,BYTE PTR ds:0xc0033a40
c001813c:	0f b6 d2             	movzx  edx,dl
c001813f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0018143:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0018147:	88 82 00 3a 03 c0    	mov    BYTE PTR [edx-0x3ffcc600],al
c001814d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018151:	8d 50 01             	lea    edx,[eax+0x1]
c0018154:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018158:	8a 15 40 3a 03 c0    	mov    dl,BYTE PTR ds:0xc0033a40
c001815e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018161:	88 0d 40 3a 03 c0    	mov    BYTE PTR ds:0xc0033a40,cl
c0018167:	0f b6 d2             	movzx  edx,dl
c001816a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001816e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0018172:	88 82 20 3a 03 c0    	mov    BYTE PTR [edx-0x3ffcc5e0],al
c0018178:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001817d:	e9 da 02 00 00       	jmp    c001845c <scanMADT()+0x469>
c0018182:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0018187:	0f 85 14 01 00 00    	jne    c00182a1 <scanMADT()+0x2ae>
c001818d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018191:	8d 50 01             	lea    edx,[eax+0x1]
c0018194:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018198:	8a 15 80 3b 03 c0    	mov    dl,BYTE PTR ds:0xc0033b80
c001819e:	0f b6 d2             	movzx  edx,dl
c00181a1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00181a5:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00181a9:	88 82 60 3b 03 c0    	mov    BYTE PTR [edx-0x3ffcc4a0],al
c00181af:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00181b3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181bb:	01 d0                	add    eax,edx
c00181bd:	83 c0 2c             	add    eax,0x2c
c00181c0:	8a 00                	mov    al,BYTE PTR [eax]
c00181c2:	0f b6 d0             	movzx  edx,al
c00181c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181c9:	8d 48 01             	lea    ecx,[eax+0x1]
c00181cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181d0:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00181d4:	0f b6 c0             	movzx  eax,al
c00181d7:	c1 e0 08             	shl    eax,0x8
c00181da:	89 d1                	mov    ecx,edx
c00181dc:	09 c1                	or     ecx,eax
c00181de:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181e2:	8d 50 02             	lea    edx,[eax+0x2]
c00181e5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181e9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00181ed:	0f b6 c0             	movzx  eax,al
c00181f0:	c1 e0 10             	shl    eax,0x10
c00181f3:	09 c1                	or     ecx,eax
c00181f5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181f9:	8d 50 03             	lea    edx,[eax+0x3]
c00181fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018200:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018204:	0f b6 c0             	movzx  eax,al
c0018207:	c1 e0 18             	shl    eax,0x18
c001820a:	09 c1                	or     ecx,eax
c001820c:	89 ca                	mov    edx,ecx
c001820e:	a0 80 3b 03 c0       	mov    al,ds:0xc0033b80
c0018213:	0f b6 c0             	movzx  eax,al
c0018216:	89 14 85 e0 3a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcc520],edx
c001821d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018222:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018226:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001822a:	01 d0                	add    eax,edx
c001822c:	83 c0 2c             	add    eax,0x2c
c001822f:	8a 00                	mov    al,BYTE PTR [eax]
c0018231:	0f b6 d0             	movzx  edx,al
c0018234:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018238:	8d 48 01             	lea    ecx,[eax+0x1]
c001823b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001823f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018243:	0f b6 c0             	movzx  eax,al
c0018246:	c1 e0 08             	shl    eax,0x8
c0018249:	89 d1                	mov    ecx,edx
c001824b:	09 c1                	or     ecx,eax
c001824d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018251:	8d 50 02             	lea    edx,[eax+0x2]
c0018254:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018258:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001825c:	0f b6 c0             	movzx  eax,al
c001825f:	c1 e0 10             	shl    eax,0x10
c0018262:	09 c1                	or     ecx,eax
c0018264:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018268:	8d 50 03             	lea    edx,[eax+0x3]
c001826b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001826f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018273:	0f b6 c0             	movzx  eax,al
c0018276:	c1 e0 18             	shl    eax,0x18
c0018279:	09 c1                	or     ecx,eax
c001827b:	89 ca                	mov    edx,ecx
c001827d:	a0 80 3b 03 c0       	mov    al,ds:0xc0033b80
c0018282:	0f b6 c0             	movzx  eax,al
c0018285:	89 14 85 60 3a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcc5a0],edx
c001828c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018291:	a0 80 3b 03 c0       	mov    al,ds:0xc0033b80
c0018296:	40                   	inc    eax
c0018297:	a2 80 3b 03 c0       	mov    ds:0xc0033b80,al
c001829c:	e9 bb 01 00 00       	jmp    c001845c <scanMADT()+0x469>
c00182a1:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00182a6:	0f 85 e9 00 00 00    	jne    c0018395 <scanMADT()+0x3a2>
c00182ac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00182b0:	8d 50 01             	lea    edx,[eax+0x1]
c00182b3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00182b7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00182bb:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00182bf:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00182c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00182c7:	8d 50 01             	lea    edx,[eax+0x1]
c00182ca:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00182ce:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00182d2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00182d6:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00182da:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00182de:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00182e2:	01 d0                	add    eax,edx
c00182e4:	83 c0 2c             	add    eax,0x2c
c00182e7:	8a 00                	mov    al,BYTE PTR [eax]
c00182e9:	0f b6 d0             	movzx  edx,al
c00182ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00182f0:	8d 48 01             	lea    ecx,[eax+0x1]
c00182f3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00182f7:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00182fb:	0f b6 c0             	movzx  eax,al
c00182fe:	c1 e0 08             	shl    eax,0x8
c0018301:	89 d1                	mov    ecx,edx
c0018303:	09 c1                	or     ecx,eax
c0018305:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018309:	8d 50 02             	lea    edx,[eax+0x2]
c001830c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018310:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018314:	0f b6 c0             	movzx  eax,al
c0018317:	c1 e0 10             	shl    eax,0x10
c001831a:	09 c1                	or     ecx,eax
c001831c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018320:	8d 50 03             	lea    edx,[eax+0x3]
c0018323:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018327:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001832b:	0f b6 c0             	movzx  eax,al
c001832e:	c1 e0 18             	shl    eax,0x18
c0018331:	09 c8                	or     eax,ecx
c0018333:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018337:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001833c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018340:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018344:	01 d0                	add    eax,edx
c0018346:	83 c0 2c             	add    eax,0x2c
c0018349:	8a 00                	mov    al,BYTE PTR [eax]
c001834b:	0f b6 c0             	movzx  eax,al
c001834e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018352:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018355:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018359:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001835d:	0f b6 d2             	movzx  edx,dl
c0018360:	c1 e2 08             	shl    edx,0x8
c0018363:	09 d0                	or     eax,edx
c0018365:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001836a:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001836f:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0018374:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018378:	88 90 00 06 03 c0    	mov    BYTE PTR [eax-0x3ffcfa00],dl
c001837e:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0018383:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0018388:	66 89 84 12 a0 3b 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcc460],ax
c0018390:	e9 c7 00 00 00       	jmp    c001845c <scanMADT()+0x469>
c0018395:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c001839a:	0f 85 b0 00 00 00    	jne    c0018450 <scanMADT()+0x45d>
c00183a0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00183a4:	8d 50 01             	lea    edx,[eax+0x1]
c00183a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00183ab:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00183af:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00183b3:	0f b6 c0             	movzx  eax,al
c00183b6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00183ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00183be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00183c2:	01 d0                	add    eax,edx
c00183c4:	83 c0 2c             	add    eax,0x2c
c00183c7:	8a 00                	mov    al,BYTE PTR [eax]
c00183c9:	0f b6 d0             	movzx  edx,al
c00183cc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00183d0:	8d 48 01             	lea    ecx,[eax+0x1]
c00183d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00183d7:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00183db:	0f b6 c0             	movzx  eax,al
c00183de:	c1 e0 08             	shl    eax,0x8
c00183e1:	09 d0                	or     eax,edx
c00183e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00183e7:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00183ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00183f0:	8d 50 01             	lea    edx,[eax+0x1]
c00183f3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00183f7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00183fb:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00183ff:	0f b6 c0             	movzx  eax,al
c0018402:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001840a:	c1 e0 08             	shl    eax,0x8
c001840d:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0018411:	89 c1                	mov    ecx,eax
c0018413:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018417:	c1 e0 18             	shl    eax,0x18
c001841a:	89 c3                	mov    ebx,eax
c001841c:	a1 40 3c 03 c0       	mov    eax,ds:0xc0033c40
c0018421:	8d 50 01             	lea    edx,[eax+0x1]
c0018424:	89 15 40 3c 03 c0    	mov    DWORD PTR ds:0xc0033c40,edx
c001842a:	09 d9                	or     ecx,ebx
c001842c:	89 ca                	mov    edx,ecx
c001842e:	89 14 85 c0 3b 03 c0 	mov    DWORD PTR [eax*4-0x3ffcc440],edx
c0018435:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018439:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001843d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018441:	68 3c cc 02 c0       	push   0xc002cc3c
c0018446:	e8 fb ad ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001844b:	83 c4 10             	add    esp,0x10
c001844e:	eb 0c                	jmp    c001845c <scanMADT()+0x469>
c0018450:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0018455:	75 05                	jne    c001845c <scanMADT()+0x469>
c0018457:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001845c:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0018461:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018465:	01 d0                	add    eax,edx
c0018467:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001846b:	e9 54 fc ff ff       	jmp    c00180c4 <scanMADT()+0xd1>
c0018470:	90                   	nop
c0018471:	eb 01                	jmp    c0018474 <scanMADT()+0x481>
c0018473:	90                   	nop
c0018474:	83 c4 38             	add    esp,0x38
c0018477:	5b                   	pop    ebx
c0018478:	c3                   	ret    
c0018479:	90                   	nop

c001847a <ACPI::ACPI()>:
c001847a:	83 ec 0c             	sub    esp,0xc
c001847d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018481:	83 ec 08             	sub    esp,0x8
c0018484:	68 f6 ca 02 c0       	push   0xc002caf6
c0018489:	50                   	push   eax
c001848a:	e8 8d c0 ff ff       	call   c001451c <Device::Device(char const*)>
c001848f:	83 c4 10             	add    esp,0x10
c0018492:	ba d4 cc 02 c0       	mov    edx,0xc002ccd4
c0018497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001849b:	89 10                	mov    DWORD PTR [eax],edx
c001849d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184a1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00184a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184ac:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00184b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184ba:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00184c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184c8:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00184cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184d3:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00184da:	e8 14 fb ff ff       	call   c0017ff3 <scanMADT()>
c00184df:	90                   	nop
c00184e0:	83 c4 0c             	add    esp,0xc
c00184e3:	c3                   	ret    

c00184e4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00184e4:	83 ec 2c             	sub    esp,0x2c
c00184e7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00184eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00184ef:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00184f3:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00184f7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00184fc:	88 d0                	mov    al,dl
c00184fe:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018502:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0018507:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001850f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018513:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018519:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001851d:	0f 8d 97 00 00 00    	jge    c00185ba <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0018523:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018527:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001852b:	83 c2 2a             	add    edx,0x2a
c001852e:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0018532:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0018537:	75 78                	jne    c00185b1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018539:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001853d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018541:	83 c2 2a             	add    edx,0x2a
c0018544:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0018548:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001854c:	75 63                	jne    c00185b1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001854e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018553:	74 3a                	je     c001858f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0018555:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018559:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001855d:	83 c2 2a             	add    edx,0x2a
c0018560:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0018564:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018568:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001856b:	39 c2                	cmp    edx,eax
c001856d:	74 10                	je     c001857f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c001856f:	83 ec 0c             	sub    esp,0xc
c0018572:	68 78 cc 02 c0       	push   0xc002cc78
c0018577:	e8 7f 22 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c001857c:	83 c4 10             	add    esp,0x10
c001857f:	83 ec 0c             	sub    esp,0xc
c0018582:	68 fb ca 02 c0       	push   0xc002cafb
c0018587:	e8 6f 22 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c001858c:	83 c4 10             	add    esp,0x10
c001858f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018593:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018597:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001859b:	83 c2 2a             	add    edx,0x2a
c001859e:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00185a2:	8b 02                	mov    eax,DWORD PTR [edx]
c00185a4:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00185a7:	89 01                	mov    DWORD PTR [ecx],eax
c00185a9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00185ac:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00185b1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00185b5:	e9 55 ff ff ff       	jmp    c001850f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00185ba:	90                   	nop
c00185bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185bf:	83 c4 2c             	add    esp,0x2c
c00185c2:	c2 04 00             	ret    0x4
c00185c5:	90                   	nop

c00185c6 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00185c6:	83 ec 1c             	sub    esp,0x1c
c00185c9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00185cd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00185d1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00185d5:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00185da:	88 c8                	mov    al,cl
c00185dc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00185e0:	88 d0                	mov    al,dl
c00185e2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00185e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185ea:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00185f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185f4:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00185f7:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00185fb:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00185ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018603:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018609:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001860d:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0018610:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018614:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018619:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001861d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018623:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018627:	8d 48 01             	lea    ecx,[eax+0x1]
c001862a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001862e:	83 c2 2a             	add    edx,0x2a
c0018631:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0018635:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018639:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001863f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018643:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018646:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001864a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001864e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018652:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018658:	8d 50 01             	lea    edx,[eax+0x1]
c001865b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001865f:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0018665:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018669:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001866f:	3d 00 02 00 00       	cmp    eax,0x200
c0018674:	75 10                	jne    c0018686 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0018676:	83 ec 0c             	sub    esp,0xc
c0018679:	68 0a cb 02 c0       	push   0xc002cb0a
c001867e:	e8 78 21 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c0018683:	83 c4 10             	add    esp,0x10
c0018686:	90                   	nop
c0018687:	83 c4 1c             	add    esp,0x1c
c001868a:	c3                   	ret    
c001868b:	90                   	nop

c001868c <ACPI::setScreenBrightnessLevel(void*, int)>:
c001868c:	b8 00 00 00 00       	mov    eax,0x0
c0018691:	c3                   	ret    

c0018692 <ACPI::open(int, int, void*)>:
c0018692:	53                   	push   ebx
c0018693:	83 ec 28             	sub    esp,0x28
c0018696:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001869a:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00186a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00186a5:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00186ac:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c00186b1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00186b7:	83 e0 04             	and    eax,0x4
c00186ba:	84 c0                	test   al,al
c00186bc:	74 47                	je     c0018705 <ACPI::open(int, int, void*)+0x73>
c00186be:	a1 48 3c 03 c0       	mov    eax,ds:0xc0033c48
c00186c3:	83 ec 08             	sub    esp,0x8
c00186c6:	68 27 cb 02 c0       	push   0xc002cb27
c00186cb:	50                   	push   eax
c00186cc:	e8 86 f8 ff ff       	call   c0017f57 <findDataTable(unsigned char*, char*)>
c00186d1:	83 c4 10             	add    esp,0x10
c00186d4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00186d8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00186dd:	74 26                	je     c0018705 <ACPI::open(int, int, void*)+0x73>
c00186df:	83 ec 0c             	sub    esp,0xc
c00186e2:	68 2c cb 02 c0       	push   0xc002cb2c
c00186e7:	e8 5a ab ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00186ec:	83 c4 10             	add    esp,0x10
c00186ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00186f3:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00186fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00186fe:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018705:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c001870d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018711:	8a 00                	mov    al,BYTE PTR [eax]
c0018713:	3c 01                	cmp    al,0x1
c0018715:	75 28                	jne    c001873f <ACPI::open(int, int, void*)+0xad>
c0018717:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001871b:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018722:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018726:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001872d:	83 ec 0c             	sub    esp,0xc
c0018730:	68 3d cb 02 c0       	push   0xc002cb3d
c0018735:	e8 0c ab ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001873a:	83 c4 10             	add    esp,0x10
c001873d:	eb 25                	jmp    c0018764 <ACPI::open(int, int, void*)+0xd2>
c001873f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018743:	8a 00                	mov    al,BYTE PTR [eax]
c0018745:	3c 02                	cmp    al,0x2
c0018747:	75 1b                	jne    c0018764 <ACPI::open(int, int, void*)+0xd2>
c0018749:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001874d:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018754:	83 ec 0c             	sub    esp,0xc
c0018757:	68 45 cb 02 c0       	push   0xc002cb45
c001875c:	e8 e5 aa ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0018761:	83 c4 10             	add    esp,0x10
c0018764:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018768:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001876e:	83 f0 01             	xor    eax,0x1
c0018771:	84 c0                	test   al,al
c0018773:	74 6a                	je     c00187df <ACPI::open(int, int, void*)+0x14d>
c0018775:	83 ec 0c             	sub    esp,0xc
c0018778:	68 4d cb 02 c0       	push   0xc002cb4d
c001877d:	e8 c4 aa ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0018782:	83 c4 10             	add    esp,0x10
c0018785:	e8 c6 79 fe ff       	call   c0000150 <manualPCIProbe>
c001878a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001878e:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0018793:	75 28                	jne    c00187bd <ACPI::open(int, int, void*)+0x12b>
c0018795:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018799:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00187a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00187a4:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00187ab:	83 ec 0c             	sub    esp,0xc
c00187ae:	68 5b cb 02 c0       	push   0xc002cb5b
c00187b3:	e8 8e aa ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00187b8:	83 c4 10             	add    esp,0x10
c00187bb:	eb 22                	jmp    c00187df <ACPI::open(int, int, void*)+0x14d>
c00187bd:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c00187c2:	75 1b                	jne    c00187df <ACPI::open(int, int, void*)+0x14d>
c00187c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00187c8:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00187cf:	83 ec 0c             	sub    esp,0xc
c00187d2:	68 65 cb 02 c0       	push   0xc002cb65
c00187d7:	e8 6a aa ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00187dc:	83 c4 10             	add    esp,0x10
c00187df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00187e3:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00187e9:	84 c0                	test   al,al
c00187eb:	74 13                	je     c0018800 <ACPI::open(int, int, void*)+0x16e>
c00187ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00187f1:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c00187f7:	83 f0 01             	xor    eax,0x1
c00187fa:	0f b6 c0             	movzx  eax,al
c00187fd:	40                   	inc    eax
c00187fe:	eb 05                	jmp    c0018805 <ACPI::open(int, int, void*)+0x173>
c0018800:	b8 00 00 00 00       	mov    eax,0x0
c0018805:	83 ec 08             	sub    esp,0x8
c0018808:	50                   	push   eax
c0018809:	68 6f cb 02 c0       	push   0xc002cb6f
c001880e:	e8 33 aa ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0018813:	83 c4 10             	add    esp,0x10
c0018816:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001881a:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018820:	84 c0                	test   al,al
c0018822:	74 67                	je     c001888b <ACPI::open(int, int, void*)+0x1f9>
c0018824:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c001882c:	83 ec 0c             	sub    esp,0xc
c001882f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018833:	e8 24 77 ff ff       	call   c000ff5c <malloc>
c0018838:	83 c4 10             	add    esp,0x10
c001883b:	89 c3                	mov    ebx,eax
c001883d:	83 ec 0c             	sub    esp,0xc
c0018840:	53                   	push   ebx
c0018841:	e8 f6 a0 00 00       	call   c002293c <PCI::PCI()>
c0018846:	83 c4 10             	add    esp,0x10
c0018849:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001884d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018851:	83 ec 08             	sub    esp,0x8
c0018854:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018858:	50                   	push   eax
c0018859:	e8 e8 be ff ff       	call   c0014746 <Device::addChild(Device*)>
c001885e:	83 c4 10             	add    esp,0x10
c0018861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018865:	8b 00                	mov    eax,DWORD PTR [eax]
c0018867:	83 c0 08             	add    eax,0x8
c001886a:	8b 00                	mov    eax,DWORD PTR [eax]
c001886c:	6a 00                	push   0x0
c001886e:	6a 00                	push   0x0
c0018870:	6a 00                	push   0x0
c0018872:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018876:	ff d0                	call   eax
c0018878:	83 c4 10             	add    esp,0x10
c001887b:	83 ec 0c             	sub    esp,0xc
c001887e:	68 78 cb 02 c0       	push   0xc002cb78
c0018883:	e8 be a9 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0018888:	83 c4 10             	add    esp,0x10
c001888b:	83 ec 0c             	sub    esp,0xc
c001888e:	68 83 cb 02 c0       	push   0xc002cb83
c0018893:	e8 ee 44 00 00       	call   c001cd86 <Thr::loadKernelSymbolTable(char const*)>
c0018898:	83 c4 10             	add    esp,0x10
c001889b:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c00188a0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00188a6:	83 e0 04             	and    eax,0x4
c00188a9:	84 c0                	test   al,al
c00188ab:	0f 84 d2 00 00 00    	je     c0018983 <ACPI::open(int, int, void*)+0x2f1>
c00188b1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00188b8:	83 ec 0c             	sub    esp,0xc
c00188bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00188bf:	e8 98 76 ff ff       	call   c000ff5c <malloc>
c00188c4:	83 c4 10             	add    esp,0x10
c00188c7:	89 c3                	mov    ebx,eax
c00188c9:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c00188ce:	83 ec 04             	sub    esp,0x4
c00188d1:	50                   	push   eax
c00188d2:	68 a1 cb 02 c0       	push   0xc002cba1
c00188d7:	53                   	push   ebx
c00188d8:	e8 15 ae ff ff       	call   c00136f2 <File::File(char const*, Process*)>
c00188dd:	83 c4 10             	add    esp,0x10
c00188e0:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00188e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00188e9:	74 17                	je     c0018902 <ACPI::open(int, int, void*)+0x270>
c00188eb:	83 ec 0c             	sub    esp,0xc
c00188ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00188f2:	e8 cb b1 ff ff       	call   c0013ac2 <File::exists()>
c00188f7:	83 c4 10             	add    esp,0x10
c00188fa:	84 c0                	test   al,al
c00188fc:	74 04                	je     c0018902 <ACPI::open(int, int, void*)+0x270>
c00188fe:	b0 01                	mov    al,0x1
c0018900:	eb 02                	jmp    c0018904 <ACPI::open(int, int, void*)+0x272>
c0018902:	b0 00                	mov    al,0x0
c0018904:	84 c0                	test   al,al
c0018906:	74 22                	je     c001892a <ACPI::open(int, int, void*)+0x298>
c0018908:	83 ec 08             	sub    esp,0x8
c001890b:	6a 01                	push   0x1
c001890d:	68 a1 cb 02 c0       	push   0xc002cba1
c0018912:	e8 c2 4e 00 00       	call   c001d7d9 <Thr::loadDLL(char const*, bool)>
c0018917:	83 c4 10             	add    esp,0x10
c001891a:	83 ec 08             	sub    esp,0x8
c001891d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018921:	50                   	push   eax
c0018922:	e8 c1 50 00 00       	call   c001d9e8 <Thr::executeDLL(unsigned long, void*)>
c0018927:	83 c4 10             	add    esp,0x10
c001892a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001892f:	74 1e                	je     c001894f <ACPI::open(int, int, void*)+0x2bd>
c0018931:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018936:	74 17                	je     c001894f <ACPI::open(int, int, void*)+0x2bd>
c0018938:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001893c:	8b 00                	mov    eax,DWORD PTR [eax]
c001893e:	83 c0 08             	add    eax,0x8
c0018941:	8b 00                	mov    eax,DWORD PTR [eax]
c0018943:	83 ec 0c             	sub    esp,0xc
c0018946:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001894a:	ff d0                	call   eax
c001894c:	83 c4 10             	add    esp,0x10
c001894f:	a1 48 3c 03 c0       	mov    eax,ds:0xc0033c48
c0018954:	83 ec 08             	sub    esp,0x8
c0018957:	68 be cb 02 c0       	push   0xc002cbbe
c001895c:	50                   	push   eax
c001895d:	e8 f5 f5 ff ff       	call   c0017f57 <findDataTable(unsigned char*, char*)>
c0018962:	83 c4 10             	add    esp,0x10
c0018965:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018969:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001896e:	74 13                	je     c0018983 <ACPI::open(int, int, void*)+0x2f1>
c0018970:	83 ec 08             	sub    esp,0x8
c0018973:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018977:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001897b:	e8 58 00 00 00       	call   c00189d8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018980:	83 c4 10             	add    esp,0x10
c0018983:	8b 1d 90 13 03 c0    	mov    ebx,DWORD PTR ds:0xc0031390
c0018989:	83 ec 08             	sub    esp,0x8
c001898c:	6a 01                	push   0x1
c001898e:	68 c3 cb 02 c0       	push   0xc002cbc3
c0018993:	e8 41 4e 00 00       	call   c001d7d9 <Thr::loadDLL(char const*, bool)>
c0018998:	83 c4 10             	add    esp,0x10
c001899b:	83 ec 08             	sub    esp,0x8
c001899e:	53                   	push   ebx
c001899f:	50                   	push   eax
c00189a0:	e8 43 50 00 00       	call   c001d9e8 <Thr::executeDLL(unsigned long, void*)>
c00189a5:	83 c4 10             	add    esp,0x10
c00189a8:	8b 1d 90 13 03 c0    	mov    ebx,DWORD PTR ds:0xc0031390
c00189ae:	83 ec 08             	sub    esp,0x8
c00189b1:	6a 01                	push   0x1
c00189b3:	68 e0 cb 02 c0       	push   0xc002cbe0
c00189b8:	e8 1c 4e 00 00       	call   c001d7d9 <Thr::loadDLL(char const*, bool)>
c00189bd:	83 c4 10             	add    esp,0x10
c00189c0:	83 ec 08             	sub    esp,0x8
c00189c3:	53                   	push   ebx
c00189c4:	50                   	push   eax
c00189c5:	e8 1e 50 00 00       	call   c001d9e8 <Thr::executeDLL(unsigned long, void*)>
c00189ca:	83 c4 10             	add    esp,0x10
c00189cd:	b8 00 00 00 00       	mov    eax,0x0
c00189d2:	83 c4 28             	add    esp,0x28
c00189d5:	5b                   	pop    ebx
c00189d6:	c3                   	ret    
c00189d7:	90                   	nop

c00189d8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00189d8:	83 ec 1c             	sub    esp,0x1c
c00189db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00189df:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00189e2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00189e6:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c00189eb:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00189f0:	83 ec 08             	sub    esp,0x8
c00189f3:	52                   	push   edx
c00189f4:	50                   	push   eax
c00189f5:	e8 76 6c ff ff       	call   c000f670 <Computer::readCMOS(unsigned char)>
c00189fa:	83 c4 10             	add    esp,0x10
c00189fd:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018a01:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0018a06:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018a0b:	83 ec 04             	sub    esp,0x4
c0018a0e:	6a 01                	push   0x1
c0018a10:	52                   	push   edx
c0018a11:	50                   	push   eax
c0018a12:	e8 73 6c ff ff       	call   c000f68a <Computer::writeCMOS(unsigned char, unsigned char)>
c0018a17:	83 c4 10             	add    esp,0x10
c0018a1a:	90                   	nop
c0018a1b:	83 c4 1c             	add    esp,0x1c
c0018a1e:	c3                   	ret    
c0018a1f:	90                   	nop

c0018a20 <ACPI::sleep()>:
c0018a20:	83 ec 0c             	sub    esp,0xc
c0018a23:	a1 6c 3e 03 c0       	mov    eax,ds:0xc0033e6c
c0018a28:	85 c0                	test   eax,eax
c0018a2a:	74 07                	je     c0018a33 <ACPI::sleep()+0x13>
c0018a2c:	a1 6c 3e 03 c0       	mov    eax,ds:0xc0033e6c
c0018a31:	ff d0                	call   eax
c0018a33:	90                   	nop
c0018a34:	83 c4 0c             	add    esp,0xc
c0018a37:	c3                   	ret    

c0018a38 <ACPI::close(int, int, void*)>:
c0018a38:	83 ec 1c             	sub    esp,0x1c
c0018a3b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0018a43:	74 0a                	je     c0018a4f <ACPI::close(int, int, void*)+0x17>
c0018a45:	b8 00 00 00 00       	mov    eax,0x0
c0018a4a:	e9 9a 00 00 00       	jmp    c0018ae9 <ACPI::close(int, int, void*)+0xb1>
c0018a4f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018a54:	75 37                	jne    c0018a8d <ACPI::close(int, int, void*)+0x55>
c0018a56:	83 ec 0c             	sub    esp,0xc
c0018a59:	68 fd cb 02 c0       	push   0xc002cbfd
c0018a5e:	e8 e3 a7 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0018a63:	83 c4 10             	add    esp,0x10
c0018a66:	a1 64 3e 03 c0       	mov    eax,ds:0xc0033e64
c0018a6b:	85 c0                	test   eax,eax
c0018a6d:	74 07                	je     c0018a76 <ACPI::close(int, int, void*)+0x3e>
c0018a6f:	a1 64 3e 03 c0       	mov    eax,ds:0xc0033e64
c0018a74:	ff d0                	call   eax
c0018a76:	83 ec 0c             	sub    esp,0xc
c0018a79:	68 a8 cc 02 c0       	push   0xc002cca8
c0018a7e:	e8 78 1d 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c0018a83:	83 c4 10             	add    esp,0x10
c0018a86:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0018a8b:	eb 5c                	jmp    c0018ae9 <ACPI::close(int, int, void*)+0xb1>
c0018a8d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0018a92:	75 50                	jne    c0018ae4 <ACPI::close(int, int, void*)+0xac>
c0018a94:	a1 68 3e 03 c0       	mov    eax,ds:0xc0033e68
c0018a99:	85 c0                	test   eax,eax
c0018a9b:	74 07                	je     c0018aa4 <ACPI::close(int, int, void*)+0x6c>
c0018a9d:	a1 68 3e 03 c0       	mov    eax,ds:0xc0033e68
c0018aa2:	ff d0                	call   eax
c0018aa4:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0018aa9:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018aae:	83 e0 02             	and    eax,0x2
c0018ab1:	74 1c                	je     c0018acf <ACPI::close(int, int, void*)+0x97>
c0018ab3:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0018aba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018abe:	89 c2                	mov    edx,eax
c0018ac0:	ec                   	in     al,dx
c0018ac1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018ac5:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0018ac9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018acd:	eb da                	jmp    c0018aa9 <ACPI::close(int, int, void*)+0x71>
c0018acf:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0018ad6:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0018adb:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0018adf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018ae3:	ee                   	out    dx,al
c0018ae4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0018ae9:	83 c4 1c             	add    esp,0x1c
c0018aec:	c3                   	ret    
c0018aed:	90                   	nop

c0018aee <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018aee:	55                   	push   ebp
c0018aef:	57                   	push   edi
c0018af0:	56                   	push   esi
c0018af1:	53                   	push   ebx
c0018af2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018af6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018afa:	89 ce                	mov    esi,ecx
c0018afc:	89 d5                	mov    ebp,edx
c0018afe:	80 f9 04             	cmp    cl,0x4
c0018b01:	75 28                	jne    c0018b2b <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018b03:	8d 42 f9             	lea    eax,[edx-0x7]
c0018b06:	3c 03                	cmp    al,0x3
c0018b08:	0f 86 63 01 00 00    	jbe    c0018c71 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018b0e:	80 fa 03             	cmp    dl,0x3
c0018b11:	0f 84 5a 01 00 00    	je     c0018c71 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018b17:	8d 7a f2             	lea    edi,[edx-0xe]
c0018b1a:	b8 f0 07 03 c0       	mov    eax,0xc00307f0
c0018b1f:	89 fb                	mov    ebx,edi
c0018b21:	80 fb 01             	cmp    bl,0x1
c0018b24:	77 4e                	ja     c0018b74 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018b26:	e9 52 01 00 00       	jmp    c0018c7d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b2b:	80 f9 05             	cmp    cl,0x5
c0018b2e:	75 4d                	jne    c0018b7d <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018b30:	b8 00 08 03 c0       	mov    eax,0xc0030800
c0018b35:	80 fa 03             	cmp    dl,0x3
c0018b38:	0f 86 3f 01 00 00    	jbe    c0018c7d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b3e:	8d 7a fa             	lea    edi,[edx-0x6]
c0018b41:	b8 10 08 03 c0       	mov    eax,0xc0030810
c0018b46:	89 fb                	mov    ebx,edi
c0018b48:	80 fb 01             	cmp    bl,0x1
c0018b4b:	0f 86 2c 01 00 00    	jbe    c0018c7d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b51:	b8 20 08 03 c0       	mov    eax,0xc0030820
c0018b56:	80 fa 08             	cmp    dl,0x8
c0018b59:	0f 84 1e 01 00 00    	je     c0018c7d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b5f:	89 d7                	mov    edi,edx
c0018b61:	b8 30 08 03 c0       	mov    eax,0xc0030830
c0018b66:	83 e7 fb             	and    edi,0xfffffffb
c0018b69:	89 fb                	mov    ebx,edi
c0018b6b:	80 fb 09             	cmp    bl,0x9
c0018b6e:	0f 84 09 01 00 00    	je     c0018c7d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b74:	31 c0                	xor    eax,eax
c0018b76:	89 eb                	mov    ebx,ebp
c0018b78:	0f b6 fb             	movzx  edi,bl
c0018b7b:	eb 30                	jmp    c0018bad <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018b7d:	31 c0                	xor    eax,eax
c0018b7f:	80 f9 06             	cmp    cl,0x6
c0018b82:	75 f2                	jne    c0018b76 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018b84:	80 fa 0a             	cmp    dl,0xa
c0018b87:	77 ed                	ja     c0018b76 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018b89:	bf de 05 00 00       	mov    edi,0x5de
c0018b8e:	0f a3 d7             	bt     edi,edx
c0018b91:	73 e3                	jae    c0018b76 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018b93:	b8 40 08 03 c0       	mov    eax,0xc0030840
c0018b98:	e9 e0 00 00 00       	jmp    c0018c7d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b9d:	39 c7                	cmp    edi,eax
c0018b9f:	0f 84 d3 00 00 00    	je     c0018c78 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018ba5:	40                   	inc    eax
c0018ba6:	3d d0 00 00 00       	cmp    eax,0xd0
c0018bab:	74 09                	je     c0018bb6 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018bad:	89 f3                	mov    ebx,esi
c0018baf:	80 fb 0f             	cmp    bl,0xf
c0018bb2:	75 f1                	jne    c0018ba5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018bb4:	eb e7                	jmp    c0018b9d <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018bb6:	80 f9 10             	cmp    cl,0x10
c0018bb9:	75 14                	jne    c0018bcf <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018bbb:	8d 42 fc             	lea    eax,[edx-0x4]
c0018bbe:	83 e0 fb             	and    eax,0xfffffffb
c0018bc1:	3c 02                	cmp    al,0x2
c0018bc3:	76 34                	jbe    c0018bf9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018bc5:	b8 8a d0 02 c0       	mov    eax,0xc002d08a
c0018bca:	80 fa 02             	cmp    dl,0x2
c0018bcd:	eb 24                	jmp    c0018bf3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018bcf:	80 f9 11             	cmp    cl,0x11
c0018bd2:	75 13                	jne    c0018be7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018bd4:	b8 8a d0 02 c0       	mov    eax,0xc002d08a
c0018bd9:	80 fa 03             	cmp    dl,0x3
c0018bdc:	0f 85 9b 00 00 00    	jne    c0018c7d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018be2:	e9 91 00 00 00       	jmp    c0018c78 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018be7:	80 f9 12             	cmp    cl,0x12
c0018bea:	75 14                	jne    c0018c00 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018bec:	b8 8a d0 02 c0       	mov    eax,0xc002d08a
c0018bf1:	fe ca                	dec    dl
c0018bf3:	0f 85 84 00 00 00    	jne    c0018c7d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bf9:	b8 60 08 03 c0       	mov    eax,0xc0030860
c0018bfe:	eb 7d                	jmp    c0018c7d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c00:	80 f9 14             	cmp    cl,0x14
c0018c03:	75 12                	jne    c0018c17 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018c05:	4a                   	dec    edx
c0018c06:	b8 8a d0 02 c0       	mov    eax,0xc002d08a
c0018c0b:	80 fa 01             	cmp    dl,0x1
c0018c0e:	77 6d                	ja     c0018c7d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c10:	b8 70 08 03 c0       	mov    eax,0xc0030870
c0018c15:	eb 66                	jmp    c0018c7d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c17:	80 f9 15             	cmp    cl,0x15
c0018c1a:	75 31                	jne    c0018c4d <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018c1c:	b8 80 08 03 c0       	mov    eax,0xc0030880
c0018c21:	80 fa 01             	cmp    dl,0x1
c0018c24:	74 57                	je     c0018c7d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c26:	b8 8a d0 02 c0       	mov    eax,0xc002d08a
c0018c2b:	80 fa 13             	cmp    dl,0x13
c0018c2e:	76 0c                	jbe    c0018c3c <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018c30:	80 fa 30             	cmp    dl,0x30
c0018c33:	75 48                	jne    c0018c7d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c35:	b8 a0 08 03 c0       	mov    eax,0xc00308a0
c0018c3a:	eb 41                	jmp    c0018c7d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c3c:	b9 04 00 09 00       	mov    ecx,0x90004
c0018c41:	0f a3 d1             	bt     ecx,edx
c0018c44:	73 37                	jae    c0018c7d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c46:	b8 90 08 03 c0       	mov    eax,0xc0030890
c0018c4b:	eb 30                	jmp    c0018c7d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c4d:	b8 8a d0 02 c0       	mov    eax,0xc002d08a
c0018c52:	80 f9 16             	cmp    cl,0x16
c0018c55:	75 26                	jne    c0018c7d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c57:	b8 b0 08 03 c0       	mov    eax,0xc00308b0
c0018c5c:	84 d2                	test   dl,dl
c0018c5e:	74 1d                	je     c0018c7d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c60:	b8 8a d0 02 c0       	mov    eax,0xc002d08a
c0018c65:	80 fa 30             	cmp    dl,0x30
c0018c68:	75 13                	jne    c0018c7d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c6a:	b8 c0 08 03 c0       	mov    eax,0xc00308c0
c0018c6f:	eb 0c                	jmp    c0018c7d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c71:	b8 e0 07 03 c0       	mov    eax,0xc00307e0
c0018c76:	eb 05                	jmp    c0018c7d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c78:	b8 50 08 03 c0       	mov    eax,0xc0030850
c0018c7d:	5b                   	pop    ebx
c0018c7e:	5e                   	pop    esi
c0018c7f:	5f                   	pop    edi
c0018c80:	5d                   	pop    ebp
c0018c81:	c3                   	ret    

c0018c82 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018c82:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018c8a:	80 f9 04             	cmp    cl,0x4
c0018c8d:	75 6b                	jne    c0018cfa <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018c8f:	b8 40 06 03 c0       	mov    eax,0xc0030640
c0018c94:	80 fa 01             	cmp    dl,0x1
c0018c97:	0f 86 92 02 00 00    	jbe    c0018f2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c9d:	b8 50 06 03 c0       	mov    eax,0xc0030650
c0018ca2:	80 fa 02             	cmp    dl,0x2
c0018ca5:	0f 84 84 02 00 00    	je     c0018f2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cab:	b8 60 06 03 c0       	mov    eax,0xc0030660
c0018cb0:	80 fa 03             	cmp    dl,0x3
c0018cb3:	0f 84 76 02 00 00    	je     c0018f2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cb9:	b8 70 06 03 c0       	mov    eax,0xc0030670
c0018cbe:	80 fa 04             	cmp    dl,0x4
c0018cc1:	0f 84 68 02 00 00    	je     c0018f2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cc7:	b8 80 06 03 c0       	mov    eax,0xc0030680
c0018ccc:	80 fa 05             	cmp    dl,0x5
c0018ccf:	0f 84 5a 02 00 00    	je     c0018f2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cd5:	b8 60 06 03 c0       	mov    eax,0xc0030660
c0018cda:	80 fa 07             	cmp    dl,0x7
c0018cdd:	0f 84 4c 02 00 00    	je     c0018f2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ce3:	83 ea 08             	sub    edx,0x8
c0018ce6:	b8 8a d0 02 c0       	mov    eax,0xc002d08a
c0018ceb:	80 fa 01             	cmp    dl,0x1
c0018cee:	0f 87 3b 02 00 00    	ja     c0018f2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cf4:	b8 90 06 03 c0       	mov    eax,0xc0030690
c0018cf9:	c3                   	ret    
c0018cfa:	80 f9 05             	cmp    cl,0x5
c0018cfd:	75 45                	jne    c0018d44 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018cff:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018d02:	b8 a0 06 03 c0       	mov    eax,0xc00306a0
c0018d07:	80 f9 02             	cmp    cl,0x2
c0018d0a:	0f 86 1f 02 00 00    	jbe    c0018f2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d10:	80 fa 04             	cmp    dl,0x4
c0018d13:	0f 84 f3 01 00 00    	je     c0018f0c <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018d19:	80 fa 07             	cmp    dl,0x7
c0018d1c:	0f 84 0d 02 00 00    	je     c0018f2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d22:	b8 b0 06 03 c0       	mov    eax,0xc00306b0
c0018d27:	80 fa 08             	cmp    dl,0x8
c0018d2a:	0f 84 ff 01 00 00    	je     c0018f2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d30:	b8 8a d0 02 c0       	mov    eax,0xc002d08a
c0018d35:	80 fa 09             	cmp    dl,0x9
c0018d38:	0f 85 f1 01 00 00    	jne    c0018f2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d3e:	b8 c0 06 03 c0       	mov    eax,0xc00306c0
c0018d43:	c3                   	ret    
c0018d44:	80 f9 06             	cmp    cl,0x6
c0018d47:	0f 85 85 01 00 00    	jne    c0018ed2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018d4d:	b8 d0 06 03 c0       	mov    eax,0xc00306d0
c0018d52:	80 fa 01             	cmp    dl,0x1
c0018d55:	0f 84 d4 01 00 00    	je     c0018f2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d5b:	8d 42 fb             	lea    eax,[edx-0x5]
c0018d5e:	3c 01                	cmp    al,0x1
c0018d60:	0f 86 ac 01 00 00    	jbe    c0018f12 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018d66:	80 fa 03             	cmp    dl,0x3
c0018d69:	0f 84 a3 01 00 00    	je     c0018f12 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018d6f:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018d72:	b8 f0 06 03 c0       	mov    eax,0xc00306f0
c0018d77:	80 f9 01             	cmp    cl,0x1
c0018d7a:	0f 86 af 01 00 00    	jbe    c0018f2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d80:	80 fa 09             	cmp    dl,0x9
c0018d83:	0f 84 8f 01 00 00    	je     c0018f18 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018d89:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018d8c:	80 f9 01             	cmp    cl,0x1
c0018d8f:	0f 86 9a 01 00 00    	jbe    c0018f2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d95:	b8 00 07 03 c0       	mov    eax,0xc0030700
c0018d9a:	80 fa 0d             	cmp    dl,0xd
c0018d9d:	0f 84 8c 01 00 00    	je     c0018f2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018da3:	b8 10 07 03 c0       	mov    eax,0xc0030710
c0018da8:	80 fa 0e             	cmp    dl,0xe
c0018dab:	0f 84 7e 01 00 00    	je     c0018f2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018db1:	b8 20 07 03 c0       	mov    eax,0xc0030720
c0018db6:	80 fa 0f             	cmp    dl,0xf
c0018db9:	0f 84 70 01 00 00    	je     c0018f2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dbf:	b8 00 07 03 c0       	mov    eax,0xc0030700
c0018dc4:	80 fa 15             	cmp    dl,0x15
c0018dc7:	0f 84 62 01 00 00    	je     c0018f2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dcd:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018dd0:	b8 20 07 03 c0       	mov    eax,0xc0030720
c0018dd5:	80 f9 01             	cmp    cl,0x1
c0018dd8:	0f 86 51 01 00 00    	jbe    c0018f2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dde:	80 fa 1a             	cmp    dl,0x1a
c0018de1:	0f 84 37 01 00 00    	je     c0018f1e <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018de7:	80 fa 1c             	cmp    dl,0x1c
c0018dea:	0f 84 34 01 00 00    	je     c0018f24 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018df0:	80 fa 1d             	cmp    dl,0x1d
c0018df3:	0f 84 36 01 00 00    	je     c0018f2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018df9:	b8 50 07 03 c0       	mov    eax,0xc0030750
c0018dfe:	80 fa 25             	cmp    dl,0x25
c0018e01:	0f 84 28 01 00 00    	je     c0018f2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e07:	8d 4a da             	lea    ecx,[edx-0x26]
c0018e0a:	b8 40 07 03 c0       	mov    eax,0xc0030740
c0018e0f:	80 f9 01             	cmp    cl,0x1
c0018e12:	0f 86 17 01 00 00    	jbe    c0018f2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e18:	b8 60 07 03 c0       	mov    eax,0xc0030760
c0018e1d:	80 fa 2a             	cmp    dl,0x2a
c0018e20:	0f 84 09 01 00 00    	je     c0018f2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e26:	b8 50 07 03 c0       	mov    eax,0xc0030750
c0018e2b:	80 fa 2c             	cmp    dl,0x2c
c0018e2e:	0f 84 fb 00 00 00    	je     c0018f2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e34:	b8 60 07 03 c0       	mov    eax,0xc0030760
c0018e39:	80 fa 2d             	cmp    dl,0x2d
c0018e3c:	0f 84 ed 00 00 00    	je     c0018f2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e42:	b8 30 07 03 c0       	mov    eax,0xc0030730
c0018e47:	80 fa 2e             	cmp    dl,0x2e
c0018e4a:	0f 84 df 00 00 00    	je     c0018f2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e50:	b8 50 07 03 c0       	mov    eax,0xc0030750
c0018e55:	80 fa 2f             	cmp    dl,0x2f
c0018e58:	0f 84 d1 00 00 00    	je     c0018f2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e5e:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018e61:	b8 40 07 03 c0       	mov    eax,0xc0030740
c0018e66:	80 f9 01             	cmp    cl,0x1
c0018e69:	0f 86 c0 00 00 00    	jbe    c0018f2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e6f:	b8 70 07 03 c0       	mov    eax,0xc0030770
c0018e74:	80 fa 37             	cmp    dl,0x37
c0018e77:	0f 84 b2 00 00 00    	je     c0018f2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e7d:	b8 80 07 03 c0       	mov    eax,0xc0030780
c0018e82:	80 fa 3a             	cmp    dl,0x3a
c0018e85:	0f 84 a4 00 00 00    	je     c0018f2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e8b:	b8 90 07 03 c0       	mov    eax,0xc0030790
c0018e90:	80 fa 3c             	cmp    dl,0x3c
c0018e93:	0f 84 96 00 00 00    	je     c0018f2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e99:	b8 a0 07 03 c0       	mov    eax,0xc00307a0
c0018e9e:	80 fa 3d             	cmp    dl,0x3d
c0018ea1:	0f 84 88 00 00 00    	je     c0018f2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ea7:	b8 80 07 03 c0       	mov    eax,0xc0030780
c0018eac:	80 fa 3e             	cmp    dl,0x3e
c0018eaf:	74 7e                	je     c0018f2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018eb1:	8d 42 bb             	lea    eax,[edx-0x45]
c0018eb4:	3c 01                	cmp    al,0x1
c0018eb6:	76 72                	jbe    c0018f2a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018eb8:	80 fa 3f             	cmp    dl,0x3f
c0018ebb:	74 6d                	je     c0018f2a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018ebd:	80 fa 4a             	cmp    dl,0x4a
c0018ec0:	74 0a                	je     c0018ecc <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018ec2:	b8 8a d0 02 c0       	mov    eax,0xc002d08a
c0018ec7:	80 fa 4d             	cmp    dl,0x4d
c0018eca:	75 63                	jne    c0018f2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ecc:	b8 70 07 03 c0       	mov    eax,0xc0030770
c0018ed1:	c3                   	ret    
c0018ed2:	b8 8a d0 02 c0       	mov    eax,0xc002d08a
c0018ed7:	80 f9 0b             	cmp    cl,0xb
c0018eda:	75 0a                	jne    c0018ee6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018edc:	fe ca                	dec    dl
c0018ede:	75 4f                	jne    c0018f2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ee0:	b8 b0 07 03 c0       	mov    eax,0xc00307b0
c0018ee5:	c3                   	ret    
c0018ee6:	80 f9 0f             	cmp    cl,0xf
c0018ee9:	75 44                	jne    c0018f2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018eeb:	b8 c0 07 03 c0       	mov    eax,0xc00307c0
c0018ef0:	80 fa 02             	cmp    dl,0x2
c0018ef3:	76 3a                	jbe    c0018f2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ef5:	8d 42 fd             	lea    eax,[edx-0x3]
c0018ef8:	3c 01                	cmp    al,0x1
c0018efa:	76 0a                	jbe    c0018f06 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018efc:	b8 8a d0 02 c0       	mov    eax,0xc002d08a
c0018f01:	80 fa 06             	cmp    dl,0x6
c0018f04:	75 29                	jne    c0018f2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018f06:	b8 d0 07 03 c0       	mov    eax,0xc00307d0
c0018f0b:	c3                   	ret    
c0018f0c:	b8 b0 06 03 c0       	mov    eax,0xc00306b0
c0018f11:	c3                   	ret    
c0018f12:	b8 e0 06 03 c0       	mov    eax,0xc00306e0
c0018f17:	c3                   	ret    
c0018f18:	b8 00 07 03 c0       	mov    eax,0xc0030700
c0018f1d:	c3                   	ret    
c0018f1e:	b8 30 07 03 c0       	mov    eax,0xc0030730
c0018f23:	c3                   	ret    
c0018f24:	b8 40 07 03 c0       	mov    eax,0xc0030740
c0018f29:	c3                   	ret    
c0018f2a:	b8 90 07 03 c0       	mov    eax,0xc0030790
c0018f2f:	c3                   	ret    

c0018f30 <CPU::AMD_K6_writeback(int, int, int)>:
c0018f30:	56                   	push   esi
c0018f31:	53                   	push   ebx
c0018f32:	83 ec 14             	sub    esp,0x14
c0018f35:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018f39:	83 7c 24 20 05       	cmp    DWORD PTR [esp+0x20],0x5
c0018f3e:	75 65                	jne    c0018fa5 <CPU::AMD_K6_writeback(int, int, int)+0x75>
c0018f40:	83 f8 08             	cmp    eax,0x8
c0018f43:	75 09                	jne    c0018f4e <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018f45:	83 7c 24 28 07       	cmp    DWORD PTR [esp+0x28],0x7
c0018f4a:	7e 13                	jle    c0018f5f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018f4c:	eb 34                	jmp    c0018f82 <CPU::AMD_K6_writeback(int, int, int)+0x52>
c0018f4e:	83 f8 06             	cmp    eax,0x6
c0018f51:	7c 52                	jl     c0018fa5 <CPU::AMD_K6_writeback(int, int, int)+0x75>
c0018f53:	83 f8 07             	cmp    eax,0x7
c0018f56:	7e 07                	jle    c0018f5f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018f58:	83 f8 09             	cmp    eax,0x9
c0018f5b:	74 25                	je     c0018f82 <CPU::AMD_K6_writeback(int, int, int)+0x52>
c0018f5d:	eb 46                	jmp    c0018fa5 <CPU::AMD_K6_writeback(int, int, int)+0x75>
c0018f5f:	8b 1d fc 13 03 c0    	mov    ebx,DWORD PTR ds:0xc00313fc
c0018f65:	c1 eb 15             	shr    ebx,0x15
c0018f68:	52                   	push   edx
c0018f69:	83 e3 7e             	and    ebx,0x7e
c0018f6c:	52                   	push   edx
c0018f6d:	8d 74 24 08          	lea    esi,[esp+0x8]
c0018f71:	56                   	push   esi
c0018f72:	68 82 00 00 c0       	push   0xc0000082
c0018f77:	e8 4c 00 00 00       	call   c0018fc8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018f7c:	56                   	push   esi
c0018f7d:	6a 00                	push   0x0
c0018f7f:	53                   	push   ebx
c0018f80:	eb 16                	jmp    c0018f98 <CPU::AMD_K6_writeback(int, int, int)+0x68>
c0018f82:	50                   	push   eax
c0018f83:	50                   	push   eax
c0018f84:	8d 5c 24 08          	lea    ebx,[esp+0x8]
c0018f88:	53                   	push   ebx
c0018f89:	68 82 00 00 c0       	push   0xc0000082
c0018f8e:	e8 35 00 00 00       	call   c0018fc8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018f93:	53                   	push   ebx
c0018f94:	6a 00                	push   0x0
c0018f96:	6a 00                	push   0x0
c0018f98:	68 82 00 00 c0       	push   0xc0000082
c0018f9d:	e8 0a 00 00 00       	call   c0018fac <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018fa2:	83 c4 20             	add    esp,0x20
c0018fa5:	83 c4 14             	add    esp,0x14
c0018fa8:	5b                   	pop    ebx
c0018fa9:	5e                   	pop    esi
c0018faa:	c3                   	ret    
c0018fab:	90                   	nop

c0018fac <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018fac:	60                   	pusha  
c0018fad:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018fb1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018fb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018fb9:	9c                   	pushf  
c0018fba:	fa                   	cli    
c0018fbb:	0f 09                	wbinvd 
c0018fbd:	0f 30                	wrmsr  
c0018fbf:	9d                   	popf   
c0018fc0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018fc4:	89 02                	mov    DWORD PTR [edx],eax
c0018fc6:	61                   	popa   
c0018fc7:	c3                   	ret    

c0018fc8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018fc8:	60                   	pusha  
c0018fc9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018fcd:	9c                   	pushf  
c0018fce:	fa                   	cli    
c0018fcf:	0f 09                	wbinvd 
c0018fd1:	31 c0                	xor    eax,eax
c0018fd3:	31 d2                	xor    edx,edx
c0018fd5:	0f 32                	rdmsr  
c0018fd7:	9d                   	popf   
c0018fd8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018fdc:	89 02                	mov    DWORD PTR [edx],eax
c0018fde:	61                   	popa   
c0018fdf:	c3                   	ret    

c0018fe0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018fe0:	55                   	push   ebp
c0018fe1:	57                   	push   edi
c0018fe2:	56                   	push   esi
c0018fe3:	53                   	push   ebx
c0018fe4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018fe8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018fec:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018ff0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018ff4:	39 05 20 06 03 c0    	cmp    DWORD PTR ds:0xc0030620,eax
c0018ffa:	75 23                	jne    c001901f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018ffc:	a1 70 3e 03 c0       	mov    eax,ds:0xc0033e70
c0019001:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0019005:	89 06                	mov    DWORD PTR [esi],eax
c0019007:	a1 74 3e 03 c0       	mov    eax,ds:0xc0033e74
c001900c:	89 07                	mov    DWORD PTR [edi],eax
c001900e:	a1 78 3e 03 c0       	mov    eax,ds:0xc0033e78
c0019013:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019016:	a1 7c 3e 03 c0       	mov    eax,ds:0xc0033e7c
c001901b:	89 02                	mov    DWORD PTR [edx],eax
c001901d:	eb 3f                	jmp    c001905e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001901f:	31 c9                	xor    ecx,ecx
c0019021:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019025:	0f a2                	cpuid  
c0019027:	89 06                	mov    DWORD PTR [esi],eax
c0019029:	89 1f                	mov    DWORD PTR [edi],ebx
c001902b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001902f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0019032:	89 10                	mov    DWORD PTR [eax],edx
c0019034:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019038:	a3 20 06 03 c0       	mov    ds:0xc0030620,eax
c001903d:	8b 06                	mov    eax,DWORD PTR [esi]
c001903f:	a3 70 3e 03 c0       	mov    ds:0xc0033e70,eax
c0019044:	8b 07                	mov    eax,DWORD PTR [edi]
c0019046:	a3 74 3e 03 c0       	mov    ds:0xc0033e74,eax
c001904b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001904e:	a3 78 3e 03 c0       	mov    ds:0xc0033e78,eax
c0019053:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019057:	8b 00                	mov    eax,DWORD PTR [eax]
c0019059:	a3 7c 3e 03 c0       	mov    ds:0xc0033e7c,eax
c001905e:	5b                   	pop    ebx
c001905f:	5e                   	pop    esi
c0019060:	5f                   	pop    edi
c0019061:	5d                   	pop    ebp
c0019062:	c3                   	ret    
c0019063:	90                   	nop

c0019064 <CPU::cpuidCheckEDX(unsigned int)>:
c0019064:	83 ec 10             	sub    esp,0x10
c0019067:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001906b:	50                   	push   eax
c001906c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019070:	50                   	push   eax
c0019071:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019075:	50                   	push   eax
c0019076:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001907a:	50                   	push   eax
c001907b:	6a 01                	push   0x1
c001907d:	e8 5e ff ff ff       	call   c0018fe0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019082:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019086:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001908a:	0f 95 c0             	setne  al
c001908d:	83 c4 24             	add    esp,0x24
c0019090:	c3                   	ret    
c0019091:	90                   	nop

c0019092 <CPU::cpuidCheckECX(unsigned int)>:
c0019092:	83 ec 10             	sub    esp,0x10
c0019095:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019099:	50                   	push   eax
c001909a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001909e:	50                   	push   eax
c001909f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00190a3:	50                   	push   eax
c00190a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00190a8:	50                   	push   eax
c00190a9:	6a 01                	push   0x1
c00190ab:	e8 30 ff ff ff       	call   c0018fe0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00190b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00190b4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00190b8:	0f 95 c0             	setne  al
c00190bb:	83 c4 24             	add    esp,0x24
c00190be:	c3                   	ret    
c00190bf:	90                   	nop

c00190c0 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00190c0:	83 ec 10             	sub    esp,0x10
c00190c3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00190c7:	50                   	push   eax
c00190c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00190cc:	50                   	push   eax
c00190cd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00190d1:	50                   	push   eax
c00190d2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00190d6:	50                   	push   eax
c00190d7:	6a 07                	push   0x7
c00190d9:	e8 02 ff ff ff       	call   c0018fe0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00190de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00190e2:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00190e6:	0f 95 c0             	setne  al
c00190e9:	83 c4 24             	add    esp,0x24
c00190ec:	c3                   	ret    
c00190ed:	90                   	nop

c00190ee <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00190ee:	83 ec 10             	sub    esp,0x10
c00190f1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00190f5:	50                   	push   eax
c00190f6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00190fa:	50                   	push   eax
c00190fb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00190ff:	50                   	push   eax
c0019100:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019104:	50                   	push   eax
c0019105:	6a 07                	push   0x7
c0019107:	e8 d4 fe ff ff       	call   c0018fe0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001910c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019110:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0019114:	0f 95 c0             	setne  al
c0019117:	83 c4 24             	add    esp,0x24
c001911a:	c3                   	ret    
c001911b:	90                   	nop

c001911c <CPU::CPU()>:
c001911c:	83 ec 0c             	sub    esp,0xc
c001911f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019123:	83 ec 08             	sub    esp,0x8
c0019126:	68 8a d0 02 c0       	push   0xc002d08a
c001912b:	50                   	push   eax
c001912c:	e8 eb b3 ff ff       	call   c001451c <Device::Device(char const*)>
c0019131:	83 c4 10             	add    esp,0x10
c0019134:	ba 64 d1 02 c0       	mov    edx,0xc002d164
c0019139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001913d:	89 10                	mov    DWORD PTR [eax],edx
c001913f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019143:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001914d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019151:	05 78 01 00 00       	add    eax,0x178
c0019156:	83 ec 0c             	sub    esp,0xc
c0019159:	50                   	push   eax
c001915a:	e8 15 66 ff ff       	call   c000f774 <GDT::GDT()>
c001915f:	83 c4 10             	add    esp,0x10
c0019162:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019166:	05 7c 09 00 00       	add    eax,0x97c
c001916b:	83 ec 0c             	sub    esp,0xc
c001916e:	50                   	push   eax
c001916f:	e8 62 68 ff ff       	call   c000f9d6 <IDT::IDT()>
c0019174:	83 c4 10             	add    esp,0x10
c0019177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001917b:	05 7c 11 00 00       	add    eax,0x117c
c0019180:	83 ec 0c             	sub    esp,0xc
c0019183:	50                   	push   eax
c0019184:	e8 f5 89 ff ff       	call   c0011b7e <TSS::TSS()>
c0019189:	83 c4 10             	add    esp,0x10
c001918c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019190:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0019197:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001919b:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00191a5:	90                   	nop
c00191a6:	83 c4 0c             	add    esp,0xc
c00191a9:	c3                   	ret    

c00191aa <CPU::open(int, int, void*)>:
c00191aa:	57                   	push   edi
c00191ab:	56                   	push   esi
c00191ac:	53                   	push   ebx
c00191ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00191b1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00191b5:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00191bb:	83 ec 0c             	sub    esp,0xc
c00191be:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00191c4:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00191ca:	50                   	push   eax
c00191cb:	e8 20 66 ff ff       	call   c000f7f0 <GDT::setup()>
c00191d0:	83 c4 0c             	add    esp,0xc
c00191d3:	6a 00                	push   0x0
c00191d5:	68 ef be ad de       	push   0xdeadbeef
c00191da:	57                   	push   edi
c00191db:	e8 de 89 ff ff       	call   c0011bbe <TSS::setup(unsigned long, unsigned long)>
c00191e0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00191e3:	e8 b6 89 ff ff       	call   c0011b9e <TSS::flush()>
c00191e8:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00191ee:	89 04 24             	mov    DWORD PTR [esp],eax
c00191f1:	e8 56 68 ff ff       	call   c000fa4c <IDT::setup()>
c00191f6:	b8 00 04 00 00       	mov    eax,0x400
c00191fb:	0f 23 f8             	mov    db7,eax
c00191fe:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019208:	e8 ec 73 ff ff       	call   c00105f9 <Phys::allocatePage()>
c001920d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019213:	89 30                	mov    DWORD PTR [eax],esi
c0019215:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001921b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001921e:	58                   	pop    eax
c001921f:	5a                   	pop    edx
c0019220:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019226:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001922a:	e8 bd 97 ff ff       	call   c00129ec <VAS::setCPUSpecific(unsigned long)>
c001922f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019232:	e8 c1 02 00 00       	call   c00194f8 <CPU::detectFeatures()>
c0019237:	e8 dc c9 ff ff       	call   c0015c18 <setupInterruptController()>
c001923c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019242:	a1 a4 13 03 c0       	mov    eax,ds:0xc00313a4
c0019247:	83 e0 10             	and    eax,0x10
c001924a:	83 f8 01             	cmp    eax,0x1
c001924d:	19 c0                	sbb    eax,eax
c001924f:	83 e0 46             	and    eax,0x46
c0019252:	83 c0 1e             	add    eax,0x1e
c0019255:	89 04 24             	mov    DWORD PTR [esp],eax
c0019258:	e8 64 dd ff ff       	call   c0016fc1 <setupTimer(int)>
c001925d:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019263:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019266:	e8 25 0d 00 00       	call   c0019f90 <CPU::setupFeatures()>
c001926b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001926e:	e8 09 00 00 00       	call   c001927c <CPU::displayFeatures()>
c0019273:	83 c4 10             	add    esp,0x10
c0019276:	31 c0                	xor    eax,eax
c0019278:	5b                   	pop    ebx
c0019279:	5e                   	pop    esi
c001927a:	5f                   	pop    edi
c001927b:	c3                   	ret    

c001927c <CPU::displayFeatures()>:
c001927c:	53                   	push   ebx
c001927d:	83 ec 10             	sub    esp,0x10
c0019280:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019284:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001928a:	68 98 cd 02 c0       	push   0xc002cd98
c001928f:	e8 b2 9f ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0019294:	59                   	pop    ecx
c0019295:	58                   	pop    eax
c0019296:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c001929c:	50                   	push   eax
c001929d:	68 a9 cd 02 c0       	push   0xc002cda9
c00192a2:	e8 9f 9f ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00192a7:	58                   	pop    eax
c00192a8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00192ae:	5a                   	pop    edx
c00192af:	c1 e8 0e             	shr    eax,0xe
c00192b2:	0f b6 c0             	movzx  eax,al
c00192b5:	50                   	push   eax
c00192b6:	68 ba cd 02 c0       	push   0xc002cdba
c00192bb:	e8 86 9f ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00192c0:	59                   	pop    ecx
c00192c1:	58                   	pop    eax
c00192c2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00192c8:	66 c1 e8 06          	shr    ax,0x6
c00192cc:	0f b6 c0             	movzx  eax,al
c00192cf:	50                   	push   eax
c00192d0:	68 cb cd 02 c0       	push   0xc002cdcb
c00192d5:	e8 6c 9f ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00192da:	c7 04 24 aa d3 02 c0 	mov    DWORD PTR [esp],0xc002d3aa
c00192e1:	e8 60 9f ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00192e6:	83 c4 10             	add    esp,0x10
c00192e9:	b8 e1 a2 02 c0       	mov    eax,0xc002a2e1
c00192ee:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00192f5:	74 05                	je     c00192fc <CPU::displayFeatures()+0x80>
c00192f7:	b8 dd a2 02 c0       	mov    eax,0xc002a2dd
c00192fc:	52                   	push   edx
c00192fd:	52                   	push   edx
c00192fe:	50                   	push   eax
c00192ff:	68 dc cd 02 c0       	push   0xc002cddc
c0019304:	e8 3d 9f ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0019309:	83 c4 10             	add    esp,0x10
c001930c:	b8 dd a2 02 c0       	mov    eax,0xc002a2dd
c0019311:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0019318:	78 05                	js     c001931f <CPU::displayFeatures()+0xa3>
c001931a:	b8 e1 a2 02 c0       	mov    eax,0xc002a2e1
c001931f:	51                   	push   ecx
c0019320:	51                   	push   ecx
c0019321:	50                   	push   eax
c0019322:	68 f3 cd 02 c0       	push   0xc002cdf3
c0019327:	e8 1a 9f ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001932c:	83 c4 10             	add    esp,0x10
c001932f:	b8 dd a2 02 c0       	mov    eax,0xc002a2dd
c0019334:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c001933b:	75 05                	jne    c0019342 <CPU::displayFeatures()+0xc6>
c001933d:	b8 e1 a2 02 c0       	mov    eax,0xc002a2e1
c0019342:	52                   	push   edx
c0019343:	52                   	push   edx
c0019344:	50                   	push   eax
c0019345:	68 0a ce 02 c0       	push   0xc002ce0a
c001934a:	e8 f7 9e ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001934f:	83 c4 10             	add    esp,0x10
c0019352:	b8 dd a2 02 c0       	mov    eax,0xc002a2dd
c0019357:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c001935e:	75 05                	jne    c0019365 <CPU::displayFeatures()+0xe9>
c0019360:	b8 e1 a2 02 c0       	mov    eax,0xc002a2e1
c0019365:	51                   	push   ecx
c0019366:	51                   	push   ecx
c0019367:	50                   	push   eax
c0019368:	68 21 ce 02 c0       	push   0xc002ce21
c001936d:	e8 d4 9e ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0019372:	83 c4 10             	add    esp,0x10
c0019375:	b8 dd a2 02 c0       	mov    eax,0xc002a2dd
c001937a:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0019381:	75 05                	jne    c0019388 <CPU::displayFeatures()+0x10c>
c0019383:	b8 e1 a2 02 c0       	mov    eax,0xc002a2e1
c0019388:	52                   	push   edx
c0019389:	52                   	push   edx
c001938a:	50                   	push   eax
c001938b:	68 38 ce 02 c0       	push   0xc002ce38
c0019390:	e8 b1 9e ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0019395:	83 c4 10             	add    esp,0x10
c0019398:	b8 dd a2 02 c0       	mov    eax,0xc002a2dd
c001939d:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00193a4:	75 05                	jne    c00193ab <CPU::displayFeatures()+0x12f>
c00193a6:	b8 e1 a2 02 c0       	mov    eax,0xc002a2e1
c00193ab:	51                   	push   ecx
c00193ac:	51                   	push   ecx
c00193ad:	50                   	push   eax
c00193ae:	68 4f ce 02 c0       	push   0xc002ce4f
c00193b3:	e8 8e 9e ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00193b8:	83 c4 10             	add    esp,0x10
c00193bb:	b8 dd a2 02 c0       	mov    eax,0xc002a2dd
c00193c0:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00193c7:	75 05                	jne    c00193ce <CPU::displayFeatures()+0x152>
c00193c9:	b8 e1 a2 02 c0       	mov    eax,0xc002a2e1
c00193ce:	52                   	push   edx
c00193cf:	52                   	push   edx
c00193d0:	50                   	push   eax
c00193d1:	68 66 ce 02 c0       	push   0xc002ce66
c00193d6:	e8 6b 9e ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00193db:	83 c4 10             	add    esp,0x10
c00193de:	b8 dd a2 02 c0       	mov    eax,0xc002a2dd
c00193e3:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00193ea:	75 05                	jne    c00193f1 <CPU::displayFeatures()+0x175>
c00193ec:	b8 e1 a2 02 c0       	mov    eax,0xc002a2e1
c00193f1:	51                   	push   ecx
c00193f2:	51                   	push   ecx
c00193f3:	50                   	push   eax
c00193f4:	68 7d ce 02 c0       	push   0xc002ce7d
c00193f9:	e8 48 9e ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00193fe:	83 c4 10             	add    esp,0x10
c0019401:	b8 dd a2 02 c0       	mov    eax,0xc002a2dd
c0019406:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c001940d:	75 05                	jne    c0019414 <CPU::displayFeatures()+0x198>
c001940f:	b8 e1 a2 02 c0       	mov    eax,0xc002a2e1
c0019414:	52                   	push   edx
c0019415:	52                   	push   edx
c0019416:	50                   	push   eax
c0019417:	68 94 ce 02 c0       	push   0xc002ce94
c001941c:	e8 25 9e ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0019421:	83 c4 10             	add    esp,0x10
c0019424:	b8 dd a2 02 c0       	mov    eax,0xc002a2dd
c0019429:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0019430:	75 05                	jne    c0019437 <CPU::displayFeatures()+0x1bb>
c0019432:	b8 e1 a2 02 c0       	mov    eax,0xc002a2e1
c0019437:	51                   	push   ecx
c0019438:	51                   	push   ecx
c0019439:	50                   	push   eax
c001943a:	68 ab ce 02 c0       	push   0xc002ceab
c001943f:	e8 02 9e ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0019444:	83 c4 10             	add    esp,0x10
c0019447:	b8 dd a2 02 c0       	mov    eax,0xc002a2dd
c001944c:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0019453:	75 05                	jne    c001945a <CPU::displayFeatures()+0x1de>
c0019455:	b8 e1 a2 02 c0       	mov    eax,0xc002a2e1
c001945a:	52                   	push   edx
c001945b:	52                   	push   edx
c001945c:	50                   	push   eax
c001945d:	68 c2 ce 02 c0       	push   0xc002cec2
c0019462:	e8 df 9d ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0019467:	83 c4 10             	add    esp,0x10
c001946a:	b8 dd a2 02 c0       	mov    eax,0xc002a2dd
c001946f:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0019476:	75 05                	jne    c001947d <CPU::displayFeatures()+0x201>
c0019478:	b8 e1 a2 02 c0       	mov    eax,0xc002a2e1
c001947d:	51                   	push   ecx
c001947e:	51                   	push   ecx
c001947f:	50                   	push   eax
c0019480:	68 d9 ce 02 c0       	push   0xc002ced9
c0019485:	e8 bc 9d ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001948a:	83 c4 10             	add    esp,0x10
c001948d:	b8 dd a2 02 c0       	mov    eax,0xc002a2dd
c0019492:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0019499:	75 05                	jne    c00194a0 <CPU::displayFeatures()+0x224>
c001949b:	b8 e1 a2 02 c0       	mov    eax,0xc002a2e1
c00194a0:	52                   	push   edx
c00194a1:	52                   	push   edx
c00194a2:	50                   	push   eax
c00194a3:	68 f0 ce 02 c0       	push   0xc002cef0
c00194a8:	e8 99 9d ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00194ad:	83 c4 10             	add    esp,0x10
c00194b0:	b8 dd a2 02 c0       	mov    eax,0xc002a2dd
c00194b5:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00194bc:	78 05                	js     c00194c3 <CPU::displayFeatures()+0x247>
c00194be:	b8 e1 a2 02 c0       	mov    eax,0xc002a2e1
c00194c3:	51                   	push   ecx
c00194c4:	51                   	push   ecx
c00194c5:	50                   	push   eax
c00194c6:	68 07 cf 02 c0       	push   0xc002cf07
c00194cb:	e8 76 9d ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00194d0:	83 c4 10             	add    esp,0x10
c00194d3:	b8 dd a2 02 c0       	mov    eax,0xc002a2dd
c00194d8:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00194df:	75 05                	jne    c00194e6 <CPU::displayFeatures()+0x26a>
c00194e1:	b8 e1 a2 02 c0       	mov    eax,0xc002a2e1
c00194e6:	52                   	push   edx
c00194e7:	52                   	push   edx
c00194e8:	50                   	push   eax
c00194e9:	68 1e cf 02 c0       	push   0xc002cf1e
c00194ee:	e8 53 9d ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00194f3:	83 c4 18             	add    esp,0x18
c00194f6:	5b                   	pop    ebx
c00194f7:	c3                   	ret    

c00194f8 <CPU::detectFeatures()>:
c00194f8:	55                   	push   ebp
c00194f9:	57                   	push   edi
c00194fa:	56                   	push   esi
c00194fb:	53                   	push   ebx
c00194fc:	83 ec 50             	sub    esp,0x50
c00194ff:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0019503:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c001950d:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0019514:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c001951a:	6a 0d                	push   0xd
c001951c:	6a 00                	push   0x0
c001951e:	57                   	push   edi
c001951f:	e8 a0 71 fe ff       	call   c00006c4 <memset>
c0019524:	83 c4 10             	add    esp,0x10
c0019527:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c001952c:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0019533:	0f 84 20 09 00 00    	je     c0019e59 <CPU::detectFeatures()+0x961>
c0019539:	83 ec 0c             	sub    esp,0xc
c001953c:	6a 10                	push   0x10
c001953e:	e8 21 fb ff ff       	call   c0019064 <CPU::cpuidCheckEDX(unsigned int)>
c0019543:	83 e0 01             	and    eax,0x1
c0019546:	8d 14 00             	lea    edx,[eax+eax*1]
c0019549:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001954f:	83 e0 fd             	and    eax,0xfffffffd
c0019552:	09 d0                	or     eax,edx
c0019554:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001955a:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0019561:	e8 fe fa ff ff       	call   c0019064 <CPU::cpuidCheckEDX(unsigned int)>
c0019566:	83 e0 01             	and    eax,0x1
c0019569:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019570:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019576:	83 e0 fb             	and    eax,0xfffffffb
c0019579:	09 d0                	or     eax,edx
c001957b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019581:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019588:	e8 d7 fa ff ff       	call   c0019064 <CPU::cpuidCheckEDX(unsigned int)>
c001958d:	83 e0 01             	and    eax,0x1
c0019590:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019597:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001959d:	83 e0 f7             	and    eax,0xfffffff7
c00195a0:	09 d0                	or     eax,edx
c00195a2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00195a8:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00195af:	e8 b0 fa ff ff       	call   c0019064 <CPU::cpuidCheckEDX(unsigned int)>
c00195b4:	83 e0 01             	and    eax,0x1
c00195b7:	c1 e0 04             	shl    eax,0x4
c00195ba:	88 c2                	mov    dl,al
c00195bc:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00195c2:	83 e0 ef             	and    eax,0xffffffef
c00195c5:	09 d0                	or     eax,edx
c00195c7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00195cd:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00195d4:	e8 8b fa ff ff       	call   c0019064 <CPU::cpuidCheckEDX(unsigned int)>
c00195d9:	83 e0 01             	and    eax,0x1
c00195dc:	c1 e0 05             	shl    eax,0x5
c00195df:	88 c2                	mov    dl,al
c00195e1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00195e7:	83 e0 df             	and    eax,0xffffffdf
c00195ea:	09 d0                	or     eax,edx
c00195ec:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00195f2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00195f9:	e8 66 fa ff ff       	call   c0019064 <CPU::cpuidCheckEDX(unsigned int)>
c00195fe:	83 e0 01             	and    eax,0x1
c0019601:	8d 14 00             	lea    edx,[eax+eax*1]
c0019604:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001960a:	83 e0 fd             	and    eax,0xfffffffd
c001960d:	09 d0                	or     eax,edx
c001960f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019615:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001961c:	e8 43 fa ff ff       	call   c0019064 <CPU::cpuidCheckEDX(unsigned int)>
c0019621:	83 e0 01             	and    eax,0x1
c0019624:	c1 e0 06             	shl    eax,0x6
c0019627:	88 c2                	mov    dl,al
c0019629:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001962f:	83 e0 bf             	and    eax,0xffffffbf
c0019632:	09 d0                	or     eax,edx
c0019634:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001963a:	58                   	pop    eax
c001963b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001963f:	56                   	push   esi
c0019640:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019644:	55                   	push   ebp
c0019645:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019649:	50                   	push   eax
c001964a:	8d 54 24 28          	lea    edx,[esp+0x28]
c001964e:	52                   	push   edx
c001964f:	6a 00                	push   0x0
c0019651:	e8 8a f9 ff ff       	call   c0018fe0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019656:	83 c4 1c             	add    esp,0x1c
c0019659:	6a 04                	push   0x4
c001965b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001965f:	50                   	push   eax
c0019660:	57                   	push   edi
c0019661:	e8 3a 70 fe ff       	call   c00006a0 <memcpy>
c0019666:	83 c4 0c             	add    esp,0xc
c0019669:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c001966f:	6a 04                	push   0x4
c0019671:	56                   	push   esi
c0019672:	50                   	push   eax
c0019673:	e8 28 70 fe ff       	call   c00006a0 <memcpy>
c0019678:	83 c4 0c             	add    esp,0xc
c001967b:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0019681:	6a 04                	push   0x4
c0019683:	55                   	push   ebp
c0019684:	50                   	push   eax
c0019685:	e8 16 70 fe ff       	call   c00006a0 <memcpy>
c001968a:	58                   	pop    eax
c001968b:	5a                   	pop    edx
c001968c:	68 35 cf 02 c0       	push   0xc002cf35
c0019691:	57                   	push   edi
c0019692:	e8 1d 71 fe ff       	call   c00007b4 <strcmp>
c0019697:	83 c4 10             	add    esp,0x10
c001969a:	85 c0                	test   eax,eax
c001969c:	75 0f                	jne    c00196ad <CPU::detectFeatures()+0x1b5>
c001969e:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00196a8:	e9 22 02 00 00       	jmp    c00198cf <CPU::detectFeatures()+0x3d7>
c00196ad:	50                   	push   eax
c00196ae:	50                   	push   eax
c00196af:	68 42 cf 02 c0       	push   0xc002cf42
c00196b4:	57                   	push   edi
c00196b5:	e8 fa 70 fe ff       	call   c00007b4 <strcmp>
c00196ba:	83 c4 10             	add    esp,0x10
c00196bd:	85 c0                	test   eax,eax
c00196bf:	74 dd                	je     c001969e <CPU::detectFeatures()+0x1a6>
c00196c1:	51                   	push   ecx
c00196c2:	51                   	push   ecx
c00196c3:	68 4f cf 02 c0       	push   0xc002cf4f
c00196c8:	57                   	push   edi
c00196c9:	e8 e6 70 fe ff       	call   c00007b4 <strcmp>
c00196ce:	83 c4 10             	add    esp,0x10
c00196d1:	85 c0                	test   eax,eax
c00196d3:	74 2a                	je     c00196ff <CPU::detectFeatures()+0x207>
c00196d5:	52                   	push   edx
c00196d6:	52                   	push   edx
c00196d7:	68 5c cf 02 c0       	push   0xc002cf5c
c00196dc:	57                   	push   edi
c00196dd:	e8 d2 70 fe ff       	call   c00007b4 <strcmp>
c00196e2:	83 c4 10             	add    esp,0x10
c00196e5:	85 c0                	test   eax,eax
c00196e7:	74 16                	je     c00196ff <CPU::detectFeatures()+0x207>
c00196e9:	50                   	push   eax
c00196ea:	50                   	push   eax
c00196eb:	68 69 cf 02 c0       	push   0xc002cf69
c00196f0:	57                   	push   edi
c00196f1:	e8 be 70 fe ff       	call   c00007b4 <strcmp>
c00196f6:	83 c4 10             	add    esp,0x10
c00196f9:	85 c0                	test   eax,eax
c00196fb:	74 48                	je     c0019745 <CPU::detectFeatures()+0x24d>
c00196fd:	eb 0f                	jmp    c001970e <CPU::detectFeatures()+0x216>
c00196ff:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0019709:	e9 c1 01 00 00       	jmp    c00198cf <CPU::detectFeatures()+0x3d7>
c001970e:	50                   	push   eax
c001970f:	50                   	push   eax
c0019710:	68 76 cf 02 c0       	push   0xc002cf76
c0019715:	57                   	push   edi
c0019716:	e8 99 70 fe ff       	call   c00007b4 <strcmp>
c001971b:	83 c4 10             	add    esp,0x10
c001971e:	85 c0                	test   eax,eax
c0019720:	74 23                	je     c0019745 <CPU::detectFeatures()+0x24d>
c0019722:	50                   	push   eax
c0019723:	50                   	push   eax
c0019724:	68 83 cf 02 c0       	push   0xc002cf83
c0019729:	57                   	push   edi
c001972a:	e8 85 70 fe ff       	call   c00007b4 <strcmp>
c001972f:	83 c4 10             	add    esp,0x10
c0019732:	85 c0                	test   eax,eax
c0019734:	75 1e                	jne    c0019754 <CPU::detectFeatures()+0x25c>
c0019736:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019740:	e9 8a 01 00 00       	jmp    c00198cf <CPU::detectFeatures()+0x3d7>
c0019745:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001974f:	e9 7b 01 00 00       	jmp    c00198cf <CPU::detectFeatures()+0x3d7>
c0019754:	50                   	push   eax
c0019755:	50                   	push   eax
c0019756:	68 90 cf 02 c0       	push   0xc002cf90
c001975b:	57                   	push   edi
c001975c:	e8 53 70 fe ff       	call   c00007b4 <strcmp>
c0019761:	83 c4 10             	add    esp,0x10
c0019764:	85 c0                	test   eax,eax
c0019766:	75 0f                	jne    c0019777 <CPU::detectFeatures()+0x27f>
c0019768:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0019772:	e9 58 01 00 00       	jmp    c00198cf <CPU::detectFeatures()+0x3d7>
c0019777:	50                   	push   eax
c0019778:	50                   	push   eax
c0019779:	68 4f cf 02 c0       	push   0xc002cf4f
c001977e:	57                   	push   edi
c001977f:	e8 30 70 fe ff       	call   c00007b4 <strcmp>
c0019784:	83 c4 10             	add    esp,0x10
c0019787:	85 c0                	test   eax,eax
c0019789:	75 0f                	jne    c001979a <CPU::detectFeatures()+0x2a2>
c001978b:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0019795:	e9 35 01 00 00       	jmp    c00198cf <CPU::detectFeatures()+0x3d7>
c001979a:	50                   	push   eax
c001979b:	50                   	push   eax
c001979c:	68 9d cf 02 c0       	push   0xc002cf9d
c00197a1:	57                   	push   edi
c00197a2:	e8 0d 70 fe ff       	call   c00007b4 <strcmp>
c00197a7:	83 c4 10             	add    esp,0x10
c00197aa:	85 c0                	test   eax,eax
c00197ac:	75 0f                	jne    c00197bd <CPU::detectFeatures()+0x2c5>
c00197ae:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00197b8:	e9 12 01 00 00       	jmp    c00198cf <CPU::detectFeatures()+0x3d7>
c00197bd:	51                   	push   ecx
c00197be:	51                   	push   ecx
c00197bf:	68 aa cf 02 c0       	push   0xc002cfaa
c00197c4:	57                   	push   edi
c00197c5:	e8 ea 6f fe ff       	call   c00007b4 <strcmp>
c00197ca:	83 c4 10             	add    esp,0x10
c00197cd:	85 c0                	test   eax,eax
c00197cf:	75 0f                	jne    c00197e0 <CPU::detectFeatures()+0x2e8>
c00197d1:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00197db:	e9 ef 00 00 00       	jmp    c00198cf <CPU::detectFeatures()+0x3d7>
c00197e0:	52                   	push   edx
c00197e1:	52                   	push   edx
c00197e2:	68 b7 cf 02 c0       	push   0xc002cfb7
c00197e7:	57                   	push   edi
c00197e8:	e8 c7 6f fe ff       	call   c00007b4 <strcmp>
c00197ed:	83 c4 10             	add    esp,0x10
c00197f0:	85 c0                	test   eax,eax
c00197f2:	75 0f                	jne    c0019803 <CPU::detectFeatures()+0x30b>
c00197f4:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00197fe:	e9 cc 00 00 00       	jmp    c00198cf <CPU::detectFeatures()+0x3d7>
c0019803:	50                   	push   eax
c0019804:	50                   	push   eax
c0019805:	68 c4 cf 02 c0       	push   0xc002cfc4
c001980a:	57                   	push   edi
c001980b:	e8 a4 6f fe ff       	call   c00007b4 <strcmp>
c0019810:	83 c4 10             	add    esp,0x10
c0019813:	85 c0                	test   eax,eax
c0019815:	75 0f                	jne    c0019826 <CPU::detectFeatures()+0x32e>
c0019817:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0019821:	e9 a9 00 00 00       	jmp    c00198cf <CPU::detectFeatures()+0x3d7>
c0019826:	50                   	push   eax
c0019827:	50                   	push   eax
c0019828:	68 d1 cf 02 c0       	push   0xc002cfd1
c001982d:	57                   	push   edi
c001982e:	e8 81 6f fe ff       	call   c00007b4 <strcmp>
c0019833:	83 c4 10             	add    esp,0x10
c0019836:	85 c0                	test   eax,eax
c0019838:	75 0f                	jne    c0019849 <CPU::detectFeatures()+0x351>
c001983a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0019844:	e9 86 00 00 00       	jmp    c00198cf <CPU::detectFeatures()+0x3d7>
c0019849:	50                   	push   eax
c001984a:	50                   	push   eax
c001984b:	68 de cf 02 c0       	push   0xc002cfde
c0019850:	57                   	push   edi
c0019851:	e8 5e 6f fe ff       	call   c00007b4 <strcmp>
c0019856:	83 c4 10             	add    esp,0x10
c0019859:	85 c0                	test   eax,eax
c001985b:	75 0c                	jne    c0019869 <CPU::detectFeatures()+0x371>
c001985d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0019867:	eb 66                	jmp    c00198cf <CPU::detectFeatures()+0x3d7>
c0019869:	50                   	push   eax
c001986a:	50                   	push   eax
c001986b:	68 eb cf 02 c0       	push   0xc002cfeb
c0019870:	57                   	push   edi
c0019871:	e8 3e 6f fe ff       	call   c00007b4 <strcmp>
c0019876:	83 c4 10             	add    esp,0x10
c0019879:	85 c0                	test   eax,eax
c001987b:	75 0c                	jne    c0019889 <CPU::detectFeatures()+0x391>
c001987d:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0019887:	eb 46                	jmp    c00198cf <CPU::detectFeatures()+0x3d7>
c0019889:	50                   	push   eax
c001988a:	50                   	push   eax
c001988b:	68 f8 cf 02 c0       	push   0xc002cff8
c0019890:	57                   	push   edi
c0019891:	e8 1e 6f fe ff       	call   c00007b4 <strcmp>
c0019896:	83 c4 10             	add    esp,0x10
c0019899:	85 c0                	test   eax,eax
c001989b:	74 e0                	je     c001987d <CPU::detectFeatures()+0x385>
c001989d:	50                   	push   eax
c001989e:	50                   	push   eax
c001989f:	68 05 d0 02 c0       	push   0xc002d005
c00198a4:	57                   	push   edi
c00198a5:	e8 0a 6f fe ff       	call   c00007b4 <strcmp>
c00198aa:	83 c4 10             	add    esp,0x10
c00198ad:	85 c0                	test   eax,eax
c00198af:	74 cc                	je     c001987d <CPU::detectFeatures()+0x385>
c00198b1:	51                   	push   ecx
c00198b2:	51                   	push   ecx
c00198b3:	68 12 d0 02 c0       	push   0xc002d012
c00198b8:	57                   	push   edi
c00198b9:	e8 f6 6e fe ff       	call   c00007b4 <strcmp>
c00198be:	83 c4 10             	add    esp,0x10
c00198c1:	85 c0                	test   eax,eax
c00198c3:	74 b8                	je     c001987d <CPU::detectFeatures()+0x385>
c00198c5:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00198cf:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00198d4:	0f 86 be 00 00 00    	jbe    c0019998 <CPU::detectFeatures()+0x4a0>
c00198da:	83 ec 0c             	sub    esp,0xc
c00198dd:	68 80 00 00 00       	push   0x80
c00198e2:	e8 d9 f7 ff ff       	call   c00190c0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00198e7:	83 e0 01             	and    eax,0x1
c00198ea:	c1 e0 06             	shl    eax,0x6
c00198ed:	88 c2                	mov    dl,al
c00198ef:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00198f5:	83 e0 bf             	and    eax,0xffffffbf
c00198f8:	09 d0                	or     eax,edx
c00198fa:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019900:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0019907:	e8 b4 f7 ff ff       	call   c00190c0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001990c:	83 e0 01             	and    eax,0x1
c001990f:	c1 e0 04             	shl    eax,0x4
c0019912:	88 c2                	mov    dl,al
c0019914:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001991a:	83 e0 ef             	and    eax,0xffffffef
c001991d:	09 d0                	or     eax,edx
c001991f:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019925:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001992c:	e8 8f f7 ff ff       	call   c00190c0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019931:	c1 e0 07             	shl    eax,0x7
c0019934:	88 c2                	mov    dl,al
c0019936:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001993c:	83 e0 7f             	and    eax,0x7f
c001993f:	09 d0                	or     eax,edx
c0019941:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019947:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001994e:	e8 9b f7 ff ff       	call   c00190ee <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019953:	83 e0 01             	and    eax,0x1
c0019956:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001995d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019963:	83 e0 f7             	and    eax,0xfffffff7
c0019966:	09 d0                	or     eax,edx
c0019968:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001996e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0019975:	e8 74 f7 ff ff       	call   c00190ee <CPU::cpuidCheckExtendedECX(unsigned int)>
c001997a:	83 c4 10             	add    esp,0x10
c001997d:	83 e0 01             	and    eax,0x1
c0019980:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019987:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001998d:	83 e0 fb             	and    eax,0xfffffffb
c0019990:	09 d0                	or     eax,edx
c0019992:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019998:	83 ec 0c             	sub    esp,0xc
c001999b:	56                   	push   esi
c001999c:	55                   	push   ebp
c001999d:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00199a1:	57                   	push   edi
c00199a2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00199a6:	50                   	push   eax
c00199a7:	6a 01                	push   0x1
c00199a9:	e8 32 f6 ff ff       	call   c0018fe0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00199ae:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00199b2:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00199b8:	88 ca                	mov    dl,cl
c00199ba:	83 e0 f0             	and    eax,0xfffffff0
c00199bd:	83 e2 0f             	and    edx,0xf
c00199c0:	09 d0                	or     eax,edx
c00199c2:	88 ca                	mov    dl,cl
c00199c4:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00199ca:	c0 ea 04             	shr    dl,0x4
c00199cd:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00199d1:	0f b6 c2             	movzx  eax,dl
c00199d4:	83 c4 20             	add    esp,0x20
c00199d7:	c1 e0 06             	shl    eax,0x6
c00199da:	89 c5                	mov    ebp,eax
c00199dc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00199e2:	66 25 3f c0          	and    ax,0xc03f
c00199e6:	09 e8                	or     eax,ebp
c00199e8:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00199ef:	89 c8                	mov    eax,ecx
c00199f1:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00199f7:	c1 e8 08             	shr    eax,0x8
c00199fa:	83 e2 3f             	and    edx,0x3f
c00199fd:	83 e0 0f             	and    eax,0xf
c0019a00:	89 c5                	mov    ebp,eax
c0019a02:	c1 e5 06             	shl    ebp,0x6
c0019a05:	09 d5                	or     ebp,edx
c0019a07:	89 ea                	mov    edx,ebp
c0019a09:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0019a0f:	88 c2                	mov    dl,al
c0019a11:	c0 ea 02             	shr    dl,0x2
c0019a14:	89 d5                	mov    ebp,edx
c0019a16:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0019a1c:	83 e2 c0             	and    edx,0xffffffc0
c0019a1f:	09 d5                	or     ebp,edx
c0019a21:	89 ea                	mov    edx,ebp
c0019a23:	89 cd                	mov    ebp,ecx
c0019a25:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0019a2b:	c1 ed 0c             	shr    ebp,0xc
c0019a2e:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0019a34:	83 e5 03             	and    ebp,0x3
c0019a37:	83 e2 cf             	and    edx,0xffffffcf
c0019a3a:	c1 e5 04             	shl    ebp,0x4
c0019a3d:	09 d5                	or     ebp,edx
c0019a3f:	3c 06                	cmp    al,0x6
c0019a41:	89 ea                	mov    edx,ebp
c0019a43:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019a49:	74 04                	je     c0019a4f <CPU::detectFeatures()+0x557>
c0019a4b:	3c 0f                	cmp    al,0xf
c0019a4d:	75 5c                	jne    c0019aab <CPU::detectFeatures()+0x5b3>
c0019a4f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019a53:	89 cd                	mov    ebp,ecx
c0019a55:	c1 ed 10             	shr    ebp,0x10
c0019a58:	c1 e5 04             	shl    ebp,0x4
c0019a5b:	09 ea                	or     edx,ebp
c0019a5d:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0019a63:	0f b6 d2             	movzx  edx,dl
c0019a66:	66 81 e5 3f c0       	and    bp,0xc03f
c0019a6b:	c1 e2 06             	shl    edx,0x6
c0019a6e:	09 ea                	or     edx,ebp
c0019a70:	3c 0f                	cmp    al,0xf
c0019a72:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019a79:	75 30                	jne    c0019aab <CPU::detectFeatures()+0x5b3>
c0019a7b:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019a81:	c1 e9 14             	shr    ecx,0x14
c0019a84:	83 e0 3f             	and    eax,0x3f
c0019a87:	83 c1 0f             	add    ecx,0xf
c0019a8a:	88 ca                	mov    dl,cl
c0019a8c:	c0 e9 02             	shr    cl,0x2
c0019a8f:	c1 e2 06             	shl    edx,0x6
c0019a92:	09 d0                	or     eax,edx
c0019a94:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019a9a:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019aa0:	83 e0 c0             	and    eax,0xffffffc0
c0019aa3:	09 c1                	or     ecx,eax
c0019aa5:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019aab:	83 ec 0c             	sub    esp,0xc
c0019aae:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019ab5:	56                   	push   esi
c0019ab6:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019aba:	50                   	push   eax
c0019abb:	57                   	push   edi
c0019abc:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019ac0:	55                   	push   ebp
c0019ac1:	68 00 00 00 80       	push   0x80000000
c0019ac6:	e8 15 f5 ff ff       	call   c0018fe0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019acb:	83 c4 20             	add    esp,0x20
c0019ace:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019ad6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ada:	76 1e                	jbe    c0019afa <CPU::detectFeatures()+0x602>
c0019adc:	83 ec 0c             	sub    esp,0xc
c0019adf:	56                   	push   esi
c0019ae0:	50                   	push   eax
c0019ae1:	57                   	push   edi
c0019ae2:	55                   	push   ebp
c0019ae3:	68 01 00 00 80       	push   0x80000001
c0019ae8:	e8 f3 f4 ff ff       	call   c0018fe0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019aed:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019af7:	83 c4 20             	add    esp,0x20
c0019afa:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019b00:	83 f8 01             	cmp    eax,0x1
c0019b03:	75 6f                	jne    c0019b74 <CPU::detectFeatures()+0x67c>
c0019b05:	51                   	push   ecx
c0019b06:	51                   	push   ecx
c0019b07:	68 1e d0 02 c0       	push   0xc002d01e
c0019b0c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019b10:	56                   	push   esi
c0019b11:	e8 4d 6c fe ff       	call   c0000763 <strcpy>
c0019b16:	5f                   	pop    edi
c0019b17:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019b1d:	5d                   	pop    ebp
c0019b1e:	66 c1 e8 06          	shr    ax,0x6
c0019b22:	0f b6 c0             	movzx  eax,al
c0019b25:	50                   	push   eax
c0019b26:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019b2c:	c1 e8 0e             	shr    eax,0xe
c0019b2f:	0f b6 c0             	movzx  eax,al
c0019b32:	50                   	push   eax
c0019b33:	e8 4a f1 ff ff       	call   c0018c82 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019b38:	5a                   	pop    edx
c0019b39:	59                   	pop    ecx
c0019b3a:	50                   	push   eax
c0019b3b:	56                   	push   esi
c0019b3c:	e8 d9 6c fe ff       	call   c000081a <strcat>
c0019b41:	5f                   	pop    edi
c0019b42:	5d                   	pop    ebp
c0019b43:	56                   	push   esi
c0019b44:	53                   	push   ebx
c0019b45:	e8 de ad ff ff       	call   c0014928 <Device::setName(char const*)>
c0019b4a:	58                   	pop    eax
c0019b4b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019b51:	5a                   	pop    edx
c0019b52:	68 25 d0 02 c0       	push   0xc002d025
c0019b57:	50                   	push   eax
c0019b58:	e8 57 6c fe ff       	call   c00007b4 <strcmp>
c0019b5d:	83 c4 10             	add    esp,0x10
c0019b60:	85 c0                	test   eax,eax
c0019b62:	0f 85 71 03 00 00    	jne    c0019ed9 <CPU::detectFeatures()+0x9e1>
c0019b68:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019b6f:	e9 65 03 00 00       	jmp    c0019ed9 <CPU::detectFeatures()+0x9e1>
c0019b74:	83 f8 02             	cmp    eax,0x2
c0019b77:	0f 85 b5 00 00 00    	jne    c0019c32 <CPU::detectFeatures()+0x73a>
c0019b7d:	57                   	push   edi
c0019b7e:	57                   	push   edi
c0019b7f:	68 37 d0 02 c0       	push   0xc002d037
c0019b84:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019b88:	56                   	push   esi
c0019b89:	e8 d5 6b fe ff       	call   c0000763 <strcpy>
c0019b8e:	5d                   	pop    ebp
c0019b8f:	58                   	pop    eax
c0019b90:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019b96:	66 c1 e8 06          	shr    ax,0x6
c0019b9a:	0f b6 c0             	movzx  eax,al
c0019b9d:	50                   	push   eax
c0019b9e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019ba4:	c1 e8 0e             	shr    eax,0xe
c0019ba7:	0f b6 c0             	movzx  eax,al
c0019baa:	50                   	push   eax
c0019bab:	e8 3e ef ff ff       	call   c0018aee <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019bb0:	5a                   	pop    edx
c0019bb1:	59                   	pop    ecx
c0019bb2:	50                   	push   eax
c0019bb3:	56                   	push   esi
c0019bb4:	e8 61 6c fe ff       	call   c000081a <strcat>
c0019bb9:	5f                   	pop    edi
c0019bba:	5d                   	pop    ebp
c0019bbb:	56                   	push   esi
c0019bbc:	53                   	push   ebx
c0019bbd:	e8 66 ad ff ff       	call   c0014928 <Device::setName(char const*)>
c0019bc2:	58                   	pop    eax
c0019bc3:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019bc9:	5a                   	pop    edx
c0019bca:	68 3c d0 02 c0       	push   0xc002d03c
c0019bcf:	50                   	push   eax
c0019bd0:	e8 df 6b fe ff       	call   c00007b4 <strcmp>
c0019bd5:	83 c4 10             	add    esp,0x10
c0019bd8:	85 c0                	test   eax,eax
c0019bda:	75 20                	jne    c0019bfc <CPU::detectFeatures()+0x704>
c0019bdc:	8b 15 90 13 03 c0    	mov    edx,DWORD PTR ds:0xc0031390
c0019be2:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019be8:	a8 01                	test   al,0x1
c0019bea:	74 10                	je     c0019bfc <CPU::detectFeatures()+0x704>
c0019bec:	83 e0 fe             	and    eax,0xfffffffe
c0019bef:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019bf5:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019bfc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019c02:	c1 e8 0e             	shr    eax,0xe
c0019c05:	3c 05                	cmp    al,0x5
c0019c07:	0f 85 cc 02 00 00    	jne    c0019ed9 <CPU::detectFeatures()+0x9e1>
c0019c0d:	56                   	push   esi
c0019c0e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019c14:	83 e0 0f             	and    eax,0xf
c0019c17:	50                   	push   eax
c0019c18:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019c1e:	66 c1 e8 06          	shr    ax,0x6
c0019c22:	0f b6 c0             	movzx  eax,al
c0019c25:	50                   	push   eax
c0019c26:	6a 05                	push   0x5
c0019c28:	e8 03 f3 ff ff       	call   c0018f30 <CPU::AMD_K6_writeback(int, int, int)>
c0019c2d:	e9 1f 02 00 00       	jmp    c0019e51 <CPU::detectFeatures()+0x959>
c0019c32:	8d 50 fd             	lea    edx,[eax-0x3]
c0019c35:	83 fa 01             	cmp    edx,0x1
c0019c38:	76 09                	jbe    c0019c43 <CPU::detectFeatures()+0x74b>
c0019c3a:	83 f8 06             	cmp    eax,0x6
c0019c3d:	0f 85 91 01 00 00    	jne    c0019dd4 <CPU::detectFeatures()+0x8dc>
c0019c43:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019c49:	c1 ea 0e             	shr    edx,0xe
c0019c4c:	80 fa 05             	cmp    dl,0x5
c0019c4f:	75 7b                	jne    c0019ccc <CPU::detectFeatures()+0x7d4>
c0019c51:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019c57:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019c5c:	66 81 fa 00 01       	cmp    dx,0x100
c0019c61:	75 0c                	jne    c0019c6f <CPU::detectFeatures()+0x777>
c0019c63:	51                   	push   ecx
c0019c64:	51                   	push   ecx
c0019c65:	68 43 d0 02 c0       	push   0xc002d043
c0019c6a:	e9 dc 01 00 00       	jmp    c0019e4b <CPU::detectFeatures()+0x953>
c0019c6f:	66 81 fa 00 02       	cmp    dx,0x200
c0019c74:	75 0c                	jne    c0019c82 <CPU::detectFeatures()+0x78a>
c0019c76:	52                   	push   edx
c0019c77:	52                   	push   edx
c0019c78:	68 56 d0 02 c0       	push   0xc002d056
c0019c7d:	e9 c9 01 00 00       	jmp    c0019e4b <CPU::detectFeatures()+0x953>
c0019c82:	66 81 fa 40 02       	cmp    dx,0x240
c0019c87:	75 0c                	jne    c0019c95 <CPU::detectFeatures()+0x79d>
c0019c89:	50                   	push   eax
c0019c8a:	50                   	push   eax
c0019c8b:	68 68 d0 02 c0       	push   0xc002d068
c0019c90:	e9 b6 01 00 00       	jmp    c0019e4b <CPU::detectFeatures()+0x953>
c0019c95:	83 f8 06             	cmp    eax,0x6
c0019c98:	75 0c                	jne    c0019ca6 <CPU::detectFeatures()+0x7ae>
c0019c9a:	50                   	push   eax
c0019c9b:	50                   	push   eax
c0019c9c:	68 7a d0 02 c0       	push   0xc002d07a
c0019ca1:	e9 a5 01 00 00       	jmp    c0019e4b <CPU::detectFeatures()+0x953>
c0019ca6:	83 f8 04             	cmp    eax,0x4
c0019ca9:	75 0c                	jne    c0019cb7 <CPU::detectFeatures()+0x7bf>
c0019cab:	50                   	push   eax
c0019cac:	50                   	push   eax
c0019cad:	68 86 d0 02 c0       	push   0xc002d086
c0019cb2:	e9 94 01 00 00       	jmp    c0019e4b <CPU::detectFeatures()+0x953>
c0019cb7:	83 f8 03             	cmp    eax,0x3
c0019cba:	0f 85 19 02 00 00    	jne    c0019ed9 <CPU::detectFeatures()+0x9e1>
c0019cc0:	50                   	push   eax
c0019cc1:	50                   	push   eax
c0019cc2:	68 8e d0 02 c0       	push   0xc002d08e
c0019cc7:	e9 7f 01 00 00       	jmp    c0019e4b <CPU::detectFeatures()+0x953>
c0019ccc:	80 fa 06             	cmp    dl,0x6
c0019ccf:	0f 85 db 00 00 00    	jne    c0019db0 <CPU::detectFeatures()+0x8b8>
c0019cd5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019cdb:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019ce0:	66 81 fa 80 01       	cmp    dx,0x180
c0019ce5:	75 0c                	jne    c0019cf3 <CPU::detectFeatures()+0x7fb>
c0019ce7:	50                   	push   eax
c0019ce8:	50                   	push   eax
c0019ce9:	68 99 d0 02 c0       	push   0xc002d099
c0019cee:	e9 58 01 00 00       	jmp    c0019e4b <CPU::detectFeatures()+0x953>
c0019cf3:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019cf9:	66 f7 c1 80 ff       	test   cx,0xff80
c0019cfe:	75 0c                	jne    c0019d0c <CPU::detectFeatures()+0x814>
c0019d00:	50                   	push   eax
c0019d01:	50                   	push   eax
c0019d02:	68 a9 d0 02 c0       	push   0xc002d0a9
c0019d07:	e9 3f 01 00 00       	jmp    c0019e4b <CPU::detectFeatures()+0x953>
c0019d0c:	66 81 fa 40 02       	cmp    dx,0x240
c0019d11:	75 0c                	jne    c0019d1f <CPU::detectFeatures()+0x827>
c0019d13:	55                   	push   ebp
c0019d14:	55                   	push   ebp
c0019d15:	68 b0 d0 02 c0       	push   0xc002d0b0
c0019d1a:	e9 2c 01 00 00       	jmp    c0019e4b <CPU::detectFeatures()+0x953>
c0019d1f:	66 81 fa 80 02       	cmp    dx,0x280
c0019d24:	75 0c                	jne    c0019d32 <CPU::detectFeatures()+0x83a>
c0019d26:	57                   	push   edi
c0019d27:	57                   	push   edi
c0019d28:	68 b9 d0 02 c0       	push   0xc002d0b9
c0019d2d:	e9 19 01 00 00       	jmp    c0019e4b <CPU::detectFeatures()+0x953>
c0019d32:	66 81 fa 40 03       	cmp    dx,0x340
c0019d37:	74 ed                	je     c0019d26 <CPU::detectFeatures()+0x82e>
c0019d39:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019d3e:	75 0c                	jne    c0019d4c <CPU::detectFeatures()+0x854>
c0019d40:	56                   	push   esi
c0019d41:	56                   	push   esi
c0019d42:	68 c0 d0 02 c0       	push   0xc002d0c0
c0019d47:	e9 ff 00 00 00       	jmp    c0019e4b <CPU::detectFeatures()+0x953>
c0019d4c:	83 f8 06             	cmp    eax,0x6
c0019d4f:	0f 84 45 ff ff ff    	je     c0019c9a <CPU::detectFeatures()+0x7a2>
c0019d55:	83 f8 04             	cmp    eax,0x4
c0019d58:	0f 84 4d ff ff ff    	je     c0019cab <CPU::detectFeatures()+0x7b3>
c0019d5e:	83 f8 03             	cmp    eax,0x3
c0019d61:	0f 85 72 01 00 00    	jne    c0019ed9 <CPU::detectFeatures()+0x9e1>
c0019d67:	51                   	push   ecx
c0019d68:	51                   	push   ecx
c0019d69:	68 c9 d0 02 c0       	push   0xc002d0c9
c0019d6e:	53                   	push   ebx
c0019d6f:	e8 b4 ab ff ff       	call   c0014928 <Device::setName(char const*)>
c0019d74:	b1 c1                	mov    cl,0xc1
c0019d76:	88 c8                	mov    al,cl
c0019d78:	e6 22                	out    0x22,al
c0019d7a:	e4 23                	in     al,0x23
c0019d7c:	88 c2                	mov    dl,al
c0019d7e:	88 c8                	mov    al,cl
c0019d80:	e6 22                	out    0x22,al
c0019d82:	88 d0                	mov    al,dl
c0019d84:	83 c8 10             	or     eax,0x10
c0019d87:	e6 23                	out    0x23,al
c0019d89:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019d90:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019d93:	89 d0                	mov    eax,edx
c0019d95:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019d9b:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019d9f:	40                   	inc    eax
c0019da0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019da6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019dab:	e9 a1 00 00 00       	jmp    c0019e51 <CPU::detectFeatures()+0x959>
c0019db0:	83 f8 06             	cmp    eax,0x6
c0019db3:	0f 84 e1 fe ff ff    	je     c0019c9a <CPU::detectFeatures()+0x7a2>
c0019db9:	83 f8 04             	cmp    eax,0x4
c0019dbc:	0f 84 e9 fe ff ff    	je     c0019cab <CPU::detectFeatures()+0x7b3>
c0019dc2:	83 f8 03             	cmp    eax,0x3
c0019dc5:	0f 85 0e 01 00 00    	jne    c0019ed9 <CPU::detectFeatures()+0x9e1>
c0019dcb:	52                   	push   edx
c0019dcc:	52                   	push   edx
c0019dcd:	68 d4 d0 02 c0       	push   0xc002d0d4
c0019dd2:	eb 77                	jmp    c0019e4b <CPU::detectFeatures()+0x953>
c0019dd4:	83 f8 07             	cmp    eax,0x7
c0019dd7:	75 09                	jne    c0019de2 <CPU::detectFeatures()+0x8ea>
c0019dd9:	50                   	push   eax
c0019dda:	50                   	push   eax
c0019ddb:	68 de d0 02 c0       	push   0xc002d0de
c0019de0:	eb 69                	jmp    c0019e4b <CPU::detectFeatures()+0x953>
c0019de2:	83 f8 0a             	cmp    eax,0xa
c0019de5:	75 09                	jne    c0019df0 <CPU::detectFeatures()+0x8f8>
c0019de7:	50                   	push   eax
c0019de8:	50                   	push   eax
c0019de9:	68 e9 d0 02 c0       	push   0xc002d0e9
c0019dee:	eb 5b                	jmp    c0019e4b <CPU::detectFeatures()+0x953>
c0019df0:	83 f8 0b             	cmp    eax,0xb
c0019df3:	75 09                	jne    c0019dfe <CPU::detectFeatures()+0x906>
c0019df5:	50                   	push   eax
c0019df6:	50                   	push   eax
c0019df7:	68 f1 d0 02 c0       	push   0xc002d0f1
c0019dfc:	eb 4d                	jmp    c0019e4b <CPU::detectFeatures()+0x953>
c0019dfe:	83 f8 08             	cmp    eax,0x8
c0019e01:	75 09                	jne    c0019e0c <CPU::detectFeatures()+0x914>
c0019e03:	50                   	push   eax
c0019e04:	50                   	push   eax
c0019e05:	68 fa d0 02 c0       	push   0xc002d0fa
c0019e0a:	eb 3f                	jmp    c0019e4b <CPU::detectFeatures()+0x953>
c0019e0c:	83 f8 09             	cmp    eax,0x9
c0019e0f:	75 09                	jne    c0019e1a <CPU::detectFeatures()+0x922>
c0019e11:	50                   	push   eax
c0019e12:	50                   	push   eax
c0019e13:	68 02 d1 02 c0       	push   0xc002d102
c0019e18:	eb 31                	jmp    c0019e4b <CPU::detectFeatures()+0x953>
c0019e1a:	83 f8 05             	cmp    eax,0x5
c0019e1d:	75 09                	jne    c0019e28 <CPU::detectFeatures()+0x930>
c0019e1f:	50                   	push   eax
c0019e20:	50                   	push   eax
c0019e21:	68 0a d1 02 c0       	push   0xc002d10a
c0019e26:	eb 23                	jmp    c0019e4b <CPU::detectFeatures()+0x953>
c0019e28:	83 f8 0c             	cmp    eax,0xc
c0019e2b:	75 09                	jne    c0019e36 <CPU::detectFeatures()+0x93e>
c0019e2d:	55                   	push   ebp
c0019e2e:	55                   	push   ebp
c0019e2f:	68 18 d1 02 c0       	push   0xc002d118
c0019e34:	eb 15                	jmp    c0019e4b <CPU::detectFeatures()+0x953>
c0019e36:	83 f8 0d             	cmp    eax,0xd
c0019e39:	75 09                	jne    c0019e44 <CPU::detectFeatures()+0x94c>
c0019e3b:	57                   	push   edi
c0019e3c:	57                   	push   edi
c0019e3d:	68 23 d1 02 c0       	push   0xc002d123
c0019e42:	eb 07                	jmp    c0019e4b <CPU::detectFeatures()+0x953>
c0019e44:	56                   	push   esi
c0019e45:	56                   	push   esi
c0019e46:	68 37 d1 02 c0       	push   0xc002d137
c0019e4b:	53                   	push   ebx
c0019e4c:	e8 d7 aa ff ff       	call   c0014928 <Device::setName(char const*)>
c0019e51:	83 c4 10             	add    esp,0x10
c0019e54:	e9 80 00 00 00       	jmp    c0019ed9 <CPU::detectFeatures()+0x9e1>
c0019e59:	51                   	push   ecx
c0019e5a:	51                   	push   ecx
c0019e5b:	68 83 cf 02 c0       	push   0xc002cf83
c0019e60:	57                   	push   edi
c0019e61:	e8 fd 68 fe ff       	call   c0000763 <strcpy>
c0019e66:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019e70:	e8 39 64 fe ff       	call   c00002ae <is486>
c0019e75:	83 c4 10             	add    esp,0x10
c0019e78:	85 c0                	test   eax,eax
c0019e7a:	74 2b                	je     c0019ea7 <CPU::detectFeatures()+0x9af>
c0019e7c:	52                   	push   edx
c0019e7d:	52                   	push   edx
c0019e7e:	68 43 d1 02 c0       	push   0xc002d143
c0019e83:	53                   	push   ebx
c0019e84:	e8 9f aa ff ff       	call   c0014928 <Device::setName(char const*)>
c0019e89:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019e90:	0f 20 c0             	mov    eax,cr0
c0019e93:	83 e0 14             	and    eax,0x14
c0019e96:	83 c4 10             	add    esp,0x10
c0019e99:	83 f8 04             	cmp    eax,0x4
c0019e9c:	75 1f                	jne    c0019ebd <CPU::detectFeatures()+0x9c5>
c0019e9e:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019ea5:	eb 32                	jmp    c0019ed9 <CPU::detectFeatures()+0x9e1>
c0019ea7:	50                   	push   eax
c0019ea8:	50                   	push   eax
c0019ea9:	68 4e d1 02 c0       	push   0xc002d14e
c0019eae:	53                   	push   ebx
c0019eaf:	e8 74 aa ff ff       	call   c0014928 <Device::setName(char const*)>
c0019eb4:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019ebb:	eb d3                	jmp    c0019e90 <CPU::detectFeatures()+0x998>
c0019ebd:	e8 c7 63 fe ff       	call   c0000289 <hasLegacyFPU>
c0019ec2:	83 e0 01             	and    eax,0x1
c0019ec5:	8d 14 00             	lea    edx,[eax+eax*1]
c0019ec8:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019ece:	83 e0 fd             	and    eax,0xfffffffd
c0019ed1:	09 d0                	or     eax,edx
c0019ed3:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019ed9:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019ee0:	83 c4 4c             	add    esp,0x4c
c0019ee3:	5b                   	pop    ebx
c0019ee4:	5e                   	pop    esi
c0019ee5:	5f                   	pop    edi
c0019ee6:	5d                   	pop    ebp
c0019ee7:	c3                   	ret    

c0019ee8 <CPU::close(int, int, void*)>:
c0019ee8:	31 c0                	xor    eax,eax
c0019eea:	c3                   	ret    
c0019eeb:	90                   	nop

c0019eec <CPU::setupSMEP()>:
c0019eec:	0f 20 e0             	mov    eax,cr4
c0019eef:	0d 00 00 10 00       	or     eax,0x100000
c0019ef4:	0f 22 e0             	mov    cr4,eax
c0019ef7:	c3                   	ret    

c0019ef8 <CPU::setupSMAP()>:
c0019ef8:	0f 20 e0             	mov    eax,cr4
c0019efb:	0d 00 00 20 00       	or     eax,0x200000
c0019f00:	0f 22 e0             	mov    cr4,eax
c0019f03:	eb 79                	jmp    c0019f7e <CPU::prohibitUsermodeDataAccess()>
c0019f05:	90                   	nop

c0019f06 <CPU::setupUMIP()>:
c0019f06:	0f 20 e0             	mov    eax,cr4
c0019f09:	80 cc 08             	or     ah,0x8
c0019f0c:	0f 22 e0             	mov    cr4,eax
c0019f0f:	c3                   	ret    

c0019f10 <CPU::setupTSC()>:
c0019f10:	0f 20 e0             	mov    eax,cr4
c0019f13:	83 c8 04             	or     eax,0x4
c0019f16:	0f 22 e0             	mov    cr4,eax
c0019f19:	c3                   	ret    

c0019f1a <CPU::setupLargePages()>:
c0019f1a:	0f 20 e0             	mov    eax,cr4
c0019f1d:	83 c8 10             	or     eax,0x10
c0019f20:	0f 22 e0             	mov    cr4,eax
c0019f23:	c3                   	ret    

c0019f24 <CPU::setupPAT()>:
c0019f24:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0019f29:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019f30:	74 2c                	je     c0019f5e <CPU::setupPAT()+0x3a>
c0019f32:	53                   	push   ebx
c0019f33:	83 ec 10             	sub    esp,0x10
c0019f36:	68 77 02 00 00       	push   0x277
c0019f3b:	50                   	push   eax
c0019f3c:	e8 63 55 ff ff       	call   c000f4a4 <Computer::rdmsr(unsigned int)>
c0019f41:	83 e2 f8             	and    edx,0xfffffff8
c0019f44:	83 ca 01             	or     edx,0x1
c0019f47:	52                   	push   edx
c0019f48:	50                   	push   eax
c0019f49:	68 77 02 00 00       	push   0x277
c0019f4e:	ff 35 90 13 03 c0    	push   DWORD PTR ds:0xc0031390
c0019f54:	e8 77 55 ff ff       	call   c000f4d0 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019f59:	83 c4 28             	add    esp,0x28
c0019f5c:	5b                   	pop    ebx
c0019f5d:	c3                   	ret    
c0019f5e:	c3                   	ret    
c0019f5f:	90                   	nop

c0019f60 <CPU::setupMTRR()>:
c0019f60:	c3                   	ret    
c0019f61:	90                   	nop

c0019f62 <CPU::setupGlobalPages()>:
c0019f62:	0f 20 e0             	mov    eax,cr4
c0019f65:	0c 80                	or     al,0x80
c0019f67:	0f 22 e0             	mov    cr4,eax
c0019f6a:	c3                   	ret    
c0019f6b:	90                   	nop

c0019f6c <CPU::allowUsermodeDataAccess()>:
c0019f6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f70:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019f77:	74 03                	je     c0019f7c <CPU::allowUsermodeDataAccess()+0x10>
c0019f79:	0f 01 cb             	stac   
c0019f7c:	c3                   	ret    
c0019f7d:	90                   	nop

c0019f7e <CPU::prohibitUsermodeDataAccess()>:
c0019f7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f82:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019f89:	74 03                	je     c0019f8e <CPU::prohibitUsermodeDataAccess()+0x10>
c0019f8b:	0f 01 ca             	clac   
c0019f8e:	c3                   	ret    
c0019f8f:	90                   	nop

c0019f90 <CPU::setupFeatures()>:
c0019f90:	53                   	push   ebx
c0019f91:	83 ec 08             	sub    esp,0x8
c0019f94:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f98:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0019f9f:	74 07                	je     c0019fa8 <CPU::setupFeatures()+0x18>
c0019fa1:	53                   	push   ebx
c0019fa2:	e8 45 ff ff ff       	call   c0019eec <CPU::setupSMEP()>
c0019fa7:	58                   	pop    eax
c0019fa8:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0019faf:	74 0c                	je     c0019fbd <CPU::setupFeatures()+0x2d>
c0019fb1:	83 ec 0c             	sub    esp,0xc
c0019fb4:	53                   	push   ebx
c0019fb5:	e8 3e ff ff ff       	call   c0019ef8 <CPU::setupSMAP()>
c0019fba:	83 c4 10             	add    esp,0x10
c0019fbd:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0019fc4:	74 0c                	je     c0019fd2 <CPU::setupFeatures()+0x42>
c0019fc6:	83 ec 0c             	sub    esp,0xc
c0019fc9:	53                   	push   ebx
c0019fca:	e8 37 ff ff ff       	call   c0019f06 <CPU::setupUMIP()>
c0019fcf:	83 c4 10             	add    esp,0x10
c0019fd2:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0019fd9:	74 0c                	je     c0019fe7 <CPU::setupFeatures()+0x57>
c0019fdb:	83 ec 0c             	sub    esp,0xc
c0019fde:	53                   	push   ebx
c0019fdf:	e8 2c ff ff ff       	call   c0019f10 <CPU::setupTSC()>
c0019fe4:	83 c4 10             	add    esp,0x10
c0019fe7:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0019fee:	74 0c                	je     c0019ffc <CPU::setupFeatures()+0x6c>
c0019ff0:	83 ec 0c             	sub    esp,0xc
c0019ff3:	53                   	push   ebx
c0019ff4:	e8 21 ff ff ff       	call   c0019f1a <CPU::setupLargePages()>
c0019ff9:	83 c4 10             	add    esp,0x10
c0019ffc:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c001a003:	74 0c                	je     c001a011 <CPU::setupFeatures()+0x81>
c001a005:	83 ec 0c             	sub    esp,0xc
c001a008:	53                   	push   ebx
c001a009:	e8 54 ff ff ff       	call   c0019f62 <CPU::setupGlobalPages()>
c001a00e:	83 c4 10             	add    esp,0x10
c001a011:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c001a018:	74 0d                	je     c001a027 <CPU::setupFeatures()+0x97>
c001a01a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001a01e:	83 c4 08             	add    esp,0x8
c001a021:	5b                   	pop    ebx
c001a022:	e9 fd fe ff ff       	jmp    c0019f24 <CPU::setupPAT()>
c001a027:	83 c4 08             	add    esp,0x8
c001a02a:	5b                   	pop    ebx
c001a02b:	c3                   	ret    

c001a02c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c001a02c:	57                   	push   edi
c001a02d:	56                   	push   esi
c001a02e:	53                   	push   ebx
c001a02f:	51                   	push   ecx
c001a030:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a034:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c001a037:	0f 02 c0             	lar    eax,ax
c001a03a:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c001a03d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a041:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c001a044:	88 ca                	mov    dl,cl
c001a046:	c0 ea 06             	shr    dl,0x6
c001a049:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c001a04d:	89 ca                	mov    edx,ecx
c001a04f:	66 c1 ea 03          	shr    dx,0x3
c001a053:	83 e2 07             	and    edx,0x7
c001a056:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001a05b:	88 17                	mov    BYTE PTR [edi],dl
c001a05d:	0f 84 a6 01 00 00    	je     c001a209 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c001a063:	83 e1 07             	and    ecx,0x7
c001a066:	80 f9 04             	cmp    cl,0x4
c001a069:	0f 84 98 00 00 00    	je     c001a107 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c001a06f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a074:	0f 95 c0             	setne  al
c001a077:	80 f9 05             	cmp    cl,0x5
c001a07a:	0f 95 c2             	setne  dl
c001a07d:	08 c2                	or     dl,al
c001a07f:	74 79                	je     c001a0fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c001a081:	84 c9                	test   cl,cl
c001a083:	75 05                	jne    c001a08a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c001a085:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001a088:	eb 3c                	jmp    c001a0c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a08a:	80 f9 01             	cmp    cl,0x1
c001a08d:	75 05                	jne    c001a094 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001a08f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001a092:	eb 32                	jmp    c001a0c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a094:	80 f9 02             	cmp    cl,0x2
c001a097:	75 05                	jne    c001a09e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c001a099:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001a09c:	eb 28                	jmp    c001a0c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a09e:	31 c0                	xor    eax,eax
c001a0a0:	80 f9 03             	cmp    cl,0x3
c001a0a3:	75 05                	jne    c001a0aa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c001a0a5:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a0a8:	eb 1c                	jmp    c001a0c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a0aa:	80 f9 05             	cmp    cl,0x5
c001a0ad:	75 05                	jne    c001a0b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c001a0af:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001a0b2:	eb 12                	jmp    c001a0c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a0b4:	80 f9 06             	cmp    cl,0x6
c001a0b7:	75 05                	jne    c001a0be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c001a0b9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a0bc:	eb 08                	jmp    c001a0c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a0be:	80 f9 07             	cmp    cl,0x7
c001a0c1:	75 03                	jne    c001a0c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a0c3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a0c6:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001a0cb:	75 10                	jne    c001a0dd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c001a0cd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c001a0d1:	b9 03 00 00 00       	mov    ecx,0x3
c001a0d6:	01 d0                	add    eax,edx
c001a0d8:	e9 37 01 00 00       	jmp    c001a214 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a0dd:	b9 02 00 00 00       	mov    ecx,0x2
c001a0e2:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001a0e7:	0f 85 27 01 00 00    	jne    c001a214 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a0ed:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c001a0f0:	b9 06 00 00 00       	mov    ecx,0x6
c001a0f5:	e9 1a 01 00 00       	jmp    c001a214 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a0fa:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001a0fd:	b9 06 00 00 00       	mov    ecx,0x6
c001a102:	e9 0f 01 00 00       	jmp    c001a216 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a107:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c001a10a:	88 ca                	mov    dl,cl
c001a10c:	c0 ea 06             	shr    dl,0x6
c001a10f:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001a113:	89 ca                	mov    edx,ecx
c001a115:	66 c1 ea 03          	shr    dx,0x3
c001a119:	83 e2 07             	and    edx,0x7
c001a11c:	80 e1 07             	and    cl,0x7
c001a11f:	75 05                	jne    c001a126 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001a121:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c001a124:	eb 4c                	jmp    c001a172 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a126:	80 f9 01             	cmp    cl,0x1
c001a129:	75 05                	jne    c001a130 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c001a12b:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001a12e:	eb 42                	jmp    c001a172 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a130:	80 f9 02             	cmp    cl,0x2
c001a133:	75 05                	jne    c001a13a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c001a135:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001a138:	eb 38                	jmp    c001a172 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a13a:	80 f9 03             	cmp    cl,0x3
c001a13d:	75 05                	jne    c001a144 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001a13f:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001a142:	eb 2e                	jmp    c001a172 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a144:	80 f9 04             	cmp    cl,0x4
c001a147:	75 12                	jne    c001a15b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c001a149:	f6 c4 60             	test   ah,0x60
c001a14c:	75 08                	jne    c001a156 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001a14e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001a151:	8d 78 14             	lea    edi,[eax+0x14]
c001a154:	eb 1c                	jmp    c001a172 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a156:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001a159:	eb 17                	jmp    c001a172 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a15b:	80 f9 05             	cmp    cl,0x5
c001a15e:	75 05                	jne    c001a165 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001a160:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001a163:	eb 0d                	jmp    c001a172 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a165:	80 f9 06             	cmp    cl,0x6
c001a168:	75 05                	jne    c001a16f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001a16a:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001a16d:	eb 03                	jmp    c001a172 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a16f:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a172:	84 d2                	test   dl,dl
c001a174:	75 05                	jne    c001a17b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001a176:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001a179:	eb 3c                	jmp    c001a1b7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a17b:	80 fa 01             	cmp    dl,0x1
c001a17e:	75 05                	jne    c001a185 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001a180:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001a183:	eb 32                	jmp    c001a1b7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a185:	80 fa 02             	cmp    dl,0x2
c001a188:	75 05                	jne    c001a18f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001a18a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001a18d:	eb 28                	jmp    c001a1b7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a18f:	80 fa 03             	cmp    dl,0x3
c001a192:	75 05                	jne    c001a199 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001a194:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a197:	eb 1e                	jmp    c001a1b7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a199:	31 c0                	xor    eax,eax
c001a19b:	80 fa 04             	cmp    dl,0x4
c001a19e:	74 17                	je     c001a1b7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a1a0:	80 fa 05             	cmp    dl,0x5
c001a1a3:	75 05                	jne    c001a1aa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001a1a5:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001a1a8:	eb 0d                	jmp    c001a1b7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a1aa:	80 fa 06             	cmp    dl,0x6
c001a1ad:	75 05                	jne    c001a1b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001a1af:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a1b2:	eb 03                	jmp    c001a1b7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a1b4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a1b7:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a1bc:	0f 94 c2             	sete   dl
c001a1bf:	80 f9 05             	cmp    cl,0x5
c001a1c2:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001a1c6:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001a1cb:	d3 e0                	shl    eax,cl
c001a1cd:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001a1d1:	74 0a                	je     c001a1dd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001a1d3:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a1d6:	b9 07 00 00 00       	mov    ecx,0x7
c001a1db:	eb 37                	jmp    c001a214 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a1dd:	01 f8                	add    eax,edi
c001a1df:	b9 03 00 00 00       	mov    ecx,0x3
c001a1e4:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a1e9:	74 2b                	je     c001a216 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a1eb:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001a1f0:	75 0d                	jne    c001a1ff <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001a1f2:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c001a1f6:	01 c8                	add    eax,ecx
c001a1f8:	b9 04 00 00 00       	mov    ecx,0x4
c001a1fd:	eb 17                	jmp    c001a216 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a1ff:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a202:	b9 07 00 00 00       	mov    ecx,0x7
c001a207:	eb 0d                	jmp    c001a216 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a209:	b9 02 00 00 00       	mov    ecx,0x2
c001a20e:	b2 01                	mov    dl,0x1
c001a210:	31 c0                	xor    eax,eax
c001a212:	eb 02                	jmp    c001a216 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a214:	31 d2                	xor    edx,edx
c001a216:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a21a:	89 0b                	mov    DWORD PTR [ebx],ecx
c001a21c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a220:	88 11                	mov    BYTE PTR [ecx],dl
c001a222:	5a                   	pop    edx
c001a223:	5b                   	pop    ebx
c001a224:	5e                   	pop    esi
c001a225:	5f                   	pop    edi
c001a226:	c3                   	ret    
c001a227:	90                   	nop

c001a228 <EnvVarContainer::getEnv(char const*)>:
c001a228:	57                   	push   edi
c001a229:	56                   	push   esi
c001a22a:	53                   	push   ebx
c001a22b:	31 db                	xor    ebx,ebx
c001a22d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a231:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a233:	7e 2b                	jle    c001a260 <EnvVarContainer::getEnv(char const*)+0x38>
c001a235:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a23c:	50                   	push   eax
c001a23d:	50                   	push   eax
c001a23e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a241:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a244:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a248:	e8 67 65 fe ff       	call   c00007b4 <strcmp>
c001a24d:	83 c4 10             	add    esp,0x10
c001a250:	85 c0                	test   eax,eax
c001a252:	75 09                	jne    c001a25d <EnvVarContainer::getEnv(char const*)+0x35>
c001a254:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a257:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a25b:	eb 05                	jmp    c001a262 <EnvVarContainer::getEnv(char const*)+0x3a>
c001a25d:	43                   	inc    ebx
c001a25e:	eb d1                	jmp    c001a231 <EnvVarContainer::getEnv(char const*)+0x9>
c001a260:	31 c0                	xor    eax,eax
c001a262:	5b                   	pop    ebx
c001a263:	5e                   	pop    esi
c001a264:	5f                   	pop    edi
c001a265:	c3                   	ret    

c001a266 <EnvVarContainer::setEnv(char const*, char const*)>:
c001a266:	57                   	push   edi
c001a267:	56                   	push   esi
c001a268:	53                   	push   ebx
c001a269:	83 ec 1c             	sub    esp,0x1c
c001a26c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a270:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a274:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a278:	57                   	push   edi
c001a279:	e8 63 64 fe ff       	call   c00006e1 <strlen>
c001a27e:	40                   	inc    eax
c001a27f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a282:	e8 d5 5c ff ff       	call   c000ff5c <malloc>
c001a287:	89 34 24             	mov    DWORD PTR [esp],esi
c001a28a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a28e:	e8 4e 64 fe ff       	call   c00006e1 <strlen>
c001a293:	40                   	inc    eax
c001a294:	89 04 24             	mov    DWORD PTR [esp],eax
c001a297:	e8 c0 5c ff ff       	call   c000ff5c <malloc>
c001a29c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a29f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a2a3:	e8 39 64 fe ff       	call   c00006e1 <strlen>
c001a2a8:	83 c4 0c             	add    esp,0xc
c001a2ab:	40                   	inc    eax
c001a2ac:	50                   	push   eax
c001a2ad:	6a 00                	push   0x0
c001a2af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a2b3:	e8 0c 64 fe ff       	call   c00006c4 <memset>
c001a2b8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a2bb:	e8 21 64 fe ff       	call   c00006e1 <strlen>
c001a2c0:	83 c4 0c             	add    esp,0xc
c001a2c3:	40                   	inc    eax
c001a2c4:	50                   	push   eax
c001a2c5:	57                   	push   edi
c001a2c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a2ca:	e8 d1 63 fe ff       	call   c00006a0 <memcpy>
c001a2cf:	89 34 24             	mov    DWORD PTR [esp],esi
c001a2d2:	e8 0a 64 fe ff       	call   c00006e1 <strlen>
c001a2d7:	83 c4 0c             	add    esp,0xc
c001a2da:	40                   	inc    eax
c001a2db:	50                   	push   eax
c001a2dc:	6a 00                	push   0x0
c001a2de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a2e2:	e8 dd 63 fe ff       	call   c00006c4 <memset>
c001a2e7:	89 34 24             	mov    DWORD PTR [esp],esi
c001a2ea:	e8 f2 63 fe ff       	call   c00006e1 <strlen>
c001a2ef:	83 c4 0c             	add    esp,0xc
c001a2f2:	40                   	inc    eax
c001a2f3:	50                   	push   eax
c001a2f4:	56                   	push   esi
c001a2f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a2f9:	e8 a2 63 fe ff       	call   c00006a0 <memcpy>
c001a2fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a300:	40                   	inc    eax
c001a301:	89 03                	mov    DWORD PTR [ebx],eax
c001a303:	c1 e0 03             	shl    eax,0x3
c001a306:	5a                   	pop    edx
c001a307:	59                   	pop    ecx
c001a308:	50                   	push   eax
c001a309:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a30c:	e8 37 5c ff ff       	call   c000ff48 <realloc>
c001a311:	83 c4 0c             	add    esp,0xc
c001a314:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a317:	6a 08                	push   0x8
c001a319:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a31d:	52                   	push   edx
c001a31e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a320:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a324:	50                   	push   eax
c001a325:	e8 76 63 fe ff       	call   c00006a0 <memcpy>
c001a32a:	83 c4 20             	add    esp,0x20
c001a32d:	5b                   	pop    ebx
c001a32e:	5e                   	pop    esi
c001a32f:	5f                   	pop    edi
c001a330:	c3                   	ret    
c001a331:	90                   	nop

c001a332 <EnvVarContainer::deleteEnv(char const*)>:
c001a332:	c3                   	ret    
c001a333:	90                   	nop

c001a334 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a334:	55                   	push   ebp
c001a335:	57                   	push   edi
c001a336:	56                   	push   esi
c001a337:	53                   	push   ebx
c001a338:	81 ec 38 01 00 00    	sub    esp,0x138
c001a33e:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a345:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a34c:	68 14 01 00 00       	push   0x114
c001a351:	e8 06 5c ff ff       	call   c000ff5c <malloc>
c001a356:	83 c4 0c             	add    esp,0xc
c001a359:	89 c7                	mov    edi,eax
c001a35b:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a35e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a365:	50                   	push   eax
c001a366:	e8 87 93 ff ff       	call   c00136f2 <File::File(char const*, Process*)>
c001a36b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a36e:	e8 4f 97 ff ff       	call   c0013ac2 <File::exists()>
c001a373:	83 c4 10             	add    esp,0x10
c001a376:	84 c0                	test   al,al
c001a378:	75 31                	jne    c001a3ab <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a37a:	51                   	push   ecx
c001a37b:	51                   	push   ecx
c001a37c:	6a 12                	push   0x12
c001a37e:	57                   	push   edi
c001a37f:	e8 20 94 ff ff       	call   c00137a4 <File::open(FileOpenMode)>
c001a384:	8b 07                	mov    eax,DWORD PTR [edi]
c001a386:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a389:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a38c:	e8 50 63 fe ff       	call   c00006e1 <strlen>
c001a391:	5a                   	pop    edx
c001a392:	31 d2                	xor    edx,edx
c001a394:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a398:	51                   	push   ecx
c001a399:	55                   	push   ebp
c001a39a:	52                   	push   edx
c001a39b:	50                   	push   eax
c001a39c:	57                   	push   edi
c001a39d:	ff d3                	call   ebx
c001a39f:	83 c4 14             	add    esp,0x14
c001a3a2:	57                   	push   edi
c001a3a3:	e8 0a 95 ff ff       	call   c00138b2 <File::close()>
c001a3a8:	83 c4 10             	add    esp,0x10
c001a3ab:	31 db                	xor    ebx,ebx
c001a3ad:	50                   	push   eax
c001a3ae:	31 ed                	xor    ebp,ebp
c001a3b0:	68 00 01 00 00       	push   0x100
c001a3b5:	6a 00                	push   0x0
c001a3b7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a3bb:	50                   	push   eax
c001a3bc:	e8 03 63 fe ff       	call   c00006c4 <memset>
c001a3c1:	58                   	pop    eax
c001a3c2:	5a                   	pop    edx
c001a3c3:	6a 01                	push   0x1
c001a3c5:	57                   	push   edi
c001a3c6:	e8 d9 93 ff ff       	call   c00137a4 <File::open(FileOpenMode)>
c001a3cb:	83 c4 10             	add    esp,0x10
c001a3ce:	83 ec 0c             	sub    esp,0xc
c001a3d1:	8b 07                	mov    eax,DWORD PTR [edi]
c001a3d3:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a3d7:	51                   	push   ecx
c001a3d8:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a3dc:	52                   	push   edx
c001a3dd:	6a 00                	push   0x0
c001a3df:	6a 01                	push   0x1
c001a3e1:	57                   	push   edi
c001a3e2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a3e5:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a3e9:	83 c4 20             	add    esp,0x20
c001a3ec:	3c 0d                	cmp    al,0xd
c001a3ee:	0f 84 12 01 00 00    	je     c001a506 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a3f4:	85 db                	test   ebx,ebx
c001a3f6:	0f 84 fd 00 00 00    	je     c001a4f9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a3fc:	3c 0a                	cmp    al,0xa
c001a3fe:	74 13                	je     c001a413 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a400:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a405:	74 0c                	je     c001a413 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a407:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a40d:	0f 8e e6 00 00 00    	jle    c001a4f9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a413:	83 ec 0c             	sub    esp,0xc
c001a416:	8d 53 01             	lea    edx,[ebx+0x1]
c001a419:	29 dd                	sub    ebp,ebx
c001a41b:	52                   	push   edx
c001a41c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a420:	e8 37 5b ff ff       	call   c000ff5c <malloc>
c001a425:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a428:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a42c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a42f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a433:	e8 24 5b ff ff       	call   c000ff5c <malloc>
c001a438:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a43c:	83 c4 0c             	add    esp,0xc
c001a43f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a443:	52                   	push   edx
c001a444:	6a 00                	push   0x0
c001a446:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a44a:	e8 75 62 fe ff       	call   c00006c4 <memset>
c001a44f:	83 c4 0c             	add    esp,0xc
c001a452:	53                   	push   ebx
c001a453:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a457:	55                   	push   ebp
c001a458:	01 eb                	add    ebx,ebp
c001a45a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a45e:	e8 3d 62 fe ff       	call   c00006a0 <memcpy>
c001a463:	83 c4 0c             	add    esp,0xc
c001a466:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a46a:	51                   	push   ecx
c001a46b:	6a 00                	push   0x0
c001a46d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a471:	e8 4e 62 fe ff       	call   c00006c4 <memset>
c001a476:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a479:	e8 63 62 fe ff       	call   c00006e1 <strlen>
c001a47e:	83 c4 0c             	add    esp,0xc
c001a481:	50                   	push   eax
c001a482:	53                   	push   ebx
c001a483:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a487:	e8 14 62 fe ff       	call   c00006a0 <memcpy>
c001a48c:	5b                   	pop    ebx
c001a48d:	58                   	pop    eax
c001a48e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a492:	68 28 d2 02 c0       	push   0xc002d228
c001a497:	e8 aa 8d ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001a49c:	8b 06                	mov    eax,DWORD PTR [esi]
c001a49e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a4a1:	40                   	inc    eax
c001a4a2:	83 c4 10             	add    esp,0x10
c001a4a5:	89 06                	mov    DWORD PTR [esi],eax
c001a4a7:	85 d2                	test   edx,edx
c001a4a9:	75 0c                	jne    c001a4b7 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a4ab:	83 ec 0c             	sub    esp,0xc
c001a4ae:	6a 08                	push   0x8
c001a4b0:	e8 a7 5a ff ff       	call   c000ff5c <malloc>
c001a4b5:	eb 0c                	jmp    c001a4c3 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a4b7:	c1 e0 03             	shl    eax,0x3
c001a4ba:	51                   	push   ecx
c001a4bb:	51                   	push   ecx
c001a4bc:	50                   	push   eax
c001a4bd:	52                   	push   edx
c001a4be:	e8 85 5a ff ff       	call   c000ff48 <realloc>
c001a4c3:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a4c6:	83 c4 10             	add    esp,0x10
c001a4c9:	31 db                	xor    ebx,ebx
c001a4cb:	52                   	push   edx
c001a4cc:	6a 08                	push   0x8
c001a4ce:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a4d2:	50                   	push   eax
c001a4d3:	8b 16                	mov    edx,DWORD PTR [esi]
c001a4d5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a4d8:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a4dc:	50                   	push   eax
c001a4dd:	e8 be 61 fe ff       	call   c00006a0 <memcpy>
c001a4e2:	83 c4 0c             	add    esp,0xc
c001a4e5:	68 00 01 00 00       	push   0x100
c001a4ea:	6a 00                	push   0x0
c001a4ec:	55                   	push   ebp
c001a4ed:	31 ed                	xor    ebp,ebp
c001a4ef:	e8 d0 61 fe ff       	call   c00006c4 <memset>
c001a4f4:	83 c4 10             	add    esp,0x10
c001a4f7:	eb 0d                	jmp    c001a506 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a4f9:	3c 3d                	cmp    al,0x3d
c001a4fb:	74 07                	je     c001a504 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a4fd:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a501:	45                   	inc    ebp
c001a502:	eb 02                	jmp    c001a506 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a504:	89 eb                	mov    ebx,ebp
c001a506:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a50b:	0f 85 bd fe ff ff    	jne    c001a3ce <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a511:	50                   	push   eax
c001a512:	50                   	push   eax
c001a513:	ff 36                	push   DWORD PTR [esi]
c001a515:	68 36 d2 02 c0       	push   0xc002d236
c001a51a:	e8 27 8d ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001a51f:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a525:	5b                   	pop    ebx
c001a526:	5e                   	pop    esi
c001a527:	5f                   	pop    edi
c001a528:	5d                   	pop    ebp
c001a529:	c3                   	ret    

c001a52a <EnvVarContainer::__loadSystem()>:
c001a52a:	83 ec 10             	sub    esp,0x10
c001a52d:	68 e0 08 03 c0       	push   0xc00308e0
c001a532:	68 61 d2 02 c0       	push   0xc002d261
c001a537:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a53b:	e8 f4 fd ff ff       	call   c001a334 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a540:	83 c4 1c             	add    esp,0x1c
c001a543:	c3                   	ret    

c001a544 <EnvVarContainer::__loadUser()>:
c001a544:	c3                   	ret    
c001a545:	90                   	nop

c001a546 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a546:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a54a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a550:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a554:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a558:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a55b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a55f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a566:	90                   	nop
c001a567:	c3                   	ret    

c001a568 <EnvVarContainer::~EnvVarContainer()>:
c001a568:	83 ec 0c             	sub    esp,0xc
c001a56b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a56f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a572:	85 c0                	test   eax,eax
c001a574:	74 1d                	je     c001a593 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a576:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a57a:	8b 00                	mov    eax,DWORD PTR [eax]
c001a57c:	85 c0                	test   eax,eax
c001a57e:	74 13                	je     c001a593 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a584:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a587:	83 ec 0c             	sub    esp,0xc
c001a58a:	50                   	push   eax
c001a58b:	e8 dc 59 ff ff       	call   c000ff6c <free>
c001a590:	83 c4 10             	add    esp,0x10
c001a593:	90                   	nop
c001a594:	83 c4 0c             	add    esp,0xc
c001a597:	c3                   	ret    

c001a598 <Krnl::getEnv(Process*, char const*)>:
c001a598:	53                   	push   ebx
c001a599:	83 ec 08             	sub    esp,0x8
c001a59c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5a0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a5a4:	39 05 48 48 03 c0    	cmp    DWORD PTR ds:0xc0034848,eax
c001a5aa:	74 04                	je     c001a5b0 <Krnl::getEnv(Process*, char const*)+0x18>
c001a5ac:	85 c0                	test   eax,eax
c001a5ae:	75 0b                	jne    c001a5bb <Krnl::getEnv(Process*, char const*)+0x23>
c001a5b0:	a1 84 3e 03 c0       	mov    eax,ds:0xc0033e84
c001a5b5:	85 c0                	test   eax,eax
c001a5b7:	75 19                	jne    c001a5d2 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a5b9:	eb 27                	jmp    c001a5e2 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a5bb:	52                   	push   edx
c001a5bc:	52                   	push   edx
c001a5bd:	53                   	push   ebx
c001a5be:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a5c4:	e8 5f fc ff ff       	call   c001a228 <EnvVarContainer::getEnv(char const*)>
c001a5c9:	83 c4 10             	add    esp,0x10
c001a5cc:	85 c0                	test   eax,eax
c001a5ce:	75 28                	jne    c001a5f8 <Krnl::getEnv(Process*, char const*)+0x60>
c001a5d0:	eb de                	jmp    c001a5b0 <Krnl::getEnv(Process*, char const*)+0x18>
c001a5d2:	52                   	push   edx
c001a5d3:	52                   	push   edx
c001a5d4:	53                   	push   ebx
c001a5d5:	50                   	push   eax
c001a5d6:	e8 4d fc ff ff       	call   c001a228 <EnvVarContainer::getEnv(char const*)>
c001a5db:	83 c4 10             	add    esp,0x10
c001a5de:	85 c0                	test   eax,eax
c001a5e0:	75 16                	jne    c001a5f8 <Krnl::getEnv(Process*, char const*)+0x60>
c001a5e2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a5e6:	a1 80 3e 03 c0       	mov    eax,ds:0xc0033e80
c001a5eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a5ef:	83 c4 08             	add    esp,0x8
c001a5f2:	5b                   	pop    ebx
c001a5f3:	e9 30 fc ff ff       	jmp    c001a228 <EnvVarContainer::getEnv(char const*)>
c001a5f8:	83 c4 08             	add    esp,0x8
c001a5fb:	5b                   	pop    ebx
c001a5fc:	c3                   	ret    

c001a5fd <Krnl::setEnvSystem(char const*, char const*)>:
c001a5fd:	83 ec 10             	sub    esp,0x10
c001a600:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a604:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a608:	ff 35 80 3e 03 c0    	push   DWORD PTR ds:0xc0033e80
c001a60e:	e8 53 fc ff ff       	call   c001a266 <EnvVarContainer::setEnv(char const*, char const*)>
c001a613:	83 c4 1c             	add    esp,0x1c
c001a616:	c3                   	ret    

c001a617 <Krnl::setEnvUser(char const*, char const*)>:
c001a617:	a1 84 3e 03 c0       	mov    eax,ds:0xc0033e84
c001a61c:	85 c0                	test   eax,eax
c001a61e:	74 15                	je     c001a635 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a620:	83 ec 10             	sub    esp,0x10
c001a623:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a627:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a62b:	50                   	push   eax
c001a62c:	e8 35 fc ff ff       	call   c001a266 <EnvVarContainer::setEnv(char const*, char const*)>
c001a631:	83 c4 1c             	add    esp,0x1c
c001a634:	c3                   	ret    
c001a635:	c3                   	ret    

c001a636 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a636:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a63a:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a640:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a644:	e9 1d fc ff ff       	jmp    c001a266 <EnvVarContainer::setEnv(char const*, char const*)>

c001a649 <Krnl::deleteEnvSystem(char const*)>:
c001a649:	c3                   	ret    

c001a64a <Krnl::deleteEnvUser(char const*)>:
c001a64a:	c3                   	ret    

c001a64b <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a64b:	c3                   	ret    

c001a64c <Krnl::newProcessEnv(Process*)>:
c001a64c:	83 ec 28             	sub    esp,0x28
c001a64f:	6a 0c                	push   0xc
c001a651:	e8 06 59 ff ff       	call   c000ff5c <malloc>
c001a656:	5a                   	pop    edx
c001a657:	59                   	pop    ecx
c001a658:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a65c:	50                   	push   eax
c001a65d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a661:	e8 e0 fe ff ff       	call   c001a546 <EnvVarContainer::EnvVarContainer(Process*)>
c001a666:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a66a:	83 c4 2c             	add    esp,0x2c
c001a66d:	c3                   	ret    

c001a66e <Krnl::copyProcessEnv(Process*, Process*)>:
c001a66e:	56                   	push   esi
c001a66f:	53                   	push   ebx
c001a670:	83 ec 10             	sub    esp,0x10
c001a673:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a677:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a67d:	6a 0c                	push   0xc
c001a67f:	e8 d8 58 ff ff       	call   c000ff5c <malloc>
c001a684:	89 c3                	mov    ebx,eax
c001a686:	58                   	pop    eax
c001a687:	5a                   	pop    edx
c001a688:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a68c:	53                   	push   ebx
c001a68d:	e8 b4 fe ff ff       	call   c001a546 <EnvVarContainer::EnvVarContainer(Process*)>
c001a692:	8b 06                	mov    eax,DWORD PTR [esi]
c001a694:	89 03                	mov    DWORD PTR [ebx],eax
c001a696:	c1 e0 03             	shl    eax,0x3
c001a699:	89 04 24             	mov    DWORD PTR [esp],eax
c001a69c:	e8 bb 58 ff ff       	call   c000ff5c <malloc>
c001a6a1:	83 c4 0c             	add    esp,0xc
c001a6a4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a6a7:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a6a9:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a6b0:	52                   	push   edx
c001a6b1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a6b4:	50                   	push   eax
c001a6b5:	e8 e6 5f fe ff       	call   c00006a0 <memcpy>
c001a6ba:	89 d8                	mov    eax,ebx
c001a6bc:	83 c4 14             	add    esp,0x14
c001a6bf:	5b                   	pop    ebx
c001a6c0:	5e                   	pop    esi
c001a6c1:	c3                   	ret    

c001a6c2 <Krnl::loadSystemEnv()>:
c001a6c2:	53                   	push   ebx
c001a6c3:	83 ec 14             	sub    esp,0x14
c001a6c6:	6a 0c                	push   0xc
c001a6c8:	e8 8f 58 ff ff       	call   c000ff5c <malloc>
c001a6cd:	89 c3                	mov    ebx,eax
c001a6cf:	58                   	pop    eax
c001a6d0:	5a                   	pop    edx
c001a6d1:	ff 35 48 48 03 c0    	push   DWORD PTR ds:0xc0034848
c001a6d7:	53                   	push   ebx
c001a6d8:	e8 69 fe ff ff       	call   c001a546 <EnvVarContainer::EnvVarContainer(Process*)>
c001a6dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a6e0:	89 1d 80 3e 03 c0    	mov    DWORD PTR ds:0xc0033e80,ebx
c001a6e6:	e8 3f fe ff ff       	call   c001a52a <EnvVarContainer::__loadSystem()>
c001a6eb:	83 c4 18             	add    esp,0x18
c001a6ee:	5b                   	pop    ebx
c001a6ef:	c3                   	ret    

c001a6f0 <Krnl::loadUserEnv()>:
c001a6f0:	53                   	push   ebx
c001a6f1:	83 ec 14             	sub    esp,0x14
c001a6f4:	6a 0c                	push   0xc
c001a6f6:	e8 61 58 ff ff       	call   c000ff5c <malloc>
c001a6fb:	89 c3                	mov    ebx,eax
c001a6fd:	58                   	pop    eax
c001a6fe:	5a                   	pop    edx
c001a6ff:	ff 35 48 48 03 c0    	push   DWORD PTR ds:0xc0034848
c001a705:	53                   	push   ebx
c001a706:	e8 3b fe ff ff       	call   c001a546 <EnvVarContainer::EnvVarContainer(Process*)>
c001a70b:	89 1d 84 3e 03 c0    	mov    DWORD PTR ds:0xc0033e84,ebx
c001a711:	83 c4 18             	add    esp,0x18
c001a714:	5b                   	pop    ebx
c001a715:	c3                   	ret    

c001a716 <Krnl::flushEnv()>:
c001a716:	c3                   	ret    

c001a717 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a717:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a71b:	8b 15 84 3e 03 c0    	mov    edx,DWORD PTR ds:0xc0033e84
c001a721:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a727:	a1 80 3e 03 c0       	mov    eax,ds:0xc0033e80
c001a72c:	8b 00                	mov    eax,DWORD PTR [eax]
c001a72e:	03 01                	add    eax,DWORD PTR [ecx]
c001a730:	85 d2                	test   edx,edx
c001a732:	74 02                	je     c001a736 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a734:	03 02                	add    eax,DWORD PTR [edx]
c001a736:	c3                   	ret    

c001a737 <Krnl::getProcessEnvPair(Process*, int)>:
c001a737:	57                   	push   edi
c001a738:	8b 0d 84 3e 03 c0    	mov    ecx,DWORD PTR ds:0xc0033e84
c001a73e:	56                   	push   esi
c001a73f:	85 c9                	test   ecx,ecx
c001a741:	53                   	push   ebx
c001a742:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a746:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a74a:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a750:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a754:	8b 02                	mov    eax,DWORD PTR [edx]
c001a756:	75 47                	jne    c001a79f <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a758:	39 c3                	cmp    ebx,eax
c001a75a:	7c 47                	jl     c001a7a3 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a75c:	8b 15 80 3e 03 c0    	mov    edx,DWORD PTR ds:0xc0033e80
c001a762:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a764:	01 c1                	add    ecx,eax
c001a766:	39 d9                	cmp    ecx,ebx
c001a768:	7e 6c                	jle    c001a7d6 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a76a:	51                   	push   ecx
c001a76b:	89 d9                	mov    ecx,ebx
c001a76d:	29 c1                	sub    ecx,eax
c001a76f:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a772:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a776:	53                   	push   ebx
c001a777:	68 83 d2 02 c0       	push   0xc002d283
c001a77c:	e8 c5 8a ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001a781:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a787:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a789:	a1 80 3e 03 c0       	mov    eax,ds:0xc0033e80
c001a78e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a791:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a795:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a798:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a79b:	89 06                	mov    DWORD PTR [esi],eax
c001a79d:	eb 51                	jmp    c001a7f0 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a79f:	39 c3                	cmp    ebx,eax
c001a7a1:	7d 05                	jge    c001a7a8 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a7a3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a7a6:	eb 20                	jmp    c001a7c8 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a7a8:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a7aa:	8d 14 07             	lea    edx,[edi+eax*1]
c001a7ad:	39 da                	cmp    edx,ebx
c001a7af:	7e 04                	jle    c001a7b5 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a7b1:	29 c3                	sub    ebx,eax
c001a7b3:	eb 10                	jmp    c001a7c5 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a7b5:	8b 0d 80 3e 03 c0    	mov    ecx,DWORD PTR ds:0xc0033e80
c001a7bb:	03 11                	add    edx,DWORD PTR [ecx]
c001a7bd:	39 da                	cmp    edx,ebx
c001a7bf:	7e 15                	jle    c001a7d6 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a7c1:	29 c3                	sub    ebx,eax
c001a7c3:	29 fb                	sub    ebx,edi
c001a7c5:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a7c8:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a7cc:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a7cf:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a7d2:	89 06                	mov    DWORD PTR [esi],eax
c001a7d4:	eb 1d                	jmp    c001a7f3 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a7d6:	83 ec 0c             	sub    esp,0xc
c001a7d9:	68 97 d2 02 c0       	push   0xc002d297
c001a7de:	e8 18 00 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c001a7e3:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a7e9:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a7f0:	83 c4 10             	add    esp,0x10
c001a7f3:	89 f0                	mov    eax,esi
c001a7f5:	5b                   	pop    ebx
c001a7f6:	5e                   	pop    esi
c001a7f7:	5f                   	pop    edi
c001a7f8:	c2 04 00             	ret    0x4

c001a7fb <Krnl::panic(char const*)>:
c001a7fb:	55                   	push   ebp
c001a7fc:	89 e5                	mov    ebp,esp
c001a7fe:	53                   	push   ebx
c001a7ff:	83 ec 0c             	sub    esp,0xc
c001a802:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a805:	fa                   	cli    
c001a806:	c6 05 88 3e 03 c0 01 	mov    BYTE PTR ds:0xc0033e88,0x1
c001a80d:	53                   	push   ebx
c001a80e:	c6 05 40 03 03 c0 00 	mov    BYTE PTR ds:0xc0030340,0x0
c001a815:	68 54 d3 02 c0       	push   0xc002d354
c001a81a:	e8 27 8a ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001a81f:	58                   	pop    eax
c001a820:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001a825:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a82b:	e8 13 64 ff ff       	call   c0010c43 <setActiveTerminal(VgaText*)>
c001a830:	83 c4 0c             	add    esp,0xc
c001a833:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001a838:	6a 01                	push   0x1
c001a83a:	6a 0f                	push   0xf
c001a83c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a842:	e8 d9 6b ff ff       	call   c0011420 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a847:	58                   	pop    eax
c001a848:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001a84d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a853:	e8 38 6b ff ff       	call   c0011390 <VgaText::clearScreen()>
c001a858:	58                   	pop    eax
c001a859:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001a85e:	5a                   	pop    edx
c001a85f:	68 6d d3 02 c0       	push   0xc002d36d
c001a864:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a86a:	e8 fb 6a ff ff       	call   c001136a <VgaText::puts(char const*)>
c001a86f:	59                   	pop    ecx
c001a870:	58                   	pop    eax
c001a871:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001a876:	68 14 d4 02 c0       	push   0xc002d414
c001a87b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a881:	e8 e4 6a ff ff       	call   c001136a <VgaText::puts(char const*)>
c001a886:	58                   	pop    eax
c001a887:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001a88c:	5a                   	pop    edx
c001a88d:	68 89 d3 02 c0       	push   0xc002d389
c001a892:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a898:	e8 cd 6a ff ff       	call   c001136a <VgaText::puts(char const*)>
c001a89d:	59                   	pop    ecx
c001a89e:	58                   	pop    eax
c001a89f:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001a8a4:	53                   	push   ebx
c001a8a5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8ab:	e8 ba 6a ff ff       	call   c001136a <VgaText::puts(char const*)>
c001a8b0:	58                   	pop    eax
c001a8b1:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001a8b6:	5a                   	pop    edx
c001a8b7:	68 a9 d3 02 c0       	push   0xc002d3a9
c001a8bc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8c2:	e8 a3 6a ff ff       	call   c001136a <VgaText::puts(char const*)>
c001a8c7:	a1 8c 3e 03 c0       	mov    eax,ds:0xc0033e8c
c001a8cc:	83 c4 10             	add    esp,0x10
c001a8cf:	85 c0                	test   eax,eax
c001a8d1:	74 02                	je     c001a8d5 <Krnl::panic(char const*)+0xda>
c001a8d3:	ff d0                	call   eax
c001a8d5:	83 ec 0c             	sub    esp,0xc
c001a8d8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a8db:	e8 a8 2e 00 00       	call   c001d788 <Thr::getDriverNameFromAddress(unsigned long)>
c001a8e0:	83 c4 10             	add    esp,0x10
c001a8e3:	89 c3                	mov    ebx,eax
c001a8e5:	85 c0                	test   eax,eax
c001a8e7:	0f 84 50 02 00 00    	je     c001ab3d <Krnl::panic(char const*)+0x342>
c001a8ed:	83 ec 08             	sub    esp,0x8
c001a8f0:	8b 15 48 48 03 c0    	mov    edx,DWORD PTR ds:0xc0034848
c001a8f6:	68 50 d4 02 c0       	push   0xc002d450
c001a8fb:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a901:	e8 64 6a ff ff       	call   c001136a <VgaText::puts(char const*)>
c001a906:	58                   	pop    eax
c001a907:	5a                   	pop    edx
c001a908:	8b 15 48 48 03 c0    	mov    edx,DWORD PTR ds:0xc0034848
c001a90e:	68 89 d3 02 c0       	push   0xc002d389
c001a913:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a919:	e8 4c 6a ff ff       	call   c001136a <VgaText::puts(char const*)>
c001a91e:	59                   	pop    ecx
c001a91f:	58                   	pop    eax
c001a920:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001a925:	53                   	push   ebx
c001a926:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a92c:	e8 39 6a ff ff       	call   c001136a <VgaText::puts(char const*)>
c001a931:	83 c4 10             	add    esp,0x10
c001a934:	83 ec 08             	sub    esp,0x8
c001a937:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001a93c:	68 a8 d3 02 c0       	push   0xc002d3a8
c001a941:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a947:	e8 1e 6a ff ff       	call   c001136a <VgaText::puts(char const*)>
c001a94c:	58                   	pop    eax
c001a94d:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001a952:	5a                   	pop    edx
c001a953:	68 a8 d4 02 c0       	push   0xc002d4a8
c001a958:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a95e:	e8 07 6a ff ff       	call   c001136a <VgaText::puts(char const*)>
c001a963:	59                   	pop    ecx
c001a964:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001a969:	5b                   	pop    ebx
c001a96a:	68 e8 d4 02 c0       	push   0xc002d4e8
c001a96f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a975:	e8 f0 69 ff ff       	call   c001136a <VgaText::puts(char const*)>
c001a97a:	58                   	pop    eax
c001a97b:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001a980:	5a                   	pop    edx
c001a981:	68 94 d3 02 c0       	push   0xc002d394
c001a986:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a98c:	e8 d9 69 ff ff       	call   c001136a <VgaText::puts(char const*)>
c001a991:	59                   	pop    ecx
c001a992:	5b                   	pop    ebx
c001a993:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a996:	68 ac d3 02 c0       	push   0xc002d3ac
c001a99b:	e8 a6 88 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001a9a0:	58                   	pop    eax
c001a9a1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a9a4:	5a                   	pop    edx
c001a9a5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a9a8:	68 b5 d3 02 c0       	push   0xc002d3b5
c001a9ad:	e8 94 88 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001a9b2:	59                   	pop    ecx
c001a9b3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a9b6:	5b                   	pop    ebx
c001a9b7:	8b 00                	mov    eax,DWORD PTR [eax]
c001a9b9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a9bc:	68 be d3 02 c0       	push   0xc002d3be
c001a9c1:	e8 80 88 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001a9c6:	58                   	pop    eax
c001a9c7:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001a9cc:	5a                   	pop    edx
c001a9cd:	68 2c d5 02 c0       	push   0xc002d52c
c001a9d2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9d8:	e8 8d 69 ff ff       	call   c001136a <VgaText::puts(char const*)>
c001a9dd:	59                   	pop    ecx
c001a9de:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001a9e3:	5b                   	pop    ebx
c001a9e4:	68 c7 d3 02 c0       	push   0xc002d3c7
c001a9e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9ef:	e8 76 69 ff ff       	call   c001136a <VgaText::puts(char const*)>
c001a9f4:	0f 20 c0             	mov    eax,cr0
c001a9f7:	5a                   	pop    edx
c001a9f8:	59                   	pop    ecx
c001a9f9:	50                   	push   eax
c001a9fa:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001a9ff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa05:	e8 e2 6b ff ff       	call   c00115ec <VgaText::putx(unsigned int)>
c001aa0a:	5b                   	pop    ebx
c001aa0b:	58                   	pop    eax
c001aa0c:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001aa11:	68 d1 d3 02 c0       	push   0xc002d3d1
c001aa16:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa1c:	e8 49 69 ff ff       	call   c001136a <VgaText::puts(char const*)>
c001aa21:	0f 20 d0             	mov    eax,cr2
c001aa24:	5a                   	pop    edx
c001aa25:	59                   	pop    ecx
c001aa26:	50                   	push   eax
c001aa27:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001aa2c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa32:	e8 b5 6b ff ff       	call   c00115ec <VgaText::putx(unsigned int)>
c001aa37:	5b                   	pop    ebx
c001aa38:	58                   	pop    eax
c001aa39:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001aa3e:	68 db d3 02 c0       	push   0xc002d3db
c001aa43:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa49:	e8 1c 69 ff ff       	call   c001136a <VgaText::puts(char const*)>
c001aa4e:	0f 20 d8             	mov    eax,cr3
c001aa51:	5a                   	pop    edx
c001aa52:	59                   	pop    ecx
c001aa53:	50                   	push   eax
c001aa54:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001aa59:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa5f:	e8 88 6b ff ff       	call   c00115ec <VgaText::putx(unsigned int)>
c001aa64:	5b                   	pop    ebx
c001aa65:	58                   	pop    eax
c001aa66:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001aa6b:	68 ee d3 02 c0       	push   0xc002d3ee
c001aa70:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa76:	e8 ef 68 ff ff       	call   c001136a <VgaText::puts(char const*)>
c001aa7b:	0f 20 e0             	mov    eax,cr4
c001aa7e:	5a                   	pop    edx
c001aa7f:	59                   	pop    ecx
c001aa80:	50                   	push   eax
c001aa81:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001aa86:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa8c:	e8 5b 6b ff ff       	call   c00115ec <VgaText::putx(unsigned int)>
c001aa91:	5b                   	pop    ebx
c001aa92:	58                   	pop    eax
c001aa93:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001aa98:	68 f8 d3 02 c0       	push   0xc002d3f8
c001aa9d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aaa3:	e8 c2 68 ff ff       	call   c001136a <VgaText::puts(char const*)>
c001aaa8:	5a                   	pop    edx
c001aaa9:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001aaae:	59                   	pop    ecx
c001aaaf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001aab5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001aab8:	50                   	push   eax
c001aab9:	e8 2e 6b ff ff       	call   c00115ec <VgaText::putx(unsigned int)>
c001aabe:	5b                   	pop    ebx
c001aabf:	58                   	pop    eax
c001aac0:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001aac5:	68 0f d4 02 c0       	push   0xc002d40f
c001aaca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aad0:	e8 95 68 ff ff       	call   c001136a <VgaText::puts(char const*)>
c001aad5:	5a                   	pop    edx
c001aad6:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001aadb:	59                   	pop    ecx
c001aadc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001aae2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001aae5:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001aae8:	50                   	push   eax
c001aae9:	e8 fe 6a ff ff       	call   c00115ec <VgaText::putx(unsigned int)>
c001aaee:	5b                   	pop    ebx
c001aaef:	58                   	pop    eax
c001aaf0:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001aaf5:	68 0f d4 02 c0       	push   0xc002d40f
c001aafa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab00:	e8 65 68 ff ff       	call   c001136a <VgaText::puts(char const*)>
c001ab05:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001ab0a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ab0d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ab13:	8b 12                	mov    edx,DWORD PTR [edx]
c001ab15:	59                   	pop    ecx
c001ab16:	5b                   	pop    ebx
c001ab17:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001ab1a:	50                   	push   eax
c001ab1b:	e8 cc 6a ff ff       	call   c00115ec <VgaText::putx(unsigned int)>
c001ab20:	83 c4 10             	add    esp,0x10
c001ab23:	b2 fe                	mov    dl,0xfe
c001ab25:	e4 60                	in     al,0x60
c001ab27:	3c 1c                	cmp    al,0x1c
c001ab29:	74 04                	je     c001ab2f <Krnl::panic(char const*)+0x334>
c001ab2b:	3c 5a                	cmp    al,0x5a
c001ab2d:	75 f6                	jne    c001ab25 <Krnl::panic(char const*)+0x32a>
c001ab2f:	e4 64                	in     al,0x64
c001ab31:	a8 02                	test   al,0x2
c001ab33:	75 fa                	jne    c001ab2f <Krnl::panic(char const*)+0x334>
c001ab35:	88 d0                	mov    al,dl
c001ab37:	e6 64                	out    0x64,al
c001ab39:	fa                   	cli    
c001ab3a:	f4                   	hlt    
c001ab3b:	eb e8                	jmp    c001ab25 <Krnl::panic(char const*)+0x32a>
c001ab3d:	50                   	push   eax
c001ab3e:	50                   	push   eax
c001ab3f:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001ab44:	68 7c d4 02 c0       	push   0xc002d47c
c001ab49:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab4f:	e8 16 68 ff ff       	call   c001136a <VgaText::puts(char const*)>
c001ab54:	58                   	pop    eax
c001ab55:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001ab5a:	5a                   	pop    edx
c001ab5b:	68 89 d3 02 c0       	push   0xc002d389
c001ab60:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab66:	e8 ff 67 ff ff       	call   c001136a <VgaText::puts(char const*)>
c001ab6b:	59                   	pop    ecx
c001ab6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ab71:	5b                   	pop    ebx
c001ab72:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ab75:	83 c0 0c             	add    eax,0xc
c001ab78:	50                   	push   eax
c001ab79:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001ab7e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab84:	e8 e1 67 ff ff       	call   c001136a <VgaText::puts(char const*)>
c001ab89:	83 c4 10             	add    esp,0x10
c001ab8c:	e9 a3 fd ff ff       	jmp    c001a934 <Krnl::panic(char const*)+0x139>

c001ab91 <Net::switchEndian16(unsigned short)>:
c001ab91:	83 ec 04             	sub    esp,0x4
c001ab94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ab98:	66 89 04 24          	mov    WORD PTR [esp],ax
c001ab9c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001aba0:	c1 f8 08             	sar    eax,0x8
c001aba3:	89 c2                	mov    edx,eax
c001aba5:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001aba9:	c1 e0 08             	shl    eax,0x8
c001abac:	09 d0                	or     eax,edx
c001abae:	83 c4 04             	add    esp,0x4
c001abb1:	c3                   	ret    

c001abb2 <Net::switchEndian32(unsigned int)>:
c001abb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abb6:	c1 e8 18             	shr    eax,0x18
c001abb9:	89 c2                	mov    edx,eax
c001abbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abbf:	c1 e0 08             	shl    eax,0x8
c001abc2:	25 00 00 ff 00       	and    eax,0xff0000
c001abc7:	09 c2                	or     edx,eax
c001abc9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abcd:	c1 e8 08             	shr    eax,0x8
c001abd0:	25 00 ff 00 00       	and    eax,0xff00
c001abd5:	09 c2                	or     edx,eax
c001abd7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abdb:	c1 e0 18             	shl    eax,0x18
c001abde:	09 d0                	or     eax,edx
c001abe0:	c3                   	ret    

c001abe1 <Net::crc32Calc(unsigned char*, int)>:
c001abe1:	83 ec 10             	sub    esp,0x10
c001abe4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001abe9:	75 07                	jne    c001abf2 <Net::crc32Calc(unsigned char*, int)+0x11>
c001abeb:	b8 00 00 00 00       	mov    eax,0x0
c001abf0:	eb 7c                	jmp    c001ac6e <Net::crc32Calc(unsigned char*, int)+0x8d>
c001abf2:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001abf7:	7f 07                	jg     c001ac00 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001abf9:	b8 00 00 00 00       	mov    eax,0x0
c001abfe:	eb 6e                	jmp    c001ac6e <Net::crc32Calc(unsigned char*, int)+0x8d>
c001ac00:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001ac08:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ac10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac14:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001ac18:	7d 4e                	jge    c001ac68 <Net::crc32Calc(unsigned char*, int)+0x87>
c001ac1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ac22:	01 d0                	add    eax,edx
c001ac24:	8a 00                	mov    al,BYTE PTR [eax]
c001ac26:	0f b6 c0             	movzx  eax,al
c001ac29:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001ac2d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ac35:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001ac3a:	7f 26                	jg     c001ac62 <Net::crc32Calc(unsigned char*, int)+0x81>
c001ac3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac40:	83 e0 01             	and    eax,0x1
c001ac43:	74 0d                	je     c001ac52 <Net::crc32Calc(unsigned char*, int)+0x71>
c001ac45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac49:	d1 e8                	shr    eax,1
c001ac4b:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001ac50:	eb 06                	jmp    c001ac58 <Net::crc32Calc(unsigned char*, int)+0x77>
c001ac52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac56:	d1 e8                	shr    eax,1
c001ac58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ac5c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ac60:	eb d3                	jmp    c001ac35 <Net::crc32Calc(unsigned char*, int)+0x54>
c001ac62:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001ac66:	eb a8                	jmp    c001ac10 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001ac68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac6c:	f7 d0                	not    eax
c001ac6e:	83 c4 10             	add    esp,0x10
c001ac71:	c3                   	ret    

c001ac72 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001ac72:	83 ec 1c             	sub    esp,0x1c
c001ac75:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac79:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ac7d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ac85:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001ac8a:	7f 14                	jg     c001aca0 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001ac8c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac90:	8d 50 01             	lea    edx,[eax+0x1]
c001ac93:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ac97:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001ac9a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ac9e:	eb e5                	jmp    c001ac85 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001aca0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aca4:	8d 50 01             	lea    edx,[eax+0x1]
c001aca7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001acab:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001acae:	83 ec 04             	sub    esp,0x4
c001acb1:	6a 06                	push   0x6
c001acb3:	8d 44 24 36          	lea    eax,[esp+0x36]
c001acb7:	50                   	push   eax
c001acb8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001acbc:	e8 df 59 fe ff       	call   c00006a0 <memcpy>
c001acc1:	83 c4 10             	add    esp,0x10
c001acc4:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001acc9:	83 ec 04             	sub    esp,0x4
c001accc:	6a 06                	push   0x6
c001acce:	8d 44 24 30          	lea    eax,[esp+0x30]
c001acd2:	50                   	push   eax
c001acd3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001acd7:	e8 c4 59 fe ff       	call   c00006a0 <memcpy>
c001acdc:	83 c4 10             	add    esp,0x10
c001acdf:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001ace4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ace8:	0f b7 c0             	movzx  eax,ax
c001aceb:	c1 f8 08             	sar    eax,0x8
c001acee:	89 c1                	mov    ecx,eax
c001acf0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001acf4:	8d 50 01             	lea    edx,[eax+0x1]
c001acf7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001acfb:	88 ca                	mov    dl,cl
c001acfd:	88 10                	mov    BYTE PTR [eax],dl
c001acff:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ad03:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad07:	8d 48 01             	lea    ecx,[eax+0x1]
c001ad0a:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ad0e:	88 10                	mov    BYTE PTR [eax],dl
c001ad10:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ad14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad18:	83 ec 04             	sub    esp,0x4
c001ad1b:	52                   	push   edx
c001ad1c:	50                   	push   eax
c001ad1d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ad21:	e8 7a 59 fe ff       	call   c00006a0 <memcpy>
c001ad26:	83 c4 10             	add    esp,0x10
c001ad29:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ad2d:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001ad31:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad35:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001ad39:	83 ec 08             	sub    esp,0x8
c001ad3c:	50                   	push   eax
c001ad3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ad41:	e8 9b fe ff ff       	call   c001abe1 <Net::crc32Calc(unsigned char*, int)>
c001ad46:	83 c4 10             	add    esp,0x10
c001ad49:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ad4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad51:	c1 e8 18             	shr    eax,0x18
c001ad54:	89 c1                	mov    ecx,eax
c001ad56:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad5a:	8d 50 01             	lea    edx,[eax+0x1]
c001ad5d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ad61:	88 ca                	mov    dl,cl
c001ad63:	88 10                	mov    BYTE PTR [eax],dl
c001ad65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad69:	c1 e8 10             	shr    eax,0x10
c001ad6c:	89 c1                	mov    ecx,eax
c001ad6e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad72:	8d 50 01             	lea    edx,[eax+0x1]
c001ad75:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ad79:	88 ca                	mov    dl,cl
c001ad7b:	88 10                	mov    BYTE PTR [eax],dl
c001ad7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad81:	c1 e8 08             	shr    eax,0x8
c001ad84:	89 c1                	mov    ecx,eax
c001ad86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad8a:	8d 50 01             	lea    edx,[eax+0x1]
c001ad8d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ad91:	88 ca                	mov    dl,cl
c001ad93:	88 10                	mov    BYTE PTR [eax],dl
c001ad95:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad99:	8d 50 01             	lea    edx,[eax+0x1]
c001ad9c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ada0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ada4:	88 10                	mov    BYTE PTR [eax],dl
c001ada6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001adaa:	83 c4 1c             	add    esp,0x1c
c001adad:	c3                   	ret    

c001adae <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001adae:	83 ec 2c             	sub    esp,0x2c
c001adb1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001adb5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001adb9:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001adbe:	83 ec 04             	sub    esp,0x4
c001adc1:	6a 06                	push   0x6
c001adc3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001adc7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001adcb:	83 c0 0e             	add    eax,0xe
c001adce:	50                   	push   eax
c001adcf:	e8 cc 58 fe ff       	call   c00006a0 <memcpy>
c001add4:	83 c4 10             	add    esp,0x10
c001add7:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001addc:	83 ec 04             	sub    esp,0x4
c001addf:	6a 06                	push   0x6
c001ade1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ade5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ade9:	83 c0 08             	add    eax,0x8
c001adec:	50                   	push   eax
c001aded:	e8 ae 58 fe ff       	call   c00006a0 <memcpy>
c001adf2:	83 c4 10             	add    esp,0x10
c001adf5:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001adfa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001adfe:	8d 50 01             	lea    edx,[eax+0x1]
c001ae01:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ae05:	8a 00                	mov    al,BYTE PTR [eax]
c001ae07:	0f b6 c0             	movzx  eax,al
c001ae0a:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001ae0f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ae13:	8d 50 01             	lea    edx,[eax+0x1]
c001ae16:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ae1a:	8a 00                	mov    al,BYTE PTR [eax]
c001ae1c:	0f b6 c0             	movzx  eax,al
c001ae1f:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001ae24:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001ae29:	c1 e0 08             	shl    eax,0x8
c001ae2c:	89 c2                	mov    edx,eax
c001ae2e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ae32:	09 d0                	or     eax,edx
c001ae34:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ae38:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001ae3c:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001ae41:	75 3a                	jne    c001ae7d <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ae43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ae47:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ae4a:	66 3d dc 05          	cmp    ax,0x5dc
c001ae4e:	77 10                	ja     c001ae60 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001ae50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ae54:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ae57:	0f b7 c0             	movzx  eax,ax
c001ae5a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ae5e:	eb 1d                	jmp    c001ae7d <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ae60:	83 ec 0c             	sub    esp,0xc
c001ae63:	68 f4 d5 02 c0       	push   0xc002d5f4
c001ae68:	e8 d9 83 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001ae6d:	83 c4 10             	add    esp,0x10
c001ae70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ae74:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ae78:	e9 c0 00 00 00       	jmp    c001af3d <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001ae7d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ae81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ae85:	8b 00                	mov    eax,DWORD PTR [eax]
c001ae87:	83 ec 04             	sub    esp,0x4
c001ae8a:	52                   	push   edx
c001ae8b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ae8f:	50                   	push   eax
c001ae90:	e8 0b 58 fe ff       	call   c00006a0 <memcpy>
c001ae95:	83 c4 10             	add    esp,0x10
c001ae98:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ae9c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001aea0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aea4:	8d 50 01             	lea    edx,[eax+0x1]
c001aea7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aeab:	8a 00                	mov    al,BYTE PTR [eax]
c001aead:	0f b6 c0             	movzx  eax,al
c001aeb0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aeb4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aeb8:	8d 50 01             	lea    edx,[eax+0x1]
c001aebb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aebf:	8a 00                	mov    al,BYTE PTR [eax]
c001aec1:	0f b6 c0             	movzx  eax,al
c001aec4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001aec8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aecc:	8d 50 01             	lea    edx,[eax+0x1]
c001aecf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aed3:	8a 00                	mov    al,BYTE PTR [eax]
c001aed5:	0f b6 c0             	movzx  eax,al
c001aed8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aedc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aee0:	8d 50 01             	lea    edx,[eax+0x1]
c001aee3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aee7:	8a 00                	mov    al,BYTE PTR [eax]
c001aee9:	0f b6 c0             	movzx  eax,al
c001aeec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aef0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aef4:	c1 e0 18             	shl    eax,0x18
c001aef7:	89 c2                	mov    edx,eax
c001aef9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aefd:	c1 e0 10             	shl    eax,0x10
c001af00:	09 c2                	or     edx,eax
c001af02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af06:	c1 e0 08             	shl    eax,0x8
c001af09:	09 d0                	or     eax,edx
c001af0b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001af0f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001af13:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001af17:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001af1b:	83 e8 04             	sub    eax,0x4
c001af1e:	83 ec 08             	sub    esp,0x8
c001af21:	50                   	push   eax
c001af22:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001af26:	e8 b6 fc ff ff       	call   c001abe1 <Net::crc32Calc(unsigned char*, int)>
c001af2b:	83 c4 10             	add    esp,0x10
c001af2e:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001af32:	0f 94 c2             	sete   dl
c001af35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001af39:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001af3c:	90                   	nop
c001af3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001af41:	83 c4 2c             	add    esp,0x2c
c001af44:	c2 04 00             	ret    0x4

c001af47 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001af47:	55                   	push   ebp
c001af48:	57                   	push   edi
c001af49:	56                   	push   esi
c001af4a:	53                   	push   ebx
c001af4b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001af51:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001af58:	8a 1e                	mov    bl,BYTE PTR [esi]
c001af5a:	8d 6e 01             	lea    ebp,[esi+0x1]
c001af5d:	80 fb 40             	cmp    bl,0x40
c001af60:	75 1b                	jne    c001af7d <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001af62:	8a 16                	mov    dl,BYTE PTR [esi]
c001af64:	84 d2                	test   dl,dl
c001af66:	0f 84 f1 00 00 00    	je     c001b05d <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001af6c:	8d 46 01             	lea    eax,[esi+0x1]
c001af6f:	80 fa 3a             	cmp    dl,0x3a
c001af72:	74 04                	je     c001af78 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001af74:	89 c6                	mov    esi,eax
c001af76:	eb ea                	jmp    c001af62 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001af78:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001af7b:	89 c6                	mov    esi,eax
c001af7d:	50                   	push   eax
c001af7e:	6a 40                	push   0x40
c001af80:	6a 00                	push   0x0
c001af82:	8d 44 24 24          	lea    eax,[esp+0x24]
c001af86:	50                   	push   eax
c001af87:	e8 38 57 fe ff       	call   c00006c4 <memset>
c001af8c:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001af93:	31 c0                	xor    eax,eax
c001af95:	83 c4 10             	add    esp,0x10
c001af98:	8a 0f                	mov    cl,BYTE PTR [edi]
c001af9a:	84 c9                	test   cl,cl
c001af9c:	0f 84 bb 00 00 00    	je     c001b05d <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001afa2:	3d c7 00 00 00       	cmp    eax,0xc7
c001afa7:	0f 8f b0 00 00 00    	jg     c001b05d <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001afad:	80 f9 0a             	cmp    cl,0xa
c001afb0:	0f 85 98 00 00 00    	jne    c001b04e <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001afb6:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001afbb:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001afbf:	a8 df                	test   al,0xdf
c001afc1:	0f 94 c1             	sete   cl
c001afc4:	3c 23                	cmp    al,0x23
c001afc6:	0f 94 c2             	sete   dl
c001afc9:	08 d1                	or     cl,dl
c001afcb:	75 4a                	jne    c001b017 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001afcd:	8d 50 f7             	lea    edx,[eax-0x9]
c001afd0:	80 fa 01             	cmp    dl,0x1
c001afd3:	76 42                	jbe    c001b017 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001afd5:	3c 5b                	cmp    al,0x5b
c001afd7:	75 42                	jne    c001b01b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001afd9:	80 fb 40             	cmp    bl,0x40
c001afdc:	75 39                	jne    c001b017 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001afde:	83 ec 0c             	sub    esp,0xc
c001afe1:	8d 54 24 65          	lea    edx,[esp+0x65]
c001afe5:	52                   	push   edx
c001afe6:	e8 f6 56 fe ff       	call   c00006e1 <strlen>
c001afeb:	83 c4 10             	add    esp,0x10
c001afee:	83 f8 3f             	cmp    eax,0x3f
c001aff1:	77 6a                	ja     c001b05d <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001aff3:	50                   	push   eax
c001aff4:	50                   	push   eax
c001aff5:	8d 54 24 61          	lea    edx,[esp+0x61]
c001aff9:	52                   	push   edx
c001affa:	8d 54 24 24          	lea    edx,[esp+0x24]
c001affe:	52                   	push   edx
c001afff:	e8 5f 57 fe ff       	call   c0000763 <strcpy>
c001b004:	58                   	pop    eax
c001b005:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b009:	52                   	push   edx
c001b00a:	e8 d2 56 fe ff       	call   c00006e1 <strlen>
c001b00f:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001b014:	83 c4 10             	add    esp,0x10
c001b017:	31 d2                	xor    edx,edx
c001b019:	eb 3a                	jmp    c001b055 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001b01b:	80 fb 40             	cmp    bl,0x40
c001b01e:	74 06                	je     c001b026 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001b020:	8d 44 24 58          	lea    eax,[esp+0x58]
c001b024:	eb 20                	jmp    c001b046 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001b026:	50                   	push   eax
c001b027:	50                   	push   eax
c001b028:	55                   	push   ebp
c001b029:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b02d:	50                   	push   eax
c001b02e:	e8 81 57 fe ff       	call   c00007b4 <strcmp>
c001b033:	83 c4 10             	add    esp,0x10
c001b036:	85 c0                	test   eax,eax
c001b038:	75 dd                	jne    c001b017 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b03a:	eb e4                	jmp    c001b020 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001b03c:	8d 50 01             	lea    edx,[eax+0x1]
c001b03f:	80 f9 3d             	cmp    cl,0x3d
c001b042:	74 1d                	je     c001b061 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001b044:	89 d0                	mov    eax,edx
c001b046:	8a 08                	mov    cl,BYTE PTR [eax]
c001b048:	84 c9                	test   cl,cl
c001b04a:	75 f0                	jne    c001b03c <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001b04c:	eb 0f                	jmp    c001b05d <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b04e:	8d 50 01             	lea    edx,[eax+0x1]
c001b051:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001b055:	47                   	inc    edi
c001b056:	89 d0                	mov    eax,edx
c001b058:	e9 3b ff ff ff       	jmp    c001af98 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001b05d:	31 c0                	xor    eax,eax
c001b05f:	eb 33                	jmp    c001b094 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001b061:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b065:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001b068:	50                   	push   eax
c001b069:	50                   	push   eax
c001b06a:	8d 44 24 60          	lea    eax,[esp+0x60]
c001b06e:	50                   	push   eax
c001b06f:	56                   	push   esi
c001b070:	e8 3f 57 fe ff       	call   c00007b4 <strcmp>
c001b075:	83 c4 10             	add    esp,0x10
c001b078:	85 c0                	test   eax,eax
c001b07a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b07e:	75 97                	jne    c001b017 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b080:	51                   	push   ecx
c001b081:	51                   	push   ecx
c001b082:	52                   	push   edx
c001b083:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001b08a:	e8 d4 56 fe ff       	call   c0000763 <strcpy>
c001b08f:	83 c4 10             	add    esp,0x10
c001b092:	b0 01                	mov    al,0x1
c001b094:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b09a:	5b                   	pop    ebx
c001b09b:	5e                   	pop    esi
c001b09c:	5f                   	pop    edi
c001b09d:	5d                   	pop    ebp
c001b09e:	c3                   	ret    

c001b09f <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001b09f:	57                   	push   edi
c001b0a0:	56                   	push   esi
c001b0a1:	53                   	push   ebx
c001b0a2:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b0a8:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001b0af:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001b0b6:	53                   	push   ebx
c001b0b7:	e8 25 56 fe ff       	call   c00006e1 <strlen>
c001b0bc:	89 34 24             	mov    DWORD PTR [esp],esi
c001b0bf:	89 c7                	mov    edi,eax
c001b0c1:	e8 1b 56 fe ff       	call   c00006e1 <strlen>
c001b0c6:	83 c4 10             	add    esp,0x10
c001b0c9:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001b0cd:	3d ff 00 00 00       	cmp    eax,0xff
c001b0d2:	0f 87 d3 00 00 00    	ja     c001b1ab <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b0d8:	57                   	push   edi
c001b0d9:	57                   	push   edi
c001b0da:	56                   	push   esi
c001b0db:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001b0df:	56                   	push   esi
c001b0e0:	e8 7e 56 fe ff       	call   c0000763 <strcpy>
c001b0e5:	58                   	pop    eax
c001b0e6:	5a                   	pop    edx
c001b0e7:	68 39 e4 02 c0       	push   0xc002e439
c001b0ec:	56                   	push   esi
c001b0ed:	e8 28 57 fe ff       	call   c000081a <strcat>
c001b0f2:	59                   	pop    ecx
c001b0f3:	5f                   	pop    edi
c001b0f4:	53                   	push   ebx
c001b0f5:	56                   	push   esi
c001b0f6:	e8 1f 57 fe ff       	call   c000081a <strcat>
c001b0fb:	58                   	pop    eax
c001b0fc:	5a                   	pop    edx
c001b0fd:	68 e0 d6 02 c0       	push   0xc002d6e0
c001b102:	56                   	push   esi
c001b103:	e8 12 57 fe ff       	call   c000081a <strcat>
c001b108:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001b10f:	e8 48 4e ff ff       	call   c000ff5c <malloc>
c001b114:	83 c4 0c             	add    esp,0xc
c001b117:	89 c3                	mov    ebx,eax
c001b119:	ff 35 48 48 03 c0    	push   DWORD PTR ds:0xc0034848
c001b11f:	56                   	push   esi
c001b120:	50                   	push   eax
c001b121:	e8 cc 85 ff ff       	call   c00136f2 <File::File(char const*, Process*)>
c001b126:	83 c4 10             	add    esp,0x10
c001b129:	85 db                	test   ebx,ebx
c001b12b:	74 7e                	je     c001b1ab <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b12d:	51                   	push   ecx
c001b12e:	51                   	push   ecx
c001b12f:	6a 01                	push   0x1
c001b131:	53                   	push   ebx
c001b132:	e8 6d 86 ff ff       	call   c00137a4 <File::open(FileOpenMode)>
c001b137:	83 c4 10             	add    esp,0x10
c001b13a:	85 c0                	test   eax,eax
c001b13c:	74 08                	je     c001b146 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001b13e:	83 ec 0c             	sub    esp,0xc
c001b141:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b143:	53                   	push   ebx
c001b144:	eb 5f                	jmp    c001b1a5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001b146:	52                   	push   edx
c001b147:	8d 44 24 17          	lea    eax,[esp+0x17]
c001b14b:	50                   	push   eax
c001b14c:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b150:	50                   	push   eax
c001b151:	53                   	push   ebx
c001b152:	e8 a9 89 ff ff       	call   c0013b00 <File::stat(unsigned long long*, bool*)>
c001b157:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b15b:	83 c4 10             	add    esp,0x10
c001b15e:	89 c1                	mov    ecx,eax
c001b160:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001b164:	74 31                	je     c001b197 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b166:	83 ec 0c             	sub    esp,0xc
c001b169:	50                   	push   eax
c001b16a:	e8 ed 4d ff ff       	call   c000ff5c <malloc>
c001b16f:	89 c6                	mov    esi,eax
c001b171:	58                   	pop    eax
c001b172:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b174:	8d 54 24 20          	lea    edx,[esp+0x20]
c001b178:	52                   	push   edx
c001b179:	56                   	push   esi
c001b17a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b17e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b182:	53                   	push   ebx
c001b183:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b186:	83 c4 20             	add    esp,0x20
c001b189:	85 c0                	test   eax,eax
c001b18b:	75 0a                	jne    c001b197 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b18d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b191:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001b195:	74 18                	je     c001b1af <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001b197:	83 ec 0c             	sub    esp,0xc
c001b19a:	53                   	push   ebx
c001b19b:	e8 12 87 ff ff       	call   c00138b2 <File::close()>
c001b1a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b1a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b1a5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b1a8:	83 c4 10             	add    esp,0x10
c001b1ab:	31 c0                	xor    eax,eax
c001b1ad:	eb 3b                	jmp    c001b1ea <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001b1af:	83 ec 0c             	sub    esp,0xc
c001b1b2:	53                   	push   ebx
c001b1b3:	e8 fa 86 ff ff       	call   c00138b2 <File::close()>
c001b1b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b1ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b1bd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b1c0:	83 c4 0c             	add    esp,0xc
c001b1c3:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b1ca:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b1d1:	56                   	push   esi
c001b1d2:	e8 70 fd ff ff       	call   c001af47 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b1d7:	89 34 24             	mov    DWORD PTR [esp],esi
c001b1da:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b1de:	e8 89 4d ff ff       	call   c000ff6c <free>
c001b1e3:	83 c4 10             	add    esp,0x10
c001b1e6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b1ea:	81 c4 20 01 00 00    	add    esp,0x120
c001b1f0:	5b                   	pop    ebx
c001b1f1:	5e                   	pop    esi
c001b1f2:	5f                   	pop    edi
c001b1f3:	c3                   	ret    

c001b1f4 <Reg::getLine(char*, char*, char*)>:
c001b1f4:	57                   	push   edi
c001b1f5:	56                   	push   esi
c001b1f6:	53                   	push   ebx
c001b1f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b1fb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b1ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b203:	57                   	push   edi
c001b204:	56                   	push   esi
c001b205:	53                   	push   ebx
c001b206:	68 e5 d6 02 c0       	push   0xc002d6e5
c001b20b:	e8 8f fe ff ff       	call   c001b09f <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b210:	83 c4 10             	add    esp,0x10
c001b213:	84 c0                	test   al,al
c001b215:	75 10                	jne    c001b227 <Reg::getLine(char*, char*, char*)+0x33>
c001b217:	57                   	push   edi
c001b218:	56                   	push   esi
c001b219:	53                   	push   ebx
c001b21a:	68 0a d7 02 c0       	push   0xc002d70a
c001b21f:	e8 7b fe ff ff       	call   c001b09f <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b224:	83 c4 10             	add    esp,0x10
c001b227:	5b                   	pop    ebx
c001b228:	5e                   	pop    esi
c001b229:	5f                   	pop    edi
c001b22a:	c3                   	ret    

c001b22b <Reg::readInt(char*, char*, int*)>:
c001b22b:	55                   	push   ebp
c001b22c:	57                   	push   edi
c001b22d:	56                   	push   esi
c001b22e:	53                   	push   ebx
c001b22f:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b235:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b239:	57                   	push   edi
c001b23a:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b241:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b248:	e8 a7 ff ff ff       	call   c001b1f4 <Reg::getLine(char*, char*, char*)>
c001b24d:	83 c4 10             	add    esp,0x10
c001b250:	84 c0                	test   al,al
c001b252:	0f 84 b3 00 00 00    	je     c001b30b <Reg::readInt(char*, char*, int*)+0xe0>
c001b258:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b25c:	80 fa 2b             	cmp    dl,0x2b
c001b25f:	74 0c                	je     c001b26d <Reg::readInt(char*, char*, int*)+0x42>
c001b261:	80 fa 2d             	cmp    dl,0x2d
c001b264:	75 0e                	jne    c001b274 <Reg::readInt(char*, char*, int*)+0x49>
c001b266:	ba 01 00 00 00       	mov    edx,0x1
c001b26b:	eb 0b                	jmp    c001b278 <Reg::readInt(char*, char*, int*)+0x4d>
c001b26d:	ba 01 00 00 00       	mov    edx,0x1
c001b272:	eb 02                	jmp    c001b276 <Reg::readInt(char*, char*, int*)+0x4b>
c001b274:	31 d2                	xor    edx,edx
c001b276:	31 c0                	xor    eax,eax
c001b278:	be 0a 00 00 00       	mov    esi,0xa
c001b27d:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b282:	75 20                	jne    c001b2a4 <Reg::readInt(char*, char*, int*)+0x79>
c001b284:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b288:	80 f9 78             	cmp    cl,0x78
c001b28b:	75 0a                	jne    c001b297 <Reg::readInt(char*, char*, int*)+0x6c>
c001b28d:	83 c2 02             	add    edx,0x2
c001b290:	be 10 00 00 00       	mov    esi,0x10
c001b295:	eb 0d                	jmp    c001b2a4 <Reg::readInt(char*, char*, int*)+0x79>
c001b297:	80 f9 62             	cmp    cl,0x62
c001b29a:	75 08                	jne    c001b2a4 <Reg::readInt(char*, char*, int*)+0x79>
c001b29c:	83 c2 02             	add    edx,0x2
c001b29f:	be 02 00 00 00       	mov    esi,0x2
c001b2a4:	01 d7                	add    edi,edx
c001b2a6:	31 d2                	xor    edx,edx
c001b2a8:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b2aa:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b2ae:	80 fb 0d             	cmp    bl,0xd
c001b2b1:	0f 94 c3             	sete   bl
c001b2b4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b2b9:	0f 94 c1             	sete   cl
c001b2bc:	08 cb                	or     bl,cl
c001b2be:	75 3a                	jne    c001b2fa <Reg::readInt(char*, char*, int*)+0xcf>
c001b2c0:	0f af d6             	imul   edx,esi
c001b2c3:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b2c8:	83 fe 10             	cmp    esi,0x10
c001b2cb:	75 26                	jne    c001b2f3 <Reg::readInt(char*, char*, int*)+0xc8>
c001b2cd:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b2d1:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b2d4:	89 e9                	mov    ecx,ebp
c001b2d6:	80 f9 05             	cmp    cl,0x5
c001b2d9:	77 06                	ja     c001b2e1 <Reg::readInt(char*, char*, int*)+0xb6>
c001b2db:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b2df:	eb 16                	jmp    c001b2f7 <Reg::readInt(char*, char*, int*)+0xcc>
c001b2e1:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b2e5:	83 e9 61             	sub    ecx,0x61
c001b2e8:	80 f9 05             	cmp    cl,0x5
c001b2eb:	77 06                	ja     c001b2f3 <Reg::readInt(char*, char*, int*)+0xc8>
c001b2ed:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b2f1:	eb 04                	jmp    c001b2f7 <Reg::readInt(char*, char*, int*)+0xcc>
c001b2f3:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b2f7:	47                   	inc    edi
c001b2f8:	eb ae                	jmp    c001b2a8 <Reg::readInt(char*, char*, int*)+0x7d>
c001b2fa:	84 c0                	test   al,al
c001b2fc:	74 02                	je     c001b300 <Reg::readInt(char*, char*, int*)+0xd5>
c001b2fe:	f7 da                	neg    edx
c001b300:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b307:	89 10                	mov    DWORD PTR [eax],edx
c001b309:	88 d8                	mov    al,bl
c001b30b:	81 c4 ec 00 00 00    	add    esp,0xec
c001b311:	5b                   	pop    ebx
c001b312:	5e                   	pop    esi
c001b313:	5f                   	pop    edi
c001b314:	5d                   	pop    ebp
c001b315:	c3                   	ret    

c001b316 <Reg::readString(char*, char*, char*, int)>:
c001b316:	57                   	push   edi
c001b317:	56                   	push   esi
c001b318:	53                   	push   ebx
c001b319:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b31f:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b326:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b32a:	57                   	push   edi
c001b32b:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b332:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b339:	e8 b6 fe ff ff       	call   c001b1f4 <Reg::getLine(char*, char*, char*)>
c001b33e:	83 c4 10             	add    esp,0x10
c001b341:	89 c6                	mov    esi,eax
c001b343:	84 c0                	test   al,al
c001b345:	74 44                	je     c001b38b <Reg::readString(char*, char*, char*, int)+0x75>
c001b347:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b34e:	31 c0                	xor    eax,eax
c001b350:	4a                   	dec    edx
c001b351:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b354:	84 c9                	test   cl,cl
c001b356:	74 0f                	je     c001b367 <Reg::readString(char*, char*, char*, int)+0x51>
c001b358:	39 c2                	cmp    edx,eax
c001b35a:	7e 0b                	jle    c001b367 <Reg::readString(char*, char*, char*, int)+0x51>
c001b35c:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b35f:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b364:	40                   	inc    eax
c001b365:	eb ea                	jmp    c001b351 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b367:	83 ec 0c             	sub    esp,0xc
c001b36a:	53                   	push   ebx
c001b36b:	e8 71 53 fe ff       	call   c00006e1 <strlen>
c001b370:	83 c4 10             	add    esp,0x10
c001b373:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b378:	75 11                	jne    c001b38b <Reg::readString(char*, char*, char*, int)+0x75>
c001b37a:	83 ec 0c             	sub    esp,0xc
c001b37d:	53                   	push   ebx
c001b37e:	e8 5e 53 fe ff       	call   c00006e1 <strlen>
c001b383:	83 c4 10             	add    esp,0x10
c001b386:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b38b:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b391:	89 f0                	mov    eax,esi
c001b393:	5b                   	pop    ebx
c001b394:	5e                   	pop    esi
c001b395:	5f                   	pop    edi
c001b396:	c3                   	ret    

c001b397 <Reg::readBool(char*, char*, bool*)>:
c001b397:	83 ec 20             	sub    esp,0x20
c001b39a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b39e:	50                   	push   eax
c001b39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b3a7:	e8 7f fe ff ff       	call   c001b22b <Reg::readInt(char*, char*, int*)>
c001b3ac:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b3b1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b3b5:	0f 95 02             	setne  BYTE PTR [edx]
c001b3b8:	83 c4 2c             	add    esp,0x2c
c001b3bb:	c3                   	ret    

c001b3bc <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b3bc:	53                   	push   ebx
c001b3bd:	83 ec 1c             	sub    esp,0x1c
c001b3c0:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b3c4:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b3c8:	50                   	push   eax
c001b3c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b3cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b3d1:	e8 c1 ff ff ff       	call   c001b397 <Reg::readBool(char*, char*, bool*)>
c001b3d6:	83 c4 10             	add    esp,0x10
c001b3d9:	84 c0                	test   al,al
c001b3db:	74 04                	je     c001b3e1 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b3dd:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b3e1:	88 d8                	mov    al,bl
c001b3e3:	83 c4 18             	add    esp,0x18
c001b3e6:	5b                   	pop    ebx
c001b3e7:	c3                   	ret    

c001b3e8 <Reg::readIntWithDefault(char*, char*, int)>:
c001b3e8:	53                   	push   ebx
c001b3e9:	83 ec 1c             	sub    esp,0x1c
c001b3ec:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b3f0:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b3f4:	50                   	push   eax
c001b3f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b3f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b3fd:	e8 29 fe ff ff       	call   c001b22b <Reg::readInt(char*, char*, int*)>
c001b402:	83 c4 10             	add    esp,0x10
c001b405:	84 c0                	test   al,al
c001b407:	74 04                	je     c001b40d <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b409:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b40d:	89 d8                	mov    eax,ebx
c001b40f:	83 c4 18             	add    esp,0x18
c001b412:	5b                   	pop    ebx
c001b413:	c3                   	ret    

c001b414 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b414:	57                   	push   edi
c001b415:	56                   	push   esi
c001b416:	53                   	push   ebx
c001b417:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b41b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b41f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b423:	56                   	push   esi
c001b424:	53                   	push   ebx
c001b425:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b429:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b42d:	e8 e4 fe ff ff       	call   c001b316 <Reg::readString(char*, char*, char*, int)>
c001b432:	83 c4 10             	add    esp,0x10
c001b435:	84 c0                	test   al,al
c001b437:	75 1b                	jne    c001b454 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b439:	50                   	push   eax
c001b43a:	56                   	push   esi
c001b43b:	4e                   	dec    esi
c001b43c:	6a 00                	push   0x0
c001b43e:	53                   	push   ebx
c001b43f:	e8 80 52 fe ff       	call   c00006c4 <memset>
c001b444:	83 c4 0c             	add    esp,0xc
c001b447:	56                   	push   esi
c001b448:	57                   	push   edi
c001b449:	53                   	push   ebx
c001b44a:	89 fb                	mov    ebx,edi
c001b44c:	e8 4f 52 fe ff       	call   c00006a0 <memcpy>
c001b451:	83 c4 10             	add    esp,0x10
c001b454:	89 d8                	mov    eax,ebx
c001b456:	5b                   	pop    ebx
c001b457:	5e                   	pop    esi
c001b458:	5f                   	pop    edi
c001b459:	c3                   	ret    

c001b45a <Sys::eject(regs*)>:
c001b45a:	83 ec 0c             	sub    esp,0xc
c001b45d:	83 ca ff             	or     edx,0xffffffff
c001b460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b464:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b467:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b46c:	83 e9 41             	sub    ecx,0x41
c001b46f:	83 f9 19             	cmp    ecx,0x19
c001b472:	77 18                	ja     c001b48c <Sys::eject(regs*)+0x32>
c001b474:	8b 0c 8d 60 19 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffce6a0]
c001b47b:	85 c9                	test   ecx,ecx
c001b47d:	74 0d                	je     c001b48c <Sys::eject(regs*)+0x32>
c001b47f:	83 ec 0c             	sub    esp,0xc
c001b482:	51                   	push   ecx
c001b483:	e8 0e b5 ff ff       	call   c0016996 <LogicalDisk::eject()>
c001b488:	83 c4 10             	add    esp,0x10
c001b48b:	99                   	cdq    
c001b48c:	83 c4 0c             	add    esp,0xc
c001b48f:	c3                   	ret    

c001b490 <Sys::exit(regs*)>:
c001b490:	83 ec 18             	sub    esp,0x18
c001b493:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b497:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b49a:	e8 1a 31 00 00       	call   c001e5b9 <terminateTask(int)>
c001b49f:	83 c8 ff             	or     eax,0xffffffff
c001b4a2:	83 c4 1c             	add    esp,0x1c
c001b4a5:	89 c2                	mov    edx,eax
c001b4a7:	c3                   	ret    

c001b4a8 <Sys::getCwd(regs*)>:
c001b4a8:	83 ec 10             	sub    esp,0x10
c001b4ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b4af:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b4b2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b4b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4ba:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b4bd:	e8 f8 7e ff ff       	call   c00133ba <Fs::getcwd(Process*, char*, int)>
c001b4c2:	83 c4 1c             	add    esp,0x1c
c001b4c5:	99                   	cdq    
c001b4c6:	c3                   	ret    

c001b4c7 <Sys::getPID(regs*)>:
c001b4c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4cc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b4cf:	8b 00                	mov    eax,DWORD PTR [eax]
c001b4d1:	99                   	cdq    
c001b4d2:	c3                   	ret    

c001b4d3 <Sys::loadDLL(regs*)>:
c001b4d3:	56                   	push   esi
c001b4d4:	53                   	push   ebx
c001b4d5:	31 d2                	xor    edx,edx
c001b4d7:	51                   	push   ecx
c001b4d8:	b8 01 00 00 00       	mov    eax,0x1
c001b4dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b4e1:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b4e5:	0f 84 8c 00 00 00    	je     c001b577 <Sys::loadDLL(regs*)+0xa4>
c001b4eb:	83 ec 0c             	sub    esp,0xc
c001b4ee:	68 14 01 00 00       	push   0x114
c001b4f3:	e8 64 4a ff ff       	call   c000ff5c <malloc>
c001b4f8:	83 c4 0c             	add    esp,0xc
c001b4fb:	89 c3                	mov    ebx,eax
c001b4fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b502:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b505:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b508:	53                   	push   ebx
c001b509:	e8 e4 81 ff ff       	call   c00136f2 <File::File(char const*, Process*)>
c001b50e:	83 c4 10             	add    esp,0x10
c001b511:	31 d2                	xor    edx,edx
c001b513:	b8 02 00 00 00       	mov    eax,0x2
c001b518:	85 db                	test   ebx,ebx
c001b51a:	74 5b                	je     c001b577 <Sys::loadDLL(regs*)+0xa4>
c001b51c:	83 ec 0c             	sub    esp,0xc
c001b51f:	53                   	push   ebx
c001b520:	e8 9d 85 ff ff       	call   c0013ac2 <File::exists()>
c001b525:	83 c4 10             	add    esp,0x10
c001b528:	84 c0                	test   al,al
c001b52a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b52c:	75 11                	jne    c001b53f <Sys::loadDLL(regs*)+0x6c>
c001b52e:	83 ec 0c             	sub    esp,0xc
c001b531:	53                   	push   ebx
c001b532:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b535:	83 c4 10             	add    esp,0x10
c001b538:	b8 03 00 00 00       	mov    eax,0x3
c001b53d:	eb 36                	jmp    c001b575 <Sys::loadDLL(regs*)+0xa2>
c001b53f:	83 ec 0c             	sub    esp,0xc
c001b542:	53                   	push   ebx
c001b543:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b546:	58                   	pop    eax
c001b547:	5a                   	pop    edx
c001b548:	6a 00                	push   0x0
c001b54a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b54d:	e8 87 22 00 00       	call   c001d7d9 <Thr::loadDLL(char const*, bool)>
c001b552:	83 c4 10             	add    esp,0x10
c001b555:	89 c1                	mov    ecx,eax
c001b557:	31 d2                	xor    edx,edx
c001b559:	b8 04 00 00 00       	mov    eax,0x4
c001b55e:	85 c9                	test   ecx,ecx
c001b560:	74 15                	je     c001b577 <Sys::loadDLL(regs*)+0xa4>
c001b562:	53                   	push   ebx
c001b563:	53                   	push   ebx
c001b564:	ff 35 90 13 03 c0    	push   DWORD PTR ds:0xc0031390
c001b56a:	51                   	push   ecx
c001b56b:	e8 78 24 00 00       	call   c001d9e8 <Thr::executeDLL(unsigned long, void*)>
c001b570:	83 c4 10             	add    esp,0x10
c001b573:	31 c0                	xor    eax,eax
c001b575:	31 d2                	xor    edx,edx
c001b577:	59                   	pop    ecx
c001b578:	5b                   	pop    ebx
c001b579:	5e                   	pop    esi
c001b57a:	c3                   	ret    

c001b57b <Sys::read(regs*)>:
c001b57b:	57                   	push   edi
c001b57c:	56                   	push   esi
c001b57d:	53                   	push   ebx
c001b57e:	83 ec 10             	sub    esp,0x10
c001b581:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b585:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b588:	83 f8 02             	cmp    eax,0x2
c001b58b:	77 10                	ja     c001b59d <Sys::read(regs*)+0x22>
c001b58d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b592:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b595:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b59b:	eb 0e                	jmp    c001b5ab <Sys::read(regs*)+0x30>
c001b59d:	83 ec 0c             	sub    esp,0xc
c001b5a0:	50                   	push   eax
c001b5a1:	e8 04 6a ff ff       	call   c0011faa <getFromFileDescriptor(int)>
c001b5a6:	83 c4 10             	add    esp,0x10
c001b5a9:	89 c1                	mov    ecx,eax
c001b5ab:	83 c8 ff             	or     eax,0xffffffff
c001b5ae:	85 c9                	test   ecx,ecx
c001b5b0:	89 c2                	mov    edx,eax
c001b5b2:	74 28                	je     c001b5dc <Sys::read(regs*)+0x61>
c001b5b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b5bc:	31 ff                	xor    edi,edi
c001b5be:	83 ec 0c             	sub    esp,0xc
c001b5c1:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b5c3:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b5c7:	52                   	push   edx
c001b5c8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b5cb:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b5ce:	57                   	push   edi
c001b5cf:	56                   	push   esi
c001b5d0:	51                   	push   ecx
c001b5d1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b5d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b5d8:	83 c4 20             	add    esp,0x20
c001b5db:	99                   	cdq    
c001b5dc:	83 c4 10             	add    esp,0x10
c001b5df:	5b                   	pop    ebx
c001b5e0:	5e                   	pop    esi
c001b5e1:	5f                   	pop    edi
c001b5e2:	c3                   	ret    

c001b5e3 <Sys::sbrk(regs*)>:
c001b5e3:	56                   	push   esi
c001b5e4:	53                   	push   ebx
c001b5e5:	50                   	push   eax
c001b5e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5eb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b5ef:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b5f2:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b5f5:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b5fb:	85 db                	test   ebx,ebx
c001b5fd:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b600:	74 02                	je     c001b604 <Sys::sbrk(regs*)+0x21>
c001b602:	79 06                	jns    c001b60a <Sys::sbrk(regs*)+0x27>
c001b604:	89 f0                	mov    eax,esi
c001b606:	31 d2                	xor    edx,edx
c001b608:	eb 2a                	jmp    c001b634 <Sys::sbrk(regs*)+0x51>
c001b60a:	83 c8 ff             	or     eax,0xffffffff
c001b60d:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b613:	89 c2                	mov    edx,eax
c001b615:	77 1d                	ja     c001b634 <Sys::sbrk(regs*)+0x51>
c001b617:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b61d:	50                   	push   eax
c001b61e:	c1 ea 0c             	shr    edx,0xc
c001b621:	68 07 04 00 00       	push   0x407
c001b626:	52                   	push   edx
c001b627:	51                   	push   ecx
c001b628:	e8 0b 70 ff ff       	call   c0012638 <VAS::allocatePages(int, int)>
c001b62d:	89 f0                	mov    eax,esi
c001b62f:	31 d2                	xor    edx,edx
c001b631:	83 c4 10             	add    esp,0x10
c001b634:	59                   	pop    ecx
c001b635:	5b                   	pop    ebx
c001b636:	5e                   	pop    esi
c001b637:	c3                   	ret    

c001b638 <Sys::setCwd(regs*)>:
c001b638:	83 ec 14             	sub    esp,0x14
c001b63b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b63f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b642:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b647:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b64a:	e8 95 7d ff ff       	call   c00133e4 <Fs::setcwd(Process*, char*)>
c001b64f:	83 c4 1c             	add    esp,0x1c
c001b652:	99                   	cdq    
c001b653:	c3                   	ret    

c001b654 <Sys::setTime(regs*)>:
c001b654:	55                   	push   ebp
c001b655:	31 d2                	xor    edx,edx
c001b657:	57                   	push   edi
c001b658:	bf 18 00 00 00       	mov    edi,0x18
c001b65d:	56                   	push   esi
c001b65e:	53                   	push   ebx
c001b65f:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b664:	83 ec 30             	sub    esp,0x30
c001b667:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b66b:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b66e:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b671:	f7 f3                	div    ebx
c001b673:	89 d6                	mov    esi,edx
c001b675:	31 d2                	xor    edx,edx
c001b677:	f7 f3                	div    ebx
c001b679:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b67c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b680:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b685:	31 d2                	xor    edx,edx
c001b687:	f7 f3                	div    ebx
c001b689:	31 d2                	xor    edx,edx
c001b68b:	bb 0c 00 00 00       	mov    ebx,0xc
c001b690:	f7 f7                	div    edi
c001b692:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b695:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b699:	0f b7 cd             	movzx  ecx,bp
c001b69c:	56                   	push   esi
c001b69d:	89 c7                	mov    edi,eax
c001b69f:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b6a3:	c1 e6 10             	shl    esi,0x10
c001b6a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b6aa:	83 e7 1f             	and    edi,0x1f
c001b6ad:	51                   	push   ecx
c001b6ae:	47                   	inc    edi
c001b6af:	c1 e8 05             	shr    eax,0x5
c001b6b2:	31 d2                	xor    edx,edx
c001b6b4:	f7 f3                	div    ebx
c001b6b6:	31 db                	xor    ebx,ebx
c001b6b8:	52                   	push   edx
c001b6b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b6bd:	57                   	push   edi
c001b6be:	68 c8 dc 02 c0       	push   0xc002dcc8
c001b6c3:	e8 7e 7b ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001b6c8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b6cc:	89 f8                	mov    eax,edi
c001b6ce:	31 c9                	xor    ecx,ecx
c001b6d0:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b6d4:	88 c1                	mov    cl,al
c001b6d6:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b6dc:	88 d5                	mov    ch,dl
c001b6de:	c1 e0 10             	shl    eax,0x10
c001b6e1:	0f b7 d1             	movzx  edx,cx
c001b6e4:	09 c2                	or     edx,eax
c001b6e6:	89 d8                	mov    eax,ebx
c001b6e8:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b6ed:	09 f0                	or     eax,esi
c001b6ef:	89 c3                	mov    ebx,eax
c001b6f1:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b6f5:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b6f9:	83 c4 18             	add    esp,0x18
c001b6fc:	53                   	push   ebx
c001b6fd:	52                   	push   edx
c001b6fe:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b702:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b706:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b70a:	e8 a2 8b ff ff       	call   c00142b1 <datetimeToSeconds(datetime_t)>
c001b70f:	83 c4 0c             	add    esp,0xc
c001b712:	52                   	push   edx
c001b713:	50                   	push   eax
c001b714:	56                   	push   esi
c001b715:	e8 bd 8c ff ff       	call   c00143d7 <secondsToDatetime(unsigned long long)>
c001b71a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b71e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b722:	51                   	push   ecx
c001b723:	89 d6                	mov    esi,edx
c001b725:	51                   	push   ecx
c001b726:	c1 ee 10             	shr    esi,0x10
c001b729:	89 f3                	mov    ebx,esi
c001b72b:	0f b6 f3             	movzx  esi,bl
c001b72e:	56                   	push   esi
c001b72f:	0f b6 f6             	movzx  esi,dh
c001b732:	0f b6 d2             	movzx  edx,dl
c001b735:	56                   	push   esi
c001b736:	52                   	push   edx
c001b737:	89 c2                	mov    edx,eax
c001b739:	c1 ea 10             	shr    edx,0x10
c001b73c:	52                   	push   edx
c001b73d:	0f b6 d4             	movzx  edx,ah
c001b740:	0f b6 c0             	movzx  eax,al
c001b743:	52                   	push   edx
c001b744:	50                   	push   eax
c001b745:	68 e4 dc 02 c0       	push   0xc002dce4
c001b74a:	e8 f7 7a ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001b74f:	83 c4 2c             	add    esp,0x2c
c001b752:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c001b757:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b75b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b75f:	53                   	push   ebx
c001b760:	51                   	push   ecx
c001b761:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b767:	e8 e2 8a ff ff       	call   c001424e <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b76c:	83 f0 01             	xor    eax,0x1
c001b76f:	31 d2                	xor    edx,edx
c001b771:	0f b6 c0             	movzx  eax,al
c001b774:	83 c4 3c             	add    esp,0x3c
c001b777:	5b                   	pop    ebx
c001b778:	5e                   	pop    esi
c001b779:	5f                   	pop    edi
c001b77a:	5d                   	pop    ebp
c001b77b:	c3                   	ret    

c001b77c <Sys::timezone(regs*)>:
c001b77c:	53                   	push   ebx
c001b77d:	83 ec 08             	sub    esp,0x8
c001b780:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b784:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b788:	75 17                	jne    c001b7a1 <Sys::timezone(regs*)+0x25>
c001b78a:	83 ec 0c             	sub    esp,0xc
c001b78d:	68 a0 dd 02 c0       	push   0xc002dda0
c001b792:	e8 af 7a ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001b797:	83 c8 ff             	or     eax,0xffffffff
c001b79a:	83 c4 10             	add    esp,0x10
c001b79d:	89 c2                	mov    edx,eax
c001b79f:	eb 20                	jmp    c001b7c1 <Sys::timezone(regs*)+0x45>
c001b7a1:	83 ec 0c             	sub    esp,0xc
c001b7a4:	68 d8 dd 02 c0       	push   0xc002ddd8
c001b7a9:	e8 98 7a ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001b7ae:	58                   	pop    eax
c001b7af:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b7b2:	e8 f9 88 ff ff       	call   c00140b0 <User::loadClockSettings(int)>
c001b7b7:	83 c4 10             	add    esp,0x10
c001b7ba:	b8 01 00 00 00       	mov    eax,0x1
c001b7bf:	31 d2                	xor    edx,edx
c001b7c1:	83 c4 08             	add    esp,0x8
c001b7c4:	5b                   	pop    ebx
c001b7c5:	c3                   	ret    

c001b7c6 <Sys::write(regs*)>:
c001b7c6:	57                   	push   edi
c001b7c7:	56                   	push   esi
c001b7c8:	53                   	push   ebx
c001b7c9:	83 ec 10             	sub    esp,0x10
c001b7cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b7d0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b7d3:	83 f8 02             	cmp    eax,0x2
c001b7d6:	77 10                	ja     c001b7e8 <Sys::write(regs*)+0x22>
c001b7d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7dd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b7e0:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b7e6:	eb 0e                	jmp    c001b7f6 <Sys::write(regs*)+0x30>
c001b7e8:	83 ec 0c             	sub    esp,0xc
c001b7eb:	50                   	push   eax
c001b7ec:	e8 b9 67 ff ff       	call   c0011faa <getFromFileDescriptor(int)>
c001b7f1:	83 c4 10             	add    esp,0x10
c001b7f4:	89 c1                	mov    ecx,eax
c001b7f6:	83 c8 ff             	or     eax,0xffffffff
c001b7f9:	85 c9                	test   ecx,ecx
c001b7fb:	89 c2                	mov    edx,eax
c001b7fd:	74 28                	je     c001b827 <Sys::write(regs*)+0x61>
c001b7ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b807:	31 ff                	xor    edi,edi
c001b809:	83 ec 0c             	sub    esp,0xc
c001b80c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b80e:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b812:	52                   	push   edx
c001b813:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b816:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b819:	57                   	push   edi
c001b81a:	56                   	push   esi
c001b81b:	51                   	push   ecx
c001b81c:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b81f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b823:	83 c4 20             	add    esp,0x20
c001b826:	99                   	cdq    
c001b827:	83 c4 10             	add    esp,0x10
c001b82a:	5b                   	pop    ebx
c001b82b:	5e                   	pop    esi
c001b82c:	5f                   	pop    edi
c001b82d:	c3                   	ret    

c001b82e <Sys::yield(regs*)>:
c001b82e:	57                   	push   edi
c001b82f:	56                   	push   esi
c001b830:	53                   	push   ebx
c001b831:	e8 70 28 00 00       	call   c001e0a6 <lockScheduler()>
c001b836:	e8 d6 28 00 00       	call   c001e111 <schedule()>
c001b83b:	e8 68 28 00 00       	call   c001e0a8 <unlockScheduler()>
c001b840:	8b 35 d8 19 03 c0    	mov    esi,DWORD PTR ds:0xc00319d8
c001b846:	8b 3d dc 19 03 c0    	mov    edi,DWORD PTR ds:0xc00319dc
c001b84c:	89 f0                	mov    eax,esi
c001b84e:	89 fb                	mov    ebx,edi
c001b850:	89 f1                	mov    ecx,esi
c001b852:	c1 e0 07             	shl    eax,0x7
c001b855:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b859:	25 80 30 0f 00       	and    eax,0xf3080
c001b85e:	c1 eb 17             	shr    ebx,0x17
c001b861:	31 c8                	xor    eax,ecx
c001b863:	89 da                	mov    edx,ebx
c001b865:	5b                   	pop    ebx
c001b866:	5e                   	pop    esi
c001b867:	5f                   	pop    edi
c001b868:	c3                   	ret    

c001b869 <string_ends_with(char const*, char const*)>:
c001b869:	57                   	push   edi
c001b86a:	56                   	push   esi
c001b86b:	53                   	push   ebx
c001b86c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b870:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b874:	83 ec 0c             	sub    esp,0xc
c001b877:	53                   	push   ebx
c001b878:	e8 64 4e fe ff       	call   c00006e1 <strlen>
c001b87d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b880:	89 c6                	mov    esi,eax
c001b882:	e8 5a 4e fe ff       	call   c00006e1 <strlen>
c001b887:	83 c4 10             	add    esp,0x10
c001b88a:	39 c6                	cmp    esi,eax
c001b88c:	7d 06                	jge    c001b894 <string_ends_with(char const*, char const*)+0x2b>
c001b88e:	5b                   	pop    ebx
c001b88f:	31 c0                	xor    eax,eax
c001b891:	5e                   	pop    esi
c001b892:	5f                   	pop    edi
c001b893:	c3                   	ret    
c001b894:	83 ec 08             	sub    esp,0x8
c001b897:	29 c6                	sub    esi,eax
c001b899:	57                   	push   edi
c001b89a:	01 f3                	add    ebx,esi
c001b89c:	53                   	push   ebx
c001b89d:	e8 12 4f fe ff       	call   c00007b4 <strcmp>
c001b8a2:	83 c4 10             	add    esp,0x10
c001b8a5:	85 c0                	test   eax,eax
c001b8a7:	5b                   	pop    ebx
c001b8a8:	0f 94 c0             	sete   al
c001b8ab:	5e                   	pop    esi
c001b8ac:	0f b6 c0             	movzx  eax,al
c001b8af:	5f                   	pop    edi
c001b8b0:	c3                   	ret    

c001b8b1 <sysCallOpen(regs*)>:
c001b8b1:	56                   	push   esi
c001b8b2:	53                   	push   ebx
c001b8b3:	81 ec 04 01 00 00    	sub    esp,0x104
c001b8b9:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001b8c0:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001b8c3:	85 c9                	test   ecx,ecx
c001b8c5:	0f 84 b3 00 00 00    	je     c001b97e <sysCallOpen(regs*)+0xcd>
c001b8cb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b8ce:	85 c0                	test   eax,eax
c001b8d0:	0f 84 a8 00 00 00    	je     c001b97e <sysCallOpen(regs*)+0xcd>
c001b8d6:	52                   	push   edx
c001b8d7:	68 f8 df 02 c0       	push   0xc002dff8
c001b8dc:	50                   	push   eax
c001b8dd:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001b8e1:	56                   	push   esi
c001b8e2:	e8 62 7c ff ff       	call   c0013549 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b8e7:	89 34 24             	mov    DWORD PTR [esp],esi
c001b8ea:	e8 f2 4d fe ff       	call   c00006e1 <strlen>
c001b8ef:	83 c4 10             	add    esp,0x10
c001b8f2:	48                   	dec    eax
c001b8f3:	74 1d                	je     c001b912 <sysCallOpen(regs*)+0x61>
c001b8f5:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001b8f8:	eb 0f                	jmp    c001b909 <sysCallOpen(regs*)+0x58>
c001b8fa:	80 fa 3a             	cmp    dl,0x3a
c001b8fd:	74 0f                	je     c001b90e <sysCallOpen(regs*)+0x5d>
c001b8ff:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001b903:	48                   	dec    eax
c001b904:	74 0c                	je     c001b912 <sysCallOpen(regs*)+0x61>
c001b906:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001b909:	80 fa 2e             	cmp    dl,0x2e
c001b90c:	75 ec                	jne    c001b8fa <sysCallOpen(regs*)+0x49>
c001b90e:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001b912:	83 ec 08             	sub    esp,0x8
c001b915:	68 fc df 02 c0       	push   0xc002dffc
c001b91a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b91d:	e8 47 ff ff ff       	call   c001b869 <string_ends_with(char const*, char const*)>
c001b922:	83 c4 10             	add    esp,0x10
c001b925:	85 c0                	test   eax,eax
c001b927:	75 17                	jne    c001b940 <sysCallOpen(regs*)+0x8f>
c001b929:	83 ec 08             	sub    esp,0x8
c001b92c:	68 1d e0 02 c0       	push   0xc002e01d
c001b931:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b934:	e8 30 ff ff ff       	call   c001b869 <string_ends_with(char const*, char const*)>
c001b939:	83 c4 10             	add    esp,0x10
c001b93c:	85 c0                	test   eax,eax
c001b93e:	74 51                	je     c001b991 <sysCallOpen(regs*)+0xe0>
c001b940:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b943:	83 ec 08             	sub    esp,0x8
c001b946:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001b94c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b953:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b956:	ff 30                	push   DWORD PTR [eax]
c001b958:	68 01 e0 02 c0       	push   0xc002e001
c001b95d:	e8 e4 78 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001b962:	c7 04 24 10 e0 02 c0 	mov    DWORD PTR [esp],0xc002e010
c001b969:	e8 d8 78 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001b96e:	83 c4 10             	add    esp,0x10
c001b971:	81 c4 04 01 00 00    	add    esp,0x104
c001b977:	31 c0                	xor    eax,eax
c001b979:	31 d2                	xor    edx,edx
c001b97b:	5b                   	pop    ebx
c001b97c:	5e                   	pop    esi
c001b97d:	c3                   	ret    
c001b97e:	81 c4 04 01 00 00    	add    esp,0x104
c001b984:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b989:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b98e:	5b                   	pop    ebx
c001b98f:	5e                   	pop    esi
c001b990:	c3                   	ret    
c001b991:	83 ec 08             	sub    esp,0x8
c001b994:	68 fd df 02 c0       	push   0xc002dffd
c001b999:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b99c:	e8 13 4e fe ff       	call   c00007b4 <strcmp>
c001b9a1:	83 c4 10             	add    esp,0x10
c001b9a4:	85 c0                	test   eax,eax
c001b9a6:	74 98                	je     c001b940 <sysCallOpen(regs*)+0x8f>
c001b9a8:	83 ec 08             	sub    esp,0x8
c001b9ab:	68 fc df 02 c0       	push   0xc002dffc
c001b9b0:	56                   	push   esi
c001b9b1:	e8 b3 fe ff ff       	call   c001b869 <string_ends_with(char const*, char const*)>
c001b9b6:	83 c4 10             	add    esp,0x10
c001b9b9:	85 c0                	test   eax,eax
c001b9bb:	75 83                	jne    c001b940 <sysCallOpen(regs*)+0x8f>
c001b9bd:	83 ec 08             	sub    esp,0x8
c001b9c0:	68 22 e0 02 c0       	push   0xc002e022
c001b9c5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b9c8:	e8 9c fe ff ff       	call   c001b869 <string_ends_with(char const*, char const*)>
c001b9cd:	83 c4 10             	add    esp,0x10
c001b9d0:	85 c0                	test   eax,eax
c001b9d2:	0f 85 d9 00 00 00    	jne    c001bab1 <sysCallOpen(regs*)+0x200>
c001b9d8:	83 ec 08             	sub    esp,0x8
c001b9db:	68 27 e0 02 c0       	push   0xc002e027
c001b9e0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b9e3:	e8 81 fe ff ff       	call   c001b869 <string_ends_with(char const*, char const*)>
c001b9e8:	83 c4 10             	add    esp,0x10
c001b9eb:	85 c0                	test   eax,eax
c001b9ed:	0f 85 be 00 00 00    	jne    c001bab1 <sysCallOpen(regs*)+0x200>
c001b9f3:	83 ec 08             	sub    esp,0x8
c001b9f6:	68 23 e0 02 c0       	push   0xc002e023
c001b9fb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b9fe:	e8 b1 4d fe ff       	call   c00007b4 <strcmp>
c001ba03:	83 c4 10             	add    esp,0x10
c001ba06:	85 c0                	test   eax,eax
c001ba08:	0f 84 a3 00 00 00    	je     c001bab1 <sysCallOpen(regs*)+0x200>
c001ba0e:	83 ec 08             	sub    esp,0x8
c001ba11:	68 22 e0 02 c0       	push   0xc002e022
c001ba16:	56                   	push   esi
c001ba17:	e8 4d fe ff ff       	call   c001b869 <string_ends_with(char const*, char const*)>
c001ba1c:	83 c4 10             	add    esp,0x10
c001ba1f:	85 c0                	test   eax,eax
c001ba21:	0f 85 8a 00 00 00    	jne    c001bab1 <sysCallOpen(regs*)+0x200>
c001ba27:	83 ec 0c             	sub    esp,0xc
c001ba2a:	68 14 01 00 00       	push   0x114
c001ba2f:	e8 28 45 ff ff       	call   c000ff5c <malloc>
c001ba34:	83 c4 0c             	add    esp,0xc
c001ba37:	89 c6                	mov    esi,eax
c001ba39:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba3e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ba41:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ba44:	56                   	push   esi
c001ba45:	e8 a8 7c ff ff       	call   c00136f2 <File::File(char const*, Process*)>
c001ba4a:	83 c4 10             	add    esp,0x10
c001ba4d:	85 f6                	test   esi,esi
c001ba4f:	0f 84 29 ff ff ff    	je     c001b97e <sysCallOpen(regs*)+0xcd>
c001ba55:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001ba58:	0f b6 c2             	movzx  eax,dl
c001ba5b:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001ba5e:	89 d0                	mov    eax,edx
c001ba60:	83 e0 01             	and    eax,0x1
c001ba63:	f6 c2 02             	test   dl,0x2
c001ba66:	74 03                	je     c001ba6b <sysCallOpen(regs*)+0x1ba>
c001ba68:	83 c8 02             	or     eax,0x2
c001ba6b:	f6 c2 04             	test   dl,0x4
c001ba6e:	74 03                	je     c001ba73 <sysCallOpen(regs*)+0x1c2>
c001ba70:	83 c8 04             	or     eax,0x4
c001ba73:	f6 c2 08             	test   dl,0x8
c001ba76:	74 03                	je     c001ba7b <sysCallOpen(regs*)+0x1ca>
c001ba78:	83 c8 0a             	or     eax,0xa
c001ba7b:	83 e2 10             	and    edx,0x10
c001ba7e:	74 03                	je     c001ba83 <sysCallOpen(regs*)+0x1d2>
c001ba80:	83 c8 12             	or     eax,0x12
c001ba83:	83 ec 08             	sub    esp,0x8
c001ba86:	50                   	push   eax
c001ba87:	56                   	push   esi
c001ba88:	e8 17 7d ff ff       	call   c00137a4 <File::open(FileOpenMode)>
c001ba8d:	83 c4 10             	add    esp,0x10
c001ba90:	85 c0                	test   eax,eax
c001ba92:	0f 85 e6 fe ff ff    	jne    c001b97e <sysCallOpen(regs*)+0xcd>
c001ba98:	83 ec 0c             	sub    esp,0xc
c001ba9b:	56                   	push   esi
c001ba9c:	e8 01 65 ff ff       	call   c0011fa2 <UnixFile::getFileDescriptor()>
c001baa1:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001baa4:	89 02                	mov    DWORD PTR [edx],eax
c001baa6:	c1 f8 1f             	sar    eax,0x1f
c001baa9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001baac:	e9 bd fe ff ff       	jmp    c001b96e <sysCallOpen(regs*)+0xbd>
c001bab1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bab4:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001baba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bac1:	e9 ab fe ff ff       	jmp    c001b971 <sysCallOpen(regs*)+0xc0>

c001bac6 <sysCallSeek(regs*)>:
c001bac6:	53                   	push   ebx
c001bac7:	83 ec 08             	sub    esp,0x8
c001baca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bace:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bad1:	83 f8 02             	cmp    eax,0x2
c001bad4:	76 4a                	jbe    c001bb20 <sysCallSeek(regs*)+0x5a>
c001bad6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001badb:	77 32                	ja     c001bb0f <sysCallSeek(regs*)+0x49>
c001badd:	83 ec 0c             	sub    esp,0xc
c001bae0:	50                   	push   eax
c001bae1:	e8 c4 64 ff ff       	call   c0011faa <getFromFileDescriptor(int)>
c001bae6:	83 c4 0c             	add    esp,0xc
c001bae9:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001baec:	31 db                	xor    ebx,ebx
c001baee:	53                   	push   ebx
c001baef:	51                   	push   ecx
c001baf0:	50                   	push   eax
c001baf1:	e8 1c 7e ff ff       	call   c0013912 <File::seek(unsigned long long)>
c001baf6:	83 c4 10             	add    esp,0x10
c001baf9:	85 c0                	test   eax,eax
c001bafb:	0f 95 c0             	setne  al
c001bafe:	31 d2                	xor    edx,edx
c001bb00:	0f b6 c0             	movzx  eax,al
c001bb03:	f7 d8                	neg    eax
c001bb05:	83 d2 00             	adc    edx,0x0
c001bb08:	83 c4 08             	add    esp,0x8
c001bb0b:	f7 da                	neg    edx
c001bb0d:	5b                   	pop    ebx
c001bb0e:	c3                   	ret    
c001bb0f:	83 ec 08             	sub    esp,0x8
c001bb12:	50                   	push   eax
c001bb13:	68 2c e0 02 c0       	push   0xc002e02c
c001bb18:	e8 29 77 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001bb1d:	83 c4 10             	add    esp,0x10
c001bb20:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb25:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb2a:	83 c4 08             	add    esp,0x8
c001bb2d:	5b                   	pop    ebx
c001bb2e:	c3                   	ret    

c001bb2f <sysCallTell(regs*)>:
c001bb2f:	53                   	push   ebx
c001bb30:	83 ec 08             	sub    esp,0x8
c001bb33:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb37:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bb3a:	83 f8 02             	cmp    eax,0x2
c001bb3d:	76 5e                	jbe    c001bb9d <sysCallTell(regs*)+0x6e>
c001bb3f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb44:	77 2d                	ja     c001bb73 <sysCallTell(regs*)+0x44>
c001bb46:	83 ec 0c             	sub    esp,0xc
c001bb49:	50                   	push   eax
c001bb4a:	e8 5b 64 ff ff       	call   c0011faa <getFromFileDescriptor(int)>
c001bb4f:	5a                   	pop    edx
c001bb50:	59                   	pop    ecx
c001bb51:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bb54:	50                   	push   eax
c001bb55:	e8 0e 7e ff ff       	call   c0013968 <File::tell(unsigned long long*)>
c001bb5a:	83 c4 10             	add    esp,0x10
c001bb5d:	85 c0                	test   eax,eax
c001bb5f:	0f 95 c0             	setne  al
c001bb62:	31 d2                	xor    edx,edx
c001bb64:	0f b6 c0             	movzx  eax,al
c001bb67:	f7 d8                	neg    eax
c001bb69:	83 d2 00             	adc    edx,0x0
c001bb6c:	83 c4 08             	add    esp,0x8
c001bb6f:	f7 da                	neg    edx
c001bb71:	5b                   	pop    ebx
c001bb72:	c3                   	ret    
c001bb73:	83 ec 08             	sub    esp,0x8
c001bb76:	50                   	push   eax
c001bb77:	68 46 e0 02 c0       	push   0xc002e046
c001bb7c:	e8 c5 76 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001bb81:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bb84:	83 c4 10             	add    esp,0x10
c001bb87:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb8d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb94:	31 d2                	xor    edx,edx
c001bb96:	31 c0                	xor    eax,eax
c001bb98:	83 c4 08             	add    esp,0x8
c001bb9b:	5b                   	pop    ebx
c001bb9c:	c3                   	ret    
c001bb9d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bba2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bba7:	83 c4 08             	add    esp,0x8
c001bbaa:	5b                   	pop    ebx
c001bbab:	c3                   	ret    

c001bbac <sysCallSizeFromFilename(regs*)>:
c001bbac:	57                   	push   edi
c001bbad:	56                   	push   esi
c001bbae:	53                   	push   ebx
c001bbaf:	83 ec 20             	sub    esp,0x20
c001bbb2:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bbb6:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bbb9:	83 fb 02             	cmp    ebx,0x2
c001bbbc:	0f 86 99 00 00 00    	jbe    c001bc5b <sysCallSizeFromFilename(regs*)+0xaf>
c001bbc2:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bbc8:	77 65                	ja     c001bc2f <sysCallSizeFromFilename(regs*)+0x83>
c001bbca:	83 ec 0c             	sub    esp,0xc
c001bbcd:	68 14 01 00 00       	push   0x114
c001bbd2:	e8 85 43 ff ff       	call   c000ff5c <malloc>
c001bbd7:	83 c4 0c             	add    esp,0xc
c001bbda:	89 c6                	mov    esi,eax
c001bbdc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbe1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bbe4:	53                   	push   ebx
c001bbe5:	56                   	push   esi
c001bbe6:	e8 07 7b ff ff       	call   c00136f2 <File::File(char const*, Process*)>
c001bbeb:	83 c4 0c             	add    esp,0xc
c001bbee:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bbf2:	50                   	push   eax
c001bbf3:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bbf6:	56                   	push   esi
c001bbf7:	e8 04 7f ff ff       	call   c0013b00 <File::stat(unsigned long long*, bool*)>
c001bbfc:	83 c4 10             	add    esp,0x10
c001bbff:	85 f6                	test   esi,esi
c001bc01:	74 14                	je     c001bc17 <sysCallSizeFromFilename(regs*)+0x6b>
c001bc03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bc07:	8b 16                	mov    edx,DWORD PTR [esi]
c001bc09:	83 ec 0c             	sub    esp,0xc
c001bc0c:	56                   	push   esi
c001bc0d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bc10:	83 c4 10             	add    esp,0x10
c001bc13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc17:	85 c0                	test   eax,eax
c001bc19:	0f 95 c0             	setne  al
c001bc1c:	31 d2                	xor    edx,edx
c001bc1e:	0f b6 c0             	movzx  eax,al
c001bc21:	f7 d8                	neg    eax
c001bc23:	83 d2 00             	adc    edx,0x0
c001bc26:	83 c4 20             	add    esp,0x20
c001bc29:	f7 da                	neg    edx
c001bc2b:	5b                   	pop    ebx
c001bc2c:	5e                   	pop    esi
c001bc2d:	5f                   	pop    edi
c001bc2e:	c3                   	ret    
c001bc2f:	83 ec 08             	sub    esp,0x8
c001bc32:	53                   	push   ebx
c001bc33:	68 60 e0 02 c0       	push   0xc002e060
c001bc38:	e8 09 76 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001bc3d:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bc40:	83 c4 10             	add    esp,0x10
c001bc43:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bc49:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bc50:	31 d2                	xor    edx,edx
c001bc52:	83 c4 20             	add    esp,0x20
c001bc55:	31 c0                	xor    eax,eax
c001bc57:	5b                   	pop    ebx
c001bc58:	5e                   	pop    esi
c001bc59:	5f                   	pop    edi
c001bc5a:	c3                   	ret    
c001bc5b:	83 c4 20             	add    esp,0x20
c001bc5e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc63:	5b                   	pop    ebx
c001bc64:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc69:	5e                   	pop    esi
c001bc6a:	5f                   	pop    edi
c001bc6b:	c3                   	ret    

c001bc6c <sysCallSize(regs*)>:
c001bc6c:	53                   	push   ebx
c001bc6d:	83 ec 18             	sub    esp,0x18
c001bc70:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bc74:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bc77:	83 f8 02             	cmp    eax,0x2
c001bc7a:	76 64                	jbe    c001bce0 <sysCallSize(regs*)+0x74>
c001bc7c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bc81:	77 33                	ja     c001bcb6 <sysCallSize(regs*)+0x4a>
c001bc83:	83 ec 0c             	sub    esp,0xc
c001bc86:	50                   	push   eax
c001bc87:	e8 1e 63 ff ff       	call   c0011faa <getFromFileDescriptor(int)>
c001bc8c:	83 c4 0c             	add    esp,0xc
c001bc8f:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bc93:	52                   	push   edx
c001bc94:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bc97:	50                   	push   eax
c001bc98:	e8 63 7e ff ff       	call   c0013b00 <File::stat(unsigned long long*, bool*)>
c001bc9d:	83 c4 10             	add    esp,0x10
c001bca0:	85 c0                	test   eax,eax
c001bca2:	0f 95 c0             	setne  al
c001bca5:	31 d2                	xor    edx,edx
c001bca7:	0f b6 c0             	movzx  eax,al
c001bcaa:	f7 d8                	neg    eax
c001bcac:	83 d2 00             	adc    edx,0x0
c001bcaf:	83 c4 18             	add    esp,0x18
c001bcb2:	f7 da                	neg    edx
c001bcb4:	5b                   	pop    ebx
c001bcb5:	c3                   	ret    
c001bcb6:	83 ec 08             	sub    esp,0x8
c001bcb9:	50                   	push   eax
c001bcba:	68 60 e0 02 c0       	push   0xc002e060
c001bcbf:	e8 82 75 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001bcc4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bcc7:	83 c4 10             	add    esp,0x10
c001bcca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bcd0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bcd7:	31 d2                	xor    edx,edx
c001bcd9:	31 c0                	xor    eax,eax
c001bcdb:	83 c4 18             	add    esp,0x18
c001bcde:	5b                   	pop    ebx
c001bcdf:	c3                   	ret    
c001bce0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bce5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcea:	83 c4 18             	add    esp,0x18
c001bced:	5b                   	pop    ebx
c001bcee:	c3                   	ret    

c001bcef <sysCallClose(regs*)>:
c001bcef:	53                   	push   ebx
c001bcf0:	83 ec 08             	sub    esp,0x8
c001bcf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcf7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bcfa:	83 f8 02             	cmp    eax,0x2
c001bcfd:	76 50                	jbe    c001bd4f <sysCallClose(regs*)+0x60>
c001bcff:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bd04:	74 58                	je     c001bd5e <sysCallClose(regs*)+0x6f>
c001bd06:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bd0b:	74 60                	je     c001bd6d <sysCallClose(regs*)+0x7e>
c001bd0d:	77 2f                	ja     c001bd3e <sysCallClose(regs*)+0x4f>
c001bd0f:	83 ec 0c             	sub    esp,0xc
c001bd12:	50                   	push   eax
c001bd13:	e8 92 62 ff ff       	call   c0011faa <getFromFileDescriptor(int)>
c001bd18:	89 c3                	mov    ebx,eax
c001bd1a:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd1d:	e8 90 7b ff ff       	call   c00138b2 <File::close()>
c001bd22:	83 c4 10             	add    esp,0x10
c001bd25:	85 db                	test   ebx,ebx
c001bd27:	74 0c                	je     c001bd35 <sysCallClose(regs*)+0x46>
c001bd29:	83 ec 0c             	sub    esp,0xc
c001bd2c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd2e:	53                   	push   ebx
c001bd2f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd32:	83 c4 10             	add    esp,0x10
c001bd35:	31 c0                	xor    eax,eax
c001bd37:	31 d2                	xor    edx,edx
c001bd39:	83 c4 08             	add    esp,0x8
c001bd3c:	5b                   	pop    ebx
c001bd3d:	c3                   	ret    
c001bd3e:	83 ec 08             	sub    esp,0x8
c001bd41:	50                   	push   eax
c001bd42:	68 d8 e0 02 c0       	push   0xc002e0d8
c001bd47:	e8 fa 74 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001bd4c:	83 c4 10             	add    esp,0x10
c001bd4f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd54:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd59:	83 c4 08             	add    esp,0x8
c001bd5c:	5b                   	pop    ebx
c001bd5d:	c3                   	ret    
c001bd5e:	83 ec 0c             	sub    esp,0xc
c001bd61:	68 7b e0 02 c0       	push   0xc002e07b
c001bd66:	e8 db 74 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001bd6b:	eb c5                	jmp    c001bd32 <sysCallClose(regs*)+0x43>
c001bd6d:	83 ec 0c             	sub    esp,0xc
c001bd70:	68 89 e0 02 c0       	push   0xc002e089
c001bd75:	eb ef                	jmp    c001bd66 <sysCallClose(regs*)+0x77>

c001bd77 <sysCallOpenDir(regs*)>:
c001bd77:	56                   	push   esi
c001bd78:	53                   	push   ebx
c001bd79:	53                   	push   ebx
c001bd7a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd7e:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bd81:	85 f6                	test   esi,esi
c001bd83:	74 59                	je     c001bdde <sysCallOpenDir(regs*)+0x67>
c001bd85:	83 ec 0c             	sub    esp,0xc
c001bd88:	68 14 01 00 00       	push   0x114
c001bd8d:	e8 ca 41 ff ff       	call   c000ff5c <malloc>
c001bd92:	83 c4 0c             	add    esp,0xc
c001bd95:	89 c6                	mov    esi,eax
c001bd97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd9c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd9f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bda2:	56                   	push   esi
c001bda3:	e8 ba 7d ff ff       	call   c0013b62 <Directory::Directory(char const*, Process*)>
c001bda8:	83 c4 10             	add    esp,0x10
c001bdab:	85 f6                	test   esi,esi
c001bdad:	74 2f                	je     c001bdde <sysCallOpenDir(regs*)+0x67>
c001bdaf:	83 ec 0c             	sub    esp,0xc
c001bdb2:	56                   	push   esi
c001bdb3:	e8 5c 7e ff ff       	call   c0013c14 <Directory::open()>
c001bdb8:	83 c4 10             	add    esp,0x10
c001bdbb:	85 c0                	test   eax,eax
c001bdbd:	75 1f                	jne    c001bdde <sysCallOpenDir(regs*)+0x67>
c001bdbf:	83 ec 0c             	sub    esp,0xc
c001bdc2:	56                   	push   esi
c001bdc3:	e8 da 61 ff ff       	call   c0011fa2 <UnixFile::getFileDescriptor()>
c001bdc8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bdcb:	83 c4 10             	add    esp,0x10
c001bdce:	89 02                	mov    DWORD PTR [edx],eax
c001bdd0:	c1 f8 1f             	sar    eax,0x1f
c001bdd3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bdd6:	31 c0                	xor    eax,eax
c001bdd8:	59                   	pop    ecx
c001bdd9:	31 d2                	xor    edx,edx
c001bddb:	5b                   	pop    ebx
c001bddc:	5e                   	pop    esi
c001bddd:	c3                   	ret    
c001bdde:	59                   	pop    ecx
c001bddf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bde4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bde9:	5b                   	pop    ebx
c001bdea:	5e                   	pop    esi
c001bdeb:	c3                   	ret    

c001bdec <sysCallReadDir(regs*)>:
c001bdec:	53                   	push   ebx
c001bded:	83 ec 18             	sub    esp,0x18
c001bdf0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bdf4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bdf7:	83 f8 02             	cmp    eax,0x2
c001bdfa:	76 53                	jbe    c001be4f <sysCallReadDir(regs*)+0x63>
c001bdfc:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bdff:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001be05:	77 4f                	ja     c001be56 <sysCallReadDir(regs*)+0x6a>
c001be07:	83 ec 0c             	sub    esp,0xc
c001be0a:	50                   	push   eax
c001be0b:	e8 9a 61 ff ff       	call   c0011faa <getFromFileDescriptor(int)>
c001be10:	83 c4 10             	add    esp,0x10
c001be13:	85 c0                	test   eax,eax
c001be15:	74 50                	je     c001be67 <sysCallReadDir(regs*)+0x7b>
c001be17:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001be1f:	83 ec 0c             	sub    esp,0xc
c001be22:	8b 10                	mov    edx,DWORD PTR [eax]
c001be24:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001be28:	51                   	push   ecx
c001be29:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001be2c:	6a 00                	push   0x0
c001be2e:	68 10 01 00 00       	push   0x110
c001be33:	50                   	push   eax
c001be34:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001be37:	83 c4 20             	add    esp,0x20
c001be3a:	85 c0                	test   eax,eax
c001be3c:	74 38                	je     c001be76 <sysCallReadDir(regs*)+0x8a>
c001be3e:	83 f8 07             	cmp    eax,0x7
c001be41:	74 0c                	je     c001be4f <sysCallReadDir(regs*)+0x63>
c001be43:	b8 02 00 00 00       	mov    eax,0x2
c001be48:	31 d2                	xor    edx,edx
c001be4a:	83 c4 18             	add    esp,0x18
c001be4d:	5b                   	pop    ebx
c001be4e:	c3                   	ret    
c001be4f:	b8 01 00 00 00       	mov    eax,0x1
c001be54:	eb f2                	jmp    c001be48 <sysCallReadDir(regs*)+0x5c>
c001be56:	83 ec 08             	sub    esp,0x8
c001be59:	52                   	push   edx
c001be5a:	68 00 e1 02 c0       	push   0xc002e100
c001be5f:	e8 e2 73 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001be64:	83 c4 10             	add    esp,0x10
c001be67:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be6c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be71:	83 c4 18             	add    esp,0x18
c001be74:	5b                   	pop    ebx
c001be75:	c3                   	ret    
c001be76:	31 c0                	xor    eax,eax
c001be78:	eb ce                	jmp    c001be48 <sysCallReadDir(regs*)+0x5c>

c001be7a <sysCallSeekDir(regs*)>:
c001be7a:	31 c0                	xor    eax,eax
c001be7c:	31 d2                	xor    edx,edx
c001be7e:	c3                   	ret    

c001be7f <sysCallTellDir(regs*)>:
c001be7f:	31 c0                	xor    eax,eax
c001be81:	31 d2                	xor    edx,edx
c001be83:	c3                   	ret    

c001be84 <sysCallMakeDir(regs*)>:
c001be84:	56                   	push   esi
c001be85:	53                   	push   ebx
c001be86:	83 ec 10             	sub    esp,0x10
c001be89:	68 14 01 00 00       	push   0x114
c001be8e:	e8 c9 40 ff ff       	call   c000ff5c <malloc>
c001be93:	83 c4 0c             	add    esp,0xc
c001be96:	89 c3                	mov    ebx,eax
c001be98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be9d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bea0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bea4:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bea7:	53                   	push   ebx
c001bea8:	e8 b5 7c ff ff       	call   c0013b62 <Directory::Directory(char const*, Process*)>
c001bead:	83 c4 10             	add    esp,0x10
c001beb0:	85 db                	test   ebx,ebx
c001beb2:	74 32                	je     c001bee6 <sysCallMakeDir(regs*)+0x62>
c001beb4:	83 ec 0c             	sub    esp,0xc
c001beb7:	53                   	push   ebx
c001beb8:	e8 bd 7f ff ff       	call   c0013e7a <Directory::create()>
c001bebd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bec0:	89 c6                	mov    esi,eax
c001bec2:	e8 2f 7e ff ff       	call   c0013cf6 <Directory::close()>
c001bec7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bec9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001becc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001becf:	83 c4 10             	add    esp,0x10
c001bed2:	31 c0                	xor    eax,eax
c001bed4:	59                   	pop    ecx
c001bed5:	85 f6                	test   esi,esi
c001bed7:	5b                   	pop    ebx
c001bed8:	0f 95 c0             	setne  al
c001bedb:	5e                   	pop    esi
c001bedc:	31 d2                	xor    edx,edx
c001bede:	f7 d8                	neg    eax
c001bee0:	83 d2 00             	adc    edx,0x0
c001bee3:	f7 da                	neg    edx
c001bee5:	c3                   	ret    
c001bee6:	59                   	pop    ecx
c001bee7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001beec:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bef1:	5b                   	pop    ebx
c001bef2:	5e                   	pop    esi
c001bef3:	c3                   	ret    

c001bef4 <sysCallCloseDir(regs*)>:
c001bef4:	53                   	push   ebx
c001bef5:	83 ec 08             	sub    esp,0x8
c001bef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001befc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001beff:	83 f8 02             	cmp    eax,0x2
c001bf02:	76 47                	jbe    c001bf4b <sysCallCloseDir(regs*)+0x57>
c001bf04:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bf09:	77 2f                	ja     c001bf3a <sysCallCloseDir(regs*)+0x46>
c001bf0b:	83 ec 0c             	sub    esp,0xc
c001bf0e:	50                   	push   eax
c001bf0f:	e8 96 60 ff ff       	call   c0011faa <getFromFileDescriptor(int)>
c001bf14:	89 c3                	mov    ebx,eax
c001bf16:	89 04 24             	mov    DWORD PTR [esp],eax
c001bf19:	e8 d8 7d ff ff       	call   c0013cf6 <Directory::close()>
c001bf1e:	83 c4 10             	add    esp,0x10
c001bf21:	85 db                	test   ebx,ebx
c001bf23:	74 0c                	je     c001bf31 <sysCallCloseDir(regs*)+0x3d>
c001bf25:	83 ec 0c             	sub    esp,0xc
c001bf28:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf2a:	53                   	push   ebx
c001bf2b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bf2e:	83 c4 10             	add    esp,0x10
c001bf31:	31 c0                	xor    eax,eax
c001bf33:	31 d2                	xor    edx,edx
c001bf35:	83 c4 08             	add    esp,0x8
c001bf38:	5b                   	pop    ebx
c001bf39:	c3                   	ret    
c001bf3a:	83 ec 08             	sub    esp,0x8
c001bf3d:	50                   	push   eax
c001bf3e:	68 24 e1 02 c0       	push   0xc002e124
c001bf43:	e8 fe 72 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001bf48:	83 c4 10             	add    esp,0x10
c001bf4b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bf50:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bf55:	83 c4 08             	add    esp,0x8
c001bf58:	5b                   	pop    ebx
c001bf59:	c3                   	ret    

c001bf5a <sysCallVerify(regs*)>:
c001bf5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf5e:	31 d2                	xor    edx,edx
c001bf60:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bf63:	c3                   	ret    

c001bf64 <sysCallWait(regs*)>:
c001bf64:	83 ec 10             	sub    esp,0x10
c001bf67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bf6b:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bf6e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bf71:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bf74:	e8 4b 25 00 00       	call   c001e4c4 <waitTask(int, int*, int)>
c001bf79:	83 c4 1c             	add    esp,0x1c
c001bf7c:	99                   	cdq    
c001bf7d:	c3                   	ret    

c001bf7e <sysCallNotImpl(regs*)>:
c001bf7e:	83 ec 18             	sub    esp,0x18
c001bf81:	68 97 e0 02 c0       	push   0xc002e097
c001bf86:	e8 70 e8 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001bf8b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bf90:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bf95:	83 c4 1c             	add    esp,0x1c
c001bf98:	c3                   	ret    

c001bf99 <sysCallRmdir(regs*)>:
c001bf99:	56                   	push   esi
c001bf9a:	53                   	push   ebx
c001bf9b:	83 ec 20             	sub    esp,0x20
c001bf9e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bfa2:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bfa5:	68 14 01 00 00       	push   0x114
c001bfaa:	e8 ad 3f ff ff       	call   c000ff5c <malloc>
c001bfaf:	83 c4 0c             	add    esp,0xc
c001bfb2:	89 c3                	mov    ebx,eax
c001bfb4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bfb9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bfbc:	56                   	push   esi
c001bfbd:	53                   	push   ebx
c001bfbe:	e8 2f 77 ff ff       	call   c00136f2 <File::File(char const*, Process*)>
c001bfc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bfc6:	e8 01 7a ff ff       	call   c00139cc <File::unlink()>
c001bfcb:	83 c4 10             	add    esp,0x10
c001bfce:	85 db                	test   ebx,ebx
c001bfd0:	74 14                	je     c001bfe6 <sysCallRmdir(regs*)+0x4d>
c001bfd2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bfd6:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bfd8:	83 ec 0c             	sub    esp,0xc
c001bfdb:	53                   	push   ebx
c001bfdc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bfdf:	83 c4 10             	add    esp,0x10
c001bfe2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bfe6:	85 c0                	test   eax,eax
c001bfe8:	0f 95 c0             	setne  al
c001bfeb:	31 d2                	xor    edx,edx
c001bfed:	0f b6 c0             	movzx  eax,al
c001bff0:	f7 d8                	neg    eax
c001bff2:	83 d2 00             	adc    edx,0x0
c001bff5:	83 c4 14             	add    esp,0x14
c001bff8:	f7 da                	neg    edx
c001bffa:	5b                   	pop    ebx
c001bffb:	5e                   	pop    esi
c001bffc:	c3                   	ret    

c001bffd <sysCallUnlink(regs*)>:
c001bffd:	56                   	push   esi
c001bffe:	53                   	push   ebx
c001bfff:	83 ec 20             	sub    esp,0x20
c001c002:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c006:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c009:	68 14 01 00 00       	push   0x114
c001c00e:	e8 49 3f ff ff       	call   c000ff5c <malloc>
c001c013:	83 c4 0c             	add    esp,0xc
c001c016:	89 c3                	mov    ebx,eax
c001c018:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c01d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c020:	56                   	push   esi
c001c021:	53                   	push   ebx
c001c022:	e8 cb 76 ff ff       	call   c00136f2 <File::File(char const*, Process*)>
c001c027:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c02a:	e8 9d 79 ff ff       	call   c00139cc <File::unlink()>
c001c02f:	83 c4 10             	add    esp,0x10
c001c032:	85 db                	test   ebx,ebx
c001c034:	74 14                	je     c001c04a <sysCallUnlink(regs*)+0x4d>
c001c036:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c03a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c03c:	83 ec 0c             	sub    esp,0xc
c001c03f:	53                   	push   ebx
c001c040:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c043:	83 c4 10             	add    esp,0x10
c001c046:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c04a:	85 c0                	test   eax,eax
c001c04c:	0f 95 c0             	setne  al
c001c04f:	31 d2                	xor    edx,edx
c001c051:	0f b6 c0             	movzx  eax,al
c001c054:	f7 d8                	neg    eax
c001c056:	83 d2 00             	adc    edx,0x0
c001c059:	83 c4 14             	add    esp,0x14
c001c05c:	f7 da                	neg    edx
c001c05e:	5b                   	pop    ebx
c001c05f:	5e                   	pop    esi
c001c060:	c3                   	ret    

c001c061 <sysCallGetArgc(regs*)>:
c001c061:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c066:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c069:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001c06f:	99                   	cdq    
c001c070:	c3                   	ret    

c001c071 <sysCallGetArgv(regs*)>:
c001c071:	83 ec 0c             	sub    esp,0xc
c001c074:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c078:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001c07b:	85 c0                	test   eax,eax
c001c07d:	78 2b                	js     c001c0aa <sysCallGetArgv(regs*)+0x39>
c001c07f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c085:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001c088:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001c08e:	7d 1a                	jge    c001c0aa <sysCallGetArgv(regs*)+0x39>
c001c090:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001c097:	85 c0                	test   eax,eax
c001c099:	74 17                	je     c001c0b2 <sysCallGetArgv(regs*)+0x41>
c001c09b:	83 ec 08             	sub    esp,0x8
c001c09e:	50                   	push   eax
c001c09f:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001c0a2:	e8 bc 46 fe ff       	call   c0000763 <strcpy>
c001c0a7:	83 c4 10             	add    esp,0x10
c001c0aa:	31 c0                	xor    eax,eax
c001c0ac:	31 d2                	xor    edx,edx
c001c0ae:	83 c4 0c             	add    esp,0xc
c001c0b1:	c3                   	ret    
c001c0b2:	b8 01 00 00 00       	mov    eax,0x1
c001c0b7:	31 d2                	xor    edx,edx
c001c0b9:	83 c4 0c             	add    esp,0xc
c001c0bc:	c3                   	ret    

c001c0bd <sysCallRealpath(regs*)>:
c001c0bd:	83 ec 0c             	sub    esp,0xc
c001c0c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0c4:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001c0c7:	85 d2                	test   edx,edx
c001c0c9:	74 07                	je     c001c0d2 <sysCallRealpath(regs*)+0x15>
c001c0cb:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001c0ce:	85 c0                	test   eax,eax
c001c0d0:	75 0b                	jne    c001c0dd <sysCallRealpath(regs*)+0x20>
c001c0d2:	b8 01 00 00 00       	mov    eax,0x1
c001c0d7:	31 d2                	xor    edx,edx
c001c0d9:	83 c4 0c             	add    esp,0xc
c001c0dc:	c3                   	ret    
c001c0dd:	51                   	push   ecx
c001c0de:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c0e4:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001c0e7:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001c0ed:	51                   	push   ecx
c001c0ee:	52                   	push   edx
c001c0ef:	50                   	push   eax
c001c0f0:	e8 54 74 ff ff       	call   c0013549 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c0f5:	83 c4 10             	add    esp,0x10
c001c0f8:	31 c0                	xor    eax,eax
c001c0fa:	31 d2                	xor    edx,edx
c001c0fc:	83 c4 0c             	add    esp,0xc
c001c0ff:	c3                   	ret    

c001c100 <sysCallTTYName(regs*)>:
c001c100:	56                   	push   esi
c001c101:	53                   	push   ebx
c001c102:	53                   	push   ebx
c001c103:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c107:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001c10a:	85 c0                	test   eax,eax
c001c10c:	74 5f                	je     c001c16d <sysCallTTYName(regs*)+0x6d>
c001c10e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001c111:	83 f8 02             	cmp    eax,0x2
c001c114:	77 3e                	ja     c001c154 <sysCallTTYName(regs*)+0x54>
c001c116:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c11b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c11e:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001c124:	85 db                	test   ebx,ebx
c001c126:	74 45                	je     c001c16d <sysCallTTYName(regs*)+0x6d>
c001c128:	83 ec 0c             	sub    esp,0xc
c001c12b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c12d:	53                   	push   ebx
c001c12e:	ff 10                	call   DWORD PTR [eax]
c001c130:	83 c4 10             	add    esp,0x10
c001c133:	84 c0                	test   al,al
c001c135:	74 41                	je     c001c178 <sysCallTTYName(regs*)+0x78>
c001c137:	83 ec 08             	sub    esp,0x8
c001c13a:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001c140:	53                   	push   ebx
c001c141:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001c144:	e8 1a 46 fe ff       	call   c0000763 <strcpy>
c001c149:	83 c4 10             	add    esp,0x10
c001c14c:	31 c0                	xor    eax,eax
c001c14e:	59                   	pop    ecx
c001c14f:	31 d2                	xor    edx,edx
c001c151:	5b                   	pop    ebx
c001c152:	5e                   	pop    esi
c001c153:	c3                   	ret    
c001c154:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c159:	74 bb                	je     c001c116 <sysCallTTYName(regs*)+0x16>
c001c15b:	83 ec 0c             	sub    esp,0xc
c001c15e:	50                   	push   eax
c001c15f:	e8 46 5e ff ff       	call   c0011faa <getFromFileDescriptor(int)>
c001c164:	83 c4 10             	add    esp,0x10
c001c167:	89 c3                	mov    ebx,eax
c001c169:	85 db                	test   ebx,ebx
c001c16b:	75 bb                	jne    c001c128 <sysCallTTYName(regs*)+0x28>
c001c16d:	59                   	pop    ecx
c001c16e:	b8 01 00 00 00       	mov    eax,0x1
c001c173:	31 d2                	xor    edx,edx
c001c175:	5b                   	pop    ebx
c001c176:	5e                   	pop    esi
c001c177:	c3                   	ret    
c001c178:	59                   	pop    ecx
c001c179:	b8 02 00 00 00       	mov    eax,0x2
c001c17e:	31 d2                	xor    edx,edx
c001c180:	5b                   	pop    ebx
c001c181:	5e                   	pop    esi
c001c182:	c3                   	ret    

c001c183 <sysCallIsATTY(regs*)>:
c001c183:	83 ec 0c             	sub    esp,0xc
c001c186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c18a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c18d:	83 f8 02             	cmp    eax,0x2
c001c190:	76 07                	jbe    c001c199 <sysCallIsATTY(regs*)+0x16>
c001c192:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c197:	75 26                	jne    c001c1bf <sysCallIsATTY(regs*)+0x3c>
c001c199:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c19e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1a1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001c1a7:	85 c0                	test   eax,eax
c001c1a9:	74 24                	je     c001c1cf <sysCallIsATTY(regs*)+0x4c>
c001c1ab:	83 ec 0c             	sub    esp,0xc
c001c1ae:	8b 10                	mov    edx,DWORD PTR [eax]
c001c1b0:	50                   	push   eax
c001c1b1:	ff 12                	call   DWORD PTR [edx]
c001c1b3:	31 d2                	xor    edx,edx
c001c1b5:	0f b6 c0             	movzx  eax,al
c001c1b8:	83 c4 10             	add    esp,0x10
c001c1bb:	83 c4 0c             	add    esp,0xc
c001c1be:	c3                   	ret    
c001c1bf:	83 ec 0c             	sub    esp,0xc
c001c1c2:	50                   	push   eax
c001c1c3:	e8 e2 5d ff ff       	call   c0011faa <getFromFileDescriptor(int)>
c001c1c8:	83 c4 10             	add    esp,0x10
c001c1cb:	85 c0                	test   eax,eax
c001c1cd:	75 dc                	jne    c001c1ab <sysCallIsATTY(regs*)+0x28>
c001c1cf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c1d4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c1d9:	83 c4 0c             	add    esp,0xc
c001c1dc:	c3                   	ret    

c001c1dd <sysCallUSleep(regs*)>:
c001c1dd:	83 ec 14             	sub    esp,0x14
c001c1e0:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c1e5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c1e9:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c1f0:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c1f3:	01 ca                	add    edx,ecx
c001c1f5:	52                   	push   edx
c001c1f6:	50                   	push   eax
c001c1f7:	e8 06 26 00 00       	call   c001e802 <nanoSleep(unsigned long long)>
c001c1fc:	31 c0                	xor    eax,eax
c001c1fe:	31 d2                	xor    edx,edx
c001c200:	83 c4 1c             	add    esp,0x1c
c001c203:	c3                   	ret    

c001c204 <sysCallSpawn(regs*)>:
c001c204:	56                   	push   esi
c001c205:	53                   	push   ebx
c001c206:	53                   	push   ebx
c001c207:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c20b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001c20e:	85 f6                	test   esi,esi
c001c210:	75 08                	jne    c001c21a <sysCallSpawn(regs*)+0x16>
c001c212:	59                   	pop    ecx
c001c213:	31 c0                	xor    eax,eax
c001c215:	31 d2                	xor    edx,edx
c001c217:	5b                   	pop    ebx
c001c218:	5e                   	pop    esi
c001c219:	c3                   	ret    
c001c21a:	83 ec 0c             	sub    esp,0xc
c001c21d:	68 3f 07 00 00       	push   0x73f
c001c222:	e8 35 3d ff ff       	call   c000ff5c <malloc>
c001c227:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001c22a:	89 c6                	mov    esi,eax
c001c22c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c231:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c234:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c237:	56                   	push   esi
c001c238:	e8 b9 1a 00 00       	call   c001dcf6 <Process::Process(char const*, Process*, char**)>
c001c23d:	83 c4 20             	add    esp,0x20
c001c240:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c247:	75 c9                	jne    c001c212 <sysCallSpawn(regs*)+0xe>
c001c249:	83 ec 0c             	sub    esp,0xc
c001c24c:	56                   	push   esi
c001c24d:	e8 40 18 00 00       	call   c001da92 <Process::createUserThread()>
c001c252:	8b 06                	mov    eax,DWORD PTR [esi]
c001c254:	83 c4 10             	add    esp,0x10
c001c257:	99                   	cdq    
c001c258:	59                   	pop    ecx
c001c259:	5b                   	pop    ebx
c001c25a:	5e                   	pop    esi
c001c25b:	c3                   	ret    

c001c25c <sysCallGetEnv(regs*)>:
c001c25c:	57                   	push   edi
c001c25d:	56                   	push   esi
c001c25e:	53                   	push   ebx
c001c25f:	83 ec 1c             	sub    esp,0x1c
c001c262:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c266:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c26b:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001c26e:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001c271:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c274:	e8 9e e4 ff ff       	call   c001a717 <Krnl::getProcessTotalEnvCount(Process*)>
c001c279:	83 c4 10             	add    esp,0x10
c001c27c:	39 c7                	cmp    edi,eax
c001c27e:	7c 14                	jl     c001c294 <sysCallGetEnv(regs*)+0x38>
c001c280:	85 f6                	test   esi,esi
c001c282:	75 0b                	jne    c001c28f <sysCallGetEnv(regs*)+0x33>
c001c284:	83 c4 10             	add    esp,0x10
c001c287:	31 c0                	xor    eax,eax
c001c289:	5b                   	pop    ebx
c001c28a:	31 d2                	xor    edx,edx
c001c28c:	5e                   	pop    esi
c001c28d:	5f                   	pop    edi
c001c28e:	c3                   	ret    
c001c28f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001c292:	eb f0                	jmp    c001c284 <sysCallGetEnv(regs*)+0x28>
c001c294:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c298:	52                   	push   edx
c001c299:	57                   	push   edi
c001c29a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c2a0:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c2a3:	50                   	push   eax
c001c2a4:	e8 8e e4 ff ff       	call   c001a737 <Krnl::getProcessEnvPair(Process*, int)>
c001c2a9:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001c2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c2b0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c2b4:	83 c4 0c             	add    esp,0xc
c001c2b7:	85 c9                	test   ecx,ecx
c001c2b9:	75 23                	jne    c001c2de <sysCallGetEnv(regs*)+0x82>
c001c2bb:	83 ec 0c             	sub    esp,0xc
c001c2be:	50                   	push   eax
c001c2bf:	e8 1d 44 fe ff       	call   c00006e1 <strlen>
c001c2c4:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c2c7:	89 c3                	mov    ebx,eax
c001c2c9:	e8 13 44 fe ff       	call   c00006e1 <strlen>
c001c2ce:	83 c4 10             	add    esp,0x10
c001c2d1:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c2d5:	83 c4 10             	add    esp,0x10
c001c2d8:	31 d2                	xor    edx,edx
c001c2da:	5b                   	pop    ebx
c001c2db:	5e                   	pop    esi
c001c2dc:	5f                   	pop    edi
c001c2dd:	c3                   	ret    
c001c2de:	83 ec 08             	sub    esp,0x8
c001c2e1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001c2e4:	50                   	push   eax
c001c2e5:	56                   	push   esi
c001c2e6:	e8 78 44 fe ff       	call   c0000763 <strcpy>
c001c2eb:	58                   	pop    eax
c001c2ec:	5a                   	pop    edx
c001c2ed:	68 b1 e0 02 c0       	push   0xc002e0b1
c001c2f2:	56                   	push   esi
c001c2f3:	e8 22 45 fe ff       	call   c000081a <strcat>
c001c2f8:	59                   	pop    ecx
c001c2f9:	5b                   	pop    ebx
c001c2fa:	57                   	push   edi
c001c2fb:	56                   	push   esi
c001c2fc:	e8 19 45 fe ff       	call   c000081a <strcat>
c001c301:	83 c4 10             	add    esp,0x10
c001c304:	e9 7b ff ff ff       	jmp    c001c284 <sysCallGetEnv(regs*)+0x28>

c001c309 <sysAppSettings(regs*)>:
c001c309:	53                   	push   ebx
c001c30a:	83 ec 08             	sub    esp,0x8
c001c30d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c311:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c314:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c31a:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c31f:	66 3d c0 09          	cmp    ax,0x9c0
c001c323:	75 2f                	jne    c001c354 <sysAppSettings(regs*)+0x4b>
c001c325:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c32b:	83 e0 1f             	and    eax,0x1f
c001c32e:	3c 01                	cmp    al,0x1
c001c330:	74 2e                	je     c001c360 <sysAppSettings(regs*)+0x57>
c001c332:	3c 07                	cmp    al,0x7
c001c334:	0f 84 bd 00 00 00    	je     c001c3f7 <sysAppSettings(regs*)+0xee>
c001c33a:	84 c0                	test   al,al
c001c33c:	0f 84 dc 00 00 00    	je     c001c41e <sysAppSettings(regs*)+0x115>
c001c342:	3c 08                	cmp    al,0x8
c001c344:	74 6d                	je     c001c3b3 <sysAppSettings(regs*)+0xaa>
c001c346:	0f b6 c0             	movzx  eax,al
c001c349:	83 c4 08             	add    esp,0x8
c001c34c:	05 e8 03 00 00       	add    eax,0x3e8
c001c351:	5b                   	pop    ebx
c001c352:	99                   	cdq    
c001c353:	c3                   	ret    
c001c354:	b8 01 00 00 00       	mov    eax,0x1
c001c359:	31 d2                	xor    edx,edx
c001c35b:	83 c4 08             	add    esp,0x8
c001c35e:	5b                   	pop    ebx
c001c35f:	c3                   	ret    
c001c360:	51                   	push   ecx
c001c361:	68 00 01 00 00       	push   0x100
c001c366:	6a 00                	push   0x0
c001c368:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c36d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c370:	83 c0 0c             	add    eax,0xc
c001c373:	50                   	push   eax
c001c374:	e8 4b 43 fe ff       	call   c00006c4 <memset>
c001c379:	83 c4 0c             	add    esp,0xc
c001c37c:	68 ff 00 00 00       	push   0xff
c001c381:	53                   	push   ebx
c001c382:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c387:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c38a:	83 c0 0c             	add    eax,0xc
c001c38d:	50                   	push   eax
c001c38e:	e8 0d 43 fe ff       	call   c00006a0 <memcpy>
c001c393:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c398:	5b                   	pop    ebx
c001c399:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c39c:	5a                   	pop    edx
c001c39d:	8d 50 0c             	lea    edx,[eax+0xc]
c001c3a0:	52                   	push   edx
c001c3a1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c3a7:	e8 bc 50 ff ff       	call   c0011468 <VgaText::setTitle(char*)>
c001c3ac:	83 c4 10             	add    esp,0x10
c001c3af:	31 c0                	xor    eax,eax
c001c3b1:	eb a6                	jmp    c001c359 <sysAppSettings(regs*)+0x50>
c001c3b3:	83 ec 08             	sub    esp,0x8
c001c3b6:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c3bc:	83 e0 0f             	and    eax,0xf
c001c3bf:	50                   	push   eax
c001c3c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c3c5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c3c8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c3ce:	e8 81 50 ff ff       	call   c0011454 <VgaText::setTitleColour(VgaColour)>
c001c3d3:	58                   	pop    eax
c001c3d4:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c3da:	5a                   	pop    edx
c001c3db:	c1 e8 04             	shr    eax,0x4
c001c3de:	83 e0 0f             	and    eax,0xf
c001c3e1:	50                   	push   eax
c001c3e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c3e7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c3ea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c3f0:	e8 4b 50 ff ff       	call   c0011440 <VgaText::setTitleTextColour(VgaColour)>
c001c3f5:	eb b5                	jmp    c001c3ac <sysAppSettings(regs*)+0xa3>
c001c3f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c3fc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c3ff:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c405:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c40b:	c0 e8 06             	shr    al,0x6
c001c40e:	83 e0 01             	and    eax,0x1
c001c411:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c417:	31 c0                	xor    eax,eax
c001c419:	e9 3b ff ff ff       	jmp    c001c359 <sysAppSettings(regs*)+0x50>
c001c41e:	b8 02 00 00 00       	mov    eax,0x2
c001c423:	e9 31 ff ff ff       	jmp    c001c359 <sysAppSettings(regs*)+0x50>

c001c428 <sysFormatDisk(regs*)>:
c001c428:	56                   	push   esi
c001c429:	53                   	push   ebx
c001c42a:	53                   	push   ebx
c001c42b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c42f:	8b 1d 08 15 03 c0    	mov    ebx,DWORD PTR ds:0xc0031508
c001c435:	eb 25                	jmp    c001c45c <sysFormatDisk(regs*)+0x34>
c001c437:	83 ec 0c             	sub    esp,0xc
c001c43a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001c43d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c43f:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001c442:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001c445:	50                   	push   eax
c001c446:	ff 34 85 60 19 03 c0 	push   DWORD PTR [eax*4-0x3ffce6a0]
c001c44d:	53                   	push   ebx
c001c44e:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001c451:	83 c4 20             	add    esp,0x20
c001c454:	83 f8 08             	cmp    eax,0x8
c001c457:	75 12                	jne    c001c46b <sysFormatDisk(regs*)+0x43>
c001c459:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001c45c:	85 db                	test   ebx,ebx
c001c45e:	75 d7                	jne    c001c437 <sysFormatDisk(regs*)+0xf>
c001c460:	59                   	pop    ecx
c001c461:	b8 03 00 00 00       	mov    eax,0x3
c001c466:	31 d2                	xor    edx,edx
c001c468:	5b                   	pop    ebx
c001c469:	5e                   	pop    esi
c001c46a:	c3                   	ret    
c001c46b:	85 c0                	test   eax,eax
c001c46d:	74 1b                	je     c001c48a <sysFormatDisk(regs*)+0x62>
c001c46f:	83 f8 09             	cmp    eax,0x9
c001c472:	74 0b                	je     c001c47f <sysFormatDisk(regs*)+0x57>
c001c474:	59                   	pop    ecx
c001c475:	b8 02 00 00 00       	mov    eax,0x2
c001c47a:	31 d2                	xor    edx,edx
c001c47c:	5b                   	pop    ebx
c001c47d:	5e                   	pop    esi
c001c47e:	c3                   	ret    
c001c47f:	59                   	pop    ecx
c001c480:	b8 01 00 00 00       	mov    eax,0x1
c001c485:	31 d2                	xor    edx,edx
c001c487:	5b                   	pop    ebx
c001c488:	5e                   	pop    esi
c001c489:	c3                   	ret    
c001c48a:	59                   	pop    ecx
c001c48b:	31 c0                	xor    eax,eax
c001c48d:	31 d2                	xor    edx,edx
c001c48f:	5b                   	pop    ebx
c001c490:	5e                   	pop    esi
c001c491:	c3                   	ret    

c001c492 <sysSetDiskVolumeLabel(regs*)>:
c001c492:	56                   	push   esi
c001c493:	53                   	push   ebx
c001c494:	53                   	push   ebx
c001c495:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c499:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001c49c:	83 f8 19             	cmp    eax,0x19
c001c49f:	77 29                	ja     c001c4ca <sysSetDiskVolumeLabel(regs*)+0x38>
c001c4a1:	8b 0c 85 60 19 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffce6a0]
c001c4a8:	85 c9                	test   ecx,ecx
c001c4aa:	74 1e                	je     c001c4ca <sysSetDiskVolumeLabel(regs*)+0x38>
c001c4ac:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001c4af:	85 d2                	test   edx,edx
c001c4b1:	74 17                	je     c001c4ca <sysSetDiskVolumeLabel(regs*)+0x38>
c001c4b3:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001c4b9:	8b 33                	mov    esi,DWORD PTR [ebx]
c001c4bb:	52                   	push   edx
c001c4bc:	50                   	push   eax
c001c4bd:	51                   	push   ecx
c001c4be:	53                   	push   ebx
c001c4bf:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001c4c2:	83 c4 10             	add    esp,0x10
c001c4c5:	99                   	cdq    
c001c4c6:	59                   	pop    ecx
c001c4c7:	5b                   	pop    ebx
c001c4c8:	5e                   	pop    esi
c001c4c9:	c3                   	ret    
c001c4ca:	59                   	pop    ecx
c001c4cb:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001c4d0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c4d5:	5b                   	pop    ebx
c001c4d6:	5e                   	pop    esi
c001c4d7:	c3                   	ret    

c001c4d8 <sysGetDiskVolumeLabel(regs*)>:
c001c4d8:	57                   	push   edi
c001c4d9:	56                   	push   esi
c001c4da:	53                   	push   ebx
c001c4db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4df:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c4e2:	83 fa 19             	cmp    edx,0x19
c001c4e5:	77 34                	ja     c001c51b <sysGetDiskVolumeLabel(regs*)+0x43>
c001c4e7:	8b 0c 95 60 19 03 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffce6a0]
c001c4ee:	85 c9                	test   ecx,ecx
c001c4f0:	74 29                	je     c001c51b <sysGetDiskVolumeLabel(regs*)+0x43>
c001c4f2:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c4f5:	85 db                	test   ebx,ebx
c001c4f7:	74 22                	je     c001c51b <sysGetDiskVolumeLabel(regs*)+0x43>
c001c4f9:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001c4fc:	85 c0                	test   eax,eax
c001c4fe:	74 1b                	je     c001c51b <sysGetDiskVolumeLabel(regs*)+0x43>
c001c500:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001c506:	83 ec 0c             	sub    esp,0xc
c001c509:	8b 3e                	mov    edi,DWORD PTR [esi]
c001c50b:	50                   	push   eax
c001c50c:	53                   	push   ebx
c001c50d:	52                   	push   edx
c001c50e:	51                   	push   ecx
c001c50f:	56                   	push   esi
c001c510:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001c513:	83 c4 20             	add    esp,0x20
c001c516:	99                   	cdq    
c001c517:	5b                   	pop    ebx
c001c518:	5e                   	pop    esi
c001c519:	5f                   	pop    edi
c001c51a:	c3                   	ret    
c001c51b:	5b                   	pop    ebx
c001c51c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001c521:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c526:	5e                   	pop    esi
c001c527:	5f                   	pop    edi
c001c528:	c3                   	ret    

c001c529 <sysSetFatAttrib(regs*)>:
c001c529:	57                   	push   edi
c001c52a:	56                   	push   esi
c001c52b:	53                   	push   ebx
c001c52c:	83 ec 1c             	sub    esp,0x1c
c001c52f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c533:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c536:	68 14 01 00 00       	push   0x114
c001c53b:	e8 1c 3a ff ff       	call   c000ff5c <malloc>
c001c540:	83 c4 0c             	add    esp,0xc
c001c543:	89 c3                	mov    ebx,eax
c001c545:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c54a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c54d:	57                   	push   edi
c001c54e:	53                   	push   ebx
c001c54f:	e8 9e 71 ff ff       	call   c00136f2 <File::File(char const*, Process*)>
c001c554:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c557:	83 c4 0c             	add    esp,0xc
c001c55a:	0f b6 d4             	movzx  edx,ah
c001c55d:	0f b6 c0             	movzx  eax,al
c001c560:	52                   	push   edx
c001c561:	50                   	push   eax
c001c562:	53                   	push   ebx
c001c563:	e8 fe 74 ff ff       	call   c0013a66 <File::chfatattr(unsigned char, unsigned char)>
c001c568:	83 c4 10             	add    esp,0x10
c001c56b:	85 db                	test   ebx,ebx
c001c56d:	74 14                	je     c001c583 <sysSetFatAttrib(regs*)+0x5a>
c001c56f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c573:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c575:	83 ec 0c             	sub    esp,0xc
c001c578:	53                   	push   ebx
c001c579:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c57c:	83 c4 10             	add    esp,0x10
c001c57f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c583:	85 c0                	test   eax,eax
c001c585:	0f 95 c0             	setne  al
c001c588:	31 d2                	xor    edx,edx
c001c58a:	0f b6 c0             	movzx  eax,al
c001c58d:	f7 d8                	neg    eax
c001c58f:	83 d2 00             	adc    edx,0x0
c001c592:	83 c4 10             	add    esp,0x10
c001c595:	f7 da                	neg    edx
c001c597:	5b                   	pop    ebx
c001c598:	5e                   	pop    esi
c001c599:	5f                   	pop    edi
c001c59a:	c3                   	ret    

c001c59b <sysPanic(regs*)>:
c001c59b:	83 ec 18             	sub    esp,0x18
c001c59e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c5a2:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c5a5:	e8 51 e2 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001c5aa:	c7 04 24 b3 e0 02 c0 	mov    DWORD PTR [esp],0xc002e0b3
c001c5b1:	e8 45 e2 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001c5b6:	b8 01 00 00 00       	mov    eax,0x1
c001c5bb:	31 d2                	xor    edx,edx
c001c5bd:	83 c4 1c             	add    esp,0x1c
c001c5c0:	c3                   	ret    

c001c5c1 <sysShutdown(regs*)>:
c001c5c1:	83 ec 0c             	sub    esp,0xc
c001c5c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5c8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c5cb:	85 c0                	test   eax,eax
c001c5cd:	74 18                	je     c001c5e7 <sysShutdown(regs*)+0x26>
c001c5cf:	83 f8 01             	cmp    eax,0x1
c001c5d2:	74 38                	je     c001c60c <sysShutdown(regs*)+0x4b>
c001c5d4:	83 f8 02             	cmp    eax,0x2
c001c5d7:	74 24                	je     c001c5fd <sysShutdown(regs*)+0x3c>
c001c5d9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c5de:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c5e3:	83 c4 0c             	add    esp,0xc
c001c5e6:	c3                   	ret    
c001c5e7:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c001c5ec:	8b 10                	mov    edx,DWORD PTR [eax]
c001c5ee:	6a 00                	push   0x0
c001c5f0:	6a 00                	push   0x0
c001c5f2:	6a 00                	push   0x0
c001c5f4:	50                   	push   eax
c001c5f5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001c5f8:	83 c4 10             	add    esp,0x10
c001c5fb:	eb dc                	jmp    c001c5d9 <sysShutdown(regs*)+0x18>
c001c5fd:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c001c602:	8b 10                	mov    edx,DWORD PTR [eax]
c001c604:	6a 00                	push   0x0
c001c606:	6a 00                	push   0x0
c001c608:	6a 01                	push   0x1
c001c60a:	eb e8                	jmp    c001c5f4 <sysShutdown(regs*)+0x33>
c001c60c:	a1 6c 3e 03 c0       	mov    eax,ds:0xc0033e6c
c001c611:	85 c0                	test   eax,eax
c001c613:	74 02                	je     c001c617 <sysShutdown(regs*)+0x56>
c001c615:	ff d0                	call   eax
c001c617:	31 c0                	xor    eax,eax
c001c619:	31 d2                	xor    edx,edx
c001c61b:	83 c4 0c             	add    esp,0xc
c001c61e:	c3                   	ret    

c001c61f <sysPipe(regs*)>:
c001c61f:	57                   	push   edi
c001c620:	56                   	push   esi
c001c621:	53                   	push   ebx
c001c622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c626:	83 ec 0c             	sub    esp,0xc
c001c629:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c62c:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c62f:	6a 20                	push   0x20
c001c631:	e8 26 39 ff ff       	call   c000ff5c <malloc>
c001c636:	89 c3                	mov    ebx,eax
c001c638:	58                   	pop    eax
c001c639:	5a                   	pop    edx
c001c63a:	68 00 50 00 00       	push   0x5000
c001c63f:	53                   	push   ebx
c001c640:	e8 3f 43 ff ff       	call   c0010984 <Pipe::Pipe(int)>
c001c645:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c648:	e8 55 59 ff ff       	call   c0011fa2 <UnixFile::getFileDescriptor()>
c001c64d:	89 07                	mov    DWORD PTR [edi],eax
c001c64f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c652:	e8 4b 59 ff ff       	call   c0011fa2 <UnixFile::getFileDescriptor()>
c001c657:	83 c4 10             	add    esp,0x10
c001c65a:	89 06                	mov    DWORD PTR [esi],eax
c001c65c:	31 d2                	xor    edx,edx
c001c65e:	5b                   	pop    ebx
c001c65f:	31 c0                	xor    eax,eax
c001c661:	5e                   	pop    esi
c001c662:	5f                   	pop    edi
c001c663:	c3                   	ret    

c001c664 <sysGetUnixTime(regs*)>:
c001c664:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c001c669:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c66f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c673:	e9 0e 7b ff ff       	jmp    c0014186 <Clock::timeInSecondsLocal()>

c001c678 <Sys::loadSyscalls()>:
c001c678:	c7 05 a0 3e 03 c0 2e b8 01 c0 	mov    DWORD PTR ds:0xc0033ea0,0xc001b82e
c001c682:	c7 05 a4 3e 03 c0 90 b4 01 c0 	mov    DWORD PTR ds:0xc0033ea4,0xc001b490
c001c68c:	c7 05 a8 3e 03 c0 e3 b5 01 c0 	mov    DWORD PTR ds:0xc0033ea8,0xc001b5e3
c001c696:	c7 05 ac 3e 03 c0 c6 b7 01 c0 	mov    DWORD PTR ds:0xc0033eac,0xc001b7c6
c001c6a0:	c7 05 b0 3e 03 c0 7b b5 01 c0 	mov    DWORD PTR ds:0xc0033eb0,0xc001b57b
c001c6aa:	c7 05 b4 3e 03 c0 c7 b4 01 c0 	mov    DWORD PTR ds:0xc0033eb4,0xc001b4c7
c001c6b4:	c7 05 b8 3e 03 c0 a8 b4 01 c0 	mov    DWORD PTR ds:0xc0033eb8,0xc001b4a8
c001c6be:	c7 05 bc 3e 03 c0 38 b6 01 c0 	mov    DWORD PTR ds:0xc0033ebc,0xc001b638
c001c6c8:	c7 05 c4 3e 03 c0 ef bc 01 c0 	mov    DWORD PTR ds:0xc0033ec4,0xc001bcef
c001c6d2:	c7 05 c0 3e 03 c0 b1 b8 01 c0 	mov    DWORD PTR ds:0xc0033ec0,0xc001b8b1
c001c6dc:	c7 05 c8 3e 03 c0 77 bd 01 c0 	mov    DWORD PTR ds:0xc0033ec8,0xc001bd77
c001c6e6:	c7 05 cc 3e 03 c0 ec bd 01 c0 	mov    DWORD PTR ds:0xc0033ecc,0xc001bdec
c001c6f0:	c7 05 d0 3e 03 c0 7a be 01 c0 	mov    DWORD PTR ds:0xc0033ed0,0xc001be7a
c001c6fa:	c7 05 d4 3e 03 c0 7f be 01 c0 	mov    DWORD PTR ds:0xc0033ed4,0xc001be7f
c001c704:	c7 05 d8 3e 03 c0 84 be 01 c0 	mov    DWORD PTR ds:0xc0033ed8,0xc001be84
c001c70e:	c7 05 dc 3e 03 c0 f4 be 01 c0 	mov    DWORD PTR ds:0xc0033edc,0xc001bef4
c001c718:	c7 05 e0 3e 03 c0 c6 ba 01 c0 	mov    DWORD PTR ds:0xc0033ee0,0xc001bac6
c001c722:	c7 05 e4 3e 03 c0 2f bb 01 c0 	mov    DWORD PTR ds:0xc0033ee4,0xc001bb2f
c001c72c:	c7 05 e8 3e 03 c0 6c bc 01 c0 	mov    DWORD PTR ds:0xc0033ee8,0xc001bc6c
c001c736:	c7 05 ec 3e 03 c0 5a bf 01 c0 	mov    DWORD PTR ds:0xc0033eec,0xc001bf5a
c001c740:	c7 05 f0 3e 03 c0 64 bf 01 c0 	mov    DWORD PTR ds:0xc0033ef0,0xc001bf64
c001c74a:	c7 05 f4 3e 03 c0 7e bf 01 c0 	mov    DWORD PTR ds:0xc0033ef4,0xc001bf7e
c001c754:	c7 05 f8 3e 03 c0 7e bf 01 c0 	mov    DWORD PTR ds:0xc0033ef8,0xc001bf7e
c001c75e:	c7 05 fc 3e 03 c0 99 bf 01 c0 	mov    DWORD PTR ds:0xc0033efc,0xc001bf99
c001c768:	c7 05 00 3f 03 c0 fd bf 01 c0 	mov    DWORD PTR ds:0xc0033f00,0xc001bffd
c001c772:	c7 05 04 3f 03 c0 61 c0 01 c0 	mov    DWORD PTR ds:0xc0033f04,0xc001c061
c001c77c:	c7 05 08 3f 03 c0 71 c0 01 c0 	mov    DWORD PTR ds:0xc0033f08,0xc001c071
c001c786:	c7 05 0c 3f 03 c0 bd c0 01 c0 	mov    DWORD PTR ds:0xc0033f0c,0xc001c0bd
c001c790:	c7 05 10 3f 03 c0 00 c1 01 c0 	mov    DWORD PTR ds:0xc0033f10,0xc001c100
c001c79a:	c7 05 14 3f 03 c0 83 c1 01 c0 	mov    DWORD PTR ds:0xc0033f14,0xc001c183
c001c7a4:	c7 05 18 3f 03 c0 dd c1 01 c0 	mov    DWORD PTR ds:0xc0033f18,0xc001c1dd
c001c7ae:	c7 05 1c 3f 03 c0 ac bb 01 c0 	mov    DWORD PTR ds:0xc0033f1c,0xc001bbac
c001c7b8:	c7 05 20 3f 03 c0 04 c2 01 c0 	mov    DWORD PTR ds:0xc0033f20,0xc001c204
c001c7c2:	c7 05 24 3f 03 c0 5c c2 01 c0 	mov    DWORD PTR ds:0xc0033f24,0xc001c25c
c001c7cc:	c7 05 28 3f 03 c0 09 c3 01 c0 	mov    DWORD PTR ds:0xc0033f28,0xc001c309
c001c7d6:	c7 05 2c 3f 03 c0 28 c4 01 c0 	mov    DWORD PTR ds:0xc0033f2c,0xc001c428
c001c7e0:	c7 05 30 3f 03 c0 92 c4 01 c0 	mov    DWORD PTR ds:0xc0033f30,0xc001c492
c001c7ea:	c7 05 34 3f 03 c0 d8 c4 01 c0 	mov    DWORD PTR ds:0xc0033f34,0xc001c4d8
c001c7f4:	c7 05 38 3f 03 c0 29 c5 01 c0 	mov    DWORD PTR ds:0xc0033f38,0xc001c529
c001c7fe:	c7 05 3c 3f 03 c0 9b c5 01 c0 	mov    DWORD PTR ds:0xc0033f3c,0xc001c59b
c001c808:	c7 05 40 3f 03 c0 c1 c5 01 c0 	mov    DWORD PTR ds:0xc0033f40,0xc001c5c1
c001c812:	c7 05 44 3f 03 c0 1f c6 01 c0 	mov    DWORD PTR ds:0xc0033f44,0xc001c61f
c001c81c:	c7 05 48 3f 03 c0 64 c6 01 c0 	mov    DWORD PTR ds:0xc0033f48,0xc001c664
c001c826:	c7 05 4c 3f 03 c0 d3 b4 01 c0 	mov    DWORD PTR ds:0xc0033f4c,0xc001b4d3
c001c830:	c7 05 50 3f 03 c0 54 b6 01 c0 	mov    DWORD PTR ds:0xc0033f50,0xc001b654
c001c83a:	c7 05 54 3f 03 c0 7c b7 01 c0 	mov    DWORD PTR ds:0xc0033f54,0xc001b77c
c001c844:	c7 05 58 3f 03 c0 5a b4 01 c0 	mov    DWORD PTR ds:0xc0033f58,0xc001b45a
c001c84e:	c3                   	ret    

c001c84f <Sys::systemCall(regs*, void*)>:
c001c84f:	53                   	push   ebx
c001c850:	83 ec 08             	sub    esp,0x8
c001c853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c857:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c85a:	83 f8 7f             	cmp    eax,0x7f
c001c85d:	77 16                	ja     c001c875 <Sys::systemCall(regs*, void*)+0x26>
c001c85f:	8b 14 85 a0 3e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcc160]
c001c866:	85 d2                	test   edx,edx
c001c868:	74 0b                	je     c001c875 <Sys::systemCall(regs*, void*)+0x26>
c001c86a:	83 ec 0c             	sub    esp,0xc
c001c86d:	53                   	push   ebx
c001c86e:	ff d2                	call   edx
c001c870:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c873:	eb 0d                	jmp    c001c882 <Sys::systemCall(regs*, void*)+0x33>
c001c875:	52                   	push   edx
c001c876:	52                   	push   edx
c001c877:	50                   	push   eax
c001c878:	68 c2 e0 02 c0       	push   0xc002e0c2
c001c87d:	e8 c4 69 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001c882:	83 c4 10             	add    esp,0x10
c001c885:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c88a:	31 d2                	xor    edx,edx
c001c88c:	83 c4 08             	add    esp,0x8
c001c88f:	5b                   	pop    ebx
c001c890:	c3                   	ret    

c001c891 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c891:	55                   	push   ebp
c001c892:	89 e5                	mov    ebp,esp
c001c894:	57                   	push   edi
c001c895:	56                   	push   esi
c001c896:	53                   	push   ebx
c001c897:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c89d:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001c8a0:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001c8a3:	85 c0                	test   eax,eax
c001c8a5:	0f 95 c1             	setne  cl
c001c8a8:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001c8ac:	0f 94 c2             	sete   dl
c001c8af:	84 d1                	test   cl,dl
c001c8b1:	74 26                	je     c001c8d9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001c8b3:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001c8ba:	74 1d                	je     c001c8d9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001c8bc:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001c8bf:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001c8c5:	89 d6                	mov    esi,edx
c001c8c7:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001c8cd:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001c8d3:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c8d6:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001c8d9:	83 ec 0c             	sub    esp,0xc
c001c8dc:	05 ff 0f 00 00       	add    eax,0xfff
c001c8e1:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001c8e4:	6a 01                	push   0x1
c001c8e6:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001c8ec:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001c8f2:	e8 58 59 ff ff       	call   c001224f <Virt::allocateKernelVirtualPages(int)>
c001c8f7:	83 c4 10             	add    esp,0x10
c001c8fa:	89 c6                	mov    esi,eax
c001c8fc:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001c902:	0f 86 21 01 00 00    	jbe    c001ca29 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001c908:	c1 eb 0c             	shr    ebx,0xc
c001c90b:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001c915:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001c91b:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001c91e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c921:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001c927:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001c92a:	29 d8                	sub    eax,ebx
c001c92c:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001c932:	0f 83 f4 00 00 00    	jae    c001ca2c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001c938:	83 ec 0c             	sub    esp,0xc
c001c93b:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001c941:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001c944:	3d 00 10 00 00       	cmp    eax,0x1000
c001c949:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001c94b:	52                   	push   edx
c001c94c:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001c952:	52                   	push   edx
c001c953:	76 05                	jbe    c001c95a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001c955:	b8 00 10 00 00       	mov    eax,0x1000
c001c95a:	31 d2                	xor    edx,edx
c001c95c:	52                   	push   edx
c001c95d:	50                   	push   eax
c001c95e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001c961:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c964:	83 c4 20             	add    esp,0x20
c001c967:	85 c0                	test   eax,eax
c001c969:	74 1f                	je     c001c98a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001c96b:	51                   	push   ecx
c001c96c:	51                   	push   ecx
c001c96d:	50                   	push   eax
c001c96e:	68 e8 e1 02 c0       	push   0xc002e1e8
c001c973:	e8 ce 68 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001c978:	89 34 24             	mov    DWORD PTR [esp],esi
c001c97b:	e8 e0 59 ff ff       	call   c0012360 <Virt::freeKernelVirtualPages(unsigned long)>
c001c980:	83 c4 10             	add    esp,0x10
c001c983:	31 c0                	xor    eax,eax
c001c985:	e9 7c 01 00 00       	jmp    c001cb06 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001c98a:	e8 17 17 00 00       	call   c001e0a6 <lockScheduler()>
c001c98f:	e8 65 3c ff ff       	call   c00105f9 <Phys::allocatePage()>
c001c994:	6a 07                	push   0x7
c001c996:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001c99c:	56                   	push   esi
c001c99d:	50                   	push   eax
c001c99e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c9a4:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001c9a7:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001c9ad:	e8 72 65 ff ff       	call   c0012f24 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c9b2:	83 c4 0c             	add    esp,0xc
c001c9b5:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001c9bb:	6a 00                	push   0x0
c001c9bd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c9c3:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001c9c6:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001c9cc:	e8 3b 64 ff ff       	call   c0012e0c <VAS::mapOtherVASIn(bool, VAS*)>
c001c9d1:	58                   	pop    eax
c001c9d2:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001c9d8:	5a                   	pop    edx
c001c9d9:	68 07 04 00 00       	push   0x407
c001c9de:	53                   	push   ebx
c001c9df:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c9e5:	50                   	push   eax
c001c9e6:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001c9ec:	6a 00                	push   0x0
c001c9ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9f3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9f6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9fc:	e8 35 64 ff ff       	call   c0012e36 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ca01:	83 c4 1c             	add    esp,0x1c
c001ca04:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001ca0a:	68 00 10 00 00       	push   0x1000
c001ca0f:	50                   	push   eax
c001ca10:	56                   	push   esi
c001ca11:	e8 8a 3c fe ff       	call   c00006a0 <memcpy>
c001ca16:	e8 8d 16 00 00       	call   c001e0a8 <unlockScheduler()>
c001ca1b:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001ca21:	83 c4 10             	add    esp,0x10
c001ca24:	e9 f5 fe ff ff       	jmp    c001c91e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001ca29:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001ca2c:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001ca36:	0f 86 bc 00 00 00    	jbe    c001caf8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001ca3c:	e8 65 16 00 00       	call   c001e0a6 <lockScheduler()>
c001ca41:	51                   	push   ecx
c001ca42:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001ca48:	6a 00                	push   0x0
c001ca4a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca4f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca52:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca58:	e8 af 63 ff ff       	call   c0012e0c <VAS::mapOtherVASIn(bool, VAS*)>
c001ca5d:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001ca63:	83 c4 10             	add    esp,0x10
c001ca66:	c1 e8 0c             	shr    eax,0xc
c001ca69:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001ca73:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001ca79:	e8 7b 3b ff ff       	call   c00105f9 <Phys::allocatePage()>
c001ca7e:	6a 07                	push   0x7
c001ca80:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001ca86:	56                   	push   esi
c001ca87:	50                   	push   eax
c001ca88:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ca8e:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001ca91:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001ca97:	e8 88 64 ff ff       	call   c0012f24 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ca9c:	58                   	pop    eax
c001ca9d:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001caa3:	5a                   	pop    edx
c001caa4:	68 07 04 00 00       	push   0x407
c001caa9:	53                   	push   ebx
c001caaa:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cab0:	50                   	push   eax
c001cab1:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001cab7:	6a 00                	push   0x0
c001cab9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cabe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cac1:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cac7:	e8 6a 63 ff ff       	call   c0012e36 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cacc:	83 c4 1c             	add    esp,0x1c
c001cacf:	68 00 10 00 00       	push   0x1000
c001cad4:	6a 00                	push   0x0
c001cad6:	56                   	push   esi
c001cad7:	e8 e8 3b fe ff       	call   c00006c4 <memset>
c001cadc:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001cae2:	83 c4 10             	add    esp,0x10
c001cae5:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001caeb:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001caf1:	77 86                	ja     c001ca79 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001caf3:	e8 b0 15 00 00       	call   c001e0a8 <unlockScheduler()>
c001caf8:	83 ec 0c             	sub    esp,0xc
c001cafb:	56                   	push   esi
c001cafc:	e8 5f 58 ff ff       	call   c0012360 <Virt::freeKernelVirtualPages(unsigned long)>
c001cb01:	83 c4 10             	add    esp,0x10
c001cb04:	b0 01                	mov    al,0x1
c001cb06:	8d 65 f4             	lea    esp,[ebp-0xc]
c001cb09:	5b                   	pop    ebx
c001cb0a:	5e                   	pop    esi
c001cb0b:	5f                   	pop    edi
c001cb0c:	5d                   	pop    ebp
c001cb0d:	c3                   	ret    

c001cb0e <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001cb0e:	55                   	push   ebp
c001cb0f:	57                   	push   edi
c001cb10:	56                   	push   esi
c001cb11:	53                   	push   ebx
c001cb12:	83 ec 48             	sub    esp,0x48
c001cb15:	68 14 01 00 00       	push   0x114
c001cb1a:	e8 3d 34 ff ff       	call   c000ff5c <malloc>
c001cb1f:	83 c4 0c             	add    esp,0xc
c001cb22:	89 c6                	mov    esi,eax
c001cb24:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001cb28:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001cb2c:	50                   	push   eax
c001cb2d:	e8 c0 6b ff ff       	call   c00136f2 <File::File(char const*, Process*)>
c001cb32:	58                   	pop    eax
c001cb33:	5a                   	pop    edx
c001cb34:	6a 01                	push   0x1
c001cb36:	56                   	push   esi
c001cb37:	e8 68 6c ff ff       	call   c00137a4 <File::open(FileOpenMode)>
c001cb3c:	83 c4 10             	add    esp,0x10
c001cb3f:	85 c0                	test   eax,eax
c001cb41:	0f 85 47 01 00 00    	jne    c001cc8e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb47:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001cb4f:	83 ec 0c             	sub    esp,0xc
c001cb52:	6a 34                	push   0x34
c001cb54:	e8 03 34 ff ff       	call   c000ff5c <malloc>
c001cb59:	89 c3                	mov    ebx,eax
c001cb5b:	58                   	pop    eax
c001cb5c:	8b 06                	mov    eax,DWORD PTR [esi]
c001cb5e:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001cb62:	57                   	push   edi
c001cb63:	53                   	push   ebx
c001cb64:	6a 00                	push   0x0
c001cb66:	6a 34                	push   0x34
c001cb68:	56                   	push   esi
c001cb69:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb6c:	83 c4 20             	add    esp,0x20
c001cb6f:	85 c0                	test   eax,eax
c001cb71:	0f 85 17 01 00 00    	jne    c001cc8e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb77:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cb7d:	0f 85 0b 01 00 00    	jne    c001cc8e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb83:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cb86:	85 c0                	test   eax,eax
c001cb88:	0f 84 00 01 00 00    	je     c001cc8e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb8e:	31 d2                	xor    edx,edx
c001cb90:	55                   	push   ebp
c001cb91:	52                   	push   edx
c001cb92:	50                   	push   eax
c001cb93:	56                   	push   esi
c001cb94:	e8 79 6d ff ff       	call   c0013912 <File::seek(unsigned long long)>
c001cb99:	83 c4 10             	add    esp,0x10
c001cb9c:	85 c0                	test   eax,eax
c001cb9e:	0f 85 ea 00 00 00    	jne    c001cc8e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cba4:	83 ec 0c             	sub    esp,0xc
c001cba7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cbaa:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cbae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cbb2:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cbb6:	0f af c2             	imul   eax,edx
c001cbb9:	50                   	push   eax
c001cbba:	e8 9d 33 ff ff       	call   c000ff5c <malloc>
c001cbbf:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cbc1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cbc5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cbc8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cbcc:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cbd0:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cbd4:	0f af c2             	imul   eax,edx
c001cbd7:	99                   	cdq    
c001cbd8:	52                   	push   edx
c001cbd9:	50                   	push   eax
c001cbda:	56                   	push   esi
c001cbdb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbde:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cbe1:	83 c4 20             	add    esp,0x20
c001cbe4:	85 c0                	test   eax,eax
c001cbe6:	0f 84 a2 00 00 00    	je     c001cc8e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbec:	31 d2                	xor    edx,edx
c001cbee:	51                   	push   ecx
c001cbef:	52                   	push   edx
c001cbf0:	50                   	push   eax
c001cbf1:	56                   	push   esi
c001cbf2:	e8 1b 6d ff ff       	call   c0013912 <File::seek(unsigned long long)>
c001cbf7:	83 c4 10             	add    esp,0x10
c001cbfa:	85 c0                	test   eax,eax
c001cbfc:	0f 85 8c 00 00 00    	jne    c001cc8e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cc02:	83 ec 0c             	sub    esp,0xc
c001cc05:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cc09:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cc0d:	31 ed                	xor    ebp,ebp
c001cc0f:	0f af c2             	imul   eax,edx
c001cc12:	50                   	push   eax
c001cc13:	e8 44 33 ff ff       	call   c000ff5c <malloc>
c001cc18:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cc1a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cc1e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cc21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc25:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cc29:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cc2d:	0f af c2             	imul   eax,edx
c001cc30:	99                   	cdq    
c001cc31:	52                   	push   edx
c001cc32:	50                   	push   eax
c001cc33:	56                   	push   esi
c001cc34:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc37:	83 c4 20             	add    esp,0x20
c001cc3a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cc42:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cc46:	0f 86 80 00 00 00    	jbe    c001cccc <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cc4c:	0f b7 fd             	movzx  edi,bp
c001cc4f:	c1 e7 05             	shl    edi,0x5
c001cc52:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cc56:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cc59:	75 6b                	jne    c001ccc6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc5b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cc5e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cc62:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cc65:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc69:	52                   	push   edx
c001cc6a:	31 d2                	xor    edx,edx
c001cc6c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cc6f:	52                   	push   edx
c001cc70:	50                   	push   eax
c001cc71:	56                   	push   esi
c001cc72:	e8 9b 6c ff ff       	call   c0013912 <File::seek(unsigned long long)>
c001cc77:	83 c4 10             	add    esp,0x10
c001cc7a:	85 c0                	test   eax,eax
c001cc7c:	74 17                	je     c001cc95 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cc7e:	83 ec 0c             	sub    esp,0xc
c001cc81:	68 13 e2 02 c0       	push   0xc002e213
c001cc86:	e8 bb 65 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001cc8b:	83 c4 10             	add    esp,0x10
c001cc8e:	31 c0                	xor    eax,eax
c001cc90:	e9 87 00 00 00       	jmp    c001cd1c <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cc95:	83 ec 0c             	sub    esp,0xc
c001cc98:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cc9b:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cc9e:	50                   	push   eax
c001cc9f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cca3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cca7:	56                   	push   esi
c001cca8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001ccac:	e8 e0 fb ff ff       	call   c001c891 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001ccb1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ccb5:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001ccb9:	83 c4 20             	add    esp,0x20
c001ccbc:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001ccc0:	73 04                	jae    c001ccc6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001ccc2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ccc6:	45                   	inc    ebp
c001ccc7:	e9 76 ff ff ff       	jmp    c001cc42 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cccc:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001ccd0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ccd4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ccd8:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001ccde:	83 ec 0c             	sub    esp,0xc
c001cce1:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cce7:	25 00 f0 ff ff       	and    eax,0xfffff000
c001ccec:	05 00 10 00 00       	add    eax,0x1000
c001ccf1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ccf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccf8:	e8 6f 32 ff ff       	call   c000ff6c <free>
c001ccfd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd00:	e8 67 32 ff ff       	call   c000ff6c <free>
c001cd05:	58                   	pop    eax
c001cd06:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd0a:	e8 5d 32 ff ff       	call   c000ff6c <free>
c001cd0f:	89 34 24             	mov    DWORD PTR [esp],esi
c001cd12:	e8 9b 6b ff ff       	call   c00138b2 <File::close()>
c001cd17:	83 c4 10             	add    esp,0x10
c001cd1a:	b0 01                	mov    al,0x1
c001cd1c:	83 c4 3c             	add    esp,0x3c
c001cd1f:	5b                   	pop    ebx
c001cd20:	5e                   	pop    esi
c001cd21:	5f                   	pop    edi
c001cd22:	5d                   	pop    ebp
c001cd23:	c3                   	ret    

c001cd24 <Thr::runtimeReferenceHelper()>:
c001cd24:	83 ec 18             	sub    esp,0x18
c001cd27:	68 1b e2 02 c0       	push   0xc002e21b
c001cd2c:	e8 15 65 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001cd31:	fa                   	cli    
c001cd32:	83 c4 10             	add    esp,0x10
c001cd35:	eb fe                	jmp    c001cd35 <Thr::runtimeReferenceHelper()+0x11>

c001cd37 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cd37:	57                   	push   edi
c001cd38:	56                   	push   esi
c001cd39:	53                   	push   ebx
c001cd3a:	31 db                	xor    ebx,ebx
c001cd3c:	39 1d a0 40 03 c0    	cmp    DWORD PTR ds:0xc00340a0,ebx
c001cd42:	7e 3c                	jle    c001cd80 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cd44:	8b 34 9d c0 40 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcbf40]
c001cd4b:	31 ff                	xor    edi,edi
c001cd4d:	39 3c 9d c0 41 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcbe40],edi
c001cd54:	7e 27                	jle    c001cd7d <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cd56:	50                   	push   eax
c001cd57:	50                   	push   eax
c001cd58:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd5c:	8b 06                	mov    eax,DWORD PTR [esi]
c001cd5e:	03 04 9d 40 41 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcbec0]
c001cd65:	50                   	push   eax
c001cd66:	e8 49 3a fe ff       	call   c00007b4 <strcmp>
c001cd6b:	83 c4 10             	add    esp,0x10
c001cd6e:	85 c0                	test   eax,eax
c001cd70:	75 05                	jne    c001cd77 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cd72:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cd75:	eb 0b                	jmp    c001cd82 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cd77:	83 c6 10             	add    esi,0x10
c001cd7a:	47                   	inc    edi
c001cd7b:	eb d0                	jmp    c001cd4d <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cd7d:	43                   	inc    ebx
c001cd7e:	eb bc                	jmp    c001cd3c <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cd80:	31 c0                	xor    eax,eax
c001cd82:	5b                   	pop    ebx
c001cd83:	5e                   	pop    esi
c001cd84:	5f                   	pop    edi
c001cd85:	c3                   	ret    

c001cd86 <Thr::loadKernelSymbolTable(char const*)>:
c001cd86:	55                   	push   ebp
c001cd87:	57                   	push   edi
c001cd88:	56                   	push   esi
c001cd89:	53                   	push   ebx
c001cd8a:	83 ec 68             	sub    esp,0x68
c001cd8d:	8b 35 48 48 03 c0    	mov    esi,DWORD PTR ds:0xc0034848
c001cd93:	68 14 01 00 00       	push   0x114
c001cd98:	e8 bf 31 ff ff       	call   c000ff5c <malloc>
c001cd9d:	83 c4 0c             	add    esp,0xc
c001cda0:	89 c3                	mov    ebx,eax
c001cda2:	56                   	push   esi
c001cda3:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cda7:	50                   	push   eax
c001cda8:	e8 45 69 ff ff       	call   c00136f2 <File::File(char const*, Process*)>
c001cdad:	5e                   	pop    esi
c001cdae:	5f                   	pop    edi
c001cdaf:	6a 01                	push   0x1
c001cdb1:	53                   	push   ebx
c001cdb2:	e8 ed 69 ff ff       	call   c00137a4 <File::open(FileOpenMode)>
c001cdb7:	83 c4 10             	add    esp,0x10
c001cdba:	85 c0                	test   eax,eax
c001cdbc:	74 17                	je     c001cdd5 <Thr::loadKernelSymbolTable(char const*)+0x4f>
c001cdbe:	83 ec 0c             	sub    esp,0xc
c001cdc1:	68 3d e2 02 c0       	push   0xc002e23d
c001cdc6:	e8 30 da ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001cdcb:	83 c4 10             	add    esp,0x10
c001cdce:	31 c0                	xor    eax,eax
c001cdd0:	e9 5d 02 00 00       	jmp    c001d032 <Thr::loadKernelSymbolTable(char const*)+0x2ac>
c001cdd5:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cddd:	83 ec 0c             	sub    esp,0xc
c001cde0:	6a 34                	push   0x34
c001cde2:	e8 75 31 ff ff       	call   c000ff5c <malloc>
c001cde7:	59                   	pop    ecx
c001cde8:	89 c7                	mov    edi,eax
c001cdea:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cdee:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cdf0:	56                   	push   esi
c001cdf1:	57                   	push   edi
c001cdf2:	6a 00                	push   0x0
c001cdf4:	6a 34                	push   0x34
c001cdf6:	53                   	push   ebx
c001cdf7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cdfa:	83 c4 20             	add    esp,0x20
c001cdfd:	85 c0                	test   eax,eax
c001cdff:	75 bd                	jne    c001cdbe <Thr::loadKernelSymbolTable(char const*)+0x38>
c001ce01:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001ce07:	75 b5                	jne    c001cdbe <Thr::loadKernelSymbolTable(char const*)+0x38>
c001ce09:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ce0c:	85 c0                	test   eax,eax
c001ce0e:	74 ae                	je     c001cdbe <Thr::loadKernelSymbolTable(char const*)+0x38>
c001ce10:	52                   	push   edx
c001ce11:	31 d2                	xor    edx,edx
c001ce13:	52                   	push   edx
c001ce14:	50                   	push   eax
c001ce15:	53                   	push   ebx
c001ce16:	e8 f7 6a ff ff       	call   c0013912 <File::seek(unsigned long long)>
c001ce1b:	83 c4 10             	add    esp,0x10
c001ce1e:	85 c0                	test   eax,eax
c001ce20:	75 9c                	jne    c001cdbe <Thr::loadKernelSymbolTable(char const*)+0x38>
c001ce22:	83 ec 0c             	sub    esp,0xc
c001ce25:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce29:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce2d:	31 ed                	xor    ebp,ebp
c001ce2f:	0f af c2             	imul   eax,edx
c001ce32:	50                   	push   eax
c001ce33:	e8 24 31 ff ff       	call   c000ff5c <malloc>
c001ce38:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001ce3a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce3e:	89 34 24             	mov    DWORD PTR [esp],esi
c001ce41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ce45:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce49:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce4d:	0f af c2             	imul   eax,edx
c001ce50:	99                   	cdq    
c001ce51:	52                   	push   edx
c001ce52:	50                   	push   eax
c001ce53:	53                   	push   ebx
c001ce54:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce57:	83 c4 20             	add    esp,0x20
c001ce5a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ce62:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ce6a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ce72:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ce7a:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001ce7e:	0f 86 aa 00 00 00    	jbe    c001cf2e <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001ce84:	0f b7 f5             	movzx  esi,bp
c001ce87:	6b f6 28             	imul   esi,esi,0x28
c001ce8a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ce8e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ce91:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce95:	50                   	push   eax
c001ce96:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ce9a:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001ce9e:	8b 16                	mov    edx,DWORD PTR [esi]
c001cea0:	6b c0 28             	imul   eax,eax,0x28
c001cea3:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cea7:	89 d0                	mov    eax,edx
c001cea9:	31 d2                	xor    edx,edx
c001ceab:	52                   	push   edx
c001ceac:	50                   	push   eax
c001cead:	53                   	push   ebx
c001ceae:	e8 5f 6a ff ff       	call   c0013912 <File::seek(unsigned long long)>
c001ceb3:	83 c4 0c             	add    esp,0xc
c001ceb6:	6a 20                	push   0x20
c001ceb8:	6a 00                	push   0x0
c001ceba:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cebe:	52                   	push   edx
c001cebf:	e8 00 38 fe ff       	call   c00006c4 <memset>
c001cec4:	58                   	pop    eax
c001cec5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cec7:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cecb:	51                   	push   ecx
c001cecc:	8d 54 24 40          	lea    edx,[esp+0x40]
c001ced0:	52                   	push   edx
c001ced1:	6a 00                	push   0x0
c001ced3:	6a 1f                	push   0x1f
c001ced5:	53                   	push   ebx
c001ced6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ced9:	83 c4 18             	add    esp,0x18
c001cedc:	68 54 e2 02 c0       	push   0xc002e254
c001cee1:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cee5:	52                   	push   edx
c001cee6:	e8 c9 38 fe ff       	call   c00007b4 <strcmp>
c001ceeb:	83 c4 10             	add    esp,0x10
c001ceee:	85 c0                	test   eax,eax
c001cef0:	75 0f                	jne    c001cf01 <Thr::loadKernelSymbolTable(char const*)+0x17b>
c001cef2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cef5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cef9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cefd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cf01:	50                   	push   eax
c001cf02:	50                   	push   eax
c001cf03:	68 5c e2 02 c0       	push   0xc002e25c
c001cf08:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cf0c:	50                   	push   eax
c001cf0d:	e8 a2 38 fe ff       	call   c00007b4 <strcmp>
c001cf12:	83 c4 10             	add    esp,0x10
c001cf15:	85 c0                	test   eax,eax
c001cf17:	75 0f                	jne    c001cf28 <Thr::loadKernelSymbolTable(char const*)+0x1a2>
c001cf19:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf1c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cf20:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cf28:	45                   	inc    ebp
c001cf29:	e9 4c ff ff ff       	jmp    c001ce7a <Thr::loadKernelSymbolTable(char const*)+0xf4>
c001cf2e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cf33:	75 10                	jne    c001cf45 <Thr::loadKernelSymbolTable(char const*)+0x1bf>
c001cf35:	83 ec 0c             	sub    esp,0xc
c001cf38:	68 64 e2 02 c0       	push   0xc002e264
c001cf3d:	e8 b9 d8 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001cf42:	83 c4 10             	add    esp,0x10
c001cf45:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cf4a:	75 10                	jne    c001cf5c <Thr::loadKernelSymbolTable(char const*)+0x1d6>
c001cf4c:	83 ec 0c             	sub    esp,0xc
c001cf4f:	68 64 e2 02 c0       	push   0xc002e264
c001cf54:	e8 a2 d8 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001cf59:	83 c4 10             	add    esp,0x10
c001cf5c:	31 d2                	xor    edx,edx
c001cf5e:	50                   	push   eax
c001cf5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf63:	52                   	push   edx
c001cf64:	50                   	push   eax
c001cf65:	53                   	push   ebx
c001cf66:	e8 a7 69 ff ff       	call   c0013912 <File::seek(unsigned long long)>
c001cf6b:	5a                   	pop    edx
c001cf6c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cf70:	e8 e7 2f ff ff       	call   c000ff5c <malloc>
c001cf75:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cf79:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cf7d:	31 c9                	xor    ecx,ecx
c001cf7f:	5e                   	pop    esi
c001cf80:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf82:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cf86:	55                   	push   ebp
c001cf87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf8b:	51                   	push   ecx
c001cf8c:	52                   	push   edx
c001cf8d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cf91:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cf95:	53                   	push   ebx
c001cf96:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf99:	83 c4 14             	add    esp,0x14
c001cf9c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cfa0:	e8 b7 2f ff ff       	call   c000ff5c <malloc>
c001cfa5:	89 c6                	mov    esi,eax
c001cfa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cfa9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cfac:	56                   	push   esi
c001cfad:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cfb1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cfb5:	51                   	push   ecx
c001cfb6:	52                   	push   edx
c001cfb7:	53                   	push   ebx
c001cfb8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cfbb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cfbf:	8b 15 a0 40 03 c0    	mov    edx,DWORD PTR ds:0xc00340a0
c001cfc5:	83 c4 1c             	add    esp,0x1c
c001cfc8:	c1 e8 04             	shr    eax,0x4
c001cfcb:	89 04 95 c0 41 03 c0 	mov    DWORD PTR [edx*4-0x3ffcbe40],eax
c001cfd2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cfd6:	31 d2                	xor    edx,edx
c001cfd8:	52                   	push   edx
c001cfd9:	50                   	push   eax
c001cfda:	53                   	push   ebx
c001cfdb:	e8 32 69 ff ff       	call   c0013912 <File::seek(unsigned long long)>
c001cfe0:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cfe2:	31 d2                	xor    edx,edx
c001cfe4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cfe7:	56                   	push   esi
c001cfe8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cfec:	52                   	push   edx
c001cfed:	50                   	push   eax
c001cfee:	53                   	push   ebx
c001cfef:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cff2:	83 c4 14             	add    esp,0x14
c001cff5:	53                   	push   ebx
c001cff6:	e8 b7 68 ff ff       	call   c00138b2 <File::close()>
c001cffb:	5d                   	pop    ebp
c001cffc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d000:	e8 67 2f ff ff       	call   c000ff6c <free>
c001d005:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d008:	e8 5f 2f ff ff       	call   c000ff6c <free>
c001d00d:	a1 a0 40 03 c0       	mov    eax,ds:0xc00340a0
c001d012:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d016:	8d 50 01             	lea    edx,[eax+0x1]
c001d019:	89 0c 85 c0 40 03 c0 	mov    DWORD PTR [eax*4-0x3ffcbf40],ecx
c001d020:	89 34 85 40 41 03 c0 	mov    DWORD PTR [eax*4-0x3ffcbec0],esi
c001d027:	89 15 a0 40 03 c0    	mov    DWORD PTR ds:0xc00340a0,edx
c001d02d:	83 c4 10             	add    esp,0x10
c001d030:	b0 01                	mov    al,0x1
c001d032:	83 c4 5c             	add    esp,0x5c
c001d035:	5b                   	pop    ebx
c001d036:	5e                   	pop    esi
c001d037:	5f                   	pop    edi
c001d038:	5d                   	pop    ebp
c001d039:	c3                   	ret    

c001d03a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001d03a:	55                   	push   ebp
c001d03b:	57                   	push   edi
c001d03c:	56                   	push   esi
c001d03d:	53                   	push   ebx
c001d03e:	81 ec 68 03 00 00    	sub    esp,0x368
c001d044:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d04b:	8b 1d 48 48 03 c0    	mov    ebx,DWORD PTR ds:0xc0034848
c001d051:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d055:	68 14 01 00 00       	push   0x114
c001d05a:	e8 fd 2e ff ff       	call   c000ff5c <malloc>
c001d05f:	83 c4 0c             	add    esp,0xc
c001d062:	89 c5                	mov    ebp,eax
c001d064:	53                   	push   ebx
c001d065:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d06c:	50                   	push   eax
c001d06d:	e8 80 66 ff ff       	call   c00136f2 <File::File(char const*, Process*)>
c001d072:	5e                   	pop    esi
c001d073:	5f                   	pop    edi
c001d074:	6a 01                	push   0x1
c001d076:	55                   	push   ebp
c001d077:	e8 28 67 ff ff       	call   c00137a4 <File::open(FileOpenMode)>
c001d07c:	83 c4 10             	add    esp,0x10
c001d07f:	85 c0                	test   eax,eax
c001d081:	0f 85 8d 06 00 00    	jne    c001d714 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d087:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d08f:	83 ec 0c             	sub    esp,0xc
c001d092:	6a 34                	push   0x34
c001d094:	e8 c3 2e ff ff       	call   c000ff5c <malloc>
c001d099:	5b                   	pop    ebx
c001d09a:	89 c7                	mov    edi,eax
c001d09c:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d0a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d0a3:	53                   	push   ebx
c001d0a4:	57                   	push   edi
c001d0a5:	6a 00                	push   0x0
c001d0a7:	6a 34                	push   0x34
c001d0a9:	55                   	push   ebp
c001d0aa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d0ad:	83 c4 20             	add    esp,0x20
c001d0b0:	85 c0                	test   eax,eax
c001d0b2:	0f 85 5c 06 00 00    	jne    c001d714 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0b8:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d0be:	0f 85 50 06 00 00    	jne    c001d714 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0c4:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d0c7:	85 c0                	test   eax,eax
c001d0c9:	0f 84 45 06 00 00    	je     c001d714 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0cf:	31 d2                	xor    edx,edx
c001d0d1:	51                   	push   ecx
c001d0d2:	52                   	push   edx
c001d0d3:	50                   	push   eax
c001d0d4:	55                   	push   ebp
c001d0d5:	e8 38 68 ff ff       	call   c0013912 <File::seek(unsigned long long)>
c001d0da:	83 c4 10             	add    esp,0x10
c001d0dd:	85 c0                	test   eax,eax
c001d0df:	0f 85 2f 06 00 00    	jne    c001d714 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0e5:	83 ec 0c             	sub    esp,0xc
c001d0e8:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d0eb:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d0ef:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d0f3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d0f7:	0f af c2             	imul   eax,edx
c001d0fa:	50                   	push   eax
c001d0fb:	e8 5c 2e ff ff       	call   c000ff5c <malloc>
c001d100:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d103:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d107:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d10a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d10e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d112:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d116:	0f af c2             	imul   eax,edx
c001d119:	99                   	cdq    
c001d11a:	52                   	push   edx
c001d11b:	50                   	push   eax
c001d11c:	55                   	push   ebp
c001d11d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d120:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d123:	83 c4 20             	add    esp,0x20
c001d126:	85 c0                	test   eax,eax
c001d128:	0f 84 e6 05 00 00    	je     c001d714 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d12e:	52                   	push   edx
c001d12f:	31 d2                	xor    edx,edx
c001d131:	52                   	push   edx
c001d132:	50                   	push   eax
c001d133:	55                   	push   ebp
c001d134:	e8 d9 67 ff ff       	call   c0013912 <File::seek(unsigned long long)>
c001d139:	83 c4 10             	add    esp,0x10
c001d13c:	85 c0                	test   eax,eax
c001d13e:	0f 85 d0 05 00 00    	jne    c001d714 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d144:	83 ec 0c             	sub    esp,0xc
c001d147:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d14b:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d14f:	31 f6                	xor    esi,esi
c001d151:	0f af c2             	imul   eax,edx
c001d154:	50                   	push   eax
c001d155:	e8 02 2e ff ff       	call   c000ff5c <malloc>
c001d15a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d15d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d161:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d164:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d168:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d16c:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d170:	0f af c2             	imul   eax,edx
c001d173:	99                   	cdq    
c001d174:	52                   	push   edx
c001d175:	50                   	push   eax
c001d176:	55                   	push   ebp
c001d177:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d17a:	83 c4 20             	add    esp,0x20
c001d17d:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d181:	0f 86 8a 00 00 00    	jbe    c001d211 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d187:	0f b7 de             	movzx  ebx,si
c001d18a:	c1 e3 05             	shl    ebx,0x5
c001d18d:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d191:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d194:	75 75                	jne    c001d20b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d196:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d199:	31 d2                	xor    edx,edx
c001d19b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d19f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d1a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1a6:	50                   	push   eax
c001d1a7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d1aa:	52                   	push   edx
c001d1ab:	50                   	push   eax
c001d1ac:	55                   	push   ebp
c001d1ad:	e8 60 67 ff ff       	call   c0013912 <File::seek(unsigned long long)>
c001d1b2:	83 c4 10             	add    esp,0x10
c001d1b5:	85 c0                	test   eax,eax
c001d1b7:	0f 85 57 05 00 00    	jne    c001d714 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d1bd:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d1c4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d1c7:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d1cb:	31 d2                	xor    edx,edx
c001d1cd:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d1d1:	83 ec 0c             	sub    esp,0xc
c001d1d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d1d8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d1df:	50                   	push   eax
c001d1e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d1e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1e8:	52                   	push   edx
c001d1e9:	50                   	push   eax
c001d1ea:	55                   	push   ebp
c001d1eb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d1ee:	83 c4 1c             	add    esp,0x1c
c001d1f1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d1f4:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d1f7:	50                   	push   eax
c001d1f8:	6a 00                	push   0x0
c001d1fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1fe:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d202:	50                   	push   eax
c001d203:	e8 bc 34 fe ff       	call   c00006c4 <memset>
c001d208:	83 c4 10             	add    esp,0x10
c001d20b:	46                   	inc    esi
c001d20c:	e9 6c ff ff ff       	jmp    c001d17d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d211:	53                   	push   ebx
c001d212:	31 db                	xor    ebx,ebx
c001d214:	68 00 01 00 00       	push   0x100
c001d219:	6a 00                	push   0x0
c001d21b:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d21f:	50                   	push   eax
c001d220:	e8 9f 34 fe ff       	call   c00006c4 <memset>
c001d225:	83 c4 0c             	add    esp,0xc
c001d228:	68 00 01 00 00       	push   0x100
c001d22d:	6a 00                	push   0x0
c001d22f:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d236:	50                   	push   eax
c001d237:	e8 88 34 fe ff       	call   c00006c4 <memset>
c001d23c:	83 c4 10             	add    esp,0x10
c001d23f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d247:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d24f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d257:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d25f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d267:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d26b:	0f 86 30 01 00 00    	jbe    c001d3a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d271:	0f b7 f3             	movzx  esi,bx
c001d274:	6b f6 28             	imul   esi,esi,0x28
c001d277:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d27b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d27e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d282:	52                   	push   edx
c001d283:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d287:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d28b:	8b 06                	mov    eax,DWORD PTR [esi]
c001d28d:	6b d2 28             	imul   edx,edx,0x28
c001d290:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d294:	31 d2                	xor    edx,edx
c001d296:	52                   	push   edx
c001d297:	50                   	push   eax
c001d298:	55                   	push   ebp
c001d299:	e8 74 66 ff ff       	call   c0013912 <File::seek(unsigned long long)>
c001d29e:	83 c4 0c             	add    esp,0xc
c001d2a1:	6a 20                	push   0x20
c001d2a3:	6a 00                	push   0x0
c001d2a5:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d2ac:	51                   	push   ecx
c001d2ad:	e8 12 34 fe ff       	call   c00006c4 <memset>
c001d2b2:	59                   	pop    ecx
c001d2b3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d2b6:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d2ba:	52                   	push   edx
c001d2bb:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d2c2:	51                   	push   ecx
c001d2c3:	6a 00                	push   0x0
c001d2c5:	6a 1f                	push   0x1f
c001d2c7:	55                   	push   ebp
c001d2c8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d2cb:	83 c4 1c             	add    esp,0x1c
c001d2ce:	6a 09                	push   0x9
c001d2d0:	68 7e e2 02 c0       	push   0xc002e27e
c001d2d5:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d2dc:	51                   	push   ecx
c001d2dd:	e8 5b 33 fe ff       	call   c000063d <memcmp>
c001d2e2:	83 c4 10             	add    esp,0x10
c001d2e5:	85 c0                	test   eax,eax
c001d2e7:	75 21                	jne    c001d30a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d2e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d2f1:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d2f5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d2f9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2fc:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d303:	89 d0                	mov    eax,edx
c001d305:	40                   	inc    eax
c001d306:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d30a:	50                   	push   eax
c001d30b:	6a 09                	push   0x9
c001d30d:	68 88 e2 02 c0       	push   0xc002e288
c001d312:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d319:	50                   	push   eax
c001d31a:	e8 1e 33 fe ff       	call   c000063d <memcmp>
c001d31f:	83 c4 10             	add    esp,0x10
c001d322:	85 c0                	test   eax,eax
c001d324:	75 21                	jne    c001d347 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d326:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d32a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d32e:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d332:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d336:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d339:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d340:	89 d0                	mov    eax,edx
c001d342:	40                   	inc    eax
c001d343:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d347:	50                   	push   eax
c001d348:	50                   	push   eax
c001d349:	68 54 e2 02 c0       	push   0xc002e254
c001d34e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d355:	50                   	push   eax
c001d356:	e8 59 34 fe ff       	call   c00007b4 <strcmp>
c001d35b:	83 c4 10             	add    esp,0x10
c001d35e:	85 c0                	test   eax,eax
c001d360:	75 0f                	jne    c001d371 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d362:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d365:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d369:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d36d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d371:	50                   	push   eax
c001d372:	50                   	push   eax
c001d373:	68 5c e2 02 c0       	push   0xc002e25c
c001d378:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d37f:	50                   	push   eax
c001d380:	e8 2f 34 fe ff       	call   c00007b4 <strcmp>
c001d385:	83 c4 10             	add    esp,0x10
c001d388:	85 c0                	test   eax,eax
c001d38a:	75 0f                	jne    c001d39b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d38c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d38f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d393:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d397:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d39b:	43                   	inc    ebx
c001d39c:	e9 c6 fe ff ff       	jmp    c001d267 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d3a1:	31 d2                	xor    edx,edx
c001d3a3:	50                   	push   eax
c001d3a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d3a8:	52                   	push   edx
c001d3a9:	50                   	push   eax
c001d3aa:	55                   	push   ebp
c001d3ab:	e8 62 65 ff ff       	call   c0013912 <File::seek(unsigned long long)>
c001d3b0:	58                   	pop    eax
c001d3b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d3b5:	e8 a2 2b ff ff       	call   c000ff5c <malloc>
c001d3ba:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3bd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d3c1:	31 d2                	xor    edx,edx
c001d3c3:	58                   	pop    eax
c001d3c4:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d3c8:	53                   	push   ebx
c001d3c9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d3cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3d1:	52                   	push   edx
c001d3d2:	50                   	push   eax
c001d3d3:	55                   	push   ebp
c001d3d4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3d7:	83 c4 14             	add    esp,0x14
c001d3da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d3de:	e8 79 2b ff ff       	call   c000ff5c <malloc>
c001d3e3:	31 d2                	xor    edx,edx
c001d3e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d3e9:	83 c4 0c             	add    esp,0xc
c001d3ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3f0:	52                   	push   edx
c001d3f1:	50                   	push   eax
c001d3f2:	55                   	push   ebp
c001d3f3:	e8 1a 65 ff ff       	call   c0013912 <File::seek(unsigned long long)>
c001d3f8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3fb:	31 d2                	xor    edx,edx
c001d3fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d400:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d404:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d408:	52                   	push   edx
c001d409:	50                   	push   eax
c001d40a:	55                   	push   ebp
c001d40b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d40e:	83 c4 20             	add    esp,0x20
c001d411:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d419:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d41d:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d421:	0f 84 f1 02 00 00    	je     c001d718 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d427:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d42e:	31 d2                	xor    edx,edx
c001d430:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d434:	c1 e8 03             	shr    eax,0x3
c001d437:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d43b:	51                   	push   ecx
c001d43c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d440:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d444:	52                   	push   edx
c001d445:	50                   	push   eax
c001d446:	55                   	push   ebp
c001d447:	e8 c6 64 ff ff       	call   c0013912 <File::seek(unsigned long long)>
c001d44c:	5b                   	pop    ebx
c001d44d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d451:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d458:	e8 ff 2a ff ff       	call   c000ff5c <malloc>
c001d45d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d460:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d464:	31 d2                	xor    edx,edx
c001d466:	5e                   	pop    esi
c001d467:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d46b:	50                   	push   eax
c001d46c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d470:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d474:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d47b:	52                   	push   edx
c001d47c:	50                   	push   eax
c001d47d:	55                   	push   ebp
c001d47e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d481:	83 c4 20             	add    esp,0x20
c001d484:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d48c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d490:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d494:	0f 8d 62 02 00 00    	jge    c001d6fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d49a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d49e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4a2:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d4a7:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d4aa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d4ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4b2:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d4b6:	89 d8                	mov    eax,ebx
c001d4b8:	c1 e8 08             	shr    eax,0x8
c001d4bb:	89 c6                	mov    esi,eax
c001d4bd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d4c1:	c1 e6 04             	shl    esi,0x4
c001d4c4:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d4c8:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d4cb:	85 d2                	test   edx,edx
c001d4cd:	0f 85 bf 00 00 00    	jne    c001d592 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d4d3:	83 ec 0c             	sub    esp,0xc
c001d4d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d4da:	03 06                	add    eax,DWORD PTR [esi]
c001d4dc:	50                   	push   eax
c001d4dd:	e8 55 f8 ff ff       	call   c001cd37 <Thr::getAddressOfKernelSymbol(char const*)>
c001d4e2:	83 c4 10             	add    esp,0x10
c001d4e5:	89 c2                	mov    edx,eax
c001d4e7:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d4ec:	85 c0                	test   eax,eax
c001d4ee:	0f 85 9e 00 00 00    	jne    c001d592 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d4f4:	83 ec 0c             	sub    esp,0xc
c001d4f7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d4fb:	03 06                	add    eax,DWORD PTR [esi]
c001d4fd:	50                   	push   eax
c001d4fe:	e8 0b 17 ff ff       	call   c000ec0e <Krnl::resolveCompatibilitySymbol(char*)>
c001d503:	83 c4 10             	add    esp,0x10
c001d506:	89 c2                	mov    edx,eax
c001d508:	85 c0                	test   eax,eax
c001d50a:	0f 85 82 00 00 00    	jne    c001d592 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d510:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d514:	50                   	push   eax
c001d515:	50                   	push   eax
c001d516:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d51a:	03 06                	add    eax,DWORD PTR [esi]
c001d51c:	50                   	push   eax
c001d51d:	68 92 e2 02 c0       	push   0xc002e292
c001d522:	e8 1f 5d ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001d527:	58                   	pop    eax
c001d528:	5a                   	pop    edx
c001d529:	68 ac e2 02 c0       	push   0xc002e2ac
c001d52e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d535:	50                   	push   eax
c001d536:	e8 28 32 fe ff       	call   c0000763 <strcpy>
c001d53b:	59                   	pop    ecx
c001d53c:	58                   	pop    eax
c001d53d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d541:	03 06                	add    eax,DWORD PTR [esi]
c001d543:	50                   	push   eax
c001d544:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d54b:	50                   	push   eax
c001d54c:	e8 c9 32 fe ff       	call   c000081a <strcat>
c001d551:	58                   	pop    eax
c001d552:	5a                   	pop    edx
c001d553:	68 42 e3 02 c0       	push   0xc002e342
c001d558:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d55f:	50                   	push   eax
c001d560:	e8 b5 32 fe ff       	call   c000081a <strcat>
c001d565:	83 c4 10             	add    esp,0x10
c001d568:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d56d:	0f 84 43 01 00 00    	je     c001d6b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d573:	83 ec 0c             	sub    esp,0xc
c001d576:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d57d:	50                   	push   eax
c001d57e:	e8 78 d2 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001d583:	83 c4 10             	add    esp,0x10
c001d586:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d58a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d58e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d592:	80 fb 01             	cmp    bl,0x1
c001d595:	75 7d                	jne    c001d614 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d597:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d59e:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d5a2:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d5a6:	01 ce                	add    esi,ecx
c001d5a8:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d5ae:	0f 94 c0             	sete   al
c001d5b1:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d5b7:	0f 94 c3             	sete   bl
c001d5ba:	09 c3                	or     ebx,eax
c001d5bc:	8b 06                	mov    eax,DWORD PTR [esi]
c001d5be:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d5c3:	74 36                	je     c001d5fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d5c5:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d5c8:	84 db                	test   bl,bl
c001d5ca:	75 0a                	jne    c001d5d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d5cc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5d0:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d5d4:	76 37                	jbe    c001d60d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5d6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d5da:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5df:	0f 84 d1 00 00 00    	je     c001d6b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d5e5:	83 ec 0c             	sub    esp,0xc
c001d5e8:	68 c3 e2 02 c0       	push   0xc002e2c3
c001d5ed:	e8 09 d2 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001d5f2:	83 c4 10             	add    esp,0x10
c001d5f5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d5f9:	eb 12                	jmp    c001d60d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5fb:	01 c1                	add    ecx,eax
c001d5fd:	84 db                	test   bl,bl
c001d5ff:	75 0c                	jne    c001d60d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d601:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d605:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d609:	77 02                	ja     c001d60d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d60b:	01 d1                	add    ecx,edx
c001d60d:	89 0e                	mov    DWORD PTR [esi],ecx
c001d60f:	e9 df 00 00 00       	jmp    c001d6f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d614:	80 fb 02             	cmp    bl,0x2
c001d617:	75 71                	jne    c001d68a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d619:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d620:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d624:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d628:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d62e:	74 15                	je     c001d645 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d630:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d636:	74 0d                	je     c001d645 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d638:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d63c:	83 e8 04             	sub    eax,0x4
c001d63f:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d643:	76 1f                	jbe    c001d664 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d645:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d649:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d64e:	74 66                	je     c001d6b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d650:	83 ec 0c             	sub    esp,0xc
c001d653:	68 df e2 02 c0       	push   0xc002e2df
c001d658:	e8 9e d1 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001d65d:	83 c4 10             	add    esp,0x10
c001d660:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d664:	8b 06                	mov    eax,DWORD PTR [esi]
c001d666:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d66b:	74 13                	je     c001d680 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d66d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d671:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d678:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d67c:	01 c8                	add    eax,ecx
c001d67e:	eb 04                	jmp    c001d684 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d680:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d684:	01 c2                	add    edx,eax
c001d686:	89 16                	mov    DWORD PTR [esi],edx
c001d688:	eb 69                	jmp    c001d6f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d68a:	0f b6 db             	movzx  ebx,bl
c001d68d:	50                   	push   eax
c001d68e:	50                   	push   eax
c001d68f:	53                   	push   ebx
c001d690:	68 fb e2 02 c0       	push   0xc002e2fb
c001d695:	e8 ac 5b ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001d69a:	83 c4 10             	add    esp,0x10
c001d69d:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d6a2:	74 12                	je     c001d6b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d6a4:	83 ec 0c             	sub    esp,0xc
c001d6a7:	68 06 e3 02 c0       	push   0xc002e306
c001d6ac:	e8 4a d1 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001d6b1:	83 c4 10             	add    esp,0x10
c001d6b4:	eb 3d                	jmp    c001d6f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d6b6:	83 ec 0c             	sub    esp,0xc
c001d6b9:	55                   	push   ebp
c001d6ba:	e8 f3 61 ff ff       	call   c00138b2 <File::close()>
c001d6bf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d6c2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d6c5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d6c8:	59                   	pop    ecx
c001d6c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d6cd:	e8 9a 28 ff ff       	call   c000ff6c <free>
c001d6d2:	5b                   	pop    ebx
c001d6d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d6d7:	e8 90 28 ff ff       	call   c000ff6c <free>
c001d6dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d6df:	e8 88 28 ff ff       	call   c000ff6c <free>
c001d6e4:	5e                   	pop    esi
c001d6e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6e9:	e8 7e 28 ff ff       	call   c000ff6c <free>
c001d6ee:	83 c4 10             	add    esp,0x10
c001d6f1:	eb 21                	jmp    c001d714 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d6f3:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d6f7:	e9 90 fd ff ff       	jmp    c001d48c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d6fc:	83 ec 0c             	sub    esp,0xc
c001d6ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d703:	e8 64 28 ff ff       	call   c000ff6c <free>
c001d708:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d70c:	83 c4 10             	add    esp,0x10
c001d70f:	e9 05 fd ff ff       	jmp    c001d419 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d714:	31 c0                	xor    eax,eax
c001d716:	eb 33                	jmp    c001d74b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d718:	83 ec 0c             	sub    esp,0xc
c001d71b:	55                   	push   ebp
c001d71c:	e8 91 61 ff ff       	call   c00138b2 <File::close()>
c001d721:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d724:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d727:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d72a:	58                   	pop    eax
c001d72b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d72f:	e8 38 28 ff ff       	call   c000ff6c <free>
c001d734:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d737:	e8 30 28 ff ff       	call   c000ff6c <free>
c001d73c:	5a                   	pop    edx
c001d73d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d741:	e8 26 28 ff ff       	call   c000ff6c <free>
c001d746:	83 c4 10             	add    esp,0x10
c001d749:	b0 01                	mov    al,0x1
c001d74b:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d751:	5b                   	pop    ebx
c001d752:	5e                   	pop    esi
c001d753:	5f                   	pop    edi
c001d754:	5d                   	pop    ebp
c001d755:	c3                   	ret    

c001d756 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d756:	56                   	push   esi
c001d757:	31 d2                	xor    edx,edx
c001d759:	53                   	push   ebx
c001d75a:	8b 1d 40 48 03 c0    	mov    ebx,DWORD PTR ds:0xc0034840
c001d760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d764:	39 d3                	cmp    ebx,edx
c001d766:	7e 1b                	jle    c001d783 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d768:	8b 04 95 40 44 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcbbc0]
c001d76f:	39 c8                	cmp    eax,ecx
c001d771:	77 0d                	ja     c001d780 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d773:	8b 34 95 40 46 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcb9c0]
c001d77a:	01 c6                	add    esi,eax
c001d77c:	39 ce                	cmp    esi,ecx
c001d77e:	77 05                	ja     c001d785 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d780:	42                   	inc    edx
c001d781:	eb e1                	jmp    c001d764 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d783:	31 c0                	xor    eax,eax
c001d785:	5b                   	pop    ebx
c001d786:	5e                   	pop    esi
c001d787:	c3                   	ret    

c001d788 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d788:	53                   	push   ebx
c001d789:	31 c0                	xor    eax,eax
c001d78b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d78f:	8b 1d 40 48 03 c0    	mov    ebx,DWORD PTR ds:0xc0034840
c001d795:	39 c3                	cmp    ebx,eax
c001d797:	7e 22                	jle    c001d7bb <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d799:	8b 14 85 40 44 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcbbc0]
c001d7a0:	39 ca                	cmp    edx,ecx
c001d7a2:	77 14                	ja     c001d7b8 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d7a4:	03 14 85 40 46 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcb9c0]
c001d7ab:	39 ca                	cmp    edx,ecx
c001d7ad:	76 09                	jbe    c001d7b8 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d7af:	8b 04 85 40 42 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcbdc0]
c001d7b6:	eb 05                	jmp    c001d7bd <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d7b8:	40                   	inc    eax
c001d7b9:	eb da                	jmp    c001d795 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d7bb:	31 c0                	xor    eax,eax
c001d7bd:	5b                   	pop    ebx
c001d7be:	c3                   	ret    

c001d7bf <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d7bf:	53                   	push   ebx
c001d7c0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d7c4:	53                   	push   ebx
c001d7c5:	e8 8c ff ff ff       	call   c001d756 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d7ca:	5a                   	pop    edx
c001d7cb:	31 d2                	xor    edx,edx
c001d7cd:	85 c0                	test   eax,eax
c001d7cf:	74 04                	je     c001d7d5 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d7d1:	89 da                	mov    edx,ebx
c001d7d3:	29 c2                	sub    edx,eax
c001d7d5:	89 d0                	mov    eax,edx
c001d7d7:	5b                   	pop    ebx
c001d7d8:	c3                   	ret    

c001d7d9 <Thr::loadDLL(char const*, bool)>:
c001d7d9:	55                   	push   ebp
c001d7da:	57                   	push   edi
c001d7db:	56                   	push   esi
c001d7dc:	53                   	push   ebx
c001d7dd:	81 ec 34 01 00 00    	sub    esp,0x134
c001d7e3:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d7ea:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d7f1:	56                   	push   esi
c001d7f2:	68 1e e3 02 c0       	push   0xc002e31e
c001d7f7:	e8 4a 5a ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001d7fc:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d803:	e8 54 27 ff ff       	call   c000ff5c <malloc>
c001d808:	83 c4 0c             	add    esp,0xc
c001d80b:	89 c3                	mov    ebx,eax
c001d80d:	ff 35 48 48 03 c0    	push   DWORD PTR ds:0xc0034848
c001d813:	56                   	push   esi
c001d814:	50                   	push   eax
c001d815:	e8 d8 5e ff ff       	call   c00136f2 <File::File(char const*, Process*)>
c001d81a:	83 c4 10             	add    esp,0x10
c001d81d:	85 db                	test   ebx,ebx
c001d81f:	75 3c                	jne    c001d85d <Thr::loadDLL(char const*, bool)+0x84>
c001d821:	89 e8                	mov    eax,ebp
c001d823:	84 c0                	test   al,al
c001d825:	0f 84 b0 01 00 00    	je     c001d9db <Thr::loadDLL(char const*, bool)+0x202>
c001d82b:	50                   	push   eax
c001d82c:	50                   	push   eax
c001d82d:	68 2f e3 02 c0       	push   0xc002e32f
c001d832:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d836:	57                   	push   edi
c001d837:	e8 27 2f fe ff       	call   c0000763 <strcpy>
c001d83c:	58                   	pop    eax
c001d83d:	5a                   	pop    edx
c001d83e:	56                   	push   esi
c001d83f:	57                   	push   edi
c001d840:	e8 d5 2f fe ff       	call   c000081a <strcat>
c001d845:	59                   	pop    ecx
c001d846:	58                   	pop    eax
c001d847:	68 42 e3 02 c0       	push   0xc002e342
c001d84c:	57                   	push   edi
c001d84d:	e8 c8 2f fe ff       	call   c000081a <strcat>
c001d852:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d855:	e8 a1 cf ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001d85a:	83 c4 10             	add    esp,0x10
c001d85d:	50                   	push   eax
c001d85e:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d862:	50                   	push   eax
c001d863:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d867:	50                   	push   eax
c001d868:	53                   	push   ebx
c001d869:	e8 92 62 ff ff       	call   c0013b00 <File::stat(unsigned long long*, bool*)>
c001d86e:	83 c4 10             	add    esp,0x10
c001d871:	85 db                	test   ebx,ebx
c001d873:	74 0c                	je     c001d881 <Thr::loadDLL(char const*, bool)+0xa8>
c001d875:	83 ec 0c             	sub    esp,0xc
c001d878:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d87a:	53                   	push   ebx
c001d87b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d87e:	83 c4 10             	add    esp,0x10
c001d881:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d886:	75 0a                	jne    c001d892 <Thr::loadDLL(char const*, bool)+0xb9>
c001d888:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d88c:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d890:	75 3c                	jne    c001d8ce <Thr::loadDLL(char const*, bool)+0xf5>
c001d892:	89 e8                	mov    eax,ebp
c001d894:	84 c0                	test   al,al
c001d896:	0f 84 3d 01 00 00    	je     c001d9d9 <Thr::loadDLL(char const*, bool)+0x200>
c001d89c:	50                   	push   eax
c001d89d:	50                   	push   eax
c001d89e:	68 2f e3 02 c0       	push   0xc002e32f
c001d8a3:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d8a7:	53                   	push   ebx
c001d8a8:	e8 b6 2e fe ff       	call   c0000763 <strcpy>
c001d8ad:	58                   	pop    eax
c001d8ae:	5a                   	pop    edx
c001d8af:	56                   	push   esi
c001d8b0:	53                   	push   ebx
c001d8b1:	e8 64 2f fe ff       	call   c000081a <strcat>
c001d8b6:	59                   	pop    ecx
c001d8b7:	5f                   	pop    edi
c001d8b8:	68 42 e3 02 c0       	push   0xc002e342
c001d8bd:	53                   	push   ebx
c001d8be:	e8 57 2f fe ff       	call   c000081a <strcat>
c001d8c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d8c6:	e8 30 cf ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001d8cb:	83 c4 10             	add    esp,0x10
c001d8ce:	e8 2f 4c ff ff       	call   c0012502 <Virt::getAKernelVAS()>
c001d8d3:	51                   	push   ecx
c001d8d4:	6a 03                	push   0x3
c001d8d6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d8da:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d8de:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d8e4:	83 d3 00             	adc    ebx,0x0
c001d8e7:	89 ca                	mov    edx,ecx
c001d8e9:	89 d1                	mov    ecx,edx
c001d8eb:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d8ef:	51                   	push   ecx
c001d8f0:	50                   	push   eax
c001d8f1:	e8 42 4d ff ff       	call   c0012638 <VAS::allocatePages(int, int)>
c001d8f6:	89 34 24             	mov    DWORD PTR [esp],esi
c001d8f9:	89 c3                	mov    ebx,eax
c001d8fb:	e8 e1 2d fe ff       	call   c00006e1 <strlen>
c001d900:	8b 3d 40 48 03 c0    	mov    edi,DWORD PTR ds:0xc0034840
c001d906:	40                   	inc    eax
c001d907:	89 04 24             	mov    DWORD PTR [esp],eax
c001d90a:	e8 4d 26 ff ff       	call   c000ff5c <malloc>
c001d90f:	89 04 bd 40 42 03 c0 	mov    DWORD PTR [edi*4-0x3ffcbdc0],eax
c001d916:	5f                   	pop    edi
c001d917:	58                   	pop    eax
c001d918:	a1 40 48 03 c0       	mov    eax,ds:0xc0034840
c001d91d:	56                   	push   esi
c001d91e:	ff 34 85 40 42 03 c0 	push   DWORD PTR [eax*4-0x3ffcbdc0]
c001d925:	e8 39 2e fe ff       	call   c0000763 <strcpy>
c001d92a:	a1 40 48 03 c0       	mov    eax,ds:0xc0034840
c001d92f:	8d 50 01             	lea    edx,[eax+0x1]
c001d932:	89 1c 85 40 44 03 c0 	mov    DWORD PTR [eax*4-0x3ffcbbc0],ebx
c001d939:	89 15 40 48 03 c0    	mov    DWORD PTR ds:0xc0034840,edx
c001d93f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d943:	83 c4 0c             	add    esp,0xc
c001d946:	89 14 85 40 46 03 c0 	mov    DWORD PTR [eax*4-0x3ffcb9c0],edx
c001d94d:	6a 01                	push   0x1
c001d94f:	53                   	push   ebx
c001d950:	56                   	push   esi
c001d951:	e8 e4 f6 ff ff       	call   c001d03a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d956:	83 c4 10             	add    esp,0x10
c001d959:	89 c7                	mov    edi,eax
c001d95b:	fe c8                	dec    al
c001d95d:	74 16                	je     c001d975 <Thr::loadDLL(char const*, bool)+0x19c>
c001d95f:	89 e8                	mov    eax,ebp
c001d961:	84 c0                	test   al,al
c001d963:	74 10                	je     c001d975 <Thr::loadDLL(char const*, bool)+0x19c>
c001d965:	83 ec 0c             	sub    esp,0xc
c001d968:	68 44 e3 02 c0       	push   0xc002e344
c001d96d:	e8 89 ce ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001d972:	83 c4 10             	add    esp,0x10
c001d975:	31 f6                	xor    esi,esi
c001d977:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d97b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d97f:	05 ff 0f 00 00       	add    eax,0xfff
c001d984:	83 d2 00             	adc    edx,0x0
c001d987:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d98b:	c1 ea 0c             	shr    edx,0xc
c001d98e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d992:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d996:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d99a:	ba 00 00 00 00       	mov    edx,0x0
c001d99f:	89 d0                	mov    eax,edx
c001d9a1:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d9a5:	73 2c                	jae    c001d9d3 <Thr::loadDLL(char const*, bool)+0x1fa>
c001d9a7:	e8 56 4b ff ff       	call   c0012502 <Virt::getAKernelVAS()>
c001d9ac:	89 f5                	mov    ebp,esi
c001d9ae:	c1 e5 0c             	shl    ebp,0xc
c001d9b1:	52                   	push   edx
c001d9b2:	01 dd                	add    ebp,ebx
c001d9b4:	52                   	push   edx
c001d9b5:	55                   	push   ebp
c001d9b6:	50                   	push   eax
c001d9b7:	e8 be 53 ff ff       	call   c0012d7a <VAS::getPageTableEntry(unsigned long)>
c001d9bc:	83 c4 10             	add    esp,0x10
c001d9bf:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d9c2:	75 0c                	jne    c001d9d0 <Thr::loadDLL(char const*, bool)+0x1f7>
c001d9c4:	83 ec 0c             	sub    esp,0xc
c001d9c7:	55                   	push   ebp
c001d9c8:	e8 a2 2b ff ff       	call   c001056f <Phys::freePage(unsigned long)>
c001d9cd:	83 c4 10             	add    esp,0x10
c001d9d0:	46                   	inc    esi
c001d9d1:	eb a4                	jmp    c001d977 <Thr::loadDLL(char const*, bool)+0x19e>
c001d9d3:	89 f8                	mov    eax,edi
c001d9d5:	84 c0                	test   al,al
c001d9d7:	75 02                	jne    c001d9db <Thr::loadDLL(char const*, bool)+0x202>
c001d9d9:	31 db                	xor    ebx,ebx
c001d9db:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d9e1:	89 d8                	mov    eax,ebx
c001d9e3:	5b                   	pop    ebx
c001d9e4:	5e                   	pop    esi
c001d9e5:	5f                   	pop    edi
c001d9e6:	5d                   	pop    ebp
c001d9e7:	c3                   	ret    

c001d9e8 <Thr::executeDLL(unsigned long, void*)>:
c001d9e8:	56                   	push   esi
c001d9e9:	53                   	push   ebx
c001d9ea:	51                   	push   ecx
c001d9eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d9ef:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d9f3:	85 db                	test   ebx,ebx
c001d9f5:	75 10                	jne    c001da07 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d9f7:	83 ec 0c             	sub    esp,0xc
c001d9fa:	68 63 e3 02 c0       	push   0xc002e363
c001d9ff:	e8 f7 cd ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001da04:	83 c4 10             	add    esp,0x10
c001da07:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001da0b:	89 d8                	mov    eax,ebx
c001da0d:	5a                   	pop    edx
c001da0e:	5b                   	pop    ebx
c001da0f:	5e                   	pop    esi
c001da10:	ff e0                	jmp    eax

c001da12 <changeTSS>:
c001da12:	83 ec 14             	sub    esp,0x14
c001da15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da1a:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001da1d:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001da22:	c1 e2 15             	shl    edx,0x15
c001da25:	29 d0                	sub    eax,edx
c001da27:	50                   	push   eax
c001da28:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c001da2d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001da33:	05 7c 11 00 00       	add    eax,0x117c
c001da38:	50                   	push   eax
c001da39:	e8 4e 41 ff ff       	call   c0011b8c <TSS::setESP(unsigned long)>
c001da3e:	83 c4 1c             	add    esp,0x1c
c001da41:	c3                   	ret    

c001da42 <switchToThread(ThreadControlBlock*)>:
c001da42:	53                   	push   ebx
c001da43:	83 ec 08             	sub    esp,0x8
c001da46:	a1 74 48 03 c0       	mov    eax,ds:0xc0034874
c001da4b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da4f:	85 c0                	test   eax,eax
c001da51:	75 30                	jne    c001da83 <switchToThread(ThreadControlBlock*)+0x41>
c001da53:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001da56:	3c ff                	cmp    al,0xff
c001da58:	74 25                	je     c001da7f <switchToThread(ThreadControlBlock*)+0x3d>
c001da5a:	0f b6 d0             	movzx  edx,al
c001da5d:	b8 84 03 00 00       	mov    eax,0x384
c001da62:	29 d0                	sub    eax,edx
c001da64:	c1 e0 10             	shl    eax,0x10
c001da67:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001da6a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001da6d:	e8 24 07 00 00       	call   c001e196 <updateTimeUsed()>
c001da72:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001da76:	83 c4 08             	add    esp,0x8
c001da79:	5b                   	pop    ebx
c001da7a:	e9 e3 28 fe ff       	jmp    c0000362 <switchToThreadASM>
c001da7f:	31 c0                	xor    eax,eax
c001da81:	eb e7                	jmp    c001da6a <switchToThread(ThreadControlBlock*)+0x28>
c001da83:	c7 05 78 48 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0034878,0x1
c001da8d:	83 c4 08             	add    esp,0x8
c001da90:	5b                   	pop    ebx
c001da91:	c3                   	ret    

c001da92 <Process::createUserThread()>:
c001da92:	83 ec 0c             	sub    esp,0xc
c001da95:	68 80 00 00 00       	push   0x80
c001da9a:	6a 00                	push   0x0
c001da9c:	68 e5 e0 01 c0       	push   0xc001e0e5
c001daa1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001daa5:	e8 04 00 00 00       	call   c001daae <Process::createThread(void (*)(void*), void*, int)>
c001daaa:	83 c4 1c             	add    esp,0x1c
c001daad:	c3                   	ret    

c001daae <Process::createThread(void (*)(void*), void*, int)>:
c001daae:	55                   	push   ebp
c001daaf:	31 c9                	xor    ecx,ecx
c001dab1:	57                   	push   edi
c001dab2:	56                   	push   esi
c001dab3:	53                   	push   ebx
c001dab4:	83 ec 1c             	sub    esp,0x1c
c001dab7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dabb:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001dac2:	89 f2                	mov    edx,esi
c001dac4:	0f b7 c2             	movzx  eax,dx
c001dac7:	83 e2 01             	and    edx,0x1
c001daca:	74 14                	je     c001dae0 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001dacc:	d1 f8                	sar    eax,1
c001dace:	41                   	inc    ecx
c001dacf:	89 c2                	mov    edx,eax
c001dad1:	83 f9 10             	cmp    ecx,0x10
c001dad4:	75 ee                	jne    c001dac4 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001dad6:	83 c4 1c             	add    esp,0x1c
c001dad9:	31 c0                	xor    eax,eax
c001dadb:	5b                   	pop    ebx
c001dadc:	5e                   	pop    esi
c001dadd:	5f                   	pop    edi
c001dade:	5d                   	pop    ebp
c001dadf:	c3                   	ret    
c001dae0:	83 ec 08             	sub    esp,0x8
c001dae3:	b8 01 00 00 00       	mov    eax,0x1
c001dae8:	d3 e0                	shl    eax,cl
c001daea:	09 c6                	or     esi,eax
c001daec:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001daf2:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001daf9:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001dafc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001daff:	01 ce                	add    esi,ecx
c001db01:	89 f0                	mov    eax,esi
c001db03:	c1 e0 05             	shl    eax,0x5
c001db06:	01 c6                	add    esi,eax
c001db08:	8d 04 33             	lea    eax,[ebx+esi*1]
c001db0b:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001db11:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001db17:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001db1b:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001db21:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001db27:	89 ca                	mov    edx,ecx
c001db29:	f7 da                	neg    edx
c001db2b:	c1 e2 15             	shl    edx,0x15
c001db2e:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001db34:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001db3a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001db3e:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001db48:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001db4e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001db52:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001db58:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001db62:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001db6c:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001db73:	50                   	push   eax
c001db74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001db78:	68 4c 48 03 c0       	push   0xc003484c
c001db7d:	e8 9e b0 00 00       	call   c0028c20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001db82:	83 c4 10             	add    esp,0x10
c001db85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001db89:	83 c4 1c             	add    esp,0x1c
c001db8c:	5b                   	pop    ebx
c001db8d:	5e                   	pop    esi
c001db8e:	5f                   	pop    edi
c001db8f:	5d                   	pop    ebp
c001db90:	c3                   	ret    
c001db91:	90                   	nop

c001db92 <Process::addArgs(char**)>:
c001db92:	57                   	push   edi
c001db93:	56                   	push   esi
c001db94:	53                   	push   ebx
c001db95:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001db99:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001db9d:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001dba7:	85 ff                	test   edi,edi
c001dba9:	74 3d                	je     c001dbe8 <Process::addArgs(char**)+0x56>
c001dbab:	8b 07                	mov    eax,DWORD PTR [edi]
c001dbad:	85 c0                	test   eax,eax
c001dbaf:	74 37                	je     c001dbe8 <Process::addArgs(char**)+0x56>
c001dbb1:	31 db                	xor    ebx,ebx
c001dbb3:	83 ec 0c             	sub    esp,0xc
c001dbb6:	50                   	push   eax
c001dbb7:	e8 25 2b fe ff       	call   c00006e1 <strlen>
c001dbbc:	40                   	inc    eax
c001dbbd:	89 04 24             	mov    DWORD PTR [esp],eax
c001dbc0:	e8 97 23 ff ff       	call   c000ff5c <malloc>
c001dbc5:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001dbcc:	5a                   	pop    edx
c001dbcd:	59                   	pop    ecx
c001dbce:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001dbd1:	43                   	inc    ebx
c001dbd2:	50                   	push   eax
c001dbd3:	e8 8b 2b fe ff       	call   c0000763 <strcpy>
c001dbd8:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001dbde:	83 c4 10             	add    esp,0x10
c001dbe1:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001dbe4:	85 c0                	test   eax,eax
c001dbe6:	75 cb                	jne    c001dbb3 <Process::addArgs(char**)+0x21>
c001dbe8:	5b                   	pop    ebx
c001dbe9:	5e                   	pop    esi
c001dbea:	5f                   	pop    edi
c001dbeb:	c3                   	ret    

c001dbec <setupMultitasking(void (*)())>:
c001dbec:	56                   	push   esi
c001dbed:	53                   	push   ebx
c001dbee:	53                   	push   ebx
c001dbef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dbf3:	eb 10                	jmp    c001dc05 <setupMultitasking(void (*)())+0x19>
c001dbf5:	83 ec 0c             	sub    esp,0xc
c001dbf8:	68 4c 48 03 c0       	push   0xc003484c
c001dbfd:	e8 70 af 00 00       	call   c0028b72 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dc02:	83 c4 10             	add    esp,0x10
c001dc05:	83 ec 0c             	sub    esp,0xc
c001dc08:	68 4c 48 03 c0       	push   0xc003484c
c001dc0d:	e8 44 af 00 00       	call   c0028b56 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dc12:	83 c4 10             	add    esp,0x10
c001dc15:	84 c0                	test   al,al
c001dc17:	74 dc                	je     c001dbf5 <setupMultitasking(void (*)())+0x9>
c001dc19:	83 ec 0c             	sub    esp,0xc
c001dc1c:	68 3f 07 00 00       	push   0x73f
c001dc21:	e8 36 23 ff ff       	call   c000ff5c <malloc>
c001dc26:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dc2d:	89 c3                	mov    ebx,eax
c001dc2f:	6a 00                	push   0x0
c001dc31:	68 30 e4 02 c0       	push   0xc002e430
c001dc36:	6a 01                	push   0x1
c001dc38:	50                   	push   eax
c001dc39:	e8 9c 02 00 00       	call   c001deda <Process::Process(bool, char const*, Process*, char**)>
c001dc3e:	83 c4 18             	add    esp,0x18
c001dc41:	89 1d 48 48 03 c0    	mov    DWORD PTR ds:0xc0034848,ebx
c001dc47:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001dc4d:	68 2c e5 02 c0       	push   0xc002e52c
c001dc52:	e8 ef 55 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001dc57:	58                   	pop    eax
c001dc58:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001dc5e:	e8 e0 2f ff ff       	call   c0010c43 <setActiveTerminal(VgaText*)>
c001dc63:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001dc6b:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001dc71:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001dc74:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001dc7e:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001dc84:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001dc8a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001dc94:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001dc9e:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001dca8:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001dcae:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001dcb4:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001dcbe:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001dcc4:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001dcce:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001dcd4:	5a                   	pop    edx
c001dcd5:	59                   	pop    ecx
c001dcd6:	68 37 e4 02 c0       	push   0xc002e437
c001dcdb:	50                   	push   eax
c001dcdc:	e8 82 2a fe ff       	call   c0000763 <strcpy>
c001dce1:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001dce8:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001dcec:	83 c4 14             	add    esp,0x14
c001dcef:	5b                   	pop    ebx
c001dcf0:	5e                   	pop    esi
c001dcf1:	e9 5e 26 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001dcf6 <Process::Process(char const*, Process*, char**)>:
c001dcf6:	56                   	push   esi
c001dcf7:	53                   	push   ebx
c001dcf8:	83 ec 14             	sub    esp,0x14
c001dcfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dcff:	05 0c 02 00 00       	add    eax,0x20c
c001dd04:	bb 07 00 00 00       	mov    ebx,0x7
c001dd09:	89 c6                	mov    esi,eax
c001dd0b:	85 db                	test   ebx,ebx
c001dd0d:	78 12                	js     c001dd21 <Process::Process(char const*, Process*, char**)+0x2b>
c001dd0f:	83 ec 0c             	sub    esp,0xc
c001dd12:	56                   	push   esi
c001dd13:	e8 78 b0 00 00       	call   c0028d90 <ThreadControlBlock::ThreadControlBlock()>
c001dd18:	83 c4 10             	add    esp,0x10
c001dd1b:	83 c6 63             	add    esi,0x63
c001dd1e:	4b                   	dec    ebx
c001dd1f:	eb ea                	jmp    c001dd0b <Process::Process(char const*, Process*, char**)+0x15>
c001dd21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd25:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dd2c:	83 ec 0c             	sub    esp,0xc
c001dd2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dd33:	e8 14 c9 ff ff       	call   c001a64c <Krnl::newProcessEnv(Process*)>
c001dd38:	83 c4 10             	add    esp,0x10
c001dd3b:	89 c2                	mov    edx,eax
c001dd3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd41:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dd47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd4b:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dd54:	a1 30 09 03 c0       	mov    eax,ds:0xc0030930
c001dd59:	8d 50 01             	lea    edx,[eax+0x1]
c001dd5c:	89 15 30 09 03 c0    	mov    DWORD PTR ds:0xc0030930,edx
c001dd62:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dd66:	89 02                	mov    DWORD PTR [edx],eax
c001dd68:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001dd70:	83 ec 0c             	sub    esp,0xc
c001dd73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dd77:	e8 e0 21 ff ff       	call   c000ff5c <malloc>
c001dd7c:	83 c4 10             	add    esp,0x10
c001dd7f:	89 c3                	mov    ebx,eax
c001dd81:	83 ec 08             	sub    esp,0x8
c001dd84:	6a 00                	push   0x0
c001dd86:	53                   	push   ebx
c001dd87:	e8 a0 4c ff ff       	call   c0012a2c <VAS::VAS(bool)>
c001dd8c:	83 c4 10             	add    esp,0x10
c001dd8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd93:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dd99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd9d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dda7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ddab:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ddaf:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001ddb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ddb9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ddbf:	85 c0                	test   eax,eax
c001ddc1:	74 42                	je     c001de05 <Process::Process(char const*, Process*, char**)+0x10f>
c001ddc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ddc7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ddcd:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ddd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ddd7:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dddd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dde1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dde7:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dded:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ddf1:	05 0c 01 00 00       	add    eax,0x10c
c001ddf6:	83 ec 08             	sub    esp,0x8
c001ddf9:	52                   	push   edx
c001ddfa:	50                   	push   eax
c001ddfb:	e8 63 29 fe ff       	call   c0000763 <strcpy>
c001de00:	83 c4 10             	add    esp,0x10
c001de03:	eb 63                	jmp    c001de68 <Process::Process(char const*, Process*, char**)+0x172>
c001de05:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001de0d:	83 ec 0c             	sub    esp,0xc
c001de10:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001de14:	e8 43 21 ff ff       	call   c000ff5c <malloc>
c001de19:	83 c4 10             	add    esp,0x10
c001de1c:	89 c3                	mov    ebx,eax
c001de1e:	83 ec 08             	sub    esp,0x8
c001de21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001de25:	53                   	push   ebx
c001de26:	e8 2b 3a ff ff       	call   c0011856 <VgaText::VgaText(char const*)>
c001de2b:	83 c4 10             	add    esp,0x10
c001de2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de32:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001de38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de3c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001de42:	83 ec 0c             	sub    esp,0xc
c001de45:	50                   	push   eax
c001de46:	e8 cb 2d ff ff       	call   c0010c16 <addToTerminalCycle(VgaText*)>
c001de4b:	83 c4 10             	add    esp,0x10
c001de4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de52:	05 0c 01 00 00       	add    eax,0x10c
c001de57:	83 ec 08             	sub    esp,0x8
c001de5a:	68 37 e4 02 c0       	push   0xc002e437
c001de5f:	50                   	push   eax
c001de60:	e8 fe 28 fe ff       	call   c0000763 <strcpy>
c001de65:	83 c4 10             	add    esp,0x10
c001de68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de6c:	83 c0 0c             	add    eax,0xc
c001de6f:	83 ec 08             	sub    esp,0x8
c001de72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001de76:	50                   	push   eax
c001de77:	e8 e7 28 fe ff       	call   c0000763 <strcpy>
c001de7c:	83 c4 10             	add    esp,0x10
c001de7f:	83 ec 08             	sub    esp,0x8
c001de82:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001de86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001de8a:	e8 03 fd ff ff       	call   c001db92 <Process::addArgs(char**)>
c001de8f:	83 c4 10             	add    esp,0x10
c001de92:	83 ec 08             	sub    esp,0x8
c001de95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001de99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001de9d:	e8 6c ec ff ff       	call   c001cb0e <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dea2:	83 c4 10             	add    esp,0x10
c001dea5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dea9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dead:	83 f0 01             	xor    eax,0x1
c001deb0:	88 c2                	mov    dl,al
c001deb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001deb6:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001debc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dec1:	83 ec 08             	sub    esp,0x8
c001dec4:	50                   	push   eax
c001dec5:	68 60 e5 02 c0       	push   0xc002e560
c001deca:	e8 77 53 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001decf:	83 c4 10             	add    esp,0x10
c001ded2:	90                   	nop
c001ded3:	83 c4 14             	add    esp,0x14
c001ded6:	5b                   	pop    ebx
c001ded7:	5e                   	pop    esi
c001ded8:	c3                   	ret    
c001ded9:	90                   	nop

c001deda <Process::Process(bool, char const*, Process*, char**)>:
c001deda:	56                   	push   esi
c001dedb:	53                   	push   ebx
c001dedc:	83 ec 24             	sub    esp,0x24
c001dedf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dee3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dee7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001deeb:	05 0c 02 00 00       	add    eax,0x20c
c001def0:	bb 07 00 00 00       	mov    ebx,0x7
c001def5:	89 c6                	mov    esi,eax
c001def7:	85 db                	test   ebx,ebx
c001def9:	78 12                	js     c001df0d <Process::Process(bool, char const*, Process*, char**)+0x33>
c001defb:	83 ec 0c             	sub    esp,0xc
c001defe:	56                   	push   esi
c001deff:	e8 8c ae 00 00       	call   c0028d90 <ThreadControlBlock::ThreadControlBlock()>
c001df04:	83 c4 10             	add    esp,0x10
c001df07:	83 c6 63             	add    esi,0x63
c001df0a:	4b                   	dec    ebx
c001df0b:	eb ea                	jmp    c001def7 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001df0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001df11:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001df18:	83 ec 0c             	sub    esp,0xc
c001df1b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001df1f:	e8 28 c7 ff ff       	call   c001a64c <Krnl::newProcessEnv(Process*)>
c001df24:	83 c4 10             	add    esp,0x10
c001df27:	89 c2                	mov    edx,eax
c001df29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001df2d:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001df33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001df37:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001df40:	a1 30 09 03 c0       	mov    eax,ds:0xc0030930
c001df45:	8d 50 01             	lea    edx,[eax+0x1]
c001df48:	89 15 30 09 03 c0    	mov    DWORD PTR ds:0xc0030930,edx
c001df4e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001df52:	89 02                	mov    DWORD PTR [edx],eax
c001df54:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001df5c:	83 ec 0c             	sub    esp,0xc
c001df5f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001df63:	e8 f4 1f ff ff       	call   c000ff5c <malloc>
c001df68:	83 c4 10             	add    esp,0x10
c001df6b:	89 c3                	mov    ebx,eax
c001df6d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001df72:	83 ec 08             	sub    esp,0x8
c001df75:	50                   	push   eax
c001df76:	53                   	push   ebx
c001df77:	e8 b0 4a ff ff       	call   c0012a2c <VAS::VAS(bool)>
c001df7c:	83 c4 10             	add    esp,0x10
c001df7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001df83:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001df89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001df8d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001df97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001df9b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001df9f:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dfa5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dfa9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dfaf:	85 c0                	test   eax,eax
c001dfb1:	74 42                	je     c001dff5 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dfb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dfb7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dfbd:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dfc3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dfc7:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dfcd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dfd1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dfd7:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dfdd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dfe1:	05 0c 01 00 00       	add    eax,0x10c
c001dfe6:	83 ec 08             	sub    esp,0x8
c001dfe9:	52                   	push   edx
c001dfea:	50                   	push   eax
c001dfeb:	e8 73 27 fe ff       	call   c0000763 <strcpy>
c001dff0:	83 c4 10             	add    esp,0x10
c001dff3:	eb 63                	jmp    c001e058 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dff5:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001dffd:	83 ec 0c             	sub    esp,0xc
c001e000:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e004:	e8 53 1f ff ff       	call   c000ff5c <malloc>
c001e009:	83 c4 10             	add    esp,0x10
c001e00c:	89 c3                	mov    ebx,eax
c001e00e:	83 ec 08             	sub    esp,0x8
c001e011:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e015:	53                   	push   ebx
c001e016:	e8 3b 38 ff ff       	call   c0011856 <VgaText::VgaText(char const*)>
c001e01b:	83 c4 10             	add    esp,0x10
c001e01e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e022:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001e028:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e02c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e032:	83 ec 0c             	sub    esp,0xc
c001e035:	50                   	push   eax
c001e036:	e8 db 2b ff ff       	call   c0010c16 <addToTerminalCycle(VgaText*)>
c001e03b:	83 c4 10             	add    esp,0x10
c001e03e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e042:	05 0c 01 00 00       	add    eax,0x10c
c001e047:	83 ec 08             	sub    esp,0x8
c001e04a:	68 37 e4 02 c0       	push   0xc002e437
c001e04f:	50                   	push   eax
c001e050:	e8 0e 27 fe ff       	call   c0000763 <strcpy>
c001e055:	83 c4 10             	add    esp,0x10
c001e058:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e05c:	83 c0 0c             	add    eax,0xc
c001e05f:	83 ec 08             	sub    esp,0x8
c001e062:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e066:	50                   	push   eax
c001e067:	e8 f7 26 fe ff       	call   c0000763 <strcpy>
c001e06c:	83 c4 10             	add    esp,0x10
c001e06f:	83 ec 08             	sub    esp,0x8
c001e072:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e076:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e07a:	e8 13 fb ff ff       	call   c001db92 <Process::addArgs(char**)>
c001e07f:	83 c4 10             	add    esp,0x10
c001e082:	90                   	nop
c001e083:	83 c4 24             	add    esp,0x24
c001e086:	5b                   	pop    ebx
c001e087:	5e                   	pop    esi
c001e088:	c3                   	ret    

c001e089 <disableIRQs()>:
c001e089:	fa                   	cli    
c001e08a:	ff 05 70 48 03 c0    	inc    DWORD PTR ds:0xc0034870
c001e090:	c3                   	ret    

c001e091 <getIRQNestingLevel()>:
c001e091:	a1 70 48 03 c0       	mov    eax,ds:0xc0034870
c001e096:	c3                   	ret    

c001e097 <enableIRQs()>:
c001e097:	a1 70 48 03 c0       	mov    eax,ds:0xc0034870
c001e09c:	48                   	dec    eax
c001e09d:	a3 70 48 03 c0       	mov    ds:0xc0034870,eax
c001e0a2:	75 01                	jne    c001e0a5 <enableIRQs()+0xe>
c001e0a4:	fb                   	sti    
c001e0a5:	c3                   	ret    

c001e0a6 <lockScheduler()>:
c001e0a6:	eb e1                	jmp    c001e089 <disableIRQs()>

c001e0a8 <unlockScheduler()>:
c001e0a8:	eb ed                	jmp    c001e097 <enableIRQs()>

c001e0aa <lockStuff()>:
c001e0aa:	e8 da ff ff ff       	call   c001e089 <disableIRQs()>
c001e0af:	ff 05 74 48 03 c0    	inc    DWORD PTR ds:0xc0034874
c001e0b5:	c3                   	ret    

c001e0b6 <unlockStuff()>:
c001e0b6:	a1 74 48 03 c0       	mov    eax,ds:0xc0034874
c001e0bb:	48                   	dec    eax
c001e0bc:	a3 74 48 03 c0       	mov    ds:0xc0034874,eax
c001e0c1:	75 09                	jne    c001e0cc <unlockStuff()+0x16>
c001e0c3:	a1 78 48 03 c0       	mov    eax,ds:0xc0034878
c001e0c8:	85 c0                	test   eax,eax
c001e0ca:	75 02                	jne    c001e0ce <unlockStuff()+0x18>
c001e0cc:	eb c9                	jmp    c001e097 <enableIRQs()>
c001e0ce:	83 ec 0c             	sub    esp,0xc
c001e0d1:	c7 05 78 48 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0034878,0x0
c001e0db:	e8 31 00 00 00       	call   c001e111 <schedule()>
c001e0e0:	83 c4 0c             	add    esp,0xc
c001e0e3:	eb b2                	jmp    c001e097 <enableIRQs()>

c001e0e5 <userModeEntryPoint(void*)>:
c001e0e5:	83 ec 0c             	sub    esp,0xc
c001e0e8:	e8 bb ff ff ff       	call   c001e0a8 <unlockScheduler()>
c001e0ed:	fb                   	sti    
c001e0ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0f3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e0f6:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001e0fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e100:	83 c4 0c             	add    esp,0xc
c001e103:	e9 22 22 fe ff       	jmp    c000032a <goToUsermode>

c001e108 <taskStartupFunction>:
c001e108:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e10d:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001e110:	c3                   	ret    

c001e111 <schedule()>:
c001e111:	a1 74 48 03 c0       	mov    eax,ds:0xc0034874
c001e116:	85 c0                	test   eax,eax
c001e118:	74 0b                	je     c001e125 <schedule()+0x14>
c001e11a:	c7 05 78 48 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0034878,0x1
c001e124:	c3                   	ret    
c001e125:	53                   	push   ebx
c001e126:	83 ec 14             	sub    esp,0x14
c001e129:	68 4c 48 03 c0       	push   0xc003484c
c001e12e:	e8 23 aa 00 00       	call   c0028b56 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e133:	83 c4 10             	add    esp,0x10
c001e136:	84 c0                	test   al,al
c001e138:	75 38                	jne    c001e172 <schedule()+0x61>
c001e13a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e13f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e142:	4a                   	dec    edx
c001e143:	74 32                	je     c001e177 <schedule()+0x66>
c001e145:	83 ec 0c             	sub    esp,0xc
c001e148:	68 4c 48 03 c0       	push   0xc003484c
c001e14d:	e8 fc a9 00 00       	call   c0028b4e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e152:	c7 04 24 4c 48 03 c0 	mov    DWORD PTR [esp],0xc003484c
c001e159:	89 c3                	mov    ebx,eax
c001e15b:	e8 12 aa 00 00       	call   c0028b72 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e160:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e167:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e16a:	e8 d3 f8 ff ff       	call   c001da42 <switchToThread(ThreadControlBlock*)>
c001e16f:	83 c4 10             	add    esp,0x10
c001e172:	83 c4 08             	add    esp,0x8
c001e175:	5b                   	pop    ebx
c001e176:	c3                   	ret    
c001e177:	83 ec 08             	sub    esp,0x8
c001e17a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e181:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e187:	68 4c 48 03 c0       	push   0xc003484c
c001e18c:	e8 8f aa 00 00       	call   c0028c20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e191:	83 c4 10             	add    esp,0x10
c001e194:	eb af                	jmp    c001e145 <schedule()+0x34>

c001e196 <updateTimeUsed()>:
c001e196:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c001e19b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e1a1:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001e1a8:	74 50                	je     c001e1fa <updateTimeUsed()+0x64>
c001e1aa:	57                   	push   edi
c001e1ab:	56                   	push   esi
c001e1ac:	53                   	push   ebx
c001e1ad:	0f 31                	rdtsc  
c001e1af:	89 c1                	mov    ecx,eax
c001e1b1:	a3 98 48 03 c0       	mov    ds:0xc0034898,eax
c001e1b6:	2b 0d a8 48 03 c0    	sub    ecx,DWORD PTR ds:0xc00348a8
c001e1bc:	89 d3                	mov    ebx,edx
c001e1be:	89 0d a0 48 03 c0    	mov    DWORD PTR ds:0xc00348a0,ecx
c001e1c4:	1b 1d ac 48 03 c0    	sbb    ebx,DWORD PTR ds:0xc00348ac
c001e1ca:	a3 a8 48 03 c0       	mov    ds:0xc00348a8,eax
c001e1cf:	89 1d a4 48 03 c0    	mov    DWORD PTR ds:0xc00348a4,ebx
c001e1d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1da:	89 15 9c 48 03 c0    	mov    DWORD PTR ds:0xc003489c,edx
c001e1e0:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001e1e3:	89 15 ac 48 03 c0    	mov    DWORD PTR ds:0xc00348ac,edx
c001e1e9:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001e1ec:	01 f1                	add    ecx,esi
c001e1ee:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001e1f1:	11 fb                	adc    ebx,edi
c001e1f3:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001e1f6:	5b                   	pop    ebx
c001e1f7:	5e                   	pop    esi
c001e1f8:	5f                   	pop    edi
c001e1f9:	c3                   	ret    
c001e1fa:	c3                   	ret    

c001e1fb <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e1fb:	55                   	push   ebp
c001e1fc:	57                   	push   edi
c001e1fd:	56                   	push   esi
c001e1fe:	53                   	push   ebx
c001e1ff:	83 ec 1c             	sub    esp,0x1c
c001e202:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e206:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e209:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e20f:	85 ff                	test   edi,edi
c001e211:	7e 20                	jle    c001e233 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e213:	31 f6                	xor    esi,esi
c001e215:	83 ec 0c             	sub    esp,0xc
c001e218:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e21f:	46                   	inc    esi
c001e220:	e8 47 1d ff ff       	call   c000ff6c <free>
c001e225:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e228:	83 c4 10             	add    esp,0x10
c001e22b:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e231:	7f e2                	jg     c001e215 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e233:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e23d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e242:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e245:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e248:	d3 c0                	rol    eax,cl
c001e24a:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e251:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e254:	89 f7                	mov    edi,esi
c001e256:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e25e:	0f 85 74 01 00 00    	jne    c001e3d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e264:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e26a:	85 ed                	test   ebp,ebp
c001e26c:	74 1b                	je     c001e289 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e26e:	83 ec 0c             	sub    esp,0xc
c001e271:	55                   	push   ebp
c001e272:	e8 f1 c2 ff ff       	call   c001a568 <EnvVarContainer::~EnvVarContainer()>
c001e277:	59                   	pop    ecx
c001e278:	5e                   	pop    esi
c001e279:	6a 0c                	push   0xc
c001e27b:	55                   	push   ebp
c001e27c:	e8 e5 4e ff ff       	call   c0013166 <operator delete(void*, unsigned long)>
c001e281:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e284:	83 c4 10             	add    esp,0x10
c001e287:	89 f7                	mov    edi,esi
c001e289:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e28f:	85 c0                	test   eax,eax
c001e291:	0f 84 aa 00 00 00    	je     c001e341 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e297:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e29a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e29e:	31 c9                	xor    ecx,ecx
c001e2a0:	eb 10                	jmp    c001e2b2 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e2a2:	41                   	inc    ecx
c001e2a3:	83 f9 10             	cmp    ecx,0x10
c001e2a6:	0f 84 95 00 00 00    	je     c001e341 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e2ac:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e2b2:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e2b9:	d3 fa                	sar    edx,cl
c001e2bb:	83 e2 01             	and    edx,0x1
c001e2be:	74 e2                	je     c001e2a2 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e2c0:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e2c3:	01 ca                	add    edx,ecx
c001e2c5:	89 d5                	mov    ebp,edx
c001e2c7:	c1 e5 05             	shl    ebp,0x5
c001e2ca:	01 ea                	add    edx,ebp
c001e2cc:	01 d0                	add    eax,edx
c001e2ce:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e2d4:	83 fd 07             	cmp    ebp,0x7
c001e2d7:	75 c9                	jne    c001e2a2 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e2d9:	05 40 02 00 00       	add    eax,0x240
c001e2de:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e2e1:	83 fd ff             	cmp    ebp,0xffffffff
c001e2e4:	0f 8c 08 01 00 00    	jl     c001e3f2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e2ea:	0f 84 b9 01 00 00    	je     c001e4a9 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e2f0:	85 ed                	test   ebp,ebp
c001e2f2:	0f 84 a0 01 00 00    	je     c001e498 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e2f8:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e2fa:	75 a6                	jne    c001e2a2 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e2fc:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e302:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e306:	01 d0                	add    eax,edx
c001e308:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e30c:	83 ec 0c             	sub    esp,0xc
c001e30f:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e315:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e318:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e31e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e325:	50                   	push   eax
c001e326:	e8 d1 03 00 00       	call   c001e6fc <unblockTask(ThreadControlBlock*)>
c001e32b:	83 c4 10             	add    esp,0x10
c001e32e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e331:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e335:	89 f7                	mov    edi,esi
c001e337:	41                   	inc    ecx
c001e338:	83 f9 10             	cmp    ecx,0x10
c001e33b:	0f 85 6b ff ff ff    	jne    c001e2ac <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e341:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e347:	85 c0                	test   eax,eax
c001e349:	74 5d                	je     c001e3a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e34b:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e351:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e357:	74 4f                	je     c001e3a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e359:	83 ec 0c             	sub    esp,0xc
c001e35c:	68 4c 48 03 c0       	push   0xc003484c
c001e361:	e8 e8 a7 00 00       	call   c0028b4e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e366:	c7 04 24 4c 48 03 c0 	mov    DWORD PTR [esp],0xc003484c
c001e36d:	89 c7                	mov    edi,eax
c001e36f:	e8 e2 a7 00 00       	call   c0028b56 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e374:	83 c4 10             	add    esp,0x10
c001e377:	84 c0                	test   al,al
c001e379:	0f 84 e4 00 00 00    	je     c001e463 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e37f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e382:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e388:	85 d2                	test   edx,edx
c001e38a:	74 0f                	je     c001e39b <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e38c:	83 ec 0c             	sub    esp,0xc
c001e38f:	8b 02                	mov    eax,DWORD PTR [edx]
c001e391:	52                   	push   edx
c001e392:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e395:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e398:	83 c4 10             	add    esp,0x10
c001e39b:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e3a5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e3a8:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e3ae:	85 db                	test   ebx,ebx
c001e3b0:	74 16                	je     c001e3c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e3b2:	83 ec 0c             	sub    esp,0xc
c001e3b5:	53                   	push   ebx
c001e3b6:	e8 c5 44 ff ff       	call   c0012880 <VAS::~VAS()>
c001e3bb:	58                   	pop    eax
c001e3bc:	5a                   	pop    edx
c001e3bd:	6a 10                	push   0x10
c001e3bf:	53                   	push   ebx
c001e3c0:	e8 a1 4d ff ff       	call   c0013166 <operator delete(void*, unsigned long)>
c001e3c5:	83 c4 10             	add    esp,0x10
c001e3c8:	83 ec 0c             	sub    esp,0xc
c001e3cb:	68 3b e4 02 c0       	push   0xc002e43b
c001e3d0:	e8 71 4e ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001e3d5:	83 c4 10             	add    esp,0x10
c001e3d8:	83 ec 08             	sub    esp,0x8
c001e3db:	68 3f 07 00 00       	push   0x73f
c001e3e0:	68 49 e4 02 c0       	push   0xc002e449
c001e3e5:	e8 5c 4e ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001e3ea:	83 c4 2c             	add    esp,0x2c
c001e3ed:	5b                   	pop    ebx
c001e3ee:	5e                   	pop    esi
c001e3ef:	5f                   	pop    edi
c001e3f0:	5d                   	pop    ebp
c001e3f1:	c3                   	ret    
c001e3f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e3f6:	83 ec 0c             	sub    esp,0xc
c001e3f9:	68 88 e5 02 c0       	push   0xc002e588
c001e3fe:	e8 f8 c3 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001e403:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e406:	83 c4 10             	add    esp,0x10
c001e409:	89 f7                	mov    edi,esi
c001e40b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e40f:	e9 8e fe ff ff       	jmp    c001e2a2 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e414:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e41a:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e420:	75 1c                	jne    c001e43e <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e422:	83 ec 0c             	sub    esp,0xc
c001e425:	68 f0 e5 02 c0       	push   0xc002e5f0
c001e42a:	e8 17 4e ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001e42f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e436:	e8 a0 02 00 00       	call   c001e6db <blockTask(TaskState)>
c001e43b:	83 c4 10             	add    esp,0x10
c001e43e:	83 ec 08             	sub    esp,0x8
c001e441:	56                   	push   esi
c001e442:	68 4c 48 03 c0       	push   0xc003484c
c001e447:	e8 d4 a7 00 00       	call   c0028c20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e44c:	c7 04 24 4c 48 03 c0 	mov    DWORD PTR [esp],0xc003484c
c001e453:	e8 f6 a6 00 00       	call   c0028b4e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e458:	83 c4 10             	add    esp,0x10
c001e45b:	39 f8                	cmp    eax,edi
c001e45d:	0f 84 1c ff ff ff    	je     c001e37f <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e463:	83 ec 0c             	sub    esp,0xc
c001e466:	68 4c 48 03 c0       	push   0xc003484c
c001e46b:	e8 de a6 00 00       	call   c0028b4e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e470:	c7 04 24 4c 48 03 c0 	mov    DWORD PTR [esp],0xc003484c
c001e477:	89 c6                	mov    esi,eax
c001e479:	e8 f4 a6 00 00       	call   c0028b72 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e47e:	83 c4 10             	add    esp,0x10
c001e481:	39 f3                	cmp    ebx,esi
c001e483:	74 b9                	je     c001e43e <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e485:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e488:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e48b:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e491:	75 ab                	jne    c001e43e <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e493:	e9 7c ff ff ff       	jmp    c001e414 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e498:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e49c:	83 ec 0c             	sub    esp,0xc
c001e49f:	68 bc e5 02 c0       	push   0xc002e5bc
c001e4a4:	e9 55 ff ff ff       	jmp    c001e3fe <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e4a9:	8b 36                	mov    esi,DWORD PTR [esi]
c001e4ab:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e4af:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e4b2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4b5:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e4bb:	01 d7                	add    edi,edx
c001e4bd:	89 f8                	mov    eax,edi
c001e4bf:	e9 44 fe ff ff       	jmp    c001e308 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e4c4 <waitTask(int, int*, int)>:
c001e4c4:	83 ec 18             	sub    esp,0x18
c001e4c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e4d0:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e4d3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e4d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4dc:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e4df:	6a 07                	push   0x7
c001e4e1:	e8 f5 01 00 00       	call   c001e6db <blockTask(TaskState)>
c001e4e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4eb:	83 c4 10             	add    esp,0x10
c001e4ee:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e4f1:	85 d2                	test   edx,edx
c001e4f3:	74 0a                	je     c001e4ff <waitTask(int, int*, int)+0x3b>
c001e4f5:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e4f8:	89 02                	mov    DWORD PTR [edx],eax
c001e4fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4ff:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e502:	83 c4 0c             	add    esp,0xc
c001e505:	c3                   	ret    

c001e506 <cleanerTaskFunction(void*)>:
c001e506:	53                   	push   ebx
c001e507:	83 ec 08             	sub    esp,0x8
c001e50a:	e8 99 fb ff ff       	call   c001e0a8 <unlockScheduler()>
c001e50f:	e8 92 fb ff ff       	call   c001e0a6 <lockScheduler()>
c001e514:	80 3d 90 48 03 c0 00 	cmp    BYTE PTR ds:0xc0034890,0x0
c001e51b:	0f 85 8e 00 00 00    	jne    c001e5af <cleanerTaskFunction(void*)+0xa9>
c001e521:	83 ec 0c             	sub    esp,0xc
c001e524:	6a 02                	push   0x2
c001e526:	e8 6e 01 00 00       	call   c001e699 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e52b:	83 c4 10             	add    esp,0x10
c001e52e:	c6 05 90 48 03 c0 00 	mov    BYTE PTR ds:0xc0034890,0x0
c001e535:	e8 70 fb ff ff       	call   c001e0aa <lockStuff()>
c001e53a:	e8 67 fb ff ff       	call   c001e0a6 <lockScheduler()>
c001e53f:	83 ec 0c             	sub    esp,0xc
c001e542:	68 64 48 03 c0       	push   0xc0034864
c001e547:	e8 0a a6 00 00       	call   c0028b56 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e54c:	83 c4 10             	add    esp,0x10
c001e54f:	84 c0                	test   al,al
c001e551:	75 40                	jne    c001e593 <cleanerTaskFunction(void*)+0x8d>
c001e553:	83 ec 0c             	sub    esp,0xc
c001e556:	68 64 48 03 c0       	push   0xc0034864
c001e55b:	e8 ee a5 00 00       	call   c0028b4e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e560:	c7 04 24 64 48 03 c0 	mov    DWORD PTR [esp],0xc0034864
c001e567:	89 c3                	mov    ebx,eax
c001e569:	e8 04 a6 00 00       	call   c0028b72 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e56e:	c7 04 24 5f e4 02 c0 	mov    DWORD PTR [esp],0xc002e45f
c001e575:	e8 cc 4c ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001e57a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e57d:	e8 79 fc ff ff       	call   c001e1fb <cleanupTerminatedTask(ThreadControlBlock*)>
c001e582:	c7 04 24 78 e4 02 c0 	mov    DWORD PTR [esp],0xc002e478
c001e589:	e8 b8 4c ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001e58e:	83 c4 10             	add    esp,0x10
c001e591:	eb ac                	jmp    c001e53f <cleanerTaskFunction(void*)+0x39>
c001e593:	e8 10 fb ff ff       	call   c001e0a8 <unlockScheduler()>
c001e598:	e8 19 fb ff ff       	call   c001e0b6 <unlockStuff()>
c001e59d:	e8 04 fb ff ff       	call   c001e0a6 <lockScheduler()>
c001e5a2:	80 3d 90 48 03 c0 00 	cmp    BYTE PTR ds:0xc0034890,0x0
c001e5a9:	0f 84 72 ff ff ff    	je     c001e521 <cleanerTaskFunction(void*)+0x1b>
c001e5af:	e8 f4 fa ff ff       	call   c001e0a8 <unlockScheduler()>
c001e5b4:	e9 75 ff ff ff       	jmp    c001e52e <cleanerTaskFunction(void*)+0x28>

c001e5b9 <terminateTask(int)>:
c001e5b9:	83 ec 14             	sub    esp,0x14
c001e5bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e5c1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e5c4:	83 c0 0c             	add    eax,0xc
c001e5c7:	50                   	push   eax
c001e5c8:	68 18 e6 02 c0       	push   0xc002e618
c001e5cd:	e8 74 4c ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001e5d2:	e8 d3 fa ff ff       	call   c001e0aa <lockStuff()>
c001e5d7:	e8 ca fa ff ff       	call   c001e0a6 <lockScheduler()>
c001e5dc:	c7 04 24 8b e4 02 c0 	mov    DWORD PTR [esp],0xc002e48b
c001e5e3:	e8 5e 4c ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001e5e8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e5ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e5f1:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e5f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e5f9:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e5fc:	5a                   	pop    edx
c001e5fd:	59                   	pop    ecx
c001e5fe:	50                   	push   eax
c001e5ff:	68 64 48 03 c0       	push   0xc0034864
c001e604:	e8 17 a6 00 00       	call   c0028c20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e609:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e60e:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e615:	c7 04 24 a5 e4 02 c0 	mov    DWORD PTR [esp],0xc002e4a5
c001e61c:	e8 25 4c ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001e621:	83 c4 10             	add    esp,0x10
c001e624:	a1 94 48 03 c0       	mov    eax,ds:0xc0034894
c001e629:	85 c0                	test   eax,eax
c001e62b:	74 5a                	je     c001e687 <terminateTask(int)+0xce>
c001e62d:	83 ec 0c             	sub    esp,0xc
c001e630:	68 bf e4 02 c0       	push   0xc002e4bf
c001e635:	e8 0c 4c ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001e63a:	58                   	pop    eax
c001e63b:	c6 05 90 48 03 c0 01 	mov    BYTE PTR ds:0xc0034890,0x1
c001e642:	ff 35 94 48 03 c0    	push   DWORD PTR ds:0xc0034894
c001e648:	e8 af 00 00 00       	call   c001e6fc <unblockTask(ThreadControlBlock*)>
c001e64d:	c7 04 24 d9 e4 02 c0 	mov    DWORD PTR [esp],0xc002e4d9
c001e654:	e8 ed 4b ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001e659:	83 c4 10             	add    esp,0x10
c001e65c:	e8 47 fa ff ff       	call   c001e0a8 <unlockScheduler()>
c001e661:	e8 50 fa ff ff       	call   c001e0b6 <unlockStuff()>
c001e666:	83 ec 0c             	sub    esp,0xc
c001e669:	68 11 e5 02 c0       	push   0xc002e511
c001e66e:	e8 d3 4b ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001e673:	83 c4 10             	add    esp,0x10
c001e676:	e8 2b fa ff ff       	call   c001e0a6 <lockScheduler()>
c001e67b:	e8 91 fa ff ff       	call   c001e111 <schedule()>
c001e680:	e8 23 fa ff ff       	call   c001e0a8 <unlockScheduler()>
c001e685:	eb ef                	jmp    c001e676 <terminateTask(int)+0xbd>
c001e687:	83 ec 0c             	sub    esp,0xc
c001e68a:	68 f3 e4 02 c0       	push   0xc002e4f3
c001e68f:	e8 b2 4b ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001e694:	83 c4 10             	add    esp,0x10
c001e697:	eb c3                	jmp    c001e65c <terminateTask(int)+0xa3>

c001e699 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e699:	83 ec 0c             	sub    esp,0xc
c001e69c:	e8 f0 f9 ff ff       	call   c001e091 <getIRQNestingLevel()>
c001e6a1:	83 ec 08             	sub    esp,0x8
c001e6a4:	50                   	push   eax
c001e6a5:	68 38 e6 02 c0       	push   0xc002e638
c001e6aa:	e8 97 4b ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001e6af:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e6b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6b8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e6bb:	e8 51 fa ff ff       	call   c001e111 <schedule()>
c001e6c0:	e8 e3 f9 ff ff       	call   c001e0a8 <unlockScheduler()>
c001e6c5:	e8 c7 f9 ff ff       	call   c001e091 <getIRQNestingLevel()>
c001e6ca:	5a                   	pop    edx
c001e6cb:	59                   	pop    ecx
c001e6cc:	50                   	push   eax
c001e6cd:	68 6c e6 02 c0       	push   0xc002e66c
c001e6d2:	e8 6f 4b ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001e6d7:	83 c4 1c             	add    esp,0x1c
c001e6da:	c3                   	ret    

c001e6db <blockTask(TaskState)>:
c001e6db:	83 ec 0c             	sub    esp,0xc
c001e6de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e6e2:	e8 bf f9 ff ff       	call   c001e0a6 <lockScheduler()>
c001e6e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6ec:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e6ef:	e8 1d fa ff ff       	call   c001e111 <schedule()>
c001e6f4:	83 c4 0c             	add    esp,0xc
c001e6f7:	e9 ac f9 ff ff       	jmp    c001e0a8 <unlockScheduler()>

c001e6fc <unblockTask(ThreadControlBlock*)>:
c001e6fc:	53                   	push   ebx
c001e6fd:	83 ec 08             	sub    esp,0x8
c001e700:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e704:	e8 9d f9 ff ff       	call   c001e0a6 <lockScheduler()>
c001e709:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e70c:	85 c0                	test   eax,eax
c001e70e:	74 5c                	je     c001e76c <unblockTask(ThreadControlBlock*)+0x70>
c001e710:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e713:	48                   	dec    eax
c001e714:	74 31                	je     c001e747 <unblockTask(ThreadControlBlock*)+0x4b>
c001e716:	83 ec 0c             	sub    esp,0xc
c001e719:	68 4c 48 03 c0       	push   0xc003484c
c001e71e:	e8 2b a4 00 00       	call   c0028b4e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e723:	83 c4 10             	add    esp,0x10
c001e726:	85 c0                	test   eax,eax
c001e728:	75 17                	jne    c001e741 <unblockTask(ThreadControlBlock*)+0x45>
c001e72a:	eb 65                	jmp    c001e791 <unblockTask(ThreadControlBlock*)+0x95>
c001e72c:	83 ec 08             	sub    esp,0x8
c001e72f:	50                   	push   eax
c001e730:	68 4c 48 03 c0       	push   0xc003484c
c001e735:	e8 ec a6 00 00       	call   c0028e26 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e73a:	83 c4 10             	add    esp,0x10
c001e73d:	85 c0                	test   eax,eax
c001e73f:	74 50                	je     c001e791 <unblockTask(ThreadControlBlock*)+0x95>
c001e741:	39 c3                	cmp    ebx,eax
c001e743:	75 e7                	jne    c001e72c <unblockTask(ThreadControlBlock*)+0x30>
c001e745:	eb 1c                	jmp    c001e763 <unblockTask(ThreadControlBlock*)+0x67>
c001e747:	83 ec 0c             	sub    esp,0xc
c001e74a:	68 5c e7 02 c0       	push   0xc002e75c
c001e74f:	e8 f2 4a ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001e754:	c7 04 24 e8 e6 02 c0 	mov    DWORD PTR [esp],0xc002e6e8
c001e75b:	e8 e6 4a ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001e760:	83 c4 10             	add    esp,0x10
c001e763:	83 c4 08             	add    esp,0x8
c001e766:	5b                   	pop    ebx
c001e767:	e9 3c f9 ff ff       	jmp    c001e0a8 <unlockScheduler()>
c001e76c:	83 ec 0c             	sub    esp,0xc
c001e76f:	68 a0 e6 02 c0       	push   0xc002e6a0
c001e774:	e8 cd 4a ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001e779:	c7 04 24 e8 e6 02 c0 	mov    DWORD PTR [esp],0xc002e6e8
c001e780:	e8 c1 4a ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001e785:	83 c4 10             	add    esp,0x10
c001e788:	83 c4 08             	add    esp,0x8
c001e78b:	5b                   	pop    ebx
c001e78c:	e9 17 f9 ff ff       	jmp    c001e0a8 <unlockScheduler()>
c001e791:	83 ec 08             	sub    esp,0x8
c001e794:	53                   	push   ebx
c001e795:	68 4c 48 03 c0       	push   0xc003484c
c001e79a:	e8 81 a4 00 00       	call   c0028c20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e79f:	83 c4 10             	add    esp,0x10
c001e7a2:	83 c4 08             	add    esp,0x8
c001e7a5:	5b                   	pop    ebx
c001e7a6:	e9 fd f8 ff ff       	jmp    c001e0a8 <unlockScheduler()>

c001e7ab <nanoSleepUntil(unsigned long long)>:
c001e7ab:	83 ec 0c             	sub    esp,0xc
c001e7ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7b2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e7b6:	3b 05 d8 19 03 c0    	cmp    eax,DWORD PTR ds:0xc00319d8
c001e7bc:	89 d1                	mov    ecx,edx
c001e7be:	1b 0d dc 19 03 c0    	sbb    ecx,DWORD PTR ds:0xc00319dc
c001e7c4:	73 04                	jae    c001e7ca <nanoSleepUntil(unsigned long long)+0x1f>
c001e7c6:	83 c4 0c             	add    esp,0xc
c001e7c9:	c3                   	ret    
c001e7ca:	e8 db f8 ff ff       	call   c001e0aa <lockStuff()>
c001e7cf:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e7d5:	83 ec 08             	sub    esp,0x8
c001e7d8:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e7db:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e7de:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e7e4:	68 58 48 03 c0       	push   0xc0034858
c001e7e9:	e8 32 a4 00 00       	call   c0028c20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e7ee:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e7f5:	e8 e1 fe ff ff       	call   c001e6db <blockTask(TaskState)>
c001e7fa:	83 c4 1c             	add    esp,0x1c
c001e7fd:	e9 b4 f8 ff ff       	jmp    c001e0b6 <unlockStuff()>

c001e802 <nanoSleep(unsigned long long)>:
c001e802:	a1 d8 19 03 c0       	mov    eax,ds:0xc00319d8
c001e807:	8b 15 dc 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319dc
c001e80d:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e811:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e815:	eb 94                	jmp    c001e7ab <nanoSleepUntil(unsigned long long)>

c001e817 <sleep(unsigned long long)>:
c001e817:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e81f:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e824:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e828:	01 ca                	add    edx,ecx
c001e82a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e82e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e832:	eb ce                	jmp    c001e802 <nanoSleep(unsigned long long)>

c001e834 <taskReturned>:
c001e834:	83 ec 18             	sub    esp,0x18
c001e837:	68 a0 e7 02 c0       	push   0xc002e7a0
c001e83c:	e8 ba bf ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001e841:	83 c4 10             	add    esp,0x10
c001e844:	83 ec 0c             	sub    esp,0xc
c001e847:	6a 02                	push   0x2
c001e849:	e8 8d fe ff ff       	call   c001e6db <blockTask(TaskState)>
c001e84e:	e8 53 f8 ff ff       	call   c001e0a6 <lockScheduler()>
c001e853:	e8 b9 f8 ff ff       	call   c001e111 <schedule()>
c001e858:	e8 4b f8 ff ff       	call   c001e0a8 <unlockScheduler()>
c001e85d:	83 c4 10             	add    esp,0x10
c001e860:	eb e2                	jmp    c001e844 <taskReturned+0x10>

c001e862 <Semaphore::Semaphore(int)>:
c001e862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e866:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e86a:	89 10                	mov    DWORD PTR [eax],edx
c001e86c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e870:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001e877:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e87b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e882:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e886:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e88d:	90                   	nop
c001e88e:	c3                   	ret    
c001e88f:	90                   	nop

c001e890 <Semaphore::tryAcquire()>:
c001e890:	83 ec 0c             	sub    esp,0xc
c001e893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e897:	e8 0e f8 ff ff       	call   c001e0aa <lockStuff()>
c001e89c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e89f:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e8a1:	7c 0b                	jl     c001e8ae <Semaphore::tryAcquire()+0x1e>
c001e8a3:	e8 0e f8 ff ff       	call   c001e0b6 <unlockStuff()>
c001e8a8:	31 c0                	xor    eax,eax
c001e8aa:	83 c4 0c             	add    esp,0xc
c001e8ad:	c3                   	ret    
c001e8ae:	42                   	inc    edx
c001e8af:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e8b2:	e8 ff f7 ff ff       	call   c001e0b6 <unlockStuff()>
c001e8b7:	b0 01                	mov    al,0x1
c001e8b9:	83 c4 0c             	add    esp,0xc
c001e8bc:	c3                   	ret    
c001e8bd:	90                   	nop

c001e8be <Semaphore::assertLocked(char const*)>:
c001e8be:	83 ec 0c             	sub    esp,0xc
c001e8c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8c5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e8c9:	e8 dc f7 ff ff       	call   c001e0aa <lockStuff()>
c001e8ce:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e8d0:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e8d3:	7c 08                	jl     c001e8dd <Semaphore::assertLocked(char const*)+0x1f>
c001e8d5:	83 c4 0c             	add    esp,0xc
c001e8d8:	e9 d9 f7 ff ff       	jmp    c001e0b6 <unlockStuff()>
c001e8dd:	83 ec 0c             	sub    esp,0xc
c001e8e0:	52                   	push   edx
c001e8e1:	e8 15 bf ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001e8e6:	83 c4 10             	add    esp,0x10
c001e8e9:	83 c4 0c             	add    esp,0xc
c001e8ec:	e9 c5 f7 ff ff       	jmp    c001e0b6 <unlockStuff()>
c001e8f1:	90                   	nop

c001e8f2 <Semaphore::acquire()>:
c001e8f2:	83 ec 0c             	sub    esp,0xc
c001e8f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8f9:	e8 ac f7 ff ff       	call   c001e0aa <lockStuff()>
c001e8fe:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e901:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e903:	7d 0c                	jge    c001e911 <Semaphore::acquire()+0x1f>
c001e905:	42                   	inc    edx
c001e906:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e909:	83 c4 0c             	add    esp,0xc
c001e90c:	e9 a5 f7 ff ff       	jmp    c001e0b6 <unlockStuff()>
c001e911:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e917:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e91e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e921:	85 d2                	test   edx,edx
c001e923:	74 2a                	je     c001e94f <Semaphore::acquire()+0x5d>
c001e925:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e928:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e92e:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e931:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e937:	83 ec 0c             	sub    esp,0xc
c001e93a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e93d:	6a 05                	push   0x5
c001e93f:	e8 97 fd ff ff       	call   c001e6db <blockTask(TaskState)>
c001e944:	83 c4 10             	add    esp,0x10
c001e947:	83 c4 0c             	add    esp,0xc
c001e94a:	e9 67 f7 ff ff       	jmp    c001e0b6 <unlockStuff()>
c001e94f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e955:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e958:	eb d7                	jmp    c001e931 <Semaphore::acquire()+0x3f>

c001e95a <Semaphore::release()>:
c001e95a:	83 ec 0c             	sub    esp,0xc
c001e95d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e961:	e8 44 f7 ff ff       	call   c001e0aa <lockStuff()>
c001e966:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e969:	85 d2                	test   edx,edx
c001e96b:	74 1a                	je     c001e987 <Semaphore::release()+0x2d>
c001e96d:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e970:	83 ec 0c             	sub    esp,0xc
c001e973:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e976:	52                   	push   edx
c001e977:	e8 80 fd ff ff       	call   c001e6fc <unblockTask(ThreadControlBlock*)>
c001e97c:	83 c4 10             	add    esp,0x10
c001e97f:	83 c4 0c             	add    esp,0xc
c001e982:	e9 2f f7 ff ff       	jmp    c001e0b6 <unlockStuff()>
c001e987:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e98a:	83 c4 0c             	add    esp,0xc
c001e98d:	e9 24 f7 ff ff       	jmp    c001e0b6 <unlockStuff()>

c001e992 <Mutex::Mutex()>:
c001e992:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e996:	6a 01                	push   0x1
c001e998:	50                   	push   eax
c001e999:	e8 c4 fe ff ff       	call   c001e862 <Semaphore::Semaphore(int)>
c001e99e:	83 c4 08             	add    esp,0x8
c001e9a1:	90                   	nop
c001e9a2:	c3                   	ret    

c001e9a3 <Thr::terminateFromIRQ(int)>:
c001e9a3:	83 ec 18             	sub    esp,0x18
c001e9a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9aa:	e8 0a fc ff ff       	call   c001e5b9 <terminateTask(int)>

c001e9af <__static_initialization_and_destruction_0(int, int)>:
c001e9af:	83 ec 0c             	sub    esp,0xc
c001e9b2:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e9b7:	0f 85 88 00 00 00    	jne    c001ea45 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e9bd:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e9c5:	75 7e                	jne    c001ea45 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e9c7:	83 ec 0c             	sub    esp,0xc
c001e9ca:	68 4c 48 03 c0       	push   0xc003484c
c001e9cf:	e8 fa a3 00 00       	call   c0028dce <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e9d4:	83 c4 10             	add    esp,0x10
c001e9d7:	83 ec 04             	sub    esp,0x4
c001e9da:	68 e4 02 03 c0       	push   0xc00302e4
c001e9df:	68 4c 48 03 c0       	push   0xc003484c
c001e9e4:	68 2e 8e 02 c0       	push   0xc0028e2e
c001e9e9:	e8 f2 46 ff ff       	call   c00130e0 <__cxa_atexit>
c001e9ee:	83 c4 10             	add    esp,0x10
c001e9f1:	83 ec 0c             	sub    esp,0xc
c001e9f4:	68 58 48 03 c0       	push   0xc0034858
c001e9f9:	e8 d0 a3 00 00       	call   c0028dce <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e9fe:	83 c4 10             	add    esp,0x10
c001ea01:	83 ec 04             	sub    esp,0x4
c001ea04:	68 e4 02 03 c0       	push   0xc00302e4
c001ea09:	68 58 48 03 c0       	push   0xc0034858
c001ea0e:	68 2e 8e 02 c0       	push   0xc0028e2e
c001ea13:	e8 c8 46 ff ff       	call   c00130e0 <__cxa_atexit>
c001ea18:	83 c4 10             	add    esp,0x10
c001ea1b:	83 ec 0c             	sub    esp,0xc
c001ea1e:	68 64 48 03 c0       	push   0xc0034864
c001ea23:	e8 a6 a3 00 00       	call   c0028dce <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea28:	83 c4 10             	add    esp,0x10
c001ea2b:	83 ec 04             	sub    esp,0x4
c001ea2e:	68 e4 02 03 c0       	push   0xc00302e4
c001ea33:	68 64 48 03 c0       	push   0xc0034864
c001ea38:	68 2e 8e 02 c0       	push   0xc0028e2e
c001ea3d:	e8 9e 46 ff ff       	call   c00130e0 <__cxa_atexit>
c001ea42:	83 c4 10             	add    esp,0x10
c001ea45:	90                   	nop
c001ea46:	83 c4 0c             	add    esp,0xc
c001ea49:	c3                   	ret    

c001ea4a <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001ea4a:	83 ec 0c             	sub    esp,0xc
c001ea4d:	83 ec 08             	sub    esp,0x8
c001ea50:	68 ff ff 00 00       	push   0xffff
c001ea55:	6a 01                	push   0x1
c001ea57:	e8 53 ff ff ff       	call   c001e9af <__static_initialization_and_destruction_0(int, int)>
c001ea5c:	83 c4 10             	add    esp,0x10
c001ea5f:	83 c4 0c             	add    esp,0xc
c001ea62:	c3                   	ret    

c001ea63 <Vm::inbv(unsigned short)>:
c001ea63:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ea67:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea6c:	75 06                	jne    c001ea74 <Vm::inbv(unsigned short)+0x11>
c001ea6e:	a0 e0 48 03 c0       	mov    al,ds:0xc00348e0
c001ea73:	c3                   	ret    
c001ea74:	ec                   	in     al,dx
c001ea75:	c3                   	ret    

c001ea76 <Vm::outbv(unsigned short, unsigned char)>:
c001ea76:	53                   	push   ebx
c001ea77:	83 ec 08             	sub    esp,0x8
c001ea7a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea7e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ea82:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea87:	75 38                	jne    c001eac1 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001ea89:	0f b6 c3             	movzx  eax,bl
c001ea8c:	51                   	push   ecx
c001ea8d:	51                   	push   ecx
c001ea8e:	50                   	push   eax
c001ea8f:	68 a4 e8 02 c0       	push   0xc002e8a4
c001ea94:	e8 ad 47 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001ea99:	8b 15 e0 48 03 c0    	mov    edx,DWORD PTR ds:0xc00348e0
c001ea9f:	83 c4 10             	add    esp,0x10
c001eaa2:	8d 42 01             	lea    eax,[edx+0x1]
c001eaa5:	88 9a c0 48 03 c0    	mov    BYTE PTR [edx-0x3ffcb740],bl
c001eaab:	a3 e0 48 03 c0       	mov    ds:0xc00348e0,eax
c001eab0:	83 f8 20             	cmp    eax,0x20
c001eab3:	75 0f                	jne    c001eac4 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001eab5:	c7 05 e0 48 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00348e0,0x1f
c001eabf:	eb 03                	jmp    c001eac4 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001eac1:	88 d8                	mov    al,bl
c001eac3:	ee                   	out    dx,al
c001eac4:	83 c4 08             	add    esp,0x8
c001eac7:	5b                   	pop    ebx
c001eac8:	c3                   	ret    

c001eac9 <Vm::realToLinear(unsigned short, unsigned short)>:
c001eac9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eace:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ead3:	c1 e0 04             	shl    eax,0x4
c001ead6:	01 d0                	add    eax,edx
c001ead8:	c3                   	ret    

c001ead9 <Vm::getSegment(unsigned int)>:
c001ead9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eadd:	c1 e8 10             	shr    eax,0x10
c001eae0:	c3                   	ret    

c001eae1 <Vm::getOffset(unsigned int)>:
c001eae1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eae5:	c3                   	ret    

c001eae6 <Vm::mainloop2()>:
c001eae6:	83 ec 0c             	sub    esp,0xc
c001eae9:	e8 b8 f5 ff ff       	call   c001e0a6 <lockScheduler()>
c001eaee:	83 ec 0c             	sub    esp,0xc
c001eaf1:	c6 05 e8 48 03 c0 01 	mov    BYTE PTR ds:0xc00348e8,0x1
c001eaf8:	6a 02                	push   0x2
c001eafa:	e8 9a fb ff ff       	call   c001e699 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eaff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb04:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001eb08:	52                   	push   edx
c001eb09:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001eb0d:	52                   	push   edx
c001eb0e:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001eb12:	52                   	push   edx
c001eb13:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001eb17:	50                   	push   eax
c001eb18:	e8 dd 17 fe ff       	call   c00002fa <goToVM86>
c001eb1d:	83 c4 2c             	add    esp,0x2c
c001eb20:	c3                   	ret    

c001eb21 <Vm::mainloop3(unsigned long)>:
c001eb21:	53                   	push   ebx
c001eb22:	83 ec 08             	sub    esp,0x8
c001eb25:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eb29:	e8 78 f5 ff ff       	call   c001e0a6 <lockScheduler()>
c001eb2e:	83 ec 0c             	sub    esp,0xc
c001eb31:	89 1d ec 48 03 c0    	mov    DWORD PTR ds:0xc00348ec,ebx
c001eb37:	6a 02                	push   0x2
c001eb39:	c6 05 e9 48 03 c0 01 	mov    BYTE PTR ds:0xc00348e9,0x1
c001eb40:	e8 54 fb ff ff       	call   c001e699 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eb45:	83 c4 18             	add    esp,0x18
c001eb48:	5b                   	pop    ebx
c001eb49:	eb 9b                	jmp    c001eae6 <Vm::mainloop2()>

c001eb4b <Vm::mainVm8086Loop(void*)>:
c001eb4b:	83 ec 0c             	sub    esp,0xc
c001eb4e:	e8 55 f5 ff ff       	call   c001e0a8 <unlockScheduler()>
c001eb53:	83 c4 0c             	add    esp,0xc
c001eb56:	eb 8e                	jmp    c001eae6 <Vm::mainloop2()>

c001eb58 <Vm::initialise8086()>:
c001eb58:	83 ec 0c             	sub    esp,0xc
c001eb5b:	68 80 00 00 00       	push   0x80
c001eb60:	6a 00                	push   0x0
c001eb62:	68 4b eb 01 c0       	push   0xc001eb4b
c001eb67:	ff 35 48 48 03 c0    	push   DWORD PTR ds:0xc0034848
c001eb6d:	e8 3c ef ff ff       	call   c001daae <Process::createThread(void (*)(void*), void*, int)>
c001eb72:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001eb79:	a3 e4 48 03 c0       	mov    ds:0xc00348e4,eax
c001eb7e:	68 00 01 00 00       	push   0x100
c001eb83:	a1 48 48 03 c0       	mov    eax,ds:0xc0034848
c001eb88:	6a 00                	push   0x0
c001eb8a:	6a 00                	push   0x0
c001eb8c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001eb92:	e8 f1 40 ff ff       	call   c0012c88 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001eb97:	83 c4 2c             	add    esp,0x2c
c001eb9a:	c3                   	ret    

c001eb9b <Vm::finish8086()>:
c001eb9b:	53                   	push   ebx
c001eb9c:	83 ec 08             	sub    esp,0x8
c001eb9f:	e8 02 f5 ff ff       	call   c001e0a6 <lockScheduler()>
c001eba4:	80 3d e9 48 03 c0 00 	cmp    BYTE PTR ds:0xc00348e9,0x0
c001ebab:	75 0c                	jne    c001ebb9 <Vm::finish8086()+0x1e>
c001ebad:	e8 5f f5 ff ff       	call   c001e111 <schedule()>
c001ebb2:	e8 f1 f4 ff ff       	call   c001e0a8 <unlockScheduler()>
c001ebb7:	eb e6                	jmp    c001eb9f <Vm::finish8086()+0x4>
c001ebb9:	83 ec 0c             	sub    esp,0xc
c001ebbc:	8b 1d ec 48 03 c0    	mov    ebx,DWORD PTR ds:0xc00348ec
c001ebc2:	ff 35 e4 48 03 c0    	push   DWORD PTR ds:0xc00348e4
c001ebc8:	c6 05 e9 48 03 c0 00 	mov    BYTE PTR ds:0xc00348e9,0x0
c001ebcf:	e8 28 fb ff ff       	call   c001e6fc <unblockTask(ThreadControlBlock*)>
c001ebd4:	e8 cf f4 ff ff       	call   c001e0a8 <unlockScheduler()>
c001ebd9:	89 d8                	mov    eax,ebx
c001ebdb:	83 c4 18             	add    esp,0x18
c001ebde:	5b                   	pop    ebx
c001ebdf:	c3                   	ret    

c001ebe0 <Vm::getOutput8086(unsigned char*)>:
c001ebe0:	83 ec 10             	sub    esp,0x10
c001ebe3:	ff 35 e0 48 03 c0    	push   DWORD PTR ds:0xc00348e0
c001ebe9:	68 c0 48 03 c0       	push   0xc00348c0
c001ebee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebf2:	e8 a9 1a fe ff       	call   c00006a0 <memcpy>
c001ebf7:	a1 e0 48 03 c0       	mov    eax,ds:0xc00348e0
c001ebfc:	c7 05 e0 48 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00348e0,0x0
c001ec06:	83 c4 1c             	add    esp,0x1c
c001ec09:	c3                   	ret    

c001ec0a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ec0a:	55                   	push   ebp
c001ec0b:	57                   	push   edi
c001ec0c:	56                   	push   esi
c001ec0d:	53                   	push   ebx
c001ec0e:	83 ec 2c             	sub    esp,0x2c
c001ec11:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ec15:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ec19:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ec1d:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ec21:	e8 80 f4 ff ff       	call   c001e0a6 <lockScheduler()>
c001ec26:	a0 e8 48 03 c0       	mov    al,ds:0xc00348e8
c001ec2b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ec2f:	84 c0                	test   al,al
c001ec31:	75 0c                	jne    c001ec3f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ec33:	e8 d9 f4 ff ff       	call   c001e111 <schedule()>
c001ec38:	e8 6b f4 ff ff       	call   c001e0a8 <unlockScheduler()>
c001ec3d:	eb e2                	jmp    c001ec21 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ec3f:	a1 e4 48 03 c0       	mov    eax,ds:0xc00348e4
c001ec44:	c7 05 e0 48 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00348e0,0x0
c001ec4e:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001ec52:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001ec56:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001ec5a:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ec5e:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ec62:	50                   	push   eax
c001ec63:	6a 20                	push   0x20
c001ec65:	6a 00                	push   0x0
c001ec67:	68 c0 48 03 c0       	push   0xc00348c0
c001ec6c:	e8 53 1a fe ff       	call   c00006c4 <memset>
c001ec71:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ec78:	e8 df 12 ff ff       	call   c000ff5c <malloc>
c001ec7d:	83 c4 0c             	add    esp,0xc
c001ec80:	89 c7                	mov    edi,eax
c001ec82:	ff 35 48 48 03 c0    	push   DWORD PTR ds:0xc0034848
c001ec88:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ec8c:	50                   	push   eax
c001ec8d:	e8 60 4a ff ff       	call   c00136f2 <File::File(char const*, Process*)>
c001ec92:	83 c4 10             	add    esp,0x10
c001ec95:	85 ff                	test   edi,edi
c001ec97:	75 0a                	jne    c001eca3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ec99:	83 ec 0c             	sub    esp,0xc
c001ec9c:	68 c0 e8 02 c0       	push   0xc002e8c0
c001eca1:	eb 27                	jmp    c001ecca <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001eca3:	50                   	push   eax
c001eca4:	8d 44 24 17          	lea    eax,[esp+0x17]
c001eca8:	50                   	push   eax
c001eca9:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ecad:	50                   	push   eax
c001ecae:	57                   	push   edi
c001ecaf:	e8 4c 4e ff ff       	call   c0013b00 <File::stat(unsigned long long*, bool*)>
c001ecb4:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001ecb9:	83 c4 10             	add    esp,0x10
c001ecbc:	89 e8                	mov    eax,ebp
c001ecbe:	84 c0                	test   al,al
c001ecc0:	74 19                	je     c001ecdb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ecc2:	83 ec 0c             	sub    esp,0xc
c001ecc5:	68 d4 e8 02 c0       	push   0xc002e8d4
c001ecca:	e8 2c bb ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001eccf:	31 ed                	xor    ebp,ebp
c001ecd1:	e8 d2 f3 ff ff       	call   c001e0a8 <unlockScheduler()>
c001ecd6:	83 c4 10             	add    esp,0x10
c001ecd9:	eb 75                	jmp    c001ed50 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ecdb:	50                   	push   eax
c001ecdc:	50                   	push   eax
c001ecdd:	6a 01                	push   0x1
c001ecdf:	57                   	push   edi
c001ece0:	e8 bf 4a ff ff       	call   c00137a4 <File::open(FileOpenMode)>
c001ece5:	83 c4 10             	add    esp,0x10
c001ece8:	85 c0                	test   eax,eax
c001ecea:	74 17                	je     c001ed03 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ecec:	83 ec 0c             	sub    esp,0xc
c001ecef:	68 ed e8 02 c0       	push   0xc002e8ed
c001ecf4:	e8 02 bb ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001ecf9:	e8 aa f3 ff ff       	call   c001e0a8 <unlockScheduler()>
c001ecfe:	83 c4 10             	add    esp,0x10
c001ed01:	eb 4d                	jmp    c001ed50 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ed03:	0f b7 f6             	movzx  esi,si
c001ed06:	50                   	push   eax
c001ed07:	0f b7 db             	movzx  ebx,bx
c001ed0a:	50                   	push   eax
c001ed0b:	56                   	push   esi
c001ed0c:	53                   	push   ebx
c001ed0d:	e8 b7 fd ff ff       	call   c001eac9 <Vm::realToLinear(unsigned short, unsigned short)>
c001ed12:	5a                   	pop    edx
c001ed13:	8b 17                	mov    edx,DWORD PTR [edi]
c001ed15:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ed19:	51                   	push   ecx
c001ed1a:	50                   	push   eax
c001ed1b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed1f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed23:	57                   	push   edi
c001ed24:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ed27:	83 c4 14             	add    esp,0x14
c001ed2a:	57                   	push   edi
c001ed2b:	e8 82 4b ff ff       	call   c00138b2 <File::close()>
c001ed30:	c6 05 e8 48 03 c0 00 	mov    BYTE PTR ds:0xc00348e8,0x0
c001ed37:	e8 6c f3 ff ff       	call   c001e0a8 <unlockScheduler()>
c001ed3c:	59                   	pop    ecx
c001ed3d:	ff 35 e4 48 03 c0    	push   DWORD PTR ds:0xc00348e4
c001ed43:	e8 b4 f9 ff ff       	call   c001e6fc <unblockTask(ThreadControlBlock*)>
c001ed48:	83 c4 10             	add    esp,0x10
c001ed4b:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ed50:	83 c4 2c             	add    esp,0x2c
c001ed53:	89 e8                	mov    eax,ebp
c001ed55:	5b                   	pop    ebx
c001ed56:	5e                   	pop    esi
c001ed57:	5f                   	pop    edi
c001ed58:	5d                   	pop    ebp
c001ed59:	c3                   	ret    

c001ed5a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ed5a:	57                   	push   edi
c001ed5b:	56                   	push   esi
c001ed5c:	53                   	push   ebx
c001ed5d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ed61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed65:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ed69:	83 e8 06             	sub    eax,0x6
c001ed6c:	0f b7 c0             	movzx  eax,ax
c001ed6f:	50                   	push   eax
c001ed70:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ed75:	50                   	push   eax
c001ed76:	e8 4e fd ff ff       	call   c001eac9 <Vm::realToLinear(unsigned short, unsigned short)>
c001ed7b:	5a                   	pop    edx
c001ed7c:	5e                   	pop    esi
c001ed7d:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ed80:	8d 56 fa             	lea    edx,[esi-0x6]
c001ed83:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ed89:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ed8c:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ed8f:	83 c2 02             	add    edx,0x2
c001ed92:	66 89 10             	mov    WORD PTR [eax],dx
c001ed95:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ed98:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ed9c:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ed9f:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001eda3:	89 d6                	mov    esi,edx
c001eda5:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001edab:	66 81 e6 ff fd       	and    si,0xfdff
c001edb0:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001edb4:	74 07                	je     c001edbd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001edb6:	89 d6                	mov    esi,edx
c001edb8:	66 81 ce 00 02       	or     si,0x200
c001edbd:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001edc1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001edc6:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001edca:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001edd2:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001edd5:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001eddd:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ede0:	5b                   	pop    ebx
c001ede1:	5e                   	pop    esi
c001ede2:	5f                   	pop    edi
c001ede3:	c3                   	ret    

c001ede4 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ede4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ede9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edee:	c1 e0 04             	shl    eax,0x4
c001edf1:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001edf4:	c3                   	ret    

c001edf5 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001edf5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edfa:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edff:	c1 e0 04             	shl    eax,0x4
c001ee02:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ee06:	c3                   	ret    

c001ee07 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ee07:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee0c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee11:	c1 e0 04             	shl    eax,0x4
c001ee14:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ee17:	c3                   	ret    

c001ee18 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ee18:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee1d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee22:	c1 e0 04             	shl    eax,0x4
c001ee25:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee29:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ee2c:	c3                   	ret    

c001ee2d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ee2d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee32:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee37:	c1 e0 04             	shl    eax,0x4
c001ee3a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee3e:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ee42:	c3                   	ret    

c001ee43 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ee43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee48:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee4d:	c1 e0 04             	shl    eax,0x4
c001ee50:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee54:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ee57:	c3                   	ret    

c001ee58 <Vm::faultHandler(regs*)>:
c001ee58:	55                   	push   ebp
c001ee59:	57                   	push   edi
c001ee5a:	56                   	push   esi
c001ee5b:	53                   	push   ebx
c001ee5c:	83 ec 1c             	sub    esp,0x1c
c001ee5f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ee63:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001ee66:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001ee69:	0f b7 c1             	movzx  eax,cx
c001ee6c:	50                   	push   eax
c001ee6d:	0f b7 c3             	movzx  eax,bx
c001ee70:	c1 e3 04             	shl    ebx,0x4
c001ee73:	50                   	push   eax
c001ee74:	e8 50 fc ff ff       	call   c001eac9 <Vm::realToLinear(unsigned short, unsigned short)>
c001ee79:	5a                   	pop    edx
c001ee7a:	89 c5                	mov    ebp,eax
c001ee7c:	5e                   	pop    esi
c001ee7d:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001ee81:	50                   	push   eax
c001ee82:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ee86:	50                   	push   eax
c001ee87:	e8 3d fc ff ff       	call   c001eac9 <Vm::realToLinear(unsigned short, unsigned short)>
c001ee8c:	01 cb                	add    ebx,ecx
c001ee8e:	89 c6                	mov    esi,eax
c001ee90:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001ee94:	50                   	push   eax
c001ee95:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee99:	50                   	push   eax
c001ee9a:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ee9e:	50                   	push   eax
c001ee9f:	55                   	push   ebp
c001eea0:	53                   	push   ebx
c001eea1:	b3 06                	mov    bl,0x6
c001eea3:	68 06 e9 02 c0       	push   0xc002e906
c001eea8:	e8 99 43 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001eead:	83 c4 20             	add    esp,0x20
c001eeb0:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001eeb5:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001eeba:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001eebe:	3c 9d                	cmp    al,0x9d
c001eec0:	0f 84 d7 02 00 00    	je     c001f19d <Vm::faultHandler(regs*)+0x345>
c001eec6:	0f 87 a3 00 00 00    	ja     c001ef6f <Vm::faultHandler(regs*)+0x117>
c001eecc:	3c 66                	cmp    al,0x66
c001eece:	0f 84 15 02 00 00    	je     c001f0e9 <Vm::faultHandler(regs*)+0x291>
c001eed4:	77 5f                	ja     c001ef35 <Vm::faultHandler(regs*)+0xdd>
c001eed6:	3c 36                	cmp    al,0x36
c001eed8:	0f 84 f1 01 00 00    	je     c001f0cf <Vm::faultHandler(regs*)+0x277>
c001eede:	77 28                	ja     c001ef08 <Vm::faultHandler(regs*)+0xb0>
c001eee0:	3c 26                	cmp    al,0x26
c001eee2:	0f 84 99 01 00 00    	je     c001f081 <Vm::faultHandler(regs*)+0x229>
c001eee8:	3c 2e                	cmp    al,0x2e
c001eeea:	0f 85 3b 07 00 00    	jne    c001f62b <Vm::faultHandler(regs*)+0x7d3>
c001eef0:	83 ec 0c             	sub    esp,0xc
c001eef3:	31 db                	xor    ebx,ebx
c001eef5:	68 1b e9 02 c0       	push   0xc002e91b
c001eefa:	e8 47 43 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001eeff:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef02:	83 c4 10             	add    esp,0x10
c001ef05:	45                   	inc    ebp
c001ef06:	eb b2                	jmp    c001eeba <Vm::faultHandler(regs*)+0x62>
c001ef08:	3c 64                	cmp    al,0x64
c001ef0a:	0f 84 8b 01 00 00    	je     c001f09b <Vm::faultHandler(regs*)+0x243>
c001ef10:	0f 87 9f 01 00 00    	ja     c001f0b5 <Vm::faultHandler(regs*)+0x25d>
c001ef16:	3c 3e                	cmp    al,0x3e
c001ef18:	0f 85 0d 07 00 00    	jne    c001f62b <Vm::faultHandler(regs*)+0x7d3>
c001ef1e:	83 ec 0c             	sub    esp,0xc
c001ef21:	b3 01                	mov    bl,0x1
c001ef23:	68 1f e9 02 c0       	push   0xc002e91f
c001ef28:	e8 19 43 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001ef2d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef30:	83 c4 10             	add    esp,0x10
c001ef33:	eb d0                	jmp    c001ef05 <Vm::faultHandler(regs*)+0xad>
c001ef35:	3c 6d                	cmp    al,0x6d
c001ef37:	0f 84 af 03 00 00    	je     c001f2ec <Vm::faultHandler(regs*)+0x494>
c001ef3d:	77 15                	ja     c001ef54 <Vm::faultHandler(regs*)+0xfc>
c001ef3f:	3c 67                	cmp    al,0x67
c001ef41:	0f 84 bf 01 00 00    	je     c001f106 <Vm::faultHandler(regs*)+0x2ae>
c001ef47:	3c 6c                	cmp    al,0x6c
c001ef49:	0f 84 3f 03 00 00    	je     c001f28e <Vm::faultHandler(regs*)+0x436>
c001ef4f:	e9 d7 06 00 00       	jmp    c001f62b <Vm::faultHandler(regs*)+0x7d3>
c001ef54:	3c 6f                	cmp    al,0x6f
c001ef56:	0f 84 a4 04 00 00    	je     c001f400 <Vm::faultHandler(regs*)+0x5a8>
c001ef5c:	0f 82 11 04 00 00    	jb     c001f373 <Vm::faultHandler(regs*)+0x51b>
c001ef62:	3c 9c                	cmp    al,0x9c
c001ef64:	0f 84 ba 01 00 00    	je     c001f124 <Vm::faultHandler(regs*)+0x2cc>
c001ef6a:	e9 bc 06 00 00       	jmp    c001f62b <Vm::faultHandler(regs*)+0x7d3>
c001ef6f:	3c ec                	cmp    al,0xec
c001ef71:	0f 84 24 06 00 00    	je     c001f59b <Vm::faultHandler(regs*)+0x743>
c001ef77:	0f 87 93 00 00 00    	ja     c001f010 <Vm::faultHandler(regs*)+0x1b8>
c001ef7d:	3c e4                	cmp    al,0xe4
c001ef7f:	0f 84 5c 05 00 00    	je     c001f4e1 <Vm::faultHandler(regs*)+0x689>
c001ef85:	77 6a                	ja     c001eff1 <Vm::faultHandler(regs*)+0x199>
c001ef87:	3c cd                	cmp    al,0xcd
c001ef89:	0f 84 7e 02 00 00    	je     c001f20d <Vm::faultHandler(regs*)+0x3b5>
c001ef8f:	3c cf                	cmp    al,0xcf
c001ef91:	0f 85 94 06 00 00    	jne    c001f62b <Vm::faultHandler(regs*)+0x7d3>
c001ef97:	83 ec 0c             	sub    esp,0xc
c001ef9a:	68 63 e9 02 c0       	push   0xc002e963
c001ef9f:	e8 a2 42 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001efa4:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001efa7:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001efaa:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001efae:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001efb1:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001efb5:	0d 00 02 02 00       	or     eax,0x20200
c001efba:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001efbd:	56                   	push   esi
c001efbe:	53                   	push   ebx
c001efbf:	52                   	push   edx
c001efc0:	68 69 e9 02 c0       	push   0xc002e969
c001efc5:	e8 7c 42 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001efca:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001efce:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001efd4:	66 c1 e8 09          	shr    ax,0x9
c001efd8:	83 e0 01             	and    eax,0x1
c001efdb:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001efde:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001efe1:	83 c0 06             	add    eax,0x6
c001efe4:	25 ff ff 00 00       	and    eax,0xffff
c001efe9:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001efec:	e9 95 02 00 00       	jmp    c001f286 <Vm::faultHandler(regs*)+0x42e>
c001eff1:	3c e6                	cmp    al,0xe6
c001eff3:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001eff7:	0f 84 4e 05 00 00    	je     c001f54b <Vm::faultHandler(regs*)+0x6f3>
c001effd:	0f 82 0a 05 00 00    	jb     c001f50d <Vm::faultHandler(regs*)+0x6b5>
c001f003:	3c e7                	cmp    al,0xe7
c001f005:	0f 84 69 05 00 00    	je     c001f574 <Vm::faultHandler(regs*)+0x71c>
c001f00b:	e9 1b 06 00 00       	jmp    c001f62b <Vm::faultHandler(regs*)+0x7d3>
c001f010:	3c ef                	cmp    al,0xef
c001f012:	0f 84 e6 05 00 00    	je     c001f5fe <Vm::faultHandler(regs*)+0x7a6>
c001f018:	77 37                	ja     c001f051 <Vm::faultHandler(regs*)+0x1f9>
c001f01a:	3c ed                	cmp    al,0xed
c001f01c:	0f 84 a3 05 00 00    	je     c001f5c5 <Vm::faultHandler(regs*)+0x76d>
c001f022:	3c ee                	cmp    al,0xee
c001f024:	0f 85 01 06 00 00    	jne    c001f62b <Vm::faultHandler(regs*)+0x7d3>
c001f02a:	52                   	push   edx
c001f02b:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f02e:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f031:	68 04 ea 02 c0       	push   0xc002ea04
c001f036:	e8 0b 42 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001f03b:	59                   	pop    ecx
c001f03c:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f040:	5b                   	pop    ebx
c001f041:	50                   	push   eax
c001f042:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f046:	50                   	push   eax
c001f047:	e8 2a fa ff ff       	call   c001ea76 <Vm::outbv(unsigned short, unsigned char)>
c001f04c:	e9 a5 05 00 00       	jmp    c001f5f6 <Vm::faultHandler(regs*)+0x79e>
c001f051:	3c fa                	cmp    al,0xfa
c001f053:	0f 84 f7 01 00 00    	je     c001f250 <Vm::faultHandler(regs*)+0x3f8>
c001f059:	3c fb                	cmp    al,0xfb
c001f05b:	0f 84 0a 02 00 00    	je     c001f26b <Vm::faultHandler(regs*)+0x413>
c001f061:	3c f3                	cmp    al,0xf3
c001f063:	0f 85 c2 05 00 00    	jne    c001f62b <Vm::faultHandler(regs*)+0x7d3>
c001f069:	83 ec 0c             	sub    esp,0xc
c001f06c:	68 3c e9 02 c0       	push   0xc002e93c
c001f071:	e8 d0 41 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001f076:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f079:	83 c4 10             	add    esp,0x10
c001f07c:	e9 84 fe ff ff       	jmp    c001ef05 <Vm::faultHandler(regs*)+0xad>
c001f081:	83 ec 0c             	sub    esp,0xc
c001f084:	b3 02                	mov    bl,0x2
c001f086:	68 17 e9 02 c0       	push   0xc002e917
c001f08b:	e8 b6 41 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001f090:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f093:	83 c4 10             	add    esp,0x10
c001f096:	e9 6a fe ff ff       	jmp    c001ef05 <Vm::faultHandler(regs*)+0xad>
c001f09b:	83 ec 0c             	sub    esp,0xc
c001f09e:	b3 03                	mov    bl,0x3
c001f0a0:	68 23 e9 02 c0       	push   0xc002e923
c001f0a5:	e8 9c 41 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001f0aa:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0ad:	83 c4 10             	add    esp,0x10
c001f0b0:	e9 50 fe ff ff       	jmp    c001ef05 <Vm::faultHandler(regs*)+0xad>
c001f0b5:	83 ec 0c             	sub    esp,0xc
c001f0b8:	b3 04                	mov    bl,0x4
c001f0ba:	68 27 e9 02 c0       	push   0xc002e927
c001f0bf:	e8 82 41 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001f0c4:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0c7:	83 c4 10             	add    esp,0x10
c001f0ca:	e9 36 fe ff ff       	jmp    c001ef05 <Vm::faultHandler(regs*)+0xad>
c001f0cf:	83 ec 0c             	sub    esp,0xc
c001f0d2:	b3 05                	mov    bl,0x5
c001f0d4:	68 2b e9 02 c0       	push   0xc002e92b
c001f0d9:	e8 68 41 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001f0de:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0e1:	83 c4 10             	add    esp,0x10
c001f0e4:	e9 1c fe ff ff       	jmp    c001ef05 <Vm::faultHandler(regs*)+0xad>
c001f0e9:	83 ec 0c             	sub    esp,0xc
c001f0ec:	68 2f e9 02 c0       	push   0xc002e92f
c001f0f1:	e8 50 41 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001f0f6:	83 c4 10             	add    esp,0x10
c001f0f9:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0fc:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f101:	e9 ff fd ff ff       	jmp    c001ef05 <Vm::faultHandler(regs*)+0xad>
c001f106:	50                   	push   eax
c001f107:	50                   	push   eax
c001f108:	6a 01                	push   0x1
c001f10a:	68 34 e9 02 c0       	push   0xc002e934
c001f10f:	e8 32 41 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001f114:	83 c4 10             	add    esp,0x10
c001f117:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f11a:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f11f:	e9 e1 fd ff ff       	jmp    c001ef05 <Vm::faultHandler(regs*)+0xad>
c001f124:	83 ec 0c             	sub    esp,0xc
c001f127:	68 42 e9 02 c0       	push   0xc002e942
c001f12c:	e8 15 41 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001f131:	83 c4 10             	add    esp,0x10
c001f134:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f137:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f13c:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f13f:	74 2f                	je     c001f170 <Vm::faultHandler(regs*)+0x318>
c001f141:	83 ea 04             	sub    edx,0x4
c001f144:	25 ff 0d 00 00       	and    eax,0xdff
c001f149:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f14f:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f152:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f155:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f15b:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f15f:	0f 84 bf 04 00 00    	je     c001f624 <Vm::faultHandler(regs*)+0x7cc>
c001f165:	80 cc 02             	or     ah,0x2
c001f168:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f16b:	e9 b4 04 00 00       	jmp    c001f624 <Vm::faultHandler(regs*)+0x7cc>
c001f170:	83 ea 02             	sub    edx,0x2
c001f173:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f179:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f17c:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f180:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f186:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f18a:	74 05                	je     c001f191 <Vm::faultHandler(regs*)+0x339>
c001f18c:	80 cc 02             	or     ah,0x2
c001f18f:	eb 03                	jmp    c001f194 <Vm::faultHandler(regs*)+0x33c>
c001f191:	80 e4 fd             	and    ah,0xfd
c001f194:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f198:	e9 87 04 00 00       	jmp    c001f624 <Vm::faultHandler(regs*)+0x7cc>
c001f19d:	83 ec 0c             	sub    esp,0xc
c001f1a0:	68 49 e9 02 c0       	push   0xc002e949
c001f1a5:	e8 9c 40 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001f1aa:	83 c4 10             	add    esp,0x10
c001f1ad:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f1b2:	74 28                	je     c001f1dc <Vm::faultHandler(regs*)+0x384>
c001f1b4:	8b 06                	mov    eax,DWORD PTR [esi]
c001f1b6:	25 ff 0d 00 00       	and    eax,0xdff
c001f1bb:	0d 00 02 02 00       	or     eax,0x20200
c001f1c0:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f1c3:	8b 06                	mov    eax,DWORD PTR [esi]
c001f1c5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1cb:	c1 e8 09             	shr    eax,0x9
c001f1ce:	83 e0 01             	and    eax,0x1
c001f1d1:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f1d4:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f1d7:	83 c0 04             	add    eax,0x4
c001f1da:	eb 24                	jmp    c001f200 <Vm::faultHandler(regs*)+0x3a8>
c001f1dc:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f1df:	0d 00 02 02 00       	or     eax,0x20200
c001f1e4:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f1e7:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f1ea:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1f0:	66 c1 e8 09          	shr    ax,0x9
c001f1f4:	83 e0 01             	and    eax,0x1
c001f1f7:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f1fa:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f1fd:	83 c0 02             	add    eax,0x2
c001f200:	25 ff ff 00 00       	and    eax,0xffff
c001f205:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f208:	e9 17 04 00 00       	jmp    c001f624 <Vm::faultHandler(regs*)+0x7cc>
c001f20d:	53                   	push   ebx
c001f20e:	53                   	push   ebx
c001f20f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f213:	50                   	push   eax
c001f214:	68 4f e9 02 c0       	push   0xc002e94f
c001f219:	e8 28 40 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001f21e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f222:	83 c4 10             	add    esp,0x10
c001f225:	3c ee                	cmp    al,0xee
c001f227:	75 10                	jne    c001f239 <Vm::faultHandler(regs*)+0x3e1>
c001f229:	83 ec 0c             	sub    esp,0xc
c001f22c:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f22f:	e8 ed f8 ff ff       	call   c001eb21 <Vm::mainloop3(unsigned long)>
c001f234:	e9 c0 03 00 00       	jmp    c001f5f9 <Vm::faultHandler(regs*)+0x7a1>
c001f239:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f23d:	83 ec 0c             	sub    esp,0xc
c001f240:	53                   	push   ebx
c001f241:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f245:	53                   	push   ebx
c001f246:	55                   	push   ebp
c001f247:	50                   	push   eax
c001f248:	57                   	push   edi
c001f249:	e8 0c fb ff ff       	call   c001ed5a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f24e:	eb 36                	jmp    c001f286 <Vm::faultHandler(regs*)+0x42e>
c001f250:	83 ec 0c             	sub    esp,0xc
c001f253:	68 59 e9 02 c0       	push   0xc002e959
c001f258:	e8 e9 3f ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001f25d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f262:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f266:	e9 8b 03 00 00       	jmp    c001f5f6 <Vm::faultHandler(regs*)+0x79e>
c001f26b:	83 ec 0c             	sub    esp,0xc
c001f26e:	68 5e e9 02 c0       	push   0xc002e95e
c001f273:	e8 ce 3f ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001f278:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f27d:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f281:	e9 70 03 00 00       	jmp    c001f5f6 <Vm::faultHandler(regs*)+0x79e>
c001f286:	83 c4 20             	add    esp,0x20
c001f289:	e9 99 03 00 00       	jmp    c001f627 <Vm::faultHandler(regs*)+0x7cf>
c001f28e:	83 ec 0c             	sub    esp,0xc
c001f291:	68 9c e9 02 c0       	push   0xc002e99c
c001f296:	e8 ab 3f ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001f29b:	83 c4 10             	add    esp,0x10
c001f29e:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f2a1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f2a6:	74 0d                	je     c001f2b5 <Vm::faultHandler(regs*)+0x45d>
c001f2a8:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f2af:	0f 87 9e 01 00 00    	ja     c001f453 <Vm::faultHandler(regs*)+0x5fb>
c001f2b5:	83 ec 0c             	sub    esp,0xc
c001f2b8:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f2bc:	0f b7 db             	movzx  ebx,bx
c001f2bf:	50                   	push   eax
c001f2c0:	e8 9e f7 ff ff       	call   c001ea63 <Vm::inbv(unsigned short)>
c001f2c5:	83 c4 0c             	add    esp,0xc
c001f2c8:	0f b6 c0             	movzx  eax,al
c001f2cb:	50                   	push   eax
c001f2cc:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f2d0:	50                   	push   eax
c001f2d1:	53                   	push   ebx
c001f2d2:	e8 41 fb ff ff       	call   c001ee18 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f2d7:	83 c4 10             	add    esp,0x10
c001f2da:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f2dd:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f2e1:	74 03                	je     c001f2e6 <Vm::faultHandler(regs*)+0x48e>
c001f2e3:	48                   	dec    eax
c001f2e4:	eb 01                	jmp    c001f2e7 <Vm::faultHandler(regs*)+0x48f>
c001f2e6:	40                   	inc    eax
c001f2e7:	0f b7 c0             	movzx  eax,ax
c001f2ea:	eb 7f                	jmp    c001f36b <Vm::faultHandler(regs*)+0x513>
c001f2ec:	83 ec 0c             	sub    esp,0xc
c001f2ef:	68 ce e9 02 c0       	push   0xc002e9ce
c001f2f4:	e8 4d 3f ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001f2f9:	83 c4 10             	add    esp,0x10
c001f2fc:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f2ff:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f304:	74 0d                	je     c001f313 <Vm::faultHandler(regs*)+0x4bb>
c001f306:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f30d:	0f 87 40 01 00 00    	ja     c001f453 <Vm::faultHandler(regs*)+0x5fb>
c001f313:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f316:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f31a:	0f b7 db             	movzx  ebx,bx
c001f31d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f322:	74 20                	je     c001f344 <Vm::faultHandler(regs*)+0x4ec>
c001f324:	ed                   	in     eax,dx
c001f325:	51                   	push   ecx
c001f326:	50                   	push   eax
c001f327:	56                   	push   esi
c001f328:	53                   	push   ebx
c001f329:	e8 15 fb ff ff       	call   c001ee43 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f32e:	83 c4 10             	add    esp,0x10
c001f331:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f334:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f338:	74 05                	je     c001f33f <Vm::faultHandler(regs*)+0x4e7>
c001f33a:	83 e8 04             	sub    eax,0x4
c001f33d:	eb 27                	jmp    c001f366 <Vm::faultHandler(regs*)+0x50e>
c001f33f:	83 c0 04             	add    eax,0x4
c001f342:	eb 22                	jmp    c001f366 <Vm::faultHandler(regs*)+0x50e>
c001f344:	66 ed                	in     ax,dx
c001f346:	0f b7 c0             	movzx  eax,ax
c001f349:	52                   	push   edx
c001f34a:	50                   	push   eax
c001f34b:	56                   	push   esi
c001f34c:	53                   	push   ebx
c001f34d:	e8 db fa ff ff       	call   c001ee2d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f352:	83 c4 10             	add    esp,0x10
c001f355:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f358:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f35c:	74 05                	je     c001f363 <Vm::faultHandler(regs*)+0x50b>
c001f35e:	83 e8 02             	sub    eax,0x2
c001f361:	eb 03                	jmp    c001f366 <Vm::faultHandler(regs*)+0x50e>
c001f363:	83 c0 02             	add    eax,0x2
c001f366:	25 ff ff 00 00       	and    eax,0xffff
c001f36b:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f36e:	e9 b1 02 00 00       	jmp    c001f624 <Vm::faultHandler(regs*)+0x7cc>
c001f373:	83 ec 0c             	sub    esp,0xc
c001f376:	4b                   	dec    ebx
c001f377:	68 d4 e9 02 c0       	push   0xc002e9d4
c001f37c:	e8 c5 3e ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001f381:	83 c4 10             	add    esp,0x10
c001f384:	80 fb 05             	cmp    bl,0x5
c001f387:	77 0a                	ja     c001f393 <Vm::faultHandler(regs*)+0x53b>
c001f389:	0f b6 db             	movzx  ebx,bl
c001f38c:	ff 24 9d 74 e8 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd178c]
c001f393:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f397:	eb 1b                	jmp    c001f3b4 <Vm::faultHandler(regs*)+0x55c>
c001f399:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f39d:	eb 15                	jmp    c001f3b4 <Vm::faultHandler(regs*)+0x55c>
c001f39f:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f3a3:	eb 0f                	jmp    c001f3b4 <Vm::faultHandler(regs*)+0x55c>
c001f3a5:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f3a9:	eb 09                	jmp    c001f3b4 <Vm::faultHandler(regs*)+0x55c>
c001f3ab:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f3ae:	eb 04                	jmp    c001f3b4 <Vm::faultHandler(regs*)+0x55c>
c001f3b0:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f3b4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f3b9:	74 0d                	je     c001f3c8 <Vm::faultHandler(regs*)+0x570>
c001f3bb:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f3c2:	0f 87 8b 00 00 00    	ja     c001f453 <Vm::faultHandler(regs*)+0x5fb>
c001f3c8:	53                   	push   ebx
c001f3c9:	53                   	push   ebx
c001f3ca:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f3ce:	52                   	push   edx
c001f3cf:	50                   	push   eax
c001f3d0:	e8 0f fa ff ff       	call   c001ede4 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f3d5:	5e                   	pop    esi
c001f3d6:	0f b6 c0             	movzx  eax,al
c001f3d9:	5d                   	pop    ebp
c001f3da:	50                   	push   eax
c001f3db:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f3df:	50                   	push   eax
c001f3e0:	e8 91 f6 ff ff       	call   c001ea76 <Vm::outbv(unsigned short, unsigned char)>
c001f3e5:	83 c4 10             	add    esp,0x10
c001f3e8:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f3eb:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f3ef:	74 03                	je     c001f3f4 <Vm::faultHandler(regs*)+0x59c>
c001f3f1:	48                   	dec    eax
c001f3f2:	eb 01                	jmp    c001f3f5 <Vm::faultHandler(regs*)+0x59d>
c001f3f4:	40                   	inc    eax
c001f3f5:	0f b7 c0             	movzx  eax,ax
c001f3f8:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f3fb:	e9 24 02 00 00       	jmp    c001f624 <Vm::faultHandler(regs*)+0x7cc>
c001f400:	83 ec 0c             	sub    esp,0xc
c001f403:	4b                   	dec    ebx
c001f404:	68 d4 e9 02 c0       	push   0xc002e9d4
c001f409:	e8 38 3e ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001f40e:	83 c4 10             	add    esp,0x10
c001f411:	80 fb 05             	cmp    bl,0x5
c001f414:	77 0a                	ja     c001f420 <Vm::faultHandler(regs*)+0x5c8>
c001f416:	0f b6 db             	movzx  ebx,bl
c001f419:	ff 24 9d 8c e8 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd1774]
c001f420:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f424:	eb 1b                	jmp    c001f441 <Vm::faultHandler(regs*)+0x5e9>
c001f426:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f42a:	eb 15                	jmp    c001f441 <Vm::faultHandler(regs*)+0x5e9>
c001f42c:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f430:	eb 0f                	jmp    c001f441 <Vm::faultHandler(regs*)+0x5e9>
c001f432:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f436:	eb 09                	jmp    c001f441 <Vm::faultHandler(regs*)+0x5e9>
c001f438:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f43b:	eb 04                	jmp    c001f441 <Vm::faultHandler(regs*)+0x5e9>
c001f43d:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f441:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f444:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f449:	74 39                	je     c001f484 <Vm::faultHandler(regs*)+0x62c>
c001f44b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f451:	76 31                	jbe    c001f484 <Vm::faultHandler(regs*)+0x62c>
c001f453:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f457:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f45b:	51                   	push   ecx
c001f45c:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f460:	51                   	push   ecx
c001f461:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f465:	51                   	push   ecx
c001f466:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f46a:	51                   	push   ecx
c001f46b:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f46f:	52                   	push   edx
c001f470:	50                   	push   eax
c001f471:	50                   	push   eax
c001f472:	68 a1 e9 02 c0       	push   0xc002e9a1
c001f477:	e8 ca 3d ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001f47c:	83 c4 20             	add    esp,0x20
c001f47f:	e9 fb 01 00 00       	jmp    c001f67f <Vm::faultHandler(regs*)+0x827>
c001f484:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f487:	0f b7 d3             	movzx  edx,bx
c001f48a:	81 e6 00 04 00 00    	and    esi,0x400
c001f490:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f493:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f498:	74 1d                	je     c001f4b7 <Vm::faultHandler(regs*)+0x65f>
c001f49a:	51                   	push   ecx
c001f49b:	51                   	push   ecx
c001f49c:	52                   	push   edx
c001f49d:	50                   	push   eax
c001f49e:	e8 64 f9 ff ff       	call   c001ee07 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f4a3:	83 c4 10             	add    esp,0x10
c001f4a6:	89 ea                	mov    edx,ebp
c001f4a8:	ef                   	out    dx,eax
c001f4a9:	85 f6                	test   esi,esi
c001f4ab:	74 05                	je     c001f4b2 <Vm::faultHandler(regs*)+0x65a>
c001f4ad:	83 eb 04             	sub    ebx,0x4
c001f4b0:	eb 21                	jmp    c001f4d3 <Vm::faultHandler(regs*)+0x67b>
c001f4b2:	83 c3 04             	add    ebx,0x4
c001f4b5:	eb 1c                	jmp    c001f4d3 <Vm::faultHandler(regs*)+0x67b>
c001f4b7:	51                   	push   ecx
c001f4b8:	51                   	push   ecx
c001f4b9:	52                   	push   edx
c001f4ba:	50                   	push   eax
c001f4bb:	e8 35 f9 ff ff       	call   c001edf5 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f4c0:	83 c4 10             	add    esp,0x10
c001f4c3:	89 ea                	mov    edx,ebp
c001f4c5:	66 ef                	out    dx,ax
c001f4c7:	85 f6                	test   esi,esi
c001f4c9:	74 05                	je     c001f4d0 <Vm::faultHandler(regs*)+0x678>
c001f4cb:	83 eb 02             	sub    ebx,0x2
c001f4ce:	eb 03                	jmp    c001f4d3 <Vm::faultHandler(regs*)+0x67b>
c001f4d0:	83 c3 02             	add    ebx,0x2
c001f4d3:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f4d9:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f4dc:	e9 43 01 00 00       	jmp    c001f624 <Vm::faultHandler(regs*)+0x7cc>
c001f4e1:	53                   	push   ebx
c001f4e2:	53                   	push   ebx
c001f4e3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4e7:	50                   	push   eax
c001f4e8:	68 da e9 02 c0       	push   0xc002e9da
c001f4ed:	e8 54 3d ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001f4f2:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f4f9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4fd:	89 04 24             	mov    DWORD PTR [esp],eax
c001f500:	e8 5e f5 ff ff       	call   c001ea63 <Vm::inbv(unsigned short)>
c001f505:	0f b6 c0             	movzx  eax,al
c001f508:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f50b:	eb 5e                	jmp    c001f56b <Vm::faultHandler(regs*)+0x713>
c001f50d:	51                   	push   ecx
c001f50e:	51                   	push   ecx
c001f50f:	53                   	push   ebx
c001f510:	68 e0 e9 02 c0       	push   0xc002e9e0
c001f515:	e8 2c 3d ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001f51a:	83 c4 10             	add    esp,0x10
c001f51d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f522:	74 07                	je     c001f52b <Vm::faultHandler(regs*)+0x6d3>
c001f524:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f528:	ed                   	in     eax,dx
c001f529:	eb 14                	jmp    c001f53f <Vm::faultHandler(regs*)+0x6e7>
c001f52b:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f52e:	66 31 db             	xor    bx,bx
c001f531:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f534:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f538:	66 ed                	in     ax,dx
c001f53a:	0f b7 c0             	movzx  eax,ax
c001f53d:	09 d8                	or     eax,ebx
c001f53f:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f542:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f546:	e9 dc 00 00 00       	jmp    c001f627 <Vm::faultHandler(regs*)+0x7cf>
c001f54b:	50                   	push   eax
c001f54c:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f54f:	53                   	push   ebx
c001f550:	68 e6 e9 02 c0       	push   0xc002e9e6
c001f555:	e8 ec 3c ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001f55a:	58                   	pop    eax
c001f55b:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f55f:	5a                   	pop    edx
c001f560:	50                   	push   eax
c001f561:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f565:	50                   	push   eax
c001f566:	e8 0b f5 ff ff       	call   c001ea76 <Vm::outbv(unsigned short, unsigned char)>
c001f56b:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f56f:	e9 85 00 00 00       	jmp    c001f5f9 <Vm::faultHandler(regs*)+0x7a1>
c001f574:	50                   	push   eax
c001f575:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f578:	53                   	push   ebx
c001f579:	68 ef e9 02 c0       	push   0xc002e9ef
c001f57e:	e8 c3 3c ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001f583:	83 c4 10             	add    esp,0x10
c001f586:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f58a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f58f:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f592:	74 03                	je     c001f597 <Vm::faultHandler(regs*)+0x73f>
c001f594:	ef                   	out    dx,eax
c001f595:	eb ab                	jmp    c001f542 <Vm::faultHandler(regs*)+0x6ea>
c001f597:	66 ef                	out    dx,ax
c001f599:	eb a7                	jmp    c001f542 <Vm::faultHandler(regs*)+0x6ea>
c001f59b:	55                   	push   ebp
c001f59c:	55                   	push   ebp
c001f59d:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f5a0:	68 f8 e9 02 c0       	push   0xc002e9f8
c001f5a5:	e8 9c 3c ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001f5aa:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f5b1:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f5b5:	89 04 24             	mov    DWORD PTR [esp],eax
c001f5b8:	e8 a6 f4 ff ff       	call   c001ea63 <Vm::inbv(unsigned short)>
c001f5bd:	0f b6 c0             	movzx  eax,al
c001f5c0:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f5c3:	eb 31                	jmp    c001f5f6 <Vm::faultHandler(regs*)+0x79e>
c001f5c5:	56                   	push   esi
c001f5c6:	56                   	push   esi
c001f5c7:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f5ca:	68 fe e9 02 c0       	push   0xc002e9fe
c001f5cf:	e8 72 3c ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001f5d4:	83 c4 10             	add    esp,0x10
c001f5d7:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f5da:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f5df:	74 03                	je     c001f5e4 <Vm::faultHandler(regs*)+0x78c>
c001f5e1:	ed                   	in     eax,dx
c001f5e2:	eb 0d                	jmp    c001f5f1 <Vm::faultHandler(regs*)+0x799>
c001f5e4:	66 ed                	in     ax,dx
c001f5e6:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f5e9:	0f b7 c0             	movzx  eax,ax
c001f5ec:	66 31 d2             	xor    dx,dx
c001f5ef:	09 d0                	or     eax,edx
c001f5f1:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f5f4:	eb 2e                	jmp    c001f624 <Vm::faultHandler(regs*)+0x7cc>
c001f5f6:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f5f9:	83 c4 10             	add    esp,0x10
c001f5fc:	eb 29                	jmp    c001f627 <Vm::faultHandler(regs*)+0x7cf>
c001f5fe:	50                   	push   eax
c001f5ff:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f602:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f605:	68 0d ea 02 c0       	push   0xc002ea0d
c001f60a:	e8 37 3c ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001f60f:	83 c4 10             	add    esp,0x10
c001f612:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f615:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f61a:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f61d:	74 03                	je     c001f622 <Vm::faultHandler(regs*)+0x7ca>
c001f61f:	ef                   	out    dx,eax
c001f620:	eb 02                	jmp    c001f624 <Vm::faultHandler(regs*)+0x7cc>
c001f622:	66 ef                	out    dx,ax
c001f624:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f627:	b0 01                	mov    al,0x1
c001f629:	eb 56                	jmp    c001f681 <Vm::faultHandler(regs*)+0x829>
c001f62b:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f62f:	51                   	push   ecx
c001f630:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f634:	51                   	push   ecx
c001f635:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f639:	51                   	push   ecx
c001f63a:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f63e:	51                   	push   ecx
c001f63f:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f643:	52                   	push   edx
c001f644:	50                   	push   eax
c001f645:	50                   	push   eax
c001f646:	68 16 ea 02 c0       	push   0xc002ea16
c001f64b:	e8 f6 3b ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c001f650:	83 c4 20             	add    esp,0x20
c001f653:	83 ec 0c             	sub    esp,0xc
c001f656:	6a 60                	push   0x60
c001f658:	e8 06 f4 ff ff       	call   c001ea63 <Vm::inbv(unsigned short)>
c001f65d:	83 c4 10             	add    esp,0x10
c001f660:	3c 1c                	cmp    al,0x1c
c001f662:	74 04                	je     c001f668 <Vm::faultHandler(regs*)+0x810>
c001f664:	3c 5a                	cmp    al,0x5a
c001f666:	75 eb                	jne    c001f653 <Vm::faultHandler(regs*)+0x7fb>
c001f668:	3c 1c                	cmp    al,0x1c
c001f66a:	74 04                	je     c001f670 <Vm::faultHandler(regs*)+0x818>
c001f66c:	3c 5a                	cmp    al,0x5a
c001f66e:	75 0f                	jne    c001f67f <Vm::faultHandler(regs*)+0x827>
c001f670:	83 ec 0c             	sub    esp,0xc
c001f673:	6a 60                	push   0x60
c001f675:	e8 e9 f3 ff ff       	call   c001ea63 <Vm::inbv(unsigned short)>
c001f67a:	83 c4 10             	add    esp,0x10
c001f67d:	eb e9                	jmp    c001f668 <Vm::faultHandler(regs*)+0x810>
c001f67f:	31 c0                	xor    eax,eax
c001f681:	83 c4 1c             	add    esp,0x1c
c001f684:	5b                   	pop    ebx
c001f685:	5e                   	pop    esi
c001f686:	5f                   	pop    edi
c001f687:	5d                   	pop    ebp
c001f688:	c3                   	ret    

c001f689 <Vm::fpuInternalTo32(unsigned long long)>:
c001f689:	57                   	push   edi
c001f68a:	56                   	push   esi
c001f68b:	53                   	push   ebx
c001f68c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f694:	89 d6                	mov    esi,edx
c001f696:	89 d7                	mov    edi,edx
c001f698:	89 c1                	mov    ecx,eax
c001f69a:	c1 ef 14             	shr    edi,0x14
c001f69d:	89 d3                	mov    ebx,edx
c001f69f:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f6a5:	31 d2                	xor    edx,edx
c001f6a7:	89 f8                	mov    eax,edi
c001f6a9:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f6af:	bf ff 00 00 00       	mov    edi,0xff
c001f6b4:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f6b9:	83 d2 ff             	adc    edx,0xffffffff
c001f6bc:	39 c7                	cmp    edi,eax
c001f6be:	bf 00 00 00 00       	mov    edi,0x0
c001f6c3:	19 d7                	sbb    edi,edx
c001f6c5:	72 15                	jb     c001f6dc <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f6c7:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f6cb:	c1 e0 17             	shl    eax,0x17
c001f6ce:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f6d4:	09 f1                	or     ecx,esi
c001f6d6:	09 c1                	or     ecx,eax
c001f6d8:	89 cf                	mov    edi,ecx
c001f6da:	eb 02                	jmp    c001f6de <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f6dc:	31 ff                	xor    edi,edi
c001f6de:	89 f8                	mov    eax,edi
c001f6e0:	5b                   	pop    ebx
c001f6e1:	5e                   	pop    esi
c001f6e2:	5f                   	pop    edi
c001f6e3:	c3                   	ret    

c001f6e4 <Vm::fpuInternalTo64(unsigned long long)>:
c001f6e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f6ec:	c3                   	ret    

c001f6ed <Vm::fpu32ToInternal(unsigned int)>:
c001f6ed:	57                   	push   edi
c001f6ee:	31 ff                	xor    edi,edi
c001f6f0:	56                   	push   esi
c001f6f1:	53                   	push   ebx
c001f6f2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f6f6:	89 cb                	mov    ebx,ecx
c001f6f8:	89 ce                	mov    esi,ecx
c001f6fa:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f700:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f706:	c1 e9 17             	shr    ecx,0x17
c001f709:	89 f0                	mov    eax,esi
c001f70b:	0f b6 d1             	movzx  edx,cl
c001f70e:	81 c2 80 03 00 00    	add    edx,0x380
c001f714:	89 d1                	mov    ecx,edx
c001f716:	89 fa                	mov    edx,edi
c001f718:	c1 e1 14             	shl    ecx,0x14
c001f71b:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f71f:	c1 e0 1d             	shl    eax,0x1d
c001f722:	89 d7                	mov    edi,edx
c001f724:	89 c6                	mov    esi,eax
c001f726:	89 ca                	mov    edx,ecx
c001f728:	89 f0                	mov    eax,esi
c001f72a:	09 fa                	or     edx,edi
c001f72c:	09 da                	or     edx,ebx
c001f72e:	5b                   	pop    ebx
c001f72f:	5e                   	pop    esi
c001f730:	5f                   	pop    edi
c001f731:	c3                   	ret    

c001f732 <Vm::fpu64ToInternal(unsigned long long)>:
c001f732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f736:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f73a:	c3                   	ret    

c001f73b <Vm::fpuFloatToLong(unsigned long long)>:
c001f73b:	57                   	push   edi
c001f73c:	31 c0                	xor    eax,eax
c001f73e:	56                   	push   esi
c001f73f:	31 d2                	xor    edx,edx
c001f741:	53                   	push   ebx
c001f742:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f746:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f74a:	89 d9                	mov    ecx,ebx
c001f74c:	c1 e9 14             	shr    ecx,0x14
c001f74f:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f755:	89 cf                	mov    edi,ecx
c001f757:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f75d:	78 33                	js     c001f792 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f75f:	89 d9                	mov    ecx,ebx
c001f761:	89 f0                	mov    eax,esi
c001f763:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f769:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f76f:	89 ca                	mov    edx,ecx
c001f771:	b9 34 00 00 00       	mov    ecx,0x34
c001f776:	29 f9                	sub    ecx,edi
c001f778:	0f ad d0             	shrd   eax,edx,cl
c001f77b:	d3 fa                	sar    edx,cl
c001f77d:	f6 c1 20             	test   cl,0x20
c001f780:	74 05                	je     c001f787 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f782:	89 d0                	mov    eax,edx
c001f784:	c1 fa 1f             	sar    edx,0x1f
c001f787:	85 db                	test   ebx,ebx
c001f789:	79 07                	jns    c001f792 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f78b:	f7 d8                	neg    eax
c001f78d:	83 d2 00             	adc    edx,0x0
c001f790:	f7 da                	neg    edx
c001f792:	5b                   	pop    ebx
c001f793:	5e                   	pop    esi
c001f794:	5f                   	pop    edi
c001f795:	c3                   	ret    

c001f796 <Vm::fpuULongToFloat(unsigned long long)>:
c001f796:	57                   	push   edi
c001f797:	31 c9                	xor    ecx,ecx
c001f799:	56                   	push   esi
c001f79a:	53                   	push   ebx
c001f79b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f79f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f7a3:	0f ba e7 14          	bt     edi,0x14
c001f7a7:	72 07                	jb     c001f7b0 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f7a9:	01 f6                	add    esi,esi
c001f7ab:	11 ff                	adc    edi,edi
c001f7ad:	41                   	inc    ecx
c001f7ae:	eb f3                	jmp    c001f7a3 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f7b0:	89 fa                	mov    edx,edi
c001f7b2:	89 f0                	mov    eax,esi
c001f7b4:	bb 33 04 00 00       	mov    ebx,0x433
c001f7b9:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f7bf:	29 cb                	sub    ebx,ecx
c001f7c1:	89 d9                	mov    ecx,ebx
c001f7c3:	5b                   	pop    ebx
c001f7c4:	c1 e1 14             	shl    ecx,0x14
c001f7c7:	5e                   	pop    esi
c001f7c8:	09 ca                	or     edx,ecx
c001f7ca:	5f                   	pop    edi
c001f7cb:	c3                   	ret    

c001f7cc <Vm::fpuLongToFloat(long long)>:
c001f7cc:	56                   	push   esi
c001f7cd:	31 c0                	xor    eax,eax
c001f7cf:	53                   	push   ebx
c001f7d0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f7d4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f7d8:	39 c8                	cmp    eax,ecx
c001f7da:	19 d8                	sbb    eax,ebx
c001f7dc:	7d 04                	jge    c001f7e2 <Vm::fpuLongToFloat(long long)+0x16>
c001f7de:	31 f6                	xor    esi,esi
c001f7e0:	eb 0c                	jmp    c001f7ee <Vm::fpuLongToFloat(long long)+0x22>
c001f7e2:	f7 d9                	neg    ecx
c001f7e4:	be 01 00 00 00       	mov    esi,0x1
c001f7e9:	83 d3 00             	adc    ebx,0x0
c001f7ec:	f7 db                	neg    ebx
c001f7ee:	31 c0                	xor    eax,eax
c001f7f0:	0f ba e3 14          	bt     ebx,0x14
c001f7f4:	72 07                	jb     c001f7fd <Vm::fpuLongToFloat(long long)+0x31>
c001f7f6:	01 c9                	add    ecx,ecx
c001f7f8:	11 db                	adc    ebx,ebx
c001f7fa:	40                   	inc    eax
c001f7fb:	eb f3                	jmp    c001f7f0 <Vm::fpuLongToFloat(long long)+0x24>
c001f7fd:	ba 33 04 00 00       	mov    edx,0x433
c001f802:	29 c2                	sub    edx,eax
c001f804:	89 c8                	mov    eax,ecx
c001f806:	c1 e2 14             	shl    edx,0x14
c001f809:	89 d9                	mov    ecx,ebx
c001f80b:	89 f3                	mov    ebx,esi
c001f80d:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f813:	09 ca                	or     edx,ecx
c001f815:	84 db                	test   bl,bl
c001f817:	74 06                	je     c001f81f <Vm::fpuLongToFloat(long long)+0x53>
c001f819:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f81f:	5b                   	pop    ebx
c001f820:	5e                   	pop    esi
c001f821:	c3                   	ret    

c001f822 <Vm::fpuGet0()>:
c001f822:	31 c0                	xor    eax,eax
c001f824:	31 d2                	xor    edx,edx
c001f826:	c3                   	ret    

c001f827 <Vm::fpuGet1()>:
c001f827:	b8 01 00 00 00       	mov    eax,0x1
c001f82c:	31 d2                	xor    edx,edx
c001f82e:	c3                   	ret    

c001f82f <Vm::fpuGetPi()>:
c001f82f:	b8 03 00 00 00       	mov    eax,0x3
c001f834:	31 d2                	xor    edx,edx
c001f836:	c3                   	ret    

c001f837 <Vm::fpuGetLog2E()>:
c001f837:	83 ec 18             	sub    esp,0x18
c001f83a:	68 20 eb 02 c0       	push   0xc002eb20
c001f83f:	e8 b7 af ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001f844:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f849:	31 d2                	xor    edx,edx
c001f84b:	83 c4 1c             	add    esp,0x1c
c001f84e:	c3                   	ret    

c001f84f <Vm::fpuGetLogE2()>:
c001f84f:	83 ec 18             	sub    esp,0x18
c001f852:	68 2c eb 02 c0       	push   0xc002eb2c
c001f857:	e8 9f af ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001f85c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f861:	31 d2                	xor    edx,edx
c001f863:	83 c4 1c             	add    esp,0x1c
c001f866:	c3                   	ret    

c001f867 <Vm::fpuGetLog210()>:
c001f867:	83 ec 18             	sub    esp,0x18
c001f86a:	68 38 eb 02 c0       	push   0xc002eb38
c001f86f:	e8 87 af ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001f874:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f879:	31 d2                	xor    edx,edx
c001f87b:	83 c4 1c             	add    esp,0x1c
c001f87e:	c3                   	ret    

c001f87f <Vm::fpuGetLog102()>:
c001f87f:	83 ec 18             	sub    esp,0x18
c001f882:	68 45 eb 02 c0       	push   0xc002eb45
c001f887:	e8 6f af ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001f88c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f891:	31 d2                	xor    edx,edx
c001f893:	83 c4 1c             	add    esp,0x1c
c001f896:	c3                   	ret    

c001f897 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f897:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f89b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f89f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8a3:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f8a7:	0f 92 c0             	setb   al
c001f8aa:	c3                   	ret    

c001f8ab <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f8ab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f8af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8b3:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f8b7:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f8bb:	09 c2                	or     edx,eax
c001f8bd:	0f 94 c0             	sete   al
c001f8c0:	c3                   	ret    

c001f8c1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f8c1:	57                   	push   edi
c001f8c2:	56                   	push   esi
c001f8c3:	53                   	push   ebx
c001f8c4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f8c8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f8cc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f8d0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f8d4:	57                   	push   edi
c001f8d5:	56                   	push   esi
c001f8d6:	53                   	push   ebx
c001f8d7:	51                   	push   ecx
c001f8d8:	e8 ce ff ff ff       	call   c001f8ab <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f8dd:	83 c4 10             	add    esp,0x10
c001f8e0:	88 c2                	mov    dl,al
c001f8e2:	31 c0                	xor    eax,eax
c001f8e4:	84 d2                	test   dl,dl
c001f8e6:	75 0c                	jne    c001f8f4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f8e8:	57                   	push   edi
c001f8e9:	56                   	push   esi
c001f8ea:	53                   	push   ebx
c001f8eb:	51                   	push   ecx
c001f8ec:	e8 a6 ff ff ff       	call   c001f897 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f8f1:	83 c4 10             	add    esp,0x10
c001f8f4:	83 e0 01             	and    eax,0x1
c001f8f7:	5b                   	pop    ebx
c001f8f8:	88 c1                	mov    cl,al
c001f8fa:	83 e2 01             	and    edx,0x1
c001f8fd:	a0 01 49 03 c0       	mov    al,ds:0xc0034901
c001f902:	c1 e2 06             	shl    edx,0x6
c001f905:	83 e0 ba             	and    eax,0xffffffba
c001f908:	5e                   	pop    esi
c001f909:	09 c8                	or     eax,ecx
c001f90b:	5f                   	pop    edi
c001f90c:	09 d0                	or     eax,edx
c001f90e:	a2 01 49 03 c0       	mov    ds:0xc0034901,al
c001f913:	c3                   	ret    

c001f914 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f914:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f918:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f91c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f920:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f924:	c3                   	ret    

c001f925 <Vm::fpuAbs(unsigned long long)>:
c001f925:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f929:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f92d:	c3                   	ret    

c001f92e <Vm::fpuChs(unsigned long long)>:
c001f92e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f932:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f936:	f7 d8                	neg    eax
c001f938:	83 d2 00             	adc    edx,0x0
c001f93b:	f7 da                	neg    edx
c001f93d:	c3                   	ret    

c001f93e <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f93e:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f942:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f947:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f94b:	eb c7                	jmp    c001f914 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f94d <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f94d:	53                   	push   ebx
c001f94e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f952:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f956:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f95a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f95e:	0f af ca             	imul   ecx,edx
c001f961:	0f af d8             	imul   ebx,eax
c001f964:	f7 e2                	mul    edx
c001f966:	01 d9                	add    ecx,ebx
c001f968:	5b                   	pop    ebx
c001f969:	01 ca                	add    edx,ecx
c001f96b:	c3                   	ret    

c001f96c <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f96c:	83 ec 0c             	sub    esp,0xc
c001f96f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f973:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f977:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f97b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f97f:	e8 58 71 00 00       	call   c0026adc <__udivdi3>
c001f984:	83 c4 1c             	add    esp,0x1c
c001f987:	c3                   	ret    

c001f988 <Vm::fpuSquare(unsigned long long)>:
c001f988:	50                   	push   eax
c001f989:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f98d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f991:	52                   	push   edx
c001f992:	50                   	push   eax
c001f993:	52                   	push   edx
c001f994:	50                   	push   eax
c001f995:	e8 b3 ff ff ff       	call   c001f94d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f99a:	83 c4 14             	add    esp,0x14
c001f99d:	c3                   	ret    

c001f99e <Vm::fpuGetReg(int)>:
c001f99e:	83 ec 0c             	sub    esp,0xc
c001f9a1:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f9a6:	76 10                	jbe    c001f9b8 <Vm::fpuGetReg(int)+0x1a>
c001f9a8:	83 ec 0c             	sub    esp,0xc
c001f9ab:	68 52 eb 02 c0       	push   0xc002eb52
c001f9b0:	e8 46 ae ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001f9b5:	83 c4 10             	add    esp,0x10
c001f9b8:	a0 01 49 03 c0       	mov    al,ds:0xc0034901
c001f9bd:	b9 08 00 00 00       	mov    ecx,0x8
c001f9c2:	c0 e8 03             	shr    al,0x3
c001f9c5:	83 e0 07             	and    eax,0x7
c001f9c8:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f9cc:	99                   	cdq    
c001f9cd:	f7 f9                	idiv   ecx
c001f9cf:	8b 04 d5 04 49 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcb6fc]
c001f9d6:	8b 14 d5 08 49 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcb6f8]
c001f9dd:	83 c4 0c             	add    esp,0xc
c001f9e0:	c3                   	ret    

c001f9e1 <Vm::fpuSetReg(int, unsigned long long)>:
c001f9e1:	57                   	push   edi
c001f9e2:	56                   	push   esi
c001f9e3:	52                   	push   edx
c001f9e4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f9e8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f9ec:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f9f1:	76 10                	jbe    c001fa03 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f9f3:	83 ec 0c             	sub    esp,0xc
c001f9f6:	68 65 eb 02 c0       	push   0xc002eb65
c001f9fb:	e8 fb ad ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001fa00:	83 c4 10             	add    esp,0x10
c001fa03:	a0 01 49 03 c0       	mov    al,ds:0xc0034901
c001fa08:	b9 08 00 00 00       	mov    ecx,0x8
c001fa0d:	c0 e8 03             	shr    al,0x3
c001fa10:	83 e0 07             	and    eax,0x7
c001fa13:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fa17:	99                   	cdq    
c001fa18:	f7 f9                	idiv   ecx
c001fa1a:	89 34 d5 04 49 03 c0 	mov    DWORD PTR [edx*8-0x3ffcb6fc],esi
c001fa21:	89 3c d5 08 49 03 c0 	mov    DWORD PTR [edx*8-0x3ffcb6f8],edi
c001fa28:	58                   	pop    eax
c001fa29:	5e                   	pop    esi
c001fa2a:	5f                   	pop    edi
c001fa2b:	c3                   	ret    

c001fa2c <Vm::fpuPush(unsigned long long)>:
c001fa2c:	a0 01 49 03 c0       	mov    al,ds:0xc0034901
c001fa31:	c0 e8 03             	shr    al,0x3
c001fa34:	83 e0 07             	and    eax,0x7
c001fa37:	83 c0 07             	add    eax,0x7
c001fa3a:	88 c2                	mov    dl,al
c001fa3c:	83 e0 07             	and    eax,0x7
c001fa3f:	83 e2 07             	and    edx,0x7
c001fa42:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001fa49:	8a 15 01 49 03 c0    	mov    dl,BYTE PTR ds:0xc0034901
c001fa4f:	83 e2 c7             	and    edx,0xffffffc7
c001fa52:	09 ca                	or     edx,ecx
c001fa54:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fa58:	88 15 01 49 03 c0    	mov    BYTE PTR ds:0xc0034901,dl
c001fa5e:	89 0c c5 08 49 03 c0 	mov    DWORD PTR [eax*8-0x3ffcb6f8],ecx
c001fa65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fa69:	89 14 c5 04 49 03 c0 	mov    DWORD PTR [eax*8-0x3ffcb6fc],edx
c001fa70:	a1 44 49 03 c0       	mov    eax,ds:0xc0034944
c001fa75:	83 f8 08             	cmp    eax,0x8
c001fa78:	75 08                	jne    c001fa82 <Vm::fpuPush(unsigned long long)+0x56>
c001fa7a:	80 0d 00 49 03 c0 40 	or     BYTE PTR ds:0xc0034900,0x40
c001fa81:	c3                   	ret    
c001fa82:	40                   	inc    eax
c001fa83:	a3 44 49 03 c0       	mov    ds:0xc0034944,eax
c001fa88:	c3                   	ret    

c001fa89 <Vm::fpuPop()>:
c001fa89:	8a 0d 01 49 03 c0    	mov    cl,BYTE PTR ds:0xc0034901
c001fa8f:	53                   	push   ebx
c001fa90:	c0 e9 03             	shr    cl,0x3
c001fa93:	8a 1d 01 49 03 c0    	mov    bl,BYTE PTR ds:0xc0034901
c001fa99:	83 e1 07             	and    ecx,0x7
c001fa9c:	83 e3 c7             	and    ebx,0xffffffc7
c001fa9f:	8b 04 cd 04 49 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcb6fc]
c001faa6:	8b 14 cd 08 49 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcb6f8]
c001faad:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fab4:	83 e1 38             	and    ecx,0x38
c001fab7:	09 d9                	or     ecx,ebx
c001fab9:	88 0d 01 49 03 c0    	mov    BYTE PTR ds:0xc0034901,cl
c001fabf:	8b 0d 44 49 03 c0    	mov    ecx,DWORD PTR ds:0xc0034944
c001fac5:	85 c9                	test   ecx,ecx
c001fac7:	74 09                	je     c001fad2 <Vm::fpuPop()+0x49>
c001fac9:	49                   	dec    ecx
c001faca:	89 0d 44 49 03 c0    	mov    DWORD PTR ds:0xc0034944,ecx
c001fad0:	eb 07                	jmp    c001fad9 <Vm::fpuPop()+0x50>
c001fad2:	80 0d 00 49 03 c0 40 	or     BYTE PTR ds:0xc0034900,0x40
c001fad9:	5b                   	pop    ebx
c001fada:	c3                   	ret    

c001fadb <Vm::x87Handler(regs*)>:
c001fadb:	55                   	push   ebp
c001fadc:	57                   	push   edi
c001fadd:	56                   	push   esi
c001fade:	53                   	push   ebx
c001fadf:	83 ec 1c             	sub    esp,0x1c
c001fae2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fae6:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001faeb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001faee:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001faf6:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fafa:	50                   	push   eax
c001fafb:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001faff:	50                   	push   eax
c001fb00:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fb04:	50                   	push   eax
c001fb05:	53                   	push   ebx
c001fb06:	e8 21 a5 ff ff       	call   c001a02c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fb0b:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fb0e:	83 c4 10             	add    esp,0x10
c001fb11:	89 c6                	mov    esi,eax
c001fb13:	80 fa d9             	cmp    dl,0xd9
c001fb16:	0f 85 52 01 00 00    	jne    c001fc6e <Vm::x87Handler(regs*)+0x193>
c001fb1c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb20:	8d 50 20             	lea    edx,[eax+0x20]
c001fb23:	80 fa 0e             	cmp    dl,0xe
c001fb26:	0f 87 86 00 00 00    	ja     c001fbb2 <Vm::x87Handler(regs*)+0xd7>
c001fb2c:	0f b6 d2             	movzx  edx,dl
c001fb2f:	ff 24 95 e4 ea 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd151c]
c001fb36:	e8 e7 fc ff ff       	call   c001f822 <Vm::fpuGet0()>
c001fb3b:	eb 05                	jmp    c001fb42 <Vm::x87Handler(regs*)+0x67>
c001fb3d:	e8 e5 fc ff ff       	call   c001f827 <Vm::fpuGet1()>
c001fb42:	57                   	push   edi
c001fb43:	57                   	push   edi
c001fb44:	52                   	push   edx
c001fb45:	50                   	push   eax
c001fb46:	e8 e1 fe ff ff       	call   c001fa2c <Vm::fpuPush(unsigned long long)>
c001fb4b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fb4f:	83 c4 10             	add    esp,0x10
c001fb52:	b0 01                	mov    al,0x1
c001fb54:	e9 e3 09 00 00       	jmp    c002053c <Vm::x87Handler(regs*)+0xa61>
c001fb59:	83 ec 0c             	sub    esp,0xc
c001fb5c:	6a 00                	push   0x0
c001fb5e:	e8 3b fe ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c001fb63:	59                   	pop    ecx
c001fb64:	5e                   	pop    esi
c001fb65:	52                   	push   edx
c001fb66:	50                   	push   eax
c001fb67:	e8 c2 fd ff ff       	call   c001f92e <Vm::fpuChs(unsigned long long)>
c001fb6c:	eb 13                	jmp    c001fb81 <Vm::x87Handler(regs*)+0xa6>
c001fb6e:	83 ec 0c             	sub    esp,0xc
c001fb71:	6a 00                	push   0x0
c001fb73:	e8 26 fe ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c001fb78:	5f                   	pop    edi
c001fb79:	5d                   	pop    ebp
c001fb7a:	52                   	push   edx
c001fb7b:	50                   	push   eax
c001fb7c:	e8 a4 fd ff ff       	call   c001f925 <Vm::fpuAbs(unsigned long long)>
c001fb81:	83 c4 0c             	add    esp,0xc
c001fb84:	52                   	push   edx
c001fb85:	50                   	push   eax
c001fb86:	6a 00                	push   0x0
c001fb88:	e8 54 fe ff ff       	call   c001f9e1 <Vm::fpuSetReg(int, unsigned long long)>
c001fb8d:	eb bc                	jmp    c001fb4b <Vm::x87Handler(regs*)+0x70>
c001fb8f:	e8 d3 fc ff ff       	call   c001f867 <Vm::fpuGetLog210()>
c001fb94:	eb ac                	jmp    c001fb42 <Vm::x87Handler(regs*)+0x67>
c001fb96:	e8 9c fc ff ff       	call   c001f837 <Vm::fpuGetLog2E()>
c001fb9b:	eb a5                	jmp    c001fb42 <Vm::x87Handler(regs*)+0x67>
c001fb9d:	e8 8d fc ff ff       	call   c001f82f <Vm::fpuGetPi()>
c001fba2:	eb 9e                	jmp    c001fb42 <Vm::x87Handler(regs*)+0x67>
c001fba4:	e8 d6 fc ff ff       	call   c001f87f <Vm::fpuGetLog102()>
c001fba9:	eb 97                	jmp    c001fb42 <Vm::x87Handler(regs*)+0x67>
c001fbab:	e8 9f fc ff ff       	call   c001f84f <Vm::fpuGetLogE2()>
c001fbb0:	eb 90                	jmp    c001fb42 <Vm::x87Handler(regs*)+0x67>
c001fbb2:	8d 50 40             	lea    edx,[eax+0x40]
c001fbb5:	80 fa 07             	cmp    dl,0x7
c001fbb8:	77 15                	ja     c001fbcf <Vm::x87Handler(regs*)+0xf4>
c001fbba:	83 ec 0c             	sub    esp,0xc
c001fbbd:	2d c0 00 00 00       	sub    eax,0xc0
c001fbc2:	50                   	push   eax
c001fbc3:	e8 d6 fd ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c001fbc8:	59                   	pop    ecx
c001fbc9:	5e                   	pop    esi
c001fbca:	e9 75 ff ff ff       	jmp    c001fb44 <Vm::x87Handler(regs*)+0x69>
c001fbcf:	8d 50 38             	lea    edx,[eax+0x38]
c001fbd2:	80 fa 07             	cmp    dl,0x7
c001fbd5:	77 3c                	ja     c001fc13 <Vm::x87Handler(regs*)+0x138>
c001fbd7:	83 ec 0c             	sub    esp,0xc
c001fbda:	2d c8 00 00 00       	sub    eax,0xc8
c001fbdf:	50                   	push   eax
c001fbe0:	e8 b9 fd ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c001fbe5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbec:	89 c6                	mov    esi,eax
c001fbee:	89 d7                	mov    edi,edx
c001fbf0:	e8 a9 fd ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c001fbf5:	83 c4 0c             	add    esp,0xc
c001fbf8:	52                   	push   edx
c001fbf9:	50                   	push   eax
c001fbfa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbfe:	2d c8 00 00 00       	sub    eax,0xc8
c001fc03:	50                   	push   eax
c001fc04:	e8 d8 fd ff ff       	call   c001f9e1 <Vm::fpuSetReg(int, unsigned long long)>
c001fc09:	83 c4 0c             	add    esp,0xc
c001fc0c:	57                   	push   edi
c001fc0d:	56                   	push   esi
c001fc0e:	e9 73 ff ff ff       	jmp    c001fb86 <Vm::x87Handler(regs*)+0xab>
c001fc13:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc17:	84 d2                	test   dl,dl
c001fc19:	75 0f                	jne    c001fc2a <Vm::x87Handler(regs*)+0x14f>
c001fc1b:	83 ec 0c             	sub    esp,0xc
c001fc1e:	ff 36                	push   DWORD PTR [esi]
c001fc20:	e8 c8 fa ff ff       	call   c001f6ed <Vm::fpu32ToInternal(unsigned int)>
c001fc25:	e9 bf 00 00 00       	jmp    c001fce9 <Vm::x87Handler(regs*)+0x20e>
c001fc2a:	80 fa 03             	cmp    dl,0x3
c001fc2d:	75 13                	jne    c001fc42 <Vm::x87Handler(regs*)+0x167>
c001fc2f:	e8 55 fe ff ff       	call   c001fa89 <Vm::fpuPop()>
c001fc34:	55                   	push   ebp
c001fc35:	55                   	push   ebp
c001fc36:	52                   	push   edx
c001fc37:	50                   	push   eax
c001fc38:	e8 4c fa ff ff       	call   c001f689 <Vm::fpuInternalTo32(unsigned long long)>
c001fc3d:	e9 88 00 00 00       	jmp    c001fcca <Vm::x87Handler(regs*)+0x1ef>
c001fc42:	80 fa 05             	cmp    dl,0x5
c001fc45:	75 0e                	jne    c001fc55 <Vm::x87Handler(regs*)+0x17a>
c001fc47:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fc4a:	66 a3 02 49 03 c0    	mov    ds:0xc0034902,ax
c001fc50:	e9 df 00 00 00       	jmp    c001fd34 <Vm::x87Handler(regs*)+0x259>
c001fc55:	31 c0                	xor    eax,eax
c001fc57:	80 fa 07             	cmp    dl,0x7
c001fc5a:	0f 85 dc 08 00 00    	jne    c002053c <Vm::x87Handler(regs*)+0xa61>
c001fc60:	66 a1 02 49 03 c0    	mov    ax,ds:0xc0034902
c001fc66:	66 89 06             	mov    WORD PTR [esi],ax
c001fc69:	e9 c6 00 00 00       	jmp    c001fd34 <Vm::x87Handler(regs*)+0x259>
c001fc6e:	80 fa d8             	cmp    dl,0xd8
c001fc71:	0f 84 c9 00 00 00    	je     c001fd40 <Vm::x87Handler(regs*)+0x265>
c001fc77:	80 fa dc             	cmp    dl,0xdc
c001fc7a:	0f 84 0d 02 00 00    	je     c001fe8d <Vm::x87Handler(regs*)+0x3b2>
c001fc80:	80 fa de             	cmp    dl,0xde
c001fc83:	0f 84 cd 02 00 00    	je     c001ff56 <Vm::x87Handler(regs*)+0x47b>
c001fc89:	80 fa dd             	cmp    dl,0xdd
c001fc8c:	0f 84 5f 04 00 00    	je     c00200f1 <Vm::x87Handler(regs*)+0x616>
c001fc92:	80 fa da             	cmp    dl,0xda
c001fc95:	0f 84 24 05 00 00    	je     c00201bf <Vm::x87Handler(regs*)+0x6e4>
c001fc9b:	80 fa df             	cmp    dl,0xdf
c001fc9e:	0f 84 68 05 00 00    	je     c002020c <Vm::x87Handler(regs*)+0x731>
c001fca4:	31 c0                	xor    eax,eax
c001fca6:	80 fa db             	cmp    dl,0xdb
c001fca9:	0f 85 8d 08 00 00    	jne    c002053c <Vm::x87Handler(regs*)+0xa61>
c001fcaf:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fcb3:	80 fa 03             	cmp    dl,0x3
c001fcb6:	0f 85 70 06 00 00    	jne    c002032c <Vm::x87Handler(regs*)+0x851>
c001fcbc:	e8 c8 fd ff ff       	call   c001fa89 <Vm::fpuPop()>
c001fcc1:	55                   	push   ebp
c001fcc2:	55                   	push   ebp
c001fcc3:	52                   	push   edx
c001fcc4:	50                   	push   eax
c001fcc5:	e8 71 fa ff ff       	call   c001f73b <Vm::fpuFloatToLong(unsigned long long)>
c001fcca:	83 c4 10             	add    esp,0x10
c001fccd:	89 06                	mov    DWORD PTR [esi],eax
c001fccf:	eb 63                	jmp    c001fd34 <Vm::x87Handler(regs*)+0x259>
c001fcd1:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fcd5:	84 d2                	test   dl,dl
c001fcd7:	0f 85 e6 05 00 00    	jne    c00202c3 <Vm::x87Handler(regs*)+0x7e8>
c001fcdd:	57                   	push   edi
c001fcde:	57                   	push   edi
c001fcdf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fce2:	ff 36                	push   DWORD PTR [esi]
c001fce4:	e8 49 fa ff ff       	call   c001f732 <Vm::fpu64ToInternal(unsigned long long)>
c001fce9:	5e                   	pop    esi
c001fcea:	5f                   	pop    edi
c001fceb:	52                   	push   edx
c001fcec:	50                   	push   eax
c001fced:	e8 3a fd ff ff       	call   c001fa2c <Vm::fpuPush(unsigned long long)>
c001fcf2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fcf6:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fcf9:	e9 51 fe ff ff       	jmp    c001fb4f <Vm::x87Handler(regs*)+0x74>
c001fcfe:	80 fa 03             	cmp    dl,0x3
c001fd01:	0f 85 d7 06 00 00    	jne    c00203de <Vm::x87Handler(regs*)+0x903>
c001fd07:	57                   	push   edi
c001fd08:	57                   	push   edi
c001fd09:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd0c:	ff 36                	push   DWORD PTR [esi]
c001fd0e:	e8 1f fa ff ff       	call   c001f732 <Vm::fpu64ToInternal(unsigned long long)>
c001fd13:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd1a:	89 c6                	mov    esi,eax
c001fd1c:	89 d7                	mov    edi,edx
c001fd1e:	e8 7b fc ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c001fd23:	57                   	push   edi
c001fd24:	56                   	push   esi
c001fd25:	52                   	push   edx
c001fd26:	50                   	push   eax
c001fd27:	e8 95 fb ff ff       	call   c001f8c1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fd2c:	83 c4 20             	add    esp,0x20
c001fd2f:	e8 55 fd ff ff       	call   c001fa89 <Vm::fpuPop()>
c001fd34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fd38:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd3b:	e9 12 fe ff ff       	jmp    c001fb52 <Vm::x87Handler(regs*)+0x77>
c001fd40:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd44:	8d 50 40             	lea    edx,[eax+0x40]
c001fd47:	80 fa 07             	cmp    dl,0x7
c001fd4a:	77 29                	ja     c001fd75 <Vm::x87Handler(regs*)+0x29a>
c001fd4c:	83 ec 0c             	sub    esp,0xc
c001fd4f:	2d c0 00 00 00       	sub    eax,0xc0
c001fd54:	50                   	push   eax
c001fd55:	e8 44 fc ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c001fd5a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd61:	89 c6                	mov    esi,eax
c001fd63:	89 d7                	mov    edi,edx
c001fd65:	e8 34 fc ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c001fd6a:	57                   	push   edi
c001fd6b:	56                   	push   esi
c001fd6c:	52                   	push   edx
c001fd6d:	50                   	push   eax
c001fd6e:	e8 a1 fb ff ff       	call   c001f914 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fd73:	eb 2f                	jmp    c001fda4 <Vm::x87Handler(regs*)+0x2c9>
c001fd75:	8d 50 38             	lea    edx,[eax+0x38]
c001fd78:	80 fa 07             	cmp    dl,0x7
c001fd7b:	77 2f                	ja     c001fdac <Vm::x87Handler(regs*)+0x2d1>
c001fd7d:	83 ec 0c             	sub    esp,0xc
c001fd80:	2d c8 00 00 00       	sub    eax,0xc8
c001fd85:	50                   	push   eax
c001fd86:	e8 13 fc ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c001fd8b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd92:	89 c6                	mov    esi,eax
c001fd94:	89 d7                	mov    edi,edx
c001fd96:	e8 03 fc ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c001fd9b:	57                   	push   edi
c001fd9c:	56                   	push   esi
c001fd9d:	52                   	push   edx
c001fd9e:	50                   	push   eax
c001fd9f:	e8 a9 fb ff ff       	call   c001f94d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fda4:	83 c4 1c             	add    esp,0x1c
c001fda7:	e9 d8 fd ff ff       	jmp    c001fb84 <Vm::x87Handler(regs*)+0xa9>
c001fdac:	8d 50 30             	lea    edx,[eax+0x30]
c001fdaf:	80 fa 07             	cmp    dl,0x7
c001fdb2:	77 0d                	ja     c001fdc1 <Vm::x87Handler(regs*)+0x2e6>
c001fdb4:	83 ec 0c             	sub    esp,0xc
c001fdb7:	2d d0 00 00 00       	sub    eax,0xd0
c001fdbc:	e9 99 03 00 00       	jmp    c002015a <Vm::x87Handler(regs*)+0x67f>
c001fdc1:	8d 50 28             	lea    edx,[eax+0x28]
c001fdc4:	80 fa 07             	cmp    dl,0x7
c001fdc7:	77 0d                	ja     c001fdd6 <Vm::x87Handler(regs*)+0x2fb>
c001fdc9:	83 ec 0c             	sub    esp,0xc
c001fdcc:	2d d8 00 00 00       	sub    eax,0xd8
c001fdd1:	e9 c0 03 00 00       	jmp    c0020196 <Vm::x87Handler(regs*)+0x6bb>
c001fdd6:	8d 50 20             	lea    edx,[eax+0x20]
c001fdd9:	80 fa 07             	cmp    dl,0x7
c001fddc:	77 1b                	ja     c001fdf9 <Vm::x87Handler(regs*)+0x31e>
c001fdde:	83 ec 0c             	sub    esp,0xc
c001fde1:	2d e0 00 00 00       	sub    eax,0xe0
c001fde6:	50                   	push   eax
c001fde7:	e8 b2 fb ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c001fdec:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdf3:	89 c6                	mov    esi,eax
c001fdf5:	89 d7                	mov    edi,edx
c001fdf7:	eb 22                	jmp    c001fe1b <Vm::x87Handler(regs*)+0x340>
c001fdf9:	8d 50 18             	lea    edx,[eax+0x18]
c001fdfc:	80 fa 07             	cmp    dl,0x7
c001fdff:	77 2d                	ja     c001fe2e <Vm::x87Handler(regs*)+0x353>
c001fe01:	83 ec 0c             	sub    esp,0xc
c001fe04:	6a 00                	push   0x0
c001fe06:	e8 93 fb ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c001fe0b:	89 c6                	mov    esi,eax
c001fe0d:	89 d7                	mov    edi,edx
c001fe0f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe13:	2d e8 00 00 00       	sub    eax,0xe8
c001fe18:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe1b:	e8 7e fb ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c001fe20:	57                   	push   edi
c001fe21:	56                   	push   esi
c001fe22:	52                   	push   edx
c001fe23:	50                   	push   eax
c001fe24:	e8 15 fb ff ff       	call   c001f93e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe29:	e9 76 ff ff ff       	jmp    c001fda4 <Vm::x87Handler(regs*)+0x2c9>
c001fe2e:	8d 50 10             	lea    edx,[eax+0x10]
c001fe31:	80 fa 07             	cmp    dl,0x7
c001fe34:	77 1b                	ja     c001fe51 <Vm::x87Handler(regs*)+0x376>
c001fe36:	83 ec 0c             	sub    esp,0xc
c001fe39:	2d f0 00 00 00       	sub    eax,0xf0
c001fe3e:	50                   	push   eax
c001fe3f:	e8 5a fb ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c001fe44:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe4b:	89 c6                	mov    esi,eax
c001fe4d:	89 d7                	mov    edi,edx
c001fe4f:	eb 22                	jmp    c001fe73 <Vm::x87Handler(regs*)+0x398>
c001fe51:	3c f7                	cmp    al,0xf7
c001fe53:	0f 86 d1 03 00 00    	jbe    c002022a <Vm::x87Handler(regs*)+0x74f>
c001fe59:	83 ec 0c             	sub    esp,0xc
c001fe5c:	6a 00                	push   0x0
c001fe5e:	e8 3b fb ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c001fe63:	89 c6                	mov    esi,eax
c001fe65:	89 d7                	mov    edi,edx
c001fe67:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe6b:	2d f8 00 00 00       	sub    eax,0xf8
c001fe70:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe73:	e8 26 fb ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c001fe78:	57                   	push   edi
c001fe79:	56                   	push   esi
c001fe7a:	52                   	push   edx
c001fe7b:	50                   	push   eax
c001fe7c:	e8 eb fa ff ff       	call   c001f96c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fe81:	83 c4 1c             	add    esp,0x1c
c001fe84:	52                   	push   edx
c001fe85:	50                   	push   eax
c001fe86:	6a 00                	push   0x0
c001fe88:	e9 51 02 00 00       	jmp    c00200de <Vm::x87Handler(regs*)+0x603>
c001fe8d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe91:	8d 50 40             	lea    edx,[eax+0x40]
c001fe94:	80 fa 07             	cmp    dl,0x7
c001fe97:	77 37                	ja     c001fed0 <Vm::x87Handler(regs*)+0x3f5>
c001fe99:	83 ec 0c             	sub    esp,0xc
c001fe9c:	2d c0 00 00 00       	sub    eax,0xc0
c001fea1:	50                   	push   eax
c001fea2:	e8 f7 fa ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c001fea7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001feae:	89 c6                	mov    esi,eax
c001feb0:	89 d7                	mov    edi,edx
c001feb2:	e8 e7 fa ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c001feb7:	57                   	push   edi
c001feb8:	56                   	push   esi
c001feb9:	52                   	push   edx
c001feba:	50                   	push   eax
c001febb:	e8 54 fa ff ff       	call   c001f914 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fec0:	83 c4 1c             	add    esp,0x1c
c001fec3:	52                   	push   edx
c001fec4:	50                   	push   eax
c001fec5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fec9:	2d c0 00 00 00       	sub    eax,0xc0
c001fece:	eb 3d                	jmp    c001ff0d <Vm::x87Handler(regs*)+0x432>
c001fed0:	8d 50 38             	lea    edx,[eax+0x38]
c001fed3:	80 fa 07             	cmp    dl,0x7
c001fed6:	77 3b                	ja     c001ff13 <Vm::x87Handler(regs*)+0x438>
c001fed8:	83 ec 0c             	sub    esp,0xc
c001fedb:	2d c8 00 00 00       	sub    eax,0xc8
c001fee0:	50                   	push   eax
c001fee1:	e8 b8 fa ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c001fee6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001feed:	89 c6                	mov    esi,eax
c001feef:	89 d7                	mov    edi,edx
c001fef1:	e8 a8 fa ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c001fef6:	57                   	push   edi
c001fef7:	56                   	push   esi
c001fef8:	52                   	push   edx
c001fef9:	50                   	push   eax
c001fefa:	e8 4e fa ff ff       	call   c001f94d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001feff:	83 c4 1c             	add    esp,0x1c
c001ff02:	52                   	push   edx
c001ff03:	50                   	push   eax
c001ff04:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff08:	2d c8 00 00 00       	sub    eax,0xc8
c001ff0d:	50                   	push   eax
c001ff0e:	e9 75 fc ff ff       	jmp    c001fb88 <Vm::x87Handler(regs*)+0xad>
c001ff13:	83 c0 18             	add    eax,0x18
c001ff16:	3c 07                	cmp    al,0x7
c001ff18:	0f 87 3b 04 00 00    	ja     c0020359 <Vm::x87Handler(regs*)+0x87e>
c001ff1e:	83 ec 0c             	sub    esp,0xc
c001ff21:	6a 00                	push   0x0
c001ff23:	e8 76 fa ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c001ff28:	89 c6                	mov    esi,eax
c001ff2a:	89 d7                	mov    edi,edx
c001ff2c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff30:	2d e8 00 00 00       	sub    eax,0xe8
c001ff35:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff38:	e8 61 fa ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c001ff3d:	57                   	push   edi
c001ff3e:	56                   	push   esi
c001ff3f:	52                   	push   edx
c001ff40:	50                   	push   eax
c001ff41:	e8 f8 f9 ff ff       	call   c001f93e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff46:	83 c4 1c             	add    esp,0x1c
c001ff49:	52                   	push   edx
c001ff4a:	50                   	push   eax
c001ff4b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff4f:	2d e8 00 00 00       	sub    eax,0xe8
c001ff54:	eb b7                	jmp    c001ff0d <Vm::x87Handler(regs*)+0x432>
c001ff56:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff5a:	8d 50 40             	lea    edx,[eax+0x40]
c001ff5d:	80 fa 07             	cmp    dl,0x7
c001ff60:	77 3a                	ja     c001ff9c <Vm::x87Handler(regs*)+0x4c1>
c001ff62:	83 ec 0c             	sub    esp,0xc
c001ff65:	2d c0 00 00 00       	sub    eax,0xc0
c001ff6a:	50                   	push   eax
c001ff6b:	e8 2e fa ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c001ff70:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff77:	89 c6                	mov    esi,eax
c001ff79:	89 d7                	mov    edi,edx
c001ff7b:	e8 1e fa ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c001ff80:	57                   	push   edi
c001ff81:	56                   	push   esi
c001ff82:	52                   	push   edx
c001ff83:	50                   	push   eax
c001ff84:	e8 8b f9 ff ff       	call   c001f914 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff89:	83 c4 1c             	add    esp,0x1c
c001ff8c:	52                   	push   edx
c001ff8d:	50                   	push   eax
c001ff8e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff92:	2d c0 00 00 00       	sub    eax,0xc0
c001ff97:	e9 9e 01 00 00       	jmp    c002013a <Vm::x87Handler(regs*)+0x65f>
c001ff9c:	8d 50 20             	lea    edx,[eax+0x20]
c001ff9f:	80 fa 07             	cmp    dl,0x7
c001ffa2:	77 3a                	ja     c001ffde <Vm::x87Handler(regs*)+0x503>
c001ffa4:	83 ec 0c             	sub    esp,0xc
c001ffa7:	2d e0 00 00 00       	sub    eax,0xe0
c001ffac:	50                   	push   eax
c001ffad:	e8 ec f9 ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c001ffb2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffb9:	89 c6                	mov    esi,eax
c001ffbb:	89 d7                	mov    edi,edx
c001ffbd:	e8 dc f9 ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c001ffc2:	57                   	push   edi
c001ffc3:	56                   	push   esi
c001ffc4:	52                   	push   edx
c001ffc5:	50                   	push   eax
c001ffc6:	e8 73 f9 ff ff       	call   c001f93e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ffcb:	83 c4 1c             	add    esp,0x1c
c001ffce:	52                   	push   edx
c001ffcf:	50                   	push   eax
c001ffd0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffd4:	2d e0 00 00 00       	sub    eax,0xe0
c001ffd9:	e9 5c 01 00 00       	jmp    c002013a <Vm::x87Handler(regs*)+0x65f>
c001ffde:	8d 50 18             	lea    edx,[eax+0x18]
c001ffe1:	80 fa 07             	cmp    dl,0x7
c001ffe4:	77 3b                	ja     c0020021 <Vm::x87Handler(regs*)+0x546>
c001ffe6:	83 ec 0c             	sub    esp,0xc
c001ffe9:	6a 00                	push   0x0
c001ffeb:	e8 ae f9 ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c001fff0:	89 c6                	mov    esi,eax
c001fff2:	89 d7                	mov    edi,edx
c001fff4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fff8:	2d e8 00 00 00       	sub    eax,0xe8
c001fffd:	89 04 24             	mov    DWORD PTR [esp],eax
c0020000:	e8 99 f9 ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c0020005:	57                   	push   edi
c0020006:	56                   	push   esi
c0020007:	52                   	push   edx
c0020008:	50                   	push   eax
c0020009:	e8 30 f9 ff ff       	call   c001f93e <Vm::fpuSub(unsigned long long, unsigned long long)>
c002000e:	83 c4 1c             	add    esp,0x1c
c0020011:	52                   	push   edx
c0020012:	50                   	push   eax
c0020013:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020017:	2d e8 00 00 00       	sub    eax,0xe8
c002001c:	e9 19 01 00 00       	jmp    c002013a <Vm::x87Handler(regs*)+0x65f>
c0020021:	8d 50 38             	lea    edx,[eax+0x38]
c0020024:	80 fa 07             	cmp    dl,0x7
c0020027:	77 37                	ja     c0020060 <Vm::x87Handler(regs*)+0x585>
c0020029:	83 ec 0c             	sub    esp,0xc
c002002c:	2d c8 00 00 00       	sub    eax,0xc8
c0020031:	50                   	push   eax
c0020032:	e8 67 f9 ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c0020037:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002003e:	89 c6                	mov    esi,eax
c0020040:	89 d7                	mov    edi,edx
c0020042:	e8 57 f9 ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c0020047:	57                   	push   edi
c0020048:	56                   	push   esi
c0020049:	52                   	push   edx
c002004a:	50                   	push   eax
c002004b:	e8 fd f8 ff ff       	call   c001f94d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020050:	83 c4 1c             	add    esp,0x1c
c0020053:	52                   	push   edx
c0020054:	50                   	push   eax
c0020055:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020059:	2d c8 00 00 00       	sub    eax,0xc8
c002005e:	eb 7d                	jmp    c00200dd <Vm::x87Handler(regs*)+0x602>
c0020060:	3c f7                	cmp    al,0xf7
c0020062:	76 38                	jbe    c002009c <Vm::x87Handler(regs*)+0x5c1>
c0020064:	83 ec 0c             	sub    esp,0xc
c0020067:	6a 00                	push   0x0
c0020069:	e8 30 f9 ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c002006e:	89 c6                	mov    esi,eax
c0020070:	89 d7                	mov    edi,edx
c0020072:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020076:	2d f8 00 00 00       	sub    eax,0xf8
c002007b:	89 04 24             	mov    DWORD PTR [esp],eax
c002007e:	e8 1b f9 ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c0020083:	57                   	push   edi
c0020084:	56                   	push   esi
c0020085:	52                   	push   edx
c0020086:	50                   	push   eax
c0020087:	e8 e0 f8 ff ff       	call   c001f96c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002008c:	83 c4 1c             	add    esp,0x1c
c002008f:	52                   	push   edx
c0020090:	50                   	push   eax
c0020091:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020095:	2d f8 00 00 00       	sub    eax,0xf8
c002009a:	eb 41                	jmp    c00200dd <Vm::x87Handler(regs*)+0x602>
c002009c:	8d 50 10             	lea    edx,[eax+0x10]
c002009f:	80 fa 07             	cmp    dl,0x7
c00200a2:	0f 87 5a 01 00 00    	ja     c0020202 <Vm::x87Handler(regs*)+0x727>
c00200a8:	83 ec 0c             	sub    esp,0xc
c00200ab:	2d f0 00 00 00       	sub    eax,0xf0
c00200b0:	50                   	push   eax
c00200b1:	e8 e8 f8 ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c00200b6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200bd:	89 c6                	mov    esi,eax
c00200bf:	89 d7                	mov    edi,edx
c00200c1:	e8 d8 f8 ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c00200c6:	57                   	push   edi
c00200c7:	56                   	push   esi
c00200c8:	52                   	push   edx
c00200c9:	50                   	push   eax
c00200ca:	e8 9d f8 ff ff       	call   c001f96c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00200cf:	83 c4 1c             	add    esp,0x1c
c00200d2:	52                   	push   edx
c00200d3:	50                   	push   eax
c00200d4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200d8:	2d f0 00 00 00       	sub    eax,0xf0
c00200dd:	50                   	push   eax
c00200de:	e8 fe f8 ff ff       	call   c001f9e1 <Vm::fpuSetReg(int, unsigned long long)>
c00200e3:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00200e7:	e8 9d f9 ff ff       	call   c001fa89 <Vm::fpuPop()>
c00200ec:	e9 5e fa ff ff       	jmp    c001fb4f <Vm::x87Handler(regs*)+0x74>
c00200f1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200f5:	8d 50 30             	lea    edx,[eax+0x30]
c00200f8:	80 fa 07             	cmp    dl,0x7
c00200fb:	77 1d                	ja     c002011a <Vm::x87Handler(regs*)+0x63f>
c00200fd:	83 ec 0c             	sub    esp,0xc
c0020100:	6a 00                	push   0x0
c0020102:	e8 97 f8 ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c0020107:	83 c4 0c             	add    esp,0xc
c002010a:	52                   	push   edx
c002010b:	50                   	push   eax
c002010c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020110:	2d d0 00 00 00       	sub    eax,0xd0
c0020115:	e9 f3 fd ff ff       	jmp    c001ff0d <Vm::x87Handler(regs*)+0x432>
c002011a:	8d 50 28             	lea    edx,[eax+0x28]
c002011d:	80 fa 07             	cmp    dl,0x7
c0020120:	77 28                	ja     c002014a <Vm::x87Handler(regs*)+0x66f>
c0020122:	83 ec 0c             	sub    esp,0xc
c0020125:	6a 00                	push   0x0
c0020127:	e8 72 f8 ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c002012c:	83 c4 0c             	add    esp,0xc
c002012f:	52                   	push   edx
c0020130:	50                   	push   eax
c0020131:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020135:	2d d8 00 00 00       	sub    eax,0xd8
c002013a:	50                   	push   eax
c002013b:	e8 a1 f8 ff ff       	call   c001f9e1 <Vm::fpuSetReg(int, unsigned long long)>
c0020140:	e8 44 f9 ff ff       	call   c001fa89 <Vm::fpuPop()>
c0020145:	e9 01 fa ff ff       	jmp    c001fb4b <Vm::x87Handler(regs*)+0x70>
c002014a:	8d 50 20             	lea    edx,[eax+0x20]
c002014d:	80 fa 07             	cmp    dl,0x7
c0020150:	77 30                	ja     c0020182 <Vm::x87Handler(regs*)+0x6a7>
c0020152:	83 ec 0c             	sub    esp,0xc
c0020155:	2d e0 00 00 00       	sub    eax,0xe0
c002015a:	50                   	push   eax
c002015b:	e8 3e f8 ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c0020160:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020167:	89 c6                	mov    esi,eax
c0020169:	89 d7                	mov    edi,edx
c002016b:	e8 2e f8 ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c0020170:	57                   	push   edi
c0020171:	56                   	push   esi
c0020172:	52                   	push   edx
c0020173:	50                   	push   eax
c0020174:	e8 48 f7 ff ff       	call   c001f8c1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020179:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002017d:	e9 54 02 00 00       	jmp    c00203d6 <Vm::x87Handler(regs*)+0x8fb>
c0020182:	8d 50 18             	lea    edx,[eax+0x18]
c0020185:	80 fa 07             	cmp    dl,0x7
c0020188:	0f 87 43 fb ff ff    	ja     c001fcd1 <Vm::x87Handler(regs*)+0x1f6>
c002018e:	83 ec 0c             	sub    esp,0xc
c0020191:	2d e8 00 00 00       	sub    eax,0xe8
c0020196:	50                   	push   eax
c0020197:	e8 02 f8 ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c002019c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201a3:	89 c6                	mov    esi,eax
c00201a5:	89 d7                	mov    edi,edx
c00201a7:	e8 f2 f7 ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c00201ac:	57                   	push   edi
c00201ad:	56                   	push   esi
c00201ae:	52                   	push   edx
c00201af:	50                   	push   eax
c00201b0:	e8 0c f7 ff ff       	call   c001f8c1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00201b5:	83 c4 20             	add    esp,0x20
c00201b8:	e8 cc f8 ff ff       	call   c001fa89 <Vm::fpuPop()>
c00201bd:	eb 62                	jmp    c0020221 <Vm::x87Handler(regs*)+0x746>
c00201bf:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c00201c3:	0f 85 0f 01 00 00    	jne    c00202d8 <Vm::x87Handler(regs*)+0x7fd>
c00201c9:	83 ec 0c             	sub    esp,0xc
c00201cc:	6a 01                	push   0x1
c00201ce:	e8 cb f7 ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c00201d3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201da:	89 c6                	mov    esi,eax
c00201dc:	89 d7                	mov    edi,edx
c00201de:	e8 bb f7 ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c00201e3:	57                   	push   edi
c00201e4:	56                   	push   esi
c00201e5:	52                   	push   edx
c00201e6:	50                   	push   eax
c00201e7:	e8 d5 f6 ff ff       	call   c001f8c1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00201ec:	83 c4 20             	add    esp,0x20
c00201ef:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00201f3:	e8 91 f8 ff ff       	call   c001fa89 <Vm::fpuPop()>
c00201f8:	e8 8c f8 ff ff       	call   c001fa89 <Vm::fpuPop()>
c00201fd:	e9 50 f9 ff ff       	jmp    c001fb52 <Vm::x87Handler(regs*)+0x77>
c0020202:	3c d9                	cmp    al,0xd9
c0020204:	0f 85 b5 02 00 00    	jne    c00204bf <Vm::x87Handler(regs*)+0x9e4>
c002020a:	eb bd                	jmp    c00201c9 <Vm::x87Handler(regs*)+0x6ee>
c002020c:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0020210:	0f 85 ea 02 00 00    	jne    c0020500 <Vm::x87Handler(regs*)+0xa25>
c0020216:	0f b7 05 00 49 03 c0 	movzx  eax,WORD PTR ds:0xc0034900
c002021d:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0020221:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020225:	e9 28 f9 ff ff       	jmp    c001fb52 <Vm::x87Handler(regs*)+0x77>
c002022a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002022e:	84 d2                	test   dl,dl
c0020230:	75 0f                	jne    c0020241 <Vm::x87Handler(regs*)+0x766>
c0020232:	83 ec 0c             	sub    esp,0xc
c0020235:	ff 36                	push   DWORD PTR [esi]
c0020237:	e8 b1 f4 ff ff       	call   c001f6ed <Vm::fpu32ToInternal(unsigned int)>
c002023c:	e9 2c 01 00 00       	jmp    c002036d <Vm::x87Handler(regs*)+0x892>
c0020241:	80 fa 01             	cmp    dl,0x1
c0020244:	75 0f                	jne    c0020255 <Vm::x87Handler(regs*)+0x77a>
c0020246:	83 ec 0c             	sub    esp,0xc
c0020249:	ff 36                	push   DWORD PTR [esi]
c002024b:	e8 9d f4 ff ff       	call   c001f6ed <Vm::fpu32ToInternal(unsigned int)>
c0020250:	e9 81 02 00 00       	jmp    c00204d6 <Vm::x87Handler(regs*)+0x9fb>
c0020255:	80 fa 04             	cmp    dl,0x4
c0020258:	75 0f                	jne    c0020269 <Vm::x87Handler(regs*)+0x78e>
c002025a:	83 ec 0c             	sub    esp,0xc
c002025d:	ff 36                	push   DWORD PTR [esi]
c002025f:	e8 89 f4 ff ff       	call   c001f6ed <Vm::fpu32ToInternal(unsigned int)>
c0020264:	e9 86 01 00 00       	jmp    c00203ef <Vm::x87Handler(regs*)+0x914>
c0020269:	80 fa 05             	cmp    dl,0x5
c002026c:	75 1b                	jne    c0020289 <Vm::x87Handler(regs*)+0x7ae>
c002026e:	83 ec 0c             	sub    esp,0xc
c0020271:	6a 00                	push   0x0
c0020273:	e8 26 f7 ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c0020278:	89 c7                	mov    edi,eax
c002027a:	89 d5                	mov    ebp,edx
c002027c:	58                   	pop    eax
c002027d:	ff 36                	push   DWORD PTR [esi]
c002027f:	e8 69 f4 ff ff       	call   c001f6ed <Vm::fpu32ToInternal(unsigned int)>
c0020284:	e9 a3 01 00 00       	jmp    c002042c <Vm::x87Handler(regs*)+0x951>
c0020289:	80 fa 06             	cmp    dl,0x6
c002028c:	75 0f                	jne    c002029d <Vm::x87Handler(regs*)+0x7c2>
c002028e:	83 ec 0c             	sub    esp,0xc
c0020291:	ff 36                	push   DWORD PTR [esi]
c0020293:	e8 55 f4 ff ff       	call   c001f6ed <Vm::fpu32ToInternal(unsigned int)>
c0020298:	e9 ae 01 00 00       	jmp    c002044b <Vm::x87Handler(regs*)+0x970>
c002029d:	31 c0                	xor    eax,eax
c002029f:	80 fa 07             	cmp    dl,0x7
c00202a2:	0f 85 94 02 00 00    	jne    c002053c <Vm::x87Handler(regs*)+0xa61>
c00202a8:	83 ec 0c             	sub    esp,0xc
c00202ab:	6a 00                	push   0x0
c00202ad:	e8 ec f6 ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c00202b2:	89 c7                	mov    edi,eax
c00202b4:	89 d5                	mov    ebp,edx
c00202b6:	58                   	pop    eax
c00202b7:	ff 36                	push   DWORD PTR [esi]
c00202b9:	e8 2f f4 ff ff       	call   c001f6ed <Vm::fpu32ToInternal(unsigned int)>
c00202be:	e9 cb 01 00 00       	jmp    c002048e <Vm::x87Handler(regs*)+0x9b3>
c00202c3:	80 fa 03             	cmp    dl,0x3
c00202c6:	0f 85 d3 01 00 00    	jne    c002049f <Vm::x87Handler(regs*)+0x9c4>
c00202cc:	e8 b8 f7 ff ff       	call   c001fa89 <Vm::fpuPop()>
c00202d1:	51                   	push   ecx
c00202d2:	51                   	push   ecx
c00202d3:	e9 de 01 00 00       	jmp    c00204b6 <Vm::x87Handler(regs*)+0x9db>
c00202d8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202dc:	80 fa 01             	cmp    dl,0x1
c00202df:	75 09                	jne    c00202ea <Vm::x87Handler(regs*)+0x80f>
c00202e1:	57                   	push   edi
c00202e2:	57                   	push   edi
c00202e3:	8b 06                	mov    eax,DWORD PTR [esi]
c00202e5:	e9 e3 01 00 00       	jmp    c00204cd <Vm::x87Handler(regs*)+0x9f2>
c00202ea:	80 fa 04             	cmp    dl,0x4
c00202ed:	75 12                	jne    c0020301 <Vm::x87Handler(regs*)+0x826>
c00202ef:	31 d2                	xor    edx,edx
c00202f1:	51                   	push   ecx
c00202f2:	51                   	push   ecx
c00202f3:	8b 06                	mov    eax,DWORD PTR [esi]
c00202f5:	52                   	push   edx
c00202f6:	50                   	push   eax
c00202f7:	e8 d0 f4 ff ff       	call   c001f7cc <Vm::fpuLongToFloat(long long)>
c00202fc:	e9 ee 00 00 00       	jmp    c00203ef <Vm::x87Handler(regs*)+0x914>
c0020301:	31 c0                	xor    eax,eax
c0020303:	80 fa 07             	cmp    dl,0x7
c0020306:	0f 85 30 02 00 00    	jne    c002053c <Vm::x87Handler(regs*)+0xa61>
c002030c:	83 ec 0c             	sub    esp,0xc
c002030f:	6a 00                	push   0x0
c0020311:	e8 88 f6 ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c0020316:	89 c7                	mov    edi,eax
c0020318:	89 d5                	mov    ebp,edx
c002031a:	58                   	pop    eax
c002031b:	8b 06                	mov    eax,DWORD PTR [esi]
c002031d:	5a                   	pop    edx
c002031e:	31 d2                	xor    edx,edx
c0020320:	52                   	push   edx
c0020321:	50                   	push   eax
c0020322:	e8 a5 f4 ff ff       	call   c001f7cc <Vm::fpuLongToFloat(long long)>
c0020327:	e9 62 01 00 00       	jmp    c002048e <Vm::x87Handler(regs*)+0x9b3>
c002032c:	84 d2                	test   dl,dl
c002032e:	75 0d                	jne    c002033d <Vm::x87Handler(regs*)+0x862>
c0020330:	31 d2                	xor    edx,edx
c0020332:	55                   	push   ebp
c0020333:	55                   	push   ebp
c0020334:	8b 06                	mov    eax,DWORD PTR [esi]
c0020336:	52                   	push   edx
c0020337:	50                   	push   eax
c0020338:	e9 d3 01 00 00       	jmp    c0020510 <Vm::x87Handler(regs*)+0xa35>
c002033d:	31 c0                	xor    eax,eax
c002033f:	80 fa 02             	cmp    dl,0x2
c0020342:	0f 85 f4 01 00 00    	jne    c002053c <Vm::x87Handler(regs*)+0xa61>
c0020348:	83 ec 0c             	sub    esp,0xc
c002034b:	6a 00                	push   0x0
c002034d:	e8 4c f6 ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c0020352:	59                   	pop    ecx
c0020353:	5f                   	pop    edi
c0020354:	e9 6a f9 ff ff       	jmp    c001fcc3 <Vm::x87Handler(regs*)+0x1e8>
c0020359:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002035d:	84 d2                	test   dl,dl
c002035f:	75 2a                	jne    c002038b <Vm::x87Handler(regs*)+0x8b0>
c0020361:	50                   	push   eax
c0020362:	50                   	push   eax
c0020363:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020366:	ff 36                	push   DWORD PTR [esi]
c0020368:	e8 c5 f3 ff ff       	call   c001f732 <Vm::fpu64ToInternal(unsigned long long)>
c002036d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020374:	89 c6                	mov    esi,eax
c0020376:	89 d7                	mov    edi,edx
c0020378:	e8 21 f6 ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c002037d:	57                   	push   edi
c002037e:	56                   	push   esi
c002037f:	52                   	push   edx
c0020380:	50                   	push   eax
c0020381:	e8 8e f5 ff ff       	call   c001f914 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020386:	e9 64 01 00 00       	jmp    c00204ef <Vm::x87Handler(regs*)+0xa14>
c002038b:	80 fa 01             	cmp    dl,0x1
c002038e:	75 11                	jne    c00203a1 <Vm::x87Handler(regs*)+0x8c6>
c0020390:	50                   	push   eax
c0020391:	50                   	push   eax
c0020392:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020395:	ff 36                	push   DWORD PTR [esi]
c0020397:	e8 96 f3 ff ff       	call   c001f732 <Vm::fpu64ToInternal(unsigned long long)>
c002039c:	e9 35 01 00 00       	jmp    c00204d6 <Vm::x87Handler(regs*)+0x9fb>
c00203a1:	80 fa 02             	cmp    dl,0x2
c00203a4:	0f 85 54 f9 ff ff    	jne    c001fcfe <Vm::x87Handler(regs*)+0x223>
c00203aa:	55                   	push   ebp
c00203ab:	55                   	push   ebp
c00203ac:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203af:	ff 36                	push   DWORD PTR [esi]
c00203b1:	e8 7c f3 ff ff       	call   c001f732 <Vm::fpu64ToInternal(unsigned long long)>
c00203b6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203bd:	89 c6                	mov    esi,eax
c00203bf:	89 d7                	mov    edi,edx
c00203c1:	e8 d8 f5 ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c00203c6:	57                   	push   edi
c00203c7:	56                   	push   esi
c00203c8:	52                   	push   edx
c00203c9:	50                   	push   eax
c00203ca:	e8 f2 f4 ff ff       	call   c001f8c1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00203cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00203d3:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00203d6:	83 c4 20             	add    esp,0x20
c00203d9:	e9 74 f7 ff ff       	jmp    c001fb52 <Vm::x87Handler(regs*)+0x77>
c00203de:	80 fa 04             	cmp    dl,0x4
c00203e1:	75 2a                	jne    c002040d <Vm::x87Handler(regs*)+0x932>
c00203e3:	51                   	push   ecx
c00203e4:	51                   	push   ecx
c00203e5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203e8:	ff 36                	push   DWORD PTR [esi]
c00203ea:	e8 43 f3 ff ff       	call   c001f732 <Vm::fpu64ToInternal(unsigned long long)>
c00203ef:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203f6:	89 c6                	mov    esi,eax
c00203f8:	89 d7                	mov    edi,edx
c00203fa:	e8 9f f5 ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c00203ff:	57                   	push   edi
c0020400:	56                   	push   esi
c0020401:	52                   	push   edx
c0020402:	50                   	push   eax
c0020403:	e8 36 f5 ff ff       	call   c001f93e <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020408:	e9 e2 00 00 00       	jmp    c00204ef <Vm::x87Handler(regs*)+0xa14>
c002040d:	80 fa 05             	cmp    dl,0x5
c0020410:	75 28                	jne    c002043a <Vm::x87Handler(regs*)+0x95f>
c0020412:	83 ec 0c             	sub    esp,0xc
c0020415:	6a 00                	push   0x0
c0020417:	e8 82 f5 ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c002041c:	89 c7                	mov    edi,eax
c002041e:	89 d5                	mov    ebp,edx
c0020420:	58                   	pop    eax
c0020421:	5a                   	pop    edx
c0020422:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020425:	ff 36                	push   DWORD PTR [esi]
c0020427:	e8 06 f3 ff ff       	call   c001f732 <Vm::fpu64ToInternal(unsigned long long)>
c002042c:	83 c4 10             	add    esp,0x10
c002042f:	55                   	push   ebp
c0020430:	57                   	push   edi
c0020431:	52                   	push   edx
c0020432:	50                   	push   eax
c0020433:	e8 06 f5 ff ff       	call   c001f93e <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020438:	eb 60                	jmp    c002049a <Vm::x87Handler(regs*)+0x9bf>
c002043a:	80 fa 06             	cmp    dl,0x6
c002043d:	75 2a                	jne    c0020469 <Vm::x87Handler(regs*)+0x98e>
c002043f:	51                   	push   ecx
c0020440:	51                   	push   ecx
c0020441:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020444:	ff 36                	push   DWORD PTR [esi]
c0020446:	e8 e7 f2 ff ff       	call   c001f732 <Vm::fpu64ToInternal(unsigned long long)>
c002044b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020452:	89 c6                	mov    esi,eax
c0020454:	89 d7                	mov    edi,edx
c0020456:	e8 43 f5 ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c002045b:	57                   	push   edi
c002045c:	56                   	push   esi
c002045d:	52                   	push   edx
c002045e:	50                   	push   eax
c002045f:	e8 08 f5 ff ff       	call   c001f96c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020464:	e9 86 00 00 00       	jmp    c00204ef <Vm::x87Handler(regs*)+0xa14>
c0020469:	31 c0                	xor    eax,eax
c002046b:	80 fa 07             	cmp    dl,0x7
c002046e:	0f 85 c8 00 00 00    	jne    c002053c <Vm::x87Handler(regs*)+0xa61>
c0020474:	83 ec 0c             	sub    esp,0xc
c0020477:	6a 00                	push   0x0
c0020479:	e8 20 f5 ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c002047e:	89 c7                	mov    edi,eax
c0020480:	89 d5                	mov    ebp,edx
c0020482:	58                   	pop    eax
c0020483:	5a                   	pop    edx
c0020484:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020487:	ff 36                	push   DWORD PTR [esi]
c0020489:	e8 a4 f2 ff ff       	call   c001f732 <Vm::fpu64ToInternal(unsigned long long)>
c002048e:	83 c4 10             	add    esp,0x10
c0020491:	55                   	push   ebp
c0020492:	57                   	push   edi
c0020493:	52                   	push   edx
c0020494:	50                   	push   eax
c0020495:	e8 d2 f4 ff ff       	call   c001f96c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002049a:	83 c4 0c             	add    esp,0xc
c002049d:	eb 53                	jmp    c00204f2 <Vm::x87Handler(regs*)+0xa17>
c002049f:	31 c0                	xor    eax,eax
c00204a1:	80 fa 02             	cmp    dl,0x2
c00204a4:	0f 85 92 00 00 00    	jne    c002053c <Vm::x87Handler(regs*)+0xa61>
c00204aa:	83 ec 0c             	sub    esp,0xc
c00204ad:	6a 00                	push   0x0
c00204af:	e8 ea f4 ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c00204b4:	59                   	pop    ecx
c00204b5:	5f                   	pop    edi
c00204b6:	52                   	push   edx
c00204b7:	50                   	push   eax
c00204b8:	e8 27 f2 ff ff       	call   c001f6e4 <Vm::fpuInternalTo64(unsigned long long)>
c00204bd:	eb 70                	jmp    c002052f <Vm::x87Handler(regs*)+0xa54>
c00204bf:	31 c0                	xor    eax,eax
c00204c1:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c00204c6:	75 74                	jne    c002053c <Vm::x87Handler(regs*)+0xa61>
c00204c8:	50                   	push   eax
c00204c9:	50                   	push   eax
c00204ca:	0f b7 06             	movzx  eax,WORD PTR [esi]
c00204cd:	31 d2                	xor    edx,edx
c00204cf:	52                   	push   edx
c00204d0:	50                   	push   eax
c00204d1:	e8 f6 f2 ff ff       	call   c001f7cc <Vm::fpuLongToFloat(long long)>
c00204d6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204dd:	89 c6                	mov    esi,eax
c00204df:	89 d7                	mov    edi,edx
c00204e1:	e8 b8 f4 ff ff       	call   c001f99e <Vm::fpuGetReg(int)>
c00204e6:	57                   	push   edi
c00204e7:	56                   	push   esi
c00204e8:	52                   	push   edx
c00204e9:	50                   	push   eax
c00204ea:	e8 5e f4 ff ff       	call   c001f94d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00204ef:	83 c4 1c             	add    esp,0x1c
c00204f2:	52                   	push   edx
c00204f3:	50                   	push   eax
c00204f4:	6a 00                	push   0x0
c00204f6:	e8 e6 f4 ff ff       	call   c001f9e1 <Vm::fpuSetReg(int, unsigned long long)>
c00204fb:	e9 f2 f7 ff ff       	jmp    c001fcf2 <Vm::x87Handler(regs*)+0x217>
c0020500:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020504:	80 fa 05             	cmp    dl,0x5
c0020507:	75 11                	jne    c002051a <Vm::x87Handler(regs*)+0xa3f>
c0020509:	55                   	push   ebp
c002050a:	55                   	push   ebp
c002050b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002050e:	ff 36                	push   DWORD PTR [esi]
c0020510:	e8 81 f2 ff ff       	call   c001f796 <Vm::fpuULongToFloat(unsigned long long)>
c0020515:	e9 cf f7 ff ff       	jmp    c001fce9 <Vm::x87Handler(regs*)+0x20e>
c002051a:	31 c0                	xor    eax,eax
c002051c:	80 fa 07             	cmp    dl,0x7
c002051f:	75 1b                	jne    c002053c <Vm::x87Handler(regs*)+0xa61>
c0020521:	e8 63 f5 ff ff       	call   c001fa89 <Vm::fpuPop()>
c0020526:	51                   	push   ecx
c0020527:	51                   	push   ecx
c0020528:	52                   	push   edx
c0020529:	50                   	push   eax
c002052a:	e8 0c f2 ff ff       	call   c001f73b <Vm::fpuFloatToLong(unsigned long long)>
c002052f:	83 c4 10             	add    esp,0x10
c0020532:	89 06                	mov    DWORD PTR [esi],eax
c0020534:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020537:	e9 f8 f7 ff ff       	jmp    c001fd34 <Vm::x87Handler(regs*)+0x259>
c002053c:	83 c4 1c             	add    esp,0x1c
c002053f:	5b                   	pop    ebx
c0020540:	5e                   	pop    esi
c0020541:	5f                   	pop    edi
c0020542:	5d                   	pop    ebp
c0020543:	c3                   	ret    

c0020544 <__static_initialization_and_destruction_0(int, int)>:
c0020544:	83 ec 0c             	sub    esp,0xc
c0020547:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c002054c:	75 1a                	jne    c0020568 <__static_initialization_and_destruction_0(int, int)+0x24>
c002054e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020556:	75 10                	jne    c0020568 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020558:	83 ec 0c             	sub    esp,0xc
c002055b:	68 00 49 03 c0       	push   0xc0034900
c0020560:	e8 cb 88 00 00       	call   c0028e30 <Vm::_FPUState::_FPUState()>
c0020565:	83 c4 10             	add    esp,0x10
c0020568:	90                   	nop
c0020569:	83 c4 0c             	add    esp,0xc
c002056c:	c3                   	ret    

c002056d <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c002056d:	83 ec 0c             	sub    esp,0xc
c0020570:	83 ec 08             	sub    esp,0x8
c0020573:	68 ff ff 00 00       	push   0xffff
c0020578:	6a 01                	push   0x1
c002057a:	e8 c5 ff ff ff       	call   c0020544 <__static_initialization_and_destruction_0(int, int)>
c002057f:	83 c4 10             	add    esp,0x10
c0020582:	83 c4 0c             	add    esp,0xc
c0020585:	c3                   	ret    

c0020586 <fatWrapperReadDisk>:
c0020586:	83 ec 1c             	sub    esp,0x1c
c0020589:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002058d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020591:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020595:	89 04 24             	mov    DWORD PTR [esp],eax
c0020598:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002059c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00205a0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00205a5:	8b 04 85 60 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce6a0]
c00205ac:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00205b0:	83 ec 0c             	sub    esp,0xc
c00205b3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00205b7:	52                   	push   edx
c00205b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00205bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00205c0:	50                   	push   eax
c00205c1:	e8 3e 64 ff ff       	call   c0016a04 <LogicalDisk::read(unsigned long long, int, void*)>
c00205c6:	83 c4 20             	add    esp,0x20
c00205c9:	83 c4 1c             	add    esp,0x1c
c00205cc:	c3                   	ret    

c00205cd <fatWrapperWriteDisk>:
c00205cd:	83 ec 1c             	sub    esp,0x1c
c00205d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00205d4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00205d8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00205dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00205df:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00205e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00205e7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00205ec:	8b 04 85 60 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce6a0]
c00205f3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00205f7:	83 ec 0c             	sub    esp,0xc
c00205fa:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00205fe:	52                   	push   edx
c00205ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020603:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020607:	50                   	push   eax
c0020608:	e8 63 64 ff ff       	call   c0016a70 <LogicalDisk::write(unsigned long long, int, void*)>
c002060d:	83 c4 20             	add    esp,0x20
c0020610:	83 c4 1c             	add    esp,0x1c
c0020613:	c3                   	ret    

c0020614 <fatWrapperIoctl>:
c0020614:	53                   	push   ebx
c0020615:	83 ec 28             	sub    esp,0x28
c0020618:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002061c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020620:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020624:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020628:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c002062d:	75 31                	jne    c0020660 <fatWrapperIoctl+0x4c>
c002062f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020633:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020637:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002063c:	8b 04 85 60 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce6a0]
c0020643:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020649:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002064f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020653:	66 89 02             	mov    WORD PTR [edx],ax
c0020656:	b8 00 00 00 00       	mov    eax,0x0
c002065b:	e9 b2 00 00 00       	jmp    c0020712 <fatWrapperIoctl+0xfe>
c0020660:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020665:	75 6a                	jne    c00206d1 <fatWrapperIoctl+0xbd>
c0020667:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002066b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002066f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020674:	8b 04 85 60 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce6a0]
c002067b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020681:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020687:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c002068d:	89 c8                	mov    eax,ecx
c002068f:	89 da                	mov    edx,ebx
c0020691:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020695:	c1 e0 0a             	shl    eax,0xa
c0020698:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c002069d:	8b 0c 8d 60 19 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffce6a0]
c00206a4:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00206aa:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00206b0:	89 cb                	mov    ebx,ecx
c00206b2:	c1 fb 1f             	sar    ebx,0x1f
c00206b5:	53                   	push   ebx
c00206b6:	51                   	push   ecx
c00206b7:	52                   	push   edx
c00206b8:	50                   	push   eax
c00206b9:	e8 1e 64 00 00       	call   c0026adc <__udivdi3>
c00206be:	83 c4 10             	add    esp,0x10
c00206c1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00206c5:	89 01                	mov    DWORD PTR [ecx],eax
c00206c7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00206ca:	b8 00 00 00 00       	mov    eax,0x0
c00206cf:	eb 41                	jmp    c0020712 <fatWrapperIoctl+0xfe>
c00206d1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00206d6:	75 07                	jne    c00206df <fatWrapperIoctl+0xcb>
c00206d8:	b8 00 00 00 00       	mov    eax,0x0
c00206dd:	eb 33                	jmp    c0020712 <fatWrapperIoctl+0xfe>
c00206df:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00206e4:	75 19                	jne    c00206ff <fatWrapperIoctl+0xeb>
c00206e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00206ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00206ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00206f2:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00206f8:	b8 00 00 00 00       	mov    eax,0x0
c00206fd:	eb 13                	jmp    c0020712 <fatWrapperIoctl+0xfe>
c00206ff:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020704:	75 07                	jne    c002070d <fatWrapperIoctl+0xf9>
c0020706:	b8 00 00 00 00       	mov    eax,0x0
c002070b:	eb 05                	jmp    c0020712 <fatWrapperIoctl+0xfe>
c002070d:	b8 04 00 00 00       	mov    eax,0x4
c0020712:	83 c4 28             	add    esp,0x28
c0020715:	5b                   	pop    ebx
c0020716:	c3                   	ret    
c0020717:	90                   	nop

c0020718 <FAT::FAT()>:
c0020718:	83 ec 1c             	sub    esp,0x1c
c002071b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002071f:	83 ec 0c             	sub    esp,0xc
c0020722:	50                   	push   eax
c0020723:	e8 3c 2c ff ff       	call   c0013364 <Filesystem::Filesystem()>
c0020728:	83 c4 10             	add    esp,0x10
c002072b:	ba 9c ec 02 c0       	mov    edx,0xc002ec9c
c0020730:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020734:	89 10                	mov    DWORD PTR [eax],edx
c0020736:	c7 05 28 4a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0034a28,0x0
c0020740:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020748:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c002074d:	7f 15                	jg     c0020764 <FAT::FAT()+0x4c>
c002074f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020753:	c7 04 85 c0 49 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcb640],0xffffffff
c002075e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020762:	eb e4                	jmp    c0020748 <FAT::FAT()+0x30>
c0020764:	90                   	nop
c0020765:	83 c4 1c             	add    esp,0x1c
c0020768:	c3                   	ret    
c0020769:	90                   	nop

c002076a <FAT::~FAT()>:
c002076a:	83 ec 0c             	sub    esp,0xc
c002076d:	ba 9c ec 02 c0       	mov    edx,0xc002ec9c
c0020772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020776:	89 10                	mov    DWORD PTR [eax],edx
c0020778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002077c:	83 ec 0c             	sub    esp,0xc
c002077f:	50                   	push   eax
c0020780:	e8 03 2c ff ff       	call   c0013388 <Filesystem::~Filesystem()>
c0020785:	83 c4 10             	add    esp,0x10
c0020788:	90                   	nop
c0020789:	83 c4 0c             	add    esp,0xc
c002078c:	c3                   	ret    
c002078d:	90                   	nop

c002078e <FAT::~FAT()>:
c002078e:	83 ec 0c             	sub    esp,0xc
c0020791:	83 ec 0c             	sub    esp,0xc
c0020794:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020798:	e8 cd ff ff ff       	call   c002076a <FAT::~FAT()>
c002079d:	83 c4 10             	add    esp,0x10
c00207a0:	83 ec 08             	sub    esp,0x8
c00207a3:	6a 08                	push   0x8
c00207a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00207a9:	e8 b8 29 ff ff       	call   c0013166 <operator delete(void*, unsigned long)>
c00207ae:	83 c4 10             	add    esp,0x10
c00207b1:	83 c4 0c             	add    esp,0xc
c00207b4:	c3                   	ret    
c00207b5:	90                   	nop

c00207b6 <FAT::getName()>:
c00207b6:	b8 18 ec 02 c0       	mov    eax,0xc002ec18
c00207bb:	c3                   	ret    

c00207bc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00207bc:	83 ec 1c             	sub    esp,0x1c
c00207bf:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00207c6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00207cb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00207cf:	8b 04 85 c0 49 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcb640]
c00207d6:	83 f8 ff             	cmp    eax,0xffffffff
c00207d9:	75 34                	jne    c002080f <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c00207db:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00207df:	88 c2                	mov    dl,al
c00207e1:	a1 28 4a 03 c0       	mov    eax,ds:0xc0034a28
c00207e6:	01 d0                	add    eax,edx
c00207e8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00207ec:	8b 15 28 4a 03 c0    	mov    edx,DWORD PTR ds:0xc0034a28
c00207f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00207f6:	89 14 85 c0 49 03 c0 	mov    DWORD PTR [eax*4-0x3ffcb640],edx
c00207fd:	a1 28 4a 03 c0       	mov    eax,ds:0xc0034a28
c0020802:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020806:	89 14 85 60 49 03 c0 	mov    DWORD PTR [eax*4-0x3ffcb6a0],edx
c002080d:	eb 17                	jmp    c0020826 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c002080f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020813:	88 c2                	mov    dl,al
c0020815:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020819:	8b 04 85 c0 49 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcb640]
c0020820:	01 d0                	add    eax,edx
c0020822:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020826:	83 ec 04             	sub    esp,0x4
c0020829:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002082d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020831:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020835:	50                   	push   eax
c0020836:	e8 73 64 fe ff       	call   c0006cae <f_getlabel>
c002083b:	83 c4 10             	add    esp,0x10
c002083e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020842:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020847:	75 07                	jne    c0020850 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020849:	b8 00 00 00 00       	mov    eax,0x0
c002084e:	eb 05                	jmp    c0020855 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020850:	b8 01 00 00 00       	mov    eax,0x1
c0020855:	83 c4 1c             	add    esp,0x1c
c0020858:	c3                   	ret    
c0020859:	90                   	nop

c002085a <FAT::setlabel(LogicalDisk*, int, char*)>:
c002085a:	57                   	push   edi
c002085b:	83 ec 58             	sub    esp,0x58
c002085e:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020866:	8d 54 24 10          	lea    edx,[esp+0x10]
c002086a:	b9 0f 00 00 00       	mov    ecx,0xf
c002086f:	b8 00 00 00 00       	mov    eax,0x0
c0020874:	fc                   	cld    
c0020875:	89 d7                	mov    edi,edx
c0020877:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020879:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002087d:	8b 04 85 c0 49 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcb640]
c0020884:	83 f8 ff             	cmp    eax,0xffffffff
c0020887:	75 34                	jne    c00208bd <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020889:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002088d:	88 c2                	mov    dl,al
c002088f:	a1 28 4a 03 c0       	mov    eax,ds:0xc0034a28
c0020894:	01 d0                	add    eax,edx
c0020896:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002089a:	8b 15 28 4a 03 c0    	mov    edx,DWORD PTR ds:0xc0034a28
c00208a0:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00208a4:	89 14 85 c0 49 03 c0 	mov    DWORD PTR [eax*4-0x3ffcb640],edx
c00208ab:	a1 28 4a 03 c0       	mov    eax,ds:0xc0034a28
c00208b0:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00208b4:	89 14 85 60 49 03 c0 	mov    DWORD PTR [eax*4-0x3ffcb6a0],edx
c00208bb:	eb 17                	jmp    c00208d4 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c00208bd:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00208c1:	88 c2                	mov    dl,al
c00208c3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00208c7:	8b 04 85 c0 49 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcb640]
c00208ce:	01 d0                	add    eax,edx
c00208d0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00208d4:	83 ec 08             	sub    esp,0x8
c00208d7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00208db:	8d 44 24 18          	lea    eax,[esp+0x18]
c00208df:	50                   	push   eax
c00208e0:	e8 35 ff fd ff       	call   c000081a <strcat>
c00208e5:	83 c4 10             	add    esp,0x10
c00208e8:	83 ec 0c             	sub    esp,0xc
c00208eb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00208ef:	50                   	push   eax
c00208f0:	e8 d7 65 fe ff       	call   c0006ecc <f_setlabel>
c00208f5:	83 c4 10             	add    esp,0x10
c00208f8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00208fc:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020901:	75 07                	jne    c002090a <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020903:	b8 00 00 00 00       	mov    eax,0x0
c0020908:	eb 05                	jmp    c002090f <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c002090a:	b8 01 00 00 00       	mov    eax,0x1
c002090f:	83 c4 58             	add    esp,0x58
c0020912:	5f                   	pop    edi
c0020913:	c3                   	ret    

c0020914 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020914:	83 ec 2c             	sub    esp,0x2c
c0020917:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002091f:	83 ec 08             	sub    esp,0x8
c0020922:	68 3c ec 02 c0       	push   0xc002ec3c
c0020927:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002092b:	e8 84 fe fd ff       	call   c00007b4 <strcmp>
c0020930:	83 c4 10             	add    esp,0x10
c0020933:	85 c0                	test   eax,eax
c0020935:	0f 94 c0             	sete   al
c0020938:	84 c0                	test   al,al
c002093a:	74 0d                	je     c0020949 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c002093c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020944:	e9 a6 00 00 00       	jmp    c00209ef <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020949:	83 ec 08             	sub    esp,0x8
c002094c:	68 2e ec 02 c0       	push   0xc002ec2e
c0020951:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020955:	e8 5a fe fd ff       	call   c00007b4 <strcmp>
c002095a:	83 c4 10             	add    esp,0x10
c002095d:	85 c0                	test   eax,eax
c002095f:	0f 94 c0             	sete   al
c0020962:	84 c0                	test   al,al
c0020964:	74 0a                	je     c0020970 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020966:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002096e:	eb 7f                	jmp    c00209ef <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020970:	83 ec 08             	sub    esp,0x8
c0020973:	68 34 ec 02 c0       	push   0xc002ec34
c0020978:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002097c:	e8 33 fe fd ff       	call   c00007b4 <strcmp>
c0020981:	83 c4 10             	add    esp,0x10
c0020984:	85 c0                	test   eax,eax
c0020986:	0f 94 c0             	sete   al
c0020989:	84 c0                	test   al,al
c002098b:	74 0a                	je     c0020997 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c002098d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020995:	eb 58                	jmp    c00209ef <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020997:	83 ec 08             	sub    esp,0x8
c002099a:	68 9e 95 02 c0       	push   0xc002959e
c002099f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00209a3:	e8 0c fe fd ff       	call   c00007b4 <strcmp>
c00209a8:	83 c4 10             	add    esp,0x10
c00209ab:	85 c0                	test   eax,eax
c00209ad:	0f 94 c0             	sete   al
c00209b0:	84 c0                	test   al,al
c00209b2:	74 0a                	je     c00209be <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00209b4:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00209bc:	eb 31                	jmp    c00209ef <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00209be:	83 ec 08             	sub    esp,0x8
c00209c1:	68 3a ec 02 c0       	push   0xc002ec3a
c00209c6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00209ca:	e8 e5 fd fd ff       	call   c00007b4 <strcmp>
c00209cf:	83 c4 10             	add    esp,0x10
c00209d2:	85 c0                	test   eax,eax
c00209d4:	0f 94 c0             	sete   al
c00209d7:	84 c0                	test   al,al
c00209d9:	74 0a                	je     c00209e5 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00209db:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00209e3:	eb 0a                	jmp    c00209ef <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00209e5:	b8 08 00 00 00       	mov    eax,0x8
c00209ea:	e9 04 01 00 00       	jmp    c0020af3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00209ef:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00209f6:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00209fb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00209ff:	8b 04 85 c0 49 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcb640]
c0020a06:	83 f8 ff             	cmp    eax,0xffffffff
c0020a09:	75 34                	jne    c0020a3f <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020a0b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020a0f:	88 c2                	mov    dl,al
c0020a11:	a1 28 4a 03 c0       	mov    eax,ds:0xc0034a28
c0020a16:	01 d0                	add    eax,edx
c0020a18:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020a1c:	8b 15 28 4a 03 c0    	mov    edx,DWORD PTR ds:0xc0034a28
c0020a22:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020a26:	89 14 85 c0 49 03 c0 	mov    DWORD PTR [eax*4-0x3ffcb640],edx
c0020a2d:	a1 28 4a 03 c0       	mov    eax,ds:0xc0034a28
c0020a32:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020a36:	89 14 85 60 49 03 c0 	mov    DWORD PTR [eax*4-0x3ffcb6a0],edx
c0020a3d:	eb 17                	jmp    c0020a56 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020a3f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020a43:	88 c2                	mov    dl,al
c0020a45:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020a49:	8b 04 85 c0 49 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcb640]
c0020a50:	01 d0                	add    eax,edx
c0020a52:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020a56:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020a5a:	88 04 24             	mov    BYTE PTR [esp],al
c0020a5d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020a61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020a65:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020a6d:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020a72:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020a7a:	83 ec 0c             	sub    esp,0xc
c0020a7d:	68 00 20 00 00       	push   0x2000
c0020a82:	e8 d5 f4 fe ff       	call   c000ff5c <malloc>
c0020a87:	83 c4 10             	add    esp,0x10
c0020a8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020a8e:	68 00 20 00 00       	push   0x2000
c0020a93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a97:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020a9b:	50                   	push   eax
c0020a9c:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020aa0:	50                   	push   eax
c0020aa1:	e8 db 6e fe ff       	call   c0007981 <f_mkfs>
c0020aa6:	83 c4 10             	add    esp,0x10
c0020aa9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020aad:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020ab2:	75 07                	jne    c0020abb <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020ab4:	b8 00 00 00 00       	mov    eax,0x0
c0020ab9:	eb 38                	jmp    c0020af3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020abb:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020ac0:	75 17                	jne    c0020ad9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020ac2:	83 ec 0c             	sub    esp,0xc
c0020ac5:	68 6c ec 02 c0       	push   0xc002ec6c
c0020aca:	e8 77 27 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0020acf:	83 c4 10             	add    esp,0x10
c0020ad2:	b8 09 00 00 00       	mov    eax,0x9
c0020ad7:	eb 1a                	jmp    c0020af3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020ad9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020add:	83 ec 08             	sub    esp,0x8
c0020ae0:	50                   	push   eax
c0020ae1:	68 40 ec 02 c0       	push   0xc002ec40
c0020ae6:	e8 5b 27 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0020aeb:	83 c4 10             	add    esp,0x10
c0020aee:	b8 01 00 00 00       	mov    eax,0x1
c0020af3:	83 c4 2c             	add    esp,0x2c
c0020af6:	c3                   	ret    
c0020af7:	90                   	nop

c0020af8 <FAT::tryMount(LogicalDisk*, int)>:
c0020af8:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020afe:	a1 28 4a 03 c0       	mov    eax,ds:0xc0034a28
c0020b03:	83 f8 14             	cmp    eax,0x14
c0020b06:	75 17                	jne    c0020b1f <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020b08:	83 ec 0c             	sub    esp,0xc
c0020b0b:	68 52 ec 02 c0       	push   0xc002ec52
c0020b10:	e8 e6 9c ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c0020b15:	83 c4 10             	add    esp,0x10
c0020b18:	b0 00                	mov    al,0x0
c0020b1a:	e9 d7 01 00 00       	jmp    c0020cf6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b1f:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020b26:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020b2c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020b32:	3d 00 02 00 00       	cmp    eax,0x200
c0020b37:	74 07                	je     c0020b40 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020b39:	b0 00                	mov    al,0x0
c0020b3b:	e9 b6 01 00 00       	jmp    c0020cf6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b40:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020b48:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020b4f:	8b 04 85 c0 49 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcb640]
c0020b56:	83 f8 ff             	cmp    eax,0xffffffff
c0020b59:	74 07                	je     c0020b62 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020b5b:	b0 01                	mov    al,0x1
c0020b5d:	e9 94 01 00 00       	jmp    c0020cf6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b62:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020b6c:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020b74:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020b7b:	88 c2                	mov    dl,al
c0020b7d:	a1 28 4a 03 c0       	mov    eax,ds:0xc0034a28
c0020b82:	01 d0                	add    eax,edx
c0020b84:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020b8b:	8b 15 28 4a 03 c0    	mov    edx,DWORD PTR ds:0xc0034a28
c0020b91:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020b98:	89 14 85 c0 49 03 c0 	mov    DWORD PTR [eax*4-0x3ffcb640],edx
c0020b9f:	a1 28 4a 03 c0       	mov    eax,ds:0xc0034a28
c0020ba4:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020bab:	89 14 85 60 49 03 c0 	mov    DWORD PTR [eax*4-0x3ffcb6a0],edx
c0020bb2:	83 ec 0c             	sub    esp,0xc
c0020bb5:	68 54 02 00 00       	push   0x254
c0020bba:	e8 9d f3 fe ff       	call   c000ff5c <malloc>
c0020bbf:	83 c4 10             	add    esp,0x10
c0020bc2:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020bc9:	83 ec 04             	sub    esp,0x4
c0020bcc:	6a 00                	push   0x0
c0020bce:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020bd5:	50                   	push   eax
c0020bd6:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020bdd:	e8 4e 40 fe ff       	call   c0004c30 <f_mount>
c0020be2:	83 c4 10             	add    esp,0x10
c0020be5:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020bec:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020bf4:	74 19                	je     c0020c0f <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020bf6:	83 ec 0c             	sub    esp,0xc
c0020bf9:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020c00:	e8 77 f3 fe ff       	call   c000ff7c <rfree>
c0020c05:	83 c4 10             	add    esp,0x10
c0020c08:	b0 00                	mov    al,0x0
c0020c0a:	e9 e7 00 00 00       	jmp    c0020cf6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020c0f:	83 ec 04             	sub    esp,0x4
c0020c12:	68 00 01 00 00       	push   0x100
c0020c17:	6a 00                	push   0x0
c0020c19:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020c20:	50                   	push   eax
c0020c21:	e8 9e fa fd ff       	call   c00006c4 <memset>
c0020c26:	83 c4 10             	add    esp,0x10
c0020c29:	83 ec 08             	sub    esp,0x8
c0020c2c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020c33:	50                   	push   eax
c0020c34:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020c3b:	50                   	push   eax
c0020c3c:	e8 d9 fb fd ff       	call   c000081a <strcat>
c0020c41:	83 c4 10             	add    esp,0x10
c0020c44:	83 ec 08             	sub    esp,0x8
c0020c47:	68 60 ec 02 c0       	push   0xc002ec60
c0020c4c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020c53:	50                   	push   eax
c0020c54:	e8 c1 fb fd ff       	call   c000081a <strcat>
c0020c59:	83 c4 10             	add    esp,0x10
c0020c5c:	83 ec 04             	sub    esp,0x4
c0020c5f:	6a 01                	push   0x1
c0020c61:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020c68:	50                   	push   eax
c0020c69:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020c6d:	50                   	push   eax
c0020c6e:	e8 27 40 fe ff       	call   c0004c9a <f_open>
c0020c73:	83 c4 10             	add    esp,0x10
c0020c76:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020c7d:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020c84:	85 c0                	test   eax,eax
c0020c86:	74 0a                	je     c0020c92 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020c88:	78 2d                	js     c0020cb7 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020c8a:	83 e8 04             	sub    eax,0x4
c0020c8d:	83 f8 01             	cmp    eax,0x1
c0020c90:	77 25                	ja     c0020cb7 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020c92:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020c9a:	83 ec 0c             	sub    esp,0xc
c0020c9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020ca1:	50                   	push   eax
c0020ca2:	e8 38 4c fe ff       	call   c00058df <f_close>
c0020ca7:	83 c4 10             	add    esp,0x10
c0020caa:	90                   	nop
c0020cab:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020cb3:	74 3a                	je     c0020cef <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020cb5:	eb 2d                	jmp    c0020ce4 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020cb7:	83 ec 0c             	sub    esp,0xc
c0020cba:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020cc1:	e8 b6 f2 fe ff       	call   c000ff7c <rfree>
c0020cc6:	83 c4 10             	add    esp,0x10
c0020cc9:	83 ec 04             	sub    esp,0x4
c0020ccc:	6a 00                	push   0x0
c0020cce:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020cd5:	50                   	push   eax
c0020cd6:	6a 00                	push   0x0
c0020cd8:	e8 53 3f fe ff       	call   c0004c30 <f_mount>
c0020cdd:	83 c4 10             	add    esp,0x10
c0020ce0:	b0 00                	mov    al,0x0
c0020ce2:	eb 12                	jmp    c0020cf6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020ce4:	a1 28 4a 03 c0       	mov    eax,ds:0xc0034a28
c0020ce9:	40                   	inc    eax
c0020cea:	a3 28 4a 03 c0       	mov    ds:0xc0034a28,eax
c0020cef:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020cf6:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020cfc:	c3                   	ret    
c0020cfd:	90                   	nop

c0020cfe <FAT::fixFilepath(char*)>:
c0020cfe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d02:	8a 00                	mov    al,BYTE PTR [eax]
c0020d04:	3c 40                	cmp    al,0x40
c0020d06:	7e 2c                	jle    c0020d34 <FAT::fixFilepath(char*)+0x36>
c0020d08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d0c:	8a 00                	mov    al,BYTE PTR [eax]
c0020d0e:	83 e8 41             	sub    eax,0x41
c0020d11:	88 c2                	mov    dl,al
c0020d13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d17:	88 10                	mov    BYTE PTR [eax],dl
c0020d19:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d1d:	8a 00                	mov    al,BYTE PTR [eax]
c0020d1f:	0f be c0             	movsx  eax,al
c0020d22:	8b 04 85 c0 49 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcb640]
c0020d29:	83 c0 30             	add    eax,0x30
c0020d2c:	88 c2                	mov    dl,al
c0020d2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d32:	88 10                	mov    BYTE PTR [eax],dl
c0020d34:	90                   	nop
c0020d35:	c3                   	ret    

c0020d36 <FAT::open(char const*, void**, FileOpenMode)>:
c0020d36:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020d3c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020d44:	74 0a                	je     c0020d50 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020d46:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020d4e:	75 0a                	jne    c0020d5a <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020d50:	b8 04 00 00 00       	mov    eax,0x4
c0020d55:	e9 fd 00 00 00       	jmp    c0020e57 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020d5a:	83 ec 08             	sub    esp,0x8
c0020d5d:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020d64:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020d68:	50                   	push   eax
c0020d69:	e8 f5 f9 fd ff       	call   c0000763 <strcpy>
c0020d6e:	83 c4 10             	add    esp,0x10
c0020d71:	83 ec 08             	sub    esp,0x8
c0020d74:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020d78:	50                   	push   eax
c0020d79:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020d80:	e8 79 ff ff ff       	call   c0020cfe <FAT::fixFilepath(char*)>
c0020d85:	83 c4 10             	add    esp,0x10
c0020d88:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020d90:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020d97:	83 e0 01             	and    eax,0x1
c0020d9a:	74 08                	je     c0020da4 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020d9c:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020da4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020dab:	83 e0 04             	and    eax,0x4
c0020dae:	74 10                	je     c0020dc0 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020db0:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020db8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020dc0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020dc7:	83 e0 02             	and    eax,0x2
c0020dca:	74 08                	je     c0020dd4 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020dcc:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020dd4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020ddb:	83 e0 08             	and    eax,0x8
c0020dde:	74 08                	je     c0020de8 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020de0:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020de8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020def:	83 e0 10             	and    eax,0x10
c0020df2:	74 08                	je     c0020dfc <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020df4:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020dfc:	83 ec 0c             	sub    esp,0xc
c0020dff:	68 50 02 00 00       	push   0x250
c0020e04:	e8 53 f1 fe ff       	call   c000ff5c <malloc>
c0020e09:	83 c4 10             	add    esp,0x10
c0020e0c:	89 c2                	mov    edx,eax
c0020e0e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020e15:	89 10                	mov    DWORD PTR [eax],edx
c0020e17:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020e1f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020e26:	8b 00                	mov    eax,DWORD PTR [eax]
c0020e28:	83 ec 04             	sub    esp,0x4
c0020e2b:	52                   	push   edx
c0020e2c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020e30:	52                   	push   edx
c0020e31:	50                   	push   eax
c0020e32:	e8 63 3e fe ff       	call   c0004c9a <f_open>
c0020e37:	83 c4 10             	add    esp,0x10
c0020e3a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020e41:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020e49:	74 07                	je     c0020e52 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020e4b:	b8 01 00 00 00       	mov    eax,0x1
c0020e50:	eb 05                	jmp    c0020e57 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020e52:	b8 00 00 00 00       	mov    eax,0x0
c0020e57:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020e5d:	c3                   	ret    

c0020e5e <FAT::openDir(char const*, void**)>:
c0020e5e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020e64:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020e6c:	74 0a                	je     c0020e78 <FAT::openDir(char const*, void**)+0x1a>
c0020e6e:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020e76:	75 07                	jne    c0020e7f <FAT::openDir(char const*, void**)+0x21>
c0020e78:	b8 04 00 00 00       	mov    eax,0x4
c0020e7d:	eb 7d                	jmp    c0020efc <FAT::openDir(char const*, void**)+0x9e>
c0020e7f:	83 ec 08             	sub    esp,0x8
c0020e82:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020e89:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020e8d:	50                   	push   eax
c0020e8e:	e8 d0 f8 fd ff       	call   c0000763 <strcpy>
c0020e93:	83 c4 10             	add    esp,0x10
c0020e96:	83 ec 08             	sub    esp,0x8
c0020e99:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020e9d:	50                   	push   eax
c0020e9e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020ea5:	e8 54 fe ff ff       	call   c0020cfe <FAT::fixFilepath(char*)>
c0020eaa:	83 c4 10             	add    esp,0x10
c0020ead:	83 ec 0c             	sub    esp,0xc
c0020eb0:	6a 4c                	push   0x4c
c0020eb2:	e8 a5 f0 fe ff       	call   c000ff5c <malloc>
c0020eb7:	83 c4 10             	add    esp,0x10
c0020eba:	89 c2                	mov    edx,eax
c0020ebc:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020ec3:	89 10                	mov    DWORD PTR [eax],edx
c0020ec5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020ecc:	8b 00                	mov    eax,DWORD PTR [eax]
c0020ece:	83 ec 08             	sub    esp,0x8
c0020ed1:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020ed5:	52                   	push   edx
c0020ed6:	50                   	push   eax
c0020ed7:	e8 0f 4f fe ff       	call   c0005deb <f_opendir>
c0020edc:	83 c4 10             	add    esp,0x10
c0020edf:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020ee6:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020eee:	74 07                	je     c0020ef7 <FAT::openDir(char const*, void**)+0x99>
c0020ef0:	b8 01 00 00 00       	mov    eax,0x1
c0020ef5:	eb 05                	jmp    c0020efc <FAT::openDir(char const*, void**)+0x9e>
c0020ef7:	b8 00 00 00 00       	mov    eax,0x0
c0020efc:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020f02:	c3                   	ret    
c0020f03:	90                   	nop

c0020f04 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020f04:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020f0a:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020f12:	74 0a                	je     c0020f1e <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020f14:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020f1c:	75 0a                	jne    c0020f28 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020f1e:	b8 04 00 00 00       	mov    eax,0x4
c0020f23:	e9 db 00 00 00       	jmp    c0021003 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020f28:	83 ec 08             	sub    esp,0x8
c0020f2b:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020f32:	50                   	push   eax
c0020f33:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020f3a:	e8 e8 4f fe ff       	call   c0005f27 <f_readdir>
c0020f3f:	83 c4 10             	add    esp,0x10
c0020f42:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020f49:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020f4f:	83 ec 0c             	sub    esp,0xc
c0020f52:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020f59:	83 c0 1a             	add    eax,0x1a
c0020f5c:	50                   	push   eax
c0020f5d:	e8 7f f7 fd ff       	call   c00006e1 <strlen>
c0020f62:	83 c4 10             	add    esp,0x10
c0020f65:	ba 00 00 00 00       	mov    edx,0x0
c0020f6a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020f6e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020f72:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020f79:	0f b6 c0             	movzx  eax,al
c0020f7c:	83 e0 10             	and    eax,0x10
c0020f7f:	74 07                	je     c0020f88 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020f81:	b8 02 00 00 00       	mov    eax,0x2
c0020f86:	eb 05                	jmp    c0020f8d <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020f88:	b8 01 00 00 00       	mov    eax,0x1
c0020f8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020f91:	83 ec 08             	sub    esp,0x8
c0020f94:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020f9b:	83 c0 1a             	add    eax,0x1a
c0020f9e:	50                   	push   eax
c0020f9f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020fa3:	83 c0 10             	add    eax,0x10
c0020fa6:	50                   	push   eax
c0020fa7:	e8 b7 f7 fd ff       	call   c0000763 <strcpy>
c0020fac:	83 c4 10             	add    esp,0x10
c0020faf:	83 ec 04             	sub    esp,0x4
c0020fb2:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020fb9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020fbd:	50                   	push   eax
c0020fbe:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020fc5:	e8 d6 f6 fd ff       	call   c00006a0 <memcpy>
c0020fca:	83 c4 10             	add    esp,0x10
c0020fcd:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020fd4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020fda:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020fe1:	84 c0                	test   al,al
c0020fe3:	75 07                	jne    c0020fec <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020fe5:	b8 07 00 00 00       	mov    eax,0x7
c0020fea:	eb 17                	jmp    c0021003 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020fec:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020ff3:	85 c0                	test   eax,eax
c0020ff5:	75 07                	jne    c0020ffe <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020ff7:	b8 00 00 00 00       	mov    eax,0x0
c0020ffc:	eb 05                	jmp    c0021003 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020ffe:	b8 01 00 00 00       	mov    eax,0x1
c0021003:	81 c4 3c 02 00 00    	add    esp,0x23c
c0021009:	c3                   	ret    

c002100a <FAT::read(void*, unsigned long, void*, int*)>:
c002100a:	83 ec 1c             	sub    esp,0x1c
c002100d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021012:	74 07                	je     c002101b <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0021014:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0021019:	75 07                	jne    c0021022 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c002101b:	b8 04 00 00 00       	mov    eax,0x4
c0021020:	eb 3d                	jmp    c002105f <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0021022:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021026:	50                   	push   eax
c0021027:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002102b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002102f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021033:	e8 20 41 fe ff       	call   c0005158 <f_read>
c0021038:	83 c4 10             	add    esp,0x10
c002103b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002103f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021043:	89 c2                	mov    edx,eax
c0021045:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021049:	89 10                	mov    DWORD PTR [eax],edx
c002104b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002104f:	85 c0                	test   eax,eax
c0021051:	75 07                	jne    c002105a <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0021053:	b8 00 00 00 00       	mov    eax,0x0
c0021058:	eb 05                	jmp    c002105f <FAT::read(void*, unsigned long, void*, int*)+0x55>
c002105a:	b8 01 00 00 00       	mov    eax,0x1
c002105f:	83 c4 1c             	add    esp,0x1c
c0021062:	c3                   	ret    
c0021063:	90                   	nop

c0021064 <FAT::write(void*, unsigned long, void*, int*)>:
c0021064:	83 ec 1c             	sub    esp,0x1c
c0021067:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002106c:	74 07                	je     c0021075 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c002106e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0021073:	75 07                	jne    c002107c <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0021075:	b8 04 00 00 00       	mov    eax,0x4
c002107a:	eb 3d                	jmp    c00210b9 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c002107c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021080:	50                   	push   eax
c0021081:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021085:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0021089:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002108d:	e8 63 43 fe ff       	call   c00053f5 <f_write>
c0021092:	83 c4 10             	add    esp,0x10
c0021095:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021099:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002109d:	89 c2                	mov    edx,eax
c002109f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00210a3:	89 10                	mov    DWORD PTR [eax],edx
c00210a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00210a9:	85 c0                	test   eax,eax
c00210ab:	75 07                	jne    c00210b4 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c00210ad:	b8 00 00 00 00       	mov    eax,0x0
c00210b2:	eb 05                	jmp    c00210b9 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00210b4:	b8 01 00 00 00       	mov    eax,0x1
c00210b9:	83 c4 1c             	add    esp,0x1c
c00210bc:	c3                   	ret    
c00210bd:	90                   	nop

c00210be <FAT::close(void*)>:
c00210be:	83 ec 1c             	sub    esp,0x1c
c00210c1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00210c6:	75 07                	jne    c00210cf <FAT::close(void*)+0x11>
c00210c8:	b8 04 00 00 00       	mov    eax,0x4
c00210cd:	eb 36                	jmp    c0021105 <FAT::close(void*)+0x47>
c00210cf:	83 ec 0c             	sub    esp,0xc
c00210d2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00210d6:	e8 04 48 fe ff       	call   c00058df <f_close>
c00210db:	83 c4 10             	add    esp,0x10
c00210de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00210e2:	83 ec 0c             	sub    esp,0xc
c00210e5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00210e9:	e8 7e ee fe ff       	call   c000ff6c <free>
c00210ee:	83 c4 10             	add    esp,0x10
c00210f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00210f5:	85 c0                	test   eax,eax
c00210f7:	75 07                	jne    c0021100 <FAT::close(void*)+0x42>
c00210f9:	b8 00 00 00 00       	mov    eax,0x0
c00210fe:	eb 05                	jmp    c0021105 <FAT::close(void*)+0x47>
c0021100:	b8 01 00 00 00       	mov    eax,0x1
c0021105:	83 c4 1c             	add    esp,0x1c
c0021108:	c3                   	ret    
c0021109:	90                   	nop

c002110a <FAT::closeDir(void*)>:
c002110a:	83 ec 1c             	sub    esp,0x1c
c002110d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021112:	75 07                	jne    c002111b <FAT::closeDir(void*)+0x11>
c0021114:	b8 04 00 00 00       	mov    eax,0x4
c0021119:	eb 36                	jmp    c0021151 <FAT::closeDir(void*)+0x47>
c002111b:	83 ec 0c             	sub    esp,0xc
c002111e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021122:	e8 db 4d fe ff       	call   c0005f02 <f_closedir>
c0021127:	83 c4 10             	add    esp,0x10
c002112a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002112e:	83 ec 0c             	sub    esp,0xc
c0021131:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021135:	e8 32 ee fe ff       	call   c000ff6c <free>
c002113a:	83 c4 10             	add    esp,0x10
c002113d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021141:	85 c0                	test   eax,eax
c0021143:	75 07                	jne    c002114c <FAT::closeDir(void*)+0x42>
c0021145:	b8 00 00 00 00       	mov    eax,0x0
c002114a:	eb 05                	jmp    c0021151 <FAT::closeDir(void*)+0x47>
c002114c:	b8 01 00 00 00       	mov    eax,0x1
c0021151:	83 c4 1c             	add    esp,0x1c
c0021154:	c3                   	ret    
c0021155:	90                   	nop

c0021156 <FAT::seek(void*, unsigned long long)>:
c0021156:	83 ec 2c             	sub    esp,0x2c
c0021159:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002115d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021161:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021165:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021169:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c002116e:	75 07                	jne    c0021177 <FAT::seek(void*, unsigned long long)+0x21>
c0021170:	b8 04 00 00 00       	mov    eax,0x4
c0021175:	eb 2f                	jmp    c00211a6 <FAT::seek(void*, unsigned long long)+0x50>
c0021177:	83 ec 04             	sub    esp,0x4
c002117a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002117e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021182:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0021186:	e8 88 47 fe ff       	call   c0005913 <f_lseek>
c002118b:	83 c4 10             	add    esp,0x10
c002118e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021192:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021196:	85 c0                	test   eax,eax
c0021198:	75 07                	jne    c00211a1 <FAT::seek(void*, unsigned long long)+0x4b>
c002119a:	b8 00 00 00 00       	mov    eax,0x0
c002119f:	eb 05                	jmp    c00211a6 <FAT::seek(void*, unsigned long long)+0x50>
c00211a1:	b8 01 00 00 00       	mov    eax,0x1
c00211a6:	83 c4 2c             	add    esp,0x2c
c00211a9:	c3                   	ret    

c00211aa <FAT::tell(void*, unsigned long long*)>:
c00211aa:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00211af:	75 06                	jne    c00211b7 <FAT::tell(void*, unsigned long long*)+0xd>
c00211b1:	b8 04 00 00 00       	mov    eax,0x4
c00211b6:	c3                   	ret    
c00211b7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00211bc:	75 06                	jne    c00211c4 <FAT::tell(void*, unsigned long long*)+0x1a>
c00211be:	b8 04 00 00 00       	mov    eax,0x4
c00211c3:	c3                   	ret    
c00211c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00211c8:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c00211cb:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00211ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00211d2:	89 01                	mov    DWORD PTR [ecx],eax
c00211d4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00211d7:	b8 00 00 00 00       	mov    eax,0x0
c00211dc:	c3                   	ret    
c00211dd:	90                   	nop

c00211de <FAT::stat(void*, unsigned long long*)>:
c00211de:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00211e3:	75 06                	jne    c00211eb <FAT::stat(void*, unsigned long long*)+0xd>
c00211e5:	b8 04 00 00 00       	mov    eax,0x4
c00211ea:	c3                   	ret    
c00211eb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00211f0:	75 06                	jne    c00211f8 <FAT::stat(void*, unsigned long long*)+0x1a>
c00211f2:	b8 04 00 00 00       	mov    eax,0x4
c00211f7:	c3                   	ret    
c00211f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00211fc:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00211ff:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021202:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021206:	89 01                	mov    DWORD PTR [ecx],eax
c0021208:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002120b:	b8 00 00 00 00       	mov    eax,0x0
c0021210:	c3                   	ret    
c0021211:	90                   	nop

c0021212 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021212:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021218:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0021220:	75 0a                	jne    c002122c <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021222:	b8 04 00 00 00       	mov    eax,0x4
c0021227:	e9 c9 00 00 00       	jmp    c00212f5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002122c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021234:	75 0a                	jne    c0021240 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021236:	b8 04 00 00 00       	mov    eax,0x4
c002123b:	e9 b5 00 00 00       	jmp    c00212f5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021240:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021248:	75 0a                	jne    c0021254 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c002124a:	b8 04 00 00 00       	mov    eax,0x4
c002124f:	e9 a1 00 00 00       	jmp    c00212f5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021254:	83 ec 08             	sub    esp,0x8
c0021257:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002125e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021265:	50                   	push   eax
c0021266:	e8 f8 f4 fd ff       	call   c0000763 <strcpy>
c002126b:	83 c4 10             	add    esp,0x10
c002126e:	83 ec 08             	sub    esp,0x8
c0021271:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0021278:	50                   	push   eax
c0021279:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021280:	e8 79 fa ff ff       	call   c0020cfe <FAT::fixFilepath(char*)>
c0021285:	83 c4 10             	add    esp,0x10
c0021288:	83 ec 08             	sub    esp,0x8
c002128b:	8d 44 24 08          	lea    eax,[esp+0x8]
c002128f:	50                   	push   eax
c0021290:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021297:	50                   	push   eax
c0021298:	e8 38 4d fe ff       	call   c0005fd5 <f_stat>
c002129d:	83 c4 10             	add    esp,0x10
c00212a0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00212a7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00212ae:	85 c0                	test   eax,eax
c00212b0:	74 07                	je     c00212b9 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c00212b2:	83 f8 04             	cmp    eax,0x4
c00212b5:	74 32                	je     c00212e9 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c00212b7:	eb 37                	jmp    c00212f0 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c00212b9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00212bd:	0f b6 c0             	movzx  eax,al
c00212c0:	83 e0 10             	and    eax,0x10
c00212c3:	0f 95 c2             	setne  dl
c00212c6:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00212cd:	88 10                	mov    BYTE PTR [eax],dl
c00212cf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00212d2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00212d6:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00212dd:	89 01                	mov    DWORD PTR [ecx],eax
c00212df:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00212e2:	b8 00 00 00 00       	mov    eax,0x0
c00212e7:	eb 0c                	jmp    c00212f5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212e9:	b8 02 00 00 00       	mov    eax,0x2
c00212ee:	eb 05                	jmp    c00212f5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212f0:	b8 01 00 00 00       	mov    eax,0x1
c00212f5:	81 c4 2c 02 00 00    	add    esp,0x22c
c00212fb:	c3                   	ret    

c00212fc <FAT::unlink(char const*)>:
c00212fc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021302:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002130a:	75 07                	jne    c0021313 <FAT::unlink(char const*)+0x17>
c002130c:	b8 04 00 00 00       	mov    eax,0x4
c0021311:	eb 5c                	jmp    c002136f <FAT::unlink(char const*)+0x73>
c0021313:	83 ec 08             	sub    esp,0x8
c0021316:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002131d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021321:	50                   	push   eax
c0021322:	e8 3c f4 fd ff       	call   c0000763 <strcpy>
c0021327:	83 c4 10             	add    esp,0x10
c002132a:	83 ec 08             	sub    esp,0x8
c002132d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021331:	50                   	push   eax
c0021332:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021339:	e8 c0 f9 ff ff       	call   c0020cfe <FAT::fixFilepath(char*)>
c002133e:	83 c4 10             	add    esp,0x10
c0021341:	83 ec 0c             	sub    esp,0xc
c0021344:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021348:	50                   	push   eax
c0021349:	e8 22 50 fe ff       	call   c0006370 <f_unlink>
c002134e:	83 c4 10             	add    esp,0x10
c0021351:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021358:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002135f:	85 c0                	test   eax,eax
c0021361:	75 07                	jne    c002136a <FAT::unlink(char const*)+0x6e>
c0021363:	b8 00 00 00 00       	mov    eax,0x0
c0021368:	eb 05                	jmp    c002136f <FAT::unlink(char const*)+0x73>
c002136a:	b8 01 00 00 00       	mov    eax,0x1
c002136f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021375:	c3                   	ret    

c0021376 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021376:	81 ec 2c 01 00 00    	sub    esp,0x12c
c002137c:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021383:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c002138a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002138e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021392:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c002139a:	75 0a                	jne    c00213a6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c002139c:	b8 04 00 00 00       	mov    eax,0x4
c00213a1:	e9 1c 01 00 00       	jmp    c00214c2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00213a6:	83 ec 08             	sub    esp,0x8
c00213a9:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00213b0:	8d 44 24 24          	lea    eax,[esp+0x24]
c00213b4:	50                   	push   eax
c00213b5:	e8 a9 f3 fd ff       	call   c0000763 <strcpy>
c00213ba:	83 c4 10             	add    esp,0x10
c00213bd:	83 ec 08             	sub    esp,0x8
c00213c0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00213c4:	50                   	push   eax
c00213c5:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00213cc:	e8 2d f9 ff ff       	call   c0020cfe <FAT::fixFilepath(char*)>
c00213d1:	83 c4 10             	add    esp,0x10
c00213d4:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00213dc:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00213e4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213e9:	83 e0 01             	and    eax,0x1
c00213ec:	74 08                	je     c00213f6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c00213ee:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00213f6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213fb:	83 e0 02             	and    eax,0x2
c00213fe:	74 08                	je     c0021408 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021400:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021408:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002140d:	83 e0 04             	and    eax,0x4
c0021410:	74 08                	je     c002141a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021412:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c002141a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002141f:	83 e0 08             	and    eax,0x8
c0021422:	74 08                	je     c002142c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021424:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c002142c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021431:	83 e0 01             	and    eax,0x1
c0021434:	74 08                	je     c002143e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021436:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c002143e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021443:	83 e0 02             	and    eax,0x2
c0021446:	74 08                	je     c0021450 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021448:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021450:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021455:	83 e0 04             	and    eax,0x4
c0021458:	74 08                	je     c0021462 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c002145a:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021462:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021467:	83 e0 08             	and    eax,0x8
c002146a:	74 08                	je     c0021474 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c002146c:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021474:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c002147b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021482:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c002148a:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021492:	83 ec 04             	sub    esp,0x4
c0021495:	52                   	push   edx
c0021496:	50                   	push   eax
c0021497:	8d 44 24 24          	lea    eax,[esp+0x24]
c002149b:	50                   	push   eax
c002149c:	e8 17 56 fe ff       	call   c0006ab8 <f_chmod>
c00214a1:	83 c4 10             	add    esp,0x10
c00214a4:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00214ab:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00214b2:	85 c0                	test   eax,eax
c00214b4:	75 07                	jne    c00214bd <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c00214b6:	b8 00 00 00 00       	mov    eax,0x0
c00214bb:	eb 05                	jmp    c00214c2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00214bd:	b8 01 00 00 00       	mov    eax,0x1
c00214c2:	81 c4 2c 01 00 00    	add    esp,0x12c
c00214c8:	c3                   	ret    
c00214c9:	90                   	nop

c00214ca <FAT::rename(char const*, char const*)>:
c00214ca:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00214d0:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00214d8:	74 0a                	je     c00214e4 <FAT::rename(char const*, char const*)+0x1a>
c00214da:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00214e2:	75 0a                	jne    c00214ee <FAT::rename(char const*, char const*)+0x24>
c00214e4:	b8 04 00 00 00       	mov    eax,0x4
c00214e9:	e9 98 00 00 00       	jmp    c0021586 <FAT::rename(char const*, char const*)+0xbc>
c00214ee:	83 ec 08             	sub    esp,0x8
c00214f1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214f8:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00214ff:	50                   	push   eax
c0021500:	e8 5e f2 fd ff       	call   c0000763 <strcpy>
c0021505:	83 c4 10             	add    esp,0x10
c0021508:	83 ec 08             	sub    esp,0x8
c002150b:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021512:	50                   	push   eax
c0021513:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002151a:	e8 df f7 ff ff       	call   c0020cfe <FAT::fixFilepath(char*)>
c002151f:	83 c4 10             	add    esp,0x10
c0021522:	83 ec 08             	sub    esp,0x8
c0021525:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c002152c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021530:	50                   	push   eax
c0021531:	e8 2d f2 fd ff       	call   c0000763 <strcpy>
c0021536:	83 c4 10             	add    esp,0x10
c0021539:	83 ec 08             	sub    esp,0x8
c002153c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021540:	50                   	push   eax
c0021541:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021548:	e8 b1 f7 ff ff       	call   c0020cfe <FAT::fixFilepath(char*)>
c002154d:	83 c4 10             	add    esp,0x10
c0021550:	83 ec 08             	sub    esp,0x8
c0021553:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021557:	50                   	push   eax
c0021558:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002155f:	50                   	push   eax
c0021560:	e8 30 52 fe ff       	call   c0006795 <f_rename>
c0021565:	83 c4 10             	add    esp,0x10
c0021568:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c002156f:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021576:	85 c0                	test   eax,eax
c0021578:	75 07                	jne    c0021581 <FAT::rename(char const*, char const*)+0xb7>
c002157a:	b8 00 00 00 00       	mov    eax,0x0
c002157f:	eb 05                	jmp    c0021586 <FAT::rename(char const*, char const*)+0xbc>
c0021581:	b8 01 00 00 00       	mov    eax,0x1
c0021586:	81 c4 1c 02 00 00    	add    esp,0x21c
c002158c:	c3                   	ret    
c002158d:	90                   	nop

c002158e <FAT::mkdir(char const*)>:
c002158e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021594:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002159c:	75 07                	jne    c00215a5 <FAT::mkdir(char const*)+0x17>
c002159e:	b8 04 00 00 00       	mov    eax,0x4
c00215a3:	eb 5c                	jmp    c0021601 <FAT::mkdir(char const*)+0x73>
c00215a5:	83 ec 08             	sub    esp,0x8
c00215a8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00215af:	8d 44 24 18          	lea    eax,[esp+0x18]
c00215b3:	50                   	push   eax
c00215b4:	e8 aa f1 fd ff       	call   c0000763 <strcpy>
c00215b9:	83 c4 10             	add    esp,0x10
c00215bc:	83 ec 08             	sub    esp,0x8
c00215bf:	8d 44 24 14          	lea    eax,[esp+0x14]
c00215c3:	50                   	push   eax
c00215c4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00215cb:	e8 2e f7 ff ff       	call   c0020cfe <FAT::fixFilepath(char*)>
c00215d0:	83 c4 10             	add    esp,0x10
c00215d3:	83 ec 0c             	sub    esp,0xc
c00215d6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00215da:	50                   	push   eax
c00215db:	e8 3d 4f fe ff       	call   c000651d <f_mkdir>
c00215e0:	83 c4 10             	add    esp,0x10
c00215e3:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00215ea:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00215f1:	85 c0                	test   eax,eax
c00215f3:	75 07                	jne    c00215fc <FAT::mkdir(char const*)+0x6e>
c00215f5:	b8 00 00 00 00       	mov    eax,0x0
c00215fa:	eb 05                	jmp    c0021601 <FAT::mkdir(char const*)+0x73>
c00215fc:	b8 01 00 00 00       	mov    eax,0x1
c0021601:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021607:	c3                   	ret    

c0021608 <FAT::exists(char const*)>:
c0021608:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002160e:	83 ec 08             	sub    esp,0x8
c0021611:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021618:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002161c:	50                   	push   eax
c002161d:	e8 41 f1 fd ff       	call   c0000763 <strcpy>
c0021622:	83 c4 10             	add    esp,0x10
c0021625:	83 ec 08             	sub    esp,0x8
c0021628:	8d 44 24 08          	lea    eax,[esp+0x8]
c002162c:	50                   	push   eax
c002162d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021634:	e8 c5 f6 ff ff       	call   c0020cfe <FAT::fixFilepath(char*)>
c0021639:	83 c4 10             	add    esp,0x10
c002163c:	83 ec 08             	sub    esp,0x8
c002163f:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021646:	50                   	push   eax
c0021647:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002164b:	50                   	push   eax
c002164c:	e8 84 49 fe ff       	call   c0005fd5 <f_stat>
c0021651:	83 c4 10             	add    esp,0x10
c0021654:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002165b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021662:	85 c0                	test   eax,eax
c0021664:	75 04                	jne    c002166a <FAT::exists(char const*)+0x62>
c0021666:	b0 01                	mov    al,0x1
c0021668:	eb 02                	jmp    c002166c <FAT::exists(char const*)+0x64>
c002166a:	b0 00                	mov    al,0x0
c002166c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021672:	c3                   	ret    
c0021673:	90                   	nop

c0021674 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021674:	55                   	push   ebp
c0021675:	31 c9                	xor    ecx,ecx
c0021677:	57                   	push   edi
c0021678:	56                   	push   esi
c0021679:	53                   	push   ebx
c002167a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c002167e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021682:	89 eb                	mov    ebx,ebp
c0021684:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021688:	39 ce                	cmp    esi,ecx
c002168a:	7e 17                	jle    c00216a3 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c002168c:	31 d2                	xor    edx,edx
c002168e:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021692:	7d 13                	jge    c00216a7 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021694:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021698:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002169b:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c002169e:	75 0d                	jne    c00216ad <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00216a0:	42                   	inc    edx
c00216a1:	eb eb                	jmp    c002168e <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00216a3:	31 c0                	xor    eax,eax
c00216a5:	eb 0a                	jmp    c00216b1 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00216a7:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00216ab:	eb 04                	jmp    c00216b1 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00216ad:	41                   	inc    ecx
c00216ae:	43                   	inc    ebx
c00216af:	eb d7                	jmp    c0021688 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00216b1:	5b                   	pop    ebx
c00216b2:	5e                   	pop    esi
c00216b3:	5f                   	pop    edi
c00216b4:	5d                   	pop    ebp
c00216b5:	c3                   	ret    

c00216b6 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00216b6:	56                   	push   esi
c00216b7:	53                   	push   ebx
c00216b8:	52                   	push   edx
c00216b9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00216bd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00216c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00216c5:	39 0d 40 52 03 c0    	cmp    DWORD PTR ds:0xc0035240,ecx
c00216cb:	75 08                	jne    c00216d5 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c00216cd:	38 05 34 09 03 c0    	cmp    BYTE PTR ds:0xc0030934,al
c00216d3:	74 2b                	je     c0021700 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c00216d5:	83 ec 0c             	sub    esp,0xc
c00216d8:	a2 34 09 03 c0       	mov    ds:0xc0030934,al
c00216dd:	68 40 4a 03 c0       	push   0xc0034a40
c00216e2:	0f be c0             	movsx  eax,al
c00216e5:	6a 01                	push   0x1
c00216e7:	89 0d 40 52 03 c0    	mov    DWORD PTR ds:0xc0035240,ecx
c00216ed:	31 db                	xor    ebx,ebx
c00216ef:	53                   	push   ebx
c00216f0:	51                   	push   ecx
c00216f1:	ff 34 85 5c 18 03 c0 	push   DWORD PTR [eax*4-0x3ffce7a4]
c00216f8:	e8 07 53 ff ff       	call   c0016a04 <LogicalDisk::read(unsigned long long, int, void*)>
c00216fd:	83 c4 20             	add    esp,0x20
c0021700:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0021708:	c7 44 24 14 40 4a 03 c0 	mov    DWORD PTR [esp+0x14],0xc0034a40
c0021710:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021714:	58                   	pop    eax
c0021715:	5b                   	pop    ebx
c0021716:	5e                   	pop    esi
c0021717:	e9 84 ef fd ff       	jmp    c00006a0 <memcpy>

c002171c <readRoot(unsigned int*, unsigned int*, char)>:
c002171c:	81 ec 40 08 00 00    	sub    esp,0x840
c0021722:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c002172a:	50                   	push   eax
c002172b:	8d 44 24 38          	lea    eax,[esp+0x38]
c002172f:	50                   	push   eax
c0021730:	6a 10                	push   0x10
c0021732:	e8 7f ff ff ff       	call   c00216b6 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021737:	83 c4 0c             	add    esp,0xc
c002173a:	6a 22                	push   0x22
c002173c:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021743:	50                   	push   eax
c0021744:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021748:	50                   	push   eax
c0021749:	e8 52 ef fd ff       	call   c00006a0 <memcpy>
c002174e:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021755:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021759:	89 10                	mov    DWORD PTR [eax],edx
c002175b:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021762:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021766:	89 10                	mov    DWORD PTR [eax],edx
c0021768:	b0 01                	mov    al,0x1
c002176a:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021770:	c3                   	ret    

c0021771 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021771:	55                   	push   ebp
c0021772:	57                   	push   edi
c0021773:	56                   	push   esi
c0021774:	53                   	push   ebx
c0021775:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002177b:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021782:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021789:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002178d:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021791:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021795:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021799:	75 03                	jne    c002179e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c002179b:	83 c3 02             	add    ebx,0x2
c002179e:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c00217a1:	75 03                	jne    c00217a6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c00217a3:	43                   	inc    ebx
c00217a4:	eb f8                	jmp    c002179e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00217a6:	51                   	push   ecx
c00217a7:	68 00 01 00 00       	push   0x100
c00217ac:	6a 00                	push   0x0
c00217ae:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00217b2:	50                   	push   eax
c00217b3:	e8 0c ef fd ff       	call   c00006c4 <memset>
c00217b8:	83 c4 10             	add    esp,0x10
c00217bb:	31 d2                	xor    edx,edx
c00217bd:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00217c0:	84 c0                	test   al,al
c00217c2:	74 21                	je     c00217e5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c00217c4:	3c 2f                	cmp    al,0x2f
c00217c6:	75 0b                	jne    c00217d3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c00217c8:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c00217cc:	bd 01 00 00 00       	mov    ebp,0x1
c00217d1:	eb 14                	jmp    c00217e7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c00217d3:	8d 48 9f             	lea    ecx,[eax-0x61]
c00217d6:	80 f9 19             	cmp    cl,0x19
c00217d9:	77 03                	ja     c00217de <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c00217db:	83 e8 20             	sub    eax,0x20
c00217de:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c00217e2:	42                   	inc    edx
c00217e3:	eb d8                	jmp    c00217bd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c00217e5:	31 ed                	xor    ebp,ebp
c00217e7:	83 ec 0c             	sub    esp,0xc
c00217ea:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00217f1:	e8 66 e7 fe ff       	call   c000ff5c <malloc>
c00217f6:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00217fd:	89 c6                	mov    esi,eax
c00217ff:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021805:	c1 ef 0b             	shr    edi,0xb
c0021808:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c002180f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021813:	83 c4 10             	add    esp,0x10
c0021816:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c002181b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002181f:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021826:	74 28                	je     c0021850 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021828:	52                   	push   edx
c0021829:	57                   	push   edi
c002182a:	50                   	push   eax
c002182b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002182f:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021836:	e8 7b fe ff ff       	call   c00216b6 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002183b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002183f:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021846:	05 00 08 00 00       	add    eax,0x800
c002184b:	83 c4 10             	add    esp,0x10
c002184e:	eb cb                	jmp    c002181b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021850:	83 ec 0c             	sub    esp,0xc
c0021853:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021857:	57                   	push   edi
c0021858:	e8 84 ee fd ff       	call   c00006e1 <strlen>
c002185d:	50                   	push   eax
c002185e:	57                   	push   edi
c002185f:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021866:	56                   	push   esi
c0021867:	e8 08 fe ff ff       	call   c0021674 <__memmem(unsigned char*, int, unsigned char*, int)>
c002186c:	83 c4 20             	add    esp,0x20
c002186f:	85 c0                	test   eax,eax
c0021871:	75 13                	jne    c0021886 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021873:	83 ec 0c             	sub    esp,0xc
c0021876:	56                   	push   esi
c0021877:	e8 f0 e6 fe ff       	call   c000ff6c <free>
c002187c:	83 c4 10             	add    esp,0x10
c002187f:	31 c0                	xor    eax,eax
c0021881:	e9 b3 00 00 00       	jmp    c0021939 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021886:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c002188a:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c002188e:	c1 e7 08             	shl    edi,0x8
c0021891:	c1 e2 10             	shl    edx,0x10
c0021894:	09 d7                	or     edi,edx
c0021896:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c002189a:	09 d7                	or     edi,edx
c002189c:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c00218a0:	c1 e2 18             	shl    edx,0x18
c00218a3:	09 d7                	or     edi,edx
c00218a5:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c00218a9:	89 d1                	mov    ecx,edx
c00218ab:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c00218af:	c1 e1 08             	shl    ecx,0x8
c00218b2:	c1 e2 10             	shl    edx,0x10
c00218b5:	09 ca                	or     edx,ecx
c00218b7:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c00218bb:	09 ca                	or     edx,ecx
c00218bd:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c00218c1:	c1 e1 18             	shl    ecx,0x18
c00218c4:	09 ca                	or     edx,ecx
c00218c6:	89 e9                	mov    ecx,ebp
c00218c8:	84 c9                	test   cl,cl
c00218ca:	74 3c                	je     c0021908 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c00218cc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00218d0:	83 ec 0c             	sub    esp,0xc
c00218d3:	56                   	push   esi
c00218d4:	e8 93 e6 fe ff       	call   c000ff6c <free>
c00218d9:	83 c4 0c             	add    esp,0xc
c00218dc:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00218e3:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00218e8:	50                   	push   eax
c00218e9:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00218f0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00218f7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00218fb:	52                   	push   edx
c00218fc:	57                   	push   edi
c00218fd:	53                   	push   ebx
c00218fe:	e8 6e fe ff ff       	call   c0021771 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021903:	83 c4 20             	add    esp,0x20
c0021906:	eb 31                	jmp    c0021939 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021908:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c002190b:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021912:	d0 e8                	shr    al,1
c0021914:	89 3b                	mov    DWORD PTR [ebx],edi
c0021916:	83 e0 01             	and    eax,0x1
c0021919:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021920:	83 ec 0c             	sub    esp,0xc
c0021923:	89 13                	mov    DWORD PTR [ebx],edx
c0021925:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c002192c:	89 03                	mov    DWORD PTR [ebx],eax
c002192e:	56                   	push   esi
c002192f:	e8 38 e6 fe ff       	call   c000ff6c <free>
c0021934:	83 c4 10             	add    esp,0x10
c0021937:	b0 01                	mov    al,0x1
c0021939:	81 c4 1c 01 00 00    	add    esp,0x11c
c002193f:	5b                   	pop    ebx
c0021940:	5e                   	pop    esi
c0021941:	5f                   	pop    edi
c0021942:	5d                   	pop    ebp
c0021943:	c3                   	ret    

c0021944 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021944:	55                   	push   ebp
c0021945:	57                   	push   edi
c0021946:	56                   	push   esi
c0021947:	53                   	push   ebx
c0021948:	83 ec 20             	sub    esp,0x20
c002194b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002194f:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021953:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021957:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002195f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021967:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c002196c:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021972:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021978:	57                   	push   edi
c0021979:	8d 44 24 14          	lea    eax,[esp+0x14]
c002197d:	50                   	push   eax
c002197e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021982:	50                   	push   eax
c0021983:	e8 94 fd ff ff       	call   c002171c <readRoot(unsigned int*, unsigned int*, char)>
c0021988:	5a                   	pop    edx
c0021989:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002198d:	e8 4f ed fd ff       	call   c00006e1 <strlen>
c0021992:	83 c4 10             	add    esp,0x10
c0021995:	83 f8 03             	cmp    eax,0x3
c0021998:	77 17                	ja     c00219b1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c002199a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002199e:	89 03                	mov    DWORD PTR [ebx],eax
c00219a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00219a4:	89 06                	mov    DWORD PTR [esi],eax
c00219a6:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c00219ad:	b0 01                	mov    al,0x1
c00219af:	eb 19                	jmp    c00219ca <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c00219b1:	50                   	push   eax
c00219b2:	55                   	push   ebp
c00219b3:	57                   	push   edi
c00219b4:	56                   	push   esi
c00219b5:	53                   	push   ebx
c00219b6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00219ba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00219be:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00219c2:	e8 aa fd ff ff       	call   c0021771 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00219c7:	83 c4 20             	add    esp,0x20
c00219ca:	83 c4 1c             	add    esp,0x1c
c00219cd:	5b                   	pop    ebx
c00219ce:	5e                   	pop    esi
c00219cf:	5f                   	pop    edi
c00219d0:	5d                   	pop    ebp
c00219d1:	c3                   	ret    

c00219d2 <ISO9660::ISO9660()>:
c00219d2:	83 ec 0c             	sub    esp,0xc
c00219d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219d9:	83 ec 0c             	sub    esp,0xc
c00219dc:	50                   	push   eax
c00219dd:	e8 82 19 ff ff       	call   c0013364 <Filesystem::Filesystem()>
c00219e2:	83 c4 10             	add    esp,0x10
c00219e5:	ba fc ed 02 c0       	mov    edx,0xc002edfc
c00219ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219ee:	89 10                	mov    DWORD PTR [eax],edx
c00219f0:	90                   	nop
c00219f1:	83 c4 0c             	add    esp,0xc
c00219f4:	c3                   	ret    
c00219f5:	90                   	nop

c00219f6 <ISO9660::~ISO9660()>:
c00219f6:	83 ec 0c             	sub    esp,0xc
c00219f9:	ba fc ed 02 c0       	mov    edx,0xc002edfc
c00219fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a02:	89 10                	mov    DWORD PTR [eax],edx
c0021a04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a08:	83 ec 0c             	sub    esp,0xc
c0021a0b:	50                   	push   eax
c0021a0c:	e8 77 19 ff ff       	call   c0013388 <Filesystem::~Filesystem()>
c0021a11:	83 c4 10             	add    esp,0x10
c0021a14:	90                   	nop
c0021a15:	83 c4 0c             	add    esp,0xc
c0021a18:	c3                   	ret    
c0021a19:	90                   	nop

c0021a1a <ISO9660::~ISO9660()>:
c0021a1a:	83 ec 0c             	sub    esp,0xc
c0021a1d:	83 ec 0c             	sub    esp,0xc
c0021a20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a24:	e8 cd ff ff ff       	call   c00219f6 <ISO9660::~ISO9660()>
c0021a29:	83 c4 10             	add    esp,0x10
c0021a2c:	83 ec 08             	sub    esp,0x8
c0021a2f:	6a 08                	push   0x8
c0021a31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a35:	e8 2c 17 ff ff       	call   c0013166 <operator delete(void*, unsigned long)>
c0021a3a:	83 c4 10             	add    esp,0x10
c0021a3d:	83 c4 0c             	add    esp,0xc
c0021a40:	c3                   	ret    
c0021a41:	90                   	nop

c0021a42 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021a42:	b8 08 00 00 00       	mov    eax,0x8
c0021a47:	c3                   	ret    

c0021a48 <ISO9660::tryMount(LogicalDisk*, int)>:
c0021a48:	81 ec 10 08 00 00    	sub    esp,0x810
c0021a4e:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021a55:	83 c0 41             	add    eax,0x41
c0021a58:	0f be c0             	movsx  eax,al
c0021a5b:	50                   	push   eax
c0021a5c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021a60:	50                   	push   eax
c0021a61:	6a 10                	push   0x10
c0021a63:	e8 4e fc ff ff       	call   c00216b6 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a68:	83 c4 10             	add    esp,0x10
c0021a6b:	31 c0                	xor    eax,eax
c0021a6d:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021a72:	75 1d                	jne    c0021a91 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021a74:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021a79:	75 16                	jne    c0021a91 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021a7b:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021a80:	75 0f                	jne    c0021a91 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021a82:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021a87:	75 08                	jne    c0021a91 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021a89:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021a8e:	0f 94 c0             	sete   al
c0021a91:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021a97:	c3                   	ret    

c0021a98 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021a98:	57                   	push   edi
c0021a99:	56                   	push   esi
c0021a9a:	53                   	push   ebx
c0021a9b:	83 ec 10             	sub    esp,0x10
c0021a9e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021aa2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021aa6:	85 ff                	test   edi,edi
c0021aa8:	0f 84 9d 00 00 00    	je     c0021b4b <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021aae:	85 f6                	test   esi,esi
c0021ab0:	0f 84 95 00 00 00    	je     c0021b4b <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021ab6:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021abb:	74 17                	je     c0021ad4 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021abd:	83 ec 0c             	sub    esp,0xc
c0021ac0:	68 98 ed 02 c0       	push   0xc002ed98
c0021ac5:	e8 7c 17 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0021aca:	83 c4 10             	add    esp,0x10
c0021acd:	b8 03 00 00 00       	mov    eax,0x3
c0021ad2:	eb 7c                	jmp    c0021b50 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021ad4:	83 ec 0c             	sub    esp,0xc
c0021ad7:	6a 1c                	push   0x1c
c0021ad9:	e8 7e e4 fe ff       	call   c000ff5c <malloc>
c0021ade:	89 07                	mov    DWORD PTR [edi],eax
c0021ae0:	89 c3                	mov    ebx,eax
c0021ae2:	58                   	pop    eax
c0021ae3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021ae7:	50                   	push   eax
c0021ae8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021aeb:	50                   	push   eax
c0021aec:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021af0:	50                   	push   eax
c0021af1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021af5:	50                   	push   eax
c0021af6:	56                   	push   esi
c0021af7:	e8 48 fe ff ff       	call   c0021944 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021afc:	83 c4 20             	add    esp,0x20
c0021aff:	84 c0                	test   al,al
c0021b01:	74 07                	je     c0021b0a <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0021b03:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021b08:	74 0b                	je     c0021b15 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0021b0a:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021b0e:	b8 01 00 00 00       	mov    eax,0x1
c0021b13:	eb 3b                	jmp    c0021b50 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021b15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b19:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021b1d:	89 03                	mov    DWORD PTR [ebx],eax
c0021b1f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021b26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021b2a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021b31:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021b38:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021b3b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021b42:	8a 06                	mov    al,BYTE PTR [esi]
c0021b44:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021b47:	31 c0                	xor    eax,eax
c0021b49:	eb 05                	jmp    c0021b50 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021b4b:	b8 04 00 00 00       	mov    eax,0x4
c0021b50:	83 c4 10             	add    esp,0x10
c0021b53:	5b                   	pop    ebx
c0021b54:	5e                   	pop    esi
c0021b55:	5f                   	pop    edi
c0021b56:	c3                   	ret    
c0021b57:	90                   	nop

c0021b58 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021b58:	55                   	push   ebp
c0021b59:	57                   	push   edi
c0021b5a:	56                   	push   esi
c0021b5b:	53                   	push   ebx
c0021b5c:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021b62:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021b69:	85 ed                	test   ebp,ebp
c0021b6b:	0f 84 d6 01 00 00    	je     c0021d47 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021b71:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021b79:	0f 84 c8 01 00 00    	je     c0021d47 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021b7f:	b8 01 00 00 00       	mov    eax,0x1
c0021b84:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021b88:	0f 85 be 01 00 00    	jne    c0021d4c <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021b8e:	31 d2                	xor    edx,edx
c0021b90:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021b97:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021b9a:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0021b9d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021ba1:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0021ba4:	89 04 24             	mov    DWORD PTR [esp],eax
c0021ba7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021bab:	01 f0                	add    eax,esi
c0021bad:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0021bb0:	11 fa                	adc    edx,edi
c0021bb2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021bb6:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021bba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021bbe:	19 d1                	sbb    ecx,edx
c0021bc0:	72 0a                	jb     c0021bcc <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0021bc2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021bc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021bca:	eb 13                	jmp    c0021bdf <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021bcc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021bd0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021bd4:	29 f0                	sub    eax,esi
c0021bd6:	19 fa                	sbb    edx,edi
c0021bd8:	89 04 24             	mov    DWORD PTR [esp],eax
c0021bdb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021bdf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021be2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021be5:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021be9:	51                   	push   ecx
c0021bea:	c1 e0 0b             	shl    eax,0xb
c0021bed:	01 c6                	add    esi,eax
c0021bef:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021bf3:	11 d7                	adc    edi,edx
c0021bf5:	50                   	push   eax
c0021bf6:	89 fa                	mov    edx,edi
c0021bf8:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021bfc:	89 f0                	mov    eax,esi
c0021bfe:	53                   	push   ebx
c0021bff:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021c03:	50                   	push   eax
c0021c04:	e8 ad fa ff ff       	call   c00216b6 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021c09:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021c0d:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021c10:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0021c14:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021c1a:	83 c4 10             	add    esp,0x10
c0021c1d:	b8 00 08 00 00       	mov    eax,0x800
c0021c22:	29 d0                	sub    eax,edx
c0021c24:	39 c1                	cmp    ecx,eax
c0021c26:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0021c2a:	83 d9 00             	sbb    ecx,0x0
c0021c2d:	7d 1c                	jge    c0021c4b <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0021c2f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021c34:	75 12                	jne    c0021c48 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c0021c36:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021c3d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021c43:	e9 fb 00 00 00       	jmp    c0021d43 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0021c48:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021c4b:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0021c4e:	31 d2                	xor    edx,edx
c0021c50:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021c54:	39 c2                	cmp    edx,eax
c0021c56:	7d 14                	jge    c0021c6c <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0021c58:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021c5f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021c63:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021c66:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021c69:	42                   	inc    edx
c0021c6a:	eb e8                	jmp    c0021c54 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0021c6c:	89 c3                	mov    ebx,eax
c0021c6e:	85 c0                	test   eax,eax
c0021c70:	79 02                	jns    c0021c74 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0021c72:	31 db                	xor    ebx,ebx
c0021c74:	99                   	cdq    
c0021c75:	01 c3                	add    ebx,eax
c0021c77:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021c7e:	01 c6                	add    esi,eax
c0021c80:	11 d7                	adc    edi,edx
c0021c82:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021c86:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021c8a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021c8d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021c91:	29 c6                	sub    esi,eax
c0021c93:	19 d7                	sbb    edi,edx
c0021c95:	89 34 24             	mov    DWORD PTR [esp],esi
c0021c98:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021c9c:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021ca1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021ca4:	b8 00 00 00 00       	mov    eax,0x0
c0021ca9:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021cad:	7d 3e                	jge    c0021ced <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021caf:	52                   	push   edx
c0021cb0:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021cb4:	50                   	push   eax
c0021cb5:	53                   	push   ebx
c0021cb6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021cba:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021cbe:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021cc2:	50                   	push   eax
c0021cc3:	e8 ee f9 ff ff       	call   c00216b6 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021cc8:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021cd0:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021cd5:	81 c3 00 08 00 00    	add    ebx,0x800
c0021cdb:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021ce3:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021ce8:	83 c4 10             	add    esp,0x10
c0021ceb:	eb af                	jmp    c0021c9c <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0021ced:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cf1:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021cf4:	74 32                	je     c0021d28 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0021cf6:	50                   	push   eax
c0021cf7:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021cfb:	50                   	push   eax
c0021cfc:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021d00:	50                   	push   eax
c0021d01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021d05:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021d09:	0f ac fe 0b          	shrd   esi,edi,0xb
c0021d0d:	56                   	push   esi
c0021d0e:	e8 a3 f9 ff ff       	call   c00216b6 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021d13:	83 c4 0c             	add    esp,0xc
c0021d16:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0021d1a:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021d1e:	50                   	push   eax
c0021d1f:	53                   	push   ebx
c0021d20:	e8 7b e9 fd ff       	call   c00006a0 <memcpy>
c0021d25:	83 c4 10             	add    esp,0x10
c0021d28:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021d2f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021d33:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021d37:	89 38                	mov    DWORD PTR [eax],edi
c0021d39:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021d3d:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021d40:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021d43:	31 c0                	xor    eax,eax
c0021d45:	eb 05                	jmp    c0021d4c <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021d47:	b8 04 00 00 00       	mov    eax,0x4
c0021d4c:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021d52:	5b                   	pop    ebx
c0021d53:	5e                   	pop    esi
c0021d54:	5f                   	pop    edi
c0021d55:	5d                   	pop    ebp
c0021d56:	c3                   	ret    
c0021d57:	90                   	nop

c0021d58 <ISO9660::exists(char const*)>:
c0021d58:	83 ec 28             	sub    esp,0x28
c0021d5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021d5f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021d63:	52                   	push   edx
c0021d64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021d67:	52                   	push   edx
c0021d68:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021d6c:	52                   	push   edx
c0021d6d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021d71:	52                   	push   edx
c0021d72:	50                   	push   eax
c0021d73:	e8 cc fb ff ff       	call   c0021944 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021d78:	83 c4 3c             	add    esp,0x3c
c0021d7b:	c3                   	ret    

c0021d7c <ISO9660::seek(void*, unsigned long long)>:
c0021d7c:	53                   	push   ebx
c0021d7d:	b8 04 00 00 00       	mov    eax,0x4
c0021d82:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021d86:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021d8a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021d8e:	85 d2                	test   edx,edx
c0021d90:	74 17                	je     c0021da9 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021d92:	89 c8                	mov    eax,ecx
c0021d94:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021d97:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021d9a:	b8 01 00 00 00       	mov    eax,0x1
c0021d9f:	73 08                	jae    c0021da9 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021da1:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021da4:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021da7:	31 c0                	xor    eax,eax
c0021da9:	5b                   	pop    ebx
c0021daa:	c3                   	ret    
c0021dab:	90                   	nop

c0021dac <ISO9660::tell(void*, unsigned long long*)>:
c0021dac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021db0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021db4:	85 d2                	test   edx,edx
c0021db6:	74 12                	je     c0021dca <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021db8:	85 c0                	test   eax,eax
c0021dba:	74 0e                	je     c0021dca <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021dbc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021dbf:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021dc2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021dc5:	89 10                	mov    DWORD PTR [eax],edx
c0021dc7:	31 c0                	xor    eax,eax
c0021dc9:	c3                   	ret    
c0021dca:	b8 04 00 00 00       	mov    eax,0x4
c0021dcf:	c3                   	ret    

c0021dd0 <ISO9660::getName()>:
c0021dd0:	b8 be ed 02 c0       	mov    eax,0xc002edbe
c0021dd5:	c3                   	ret    

c0021dd6 <ISO9660::stat(void*, unsigned long long*)>:
c0021dd6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021dda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021dde:	85 d2                	test   edx,edx
c0021de0:	74 12                	je     c0021df4 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021de2:	85 c0                	test   eax,eax
c0021de4:	74 0e                	je     c0021df4 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021de6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021de9:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021dec:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021def:	89 10                	mov    DWORD PTR [eax],edx
c0021df1:	31 c0                	xor    eax,eax
c0021df3:	c3                   	ret    
c0021df4:	b8 04 00 00 00       	mov    eax,0x4
c0021df9:	c3                   	ret    

c0021dfa <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021dfa:	56                   	push   esi
c0021dfb:	53                   	push   ebx
c0021dfc:	83 ec 14             	sub    esp,0x14
c0021dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021e03:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021e07:	85 db                	test   ebx,ebx
c0021e09:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021e0d:	0f 94 c2             	sete   dl
c0021e10:	85 f6                	test   esi,esi
c0021e12:	0f 94 c0             	sete   al
c0021e15:	08 c2                	or     dl,al
c0021e17:	75 68                	jne    c0021e81 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021e19:	85 c9                	test   ecx,ecx
c0021e1b:	74 64                	je     c0021e81 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021e1d:	83 ec 0c             	sub    esp,0xc
c0021e20:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021e23:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021e27:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021e2d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021e34:	50                   	push   eax
c0021e35:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021e38:	50                   	push   eax
c0021e39:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021e3d:	50                   	push   eax
c0021e3e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021e42:	50                   	push   eax
c0021e43:	51                   	push   ecx
c0021e44:	e8 fb fa ff ff       	call   c0021944 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021e49:	83 c4 20             	add    esp,0x20
c0021e4c:	ba 01 00 00 00       	mov    edx,0x1
c0021e51:	84 c0                	test   al,al
c0021e53:	74 31                	je     c0021e86 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021e55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021e59:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021e60:	89 03                	mov    DWORD PTR [ebx],eax
c0021e62:	ba 00 00 00 00       	mov    edx,0x0
c0021e67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021e6b:	85 c0                	test   eax,eax
c0021e6d:	0f 95 06             	setne  BYTE PTR [esi]
c0021e70:	74 14                	je     c0021e86 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021e72:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021e78:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021e7f:	eb 05                	jmp    c0021e86 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021e81:	ba 04 00 00 00       	mov    edx,0x4
c0021e86:	83 c4 14             	add    esp,0x14
c0021e89:	89 d0                	mov    eax,edx
c0021e8b:	5b                   	pop    ebx
c0021e8c:	5e                   	pop    esi
c0021e8d:	c3                   	ret    

c0021e8e <ISO9660::close(void*)>:
c0021e8e:	83 ec 0c             	sub    esp,0xc
c0021e91:	b8 04 00 00 00       	mov    eax,0x4
c0021e96:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021e9a:	85 d2                	test   edx,edx
c0021e9c:	74 0e                	je     c0021eac <ISO9660::close(void*)+0x1e>
c0021e9e:	83 ec 0c             	sub    esp,0xc
c0021ea1:	52                   	push   edx
c0021ea2:	e8 c5 e0 fe ff       	call   c000ff6c <free>
c0021ea7:	83 c4 10             	add    esp,0x10
c0021eaa:	31 c0                	xor    eax,eax
c0021eac:	83 c4 0c             	add    esp,0xc
c0021eaf:	c3                   	ret    

c0021eb0 <ISO9660::openDir(char const*, void**)>:
c0021eb0:	57                   	push   edi
c0021eb1:	56                   	push   esi
c0021eb2:	53                   	push   ebx
c0021eb3:	83 ec 10             	sub    esp,0x10
c0021eb6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021eba:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021ebe:	85 ff                	test   edi,edi
c0021ec0:	0f 84 95 00 00 00    	je     c0021f5b <ISO9660::openDir(char const*, void**)+0xab>
c0021ec6:	85 f6                	test   esi,esi
c0021ec8:	0f 84 8d 00 00 00    	je     c0021f5b <ISO9660::openDir(char const*, void**)+0xab>
c0021ece:	83 ec 0c             	sub    esp,0xc
c0021ed1:	6a 1c                	push   0x1c
c0021ed3:	e8 84 e0 fe ff       	call   c000ff5c <malloc>
c0021ed8:	89 07                	mov    DWORD PTR [edi],eax
c0021eda:	89 c3                	mov    ebx,eax
c0021edc:	59                   	pop    ecx
c0021edd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021ee1:	50                   	push   eax
c0021ee2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021ee5:	50                   	push   eax
c0021ee6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021eea:	50                   	push   eax
c0021eeb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021eef:	50                   	push   eax
c0021ef0:	56                   	push   esi
c0021ef1:	e8 4e fa ff ff       	call   c0021944 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021ef6:	83 c4 20             	add    esp,0x20
c0021ef9:	84 c0                	test   al,al
c0021efb:	74 07                	je     c0021f04 <ISO9660::openDir(char const*, void**)+0x54>
c0021efd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021f02:	75 21                	jne    c0021f25 <ISO9660::openDir(char const*, void**)+0x75>
c0021f04:	0f b6 c0             	movzx  eax,al
c0021f07:	52                   	push   edx
c0021f08:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021f0c:	50                   	push   eax
c0021f0d:	68 d9 ed 02 c0       	push   0xc002edd9
c0021f12:	e8 2f 13 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0021f17:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021f1b:	83 c4 10             	add    esp,0x10
c0021f1e:	b8 01 00 00 00       	mov    eax,0x1
c0021f23:	eb 3b                	jmp    c0021f60 <ISO9660::openDir(char const*, void**)+0xb0>
c0021f25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f29:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021f2d:	89 03                	mov    DWORD PTR [ebx],eax
c0021f2f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021f36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f3a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021f41:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021f48:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021f4b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021f52:	8a 06                	mov    al,BYTE PTR [esi]
c0021f54:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021f57:	31 c0                	xor    eax,eax
c0021f59:	eb 05                	jmp    c0021f60 <ISO9660::openDir(char const*, void**)+0xb0>
c0021f5b:	b8 04 00 00 00       	mov    eax,0x4
c0021f60:	83 c4 10             	add    esp,0x10
c0021f63:	5b                   	pop    ebx
c0021f64:	5e                   	pop    esi
c0021f65:	5f                   	pop    edi
c0021f66:	c3                   	ret    
c0021f67:	90                   	nop

c0021f68 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021f68:	55                   	push   ebp
c0021f69:	57                   	push   edi
c0021f6a:	56                   	push   esi
c0021f6b:	53                   	push   ebx
c0021f6c:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021f72:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021f79:	85 f6                	test   esi,esi
c0021f7b:	0f 84 64 02 00 00    	je     c00221e5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021f81:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021f89:	0f 84 56 02 00 00    	je     c00221e5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021f8f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021f92:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021f95:	75 0a                	jne    c0021fa1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021f97:	b8 07 00 00 00       	mov    eax,0x7
c0021f9c:	e9 49 02 00 00       	jmp    c00221ea <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021fa1:	50                   	push   eax
c0021fa2:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021fa6:	50                   	push   eax
c0021fa7:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021fae:	53                   	push   ebx
c0021faf:	8b 06                	mov    eax,DWORD PTR [esi]
c0021fb1:	c1 e0 0b             	shl    eax,0xb
c0021fb4:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021fb7:	c1 e8 0b             	shr    eax,0xb
c0021fba:	50                   	push   eax
c0021fbb:	e8 f6 f6 ff ff       	call   c00216b6 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021fc0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021fc3:	83 c4 10             	add    esp,0x10
c0021fc6:	89 c1                	mov    ecx,eax
c0021fc8:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021fcb:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021fd1:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021fd4:	84 db                	test   bl,bl
c0021fd6:	0f 85 90 00 00 00    	jne    c002206c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021fdc:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021fe2:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021fe8:	29 c7                	sub    edi,eax
c0021fea:	89 fb                	mov    ebx,edi
c0021fec:	c1 fb 1f             	sar    ebx,0x1f
c0021fef:	01 f8                	add    eax,edi
c0021ff1:	11 da                	adc    edx,ebx
c0021ff3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021ff7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021ffb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021ffe:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0022001:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0022004:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0022007:	89 04 24             	mov    DWORD PTR [esp],eax
c002200a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002200e:	89 d8                	mov    eax,ebx
c0022010:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0022013:	ba 00 00 00 00       	mov    edx,0x0
c0022018:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c002201c:	b8 00 00 00 00       	mov    eax,0x0
c0022021:	73 0b                	jae    c002202e <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0022023:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022026:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002202a:	29 f8                	sub    eax,edi
c002202c:	19 da                	sbb    edx,ebx
c002202e:	89 d3                	mov    ebx,edx
c0022030:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0022033:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0022036:	09 c3                	or     ebx,eax
c0022038:	0f 84 59 ff ff ff    	je     c0021f97 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c002203e:	55                   	push   ebp
c002203f:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0022043:	50                   	push   eax
c0022044:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c002204b:	53                   	push   ebx
c002204c:	8b 06                	mov    eax,DWORD PTR [esi]
c002204e:	c1 e0 0b             	shl    eax,0xb
c0022051:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0022055:	c1 e8 0b             	shr    eax,0xb
c0022058:	50                   	push   eax
c0022059:	e8 58 f6 ff ff       	call   c00216b6 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002205e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0022061:	83 c4 10             	add    esp,0x10
c0022064:	25 ff 07 00 00       	and    eax,0x7ff
c0022069:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c002206c:	57                   	push   edi
c002206d:	6a 28                	push   0x28
c002206f:	6a 00                	push   0x0
c0022071:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022075:	50                   	push   eax
c0022076:	e8 49 e6 fd ff       	call   c00006c4 <memset>
c002207b:	31 d2                	xor    edx,edx
c002207d:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0022080:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0022086:	89 f8                	mov    eax,edi
c0022088:	83 c0 21             	add    eax,0x21
c002208b:	83 d2 00             	adc    edx,0x0
c002208e:	89 c7                	mov    edi,eax
c0022090:	89 d5                	mov    ebp,edx
c0022092:	83 c4 10             	add    esp,0x10
c0022095:	31 c9                	xor    ecx,ecx
c0022097:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c002209e:	83 f9 28             	cmp    ecx,0x28
c00220a1:	88 04 24             	mov    BYTE PTR [esp],al
c00220a4:	0f 94 c2             	sete   dl
c00220a7:	88 d0                	mov    al,dl
c00220a9:	ba ff 07 00 00       	mov    edx,0x7ff
c00220ae:	39 fa                	cmp    edx,edi
c00220b0:	ba 00 00 00 00       	mov    edx,0x0
c00220b5:	19 ea                	sbb    edx,ebp
c00220b7:	0f 92 c2             	setb   dl
c00220ba:	09 c2                	or     edx,eax
c00220bc:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00220c0:	0f 94 c0             	sete   al
c00220c3:	08 d0                	or     al,dl
c00220c5:	75 16                	jne    c00220dd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c00220c7:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c00220cb:	74 10                	je     c00220dd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c00220cd:	8a 04 24             	mov    al,BYTE PTR [esp]
c00220d0:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c00220d4:	41                   	inc    ecx
c00220d5:	83 c7 01             	add    edi,0x1
c00220d8:	83 d5 00             	adc    ebp,0x0
c00220db:	eb ba                	jmp    c0022097 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c00220dd:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c00220e4:	83 ec 0c             	sub    esp,0xc
c00220e7:	8d 7c 24 24          	lea    edi,[esp+0x24]
c00220eb:	57                   	push   edi
c00220ec:	e8 f0 e5 fd ff       	call   c00006e1 <strlen>
c00220f1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00220f9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00220fd:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0022104:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0022107:	5a                   	pop    edx
c0022108:	25 ff 07 00 00       	and    eax,0x7ff
c002210d:	01 c8                	add    eax,ecx
c002210f:	59                   	pop    ecx
c0022110:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0022116:	83 e0 02             	and    eax,0x2
c0022119:	3c 01                	cmp    al,0x1
c002211b:	19 c0                	sbb    eax,eax
c002211d:	83 c0 02             	add    eax,0x2
c0022120:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0022124:	57                   	push   edi
c0022125:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0022129:	50                   	push   eax
c002212a:	e8 34 e6 fd ff       	call   c0000763 <strcpy>
c002212f:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0022133:	83 c4 10             	add    esp,0x10
c0022136:	84 c0                	test   al,al
c0022138:	75 21                	jne    c002215b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c002213a:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0022142:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002214a:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0022152:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0022159:	eb 28                	jmp    c0022183 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c002215b:	fe c8                	dec    al
c002215d:	75 24                	jne    c0022183 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c002215f:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0022167:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002216f:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0022177:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c002217e:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0022183:	0f b6 fb             	movzx  edi,bl
c0022186:	31 db                	xor    ebx,ebx
c0022188:	50                   	push   eax
c0022189:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0022190:	8d 44 24 48          	lea    eax,[esp+0x48]
c0022194:	50                   	push   eax
c0022195:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c002219c:	e8 ff e4 fd ff       	call   c00006a0 <memcpy>
c00221a1:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c00221a8:	89 f9                	mov    ecx,edi
c00221aa:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00221b0:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c00221b3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00221b6:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c00221b9:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00221bc:	83 c4 10             	add    esp,0x10
c00221bf:	39 c7                	cmp    edi,eax
c00221c1:	89 df                	mov    edi,ebx
c00221c3:	19 d7                	sbb    edi,edx
c00221c5:	72 10                	jb     c00221d7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00221c7:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c00221ce:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00221d5:	eb 0a                	jmp    c00221e1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c00221d7:	29 c8                	sub    eax,ecx
c00221d9:	19 da                	sbb    edx,ebx
c00221db:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c00221de:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c00221e1:	31 c0                	xor    eax,eax
c00221e3:	eb 05                	jmp    c00221ea <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c00221e5:	b8 04 00 00 00       	mov    eax,0x4
c00221ea:	81 c4 5c 09 00 00    	add    esp,0x95c
c00221f0:	5b                   	pop    ebx
c00221f1:	5e                   	pop    esi
c00221f2:	5f                   	pop    edi
c00221f3:	5d                   	pop    ebp
c00221f4:	c3                   	ret    
c00221f5:	90                   	nop

c00221f6 <ISO9660::closeDir(void*)>:
c00221f6:	83 ec 0c             	sub    esp,0xc
c00221f9:	b8 04 00 00 00       	mov    eax,0x4
c00221fe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022202:	85 d2                	test   edx,edx
c0022204:	74 0e                	je     c0022214 <ISO9660::closeDir(void*)+0x1e>
c0022206:	83 ec 0c             	sub    esp,0xc
c0022209:	52                   	push   edx
c002220a:	e8 5d dd fe ff       	call   c000ff6c <free>
c002220f:	83 c4 10             	add    esp,0x10
c0022212:	31 c0                	xor    eax,eax
c0022214:	83 c4 0c             	add    esp,0xc
c0022217:	c3                   	ret    

c0022218 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0022218:	b8 01 00 00 00       	mov    eax,0x1
c002221d:	c3                   	ret    

c002221e <ISO9660::unlink(char const*)>:
c002221e:	b8 01 00 00 00       	mov    eax,0x1
c0022223:	c3                   	ret    

c0022224 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0022224:	b8 01 00 00 00       	mov    eax,0x1
c0022229:	c3                   	ret    

c002222a <ISO9660::rename(char const*, char const*)>:
c002222a:	b8 01 00 00 00       	mov    eax,0x1
c002222f:	c3                   	ret    

c0022230 <ISO9660::mkdir(char const*)>:
c0022230:	b8 01 00 00 00       	mov    eax,0x1
c0022235:	c3                   	ret    

c0022236 <SoundChannel::SoundChannel(int, int, int, int)>:
c0022236:	83 ec 1c             	sub    esp,0x1c
c0022239:	83 ec 0c             	sub    esp,0xc
c002223c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022240:	e8 a5 01 00 00       	call   c00223ea <SoundChannel::pause()>
c0022245:	83 c4 10             	add    esp,0x10
c0022248:	83 ec 08             	sub    esp,0x8
c002224b:	6a 50                	push   0x50
c002224d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022251:	e8 70 01 00 00       	call   c00223c6 <SoundChannel::setVolume(int)>
c0022256:	83 c4 10             	add    esp,0x10
c0022259:	83 ec 08             	sub    esp,0x8
c002225c:	a1 14 ef 02 c0       	mov    eax,ds:0xc002ef14
c0022261:	50                   	push   eax
c0022262:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022266:	e8 47 01 00 00       	call   c00223b2 <SoundChannel::setSpeed(float)>
c002226b:	83 c4 10             	add    esp,0x10
c002226e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022272:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022276:	89 10                	mov    DWORD PTR [eax],edx
c0022278:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002227c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022280:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022283:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022287:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002228b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002228e:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022293:	75 23                	jne    c00222b8 <SoundChannel::SoundChannel(int, int, int, int)+0x82>
c0022295:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022299:	8b 10                	mov    edx,DWORD PTR [eax]
c002229b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002229f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00222a2:	0f af c2             	imul   eax,edx
c00222a5:	85 c0                	test   eax,eax
c00222a7:	79 03                	jns    c00222ac <SoundChannel::SoundChannel(int, int, int, int)+0x76>
c00222a9:	83 c0 03             	add    eax,0x3
c00222ac:	c1 f8 02             	sar    eax,0x2
c00222af:	05 a0 0f 00 00       	add    eax,0xfa0
c00222b4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00222b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222bc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00222c0:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00222c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222c7:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00222ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222d2:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00222d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222dd:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00222e0:	c1 e0 02             	shl    eax,0x2
c00222e3:	83 ec 0c             	sub    esp,0xc
c00222e6:	50                   	push   eax
c00222e7:	e8 70 dc fe ff       	call   c000ff5c <malloc>
c00222ec:	83 c4 10             	add    esp,0x10
c00222ef:	89 c2                	mov    edx,eax
c00222f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222f5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00222f8:	83 ec 04             	sub    esp,0x4
c00222fb:	8d 44 24 08          	lea    eax,[esp+0x8]
c00222ff:	50                   	push   eax
c0022300:	6a 01                	push   0x1
c0022302:	6a 04                	push   0x4
c0022304:	e8 1a 6b fe ff       	call   c0008e23 <src_new>
c0022309:	83 c4 10             	add    esp,0x10
c002230c:	89 c2                	mov    edx,eax
c002230e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022312:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022315:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022319:	85 c0                	test   eax,eax
c002231b:	74 10                	je     c002232d <SoundChannel::SoundChannel(int, int, int, int)+0xf7>
c002231d:	83 ec 0c             	sub    esp,0xc
c0022320:	68 f8 ee 02 c0       	push   0xc002eef8
c0022325:	e8 d1 84 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c002232a:	83 c4 10             	add    esp,0x10
c002232d:	a0 60 52 03 c0       	mov    al,ds:0xc0035260
c0022332:	83 f0 01             	xor    eax,0x1
c0022335:	84 c0                	test   al,al
c0022337:	74 57                	je     c0022390 <SoundChannel::SoundChannel(int, int, int, int)+0x15a>
c0022339:	a1 18 ef 02 c0       	mov    eax,ds:0xc002ef18
c002233e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022342:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002234a:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022352:	7f 35                	jg     c0022389 <SoundChannel::SoundChannel(int, int, int, int)+0x153>
c0022354:	83 ec 0c             	sub    esp,0xc
c0022357:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002235b:	e8 a7 50 00 00       	call   c0027407 <__floatsisf>
c0022360:	83 c4 10             	add    esp,0x10
c0022363:	8b 15 18 ef 02 c0    	mov    edx,DWORD PTR ds:0xc002ef18
c0022369:	83 ec 08             	sub    esp,0x8
c002236c:	52                   	push   edx
c002236d:	50                   	push   eax
c002236e:	e8 a6 4c 00 00       	call   c0027019 <__mulsf3>
c0022373:	83 c4 10             	add    esp,0x10
c0022376:	89 c2                	mov    edx,eax
c0022378:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002237c:	89 14 85 80 52 03 c0 	mov    DWORD PTR [eax*4-0x3ffcad80],edx
c0022383:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022387:	eb c1                	jmp    c002234a <SoundChannel::SoundChannel(int, int, int, int)+0x114>
c0022389:	c6 05 60 52 03 c0 01 	mov    BYTE PTR ds:0xc0035260,0x1
c0022390:	90                   	nop
c0022391:	83 c4 1c             	add    esp,0x1c
c0022394:	c3                   	ret    
c0022395:	90                   	nop

c0022396 <SoundChannel::~SoundChannel()>:
c0022396:	83 ec 0c             	sub    esp,0xc
c0022399:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002239d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00223a0:	83 ec 0c             	sub    esp,0xc
c00223a3:	50                   	push   eax
c00223a4:	e8 c3 db fe ff       	call   c000ff6c <free>
c00223a9:	83 c4 10             	add    esp,0x10
c00223ac:	90                   	nop
c00223ad:	83 c4 0c             	add    esp,0xc
c00223b0:	c3                   	ret    
c00223b1:	90                   	nop

c00223b2 <SoundChannel::setSpeed(float)>:
c00223b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00223ba:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00223bd:	c3                   	ret    

c00223be <SoundChannel::getSpeed()>:
c00223be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223c2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00223c5:	c3                   	ret    

c00223c6 <SoundChannel::setVolume(int)>:
c00223c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00223ca:	83 f8 64             	cmp    eax,0x64
c00223cd:	7e 05                	jle    c00223d4 <SoundChannel::setVolume(int)+0xe>
c00223cf:	b8 64 00 00 00       	mov    eax,0x64
c00223d4:	85 c0                	test   eax,eax
c00223d6:	79 02                	jns    c00223da <SoundChannel::setVolume(int)+0x14>
c00223d8:	31 c0                	xor    eax,eax
c00223da:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00223de:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00223e1:	c3                   	ret    

c00223e2 <SoundChannel::getVolume()>:
c00223e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223e6:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00223e9:	c3                   	ret    

c00223ea <SoundChannel::pause()>:
c00223ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223ee:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c00223f2:	c3                   	ret    
c00223f3:	90                   	nop

c00223f4 <SoundChannel::play()>:
c00223f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223f8:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c00223fc:	c3                   	ret    
c00223fd:	90                   	nop

c00223fe <SoundChannel::paused()>:
c00223fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022402:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022405:	c3                   	ret    

c0022406 <SoundChannel::getSampleRate()>:
c0022406:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002240a:	8b 00                	mov    eax,DWORD PTR [eax]
c002240c:	c3                   	ret    
c002240d:	90                   	nop

c002240e <SoundChannel::getBits()>:
c002240e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022412:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022415:	c3                   	ret    

c0022416 <SoundChannel::getBufferUsed()>:
c0022416:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002241a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c002241d:	c3                   	ret    

c002241e <SoundChannel::getBufferSize()>:
c002241e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022422:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022425:	c3                   	ret    

c0022426 <SoundChannel::unbuffer(float*, int, int)>:
c0022426:	56                   	push   esi
c0022427:	53                   	push   ebx
c0022428:	83 ec 40             	sub    esp,0x40
c002242b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c002242f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022432:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022436:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022439:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002243d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022441:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022445:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022449:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002244d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022451:	e8 b1 4f 00 00       	call   c0027407 <__floatsisf>
c0022456:	5a                   	pop    edx
c0022457:	89 c6                	mov    esi,eax
c0022459:	ff 33                	push   DWORD PTR [ebx]
c002245b:	e8 a7 4f 00 00       	call   c0027407 <__floatsisf>
c0022460:	59                   	pop    ecx
c0022461:	5a                   	pop    edx
c0022462:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022465:	50                   	push   eax
c0022466:	e8 ae 4b 00 00       	call   c0027019 <__mulsf3>
c002246b:	59                   	pop    ecx
c002246c:	5a                   	pop    edx
c002246d:	50                   	push   eax
c002246e:	56                   	push   esi
c002246f:	e8 68 4d 00 00       	call   c00271dc <__divsf3>
c0022474:	89 04 24             	mov    DWORD PTR [esp],eax
c0022477:	e8 5b 62 00 00       	call   c00286d7 <__extendsfdf2>
c002247c:	59                   	pop    ecx
c002247d:	5e                   	pop    esi
c002247e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022482:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022486:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c002248e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022492:	50                   	push   eax
c0022493:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022496:	e8 ba 6a fe ff       	call   c0008f55 <src_process>
c002249b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002249f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00224a2:	83 c4 0c             	add    esp,0xc
c00224a5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00224a8:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00224ab:	29 d0                	sub    eax,edx
c00224ad:	c1 e0 02             	shl    eax,0x2
c00224b0:	50                   	push   eax
c00224b1:	8d 04 91             	lea    eax,[ecx+edx*4]
c00224b4:	50                   	push   eax
c00224b5:	51                   	push   ecx
c00224b6:	e8 ad e1 fd ff       	call   c0000668 <memmove>
c00224bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00224bf:	83 c4 44             	add    esp,0x44
c00224c2:	5b                   	pop    ebx
c00224c3:	5e                   	pop    esi
c00224c4:	c3                   	ret    
c00224c5:	90                   	nop

c00224c6 <SoundChannel::buffer8(unsigned char*, int)>:
c00224c6:	55                   	push   ebp
c00224c7:	57                   	push   edi
c00224c8:	56                   	push   esi
c00224c9:	53                   	push   ebx
c00224ca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00224ce:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00224d2:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00224d5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00224d9:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00224dc:	74 7a                	je     c0022558 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00224de:	85 ff                	test   edi,edi
c00224e0:	7e 76                	jle    c0022558 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00224e2:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00224e6:	8d 70 01             	lea    esi,[eax+0x1]
c00224e9:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00224ec:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224ef:	8b 1c 9d 80 52 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcad80]
c00224f6:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00224f9:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00224fc:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00224ff:	74 5e                	je     c002255f <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022501:	83 ff 01             	cmp    edi,0x1
c0022504:	74 4b                	je     c0022551 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022506:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c002250a:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002250d:	8d 70 01             	lea    esi,[eax+0x1]
c0022510:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022513:	8b 1c 9d 80 52 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcad80]
c002251a:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002251d:	b8 02 00 00 00       	mov    eax,0x2
c0022522:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022525:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022528:	75 23                	jne    c002254d <SoundChannel::buffer8(unsigned char*, int)+0x87>
c002252a:	eb 27                	jmp    c0022553 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002252c:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022531:	8d 71 01             	lea    esi,[ecx+0x1]
c0022534:	40                   	inc    eax
c0022535:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022538:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c002253b:	8b 1c 9d 80 52 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcad80]
c0022542:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022545:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022548:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002254b:	74 06                	je     c0022553 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002254d:	39 c7                	cmp    edi,eax
c002254f:	75 db                	jne    c002252c <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022551:	89 f8                	mov    eax,edi
c0022553:	5b                   	pop    ebx
c0022554:	5e                   	pop    esi
c0022555:	5f                   	pop    edi
c0022556:	5d                   	pop    ebp
c0022557:	c3                   	ret    
c0022558:	5b                   	pop    ebx
c0022559:	31 c0                	xor    eax,eax
c002255b:	5e                   	pop    esi
c002255c:	5f                   	pop    edi
c002255d:	5d                   	pop    ebp
c002255e:	c3                   	ret    
c002255f:	b8 01 00 00 00       	mov    eax,0x1
c0022564:	eb ed                	jmp    c0022553 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022566 <SoundDevice::SoundDevice(char const*)>:
c0022566:	83 ec 1c             	sub    esp,0x1c
c0022569:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002256d:	83 ec 08             	sub    esp,0x8
c0022570:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022574:	50                   	push   eax
c0022575:	e8 a2 1f ff ff       	call   c001451c <Device::Device(char const*)>
c002257a:	83 c4 10             	add    esp,0x10
c002257d:	ba c4 ef 02 c0       	mov    edx,0xc002efc4
c0022582:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022586:	89 10                	mov    DWORD PTR [eax],edx
c0022588:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002258c:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022596:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002259a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00225a4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00225ac:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00225b1:	7f 19                	jg     c00225cc <SoundDevice::SoundDevice(char const*)+0x66>
c00225b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225b7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00225bb:	83 c2 54             	add    edx,0x54
c00225be:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00225c6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00225ca:	eb e0                	jmp    c00225ac <SoundDevice::SoundDevice(char const*)+0x46>
c00225cc:	90                   	nop
c00225cd:	83 c4 1c             	add    esp,0x1c
c00225d0:	c3                   	ret    
c00225d1:	90                   	nop

c00225d2 <SoundDevice::~SoundDevice()>:
c00225d2:	53                   	push   ebx
c00225d3:	83 ec 18             	sub    esp,0x18
c00225d6:	ba c4 ef 02 c0       	mov    edx,0xc002efc4
c00225db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225df:	89 10                	mov    DWORD PTR [eax],edx
c00225e1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00225e9:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00225ee:	7f 46                	jg     c0022636 <SoundDevice::~SoundDevice()+0x64>
c00225f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00225f8:	83 c2 54             	add    edx,0x54
c00225fb:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c00225ff:	85 c0                	test   eax,eax
c0022601:	74 2d                	je     c0022630 <SoundDevice::~SoundDevice()+0x5e>
c0022603:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022607:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002260b:	83 c2 54             	add    edx,0x54
c002260e:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022612:	85 db                	test   ebx,ebx
c0022614:	74 1a                	je     c0022630 <SoundDevice::~SoundDevice()+0x5e>
c0022616:	83 ec 0c             	sub    esp,0xc
c0022619:	53                   	push   ebx
c002261a:	e8 77 fd ff ff       	call   c0022396 <SoundChannel::~SoundChannel()>
c002261f:	83 c4 10             	add    esp,0x10
c0022622:	83 ec 08             	sub    esp,0x8
c0022625:	6a 2c                	push   0x2c
c0022627:	53                   	push   ebx
c0022628:	e8 39 0b ff ff       	call   c0013166 <operator delete(void*, unsigned long)>
c002262d:	83 c4 10             	add    esp,0x10
c0022630:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022634:	eb b3                	jmp    c00225e9 <SoundDevice::~SoundDevice()+0x17>
c0022636:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002263a:	83 ec 0c             	sub    esp,0xc
c002263d:	50                   	push   eax
c002263e:	e8 d5 1f ff ff       	call   c0014618 <Device::~Device()>
c0022643:	83 c4 10             	add    esp,0x10
c0022646:	90                   	nop
c0022647:	83 c4 18             	add    esp,0x18
c002264a:	5b                   	pop    ebx
c002264b:	c3                   	ret    

c002264c <SoundDevice::~SoundDevice()>:
c002264c:	83 ec 0c             	sub    esp,0xc
c002264f:	83 ec 0c             	sub    esp,0xc
c0022652:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022656:	e8 77 ff ff ff       	call   c00225d2 <SoundDevice::~SoundDevice()>
c002265b:	83 c4 10             	add    esp,0x10
c002265e:	83 ec 08             	sub    esp,0x8
c0022661:	68 e4 01 00 00       	push   0x1e4
c0022666:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002266a:	e8 f7 0a ff ff       	call   c0013166 <operator delete(void*, unsigned long)>
c002266f:	83 c4 10             	add    esp,0x10
c0022672:	83 c4 0c             	add    esp,0xc
c0022675:	c3                   	ret    

c0022676 <SoundDevice::getFreeChannelNum()>:
c0022676:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002267a:	31 c0                	xor    eax,eax
c002267c:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022684:	74 09                	je     c002268f <SoundDevice::getFreeChannelNum()+0x19>
c0022686:	40                   	inc    eax
c0022687:	83 f8 20             	cmp    eax,0x20
c002268a:	75 f0                	jne    c002267c <SoundDevice::getFreeChannelNum()+0x6>
c002268c:	83 c8 ff             	or     eax,0xffffffff
c002268f:	c3                   	ret    

c0022690 <SoundDevice::addChannel(SoundChannel*)>:
c0022690:	56                   	push   esi
c0022691:	53                   	push   ebx
c0022692:	51                   	push   ecx
c0022693:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022697:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002269b:	53                   	push   ebx
c002269c:	e8 d5 ff ff ff       	call   c0022676 <SoundDevice::getFreeChannelNum()>
c00226a1:	5a                   	pop    edx
c00226a2:	83 f8 ff             	cmp    eax,0xffffffff
c00226a5:	74 51                	je     c00226f8 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00226a7:	85 f6                	test   esi,esi
c00226a9:	74 4d                	je     c00226f8 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00226ab:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00226b2:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00226b9:	75 30                	jne    c00226eb <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00226bb:	83 ec 0c             	sub    esp,0xc
c00226be:	56                   	push   esi
c00226bf:	e8 42 fd ff ff       	call   c0022406 <SoundChannel::getSampleRate()>
c00226c4:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c00226ca:	89 34 24             	mov    DWORD PTR [esp],esi
c00226cd:	e8 3c fd ff ff       	call   c002240e <SoundChannel::getBits()>
c00226d2:	83 c4 0c             	add    esp,0xc
c00226d5:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00226db:	8b 13                	mov    edx,DWORD PTR [ebx]
c00226dd:	50                   	push   eax
c00226de:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00226e4:	53                   	push   ebx
c00226e5:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00226e8:	83 c4 10             	add    esp,0x10
c00226eb:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00226f1:	b8 01 00 00 00       	mov    eax,0x1
c00226f6:	eb 03                	jmp    c00226fb <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00226f8:	83 c8 ff             	or     eax,0xffffffff
c00226fb:	5a                   	pop    edx
c00226fc:	5b                   	pop    ebx
c00226fd:	5e                   	pop    esi
c00226fe:	c3                   	ret    
c00226ff:	90                   	nop

c0022700 <SoundDevice::removeChannel(int)>:
c0022700:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022704:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022708:	83 fa 1f             	cmp    edx,0x1f
c002270b:	77 23                	ja     c0022730 <SoundDevice::removeChannel(int)+0x30>
c002270d:	8d 14 90             	lea    edx,[eax+edx*4]
c0022710:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022717:	74 17                	je     c0022730 <SoundDevice::removeChannel(int)+0x30>
c0022719:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022723:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022729:	75 05                	jne    c0022730 <SoundDevice::removeChannel(int)+0x30>
c002272b:	8b 00                	mov    eax,DWORD PTR [eax]
c002272d:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0022730:	c3                   	ret    
c0022731:	90                   	nop

c0022732 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022732:	57                   	push   edi
c0022733:	56                   	push   esi
c0022734:	53                   	push   ebx
c0022735:	31 db                	xor    ebx,ebx
c0022737:	83 ec 10             	sub    esp,0x10
c002273a:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002273e:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022742:	0f 8d cb 00 00 00    	jge    c0022813 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022748:	83 ec 0c             	sub    esp,0xc
c002274b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002274f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022752:	e8 80 5f 00 00       	call   c00286d7 <__extendsfdf2>
c0022757:	83 c4 10             	add    esp,0x10
c002275a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002275e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022762:	68 00 00 f0 3f       	push   0x3ff00000
c0022767:	6a 00                	push   0x0
c0022769:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002276d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022771:	e8 ed 4e 00 00       	call   c0027663 <__adddf3>
c0022776:	83 c4 10             	add    esp,0x10
c0022779:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002277d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022781:	68 00 00 e0 3f       	push   0x3fe00000
c0022786:	6a 00                	push   0x0
c0022788:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002278c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022790:	e8 4b 55 00 00       	call   c0027ce0 <__muldf3>
c0022795:	83 c4 10             	add    esp,0x10
c0022798:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002279c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00227a0:	68 00 00 60 40       	push   0x40600000
c00227a5:	6a 00                	push   0x0
c00227a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227af:	e8 2c 55 00 00       	call   c0027ce0 <__muldf3>
c00227b4:	59                   	pop    ecx
c00227b5:	5f                   	pop    edi
c00227b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00227ba:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00227be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227c6:	e8 e8 5d 00 00       	call   c00285b3 <__truncdfsf2>
c00227cb:	5a                   	pop    edx
c00227cc:	89 c7                	mov    edi,eax
c00227ce:	59                   	pop    ecx
c00227cf:	68 00 00 fe 42       	push   0x42fe0000
c00227d4:	50                   	push   eax
c00227d5:	e8 83 4e 00 00       	call   c002765d <__gesf2>
c00227da:	83 c4 10             	add    esp,0x10
c00227dd:	85 c0                	test   eax,eax
c00227df:	78 06                	js     c00227e7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00227e1:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c00227e5:	eb 26                	jmp    c002280d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00227e7:	50                   	push   eax
c00227e8:	50                   	push   eax
c00227e9:	6a 00                	push   0x0
c00227eb:	57                   	push   edi
c00227ec:	e8 70 4e 00 00       	call   c0027661 <__lesf2>
c00227f1:	83 c4 10             	add    esp,0x10
c00227f4:	85 c0                	test   eax,eax
c00227f6:	7f 06                	jg     c00227fe <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00227f8:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00227fc:	eb 0f                	jmp    c002280d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00227fe:	83 ec 0c             	sub    esp,0xc
c0022801:	57                   	push   edi
c0022802:	e8 65 5f 00 00       	call   c002876c <lrintf>
c0022807:	83 c4 10             	add    esp,0x10
c002280a:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c002280d:	43                   	inc    ebx
c002280e:	e9 2b ff ff ff       	jmp    c002273e <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022813:	83 c4 10             	add    esp,0x10
c0022816:	5b                   	pop    ebx
c0022817:	5e                   	pop    esi
c0022818:	5f                   	pop    edi
c0022819:	c3                   	ret    

c002281a <SoundDevice::getAudio(int, float*, float*)>:
c002281a:	55                   	push   ebp
c002281b:	57                   	push   edi
c002281c:	56                   	push   esi
c002281d:	53                   	push   ebx
c002281e:	31 db                	xor    ebx,ebx
c0022820:	83 ec 20             	sub    esp,0x20
c0022823:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022827:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002282b:	c1 e0 02             	shl    eax,0x2
c002282e:	50                   	push   eax
c002282f:	6a 00                	push   0x0
c0022831:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022835:	e8 8a de fd ff       	call   c00006c4 <memset>
c002283a:	83 c4 10             	add    esp,0x10
c002283d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022841:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0022848:	85 c0                	test   eax,eax
c002284a:	0f 84 d7 00 00 00    	je     c0022927 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022850:	83 ec 0c             	sub    esp,0xc
c0022853:	50                   	push   eax
c0022854:	e8 a5 fb ff ff       	call   c00223fe <SoundChannel::paused()>
c0022859:	83 c4 10             	add    esp,0x10
c002285c:	84 c0                	test   al,al
c002285e:	0f 85 c3 00 00 00    	jne    c0022927 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022864:	83 ec 0c             	sub    esp,0xc
c0022867:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002286e:	e8 6f fb ff ff       	call   c00223e2 <SoundChannel::getVolume()>
c0022873:	83 c4 10             	add    esp,0x10
c0022876:	85 c0                	test   eax,eax
c0022878:	0f 84 a9 00 00 00    	je     c0022927 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002287e:	83 ec 0c             	sub    esp,0xc
c0022881:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022888:	e8 55 fb ff ff       	call   c00223e2 <SoundChannel::getVolume()>
c002288d:	83 ec 0c             	sub    esp,0xc
c0022890:	50                   	push   eax
c0022891:	e8 71 4b 00 00       	call   c0027407 <__floatsisf>
c0022896:	59                   	pop    ecx
c0022897:	5d                   	pop    ebp
c0022898:	31 ed                	xor    ebp,ebp
c002289a:	68 00 00 c8 42       	push   0x42c80000
c002289f:	50                   	push   eax
c00228a0:	e8 37 49 00 00       	call   c00271dc <__divsf3>
c00228a5:	83 c4 10             	add    esp,0x10
c00228a8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00228ac:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00228b0:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c00228b6:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00228ba:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00228c1:	e8 60 fb ff ff       	call   c0022426 <SoundChannel::unbuffer(float*, int, int)>
c00228c6:	83 c4 20             	add    esp,0x20
c00228c9:	89 c1                	mov    ecx,eax
c00228cb:	39 cd                	cmp    ebp,ecx
c00228cd:	7d 52                	jge    c0022921 <SoundDevice::getAudio(int, float*, float*)+0x107>
c00228cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00228d3:	50                   	push   eax
c00228d4:	50                   	push   eax
c00228d5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00228d9:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00228dc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00228e0:	e8 34 47 00 00       	call   c0027019 <__mulsf3>
c00228e5:	5a                   	pop    edx
c00228e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00228ea:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c00228f0:	e8 12 4b 00 00       	call   c0027407 <__floatsisf>
c00228f5:	59                   	pop    ecx
c00228f6:	5a                   	pop    edx
c00228f7:	50                   	push   eax
c00228f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00228fc:	e8 db 48 00 00       	call   c00271dc <__divsf3>
c0022901:	59                   	pop    ecx
c0022902:	5a                   	pop    edx
c0022903:	50                   	push   eax
c0022904:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022908:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002290b:	e8 e6 43 00 00       	call   c0026cf6 <__addsf3>
c0022910:	83 c4 10             	add    esp,0x10
c0022913:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022917:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002291b:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c002291e:	45                   	inc    ebp
c002291f:	eb aa                	jmp    c00228cb <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0022921:	39 cf                	cmp    edi,ecx
c0022923:	7e 02                	jle    c0022927 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022925:	89 cf                	mov    edi,ecx
c0022927:	43                   	inc    ebx
c0022928:	83 fb 20             	cmp    ebx,0x20
c002292b:	0f 85 10 ff ff ff    	jne    c0022841 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0022931:	83 c4 1c             	add    esp,0x1c
c0022934:	89 f8                	mov    eax,edi
c0022936:	5b                   	pop    ebx
c0022937:	5e                   	pop    esi
c0022938:	5f                   	pop    edi
c0022939:	5d                   	pop    ebp
c002293a:	c3                   	ret    
c002293b:	90                   	nop

c002293c <PCI::PCI()>:
c002293c:	83 ec 0c             	sub    esp,0xc
c002293f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022943:	83 ec 08             	sub    esp,0x8
c0022946:	68 94 f0 02 c0       	push   0xc002f094
c002294b:	50                   	push   eax
c002294c:	e8 8f 15 ff ff       	call   c0013ee0 <Bus::Bus(char const*)>
c0022951:	83 c4 10             	add    esp,0x10
c0022954:	ba 00 f1 02 c0       	mov    edx,0xc002f100
c0022959:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002295d:	89 10                	mov    DWORD PTR [eax],edx
c002295f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022963:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022969:	0f b6 d0             	movzx  edx,al
c002296c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022970:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002297b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022981:	0f b6 d0             	movzx  edx,al
c0022984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022988:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002298d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022991:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022997:	8d 50 01             	lea    edx,[eax+0x1]
c002299a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002299e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00229a4:	0f b6 d0             	movzx  edx,al
c00229a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229ab:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00229af:	83 c9 c0             	or     ecx,0xffffffc0
c00229b2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00229b6:	90                   	nop
c00229b7:	83 c4 0c             	add    esp,0xc
c00229ba:	c3                   	ret    
c00229bb:	90                   	nop

c00229bc <PCI::open(int, int, void*)>:
c00229bc:	83 ec 18             	sub    esp,0x18
c00229bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00229c3:	8b 10                	mov    edx,DWORD PTR [eax]
c00229c5:	50                   	push   eax
c00229c6:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00229c9:	31 c0                	xor    eax,eax
c00229cb:	83 c4 1c             	add    esp,0x1c
c00229ce:	c3                   	ret    
c00229cf:	90                   	nop

c00229d0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00229d0:	83 ec 18             	sub    esp,0x18
c00229d3:	6a 00                	push   0x0
c00229d5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00229da:	50                   	push   eax
c00229db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00229e0:	50                   	push   eax
c00229e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00229e6:	50                   	push   eax
c00229e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00229eb:	e8 72 01 00 00       	call   c0022b62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229f0:	83 c4 2c             	add    esp,0x2c
c00229f3:	c3                   	ret    

c00229f4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00229f4:	83 ec 18             	sub    esp,0x18
c00229f7:	6a 0e                	push   0xe
c00229f9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00229fe:	50                   	push   eax
c00229ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022a04:	50                   	push   eax
c0022a05:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022a0a:	50                   	push   eax
c0022a0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022a0f:	e8 4e 01 00 00       	call   c0022b62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a14:	83 c4 2c             	add    esp,0x2c
c0022a17:	0f b6 c0             	movzx  eax,al
c0022a1a:	c3                   	ret    
c0022a1b:	90                   	nop

c0022a1c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022a1c:	55                   	push   ebp
c0022a1d:	57                   	push   edi
c0022a1e:	56                   	push   esi
c0022a1f:	53                   	push   ebx
c0022a20:	83 ec 18             	sub    esp,0x18
c0022a23:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0022a28:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0022a2d:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0022a32:	6a 0a                	push   0xa
c0022a34:	56                   	push   esi
c0022a35:	55                   	push   ebp
c0022a36:	57                   	push   edi
c0022a37:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022a3b:	e8 22 01 00 00       	call   c0022b62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a40:	83 c4 14             	add    esp,0x14
c0022a43:	89 c3                	mov    ebx,eax
c0022a45:	6a 0a                	push   0xa
c0022a47:	0f b6 db             	movzx  ebx,bl
c0022a4a:	56                   	push   esi
c0022a4b:	55                   	push   ebp
c0022a4c:	57                   	push   edi
c0022a4d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022a51:	e8 0c 01 00 00       	call   c0022b62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a56:	83 c4 2c             	add    esp,0x2c
c0022a59:	25 00 ff 00 00       	and    eax,0xff00
c0022a5e:	09 d8                	or     eax,ebx
c0022a60:	5b                   	pop    ebx
c0022a61:	5e                   	pop    esi
c0022a62:	5f                   	pop    edi
c0022a63:	5d                   	pop    ebp
c0022a64:	c3                   	ret    
c0022a65:	90                   	nop

c0022a66 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022a66:	83 ec 18             	sub    esp,0x18
c0022a69:	6a 08                	push   0x8
c0022a6b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022a70:	50                   	push   eax
c0022a71:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022a76:	50                   	push   eax
c0022a77:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022a7c:	50                   	push   eax
c0022a7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022a81:	e8 dc 00 00 00       	call   c0022b62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a86:	83 c4 2c             	add    esp,0x2c
c0022a89:	0f b6 c4             	movzx  eax,ah
c0022a8c:	c3                   	ret    
c0022a8d:	90                   	nop

c0022a8e <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022a8e:	83 ec 18             	sub    esp,0x18
c0022a91:	6a 08                	push   0x8
c0022a93:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022a98:	50                   	push   eax
c0022a99:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022a9e:	50                   	push   eax
c0022a9f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022aa4:	50                   	push   eax
c0022aa5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022aa9:	e8 b4 00 00 00       	call   c0022b62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022aae:	83 c4 2c             	add    esp,0x2c
c0022ab1:	c3                   	ret    

c0022ab2 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022ab2:	83 ec 18             	sub    esp,0x18
c0022ab5:	6a 3c                	push   0x3c
c0022ab7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022abc:	50                   	push   eax
c0022abd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022ac2:	50                   	push   eax
c0022ac3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022ac8:	50                   	push   eax
c0022ac9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022acd:	e8 90 00 00 00       	call   c0022b62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ad2:	83 c4 2c             	add    esp,0x2c
c0022ad5:	c3                   	ret    

c0022ad6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022ad6:	83 ec 18             	sub    esp,0x18
c0022ad9:	6a 18                	push   0x18
c0022adb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022ae0:	50                   	push   eax
c0022ae1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022ae6:	50                   	push   eax
c0022ae7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022aec:	50                   	push   eax
c0022aed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022af1:	e8 6c 00 00 00       	call   c0022b62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022af6:	83 c4 2c             	add    esp,0x2c
c0022af9:	0f b6 c4             	movzx  eax,ah
c0022afc:	c3                   	ret    
c0022afd:	90                   	nop

c0022afe <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022afe:	55                   	push   ebp
c0022aff:	57                   	push   edi
c0022b00:	56                   	push   esi
c0022b01:	53                   	push   ebx
c0022b02:	83 ec 28             	sub    esp,0x28
c0022b05:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0022b09:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0022b0e:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0022b13:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0022b18:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022b1f:	8d 43 12             	lea    eax,[ebx+0x12]
c0022b22:	83 c3 10             	add    ebx,0x10
c0022b25:	0f b6 c0             	movzx  eax,al
c0022b28:	0f b6 db             	movzx  ebx,bl
c0022b2b:	50                   	push   eax
c0022b2c:	51                   	push   ecx
c0022b2d:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0022b31:	57                   	push   edi
c0022b32:	55                   	push   ebp
c0022b33:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022b37:	e8 26 00 00 00       	call   c0022b62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b3c:	83 c4 14             	add    esp,0x14
c0022b3f:	89 c6                	mov    esi,eax
c0022b41:	53                   	push   ebx
c0022b42:	c1 e6 10             	shl    esi,0x10
c0022b45:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022b49:	51                   	push   ecx
c0022b4a:	57                   	push   edi
c0022b4b:	55                   	push   ebp
c0022b4c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022b50:	e8 0d 00 00 00       	call   c0022b62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b55:	83 c4 3c             	add    esp,0x3c
c0022b58:	0f b7 c0             	movzx  eax,ax
c0022b5b:	5b                   	pop    ebx
c0022b5c:	09 f0                	or     eax,esi
c0022b5e:	5e                   	pop    esi
c0022b5f:	5f                   	pop    edi
c0022b60:	5d                   	pop    ebp
c0022b61:	c3                   	ret    

c0022b62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022b62:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022b66:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022b6b:	89 ca                	mov    edx,ecx
c0022b6d:	c1 e0 10             	shl    eax,0x10
c0022b70:	81 e2 fc 00 00 00    	and    edx,0xfc
c0022b76:	09 d0                	or     eax,edx
c0022b78:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022b7d:	c1 e2 08             	shl    edx,0x8
c0022b80:	09 d0                	or     eax,edx
c0022b82:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0022b87:	c1 e2 0b             	shl    edx,0xb
c0022b8a:	09 d0                	or     eax,edx
c0022b8c:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b91:	0d 00 00 00 80       	or     eax,0x80000000
c0022b96:	ef                   	out    dx,eax
c0022b97:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b9c:	ed                   	in     eax,dx
c0022b9d:	83 e1 02             	and    ecx,0x2
c0022ba0:	0f b6 c9             	movzx  ecx,cl
c0022ba3:	c1 e1 03             	shl    ecx,0x3
c0022ba6:	d3 e8                	shr    eax,cl
c0022ba8:	c3                   	ret    
c0022ba9:	90                   	nop

c0022baa <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022baa:	53                   	push   ebx
c0022bab:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022bb0:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022bb5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022bb9:	c1 e1 10             	shl    ecx,0x10
c0022bbc:	25 fc 00 00 00       	and    eax,0xfc
c0022bc1:	09 c1                	or     ecx,eax
c0022bc3:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022bc8:	c1 e0 08             	shl    eax,0x8
c0022bcb:	09 c1                	or     ecx,eax
c0022bcd:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022bd2:	c1 e0 0b             	shl    eax,0xb
c0022bd5:	09 c1                	or     ecx,eax
c0022bd7:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022bdd:	89 c8                	mov    eax,ecx
c0022bdf:	ef                   	out    dx,eax
c0022be0:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022be5:	ed                   	in     eax,dx
c0022be6:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022beb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022bf0:	74 0a                	je     c0022bfc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022bf2:	0f b7 d8             	movzx  ebx,ax
c0022bf5:	89 d0                	mov    eax,edx
c0022bf7:	c1 e0 10             	shl    eax,0x10
c0022bfa:	eb 05                	jmp    c0022c01 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022bfc:	66 31 c0             	xor    ax,ax
c0022bff:	89 d3                	mov    ebx,edx
c0022c01:	09 c3                	or     ebx,eax
c0022c03:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022c08:	89 c8                	mov    eax,ecx
c0022c0a:	ef                   	out    dx,eax
c0022c0b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022c10:	89 d8                	mov    eax,ebx
c0022c12:	ef                   	out    dx,eax
c0022c13:	5b                   	pop    ebx
c0022c14:	c3                   	ret    
c0022c15:	90                   	nop

c0022c16 <PCI::close(int, int, void*)>:
c0022c16:	31 c0                	xor    eax,eax
c0022c18:	c3                   	ret    
c0022c19:	90                   	nop

c0022c1a <PCI::foundDevice(PCIDeviceInfo)>:
c0022c1a:	55                   	push   ebp
c0022c1b:	57                   	push   edi
c0022c1c:	56                   	push   esi
c0022c1d:	53                   	push   ebx
c0022c1e:	83 ec 1c             	sub    esp,0x1c
c0022c21:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022c25:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022c2b:	0f 84 55 01 00 00    	je     c0022d86 <PCI::foundDevice(PCIDeviceInfo)+0x16c>
c0022c31:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022c35:	66 81 f9 06 04       	cmp    cx,0x406
c0022c3a:	75 2f                	jne    c0022c6b <PCI::foundDevice(PCIDeviceInfo)+0x51>
c0022c3c:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022c41:	50                   	push   eax
c0022c42:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022c47:	50                   	push   eax
c0022c48:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022c4d:	50                   	push   eax
c0022c4e:	56                   	push   esi
c0022c4f:	e8 82 fe ff ff       	call   c0022ad6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022c54:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022c58:	0f b6 c0             	movzx  eax,al
c0022c5b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022c5f:	83 c4 2c             	add    esp,0x2c
c0022c62:	5b                   	pop    ebx
c0022c63:	5e                   	pop    esi
c0022c64:	5f                   	pop    edi
c0022c65:	5d                   	pop    ebp
c0022c66:	e9 3d 03 00 00       	jmp    c0022fa8 <PCI::checkBus(unsigned char)>
c0022c6b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022c6f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022c75:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022c79:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022c7d:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022c81:	88 d3                	mov    bl,dl
c0022c83:	85 c0                	test   eax,eax
c0022c85:	74 33                	je     c0022cba <PCI::foundDevice(PCIDeviceInfo)+0xa0>
c0022c87:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022c8a:	85 d2                	test   edx,edx
c0022c8c:	74 28                	je     c0022cb6 <PCI::foundDevice(PCIDeviceInfo)+0x9c>
c0022c8e:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022c94:	31 ef                	xor    edi,ebp
c0022c96:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022c9c:	75 18                	jne    c0022cb6 <PCI::foundDevice(PCIDeviceInfo)+0x9c>
c0022c9e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022ca2:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022ca8:	75 0c                	jne    c0022cb6 <PCI::foundDevice(PCIDeviceInfo)+0x9c>
c0022caa:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022cb0:	0f 84 d0 00 00 00    	je     c0022d86 <PCI::foundDevice(PCIDeviceInfo)+0x16c>
c0022cb6:	8b 00                	mov    eax,DWORD PTR [eax]
c0022cb8:	eb c9                	jmp    c0022c83 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c0022cba:	66 81 f9 01 06       	cmp    cx,0x601
c0022cbf:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022cc3:	75 19                	jne    c0022cde <PCI::foundDevice(PCIDeviceInfo)+0xc4>
c0022cc5:	83 ec 0c             	sub    esp,0xc
c0022cc8:	68 64 01 00 00       	push   0x164
c0022ccd:	e8 8a d2 fe ff       	call   c000ff5c <malloc>
c0022cd2:	89 c5                	mov    ebp,eax
c0022cd4:	89 04 24             	mov    DWORD PTR [esp],eax
c0022cd7:	e8 b4 0f 00 00       	call   c0023c90 <SATABus::SATABus()>
c0022cdc:	eb 1e                	jmp    c0022cfc <PCI::foundDevice(PCIDeviceInfo)+0xe2>
c0022cde:	66 81 f9 01 01       	cmp    cx,0x101
c0022ce3:	75 60                	jne    c0022d45 <PCI::foundDevice(PCIDeviceInfo)+0x12b>
c0022ce5:	83 ec 0c             	sub    esp,0xc
c0022ce8:	68 70 02 00 00       	push   0x270
c0022ced:	e8 6a d2 fe ff       	call   c000ff5c <malloc>
c0022cf2:	89 c5                	mov    ebp,eax
c0022cf4:	89 04 24             	mov    DWORD PTR [esp],eax
c0022cf7:	e8 24 03 00 00       	call   c0023020 <IDE::IDE()>
c0022cfc:	58                   	pop    eax
c0022cfd:	5a                   	pop    edx
c0022cfe:	55                   	push   ebp
c0022cff:	56                   	push   esi
c0022d00:	e8 41 1a ff ff       	call   c0014746 <Device::addChild(Device*)>
c0022d05:	83 ec 1c             	sub    esp,0x1c
c0022d08:	b9 09 00 00 00       	mov    ecx,0x9
c0022d0d:	fc                   	cld    
c0022d0e:	89 e7                	mov    edi,esp
c0022d10:	89 de                	mov    esi,ebx
c0022d12:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d14:	55                   	push   ebp
c0022d15:	e8 36 19 ff ff       	call   c0014650 <Device::preOpenPCI(PCIDeviceInfo)>
c0022d1a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022d1d:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022d21:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022d29:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022d31:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022d39:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022d3c:	83 c4 4c             	add    esp,0x4c
c0022d3f:	5b                   	pop    ebx
c0022d40:	5e                   	pop    esi
c0022d41:	5f                   	pop    edi
c0022d42:	5d                   	pop    ebp
c0022d43:	ff e0                	jmp    eax
c0022d45:	83 ec 0c             	sub    esp,0xc
c0022d48:	68 58 01 00 00       	push   0x158
c0022d4d:	e8 0a d2 fe ff       	call   c000ff5c <malloc>
c0022d52:	89 c5                	mov    ebp,eax
c0022d54:	58                   	pop    eax
c0022d55:	5a                   	pop    edx
c0022d56:	68 9c f0 02 c0       	push   0xc002f09c
c0022d5b:	55                   	push   ebp
c0022d5c:	e8 57 1c ff ff       	call   c00149b8 <DriverlessDevice::DriverlessDevice(char const*)>
c0022d61:	59                   	pop    ecx
c0022d62:	5f                   	pop    edi
c0022d63:	55                   	push   ebp
c0022d64:	56                   	push   esi
c0022d65:	e8 dc 19 ff ff       	call   c0014746 <Device::addChild(Device*)>
c0022d6a:	b9 09 00 00 00       	mov    ecx,0x9
c0022d6f:	fc                   	cld    
c0022d70:	89 df                	mov    edi,ebx
c0022d72:	89 de                	mov    esi,ebx
c0022d74:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d76:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022d7a:	83 c4 2c             	add    esp,0x2c
c0022d7d:	5b                   	pop    ebx
c0022d7e:	5e                   	pop    esi
c0022d7f:	5f                   	pop    edi
c0022d80:	5d                   	pop    ebp
c0022d81:	e9 ca 18 ff ff       	jmp    c0014650 <Device::preOpenPCI(PCIDeviceInfo)>
c0022d86:	83 c4 1c             	add    esp,0x1c
c0022d89:	5b                   	pop    ebx
c0022d8a:	5e                   	pop    esi
c0022d8b:	5f                   	pop    edi
c0022d8c:	5d                   	pop    ebp
c0022d8d:	c3                   	ret    

c0022d8e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022d8e:	55                   	push   ebp
c0022d8f:	57                   	push   edi
c0022d90:	56                   	push   esi
c0022d91:	53                   	push   ebx
c0022d92:	83 ec 5c             	sub    esp,0x5c
c0022d95:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022d99:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022d9d:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022da1:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022da6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022daa:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022dae:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022db3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022db7:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022dbc:	6a 0c                	push   0xc
c0022dbe:	55                   	push   ebp
c0022dbf:	53                   	push   ebx
c0022dc0:	57                   	push   edi
c0022dc1:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022dc8:	e8 95 fd ff ff       	call   c0022b62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022dcd:	83 c4 14             	add    esp,0x14
c0022dd0:	55                   	push   ebp
c0022dd1:	53                   	push   ebx
c0022dd2:	57                   	push   edi
c0022dd3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022dd7:	e8 40 fc ff ff       	call   c0022a1c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022ddc:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0022de1:	55                   	push   ebp
c0022de2:	53                   	push   ebx
c0022de3:	57                   	push   edi
c0022de4:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022deb:	e8 c2 fc ff ff       	call   c0022ab2 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022df0:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0022df4:	83 c4 14             	add    esp,0x14
c0022df7:	6a 3c                	push   0x3c
c0022df9:	55                   	push   ebp
c0022dfa:	53                   	push   ebx
c0022dfb:	57                   	push   edi
c0022dfc:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022e03:	e8 5a fd ff ff       	call   c0022b62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e08:	0f b6 c4             	movzx  eax,ah
c0022e0b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0022e0f:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0022e13:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0022e17:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0022e1c:	83 c4 20             	add    esp,0x20
c0022e1f:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022e25:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022e2c:	74 6c                	je     c0022e9a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10c>
c0022e2e:	31 f6                	xor    esi,esi
c0022e30:	8b 15 90 13 03 c0    	mov    edx,DWORD PTR ds:0xc0031390
c0022e36:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022e3c:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022e42:	7e 56                	jle    c0022e9a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10c>
c0022e44:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022e47:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022e4e:	39 cb                	cmp    ebx,ecx
c0022e50:	75 45                	jne    c0022e97 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022e52:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022e59:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022e5d:	75 38                	jne    c0022e97 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022e5f:	83 ec 0c             	sub    esp,0xc
c0022e62:	68 b6 f0 02 c0       	push   0xc002f0b6
c0022e67:	e8 da 03 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0022e6c:	8b 15 90 13 03 c0    	mov    edx,DWORD PTR ds:0xc0031390
c0022e72:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022e78:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022e80:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022e84:	52                   	push   edx
c0022e85:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022e89:	53                   	push   ebx
c0022e8a:	68 db f0 02 c0       	push   0xc002f0db
c0022e8f:	e8 b2 03 ff ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0022e94:	83 c4 20             	add    esp,0x20
c0022e97:	46                   	inc    esi
c0022e98:	eb 96                	jmp    c0022e30 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0022e9a:	31 d2                	xor    edx,edx
c0022e9c:	83 ec 0c             	sub    esp,0xc
c0022e9f:	55                   	push   ebp
c0022ea0:	53                   	push   ebx
c0022ea1:	57                   	push   edi
c0022ea2:	52                   	push   edx
c0022ea3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022ea7:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022eae:	e8 4b fc ff ff       	call   c0022afe <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022eb3:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022eb7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022ebb:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022ebf:	42                   	inc    edx
c0022ec0:	83 c4 20             	add    esp,0x20
c0022ec3:	83 fa 06             	cmp    edx,0x6
c0022ec6:	75 d4                	jne    c0022e9c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10e>
c0022ec8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022ecc:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022ed0:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022ed4:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022ed8:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022edc:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022ee0:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022ee5:	86 e0                	xchg   al,ah
c0022ee7:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022eec:	55                   	push   ebp
c0022eed:	53                   	push   ebx
c0022eee:	57                   	push   edi
c0022eef:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022ef3:	e8 6e fb ff ff       	call   c0022a66 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022ef8:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022efc:	55                   	push   ebp
c0022efd:	53                   	push   ebx
c0022efe:	57                   	push   edi
c0022eff:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022f06:	e8 c5 fa ff ff       	call   c00229d0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f0b:	83 ec 0c             	sub    esp,0xc
c0022f0e:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022f13:	b9 09 00 00 00       	mov    ecx,0x9
c0022f18:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022f1c:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022f20:	fc                   	cld    
c0022f21:	89 e7                	mov    edi,esp
c0022f23:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022f25:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022f2c:	e8 e9 fc ff ff       	call   c0022c1a <PCI::foundDevice(PCIDeviceInfo)>
c0022f31:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022f37:	5b                   	pop    ebx
c0022f38:	5e                   	pop    esi
c0022f39:	5f                   	pop    edi
c0022f3a:	5d                   	pop    ebp
c0022f3b:	c3                   	ret    

c0022f3c <PCI::checkDevice(unsigned char, unsigned char)>:
c0022f3c:	55                   	push   ebp
c0022f3d:	57                   	push   edi
c0022f3e:	56                   	push   esi
c0022f3f:	53                   	push   ebx
c0022f40:	83 ec 0c             	sub    esp,0xc
c0022f43:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022f47:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022f4c:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022f51:	6a 00                	push   0x0
c0022f53:	56                   	push   esi
c0022f54:	57                   	push   edi
c0022f55:	55                   	push   ebp
c0022f56:	e8 75 fa ff ff       	call   c00229d0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f5b:	6a 00                	push   0x0
c0022f5d:	56                   	push   esi
c0022f5e:	57                   	push   edi
c0022f5f:	55                   	push   ebp
c0022f60:	e8 29 fe ff ff       	call   c0022d8e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f65:	83 c4 20             	add    esp,0x20
c0022f68:	6a 00                	push   0x0
c0022f6a:	56                   	push   esi
c0022f6b:	57                   	push   edi
c0022f6c:	55                   	push   ebp
c0022f6d:	e8 82 fa ff ff       	call   c00229f4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f72:	83 c4 10             	add    esp,0x10
c0022f75:	84 c0                	test   al,al
c0022f77:	79 27                	jns    c0022fa0 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022f79:	bb 01 00 00 00       	mov    ebx,0x1
c0022f7e:	53                   	push   ebx
c0022f7f:	56                   	push   esi
c0022f80:	57                   	push   edi
c0022f81:	55                   	push   ebp
c0022f82:	e8 49 fa ff ff       	call   c00229d0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f87:	83 c4 10             	add    esp,0x10
c0022f8a:	66 40                	inc    ax
c0022f8c:	74 0c                	je     c0022f9a <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022f8e:	53                   	push   ebx
c0022f8f:	56                   	push   esi
c0022f90:	57                   	push   edi
c0022f91:	55                   	push   ebp
c0022f92:	e8 f7 fd ff ff       	call   c0022d8e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f97:	83 c4 10             	add    esp,0x10
c0022f9a:	43                   	inc    ebx
c0022f9b:	83 fb 08             	cmp    ebx,0x8
c0022f9e:	75 de                	jne    c0022f7e <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022fa0:	83 c4 0c             	add    esp,0xc
c0022fa3:	5b                   	pop    ebx
c0022fa4:	5e                   	pop    esi
c0022fa5:	5f                   	pop    edi
c0022fa6:	5d                   	pop    ebp
c0022fa7:	c3                   	ret    

c0022fa8 <PCI::checkBus(unsigned char)>:
c0022fa8:	56                   	push   esi
c0022fa9:	53                   	push   ebx
c0022faa:	31 db                	xor    ebx,ebx
c0022fac:	51                   	push   ecx
c0022fad:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022fb2:	52                   	push   edx
c0022fb3:	53                   	push   ebx
c0022fb4:	43                   	inc    ebx
c0022fb5:	56                   	push   esi
c0022fb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022fba:	e8 7d ff ff ff       	call   c0022f3c <PCI::checkDevice(unsigned char, unsigned char)>
c0022fbf:	83 c4 10             	add    esp,0x10
c0022fc2:	83 fb 20             	cmp    ebx,0x20
c0022fc5:	75 eb                	jne    c0022fb2 <PCI::checkBus(unsigned char)+0xa>
c0022fc7:	58                   	pop    eax
c0022fc8:	5b                   	pop    ebx
c0022fc9:	5e                   	pop    esi
c0022fca:	c3                   	ret    
c0022fcb:	90                   	nop

c0022fcc <PCI::detect()>:
c0022fcc:	56                   	push   esi
c0022fcd:	53                   	push   ebx
c0022fce:	53                   	push   ebx
c0022fcf:	31 db                	xor    ebx,ebx
c0022fd1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022fd5:	6a 00                	push   0x0
c0022fd7:	6a 00                	push   0x0
c0022fd9:	6a 00                	push   0x0
c0022fdb:	56                   	push   esi
c0022fdc:	e8 13 fa ff ff       	call   c00229f4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022fe1:	83 c4 10             	add    esp,0x10
c0022fe4:	a8 80                	test   al,0x80
c0022fe6:	75 21                	jne    c0023009 <PCI::detect()+0x3d>
c0022fe8:	51                   	push   ecx
c0022fe9:	51                   	push   ecx
c0022fea:	6a 00                	push   0x0
c0022fec:	56                   	push   esi
c0022fed:	e8 b6 ff ff ff       	call   c0022fa8 <PCI::checkBus(unsigned char)>
c0022ff2:	83 c4 10             	add    esp,0x10
c0022ff5:	eb 24                	jmp    c002301b <PCI::detect()+0x4f>
c0022ff7:	52                   	push   edx
c0022ff8:	52                   	push   edx
c0022ff9:	53                   	push   ebx
c0022ffa:	43                   	inc    ebx
c0022ffb:	56                   	push   esi
c0022ffc:	e8 a7 ff ff ff       	call   c0022fa8 <PCI::checkBus(unsigned char)>
c0023001:	83 c4 10             	add    esp,0x10
c0023004:	83 fb 08             	cmp    ebx,0x8
c0023007:	74 12                	je     c002301b <PCI::detect()+0x4f>
c0023009:	53                   	push   ebx
c002300a:	6a 00                	push   0x0
c002300c:	6a 00                	push   0x0
c002300e:	56                   	push   esi
c002300f:	e8 bc f9 ff ff       	call   c00229d0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023014:	83 c4 10             	add    esp,0x10
c0023017:	66 40                	inc    ax
c0023019:	74 dc                	je     c0022ff7 <PCI::detect()+0x2b>
c002301b:	58                   	pop    eax
c002301c:	5b                   	pop    ebx
c002301d:	5e                   	pop    esi
c002301e:	c3                   	ret    
c002301f:	90                   	nop

c0023020 <IDE::IDE()>:
c0023020:	83 ec 0c             	sub    esp,0xc
c0023023:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023027:	83 ec 08             	sub    esp,0x8
c002302a:	68 c4 f1 02 c0       	push   0xc002f1c4
c002302f:	50                   	push   eax
c0023030:	e8 c5 19 ff ff       	call   c00149fa <HardDiskController::HardDiskController(char const*)>
c0023035:	83 c4 10             	add    esp,0x10
c0023038:	ba 04 f4 02 c0       	mov    edx,0xc002f404
c002303d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023041:	89 10                	mov    DWORD PTR [eax],edx
c0023043:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023047:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c002304e:	90                   	nop
c002304f:	83 c4 0c             	add    esp,0xc
c0023052:	c3                   	ret    
c0023053:	90                   	nop

c0023054 <IDE::prepareInterrupt(unsigned char)>:
c0023054:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023059:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002305d:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0023065:	c3                   	ret    

c0023066 <IDE::waitInterrupt(unsigned char)>:
c0023066:	55                   	push   ebp
c0023067:	57                   	push   edi
c0023068:	56                   	push   esi
c0023069:	53                   	push   ebx
c002306a:	31 db                	xor    ebx,ebx
c002306c:	83 ec 0c             	sub    esp,0xc
c002306f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023073:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023078:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023080:	89 e8                	mov    eax,ebp
c0023082:	84 c0                	test   al,al
c0023084:	75 34                	jne    c00230ba <IDE::waitInterrupt(unsigned char)+0x54>
c0023086:	52                   	push   edx
c0023087:	6a 0c                	push   0xc
c0023089:	56                   	push   esi
c002308a:	57                   	push   edi
c002308b:	e8 e2 04 00 00       	call   c0023572 <IDE::read(unsigned char, unsigned char)>
c0023090:	83 c4 10             	add    esp,0x10
c0023093:	a8 01                	test   al,0x1
c0023095:	75 2b                	jne    c00230c2 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023097:	f6 c3 04             	test   bl,0x4
c002309a:	75 16                	jne    c00230b2 <IDE::waitInterrupt(unsigned char)+0x4c>
c002309c:	83 fb 32             	cmp    ebx,0x32
c002309f:	7e 11                	jle    c00230b2 <IDE::waitInterrupt(unsigned char)+0x4c>
c00230a1:	50                   	push   eax
c00230a2:	50                   	push   eax
c00230a3:	6a 00                	push   0x0
c00230a5:	68 80 96 98 00       	push   0x989680
c00230aa:	e8 53 b7 ff ff       	call   c001e802 <nanoSleep(unsigned long long)>
c00230af:	83 c4 10             	add    esp,0x10
c00230b2:	83 fb 3c             	cmp    ebx,0x3c
c00230b5:	74 0b                	je     c00230c2 <IDE::waitInterrupt(unsigned char)+0x5c>
c00230b7:	43                   	inc    ebx
c00230b8:	eb be                	jmp    c0023078 <IDE::waitInterrupt(unsigned char)+0x12>
c00230ba:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00230c2:	83 c4 0c             	add    esp,0xc
c00230c5:	89 e8                	mov    eax,ebp
c00230c7:	5b                   	pop    ebx
c00230c8:	5e                   	pop    esi
c00230c9:	5f                   	pop    edi
c00230ca:	5d                   	pop    ebp
c00230cb:	c3                   	ret    

c00230cc <ideChannel0IRQHandler(regs*, void*)>:
c00230cc:	83 ec 10             	sub    esp,0x10
c00230cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00230d3:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00230da:	6a 07                	push   0x7
c00230dc:	6a 00                	push   0x0
c00230de:	50                   	push   eax
c00230df:	e8 8e 04 00 00       	call   c0023572 <IDE::read(unsigned char, unsigned char)>
c00230e4:	83 c4 1c             	add    esp,0x1c
c00230e7:	c3                   	ret    

c00230e8 <ideChannel1IRQHandler(regs*, void*)>:
c00230e8:	83 ec 10             	sub    esp,0x10
c00230eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00230ef:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00230f6:	6a 07                	push   0x7
c00230f8:	6a 01                	push   0x1
c00230fa:	50                   	push   eax
c00230fb:	e8 72 04 00 00       	call   c0023572 <IDE::read(unsigned char, unsigned char)>
c0023100:	83 c4 1c             	add    esp,0x1c
c0023103:	c3                   	ret    

c0023104 <IDE::open(int, int, void*)>:
c0023104:	55                   	push   ebp
c0023105:	57                   	push   edi
c0023106:	56                   	push   esi
c0023107:	53                   	push   ebx
c0023108:	83 ec 1c             	sub    esp,0x1c
c002310b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002310f:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023118:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023121:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023128:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002312f:	0f 85 b0 02 00 00    	jne    c00233e5 <IDE::open(int, int, void*)+0x2e1>
c0023135:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002313b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c002313f:	83 e0 7f             	and    eax,0x7f
c0023142:	3c 05                	cmp    al,0x5
c0023144:	74 04                	je     c002314a <IDE::open(int, int, void*)+0x46>
c0023146:	3c 0f                	cmp    al,0xf
c0023148:	75 32                	jne    c002317c <IDE::open(int, int, void*)+0x78>
c002314a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023150:	83 e0 fc             	and    eax,0xfffffffc
c0023153:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002315a:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023160:	83 e0 fc             	and    eax,0xfffffffc
c0023163:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002316a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023170:	83 e0 fc             	and    eax,0xfffffffc
c0023173:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002317a:	eb 14                	jmp    c0023190 <IDE::open(int, int, void*)+0x8c>
c002317c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023186:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023190:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023197:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002319e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00231a2:	89 c6                	mov    esi,eax
c00231a4:	bf f8 0c 00 00       	mov    edi,0xcf8
c00231a9:	c1 e6 10             	shl    esi,0x10
c00231ac:	89 e8                	mov    eax,ebp
c00231ae:	89 fa                	mov    edx,edi
c00231b0:	c1 e0 0b             	shl    eax,0xb
c00231b3:	09 f0                	or     eax,esi
c00231b5:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00231bc:	c1 e6 08             	shl    esi,0x8
c00231bf:	09 c6                	or     esi,eax
c00231c1:	89 f0                	mov    eax,esi
c00231c3:	0d 08 00 00 80       	or     eax,0x80000008
c00231c8:	ef                   	out    dx,eax
c00231c9:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00231ce:	89 ca                	mov    edx,ecx
c00231d0:	ed                   	in     eax,dx
c00231d1:	c1 e8 10             	shr    eax,0x10
c00231d4:	3d ff ff 00 00       	cmp    eax,0xffff
c00231d9:	0f 84 f5 00 00 00    	je     c00232d4 <IDE::open(int, int, void*)+0x1d0>
c00231df:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00231e5:	89 fa                	mov    edx,edi
c00231e7:	89 f0                	mov    eax,esi
c00231e9:	ef                   	out    dx,eax
c00231ea:	b0 fe                	mov    al,0xfe
c00231ec:	89 ca                	mov    edx,ecx
c00231ee:	ee                   	out    dx,al
c00231ef:	89 f0                	mov    eax,esi
c00231f1:	89 fa                	mov    edx,edi
c00231f3:	ef                   	out    dx,eax
c00231f4:	89 ca                	mov    edx,ecx
c00231f6:	ed                   	in     eax,dx
c00231f7:	3c fe                	cmp    al,0xfe
c00231f9:	0f 85 a9 00 00 00    	jne    c00232a8 <IDE::open(int, int, void*)+0x1a4>
c00231ff:	8b 15 90 13 03 c0    	mov    edx,DWORD PTR ds:0xc0031390
c0023205:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c002320c:	74 33                	je     c0023241 <IDE::open(int, int, void*)+0x13d>
c002320e:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023214:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023218:	40                   	inc    eax
c0023219:	83 ec 0c             	sub    esp,0xc
c002321c:	0f b6 c0             	movzx  eax,al
c002321f:	50                   	push   eax
c0023220:	55                   	push   ebp
c0023221:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023225:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c002322b:	51                   	push   ecx
c002322c:	e8 b3 52 ff ff       	call   c00184e4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023231:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023236:	83 c4 1c             	add    esp,0x1c
c0023239:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002323f:	eb 0a                	jmp    c002324b <IDE::open(int, int, void*)+0x147>
c0023241:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002324b:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023252:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023259:	c1 e1 10             	shl    ecx,0x10
c002325c:	c1 e0 08             	shl    eax,0x8
c002325f:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023264:	09 c1                	or     ecx,eax
c0023266:	89 fa                	mov    edx,edi
c0023268:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002326f:	c1 e0 0b             	shl    eax,0xb
c0023272:	09 c1                	or     ecx,eax
c0023274:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002327a:	89 c8                	mov    eax,ecx
c002327c:	ef                   	out    dx,eax
c002327d:	be fc 0c 00 00       	mov    esi,0xcfc
c0023282:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023288:	89 f2                	mov    edx,esi
c002328a:	ee                   	out    dx,al
c002328b:	89 c8                	mov    eax,ecx
c002328d:	89 fa                	mov    edx,edi
c002328f:	ef                   	out    dx,eax
c0023290:	89 f2                	mov    edx,esi
c0023292:	ed                   	in     eax,dx
c0023293:	0f b6 c0             	movzx  eax,al
c0023296:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002329c:	74 46                	je     c00232e4 <IDE::open(int, int, void*)+0x1e0>
c002329e:	83 ec 0c             	sub    esp,0xc
c00232a1:	68 dc f1 02 c0       	push   0xc002f1dc
c00232a6:	eb 34                	jmp    c00232dc <IDE::open(int, int, void*)+0x1d8>
c00232a8:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00232b1:	75 17                	jne    c00232ca <IDE::open(int, int, void*)+0x1c6>
c00232b3:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00232b8:	74 07                	je     c00232c1 <IDE::open(int, int, void*)+0x1bd>
c00232ba:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00232bf:	75 09                	jne    c00232ca <IDE::open(int, int, void*)+0x1c6>
c00232c1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00232c8:	eb 1a                	jmp    c00232e4 <IDE::open(int, int, void*)+0x1e0>
c00232ca:	83 ec 0c             	sub    esp,0xc
c00232cd:	68 e4 f1 02 c0       	push   0xc002f1e4
c00232d2:	eb 08                	jmp    c00232dc <IDE::open(int, int, void*)+0x1d8>
c00232d4:	83 ec 0c             	sub    esp,0xc
c00232d7:	68 15 f2 02 c0       	push   0xc002f215
c00232dc:	e8 1a 75 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c00232e1:	83 c4 10             	add    esp,0x10
c00232e4:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00232eb:	79 1a                	jns    c0023307 <IDE::open(int, int, void*)+0x203>
c00232ed:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00232f3:	83 e0 fc             	and    eax,0xfffffffc
c00232f6:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00232fd:	83 c0 08             	add    eax,0x8
c0023300:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023307:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002330d:	89 c2                	mov    edx,eax
c002330f:	83 e2 0f             	and    edx,0xf
c0023312:	66 83 fa 08          	cmp    dx,0x8
c0023316:	75 0a                	jne    c0023322 <IDE::open(int, int, void*)+0x21e>
c0023318:	83 e8 02             	sub    eax,0x2
c002331b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023322:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023328:	89 c2                	mov    edx,eax
c002332a:	83 e2 0f             	and    edx,0xf
c002332d:	66 83 fa 08          	cmp    dx,0x8
c0023331:	75 0a                	jne    c002333d <IDE::open(int, int, void*)+0x239>
c0023333:	83 e8 02             	sub    eax,0x2
c0023336:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002333d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023344:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002334b:	89 d0                	mov    eax,edx
c002334d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023350:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023354:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023358:	8d 4a 01             	lea    ecx,[edx+0x1]
c002335b:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023360:	0f b6 c9             	movzx  ecx,cl
c0023363:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002336a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002336d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023371:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023375:	8d 50 02             	lea    edx,[eax+0x2]
c0023378:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002337d:	0f b6 d2             	movzx  edx,dl
c0023380:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023386:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023389:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002338d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023391:	8d 48 03             	lea    ecx,[eax+0x3]
c0023394:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023399:	0f b6 c9             	movzx  ecx,cl
c002339c:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00233a2:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00233a5:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00233a9:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00233ad:	8d 50 04             	lea    edx,[eax+0x4]
c00233b0:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00233b6:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00233bb:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00233c2:	66 85 f6             	test   si,si
c00233c5:	74 3e                	je     c0023405 <IDE::open(int, int, void*)+0x301>
c00233c7:	0f b6 d2             	movzx  edx,dl
c00233ca:	83 c0 05             	add    eax,0x5
c00233cd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00233d0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00233d4:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00233d8:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00233de:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00233e3:	eb 20                	jmp    c0023405 <IDE::open(int, int, void*)+0x301>
c00233e5:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00233ef:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00233f9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023400:	e9 02 ff ff ff       	jmp    c0023307 <IDE::open(int, int, void*)+0x203>
c0023405:	52                   	push   edx
c0023406:	52                   	push   edx
c0023407:	6a 00                	push   0x0
c0023409:	53                   	push   ebx
c002340a:	e8 45 fc ff ff       	call   c0023054 <IDE::prepareInterrupt(unsigned char)>
c002340f:	59                   	pop    ecx
c0023410:	5e                   	pop    esi
c0023411:	6a 01                	push   0x1
c0023413:	53                   	push   ebx
c0023414:	e8 3b fc ff ff       	call   c0023054 <IDE::prepareInterrupt(unsigned char)>
c0023419:	83 c4 0c             	add    esp,0xc
c002341c:	6a 00                	push   0x0
c002341e:	6a 00                	push   0x0
c0023420:	53                   	push   ebx
c0023421:	e8 ee 00 00 00       	call   c0023514 <IDE::enableIRQs(unsigned char, bool)>
c0023426:	83 c4 0c             	add    esp,0xc
c0023429:	6a 00                	push   0x0
c002342b:	6a 01                	push   0x1
c002342d:	53                   	push   ebx
c002342e:	e8 e1 00 00 00       	call   c0023514 <IDE::enableIRQs(unsigned char, bool)>
c0023433:	83 c4 10             	add    esp,0x10
c0023436:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002343d:	74 40                	je     c002347f <IDE::open(int, int, void*)+0x37b>
c002343f:	83 ec 0c             	sub    esp,0xc
c0023442:	68 3f f2 02 c0       	push   0xc002f23f
c0023447:	e8 fa fd fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c002344c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002344f:	6a 01                	push   0x1
c0023451:	68 cc 30 02 c0       	push   0xc00230cc
c0023456:	6a 0e                	push   0xe
c0023458:	53                   	push   ebx
c0023459:	e8 6c 12 ff ff       	call   c00146ca <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002345e:	83 c4 14             	add    esp,0x14
c0023461:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023467:	53                   	push   ebx
c0023468:	6a 01                	push   0x1
c002346a:	68 e8 30 02 c0       	push   0xc00230e8
c002346f:	6a 0f                	push   0xf
c0023471:	53                   	push   ebx
c0023472:	e8 53 12 ff ff       	call   c00146ca <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023477:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002347d:	eb 4a                	jmp    c00234c9 <IDE::open(int, int, void*)+0x3c5>
c002347f:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023489:	50                   	push   eax
c002348a:	6a 0f                	push   0xf
c002348c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023492:	68 5b f2 02 c0       	push   0xc002f25b
c0023497:	e8 aa fd fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c002349c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002349f:	6a 00                	push   0x0
c00234a1:	68 cc 30 02 c0       	push   0xc00230cc
c00234a6:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00234ac:	53                   	push   ebx
c00234ad:	e8 18 12 ff ff       	call   c00146ca <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00234b2:	83 c4 14             	add    esp,0x14
c00234b5:	53                   	push   ebx
c00234b6:	6a 00                	push   0x0
c00234b8:	68 e8 30 02 c0       	push   0xc00230e8
c00234bd:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00234c3:	53                   	push   ebx
c00234c4:	e8 01 12 ff ff       	call   c00146ca <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00234c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00234cb:	83 c4 20             	add    esp,0x20
c00234ce:	83 ec 0c             	sub    esp,0xc
c00234d1:	53                   	push   ebx
c00234d2:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00234d5:	83 c4 0c             	add    esp,0xc
c00234d8:	6a 07                	push   0x7
c00234da:	6a 00                	push   0x0
c00234dc:	53                   	push   ebx
c00234dd:	e8 90 00 00 00       	call   c0023572 <IDE::read(unsigned char, unsigned char)>
c00234e2:	83 c4 0c             	add    esp,0xc
c00234e5:	6a 07                	push   0x7
c00234e7:	6a 01                	push   0x1
c00234e9:	53                   	push   ebx
c00234ea:	e8 83 00 00 00       	call   c0023572 <IDE::read(unsigned char, unsigned char)>
c00234ef:	83 c4 0c             	add    esp,0xc
c00234f2:	6a 01                	push   0x1
c00234f4:	6a 00                	push   0x0
c00234f6:	53                   	push   ebx
c00234f7:	e8 18 00 00 00       	call   c0023514 <IDE::enableIRQs(unsigned char, bool)>
c00234fc:	83 c4 0c             	add    esp,0xc
c00234ff:	6a 01                	push   0x1
c0023501:	6a 01                	push   0x1
c0023503:	53                   	push   ebx
c0023504:	e8 0b 00 00 00       	call   c0023514 <IDE::enableIRQs(unsigned char, bool)>
c0023509:	83 c4 2c             	add    esp,0x2c
c002350c:	31 c0                	xor    eax,eax
c002350e:	5b                   	pop    ebx
c002350f:	5e                   	pop    esi
c0023510:	5f                   	pop    edi
c0023511:	5d                   	pop    ebp
c0023512:	c3                   	ret    
c0023513:	90                   	nop

c0023514 <IDE::enableIRQs(unsigned char, bool)>:
c0023514:	57                   	push   edi
c0023515:	56                   	push   esi
c0023516:	be 04 00 00 00       	mov    esi,0x4
c002351b:	53                   	push   ebx
c002351c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023521:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023525:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c002352a:	0f 94 c0             	sete   al
c002352d:	d1 e0                	shl    eax,1
c002352f:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023536:	0f b6 c0             	movzx  eax,al
c0023539:	50                   	push   eax
c002353a:	6a 0c                	push   0xc
c002353c:	57                   	push   edi
c002353d:	53                   	push   ebx
c002353e:	e8 dd 00 00 00       	call   c0023620 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023543:	83 c4 10             	add    esp,0x10
c0023546:	50                   	push   eax
c0023547:	6a 0c                	push   0xc
c0023549:	57                   	push   edi
c002354a:	53                   	push   ebx
c002354b:	e8 22 00 00 00       	call   c0023572 <IDE::read(unsigned char, unsigned char)>
c0023550:	83 c4 10             	add    esp,0x10
c0023553:	4e                   	dec    esi
c0023554:	75 f0                	jne    c0023546 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023556:	5b                   	pop    ebx
c0023557:	5e                   	pop    esi
c0023558:	5f                   	pop    edi
c0023559:	c3                   	ret    

c002355a <selectDrive(unsigned char, unsigned char)>:
c002355a:	c3                   	ret    
c002355b:	90                   	nop

c002355c <IDE::getBase(unsigned char)>:
c002355c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023561:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023565:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c002356d:	c3                   	ret    

c002356e <IDE::close(int, int, void*)>:
c002356e:	83 c8 ff             	or     eax,0xffffffff
c0023571:	c3                   	ret    

c0023572 <IDE::read(unsigned char, unsigned char)>:
c0023572:	55                   	push   ebp
c0023573:	57                   	push   edi
c0023574:	56                   	push   esi
c0023575:	53                   	push   ebx
c0023576:	83 ec 1c             	sub    esp,0x1c
c0023579:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002357d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023581:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023584:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023588:	3c 03                	cmp    al,0x3
c002358a:	77 43                	ja     c00235cf <IDE::read(unsigned char, unsigned char)+0x5d>
c002358c:	0f b6 f2             	movzx  esi,dl
c002358f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023592:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023596:	83 c8 80             	or     eax,0xffffff80
c0023599:	0f b6 c0             	movzx  eax,al
c002359c:	50                   	push   eax
c002359d:	6a 0c                	push   0xc
c002359f:	56                   	push   esi
c00235a0:	57                   	push   edi
c00235a1:	e8 7a 00 00 00       	call   c0023620 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235a6:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00235ab:	0f b6 c3             	movzx  eax,bl
c00235ae:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00235b2:	ec                   	in     al,dx
c00235b3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00235b7:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00235bc:	52                   	push   edx
c00235bd:	6a 0c                	push   0xc
c00235bf:	56                   	push   esi
c00235c0:	57                   	push   edi
c00235c1:	e8 5a 00 00 00       	call   c0023620 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235c6:	83 c4 20             	add    esp,0x20
c00235c9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00235cd:	eb 49                	jmp    c0023618 <IDE::read(unsigned char, unsigned char)+0xa6>
c00235cf:	80 fb 07             	cmp    bl,0x7
c00235d2:	77 12                	ja     c00235e6 <IDE::read(unsigned char, unsigned char)+0x74>
c00235d4:	0f b6 d2             	movzx  edx,dl
c00235d7:	0f b6 c3             	movzx  eax,bl
c00235da:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00235e2:	89 c2                	mov    edx,eax
c00235e4:	eb 31                	jmp    c0023617 <IDE::read(unsigned char, unsigned char)+0xa5>
c00235e6:	80 fb 0d             	cmp    bl,0xd
c00235e9:	77 13                	ja     c00235fe <IDE::read(unsigned char, unsigned char)+0x8c>
c00235eb:	0f b6 d2             	movzx  edx,dl
c00235ee:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00235f5:	0f b6 d3             	movzx  edx,bl
c00235f8:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00235fc:	eb 19                	jmp    c0023617 <IDE::read(unsigned char, unsigned char)+0xa5>
c00235fe:	31 c0                	xor    eax,eax
c0023600:	80 fb 15             	cmp    bl,0x15
c0023603:	77 13                	ja     c0023618 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023605:	0f b6 d2             	movzx  edx,dl
c0023608:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023610:	0f b6 d3             	movzx  edx,bl
c0023613:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023617:	ec                   	in     al,dx
c0023618:	83 c4 1c             	add    esp,0x1c
c002361b:	5b                   	pop    ebx
c002361c:	5e                   	pop    esi
c002361d:	5f                   	pop    edi
c002361e:	5d                   	pop    ebp
c002361f:	c3                   	ret    

c0023620 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023620:	55                   	push   ebp
c0023621:	57                   	push   edi
c0023622:	56                   	push   esi
c0023623:	53                   	push   ebx
c0023624:	83 ec 1c             	sub    esp,0x1c
c0023627:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002362b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002362f:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0023632:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023636:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002363a:	80 f9 03             	cmp    cl,0x3
c002363d:	77 51                	ja     c0023690 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c002363f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023643:	0f b6 f2             	movzx  esi,dl
c0023646:	0f b6 db             	movzx  ebx,bl
c0023649:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002364c:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023650:	83 ca 80             	or     edx,0xffffff80
c0023653:	0f b6 d2             	movzx  edx,dl
c0023656:	52                   	push   edx
c0023657:	6a 0c                	push   0xc
c0023659:	56                   	push   esi
c002365a:	57                   	push   edi
c002365b:	e8 c0 ff ff ff       	call   c0023620 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023660:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0023665:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023669:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002366d:	ee                   	out    dx,al
c002366e:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023673:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0023677:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002367b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002367f:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023687:	83 c4 2c             	add    esp,0x2c
c002368a:	5b                   	pop    ebx
c002368b:	5e                   	pop    esi
c002368c:	5f                   	pop    edi
c002368d:	5d                   	pop    ebp
c002368e:	eb 90                	jmp    c0023620 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023690:	80 fb 07             	cmp    bl,0x7
c0023693:	77 12                	ja     c00236a7 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023695:	0f b6 d2             	movzx  edx,dl
c0023698:	0f b6 db             	movzx  ebx,bl
c002369b:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00236a3:	89 da                	mov    edx,ebx
c00236a5:	eb 2f                	jmp    c00236d6 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00236a7:	80 fb 0d             	cmp    bl,0xd
c00236aa:	77 13                	ja     c00236bf <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00236ac:	0f b6 d2             	movzx  edx,dl
c00236af:	0f b6 db             	movzx  ebx,bl
c00236b2:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00236b9:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00236bd:	eb 17                	jmp    c00236d6 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00236bf:	80 fb 15             	cmp    bl,0x15
c00236c2:	77 13                	ja     c00236d7 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00236c4:	0f b6 d2             	movzx  edx,dl
c00236c7:	0f b6 db             	movzx  ebx,bl
c00236ca:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00236d2:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00236d6:	ee                   	out    dx,al
c00236d7:	83 c4 1c             	add    esp,0x1c
c00236da:	5b                   	pop    ebx
c00236db:	5e                   	pop    esi
c00236dc:	5f                   	pop    edi
c00236dd:	5d                   	pop    ebp
c00236de:	c3                   	ret    
c00236df:	90                   	nop

c00236e0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00236e0:	55                   	push   ebp
c00236e1:	57                   	push   edi
c00236e2:	56                   	push   esi
c00236e3:	53                   	push   ebx
c00236e4:	83 ec 1c             	sub    esp,0x1c
c00236e7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00236eb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00236ef:	8d 50 f8             	lea    edx,[eax-0x8]
c00236f2:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00236f6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00236fa:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00236fe:	80 fa 03             	cmp    dl,0x3
c0023701:	77 5d                	ja     c0023760 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023703:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023707:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002370b:	0f b6 db             	movzx  ebx,bl
c002370e:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023711:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023715:	83 ca 80             	or     edx,0xffffff80
c0023718:	0f b6 d2             	movzx  edx,dl
c002371b:	52                   	push   edx
c002371c:	6a 0c                	push   0xc
c002371e:	53                   	push   ebx
c002371f:	56                   	push   esi
c0023720:	e8 fb fe ff ff       	call   c0023620 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023725:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002372a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002372e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023732:	0f b6 c0             	movzx  eax,al
c0023735:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023739:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002373b:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023740:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023744:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023748:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002374c:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023754:	83 c4 2c             	add    esp,0x2c
c0023757:	5b                   	pop    ebx
c0023758:	5e                   	pop    esi
c0023759:	5f                   	pop    edi
c002375a:	5d                   	pop    ebp
c002375b:	e9 c0 fe ff ff       	jmp    c0023620 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023760:	3c 07                	cmp    al,0x7
c0023762:	77 10                	ja     c0023774 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023764:	0f b6 db             	movzx  ebx,bl
c0023767:	0f b6 d0             	movzx  edx,al
c002376a:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023772:	eb 2d                	jmp    c00237a1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023774:	3c 0d                	cmp    al,0xd
c0023776:	77 13                	ja     c002378b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023778:	0f b6 db             	movzx  ebx,bl
c002377b:	0f b6 c0             	movzx  eax,al
c002377e:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023785:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023789:	eb 16                	jmp    c00237a1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002378b:	3c 15                	cmp    al,0x15
c002378d:	77 14                	ja     c00237a3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c002378f:	0f b6 db             	movzx  ebx,bl
c0023792:	0f b6 c0             	movzx  eax,al
c0023795:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c002379d:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00237a1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00237a3:	83 c4 1c             	add    esp,0x1c
c00237a6:	5b                   	pop    ebx
c00237a7:	5e                   	pop    esi
c00237a8:	5f                   	pop    edi
c00237a9:	5d                   	pop    ebp
c00237aa:	c3                   	ret    
c00237ab:	90                   	nop

c00237ac <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00237ac:	55                   	push   ebp
c00237ad:	57                   	push   edi
c00237ae:	56                   	push   esi
c00237af:	53                   	push   ebx
c00237b0:	83 ec 1c             	sub    esp,0x1c
c00237b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00237b7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00237bb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00237bf:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00237c3:	88 c3                	mov    bl,al
c00237c5:	84 c0                	test   al,al
c00237c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00237cb:	0f 84 67 01 00 00    	je     c0023938 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00237d1:	83 ec 0c             	sub    esp,0xc
c00237d4:	68 77 f2 02 c0       	push   0xc002f277
c00237d9:	e8 68 fa fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00237de:	83 c4 10             	add    esp,0x10
c00237e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00237e5:	3c 01                	cmp    al,0x1
c00237e7:	75 17                	jne    c0023800 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c00237e9:	83 ec 0c             	sub    esp,0xc
c00237ec:	b3 13                	mov    bl,0x13
c00237ee:	68 83 f2 02 c0       	push   0xc002f283
c00237f3:	e8 4e fa fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00237f8:	83 c4 10             	add    esp,0x10
c00237fb:	e9 25 01 00 00       	jmp    c0023925 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023800:	3c 02                	cmp    al,0x2
c0023802:	0f 85 ef 00 00 00    	jne    c00238f7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023808:	d1 e6                	shl    esi,1
c002380a:	09 ee                	or     esi,ebp
c002380c:	52                   	push   edx
c002380d:	89 f0                	mov    eax,esi
c002380f:	6a 01                	push   0x1
c0023811:	0f b6 f0             	movzx  esi,al
c0023814:	c1 e6 06             	shl    esi,0x6
c0023817:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c002381f:	50                   	push   eax
c0023820:	57                   	push   edi
c0023821:	e8 4c fd ff ff       	call   c0023572 <IDE::read(unsigned char, unsigned char)>
c0023826:	83 c4 10             	add    esp,0x10
c0023829:	89 c6                	mov    esi,eax
c002382b:	a8 01                	test   al,0x1
c002382d:	74 12                	je     c0023841 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c002382f:	83 ec 0c             	sub    esp,0xc
c0023832:	b3 07                	mov    bl,0x7
c0023834:	68 98 f2 02 c0       	push   0xc002f298
c0023839:	e8 08 fa fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c002383e:	83 c4 10             	add    esp,0x10
c0023841:	f7 c6 02 00 00 00    	test   esi,0x2
c0023847:	74 12                	je     c002385b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023849:	83 ec 0c             	sub    esp,0xc
c002384c:	b3 03                	mov    bl,0x3
c002384e:	68 b6 f2 02 c0       	push   0xc002f2b6
c0023853:	e8 ee f9 fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0023858:	83 c4 10             	add    esp,0x10
c002385b:	f7 c6 04 00 00 00    	test   esi,0x4
c0023861:	74 12                	je     c0023875 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023863:	83 ec 0c             	sub    esp,0xc
c0023866:	b3 14                	mov    bl,0x14
c0023868:	68 d6 f2 02 c0       	push   0xc002f2d6
c002386d:	e8 d4 f9 fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0023872:	83 c4 10             	add    esp,0x10
c0023875:	f7 c6 08 00 00 00    	test   esi,0x8
c002387b:	74 12                	je     c002388f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c002387d:	83 ec 0c             	sub    esp,0xc
c0023880:	b3 03                	mov    bl,0x3
c0023882:	68 b6 f2 02 c0       	push   0xc002f2b6
c0023887:	e8 ba f9 fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c002388c:	83 c4 10             	add    esp,0x10
c002388f:	f7 c6 10 00 00 00    	test   esi,0x10
c0023895:	74 12                	je     c00238a9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023897:	83 ec 0c             	sub    esp,0xc
c002389a:	b3 15                	mov    bl,0x15
c002389c:	68 ee f2 02 c0       	push   0xc002f2ee
c00238a1:	e8 a0 f9 fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00238a6:	83 c4 10             	add    esp,0x10
c00238a9:	f7 c6 20 00 00 00    	test   esi,0x20
c00238af:	74 12                	je     c00238c3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c00238b1:	83 ec 0c             	sub    esp,0xc
c00238b4:	b3 03                	mov    bl,0x3
c00238b6:	68 b6 f2 02 c0       	push   0xc002f2b6
c00238bb:	e8 86 f9 fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00238c0:	83 c4 10             	add    esp,0x10
c00238c3:	f7 c6 40 00 00 00    	test   esi,0x40
c00238c9:	74 12                	je     c00238dd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c00238cb:	83 ec 0c             	sub    esp,0xc
c00238ce:	b3 16                	mov    bl,0x16
c00238d0:	68 08 f3 02 c0       	push   0xc002f308
c00238d5:	e8 6c f9 fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00238da:	83 c4 10             	add    esp,0x10
c00238dd:	89 f0                	mov    eax,esi
c00238df:	84 c0                	test   al,al
c00238e1:	79 42                	jns    c0023925 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00238e3:	83 ec 0c             	sub    esp,0xc
c00238e6:	b3 0d                	mov    bl,0xd
c00238e8:	68 29 f3 02 c0       	push   0xc002f329
c00238ed:	e8 54 f9 fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00238f2:	83 c4 10             	add    esp,0x10
c00238f5:	eb 2e                	jmp    c0023925 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00238f7:	3c 03                	cmp    al,0x3
c00238f9:	75 14                	jne    c002390f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c00238fb:	83 ec 0c             	sub    esp,0xc
c00238fe:	b3 17                	mov    bl,0x17
c0023900:	68 3d f3 02 c0       	push   0xc002f33d
c0023905:	e8 3c f9 fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c002390a:	83 c4 10             	add    esp,0x10
c002390d:	eb 16                	jmp    c0023925 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002390f:	3c 04                	cmp    al,0x4
c0023911:	75 12                	jne    c0023925 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023913:	83 ec 0c             	sub    esp,0xc
c0023916:	b3 08                	mov    bl,0x8
c0023918:	68 53 f3 02 c0       	push   0xc002f353
c002391d:	e8 24 f9 fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0023922:	83 c4 10             	add    esp,0x10
c0023925:	50                   	push   eax
c0023926:	50                   	push   eax
c0023927:	0f b6 c3             	movzx  eax,bl
c002392a:	50                   	push   eax
c002392b:	68 6b f3 02 c0       	push   0xc002f36b
c0023930:	e8 11 f9 fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0023935:	83 c4 10             	add    esp,0x10
c0023938:	83 c4 1c             	add    esp,0x1c
c002393b:	88 d8                	mov    al,bl
c002393d:	5b                   	pop    ebx
c002393e:	5e                   	pop    esi
c002393f:	5f                   	pop    edi
c0023940:	5d                   	pop    ebp
c0023941:	c3                   	ret    

c0023942 <IDE::polling(unsigned char, unsigned int)>:
c0023942:	57                   	push   edi
c0023943:	56                   	push   esi
c0023944:	53                   	push   ebx
c0023945:	bb 04 00 00 00       	mov    ebx,0x4
c002394a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002394e:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023953:	52                   	push   edx
c0023954:	6a 0c                	push   0xc
c0023956:	56                   	push   esi
c0023957:	57                   	push   edi
c0023958:	e8 15 fc ff ff       	call   c0023572 <IDE::read(unsigned char, unsigned char)>
c002395d:	83 c4 10             	add    esp,0x10
c0023960:	4b                   	dec    ebx
c0023961:	75 f0                	jne    c0023953 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023963:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023968:	50                   	push   eax
c0023969:	6a 0c                	push   0xc
c002396b:	56                   	push   esi
c002396c:	57                   	push   edi
c002396d:	e8 00 fc ff ff       	call   c0023572 <IDE::read(unsigned char, unsigned char)>
c0023972:	83 c4 10             	add    esp,0x10
c0023975:	a8 01                	test   al,0x1
c0023977:	74 12                	je     c002398b <IDE::polling(unsigned char, unsigned int)+0x49>
c0023979:	83 ec 0c             	sub    esp,0xc
c002397c:	68 85 f3 02 c0       	push   0xc002f385
c0023981:	e8 c0 f8 fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0023986:	83 c4 10             	add    esp,0x10
c0023989:	eb 17                	jmp    c00239a2 <IDE::polling(unsigned char, unsigned int)+0x60>
c002398b:	a8 20                	test   al,0x20
c002398d:	75 0f                	jne    c002399e <IDE::polling(unsigned char, unsigned int)+0x5c>
c002398f:	4b                   	dec    ebx
c0023990:	74 10                	je     c00239a2 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023992:	84 c0                	test   al,al
c0023994:	78 d2                	js     c0023968 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023996:	a8 08                	test   al,0x8
c0023998:	74 ce                	je     c0023968 <IDE::polling(unsigned char, unsigned int)+0x26>
c002399a:	31 c0                	xor    eax,eax
c002399c:	eb 06                	jmp    c00239a4 <IDE::polling(unsigned char, unsigned int)+0x62>
c002399e:	b0 01                	mov    al,0x1
c00239a0:	eb 02                	jmp    c00239a4 <IDE::polling(unsigned char, unsigned int)+0x62>
c00239a2:	b0 02                	mov    al,0x2
c00239a4:	5b                   	pop    ebx
c00239a5:	5e                   	pop    esi
c00239a6:	5f                   	pop    edi
c00239a7:	c3                   	ret    

c00239a8 <IDE::detect()>:
c00239a8:	55                   	push   ebp
c00239a9:	57                   	push   edi
c00239aa:	56                   	push   esi
c00239ab:	53                   	push   ebx
c00239ac:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00239b2:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00239b9:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00239c0:	0f 85 be 02 00 00    	jne    c0023c84 <IDE::detect()+0x2dc>
c00239c6:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00239cd:	31 f6                	xor    esi,esi
c00239cf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00239d7:	31 ed                	xor    ebp,ebp
c00239d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00239dd:	c1 e0 06             	shl    eax,0x6
c00239e0:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00239e8:	89 e8                	mov    eax,ebp
c00239ea:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00239ee:	c1 e0 04             	shl    eax,0x4
c00239f1:	83 c8 a0             	or     eax,0xffffffa0
c00239f4:	0f b6 c0             	movzx  eax,al
c00239f7:	50                   	push   eax
c00239f8:	6a 06                	push   0x6
c00239fa:	56                   	push   esi
c00239fb:	53                   	push   ebx
c00239fc:	e8 1f fc ff ff       	call   c0023620 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a01:	83 c4 0c             	add    esp,0xc
c0023a04:	6a 0c                	push   0xc
c0023a06:	56                   	push   esi
c0023a07:	53                   	push   ebx
c0023a08:	e8 65 fb ff ff       	call   c0023572 <IDE::read(unsigned char, unsigned char)>
c0023a0d:	83 c4 0c             	add    esp,0xc
c0023a10:	6a 0c                	push   0xc
c0023a12:	56                   	push   esi
c0023a13:	53                   	push   ebx
c0023a14:	e8 59 fb ff ff       	call   c0023572 <IDE::read(unsigned char, unsigned char)>
c0023a19:	83 c4 0c             	add    esp,0xc
c0023a1c:	6a 0c                	push   0xc
c0023a1e:	56                   	push   esi
c0023a1f:	53                   	push   ebx
c0023a20:	e8 4d fb ff ff       	call   c0023572 <IDE::read(unsigned char, unsigned char)>
c0023a25:	83 c4 0c             	add    esp,0xc
c0023a28:	6a 0c                	push   0xc
c0023a2a:	56                   	push   esi
c0023a2b:	53                   	push   ebx
c0023a2c:	e8 41 fb ff ff       	call   c0023572 <IDE::read(unsigned char, unsigned char)>
c0023a31:	68 ec 00 00 00       	push   0xec
c0023a36:	6a 07                	push   0x7
c0023a38:	56                   	push   esi
c0023a39:	53                   	push   ebx
c0023a3a:	e8 e1 fb ff ff       	call   c0023620 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a3f:	83 c4 1c             	add    esp,0x1c
c0023a42:	6a 0c                	push   0xc
c0023a44:	56                   	push   esi
c0023a45:	53                   	push   ebx
c0023a46:	e8 27 fb ff ff       	call   c0023572 <IDE::read(unsigned char, unsigned char)>
c0023a4b:	83 c4 0c             	add    esp,0xc
c0023a4e:	6a 0c                	push   0xc
c0023a50:	56                   	push   esi
c0023a51:	53                   	push   ebx
c0023a52:	e8 1b fb ff ff       	call   c0023572 <IDE::read(unsigned char, unsigned char)>
c0023a57:	83 c4 0c             	add    esp,0xc
c0023a5a:	6a 0c                	push   0xc
c0023a5c:	56                   	push   esi
c0023a5d:	53                   	push   ebx
c0023a5e:	e8 0f fb ff ff       	call   c0023572 <IDE::read(unsigned char, unsigned char)>
c0023a63:	83 c4 0c             	add    esp,0xc
c0023a66:	6a 0c                	push   0xc
c0023a68:	56                   	push   esi
c0023a69:	53                   	push   ebx
c0023a6a:	e8 03 fb ff ff       	call   c0023572 <IDE::read(unsigned char, unsigned char)>
c0023a6f:	83 c4 0c             	add    esp,0xc
c0023a72:	6a 0c                	push   0xc
c0023a74:	56                   	push   esi
c0023a75:	53                   	push   ebx
c0023a76:	e8 f7 fa ff ff       	call   c0023572 <IDE::read(unsigned char, unsigned char)>
c0023a7b:	83 c4 10             	add    esp,0x10
c0023a7e:	84 c0                	test   al,al
c0023a80:	0f 84 8b 01 00 00    	je     c0023c11 <IDE::detect()+0x269>
c0023a86:	31 ff                	xor    edi,edi
c0023a88:	50                   	push   eax
c0023a89:	6a 0c                	push   0xc
c0023a8b:	56                   	push   esi
c0023a8c:	53                   	push   ebx
c0023a8d:	e8 e0 fa ff ff       	call   c0023572 <IDE::read(unsigned char, unsigned char)>
c0023a92:	83 c4 10             	add    esp,0x10
c0023a95:	a8 01                	test   al,0x1
c0023a97:	0f 85 8e 01 00 00    	jne    c0023c2b <IDE::detect()+0x283>
c0023a9d:	84 c0                	test   al,al
c0023a9f:	78 04                	js     c0023aa5 <IDE::detect()+0xfd>
c0023aa1:	a8 08                	test   al,0x8
c0023aa3:	75 27                	jne    c0023acc <IDE::detect()+0x124>
c0023aa5:	47                   	inc    edi
c0023aa6:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023aac:	7e da                	jle    c0023a88 <IDE::detect()+0xe0>
c0023aae:	50                   	push   eax
c0023aaf:	50                   	push   eax
c0023ab0:	6a 00                	push   0x0
c0023ab2:	68 40 4b 4c 00       	push   0x4c4b40
c0023ab7:	e8 46 ad ff ff       	call   c001e802 <nanoSleep(unsigned long long)>
c0023abc:	83 c4 10             	add    esp,0x10
c0023abf:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023ac5:	75 c1                	jne    c0023a88 <IDE::detect()+0xe0>
c0023ac7:	e9 5f 01 00 00       	jmp    c0023c2b <IDE::detect()+0x283>
c0023acc:	31 c9                	xor    ecx,ecx
c0023ace:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023ad2:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023ad6:	83 ec 0c             	sub    esp,0xc
c0023ad9:	68 80 00 00 00       	push   0x80
c0023ade:	57                   	push   edi
c0023adf:	6a 00                	push   0x0
c0023ae1:	56                   	push   esi
c0023ae2:	53                   	push   ebx
c0023ae3:	e8 f8 fb ff ff       	call   c00236e0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023ae8:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023aed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023af1:	89 d1                	mov    ecx,edx
c0023af3:	c1 e0 06             	shl    eax,0x6
c0023af6:	01 d8                	add    eax,ebx
c0023af8:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023aff:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023b06:	89 f2                	mov    edx,esi
c0023b08:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023b0e:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023b12:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023b18:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023b1c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023b23:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023b2b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023b32:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023b3a:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023b40:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023b47:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023b4d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023b51:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023b55:	83 c4 20             	add    esp,0x20
c0023b58:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023b5b:	83 c0 02             	add    eax,0x2
c0023b5e:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023b64:	83 c7 02             	add    edi,0x2
c0023b67:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023b6a:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023b70:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023b74:	75 e2                	jne    c0023b58 <IDE::detect()+0x1b0>
c0023b76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023b7a:	c1 e0 06             	shl    eax,0x6
c0023b7d:	01 d8                	add    eax,ebx
c0023b7f:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023b85:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023b8c:	66 c1 ea 09          	shr    dx,0x9
c0023b90:	83 e2 01             	and    edx,0x1
c0023b93:	84 c9                	test   cl,cl
c0023b95:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023b9b:	75 2f                	jne    c0023bcc <IDE::detect()+0x224>
c0023b9d:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0023ba3:	85 c0                	test   eax,eax
c0023ba5:	74 66                	je     c0023c0d <IDE::detect()+0x265>
c0023ba7:	50                   	push   eax
c0023ba8:	55                   	push   ebp
c0023ba9:	56                   	push   esi
c0023baa:	68 9a f3 02 c0       	push   0xc002f39a
c0023baf:	e8 92 f6 fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0023bb4:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023bbb:	e8 9c c3 fe ff       	call   c000ff5c <malloc>
c0023bc0:	89 c7                	mov    edi,eax
c0023bc2:	89 04 24             	mov    DWORD PTR [esp],eax
c0023bc5:	e8 58 04 00 00       	call   c0024022 <ATA::ATA()>
c0023bca:	eb 28                	jmp    c0023bf4 <IDE::detect()+0x24c>
c0023bcc:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0023bd2:	55                   	push   ebp
c0023bd3:	56                   	push   esi
c0023bd4:	68 c9 f3 02 c0       	push   0xc002f3c9
c0023bd9:	e8 68 f6 fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0023bde:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023be5:	e8 72 c3 fe ff       	call   c000ff5c <malloc>
c0023bea:	89 c7                	mov    edi,eax
c0023bec:	89 04 24             	mov    DWORD PTR [esp],eax
c0023bef:	e8 60 0a 00 00       	call   c0024654 <ATAPI::ATAPI()>
c0023bf4:	5a                   	pop    edx
c0023bf5:	59                   	pop    ecx
c0023bf6:	57                   	push   edi
c0023bf7:	53                   	push   ebx
c0023bf8:	e8 49 0b ff ff       	call   c0014746 <Device::addChild(Device*)>
c0023bfd:	8b 07                	mov    eax,DWORD PTR [edi]
c0023bff:	53                   	push   ebx
c0023c00:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023c04:	6a 00                	push   0x0
c0023c06:	57                   	push   edi
c0023c07:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023c0a:	83 c4 20             	add    esp,0x20
c0023c0d:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0023c11:	4d                   	dec    ebp
c0023c12:	74 0a                	je     c0023c1e <IDE::detect()+0x276>
c0023c14:	bd 01 00 00 00       	mov    ebp,0x1
c0023c19:	e9 bb fd ff ff       	jmp    c00239d9 <IDE::detect()+0x31>
c0023c1e:	4e                   	dec    esi
c0023c1f:	74 63                	je     c0023c84 <IDE::detect()+0x2dc>
c0023c21:	be 01 00 00 00       	mov    esi,0x1
c0023c26:	e9 ac fd ff ff       	jmp    c00239d7 <IDE::detect()+0x2f>
c0023c2b:	50                   	push   eax
c0023c2c:	6a 04                	push   0x4
c0023c2e:	56                   	push   esi
c0023c2f:	53                   	push   ebx
c0023c30:	e8 3d f9 ff ff       	call   c0023572 <IDE::read(unsigned char, unsigned char)>
c0023c35:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023c39:	83 c4 0c             	add    esp,0xc
c0023c3c:	6a 05                	push   0x5
c0023c3e:	56                   	push   esi
c0023c3f:	53                   	push   ebx
c0023c40:	e8 2d f9 ff ff       	call   c0023572 <IDE::read(unsigned char, unsigned char)>
c0023c45:	83 c4 10             	add    esp,0x10
c0023c48:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023c4c:	80 fa 14             	cmp    dl,0x14
c0023c4f:	75 04                	jne    c0023c55 <IDE::detect()+0x2ad>
c0023c51:	3c eb                	cmp    al,0xeb
c0023c53:	eb 07                	jmp    c0023c5c <IDE::detect()+0x2b4>
c0023c55:	3c 96                	cmp    al,0x96
c0023c57:	75 b8                	jne    c0023c11 <IDE::detect()+0x269>
c0023c59:	80 fa 69             	cmp    dl,0x69
c0023c5c:	75 b3                	jne    c0023c11 <IDE::detect()+0x269>
c0023c5e:	68 a1 00 00 00       	push   0xa1
c0023c63:	6a 07                	push   0x7
c0023c65:	56                   	push   esi
c0023c66:	53                   	push   ebx
c0023c67:	e8 b4 f9 ff ff       	call   c0023620 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023c6c:	5f                   	pop    edi
c0023c6d:	58                   	pop    eax
c0023c6e:	6a 00                	push   0x0
c0023c70:	68 40 42 0f 00       	push   0xf4240
c0023c75:	e8 88 ab ff ff       	call   c001e802 <nanoSleep(unsigned long long)>
c0023c7a:	83 c4 10             	add    esp,0x10
c0023c7d:	b1 01                	mov    cl,0x1
c0023c7f:	e9 4a fe ff ff       	jmp    c0023ace <IDE::detect()+0x126>
c0023c84:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023c8a:	5b                   	pop    ebx
c0023c8b:	5e                   	pop    esi
c0023c8c:	5f                   	pop    edi
c0023c8d:	5d                   	pop    ebp
c0023c8e:	c3                   	ret    
c0023c8f:	90                   	nop

c0023c90 <SATABus::SATABus()>:
c0023c90:	83 ec 0c             	sub    esp,0xc
c0023c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c97:	83 ec 08             	sub    esp,0x8
c0023c9a:	68 c8 f4 02 c0       	push   0xc002f4c8
c0023c9f:	50                   	push   eax
c0023ca0:	e8 55 0d ff ff       	call   c00149fa <HardDiskController::HardDiskController(char const*)>
c0023ca5:	83 c4 10             	add    esp,0x10
c0023ca8:	ba 84 f5 02 c0       	mov    edx,0xc002f584
c0023cad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cb1:	89 10                	mov    DWORD PTR [eax],edx
c0023cb3:	83 ec 0c             	sub    esp,0xc
c0023cb6:	6a 50                	push   0x50
c0023cb8:	e8 04 ca fe ff       	call   c00106c1 <Phys::allocateContiguousPages(int)>
c0023cbd:	83 c4 10             	add    esp,0x10
c0023cc0:	89 c2                	mov    edx,eax
c0023cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cc6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023ccc:	83 ec 0c             	sub    esp,0xc
c0023ccf:	6a 50                	push   0x50
c0023cd1:	e8 79 e5 fe ff       	call   c001224f <Virt::allocateKernelVirtualPages(int)>
c0023cd6:	83 c4 10             	add    esp,0x10
c0023cd9:	89 c2                	mov    edx,eax
c0023cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cdf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023ce5:	e8 18 e8 fe ff       	call   c0012502 <Virt::getAKernelVAS()>
c0023cea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023cee:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023cf4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023cf8:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023cfe:	83 ec 0c             	sub    esp,0xc
c0023d01:	6a 03                	push   0x3
c0023d03:	6a 50                	push   0x50
c0023d05:	51                   	push   ecx
c0023d06:	52                   	push   edx
c0023d07:	50                   	push   eax
c0023d08:	e8 7b ef fe ff       	call   c0012c88 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023d0d:	83 c4 20             	add    esp,0x20
c0023d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d14:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023d1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d1e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023d24:	83 ec 04             	sub    esp,0x4
c0023d27:	52                   	push   edx
c0023d28:	50                   	push   eax
c0023d29:	68 ec f4 02 c0       	push   0xc002f4ec
c0023d2e:	e8 13 f5 fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0023d33:	83 c4 10             	add    esp,0x10
c0023d36:	90                   	nop
c0023d37:	83 c4 0c             	add    esp,0xc
c0023d3a:	c3                   	ret    
c0023d3b:	90                   	nop

c0023d3c <SATABus::open(int, int, void*)>:
c0023d3c:	83 ec 14             	sub    esp,0x14
c0023d3f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023d43:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023d49:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023d4f:	52                   	push   edx
c0023d50:	50                   	push   eax
c0023d51:	e8 54 00 00 00       	call   c0023daa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023d56:	31 c0                	xor    eax,eax
c0023d58:	83 c4 1c             	add    esp,0x1c
c0023d5b:	c3                   	ret    

c0023d5c <SATABus::close(int, int, void*)>:
c0023d5c:	31 c0                	xor    eax,eax
c0023d5e:	c3                   	ret    
c0023d5f:	90                   	nop

c0023d60 <SATABus::detect()>:
c0023d60:	c3                   	ret    
c0023d61:	90                   	nop

c0023d62 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023d62:	83 ec 0c             	sub    esp,0xc
c0023d65:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023d69:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023d6c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023d6f:	09 c2                	or     edx,eax
c0023d71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d75:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023d7b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023d7d:	31 c0                	xor    eax,eax
c0023d7f:	c1 e9 08             	shr    ecx,0x8
c0023d82:	83 e1 0f             	and    ecx,0xf
c0023d85:	39 c8                	cmp    eax,ecx
c0023d87:	74 0a                	je     c0023d93 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023d89:	f6 c2 01             	test   dl,0x1
c0023d8c:	74 18                	je     c0023da6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d8e:	d1 ea                	shr    edx,1
c0023d90:	40                   	inc    eax
c0023d91:	eb f2                	jmp    c0023d85 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023d93:	83 ec 0c             	sub    esp,0xc
c0023d96:	68 10 f5 02 c0       	push   0xc002f510
c0023d9b:	e8 5b 6a ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c0023da0:	83 c4 10             	add    esp,0x10
c0023da3:	83 c8 ff             	or     eax,0xffffffff
c0023da6:	83 c4 0c             	add    esp,0xc
c0023da9:	c3                   	ret    

c0023daa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023daa:	55                   	push   ebp
c0023dab:	57                   	push   edi
c0023dac:	56                   	push   esi
c0023dad:	53                   	push   ebx
c0023dae:	31 db                	xor    ebx,ebx
c0023db0:	83 ec 0c             	sub    esp,0xc
c0023db3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023db7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023dbb:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023dbe:	f7 c7 01 00 00 00    	test   edi,0x1
c0023dc4:	0f 84 ad 00 00 00    	je     c0023e77 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xcd>
c0023dca:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023dce:	89 d8                	mov    eax,ebx
c0023dd0:	c1 e0 07             	shl    eax,0x7
c0023dd3:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023dda:	50                   	push   eax
c0023ddb:	50                   	push   eax
c0023ddc:	55                   	push   ebp
c0023ddd:	56                   	push   esi
c0023dde:	e8 a9 00 00 00       	call   c0023e8c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023de3:	83 c4 10             	add    esp,0x10
c0023de6:	83 f8 01             	cmp    eax,0x1
c0023de9:	75 30                	jne    c0023e1b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x71>
c0023deb:	50                   	push   eax
c0023dec:	50                   	push   eax
c0023ded:	53                   	push   ebx
c0023dee:	68 35 f5 02 c0       	push   0xc002f535
c0023df3:	e8 4e f4 fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0023df8:	83 c4 0c             	add    esp,0xc
c0023dfb:	53                   	push   ebx
c0023dfc:	55                   	push   ebp
c0023dfd:	56                   	push   esi
c0023dfe:	e8 d1 00 00 00       	call   c0023ed4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023e03:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023e0a:	e8 4d c1 fe ff       	call   c000ff5c <malloc>
c0023e0f:	89 c5                	mov    ebp,eax
c0023e11:	89 04 24             	mov    DWORD PTR [esp],eax
c0023e14:	e8 f9 0d 00 00       	call   c0024c12 <SATA::SATA()>
c0023e19:	eb 33                	jmp    c0023e4e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa4>
c0023e1b:	83 f8 04             	cmp    eax,0x4
c0023e1e:	75 47                	jne    c0023e67 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c0023e20:	50                   	push   eax
c0023e21:	50                   	push   eax
c0023e22:	53                   	push   ebx
c0023e23:	68 4c f5 02 c0       	push   0xc002f54c
c0023e28:	e8 19 f4 fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0023e2d:	83 c4 0c             	add    esp,0xc
c0023e30:	53                   	push   ebx
c0023e31:	55                   	push   ebp
c0023e32:	56                   	push   esi
c0023e33:	e8 9c 00 00 00       	call   c0023ed4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023e38:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023e3f:	e8 18 c1 fe ff       	call   c000ff5c <malloc>
c0023e44:	89 c5                	mov    ebp,eax
c0023e46:	89 04 24             	mov    DWORD PTR [esp],eax
c0023e49:	e8 46 12 00 00       	call   c0025094 <SATAPI::SATAPI()>
c0023e4e:	5a                   	pop    edx
c0023e4f:	59                   	pop    ecx
c0023e50:	55                   	push   ebp
c0023e51:	56                   	push   esi
c0023e52:	e8 ef 08 ff ff       	call   c0014746 <Device::addChild(Device*)>
c0023e57:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023e5a:	56                   	push   esi
c0023e5b:	6a 00                	push   0x0
c0023e5d:	53                   	push   ebx
c0023e5e:	55                   	push   ebp
c0023e5f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023e62:	83 c4 20             	add    esp,0x20
c0023e65:	eb 10                	jmp    c0023e77 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xcd>
c0023e67:	50                   	push   eax
c0023e68:	50                   	push   eax
c0023e69:	53                   	push   ebx
c0023e6a:	68 65 f5 02 c0       	push   0xc002f565
c0023e6f:	e8 d2 f3 fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0023e74:	83 c4 10             	add    esp,0x10
c0023e77:	d1 ef                	shr    edi,1
c0023e79:	43                   	inc    ebx
c0023e7a:	83 fb 20             	cmp    ebx,0x20
c0023e7d:	0f 85 3b ff ff ff    	jne    c0023dbe <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023e83:	83 c4 0c             	add    esp,0xc
c0023e86:	5b                   	pop    ebx
c0023e87:	5e                   	pop    esi
c0023e88:	5f                   	pop    edi
c0023e89:	5d                   	pop    ebp
c0023e8a:	c3                   	ret    
c0023e8b:	90                   	nop

c0023e8c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023e8c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023e90:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023e93:	89 c2                	mov    edx,eax
c0023e95:	c1 ea 08             	shr    edx,0x8
c0023e98:	83 e2 0f             	and    edx,0xf
c0023e9b:	fe ca                	dec    dl
c0023e9d:	75 31                	jne    c0023ed0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023e9f:	83 e0 0f             	and    eax,0xf
c0023ea2:	3c 03                	cmp    al,0x3
c0023ea4:	75 2a                	jne    c0023ed0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023ea6:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023ea9:	b8 02 00 00 00       	mov    eax,0x2
c0023eae:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023eb4:	74 1c                	je     c0023ed2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023eb6:	b8 04 00 00 00       	mov    eax,0x4
c0023ebb:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023ec1:	74 0f                	je     c0023ed2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023ec3:	31 c0                	xor    eax,eax
c0023ec5:	83 fa 03             	cmp    edx,0x3
c0023ec8:	0f 94 c0             	sete   al
c0023ecb:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023ecf:	c3                   	ret    
c0023ed0:	31 c0                	xor    eax,eax
c0023ed2:	c3                   	ret    
c0023ed3:	90                   	nop

c0023ed4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023ed4:	55                   	push   ebp
c0023ed5:	57                   	push   edi
c0023ed6:	56                   	push   esi
c0023ed7:	53                   	push   ebx
c0023ed8:	83 ec 24             	sub    esp,0x24
c0023edb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0023edf:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0023ee3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0023ee7:	53                   	push   ebx
c0023ee8:	89 fd                	mov    ebp,edi
c0023eea:	56                   	push   esi
c0023eeb:	c1 e5 0a             	shl    ebp,0xa
c0023eee:	e8 05 01 00 00       	call   c0023ff8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023ef3:	83 c4 0c             	add    esp,0xc
c0023ef6:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023efc:	01 e8                	add    eax,ebp
c0023efe:	89 03                	mov    DWORD PTR [ebx],eax
c0023f00:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023f02:	68 00 04 00 00       	push   0x400
c0023f07:	6a 00                	push   0x0
c0023f09:	50                   	push   eax
c0023f0a:	e8 b5 c7 fd ff       	call   c00006c4 <memset>
c0023f0f:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023f15:	89 fa                	mov    edx,edi
c0023f17:	01 e8                	add    eax,ebp
c0023f19:	c1 e7 0d             	shl    edi,0xd
c0023f1c:	89 03                	mov    DWORD PTR [ebx],eax
c0023f1e:	c1 e2 08             	shl    edx,0x8
c0023f21:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023f28:	81 c2 00 80 00 00    	add    edx,0x8000
c0023f2e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0023f32:	89 d0                	mov    eax,edx
c0023f34:	83 c4 0c             	add    esp,0xc
c0023f37:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023f3d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023f40:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023f43:	68 00 01 00 00       	push   0x100
c0023f48:	6a 00                	push   0x0
c0023f4a:	50                   	push   eax
c0023f4b:	e8 74 c7 fd ff       	call   c00006c4 <memset>
c0023f50:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023f54:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023f5a:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023f60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023f64:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023f67:	83 c4 10             	add    esp,0x10
c0023f6a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023f71:	31 ff                	xor    edi,edi
c0023f73:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023f79:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023f7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023f83:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023f89:	83 c5 20             	add    ebp,0x20
c0023f8c:	01 f8                	add    eax,edi
c0023f8e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023f91:	52                   	push   edx
c0023f92:	68 00 01 00 00       	push   0x100
c0023f97:	6a 00                	push   0x0
c0023f99:	50                   	push   eax
c0023f9a:	e8 25 c7 fd ff       	call   c00006c4 <memset>
c0023f9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023fa3:	83 c4 10             	add    esp,0x10
c0023fa6:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023fac:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023fb3:	01 f8                	add    eax,edi
c0023fb5:	81 c7 00 01 00 00    	add    edi,0x100
c0023fbb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023fbe:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023fc4:	75 b3                	jne    c0023f79 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023fc6:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023fca:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023fce:	83 c4 1c             	add    esp,0x1c
c0023fd1:	5b                   	pop    ebx
c0023fd2:	5e                   	pop    esi
c0023fd3:	5f                   	pop    edi
c0023fd4:	5d                   	pop    ebp
c0023fd5:	eb 01                	jmp    c0023fd8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0023fd7:	90                   	nop

c0023fd8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023fd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023fdc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023fdf:	0f ba e2 0f          	bt     edx,0xf
c0023fe3:	72 f7                	jb     c0023fdc <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023fe5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023fe8:	83 ca 10             	or     edx,0x10
c0023feb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023fee:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023ff1:	83 ca 01             	or     edx,0x1
c0023ff4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023ff7:	c3                   	ret    

c0023ff8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023ff8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023ffc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023fff:	83 e2 fe             	and    edx,0xfffffffe
c0024002:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024005:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024008:	83 e2 ef             	and    edx,0xffffffef
c002400b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002400e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024011:	0f ba e2 0e          	bt     edx,0xe
c0024015:	72 f7                	jb     c002400e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024017:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002401a:	0f ba e2 0f          	bt     edx,0xf
c002401e:	72 ee                	jb     c002400e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024020:	c3                   	ret    
c0024021:	90                   	nop

c0024022 <ATA::ATA()>:
c0024022:	83 ec 0c             	sub    esp,0xc
c0024025:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024029:	83 ec 04             	sub    esp,0x4
c002402c:	68 00 02 00 00       	push   0x200
c0024031:	68 0d f8 02 c0       	push   0xc002f80d
c0024036:	50                   	push   eax
c0024037:	e8 42 0a ff ff       	call   c0014a7e <PhysicalDisk::PhysicalDisk(char const*, int)>
c002403c:	83 c4 10             	add    esp,0x10
c002403f:	ba 64 f6 02 c0       	mov    edx,0xc002f664
c0024044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024048:	89 10                	mov    DWORD PTR [eax],edx
c002404a:	90                   	nop
c002404b:	83 c4 0c             	add    esp,0xc
c002404e:	c3                   	ret    
c002404f:	90                   	nop

c0024050 <ATA::flush(bool)>:
c0024050:	53                   	push   ebx
c0024051:	83 ec 08             	sub    esp,0x8
c0024054:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0024059:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002405d:	19 c0                	sbb    eax,eax
c002405f:	83 e0 fd             	and    eax,0xfffffffd
c0024062:	05 ea 00 00 00       	add    eax,0xea
c0024067:	50                   	push   eax
c0024068:	6a 07                	push   0x7
c002406a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024071:	50                   	push   eax
c0024072:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024078:	e8 a3 f5 ff ff       	call   c0023620 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002407d:	83 c4 0c             	add    esp,0xc
c0024080:	6a 00                	push   0x0
c0024082:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024089:	50                   	push   eax
c002408a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024090:	e8 ad f8 ff ff       	call   c0023942 <IDE::polling(unsigned char, unsigned int)>
c0024095:	83 c4 18             	add    esp,0x18
c0024098:	5b                   	pop    ebx
c0024099:	c3                   	ret    

c002409a <ATA::readyForCommand()>:
c002409a:	56                   	push   esi
c002409b:	53                   	push   ebx
c002409c:	31 db                	xor    ebx,ebx
c002409e:	50                   	push   eax
c002409f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00240a3:	50                   	push   eax
c00240a4:	6a 0c                	push   0xc
c00240a6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00240ad:	50                   	push   eax
c00240ae:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00240b4:	e8 b9 f4 ff ff       	call   c0023572 <IDE::read(unsigned char, unsigned char)>
c00240b9:	83 c4 10             	add    esp,0x10
c00240bc:	a8 88                	test   al,0x88
c00240be:	74 23                	je     c00240e3 <ATA::readyForCommand()+0x49>
c00240c0:	43                   	inc    ebx
c00240c1:	83 fb 63             	cmp    ebx,0x63
c00240c4:	7e dd                	jle    c00240a3 <ATA::readyForCommand()+0x9>
c00240c6:	51                   	push   ecx
c00240c7:	51                   	push   ecx
c00240c8:	6a 00                	push   0x0
c00240ca:	68 40 42 0f 00       	push   0xf4240
c00240cf:	e8 2e a7 ff ff       	call   c001e802 <nanoSleep(unsigned long long)>
c00240d4:	83 c4 10             	add    esp,0x10
c00240d7:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00240dd:	75 c4                	jne    c00240a3 <ATA::readyForCommand()+0x9>
c00240df:	31 c0                	xor    eax,eax
c00240e1:	eb 02                	jmp    c00240e5 <ATA::readyForCommand()+0x4b>
c00240e3:	b0 01                	mov    al,0x1
c00240e5:	5a                   	pop    edx
c00240e6:	5b                   	pop    ebx
c00240e7:	5e                   	pop    esi
c00240e8:	c3                   	ret    
c00240e9:	90                   	nop

c00240ea <ATA::access(unsigned long long, int, void*, bool)>:
c00240ea:	55                   	push   ebp
c00240eb:	57                   	push   edi
c00240ec:	56                   	push   esi
c00240ed:	53                   	push   ebx
c00240ee:	83 ec 2c             	sub    esp,0x2c
c00240f1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00240f5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00240f9:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00240fd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024101:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0024105:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024109:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002410d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024113:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024117:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002411d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024121:	c1 e0 06             	shl    eax,0x6
c0024124:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002412c:	74 5d                	je     c002418b <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c002412e:	89 fa                	mov    edx,edi
c0024130:	89 f0                	mov    eax,esi
c0024132:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0024136:	c1 ea 1c             	shr    edx,0x1c
c0024139:	89 d1                	mov    ecx,edx
c002413b:	09 c1                	or     ecx,eax
c002413d:	74 25                	je     c0024164 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c002413f:	31 ed                	xor    ebp,ebp
c0024141:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024148:	89 fa                	mov    edx,edi
c002414a:	89 f0                	mov    eax,esi
c002414c:	0f ad d0             	shrd   eax,edx,cl
c002414f:	d3 ea                	shr    edx,cl
c0024151:	f6 c1 20             	test   cl,0x20
c0024154:	74 02                	je     c0024158 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0024156:	89 d0                	mov    eax,edx
c0024158:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002415c:	45                   	inc    ebp
c002415d:	83 fd 06             	cmp    ebp,0x6
c0024160:	75 df                	jne    c0024141 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0024162:	eb 76                	jmp    c00241da <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0024164:	89 f0                	mov    eax,esi
c0024166:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002416b:	89 fa                	mov    edx,edi
c002416d:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024174:	0f ac d0 10          	shrd   eax,edx,0x10
c0024178:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002417d:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024181:	c1 ee 18             	shr    esi,0x18
c0024184:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024189:	eb 56                	jmp    c00241e1 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002418b:	6a 00                	push   0x0
c002418d:	6a 3f                	push   0x3f
c002418f:	57                   	push   edi
c0024190:	56                   	push   esi
c0024191:	e8 46 2a 00 00       	call   c0026bdc <__umoddi3>
c0024196:	83 c4 10             	add    esp,0x10
c0024199:	40                   	inc    eax
c002419a:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002419e:	6a 00                	push   0x0
c00241a0:	68 f0 03 00 00       	push   0x3f0
c00241a5:	57                   	push   edi
c00241a6:	56                   	push   esi
c00241a7:	e8 30 29 00 00       	call   c0026adc <__udivdi3>
c00241ac:	83 c4 10             	add    esp,0x10
c00241af:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00241b4:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00241bb:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00241c0:	6a 00                	push   0x0
c00241c2:	6a 3f                	push   0x3f
c00241c4:	57                   	push   edi
c00241c5:	56                   	push   esi
c00241c6:	e8 11 29 00 00       	call   c0026adc <__udivdi3>
c00241cb:	83 c4 10             	add    esp,0x10
c00241ce:	89 c6                	mov    esi,eax
c00241d0:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00241d5:	83 e6 0f             	and    esi,0xf
c00241d8:	eb 07                	jmp    c00241e1 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00241da:	31 f6                	xor    esi,esi
c00241dc:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00241e1:	bf 01 00 00 00       	mov    edi,0x1
c00241e6:	50                   	push   eax
c00241e7:	6a 00                	push   0x0
c00241e9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241f0:	50                   	push   eax
c00241f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00241f5:	e8 1a f3 ff ff       	call   c0023514 <IDE::enableIRQs(unsigned char, bool)>
c00241fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00241fd:	e8 98 fe ff ff       	call   c002409a <ATA::readyForCommand()>
c0024202:	83 c4 10             	add    esp,0x10
c0024205:	84 c0                	test   al,al
c0024207:	0f 84 50 02 00 00    	je     c002445d <ATA::access(unsigned long long, int, void*, bool)+0x373>
c002420d:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024213:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024219:	c1 e0 04             	shl    eax,0x4
c002421c:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024223:	09 c6                	or     esi,eax
c0024225:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c002422a:	75 05                	jne    c0024231 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c002422c:	83 ce a0             	or     esi,0xffffffa0
c002422f:	eb 03                	jmp    c0024234 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024231:	83 ce e0             	or     esi,0xffffffe0
c0024234:	89 f0                	mov    eax,esi
c0024236:	0f b6 f0             	movzx  esi,al
c0024239:	56                   	push   esi
c002423a:	6a 06                	push   0x6
c002423c:	51                   	push   ecx
c002423d:	52                   	push   edx
c002423e:	e8 dd f3 ff ff       	call   c0023620 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024243:	83 c4 10             	add    esp,0x10
c0024246:	6a 00                	push   0x0
c0024248:	6a 01                	push   0x1
c002424a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024251:	50                   	push   eax
c0024252:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024258:	e8 c3 f3 ff ff       	call   c0023620 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002425d:	83 c4 10             	add    esp,0x10
c0024260:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024265:	75 6e                	jne    c00242d5 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024267:	6a 00                	push   0x0
c0024269:	6a 08                	push   0x8
c002426b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024272:	50                   	push   eax
c0024273:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024279:	e8 a2 f3 ff ff       	call   c0023620 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002427e:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024283:	50                   	push   eax
c0024284:	6a 09                	push   0x9
c0024286:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002428d:	50                   	push   eax
c002428e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024294:	e8 87 f3 ff ff       	call   c0023620 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024299:	83 c4 20             	add    esp,0x20
c002429c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00242a1:	50                   	push   eax
c00242a2:	6a 0a                	push   0xa
c00242a4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242ab:	50                   	push   eax
c00242ac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242b2:	e8 69 f3 ff ff       	call   c0023620 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242b7:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00242bc:	50                   	push   eax
c00242bd:	6a 0b                	push   0xb
c00242bf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242c6:	50                   	push   eax
c00242c7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242cd:	e8 4e f3 ff ff       	call   c0023620 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242d2:	83 c4 20             	add    esp,0x20
c00242d5:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00242da:	50                   	push   eax
c00242db:	6a 02                	push   0x2
c00242dd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242e4:	50                   	push   eax
c00242e5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242eb:	e8 30 f3 ff ff       	call   c0023620 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242f0:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00242f5:	50                   	push   eax
c00242f6:	6a 03                	push   0x3
c00242f8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242ff:	50                   	push   eax
c0024300:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024306:	e8 15 f3 ff ff       	call   c0023620 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002430b:	83 c4 20             	add    esp,0x20
c002430e:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024313:	50                   	push   eax
c0024314:	6a 04                	push   0x4
c0024316:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002431d:	50                   	push   eax
c002431e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024324:	e8 f7 f2 ff ff       	call   c0023620 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024329:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002432e:	50                   	push   eax
c002432f:	6a 05                	push   0x5
c0024331:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024338:	50                   	push   eax
c0024339:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002433f:	e8 dc f2 ff ff       	call   c0023620 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024344:	83 c4 20             	add    esp,0x20
c0024347:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002434c:	0f 94 c0             	sete   al
c002434f:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024354:	74 09                	je     c002435f <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024356:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c002435d:	eb 07                	jmp    c0024366 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c002435f:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024366:	0f b6 c0             	movzx  eax,al
c0024369:	50                   	push   eax
c002436a:	6a 07                	push   0x7
c002436c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024373:	50                   	push   eax
c0024374:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002437a:	e8 a1 f2 ff ff       	call   c0023620 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002437f:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024383:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024387:	83 c4 10             	add    esp,0x10
c002438a:	85 f6                	test   esi,esi
c002438c:	0f 84 ac 00 00 00    	je     c002443e <ATA::access(unsigned long long, int, void*, bool)+0x354>
c0024392:	50                   	push   eax
c0024393:	6a 01                	push   0x1
c0024395:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002439c:	50                   	push   eax
c002439d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243a3:	e8 9a f5 ff ff       	call   c0023942 <IDE::polling(unsigned char, unsigned int)>
c00243a8:	83 c4 10             	add    esp,0x10
c00243ab:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00243b1:	84 c0                	test   al,al
c00243b3:	74 20                	je     c00243d5 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c00243b5:	0f b6 f8             	movzx  edi,al
c00243b8:	0f b6 d2             	movzx  edx,dl
c00243bb:	57                   	push   edi
c00243bc:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00243c3:	50                   	push   eax
c00243c4:	52                   	push   edx
c00243c5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243cb:	e8 dc f3 ff ff       	call   c00237ac <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00243d0:	e9 85 00 00 00       	jmp    c002445a <ATA::access(unsigned long long, int, void*, bool)+0x370>
c00243d5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00243da:	74 41                	je     c002441d <ATA::access(unsigned long long, int, void*, bool)+0x333>
c00243dc:	31 c9                	xor    ecx,ecx
c00243de:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c00243e2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00243e6:	50                   	push   eax
c00243e7:	50                   	push   eax
c00243e8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243ef:	50                   	push   eax
c00243f0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243f6:	e8 61 f1 ff ff       	call   c002355c <IDE::getBase(unsigned char)>
c00243fb:	89 c2                	mov    edx,eax
c00243fd:	89 e8                	mov    eax,ebp
c00243ff:	66 ef                	out    dx,ax
c0024401:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0024405:	83 c4 10             	add    esp,0x10
c0024408:	41                   	inc    ecx
c0024409:	81 f9 00 01 00 00    	cmp    ecx,0x100
c002440f:	75 cd                	jne    c00243de <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c0024411:	4e                   	dec    esi
c0024412:	81 c7 00 02 00 00    	add    edi,0x200
c0024418:	e9 6d ff ff ff       	jmp    c002438a <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c002441d:	0f b6 d2             	movzx  edx,dl
c0024420:	51                   	push   ecx
c0024421:	51                   	push   ecx
c0024422:	52                   	push   edx
c0024423:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024429:	e8 2e f1 ff ff       	call   c002355c <IDE::getBase(unsigned char)>
c002442e:	b9 00 01 00 00       	mov    ecx,0x100
c0024433:	89 c2                	mov    edx,eax
c0024435:	fc                   	cld    
c0024436:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024439:	83 c4 10             	add    esp,0x10
c002443c:	eb d3                	jmp    c0024411 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c002443e:	31 ff                	xor    edi,edi
c0024440:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024445:	74 16                	je     c002445d <ATA::access(unsigned long long, int, void*, bool)+0x373>
c0024447:	50                   	push   eax
c0024448:	50                   	push   eax
c0024449:	31 c0                	xor    eax,eax
c002444b:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024450:	0f 94 c0             	sete   al
c0024453:	50                   	push   eax
c0024454:	53                   	push   ebx
c0024455:	e8 f6 fb ff ff       	call   c0024050 <ATA::flush(bool)>
c002445a:	83 c4 10             	add    esp,0x10
c002445d:	83 c4 2c             	add    esp,0x2c
c0024460:	89 f8                	mov    eax,edi
c0024462:	5b                   	pop    ebx
c0024463:	5e                   	pop    esi
c0024464:	5f                   	pop    edi
c0024465:	5d                   	pop    ebp
c0024466:	c3                   	ret    
c0024467:	90                   	nop

c0024468 <ATA::detectCHS()>:
c0024468:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002446c:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024472:	c1 e0 06             	shl    eax,0x6
c0024475:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002447b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024485:	c7 44 24 04 48 f6 02 c0 	mov    DWORD PTR [esp+0x4],0xc002f648
c002448d:	e9 69 63 ff ff       	jmp    c001a7fb <Krnl::panic(char const*)>

c0024492 <ATA::open(int, int, void*)>:
c0024492:	53                   	push   ebx
c0024493:	83 ec 08             	sub    esp,0x8
c0024496:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002449a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002449e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00244a2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00244a8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00244ae:	c1 e0 06             	shl    eax,0x6
c00244b1:	01 d0                	add    eax,edx
c00244b3:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00244ba:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00244c0:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00244c7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00244d1:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00244d7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00244de:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00244e5:	75 0c                	jne    c00244f3 <ATA::open(int, int, void*)+0x61>
c00244e7:	83 ec 0c             	sub    esp,0xc
c00244ea:	53                   	push   ebx
c00244eb:	e8 78 ff ff ff       	call   c0024468 <ATA::detectCHS()>
c00244f0:	83 c4 10             	add    esp,0x10
c00244f3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00244f9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00244ff:	c1 e0 06             	shl    eax,0x6
c0024502:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024509:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024513:	d1 e8                	shr    eax,1
c0024515:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002451b:	6a 04                	push   0x4
c002451d:	6a 0c                	push   0xc
c002451f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024526:	50                   	push   eax
c0024527:	52                   	push   edx
c0024528:	e8 f3 f0 ff ff       	call   c0023620 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002452d:	90                   	nop
c002452e:	90                   	nop
c002452f:	6a 00                	push   0x0
c0024531:	6a 0c                	push   0xc
c0024533:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002453a:	50                   	push   eax
c002453b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024541:	e8 da f0 ff ff       	call   c0023620 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024546:	83 c4 14             	add    esp,0x14
c0024549:	53                   	push   ebx
c002454a:	e8 97 05 ff ff       	call   c0014ae6 <PhysicalDisk::startCache()>
c002454f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024552:	e8 c5 26 ff ff       	call   c0016c1c <createPartitionsForDisk(PhysicalDisk*)>
c0024557:	31 c0                	xor    eax,eax
c0024559:	83 c4 18             	add    esp,0x18
c002455c:	5b                   	pop    ebx
c002455d:	c3                   	ret    

c002455e <ATA::read(unsigned long long, int, void*)>:
c002455e:	57                   	push   edi
c002455f:	b8 04 00 00 00       	mov    eax,0x4
c0024564:	56                   	push   esi
c0024565:	53                   	push   ebx
c0024566:	83 ec 10             	sub    esp,0x10
c0024569:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002456d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024571:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024574:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024578:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002457c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024582:	77 3b                	ja     c00245bf <ATA::read(unsigned long long, int, void*)+0x61>
c0024584:	b8 06 00 00 00       	mov    eax,0x6
c0024589:	85 d2                	test   edx,edx
c002458b:	74 32                	je     c00245bf <ATA::read(unsigned long long, int, void*)+0x61>
c002458d:	50                   	push   eax
c002458e:	50                   	push   eax
c002458f:	6a 00                	push   0x0
c0024591:	52                   	push   edx
c0024592:	53                   	push   ebx
c0024593:	57                   	push   edi
c0024594:	56                   	push   esi
c0024595:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024599:	e8 4c fb ff ff       	call   c00240ea <ATA::access(unsigned long long, int, void*, bool)>
c002459e:	83 c4 20             	add    esp,0x20
c00245a1:	85 c0                	test   eax,eax
c00245a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00245a7:	75 11                	jne    c00245ba <ATA::read(unsigned long long, int, void*)+0x5c>
c00245a9:	01 1d 80 56 03 c0    	add    DWORD PTR ds:0xc0035680,ebx
c00245af:	e8 7e d0 fe ff       	call   c0011632 <VgaText::updateDiskUsage()>
c00245b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00245b8:	eb 05                	jmp    c00245bf <ATA::read(unsigned long long, int, void*)+0x61>
c00245ba:	b8 01 00 00 00       	mov    eax,0x1
c00245bf:	83 c4 10             	add    esp,0x10
c00245c2:	5b                   	pop    ebx
c00245c3:	5e                   	pop    esi
c00245c4:	5f                   	pop    edi
c00245c5:	c3                   	ret    

c00245c6 <ATA::write(unsigned long long, int, void*)>:
c00245c6:	57                   	push   edi
c00245c7:	b8 04 00 00 00       	mov    eax,0x4
c00245cc:	56                   	push   esi
c00245cd:	53                   	push   ebx
c00245ce:	83 ec 10             	sub    esp,0x10
c00245d1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00245d5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00245d9:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00245dc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00245e0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00245e4:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00245ea:	77 3b                	ja     c0024627 <ATA::write(unsigned long long, int, void*)+0x61>
c00245ec:	b8 06 00 00 00       	mov    eax,0x6
c00245f1:	85 d2                	test   edx,edx
c00245f3:	74 32                	je     c0024627 <ATA::write(unsigned long long, int, void*)+0x61>
c00245f5:	50                   	push   eax
c00245f6:	50                   	push   eax
c00245f7:	6a 01                	push   0x1
c00245f9:	52                   	push   edx
c00245fa:	53                   	push   ebx
c00245fb:	57                   	push   edi
c00245fc:	56                   	push   esi
c00245fd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024601:	e8 e4 fa ff ff       	call   c00240ea <ATA::access(unsigned long long, int, void*, bool)>
c0024606:	83 c4 20             	add    esp,0x20
c0024609:	85 c0                	test   eax,eax
c002460b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002460f:	75 11                	jne    c0024622 <ATA::write(unsigned long long, int, void*)+0x5c>
c0024611:	01 1d 84 56 03 c0    	add    DWORD PTR ds:0xc0035684,ebx
c0024617:	e8 16 d0 fe ff       	call   c0011632 <VgaText::updateDiskUsage()>
c002461c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024620:	eb 05                	jmp    c0024627 <ATA::write(unsigned long long, int, void*)+0x61>
c0024622:	b8 01 00 00 00       	mov    eax,0x1
c0024627:	83 c4 10             	add    esp,0x10
c002462a:	5b                   	pop    ebx
c002462b:	5e                   	pop    esi
c002462c:	5f                   	pop    edi
c002462d:	c3                   	ret    

c002462e <ATA::close(int, int, void*)>:
c002462e:	83 ec 0c             	sub    esp,0xc
c0024631:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024635:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002463b:	85 c0                	test   eax,eax
c002463d:	74 0c                	je     c002464b <ATA::close(int, int, void*)+0x1d>
c002463f:	83 ec 0c             	sub    esp,0xc
c0024642:	8b 10                	mov    edx,DWORD PTR [eax]
c0024644:	50                   	push   eax
c0024645:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024648:	83 c4 10             	add    esp,0x10
c002464b:	31 c0                	xor    eax,eax
c002464d:	83 c4 0c             	add    esp,0xc
c0024650:	c3                   	ret    
c0024651:	90                   	nop

c0024652 <ATA::powerSaving(PowerSavingLevel)>:
c0024652:	c3                   	ret    
c0024653:	90                   	nop

c0024654 <ATAPI::ATAPI()>:
c0024654:	83 ec 0c             	sub    esp,0xc
c0024657:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002465b:	83 ec 04             	sub    esp,0x4
c002465e:	68 00 08 00 00       	push   0x800
c0024663:	68 29 f9 02 c0       	push   0xc002f929
c0024668:	50                   	push   eax
c0024669:	e8 10 04 ff ff       	call   c0014a7e <PhysicalDisk::PhysicalDisk(char const*, int)>
c002466e:	83 c4 10             	add    esp,0x10
c0024671:	ba 3c f7 02 c0       	mov    edx,0xc002f73c
c0024676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002467a:	89 10                	mov    DWORD PTR [eax],edx
c002467c:	90                   	nop
c002467d:	83 c4 0c             	add    esp,0xc
c0024680:	c3                   	ret    
c0024681:	90                   	nop

c0024682 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024682:	55                   	push   ebp
c0024683:	57                   	push   edi
c0024684:	56                   	push   esi
c0024685:	53                   	push   ebx
c0024686:	83 ec 20             	sub    esp,0x20
c0024689:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002468d:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024691:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024695:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024699:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002469d:	6a 01                	push   0x1
c002469f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246a6:	50                   	push   eax
c00246a7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246ad:	e8 62 ee ff ff       	call   c0023514 <IDE::enableIRQs(unsigned char, bool)>
c00246b2:	5e                   	pop    esi
c00246b3:	58                   	pop    eax
c00246b4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246bb:	50                   	push   eax
c00246bc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246c2:	e8 8d e9 ff ff       	call   c0023054 <IDE::prepareInterrupt(unsigned char)>
c00246c7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00246ca:	e8 73 02 00 00       	call   c0024942 <ATAPI::readyForCommand()>
c00246cf:	83 c4 10             	add    esp,0x10
c00246d2:	84 c0                	test   al,al
c00246d4:	75 0a                	jne    c00246e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00246d6:	bb 01 00 00 00       	mov    ebx,0x1
c00246db:	e9 57 02 00 00       	jmp    c0024937 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00246e0:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00246e6:	c1 e0 04             	shl    eax,0x4
c00246e9:	0f b6 c0             	movzx  eax,al
c00246ec:	50                   	push   eax
c00246ed:	6a 06                	push   0x6
c00246ef:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246f6:	50                   	push   eax
c00246f7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246fd:	e8 1e ef ff ff       	call   c0023620 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024702:	6a 00                	push   0x0
c0024704:	6a 01                	push   0x1
c0024706:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002470d:	50                   	push   eax
c002470e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024714:	e8 07 ef ff ff       	call   c0023620 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024719:	83 c4 20             	add    esp,0x20
c002471c:	0f b6 c3             	movzx  eax,bl
c002471f:	0f b6 df             	movzx  ebx,bh
c0024722:	50                   	push   eax
c0024723:	6a 04                	push   0x4
c0024725:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002472c:	50                   	push   eax
c002472d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024733:	e8 e8 ee ff ff       	call   c0023620 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024738:	53                   	push   ebx
c0024739:	6a 05                	push   0x5
c002473b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024742:	50                   	push   eax
c0024743:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024749:	e8 d2 ee ff ff       	call   c0023620 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002474e:	83 c4 20             	add    esp,0x20
c0024751:	68 a0 00 00 00       	push   0xa0
c0024756:	6a 07                	push   0x7
c0024758:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002475f:	50                   	push   eax
c0024760:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024766:	e8 b5 ee ff ff       	call   c0023620 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002476b:	83 c4 0c             	add    esp,0xc
c002476e:	6a 01                	push   0x1
c0024770:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024777:	50                   	push   eax
c0024778:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002477e:	e8 bf f1 ff ff       	call   c0023942 <IDE::polling(unsigned char, unsigned int)>
c0024783:	83 c4 10             	add    esp,0x10
c0024786:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c002478c:	84 c0                	test   al,al
c002478e:	74 23                	je     c00247b3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024790:	0f b6 d8             	movzx  ebx,al
c0024793:	0f b6 d2             	movzx  edx,dl
c0024796:	53                   	push   ebx
c0024797:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c002479e:	50                   	push   eax
c002479f:	52                   	push   edx
c00247a0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247a6:	e8 01 f0 ff ff       	call   c00237ac <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00247ab:	83 c4 10             	add    esp,0x10
c00247ae:	e9 84 01 00 00       	jmp    c0024937 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00247b3:	0f b6 d2             	movzx  edx,dl
c00247b6:	53                   	push   ebx
c00247b7:	53                   	push   ebx
c00247b8:	52                   	push   edx
c00247b9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247bf:	e8 98 ed ff ff       	call   c002355c <IDE::getBase(unsigned char)>
c00247c4:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00247c8:	b9 06 00 00 00       	mov    ecx,0x6
c00247cd:	89 c2                	mov    edx,eax
c00247cf:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00247d2:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00247d6:	83 c4 10             	add    esp,0x10
c00247d9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00247df:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00247e6:	85 db                	test   ebx,ebx
c00247e8:	0f 84 ec 00 00 00    	je     c00248da <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00247ee:	51                   	push   ecx
c00247ef:	51                   	push   ecx
c00247f0:	52                   	push   edx
c00247f1:	50                   	push   eax
c00247f2:	e8 6f e8 ff ff       	call   c0023066 <IDE::waitInterrupt(unsigned char)>
c00247f7:	83 c4 10             	add    esp,0x10
c00247fa:	84 c0                	test   al,al
c00247fc:	0f 84 d4 fe ff ff    	je     c00246d6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024802:	56                   	push   esi
c0024803:	56                   	push   esi
c0024804:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002480b:	50                   	push   eax
c002480c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024812:	e8 3d e8 ff ff       	call   c0023054 <IDE::prepareInterrupt(unsigned char)>
c0024817:	83 c4 0c             	add    esp,0xc
c002481a:	6a 04                	push   0x4
c002481c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024823:	50                   	push   eax
c0024824:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002482a:	e8 43 ed ff ff       	call   c0023572 <IDE::read(unsigned char, unsigned char)>
c002482f:	83 c4 0c             	add    esp,0xc
c0024832:	89 c6                	mov    esi,eax
c0024834:	6a 05                	push   0x5
c0024836:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002483d:	50                   	push   eax
c002483e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024844:	e8 29 ed ff ff       	call   c0023572 <IDE::read(unsigned char, unsigned char)>
c0024849:	89 f1                	mov    ecx,esi
c002484b:	0f b6 c0             	movzx  eax,al
c002484e:	0f b6 f1             	movzx  esi,cl
c0024851:	c1 e0 08             	shl    eax,0x8
c0024854:	09 c6                	or     esi,eax
c0024856:	d1 fe                	sar    esi,1
c0024858:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002485c:	83 c4 10             	add    esp,0x10
c002485f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024864:	74 41                	je     c00248a7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024866:	31 c9                	xor    ecx,ecx
c0024868:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002486e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024875:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024879:	75 0a                	jne    c0024885 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c002487b:	01 c9                	add    ecx,ecx
c002487d:	01 cd                	add    ebp,ecx
c002487f:	4b                   	dec    ebx
c0024880:	e9 54 ff ff ff       	jmp    c00247d9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024885:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002488a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002488e:	51                   	push   ecx
c002488f:	51                   	push   ecx
c0024890:	52                   	push   edx
c0024891:	50                   	push   eax
c0024892:	e8 c5 ec ff ff       	call   c002355c <IDE::getBase(unsigned char)>
c0024897:	89 c2                	mov    edx,eax
c0024899:	89 f0                	mov    eax,esi
c002489b:	66 ef                	out    dx,ax
c002489d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00248a1:	83 c4 10             	add    esp,0x10
c00248a4:	41                   	inc    ecx
c00248a5:	eb c1                	jmp    c0024868 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00248a7:	31 f6                	xor    esi,esi
c00248a9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00248af:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00248b6:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00248ba:	75 06                	jne    c00248c2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00248bc:	01 f6                	add    esi,esi
c00248be:	01 f5                	add    ebp,esi
c00248c0:	eb bd                	jmp    c002487f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00248c2:	51                   	push   ecx
c00248c3:	51                   	push   ecx
c00248c4:	52                   	push   edx
c00248c5:	50                   	push   eax
c00248c6:	e8 91 ec ff ff       	call   c002355c <IDE::getBase(unsigned char)>
c00248cb:	89 c2                	mov    edx,eax
c00248cd:	66 ed                	in     ax,dx
c00248cf:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00248d4:	83 c4 10             	add    esp,0x10
c00248d7:	46                   	inc    esi
c00248d8:	eb cf                	jmp    c00248a9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00248da:	51                   	push   ecx
c00248db:	51                   	push   ecx
c00248dc:	52                   	push   edx
c00248dd:	50                   	push   eax
c00248de:	e8 83 e7 ff ff       	call   c0023066 <IDE::waitInterrupt(unsigned char)>
c00248e3:	83 c4 10             	add    esp,0x10
c00248e6:	84 c0                	test   al,al
c00248e8:	0f 84 e8 fd ff ff    	je     c00246d6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00248ee:	bb a0 86 01 00       	mov    ebx,0x186a0
c00248f3:	52                   	push   edx
c00248f4:	52                   	push   edx
c00248f5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248fc:	50                   	push   eax
c00248fd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024903:	e8 4c e7 ff ff       	call   c0023054 <IDE::prepareInterrupt(unsigned char)>
c0024908:	83 c4 10             	add    esp,0x10
c002490b:	50                   	push   eax
c002490c:	50                   	push   eax
c002490d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024914:	50                   	push   eax
c0024915:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002491b:	e8 3c ec ff ff       	call   c002355c <IDE::getBase(unsigned char)>
c0024920:	8d 50 07             	lea    edx,[eax+0x7]
c0024923:	ec                   	in     al,dx
c0024924:	83 c4 10             	add    esp,0x10
c0024927:	a8 88                	test   al,0x88
c0024929:	74 0a                	je     c0024935 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002492b:	4b                   	dec    ebx
c002492c:	75 dd                	jne    c002490b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002492e:	bb 02 00 00 00       	mov    ebx,0x2
c0024933:	eb 02                	jmp    c0024937 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024935:	31 db                	xor    ebx,ebx
c0024937:	83 c4 1c             	add    esp,0x1c
c002493a:	89 d8                	mov    eax,ebx
c002493c:	5b                   	pop    ebx
c002493d:	5e                   	pop    esi
c002493e:	5f                   	pop    edi
c002493f:	5d                   	pop    ebp
c0024940:	c3                   	ret    
c0024941:	90                   	nop

c0024942 <ATAPI::readyForCommand()>:
c0024942:	56                   	push   esi
c0024943:	53                   	push   ebx
c0024944:	31 db                	xor    ebx,ebx
c0024946:	50                   	push   eax
c0024947:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002494b:	50                   	push   eax
c002494c:	6a 0c                	push   0xc
c002494e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024955:	50                   	push   eax
c0024956:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002495c:	e8 11 ec ff ff       	call   c0023572 <IDE::read(unsigned char, unsigned char)>
c0024961:	83 c4 10             	add    esp,0x10
c0024964:	a8 88                	test   al,0x88
c0024966:	74 23                	je     c002498b <ATAPI::readyForCommand()+0x49>
c0024968:	43                   	inc    ebx
c0024969:	83 fb 63             	cmp    ebx,0x63
c002496c:	7e dd                	jle    c002494b <ATAPI::readyForCommand()+0x9>
c002496e:	51                   	push   ecx
c002496f:	51                   	push   ecx
c0024970:	6a 00                	push   0x0
c0024972:	68 40 42 0f 00       	push   0xf4240
c0024977:	e8 86 9e ff ff       	call   c001e802 <nanoSleep(unsigned long long)>
c002497c:	83 c4 10             	add    esp,0x10
c002497f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024985:	75 c4                	jne    c002494b <ATAPI::readyForCommand()+0x9>
c0024987:	31 c0                	xor    eax,eax
c0024989:	eb 02                	jmp    c002498d <ATAPI::readyForCommand()+0x4b>
c002498b:	b0 01                	mov    al,0x1
c002498d:	5a                   	pop    edx
c002498e:	5b                   	pop    ebx
c002498f:	5e                   	pop    esi
c0024990:	c3                   	ret    
c0024991:	90                   	nop

c0024992 <ATAPI::open(int, int, void*)>:
c0024992:	53                   	push   ebx
c0024993:	83 ec 08             	sub    esp,0x8
c0024996:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002499a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002499e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00249a2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00249a8:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00249ae:	c1 e0 06             	shl    eax,0x6
c00249b1:	01 d0                	add    eax,edx
c00249b3:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00249ba:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00249c0:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00249c7:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00249d1:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00249d7:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00249de:	6a 04                	push   0x4
c00249e0:	6a 0c                	push   0xc
c00249e2:	51                   	push   ecx
c00249e3:	52                   	push   edx
c00249e4:	e8 37 ec ff ff       	call   c0023620 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249e9:	90                   	nop
c00249ea:	90                   	nop
c00249eb:	6a 00                	push   0x0
c00249ed:	6a 0c                	push   0xc
c00249ef:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00249f6:	50                   	push   eax
c00249f7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00249fd:	e8 1e ec ff ff       	call   c0023620 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a02:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024a09:	83 c4 14             	add    esp,0x14
c0024a0c:	53                   	push   ebx
c0024a0d:	e8 9a 00 00 00       	call   c0024aac <ATAPI::detectMedia()>
c0024a12:	31 c0                	xor    eax,eax
c0024a14:	83 c4 18             	add    esp,0x18
c0024a17:	5b                   	pop    ebx
c0024a18:	c3                   	ret    
c0024a19:	90                   	nop

c0024a1a <ATAPI::eject()>:
c0024a1a:	57                   	push   edi
c0024a1b:	b9 03 00 00 00       	mov    ecx,0x3
c0024a20:	53                   	push   ebx
c0024a21:	83 ec 14             	sub    esp,0x14
c0024a24:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024a28:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024a2c:	fc                   	cld    
c0024a2d:	31 c0                	xor    eax,eax
c0024a2f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024a31:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024a36:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024a3b:	50                   	push   eax
c0024a3c:	50                   	push   eax
c0024a3d:	6a 00                	push   0x0
c0024a3f:	6a 00                	push   0x0
c0024a41:	6a 00                	push   0x0
c0024a43:	6a 02                	push   0x2
c0024a45:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024a49:	50                   	push   eax
c0024a4a:	53                   	push   ebx
c0024a4b:	e8 32 fc ff ff       	call   c0024682 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a50:	83 c4 14             	add    esp,0x14
c0024a53:	53                   	push   ebx
c0024a54:	e8 09 00 00 00       	call   c0024a62 <ATAPI::diskRemoved()>
c0024a59:	83 c4 24             	add    esp,0x24
c0024a5c:	31 c0                	xor    eax,eax
c0024a5e:	5b                   	pop    ebx
c0024a5f:	5f                   	pop    edi
c0024a60:	c3                   	ret    
c0024a61:	90                   	nop

c0024a62 <ATAPI::diskRemoved()>:
c0024a62:	83 ec 18             	sub    esp,0x18
c0024a65:	68 35 f9 02 c0       	push   0xc002f935
c0024a6a:	e8 d7 e7 fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0024a6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024a73:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024a7a:	83 c4 1c             	add    esp,0x1c
c0024a7d:	c3                   	ret    

c0024a7e <ATAPI::diskInserted()>:
c0024a7e:	53                   	push   ebx
c0024a7f:	83 ec 14             	sub    esp,0x14
c0024a82:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024a86:	68 4c f9 02 c0       	push   0xc002f94c
c0024a8b:	e8 b6 e7 fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0024a90:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024a97:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024a9a:	e8 47 00 ff ff       	call   c0014ae6 <PhysicalDisk::startCache()>
c0024a9f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024aa3:	83 c4 18             	add    esp,0x18
c0024aa6:	5b                   	pop    ebx
c0024aa7:	e9 70 21 ff ff       	jmp    c0016c1c <createPartitionsForDisk(PhysicalDisk*)>

c0024aac <ATAPI::detectMedia()>:
c0024aac:	56                   	push   esi
c0024aad:	53                   	push   ebx
c0024aae:	83 ec 28             	sub    esp,0x28
c0024ab1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024ab5:	6a 0c                	push   0xc
c0024ab7:	6a 00                	push   0x0
c0024ab9:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024abd:	56                   	push   esi
c0024abe:	e8 01 bc fd ff       	call   c00006c4 <memset>
c0024ac3:	58                   	pop    eax
c0024ac4:	5a                   	pop    edx
c0024ac5:	6a 00                	push   0x0
c0024ac7:	6a 00                	push   0x0
c0024ac9:	6a 00                	push   0x0
c0024acb:	6a 00                	push   0x0
c0024acd:	56                   	push   esi
c0024ace:	53                   	push   ebx
c0024acf:	e8 ae fb ff ff       	call   c0024682 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024ad4:	83 c4 1c             	add    esp,0x1c
c0024ad7:	6a 0c                	push   0xc
c0024ad9:	6a 00                	push   0x0
c0024adb:	56                   	push   esi
c0024adc:	e8 e3 bb fd ff       	call   c00006c4 <memset>
c0024ae1:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024ae6:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024aeb:	59                   	pop    ecx
c0024aec:	58                   	pop    eax
c0024aed:	6a 01                	push   0x1
c0024aef:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024af3:	50                   	push   eax
c0024af4:	6a 00                	push   0x0
c0024af6:	6a 12                	push   0x12
c0024af8:	56                   	push   esi
c0024af9:	53                   	push   ebx
c0024afa:	e8 83 fb ff ff       	call   c0024682 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024aff:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024b03:	83 c4 20             	add    esp,0x20
c0024b06:	83 e0 7f             	and    eax,0x7f
c0024b09:	3c 70                	cmp    al,0x70
c0024b0b:	74 15                	je     c0024b22 <ATAPI::detectMedia()+0x76>
c0024b0d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024b14:	75 0c                	jne    c0024b22 <ATAPI::detectMedia()+0x76>
c0024b16:	83 ec 0c             	sub    esp,0xc
c0024b19:	53                   	push   ebx
c0024b1a:	e8 5f ff ff ff       	call   c0024a7e <ATAPI::diskInserted()>
c0024b1f:	83 c4 10             	add    esp,0x10
c0024b22:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024b26:	83 e0 0f             	and    eax,0xf
c0024b29:	3c 02                	cmp    al,0x2
c0024b2b:	75 1b                	jne    c0024b48 <ATAPI::detectMedia()+0x9c>
c0024b2d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024b32:	75 2d                	jne    c0024b61 <ATAPI::detectMedia()+0xb5>
c0024b34:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024b3b:	74 24                	je     c0024b61 <ATAPI::detectMedia()+0xb5>
c0024b3d:	83 ec 0c             	sub    esp,0xc
c0024b40:	53                   	push   ebx
c0024b41:	e8 1c ff ff ff       	call   c0024a62 <ATAPI::diskRemoved()>
c0024b46:	eb 16                	jmp    c0024b5e <ATAPI::detectMedia()+0xb2>
c0024b48:	84 c0                	test   al,al
c0024b4a:	75 15                	jne    c0024b61 <ATAPI::detectMedia()+0xb5>
c0024b4c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024b53:	75 0c                	jne    c0024b61 <ATAPI::detectMedia()+0xb5>
c0024b55:	83 ec 0c             	sub    esp,0xc
c0024b58:	53                   	push   ebx
c0024b59:	e8 20 ff ff ff       	call   c0024a7e <ATAPI::diskInserted()>
c0024b5e:	83 c4 10             	add    esp,0x10
c0024b61:	83 c4 24             	add    esp,0x24
c0024b64:	5b                   	pop    ebx
c0024b65:	5e                   	pop    esi
c0024b66:	c3                   	ret    
c0024b67:	90                   	nop

c0024b68 <ATAPI::read(unsigned long long, int, void*)>:
c0024b68:	55                   	push   ebp
c0024b69:	57                   	push   edi
c0024b6a:	56                   	push   esi
c0024b6b:	53                   	push   ebx
c0024b6c:	83 ec 1c             	sub    esp,0x1c
c0024b6f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024b73:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024b77:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024b7b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024b82:	74 41                	je     c0024bc5 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024b84:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024b88:	b9 03 00 00 00       	mov    ecx,0x3
c0024b8d:	fc                   	cld    
c0024b8e:	31 c0                	xor    eax,eax
c0024b90:	86 fb                	xchg   bl,bh
c0024b92:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024b94:	c1 c3 10             	rol    ebx,0x10
c0024b97:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024b9c:	89 e8                	mov    eax,ebp
c0024b9e:	86 fb                	xchg   bl,bh
c0024ba0:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024ba4:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024ba8:	50                   	push   eax
c0024ba9:	50                   	push   eax
c0024baa:	55                   	push   ebp
c0024bab:	c1 e5 0b             	shl    ebp,0xb
c0024bae:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024bb2:	6a 00                	push   0x0
c0024bb4:	55                   	push   ebp
c0024bb5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024bb9:	50                   	push   eax
c0024bba:	56                   	push   esi
c0024bbb:	e8 c2 fa ff ff       	call   c0024682 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024bc0:	83 c4 20             	add    esp,0x20
c0024bc3:	eb 1a                	jmp    c0024bdf <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024bc5:	83 ec 0c             	sub    esp,0xc
c0024bc8:	56                   	push   esi
c0024bc9:	e8 de fe ff ff       	call   c0024aac <ATAPI::detectMedia()>
c0024bce:	83 c4 10             	add    esp,0x10
c0024bd1:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024bd8:	75 aa                	jne    c0024b84 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024bda:	b8 02 00 00 00       	mov    eax,0x2
c0024bdf:	83 c4 1c             	add    esp,0x1c
c0024be2:	5b                   	pop    ebx
c0024be3:	5e                   	pop    esi
c0024be4:	5f                   	pop    edi
c0024be5:	5d                   	pop    ebp
c0024be6:	c3                   	ret    
c0024be7:	90                   	nop

c0024be8 <ATAPI::write(unsigned long long, int, void*)>:
c0024be8:	b8 03 00 00 00       	mov    eax,0x3
c0024bed:	c3                   	ret    

c0024bee <ATAPI::close(int, int, void*)>:
c0024bee:	83 ec 0c             	sub    esp,0xc
c0024bf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024bf5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024bfb:	85 c0                	test   eax,eax
c0024bfd:	74 0c                	je     c0024c0b <ATAPI::close(int, int, void*)+0x1d>
c0024bff:	83 ec 0c             	sub    esp,0xc
c0024c02:	8b 10                	mov    edx,DWORD PTR [eax]
c0024c04:	50                   	push   eax
c0024c05:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024c08:	83 c4 10             	add    esp,0x10
c0024c0b:	31 c0                	xor    eax,eax
c0024c0d:	83 c4 0c             	add    esp,0xc
c0024c10:	c3                   	ret    
c0024c11:	90                   	nop

c0024c12 <SATA::SATA()>:
c0024c12:	83 ec 0c             	sub    esp,0xc
c0024c15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c19:	83 ec 04             	sub    esp,0x4
c0024c1c:	68 00 02 00 00       	push   0x200
c0024c21:	68 0c f8 02 c0       	push   0xc002f80c
c0024c26:	50                   	push   eax
c0024c27:	e8 52 fe fe ff       	call   c0014a7e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024c2c:	83 c4 10             	add    esp,0x10
c0024c2f:	ba 58 f8 02 c0       	mov    edx,0xc002f858
c0024c34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c38:	89 10                	mov    DWORD PTR [eax],edx
c0024c3a:	90                   	nop
c0024c3b:	83 c4 0c             	add    esp,0xc
c0024c3e:	c3                   	ret    
c0024c3f:	90                   	nop

c0024c40 <SATA::open(int, int, void*)>:
c0024c40:	56                   	push   esi
c0024c41:	53                   	push   ebx
c0024c42:	50                   	push   eax
c0024c43:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024c47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c4b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024c55:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024c5b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024c65:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024c69:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024c73:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024c79:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024c80:	e8 74 b9 fe ff       	call   c00105f9 <Phys::allocatePage()>
c0024c85:	89 c6                	mov    esi,eax
c0024c87:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024c8d:	81 c6 00 10 00 00    	add    esi,0x1000
c0024c93:	e8 61 b9 fe ff       	call   c00105f9 <Phys::allocatePage()>
c0024c98:	39 c6                	cmp    esi,eax
c0024c9a:	74 10                	je     c0024cac <SATA::open(int, int, void*)+0x6c>
c0024c9c:	83 ec 0c             	sub    esp,0xc
c0024c9f:	68 1c f8 02 c0       	push   0xc002f81c
c0024ca4:	e8 52 5b ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c0024ca9:	83 c4 10             	add    esp,0x10
c0024cac:	83 ec 0c             	sub    esp,0xc
c0024caf:	6a 02                	push   0x2
c0024cb1:	e8 99 d5 fe ff       	call   c001224f <Virt::allocateKernelVirtualPages(int)>
c0024cb6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024cbc:	e8 41 d8 fe ff       	call   c0012502 <Virt::getAKernelVAS()>
c0024cc1:	6a 03                	push   0x3
c0024cc3:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024cc9:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024ccf:	50                   	push   eax
c0024cd0:	e8 4f e2 fe ff       	call   c0012f24 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024cd5:	83 c4 14             	add    esp,0x14
c0024cd8:	53                   	push   ebx
c0024cd9:	e8 08 fe fe ff       	call   c0014ae6 <PhysicalDisk::startCache()>
c0024cde:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024ce1:	e8 36 1f ff ff       	call   c0016c1c <createPartitionsForDisk(PhysicalDisk*)>
c0024ce6:	83 c4 14             	add    esp,0x14
c0024ce9:	31 c0                	xor    eax,eax
c0024ceb:	5b                   	pop    ebx
c0024cec:	5e                   	pop    esi
c0024ced:	c3                   	ret    

c0024cee <SATA::access(unsigned long long, int, void*, bool)>:
c0024cee:	55                   	push   ebp
c0024cef:	57                   	push   edi
c0024cf0:	56                   	push   esi
c0024cf1:	53                   	push   ebx
c0024cf2:	83 ec 2c             	sub    esp,0x2c
c0024cf5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0024cf9:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0024cfd:	89 04 24             	mov    DWORD PTR [esp],eax
c0024d00:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024d04:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024d08:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0024d0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024d10:	0f b6 5c 24 0c       	movzx  ebx,BYTE PTR [esp+0xc]
c0024d15:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024d1a:	7e 33                	jle    c0024d4f <SATA::access(unsigned long long, int, void*, bool)+0x61>
c0024d1c:	57                   	push   edi
c0024d1d:	57                   	push   edi
c0024d1e:	53                   	push   ebx
c0024d1f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024d23:	6a 10                	push   0x10
c0024d25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024d29:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024d2d:	55                   	push   ebp
c0024d2e:	e8 bb ff ff ff       	call   c0024cee <SATA::access(unsigned long long, int, void*, bool)>
c0024d33:	83 6c 24 6c 10       	sub    DWORD PTR [esp+0x6c],0x10
c0024d38:	83 44 24 20 10       	add    DWORD PTR [esp+0x20],0x10
c0024d3d:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0024d42:	81 44 24 70 00 20 00 00 	add    DWORD PTR [esp+0x70],0x2000
c0024d4a:	83 c4 20             	add    esp,0x20
c0024d4d:	eb c6                	jmp    c0024d15 <SATA::access(unsigned long long, int, void*, bool)+0x27>
c0024d4f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0024d52:	8b 9d 6c 01 00 00    	mov    ebx,DWORD PTR [ebp+0x16c]
c0024d58:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024d5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024d60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024d64:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024d6a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024d70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024d74:	89 d8                	mov    eax,ebx
c0024d76:	c1 e0 07             	shl    eax,0x7
c0024d79:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024d7d:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024d87:	56                   	push   esi
c0024d88:	8d 43 02             	lea    eax,[ebx+0x2]
c0024d8b:	56                   	push   esi
c0024d8c:	c1 e0 07             	shl    eax,0x7
c0024d8f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024d93:	50                   	push   eax
c0024d94:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024d9a:	e8 c3 ef ff ff       	call   c0023d62 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024d9f:	ba 01 00 00 00       	mov    edx,0x1
c0024da4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024da8:	83 c4 10             	add    esp,0x10
c0024dab:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024db0:	0f 84 dd 01 00 00    	je     c0024f93 <SATA::access(unsigned long long, int, void*, bool)+0x2a5>
c0024db6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024dba:	c1 e0 09             	shl    eax,0x9
c0024dbd:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024dc2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024dc6:	74 17                	je     c0024ddf <SATA::access(unsigned long long, int, void*, bool)+0xf1>
c0024dc8:	51                   	push   ecx
c0024dc9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024dcd:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024dd1:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024dd7:	e8 c4 b8 fd ff       	call   c00006a0 <memcpy>
c0024ddc:	83 c4 10             	add    esp,0x10
c0024ddf:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024de5:	8d 43 02             	lea    eax,[ebx+0x2]
c0024de8:	c1 e0 07             	shl    eax,0x7
c0024deb:	89 de                	mov    esi,ebx
c0024ded:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024df1:	8b 00                	mov    eax,DWORD PTR [eax]
c0024df3:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024df9:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024dff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024e03:	c1 e1 05             	shl    ecx,0x5
c0024e06:	01 c8                	add    eax,ecx
c0024e08:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0024e0c:	8b 38                	mov    edi,DWORD PTR [eax]
c0024e0e:	83 e1 01             	and    ecx,0x1
c0024e11:	83 e7 bf             	and    edi,0xffffffbf
c0024e14:	c1 e1 06             	shl    ecx,0x6
c0024e17:	09 f9                	or     ecx,edi
c0024e19:	88 08                	mov    BYTE PTR [eax],cl
c0024e1b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024e1d:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024e23:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024e29:	89 08                	mov    DWORD PTR [eax],ecx
c0024e2b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e31:	8b b9 58 01 00 00    	mov    edi,DWORD PTR [ecx+0x158]
c0024e37:	2b b9 5c 01 00 00    	sub    edi,DWORD PTR [ecx+0x15c]
c0024e3d:	03 78 08             	add    edi,DWORD PTR [eax+0x8]
c0024e40:	52                   	push   edx
c0024e41:	68 90 00 00 00       	push   0x90
c0024e46:	6a 00                	push   0x0
c0024e48:	57                   	push   edi
c0024e49:	e8 76 b8 fd ff       	call   c00006c4 <memset>
c0024e4e:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024e54:	c6 47 07 40          	mov    BYTE PTR [edi+0x7],0x40
c0024e58:	89 87 80 00 00 00    	mov    DWORD PTR [edi+0x80],eax
c0024e5e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024e62:	83 c4 10             	add    esp,0x10
c0024e65:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024e68:	8b 87 8c 00 00 00    	mov    eax,DWORD PTR [edi+0x8c]
c0024e6e:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024e74:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024e79:	09 c8                	or     eax,ecx
c0024e7b:	89 87 8c 00 00 00    	mov    DWORD PTR [edi+0x8c],eax
c0024e81:	66 8b 07             	mov    ax,WORD PTR [edi]
c0024e84:	80 8f 8f 00 00 00 80 	or     BYTE PTR [edi+0x8f],0x80
c0024e8b:	66 25 00 7f          	and    ax,0x7f00
c0024e8f:	66 0d 27 80          	or     ax,0x8027
c0024e93:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0024e98:	66 89 07             	mov    WORD PTR [edi],ax
c0024e9b:	19 c0                	sbb    eax,eax
c0024e9d:	c1 e6 07             	shl    esi,0x7
c0024ea0:	83 e0 f0             	and    eax,0xfffffff0
c0024ea3:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0024ea7:	83 c0 35             	add    eax,0x35
c0024eaa:	88 47 02             	mov    BYTE PTR [edi+0x2],al
c0024ead:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0024eb0:	66 89 47 04          	mov    WORD PTR [edi+0x4],ax
c0024eb4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024eb8:	c1 e8 10             	shr    eax,0x10
c0024ebb:	88 47 06             	mov    BYTE PTR [edi+0x6],al
c0024ebe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024ec2:	c1 e8 18             	shr    eax,0x18
c0024ec5:	88 47 08             	mov    BYTE PTR [edi+0x8],al
c0024ec8:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024ecc:	88 47 09             	mov    BYTE PTR [edi+0x9],al
c0024ecf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024ed3:	88 67 0a             	mov    BYTE PTR [edi+0xa],ah
c0024ed6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024eda:	66 89 47 0c          	mov    WORD PTR [edi+0xc],ax
c0024ede:	31 c0                	xor    eax,eax
c0024ee0:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0024ee6:	80 e1 88             	and    cl,0x88
c0024ee9:	74 0a                	je     c0024ef5 <SATA::access(unsigned long long, int, void*, bool)+0x207>
c0024eeb:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024ef0:	74 0a                	je     c0024efc <SATA::access(unsigned long long, int, void*, bool)+0x20e>
c0024ef2:	40                   	inc    eax
c0024ef3:	eb eb                	jmp    c0024ee0 <SATA::access(unsigned long long, int, void*, bool)+0x1f2>
c0024ef5:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024efa:	75 0a                	jne    c0024f06 <SATA::access(unsigned long long, int, void*, bool)+0x218>
c0024efc:	83 ec 0c             	sub    esp,0xc
c0024eff:	68 30 f8 02 c0       	push   0xc002f830
c0024f04:	eb 56                	jmp    c0024f5c <SATA::access(unsigned long long, int, void*, bool)+0x26e>
c0024f06:	b8 01 00 00 00       	mov    eax,0x1
c0024f0b:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024f0f:	c1 e3 07             	shl    ebx,0x7
c0024f12:	d3 e0                	shl    eax,cl
c0024f14:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0024f18:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0024f1e:	8b 8b 38 01 00 00    	mov    ecx,DWORD PTR [ebx+0x138]
c0024f24:	85 c8                	test   eax,ecx
c0024f26:	74 20                	je     c0024f48 <SATA::access(unsigned long long, int, void*, bool)+0x25a>
c0024f28:	8b 8b 10 01 00 00    	mov    ecx,DWORD PTR [ebx+0x110]
c0024f2e:	0f ba e1 1e          	bt     ecx,0x1e
c0024f32:	73 ea                	jae    c0024f1e <SATA::access(unsigned long long, int, void*, bool)+0x230>
c0024f34:	83 ec 0c             	sub    esp,0xc
c0024f37:	68 3e f8 02 c0       	push   0xc002f83e
c0024f3c:	e8 ba 58 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c0024f41:	83 c4 10             	add    esp,0x10
c0024f44:	31 d2                	xor    edx,edx
c0024f46:	eb 4b                	jmp    c0024f93 <SATA::access(unsigned long long, int, void*, bool)+0x2a5>
c0024f48:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c0024f4e:	0f ba e0 1e          	bt     eax,0x1e
c0024f52:	73 17                	jae    c0024f6b <SATA::access(unsigned long long, int, void*, bool)+0x27d>
c0024f54:	83 ec 0c             	sub    esp,0xc
c0024f57:	68 3e f8 02 c0       	push   0xc002f83e
c0024f5c:	e8 9a 58 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c0024f61:	83 c4 10             	add    esp,0x10
c0024f64:	ba 01 00 00 00       	mov    edx,0x1
c0024f69:	eb 28                	jmp    c0024f93 <SATA::access(unsigned long long, int, void*, bool)+0x2a5>
c0024f6b:	31 d2                	xor    edx,edx
c0024f6d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024f72:	75 1f                	jne    c0024f93 <SATA::access(unsigned long long, int, void*, bool)+0x2a5>
c0024f74:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0024f78:	50                   	push   eax
c0024f79:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024f7d:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024f83:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024f87:	e8 14 b7 fd ff       	call   c00006a0 <memcpy>
c0024f8c:	83 c4 10             	add    esp,0x10
c0024f8f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0024f93:	83 c4 2c             	add    esp,0x2c
c0024f96:	89 d0                	mov    eax,edx
c0024f98:	5b                   	pop    ebx
c0024f99:	5e                   	pop    esi
c0024f9a:	5f                   	pop    edi
c0024f9b:	5d                   	pop    ebp
c0024f9c:	c3                   	ret    
c0024f9d:	90                   	nop

c0024f9e <SATA::read(unsigned long long, int, void*)>:
c0024f9e:	57                   	push   edi
c0024f9f:	b8 04 00 00 00       	mov    eax,0x4
c0024fa4:	56                   	push   esi
c0024fa5:	53                   	push   ebx
c0024fa6:	83 ec 10             	sub    esp,0x10
c0024fa9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024fad:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024fb1:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024fb4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024fb8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024fbc:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024fc2:	77 3b                	ja     c0024fff <SATA::read(unsigned long long, int, void*)+0x61>
c0024fc4:	b8 06 00 00 00       	mov    eax,0x6
c0024fc9:	85 d2                	test   edx,edx
c0024fcb:	74 32                	je     c0024fff <SATA::read(unsigned long long, int, void*)+0x61>
c0024fcd:	50                   	push   eax
c0024fce:	50                   	push   eax
c0024fcf:	6a 00                	push   0x0
c0024fd1:	52                   	push   edx
c0024fd2:	53                   	push   ebx
c0024fd3:	57                   	push   edi
c0024fd4:	56                   	push   esi
c0024fd5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024fd9:	e8 10 fd ff ff       	call   c0024cee <SATA::access(unsigned long long, int, void*, bool)>
c0024fde:	83 c4 20             	add    esp,0x20
c0024fe1:	85 c0                	test   eax,eax
c0024fe3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024fe7:	75 11                	jne    c0024ffa <SATA::read(unsigned long long, int, void*)+0x5c>
c0024fe9:	01 1d 80 56 03 c0    	add    DWORD PTR ds:0xc0035680,ebx
c0024fef:	e8 3e c6 fe ff       	call   c0011632 <VgaText::updateDiskUsage()>
c0024ff4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024ff8:	eb 05                	jmp    c0024fff <SATA::read(unsigned long long, int, void*)+0x61>
c0024ffa:	b8 01 00 00 00       	mov    eax,0x1
c0024fff:	83 c4 10             	add    esp,0x10
c0025002:	5b                   	pop    ebx
c0025003:	5e                   	pop    esi
c0025004:	5f                   	pop    edi
c0025005:	c3                   	ret    

c0025006 <SATA::write(unsigned long long, int, void*)>:
c0025006:	57                   	push   edi
c0025007:	b8 04 00 00 00       	mov    eax,0x4
c002500c:	56                   	push   esi
c002500d:	53                   	push   ebx
c002500e:	83 ec 10             	sub    esp,0x10
c0025011:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025015:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0025019:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002501c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0025020:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0025024:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002502a:	77 3b                	ja     c0025067 <SATA::write(unsigned long long, int, void*)+0x61>
c002502c:	b8 06 00 00 00       	mov    eax,0x6
c0025031:	85 d2                	test   edx,edx
c0025033:	74 32                	je     c0025067 <SATA::write(unsigned long long, int, void*)+0x61>
c0025035:	50                   	push   eax
c0025036:	50                   	push   eax
c0025037:	6a 01                	push   0x1
c0025039:	52                   	push   edx
c002503a:	53                   	push   ebx
c002503b:	57                   	push   edi
c002503c:	56                   	push   esi
c002503d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025041:	e8 a8 fc ff ff       	call   c0024cee <SATA::access(unsigned long long, int, void*, bool)>
c0025046:	83 c4 20             	add    esp,0x20
c0025049:	85 c0                	test   eax,eax
c002504b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002504f:	75 11                	jne    c0025062 <SATA::write(unsigned long long, int, void*)+0x5c>
c0025051:	01 1d 84 56 03 c0    	add    DWORD PTR ds:0xc0035684,ebx
c0025057:	e8 d6 c5 fe ff       	call   c0011632 <VgaText::updateDiskUsage()>
c002505c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025060:	eb 05                	jmp    c0025067 <SATA::write(unsigned long long, int, void*)+0x61>
c0025062:	b8 01 00 00 00       	mov    eax,0x1
c0025067:	83 c4 10             	add    esp,0x10
c002506a:	5b                   	pop    ebx
c002506b:	5e                   	pop    esi
c002506c:	5f                   	pop    edi
c002506d:	c3                   	ret    

c002506e <SATA::close(int, int, void*)>:
c002506e:	83 ec 0c             	sub    esp,0xc
c0025071:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025075:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002507b:	85 c0                	test   eax,eax
c002507d:	74 0c                	je     c002508b <SATA::close(int, int, void*)+0x1d>
c002507f:	83 ec 0c             	sub    esp,0xc
c0025082:	8b 10                	mov    edx,DWORD PTR [eax]
c0025084:	50                   	push   eax
c0025085:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025088:	83 c4 10             	add    esp,0x10
c002508b:	31 c0                	xor    eax,eax
c002508d:	83 c4 0c             	add    esp,0xc
c0025090:	c3                   	ret    
c0025091:	90                   	nop

c0025092 <SATA::powerSaving(PowerSavingLevel)>:
c0025092:	c3                   	ret    
c0025093:	90                   	nop

c0025094 <SATAPI::SATAPI()>:
c0025094:	83 ec 0c             	sub    esp,0xc
c0025097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002509b:	83 ec 04             	sub    esp,0x4
c002509e:	68 00 08 00 00       	push   0x800
c00250a3:	68 28 f9 02 c0       	push   0xc002f928
c00250a8:	50                   	push   eax
c00250a9:	e8 d0 f9 fe ff       	call   c0014a7e <PhysicalDisk::PhysicalDisk(char const*, int)>
c00250ae:	83 c4 10             	add    esp,0x10
c00250b1:	ba 6c fa 02 c0       	mov    edx,0xc002fa6c
c00250b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250ba:	89 10                	mov    DWORD PTR [eax],edx
c00250bc:	90                   	nop
c00250bd:	83 c4 0c             	add    esp,0xc
c00250c0:	c3                   	ret    
c00250c1:	90                   	nop

c00250c2 <SATAPI::diskRemoved()>:
c00250c2:	83 ec 18             	sub    esp,0x18
c00250c5:	68 34 f9 02 c0       	push   0xc002f934
c00250ca:	e8 77 e1 fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00250cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00250d3:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c00250da:	83 c4 1c             	add    esp,0x1c
c00250dd:	c3                   	ret    

c00250de <SATAPI::diskInserted()>:
c00250de:	53                   	push   ebx
c00250df:	83 ec 14             	sub    esp,0x14
c00250e2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00250e6:	68 4b f9 02 c0       	push   0xc002f94b
c00250eb:	e8 56 e1 fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00250f0:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c00250f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00250fa:	e8 e7 f9 fe ff       	call   c0014ae6 <PhysicalDisk::startCache()>
c00250ff:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025103:	83 c4 18             	add    esp,0x18
c0025106:	5b                   	pop    ebx
c0025107:	e9 10 1b ff ff       	jmp    c0016c1c <createPartitionsForDisk(PhysicalDisk*)>

c002510c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002510c:	55                   	push   ebp
c002510d:	57                   	push   edi
c002510e:	56                   	push   esi
c002510f:	53                   	push   ebx
c0025110:	83 ec 38             	sub    esp,0x38
c0025113:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c0025117:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c002511b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c002511f:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0025123:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0025127:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c002512b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c002512f:	52                   	push   edx
c0025130:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0025134:	55                   	push   ebp
c0025135:	68 63 f9 02 c0       	push   0xc002f963
c002513a:	e8 07 e1 fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c002513f:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c0025145:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c002514b:	8d 5f 02             	lea    ebx,[edi+0x2]
c002514e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025154:	c1 e3 07             	shl    ebx,0x7
c0025157:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c002515b:	89 f8                	mov    eax,edi
c002515d:	c1 e0 07             	shl    eax,0x7
c0025160:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
c0025164:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0025168:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025172:	83 c4 18             	add    esp,0x18
c0025175:	03 5c 24 14          	add    ebx,DWORD PTR [esp+0x14]
c0025179:	53                   	push   ebx
c002517a:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c0025180:	e8 dd eb ff ff       	call   c0023d62 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025185:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025189:	83 c4 10             	add    esp,0x10
c002518c:	b8 01 00 00 00       	mov    eax,0x1
c0025191:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025196:	0f 84 c6 01 00 00    	je     c0025362 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x256>
c002519c:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00251a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00251a4:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00251aa:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00251b0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00251b4:	c1 e1 05             	shl    ecx,0x5
c00251b7:	01 c8                	add    eax,ecx
c00251b9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00251bb:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00251c1:	81 c9 25 00 01 00    	or     ecx,0x10025
c00251c7:	89 08                	mov    DWORD PTR [eax],ecx
c00251c9:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00251cf:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00251d5:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00251db:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00251de:	50                   	push   eax
c00251df:	68 90 00 00 00       	push   0x90
c00251e4:	6a 00                	push   0x0
c00251e6:	53                   	push   ebx
c00251e7:	e8 d8 b4 fd ff       	call   c00006c4 <memset>
c00251ec:	c7 04 24 9d f9 02 c0 	mov    DWORD PTR [esp],0xc002f99d
c00251f3:	e8 4e e0 fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00251f8:	83 c4 0c             	add    esp,0xc
c00251fb:	8d 43 40             	lea    eax,[ebx+0x40]
c00251fe:	6a 0c                	push   0xc
c0025200:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0025204:	50                   	push   eax
c0025205:	e8 96 b4 fd ff       	call   c00006a0 <memcpy>
c002520a:	c7 04 24 a7 f9 02 c0 	mov    DWORD PTR [esp],0xc002f9a7
c0025211:	e8 30 e0 fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0025216:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c002521c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002521f:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025225:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c002522b:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025231:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025235:	25 00 00 c0 ff       	and    eax,0xffc00000
c002523a:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002523e:	09 c8                	or     eax,ecx
c0025240:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025246:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025249:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025250:	66 25 00 7f          	and    ax,0x7f00
c0025254:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0025258:	66 0d 27 80          	or     ax,0x8027
c002525c:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0025260:	66 89 03             	mov    WORD PTR [ebx],ax
c0025263:	89 d0                	mov    eax,edx
c0025265:	c1 ea 18             	shr    edx,0x18
c0025268:	c1 e8 10             	shr    eax,0x10
c002526b:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c002526e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025271:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0025275:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025278:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002527c:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002527f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0025283:	83 c4 10             	add    esp,0x10
c0025286:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002528a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002528e:	31 c0                	xor    eax,eax
c0025290:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0025296:	80 e1 88             	and    cl,0x88
c0025299:	74 0a                	je     c00252a5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x199>
c002529b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00252a0:	74 0a                	je     c00252ac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1a0>
c00252a2:	40                   	inc    eax
c00252a3:	eb eb                	jmp    c0025290 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x184>
c00252a5:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00252aa:	75 0f                	jne    c00252bb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c00252ac:	83 ec 0c             	sub    esp,0xc
c00252af:	68 30 f8 02 c0       	push   0xc002f830
c00252b4:	e8 42 55 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c00252b9:	eb 3b                	jmp    c00252f6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ea>
c00252bb:	b8 01 00 00 00       	mov    eax,0x1
c00252c0:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00252c4:	c1 e7 07             	shl    edi,0x7
c00252c7:	d3 e0                	shl    eax,cl
c00252c9:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00252cd:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c00252d3:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c00252d9:	85 d0                	test   eax,edx
c00252db:	74 23                	je     c0025300 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f4>
c00252dd:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c00252e3:	0f ba e2 1e          	bt     edx,0x1e
c00252e7:	73 ea                	jae    c00252d3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c7>
c00252e9:	83 ec 0c             	sub    esp,0xc
c00252ec:	68 b2 f9 02 c0       	push   0xc002f9b2
c00252f1:	e8 50 df fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00252f6:	83 c4 10             	add    esp,0x10
c00252f9:	b8 01 00 00 00       	mov    eax,0x1
c00252fe:	eb 62                	jmp    c0025362 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x256>
c0025300:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0025306:	0f ba e0 1e          	bt     eax,0x1e
c002530a:	73 0a                	jae    c0025316 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20a>
c002530c:	83 ec 0c             	sub    esp,0xc
c002530f:	68 c5 f9 02 c0       	push   0xc002f9c5
c0025314:	eb db                	jmp    c00252f1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e5>
c0025316:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c002531b:	74 33                	je     c0025350 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x244>
c002531d:	85 ed                	test   ebp,ebp
c002531f:	74 2f                	je     c0025350 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x244>
c0025321:	83 ec 0c             	sub    esp,0xc
c0025324:	68 da f9 02 c0       	push   0xc002f9da
c0025329:	e8 18 df fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c002532e:	83 c4 0c             	add    esp,0xc
c0025331:	55                   	push   ebp
c0025332:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0025338:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c002533c:	e8 5f b3 fd ff       	call   c00006a0 <memcpy>
c0025341:	c7 04 24 e4 f9 02 c0 	mov    DWORD PTR [esp],0xc002f9e4
c0025348:	e8 f9 de fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c002534d:	83 c4 10             	add    esp,0x10
c0025350:	83 ec 0c             	sub    esp,0xc
c0025353:	68 ef f9 02 c0       	push   0xc002f9ef
c0025358:	e8 e9 de fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c002535d:	83 c4 10             	add    esp,0x10
c0025360:	31 c0                	xor    eax,eax
c0025362:	83 c4 2c             	add    esp,0x2c
c0025365:	5b                   	pop    ebx
c0025366:	5e                   	pop    esi
c0025367:	5f                   	pop    edi
c0025368:	5d                   	pop    ebp
c0025369:	c3                   	ret    

c002536a <SATAPI::open(int, int, void*)>:
c002536a:	56                   	push   esi
c002536b:	53                   	push   ebx
c002536c:	50                   	push   eax
c002536d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025371:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025375:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002537f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025385:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002538f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025393:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002539d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00253a3:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00253aa:	e8 4a b2 fe ff       	call   c00105f9 <Phys::allocatePage()>
c00253af:	89 c6                	mov    esi,eax
c00253b1:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00253b7:	81 c6 00 10 00 00    	add    esi,0x1000
c00253bd:	e8 37 b2 fe ff       	call   c00105f9 <Phys::allocatePage()>
c00253c2:	39 c6                	cmp    esi,eax
c00253c4:	74 10                	je     c00253d6 <SATAPI::open(int, int, void*)+0x6c>
c00253c6:	83 ec 0c             	sub    esp,0xc
c00253c9:	68 04 fa 02 c0       	push   0xc002fa04
c00253ce:	e8 28 54 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c00253d3:	83 c4 10             	add    esp,0x10
c00253d6:	83 ec 0c             	sub    esp,0xc
c00253d9:	6a 02                	push   0x2
c00253db:	e8 6f ce fe ff       	call   c001224f <Virt::allocateKernelVirtualPages(int)>
c00253e0:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00253e6:	e8 17 d1 fe ff       	call   c0012502 <Virt::getAKernelVAS()>
c00253eb:	6a 03                	push   0x3
c00253ed:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00253f3:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00253f9:	50                   	push   eax
c00253fa:	e8 25 db fe ff       	call   c0012f24 <VAS::mapPage(unsigned long, unsigned long, int)>
c00253ff:	83 c4 14             	add    esp,0x14
c0025402:	68 1a fa 02 c0       	push   0xc002fa1a
c0025407:	e8 3a de fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c002540c:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025413:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025416:	e8 d5 00 00 00       	call   c00254f0 <SATAPI::detectMedia()>
c002541b:	83 c4 14             	add    esp,0x14
c002541e:	31 c0                	xor    eax,eax
c0025420:	5b                   	pop    ebx
c0025421:	5e                   	pop    esi
c0025422:	c3                   	ret    
c0025423:	90                   	nop

c0025424 <SATAPI::read(unsigned long long, int, void*)>:
c0025424:	55                   	push   ebp
c0025425:	57                   	push   edi
c0025426:	56                   	push   esi
c0025427:	53                   	push   ebx
c0025428:	83 ec 1c             	sub    esp,0x1c
c002542b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002542f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025433:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025437:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002543e:	74 19                	je     c0025459 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025440:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025445:	7e 2e                	jle    c0025475 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025447:	83 ec 0c             	sub    esp,0xc
c002544a:	68 37 fa 02 c0       	push   0xc002fa37
c002544f:	e8 a7 53 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c0025454:	83 c4 10             	add    esp,0x10
c0025457:	eb 1c                	jmp    c0025475 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025459:	83 ec 0c             	sub    esp,0xc
c002545c:	55                   	push   ebp
c002545d:	e8 8e 00 00 00       	call   c00254f0 <SATAPI::detectMedia()>
c0025462:	83 c4 10             	add    esp,0x10
c0025465:	b8 02 00 00 00       	mov    eax,0x2
c002546a:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025471:	75 cd                	jne    c0025440 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025473:	eb 49                	jmp    c00254be <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025475:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025479:	b9 03 00 00 00       	mov    ecx,0x3
c002547e:	fc                   	cld    
c002547f:	31 c0                	xor    eax,eax
c0025481:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025483:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025488:	89 d8                	mov    eax,ebx
c002548a:	86 e0                	xchg   al,ah
c002548c:	c1 c0 10             	rol    eax,0x10
c002548f:	86 e0                	xchg   al,ah
c0025491:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025495:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025499:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002549d:	50                   	push   eax
c002549e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00254a2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00254a6:	56                   	push   esi
c00254a7:	53                   	push   ebx
c00254a8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00254ac:	c1 e0 0b             	shl    eax,0xb
c00254af:	50                   	push   eax
c00254b0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00254b4:	50                   	push   eax
c00254b5:	55                   	push   ebp
c00254b6:	e8 51 fc ff ff       	call   c002510c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00254bb:	83 c4 20             	add    esp,0x20
c00254be:	83 c4 1c             	add    esp,0x1c
c00254c1:	5b                   	pop    ebx
c00254c2:	5e                   	pop    esi
c00254c3:	5f                   	pop    edi
c00254c4:	5d                   	pop    ebp
c00254c5:	c3                   	ret    

c00254c6 <SATAPI::write(unsigned long long, int, void*)>:
c00254c6:	b8 03 00 00 00       	mov    eax,0x3
c00254cb:	c3                   	ret    

c00254cc <SATAPI::close(int, int, void*)>:
c00254cc:	83 ec 0c             	sub    esp,0xc
c00254cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254d3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00254d9:	85 c0                	test   eax,eax
c00254db:	74 0c                	je     c00254e9 <SATAPI::close(int, int, void*)+0x1d>
c00254dd:	83 ec 0c             	sub    esp,0xc
c00254e0:	8b 10                	mov    edx,DWORD PTR [eax]
c00254e2:	50                   	push   eax
c00254e3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00254e6:	83 c4 10             	add    esp,0x10
c00254e9:	31 c0                	xor    eax,eax
c00254eb:	83 c4 0c             	add    esp,0xc
c00254ee:	c3                   	ret    
c00254ef:	90                   	nop

c00254f0 <SATAPI::detectMedia()>:
c00254f0:	56                   	push   esi
c00254f1:	53                   	push   ebx
c00254f2:	83 ec 28             	sub    esp,0x28
c00254f5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00254f9:	6a 0c                	push   0xc
c00254fb:	6a 00                	push   0x0
c00254fd:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025501:	56                   	push   esi
c0025502:	e8 bd b1 fd ff       	call   c00006c4 <memset>
c0025507:	83 c4 0c             	add    esp,0xc
c002550a:	6a 00                	push   0x0
c002550c:	6a 00                	push   0x0
c002550e:	6a 00                	push   0x0
c0025510:	6a 00                	push   0x0
c0025512:	6a 00                	push   0x0
c0025514:	56                   	push   esi
c0025515:	53                   	push   ebx
c0025516:	e8 f1 fb ff ff       	call   c002510c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002551b:	83 c4 1c             	add    esp,0x1c
c002551e:	6a 0c                	push   0xc
c0025520:	6a 00                	push   0x0
c0025522:	56                   	push   esi
c0025523:	e8 9c b1 fd ff       	call   c00006c4 <memset>
c0025528:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002552d:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025532:	83 c4 0c             	add    esp,0xc
c0025535:	6a 01                	push   0x1
c0025537:	8d 44 24 16          	lea    eax,[esp+0x16]
c002553b:	50                   	push   eax
c002553c:	6a 00                	push   0x0
c002553e:	6a 00                	push   0x0
c0025540:	6a 12                	push   0x12
c0025542:	56                   	push   esi
c0025543:	53                   	push   ebx
c0025544:	e8 c3 fb ff ff       	call   c002510c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025549:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002554d:	83 c4 20             	add    esp,0x20
c0025550:	83 e0 7f             	and    eax,0x7f
c0025553:	3c 70                	cmp    al,0x70
c0025555:	74 15                	je     c002556c <SATAPI::detectMedia()+0x7c>
c0025557:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002555e:	75 0c                	jne    c002556c <SATAPI::detectMedia()+0x7c>
c0025560:	83 ec 0c             	sub    esp,0xc
c0025563:	53                   	push   ebx
c0025564:	e8 75 fb ff ff       	call   c00250de <SATAPI::diskInserted()>
c0025569:	83 c4 10             	add    esp,0x10
c002556c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025570:	83 e0 0f             	and    eax,0xf
c0025573:	3c 02                	cmp    al,0x2
c0025575:	75 1b                	jne    c0025592 <SATAPI::detectMedia()+0xa2>
c0025577:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002557c:	75 2d                	jne    c00255ab <SATAPI::detectMedia()+0xbb>
c002557e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025585:	74 24                	je     c00255ab <SATAPI::detectMedia()+0xbb>
c0025587:	83 ec 0c             	sub    esp,0xc
c002558a:	53                   	push   ebx
c002558b:	e8 32 fb ff ff       	call   c00250c2 <SATAPI::diskRemoved()>
c0025590:	eb 16                	jmp    c00255a8 <SATAPI::detectMedia()+0xb8>
c0025592:	84 c0                	test   al,al
c0025594:	75 15                	jne    c00255ab <SATAPI::detectMedia()+0xbb>
c0025596:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002559d:	75 0c                	jne    c00255ab <SATAPI::detectMedia()+0xbb>
c002559f:	83 ec 0c             	sub    esp,0xc
c00255a2:	53                   	push   ebx
c00255a3:	e8 36 fb ff ff       	call   c00250de <SATAPI::diskInserted()>
c00255a8:	83 c4 10             	add    esp,0x10
c00255ab:	83 c4 24             	add    esp,0x24
c00255ae:	5b                   	pop    ebx
c00255af:	5e                   	pop    esi
c00255b0:	c3                   	ret    
c00255b1:	90                   	nop

c00255b2 <SATAPI::eject()>:
c00255b2:	57                   	push   edi
c00255b3:	b9 03 00 00 00       	mov    ecx,0x3
c00255b8:	53                   	push   ebx
c00255b9:	83 ec 14             	sub    esp,0x14
c00255bc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00255c0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00255c4:	fc                   	cld    
c00255c5:	31 c0                	xor    eax,eax
c00255c7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00255c9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00255ce:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00255d3:	50                   	push   eax
c00255d4:	6a 00                	push   0x0
c00255d6:	6a 00                	push   0x0
c00255d8:	6a 00                	push   0x0
c00255da:	6a 00                	push   0x0
c00255dc:	6a 02                	push   0x2
c00255de:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00255e2:	50                   	push   eax
c00255e3:	53                   	push   ebx
c00255e4:	e8 23 fb ff ff       	call   c002510c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00255e9:	83 c4 14             	add    esp,0x14
c00255ec:	53                   	push   ebx
c00255ed:	e8 d0 fa ff ff       	call   c00250c2 <SATAPI::diskRemoved()>
c00255f2:	83 c4 24             	add    esp,0x24
c00255f5:	31 c0                	xor    eax,eax
c00255f7:	5b                   	pop    ebx
c00255f8:	5f                   	pop    edi
c00255f9:	c3                   	ret    

c00255fa <AVX::AVX()>:
c00255fa:	83 ec 0c             	sub    esp,0xc
c00255fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025601:	83 ec 08             	sub    esp,0x8
c0025604:	68 3c fb 02 c0       	push   0xc002fb3c
c0025609:	50                   	push   eax
c002560a:	e8 61 f5 fe ff       	call   c0014b70 <FPU::FPU(char const*)>
c002560f:	83 c4 10             	add    esp,0x10
c0025612:	ba 4c fb 02 c0       	mov    edx,0xc002fb4c
c0025617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002561b:	89 10                	mov    DWORD PTR [eax],edx
c002561d:	90                   	nop
c002561e:	83 c4 0c             	add    esp,0xc
c0025621:	c3                   	ret    

c0025622 <AVX::open(int, int, void*)>:
c0025622:	83 ec 0c             	sub    esp,0xc
c0025625:	e8 1e 11 00 00       	call   c0026748 <avxInit>
c002562a:	b8 00 00 00 00       	mov    eax,0x0
c002562f:	83 c4 0c             	add    esp,0xc
c0025632:	c3                   	ret    
c0025633:	90                   	nop

c0025634 <AVX::close(int, int, void*)>:
c0025634:	83 ec 0c             	sub    esp,0xc
c0025637:	e8 0d 11 00 00       	call   c0026749 <avxClose>
c002563c:	b8 00 00 00 00       	mov    eax,0x0
c0025641:	83 c4 0c             	add    esp,0xc
c0025644:	c3                   	ret    
c0025645:	90                   	nop

c0025646 <AVX::available()>:
c0025646:	83 ec 0c             	sub    esp,0xc
c0025649:	e8 f2 10 00 00       	call   c0026740 <avxDetect>
c002564e:	85 c0                	test   eax,eax
c0025650:	0f 95 c0             	setne  al
c0025653:	83 c4 0c             	add    esp,0xc
c0025656:	c3                   	ret    
c0025657:	90                   	nop

c0025658 <AVX::save(void*)>:
c0025658:	83 ec 0c             	sub    esp,0xc
c002565b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002565f:	83 ec 0c             	sub    esp,0xc
c0025662:	50                   	push   eax
c0025663:	e8 de 10 00 00       	call   c0026746 <avxSave>
c0025668:	83 c4 10             	add    esp,0x10
c002566b:	90                   	nop
c002566c:	83 c4 0c             	add    esp,0xc
c002566f:	c3                   	ret    

c0025670 <AVX::load(void*)>:
c0025670:	83 ec 0c             	sub    esp,0xc
c0025673:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025677:	83 ec 0c             	sub    esp,0xc
c002567a:	50                   	push   eax
c002567b:	e8 c7 10 00 00       	call   c0026747 <avxLoad>
c0025680:	83 c4 10             	add    esp,0x10
c0025683:	90                   	nop
c0025684:	83 c4 0c             	add    esp,0xc
c0025687:	c3                   	ret    

c0025688 <MMX::MMX()>:
c0025688:	83 ec 0c             	sub    esp,0xc
c002568b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002568f:	83 ec 08             	sub    esp,0x8
c0025692:	68 1c fc 02 c0       	push   0xc002fc1c
c0025697:	50                   	push   eax
c0025698:	e8 d3 f4 fe ff       	call   c0014b70 <FPU::FPU(char const*)>
c002569d:	83 c4 10             	add    esp,0x10
c00256a0:	ba 2c fc 02 c0       	mov    edx,0xc002fc2c
c00256a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256a9:	89 10                	mov    DWORD PTR [eax],edx
c00256ab:	90                   	nop
c00256ac:	83 c4 0c             	add    esp,0xc
c00256af:	c3                   	ret    

c00256b0 <MMX::open(int, int, void*)>:
c00256b0:	83 ec 0c             	sub    esp,0xc
c00256b3:	e8 14 11 00 00       	call   c00267cc <x87Init>
c00256b8:	b8 00 00 00 00       	mov    eax,0x0
c00256bd:	83 c4 0c             	add    esp,0xc
c00256c0:	c3                   	ret    
c00256c1:	90                   	nop

c00256c2 <MMX::close(int, int, void*)>:
c00256c2:	83 ec 0c             	sub    esp,0xc
c00256c5:	e8 1c 11 00 00       	call   c00267e6 <x87Close>
c00256ca:	b8 00 00 00 00       	mov    eax,0x0
c00256cf:	83 c4 0c             	add    esp,0xc
c00256d2:	c3                   	ret    
c00256d3:	90                   	nop

c00256d4 <MMX::available()>:
c00256d4:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c00256d9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00256df:	83 e0 20             	and    eax,0x20
c00256e2:	84 c0                	test   al,al
c00256e4:	0f 95 c0             	setne  al
c00256e7:	c3                   	ret    

c00256e8 <MMX::save(void*)>:
c00256e8:	83 ec 0c             	sub    esp,0xc
c00256eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256ef:	83 ec 0c             	sub    esp,0xc
c00256f2:	50                   	push   eax
c00256f3:	e8 c9 10 00 00       	call   c00267c1 <x87Save>
c00256f8:	83 c4 10             	add    esp,0x10
c00256fb:	90                   	nop
c00256fc:	83 c4 0c             	add    esp,0xc
c00256ff:	c3                   	ret    

c0025700 <MMX::load(void*)>:
c0025700:	83 ec 0c             	sub    esp,0xc
c0025703:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025707:	83 ec 0c             	sub    esp,0xc
c002570a:	50                   	push   eax
c002570b:	e8 b7 10 00 00       	call   c00267c7 <x87Load>
c0025710:	83 c4 10             	add    esp,0x10
c0025713:	90                   	nop
c0025714:	83 c4 0c             	add    esp,0xc
c0025717:	c3                   	ret    

c0025718 <SSE::SSE()>:
c0025718:	83 ec 0c             	sub    esp,0xc
c002571b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002571f:	83 ec 08             	sub    esp,0x8
c0025722:	68 fc fc 02 c0       	push   0xc002fcfc
c0025727:	50                   	push   eax
c0025728:	e8 43 f4 fe ff       	call   c0014b70 <FPU::FPU(char const*)>
c002572d:	83 c4 10             	add    esp,0x10
c0025730:	ba 0c fd 02 c0       	mov    edx,0xc002fd0c
c0025735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025739:	89 10                	mov    DWORD PTR [eax],edx
c002573b:	90                   	nop
c002573c:	83 c4 0c             	add    esp,0xc
c002573f:	c3                   	ret    

c0025740 <SSE::open(int, int, void*)>:
c0025740:	83 ec 0c             	sub    esp,0xc
c0025743:	e8 3c 10 00 00       	call   c0026784 <sseInit>
c0025748:	b8 00 00 00 00       	mov    eax,0x0
c002574d:	83 c4 0c             	add    esp,0xc
c0025750:	c3                   	ret    
c0025751:	90                   	nop

c0025752 <SSE::close(int, int, void*)>:
c0025752:	83 ec 0c             	sub    esp,0xc
c0025755:	e8 3a 10 00 00       	call   c0026794 <sseClose>
c002575a:	b8 00 00 00 00       	mov    eax,0x0
c002575f:	83 c4 0c             	add    esp,0xc
c0025762:	c3                   	ret    
c0025763:	90                   	nop

c0025764 <SSE::available()>:
c0025764:	83 ec 1c             	sub    esp,0x1c
c0025767:	e8 f4 0f 00 00       	call   c0026760 <absolutelyNoChanceInHell>
c002576c:	85 c0                	test   eax,eax
c002576e:	0f 95 c0             	setne  al
c0025771:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025775:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025779:	83 c4 1c             	add    esp,0x1c
c002577c:	c3                   	ret    
c002577d:	90                   	nop

c002577e <SSE::save(void*)>:
c002577e:	83 ec 0c             	sub    esp,0xc
c0025781:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025785:	83 ec 0c             	sub    esp,0xc
c0025788:	50                   	push   eax
c0025789:	e8 ea 0f 00 00       	call   c0026778 <sseSave>
c002578e:	83 c4 10             	add    esp,0x10
c0025791:	90                   	nop
c0025792:	83 c4 0c             	add    esp,0xc
c0025795:	c3                   	ret    

c0025796 <SSE::load(void*)>:
c0025796:	83 ec 0c             	sub    esp,0xc
c0025799:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002579d:	83 ec 0c             	sub    esp,0xc
c00257a0:	50                   	push   eax
c00257a1:	e8 d8 0f 00 00       	call   c002677e <sseLoad>
c00257a6:	83 c4 10             	add    esp,0x10
c00257a9:	90                   	nop
c00257aa:	83 c4 0c             	add    esp,0xc
c00257ad:	c3                   	ret    

c00257ae <x87::x87()>:
c00257ae:	83 ec 0c             	sub    esp,0xc
c00257b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257b5:	83 ec 08             	sub    esp,0x8
c00257b8:	68 dc fd 02 c0       	push   0xc002fddc
c00257bd:	50                   	push   eax
c00257be:	e8 ad f3 fe ff       	call   c0014b70 <FPU::FPU(char const*)>
c00257c3:	83 c4 10             	add    esp,0x10
c00257c6:	ba ec fd 02 c0       	mov    edx,0xc002fdec
c00257cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257cf:	89 10                	mov    DWORD PTR [eax],edx
c00257d1:	90                   	nop
c00257d2:	83 c4 0c             	add    esp,0xc
c00257d5:	c3                   	ret    

c00257d6 <x87::open(int, int, void*)>:
c00257d6:	83 ec 0c             	sub    esp,0xc
c00257d9:	e8 ee 0f 00 00       	call   c00267cc <x87Init>
c00257de:	b8 00 00 00 00       	mov    eax,0x0
c00257e3:	83 c4 0c             	add    esp,0xc
c00257e6:	c3                   	ret    
c00257e7:	90                   	nop

c00257e8 <x87::close(int, int, void*)>:
c00257e8:	83 ec 0c             	sub    esp,0xc
c00257eb:	e8 f6 0f 00 00       	call   c00267e6 <x87Close>
c00257f0:	b8 00 00 00 00       	mov    eax,0x0
c00257f5:	83 c4 0c             	add    esp,0xc
c00257f8:	c3                   	ret    
c00257f9:	90                   	nop

c00257fa <x87::available()>:
c00257fa:	83 ec 0c             	sub    esp,0xc
c00257fd:	e8 a4 0f 00 00       	call   c00267a6 <x87Detect>
c0025802:	85 c0                	test   eax,eax
c0025804:	0f 95 c0             	setne  al
c0025807:	83 c4 0c             	add    esp,0xc
c002580a:	c3                   	ret    
c002580b:	90                   	nop

c002580c <x87::save(void*)>:
c002580c:	83 ec 0c             	sub    esp,0xc
c002580f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025813:	83 ec 0c             	sub    esp,0xc
c0025816:	50                   	push   eax
c0025817:	e8 a5 0f 00 00       	call   c00267c1 <x87Save>
c002581c:	83 c4 10             	add    esp,0x10
c002581f:	90                   	nop
c0025820:	83 c4 0c             	add    esp,0xc
c0025823:	c3                   	ret    

c0025824 <x87::load(void*)>:
c0025824:	83 ec 0c             	sub    esp,0xc
c0025827:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002582b:	83 ec 0c             	sub    esp,0xc
c002582e:	50                   	push   eax
c002582f:	e8 93 0f 00 00       	call   c00267c7 <x87Load>
c0025834:	83 c4 10             	add    esp,0x10
c0025837:	90                   	nop
c0025838:	83 c4 0c             	add    esp,0xc
c002583b:	c3                   	ret    

c002583c <APIC::APIC()>:
c002583c:	53                   	push   ebx
c002583d:	83 ec 18             	sub    esp,0x18
c0025840:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025844:	83 ec 08             	sub    esp,0x8
c0025847:	68 bc fe 02 c0       	push   0xc002febc
c002584c:	50                   	push   eax
c002584d:	e8 50 f7 fe ff       	call   c0014fa2 <InterruptController::InterruptController(char const*)>
c0025852:	83 c4 10             	add    esp,0x10
c0025855:	ba cc ff 02 c0       	mov    edx,0xc002ffcc
c002585a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002585e:	89 10                	mov    DWORD PTR [eax],edx
c0025860:	a0 a0 56 03 c0       	mov    al,ds:0xc00356a0
c0025865:	83 f0 01             	xor    eax,0x1
c0025868:	84 c0                	test   al,al
c002586a:	0f 84 a1 00 00 00    	je     c0025911 <APIC::APIC()+0xd5>
c0025870:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025875:	a0 80 3b 03 c0       	mov    al,ds:0xc0033b80
c002587a:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c002587e:	0f 83 86 00 00 00    	jae    c002590a <APIC::APIC()+0xce>
c0025884:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c002588c:	83 ec 0c             	sub    esp,0xc
c002588f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025893:	e8 c4 a6 fe ff       	call   c000ff5c <malloc>
c0025898:	83 c4 10             	add    esp,0x10
c002589b:	89 c3                	mov    ebx,eax
c002589d:	83 ec 0c             	sub    esp,0xc
c00258a0:	53                   	push   ebx
c00258a1:	e8 10 04 00 00       	call   c0025cb6 <IOAPIC::IOAPIC()>
c00258a6:	83 c4 10             	add    esp,0x10
c00258a9:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00258ad:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00258b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00258b6:	89 14 85 c0 56 03 c0 	mov    DWORD PTR [eax*4-0x3ffca940],edx
c00258bd:	a1 e0 56 03 c0       	mov    eax,ds:0xc00356e0
c00258c2:	40                   	inc    eax
c00258c3:	a3 e0 56 03 c0       	mov    ds:0xc00356e0,eax
c00258c8:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c00258cd:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00258d3:	83 ec 08             	sub    esp,0x8
c00258d6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00258da:	50                   	push   eax
c00258db:	e8 66 ee fe ff       	call   c0014746 <Device::addChild(Device*)>
c00258e0:	83 c4 10             	add    esp,0x10
c00258e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00258e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00258e9:	83 c0 08             	add    eax,0x8
c00258ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00258ee:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00258f3:	6a 00                	push   0x0
c00258f5:	6a 00                	push   0x0
c00258f7:	52                   	push   edx
c00258f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00258fc:	ff d0                	call   eax
c00258fe:	83 c4 10             	add    esp,0x10
c0025901:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025905:	e9 6b ff ff ff       	jmp    c0025875 <APIC::APIC()+0x39>
c002590a:	c6 05 a0 56 03 c0 01 	mov    BYTE PTR ds:0xc00356a0,0x1
c0025911:	90                   	nop
c0025912:	83 c4 18             	add    esp,0x18
c0025915:	5b                   	pop    ebx
c0025916:	c3                   	ret    
c0025917:	90                   	nop

c0025918 <APIC::io_wait()>:
c0025918:	eb 00                	jmp    c002591a <APIC::io_wait()+0x2>
c002591a:	eb 00                	jmp    c002591c <APIC::io_wait()+0x4>
c002591c:	90                   	nop
c002591d:	c3                   	ret    

c002591e <APIC::disable()>:
c002591e:	90                   	nop
c002591f:	c3                   	ret    

c0025920 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025920:	55                   	push   ebp
c0025921:	89 e5                	mov    ebp,esp
c0025923:	57                   	push   edi
c0025924:	56                   	push   esi
c0025925:	53                   	push   ebx
c0025926:	83 ec 2c             	sub    esp,0x2c
c0025929:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002592c:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002592f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025933:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025937:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002593b:	74 5a                	je     c0025997 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002593d:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025941:	7f 44                	jg     c0025987 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025943:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025946:	05 00 06 03 c0       	add    eax,0xc0030600
c002594b:	8a 00                	mov    al,BYTE PTR [eax]
c002594d:	0f b6 c0             	movzx  eax,al
c0025950:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025953:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025956:	66 8b 84 00 a0 3b 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcc460]
c002595e:	0f b7 c0             	movzx  eax,ax
c0025961:	83 e0 02             	and    eax,0x2
c0025964:	85 c0                	test   eax,eax
c0025966:	74 04                	je     c002596c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025968:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c002596c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002596f:	66 8b 84 00 a0 3b 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcc460]
c0025977:	0f b7 c0             	movzx  eax,ax
c002597a:	83 e0 08             	and    eax,0x8
c002597d:	85 c0                	test   eax,eax
c002597f:	74 16                	je     c0025997 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025981:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025985:	eb 10                	jmp    c0025997 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025987:	83 ec 0c             	sub    esp,0xc
c002598a:	68 e8 fe 02 c0       	push   0xc002fee8
c002598f:	e8 67 4e ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c0025994:	83 c4 10             	add    esp,0x10
c0025997:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c002599b:	a1 e0 56 03 c0       	mov    eax,ds:0xc00356e0
c00259a0:	83 ec 08             	sub    esp,0x8
c00259a3:	50                   	push   eax
c00259a4:	68 20 ff 02 c0       	push   0xc002ff20
c00259a9:	e8 98 d8 fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c00259ae:	83 c4 10             	add    esp,0x10
c00259b1:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00259b8:	a1 e0 56 03 c0       	mov    eax,ds:0xc00356e0
c00259bd:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00259c0:	7d 67                	jge    c0025a29 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00259c2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00259c5:	8b 04 85 c0 56 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca940]
c00259cc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00259cf:	83 ec 08             	sub    esp,0x8
c00259d2:	52                   	push   edx
c00259d3:	50                   	push   eax
c00259d4:	e8 05 03 00 00       	call   c0025cde <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00259d9:	83 c4 10             	add    esp,0x10
c00259dc:	84 c0                	test   al,al
c00259de:	74 44                	je     c0025a24 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00259e0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00259e3:	8b 0c 85 c0 56 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffca940]
c00259ea:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00259ee:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00259f1:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00259f5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00259f8:	83 c0 20             	add    eax,0x20
c00259fb:	0f b6 f0             	movzx  esi,al
c00259fe:	b8 00 00 00 00       	mov    eax,0x0
c0025a03:	99                   	cdq    
c0025a04:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025a07:	0f b6 db             	movzx  ebx,bl
c0025a0a:	83 ec 04             	sub    esp,0x4
c0025a0d:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025a10:	57                   	push   edi
c0025a11:	56                   	push   esi
c0025a12:	52                   	push   edx
c0025a13:	50                   	push   eax
c0025a14:	53                   	push   ebx
c0025a15:	51                   	push   ecx
c0025a16:	e8 3f 04 00 00       	call   c0025e5a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025a1b:	83 c4 20             	add    esp,0x20
c0025a1e:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025a22:	eb 05                	jmp    c0025a29 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025a24:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025a27:	eb 8f                	jmp    c00259b8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025a29:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025a2c:	83 f0 01             	xor    eax,0x1
c0025a2f:	84 c0                	test   al,al
c0025a31:	74 10                	je     c0025a43 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025a33:	83 ec 0c             	sub    esp,0xc
c0025a36:	68 37 ff 02 c0       	push   0xc002ff37
c0025a3b:	e8 bb 4d ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c0025a40:	83 c4 10             	add    esp,0x10
c0025a43:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025a47:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025a4e:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025a52:	7f 65                	jg     c0025ab9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025a54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a57:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a5a:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025a61:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025a64:	01 ca                	add    edx,ecx
c0025a66:	83 c2 54             	add    edx,0x54
c0025a69:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025a6d:	85 c0                	test   eax,eax
c0025a6f:	75 43                	jne    c0025ab4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025a71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a74:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a77:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025a7e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025a81:	01 ca                	add    edx,ecx
c0025a83:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025a86:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025a89:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025a8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a90:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a93:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025a9a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025a9d:	01 ca                	add    edx,ecx
c0025a9f:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025aa5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025aa8:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025aac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025aaf:	83 e8 20             	sub    eax,0x20
c0025ab2:	eb 1a                	jmp    c0025ace <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025ab4:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025ab7:	eb 95                	jmp    c0025a4e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025ab9:	83 ec 0c             	sub    esp,0xc
c0025abc:	68 44 ff 02 c0       	push   0xc002ff44
c0025ac1:	e8 35 4d ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c0025ac6:	83 c4 10             	add    esp,0x10
c0025ac9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025ace:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025ad1:	5b                   	pop    ebx
c0025ad2:	5e                   	pop    esi
c0025ad3:	5f                   	pop    edi
c0025ad4:	5d                   	pop    ebp
c0025ad5:	c3                   	ret    

c0025ad6 <APIC::eoi(unsigned char)>:
c0025ad6:	55                   	push   ebp
c0025ad7:	89 e5                	mov    ebp,esp
c0025ad9:	83 ec 28             	sub    esp,0x28
c0025adc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025adf:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025ae2:	83 ec 0c             	sub    esp,0xc
c0025ae5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ae8:	e8 17 00 00 00       	call   c0025b04 <APIC::getBase()>
c0025aed:	83 c4 10             	add    esp,0x10
c0025af0:	05 b0 00 00 00       	add    eax,0xb0
c0025af5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025af8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025afb:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025b01:	90                   	nop
c0025b02:	c9                   	leave  
c0025b03:	c3                   	ret    

c0025b04 <APIC::getBase()>:
c0025b04:	55                   	push   ebp
c0025b05:	89 e5                	mov    ebp,esp
c0025b07:	83 ec 18             	sub    esp,0x18
c0025b0a:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0025b0f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025b15:	83 e0 08             	and    eax,0x8
c0025b18:	84 c0                	test   al,al
c0025b1a:	75 07                	jne    c0025b23 <APIC::getBase()+0x1f>
c0025b1c:	b8 00 00 00 00       	mov    eax,0x0
c0025b21:	eb 21                	jmp    c0025b44 <APIC::getBase()+0x40>
c0025b23:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0025b28:	83 ec 08             	sub    esp,0x8
c0025b2b:	6a 1b                	push   0x1b
c0025b2d:	50                   	push   eax
c0025b2e:	e8 71 99 fe ff       	call   c000f4a4 <Computer::rdmsr(unsigned int)>
c0025b33:	83 c4 10             	add    esp,0x10
c0025b36:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025b39:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025b3c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025b3f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025b44:	c9                   	leave  
c0025b45:	c3                   	ret    

c0025b46 <APIC::open(int, int, void*)>:
c0025b46:	55                   	push   ebp
c0025b47:	89 e5                	mov    ebp,esp
c0025b49:	57                   	push   edi
c0025b4a:	56                   	push   esi
c0025b4b:	53                   	push   ebx
c0025b4c:	83 ec 2c             	sub    esp,0x2c
c0025b4f:	83 ec 0c             	sub    esp,0xc
c0025b52:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b55:	e8 aa ff ff ff       	call   c0025b04 <APIC::getBase()>
c0025b5a:	83 c4 10             	add    esp,0x10
c0025b5d:	89 c2                	mov    edx,eax
c0025b5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b62:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b68:	0f b6 f8             	movzx  edi,al
c0025b6b:	89 d0                	mov    eax,edx
c0025b6d:	ba 00 00 00 00       	mov    edx,0x0
c0025b72:	89 c1                	mov    ecx,eax
c0025b74:	80 e5 ff             	and    ch,0xff
c0025b77:	89 cb                	mov    ebx,ecx
c0025b79:	0f b6 f2             	movzx  esi,dl
c0025b7c:	89 d8                	mov    eax,ebx
c0025b7e:	89 f2                	mov    edx,esi
c0025b80:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025b83:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025b86:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025b8a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025b8e:	83 e0 00             	and    eax,0x0
c0025b91:	09 d0                	or     eax,edx
c0025b93:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025b97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b9a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025ba0:	8d 50 01             	lea    edx,[eax+0x1]
c0025ba3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025ba6:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025bac:	0f b6 d0             	movzx  edx,al
c0025baf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bb2:	83 c2 08             	add    edx,0x8
c0025bb5:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025bb9:	0f b6 c9             	movzx  ecx,cl
c0025bbc:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025bc2:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025bc6:	83 ec 0c             	sub    esp,0xc
c0025bc9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bcc:	e8 33 ff ff ff       	call   c0025b04 <APIC::getBase()>
c0025bd1:	83 c4 10             	add    esp,0x10
c0025bd4:	05 f0 00 00 00       	add    eax,0xf0
c0025bd9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025bdc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025bdf:	8b 00                	mov    eax,DWORD PTR [eax]
c0025be1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025be4:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025beb:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025bf2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025bf5:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025bf8:	89 10                	mov    DWORD PTR [eax],edx
c0025bfa:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025c01:	a1 40 3c 03 c0       	mov    eax,ds:0xc0033c40
c0025c06:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025c09:	7d 7c                	jge    c0025c87 <APIC::open(int, int, void*)+0x141>
c0025c0b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025c0e:	8b 04 85 c0 3b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcc440]
c0025c15:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025c18:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025c1b:	8b 04 85 c0 3b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcc440]
c0025c22:	c1 e8 08             	shr    eax,0x8
c0025c25:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025c29:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025c2c:	8b 04 85 c0 3b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcc440]
c0025c33:	c1 e8 18             	shr    eax,0x18
c0025c36:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025c39:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025c3d:	75 40                	jne    c0025c7f <APIC::open(int, int, void*)+0x139>
c0025c3f:	83 ec 0c             	sub    esp,0xc
c0025c42:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c45:	e8 ba fe ff ff       	call   c0025b04 <APIC::getBase()>
c0025c4a:	83 c4 10             	add    esp,0x10
c0025c4d:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025c51:	75 07                	jne    c0025c5a <APIC::open(int, int, void*)+0x114>
c0025c53:	ba 60 03 00 00       	mov    edx,0x360
c0025c58:	eb 05                	jmp    c0025c5f <APIC::open(int, int, void*)+0x119>
c0025c5a:	ba 50 03 00 00       	mov    edx,0x350
c0025c5f:	01 d0                	add    eax,edx
c0025c61:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025c64:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025c67:	8b 00                	mov    eax,DWORD PTR [eax]
c0025c69:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025c6c:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025c73:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025c77:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025c7a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025c7d:	89 10                	mov    DWORD PTR [eax],edx
c0025c7f:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025c82:	e9 7a ff ff ff       	jmp    c0025c01 <APIC::open(int, int, void*)+0xbb>
c0025c87:	b8 00 00 00 00       	mov    eax,0x0
c0025c8c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025c8f:	5b                   	pop    ebx
c0025c90:	5e                   	pop    esi
c0025c91:	5f                   	pop    edi
c0025c92:	5d                   	pop    ebp
c0025c93:	c3                   	ret    

c0025c94 <APIC::close(int, int, void*)>:
c0025c94:	55                   	push   ebp
c0025c95:	89 e5                	mov    ebp,esp
c0025c97:	83 ec 08             	sub    esp,0x8
c0025c9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0025c9f:	83 c0 3c             	add    eax,0x3c
c0025ca2:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ca4:	83 ec 0c             	sub    esp,0xc
c0025ca7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025caa:	ff d0                	call   eax
c0025cac:	83 c4 10             	add    esp,0x10
c0025caf:	b8 00 00 00 00       	mov    eax,0x0
c0025cb4:	c9                   	leave  
c0025cb5:	c3                   	ret    

c0025cb6 <IOAPIC::IOAPIC()>:
c0025cb6:	83 ec 0c             	sub    esp,0xc
c0025cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cbd:	83 ec 08             	sub    esp,0x8
c0025cc0:	68 7c ff 02 c0       	push   0xc002ff7c
c0025cc5:	50                   	push   eax
c0025cc6:	e8 51 e8 fe ff       	call   c001451c <Device::Device(char const*)>
c0025ccb:	83 c4 10             	add    esp,0x10
c0025cce:	ba a0 ff 02 c0       	mov    edx,0xc002ffa0
c0025cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cd7:	89 10                	mov    DWORD PTR [eax],edx
c0025cd9:	90                   	nop
c0025cda:	83 c4 0c             	add    esp,0xc
c0025cdd:	c3                   	ret    

c0025cde <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025cde:	55                   	push   ebp
c0025cdf:	89 e5                	mov    ebp,esp
c0025ce1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ce4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025cea:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025ced:	72 1d                	jb     c0025d0c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025cef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025cf2:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025cf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025cfb:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025d01:	01 d0                	add    eax,edx
c0025d03:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025d06:	73 04                	jae    c0025d0c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025d08:	b0 01                	mov    al,0x1
c0025d0a:	eb 02                	jmp    c0025d0e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025d0c:	b0 00                	mov    al,0x0
c0025d0e:	5d                   	pop    ebp
c0025d0f:	c3                   	ret    

c0025d10 <IOAPIC::open(int, int, void*)>:
c0025d10:	55                   	push   ebp
c0025d11:	89 e5                	mov    ebp,esp
c0025d13:	57                   	push   edi
c0025d14:	56                   	push   esi
c0025d15:	53                   	push   ebx
c0025d16:	83 ec 0c             	sub    esp,0xc
c0025d19:	83 ec 0c             	sub    esp,0xc
c0025d1c:	68 84 ff 02 c0       	push   0xc002ff84
c0025d21:	e8 20 d5 fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0025d26:	83 c4 10             	add    esp,0x10
c0025d29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d2c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d2f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025d35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d38:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025d3e:	8b 14 85 e0 3a 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcc520]
c0025d45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d48:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025d4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d51:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025d57:	8b 14 85 60 3a 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcc5a0]
c0025d5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d61:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025d67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d6a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025d70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d73:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025d79:	0f b6 f8             	movzx  edi,al
c0025d7c:	89 d0                	mov    eax,edx
c0025d7e:	ba 00 00 00 00       	mov    edx,0x0
c0025d83:	89 c1                	mov    ecx,eax
c0025d85:	80 e5 ff             	and    ch,0xff
c0025d88:	89 cb                	mov    ebx,ecx
c0025d8a:	0f b6 f2             	movzx  esi,dl
c0025d8d:	89 d8                	mov    eax,ebx
c0025d8f:	89 f2                	mov    edx,esi
c0025d91:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025d94:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025d97:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025d9b:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025d9f:	83 e0 00             	and    eax,0x0
c0025da2:	09 d0                	or     eax,edx
c0025da4:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025da8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025dab:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025db1:	8d 50 01             	lea    edx,[eax+0x1]
c0025db4:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025db7:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025dbd:	0f b6 d0             	movzx  edx,al
c0025dc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025dc3:	83 c2 08             	add    edx,0x8
c0025dc6:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025dca:	0f b6 c9             	movzx  ecx,cl
c0025dcd:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025dd3:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025dd7:	83 ec 08             	sub    esp,0x8
c0025dda:	6a 01                	push   0x1
c0025ddc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ddf:	e8 22 00 00 00       	call   c0025e06 <IOAPIC::read(int)>
c0025de4:	83 c4 10             	add    esp,0x10
c0025de7:	c1 f8 10             	sar    eax,0x10
c0025dea:	0f b6 c0             	movzx  eax,al
c0025ded:	8d 50 01             	lea    edx,[eax+0x1]
c0025df0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025df3:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025df9:	b8 00 00 00 00       	mov    eax,0x0
c0025dfe:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025e01:	5b                   	pop    ebx
c0025e02:	5e                   	pop    esi
c0025e03:	5f                   	pop    edi
c0025e04:	5d                   	pop    ebp
c0025e05:	c3                   	ret    

c0025e06 <IOAPIC::read(int)>:
c0025e06:	55                   	push   ebp
c0025e07:	89 e5                	mov    ebp,esp
c0025e09:	83 ec 10             	sub    esp,0x10
c0025e0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e0f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025e15:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025e18:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e1b:	0f b6 d0             	movzx  edx,al
c0025e1e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025e21:	89 10                	mov    DWORD PTR [eax],edx
c0025e23:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025e26:	83 c0 10             	add    eax,0x10
c0025e29:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e2b:	c9                   	leave  
c0025e2c:	c3                   	ret    
c0025e2d:	90                   	nop

c0025e2e <IOAPIC::write(int, int)>:
c0025e2e:	55                   	push   ebp
c0025e2f:	89 e5                	mov    ebp,esp
c0025e31:	83 ec 10             	sub    esp,0x10
c0025e34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e37:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025e3d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025e40:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e43:	0f b6 d0             	movzx  edx,al
c0025e46:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025e49:	89 10                	mov    DWORD PTR [eax],edx
c0025e4b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025e4e:	8d 50 10             	lea    edx,[eax+0x10]
c0025e51:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025e54:	89 02                	mov    DWORD PTR [edx],eax
c0025e56:	90                   	nop
c0025e57:	c9                   	leave  
c0025e58:	c3                   	ret    
c0025e59:	90                   	nop

c0025e5a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025e5a:	55                   	push   ebp
c0025e5b:	89 e5                	mov    ebp,esp
c0025e5d:	53                   	push   ebx
c0025e5e:	83 ec 2c             	sub    esp,0x2c
c0025e61:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e64:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025e67:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025e6a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025e6d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025e70:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025e73:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025e76:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025e79:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025e7c:	88 d8                	mov    al,bl
c0025e7e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025e81:	88 c8                	mov    al,cl
c0025e83:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025e86:	88 d0                	mov    al,dl
c0025e88:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025e8b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025e8f:	83 c0 08             	add    eax,0x8
c0025e92:	01 c0                	add    eax,eax
c0025e94:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025e97:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025e9b:	83 c0 08             	add    eax,0x8
c0025e9e:	01 c0                	add    eax,eax
c0025ea0:	40                   	inc    eax
c0025ea1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025ea4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025ea7:	50                   	push   eax
c0025ea8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025eab:	e8 56 ff ff ff       	call   c0025e06 <IOAPIC::read(int)>
c0025eb0:	83 c4 08             	add    esp,0x8
c0025eb3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025eb6:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025ebd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025ec0:	c1 e0 18             	shl    eax,0x18
c0025ec3:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025ec6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025ec9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025ecc:	52                   	push   edx
c0025ecd:	50                   	push   eax
c0025ece:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ed1:	e8 58 ff ff ff       	call   c0025e2e <IOAPIC::write(int, int)>
c0025ed6:	83 c4 0c             	add    esp,0xc
c0025ed9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025edc:	50                   	push   eax
c0025edd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ee0:	e8 21 ff ff ff       	call   c0025e06 <IOAPIC::read(int)>
c0025ee5:	83 c4 08             	add    esp,0x8
c0025ee8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025eeb:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025ef2:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025ef9:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025f00:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025f04:	74 09                	je     c0025f0f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025f06:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025f0d:	eb 07                	jmp    c0025f16 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025f0f:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025f16:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025f1a:	74 09                	je     c0025f25 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025f1c:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025f23:	eb 07                	jmp    c0025f2c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025f25:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025f2c:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025f33:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025f37:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025f3a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025f3d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025f40:	52                   	push   edx
c0025f41:	50                   	push   eax
c0025f42:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f45:	e8 e4 fe ff ff       	call   c0025e2e <IOAPIC::write(int, int)>
c0025f4a:	83 c4 0c             	add    esp,0xc
c0025f4d:	90                   	nop
c0025f4e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025f51:	c9                   	leave  
c0025f52:	c3                   	ret    
c0025f53:	90                   	nop

c0025f54 <IOAPIC::close(int, int, void*)>:
c0025f54:	b8 00 00 00 00       	mov    eax,0x0
c0025f59:	c3                   	ret    

c0025f5a <PIC::PIC()>:
c0025f5a:	83 ec 0c             	sub    esp,0xc
c0025f5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f61:	83 ec 08             	sub    esp,0x8
c0025f64:	68 ac 00 03 c0       	push   0xc00300ac
c0025f69:	50                   	push   eax
c0025f6a:	e8 33 f0 fe ff       	call   c0014fa2 <InterruptController::InterruptController(char const*)>
c0025f6f:	83 c4 10             	add    esp,0x10
c0025f72:	ba d8 00 03 c0       	mov    edx,0xc00300d8
c0025f77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f7b:	89 10                	mov    DWORD PTR [eax],edx
c0025f7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f81:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f87:	0f b6 d0             	movzx  edx,al
c0025f8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f8e:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025f95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f99:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f9f:	0f b6 d0             	movzx  edx,al
c0025fa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fa6:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025fab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025faf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025fb5:	8d 50 01             	lea    edx,[eax+0x1]
c0025fb8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025fbc:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025fc2:	0f b6 d0             	movzx  edx,al
c0025fc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fc9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025fcd:	83 e1 3f             	and    ecx,0x3f
c0025fd0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025fd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fd8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025fde:	0f b6 d0             	movzx  edx,al
c0025fe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fe5:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ff0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ff6:	0f b6 d0             	movzx  edx,al
c0025ff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ffd:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026006:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002600c:	8d 50 01             	lea    edx,[eax+0x1]
c002600f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026013:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026019:	0f b6 d0             	movzx  edx,al
c002601c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026020:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026024:	83 e1 3f             	and    ecx,0x3f
c0026027:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002602b:	90                   	nop
c002602c:	83 c4 0c             	add    esp,0xc
c002602f:	c3                   	ret    

c0026030 <PIC::ioWait()>:
c0026030:	eb 00                	jmp    c0026032 <PIC::ioWait()+0x2>
c0026032:	eb 00                	jmp    c0026034 <PIC::ioWait()+0x4>
c0026034:	90                   	nop
c0026035:	c3                   	ret    

c0026036 <PIC::disable()>:
c0026036:	55                   	push   ebp
c0026037:	89 e5                	mov    ebp,esp
c0026039:	83 ec 10             	sub    esp,0x10
c002603c:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0026042:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0026046:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026049:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002604d:	ee                   	out    dx,al
c002604e:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0026054:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0026058:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002605b:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c002605f:	ee                   	out    dx,al
c0026060:	90                   	nop
c0026061:	c9                   	leave  
c0026062:	c3                   	ret    
c0026063:	90                   	nop

c0026064 <PIC::getIRQReg(int)>:
c0026064:	55                   	push   ebp
c0026065:	89 e5                	mov    ebp,esp
c0026067:	83 ec 10             	sub    esp,0x10
c002606a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002606d:	0f b6 c0             	movzx  eax,al
c0026070:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026076:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0026079:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002607c:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026080:	ee                   	out    dx,al
c0026081:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026084:	0f b6 c0             	movzx  eax,al
c0026087:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002608d:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0026090:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026093:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026097:	ee                   	out    dx,al
c0026098:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c002609e:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c00260a2:	89 c2                	mov    edx,eax
c00260a4:	ec                   	in     al,dx
c00260a5:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c00260a8:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00260ab:	0f b6 c0             	movzx  eax,al
c00260ae:	c1 e0 08             	shl    eax,0x8
c00260b1:	89 c1                	mov    ecx,eax
c00260b3:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00260b9:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00260bd:	89 c2                	mov    edx,eax
c00260bf:	ec                   	in     al,dx
c00260c0:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00260c3:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00260c6:	0f b6 c0             	movzx  eax,al
c00260c9:	09 c8                	or     eax,ecx
c00260cb:	c9                   	leave  
c00260cc:	c3                   	ret    
c00260cd:	90                   	nop

c00260ce <PIC::remap()>:
c00260ce:	55                   	push   ebp
c00260cf:	89 e5                	mov    ebp,esp
c00260d1:	83 ec 48             	sub    esp,0x48
c00260d4:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c00260db:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c00260e2:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c00260e8:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00260eb:	89 c2                	mov    edx,eax
c00260ed:	ec                   	in     al,dx
c00260ee:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c00260f1:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c00260f4:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00260f7:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c00260fd:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026100:	89 c2                	mov    edx,eax
c0026102:	ec                   	in     al,dx
c0026103:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026106:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026109:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c002610c:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0026112:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026116:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026119:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c002611c:	ee                   	out    dx,al
c002611d:	83 ec 0c             	sub    esp,0xc
c0026120:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026123:	e8 08 ff ff ff       	call   c0026030 <PIC::ioWait()>
c0026128:	83 c4 10             	add    esp,0x10
c002612b:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0026131:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026135:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026138:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002613b:	ee                   	out    dx,al
c002613c:	83 ec 0c             	sub    esp,0xc
c002613f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026142:	e8 e9 fe ff ff       	call   c0026030 <PIC::ioWait()>
c0026147:	83 c4 10             	add    esp,0x10
c002614a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002614d:	0f b6 c0             	movzx  eax,al
c0026150:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026156:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026159:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c002615c:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c002615f:	ee                   	out    dx,al
c0026160:	83 ec 0c             	sub    esp,0xc
c0026163:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026166:	e8 c5 fe ff ff       	call   c0026030 <PIC::ioWait()>
c002616b:	83 c4 10             	add    esp,0x10
c002616e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026171:	0f b6 c0             	movzx  eax,al
c0026174:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c002617a:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c002617d:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026180:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026183:	ee                   	out    dx,al
c0026184:	83 ec 0c             	sub    esp,0xc
c0026187:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002618a:	e8 a1 fe ff ff       	call   c0026030 <PIC::ioWait()>
c002618f:	83 c4 10             	add    esp,0x10
c0026192:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026198:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c002619c:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c002619f:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00261a2:	ee                   	out    dx,al
c00261a3:	83 ec 0c             	sub    esp,0xc
c00261a6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261a9:	e8 82 fe ff ff       	call   c0026030 <PIC::ioWait()>
c00261ae:	83 c4 10             	add    esp,0x10
c00261b1:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00261b7:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00261bb:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00261be:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00261c1:	ee                   	out    dx,al
c00261c2:	83 ec 0c             	sub    esp,0xc
c00261c5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261c8:	e8 63 fe ff ff       	call   c0026030 <PIC::ioWait()>
c00261cd:	83 c4 10             	add    esp,0x10
c00261d0:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00261d6:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00261da:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c00261dd:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00261e0:	ee                   	out    dx,al
c00261e1:	83 ec 0c             	sub    esp,0xc
c00261e4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261e7:	e8 44 fe ff ff       	call   c0026030 <PIC::ioWait()>
c00261ec:	83 c4 10             	add    esp,0x10
c00261ef:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c00261f5:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c00261f9:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c00261fc:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00261ff:	ee                   	out    dx,al
c0026200:	83 ec 0c             	sub    esp,0xc
c0026203:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026206:	e8 25 fe ff ff       	call   c0026030 <PIC::ioWait()>
c002620b:	83 c4 10             	add    esp,0x10
c002620e:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026212:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026218:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c002621b:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c002621e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026221:	ee                   	out    dx,al
c0026222:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026226:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c002622c:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c002622f:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026232:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026235:	ee                   	out    dx,al
c0026236:	90                   	nop
c0026237:	c9                   	leave  
c0026238:	c3                   	ret    
c0026239:	90                   	nop

c002623a <PIC::eoi(unsigned char)>:
c002623a:	55                   	push   ebp
c002623b:	89 e5                	mov    ebp,esp
c002623d:	83 ec 14             	sub    esp,0x14
c0026240:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026243:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0026246:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002624a:	75 1e                	jne    c002626a <PIC::eoi(unsigned char)+0x30>
c002624c:	6a 0b                	push   0xb
c002624e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026251:	e8 0e fe ff ff       	call   c0026064 <PIC::getIRQReg(int)>
c0026256:	83 c4 08             	add    esp,0x8
c0026259:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c002625d:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0026261:	25 80 00 00 00       	and    eax,0x80
c0026266:	85 c0                	test   eax,eax
c0026268:	74 5f                	je     c00262c9 <PIC::eoi(unsigned char)+0x8f>
c002626a:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c002626e:	75 2d                	jne    c002629d <PIC::eoi(unsigned char)+0x63>
c0026270:	6a 0b                	push   0xb
c0026272:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026275:	e8 ea fd ff ff       	call   c0026064 <PIC::getIRQReg(int)>
c002627a:	83 c4 08             	add    esp,0x8
c002627d:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026281:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026284:	66 85 c0             	test   ax,ax
c0026287:	78 14                	js     c002629d <PIC::eoi(unsigned char)+0x63>
c0026289:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c002628f:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026293:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026296:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002629a:	ee                   	out    dx,al
c002629b:	eb 2d                	jmp    c00262ca <PIC::eoi(unsigned char)+0x90>
c002629d:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00262a1:	76 12                	jbe    c00262b5 <PIC::eoi(unsigned char)+0x7b>
c00262a3:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00262a9:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00262ad:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00262b0:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00262b4:	ee                   	out    dx,al
c00262b5:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00262bb:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00262bf:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00262c2:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00262c6:	ee                   	out    dx,al
c00262c7:	eb 01                	jmp    c00262ca <PIC::eoi(unsigned char)+0x90>
c00262c9:	90                   	nop
c00262ca:	c9                   	leave  
c00262cb:	c3                   	ret    

c00262cc <PIC::open(int, int, void*)>:
c00262cc:	55                   	push   ebp
c00262cd:	89 e5                	mov    ebp,esp
c00262cf:	83 ec 18             	sub    esp,0x18
c00262d2:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00262d8:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00262dc:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00262df:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00262e3:	ee                   	out    dx,al
c00262e4:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00262ea:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00262ee:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00262f1:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00262f5:	ee                   	out    dx,al
c00262f6:	83 ec 0c             	sub    esp,0xc
c00262f9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00262fc:	e8 cd fd ff ff       	call   c00260ce <PIC::remap()>
c0026301:	83 c4 10             	add    esp,0x10
c0026304:	b8 00 00 00 00       	mov    eax,0x0
c0026309:	c9                   	leave  
c002630a:	c3                   	ret    
c002630b:	90                   	nop

c002630c <PIC::close(int, int, void*)>:
c002630c:	55                   	push   ebp
c002630d:	89 e5                	mov    ebp,esp
c002630f:	83 ec 08             	sub    esp,0x8
c0026312:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026315:	8b 00                	mov    eax,DWORD PTR [eax]
c0026317:	83 c0 3c             	add    eax,0x3c
c002631a:	8b 00                	mov    eax,DWORD PTR [eax]
c002631c:	83 ec 0c             	sub    esp,0xc
c002631f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026322:	ff d0                	call   eax
c0026324:	83 c4 10             	add    esp,0x10
c0026327:	b8 00 00 00 00       	mov    eax,0x0
c002632c:	c9                   	leave  
c002632d:	c3                   	ret    

c002632e <apicTimerHandler(regs*, void*)>:
c002632e:	83 ec 0c             	sub    esp,0xc
c0026331:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026335:	8b 00                	mov    eax,DWORD PTR [eax]
c0026337:	99                   	cdq    
c0026338:	52                   	push   edx
c0026339:	50                   	push   eax
c002633a:	6a 00                	push   0x0
c002633c:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026341:	e8 96 07 00 00       	call   c0026adc <__udivdi3>
c0026346:	83 c4 10             	add    esp,0x10
c0026349:	83 ec 08             	sub    esp,0x8
c002634c:	52                   	push   edx
c002634d:	50                   	push   eax
c002634e:	e8 60 0d ff ff       	call   c00170b3 <timerHandler(unsigned long long)>
c0026353:	83 c4 10             	add    esp,0x10
c0026356:	90                   	nop
c0026357:	83 c4 0c             	add    esp,0xc
c002635a:	c3                   	ret    
c002635b:	90                   	nop

c002635c <APICTimer::APICTimer()>:
c002635c:	83 ec 0c             	sub    esp,0xc
c002635f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026363:	83 ec 08             	sub    esp,0x8
c0026366:	68 b8 01 03 c0       	push   0xc00301b8
c002636b:	50                   	push   eax
c002636c:	e8 c1 0b ff ff       	call   c0016f32 <Timer::Timer(char const*)>
c0026371:	83 c4 10             	add    esp,0x10
c0026374:	ba cc 01 03 c0       	mov    edx,0xc00301cc
c0026379:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002637d:	89 10                	mov    DWORD PTR [eax],edx
c002637f:	90                   	nop
c0026380:	83 c4 0c             	add    esp,0xc
c0026383:	c3                   	ret    

c0026384 <APICTimer::open(int, int, void*)>:
c0026384:	57                   	push   edi
c0026385:	56                   	push   esi
c0026386:	53                   	push   ebx
c0026387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002638b:	8b 00                	mov    eax,DWORD PTR [eax]
c002638d:	83 c0 24             	add    eax,0x24
c0026390:	8b 00                	mov    eax,DWORD PTR [eax]
c0026392:	83 ec 08             	sub    esp,0x8
c0026395:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026399:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002639d:	ff d0                	call   eax
c002639f:	83 c4 10             	add    esp,0x10
c00263a2:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c00263a7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00263ad:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00263b3:	83 ec 0c             	sub    esp,0xc
c00263b6:	50                   	push   eax
c00263b7:	e8 48 f7 ff ff       	call   c0025b04 <APIC::getBase()>
c00263bc:	83 c4 10             	add    esp,0x10
c00263bf:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00263c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263c9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00263cf:	0f b6 f8             	movzx  edi,al
c00263d2:	89 d0                	mov    eax,edx
c00263d4:	ba 00 00 00 00       	mov    edx,0x0
c00263d9:	89 c1                	mov    ecx,eax
c00263db:	80 e5 ff             	and    ch,0xff
c00263de:	89 cb                	mov    ebx,ecx
c00263e0:	0f b6 f2             	movzx  esi,dl
c00263e3:	89 d8                	mov    eax,ebx
c00263e5:	89 f2                	mov    edx,esi
c00263e7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00263eb:	8d 5f 08             	lea    ebx,[edi+0x8]
c00263ee:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00263f2:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00263f6:	83 e0 00             	and    eax,0x0
c00263f9:	09 d0                	or     eax,edx
c00263fb:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00263ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026403:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026409:	8d 50 01             	lea    edx,[eax+0x1]
c002640c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026410:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026416:	0f b6 d0             	movzx  edx,al
c0026419:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002641d:	83 c2 08             	add    edx,0x8
c0026420:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026424:	0f b6 c9             	movzx  ecx,cl
c0026427:	81 c9 00 00 01 00    	or     ecx,0x10000
c002642d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026431:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026435:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026439:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002643f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026443:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026447:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002644d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026451:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026457:	83 ec 0c             	sub    esp,0xc
c002645a:	51                   	push   ecx
c002645b:	6a 01                	push   0x1
c002645d:	68 2e 63 02 c0       	push   0xc002632e
c0026462:	52                   	push   edx
c0026463:	50                   	push   eax
c0026464:	e8 61 e2 fe ff       	call   c00146ca <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026469:	83 c4 20             	add    esp,0x20
c002646c:	89 c2                	mov    edx,eax
c002646e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026472:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026478:	b8 00 00 00 00       	mov    eax,0x0
c002647d:	5b                   	pop    ebx
c002647e:	5e                   	pop    esi
c002647f:	5f                   	pop    edi
c0026480:	c3                   	ret    
c0026481:	90                   	nop

c0026482 <APICTimer::write(int)>:
c0026482:	53                   	push   ebx
c0026483:	83 ec 28             	sub    esp,0x28
c0026486:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002648a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002648e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026494:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0026499:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002649f:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00264a5:	83 ec 0c             	sub    esp,0xc
c00264a8:	50                   	push   eax
c00264a9:	e8 56 f6 ff ff       	call   c0025b04 <APIC::getBase()>
c00264ae:	83 c4 10             	add    esp,0x10
c00264b1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00264b5:	a1 d8 19 03 c0       	mov    eax,ds:0xc00319d8
c00264ba:	8b 15 dc 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319dc
c00264c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00264c4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00264c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00264cc:	05 e0 03 00 00       	add    eax,0x3e0
c00264d1:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00264d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00264db:	05 80 03 00 00       	add    eax,0x380
c00264e0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00264e6:	fb                   	sti    
c00264e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00264ef:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c00264f4:	83 d2 00             	adc    edx,0x0
c00264f7:	89 c1                	mov    ecx,eax
c00264f9:	89 d3                	mov    ebx,edx
c00264fb:	a1 d8 19 03 c0       	mov    eax,ds:0xc00319d8
c0026500:	8b 15 dc 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319dc
c0026506:	39 c8                	cmp    eax,ecx
c0026508:	89 d0                	mov    eax,edx
c002650a:	19 d8                	sbb    eax,ebx
c002650c:	73 02                	jae    c0026510 <APICTimer::write(int)+0x8e>
c002650e:	eb d7                	jmp    c00264e7 <APICTimer::write(int)+0x65>
c0026510:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026514:	05 20 03 00 00       	add    eax,0x320
c0026519:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c002651f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026523:	05 90 03 00 00       	add    eax,0x390
c0026528:	8b 00                	mov    eax,DWORD PTR [eax]
c002652a:	f7 d0                	not    eax
c002652c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026530:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026534:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026538:	ba 00 00 00 00       	mov    edx,0x0
c002653d:	f7 f3                	div    ebx
c002653f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026543:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026547:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002654d:	0d 00 00 02 00       	or     eax,0x20000
c0026552:	89 c2                	mov    edx,eax
c0026554:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026558:	05 20 03 00 00       	add    eax,0x320
c002655d:	89 10                	mov    DWORD PTR [eax],edx
c002655f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026563:	05 e0 03 00 00       	add    eax,0x3e0
c0026568:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002656e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026572:	05 80 03 00 00       	add    eax,0x380
c0026577:	89 c2                	mov    edx,eax
c0026579:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002657d:	89 02                	mov    DWORD PTR [edx],eax
c002657f:	90                   	nop
c0026580:	83 c4 28             	add    esp,0x28
c0026583:	5b                   	pop    ebx
c0026584:	c3                   	ret    
c0026585:	90                   	nop

c0026586 <APICTimer::close(int, int, void*)>:
c0026586:	b8 00 00 00 00       	mov    eax,0x0
c002658b:	c3                   	ret    

c002658c <pitHandler(regs*, void*)>:
c002658c:	83 ec 0c             	sub    esp,0xc
c002658f:	a1 e4 56 03 c0       	mov    eax,ds:0xc00356e4
c0026594:	99                   	cdq    
c0026595:	52                   	push   edx
c0026596:	50                   	push   eax
c0026597:	6a 00                	push   0x0
c0026599:	68 00 ca 9a 3b       	push   0x3b9aca00
c002659e:	e8 39 05 00 00       	call   c0026adc <__udivdi3>
c00265a3:	83 c4 10             	add    esp,0x10
c00265a6:	83 ec 08             	sub    esp,0x8
c00265a9:	52                   	push   edx
c00265aa:	50                   	push   eax
c00265ab:	e8 03 0b ff ff       	call   c00170b3 <timerHandler(unsigned long long)>
c00265b0:	83 c4 10             	add    esp,0x10
c00265b3:	90                   	nop
c00265b4:	83 c4 0c             	add    esp,0xc
c00265b7:	c3                   	ret    

c00265b8 <PIT::PIT()>:
c00265b8:	83 ec 0c             	sub    esp,0xc
c00265bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265bf:	83 ec 08             	sub    esp,0x8
c00265c2:	68 94 02 03 c0       	push   0xc0030294
c00265c7:	50                   	push   eax
c00265c8:	e8 65 09 ff ff       	call   c0016f32 <Timer::Timer(char const*)>
c00265cd:	83 c4 10             	add    esp,0x10
c00265d0:	ba bc 02 03 c0       	mov    edx,0xc00302bc
c00265d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265d9:	89 10                	mov    DWORD PTR [eax],edx
c00265db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265df:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00265e5:	0f b6 d0             	movzx  edx,al
c00265e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265ec:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00265f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265f7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00265fd:	0f b6 d0             	movzx  edx,al
c0026600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026604:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026609:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002660d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026613:	8d 50 01             	lea    edx,[eax+0x1]
c0026616:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002661a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026620:	0f b6 d0             	movzx  edx,al
c0026623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026627:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002662b:	83 e1 3f             	and    ecx,0x3f
c002662e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026632:	90                   	nop
c0026633:	83 c4 0c             	add    esp,0xc
c0026636:	c3                   	ret    
c0026637:	90                   	nop

c0026638 <PIT::open(int, int, void*)>:
c0026638:	83 ec 0c             	sub    esp,0xc
c002663b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002663f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026641:	83 c0 24             	add    eax,0x24
c0026644:	8b 00                	mov    eax,DWORD PTR [eax]
c0026646:	83 ec 08             	sub    esp,0x8
c0026649:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002664d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026651:	ff d0                	call   eax
c0026653:	83 c4 10             	add    esp,0x10
c0026656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002665a:	83 ec 0c             	sub    esp,0xc
c002665d:	6a 00                	push   0x0
c002665f:	6a 01                	push   0x1
c0026661:	68 8c 65 02 c0       	push   0xc002658c
c0026666:	6a 00                	push   0x0
c0026668:	50                   	push   eax
c0026669:	e8 5c e0 fe ff       	call   c00146ca <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002666e:	83 c4 20             	add    esp,0x20
c0026671:	89 c2                	mov    edx,eax
c0026673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026677:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002667d:	b8 00 00 00 00       	mov    eax,0x0
c0026682:	83 c4 0c             	add    esp,0xc
c0026685:	c3                   	ret    

c0026686 <PIT::write(int)>:
c0026686:	83 ec 10             	sub    esp,0x10
c0026689:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002668d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026691:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026697:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002669b:	a3 e4 56 03 c0       	mov    ds:0xc00356e4,eax
c00266a0:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00266a5:	99                   	cdq    
c00266a6:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00266aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00266ae:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00266b5:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00266ba:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00266be:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00266c3:	ee                   	out    dx,al
c00266c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00266c8:	0f b6 c0             	movzx  eax,al
c00266cb:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00266d2:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00266d6:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00266da:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00266df:	ee                   	out    dx,al
c00266e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00266e4:	c1 f8 08             	sar    eax,0x8
c00266e7:	0f b6 c0             	movzx  eax,al
c00266ea:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00266f1:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00266f5:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00266f9:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00266fe:	ee                   	out    dx,al
c00266ff:	90                   	nop
c0026700:	83 c4 10             	add    esp,0x10
c0026703:	c3                   	ret    

c0026704 <PIT::close(int, int, void*)>:
c0026704:	83 ec 0c             	sub    esp,0xc
c0026707:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002670b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026715:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026719:	6a 01                	push   0x1
c002671b:	68 8c 65 02 c0       	push   0xc002658c
c0026720:	6a 00                	push   0x0
c0026722:	50                   	push   eax
c0026723:	e8 e0 df fe ff       	call   c0014708 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026728:	83 c4 10             	add    esp,0x10
c002672b:	b8 00 00 00 00       	mov    eax,0x0
c0026730:	83 c4 0c             	add    esp,0xc
c0026733:	c3                   	ret    
c0026734:	66 90                	xchg   ax,ax
c0026736:	66 90                	xchg   ax,ax
c0026738:	66 90                	xchg   ax,ax
c002673a:	66 90                	xchg   ax,ax
c002673c:	66 90                	xchg   ax,ax
c002673e:	66 90                	xchg   ax,ax

c0026740 <avxDetect>:
c0026740:	b8 00 00 00 00       	mov    eax,0x0
c0026745:	c3                   	ret    

c0026746 <avxSave>:
c0026746:	c3                   	ret    

c0026747 <avxLoad>:
c0026747:	c3                   	ret    

c0026748 <avxInit>:
c0026748:	c3                   	ret    

c0026749 <avxClose>:
c0026749:	c3                   	ret    

c002674a <wouldSheSayYes>:
c002674a:	c3                   	ret    
c002674b:	49                   	dec    ecx
c002674c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026750:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026754:	75 20                	jne    c0026776 <sseDetect.noSSE+0x1>
c0026756:	4e                   	dec    esi
c0026757:	79 61                	jns    c00267ba <x87Detect+0x14>
c0026759:	68 2e 2e 2e 00       	push   0x2e2e2e
c002675e:	66 90                	xchg   ax,ax

c0026760 <absolutelyNoChanceInHell>:
c0026760:	b8 01 00 00 00       	mov    eax,0x1
c0026765:	0f a2                	cpuid  
c0026767:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002676d:	74 06                	je     c0026775 <sseDetect.noSSE>
c002676f:	b8 01 00 00 00       	mov    eax,0x1
c0026774:	c3                   	ret    

c0026775 <sseDetect.noSSE>:
c0026775:	31 c0                	xor    eax,eax
c0026777:	c3                   	ret    

c0026778 <sseSave>:
c0026778:	0f ae 44 24 08       	fxsave [esp+0x8]
c002677d:	c3                   	ret    

c002677e <sseLoad>:
c002677e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0026783:	c3                   	ret    

c0026784 <sseInit>:
c0026784:	e8 43 00 00 00       	call   c00267cc <x87Init>
c0026789:	0f 20 e0             	mov    eax,cr4
c002678c:	66 0d 00 06          	or     ax,0x600
c0026790:	0f 22 e0             	mov    cr4,eax
c0026793:	c3                   	ret    

c0026794 <sseClose>:
c0026794:	c3                   	ret    
c0026795:	66 90                	xchg   ax,ax
c0026797:	66 90                	xchg   ax,ax
c0026799:	66 90                	xchg   ax,ax
c002679b:	66 90                	xchg   ax,ax
c002679d:	66 90                	xchg   ax,ax
c002679f:	90                   	nop

c00267a0 <value_37F>:
c00267a0:	7f 03                	jg     c00267a5 <value_37A+0x1>

c00267a2 <value_37E>:
c00267a2:	7e 03                	jle    c00267a7 <x87Detect+0x1>

c00267a4 <value_37A>:
c00267a4:	7a 03                	jp     c00267a9 <x87Detect+0x3>

c00267a6 <x87Detect>:
c00267a6:	b8 01 00 00 00       	mov    eax,0x1
c00267ab:	0f a2                	cpuid  
c00267ad:	f7 c2 01 00 00 00    	test   edx,0x1
c00267b3:	74 06                	je     c00267bb <x87Detect.nox87>
c00267b5:	b8 01 00 00 00       	mov    eax,0x1
c00267ba:	c3                   	ret    

c00267bb <x87Detect.nox87>:
c00267bb:	b8 00 00 00 00       	mov    eax,0x0
c00267c0:	c3                   	ret    

c00267c1 <x87Save>:
c00267c1:	9b dd 74 24 08       	fsave  [esp+0x8]
c00267c6:	c3                   	ret    

c00267c7 <x87Load>:
c00267c7:	dd 64 24 08          	frstor [esp+0x8]
c00267cb:	c3                   	ret    

c00267cc <x87Init>:
c00267cc:	9b db e3             	finit  
c00267cf:	0f 20 c0             	mov    eax,cr0
c00267d2:	66 25 fb ff          	and    ax,0xfffb
c00267d6:	66 0d 22 00          	or     ax,0x22
c00267da:	0f 22 c0             	mov    cr0,eax
c00267dd:	0f 06                	clts   
c00267df:	d9 2d a4 67 02 c0    	fldcw  WORD PTR ds:0xc00267a4
c00267e5:	c3                   	ret    

c00267e6 <x87Close>:
c00267e6:	c3                   	ret    
c00267e7:	90                   	nop

c00267e8 <__do_global_ctors_aux>:
c00267e8:	a1 2c 93 02 c0       	mov    eax,ds:0xc002932c
c00267ed:	83 f8 ff             	cmp    eax,0xffffffff
c00267f0:	74 1a                	je     c002680c <__do_global_ctors_aux+0x24>
c00267f2:	55                   	push   ebp
c00267f3:	89 e5                	mov    ebp,esp
c00267f5:	53                   	push   ebx
c00267f6:	52                   	push   edx
c00267f7:	bb 2c 93 02 c0       	mov    ebx,0xc002932c
c00267fc:	ff d0                	call   eax
c00267fe:	83 eb 04             	sub    ebx,0x4
c0026801:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026803:	83 f8 ff             	cmp    eax,0xffffffff
c0026806:	75 f4                	jne    c00267fc <__do_global_ctors_aux+0x14>
c0026808:	58                   	pop    eax
c0026809:	5b                   	pop    ebx
c002680a:	5d                   	pop    ebp
c002680b:	c3                   	ret    
c002680c:	c3                   	ret    
c002680d:	66 90                	xchg   ax,ax
c002680f:	90                   	nop

c0026810 <__divdi3>:
c0026810:	55                   	push   ebp
c0026811:	57                   	push   edi
c0026812:	56                   	push   esi
c0026813:	53                   	push   ebx
c0026814:	83 ec 1c             	sub    esp,0x1c
c0026817:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002681b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002681f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026822:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026826:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002682a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002682e:	85 db                	test   ebx,ebx
c0026830:	0f 88 8e 00 00 00    	js     c00268c4 <__divdi3+0xb4>
c0026836:	89 dd                	mov    ebp,ebx
c0026838:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026840:	89 d3                	mov    ebx,edx
c0026842:	85 d2                	test   edx,edx
c0026844:	79 0d                	jns    c0026853 <__divdi3+0x43>
c0026846:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002684a:	f7 d8                	neg    eax
c002684c:	83 d2 00             	adc    edx,0x0
c002684f:	f7 da                	neg    edx
c0026851:	89 d3                	mov    ebx,edx
c0026853:	89 c7                	mov    edi,eax
c0026855:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026858:	85 db                	test   ebx,ebx
c002685a:	75 48                	jne    c00268a4 <__divdi3+0x94>
c002685c:	39 ef                	cmp    edi,ebp
c002685e:	76 24                	jbe    c0026884 <__divdi3+0x74>
c0026860:	89 ea                	mov    edx,ebp
c0026862:	f7 f7                	div    edi
c0026864:	89 c1                	mov    ecx,eax
c0026866:	31 f6                	xor    esi,esi
c0026868:	89 c8                	mov    eax,ecx
c002686a:	89 f2                	mov    edx,esi
c002686c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026870:	85 c9                	test   ecx,ecx
c0026872:	74 07                	je     c002687b <__divdi3+0x6b>
c0026874:	f7 d8                	neg    eax
c0026876:	83 d2 00             	adc    edx,0x0
c0026879:	f7 da                	neg    edx
c002687b:	83 c4 1c             	add    esp,0x1c
c002687e:	5b                   	pop    ebx
c002687f:	5e                   	pop    esi
c0026880:	5f                   	pop    edi
c0026881:	5d                   	pop    ebp
c0026882:	c3                   	ret    
c0026883:	90                   	nop
c0026884:	85 ff                	test   edi,edi
c0026886:	75 0b                	jne    c0026893 <__divdi3+0x83>
c0026888:	b8 01 00 00 00       	mov    eax,0x1
c002688d:	31 d2                	xor    edx,edx
c002688f:	f7 f3                	div    ebx
c0026891:	89 c7                	mov    edi,eax
c0026893:	31 d2                	xor    edx,edx
c0026895:	89 e8                	mov    eax,ebp
c0026897:	f7 f7                	div    edi
c0026899:	89 c6                	mov    esi,eax
c002689b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002689e:	f7 f7                	div    edi
c00268a0:	89 c1                	mov    ecx,eax
c00268a2:	eb c4                	jmp    c0026868 <__divdi3+0x58>
c00268a4:	39 eb                	cmp    ebx,ebp
c00268a6:	77 3c                	ja     c00268e4 <__divdi3+0xd4>
c00268a8:	0f bd f3             	bsr    esi,ebx
c00268ab:	83 f6 1f             	xor    esi,0x1f
c00268ae:	75 40                	jne    c00268f0 <__divdi3+0xe0>
c00268b0:	39 eb                	cmp    ebx,ebp
c00268b2:	72 09                	jb     c00268bd <__divdi3+0xad>
c00268b4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00268b7:	0f 87 97 00 00 00    	ja     c0026954 <__divdi3+0x144>
c00268bd:	b9 01 00 00 00       	mov    ecx,0x1
c00268c2:	eb a4                	jmp    c0026868 <__divdi3+0x58>
c00268c4:	f7 d9                	neg    ecx
c00268c6:	83 d3 00             	adc    ebx,0x0
c00268c9:	f7 db                	neg    ebx
c00268cb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00268ce:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00268d2:	89 dd                	mov    ebp,ebx
c00268d4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00268dc:	e9 5f ff ff ff       	jmp    c0026840 <__divdi3+0x30>
c00268e1:	8d 76 00             	lea    esi,[esi+0x0]
c00268e4:	31 f6                	xor    esi,esi
c00268e6:	31 c9                	xor    ecx,ecx
c00268e8:	e9 7b ff ff ff       	jmp    c0026868 <__divdi3+0x58>
c00268ed:	8d 76 00             	lea    esi,[esi+0x0]
c00268f0:	b8 20 00 00 00       	mov    eax,0x20
c00268f5:	29 f0                	sub    eax,esi
c00268f7:	89 f1                	mov    ecx,esi
c00268f9:	d3 e3                	shl    ebx,cl
c00268fb:	89 fa                	mov    edx,edi
c00268fd:	88 c1                	mov    cl,al
c00268ff:	d3 ea                	shr    edx,cl
c0026901:	09 da                	or     edx,ebx
c0026903:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026907:	89 f1                	mov    ecx,esi
c0026909:	d3 e7                	shl    edi,cl
c002690b:	89 eb                	mov    ebx,ebp
c002690d:	88 c1                	mov    cl,al
c002690f:	d3 eb                	shr    ebx,cl
c0026911:	89 f1                	mov    ecx,esi
c0026913:	d3 e5                	shl    ebp,cl
c0026915:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026918:	88 c1                	mov    cl,al
c002691a:	d3 ea                	shr    edx,cl
c002691c:	09 d5                	or     ebp,edx
c002691e:	89 e8                	mov    eax,ebp
c0026920:	89 da                	mov    edx,ebx
c0026922:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026926:	89 d3                	mov    ebx,edx
c0026928:	89 c5                	mov    ebp,eax
c002692a:	f7 e7                	mul    edi
c002692c:	39 d3                	cmp    ebx,edx
c002692e:	72 18                	jb     c0026948 <__divdi3+0x138>
c0026930:	74 0a                	je     c002693c <__divdi3+0x12c>
c0026932:	89 e9                	mov    ecx,ebp
c0026934:	31 f6                	xor    esi,esi
c0026936:	e9 2d ff ff ff       	jmp    c0026868 <__divdi3+0x58>
c002693b:	90                   	nop
c002693c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002693f:	89 f1                	mov    ecx,esi
c0026941:	d3 e7                	shl    edi,cl
c0026943:	39 c7                	cmp    edi,eax
c0026945:	73 eb                	jae    c0026932 <__divdi3+0x122>
c0026947:	90                   	nop
c0026948:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002694b:	31 f6                	xor    esi,esi
c002694d:	e9 16 ff ff ff       	jmp    c0026868 <__divdi3+0x58>
c0026952:	66 90                	xchg   ax,ax
c0026954:	31 c9                	xor    ecx,ecx
c0026956:	e9 0d ff ff ff       	jmp    c0026868 <__divdi3+0x58>
c002695b:	90                   	nop

c002695c <__moddi3>:
c002695c:	55                   	push   ebp
c002695d:	57                   	push   edi
c002695e:	56                   	push   esi
c002695f:	53                   	push   ebx
c0026960:	83 ec 2c             	sub    esp,0x2c
c0026963:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026967:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002696b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002696f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026973:	85 db                	test   ebx,ebx
c0026975:	0f 88 85 00 00 00    	js     c0026a00 <__moddi3+0xa4>
c002697b:	89 de                	mov    esi,ebx
c002697d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026985:	89 d7                	mov    edi,edx
c0026987:	85 d2                	test   edx,edx
c0026989:	79 09                	jns    c0026994 <__moddi3+0x38>
c002698b:	f7 d8                	neg    eax
c002698d:	83 d2 00             	adc    edx,0x0
c0026990:	f7 da                	neg    edx
c0026992:	89 d7                	mov    edi,edx
c0026994:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026998:	89 cd                	mov    ebp,ecx
c002699a:	85 ff                	test   edi,edi
c002699c:	75 52                	jne    c00269f0 <__moddi3+0x94>
c002699e:	89 c3                	mov    ebx,eax
c00269a0:	39 f0                	cmp    eax,esi
c00269a2:	76 24                	jbe    c00269c8 <__moddi3+0x6c>
c00269a4:	89 c8                	mov    eax,ecx
c00269a6:	89 f2                	mov    edx,esi
c00269a8:	f7 f3                	div    ebx
c00269aa:	89 d6                	mov    esi,edx
c00269ac:	89 f0                	mov    eax,esi
c00269ae:	31 d2                	xor    edx,edx
c00269b0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00269b4:	85 c9                	test   ecx,ecx
c00269b6:	74 07                	je     c00269bf <__moddi3+0x63>
c00269b8:	f7 d8                	neg    eax
c00269ba:	83 d2 00             	adc    edx,0x0
c00269bd:	f7 da                	neg    edx
c00269bf:	83 c4 2c             	add    esp,0x2c
c00269c2:	5b                   	pop    ebx
c00269c3:	5e                   	pop    esi
c00269c4:	5f                   	pop    edi
c00269c5:	5d                   	pop    ebp
c00269c6:	c3                   	ret    
c00269c7:	90                   	nop
c00269c8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00269cc:	85 db                	test   ebx,ebx
c00269ce:	75 0d                	jne    c00269dd <__moddi3+0x81>
c00269d0:	b8 01 00 00 00       	mov    eax,0x1
c00269d5:	31 d2                	xor    edx,edx
c00269d7:	f7 f7                	div    edi
c00269d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00269dd:	89 f0                	mov    eax,esi
c00269df:	31 d2                	xor    edx,edx
c00269e1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00269e5:	f7 f7                	div    edi
c00269e7:	89 e8                	mov    eax,ebp
c00269e9:	f7 f7                	div    edi
c00269eb:	89 d6                	mov    esi,edx
c00269ed:	eb bd                	jmp    c00269ac <__moddi3+0x50>
c00269ef:	90                   	nop
c00269f0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00269f4:	39 f7                	cmp    edi,esi
c00269f6:	76 20                	jbe    c0026a18 <__moddi3+0xbc>
c00269f8:	89 c8                	mov    eax,ecx
c00269fa:	89 f2                	mov    edx,esi
c00269fc:	eb b2                	jmp    c00269b0 <__moddi3+0x54>
c00269fe:	66 90                	xchg   ax,ax
c0026a00:	f7 d9                	neg    ecx
c0026a02:	83 d3 00             	adc    ebx,0x0
c0026a05:	f7 db                	neg    ebx
c0026a07:	89 de                	mov    esi,ebx
c0026a09:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026a11:	e9 6f ff ff ff       	jmp    c0026985 <__moddi3+0x29>
c0026a16:	66 90                	xchg   ax,ax
c0026a18:	0f bd c7             	bsr    eax,edi
c0026a1b:	83 f0 1f             	xor    eax,0x1f
c0026a1e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026a22:	75 24                	jne    c0026a48 <__moddi3+0xec>
c0026a24:	39 f7                	cmp    edi,esi
c0026a26:	72 06                	jb     c0026a2e <__moddi3+0xd2>
c0026a28:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026a2c:	77 0c                	ja     c0026a3a <__moddi3+0xde>
c0026a2e:	89 e9                	mov    ecx,ebp
c0026a30:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026a34:	19 fe                	sbb    esi,edi
c0026a36:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026a3a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026a3e:	89 f2                	mov    edx,esi
c0026a40:	e9 6b ff ff ff       	jmp    c00269b0 <__moddi3+0x54>
c0026a45:	8d 76 00             	lea    esi,[esi+0x0]
c0026a48:	b8 20 00 00 00       	mov    eax,0x20
c0026a4d:	89 c2                	mov    edx,eax
c0026a4f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026a53:	29 da                	sub    edx,ebx
c0026a55:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026a59:	88 d9                	mov    cl,bl
c0026a5b:	d3 e7                	shl    edi,cl
c0026a5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026a61:	88 d1                	mov    cl,dl
c0026a63:	d3 e8                	shr    eax,cl
c0026a65:	09 c7                	or     edi,eax
c0026a67:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0026a6b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026a6f:	89 d8                	mov    eax,ebx
c0026a71:	88 d9                	mov    cl,bl
c0026a73:	d3 e7                	shl    edi,cl
c0026a75:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026a79:	89 f3                	mov    ebx,esi
c0026a7b:	88 d1                	mov    cl,dl
c0026a7d:	d3 eb                	shr    ebx,cl
c0026a7f:	89 c7                	mov    edi,eax
c0026a81:	88 c1                	mov    cl,al
c0026a83:	d3 e6                	shl    esi,cl
c0026a85:	89 e8                	mov    eax,ebp
c0026a87:	88 d1                	mov    cl,dl
c0026a89:	d3 e8                	shr    eax,cl
c0026a8b:	09 f0                	or     eax,esi
c0026a8d:	89 f9                	mov    ecx,edi
c0026a8f:	d3 e5                	shl    ebp,cl
c0026a91:	89 da                	mov    edx,ebx
c0026a93:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026a97:	89 d3                	mov    ebx,edx
c0026a99:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026a9d:	89 c6                	mov    esi,eax
c0026a9f:	89 d1                	mov    ecx,edx
c0026aa1:	39 d3                	cmp    ebx,edx
c0026aa3:	72 27                	jb     c0026acc <__moddi3+0x170>
c0026aa5:	74 21                	je     c0026ac8 <__moddi3+0x16c>
c0026aa7:	29 f5                	sub    ebp,esi
c0026aa9:	19 cb                	sbb    ebx,ecx
c0026aab:	89 de                	mov    esi,ebx
c0026aad:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026ab1:	d3 e6                	shl    esi,cl
c0026ab3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026ab7:	89 f9                	mov    ecx,edi
c0026ab9:	d3 ed                	shr    ebp,cl
c0026abb:	09 ee                	or     esi,ebp
c0026abd:	89 f0                	mov    eax,esi
c0026abf:	d3 eb                	shr    ebx,cl
c0026ac1:	89 da                	mov    edx,ebx
c0026ac3:	e9 e8 fe ff ff       	jmp    c00269b0 <__moddi3+0x54>
c0026ac8:	39 c5                	cmp    ebp,eax
c0026aca:	73 db                	jae    c0026aa7 <__moddi3+0x14b>
c0026acc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026ad0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026ad4:	89 d1                	mov    ecx,edx
c0026ad6:	89 c6                	mov    esi,eax
c0026ad8:	eb cd                	jmp    c0026aa7 <__moddi3+0x14b>
c0026ada:	66 90                	xchg   ax,ax

c0026adc <__udivdi3>:
c0026adc:	55                   	push   ebp
c0026add:	57                   	push   edi
c0026ade:	56                   	push   esi
c0026adf:	53                   	push   ebx
c0026ae0:	83 ec 1c             	sub    esp,0x1c
c0026ae3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026ae7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026aeb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026aef:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026af3:	85 d2                	test   edx,edx
c0026af5:	75 41                	jne    c0026b38 <__udivdi3+0x5c>
c0026af7:	39 f7                	cmp    edi,esi
c0026af9:	76 15                	jbe    c0026b10 <__udivdi3+0x34>
c0026afb:	89 e8                	mov    eax,ebp
c0026afd:	89 f2                	mov    edx,esi
c0026aff:	f7 f7                	div    edi
c0026b01:	31 db                	xor    ebx,ebx
c0026b03:	89 da                	mov    edx,ebx
c0026b05:	83 c4 1c             	add    esp,0x1c
c0026b08:	5b                   	pop    ebx
c0026b09:	5e                   	pop    esi
c0026b0a:	5f                   	pop    edi
c0026b0b:	5d                   	pop    ebp
c0026b0c:	c3                   	ret    
c0026b0d:	8d 76 00             	lea    esi,[esi+0x0]
c0026b10:	89 f9                	mov    ecx,edi
c0026b12:	85 ff                	test   edi,edi
c0026b14:	75 0b                	jne    c0026b21 <__udivdi3+0x45>
c0026b16:	b8 01 00 00 00       	mov    eax,0x1
c0026b1b:	31 d2                	xor    edx,edx
c0026b1d:	f7 f7                	div    edi
c0026b1f:	89 c1                	mov    ecx,eax
c0026b21:	31 d2                	xor    edx,edx
c0026b23:	89 f0                	mov    eax,esi
c0026b25:	f7 f1                	div    ecx
c0026b27:	89 c3                	mov    ebx,eax
c0026b29:	89 e8                	mov    eax,ebp
c0026b2b:	f7 f1                	div    ecx
c0026b2d:	89 da                	mov    edx,ebx
c0026b2f:	83 c4 1c             	add    esp,0x1c
c0026b32:	5b                   	pop    ebx
c0026b33:	5e                   	pop    esi
c0026b34:	5f                   	pop    edi
c0026b35:	5d                   	pop    ebp
c0026b36:	c3                   	ret    
c0026b37:	90                   	nop
c0026b38:	39 f2                	cmp    edx,esi
c0026b3a:	77 1c                	ja     c0026b58 <__udivdi3+0x7c>
c0026b3c:	0f bd da             	bsr    ebx,edx
c0026b3f:	83 f3 1f             	xor    ebx,0x1f
c0026b42:	75 24                	jne    c0026b68 <__udivdi3+0x8c>
c0026b44:	39 f2                	cmp    edx,esi
c0026b46:	72 08                	jb     c0026b50 <__udivdi3+0x74>
c0026b48:	39 ef                	cmp    edi,ebp
c0026b4a:	0f 87 84 00 00 00    	ja     c0026bd4 <__udivdi3+0xf8>
c0026b50:	b8 01 00 00 00       	mov    eax,0x1
c0026b55:	eb ac                	jmp    c0026b03 <__udivdi3+0x27>
c0026b57:	90                   	nop
c0026b58:	31 db                	xor    ebx,ebx
c0026b5a:	31 c0                	xor    eax,eax
c0026b5c:	89 da                	mov    edx,ebx
c0026b5e:	83 c4 1c             	add    esp,0x1c
c0026b61:	5b                   	pop    ebx
c0026b62:	5e                   	pop    esi
c0026b63:	5f                   	pop    edi
c0026b64:	5d                   	pop    ebp
c0026b65:	c3                   	ret    
c0026b66:	66 90                	xchg   ax,ax
c0026b68:	b8 20 00 00 00       	mov    eax,0x20
c0026b6d:	29 d8                	sub    eax,ebx
c0026b6f:	88 d9                	mov    cl,bl
c0026b71:	d3 e2                	shl    edx,cl
c0026b73:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026b77:	89 fa                	mov    edx,edi
c0026b79:	88 c1                	mov    cl,al
c0026b7b:	d3 ea                	shr    edx,cl
c0026b7d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026b81:	09 d1                	or     ecx,edx
c0026b83:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026b87:	88 d9                	mov    cl,bl
c0026b89:	d3 e7                	shl    edi,cl
c0026b8b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026b8f:	89 f7                	mov    edi,esi
c0026b91:	88 c1                	mov    cl,al
c0026b93:	d3 ef                	shr    edi,cl
c0026b95:	88 d9                	mov    cl,bl
c0026b97:	d3 e6                	shl    esi,cl
c0026b99:	89 ea                	mov    edx,ebp
c0026b9b:	88 c1                	mov    cl,al
c0026b9d:	d3 ea                	shr    edx,cl
c0026b9f:	09 d6                	or     esi,edx
c0026ba1:	89 f0                	mov    eax,esi
c0026ba3:	89 fa                	mov    edx,edi
c0026ba5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026ba9:	89 d7                	mov    edi,edx
c0026bab:	89 c6                	mov    esi,eax
c0026bad:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026bb1:	39 d7                	cmp    edi,edx
c0026bb3:	72 13                	jb     c0026bc8 <__udivdi3+0xec>
c0026bb5:	74 09                	je     c0026bc0 <__udivdi3+0xe4>
c0026bb7:	89 f0                	mov    eax,esi
c0026bb9:	31 db                	xor    ebx,ebx
c0026bbb:	e9 43 ff ff ff       	jmp    c0026b03 <__udivdi3+0x27>
c0026bc0:	88 d9                	mov    cl,bl
c0026bc2:	d3 e5                	shl    ebp,cl
c0026bc4:	39 c5                	cmp    ebp,eax
c0026bc6:	73 ef                	jae    c0026bb7 <__udivdi3+0xdb>
c0026bc8:	8d 46 ff             	lea    eax,[esi-0x1]
c0026bcb:	31 db                	xor    ebx,ebx
c0026bcd:	e9 31 ff ff ff       	jmp    c0026b03 <__udivdi3+0x27>
c0026bd2:	66 90                	xchg   ax,ax
c0026bd4:	31 c0                	xor    eax,eax
c0026bd6:	e9 28 ff ff ff       	jmp    c0026b03 <__udivdi3+0x27>
c0026bdb:	90                   	nop

c0026bdc <__umoddi3>:
c0026bdc:	55                   	push   ebp
c0026bdd:	57                   	push   edi
c0026bde:	56                   	push   esi
c0026bdf:	53                   	push   ebx
c0026be0:	83 ec 1c             	sub    esp,0x1c
c0026be3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026be7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026beb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026bef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026bf3:	89 da                	mov    edx,ebx
c0026bf5:	85 c0                	test   eax,eax
c0026bf7:	75 37                	jne    c0026c30 <__umoddi3+0x54>
c0026bf9:	39 df                	cmp    edi,ebx
c0026bfb:	76 13                	jbe    c0026c10 <__umoddi3+0x34>
c0026bfd:	89 f0                	mov    eax,esi
c0026bff:	f7 f7                	div    edi
c0026c01:	89 d0                	mov    eax,edx
c0026c03:	31 d2                	xor    edx,edx
c0026c05:	83 c4 1c             	add    esp,0x1c
c0026c08:	5b                   	pop    ebx
c0026c09:	5e                   	pop    esi
c0026c0a:	5f                   	pop    edi
c0026c0b:	5d                   	pop    ebp
c0026c0c:	c3                   	ret    
c0026c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0026c10:	89 fd                	mov    ebp,edi
c0026c12:	85 ff                	test   edi,edi
c0026c14:	75 0b                	jne    c0026c21 <__umoddi3+0x45>
c0026c16:	b8 01 00 00 00       	mov    eax,0x1
c0026c1b:	31 d2                	xor    edx,edx
c0026c1d:	f7 f7                	div    edi
c0026c1f:	89 c5                	mov    ebp,eax
c0026c21:	89 d8                	mov    eax,ebx
c0026c23:	31 d2                	xor    edx,edx
c0026c25:	f7 f5                	div    ebp
c0026c27:	89 f0                	mov    eax,esi
c0026c29:	f7 f5                	div    ebp
c0026c2b:	89 d0                	mov    eax,edx
c0026c2d:	eb d4                	jmp    c0026c03 <__umoddi3+0x27>
c0026c2f:	90                   	nop
c0026c30:	89 f1                	mov    ecx,esi
c0026c32:	39 d8                	cmp    eax,ebx
c0026c34:	76 0a                	jbe    c0026c40 <__umoddi3+0x64>
c0026c36:	89 f0                	mov    eax,esi
c0026c38:	83 c4 1c             	add    esp,0x1c
c0026c3b:	5b                   	pop    ebx
c0026c3c:	5e                   	pop    esi
c0026c3d:	5f                   	pop    edi
c0026c3e:	5d                   	pop    ebp
c0026c3f:	c3                   	ret    
c0026c40:	0f bd e8             	bsr    ebp,eax
c0026c43:	83 f5 1f             	xor    ebp,0x1f
c0026c46:	75 1c                	jne    c0026c64 <__umoddi3+0x88>
c0026c48:	39 d8                	cmp    eax,ebx
c0026c4a:	72 04                	jb     c0026c50 <__umoddi3+0x74>
c0026c4c:	39 f7                	cmp    edi,esi
c0026c4e:	77 08                	ja     c0026c58 <__umoddi3+0x7c>
c0026c50:	89 da                	mov    edx,ebx
c0026c52:	29 fe                	sub    esi,edi
c0026c54:	19 c2                	sbb    edx,eax
c0026c56:	89 f1                	mov    ecx,esi
c0026c58:	89 c8                	mov    eax,ecx
c0026c5a:	83 c4 1c             	add    esp,0x1c
c0026c5d:	5b                   	pop    ebx
c0026c5e:	5e                   	pop    esi
c0026c5f:	5f                   	pop    edi
c0026c60:	5d                   	pop    ebp
c0026c61:	c3                   	ret    
c0026c62:	66 90                	xchg   ax,ax
c0026c64:	ba 20 00 00 00       	mov    edx,0x20
c0026c69:	29 ea                	sub    edx,ebp
c0026c6b:	89 e9                	mov    ecx,ebp
c0026c6d:	d3 e0                	shl    eax,cl
c0026c6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026c73:	89 f8                	mov    eax,edi
c0026c75:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026c79:	88 d1                	mov    cl,dl
c0026c7b:	d3 e8                	shr    eax,cl
c0026c7d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026c81:	09 c1                	or     ecx,eax
c0026c83:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026c87:	89 e9                	mov    ecx,ebp
c0026c89:	d3 e7                	shl    edi,cl
c0026c8b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026c8f:	89 d8                	mov    eax,ebx
c0026c91:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026c95:	88 d1                	mov    cl,dl
c0026c97:	d3 e8                	shr    eax,cl
c0026c99:	89 c7                	mov    edi,eax
c0026c9b:	89 e9                	mov    ecx,ebp
c0026c9d:	d3 e3                	shl    ebx,cl
c0026c9f:	89 f0                	mov    eax,esi
c0026ca1:	88 d1                	mov    cl,dl
c0026ca3:	d3 e8                	shr    eax,cl
c0026ca5:	09 d8                	or     eax,ebx
c0026ca7:	89 e9                	mov    ecx,ebp
c0026ca9:	d3 e6                	shl    esi,cl
c0026cab:	89 f3                	mov    ebx,esi
c0026cad:	89 fa                	mov    edx,edi
c0026caf:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026cb3:	89 d1                	mov    ecx,edx
c0026cb5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026cb9:	89 c6                	mov    esi,eax
c0026cbb:	89 d7                	mov    edi,edx
c0026cbd:	39 d1                	cmp    ecx,edx
c0026cbf:	72 27                	jb     c0026ce8 <__umoddi3+0x10c>
c0026cc1:	74 21                	je     c0026ce4 <__umoddi3+0x108>
c0026cc3:	89 ca                	mov    edx,ecx
c0026cc5:	29 f3                	sub    ebx,esi
c0026cc7:	19 fa                	sbb    edx,edi
c0026cc9:	89 d0                	mov    eax,edx
c0026ccb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026ccf:	d3 e0                	shl    eax,cl
c0026cd1:	89 e9                	mov    ecx,ebp
c0026cd3:	d3 eb                	shr    ebx,cl
c0026cd5:	09 d8                	or     eax,ebx
c0026cd7:	d3 ea                	shr    edx,cl
c0026cd9:	83 c4 1c             	add    esp,0x1c
c0026cdc:	5b                   	pop    ebx
c0026cdd:	5e                   	pop    esi
c0026cde:	5f                   	pop    edi
c0026cdf:	5d                   	pop    ebp
c0026ce0:	c3                   	ret    
c0026ce1:	8d 76 00             	lea    esi,[esi+0x0]
c0026ce4:	39 c3                	cmp    ebx,eax
c0026ce6:	73 db                	jae    c0026cc3 <__umoddi3+0xe7>
c0026ce8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026cec:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026cf0:	89 d7                	mov    edi,edx
c0026cf2:	89 c6                	mov    esi,eax
c0026cf4:	eb cd                	jmp    c0026cc3 <__umoddi3+0xe7>

c0026cf6 <__addsf3>:
c0026cf6:	55                   	push   ebp
c0026cf7:	89 e5                	mov    ebp,esp
c0026cf9:	57                   	push   edi
c0026cfa:	56                   	push   esi
c0026cfb:	53                   	push   ebx
c0026cfc:	83 ec 08             	sub    esp,0x8
c0026cff:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026d02:	89 fa                	mov    edx,edi
c0026d04:	89 f8                	mov    eax,edi
c0026d06:	c1 f8 17             	sar    eax,0x17
c0026d09:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026d0c:	c1 e2 08             	shl    edx,0x8
c0026d0f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026d15:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026d18:	89 de                	mov    esi,ebx
c0026d1a:	c1 fe 17             	sar    esi,0x17
c0026d1d:	c1 e3 08             	shl    ebx,0x8
c0026d20:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026d26:	31 f0                	xor    eax,esi
c0026d28:	0f 88 3b 01 00 00    	js     c0026e69 <__addsf3+0x173>
c0026d2e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026d31:	29 f1                	sub    ecx,esi
c0026d33:	85 c9                	test   ecx,ecx
c0026d35:	7e 54                	jle    c0026d8b <__addsf3+0x95>
c0026d37:	89 f0                	mov    eax,esi
c0026d39:	84 c0                	test   al,al
c0026d3b:	75 10                	jne    c0026d4d <__addsf3+0x57>
c0026d3d:	85 db                	test   ebx,ebx
c0026d3f:	0f 84 aa 02 00 00    	je     c0026fef <__addsf3+0x2f9>
c0026d45:	49                   	dec    ecx
c0026d46:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d49:	74 38                	je     c0026d83 <__addsf3+0x8d>
c0026d4b:	eb 13                	jmp    c0026d60 <__addsf3+0x6a>
c0026d4d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d50:	f7 d0                	not    eax
c0026d52:	84 c0                	test   al,al
c0026d54:	0f 84 95 02 00 00    	je     c0026fef <__addsf3+0x2f9>
c0026d5a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026d60:	83 f9 1f             	cmp    ecx,0x1f
c0026d63:	0f 8f 86 02 00 00    	jg     c0026fef <__addsf3+0x2f9>
c0026d69:	89 de                	mov    esi,ebx
c0026d6b:	d3 ee                	shr    esi,cl
c0026d6d:	b8 20 00 00 00       	mov    eax,0x20
c0026d72:	29 c8                	sub    eax,ecx
c0026d74:	89 c1                	mov    ecx,eax
c0026d76:	d3 e3                	shl    ebx,cl
c0026d78:	31 c0                	xor    eax,eax
c0026d7a:	85 db                	test   ebx,ebx
c0026d7c:	0f 95 c0             	setne  al
c0026d7f:	09 f0                	or     eax,esi
c0026d81:	01 d0                	add    eax,edx
c0026d83:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d86:	e9 b6 00 00 00       	jmp    c0026e41 <__addsf3+0x14b>
c0026d8b:	74 5c                	je     c0026de9 <__addsf3+0xf3>
c0026d8d:	89 f1                	mov    ecx,esi
c0026d8f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026d92:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d95:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026d99:	75 14                	jne    c0026daf <__addsf3+0xb9>
c0026d9b:	85 d2                	test   edx,edx
c0026d9d:	0f 84 4c 02 00 00    	je     c0026fef <__addsf3+0x2f9>
c0026da3:	49                   	dec    ecx
c0026da4:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026da7:	0f 84 94 00 00 00    	je     c0026e41 <__addsf3+0x14b>
c0026dad:	eb 12                	jmp    c0026dc1 <__addsf3+0xcb>
c0026daf:	89 f0                	mov    eax,esi
c0026db1:	f7 d0                	not    eax
c0026db3:	84 c0                	test   al,al
c0026db5:	0f 84 34 02 00 00    	je     c0026fef <__addsf3+0x2f9>
c0026dbb:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026dc1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026dc4:	83 f9 1f             	cmp    ecx,0x1f
c0026dc7:	0f 8f 22 02 00 00    	jg     c0026fef <__addsf3+0x2f9>
c0026dcd:	89 d7                	mov    edi,edx
c0026dcf:	d3 ef                	shr    edi,cl
c0026dd1:	b8 20 00 00 00       	mov    eax,0x20
c0026dd6:	29 c8                	sub    eax,ecx
c0026dd8:	89 c1                	mov    ecx,eax
c0026dda:	d3 e2                	shl    edx,cl
c0026ddc:	31 c0                	xor    eax,eax
c0026dde:	85 d2                	test   edx,edx
c0026de0:	0f 95 c0             	setne  al
c0026de3:	09 f8                	or     eax,edi
c0026de5:	01 d8                	add    eax,ebx
c0026de7:	eb 58                	jmp    c0026e41 <__addsf3+0x14b>
c0026de9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026dec:	8d 70 01             	lea    esi,[eax+0x1]
c0026def:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026df5:	75 32                	jne    c0026e29 <__addsf3+0x133>
c0026df7:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026dfb:	75 1f                	jne    c0026e1c <__addsf3+0x126>
c0026dfd:	85 d2                	test   edx,edx
c0026dff:	0f 84 e0 01 00 00    	je     c0026fe5 <__addsf3+0x2ef>
c0026e05:	85 db                	test   ebx,ebx
c0026e07:	0f 84 e2 01 00 00    	je     c0026fef <__addsf3+0x2f9>
c0026e0d:	89 d0                	mov    eax,edx
c0026e0f:	01 d8                	add    eax,ebx
c0026e11:	0f 89 a9 01 00 00    	jns    c0026fc0 <__addsf3+0x2ca>
c0026e17:	e9 9d 01 00 00       	jmp    c0026fb9 <__addsf3+0x2c3>
c0026e1c:	85 d2                	test   edx,edx
c0026e1e:	0f 85 cb 01 00 00    	jne    c0026fef <__addsf3+0x2f9>
c0026e24:	e9 bc 01 00 00       	jmp    c0026fe5 <__addsf3+0x2ef>
c0026e29:	31 c0                	xor    eax,eax
c0026e2b:	89 f1                	mov    ecx,esi
c0026e2d:	f7 d1                	not    ecx
c0026e2f:	84 c9                	test   cl,cl
c0026e31:	0f 84 90 01 00 00    	je     c0026fc7 <__addsf3+0x2d1>
c0026e37:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026e3a:	d1 e8                	shr    eax,1
c0026e3c:	e9 86 01 00 00       	jmp    c0026fc7 <__addsf3+0x2d1>
c0026e41:	85 c0                	test   eax,eax
c0026e43:	0f 89 7e 01 00 00    	jns    c0026fc7 <__addsf3+0x2d1>
c0026e49:	46                   	inc    esi
c0026e4a:	89 f2                	mov    edx,esi
c0026e4c:	f7 d2                	not    edx
c0026e4e:	84 d2                	test   dl,dl
c0026e50:	0f 84 6f 01 00 00    	je     c0026fc5 <__addsf3+0x2cf>
c0026e56:	89 c2                	mov    edx,eax
c0026e58:	83 e2 01             	and    edx,0x1
c0026e5b:	d1 e8                	shr    eax,1
c0026e5d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026e62:	09 d0                	or     eax,edx
c0026e64:	e9 5e 01 00 00       	jmp    c0026fc7 <__addsf3+0x2d1>
c0026e69:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026e6d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026e70:	89 f0                	mov    eax,esi
c0026e72:	0f b6 c0             	movzx  eax,al
c0026e75:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026e78:	29 c1                	sub    ecx,eax
c0026e7a:	85 c9                	test   ecx,ecx
c0026e7c:	7e 55                	jle    c0026ed3 <__addsf3+0x1dd>
c0026e7e:	85 c0                	test   eax,eax
c0026e80:	75 11                	jne    c0026e93 <__addsf3+0x19d>
c0026e82:	85 db                	test   ebx,ebx
c0026e84:	0f 84 65 01 00 00    	je     c0026fef <__addsf3+0x2f9>
c0026e8a:	49                   	dec    ecx
c0026e8b:	75 19                	jne    c0026ea6 <__addsf3+0x1b0>
c0026e8d:	89 d0                	mov    eax,edx
c0026e8f:	29 d8                	sub    eax,ebx
c0026e91:	eb 38                	jmp    c0026ecb <__addsf3+0x1d5>
c0026e93:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026e96:	f7 d0                	not    eax
c0026e98:	84 c0                	test   al,al
c0026e9a:	0f 84 4f 01 00 00    	je     c0026fef <__addsf3+0x2f9>
c0026ea0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026ea6:	83 f9 1f             	cmp    ecx,0x1f
c0026ea9:	0f 8f 40 01 00 00    	jg     c0026fef <__addsf3+0x2f9>
c0026eaf:	89 de                	mov    esi,ebx
c0026eb1:	d3 ee                	shr    esi,cl
c0026eb3:	b8 20 00 00 00       	mov    eax,0x20
c0026eb8:	29 c8                	sub    eax,ecx
c0026eba:	89 c1                	mov    ecx,eax
c0026ebc:	d3 e3                	shl    ebx,cl
c0026ebe:	31 c0                	xor    eax,eax
c0026ec0:	85 db                	test   ebx,ebx
c0026ec2:	0f 95 c0             	setne  al
c0026ec5:	09 f0                	or     eax,esi
c0026ec7:	29 c2                	sub    edx,eax
c0026ec9:	89 d0                	mov    eax,edx
c0026ecb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ece:	e9 af 00 00 00       	jmp    c0026f82 <__addsf3+0x28c>
c0026ed3:	74 5c                	je     c0026f31 <__addsf3+0x23b>
c0026ed5:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026ed8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026edb:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026edf:	75 14                	jne    c0026ef5 <__addsf3+0x1ff>
c0026ee1:	85 d2                	test   edx,edx
c0026ee3:	0f 84 06 01 00 00    	je     c0026fef <__addsf3+0x2f9>
c0026ee9:	48                   	dec    eax
c0026eea:	75 1b                	jne    c0026f07 <__addsf3+0x211>
c0026eec:	89 d8                	mov    eax,ebx
c0026eee:	29 d0                	sub    eax,edx
c0026ef0:	e9 8d 00 00 00       	jmp    c0026f82 <__addsf3+0x28c>
c0026ef5:	89 f1                	mov    ecx,esi
c0026ef7:	f7 d1                	not    ecx
c0026ef9:	84 c9                	test   cl,cl
c0026efb:	0f 84 ee 00 00 00    	je     c0026fef <__addsf3+0x2f9>
c0026f01:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026f07:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026f0a:	83 f8 1f             	cmp    eax,0x1f
c0026f0d:	0f 8f dc 00 00 00    	jg     c0026fef <__addsf3+0x2f9>
c0026f13:	89 d7                	mov    edi,edx
c0026f15:	88 c1                	mov    cl,al
c0026f17:	d3 ef                	shr    edi,cl
c0026f19:	b9 20 00 00 00       	mov    ecx,0x20
c0026f1e:	29 c1                	sub    ecx,eax
c0026f20:	d3 e2                	shl    edx,cl
c0026f22:	31 c0                	xor    eax,eax
c0026f24:	85 d2                	test   edx,edx
c0026f26:	0f 95 c0             	setne  al
c0026f29:	09 f8                	or     eax,edi
c0026f2b:	29 c3                	sub    ebx,eax
c0026f2d:	89 d8                	mov    eax,ebx
c0026f2f:	eb 51                	jmp    c0026f82 <__addsf3+0x28c>
c0026f31:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026f34:	40                   	inc    eax
c0026f35:	a8 fe                	test   al,0xfe
c0026f37:	75 3d                	jne    c0026f76 <__addsf3+0x280>
c0026f39:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026f3d:	0f 85 a7 00 00 00    	jne    c0026fea <__addsf3+0x2f4>
c0026f43:	85 d2                	test   edx,edx
c0026f45:	75 12                	jne    c0026f59 <__addsf3+0x263>
c0026f47:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026f4a:	85 db                	test   ebx,ebx
c0026f4c:	0f 85 9d 00 00 00    	jne    c0026fef <__addsf3+0x2f9>
c0026f52:	31 ff                	xor    edi,edi
c0026f54:	e9 96 00 00 00       	jmp    c0026fef <__addsf3+0x2f9>
c0026f59:	85 db                	test   ebx,ebx
c0026f5b:	0f 84 8e 00 00 00    	je     c0026fef <__addsf3+0x2f9>
c0026f61:	89 d0                	mov    eax,edx
c0026f63:	29 d8                	sub    eax,ebx
c0026f65:	79 06                	jns    c0026f6d <__addsf3+0x277>
c0026f67:	89 d8                	mov    eax,ebx
c0026f69:	29 d0                	sub    eax,edx
c0026f6b:	eb 5a                	jmp    c0026fc7 <__addsf3+0x2d1>
c0026f6d:	bf 00 00 00 00       	mov    edi,0x0
c0026f72:	74 7b                	je     c0026fef <__addsf3+0x2f9>
c0026f74:	eb 4a                	jmp    c0026fc0 <__addsf3+0x2ca>
c0026f76:	89 d0                	mov    eax,edx
c0026f78:	29 d8                	sub    eax,ebx
c0026f7a:	79 12                	jns    c0026f8e <__addsf3+0x298>
c0026f7c:	89 d8                	mov    eax,ebx
c0026f7e:	29 d0                	sub    eax,edx
c0026f80:	eb 09                	jmp    c0026f8b <__addsf3+0x295>
c0026f82:	85 c0                	test   eax,eax
c0026f84:	79 41                	jns    c0026fc7 <__addsf3+0x2d1>
c0026f86:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f8b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026f8e:	31 f6                	xor    esi,esi
c0026f90:	85 c0                	test   eax,eax
c0026f92:	74 33                	je     c0026fc7 <__addsf3+0x2d1>
c0026f94:	0f bd c8             	bsr    ecx,eax
c0026f97:	83 f1 1f             	xor    ecx,0x1f
c0026f9a:	d3 e0                	shl    eax,cl
c0026f9c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026fa0:	39 ca                	cmp    edx,ecx
c0026fa2:	7f 10                	jg     c0026fb4 <__addsf3+0x2be>
c0026fa4:	29 d1                	sub    ecx,edx
c0026fa6:	41                   	inc    ecx
c0026fa7:	d3 e8                	shr    eax,cl
c0026fa9:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026fac:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026fb2:	eb 13                	jmp    c0026fc7 <__addsf3+0x2d1>
c0026fb4:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026fb7:	29 ce                	sub    esi,ecx
c0026fb9:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026fbe:	eb 07                	jmp    c0026fc7 <__addsf3+0x2d1>
c0026fc0:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026fc3:	eb 02                	jmp    c0026fc7 <__addsf3+0x2d1>
c0026fc5:	31 c0                	xor    eax,eax
c0026fc7:	89 c2                	mov    edx,eax
c0026fc9:	c1 ea 08             	shr    edx,0x8
c0026fcc:	a8 7f                	test   al,0x7f
c0026fce:	0f 95 c1             	setne  cl
c0026fd1:	09 d1                	or     ecx,edx
c0026fd3:	83 e1 01             	and    ecx,0x1
c0026fd6:	c1 e8 07             	shr    eax,0x7
c0026fd9:	21 c8                	and    eax,ecx
c0026fdb:	c1 e6 17             	shl    esi,0x17
c0026fde:	09 d6                	or     esi,edx
c0026fe0:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026fe3:	eb 0a                	jmp    c0026fef <__addsf3+0x2f9>
c0026fe5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026fe8:	eb 05                	jmp    c0026fef <__addsf3+0x2f9>
c0026fea:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026fef:	89 f8                	mov    eax,edi
c0026ff1:	5a                   	pop    edx
c0026ff2:	59                   	pop    ecx
c0026ff3:	5b                   	pop    ebx
c0026ff4:	5e                   	pop    esi
c0026ff5:	5f                   	pop    edi
c0026ff6:	5d                   	pop    ebp
c0026ff7:	c3                   	ret    

c0026ff8 <__subsf3>:
c0026ff8:	55                   	push   ebp
c0026ff9:	89 e5                	mov    ebp,esp
c0026ffb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026ffe:	05 00 00 00 80       	add    eax,0x80000000
c0027003:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0027006:	5d                   	pop    ebp
c0027007:	e9 ea fc ff ff       	jmp    c0026cf6 <__addsf3>

c002700c <__negsf2>:
c002700c:	55                   	push   ebp
c002700d:	89 e5                	mov    ebp,esp
c002700f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027012:	05 00 00 00 80       	add    eax,0x80000000
c0027017:	5d                   	pop    ebp
c0027018:	c3                   	ret    

c0027019 <__mulsf3>:
c0027019:	55                   	push   ebp
c002701a:	89 e5                	mov    ebp,esp
c002701c:	57                   	push   edi
c002701d:	56                   	push   esi
c002701e:	53                   	push   ebx
c002701f:	83 ec 1c             	sub    esp,0x1c
c0027022:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0027025:	89 f0                	mov    eax,esi
c0027027:	89 f1                	mov    ecx,esi
c0027029:	c1 f9 17             	sar    ecx,0x17
c002702c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c002702f:	c1 e0 08             	shl    eax,0x8
c0027032:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027037:	89 c1                	mov    ecx,eax
c0027039:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002703c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002703f:	89 c7                	mov    edi,eax
c0027041:	c1 ff 17             	sar    edi,0x17
c0027044:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027048:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002704b:	89 f8                	mov    eax,edi
c002704d:	0f b6 c0             	movzx  eax,al
c0027050:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027053:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0027057:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002705a:	42                   	inc    edx
c002705b:	80 e2 fe             	and    dl,0xfe
c002705e:	75 7b                	jne    c00270db <__mulsf3+0xc2>
c0027060:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027064:	74 54                	je     c00270ba <__mulsf3+0xa1>
c0027066:	85 c9                	test   ecx,ecx
c0027068:	0f 85 64 01 00 00    	jne    c00271d2 <__mulsf3+0x1b9>
c002706e:	8d 57 01             	lea    edx,[edi+0x1]
c0027071:	80 e2 fe             	and    dl,0xfe
c0027074:	75 1f                	jne    c0027095 <__mulsf3+0x7c>
c0027076:	85 c0                	test   eax,eax
c0027078:	b8 00 00 00 00       	mov    eax,0x0
c002707d:	74 29                	je     c00270a8 <__mulsf3+0x8f>
c002707f:	53                   	push   ebx
c0027080:	53                   	push   ebx
c0027081:	50                   	push   eax
c0027082:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027085:	e8 96 05 00 00       	call   c0027620 <__nesf2>
c002708a:	83 c4 10             	add    esp,0x10
c002708d:	85 c0                	test   eax,eax
c002708f:	0f 85 3a 01 00 00    	jne    c00271cf <__mulsf3+0x1b6>
c0027095:	85 ff                	test   edi,edi
c0027097:	0f 89 35 01 00 00    	jns    c00271d2 <__mulsf3+0x1b9>
c002709d:	81 c6 00 00 00 80    	add    esi,0x80000000
c00270a3:	e9 2a 01 00 00       	jmp    c00271d2 <__mulsf3+0x1b9>
c00270a8:	51                   	push   ecx
c00270a9:	51                   	push   ecx
c00270aa:	50                   	push   eax
c00270ab:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270ae:	e8 6d 05 00 00       	call   c0027620 <__nesf2>
c00270b3:	83 c4 10             	add    esp,0x10
c00270b6:	85 c0                	test   eax,eax
c00270b8:	eb 15                	jmp    c00270cf <__mulsf3+0xb6>
c00270ba:	85 c9                	test   ecx,ecx
c00270bc:	74 0b                	je     c00270c9 <__mulsf3+0xb0>
c00270be:	8d 53 ff             	lea    edx,[ebx-0x1]
c00270c1:	01 c9                	add    ecx,ecx
c00270c3:	78 16                	js     c00270db <__mulsf3+0xc2>
c00270c5:	89 d3                	mov    ebx,edx
c00270c7:	eb f5                	jmp    c00270be <__mulsf3+0xa5>
c00270c9:	89 f8                	mov    eax,edi
c00270cb:	f7 d0                	not    eax
c00270cd:	84 c0                	test   al,al
c00270cf:	75 c4                	jne    c0027095 <__mulsf3+0x7c>
c00270d1:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c00270d6:	e9 f7 00 00 00       	jmp    c00271d2 <__mulsf3+0x1b9>
c00270db:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00270de:	c1 e6 08             	shl    esi,0x8
c00270e1:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c00270e7:	8d 57 01             	lea    edx,[edi+0x1]
c00270ea:	80 e2 fe             	and    dl,0xfe
c00270ed:	75 63                	jne    c0027152 <__mulsf3+0x139>
c00270ef:	85 c0                	test   eax,eax
c00270f1:	74 2f                	je     c0027122 <__mulsf3+0x109>
c00270f3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00270f7:	0f 89 d2 00 00 00    	jns    c00271cf <__mulsf3+0x1b6>
c00270fd:	52                   	push   edx
c00270fe:	52                   	push   edx
c00270ff:	6a 00                	push   0x0
c0027101:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027104:	e8 dc 04 00 00       	call   c00275e5 <__eqsf2>
c0027109:	83 c4 10             	add    esp,0x10
c002710c:	85 c0                	test   eax,eax
c002710e:	0f 85 bb 00 00 00    	jne    c00271cf <__mulsf3+0x1b6>
c0027114:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027117:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c002711d:	e9 b0 00 00 00       	jmp    c00271d2 <__mulsf3+0x1b9>
c0027122:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027125:	50                   	push   eax
c0027126:	50                   	push   eax
c0027127:	6a 00                	push   0x0
c0027129:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002712c:	e8 b4 04 00 00       	call   c00275e5 <__eqsf2>
c0027131:	83 c4 10             	add    esp,0x10
c0027134:	85 c0                	test   eax,eax
c0027136:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027139:	75 0c                	jne    c0027147 <__mulsf3+0x12e>
c002713b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002713f:	0f 89 8a 00 00 00    	jns    c00271cf <__mulsf3+0x1b6>
c0027145:	eb cd                	jmp    c0027114 <__mulsf3+0xfb>
c0027147:	8d 43 ff             	lea    eax,[ebx-0x1]
c002714a:	01 f6                	add    esi,esi
c002714c:	78 04                	js     c0027152 <__mulsf3+0x139>
c002714e:	89 c3                	mov    ebx,eax
c0027150:	eb f5                	jmp    c0027147 <__mulsf3+0x12e>
c0027152:	89 c8                	mov    eax,ecx
c0027154:	0d 00 00 00 80       	or     eax,0x80000000
c0027159:	81 ce 00 00 00 80    	or     esi,0x80000000
c002715f:	f7 e6                	mul    esi
c0027161:	85 c0                	test   eax,eax
c0027163:	0f 95 c0             	setne  al
c0027166:	0f b6 c0             	movzx  eax,al
c0027169:	09 c2                	or     edx,eax
c002716b:	78 03                	js     c0027170 <__mulsf3+0x157>
c002716d:	01 d2                	add    edx,edx
c002716f:	4b                   	dec    ebx
c0027170:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0027176:	7f 22                	jg     c002719a <__mulsf3+0x181>
c0027178:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002717e:	85 db                	test   ebx,ebx
c0027180:	7f 23                	jg     c00271a5 <__mulsf3+0x18c>
c0027182:	83 fb e9             	cmp    ebx,0xffffffe9
c0027185:	7c 1a                	jl     c00271a1 <__mulsf3+0x188>
c0027187:	81 ca 00 00 00 80    	or     edx,0x80000000
c002718d:	b9 01 00 00 00       	mov    ecx,0x1
c0027192:	29 d9                	sub    ecx,ebx
c0027194:	d3 ea                	shr    edx,cl
c0027196:	31 db                	xor    ebx,ebx
c0027198:	eb 0b                	jmp    c00271a5 <__mulsf3+0x18c>
c002719a:	bb ff 00 00 00       	mov    ebx,0xff
c002719f:	eb 02                	jmp    c00271a3 <__mulsf3+0x18a>
c00271a1:	31 db                	xor    ebx,ebx
c00271a3:	31 d2                	xor    edx,edx
c00271a5:	89 d0                	mov    eax,edx
c00271a7:	c1 e8 08             	shr    eax,0x8
c00271aa:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00271ad:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00271b3:	09 fb                	or     ebx,edi
c00271b5:	c1 e3 17             	shl    ebx,0x17
c00271b8:	09 c3                	or     ebx,eax
c00271ba:	f6 c2 7f             	test   dl,0x7f
c00271bd:	0f 95 c1             	setne  cl
c00271c0:	09 c8                	or     eax,ecx
c00271c2:	83 e0 01             	and    eax,0x1
c00271c5:	c1 ea 07             	shr    edx,0x7
c00271c8:	21 c2                	and    edx,eax
c00271ca:	8d 34 13             	lea    esi,[ebx+edx*1]
c00271cd:	eb 03                	jmp    c00271d2 <__mulsf3+0x1b9>
c00271cf:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00271d2:	89 f0                	mov    eax,esi
c00271d4:	8d 65 f4             	lea    esp,[ebp-0xc]
c00271d7:	5b                   	pop    ebx
c00271d8:	5e                   	pop    esi
c00271d9:	5f                   	pop    edi
c00271da:	5d                   	pop    ebp
c00271db:	c3                   	ret    

c00271dc <__divsf3>:
c00271dc:	55                   	push   ebp
c00271dd:	89 e5                	mov    ebp,esp
c00271df:	57                   	push   edi
c00271e0:	56                   	push   esi
c00271e1:	53                   	push   ebx
c00271e2:	83 ec 1c             	sub    esp,0x1c
c00271e5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00271e8:	89 d8                	mov    eax,ebx
c00271ea:	89 d9                	mov    ecx,ebx
c00271ec:	c1 f9 17             	sar    ecx,0x17
c00271ef:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00271f2:	c1 e0 08             	shl    eax,0x8
c00271f5:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00271fa:	89 c1                	mov    ecx,eax
c00271fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00271ff:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027202:	89 c7                	mov    edi,eax
c0027204:	c1 ff 17             	sar    edi,0x17
c0027207:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002720b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002720e:	89 f8                	mov    eax,edi
c0027210:	0f b6 c0             	movzx  eax,al
c0027213:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027216:	29 c6                	sub    esi,eax
c0027218:	83 c6 7f             	add    esi,0x7f
c002721b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002721e:	42                   	inc    edx
c002721f:	80 e2 fe             	and    dl,0xfe
c0027222:	0f 85 9c 00 00 00    	jne    c00272c4 <__divsf3+0xe8>
c0027228:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002722c:	74 33                	je     c0027261 <__divsf3+0x85>
c002722e:	85 c9                	test   ecx,ecx
c0027230:	0f 85 c7 01 00 00    	jne    c00273fd <__divsf3+0x221>
c0027236:	8d 57 01             	lea    edx,[edi+0x1]
c0027239:	80 e2 fe             	and    dl,0xfe
c002723c:	75 2f                	jne    c002726d <__divsf3+0x91>
c002723e:	85 c0                	test   eax,eax
c0027240:	74 2b                	je     c002726d <__divsf3+0x91>
c0027242:	51                   	push   ecx
c0027243:	51                   	push   ecx
c0027244:	6a 00                	push   0x0
c0027246:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027249:	e8 d2 03 00 00       	call   c0027620 <__nesf2>
c002724e:	83 c4 10             	add    esp,0x10
c0027251:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027254:	85 c0                	test   eax,eax
c0027256:	0f 85 a1 01 00 00    	jne    c00273fd <__divsf3+0x221>
c002725c:	e9 92 01 00 00       	jmp    c00273f3 <__divsf3+0x217>
c0027261:	85 c9                	test   ecx,ecx
c0027263:	75 1b                	jne    c0027280 <__divsf3+0xa4>
c0027265:	8d 57 01             	lea    edx,[edi+0x1]
c0027268:	80 e2 fe             	and    dl,0xfe
c002726b:	74 1e                	je     c002728b <__divsf3+0xaf>
c002726d:	85 ff                	test   edi,edi
c002726f:	0f 89 88 01 00 00    	jns    c00273fd <__divsf3+0x221>
c0027275:	81 c3 00 00 00 80    	add    ebx,0x80000000
c002727b:	e9 7d 01 00 00       	jmp    c00273fd <__divsf3+0x221>
c0027280:	8d 56 ff             	lea    edx,[esi-0x1]
c0027283:	01 c9                	add    ecx,ecx
c0027285:	78 3d                	js     c00272c4 <__divsf3+0xe8>
c0027287:	89 d6                	mov    esi,edx
c0027289:	eb f5                	jmp    c0027280 <__divsf3+0xa4>
c002728b:	85 c0                	test   eax,eax
c002728d:	b8 00 00 00 00       	mov    eax,0x0
c0027292:	74 18                	je     c00272ac <__divsf3+0xd0>
c0027294:	52                   	push   edx
c0027295:	52                   	push   edx
c0027296:	50                   	push   eax
c0027297:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002729a:	e8 81 03 00 00       	call   c0027620 <__nesf2>
c002729f:	83 c4 10             	add    esp,0x10
c00272a2:	85 c0                	test   eax,eax
c00272a4:	0f 85 50 01 00 00    	jne    c00273fa <__divsf3+0x21e>
c00272aa:	eb c1                	jmp    c002726d <__divsf3+0x91>
c00272ac:	56                   	push   esi
c00272ad:	56                   	push   esi
c00272ae:	50                   	push   eax
c00272af:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00272b2:	e8 69 03 00 00       	call   c0027620 <__nesf2>
c00272b7:	83 c4 10             	add    esp,0x10
c00272ba:	85 c0                	test   eax,eax
c00272bc:	0f 84 31 01 00 00    	je     c00273f3 <__divsf3+0x217>
c00272c2:	eb a9                	jmp    c002726d <__divsf3+0x91>
c00272c4:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c00272c7:	c1 e3 08             	shl    ebx,0x8
c00272ca:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00272d0:	8d 57 01             	lea    edx,[edi+0x1]
c00272d3:	80 e2 fe             	and    dl,0xfe
c00272d6:	75 71                	jne    c0027349 <__divsf3+0x16d>
c00272d8:	85 c0                	test   eax,eax
c00272da:	ba 00 00 00 00       	mov    edx,0x0
c00272df:	74 2f                	je     c0027310 <__divsf3+0x134>
c00272e1:	51                   	push   ecx
c00272e2:	51                   	push   ecx
c00272e3:	52                   	push   edx
c00272e4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00272e7:	e8 f9 02 00 00       	call   c00275e5 <__eqsf2>
c00272ec:	83 c4 10             	add    esp,0x10
c00272ef:	85 c0                	test   eax,eax
c00272f1:	0f 85 03 01 00 00    	jne    c00273fa <__divsf3+0x21e>
c00272f7:	31 d2                	xor    edx,edx
c00272f9:	89 d3                	mov    ebx,edx
c00272fb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00272fe:	31 f8                	xor    eax,edi
c0027300:	0f 89 f7 00 00 00    	jns    c00273fd <__divsf3+0x221>
c0027306:	bb 00 00 00 80       	mov    ebx,0x80000000
c002730b:	e9 ed 00 00 00       	jmp    c00273fd <__divsf3+0x221>
c0027310:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027313:	50                   	push   eax
c0027314:	50                   	push   eax
c0027315:	52                   	push   edx
c0027316:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027319:	e8 c7 02 00 00       	call   c00275e5 <__eqsf2>
c002731e:	83 c4 10             	add    esp,0x10
c0027321:	85 c0                	test   eax,eax
c0027323:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027326:	75 16                	jne    c002733e <__divsf3+0x162>
c0027328:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002732b:	31 fb                	xor    ebx,edi
c002732d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027333:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027339:	e9 bf 00 00 00       	jmp    c00273fd <__divsf3+0x221>
c002733e:	8d 46 01             	lea    eax,[esi+0x1]
c0027341:	01 db                	add    ebx,ebx
c0027343:	78 04                	js     c0027349 <__divsf3+0x16d>
c0027345:	89 c6                	mov    esi,eax
c0027347:	eb f5                	jmp    c002733e <__divsf3+0x162>
c0027349:	89 c8                	mov    eax,ecx
c002734b:	0d 00 00 00 80       	or     eax,0x80000000
c0027350:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027356:	31 d2                	xor    edx,edx
c0027358:	39 d8                	cmp    eax,ebx
c002735a:	72 07                	jb     c0027363 <__divsf3+0x187>
c002735c:	29 d8                	sub    eax,ebx
c002735e:	ba 01 00 00 00       	mov    edx,0x1
c0027363:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c002736a:	01 d2                	add    edx,edx
c002736c:	89 c1                	mov    ecx,eax
c002736e:	01 c0                	add    eax,eax
c0027370:	85 c9                	test   ecx,ecx
c0027372:	78 04                	js     c0027378 <__divsf3+0x19c>
c0027374:	39 c3                	cmp    ebx,eax
c0027376:	77 05                	ja     c002737d <__divsf3+0x1a1>
c0027378:	29 d8                	sub    eax,ebx
c002737a:	83 ca 01             	or     edx,0x1
c002737d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027380:	75 e8                	jne    c002736a <__divsf3+0x18e>
c0027382:	85 c0                	test   eax,eax
c0027384:	0f 95 c0             	setne  al
c0027387:	0f b6 c0             	movzx  eax,al
c002738a:	c1 e2 06             	shl    edx,0x6
c002738d:	09 c2                	or     edx,eax
c002738f:	78 03                	js     c0027394 <__divsf3+0x1b8>
c0027391:	01 d2                	add    edx,edx
c0027393:	4e                   	dec    esi
c0027394:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002739a:	7f 22                	jg     c00273be <__divsf3+0x1e2>
c002739c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00273a2:	85 f6                	test   esi,esi
c00273a4:	7f 23                	jg     c00273c9 <__divsf3+0x1ed>
c00273a6:	83 fe e9             	cmp    esi,0xffffffe9
c00273a9:	7c 1a                	jl     c00273c5 <__divsf3+0x1e9>
c00273ab:	81 ca 00 00 00 80    	or     edx,0x80000000
c00273b1:	b9 01 00 00 00       	mov    ecx,0x1
c00273b6:	29 f1                	sub    ecx,esi
c00273b8:	d3 ea                	shr    edx,cl
c00273ba:	31 f6                	xor    esi,esi
c00273bc:	eb 0b                	jmp    c00273c9 <__divsf3+0x1ed>
c00273be:	be ff 00 00 00       	mov    esi,0xff
c00273c3:	eb 02                	jmp    c00273c7 <__divsf3+0x1eb>
c00273c5:	31 f6                	xor    esi,esi
c00273c7:	31 d2                	xor    edx,edx
c00273c9:	89 d0                	mov    eax,edx
c00273cb:	c1 e8 08             	shr    eax,0x8
c00273ce:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00273d1:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00273d7:	09 fe                	or     esi,edi
c00273d9:	c1 e6 17             	shl    esi,0x17
c00273dc:	09 c6                	or     esi,eax
c00273de:	f6 c2 7f             	test   dl,0x7f
c00273e1:	0f 95 c1             	setne  cl
c00273e4:	09 c8                	or     eax,ecx
c00273e6:	83 e0 01             	and    eax,0x1
c00273e9:	c1 ea 07             	shr    edx,0x7
c00273ec:	21 c2                	and    edx,eax
c00273ee:	8d 1c 16             	lea    ebx,[esi+edx*1]
c00273f1:	eb 0a                	jmp    c00273fd <__divsf3+0x221>
c00273f3:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c00273f8:	eb 03                	jmp    c00273fd <__divsf3+0x221>
c00273fa:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00273fd:	89 d8                	mov    eax,ebx
c00273ff:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027402:	5b                   	pop    ebx
c0027403:	5e                   	pop    esi
c0027404:	5f                   	pop    edi
c0027405:	5d                   	pop    ebp
c0027406:	c3                   	ret    

c0027407 <__floatsisf>:
c0027407:	55                   	push   ebp
c0027408:	89 e5                	mov    ebp,esp
c002740a:	53                   	push   ebx
c002740b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002740e:	85 d2                	test   edx,edx
c0027410:	7e 2b                	jle    c002743d <__floatsisf+0x36>
c0027412:	0f bd ca             	bsr    ecx,edx
c0027415:	83 f1 1f             	xor    ecx,0x1f
c0027418:	d3 e2                	shl    edx,cl
c002741a:	89 d0                	mov    eax,edx
c002741c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027421:	89 c3                	mov    ebx,eax
c0027423:	c1 eb 08             	shr    ebx,0x8
c0027426:	80 e2 7f             	and    dl,0x7f
c0027429:	0f 95 c2             	setne  dl
c002742c:	09 da                	or     edx,ebx
c002742e:	83 e2 01             	and    edx,0x1
c0027431:	c1 e8 07             	shr    eax,0x7
c0027434:	21 c2                	and    edx,eax
c0027436:	b8 9e 00 00 00       	mov    eax,0x9e
c002743b:	eb 32                	jmp    c002746f <__floatsisf+0x68>
c002743d:	b8 00 00 00 00       	mov    eax,0x0
c0027442:	74 34                	je     c0027478 <__floatsisf+0x71>
c0027444:	f7 da                	neg    edx
c0027446:	0f bd ca             	bsr    ecx,edx
c0027449:	83 f1 1f             	xor    ecx,0x1f
c002744c:	d3 e2                	shl    edx,cl
c002744e:	89 d0                	mov    eax,edx
c0027450:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027455:	89 c3                	mov    ebx,eax
c0027457:	c1 eb 08             	shr    ebx,0x8
c002745a:	80 e2 7f             	and    dl,0x7f
c002745d:	0f 95 c2             	setne  dl
c0027460:	09 da                	or     edx,ebx
c0027462:	83 e2 01             	and    edx,0x1
c0027465:	c1 e8 07             	shr    eax,0x7
c0027468:	21 c2                	and    edx,eax
c002746a:	b8 9e 01 00 00       	mov    eax,0x19e
c002746f:	29 c8                	sub    eax,ecx
c0027471:	c1 e0 17             	shl    eax,0x17
c0027474:	09 d8                	or     eax,ebx
c0027476:	01 d0                	add    eax,edx
c0027478:	5b                   	pop    ebx
c0027479:	5d                   	pop    ebp
c002747a:	c3                   	ret    

c002747b <__floatunsisf>:
c002747b:	55                   	push   ebp
c002747c:	89 e5                	mov    ebp,esp
c002747e:	53                   	push   ebx
c002747f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027482:	31 c0                	xor    eax,eax
c0027484:	85 d2                	test   edx,edx
c0027486:	74 32                	je     c00274ba <__floatunsisf+0x3f>
c0027488:	0f bd ca             	bsr    ecx,edx
c002748b:	83 f1 1f             	xor    ecx,0x1f
c002748e:	d3 e2                	shl    edx,cl
c0027490:	89 d0                	mov    eax,edx
c0027492:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027497:	89 c3                	mov    ebx,eax
c0027499:	c1 eb 08             	shr    ebx,0x8
c002749c:	80 e2 7f             	and    dl,0x7f
c002749f:	0f 95 c2             	setne  dl
c00274a2:	09 da                	or     edx,ebx
c00274a4:	83 e2 01             	and    edx,0x1
c00274a7:	c1 e8 07             	shr    eax,0x7
c00274aa:	21 c2                	and    edx,eax
c00274ac:	b8 9e 00 00 00       	mov    eax,0x9e
c00274b1:	29 c8                	sub    eax,ecx
c00274b3:	c1 e0 17             	shl    eax,0x17
c00274b6:	09 d8                	or     eax,ebx
c00274b8:	01 d0                	add    eax,edx
c00274ba:	5b                   	pop    ebx
c00274bb:	5d                   	pop    ebp
c00274bc:	c3                   	ret    

c00274bd <__fixsfsi>:
c00274bd:	55                   	push   ebp
c00274be:	89 e5                	mov    ebp,esp
c00274c0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00274c3:	89 d1                	mov    ecx,edx
c00274c5:	c1 e1 08             	shl    ecx,0x8
c00274c8:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c00274ce:	c1 fa 17             	sar    edx,0x17
c00274d1:	78 1c                	js     c00274ef <__fixsfsi+0x32>
c00274d3:	83 ea 7f             	sub    edx,0x7f
c00274d6:	31 c0                	xor    eax,eax
c00274d8:	83 fa 1e             	cmp    edx,0x1e
c00274db:	77 40                	ja     c002751d <__fixsfsi+0x60>
c00274dd:	89 c8                	mov    eax,ecx
c00274df:	0d 00 00 00 80       	or     eax,0x80000000
c00274e4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00274e9:	29 d1                	sub    ecx,edx
c00274eb:	d3 e8                	shr    eax,cl
c00274ed:	eb 2e                	jmp    c002751d <__fixsfsi+0x60>
c00274ef:	31 c0                	xor    eax,eax
c00274f1:	81 c2 81 00 00 00    	add    edx,0x81
c00274f7:	78 24                	js     c002751d <__fixsfsi+0x60>
c00274f9:	83 fa 1e             	cmp    edx,0x1e
c00274fc:	7e 09                	jle    c0027507 <__fixsfsi+0x4a>
c00274fe:	83 fa 1f             	cmp    edx,0x1f
c0027501:	75 18                	jne    c002751b <__fixsfsi+0x5e>
c0027503:	85 c9                	test   ecx,ecx
c0027505:	75 14                	jne    c002751b <__fixsfsi+0x5e>
c0027507:	89 c8                	mov    eax,ecx
c0027509:	0d 00 00 00 80       	or     eax,0x80000000
c002750e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027513:	29 d1                	sub    ecx,edx
c0027515:	d3 e8                	shr    eax,cl
c0027517:	f7 d8                	neg    eax
c0027519:	eb 02                	jmp    c002751d <__fixsfsi+0x60>
c002751b:	31 c0                	xor    eax,eax
c002751d:	5d                   	pop    ebp
c002751e:	c3                   	ret    

c002751f <__fixunssfsi>:
c002751f:	55                   	push   ebp
c0027520:	89 e5                	mov    ebp,esp
c0027522:	53                   	push   ebx
c0027523:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027526:	89 d3                	mov    ebx,edx
c0027528:	c1 fb 17             	sar    ebx,0x17
c002752b:	83 eb 7f             	sub    ebx,0x7f
c002752e:	31 c0                	xor    eax,eax
c0027530:	83 fb 1f             	cmp    ebx,0x1f
c0027533:	77 18                	ja     c002754d <__fixunssfsi+0x2e>
c0027535:	89 d0                	mov    eax,edx
c0027537:	c1 e0 08             	shl    eax,0x8
c002753a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002753f:	0d 00 00 00 80       	or     eax,0x80000000
c0027544:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027549:	29 d9                	sub    ecx,ebx
c002754b:	d3 e8                	shr    eax,cl
c002754d:	5b                   	pop    ebx
c002754e:	5d                   	pop    ebp
c002754f:	c3                   	ret    

c0027550 <__cmpsf2>:
c0027550:	55                   	push   ebp
c0027551:	89 e5                	mov    ebp,esp
c0027553:	57                   	push   edi
c0027554:	56                   	push   esi
c0027555:	53                   	push   ebx
c0027556:	83 ec 24             	sub    esp,0x24
c0027559:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002755c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002755f:	e8 4f 10 00 00       	call   c00285b3 <__truncdfsf2>
c0027564:	5a                   	pop    edx
c0027565:	59                   	pop    ecx
c0027566:	89 c3                	mov    ebx,eax
c0027568:	c1 e8 17             	shr    eax,0x17
c002756b:	0f b6 f0             	movzx  esi,al
c002756e:	89 d8                	mov    eax,ebx
c0027570:	c1 e8 1f             	shr    eax,0x1f
c0027573:	31 c6                	xor    esi,eax
c0027575:	c1 e3 08             	shl    ebx,0x8
c0027578:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002757b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002757e:	e8 30 10 00 00       	call   c00285b3 <__truncdfsf2>
c0027583:	83 c4 10             	add    esp,0x10
c0027586:	89 c1                	mov    ecx,eax
c0027588:	c1 e9 17             	shr    ecx,0x17
c002758b:	0f b6 c9             	movzx  ecx,cl
c002758e:	89 c7                	mov    edi,eax
c0027590:	c1 ef 1f             	shr    edi,0x1f
c0027593:	89 ca                	mov    edx,ecx
c0027595:	31 fa                	xor    edx,edi
c0027597:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002759a:	c1 e0 08             	shl    eax,0x8
c002759d:	89 c2                	mov    edx,eax
c002759f:	89 d8                	mov    eax,ebx
c00275a1:	09 d0                	or     eax,edx
c00275a3:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00275a8:	09 f0                	or     eax,esi
c00275aa:	75 08                	jne    c00275b4 <__cmpsf2+0x64>
c00275ac:	31 c0                	xor    eax,eax
c00275ae:	39 f9                	cmp    ecx,edi
c00275b0:	75 0c                	jne    c00275be <__cmpsf2+0x6e>
c00275b2:	eb 29                	jmp    c00275dd <__cmpsf2+0x8d>
c00275b4:	b8 01 00 00 00       	mov    eax,0x1
c00275b9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00275bc:	7f 1f                	jg     c00275dd <__cmpsf2+0x8d>
c00275be:	83 c8 ff             	or     eax,0xffffffff
c00275c1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00275c4:	7c 17                	jl     c00275dd <__cmpsf2+0x8d>
c00275c6:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00275cc:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00275d2:	b8 01 00 00 00       	mov    eax,0x1
c00275d7:	39 d3                	cmp    ebx,edx
c00275d9:	77 02                	ja     c00275dd <__cmpsf2+0x8d>
c00275db:	19 c0                	sbb    eax,eax
c00275dd:	8d 65 f4             	lea    esp,[ebp-0xc]
c00275e0:	5b                   	pop    ebx
c00275e1:	5e                   	pop    esi
c00275e2:	5f                   	pop    edi
c00275e3:	5d                   	pop    ebp
c00275e4:	c3                   	ret    

c00275e5 <__eqsf2>:
c00275e5:	55                   	push   ebp
c00275e6:	89 e5                	mov    ebp,esp
c00275e8:	83 ec 24             	sub    esp,0x24
c00275eb:	6a 01                	push   0x1
c00275ed:	83 ec 0c             	sub    esp,0xc
c00275f0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00275f3:	e8 df 10 00 00       	call   c00286d7 <__extendsfdf2>
c00275f8:	83 c4 10             	add    esp,0x10
c00275fb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00275fe:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027601:	52                   	push   edx
c0027602:	50                   	push   eax
c0027603:	50                   	push   eax
c0027604:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027607:	e8 cb 10 00 00       	call   c00286d7 <__extendsfdf2>
c002760c:	59                   	pop    ecx
c002760d:	59                   	pop    ecx
c002760e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027611:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027614:	52                   	push   edx
c0027615:	50                   	push   eax
c0027616:	e8 35 ff ff ff       	call   c0027550 <__cmpsf2>
c002761b:	83 c4 20             	add    esp,0x20
c002761e:	c9                   	leave  
c002761f:	c3                   	ret    

c0027620 <__nesf2>:
c0027620:	eb c3                	jmp    c00275e5 <__eqsf2>

c0027622 <__gtsf2>:
c0027622:	55                   	push   ebp
c0027623:	89 e5                	mov    ebp,esp
c0027625:	83 ec 24             	sub    esp,0x24
c0027628:	6a ff                	push   0xffffffff
c002762a:	83 ec 0c             	sub    esp,0xc
c002762d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027630:	e8 a2 10 00 00       	call   c00286d7 <__extendsfdf2>
c0027635:	83 c4 10             	add    esp,0x10
c0027638:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002763b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002763e:	52                   	push   edx
c002763f:	50                   	push   eax
c0027640:	50                   	push   eax
c0027641:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027644:	e8 8e 10 00 00       	call   c00286d7 <__extendsfdf2>
c0027649:	59                   	pop    ecx
c002764a:	59                   	pop    ecx
c002764b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002764e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027651:	52                   	push   edx
c0027652:	50                   	push   eax
c0027653:	e8 f8 fe ff ff       	call   c0027550 <__cmpsf2>
c0027658:	83 c4 20             	add    esp,0x20
c002765b:	c9                   	leave  
c002765c:	c3                   	ret    

c002765d <__gesf2>:
c002765d:	eb c3                	jmp    c0027622 <__gtsf2>

c002765f <__ltsf2>:
c002765f:	eb 84                	jmp    c00275e5 <__eqsf2>

c0027661 <__lesf2>:
c0027661:	eb 82                	jmp    c00275e5 <__eqsf2>

c0027663 <__adddf3>:
c0027663:	55                   	push   ebp
c0027664:	89 e5                	mov    ebp,esp
c0027666:	57                   	push   edi
c0027667:	56                   	push   esi
c0027668:	53                   	push   ebx
c0027669:	83 ec 24             	sub    esp,0x24
c002766c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002766f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027672:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027675:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027678:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002767b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002767e:	89 c8                	mov    eax,ecx
c0027680:	89 ce                	mov    esi,ecx
c0027682:	c1 fe 14             	sar    esi,0x14
c0027685:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027688:	89 fb                	mov    ebx,edi
c002768a:	89 fa                	mov    edx,edi
c002768c:	c1 e2 0b             	shl    edx,0xb
c002768f:	c1 e0 0b             	shl    eax,0xb
c0027692:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027697:	c1 eb 15             	shr    ebx,0x15
c002769a:	09 d8                	or     eax,ebx
c002769c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002769f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00276a2:	c1 fe 14             	sar    esi,0x14
c00276a5:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00276a8:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00276ab:	89 f3                	mov    ebx,esi
c00276ad:	c1 e3 0b             	shl    ebx,0xb
c00276b0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00276b3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00276b6:	c1 e3 0b             	shl    ebx,0xb
c00276b9:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00276bf:	c1 ee 15             	shr    esi,0x15
c00276c2:	09 f3                	or     ebx,esi
c00276c4:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00276c7:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00276ca:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00276cd:	0f 88 5f 02 00 00    	js     c0027932 <__adddf3+0x2cf>
c00276d3:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00276d6:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00276d9:	85 db                	test   ebx,ebx
c00276db:	0f 8e c7 00 00 00    	jle    c00277a8 <__adddf3+0x145>
c00276e1:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00276e8:	75 1a                	jne    c0027704 <__adddf3+0xa1>
c00276ea:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00276ed:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00276f0:	0f 84 b2 05 00 00    	je     c0027ca8 <__adddf3+0x645>
c00276f6:	4b                   	dec    ebx
c00276f7:	75 23                	jne    c002771c <__adddf3+0xb9>
c00276f9:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00276fc:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00276ff:	e9 99 00 00 00       	jmp    c002779d <__adddf3+0x13a>
c0027704:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027707:	f7 d6                	not    esi
c0027709:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002770f:	0f 84 93 05 00 00    	je     c0027ca8 <__adddf3+0x645>
c0027715:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002771c:	83 fb 1f             	cmp    ebx,0x1f
c002771f:	7e 42                	jle    c0027763 <__adddf3+0x100>
c0027721:	83 fb 3f             	cmp    ebx,0x3f
c0027724:	0f 8f 7e 05 00 00    	jg     c0027ca8 <__adddf3+0x645>
c002772a:	83 e3 1f             	and    ebx,0x1f
c002772d:	89 d9                	mov    ecx,ebx
c002772f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027732:	d3 ef                	shr    edi,cl
c0027734:	31 db                	xor    ebx,ebx
c0027736:	85 c9                	test   ecx,ecx
c0027738:	74 15                	je     c002774f <__adddf3+0xec>
c002773a:	be 20 00 00 00       	mov    esi,0x20
c002773f:	29 ce                	sub    esi,ecx
c0027741:	89 f1                	mov    ecx,esi
c0027743:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027746:	d3 e6                	shl    esi,cl
c0027748:	31 db                	xor    ebx,ebx
c002774a:	85 f6                	test   esi,esi
c002774c:	0f 95 c3             	setne  bl
c002774f:	31 c9                	xor    ecx,ecx
c0027751:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027755:	0f 95 c1             	setne  cl
c0027758:	09 cf                	or     edi,ecx
c002775a:	09 fb                	or     ebx,edi
c002775c:	01 da                	add    edx,ebx
c002775e:	83 d0 00             	adc    eax,0x0
c0027761:	eb 3a                	jmp    c002779d <__adddf3+0x13a>
c0027763:	bf 20 00 00 00       	mov    edi,0x20
c0027768:	29 df                	sub    edi,ebx
c002776a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002776d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027770:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027773:	d3 e6                	shl    esi,cl
c0027775:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027778:	88 d9                	mov    cl,bl
c002777a:	d3 ef                	shr    edi,cl
c002777c:	09 fe                	or     esi,edi
c002777e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027781:	88 d9                	mov    cl,bl
c0027783:	d3 ef                	shr    edi,cl
c0027785:	89 fb                	mov    ebx,edi
c0027787:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002778a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002778d:	d3 e7                	shl    edi,cl
c002778f:	85 ff                	test   edi,edi
c0027791:	0f 95 c1             	setne  cl
c0027794:	0f b6 c9             	movzx  ecx,cl
c0027797:	09 ce                	or     esi,ecx
c0027799:	01 f2                	add    edx,esi
c002779b:	11 d8                	adc    eax,ebx
c002779d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00277a0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00277a3:	e9 52 01 00 00       	jmp    c00278fa <__adddf3+0x297>
c00277a8:	0f 84 d5 00 00 00    	je     c0027883 <__adddf3+0x220>
c00277ae:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00277b1:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00277b4:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00277b7:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00277ba:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00277c1:	75 20                	jne    c00277e3 <__adddf3+0x180>
c00277c3:	89 d6                	mov    esi,edx
c00277c5:	09 c6                	or     esi,eax
c00277c7:	0f 84 db 04 00 00    	je     c0027ca8 <__adddf3+0x645>
c00277cd:	4b                   	dec    ebx
c00277ce:	75 29                	jne    c00277f9 <__adddf3+0x196>
c00277d0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00277d3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00277d6:	01 d1                	add    ecx,edx
c00277d8:	11 c6                	adc    esi,eax
c00277da:	89 f0                	mov    eax,esi
c00277dc:	89 ca                	mov    edx,ecx
c00277de:	e9 17 01 00 00       	jmp    c00278fa <__adddf3+0x297>
c00277e3:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00277e6:	f7 d6                	not    esi
c00277e8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00277ee:	0f 84 b4 04 00 00    	je     c0027ca8 <__adddf3+0x645>
c00277f4:	0d 00 00 00 80       	or     eax,0x80000000
c00277f9:	83 fb 1f             	cmp    ebx,0x1f
c00277fc:	7e 48                	jle    c0027846 <__adddf3+0x1e3>
c00277fe:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027801:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027804:	83 fb 3f             	cmp    ebx,0x3f
c0027807:	0f 8f 9b 04 00 00    	jg     c0027ca8 <__adddf3+0x645>
c002780d:	83 e3 1f             	and    ebx,0x1f
c0027810:	89 d9                	mov    ecx,ebx
c0027812:	89 c7                	mov    edi,eax
c0027814:	d3 ef                	shr    edi,cl
c0027816:	31 db                	xor    ebx,ebx
c0027818:	85 c9                	test   ecx,ecx
c002781a:	74 12                	je     c002782e <__adddf3+0x1cb>
c002781c:	be 20 00 00 00       	mov    esi,0x20
c0027821:	29 ce                	sub    esi,ecx
c0027823:	89 f1                	mov    ecx,esi
c0027825:	d3 e0                	shl    eax,cl
c0027827:	31 db                	xor    ebx,ebx
c0027829:	85 c0                	test   eax,eax
c002782b:	0f 95 c3             	setne  bl
c002782e:	31 c0                	xor    eax,eax
c0027830:	85 d2                	test   edx,edx
c0027832:	0f 95 c0             	setne  al
c0027835:	09 c7                	or     edi,eax
c0027837:	09 fb                	or     ebx,edi
c0027839:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002783c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002783f:	01 da                	add    edx,ebx
c0027841:	83 d6 00             	adc    esi,0x0
c0027844:	eb 39                	jmp    c002787f <__adddf3+0x21c>
c0027846:	be 20 00 00 00       	mov    esi,0x20
c002784b:	29 de                	sub    esi,ebx
c002784d:	89 c7                	mov    edi,eax
c002784f:	89 f1                	mov    ecx,esi
c0027851:	d3 e7                	shl    edi,cl
c0027853:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027856:	89 d7                	mov    edi,edx
c0027858:	88 d9                	mov    cl,bl
c002785a:	d3 ef                	shr    edi,cl
c002785c:	89 f9                	mov    ecx,edi
c002785e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027861:	09 cf                	or     edi,ecx
c0027863:	88 d9                	mov    cl,bl
c0027865:	d3 e8                	shr    eax,cl
c0027867:	89 f1                	mov    ecx,esi
c0027869:	d3 e2                	shl    edx,cl
c002786b:	85 d2                	test   edx,edx
c002786d:	0f 95 c2             	setne  dl
c0027870:	0f b6 d2             	movzx  edx,dl
c0027873:	09 d7                	or     edi,edx
c0027875:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027878:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002787b:	01 fa                	add    edx,edi
c002787d:	11 c6                	adc    esi,eax
c002787f:	89 f0                	mov    eax,esi
c0027881:	eb 77                	jmp    c00278fa <__adddf3+0x297>
c0027883:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027886:	46                   	inc    esi
c0027887:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002788a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027890:	75 41                	jne    c00278d3 <__adddf3+0x270>
c0027892:	89 d3                	mov    ebx,edx
c0027894:	09 c3                	or     ebx,eax
c0027896:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002789d:	75 27                	jne    c00278c6 <__adddf3+0x263>
c002789f:	85 db                	test   ebx,ebx
c00278a1:	0f 84 fb 03 00 00    	je     c0027ca2 <__adddf3+0x63f>
c00278a7:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00278aa:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00278ad:	0f 84 f5 03 00 00    	je     c0027ca8 <__adddf3+0x645>
c00278b3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00278b6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00278b9:	85 c0                	test   eax,eax
c00278bb:	0f 89 91 03 00 00    	jns    c0027c52 <__adddf3+0x5ef>
c00278c1:	e9 85 03 00 00       	jmp    c0027c4b <__adddf3+0x5e8>
c00278c6:	85 db                	test   ebx,ebx
c00278c8:	0f 85 da 03 00 00    	jne    c0027ca8 <__adddf3+0x645>
c00278ce:	e9 cf 03 00 00       	jmp    c0027ca2 <__adddf3+0x63f>
c00278d3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00278d6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00278d9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00278dc:	f7 d1                	not    ecx
c00278de:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00278e4:	0f 84 70 03 00 00    	je     c0027c5a <__adddf3+0x5f7>
c00278ea:	d1 ea                	shr    edx,1
c00278ec:	89 c1                	mov    ecx,eax
c00278ee:	c1 e1 1f             	shl    ecx,0x1f
c00278f1:	09 ca                	or     edx,ecx
c00278f3:	d1 e8                	shr    eax,1
c00278f5:	e9 6f 03 00 00       	jmp    c0027c69 <__adddf3+0x606>
c00278fa:	85 c0                	test   eax,eax
c00278fc:	0f 89 67 03 00 00    	jns    c0027c69 <__adddf3+0x606>
c0027902:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027905:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027908:	f7 d1                	not    ecx
c002790a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027910:	0f 84 44 03 00 00    	je     c0027c5a <__adddf3+0x5f7>
c0027916:	89 d1                	mov    ecx,edx
c0027918:	d1 e9                	shr    ecx,1
c002791a:	83 e2 01             	and    edx,0x1
c002791d:	09 ca                	or     edx,ecx
c002791f:	89 c1                	mov    ecx,eax
c0027921:	c1 e1 1f             	shl    ecx,0x1f
c0027924:	09 ca                	or     edx,ecx
c0027926:	d1 e8                	shr    eax,1
c0027928:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002792d:	e9 37 03 00 00       	jmp    c0027c69 <__adddf3+0x606>
c0027932:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027935:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002793b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002793e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027941:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027947:	29 de                	sub    esi,ebx
c0027949:	85 f6                	test   esi,esi
c002794b:	0f 8e bd 00 00 00    	jle    c0027a0e <__adddf3+0x3ab>
c0027951:	85 db                	test   ebx,ebx
c0027953:	75 17                	jne    c002796c <__adddf3+0x309>
c0027955:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027958:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002795b:	0f 84 47 03 00 00    	je     c0027ca8 <__adddf3+0x645>
c0027961:	4e                   	dec    esi
c0027962:	75 20                	jne    c0027984 <__adddf3+0x321>
c0027964:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027967:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002796a:	eb 5b                	jmp    c00279c7 <__adddf3+0x364>
c002796c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002796f:	f7 d3                	not    ebx
c0027971:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027977:	0f 84 2b 03 00 00    	je     c0027ca8 <__adddf3+0x645>
c002797d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027984:	83 fe 1f             	cmp    esi,0x1f
c0027987:	7e 49                	jle    c00279d2 <__adddf3+0x36f>
c0027989:	83 fe 3f             	cmp    esi,0x3f
c002798c:	0f 8f 16 03 00 00    	jg     c0027ca8 <__adddf3+0x645>
c0027992:	83 e6 1f             	and    esi,0x1f
c0027995:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027998:	89 f1                	mov    ecx,esi
c002799a:	d3 ef                	shr    edi,cl
c002799c:	31 db                	xor    ebx,ebx
c002799e:	85 f6                	test   esi,esi
c00279a0:	74 13                	je     c00279b5 <__adddf3+0x352>
c00279a2:	b9 20 00 00 00       	mov    ecx,0x20
c00279a7:	29 f1                	sub    ecx,esi
c00279a9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279ac:	d3 e6                	shl    esi,cl
c00279ae:	31 db                	xor    ebx,ebx
c00279b0:	85 f6                	test   esi,esi
c00279b2:	0f 95 c3             	setne  bl
c00279b5:	31 c9                	xor    ecx,ecx
c00279b7:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00279bb:	0f 95 c1             	setne  cl
c00279be:	09 cf                	or     edi,ecx
c00279c0:	09 fb                	or     ebx,edi
c00279c2:	29 da                	sub    edx,ebx
c00279c4:	83 d8 00             	sbb    eax,0x0
c00279c7:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279ca:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00279cd:	e9 aa 01 00 00       	jmp    c0027b7c <__adddf3+0x519>
c00279d2:	bf 20 00 00 00       	mov    edi,0x20
c00279d7:	29 f7                	sub    edi,esi
c00279d9:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00279dc:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00279df:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00279e2:	d3 e3                	shl    ebx,cl
c00279e4:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00279e7:	89 f1                	mov    ecx,esi
c00279e9:	d3 ef                	shr    edi,cl
c00279eb:	09 fb                	or     ebx,edi
c00279ed:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00279f0:	89 f1                	mov    ecx,esi
c00279f2:	d3 ef                	shr    edi,cl
c00279f4:	89 fe                	mov    esi,edi
c00279f6:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00279f9:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00279fc:	d3 e7                	shl    edi,cl
c00279fe:	85 ff                	test   edi,edi
c0027a00:	0f 95 c1             	setne  cl
c0027a03:	0f b6 c9             	movzx  ecx,cl
c0027a06:	09 cb                	or     ebx,ecx
c0027a08:	29 da                	sub    edx,ebx
c0027a0a:	19 f0                	sbb    eax,esi
c0027a0c:	eb b9                	jmp    c00279c7 <__adddf3+0x364>
c0027a0e:	0f 84 cd 00 00 00    	je     c0027ae1 <__adddf3+0x47e>
c0027a14:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027a17:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a1a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a1d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027a21:	75 1b                	jne    c0027a3e <__adddf3+0x3db>
c0027a23:	89 d6                	mov    esi,edx
c0027a25:	09 c6                	or     esi,eax
c0027a27:	0f 84 7b 02 00 00    	je     c0027ca8 <__adddf3+0x645>
c0027a2d:	4b                   	dec    ebx
c0027a2e:	75 24                	jne    c0027a54 <__adddf3+0x3f1>
c0027a30:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a33:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027a36:	29 d1                	sub    ecx,edx
c0027a38:	19 c6                	sbb    esi,eax
c0027a3a:	89 ca                	mov    edx,ecx
c0027a3c:	eb 61                	jmp    c0027a9f <__adddf3+0x43c>
c0027a3e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027a41:	f7 d6                	not    esi
c0027a43:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027a49:	0f 84 59 02 00 00    	je     c0027ca8 <__adddf3+0x645>
c0027a4f:	0d 00 00 00 80       	or     eax,0x80000000
c0027a54:	83 fb 1f             	cmp    ebx,0x1f
c0027a57:	7e 4d                	jle    c0027aa6 <__adddf3+0x443>
c0027a59:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a5c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a5f:	83 fb 3f             	cmp    ebx,0x3f
c0027a62:	0f 8f 40 02 00 00    	jg     c0027ca8 <__adddf3+0x645>
c0027a68:	83 e3 1f             	and    ebx,0x1f
c0027a6b:	89 d9                	mov    ecx,ebx
c0027a6d:	89 c7                	mov    edi,eax
c0027a6f:	d3 ef                	shr    edi,cl
c0027a71:	31 db                	xor    ebx,ebx
c0027a73:	85 c9                	test   ecx,ecx
c0027a75:	74 12                	je     c0027a89 <__adddf3+0x426>
c0027a77:	be 20 00 00 00       	mov    esi,0x20
c0027a7c:	29 ce                	sub    esi,ecx
c0027a7e:	89 f1                	mov    ecx,esi
c0027a80:	d3 e0                	shl    eax,cl
c0027a82:	31 db                	xor    ebx,ebx
c0027a84:	85 c0                	test   eax,eax
c0027a86:	0f 95 c3             	setne  bl
c0027a89:	31 c0                	xor    eax,eax
c0027a8b:	85 d2                	test   edx,edx
c0027a8d:	0f 95 c0             	setne  al
c0027a90:	09 c7                	or     edi,eax
c0027a92:	09 fb                	or     ebx,edi
c0027a94:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a97:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a9a:	29 da                	sub    edx,ebx
c0027a9c:	83 de 00             	sbb    esi,0x0
c0027a9f:	89 f0                	mov    eax,esi
c0027aa1:	e9 d6 00 00 00       	jmp    c0027b7c <__adddf3+0x519>
c0027aa6:	be 20 00 00 00       	mov    esi,0x20
c0027aab:	29 de                	sub    esi,ebx
c0027aad:	89 c7                	mov    edi,eax
c0027aaf:	89 f1                	mov    ecx,esi
c0027ab1:	d3 e7                	shl    edi,cl
c0027ab3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027ab6:	89 d7                	mov    edi,edx
c0027ab8:	88 d9                	mov    cl,bl
c0027aba:	d3 ef                	shr    edi,cl
c0027abc:	89 f9                	mov    ecx,edi
c0027abe:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027ac1:	09 cf                	or     edi,ecx
c0027ac3:	88 d9                	mov    cl,bl
c0027ac5:	d3 e8                	shr    eax,cl
c0027ac7:	89 f1                	mov    ecx,esi
c0027ac9:	d3 e2                	shl    edx,cl
c0027acb:	85 d2                	test   edx,edx
c0027acd:	0f 95 c2             	setne  dl
c0027ad0:	0f b6 d2             	movzx  edx,dl
c0027ad3:	09 d7                	or     edi,edx
c0027ad5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027ad8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027adb:	29 fa                	sub    edx,edi
c0027add:	19 c6                	sbb    esi,eax
c0027adf:	eb be                	jmp    c0027a9f <__adddf3+0x43c>
c0027ae1:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027ae4:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027ae7:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027aed:	75 6a                	jne    c0027b59 <__adddf3+0x4f6>
c0027aef:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027af3:	75 58                	jne    c0027b4d <__adddf3+0x4ea>
c0027af5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027af8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027afb:	89 d6                	mov    esi,edx
c0027afd:	09 c6                	or     esi,eax
c0027aff:	75 17                	jne    c0027b18 <__adddf3+0x4b5>
c0027b01:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027b04:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027b07:	85 db                	test   ebx,ebx
c0027b09:	0f 85 99 01 00 00    	jne    c0027ca8 <__adddf3+0x645>
c0027b0f:	31 ff                	xor    edi,edi
c0027b11:	31 c9                	xor    ecx,ecx
c0027b13:	e9 90 01 00 00       	jmp    c0027ca8 <__adddf3+0x645>
c0027b18:	85 db                	test   ebx,ebx
c0027b1a:	0f 84 88 01 00 00    	je     c0027ca8 <__adddf3+0x645>
c0027b20:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027b23:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027b26:	85 c0                	test   eax,eax
c0027b28:	79 10                	jns    c0027b3a <__adddf3+0x4d7>
c0027b2a:	31 c9                	xor    ecx,ecx
c0027b2c:	f7 da                	neg    edx
c0027b2e:	0f 95 c1             	setne  cl
c0027b31:	01 c8                	add    eax,ecx
c0027b33:	f7 d8                	neg    eax
c0027b35:	e9 2f 01 00 00       	jmp    c0027c69 <__adddf3+0x606>
c0027b3a:	31 ff                	xor    edi,edi
c0027b3c:	31 c9                	xor    ecx,ecx
c0027b3e:	89 c3                	mov    ebx,eax
c0027b40:	09 d3                	or     ebx,edx
c0027b42:	0f 84 60 01 00 00    	je     c0027ca8 <__adddf3+0x645>
c0027b48:	e9 05 01 00 00       	jmp    c0027c52 <__adddf3+0x5ef>
c0027b4d:	31 ff                	xor    edi,edi
c0027b4f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027b54:	e9 4f 01 00 00       	jmp    c0027ca8 <__adddf3+0x645>
c0027b59:	89 c1                	mov    ecx,eax
c0027b5b:	89 d0                	mov    eax,edx
c0027b5d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027b60:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027b63:	89 ca                	mov    edx,ecx
c0027b65:	85 c9                	test   ecx,ecx
c0027b67:	79 2c                	jns    c0027b95 <__adddf3+0x532>
c0027b69:	31 c9                	xor    ecx,ecx
c0027b6b:	f7 d8                	neg    eax
c0027b6d:	0f 95 c1             	setne  cl
c0027b70:	01 ca                	add    edx,ecx
c0027b72:	f7 da                	neg    edx
c0027b74:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027b77:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027b7a:	eb 19                	jmp    c0027b95 <__adddf3+0x532>
c0027b7c:	85 c0                	test   eax,eax
c0027b7e:	0f 89 e5 00 00 00    	jns    c0027c69 <__adddf3+0x606>
c0027b84:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b89:	89 c1                	mov    ecx,eax
c0027b8b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027b8e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027b91:	89 d0                	mov    eax,edx
c0027b93:	89 ca                	mov    edx,ecx
c0027b95:	85 d2                	test   edx,edx
c0027b97:	74 59                	je     c0027bf2 <__adddf3+0x58f>
c0027b99:	0f bd da             	bsr    ebx,edx
c0027b9c:	83 f3 1f             	xor    ebx,0x1f
c0027b9f:	88 d9                	mov    cl,bl
c0027ba1:	d3 e2                	shl    edx,cl
c0027ba3:	bf 20 00 00 00       	mov    edi,0x20
c0027ba8:	89 f9                	mov    ecx,edi
c0027baa:	29 d9                	sub    ecx,ebx
c0027bac:	89 c6                	mov    esi,eax
c0027bae:	d3 ee                	shr    esi,cl
c0027bb0:	09 d6                	or     esi,edx
c0027bb2:	88 d9                	mov    cl,bl
c0027bb4:	d3 e0                	shl    eax,cl
c0027bb6:	89 c2                	mov    edx,eax
c0027bb8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027bbb:	25 ff 07 00 00       	and    eax,0x7ff
c0027bc0:	39 d8                	cmp    eax,ebx
c0027bc2:	7f 22                	jg     c0027be6 <__adddf3+0x583>
c0027bc4:	29 c3                	sub    ebx,eax
c0027bc6:	43                   	inc    ebx
c0027bc7:	88 d9                	mov    cl,bl
c0027bc9:	d3 ea                	shr    edx,cl
c0027bcb:	29 df                	sub    edi,ebx
c0027bcd:	89 f9                	mov    ecx,edi
c0027bcf:	89 f0                	mov    eax,esi
c0027bd1:	d3 e0                	shl    eax,cl
c0027bd3:	09 c2                	or     edx,eax
c0027bd5:	89 f0                	mov    eax,esi
c0027bd7:	88 d9                	mov    cl,bl
c0027bd9:	d3 e8                	shr    eax,cl
c0027bdb:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027bde:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027be4:	eb 6f                	jmp    c0027c55 <__adddf3+0x5f2>
c0027be6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027be9:	29 d8                	sub    eax,ebx
c0027beb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bee:	89 f0                	mov    eax,esi
c0027bf0:	eb 59                	jmp    c0027c4b <__adddf3+0x5e8>
c0027bf2:	85 c0                	test   eax,eax
c0027bf4:	74 6a                	je     c0027c60 <__adddf3+0x5fd>
c0027bf6:	0f bd c8             	bsr    ecx,eax
c0027bf9:	83 f1 1f             	xor    ecx,0x1f
c0027bfc:	d3 e0                	shl    eax,cl
c0027bfe:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027c01:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027c07:	83 c1 20             	add    ecx,0x20
c0027c0a:	39 cb                	cmp    ebx,ecx
c0027c0c:	7f 35                	jg     c0027c43 <__adddf3+0x5e0>
c0027c0e:	29 d9                	sub    ecx,ebx
c0027c10:	8d 71 01             	lea    esi,[ecx+0x1]
c0027c13:	83 fe 1f             	cmp    esi,0x1f
c0027c16:	7e 09                	jle    c0027c21 <__adddf3+0x5be>
c0027c18:	83 e9 1f             	sub    ecx,0x1f
c0027c1b:	d3 e8                	shr    eax,cl
c0027c1d:	89 c3                	mov    ebx,eax
c0027c1f:	eb 11                	jmp    c0027c32 <__adddf3+0x5cf>
c0027c21:	b9 20 00 00 00       	mov    ecx,0x20
c0027c26:	29 f1                	sub    ecx,esi
c0027c28:	89 c3                	mov    ebx,eax
c0027c2a:	d3 e3                	shl    ebx,cl
c0027c2c:	89 f1                	mov    ecx,esi
c0027c2e:	d3 e8                	shr    eax,cl
c0027c30:	89 c2                	mov    edx,eax
c0027c32:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c35:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027c3a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c3d:	89 d0                	mov    eax,edx
c0027c3f:	89 da                	mov    edx,ebx
c0027c41:	eb 26                	jmp    c0027c69 <__adddf3+0x606>
c0027c43:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c46:	29 cf                	sub    edi,ecx
c0027c48:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027c4b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027c50:	eb 17                	jmp    c0027c69 <__adddf3+0x606>
c0027c52:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c55:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027c58:	eb 0f                	jmp    c0027c69 <__adddf3+0x606>
c0027c5a:	31 d2                	xor    edx,edx
c0027c5c:	31 c0                	xor    eax,eax
c0027c5e:	eb 09                	jmp    c0027c69 <__adddf3+0x606>
c0027c60:	89 c2                	mov    edx,eax
c0027c62:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027c69:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c6c:	c1 e1 14             	shl    ecx,0x14
c0027c6f:	89 c3                	mov    ebx,eax
c0027c71:	c1 eb 0b             	shr    ebx,0xb
c0027c74:	09 d9                	or     ecx,ebx
c0027c76:	89 d3                	mov    ebx,edx
c0027c78:	c1 eb 0b             	shr    ebx,0xb
c0027c7b:	c1 e0 15             	shl    eax,0x15
c0027c7e:	09 d8                	or     eax,ebx
c0027c80:	89 c7                	mov    edi,eax
c0027c82:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027c88:	0f 95 c0             	setne  al
c0027c8b:	89 c6                	mov    esi,eax
c0027c8d:	09 f3                	or     ebx,esi
c0027c8f:	83 e3 01             	and    ebx,0x1
c0027c92:	c1 ea 0a             	shr    edx,0xa
c0027c95:	21 da                	and    edx,ebx
c0027c97:	89 f8                	mov    eax,edi
c0027c99:	01 d0                	add    eax,edx
c0027c9b:	83 d1 00             	adc    ecx,0x0
c0027c9e:	89 c7                	mov    edi,eax
c0027ca0:	eb 06                	jmp    c0027ca8 <__adddf3+0x645>
c0027ca2:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027ca5:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027ca8:	89 f8                	mov    eax,edi
c0027caa:	89 ca                	mov    edx,ecx
c0027cac:	83 c4 24             	add    esp,0x24
c0027caf:	5b                   	pop    ebx
c0027cb0:	5e                   	pop    esi
c0027cb1:	5f                   	pop    edi
c0027cb2:	5d                   	pop    ebp
c0027cb3:	c3                   	ret    

c0027cb4 <__subdf3>:
c0027cb4:	55                   	push   ebp
c0027cb5:	89 e5                	mov    ebp,esp
c0027cb7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027cba:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027cbd:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027cc3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027cc6:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027cc9:	5d                   	pop    ebp
c0027cca:	e9 94 f9 ff ff       	jmp    c0027663 <__adddf3>

c0027ccf <__negdf2>:
c0027ccf:	55                   	push   ebp
c0027cd0:	89 e5                	mov    ebp,esp
c0027cd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027cd5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027cd8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027cde:	5d                   	pop    ebp
c0027cdf:	c3                   	ret    

c0027ce0 <__muldf3>:
c0027ce0:	55                   	push   ebp
c0027ce1:	89 e5                	mov    ebp,esp
c0027ce3:	57                   	push   edi
c0027ce4:	56                   	push   esi
c0027ce5:	53                   	push   ebx
c0027ce6:	83 ec 24             	sub    esp,0x24
c0027ce9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027cec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027cef:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027cf2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027cf5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027cf8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027cfb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027cfe:	89 c8                	mov    eax,ecx
c0027d00:	c1 f8 14             	sar    eax,0x14
c0027d03:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027d06:	89 f8                	mov    eax,edi
c0027d08:	89 fb                	mov    ebx,edi
c0027d0a:	c1 e3 0b             	shl    ebx,0xb
c0027d0d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027d10:	c1 e1 0b             	shl    ecx,0xb
c0027d13:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027d19:	c1 e8 15             	shr    eax,0x15
c0027d1c:	09 c1                	or     ecx,eax
c0027d1e:	89 d6                	mov    esi,edx
c0027d20:	89 d0                	mov    eax,edx
c0027d22:	c1 f8 14             	sar    eax,0x14
c0027d25:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027d28:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027d2b:	89 c3                	mov    ebx,eax
c0027d2d:	c1 e3 0b             	shl    ebx,0xb
c0027d30:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027d33:	c1 e6 0b             	shl    esi,0xb
c0027d36:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027d3c:	c1 e8 15             	shr    eax,0x15
c0027d3f:	09 c6                	or     esi,eax
c0027d41:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d44:	25 ff 07 00 00       	and    eax,0x7ff
c0027d49:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027d4c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d4f:	25 ff 07 00 00       	and    eax,0x7ff
c0027d54:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027d57:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027d5a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027d5d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027d64:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d67:	40                   	inc    eax
c0027d68:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d6d:	0f 85 8d 00 00 00    	jne    c0027e00 <__muldf3+0x120>
c0027d73:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d76:	09 c8                	or     eax,ecx
c0027d78:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027d7c:	74 44                	je     c0027dc2 <__muldf3+0xe2>
c0027d7e:	85 c0                	test   eax,eax
c0027d80:	0f 85 31 02 00 00    	jne    c0027fb7 <__muldf3+0x2d7>
c0027d86:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d89:	40                   	inc    eax
c0027d8a:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d8f:	75 13                	jne    c0027da4 <__muldf3+0xc4>
c0027d91:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027d94:	09 f1                	or     ecx,esi
c0027d96:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027d9a:	74 22                	je     c0027dbe <__muldf3+0xde>
c0027d9c:	85 c9                	test   ecx,ecx
c0027d9e:	0f 85 0d 02 00 00    	jne    c0027fb1 <__muldf3+0x2d1>
c0027da4:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027da8:	0f 89 09 02 00 00    	jns    c0027fb7 <__muldf3+0x2d7>
c0027dae:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027db1:	05 00 00 00 80       	add    eax,0x80000000
c0027db6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027db9:	e9 f9 01 00 00       	jmp    c0027fb7 <__muldf3+0x2d7>
c0027dbe:	85 c9                	test   ecx,ecx
c0027dc0:	eb 2e                	jmp    c0027df0 <__muldf3+0x110>
c0027dc2:	85 c0                	test   eax,eax
c0027dc4:	74 20                	je     c0027de6 <__muldf3+0x106>
c0027dc6:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027dc9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027dcc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027dcf:	c1 ef 1f             	shr    edi,0x1f
c0027dd2:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027dd5:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027dd8:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027ddb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027dde:	09 f9                	or     ecx,edi
c0027de0:	78 1e                	js     c0027e00 <__muldf3+0x120>
c0027de2:	89 c3                	mov    ebx,eax
c0027de4:	eb e0                	jmp    c0027dc6 <__muldf3+0xe6>
c0027de6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027de9:	f7 d0                	not    eax
c0027deb:	a9 ff 07 00 00       	test   eax,0x7ff
c0027df0:	75 b2                	jne    c0027da4 <__muldf3+0xc4>
c0027df2:	31 ff                	xor    edi,edi
c0027df4:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027dfb:	e9 b7 01 00 00       	jmp    c0027fb7 <__muldf3+0x2d7>
c0027e00:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027e03:	40                   	inc    eax
c0027e04:	a9 fe 07 00 00       	test   eax,0x7fe
c0027e09:	75 57                	jne    c0027e62 <__muldf3+0x182>
c0027e0b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027e0e:	09 f0                	or     eax,esi
c0027e10:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027e14:	74 23                	je     c0027e39 <__muldf3+0x159>
c0027e16:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027e1a:	0f 89 91 01 00 00    	jns    c0027fb1 <__muldf3+0x2d1>
c0027e20:	85 c0                	test   eax,eax
c0027e22:	0f 85 89 01 00 00    	jne    c0027fb1 <__muldf3+0x2d1>
c0027e28:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027e2b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027e31:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027e34:	e9 7e 01 00 00       	jmp    c0027fb7 <__muldf3+0x2d7>
c0027e39:	85 c0                	test   eax,eax
c0027e3b:	75 0c                	jne    c0027e49 <__muldf3+0x169>
c0027e3d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027e41:	0f 89 6a 01 00 00    	jns    c0027fb1 <__muldf3+0x2d1>
c0027e47:	eb df                	jmp    c0027e28 <__muldf3+0x148>
c0027e49:	01 f6                	add    esi,esi
c0027e4b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027e4e:	c1 ea 1f             	shr    edx,0x1f
c0027e51:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027e54:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027e57:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027e5a:	09 d6                	or     esi,edx
c0027e5c:	78 04                	js     c0027e62 <__muldf3+0x182>
c0027e5e:	89 c3                	mov    ebx,eax
c0027e60:	eb e7                	jmp    c0027e49 <__muldf3+0x169>
c0027e62:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027e68:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027e6e:	89 c8                	mov    eax,ecx
c0027e70:	f7 e6                	mul    esi
c0027e72:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027e75:	89 c7                	mov    edi,eax
c0027e77:	89 c8                	mov    eax,ecx
c0027e79:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027e7c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027e7f:	89 c1                	mov    ecx,eax
c0027e81:	89 f0                	mov    eax,esi
c0027e83:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027e86:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027e89:	89 c6                	mov    esi,eax
c0027e8b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027e8e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027e91:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027e94:	31 c0                	xor    eax,eax
c0027e96:	01 f1                	add    ecx,esi
c0027e98:	0f 92 c0             	setb   al
c0027e9b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027e9e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027ea1:	83 d6 00             	adc    esi,0x0
c0027ea4:	01 c7                	add    edi,eax
c0027ea6:	83 d6 00             	adc    esi,0x0
c0027ea9:	01 ca                	add    edx,ecx
c0027eab:	0f 92 c1             	setb   cl
c0027eae:	0f b6 c9             	movzx  ecx,cl
c0027eb1:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027eb4:	83 d6 00             	adc    esi,0x0
c0027eb7:	01 cf                	add    edi,ecx
c0027eb9:	83 d6 00             	adc    esi,0x0
c0027ebc:	31 c9                	xor    ecx,ecx
c0027ebe:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027ec1:	0f 95 c1             	setne  cl
c0027ec4:	09 cf                	or     edi,ecx
c0027ec6:	85 f6                	test   esi,esi
c0027ec8:	78 0c                	js     c0027ed6 <__muldf3+0x1f6>
c0027eca:	01 f6                	add    esi,esi
c0027ecc:	89 f8                	mov    eax,edi
c0027ece:	c1 e8 1f             	shr    eax,0x1f
c0027ed1:	09 c6                	or     esi,eax
c0027ed3:	01 ff                	add    edi,edi
c0027ed5:	4b                   	dec    ebx
c0027ed6:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027edc:	0f 8f 85 00 00 00    	jg     c0027f67 <__muldf3+0x287>
c0027ee2:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027ee8:	85 db                	test   ebx,ebx
c0027eea:	0f 8f 84 00 00 00    	jg     c0027f74 <__muldf3+0x294>
c0027ef0:	83 fb cc             	cmp    ebx,0xffffffcc
c0027ef3:	7c 79                	jl     c0027f6e <__muldf3+0x28e>
c0027ef5:	ba 01 00 00 00       	mov    edx,0x1
c0027efa:	29 da                	sub    edx,ebx
c0027efc:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027f02:	83 fa 1f             	cmp    edx,0x1f
c0027f05:	7e 30                	jle    c0027f37 <__muldf3+0x257>
c0027f07:	83 fa 20             	cmp    edx,0x20
c0027f0a:	75 0b                	jne    c0027f17 <__muldf3+0x237>
c0027f0c:	31 c0                	xor    eax,eax
c0027f0e:	85 ff                	test   edi,edi
c0027f10:	0f 95 c0             	setne  al
c0027f13:	89 c7                	mov    edi,eax
c0027f15:	eb 1a                	jmp    c0027f31 <__muldf3+0x251>
c0027f17:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027f1a:	89 f0                	mov    eax,esi
c0027f1c:	d3 e0                	shl    eax,cl
c0027f1e:	09 f8                	or     eax,edi
c0027f20:	0f 95 c0             	setne  al
c0027f23:	0f b6 c0             	movzx  eax,al
c0027f26:	89 c7                	mov    edi,eax
c0027f28:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027f2d:	29 d9                	sub    ecx,ebx
c0027f2f:	d3 ee                	shr    esi,cl
c0027f31:	09 f7                	or     edi,esi
c0027f33:	31 db                	xor    ebx,ebx
c0027f35:	eb 3b                	jmp    c0027f72 <__muldf3+0x292>
c0027f37:	83 c3 1f             	add    ebx,0x1f
c0027f3a:	89 f0                	mov    eax,esi
c0027f3c:	88 d9                	mov    cl,bl
c0027f3e:	d3 e0                	shl    eax,cl
c0027f40:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027f43:	89 f8                	mov    eax,edi
c0027f45:	88 d1                	mov    cl,dl
c0027f47:	d3 e8                	shr    eax,cl
c0027f49:	89 c1                	mov    ecx,eax
c0027f4b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027f4e:	09 c8                	or     eax,ecx
c0027f50:	88 d9                	mov    cl,bl
c0027f52:	d3 e7                	shl    edi,cl
c0027f54:	31 db                	xor    ebx,ebx
c0027f56:	85 ff                	test   edi,edi
c0027f58:	0f 95 c3             	setne  bl
c0027f5b:	89 df                	mov    edi,ebx
c0027f5d:	09 c7                	or     edi,eax
c0027f5f:	88 d1                	mov    cl,dl
c0027f61:	d3 ee                	shr    esi,cl
c0027f63:	31 db                	xor    ebx,ebx
c0027f65:	eb 0d                	jmp    c0027f74 <__muldf3+0x294>
c0027f67:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027f6c:	eb 02                	jmp    c0027f70 <__muldf3+0x290>
c0027f6e:	31 db                	xor    ebx,ebx
c0027f70:	31 ff                	xor    edi,edi
c0027f72:	31 f6                	xor    esi,esi
c0027f74:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f77:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027f7a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027f7f:	09 c3                	or     ebx,eax
c0027f81:	c1 e3 14             	shl    ebx,0x14
c0027f84:	89 f0                	mov    eax,esi
c0027f86:	c1 e8 0b             	shr    eax,0xb
c0027f89:	09 c3                	or     ebx,eax
c0027f8b:	89 f8                	mov    eax,edi
c0027f8d:	c1 e8 0b             	shr    eax,0xb
c0027f90:	c1 e6 15             	shl    esi,0x15
c0027f93:	09 c6                	or     esi,eax
c0027f95:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027f9b:	0f 95 c1             	setne  cl
c0027f9e:	09 c8                	or     eax,ecx
c0027fa0:	83 e0 01             	and    eax,0x1
c0027fa3:	c1 ef 0a             	shr    edi,0xa
c0027fa6:	21 c7                	and    edi,eax
c0027fa8:	01 f7                	add    edi,esi
c0027faa:	83 d3 00             	adc    ebx,0x0
c0027fad:	89 da                	mov    edx,ebx
c0027faf:	eb 03                	jmp    c0027fb4 <__muldf3+0x2d4>
c0027fb1:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027fb4:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027fb7:	89 f8                	mov    eax,edi
c0027fb9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027fbc:	83 c4 24             	add    esp,0x24
c0027fbf:	5b                   	pop    ebx
c0027fc0:	5e                   	pop    esi
c0027fc1:	5f                   	pop    edi
c0027fc2:	5d                   	pop    ebp
c0027fc3:	c3                   	ret    

c0027fc4 <__divdf3>:
c0027fc4:	55                   	push   ebp
c0027fc5:	89 e5                	mov    ebp,esp
c0027fc7:	57                   	push   edi
c0027fc8:	56                   	push   esi
c0027fc9:	53                   	push   ebx
c0027fca:	83 ec 2c             	sub    esp,0x2c
c0027fcd:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027fd0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027fd3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027fd6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027fd9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027fdc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027fdf:	89 ce                	mov    esi,ecx
c0027fe1:	89 c8                	mov    eax,ecx
c0027fe3:	c1 f8 14             	sar    eax,0x14
c0027fe6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027fe9:	89 f8                	mov    eax,edi
c0027feb:	89 fb                	mov    ebx,edi
c0027fed:	c1 e3 0b             	shl    ebx,0xb
c0027ff0:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027ff3:	c1 e6 0b             	shl    esi,0xb
c0027ff6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027ffc:	c1 e8 15             	shr    eax,0x15
c0027fff:	09 c6                	or     esi,eax
c0028001:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0028004:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0028007:	89 c2                	mov    edx,eax
c0028009:	c1 fa 14             	sar    edx,0x14
c002800c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002800f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0028012:	89 de                	mov    esi,ebx
c0028014:	c1 e6 0b             	shl    esi,0xb
c0028017:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002801a:	c1 e0 0b             	shl    eax,0xb
c002801d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028022:	c1 eb 15             	shr    ebx,0x15
c0028025:	09 d8                	or     eax,ebx
c0028027:	89 c2                	mov    edx,eax
c0028029:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002802c:	25 ff 07 00 00       	and    eax,0x7ff
c0028031:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0028034:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028037:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002803d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028040:	29 d8                	sub    eax,ebx
c0028042:	05 ff 03 00 00       	add    eax,0x3ff
c0028047:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002804a:	46                   	inc    esi
c002804b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028051:	0f 85 a5 00 00 00    	jne    c00280fc <__divdf3+0x138>
c0028057:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002805a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c002805d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028061:	74 2a                	je     c002808d <__divdf3+0xc9>
c0028063:	85 f6                	test   esi,esi
c0028065:	0f 85 cc 02 00 00    	jne    c0028337 <__divdf3+0x373>
c002806b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002806e:	40                   	inc    eax
c002806f:	a9 fe 07 00 00       	test   eax,0x7fe
c0028074:	75 26                	jne    c002809c <__divdf3+0xd8>
c0028076:	85 db                	test   ebx,ebx
c0028078:	74 22                	je     c002809c <__divdf3+0xd8>
c002807a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002807d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028080:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028083:	09 d0                	or     eax,edx
c0028085:	0f 85 ac 02 00 00    	jne    c0028337 <__divdf3+0x373>
c002808b:	eb 63                	jmp    c00280f0 <__divdf3+0x12c>
c002808d:	85 f6                	test   esi,esi
c002808f:	75 22                	jne    c00280b3 <__divdf3+0xef>
c0028091:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028094:	40                   	inc    eax
c0028095:	a9 fe 07 00 00       	test   eax,0x7fe
c002809a:	74 36                	je     c00280d2 <__divdf3+0x10e>
c002809c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00280a0:	0f 89 91 02 00 00    	jns    c0028337 <__divdf3+0x373>
c00280a6:	89 f8                	mov    eax,edi
c00280a8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00280ae:	e9 80 02 00 00       	jmp    c0028333 <__divdf3+0x36f>
c00280b3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00280b6:	01 f6                	add    esi,esi
c00280b8:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00280bb:	c1 ef 1f             	shr    edi,0x1f
c00280be:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00280c1:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c00280c4:	8d 48 ff             	lea    ecx,[eax-0x1]
c00280c7:	09 f7                	or     edi,esi
c00280c9:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c00280cc:	78 2e                	js     c00280fc <__divdf3+0x138>
c00280ce:	89 c8                	mov    eax,ecx
c00280d0:	eb e1                	jmp    c00280b3 <__divdf3+0xef>
c00280d2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00280d5:	09 d0                	or     eax,edx
c00280d7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00280db:	74 0f                	je     c00280ec <__divdf3+0x128>
c00280dd:	85 c0                	test   eax,eax
c00280df:	74 bb                	je     c002809c <__divdf3+0xd8>
c00280e1:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00280e4:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00280e7:	e9 4b 02 00 00       	jmp    c0028337 <__divdf3+0x373>
c00280ec:	85 c0                	test   eax,eax
c00280ee:	75 ac                	jne    c002809c <__divdf3+0xd8>
c00280f0:	31 ff                	xor    edi,edi
c00280f2:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00280f7:	e9 3b 02 00 00       	jmp    c0028337 <__divdf3+0x373>
c00280fc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00280ff:	8d 4f 01             	lea    ecx,[edi+0x1]
c0028102:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028108:	75 6b                	jne    c0028175 <__divdf3+0x1b1>
c002810a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002810d:	09 d6                	or     esi,edx
c002810f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028113:	74 28                	je     c002813d <__divdf3+0x179>
c0028115:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028118:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002811b:	85 f6                	test   esi,esi
c002811d:	0f 85 14 02 00 00    	jne    c0028337 <__divdf3+0x373>
c0028123:	31 ff                	xor    edi,edi
c0028125:	31 c9                	xor    ecx,ecx
c0028127:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002812a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002812d:	0f 89 04 02 00 00    	jns    c0028337 <__divdf3+0x373>
c0028133:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028138:	e9 fa 01 00 00       	jmp    c0028337 <__divdf3+0x373>
c002813d:	85 f6                	test   esi,esi
c002813f:	75 1b                	jne    c002815c <__divdf3+0x198>
c0028141:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028144:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028147:	25 00 00 00 80       	and    eax,0x80000000
c002814c:	31 c9                	xor    ecx,ecx
c002814e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0028153:	89 cf                	mov    edi,ecx
c0028155:	89 c1                	mov    ecx,eax
c0028157:	e9 db 01 00 00       	jmp    c0028337 <__divdf3+0x373>
c002815c:	01 d2                	add    edx,edx
c002815e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028161:	c1 eb 1f             	shr    ebx,0x1f
c0028164:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028167:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c002816a:	8d 48 01             	lea    ecx,[eax+0x1]
c002816d:	09 da                	or     edx,ebx
c002816f:	78 04                	js     c0028175 <__divdf3+0x1b1>
c0028171:	89 c8                	mov    eax,ecx
c0028173:	eb e7                	jmp    c002815c <__divdf3+0x198>
c0028175:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028178:	81 ce 00 00 00 80    	or     esi,0x80000000
c002817e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028184:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0028187:	39 d6                	cmp    esi,edx
c0028189:	77 0d                	ja     c0028198 <__divdf3+0x1d4>
c002818b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002818e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028191:	72 1b                	jb     c00281ae <__divdf3+0x1ea>
c0028193:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0028196:	75 16                	jne    c00281ae <__divdf3+0x1ea>
c0028198:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002819b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002819e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c00281a1:	83 de 00             	sbb    esi,0x0
c00281a4:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c00281a7:	ba 01 00 00 00       	mov    edx,0x1
c00281ac:	eb 02                	jmp    c00281b0 <__divdf3+0x1ec>
c00281ae:	31 d2                	xor    edx,edx
c00281b0:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c00281b7:	31 ff                	xor    edi,edi
c00281b9:	01 ff                	add    edi,edi
c00281bb:	89 d1                	mov    ecx,edx
c00281bd:	c1 e9 1f             	shr    ecx,0x1f
c00281c0:	09 cf                	or     edi,ecx
c00281c2:	8d 1c 12             	lea    ebx,[edx+edx*1]
c00281c5:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00281c8:	89 da                	mov    edx,ebx
c00281ca:	89 f3                	mov    ebx,esi
c00281cc:	8d 34 36             	lea    esi,[esi+esi*1]
c00281cf:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00281d2:	c1 e9 1f             	shr    ecx,0x1f
c00281d5:	09 ce                	or     esi,ecx
c00281d7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00281da:	01 c9                	add    ecx,ecx
c00281dc:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00281df:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00281e2:	85 db                	test   ebx,ebx
c00281e4:	78 29                	js     c002820f <__divdf3+0x24b>
c00281e6:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00281e9:	72 07                	jb     c00281f2 <__divdf3+0x22e>
c00281eb:	75 3c                	jne    c0028229 <__divdf3+0x265>
c00281ed:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00281f0:	77 37                	ja     c0028229 <__divdf3+0x265>
c00281f2:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00281f5:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c00281f8:	31 d2                	xor    edx,edx
c00281fa:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c00281fd:	0f 97 c2             	seta   dl
c0028200:	29 d6                	sub    esi,edx
c0028202:	89 d9                	mov    ecx,ebx
c0028204:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0028207:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002820a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002820d:	eb 17                	jmp    c0028226 <__divdf3+0x262>
c002820f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028212:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028215:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028218:	0f 97 c1             	seta   cl
c002821b:	0f b6 c9             	movzx  ecx,cl
c002821e:	29 ce                	sub    esi,ecx
c0028220:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0028223:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0028226:	83 ca 01             	or     edx,0x1
c0028229:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c002822c:	75 8b                	jne    c00281b9 <__divdf3+0x1f5>
c002822e:	c1 e7 09             	shl    edi,0x9
c0028231:	89 d1                	mov    ecx,edx
c0028233:	c1 e9 17             	shr    ecx,0x17
c0028236:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028239:	09 f3                	or     ebx,esi
c002823b:	0f 95 c3             	setne  bl
c002823e:	0f b6 db             	movzx  ebx,bl
c0028241:	c1 e2 09             	shl    edx,0x9
c0028244:	09 d3                	or     ebx,edx
c0028246:	89 ca                	mov    edx,ecx
c0028248:	09 fa                	or     edx,edi
c002824a:	78 0c                	js     c0028258 <__divdf3+0x294>
c002824c:	01 d2                	add    edx,edx
c002824e:	89 d9                	mov    ecx,ebx
c0028250:	c1 e9 1f             	shr    ecx,0x1f
c0028253:	09 ca                	or     edx,ecx
c0028255:	01 db                	add    ebx,ebx
c0028257:	48                   	dec    eax
c0028258:	3d fe 07 00 00       	cmp    eax,0x7fe
c002825d:	0f 8f 83 00 00 00    	jg     c00282e6 <__divdf3+0x322>
c0028263:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028269:	85 c0                	test   eax,eax
c002826b:	0f 8f 82 00 00 00    	jg     c00282f3 <__divdf3+0x32f>
c0028271:	83 f8 cc             	cmp    eax,0xffffffcc
c0028274:	7c 77                	jl     c00282ed <__divdf3+0x329>
c0028276:	be 01 00 00 00       	mov    esi,0x1
c002827b:	29 c6                	sub    esi,eax
c002827d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028283:	83 fe 1f             	cmp    esi,0x1f
c0028286:	7e 2f                	jle    c00282b7 <__divdf3+0x2f3>
c0028288:	83 fe 20             	cmp    esi,0x20
c002828b:	75 0a                	jne    c0028297 <__divdf3+0x2d3>
c002828d:	85 db                	test   ebx,ebx
c002828f:	0f 95 c3             	setne  bl
c0028292:	0f b6 db             	movzx  ebx,bl
c0028295:	eb 1a                	jmp    c00282b1 <__divdf3+0x2ed>
c0028297:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002829a:	89 d7                	mov    edi,edx
c002829c:	d3 e7                	shl    edi,cl
c002829e:	89 f9                	mov    ecx,edi
c00282a0:	09 d9                	or     ecx,ebx
c00282a2:	0f 95 c3             	setne  bl
c00282a5:	0f b6 db             	movzx  ebx,bl
c00282a8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00282ad:	29 c1                	sub    ecx,eax
c00282af:	d3 ea                	shr    edx,cl
c00282b1:	09 d3                	or     ebx,edx
c00282b3:	31 c0                	xor    eax,eax
c00282b5:	eb 3a                	jmp    c00282f1 <__divdf3+0x32d>
c00282b7:	83 c0 1f             	add    eax,0x1f
c00282ba:	89 d7                	mov    edi,edx
c00282bc:	88 c1                	mov    cl,al
c00282be:	d3 e7                	shl    edi,cl
c00282c0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00282c3:	89 df                	mov    edi,ebx
c00282c5:	89 f1                	mov    ecx,esi
c00282c7:	d3 ef                	shr    edi,cl
c00282c9:	89 f9                	mov    ecx,edi
c00282cb:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00282ce:	09 cf                	or     edi,ecx
c00282d0:	88 c1                	mov    cl,al
c00282d2:	d3 e3                	shl    ebx,cl
c00282d4:	85 db                	test   ebx,ebx
c00282d6:	0f 95 c3             	setne  bl
c00282d9:	0f b6 db             	movzx  ebx,bl
c00282dc:	09 fb                	or     ebx,edi
c00282de:	89 f1                	mov    ecx,esi
c00282e0:	d3 ea                	shr    edx,cl
c00282e2:	31 c0                	xor    eax,eax
c00282e4:	eb 0d                	jmp    c00282f3 <__divdf3+0x32f>
c00282e6:	b8 ff 07 00 00       	mov    eax,0x7ff
c00282eb:	eb 02                	jmp    c00282ef <__divdf3+0x32b>
c00282ed:	31 c0                	xor    eax,eax
c00282ef:	31 db                	xor    ebx,ebx
c00282f1:	31 d2                	xor    edx,edx
c00282f3:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00282f6:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c00282f9:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00282ff:	09 c8                	or     eax,ecx
c0028301:	c1 e0 14             	shl    eax,0x14
c0028304:	89 d1                	mov    ecx,edx
c0028306:	c1 e9 0b             	shr    ecx,0xb
c0028309:	09 c8                	or     eax,ecx
c002830b:	89 c6                	mov    esi,eax
c002830d:	89 d9                	mov    ecx,ebx
c002830f:	c1 e9 0b             	shr    ecx,0xb
c0028312:	c1 e2 15             	shl    edx,0x15
c0028315:	09 ca                	or     edx,ecx
c0028317:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c002831d:	0f 95 c0             	setne  al
c0028320:	09 c1                	or     ecx,eax
c0028322:	83 e1 01             	and    ecx,0x1
c0028325:	c1 eb 0a             	shr    ebx,0xa
c0028328:	21 cb                	and    ebx,ecx
c002832a:	01 d3                	add    ebx,edx
c002832c:	89 d8                	mov    eax,ebx
c002832e:	83 d6 00             	adc    esi,0x0
c0028331:	89 f2                	mov    edx,esi
c0028333:	89 c7                	mov    edi,eax
c0028335:	89 d1                	mov    ecx,edx
c0028337:	89 f8                	mov    eax,edi
c0028339:	89 ca                	mov    edx,ecx
c002833b:	83 c4 2c             	add    esp,0x2c
c002833e:	5b                   	pop    ebx
c002833f:	5e                   	pop    esi
c0028340:	5f                   	pop    edi
c0028341:	5d                   	pop    ebp
c0028342:	c3                   	ret    

c0028343 <__floatsidf>:
c0028343:	55                   	push   ebp
c0028344:	89 e5                	mov    ebp,esp
c0028346:	56                   	push   esi
c0028347:	53                   	push   ebx
c0028348:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002834b:	85 db                	test   ebx,ebx
c002834d:	7e 15                	jle    c0028364 <__floatsidf+0x21>
c002834f:	0f bd cb             	bsr    ecx,ebx
c0028352:	83 f1 1f             	xor    ecx,0x1f
c0028355:	d3 e3                	shl    ebx,cl
c0028357:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c002835d:	b8 1e 04 00 00       	mov    eax,0x41e
c0028362:	eb 21                	jmp    c0028385 <__floatsidf+0x42>
c0028364:	b8 00 00 00 00       	mov    eax,0x0
c0028369:	ba 00 00 00 00       	mov    edx,0x0
c002836e:	74 2a                	je     c002839a <__floatsidf+0x57>
c0028370:	f7 db                	neg    ebx
c0028372:	0f bd cb             	bsr    ecx,ebx
c0028375:	83 f1 1f             	xor    ecx,0x1f
c0028378:	d3 e3                	shl    ebx,cl
c002837a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028380:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028385:	29 c8                	sub    eax,ecx
c0028387:	c1 e0 14             	shl    eax,0x14
c002838a:	89 c1                	mov    ecx,eax
c002838c:	89 de                	mov    esi,ebx
c002838e:	c1 ee 0b             	shr    esi,0xb
c0028391:	09 f1                	or     ecx,esi
c0028393:	89 ca                	mov    edx,ecx
c0028395:	c1 e3 15             	shl    ebx,0x15
c0028398:	89 d8                	mov    eax,ebx
c002839a:	5b                   	pop    ebx
c002839b:	5e                   	pop    esi
c002839c:	5d                   	pop    ebp
c002839d:	c3                   	ret    

c002839e <__floatunsidf>:
c002839e:	55                   	push   ebp
c002839f:	89 e5                	mov    ebp,esp
c00283a1:	56                   	push   esi
c00283a2:	53                   	push   ebx
c00283a3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00283a6:	85 db                	test   ebx,ebx
c00283a8:	74 2a                	je     c00283d4 <__floatunsidf+0x36>
c00283aa:	0f bd cb             	bsr    ecx,ebx
c00283ad:	83 f1 1f             	xor    ecx,0x1f
c00283b0:	d3 e3                	shl    ebx,cl
c00283b2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00283b8:	b8 1e 04 00 00       	mov    eax,0x41e
c00283bd:	29 c8                	sub    eax,ecx
c00283bf:	c1 e0 14             	shl    eax,0x14
c00283c2:	89 c1                	mov    ecx,eax
c00283c4:	89 de                	mov    esi,ebx
c00283c6:	c1 ee 0b             	shr    esi,0xb
c00283c9:	09 f1                	or     ecx,esi
c00283cb:	89 ca                	mov    edx,ecx
c00283cd:	c1 e3 15             	shl    ebx,0x15
c00283d0:	89 d8                	mov    eax,ebx
c00283d2:	eb 04                	jmp    c00283d8 <__floatunsidf+0x3a>
c00283d4:	31 c0                	xor    eax,eax
c00283d6:	31 d2                	xor    edx,edx
c00283d8:	5b                   	pop    ebx
c00283d9:	5e                   	pop    esi
c00283da:	5d                   	pop    ebp
c00283db:	c3                   	ret    

c00283dc <__fixdfsi>:
c00283dc:	55                   	push   ebp
c00283dd:	89 e5                	mov    ebp,esp
c00283df:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00283e2:	89 d1                	mov    ecx,edx
c00283e4:	c1 e1 0b             	shl    ecx,0xb
c00283e7:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00283ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00283f0:	c1 e8 15             	shr    eax,0x15
c00283f3:	09 c1                	or     ecx,eax
c00283f5:	c1 fa 14             	sar    edx,0x14
c00283f8:	78 1f                	js     c0028419 <__fixdfsi+0x3d>
c00283fa:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028400:	31 c0                	xor    eax,eax
c0028402:	83 fa 1e             	cmp    edx,0x1e
c0028405:	77 40                	ja     c0028447 <__fixdfsi+0x6b>
c0028407:	89 c8                	mov    eax,ecx
c0028409:	0d 00 00 00 80       	or     eax,0x80000000
c002840e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028413:	29 d1                	sub    ecx,edx
c0028415:	d3 e8                	shr    eax,cl
c0028417:	eb 2e                	jmp    c0028447 <__fixdfsi+0x6b>
c0028419:	31 c0                	xor    eax,eax
c002841b:	81 c2 01 04 00 00    	add    edx,0x401
c0028421:	78 24                	js     c0028447 <__fixdfsi+0x6b>
c0028423:	83 fa 1e             	cmp    edx,0x1e
c0028426:	7e 09                	jle    c0028431 <__fixdfsi+0x55>
c0028428:	83 fa 1f             	cmp    edx,0x1f
c002842b:	75 18                	jne    c0028445 <__fixdfsi+0x69>
c002842d:	85 c9                	test   ecx,ecx
c002842f:	75 14                	jne    c0028445 <__fixdfsi+0x69>
c0028431:	89 c8                	mov    eax,ecx
c0028433:	0d 00 00 00 80       	or     eax,0x80000000
c0028438:	b9 1f 00 00 00       	mov    ecx,0x1f
c002843d:	29 d1                	sub    ecx,edx
c002843f:	d3 e8                	shr    eax,cl
c0028441:	f7 d8                	neg    eax
c0028443:	eb 02                	jmp    c0028447 <__fixdfsi+0x6b>
c0028445:	31 c0                	xor    eax,eax
c0028447:	5d                   	pop    ebp
c0028448:	c3                   	ret    

c0028449 <__fixunsdfsi>:
c0028449:	55                   	push   ebp
c002844a:	89 e5                	mov    ebp,esp
c002844c:	53                   	push   ebx
c002844d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028450:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028453:	89 d3                	mov    ebx,edx
c0028455:	c1 fb 14             	sar    ebx,0x14
c0028458:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c002845e:	31 c0                	xor    eax,eax
c0028460:	83 fb 1f             	cmp    ebx,0x1f
c0028463:	77 1d                	ja     c0028482 <__fixunsdfsi+0x39>
c0028465:	89 d0                	mov    eax,edx
c0028467:	c1 e0 0b             	shl    eax,0xb
c002846a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002846f:	c1 e9 15             	shr    ecx,0x15
c0028472:	09 c8                	or     eax,ecx
c0028474:	0d 00 00 00 80       	or     eax,0x80000000
c0028479:	b9 1f 00 00 00       	mov    ecx,0x1f
c002847e:	29 d9                	sub    ecx,ebx
c0028480:	d3 e8                	shr    eax,cl
c0028482:	5b                   	pop    ebx
c0028483:	5d                   	pop    ebp
c0028484:	c3                   	ret    

c0028485 <__cmpdf2>:
c0028485:	55                   	push   ebp
c0028486:	89 e5                	mov    ebp,esp
c0028488:	57                   	push   edi
c0028489:	56                   	push   esi
c002848a:	53                   	push   ebx
c002848b:	83 ec 0c             	sub    esp,0xc
c002848e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028491:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028494:	89 ca                	mov    edx,ecx
c0028496:	c1 ea 14             	shr    edx,0x14
c0028499:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002849f:	89 cb                	mov    ebx,ecx
c00284a1:	c1 fb 1f             	sar    ebx,0x1f
c00284a4:	31 da                	xor    edx,ebx
c00284a6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00284a9:	89 df                	mov    edi,ebx
c00284ab:	c1 e7 0b             	shl    edi,0xb
c00284ae:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00284b1:	c1 e1 0b             	shl    ecx,0xb
c00284b4:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00284ba:	c1 eb 15             	shr    ebx,0x15
c00284bd:	09 d9                	or     ecx,ebx
c00284bf:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c00284c2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00284c5:	89 ce                	mov    esi,ecx
c00284c7:	c1 ee 14             	shr    esi,0x14
c00284ca:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00284d0:	89 cb                	mov    ebx,ecx
c00284d2:	c1 fb 1f             	sar    ebx,0x1f
c00284d5:	31 de                	xor    esi,ebx
c00284d7:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00284da:	89 df                	mov    edi,ebx
c00284dc:	c1 e7 0b             	shl    edi,0xb
c00284df:	c1 e1 0b             	shl    ecx,0xb
c00284e2:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00284e8:	c1 eb 15             	shr    ebx,0x15
c00284eb:	09 d9                	or     ecx,ebx
c00284ed:	89 d3                	mov    ebx,edx
c00284ef:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00284f5:	43                   	inc    ebx
c00284f6:	83 fb 01             	cmp    ebx,0x1
c00284f9:	77 08                	ja     c0028503 <__cmpdf2+0x7e>
c00284fb:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00284fe:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028501:	75 68                	jne    c002856b <__cmpdf2+0xe6>
c0028503:	89 f3                	mov    ebx,esi
c0028505:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002850b:	43                   	inc    ebx
c002850c:	83 fb 01             	cmp    ebx,0x1
c002850f:	77 06                	ja     c0028517 <__cmpdf2+0x92>
c0028511:	89 fb                	mov    ebx,edi
c0028513:	09 cb                	or     ebx,ecx
c0028515:	75 54                	jne    c002856b <__cmpdf2+0xe6>
c0028517:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002851a:	09 f8                	or     eax,edi
c002851c:	09 c8                	or     eax,ecx
c002851e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028521:	75 12                	jne    c0028535 <__cmpdf2+0xb0>
c0028523:	8d 42 01             	lea    eax,[edx+0x1]
c0028526:	83 f8 01             	cmp    eax,0x1
c0028529:	77 0a                	ja     c0028535 <__cmpdf2+0xb0>
c002852b:	8d 5e 01             	lea    ebx,[esi+0x1]
c002852e:	31 c0                	xor    eax,eax
c0028530:	83 fb 01             	cmp    ebx,0x1
c0028533:	76 36                	jbe    c002856b <__cmpdf2+0xe6>
c0028535:	b8 01 00 00 00       	mov    eax,0x1
c002853a:	39 f2                	cmp    edx,esi
c002853c:	7f 2d                	jg     c002856b <__cmpdf2+0xe6>
c002853e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028543:	7c 26                	jl     c002856b <__cmpdf2+0xe6>
c0028545:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028548:	77 07                	ja     c0028551 <__cmpdf2+0xcc>
c002854a:	72 16                	jb     c0028562 <__cmpdf2+0xdd>
c002854c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c002854f:	76 0a                	jbe    c002855b <__cmpdf2+0xd6>
c0028551:	89 d0                	mov    eax,edx
c0028553:	c1 f8 1f             	sar    eax,0x1f
c0028556:	83 c8 01             	or     eax,0x1
c0028559:	eb 10                	jmp    c002856b <__cmpdf2+0xe6>
c002855b:	b8 00 00 00 00       	mov    eax,0x0
c0028560:	73 09                	jae    c002856b <__cmpdf2+0xe6>
c0028562:	89 d0                	mov    eax,edx
c0028564:	c1 f8 1f             	sar    eax,0x1f
c0028567:	83 e0 02             	and    eax,0x2
c002856a:	48                   	dec    eax
c002856b:	83 c4 0c             	add    esp,0xc
c002856e:	5b                   	pop    ebx
c002856f:	5e                   	pop    esi
c0028570:	5f                   	pop    edi
c0028571:	5d                   	pop    ebp
c0028572:	c3                   	ret    

c0028573 <__eqdf2>:
c0028573:	55                   	push   ebp
c0028574:	89 e5                	mov    ebp,esp
c0028576:	50                   	push   eax
c0028577:	6a 01                	push   0x1
c0028579:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002857c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002857f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028582:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028585:	e8 fb fe ff ff       	call   c0028485 <__cmpdf2>
c002858a:	83 c4 18             	add    esp,0x18
c002858d:	c9                   	leave  
c002858e:	c3                   	ret    

c002858f <__nedf2>:
c002858f:	eb e2                	jmp    c0028573 <__eqdf2>

c0028591 <__gtdf2>:
c0028591:	55                   	push   ebp
c0028592:	89 e5                	mov    ebp,esp
c0028594:	50                   	push   eax
c0028595:	6a ff                	push   0xffffffff
c0028597:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002859a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002859d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00285a0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00285a3:	e8 dd fe ff ff       	call   c0028485 <__cmpdf2>
c00285a8:	83 c4 18             	add    esp,0x18
c00285ab:	c9                   	leave  
c00285ac:	c3                   	ret    

c00285ad <__gedf2>:
c00285ad:	eb e2                	jmp    c0028591 <__gtdf2>

c00285af <__ltdf2>:
c00285af:	eb c2                	jmp    c0028573 <__eqdf2>

c00285b1 <__ledf2>:
c00285b1:	eb c0                	jmp    c0028573 <__eqdf2>

c00285b3 <__truncdfsf2>:
c00285b3:	55                   	push   ebp
c00285b4:	89 e5                	mov    ebp,esp
c00285b6:	57                   	push   edi
c00285b7:	56                   	push   esi
c00285b8:	53                   	push   ebx
c00285b9:	83 ec 0c             	sub    esp,0xc
c00285bc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00285bf:	89 d1                	mov    ecx,edx
c00285c1:	c1 f9 14             	sar    ecx,0x14
c00285c4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00285c7:	89 df                	mov    edi,ebx
c00285c9:	c1 e7 0b             	shl    edi,0xb
c00285cc:	89 d0                	mov    eax,edx
c00285ce:	c1 e0 0b             	shl    eax,0xb
c00285d1:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00285d6:	c1 eb 15             	shr    ebx,0x15
c00285d9:	09 d8                	or     eax,ebx
c00285db:	89 cb                	mov    ebx,ecx
c00285dd:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00285e3:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00285e9:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00285ef:	0f 86 9e 00 00 00    	jbe    c0028693 <__truncdfsf2+0xe0>
c00285f5:	85 db                	test   ebx,ebx
c00285f7:	75 0a                	jne    c0028603 <__truncdfsf2+0x50>
c00285f9:	c1 fa 17             	sar    edx,0x17
c00285fc:	30 d2                	xor    dl,dl
c00285fe:	e9 84 00 00 00       	jmp    c0028687 <__truncdfsf2+0xd4>
c0028603:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028609:	83 fe 83             	cmp    esi,0xffffff83
c002860c:	7d 4b                	jge    c0028659 <__truncdfsf2+0xa6>
c002860e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028613:	29 f1                	sub    ecx,esi
c0028615:	83 f9 1f             	cmp    ecx,0x1f
c0028618:	7f 6b                	jg     c0028685 <__truncdfsf2+0xd2>
c002861a:	0d 00 00 00 80       	or     eax,0x80000000
c002861f:	89 c3                	mov    ebx,eax
c0028621:	d3 eb                	shr    ebx,cl
c0028623:	be 01 00 00 00       	mov    esi,0x1
c0028628:	d3 e6                	shl    esi,cl
c002862a:	4e                   	dec    esi
c002862b:	21 f0                	and    eax,esi
c002862d:	09 f8                	or     eax,edi
c002862f:	0f 95 c0             	setne  al
c0028632:	0f b6 c0             	movzx  eax,al
c0028635:	09 c3                	or     ebx,eax
c0028637:	89 d9                	mov    ecx,ebx
c0028639:	c1 e9 08             	shr    ecx,0x8
c002863c:	f6 c3 7f             	test   bl,0x7f
c002863f:	0f 95 c0             	setne  al
c0028642:	09 c8                	or     eax,ecx
c0028644:	83 e0 01             	and    eax,0x1
c0028647:	c1 eb 07             	shr    ebx,0x7
c002864a:	21 c3                	and    ebx,eax
c002864c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028652:	09 d1                	or     ecx,edx
c0028654:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028657:	eb 76                	jmp    c00286cf <__truncdfsf2+0x11c>
c0028659:	83 c6 80             	add    esi,0xffffff80
c002865c:	7e 1d                	jle    c002867b <__truncdfsf2+0xc8>
c002865e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028664:	75 0b                	jne    c0028671 <__truncdfsf2+0xbe>
c0028666:	09 f8                	or     eax,edi
c0028668:	74 09                	je     c0028673 <__truncdfsf2+0xc0>
c002866a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002866f:	eb 02                	jmp    c0028673 <__truncdfsf2+0xc0>
c0028671:	31 c0                	xor    eax,eax
c0028673:	c1 fa 17             	sar    edx,0x17
c0028676:	80 ca ff             	or     dl,0xff
c0028679:	eb 0e                	jmp    c0028689 <__truncdfsf2+0xd6>
c002867b:	c1 fa 1f             	sar    edx,0x1f
c002867e:	c1 e2 08             	shl    edx,0x8
c0028681:	09 ca                	or     edx,ecx
c0028683:	eb 04                	jmp    c0028689 <__truncdfsf2+0xd6>
c0028685:	31 d2                	xor    edx,edx
c0028687:	31 c0                	xor    eax,eax
c0028689:	c1 e2 17             	shl    edx,0x17
c002868c:	c1 e8 08             	shr    eax,0x8
c002868f:	09 d0                	or     eax,edx
c0028691:	eb 3c                	jmp    c00286cf <__truncdfsf2+0x11c>
c0028693:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028699:	89 ca                	mov    edx,ecx
c002869b:	c1 fa 0b             	sar    edx,0xb
c002869e:	c1 e2 08             	shl    edx,0x8
c00286a1:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00286a4:	31 db                	xor    ebx,ebx
c00286a6:	85 ff                	test   edi,edi
c00286a8:	0f 95 c3             	setne  bl
c00286ab:	09 d8                	or     eax,ebx
c00286ad:	89 c3                	mov    ebx,eax
c00286af:	c1 eb 08             	shr    ebx,0x8
c00286b2:	a8 7f                	test   al,0x7f
c00286b4:	0f 95 c2             	setne  dl
c00286b7:	89 d6                	mov    esi,edx
c00286b9:	09 de                	or     esi,ebx
c00286bb:	83 e6 01             	and    esi,0x1
c00286be:	c1 e8 07             	shr    eax,0x7
c00286c1:	21 f0                	and    eax,esi
c00286c3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00286c6:	09 ca                	or     edx,ecx
c00286c8:	c1 e2 17             	shl    edx,0x17
c00286cb:	09 da                	or     edx,ebx
c00286cd:	01 d0                	add    eax,edx
c00286cf:	83 c4 0c             	add    esp,0xc
c00286d2:	5b                   	pop    ebx
c00286d3:	5e                   	pop    esi
c00286d4:	5f                   	pop    edi
c00286d5:	5d                   	pop    ebp
c00286d6:	c3                   	ret    

c00286d7 <__extendsfdf2>:
c00286d7:	55                   	push   ebp
c00286d8:	89 e5                	mov    ebp,esp
c00286da:	57                   	push   edi
c00286db:	56                   	push   esi
c00286dc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00286df:	89 d1                	mov    ecx,edx
c00286e1:	c1 f9 17             	sar    ecx,0x17
c00286e4:	c1 e2 08             	shl    edx,0x8
c00286e7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00286ed:	89 c8                	mov    eax,ecx
c00286ef:	80 e4 f8             	and    ah,0xf8
c00286f2:	8d 71 01             	lea    esi,[ecx+0x1]
c00286f5:	81 e6 fe 00 00 00    	and    esi,0xfe
c00286fb:	75 27                	jne    c0028724 <__extendsfdf2+0x4d>
c00286fd:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028703:	75 18                	jne    c002871d <__extendsfdf2+0x46>
c0028705:	85 d2                	test   edx,edx
c0028707:	74 20                	je     c0028729 <__extendsfdf2+0x52>
c0028709:	41                   	inc    ecx
c002870a:	01 d2                	add    edx,edx
c002870c:	79 fb                	jns    c0028709 <__extendsfdf2+0x32>
c002870e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028714:	29 c8                	sub    eax,ecx
c0028716:	05 81 03 00 00       	add    eax,0x381
c002871b:	eb 0c                	jmp    c0028729 <__extendsfdf2+0x52>
c002871d:	05 00 07 00 00       	add    eax,0x700
c0028722:	eb 05                	jmp    c0028729 <__extendsfdf2+0x52>
c0028724:	05 80 03 00 00       	add    eax,0x380
c0028729:	c1 e0 14             	shl    eax,0x14
c002872c:	89 c1                	mov    ecx,eax
c002872e:	89 d0                	mov    eax,edx
c0028730:	c1 e8 0b             	shr    eax,0xb
c0028733:	09 c1                	or     ecx,eax
c0028735:	c1 e2 15             	shl    edx,0x15
c0028738:	89 d0                	mov    eax,edx
c002873a:	89 ca                	mov    edx,ecx
c002873c:	5e                   	pop    esi
c002873d:	5f                   	pop    edi
c002873e:	5d                   	pop    ebp
c002873f:	c3                   	ret    

c0028740 <fabs>:
c0028740:	83 ec 0c             	sub    esp,0xc
c0028743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028747:	89 04 24             	mov    DWORD PTR [esp],eax
c002874a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002874e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028753:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028757:	dd 04 24             	fld    QWORD PTR [esp]
c002875a:	83 c4 0c             	add    esp,0xc
c002875d:	c3                   	ret    
c002875e:	66 90                	xchg   ax,ax

c0028760 <lrint>:
c0028760:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028764:	83 ec 04             	sub    esp,0x4
c0028767:	db 1c 24             	fistp  DWORD PTR [esp]
c002876a:	58                   	pop    eax
c002876b:	c3                   	ret    

c002876c <lrintf>:
c002876c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028770:	83 ec 04             	sub    esp,0x4
c0028773:	db 1c 24             	fistp  DWORD PTR [esp]
c0028776:	58                   	pop    eax
c0028777:	c3                   	ret    

Disassembly of section .init:

c0028778 <_init>:
c0028778:	55                   	push   ebp
c0028779:	89 e5                	mov    ebp,esp
c002877b:	e8 98 79 fd ff       	call   c0000118 <frame_dummy>
c0028780:	e8 63 e0 ff ff       	call   c00267e8 <__do_global_ctors_aux>
c0028785:	5d                   	pop    ebp
c0028786:	c3                   	ret    

Disassembly of section .fini:

c0028787 <_fini>:
c0028787:	55                   	push   ebp
c0028788:	89 e5                	mov    ebp,esp
c002878a:	e8 19 79 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002878f:	5d                   	pop    ebp
c0028790:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028792 <Computer::~Computer()>:
c0028792:	83 ec 0c             	sub    esp,0xc
c0028795:	ba ac a4 02 c0       	mov    edx,0xc002a4ac
c002879a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002879e:	89 10                	mov    DWORD PTR [eax],edx
c00287a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a4:	83 ec 0c             	sub    esp,0xc
c00287a7:	50                   	push   eax
c00287a8:	e8 6b be fe ff       	call   c0014618 <Device::~Device()>
c00287ad:	83 c4 10             	add    esp,0x10
c00287b0:	90                   	nop
c00287b1:	83 c4 0c             	add    esp,0xc
c00287b4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00287b6 <Computer::~Computer()>:
c00287b6:	83 ec 0c             	sub    esp,0xc
c00287b9:	83 ec 0c             	sub    esp,0xc
c00287bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287c0:	e8 cd ff ff ff       	call   c0028792 <Computer::~Computer()>
c00287c5:	83 c4 10             	add    esp,0x10
c00287c8:	83 ec 08             	sub    esp,0x8
c00287cb:	68 ec 01 00 00       	push   0x1ec
c00287d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287d4:	e8 8d a9 fe ff       	call   c0013166 <operator delete(void*, unsigned long)>
c00287d9:	83 c4 10             	add    esp,0x10
c00287dc:	83 c4 0c             	add    esp,0xc
c00287df:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00287e0 <idleCommon()>:
c00287e0:	83 ec 0c             	sub    esp,0xc
c00287e3:	e8 be 58 ff ff       	call   c001e0a6 <lockScheduler()>
c00287e8:	e8 24 59 ff ff       	call   c001e111 <schedule()>
c00287ed:	83 c4 0c             	add    esp,0xc
c00287f0:	e9 b3 58 ff ff       	jmp    c001e0a8 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00287f6 <LinkedList<UnixFile>::LinkedList()>:
c00287f6:	83 ec 0c             	sub    esp,0xc
c00287f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287fd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028807:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002880e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028812:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028819:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002881d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028823:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028827:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002882e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028832:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028839:	83 ec 0c             	sub    esp,0xc
c002883c:	68 d0 ad 02 c0       	push   0xc002add0
c0028841:	e8 00 aa fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0028846:	83 c4 10             	add    esp,0x10
c0028849:	90                   	nop
c002884a:	83 c4 0c             	add    esp,0xc
c002884d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002884e <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002884e:	83 ec 0c             	sub    esp,0xc
c0028851:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028856:	75 10                	jne    c0028868 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028858:	83 ec 0c             	sub    esp,0xc
c002885b:	68 ec ad 02 c0       	push   0xc002adec
c0028860:	e8 96 1f ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c0028865:	83 c4 10             	add    esp,0x10
c0028868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002886c:	8b 00                	mov    eax,DWORD PTR [eax]
c002886e:	85 c0                	test   eax,eax
c0028870:	74 34                	je     c00288a6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028876:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028879:	85 c0                	test   eax,eax
c002887b:	74 29                	je     c00288a6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002887d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028881:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028884:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028888:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002888b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002888f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028893:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002889a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002889d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00288a4:	eb 65                	jmp    c002890b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00288a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00288ac:	85 c0                	test   eax,eax
c00288ae:	75 4b                	jne    c00288fb <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00288b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288b7:	85 c0                	test   eax,eax
c00288b9:	75 40                	jne    c00288fb <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00288bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288c3:	89 10                	mov    DWORD PTR [eax],edx
c00288c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288cd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00288d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288d7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00288de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288e2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288e5:	85 c0                	test   eax,eax
c00288e7:	74 22                	je     c002890b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00288e9:	83 ec 0c             	sub    esp,0xc
c00288ec:	68 0e ae 02 c0       	push   0xc002ae0e
c00288f1:	e8 05 1f ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c00288f6:	83 c4 10             	add    esp,0x10
c00288f9:	eb 10                	jmp    c002890b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00288fb:	83 ec 0c             	sub    esp,0xc
c00288fe:	68 18 ae 02 c0       	push   0xc002ae18
c0028903:	e8 f3 1e ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c0028908:	83 c4 10             	add    esp,0x10
c002890b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002890f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028912:	8d 50 01             	lea    edx,[eax+0x1]
c0028915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028919:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002891c:	90                   	nop
c002891d:	83 c4 0c             	add    esp,0xc
c0028920:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028922 <LinkedList<UnixFile>::getFirstElement()>:
c0028922:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028926:	8b 00                	mov    eax,DWORD PTR [eax]
c0028928:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002892a <LinkedList<UnixFile>::removeFirst()>:
c002892a:	83 ec 0c             	sub    esp,0xc
c002892d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028931:	8b 00                	mov    eax,DWORD PTR [eax]
c0028933:	85 c0                	test   eax,eax
c0028935:	75 12                	jne    c0028949 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028937:	83 ec 0c             	sub    esp,0xc
c002893a:	68 24 ae 02 c0       	push   0xc002ae24
c002893f:	e8 b7 1e ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c0028944:	83 c4 10             	add    esp,0x10
c0028947:	eb 7e                	jmp    c00289c7 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0028949:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002894d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028950:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028953:	85 c0                	test   eax,eax
c0028955:	74 10                	je     c0028967 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028957:	83 ec 0c             	sub    esp,0xc
c002895a:	68 6f ae 02 c0       	push   0xc002ae6f
c002895f:	e8 97 1e ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c0028964:	83 c4 10             	add    esp,0x10
c0028967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002896b:	8b 00                	mov    eax,DWORD PTR [eax]
c002896d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028970:	85 c0                	test   eax,eax
c0028972:	75 33                	jne    c00289a7 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028974:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028978:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002897e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028982:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028989:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002898d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028990:	83 f8 01             	cmp    eax,0x1
c0028993:	74 21                	je     c00289b6 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028995:	83 ec 0c             	sub    esp,0xc
c0028998:	68 48 ae 02 c0       	push   0xc002ae48
c002899d:	e8 59 1e ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c00289a2:	83 c4 10             	add    esp,0x10
c00289a5:	eb 0f                	jmp    c00289b6 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00289a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00289ad:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00289b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b4:	89 10                	mov    DWORD PTR [eax],edx
c00289b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289bd:	8d 50 ff             	lea    edx,[eax-0x1]
c00289c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289c4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00289c7:	83 c4 0c             	add    esp,0xc
c00289ca:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00289cc <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00289cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00289d0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289d3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00289d4 <LinkedList<UnixFile>::~LinkedList()>:
c00289d4:	90                   	nop
c00289d5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00289d6 <LinkedList<Device>::addElement(Device*)>:
c00289d6:	83 ec 0c             	sub    esp,0xc
c00289d9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00289de:	75 10                	jne    c00289f0 <LinkedList<Device>::addElement(Device*)+0x1a>
c00289e0:	83 ec 0c             	sub    esp,0xc
c00289e3:	68 ec ad 02 c0       	push   0xc002adec
c00289e8:	e8 0e 1e ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c00289ed:	83 c4 10             	add    esp,0x10
c00289f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00289f6:	85 c0                	test   eax,eax
c00289f8:	74 3a                	je     c0028a34 <LinkedList<Device>::addElement(Device*)+0x5e>
c00289fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a01:	85 c0                	test   eax,eax
c0028a03:	74 2f                	je     c0028a34 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028a05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a09:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a0c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a10:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a1a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a1e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a25:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a28:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028a32:	eb 68                	jmp    c0028a9c <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a38:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a3a:	85 c0                	test   eax,eax
c0028a3c:	75 4e                	jne    c0028a8c <LinkedList<Device>::addElement(Device*)+0xb6>
c0028a3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a45:	85 c0                	test   eax,eax
c0028a47:	75 43                	jne    c0028a8c <LinkedList<Device>::addElement(Device*)+0xb6>
c0028a49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a4d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a51:	89 10                	mov    DWORD PTR [eax],edx
c0028a53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a5b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a62:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a65:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028a6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a73:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a76:	85 c0                	test   eax,eax
c0028a78:	74 22                	je     c0028a9c <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a7a:	83 ec 0c             	sub    esp,0xc
c0028a7d:	68 0e ae 02 c0       	push   0xc002ae0e
c0028a82:	e8 74 1d ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c0028a87:	83 c4 10             	add    esp,0x10
c0028a8a:	eb 10                	jmp    c0028a9c <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a8c:	83 ec 0c             	sub    esp,0xc
c0028a8f:	68 18 ae 02 c0       	push   0xc002ae18
c0028a94:	e8 62 1d ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c0028a99:	83 c4 10             	add    esp,0x10
c0028a9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028aa3:	8d 50 01             	lea    edx,[eax+0x1]
c0028aa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aaa:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028aad:	90                   	nop
c0028aae:	83 c4 0c             	add    esp,0xc
c0028ab1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028ab2 <LinkedList<Device>::LinkedList()>:
c0028ab2:	83 ec 0c             	sub    esp,0xc
c0028ab5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ab9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028abf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028aca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ace:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028ad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028adf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028aea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aee:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028af5:	83 ec 0c             	sub    esp,0xc
c0028af8:	68 d0 ad 02 c0       	push   0xc002add0
c0028afd:	e8 44 a7 fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0028b02:	83 c4 10             	add    esp,0x10
c0028b05:	90                   	nop
c0028b06:	83 c4 0c             	add    esp,0xc
c0028b09:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028b0a <DriverlessDevice::~DriverlessDevice()>:
c0028b0a:	ba 54 ba 02 c0       	mov    edx,0xc002ba54
c0028b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b13:	89 10                	mov    DWORD PTR [eax],edx
c0028b15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b19:	50                   	push   eax
c0028b1a:	e8 f9 ba fe ff       	call   c0014618 <Device::~Device()>
c0028b1f:	83 c4 04             	add    esp,0x4
c0028b22:	90                   	nop
c0028b23:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028b24 <DriverlessDevice::~DriverlessDevice()>:
c0028b24:	83 ec 0c             	sub    esp,0xc
c0028b27:	83 ec 0c             	sub    esp,0xc
c0028b2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b2e:	e8 d7 ff ff ff       	call   c0028b0a <DriverlessDevice::~DriverlessDevice()>
c0028b33:	83 c4 10             	add    esp,0x10
c0028b36:	83 ec 08             	sub    esp,0x8
c0028b39:	68 58 01 00 00       	push   0x158
c0028b3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b42:	e8 1f a6 fe ff       	call   c0013166 <operator delete(void*, unsigned long)>
c0028b47:	83 c4 10             	add    esp,0x10
c0028b4a:	83 c4 0c             	add    esp,0xc
c0028b4d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028b4e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028b4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b52:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b54:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028b56 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b5c:	85 c0                	test   eax,eax
c0028b5e:	75 0e                	jne    c0028b6e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028b60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b67:	85 c0                	test   eax,eax
c0028b69:	75 03                	jne    c0028b6e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028b6b:	b0 01                	mov    al,0x1
c0028b6d:	c3                   	ret    
c0028b6e:	b0 00                	mov    al,0x0
c0028b70:	90                   	nop
c0028b71:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028b72 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028b72:	83 ec 0c             	sub    esp,0xc
c0028b75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b79:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b7b:	85 c0                	test   eax,eax
c0028b7d:	75 15                	jne    c0028b94 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028b7f:	83 ec 0c             	sub    esp,0xc
c0028b82:	68 24 ae 02 c0       	push   0xc002ae24
c0028b87:	e8 6f 1c ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c0028b8c:	83 c4 10             	add    esp,0x10
c0028b8f:	e9 88 00 00 00       	jmp    c0028c1c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028b94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b9b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028b9e:	85 c0                	test   eax,eax
c0028ba0:	0f 95 c0             	setne  al
c0028ba3:	84 c0                	test   al,al
c0028ba5:	74 10                	je     c0028bb7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028ba7:	83 ec 0c             	sub    esp,0xc
c0028baa:	68 6f ae 02 c0       	push   0xc002ae6f
c0028baf:	e8 47 1c ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c0028bb4:	83 c4 10             	add    esp,0x10
c0028bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0028bbd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028bc0:	85 c0                	test   eax,eax
c0028bc2:	0f 94 c0             	sete   al
c0028bc5:	84 c0                	test   al,al
c0028bc7:	74 33                	je     c0028bfc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028bc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bcd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028bd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028bde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028be2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028be5:	83 f8 01             	cmp    eax,0x1
c0028be8:	74 21                	je     c0028c0b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028bea:	83 ec 0c             	sub    esp,0xc
c0028bed:	68 48 ae 02 c0       	push   0xc002ae48
c0028bf2:	e8 04 1c ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c0028bf7:	83 c4 10             	add    esp,0x10
c0028bfa:	eb 0f                	jmp    c0028c0b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c00:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c02:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028c05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c09:	89 10                	mov    DWORD PTR [eax],edx
c0028c0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c0f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c12:	8d 50 ff             	lea    edx,[eax-0x1]
c0028c15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c19:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028c1c:	83 c4 0c             	add    esp,0xc
c0028c1f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028c20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028c20:	83 ec 0c             	sub    esp,0xc
c0028c23:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028c28:	75 10                	jne    c0028c3a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028c2a:	83 ec 0c             	sub    esp,0xc
c0028c2d:	68 ec ad 02 c0       	push   0xc002adec
c0028c32:	e8 c4 1b ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c0028c37:	83 c4 10             	add    esp,0x10
c0028c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c40:	85 c0                	test   eax,eax
c0028c42:	74 34                	je     c0028c78 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028c44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c48:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c4b:	85 c0                	test   eax,eax
c0028c4d:	74 29                	je     c0028c78 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028c4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c53:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c56:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c5a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028c5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c61:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c65:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028c68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c6f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c76:	eb 65                	jmp    c0028cdd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c7e:	85 c0                	test   eax,eax
c0028c80:	75 4b                	jne    c0028ccd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c89:	85 c0                	test   eax,eax
c0028c8b:	75 40                	jne    c0028ccd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028c8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c95:	89 10                	mov    DWORD PTR [eax],edx
c0028c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c9b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c9f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ca6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ca9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028cb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cb4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028cb7:	85 c0                	test   eax,eax
c0028cb9:	74 22                	je     c0028cdd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028cbb:	83 ec 0c             	sub    esp,0xc
c0028cbe:	68 0e ae 02 c0       	push   0xc002ae0e
c0028cc3:	e8 33 1b ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c0028cc8:	83 c4 10             	add    esp,0x10
c0028ccb:	eb 10                	jmp    c0028cdd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028ccd:	83 ec 0c             	sub    esp,0xc
c0028cd0:	68 18 ae 02 c0       	push   0xc002ae18
c0028cd5:	e8 21 1b ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c0028cda:	83 c4 10             	add    esp,0x10
c0028cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ce4:	8d 50 01             	lea    edx,[eax+0x1]
c0028ce7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ceb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028cee:	90                   	nop
c0028cef:	83 c4 0c             	add    esp,0xc
c0028cf2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028cf4 <ACPI::~ACPI()>:
c0028cf4:	83 ec 0c             	sub    esp,0xc
c0028cf7:	ba d4 cc 02 c0       	mov    edx,0xc002ccd4
c0028cfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d00:	89 10                	mov    DWORD PTR [eax],edx
c0028d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d06:	83 ec 0c             	sub    esp,0xc
c0028d09:	50                   	push   eax
c0028d0a:	e8 09 b9 fe ff       	call   c0014618 <Device::~Device()>
c0028d0f:	83 c4 10             	add    esp,0x10
c0028d12:	90                   	nop
c0028d13:	83 c4 0c             	add    esp,0xc
c0028d16:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028d18 <ACPI::~ACPI()>:
c0028d18:	83 ec 0c             	sub    esp,0xc
c0028d1b:	83 ec 0c             	sub    esp,0xc
c0028d1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d22:	e8 cd ff ff ff       	call   c0028cf4 <ACPI::~ACPI()>
c0028d27:	83 c4 10             	add    esp,0x10
c0028d2a:	83 ec 08             	sub    esp,0x8
c0028d2d:	68 68 12 00 00       	push   0x1268
c0028d32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d36:	e8 2b a4 fe ff       	call   c0013166 <operator delete(void*, unsigned long)>
c0028d3b:	83 c4 10             	add    esp,0x10
c0028d3e:	83 c4 0c             	add    esp,0xc
c0028d41:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028d42 <CPU::~CPU()>:
c0028d42:	83 ec 0c             	sub    esp,0xc
c0028d45:	ba 64 d1 02 c0       	mov    edx,0xc002d164
c0028d4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d4e:	89 10                	mov    DWORD PTR [eax],edx
c0028d50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d54:	83 ec 0c             	sub    esp,0xc
c0028d57:	50                   	push   eax
c0028d58:	e8 bb b8 fe ff       	call   c0014618 <Device::~Device()>
c0028d5d:	83 c4 10             	add    esp,0x10
c0028d60:	90                   	nop
c0028d61:	83 c4 0c             	add    esp,0xc
c0028d64:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028d66 <CPU::~CPU()>:
c0028d66:	83 ec 0c             	sub    esp,0xc
c0028d69:	83 ec 0c             	sub    esp,0xc
c0028d6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d70:	e8 cd ff ff ff       	call   c0028d42 <CPU::~CPU()>
c0028d75:	83 c4 10             	add    esp,0x10
c0028d78:	83 ec 08             	sub    esp,0x8
c0028d7b:	68 98 11 00 00       	push   0x1198
c0028d80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d84:	e8 dd a3 fe ff       	call   c0013166 <operator delete(void*, unsigned long)>
c0028d89:	83 c4 10             	add    esp,0x10
c0028d8c:	83 c4 0c             	add    esp,0xc
c0028d8f:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028d90 <ThreadControlBlock::ThreadControlBlock()>:
c0028d90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d94:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028d9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d9f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028da6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028daa:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028db1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028db5:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028dbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028dc0:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028dc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028dc8:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028dcc:	90                   	nop
c0028dcd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028dce <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028dce:	83 ec 0c             	sub    esp,0xc
c0028dd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dd5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ddb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ddf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028de6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dea:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028df1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028df5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028dfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dff:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028e06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e0a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028e11:	83 ec 0c             	sub    esp,0xc
c0028e14:	68 d0 ad 02 c0       	push   0xc002add0
c0028e19:	e8 28 a4 fe ff       	call   c0013246 <Dbg::kprintf(char const*, ...)>
c0028e1e:	83 c4 10             	add    esp,0x10
c0028e21:	90                   	nop
c0028e22:	83 c4 0c             	add    esp,0xc
c0028e25:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028e26 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028e26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028e2a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028e2d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028e2e <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028e2e:	90                   	nop
c0028e2f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028e30 <Vm::_FPUState::_FPUState()>:
c0028e30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e34:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028e3b:	90                   	nop
c0028e3c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028e3e <PCI::~PCI()>:
c0028e3e:	83 ec 0c             	sub    esp,0xc
c0028e41:	ba 00 f1 02 c0       	mov    edx,0xc002f100
c0028e46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e4a:	89 10                	mov    DWORD PTR [eax],edx
c0028e4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e50:	83 ec 0c             	sub    esp,0xc
c0028e53:	50                   	push   eax
c0028e54:	e8 bd b0 fe ff       	call   c0013f16 <Bus::~Bus()>
c0028e59:	83 c4 10             	add    esp,0x10
c0028e5c:	90                   	nop
c0028e5d:	83 c4 0c             	add    esp,0xc
c0028e60:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028e62 <PCI::~PCI()>:
c0028e62:	83 ec 0c             	sub    esp,0xc
c0028e65:	83 ec 0c             	sub    esp,0xc
c0028e68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e6c:	e8 cd ff ff ff       	call   c0028e3e <PCI::~PCI()>
c0028e71:	83 c4 10             	add    esp,0x10
c0028e74:	83 ec 08             	sub    esp,0x8
c0028e77:	68 58 01 00 00       	push   0x158
c0028e7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e80:	e8 e1 a2 fe ff       	call   c0013166 <operator delete(void*, unsigned long)>
c0028e85:	83 c4 10             	add    esp,0x10
c0028e88:	83 c4 0c             	add    esp,0xc
c0028e8b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028e8c <IDE::~IDE()>:
c0028e8c:	83 ec 0c             	sub    esp,0xc
c0028e8f:	ba 04 f4 02 c0       	mov    edx,0xc002f404
c0028e94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e98:	89 10                	mov    DWORD PTR [eax],edx
c0028e9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e9e:	83 ec 0c             	sub    esp,0xc
c0028ea1:	50                   	push   eax
c0028ea2:	e8 89 bb fe ff       	call   c0014a30 <HardDiskController::~HardDiskController()>
c0028ea7:	83 c4 10             	add    esp,0x10
c0028eaa:	90                   	nop
c0028eab:	83 c4 0c             	add    esp,0xc
c0028eae:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028eb0 <IDE::~IDE()>:
c0028eb0:	83 ec 0c             	sub    esp,0xc
c0028eb3:	83 ec 0c             	sub    esp,0xc
c0028eb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eba:	e8 cd ff ff ff       	call   c0028e8c <IDE::~IDE()>
c0028ebf:	83 c4 10             	add    esp,0x10
c0028ec2:	83 ec 08             	sub    esp,0x8
c0028ec5:	68 70 02 00 00       	push   0x270
c0028eca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ece:	e8 93 a2 fe ff       	call   c0013166 <operator delete(void*, unsigned long)>
c0028ed3:	83 c4 10             	add    esp,0x10
c0028ed6:	83 c4 0c             	add    esp,0xc
c0028ed9:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028eda <SATABus::~SATABus()>:
c0028eda:	83 ec 0c             	sub    esp,0xc
c0028edd:	ba 84 f5 02 c0       	mov    edx,0xc002f584
c0028ee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ee6:	89 10                	mov    DWORD PTR [eax],edx
c0028ee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eec:	83 ec 0c             	sub    esp,0xc
c0028eef:	50                   	push   eax
c0028ef0:	e8 3b bb fe ff       	call   c0014a30 <HardDiskController::~HardDiskController()>
c0028ef5:	83 c4 10             	add    esp,0x10
c0028ef8:	90                   	nop
c0028ef9:	83 c4 0c             	add    esp,0xc
c0028efc:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028efe <SATABus::~SATABus()>:
c0028efe:	83 ec 0c             	sub    esp,0xc
c0028f01:	83 ec 0c             	sub    esp,0xc
c0028f04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f08:	e8 cd ff ff ff       	call   c0028eda <SATABus::~SATABus()>
c0028f0d:	83 c4 10             	add    esp,0x10
c0028f10:	83 ec 08             	sub    esp,0x8
c0028f13:	68 64 01 00 00       	push   0x164
c0028f18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f1c:	e8 45 a2 fe ff       	call   c0013166 <operator delete(void*, unsigned long)>
c0028f21:	83 c4 10             	add    esp,0x10
c0028f24:	83 c4 0c             	add    esp,0xc
c0028f27:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028f28 <ATA::~ATA()>:
c0028f28:	83 ec 0c             	sub    esp,0xc
c0028f2b:	ba 64 f6 02 c0       	mov    edx,0xc002f664
c0028f30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f34:	89 10                	mov    DWORD PTR [eax],edx
c0028f36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f3a:	83 ec 0c             	sub    esp,0xc
c0028f3d:	50                   	push   eax
c0028f3e:	e8 cb bb fe ff       	call   c0014b0e <PhysicalDisk::~PhysicalDisk()>
c0028f43:	83 c4 10             	add    esp,0x10
c0028f46:	90                   	nop
c0028f47:	83 c4 0c             	add    esp,0xc
c0028f4a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028f4c <ATA::~ATA()>:
c0028f4c:	83 ec 0c             	sub    esp,0xc
c0028f4f:	83 ec 0c             	sub    esp,0xc
c0028f52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f56:	e8 cd ff ff ff       	call   c0028f28 <ATA::~ATA()>
c0028f5b:	83 c4 10             	add    esp,0x10
c0028f5e:	83 ec 08             	sub    esp,0x8
c0028f61:	68 7c 01 00 00       	push   0x17c
c0028f66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f6a:	e8 f7 a1 fe ff       	call   c0013166 <operator delete(void*, unsigned long)>
c0028f6f:	83 c4 10             	add    esp,0x10
c0028f72:	83 c4 0c             	add    esp,0xc
c0028f75:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028f76 <ATAPI::~ATAPI()>:
c0028f76:	83 ec 0c             	sub    esp,0xc
c0028f79:	ba 3c f7 02 c0       	mov    edx,0xc002f73c
c0028f7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f82:	89 10                	mov    DWORD PTR [eax],edx
c0028f84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f88:	83 ec 0c             	sub    esp,0xc
c0028f8b:	50                   	push   eax
c0028f8c:	e8 7d bb fe ff       	call   c0014b0e <PhysicalDisk::~PhysicalDisk()>
c0028f91:	83 c4 10             	add    esp,0x10
c0028f94:	90                   	nop
c0028f95:	83 c4 0c             	add    esp,0xc
c0028f98:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028f9a <ATAPI::~ATAPI()>:
c0028f9a:	83 ec 0c             	sub    esp,0xc
c0028f9d:	83 ec 0c             	sub    esp,0xc
c0028fa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fa4:	e8 cd ff ff ff       	call   c0028f76 <ATAPI::~ATAPI()>
c0028fa9:	83 c4 10             	add    esp,0x10
c0028fac:	83 ec 08             	sub    esp,0x8
c0028faf:	68 80 01 00 00       	push   0x180
c0028fb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fb8:	e8 a9 a1 fe ff       	call   c0013166 <operator delete(void*, unsigned long)>
c0028fbd:	83 c4 10             	add    esp,0x10
c0028fc0:	83 c4 0c             	add    esp,0xc
c0028fc3:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028fc4 <SATA::~SATA()>:
c0028fc4:	83 ec 0c             	sub    esp,0xc
c0028fc7:	ba 58 f8 02 c0       	mov    edx,0xc002f858
c0028fcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fd0:	89 10                	mov    DWORD PTR [eax],edx
c0028fd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fd6:	83 ec 0c             	sub    esp,0xc
c0028fd9:	50                   	push   eax
c0028fda:	e8 2f bb fe ff       	call   c0014b0e <PhysicalDisk::~PhysicalDisk()>
c0028fdf:	83 c4 10             	add    esp,0x10
c0028fe2:	90                   	nop
c0028fe3:	83 c4 0c             	add    esp,0xc
c0028fe6:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028fe8 <SATA::~SATA()>:
c0028fe8:	83 ec 0c             	sub    esp,0xc
c0028feb:	83 ec 0c             	sub    esp,0xc
c0028fee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ff2:	e8 cd ff ff ff       	call   c0028fc4 <SATA::~SATA()>
c0028ff7:	83 c4 10             	add    esp,0x10
c0028ffa:	83 ec 08             	sub    esp,0x8
c0028ffd:	68 7c 01 00 00       	push   0x17c
c0029002:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029006:	e8 5b a1 fe ff       	call   c0013166 <operator delete(void*, unsigned long)>
c002900b:	83 c4 10             	add    esp,0x10
c002900e:	83 c4 0c             	add    esp,0xc
c0029011:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0029012 <SATAPI::~SATAPI()>:
c0029012:	83 ec 0c             	sub    esp,0xc
c0029015:	ba 6c fa 02 c0       	mov    edx,0xc002fa6c
c002901a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002901e:	89 10                	mov    DWORD PTR [eax],edx
c0029020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029024:	83 ec 0c             	sub    esp,0xc
c0029027:	50                   	push   eax
c0029028:	e8 e1 ba fe ff       	call   c0014b0e <PhysicalDisk::~PhysicalDisk()>
c002902d:	83 c4 10             	add    esp,0x10
c0029030:	90                   	nop
c0029031:	83 c4 0c             	add    esp,0xc
c0029034:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0029036 <SATAPI::~SATAPI()>:
c0029036:	83 ec 0c             	sub    esp,0xc
c0029039:	83 ec 0c             	sub    esp,0xc
c002903c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029040:	e8 cd ff ff ff       	call   c0029012 <SATAPI::~SATAPI()>
c0029045:	83 c4 10             	add    esp,0x10
c0029048:	83 ec 08             	sub    esp,0x8
c002904b:	68 80 01 00 00       	push   0x180
c0029050:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029054:	e8 0d a1 fe ff       	call   c0013166 <operator delete(void*, unsigned long)>
c0029059:	83 c4 10             	add    esp,0x10
c002905c:	83 c4 0c             	add    esp,0xc
c002905f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0029060 <AVX::~AVX()>:
c0029060:	83 ec 0c             	sub    esp,0xc
c0029063:	ba 4c fb 02 c0       	mov    edx,0xc002fb4c
c0029068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002906c:	89 10                	mov    DWORD PTR [eax],edx
c002906e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029072:	83 ec 0c             	sub    esp,0xc
c0029075:	50                   	push   eax
c0029076:	e8 2b bb fe ff       	call   c0014ba6 <FPU::~FPU()>
c002907b:	83 c4 10             	add    esp,0x10
c002907e:	90                   	nop
c002907f:	83 c4 0c             	add    esp,0xc
c0029082:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029084 <AVX::~AVX()>:
c0029084:	83 ec 0c             	sub    esp,0xc
c0029087:	83 ec 0c             	sub    esp,0xc
c002908a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002908e:	e8 cd ff ff ff       	call   c0029060 <AVX::~AVX()>
c0029093:	83 c4 10             	add    esp,0x10
c0029096:	83 ec 08             	sub    esp,0x8
c0029099:	68 58 01 00 00       	push   0x158
c002909e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290a2:	e8 bf a0 fe ff       	call   c0013166 <operator delete(void*, unsigned long)>
c00290a7:	83 c4 10             	add    esp,0x10
c00290aa:	83 c4 0c             	add    esp,0xc
c00290ad:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c00290ae <MMX::~MMX()>:
c00290ae:	83 ec 0c             	sub    esp,0xc
c00290b1:	ba 2c fc 02 c0       	mov    edx,0xc002fc2c
c00290b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ba:	89 10                	mov    DWORD PTR [eax],edx
c00290bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290c0:	83 ec 0c             	sub    esp,0xc
c00290c3:	50                   	push   eax
c00290c4:	e8 dd ba fe ff       	call   c0014ba6 <FPU::~FPU()>
c00290c9:	83 c4 10             	add    esp,0x10
c00290cc:	90                   	nop
c00290cd:	83 c4 0c             	add    esp,0xc
c00290d0:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c00290d2 <MMX::~MMX()>:
c00290d2:	83 ec 0c             	sub    esp,0xc
c00290d5:	83 ec 0c             	sub    esp,0xc
c00290d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290dc:	e8 cd ff ff ff       	call   c00290ae <MMX::~MMX()>
c00290e1:	83 c4 10             	add    esp,0x10
c00290e4:	83 ec 08             	sub    esp,0x8
c00290e7:	68 58 01 00 00       	push   0x158
c00290ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290f0:	e8 71 a0 fe ff       	call   c0013166 <operator delete(void*, unsigned long)>
c00290f5:	83 c4 10             	add    esp,0x10
c00290f8:	83 c4 0c             	add    esp,0xc
c00290fb:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00290fc <SSE::~SSE()>:
c00290fc:	83 ec 0c             	sub    esp,0xc
c00290ff:	ba 0c fd 02 c0       	mov    edx,0xc002fd0c
c0029104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029108:	89 10                	mov    DWORD PTR [eax],edx
c002910a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002910e:	83 ec 0c             	sub    esp,0xc
c0029111:	50                   	push   eax
c0029112:	e8 8f ba fe ff       	call   c0014ba6 <FPU::~FPU()>
c0029117:	83 c4 10             	add    esp,0x10
c002911a:	90                   	nop
c002911b:	83 c4 0c             	add    esp,0xc
c002911e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0029120 <SSE::~SSE()>:
c0029120:	83 ec 0c             	sub    esp,0xc
c0029123:	83 ec 0c             	sub    esp,0xc
c0029126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002912a:	e8 cd ff ff ff       	call   c00290fc <SSE::~SSE()>
c002912f:	83 c4 10             	add    esp,0x10
c0029132:	83 ec 08             	sub    esp,0x8
c0029135:	68 58 01 00 00       	push   0x158
c002913a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002913e:	e8 23 a0 fe ff       	call   c0013166 <operator delete(void*, unsigned long)>
c0029143:	83 c4 10             	add    esp,0x10
c0029146:	83 c4 0c             	add    esp,0xc
c0029149:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002914a <x87::~x87()>:
c002914a:	83 ec 0c             	sub    esp,0xc
c002914d:	ba ec fd 02 c0       	mov    edx,0xc002fdec
c0029152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029156:	89 10                	mov    DWORD PTR [eax],edx
c0029158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002915c:	83 ec 0c             	sub    esp,0xc
c002915f:	50                   	push   eax
c0029160:	e8 41 ba fe ff       	call   c0014ba6 <FPU::~FPU()>
c0029165:	83 c4 10             	add    esp,0x10
c0029168:	90                   	nop
c0029169:	83 c4 0c             	add    esp,0xc
c002916c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002916e <x87::~x87()>:
c002916e:	83 ec 0c             	sub    esp,0xc
c0029171:	83 ec 0c             	sub    esp,0xc
c0029174:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029178:	e8 cd ff ff ff       	call   c002914a <x87::~x87()>
c002917d:	83 c4 10             	add    esp,0x10
c0029180:	83 ec 08             	sub    esp,0x8
c0029183:	68 58 01 00 00       	push   0x158
c0029188:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002918c:	e8 d5 9f fe ff       	call   c0013166 <operator delete(void*, unsigned long)>
c0029191:	83 c4 10             	add    esp,0x10
c0029194:	83 c4 0c             	add    esp,0xc
c0029197:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029198 <IOAPIC::~IOAPIC()>:
c0029198:	83 ec 0c             	sub    esp,0xc
c002919b:	ba a0 ff 02 c0       	mov    edx,0xc002ffa0
c00291a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291a4:	89 10                	mov    DWORD PTR [eax],edx
c00291a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291aa:	83 ec 0c             	sub    esp,0xc
c00291ad:	50                   	push   eax
c00291ae:	e8 65 b4 fe ff       	call   c0014618 <Device::~Device()>
c00291b3:	83 c4 10             	add    esp,0x10
c00291b6:	90                   	nop
c00291b7:	83 c4 0c             	add    esp,0xc
c00291ba:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00291bc <IOAPIC::~IOAPIC()>:
c00291bc:	83 ec 0c             	sub    esp,0xc
c00291bf:	83 ec 0c             	sub    esp,0xc
c00291c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291c6:	e8 cd ff ff ff       	call   c0029198 <IOAPIC::~IOAPIC()>
c00291cb:	83 c4 10             	add    esp,0x10
c00291ce:	83 ec 08             	sub    esp,0x8
c00291d1:	68 68 01 00 00       	push   0x168
c00291d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291da:	e8 87 9f fe ff       	call   c0013166 <operator delete(void*, unsigned long)>
c00291df:	83 c4 10             	add    esp,0x10
c00291e2:	83 c4 0c             	add    esp,0xc
c00291e5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00291e6 <APIC::~APIC()>:
c00291e6:	83 ec 0c             	sub    esp,0xc
c00291e9:	ba cc ff 02 c0       	mov    edx,0xc002ffcc
c00291ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291f2:	89 10                	mov    DWORD PTR [eax],edx
c00291f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291f8:	83 ec 0c             	sub    esp,0xc
c00291fb:	50                   	push   eax
c00291fc:	e8 47 be fe ff       	call   c0015048 <InterruptController::~InterruptController()>
c0029201:	83 c4 10             	add    esp,0x10
c0029204:	90                   	nop
c0029205:	83 c4 0c             	add    esp,0xc
c0029208:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c002920a <APIC::~APIC()>:
c002920a:	83 ec 0c             	sub    esp,0xc
c002920d:	83 ec 0c             	sub    esp,0xc
c0029210:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029214:	e8 cd ff ff ff       	call   c00291e6 <APIC::~APIC()>
c0029219:	83 c4 10             	add    esp,0x10
c002921c:	83 ec 08             	sub    esp,0x8
c002921f:	68 58 21 00 00       	push   0x2158
c0029224:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029228:	e8 39 9f fe ff       	call   c0013166 <operator delete(void*, unsigned long)>
c002922d:	83 c4 10             	add    esp,0x10
c0029230:	83 c4 0c             	add    esp,0xc
c0029233:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029234 <PIC::~PIC()>:
c0029234:	83 ec 0c             	sub    esp,0xc
c0029237:	ba d8 00 03 c0       	mov    edx,0xc00300d8
c002923c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029240:	89 10                	mov    DWORD PTR [eax],edx
c0029242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029246:	83 ec 0c             	sub    esp,0xc
c0029249:	50                   	push   eax
c002924a:	e8 f9 bd fe ff       	call   c0015048 <InterruptController::~InterruptController()>
c002924f:	83 c4 10             	add    esp,0x10
c0029252:	90                   	nop
c0029253:	83 c4 0c             	add    esp,0xc
c0029256:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029258 <PIC::~PIC()>:
c0029258:	83 ec 0c             	sub    esp,0xc
c002925b:	83 ec 0c             	sub    esp,0xc
c002925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029262:	e8 cd ff ff ff       	call   c0029234 <PIC::~PIC()>
c0029267:	83 c4 10             	add    esp,0x10
c002926a:	83 ec 08             	sub    esp,0x8
c002926d:	68 58 21 00 00       	push   0x2158
c0029272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029276:	e8 eb 9e fe ff       	call   c0013166 <operator delete(void*, unsigned long)>
c002927b:	83 c4 10             	add    esp,0x10
c002927e:	83 c4 0c             	add    esp,0xc
c0029281:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029282 <APICTimer::~APICTimer()>:
c0029282:	83 ec 0c             	sub    esp,0xc
c0029285:	ba cc 01 03 c0       	mov    edx,0xc00301cc
c002928a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002928e:	89 10                	mov    DWORD PTR [eax],edx
c0029290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029294:	83 ec 0c             	sub    esp,0xc
c0029297:	50                   	push   eax
c0029298:	e8 cb dc fe ff       	call   c0016f68 <Timer::~Timer()>
c002929d:	83 c4 10             	add    esp,0x10
c00292a0:	90                   	nop
c00292a1:	83 c4 0c             	add    esp,0xc
c00292a4:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00292a6 <APICTimer::~APICTimer()>:
c00292a6:	83 ec 0c             	sub    esp,0xc
c00292a9:	83 ec 0c             	sub    esp,0xc
c00292ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292b0:	e8 cd ff ff ff       	call   c0029282 <APICTimer::~APICTimer()>
c00292b5:	83 c4 10             	add    esp,0x10
c00292b8:	83 ec 08             	sub    esp,0x8
c00292bb:	68 60 01 00 00       	push   0x160
c00292c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292c4:	e8 9d 9e fe ff       	call   c0013166 <operator delete(void*, unsigned long)>
c00292c9:	83 c4 10             	add    esp,0x10
c00292cc:	83 c4 0c             	add    esp,0xc
c00292cf:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00292d0 <PIT::~PIT()>:
c00292d0:	83 ec 0c             	sub    esp,0xc
c00292d3:	ba bc 02 03 c0       	mov    edx,0xc00302bc
c00292d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292dc:	89 10                	mov    DWORD PTR [eax],edx
c00292de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292e2:	83 ec 0c             	sub    esp,0xc
c00292e5:	50                   	push   eax
c00292e6:	e8 7d dc fe ff       	call   c0016f68 <Timer::~Timer()>
c00292eb:	83 c4 10             	add    esp,0x10
c00292ee:	90                   	nop
c00292ef:	83 c4 0c             	add    esp,0xc
c00292f2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00292f4 <PIT::~PIT()>:
c00292f4:	83 ec 0c             	sub    esp,0xc
c00292f7:	83 ec 0c             	sub    esp,0xc
c00292fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292fe:	e8 cd ff ff ff       	call   c00292d0 <PIT::~PIT()>
c0029303:	83 c4 10             	add    esp,0x10
c0029306:	83 ec 08             	sub    esp,0x8
c0029309:	68 5c 01 00 00       	push   0x15c
c002930e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029312:	e8 4f 9e fe ff       	call   c0013166 <operator delete(void*, unsigned long)>
c0029317:	83 c4 10             	add    esp,0x10
c002931a:	83 c4 0c             	add    esp,0xc
c002931d:	c3                   	ret    
